<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7790.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">cpu_mips_handle_mmu_fault</name> <parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:39">CPUState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:66"><decl pos:start="1:47" pos:end="1:66"><type pos:start="1:47" pos:end="1:66"><name pos:start="1:47" pos:end="1:58">target_ulong</name></type> <name pos:start="1:60" pos:end="1:66">address</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:74"><decl pos:start="1:69" pos:end="1:74"><type pos:start="1:69" pos:end="1:74"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:74">rw</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:42"><decl pos:start="3:32" pos:end="3:42"><type pos:start="3:32" pos:end="3:42"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:42">mmu_idx</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:58">is_softmmu</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="9:5" pos:end="81:15">

<cpp:if pos:start="7:1" pos:end="7:30">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:30"><operator pos:start="7:5" pos:end="7:5">!</operator><call pos:start="7:6" pos:end="7:30"><name pos:start="7:6" pos:end="7:12">defined</name><argument_list pos:start="7:13" pos:end="7:30">(<argument pos:start="7:14" pos:end="7:29"><expr pos:start="7:14" pos:end="7:29"><name pos:start="7:14" pos:end="7:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:31">physical</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">prot</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">access_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="26:0"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:5"><literal type="number" pos:start="21:5" pos:end="21:5">0</literal></expr></cpp:if>

    log_cpu_state(env, 0);

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="27:5" pos:end="29:77"><expr pos:start="27:5" pos:end="29:76"><call pos:start="27:5" pos:end="29:76"><name pos:start="27:5" pos:end="27:12">qemu_log</name><argument_list pos:start="27:13" pos:end="29:76">(<argument pos:start="27:14" pos:end="27:86"><expr pos:start="27:14" pos:end="27:86"><literal type="string" pos:start="27:14" pos:end="27:21">"%s pc "</literal> <name pos:start="27:23" pos:end="27:35">TARGET_FMT_lx</name> <literal type="string" pos:start="27:37" pos:end="27:42">" ad "</literal> <name pos:start="27:44" pos:end="27:56">TARGET_FMT_lx</name> <literal type="string" pos:start="27:58" pos:end="27:86">" rw %d mmu_idx %d smmu %d\n"</literal></expr></argument>,

              <argument pos:start="29:15" pos:end="29:22"><expr pos:start="29:15" pos:end="29:22"><name pos:start="29:15" pos:end="29:22">__func__</name></expr></argument>, <argument pos:start="29:25" pos:end="29:41"><expr pos:start="29:25" pos:end="29:41"><name pos:start="29:25" pos:end="29:41"><name pos:start="29:25" pos:end="29:27">env</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:38">active_tc</name><operator pos:start="29:39" pos:end="29:39">.</operator><name pos:start="29:40" pos:end="29:41">PC</name></name></expr></argument>, <argument pos:start="29:44" pos:end="29:50"><expr pos:start="29:44" pos:end="29:50"><name pos:start="29:44" pos:end="29:50">address</name></expr></argument>, <argument pos:start="29:53" pos:end="29:54"><expr pos:start="29:53" pos:end="29:54"><name pos:start="29:53" pos:end="29:54">rw</name></expr></argument>, <argument pos:start="29:57" pos:end="29:63"><expr pos:start="29:57" pos:end="29:63"><name pos:start="29:57" pos:end="29:63">mmu_idx</name></expr></argument>, <argument pos:start="29:66" pos:end="29:75"><expr pos:start="29:66" pos:end="29:75"><name pos:start="29:66" pos:end="29:75">is_softmmu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:12"><expr pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:6">rw</name> <operator pos:start="33:8" pos:end="33:9">&amp;=</operator> <literal type="number" pos:start="33:11" pos:end="33:11">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:21">/* data access */</comment>

    <comment type="block" pos:start="39:5" pos:end="41:19">/* XXX: put correct access by using cpu_restore_state()

       correctly */</comment>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:15">access_type</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:28">ACCESS_INT</name></expr>;</expr_stmt>

<cpp:if pos:start="45:1" pos:end="45:29">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:29"><call pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:11">defined</name><argument_list pos:start="45:12" pos:end="45:29">(<argument pos:start="45:13" pos:end="45:28"><expr pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <name pos:start="47:11" pos:end="47:24">TLBRET_NOMATCH</name></expr>;</expr_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="51:5" pos:end="53:57"><expr pos:start="51:5" pos:end="53:56"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="53:56"><name pos:start="51:11" pos:end="51:30">get_physical_address</name><argument_list pos:start="51:31" pos:end="53:56">(<argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">env</name></expr></argument>, <argument pos:start="51:37" pos:end="51:45"><expr pos:start="51:37" pos:end="51:45"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:45">physical</name></expr></argument>, <argument pos:start="51:48" pos:end="51:52"><expr pos:start="51:48" pos:end="51:52"><operator pos:start="51:48" pos:end="51:48">&amp;</operator><name pos:start="51:49" pos:end="51:52">prot</name></expr></argument>,

                               <argument pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:38"><name pos:start="53:32" pos:end="53:38">address</name></expr></argument>, <argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><name pos:start="53:41" pos:end="53:42">rw</name></expr></argument>, <argument pos:start="53:45" pos:end="53:55"><expr pos:start="53:45" pos:end="53:55"><name pos:start="53:45" pos:end="53:55">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:54"><expr pos:start="55:5" pos:end="57:53"><call pos:start="55:5" pos:end="57:53"><name pos:start="55:5" pos:end="55:12">qemu_log</name><argument_list pos:start="55:13" pos:end="57:53">(<argument pos:start="55:14" pos:end="55:88"><expr pos:start="55:14" pos:end="55:88"><literal type="string" pos:start="55:14" pos:end="55:26">"%s address="</literal> <name pos:start="55:28" pos:end="55:40">TARGET_FMT_lx</name> <literal type="string" pos:start="55:42" pos:end="55:60">" ret %d physical "</literal> <name pos:start="55:62" pos:end="55:75">TARGET_FMT_plx</name> <literal type="string" pos:start="55:77" pos:end="55:88">" prot %d\n"</literal></expr></argument>,

              <argument pos:start="57:15" pos:end="57:22"><expr pos:start="57:15" pos:end="57:22"><name pos:start="57:15" pos:end="57:22">__func__</name></expr></argument>, <argument pos:start="57:25" pos:end="57:31"><expr pos:start="57:25" pos:end="57:31"><name pos:start="57:25" pos:end="57:31">address</name></expr></argument>, <argument pos:start="57:34" pos:end="57:36"><expr pos:start="57:34" pos:end="57:36"><name pos:start="57:34" pos:end="57:36">ret</name></expr></argument>, <argument pos:start="57:39" pos:end="57:46"><expr pos:start="57:39" pos:end="57:46"><name pos:start="57:39" pos:end="57:46">physical</name></expr></argument>, <argument pos:start="57:49" pos:end="57:52"><expr pos:start="57:49" pos:end="57:52"><name pos:start="57:49" pos:end="57:52">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="77:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:28">(<expr pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:14">==</operator> <name pos:start="59:16" pos:end="59:27">TLBRET_MATCH</name></expr>)</condition> <block pos:start="59:30" pos:end="67:5">{<block_content pos:start="61:8" pos:end="65:47">

       <expr_stmt pos:start="61:8" pos:end="65:47"><expr pos:start="61:8" pos:end="65:46"><name pos:start="61:8" pos:end="61:10">ret</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="65:46"><name pos:start="61:14" pos:end="61:25">tlb_set_page</name><argument_list pos:start="61:26" pos:end="65:46">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">env</name></expr></argument>, <argument pos:start="61:32" pos:end="61:57"><expr pos:start="61:32" pos:end="61:57"><name pos:start="61:32" pos:end="61:38">address</name> <operator pos:start="61:40" pos:end="61:40">&amp;</operator> <name pos:start="61:42" pos:end="61:57">TARGET_PAGE_MASK</name></expr></argument>,

                          <argument pos:start="63:27" pos:end="63:53"><expr pos:start="63:27" pos:end="63:53"><name pos:start="63:27" pos:end="63:34">physical</name> <operator pos:start="63:36" pos:end="63:36">&amp;</operator> <name pos:start="63:38" pos:end="63:53">TARGET_PAGE_MASK</name></expr></argument>, <argument pos:start="63:56" pos:end="63:59"><expr pos:start="63:56" pos:end="63:59"><name pos:start="63:56" pos:end="63:59">prot</name></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:33"><expr pos:start="65:27" pos:end="65:33"><name pos:start="65:27" pos:end="65:33">mmu_idx</name></expr></argument>, <argument pos:start="65:36" pos:end="65:45"><expr pos:start="65:36" pos:end="65:45"><name pos:start="65:36" pos:end="65:45">is_softmmu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="77:5">else if <condition pos:start="67:15" pos:end="70:0">(<expr pos:start="67:16" pos:end="67:22"><name pos:start="67:16" pos:end="67:18">ret</name> <operator pos:start="67:20" pos:end="67:20">&lt;</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>)</condition>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

    <block pos:start="71:5" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:16">

        <expr_stmt pos:start="73:9" pos:end="73:51"><expr pos:start="73:9" pos:end="73:50"><call pos:start="73:9" pos:end="73:50"><name pos:start="73:9" pos:end="73:27">raise_mmu_exception</name><argument_list pos:start="73:28" pos:end="73:50">(<argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">env</name></expr></argument>, <argument pos:start="73:34" pos:end="73:40"><expr pos:start="73:34" pos:end="73:40"><name pos:start="73:34" pos:end="73:40">address</name></expr></argument>, <argument pos:start="73:43" pos:end="73:44"><expr pos:start="73:43" pos:end="73:44"><name pos:start="73:43" pos:end="73:44">rw</name></expr></argument>, <argument pos:start="73:47" pos:end="73:49"><expr pos:start="73:47" pos:end="73:49"><name pos:start="73:47" pos:end="73:49">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:16"><expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <literal type="number" pos:start="75:15" pos:end="75:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
