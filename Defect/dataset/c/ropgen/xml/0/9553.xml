<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9553.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">check_watchpoint</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:39">offset</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:48"><decl pos:start="1:42" pos:end="1:48"><type pos:start="1:42" pos:end="1:48"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:48">len</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:59"><decl pos:start="1:51" pos:end="1:59"><type pos:start="1:51" pos:end="1:59"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:59">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">current_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPUArchState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">env</name> <init pos:start="7:23" pos:end="7:36">= <expr pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:19">pc</name></decl>, <decl pos:start="9:22" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:22" pos:end="9:28">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:22">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">CPUWatchpoint</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">wp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">cpu_flags</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:11">cpu</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:27">watchpoint_hit</name></name></expr>)</condition> <block pos:start="19:30" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <comment type="block" pos:start="21:9" pos:end="25:34">/* We re-entered the check after replacing the TB. Now raise

         * the debug interrupt so that is will trigger after the

         * current instruction. */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><call pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:21">cpu_interrupt</name><argument_list pos:start="27:22" pos:end="27:47">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">cpu</name></expr></argument>, <argument pos:start="27:28" pos:end="27:46"><expr pos:start="27:28" pos:end="27:46"><name pos:start="27:28" pos:end="27:46">CPU_INTERRUPT_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:60"><expr pos:start="33:5" pos:end="33:59"><name pos:start="33:5" pos:end="33:9">vaddr</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:30"><name pos:start="33:14" pos:end="33:16">cpu</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:30">mem_io_vaddr</name></name> <operator pos:start="33:32" pos:end="33:32">&amp;</operator> <name pos:start="33:34" pos:end="33:49">TARGET_PAGE_MASK</name><operator pos:start="33:50" pos:end="33:50">)</operator> <operator pos:start="33:52" pos:end="33:52">+</operator> <name pos:start="33:54" pos:end="33:59">offset</name></expr>;</expr_stmt>

    <macro pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:18">QTAILQ_FOREACH</name><argument_list pos:start="35:19" pos:end="35:48">(<argument pos:start="35:20" pos:end="35:21">wp</argument>, <argument pos:start="35:24" pos:end="35:40">&amp;cpu-&gt;watchpoints</argument>, <argument pos:start="35:43" pos:end="35:47">entry</argument>)</argument_list></macro> <block pos:start="35:50" pos:end="73:5">{<block_content pos:start="37:9" pos:end="71:9">

        <if_stmt pos:start="37:9" pos:end="71:9"><if pos:start="37:9" pos:end="67:9">if <condition pos:start="37:12" pos:end="39:35">(<expr pos:start="37:13" pos:end="39:34"><call pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:42">cpu_watchpoint_address_matches</name><argument_list pos:start="37:43" pos:end="37:58">(<argument pos:start="37:44" pos:end="37:45"><expr pos:start="37:44" pos:end="37:45"><name pos:start="37:44" pos:end="37:45">wp</name></expr></argument>, <argument pos:start="37:48" pos:end="37:52"><expr pos:start="37:48" pos:end="37:52"><name pos:start="37:48" pos:end="37:52">vaddr</name></expr></argument>, <argument pos:start="37:55" pos:end="37:57"><expr pos:start="37:55" pos:end="37:57"><name pos:start="37:55" pos:end="37:57">len</name></expr></argument>)</argument_list></call>

            <operator pos:start="39:13" pos:end="39:14">&amp;&amp;</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:25"><name pos:start="39:17" pos:end="39:18">wp</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:25">flags</name></name> <operator pos:start="39:27" pos:end="39:27">&amp;</operator> <name pos:start="39:29" pos:end="39:33">flags</name><operator pos:start="39:34" pos:end="39:34">)</operator></expr>)</condition> <block pos:start="39:37" pos:end="67:9">{<block_content pos:start="41:13" pos:end="65:13">

            <expr_stmt pos:start="41:13" pos:end="41:43"><expr pos:start="41:13" pos:end="41:42"><name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:14">wp</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:21">flags</name></name> <operator pos:start="41:23" pos:end="41:24">|=</operator> <name pos:start="41:26" pos:end="41:42">BP_WATCHPOINT_HIT</name></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="65:13"><if pos:start="43:13" pos:end="65:13">if <condition pos:start="43:16" pos:end="43:37">(<expr pos:start="43:17" pos:end="43:36"><operator pos:start="43:17" pos:end="43:17">!</operator><name pos:start="43:18" pos:end="43:36"><name pos:start="43:18" pos:end="43:20">cpu</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:36">watchpoint_hit</name></name></expr>)</condition> <block pos:start="43:39" pos:end="65:13">{<block_content pos:start="45:17" pos:end="63:17">

                <expr_stmt pos:start="45:17" pos:end="45:41"><expr pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:19">cpu</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:35">watchpoint_hit</name></name> <operator pos:start="45:37" pos:end="45:37">=</operator> <name pos:start="45:39" pos:end="45:40">wp</name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:41"><expr pos:start="47:17" pos:end="47:40"><call pos:start="47:17" pos:end="47:40"><name pos:start="47:17" pos:end="47:35">tb_check_watchpoint</name><argument_list pos:start="47:36" pos:end="47:40">(<argument pos:start="47:37" pos:end="47:39"><expr pos:start="47:37" pos:end="47:39"><name pos:start="47:37" pos:end="47:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="49:17" pos:end="63:17"><if pos:start="49:17" pos:end="55:17">if <condition pos:start="49:20" pos:end="49:54">(<expr pos:start="49:21" pos:end="49:53"><name pos:start="49:21" pos:end="49:29"><name pos:start="49:21" pos:end="49:22">wp</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:29">flags</name></name> <operator pos:start="49:31" pos:end="49:31">&amp;</operator> <name pos:start="49:33" pos:end="49:53">BP_STOP_BEFORE_ACCESS</name></expr>)</condition> <block pos:start="49:56" pos:end="55:17">{<block_content pos:start="51:21" pos:end="53:39">

                    <expr_stmt pos:start="51:21" pos:end="51:54"><expr pos:start="51:21" pos:end="51:53"><name pos:start="51:21" pos:end="51:40"><name pos:start="51:21" pos:end="51:23">cpu</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:40">exception_index</name></name> <operator pos:start="51:42" pos:end="51:42">=</operator> <name pos:start="51:44" pos:end="51:53">EXCP_DEBUG</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="53:21" pos:end="53:39"><expr pos:start="53:21" pos:end="53:38"><call pos:start="53:21" pos:end="53:38"><name pos:start="53:21" pos:end="53:33">cpu_loop_exit</name><argument_list pos:start="53:34" pos:end="53:38">(<argument pos:start="53:35" pos:end="53:37"><expr pos:start="53:35" pos:end="53:37"><name pos:start="53:35" pos:end="53:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="55:19" pos:end="63:17">else <block pos:start="55:24" pos:end="63:17">{<block_content pos:start="57:21" pos:end="61:54">

                    <expr_stmt pos:start="57:21" pos:end="57:73"><expr pos:start="57:21" pos:end="57:72"><call pos:start="57:21" pos:end="57:72"><name pos:start="57:21" pos:end="57:40">cpu_get_tb_cpu_state</name><argument_list pos:start="57:41" pos:end="57:72">(<argument pos:start="57:42" pos:end="57:44"><expr pos:start="57:42" pos:end="57:44"><name pos:start="57:42" pos:end="57:44">env</name></expr></argument>, <argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><operator pos:start="57:47" pos:end="57:47">&amp;</operator><name pos:start="57:48" pos:end="57:49">pc</name></expr></argument>, <argument pos:start="57:52" pos:end="57:59"><expr pos:start="57:52" pos:end="57:59"><operator pos:start="57:52" pos:end="57:52">&amp;</operator><name pos:start="57:53" pos:end="57:59">cs_base</name></expr></argument>, <argument pos:start="57:62" pos:end="57:71"><expr pos:start="57:62" pos:end="57:71"><operator pos:start="57:62" pos:end="57:62">&amp;</operator><name pos:start="57:63" pos:end="57:71">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:64"><expr pos:start="59:21" pos:end="59:63"><call pos:start="59:21" pos:end="59:63"><name pos:start="59:21" pos:end="59:31">tb_gen_code</name><argument_list pos:start="59:32" pos:end="59:63">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:35">cpu</name></expr></argument>, <argument pos:start="59:38" pos:end="59:39"><expr pos:start="59:38" pos:end="59:39"><name pos:start="59:38" pos:end="59:39">pc</name></expr></argument>, <argument pos:start="59:42" pos:end="59:48"><expr pos:start="59:42" pos:end="59:48"><name pos:start="59:42" pos:end="59:48">cs_base</name></expr></argument>, <argument pos:start="59:51" pos:end="59:59"><expr pos:start="59:51" pos:end="59:59"><name pos:start="59:51" pos:end="59:59">cpu_flags</name></expr></argument>, <argument pos:start="59:62" pos:end="59:62"><expr pos:start="59:62" pos:end="59:62"><literal type="number" pos:start="59:62" pos:end="59:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="61:54"><expr pos:start="61:21" pos:end="61:53"><call pos:start="61:21" pos:end="61:53"><name pos:start="61:21" pos:end="61:42">cpu_resume_from_signal</name><argument_list pos:start="61:43" pos:end="61:53">(<argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><name pos:start="61:44" pos:end="61:46">cpu</name></expr></argument>, <argument pos:start="61:49" pos:end="61:52"><expr pos:start="61:49" pos:end="61:52"><name pos:start="61:49" pos:end="61:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:44">

            <expr_stmt pos:start="69:13" pos:end="69:44"><expr pos:start="69:13" pos:end="69:43"><name pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:14">wp</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:21">flags</name></name> <operator pos:start="69:23" pos:end="69:24">&amp;=</operator> <operator pos:start="69:26" pos:end="69:26">~</operator><name pos:start="69:27" pos:end="69:43">BP_WATCHPOINT_HIT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
