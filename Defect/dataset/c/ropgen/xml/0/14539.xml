<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14539.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">arm_load_kernel</name><parameter_list pos:start="1:21" pos:end="1:63">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:34"><name pos:start="1:22" pos:end="1:29">CPUState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">env</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:62"><decl pos:start="1:37" pos:end="1:62"><type pos:start="1:37" pos:end="1:62"><name pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:42">struct</name> <name pos:start="1:44" pos:end="1:56">arm_boot_info</name></name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">is_linux</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">target_phys_addr_t</name></type> <name pos:start="15:24" pos:end="15:28">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">big_endian</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:27">/* Load the kernel.  */</comment>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:31">(<expr pos:start="23:9" pos:end="23:30"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:13">info</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:30">kernel_filename</name></name></expr>)</condition> <block pos:start="23:33" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:16">

        <expr_stmt pos:start="25:9" pos:end="25:60"><expr pos:start="25:9" pos:end="25:59"><call pos:start="25:9" pos:end="25:59"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:59">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:58"><expr pos:start="25:25" pos:end="25:58"><literal type="string" pos:start="25:25" pos:end="25:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:40">(<expr pos:start="33:9" pos:end="33:39"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:39"><name pos:start="33:10" pos:end="33:13">info</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:39">secondary_cpu_reset_hook</name></name></expr>)</condition> <block pos:start="33:42" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:65">

        <expr_stmt pos:start="35:9" pos:end="35:65"><expr pos:start="35:9" pos:end="35:64"><name pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:12">info</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:38">secondary_cpu_reset_hook</name></name> <operator pos:start="35:40" pos:end="35:40">=</operator> <name pos:start="35:42" pos:end="35:64">default_reset_secondary</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:36">(<expr pos:start="39:9" pos:end="39:35"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:35"><name pos:start="39:10" pos:end="39:13">info</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:35">write_secondary_boot</name></name></expr>)</condition> <block pos:start="39:38" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:61">

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:12">info</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:34">write_secondary_boot</name></name> <operator pos:start="41:36" pos:end="41:36">=</operator> <name pos:start="41:38" pos:end="41:60">default_write_secondary</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="54:0"><if pos:start="47:5" pos:end="54:0">if <condition pos:start="47:8" pos:end="47:27">(<expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:12">info</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:21">nb_cpus</name></name> <operator pos:start="47:23" pos:end="47:24">==</operator> <literal type="number" pos:start="47:26" pos:end="47:26">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="54:0"><block_content pos:start="49:9" pos:end="54:0">

        <expr_stmt pos:start="49:9" pos:end="54:0"><expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:12">info</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:21">nb_cpus</name></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <literal type="number" pos:start="49:25" pos:end="49:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="53:1" pos:end="53:29">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:14">big_endian</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="59:5" pos:end="62:0"><expr pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:14">big_endian</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="65:5" pos:end="65:76">/* Assume that raw images are linux kernels, and ELF images are not.  */</comment>

    <expr_stmt pos:start="67:5" pos:end="69:67"><expr pos:start="67:5" pos:end="69:66"><name pos:start="67:5" pos:end="67:15">kernel_size</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="69:66"><name pos:start="67:19" pos:end="67:26">load_elf</name><argument_list pos:start="67:27" pos:end="69:66">(<argument pos:start="67:28" pos:end="67:48"><expr pos:start="67:28" pos:end="67:48"><name pos:start="67:28" pos:end="67:48"><name pos:start="67:28" pos:end="67:31">info</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:48">kernel_filename</name></name></expr></argument>, <argument pos:start="67:51" pos:end="67:54"><expr pos:start="67:51" pos:end="67:54"><name pos:start="67:51" pos:end="67:54">NULL</name></expr></argument>, <argument pos:start="67:57" pos:end="67:60"><expr pos:start="67:57" pos:end="67:60"><name pos:start="67:57" pos:end="67:60">NULL</name></expr></argument>, <argument pos:start="67:63" pos:end="67:72"><expr pos:start="67:63" pos:end="67:72"><operator pos:start="67:63" pos:end="67:63">&amp;</operator><name pos:start="67:64" pos:end="67:72">elf_entry</name></expr></argument>,

                           <argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">NULL</name></expr></argument>, <argument pos:start="69:34" pos:end="69:37"><expr pos:start="69:34" pos:end="69:37"><name pos:start="69:34" pos:end="69:37">NULL</name></expr></argument>, <argument pos:start="69:40" pos:end="69:49"><expr pos:start="69:40" pos:end="69:49"><name pos:start="69:40" pos:end="69:49">big_endian</name></expr></argument>, <argument pos:start="69:52" pos:end="69:62"><expr pos:start="69:52" pos:end="69:62"><name pos:start="69:52" pos:end="69:62">ELF_MACHINE</name></expr></argument>, <argument pos:start="69:65" pos:end="69:65"><expr pos:start="69:65" pos:end="69:65"><literal type="number" pos:start="69:65" pos:end="69:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:9">entry</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:21">elf_entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:24">(<expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:19">kernel_size</name> <operator pos:start="73:21" pos:end="73:21">&lt;</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition> <block pos:start="73:26" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:45">

        <expr_stmt pos:start="75:9" pos:end="77:45"><expr pos:start="75:9" pos:end="77:44"><name pos:start="75:9" pos:end="75:19">kernel_size</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="77:44"><name pos:start="75:23" pos:end="75:33">load_uimage</name><argument_list pos:start="75:34" pos:end="77:44">(<argument pos:start="75:35" pos:end="75:55"><expr pos:start="75:35" pos:end="75:55"><name pos:start="75:35" pos:end="75:55"><name pos:start="75:35" pos:end="75:38">info</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:55">kernel_filename</name></name></expr></argument>, <argument pos:start="75:58" pos:end="75:63"><expr pos:start="75:58" pos:end="75:63"><operator pos:start="75:58" pos:end="75:58">&amp;</operator><name pos:start="75:59" pos:end="75:63">entry</name></expr></argument>, <argument pos:start="75:66" pos:end="75:69"><expr pos:start="75:66" pos:end="75:69"><name pos:start="75:66" pos:end="75:69">NULL</name></expr></argument>,

                                  <argument pos:start="77:35" pos:end="77:43"><expr pos:start="77:35" pos:end="77:43"><operator pos:start="77:35" pos:end="77:35">&amp;</operator><name pos:start="77:36" pos:end="77:43">is_linux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:24">(<expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:19">kernel_size</name> <operator pos:start="81:21" pos:end="81:21">&lt;</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>)</condition> <block pos:start="81:26" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:21">

        <expr_stmt pos:start="83:9" pos:end="83:54"><expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:13">entry</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:34"><name pos:start="83:17" pos:end="83:20">info</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:34">loader_start</name></name> <operator pos:start="83:36" pos:end="83:36">+</operator> <name pos:start="83:38" pos:end="83:53">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="87:71"><expr pos:start="85:9" pos:end="87:70"><name pos:start="85:9" pos:end="85:19">kernel_size</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="87:70"><name pos:start="85:23" pos:end="85:41">load_image_targphys</name><argument_list pos:start="85:42" pos:end="87:70">(<argument pos:start="85:43" pos:end="85:63"><expr pos:start="85:43" pos:end="85:63"><name pos:start="85:43" pos:end="85:63"><name pos:start="85:43" pos:end="85:46">info</name><operator pos:start="85:47" pos:end="85:48">-&gt;</operator><name pos:start="85:49" pos:end="85:63">kernel_filename</name></name></expr></argument>, <argument pos:start="85:66" pos:end="85:70"><expr pos:start="85:66" pos:end="85:70"><name pos:start="85:66" pos:end="85:70">entry</name></expr></argument>,

                                          <argument pos:start="87:43" pos:end="87:69"><expr pos:start="87:43" pos:end="87:69"><name pos:start="87:43" pos:end="87:50">ram_size</name> <operator pos:start="87:52" pos:end="87:52">-</operator> <name pos:start="87:54" pos:end="87:69">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:21"><expr pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:16">is_linux</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:24">(<expr pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:19">kernel_size</name> <operator pos:start="93:21" pos:end="93:21">&lt;</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>)</condition> <block pos:start="93:26" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:16">

        <expr_stmt pos:start="95:9" pos:end="97:39"><expr pos:start="95:9" pos:end="97:38"><call pos:start="95:9" pos:end="97:38"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="97:38">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>, <argument pos:start="95:25" pos:end="95:60"><expr pos:start="95:25" pos:end="95:60"><literal type="string" pos:start="95:25" pos:end="95:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="97:17" pos:end="97:37"><expr pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:20">info</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:37">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:16"><expr pos:start="99:9" pos:end="99:15"><call pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:12">exit</name><argument_list pos:start="99:13" pos:end="99:15">(<argument pos:start="99:14" pos:end="99:14"><expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:24"><expr pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:15"><name pos:start="103:5" pos:end="103:8">info</name><operator pos:start="103:9" pos:end="103:10">-&gt;</operator><name pos:start="103:11" pos:end="103:15">entry</name></name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:23">entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="159:5"><if pos:start="105:5" pos:end="159:5">if <condition pos:start="105:8" pos:end="105:17">(<expr pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:16">is_linux</name></expr>)</condition> <block pos:start="105:19" pos:end="159:5">{<block_content pos:start="107:9" pos:end="157:40">

        <if_stmt pos:start="107:9" pos:end="131:9"><if pos:start="107:9" pos:end="127:9">if <condition pos:start="107:12" pos:end="107:34">(<expr pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:16">info</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:33">initrd_filename</name></name></expr>)</condition> <block pos:start="107:36" pos:end="127:9">{<block_content pos:start="109:13" pos:end="125:13">

            <expr_stmt pos:start="109:13" pos:end="115:75"><expr pos:start="109:13" pos:end="115:74"><name pos:start="109:13" pos:end="109:23">initrd_size</name> <operator pos:start="109:25" pos:end="109:25">=</operator> <call pos:start="109:27" pos:end="115:74"><name pos:start="109:27" pos:end="109:45">load_image_targphys</name><argument_list pos:start="109:46" pos:end="115:74">(<argument pos:start="109:47" pos:end="109:67"><expr pos:start="109:47" pos:end="109:67"><name pos:start="109:47" pos:end="109:67"><name pos:start="109:47" pos:end="109:50">info</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:67">initrd_filename</name></name></expr></argument>,

                                              <argument pos:start="111:47" pos:end="113:64"><expr pos:start="111:47" pos:end="113:64"><name pos:start="111:47" pos:end="111:64"><name pos:start="111:47" pos:end="111:50">info</name><operator pos:start="111:51" pos:end="111:52">-&gt;</operator><name pos:start="111:53" pos:end="111:64">loader_start</name></name>

                                              <operator pos:start="113:47" pos:end="113:47">+</operator> <name pos:start="113:49" pos:end="113:64">INITRD_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="115:47" pos:end="115:73"><expr pos:start="115:47" pos:end="115:73"><name pos:start="115:47" pos:end="115:54">ram_size</name> <operator pos:start="115:56" pos:end="115:56">-</operator> <name pos:start="115:58" pos:end="115:73">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:32">(<expr pos:start="117:17" pos:end="117:31"><name pos:start="117:17" pos:end="117:27">initrd_size</name> <operator pos:start="117:29" pos:end="117:29">&lt;</operator> <literal type="number" pos:start="117:31" pos:end="117:31">0</literal></expr>)</condition> <block pos:start="117:34" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:24">

                <expr_stmt pos:start="119:17" pos:end="121:47"><expr pos:start="119:17" pos:end="121:46"><call pos:start="119:17" pos:end="121:46"><name pos:start="119:17" pos:end="119:23">fprintf</name><argument_list pos:start="119:24" pos:end="121:46">(<argument pos:start="119:25" pos:end="119:30"><expr pos:start="119:25" pos:end="119:30"><name pos:start="119:25" pos:end="119:30">stderr</name></expr></argument>, <argument pos:start="119:33" pos:end="119:68"><expr pos:start="119:33" pos:end="119:68"><literal type="string" pos:start="119:33" pos:end="119:68">"qemu: could not load initrd '%s'\n"</literal></expr></argument>,

                        <argument pos:start="121:25" pos:end="121:45"><expr pos:start="121:25" pos:end="121:45"><name pos:start="121:25" pos:end="121:45"><name pos:start="121:25" pos:end="121:28">info</name><operator pos:start="121:29" pos:end="121:30">-&gt;</operator><name pos:start="121:31" pos:end="121:45">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:24"><expr pos:start="123:17" pos:end="123:23"><call pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:20">exit</name><argument_list pos:start="123:21" pos:end="123:23">(<argument pos:start="123:22" pos:end="123:22"><expr pos:start="123:22" pos:end="123:22"><literal type="number" pos:start="123:22" pos:end="123:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="131:9">else <block pos:start="127:16" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:28">

            <expr_stmt pos:start="129:13" pos:end="129:28"><expr pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:23">initrd_size</name> <operator pos:start="129:25" pos:end="129:25">=</operator> <literal type="number" pos:start="129:27" pos:end="129:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:47"><expr pos:start="133:9" pos:end="133:46"><name pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:18">bootloader</name><index pos:start="133:19" pos:end="133:21">[<expr pos:start="133:20" pos:end="133:20"><literal type="number" pos:start="133:20" pos:end="133:20">1</literal></expr>]</index></name> <operator pos:start="133:23" pos:end="133:24">|=</operator> <name pos:start="133:26" pos:end="133:39"><name pos:start="133:26" pos:end="133:29">info</name><operator pos:start="133:30" pos:end="133:31">-&gt;</operator><name pos:start="133:32" pos:end="133:39">board_id</name></name> <operator pos:start="133:41" pos:end="133:41">&amp;</operator> <literal type="number" pos:start="133:43" pos:end="133:46">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:54"><expr pos:start="135:9" pos:end="135:53"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:18">bootloader</name><index pos:start="135:19" pos:end="135:21">[<expr pos:start="135:20" pos:end="135:20"><literal type="number" pos:start="135:20" pos:end="135:20">2</literal></expr>]</index></name> <operator pos:start="135:23" pos:end="135:24">|=</operator> <operator pos:start="135:26" pos:end="135:26">(</operator><name pos:start="135:27" pos:end="135:40"><name pos:start="135:27" pos:end="135:30">info</name><operator pos:start="135:31" pos:end="135:32">-&gt;</operator><name pos:start="135:33" pos:end="135:40">board_id</name></name> <operator pos:start="135:42" pos:end="135:43">&gt;&gt;</operator> <literal type="number" pos:start="135:45" pos:end="135:45">8</literal><operator pos:start="135:46" pos:end="135:46">)</operator> <operator pos:start="135:48" pos:end="135:48">&amp;</operator> <literal type="number" pos:start="135:50" pos:end="135:53">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:62"><expr pos:start="137:9" pos:end="137:61"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:18">bootloader</name><index pos:start="137:19" pos:end="137:21">[<expr pos:start="137:20" pos:end="137:20"><literal type="number" pos:start="137:20" pos:end="137:20">5</literal></expr>]</index></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:42"><name pos:start="137:25" pos:end="137:28">info</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:42">loader_start</name></name> <operator pos:start="137:44" pos:end="137:44">+</operator> <name pos:start="137:46" pos:end="137:61">KERNEL_ARGS_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:30"><expr pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:18">bootloader</name><index pos:start="139:19" pos:end="139:21">[<expr pos:start="139:20" pos:end="139:20"><literal type="number" pos:start="139:20" pos:end="139:20">6</literal></expr>]</index></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:29">entry</name></expr>;</expr_stmt>

        <for pos:start="141:9" pos:end="145:9">for <control pos:start="141:13" pos:end="141:52">(<init pos:start="141:14" pos:end="141:19"><expr pos:start="141:14" pos:end="141:18"><name pos:start="141:14" pos:end="141:14">n</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <literal type="number" pos:start="141:18" pos:end="141:18">0</literal></expr>;</init> <condition pos:start="141:21" pos:end="141:47"><expr pos:start="141:21" pos:end="141:46"><name pos:start="141:21" pos:end="141:21">n</name> <operator pos:start="141:23" pos:end="141:23">&lt;</operator> <sizeof pos:start="141:25" pos:end="141:42">sizeof<argument_list pos:start="141:31" pos:end="141:42">(<argument pos:start="141:32" pos:end="141:41"><expr pos:start="141:32" pos:end="141:41"><name pos:start="141:32" pos:end="141:41">bootloader</name></expr></argument>)</argument_list></sizeof> <operator pos:start="141:44" pos:end="141:44">/</operator> <literal type="number" pos:start="141:46" pos:end="141:46">4</literal></expr>;</condition> <incr pos:start="141:49" pos:end="141:51"><expr pos:start="141:49" pos:end="141:51"><name pos:start="141:49" pos:end="141:49">n</name><operator pos:start="141:50" pos:end="141:51">++</operator></expr></incr>)</control> <block pos:start="141:54" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:51">

            <expr_stmt pos:start="143:13" pos:end="143:51"><expr pos:start="143:13" pos:end="143:50"><name pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:22">bootloader</name><index pos:start="143:23" pos:end="143:25">[<expr pos:start="143:24" pos:end="143:24"><name pos:start="143:24" pos:end="143:24">n</name></expr>]</index></name> <operator pos:start="143:27" pos:end="143:27">=</operator> <call pos:start="143:29" pos:end="143:50"><name pos:start="143:29" pos:end="143:35">tswap32</name><argument_list pos:start="143:36" pos:end="143:50">(<argument pos:start="143:37" pos:end="143:49"><expr pos:start="143:37" pos:end="143:49"><name pos:start="143:37" pos:end="143:49"><name pos:start="143:37" pos:end="143:46">bootloader</name><index pos:start="143:47" pos:end="143:49">[<expr pos:start="143:48" pos:end="143:48"><name pos:start="143:48" pos:end="143:48">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="147:9" pos:end="149:47"><expr pos:start="147:9" pos:end="149:46"><call pos:start="147:9" pos:end="149:46"><name pos:start="147:9" pos:end="147:26">rom_add_blob_fixed</name><argument_list pos:start="147:27" pos:end="149:46">(<argument pos:start="147:28" pos:end="147:39"><expr pos:start="147:28" pos:end="147:39"><literal type="string" pos:start="147:28" pos:end="147:39">"bootloader"</literal></expr></argument>, <argument pos:start="147:42" pos:end="147:51"><expr pos:start="147:42" pos:end="147:51"><name pos:start="147:42" pos:end="147:51">bootloader</name></expr></argument>, <argument pos:start="147:54" pos:end="147:71"><expr pos:start="147:54" pos:end="147:71"><sizeof pos:start="147:54" pos:end="147:71">sizeof<argument_list pos:start="147:60" pos:end="147:71">(<argument pos:start="147:61" pos:end="147:70"><expr pos:start="147:61" pos:end="147:70"><name pos:start="147:61" pos:end="147:70">bootloader</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="149:28" pos:end="149:45"><expr pos:start="149:28" pos:end="149:45"><name pos:start="149:28" pos:end="149:45"><name pos:start="149:28" pos:end="149:31">info</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:45">loader_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:30">(<expr pos:start="151:13" pos:end="151:29"><name pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:16">info</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:25">nb_cpus</name></name> <operator pos:start="151:27" pos:end="151:27">&gt;</operator> <literal type="number" pos:start="151:29" pos:end="151:29">1</literal></expr>)</condition> <block pos:start="151:32" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:50">

            <expr_stmt pos:start="153:13" pos:end="153:50"><expr pos:start="153:13" pos:end="153:49"><call pos:start="153:13" pos:end="153:49"><name pos:start="153:13" pos:end="153:38"><name pos:start="153:13" pos:end="153:16">info</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:38">write_secondary_boot</name></name><argument_list pos:start="153:39" pos:end="153:49">(<argument pos:start="153:40" pos:end="153:42"><expr pos:start="153:40" pos:end="153:42"><name pos:start="153:40" pos:end="153:42">env</name></expr></argument>, <argument pos:start="153:45" pos:end="153:48"><expr pos:start="153:45" pos:end="153:48"><name pos:start="153:45" pos:end="153:48">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:40"><expr pos:start="157:9" pos:end="157:39"><name pos:start="157:9" pos:end="157:25"><name pos:start="157:9" pos:end="157:12">info</name><operator pos:start="157:13" pos:end="157:14">-&gt;</operator><name pos:start="157:15" pos:end="157:25">initrd_size</name></name> <operator pos:start="157:27" pos:end="157:27">=</operator> <name pos:start="157:29" pos:end="157:39">initrd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:30"><expr pos:start="161:5" pos:end="161:29"><name pos:start="161:5" pos:end="161:18"><name pos:start="161:5" pos:end="161:8">info</name><operator pos:start="161:9" pos:end="161:10">-&gt;</operator><name pos:start="161:11" pos:end="161:18">is_linux</name></name> <operator pos:start="161:20" pos:end="161:20">=</operator> <name pos:start="161:22" pos:end="161:29">is_linux</name></expr>;</expr_stmt>



    <for pos:start="165:5" pos:end="171:5">for <control pos:start="165:9" pos:end="165:36">(<init pos:start="165:10" pos:end="165:10">;</init> <condition pos:start="165:12" pos:end="165:15"><expr pos:start="165:12" pos:end="165:14"><name pos:start="165:12" pos:end="165:14">env</name></expr>;</condition> <incr pos:start="165:17" pos:end="165:35"><expr pos:start="165:17" pos:end="165:35"><name pos:start="165:17" pos:end="165:19">env</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <name pos:start="165:23" pos:end="165:35"><name pos:start="165:23" pos:end="165:25">env</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:35">next_cpu</name></name></expr></incr>)</control> <block pos:start="165:38" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:47">

        <expr_stmt pos:start="167:9" pos:end="167:30"><expr pos:start="167:9" pos:end="167:29"><name pos:start="167:9" pos:end="167:22"><name pos:start="167:9" pos:end="167:11">env</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:22">boot_info</name></name> <operator pos:start="167:24" pos:end="167:24">=</operator> <name pos:start="167:26" pos:end="167:29">info</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:47"><expr pos:start="169:9" pos:end="169:46"><call pos:start="169:9" pos:end="169:46"><name pos:start="169:9" pos:end="169:27">qemu_register_reset</name><argument_list pos:start="169:28" pos:end="169:46">(<argument pos:start="169:29" pos:end="169:40"><expr pos:start="169:29" pos:end="169:40"><name pos:start="169:29" pos:end="169:40">do_cpu_reset</name></expr></argument>, <argument pos:start="169:43" pos:end="169:45"><expr pos:start="169:43" pos:end="169:45"><name pos:start="169:43" pos:end="169:45">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
