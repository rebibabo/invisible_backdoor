<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17127.c" pos:tabs="8"><function pos:start="1:1" pos:end="359:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">read_access_unit</name><parameter_list pos:start="1:28" pos:end="3:61">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name><modifier pos:start="1:56" pos:end="1:56">*</modifier></type> <name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">data_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">uint8_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="359:1">{<block_content pos:start="7:5" pos:end="357:14">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MLPDecodeContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">m</name> <init pos:start="7:25" pos:end="7:42">= <expr pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:31">avctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">GetBitContext</name></type> <name pos:start="9:19" pos:end="9:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:23">length</name></decl>, <decl pos:start="11:26" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:26" pos:end="11:31">substr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:32">substream_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:28">header_size</name> <init pos:start="15:30" pos:end="15:32">= <expr pos:start="15:32" pos:end="15:32"><literal type="number" pos:start="15:32" pos:end="15:32">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:40"><decl pos:start="17:5" pos:end="17:39"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:35">substr_header_size</name> <init pos:start="17:37" pos:end="17:39">= <expr pos:start="17:39" pos:end="17:39"><literal type="number" pos:start="17:39" pos:end="17:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:53"><decl pos:start="19:5" pos:end="19:52"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:52"><name pos:start="19:13" pos:end="19:36">substream_parity_present</name><index pos:start="19:37" pos:end="19:52">[<expr pos:start="19:38" pos:end="19:51"><name pos:start="19:38" pos:end="19:51">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:48"><decl pos:start="21:5" pos:end="21:47"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint16_t</name></type> <name pos:start="21:14" pos:end="21:47"><name pos:start="21:14" pos:end="21:31">substream_data_len</name><index pos:start="21:32" pos:end="21:47">[<expr pos:start="21:33" pos:end="21:46"><name pos:start="21:33" pos:end="21:46">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:23">parity_bits</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:17"><if pos:start="27:5" pos:end="29:17">if <condition pos:start="27:8" pos:end="27:21">(<expr pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <literal type="number" pos:start="27:20" pos:end="27:20">4</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:10">length</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <operator pos:start="33:14" pos:end="33:14">(</operator><call pos:start="33:15" pos:end="33:26"><name pos:start="33:15" pos:end="33:21">AV_RB16</name><argument_list pos:start="33:22" pos:end="33:26">(<argument pos:start="33:23" pos:end="33:25"><expr pos:start="33:23" pos:end="33:25"><name pos:start="33:23" pos:end="33:25">buf</name></expr></argument>)</argument_list></call> <operator pos:start="33:28" pos:end="33:28">&amp;</operator> <literal type="number" pos:start="33:30" pos:end="33:34">0xfff</literal><operator pos:start="33:35" pos:end="33:35">)</operator> <operator pos:start="33:37" pos:end="33:37">*</operator> <literal type="number" pos:start="33:39" pos:end="33:39">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="39:18"><if pos:start="37:5" pos:end="39:18">if <condition pos:start="37:8" pos:end="37:26">(<expr pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:14">length</name> <operator pos:start="37:16" pos:end="37:16">&gt;</operator> <name pos:start="37:18" pos:end="37:25">buf_size</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:18"><block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:52"><expr pos:start="43:5" pos:end="43:51"><call pos:start="43:5" pos:end="43:51"><name pos:start="43:5" pos:end="43:17">init_get_bits</name><argument_list pos:start="43:18" pos:end="43:51">(<argument pos:start="43:19" pos:end="43:21"><expr pos:start="43:19" pos:end="43:21"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:21">gb</name></expr></argument>, <argument pos:start="43:24" pos:end="43:32"><expr pos:start="43:24" pos:end="43:32"><operator pos:start="43:24" pos:end="43:24">(</operator><name pos:start="43:25" pos:end="43:27">buf</name> <operator pos:start="43:29" pos:end="43:29">+</operator> <literal type="number" pos:start="43:31" pos:end="43:31">4</literal><operator pos:start="43:32" pos:end="43:32">)</operator></expr></argument>, <argument pos:start="43:35" pos:end="43:50"><expr pos:start="43:35" pos:end="43:50"><operator pos:start="43:35" pos:end="43:35">(</operator><name pos:start="43:36" pos:end="43:41">length</name> <operator pos:start="43:43" pos:end="43:43">-</operator> <literal type="number" pos:start="43:45" pos:end="43:45">4</literal><operator pos:start="43:46" pos:end="43:46">)</operator> <operator pos:start="43:48" pos:end="43:48">*</operator> <literal type="number" pos:start="43:50" pos:end="43:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:53">(<expr pos:start="47:9" pos:end="47:52"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:22">show_bits_long</name><argument_list pos:start="47:23" pos:end="47:31">(<argument pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:26">gb</name></expr></argument>, <argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><literal type="number" pos:start="47:29" pos:end="47:30">31</literal></expr></argument>)</argument_list></call> <operator pos:start="47:33" pos:end="47:34">==</operator> <operator pos:start="47:36" pos:end="47:36">(</operator><literal type="number" pos:start="47:37" pos:end="47:46">0xf8726fba</literal> <operator pos:start="47:48" pos:end="47:49">&gt;&gt;</operator> <literal type="number" pos:start="47:51" pos:end="47:51">1</literal><operator pos:start="47:52" pos:end="47:52">)</operator></expr>)</condition> <block pos:start="47:55" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:26">

        <if_stmt pos:start="49:9" pos:end="51:23"><if pos:start="49:9" pos:end="51:23">if <condition pos:start="49:12" pos:end="49:40">(<expr pos:start="49:13" pos:end="49:39"><call pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:27">read_major_sync</name><argument_list pos:start="49:28" pos:end="49:35">(<argument pos:start="49:29" pos:end="49:29"><expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">m</name></expr></argument>, <argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="49:37" pos:end="49:37">&lt;</operator> <literal type="number" pos:start="49:39" pos:end="49:39">0</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:23"><block_content pos:start="51:13" pos:end="51:23">

            <goto pos:start="51:13" pos:end="51:23">goto <name pos:start="51:18" pos:end="51:22">error</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:19">header_size</name> <operator pos:start="53:21" pos:end="53:22">+=</operator> <literal type="number" pos:start="53:24" pos:end="53:25">28</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:25">(<expr pos:start="59:9" pos:end="59:24"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:24"><name pos:start="59:10" pos:end="59:10">m</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:24">params_valid</name></name></expr>)</condition> <block pos:start="59:27" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:22">

        <expr_stmt pos:start="61:9" pos:end="63:64"><expr pos:start="61:9" pos:end="63:63"><call pos:start="61:9" pos:end="63:63"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:63">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:16">m</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">avctx</name></name></expr></argument>, <argument pos:start="61:26" pos:end="61:39"><expr pos:start="61:26" pos:end="61:39"><name pos:start="61:26" pos:end="61:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="63:16" pos:end="63:62"><expr pos:start="63:16" pos:end="63:62"><literal type="string" pos:start="63:16" pos:end="63:62">"Stream parameters not seen; skipping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><operator pos:start="65:9" pos:end="65:9">*</operator><name pos:start="65:10" pos:end="65:18">data_size</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">0</literal></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:22">return <expr pos:start="67:16" pos:end="67:21"><name pos:start="67:16" pos:end="67:21">length</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:24"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:19">substream_start</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>;</expr_stmt>



    <for pos:start="77:5" pos:end="153:5">for <control pos:start="77:9" pos:end="77:58">(<init pos:start="77:10" pos:end="77:20"><expr pos:start="77:10" pos:end="77:19"><name pos:start="77:10" pos:end="77:15">substr</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>;</init> <condition pos:start="77:22" pos:end="77:48"><expr pos:start="77:22" pos:end="77:47"><name pos:start="77:22" pos:end="77:27">substr</name> <operator pos:start="77:29" pos:end="77:29">&lt;</operator> <name pos:start="77:31" pos:end="77:47"><name pos:start="77:31" pos:end="77:31">m</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:47">num_substreams</name></name></expr>;</condition> <incr pos:start="77:50" pos:end="77:57"><expr pos:start="77:50" pos:end="77:57"><name pos:start="77:50" pos:end="77:55">substr</name><operator pos:start="77:56" pos:end="77:57">++</operator></expr></incr>)</control> <block pos:start="77:60" pos:end="153:5">{<block_content pos:start="79:9" pos:end="151:30">

        <decl_stmt pos:start="79:9" pos:end="79:54"><decl pos:start="79:9" pos:end="79:29"><type pos:start="79:9" pos:end="79:11"><name pos:start="79:9" pos:end="79:11">int</name></type> <name pos:start="79:13" pos:end="79:29">extraword_present</name></decl>, <decl pos:start="79:32" pos:end="79:48"><type ref="prev" pos:start="79:9" pos:end="79:11"/><name pos:start="79:32" pos:end="79:48">checkdata_present</name></decl>, <decl pos:start="79:51" pos:end="79:53"><type ref="prev" pos:start="79:9" pos:end="79:11"/><name pos:start="79:51" pos:end="79:53">end</name></decl>;</decl_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:43"><expr pos:start="83:9" pos:end="83:42"><name pos:start="83:9" pos:end="83:25">extraword_present</name> <operator pos:start="83:27" pos:end="83:27">=</operator> <call pos:start="83:29" pos:end="83:42"><name pos:start="83:29" pos:end="83:37">get_bits1</name><argument_list pos:start="83:38" pos:end="83:42">(<argument pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><operator pos:start="83:39" pos:end="83:39">&amp;</operator><name pos:start="83:40" pos:end="83:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><call pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:18">skip_bits1</name><argument_list pos:start="85:19" pos:end="85:23">(<argument pos:start="85:20" pos:end="85:22"><expr pos:start="85:20" pos:end="85:22"><operator pos:start="85:20" pos:end="85:20">&amp;</operator><name pos:start="85:21" pos:end="85:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:43"><expr pos:start="87:9" pos:end="87:42"><name pos:start="87:9" pos:end="87:25">checkdata_present</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:42"><name pos:start="87:29" pos:end="87:37">get_bits1</name><argument_list pos:start="87:38" pos:end="87:42">(<argument pos:start="87:39" pos:end="87:41"><expr pos:start="87:39" pos:end="87:41"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><call pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:18">skip_bits1</name><argument_list pos:start="89:19" pos:end="89:23">(<argument pos:start="89:20" pos:end="89:22"><expr pos:start="89:20" pos:end="89:22"><operator pos:start="89:20" pos:end="89:20">&amp;</operator><name pos:start="89:21" pos:end="89:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:11">end</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:31"><name pos:start="93:15" pos:end="93:22">get_bits</name><argument_list pos:start="93:23" pos:end="93:31">(<argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><operator pos:start="93:24" pos:end="93:24">&amp;</operator><name pos:start="93:25" pos:end="93:26">gb</name></expr></argument>, <argument pos:start="93:29" pos:end="93:30"><expr pos:start="93:29" pos:end="93:30"><literal type="number" pos:start="93:29" pos:end="93:30">12</literal></expr></argument>)</argument_list></call> <operator pos:start="93:33" pos:end="93:33">*</operator> <literal type="number" pos:start="93:35" pos:end="93:35">2</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:32"><expr pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:26">substr_header_size</name> <operator pos:start="97:28" pos:end="97:29">+=</operator> <literal type="number" pos:start="97:31" pos:end="97:31">2</literal></expr>;</expr_stmt>



        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:30">(<expr pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:29">extraword_present</name></expr>)</condition> <block pos:start="101:32" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:36">

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><call pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:21">skip_bits</name><argument_list pos:start="103:22" pos:end="103:30">(<argument pos:start="103:23" pos:end="103:25"><expr pos:start="103:23" pos:end="103:25"><operator pos:start="103:23" pos:end="103:23">&amp;</operator><name pos:start="103:24" pos:end="103:25">gb</name></expr></argument>, <argument pos:start="103:28" pos:end="103:29"><expr pos:start="103:28" pos:end="103:29"><literal type="number" pos:start="103:28" pos:end="103:29">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:36"><expr pos:start="105:13" pos:end="105:35"><name pos:start="105:13" pos:end="105:30">substr_header_size</name> <operator pos:start="105:32" pos:end="105:33">+=</operator> <literal type="number" pos:start="105:35" pos:end="105:35">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="121:9">if <condition pos:start="111:12" pos:end="111:60">(<expr pos:start="111:13" pos:end="111:59"><name pos:start="111:13" pos:end="111:15">end</name> <operator pos:start="111:17" pos:end="111:17">+</operator> <name pos:start="111:19" pos:end="111:29">header_size</name> <operator pos:start="111:31" pos:end="111:31">+</operator> <name pos:start="111:33" pos:end="111:50">substr_header_size</name> <operator pos:start="111:52" pos:end="111:52">&gt;</operator> <name pos:start="111:54" pos:end="111:59">length</name></expr>)</condition> <block pos:start="111:62" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:60">

            <expr_stmt pos:start="113:13" pos:end="117:40"><expr pos:start="113:13" pos:end="117:39"><call pos:start="113:13" pos:end="117:39"><name pos:start="113:13" pos:end="113:18">av_log</name><argument_list pos:start="113:19" pos:end="117:39">(<argument pos:start="113:20" pos:end="113:27"><expr pos:start="113:20" pos:end="113:27"><name pos:start="113:20" pos:end="113:27"><name pos:start="113:20" pos:end="113:20">m</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:27">avctx</name></name></expr></argument>, <argument pos:start="113:30" pos:end="113:41"><expr pos:start="113:30" pos:end="113:41"><name pos:start="113:30" pos:end="113:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="115:20" pos:end="117:30"><expr pos:start="115:20" pos:end="117:30"><literal type="string" pos:start="115:20" pos:end="115:75">"Indicated length of substream %d data goes off end of "</literal>

                   <literal type="string" pos:start="117:20" pos:end="117:30">"packet.\n"</literal></expr></argument>, <argument pos:start="117:33" pos:end="117:38"><expr pos:start="117:33" pos:end="117:38"><name pos:start="117:33" pos:end="117:38">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:60"><expr pos:start="119:13" pos:end="119:59"><name pos:start="119:13" pos:end="119:15">end</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:24">length</name> <operator pos:start="119:26" pos:end="119:26">-</operator> <name pos:start="119:28" pos:end="119:38">header_size</name> <operator pos:start="119:40" pos:end="119:40">-</operator> <name pos:start="119:42" pos:end="119:59">substr_header_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="125:9" pos:end="137:9"><if pos:start="125:9" pos:end="137:9">if <condition pos:start="125:12" pos:end="125:34">(<expr pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:15">end</name> <operator pos:start="125:17" pos:end="125:17">&lt;</operator> <name pos:start="125:19" pos:end="125:33">substream_start</name></expr>)</condition> <block pos:start="125:36" pos:end="137:9">{<block_content pos:start="127:13" pos:end="135:23">

            <expr_stmt pos:start="127:13" pos:end="133:27"><expr pos:start="127:13" pos:end="133:26"><call pos:start="127:13" pos:end="133:26"><name pos:start="127:13" pos:end="127:18">av_log</name><argument_list pos:start="127:19" pos:end="133:26">(<argument pos:start="127:20" pos:end="127:24"><expr pos:start="127:20" pos:end="127:24"><name pos:start="127:20" pos:end="127:24">avctx</name></expr></argument>, <argument pos:start="127:27" pos:end="127:38"><expr pos:start="127:27" pos:end="127:38"><name pos:start="127:27" pos:end="127:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="129:20" pos:end="131:63"><expr pos:start="129:20" pos:end="131:63"><literal type="string" pos:start="129:20" pos:end="129:63">"Indicated end offset of substream %d data "</literal>

                   <literal type="string" pos:start="131:20" pos:end="131:63">"is smaller than calculated start offset.\n"</literal></expr></argument>,

                   <argument pos:start="133:20" pos:end="133:25"><expr pos:start="133:20" pos:end="133:25"><name pos:start="133:20" pos:end="133:25">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="135:13" pos:end="135:23">goto <name pos:start="135:18" pos:end="135:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="141:9" pos:end="143:21"><if pos:start="141:9" pos:end="143:21">if <condition pos:start="141:12" pos:end="141:46">(<expr pos:start="141:13" pos:end="141:45"><name pos:start="141:13" pos:end="141:18">substr</name> <operator pos:start="141:20" pos:end="141:20">&gt;</operator> <name pos:start="141:22" pos:end="141:45"><name pos:start="141:22" pos:end="141:22">m</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:45">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:21"><block_content pos:start="143:13" pos:end="143:21">

            <continue pos:start="143:13" pos:end="143:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:61"><expr pos:start="147:9" pos:end="147:60"><name pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:32">substream_parity_present</name><index pos:start="147:33" pos:end="147:40">[<expr pos:start="147:34" pos:end="147:39"><name pos:start="147:34" pos:end="147:39">substr</name></expr>]</index></name> <operator pos:start="147:42" pos:end="147:42">=</operator> <name pos:start="147:44" pos:end="147:60">checkdata_present</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:59"><expr pos:start="149:9" pos:end="149:58"><name pos:start="149:9" pos:end="149:34"><name pos:start="149:9" pos:end="149:26">substream_data_len</name><index pos:start="149:27" pos:end="149:34">[<expr pos:start="149:28" pos:end="149:33"><name pos:start="149:28" pos:end="149:33">substr</name></expr>]</index></name> <operator pos:start="149:36" pos:end="149:36">=</operator> <name pos:start="149:38" pos:end="149:40">end</name> <operator pos:start="149:42" pos:end="149:42">-</operator> <name pos:start="149:44" pos:end="149:58">substream_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:30"><expr pos:start="151:9" pos:end="151:29"><name pos:start="151:9" pos:end="151:23">substream_start</name> <operator pos:start="151:25" pos:end="151:25">=</operator> <name pos:start="151:27" pos:end="151:29">end</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="157:5" pos:end="157:51"><expr pos:start="157:5" pos:end="157:50"><name pos:start="157:5" pos:end="157:15">parity_bits</name>  <operator pos:start="157:18" pos:end="157:18">=</operator> <call pos:start="157:20" pos:end="157:50"><name pos:start="157:20" pos:end="157:42">ff_mlp_calculate_parity</name><argument_list pos:start="157:43" pos:end="157:50">(<argument pos:start="157:44" pos:end="157:46"><expr pos:start="157:44" pos:end="157:46"><name pos:start="157:44" pos:end="157:46">buf</name></expr></argument>, <argument pos:start="157:49" pos:end="157:49"><expr pos:start="157:49" pos:end="157:49"><literal type="number" pos:start="157:49" pos:end="157:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:82"><expr pos:start="159:5" pos:end="159:81"><name pos:start="159:5" pos:end="159:15">parity_bits</name> <operator pos:start="159:17" pos:end="159:18">^=</operator> <call pos:start="159:20" pos:end="159:81"><name pos:start="159:20" pos:end="159:42">ff_mlp_calculate_parity</name><argument_list pos:start="159:43" pos:end="159:81">(<argument pos:start="159:44" pos:end="159:60"><expr pos:start="159:44" pos:end="159:60"><name pos:start="159:44" pos:end="159:46">buf</name> <operator pos:start="159:48" pos:end="159:48">+</operator> <name pos:start="159:50" pos:end="159:60">header_size</name></expr></argument>, <argument pos:start="159:63" pos:end="159:80"><expr pos:start="159:63" pos:end="159:80"><name pos:start="159:63" pos:end="159:80">substr_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:58">(<expr pos:start="163:9" pos:end="163:57"><operator pos:start="163:9" pos:end="163:9">(</operator><operator pos:start="163:10" pos:end="163:10">(</operator><operator pos:start="163:11" pos:end="163:11">(</operator><name pos:start="163:12" pos:end="163:22">parity_bits</name> <operator pos:start="163:24" pos:end="163:25">&gt;&gt;</operator> <literal type="number" pos:start="163:27" pos:end="163:27">4</literal><operator pos:start="163:28" pos:end="163:28">)</operator> <operator pos:start="163:30" pos:end="163:30">^</operator> <name pos:start="163:32" pos:end="163:42">parity_bits</name><operator pos:start="163:43" pos:end="163:43">)</operator> <operator pos:start="163:45" pos:end="163:45">&amp;</operator> <literal type="number" pos:start="163:47" pos:end="163:49">0xF</literal><operator pos:start="163:50" pos:end="163:50">)</operator> <operator pos:start="163:52" pos:end="163:53">!=</operator> <literal type="number" pos:start="163:55" pos:end="163:57">0xF</literal></expr>)</condition> <block pos:start="163:60" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:19">

        <expr_stmt pos:start="165:9" pos:end="165:62"><expr pos:start="165:9" pos:end="165:61"><call pos:start="165:9" pos:end="165:61"><name pos:start="165:9" pos:end="165:14">av_log</name><argument_list pos:start="165:15" pos:end="165:61">(<argument pos:start="165:16" pos:end="165:20"><expr pos:start="165:16" pos:end="165:20"><name pos:start="165:16" pos:end="165:20">avctx</name></expr></argument>, <argument pos:start="165:23" pos:end="165:34"><expr pos:start="165:23" pos:end="165:34"><name pos:start="165:23" pos:end="165:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:37" pos:end="165:60"><expr pos:start="165:37" pos:end="165:60"><literal type="string" pos:start="165:37" pos:end="165:60">"Parity check failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="167:9" pos:end="167:19">goto <name pos:start="167:14" pos:end="167:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:44"><expr pos:start="173:5" pos:end="173:43"><name pos:start="173:5" pos:end="173:7">buf</name> <operator pos:start="173:9" pos:end="173:10">+=</operator> <name pos:start="173:12" pos:end="173:22">header_size</name> <operator pos:start="173:24" pos:end="173:24">+</operator> <name pos:start="173:26" pos:end="173:43">substr_header_size</name></expr>;</expr_stmt>



    <for pos:start="177:5" pos:end="327:5">for <control pos:start="177:9" pos:end="177:66">(<init pos:start="177:10" pos:end="177:20"><expr pos:start="177:10" pos:end="177:19"><name pos:start="177:10" pos:end="177:15">substr</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>;</init> <condition pos:start="177:22" pos:end="177:56"><expr pos:start="177:22" pos:end="177:55"><name pos:start="177:22" pos:end="177:27">substr</name> <operator pos:start="177:29" pos:end="177:30">&lt;=</operator> <name pos:start="177:32" pos:end="177:55"><name pos:start="177:32" pos:end="177:32">m</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:55">max_decoded_substream</name></name></expr>;</condition> <incr pos:start="177:58" pos:end="177:65"><expr pos:start="177:58" pos:end="177:65"><name pos:start="177:58" pos:end="177:63">substr</name><operator pos:start="177:64" pos:end="177:65">++</operator></expr></incr>)</control> <block pos:start="177:68" pos:end="327:5">{<block_content pos:start="179:9" pos:end="325:42">

        <decl_stmt pos:start="179:9" pos:end="179:45"><decl pos:start="179:9" pos:end="179:44"><type pos:start="179:9" pos:end="179:19"><name pos:start="179:9" pos:end="179:17">SubStream</name> <modifier pos:start="179:19" pos:end="179:19">*</modifier></type><name pos:start="179:20" pos:end="179:20">s</name> <init pos:start="179:22" pos:end="179:44">= <expr pos:start="179:24" pos:end="179:44"><operator pos:start="179:24" pos:end="179:24">&amp;</operator><name pos:start="179:25" pos:end="179:44"><name pos:start="179:25" pos:end="179:25">m</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:36">substream</name><index pos:start="179:37" pos:end="179:44">[<expr pos:start="179:38" pos:end="179:43"><name pos:start="179:38" pos:end="179:43">substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:64"><expr pos:start="181:9" pos:end="181:63"><call pos:start="181:9" pos:end="181:63"><name pos:start="181:9" pos:end="181:21">init_get_bits</name><argument_list pos:start="181:22" pos:end="181:63">(<argument pos:start="181:23" pos:end="181:25"><expr pos:start="181:23" pos:end="181:25"><operator pos:start="181:23" pos:end="181:23">&amp;</operator><name pos:start="181:24" pos:end="181:25">gb</name></expr></argument>, <argument pos:start="181:28" pos:end="181:30"><expr pos:start="181:28" pos:end="181:30"><name pos:start="181:28" pos:end="181:30">buf</name></expr></argument>, <argument pos:start="181:33" pos:end="181:62"><expr pos:start="181:33" pos:end="181:62"><name pos:start="181:33" pos:end="181:58"><name pos:start="181:33" pos:end="181:50">substream_data_len</name><index pos:start="181:51" pos:end="181:58">[<expr pos:start="181:52" pos:end="181:57"><name pos:start="181:52" pos:end="181:57">substr</name></expr>]</index></name> <operator pos:start="181:60" pos:end="181:60">*</operator> <literal type="number" pos:start="181:62" pos:end="181:62">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:24"><expr pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:19"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:19">blockpos</name></name> <operator pos:start="185:21" pos:end="185:21">=</operator> <literal type="number" pos:start="185:23" pos:end="185:23">0</literal></expr>;</expr_stmt>

        <do pos:start="187:9" pos:end="241:34">do <block pos:start="187:12" pos:end="241:9">{<block_content pos:start="189:13" pos:end="237:47">

            <if_stmt pos:start="189:13" pos:end="217:13"><if pos:start="189:13" pos:end="217:13">if <condition pos:start="189:16" pos:end="189:31">(<expr pos:start="189:17" pos:end="189:30"><call pos:start="189:17" pos:end="189:30"><name pos:start="189:17" pos:end="189:25">get_bits1</name><argument_list pos:start="189:26" pos:end="189:30">(<argument pos:start="189:27" pos:end="189:29"><expr pos:start="189:27" pos:end="189:29"><operator pos:start="189:27" pos:end="189:27">&amp;</operator><name pos:start="189:28" pos:end="189:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:33" pos:end="217:13">{<block_content pos:start="191:17" pos:end="215:37">

                <if_stmt pos:start="191:17" pos:end="201:17"><if pos:start="191:17" pos:end="201:17">if <condition pos:start="191:20" pos:end="191:35">(<expr pos:start="191:21" pos:end="191:34"><call pos:start="191:21" pos:end="191:34"><name pos:start="191:21" pos:end="191:29">get_bits1</name><argument_list pos:start="191:30" pos:end="191:34">(<argument pos:start="191:31" pos:end="191:33"><expr pos:start="191:31" pos:end="191:33"><operator pos:start="191:31" pos:end="191:31">&amp;</operator><name pos:start="191:32" pos:end="191:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:37" pos:end="201:17">{<block_content pos:start="195:21" pos:end="199:40">

                    <comment type="block" pos:start="193:21" pos:end="193:61">/* A restart header should be present. */</comment>

                    <if_stmt pos:start="195:21" pos:end="197:41"><if pos:start="195:21" pos:end="197:41">if <condition pos:start="195:24" pos:end="195:69">(<expr pos:start="195:25" pos:end="195:68"><call pos:start="195:25" pos:end="195:64"><name pos:start="195:25" pos:end="195:43">read_restart_header</name><argument_list pos:start="195:44" pos:end="195:64">(<argument pos:start="195:45" pos:end="195:45"><expr pos:start="195:45" pos:end="195:45"><name pos:start="195:45" pos:end="195:45">m</name></expr></argument>, <argument pos:start="195:48" pos:end="195:50"><expr pos:start="195:48" pos:end="195:50"><operator pos:start="195:48" pos:end="195:48">&amp;</operator><name pos:start="195:49" pos:end="195:50">gb</name></expr></argument>, <argument pos:start="195:53" pos:end="195:55"><expr pos:start="195:53" pos:end="195:55"><name pos:start="195:53" pos:end="195:55">buf</name></expr></argument>, <argument pos:start="195:58" pos:end="195:63"><expr pos:start="195:58" pos:end="195:63"><name pos:start="195:58" pos:end="195:63">substr</name></expr></argument>)</argument_list></call> <operator pos:start="195:66" pos:end="195:66">&lt;</operator> <literal type="number" pos:start="195:68" pos:end="195:68">0</literal></expr>)</condition><block type="pseudo" pos:start="197:25" pos:end="197:41"><block_content pos:start="197:25" pos:end="197:41">

                        <goto pos:start="197:25" pos:end="197:41">goto <name pos:start="197:30" pos:end="197:40">next_substr</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:40"><expr pos:start="199:21" pos:end="199:39"><name pos:start="199:21" pos:end="199:35"><name pos:start="199:21" pos:end="199:21">s</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:35">restart_seen</name></name> <operator pos:start="199:37" pos:end="199:37">=</operator> <literal type="number" pos:start="199:39" pos:end="199:39">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="205:17" pos:end="209:17"><if pos:start="205:17" pos:end="209:17">if <condition pos:start="205:20" pos:end="205:37">(<expr pos:start="205:21" pos:end="205:36"><operator pos:start="205:21" pos:end="205:21">!</operator><name pos:start="205:22" pos:end="205:36"><name pos:start="205:22" pos:end="205:22">s</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:36">restart_seen</name></name></expr>)</condition> <block pos:start="205:39" pos:end="209:17">{<block_content pos:start="207:21" pos:end="207:37">

                    <goto pos:start="207:21" pos:end="207:37">goto <name pos:start="207:26" pos:end="207:36">next_substr</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="213:17" pos:end="215:37"><if pos:start="213:17" pos:end="215:37">if <condition pos:start="213:20" pos:end="213:61">(<expr pos:start="213:21" pos:end="213:60"><call pos:start="213:21" pos:end="213:56"><name pos:start="213:21" pos:end="213:40">read_decoding_params</name><argument_list pos:start="213:41" pos:end="213:56">(<argument pos:start="213:42" pos:end="213:42"><expr pos:start="213:42" pos:end="213:42"><name pos:start="213:42" pos:end="213:42">m</name></expr></argument>, <argument pos:start="213:45" pos:end="213:47"><expr pos:start="213:45" pos:end="213:47"><operator pos:start="213:45" pos:end="213:45">&amp;</operator><name pos:start="213:46" pos:end="213:47">gb</name></expr></argument>, <argument pos:start="213:50" pos:end="213:55"><expr pos:start="213:50" pos:end="213:55"><name pos:start="213:50" pos:end="213:55">substr</name></expr></argument>)</argument_list></call> <operator pos:start="213:58" pos:end="213:58">&lt;</operator> <literal type="number" pos:start="213:60" pos:end="213:60">0</literal></expr>)</condition><block type="pseudo" pos:start="215:21" pos:end="215:37"><block_content pos:start="215:21" pos:end="215:37">

                    <goto pos:start="215:21" pos:end="215:37">goto <name pos:start="215:26" pos:end="215:36">next_substr</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="221:13" pos:end="225:13"><if pos:start="221:13" pos:end="225:13">if <condition pos:start="221:16" pos:end="221:33">(<expr pos:start="221:17" pos:end="221:32"><operator pos:start="221:17" pos:end="221:17">!</operator><name pos:start="221:18" pos:end="221:32"><name pos:start="221:18" pos:end="221:18">s</name><operator pos:start="221:19" pos:end="221:20">-&gt;</operator><name pos:start="221:21" pos:end="221:32">restart_seen</name></name></expr>)</condition> <block pos:start="221:35" pos:end="225:13">{<block_content pos:start="223:17" pos:end="223:33">

                <goto pos:start="223:17" pos:end="223:33">goto <name pos:start="223:22" pos:end="223:32">next_substr</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="229:13" pos:end="231:26"><if pos:start="229:13" pos:end="231:26">if <condition pos:start="229:16" pos:end="229:52">(<expr pos:start="229:17" pos:end="229:51"><call pos:start="229:17" pos:end="229:47"><name pos:start="229:17" pos:end="229:31">read_block_data</name><argument_list pos:start="229:32" pos:end="229:47">(<argument pos:start="229:33" pos:end="229:33"><expr pos:start="229:33" pos:end="229:33"><name pos:start="229:33" pos:end="229:33">m</name></expr></argument>, <argument pos:start="229:36" pos:end="229:38"><expr pos:start="229:36" pos:end="229:38"><operator pos:start="229:36" pos:end="229:36">&amp;</operator><name pos:start="229:37" pos:end="229:38">gb</name></expr></argument>, <argument pos:start="229:41" pos:end="229:46"><expr pos:start="229:41" pos:end="229:46"><name pos:start="229:41" pos:end="229:46">substr</name></expr></argument>)</argument_list></call> <operator pos:start="229:49" pos:end="229:49">&lt;</operator> <literal type="number" pos:start="229:51" pos:end="229:51">0</literal></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:26"><block_content pos:start="231:17" pos:end="231:26">

                <return pos:start="231:17" pos:end="231:26">return <expr pos:start="231:24" pos:end="231:25"><operator pos:start="231:24" pos:end="231:24">-</operator><literal type="number" pos:start="231:25" pos:end="231:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="235:13" pos:end="237:47"><if pos:start="235:13" pos:end="237:47">if <condition pos:start="235:16" pos:end="235:70">(<expr pos:start="235:17" pos:end="235:69"><call pos:start="235:17" pos:end="235:35"><name pos:start="235:17" pos:end="235:30">get_bits_count</name><argument_list pos:start="235:31" pos:end="235:35">(<argument pos:start="235:32" pos:end="235:34"><expr pos:start="235:32" pos:end="235:34"><operator pos:start="235:32" pos:end="235:32">&amp;</operator><name pos:start="235:33" pos:end="235:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="235:37" pos:end="235:38">&gt;=</operator> <name pos:start="235:40" pos:end="235:65"><name pos:start="235:40" pos:end="235:57">substream_data_len</name><index pos:start="235:58" pos:end="235:65">[<expr pos:start="235:59" pos:end="235:64"><name pos:start="235:59" pos:end="235:64">substr</name></expr>]</index></name> <operator pos:start="235:67" pos:end="235:67">*</operator> <literal type="number" pos:start="235:69" pos:end="235:69">8</literal></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:47"><block_content pos:start="237:17" pos:end="237:47">

                <goto pos:start="237:17" pos:end="237:47">goto <name pos:start="237:22" pos:end="237:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



        </block_content>}</block> while <condition pos:start="241:17" pos:end="241:33">(<expr pos:start="241:18" pos:end="241:32"><operator pos:start="241:18" pos:end="241:18">!</operator><call pos:start="241:19" pos:end="241:32"><name pos:start="241:19" pos:end="241:27">get_bits1</name><argument_list pos:start="241:28" pos:end="241:32">(<argument pos:start="241:29" pos:end="241:31"><expr pos:start="241:29" pos:end="241:31"><operator pos:start="241:29" pos:end="241:29">&amp;</operator><name pos:start="241:30" pos:end="241:31">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



        <expr_stmt pos:start="245:9" pos:end="245:52"><expr pos:start="245:9" pos:end="245:51"><call pos:start="245:9" pos:end="245:51"><name pos:start="245:9" pos:end="245:17">skip_bits</name><argument_list pos:start="245:18" pos:end="245:51">(<argument pos:start="245:19" pos:end="245:21"><expr pos:start="245:19" pos:end="245:21"><operator pos:start="245:19" pos:end="245:19">&amp;</operator><name pos:start="245:20" pos:end="245:21">gb</name></expr></argument>, <argument pos:start="245:24" pos:end="245:50"><expr pos:start="245:24" pos:end="245:50"><operator pos:start="245:24" pos:end="245:24">(</operator><operator pos:start="245:25" pos:end="245:25">-</operator><call pos:start="245:26" pos:end="245:44"><name pos:start="245:26" pos:end="245:39">get_bits_count</name><argument_list pos:start="245:40" pos:end="245:44">(<argument pos:start="245:41" pos:end="245:43"><expr pos:start="245:41" pos:end="245:43"><operator pos:start="245:41" pos:end="245:41">&amp;</operator><name pos:start="245:42" pos:end="245:43">gb</name></expr></argument>)</argument_list></call><operator pos:start="245:45" pos:end="245:45">)</operator> <operator pos:start="245:47" pos:end="245:47">&amp;</operator> <literal type="number" pos:start="245:49" pos:end="245:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="247:9" pos:end="275:9"><if pos:start="247:9" pos:end="275:9">if <condition pos:start="247:12" pos:end="247:71">(<expr pos:start="247:13" pos:end="247:70"><name pos:start="247:13" pos:end="247:38"><name pos:start="247:13" pos:end="247:30">substream_data_len</name><index pos:start="247:31" pos:end="247:38">[<expr pos:start="247:32" pos:end="247:37"><name pos:start="247:32" pos:end="247:37">substr</name></expr>]</index></name> <operator pos:start="247:40" pos:end="247:40">*</operator> <literal type="number" pos:start="247:42" pos:end="247:44">8</literal> <operator pos:start="247:44" pos:end="247:44">-</operator> <call pos:start="247:46" pos:end="247:64"><name pos:start="247:46" pos:end="247:59">get_bits_count</name><argument_list pos:start="247:60" pos:end="247:64">(<argument pos:start="247:61" pos:end="247:63"><expr pos:start="247:61" pos:end="247:63"><operator pos:start="247:61" pos:end="247:61">&amp;</operator><name pos:start="247:62" pos:end="247:63">gb</name></expr></argument>)</argument_list></call> <operator pos:start="247:66" pos:end="247:67">&gt;=</operator> <literal type="number" pos:start="247:69" pos:end="247:70">32</literal></expr>)</condition> <block pos:start="247:73" pos:end="275:9">{<block_content pos:start="249:13" pos:end="273:76">

            <decl_stmt pos:start="249:13" pos:end="249:27"><decl pos:start="249:13" pos:end="249:26"><type pos:start="249:13" pos:end="249:15"><name pos:start="249:13" pos:end="249:15">int</name></type> <name pos:start="249:17" pos:end="249:26">shorten_by</name></decl>;</decl_stmt>



            <if_stmt pos:start="253:13" pos:end="255:26"><if pos:start="253:13" pos:end="255:26">if <condition pos:start="253:16" pos:end="253:44">(<expr pos:start="253:17" pos:end="253:43"><call pos:start="253:17" pos:end="253:33"><name pos:start="253:17" pos:end="253:24">get_bits</name><argument_list pos:start="253:25" pos:end="253:33">(<argument pos:start="253:26" pos:end="253:28"><expr pos:start="253:26" pos:end="253:28"><operator pos:start="253:26" pos:end="253:26">&amp;</operator><name pos:start="253:27" pos:end="253:28">gb</name></expr></argument>, <argument pos:start="253:31" pos:end="253:32"><expr pos:start="253:31" pos:end="253:32"><literal type="number" pos:start="253:31" pos:end="253:32">16</literal></expr></argument>)</argument_list></call> <operator pos:start="253:35" pos:end="253:36">!=</operator> <literal type="number" pos:start="253:38" pos:end="253:43">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="255:17" pos:end="255:26"><block_content pos:start="255:17" pos:end="255:26">

                <return pos:start="255:17" pos:end="255:26">return <expr pos:start="255:24" pos:end="255:25"><operator pos:start="255:24" pos:end="255:24">-</operator><literal type="number" pos:start="255:25" pos:end="255:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="259:13" pos:end="259:43"><expr pos:start="259:13" pos:end="259:42"><name pos:start="259:13" pos:end="259:22">shorten_by</name> <operator pos:start="259:24" pos:end="259:24">=</operator> <call pos:start="259:26" pos:end="259:42"><name pos:start="259:26" pos:end="259:33">get_bits</name><argument_list pos:start="259:34" pos:end="259:42">(<argument pos:start="259:35" pos:end="259:37"><expr pos:start="259:35" pos:end="259:37"><operator pos:start="259:35" pos:end="259:35">&amp;</operator><name pos:start="259:36" pos:end="259:37">gb</name></expr></argument>, <argument pos:start="259:40" pos:end="259:41"><expr pos:start="259:40" pos:end="259:41"><literal type="number" pos:start="259:40" pos:end="259:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="261:13" pos:end="267:26"><if pos:start="261:13" pos:end="263:71">if      <condition pos:start="261:21" pos:end="261:83">(<expr pos:start="261:22" pos:end="261:82"><name pos:start="261:22" pos:end="261:39"><name pos:start="261:22" pos:end="261:22">m</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:29">avctx</name><operator pos:start="261:30" pos:end="261:31">-&gt;</operator><name pos:start="261:32" pos:end="261:39">codec_id</name></name> <operator pos:start="261:41" pos:end="261:42">==</operator> <name pos:start="261:44" pos:end="261:58">CODEC_ID_TRUEHD</name> <operator pos:start="261:60" pos:end="261:61">&amp;&amp;</operator> <name pos:start="261:63" pos:end="261:72">shorten_by</name>  <operator pos:start="261:75" pos:end="261:75">&amp;</operator> <literal type="number" pos:start="261:77" pos:end="261:82">0x2000</literal></expr>)</condition><block type="pseudo" pos:start="263:17" pos:end="263:71"><block_content pos:start="263:17" pos:end="263:71">

                <expr_stmt pos:start="263:17" pos:end="263:71"><expr pos:start="263:17" pos:end="263:70"><name pos:start="263:17" pos:end="263:27"><name pos:start="263:17" pos:end="263:17">s</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:27">blockpos</name></name> <operator pos:start="263:29" pos:end="263:30">-=</operator> <call pos:start="263:32" pos:end="263:70"><name pos:start="263:32" pos:end="263:36">FFMIN</name><argument_list pos:start="263:37" pos:end="263:70">(<argument pos:start="263:38" pos:end="263:56"><expr pos:start="263:38" pos:end="263:56"><name pos:start="263:38" pos:end="263:47">shorten_by</name> <operator pos:start="263:49" pos:end="263:49">&amp;</operator> <literal type="number" pos:start="263:51" pos:end="263:56">0x1FFF</literal></expr></argument>, <argument pos:start="263:59" pos:end="263:69"><expr pos:start="263:59" pos:end="263:69"><name pos:start="263:59" pos:end="263:69"><name pos:start="263:59" pos:end="263:59">s</name><operator pos:start="263:60" pos:end="263:61">-&gt;</operator><name pos:start="263:62" pos:end="263:69">blockpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="265:13" pos:end="267:26">else if <condition pos:start="265:21" pos:end="265:83">(<expr pos:start="265:22" pos:end="265:82"><name pos:start="265:22" pos:end="265:39"><name pos:start="265:22" pos:end="265:22">m</name><operator pos:start="265:23" pos:end="265:24">-&gt;</operator><name pos:start="265:25" pos:end="265:29">avctx</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:39">codec_id</name></name> <operator pos:start="265:41" pos:end="265:42">==</operator> <name pos:start="265:44" pos:end="265:55">CODEC_ID_MLP</name>    <operator pos:start="265:60" pos:end="265:61">&amp;&amp;</operator> <name pos:start="265:63" pos:end="265:72">shorten_by</name> <operator pos:start="265:74" pos:end="265:75">!=</operator> <literal type="number" pos:start="265:77" pos:end="265:82">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="267:17" pos:end="267:26"><block_content pos:start="267:17" pos:end="267:26">

                <return pos:start="267:17" pos:end="267:26">return <expr pos:start="267:24" pos:end="267:25"><operator pos:start="267:24" pos:end="267:24">-</operator><literal type="number" pos:start="267:25" pos:end="267:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="271:13" pos:end="273:76"><if pos:start="271:13" pos:end="273:76">if <condition pos:start="271:16" pos:end="271:51">(<expr pos:start="271:17" pos:end="271:50"><name pos:start="271:17" pos:end="271:22">substr</name> <operator pos:start="271:24" pos:end="271:25">==</operator> <name pos:start="271:27" pos:end="271:50"><name pos:start="271:27" pos:end="271:27">m</name><operator pos:start="271:28" pos:end="271:29">-&gt;</operator><name pos:start="271:30" pos:end="271:50">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="273:17" pos:end="273:76"><block_content pos:start="273:17" pos:end="273:76">

                <expr_stmt pos:start="273:17" pos:end="273:76"><expr pos:start="273:17" pos:end="273:75"><call pos:start="273:17" pos:end="273:75"><name pos:start="273:17" pos:end="273:22">av_log</name><argument_list pos:start="273:23" pos:end="273:75">(<argument pos:start="273:24" pos:end="273:31"><expr pos:start="273:24" pos:end="273:31"><name pos:start="273:24" pos:end="273:31"><name pos:start="273:24" pos:end="273:24">m</name><operator pos:start="273:25" pos:end="273:26">-&gt;</operator><name pos:start="273:27" pos:end="273:31">avctx</name></name></expr></argument>, <argument pos:start="273:34" pos:end="273:44"><expr pos:start="273:34" pos:end="273:44"><name pos:start="273:34" pos:end="273:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="273:47" pos:end="273:74"><expr pos:start="273:47" pos:end="273:74"><literal type="string" pos:start="273:47" pos:end="273:74">"End of stream indicated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="277:9" pos:end="303:9"><if pos:start="277:9" pos:end="303:9">if <condition pos:start="277:12" pos:end="277:45">(<expr pos:start="277:13" pos:end="277:44"><name pos:start="277:13" pos:end="277:44"><name pos:start="277:13" pos:end="277:36">substream_parity_present</name><index pos:start="277:37" pos:end="277:44">[<expr pos:start="277:38" pos:end="277:43"><name pos:start="277:38" pos:end="277:43">substr</name></expr>]</index></name></expr>)</condition> <block pos:start="277:47" pos:end="303:9">{<block_content pos:start="279:13" pos:end="301:94">

            <decl_stmt pos:start="279:13" pos:end="279:37"><decl pos:start="279:13" pos:end="279:26"><type pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:19">uint8_t</name></type> <name pos:start="279:21" pos:end="279:26">parity</name></decl>, <decl pos:start="279:29" pos:end="279:36"><type ref="prev" pos:start="279:13" pos:end="279:19"/><name pos:start="279:29" pos:end="279:36">checksum</name></decl>;</decl_stmt>



            <if_stmt pos:start="283:13" pos:end="285:47"><if pos:start="283:13" pos:end="285:47">if <condition pos:start="283:16" pos:end="283:75">(<expr pos:start="283:17" pos:end="283:74"><name pos:start="283:17" pos:end="283:42"><name pos:start="283:17" pos:end="283:34">substream_data_len</name><index pos:start="283:35" pos:end="283:42">[<expr pos:start="283:36" pos:end="283:41"><name pos:start="283:36" pos:end="283:41">substr</name></expr>]</index></name> <operator pos:start="283:44" pos:end="283:44">*</operator> <literal type="number" pos:start="283:46" pos:end="283:48">8</literal> <operator pos:start="283:48" pos:end="283:48">-</operator> <call pos:start="283:50" pos:end="283:68"><name pos:start="283:50" pos:end="283:63">get_bits_count</name><argument_list pos:start="283:64" pos:end="283:68">(<argument pos:start="283:65" pos:end="283:67"><expr pos:start="283:65" pos:end="283:67"><operator pos:start="283:65" pos:end="283:65">&amp;</operator><name pos:start="283:66" pos:end="283:67">gb</name></expr></argument>)</argument_list></call> <operator pos:start="283:70" pos:end="283:71">!=</operator> <literal type="number" pos:start="283:73" pos:end="283:74">16</literal></expr>)</condition><block type="pseudo" pos:start="285:17" pos:end="285:47"><block_content pos:start="285:17" pos:end="285:47">

                <goto pos:start="285:17" pos:end="285:47">goto <name pos:start="285:22" pos:end="285:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:84"><expr pos:start="289:13" pos:end="289:83"><name pos:start="289:13" pos:end="289:18">parity</name>   <operator pos:start="289:22" pos:end="289:22">=</operator> <call pos:start="289:24" pos:end="289:83"><name pos:start="289:24" pos:end="289:46">ff_mlp_calculate_parity</name><argument_list pos:start="289:47" pos:end="289:83">(<argument pos:start="289:48" pos:end="289:50"><expr pos:start="289:48" pos:end="289:50"><name pos:start="289:48" pos:end="289:50">buf</name></expr></argument>, <argument pos:start="289:53" pos:end="289:82"><expr pos:start="289:53" pos:end="289:82"><name pos:start="289:53" pos:end="289:78"><name pos:start="289:53" pos:end="289:70">substream_data_len</name><index pos:start="289:71" pos:end="289:78">[<expr pos:start="289:72" pos:end="289:77"><name pos:start="289:72" pos:end="289:77">substr</name></expr>]</index></name> <operator pos:start="289:80" pos:end="289:80">-</operator> <literal type="number" pos:start="289:82" pos:end="289:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:84"><expr pos:start="291:13" pos:end="291:83"><name pos:start="291:13" pos:end="291:20">checksum</name> <operator pos:start="291:22" pos:end="291:22">=</operator> <call pos:start="291:24" pos:end="291:83"><name pos:start="291:24" pos:end="291:39">ff_mlp_checksum8</name>       <argument_list pos:start="291:47" pos:end="291:83">(<argument pos:start="291:48" pos:end="291:50"><expr pos:start="291:48" pos:end="291:50"><name pos:start="291:48" pos:end="291:50">buf</name></expr></argument>, <argument pos:start="291:53" pos:end="291:82"><expr pos:start="291:53" pos:end="291:82"><name pos:start="291:53" pos:end="291:78"><name pos:start="291:53" pos:end="291:70">substream_data_len</name><index pos:start="291:71" pos:end="291:78">[<expr pos:start="291:72" pos:end="291:77"><name pos:start="291:72" pos:end="291:77">substr</name></expr>]</index></name> <operator pos:start="291:80" pos:end="291:80">-</operator> <literal type="number" pos:start="291:82" pos:end="291:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="295:13" pos:end="297:94"><if pos:start="295:13" pos:end="297:94">if <condition pos:start="295:16" pos:end="295:56">(<expr pos:start="295:17" pos:end="295:51"><operator pos:start="295:17" pos:end="295:17">(</operator><call pos:start="295:18" pos:end="295:33"><name pos:start="295:18" pos:end="295:25">get_bits</name><argument_list pos:start="295:26" pos:end="295:33">(<argument pos:start="295:27" pos:end="295:29"><expr pos:start="295:27" pos:end="295:29"><operator pos:start="295:27" pos:end="295:27">&amp;</operator><name pos:start="295:28" pos:end="295:29">gb</name></expr></argument>, <argument pos:start="295:32" pos:end="295:32"><expr pos:start="295:32" pos:end="295:32"><literal type="number" pos:start="295:32" pos:end="295:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="295:35" pos:end="295:35">^</operator> <name pos:start="295:37" pos:end="295:42">parity</name><operator pos:start="295:43" pos:end="295:43">)</operator> <operator pos:start="295:45" pos:end="295:46">!=</operator> <literal type="number" pos:start="295:48" pos:end="295:51">0xa9</literal></expr>    )</condition><block type="pseudo" pos:start="297:17" pos:end="297:94"><block_content pos:start="297:17" pos:end="297:94">

                <expr_stmt pos:start="297:17" pos:end="297:94"><expr pos:start="297:17" pos:end="297:93"><call pos:start="297:17" pos:end="297:93"><name pos:start="297:17" pos:end="297:22">av_log</name><argument_list pos:start="297:23" pos:end="297:93">(<argument pos:start="297:24" pos:end="297:31"><expr pos:start="297:24" pos:end="297:31"><name pos:start="297:24" pos:end="297:31"><name pos:start="297:24" pos:end="297:24">m</name><operator pos:start="297:25" pos:end="297:26">-&gt;</operator><name pos:start="297:27" pos:end="297:31">avctx</name></name></expr></argument>, <argument pos:start="297:34" pos:end="297:45"><expr pos:start="297:34" pos:end="297:45"><name pos:start="297:34" pos:end="297:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="297:48" pos:end="297:84"><expr pos:start="297:48" pos:end="297:84"><literal type="string" pos:start="297:48" pos:end="297:84">"Substream %d parity check failed.\n"</literal></expr></argument>, <argument pos:start="297:87" pos:end="297:92"><expr pos:start="297:87" pos:end="297:92"><name pos:start="297:87" pos:end="297:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="299:13" pos:end="301:94"><if pos:start="299:13" pos:end="301:94">if <condition pos:start="299:16" pos:end="299:56">( <expr pos:start="299:18" pos:end="299:55"><call pos:start="299:18" pos:end="299:33"><name pos:start="299:18" pos:end="299:25">get_bits</name><argument_list pos:start="299:26" pos:end="299:33">(<argument pos:start="299:27" pos:end="299:29"><expr pos:start="299:27" pos:end="299:29"><operator pos:start="299:27" pos:end="299:27">&amp;</operator><name pos:start="299:28" pos:end="299:29">gb</name></expr></argument>, <argument pos:start="299:32" pos:end="299:32"><expr pos:start="299:32" pos:end="299:32"><literal type="number" pos:start="299:32" pos:end="299:32">8</literal></expr></argument>)</argument_list></call>           <operator pos:start="299:45" pos:end="299:46">!=</operator> <name pos:start="299:48" pos:end="299:55">checksum</name></expr>)</condition><block type="pseudo" pos:start="301:17" pos:end="301:94"><block_content pos:start="301:17" pos:end="301:94">

                <expr_stmt pos:start="301:17" pos:end="301:94"><expr pos:start="301:17" pos:end="301:93"><call pos:start="301:17" pos:end="301:93"><name pos:start="301:17" pos:end="301:22">av_log</name><argument_list pos:start="301:23" pos:end="301:93">(<argument pos:start="301:24" pos:end="301:31"><expr pos:start="301:24" pos:end="301:31"><name pos:start="301:24" pos:end="301:31"><name pos:start="301:24" pos:end="301:24">m</name><operator pos:start="301:25" pos:end="301:26">-&gt;</operator><name pos:start="301:27" pos:end="301:31">avctx</name></name></expr></argument>, <argument pos:start="301:34" pos:end="301:45"><expr pos:start="301:34" pos:end="301:45"><name pos:start="301:34" pos:end="301:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="301:48" pos:end="301:80"><expr pos:start="301:48" pos:end="301:80"><literal type="string" pos:start="301:48" pos:end="301:80">"Substream %d checksum failed.\n"</literal></expr></argument>    , <argument pos:start="301:87" pos:end="301:92"><expr pos:start="301:87" pos:end="301:92"><name pos:start="301:87" pos:end="301:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="305:9" pos:end="309:9"><if pos:start="305:9" pos:end="309:9">if <condition pos:start="305:12" pos:end="305:66">(<expr pos:start="305:13" pos:end="305:65"><name pos:start="305:13" pos:end="305:38"><name pos:start="305:13" pos:end="305:30">substream_data_len</name><index pos:start="305:31" pos:end="305:38">[<expr pos:start="305:32" pos:end="305:37"><name pos:start="305:32" pos:end="305:37">substr</name></expr>]</index></name> <operator pos:start="305:40" pos:end="305:40">*</operator> <literal type="number" pos:start="305:42" pos:end="305:42">8</literal> <operator pos:start="305:44" pos:end="305:45">!=</operator> <call pos:start="305:47" pos:end="305:65"><name pos:start="305:47" pos:end="305:60">get_bits_count</name><argument_list pos:start="305:61" pos:end="305:65">(<argument pos:start="305:62" pos:end="305:64"><expr pos:start="305:62" pos:end="305:64"><operator pos:start="305:62" pos:end="305:62">&amp;</operator><name pos:start="305:63" pos:end="305:64">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:68" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:43">

            <goto pos:start="307:13" pos:end="307:43">goto <name pos:start="307:18" pos:end="307:42">substream_length_mismatch</name>;</goto>

        </block_content>}</block></if></if_stmt>



<label pos:start="313:1" pos:end="313:12"><name pos:start="313:1" pos:end="313:11">next_substr</name>:</label>

        <if_stmt pos:start="315:9" pos:end="321:9"><if pos:start="315:9" pos:end="321:9">if <condition pos:start="315:12" pos:end="315:29">(<expr pos:start="315:13" pos:end="315:28"><operator pos:start="315:13" pos:end="315:13">!</operator><name pos:start="315:14" pos:end="315:28"><name pos:start="315:14" pos:end="315:14">s</name><operator pos:start="315:15" pos:end="315:16">-&gt;</operator><name pos:start="315:17" pos:end="315:28">restart_seen</name></name></expr>)</condition> <block pos:start="315:31" pos:end="321:9">{<block_content pos:start="317:13" pos:end="319:75">

            <expr_stmt pos:start="317:13" pos:end="319:75"><expr pos:start="317:13" pos:end="319:74"><call pos:start="317:13" pos:end="319:74"><name pos:start="317:13" pos:end="317:18">av_log</name><argument_list pos:start="317:19" pos:end="319:74">(<argument pos:start="317:20" pos:end="317:27"><expr pos:start="317:20" pos:end="317:27"><name pos:start="317:20" pos:end="317:27"><name pos:start="317:20" pos:end="317:20">m</name><operator pos:start="317:21" pos:end="317:22">-&gt;</operator><name pos:start="317:23" pos:end="317:27">avctx</name></name></expr></argument>, <argument pos:start="317:30" pos:end="317:41"><expr pos:start="317:30" pos:end="317:41"><name pos:start="317:30" pos:end="317:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="319:20" pos:end="319:65"><expr pos:start="319:20" pos:end="319:65"><literal type="string" pos:start="319:20" pos:end="319:65">"No restart header present in substream %d.\n"</literal></expr></argument>, <argument pos:start="319:68" pos:end="319:73"><expr pos:start="319:68" pos:end="319:73"><name pos:start="319:68" pos:end="319:73">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:42"><expr pos:start="325:9" pos:end="325:41"><name pos:start="325:9" pos:end="325:11">buf</name> <operator pos:start="325:13" pos:end="325:14">+=</operator> <name pos:start="325:16" pos:end="325:41"><name pos:start="325:16" pos:end="325:33">substream_data_len</name><index pos:start="325:34" pos:end="325:41">[<expr pos:start="325:35" pos:end="325:40"><name pos:start="325:35" pos:end="325:40">substr</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="331:5" pos:end="331:51"><expr pos:start="331:5" pos:end="331:50"><call pos:start="331:5" pos:end="331:50"><name pos:start="331:5" pos:end="331:21">rematrix_channels</name><argument_list pos:start="331:22" pos:end="331:50">(<argument pos:start="331:23" pos:end="331:23"><expr pos:start="331:23" pos:end="331:23"><name pos:start="331:23" pos:end="331:23">m</name></expr></argument>, <argument pos:start="331:26" pos:end="331:49"><expr pos:start="331:26" pos:end="331:49"><name pos:start="331:26" pos:end="331:49"><name pos:start="331:26" pos:end="331:26">m</name><operator pos:start="331:27" pos:end="331:28">-&gt;</operator><name pos:start="331:29" pos:end="331:49">max_decoded_substream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="335:5" pos:end="337:18"><if pos:start="335:5" pos:end="337:18">if <condition pos:start="335:8" pos:end="335:70">(<expr pos:start="335:9" pos:end="335:69"><call pos:start="335:9" pos:end="335:65"><name pos:start="335:9" pos:end="335:19">output_data</name><argument_list pos:start="335:20" pos:end="335:65">(<argument pos:start="335:21" pos:end="335:21"><expr pos:start="335:21" pos:end="335:21"><name pos:start="335:21" pos:end="335:21">m</name></expr></argument>, <argument pos:start="335:24" pos:end="335:47"><expr pos:start="335:24" pos:end="335:47"><name pos:start="335:24" pos:end="335:47"><name pos:start="335:24" pos:end="335:24">m</name><operator pos:start="335:25" pos:end="335:26">-&gt;</operator><name pos:start="335:27" pos:end="335:47">max_decoded_substream</name></name></expr></argument>, <argument pos:start="335:50" pos:end="335:53"><expr pos:start="335:50" pos:end="335:53"><name pos:start="335:50" pos:end="335:53">data</name></expr></argument>, <argument pos:start="335:56" pos:end="335:64"><expr pos:start="335:56" pos:end="335:64"><name pos:start="335:56" pos:end="335:64">data_size</name></expr></argument>)</argument_list></call> <operator pos:start="335:67" pos:end="335:67">&lt;</operator> <literal type="number" pos:start="335:69" pos:end="335:69">0</literal></expr>)</condition><block type="pseudo" pos:start="337:9" pos:end="337:18"><block_content pos:start="337:9" pos:end="337:18">

        <return pos:start="337:9" pos:end="337:18">return <expr pos:start="337:16" pos:end="337:17"><operator pos:start="337:16" pos:end="337:16">-</operator><literal type="number" pos:start="337:17" pos:end="337:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="341:5" pos:end="341:18">return <expr pos:start="341:12" pos:end="341:17"><name pos:start="341:12" pos:end="341:17">length</name></expr>;</return>



<label pos:start="345:1" pos:end="345:26"><name pos:start="345:1" pos:end="345:25">substream_length_mismatch</name>:</label>

    <expr_stmt pos:start="347:5" pos:end="347:77"><expr pos:start="347:5" pos:end="347:76"><call pos:start="347:5" pos:end="347:76"><name pos:start="347:5" pos:end="347:10">av_log</name><argument_list pos:start="347:11" pos:end="347:76">(<argument pos:start="347:12" pos:end="347:19"><expr pos:start="347:12" pos:end="347:19"><name pos:start="347:12" pos:end="347:19"><name pos:start="347:12" pos:end="347:12">m</name><operator pos:start="347:13" pos:end="347:14">-&gt;</operator><name pos:start="347:15" pos:end="347:19">avctx</name></name></expr></argument>, <argument pos:start="347:22" pos:end="347:33"><expr pos:start="347:22" pos:end="347:33"><name pos:start="347:22" pos:end="347:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="347:36" pos:end="347:67"><expr pos:start="347:36" pos:end="347:67"><literal type="string" pos:start="347:36" pos:end="347:67">"substream %d length mismatch\n"</literal></expr></argument>, <argument pos:start="347:70" pos:end="347:75"><expr pos:start="347:70" pos:end="347:75"><name pos:start="347:70" pos:end="347:75">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="349:5" pos:end="349:14">return <expr pos:start="349:12" pos:end="349:13"><operator pos:start="349:12" pos:end="349:12">-</operator><literal type="number" pos:start="349:13" pos:end="349:13">1</literal></expr>;</return>



<label pos:start="353:1" pos:end="353:6"><name pos:start="353:1" pos:end="353:5">error</name>:</label>

    <expr_stmt pos:start="355:5" pos:end="355:24"><expr pos:start="355:5" pos:end="355:23"><name pos:start="355:5" pos:end="355:19"><name pos:start="355:5" pos:end="355:5">m</name><operator pos:start="355:6" pos:end="355:7">-&gt;</operator><name pos:start="355:8" pos:end="355:19">params_valid</name></name> <operator pos:start="355:21" pos:end="355:21">=</operator> <literal type="number" pos:start="355:23" pos:end="355:23">0</literal></expr>;</expr_stmt>

    <return pos:start="357:5" pos:end="357:14">return <expr pos:start="357:12" pos:end="357:13"><operator pos:start="357:12" pos:end="357:12">-</operator><literal type="number" pos:start="357:13" pos:end="357:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
