<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12025.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">virtex_init</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">MachineState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:32">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:22">initrd_base</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">initrd_size</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:35">address_space_mem</name> <init pos:start="17:37" pos:end="17:57">= <expr pos:start="17:39" pos:end="17:57"><call pos:start="17:39" pos:end="17:57"><name pos:start="17:39" pos:end="17:55">get_system_memory</name><argument_list pos:start="17:56" pos:end="17:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:14">PowerPCCPU</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">CPUPPCState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">hwaddr</name></type> <name pos:start="25:12" pos:end="25:19">ram_base</name> <init pos:start="25:21" pos:end="25:23">= <expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:21"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">DriveInfo</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:52"><decl pos:start="29:5" pos:end="29:51"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:26">phys_ram</name> <init pos:start="29:28" pos:end="29:51">= <expr pos:start="29:30" pos:end="29:51"><call pos:start="29:30" pos:end="29:51"><name pos:start="29:30" pos:end="29:34">g_new</name><argument_list pos:start="29:35" pos:end="29:51">(<argument pos:start="29:36" pos:end="29:47"><expr pos:start="29:36" pos:end="29:47"><name pos:start="29:36" pos:end="29:47">MemoryRegion</name></expr></argument>, <argument pos:start="29:50" pos:end="29:50"><expr pos:start="29:50" pos:end="29:50"><literal type="number" pos:start="29:50" pos:end="29:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:20"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">qemu_irq</name></type> <name pos:start="31:14" pos:end="31:20"><name pos:start="31:14" pos:end="31:16">irq</name><index pos:start="31:17" pos:end="31:20">[<expr pos:start="31:18" pos:end="31:19"><literal type="number" pos:start="31:18" pos:end="31:19">32</literal></expr>]</index></name></decl>, <decl pos:start="31:23" pos:end="31:30"><type ref="prev" pos:start="31:5" pos:end="31:12"><modifier pos:start="31:23" pos:end="31:23">*</modifier></type><name pos:start="31:24" pos:end="31:30">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:10"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:19">/* init CPUs */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">NULL</name></expr>)</condition> <block pos:start="41:28" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:33">

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:17">cpu_model</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="string" pos:start="43:21" pos:end="43:32">"440-Xilinx"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:65"><expr pos:start="49:5" pos:end="49:64"><name pos:start="49:5" pos:end="49:7">cpu</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:64"><name pos:start="49:11" pos:end="49:28">ppc440_init_xilinx</name><argument_list pos:start="49:29" pos:end="49:64">(<argument pos:start="49:30" pos:end="49:38"><expr pos:start="49:30" pos:end="49:38"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:38">ram_size</name></expr></argument>, <argument pos:start="49:41" pos:end="49:41"><expr pos:start="49:41" pos:end="49:41"><literal type="number" pos:start="49:41" pos:end="49:41">1</literal></expr></argument>, <argument pos:start="49:44" pos:end="49:52"><expr pos:start="49:44" pos:end="49:52"><name pos:start="49:44" pos:end="49:52">cpu_model</name></expr></argument>, <argument pos:start="49:55" pos:end="49:63"><expr pos:start="49:55" pos:end="49:63"><literal type="number" pos:start="49:55" pos:end="49:63">400000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:20"><expr pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:7">env</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <operator pos:start="51:11" pos:end="51:11">&amp;</operator><name pos:start="51:12" pos:end="51:19"><name pos:start="51:12" pos:end="51:14">cpu</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:45"><expr pos:start="53:5" pos:end="53:44"><call pos:start="53:5" pos:end="53:44"><name pos:start="53:5" pos:end="53:23">qemu_register_reset</name><argument_list pos:start="53:24" pos:end="53:44">(<argument pos:start="53:25" pos:end="53:38"><expr pos:start="53:25" pos:end="53:38"><name pos:start="53:25" pos:end="53:38">main_cpu_reset</name></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><name pos:start="53:41" pos:end="53:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:74"><expr pos:start="57:5" pos:end="57:73"><call pos:start="57:5" pos:end="57:73"><name pos:start="57:5" pos:end="57:40">memory_region_allocate_system_memory</name><argument_list pos:start="57:41" pos:end="57:73">(<argument pos:start="57:42" pos:end="57:49"><expr pos:start="57:42" pos:end="57:49"><name pos:start="57:42" pos:end="57:49">phys_ram</name></expr></argument>, <argument pos:start="57:52" pos:end="57:55"><expr pos:start="57:52" pos:end="57:55"><name pos:start="57:52" pos:end="57:55">NULL</name></expr></argument>, <argument pos:start="57:58" pos:end="57:62"><expr pos:start="57:58" pos:end="57:62"><literal type="string" pos:start="57:58" pos:end="57:62">"ram"</literal></expr></argument>, <argument pos:start="57:65" pos:end="57:72"><expr pos:start="57:65" pos:end="57:72"><name pos:start="57:65" pos:end="57:72">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:71"><expr pos:start="59:5" pos:end="59:70"><call pos:start="59:5" pos:end="59:70"><name pos:start="59:5" pos:end="59:31">memory_region_add_subregion</name><argument_list pos:start="59:32" pos:end="59:70">(<argument pos:start="59:33" pos:end="59:49"><expr pos:start="59:33" pos:end="59:49"><name pos:start="59:33" pos:end="59:49">address_space_mem</name></expr></argument>, <argument pos:start="59:52" pos:end="59:59"><expr pos:start="59:52" pos:end="59:59"><name pos:start="59:52" pos:end="59:59">ram_base</name></expr></argument>, <argument pos:start="59:62" pos:end="59:69"><expr pos:start="59:62" pos:end="59:69"><name pos:start="59:62" pos:end="59:69">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:39"><expr pos:start="63:5" pos:end="63:38"><name pos:start="63:5" pos:end="63:9">dinfo</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:21">drive_get</name><argument_list pos:start="63:22" pos:end="63:38">(<argument pos:start="63:23" pos:end="63:31"><expr pos:start="63:23" pos:end="63:31"><name pos:start="63:23" pos:end="63:31">IF_PFLASH</name></expr></argument>, <argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><literal type="number" pos:start="63:34" pos:end="63:34">0</literal></expr></argument>, <argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><literal type="number" pos:start="63:37" pos:end="63:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="71:57"><expr pos:start="65:5" pos:end="71:56"><call pos:start="65:5" pos:end="71:56"><name pos:start="65:5" pos:end="65:25">pflash_cfi01_register</name><argument_list pos:start="65:26" pos:end="71:56">(<argument pos:start="65:27" pos:end="65:41"><expr pos:start="65:27" pos:end="65:41"><name pos:start="65:27" pos:end="65:41">PFLASH_BASEADDR</name></expr></argument>, <argument pos:start="65:44" pos:end="65:47"><expr pos:start="65:44" pos:end="65:47"><name pos:start="65:44" pos:end="65:47">NULL</name></expr></argument>, <argument pos:start="65:50" pos:end="65:63"><expr pos:start="65:50" pos:end="65:63"><literal type="string" pos:start="65:50" pos:end="65:63">"virtex.flash"</literal></expr></argument>, <argument pos:start="65:66" pos:end="65:75"><expr pos:start="65:66" pos:end="65:75"><name pos:start="65:66" pos:end="65:75">FLASH_SIZE</name></expr></argument>,

                          <argument pos:start="67:27" pos:end="67:75"><expr pos:start="67:27" pos:end="67:75"><ternary pos:start="67:27" pos:end="67:75"><condition pos:start="67:27" pos:end="67:33"><expr pos:start="67:27" pos:end="67:31"><name pos:start="67:27" pos:end="67:31">dinfo</name></expr> ?</condition><then pos:start="67:35" pos:end="67:68"> <expr pos:start="67:35" pos:end="67:68"><call pos:start="67:35" pos:end="67:68"><name pos:start="67:35" pos:end="67:40">blk_bs</name><argument_list pos:start="67:41" pos:end="67:68">(<argument pos:start="67:42" pos:end="67:67"><expr pos:start="67:42" pos:end="67:67"><call pos:start="67:42" pos:end="67:67"><name pos:start="67:42" pos:end="67:60">blk_by_legacy_dinfo</name><argument_list pos:start="67:61" pos:end="67:67">(<argument pos:start="67:62" pos:end="67:66"><expr pos:start="67:62" pos:end="67:66"><name pos:start="67:62" pos:end="67:66">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="67:70" pos:end="67:75">: <expr pos:start="67:72" pos:end="67:75"><name pos:start="67:72" pos:end="67:75">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:37"><expr pos:start="69:27" pos:end="69:37"><operator pos:start="69:27" pos:end="69:27">(</operator><literal type="number" pos:start="69:28" pos:end="69:29">64</literal> <operator pos:start="69:31" pos:end="69:31">*</operator> <literal type="number" pos:start="69:33" pos:end="69:36">1024</literal><operator pos:start="69:37" pos:end="69:37">)</operator></expr></argument>, <argument pos:start="69:40" pos:end="69:55"><expr pos:start="69:40" pos:end="69:55"><name pos:start="69:40" pos:end="69:49">FLASH_SIZE</name> <operator pos:start="69:51" pos:end="69:52">&gt;&gt;</operator> <literal type="number" pos:start="69:54" pos:end="69:55">16</literal></expr></argument>,

                          <argument pos:start="71:27" pos:end="71:27"><expr pos:start="71:27" pos:end="71:27"><literal type="number" pos:start="71:27" pos:end="71:27">1</literal></expr></argument>, <argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><literal type="number" pos:start="71:30" pos:end="71:33">0x89</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:39"><expr pos:start="71:36" pos:end="71:39"><literal type="number" pos:start="71:36" pos:end="71:39">0x18</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:47"><expr pos:start="71:42" pos:end="71:47"><literal type="number" pos:start="71:42" pos:end="71:47">0x0000</literal></expr></argument>, <argument pos:start="71:50" pos:end="71:52"><expr pos:start="71:50" pos:end="71:52"><literal type="number" pos:start="71:50" pos:end="71:52">0x0</literal></expr></argument>, <argument pos:start="71:55" pos:end="71:55"><expr pos:start="71:55" pos:end="71:55"><literal type="number" pos:start="71:55" pos:end="71:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:62"><expr pos:start="75:5" pos:end="75:61"><name pos:start="75:5" pos:end="75:11">cpu_irq</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">(</operator><name pos:start="75:16" pos:end="75:23">qemu_irq</name> <operator pos:start="75:25" pos:end="75:25">*</operator><operator pos:start="75:26" pos:end="75:26">)</operator> <operator pos:start="75:28" pos:end="75:28">&amp;</operator><name pos:start="75:29" pos:end="75:61"><name pos:start="75:29" pos:end="75:31">env</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:43">irq_inputs</name><index pos:start="75:44" pos:end="75:61">[<expr pos:start="75:45" pos:end="75:60"><name pos:start="75:45" pos:end="75:60">PPC40x_INPUT_INT</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:45"><expr pos:start="77:5" pos:end="77:44"><name pos:start="77:5" pos:end="77:7">dev</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:44"><name pos:start="77:11" pos:end="77:21">qdev_create</name><argument_list pos:start="77:22" pos:end="77:44">(<argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><name pos:start="77:23" pos:end="77:26">NULL</name></expr></argument>, <argument pos:start="77:29" pos:end="77:43"><expr pos:start="77:29" pos:end="77:43"><literal type="string" pos:start="77:29" pos:end="77:43">"xlnx.xps-intc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:49"><expr pos:start="79:5" pos:end="79:48"><call pos:start="79:5" pos:end="79:48"><name pos:start="79:5" pos:end="79:24">qdev_prop_set_uint32</name><argument_list pos:start="79:25" pos:end="79:48">(<argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><name pos:start="79:26" pos:end="79:28">dev</name></expr></argument>, <argument pos:start="79:31" pos:end="79:44"><expr pos:start="79:31" pos:end="79:44"><literal type="string" pos:start="79:31" pos:end="79:44">"kind-of-intr"</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:47"><expr pos:start="79:47" pos:end="79:47"><literal type="number" pos:start="79:47" pos:end="79:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><call pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:20">qdev_init_nofail</name><argument_list pos:start="81:21" pos:end="81:25">(<argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><name pos:start="81:22" pos:end="81:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:59"><expr pos:start="83:5" pos:end="83:58"><call pos:start="83:5" pos:end="83:58"><name pos:start="83:5" pos:end="83:19">sysbus_mmio_map</name><argument_list pos:start="83:20" pos:end="83:58">(<argument pos:start="83:21" pos:end="83:39"><expr pos:start="83:21" pos:end="83:39"><call pos:start="83:21" pos:end="83:39"><name pos:start="83:21" pos:end="83:34">SYS_BUS_DEVICE</name><argument_list pos:start="83:35" pos:end="83:39">(<argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:42" pos:end="83:42"><expr pos:start="83:42" pos:end="83:42"><literal type="number" pos:start="83:42" pos:end="83:42">0</literal></expr></argument>, <argument pos:start="83:45" pos:end="83:57"><expr pos:start="83:45" pos:end="83:57"><name pos:start="83:45" pos:end="83:57">INTC_BASEADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:59"><expr pos:start="85:5" pos:end="85:58"><call pos:start="85:5" pos:end="85:58"><name pos:start="85:5" pos:end="85:22">sysbus_connect_irq</name><argument_list pos:start="85:23" pos:end="85:58">(<argument pos:start="85:24" pos:end="85:42"><expr pos:start="85:24" pos:end="85:42"><call pos:start="85:24" pos:end="85:42"><name pos:start="85:24" pos:end="85:37">SYS_BUS_DEVICE</name><argument_list pos:start="85:38" pos:end="85:42">(<argument pos:start="85:39" pos:end="85:41"><expr pos:start="85:39" pos:end="85:41"><name pos:start="85:39" pos:end="85:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:45" pos:end="85:45"><expr pos:start="85:45" pos:end="85:45"><literal type="number" pos:start="85:45" pos:end="85:45">0</literal></expr></argument>, <argument pos:start="85:48" pos:end="85:57"><expr pos:start="85:48" pos:end="85:57"><name pos:start="85:48" pos:end="85:57"><name pos:start="85:48" pos:end="85:54">cpu_irq</name><index pos:start="85:55" pos:end="85:57">[<expr pos:start="85:56" pos:end="85:56"><literal type="number" pos:start="85:56" pos:end="85:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="91:5">for <control pos:start="87:9" pos:end="87:28">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:23"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <literal type="number" pos:start="87:21" pos:end="87:22">32</literal></expr>;</condition> <incr pos:start="87:25" pos:end="87:27"><expr pos:start="87:25" pos:end="87:27"><name pos:start="87:25" pos:end="87:25">i</name><operator pos:start="87:26" pos:end="87:27">++</operator></expr></incr>)</control> <block pos:start="87:30" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:42">

        <expr_stmt pos:start="89:9" pos:end="89:42"><expr pos:start="89:9" pos:end="89:41"><name pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:11">irq</name><index pos:start="89:12" pos:end="89:14">[<expr pos:start="89:13" pos:end="89:13"><name pos:start="89:13" pos:end="89:13">i</name></expr>]</index></name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:41"><name pos:start="89:18" pos:end="89:33">qdev_get_gpio_in</name><argument_list pos:start="89:34" pos:end="89:41">(<argument pos:start="89:35" pos:end="89:37"><expr pos:start="89:35" pos:end="89:37"><name pos:start="89:35" pos:end="89:37">dev</name></expr></argument>, <argument pos:start="89:40" pos:end="89:40"><expr pos:start="89:40" pos:end="89:40"><name pos:start="89:40" pos:end="89:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="95:5" pos:end="97:64"><expr pos:start="95:5" pos:end="97:63"><call pos:start="95:5" pos:end="97:63"><name pos:start="95:5" pos:end="95:18">serial_mm_init</name><argument_list pos:start="95:19" pos:end="97:63">(<argument pos:start="95:20" pos:end="95:36"><expr pos:start="95:20" pos:end="95:36"><name pos:start="95:20" pos:end="95:36">address_space_mem</name></expr></argument>, <argument pos:start="95:39" pos:end="95:56"><expr pos:start="95:39" pos:end="95:56"><name pos:start="95:39" pos:end="95:56">UART16550_BASEADDR</name></expr></argument>, <argument pos:start="95:59" pos:end="95:59"><expr pos:start="95:59" pos:end="95:59"><literal type="number" pos:start="95:59" pos:end="95:59">2</literal></expr></argument>, <argument pos:start="95:62" pos:end="95:79"><expr pos:start="95:62" pos:end="95:79"><name pos:start="95:62" pos:end="95:79"><name pos:start="95:62" pos:end="95:64">irq</name><index pos:start="95:65" pos:end="95:79">[<expr pos:start="95:66" pos:end="95:78"><name pos:start="95:66" pos:end="95:78">UART16550_IRQ</name></expr>]</index></name></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:25"><expr pos:start="97:20" pos:end="97:25"><literal type="number" pos:start="97:20" pos:end="97:25">115200</literal></expr></argument>, <argument pos:start="97:28" pos:end="97:40"><expr pos:start="97:28" pos:end="97:40"><name pos:start="97:28" pos:end="97:40"><name pos:start="97:28" pos:end="97:37">serial_hds</name><index pos:start="97:38" pos:end="97:40">[<expr pos:start="97:39" pos:end="97:39"><literal type="number" pos:start="97:39" pos:end="97:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:43" pos:end="97:62"><expr pos:start="97:43" pos:end="97:62"><name pos:start="97:43" pos:end="97:62">DEVICE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:38">/* 2 timers at irq 2 @ 62 Mhz.  */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:46"><expr pos:start="103:5" pos:end="103:45"><name pos:start="103:5" pos:end="103:7">dev</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="103:45"><name pos:start="103:11" pos:end="103:21">qdev_create</name><argument_list pos:start="103:22" pos:end="103:45">(<argument pos:start="103:23" pos:end="103:26"><expr pos:start="103:23" pos:end="103:26"><name pos:start="103:23" pos:end="103:26">NULL</name></expr></argument>, <argument pos:start="103:29" pos:end="103:44"><expr pos:start="103:29" pos:end="103:44"><literal type="string" pos:start="103:29" pos:end="103:44">"xlnx.xps-timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:51"><expr pos:start="105:5" pos:end="105:50"><call pos:start="105:5" pos:end="105:50"><name pos:start="105:5" pos:end="105:24">qdev_prop_set_uint32</name><argument_list pos:start="105:25" pos:end="105:50">(<argument pos:start="105:26" pos:end="105:28"><expr pos:start="105:26" pos:end="105:28"><name pos:start="105:26" pos:end="105:28">dev</name></expr></argument>, <argument pos:start="105:31" pos:end="105:46"><expr pos:start="105:31" pos:end="105:46"><literal type="string" pos:start="105:31" pos:end="105:46">"one-timer-only"</literal></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:63"><expr pos:start="107:5" pos:end="107:62"><call pos:start="107:5" pos:end="107:62"><name pos:start="107:5" pos:end="107:24">qdev_prop_set_uint32</name><argument_list pos:start="107:25" pos:end="107:62">(<argument pos:start="107:26" pos:end="107:28"><expr pos:start="107:26" pos:end="107:28"><name pos:start="107:26" pos:end="107:28">dev</name></expr></argument>, <argument pos:start="107:31" pos:end="107:47"><expr pos:start="107:31" pos:end="107:47"><literal type="string" pos:start="107:31" pos:end="107:47">"clock-frequency"</literal></expr></argument>, <argument pos:start="107:50" pos:end="107:61"><expr pos:start="107:50" pos:end="107:61"><literal type="number" pos:start="107:50" pos:end="107:51">62</literal> <operator pos:start="107:53" pos:end="107:53">*</operator> <literal type="number" pos:start="107:55" pos:end="107:61">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><call pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:20">qdev_init_nofail</name><argument_list pos:start="109:21" pos:end="109:25">(<argument pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:60"><expr pos:start="111:5" pos:end="111:59"><call pos:start="111:5" pos:end="111:59"><name pos:start="111:5" pos:end="111:19">sysbus_mmio_map</name><argument_list pos:start="111:20" pos:end="111:59">(<argument pos:start="111:21" pos:end="111:39"><expr pos:start="111:21" pos:end="111:39"><call pos:start="111:21" pos:end="111:39"><name pos:start="111:21" pos:end="111:34">SYS_BUS_DEVICE</name><argument_list pos:start="111:35" pos:end="111:39">(<argument pos:start="111:36" pos:end="111:38"><expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:42" pos:end="111:42"><expr pos:start="111:42" pos:end="111:42"><literal type="number" pos:start="111:42" pos:end="111:42">0</literal></expr></argument>, <argument pos:start="111:45" pos:end="111:58"><expr pos:start="111:45" pos:end="111:58"><name pos:start="111:45" pos:end="111:58">TIMER_BASEADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:63"><expr pos:start="113:5" pos:end="113:62"><call pos:start="113:5" pos:end="113:62"><name pos:start="113:5" pos:end="113:22">sysbus_connect_irq</name><argument_list pos:start="113:23" pos:end="113:62">(<argument pos:start="113:24" pos:end="113:42"><expr pos:start="113:24" pos:end="113:42"><call pos:start="113:24" pos:end="113:42"><name pos:start="113:24" pos:end="113:37">SYS_BUS_DEVICE</name><argument_list pos:start="113:38" pos:end="113:42">(<argument pos:start="113:39" pos:end="113:41"><expr pos:start="113:39" pos:end="113:41"><name pos:start="113:39" pos:end="113:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:45" pos:end="113:45"><expr pos:start="113:45" pos:end="113:45"><literal type="number" pos:start="113:45" pos:end="113:45">0</literal></expr></argument>, <argument pos:start="113:48" pos:end="113:61"><expr pos:start="113:48" pos:end="113:61"><name pos:start="113:48" pos:end="113:61"><name pos:start="113:48" pos:end="113:50">irq</name><index pos:start="113:51" pos:end="113:61">[<expr pos:start="113:52" pos:end="113:60"><name pos:start="113:52" pos:end="113:60">TIMER_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="201:5"><if pos:start="117:5" pos:end="201:5">if <condition pos:start="117:8" pos:end="117:24">(<expr pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:23">kernel_filename</name></expr>)</condition> <block pos:start="117:26" pos:end="201:5">{<block_content pos:start="119:9" pos:end="199:48">

        <decl_stmt pos:start="119:9" pos:end="119:34"><decl pos:start="119:9" pos:end="119:22"><type pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:16">uint64_t</name></type> <name pos:start="119:18" pos:end="119:22">entry</name></decl>, <decl pos:start="119:25" pos:end="119:27"><type ref="prev" pos:start="119:9" pos:end="119:16"/><name pos:start="119:25" pos:end="119:27">low</name></decl>, <decl pos:start="119:30" pos:end="119:33"><type ref="prev" pos:start="119:9" pos:end="119:16"/><name pos:start="119:30" pos:end="119:33">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="121:9" pos:end="121:27"><decl pos:start="121:9" pos:end="121:26"><type pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:14">hwaddr</name></type> <name pos:start="121:16" pos:end="121:26">boot_offset</name></decl>;</decl_stmt>



        <comment type="block" pos:start="125:9" pos:end="125:41">/* Boots a kernel elf binary.  */</comment>

        <expr_stmt pos:start="127:9" pos:end="129:71"><expr pos:start="127:9" pos:end="129:70"><name pos:start="127:9" pos:end="127:19">kernel_size</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="129:70"><name pos:start="127:23" pos:end="127:30">load_elf</name><argument_list pos:start="127:31" pos:end="129:70">(<argument pos:start="127:32" pos:end="127:46"><expr pos:start="127:32" pos:end="127:46"><name pos:start="127:32" pos:end="127:46">kernel_filename</name></expr></argument>, <argument pos:start="127:49" pos:end="127:52"><expr pos:start="127:49" pos:end="127:52"><name pos:start="127:49" pos:end="127:52">NULL</name></expr></argument>, <argument pos:start="127:55" pos:end="127:58"><expr pos:start="127:55" pos:end="127:58"><name pos:start="127:55" pos:end="127:58">NULL</name></expr></argument>,

                               <argument pos:start="129:32" pos:end="129:37"><expr pos:start="129:32" pos:end="129:37"><operator pos:start="129:32" pos:end="129:32">&amp;</operator><name pos:start="129:33" pos:end="129:37">entry</name></expr></argument>, <argument pos:start="129:40" pos:end="129:43"><expr pos:start="129:40" pos:end="129:43"><operator pos:start="129:40" pos:end="129:40">&amp;</operator><name pos:start="129:41" pos:end="129:43">low</name></expr></argument>, <argument pos:start="129:46" pos:end="129:50"><expr pos:start="129:46" pos:end="129:50"><operator pos:start="129:46" pos:end="129:46">&amp;</operator><name pos:start="129:47" pos:end="129:50">high</name></expr></argument>, <argument pos:start="129:53" pos:end="129:53"><expr pos:start="129:53" pos:end="129:53"><literal type="number" pos:start="129:53" pos:end="129:53">1</literal></expr></argument>, <argument pos:start="129:56" pos:end="129:66"><expr pos:start="129:56" pos:end="129:66"><name pos:start="129:56" pos:end="129:66">ELF_MACHINE</name></expr></argument>, <argument pos:start="129:69" pos:end="129:69"><expr pos:start="129:69" pos:end="129:69"><literal type="number" pos:start="129:69" pos:end="129:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:52"><expr pos:start="131:9" pos:end="131:51"><name pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:17">boot_info</name><operator pos:start="131:18" pos:end="131:18">.</operator><name pos:start="131:19" pos:end="131:30">bootstrap_pc</name></name> <operator pos:start="131:32" pos:end="131:32">=</operator> <name pos:start="131:34" pos:end="131:38">entry</name> <operator pos:start="131:40" pos:end="131:40">&amp;</operator> <literal type="number" pos:start="131:42" pos:end="131:51">0x00ffffff</literal></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="151:9"><if pos:start="135:9" pos:end="151:9">if <condition pos:start="135:12" pos:end="135:28">(<expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:23">kernel_size</name> <operator pos:start="135:25" pos:end="135:25">&lt;</operator> <literal type="number" pos:start="135:27" pos:end="135:27">0</literal></expr>)</condition> <block pos:start="135:30" pos:end="151:9">{<block_content pos:start="137:13" pos:end="149:63">

            <expr_stmt pos:start="137:13" pos:end="137:36"><expr pos:start="137:13" pos:end="137:35"><name pos:start="137:13" pos:end="137:23">boot_offset</name> <operator pos:start="137:25" pos:end="137:25">=</operator> <literal type="number" pos:start="137:27" pos:end="137:35">0x1200000</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="139:13" pos:end="139:62">/* If we failed loading ELF's try a raw image.  */</comment>

            <expr_stmt pos:start="141:13" pos:end="145:56"><expr pos:start="141:13" pos:end="145:55"><name pos:start="141:13" pos:end="141:23">kernel_size</name> <operator pos:start="141:25" pos:end="141:25">=</operator> <call pos:start="141:27" pos:end="145:55"><name pos:start="141:27" pos:end="141:45">load_image_targphys</name><argument_list pos:start="141:46" pos:end="145:55">(<argument pos:start="141:47" pos:end="141:61"><expr pos:start="141:47" pos:end="141:61"><name pos:start="141:47" pos:end="141:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="143:47" pos:end="143:57"><expr pos:start="143:47" pos:end="143:57"><name pos:start="143:47" pos:end="143:57">boot_offset</name></expr></argument>,

                                              <argument pos:start="145:47" pos:end="145:54"><expr pos:start="145:47" pos:end="145:54"><name pos:start="145:47" pos:end="145:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:49"><expr pos:start="147:13" pos:end="147:48"><name pos:start="147:13" pos:end="147:34"><name pos:start="147:13" pos:end="147:21">boot_info</name><operator pos:start="147:22" pos:end="147:22">.</operator><name pos:start="147:23" pos:end="147:34">bootstrap_pc</name></name> <operator pos:start="147:36" pos:end="147:36">=</operator> <name pos:start="147:38" pos:end="147:48">boot_offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:63"><expr pos:start="149:13" pos:end="149:62"><name pos:start="149:13" pos:end="149:16">high</name> <operator pos:start="149:18" pos:end="149:18">=</operator> <name pos:start="149:20" pos:end="149:41"><name pos:start="149:20" pos:end="149:28">boot_info</name><operator pos:start="149:29" pos:end="149:29">.</operator><name pos:start="149:30" pos:end="149:41">bootstrap_pc</name></name> <operator pos:start="149:43" pos:end="149:43">+</operator> <name pos:start="149:45" pos:end="149:55">kernel_size</name> <operator pos:start="149:57" pos:end="149:57">+</operator> <literal type="number" pos:start="149:59" pos:end="149:62">8192</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:41"><expr pos:start="155:9" pos:end="155:40"><name pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:17">boot_info</name><operator pos:start="155:18" pos:end="155:18">.</operator><name pos:start="155:19" pos:end="155:26">ima_size</name></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <name pos:start="155:30" pos:end="155:40">kernel_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:26">/* Load initrd. */</comment>

        <if_stmt pos:start="161:9" pos:end="183:9"><if pos:start="161:9" pos:end="183:9">if <condition pos:start="161:12" pos:end="161:37">(<expr pos:start="161:13" pos:end="161:36"><name pos:start="161:13" pos:end="161:36"><name pos:start="161:13" pos:end="161:19">machine</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:36">initrd_filename</name></name></expr>)</condition> <block pos:start="161:39" pos:end="183:9">{<block_content pos:start="163:13" pos:end="181:51">

            <expr_stmt pos:start="163:13" pos:end="163:51"><expr pos:start="163:13" pos:end="163:50"><name pos:start="163:13" pos:end="163:23">initrd_base</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:30">high</name> <operator pos:start="163:32" pos:end="163:32">=</operator> <call pos:start="163:34" pos:end="163:50"><name pos:start="163:34" pos:end="163:41">ROUND_UP</name><argument_list pos:start="163:42" pos:end="163:50">(<argument pos:start="163:43" pos:end="163:46"><expr pos:start="163:43" pos:end="163:46"><name pos:start="163:43" pos:end="163:46">high</name></expr></argument>, <argument pos:start="163:49" pos:end="163:49"><expr pos:start="163:49" pos:end="163:49"><literal type="number" pos:start="163:49" pos:end="163:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="167:69"><expr pos:start="165:13" pos:end="167:68"><name pos:start="165:13" pos:end="165:23">initrd_size</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="167:68"><name pos:start="165:27" pos:end="165:45">load_image_targphys</name><argument_list pos:start="165:46" pos:end="167:68">(<argument pos:start="165:47" pos:end="165:70"><expr pos:start="165:47" pos:end="165:70"><name pos:start="165:47" pos:end="165:70"><name pos:start="165:47" pos:end="165:53">machine</name><operator pos:start="165:54" pos:end="165:55">-&gt;</operator><name pos:start="165:56" pos:end="165:70">initrd_filename</name></name></expr></argument>,

                                              <argument pos:start="167:47" pos:end="167:50"><expr pos:start="167:47" pos:end="167:50"><name pos:start="167:47" pos:end="167:50">high</name></expr></argument>, <argument pos:start="167:53" pos:end="167:67"><expr pos:start="167:53" pos:end="167:67"><name pos:start="167:53" pos:end="167:60">ram_size</name> <operator pos:start="167:62" pos:end="167:62">-</operator> <name pos:start="167:64" pos:end="167:67">high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="171:13" pos:end="179:13"><if pos:start="171:13" pos:end="179:13">if <condition pos:start="171:16" pos:end="171:32">(<expr pos:start="171:17" pos:end="171:31"><name pos:start="171:17" pos:end="171:27">initrd_size</name> <operator pos:start="171:29" pos:end="171:29">&lt;</operator> <literal type="number" pos:start="171:31" pos:end="171:31">0</literal></expr>)</condition> <block pos:start="171:34" pos:end="179:13">{<block_content pos:start="173:17" pos:end="177:24">

                <expr_stmt pos:start="173:17" pos:end="175:55"><expr pos:start="173:17" pos:end="175:54"><call pos:start="173:17" pos:end="175:54"><name pos:start="173:17" pos:end="173:28">error_report</name><argument_list pos:start="173:29" pos:end="175:54">(<argument pos:start="173:30" pos:end="173:58"><expr pos:start="173:30" pos:end="173:58"><literal type="string" pos:start="173:30" pos:end="173:58">"couldn't load ram disk '%s'"</literal></expr></argument>,

                             <argument pos:start="175:30" pos:end="175:53"><expr pos:start="175:30" pos:end="175:53"><name pos:start="175:30" pos:end="175:53"><name pos:start="175:30" pos:end="175:36">machine</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:53">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:24"><expr pos:start="177:17" pos:end="177:23"><call pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:20">exit</name><argument_list pos:start="177:21" pos:end="177:23">(<argument pos:start="177:22" pos:end="177:22"><expr pos:start="177:22" pos:end="177:22"><literal type="number" pos:start="177:22" pos:end="177:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:51"><expr pos:start="181:13" pos:end="181:50"><name pos:start="181:13" pos:end="181:16">high</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <call pos:start="181:20" pos:end="181:50"><name pos:start="181:20" pos:end="181:27">ROUND_UP</name><argument_list pos:start="181:28" pos:end="181:50">(<argument pos:start="181:29" pos:end="181:46"><expr pos:start="181:29" pos:end="181:46"><name pos:start="181:29" pos:end="181:32">high</name> <operator pos:start="181:34" pos:end="181:34">+</operator> <name pos:start="181:36" pos:end="181:46">initrd_size</name></expr></argument>, <argument pos:start="181:49" pos:end="181:49"><expr pos:start="181:49" pos:end="181:49"><literal type="number" pos:start="181:49" pos:end="181:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="187:9" pos:end="187:37">/* Provide a device-tree.  */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:42"><expr pos:start="189:9" pos:end="189:41"><name pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:17">boot_info</name><operator pos:start="189:18" pos:end="189:18">.</operator><name pos:start="189:19" pos:end="189:21">fdt</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:28">high</name> <operator pos:start="189:30" pos:end="189:30">+</operator> <operator pos:start="189:32" pos:end="189:32">(</operator><literal type="number" pos:start="189:33" pos:end="189:36">8192</literal> <operator pos:start="189:38" pos:end="189:38">*</operator> <literal type="number" pos:start="189:40" pos:end="189:40">2</literal><operator pos:start="189:41" pos:end="189:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:31"><expr pos:start="191:9" pos:end="191:30"><name pos:start="191:9" pos:end="191:21"><name pos:start="191:9" pos:end="191:17">boot_info</name><operator pos:start="191:18" pos:end="191:18">.</operator><name pos:start="191:19" pos:end="191:21">fdt</name></name> <operator pos:start="191:23" pos:end="191:24">&amp;=</operator> <operator pos:start="191:26" pos:end="191:26">~</operator><literal type="number" pos:start="191:27" pos:end="191:30">8191</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="195:9" pos:end="199:48"><expr pos:start="195:9" pos:end="199:47"><call pos:start="195:9" pos:end="199:47"><name pos:start="195:9" pos:end="195:31">xilinx_load_device_tree</name><argument_list pos:start="195:32" pos:end="199:47">(<argument pos:start="195:33" pos:end="195:45"><expr pos:start="195:33" pos:end="195:45"><name pos:start="195:33" pos:end="195:45"><name pos:start="195:33" pos:end="195:41">boot_info</name><operator pos:start="195:42" pos:end="195:42">.</operator><name pos:start="195:43" pos:end="195:45">fdt</name></name></expr></argument>, <argument pos:start="195:48" pos:end="195:55"><expr pos:start="195:48" pos:end="195:55"><name pos:start="195:48" pos:end="195:55">ram_size</name></expr></argument>,

                                <argument pos:start="197:33" pos:end="197:43"><expr pos:start="197:33" pos:end="197:43"><name pos:start="197:33" pos:end="197:43">initrd_base</name></expr></argument>, <argument pos:start="197:46" pos:end="197:56"><expr pos:start="197:46" pos:end="197:56"><name pos:start="197:46" pos:end="197:56">initrd_size</name></expr></argument>,

                                <argument pos:start="199:33" pos:end="199:46"><expr pos:start="199:33" pos:end="199:46"><name pos:start="199:33" pos:end="199:46">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:18"><name pos:start="203:5" pos:end="203:7">env</name><operator pos:start="203:8" pos:end="203:9">-&gt;</operator><name pos:start="203:10" pos:end="203:18">load_info</name></name> <operator pos:start="203:20" pos:end="203:20">=</operator> <operator pos:start="203:22" pos:end="203:22">&amp;</operator><name pos:start="203:23" pos:end="203:31">boot_info</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
