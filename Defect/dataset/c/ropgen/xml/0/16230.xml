<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16230.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">pic_read_irq</name><parameter_list pos:start="1:17" pos:end="1:32">(<parameter pos:start="1:18" pos:end="1:31"><decl pos:start="1:18" pos:end="1:31"><type pos:start="1:18" pos:end="1:30"><name pos:start="1:18" pos:end="1:28">DeviceState</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:17">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">PICCommonState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:62">= <expr pos:start="5:25" pos:end="5:62"><call pos:start="5:25" pos:end="5:62"><name pos:start="5:25" pos:end="5:33">DO_UPCAST</name><argument_list pos:start="5:34" pos:end="5:62">(<argument pos:start="5:35" pos:end="5:48"><expr pos:start="5:35" pos:end="5:48"><name pos:start="5:35" pos:end="5:48">PICCommonState</name></expr></argument>, <argument pos:start="5:51" pos:end="5:58"><expr pos:start="5:51" pos:end="5:58"><name pos:start="5:51" pos:end="5:58"><name pos:start="5:51" pos:end="5:53">dev</name><operator pos:start="5:54" pos:end="5:54">.</operator><name pos:start="5:55" pos:end="5:58">qdev</name></name></expr></argument>, <argument pos:start="5:61" pos:end="5:61"><expr pos:start="5:61" pos:end="5:61"><name pos:start="5:61" pos:end="5:61">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">irq</name></decl>, <decl pos:start="7:14" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:17">irq2</name></decl>, <decl pos:start="7:20" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">intno</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:25"><expr pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:7">irq</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:24"><name pos:start="11:11" pos:end="11:21">pic_get_irq</name><argument_list pos:start="11:22" pos:end="11:24">(<argument pos:start="11:23" pos:end="11:23"><expr pos:start="11:23" pos:end="11:23"><name pos:start="11:23" pos:end="11:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="88:0"><if pos:start="13:5" pos:end="69:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">irq</name> <operator pos:start="13:13" pos:end="13:14">&gt;=</operator> <literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>)</condition> <block pos:start="13:19" pos:end="69:5">{<block_content pos:start="15:9" pos:end="67:27">

        <if_stmt pos:start="15:9" pos:end="65:9"><if pos:start="15:9" pos:end="61:9">if <condition pos:start="15:12" pos:end="15:21">(<expr pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:15">irq</name> <operator pos:start="15:17" pos:end="15:18">==</operator> <literal type="number" pos:start="15:20" pos:end="15:20">2</literal></expr>)</condition> <block pos:start="15:23" pos:end="61:9">{<block_content pos:start="17:13" pos:end="59:47">

            <expr_stmt pos:start="17:13" pos:end="17:42"><expr pos:start="17:13" pos:end="17:41"><name pos:start="17:13" pos:end="17:16">irq2</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:41"><name pos:start="17:20" pos:end="17:30">pic_get_irq</name><argument_list pos:start="17:31" pos:end="17:41">(<argument pos:start="17:32" pos:end="17:40"><expr pos:start="17:32" pos:end="17:40"><name pos:start="17:32" pos:end="17:40">slave_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="19:13" pos:end="57:13"><if pos:start="19:13" pos:end="23:13">if <condition pos:start="19:16" pos:end="19:26">(<expr pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:20">irq2</name> <operator pos:start="19:22" pos:end="19:23">&gt;=</operator> <literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr>)</condition> <block pos:start="19:28" pos:end="23:13">{<block_content pos:start="21:17" pos:end="21:44">

                <expr_stmt pos:start="21:17" pos:end="21:44"><expr pos:start="21:17" pos:end="21:43"><call pos:start="21:17" pos:end="21:43"><name pos:start="21:17" pos:end="21:26">pic_intack</name><argument_list pos:start="21:27" pos:end="21:43">(<argument pos:start="21:28" pos:end="21:36"><expr pos:start="21:28" pos:end="21:36"><name pos:start="21:28" pos:end="21:36">slave_pic</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">irq2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="23:15" pos:end="57:13">else <block pos:start="23:20" pos:end="57:13">{<block_content pos:start="27:17" pos:end="55:25">

                <comment type="block" pos:start="25:17" pos:end="25:54">/* spurious IRQ on slave controller */</comment>

                <if_stmt pos:start="27:17" pos:end="53:17"><if pos:start="27:17" pos:end="53:17">if <condition pos:start="27:20" pos:end="27:47">(<expr pos:start="27:21" pos:end="27:46"><name pos:start="27:21" pos:end="27:46">no_spurious_interrupt_hack</name></expr>)</condition> <block pos:start="27:49" pos:end="53:17">{<block_content pos:start="45:21" pos:end="51:30">

                    <comment type="block" pos:start="29:21" pos:end="43:23">/* Pretend it was delivered and acknowledged.  If

                     * it was spurious due to slave_pic-&gt;imr, then

                     * as soon as the mask is cleared, the slave will

                     * re-trigger IRQ2 on the master.  If it is spurious for

                     * some other reason, make sure we don't keep trying

                     * to half-process the same spurious interrupt over

                     * and over again.

                     */</comment>

                    <expr_stmt pos:start="45:21" pos:end="45:40"><expr pos:start="45:21" pos:end="45:39"><name pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:21">s</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:26">irr</name></name> <operator pos:start="45:28" pos:end="45:29">&amp;=</operator> <operator pos:start="45:31" pos:end="45:31">~</operator><operator pos:start="45:32" pos:end="45:32">(</operator><literal type="number" pos:start="45:33" pos:end="45:33">1</literal><operator pos:start="45:34" pos:end="45:35">&lt;&lt;</operator><name pos:start="45:36" pos:end="45:38">irq</name><operator pos:start="45:39" pos:end="45:39">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:45"><expr pos:start="47:21" pos:end="47:44"><name pos:start="47:21" pos:end="47:31"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:31">last_irr</name></name> <operator pos:start="47:33" pos:end="47:34">&amp;=</operator> <operator pos:start="47:36" pos:end="47:36">~</operator><operator pos:start="47:37" pos:end="47:37">(</operator><literal type="number" pos:start="47:38" pos:end="47:38">1</literal><operator pos:start="47:39" pos:end="47:40">&lt;&lt;</operator><name pos:start="47:41" pos:end="47:43">irq</name><operator pos:start="47:44" pos:end="47:44">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:40"><expr pos:start="49:21" pos:end="49:39"><name pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:26">isr</name></name> <operator pos:start="49:28" pos:end="49:29">&amp;=</operator> <operator pos:start="49:31" pos:end="49:31">~</operator><operator pos:start="49:32" pos:end="49:32">(</operator><literal type="number" pos:start="49:33" pos:end="49:33">1</literal><operator pos:start="49:34" pos:end="49:35">&lt;&lt;</operator><name pos:start="49:36" pos:end="49:38">irq</name><operator pos:start="49:39" pos:end="49:39">)</operator></expr>;</expr_stmt>

                    <return pos:start="51:21" pos:end="51:30">return <expr pos:start="51:28" pos:end="51:29"><operator pos:start="51:28" pos:end="51:28">-</operator><literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:25"><expr pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:20">irq2</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">7</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:47"><expr pos:start="59:13" pos:end="59:46"><name pos:start="59:13" pos:end="59:17">intno</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:39"><name pos:start="59:21" pos:end="59:29">slave_pic</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:39">irq_base</name></name> <operator pos:start="59:41" pos:end="59:41">+</operator> <name pos:start="59:43" pos:end="59:46">irq2</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:38">

            <expr_stmt pos:start="63:13" pos:end="63:38"><expr pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:17">intno</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:31"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:31">irq_base</name></name> <operator pos:start="63:33" pos:end="63:33">+</operator> <name pos:start="63:35" pos:end="63:37">irq</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><call pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:18">pic_intack</name><argument_list pos:start="67:19" pos:end="67:26">(<argument pos:start="67:20" pos:end="67:20"><expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">s</name></expr></argument>, <argument pos:start="67:23" pos:end="67:25"><expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:25">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="88:0">else <block pos:start="69:12" pos:end="88:0">{<block_content pos:start="73:9" pos:end="81:34">

        <comment type="block" pos:start="71:9" pos:end="71:45">/* spurious IRQ on host controller */</comment>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:39">(<expr pos:start="73:13" pos:end="73:38"><name pos:start="73:13" pos:end="73:38">no_spurious_interrupt_hack</name></expr>)</condition> <block pos:start="73:41" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:22">

            <return pos:start="75:13" pos:end="75:22">return <expr pos:start="75:20" pos:end="75:21"><operator pos:start="75:20" pos:end="75:20">-</operator><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">irq</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <literal type="number" pos:start="79:15" pos:end="79:15">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:13">intno</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:17">s</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:27">irq_base</name></name> <operator pos:start="81:29" pos:end="81:29">+</operator> <name pos:start="81:31" pos:end="81:33">irq</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="87:1" pos:end="87:52">#<cpp:directive pos:start="87:2" pos:end="87:3">if</cpp:directive> <expr pos:start="87:5" pos:end="87:52"><call pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:11">defined</name><argument_list pos:start="87:12" pos:end="87:22">(<argument pos:start="87:13" pos:end="87:21"><expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:21">DEBUG_PIC</name></expr></argument>)</argument_list></call> <operator pos:start="87:24" pos:end="87:25">||</operator> <call pos:start="87:27" pos:end="87:52"><name pos:start="87:27" pos:end="87:33">defined</name><argument_list pos:start="87:34" pos:end="87:52">(<argument pos:start="87:35" pos:end="87:51"><expr pos:start="87:35" pos:end="87:51"><name pos:start="87:35" pos:end="87:51">DEBUG_IRQ_LATENCY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="89:5" pos:end="98:0"><if pos:start="89:5" pos:end="98:0">if <condition pos:start="89:8" pos:end="89:17">(<expr pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:11">irq</name> <operator pos:start="89:13" pos:end="89:14">==</operator> <literal type="number" pos:start="89:16" pos:end="89:16">2</literal></expr>)</condition> <block pos:start="89:19" pos:end="98:0">{<block_content pos:start="91:9" pos:end="91:23">

        <expr_stmt pos:start="91:9" pos:end="91:23"><expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:11">irq</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:18">irq2</name> <operator pos:start="91:20" pos:end="91:20">+</operator> <literal type="number" pos:start="91:22" pos:end="91:22">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="97:1" pos:end="97:24">#<cpp:directive pos:start="97:2" pos:end="97:6">ifdef</cpp:directive> <name pos:start="97:8" pos:end="97:24">DEBUG_IRQ_LATENCY</name></cpp:ifdef>

    <expr_stmt pos:start="99:5" pos:end="108:0"><expr pos:start="99:5" pos:end="105:69"><call pos:start="99:5" pos:end="105:69"><name pos:start="99:5" pos:end="99:10">printf</name><argument_list pos:start="99:11" pos:end="105:69">(<argument pos:start="99:12" pos:end="99:36"><expr pos:start="99:12" pos:end="99:36"><literal type="string" pos:start="99:12" pos:end="99:36">"IRQ%d latency=%0.3fus\n"</literal></expr></argument>,

           <argument pos:start="101:12" pos:end="101:14"><expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">irq</name></expr></argument>,

           <argument pos:start="103:12" pos:end="105:68"><expr pos:start="103:12" pos:end="105:68"><operator pos:start="103:12" pos:end="103:12">(</operator><name pos:start="103:13" pos:end="103:18">double</name><operator pos:start="103:19" pos:end="103:19">)</operator><operator pos:start="103:20" pos:end="103:20">(</operator><call pos:start="103:21" pos:end="103:47"><name pos:start="103:21" pos:end="103:37">qemu_get_clock_ns</name><argument_list pos:start="103:38" pos:end="103:47">(<argument pos:start="103:39" pos:end="103:46"><expr pos:start="103:39" pos:end="103:46"><name pos:start="103:39" pos:end="103:46">vm_clock</name></expr></argument>)</argument_list></call> <operator pos:start="103:49" pos:end="103:49">-</operator>

                    <name pos:start="105:21" pos:end="105:33"><name pos:start="105:21" pos:end="105:28">irq_time</name><index pos:start="105:29" pos:end="105:33">[<expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:32">irq</name></expr>]</index></name><operator pos:start="105:34" pos:end="105:34">)</operator> <operator pos:start="105:36" pos:end="105:36">*</operator> <literal type="number" pos:start="105:38" pos:end="105:46">1000000.0</literal> <operator pos:start="105:48" pos:end="105:48">/</operator> <call pos:start="105:50" pos:end="105:68"><name pos:start="105:50" pos:end="105:66">get_ticks_per_sec</name><argument_list pos:start="105:67" pos:end="105:68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="109:5" pos:end="109:44"><expr pos:start="109:5" pos:end="109:43"><call pos:start="109:5" pos:end="109:43"><name pos:start="109:5" pos:end="109:11">DPRINTF</name><argument_list pos:start="109:12" pos:end="109:43">(<argument pos:start="109:13" pos:end="109:37"><expr pos:start="109:13" pos:end="109:37"><literal type="string" pos:start="109:13" pos:end="109:37">"pic_interrupt: irq=%d\n"</literal></expr></argument>, <argument pos:start="109:40" pos:end="109:42"><expr pos:start="109:40" pos:end="109:42"><name pos:start="109:40" pos:end="109:42">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="111:5" pos:end="111:17">return <expr pos:start="111:12" pos:end="111:16"><name pos:start="111:12" pos:end="111:16">intno</name></expr>;</return>

</block_content>}</block></function>
</unit>
