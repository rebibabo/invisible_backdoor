<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4845.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">dmg_read_chunk</name><parameter_list pos:start="1:33" pos:end="1:70">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:69">sector_num</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVDMGState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="105:5"><if pos:start="9:5" pos:end="105:5">if<condition pos:start="9:7" pos:end="9:58">(<expr pos:start="9:8" pos:end="9:57"><operator pos:start="9:8" pos:end="9:8">!</operator><call pos:start="9:9" pos:end="9:57"><name pos:start="9:9" pos:end="9:26">is_sector_in_chunk</name><argument_list pos:start="9:27" pos:end="9:57">(<argument pos:start="9:28" pos:end="9:28"><expr pos:start="9:28" pos:end="9:28"><name pos:start="9:28" pos:end="9:28">s</name></expr></argument>,<argument pos:start="9:30" pos:end="9:45"><expr pos:start="9:30" pos:end="9:45"><name pos:start="9:30" pos:end="9:45"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:45">current_chunk</name></name></expr></argument>,<argument pos:start="9:47" pos:end="9:56"><expr pos:start="9:47" pos:end="9:56"><name pos:start="9:47" pos:end="9:56">sector_num</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:60" pos:end="105:5">{<block_content pos:start="11:9" pos:end="103:33">

	<decl_stmt pos:start="11:9" pos:end="11:16"><decl pos:start="11:9" pos:end="11:15"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:52"><decl pos:start="13:9" pos:end="13:51"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:22">chunk</name> <init pos:start="13:24" pos:end="13:51">= <expr pos:start="13:26" pos:end="13:51"><call pos:start="13:26" pos:end="13:51"><name pos:start="13:26" pos:end="13:37">search_chunk</name><argument_list pos:start="13:38" pos:end="13:51">(<argument pos:start="13:39" pos:end="13:39"><expr pos:start="13:39" pos:end="13:39"><name pos:start="13:39" pos:end="13:39">s</name></expr></argument>,<argument pos:start="13:41" pos:end="13:50"><expr pos:start="13:41" pos:end="13:50"><name pos:start="13:41" pos:end="13:50">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="17:9" pos:end="19:22"><if pos:start="17:9" pos:end="19:22">if<condition pos:start="17:11" pos:end="17:30">(<expr pos:start="17:12" pos:end="17:29"><name pos:start="17:12" pos:end="17:16">chunk</name><operator pos:start="17:17" pos:end="17:18">&gt;=</operator><name pos:start="17:19" pos:end="17:29"><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:29">n_chunks</name></name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:22"><block_content pos:start="19:13" pos:end="19:22">

	    <return pos:start="19:13" pos:end="19:22">return <expr pos:start="19:20" pos:end="19:21"><operator pos:start="19:20" pos:end="19:20">-</operator><literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:24">current_chunk</name></name> <operator pos:start="23:26" pos:end="23:26">=</operator> <name pos:start="23:28" pos:end="23:38"><name pos:start="23:28" pos:end="23:28">s</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:38">n_chunks</name></name></expr>;</expr_stmt>

	<switch pos:start="25:9" pos:end="101:9">switch<condition pos:start="25:15" pos:end="25:31">(<expr pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:23">types</name><index pos:start="25:24" pos:end="25:30">[<expr pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:29">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="25:33" pos:end="101:9">{<block_content pos:start="27:9" pos:end="99:18">

	<case pos:start="27:9" pos:end="27:24">case <expr pos:start="27:14" pos:end="27:23"><literal type="number" pos:start="27:14" pos:end="27:23">0x80000005</literal></expr>:</case> <block pos:start="27:26" pos:end="81:20">{<block_content pos:start="29:13" pos:end="81:18"> <comment type="block" pos:start="27:28" pos:end="27:48">/* zlib compressed */</comment>

	    <decl_stmt pos:start="29:13" pos:end="29:18"><decl pos:start="29:13" pos:end="29:17"><type pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">int</name></type> <name pos:start="29:17" pos:end="29:17">i</name></decl>;</decl_stmt>



	    <comment type="block" pos:start="33:13" pos:end="35:27">/* we need to buffer, because only the chunk as whole can be

	     * inflated. */</comment>

	    <expr_stmt pos:start="37:13" pos:end="37:16"><expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:13">i</name><operator pos:start="37:14" pos:end="37:14">=</operator><literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>;</expr_stmt>

	    <do pos:start="39:13" pos:end="51:55">do <block pos:start="39:16" pos:end="51:13">{<block_content pos:start="41:17" pos:end="49:23">

                <expr_stmt pos:start="41:17" pos:end="43:77"><expr pos:start="41:17" pos:end="43:76"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="43:76"><name pos:start="41:23" pos:end="41:32">bdrv_pread</name><argument_list pos:start="41:33" pos:end="43:76">(<argument pos:start="41:34" pos:end="41:41"><expr pos:start="41:34" pos:end="41:41"><name pos:start="41:34" pos:end="41:41"><name pos:start="41:34" pos:end="41:35">bs</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:41">file</name></name></expr></argument>, <argument pos:start="41:44" pos:end="41:64"><expr pos:start="41:44" pos:end="41:64"><name pos:start="41:44" pos:end="41:60"><name pos:start="41:44" pos:end="41:44">s</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:53">offsets</name><index pos:start="41:54" pos:end="41:60">[<expr pos:start="41:55" pos:end="41:59"><name pos:start="41:55" pos:end="41:59">chunk</name></expr>]</index></name> <operator pos:start="41:62" pos:end="41:62">+</operator> <name pos:start="41:64" pos:end="41:64">i</name></expr></argument>,

                                 <argument pos:start="43:34" pos:end="43:54"><expr pos:start="43:34" pos:end="43:54"><name pos:start="43:34" pos:end="43:52"><name pos:start="43:34" pos:end="43:34">s</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:52">compressed_chunk</name></name><operator pos:start="43:53" pos:end="43:53">+</operator><name pos:start="43:54" pos:end="43:54">i</name></expr></argument>, <argument pos:start="43:57" pos:end="43:75"><expr pos:start="43:57" pos:end="43:75"><name pos:start="43:57" pos:end="43:73"><name pos:start="43:57" pos:end="43:57">s</name><operator pos:start="43:58" pos:end="43:59">-&gt;</operator><name pos:start="43:60" pos:end="43:66">lengths</name><index pos:start="43:67" pos:end="43:73">[<expr pos:start="43:68" pos:end="43:72"><name pos:start="43:68" pos:end="43:72">chunk</name></expr>]</index></name><operator pos:start="43:74" pos:end="43:74">-</operator><name pos:start="43:75" pos:end="43:75">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="45:17" pos:end="47:26"><if pos:start="45:17" pos:end="47:26">if<condition pos:start="45:19" pos:end="45:41">(<expr pos:start="45:20" pos:end="45:40"><name pos:start="45:20" pos:end="45:22">ret</name><operator pos:start="45:23" pos:end="45:23">&lt;</operator><literal type="number" pos:start="45:24" pos:end="45:24">0</literal> <operator pos:start="45:26" pos:end="45:27">&amp;&amp;</operator> <name pos:start="45:29" pos:end="45:33">errno</name><operator pos:start="45:34" pos:end="45:35">==</operator><name pos:start="45:36" pos:end="45:40">EINTR</name></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:26"><block_content pos:start="47:21" pos:end="47:26">

		    <expr_stmt pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:23">ret</name><operator pos:start="47:24" pos:end="47:24">=</operator><literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="49:17" pos:end="49:23"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:17">i</name><operator pos:start="49:18" pos:end="49:19">+=</operator><name pos:start="49:20" pos:end="49:22">ret</name></expr>;</expr_stmt>

	    </block_content>}</block> while<condition pos:start="51:20" pos:end="51:54">(<expr pos:start="51:21" pos:end="51:53"><name pos:start="51:21" pos:end="51:23">ret</name><operator pos:start="51:24" pos:end="51:25">&gt;=</operator><literal type="number" pos:start="51:26" pos:end="51:26">0</literal> <operator pos:start="51:28" pos:end="51:29">&amp;&amp;</operator> <name pos:start="51:31" pos:end="51:33">ret</name><operator pos:start="51:34" pos:end="51:34">+</operator><name pos:start="51:35" pos:end="51:35">i</name><operator pos:start="51:36" pos:end="51:36">&lt;</operator><name pos:start="51:37" pos:end="51:53"><name pos:start="51:37" pos:end="51:37">s</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:46">lengths</name><index pos:start="51:47" pos:end="51:53">[<expr pos:start="51:48" pos:end="51:52"><name pos:start="51:48" pos:end="51:52">chunk</name></expr>]</index></name></expr>)</condition>;</do>



	    <if_stmt pos:start="55:13" pos:end="57:26"><if pos:start="55:13" pos:end="57:26">if <condition pos:start="55:16" pos:end="55:41">(<expr pos:start="55:17" pos:end="55:40"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:22">!=</operator> <name pos:start="55:24" pos:end="55:40"><name pos:start="55:24" pos:end="55:24">s</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:33">lengths</name><index pos:start="55:34" pos:end="55:40">[<expr pos:start="55:35" pos:end="55:39"><name pos:start="55:35" pos:end="55:39">chunk</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:26"><block_content pos:start="57:17" pos:end="57:26">

		<return pos:start="57:17" pos:end="57:26">return <expr pos:start="57:24" pos:end="57:25"><operator pos:start="57:24" pos:end="57:24">-</operator><literal type="number" pos:start="57:25" pos:end="57:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="61:13" pos:end="61:53"><expr pos:start="61:13" pos:end="61:52"><name pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">zstream</name><operator pos:start="61:23" pos:end="61:23">.</operator><name pos:start="61:24" pos:end="61:30">next_in</name></name> <operator pos:start="61:32" pos:end="61:32">=</operator> <name pos:start="61:34" pos:end="61:52"><name pos:start="61:34" pos:end="61:34">s</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:52">compressed_chunk</name></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="63:13" pos:end="63:52"><expr pos:start="63:13" pos:end="63:51"><name pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">zstream</name><operator pos:start="63:23" pos:end="63:23">.</operator><name pos:start="63:24" pos:end="63:31">avail_in</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <name pos:start="63:35" pos:end="63:51"><name pos:start="63:35" pos:end="63:35">s</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:44">lengths</name><index pos:start="63:45" pos:end="63:51">[<expr pos:start="63:46" pos:end="63:50"><name pos:start="63:46" pos:end="63:50">chunk</name></expr>]</index></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="65:13" pos:end="65:56"><expr pos:start="65:13" pos:end="65:55"><name pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:22">zstream</name><operator pos:start="65:23" pos:end="65:23">.</operator><name pos:start="65:24" pos:end="65:31">next_out</name></name> <operator pos:start="65:33" pos:end="65:33">=</operator> <name pos:start="65:35" pos:end="65:55"><name pos:start="65:35" pos:end="65:35">s</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:55">uncompressed_chunk</name></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="67:13" pos:end="67:62"><expr pos:start="67:13" pos:end="67:61"><name pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:22">zstream</name><operator pos:start="67:23" pos:end="67:23">.</operator><name pos:start="67:24" pos:end="67:32">avail_out</name></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <literal type="number" pos:start="67:36" pos:end="67:38">512</literal><operator pos:start="67:39" pos:end="67:39">*</operator><name pos:start="67:40" pos:end="67:61"><name pos:start="67:40" pos:end="67:40">s</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:54">sectorcounts</name><index pos:start="67:55" pos:end="67:61">[<expr pos:start="67:56" pos:end="67:60"><name pos:start="67:56" pos:end="67:60">chunk</name></expr>]</index></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="69:13" pos:end="69:44"><expr pos:start="69:13" pos:end="69:43"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:43"><name pos:start="69:19" pos:end="69:30">inflateReset</name><argument_list pos:start="69:31" pos:end="69:43">(<argument pos:start="69:32" pos:end="69:42"><expr pos:start="69:32" pos:end="69:42"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:42"><name pos:start="69:33" pos:end="69:33">s</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:42">zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="71:13" pos:end="73:26"><if pos:start="71:13" pos:end="73:26">if<condition pos:start="71:15" pos:end="71:27">(<expr pos:start="71:16" pos:end="71:26"><name pos:start="71:16" pos:end="71:18">ret</name> <operator pos:start="71:20" pos:end="71:21">!=</operator> <name pos:start="71:23" pos:end="71:26">Z_OK</name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:26"><block_content pos:start="73:17" pos:end="73:26">

		<return pos:start="73:17" pos:end="73:26">return <expr pos:start="73:24" pos:end="73:25"><operator pos:start="73:24" pos:end="73:24">-</operator><literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="75:13" pos:end="75:49"><expr pos:start="75:13" pos:end="75:48"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:48"><name pos:start="75:19" pos:end="75:25">inflate</name><argument_list pos:start="75:26" pos:end="75:48">(<argument pos:start="75:27" pos:end="75:37"><expr pos:start="75:27" pos:end="75:37"><operator pos:start="75:27" pos:end="75:27">&amp;</operator><name pos:start="75:28" pos:end="75:37"><name pos:start="75:28" pos:end="75:28">s</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:37">zstream</name></name></expr></argument>, <argument pos:start="75:40" pos:end="75:47"><expr pos:start="75:40" pos:end="75:47"><name pos:start="75:40" pos:end="75:47">Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="77:13" pos:end="79:26"><if pos:start="77:13" pos:end="79:26">if<condition pos:start="77:15" pos:end="77:89">(<expr pos:start="77:16" pos:end="77:88"><name pos:start="77:16" pos:end="77:18">ret</name> <operator pos:start="77:20" pos:end="77:21">!=</operator> <name pos:start="77:23" pos:end="77:34">Z_STREAM_END</name> <operator pos:start="77:36" pos:end="77:37">||</operator> <name pos:start="77:39" pos:end="77:58"><name pos:start="77:39" pos:end="77:39">s</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:48">zstream</name><operator pos:start="77:49" pos:end="77:49">.</operator><name pos:start="77:50" pos:end="77:58">total_out</name></name> <operator pos:start="77:60" pos:end="77:61">!=</operator> <literal type="number" pos:start="77:63" pos:end="77:65">512</literal><operator pos:start="77:66" pos:end="77:66">*</operator><name pos:start="77:67" pos:end="77:88"><name pos:start="77:67" pos:end="77:67">s</name><operator pos:start="77:68" pos:end="77:69">-&gt;</operator><name pos:start="77:70" pos:end="77:81">sectorcounts</name><index pos:start="77:82" pos:end="77:88">[<expr pos:start="77:83" pos:end="77:87"><name pos:start="77:83" pos:end="77:87">chunk</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:26"><block_content pos:start="79:17" pos:end="79:26">

		<return pos:start="79:17" pos:end="79:26">return <expr pos:start="79:24" pos:end="79:25"><operator pos:start="79:24" pos:end="79:24">-</operator><literal type="number" pos:start="79:25" pos:end="79:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	    <break pos:start="81:13" pos:end="81:18">break;</break> </block_content>}</block>

	<case pos:start="83:9" pos:end="83:15">case <expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr>:</case> <comment type="block" pos:start="83:17" pos:end="83:26">/* copy */</comment>

	    <expr_stmt pos:start="85:13" pos:end="87:71"><expr pos:start="85:13" pos:end="87:70"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="87:70"><name pos:start="85:19" pos:end="85:28">bdrv_pread</name><argument_list pos:start="85:29" pos:end="87:70">(<argument pos:start="85:30" pos:end="85:37"><expr pos:start="85:30" pos:end="85:37"><name pos:start="85:30" pos:end="85:37"><name pos:start="85:30" pos:end="85:31">bs</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:37">file</name></name></expr></argument>, <argument pos:start="85:40" pos:end="85:56"><expr pos:start="85:40" pos:end="85:56"><name pos:start="85:40" pos:end="85:56"><name pos:start="85:40" pos:end="85:40">s</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:49">offsets</name><index pos:start="85:50" pos:end="85:56">[<expr pos:start="85:51" pos:end="85:55"><name pos:start="85:51" pos:end="85:55">chunk</name></expr>]</index></name></expr></argument>,

                             <argument pos:start="87:30" pos:end="87:50"><expr pos:start="87:30" pos:end="87:50"><name pos:start="87:30" pos:end="87:50"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:50">uncompressed_chunk</name></name></expr></argument>, <argument pos:start="87:53" pos:end="87:69"><expr pos:start="87:53" pos:end="87:69"><name pos:start="87:53" pos:end="87:69"><name pos:start="87:53" pos:end="87:53">s</name><operator pos:start="87:54" pos:end="87:55">-&gt;</operator><name pos:start="87:56" pos:end="87:62">lengths</name><index pos:start="87:63" pos:end="87:69">[<expr pos:start="87:64" pos:end="87:68"><name pos:start="87:64" pos:end="87:68">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="89:13" pos:end="91:26"><if pos:start="89:13" pos:end="91:26">if <condition pos:start="89:16" pos:end="89:41">(<expr pos:start="89:17" pos:end="89:40"><name pos:start="89:17" pos:end="89:19">ret</name> <operator pos:start="89:21" pos:end="89:22">!=</operator> <name pos:start="89:24" pos:end="89:40"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:33">lengths</name><index pos:start="89:34" pos:end="89:40">[<expr pos:start="89:35" pos:end="89:39"><name pos:start="89:35" pos:end="89:39">chunk</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:26"><block_content pos:start="91:17" pos:end="91:26">

		<return pos:start="91:17" pos:end="91:26">return <expr pos:start="91:24" pos:end="91:25"><operator pos:start="91:24" pos:end="91:24">-</operator><literal type="number" pos:start="91:25" pos:end="91:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

	    <break pos:start="93:13" pos:end="93:18">break;</break>

	<case pos:start="95:9" pos:end="95:15">case <expr pos:start="95:14" pos:end="95:14"><literal type="number" pos:start="95:14" pos:end="95:14">2</literal></expr>:</case> <comment type="block" pos:start="95:17" pos:end="95:26">/* zero */</comment>

	    <expr_stmt pos:start="97:13" pos:end="97:73"><expr pos:start="97:13" pos:end="97:72"><call pos:start="97:13" pos:end="97:72"><name pos:start="97:13" pos:end="97:18">memset</name><argument_list pos:start="97:19" pos:end="97:72">(<argument pos:start="97:20" pos:end="97:40"><expr pos:start="97:20" pos:end="97:40"><name pos:start="97:20" pos:end="97:40"><name pos:start="97:20" pos:end="97:20">s</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:40">uncompressed_chunk</name></name></expr></argument>, <argument pos:start="97:43" pos:end="97:43"><expr pos:start="97:43" pos:end="97:43"><literal type="number" pos:start="97:43" pos:end="97:43">0</literal></expr></argument>, <argument pos:start="97:46" pos:end="97:71"><expr pos:start="97:46" pos:end="97:71"><literal type="number" pos:start="97:46" pos:end="97:48">512</literal><operator pos:start="97:49" pos:end="97:49">*</operator><name pos:start="97:50" pos:end="97:71"><name pos:start="97:50" pos:end="97:50">s</name><operator pos:start="97:51" pos:end="97:52">-&gt;</operator><name pos:start="97:53" pos:end="97:64">sectorcounts</name><index pos:start="97:65" pos:end="97:71">[<expr pos:start="97:66" pos:end="97:70"><name pos:start="97:66" pos:end="97:70">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="99:13" pos:end="99:18">break;</break>

	</block_content>}</block></switch>

	<expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:24">current_chunk</name></name> <operator pos:start="103:26" pos:end="103:26">=</operator> <name pos:start="103:28" pos:end="103:32">chunk</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
