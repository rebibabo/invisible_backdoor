<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18535.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">theora_decode_tables</name><parameter_list pos:start="1:32" pos:end="1:72">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:71"><decl pos:start="1:56" pos:end="1:71"><type pos:start="1:56" pos:end="1:71"><name pos:start="1:56" pos:end="1:68">GetBitContext</name></type> <name pos:start="1:70" pos:end="1:71">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="191:1">{<block_content pos:start="5:5" pos:end="189:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">Vp3DecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">n</name></decl>, <decl pos:start="7:15" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:22">matrices</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:17">theora</name></name> <operator pos:start="11:19" pos:end="11:20">&gt;=</operator> <literal type="number" pos:start="11:22" pos:end="11:29">0x030200</literal></expr>)</condition> <block pos:start="11:32" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:57">

        <expr_stmt pos:start="13:9" pos:end="13:29"><expr pos:start="13:9" pos:end="13:28"><name pos:start="13:9" pos:end="13:9">n</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:28"><name pos:start="13:13" pos:end="13:20">get_bits</name><argument_list pos:start="13:21" pos:end="13:28">(<argument pos:start="13:22" pos:end="13:24"><expr pos:start="13:22" pos:end="13:24"><operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:24">gb</name></expr></argument>, <argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="15:9" pos:end="15:44">/* loop filter limit values table */</comment>

        <for pos:start="17:9" pos:end="19:57">for <control pos:start="17:13" pos:end="17:32">(<init pos:start="17:14" pos:end="17:19"><expr pos:start="17:14" pos:end="17:18"><name pos:start="17:14" pos:end="17:14">i</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>;</init> <condition pos:start="17:21" pos:end="17:27"><expr pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:21">i</name> <operator pos:start="17:23" pos:end="17:23">&lt;</operator> <literal type="number" pos:start="17:25" pos:end="17:26">64</literal></expr>;</condition> <incr pos:start="17:29" pos:end="17:31"><expr pos:start="17:29" pos:end="17:31"><name pos:start="17:29" pos:end="17:29">i</name><operator pos:start="17:30" pos:end="17:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="19:13" pos:end="19:57"><block_content pos:start="19:13" pos:end="19:57">

            <expr_stmt pos:start="19:13" pos:end="19:57"><expr pos:start="19:13" pos:end="19:56"><name pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:34">filter_limit_values</name><index pos:start="19:35" pos:end="19:37">[<expr pos:start="19:36" pos:end="19:36"><name pos:start="19:36" pos:end="19:36">i</name></expr>]</index></name> <operator pos:start="19:39" pos:end="19:39">=</operator> <call pos:start="19:41" pos:end="19:56"><name pos:start="19:41" pos:end="19:48">get_bits</name><argument_list pos:start="19:49" pos:end="19:56">(<argument pos:start="19:50" pos:end="19:52"><expr pos:start="19:50" pos:end="19:52"><operator pos:start="19:50" pos:end="19:50">&amp;</operator><name pos:start="19:51" pos:end="19:52">gb</name></expr></argument>, <argument pos:start="19:55" pos:end="19:55"><expr pos:start="19:55" pos:end="19:55"><name pos:start="19:55" pos:end="19:55">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:15"><if pos:start="25:5" pos:end="27:33">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">theora</name></name> <operator pos:start="25:19" pos:end="25:20">&gt;=</operator> <literal type="number" pos:start="25:22" pos:end="25:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:33"><block_content pos:start="27:9" pos:end="27:33">

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:9">n</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:20">get_bits</name><argument_list pos:start="27:21" pos:end="27:28">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><operator pos:start="27:22" pos:end="27:22">&amp;</operator><name pos:start="27:23" pos:end="27:24">gb</name></expr></argument>, <argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">4</literal></expr></argument>)</argument_list></call> <operator pos:start="27:30" pos:end="27:30">+</operator> <literal type="number" pos:start="27:32" pos:end="27:32">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="31:15">else<block type="pseudo" pos:start="31:9" pos:end="31:15"><block_content pos:start="31:9" pos:end="31:15">

        <expr_stmt pos:start="31:9" pos:end="31:15"><expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:9">n</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:14">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:33">/* quality threshold table */</comment>

    <for pos:start="35:5" pos:end="37:55">for <control pos:start="35:9" pos:end="35:28">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:23"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <literal type="number" pos:start="35:21" pos:end="35:22">64</literal></expr>;</condition> <incr pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:25">i</name><operator pos:start="35:26" pos:end="35:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="37:9" pos:end="37:55"><block_content pos:start="37:9" pos:end="37:55">

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:32">coded_ac_scale_factor</name><index pos:start="37:33" pos:end="37:35">[<expr pos:start="37:34" pos:end="37:34"><name pos:start="37:34" pos:end="37:34">i</name></expr>]</index></name> <operator pos:start="37:37" pos:end="37:37">=</operator> <call pos:start="37:39" pos:end="37:54"><name pos:start="37:39" pos:end="37:46">get_bits</name><argument_list pos:start="37:47" pos:end="37:54">(<argument pos:start="37:48" pos:end="37:50"><expr pos:start="37:48" pos:end="37:50"><operator pos:start="37:48" pos:end="37:48">&amp;</operator><name pos:start="37:49" pos:end="37:50">gb</name></expr></argument>, <argument pos:start="37:53" pos:end="37:53"><expr pos:start="37:53" pos:end="37:53"><name pos:start="37:53" pos:end="37:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="41:5" pos:end="47:15"><if pos:start="41:5" pos:end="43:33">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">theora</name></name> <operator pos:start="41:19" pos:end="41:20">&gt;=</operator> <literal type="number" pos:start="41:22" pos:end="41:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:33"><block_content pos:start="43:9" pos:end="43:33">

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:9">n</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:20">get_bits</name><argument_list pos:start="43:21" pos:end="43:28">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><operator pos:start="43:22" pos:end="43:22">&amp;</operator><name pos:start="43:23" pos:end="43:24">gb</name></expr></argument>, <argument pos:start="43:27" pos:end="43:27"><expr pos:start="43:27" pos:end="43:27"><literal type="number" pos:start="43:27" pos:end="43:27">4</literal></expr></argument>)</argument_list></call> <operator pos:start="43:30" pos:end="43:30">+</operator> <literal type="number" pos:start="43:32" pos:end="43:32">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="45:5" pos:end="47:15">else<block type="pseudo" pos:start="47:9" pos:end="47:15"><block_content pos:start="47:9" pos:end="47:15">

        <expr_stmt pos:start="47:9" pos:end="47:15"><expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:9">n</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <literal type="number" pos:start="47:13" pos:end="47:14">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:31">/* dc scale factor table */</comment>

    <for pos:start="51:5" pos:end="53:55">for <control pos:start="51:9" pos:end="51:28">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:23"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <literal type="number" pos:start="51:21" pos:end="51:22">64</literal></expr>;</condition> <incr pos:start="51:25" pos:end="51:27"><expr pos:start="51:25" pos:end="51:27"><name pos:start="51:25" pos:end="51:25">i</name><operator pos:start="51:26" pos:end="51:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="53:9" pos:end="53:55"><block_content pos:start="53:9" pos:end="53:55">

        <expr_stmt pos:start="53:9" pos:end="53:55"><expr pos:start="53:9" pos:end="53:54"><name pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:32">coded_dc_scale_factor</name><index pos:start="53:33" pos:end="53:35">[<expr pos:start="53:34" pos:end="53:34"><name pos:start="53:34" pos:end="53:34">i</name></expr>]</index></name> <operator pos:start="53:37" pos:end="53:37">=</operator> <call pos:start="53:39" pos:end="53:54"><name pos:start="53:39" pos:end="53:46">get_bits</name><argument_list pos:start="53:47" pos:end="53:54">(<argument pos:start="53:48" pos:end="53:50"><expr pos:start="53:48" pos:end="53:50"><operator pos:start="53:48" pos:end="53:48">&amp;</operator><name pos:start="53:49" pos:end="53:50">gb</name></expr></argument>, <argument pos:start="53:53" pos:end="53:53"><expr pos:start="53:53" pos:end="53:53"><name pos:start="53:53" pos:end="53:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="57:5" pos:end="63:21"><if pos:start="57:5" pos:end="59:40">if <condition pos:start="57:8" pos:end="57:30">(<expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:17">theora</name></name> <operator pos:start="57:19" pos:end="57:20">&gt;=</operator> <literal type="number" pos:start="57:22" pos:end="57:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:40"><block_content pos:start="59:9" pos:end="59:40">

        <expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:16">matrices</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <call pos:start="59:20" pos:end="59:35"><name pos:start="59:20" pos:end="59:27">get_bits</name><argument_list pos:start="59:28" pos:end="59:35">(<argument pos:start="59:29" pos:end="59:31"><expr pos:start="59:29" pos:end="59:31"><operator pos:start="59:29" pos:end="59:29">&amp;</operator><name pos:start="59:30" pos:end="59:31">gb</name></expr></argument>, <argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">9</literal></expr></argument>)</argument_list></call> <operator pos:start="59:37" pos:end="59:37">+</operator> <literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="61:5" pos:end="63:21">else<block type="pseudo" pos:start="63:9" pos:end="63:21"><block_content pos:start="63:9" pos:end="63:21">

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:16">matrices</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <literal type="number" pos:start="63:20" pos:end="63:20">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:22">(<expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:16">matrices</name> <operator pos:start="65:18" pos:end="65:19">!=</operator> <literal type="number" pos:start="65:21" pos:end="65:21">3</literal></expr>)</condition> <block pos:start="65:24" pos:end="71:5">{<block_content pos:start="67:9" pos:end="67:75">

        <expr_stmt pos:start="67:9" pos:end="67:75"><expr pos:start="67:9" pos:end="67:74"><call pos:start="67:9" pos:end="67:74"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="67:74">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>,<argument pos:start="67:22" pos:end="67:33"><expr pos:start="67:22" pos:end="67:33"><name pos:start="67:22" pos:end="67:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:36" pos:end="67:63"><expr pos:start="67:36" pos:end="67:63"><literal type="string" pos:start="67:36" pos:end="67:63">"unsupported matrices: %d\n"</literal></expr></argument>, <argument pos:start="67:66" pos:end="67:73"><expr pos:start="67:66" pos:end="67:73"><name pos:start="67:66" pos:end="67:73">matrices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="69:1" pos:end="69:20">//        return -1;</comment>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:18">/* y coeffs */</comment>

    <for pos:start="75:5" pos:end="77:55">for <control pos:start="75:9" pos:end="75:28">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:23"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <literal type="number" pos:start="75:21" pos:end="75:22">64</literal></expr>;</condition> <incr pos:start="75:25" pos:end="75:27"><expr pos:start="75:25" pos:end="75:27"><name pos:start="75:25" pos:end="75:25">i</name><operator pos:start="75:26" pos:end="75:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:9" pos:end="77:55"><block_content pos:start="77:9" pos:end="77:55">

        <expr_stmt pos:start="77:9" pos:end="77:55"><expr pos:start="77:9" pos:end="77:54"><name pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:32">coded_intra_y_dequant</name><index pos:start="77:33" pos:end="77:35">[<expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">i</name></expr>]</index></name> <operator pos:start="77:37" pos:end="77:37">=</operator> <call pos:start="77:39" pos:end="77:54"><name pos:start="77:39" pos:end="77:46">get_bits</name><argument_list pos:start="77:47" pos:end="77:54">(<argument pos:start="77:48" pos:end="77:50"><expr pos:start="77:48" pos:end="77:50"><operator pos:start="77:48" pos:end="77:48">&amp;</operator><name pos:start="77:49" pos:end="77:50">gb</name></expr></argument>, <argument pos:start="77:53" pos:end="77:53"><expr pos:start="77:53" pos:end="77:53"><literal type="number" pos:start="77:53" pos:end="77:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="81:5" pos:end="81:19">/* uv coeffs */</comment>

    <for pos:start="83:5" pos:end="85:55">for <control pos:start="83:9" pos:end="83:28">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:22">64</literal></expr>;</condition> <incr pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:25">i</name><operator pos:start="83:26" pos:end="83:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:9" pos:end="85:55"><block_content pos:start="85:9" pos:end="85:55">

        <expr_stmt pos:start="85:9" pos:end="85:55"><expr pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:32">coded_intra_c_dequant</name><index pos:start="85:33" pos:end="85:35">[<expr pos:start="85:34" pos:end="85:34"><name pos:start="85:34" pos:end="85:34">i</name></expr>]</index></name> <operator pos:start="85:37" pos:end="85:37">=</operator> <call pos:start="85:39" pos:end="85:54"><name pos:start="85:39" pos:end="85:46">get_bits</name><argument_list pos:start="85:47" pos:end="85:54">(<argument pos:start="85:48" pos:end="85:50"><expr pos:start="85:48" pos:end="85:50"><operator pos:start="85:48" pos:end="85:48">&amp;</operator><name pos:start="85:49" pos:end="85:50">gb</name></expr></argument>, <argument pos:start="85:53" pos:end="85:53"><expr pos:start="85:53" pos:end="85:53"><literal type="number" pos:start="85:53" pos:end="85:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="89:5" pos:end="89:22">/* inter coeffs */</comment>

    <for pos:start="91:5" pos:end="93:53">for <control pos:start="91:9" pos:end="91:28">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:23"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <literal type="number" pos:start="91:21" pos:end="91:22">64</literal></expr>;</condition> <incr pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><name pos:start="91:25" pos:end="91:25">i</name><operator pos:start="91:26" pos:end="91:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:9" pos:end="93:53"><block_content pos:start="93:9" pos:end="93:53">

        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:30">coded_inter_dequant</name><index pos:start="93:31" pos:end="93:33">[<expr pos:start="93:32" pos:end="93:32"><name pos:start="93:32" pos:end="93:32">i</name></expr>]</index></name> <operator pos:start="93:35" pos:end="93:35">=</operator> <call pos:start="93:37" pos:end="93:52"><name pos:start="93:37" pos:end="93:44">get_bits</name><argument_list pos:start="93:45" pos:end="93:52">(<argument pos:start="93:46" pos:end="93:48"><expr pos:start="93:46" pos:end="93:48"><operator pos:start="93:46" pos:end="93:46">&amp;</operator><name pos:start="93:47" pos:end="93:48">gb</name></expr></argument>, <argument pos:start="93:51" pos:end="93:51"><expr pos:start="93:51" pos:end="93:51"><literal type="number" pos:start="93:51" pos:end="93:51">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="97:5" pos:end="97:31">/* skip unknown matrices */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:21"><expr pos:start="99:5" pos:end="99:20"><name pos:start="99:5" pos:end="99:5">n</name> <operator pos:start="99:7" pos:end="99:7">=</operator> <name pos:start="99:9" pos:end="99:16">matrices</name> <operator pos:start="99:18" pos:end="99:18">-</operator> <literal type="number" pos:start="99:20" pos:end="99:20">3</literal></expr>;</expr_stmt>

    <while pos:start="101:5" pos:end="105:30">while<condition pos:start="101:10" pos:end="101:14">(<expr pos:start="101:11" pos:end="101:13"><name pos:start="101:11" pos:end="101:11">n</name><operator pos:start="101:12" pos:end="101:13">--</operator></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="105:30"><block_content pos:start="103:9" pos:end="105:30">

        <for pos:start="103:9" pos:end="105:30">for <control pos:start="103:13" pos:end="103:32">(<init pos:start="103:14" pos:end="103:19"><expr pos:start="103:14" pos:end="103:18"><name pos:start="103:14" pos:end="103:14">i</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <literal type="number" pos:start="103:18" pos:end="103:18">0</literal></expr>;</init> <condition pos:start="103:21" pos:end="103:27"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:21">i</name> <operator pos:start="103:23" pos:end="103:23">&lt;</operator> <literal type="number" pos:start="103:25" pos:end="103:26">64</literal></expr>;</condition> <incr pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:29">i</name><operator pos:start="103:30" pos:end="103:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:13" pos:end="105:30"><block_content pos:start="105:13" pos:end="105:30">

            <expr_stmt pos:start="105:13" pos:end="105:30"><expr pos:start="105:13" pos:end="105:29"><call pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:21">skip_bits</name><argument_list pos:start="105:22" pos:end="105:29">(<argument pos:start="105:23" pos:end="105:25"><expr pos:start="105:23" pos:end="105:25"><operator pos:start="105:23" pos:end="105:23">&amp;</operator><name pos:start="105:24" pos:end="105:25">gb</name></expr></argument>, <argument pos:start="105:28" pos:end="105:28"><expr pos:start="105:28" pos:end="105:28"><literal type="number" pos:start="105:28" pos:end="105:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></while>



    <for pos:start="109:5" pos:end="157:5">for <control pos:start="109:9" pos:end="109:28">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:23"><expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:20">&lt;=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">1</literal></expr>;</condition> <incr pos:start="109:25" pos:end="109:27"><expr pos:start="109:25" pos:end="109:27"><name pos:start="109:25" pos:end="109:25">i</name><operator pos:start="109:26" pos:end="109:27">++</operator></expr></incr>)</control> <block pos:start="109:30" pos:end="157:5">{<block_content pos:start="111:9" pos:end="155:9">

        <for pos:start="111:9" pos:end="155:9">for <control pos:start="111:13" pos:end="111:32">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">n</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:27"><expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:21">n</name> <operator pos:start="111:23" pos:end="111:24">&lt;=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">2</literal></expr>;</condition> <incr pos:start="111:29" pos:end="111:31"><expr pos:start="111:29" pos:end="111:31"><name pos:start="111:29" pos:end="111:29">n</name><operator pos:start="111:30" pos:end="111:31">++</operator></expr></incr>)</control> <block pos:start="111:34" pos:end="155:9">{<block_content pos:start="113:13" pos:end="153:13">

            <decl_stmt pos:start="113:13" pos:end="113:22"><decl pos:start="113:13" pos:end="113:21"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:21">newqr</name></decl>;</decl_stmt>

            <if_stmt pos:start="115:13" pos:end="121:26"><if pos:start="115:13" pos:end="117:41">if <condition pos:start="115:16" pos:end="115:31">(<expr pos:start="115:17" pos:end="115:30"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&gt;</operator> <literal type="number" pos:start="115:21" pos:end="115:21">0</literal> <operator pos:start="115:23" pos:end="115:24">||</operator> <name pos:start="115:26" pos:end="115:26">n</name> <operator pos:start="115:28" pos:end="115:28">&gt;</operator> <literal type="number" pos:start="115:30" pos:end="115:30">0</literal></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:41"><block_content pos:start="117:17" pos:end="117:41">

                <expr_stmt pos:start="117:17" pos:end="117:41"><expr pos:start="117:17" pos:end="117:40"><name pos:start="117:17" pos:end="117:21">newqr</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <call pos:start="117:25" pos:end="117:40"><name pos:start="117:25" pos:end="117:32">get_bits</name><argument_list pos:start="117:33" pos:end="117:40">(<argument pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><operator pos:start="117:34" pos:end="117:34">&amp;</operator><name pos:start="117:35" pos:end="117:36">gb</name></expr></argument>, <argument pos:start="117:39" pos:end="117:39"><expr pos:start="117:39" pos:end="117:39"><literal type="number" pos:start="117:39" pos:end="117:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="119:13" pos:end="121:26">else<block type="pseudo" pos:start="121:17" pos:end="121:26"><block_content pos:start="121:17" pos:end="121:26">

                <expr_stmt pos:start="121:17" pos:end="121:26"><expr pos:start="121:17" pos:end="121:25"><name pos:start="121:17" pos:end="121:21">newqr</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <literal type="number" pos:start="121:25" pos:end="121:25">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="123:13" pos:end="153:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:23">(<expr pos:start="123:17" pos:end="123:22"><operator pos:start="123:17" pos:end="123:17">!</operator><name pos:start="123:18" pos:end="123:22">newqr</name></expr>)</condition> <block pos:start="123:25" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:37">

                <if_stmt pos:start="125:17" pos:end="127:37"><if pos:start="125:17" pos:end="127:37">if <condition pos:start="125:20" pos:end="125:26">(<expr pos:start="125:21" pos:end="125:25"><name pos:start="125:21" pos:end="125:21">i</name> <operator pos:start="125:23" pos:end="125:23">&gt;</operator> <literal type="number" pos:start="125:25" pos:end="125:25">0</literal></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:37"><block_content pos:start="127:21" pos:end="127:37">

                    <expr_stmt pos:start="127:21" pos:end="127:37"><expr pos:start="127:21" pos:end="127:36"><call pos:start="127:21" pos:end="127:36"><name pos:start="127:21" pos:end="127:28">get_bits</name><argument_list pos:start="127:29" pos:end="127:36">(<argument pos:start="127:30" pos:end="127:32"><expr pos:start="127:30" pos:end="127:32"><operator pos:start="127:30" pos:end="127:30">&amp;</operator><name pos:start="127:31" pos:end="127:32">gb</name></expr></argument>, <argument pos:start="127:35" pos:end="127:35"><expr pos:start="127:35" pos:end="127:35"><literal type="number" pos:start="127:35" pos:end="127:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if>

            <else pos:start="131:13" pos:end="153:13">else <block pos:start="131:18" pos:end="153:13">{<block_content pos:start="133:17" pos:end="151:17">

                <decl_stmt pos:start="133:17" pos:end="133:27"><decl pos:start="133:17" pos:end="133:26"><type pos:start="133:17" pos:end="133:19"><name pos:start="133:17" pos:end="133:19">int</name></type> <name pos:start="133:21" pos:end="133:22">qi</name> <init pos:start="133:24" pos:end="133:26">= <expr pos:start="133:26" pos:end="133:26"><literal type="number" pos:start="133:26" pos:end="133:26">0</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:54"><expr pos:start="135:17" pos:end="135:53"><call pos:start="135:17" pos:end="135:53"><name pos:start="135:17" pos:end="135:25">skip_bits</name><argument_list pos:start="135:26" pos:end="135:53">(<argument pos:start="135:27" pos:end="135:29"><expr pos:start="135:27" pos:end="135:29"><operator pos:start="135:27" pos:end="135:27">&amp;</operator><name pos:start="135:28" pos:end="135:29">gb</name></expr></argument>, <argument pos:start="135:32" pos:end="135:52"><expr pos:start="135:32" pos:end="135:52"><call pos:start="135:32" pos:end="135:50"><name pos:start="135:32" pos:end="135:38">av_log2</name><argument_list pos:start="135:39" pos:end="135:50">(<argument pos:start="135:40" pos:end="135:49"><expr pos:start="135:40" pos:end="135:49"><name pos:start="135:40" pos:end="135:47">matrices</name><operator pos:start="135:48" pos:end="135:48">-</operator><literal type="number" pos:start="135:49" pos:end="135:49">1</literal></expr></argument>)</argument_list></call><operator pos:start="135:51" pos:end="135:51">+</operator><literal type="number" pos:start="135:52" pos:end="135:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="137:17" pos:end="143:17">while <condition pos:start="137:23" pos:end="137:31">(<expr pos:start="137:24" pos:end="137:30"><name pos:start="137:24" pos:end="137:25">qi</name> <operator pos:start="137:27" pos:end="137:27">&lt;</operator> <literal type="number" pos:start="137:29" pos:end="137:30">63</literal></expr>)</condition> <block pos:start="137:33" pos:end="143:17">{<block_content pos:start="139:21" pos:end="141:58">

                    <expr_stmt pos:start="139:21" pos:end="139:62"><expr pos:start="139:21" pos:end="139:61"><name pos:start="139:21" pos:end="139:22">qi</name> <operator pos:start="139:24" pos:end="139:25">+=</operator> <call pos:start="139:27" pos:end="139:57"><name pos:start="139:27" pos:end="139:34">get_bits</name><argument_list pos:start="139:35" pos:end="139:57">(<argument pos:start="139:36" pos:end="139:38"><expr pos:start="139:36" pos:end="139:38"><operator pos:start="139:36" pos:end="139:36">&amp;</operator><name pos:start="139:37" pos:end="139:38">gb</name></expr></argument>, <argument pos:start="139:41" pos:end="139:56"><expr pos:start="139:41" pos:end="139:56"><call pos:start="139:41" pos:end="139:54"><name pos:start="139:41" pos:end="139:47">av_log2</name><argument_list pos:start="139:48" pos:end="139:54">(<argument pos:start="139:49" pos:end="139:53"><expr pos:start="139:49" pos:end="139:53"><literal type="number" pos:start="139:49" pos:end="139:51">63</literal><operator pos:start="139:51" pos:end="139:51">-</operator><name pos:start="139:52" pos:end="139:53">qi</name></expr></argument>)</argument_list></call><operator pos:start="139:55" pos:end="139:55">+</operator><literal type="number" pos:start="139:56" pos:end="139:56">1</literal></expr></argument>)</argument_list></call> <operator pos:start="139:59" pos:end="139:59">+</operator> <literal type="number" pos:start="139:61" pos:end="139:61">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:58"><expr pos:start="141:21" pos:end="141:57"><call pos:start="141:21" pos:end="141:57"><name pos:start="141:21" pos:end="141:29">skip_bits</name><argument_list pos:start="141:30" pos:end="141:57">(<argument pos:start="141:31" pos:end="141:33"><expr pos:start="141:31" pos:end="141:33"><operator pos:start="141:31" pos:end="141:31">&amp;</operator><name pos:start="141:32" pos:end="141:33">gb</name></expr></argument>, <argument pos:start="141:36" pos:end="141:56"><expr pos:start="141:36" pos:end="141:56"><call pos:start="141:36" pos:end="141:54"><name pos:start="141:36" pos:end="141:42">av_log2</name><argument_list pos:start="141:43" pos:end="141:54">(<argument pos:start="141:44" pos:end="141:53"><expr pos:start="141:44" pos:end="141:53"><name pos:start="141:44" pos:end="141:51">matrices</name><operator pos:start="141:52" pos:end="141:52">-</operator><literal type="number" pos:start="141:53" pos:end="141:53">1</literal></expr></argument>)</argument_list></call><operator pos:start="141:55" pos:end="141:55">+</operator><literal type="number" pos:start="141:56" pos:end="141:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="145:17" pos:end="151:17"><if pos:start="145:17" pos:end="151:17">if <condition pos:start="145:20" pos:end="145:28">(<expr pos:start="145:21" pos:end="145:27"><name pos:start="145:21" pos:end="145:22">qi</name> <operator pos:start="145:24" pos:end="145:24">&gt;</operator> <literal type="number" pos:start="145:26" pos:end="145:27">63</literal></expr>)</condition> <block pos:start="145:30" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:30">

                    <expr_stmt pos:start="147:21" pos:end="147:76"><expr pos:start="147:21" pos:end="147:75"><call pos:start="147:21" pos:end="147:75"><name pos:start="147:21" pos:end="147:26">av_log</name><argument_list pos:start="147:27" pos:end="147:75">(<argument pos:start="147:28" pos:end="147:32"><expr pos:start="147:28" pos:end="147:32"><name pos:start="147:28" pos:end="147:32">avctx</name></expr></argument>, <argument pos:start="147:35" pos:end="147:46"><expr pos:start="147:35" pos:end="147:46"><name pos:start="147:35" pos:end="147:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:49" pos:end="147:70"><expr pos:start="147:49" pos:end="147:70"><literal type="string" pos:start="147:49" pos:end="147:70">"invalid qi %d &gt; 63\n"</literal></expr></argument>, <argument pos:start="147:73" pos:end="147:74"><expr pos:start="147:73" pos:end="147:74"><name pos:start="147:73" pos:end="147:74">qi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="149:21" pos:end="149:30">return <expr pos:start="149:28" pos:end="149:29"><operator pos:start="149:28" pos:end="149:28">-</operator><literal type="number" pos:start="149:29" pos:end="149:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="161:5" pos:end="161:24">/* Huffman tables */</comment>

    <for pos:start="163:5" pos:end="181:5">for <control pos:start="163:9" pos:end="163:43">(<init pos:start="163:10" pos:end="163:20"><expr pos:start="163:10" pos:end="163:19"><name pos:start="163:10" pos:end="163:15"><name pos:start="163:10" pos:end="163:10">s</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:15">hti</name></name> <operator pos:start="163:17" pos:end="163:17">=</operator> <literal type="number" pos:start="163:19" pos:end="163:19">0</literal></expr>;</init> <condition pos:start="163:22" pos:end="163:33"><expr pos:start="163:22" pos:end="163:32"><name pos:start="163:22" pos:end="163:27"><name pos:start="163:22" pos:end="163:22">s</name><operator pos:start="163:23" pos:end="163:24">-&gt;</operator><name pos:start="163:25" pos:end="163:27">hti</name></name> <operator pos:start="163:29" pos:end="163:29">&lt;</operator> <literal type="number" pos:start="163:31" pos:end="163:32">80</literal></expr>;</condition> <incr pos:start="163:35" pos:end="163:42"><expr pos:start="163:35" pos:end="163:42"><name pos:start="163:35" pos:end="163:40"><name pos:start="163:35" pos:end="163:35">s</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:40">hti</name></name><operator pos:start="163:41" pos:end="163:42">++</operator></expr></incr>)</control> <block pos:start="163:45" pos:end="181:5">{<block_content pos:start="165:9" pos:end="179:9">

        <expr_stmt pos:start="165:9" pos:end="165:23"><expr pos:start="165:9" pos:end="165:22"><name pos:start="165:9" pos:end="165:18"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:18">entries</name></name> <operator pos:start="165:20" pos:end="165:20">=</operator> <literal type="number" pos:start="165:22" pos:end="165:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:30"><expr pos:start="167:9" pos:end="167:29"><name pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:25">huff_code_size</name></name> <operator pos:start="167:27" pos:end="167:27">=</operator> <literal type="number" pos:start="167:29" pos:end="167:29">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="179:9"><if pos:start="169:9" pos:end="179:9">if <condition pos:start="169:12" pos:end="169:30">(<expr pos:start="169:13" pos:end="169:29"><operator pos:start="169:13" pos:end="169:13">!</operator><call pos:start="169:14" pos:end="169:29"><name pos:start="169:14" pos:end="169:21">get_bits</name><argument_list pos:start="169:22" pos:end="169:29">(<argument pos:start="169:23" pos:end="169:25"><expr pos:start="169:23" pos:end="169:25"><operator pos:start="169:23" pos:end="169:23">&amp;</operator><name pos:start="169:24" pos:end="169:25">gb</name></expr></argument>, <argument pos:start="169:28" pos:end="169:28"><expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="169:32" pos:end="179:9">{<block_content pos:start="171:13" pos:end="177:42">

            <expr_stmt pos:start="171:13" pos:end="171:25"><expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:20"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:20">hbits</name></name> <operator pos:start="171:22" pos:end="171:22">=</operator> <literal type="number" pos:start="171:24" pos:end="171:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:42"><expr pos:start="173:13" pos:end="173:41"><call pos:start="173:13" pos:end="173:41"><name pos:start="173:13" pos:end="173:29">read_huffman_tree</name><argument_list pos:start="173:30" pos:end="173:41">(<argument pos:start="173:31" pos:end="173:35"><expr pos:start="173:31" pos:end="173:35"><name pos:start="173:31" pos:end="173:35">avctx</name></expr></argument>, <argument pos:start="173:38" pos:end="173:40"><expr pos:start="173:38" pos:end="173:40"><operator pos:start="173:38" pos:end="173:38">&amp;</operator><name pos:start="173:39" pos:end="173:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:25"><expr pos:start="175:13" pos:end="175:24"><name pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:13">s</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:20">hbits</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <literal type="number" pos:start="175:24" pos:end="175:24">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:42"><expr pos:start="177:13" pos:end="177:41"><call pos:start="177:13" pos:end="177:41"><name pos:start="177:13" pos:end="177:29">read_huffman_tree</name><argument_list pos:start="177:30" pos:end="177:41">(<argument pos:start="177:31" pos:end="177:35"><expr pos:start="177:31" pos:end="177:35"><name pos:start="177:31" pos:end="177:35">avctx</name></expr></argument>, <argument pos:start="177:38" pos:end="177:40"><expr pos:start="177:38" pos:end="177:40"><operator pos:start="177:38" pos:end="177:38">&amp;</operator><name pos:start="177:39" pos:end="177:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="185:5" pos:end="185:25"><expr pos:start="185:5" pos:end="185:24"><name pos:start="185:5" pos:end="185:20"><name pos:start="185:5" pos:end="185:5">s</name><operator pos:start="185:6" pos:end="185:7">-&gt;</operator><name pos:start="185:8" pos:end="185:20">theora_tables</name></name> <operator pos:start="185:22" pos:end="185:22">=</operator> <literal type="number" pos:start="185:24" pos:end="185:24">1</literal></expr>;</expr_stmt>



    <return pos:start="189:5" pos:end="189:13">return <expr pos:start="189:12" pos:end="189:12"><literal type="number" pos:start="189:12" pos:end="189:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
