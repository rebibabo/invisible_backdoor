<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4489.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:29"><name pos:start="1:1" pos:end="1:10">sorecvfrom</name><argument_list pos:start="1:11" pos:end="1:29">(<argument pos:start="1:12" pos:end="1:28">struct socket *so</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="203:1">{<block_content pos:start="5:9" pos:end="201:9">

	<decl_stmt pos:start="5:9" pos:end="5:37"><decl pos:start="5:9" pos:end="5:36"><type pos:start="5:9" pos:end="5:31"><name pos:start="5:9" pos:end="5:31"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:31">sockaddr_storage</name></name></type> <name pos:start="5:33" pos:end="5:36">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:60"><decl pos:start="7:9" pos:end="7:59"><type pos:start="7:9" pos:end="7:17"><name pos:start="7:9" pos:end="7:17">socklen_t</name></type> <name pos:start="7:19" pos:end="7:25">addrlen</name> <init pos:start="7:27" pos:end="7:59">= <expr pos:start="7:29" pos:end="7:59"><sizeof pos:start="7:29" pos:end="7:59">sizeof<argument_list pos:start="7:35" pos:end="7:59">(<argument pos:start="7:36" pos:end="7:58"><expr pos:start="7:36" pos:end="7:58">struct <name pos:start="7:43" pos:end="7:58">sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="11:9" pos:end="11:33"><expr pos:start="11:9" pos:end="11:32"><call pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:18">DEBUG_CALL</name><argument_list pos:start="11:19" pos:end="11:32">(<argument pos:start="11:20" pos:end="11:31"><expr pos:start="11:20" pos:end="11:31"><literal type="string" pos:start="11:20" pos:end="11:31">"sorecvfrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="13:9" pos:end="13:33"><expr pos:start="13:9" pos:end="13:32"><call pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:17">DEBUG_ARG</name><argument_list pos:start="13:18" pos:end="13:32">(<argument pos:start="13:19" pos:end="13:27"><expr pos:start="13:19" pos:end="13:27"><literal type="string" pos:start="13:19" pos:end="13:27">"so = %p"</literal></expr></argument>, <argument pos:start="13:30" pos:end="13:31"><expr pos:start="13:30" pos:end="13:31"><name pos:start="13:30" pos:end="13:31">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="17:9" pos:end="201:9"><if pos:start="17:9" pos:end="63:9">if <condition pos:start="17:12" pos:end="17:40">(<expr pos:start="17:13" pos:end="17:39"><name pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:14">so</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:23">so_type</name></name> <operator pos:start="17:25" pos:end="17:26">==</operator> <name pos:start="17:28" pos:end="17:39">IPPROTO_ICMP</name></expr>)</condition> <block pos:start="17:42" pos:end="63:9">{<block_content pos:start="19:11" pos:end="61:25">   <comment type="block" pos:start="17:46" pos:end="17:73">/* This is a "ping" reply */</comment>

	  <decl_stmt pos:start="19:11" pos:end="19:25"><decl pos:start="19:11" pos:end="19:24"><type pos:start="19:11" pos:end="19:14"><name pos:start="19:11" pos:end="19:14">char</name></type> <name pos:start="19:16" pos:end="19:24"><name pos:start="19:16" pos:end="19:19">buff</name><index pos:start="19:20" pos:end="19:24">[<expr pos:start="19:21" pos:end="19:23"><literal type="number" pos:start="19:21" pos:end="19:23">256</literal></expr>]</index></name></decl>;</decl_stmt>

	  <decl_stmt pos:start="21:11" pos:end="21:18"><decl pos:start="21:11" pos:end="21:17"><type pos:start="21:11" pos:end="21:13"><name pos:start="21:11" pos:end="21:13">int</name></type> <name pos:start="21:15" pos:end="21:17">len</name></decl>;</decl_stmt>



	  <expr_stmt pos:start="25:11" pos:end="27:61"><expr pos:start="25:11" pos:end="27:60"><name pos:start="25:11" pos:end="25:13">len</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="27:60"><name pos:start="25:17" pos:end="25:24">recvfrom</name><argument_list pos:start="25:25" pos:end="27:60">(<argument pos:start="25:26" pos:end="25:30"><expr pos:start="25:26" pos:end="25:30"><name pos:start="25:26" pos:end="25:30"><name pos:start="25:26" pos:end="25:27">so</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:30">s</name></name></expr></argument>, <argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">buff</name></expr></argument>, <argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><literal type="number" pos:start="25:39" pos:end="25:41">256</literal></expr></argument>, <argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><literal type="number" pos:start="25:44" pos:end="25:44">0</literal></expr></argument>,

			 <argument pos:start="27:26" pos:end="27:49"><expr pos:start="27:26" pos:end="27:49"><operator pos:start="27:26" pos:end="27:26">(</operator>struct <name pos:start="27:34" pos:end="27:41">sockaddr</name> <operator pos:start="27:43" pos:end="27:43">*</operator><operator pos:start="27:44" pos:end="27:44">)</operator><operator pos:start="27:45" pos:end="27:45">&amp;</operator><name pos:start="27:46" pos:end="27:49">addr</name></expr></argument>, <argument pos:start="27:52" pos:end="27:59"><expr pos:start="27:52" pos:end="27:59"><operator pos:start="27:52" pos:end="27:52">&amp;</operator><name pos:start="27:53" pos:end="27:59">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block" pos:start="29:11" pos:end="29:48">/* XXX Check if reply is "correct"? */</comment>



	  <if_stmt pos:start="33:11" pos:end="57:11"><if pos:start="33:11" pos:end="51:11">if<condition pos:start="33:13" pos:end="33:35">(<expr pos:start="33:14" pos:end="33:34"><name pos:start="33:14" pos:end="33:16">len</name> <operator pos:start="33:18" pos:end="33:19">==</operator> <operator pos:start="33:21" pos:end="33:21">-</operator><literal type="number" pos:start="33:22" pos:end="33:22">1</literal> <operator pos:start="33:24" pos:end="33:25">||</operator> <name pos:start="33:27" pos:end="33:29">len</name> <operator pos:start="33:31" pos:end="33:32">==</operator> <literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr>)</condition> <block pos:start="33:37" pos:end="51:11">{<block_content pos:start="35:13" pos:end="49:71">

	    <decl_stmt pos:start="35:13" pos:end="35:42"><decl pos:start="35:13" pos:end="35:41"><type pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:18">u_char</name></type> <name pos:start="35:20" pos:end="35:23">code</name><init pos:start="35:24" pos:end="35:41">=<expr pos:start="35:25" pos:end="35:41"><name pos:start="35:25" pos:end="35:41">ICMP_UNREACH_PORT</name></expr></init></decl>;</decl_stmt>



	    <if_stmt pos:start="39:13" pos:end="41:64"><if pos:start="39:13" pos:end="39:61">if<condition pos:start="39:15" pos:end="39:37">(<expr pos:start="39:16" pos:end="39:36"><name pos:start="39:16" pos:end="39:20">errno</name> <operator pos:start="39:22" pos:end="39:23">==</operator> <name pos:start="39:25" pos:end="39:36">EHOSTUNREACH</name></expr>)</condition><block type="pseudo" pos:start="39:39" pos:end="39:61"><block_content pos:start="39:39" pos:end="39:61"> <expr_stmt pos:start="39:39" pos:end="39:61"><expr pos:start="39:39" pos:end="39:60"><name pos:start="39:39" pos:end="39:42">code</name><operator pos:start="39:43" pos:end="39:43">=</operator><name pos:start="39:44" pos:end="39:60">ICMP_UNREACH_HOST</name></expr>;</expr_stmt></block_content></block></if>

	    <if type="elseif" pos:start="41:13" pos:end="41:64">else if<condition pos:start="41:20" pos:end="41:41">(<expr pos:start="41:21" pos:end="41:40"><name pos:start="41:21" pos:end="41:25">errno</name> <operator pos:start="41:27" pos:end="41:28">==</operator> <name pos:start="41:30" pos:end="41:40">ENETUNREACH</name></expr>)</condition><block type="pseudo" pos:start="41:43" pos:end="41:64"><block_content pos:start="41:43" pos:end="41:64"> <expr_stmt pos:start="41:43" pos:end="41:64"><expr pos:start="41:43" pos:end="41:63"><name pos:start="41:43" pos:end="41:46">code</name><operator pos:start="41:47" pos:end="41:47">=</operator><name pos:start="41:48" pos:end="41:63">ICMP_UNREACH_NET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="45:13" pos:end="47:48"><expr pos:start="45:13" pos:end="47:47"><call pos:start="45:13" pos:end="47:47"><name pos:start="45:13" pos:end="45:22">DEBUG_MISC</name><argument_list pos:start="45:23" pos:end="47:47">(<argument pos:start="45:24" pos:end="47:46"><expr pos:start="45:24" pos:end="47:46"><operator pos:start="45:24" pos:end="45:24">(</operator><name pos:start="45:25" pos:end="45:27">dfd</name><operator pos:start="45:28" pos:end="45:28">,</operator><literal type="string" pos:start="45:29" pos:end="45:58">" udp icmp rx errno = %d-%s\n"</literal><operator pos:start="45:59" pos:end="45:59">,</operator>

			<name pos:start="47:25" pos:end="47:29">errno</name><operator pos:start="47:30" pos:end="47:30">,</operator><call pos:start="47:31" pos:end="47:45"><name pos:start="47:31" pos:end="47:38">strerror</name><argument_list pos:start="47:39" pos:end="47:45">(<argument pos:start="47:40" pos:end="47:44"><expr pos:start="47:40" pos:end="47:44"><name pos:start="47:40" pos:end="47:44">errno</name></expr></argument>)</argument_list></call><operator pos:start="47:46" pos:end="47:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="49:13" pos:end="49:71"><expr pos:start="49:13" pos:end="49:70"><call pos:start="49:13" pos:end="49:70"><name pos:start="49:13" pos:end="49:22">icmp_error</name><argument_list pos:start="49:23" pos:end="49:70">(<argument pos:start="49:24" pos:end="49:31"><expr pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:25">so</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:31">so_m</name></name></expr></argument>, <argument pos:start="49:34" pos:end="49:45"><expr pos:start="49:34" pos:end="49:45"><name pos:start="49:34" pos:end="49:45">ICMP_UNREACH</name></expr></argument>,<argument pos:start="49:47" pos:end="49:50"><expr pos:start="49:47" pos:end="49:50"><name pos:start="49:47" pos:end="49:50">code</name></expr></argument>, <argument pos:start="49:53" pos:end="49:53"><expr pos:start="49:53" pos:end="49:53"><literal type="number" pos:start="49:53" pos:end="49:53">0</literal></expr></argument>,<argument pos:start="49:55" pos:end="49:69"><expr pos:start="49:55" pos:end="49:69"><call pos:start="49:55" pos:end="49:69"><name pos:start="49:55" pos:end="49:62">strerror</name><argument_list pos:start="49:63" pos:end="49:69">(<argument pos:start="49:64" pos:end="49:68"><expr pos:start="49:64" pos:end="49:68"><name pos:start="49:64" pos:end="49:68">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if> <else pos:start="51:13" pos:end="57:11">else <block pos:start="51:18" pos:end="57:11">{<block_content pos:start="53:13" pos:end="55:28">

	    <expr_stmt pos:start="53:13" pos:end="53:35"><expr pos:start="53:13" pos:end="53:34"><call pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:24">icmp_reflect</name><argument_list pos:start="53:25" pos:end="53:34">(<argument pos:start="53:26" pos:end="53:33"><expr pos:start="53:26" pos:end="53:33"><name pos:start="53:26" pos:end="53:33"><name pos:start="53:26" pos:end="53:27">so</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:33">so_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:28"><expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:14">so</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:20">so_m</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:27">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="55:30" pos:end="55:59">/* Don't m_free() it again! */</comment>

	  </block_content>}</block></else></if_stmt>

	  <comment type="block" pos:start="59:11" pos:end="59:62">/* No need for this socket anymore, udp_detach it */</comment>

	  <expr_stmt pos:start="61:11" pos:end="61:25"><expr pos:start="61:11" pos:end="61:24"><call pos:start="61:11" pos:end="61:24"><name pos:start="61:11" pos:end="61:20">udp_detach</name><argument_list pos:start="61:21" pos:end="61:24">(<argument pos:start="61:22" pos:end="61:23"><expr pos:start="61:22" pos:end="61:23"><name pos:start="61:22" pos:end="61:23">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="63:11" pos:end="201:9">else <block pos:start="63:16" pos:end="201:9">{<block_content pos:start="65:11" pos:end="199:11">                            	<comment type="block" pos:start="63:49" pos:end="63:75">/* A "normal" UDP packet */</comment>

	  <decl_stmt pos:start="65:11" pos:end="65:25"><decl pos:start="65:11" pos:end="65:24"><type pos:start="65:11" pos:end="65:23"><name pos:start="65:11" pos:end="65:21"><name pos:start="65:11" pos:end="65:16">struct</name> <name pos:start="65:18" pos:end="65:21">mbuf</name></name> <modifier pos:start="65:23" pos:end="65:23">*</modifier></type><name pos:start="65:24" pos:end="65:24">m</name></decl>;</decl_stmt>

          <decl_stmt pos:start="67:11" pos:end="70:0"><decl pos:start="67:11" pos:end="67:17"><type pos:start="67:11" pos:end="67:13"><name pos:start="67:11" pos:end="67:13">int</name></type> <name pos:start="67:15" pos:end="67:17">len</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="69:1" pos:end="69:13">#<cpp:directive pos:start="69:2" pos:end="69:6">ifdef</cpp:directive> <name pos:start="69:8" pos:end="69:13">_WIN32</name></cpp:ifdef>

          <decl_stmt pos:start="71:11" pos:end="74:0"><decl pos:start="71:11" pos:end="71:25"><type pos:start="71:11" pos:end="71:23"><name pos:start="71:11" pos:end="71:18">unsigned</name> <name pos:start="71:20" pos:end="71:23">long</name></type> <name pos:start="71:25" pos:end="71:25">n</name></decl>;</decl_stmt>

<cpp:else pos:start="73:1" pos:end="73:5">#<cpp:directive pos:start="73:2" pos:end="73:5">else</cpp:directive></cpp:else>

          <decl_stmt pos:start="75:11" pos:end="78:0"><decl pos:start="75:11" pos:end="75:15"><type pos:start="75:11" pos:end="75:13"><name pos:start="75:11" pos:end="75:13">int</name></type> <name pos:start="75:15" pos:end="75:15">n</name></decl>;</decl_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>



	  <expr_stmt pos:start="81:11" pos:end="81:31"><expr pos:start="81:11" pos:end="81:30"><name pos:start="81:11" pos:end="81:11">m</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:30"><name pos:start="81:15" pos:end="81:19">m_get</name><argument_list pos:start="81:20" pos:end="81:30">(<argument pos:start="81:21" pos:end="81:29"><expr pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:22">so</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:29">slirp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="83:11" pos:end="87:11"><if pos:start="83:11" pos:end="87:11">if <condition pos:start="83:14" pos:end="83:17">(<expr pos:start="83:15" pos:end="83:16"><operator pos:start="83:15" pos:end="83:15">!</operator><name pos:start="83:16" pos:end="83:16">m</name></expr>)</condition> <block pos:start="83:19" pos:end="87:11">{<block_content pos:start="85:15" pos:end="85:21">

	      <return pos:start="85:15" pos:end="85:21">return;</return>

	  </block_content>}</block></if></if_stmt>

	  <expr_stmt pos:start="89:11" pos:end="89:37"><expr pos:start="89:11" pos:end="89:36"><name pos:start="89:11" pos:end="89:19"><name pos:start="89:11" pos:end="89:11">m</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:19">m_data</name></name> <operator pos:start="89:21" pos:end="89:22">+=</operator> <name pos:start="89:24" pos:end="89:36">IF_MAXLINKHDR</name></expr>;</expr_stmt>



	  <comment type="block" pos:start="93:11" pos:end="99:13">/*

	   * XXX Shouldn't FIONREAD packets destined for port 53,

	   * but I don't know the max packet size for DNS lookups

	   */</comment>

	  <expr_stmt pos:start="101:11" pos:end="101:30"><expr pos:start="101:11" pos:end="101:29"><name pos:start="101:11" pos:end="101:13">len</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="101:29"><name pos:start="101:17" pos:end="101:26">M_FREEROOM</name><argument_list pos:start="101:27" pos:end="101:29">(<argument pos:start="101:28" pos:end="101:28"><expr pos:start="101:28" pos:end="101:28"><name pos:start="101:28" pos:end="101:28">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block" pos:start="103:11" pos:end="103:48">/* if (so-&gt;so_fport != htons(53)) { */</comment>

	  <expr_stmt pos:start="105:11" pos:end="105:43"><expr pos:start="105:11" pos:end="105:42"><call pos:start="105:11" pos:end="105:42"><name pos:start="105:11" pos:end="105:21">ioctlsocket</name><argument_list pos:start="105:22" pos:end="105:42">(<argument pos:start="105:23" pos:end="105:27"><expr pos:start="105:23" pos:end="105:27"><name pos:start="105:23" pos:end="105:27"><name pos:start="105:23" pos:end="105:24">so</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:27">s</name></name></expr></argument>, <argument pos:start="105:30" pos:end="105:37"><expr pos:start="105:30" pos:end="105:37"><name pos:start="105:30" pos:end="105:37">FIONREAD</name></expr></argument>, <argument pos:start="105:40" pos:end="105:41"><expr pos:start="105:40" pos:end="105:41"><operator pos:start="105:40" pos:end="105:40">&amp;</operator><name pos:start="105:41" pos:end="105:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	  <if_stmt pos:start="109:11" pos:end="117:11"><if pos:start="109:11" pos:end="117:11">if <condition pos:start="109:14" pos:end="109:22">(<expr pos:start="109:15" pos:end="109:21"><name pos:start="109:15" pos:end="109:15">n</name> <operator pos:start="109:17" pos:end="109:17">&gt;</operator> <name pos:start="109:19" pos:end="109:21">len</name></expr>)</condition> <block pos:start="109:24" pos:end="117:11">{<block_content pos:start="111:13" pos:end="115:32">

	    <expr_stmt pos:start="111:13" pos:end="111:58"><expr pos:start="111:13" pos:end="111:57"><name pos:start="111:13" pos:end="111:13">n</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <operator pos:start="111:17" pos:end="111:17">(</operator><name pos:start="111:18" pos:end="111:26"><name pos:start="111:18" pos:end="111:18">m</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:26">m_data</name></name> <operator pos:start="111:28" pos:end="111:28">-</operator> <name pos:start="111:30" pos:end="111:37"><name pos:start="111:30" pos:end="111:30">m</name><operator pos:start="111:31" pos:end="111:32">-&gt;</operator><name pos:start="111:33" pos:end="111:37">m_dat</name></name><operator pos:start="111:38" pos:end="111:38">)</operator> <operator pos:start="111:40" pos:end="111:40">+</operator> <name pos:start="111:42" pos:end="111:49"><name pos:start="111:42" pos:end="111:42">m</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:49">m_len</name></name> <operator pos:start="111:51" pos:end="111:51">+</operator> <name pos:start="111:53" pos:end="111:53">n</name> <operator pos:start="111:55" pos:end="111:55">+</operator> <literal type="number" pos:start="111:57" pos:end="111:57">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="113:13" pos:end="113:24"><expr pos:start="113:13" pos:end="113:23"><call pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:17">m_inc</name><argument_list pos:start="113:18" pos:end="113:23">(<argument pos:start="113:19" pos:end="113:19"><expr pos:start="113:19" pos:end="113:19"><name pos:start="113:19" pos:end="113:19">m</name></expr></argument>, <argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><name pos:start="113:22" pos:end="113:22">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="115:13" pos:end="115:32"><expr pos:start="115:13" pos:end="115:31"><name pos:start="115:13" pos:end="115:15">len</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:31"><name pos:start="115:19" pos:end="115:28">M_FREEROOM</name><argument_list pos:start="115:29" pos:end="115:31">(<argument pos:start="115:30" pos:end="115:30"><expr pos:start="115:30" pos:end="115:30"><name pos:start="115:30" pos:end="115:30">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if></if_stmt>

	  <comment type="block" pos:start="119:11" pos:end="119:17">/* } */</comment>



	  <expr_stmt pos:start="123:11" pos:end="125:66"><expr pos:start="123:11" pos:end="125:65"><name pos:start="123:11" pos:end="123:18"><name pos:start="123:11" pos:end="123:11">m</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:18">m_len</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="125:65"><name pos:start="123:22" pos:end="123:29">recvfrom</name><argument_list pos:start="123:30" pos:end="125:65">(<argument pos:start="123:31" pos:end="123:35"><expr pos:start="123:31" pos:end="123:35"><name pos:start="123:31" pos:end="123:35"><name pos:start="123:31" pos:end="123:32">so</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:35">s</name></name></expr></argument>, <argument pos:start="123:38" pos:end="123:46"><expr pos:start="123:38" pos:end="123:46"><name pos:start="123:38" pos:end="123:46"><name pos:start="123:38" pos:end="123:38">m</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:46">m_data</name></name></expr></argument>, <argument pos:start="123:49" pos:end="123:51"><expr pos:start="123:49" pos:end="123:51"><name pos:start="123:49" pos:end="123:51">len</name></expr></argument>, <argument pos:start="123:54" pos:end="123:54"><expr pos:start="123:54" pos:end="123:54"><literal type="number" pos:start="123:54" pos:end="123:54">0</literal></expr></argument>,

			      <argument pos:start="125:31" pos:end="125:54"><expr pos:start="125:31" pos:end="125:54"><operator pos:start="125:31" pos:end="125:31">(</operator>struct <name pos:start="125:39" pos:end="125:46">sockaddr</name> <operator pos:start="125:48" pos:end="125:48">*</operator><operator pos:start="125:49" pos:end="125:49">)</operator><operator pos:start="125:50" pos:end="125:50">&amp;</operator><name pos:start="125:51" pos:end="125:54">addr</name></expr></argument>, <argument pos:start="125:57" pos:end="125:64"><expr pos:start="125:57" pos:end="125:64"><operator pos:start="125:57" pos:end="125:57">&amp;</operator><name pos:start="125:58" pos:end="125:64">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="127:11" pos:end="129:56"><expr pos:start="127:11" pos:end="129:55"><call pos:start="127:11" pos:end="129:55"><name pos:start="127:11" pos:end="127:20">DEBUG_MISC</name><argument_list pos:start="127:21" pos:end="129:55">(<argument pos:start="127:22" pos:end="129:54"><expr pos:start="127:22" pos:end="129:54"><operator pos:start="127:22" pos:end="127:22">(</operator><name pos:start="127:23" pos:end="127:25">dfd</name><operator pos:start="127:26" pos:end="127:26">,</operator> <literal type="string" pos:start="127:28" pos:end="127:62">" did recvfrom %d, errno = %d-%s\n"</literal><operator pos:start="127:63" pos:end="127:63">,</operator>

		      <name pos:start="129:23" pos:end="129:30"><name pos:start="129:23" pos:end="129:23">m</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:30">m_len</name></name><operator pos:start="129:31" pos:end="129:31">,</operator> <name pos:start="129:33" pos:end="129:37">errno</name><operator pos:start="129:38" pos:end="129:38">,</operator><call pos:start="129:39" pos:end="129:53"><name pos:start="129:39" pos:end="129:46">strerror</name><argument_list pos:start="129:47" pos:end="129:53">(<argument pos:start="129:48" pos:end="129:52"><expr pos:start="129:48" pos:end="129:52"><name pos:start="129:48" pos:end="129:52">errno</name></expr></argument>)</argument_list></call><operator pos:start="129:54" pos:end="129:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="131:11" pos:end="199:11"><if pos:start="131:11" pos:end="149:11">if<condition pos:start="131:13" pos:end="131:24">(<expr pos:start="131:14" pos:end="131:23"><name pos:start="131:14" pos:end="131:21"><name pos:start="131:14" pos:end="131:14">m</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:21">m_len</name></name><operator pos:start="131:22" pos:end="131:22">&lt;</operator><literal type="number" pos:start="131:23" pos:end="131:23">0</literal></expr>)</condition> <block pos:start="131:26" pos:end="149:11">{<block_content pos:start="133:13" pos:end="147:22">

	    <decl_stmt pos:start="133:13" pos:end="133:42"><decl pos:start="133:13" pos:end="133:41"><type pos:start="133:13" pos:end="133:18"><name pos:start="133:13" pos:end="133:18">u_char</name></type> <name pos:start="133:20" pos:end="133:23">code</name><init pos:start="133:24" pos:end="133:41">=<expr pos:start="133:25" pos:end="133:41"><name pos:start="133:25" pos:end="133:41">ICMP_UNREACH_PORT</name></expr></init></decl>;</decl_stmt>



	    <if_stmt pos:start="137:13" pos:end="139:64"><if pos:start="137:13" pos:end="137:61">if<condition pos:start="137:15" pos:end="137:37">(<expr pos:start="137:16" pos:end="137:36"><name pos:start="137:16" pos:end="137:20">errno</name> <operator pos:start="137:22" pos:end="137:23">==</operator> <name pos:start="137:25" pos:end="137:36">EHOSTUNREACH</name></expr>)</condition><block type="pseudo" pos:start="137:39" pos:end="137:61"><block_content pos:start="137:39" pos:end="137:61"> <expr_stmt pos:start="137:39" pos:end="137:61"><expr pos:start="137:39" pos:end="137:60"><name pos:start="137:39" pos:end="137:42">code</name><operator pos:start="137:43" pos:end="137:43">=</operator><name pos:start="137:44" pos:end="137:60">ICMP_UNREACH_HOST</name></expr>;</expr_stmt></block_content></block></if>

	    <if type="elseif" pos:start="139:13" pos:end="139:64">else if<condition pos:start="139:20" pos:end="139:41">(<expr pos:start="139:21" pos:end="139:40"><name pos:start="139:21" pos:end="139:25">errno</name> <operator pos:start="139:27" pos:end="139:28">==</operator> <name pos:start="139:30" pos:end="139:40">ENETUNREACH</name></expr>)</condition><block type="pseudo" pos:start="139:43" pos:end="139:64"><block_content pos:start="139:43" pos:end="139:64"> <expr_stmt pos:start="139:43" pos:end="139:64"><expr pos:start="139:43" pos:end="139:63"><name pos:start="139:43" pos:end="139:46">code</name><operator pos:start="139:47" pos:end="139:47">=</operator><name pos:start="139:48" pos:end="139:63">ICMP_UNREACH_NET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="143:13" pos:end="143:75"><expr pos:start="143:13" pos:end="143:74"><call pos:start="143:13" pos:end="143:74"><name pos:start="143:13" pos:end="143:22">DEBUG_MISC</name><argument_list pos:start="143:23" pos:end="143:74">(<argument pos:start="143:24" pos:end="143:73"><expr pos:start="143:24" pos:end="143:73"><operator pos:start="143:24" pos:end="143:24">(</operator><name pos:start="143:25" pos:end="143:27">dfd</name><operator pos:start="143:28" pos:end="143:28">,</operator><literal type="string" pos:start="143:29" pos:end="143:66">" rx error, tx icmp ICMP_UNREACH:%i\n"</literal><operator pos:start="143:67" pos:end="143:67">,</operator> <name pos:start="143:69" pos:end="143:72">code</name><operator pos:start="143:73" pos:end="143:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="145:13" pos:end="145:71"><expr pos:start="145:13" pos:end="145:70"><call pos:start="145:13" pos:end="145:70"><name pos:start="145:13" pos:end="145:22">icmp_error</name><argument_list pos:start="145:23" pos:end="145:70">(<argument pos:start="145:24" pos:end="145:31"><expr pos:start="145:24" pos:end="145:31"><name pos:start="145:24" pos:end="145:31"><name pos:start="145:24" pos:end="145:25">so</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:31">so_m</name></name></expr></argument>, <argument pos:start="145:34" pos:end="145:45"><expr pos:start="145:34" pos:end="145:45"><name pos:start="145:34" pos:end="145:45">ICMP_UNREACH</name></expr></argument>,<argument pos:start="145:47" pos:end="145:50"><expr pos:start="145:47" pos:end="145:50"><name pos:start="145:47" pos:end="145:50">code</name></expr></argument>, <argument pos:start="145:53" pos:end="145:53"><expr pos:start="145:53" pos:end="145:53"><literal type="number" pos:start="145:53" pos:end="145:53">0</literal></expr></argument>,<argument pos:start="145:55" pos:end="145:69"><expr pos:start="145:55" pos:end="145:69"><call pos:start="145:55" pos:end="145:69"><name pos:start="145:55" pos:end="145:62">strerror</name><argument_list pos:start="145:63" pos:end="145:69">(<argument pos:start="145:64" pos:end="145:68"><expr pos:start="145:64" pos:end="145:68"><name pos:start="145:64" pos:end="145:68">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="147:13" pos:end="147:22"><expr pos:start="147:13" pos:end="147:21"><call pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:18">m_free</name><argument_list pos:start="147:19" pos:end="147:21">(<argument pos:start="147:20" pos:end="147:20"><expr pos:start="147:20" pos:end="147:20"><name pos:start="147:20" pos:end="147:20">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if> <else pos:start="149:13" pos:end="199:11">else <block pos:start="149:18" pos:end="199:11">{<block_content pos:start="163:13" pos:end="197:13">

	  <comment type="block" pos:start="151:11" pos:end="161:13">/*

	   * Hack: domain name lookup will be used the most for UDP,

	   * and since they'll only be used once there's no need

	   * for the 4 minute (or whatever) timeout... So we time them

	   * out much quicker (10 seconds  for now...)

	   */</comment>

	    <if_stmt pos:start="163:13" pos:end="173:13"><if pos:start="163:13" pos:end="173:13">if <condition pos:start="163:16" pos:end="163:30">(<expr pos:start="163:17" pos:end="163:29"><name pos:start="163:17" pos:end="163:29"><name pos:start="163:17" pos:end="163:18">so</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:29">so_expire</name></name></expr>)</condition> <block pos:start="163:32" pos:end="173:13">{<block_content pos:start="165:15" pos:end="171:52">

	      <if_stmt pos:start="165:15" pos:end="171:52"><if pos:start="165:15" pos:end="167:56">if <condition pos:start="165:18" pos:end="165:44">(<expr pos:start="165:19" pos:end="165:43"><name pos:start="165:19" pos:end="165:30"><name pos:start="165:19" pos:end="165:20">so</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:30">so_fport</name></name> <operator pos:start="165:32" pos:end="165:33">==</operator> <call pos:start="165:35" pos:end="165:43"><name pos:start="165:35" pos:end="165:39">htons</name><argument_list pos:start="165:40" pos:end="165:43">(<argument pos:start="165:41" pos:end="165:42"><expr pos:start="165:41" pos:end="165:42"><literal type="number" pos:start="165:41" pos:end="165:42">53</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:56"><block_content pos:start="167:17" pos:end="167:56">

		<expr_stmt pos:start="167:17" pos:end="167:56"><expr pos:start="167:17" pos:end="167:55"><name pos:start="167:17" pos:end="167:29"><name pos:start="167:17" pos:end="167:18">so</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:29">so_expire</name></name> <operator pos:start="167:31" pos:end="167:31">=</operator> <name pos:start="167:33" pos:end="167:39">curtime</name> <operator pos:start="167:41" pos:end="167:41">+</operator> <name pos:start="167:43" pos:end="167:55">SO_EXPIREFAST</name></expr>;</expr_stmt></block_content></block></if>

	      <else pos:start="169:15" pos:end="171:52">else<block type="pseudo" pos:start="171:17" pos:end="171:52"><block_content pos:start="171:17" pos:end="171:52">

		<expr_stmt pos:start="171:17" pos:end="171:52"><expr pos:start="171:17" pos:end="171:51"><name pos:start="171:17" pos:end="171:29"><name pos:start="171:17" pos:end="171:18">so</name><operator pos:start="171:19" pos:end="171:20">-&gt;</operator><name pos:start="171:21" pos:end="171:29">so_expire</name></name> <operator pos:start="171:31" pos:end="171:31">=</operator> <name pos:start="171:33" pos:end="171:39">curtime</name> <operator pos:start="171:41" pos:end="171:41">+</operator> <name pos:start="171:43" pos:end="171:51">SO_EXPIRE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	    </block_content>}</block></if></if_stmt>



	    <comment type="block" pos:start="177:13" pos:end="183:15">/*

	     * If this packet was destined for CTL_ADDR,

	     * make it look like that's where it came from, done by udp_output

	     */</comment>

	    <switch pos:start="185:13" pos:end="197:13">switch <condition pos:start="185:20" pos:end="185:35">(<expr pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:22">so</name><operator pos:start="185:23" pos:end="185:24">-&gt;</operator><name pos:start="185:25" pos:end="185:34">so_ffamily</name></name></expr>)</condition> <block pos:start="185:37" pos:end="197:13">{<block_content pos:start="187:13" pos:end="195:22">

	    <case pos:start="187:13" pos:end="187:25">case <expr pos:start="187:18" pos:end="187:24"><name pos:start="187:18" pos:end="187:24">AF_INET</name></expr>:</case>

	        <expr_stmt pos:start="189:17" pos:end="189:64"><expr pos:start="189:17" pos:end="189:63"><call pos:start="189:17" pos:end="189:63"><name pos:start="189:17" pos:end="189:26">udp_output</name><argument_list pos:start="189:27" pos:end="189:63">(<argument pos:start="189:28" pos:end="189:29"><expr pos:start="189:28" pos:end="189:29"><name pos:start="189:28" pos:end="189:29">so</name></expr></argument>, <argument pos:start="189:32" pos:end="189:32"><expr pos:start="189:32" pos:end="189:32"><name pos:start="189:32" pos:end="189:32">m</name></expr></argument>, <argument pos:start="189:35" pos:end="189:62"><expr pos:start="189:35" pos:end="189:62"><operator pos:start="189:35" pos:end="189:35">(</operator>struct <name pos:start="189:43" pos:end="189:53">sockaddr_in</name> <operator pos:start="189:55" pos:end="189:55">*</operator><operator pos:start="189:56" pos:end="189:56">)</operator> <operator pos:start="189:58" pos:end="189:58">&amp;</operator><name pos:start="189:59" pos:end="189:62">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <break pos:start="191:17" pos:end="191:22">break;</break>

	    <default pos:start="193:13" pos:end="193:20">default:</default>

	        <break pos:start="195:17" pos:end="195:22">break;</break>

	    </block_content>}</block></switch>

	  </block_content>}</block></else></if_stmt> <comment type="block" pos:start="199:13" pos:end="199:26">/* rx error */</comment>

	</block_content>}</block></else></if_stmt> <comment type="block" pos:start="201:11" pos:end="201:30">/* if ping packet */</comment>

</block_content>}</block>
</unit>
