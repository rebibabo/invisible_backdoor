<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13926.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:49"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb32to16</name>)<parameter_list pos:start="1:37" pos:end="1:89">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:88"><decl pos:start="1:72" pos:end="1:88"><type pos:start="1:72" pos:end="1:88"><name pos:start="1:72" pos:end="1:79">unsigned</name></type> <name pos:start="1:81" pos:end="1:88">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:48">{<block_content pos:start="5:9" pos:end="99:48">

	<decl_stmt pos:start="5:9" pos:end="5:31"><decl pos:start="5:9" pos:end="5:30"><type pos:start="5:9" pos:end="5:23"><specifier pos:start="5:9" pos:end="5:13">const</specifier> <name pos:start="5:15" pos:end="5:21">uint8_t</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:30">= <expr pos:start="5:28" pos:end="5:30"><name pos:start="5:28" pos:end="5:30">src</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="10:0"><decl pos:start="7:9" pos:end="7:26"><type pos:start="7:9" pos:end="7:23"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:21">uint8_t</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">end</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="9:1" pos:end="9:15">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:15">HAVE_MMX</name></cpp:ifdef>

	<decl_stmt pos:start="11:9" pos:end="14:0"><decl pos:start="11:9" pos:end="11:29"><type pos:start="11:9" pos:end="11:23"><specifier pos:start="11:9" pos:end="11:13">const</specifier> <name pos:start="11:15" pos:end="11:21">uint8_t</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:29">mm_end</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

	<decl_stmt pos:start="15:9" pos:end="15:38"><decl pos:start="15:9" pos:end="15:37"><type pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:16">uint16_t</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:19">d</name> <init pos:start="15:21" pos:end="15:37">= <expr pos:start="15:23" pos:end="15:37"><operator pos:start="15:23" pos:end="15:23">(</operator><name pos:start="15:24" pos:end="15:31">uint16_t</name> <operator pos:start="15:33" pos:end="15:33">*</operator><operator pos:start="15:34" pos:end="15:34">)</operator><name pos:start="15:35" pos:end="15:37">dst</name></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:11">end</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:15">s</name> <operator pos:start="17:17" pos:end="17:17">+</operator> <name pos:start="17:19" pos:end="17:26">src_size</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="19:1" pos:end="19:15">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:15">HAVE_MMX</name></cpp:ifdef>

	<expr_stmt pos:start="21:9" pos:end="24:0"><expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:14">mm_end</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:20">end</name> <operator pos:start="21:22" pos:end="21:22">-</operator> <literal type="number" pos:start="21:24" pos:end="21:25">15</literal></expr>;</expr_stmt>

<cpp:if pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:5"><literal type="number" pos:start="23:5" pos:end="23:5">1</literal></expr></cpp:if> <comment type="line" pos:start="23:7" pos:end="23:135">//is faster only if multiplies are reasonable fast (FIXME figure out on which cpus this is faster, on Athlon its slightly faster)</comment>

	<asm pos:start="25:9" pos:end="93:25">asm <specifier pos:start="25:13" pos:end="25:20">volatile</specifier>(

		"movq %3, %%mm5			\n\t"

		"movq %4, %%mm6			\n\t"

		"movq %5, %%mm7			\n\t"

		".balign 16			\n\t"

		"1:				\n\t"

		PREFETCH" 32(%1)		\n\t"

		"movd	(%1), %%mm0		\n\t"

		"movd	4(%1), %%mm3		\n\t"

		"punpckldq 8(%1), %%mm0		\n\t"

		"punpckldq 12(%1), %%mm3	\n\t"

		"movq %%mm0, %%mm1		\n\t"

		"movq %%mm3, %%mm4		\n\t"

		"pand %%mm6, %%mm0		\n\t"

		"pand %%mm6, %%mm3		\n\t"

		"pmaddwd %%mm7, %%mm0		\n\t"

		"pmaddwd %%mm7, %%mm3		\n\t"

		"pand %%mm5, %%mm1		\n\t"

		"pand %%mm5, %%mm4		\n\t"

		"por %%mm1, %%mm0		\n\t"	

		"por %%mm4, %%mm3		\n\t"

		"psrld $5, %%mm0		\n\t"

		"pslld $11, %%mm3		\n\t"

		"por %%mm3, %%mm0		\n\t"

		MOVNTQ"	%%mm0, (%0)		\n\t"

		"addl $16, %1			\n\t"

		"addl $8, %0			\n\t"

		"cmpl %2, %1			\n\t"

		" jb 1b				\n\t"

		: "+r" (d), "+r"(s)

		: "r" (mm_end), "m" (mask3216g), "m" (mask3216br), "m" (mul3216)

	);</asm>

<cpp:else pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:5">else</cpp:directive></cpp:else>

	<asm pos:start="91:9" pos:end="91:65">__asm __volatile(PREFETCH"	%0"::"m"(*src):"memory");</asm>

	<asm pos:start="93:9" pos:end="93:25">__asm __volatile(</asm>

	    <expr_stmt pos:start="95:13" pos:end="99:47"><expr pos:start="95:13" pos:end="99:29"><literal type="string" pos:start="95:13" pos:end="95:38">"movq	%0, %%mm7\n\t"</literal>

	    <literal type="string" pos:start="97:13" pos:end="97:38">"movq	%1, %%mm6\n\t"</literal>

	    <operator pos:start="99:13" pos:end="99:14">::</operator><literal type="string" pos:start="99:15" pos:end="99:17">"m"</literal><operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:28">red_16mask</name><operator pos:start="99:29" pos:end="99:29">)</operator></expr><operator pos:start="99:30" pos:end="99:30">,</operator><expr pos:start="99:31" pos:end="99:47"><literal type="string" pos:start="99:31" pos:end="99:33">"m"</literal><operator pos:start="99:34" pos:end="99:34">(</operator><name pos:start="99:35" pos:end="99:46">green_16mask</name><operator pos:start="99:47" pos:end="99:47">)</operator></expr></expr_stmt>)</block_content></block>;</function>

	<while pos:start="101:9" pos:end="163:61">while<condition pos:start="101:14" pos:end="101:25">(<expr pos:start="101:15" pos:end="101:24"><name pos:start="101:15" pos:end="101:15">s</name> <operator pos:start="101:17" pos:end="101:17">&lt;</operator> <name pos:start="101:19" pos:end="101:24">mm_end</name></expr>)</condition>

	<block pos:start="103:9" pos:end="163:60">{<block_content pos:start="107:17" pos:end="163:60">

	    <asm pos:start="105:13" pos:end="105:29">__asm __volatile(</asm>

		<expr_stmt pos:start="107:17" pos:end="163:59"><expr pos:start="107:17" pos:end="163:33"><name pos:start="107:17" pos:end="107:24">PREFETCH</name><literal type="string" pos:start="107:25" pos:end="107:35">" 32%1\n\t"</literal>

		<literal type="string" pos:start="109:17" pos:end="109:38">"movd	%1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="111:17" pos:end="111:39">"movd	4%1, %%mm3\n\t"</literal>

		<literal type="string" pos:start="113:17" pos:end="113:42">"punpckldq 8%1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="115:17" pos:end="115:43">"punpckldq 12%1, %%mm3\n\t"</literal>

		<literal type="string" pos:start="117:17" pos:end="117:41">"movq	%%mm0, %%mm1\n\t"</literal>

		<literal type="string" pos:start="119:17" pos:end="119:41">"movq	%%mm0, %%mm2\n\t"</literal>

		<literal type="string" pos:start="121:17" pos:end="121:41">"movq	%%mm3, %%mm4\n\t"</literal>

		<literal type="string" pos:start="123:17" pos:end="123:41">"movq	%%mm3, %%mm5\n\t"</literal>

		<literal type="string" pos:start="125:17" pos:end="125:38">"psrlq	$3, %%mm0\n\t"</literal>

		<literal type="string" pos:start="127:17" pos:end="127:38">"psrlq	$3, %%mm3\n\t"</literal>

		<literal type="string" pos:start="129:17" pos:end="129:38">"pand	%2, %%mm0\n\t"</literal>

		<literal type="string" pos:start="131:17" pos:end="131:38">"pand	%2, %%mm3\n\t"</literal>

		<literal type="string" pos:start="133:17" pos:end="133:38">"psrlq	$5, %%mm1\n\t"</literal>

		<literal type="string" pos:start="135:17" pos:end="135:38">"psrlq	$5, %%mm4\n\t"</literal>

		<literal type="string" pos:start="137:17" pos:end="137:41">"pand	%%mm6, %%mm1\n\t"</literal>

		<literal type="string" pos:start="139:17" pos:end="139:41">"pand	%%mm6, %%mm4\n\t"</literal>

		<literal type="string" pos:start="141:17" pos:end="141:38">"psrlq	$8, %%mm2\n\t"</literal>

		<literal type="string" pos:start="143:17" pos:end="143:38">"psrlq	$8, %%mm5\n\t"</literal>

		<literal type="string" pos:start="145:17" pos:end="145:41">"pand	%%mm7, %%mm2\n\t"</literal>

		<literal type="string" pos:start="147:17" pos:end="147:41">"pand	%%mm7, %%mm5\n\t"</literal>

		<literal type="string" pos:start="149:17" pos:end="149:41">"por	%%mm1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="151:17" pos:end="151:41">"por	%%mm4, %%mm3\n\t"</literal>

		<literal type="string" pos:start="153:17" pos:end="153:41">"por	%%mm2, %%mm0\n\t"</literal>

		<literal type="string" pos:start="155:17" pos:end="155:41">"por	%%mm5, %%mm3\n\t"</literal>

		<literal type="string" pos:start="157:17" pos:end="157:39">"psllq	$16, %%mm3\n\t"</literal>

		<literal type="string" pos:start="159:17" pos:end="159:41">"por	%%mm3, %%mm0\n\t"</literal>

		<name pos:start="161:17" pos:end="161:22">MOVNTQ</name><literal type="string" pos:start="161:23" pos:end="161:38">"	%%mm0, %0\n\t"</literal>

		<operator pos:start="163:17" pos:end="163:17">:</operator><literal type="string" pos:start="163:18" pos:end="163:21">"=m"</literal><operator pos:start="163:22" pos:end="163:22">(</operator><operator pos:start="163:23" pos:end="163:23">*</operator><name pos:start="163:24" pos:end="163:24">d</name><operator pos:start="163:25" pos:end="163:25">)</operator><operator pos:start="163:26" pos:end="163:26">:</operator><literal type="string" pos:start="163:27" pos:end="163:29">"m"</literal><operator pos:start="163:30" pos:end="163:30">(</operator><operator pos:start="163:31" pos:end="163:31">*</operator><name pos:start="163:32" pos:end="163:32">s</name><operator pos:start="163:33" pos:end="163:33">)</operator></expr><operator pos:start="163:34" pos:end="163:34">,</operator><expr pos:start="163:35" pos:end="163:59"><literal type="string" pos:start="163:35" pos:end="163:37">"m"</literal><operator pos:start="163:38" pos:end="163:38">(</operator><name pos:start="163:39" pos:end="163:49">blue_16mask</name><operator pos:start="163:50" pos:end="163:50">)</operator><operator pos:start="163:51" pos:end="163:51">:</operator><literal type="string" pos:start="163:52" pos:end="163:59">"memory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="163:61" pos:end="163:61">;</empty_stmt></while>

		<expr_stmt pos:start="165:17" pos:end="165:23"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:17">d</name> <operator pos:start="165:19" pos:end="165:20">+=</operator> <literal type="number" pos:start="165:22" pos:end="165:22">4</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="167:17" pos:end="167:24"><expr pos:start="167:17" pos:end="167:23"><name pos:start="167:17" pos:end="167:17">s</name> <operator pos:start="167:19" pos:end="167:20">+=</operator> <literal type="number" pos:start="167:22" pos:end="167:23">16</literal></expr>;</expr_stmt>

	}

<cpp:endif pos:start="171:1" pos:end="171:6">#<cpp:directive pos:start="171:2" pos:end="171:6">endif</cpp:directive></cpp:endif>

	<asm pos:start="173:9" pos:end="173:44">__asm __volatile(SFENCE:::"memory");</asm>

	<asm pos:start="175:9" pos:end="175:42">__asm __volatile(EMMS:::"memory");</asm>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

	while<expr_stmt pos:start="179:14" pos:end="189:9"><expr pos:start="179:14" pos:end="189:9"><operator pos:start="179:14" pos:end="179:14">(</operator><name pos:start="179:15" pos:end="179:15">s</name> <operator pos:start="179:17" pos:end="179:17">&lt;</operator> <name pos:start="179:19" pos:end="179:21">end</name><operator pos:start="179:22" pos:end="179:22">)</operator>

	<block pos:start="181:9" pos:end="189:9">{

		<expr pos:start="183:17" pos:end="183:48"><specifier pos:start="183:17" pos:end="183:21">const</specifier> <name pos:start="183:23" pos:end="183:25">int</name> <name pos:start="183:27" pos:end="183:29">src</name><operator pos:start="183:30" pos:end="183:30">=</operator> <operator pos:start="183:32" pos:end="183:32">*</operator><operator pos:start="183:33" pos:end="183:33">(</operator><operator pos:start="183:34" pos:end="183:34">(</operator><name pos:start="183:35" pos:end="183:42">uint32_t</name><operator pos:start="183:43" pos:end="183:43">*</operator><operator pos:start="183:44" pos:end="183:44">)</operator><name pos:start="183:45" pos:end="183:45">s</name><operator pos:start="183:46" pos:end="183:46">)</operator><operator pos:start="183:47" pos:end="183:48">++</operator></expr>;

		<expr pos:start="185:17" pos:end="185:80"><operator pos:start="185:17" pos:end="185:17">*</operator><name pos:start="185:18" pos:end="185:18">d</name><operator pos:start="185:19" pos:end="185:20">++</operator> <operator pos:start="185:22" pos:end="185:22">=</operator> <operator pos:start="185:24" pos:end="185:24">(</operator><operator pos:start="185:25" pos:end="185:25">(</operator><name pos:start="185:26" pos:end="185:28">src</name><operator pos:start="185:29" pos:end="185:29">&amp;</operator><literal type="number" pos:start="185:30" pos:end="185:33">0xFF</literal><operator pos:start="185:34" pos:end="185:34">)</operator><operator pos:start="185:35" pos:end="185:36">&gt;&gt;</operator><literal type="number" pos:start="185:37" pos:end="185:37">3</literal><operator pos:start="185:38" pos:end="185:38">)</operator> <operator pos:start="185:40" pos:end="185:40">+</operator> <operator pos:start="185:42" pos:end="185:42">(</operator><operator pos:start="185:43" pos:end="185:43">(</operator><name pos:start="185:44" pos:end="185:46">src</name><operator pos:start="185:47" pos:end="185:47">&amp;</operator><literal type="number" pos:start="185:48" pos:end="185:53">0xFC00</literal><operator pos:start="185:54" pos:end="185:54">)</operator><operator pos:start="185:55" pos:end="185:56">&gt;&gt;</operator><literal type="number" pos:start="185:57" pos:end="185:57">5</literal><operator pos:start="185:58" pos:end="185:58">)</operator> <operator pos:start="185:60" pos:end="185:60">+</operator> <operator pos:start="185:62" pos:end="185:62">(</operator><operator pos:start="185:63" pos:end="185:63">(</operator><name pos:start="185:64" pos:end="185:66">src</name><operator pos:start="185:67" pos:end="185:67">&amp;</operator><literal type="number" pos:start="185:68" pos:end="185:75">0xF80000</literal><operator pos:start="185:76" pos:end="185:76">)</operator><operator pos:start="185:77" pos:end="185:78">&gt;&gt;</operator><literal type="number" pos:start="185:79" pos:end="185:79">8</literal><operator pos:start="185:80" pos:end="185:80">)</operator></expr>;

<comment type="line" pos:start="187:1" pos:end="187:78">//		*d++ = ((src&gt;&gt;3)&amp;0x1F) + ((src&gt;&gt;5)&amp;0x7E0) + ((src&gt;&gt;8)&amp;0xF800);</comment>

	}</block></expr></expr_stmt>

}
</unit>
