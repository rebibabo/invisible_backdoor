<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20411.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">load_dtb</name><parameter_list pos:start="1:20" pos:end="1:79">(<parameter pos:start="1:21" pos:end="1:43"><decl pos:start="1:21" pos:end="1:43"><type pos:start="1:21" pos:end="1:43"><name pos:start="1:21" pos:end="1:38">target_phys_addr_t</name></type> <name pos:start="1:40" pos:end="1:43">addr</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:78"><decl pos:start="1:46" pos:end="1:78"><type pos:start="1:46" pos:end="1:78"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:57">struct</name> <name pos:start="1:59" pos:end="1:71">arm_boot_info</name></name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">binfo</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="7:5" pos:end="180:0">

<cpp:ifdef pos:start="5:1" pos:end="5:17">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:17">CONFIG_FDT</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint32_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:30">mem_reg_property</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:29">mem_reg_propsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">fdt</name> <init pos:start="11:15" pos:end="11:20">= <expr pos:start="11:17" pos:end="11:20"><name pos:start="11:17" pos:end="11:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name></decl>, <decl pos:start="15:15" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:16">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19">acells</name></decl>, <decl pos:start="17:22" pos:end="17:27"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:22" pos:end="17:27">scells</name></decl>, <decl pos:start="17:30" pos:end="17:34"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:30" pos:end="17:34">hival</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:72"><expr pos:start="21:5" pos:end="21:71"><name pos:start="21:5" pos:end="21:12">filename</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:71"><name pos:start="21:16" pos:end="21:29">qemu_find_file</name><argument_list pos:start="21:30" pos:end="21:71">(<argument pos:start="21:31" pos:end="21:49"><expr pos:start="21:31" pos:end="21:49"><name pos:start="21:31" pos:end="21:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="21:52" pos:end="21:70"><expr pos:start="21:52" pos:end="21:70"><name pos:start="21:52" pos:end="21:70"><name pos:start="21:52" pos:end="21:56">binfo</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:70">dtb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:17">filename</name></expr>)</condition> <block pos:start="23:20" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:76"><expr pos:start="25:9" pos:end="25:75"><call pos:start="25:9" pos:end="25:75"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:75">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:53"><expr pos:start="25:25" pos:end="25:53"><literal type="string" pos:start="25:25" pos:end="25:53">"Couldn't open dtb file %s\n"</literal></expr></argument>, <argument pos:start="25:56" pos:end="25:74"><expr pos:start="25:56" pos:end="25:74"><name pos:start="25:56" pos:end="25:74"><name pos:start="25:56" pos:end="25:60">binfo</name><operator pos:start="25:61" pos:end="25:62">-&gt;</operator><name pos:start="25:63" pos:end="25:74">dtb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:7">fdt</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:43"><name pos:start="33:11" pos:end="33:26">load_device_tree</name><argument_list pos:start="33:27" pos:end="33:43">(<argument pos:start="33:28" pos:end="33:35"><expr pos:start="33:28" pos:end="33:35"><name pos:start="33:28" pos:end="33:35">filename</name></expr></argument>, <argument pos:start="33:38" pos:end="33:42"><expr pos:start="33:38" pos:end="33:42"><operator pos:start="33:38" pos:end="33:38">&amp;</operator><name pos:start="33:39" pos:end="33:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:13">(<expr pos:start="35:9" pos:end="35:12"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:12">fdt</name></expr>)</condition> <block pos:start="35:15" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:18">

        <expr_stmt pos:start="37:9" pos:end="37:65"><expr pos:start="37:9" pos:end="37:64"><call pos:start="37:9" pos:end="37:64"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:64">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">stderr</name></expr></argument>, <argument pos:start="37:25" pos:end="37:53"><expr pos:start="37:25" pos:end="37:53"><literal type="string" pos:start="37:25" pos:end="37:53">"Couldn't open dtb file %s\n"</literal></expr></argument>, <argument pos:start="37:56" pos:end="37:63"><expr pos:start="37:56" pos:end="37:63"><name pos:start="37:56" pos:end="37:63">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:25"><expr pos:start="39:9" pos:end="39:24"><call pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:14">g_free</name><argument_list pos:start="39:15" pos:end="39:24">(<argument pos:start="39:16" pos:end="39:23"><expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><call pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:10">g_free</name><argument_list pos:start="45:11" pos:end="45:20">(<argument pos:start="45:12" pos:end="45:19"><expr pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:67"><expr pos:start="49:5" pos:end="49:66"><name pos:start="49:5" pos:end="49:10">acells</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <call pos:start="49:14" pos:end="49:66"><name pos:start="49:14" pos:end="49:38">qemu_devtree_getprop_cell</name><argument_list pos:start="49:39" pos:end="49:66">(<argument pos:start="49:40" pos:end="49:42"><expr pos:start="49:40" pos:end="49:42"><name pos:start="49:40" pos:end="49:42">fdt</name></expr></argument>, <argument pos:start="49:45" pos:end="49:47"><expr pos:start="49:45" pos:end="49:47"><literal type="string" pos:start="49:45" pos:end="49:47">"/"</literal></expr></argument>, <argument pos:start="49:50" pos:end="49:65"><expr pos:start="49:50" pos:end="49:65"><literal type="string" pos:start="49:50" pos:end="49:65">"#address-cells"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:64"><expr pos:start="51:5" pos:end="51:63"><name pos:start="51:5" pos:end="51:10">scells</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:63"><name pos:start="51:14" pos:end="51:38">qemu_devtree_getprop_cell</name><argument_list pos:start="51:39" pos:end="51:63">(<argument pos:start="51:40" pos:end="51:42"><expr pos:start="51:40" pos:end="51:42"><name pos:start="51:40" pos:end="51:42">fdt</name></expr></argument>, <argument pos:start="51:45" pos:end="51:47"><expr pos:start="51:45" pos:end="51:47"><literal type="string" pos:start="51:45" pos:end="51:47">"/"</literal></expr></argument>, <argument pos:start="51:50" pos:end="51:62"><expr pos:start="51:50" pos:end="51:62"><literal type="string" pos:start="51:50" pos:end="51:62">"#size-cells"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:35">(<expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:14">acells</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal> <operator pos:start="53:21" pos:end="53:22">||</operator> <name pos:start="53:24" pos:end="53:29">scells</name> <operator pos:start="53:31" pos:end="53:32">==</operator> <literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr>)</condition> <block pos:start="53:37" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:80"><expr pos:start="55:9" pos:end="55:79"><call pos:start="55:9" pos:end="55:79"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:79">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:78"><expr pos:start="55:25" pos:end="55:78"><literal type="string" pos:start="55:25" pos:end="55:78">"dtb file invalid (#address-cells or #size-cells 0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:39"><expr pos:start="63:5" pos:end="63:38"><name pos:start="63:5" pos:end="63:20">mem_reg_propsize</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:29">acells</name> <operator pos:start="63:31" pos:end="63:31">+</operator> <name pos:start="63:33" pos:end="63:38">scells</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:58"><expr pos:start="65:5" pos:end="65:57"><name pos:start="65:5" pos:end="65:20">mem_reg_property</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:57"><name pos:start="65:24" pos:end="65:29">g_new0</name><argument_list pos:start="65:30" pos:end="65:57">(<argument pos:start="65:31" pos:end="65:38"><expr pos:start="65:31" pos:end="65:38"><name pos:start="65:31" pos:end="65:38">uint32_t</name></expr></argument>, <argument pos:start="65:41" pos:end="65:56"><expr pos:start="65:41" pos:end="65:56"><name pos:start="65:41" pos:end="65:56">mem_reg_propsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:68"><expr pos:start="67:5" pos:end="67:67"><name pos:start="67:5" pos:end="67:32"><name pos:start="67:5" pos:end="67:20">mem_reg_property</name><index pos:start="67:21" pos:end="67:32">[<expr pos:start="67:22" pos:end="67:31"><name pos:start="67:22" pos:end="67:27">acells</name> <operator pos:start="67:29" pos:end="67:29">-</operator> <literal type="number" pos:start="67:31" pos:end="67:31">1</literal></expr>]</index></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <call pos:start="67:36" pos:end="67:67"><name pos:start="67:36" pos:end="67:46">cpu_to_be32</name><argument_list pos:start="67:47" pos:end="67:67">(<argument pos:start="67:48" pos:end="67:66"><expr pos:start="67:48" pos:end="67:66"><name pos:start="67:48" pos:end="67:66"><name pos:start="67:48" pos:end="67:52">binfo</name><operator pos:start="67:53" pos:end="67:54">-&gt;</operator><name pos:start="67:55" pos:end="67:66">loader_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:9">hival</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:50"><name pos:start="69:13" pos:end="69:23">cpu_to_be32</name><argument_list pos:start="69:24" pos:end="69:50">(<argument pos:start="69:25" pos:end="69:49"><expr pos:start="69:25" pos:end="69:49"><name pos:start="69:25" pos:end="69:43"><name pos:start="69:25" pos:end="69:29">binfo</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:43">loader_start</name></name> <operator pos:start="69:45" pos:end="69:46">&gt;&gt;</operator> <literal type="number" pos:start="69:48" pos:end="69:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:19">(<expr pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:14">acells</name> <operator pos:start="71:16" pos:end="71:16">&gt;</operator> <literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr>)</condition> <block pos:start="71:21" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:45">

        <expr_stmt pos:start="73:9" pos:end="73:45"><expr pos:start="73:9" pos:end="73:44"><name pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:24">mem_reg_property</name><index pos:start="73:25" pos:end="73:36">[<expr pos:start="73:26" pos:end="73:35"><name pos:start="73:26" pos:end="73:31">acells</name> <operator pos:start="73:33" pos:end="73:33">-</operator> <literal type="number" pos:start="73:35" pos:end="73:35">2</literal></expr>]</index></name> <operator pos:start="73:38" pos:end="73:38">=</operator> <name pos:start="73:40" pos:end="73:44">hival</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="83:5">else if <condition pos:start="75:15" pos:end="75:26">(<expr pos:start="75:16" pos:end="75:25"><name pos:start="75:16" pos:end="75:20">hival</name> <operator pos:start="75:22" pos:end="75:23">!=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr>)</condition> <block pos:start="75:28" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:16">

        <expr_stmt pos:start="77:9" pos:end="79:45"><expr pos:start="77:9" pos:end="79:44"><call pos:start="77:9" pos:end="79:44"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="79:44">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="79:43"><expr pos:start="77:25" pos:end="79:43"><literal type="string" pos:start="77:25" pos:end="77:61">"qemu: dtb file not compatible with "</literal>

                <literal type="string" pos:start="79:17" pos:end="79:43">"RAM start address &gt; 4GB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:16"><expr pos:start="81:9" pos:end="81:15"><call pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:12">exit</name><argument_list pos:start="81:13" pos:end="81:15">(<argument pos:start="81:14" pos:end="81:14"><expr pos:start="81:14" pos:end="81:14"><literal type="number" pos:start="81:14" pos:end="81:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:73"><expr pos:start="85:5" pos:end="85:72"><name pos:start="85:5" pos:end="85:41"><name pos:start="85:5" pos:end="85:20">mem_reg_property</name><index pos:start="85:21" pos:end="85:41">[<expr pos:start="85:22" pos:end="85:40"><name pos:start="85:22" pos:end="85:27">acells</name> <operator pos:start="85:29" pos:end="85:29">+</operator> <name pos:start="85:31" pos:end="85:36">scells</name> <operator pos:start="85:38" pos:end="85:38">-</operator> <literal type="number" pos:start="85:40" pos:end="85:40">1</literal></expr>]</index></name> <operator pos:start="85:43" pos:end="85:43">=</operator> <call pos:start="85:45" pos:end="85:72"><name pos:start="85:45" pos:end="85:55">cpu_to_be32</name><argument_list pos:start="85:56" pos:end="85:72">(<argument pos:start="85:57" pos:end="85:71"><expr pos:start="85:57" pos:end="85:71"><name pos:start="85:57" pos:end="85:71"><name pos:start="85:57" pos:end="85:61">binfo</name><operator pos:start="85:62" pos:end="85:63">-&gt;</operator><name pos:start="85:64" pos:end="85:71">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:47"><expr pos:start="87:5" pos:end="87:46"><name pos:start="87:5" pos:end="87:9">hival</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:46"><name pos:start="87:13" pos:end="87:23">cpu_to_be32</name><argument_list pos:start="87:24" pos:end="87:46">(<argument pos:start="87:25" pos:end="87:45"><expr pos:start="87:25" pos:end="87:45"><name pos:start="87:25" pos:end="87:39"><name pos:start="87:25" pos:end="87:29">binfo</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:39">ram_size</name></name> <operator pos:start="87:41" pos:end="87:42">&gt;&gt;</operator> <literal type="number" pos:start="87:44" pos:end="87:45">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="101:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:19">(<expr pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:14">scells</name> <operator pos:start="89:16" pos:end="89:16">&gt;</operator> <literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr>)</condition> <block pos:start="89:21" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:54">

        <expr_stmt pos:start="91:9" pos:end="91:54"><expr pos:start="91:9" pos:end="91:53"><name pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:24">mem_reg_property</name><index pos:start="91:25" pos:end="91:45">[<expr pos:start="91:26" pos:end="91:44"><name pos:start="91:26" pos:end="91:31">acells</name> <operator pos:start="91:33" pos:end="91:33">+</operator> <name pos:start="91:35" pos:end="91:40">scells</name> <operator pos:start="91:42" pos:end="91:42">-</operator> <literal type="number" pos:start="91:44" pos:end="91:44">2</literal></expr>]</index></name> <operator pos:start="91:47" pos:end="91:47">=</operator> <name pos:start="91:49" pos:end="91:53">hival</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="93:7" pos:end="101:5">else if <condition pos:start="93:15" pos:end="93:26">(<expr pos:start="93:16" pos:end="93:25"><name pos:start="93:16" pos:end="93:20">hival</name> <operator pos:start="93:22" pos:end="93:23">!=</operator> <literal type="number" pos:start="93:25" pos:end="93:25">0</literal></expr>)</condition> <block pos:start="93:28" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:16">

        <expr_stmt pos:start="95:9" pos:end="97:36"><expr pos:start="95:9" pos:end="97:35"><call pos:start="95:9" pos:end="97:35"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="97:35">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>, <argument pos:start="95:25" pos:end="97:34"><expr pos:start="95:25" pos:end="97:34"><literal type="string" pos:start="95:25" pos:end="95:61">"qemu: dtb file not compatible with "</literal>

                <literal type="string" pos:start="97:17" pos:end="97:34">"RAM size &gt; 4GB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:16"><expr pos:start="99:9" pos:end="99:15"><call pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:12">exit</name><argument_list pos:start="99:13" pos:end="99:15">(<argument pos:start="99:14" pos:end="99:14"><expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="107:67"><expr pos:start="105:5" pos:end="107:66"><name pos:start="105:5" pos:end="105:6">rc</name> <operator pos:start="105:8" pos:end="105:8">=</operator> <call pos:start="105:10" pos:end="107:66"><name pos:start="105:10" pos:end="105:29">qemu_devtree_setprop</name><argument_list pos:start="105:30" pos:end="107:66">(<argument pos:start="105:31" pos:end="105:33"><expr pos:start="105:31" pos:end="105:33"><name pos:start="105:31" pos:end="105:33">fdt</name></expr></argument>, <argument pos:start="105:36" pos:end="105:44"><expr pos:start="105:36" pos:end="105:44"><literal type="string" pos:start="105:36" pos:end="105:44">"/memory"</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:51"><expr pos:start="105:47" pos:end="105:51"><literal type="string" pos:start="105:47" pos:end="105:51">"reg"</literal></expr></argument>, <argument pos:start="105:54" pos:end="105:69"><expr pos:start="105:54" pos:end="105:69"><name pos:start="105:54" pos:end="105:69">mem_reg_property</name></expr></argument>,

                              <argument pos:start="107:31" pos:end="107:65"><expr pos:start="107:31" pos:end="107:65"><name pos:start="107:31" pos:end="107:46">mem_reg_propsize</name> <operator pos:start="107:48" pos:end="107:48">*</operator> <sizeof pos:start="107:50" pos:end="107:65">sizeof<argument_list pos:start="107:56" pos:end="107:65">(<argument pos:start="107:57" pos:end="107:64"><expr pos:start="107:57" pos:end="107:64"><name pos:start="107:57" pos:end="107:64">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:15">(<expr pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:10">rc</name> <operator pos:start="109:12" pos:end="109:12">&lt;</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>)</condition> <block pos:start="109:17" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:54">

        <expr_stmt pos:start="111:9" pos:end="111:54"><expr pos:start="111:9" pos:end="111:53"><call pos:start="111:9" pos:end="111:53"><name pos:start="111:9" pos:end="111:15">fprintf</name><argument_list pos:start="111:16" pos:end="111:53">(<argument pos:start="111:17" pos:end="111:22"><expr pos:start="111:17" pos:end="111:22"><name pos:start="111:17" pos:end="111:22">stderr</name></expr></argument>, <argument pos:start="111:25" pos:end="111:52"><expr pos:start="111:25" pos:end="111:52"><literal type="string" pos:start="111:25" pos:end="111:52">"couldn't set /memory/reg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="129:5"><if pos:start="117:5" pos:end="129:5">if <condition pos:start="117:8" pos:end="117:56">(<expr pos:start="117:9" pos:end="117:55"><name pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:13">binfo</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:29">kernel_cmdline</name></name> <operator pos:start="117:31" pos:end="117:32">&amp;&amp;</operator> <operator pos:start="117:34" pos:end="117:34">*</operator><name pos:start="117:35" pos:end="117:55"><name pos:start="117:35" pos:end="117:39">binfo</name><operator pos:start="117:40" pos:end="117:41">-&gt;</operator><name pos:start="117:42" pos:end="117:55">kernel_cmdline</name></name></expr>)</condition> <block pos:start="117:58" pos:end="129:5">{<block_content pos:start="119:9" pos:end="127:9">

        <expr_stmt pos:start="119:9" pos:end="121:65"><expr pos:start="119:9" pos:end="121:64"><name pos:start="119:9" pos:end="119:10">rc</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="121:64"><name pos:start="119:14" pos:end="119:40">qemu_devtree_setprop_string</name><argument_list pos:start="119:41" pos:end="121:64">(<argument pos:start="119:42" pos:end="119:44"><expr pos:start="119:42" pos:end="119:44"><name pos:start="119:42" pos:end="119:44">fdt</name></expr></argument>, <argument pos:start="119:47" pos:end="119:55"><expr pos:start="119:47" pos:end="119:55"><literal type="string" pos:start="119:47" pos:end="119:55">"/chosen"</literal></expr></argument>, <argument pos:start="119:58" pos:end="119:67"><expr pos:start="119:58" pos:end="119:67"><literal type="string" pos:start="119:58" pos:end="119:67">"bootargs"</literal></expr></argument>,

                                          <argument pos:start="121:43" pos:end="121:63"><expr pos:start="121:43" pos:end="121:63"><name pos:start="121:43" pos:end="121:63"><name pos:start="121:43" pos:end="121:47">binfo</name><operator pos:start="121:48" pos:end="121:49">-&gt;</operator><name pos:start="121:50" pos:end="121:63">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:19">(<expr pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:14">rc</name> <operator pos:start="123:16" pos:end="123:16">&lt;</operator> <literal type="number" pos:start="123:18" pos:end="123:18">0</literal></expr>)</condition> <block pos:start="123:21" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:63">

            <expr_stmt pos:start="125:13" pos:end="125:63"><expr pos:start="125:13" pos:end="125:62"><call pos:start="125:13" pos:end="125:62"><name pos:start="125:13" pos:end="125:19">fprintf</name><argument_list pos:start="125:20" pos:end="125:62">(<argument pos:start="125:21" pos:end="125:26"><expr pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:26">stderr</name></expr></argument>, <argument pos:start="125:29" pos:end="125:61"><expr pos:start="125:29" pos:end="125:61"><literal type="string" pos:start="125:29" pos:end="125:61">"couldn't set /chosen/bootargs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="159:5"><if pos:start="133:5" pos:end="159:5">if <condition pos:start="133:8" pos:end="133:27">(<expr pos:start="133:9" pos:end="133:26"><name pos:start="133:9" pos:end="133:26"><name pos:start="133:9" pos:end="133:13">binfo</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:26">initrd_size</name></name></expr>)</condition> <block pos:start="133:29" pos:end="159:5">{<block_content pos:start="135:9" pos:end="157:9">

        <expr_stmt pos:start="135:9" pos:end="137:56"><expr pos:start="135:9" pos:end="137:55"><name pos:start="135:9" pos:end="135:10">rc</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <call pos:start="135:14" pos:end="137:55"><name pos:start="135:14" pos:end="135:38">qemu_devtree_setprop_cell</name><argument_list pos:start="135:39" pos:end="137:55">(<argument pos:start="135:40" pos:end="135:42"><expr pos:start="135:40" pos:end="135:42"><name pos:start="135:40" pos:end="135:42">fdt</name></expr></argument>, <argument pos:start="135:45" pos:end="135:53"><expr pos:start="135:45" pos:end="135:53"><literal type="string" pos:start="135:45" pos:end="135:53">"/chosen"</literal></expr></argument>, <argument pos:start="135:56" pos:end="135:75"><expr pos:start="135:56" pos:end="135:75"><literal type="string" pos:start="135:56" pos:end="135:75">"linux,initrd-start"</literal></expr></argument>,

                <argument pos:start="137:17" pos:end="137:54"><expr pos:start="137:17" pos:end="137:54"><name pos:start="137:17" pos:end="137:35"><name pos:start="137:17" pos:end="137:21">binfo</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:35">loader_start</name></name> <operator pos:start="137:37" pos:end="137:37">+</operator> <name pos:start="137:39" pos:end="137:54">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:19">(<expr pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:14">rc</name> <operator pos:start="139:16" pos:end="139:16">&lt;</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>)</condition> <block pos:start="139:21" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:73">

            <expr_stmt pos:start="141:13" pos:end="141:73"><expr pos:start="141:13" pos:end="141:72"><call pos:start="141:13" pos:end="141:72"><name pos:start="141:13" pos:end="141:19">fprintf</name><argument_list pos:start="141:20" pos:end="141:72">(<argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><name pos:start="141:21" pos:end="141:26">stderr</name></expr></argument>, <argument pos:start="141:29" pos:end="141:71"><expr pos:start="141:29" pos:end="141:71"><literal type="string" pos:start="141:29" pos:end="141:71">"couldn't set /chosen/linux,initrd-start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="147:9" pos:end="151:40"><expr pos:start="147:9" pos:end="151:39"><name pos:start="147:9" pos:end="147:10">rc</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <call pos:start="147:14" pos:end="151:39"><name pos:start="147:14" pos:end="147:38">qemu_devtree_setprop_cell</name><argument_list pos:start="147:39" pos:end="151:39">(<argument pos:start="147:40" pos:end="147:42"><expr pos:start="147:40" pos:end="147:42"><name pos:start="147:40" pos:end="147:42">fdt</name></expr></argument>, <argument pos:start="147:45" pos:end="147:53"><expr pos:start="147:45" pos:end="147:53"><literal type="string" pos:start="147:45" pos:end="147:53">"/chosen"</literal></expr></argument>, <argument pos:start="147:56" pos:end="147:73"><expr pos:start="147:56" pos:end="147:73"><literal type="string" pos:start="147:56" pos:end="147:73">"linux,initrd-end"</literal></expr></argument>,

                    <argument pos:start="149:21" pos:end="151:38"><expr pos:start="149:21" pos:end="151:38"><name pos:start="149:21" pos:end="149:39"><name pos:start="149:21" pos:end="149:25">binfo</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:39">loader_start</name></name> <operator pos:start="149:41" pos:end="149:41">+</operator> <name pos:start="149:43" pos:end="149:58">INITRD_LOAD_ADDR</name> <operator pos:start="149:60" pos:end="149:60">+</operator>

                    <name pos:start="151:21" pos:end="151:38"><name pos:start="151:21" pos:end="151:25">binfo</name><operator pos:start="151:26" pos:end="151:27">-&gt;</operator><name pos:start="151:28" pos:end="151:38">initrd_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="157:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:19">(<expr pos:start="153:13" pos:end="153:18"><name pos:start="153:13" pos:end="153:14">rc</name> <operator pos:start="153:16" pos:end="153:16">&lt;</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>)</condition> <block pos:start="153:21" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:71">

            <expr_stmt pos:start="155:13" pos:end="155:71"><expr pos:start="155:13" pos:end="155:70"><call pos:start="155:13" pos:end="155:70"><name pos:start="155:13" pos:end="155:19">fprintf</name><argument_list pos:start="155:20" pos:end="155:70">(<argument pos:start="155:21" pos:end="155:26"><expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:26">stderr</name></expr></argument>, <argument pos:start="155:29" pos:end="155:69"><expr pos:start="155:29" pos:end="155:69"><literal type="string" pos:start="155:29" pos:end="155:69">"couldn't set /chosen/linux,initrd-end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:47"><expr pos:start="163:5" pos:end="163:46"><call pos:start="163:5" pos:end="163:46"><name pos:start="163:5" pos:end="163:29">cpu_physical_memory_write</name><argument_list pos:start="163:30" pos:end="163:46">(<argument pos:start="163:31" pos:end="163:34"><expr pos:start="163:31" pos:end="163:34"><name pos:start="163:31" pos:end="163:34">addr</name></expr></argument>, <argument pos:start="163:37" pos:end="163:39"><expr pos:start="163:37" pos:end="163:39"><name pos:start="163:37" pos:end="163:39">fdt</name></expr></argument>, <argument pos:start="163:42" pos:end="163:45"><expr pos:start="163:42" pos:end="163:45"><name pos:start="163:42" pos:end="163:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="167:5" pos:end="172:0">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>



<cpp:else pos:start="171:1" pos:end="171:5">#<cpp:directive pos:start="171:2" pos:end="171:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="173:5" pos:end="175:63"><expr pos:start="173:5" pos:end="175:62"><call pos:start="173:5" pos:end="175:62"><name pos:start="173:5" pos:end="173:11">fprintf</name><argument_list pos:start="173:12" pos:end="175:62">(<argument pos:start="173:13" pos:end="173:18"><expr pos:start="173:13" pos:end="173:18"><name pos:start="173:13" pos:end="173:18">stderr</name></expr></argument>, <argument pos:start="173:21" pos:end="175:61"><expr pos:start="173:21" pos:end="175:61"><literal type="string" pos:start="173:21" pos:end="173:45">"Device tree requested, "</literal>

                <literal type="string" pos:start="175:17" pos:end="175:61">"but qemu was compiled without fdt support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="180:0">return <expr pos:start="177:12" pos:end="177:13"><operator pos:start="177:12" pos:end="177:12">-</operator><literal type="number" pos:start="177:13" pos:end="177:13">1</literal></expr>;</return>

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
