<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7369.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">pc_cpus_init</name><parameter_list pos:start="1:18" pos:end="1:65">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><specifier pos:start="1:19" pos:end="1:23">const</specifier> <name pos:start="1:25" pos:end="1:28">char</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:39">cpu_model</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:52">DeviceState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:64">icc_bridge</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:76">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">X86CPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:22">= <expr pos:start="7:19" pos:end="7:22"><name pos:start="7:19" pos:end="7:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:16">error</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:31">apic_id_limit</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:19">/* init CPUs */</comment>

    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:26">(<expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:17">cpu_model</name> <operator pos:start="17:19" pos:end="17:20">==</operator> <name pos:start="17:22" pos:end="17:25">NULL</name></expr>)</condition> <block pos:start="17:28" pos:end="29:5">{<block_content pos:start="21:9" pos:end="28:0">

<cpp:ifdef pos:start="19:1" pos:end="19:20">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="21:9" pos:end="24:0"><expr pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:17">cpu_model</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="string" pos:start="21:21" pos:end="21:28">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="string" pos:start="25:21" pos:end="25:28">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:21">current_cpu_model</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:33">cpu_model</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:17">apic_id_limit</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:46"><name pos:start="35:21" pos:end="35:36">pc_apic_id_limit</name><argument_list pos:start="35:37" pos:end="35:46">(<argument pos:start="35:38" pos:end="35:45"><expr pos:start="35:38" pos:end="35:45"><name pos:start="35:38" pos:end="35:45">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:50">(<expr pos:start="37:9" pos:end="37:49"><name pos:start="37:9" pos:end="37:21">apic_id_limit</name> <operator pos:start="37:23" pos:end="37:23">&gt;</operator> <name pos:start="37:25" pos:end="37:49">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr>)</condition> <block pos:start="37:52" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:16">

        <expr_stmt pos:start="39:9" pos:end="41:40"><expr pos:start="39:9" pos:end="41:39"><call pos:start="39:9" pos:end="41:39"><name pos:start="39:9" pos:end="39:20">error_report</name><argument_list pos:start="39:21" pos:end="41:39">(<argument pos:start="39:22" pos:end="39:72"><expr pos:start="39:22" pos:end="39:72"><literal type="string" pos:start="39:22" pos:end="39:72">"max_cpus is too large. APIC ID of last CPU is %lu"</literal></expr></argument>,

                     <argument pos:start="41:22" pos:end="41:38"><expr pos:start="41:22" pos:end="41:38"><name pos:start="41:22" pos:end="41:34">apic_id_limit</name> <operator pos:start="41:36" pos:end="41:36">-</operator> <literal type="number" pos:start="41:38" pos:end="41:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><call pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:12">exit</name><argument_list pos:start="43:13" pos:end="43:15">(<argument pos:start="43:14" pos:end="43:14"><expr pos:start="43:14" pos:end="43:14"><literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="49:5" pos:end="65:5">for <control pos:start="49:9" pos:end="49:34">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:29"><expr pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:28">smp_cpus</name></expr>;</condition> <incr pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:31">i</name><operator pos:start="49:32" pos:end="49:33">++</operator></expr></incr>)</control> <block pos:start="49:36" pos:end="65:5">{<block_content pos:start="51:9" pos:end="63:34">

        <expr_stmt pos:start="51:9" pos:end="53:45"><expr pos:start="51:9" pos:end="53:44"><name pos:start="51:9" pos:end="51:11">cpu</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="53:44"><name pos:start="51:15" pos:end="51:24">pc_new_cpu</name><argument_list pos:start="51:25" pos:end="53:44">(<argument pos:start="51:26" pos:end="51:34"><expr pos:start="51:26" pos:end="51:34"><name pos:start="51:26" pos:end="51:34">cpu_model</name></expr></argument>, <argument pos:start="51:37" pos:end="51:65"><expr pos:start="51:37" pos:end="51:65"><call pos:start="51:37" pos:end="51:65"><name pos:start="51:37" pos:end="51:62">x86_cpu_apic_id_from_index</name><argument_list pos:start="51:63" pos:end="51:65">(<argument pos:start="51:64" pos:end="51:64"><expr pos:start="51:64" pos:end="51:64"><name pos:start="51:64" pos:end="51:64">i</name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="53:26" pos:end="53:35"><expr pos:start="53:26" pos:end="53:35"><name pos:start="53:26" pos:end="53:35">icc_bridge</name></expr></argument>, <argument pos:start="53:38" pos:end="53:43"><expr pos:start="53:38" pos:end="53:43"><operator pos:start="53:38" pos:end="53:38">&amp;</operator><name pos:start="53:39" pos:end="53:43">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:18">(<expr pos:start="55:13" pos:end="55:17"><name pos:start="55:13" pos:end="55:17">error</name></expr>)</condition> <block pos:start="55:20" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:20">

            <expr_stmt pos:start="57:13" pos:end="57:36"><expr pos:start="57:13" pos:end="57:35"><call pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:28">error_report_err</name><argument_list pos:start="57:29" pos:end="57:35">(<argument pos:start="57:30" pos:end="57:34"><expr pos:start="57:30" pos:end="57:34"><name pos:start="57:30" pos:end="57:34">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:20"><expr pos:start="59:13" pos:end="59:19"><call pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:16">exit</name><argument_list pos:start="59:17" pos:end="59:19">(<argument pos:start="59:18" pos:end="59:18"><expr pos:start="59:18" pos:end="59:18"><literal type="number" pos:start="59:18" pos:end="59:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><call pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:20">object_unref</name><argument_list pos:start="63:21" pos:end="63:33">(<argument pos:start="63:22" pos:end="63:32"><expr pos:start="63:22" pos:end="63:32"><call pos:start="63:22" pos:end="63:32"><name pos:start="63:22" pos:end="63:27">OBJECT</name><argument_list pos:start="63:28" pos:end="63:32">(<argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="69:5" pos:end="69:54">/* tell smbios about cpuid version and features */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:76"><expr pos:start="71:5" pos:end="71:75"><call pos:start="71:5" pos:end="71:75"><name pos:start="71:5" pos:end="71:20">smbios_set_cpuid</name><argument_list pos:start="71:21" pos:end="71:75">(<argument pos:start="71:22" pos:end="71:43"><expr pos:start="71:22" pos:end="71:43"><name pos:start="71:22" pos:end="71:43"><name pos:start="71:22" pos:end="71:24">cpu</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:29">env</name><operator pos:start="71:30" pos:end="71:30">.</operator><name pos:start="71:31" pos:end="71:43">cpuid_version</name></name></expr></argument>, <argument pos:start="71:46" pos:end="71:74"><expr pos:start="71:46" pos:end="71:74"><name pos:start="71:46" pos:end="71:74"><name pos:start="71:46" pos:end="71:48">cpu</name><operator pos:start="71:49" pos:end="71:50">-&gt;</operator><name pos:start="71:51" pos:end="71:53">env</name><operator pos:start="71:54" pos:end="71:54">.</operator><name pos:start="71:55" pos:end="71:62">features</name><index pos:start="71:63" pos:end="71:74">[<expr pos:start="71:64" pos:end="71:73"><name pos:start="71:64" pos:end="71:73">FEAT_1_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
