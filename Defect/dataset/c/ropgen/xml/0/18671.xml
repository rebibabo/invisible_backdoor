<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18671.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">xen_pt_msgaddr64_reg_write</name><parameter_list pos:start="1:38" pos:end="5:78">(<parameter pos:start="1:39" pos:end="1:63"><decl pos:start="1:39" pos:end="1:63"><type pos:start="1:39" pos:end="1:63"><name pos:start="1:39" pos:end="1:60">XenPCIPassthroughState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:57"><decl pos:start="3:39" pos:end="3:57"><type pos:start="3:39" pos:end="3:57"><name pos:start="3:39" pos:end="3:46">XenPTReg</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:57">cfg_entry</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:72"><decl pos:start="3:60" pos:end="3:72"><type pos:start="3:60" pos:end="3:72"><name pos:start="3:60" pos:end="3:67">uint32_t</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:72">val</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:56"><decl pos:start="5:39" pos:end="5:56"><type pos:start="5:39" pos:end="5:56"><name pos:start="5:39" pos:end="5:46">uint32_t</name></type> <name pos:start="5:48" pos:end="5:56">dev_value</name></decl></parameter>, <parameter pos:start="5:59" pos:end="5:77"><decl pos:start="5:59" pos:end="5:77"><type pos:start="5:59" pos:end="5:77"><name pos:start="5:59" pos:end="5:66">uint32_t</name></type> <name pos:start="5:68" pos:end="5:77">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="65:1">{<block_content pos:start="9:5" pos:end="63:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:26">writable_mask</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:21">old_addr</name> <init pos:start="13:23" pos:end="13:39">= <expr pos:start="13:25" pos:end="13:39"><name pos:start="13:25" pos:end="13:39"><name pos:start="13:25" pos:end="13:33">cfg_entry</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:39">data</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:49">/* check whether the type is 64 bit or not */</comment>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:23"><name pos:start="19:11" pos:end="19:11">s</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:16">msi</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:23">flags</name></name> <operator pos:start="19:25" pos:end="19:25">&amp;</operator> <name pos:start="19:27" pos:end="19:45">PCI_MSI_FLAGS_64BIT</name><operator pos:start="19:46" pos:end="19:46">)</operator></expr>)</condition> <block pos:start="19:49" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

        <expr_stmt pos:start="21:9" pos:end="23:80"><expr pos:start="21:9" pos:end="23:79"><call pos:start="21:9" pos:end="23:79"><name pos:start="21:9" pos:end="21:18">XEN_PT_ERR</name><argument_list pos:start="21:19" pos:end="23:79">(<argument pos:start="21:20" pos:end="21:26"><expr pos:start="21:20" pos:end="21:26"><operator pos:start="21:20" pos:end="21:20">&amp;</operator><name pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:21">s</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:26">dev</name></name></expr></argument>,

                   <argument pos:start="23:20" pos:end="23:78"><expr pos:start="23:20" pos:end="23:78"><literal type="string" pos:start="23:20" pos:end="23:78">"Can't write to the upper address without 64 bit support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:17">writable_mask</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:33"><name pos:start="33:21" pos:end="33:23">reg</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:33">emu_mask</name></name> <operator pos:start="33:35" pos:end="33:35">&amp;</operator> <operator pos:start="33:37" pos:end="33:37">~</operator><name pos:start="33:38" pos:end="33:49"><name pos:start="33:38" pos:end="33:40">reg</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:49">ro_mask</name></name> <operator pos:start="33:51" pos:end="33:51">&amp;</operator> <name pos:start="33:53" pos:end="33:62">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:79"><expr pos:start="35:5" pos:end="35:78"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:13">cfg_entry</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">data</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:78"><name pos:start="35:23" pos:end="35:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="35:41" pos:end="35:78">(<argument pos:start="35:42" pos:end="35:45"><expr pos:start="35:42" pos:end="35:45"><operator pos:start="35:42" pos:end="35:42">*</operator><name pos:start="35:43" pos:end="35:45">val</name></expr></argument>, <argument pos:start="35:48" pos:end="35:62"><expr pos:start="35:48" pos:end="35:62"><name pos:start="35:48" pos:end="35:62"><name pos:start="35:48" pos:end="35:56">cfg_entry</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:62">data</name></name></expr></argument>, <argument pos:start="35:65" pos:end="35:77"><expr pos:start="35:65" pos:end="35:77"><name pos:start="35:65" pos:end="35:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:33">/* update the msi_info too */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:10">msi</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:19">addr_hi</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:37"><name pos:start="39:23" pos:end="39:31">cfg_entry</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:37">data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:50"><expr pos:start="45:5" pos:end="45:49"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:8">val</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:49"><name pos:start="45:12" pos:end="45:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="45:30" pos:end="45:49">(<argument pos:start="45:31" pos:end="45:34"><expr pos:start="45:31" pos:end="45:34"><operator pos:start="45:31" pos:end="45:31">*</operator><name pos:start="45:32" pos:end="45:34">val</name></expr></argument>, <argument pos:start="45:37" pos:end="45:45"><expr pos:start="45:37" pos:end="45:45"><name pos:start="45:37" pos:end="45:45">dev_value</name></expr></argument>, <argument pos:start="45:48" pos:end="45:48"><expr pos:start="45:48" pos:end="45:48"><literal type="number" pos:start="45:48" pos:end="45:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:20">/* update MSI */</comment>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:36">(<expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:17">cfg_entry</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:23">data</name></name> <operator pos:start="51:25" pos:end="51:26">!=</operator> <name pos:start="51:28" pos:end="51:35">old_addr</name></expr>)</condition> <block pos:start="51:38" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:9">

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:18">msi</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">mapped</name></name></expr>)</condition> <block pos:start="53:29" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:33">

            <expr_stmt pos:start="55:13" pos:end="55:33"><expr pos:start="55:13" pos:end="55:32"><call pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:29">xen_pt_msi_update</name><argument_list pos:start="55:30" pos:end="55:32">(<argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><name pos:start="55:31" pos:end="55:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
