<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14239.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:58">bdrv_co_get_block_status_above</name><parameter_list pos:start="1:59" pos:end="11:32">(<parameter pos:start="1:60" pos:end="1:79"><decl pos:start="1:60" pos:end="1:79"><type pos:start="1:60" pos:end="1:79"><name pos:start="1:60" pos:end="1:75">BlockDriverState</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:79">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:30"><decl pos:start="3:9" pos:end="3:30"><type pos:start="3:9" pos:end="3:30"><name pos:start="3:9" pos:end="3:24">BlockDriverState</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:30">base</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:26"><decl pos:start="5:9" pos:end="5:26"><type pos:start="5:9" pos:end="5:26"><name pos:start="5:9" pos:end="5:15">int64_t</name></type> <name pos:start="5:17" pos:end="5:26">sector_num</name></decl></parameter>,

        <parameter pos:start="7:9" pos:end="7:22"><decl pos:start="7:9" pos:end="7:22"><type pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:22">nb_sectors</name></decl></parameter>,

        <parameter pos:start="9:9" pos:end="9:17"><decl pos:start="9:9" pos:end="9:17"><type pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:11">int</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:17">pnum</name></decl></parameter>,

        <parameter pos:start="11:9" pos:end="11:31"><decl pos:start="11:9" pos:end="11:31"><type pos:start="11:9" pos:end="11:31"><name pos:start="11:9" pos:end="11:24">BlockDriverState</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">file</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="71:1">{<block_content pos:start="15:5" pos:end="69:15">

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:23">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">ret</name> <init pos:start="17:17" pos:end="17:19">= <expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:14">first</name> <init pos:start="19:16" pos:end="19:21">= <expr pos:start="19:18" pos:end="19:21"><name pos:start="19:18" pos:end="19:21">true</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><call pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:22">(<argument pos:start="23:12" pos:end="23:21"><expr pos:start="23:12" pos:end="23:21"><name pos:start="23:12" pos:end="23:13">bs</name> <operator pos:start="23:15" pos:end="23:16">!=</operator> <name pos:start="23:18" pos:end="23:21">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="25:5" pos:end="67:5">for <control pos:start="25:9" pos:end="25:46">(<init pos:start="25:10" pos:end="25:16"><expr pos:start="25:10" pos:end="25:15"><name pos:start="25:10" pos:end="25:10">p</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:15">bs</name></expr>;</init> <condition pos:start="25:18" pos:end="25:27"><expr pos:start="25:18" pos:end="25:26"><name pos:start="25:18" pos:end="25:18">p</name> <operator pos:start="25:20" pos:end="25:21">!=</operator> <name pos:start="25:23" pos:end="25:26">base</name></expr>;</condition> <incr pos:start="25:29" pos:end="25:45"><expr pos:start="25:29" pos:end="25:45"><name pos:start="25:29" pos:end="25:29">p</name> <operator pos:start="25:31" pos:end="25:31">=</operator> <call pos:start="25:33" pos:end="25:45"><name pos:start="25:33" pos:end="25:42">backing_bs</name><argument_list pos:start="25:43" pos:end="25:45">(<argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><name pos:start="25:44" pos:end="25:44">p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="25:48" pos:end="67:5">{<block_content pos:start="27:9" pos:end="65:22">

        <expr_stmt pos:start="27:9" pos:end="27:78"><expr pos:start="27:9" pos:end="27:77"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:77"><name pos:start="27:15" pos:end="27:38">bdrv_co_get_block_status</name><argument_list pos:start="27:39" pos:end="27:77">(<argument pos:start="27:40" pos:end="27:40"><expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">p</name></expr></argument>, <argument pos:start="27:43" pos:end="27:52"><expr pos:start="27:43" pos:end="27:52"><name pos:start="27:43" pos:end="27:52">sector_num</name></expr></argument>, <argument pos:start="27:55" pos:end="27:64"><expr pos:start="27:55" pos:end="27:64"><name pos:start="27:55" pos:end="27:64">nb_sectors</name></expr></argument>, <argument pos:start="27:67" pos:end="27:70"><expr pos:start="27:67" pos:end="27:70"><name pos:start="27:67" pos:end="27:70">pnum</name></expr></argument>, <argument pos:start="27:73" pos:end="27:76"><expr pos:start="27:73" pos:end="27:76"><name pos:start="27:73" pos:end="27:76">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>)</condition> <block pos:start="29:22" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:18">

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="51:9"><if pos:start="35:9" pos:end="51:9">if <condition pos:start="35:12" pos:end="35:68">(<expr pos:start="35:13" pos:end="35:67"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">&amp;</operator> <name pos:start="35:19" pos:end="35:33">BDRV_BLOCK_ZERO</name> <operator pos:start="35:35" pos:end="35:36">&amp;&amp;</operator> <name pos:start="35:38" pos:end="35:40">ret</name> <operator pos:start="35:42" pos:end="35:42">&amp;</operator> <name pos:start="35:44" pos:end="35:57">BDRV_BLOCK_EOF</name> <operator pos:start="35:59" pos:end="35:60">&amp;&amp;</operator> <operator pos:start="35:62" pos:end="35:62">!</operator><name pos:start="35:63" pos:end="35:67">first</name></expr>)</condition> <block pos:start="35:70" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:31">

            <comment type="block" pos:start="37:13" pos:end="47:15">/*

             * Reading beyond the end of the file continues to read

             * zeroes, but we can only widen the result to the

             * unallocated length we learned from an earlier

             * iteration.

             */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:31"><expr pos:start="49:13" pos:end="49:30"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:17">pnum</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:30">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:54">(<expr pos:start="53:13" pos:end="53:53"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">&amp;</operator> <operator pos:start="53:19" pos:end="53:19">(</operator><name pos:start="53:20" pos:end="53:34">BDRV_BLOCK_ZERO</name> <operator pos:start="53:36" pos:end="53:36">|</operator> <name pos:start="53:38" pos:end="53:52">BDRV_BLOCK_DATA</name><operator pos:start="53:53" pos:end="53:53">)</operator></expr>)</condition> <block pos:start="53:56" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="59:9" pos:end="61:58">/* [sector_num, pnum] unallocated on this layer, which could be only

         * the first part of [sector_num, nb_sectors].  */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:18">nb_sectors</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:43"><name pos:start="63:22" pos:end="63:24">MIN</name><argument_list pos:start="63:25" pos:end="63:43">(<argument pos:start="63:26" pos:end="63:35"><expr pos:start="63:26" pos:end="63:35"><name pos:start="63:26" pos:end="63:35">nb_sectors</name></expr></argument>, <argument pos:start="63:38" pos:end="63:42"><expr pos:start="63:38" pos:end="63:42"><operator pos:start="63:38" pos:end="63:38">*</operator><name pos:start="63:39" pos:end="63:42">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:13">first</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:21">false</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
