<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13574.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">vmsvga_update_display</name><parameter_list pos:start="1:34" pos:end="1:47">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:40"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:25">vmsvga_state_s</name></name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:28">s</name> <init pos:start="5:30" pos:end="5:37">= <expr pos:start="5:32" pos:end="5:37"><name pos:start="5:32" pos:end="5:37">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">DisplaySurface</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:27">surface</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">dirty</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:18">enable</name></name></expr>)</condition> <block pos:start="13:21" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:43"><expr pos:start="15:9" pos:end="15:42"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:14">vga</name><operator pos:start="15:15" pos:end="15:15">.</operator><name pos:start="15:16" pos:end="15:21">hw_ops</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:33">gfx_update</name></name><argument_list pos:start="15:34" pos:end="15:42">(<argument pos:start="15:35" pos:end="15:41"><expr pos:start="15:35" pos:end="15:41"><operator pos:start="15:35" pos:end="15:35">&amp;</operator><name pos:start="15:36" pos:end="15:41"><name pos:start="15:36" pos:end="15:36">s</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:41">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:21">vmsvga_check_size</name><argument_list pos:start="23:22" pos:end="23:24">(<argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><name pos:start="23:23" pos:end="23:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:11">surface</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:46"><name pos:start="25:15" pos:end="25:34">qemu_console_surface</name><argument_list pos:start="25:35" pos:end="25:46">(<argument pos:start="25:36" pos:end="25:45"><expr pos:start="25:36" pos:end="25:45"><name pos:start="25:36" pos:end="25:45"><name pos:start="25:36" pos:end="25:36">s</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:41">vga</name><operator pos:start="25:42" pos:end="25:42">.</operator><name pos:start="25:43" pos:end="25:45">con</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:19">vmsvga_fifo_run</name><argument_list pos:start="29:20" pos:end="29:22">(<argument pos:start="29:21" pos:end="29:21"><expr pos:start="29:21" pos:end="29:21"><name pos:start="29:21" pos:end="29:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><call pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:28">vmsvga_update_rect_flush</name><argument_list pos:start="31:29" pos:end="31:31">(<argument pos:start="31:30" pos:end="31:30"><expr pos:start="31:30" pos:end="31:30"><name pos:start="31:30" pos:end="31:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="41:7">/*

     * Is it more efficient to look at vram VGA-dirty bits or wait

     * for the driver to issue SVGA_CMD_UPDATE?

     */</comment>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:47">(<expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:32">memory_region_is_logging</name><argument_list pos:start="43:33" pos:end="43:46">(<argument pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:45"><operator pos:start="43:34" pos:end="43:34">&amp;</operator><name pos:start="43:35" pos:end="43:45"><name pos:start="43:35" pos:end="43:35">s</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:40">vga</name><operator pos:start="43:41" pos:end="43:41">.</operator><name pos:start="43:42" pos:end="43:45">vram</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:49" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:30">

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><call pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:29">vga_sync_dirty_bitmap</name><argument_list pos:start="45:30" pos:end="45:38">(<argument pos:start="45:31" pos:end="45:37"><expr pos:start="45:31" pos:end="45:37"><operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:37"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:37">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="51:30"><expr pos:start="47:9" pos:end="51:29"><name pos:start="47:9" pos:end="47:13">dirty</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="51:29"><name pos:start="47:17" pos:end="47:39">memory_region_get_dirty</name><argument_list pos:start="47:40" pos:end="51:29">(<argument pos:start="47:41" pos:end="47:52"><expr pos:start="47:41" pos:end="47:52"><operator pos:start="47:41" pos:end="47:41">&amp;</operator><name pos:start="47:42" pos:end="47:52"><name pos:start="47:42" pos:end="47:42">s</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:47">vga</name><operator pos:start="47:48" pos:end="47:48">.</operator><name pos:start="47:49" pos:end="47:52">vram</name></name></expr></argument>, <argument pos:start="47:55" pos:end="47:55"><expr pos:start="47:55" pos:end="47:55"><literal type="number" pos:start="47:55" pos:end="47:55">0</literal></expr></argument>,

            <argument pos:start="49:13" pos:end="49:61"><expr pos:start="49:13" pos:end="49:61"><call pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:26">surface_stride</name><argument_list pos:start="49:27" pos:end="49:35">(<argument pos:start="49:28" pos:end="49:34"><expr pos:start="49:28" pos:end="49:34"><name pos:start="49:28" pos:end="49:34">surface</name></expr></argument>)</argument_list></call> <operator pos:start="49:37" pos:end="49:37">*</operator> <call pos:start="49:39" pos:end="49:61"><name pos:start="49:39" pos:end="49:52">surface_height</name><argument_list pos:start="49:53" pos:end="49:61">(<argument pos:start="49:54" pos:end="49:60"><expr pos:start="49:54" pos:end="49:60"><name pos:start="49:54" pos:end="49:60">surface</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="51:13" pos:end="51:28"><expr pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:28">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:32">(<expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:22">invalidated</name></name> <operator pos:start="55:24" pos:end="55:25">||</operator> <name pos:start="55:27" pos:end="55:31">dirty</name></expr>)</condition> <block pos:start="55:34" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:68">

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:22">invalidated</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="61:68"><expr pos:start="59:9" pos:end="61:67"><call pos:start="59:9" pos:end="61:67"><name pos:start="59:9" pos:end="59:22">dpy_gfx_update</name><argument_list pos:start="59:23" pos:end="61:67">(<argument pos:start="59:24" pos:end="59:33"><expr pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:24">s</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:29">vga</name><operator pos:start="59:30" pos:end="59:30">.</operator><name pos:start="59:31" pos:end="59:33">con</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:36"><expr pos:start="59:36" pos:end="59:36"><literal type="number" pos:start="59:36" pos:end="59:36">0</literal></expr></argument>, <argument pos:start="59:39" pos:end="59:39"><expr pos:start="59:39" pos:end="59:39"><literal type="number" pos:start="59:39" pos:end="59:39">0</literal></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:41"><expr pos:start="61:20" pos:end="61:41"><call pos:start="61:20" pos:end="61:41"><name pos:start="61:20" pos:end="61:32">surface_width</name><argument_list pos:start="61:33" pos:end="61:41">(<argument pos:start="61:34" pos:end="61:40"><expr pos:start="61:34" pos:end="61:40"><name pos:start="61:34" pos:end="61:40">surface</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:44" pos:end="61:66"><expr pos:start="61:44" pos:end="61:66"><call pos:start="61:44" pos:end="61:66"><name pos:start="61:44" pos:end="61:57">surface_height</name><argument_list pos:start="61:58" pos:end="61:66">(<argument pos:start="61:59" pos:end="61:65"><expr pos:start="61:59" pos:end="61:65"><name pos:start="61:59" pos:end="61:65">surface</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:14">(<expr pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:13">dirty</name></expr>)</condition> <block pos:start="65:16" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:30">

        <expr_stmt pos:start="67:9" pos:end="71:30"><expr pos:start="67:9" pos:end="71:29"><call pos:start="67:9" pos:end="71:29"><name pos:start="67:9" pos:end="67:33">memory_region_reset_dirty</name><argument_list pos:start="67:34" pos:end="71:29">(<argument pos:start="67:35" pos:end="67:46"><expr pos:start="67:35" pos:end="67:46"><operator pos:start="67:35" pos:end="67:35">&amp;</operator><name pos:start="67:36" pos:end="67:46"><name pos:start="67:36" pos:end="67:36">s</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:41">vga</name><operator pos:start="67:42" pos:end="67:42">.</operator><name pos:start="67:43" pos:end="67:46">vram</name></name></expr></argument>, <argument pos:start="67:49" pos:end="67:49"><expr pos:start="67:49" pos:end="67:49"><literal type="number" pos:start="67:49" pos:end="67:49">0</literal></expr></argument>,

            <argument pos:start="69:13" pos:end="69:61"><expr pos:start="69:13" pos:end="69:61"><call pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:26">surface_stride</name><argument_list pos:start="69:27" pos:end="69:35">(<argument pos:start="69:28" pos:end="69:34"><expr pos:start="69:28" pos:end="69:34"><name pos:start="69:28" pos:end="69:34">surface</name></expr></argument>)</argument_list></call> <operator pos:start="69:37" pos:end="69:37">*</operator> <call pos:start="69:39" pos:end="69:61"><name pos:start="69:39" pos:end="69:52">surface_height</name><argument_list pos:start="69:53" pos:end="69:61">(<argument pos:start="69:54" pos:end="69:60"><expr pos:start="69:54" pos:end="69:60"><name pos:start="69:54" pos:end="69:60">surface</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="71:13" pos:end="71:28"><expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:28">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
