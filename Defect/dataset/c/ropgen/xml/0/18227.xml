<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18227.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">x86_cpu_reset</name><parameter_list pos:start="1:26" pos:end="1:38">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="243:1">{<block_content pos:start="5:5" pos:end="242:0">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">X86CPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:28">= <expr pos:start="5:19" pos:end="5:28"><call pos:start="5:19" pos:end="5:28"><name pos:start="5:19" pos:end="5:25">X86_CPU</name><argument_list pos:start="5:26" pos:end="5:28">(<argument pos:start="5:27" pos:end="5:27"><expr pos:start="5:27" pos:end="5:27"><name pos:start="5:27" pos:end="5:27">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">X86CPUClass</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">xcc</name> <init pos:start="7:22" pos:end="7:45">= <expr pos:start="7:24" pos:end="7:45"><call pos:start="7:24" pos:end="7:45"><name pos:start="7:24" pos:end="7:40">X86_CPU_GET_CLASS</name><argument_list pos:start="7:41" pos:end="7:45">(<argument pos:start="7:42" pos:end="7:44"><expr pos:start="7:42" pos:end="7:44"><name pos:start="7:42" pos:end="7:44">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUX86State</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:20">cr4</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:17">xcr0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><call pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:7">xcc</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:21">parent_reset</name></name><argument_list pos:start="19:22" pos:end="19:24">(<argument pos:start="19:23" pos:end="19:23"><expr pos:start="19:23" pos:end="19:23"><name pos:start="19:23" pos:end="19:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:60"><expr pos:start="23:5" pos:end="23:59"><call pos:start="23:5" pos:end="23:59"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:59">(<argument pos:start="23:12" pos:end="23:14"><expr pos:start="23:12" pos:end="23:14"><name pos:start="23:12" pos:end="23:14">env</name></expr></argument>, <argument pos:start="23:17" pos:end="23:17"><expr pos:start="23:17" pos:end="23:17"><literal type="number" pos:start="23:17" pos:end="23:17">0</literal></expr></argument>, <argument pos:start="23:20" pos:end="23:58"><expr pos:start="23:20" pos:end="23:58"><call pos:start="23:20" pos:end="23:58"><name pos:start="23:20" pos:end="23:27">offsetof</name><argument_list pos:start="23:28" pos:end="23:58">(<argument pos:start="23:29" pos:end="23:39"><expr pos:start="23:29" pos:end="23:39"><name pos:start="23:29" pos:end="23:39">CPUX86State</name></expr></argument>, <argument pos:start="23:42" pos:end="23:57"><expr pos:start="23:42" pos:end="23:57"><name pos:start="23:42" pos:end="23:57">end_reset_fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><call pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:13">tlb_flush</name><argument_list pos:start="27:14" pos:end="27:19">(<argument pos:start="27:15" pos:end="27:15"><expr pos:start="27:15" pos:end="27:15"><name pos:start="27:15" pos:end="27:15">s</name></expr></argument>, <argument pos:start="27:18" pos:end="27:18"><expr pos:start="27:18" pos:end="27:18"><literal type="number" pos:start="27:18" pos:end="27:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:28"><expr pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:7">env</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:22">old_exception</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <operator pos:start="31:26" pos:end="31:26">-</operator><literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:29">/* init to reset state */</comment>



    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:7">env</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:16">hflags2</name></name> <operator pos:start="39:18" pos:end="39:19">|=</operator> <name pos:start="39:21" pos:end="39:32">HF2_GIF_MASK</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><call pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:22">cpu_x86_update_cr0</name><argument_list pos:start="43:23" pos:end="43:39">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">env</name></expr></argument>, <argument pos:start="43:29" pos:end="43:38"><expr pos:start="43:29" pos:end="43:38"><literal type="number" pos:start="43:29" pos:end="43:38">0x60000010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:17">a20_mask</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">~</operator><literal type="number" pos:start="45:22" pos:end="45:24">0x0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:26"><expr pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:7">env</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:15">smbase</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <literal type="number" pos:start="47:19" pos:end="47:25">0x30000</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:7">env</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:12">idt</name><operator pos:start="51:13" pos:end="51:13">.</operator><name pos:start="51:14" pos:end="51:18">limit</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:27">0xffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:28"><expr pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:7">env</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:12">gdt</name><operator pos:start="53:13" pos:end="53:13">.</operator><name pos:start="53:14" pos:end="53:18">limit</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:27">0xffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:7">env</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:12">ldt</name><operator pos:start="55:13" pos:end="55:13">.</operator><name pos:start="55:14" pos:end="55:18">limit</name></name> <operator pos:start="55:20" pos:end="55:20">=</operator> <literal type="number" pos:start="55:22" pos:end="55:27">0xffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:58"><expr pos:start="57:5" pos:end="57:57"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:7">env</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:12">ldt</name><operator pos:start="57:13" pos:end="57:13">.</operator><name pos:start="57:14" pos:end="57:18">flags</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:32">DESC_P_MASK</name> <operator pos:start="57:34" pos:end="57:34">|</operator> <operator pos:start="57:36" pos:end="57:36">(</operator><literal type="number" pos:start="57:37" pos:end="57:37">2</literal> <operator pos:start="57:39" pos:end="57:40">&lt;&lt;</operator> <name pos:start="57:42" pos:end="57:56">DESC_TYPE_SHIFT</name><operator pos:start="57:57" pos:end="57:57">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:7">env</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:11">tr</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:17">limit</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:26">0xffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:58"><expr pos:start="61:5" pos:end="61:57"><name pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:7">env</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:11">tr</name><operator pos:start="61:12" pos:end="61:12">.</operator><name pos:start="61:13" pos:end="61:17">flags</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:31">DESC_P_MASK</name> <operator pos:start="61:33" pos:end="61:33">|</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><literal type="number" pos:start="61:36" pos:end="61:37">11</literal> <operator pos:start="61:39" pos:end="61:40">&lt;&lt;</operator> <name pos:start="61:42" pos:end="61:56">DESC_TYPE_SHIFT</name><operator pos:start="61:57" pos:end="61:57">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="69:54"><expr pos:start="65:5" pos:end="69:53"><call pos:start="65:5" pos:end="69:53"><name pos:start="65:5" pos:end="65:26">cpu_x86_load_seg_cache</name><argument_list pos:start="65:27" pos:end="69:53">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">env</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">R_CS</name></expr></argument>, <argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><literal type="number" pos:start="65:39" pos:end="65:44">0xf000</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:56"><expr pos:start="65:47" pos:end="65:56"><literal type="number" pos:start="65:47" pos:end="65:56">0xffff0000</literal></expr></argument>, <argument pos:start="65:59" pos:end="65:64"><expr pos:start="65:59" pos:end="65:64"><literal type="number" pos:start="65:59" pos:end="65:64">0xffff</literal></expr></argument>,

                           <argument pos:start="67:28" pos:end="69:52"><expr pos:start="67:28" pos:end="69:52"><name pos:start="67:28" pos:end="67:38">DESC_P_MASK</name> <operator pos:start="67:40" pos:end="67:40">|</operator> <name pos:start="67:42" pos:end="67:52">DESC_S_MASK</name> <operator pos:start="67:54" pos:end="67:54">|</operator> <name pos:start="67:56" pos:end="67:67">DESC_CS_MASK</name> <operator pos:start="67:69" pos:end="67:69">|</operator>

                           <name pos:start="69:28" pos:end="69:38">DESC_R_MASK</name> <operator pos:start="69:40" pos:end="69:40">|</operator> <name pos:start="69:42" pos:end="69:52">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="75:40"><expr pos:start="71:5" pos:end="75:39"><call pos:start="71:5" pos:end="75:39"><name pos:start="71:5" pos:end="71:26">cpu_x86_load_seg_cache</name><argument_list pos:start="71:27" pos:end="75:39">(<argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">env</name></expr></argument>, <argument pos:start="71:33" pos:end="71:36"><expr pos:start="71:33" pos:end="71:36"><name pos:start="71:33" pos:end="71:36">R_DS</name></expr></argument>, <argument pos:start="71:39" pos:end="71:39"><expr pos:start="71:39" pos:end="71:39"><literal type="number" pos:start="71:39" pos:end="71:39">0</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:42"><expr pos:start="71:42" pos:end="71:42"><literal type="number" pos:start="71:42" pos:end="71:42">0</literal></expr></argument>, <argument pos:start="71:45" pos:end="71:50"><expr pos:start="71:45" pos:end="71:50"><literal type="number" pos:start="71:45" pos:end="71:50">0xffff</literal></expr></argument>,

                           <argument pos:start="73:28" pos:end="75:38"><expr pos:start="73:28" pos:end="75:38"><name pos:start="73:28" pos:end="73:38">DESC_P_MASK</name> <operator pos:start="73:40" pos:end="73:40">|</operator> <name pos:start="73:42" pos:end="73:52">DESC_S_MASK</name> <operator pos:start="73:54" pos:end="73:54">|</operator> <name pos:start="73:56" pos:end="73:66">DESC_W_MASK</name> <operator pos:start="73:68" pos:end="73:68">|</operator>

                           <name pos:start="75:28" pos:end="75:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="81:40"><expr pos:start="77:5" pos:end="81:39"><call pos:start="77:5" pos:end="81:39"><name pos:start="77:5" pos:end="77:26">cpu_x86_load_seg_cache</name><argument_list pos:start="77:27" pos:end="81:39">(<argument pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">env</name></expr></argument>, <argument pos:start="77:33" pos:end="77:36"><expr pos:start="77:33" pos:end="77:36"><name pos:start="77:33" pos:end="77:36">R_ES</name></expr></argument>, <argument pos:start="77:39" pos:end="77:39"><expr pos:start="77:39" pos:end="77:39"><literal type="number" pos:start="77:39" pos:end="77:39">0</literal></expr></argument>, <argument pos:start="77:42" pos:end="77:42"><expr pos:start="77:42" pos:end="77:42"><literal type="number" pos:start="77:42" pos:end="77:42">0</literal></expr></argument>, <argument pos:start="77:45" pos:end="77:50"><expr pos:start="77:45" pos:end="77:50"><literal type="number" pos:start="77:45" pos:end="77:50">0xffff</literal></expr></argument>,

                           <argument pos:start="79:28" pos:end="81:38"><expr pos:start="79:28" pos:end="81:38"><name pos:start="79:28" pos:end="79:38">DESC_P_MASK</name> <operator pos:start="79:40" pos:end="79:40">|</operator> <name pos:start="79:42" pos:end="79:52">DESC_S_MASK</name> <operator pos:start="79:54" pos:end="79:54">|</operator> <name pos:start="79:56" pos:end="79:66">DESC_W_MASK</name> <operator pos:start="79:68" pos:end="79:68">|</operator>

                           <name pos:start="81:28" pos:end="81:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="87:40"><expr pos:start="83:5" pos:end="87:39"><call pos:start="83:5" pos:end="87:39"><name pos:start="83:5" pos:end="83:26">cpu_x86_load_seg_cache</name><argument_list pos:start="83:27" pos:end="87:39">(<argument pos:start="83:28" pos:end="83:30"><expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:30">env</name></expr></argument>, <argument pos:start="83:33" pos:end="83:36"><expr pos:start="83:33" pos:end="83:36"><name pos:start="83:33" pos:end="83:36">R_SS</name></expr></argument>, <argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><literal type="number" pos:start="83:39" pos:end="83:39">0</literal></expr></argument>, <argument pos:start="83:42" pos:end="83:42"><expr pos:start="83:42" pos:end="83:42"><literal type="number" pos:start="83:42" pos:end="83:42">0</literal></expr></argument>, <argument pos:start="83:45" pos:end="83:50"><expr pos:start="83:45" pos:end="83:50"><literal type="number" pos:start="83:45" pos:end="83:50">0xffff</literal></expr></argument>,

                           <argument pos:start="85:28" pos:end="87:38"><expr pos:start="85:28" pos:end="87:38"><name pos:start="85:28" pos:end="85:38">DESC_P_MASK</name> <operator pos:start="85:40" pos:end="85:40">|</operator> <name pos:start="85:42" pos:end="85:52">DESC_S_MASK</name> <operator pos:start="85:54" pos:end="85:54">|</operator> <name pos:start="85:56" pos:end="85:66">DESC_W_MASK</name> <operator pos:start="85:68" pos:end="85:68">|</operator>

                           <name pos:start="87:28" pos:end="87:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="93:40"><expr pos:start="89:5" pos:end="93:39"><call pos:start="89:5" pos:end="93:39"><name pos:start="89:5" pos:end="89:26">cpu_x86_load_seg_cache</name><argument_list pos:start="89:27" pos:end="93:39">(<argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">env</name></expr></argument>, <argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">R_FS</name></expr></argument>, <argument pos:start="89:39" pos:end="89:39"><expr pos:start="89:39" pos:end="89:39"><literal type="number" pos:start="89:39" pos:end="89:39">0</literal></expr></argument>, <argument pos:start="89:42" pos:end="89:42"><expr pos:start="89:42" pos:end="89:42"><literal type="number" pos:start="89:42" pos:end="89:42">0</literal></expr></argument>, <argument pos:start="89:45" pos:end="89:50"><expr pos:start="89:45" pos:end="89:50"><literal type="number" pos:start="89:45" pos:end="89:50">0xffff</literal></expr></argument>,

                           <argument pos:start="91:28" pos:end="93:38"><expr pos:start="91:28" pos:end="93:38"><name pos:start="91:28" pos:end="91:38">DESC_P_MASK</name> <operator pos:start="91:40" pos:end="91:40">|</operator> <name pos:start="91:42" pos:end="91:52">DESC_S_MASK</name> <operator pos:start="91:54" pos:end="91:54">|</operator> <name pos:start="91:56" pos:end="91:66">DESC_W_MASK</name> <operator pos:start="91:68" pos:end="91:68">|</operator>

                           <name pos:start="93:28" pos:end="93:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="99:40"><expr pos:start="95:5" pos:end="99:39"><call pos:start="95:5" pos:end="99:39"><name pos:start="95:5" pos:end="95:26">cpu_x86_load_seg_cache</name><argument_list pos:start="95:27" pos:end="99:39">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">env</name></expr></argument>, <argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><name pos:start="95:33" pos:end="95:36">R_GS</name></expr></argument>, <argument pos:start="95:39" pos:end="95:39"><expr pos:start="95:39" pos:end="95:39"><literal type="number" pos:start="95:39" pos:end="95:39">0</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:42"><expr pos:start="95:42" pos:end="95:42"><literal type="number" pos:start="95:42" pos:end="95:42">0</literal></expr></argument>, <argument pos:start="95:45" pos:end="95:50"><expr pos:start="95:45" pos:end="95:50"><literal type="number" pos:start="95:45" pos:end="95:50">0xffff</literal></expr></argument>,

                           <argument pos:start="97:28" pos:end="99:38"><expr pos:start="97:28" pos:end="99:38"><name pos:start="97:28" pos:end="97:38">DESC_P_MASK</name> <operator pos:start="97:40" pos:end="97:40">|</operator> <name pos:start="97:42" pos:end="97:52">DESC_S_MASK</name> <operator pos:start="97:54" pos:end="97:54">|</operator> <name pos:start="97:56" pos:end="97:66">DESC_W_MASK</name> <operator pos:start="97:68" pos:end="97:68">|</operator>

                           <name pos:start="99:28" pos:end="99:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:7">env</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:12">eip</name></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <literal type="number" pos:start="103:16" pos:end="103:21">0xfff0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:7">env</name><operator pos:start="105:8" pos:end="105:9">-&gt;</operator><name pos:start="105:10" pos:end="105:13">regs</name><index pos:start="105:14" pos:end="105:20">[<expr pos:start="105:15" pos:end="105:19"><name pos:start="105:15" pos:end="105:19">R_EDX</name></expr>]</index></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:41"><name pos:start="105:24" pos:end="105:26">env</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:41">cpuid_version</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:22"><expr pos:start="109:5" pos:end="109:21"><name pos:start="109:5" pos:end="109:15"><name pos:start="109:5" pos:end="109:7">env</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:15">eflags</name></name> <operator pos:start="109:17" pos:end="109:17">=</operator> <literal type="number" pos:start="109:19" pos:end="109:21">0x2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:18">/* FPU init */</comment>

    <for pos:start="115:5" pos:end="119:5">for <control pos:start="115:9" pos:end="115:27">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:22"><expr pos:start="115:17" pos:end="115:21"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <literal type="number" pos:start="115:21" pos:end="115:21">8</literal></expr>;</condition> <incr pos:start="115:24" pos:end="115:26"><expr pos:start="115:24" pos:end="115:26"><name pos:start="115:24" pos:end="115:24">i</name><operator pos:start="115:25" pos:end="115:26">++</operator></expr></incr>)</control> <block pos:start="115:29" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:27">

        <expr_stmt pos:start="117:9" pos:end="117:27"><expr pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:11">env</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:19">fptags</name><index pos:start="117:20" pos:end="117:22">[<expr pos:start="117:21" pos:end="117:21"><name pos:start="117:21" pos:end="117:21">i</name></expr>]</index></name> <operator pos:start="117:24" pos:end="117:24">=</operator> <literal type="number" pos:start="117:26" pos:end="117:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="121:5" pos:end="121:29"><expr pos:start="121:5" pos:end="121:28"><call pos:start="121:5" pos:end="121:28"><name pos:start="121:5" pos:end="121:16">cpu_set_fpuc</name><argument_list pos:start="121:17" pos:end="121:28">(<argument pos:start="121:18" pos:end="121:20"><expr pos:start="121:18" pos:end="121:20"><name pos:start="121:18" pos:end="121:20">env</name></expr></argument>, <argument pos:start="121:23" pos:end="121:27"><expr pos:start="121:23" pos:end="121:27"><literal type="number" pos:start="121:23" pos:end="121:27">0x37f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:24"><expr pos:start="125:5" pos:end="125:23"><name pos:start="125:5" pos:end="125:14"><name pos:start="125:5" pos:end="125:7">env</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:14">mxcsr</name></name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:23">0x1f80</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="127:5" pos:end="127:39">/* All units are in INIT state.  */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:23"><expr pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:7">env</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:18">xstate_bv</name></name> <operator pos:start="129:20" pos:end="129:20">=</operator> <literal type="number" pos:start="129:22" pos:end="129:22">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:37"><expr pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:12"><name pos:start="133:5" pos:end="133:7">env</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:12">pat</name></name> <operator pos:start="133:14" pos:end="133:14">=</operator> <literal type="number" pos:start="133:16" pos:end="133:36">0x0007040600070406ULL</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:61"><expr pos:start="135:5" pos:end="135:60"><name pos:start="135:5" pos:end="135:29"><name pos:start="135:5" pos:end="135:7">env</name><operator pos:start="135:8" pos:end="135:9">-&gt;</operator><name pos:start="135:10" pos:end="135:29">msr_ia32_misc_enable</name></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <name pos:start="135:33" pos:end="135:60">MSR_IA32_MISC_ENABLE_DEFAULT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:40"><expr pos:start="139:5" pos:end="139:39"><call pos:start="139:5" pos:end="139:39"><name pos:start="139:5" pos:end="139:10">memset</name><argument_list pos:start="139:11" pos:end="139:39">(<argument pos:start="139:12" pos:end="139:18"><expr pos:start="139:12" pos:end="139:18"><name pos:start="139:12" pos:end="139:18"><name pos:start="139:12" pos:end="139:14">env</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:18">dr</name></name></expr></argument>, <argument pos:start="139:21" pos:end="139:21"><expr pos:start="139:21" pos:end="139:21"><literal type="number" pos:start="139:21" pos:end="139:21">0</literal></expr></argument>, <argument pos:start="139:24" pos:end="139:38"><expr pos:start="139:24" pos:end="139:38"><sizeof pos:start="139:24" pos:end="139:38">sizeof<argument_list pos:start="139:30" pos:end="139:38">(<argument pos:start="139:31" pos:end="139:37"><expr pos:start="139:31" pos:end="139:37"><name pos:start="139:31" pos:end="139:37"><name pos:start="139:31" pos:end="139:33">env</name><operator pos:start="139:34" pos:end="139:35">-&gt;</operator><name pos:start="139:36" pos:end="139:37">dr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:29"><expr pos:start="141:5" pos:end="141:28"><name pos:start="141:5" pos:end="141:14"><name pos:start="141:5" pos:end="141:7">env</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:11">dr</name><index pos:start="141:12" pos:end="141:14">[<expr pos:start="141:13" pos:end="141:13"><literal type="number" pos:start="141:13" pos:end="141:13">6</literal></expr>]</index></name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:28">DR6_FIXED_1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:29"><expr pos:start="143:5" pos:end="143:28"><name pos:start="143:5" pos:end="143:14"><name pos:start="143:5" pos:end="143:7">env</name><operator pos:start="143:8" pos:end="143:9">-&gt;</operator><name pos:start="143:10" pos:end="143:11">dr</name><index pos:start="143:12" pos:end="143:14">[<expr pos:start="143:13" pos:end="143:13"><literal type="number" pos:start="143:13" pos:end="143:13">7</literal></expr>]</index></name> <operator pos:start="143:16" pos:end="143:16">=</operator> <name pos:start="143:18" pos:end="143:28">DR7_FIXED_1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:41"><expr pos:start="145:5" pos:end="145:40"><call pos:start="145:5" pos:end="145:40"><name pos:start="145:5" pos:end="145:29">cpu_breakpoint_remove_all</name><argument_list pos:start="145:30" pos:end="145:40">(<argument pos:start="145:31" pos:end="145:31"><expr pos:start="145:31" pos:end="145:31"><name pos:start="145:31" pos:end="145:31">s</name></expr></argument>, <argument pos:start="145:34" pos:end="145:39"><expr pos:start="145:34" pos:end="145:39"><name pos:start="145:34" pos:end="145:39">BP_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:41"><expr pos:start="147:5" pos:end="147:40"><call pos:start="147:5" pos:end="147:40"><name pos:start="147:5" pos:end="147:29">cpu_watchpoint_remove_all</name><argument_list pos:start="147:30" pos:end="147:40">(<argument pos:start="147:31" pos:end="147:31"><expr pos:start="147:31" pos:end="147:31"><name pos:start="147:31" pos:end="147:31">s</name></expr></argument>, <argument pos:start="147:34" pos:end="147:39"><expr pos:start="147:34" pos:end="147:39"><name pos:start="147:34" pos:end="147:39">BP_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:12"><expr pos:start="151:5" pos:end="151:11"><name pos:start="151:5" pos:end="151:7">cr4</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <literal type="number" pos:start="151:11" pos:end="151:11">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="158:0"><expr pos:start="153:5" pos:end="153:25"><name pos:start="153:5" pos:end="153:8">xcr0</name> <operator pos:start="153:10" pos:end="153:10">=</operator> <name pos:start="153:12" pos:end="153:25">XSTATE_FP_MASK</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="157:1" pos:end="157:23">#<cpp:directive pos:start="157:2" pos:end="157:6">ifdef</cpp:directive> <name pos:start="157:8" pos:end="157:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <comment type="block" pos:start="159:5" pos:end="159:49">/* Enable all the features for user-mode.  */</comment>

    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:46">(<expr pos:start="161:9" pos:end="161:45"><name pos:start="161:9" pos:end="161:33"><name pos:start="161:9" pos:end="161:11">env</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:21">features</name><index pos:start="161:22" pos:end="161:33">[<expr pos:start="161:23" pos:end="161:32"><name pos:start="161:23" pos:end="161:32">FEAT_1_EDX</name></expr>]</index></name> <operator pos:start="161:35" pos:end="161:35">&amp;</operator> <name pos:start="161:37" pos:end="161:45">CPUID_SSE</name></expr>)</condition> <block pos:start="161:48" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:32">

        <expr_stmt pos:start="163:9" pos:end="163:32"><expr pos:start="163:9" pos:end="163:31"><name pos:start="163:9" pos:end="163:12">xcr0</name> <operator pos:start="163:14" pos:end="163:15">|=</operator> <name pos:start="163:17" pos:end="163:31">XSTATE_SSE_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="167:5" pos:end="177:5">for <control pos:start="167:9" pos:end="167:56">(<init pos:start="167:10" pos:end="167:15"><expr pos:start="167:10" pos:end="167:14"><name pos:start="167:10" pos:end="167:10">i</name> <operator pos:start="167:12" pos:end="167:12">=</operator> <literal type="number" pos:start="167:14" pos:end="167:14">2</literal></expr>;</init> <condition pos:start="167:17" pos:end="167:51"><expr pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:17">i</name> <operator pos:start="167:19" pos:end="167:19">&lt;</operator> <call pos:start="167:21" pos:end="167:50"><name pos:start="167:21" pos:end="167:30">ARRAY_SIZE</name><argument_list pos:start="167:31" pos:end="167:50">(<argument pos:start="167:32" pos:end="167:49"><expr pos:start="167:32" pos:end="167:49"><name pos:start="167:32" pos:end="167:49">x86_ext_save_areas</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="167:53" pos:end="167:55"><expr pos:start="167:53" pos:end="167:55"><name pos:start="167:53" pos:end="167:53">i</name><operator pos:start="167:54" pos:end="167:55">++</operator></expr></incr>)</control> <block pos:start="167:58" pos:end="177:5">{<block_content pos:start="169:9" pos:end="175:9">

        <decl_stmt pos:start="169:9" pos:end="169:56"><decl pos:start="169:9" pos:end="169:55"><type pos:start="169:9" pos:end="169:27"><specifier pos:start="169:9" pos:end="169:13">const</specifier> <name pos:start="169:15" pos:end="169:25">ExtSaveArea</name> <modifier pos:start="169:27" pos:end="169:27">*</modifier></type><name pos:start="169:28" pos:end="169:30">esa</name> <init pos:start="169:32" pos:end="169:55">= <expr pos:start="169:34" pos:end="169:55"><operator pos:start="169:34" pos:end="169:34">&amp;</operator><name pos:start="169:35" pos:end="169:55"><name pos:start="169:35" pos:end="169:52">x86_ext_save_areas</name><index pos:start="169:53" pos:end="169:55">[<expr pos:start="169:54" pos:end="169:54"><name pos:start="169:54" pos:end="169:54">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:67">(<expr pos:start="171:13" pos:end="171:66"><operator pos:start="171:13" pos:end="171:13">(</operator><name pos:start="171:14" pos:end="171:40"><name pos:start="171:14" pos:end="171:16">env</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:26">features</name><index pos:start="171:27" pos:end="171:40">[<expr pos:start="171:28" pos:end="171:39"><name pos:start="171:28" pos:end="171:39"><name pos:start="171:28" pos:end="171:30">esa</name><operator pos:start="171:31" pos:end="171:32">-&gt;</operator><name pos:start="171:33" pos:end="171:39">feature</name></name></expr>]</index></name> <operator pos:start="171:42" pos:end="171:42">&amp;</operator> <name pos:start="171:44" pos:end="171:52"><name pos:start="171:44" pos:end="171:46">esa</name><operator pos:start="171:47" pos:end="171:48">-&gt;</operator><name pos:start="171:49" pos:end="171:52">bits</name></name><operator pos:start="171:53" pos:end="171:53">)</operator> <operator pos:start="171:55" pos:end="171:56">==</operator> <name pos:start="171:58" pos:end="171:66"><name pos:start="171:58" pos:end="171:60">esa</name><operator pos:start="171:61" pos:end="171:62">-&gt;</operator><name pos:start="171:63" pos:end="171:66">bits</name></name></expr>)</condition> <block pos:start="171:69" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:30">

            <expr_stmt pos:start="173:13" pos:end="173:30"><expr pos:start="173:13" pos:end="173:29"><name pos:start="173:13" pos:end="173:16">xcr0</name> <operator pos:start="173:18" pos:end="173:19">|=</operator> <literal type="number" pos:start="173:21" pos:end="173:24">1ull</literal> <operator pos:start="173:26" pos:end="173:27">&lt;&lt;</operator> <name pos:start="173:29" pos:end="173:29">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="181:5" pos:end="185:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:52">(<expr pos:start="181:9" pos:end="181:51"><name pos:start="181:9" pos:end="181:33"><name pos:start="181:9" pos:end="181:11">env</name><operator pos:start="181:12" pos:end="181:13">-&gt;</operator><name pos:start="181:14" pos:end="181:21">features</name><index pos:start="181:22" pos:end="181:33">[<expr pos:start="181:23" pos:end="181:32"><name pos:start="181:23" pos:end="181:32">FEAT_1_ECX</name></expr>]</index></name> <operator pos:start="181:35" pos:end="181:35">&amp;</operator> <name pos:start="181:37" pos:end="181:51">CPUID_EXT_XSAVE</name></expr>)</condition> <block pos:start="181:54" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:50">

        <expr_stmt pos:start="183:9" pos:end="183:50"><expr pos:start="183:9" pos:end="183:49"><name pos:start="183:9" pos:end="183:11">cr4</name> <operator pos:start="183:13" pos:end="183:14">|=</operator> <name pos:start="183:16" pos:end="183:30">CR4_OSFXSR_MASK</name> <operator pos:start="183:32" pos:end="183:32">|</operator> <name pos:start="183:34" pos:end="183:49">CR4_OSXSAVE_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="194:0"><if pos:start="187:5" pos:end="194:0">if <condition pos:start="187:8" pos:end="187:61">(<expr pos:start="187:9" pos:end="187:60"><name pos:start="187:9" pos:end="187:35"><name pos:start="187:9" pos:end="187:11">env</name><operator pos:start="187:12" pos:end="187:13">-&gt;</operator><name pos:start="187:14" pos:end="187:21">features</name><index pos:start="187:22" pos:end="187:35">[<expr pos:start="187:23" pos:end="187:34"><name pos:start="187:23" pos:end="187:34">FEAT_7_0_EBX</name></expr>]</index></name> <operator pos:start="187:37" pos:end="187:37">&amp;</operator> <name pos:start="187:39" pos:end="187:60">CPUID_7_0_EBX_FSGSBASE</name></expr>)</condition> <block pos:start="187:63" pos:end="194:0">{<block_content pos:start="189:9" pos:end="189:33">

        <expr_stmt pos:start="189:9" pos:end="189:33"><expr pos:start="189:9" pos:end="189:32"><name pos:start="189:9" pos:end="189:11">cr4</name> <operator pos:start="189:13" pos:end="189:14">|=</operator> <name pos:start="189:16" pos:end="189:32">CR4_FSGSBASE_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="197:5" pos:end="197:21"><expr pos:start="197:5" pos:end="197:20"><name pos:start="197:5" pos:end="197:13"><name pos:start="197:5" pos:end="197:7">env</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:13">xcr0</name></name> <operator pos:start="197:15" pos:end="197:15">=</operator> <name pos:start="197:17" pos:end="197:20">xcr0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:33"><expr pos:start="199:5" pos:end="199:32"><call pos:start="199:5" pos:end="199:32"><name pos:start="199:5" pos:end="199:22">cpu_x86_update_cr4</name><argument_list pos:start="199:23" pos:end="199:32">(<argument pos:start="199:24" pos:end="199:26"><expr pos:start="199:24" pos:end="199:26"><name pos:start="199:24" pos:end="199:26">env</name></expr></argument>, <argument pos:start="199:29" pos:end="199:31"><expr pos:start="199:29" pos:end="199:31"><name pos:start="199:29" pos:end="199:31">cr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="213:7">/*

     * SDM 11.11.5 requires:

     *  - IA32_MTRR_DEF_TYPE MSR.E = 0

     *  - IA32_MTRR_PHYSMASKn.V = 0

     * All other bits are undefined.  For simplification, zero it all.

     */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:26"><expr pos:start="215:5" pos:end="215:25"><name pos:start="215:5" pos:end="215:21"><name pos:start="215:5" pos:end="215:7">env</name><operator pos:start="215:8" pos:end="215:9">-&gt;</operator><name pos:start="215:10" pos:end="215:21">mtrr_deftype</name></name> <operator pos:start="215:23" pos:end="215:23">=</operator> <literal type="number" pos:start="215:25" pos:end="215:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:52"><expr pos:start="217:5" pos:end="217:51"><call pos:start="217:5" pos:end="217:51"><name pos:start="217:5" pos:end="217:10">memset</name><argument_list pos:start="217:11" pos:end="217:51">(<argument pos:start="217:12" pos:end="217:24"><expr pos:start="217:12" pos:end="217:24"><name pos:start="217:12" pos:end="217:24"><name pos:start="217:12" pos:end="217:14">env</name><operator pos:start="217:15" pos:end="217:16">-&gt;</operator><name pos:start="217:17" pos:end="217:24">mtrr_var</name></name></expr></argument>, <argument pos:start="217:27" pos:end="217:27"><expr pos:start="217:27" pos:end="217:27"><literal type="number" pos:start="217:27" pos:end="217:27">0</literal></expr></argument>, <argument pos:start="217:30" pos:end="217:50"><expr pos:start="217:30" pos:end="217:50"><sizeof pos:start="217:30" pos:end="217:50">sizeof<argument_list pos:start="217:36" pos:end="217:50">(<argument pos:start="217:37" pos:end="217:49"><expr pos:start="217:37" pos:end="217:49"><name pos:start="217:37" pos:end="217:49"><name pos:start="217:37" pos:end="217:39">env</name><operator pos:start="217:40" pos:end="217:41">-&gt;</operator><name pos:start="217:42" pos:end="217:49">mtrr_var</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="224:0"><expr pos:start="219:5" pos:end="219:55"><call pos:start="219:5" pos:end="219:55"><name pos:start="219:5" pos:end="219:10">memset</name><argument_list pos:start="219:11" pos:end="219:55">(<argument pos:start="219:12" pos:end="219:26"><expr pos:start="219:12" pos:end="219:26"><name pos:start="219:12" pos:end="219:26"><name pos:start="219:12" pos:end="219:14">env</name><operator pos:start="219:15" pos:end="219:16">-&gt;</operator><name pos:start="219:17" pos:end="219:26">mtrr_fixed</name></name></expr></argument>, <argument pos:start="219:29" pos:end="219:29"><expr pos:start="219:29" pos:end="219:29"><literal type="number" pos:start="219:29" pos:end="219:29">0</literal></expr></argument>, <argument pos:start="219:32" pos:end="219:54"><expr pos:start="219:32" pos:end="219:54"><sizeof pos:start="219:32" pos:end="219:54">sizeof<argument_list pos:start="219:38" pos:end="219:54">(<argument pos:start="219:39" pos:end="219:53"><expr pos:start="219:39" pos:end="219:53"><name pos:start="219:39" pos:end="219:53"><name pos:start="219:39" pos:end="219:41">env</name><operator pos:start="219:42" pos:end="219:43">-&gt;</operator><name pos:start="219:44" pos:end="219:53">mtrr_fixed</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="223:1" pos:end="223:30">#<cpp:directive pos:start="223:2" pos:end="223:3">if</cpp:directive> <expr pos:start="223:5" pos:end="223:30"><operator pos:start="223:5" pos:end="223:5">!</operator><call pos:start="223:6" pos:end="223:30"><name pos:start="223:6" pos:end="223:12">defined</name><argument_list pos:start="223:13" pos:end="223:30">(<argument pos:start="223:14" pos:end="223:29"><expr pos:start="223:14" pos:end="223:29"><name pos:start="223:14" pos:end="223:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="225:5" pos:end="225:48">/* We hard-wire the BSP to the first CPU. */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:59"><expr pos:start="227:5" pos:end="227:58"><call pos:start="227:5" pos:end="227:58"><name pos:start="227:5" pos:end="227:22">apic_designate_bsp</name><argument_list pos:start="227:23" pos:end="227:58">(<argument pos:start="227:24" pos:end="227:38"><expr pos:start="227:24" pos:end="227:38"><name pos:start="227:24" pos:end="227:38"><name pos:start="227:24" pos:end="227:26">cpu</name><operator pos:start="227:27" pos:end="227:28">-&gt;</operator><name pos:start="227:29" pos:end="227:38">apic_state</name></name></expr></argument>, <argument pos:start="227:41" pos:end="227:57"><expr pos:start="227:41" pos:end="227:57"><name pos:start="227:41" pos:end="227:52"><name pos:start="227:41" pos:end="227:41">s</name><operator pos:start="227:42" pos:end="227:43">-&gt;</operator><name pos:start="227:44" pos:end="227:52">cpu_index</name></name> <operator pos:start="227:54" pos:end="227:55">==</operator> <literal type="number" pos:start="227:57" pos:end="227:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="231:5" pos:end="231:33"><expr pos:start="231:5" pos:end="231:32"><name pos:start="231:5" pos:end="231:13"><name pos:start="231:5" pos:end="231:5">s</name><operator pos:start="231:6" pos:end="231:7">-&gt;</operator><name pos:start="231:8" pos:end="231:13">halted</name></name> <operator pos:start="231:15" pos:end="231:15">=</operator> <operator pos:start="231:17" pos:end="231:17">!</operator><call pos:start="231:18" pos:end="231:32"><name pos:start="231:18" pos:end="231:27">cpu_is_bsp</name><argument_list pos:start="231:28" pos:end="231:32">(<argument pos:start="231:29" pos:end="231:31"><expr pos:start="231:29" pos:end="231:31"><name pos:start="231:29" pos:end="231:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="235:5" pos:end="242:0"><if pos:start="235:5" pos:end="242:0">if <condition pos:start="235:8" pos:end="235:22">(<expr pos:start="235:9" pos:end="235:21"><call pos:start="235:9" pos:end="235:21"><name pos:start="235:9" pos:end="235:19">kvm_enabled</name><argument_list pos:start="235:20" pos:end="235:21">()</argument_list></call></expr>)</condition> <block pos:start="235:24" pos:end="242:0">{<block_content pos:start="237:9" pos:end="237:33">

        <expr_stmt pos:start="237:9" pos:end="237:33"><expr pos:start="237:9" pos:end="237:32"><call pos:start="237:9" pos:end="237:32"><name pos:start="237:9" pos:end="237:27">kvm_arch_reset_vcpu</name><argument_list pos:start="237:28" pos:end="237:32">(<argument pos:start="237:29" pos:end="237:31"><expr pos:start="237:29" pos:end="237:31"><name pos:start="237:29" pos:end="237:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="241:1" pos:end="241:6">#<cpp:directive pos:start="241:2" pos:end="241:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
