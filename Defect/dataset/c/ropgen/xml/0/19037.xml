<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19037.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">tiff_unpack_strip</name><parameter_list pos:start="1:29" pos:end="1:111">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">TiffContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:52">uint8_t</name><modifier pos:start="1:53" pos:end="1:53">*</modifier></type> <name pos:start="1:55" pos:end="1:57">dst</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:69"><decl pos:start="1:60" pos:end="1:69"><type pos:start="1:60" pos:end="1:69"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:69">stride</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:89"><decl pos:start="1:72" pos:end="1:89"><type pos:start="1:72" pos:end="1:89"><specifier pos:start="1:72" pos:end="1:76">const</specifier> <name pos:start="1:78" pos:end="1:84">uint8_t</name> <modifier pos:start="1:86" pos:end="1:86">*</modifier></type><name pos:start="1:87" pos:end="1:89">src</name></decl></parameter>, <parameter pos:start="1:92" pos:end="1:99"><decl pos:start="1:92" pos:end="1:99"><type pos:start="1:92" pos:end="1:99"><name pos:start="1:92" pos:end="1:94">int</name></type> <name pos:start="1:96" pos:end="1:99">size</name></decl></parameter>, <parameter pos:start="1:102" pos:end="1:110"><decl pos:start="1:102" pos:end="1:110"><type pos:start="1:102" pos:end="1:110"><name pos:start="1:102" pos:end="1:104">int</name></type> <name pos:start="1:106" pos:end="1:110">lines</name></decl></parameter>)</parameter_list><block pos:start="1:112" pos:end="233:1">{<block_content pos:start="3:5" pos:end="231:13">

    <decl_stmt pos:start="3:5" pos:end="3:30"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">c</name></decl>, <decl pos:start="3:12" pos:end="3:15"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:12" pos:end="3:15">line</name></decl>, <decl pos:start="3:18" pos:end="3:23"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:18" pos:end="3:23">pixels</name></decl>, <decl pos:start="3:26" pos:end="3:29"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:26" pos:end="3:29">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">ssrc</name> <init pos:start="5:25" pos:end="5:29">= <expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">width</name> <init pos:start="7:15" pos:end="7:46">= <expr pos:start="7:17" pos:end="7:46"><operator pos:start="7:17" pos:end="7:17">(</operator><operator pos:start="7:18" pos:end="7:18">(</operator><name pos:start="7:19" pos:end="7:26"><name pos:start="7:19" pos:end="7:19">s</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:26">width</name></name> <operator pos:start="7:28" pos:end="7:28">*</operator> <name pos:start="7:30" pos:end="7:35"><name pos:start="7:30" pos:end="7:30">s</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:35">bpp</name></name><operator pos:start="7:36" pos:end="7:36">)</operator> <operator pos:start="7:38" pos:end="7:38">+</operator> <literal type="number" pos:start="7:40" pos:end="7:40">7</literal><operator pos:start="7:41" pos:end="7:41">)</operator> <operator pos:start="7:43" pos:end="7:44">&gt;&gt;</operator> <literal type="number" pos:start="7:46" pos:end="7:46">3</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:15">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">CONFIG_ZLIB</name></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">zbuf</name></decl>;</decl_stmt> <decl_stmt pos:start="11:20" pos:end="11:40"><decl pos:start="11:20" pos:end="11:39"><type pos:start="11:20" pos:end="11:32"><name pos:start="11:20" pos:end="11:27">unsigned</name> <name pos:start="11:29" pos:end="11:32">long</name></type> <name pos:start="11:34" pos:end="11:39">outlen</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="54:0"><if pos:start="15:5" pos:end="54:0">if<condition pos:start="15:7" pos:end="15:66">(<expr pos:start="15:8" pos:end="15:65"><name pos:start="15:8" pos:end="15:15"><name pos:start="15:8" pos:end="15:8">s</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:15">compr</name></name> <operator pos:start="15:17" pos:end="15:18">==</operator> <name pos:start="15:20" pos:end="15:31">TIFF_DEFLATE</name> <operator pos:start="15:33" pos:end="15:34">||</operator> <name pos:start="15:36" pos:end="15:43"><name pos:start="15:36" pos:end="15:36">s</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:43">compr</name></name> <operator pos:start="15:45" pos:end="15:46">==</operator> <name pos:start="15:48" pos:end="15:65">TIFF_ADOBE_DEFLATE</name></expr>)</condition><block pos:start="15:67" pos:end="54:0">{<block_content pos:start="17:9" pos:end="49:17">

        <decl_stmt pos:start="17:9" pos:end="17:16"><decl pos:start="17:9" pos:end="17:15"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:15">ret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:14">outlen</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:22">width</name> <operator pos:start="19:24" pos:end="19:24">*</operator> <name pos:start="19:26" pos:end="19:30">lines</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:33"><expr pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:12">zbuf</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:24">av_malloc</name><argument_list pos:start="21:25" pos:end="21:32">(<argument pos:start="21:26" pos:end="21:31"><expr pos:start="21:26" pos:end="21:31"><name pos:start="21:26" pos:end="21:31">outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:56"><expr pos:start="23:9" pos:end="23:55"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:55"><name pos:start="23:15" pos:end="23:29">tiff_uncompress</name><argument_list pos:start="23:30" pos:end="23:55">(<argument pos:start="23:31" pos:end="23:34"><expr pos:start="23:31" pos:end="23:34"><name pos:start="23:31" pos:end="23:34">zbuf</name></expr></argument>, <argument pos:start="23:37" pos:end="23:43"><expr pos:start="23:37" pos:end="23:43"><operator pos:start="23:37" pos:end="23:37">&amp;</operator><name pos:start="23:38" pos:end="23:43">outlen</name></expr></argument>, <argument pos:start="23:46" pos:end="23:48"><expr pos:start="23:46" pos:end="23:48"><name pos:start="23:46" pos:end="23:48">src</name></expr></argument>, <argument pos:start="23:51" pos:end="23:54"><expr pos:start="23:51" pos:end="23:54"><name pos:start="23:51" pos:end="23:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="33:9">if<condition pos:start="25:11" pos:end="25:23">(<expr pos:start="25:12" pos:end="25:22"><name pos:start="25:12" pos:end="25:14">ret</name> <operator pos:start="25:16" pos:end="25:17">!=</operator> <name pos:start="25:19" pos:end="25:22">Z_OK</name></expr>)</condition><block pos:start="25:24" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:22">

            <expr_stmt pos:start="27:13" pos:end="27:139"><expr pos:start="27:13" pos:end="27:138"><call pos:start="27:13" pos:end="27:138"><name pos:start="27:13" pos:end="27:18">av_log</name><argument_list pos:start="27:19" pos:end="27:138">(<argument pos:start="27:20" pos:end="27:27"><expr pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:20">s</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:27">avctx</name></name></expr></argument>, <argument pos:start="27:30" pos:end="27:41"><expr pos:start="27:30" pos:end="27:41"><name pos:start="27:30" pos:end="27:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:44" pos:end="27:94"><expr pos:start="27:44" pos:end="27:94"><literal type="string" pos:start="27:44" pos:end="27:94">"Uncompressing failed (%lu of %lu) with error %d\n"</literal></expr></argument>, <argument pos:start="27:97" pos:end="27:102"><expr pos:start="27:97" pos:end="27:102"><name pos:start="27:97" pos:end="27:102">outlen</name></expr></argument>, <argument pos:start="27:105" pos:end="27:132"><expr pos:start="27:105" pos:end="27:132"><operator pos:start="27:105" pos:end="27:105">(</operator><name pos:start="27:106" pos:end="27:113">unsigned</name> <name pos:start="27:115" pos:end="27:118">long</name><operator pos:start="27:119" pos:end="27:119">)</operator><name pos:start="27:120" pos:end="27:124">width</name> <operator pos:start="27:126" pos:end="27:126">*</operator> <name pos:start="27:128" pos:end="27:132">lines</name></expr></argument>, <argument pos:start="27:135" pos:end="27:137"><expr pos:start="27:135" pos:end="27:137"><name pos:start="27:135" pos:end="27:137">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:26"><expr pos:start="29:13" pos:end="29:25"><call pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:19">av_free</name><argument_list pos:start="29:20" pos:end="29:25">(<argument pos:start="29:21" pos:end="29:24"><expr pos:start="29:21" pos:end="29:24"><name pos:start="29:21" pos:end="29:24">zbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:19"><expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:11">src</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:18">zbuf</name></expr>;</expr_stmt>

        <for pos:start="37:9" pos:end="45:9">for<control pos:start="37:12" pos:end="37:43">(<init pos:start="37:13" pos:end="37:21"><expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:16">line</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</init> <condition pos:start="37:23" pos:end="37:35"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:26">line</name> <operator pos:start="37:28" pos:end="37:28">&lt;</operator> <name pos:start="37:30" pos:end="37:34">lines</name></expr>;</condition> <incr pos:start="37:37" pos:end="37:42"><expr pos:start="37:37" pos:end="37:42"><name pos:start="37:37" pos:end="37:40">line</name><operator pos:start="37:41" pos:end="37:42">++</operator></expr></incr>)</control><block pos:start="37:44" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:25">

            <expr_stmt pos:start="39:13" pos:end="39:36"><expr pos:start="39:13" pos:end="39:35"><call pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:18">memcpy</name><argument_list pos:start="39:19" pos:end="39:35">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">dst</name></expr></argument>, <argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">src</name></expr></argument>, <argument pos:start="39:30" pos:end="39:34"><expr pos:start="39:30" pos:end="39:34"><name pos:start="39:30" pos:end="39:34">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:26"><expr pos:start="41:13" pos:end="41:25"><name pos:start="41:13" pos:end="41:15">dst</name> <operator pos:start="41:17" pos:end="41:18">+=</operator> <name pos:start="41:20" pos:end="41:25">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:15">src</name> <operator pos:start="43:17" pos:end="43:18">+=</operator> <name pos:start="43:20" pos:end="43:24">width</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="47:9" pos:end="47:22"><expr pos:start="47:9" pos:end="47:21"><call pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:15">av_free</name><argument_list pos:start="47:16" pos:end="47:21">(<argument pos:start="47:17" pos:end="47:20"><expr pos:start="47:17" pos:end="47:20"><name pos:start="47:17" pos:end="47:20">zbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if<condition pos:start="55:7" pos:end="55:28">(<expr pos:start="55:8" pos:end="55:27"><name pos:start="55:8" pos:end="55:15"><name pos:start="55:8" pos:end="55:8">s</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:15">compr</name></name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:27">TIFF_LZW</name></expr>)</condition><block pos:start="55:29" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:9">

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if<condition pos:start="57:11" pos:end="57:69">(<expr pos:start="57:12" pos:end="57:68"><call pos:start="57:12" pos:end="57:64"><name pos:start="57:12" pos:end="57:29">ff_lzw_decode_init</name><argument_list pos:start="57:30" pos:end="57:64">(<argument pos:start="57:31" pos:end="57:36"><expr pos:start="57:31" pos:end="57:36"><name pos:start="57:31" pos:end="57:36"><name pos:start="57:31" pos:end="57:31">s</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:36">lzw</name></name></expr></argument>, <argument pos:start="57:39" pos:end="57:39"><expr pos:start="57:39" pos:end="57:39"><literal type="number" pos:start="57:39" pos:end="57:39">8</literal></expr></argument>, <argument pos:start="57:42" pos:end="57:44"><expr pos:start="57:42" pos:end="57:44"><name pos:start="57:42" pos:end="57:44">src</name></expr></argument>, <argument pos:start="57:47" pos:end="57:50"><expr pos:start="57:47" pos:end="57:50"><name pos:start="57:47" pos:end="57:50">size</name></expr></argument>, <argument pos:start="57:53" pos:end="57:63"><expr pos:start="57:53" pos:end="57:63"><name pos:start="57:53" pos:end="57:63">FF_LZW_TIFF</name></expr></argument>)</argument_list></call> <operator pos:start="57:66" pos:end="57:66">&lt;</operator> <literal type="number" pos:start="57:68" pos:end="57:68">0</literal></expr>)</condition><block pos:start="57:70" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:22">

            <expr_stmt pos:start="59:13" pos:end="59:79"><expr pos:start="59:13" pos:end="59:78"><call pos:start="59:13" pos:end="59:78"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="59:78">(<argument pos:start="59:20" pos:end="59:27"><expr pos:start="59:20" pos:end="59:27"><name pos:start="59:20" pos:end="59:27"><name pos:start="59:20" pos:end="59:20">s</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:27">avctx</name></name></expr></argument>, <argument pos:start="59:30" pos:end="59:41"><expr pos:start="59:30" pos:end="59:41"><name pos:start="59:30" pos:end="59:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:44" pos:end="59:77"><expr pos:start="59:44" pos:end="59:77"><literal type="string" pos:start="59:44" pos:end="59:77">"Error initializing LZW decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:22">return <expr pos:start="61:20" pos:end="61:21"><operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="125:5"><if pos:start="67:5" pos:end="125:5">if<condition pos:start="67:7" pos:end="67:80">(<expr pos:start="67:8" pos:end="67:79"><name pos:start="67:8" pos:end="67:15"><name pos:start="67:8" pos:end="67:8">s</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:15">compr</name></name> <operator pos:start="67:17" pos:end="67:18">==</operator> <name pos:start="67:20" pos:end="67:33">TIFF_CCITT_RLE</name> <operator pos:start="67:35" pos:end="67:36">||</operator> <name pos:start="67:38" pos:end="67:45"><name pos:start="67:38" pos:end="67:38">s</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:45">compr</name></name> <operator pos:start="67:47" pos:end="67:48">==</operator> <name pos:start="67:50" pos:end="67:56">TIFF_G3</name> <operator pos:start="67:58" pos:end="67:59">||</operator> <name pos:start="67:61" pos:end="67:68"><name pos:start="67:61" pos:end="67:61">s</name><operator pos:start="67:62" pos:end="67:63">-&gt;</operator><name pos:start="67:64" pos:end="67:68">compr</name></name> <operator pos:start="67:70" pos:end="67:71">==</operator> <name pos:start="67:73" pos:end="67:79">TIFF_G4</name></expr>)</condition><block pos:start="67:81" pos:end="125:5">{<block_content pos:start="69:9" pos:end="123:19">

        <decl_stmt pos:start="69:9" pos:end="69:23"><decl pos:start="69:9" pos:end="69:13"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:13">i</name></decl>, <decl pos:start="69:16" pos:end="69:22"><type ref="prev" pos:start="69:9" pos:end="69:11"/><name pos:start="69:16" pos:end="69:18">ret</name> <init pos:start="69:20" pos:end="69:22">= <expr pos:start="69:22" pos:end="69:22"><literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:71"><decl pos:start="71:9" pos:end="71:70"><type pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:15">uint8_t</name> <modifier pos:start="71:17" pos:end="71:17">*</modifier></type><name pos:start="71:18" pos:end="71:21">src2</name> <init pos:start="71:23" pos:end="71:70">= <expr pos:start="71:25" pos:end="71:70"><call pos:start="71:25" pos:end="71:70"><name pos:start="71:25" pos:end="71:33">av_malloc</name><argument_list pos:start="71:34" pos:end="71:70">(<argument pos:start="71:35" pos:end="71:69"><expr pos:start="71:35" pos:end="71:69"><name pos:start="71:35" pos:end="71:38">size</name> <operator pos:start="71:40" pos:end="71:40">+</operator> <name pos:start="71:42" pos:end="71:69">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if<condition pos:start="75:11" pos:end="75:83">(<expr pos:start="75:12" pos:end="75:82"><operator pos:start="75:12" pos:end="75:12">!</operator><name pos:start="75:13" pos:end="75:16">src2</name> <operator pos:start="75:18" pos:end="75:19">||</operator> <operator pos:start="75:21" pos:end="75:21">(</operator><name pos:start="75:22" pos:end="75:29">unsigned</name><operator pos:start="75:30" pos:end="75:30">)</operator><name pos:start="75:31" pos:end="75:34">size</name> <operator pos:start="75:36" pos:end="75:36">+</operator> <name pos:start="75:38" pos:end="75:65">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="75:67" pos:end="75:67">&lt;</operator> <operator pos:start="75:69" pos:end="75:69">(</operator><name pos:start="75:70" pos:end="75:77">unsigned</name><operator pos:start="75:78" pos:end="75:78">)</operator><name pos:start="75:79" pos:end="75:82">size</name></expr>)</condition><block pos:start="75:84" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:22">

            <expr_stmt pos:start="77:13" pos:end="77:82"><expr pos:start="77:13" pos:end="77:81"><call pos:start="77:13" pos:end="77:81"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:81">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:20">s</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:27">avctx</name></name></expr></argument>, <argument pos:start="77:30" pos:end="77:41"><expr pos:start="77:30" pos:end="77:41"><name pos:start="77:30" pos:end="77:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:44" pos:end="77:80"><expr pos:start="77:44" pos:end="77:80"><literal type="string" pos:start="77:44" pos:end="77:80">"Error allocating temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if<condition pos:start="83:11" pos:end="83:27">(<expr pos:start="83:12" pos:end="83:26"><name pos:start="83:12" pos:end="83:22"><name pos:start="83:12" pos:end="83:12">s</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:22">fax_opts</name></name> <operator pos:start="83:24" pos:end="83:24">&amp;</operator> <literal type="number" pos:start="83:26" pos:end="83:26">2</literal></expr>)</condition><block pos:start="83:28" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:22">

            <expr_stmt pos:start="85:13" pos:end="85:93"><expr pos:start="85:13" pos:end="85:92"><call pos:start="85:13" pos:end="85:92"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="85:92">(<argument pos:start="85:20" pos:end="85:27"><expr pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:27">avctx</name></name></expr></argument>, <argument pos:start="85:30" pos:end="85:41"><expr pos:start="85:30" pos:end="85:41"><name pos:start="85:30" pos:end="85:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:44" pos:end="85:91"><expr pos:start="85:44" pos:end="85:91"><literal type="string" pos:start="85:44" pos:end="85:91">"Uncompressed fax mode is not supported (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:26"><expr pos:start="87:13" pos:end="87:25"><call pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:19">av_free</name><argument_list pos:start="87:20" pos:end="87:25">(<argument pos:start="87:21" pos:end="87:24"><expr pos:start="87:21" pos:end="87:24"><name pos:start="87:21" pos:end="87:24">src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="97:9">if<condition pos:start="93:11" pos:end="93:26">(<expr pos:start="93:12" pos:end="93:25"><operator pos:start="93:12" pos:end="93:12">!</operator><name pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:25">fill_order</name></name></expr>)</condition><block pos:start="93:27" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:36">

            <expr_stmt pos:start="95:13" pos:end="95:36"><expr pos:start="95:13" pos:end="95:35"><call pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:18">memcpy</name><argument_list pos:start="95:19" pos:end="95:35">(<argument pos:start="95:20" pos:end="95:23"><expr pos:start="95:20" pos:end="95:23"><name pos:start="95:20" pos:end="95:23">src2</name></expr></argument>, <argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><name pos:start="95:26" pos:end="95:28">src</name></expr></argument>, <argument pos:start="95:31" pos:end="95:34"><expr pos:start="95:31" pos:end="95:34"><name pos:start="95:31" pos:end="95:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="97:10" pos:end="103:9">else<block pos:start="97:14" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:45">

            <for pos:start="99:13" pos:end="101:45">for<control pos:start="99:16" pos:end="99:37">(<init pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:21"><name pos:start="99:17" pos:end="99:17">i</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <literal type="number" pos:start="99:21" pos:end="99:21">0</literal></expr>;</init> <condition pos:start="99:24" pos:end="99:32"><expr pos:start="99:24" pos:end="99:31"><name pos:start="99:24" pos:end="99:24">i</name> <operator pos:start="99:26" pos:end="99:26">&lt;</operator> <name pos:start="99:28" pos:end="99:31">size</name></expr>;</condition> <incr pos:start="99:34" pos:end="99:36"><expr pos:start="99:34" pos:end="99:36"><name pos:start="99:34" pos:end="99:34">i</name><operator pos:start="99:35" pos:end="99:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="101:17" pos:end="101:45"><block_content pos:start="101:17" pos:end="101:45">

                <expr_stmt pos:start="101:17" pos:end="101:45"><expr pos:start="101:17" pos:end="101:44"><name pos:start="101:17" pos:end="101:23"><name pos:start="101:17" pos:end="101:20">src2</name><index pos:start="101:21" pos:end="101:23">[<expr pos:start="101:22" pos:end="101:22"><name pos:start="101:22" pos:end="101:22">i</name></expr>]</index></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <name pos:start="101:27" pos:end="101:44"><name pos:start="101:27" pos:end="101:36">av_reverse</name><index pos:start="101:37" pos:end="101:44">[<expr pos:start="101:38" pos:end="101:43"><name pos:start="101:38" pos:end="101:43"><name pos:start="101:38" pos:end="101:40">src</name><index pos:start="101:41" pos:end="101:43">[<expr pos:start="101:42" pos:end="101:42"><name pos:start="101:42" pos:end="101:42">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><call pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:14">memset</name><argument_list pos:start="105:15" pos:end="105:58">(<argument pos:start="105:16" pos:end="105:24"><expr pos:start="105:16" pos:end="105:24"><name pos:start="105:16" pos:end="105:19">src2</name><operator pos:start="105:20" pos:end="105:20">+</operator><name pos:start="105:21" pos:end="105:24">size</name></expr></argument>, <argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><literal type="number" pos:start="105:27" pos:end="105:27">0</literal></expr></argument>, <argument pos:start="105:30" pos:end="105:57"><expr pos:start="105:30" pos:end="105:57"><name pos:start="105:30" pos:end="105:57">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="107:9" pos:end="119:9">switch<condition pos:start="107:15" pos:end="107:24">(<expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:16">s</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:23">compr</name></name></expr>)</condition><block pos:start="107:25" pos:end="119:9">{<block_content pos:start="109:9" pos:end="117:18">

        <case pos:start="109:9" pos:end="109:28">case <expr pos:start="109:14" pos:end="109:27"><name pos:start="109:14" pos:end="109:27">TIFF_CCITT_RLE</name></expr>:</case>

        <case pos:start="111:9" pos:end="111:21">case <expr pos:start="111:14" pos:end="111:20"><name pos:start="111:14" pos:end="111:20">TIFF_G3</name></expr>:</case>

        <case pos:start="113:9" pos:end="113:21">case <expr pos:start="113:14" pos:end="113:20"><name pos:start="113:14" pos:end="113:20">TIFF_G4</name></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:99"><expr pos:start="115:13" pos:end="115:98"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:98"><name pos:start="115:19" pos:end="115:33">ff_ccitt_unpack</name><argument_list pos:start="115:34" pos:end="115:98">(<argument pos:start="115:35" pos:end="115:42"><expr pos:start="115:35" pos:end="115:42"><name pos:start="115:35" pos:end="115:42"><name pos:start="115:35" pos:end="115:35">s</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:42">avctx</name></name></expr></argument>, <argument pos:start="115:45" pos:end="115:48"><expr pos:start="115:45" pos:end="115:48"><name pos:start="115:45" pos:end="115:48">src2</name></expr></argument>, <argument pos:start="115:51" pos:end="115:54"><expr pos:start="115:51" pos:end="115:54"><name pos:start="115:51" pos:end="115:54">size</name></expr></argument>, <argument pos:start="115:57" pos:end="115:59"><expr pos:start="115:57" pos:end="115:59"><name pos:start="115:57" pos:end="115:59">dst</name></expr></argument>, <argument pos:start="115:62" pos:end="115:66"><expr pos:start="115:62" pos:end="115:66"><name pos:start="115:62" pos:end="115:66">lines</name></expr></argument>, <argument pos:start="115:69" pos:end="115:74"><expr pos:start="115:69" pos:end="115:74"><name pos:start="115:69" pos:end="115:74">stride</name></expr></argument>, <argument pos:start="115:77" pos:end="115:84"><expr pos:start="115:77" pos:end="115:84"><name pos:start="115:77" pos:end="115:84"><name pos:start="115:77" pos:end="115:77">s</name><operator pos:start="115:78" pos:end="115:79">-&gt;</operator><name pos:start="115:80" pos:end="115:84">compr</name></name></expr></argument>, <argument pos:start="115:87" pos:end="115:97"><expr pos:start="115:87" pos:end="115:97"><name pos:start="115:87" pos:end="115:97"><name pos:start="115:87" pos:end="115:87">s</name><operator pos:start="115:88" pos:end="115:89">-&gt;</operator><name pos:start="115:90" pos:end="115:97">fax_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="121:9" pos:end="121:22"><expr pos:start="121:9" pos:end="121:21"><call pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:15">av_free</name><argument_list pos:start="121:16" pos:end="121:21">(<argument pos:start="121:17" pos:end="121:20"><expr pos:start="121:17" pos:end="121:20"><name pos:start="121:17" pos:end="121:20">src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:19">return <expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="127:5" pos:end="229:5">for<control pos:start="127:8" pos:end="127:39">(<init pos:start="127:9" pos:end="127:17"><expr pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:12">line</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <literal type="number" pos:start="127:16" pos:end="127:16">0</literal></expr>;</init> <condition pos:start="127:19" pos:end="127:31"><expr pos:start="127:19" pos:end="127:30"><name pos:start="127:19" pos:end="127:22">line</name> <operator pos:start="127:24" pos:end="127:24">&lt;</operator> <name pos:start="127:26" pos:end="127:30">lines</name></expr>;</condition> <incr pos:start="127:33" pos:end="127:38"><expr pos:start="127:33" pos:end="127:38"><name pos:start="127:33" pos:end="127:36">line</name><operator pos:start="127:37" pos:end="127:38">++</operator></expr></incr>)</control><block pos:start="127:40" pos:end="229:5">{<block_content pos:start="129:9" pos:end="227:22">

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if<condition pos:start="129:11" pos:end="129:29">(<expr pos:start="129:12" pos:end="129:28"><name pos:start="129:12" pos:end="129:14">src</name> <operator pos:start="129:16" pos:end="129:16">-</operator> <name pos:start="129:18" pos:end="129:21">ssrc</name> <operator pos:start="129:23" pos:end="129:23">&gt;</operator> <name pos:start="129:25" pos:end="129:28">size</name></expr>)</condition><block pos:start="129:30" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:69"><expr pos:start="131:13" pos:end="131:68"><call pos:start="131:13" pos:end="131:68"><name pos:start="131:13" pos:end="131:18">av_log</name><argument_list pos:start="131:19" pos:end="131:68">(<argument pos:start="131:20" pos:end="131:27"><expr pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:20">s</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:27">avctx</name></name></expr></argument>, <argument pos:start="131:30" pos:end="131:41"><expr pos:start="131:30" pos:end="131:41"><name pos:start="131:30" pos:end="131:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:44" pos:end="131:67"><expr pos:start="131:44" pos:end="131:67"><literal type="string" pos:start="131:44" pos:end="131:67">"Source data overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:22">return <expr pos:start="133:20" pos:end="133:21"><operator pos:start="133:20" pos:end="133:20">-</operator><literal type="number" pos:start="133:21" pos:end="133:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="137:9" pos:end="225:9">switch<condition pos:start="137:15" pos:end="137:24">(<expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:16">s</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:23">compr</name></name></expr>)</condition><block pos:start="137:25" pos:end="225:9">{<block_content pos:start="139:9" pos:end="223:18">

        <case pos:start="139:9" pos:end="139:22">case <expr pos:start="139:14" pos:end="139:21"><name pos:start="139:14" pos:end="139:21">TIFF_RAW</name></expr>:</case>

            <if_stmt pos:start="141:13" pos:end="143:43"><if pos:start="141:13" pos:end="143:43">if <condition pos:start="141:16" pos:end="141:42">(<expr pos:start="141:17" pos:end="141:41"><name pos:start="141:17" pos:end="141:20">ssrc</name> <operator pos:start="141:22" pos:end="141:22">+</operator> <name pos:start="141:24" pos:end="141:27">size</name> <operator pos:start="141:29" pos:end="141:29">-</operator> <name pos:start="141:31" pos:end="141:33">src</name> <operator pos:start="141:35" pos:end="141:35">&lt;</operator> <name pos:start="141:37" pos:end="141:41">width</name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:43"><block_content pos:start="143:17" pos:end="143:43">

                <return pos:start="143:17" pos:end="143:43">return <expr pos:start="143:24" pos:end="143:42"><name pos:start="143:24" pos:end="143:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="145:13" pos:end="157:13"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:31">(<expr pos:start="145:17" pos:end="145:30"><operator pos:start="145:17" pos:end="145:17">!</operator><name pos:start="145:18" pos:end="145:30"><name pos:start="145:18" pos:end="145:18">s</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:30">fill_order</name></name></expr>)</condition> <block pos:start="145:33" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:40">

                <expr_stmt pos:start="147:17" pos:end="147:40"><expr pos:start="147:17" pos:end="147:39"><call pos:start="147:17" pos:end="147:39"><name pos:start="147:17" pos:end="147:22">memcpy</name><argument_list pos:start="147:23" pos:end="147:39">(<argument pos:start="147:24" pos:end="147:26"><expr pos:start="147:24" pos:end="147:26"><name pos:start="147:24" pos:end="147:26">dst</name></expr></argument>, <argument pos:start="147:29" pos:end="147:31"><expr pos:start="147:29" pos:end="147:31"><name pos:start="147:29" pos:end="147:31">src</name></expr></argument>, <argument pos:start="147:34" pos:end="147:38"><expr pos:start="147:34" pos:end="147:38"><name pos:start="147:34" pos:end="147:38">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="149:15" pos:end="157:13">else <block pos:start="149:20" pos:end="157:13">{<block_content pos:start="151:17" pos:end="155:48">

                <decl_stmt pos:start="151:17" pos:end="151:22"><decl pos:start="151:17" pos:end="151:21"><type pos:start="151:17" pos:end="151:19"><name pos:start="151:17" pos:end="151:19">int</name></type> <name pos:start="151:21" pos:end="151:21">i</name></decl>;</decl_stmt>

                <for pos:start="153:17" pos:end="155:48">for <control pos:start="153:21" pos:end="153:43">(<init pos:start="153:22" pos:end="153:27"><expr pos:start="153:22" pos:end="153:26"><name pos:start="153:22" pos:end="153:22">i</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <literal type="number" pos:start="153:26" pos:end="153:26">0</literal></expr>;</init> <condition pos:start="153:29" pos:end="153:38"><expr pos:start="153:29" pos:end="153:37"><name pos:start="153:29" pos:end="153:29">i</name> <operator pos:start="153:31" pos:end="153:31">&lt;</operator> <name pos:start="153:33" pos:end="153:37">width</name></expr>;</condition> <incr pos:start="153:40" pos:end="153:42"><expr pos:start="153:40" pos:end="153:42"><name pos:start="153:40" pos:end="153:40">i</name><operator pos:start="153:41" pos:end="153:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="155:21" pos:end="155:48"><block_content pos:start="155:21" pos:end="155:48">

                    <expr_stmt pos:start="155:21" pos:end="155:48"><expr pos:start="155:21" pos:end="155:47"><name pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:23">dst</name><index pos:start="155:24" pos:end="155:26">[<expr pos:start="155:25" pos:end="155:25"><name pos:start="155:25" pos:end="155:25">i</name></expr>]</index></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <name pos:start="155:30" pos:end="155:47"><name pos:start="155:30" pos:end="155:39">av_reverse</name><index pos:start="155:40" pos:end="155:47">[<expr pos:start="155:41" pos:end="155:46"><name pos:start="155:41" pos:end="155:46"><name pos:start="155:41" pos:end="155:43">src</name><index pos:start="155:44" pos:end="155:46">[<expr pos:start="155:45" pos:end="155:45"><name pos:start="155:45" pos:end="155:45">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:25"><expr pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:15">src</name> <operator pos:start="159:17" pos:end="159:18">+=</operator> <name pos:start="159:20" pos:end="159:24">width</name></expr>;</expr_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>

        <case pos:start="163:9" pos:end="163:27">case <expr pos:start="163:14" pos:end="163:26"><name pos:start="163:14" pos:end="163:26">TIFF_PACKBITS</name></expr>:</case>

            <for pos:start="165:13" pos:end="207:13">for<control pos:start="165:16" pos:end="165:44">(<init pos:start="165:17" pos:end="165:27"><expr pos:start="165:17" pos:end="165:26"><name pos:start="165:17" pos:end="165:22">pixels</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <literal type="number" pos:start="165:26" pos:end="165:26">0</literal></expr>;</init> <condition pos:start="165:29" pos:end="165:43"><expr pos:start="165:29" pos:end="165:42"><name pos:start="165:29" pos:end="165:34">pixels</name> <operator pos:start="165:36" pos:end="165:36">&lt;</operator> <name pos:start="165:38" pos:end="165:42">width</name></expr>;</condition><incr/>)</control><block pos:start="165:45" pos:end="207:13">{<block_content pos:start="167:17" pos:end="205:17">

                <expr_stmt pos:start="167:17" pos:end="167:38"><expr pos:start="167:17" pos:end="167:37"><name pos:start="167:17" pos:end="167:20">code</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <operator pos:start="167:24" pos:end="167:24">(</operator><name pos:start="167:25" pos:end="167:30">int8_t</name><operator pos:start="167:31" pos:end="167:31">)</operator><operator pos:start="167:32" pos:end="167:32">*</operator><name pos:start="167:33" pos:end="167:35">src</name><operator pos:start="167:36" pos:end="167:37">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="169:17" pos:end="205:17"><if pos:start="169:17" pos:end="187:17">if<condition pos:start="169:19" pos:end="169:29">(<expr pos:start="169:20" pos:end="169:28"><name pos:start="169:20" pos:end="169:23">code</name> <operator pos:start="169:25" pos:end="169:26">&gt;=</operator> <literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr>)</condition><block pos:start="169:30" pos:end="187:17">{<block_content pos:start="171:21" pos:end="185:35">

                    <expr_stmt pos:start="171:21" pos:end="171:27"><expr pos:start="171:21" pos:end="171:26"><name pos:start="171:21" pos:end="171:24">code</name><operator pos:start="171:25" pos:end="171:26">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="173:21" pos:end="179:21"><if pos:start="173:21" pos:end="179:21">if<condition pos:start="173:23" pos:end="173:45">(<expr pos:start="173:24" pos:end="173:44"><name pos:start="173:24" pos:end="173:29">pixels</name> <operator pos:start="173:31" pos:end="173:31">+</operator> <name pos:start="173:33" pos:end="173:36">code</name> <operator pos:start="173:38" pos:end="173:38">&gt;</operator> <name pos:start="173:40" pos:end="173:44">width</name></expr>)</condition><block pos:start="173:46" pos:end="179:21">{<block_content pos:start="175:25" pos:end="177:34">

                        <expr_stmt pos:start="175:25" pos:end="175:84"><expr pos:start="175:25" pos:end="175:83"><call pos:start="175:25" pos:end="175:83"><name pos:start="175:25" pos:end="175:30">av_log</name><argument_list pos:start="175:31" pos:end="175:83">(<argument pos:start="175:32" pos:end="175:39"><expr pos:start="175:32" pos:end="175:39"><name pos:start="175:32" pos:end="175:39"><name pos:start="175:32" pos:end="175:32">s</name><operator pos:start="175:33" pos:end="175:34">-&gt;</operator><name pos:start="175:35" pos:end="175:39">avctx</name></name></expr></argument>, <argument pos:start="175:42" pos:end="175:53"><expr pos:start="175:42" pos:end="175:53"><name pos:start="175:42" pos:end="175:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:56" pos:end="175:82"><expr pos:start="175:56" pos:end="175:82"><literal type="string" pos:start="175:56" pos:end="175:82">"Copy went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="177:25" pos:end="177:34">return <expr pos:start="177:32" pos:end="177:33"><operator pos:start="177:32" pos:end="177:32">-</operator><literal type="number" pos:start="177:33" pos:end="177:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:52"><expr pos:start="181:21" pos:end="181:51"><call pos:start="181:21" pos:end="181:51"><name pos:start="181:21" pos:end="181:26">memcpy</name><argument_list pos:start="181:27" pos:end="181:51">(<argument pos:start="181:28" pos:end="181:39"><expr pos:start="181:28" pos:end="181:39"><name pos:start="181:28" pos:end="181:30">dst</name> <operator pos:start="181:32" pos:end="181:32">+</operator> <name pos:start="181:34" pos:end="181:39">pixels</name></expr></argument>, <argument pos:start="181:42" pos:end="181:44"><expr pos:start="181:42" pos:end="181:44"><name pos:start="181:42" pos:end="181:44">src</name></expr></argument>, <argument pos:start="181:47" pos:end="181:50"><expr pos:start="181:47" pos:end="181:50"><name pos:start="181:47" pos:end="181:50">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:32"><expr pos:start="183:21" pos:end="183:31"><name pos:start="183:21" pos:end="183:23">src</name> <operator pos:start="183:25" pos:end="183:26">+=</operator> <name pos:start="183:28" pos:end="183:31">code</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:35"><expr pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:26">pixels</name> <operator pos:start="185:28" pos:end="185:29">+=</operator> <name pos:start="185:31" pos:end="185:34">code</name></expr>;</expr_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="187:18" pos:end="205:17">else if<condition pos:start="187:25" pos:end="187:38">(<expr pos:start="187:26" pos:end="187:37"><name pos:start="187:26" pos:end="187:29">code</name> <operator pos:start="187:31" pos:end="187:32">!=</operator> <operator pos:start="187:34" pos:end="187:34">-</operator><literal type="number" pos:start="187:35" pos:end="187:37">128</literal></expr>)</condition><block pos:start="187:39" pos:end="205:17">{<block_content pos:start="189:21" pos:end="203:35"> <comment type="line" pos:start="187:41" pos:end="187:51">// -127..-1</comment>

                    <expr_stmt pos:start="189:21" pos:end="189:39"><expr pos:start="189:21" pos:end="189:38"><name pos:start="189:21" pos:end="189:24">code</name> <operator pos:start="189:26" pos:end="189:26">=</operator> <operator pos:start="189:28" pos:end="189:28">(</operator><operator pos:start="189:29" pos:end="189:29">-</operator><name pos:start="189:30" pos:end="189:33">code</name><operator pos:start="189:34" pos:end="189:34">)</operator> <operator pos:start="189:36" pos:end="189:36">+</operator> <literal type="number" pos:start="189:38" pos:end="189:38">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="191:21" pos:end="197:21"><if pos:start="191:21" pos:end="197:21">if<condition pos:start="191:23" pos:end="191:45">(<expr pos:start="191:24" pos:end="191:44"><name pos:start="191:24" pos:end="191:29">pixels</name> <operator pos:start="191:31" pos:end="191:31">+</operator> <name pos:start="191:33" pos:end="191:36">code</name> <operator pos:start="191:38" pos:end="191:38">&gt;</operator> <name pos:start="191:40" pos:end="191:44">width</name></expr>)</condition><block pos:start="191:46" pos:end="197:21">{<block_content pos:start="193:25" pos:end="195:34">

                        <expr_stmt pos:start="193:25" pos:end="193:83"><expr pos:start="193:25" pos:end="193:82"><call pos:start="193:25" pos:end="193:82"><name pos:start="193:25" pos:end="193:30">av_log</name><argument_list pos:start="193:31" pos:end="193:82">(<argument pos:start="193:32" pos:end="193:39"><expr pos:start="193:32" pos:end="193:39"><name pos:start="193:32" pos:end="193:39"><name pos:start="193:32" pos:end="193:32">s</name><operator pos:start="193:33" pos:end="193:34">-&gt;</operator><name pos:start="193:35" pos:end="193:39">avctx</name></name></expr></argument>, <argument pos:start="193:42" pos:end="193:53"><expr pos:start="193:42" pos:end="193:53"><name pos:start="193:42" pos:end="193:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:56" pos:end="193:81"><expr pos:start="193:56" pos:end="193:81"><literal type="string" pos:start="193:56" pos:end="193:81">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="195:25" pos:end="195:34">return <expr pos:start="195:32" pos:end="195:33"><operator pos:start="195:32" pos:end="195:32">-</operator><literal type="number" pos:start="195:33" pos:end="195:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:31"><expr pos:start="199:21" pos:end="199:30"><name pos:start="199:21" pos:end="199:21">c</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <operator pos:start="199:25" pos:end="199:25">*</operator><name pos:start="199:26" pos:end="199:28">src</name><operator pos:start="199:29" pos:end="199:30">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:50"><expr pos:start="201:21" pos:end="201:49"><call pos:start="201:21" pos:end="201:49"><name pos:start="201:21" pos:end="201:26">memset</name><argument_list pos:start="201:27" pos:end="201:49">(<argument pos:start="201:28" pos:end="201:39"><expr pos:start="201:28" pos:end="201:39"><name pos:start="201:28" pos:end="201:30">dst</name> <operator pos:start="201:32" pos:end="201:32">+</operator> <name pos:start="201:34" pos:end="201:39">pixels</name></expr></argument>, <argument pos:start="201:42" pos:end="201:42"><expr pos:start="201:42" pos:end="201:42"><name pos:start="201:42" pos:end="201:42">c</name></expr></argument>, <argument pos:start="201:45" pos:end="201:48"><expr pos:start="201:45" pos:end="201:48"><name pos:start="201:45" pos:end="201:48">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:35"><expr pos:start="203:21" pos:end="203:34"><name pos:start="203:21" pos:end="203:26">pixels</name> <operator pos:start="203:28" pos:end="203:29">+=</operator> <name pos:start="203:31" pos:end="203:34">code</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        <case pos:start="211:9" pos:end="211:22">case <expr pos:start="211:14" pos:end="211:21"><name pos:start="211:14" pos:end="211:21">TIFF_LZW</name></expr>:</case>

            <expr_stmt pos:start="213:13" pos:end="213:55"><expr pos:start="213:13" pos:end="213:54"><name pos:start="213:13" pos:end="213:18">pixels</name> <operator pos:start="213:20" pos:end="213:20">=</operator> <call pos:start="213:22" pos:end="213:54"><name pos:start="213:22" pos:end="213:34">ff_lzw_decode</name><argument_list pos:start="213:35" pos:end="213:54">(<argument pos:start="213:36" pos:end="213:41"><expr pos:start="213:36" pos:end="213:41"><name pos:start="213:36" pos:end="213:41"><name pos:start="213:36" pos:end="213:36">s</name><operator pos:start="213:37" pos:end="213:38">-&gt;</operator><name pos:start="213:39" pos:end="213:41">lzw</name></name></expr></argument>, <argument pos:start="213:44" pos:end="213:46"><expr pos:start="213:44" pos:end="213:46"><name pos:start="213:44" pos:end="213:46">dst</name></expr></argument>, <argument pos:start="213:49" pos:end="213:53"><expr pos:start="213:49" pos:end="213:53"><name pos:start="213:49" pos:end="213:53">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="221:13"><if pos:start="215:13" pos:end="221:13">if<condition pos:start="215:15" pos:end="215:30">(<expr pos:start="215:16" pos:end="215:29"><name pos:start="215:16" pos:end="215:21">pixels</name> <operator pos:start="215:23" pos:end="215:23">&lt;</operator> <name pos:start="215:25" pos:end="215:29">width</name></expr>)</condition><block pos:start="215:31" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:26">

                <expr_stmt pos:start="217:17" pos:end="217:95"><expr pos:start="217:17" pos:end="217:94"><call pos:start="217:17" pos:end="217:94"><name pos:start="217:17" pos:end="217:22">av_log</name><argument_list pos:start="217:23" pos:end="217:94">(<argument pos:start="217:24" pos:end="217:31"><expr pos:start="217:24" pos:end="217:31"><name pos:start="217:24" pos:end="217:31"><name pos:start="217:24" pos:end="217:24">s</name><operator pos:start="217:25" pos:end="217:26">-&gt;</operator><name pos:start="217:27" pos:end="217:31">avctx</name></name></expr></argument>, <argument pos:start="217:34" pos:end="217:45"><expr pos:start="217:34" pos:end="217:45"><name pos:start="217:34" pos:end="217:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:48" pos:end="217:78"><expr pos:start="217:48" pos:end="217:78"><literal type="string" pos:start="217:48" pos:end="217:78">"Decoded only %i bytes of %i\n"</literal></expr></argument>, <argument pos:start="217:81" pos:end="217:86"><expr pos:start="217:81" pos:end="217:86"><name pos:start="217:81" pos:end="217:86">pixels</name></expr></argument>, <argument pos:start="217:89" pos:end="217:93"><expr pos:start="217:89" pos:end="217:93"><name pos:start="217:89" pos:end="217:93">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="219:17" pos:end="219:26">return <expr pos:start="219:24" pos:end="219:25"><operator pos:start="219:24" pos:end="219:24">-</operator><literal type="number" pos:start="219:25" pos:end="219:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="227:9" pos:end="227:22"><expr pos:start="227:9" pos:end="227:21"><name pos:start="227:9" pos:end="227:11">dst</name> <operator pos:start="227:13" pos:end="227:14">+=</operator> <name pos:start="227:16" pos:end="227:21">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="231:5" pos:end="231:13">return <expr pos:start="231:12" pos:end="231:12"><literal type="number" pos:start="231:12" pos:end="231:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
