<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16535.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:33">virtio_gpu_create_mapping_iov</name><parameter_list pos:start="1:34" pos:end="5:53">(<parameter pos:start="1:35" pos:end="1:79"><decl pos:start="1:35" pos:end="1:79"><type pos:start="1:35" pos:end="1:79"><name pos:start="1:35" pos:end="1:75"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:75">virtio_gpu_resource_attach_backing</name></name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:79">ab</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:69"><decl pos:start="3:35" pos:end="3:69"><type pos:start="3:35" pos:end="3:69"><name pos:start="3:35" pos:end="3:64"><name pos:start="3:35" pos:end="3:40">struct</name> <name pos:start="3:42" pos:end="3:64">virtio_gpu_ctrl_command</name></name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:69">cmd</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:52"><decl pos:start="5:35" pos:end="5:52"><type pos:start="5:35" pos:end="5:52"><name pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:40">struct</name> <name pos:start="5:42" pos:end="5:46">iovec</name></name> <modifier pos:start="5:48" pos:end="5:48">*</modifier><modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:52">iov</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:5" pos:end="89:13">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:33"><name pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:31">virtio_gpu_mem_entry</name></name> <modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:37">ents</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:16">esize</name></decl>, <decl pos:start="11:19" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:19" pos:end="11:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:10">ab</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:22">nr_entries</name></name> <operator pos:start="17:24" pos:end="17:24">&gt;</operator> <literal type="number" pos:start="17:26" pos:end="17:30">16384</literal></expr>)</condition> <block pos:start="17:33" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:18">

        <expr_stmt pos:start="19:9" pos:end="23:48"><expr pos:start="19:9" pos:end="23:47"><call pos:start="19:9" pos:end="23:47"><name pos:start="19:9" pos:end="19:21">qemu_log_mask</name><argument_list pos:start="19:22" pos:end="23:47">(<argument pos:start="19:23" pos:end="19:37"><expr pos:start="19:23" pos:end="19:37"><name pos:start="19:23" pos:end="19:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="21:23" pos:end="21:63"><expr pos:start="21:23" pos:end="21:63"><literal type="string" pos:start="21:23" pos:end="21:63">"%s: nr_entries is too big (%d &gt; 1024)\n"</literal></expr></argument>,

                      <argument pos:start="23:23" pos:end="23:30"><expr pos:start="23:23" pos:end="23:30"><name pos:start="23:23" pos:end="23:30">__func__</name></expr></argument>, <argument pos:start="23:33" pos:end="23:46"><expr pos:start="23:33" pos:end="23:46"><name pos:start="23:33" pos:end="23:46"><name pos:start="23:33" pos:end="23:34">ab</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:46">nr_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:43"><expr pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:9">esize</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <sizeof pos:start="31:13" pos:end="31:25">sizeof<argument_list pos:start="31:19" pos:end="31:25">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><operator pos:start="31:20" pos:end="31:20">*</operator><name pos:start="31:21" pos:end="31:24">ents</name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:27" pos:end="31:27">*</operator> <name pos:start="31:29" pos:end="31:42"><name pos:start="31:29" pos:end="31:30">ab</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:42">nr_entries</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:8">ents</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:26"><name pos:start="33:12" pos:end="33:19">g_malloc</name><argument_list pos:start="33:20" pos:end="33:26">(<argument pos:start="33:21" pos:end="33:25"><expr pos:start="33:21" pos:end="33:25"><name pos:start="33:21" pos:end="33:25">esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="37:45"><expr pos:start="35:5" pos:end="37:44"><name pos:start="35:5" pos:end="35:5">s</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="37:44"><name pos:start="35:9" pos:end="35:18">iov_to_buf</name><argument_list pos:start="35:19" pos:end="37:44">(<argument pos:start="35:20" pos:end="35:35"><expr pos:start="35:20" pos:end="35:35"><name pos:start="35:20" pos:end="35:35"><name pos:start="35:20" pos:end="35:22">cmd</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:28">elem</name><operator pos:start="35:29" pos:end="35:29">.</operator><name pos:start="35:30" pos:end="35:35">out_sg</name></name></expr></argument>, <argument pos:start="35:38" pos:end="35:54"><expr pos:start="35:38" pos:end="35:54"><name pos:start="35:38" pos:end="35:54"><name pos:start="35:38" pos:end="35:40">cmd</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:46">elem</name><operator pos:start="35:47" pos:end="35:47">.</operator><name pos:start="35:48" pos:end="35:54">out_num</name></name></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:30"><expr pos:start="37:20" pos:end="37:30"><sizeof pos:start="37:20" pos:end="37:30">sizeof<argument_list pos:start="37:26" pos:end="37:30">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><operator pos:start="37:27" pos:end="37:27">*</operator><name pos:start="37:28" pos:end="37:29">ab</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:33" pos:end="37:36"><expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">ents</name></expr></argument>, <argument pos:start="37:39" pos:end="37:43"><expr pos:start="37:39" pos:end="37:43"><name pos:start="37:39" pos:end="37:43">esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">s</name> <operator pos:start="39:11" pos:end="39:12">!=</operator> <name pos:start="39:14" pos:end="39:18">esize</name></expr>)</condition> <block pos:start="39:21" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:18">

        <expr_stmt pos:start="41:9" pos:end="45:42"><expr pos:start="41:9" pos:end="45:41"><call pos:start="41:9" pos:end="45:41"><name pos:start="41:9" pos:end="41:21">qemu_log_mask</name><argument_list pos:start="41:22" pos:end="45:41">(<argument pos:start="41:23" pos:end="41:37"><expr pos:start="41:23" pos:end="41:37"><name pos:start="41:23" pos:end="41:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="43:23" pos:end="43:68"><expr pos:start="43:23" pos:end="43:68"><literal type="string" pos:start="43:23" pos:end="43:68">"%s: command data size incorrect %zu vs %zu\n"</literal></expr></argument>,

                      <argument pos:start="45:23" pos:end="45:30"><expr pos:start="45:23" pos:end="45:30"><name pos:start="45:23" pos:end="45:30">__func__</name></expr></argument>, <argument pos:start="45:33" pos:end="45:33"><expr pos:start="45:33" pos:end="45:33"><name pos:start="45:33" pos:end="45:33">s</name></expr></argument>, <argument pos:start="45:36" pos:end="45:40"><expr pos:start="45:36" pos:end="45:40"><name pos:start="45:36" pos:end="45:40">esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><call pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:14">g_free</name><argument_list pos:start="47:15" pos:end="47:20">(<argument pos:start="47:16" pos:end="47:19"><expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">ents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:60"><expr pos:start="55:5" pos:end="55:59"><operator pos:start="55:5" pos:end="55:5">*</operator><name pos:start="55:6" pos:end="55:8">iov</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:59"><name pos:start="55:12" pos:end="55:20">g_malloc0</name><argument_list pos:start="55:21" pos:end="55:59">(<argument pos:start="55:22" pos:end="55:58"><expr pos:start="55:22" pos:end="55:58"><sizeof pos:start="55:22" pos:end="55:41">sizeof<argument_list pos:start="55:28" pos:end="55:41">(<argument pos:start="55:29" pos:end="55:40"><expr pos:start="55:29" pos:end="55:40">struct <name pos:start="55:36" pos:end="55:40">iovec</name></expr></argument>)</argument_list></sizeof> <operator pos:start="55:43" pos:end="55:43">*</operator> <name pos:start="55:45" pos:end="55:58"><name pos:start="55:45" pos:end="55:46">ab</name><operator pos:start="55:47" pos:end="55:48">-&gt;</operator><name pos:start="55:49" pos:end="55:58">nr_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="85:5">for <control pos:start="57:9" pos:end="57:40">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:35"><expr pos:start="57:17" pos:end="57:34"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:22">ab</name><operator pos:start="57:23" pos:end="57:24">-&gt;</operator><name pos:start="57:25" pos:end="57:34">nr_entries</name></name></expr>;</condition> <incr pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:37">i</name><operator pos:start="57:38" pos:end="57:39">++</operator></expr></incr>)</control> <block pos:start="57:42" pos:end="85:5">{<block_content pos:start="59:9" pos:end="83:9">

        <decl_stmt pos:start="59:9" pos:end="59:36"><decl pos:start="59:9" pos:end="59:35"><type pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:14">hwaddr</name></type> <name pos:start="59:16" pos:end="59:18">len</name> <init pos:start="59:20" pos:end="59:35">= <expr pos:start="59:22" pos:end="59:35"><name pos:start="59:22" pos:end="59:28"><name pos:start="59:22" pos:end="59:25">ents</name><index pos:start="59:26" pos:end="59:28">[<expr pos:start="59:27" pos:end="59:27"><name pos:start="59:27" pos:end="59:27">i</name></expr>]</index></name><operator pos:start="59:29" pos:end="59:29">.</operator><name pos:start="59:30" pos:end="59:35">length</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:43"><expr pos:start="61:9" pos:end="61:42"><operator pos:start="61:9" pos:end="61:9">(</operator><operator pos:start="61:10" pos:end="61:10">*</operator><name pos:start="61:11" pos:end="61:13">iov</name><operator pos:start="61:14" pos:end="61:14">)</operator><index pos:start="61:15" pos:end="61:17">[<expr pos:start="61:16" pos:end="61:16"><name pos:start="61:16" pos:end="61:16">i</name></expr>]</index><operator pos:start="61:18" pos:end="61:18">.</operator><name pos:start="61:19" pos:end="61:25">iov_len</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <name pos:start="61:29" pos:end="61:35"><name pos:start="61:29" pos:end="61:32">ents</name><index pos:start="61:33" pos:end="61:35">[<expr pos:start="61:34" pos:end="61:34"><name pos:start="61:34" pos:end="61:34">i</name></expr>]</index></name><operator pos:start="61:36" pos:end="61:36">.</operator><name pos:start="61:37" pos:end="61:42">length</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:76"><expr pos:start="63:9" pos:end="63:75"><operator pos:start="63:9" pos:end="63:9">(</operator><operator pos:start="63:10" pos:end="63:10">*</operator><name pos:start="63:11" pos:end="63:13">iov</name><operator pos:start="63:14" pos:end="63:14">)</operator><index pos:start="63:15" pos:end="63:17">[<expr pos:start="63:16" pos:end="63:16"><name pos:start="63:16" pos:end="63:16">i</name></expr>]</index><operator pos:start="63:18" pos:end="63:18">.</operator><name pos:start="63:19" pos:end="63:26">iov_base</name> <operator pos:start="63:28" pos:end="63:28">=</operator> <call pos:start="63:30" pos:end="63:75"><name pos:start="63:30" pos:end="63:52">cpu_physical_memory_map</name><argument_list pos:start="63:53" pos:end="63:75">(<argument pos:start="63:54" pos:end="63:65"><expr pos:start="63:54" pos:end="63:65"><name pos:start="63:54" pos:end="63:60"><name pos:start="63:54" pos:end="63:57">ents</name><index pos:start="63:58" pos:end="63:60">[<expr pos:start="63:59" pos:end="63:59"><name pos:start="63:59" pos:end="63:59">i</name></expr>]</index></name><operator pos:start="63:61" pos:end="63:61">.</operator><name pos:start="63:62" pos:end="63:65">addr</name></expr></argument>, <argument pos:start="63:68" pos:end="63:71"><expr pos:start="63:68" pos:end="63:71"><operator pos:start="63:68" pos:end="63:68">&amp;</operator><name pos:start="63:69" pos:end="63:71">len</name></expr></argument>, <argument pos:start="63:74" pos:end="63:74"><expr pos:start="63:74" pos:end="63:74"><literal type="number" pos:start="63:74" pos:end="63:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="83:9"><if pos:start="65:9" pos:end="83:9">if <condition pos:start="65:12" pos:end="65:57">(<expr pos:start="65:13" pos:end="65:56"><operator pos:start="65:13" pos:end="65:13">!</operator><operator pos:start="65:14" pos:end="65:14">(</operator><operator pos:start="65:15" pos:end="65:15">*</operator><name pos:start="65:16" pos:end="65:18">iov</name><operator pos:start="65:19" pos:end="65:19">)</operator><index pos:start="65:20" pos:end="65:22">[<expr pos:start="65:21" pos:end="65:21"><name pos:start="65:21" pos:end="65:21">i</name></expr>]</index><operator pos:start="65:23" pos:end="65:23">.</operator><name pos:start="65:24" pos:end="65:31">iov_base</name> <operator pos:start="65:33" pos:end="65:34">||</operator> <name pos:start="65:36" pos:end="65:38">len</name> <operator pos:start="65:40" pos:end="65:41">!=</operator> <name pos:start="65:43" pos:end="65:49"><name pos:start="65:43" pos:end="65:46">ents</name><index pos:start="65:47" pos:end="65:49">[<expr pos:start="65:48" pos:end="65:48"><name pos:start="65:48" pos:end="65:48">i</name></expr>]</index></name><operator pos:start="65:50" pos:end="65:50">.</operator><name pos:start="65:51" pos:end="65:56">length</name></expr>)</condition> <block pos:start="65:59" pos:end="83:9">{<block_content pos:start="67:13" pos:end="81:22">

            <expr_stmt pos:start="67:13" pos:end="71:56"><expr pos:start="67:13" pos:end="71:55"><call pos:start="67:13" pos:end="71:55"><name pos:start="67:13" pos:end="67:25">qemu_log_mask</name><argument_list pos:start="67:26" pos:end="71:55">(<argument pos:start="67:27" pos:end="67:41"><expr pos:start="67:27" pos:end="67:41"><name pos:start="67:27" pos:end="67:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="67:44" pos:end="69:53"><expr pos:start="67:44" pos:end="69:53"><literal type="string" pos:start="67:44" pos:end="67:78">"%s: failed to map MMIO memory for"</literal>

                          <literal type="string" pos:start="69:27" pos:end="69:53">" resource %d element %d\n"</literal></expr></argument>,

                          <argument pos:start="71:27" pos:end="71:34"><expr pos:start="71:27" pos:end="71:34"><name pos:start="71:27" pos:end="71:34">__func__</name></expr></argument>, <argument pos:start="71:37" pos:end="71:51"><expr pos:start="71:37" pos:end="71:51"><name pos:start="71:37" pos:end="71:51"><name pos:start="71:37" pos:end="71:38">ab</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:51">resource_id</name></name></expr></argument>, <argument pos:start="71:54" pos:end="71:54"><expr pos:start="71:54" pos:end="71:54"><name pos:start="71:54" pos:end="71:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:52"><expr pos:start="73:13" pos:end="73:51"><call pos:start="73:13" pos:end="73:51"><name pos:start="73:13" pos:end="73:42">virtio_gpu_cleanup_mapping_iov</name><argument_list pos:start="73:43" pos:end="73:51">(<argument pos:start="73:44" pos:end="73:47"><expr pos:start="73:44" pos:end="73:47"><operator pos:start="73:44" pos:end="73:44">*</operator><name pos:start="73:45" pos:end="73:47">iov</name></expr></argument>, <argument pos:start="73:50" pos:end="73:50"><expr pos:start="73:50" pos:end="73:50"><name pos:start="73:50" pos:end="73:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:25"><expr pos:start="75:13" pos:end="75:24"><call pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:18">g_free</name><argument_list pos:start="75:19" pos:end="75:24">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">ents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:25"><expr pos:start="77:13" pos:end="77:24"><call pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:18">g_free</name><argument_list pos:start="77:19" pos:end="77:24">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><operator pos:start="77:20" pos:end="77:20">*</operator><name pos:start="77:21" pos:end="77:23">iov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:24"><expr pos:start="79:13" pos:end="79:23"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:16">iov</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:23">NULL</name></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="87:5" pos:end="87:17"><expr pos:start="87:5" pos:end="87:16"><call pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:10">g_free</name><argument_list pos:start="87:11" pos:end="87:16">(<argument pos:start="87:12" pos:end="87:15"><expr pos:start="87:12" pos:end="87:15"><name pos:start="87:12" pos:end="87:15">ents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
