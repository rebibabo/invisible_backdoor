<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15752.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">av_opt_get</name><parameter_list pos:start="1:15" pos:end="1:80">(<parameter pos:start="1:16" pos:end="1:24"><decl pos:start="1:16" pos:end="1:24"><type pos:start="1:16" pos:end="1:24"><name pos:start="1:16" pos:end="1:19">void</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:24">obj</name></decl></parameter>, <parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">name</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:60">search_flags</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:79"><decl pos:start="1:63" pos:end="1:79"><type pos:start="1:63" pos:end="1:79"><name pos:start="1:63" pos:end="1:69">uint8_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier><modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:79">out_val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">dst</name></decl>, <decl pos:start="5:16" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:10"><modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:26">target_obj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:84"><decl pos:start="7:5" pos:end="7:83"><type pos:start="7:5" pos:end="7:20"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">AVOption</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">o</name> <init pos:start="7:23" pos:end="7:83">= <expr pos:start="7:25" pos:end="7:83"><call pos:start="7:25" pos:end="7:83"><name pos:start="7:25" pos:end="7:36">av_opt_find2</name><argument_list pos:start="7:37" pos:end="7:83">(<argument pos:start="7:38" pos:end="7:40"><expr pos:start="7:38" pos:end="7:40"><name pos:start="7:38" pos:end="7:40">obj</name></expr></argument>, <argument pos:start="7:43" pos:end="7:46"><expr pos:start="7:43" pos:end="7:46"><name pos:start="7:43" pos:end="7:46">name</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">NULL</name></expr></argument>, <argument pos:start="7:55" pos:end="7:55"><expr pos:start="7:55" pos:end="7:55"><literal type="number" pos:start="7:55" pos:end="7:55">0</literal></expr></argument>, <argument pos:start="7:58" pos:end="7:69"><expr pos:start="7:58" pos:end="7:69"><name pos:start="7:58" pos:end="7:69">search_flags</name></expr></argument>, <argument pos:start="7:72" pos:end="7:82"><expr pos:start="7:72" pos:end="7:82"><operator pos:start="7:72" pos:end="7:72">&amp;</operator><name pos:start="7:73" pos:end="7:82">target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">bin</name></decl>, <decl pos:start="9:19" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:13"/><name pos:start="9:19" pos:end="9:26"><name pos:start="9:19" pos:end="9:21">buf</name><index pos:start="9:22" pos:end="9:26">[<expr pos:start="9:23" pos:end="9:25"><literal type="number" pos:start="9:23" pos:end="9:25">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name></decl>, <decl pos:start="11:14" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:14">i</name></decl>, <decl pos:start="11:17" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:19">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:40"><if pos:start="15:5" pos:end="17:40">if <condition pos:start="15:8" pos:end="15:26">(<expr pos:start="15:9" pos:end="15:25"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:10">o</name> <operator pos:start="15:12" pos:end="15:13">||</operator> <operator pos:start="15:15" pos:end="15:15">!</operator><name pos:start="15:16" pos:end="15:25">target_obj</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:40"><block_content pos:start="17:9" pos:end="17:40">

        <return pos:start="17:9" pos:end="17:40">return <expr pos:start="17:16" pos:end="17:39"><name pos:start="17:16" pos:end="17:39">AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:7">dst</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <operator pos:start="21:11" pos:end="21:11">(</operator><name pos:start="21:12" pos:end="21:18">uint8_t</name><operator pos:start="21:19" pos:end="21:19">*</operator><operator pos:start="21:20" pos:end="21:20">)</operator><name pos:start="21:21" pos:end="21:30">target_obj</name> <operator pos:start="21:32" pos:end="21:32">+</operator> <name pos:start="21:34" pos:end="21:42"><name pos:start="21:34" pos:end="21:34">o</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:42">offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:15"><expr pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:7">buf</name><index pos:start="25:8" pos:end="25:10">[<expr pos:start="25:9" pos:end="25:9"><literal type="number" pos:start="25:9" pos:end="25:9">0</literal></expr>]</index></name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</expr_stmt>

    <switch pos:start="27:5" pos:end="77:5">switch <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:13">o</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:19">type</name></name></expr>)</condition> <block pos:start="27:22" pos:end="77:5">{<block_content pos:start="29:5" pos:end="75:31">

    <case pos:start="29:5" pos:end="29:27">case <expr pos:start="29:10" pos:end="29:26"><name pos:start="29:10" pos:end="29:26">AV_OPT_TYPE_FLAGS</name></expr>:</case>     <expr_stmt pos:start="29:33" pos:end="29:92"><expr pos:start="29:33" pos:end="29:91"><name pos:start="29:33" pos:end="29:35">ret</name> <operator pos:start="29:37" pos:end="29:37">=</operator> <call pos:start="29:39" pos:end="29:91"><name pos:start="29:39" pos:end="29:46">snprintf</name><argument_list pos:start="29:47" pos:end="29:91">(<argument pos:start="29:48" pos:end="29:50"><expr pos:start="29:48" pos:end="29:50"><name pos:start="29:48" pos:end="29:50">buf</name></expr></argument>, <argument pos:start="29:53" pos:end="29:63"><expr pos:start="29:53" pos:end="29:63"><sizeof pos:start="29:53" pos:end="29:63">sizeof<argument_list pos:start="29:59" pos:end="29:63">(<argument pos:start="29:60" pos:end="29:62"><expr pos:start="29:60" pos:end="29:62"><name pos:start="29:60" pos:end="29:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:66" pos:end="29:73"><expr pos:start="29:66" pos:end="29:73"><literal type="string" pos:start="29:66" pos:end="29:73">"0x%08X"</literal></expr></argument>,  <argument pos:start="29:77" pos:end="29:90"><expr pos:start="29:77" pos:end="29:90"><operator pos:start="29:77" pos:end="29:77">*</operator><operator pos:start="29:78" pos:end="29:78">(</operator><name pos:start="29:79" pos:end="29:81">int</name>    <operator pos:start="29:86" pos:end="29:86">*</operator><operator pos:start="29:87" pos:end="29:87">)</operator><name pos:start="29:88" pos:end="29:90">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="29:93" pos:end="29:98">break;</break>

    <case pos:start="31:5" pos:end="31:25">case <expr pos:start="31:10" pos:end="31:24"><name pos:start="31:10" pos:end="31:24">AV_OPT_TYPE_INT</name></expr>:</case>       <expr_stmt pos:start="31:33" pos:end="31:92"><expr pos:start="31:33" pos:end="31:91"><name pos:start="31:33" pos:end="31:35">ret</name> <operator pos:start="31:37" pos:end="31:37">=</operator> <call pos:start="31:39" pos:end="31:91"><name pos:start="31:39" pos:end="31:46">snprintf</name><argument_list pos:start="31:47" pos:end="31:91">(<argument pos:start="31:48" pos:end="31:50"><expr pos:start="31:48" pos:end="31:50"><name pos:start="31:48" pos:end="31:50">buf</name></expr></argument>, <argument pos:start="31:53" pos:end="31:63"><expr pos:start="31:53" pos:end="31:63"><sizeof pos:start="31:53" pos:end="31:63">sizeof<argument_list pos:start="31:59" pos:end="31:63">(<argument pos:start="31:60" pos:end="31:62"><expr pos:start="31:60" pos:end="31:62"><name pos:start="31:60" pos:end="31:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:66" pos:end="31:69"><expr pos:start="31:66" pos:end="31:69"><literal type="string" pos:start="31:66" pos:end="31:69">"%d"</literal></expr></argument> ,     <argument pos:start="31:77" pos:end="31:90"><expr pos:start="31:77" pos:end="31:90"><operator pos:start="31:77" pos:end="31:77">*</operator><operator pos:start="31:78" pos:end="31:78">(</operator><name pos:start="31:79" pos:end="31:81">int</name>    <operator pos:start="31:86" pos:end="31:86">*</operator><operator pos:start="31:87" pos:end="31:87">)</operator><name pos:start="31:88" pos:end="31:90">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="31:93" pos:end="31:98">break;</break>

    <case pos:start="33:5" pos:end="33:27">case <expr pos:start="33:10" pos:end="33:26"><name pos:start="33:10" pos:end="33:26">AV_OPT_TYPE_INT64</name></expr>:</case>     <expr_stmt pos:start="33:33" pos:end="33:92"><expr pos:start="33:33" pos:end="33:91"><name pos:start="33:33" pos:end="33:35">ret</name> <operator pos:start="33:37" pos:end="33:37">=</operator> <call pos:start="33:39" pos:end="33:91"><name pos:start="33:39" pos:end="33:46">snprintf</name><argument_list pos:start="33:47" pos:end="33:91">(<argument pos:start="33:48" pos:end="33:50"><expr pos:start="33:48" pos:end="33:50"><name pos:start="33:48" pos:end="33:50">buf</name></expr></argument>, <argument pos:start="33:53" pos:end="33:63"><expr pos:start="33:53" pos:end="33:63"><sizeof pos:start="33:53" pos:end="33:63">sizeof<argument_list pos:start="33:59" pos:end="33:63">(<argument pos:start="33:60" pos:end="33:62"><expr pos:start="33:60" pos:end="33:62"><name pos:start="33:60" pos:end="33:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:66" pos:end="33:74"><expr pos:start="33:66" pos:end="33:74"><literal type="string" pos:start="33:66" pos:end="33:68">"%"</literal><name pos:start="33:69" pos:end="33:74">PRId64</name></expr></argument>, <argument pos:start="33:77" pos:end="33:90"><expr pos:start="33:77" pos:end="33:90"><operator pos:start="33:77" pos:end="33:77">*</operator><operator pos:start="33:78" pos:end="33:78">(</operator><name pos:start="33:79" pos:end="33:85">int64_t</name><operator pos:start="33:86" pos:end="33:86">*</operator><operator pos:start="33:87" pos:end="33:87">)</operator><name pos:start="33:88" pos:end="33:90">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="33:93" pos:end="33:98">break;</break>

    <case pos:start="35:5" pos:end="35:27">case <expr pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:26">AV_OPT_TYPE_FLOAT</name></expr>:</case>     <expr_stmt pos:start="35:33" pos:end="35:92"><expr pos:start="35:33" pos:end="35:91"><name pos:start="35:33" pos:end="35:35">ret</name> <operator pos:start="35:37" pos:end="35:37">=</operator> <call pos:start="35:39" pos:end="35:91"><name pos:start="35:39" pos:end="35:46">snprintf</name><argument_list pos:start="35:47" pos:end="35:91">(<argument pos:start="35:48" pos:end="35:50"><expr pos:start="35:48" pos:end="35:50"><name pos:start="35:48" pos:end="35:50">buf</name></expr></argument>, <argument pos:start="35:53" pos:end="35:63"><expr pos:start="35:53" pos:end="35:63"><sizeof pos:start="35:53" pos:end="35:63">sizeof<argument_list pos:start="35:59" pos:end="35:63">(<argument pos:start="35:60" pos:end="35:62"><expr pos:start="35:60" pos:end="35:62"><name pos:start="35:60" pos:end="35:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:66" pos:end="35:69"><expr pos:start="35:66" pos:end="35:69"><literal type="string" pos:start="35:66" pos:end="35:69">"%f"</literal></expr></argument> ,     <argument pos:start="35:77" pos:end="35:90"><expr pos:start="35:77" pos:end="35:90"><operator pos:start="35:77" pos:end="35:77">*</operator><operator pos:start="35:78" pos:end="35:78">(</operator><name pos:start="35:79" pos:end="35:83">float</name>  <operator pos:start="35:86" pos:end="35:86">*</operator><operator pos:start="35:87" pos:end="35:87">)</operator><name pos:start="35:88" pos:end="35:90">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="35:93" pos:end="35:98">break;</break>

    <case pos:start="37:5" pos:end="37:28">case <expr pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:27">AV_OPT_TYPE_DOUBLE</name></expr>:</case>    <expr_stmt pos:start="37:33" pos:end="37:92"><expr pos:start="37:33" pos:end="37:91"><name pos:start="37:33" pos:end="37:35">ret</name> <operator pos:start="37:37" pos:end="37:37">=</operator> <call pos:start="37:39" pos:end="37:91"><name pos:start="37:39" pos:end="37:46">snprintf</name><argument_list pos:start="37:47" pos:end="37:91">(<argument pos:start="37:48" pos:end="37:50"><expr pos:start="37:48" pos:end="37:50"><name pos:start="37:48" pos:end="37:50">buf</name></expr></argument>, <argument pos:start="37:53" pos:end="37:63"><expr pos:start="37:53" pos:end="37:63"><sizeof pos:start="37:53" pos:end="37:63">sizeof<argument_list pos:start="37:59" pos:end="37:63">(<argument pos:start="37:60" pos:end="37:62"><expr pos:start="37:60" pos:end="37:62"><name pos:start="37:60" pos:end="37:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:66" pos:end="37:69"><expr pos:start="37:66" pos:end="37:69"><literal type="string" pos:start="37:66" pos:end="37:69">"%f"</literal></expr></argument> ,     <argument pos:start="37:77" pos:end="37:90"><expr pos:start="37:77" pos:end="37:90"><operator pos:start="37:77" pos:end="37:77">*</operator><operator pos:start="37:78" pos:end="37:78">(</operator><name pos:start="37:79" pos:end="37:84">double</name> <operator pos:start="37:86" pos:end="37:86">*</operator><operator pos:start="37:87" pos:end="37:87">)</operator><name pos:start="37:88" pos:end="37:90">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="37:93" pos:end="37:98">break;</break>

    <case pos:start="39:5" pos:end="39:30">case <expr pos:start="39:10" pos:end="39:29"><name pos:start="39:10" pos:end="39:29">AV_OPT_TYPE_RATIONAL</name></expr>:</case>  <expr_stmt pos:start="39:33" pos:end="39:126"><expr pos:start="39:33" pos:end="39:125"><name pos:start="39:33" pos:end="39:35">ret</name> <operator pos:start="39:37" pos:end="39:37">=</operator> <call pos:start="39:39" pos:end="39:125"><name pos:start="39:39" pos:end="39:46">snprintf</name><argument_list pos:start="39:47" pos:end="39:125">(<argument pos:start="39:48" pos:end="39:50"><expr pos:start="39:48" pos:end="39:50"><name pos:start="39:48" pos:end="39:50">buf</name></expr></argument>, <argument pos:start="39:53" pos:end="39:63"><expr pos:start="39:53" pos:end="39:63"><sizeof pos:start="39:53" pos:end="39:63">sizeof<argument_list pos:start="39:59" pos:end="39:63">(<argument pos:start="39:60" pos:end="39:62"><expr pos:start="39:60" pos:end="39:62"><name pos:start="39:60" pos:end="39:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:66" pos:end="39:72"><expr pos:start="39:66" pos:end="39:72"><literal type="string" pos:start="39:66" pos:end="39:72">"%d/%d"</literal></expr></argument>,   <argument pos:start="39:77" pos:end="39:99"><expr pos:start="39:77" pos:end="39:99"><operator pos:start="39:77" pos:end="39:77">(</operator><operator pos:start="39:78" pos:end="39:78">(</operator><name pos:start="39:79" pos:end="39:88">AVRational</name><operator pos:start="39:89" pos:end="39:89">*</operator><operator pos:start="39:90" pos:end="39:90">)</operator><name pos:start="39:91" pos:end="39:93">dst</name><operator pos:start="39:94" pos:end="39:94">)</operator><operator pos:start="39:95" pos:end="39:96">-&gt;</operator><name pos:start="39:97" pos:end="39:99">num</name></expr></argument>, <argument pos:start="39:102" pos:end="39:124"><expr pos:start="39:102" pos:end="39:124"><operator pos:start="39:102" pos:end="39:102">(</operator><operator pos:start="39:103" pos:end="39:103">(</operator><name pos:start="39:104" pos:end="39:113">AVRational</name><operator pos:start="39:114" pos:end="39:114">*</operator><operator pos:start="39:115" pos:end="39:115">)</operator><name pos:start="39:116" pos:end="39:118">dst</name><operator pos:start="39:119" pos:end="39:119">)</operator><operator pos:start="39:120" pos:end="39:121">-&gt;</operator><name pos:start="39:122" pos:end="39:124">den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="39:127" pos:end="39:132">break;</break>

    <case pos:start="41:5" pos:end="41:28">case <expr pos:start="41:10" pos:end="41:27"><name pos:start="41:10" pos:end="41:27">AV_OPT_TYPE_STRING</name></expr>:</case>

        <if_stmt pos:start="43:9" pos:end="49:37"><if pos:start="43:9" pos:end="45:50">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><operator pos:start="43:13" pos:end="43:13">*</operator><operator pos:start="43:14" pos:end="43:14">(</operator><name pos:start="43:15" pos:end="43:21">uint8_t</name><operator pos:start="43:22" pos:end="43:22">*</operator><operator pos:start="43:23" pos:end="43:23">*</operator><operator pos:start="43:24" pos:end="43:24">)</operator><name pos:start="43:25" pos:end="43:27">dst</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:50"><block_content pos:start="45:13" pos:end="45:50">

            <expr_stmt pos:start="45:13" pos:end="45:50"><expr pos:start="45:13" pos:end="45:49"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:20">out_val</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:49"><name pos:start="45:24" pos:end="45:32">av_strdup</name><argument_list pos:start="45:33" pos:end="45:49">(<argument pos:start="45:34" pos:end="45:48"><expr pos:start="45:34" pos:end="45:48"><operator pos:start="45:34" pos:end="45:34">*</operator><operator pos:start="45:35" pos:end="45:35">(</operator><name pos:start="45:36" pos:end="45:42">uint8_t</name><operator pos:start="45:43" pos:end="45:43">*</operator><operator pos:start="45:44" pos:end="45:44">*</operator><operator pos:start="45:45" pos:end="45:45">)</operator><name pos:start="45:46" pos:end="45:48">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="47:9" pos:end="49:37">else<block type="pseudo" pos:start="49:13" pos:end="49:37"><block_content pos:start="49:13" pos:end="49:37">

            <expr_stmt pos:start="49:13" pos:end="49:37"><expr pos:start="49:13" pos:end="49:36"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:20">out_val</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <call pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:32">av_strdup</name><argument_list pos:start="49:33" pos:end="49:36">(<argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><literal type="string" pos:start="49:34" pos:end="49:35">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <return pos:start="51:9" pos:end="51:17">return <expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">0</literal></expr>;</return>

    <case pos:start="53:5" pos:end="53:28">case <expr pos:start="53:10" pos:end="53:27"><name pos:start="53:10" pos:end="53:27">AV_OPT_TYPE_BINARY</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:60"><expr pos:start="55:9" pos:end="55:59"><name pos:start="55:9" pos:end="55:11">len</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">*</operator><operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:19">int</name><operator pos:start="55:20" pos:end="55:20">*</operator><operator pos:start="55:21" pos:end="55:21">)</operator><operator pos:start="55:22" pos:end="55:22">(</operator><operator pos:start="55:23" pos:end="55:23">(</operator><operator pos:start="55:24" pos:end="55:24">(</operator><name pos:start="55:25" pos:end="55:31">uint8_t</name> <operator pos:start="55:33" pos:end="55:33">*</operator><operator pos:start="55:34" pos:end="55:34">)</operator><name pos:start="55:35" pos:end="55:37">dst</name><operator pos:start="55:38" pos:end="55:38">)</operator> <operator pos:start="55:40" pos:end="55:40">+</operator> <sizeof pos:start="55:42" pos:end="55:58">sizeof<argument_list pos:start="55:48" pos:end="55:58">(<argument pos:start="55:49" pos:end="55:57"><expr pos:start="55:49" pos:end="55:57"><name pos:start="55:49" pos:end="55:55">uint8_t</name> <operator pos:start="55:57" pos:end="55:57">*</operator></expr></argument>)</argument_list></sizeof><operator pos:start="55:59" pos:end="55:59">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:35"><if pos:start="57:9" pos:end="59:35">if <condition pos:start="57:12" pos:end="57:42">(<expr pos:start="57:13" pos:end="57:41"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:21">uint64_t</name><operator pos:start="57:22" pos:end="57:22">)</operator><name pos:start="57:23" pos:end="57:25">len</name><operator pos:start="57:26" pos:end="57:26">*</operator><literal type="number" pos:start="57:27" pos:end="57:29">2</literal> <operator pos:start="57:29" pos:end="57:29">+</operator> <literal type="number" pos:start="57:31" pos:end="57:31">1</literal> <operator pos:start="57:33" pos:end="57:33">&gt;</operator> <name pos:start="57:35" pos:end="57:41">INT_MAX</name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:35"><block_content pos:start="59:13" pos:end="59:35">

            <return pos:start="59:13" pos:end="59:35">return <expr pos:start="59:20" pos:end="59:34"><call pos:start="59:20" pos:end="59:34"><name pos:start="59:20" pos:end="59:26">AVERROR</name><argument_list pos:start="59:27" pos:end="59:34">(<argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="63:35"><if pos:start="61:9" pos:end="63:35">if <condition pos:start="61:12" pos:end="61:47">(<expr pos:start="61:13" pos:end="61:46"><operator pos:start="61:13" pos:end="61:13">!</operator><operator pos:start="61:14" pos:end="61:14">(</operator><operator pos:start="61:15" pos:end="61:15">*</operator><name pos:start="61:16" pos:end="61:22">out_val</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <call pos:start="61:26" pos:end="61:45"><name pos:start="61:26" pos:end="61:34">av_malloc</name><argument_list pos:start="61:35" pos:end="61:45">(<argument pos:start="61:36" pos:end="61:44"><expr pos:start="61:36" pos:end="61:44"><name pos:start="61:36" pos:end="61:38">len</name><operator pos:start="61:39" pos:end="61:39">*</operator><literal type="number" pos:start="61:40" pos:end="61:42">2</literal> <operator pos:start="61:42" pos:end="61:42">+</operator> <literal type="number" pos:start="61:44" pos:end="61:44">1</literal></expr></argument>)</argument_list></call><operator pos:start="61:46" pos:end="61:46">)</operator></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:35"><block_content pos:start="63:13" pos:end="63:35">

            <return pos:start="63:13" pos:end="63:35">return <expr pos:start="63:20" pos:end="63:34"><call pos:start="63:20" pos:end="63:34"><name pos:start="63:20" pos:end="63:26">AVERROR</name><argument_list pos:start="63:27" pos:end="63:34">(<argument pos:start="63:28" pos:end="63:33"><expr pos:start="63:28" pos:end="63:33"><name pos:start="63:28" pos:end="63:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:11">bin</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">*</operator><operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:23">uint8_t</name><operator pos:start="65:24" pos:end="65:24">*</operator><operator pos:start="65:25" pos:end="65:25">*</operator><operator pos:start="65:26" pos:end="65:26">)</operator><name pos:start="65:27" pos:end="65:29">dst</name></expr>;</expr_stmt>

        <for pos:start="67:9" pos:end="69:56">for <control pos:start="67:13" pos:end="67:33">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:28"><expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:27">len</name></expr>;</condition> <incr pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:30">i</name><operator pos:start="67:31" pos:end="67:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:13" pos:end="69:56"><block_content pos:start="69:13" pos:end="69:56">

            <expr_stmt pos:start="69:13" pos:end="69:56"><expr pos:start="69:13" pos:end="69:55"><call pos:start="69:13" pos:end="69:55"><name pos:start="69:13" pos:end="69:20">snprintf</name><argument_list pos:start="69:21" pos:end="69:55">(<argument pos:start="69:22" pos:end="69:35"><expr pos:start="69:22" pos:end="69:35"><operator pos:start="69:22" pos:end="69:22">*</operator><name pos:start="69:23" pos:end="69:29">out_val</name> <operator pos:start="69:31" pos:end="69:31">+</operator> <name pos:start="69:33" pos:end="69:33">i</name><operator pos:start="69:34" pos:end="69:34">*</operator><literal type="number" pos:start="69:35" pos:end="69:35">2</literal></expr></argument>, <argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">3</literal></expr></argument>, <argument pos:start="69:41" pos:end="69:46"><expr pos:start="69:41" pos:end="69:46"><literal type="string" pos:start="69:41" pos:end="69:46">"%02X"</literal></expr></argument>, <argument pos:start="69:49" pos:end="69:54"><expr pos:start="69:49" pos:end="69:54"><name pos:start="69:49" pos:end="69:54"><name pos:start="69:49" pos:end="69:51">bin</name><index pos:start="69:52" pos:end="69:54">[<expr pos:start="69:53" pos:end="69:53"><name pos:start="69:53" pos:end="69:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return pos:start="71:9" pos:end="71:17">return <expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>;</return>

    <default pos:start="73:5" pos:end="73:12">default:</default>

        <return pos:start="75:9" pos:end="75:31">return <expr pos:start="75:16" pos:end="75:30"><call pos:start="75:16" pos:end="75:30"><name pos:start="75:16" pos:end="75:22">AVERROR</name><argument_list pos:start="75:23" pos:end="75:30">(<argument pos:start="75:24" pos:end="75:29"><expr pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="81:5" pos:end="83:31"><if pos:start="81:5" pos:end="83:31">if <condition pos:start="81:8" pos:end="81:27">(<expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:14">&gt;=</operator> <sizeof pos:start="81:16" pos:end="81:26">sizeof<argument_list pos:start="81:22" pos:end="81:26">(<argument pos:start="81:23" pos:end="81:25"><expr pos:start="81:23" pos:end="81:25"><name pos:start="81:23" pos:end="81:25">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:31"><block_content pos:start="83:9" pos:end="83:31">

        <return pos:start="83:9" pos:end="83:31">return <expr pos:start="83:16" pos:end="83:30"><call pos:start="83:16" pos:end="83:30"><name pos:start="83:16" pos:end="83:22">AVERROR</name><argument_list pos:start="83:23" pos:end="83:30">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:30"><expr pos:start="85:5" pos:end="85:29"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:12">out_val</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:29"><name pos:start="85:16" pos:end="85:24">av_strdup</name><argument_list pos:start="85:25" pos:end="85:29">(<argument pos:start="85:26" pos:end="85:28"><expr pos:start="85:26" pos:end="85:28"><name pos:start="85:26" pos:end="85:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
