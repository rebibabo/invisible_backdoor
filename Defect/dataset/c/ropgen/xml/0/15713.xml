<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15713.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">pc_basic_device_init</name><parameter_list pos:start="1:26" pos:end="5:48">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:34">qemu_irq</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:43">isa_irq</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:52"><decl pos:start="3:27" pos:end="3:52"><type pos:start="3:27" pos:end="3:52"><name pos:start="3:27" pos:end="3:32">FDCtrl</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier><modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:52">floppy_controller</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:47"><decl pos:start="5:27" pos:end="5:47"><type pos:start="5:27" pos:end="5:47"><name pos:start="5:27" pos:end="5:35">ISADevice</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:47">rtc_state</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="127:1">{<block_content pos:start="9:5" pos:end="125:45">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">DriveInfo</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:25"><name pos:start="11:16" pos:end="11:17">fd</name><index pos:start="11:18" pos:end="11:25">[<expr pos:start="11:19" pos:end="11:24"><name pos:start="11:19" pos:end="11:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">PITState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">pit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20">rtc_irq</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:22">a20_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:40"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">ISADevice</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:20">i8042</name></decl>, <decl pos:start="19:23" pos:end="19:29"><type ref="prev" pos:start="19:5" pos:end="19:15"><modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:29">port92</name></decl>, <decl pos:start="19:32" pos:end="19:39"><type ref="prev" pos:start="19:5" pos:end="19:15"><modifier pos:start="19:32" pos:end="19:32">*</modifier></type><name pos:start="19:33" pos:end="19:39">vmmouse</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:26">cpu_exit_irq</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:60"><expr pos:start="25:5" pos:end="25:59"><call pos:start="25:5" pos:end="25:59"><name pos:start="25:5" pos:end="25:25">register_ioport_write</name><argument_list pos:start="25:26" pos:end="25:59">(<argument pos:start="25:27" pos:end="25:30"><expr pos:start="25:27" pos:end="25:30"><literal type="number" pos:start="25:27" pos:end="25:30">0x80</literal></expr></argument>, <argument pos:start="25:33" pos:end="25:33"><expr pos:start="25:33" pos:end="25:33"><literal type="number" pos:start="25:33" pos:end="25:33">1</literal></expr></argument>, <argument pos:start="25:36" pos:end="25:36"><expr pos:start="25:36" pos:end="25:36"><literal type="number" pos:start="25:36" pos:end="25:36">1</literal></expr></argument>, <argument pos:start="25:39" pos:end="25:52"><expr pos:start="25:39" pos:end="25:52"><name pos:start="25:39" pos:end="25:52">ioport80_write</name></expr></argument>, <argument pos:start="25:55" pos:end="25:58"><expr pos:start="25:55" pos:end="25:58"><name pos:start="25:55" pos:end="25:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:60"><expr pos:start="29:5" pos:end="29:59"><call pos:start="29:5" pos:end="29:59"><name pos:start="29:5" pos:end="29:25">register_ioport_write</name><argument_list pos:start="29:26" pos:end="29:59">(<argument pos:start="29:27" pos:end="29:30"><expr pos:start="29:27" pos:end="29:30"><literal type="number" pos:start="29:27" pos:end="29:30">0xf0</literal></expr></argument>, <argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><literal type="number" pos:start="29:33" pos:end="29:33">1</literal></expr></argument>, <argument pos:start="29:36" pos:end="29:36"><expr pos:start="29:36" pos:end="29:36"><literal type="number" pos:start="29:36" pos:end="29:36">1</literal></expr></argument>, <argument pos:start="29:39" pos:end="29:52"><expr pos:start="29:39" pos:end="29:52"><name pos:start="29:39" pos:end="29:52">ioportF0_write</name></expr></argument>, <argument pos:start="29:55" pos:end="29:58"><expr pos:start="29:55" pos:end="29:58"><name pos:start="29:55" pos:end="29:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:16">no_hpet</name></expr>)</condition> <block pos:start="33:19" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:9">

        <decl_stmt pos:start="35:9" pos:end="35:78"><decl pos:start="35:9" pos:end="35:77"><type pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:19">DeviceState</name> <modifier pos:start="35:21" pos:end="35:21">*</modifier></type><name pos:start="35:22" pos:end="35:25">hpet</name> <init pos:start="35:27" pos:end="35:77">= <expr pos:start="35:29" pos:end="35:77"><call pos:start="35:29" pos:end="35:77"><name pos:start="35:29" pos:end="35:52">sysbus_try_create_simple</name><argument_list pos:start="35:53" pos:end="35:77">(<argument pos:start="35:54" pos:end="35:59"><expr pos:start="35:54" pos:end="35:59"><literal type="string" pos:start="35:54" pos:end="35:59">"hpet"</literal></expr></argument>, <argument pos:start="35:62" pos:end="35:70"><expr pos:start="35:62" pos:end="35:70"><name pos:start="35:62" pos:end="35:70">HPET_BASE</name></expr></argument>, <argument pos:start="35:73" pos:end="35:76"><expr pos:start="35:73" pos:end="35:76"><name pos:start="35:73" pos:end="35:76">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="39:9" pos:end="49:9"><if pos:start="39:9" pos:end="49:9">if <condition pos:start="39:12" pos:end="39:17">(<expr pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">hpet</name></expr>)</condition> <block pos:start="39:19" pos:end="49:9">{<block_content pos:start="41:13" pos:end="47:48">

            <for pos:start="41:13" pos:end="45:13">for <control pos:start="41:17" pos:end="41:36">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">i</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:31"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:25">i</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <literal type="number" pos:start="41:29" pos:end="41:30">24</literal></expr>;</condition> <incr pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:33">i</name><operator pos:start="41:34" pos:end="41:35">++</operator></expr></incr>)</control> <block pos:start="41:38" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:74">

                <expr_stmt pos:start="43:17" pos:end="43:74"><expr pos:start="43:17" pos:end="43:73"><call pos:start="43:17" pos:end="43:73"><name pos:start="43:17" pos:end="43:34">sysbus_connect_irq</name><argument_list pos:start="43:35" pos:end="43:73">(<argument pos:start="43:36" pos:end="43:57"><expr pos:start="43:36" pos:end="43:57"><call pos:start="43:36" pos:end="43:57"><name pos:start="43:36" pos:end="43:51">sysbus_from_qdev</name><argument_list pos:start="43:52" pos:end="43:57">(<argument pos:start="43:53" pos:end="43:56"><expr pos:start="43:53" pos:end="43:56"><name pos:start="43:53" pos:end="43:56">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:60" pos:end="43:60"><expr pos:start="43:60" pos:end="43:60"><name pos:start="43:60" pos:end="43:60">i</name></expr></argument>, <argument pos:start="43:63" pos:end="43:72"><expr pos:start="43:63" pos:end="43:72"><name pos:start="43:63" pos:end="43:72"><name pos:start="43:63" pos:end="43:69">isa_irq</name><index pos:start="43:70" pos:end="43:72">[<expr pos:start="43:71" pos:end="43:71"><name pos:start="43:71" pos:end="43:71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="47:13" pos:end="47:48"><expr pos:start="47:13" pos:end="47:47"><name pos:start="47:13" pos:end="47:19">rtc_irq</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:47"><name pos:start="47:23" pos:end="47:38">qdev_get_gpio_in</name><argument_list pos:start="47:39" pos:end="47:47">(<argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><name pos:start="47:40" pos:end="47:43">hpet</name></expr></argument>, <argument pos:start="47:46" pos:end="47:46"><expr pos:start="47:46" pos:end="47:46"><literal type="number" pos:start="47:46" pos:end="47:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:41"><expr pos:start="53:5" pos:end="53:40"><operator pos:start="53:5" pos:end="53:5">*</operator><name pos:start="53:6" pos:end="53:14">rtc_state</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:40"><name pos:start="53:18" pos:end="53:25">rtc_init</name><argument_list pos:start="53:26" pos:end="53:40">(<argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><literal type="number" pos:start="53:27" pos:end="53:30">2000</literal></expr></argument>, <argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:39">rtc_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><call pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:26">qemu_register_boot_set</name><argument_list pos:start="57:27" pos:end="57:51">(<argument pos:start="57:28" pos:end="57:38"><expr pos:start="57:28" pos:end="57:38"><name pos:start="57:28" pos:end="57:38">pc_boot_set</name></expr></argument>, <argument pos:start="57:41" pos:end="57:50"><expr pos:start="57:41" pos:end="57:50"><operator pos:start="57:41" pos:end="57:41">*</operator><name pos:start="57:42" pos:end="57:50">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:7">pit</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:44"><name pos:start="61:11" pos:end="61:18">pit_init</name><argument_list pos:start="61:19" pos:end="61:44">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><literal type="number" pos:start="61:20" pos:end="61:23">0x40</literal></expr></argument>, <argument pos:start="61:26" pos:end="61:43"><expr pos:start="61:26" pos:end="61:43"><call pos:start="61:26" pos:end="61:43"><name pos:start="61:26" pos:end="61:40">isa_reserve_irq</name><argument_list pos:start="61:41" pos:end="61:43">(<argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><call pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:14">pcspk_init</name><argument_list pos:start="63:15" pos:end="63:19">(<argument pos:start="63:16" pos:end="63:18"><expr pos:start="63:16" pos:end="63:18"><name pos:start="63:16" pos:end="63:18">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="67:5" pos:end="75:5">for<control pos:start="67:8" pos:end="67:41">(<init pos:start="67:9" pos:end="67:14"><expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">i</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <literal type="number" pos:start="67:13" pos:end="67:13">0</literal></expr>;</init> <condition pos:start="67:16" pos:end="67:36"><expr pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:16">i</name> <operator pos:start="67:18" pos:end="67:18">&lt;</operator> <name pos:start="67:20" pos:end="67:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr></incr>)</control> <block pos:start="67:43" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:9">

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:26">(<expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:22">serial_hds</name><index pos:start="69:23" pos:end="69:25">[<expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="69:28" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:46">

            <expr_stmt pos:start="71:13" pos:end="71:46"><expr pos:start="71:13" pos:end="71:45"><call pos:start="71:13" pos:end="71:45"><name pos:start="71:13" pos:end="71:27">serial_isa_init</name><argument_list pos:start="71:28" pos:end="71:45">(<argument pos:start="71:29" pos:end="71:29"><expr pos:start="71:29" pos:end="71:29"><name pos:start="71:29" pos:end="71:29">i</name></expr></argument>, <argument pos:start="71:32" pos:end="71:44"><expr pos:start="71:32" pos:end="71:44"><name pos:start="71:32" pos:end="71:44"><name pos:start="71:32" pos:end="71:41">serial_hds</name><index pos:start="71:42" pos:end="71:44">[<expr pos:start="71:43" pos:end="71:43"><name pos:start="71:43" pos:end="71:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="79:5" pos:end="87:5">for<control pos:start="79:8" pos:end="79:43">(<init pos:start="79:9" pos:end="79:14"><expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:9">i</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <literal type="number" pos:start="79:13" pos:end="79:13">0</literal></expr>;</init> <condition pos:start="79:16" pos:end="79:38"><expr pos:start="79:16" pos:end="79:37"><name pos:start="79:16" pos:end="79:16">i</name> <operator pos:start="79:18" pos:end="79:18">&lt;</operator> <name pos:start="79:20" pos:end="79:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="79:40" pos:end="79:42"><expr pos:start="79:40" pos:end="79:42"><name pos:start="79:40" pos:end="79:40">i</name><operator pos:start="79:41" pos:end="79:42">++</operator></expr></incr>)</control> <block pos:start="79:45" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:9">

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:28">(<expr pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:24">parallel_hds</name><index pos:start="81:25" pos:end="81:27">[<expr pos:start="81:26" pos:end="81:26"><name pos:start="81:26" pos:end="81:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="81:30" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:46">

            <expr_stmt pos:start="83:13" pos:end="83:46"><expr pos:start="83:13" pos:end="83:45"><call pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:25">parallel_init</name><argument_list pos:start="83:26" pos:end="83:45">(<argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">i</name></expr></argument>, <argument pos:start="83:30" pos:end="83:44"><expr pos:start="83:30" pos:end="83:44"><name pos:start="83:30" pos:end="83:44"><name pos:start="83:30" pos:end="83:41">parallel_hds</name><index pos:start="83:42" pos:end="83:44">[<expr pos:start="83:43" pos:end="83:43"><name pos:start="83:43" pos:end="83:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="91:5" pos:end="91:72"><expr pos:start="91:5" pos:end="91:71"><name pos:start="91:5" pos:end="91:12">a20_line</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:71"><name pos:start="91:16" pos:end="91:33">qemu_allocate_irqs</name><argument_list pos:start="91:34" pos:end="91:71">(<argument pos:start="91:35" pos:end="91:56"><expr pos:start="91:35" pos:end="91:56"><name pos:start="91:35" pos:end="91:56">handle_a20_line_change</name></expr></argument>, <argument pos:start="91:59" pos:end="91:67"><expr pos:start="91:59" pos:end="91:67"><name pos:start="91:59" pos:end="91:67">first_cpu</name></expr></argument>, <argument pos:start="91:70" pos:end="91:70"><expr pos:start="91:70" pos:end="91:70"><literal type="number" pos:start="91:70" pos:end="91:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:9">i8042</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <call pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:29">isa_create_simple</name><argument_list pos:start="93:30" pos:end="93:38">(<argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><literal type="string" pos:start="93:31" pos:end="93:37">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:46"><expr pos:start="95:5" pos:end="95:45"><call pos:start="95:5" pos:end="95:45"><name pos:start="95:5" pos:end="95:24">i8042_setup_a20_line</name><argument_list pos:start="95:25" pos:end="95:45">(<argument pos:start="95:26" pos:end="95:30"><expr pos:start="95:26" pos:end="95:30"><name pos:start="95:26" pos:end="95:30">i8042</name></expr></argument>, <argument pos:start="95:33" pos:end="95:44"><expr pos:start="95:33" pos:end="95:44"><operator pos:start="95:33" pos:end="95:33">&amp;</operator><name pos:start="95:34" pos:end="95:44"><name pos:start="95:34" pos:end="95:41">a20_line</name><index pos:start="95:42" pos:end="95:44">[<expr pos:start="95:43" pos:end="95:43"><literal type="number" pos:start="95:43" pos:end="95:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:18"><expr pos:start="97:5" pos:end="97:17"><call pos:start="97:5" pos:end="97:17"><name pos:start="97:5" pos:end="97:15">vmport_init</name><argument_list pos:start="97:16" pos:end="97:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:40"><expr pos:start="99:5" pos:end="99:39"><name pos:start="99:5" pos:end="99:11">vmmouse</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:39"><name pos:start="99:15" pos:end="99:28">isa_try_create</name><argument_list pos:start="99:29" pos:end="99:39">(<argument pos:start="99:30" pos:end="99:38"><expr pos:start="99:30" pos:end="99:38"><literal type="string" pos:start="99:30" pos:end="99:38">"vmmouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:15">vmmouse</name></expr>)</condition> <block pos:start="101:18" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:62">

        <expr_stmt pos:start="103:9" pos:end="103:62"><expr pos:start="103:9" pos:end="103:61"><call pos:start="103:9" pos:end="103:61"><name pos:start="103:9" pos:end="103:25">qdev_prop_set_ptr</name><argument_list pos:start="103:26" pos:end="103:61">(<argument pos:start="103:27" pos:end="103:40"><expr pos:start="103:27" pos:end="103:40"><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:40"><name pos:start="103:28" pos:end="103:34">vmmouse</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:40">qdev</name></name></expr></argument>, <argument pos:start="103:43" pos:end="103:53"><expr pos:start="103:43" pos:end="103:53"><literal type="string" pos:start="103:43" pos:end="103:53">"ps2_mouse"</literal></expr></argument>, <argument pos:start="103:56" pos:end="103:60"><expr pos:start="103:56" pos:end="103:60"><name pos:start="103:56" pos:end="103:60">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:41"><expr pos:start="107:5" pos:end="107:40"><name pos:start="107:5" pos:end="107:10">port92</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="107:40"><name pos:start="107:14" pos:end="107:30">isa_create_simple</name><argument_list pos:start="107:31" pos:end="107:40">(<argument pos:start="107:32" pos:end="107:39"><expr pos:start="107:32" pos:end="107:39"><literal type="string" pos:start="107:32" pos:end="107:39">"port92"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><call pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:15">port92_init</name><argument_list pos:start="109:16" pos:end="109:37">(<argument pos:start="109:17" pos:end="109:22"><expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:22">port92</name></expr></argument>, <argument pos:start="109:25" pos:end="109:36"><expr pos:start="109:25" pos:end="109:36"><operator pos:start="109:25" pos:end="109:25">&amp;</operator><name pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:33">a20_line</name><index pos:start="109:34" pos:end="109:36">[<expr pos:start="109:35" pos:end="109:35"><literal type="number" pos:start="109:35" pos:end="109:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:65"><expr pos:start="113:5" pos:end="113:64"><name pos:start="113:5" pos:end="113:16">cpu_exit_irq</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <call pos:start="113:20" pos:end="113:64"><name pos:start="113:20" pos:end="113:37">qemu_allocate_irqs</name><argument_list pos:start="113:38" pos:end="113:64">(<argument pos:start="113:39" pos:end="113:54"><expr pos:start="113:39" pos:end="113:54"><name pos:start="113:39" pos:end="113:54">cpu_request_exit</name></expr></argument>, <argument pos:start="113:57" pos:end="113:60"><expr pos:start="113:57" pos:end="113:60"><name pos:start="113:57" pos:end="113:60">NULL</name></expr></argument>, <argument pos:start="113:63" pos:end="113:63"><expr pos:start="113:63" pos:end="113:63"><literal type="number" pos:start="113:63" pos:end="113:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:30"><expr pos:start="115:5" pos:end="115:29"><call pos:start="115:5" pos:end="115:29"><name pos:start="115:5" pos:end="115:12">DMA_init</name><argument_list pos:start="115:13" pos:end="115:29">(<argument pos:start="115:14" pos:end="115:14"><expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr></argument>, <argument pos:start="115:17" pos:end="115:28"><expr pos:start="115:17" pos:end="115:28"><name pos:start="115:17" pos:end="115:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="119:5" pos:end="123:5">for<control pos:start="119:8" pos:end="119:31">(<init pos:start="119:9" pos:end="119:14"><expr pos:start="119:9" pos:end="119:13"><name pos:start="119:9" pos:end="119:9">i</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <literal type="number" pos:start="119:13" pos:end="119:13">0</literal></expr>;</init> <condition pos:start="119:16" pos:end="119:26"><expr pos:start="119:16" pos:end="119:25"><name pos:start="119:16" pos:end="119:16">i</name> <operator pos:start="119:18" pos:end="119:18">&lt;</operator> <name pos:start="119:20" pos:end="119:25">MAX_FD</name></expr>;</condition> <incr pos:start="119:28" pos:end="119:30"><expr pos:start="119:28" pos:end="119:30"><name pos:start="119:28" pos:end="119:28">i</name><operator pos:start="119:29" pos:end="119:30">++</operator></expr></incr>)</control> <block pos:start="119:33" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:43">

        <expr_stmt pos:start="121:9" pos:end="121:43"><expr pos:start="121:9" pos:end="121:42"><name pos:start="121:9" pos:end="121:13"><name pos:start="121:9" pos:end="121:10">fd</name><index pos:start="121:11" pos:end="121:13">[<expr pos:start="121:12" pos:end="121:12"><name pos:start="121:12" pos:end="121:12">i</name></expr>]</index></name> <operator pos:start="121:15" pos:end="121:15">=</operator> <call pos:start="121:17" pos:end="121:42"><name pos:start="121:17" pos:end="121:25">drive_get</name><argument_list pos:start="121:26" pos:end="121:42">(<argument pos:start="121:27" pos:end="121:35"><expr pos:start="121:27" pos:end="121:35"><name pos:start="121:27" pos:end="121:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="121:38" pos:end="121:38"><expr pos:start="121:38" pos:end="121:38"><literal type="number" pos:start="121:38" pos:end="121:38">0</literal></expr></argument>, <argument pos:start="121:41" pos:end="121:41"><expr pos:start="121:41" pos:end="121:41"><name pos:start="121:41" pos:end="121:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="125:5" pos:end="125:45"><expr pos:start="125:5" pos:end="125:44"><operator pos:start="125:5" pos:end="125:5">*</operator><name pos:start="125:6" pos:end="125:22">floppy_controller</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <call pos:start="125:26" pos:end="125:44"><name pos:start="125:26" pos:end="125:40">fdctrl_init_isa</name><argument_list pos:start="125:41" pos:end="125:44">(<argument pos:start="125:42" pos:end="125:43"><expr pos:start="125:42" pos:end="125:43"><name pos:start="125:42" pos:end="125:43">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
