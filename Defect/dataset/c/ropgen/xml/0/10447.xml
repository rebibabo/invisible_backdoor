<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10447.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">check_stream_specifier</name><parameter_list pos:start="1:27" pos:end="1:78">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:55">AVStream</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">st</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:77"><decl pos:start="1:62" pos:end="1:77"><type pos:start="1:62" pos:end="1:77"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:71">char</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:77">spec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:27">

    <if_stmt pos:start="5:5" pos:end="109:17"><if pos:start="5:5" pos:end="7:50">if <condition pos:start="5:8" pos:end="5:37">(<expr pos:start="5:9" pos:end="5:36"><operator pos:start="5:9" pos:end="5:9">*</operator><name pos:start="5:10" pos:end="5:13">spec</name> <operator pos:start="5:15" pos:end="5:16">&lt;=</operator> <literal type="char" pos:start="5:18" pos:end="5:20">'9'</literal> <operator pos:start="5:22" pos:end="5:23">&amp;&amp;</operator> <operator pos:start="5:25" pos:end="5:25">*</operator><name pos:start="5:26" pos:end="5:29">spec</name> <operator pos:start="5:31" pos:end="5:32">&gt;=</operator> <literal type="char" pos:start="5:34" pos:end="5:36">'0'</literal></expr>)</condition><block type="pseudo" pos:start="7:9" pos:end="7:50"><block_content pos:start="7:9" pos:end="7:50"> <comment type="block" pos:start="5:39" pos:end="5:53">/* opt:index */</comment>

        <return pos:start="7:9" pos:end="7:50">return <expr pos:start="7:16" pos:end="7:49"><call pos:start="7:16" pos:end="7:36"><name pos:start="7:16" pos:end="7:21">strtol</name><argument_list pos:start="7:22" pos:end="7:36">(<argument pos:start="7:23" pos:end="7:26"><expr pos:start="7:23" pos:end="7:26"><name pos:start="7:23" pos:end="7:26">spec</name></expr></argument>, <argument pos:start="7:29" pos:end="7:32"><expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></argument>, <argument pos:start="7:35" pos:end="7:35"><expr pos:start="7:35" pos:end="7:35"><literal type="number" pos:start="7:35" pos:end="7:35">0</literal></expr></argument>)</argument_list></call> <operator pos:start="7:38" pos:end="7:39">==</operator> <name pos:start="7:41" pos:end="7:49"><name pos:start="7:41" pos:end="7:42">st</name><operator pos:start="7:43" pos:end="7:44">-&gt;</operator><name pos:start="7:45" pos:end="7:49">index</name></name></expr>;</return></block_content></block></if>

    <if type="elseif" pos:start="9:5" pos:end="53:5">else if <condition pos:start="9:13" pos:end="11:26">(<expr pos:start="9:14" pos:end="11:25"><operator pos:start="9:14" pos:end="9:14">*</operator><name pos:start="9:15" pos:end="9:18">spec</name> <operator pos:start="9:20" pos:end="9:21">==</operator> <literal type="char" pos:start="9:23" pos:end="9:25">'v'</literal> <operator pos:start="9:27" pos:end="9:28">||</operator> <operator pos:start="9:30" pos:end="9:30">*</operator><name pos:start="9:31" pos:end="9:34">spec</name> <operator pos:start="9:36" pos:end="9:37">==</operator> <literal type="char" pos:start="9:39" pos:end="9:41">'a'</literal> <operator pos:start="9:43" pos:end="9:44">||</operator> <operator pos:start="9:46" pos:end="9:46">*</operator><name pos:start="9:47" pos:end="9:50">spec</name> <operator pos:start="9:52" pos:end="9:53">==</operator> <literal type="char" pos:start="9:55" pos:end="9:57">'s'</literal> <operator pos:start="9:59" pos:end="9:60">||</operator> <operator pos:start="9:62" pos:end="9:62">*</operator><name pos:start="9:63" pos:end="9:66">spec</name> <operator pos:start="9:68" pos:end="9:69">==</operator> <literal type="char" pos:start="9:71" pos:end="9:73">'d'</literal> <operator pos:start="9:75" pos:end="9:76">||</operator>

             <operator pos:start="11:14" pos:end="11:14">*</operator><name pos:start="11:15" pos:end="11:18">spec</name> <operator pos:start="11:20" pos:end="11:21">==</operator> <literal type="char" pos:start="11:23" pos:end="11:25">'t'</literal></expr>)</condition> <block pos:start="11:28" pos:end="53:5">{<block_content pos:start="13:9" pos:end="51:17"> <comment type="block" pos:start="11:30" pos:end="11:46">/* opt:[vasdt] */</comment>

        <decl_stmt pos:start="13:9" pos:end="13:30"><decl pos:start="13:9" pos:end="13:29"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:12">enum</name> <name pos:start="13:14" pos:end="13:24">AVMediaType</name></name></type> <name pos:start="13:26" pos:end="13:29">type</name></decl>;</decl_stmt>



        <switch pos:start="17:9" pos:end="31:9">switch <condition pos:start="17:16" pos:end="17:24">(<expr pos:start="17:17" pos:end="17:23"><operator pos:start="17:17" pos:end="17:17">*</operator><name pos:start="17:18" pos:end="17:21">spec</name><operator pos:start="17:22" pos:end="17:23">++</operator></expr>)</condition> <block pos:start="17:26" pos:end="31:9">{<block_content pos:start="19:9" pos:end="29:32">

        <case pos:start="19:9" pos:end="19:17">case <expr pos:start="19:14" pos:end="19:16"><literal type="char" pos:start="19:14" pos:end="19:16">'v'</literal></expr>:</case> <expr_stmt pos:start="19:19" pos:end="19:44"><expr pos:start="19:19" pos:end="19:43"><name pos:start="19:19" pos:end="19:22">type</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:43">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>      <break pos:start="19:51" pos:end="19:56">break;</break>

        <case pos:start="21:9" pos:end="21:17">case <expr pos:start="21:14" pos:end="21:16"><literal type="char" pos:start="21:14" pos:end="21:16">'a'</literal></expr>:</case> <expr_stmt pos:start="21:19" pos:end="21:44"><expr pos:start="21:19" pos:end="21:43"><name pos:start="21:19" pos:end="21:22">type</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <name pos:start="21:26" pos:end="21:43">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>      <break pos:start="21:51" pos:end="21:56">break;</break>

        <case pos:start="23:9" pos:end="23:17">case <expr pos:start="23:14" pos:end="23:16"><literal type="char" pos:start="23:14" pos:end="23:16">'s'</literal></expr>:</case> <expr_stmt pos:start="23:19" pos:end="23:47"><expr pos:start="23:19" pos:end="23:46"><name pos:start="23:19" pos:end="23:22">type</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:46">AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>   <break pos:start="23:51" pos:end="23:56">break;</break>

        <case pos:start="25:9" pos:end="25:17">case <expr pos:start="25:14" pos:end="25:16"><literal type="char" pos:start="25:14" pos:end="25:16">'d'</literal></expr>:</case> <expr_stmt pos:start="25:19" pos:end="25:43"><expr pos:start="25:19" pos:end="25:42"><name pos:start="25:19" pos:end="25:22">type</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:42">AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>       <break pos:start="25:51" pos:end="25:56">break;</break>

        <case pos:start="27:9" pos:end="27:17">case <expr pos:start="27:14" pos:end="27:16"><literal type="char" pos:start="27:14" pos:end="27:16">'t'</literal></expr>:</case> <expr_stmt pos:start="27:19" pos:end="27:49"><expr pos:start="27:19" pos:end="27:48"><name pos:start="27:19" pos:end="27:22">type</name> <operator pos:start="27:24" pos:end="27:24">=</operator> <name pos:start="27:26" pos:end="27:48">AVMEDIA_TYPE_ATTACHMENT</name></expr>;</expr_stmt> <break pos:start="27:51" pos:end="27:56">break;</break>

        <default pos:start="29:9" pos:end="29:16">default:</default>  <expr_stmt pos:start="29:19" pos:end="29:32"><expr pos:start="29:19" pos:end="29:31"><call pos:start="29:19" pos:end="29:31"><name pos:start="29:19" pos:end="29:28">av_assert0</name><argument_list pos:start="29:29" pos:end="29:31">(<argument pos:start="29:30" pos:end="29:30"><expr pos:start="29:30" pos:end="29:30"><literal type="number" pos:start="29:30" pos:end="29:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="33:9" pos:end="35:21"><if pos:start="33:9" pos:end="35:21">if <condition pos:start="33:12" pos:end="33:42">(<expr pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:16">type</name> <operator pos:start="33:18" pos:end="33:19">!=</operator> <name pos:start="33:21" pos:end="33:41"><name pos:start="33:21" pos:end="33:22">st</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:29">codec</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:41">codec_type</name></name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:21"><block_content pos:start="35:13" pos:end="35:21">

            <return pos:start="35:13" pos:end="35:21">return <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="49:9"><if pos:start="37:9" pos:end="49:9">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><operator pos:start="37:13" pos:end="37:13">*</operator><name pos:start="37:14" pos:end="37:17">spec</name><operator pos:start="37:18" pos:end="37:19">++</operator> <operator pos:start="37:21" pos:end="37:22">==</operator> <literal type="char" pos:start="37:24" pos:end="37:26">':'</literal></expr>)</condition> <block pos:start="37:29" pos:end="49:9">{<block_content pos:start="39:13" pos:end="47:21"> <comment type="block" pos:start="37:31" pos:end="37:63">/* possibly followed by :index */</comment>

            <decl_stmt pos:start="39:13" pos:end="39:49"><decl pos:start="39:13" pos:end="39:17"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:17">i</name></decl>, <decl pos:start="39:20" pos:end="39:48"><type ref="prev" pos:start="39:13" pos:end="39:15"/><name pos:start="39:20" pos:end="39:24">index</name> <init pos:start="39:26" pos:end="39:48">= <expr pos:start="39:28" pos:end="39:48"><call pos:start="39:28" pos:end="39:48"><name pos:start="39:28" pos:end="39:33">strtol</name><argument_list pos:start="39:34" pos:end="39:48">(<argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">spec</name></expr></argument>, <argument pos:start="39:41" pos:end="39:44"><expr pos:start="39:41" pos:end="39:44"><name pos:start="39:41" pos:end="39:44">NULL</name></expr></argument>, <argument pos:start="39:47" pos:end="39:47"><expr pos:start="39:47" pos:end="39:47"><literal type="number" pos:start="39:47" pos:end="39:47">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="41:13" pos:end="45:41">for <control pos:start="41:17" pos:end="41:47">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">i</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:42"><expr pos:start="41:25" pos:end="41:41"><name pos:start="41:25" pos:end="41:25">i</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <name pos:start="41:29" pos:end="41:41"><name pos:start="41:29" pos:end="41:29">s</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:41">nb_streams</name></name></expr>;</condition> <incr pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:44">i</name><operator pos:start="41:45" pos:end="41:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:17" pos:end="45:41"><block_content pos:start="43:17" pos:end="45:41">

                <if_stmt pos:start="43:17" pos:end="45:41"><if pos:start="43:17" pos:end="45:41">if <condition pos:start="43:20" pos:end="43:77">(<expr pos:start="43:21" pos:end="43:76"><name pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:30">streams</name><index pos:start="43:31" pos:end="43:33">[<expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">i</name></expr>]</index></name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:52"><name pos:start="43:36" pos:end="43:40">codec</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:52">codec_type</name></name> <operator pos:start="43:54" pos:end="43:55">==</operator> <name pos:start="43:57" pos:end="43:60">type</name> <operator pos:start="43:62" pos:end="43:63">&amp;&amp;</operator> <name pos:start="43:65" pos:end="43:69">index</name><operator pos:start="43:70" pos:end="43:71">--</operator> <operator pos:start="43:73" pos:end="43:74">==</operator> <literal type="number" pos:start="43:76" pos:end="43:76">0</literal></expr>)</condition><block type="pseudo" pos:start="45:20" pos:end="45:41"><block_content pos:start="45:20" pos:end="45:41">

                   <return pos:start="45:20" pos:end="45:41">return <expr pos:start="45:27" pos:end="45:40"><name pos:start="45:27" pos:end="45:27">i</name> <operator pos:start="45:29" pos:end="45:30">==</operator> <name pos:start="45:32" pos:end="45:40"><name pos:start="45:32" pos:end="45:33">st</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:40">index</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

            <return pos:start="47:13" pos:end="47:21">return <expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="51:9" pos:end="51:17">return <expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="95:5">else if <condition pos:start="53:15" pos:end="53:50">(<expr pos:start="53:16" pos:end="53:49"><operator pos:start="53:16" pos:end="53:16">*</operator><name pos:start="53:17" pos:end="53:20">spec</name> <operator pos:start="53:22" pos:end="53:23">==</operator> <literal type="char" pos:start="53:25" pos:end="53:27">'p'</literal> <operator pos:start="53:29" pos:end="53:30">&amp;&amp;</operator> <operator pos:start="53:32" pos:end="53:32">*</operator><operator pos:start="53:33" pos:end="53:33">(</operator><name pos:start="53:34" pos:end="53:37">spec</name> <operator pos:start="53:39" pos:end="53:39">+</operator> <literal type="number" pos:start="53:41" pos:end="53:41">1</literal><operator pos:start="53:42" pos:end="53:42">)</operator> <operator pos:start="53:44" pos:end="53:45">==</operator> <literal type="char" pos:start="53:47" pos:end="53:49">':'</literal></expr>)</condition> <block pos:start="53:52" pos:end="95:5">{<block_content pos:start="55:9" pos:end="93:17">

        <decl_stmt pos:start="55:9" pos:end="55:26"><decl pos:start="55:9" pos:end="55:19"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:19">prog_id</name></decl>, <decl pos:start="55:22" pos:end="55:22"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:22" pos:end="55:22">i</name></decl>, <decl pos:start="55:25" pos:end="55:25"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:25" pos:end="55:25">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:21"><decl pos:start="57:9" pos:end="57:20"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:12">char</name> <modifier pos:start="57:14" pos:end="57:14">*</modifier></type><name pos:start="57:15" pos:end="57:20">endptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:18"><expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:12">spec</name> <operator pos:start="59:14" pos:end="59:15">+=</operator> <literal type="number" pos:start="59:17" pos:end="59:17">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:43"><expr pos:start="61:9" pos:end="61:42"><name pos:start="61:9" pos:end="61:15">prog_id</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:42"><name pos:start="61:19" pos:end="61:24">strtol</name><argument_list pos:start="61:25" pos:end="61:42">(<argument pos:start="61:26" pos:end="61:29"><expr pos:start="61:26" pos:end="61:29"><name pos:start="61:26" pos:end="61:29">spec</name></expr></argument>, <argument pos:start="61:32" pos:end="61:38"><expr pos:start="61:32" pos:end="61:38"><operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:38">endptr</name></expr></argument>, <argument pos:start="61:41" pos:end="61:41"><expr pos:start="61:41" pos:end="61:41"><literal type="number" pos:start="61:41" pos:end="61:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="63:9" pos:end="91:9">for <control pos:start="63:13" pos:end="63:44">(<init pos:start="63:14" pos:end="63:19"><expr pos:start="63:14" pos:end="63:18"><name pos:start="63:14" pos:end="63:14">i</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</init> <condition pos:start="63:21" pos:end="63:39"><expr pos:start="63:21" pos:end="63:38"><name pos:start="63:21" pos:end="63:21">i</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <name pos:start="63:25" pos:end="63:38"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:38">nb_programs</name></name></expr>;</condition> <incr pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><name pos:start="63:41" pos:end="63:41">i</name><operator pos:start="63:42" pos:end="63:43">++</operator></expr></incr>)</control> <block pos:start="63:46" pos:end="91:9">{<block_content pos:start="65:13" pos:end="89:29">

            <if_stmt pos:start="65:13" pos:end="67:25"><if pos:start="65:13" pos:end="67:25">if <condition pos:start="65:16" pos:end="65:46">(<expr pos:start="65:17" pos:end="65:45"><name pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:27">programs</name><index pos:start="65:28" pos:end="65:30">[<expr pos:start="65:29" pos:end="65:29"><name pos:start="65:29" pos:end="65:29">i</name></expr>]</index></name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:34">id</name> <operator pos:start="65:36" pos:end="65:37">!=</operator> <name pos:start="65:39" pos:end="65:45">prog_id</name></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:25"><block_content pos:start="67:17" pos:end="67:25">

                <continue pos:start="67:17" pos:end="67:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="71:13" pos:end="81:13"><if pos:start="71:13" pos:end="81:13">if <condition pos:start="71:16" pos:end="71:33">(<expr pos:start="71:17" pos:end="71:32"><operator pos:start="71:17" pos:end="71:17">*</operator><name pos:start="71:18" pos:end="71:23">endptr</name><operator pos:start="71:24" pos:end="71:25">++</operator> <operator pos:start="71:27" pos:end="71:28">==</operator> <literal type="char" pos:start="71:30" pos:end="71:32">':'</literal></expr>)</condition> <block pos:start="71:35" pos:end="81:13">{<block_content pos:start="73:17" pos:end="79:74">

                <decl_stmt pos:start="73:17" pos:end="73:57"><decl pos:start="73:17" pos:end="73:56"><type pos:start="73:17" pos:end="73:19"><name pos:start="73:17" pos:end="73:19">int</name></type> <name pos:start="73:21" pos:end="73:30">stream_idx</name> <init pos:start="73:32" pos:end="73:56">= <expr pos:start="73:34" pos:end="73:56"><call pos:start="73:34" pos:end="73:56"><name pos:start="73:34" pos:end="73:39">strtol</name><argument_list pos:start="73:40" pos:end="73:56">(<argument pos:start="73:41" pos:end="73:46"><expr pos:start="73:41" pos:end="73:46"><name pos:start="73:41" pos:end="73:46">endptr</name></expr></argument>, <argument pos:start="73:49" pos:end="73:52"><expr pos:start="73:49" pos:end="73:52"><name pos:start="73:49" pos:end="73:52">NULL</name></expr></argument>, <argument pos:start="73:55" pos:end="73:55"><expr pos:start="73:55" pos:end="73:55"><literal type="number" pos:start="73:55" pos:end="73:55">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return pos:start="75:17" pos:end="79:74">return <expr pos:start="75:24" pos:end="79:73"><name pos:start="75:24" pos:end="75:33">stream_idx</name> <operator pos:start="75:35" pos:end="75:36">&gt;=</operator> <literal type="number" pos:start="75:38" pos:end="75:38">0</literal> <operator pos:start="75:40" pos:end="75:41">&amp;&amp;</operator>

                    <name pos:start="77:21" pos:end="77:30">stream_idx</name> <operator pos:start="77:32" pos:end="77:32">&lt;</operator> <name pos:start="77:34" pos:end="77:47"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:44">programs</name><index pos:start="77:45" pos:end="77:47">[<expr pos:start="77:46" pos:end="77:46"><name pos:start="77:46" pos:end="77:46">i</name></expr>]</index></name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:66">nb_stream_indexes</name> <operator pos:start="77:68" pos:end="77:69">&amp;&amp;</operator>

                    <name pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:22">st</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:29">index</name></name> <operator pos:start="79:31" pos:end="79:32">==</operator> <name pos:start="79:34" pos:end="79:47"><name pos:start="79:34" pos:end="79:34">s</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:44">programs</name><index pos:start="79:45" pos:end="79:47">[<expr pos:start="79:46" pos:end="79:46"><name pos:start="79:46" pos:end="79:46">i</name></expr>]</index></name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:73"><name pos:start="79:50" pos:end="79:61">stream_index</name><index pos:start="79:62" pos:end="79:73">[<expr pos:start="79:63" pos:end="79:72"><name pos:start="79:63" pos:end="79:72">stream_idx</name></expr>]</index></name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <for pos:start="85:13" pos:end="89:29">for <control pos:start="85:17" pos:end="85:67">(<init pos:start="85:18" pos:end="85:23"><expr pos:start="85:18" pos:end="85:22"><name pos:start="85:18" pos:end="85:18">j</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal></expr>;</init> <condition pos:start="85:25" pos:end="85:62"><expr pos:start="85:25" pos:end="85:61"><name pos:start="85:25" pos:end="85:25">j</name> <operator pos:start="85:27" pos:end="85:27">&lt;</operator> <name pos:start="85:29" pos:end="85:42"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:39">programs</name><index pos:start="85:40" pos:end="85:42">[<expr pos:start="85:41" pos:end="85:41"><name pos:start="85:41" pos:end="85:41">i</name></expr>]</index></name><operator pos:start="85:43" pos:end="85:44">-&gt;</operator><name pos:start="85:45" pos:end="85:61">nb_stream_indexes</name></expr>;</condition> <incr pos:start="85:64" pos:end="85:66"><expr pos:start="85:64" pos:end="85:66"><name pos:start="85:64" pos:end="85:64">j</name><operator pos:start="85:65" pos:end="85:66">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:17" pos:end="89:29"><block_content pos:start="87:17" pos:end="89:29">

                <if_stmt pos:start="87:17" pos:end="89:29"><if pos:start="87:17" pos:end="89:29">if <condition pos:start="87:20" pos:end="87:65">(<expr pos:start="87:21" pos:end="87:64"><name pos:start="87:21" pos:end="87:29"><name pos:start="87:21" pos:end="87:22">st</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:29">index</name></name> <operator pos:start="87:31" pos:end="87:32">==</operator> <name pos:start="87:34" pos:end="87:47"><name pos:start="87:34" pos:end="87:34">s</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:44">programs</name><index pos:start="87:45" pos:end="87:47">[<expr pos:start="87:46" pos:end="87:46"><name pos:start="87:46" pos:end="87:46">i</name></expr>]</index></name><operator pos:start="87:48" pos:end="87:49">-&gt;</operator><name pos:start="87:50" pos:end="87:64"><name pos:start="87:50" pos:end="87:61">stream_index</name><index pos:start="87:62" pos:end="87:64">[<expr pos:start="87:63" pos:end="87:63"><name pos:start="87:63" pos:end="87:63">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="89:21" pos:end="89:29"><block_content pos:start="89:21" pos:end="89:29">

                    <return pos:start="89:21" pos:end="89:29">return <expr pos:start="89:28" pos:end="89:28"><literal type="number" pos:start="89:28" pos:end="89:28">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

        </block_content>}</block></for>

        <return pos:start="93:9" pos:end="93:17">return <expr pos:start="93:16" pos:end="93:16"><literal type="number" pos:start="93:16" pos:end="93:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="107:5">else if <condition pos:start="95:15" pos:end="95:28">(<expr pos:start="95:16" pos:end="95:27"><operator pos:start="95:16" pos:end="95:16">*</operator><name pos:start="95:17" pos:end="95:20">spec</name> <operator pos:start="95:22" pos:end="95:23">==</operator> <literal type="char" pos:start="95:25" pos:end="95:27">'#'</literal></expr>)</condition> <block pos:start="95:30" pos:end="107:5">{<block_content pos:start="97:9" pos:end="105:33">

        <decl_stmt pos:start="97:9" pos:end="97:16"><decl pos:start="97:9" pos:end="97:15"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:15">sid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:21"><decl pos:start="99:9" pos:end="99:20"><type pos:start="99:9" pos:end="99:14"><name pos:start="99:9" pos:end="99:12">char</name> <modifier pos:start="99:14" pos:end="99:14">*</modifier></type><name pos:start="99:15" pos:end="99:20">endptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:11">sid</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:42"><name pos:start="101:15" pos:end="101:20">strtol</name><argument_list pos:start="101:21" pos:end="101:42">(<argument pos:start="101:22" pos:end="101:29"><expr pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:25">spec</name> <operator pos:start="101:27" pos:end="101:27">+</operator> <literal type="number" pos:start="101:29" pos:end="101:29">1</literal></expr></argument>, <argument pos:start="101:32" pos:end="101:38"><expr pos:start="101:32" pos:end="101:38"><operator pos:start="101:32" pos:end="101:32">&amp;</operator><name pos:start="101:33" pos:end="101:38">endptr</name></expr></argument>, <argument pos:start="101:41" pos:end="101:41"><expr pos:start="101:41" pos:end="101:41"><literal type="number" pos:start="101:41" pos:end="101:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:33"><if pos:start="103:9" pos:end="105:33">if <condition pos:start="103:12" pos:end="103:21">(<expr pos:start="103:13" pos:end="103:20"><operator pos:start="103:13" pos:end="103:13">!</operator><operator pos:start="103:14" pos:end="103:14">*</operator><name pos:start="103:15" pos:end="103:20">endptr</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:33"><block_content pos:start="105:13" pos:end="105:33">

            <return pos:start="105:13" pos:end="105:33">return <expr pos:start="105:20" pos:end="105:32"><name pos:start="105:20" pos:end="105:25"><name pos:start="105:20" pos:end="105:21">st</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:25">id</name></name> <operator pos:start="105:27" pos:end="105:28">==</operator> <name pos:start="105:30" pos:end="105:32">sid</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="107:7" pos:end="109:17">else if <condition pos:start="107:15" pos:end="107:22">(<expr pos:start="107:16" pos:end="107:21"><operator pos:start="107:16" pos:end="107:16">!</operator><operator pos:start="107:17" pos:end="107:17">*</operator><name pos:start="107:18" pos:end="107:21">spec</name></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:17"><block_content pos:start="109:9" pos:end="109:17"> <comment type="block" pos:start="107:24" pos:end="107:64">/* empty specifier, matches everything */</comment>

        <return pos:start="109:9" pos:end="109:17">return <expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:69"><expr pos:start="113:5" pos:end="113:68"><call pos:start="113:5" pos:end="113:68"><name pos:start="113:5" pos:end="113:10">av_log</name><argument_list pos:start="113:11" pos:end="113:68">(<argument pos:start="113:12" pos:end="113:12"><expr pos:start="113:12" pos:end="113:12"><name pos:start="113:12" pos:end="113:12">s</name></expr></argument>, <argument pos:start="113:15" pos:end="113:26"><expr pos:start="113:15" pos:end="113:26"><name pos:start="113:15" pos:end="113:26">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:29" pos:end="113:61"><expr pos:start="113:29" pos:end="113:61"><literal type="string" pos:start="113:29" pos:end="113:61">"Invalid stream specifier: %s.\n"</literal></expr></argument>, <argument pos:start="113:64" pos:end="113:67"><expr pos:start="113:64" pos:end="113:67"><name pos:start="113:64" pos:end="113:67">spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:27">return <expr pos:start="115:12" pos:end="115:26"><call pos:start="115:12" pos:end="115:26"><name pos:start="115:12" pos:end="115:18">AVERROR</name><argument_list pos:start="115:19" pos:end="115:26">(<argument pos:start="115:20" pos:end="115:25"><expr pos:start="115:20" pos:end="115:25"><name pos:start="115:20" pos:end="115:25">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
