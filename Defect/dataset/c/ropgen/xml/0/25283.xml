<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25283.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BlockDriverState</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:39">check_to_replace_node</name><parameter_list pos:start="1:40" pos:end="1:76">(<parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:61">node_name</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:68">Error</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier><modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:25">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:35">to_replace_bs</name> <init pos:start="5:37" pos:end="5:63">= <expr pos:start="5:39" pos:end="5:63"><call pos:start="5:39" pos:end="5:63"><name pos:start="5:39" pos:end="5:52">bdrv_find_node</name><argument_list pos:start="5:53" pos:end="5:63">(<argument pos:start="5:54" pos:end="5:62"><expr pos:start="5:54" pos:end="5:62"><name pos:start="5:54" pos:end="5:62">node_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AioContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:27">aio_context</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:23">(<expr pos:start="11:9" pos:end="11:22"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:22">to_replace_bs</name></expr>)</condition> <block pos:start="11:25" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:20">

        <expr_stmt pos:start="13:9" pos:end="13:64"><expr pos:start="13:9" pos:end="13:63"><call pos:start="13:9" pos:end="13:63"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="13:63">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:51"><expr pos:start="13:26" pos:end="13:51"><literal type="string" pos:start="13:26" pos:end="13:51">"Node name '%s' not found"</literal></expr></argument>, <argument pos:start="13:54" pos:end="13:62"><expr pos:start="13:54" pos:end="13:62"><name pos:start="13:54" pos:end="13:62">node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:54"><expr pos:start="21:5" pos:end="21:53"><name pos:start="21:5" pos:end="21:15">aio_context</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:53"><name pos:start="21:19" pos:end="21:38">bdrv_get_aio_context</name><argument_list pos:start="21:39" pos:end="21:53">(<argument pos:start="21:40" pos:end="21:52"><expr pos:start="21:40" pos:end="21:52"><name pos:start="21:40" pos:end="21:52">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:37"><expr pos:start="23:5" pos:end="23:36"><call pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:23">aio_context_acquire</name><argument_list pos:start="23:24" pos:end="23:36">(<argument pos:start="23:25" pos:end="23:35"><expr pos:start="23:25" pos:end="23:35"><name pos:start="23:25" pos:end="23:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:71">(<expr pos:start="27:9" pos:end="27:70"><call pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:26">bdrv_op_is_blocked</name><argument_list pos:start="27:27" pos:end="27:70">(<argument pos:start="27:28" pos:end="27:40"><expr pos:start="27:28" pos:end="27:40"><name pos:start="27:28" pos:end="27:40">to_replace_bs</name></expr></argument>, <argument pos:start="27:43" pos:end="27:63"><expr pos:start="27:43" pos:end="27:63"><name pos:start="27:43" pos:end="27:63">BLOCK_OP_TYPE_REPLACE</name></expr></argument>, <argument pos:start="27:66" pos:end="27:69"><expr pos:start="27:66" pos:end="27:69"><name pos:start="27:66" pos:end="27:69">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:73" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:29"><expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:21">to_replace_bs</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:28">NULL</name></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="45:7">/* We don't want arbitrary node of the BDS chain to be replaced only the top

     * most non filter in order to prevent data corruption.

     * Another benefit is that this tests exclude backing files which are

     * blocked by the backing blockers.

     */</comment>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:49">(<expr pos:start="47:9" pos:end="47:48"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:48"><name pos:start="47:10" pos:end="47:33">bdrv_is_first_non_filter</name><argument_list pos:start="47:34" pos:end="47:48">(<argument pos:start="47:35" pos:end="47:47"><expr pos:start="47:35" pos:end="47:47"><name pos:start="47:35" pos:end="47:47">to_replace_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:51" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:17">

        <expr_stmt pos:start="49:9" pos:end="49:69"><expr pos:start="49:9" pos:end="49:68"><call pos:start="49:9" pos:end="49:68"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="49:68">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:67"><expr pos:start="49:26" pos:end="49:67"><literal type="string" pos:start="49:26" pos:end="49:67">"Only top most non filter can be replaced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:21">to_replace_bs</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:28">NULL</name></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="59:1" pos:end="59:4"><name pos:start="59:1" pos:end="59:3">out</name>:</label>

    <expr_stmt pos:start="61:5" pos:end="61:37"><expr pos:start="61:5" pos:end="61:36"><call pos:start="61:5" pos:end="61:36"><name pos:start="61:5" pos:end="61:23">aio_context_release</name><argument_list pos:start="61:24" pos:end="61:36">(<argument pos:start="61:25" pos:end="61:35"><expr pos:start="61:25" pos:end="61:35"><name pos:start="61:25" pos:end="61:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="63:5" pos:end="63:25">return <expr pos:start="63:12" pos:end="63:24"><name pos:start="63:12" pos:end="63:24">to_replace_bs</name></expr>;</return>

</block_content>}</block></function>
</unit>
