<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21537.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">raw_aio_cancel</name><parameter_list pos:start="1:27" pos:end="1:54">(<parameter pos:start="1:28" pos:end="1:53"><decl pos:start="1:28" pos:end="1:53"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:43">BlockDriverAIOCB</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">blockacb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:5">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RawAIOCB</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">acb</name> <init pos:start="7:19" pos:end="7:40">= <expr pos:start="7:21" pos:end="7:40"><operator pos:start="7:21" pos:end="7:21">(</operator><name pos:start="7:22" pos:end="7:29">RawAIOCB</name> <operator pos:start="7:31" pos:end="7:31">*</operator><operator pos:start="7:32" pos:end="7:32">)</operator><name pos:start="7:33" pos:end="7:40">blockacb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:12">RawAIOCB</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier><modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">pacb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:57"><expr pos:start="13:5" pos:end="13:56"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:56"><name pos:start="13:11" pos:end="13:20">aio_cancel</name><argument_list pos:start="13:21" pos:end="13:56">(<argument pos:start="13:22" pos:end="13:42"><expr pos:start="13:22" pos:end="13:42"><name pos:start="13:22" pos:end="13:42"><name pos:start="13:22" pos:end="13:24">acb</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:31">aiocb</name><operator pos:start="13:32" pos:end="13:32">.</operator><name pos:start="13:33" pos:end="13:42">aio_fildes</name></name></expr></argument>, <argument pos:start="13:45" pos:end="13:55"><expr pos:start="13:45" pos:end="13:55"><operator pos:start="13:45" pos:end="13:45">&amp;</operator><name pos:start="13:46" pos:end="13:55"><name pos:start="13:46" pos:end="13:48">acb</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:55">aiocb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:31">(<expr pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <name pos:start="15:16" pos:end="15:30">AIO_NOTCANCELED</name></expr>)</condition> <block pos:start="15:33" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:54">

        <comment type="block" pos:start="17:9" pos:end="19:16">/* fail safe: if the aio could not be canceled, we wait for

           it */</comment>

        <while pos:start="21:9" pos:end="21:54">while <condition pos:start="21:15" pos:end="21:53">(<expr pos:start="21:16" pos:end="21:52"><call pos:start="21:16" pos:end="21:37"><name pos:start="21:16" pos:end="21:24">aio_error</name><argument_list pos:start="21:25" pos:end="21:37">(<argument pos:start="21:26" pos:end="21:36"><expr pos:start="21:26" pos:end="21:36"><operator pos:start="21:26" pos:end="21:26">&amp;</operator><name pos:start="21:27" pos:end="21:36"><name pos:start="21:27" pos:end="21:29">acb</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:36">aiocb</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:39" pos:end="21:40">==</operator> <name pos:start="21:42" pos:end="21:52">EINPROGRESS</name></expr>)</condition><block type="pseudo" pos:start="21:54" pos:end="21:54"><block_content pos:start="21:54" pos:end="21:54"><empty_stmt pos:start="21:54" pos:end="21:54">;</empty_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:44">/* remove the callback from the queue */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:8">pacb</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <operator pos:start="29:12" pos:end="29:12">&amp;</operator><name pos:start="29:13" pos:end="29:38"><name pos:start="29:13" pos:end="29:27">posix_aio_state</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:38">first_aio</name></name></expr>;</expr_stmt>

    <for pos:start="31:5" pos:end="51:5">for<control pos:start="31:8" pos:end="31:11">(<init pos:start="31:9" pos:end="31:9">;</init><condition pos:start="31:10" pos:end="31:10">;</condition><incr/>)</control> <block pos:start="31:13" pos:end="51:5">{<block_content pos:start="33:9" pos:end="49:26">

        <if_stmt pos:start="33:9" pos:end="47:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:26">(<expr pos:start="33:13" pos:end="33:25"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:17">pacb</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="37:11" pos:end="47:9">else if <condition pos:start="37:19" pos:end="37:32">(<expr pos:start="37:20" pos:end="37:31"><operator pos:start="37:20" pos:end="37:20">*</operator><name pos:start="37:21" pos:end="37:24">pacb</name> <operator pos:start="37:26" pos:end="37:27">==</operator> <name pos:start="37:29" pos:end="37:31">acb</name></expr>)</condition> <block pos:start="37:34" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:18">

            <expr_stmt pos:start="39:13" pos:end="39:30"><expr pos:start="39:13" pos:end="39:29"><operator pos:start="39:13" pos:end="39:13">*</operator><name pos:start="39:14" pos:end="39:17">pacb</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:29"><name pos:start="39:21" pos:end="39:23">acb</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:29">next</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><call pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:27">raw_fd_pool_put</name><argument_list pos:start="41:28" pos:end="41:32">(<argument pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:31">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:34"><expr pos:start="43:13" pos:end="43:33"><call pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:28">qemu_aio_release</name><argument_list pos:start="43:29" pos:end="43:33">(<argument pos:start="43:30" pos:end="43:32"><expr pos:start="43:30" pos:end="43:32"><name pos:start="43:30" pos:end="43:32">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:26"><expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:12">pacb</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <operator pos:start="49:16" pos:end="49:16">&amp;</operator><name pos:start="49:17" pos:end="49:25"><name pos:start="49:17" pos:end="49:19">acb</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:25">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
