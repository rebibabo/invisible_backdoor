<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8639.c" pos:tabs="8"><function pos:start="1:1" pos:end="271:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_rle</name><parameter_list pos:start="1:22" pos:end="5:74">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:39"><name pos:start="1:23" pos:end="1:35">GetBitContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">gb</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:48">uint8_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">pal_dst</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:73">pal_stride</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:38"><decl pos:start="3:23" pos:end="3:38"><type pos:start="3:23" pos:end="3:38"><name pos:start="3:23" pos:end="3:29">uint8_t</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:38">rgb_dst</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:54">rgb_stride</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:69"><decl pos:start="3:57" pos:end="3:69"><type pos:start="3:57" pos:end="3:69"><name pos:start="3:57" pos:end="3:64">uint32_t</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:69">pal</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:34"><decl pos:start="5:23" pos:end="5:34"><type pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:25">int</name></type> <name pos:start="5:27" pos:end="5:34">keyframe</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:48"><decl pos:start="5:37" pos:end="5:48"><type pos:start="5:37" pos:end="5:48"><name pos:start="5:37" pos:end="5:39">int</name></type> <name pos:start="5:41" pos:end="5:48">kf_slipt</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:59"><decl pos:start="5:51" pos:end="5:59"><type pos:start="5:51" pos:end="5:59"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:59">slice</name></decl></parameter>, <parameter pos:start="5:62" pos:end="5:66"><decl pos:start="5:62" pos:end="5:66"><type pos:start="5:62" pos:end="5:66"><name pos:start="5:62" pos:end="5:64">int</name></type> <name pos:start="5:66" pos:end="5:66">w</name></decl></parameter>, <parameter pos:start="5:69" pos:end="5:73"><decl pos:start="5:69" pos:end="5:73"><type pos:start="5:69" pos:end="5:73"><name pos:start="5:69" pos:end="5:71">int</name></type> <name pos:start="5:73" pos:end="5:73">h</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="271:1">{<block_content pos:start="9:5" pos:end="269:13">

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:21"><name pos:start="9:13" pos:end="9:16">bits</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">270</literal></expr>]</index></name> <init pos:start="9:23" pos:end="9:29">= <expr pos:start="9:25" pos:end="9:29"><block pos:start="9:25" pos:end="9:29">{ <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23"><name pos:start="11:14" pos:end="11:18">codes</name><index pos:start="11:19" pos:end="11:23">[<expr pos:start="11:20" pos:end="11:22"><literal type="number" pos:start="11:20" pos:end="11:22">270</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">VLC</name></type> <name pos:start="13:9" pos:end="13:11">vlc</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:77"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:22">current_length</name> <init pos:start="17:24" pos:end="17:26">= <expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr></init></decl>, <decl pos:start="17:29" pos:end="17:42"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:29" pos:end="17:38">read_codes</name> <init pos:start="17:40" pos:end="17:42">= <expr pos:start="17:42" pos:end="17:42"><literal type="number" pos:start="17:42" pos:end="17:42">0</literal></expr></init></decl>, <decl pos:start="17:45" pos:end="17:57"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:45" pos:end="17:53">next_code</name> <init pos:start="17:55" pos:end="17:57">= <expr pos:start="17:57" pos:end="17:57"><literal type="number" pos:start="17:57" pos:end="17:57">0</literal></expr></init></decl>, <decl pos:start="17:60" pos:end="17:76"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:60" pos:end="17:72">current_codes</name> <init pos:start="17:74" pos:end="17:76">= <expr pos:start="17:76" pos:end="17:76"><literal type="number" pos:start="17:76" pos:end="17:76">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:42"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:23">remaining_codes</name></decl>, <decl pos:start="19:26" pos:end="19:38"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:26" pos:end="19:38">surplus_codes</name></decl>, <decl pos:start="19:41" pos:end="19:41"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:41" pos:end="19:41">i</name></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:45"><decl pos:start="23:5" pos:end="23:44"><type pos:start="23:5" pos:end="23:13"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:13">int</name></type> <name pos:start="23:15" pos:end="23:27">alphabet_size</name> <init pos:start="23:29" pos:end="23:44">= <expr pos:start="23:31" pos:end="23:44"><literal type="number" pos:start="23:31" pos:end="23:35">270</literal> <operator pos:start="23:35" pos:end="23:35">-</operator> <name pos:start="23:37" pos:end="23:44">keyframe</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:52"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:19">last_symbol</name> <init pos:start="27:21" pos:end="27:23">= <expr pos:start="27:23" pos:end="27:23"><literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr></init></decl>, <decl pos:start="27:26" pos:end="27:35"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:26" pos:end="27:31">repeat</name> <init pos:start="27:33" pos:end="27:35">= <expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">0</literal></expr></init></decl>, <decl pos:start="27:38" pos:end="27:51"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:38" pos:end="27:47">prev_avail</name> <init pos:start="27:49" pos:end="27:51">= <expr pos:start="27:51" pos:end="27:51"><literal type="number" pos:start="27:51" pos:end="27:51">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="79:5"><if pos:start="31:5" pos:end="63:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:17">keyframe</name></expr>)</condition> <block pos:start="31:20" pos:end="63:5">{<block_content pos:start="33:9" pos:end="61:27">

        <decl_stmt pos:start="33:9" pos:end="33:31"><decl pos:start="33:9" pos:end="33:13"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:13">x</name></decl>, <decl pos:start="33:16" pos:end="33:16"><type ref="prev" pos:start="33:9" pos:end="33:11"/><name pos:start="33:16" pos:end="33:16">y</name></decl>, <decl pos:start="33:19" pos:end="33:23"><type ref="prev" pos:start="33:9" pos:end="33:11"/><name pos:start="33:19" pos:end="33:23">clipw</name></decl>, <decl pos:start="33:26" pos:end="33:30"><type ref="prev" pos:start="33:9" pos:end="33:11"/><name pos:start="33:26" pos:end="33:30">cliph</name></decl>;</decl_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:33"><expr pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:9">x</name>     <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:24">get_bits</name><argument_list pos:start="37:25" pos:end="37:32">(<argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><name pos:start="37:26" pos:end="37:27">gb</name></expr></argument>, <argument pos:start="37:30" pos:end="37:31"><expr pos:start="37:30" pos:end="37:31"><literal type="number" pos:start="37:30" pos:end="37:31">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:9">y</name>     <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:32"><name pos:start="39:17" pos:end="39:24">get_bits</name><argument_list pos:start="39:25" pos:end="39:32">(<argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><name pos:start="39:26" pos:end="39:27">gb</name></expr></argument>, <argument pos:start="39:30" pos:end="39:31"><expr pos:start="39:30" pos:end="39:31"><literal type="number" pos:start="39:30" pos:end="39:31">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:37"><expr pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:13">clipw</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:24">get_bits</name><argument_list pos:start="41:25" pos:end="41:32">(<argument pos:start="41:26" pos:end="41:27"><expr pos:start="41:26" pos:end="41:27"><name pos:start="41:26" pos:end="41:27">gb</name></expr></argument>, <argument pos:start="41:30" pos:end="41:31"><expr pos:start="41:30" pos:end="41:31"><literal type="number" pos:start="41:30" pos:end="41:31">12</literal></expr></argument>)</argument_list></call> <operator pos:start="41:34" pos:end="41:34">+</operator> <literal type="number" pos:start="41:36" pos:end="41:36">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:13">cliph</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:24">get_bits</name><argument_list pos:start="43:25" pos:end="43:32">(<argument pos:start="43:26" pos:end="43:27"><expr pos:start="43:26" pos:end="43:27"><name pos:start="43:26" pos:end="43:27">gb</name></expr></argument>, <argument pos:start="43:30" pos:end="43:31"><expr pos:start="43:30" pos:end="43:31"><literal type="number" pos:start="43:30" pos:end="43:31">12</literal></expr></argument>)</argument_list></call> <operator pos:start="43:34" pos:end="43:34">+</operator> <literal type="number" pos:start="43:36" pos:end="43:36">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="47:9" pos:end="49:39"><if pos:start="47:9" pos:end="49:39">if <condition pos:start="47:12" pos:end="47:43">(<expr pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:13">x</name> <operator pos:start="47:15" pos:end="47:15">+</operator> <name pos:start="47:17" pos:end="47:21">clipw</name> <operator pos:start="47:23" pos:end="47:23">&gt;</operator> <name pos:start="47:25" pos:end="47:25">w</name> <operator pos:start="47:27" pos:end="47:28">||</operator> <name pos:start="47:30" pos:end="47:30">y</name> <operator pos:start="47:32" pos:end="47:32">+</operator> <name pos:start="47:34" pos:end="47:38">cliph</name> <operator pos:start="47:40" pos:end="47:40">&gt;</operator> <name pos:start="47:42" pos:end="47:42">h</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:39"><block_content pos:start="49:13" pos:end="49:39">

            <return pos:start="49:13" pos:end="49:39">return <expr pos:start="49:20" pos:end="49:38"><name pos:start="49:20" pos:end="49:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:15">pal_dst</name> <operator pos:start="51:17" pos:end="51:18">+=</operator> <name pos:start="51:20" pos:end="51:29">pal_stride</name> <operator pos:start="51:31" pos:end="51:31">*</operator> <name pos:start="51:33" pos:end="51:33">y</name> <operator pos:start="51:35" pos:end="51:35">+</operator> <name pos:start="51:37" pos:end="51:37">x</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:15">rgb_dst</name> <operator pos:start="53:17" pos:end="53:18">+=</operator> <name pos:start="53:20" pos:end="53:29">rgb_stride</name> <operator pos:start="53:31" pos:end="53:31">*</operator> <name pos:start="53:33" pos:end="53:33">y</name> <operator pos:start="53:35" pos:end="53:35">+</operator> <name pos:start="53:37" pos:end="53:37">x</name> <operator pos:start="53:39" pos:end="53:39">*</operator> <literal type="number" pos:start="53:41" pos:end="53:41">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:9">w</name>        <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:24">clipw</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:9">h</name>        <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:24">cliph</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:27"><if pos:start="59:9" pos:end="61:27">if <condition pos:start="59:12" pos:end="59:14">(<expr pos:start="59:13" pos:end="59:13"><name pos:start="59:13" pos:end="59:13">y</name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:27"><block_content pos:start="61:13" pos:end="61:27">

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:22">prev_avail</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="79:5">else <block pos:start="63:12" pos:end="79:5">{<block_content pos:start="65:9" pos:end="77:25">

        <if_stmt pos:start="65:9" pos:end="77:25"><if pos:start="65:9" pos:end="75:9">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:17">slice</name> <operator pos:start="65:19" pos:end="65:19">&gt;</operator> <literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr>)</condition> <block pos:start="65:24" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:34">

            <expr_stmt pos:start="67:13" pos:end="67:47"><expr pos:start="67:13" pos:end="67:46"><name pos:start="67:13" pos:end="67:19">pal_dst</name>   <operator pos:start="67:23" pos:end="67:24">+=</operator> <name pos:start="67:26" pos:end="67:35">pal_stride</name> <operator pos:start="67:37" pos:end="67:37">*</operator> <name pos:start="67:39" pos:end="67:46">kf_slipt</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:47"><expr pos:start="69:13" pos:end="69:46"><name pos:start="69:13" pos:end="69:19">rgb_dst</name>   <operator pos:start="69:23" pos:end="69:24">+=</operator> <name pos:start="69:26" pos:end="69:35">rgb_stride</name> <operator pos:start="69:37" pos:end="69:37">*</operator> <name pos:start="69:39" pos:end="69:46">kf_slipt</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:27"><expr pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:22">prev_avail</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <literal type="number" pos:start="71:26" pos:end="71:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:34"><expr pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:13">h</name>         <operator pos:start="73:23" pos:end="73:24">-=</operator> <name pos:start="73:26" pos:end="73:33">kf_slipt</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="77:25">else<block type="pseudo" pos:start="77:13" pos:end="77:25"><block_content pos:start="77:13" pos:end="77:25">

            <expr_stmt pos:start="77:13" pos:end="77:25"><expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:13">h</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <name pos:start="77:17" pos:end="77:24">kf_slipt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:29">/* read explicit codes */</comment>

    <do pos:start="85:5" pos:end="123:47">do <block pos:start="85:8" pos:end="123:5">{<block_content pos:start="87:9" pos:end="121:39">

        <while pos:start="87:9" pos:end="109:9">while <condition pos:start="87:15" pos:end="87:31">(<expr pos:start="87:16" pos:end="87:30"><name pos:start="87:16" pos:end="87:28">current_codes</name><operator pos:start="87:29" pos:end="87:30">--</operator></expr>)</condition> <block pos:start="87:33" pos:end="109:9">{<block_content pos:start="89:13" pos:end="107:25">

            <decl_stmt pos:start="89:13" pos:end="89:41"><decl pos:start="89:13" pos:end="89:40"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">int</name></type> <name pos:start="89:17" pos:end="89:22">symbol</name> <init pos:start="89:24" pos:end="89:40">= <expr pos:start="89:26" pos:end="89:40"><call pos:start="89:26" pos:end="89:40"><name pos:start="89:26" pos:end="89:33">get_bits</name><argument_list pos:start="89:34" pos:end="89:40">(<argument pos:start="89:35" pos:end="89:36"><expr pos:start="89:35" pos:end="89:36"><name pos:start="89:35" pos:end="89:36">gb</name></expr></argument>, <argument pos:start="89:39" pos:end="89:39"><expr pos:start="89:39" pos:end="89:39"><literal type="number" pos:start="89:39" pos:end="89:39">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="91:13" pos:end="97:61"><if pos:start="91:13" pos:end="93:40">if <condition pos:start="91:16" pos:end="91:41">(<expr pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:22">symbol</name> <operator pos:start="91:24" pos:end="91:25">&gt;=</operator> <literal type="number" pos:start="91:27" pos:end="91:31">204</literal> <operator pos:start="91:31" pos:end="91:31">-</operator> <name pos:start="91:33" pos:end="91:40">keyframe</name></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:40"><block_content pos:start="93:17" pos:end="93:40">

                <expr_stmt pos:start="93:17" pos:end="93:40"><expr pos:start="93:17" pos:end="93:39"><name pos:start="93:17" pos:end="93:22">symbol</name> <operator pos:start="93:24" pos:end="93:25">+=</operator> <literal type="number" pos:start="93:27" pos:end="93:30">14</literal> <operator pos:start="93:30" pos:end="93:30">-</operator> <name pos:start="93:32" pos:end="93:39">keyframe</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="95:13" pos:end="97:61">else if <condition pos:start="95:21" pos:end="95:34">(<expr pos:start="95:22" pos:end="95:33"><name pos:start="95:22" pos:end="95:27">symbol</name> <operator pos:start="95:29" pos:end="95:29">&gt;</operator> <literal type="number" pos:start="95:31" pos:end="95:33">189</literal></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:61"><block_content pos:start="97:17" pos:end="97:61">

                <expr_stmt pos:start="97:17" pos:end="97:61"><expr pos:start="97:17" pos:end="97:60"><name pos:start="97:17" pos:end="97:22">symbol</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:38"><name pos:start="97:26" pos:end="97:34">get_bits1</name><argument_list pos:start="97:35" pos:end="97:38">(<argument pos:start="97:36" pos:end="97:37"><expr pos:start="97:36" pos:end="97:37"><name pos:start="97:36" pos:end="97:37">gb</name></expr></argument>)</argument_list></call> <operator pos:start="97:40" pos:end="97:40">+</operator> <operator pos:start="97:42" pos:end="97:42">(</operator><name pos:start="97:43" pos:end="97:48">symbol</name> <operator pos:start="97:50" pos:end="97:51">&lt;&lt;</operator> <literal type="number" pos:start="97:53" pos:end="97:53">1</literal><operator pos:start="97:54" pos:end="97:54">)</operator> <operator pos:start="97:56" pos:end="97:56">-</operator> <literal type="number" pos:start="97:58" pos:end="97:60">190</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="101:43"><if pos:start="99:13" pos:end="101:43">if <condition pos:start="99:16" pos:end="99:29">(<expr pos:start="99:17" pos:end="99:28"><name pos:start="99:17" pos:end="99:28"><name pos:start="99:17" pos:end="99:20">bits</name><index pos:start="99:21" pos:end="99:28">[<expr pos:start="99:22" pos:end="99:27"><name pos:start="99:22" pos:end="99:27">symbol</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:43"><block_content pos:start="101:17" pos:end="101:43">

                <return pos:start="101:17" pos:end="101:43">return <expr pos:start="101:24" pos:end="101:42"><name pos:start="101:24" pos:end="101:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:43"><expr pos:start="103:13" pos:end="103:42"><name pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:16">bits</name><index pos:start="103:17" pos:end="103:24">[<expr pos:start="103:18" pos:end="103:23"><name pos:start="103:18" pos:end="103:23">symbol</name></expr>]</index></name>  <operator pos:start="103:27" pos:end="103:27">=</operator> <name pos:start="103:29" pos:end="103:42">current_length</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:40"><expr pos:start="105:13" pos:end="105:39"><name pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:17">codes</name><index pos:start="105:18" pos:end="105:25">[<expr pos:start="105:19" pos:end="105:24"><name pos:start="105:19" pos:end="105:24">symbol</name></expr>]</index></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <name pos:start="105:29" pos:end="105:37">next_code</name><operator pos:start="105:38" pos:end="105:39">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:25"><expr pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:22">read_codes</name><operator pos:start="107:23" pos:end="107:24">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="111:9" pos:end="111:25"><expr pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:22">current_length</name><operator pos:start="111:23" pos:end="111:24">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:28"><expr pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:17">next_code</name>     <operator pos:start="113:23" pos:end="113:25">&lt;&lt;=</operator> <literal type="number" pos:start="113:27" pos:end="113:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:60"><expr pos:start="115:9" pos:end="115:59"><name pos:start="115:9" pos:end="115:23">remaining_codes</name> <operator pos:start="115:25" pos:end="115:25">=</operator> <operator pos:start="115:27" pos:end="115:27">(</operator><literal type="number" pos:start="115:28" pos:end="115:28">1</literal> <operator pos:start="115:30" pos:end="115:31">&lt;&lt;</operator> <name pos:start="115:33" pos:end="115:46">current_length</name><operator pos:start="115:47" pos:end="115:47">)</operator> <operator pos:start="115:49" pos:end="115:49">-</operator> <name pos:start="115:51" pos:end="115:59">next_code</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:74"><expr pos:start="117:9" pos:end="117:73"><name pos:start="117:9" pos:end="117:21">current_codes</name>   <operator pos:start="117:25" pos:end="117:25">=</operator> <call pos:start="117:27" pos:end="117:73"><name pos:start="117:27" pos:end="117:34">get_bits</name><argument_list pos:start="117:35" pos:end="117:73">(<argument pos:start="117:36" pos:end="117:37"><expr pos:start="117:36" pos:end="117:37"><name pos:start="117:36" pos:end="117:37">gb</name></expr></argument>, <argument pos:start="117:40" pos:end="117:72"><expr pos:start="117:40" pos:end="117:72"><call pos:start="117:40" pos:end="117:72"><name pos:start="117:40" pos:end="117:51">av_ceil_log2</name><argument_list pos:start="117:52" pos:end="117:72">(<argument pos:start="117:53" pos:end="117:71"><expr pos:start="117:53" pos:end="117:71"><name pos:start="117:53" pos:end="117:67">remaining_codes</name> <operator pos:start="117:69" pos:end="117:69">+</operator> <literal type="number" pos:start="117:71" pos:end="117:71">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="121:39"><if pos:start="119:9" pos:end="121:39">if <condition pos:start="119:12" pos:end="119:67">(<expr pos:start="119:13" pos:end="119:66"><name pos:start="119:13" pos:end="119:26">current_length</name> <operator pos:start="119:28" pos:end="119:28">&gt;</operator> <literal type="number" pos:start="119:30" pos:end="119:31">22</literal> <operator pos:start="119:33" pos:end="119:34">||</operator> <name pos:start="119:36" pos:end="119:48">current_codes</name> <operator pos:start="119:50" pos:end="119:50">&gt;</operator> <name pos:start="119:52" pos:end="119:66">remaining_codes</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:39"><block_content pos:start="121:13" pos:end="121:39">

            <return pos:start="121:13" pos:end="121:39">return <expr pos:start="121:20" pos:end="121:38"><name pos:start="121:20" pos:end="121:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="123:13" pos:end="123:46">(<expr pos:start="123:14" pos:end="123:45"><name pos:start="123:14" pos:end="123:26">current_codes</name> <operator pos:start="123:28" pos:end="123:29">!=</operator> <name pos:start="123:31" pos:end="123:45">remaining_codes</name></expr>)</condition>;</do>



    <expr_stmt pos:start="127:5" pos:end="127:49"><expr pos:start="127:5" pos:end="127:48"><name pos:start="127:5" pos:end="127:19">remaining_codes</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:35">alphabet_size</name> <operator pos:start="127:37" pos:end="127:37">-</operator> <name pos:start="127:39" pos:end="127:48">read_codes</name></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:70">/* determine the minimum length to fit the rest of the alphabet */</comment>

    <while pos:start="133:5" pos:end="141:5">while <condition pos:start="133:11" pos:end="135:68">(<expr pos:start="133:12" pos:end="135:67"><operator pos:start="133:12" pos:end="133:12">(</operator><name pos:start="133:13" pos:end="133:25">surplus_codes</name> <operator pos:start="133:27" pos:end="133:27">=</operator> <operator pos:start="133:29" pos:end="133:29">(</operator><literal type="number" pos:start="133:30" pos:end="133:30">2</literal> <operator pos:start="133:32" pos:end="133:33">&lt;&lt;</operator> <name pos:start="133:35" pos:end="133:48">current_length</name><operator pos:start="133:49" pos:end="133:49">)</operator> <operator pos:start="133:51" pos:end="133:51">-</operator>

                            <operator pos:start="135:29" pos:end="135:29">(</operator><name pos:start="135:30" pos:end="135:38">next_code</name> <operator pos:start="135:40" pos:end="135:41">&lt;&lt;</operator> <literal type="number" pos:start="135:43" pos:end="135:43">1</literal><operator pos:start="135:44" pos:end="135:44">)</operator> <operator pos:start="135:46" pos:end="135:46">-</operator> <name pos:start="135:48" pos:end="135:62">remaining_codes</name><operator pos:start="135:63" pos:end="135:63">)</operator> <operator pos:start="135:65" pos:end="135:65">&lt;</operator> <literal type="number" pos:start="135:67" pos:end="135:67">0</literal></expr>)</condition> <block pos:start="135:70" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:24">

        <expr_stmt pos:start="137:9" pos:end="137:25"><expr pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:22">current_length</name><operator pos:start="137:23" pos:end="137:24">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:17">next_code</name> <operator pos:start="139:19" pos:end="139:21">&lt;&lt;=</operator> <literal type="number" pos:start="139:23" pos:end="139:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="145:5" pos:end="145:55">/* add the rest of the symbols lexicographically */</comment>

    <for pos:start="147:5" pos:end="163:9">for <control pos:start="147:9" pos:end="147:39">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">i</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:34"><expr pos:start="147:17" pos:end="147:33"><name pos:start="147:17" pos:end="147:17">i</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <name pos:start="147:21" pos:end="147:33">alphabet_size</name></expr>;</condition> <incr pos:start="147:36" pos:end="147:38"><expr pos:start="147:36" pos:end="147:38"><name pos:start="147:36" pos:end="147:36">i</name><operator pos:start="147:37" pos:end="147:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="149:9" pos:end="163:9"><block_content pos:start="149:9" pos:end="163:9">

        <if_stmt pos:start="149:9" pos:end="163:9"><if pos:start="149:9" pos:end="163:9">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:20"><name pos:start="149:14" pos:end="149:17">bits</name><index pos:start="149:18" pos:end="149:20">[<expr pos:start="149:19" pos:end="149:19"><name pos:start="149:19" pos:end="149:19">i</name></expr>]</index></name></expr>)</condition> <block pos:start="149:23" pos:end="163:9">{<block_content pos:start="151:13" pos:end="161:35">

            <if_stmt pos:start="151:13" pos:end="157:13"><if pos:start="151:13" pos:end="157:13">if <condition pos:start="151:16" pos:end="151:37">(<expr pos:start="151:17" pos:end="151:36"><name pos:start="151:17" pos:end="151:29">surplus_codes</name><operator pos:start="151:30" pos:end="151:31">--</operator> <operator pos:start="151:33" pos:end="151:34">==</operator> <literal type="number" pos:start="151:36" pos:end="151:36">0</literal></expr>)</condition> <block pos:start="151:39" pos:end="157:13">{<block_content pos:start="153:17" pos:end="155:32">

                <expr_stmt pos:start="153:17" pos:end="153:33"><expr pos:start="153:17" pos:end="153:32"><name pos:start="153:17" pos:end="153:30">current_length</name><operator pos:start="153:31" pos:end="153:32">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:32"><expr pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:25">next_code</name> <operator pos:start="155:27" pos:end="155:29">&lt;&lt;=</operator> <literal type="number" pos:start="155:31" pos:end="155:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:38"><expr pos:start="159:13" pos:end="159:37"><name pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:16">bits</name><index pos:start="159:17" pos:end="159:19">[<expr pos:start="159:18" pos:end="159:18"><name pos:start="159:18" pos:end="159:18">i</name></expr>]</index></name>  <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:37">current_length</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:35"><expr pos:start="161:13" pos:end="161:34"><name pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:17">codes</name><index pos:start="161:18" pos:end="161:20">[<expr pos:start="161:19" pos:end="161:19"><name pos:start="161:19" pos:end="161:19">i</name></expr>]</index></name> <operator pos:start="161:22" pos:end="161:22">=</operator> <name pos:start="161:24" pos:end="161:32">next_code</name><operator pos:start="161:33" pos:end="161:34">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>



    <if_stmt pos:start="167:5" pos:end="169:35"><if pos:start="167:5" pos:end="169:35">if <condition pos:start="167:8" pos:end="167:41">(<expr pos:start="167:9" pos:end="167:40"><name pos:start="167:9" pos:end="167:17">next_code</name> <operator pos:start="167:19" pos:end="167:20">!=</operator> <literal type="number" pos:start="167:22" pos:end="167:22">1</literal> <operator pos:start="167:24" pos:end="167:25">&lt;&lt;</operator> <name pos:start="167:27" pos:end="167:40">current_length</name></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:35"><block_content pos:start="169:9" pos:end="169:35">

        <return pos:start="169:9" pos:end="169:35">return <expr pos:start="169:16" pos:end="169:34"><name pos:start="169:16" pos:end="169:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="175:17"><if pos:start="173:5" pos:end="175:17">if <condition pos:start="173:8" pos:end="173:73">(<expr pos:start="173:9" pos:end="173:72"><name pos:start="173:9" pos:end="173:9">i</name> <operator pos:start="173:11" pos:end="173:11">=</operator> <call pos:start="173:13" pos:end="173:72"><name pos:start="173:13" pos:end="173:20">init_vlc</name><argument_list pos:start="173:21" pos:end="173:72">(<argument pos:start="173:22" pos:end="173:25"><expr pos:start="173:22" pos:end="173:25"><operator pos:start="173:22" pos:end="173:22">&amp;</operator><name pos:start="173:23" pos:end="173:25">vlc</name></expr></argument>, <argument pos:start="173:28" pos:end="173:28"><expr pos:start="173:28" pos:end="173:28"><literal type="number" pos:start="173:28" pos:end="173:28">9</literal></expr></argument>, <argument pos:start="173:31" pos:end="173:43"><expr pos:start="173:31" pos:end="173:43"><name pos:start="173:31" pos:end="173:43">alphabet_size</name></expr></argument>, <argument pos:start="173:46" pos:end="173:49"><expr pos:start="173:46" pos:end="173:49"><name pos:start="173:46" pos:end="173:49">bits</name></expr></argument>, <argument pos:start="173:52" pos:end="173:52"><expr pos:start="173:52" pos:end="173:52"><literal type="number" pos:start="173:52" pos:end="173:52">1</literal></expr></argument>, <argument pos:start="173:55" pos:end="173:55"><expr pos:start="173:55" pos:end="173:55"><literal type="number" pos:start="173:55" pos:end="173:55">1</literal></expr></argument>, <argument pos:start="173:58" pos:end="173:62"><expr pos:start="173:58" pos:end="173:62"><name pos:start="173:58" pos:end="173:62">codes</name></expr></argument>, <argument pos:start="173:65" pos:end="173:65"><expr pos:start="173:65" pos:end="173:65"><literal type="number" pos:start="173:65" pos:end="173:65">4</literal></expr></argument>, <argument pos:start="173:68" pos:end="173:68"><expr pos:start="173:68" pos:end="173:68"><literal type="number" pos:start="173:68" pos:end="173:68">4</literal></expr></argument>, <argument pos:start="173:71" pos:end="173:71"><expr pos:start="173:71" pos:end="173:71"><literal type="number" pos:start="173:71" pos:end="173:71">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:17"><block_content pos:start="175:9" pos:end="175:17">

        <return pos:start="175:9" pos:end="175:17">return <expr pos:start="175:16" pos:end="175:16"><name pos:start="175:16" pos:end="175:16">i</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:22">/* frame decode */</comment>

    <do pos:start="181:5" pos:end="263:18">do <block pos:start="181:8" pos:end="263:5">{<block_content pos:start="183:9" pos:end="261:23">

        <decl_stmt pos:start="183:9" pos:end="183:30"><decl pos:start="183:9" pos:end="183:29"><type pos:start="183:9" pos:end="183:17"><name pos:start="183:9" pos:end="183:15">uint8_t</name> <modifier pos:start="183:17" pos:end="183:17">*</modifier></type><name pos:start="183:18" pos:end="183:19">pp</name> <init pos:start="183:21" pos:end="183:29">= <expr pos:start="183:23" pos:end="183:29"><name pos:start="183:23" pos:end="183:29">pal_dst</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:30"><decl pos:start="185:9" pos:end="185:29"><type pos:start="185:9" pos:end="185:17"><name pos:start="185:9" pos:end="185:15">uint8_t</name> <modifier pos:start="185:17" pos:end="185:17">*</modifier></type><name pos:start="185:18" pos:end="185:19">rp</name> <init pos:start="185:21" pos:end="185:29">= <expr pos:start="185:23" pos:end="185:29"><name pos:start="185:23" pos:end="185:29">rgb_dst</name></expr></init></decl>;</decl_stmt>

        <do pos:start="187:9" pos:end="255:37">do <block pos:start="187:12" pos:end="255:9">{<block_content pos:start="189:13" pos:end="253:20">

            <if_stmt pos:start="189:13" pos:end="237:13"><if pos:start="189:13" pos:end="237:13">if <condition pos:start="189:16" pos:end="189:29">(<expr pos:start="189:17" pos:end="189:28"><name pos:start="189:17" pos:end="189:22">repeat</name><operator pos:start="189:23" pos:end="189:24">--</operator> <operator pos:start="189:26" pos:end="189:26">&lt;</operator> <literal type="number" pos:start="189:28" pos:end="189:28">1</literal></expr>)</condition> <block pos:start="189:31" pos:end="237:13">{<block_content pos:start="191:17" pos:end="235:42">

                <decl_stmt pos:start="191:17" pos:end="191:54"><decl pos:start="191:17" pos:end="191:53"><type pos:start="191:17" pos:end="191:19"><name pos:start="191:17" pos:end="191:19">int</name></type> <name pos:start="191:21" pos:end="191:21">b</name> <init pos:start="191:23" pos:end="191:53">= <expr pos:start="191:25" pos:end="191:53"><call pos:start="191:25" pos:end="191:53"><name pos:start="191:25" pos:end="191:32">get_vlc2</name><argument_list pos:start="191:33" pos:end="191:53">(<argument pos:start="191:34" pos:end="191:35"><expr pos:start="191:34" pos:end="191:35"><name pos:start="191:34" pos:end="191:35">gb</name></expr></argument>, <argument pos:start="191:38" pos:end="191:46"><expr pos:start="191:38" pos:end="191:46"><name pos:start="191:38" pos:end="191:46"><name pos:start="191:38" pos:end="191:40">vlc</name><operator pos:start="191:41" pos:end="191:41">.</operator><name pos:start="191:42" pos:end="191:46">table</name></name></expr></argument>, <argument pos:start="191:49" pos:end="191:49"><expr pos:start="191:49" pos:end="191:49"><literal type="number" pos:start="191:49" pos:end="191:49">9</literal></expr></argument>, <argument pos:start="191:52" pos:end="191:52"><expr pos:start="191:52" pos:end="191:52"><literal type="number" pos:start="191:52" pos:end="191:52">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="193:17" pos:end="235:42"><if pos:start="193:17" pos:end="195:36">if <condition pos:start="193:20" pos:end="193:28">(<expr pos:start="193:21" pos:end="193:27"><name pos:start="193:21" pos:end="193:21">b</name> <operator pos:start="193:23" pos:end="193:23">&lt;</operator> <literal type="number" pos:start="193:25" pos:end="193:27">256</literal></expr>)</condition><block type="pseudo" pos:start="195:21" pos:end="195:36"><block_content pos:start="195:21" pos:end="195:36">

                    <expr_stmt pos:start="195:21" pos:end="195:36"><expr pos:start="195:21" pos:end="195:35"><name pos:start="195:21" pos:end="195:31">last_symbol</name> <operator pos:start="195:33" pos:end="195:33">=</operator> <name pos:start="195:35" pos:end="195:35">b</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="197:17" pos:end="233:17">else if <condition pos:start="197:25" pos:end="197:33">(<expr pos:start="197:26" pos:end="197:32"><name pos:start="197:26" pos:end="197:26">b</name> <operator pos:start="197:28" pos:end="197:28">&lt;</operator> <literal type="number" pos:start="197:30" pos:end="197:32">268</literal></expr>)</condition> <block pos:start="197:35" pos:end="233:17">{<block_content pos:start="199:21" pos:end="231:21">

                    <expr_stmt pos:start="199:21" pos:end="199:29"><expr pos:start="199:21" pos:end="199:28"><name pos:start="199:21" pos:end="199:21">b</name> <operator pos:start="199:23" pos:end="199:24">-=</operator> <literal type="number" pos:start="199:26" pos:end="199:28">256</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="201:21" pos:end="203:49"><if pos:start="201:21" pos:end="203:49">if <condition pos:start="201:24" pos:end="201:32">(<expr pos:start="201:25" pos:end="201:31"><name pos:start="201:25" pos:end="201:25">b</name> <operator pos:start="201:27" pos:end="201:28">==</operator> <literal type="number" pos:start="201:30" pos:end="201:31">11</literal></expr>)</condition><block type="pseudo" pos:start="203:25" pos:end="203:49"><block_content pos:start="203:25" pos:end="203:49">

                        <expr_stmt pos:start="203:25" pos:end="203:49"><expr pos:start="203:25" pos:end="203:48"><name pos:start="203:25" pos:end="203:25">b</name> <operator pos:start="203:27" pos:end="203:27">=</operator> <call pos:start="203:29" pos:end="203:43"><name pos:start="203:29" pos:end="203:36">get_bits</name><argument_list pos:start="203:37" pos:end="203:43">(<argument pos:start="203:38" pos:end="203:39"><expr pos:start="203:38" pos:end="203:39"><name pos:start="203:38" pos:end="203:39">gb</name></expr></argument>, <argument pos:start="203:42" pos:end="203:42"><expr pos:start="203:42" pos:end="203:42"><literal type="number" pos:start="203:42" pos:end="203:42">4</literal></expr></argument>)</argument_list></call> <operator pos:start="203:45" pos:end="203:45">+</operator> <literal type="number" pos:start="203:47" pos:end="203:48">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <if_stmt pos:start="207:21" pos:end="213:49"><if pos:start="207:21" pos:end="209:35">if <condition pos:start="207:24" pos:end="207:27">(<expr pos:start="207:25" pos:end="207:26"><operator pos:start="207:25" pos:end="207:25">!</operator><name pos:start="207:26" pos:end="207:26">b</name></expr>)</condition><block type="pseudo" pos:start="209:25" pos:end="209:35"><block_content pos:start="209:25" pos:end="209:35">

                        <expr_stmt pos:start="209:25" pos:end="209:35"><expr pos:start="209:25" pos:end="209:34"><name pos:start="209:25" pos:end="209:30">repeat</name> <operator pos:start="209:32" pos:end="209:32">=</operator> <literal type="number" pos:start="209:34" pos:end="209:34">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="211:21" pos:end="213:49">else<block type="pseudo" pos:start="213:25" pos:end="213:49"><block_content pos:start="213:25" pos:end="213:49">

                        <expr_stmt pos:start="213:25" pos:end="213:49"><expr pos:start="213:25" pos:end="213:48"><name pos:start="213:25" pos:end="213:30">repeat</name> <operator pos:start="213:32" pos:end="213:32">=</operator> <call pos:start="213:34" pos:end="213:48"><name pos:start="213:34" pos:end="213:41">get_bits</name><argument_list pos:start="213:42" pos:end="213:48">(<argument pos:start="213:43" pos:end="213:44"><expr pos:start="213:43" pos:end="213:44"><name pos:start="213:43" pos:end="213:44">gb</name></expr></argument>, <argument pos:start="213:47" pos:end="213:47"><expr pos:start="213:47" pos:end="213:47"><name pos:start="213:47" pos:end="213:47">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="217:21" pos:end="217:43"><expr pos:start="217:21" pos:end="217:42"><name pos:start="217:21" pos:end="217:26">repeat</name> <operator pos:start="217:28" pos:end="217:29">+=</operator> <operator pos:start="217:31" pos:end="217:31">(</operator><literal type="number" pos:start="217:32" pos:end="217:32">1</literal> <operator pos:start="217:34" pos:end="217:35">&lt;&lt;</operator> <name pos:start="217:37" pos:end="217:37">b</name><operator pos:start="217:38" pos:end="217:38">)</operator> <operator pos:start="217:40" pos:end="217:40">-</operator> <literal type="number" pos:start="217:42" pos:end="217:42">1</literal></expr>;</expr_stmt>



                    <if_stmt pos:start="221:21" pos:end="231:21"><if pos:start="221:21" pos:end="231:21">if <condition pos:start="221:24" pos:end="221:42">(<expr pos:start="221:25" pos:end="221:41"><name pos:start="221:25" pos:end="221:35">last_symbol</name> <operator pos:start="221:37" pos:end="221:38">==</operator> <operator pos:start="221:40" pos:end="221:40">-</operator><literal type="number" pos:start="221:41" pos:end="221:41">2</literal></expr>)</condition> <block pos:start="221:44" pos:end="231:21">{<block_content pos:start="223:25" pos:end="229:43">

                        <decl_stmt pos:start="223:25" pos:end="223:67"><decl pos:start="223:25" pos:end="223:66"><type pos:start="223:25" pos:end="223:27"><name pos:start="223:25" pos:end="223:27">int</name></type> <name pos:start="223:29" pos:end="223:32">skip</name> <init pos:start="223:34" pos:end="223:66">= <expr pos:start="223:36" pos:end="223:66"><call pos:start="223:36" pos:end="223:66"><name pos:start="223:36" pos:end="223:40">FFMIN</name><argument_list pos:start="223:41" pos:end="223:66">(<argument pos:start="223:42" pos:end="223:47"><expr pos:start="223:42" pos:end="223:47"><name pos:start="223:42" pos:end="223:47">repeat</name></expr></argument>, <argument pos:start="223:50" pos:end="223:65"><expr pos:start="223:50" pos:end="223:65"><name pos:start="223:50" pos:end="223:56">pal_dst</name> <operator pos:start="223:58" pos:end="223:58">+</operator> <name pos:start="223:60" pos:end="223:60">w</name> <operator pos:start="223:62" pos:end="223:62">-</operator> <name pos:start="223:64" pos:end="223:65">pp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="225:25" pos:end="225:39"><expr pos:start="225:25" pos:end="225:38"><name pos:start="225:25" pos:end="225:30">repeat</name> <operator pos:start="225:32" pos:end="225:33">-=</operator> <name pos:start="225:35" pos:end="225:38">skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="227:25" pos:end="227:39"><expr pos:start="227:25" pos:end="227:38"><name pos:start="227:25" pos:end="227:26">pp</name>     <operator pos:start="227:32" pos:end="227:33">+=</operator> <name pos:start="227:35" pos:end="227:38">skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="229:25" pos:end="229:43"><expr pos:start="229:25" pos:end="229:42"><name pos:start="229:25" pos:end="229:26">rp</name>     <operator pos:start="229:32" pos:end="229:33">+=</operator> <name pos:start="229:35" pos:end="229:38">skip</name> <operator pos:start="229:40" pos:end="229:40">*</operator> <literal type="number" pos:start="229:42" pos:end="229:42">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="233:19" pos:end="235:42">else<block type="pseudo" pos:start="235:21" pos:end="235:42"><block_content pos:start="235:21" pos:end="235:42">

                    <expr_stmt pos:start="235:21" pos:end="235:42"><expr pos:start="235:21" pos:end="235:41"><name pos:start="235:21" pos:end="235:31">last_symbol</name> <operator pos:start="235:33" pos:end="235:33">=</operator> <literal type="number" pos:start="235:35" pos:end="235:39">267</literal> <operator pos:start="235:39" pos:end="235:39">-</operator> <name pos:start="235:41" pos:end="235:41">b</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="239:13" pos:end="251:13"><if pos:start="239:13" pos:end="245:13">if <condition pos:start="239:16" pos:end="239:33">(<expr pos:start="239:17" pos:end="239:32"><name pos:start="239:17" pos:end="239:27">last_symbol</name> <operator pos:start="239:29" pos:end="239:30">&gt;=</operator> <literal type="number" pos:start="239:32" pos:end="239:32">0</literal></expr>)</condition> <block pos:start="239:35" pos:end="245:13">{<block_content pos:start="241:17" pos:end="243:46">

                <expr_stmt pos:start="241:17" pos:end="241:34"><expr pos:start="241:17" pos:end="241:33"><operator pos:start="241:17" pos:end="241:17">*</operator><name pos:start="241:18" pos:end="241:19">pp</name> <operator pos:start="241:21" pos:end="241:21">=</operator> <name pos:start="241:23" pos:end="241:33">last_symbol</name></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:46"><expr pos:start="243:17" pos:end="243:45"><call pos:start="243:17" pos:end="243:45"><name pos:start="243:17" pos:end="243:23">AV_WB24</name><argument_list pos:start="243:24" pos:end="243:45">(<argument pos:start="243:25" pos:end="243:26"><expr pos:start="243:25" pos:end="243:26"><name pos:start="243:25" pos:end="243:26">rp</name></expr></argument>, <argument pos:start="243:29" pos:end="243:44"><expr pos:start="243:29" pos:end="243:44"><name pos:start="243:29" pos:end="243:44"><name pos:start="243:29" pos:end="243:31">pal</name><index pos:start="243:32" pos:end="243:44">[<expr pos:start="243:33" pos:end="243:43"><name pos:start="243:33" pos:end="243:43">last_symbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="245:15" pos:end="251:13">else if <condition pos:start="245:23" pos:end="245:55">(<expr pos:start="245:24" pos:end="245:54"><name pos:start="245:24" pos:end="245:34">last_symbol</name> <operator pos:start="245:36" pos:end="245:37">==</operator> <operator pos:start="245:39" pos:end="245:39">-</operator><literal type="number" pos:start="245:40" pos:end="245:40">1</literal> <operator pos:start="245:42" pos:end="245:43">&amp;&amp;</operator> <name pos:start="245:45" pos:end="245:54">prev_avail</name></expr>)</condition> <block pos:start="245:57" pos:end="251:13">{<block_content pos:start="247:17" pos:end="249:47">

                <expr_stmt pos:start="247:17" pos:end="247:41"><expr pos:start="247:17" pos:end="247:40"><operator pos:start="247:17" pos:end="247:17">*</operator><name pos:start="247:18" pos:end="247:19">pp</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <operator pos:start="247:23" pos:end="247:23">*</operator><operator pos:start="247:24" pos:end="247:24">(</operator><name pos:start="247:25" pos:end="247:26">pp</name> <operator pos:start="247:28" pos:end="247:28">-</operator> <name pos:start="247:30" pos:end="247:39">pal_stride</name><operator pos:start="247:40" pos:end="247:40">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:47"><expr pos:start="249:17" pos:end="249:46"><call pos:start="249:17" pos:end="249:46"><name pos:start="249:17" pos:end="249:22">memcpy</name><argument_list pos:start="249:23" pos:end="249:46">(<argument pos:start="249:24" pos:end="249:25"><expr pos:start="249:24" pos:end="249:25"><name pos:start="249:24" pos:end="249:25">rp</name></expr></argument>, <argument pos:start="249:28" pos:end="249:42"><expr pos:start="249:28" pos:end="249:42"><name pos:start="249:28" pos:end="249:29">rp</name> <operator pos:start="249:31" pos:end="249:31">-</operator> <name pos:start="249:33" pos:end="249:42">rgb_stride</name></expr></argument>, <argument pos:start="249:45" pos:end="249:45"><expr pos:start="249:45" pos:end="249:45"><literal type="number" pos:start="249:45" pos:end="249:45">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:20"><expr pos:start="253:13" pos:end="253:19"><name pos:start="253:13" pos:end="253:14">rp</name> <operator pos:start="253:16" pos:end="253:17">+=</operator> <literal type="number" pos:start="253:19" pos:end="253:19">3</literal></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="255:17" pos:end="255:36">(<expr pos:start="255:18" pos:end="255:35"><operator pos:start="255:18" pos:end="255:19">++</operator><name pos:start="255:20" pos:end="255:21">pp</name> <operator pos:start="255:23" pos:end="255:23">&lt;</operator> <name pos:start="255:25" pos:end="255:31">pal_dst</name> <operator pos:start="255:33" pos:end="255:33">+</operator> <name pos:start="255:35" pos:end="255:35">w</name></expr>)</condition>;</do>

        <expr_stmt pos:start="257:9" pos:end="257:32"><expr pos:start="257:9" pos:end="257:31"><name pos:start="257:9" pos:end="257:15">pal_dst</name>   <operator pos:start="257:19" pos:end="257:20">+=</operator> <name pos:start="257:22" pos:end="257:31">pal_stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:32"><expr pos:start="259:9" pos:end="259:31"><name pos:start="259:9" pos:end="259:15">rgb_dst</name>   <operator pos:start="259:19" pos:end="259:20">+=</operator> <name pos:start="259:22" pos:end="259:31">rgb_stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:23"><expr pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:18">prev_avail</name> <operator pos:start="261:20" pos:end="261:20">=</operator> <literal type="number" pos:start="261:22" pos:end="261:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="263:13" pos:end="263:17">(<expr pos:start="263:14" pos:end="263:16"><operator pos:start="263:14" pos:end="263:15">--</operator><name pos:start="263:16" pos:end="263:16">h</name></expr>)</condition>;</do>



    <expr_stmt pos:start="267:5" pos:end="267:22"><expr pos:start="267:5" pos:end="267:21"><call pos:start="267:5" pos:end="267:21"><name pos:start="267:5" pos:end="267:15">ff_free_vlc</name><argument_list pos:start="267:16" pos:end="267:21">(<argument pos:start="267:17" pos:end="267:20"><expr pos:start="267:17" pos:end="267:20"><operator pos:start="267:17" pos:end="267:17">&amp;</operator><name pos:start="267:18" pos:end="267:20">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="269:5" pos:end="269:13">return <expr pos:start="269:12" pos:end="269:12"><literal type="number" pos:start="269:12" pos:end="269:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
