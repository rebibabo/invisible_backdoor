<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1204.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:29">ahci_mem_read</name><parameter_list pos:start="1:30" pos:end="3:44">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:67"><decl pos:start="1:45" pos:end="1:67"><type pos:start="1:45" pos:end="1:67"><name pos:start="1:45" pos:end="1:62">target_phys_addr_t</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:43"><decl pos:start="3:31" pos:end="3:43"><type pos:start="3:31" pos:end="3:43"><name pos:start="3:31" pos:end="3:38">unsigned</name></type> <name pos:start="3:40" pos:end="3:43">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:15">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">AHCIState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:25">= <expr pos:start="7:20" pos:end="7:25"><name pos:start="7:20" pos:end="7:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="63:5"><if pos:start="13:5" pos:end="53:5">if <condition pos:start="13:8" pos:end="13:55">(<expr pos:start="13:9" pos:end="13:54"><name pos:start="13:9" pos:end="13:12">addr</name> <operator pos:start="13:14" pos:end="13:14">&lt;</operator> <name pos:start="13:16" pos:end="13:54">AHCI_GENERIC_HOST_CONTROL_REGS_MAX_ADDR</name></expr>)</condition> <block pos:start="13:57" pos:end="53:5">{<block_content pos:start="15:9" pos:end="51:73">

        <switch pos:start="15:9" pos:end="47:9">switch <condition pos:start="15:16" pos:end="15:21">(<expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">addr</name></expr>)</condition> <block pos:start="15:23" pos:end="47:9">{<block_content pos:start="17:9" pos:end="45:18">

        <case pos:start="17:9" pos:end="17:22">case <expr pos:start="17:14" pos:end="17:21"><name pos:start="17:14" pos:end="17:21">HOST_CAP</name></expr>:</case>

            <expr_stmt pos:start="19:13" pos:end="19:38"><expr pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:15">val</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:37"><name pos:start="19:19" pos:end="19:19">s</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:33">control_regs</name><operator pos:start="19:34" pos:end="19:34">.</operator><name pos:start="19:35" pos:end="19:37">cap</name></name></expr>;</expr_stmt>

            <break pos:start="21:13" pos:end="21:18">break;</break>

        <case pos:start="23:9" pos:end="23:22">case <expr pos:start="23:14" pos:end="23:21"><name pos:start="23:14" pos:end="23:21">HOST_CTL</name></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:38"><expr pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:15">val</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:37"><name pos:start="25:19" pos:end="25:19">s</name><operator pos:start="25:20" pos:end="25:21">-&gt;</operator><name pos:start="25:22" pos:end="25:33">control_regs</name><operator pos:start="25:34" pos:end="25:34">.</operator><name pos:start="25:35" pos:end="25:37">ghc</name></name></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        <case pos:start="29:9" pos:end="29:27">case <expr pos:start="29:14" pos:end="29:26"><name pos:start="29:14" pos:end="29:26">HOST_IRQ_STAT</name></expr>:</case>

            <expr_stmt pos:start="31:13" pos:end="31:44"><expr pos:start="31:13" pos:end="31:43"><name pos:start="31:13" pos:end="31:15">val</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:43"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:33">control_regs</name><operator pos:start="31:34" pos:end="31:34">.</operator><name pos:start="31:35" pos:end="31:43">irqstatus</name></name></expr>;</expr_stmt>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        <case pos:start="35:9" pos:end="35:29">case <expr pos:start="35:14" pos:end="35:28"><name pos:start="35:14" pos:end="35:28">HOST_PORTS_IMPL</name></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:38"><name pos:start="37:19" pos:end="37:19">s</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:33">control_regs</name><operator pos:start="37:34" pos:end="37:34">.</operator><name pos:start="37:35" pos:end="37:38">impl</name></name></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <case pos:start="41:9" pos:end="41:26">case <expr pos:start="41:14" pos:end="41:25"><name pos:start="41:14" pos:end="41:25">HOST_VERSION</name></expr>:</case>

            <expr_stmt pos:start="43:13" pos:end="43:42"><expr pos:start="43:13" pos:end="43:41"><name pos:start="43:13" pos:end="43:15">val</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:41"><name pos:start="43:19" pos:end="43:19">s</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:33">control_regs</name><operator pos:start="43:34" pos:end="43:34">.</operator><name pos:start="43:35" pos:end="43:41">version</name></name></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="51:9" pos:end="51:73"><expr pos:start="51:9" pos:end="51:72"><call pos:start="51:9" pos:end="51:72"><name pos:start="51:9" pos:end="51:15">DPRINTF</name><argument_list pos:start="51:16" pos:end="51:72">(<argument pos:start="51:17" pos:end="51:18"><expr pos:start="51:17" pos:end="51:18"><operator pos:start="51:17" pos:end="51:17">-</operator><literal type="number" pos:start="51:18" pos:end="51:18">1</literal></expr></argument>, <argument pos:start="51:21" pos:end="51:49"><expr pos:start="51:21" pos:end="51:49"><literal type="string" pos:start="51:21" pos:end="51:49">"(addr 0x%08X), val 0x%08X\n"</literal></expr></argument>, <argument pos:start="51:52" pos:end="51:66"><expr pos:start="51:52" pos:end="51:66"><operator pos:start="51:52" pos:end="51:52">(</operator><name pos:start="51:53" pos:end="51:60">unsigned</name><operator pos:start="51:61" pos:end="51:61">)</operator> <name pos:start="51:63" pos:end="51:66">addr</name></expr></argument>, <argument pos:start="51:69" pos:end="51:71"><expr pos:start="51:69" pos:end="51:71"><name pos:start="51:69" pos:end="51:71">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="63:5">else if <condition pos:start="53:15" pos:end="57:57">(<expr pos:start="53:16" pos:end="57:56"><operator pos:start="53:16" pos:end="53:16">(</operator><name pos:start="53:17" pos:end="53:20">addr</name> <operator pos:start="53:22" pos:end="53:23">&gt;=</operator> <name pos:start="53:25" pos:end="53:49">AHCI_PORT_REGS_START_ADDR</name><operator pos:start="53:50" pos:end="53:50">)</operator> <operator pos:start="53:52" pos:end="53:53">&amp;&amp;</operator>

               <operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:20">addr</name> <operator pos:start="55:22" pos:end="55:22">&lt;</operator> <operator pos:start="55:24" pos:end="55:24">(</operator><name pos:start="55:25" pos:end="55:49">AHCI_PORT_REGS_START_ADDR</name> <operator pos:start="55:51" pos:end="55:51">+</operator>

                <operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:25"><name pos:start="57:18" pos:end="57:18">s</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:25">ports</name></name> <operator pos:start="57:27" pos:end="57:27">*</operator> <name pos:start="57:29" pos:end="57:53">AHCI_PORT_ADDR_OFFSET_LEN</name><operator pos:start="57:54" pos:end="57:54">)</operator><operator pos:start="57:55" pos:end="57:55">)</operator><operator pos:start="57:56" pos:end="57:56">)</operator></expr>)</condition> <block pos:start="57:59" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:64">

        <expr_stmt pos:start="59:9" pos:end="61:64"><expr pos:start="59:9" pos:end="61:63"><name pos:start="59:9" pos:end="59:11">val</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="61:63"><name pos:start="59:15" pos:end="59:28">ahci_port_read</name><argument_list pos:start="59:29" pos:end="61:63">(<argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><name pos:start="59:30" pos:end="59:30">s</name></expr></argument>, <argument pos:start="59:33" pos:end="59:71"><expr pos:start="59:33" pos:end="59:71"><operator pos:start="59:33" pos:end="59:33">(</operator><name pos:start="59:34" pos:end="59:37">addr</name> <operator pos:start="59:39" pos:end="59:39">-</operator> <name pos:start="59:41" pos:end="59:65">AHCI_PORT_REGS_START_ADDR</name><operator pos:start="59:66" pos:end="59:66">)</operator> <operator pos:start="59:68" pos:end="59:69">&gt;&gt;</operator> <literal type="number" pos:start="59:71" pos:end="59:71">7</literal></expr></argument>,

                             <argument pos:start="61:30" pos:end="61:62"><expr pos:start="61:30" pos:end="61:62"><name pos:start="61:30" pos:end="61:33">addr</name> <operator pos:start="61:35" pos:end="61:35">&amp;</operator> <name pos:start="61:37" pos:end="61:62">AHCI_PORT_ADDR_OFFSET_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="67:5" pos:end="67:15">return <expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
