<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12472.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">mptsas_fetch_request</name><parameter_list pos:start="1:33" pos:end="1:48">(<parameter pos:start="1:34" pos:end="1:47"><decl pos:start="1:34" pos:end="1:47"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:44">MPTSASState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">pci</name> <init pos:start="5:20" pos:end="5:36">= <expr pos:start="5:22" pos:end="5:36"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:31">PCIDevice</name> <operator pos:start="5:33" pos:end="5:33">*</operator><operator pos:start="5:34" pos:end="5:34">)</operator> <name pos:start="5:36" pos:end="5:36">s</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:37"><name pos:start="7:10" pos:end="7:12">req</name><index pos:start="7:13" pos:end="7:37">[<expr pos:start="7:14" pos:end="7:36"><name pos:start="7:14" pos:end="7:36">MPTSAS_MAX_REQUEST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">MPIRequestHeader</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">hdr</name> <init pos:start="9:27" pos:end="9:51">= <expr pos:start="9:29" pos:end="9:51"><operator pos:start="9:29" pos:end="9:29">(</operator><name pos:start="9:30" pos:end="9:45">MPIRequestHeader</name> <operator pos:start="9:47" pos:end="9:47">*</operator><operator pos:start="9:48" pos:end="9:48">)</operator><name pos:start="9:49" pos:end="9:51">req</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:15">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:46">(<expr pos:start="17:9" pos:end="17:45"><name pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:16">state</name></name> <operator pos:start="17:18" pos:end="17:19">!=</operator> <name pos:start="17:21" pos:end="17:45">MPI_IOC_STATE_OPERATIONAL</name></expr>)</condition> <block pos:start="17:48" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:57"><expr pos:start="19:9" pos:end="19:56"><call pos:start="19:9" pos:end="19:56"><name pos:start="19:9" pos:end="19:24">mptsas_set_fault</name><argument_list pos:start="19:25" pos:end="19:56">(<argument pos:start="19:26" pos:end="19:26"><expr pos:start="19:26" pos:end="19:26"><name pos:start="19:26" pos:end="19:26">s</name></expr></argument>, <argument pos:start="19:29" pos:end="19:55"><expr pos:start="19:29" pos:end="19:55"><name pos:start="19:29" pos:end="19:55">MPI_IOCSTATUS_INVALID_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:55">/* Read the message header from the guest first. */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:8">addr</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <name pos:start="29:12" pos:end="29:32"><name pos:start="29:12" pos:end="29:12">s</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:32">host_mfa_high_addr</name></name> <operator pos:start="29:34" pos:end="29:34">|</operator> <call pos:start="29:36" pos:end="29:67"><name pos:start="29:36" pos:end="29:50">MPTSAS_FIFO_GET</name><argument_list pos:start="29:51" pos:end="29:67">(<argument pos:start="29:52" pos:end="29:52"><expr pos:start="29:52" pos:end="29:52"><name pos:start="29:52" pos:end="29:52">s</name></expr></argument>, <argument pos:start="29:55" pos:end="29:66"><expr pos:start="29:55" pos:end="29:66"><name pos:start="29:55" pos:end="29:66">request_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><call pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:16">pci_dma_read</name><argument_list pos:start="31:17" pos:end="31:45">(<argument pos:start="31:18" pos:end="31:20"><expr pos:start="31:18" pos:end="31:20"><name pos:start="31:18" pos:end="31:20">pci</name></expr></argument>, <argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><name pos:start="31:23" pos:end="31:26">addr</name></expr></argument>, <argument pos:start="31:29" pos:end="31:31"><expr pos:start="31:29" pos:end="31:31"><name pos:start="31:29" pos:end="31:31">req</name></expr></argument>, <argument pos:start="31:34" pos:end="31:44"><expr pos:start="31:34" pos:end="31:44"><sizeof pos:start="31:34" pos:end="31:44">sizeof<argument_list pos:start="31:40" pos:end="31:44">(<argument pos:start="31:41" pos:end="31:43"><expr pos:start="31:41" pos:end="31:43"><name pos:start="31:41" pos:end="31:43">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="55:5"><if pos:start="35:5" pos:end="55:5">if <condition pos:start="35:8" pos:end="37:41">(<expr pos:start="35:9" pos:end="37:40"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">hdr</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:21">Function</name></name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <call pos:start="35:25" pos:end="35:53"><name pos:start="35:25" pos:end="35:34">ARRAY_SIZE</name><argument_list pos:start="35:35" pos:end="35:53">(<argument pos:start="35:36" pos:end="35:52"><expr pos:start="35:36" pos:end="35:52"><name pos:start="35:36" pos:end="35:52">mpi_request_sizes</name></expr></argument>)</argument_list></call> <operator pos:start="35:55" pos:end="35:56">&amp;&amp;</operator>

        <name pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:25">mpi_request_sizes</name><index pos:start="37:26" pos:end="37:40">[<expr pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:29">hdr</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:39">Function</name></name></expr>]</index></name></expr>)</condition> <block pos:start="37:43" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:41">

        <comment type="block" pos:start="39:9" pos:end="45:11">/* Read the rest of the request based on the type.  Do not

         * reread everything, as that could cause a TOC/TOU mismatch

         * and leak data from the QEMU stack.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:12">size</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:47"><name pos:start="47:16" pos:end="47:32">mpi_request_sizes</name><index pos:start="47:33" pos:end="47:47">[<expr pos:start="47:34" pos:end="47:46"><name pos:start="47:34" pos:end="47:46"><name pos:start="47:34" pos:end="47:36">hdr</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:46">Function</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:48"><expr pos:start="49:9" pos:end="49:47"><call pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:14">assert</name><argument_list pos:start="49:15" pos:end="49:47">(<argument pos:start="49:16" pos:end="49:46"><expr pos:start="49:16" pos:end="49:46"><name pos:start="49:16" pos:end="49:19">size</name> <operator pos:start="49:21" pos:end="49:22">&lt;=</operator> <name pos:start="49:24" pos:end="49:46">MPTSAS_MAX_REQUEST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:41"><expr pos:start="51:9" pos:end="53:40"><call pos:start="51:9" pos:end="53:40"><name pos:start="51:9" pos:end="51:20">pci_dma_read</name><argument_list pos:start="51:21" pos:end="53:40">(<argument pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><name pos:start="51:22" pos:end="51:24">pci</name></expr></argument>, <argument pos:start="51:27" pos:end="51:44"><expr pos:start="51:27" pos:end="51:44"><name pos:start="51:27" pos:end="51:30">addr</name> <operator pos:start="51:32" pos:end="51:32">+</operator> <sizeof pos:start="51:34" pos:end="51:44">sizeof<argument_list pos:start="51:40" pos:end="51:44">(<argument pos:start="51:41" pos:end="51:43"><expr pos:start="51:41" pos:end="51:43"><name pos:start="51:41" pos:end="51:43">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="51:47" pos:end="51:63"><expr pos:start="51:47" pos:end="51:63"><operator pos:start="51:47" pos:end="51:47">&amp;</operator><name pos:start="51:48" pos:end="51:63"><name pos:start="51:48" pos:end="51:50">req</name><index pos:start="51:51" pos:end="51:63">[<expr pos:start="51:52" pos:end="51:62"><sizeof pos:start="51:52" pos:end="51:62">sizeof<argument_list pos:start="51:58" pos:end="51:62">(<argument pos:start="51:59" pos:end="51:61"><expr pos:start="51:59" pos:end="51:61"><name pos:start="51:59" pos:end="51:61">hdr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>,

                     <argument pos:start="53:22" pos:end="53:39"><expr pos:start="53:22" pos:end="53:39"><name pos:start="53:22" pos:end="53:25">size</name> <operator pos:start="53:27" pos:end="53:27">-</operator> <sizeof pos:start="53:29" pos:end="53:39">sizeof<argument_list pos:start="53:35" pos:end="53:39">(<argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><name pos:start="53:36" pos:end="53:38">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="73:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:54">(<expr pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">hdr</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:21">Function</name></name> <operator pos:start="59:23" pos:end="59:24">==</operator> <name pos:start="59:26" pos:end="59:53">MPI_FUNCTION_SCSI_IO_REQUEST</name></expr>)</condition> <block pos:start="59:56" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:76">

        <comment type="block" pos:start="61:9" pos:end="65:11">/* SCSI I/O requests are separate from mptsas_process_message

         * because they cannot be sent through the doorbell yet.

         */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:76"><expr pos:start="67:9" pos:end="67:75"><call pos:start="67:9" pos:end="67:75"><name pos:start="67:9" pos:end="67:38">mptsas_process_scsi_io_request</name><argument_list pos:start="67:39" pos:end="67:75">(<argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><name pos:start="67:40" pos:end="67:40">s</name></expr></argument>, <argument pos:start="67:43" pos:end="67:68"><expr pos:start="67:43" pos:end="67:68"><operator pos:start="67:43" pos:end="67:43">(</operator><name pos:start="67:44" pos:end="67:62">MPIMsgSCSIIORequest</name> <operator pos:start="67:64" pos:end="67:64">*</operator><operator pos:start="67:65" pos:end="67:65">)</operator><name pos:start="67:66" pos:end="67:68">req</name></expr></argument>, <argument pos:start="67:71" pos:end="67:74"><expr pos:start="67:71" pos:end="67:74"><name pos:start="67:71" pos:end="67:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:59">

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><call pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:30">mptsas_process_message</name><argument_list pos:start="71:31" pos:end="71:58">(<argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><name pos:start="71:32" pos:end="71:32">s</name></expr></argument>, <argument pos:start="71:35" pos:end="71:57"><expr pos:start="71:35" pos:end="71:57"><operator pos:start="71:35" pos:end="71:35">(</operator><name pos:start="71:36" pos:end="71:51">MPIRequestHeader</name> <operator pos:start="71:53" pos:end="71:53">*</operator><operator pos:start="71:54" pos:end="71:54">)</operator><name pos:start="71:55" pos:end="71:57">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
