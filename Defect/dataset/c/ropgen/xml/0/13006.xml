<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13006.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">arm_timer_write</name><parameter_list pos:start="1:28" pos:end="3:43">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:67"><decl pos:start="1:43" pos:end="1:67"><type pos:start="1:43" pos:end="1:67"><name pos:start="1:43" pos:end="1:60">target_phys_addr_t</name></type> <name pos:start="1:62" pos:end="1:67">offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:42">value</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:24">

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">arm_timer_state</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:50">= <expr pos:start="7:26" pos:end="7:50"><operator pos:start="7:26" pos:end="7:26">(</operator><name pos:start="7:27" pos:end="7:41">arm_timer_state</name> <operator pos:start="7:43" pos:end="7:43">*</operator><operator pos:start="7:44" pos:end="7:44">)</operator><name pos:start="7:45" pos:end="7:50">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">freq</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="91:5">switch <condition pos:start="13:12" pos:end="13:24">(<expr pos:start="13:13" pos:end="13:23"><name pos:start="13:13" pos:end="13:18">offset</name> <operator pos:start="13:20" pos:end="13:21">&gt;&gt;</operator> <literal type="number" pos:start="13:23" pos:end="13:23">2</literal></expr>)</condition> <block pos:start="13:26" pos:end="91:5">{<block_content pos:start="15:5" pos:end="89:66">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">0</literal></expr>:</case> <comment type="block" pos:start="15:13" pos:end="15:27">/* TimerLoad */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:25"><expr pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:16">limit</name></name> <operator pos:start="17:18" pos:end="17:18">=</operator> <name pos:start="17:20" pos:end="17:24">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><call pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:29">arm_timer_recalibrate</name><argument_list pos:start="19:30" pos:end="19:35">(<argument pos:start="19:31" pos:end="19:31"><expr pos:start="19:31" pos:end="19:31"><name pos:start="19:31" pos:end="19:31">s</name></expr></argument>, <argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><literal type="number" pos:start="19:34" pos:end="19:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:11">case <expr pos:start="23:10" pos:end="23:10"><literal type="number" pos:start="23:10" pos:end="23:10">1</literal></expr>:</case> <comment type="block" pos:start="23:13" pos:end="23:28">/* TimerValue */</comment>

        <comment type="block" pos:start="25:9" pos:end="27:25">/* ??? Linux seems to want to write to this readonly register.

           Ignore it.  */</comment>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">2</literal></expr>:</case> <comment type="block" pos:start="31:13" pos:end="31:30">/* TimerControl */</comment>

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="33:43">(<expr pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:22">control</name></name> <operator pos:start="33:24" pos:end="33:24">&amp;</operator> <name pos:start="33:26" pos:end="33:42">TIMER_CTRL_ENABLE</name></expr>)</condition> <block pos:start="33:45" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:34">

            <comment type="block" pos:start="35:13" pos:end="39:29">/* Pause the timer if it is running.  This may cause some

               inaccuracy dure to rounding, but avoids a whole lot of other

               messyness.  */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:34"><expr pos:start="41:13" pos:end="41:33"><call pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:23">ptimer_stop</name><argument_list pos:start="41:24" pos:end="41:33">(<argument pos:start="41:25" pos:end="41:32"><expr pos:start="41:25" pos:end="41:32"><name pos:start="41:25" pos:end="41:32"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:32">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">control</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:26">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:12">freq</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:22"><name pos:start="47:16" pos:end="47:16">s</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:22">freq</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:74">/* ??? Need to recalculate expiry time after changing divisor.  */</comment>

        <switch pos:start="51:9" pos:end="57:9">switch <condition pos:start="51:16" pos:end="51:33">(<expr pos:start="51:17" pos:end="51:32"><operator pos:start="51:17" pos:end="51:17">(</operator><name pos:start="51:18" pos:end="51:22">value</name> <operator pos:start="51:24" pos:end="51:25">&gt;&gt;</operator> <literal type="number" pos:start="51:27" pos:end="51:27">2</literal><operator pos:start="51:28" pos:end="51:28">)</operator> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <literal type="number" pos:start="51:32" pos:end="51:32">3</literal></expr>)</condition> <block pos:start="51:35" pos:end="57:9">{<block_content pos:start="53:9" pos:end="55:34">

        <case pos:start="53:9" pos:end="53:15">case <expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr>:</case> <expr_stmt pos:start="53:17" pos:end="53:27"><expr pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:20">freq</name> <operator pos:start="53:22" pos:end="53:24">&gt;&gt;=</operator> <literal type="number" pos:start="53:26" pos:end="53:26">4</literal></expr>;</expr_stmt> <break pos:start="53:29" pos:end="53:34">break;</break>

        <case pos:start="55:9" pos:end="55:15">case <expr pos:start="55:14" pos:end="55:14"><literal type="number" pos:start="55:14" pos:end="55:14">2</literal></expr>:</case> <expr_stmt pos:start="55:17" pos:end="55:27"><expr pos:start="55:17" pos:end="55:26"><name pos:start="55:17" pos:end="55:20">freq</name> <operator pos:start="55:22" pos:end="55:24">&gt;&gt;=</operator> <literal type="number" pos:start="55:26" pos:end="55:26">8</literal></expr>;</expr_stmt> <break pos:start="55:29" pos:end="55:34">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="59:9" pos:end="59:36"><expr pos:start="59:9" pos:end="59:35"><call pos:start="59:9" pos:end="59:35"><name pos:start="59:9" pos:end="59:29">arm_timer_recalibrate</name><argument_list pos:start="59:30" pos:end="59:35">(<argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">s</name></expr></argument>, <argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:40"><expr pos:start="61:9" pos:end="61:39"><call pos:start="61:9" pos:end="61:39"><name pos:start="61:9" pos:end="61:23">ptimer_set_freq</name><argument_list pos:start="61:24" pos:end="61:39">(<argument pos:start="61:25" pos:end="61:32"><expr pos:start="61:25" pos:end="61:32"><name pos:start="61:25" pos:end="61:32"><name pos:start="61:25" pos:end="61:25">s</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:32">timer</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:38"><expr pos:start="61:35" pos:end="61:38"><name pos:start="61:35" pos:end="61:38">freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:43">(<expr pos:start="63:13" pos:end="63:42"><name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">control</name></name> <operator pos:start="63:24" pos:end="63:24">&amp;</operator> <name pos:start="63:26" pos:end="63:42">TIMER_CTRL_ENABLE</name></expr>)</condition> <block pos:start="63:45" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:73">

            <comment type="block" pos:start="65:13" pos:end="65:54">/* Restart the timer if still enabled.  */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:73"><expr pos:start="67:13" pos:end="67:72"><call pos:start="67:13" pos:end="67:72"><name pos:start="67:13" pos:end="67:22">ptimer_run</name><argument_list pos:start="67:23" pos:end="67:72">(<argument pos:start="67:24" pos:end="67:31"><expr pos:start="67:24" pos:end="67:31"><name pos:start="67:24" pos:end="67:31"><name pos:start="67:24" pos:end="67:24">s</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:31">timer</name></name></expr></argument>, <argument pos:start="67:34" pos:end="67:71"><expr pos:start="67:34" pos:end="67:71"><operator pos:start="67:34" pos:end="67:34">(</operator><name pos:start="67:35" pos:end="67:44"><name pos:start="67:35" pos:end="67:35">s</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:44">control</name></name> <operator pos:start="67:46" pos:end="67:46">&amp;</operator> <name pos:start="67:48" pos:end="67:65">TIMER_CTRL_ONESHOT</name><operator pos:start="67:66" pos:end="67:66">)</operator> <operator pos:start="67:68" pos:end="67:69">!=</operator> <literal type="number" pos:start="67:71" pos:end="67:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:11">case <expr pos:start="73:10" pos:end="73:10"><literal type="number" pos:start="73:10" pos:end="73:10">3</literal></expr>:</case> <comment type="block" pos:start="73:13" pos:end="73:29">/* TimerIntClr */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:20">int_level</name></name> <operator pos:start="75:22" pos:end="75:22">=</operator> <literal type="number" pos:start="75:24" pos:end="75:24">0</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:11">case <expr pos:start="79:10" pos:end="79:10"><literal type="number" pos:start="79:10" pos:end="79:10">6</literal></expr>:</case> <comment type="block" pos:start="79:13" pos:end="79:29">/* TimerBGLoad */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:16">limit</name></name> <operator pos:start="81:18" pos:end="81:18">=</operator> <name pos:start="81:20" pos:end="81:24">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:36"><expr pos:start="83:9" pos:end="83:35"><call pos:start="83:9" pos:end="83:35"><name pos:start="83:9" pos:end="83:29">arm_timer_recalibrate</name><argument_list pos:start="83:30" pos:end="83:35">(<argument pos:start="83:31" pos:end="83:31"><expr pos:start="83:31" pos:end="83:31"><name pos:start="83:31" pos:end="83:31">s</name></expr></argument>, <argument pos:start="83:34" pos:end="83:34"><expr pos:start="83:34" pos:end="83:34"><literal type="number" pos:start="83:34" pos:end="83:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <default pos:start="87:5" pos:end="87:12">default:</default>

        <expr_stmt pos:start="89:9" pos:end="89:66"><expr pos:start="89:9" pos:end="89:65"><call pos:start="89:9" pos:end="89:65"><name pos:start="89:9" pos:end="89:16">hw_error</name><argument_list pos:start="89:17" pos:end="89:65">(<argument pos:start="89:18" pos:end="89:51"><expr pos:start="89:18" pos:end="89:51"><literal type="string" pos:start="89:18" pos:end="89:51">"arm_timer_write: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="89:54" pos:end="89:64"><expr pos:start="89:54" pos:end="89:64"><operator pos:start="89:54" pos:end="89:54">(</operator><name pos:start="89:55" pos:end="89:57">int</name><operator pos:start="89:58" pos:end="89:58">)</operator><name pos:start="89:59" pos:end="89:64">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="93:5" pos:end="93:24"><expr pos:start="93:5" pos:end="93:23"><call pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:20">arm_timer_update</name><argument_list pos:start="93:21" pos:end="93:23">(<argument pos:start="93:22" pos:end="93:22"><expr pos:start="93:22" pos:end="93:22"><name pos:start="93:22" pos:end="93:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
