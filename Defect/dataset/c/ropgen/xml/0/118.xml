<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/118.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">ff_lock_avcodec</name><parameter_list pos:start="1:20" pos:end="1:66">(<parameter pos:start="1:21" pos:end="1:43"><decl pos:start="1:21" pos:end="1:43"><type pos:start="1:21" pos:end="1:43"><name pos:start="1:21" pos:end="1:34">AVCodecContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:43">log_ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:58">AVCodec</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">codec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:9"><name pos:start="5:5" pos:end="5:9">_Bool</name></type> <name pos:start="5:11" pos:end="5:13">exp</name> <init pos:start="5:15" pos:end="5:17">= <expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="7:5" pos:end="9:17"><if pos:start="7:5" pos:end="9:17">if <condition pos:start="7:8" pos:end="7:76">(<expr pos:start="7:9" pos:end="7:75"><name pos:start="7:9" pos:end="7:28"><name pos:start="7:9" pos:end="7:13">codec</name><operator pos:start="7:14" pos:end="7:15">-&gt;</operator><name pos:start="7:16" pos:end="7:28">caps_internal</name></name> <operator pos:start="7:30" pos:end="7:30">&amp;</operator> <name pos:start="7:32" pos:end="7:59">FF_CODEC_CAP_INIT_THREADSAFE</name> <operator pos:start="7:61" pos:end="7:62">||</operator> <operator pos:start="7:64" pos:end="7:64">!</operator><name pos:start="7:65" pos:end="7:75"><name pos:start="7:65" pos:end="7:69">codec</name><operator pos:start="7:70" pos:end="7:71">-&gt;</operator><name pos:start="7:72" pos:end="7:75">init</name></name></expr>)</condition><block type="pseudo" pos:start="9:9" pos:end="9:17"><block_content pos:start="9:9" pos:end="9:17">

        <return pos:start="9:9" pos:end="9:17">return <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:18">lockmgr_cb</name></expr>)</condition> <block pos:start="13:21" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:22">

        <if_stmt pos:start="15:9" pos:end="17:22"><if pos:start="15:9" pos:end="17:22">if <condition pos:start="15:12" pos:end="15:56">(<expr pos:start="15:13" pos:end="15:55"><call pos:start="15:13" pos:end="15:55">(<modifier pos:start="15:14" pos:end="15:14">*</modifier><name pos:start="15:15" pos:end="15:24">lockmgr_cb</name>)<argument_list pos:start="15:26" pos:end="15:55">(<argument pos:start="15:27" pos:end="15:38"><expr pos:start="15:27" pos:end="15:38"><operator pos:start="15:27" pos:end="15:27">&amp;</operator><name pos:start="15:28" pos:end="15:38">codec_mutex</name></expr></argument>, <argument pos:start="15:41" pos:end="15:54"><expr pos:start="15:41" pos:end="15:54"><name pos:start="15:41" pos:end="15:54">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:22"><block_content pos:start="17:13" pos:end="17:22">

            <return pos:start="17:13" pos:end="17:22">return <expr pos:start="17:20" pos:end="17:21"><operator pos:start="17:20" pos:end="17:20">-</operator><literal type="number" pos:start="17:21" pos:end="17:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="43:5">if <condition pos:start="23:8" pos:end="23:55">(<expr pos:start="23:9" pos:end="23:54"><call pos:start="23:9" pos:end="23:54"><name pos:start="23:9" pos:end="23:24">atomic_fetch_add</name><argument_list pos:start="23:25" pos:end="23:54">(<argument pos:start="23:26" pos:end="23:50"><expr pos:start="23:26" pos:end="23:50"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:50">entangled_thread_counter</name></expr></argument>, <argument pos:start="23:53" pos:end="23:53"><expr pos:start="23:53" pos:end="23:53"><literal type="number" pos:start="23:53" pos:end="23:53">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:57" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:31">

        <expr_stmt pos:start="25:9" pos:end="31:55"><expr pos:start="25:9" pos:end="31:54"><call pos:start="25:9" pos:end="31:54"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="31:54">(<argument pos:start="25:16" pos:end="25:22"><expr pos:start="25:16" pos:end="25:22"><name pos:start="25:16" pos:end="25:22">log_ctx</name></expr></argument>, <argument pos:start="25:25" pos:end="25:36"><expr pos:start="25:25" pos:end="25:36"><name pos:start="25:25" pos:end="25:36">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="27:16" pos:end="29:70"><expr pos:start="27:16" pos:end="29:70"><literal type="string" pos:start="27:16" pos:end="27:70">"Insufficient thread locking. At least %d threads are "</literal>

               <literal type="string" pos:start="29:16" pos:end="29:70">"calling avcodec_open2() at the same time right now.\n"</literal></expr></argument>,

               <argument pos:start="31:16" pos:end="31:53"><expr pos:start="31:16" pos:end="31:53"><call pos:start="31:16" pos:end="31:53"><name pos:start="31:16" pos:end="31:26">atomic_load</name><argument_list pos:start="31:27" pos:end="31:53">(<argument pos:start="31:28" pos:end="31:52"><expr pos:start="31:28" pos:end="31:52"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:52">entangled_thread_counter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:104"><if pos:start="33:9" pos:end="35:104">if <condition pos:start="33:12" pos:end="33:24">(<expr pos:start="33:13" pos:end="33:23"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:23">lockmgr_cb</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:104"><block_content pos:start="35:13" pos:end="35:104">

            <expr_stmt pos:start="35:13" pos:end="35:104"><expr pos:start="35:13" pos:end="35:103"><call pos:start="35:13" pos:end="35:103"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:103">(<argument pos:start="35:20" pos:end="35:26"><expr pos:start="35:20" pos:end="35:26"><name pos:start="35:20" pos:end="35:26">log_ctx</name></expr></argument>, <argument pos:start="35:29" pos:end="35:40"><expr pos:start="35:29" pos:end="35:40"><name pos:start="35:29" pos:end="35:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:43" pos:end="35:102"><expr pos:start="35:43" pos:end="35:102"><literal type="string" pos:start="35:43" pos:end="35:102">"No lock manager is set, please see av_lockmgr_register()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><call pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:20">atomic_store</name><argument_list pos:start="37:21" pos:end="37:43">(<argument pos:start="37:22" pos:end="37:39"><expr pos:start="37:22" pos:end="37:39"><operator pos:start="37:22" pos:end="37:22">&amp;</operator><name pos:start="37:23" pos:end="37:39">ff_avcodec_locked</name></expr></argument>, <argument pos:start="37:42" pos:end="37:42"><expr pos:start="37:42" pos:end="37:42"><literal type="number" pos:start="37:42" pos:end="37:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:25">ff_unlock_avcodec</name><argument_list pos:start="39:26" pos:end="39:32">(<argument pos:start="39:27" pos:end="39:31"><expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:31">return <expr pos:start="41:16" pos:end="41:30"><call pos:start="41:16" pos:end="41:30"><name pos:start="41:16" pos:end="41:22">AVERROR</name><argument_list pos:start="41:23" pos:end="41:30">(<argument pos:start="41:24" pos:end="41:29"><expr pos:start="41:24" pos:end="41:29"><name pos:start="41:24" pos:end="41:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:76"><expr pos:start="45:5" pos:end="45:75"><call pos:start="45:5" pos:end="45:75"><name pos:start="45:5" pos:end="45:14">av_assert0</name><argument_list pos:start="45:15" pos:end="45:75">(<argument pos:start="45:16" pos:end="45:74"><expr pos:start="45:16" pos:end="45:74"><call pos:start="45:16" pos:end="45:74"><name pos:start="45:16" pos:end="45:45">atomic_compare_exchange_strong</name><argument_list pos:start="45:46" pos:end="45:74">(<argument pos:start="45:47" pos:end="45:64"><expr pos:start="45:47" pos:end="45:64"><operator pos:start="45:47" pos:end="45:47">&amp;</operator><name pos:start="45:48" pos:end="45:64">ff_avcodec_locked</name></expr></argument>, <argument pos:start="45:67" pos:end="45:70"><expr pos:start="45:67" pos:end="45:70"><operator pos:start="45:67" pos:end="45:67">&amp;</operator><name pos:start="45:68" pos:end="45:70">exp</name></expr></argument>, <argument pos:start="45:73" pos:end="45:73"><expr pos:start="45:73" pos:end="45:73"><literal type="number" pos:start="45:73" pos:end="45:73">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
