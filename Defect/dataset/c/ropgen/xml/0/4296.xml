<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4296.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_mjpeg_find_marker</name><parameter_list pos:start="1:25" pos:end="7:49">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:43">MJpegDecodeContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:48"><decl pos:start="3:26" pos:end="3:48"><type pos:start="3:26" pos:end="3:48"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:38">uint8_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier><modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:48">buf_ptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:72"><decl pos:start="3:51" pos:end="3:72"><type pos:start="3:51" pos:end="3:72"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:63">uint8_t</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:72">buf_end</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:58"><decl pos:start="5:26" pos:end="5:58"><type pos:start="5:26" pos:end="5:58"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:38">uint8_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier><modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:58">unescaped_buf_ptr</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:48"><decl pos:start="7:26" pos:end="7:48"><type pos:start="7:26" pos:end="7:48"><name pos:start="7:26" pos:end="7:28">int</name> <modifier pos:start="7:30" pos:end="7:30">*</modifier></type><name pos:start="7:31" pos:end="7:48">unescaped_buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="173:1">{<block_content pos:start="11:5" pos:end="171:22">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">start_code</name></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:14">start_code</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <call pos:start="13:18" pos:end="13:46"><name pos:start="13:18" pos:end="13:28">find_marker</name><argument_list pos:start="13:29" pos:end="13:46">(<argument pos:start="13:30" pos:end="13:36"><expr pos:start="13:30" pos:end="13:36"><name pos:start="13:30" pos:end="13:36">buf_ptr</name></expr></argument>, <argument pos:start="13:39" pos:end="13:45"><expr pos:start="13:39" pos:end="13:45"><name pos:start="13:39" pos:end="13:45">buf_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:75"><expr pos:start="17:5" pos:end="17:74"><call pos:start="17:5" pos:end="17:74"><name pos:start="17:5" pos:end="17:25">av_fast_padded_malloc</name><argument_list pos:start="17:26" pos:end="17:74">(<argument pos:start="17:27" pos:end="17:36"><expr pos:start="17:27" pos:end="17:36"><operator pos:start="17:27" pos:end="17:27">&amp;</operator><name pos:start="17:28" pos:end="17:36"><name pos:start="17:28" pos:end="17:28">s</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:36">buffer</name></name></expr></argument>, <argument pos:start="17:39" pos:end="17:53"><expr pos:start="17:39" pos:end="17:53"><operator pos:start="17:39" pos:end="17:39">&amp;</operator><name pos:start="17:40" pos:end="17:53"><name pos:start="17:40" pos:end="17:40">s</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:53">buffer_size</name></name></expr></argument>, <argument pos:start="17:56" pos:end="17:73"><expr pos:start="17:56" pos:end="17:73"><name pos:start="17:56" pos:end="17:62">buf_end</name> <operator pos:start="17:64" pos:end="17:64">-</operator> <operator pos:start="17:66" pos:end="17:66">*</operator><name pos:start="17:67" pos:end="17:73">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:31"><if pos:start="19:5" pos:end="21:31">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:18">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:31"><block_content pos:start="21:9" pos:end="21:31">

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:67">/* unescape buffer of SOS, use special treatment for JPEG-LS */</comment>

    <if_stmt pos:start="27:5" pos:end="167:5"><if pos:start="27:5" pos:end="81:5">if <condition pos:start="27:8" pos:end="27:36">(<expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:18">start_code</name> <operator pos:start="27:20" pos:end="27:21">==</operator> <name pos:start="27:23" pos:end="27:25">SOS</name> <operator pos:start="27:27" pos:end="27:28">&amp;&amp;</operator> <operator pos:start="27:30" pos:end="27:30">!</operator><name pos:start="27:31" pos:end="27:35"><name pos:start="27:31" pos:end="27:31">s</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:35">ls</name></name></expr>)</condition> <block pos:start="27:38" pos:end="81:5">{<block_content pos:start="29:9" pos:end="79:57">

        <decl_stmt pos:start="29:9" pos:end="29:38"><decl pos:start="29:9" pos:end="29:37"><type pos:start="29:9" pos:end="29:23"><specifier pos:start="29:9" pos:end="29:13">const</specifier> <name pos:start="29:15" pos:end="29:21">uint8_t</name> <modifier pos:start="29:23" pos:end="29:23">*</modifier></type><name pos:start="29:24" pos:end="29:26">src</name> <init pos:start="29:28" pos:end="29:37">= <expr pos:start="29:30" pos:end="29:37"><operator pos:start="29:30" pos:end="29:30">*</operator><name pos:start="29:31" pos:end="29:37">buf_ptr</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:33"><decl pos:start="31:9" pos:end="31:32"><type pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:15">uint8_t</name> <modifier pos:start="31:17" pos:end="31:17">*</modifier></type><name pos:start="31:18" pos:end="31:20">dst</name> <init pos:start="31:22" pos:end="31:32">= <expr pos:start="31:24" pos:end="31:32"><name pos:start="31:24" pos:end="31:32"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:32">buffer</name></name></expr></init></decl>;</decl_stmt>



        <while pos:start="35:9" pos:end="65:9">while <condition pos:start="35:15" pos:end="35:29">(<expr pos:start="35:16" pos:end="35:28"><name pos:start="35:16" pos:end="35:18">src</name> <operator pos:start="35:20" pos:end="35:20">&lt;</operator> <name pos:start="35:22" pos:end="35:28">buf_end</name></expr>)</condition> <block pos:start="35:31" pos:end="65:9">{<block_content pos:start="37:13" pos:end="63:13">

            <decl_stmt pos:start="37:13" pos:end="37:33"><decl pos:start="37:13" pos:end="37:32"><type pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:19">uint8_t</name></type> <name pos:start="37:21" pos:end="37:21">x</name> <init pos:start="37:23" pos:end="37:32">= <expr pos:start="37:25" pos:end="37:32"><operator pos:start="37:25" pos:end="37:25">*</operator><operator pos:start="37:26" pos:end="37:26">(</operator><name pos:start="37:27" pos:end="37:29">src</name><operator pos:start="37:30" pos:end="37:31">++</operator><operator pos:start="37:32" pos:end="37:32">)</operator></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:25"><expr pos:start="41:13" pos:end="41:24"><operator pos:start="41:13" pos:end="41:13">*</operator><operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:17">dst</name><operator pos:start="41:18" pos:end="41:19">++</operator><operator pos:start="41:20" pos:end="41:20">)</operator> <operator pos:start="41:22" pos:end="41:22">=</operator> <name pos:start="41:24" pos:end="41:24">x</name></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="63:13"><if pos:start="43:13" pos:end="63:13">if <condition pos:start="43:16" pos:end="43:54">(<expr pos:start="43:17" pos:end="43:53"><name pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:24">avctx</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:34">codec_id</name></name> <operator pos:start="43:36" pos:end="43:37">!=</operator> <name pos:start="43:39" pos:end="43:53">AV_CODEC_ID_THP</name></expr>)</condition> <block pos:start="43:56" pos:end="63:13">{<block_content pos:start="45:17" pos:end="61:17">

                <if_stmt pos:start="45:17" pos:end="61:17"><if pos:start="45:17" pos:end="61:17">if <condition pos:start="45:20" pos:end="45:30">(<expr pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:21">x</name> <operator pos:start="45:23" pos:end="45:24">==</operator> <literal type="number" pos:start="45:26" pos:end="45:29">0xff</literal></expr>)</condition> <block pos:start="45:32" pos:end="61:17">{<block_content pos:start="47:21" pos:end="59:30">

                    <while pos:start="47:21" pos:end="49:37">while <condition pos:start="47:27" pos:end="47:54">(<expr pos:start="47:28" pos:end="47:53"><name pos:start="47:28" pos:end="47:30">src</name> <operator pos:start="47:32" pos:end="47:32">&lt;</operator> <name pos:start="47:34" pos:end="47:40">buf_end</name> <operator pos:start="47:42" pos:end="47:43">&amp;&amp;</operator> <name pos:start="47:45" pos:end="47:45">x</name> <operator pos:start="47:47" pos:end="47:48">==</operator> <literal type="number" pos:start="47:50" pos:end="47:53">0xff</literal></expr>)</condition><block type="pseudo" pos:start="49:25" pos:end="49:37"><block_content pos:start="49:25" pos:end="49:37">

                        <expr_stmt pos:start="49:25" pos:end="49:37"><expr pos:start="49:25" pos:end="49:36"><name pos:start="49:25" pos:end="49:25">x</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <operator pos:start="49:29" pos:end="49:29">*</operator><operator pos:start="49:30" pos:end="49:30">(</operator><name pos:start="49:31" pos:end="49:33">src</name><operator pos:start="49:34" pos:end="49:35">++</operator><operator pos:start="49:36" pos:end="49:36">)</operator></expr>;</expr_stmt></block_content></block></while>



                    <if_stmt pos:start="53:21" pos:end="59:30"><if pos:start="53:21" pos:end="55:37">if <condition pos:start="53:24" pos:end="53:47">(<expr pos:start="53:25" pos:end="53:46"><name pos:start="53:25" pos:end="53:25">x</name> <operator pos:start="53:27" pos:end="53:28">&gt;=</operator> <literal type="number" pos:start="53:30" pos:end="53:33">0xd0</literal> <operator pos:start="53:35" pos:end="53:36">&amp;&amp;</operator> <name pos:start="53:38" pos:end="53:38">x</name> <operator pos:start="53:40" pos:end="53:41">&lt;=</operator> <literal type="number" pos:start="53:43" pos:end="53:46">0xd7</literal></expr>)</condition><block type="pseudo" pos:start="55:25" pos:end="55:37"><block_content pos:start="55:25" pos:end="55:37">

                        <expr_stmt pos:start="55:25" pos:end="55:37"><expr pos:start="55:25" pos:end="55:36"><operator pos:start="55:25" pos:end="55:25">*</operator><operator pos:start="55:26" pos:end="55:26">(</operator><name pos:start="55:27" pos:end="55:29">dst</name><operator pos:start="55:30" pos:end="55:31">++</operator><operator pos:start="55:32" pos:end="55:32">)</operator> <operator pos:start="55:34" pos:end="55:34">=</operator> <name pos:start="55:36" pos:end="55:36">x</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="57:21" pos:end="59:30">else if <condition pos:start="57:29" pos:end="57:31">(<expr pos:start="57:30" pos:end="57:30"><name pos:start="57:30" pos:end="57:30">x</name></expr>)</condition><block type="pseudo" pos:start="59:25" pos:end="59:30"><block_content pos:start="59:25" pos:end="59:30">

                        <break pos:start="59:25" pos:end="59:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:26">unescaped_buf_ptr</name>  <operator pos:start="67:29" pos:end="67:29">=</operator> <name pos:start="67:31" pos:end="67:39"><name pos:start="67:31" pos:end="67:31">s</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:39">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:27">unescaped_buf_size</name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:33">dst</name> <operator pos:start="69:35" pos:end="69:35">-</operator> <name pos:start="69:37" pos:end="69:45"><name pos:start="69:37" pos:end="69:37">s</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:45">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:45"><expr pos:start="71:9" pos:end="73:44"><call pos:start="71:9" pos:end="73:44"><name pos:start="71:9" pos:end="71:14">memset</name><argument_list pos:start="71:15" pos:end="73:44">(<argument pos:start="71:16" pos:end="71:46"><expr pos:start="71:16" pos:end="71:46"><name pos:start="71:16" pos:end="71:24"><name pos:start="71:16" pos:end="71:16">s</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:24">buffer</name></name> <operator pos:start="71:26" pos:end="71:26">+</operator> <operator pos:start="71:28" pos:end="71:28">*</operator><name pos:start="71:29" pos:end="71:46">unescaped_buf_size</name></expr></argument>, <argument pos:start="71:49" pos:end="71:49"><expr pos:start="71:49" pos:end="71:49"><literal type="number" pos:start="71:49" pos:end="71:49">0</literal></expr></argument>,

               <argument pos:start="73:16" pos:end="73:43"><expr pos:start="73:16" pos:end="73:43"><name pos:start="73:16" pos:end="73:43">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="79:57"><expr pos:start="77:9" pos:end="79:56"><call pos:start="77:9" pos:end="79:56"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="79:56">(<argument pos:start="77:16" pos:end="77:23"><expr pos:start="77:16" pos:end="77:23"><name pos:start="77:16" pos:end="77:23"><name pos:start="77:16" pos:end="77:16">s</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:23">avctx</name></name></expr></argument>, <argument pos:start="77:26" pos:end="77:37"><expr pos:start="77:26" pos:end="77:37"><name pos:start="77:26" pos:end="77:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="77:40" pos:end="77:69"><expr pos:start="77:40" pos:end="77:69"><literal type="string" pos:start="77:40" pos:end="77:69">"escaping removed %td bytes\n"</literal></expr></argument>,

               <argument pos:start="79:16" pos:end="79:55"><expr pos:start="79:16" pos:end="79:55"><operator pos:start="79:16" pos:end="79:16">(</operator><name pos:start="79:17" pos:end="79:23">buf_end</name> <operator pos:start="79:25" pos:end="79:25">-</operator> <operator pos:start="79:27" pos:end="79:27">*</operator><name pos:start="79:28" pos:end="79:34">buf_ptr</name><operator pos:start="79:35" pos:end="79:35">)</operator> <operator pos:start="79:37" pos:end="79:37">-</operator> <operator pos:start="79:39" pos:end="79:39">(</operator><name pos:start="79:40" pos:end="79:42">dst</name> <operator pos:start="79:44" pos:end="79:44">-</operator> <name pos:start="79:46" pos:end="79:54"><name pos:start="79:46" pos:end="79:46">s</name><operator pos:start="79:47" pos:end="79:48">-&gt;</operator><name pos:start="79:49" pos:end="79:54">buffer</name></name><operator pos:start="79:55" pos:end="79:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="161:5">else if <condition pos:start="81:15" pos:end="81:42">(<expr pos:start="81:16" pos:end="81:41"><name pos:start="81:16" pos:end="81:25">start_code</name> <operator pos:start="81:27" pos:end="81:28">==</operator> <name pos:start="81:30" pos:end="81:32">SOS</name> <operator pos:start="81:34" pos:end="81:35">&amp;&amp;</operator> <name pos:start="81:37" pos:end="81:41"><name pos:start="81:37" pos:end="81:37">s</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:41">ls</name></name></expr>)</condition> <block pos:start="81:44" pos:end="161:5">{<block_content pos:start="83:9" pos:end="159:45">

        <decl_stmt pos:start="83:9" pos:end="83:38"><decl pos:start="83:9" pos:end="83:37"><type pos:start="83:9" pos:end="83:23"><specifier pos:start="83:9" pos:end="83:13">const</specifier> <name pos:start="83:15" pos:end="83:21">uint8_t</name> <modifier pos:start="83:23" pos:end="83:23">*</modifier></type><name pos:start="83:24" pos:end="83:26">src</name> <init pos:start="83:28" pos:end="83:37">= <expr pos:start="83:30" pos:end="83:37"><operator pos:start="83:30" pos:end="83:30">*</operator><name pos:start="83:31" pos:end="83:37">buf_ptr</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:34"><decl pos:start="85:9" pos:end="85:33"><type pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:15">uint8_t</name> <modifier pos:start="85:17" pos:end="85:17">*</modifier></type><name pos:start="85:18" pos:end="85:20">dst</name>  <init pos:start="85:23" pos:end="85:33">= <expr pos:start="85:25" pos:end="85:33"><name pos:start="85:25" pos:end="85:33"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:33">buffer</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="87:9" pos:end="87:26"><decl pos:start="87:9" pos:end="87:25"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:21">bit_count</name> <init pos:start="87:23" pos:end="87:25">= <expr pos:start="87:25" pos:end="87:25"><literal type="number" pos:start="87:25" pos:end="87:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:25"><decl pos:start="89:9" pos:end="89:17"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:13">t</name> <init pos:start="89:15" pos:end="89:17">= <expr pos:start="89:17" pos:end="89:17"><literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr></init></decl>, <decl pos:start="89:20" pos:end="89:24"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:20" pos:end="89:20">b</name> <init pos:start="89:22" pos:end="89:24">= <expr pos:start="89:24" pos:end="89:24"><literal type="number" pos:start="89:24" pos:end="89:24">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:25"><decl pos:start="91:9" pos:end="91:24"><type pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:21">PutBitContext</name></type> <name pos:start="91:23" pos:end="91:24">pb</name></decl>;</decl_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:19">cur_scan</name></name><operator pos:start="95:20" pos:end="95:21">++</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="99:9" pos:end="99:25">/* find marker */</comment>

        <while pos:start="101:9" pos:end="121:9">while <condition pos:start="101:15" pos:end="101:33">(<expr pos:start="101:16" pos:end="101:32"><name pos:start="101:16" pos:end="101:18">src</name> <operator pos:start="101:20" pos:end="101:20">+</operator> <name pos:start="101:22" pos:end="101:22">t</name> <operator pos:start="101:24" pos:end="101:24">&lt;</operator> <name pos:start="101:26" pos:end="101:32">buf_end</name></expr>)</condition> <block pos:start="101:35" pos:end="121:9">{<block_content pos:start="103:13" pos:end="119:13">

            <decl_stmt pos:start="103:13" pos:end="103:33"><decl pos:start="103:13" pos:end="103:32"><type pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:19">uint8_t</name></type> <name pos:start="103:21" pos:end="103:21">x</name> <init pos:start="103:23" pos:end="103:32">= <expr pos:start="103:25" pos:end="103:32"><name pos:start="103:25" pos:end="103:32"><name pos:start="103:25" pos:end="103:27">src</name><index pos:start="103:28" pos:end="103:32">[<expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:29">t</name><operator pos:start="103:30" pos:end="103:31">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="105:13" pos:end="119:13"><if pos:start="105:13" pos:end="119:13">if <condition pos:start="105:16" pos:end="105:26">(<expr pos:start="105:17" pos:end="105:25"><name pos:start="105:17" pos:end="105:17">x</name> <operator pos:start="105:19" pos:end="105:20">==</operator> <literal type="number" pos:start="105:22" pos:end="105:25">0xff</literal></expr>)</condition> <block pos:start="105:28" pos:end="119:13">{<block_content pos:start="107:17" pos:end="117:17">

                <while pos:start="107:17" pos:end="109:33">while <condition pos:start="107:23" pos:end="107:56">(<expr pos:start="107:24" pos:end="107:55"><operator pos:start="107:24" pos:end="107:24">(</operator><name pos:start="107:25" pos:end="107:27">src</name> <operator pos:start="107:29" pos:end="107:29">+</operator> <name pos:start="107:31" pos:end="107:31">t</name> <operator pos:start="107:33" pos:end="107:33">&lt;</operator> <name pos:start="107:35" pos:end="107:41">buf_end</name><operator pos:start="107:42" pos:end="107:42">)</operator> <operator pos:start="107:44" pos:end="107:45">&amp;&amp;</operator> <name pos:start="107:47" pos:end="107:47">x</name> <operator pos:start="107:49" pos:end="107:50">==</operator> <literal type="number" pos:start="107:52" pos:end="107:55">0xff</literal></expr>)</condition><block type="pseudo" pos:start="109:21" pos:end="109:33"><block_content pos:start="109:21" pos:end="109:33">

                    <expr_stmt pos:start="109:21" pos:end="109:33"><expr pos:start="109:21" pos:end="109:32"><name pos:start="109:21" pos:end="109:21">x</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:32"><name pos:start="109:25" pos:end="109:27">src</name><index pos:start="109:28" pos:end="109:32">[<expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:29">t</name><operator pos:start="109:30" pos:end="109:31">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="111:17" pos:end="117:17"><if pos:start="111:17" pos:end="117:17">if <condition pos:start="111:20" pos:end="111:29">(<expr pos:start="111:21" pos:end="111:28"><name pos:start="111:21" pos:end="111:21">x</name> <operator pos:start="111:23" pos:end="111:23">&amp;</operator> <literal type="number" pos:start="111:25" pos:end="111:28">0x80</literal></expr>)</condition> <block pos:start="111:31" pos:end="117:17">{<block_content pos:start="113:21" pos:end="115:26">

                    <expr_stmt pos:start="113:21" pos:end="113:27"><expr pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:21">t</name> <operator pos:start="113:23" pos:end="113:24">-=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">2</literal></expr>;</expr_stmt>

                    <break pos:start="115:21" pos:end="115:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="123:9" pos:end="123:26"><expr pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:17">bit_count</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <name pos:start="123:21" pos:end="123:21">t</name> <operator pos:start="123:23" pos:end="123:23">*</operator> <literal type="number" pos:start="123:25" pos:end="123:25">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:35"><expr pos:start="125:9" pos:end="125:34"><call pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:21">init_put_bits</name><argument_list pos:start="125:22" pos:end="125:34">(<argument pos:start="125:23" pos:end="125:25"><expr pos:start="125:23" pos:end="125:25"><operator pos:start="125:23" pos:end="125:23">&amp;</operator><name pos:start="125:24" pos:end="125:25">pb</name></expr></argument>, <argument pos:start="125:28" pos:end="125:30"><expr pos:start="125:28" pos:end="125:30"><name pos:start="125:28" pos:end="125:30">dst</name></expr></argument>, <argument pos:start="125:33" pos:end="125:33"><expr pos:start="125:33" pos:end="125:33"><name pos:start="125:33" pos:end="125:33">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="129:9" pos:end="129:32">/* unescape bitstream */</comment>

        <while pos:start="131:9" pos:end="147:9">while <condition pos:start="131:15" pos:end="131:21">(<expr pos:start="131:16" pos:end="131:20"><name pos:start="131:16" pos:end="131:16">b</name> <operator pos:start="131:18" pos:end="131:18">&lt;</operator> <name pos:start="131:20" pos:end="131:20">t</name></expr>)</condition> <block pos:start="131:23" pos:end="147:9">{<block_content pos:start="133:13" pos:end="145:13">

            <decl_stmt pos:start="133:13" pos:end="133:33"><decl pos:start="133:13" pos:end="133:32"><type pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:19">uint8_t</name></type> <name pos:start="133:21" pos:end="133:21">x</name> <init pos:start="133:23" pos:end="133:32">= <expr pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:27">src</name><index pos:start="133:28" pos:end="133:32">[<expr pos:start="133:29" pos:end="133:31"><name pos:start="133:29" pos:end="133:29">b</name><operator pos:start="133:30" pos:end="133:31">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:32"><expr pos:start="135:13" pos:end="135:31"><call pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:20">put_bits</name><argument_list pos:start="135:21" pos:end="135:31">(<argument pos:start="135:22" pos:end="135:24"><expr pos:start="135:22" pos:end="135:24"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:24">pb</name></expr></argument>, <argument pos:start="135:27" pos:end="135:27"><expr pos:start="135:27" pos:end="135:27"><literal type="number" pos:start="135:27" pos:end="135:27">8</literal></expr></argument>, <argument pos:start="135:30" pos:end="135:30"><expr pos:start="135:30" pos:end="135:30"><name pos:start="135:30" pos:end="135:30">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:26">(<expr pos:start="137:17" pos:end="137:25"><name pos:start="137:17" pos:end="137:17">x</name> <operator pos:start="137:19" pos:end="137:20">==</operator> <literal type="number" pos:start="137:22" pos:end="137:25">0xFF</literal></expr>)</condition> <block pos:start="137:28" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:28">

                <expr_stmt pos:start="139:17" pos:end="139:29"><expr pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:17">x</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <name pos:start="139:21" pos:end="139:28"><name pos:start="139:21" pos:end="139:23">src</name><index pos:start="139:24" pos:end="139:28">[<expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:25">b</name><operator pos:start="139:26" pos:end="139:27">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:36"><expr pos:start="141:17" pos:end="141:35"><call pos:start="141:17" pos:end="141:35"><name pos:start="141:17" pos:end="141:24">put_bits</name><argument_list pos:start="141:25" pos:end="141:35">(<argument pos:start="141:26" pos:end="141:28"><expr pos:start="141:26" pos:end="141:28"><operator pos:start="141:26" pos:end="141:26">&amp;</operator><name pos:start="141:27" pos:end="141:28">pb</name></expr></argument>, <argument pos:start="141:31" pos:end="141:31"><expr pos:start="141:31" pos:end="141:31"><literal type="number" pos:start="141:31" pos:end="141:31">7</literal></expr></argument>, <argument pos:start="141:34" pos:end="141:34"><expr pos:start="141:34" pos:end="141:34"><name pos:start="141:34" pos:end="141:34">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:28"><expr pos:start="143:17" pos:end="143:27"><name pos:start="143:17" pos:end="143:25">bit_count</name><operator pos:start="143:26" pos:end="143:27">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="149:9" pos:end="149:28"><expr pos:start="149:9" pos:end="149:27"><call pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:22">flush_put_bits</name><argument_list pos:start="149:23" pos:end="149:27">(<argument pos:start="149:24" pos:end="149:26"><expr pos:start="149:24" pos:end="149:26"><operator pos:start="149:24" pos:end="149:24">&amp;</operator><name pos:start="149:25" pos:end="149:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:34"><expr pos:start="153:9" pos:end="153:33"><operator pos:start="153:9" pos:end="153:9">*</operator><name pos:start="153:10" pos:end="153:26">unescaped_buf_ptr</name>  <operator pos:start="153:29" pos:end="153:29">=</operator> <name pos:start="153:31" pos:end="153:33">dst</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:51"><expr pos:start="155:9" pos:end="155:50"><operator pos:start="155:9" pos:end="155:9">*</operator><name pos:start="155:10" pos:end="155:27">unescaped_buf_size</name> <operator pos:start="155:29" pos:end="155:29">=</operator> <operator pos:start="155:31" pos:end="155:31">(</operator><name pos:start="155:32" pos:end="155:40">bit_count</name> <operator pos:start="155:42" pos:end="155:42">+</operator> <literal type="number" pos:start="155:44" pos:end="155:44">7</literal><operator pos:start="155:45" pos:end="155:45">)</operator> <operator pos:start="155:47" pos:end="155:48">&gt;&gt;</operator> <literal type="number" pos:start="155:50" pos:end="155:50">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="159:45"><expr pos:start="157:9" pos:end="159:44"><call pos:start="157:9" pos:end="159:44"><name pos:start="157:9" pos:end="157:14">memset</name><argument_list pos:start="157:15" pos:end="159:44">(<argument pos:start="157:16" pos:end="157:46"><expr pos:start="157:16" pos:end="157:46"><name pos:start="157:16" pos:end="157:24"><name pos:start="157:16" pos:end="157:16">s</name><operator pos:start="157:17" pos:end="157:18">-&gt;</operator><name pos:start="157:19" pos:end="157:24">buffer</name></name> <operator pos:start="157:26" pos:end="157:26">+</operator> <operator pos:start="157:28" pos:end="157:28">*</operator><name pos:start="157:29" pos:end="157:46">unescaped_buf_size</name></expr></argument>, <argument pos:start="157:49" pos:end="157:49"><expr pos:start="157:49" pos:end="157:49"><literal type="number" pos:start="157:49" pos:end="157:49">0</literal></expr></argument>,

               <argument pos:start="159:16" pos:end="159:43"><expr pos:start="159:16" pos:end="159:43"><name pos:start="159:16" pos:end="159:43">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="167:5">else <block pos:start="161:12" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:49">

        <expr_stmt pos:start="163:9" pos:end="163:39"><expr pos:start="163:9" pos:end="163:38"><operator pos:start="163:9" pos:end="163:9">*</operator><name pos:start="163:10" pos:end="163:26">unescaped_buf_ptr</name>  <operator pos:start="163:29" pos:end="163:29">=</operator> <operator pos:start="163:31" pos:end="163:31">*</operator><name pos:start="163:32" pos:end="163:38">buf_ptr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:49"><expr pos:start="165:9" pos:end="165:48"><operator pos:start="165:9" pos:end="165:9">*</operator><name pos:start="165:10" pos:end="165:27">unescaped_buf_size</name> <operator pos:start="165:29" pos:end="165:29">=</operator> <name pos:start="165:31" pos:end="165:37">buf_end</name> <operator pos:start="165:39" pos:end="165:39">-</operator> <operator pos:start="165:41" pos:end="165:41">*</operator><name pos:start="165:42" pos:end="165:48">buf_ptr</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="171:5" pos:end="171:22">return <expr pos:start="171:12" pos:end="171:21"><name pos:start="171:12" pos:end="171:21">start_code</name></expr>;</return>

</block_content>}</block></function>
</unit>
