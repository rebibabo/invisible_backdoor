<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11974.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:35">set_isolation_state</name><parameter_list pos:start="1:36" pos:end="3:64">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:57"><name pos:start="1:37" pos:end="1:52">sPAPRDRConnector</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">drc</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:63"><decl pos:start="3:37" pos:end="3:63"><type pos:start="3:37" pos:end="3:63"><name pos:start="3:37" pos:end="3:57">sPAPRDRIsolationState</name></type> <name pos:start="3:59" pos:end="3:63">state</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="133:1">{<block_content pos:start="7:5" pos:end="131:28">

    <expr_stmt pos:start="7:5" pos:end="7:69"><expr pos:start="7:5" pos:end="7:68"><call pos:start="7:5" pos:end="7:68"><name pos:start="7:5" pos:end="7:39">trace_spapr_drc_set_isolation_state</name><argument_list pos:start="7:40" pos:end="7:68">(<argument pos:start="7:41" pos:end="7:60"><expr pos:start="7:41" pos:end="7:60"><call pos:start="7:41" pos:end="7:60"><name pos:start="7:41" pos:end="7:55">spapr_drc_index</name><argument_list pos:start="7:56" pos:end="7:60">(<argument pos:start="7:57" pos:end="7:59"><expr pos:start="7:57" pos:end="7:59"><name pos:start="7:57" pos:end="7:59">drc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7:63" pos:end="7:67"><expr pos:start="7:63" pos:end="7:67"><name pos:start="7:63" pos:end="7:67">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="11:5" pos:end="19:7">/* if the guest is configuring a device attached to this DRC, we

     * should reset the configuration state at this point since it may

     * no longer be reliable (guest released device and needs to start

     * over, or unplug occurred so the FDT is no longer valid)

     */</comment>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:51">(<expr pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:13">state</name> <operator pos:start="21:15" pos:end="21:16">==</operator> <name pos:start="21:18" pos:end="21:50">SPAPR_DR_ISOLATION_STATE_ISOLATED</name></expr>)</condition> <block pos:start="21:53" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:24">

        <expr_stmt pos:start="23:9" pos:end="23:25"><expr pos:start="23:9" pos:end="23:24"><call pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:14">g_free</name><argument_list pos:start="23:15" pos:end="23:24">(<argument pos:start="23:16" pos:end="23:23"><expr pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:18">drc</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:23">ccs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:24"><expr pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:11">drc</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:16">ccs</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <name pos:start="25:20" pos:end="25:23">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="47:5"><if pos:start="31:5" pos:end="47:5">if <condition pos:start="31:8" pos:end="31:53">(<expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:13">state</name> <operator pos:start="31:15" pos:end="31:16">==</operator> <name pos:start="31:18" pos:end="31:52">SPAPR_DR_ISOLATION_STATE_UNISOLATED</name></expr>)</condition> <block pos:start="31:55" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:9">

        <comment type="block" pos:start="33:9" pos:end="37:11">/* cannot unisolate a non-existent resource, and, or resources

         * which are in an 'UNUSABLE' allocation state. (PAPR 2.7, 13.5.3.5)

         */</comment>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="41:72">(<expr pos:start="39:13" pos:end="41:71"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:21"><name pos:start="39:14" pos:end="39:16">drc</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:21">dev</name></name> <operator pos:start="39:23" pos:end="39:24">||</operator>

            <name pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:15">drc</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:33">allocation_state</name></name> <operator pos:start="41:35" pos:end="41:36">==</operator> <name pos:start="41:38" pos:end="41:71">SPAPR_DR_ALLOCATION_STATE_UNUSABLE</name></expr>)</condition> <block pos:start="41:74" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:46">

            <return pos:start="43:13" pos:end="43:46">return <expr pos:start="43:20" pos:end="43:45"><name pos:start="43:20" pos:end="43:45">RTAS_OUT_NO_SUCH_INDICATOR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="69:7">/*

     * Fail any requests to ISOLATE the LMB DRC if this LMB doesn't

     * belong to a DIMM device that is marked for removal.

     *

     * Currently the guest userspace tool drmgr that drives the memory

     * hotplug/unplug will just try to remove a set of 'removable' LMBs

     * in response to a hot unplug request that is based on drc-count.

     * If the LMB being removed doesn't belong to a DIMM device that is

     * actually being unplugged, fail the isolation request here.

     */</comment>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="71:59">(<expr pos:start="71:9" pos:end="71:58"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:22">spapr_drc_type</name><argument_list pos:start="71:23" pos:end="71:27">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">drc</name></expr></argument>)</argument_list></call> <operator pos:start="71:29" pos:end="71:30">==</operator> <name pos:start="71:32" pos:end="71:58">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr>)</condition> <block pos:start="71:61" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:9">

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="75:36">(<expr pos:start="73:13" pos:end="75:35"><operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:18">state</name> <operator pos:start="73:20" pos:end="73:21">==</operator> <name pos:start="73:23" pos:end="73:55">SPAPR_DR_ISOLATION_STATE_ISOLATED</name><operator pos:start="73:56" pos:end="73:56">)</operator> <operator pos:start="73:58" pos:end="73:59">&amp;&amp;</operator>

             <operator pos:start="75:14" pos:end="75:14">!</operator><name pos:start="75:15" pos:end="75:35"><name pos:start="75:15" pos:end="75:17">drc</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:35">awaiting_release</name></name></expr>)</condition> <block pos:start="75:38" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:37">

            <return pos:start="77:13" pos:end="77:37">return <expr pos:start="77:20" pos:end="77:36"><name pos:start="77:20" pos:end="77:36">RTAS_OUT_HW_ERROR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:33"><expr pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:7">drc</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:24">isolation_state</name></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:32">state</name></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="127:5"><if pos:start="89:5" pos:end="127:5">if <condition pos:start="89:8" pos:end="89:66">(<expr pos:start="89:9" pos:end="89:65"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:11">drc</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:28">isolation_state</name></name> <operator pos:start="89:30" pos:end="89:31">==</operator> <name pos:start="89:33" pos:end="89:65">SPAPR_DR_ISOLATION_STATE_ISOLATED</name></expr>)</condition> <block pos:start="89:68" pos:end="127:5">{<block_content pos:start="107:9" pos:end="125:32">

        <comment type="block" pos:start="91:9" pos:end="105:11">/* if we're awaiting release, but still in an unconfigured state,

         * it's likely the guest is still in the process of configuring

         * the device and is transitioning the devices to an ISOLATED

         * state as a part of that process. so we only complete the

         * removal when this transition happens for a device in a

         * configured state, as suggested by the state diagram from

         * PAPR+ 2.7, 13.4

         */</comment>

        <if_stmt pos:start="107:9" pos:end="123:9"><if pos:start="107:9" pos:end="123:9">if <condition pos:start="107:12" pos:end="107:34">(<expr pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:15">drc</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:33">awaiting_release</name></name></expr>)</condition> <block pos:start="107:36" pos:end="123:9">{<block_content pos:start="109:13" pos:end="121:13">

            <decl_stmt pos:start="109:13" pos:end="109:54"><decl pos:start="109:13" pos:end="109:53"><type pos:start="109:13" pos:end="109:20"><name pos:start="109:13" pos:end="109:20">uint32_t</name></type> <name pos:start="109:22" pos:end="109:30">drc_index</name> <init pos:start="109:32" pos:end="109:53">= <expr pos:start="109:34" pos:end="109:53"><call pos:start="109:34" pos:end="109:53"><name pos:start="109:34" pos:end="109:48">spapr_drc_index</name><argument_list pos:start="109:49" pos:end="109:53">(<argument pos:start="109:50" pos:end="109:52"><expr pos:start="109:50" pos:end="109:52"><name pos:start="109:50" pos:end="109:52">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="111:13" pos:end="121:13"><if pos:start="111:13" pos:end="117:13">if <condition pos:start="111:16" pos:end="111:32">(<expr pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:19">drc</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:31">configured</name></name></expr>)</condition> <block pos:start="111:34" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:62">

                <expr_stmt pos:start="113:17" pos:end="113:74"><expr pos:start="113:17" pos:end="113:73"><call pos:start="113:17" pos:end="113:73"><name pos:start="113:17" pos:end="113:62">trace_spapr_drc_set_isolation_state_finalizing</name><argument_list pos:start="113:63" pos:end="113:73">(<argument pos:start="113:64" pos:end="113:72"><expr pos:start="113:64" pos:end="113:72"><name pos:start="113:64" pos:end="113:72">drc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:62"><expr pos:start="115:17" pos:end="115:61"><call pos:start="115:17" pos:end="115:61"><name pos:start="115:17" pos:end="115:32">spapr_drc_detach</name><argument_list pos:start="115:33" pos:end="115:61">(<argument pos:start="115:34" pos:end="115:36"><expr pos:start="115:34" pos:end="115:36"><name pos:start="115:34" pos:end="115:36">drc</name></expr></argument>, <argument pos:start="115:39" pos:end="115:54"><expr pos:start="115:39" pos:end="115:54"><call pos:start="115:39" pos:end="115:54"><name pos:start="115:39" pos:end="115:44">DEVICE</name><argument_list pos:start="115:45" pos:end="115:54">(<argument pos:start="115:46" pos:end="115:53"><expr pos:start="115:46" pos:end="115:53"><name pos:start="115:46" pos:end="115:53"><name pos:start="115:46" pos:end="115:48">drc</name><operator pos:start="115:49" pos:end="115:50">-&gt;</operator><name pos:start="115:51" pos:end="115:53">dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:57" pos:end="115:60"><expr pos:start="115:57" pos:end="115:60"><name pos:start="115:57" pos:end="115:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="117:15" pos:end="121:13">else <block pos:start="117:20" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:73">

                <expr_stmt pos:start="119:17" pos:end="119:73"><expr pos:start="119:17" pos:end="119:72"><call pos:start="119:17" pos:end="119:72"><name pos:start="119:17" pos:end="119:61">trace_spapr_drc_set_isolation_state_deferring</name><argument_list pos:start="119:62" pos:end="119:72">(<argument pos:start="119:63" pos:end="119:71"><expr pos:start="119:63" pos:end="119:71"><name pos:start="119:63" pos:end="119:71">drc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:32"><expr pos:start="125:9" pos:end="125:31"><name pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:11">drc</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:23">configured</name></name> <operator pos:start="125:25" pos:end="125:25">=</operator> <name pos:start="125:27" pos:end="125:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="131:5" pos:end="131:28">return <expr pos:start="131:12" pos:end="131:27"><name pos:start="131:12" pos:end="131:27">RTAS_OUT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
