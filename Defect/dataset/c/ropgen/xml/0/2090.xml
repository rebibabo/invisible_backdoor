<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2090.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">av_utf8_decode</name><parameter_list pos:start="1:19" pos:end="3:38">(<parameter pos:start="1:20" pos:end="1:33"><decl pos:start="1:20" pos:end="1:33"><type pos:start="1:20" pos:end="1:33"><name pos:start="1:20" pos:end="1:26">int32_t</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:33">codep</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:48">uint8_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier><modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">bufp</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:79"><decl pos:start="1:58" pos:end="1:79"><type pos:start="1:58" pos:end="1:79"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:70">uint8_t</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:79">buf_end</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:37"><decl pos:start="3:20" pos:end="3:37"><type pos:start="3:20" pos:end="3:37"><name pos:start="3:20" pos:end="3:27">unsigned</name> <name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:37">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:15">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">p</name> <init pos:start="7:22" pos:end="7:28">= <expr pos:start="7:24" pos:end="7:28"><operator pos:start="7:24" pos:end="7:24">*</operator><name pos:start="7:25" pos:end="7:28">bufp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">top</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:9">p</name> <operator pos:start="17:11" pos:end="17:12">&gt;=</operator> <name pos:start="17:14" pos:end="17:20">buf_end</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:8">code</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <operator pos:start="23:12" pos:end="23:12">*</operator><name pos:start="23:13" pos:end="23:13">p</name><operator pos:start="23:14" pos:end="23:15">++</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="29:31">/* first sequence byte starts with 10, or is 1111-1110 or 1111-1111,

       which is not admitted */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:46">(<expr pos:start="31:9" pos:end="31:45"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:13">code</name> <operator pos:start="31:15" pos:end="31:15">&amp;</operator> <literal type="number" pos:start="31:17" pos:end="31:20">0xc0</literal><operator pos:start="31:21" pos:end="31:21">)</operator> <operator pos:start="31:23" pos:end="31:24">==</operator> <literal type="number" pos:start="31:26" pos:end="31:29">0x80</literal> <operator pos:start="31:31" pos:end="31:32">||</operator> <name pos:start="31:34" pos:end="31:37">code</name> <operator pos:start="31:39" pos:end="31:40">&gt;=</operator> <literal type="number" pos:start="31:42" pos:end="31:45">0xFE</literal></expr>)</condition> <block pos:start="31:48" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:29"><name pos:start="33:15" pos:end="33:21">AVERROR</name><argument_list pos:start="33:22" pos:end="33:29">(<argument pos:start="33:23" pos:end="33:28"><expr pos:start="33:23" pos:end="33:28"><name pos:start="33:23" pos:end="33:28">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="35:9" pos:end="35:17">goto <name pos:start="35:14" pos:end="35:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:28"><expr pos:start="39:5" pos:end="39:27"><name pos:start="39:5" pos:end="39:7">top</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <operator pos:start="39:11" pos:end="39:11">(</operator><name pos:start="39:12" pos:end="39:15">code</name> <operator pos:start="39:17" pos:end="39:17">&amp;</operator> <literal type="number" pos:start="39:19" pos:end="39:21">128</literal><operator pos:start="39:22" pos:end="39:22">)</operator> <operator pos:start="39:24" pos:end="39:25">&gt;&gt;</operator> <literal type="number" pos:start="39:27" pos:end="39:27">1</literal></expr>;</expr_stmt>



    <while pos:start="43:5" pos:end="73:5">while <condition pos:start="43:11" pos:end="43:22">(<expr pos:start="43:12" pos:end="43:21"><name pos:start="43:12" pos:end="43:15">code</name> <operator pos:start="43:17" pos:end="43:17">&amp;</operator> <name pos:start="43:19" pos:end="43:21">top</name></expr>)</condition> <block pos:start="43:24" pos:end="73:5">{<block_content pos:start="45:9" pos:end="71:18">

        <decl_stmt pos:start="45:9" pos:end="45:16"><decl pos:start="45:9" pos:end="45:15"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:15">tmp</name></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:25">(<expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:13">p</name> <operator pos:start="47:15" pos:end="47:16">&gt;=</operator> <name pos:start="47:18" pos:end="47:24">buf_end</name></expr>)</condition> <block pos:start="47:27" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:35">

            <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><operator pos:start="49:13" pos:end="49:13">(</operator><operator pos:start="49:14" pos:end="49:14">*</operator><name pos:start="49:15" pos:end="49:18">bufp</name><operator pos:start="49:19" pos:end="49:19">)</operator> <operator pos:start="49:21" pos:end="49:22">++</operator></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:35">return <expr pos:start="51:20" pos:end="51:34"><call pos:start="51:20" pos:end="51:34"><name pos:start="51:20" pos:end="51:26">AVERROR</name><argument_list pos:start="51:27" pos:end="51:34">(<argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="block" pos:start="51:37" pos:end="51:61">/* incomplete sequence */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="57:60">/* we assume the byte to be in the form 10xx-xxxx */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:11">tmp</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <operator pos:start="59:15" pos:end="59:15">*</operator><name pos:start="59:16" pos:end="59:16">p</name><operator pos:start="59:17" pos:end="59:18">++</operator> <operator pos:start="59:20" pos:end="59:20">-</operator> <literal type="number" pos:start="59:22" pos:end="59:24">128</literal></expr>;</expr_stmt>   <comment type="block" pos:start="59:29" pos:end="59:49">/* strip leading 1 */</comment>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:19">(<expr pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:15">tmp</name><operator pos:start="61:16" pos:end="61:17">&gt;&gt;</operator><literal type="number" pos:start="61:18" pos:end="61:18">6</literal></expr>)</condition> <block pos:start="61:21" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:35">

            <expr_stmt pos:start="63:13" pos:end="63:23"><expr pos:start="63:13" pos:end="63:22"><operator pos:start="63:13" pos:end="63:13">(</operator><operator pos:start="63:14" pos:end="63:14">*</operator><name pos:start="63:15" pos:end="63:18">bufp</name><operator pos:start="63:19" pos:end="63:19">)</operator> <operator pos:start="63:21" pos:end="63:22">++</operator></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:35">return <expr pos:start="65:20" pos:end="65:34"><call pos:start="65:20" pos:end="65:34"><name pos:start="65:20" pos:end="65:26">AVERROR</name><argument_list pos:start="65:27" pos:end="65:34">(<argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><name pos:start="65:28" pos:end="65:33">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:12">code</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <operator pos:start="69:16" pos:end="69:16">(</operator><name pos:start="69:17" pos:end="69:20">code</name><operator pos:start="69:21" pos:end="69:22">&lt;&lt;</operator><literal type="number" pos:start="69:23" pos:end="69:23">6</literal><operator pos:start="69:24" pos:end="69:24">)</operator> <operator pos:start="69:26" pos:end="69:26">+</operator> <name pos:start="69:28" pos:end="69:30">tmp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:11">top</name> <operator pos:start="71:13" pos:end="71:15">&lt;&lt;=</operator> <literal type="number" pos:start="71:17" pos:end="71:17">5</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:8">code</name> <operator pos:start="75:10" pos:end="75:11">&amp;=</operator> <operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">top</name> <operator pos:start="75:18" pos:end="75:19">&lt;&lt;</operator> <literal type="number" pos:start="75:21" pos:end="75:21">1</literal><operator pos:start="75:22" pos:end="75:22">)</operator> <operator pos:start="75:24" pos:end="75:24">-</operator> <literal type="number" pos:start="75:26" pos:end="75:26">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:22">(<expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:12">code</name> <operator pos:start="79:14" pos:end="79:15">&gt;=</operator> <literal type="number" pos:start="79:17" pos:end="79:17">1</literal><operator pos:start="79:18" pos:end="79:19">&lt;&lt;</operator><literal type="number" pos:start="79:20" pos:end="79:21">31</literal></expr>)</condition> <block pos:start="79:24" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:17">

        <expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:29"><name pos:start="81:15" pos:end="81:21">AVERROR</name><argument_list pos:start="81:22" pos:end="81:29">(<argument pos:start="81:23" pos:end="81:28"><expr pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:28">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="81:33" pos:end="81:56">/* out-of-range value */</comment>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:18"><expr pos:start="89:5" pos:end="89:17"><operator pos:start="89:5" pos:end="89:5">*</operator><name pos:start="89:6" pos:end="89:10">codep</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:17">code</name></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="97:30"><if pos:start="93:5" pos:end="97:30">if <condition pos:start="93:8" pos:end="95:57">(<expr pos:start="93:9" pos:end="95:56"><name pos:start="93:9" pos:end="93:12">code</name> <operator pos:start="93:14" pos:end="93:14">&gt;</operator> <literal type="number" pos:start="93:16" pos:end="93:23">0x10FFFF</literal> <operator pos:start="93:25" pos:end="93:26">&amp;&amp;</operator>

        <operator pos:start="95:9" pos:end="95:9">!</operator><operator pos:start="95:10" pos:end="95:10">(</operator><name pos:start="95:11" pos:end="95:15">flags</name> <operator pos:start="95:17" pos:end="95:17">&amp;</operator> <name pos:start="95:19" pos:end="95:55">AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES</name><operator pos:start="95:56" pos:end="95:56">)</operator></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:30"><block_content pos:start="97:9" pos:end="97:30">

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:29"><name pos:start="97:15" pos:end="97:21">AVERROR</name><argument_list pos:start="97:22" pos:end="97:29">(<argument pos:start="97:23" pos:end="97:28"><expr pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:28">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="99:5" pos:end="103:30"><if pos:start="99:5" pos:end="103:30">if <condition pos:start="99:8" pos:end="101:63">(<expr pos:start="99:9" pos:end="101:62"><name pos:start="99:9" pos:end="99:12">code</name> <operator pos:start="99:14" pos:end="99:14">&lt;</operator> <literal type="number" pos:start="99:16" pos:end="99:19">0x20</literal> <operator pos:start="99:21" pos:end="99:22">&amp;&amp;</operator> <name pos:start="99:24" pos:end="99:27">code</name> <operator pos:start="99:29" pos:end="99:30">!=</operator> <literal type="number" pos:start="99:32" pos:end="99:34">0x9</literal> <operator pos:start="99:36" pos:end="99:37">&amp;&amp;</operator> <name pos:start="99:39" pos:end="99:42">code</name> <operator pos:start="99:44" pos:end="99:45">!=</operator> <literal type="number" pos:start="99:47" pos:end="99:49">0xA</literal> <operator pos:start="99:51" pos:end="99:52">&amp;&amp;</operator> <name pos:start="99:54" pos:end="99:57">code</name> <operator pos:start="99:59" pos:end="99:60">!=</operator> <literal type="number" pos:start="99:62" pos:end="99:64">0xD</literal> <operator pos:start="99:66" pos:end="99:67">&amp;&amp;</operator>

        <name pos:start="101:9" pos:end="101:13">flags</name> <operator pos:start="101:15" pos:end="101:15">&amp;</operator> <name pos:start="101:17" pos:end="101:62">AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:30"><block_content pos:start="103:9" pos:end="103:30">

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:29"><name pos:start="103:15" pos:end="103:21">AVERROR</name><argument_list pos:start="103:22" pos:end="103:29">(<argument pos:start="103:23" pos:end="103:28"><expr pos:start="103:23" pos:end="103:28"><name pos:start="103:23" pos:end="103:28">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="109:30"><if pos:start="105:5" pos:end="109:30">if <condition pos:start="105:8" pos:end="107:50">(<expr pos:start="105:9" pos:end="107:49"><name pos:start="105:9" pos:end="105:12">code</name> <operator pos:start="105:14" pos:end="105:15">&gt;=</operator> <literal type="number" pos:start="105:17" pos:end="105:22">0xD800</literal> <operator pos:start="105:24" pos:end="105:25">&amp;&amp;</operator> <name pos:start="105:27" pos:end="105:30">code</name> <operator pos:start="105:32" pos:end="105:33">&lt;=</operator> <literal type="number" pos:start="105:35" pos:end="105:40">0xDFFF</literal> <operator pos:start="105:42" pos:end="105:43">&amp;&amp;</operator>

        <operator pos:start="107:9" pos:end="107:9">!</operator><operator pos:start="107:10" pos:end="107:10">(</operator><name pos:start="107:11" pos:end="107:15">flags</name> <operator pos:start="107:17" pos:end="107:17">&amp;</operator> <name pos:start="107:19" pos:end="107:48">AV_UTF8_FLAG_ACCEPT_SURROGATES</name><operator pos:start="107:49" pos:end="107:49">)</operator></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:30"><block_content pos:start="109:9" pos:end="109:30">

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:29"><name pos:start="109:15" pos:end="109:21">AVERROR</name><argument_list pos:start="109:22" pos:end="109:29">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><name pos:start="109:23" pos:end="109:28">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="115:30"><if pos:start="111:5" pos:end="115:30">if <condition pos:start="111:8" pos:end="113:54">(<expr pos:start="111:9" pos:end="113:53"><operator pos:start="111:9" pos:end="111:9">(</operator><name pos:start="111:10" pos:end="111:13">code</name> <operator pos:start="111:15" pos:end="111:16">==</operator> <literal type="number" pos:start="111:18" pos:end="111:23">0xFFFE</literal> <operator pos:start="111:25" pos:end="111:26">||</operator> <name pos:start="111:28" pos:end="111:31">code</name> <operator pos:start="111:33" pos:end="111:34">==</operator> <literal type="number" pos:start="111:36" pos:end="111:41">0xFFFF</literal><operator pos:start="111:42" pos:end="111:42">)</operator> <operator pos:start="111:44" pos:end="111:45">&amp;&amp;</operator>

        <operator pos:start="113:9" pos:end="113:9">!</operator><operator pos:start="113:10" pos:end="113:10">(</operator><name pos:start="113:11" pos:end="113:15">flags</name> <operator pos:start="113:17" pos:end="113:17">&amp;</operator> <name pos:start="113:19" pos:end="113:52">AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS</name><operator pos:start="113:53" pos:end="113:53">)</operator></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:30"><block_content pos:start="115:9" pos:end="115:30">

        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:29"><name pos:start="115:15" pos:end="115:21">AVERROR</name><argument_list pos:start="115:22" pos:end="115:29">(<argument pos:start="115:23" pos:end="115:28"><expr pos:start="115:23" pos:end="115:28"><name pos:start="115:23" pos:end="115:28">EILSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="119:1" pos:end="119:4"><name pos:start="119:1" pos:end="119:3">end</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:14"><expr pos:start="121:5" pos:end="121:13"><operator pos:start="121:5" pos:end="121:5">*</operator><name pos:start="121:6" pos:end="121:9">bufp</name> <operator pos:start="121:11" pos:end="121:11">=</operator> <name pos:start="121:13" pos:end="121:13">p</name></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
