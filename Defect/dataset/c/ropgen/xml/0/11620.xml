<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11620.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">finish_read_pci_config</name><parameter_list pos:start="1:35" pos:end="5:53">(<parameter pos:start="1:36" pos:end="1:58"><decl pos:start="1:36" pos:end="1:58"><type pos:start="1:36" pos:end="1:58"><name pos:start="1:36" pos:end="1:51">sPAPREnvironment</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">spapr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:73"><decl pos:start="1:61" pos:end="1:73"><type pos:start="1:61" pos:end="1:73"><name pos:start="1:61" pos:end="1:68">uint64_t</name></type> <name pos:start="1:70" pos:end="1:73">buid</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:43">uint32_t</name></type> <name pos:start="3:45" pos:end="3:48">addr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:63"><decl pos:start="3:51" pos:end="3:63"><type pos:start="3:51" pos:end="3:63"><name pos:start="3:51" pos:end="3:58">uint32_t</name></type> <name pos:start="3:60" pos:end="3:63">size</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:52"><decl pos:start="5:36" pos:end="5:52"><type pos:start="5:36" pos:end="5:52"><name pos:start="5:36" pos:end="5:47">target_ulong</name></type> <name pos:start="5:49" pos:end="5:52">rets</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="57:1">{<block_content pos:start="9:5" pos:end="55:26">

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:22">pci_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">val</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:13">size</name> <operator pos:start="15:15" pos:end="15:16">!=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">1</literal><operator pos:start="15:19" pos:end="15:19">)</operator> <operator pos:start="15:21" pos:end="15:22">&amp;&amp;</operator> <operator pos:start="15:24" pos:end="15:24">(</operator><name pos:start="15:25" pos:end="15:28">size</name> <operator pos:start="15:30" pos:end="15:31">!=</operator> <literal type="number" pos:start="15:33" pos:end="15:33">2</literal><operator pos:start="15:34" pos:end="15:34">)</operator> <operator pos:start="15:36" pos:end="15:37">&amp;&amp;</operator> <operator pos:start="15:39" pos:end="15:39">(</operator><name pos:start="15:40" pos:end="15:43">size</name> <operator pos:start="15:45" pos:end="15:46">!=</operator> <literal type="number" pos:start="15:48" pos:end="15:48">4</literal><operator pos:start="15:49" pos:end="15:49">)</operator></expr>)</condition> <block pos:start="15:52" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <comment type="block" pos:start="17:9" pos:end="17:44">/* access must be 1, 2 or 4 bytes */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><call pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:15">rtas_st</name><argument_list pos:start="19:16" pos:end="19:43">(<argument pos:start="19:17" pos:end="19:20"><expr pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:20">rets</name></expr></argument>, <argument pos:start="19:23" pos:end="19:23"><expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></argument>, <argument pos:start="19:26" pos:end="19:42"><expr pos:start="19:26" pos:end="19:42"><name pos:start="19:26" pos:end="19:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:42"><expr pos:start="27:5" pos:end="27:41"><name pos:start="27:5" pos:end="27:11">pci_dev</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:41"><name pos:start="27:15" pos:end="27:22">find_dev</name><argument_list pos:start="27:23" pos:end="27:41">(<argument pos:start="27:24" pos:end="27:28"><expr pos:start="27:24" pos:end="27:28"><name pos:start="27:24" pos:end="27:28">spapr</name></expr></argument>, <argument pos:start="27:31" pos:end="27:34"><expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">buid</name></expr></argument>, <argument pos:start="27:37" pos:end="27:40"><expr pos:start="27:37" pos:end="27:40"><name pos:start="27:37" pos:end="27:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:8">addr</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:33"><name pos:start="29:12" pos:end="29:27">rtas_pci_cfgaddr</name><argument_list pos:start="29:28" pos:end="29:33">(<argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="43:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:72">(<expr pos:start="33:9" pos:end="33:71"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:16">pci_dev</name> <operator pos:start="33:18" pos:end="33:19">||</operator> <operator pos:start="33:21" pos:end="33:21">(</operator><name pos:start="33:22" pos:end="33:25">addr</name> <operator pos:start="33:27" pos:end="33:27">%</operator> <name pos:start="33:29" pos:end="33:32">size</name><operator pos:start="33:33" pos:end="33:33">)</operator> <operator pos:start="33:35" pos:end="33:36">||</operator> <operator pos:start="33:38" pos:end="33:38">(</operator><name pos:start="33:39" pos:end="33:42">addr</name> <operator pos:start="33:44" pos:end="33:45">&gt;=</operator> <call pos:start="33:47" pos:end="33:70"><name pos:start="33:47" pos:end="33:61">pci_config_size</name><argument_list pos:start="33:62" pos:end="33:70">(<argument pos:start="33:63" pos:end="33:69"><expr pos:start="33:63" pos:end="33:69"><name pos:start="33:63" pos:end="33:69">pci_dev</name></expr></argument>)</argument_list></call><operator pos:start="33:71" pos:end="33:71">)</operator></expr>)</condition> <block pos:start="33:74" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:15">

        <comment type="block" pos:start="35:9" pos:end="37:31">/* Access must be to a valid device, within bounds and

         * naturally aligned */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:44"><expr pos:start="39:9" pos:end="39:43"><call pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:15">rtas_st</name><argument_list pos:start="39:16" pos:end="39:43">(<argument pos:start="39:17" pos:end="39:20"><expr pos:start="39:17" pos:end="39:20"><name pos:start="39:17" pos:end="39:20">rets</name></expr></argument>, <argument pos:start="39:23" pos:end="39:23"><expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr></argument>, <argument pos:start="39:26" pos:end="39:42"><expr pos:start="39:26" pos:end="39:42"><name pos:start="39:26" pos:end="39:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:70"><expr pos:start="47:5" pos:end="49:69"><name pos:start="47:5" pos:end="47:7">val</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="49:69"><name pos:start="47:11" pos:end="47:37">pci_host_config_read_common</name><argument_list pos:start="47:38" pos:end="49:69">(<argument pos:start="47:39" pos:end="47:45"><expr pos:start="47:39" pos:end="47:45"><name pos:start="47:39" pos:end="47:45">pci_dev</name></expr></argument>, <argument pos:start="47:48" pos:end="47:51"><expr pos:start="47:48" pos:end="47:51"><name pos:start="47:48" pos:end="47:51">addr</name></expr></argument>,

                                      <argument pos:start="49:39" pos:end="49:62"><expr pos:start="49:39" pos:end="49:62"><call pos:start="49:39" pos:end="49:62"><name pos:start="49:39" pos:end="49:53">pci_config_size</name><argument_list pos:start="49:54" pos:end="49:62">(<argument pos:start="49:55" pos:end="49:61"><expr pos:start="49:55" pos:end="49:61"><name pos:start="49:55" pos:end="49:61">pci_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:65" pos:end="49:68"><expr pos:start="49:65" pos:end="49:68"><name pos:start="49:65" pos:end="49:68">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:39"><expr pos:start="53:5" pos:end="53:38"><call pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:11">rtas_st</name><argument_list pos:start="53:12" pos:end="53:38">(<argument pos:start="53:13" pos:end="53:16"><expr pos:start="53:13" pos:end="53:16"><name pos:start="53:13" pos:end="53:16">rets</name></expr></argument>, <argument pos:start="53:19" pos:end="53:19"><expr pos:start="53:19" pos:end="53:19"><literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr></argument>, <argument pos:start="53:22" pos:end="53:37"><expr pos:start="53:22" pos:end="53:37"><name pos:start="53:22" pos:end="53:37">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:11">rtas_st</name><argument_list pos:start="55:12" pos:end="55:25">(<argument pos:start="55:13" pos:end="55:16"><expr pos:start="55:13" pos:end="55:16"><name pos:start="55:13" pos:end="55:16">rets</name></expr></argument>, <argument pos:start="55:19" pos:end="55:19"><expr pos:start="55:19" pos:end="55:19"><literal type="number" pos:start="55:19" pos:end="55:19">1</literal></expr></argument>, <argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><name pos:start="55:22" pos:end="55:24">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
