<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19500.c" pos:tabs="8"><function pos:start="1:1" pos:end="575:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">term_handle_command</name><parameter_list pos:start="1:32" pos:end="1:52">(<parameter pos:start="1:33" pos:end="1:51"><decl pos:start="1:33" pos:end="1:51"><type pos:start="1:33" pos:end="1:44"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">cmdline</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="575:1">{<block_content pos:start="5:5" pos:end="573:11">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>, <decl pos:start="5:20" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:26">pstart</name></decl>, <decl pos:start="5:29" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:36">typestr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">c</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:18">nb_args</name></decl>, <decl pos:start="9:21" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:23">len</name></decl>, <decl pos:start="9:26" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:26">i</name></decl>, <decl pos:start="9:29" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:29" pos:end="9:35">has_arg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">term_cmd_t</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:16">cmdname</name><index pos:start="13:17" pos:end="13:21">[<expr pos:start="13:18" pos:end="13:20"><literal type="number" pos:start="13:18" pos:end="13:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:18">[<expr pos:start="15:14" pos:end="15:17"><literal type="number" pos:start="15:14" pos:end="15:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:33"><name pos:start="17:11" pos:end="17:23">str_allocated</name><index pos:start="17:24" pos:end="17:33">[<expr pos:start="17:25" pos:end="17:32"><name pos:start="17:25" pos:end="17:32">MAX_ARGS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="24:0"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:24"><name pos:start="19:11" pos:end="19:14">args</name><index pos:start="19:15" pos:end="19:24">[<expr pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:23">MAX_ARGS</name></expr>]</index></name></decl>;</decl_stmt>



<cpp:ifdef pos:start="23:1" pos:end="23:12">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:42"><call pos:start="25:5" pos:end="25:42"><name pos:start="25:5" pos:end="25:15">term_printf</name><argument_list pos:start="25:16" pos:end="25:42">(<argument pos:start="25:17" pos:end="25:32"><expr pos:start="25:17" pos:end="25:32"><literal type="string" pos:start="25:17" pos:end="25:32">"command='%s'\n"</literal></expr></argument>, <argument pos:start="25:35" pos:end="25:41"><expr pos:start="25:35" pos:end="25:41"><name pos:start="25:35" pos:end="25:41">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    

    <comment type="block" pos:start="31:5" pos:end="31:34">/* extract the command name */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">p</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:15">cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:5">q</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <name pos:start="35:9" pos:end="35:15">cmdname</name></expr>;</expr_stmt>

    <while pos:start="37:5" pos:end="39:12">while <condition pos:start="37:11" pos:end="37:23">(<expr pos:start="37:12" pos:end="37:22"><call pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:18">isspace</name><argument_list pos:start="37:19" pos:end="37:22">(<argument pos:start="37:20" pos:end="37:21"><expr pos:start="37:20" pos:end="37:21"><operator pos:start="37:20" pos:end="37:20">*</operator><name pos:start="37:21" pos:end="37:21">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:12"><block_content pos:start="39:9" pos:end="39:12">

        <expr_stmt pos:start="39:9" pos:end="39:12"><expr pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:9">p</name><operator pos:start="39:10" pos:end="39:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="41:5" pos:end="43:15"><if pos:start="41:5" pos:end="43:15">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:10">p</name> <operator pos:start="41:12" pos:end="41:13">==</operator> <literal type="char" pos:start="41:15" pos:end="41:18">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:15"><block_content pos:start="43:9" pos:end="43:15">

        <return pos:start="43:9" pos:end="43:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:15"><expr pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:10">pstart</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <name pos:start="45:14" pos:end="45:14">p</name></expr>;</expr_stmt>

    <while pos:start="47:5" pos:end="49:12">while <condition pos:start="47:11" pos:end="47:51">(<expr pos:start="47:12" pos:end="47:50"><operator pos:start="47:12" pos:end="47:12">*</operator><name pos:start="47:13" pos:end="47:13">p</name> <operator pos:start="47:15" pos:end="47:16">!=</operator> <literal type="char" pos:start="47:18" pos:end="47:21">'\0'</literal> <operator pos:start="47:23" pos:end="47:24">&amp;&amp;</operator> <operator pos:start="47:26" pos:end="47:26">*</operator><name pos:start="47:27" pos:end="47:27">p</name> <operator pos:start="47:29" pos:end="47:30">!=</operator> <literal type="char" pos:start="47:32" pos:end="47:34">'/'</literal> <operator pos:start="47:36" pos:end="47:37">&amp;&amp;</operator> <operator pos:start="47:39" pos:end="47:39">!</operator><call pos:start="47:40" pos:end="47:50"><name pos:start="47:40" pos:end="47:46">isspace</name><argument_list pos:start="47:47" pos:end="47:50">(<argument pos:start="47:48" pos:end="47:49"><expr pos:start="47:48" pos:end="47:49"><operator pos:start="47:48" pos:end="47:48">*</operator><name pos:start="47:49" pos:end="47:49">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:12"><block_content pos:start="49:9" pos:end="49:12">

        <expr_stmt pos:start="49:9" pos:end="49:12"><expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:9">p</name><operator pos:start="49:10" pos:end="49:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt pos:start="51:5" pos:end="51:21"><expr pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <name pos:start="51:11" pos:end="51:11">p</name> <operator pos:start="51:13" pos:end="51:13">-</operator> <name pos:start="51:15" pos:end="51:20">pstart</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:34"><if pos:start="53:5" pos:end="55:34">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:11">len</name> <operator pos:start="53:13" pos:end="53:13">&gt;</operator> <sizeof pos:start="53:15" pos:end="53:29">sizeof<argument_list pos:start="53:21" pos:end="53:29">(<argument pos:start="53:22" pos:end="53:28"><expr pos:start="53:22" pos:end="53:28"><name pos:start="53:22" pos:end="53:28">cmdname</name></expr></argument>)</argument_list></sizeof> <operator pos:start="53:31" pos:end="53:31">-</operator> <literal type="number" pos:start="53:33" pos:end="53:33">1</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:34"><block_content pos:start="55:9" pos:end="55:34">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:11">len</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <sizeof pos:start="55:15" pos:end="55:29">sizeof<argument_list pos:start="55:21" pos:end="55:29">(<argument pos:start="55:22" pos:end="55:28"><expr pos:start="55:22" pos:end="55:28"><name pos:start="55:22" pos:end="55:28">cmdname</name></expr></argument>)</argument_list></sizeof> <operator pos:start="55:31" pos:end="55:31">-</operator> <literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:10">memcpy</name><argument_list pos:start="57:11" pos:end="57:32">(<argument pos:start="57:12" pos:end="57:18"><expr pos:start="57:12" pos:end="57:18"><name pos:start="57:12" pos:end="57:18">cmdname</name></expr></argument>, <argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">pstart</name></expr></argument>, <argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:11">cmdname</name><index pos:start="59:12" pos:end="59:16">[<expr pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">len</name></expr>]</index></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <literal type="char" pos:start="59:20" pos:end="59:23">'\0'</literal></expr>;</expr_stmt>

    

    <comment type="block" pos:start="63:5" pos:end="63:26">/* find the command */</comment>

    <for pos:start="65:5" pos:end="71:5">for<control pos:start="65:8" pos:end="65:50">(<init pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">cmd</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:23">term_cmds</name></expr>;</init> <condition pos:start="65:26" pos:end="65:43"><expr pos:start="65:26" pos:end="65:42"><name pos:start="65:26" pos:end="65:34"><name pos:start="65:26" pos:end="65:28">cmd</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:34">name</name></name> <operator pos:start="65:36" pos:end="65:37">!=</operator> <name pos:start="65:39" pos:end="65:42">NULL</name></expr>;</condition> <incr pos:start="65:45" pos:end="65:49"><expr pos:start="65:45" pos:end="65:49"><name pos:start="65:45" pos:end="65:47">cmd</name><operator pos:start="65:48" pos:end="65:49">++</operator></expr></incr>)</control> <block pos:start="65:52" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:23">

        <if_stmt pos:start="67:9" pos:end="69:23"><if pos:start="67:9" pos:end="69:23">if <condition pos:start="67:12" pos:end="67:44">(<expr pos:start="67:13" pos:end="67:43"><call pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:23">compare_cmd</name><argument_list pos:start="67:24" pos:end="67:43">(<argument pos:start="67:25" pos:end="67:31"><expr pos:start="67:25" pos:end="67:31"><name pos:start="67:25" pos:end="67:31">cmdname</name></expr></argument>, <argument pos:start="67:34" pos:end="67:42"><expr pos:start="67:34" pos:end="67:42"><name pos:start="67:34" pos:end="67:42"><name pos:start="67:34" pos:end="67:36">cmd</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:42">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:23"><block_content pos:start="69:13" pos:end="69:23"> 

            <goto pos:start="69:13" pos:end="69:23">goto <name pos:start="69:18" pos:end="69:22">found</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:52"><expr pos:start="73:5" pos:end="73:51"><call pos:start="73:5" pos:end="73:51"><name pos:start="73:5" pos:end="73:15">term_printf</name><argument_list pos:start="73:16" pos:end="73:51">(<argument pos:start="73:17" pos:end="73:41"><expr pos:start="73:17" pos:end="73:41"><literal type="string" pos:start="73:17" pos:end="73:41">"unknown command: '%s'\n"</literal></expr></argument>, <argument pos:start="73:44" pos:end="73:50"><expr pos:start="73:44" pos:end="73:50"><name pos:start="73:44" pos:end="73:50">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:11">return;</return>

 <label pos:start="77:2" pos:end="77:7"><name pos:start="77:2" pos:end="77:6">found</name>:</label>



    <for pos:start="81:5" pos:end="83:32">for<control pos:start="81:8" pos:end="81:33">(<init pos:start="81:9" pos:end="81:14"><expr pos:start="81:9" pos:end="81:13"><name pos:start="81:9" pos:end="81:9">i</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <literal type="number" pos:start="81:13" pos:end="81:13">0</literal></expr>;</init> <condition pos:start="81:16" pos:end="81:28"><expr pos:start="81:16" pos:end="81:27"><name pos:start="81:16" pos:end="81:16">i</name> <operator pos:start="81:18" pos:end="81:18">&lt;</operator> <name pos:start="81:20" pos:end="81:27">MAX_ARGS</name></expr>;</condition> <incr pos:start="81:30" pos:end="81:32"><expr pos:start="81:30" pos:end="81:32"><name pos:start="81:30" pos:end="81:30">i</name><operator pos:start="81:31" pos:end="81:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:9" pos:end="83:32"><block_content pos:start="83:9" pos:end="83:32">

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:21">str_allocated</name><index pos:start="83:22" pos:end="83:24">[<expr pos:start="83:23" pos:end="83:23"><name pos:start="83:23" pos:end="83:23">i</name></expr>]</index></name> <operator pos:start="83:26" pos:end="83:26">=</operator> <name pos:start="83:28" pos:end="83:31">NULL</name></expr>;</expr_stmt></block_content></block></for>

    

    <comment type="block" pos:start="87:5" pos:end="87:30">/* parse the parameters */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:29"><expr pos:start="89:5" pos:end="89:28"><name pos:start="89:5" pos:end="89:11">typestr</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:28"><name pos:start="89:15" pos:end="89:17">cmd</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:28">args_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:16"><expr pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:11">nb_args</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <literal type="number" pos:start="91:15" pos:end="91:15">0</literal></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="495:5">for<control pos:start="93:8" pos:end="93:11">(<init pos:start="93:9" pos:end="93:9">;</init><condition pos:start="93:10" pos:end="93:10">;</condition><incr/>)</control> <block pos:start="93:13" pos:end="495:5">{<block_content pos:start="95:9" pos:end="493:9">

        <expr_stmt pos:start="95:9" pos:end="95:21"><expr pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:9">c</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <operator pos:start="95:13" pos:end="95:13">*</operator><name pos:start="95:14" pos:end="95:20">typestr</name></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="99:18"><if pos:start="97:9" pos:end="99:18">if <condition pos:start="97:12" pos:end="97:22">(<expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:13">c</name> <operator pos:start="97:15" pos:end="97:16">==</operator> <literal type="char" pos:start="97:18" pos:end="97:21">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:18"><block_content pos:start="99:13" pos:end="99:18">

            <break pos:start="99:13" pos:end="99:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:18"><expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:15">typestr</name><operator pos:start="101:16" pos:end="101:17">++</operator></expr>;</expr_stmt>

        <switch pos:start="103:9" pos:end="493:9">switch<condition pos:start="103:15" pos:end="103:17">(<expr pos:start="103:16" pos:end="103:16"><name pos:start="103:16" pos:end="103:16">c</name></expr>)</condition> <block pos:start="103:19" pos:end="493:9">{<block_content pos:start="105:9" pos:end="491:22">

        <case pos:start="105:9" pos:end="105:17">case <expr pos:start="105:14" pos:end="105:16"><literal type="char" pos:start="105:14" pos:end="105:16">'F'</literal></expr>:</case>

        <case pos:start="107:9" pos:end="107:17">case <expr pos:start="107:14" pos:end="107:16"><literal type="char" pos:start="107:14" pos:end="107:16">'B'</literal></expr>:</case>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="char" pos:start="109:14" pos:end="109:16">'s'</literal></expr>:</case>

            <block pos:start="111:13" pos:end="189:13">{<block_content pos:start="113:17" pos:end="187:38">

                <decl_stmt pos:start="113:17" pos:end="113:24"><decl pos:start="113:17" pos:end="113:23"><type pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">int</name></type> <name pos:start="113:21" pos:end="113:23">ret</name></decl>;</decl_stmt>

                <decl_stmt pos:start="115:17" pos:end="115:26"><decl pos:start="115:17" pos:end="115:25"><type pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:20">char</name> <modifier pos:start="115:22" pos:end="115:22">*</modifier></type><name pos:start="115:23" pos:end="115:25">str</name></decl>;</decl_stmt>

                

                <while pos:start="119:17" pos:end="121:24">while <condition pos:start="119:23" pos:end="119:35">(<expr pos:start="119:24" pos:end="119:34"><call pos:start="119:24" pos:end="119:34"><name pos:start="119:24" pos:end="119:30">isspace</name><argument_list pos:start="119:31" pos:end="119:34">(<argument pos:start="119:32" pos:end="119:33"><expr pos:start="119:32" pos:end="119:33"><operator pos:start="119:32" pos:end="119:32">*</operator><name pos:start="119:33" pos:end="119:33">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="121:21" pos:end="121:24"><block_content pos:start="121:21" pos:end="121:24"> 

                    <expr_stmt pos:start="121:21" pos:end="121:24"><expr pos:start="121:21" pos:end="121:23"><name pos:start="121:21" pos:end="121:21">p</name><operator pos:start="121:22" pos:end="121:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="123:17" pos:end="137:17"><if pos:start="123:17" pos:end="137:17">if <condition pos:start="123:20" pos:end="123:36">(<expr pos:start="123:21" pos:end="123:35"><operator pos:start="123:21" pos:end="123:21">*</operator><name pos:start="123:22" pos:end="123:28">typestr</name> <operator pos:start="123:30" pos:end="123:31">==</operator> <literal type="char" pos:start="123:33" pos:end="123:35">'?'</literal></expr>)</condition> <block pos:start="123:38" pos:end="137:17">{<block_content pos:start="125:21" pos:end="135:21">

                    <expr_stmt pos:start="125:21" pos:end="125:30"><expr pos:start="125:21" pos:end="125:29"><name pos:start="125:21" pos:end="125:27">typestr</name><operator pos:start="125:28" pos:end="125:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="127:21" pos:end="135:21"><if pos:start="127:21" pos:end="135:21">if <condition pos:start="127:24" pos:end="127:35">(<expr pos:start="127:25" pos:end="127:34"><operator pos:start="127:25" pos:end="127:25">*</operator><name pos:start="127:26" pos:end="127:26">p</name> <operator pos:start="127:28" pos:end="127:29">==</operator> <literal type="char" pos:start="127:31" pos:end="127:34">'\0'</literal></expr>)</condition> <block pos:start="127:37" pos:end="135:21">{<block_content pos:start="131:25" pos:end="133:37">

                        <comment type="block" pos:start="129:25" pos:end="129:63">/* no optional string: NULL argument */</comment>

                        <expr_stmt pos:start="131:25" pos:end="131:35"><expr pos:start="131:25" pos:end="131:34"><name pos:start="131:25" pos:end="131:27">str</name> <operator pos:start="131:29" pos:end="131:29">=</operator> <name pos:start="131:31" pos:end="131:34">NULL</name></expr>;</expr_stmt>

                        <goto pos:start="133:25" pos:end="133:37">goto <name pos:start="133:30" pos:end="133:36">add_str</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:52"><expr pos:start="139:17" pos:end="139:51"><name pos:start="139:17" pos:end="139:19">ret</name> <operator pos:start="139:21" pos:end="139:21">=</operator> <call pos:start="139:23" pos:end="139:51"><name pos:start="139:23" pos:end="139:29">get_str</name><argument_list pos:start="139:30" pos:end="139:51">(<argument pos:start="139:31" pos:end="139:33"><expr pos:start="139:31" pos:end="139:33"><name pos:start="139:31" pos:end="139:33">buf</name></expr></argument>, <argument pos:start="139:36" pos:end="139:46"><expr pos:start="139:36" pos:end="139:46"><sizeof pos:start="139:36" pos:end="139:46">sizeof<argument_list pos:start="139:42" pos:end="139:46">(<argument pos:start="139:43" pos:end="139:45"><expr pos:start="139:43" pos:end="139:45"><name pos:start="139:43" pos:end="139:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:49" pos:end="139:50"><expr pos:start="139:49" pos:end="139:50"><operator pos:start="139:49" pos:end="139:49">&amp;</operator><name pos:start="139:50" pos:end="139:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="141:17" pos:end="167:17"><if pos:start="141:17" pos:end="167:17">if <condition pos:start="141:20" pos:end="141:28">(<expr pos:start="141:21" pos:end="141:27"><name pos:start="141:21" pos:end="141:23">ret</name> <operator pos:start="141:25" pos:end="141:25">&lt;</operator> <literal type="number" pos:start="141:27" pos:end="141:27">0</literal></expr>)</condition> <block pos:start="141:30" pos:end="167:17">{<block_content pos:start="143:21" pos:end="165:30">

                    <switch pos:start="143:21" pos:end="163:21">switch<condition pos:start="143:27" pos:end="143:29">(<expr pos:start="143:28" pos:end="143:28"><name pos:start="143:28" pos:end="143:28">c</name></expr>)</condition> <block pos:start="143:31" pos:end="163:21">{<block_content pos:start="145:21" pos:end="161:30">

                    <case pos:start="145:21" pos:end="145:29">case <expr pos:start="145:26" pos:end="145:28"><literal type="char" pos:start="145:26" pos:end="145:28">'F'</literal></expr>:</case>

                        <expr_stmt pos:start="147:25" pos:end="147:72"><expr pos:start="147:25" pos:end="147:71"><call pos:start="147:25" pos:end="147:71"><name pos:start="147:25" pos:end="147:35">term_printf</name><argument_list pos:start="147:36" pos:end="147:71">(<argument pos:start="147:37" pos:end="147:61"><expr pos:start="147:37" pos:end="147:61"><literal type="string" pos:start="147:37" pos:end="147:61">"%s: filename expected\n"</literal></expr></argument>, <argument pos:start="147:64" pos:end="147:70"><expr pos:start="147:64" pos:end="147:70"><name pos:start="147:64" pos:end="147:70">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="149:25" pos:end="149:30">break;</break>

                    <case pos:start="151:21" pos:end="151:29">case <expr pos:start="151:26" pos:end="151:28"><literal type="char" pos:start="151:26" pos:end="151:28">'B'</literal></expr>:</case>

                        <expr_stmt pos:start="153:25" pos:end="153:81"><expr pos:start="153:25" pos:end="153:80"><call pos:start="153:25" pos:end="153:80"><name pos:start="153:25" pos:end="153:35">term_printf</name><argument_list pos:start="153:36" pos:end="153:80">(<argument pos:start="153:37" pos:end="153:70"><expr pos:start="153:37" pos:end="153:70"><literal type="string" pos:start="153:37" pos:end="153:70">"%s: block device name expected\n"</literal></expr></argument>, <argument pos:start="153:73" pos:end="153:79"><expr pos:start="153:73" pos:end="153:79"><name pos:start="153:73" pos:end="153:79">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="155:25" pos:end="155:30">break;</break>

                    <default pos:start="157:21" pos:end="157:28">default:</default>

                        <expr_stmt pos:start="159:25" pos:end="159:70"><expr pos:start="159:25" pos:end="159:69"><call pos:start="159:25" pos:end="159:69"><name pos:start="159:25" pos:end="159:35">term_printf</name><argument_list pos:start="159:36" pos:end="159:69">(<argument pos:start="159:37" pos:end="159:59"><expr pos:start="159:37" pos:end="159:59"><literal type="string" pos:start="159:37" pos:end="159:59">"%s: string expected\n"</literal></expr></argument>, <argument pos:start="159:62" pos:end="159:68"><expr pos:start="159:62" pos:end="159:68"><name pos:start="159:62" pos:end="159:68">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="161:25" pos:end="161:30">break;</break>

                    </block_content>}</block></switch>

                    <goto pos:start="165:21" pos:end="165:30">goto <name pos:start="165:26" pos:end="165:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:51"><expr pos:start="169:17" pos:end="169:50"><name pos:start="169:17" pos:end="169:19">str</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <call pos:start="169:23" pos:end="169:50"><name pos:start="169:23" pos:end="169:33">qemu_malloc</name><argument_list pos:start="169:34" pos:end="169:50">(<argument pos:start="169:35" pos:end="169:49"><expr pos:start="169:35" pos:end="169:49"><call pos:start="169:35" pos:end="169:45"><name pos:start="169:35" pos:end="169:40">strlen</name><argument_list pos:start="169:41" pos:end="169:45">(<argument pos:start="169:42" pos:end="169:44"><expr pos:start="169:42" pos:end="169:44"><name pos:start="169:42" pos:end="169:44">buf</name></expr></argument>)</argument_list></call> <operator pos:start="169:47" pos:end="169:47">+</operator> <literal type="number" pos:start="169:49" pos:end="169:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:33"><expr pos:start="171:17" pos:end="171:32"><call pos:start="171:17" pos:end="171:32"><name pos:start="171:17" pos:end="171:22">strcpy</name><argument_list pos:start="171:23" pos:end="171:32">(<argument pos:start="171:24" pos:end="171:26"><expr pos:start="171:24" pos:end="171:26"><name pos:start="171:24" pos:end="171:26">str</name></expr></argument>, <argument pos:start="171:29" pos:end="171:31"><expr pos:start="171:29" pos:end="171:31"><name pos:start="171:29" pos:end="171:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:45"><expr pos:start="173:17" pos:end="173:44"><name pos:start="173:17" pos:end="173:38"><name pos:start="173:17" pos:end="173:29">str_allocated</name><index pos:start="173:30" pos:end="173:38">[<expr pos:start="173:31" pos:end="173:37"><name pos:start="173:31" pos:end="173:37">nb_args</name></expr>]</index></name> <operator pos:start="173:40" pos:end="173:40">=</operator> <name pos:start="173:42" pos:end="173:44">str</name></expr>;</expr_stmt>

            <label pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:19">add_str</name>:</label>

                <if_stmt pos:start="177:17" pos:end="185:17"><if pos:start="177:17" pos:end="185:17">if <condition pos:start="177:20" pos:end="177:40">(<expr pos:start="177:21" pos:end="177:39"><name pos:start="177:21" pos:end="177:27">nb_args</name> <operator pos:start="177:29" pos:end="177:30">&gt;=</operator> <name pos:start="177:32" pos:end="177:39">MAX_ARGS</name></expr>)</condition> <block pos:start="177:42" pos:end="185:17">{<block_content pos:start="179:17" pos:end="183:30">

                <label pos:start="179:17" pos:end="179:27"><name pos:start="179:17" pos:end="179:26">error_args</name>:</label>

                    <expr_stmt pos:start="181:21" pos:end="181:69"><expr pos:start="181:21" pos:end="181:68"><call pos:start="181:21" pos:end="181:68"><name pos:start="181:21" pos:end="181:31">term_printf</name><argument_list pos:start="181:32" pos:end="181:68">(<argument pos:start="181:33" pos:end="181:58"><expr pos:start="181:33" pos:end="181:58"><literal type="string" pos:start="181:33" pos:end="181:58">"%s: too many arguments\n"</literal></expr></argument>, <argument pos:start="181:61" pos:end="181:67"><expr pos:start="181:61" pos:end="181:67"><name pos:start="181:61" pos:end="181:67">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="183:21" pos:end="183:30">goto <name pos:start="183:26" pos:end="183:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:38"><expr pos:start="187:17" pos:end="187:37"><name pos:start="187:17" pos:end="187:31"><name pos:start="187:17" pos:end="187:20">args</name><index pos:start="187:21" pos:end="187:31">[<expr pos:start="187:22" pos:end="187:30"><name pos:start="187:22" pos:end="187:28">nb_args</name><operator pos:start="187:29" pos:end="187:30">++</operator></expr>]</index></name> <operator pos:start="187:33" pos:end="187:33">=</operator> <name pos:start="187:35" pos:end="187:37">str</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="191:13" pos:end="191:18">break;</break>

        <case pos:start="193:9" pos:end="193:17">case <expr pos:start="193:14" pos:end="193:16"><literal type="char" pos:start="193:14" pos:end="193:16">'/'</literal></expr>:</case>

            <block pos:start="195:13" pos:end="349:13">{<block_content pos:start="197:17" pos:end="347:46">

                <decl_stmt pos:start="197:17" pos:end="197:40"><decl pos:start="197:17" pos:end="197:25"><type pos:start="197:17" pos:end="197:19"><name pos:start="197:17" pos:end="197:19">int</name></type> <name pos:start="197:21" pos:end="197:25">count</name></decl>, <decl pos:start="197:28" pos:end="197:33"><type ref="prev" pos:start="197:17" pos:end="197:19"/><name pos:start="197:28" pos:end="197:33">format</name></decl>, <decl pos:start="197:36" pos:end="197:39"><type ref="prev" pos:start="197:17" pos:end="197:19"/><name pos:start="197:36" pos:end="197:39">size</name></decl>;</decl_stmt>

                

                <while pos:start="201:17" pos:end="203:24">while <condition pos:start="201:23" pos:end="201:35">(<expr pos:start="201:24" pos:end="201:34"><call pos:start="201:24" pos:end="201:34"><name pos:start="201:24" pos:end="201:30">isspace</name><argument_list pos:start="201:31" pos:end="201:34">(<argument pos:start="201:32" pos:end="201:33"><expr pos:start="201:32" pos:end="201:33"><operator pos:start="201:32" pos:end="201:32">*</operator><name pos:start="201:33" pos:end="201:33">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="203:21" pos:end="203:24"><block_content pos:start="203:21" pos:end="203:24">

                    <expr_stmt pos:start="203:21" pos:end="203:24"><expr pos:start="203:21" pos:end="203:23"><name pos:start="203:21" pos:end="203:21">p</name><operator pos:start="203:22" pos:end="203:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="205:17" pos:end="337:17"><if pos:start="205:17" pos:end="321:17">if <condition pos:start="205:20" pos:end="205:30">(<expr pos:start="205:21" pos:end="205:29"><operator pos:start="205:21" pos:end="205:21">*</operator><name pos:start="205:22" pos:end="205:22">p</name> <operator pos:start="205:24" pos:end="205:25">==</operator> <literal type="char" pos:start="205:27" pos:end="205:29">'/'</literal></expr>)</condition> <block pos:start="205:32" pos:end="321:17">{<block_content pos:start="209:21" pos:end="319:48">

                    <comment type="block" pos:start="207:21" pos:end="207:38">/* format found */</comment>

                    <expr_stmt pos:start="209:21" pos:end="209:24"><expr pos:start="209:21" pos:end="209:23"><name pos:start="209:21" pos:end="209:21">p</name><operator pos:start="209:22" pos:end="209:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:30"><expr pos:start="211:21" pos:end="211:29"><name pos:start="211:21" pos:end="211:25">count</name> <operator pos:start="211:27" pos:end="211:27">=</operator> <literal type="number" pos:start="211:29" pos:end="211:29">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="213:21" pos:end="225:21"><if pos:start="213:21" pos:end="225:21">if <condition pos:start="213:24" pos:end="213:36">(<expr pos:start="213:25" pos:end="213:35"><call pos:start="213:25" pos:end="213:35"><name pos:start="213:25" pos:end="213:31">isdigit</name><argument_list pos:start="213:32" pos:end="213:35">(<argument pos:start="213:33" pos:end="213:34"><expr pos:start="213:33" pos:end="213:34"><operator pos:start="213:33" pos:end="213:33">*</operator><name pos:start="213:34" pos:end="213:34">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:38" pos:end="225:21">{<block_content pos:start="215:25" pos:end="223:25">

                        <expr_stmt pos:start="215:25" pos:end="215:34"><expr pos:start="215:25" pos:end="215:33"><name pos:start="215:25" pos:end="215:29">count</name> <operator pos:start="215:31" pos:end="215:31">=</operator> <literal type="number" pos:start="215:33" pos:end="215:33">0</literal></expr>;</expr_stmt>

                        <while pos:start="217:25" pos:end="223:25">while <condition pos:start="217:31" pos:end="217:43">(<expr pos:start="217:32" pos:end="217:42"><call pos:start="217:32" pos:end="217:42"><name pos:start="217:32" pos:end="217:38">isdigit</name><argument_list pos:start="217:39" pos:end="217:42">(<argument pos:start="217:40" pos:end="217:41"><expr pos:start="217:40" pos:end="217:41"><operator pos:start="217:40" pos:end="217:40">*</operator><name pos:start="217:41" pos:end="217:41">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:45" pos:end="223:25">{<block_content pos:start="219:29" pos:end="221:32">

                            <expr_stmt pos:start="219:29" pos:end="219:60"><expr pos:start="219:29" pos:end="219:59"><name pos:start="219:29" pos:end="219:33">count</name> <operator pos:start="219:35" pos:end="219:35">=</operator> <name pos:start="219:37" pos:end="219:41">count</name> <operator pos:start="219:43" pos:end="219:43">*</operator> <literal type="number" pos:start="219:45" pos:end="219:48">10</literal> <operator pos:start="219:48" pos:end="219:48">+</operator> <operator pos:start="219:50" pos:end="219:50">(</operator><operator pos:start="219:51" pos:end="219:51">*</operator><name pos:start="219:52" pos:end="219:52">p</name> <operator pos:start="219:54" pos:end="219:54">-</operator> <literal type="char" pos:start="219:56" pos:end="219:58">'0'</literal><operator pos:start="219:59" pos:end="219:59">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="221:29" pos:end="221:32"><expr pos:start="221:29" pos:end="221:31"><name pos:start="221:29" pos:end="221:29">p</name><operator pos:start="221:30" pos:end="221:31">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></while>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:30"><expr pos:start="227:21" pos:end="227:29"><name pos:start="227:21" pos:end="227:24">size</name> <operator pos:start="227:26" pos:end="227:26">=</operator> <operator pos:start="227:28" pos:end="227:28">-</operator><literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="229:21" pos:end="229:32"><expr pos:start="229:21" pos:end="229:31"><name pos:start="229:21" pos:end="229:26">format</name> <operator pos:start="229:28" pos:end="229:28">=</operator> <operator pos:start="229:30" pos:end="229:30">-</operator><literal type="number" pos:start="229:31" pos:end="229:31">1</literal></expr>;</expr_stmt>

                    <for pos:start="231:21" pos:end="291:21">for<control pos:start="231:24" pos:end="231:27">(<init pos:start="231:25" pos:end="231:25">;</init><condition pos:start="231:26" pos:end="231:26">;</condition><incr/>)</control> <block pos:start="231:29" pos:end="291:21">{<block_content pos:start="233:25" pos:end="289:25">

                        <switch pos:start="233:25" pos:end="289:25">switch<condition pos:start="233:31" pos:end="233:34">(<expr pos:start="233:32" pos:end="233:33"><operator pos:start="233:32" pos:end="233:32">*</operator><name pos:start="233:33" pos:end="233:33">p</name></expr>)</condition> <block pos:start="233:36" pos:end="289:25">{<block_content pos:start="235:25" pos:end="287:38">

                        <case pos:start="235:25" pos:end="235:33">case <expr pos:start="235:30" pos:end="235:32"><literal type="char" pos:start="235:30" pos:end="235:32">'o'</literal></expr>:</case>

                        <case pos:start="237:25" pos:end="237:33">case <expr pos:start="237:30" pos:end="237:32"><literal type="char" pos:start="237:30" pos:end="237:32">'d'</literal></expr>:</case>

                        <case pos:start="239:25" pos:end="239:33">case <expr pos:start="239:30" pos:end="239:32"><literal type="char" pos:start="239:30" pos:end="239:32">'u'</literal></expr>:</case>

                        <case pos:start="241:25" pos:end="241:33">case <expr pos:start="241:30" pos:end="241:32"><literal type="char" pos:start="241:30" pos:end="241:32">'x'</literal></expr>:</case>

                        <case pos:start="243:25" pos:end="243:33">case <expr pos:start="243:30" pos:end="243:32"><literal type="char" pos:start="243:30" pos:end="243:32">'i'</literal></expr>:</case>

                        <case pos:start="245:25" pos:end="245:33">case <expr pos:start="245:30" pos:end="245:32"><literal type="char" pos:start="245:30" pos:end="245:32">'c'</literal></expr>:</case>

                            <expr_stmt pos:start="247:29" pos:end="247:42"><expr pos:start="247:29" pos:end="247:41"><name pos:start="247:29" pos:end="247:34">format</name> <operator pos:start="247:36" pos:end="247:36">=</operator> <operator pos:start="247:38" pos:end="247:38">*</operator><name pos:start="247:39" pos:end="247:39">p</name><operator pos:start="247:40" pos:end="247:41">++</operator></expr>;</expr_stmt>

                            <break pos:start="249:29" pos:end="249:34">break;</break>

                        <case pos:start="251:25" pos:end="251:33">case <expr pos:start="251:30" pos:end="251:32"><literal type="char" pos:start="251:30" pos:end="251:32">'b'</literal></expr>:</case>

                            <expr_stmt pos:start="253:29" pos:end="253:37"><expr pos:start="253:29" pos:end="253:36"><name pos:start="253:29" pos:end="253:32">size</name> <operator pos:start="253:34" pos:end="253:34">=</operator> <literal type="number" pos:start="253:36" pos:end="253:36">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="255:29" pos:end="255:32"><expr pos:start="255:29" pos:end="255:31"><name pos:start="255:29" pos:end="255:29">p</name><operator pos:start="255:30" pos:end="255:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="257:29" pos:end="257:34">break;</break>

                        <case pos:start="259:25" pos:end="259:33">case <expr pos:start="259:30" pos:end="259:32"><literal type="char" pos:start="259:30" pos:end="259:32">'h'</literal></expr>:</case>

                            <expr_stmt pos:start="261:29" pos:end="261:37"><expr pos:start="261:29" pos:end="261:36"><name pos:start="261:29" pos:end="261:32">size</name> <operator pos:start="261:34" pos:end="261:34">=</operator> <literal type="number" pos:start="261:36" pos:end="261:36">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="263:29" pos:end="263:32"><expr pos:start="263:29" pos:end="263:31"><name pos:start="263:29" pos:end="263:29">p</name><operator pos:start="263:30" pos:end="263:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="265:29" pos:end="265:34">break;</break>

                        <case pos:start="267:25" pos:end="267:33">case <expr pos:start="267:30" pos:end="267:32"><literal type="char" pos:start="267:30" pos:end="267:32">'w'</literal></expr>:</case>

                            <expr_stmt pos:start="269:29" pos:end="269:37"><expr pos:start="269:29" pos:end="269:36"><name pos:start="269:29" pos:end="269:32">size</name> <operator pos:start="269:34" pos:end="269:34">=</operator> <literal type="number" pos:start="269:36" pos:end="269:36">4</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="271:29" pos:end="271:32"><expr pos:start="271:29" pos:end="271:31"><name pos:start="271:29" pos:end="271:29">p</name><operator pos:start="271:30" pos:end="271:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="273:29" pos:end="273:34">break;</break>

                        <case pos:start="275:25" pos:end="275:33">case <expr pos:start="275:30" pos:end="275:32"><literal type="char" pos:start="275:30" pos:end="275:32">'g'</literal></expr>:</case>

                        <case pos:start="277:25" pos:end="277:33">case <expr pos:start="277:30" pos:end="277:32"><literal type="char" pos:start="277:30" pos:end="277:32">'L'</literal></expr>:</case>

                            <expr_stmt pos:start="279:29" pos:end="279:37"><expr pos:start="279:29" pos:end="279:36"><name pos:start="279:29" pos:end="279:32">size</name> <operator pos:start="279:34" pos:end="279:34">=</operator> <literal type="number" pos:start="279:36" pos:end="279:36">8</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="281:29" pos:end="281:32"><expr pos:start="281:29" pos:end="281:31"><name pos:start="281:29" pos:end="281:29">p</name><operator pos:start="281:30" pos:end="281:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="283:29" pos:end="283:34">break;</break>

                        <default pos:start="285:25" pos:end="285:32">default:</default>

                            <goto pos:start="287:29" pos:end="287:38">goto <name pos:start="287:34" pos:end="287:37">next</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                <label pos:start="293:17" pos:end="293:21"><name pos:start="293:17" pos:end="293:20">next</name>:</label>

                    <if_stmt pos:start="295:21" pos:end="301:21"><if pos:start="295:21" pos:end="301:21">if <condition pos:start="295:24" pos:end="295:51">(<expr pos:start="295:25" pos:end="295:50"><operator pos:start="295:25" pos:end="295:25">*</operator><name pos:start="295:26" pos:end="295:26">p</name> <operator pos:start="295:28" pos:end="295:29">!=</operator> <literal type="char" pos:start="295:31" pos:end="295:34">'\0'</literal> <operator pos:start="295:36" pos:end="295:37">&amp;&amp;</operator> <operator pos:start="295:39" pos:end="295:39">!</operator><call pos:start="295:40" pos:end="295:50"><name pos:start="295:40" pos:end="295:46">isspace</name><argument_list pos:start="295:47" pos:end="295:50">(<argument pos:start="295:48" pos:end="295:49"><expr pos:start="295:48" pos:end="295:49"><operator pos:start="295:48" pos:end="295:48">*</operator><name pos:start="295:49" pos:end="295:49">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="295:53" pos:end="301:21">{<block_content pos:start="297:25" pos:end="299:34">

                        <expr_stmt pos:start="297:25" pos:end="297:74"><expr pos:start="297:25" pos:end="297:73"><call pos:start="297:25" pos:end="297:73"><name pos:start="297:25" pos:end="297:35">term_printf</name><argument_list pos:start="297:36" pos:end="297:73">(<argument pos:start="297:37" pos:end="297:68"><expr pos:start="297:37" pos:end="297:68"><literal type="string" pos:start="297:37" pos:end="297:68">"invalid char in format: '%c'\n"</literal></expr></argument>, <argument pos:start="297:71" pos:end="297:72"><expr pos:start="297:71" pos:end="297:72"><operator pos:start="297:71" pos:end="297:71">*</operator><name pos:start="297:72" pos:end="297:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="299:25" pos:end="299:34">goto <name pos:start="299:30" pos:end="299:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="303:21" pos:end="305:52"><if pos:start="303:21" pos:end="305:52">if <condition pos:start="303:24" pos:end="303:35">(<expr pos:start="303:25" pos:end="303:34"><name pos:start="303:25" pos:end="303:30">format</name> <operator pos:start="303:32" pos:end="303:32">&lt;</operator> <literal type="number" pos:start="303:34" pos:end="303:34">0</literal></expr>)</condition><block type="pseudo" pos:start="305:25" pos:end="305:52"><block_content pos:start="305:25" pos:end="305:52">

                        <expr_stmt pos:start="305:25" pos:end="305:52"><expr pos:start="305:25" pos:end="305:51"><name pos:start="305:25" pos:end="305:30">format</name> <operator pos:start="305:32" pos:end="305:32">=</operator> <name pos:start="305:34" pos:end="305:51">default_fmt_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="307:21" pos:end="315:21"><if pos:start="307:21" pos:end="315:21">if <condition pos:start="307:24" pos:end="307:38">(<expr pos:start="307:25" pos:end="307:37"><name pos:start="307:25" pos:end="307:30">format</name> <operator pos:start="307:32" pos:end="307:33">!=</operator> <literal type="char" pos:start="307:35" pos:end="307:37">'i'</literal></expr>)</condition> <block pos:start="307:40" pos:end="315:21">{<block_content pos:start="311:25" pos:end="313:52">

                        <comment type="block" pos:start="309:25" pos:end="309:77">/* for 'i', not specifying a size gives -1 as size */</comment>

                        <if_stmt pos:start="311:25" pos:end="313:52"><if pos:start="311:25" pos:end="313:52">if <condition pos:start="311:28" pos:end="311:37">(<expr pos:start="311:29" pos:end="311:36"><name pos:start="311:29" pos:end="311:32">size</name> <operator pos:start="311:34" pos:end="311:34">&lt;</operator> <literal type="number" pos:start="311:36" pos:end="311:36">0</literal></expr>)</condition><block type="pseudo" pos:start="313:29" pos:end="313:52"><block_content pos:start="313:29" pos:end="313:52">

                            <expr_stmt pos:start="313:29" pos:end="313:52"><expr pos:start="313:29" pos:end="313:51"><name pos:start="313:29" pos:end="313:32">size</name> <operator pos:start="313:34" pos:end="313:34">=</operator> <name pos:start="313:36" pos:end="313:51">default_fmt_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:44"><expr pos:start="317:21" pos:end="317:43"><name pos:start="317:21" pos:end="317:36">default_fmt_size</name> <operator pos:start="317:38" pos:end="317:38">=</operator> <name pos:start="317:40" pos:end="317:43">size</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="319:21" pos:end="319:48"><expr pos:start="319:21" pos:end="319:47"><name pos:start="319:21" pos:end="319:38">default_fmt_format</name> <operator pos:start="319:40" pos:end="319:40">=</operator> <name pos:start="319:42" pos:end="319:47">format</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="321:19" pos:end="337:17">else <block pos:start="321:24" pos:end="337:17">{<block_content pos:start="323:21" pos:end="335:21">

                    <expr_stmt pos:start="323:21" pos:end="323:30"><expr pos:start="323:21" pos:end="323:29"><name pos:start="323:21" pos:end="323:25">count</name> <operator pos:start="323:27" pos:end="323:27">=</operator> <literal type="number" pos:start="323:29" pos:end="323:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="325:21" pos:end="325:48"><expr pos:start="325:21" pos:end="325:47"><name pos:start="325:21" pos:end="325:26">format</name> <operator pos:start="325:28" pos:end="325:28">=</operator> <name pos:start="325:30" pos:end="325:47">default_fmt_format</name></expr>;</expr_stmt>

                    <if_stmt pos:start="327:21" pos:end="335:21"><if pos:start="327:21" pos:end="331:21">if <condition pos:start="327:24" pos:end="327:38">(<expr pos:start="327:25" pos:end="327:37"><name pos:start="327:25" pos:end="327:30">format</name> <operator pos:start="327:32" pos:end="327:33">!=</operator> <literal type="char" pos:start="327:35" pos:end="327:37">'i'</literal></expr>)</condition> <block pos:start="327:40" pos:end="331:21">{<block_content pos:start="329:25" pos:end="329:48">

                        <expr_stmt pos:start="329:25" pos:end="329:48"><expr pos:start="329:25" pos:end="329:47"><name pos:start="329:25" pos:end="329:28">size</name> <operator pos:start="329:30" pos:end="329:30">=</operator> <name pos:start="329:32" pos:end="329:47">default_fmt_size</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="331:23" pos:end="335:21">else <block pos:start="331:28" pos:end="335:21">{<block_content pos:start="333:25" pos:end="333:34">

                        <expr_stmt pos:start="333:25" pos:end="333:34"><expr pos:start="333:25" pos:end="333:33"><name pos:start="333:25" pos:end="333:28">size</name> <operator pos:start="333:30" pos:end="333:30">=</operator> <operator pos:start="333:32" pos:end="333:32">-</operator><literal type="number" pos:start="333:33" pos:end="333:33">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="339:17" pos:end="341:36"><if pos:start="339:17" pos:end="341:36">if <condition pos:start="339:20" pos:end="339:43">(<expr pos:start="339:21" pos:end="339:42"><name pos:start="339:21" pos:end="339:27">nb_args</name> <operator pos:start="339:29" pos:end="339:29">+</operator> <literal type="number" pos:start="339:31" pos:end="339:31">3</literal> <operator pos:start="339:33" pos:end="339:33">&gt;</operator> <name pos:start="339:35" pos:end="339:42">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="341:21" pos:end="341:36"><block_content pos:start="341:21" pos:end="341:36">

                    <goto pos:start="341:21" pos:end="341:36">goto <name pos:start="341:26" pos:end="341:35">error_args</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:47"><expr pos:start="343:17" pos:end="343:46"><name pos:start="343:17" pos:end="343:31"><name pos:start="343:17" pos:end="343:20">args</name><index pos:start="343:21" pos:end="343:31">[<expr pos:start="343:22" pos:end="343:30"><name pos:start="343:22" pos:end="343:28">nb_args</name><operator pos:start="343:29" pos:end="343:30">++</operator></expr>]</index></name> <operator pos:start="343:33" pos:end="343:33">=</operator> <operator pos:start="343:35" pos:end="343:35">(</operator><name pos:start="343:36" pos:end="343:39">void</name><operator pos:start="343:40" pos:end="343:40">*</operator><operator pos:start="343:41" pos:end="343:41">)</operator><name pos:start="343:42" pos:end="343:46">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:48"><expr pos:start="345:17" pos:end="345:47"><name pos:start="345:17" pos:end="345:31"><name pos:start="345:17" pos:end="345:20">args</name><index pos:start="345:21" pos:end="345:31">[<expr pos:start="345:22" pos:end="345:30"><name pos:start="345:22" pos:end="345:28">nb_args</name><operator pos:start="345:29" pos:end="345:30">++</operator></expr>]</index></name> <operator pos:start="345:33" pos:end="345:33">=</operator> <operator pos:start="345:35" pos:end="345:35">(</operator><name pos:start="345:36" pos:end="345:39">void</name><operator pos:start="345:40" pos:end="345:40">*</operator><operator pos:start="345:41" pos:end="345:41">)</operator><name pos:start="345:42" pos:end="345:47">format</name></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:46"><expr pos:start="347:17" pos:end="347:45"><name pos:start="347:17" pos:end="347:31"><name pos:start="347:17" pos:end="347:20">args</name><index pos:start="347:21" pos:end="347:31">[<expr pos:start="347:22" pos:end="347:30"><name pos:start="347:22" pos:end="347:28">nb_args</name><operator pos:start="347:29" pos:end="347:30">++</operator></expr>]</index></name> <operator pos:start="347:33" pos:end="347:33">=</operator> <operator pos:start="347:35" pos:end="347:35">(</operator><name pos:start="347:36" pos:end="347:39">void</name><operator pos:start="347:40" pos:end="347:40">*</operator><operator pos:start="347:41" pos:end="347:41">)</operator><name pos:start="347:42" pos:end="347:45">size</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="351:13" pos:end="351:18">break;</break>

        <case pos:start="353:9" pos:end="353:17">case <expr pos:start="353:14" pos:end="353:16"><literal type="char" pos:start="353:14" pos:end="353:16">'i'</literal></expr>:</case>

            <block pos:start="355:13" pos:end="429:13">{<block_content pos:start="357:17" pos:end="427:46">

                <decl_stmt pos:start="357:17" pos:end="357:24"><decl pos:start="357:17" pos:end="357:23"><type pos:start="357:17" pos:end="357:19"><name pos:start="357:17" pos:end="357:19">int</name></type> <name pos:start="357:21" pos:end="357:23">val</name></decl>;</decl_stmt>

                <while pos:start="359:17" pos:end="361:24">while <condition pos:start="359:23" pos:end="359:35">(<expr pos:start="359:24" pos:end="359:34"><call pos:start="359:24" pos:end="359:34"><name pos:start="359:24" pos:end="359:30">isspace</name><argument_list pos:start="359:31" pos:end="359:34">(<argument pos:start="359:32" pos:end="359:33"><expr pos:start="359:32" pos:end="359:33"><operator pos:start="359:32" pos:end="359:32">*</operator><name pos:start="359:33" pos:end="359:33">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="361:21" pos:end="361:24"><block_content pos:start="361:21" pos:end="361:24"> 

                    <expr_stmt pos:start="361:21" pos:end="361:24"><expr pos:start="361:21" pos:end="361:23"><name pos:start="361:21" pos:end="361:21">p</name><operator pos:start="361:22" pos:end="361:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="363:17" pos:end="415:17"><if pos:start="363:17" pos:end="415:17">if <condition pos:start="363:20" pos:end="363:55">(<expr pos:start="363:21" pos:end="363:54"><operator pos:start="363:21" pos:end="363:21">*</operator><name pos:start="363:22" pos:end="363:28">typestr</name> <operator pos:start="363:30" pos:end="363:31">==</operator> <literal type="char" pos:start="363:33" pos:end="363:35">'?'</literal> <operator pos:start="363:37" pos:end="363:38">||</operator> <operator pos:start="363:40" pos:end="363:40">*</operator><name pos:start="363:41" pos:end="363:47">typestr</name> <operator pos:start="363:49" pos:end="363:50">==</operator> <literal type="char" pos:start="363:52" pos:end="363:54">'.'</literal></expr>)</condition> <block pos:start="363:57" pos:end="415:17">{<block_content pos:start="365:21" pos:end="413:21">

                    <expr_stmt pos:start="365:21" pos:end="365:30"><expr pos:start="365:21" pos:end="365:29"><name pos:start="365:21" pos:end="365:27">typestr</name><operator pos:start="365:28" pos:end="365:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="367:21" pos:end="395:21"><if pos:start="367:21" pos:end="377:21">if <condition pos:start="367:24" pos:end="367:40">(<expr pos:start="367:25" pos:end="367:39"><operator pos:start="367:25" pos:end="367:25">*</operator><name pos:start="367:26" pos:end="367:32">typestr</name> <operator pos:start="367:34" pos:end="367:35">==</operator> <literal type="char" pos:start="367:37" pos:end="367:39">'?'</literal></expr>)</condition> <block pos:start="367:42" pos:end="377:21">{<block_content pos:start="369:25" pos:end="375:40">

                        <if_stmt pos:start="369:25" pos:end="375:40"><if pos:start="369:25" pos:end="371:40">if <condition pos:start="369:28" pos:end="369:39">(<expr pos:start="369:29" pos:end="369:38"><operator pos:start="369:29" pos:end="369:29">*</operator><name pos:start="369:30" pos:end="369:30">p</name> <operator pos:start="369:32" pos:end="369:33">==</operator> <literal type="char" pos:start="369:35" pos:end="369:38">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="371:29" pos:end="371:40"><block_content pos:start="371:29" pos:end="371:40">

                            <expr_stmt pos:start="371:29" pos:end="371:40"><expr pos:start="371:29" pos:end="371:39"><name pos:start="371:29" pos:end="371:35">has_arg</name> <operator pos:start="371:37" pos:end="371:37">=</operator> <literal type="number" pos:start="371:39" pos:end="371:39">0</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="373:25" pos:end="375:40">else<block type="pseudo" pos:start="375:29" pos:end="375:40"><block_content pos:start="375:29" pos:end="375:40">

                            <expr_stmt pos:start="375:29" pos:end="375:40"><expr pos:start="375:29" pos:end="375:39"><name pos:start="375:29" pos:end="375:35">has_arg</name> <operator pos:start="375:37" pos:end="375:37">=</operator> <literal type="number" pos:start="375:39" pos:end="375:39">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="377:23" pos:end="395:21">else <block pos:start="377:28" pos:end="395:21">{<block_content pos:start="379:25" pos:end="393:25">

                        <if_stmt pos:start="379:25" pos:end="393:25"><if pos:start="379:25" pos:end="389:25">if <condition pos:start="379:28" pos:end="379:38">(<expr pos:start="379:29" pos:end="379:37"><operator pos:start="379:29" pos:end="379:29">*</operator><name pos:start="379:30" pos:end="379:30">p</name> <operator pos:start="379:32" pos:end="379:33">==</operator> <literal type="char" pos:start="379:35" pos:end="379:37">'.'</literal></expr>)</condition> <block pos:start="379:40" pos:end="389:25">{<block_content pos:start="381:29" pos:end="387:40">

                            <expr_stmt pos:start="381:29" pos:end="381:32"><expr pos:start="381:29" pos:end="381:31"><name pos:start="381:29" pos:end="381:29">p</name><operator pos:start="381:30" pos:end="381:31">++</operator></expr>;</expr_stmt>

                            <while pos:start="383:29" pos:end="385:36">while <condition pos:start="383:35" pos:end="383:47">(<expr pos:start="383:36" pos:end="383:46"><call pos:start="383:36" pos:end="383:46"><name pos:start="383:36" pos:end="383:42">isspace</name><argument_list pos:start="383:43" pos:end="383:46">(<argument pos:start="383:44" pos:end="383:45"><expr pos:start="383:44" pos:end="383:45"><operator pos:start="383:44" pos:end="383:44">*</operator><name pos:start="383:45" pos:end="383:45">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="385:33" pos:end="385:36"><block_content pos:start="385:33" pos:end="385:36"> 

                                <expr_stmt pos:start="385:33" pos:end="385:36"><expr pos:start="385:33" pos:end="385:35"><name pos:start="385:33" pos:end="385:33">p</name><operator pos:start="385:34" pos:end="385:35">++</operator></expr>;</expr_stmt></block_content></block></while>

                            <expr_stmt pos:start="387:29" pos:end="387:40"><expr pos:start="387:29" pos:end="387:39"><name pos:start="387:29" pos:end="387:35">has_arg</name> <operator pos:start="387:37" pos:end="387:37">=</operator> <literal type="number" pos:start="387:39" pos:end="387:39">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="389:27" pos:end="393:25">else <block pos:start="389:32" pos:end="393:25">{<block_content pos:start="391:29" pos:end="391:40">

                            <expr_stmt pos:start="391:29" pos:end="391:40"><expr pos:start="391:29" pos:end="391:39"><name pos:start="391:29" pos:end="391:35">has_arg</name> <operator pos:start="391:37" pos:end="391:37">=</operator> <literal type="number" pos:start="391:39" pos:end="391:39">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="397:21" pos:end="399:40"><if pos:start="397:21" pos:end="399:40">if <condition pos:start="397:24" pos:end="397:44">(<expr pos:start="397:25" pos:end="397:43"><name pos:start="397:25" pos:end="397:31">nb_args</name> <operator pos:start="397:33" pos:end="397:34">&gt;=</operator> <name pos:start="397:36" pos:end="397:43">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="399:25" pos:end="399:40"><block_content pos:start="399:25" pos:end="399:40">

                        <goto pos:start="399:25" pos:end="399:40">goto <name pos:start="399:30" pos:end="399:39">error_args</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="401:21" pos:end="401:54"><expr pos:start="401:21" pos:end="401:53"><name pos:start="401:21" pos:end="401:35"><name pos:start="401:21" pos:end="401:24">args</name><index pos:start="401:25" pos:end="401:35">[<expr pos:start="401:26" pos:end="401:34"><name pos:start="401:26" pos:end="401:32">nb_args</name><operator pos:start="401:33" pos:end="401:34">++</operator></expr>]</index></name> <operator pos:start="401:37" pos:end="401:37">=</operator> <operator pos:start="401:39" pos:end="401:39">(</operator><name pos:start="401:40" pos:end="401:43">void</name> <operator pos:start="401:45" pos:end="401:45">*</operator><operator pos:start="401:46" pos:end="401:46">)</operator><name pos:start="401:47" pos:end="401:53">has_arg</name></expr>;</expr_stmt>

                    <if_stmt pos:start="403:21" pos:end="413:21"><if pos:start="403:21" pos:end="413:21">if <condition pos:start="403:24" pos:end="403:33">(<expr pos:start="403:25" pos:end="403:32"><operator pos:start="403:25" pos:end="403:25">!</operator><name pos:start="403:26" pos:end="403:32">has_arg</name></expr>)</condition> <block pos:start="403:35" pos:end="413:21">{<block_content pos:start="405:25" pos:end="411:37">

                        <if_stmt pos:start="405:25" pos:end="407:44"><if pos:start="405:25" pos:end="407:44">if <condition pos:start="405:28" pos:end="405:48">(<expr pos:start="405:29" pos:end="405:47"><name pos:start="405:29" pos:end="405:35">nb_args</name> <operator pos:start="405:37" pos:end="405:38">&gt;=</operator> <name pos:start="405:40" pos:end="405:47">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="407:29" pos:end="407:44"><block_content pos:start="407:29" pos:end="407:44">

                            <goto pos:start="407:29" pos:end="407:44">goto <name pos:start="407:34" pos:end="407:43">error_args</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="409:25" pos:end="409:33"><expr pos:start="409:25" pos:end="409:32"><name pos:start="409:25" pos:end="409:27">val</name> <operator pos:start="409:29" pos:end="409:29">=</operator> <operator pos:start="409:31" pos:end="409:31">-</operator><literal type="number" pos:start="409:32" pos:end="409:32">1</literal></expr>;</expr_stmt>

                        <goto pos:start="411:25" pos:end="411:37">goto <name pos:start="411:30" pos:end="411:36">add_num</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="417:17" pos:end="419:30"><if pos:start="417:17" pos:end="419:30">if <condition pos:start="417:20" pos:end="417:39">(<expr pos:start="417:21" pos:end="417:38"><call pos:start="417:21" pos:end="417:38"><name pos:start="417:21" pos:end="417:28">get_expr</name><argument_list pos:start="417:29" pos:end="417:38">(<argument pos:start="417:30" pos:end="417:33"><expr pos:start="417:30" pos:end="417:33"><operator pos:start="417:30" pos:end="417:30">&amp;</operator><name pos:start="417:31" pos:end="417:33">val</name></expr></argument>, <argument pos:start="417:36" pos:end="417:37"><expr pos:start="417:36" pos:end="417:37"><operator pos:start="417:36" pos:end="417:36">&amp;</operator><name pos:start="417:37" pos:end="417:37">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="419:21" pos:end="419:30"><block_content pos:start="419:21" pos:end="419:30">

                    <goto pos:start="419:21" pos:end="419:30">goto <name pos:start="419:26" pos:end="419:29">fail</name>;</goto></block_content></block></if></if_stmt>

            <label pos:start="421:13" pos:end="421:20"><name pos:start="421:13" pos:end="421:19">add_num</name>:</label>

                <if_stmt pos:start="423:17" pos:end="425:36"><if pos:start="423:17" pos:end="425:36">if <condition pos:start="423:20" pos:end="423:40">(<expr pos:start="423:21" pos:end="423:39"><name pos:start="423:21" pos:end="423:27">nb_args</name> <operator pos:start="423:29" pos:end="423:30">&gt;=</operator> <name pos:start="423:32" pos:end="423:39">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="425:21" pos:end="425:36"><block_content pos:start="425:21" pos:end="425:36">

                    <goto pos:start="425:21" pos:end="425:36">goto <name pos:start="425:26" pos:end="425:35">error_args</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="427:17" pos:end="427:46"><expr pos:start="427:17" pos:end="427:45"><name pos:start="427:17" pos:end="427:31"><name pos:start="427:17" pos:end="427:20">args</name><index pos:start="427:21" pos:end="427:31">[<expr pos:start="427:22" pos:end="427:30"><name pos:start="427:22" pos:end="427:28">nb_args</name><operator pos:start="427:29" pos:end="427:30">++</operator></expr>]</index></name> <operator pos:start="427:33" pos:end="427:33">=</operator> <operator pos:start="427:35" pos:end="427:35">(</operator><name pos:start="427:36" pos:end="427:39">void</name> <operator pos:start="427:41" pos:end="427:41">*</operator><operator pos:start="427:42" pos:end="427:42">)</operator><name pos:start="427:43" pos:end="427:45">val</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        <case pos:start="433:9" pos:end="433:17">case <expr pos:start="433:14" pos:end="433:16"><literal type="char" pos:start="433:14" pos:end="433:16">'-'</literal></expr>:</case>

            <block pos:start="435:13" pos:end="481:13">{<block_content pos:start="437:17" pos:end="479:53">

                <decl_stmt pos:start="437:17" pos:end="437:31"><decl pos:start="437:17" pos:end="437:30"><type pos:start="437:17" pos:end="437:19"><name pos:start="437:17" pos:end="437:19">int</name></type> <name pos:start="437:21" pos:end="437:30">has_option</name></decl>;</decl_stmt>

                <comment type="block" pos:start="439:17" pos:end="439:28">/* option */</comment>

                

                <expr_stmt pos:start="443:17" pos:end="443:31"><expr pos:start="443:17" pos:end="443:30"><name pos:start="443:17" pos:end="443:17">c</name> <operator pos:start="443:19" pos:end="443:19">=</operator> <operator pos:start="443:21" pos:end="443:21">*</operator><name pos:start="443:22" pos:end="443:28">typestr</name><operator pos:start="443:29" pos:end="443:30">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="445:17" pos:end="447:34"><if pos:start="445:17" pos:end="447:34">if <condition pos:start="445:20" pos:end="445:30">(<expr pos:start="445:21" pos:end="445:29"><name pos:start="445:21" pos:end="445:21">c</name> <operator pos:start="445:23" pos:end="445:24">==</operator> <literal type="char" pos:start="445:26" pos:end="445:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="447:21" pos:end="447:34"><block_content pos:start="447:21" pos:end="447:34">

                    <goto pos:start="447:21" pos:end="447:34">goto <name pos:start="447:26" pos:end="447:33">bad_type</name>;</goto></block_content></block></if></if_stmt>

                <while pos:start="449:17" pos:end="451:24">while <condition pos:start="449:23" pos:end="449:35">(<expr pos:start="449:24" pos:end="449:34"><call pos:start="449:24" pos:end="449:34"><name pos:start="449:24" pos:end="449:30">isspace</name><argument_list pos:start="449:31" pos:end="449:34">(<argument pos:start="449:32" pos:end="449:33"><expr pos:start="449:32" pos:end="449:33"><operator pos:start="449:32" pos:end="449:32">*</operator><name pos:start="449:33" pos:end="449:33">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="451:21" pos:end="451:24"><block_content pos:start="451:21" pos:end="451:24"> 

                    <expr_stmt pos:start="451:21" pos:end="451:24"><expr pos:start="451:21" pos:end="451:23"><name pos:start="451:21" pos:end="451:21">p</name><operator pos:start="451:22" pos:end="451:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="453:17" pos:end="453:31"><expr pos:start="453:17" pos:end="453:30"><name pos:start="453:17" pos:end="453:26">has_option</name> <operator pos:start="453:28" pos:end="453:28">=</operator> <literal type="number" pos:start="453:30" pos:end="453:30">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="455:17" pos:end="473:17"><if pos:start="455:17" pos:end="473:17">if <condition pos:start="455:20" pos:end="455:30">(<expr pos:start="455:21" pos:end="455:29"><operator pos:start="455:21" pos:end="455:21">*</operator><name pos:start="455:22" pos:end="455:22">p</name> <operator pos:start="455:24" pos:end="455:25">==</operator> <literal type="char" pos:start="455:27" pos:end="455:29">'-'</literal></expr>)</condition> <block pos:start="455:32" pos:end="473:17">{<block_content pos:start="457:21" pos:end="471:35">

                    <expr_stmt pos:start="457:21" pos:end="457:24"><expr pos:start="457:21" pos:end="457:23"><name pos:start="457:21" pos:end="457:21">p</name><operator pos:start="457:22" pos:end="457:23">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="459:21" pos:end="467:21"><if pos:start="459:21" pos:end="467:21">if <condition pos:start="459:24" pos:end="459:32">(<expr pos:start="459:25" pos:end="459:31"><operator pos:start="459:25" pos:end="459:25">*</operator><name pos:start="459:26" pos:end="459:26">p</name> <operator pos:start="459:28" pos:end="459:29">!=</operator> <name pos:start="459:31" pos:end="459:31">c</name></expr>)</condition> <block pos:start="459:34" pos:end="467:21">{<block_content pos:start="461:25" pos:end="465:34">

                        <expr_stmt pos:start="461:25" pos:end="463:49"><expr pos:start="461:25" pos:end="463:48"><call pos:start="461:25" pos:end="463:48"><name pos:start="461:25" pos:end="461:35">term_printf</name><argument_list pos:start="461:36" pos:end="463:48">(<argument pos:start="461:37" pos:end="461:66"><expr pos:start="461:37" pos:end="461:66"><literal type="string" pos:start="461:37" pos:end="461:66">"%s: unsupported option -%c\n"</literal></expr></argument>, 

                                    <argument pos:start="463:37" pos:end="463:43"><expr pos:start="463:37" pos:end="463:43"><name pos:start="463:37" pos:end="463:43">cmdname</name></expr></argument>, <argument pos:start="463:46" pos:end="463:47"><expr pos:start="463:46" pos:end="463:47"><operator pos:start="463:46" pos:end="463:46">*</operator><name pos:start="463:47" pos:end="463:47">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="465:25" pos:end="465:34">goto <name pos:start="465:30" pos:end="465:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="469:21" pos:end="469:24"><expr pos:start="469:21" pos:end="469:23"><name pos:start="469:21" pos:end="469:21">p</name><operator pos:start="469:22" pos:end="469:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="471:21" pos:end="471:35"><expr pos:start="471:21" pos:end="471:34"><name pos:start="471:21" pos:end="471:30">has_option</name> <operator pos:start="471:32" pos:end="471:32">=</operator> <literal type="number" pos:start="471:34" pos:end="471:34">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="475:17" pos:end="477:36"><if pos:start="475:17" pos:end="477:36">if <condition pos:start="475:20" pos:end="475:40">(<expr pos:start="475:21" pos:end="475:39"><name pos:start="475:21" pos:end="475:27">nb_args</name> <operator pos:start="475:29" pos:end="475:30">&gt;=</operator> <name pos:start="475:32" pos:end="475:39">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="477:21" pos:end="477:36"><block_content pos:start="477:21" pos:end="477:36">

                    <goto pos:start="477:21" pos:end="477:36">goto <name pos:start="477:26" pos:end="477:35">error_args</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="479:17" pos:end="479:53"><expr pos:start="479:17" pos:end="479:52"><name pos:start="479:17" pos:end="479:31"><name pos:start="479:17" pos:end="479:20">args</name><index pos:start="479:21" pos:end="479:31">[<expr pos:start="479:22" pos:end="479:30"><name pos:start="479:22" pos:end="479:28">nb_args</name><operator pos:start="479:29" pos:end="479:30">++</operator></expr>]</index></name> <operator pos:start="479:33" pos:end="479:33">=</operator> <operator pos:start="479:35" pos:end="479:35">(</operator><name pos:start="479:36" pos:end="479:39">void</name> <operator pos:start="479:41" pos:end="479:41">*</operator><operator pos:start="479:42" pos:end="479:42">)</operator><name pos:start="479:43" pos:end="479:52">has_option</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="483:13" pos:end="483:18">break;</break>

        <default pos:start="485:9" pos:end="485:16">default:</default>

        <label pos:start="487:9" pos:end="487:17"><name pos:start="487:9" pos:end="487:16">bad_type</name>:</label>

            <expr_stmt pos:start="489:13" pos:end="489:63"><expr pos:start="489:13" pos:end="489:62"><call pos:start="489:13" pos:end="489:62"><name pos:start="489:13" pos:end="489:23">term_printf</name><argument_list pos:start="489:24" pos:end="489:62">(<argument pos:start="489:25" pos:end="489:49"><expr pos:start="489:25" pos:end="489:49"><literal type="string" pos:start="489:25" pos:end="489:49">"%s: unknown type '%c'\n"</literal></expr></argument>, <argument pos:start="489:52" pos:end="489:58"><expr pos:start="489:52" pos:end="489:58"><name pos:start="489:52" pos:end="489:58">cmdname</name></expr></argument>, <argument pos:start="489:61" pos:end="489:61"><expr pos:start="489:61" pos:end="489:61"><name pos:start="489:61" pos:end="489:61">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="491:13" pos:end="491:22">goto <name pos:start="491:18" pos:end="491:21">fail</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <comment type="block" pos:start="497:5" pos:end="497:46">/* check that all arguments were parsed */</comment>

    <while pos:start="499:5" pos:end="501:12">while <condition pos:start="499:11" pos:end="499:23">(<expr pos:start="499:12" pos:end="499:22"><call pos:start="499:12" pos:end="499:22"><name pos:start="499:12" pos:end="499:18">isspace</name><argument_list pos:start="499:19" pos:end="499:22">(<argument pos:start="499:20" pos:end="499:21"><expr pos:start="499:20" pos:end="499:21"><operator pos:start="499:20" pos:end="499:20">*</operator><name pos:start="499:21" pos:end="499:21">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="501:9" pos:end="501:12"><block_content pos:start="501:9" pos:end="501:12">

        <expr_stmt pos:start="501:9" pos:end="501:12"><expr pos:start="501:9" pos:end="501:11"><name pos:start="501:9" pos:end="501:9">p</name><operator pos:start="501:10" pos:end="501:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="503:5" pos:end="511:5"><if pos:start="503:5" pos:end="511:5">if <condition pos:start="503:8" pos:end="503:19">(<expr pos:start="503:9" pos:end="503:18"><operator pos:start="503:9" pos:end="503:9">*</operator><name pos:start="503:10" pos:end="503:10">p</name> <operator pos:start="503:12" pos:end="503:13">!=</operator> <literal type="char" pos:start="503:15" pos:end="503:18">'\0'</literal></expr>)</condition> <block pos:start="503:21" pos:end="511:5">{<block_content pos:start="505:9" pos:end="509:18">

        <expr_stmt pos:start="505:9" pos:end="507:29"><expr pos:start="505:9" pos:end="507:28"><call pos:start="505:9" pos:end="507:28"><name pos:start="505:9" pos:end="505:19">term_printf</name><argument_list pos:start="505:20" pos:end="507:28">(<argument pos:start="505:21" pos:end="505:68"><expr pos:start="505:21" pos:end="505:68"><literal type="string" pos:start="505:21" pos:end="505:68">"%s: extraneous characters at the end of line\n"</literal></expr></argument>, 

                    <argument pos:start="507:21" pos:end="507:27"><expr pos:start="507:21" pos:end="507:27"><name pos:start="507:21" pos:end="507:27">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="509:9" pos:end="509:18">goto <name pos:start="509:14" pos:end="509:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="515:5" pos:end="565:5">switch<condition pos:start="515:11" pos:end="515:19">(<expr pos:start="515:12" pos:end="515:18"><name pos:start="515:12" pos:end="515:18">nb_args</name></expr>)</condition> <block pos:start="515:21" pos:end="565:5">{<block_content pos:start="517:5" pos:end="563:18">

    <case pos:start="517:5" pos:end="517:11">case <expr pos:start="517:10" pos:end="517:10"><literal type="number" pos:start="517:10" pos:end="517:10">0</literal></expr>:</case>

        <expr_stmt pos:start="519:9" pos:end="519:23"><expr pos:start="519:9" pos:end="519:22"><call pos:start="519:9" pos:end="519:22"><name pos:start="519:9" pos:end="519:20"><name pos:start="519:9" pos:end="519:11">cmd</name><operator pos:start="519:12" pos:end="519:13">-&gt;</operator><name pos:start="519:14" pos:end="519:20">handler</name></name><argument_list pos:start="519:21" pos:end="519:22">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="521:9" pos:end="521:14">break;</break>

    <case pos:start="523:5" pos:end="523:11">case <expr pos:start="523:10" pos:end="523:10"><literal type="number" pos:start="523:10" pos:end="523:10">1</literal></expr>:</case>

        <expr_stmt pos:start="525:9" pos:end="525:30"><expr pos:start="525:9" pos:end="525:29"><call pos:start="525:9" pos:end="525:29"><name pos:start="525:9" pos:end="525:20"><name pos:start="525:9" pos:end="525:11">cmd</name><operator pos:start="525:12" pos:end="525:13">-&gt;</operator><name pos:start="525:14" pos:end="525:20">handler</name></name><argument_list pos:start="525:21" pos:end="525:29">(<argument pos:start="525:22" pos:end="525:28"><expr pos:start="525:22" pos:end="525:28"><name pos:start="525:22" pos:end="525:28"><name pos:start="525:22" pos:end="525:25">args</name><index pos:start="525:26" pos:end="525:28">[<expr pos:start="525:27" pos:end="525:27"><literal type="number" pos:start="525:27" pos:end="525:27">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="527:9" pos:end="527:14">break;</break>

    <case pos:start="529:5" pos:end="529:11">case <expr pos:start="529:10" pos:end="529:10"><literal type="number" pos:start="529:10" pos:end="529:10">2</literal></expr>:</case>

        <expr_stmt pos:start="531:9" pos:end="531:39"><expr pos:start="531:9" pos:end="531:38"><call pos:start="531:9" pos:end="531:38"><name pos:start="531:9" pos:end="531:20"><name pos:start="531:9" pos:end="531:11">cmd</name><operator pos:start="531:12" pos:end="531:13">-&gt;</operator><name pos:start="531:14" pos:end="531:20">handler</name></name><argument_list pos:start="531:21" pos:end="531:38">(<argument pos:start="531:22" pos:end="531:28"><expr pos:start="531:22" pos:end="531:28"><name pos:start="531:22" pos:end="531:28"><name pos:start="531:22" pos:end="531:25">args</name><index pos:start="531:26" pos:end="531:28">[<expr pos:start="531:27" pos:end="531:27"><literal type="number" pos:start="531:27" pos:end="531:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="531:31" pos:end="531:37"><expr pos:start="531:31" pos:end="531:37"><name pos:start="531:31" pos:end="531:37"><name pos:start="531:31" pos:end="531:34">args</name><index pos:start="531:35" pos:end="531:37">[<expr pos:start="531:36" pos:end="531:36"><literal type="number" pos:start="531:36" pos:end="531:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="533:9" pos:end="533:14">break;</break>

    <case pos:start="535:5" pos:end="535:11">case <expr pos:start="535:10" pos:end="535:10"><literal type="number" pos:start="535:10" pos:end="535:10">3</literal></expr>:</case>

        <expr_stmt pos:start="537:9" pos:end="537:48"><expr pos:start="537:9" pos:end="537:47"><call pos:start="537:9" pos:end="537:47"><name pos:start="537:9" pos:end="537:20"><name pos:start="537:9" pos:end="537:11">cmd</name><operator pos:start="537:12" pos:end="537:13">-&gt;</operator><name pos:start="537:14" pos:end="537:20">handler</name></name><argument_list pos:start="537:21" pos:end="537:47">(<argument pos:start="537:22" pos:end="537:28"><expr pos:start="537:22" pos:end="537:28"><name pos:start="537:22" pos:end="537:28"><name pos:start="537:22" pos:end="537:25">args</name><index pos:start="537:26" pos:end="537:28">[<expr pos:start="537:27" pos:end="537:27"><literal type="number" pos:start="537:27" pos:end="537:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="537:31" pos:end="537:37"><expr pos:start="537:31" pos:end="537:37"><name pos:start="537:31" pos:end="537:37"><name pos:start="537:31" pos:end="537:34">args</name><index pos:start="537:35" pos:end="537:37">[<expr pos:start="537:36" pos:end="537:36"><literal type="number" pos:start="537:36" pos:end="537:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="537:40" pos:end="537:46"><expr pos:start="537:40" pos:end="537:46"><name pos:start="537:40" pos:end="537:46"><name pos:start="537:40" pos:end="537:43">args</name><index pos:start="537:44" pos:end="537:46">[<expr pos:start="537:45" pos:end="537:45"><literal type="number" pos:start="537:45" pos:end="537:45">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="539:9" pos:end="539:14">break;</break>

    <case pos:start="541:5" pos:end="541:11">case <expr pos:start="541:10" pos:end="541:10"><literal type="number" pos:start="541:10" pos:end="541:10">4</literal></expr>:</case>

        <expr_stmt pos:start="543:9" pos:end="543:57"><expr pos:start="543:9" pos:end="543:56"><call pos:start="543:9" pos:end="543:56"><name pos:start="543:9" pos:end="543:20"><name pos:start="543:9" pos:end="543:11">cmd</name><operator pos:start="543:12" pos:end="543:13">-&gt;</operator><name pos:start="543:14" pos:end="543:20">handler</name></name><argument_list pos:start="543:21" pos:end="543:56">(<argument pos:start="543:22" pos:end="543:28"><expr pos:start="543:22" pos:end="543:28"><name pos:start="543:22" pos:end="543:28"><name pos:start="543:22" pos:end="543:25">args</name><index pos:start="543:26" pos:end="543:28">[<expr pos:start="543:27" pos:end="543:27"><literal type="number" pos:start="543:27" pos:end="543:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="543:31" pos:end="543:37"><expr pos:start="543:31" pos:end="543:37"><name pos:start="543:31" pos:end="543:37"><name pos:start="543:31" pos:end="543:34">args</name><index pos:start="543:35" pos:end="543:37">[<expr pos:start="543:36" pos:end="543:36"><literal type="number" pos:start="543:36" pos:end="543:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="543:40" pos:end="543:46"><expr pos:start="543:40" pos:end="543:46"><name pos:start="543:40" pos:end="543:46"><name pos:start="543:40" pos:end="543:43">args</name><index pos:start="543:44" pos:end="543:46">[<expr pos:start="543:45" pos:end="543:45"><literal type="number" pos:start="543:45" pos:end="543:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="543:49" pos:end="543:55"><expr pos:start="543:49" pos:end="543:55"><name pos:start="543:49" pos:end="543:55"><name pos:start="543:49" pos:end="543:52">args</name><index pos:start="543:53" pos:end="543:55">[<expr pos:start="543:54" pos:end="543:54"><literal type="number" pos:start="543:54" pos:end="543:54">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="545:9" pos:end="545:14">break;</break>

    <case pos:start="547:5" pos:end="547:11">case <expr pos:start="547:10" pos:end="547:10"><literal type="number" pos:start="547:10" pos:end="547:10">5</literal></expr>:</case>

        <expr_stmt pos:start="549:9" pos:end="549:66"><expr pos:start="549:9" pos:end="549:65"><call pos:start="549:9" pos:end="549:65"><name pos:start="549:9" pos:end="549:20"><name pos:start="549:9" pos:end="549:11">cmd</name><operator pos:start="549:12" pos:end="549:13">-&gt;</operator><name pos:start="549:14" pos:end="549:20">handler</name></name><argument_list pos:start="549:21" pos:end="549:65">(<argument pos:start="549:22" pos:end="549:28"><expr pos:start="549:22" pos:end="549:28"><name pos:start="549:22" pos:end="549:28"><name pos:start="549:22" pos:end="549:25">args</name><index pos:start="549:26" pos:end="549:28">[<expr pos:start="549:27" pos:end="549:27"><literal type="number" pos:start="549:27" pos:end="549:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="549:31" pos:end="549:37"><expr pos:start="549:31" pos:end="549:37"><name pos:start="549:31" pos:end="549:37"><name pos:start="549:31" pos:end="549:34">args</name><index pos:start="549:35" pos:end="549:37">[<expr pos:start="549:36" pos:end="549:36"><literal type="number" pos:start="549:36" pos:end="549:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="549:40" pos:end="549:46"><expr pos:start="549:40" pos:end="549:46"><name pos:start="549:40" pos:end="549:46"><name pos:start="549:40" pos:end="549:43">args</name><index pos:start="549:44" pos:end="549:46">[<expr pos:start="549:45" pos:end="549:45"><literal type="number" pos:start="549:45" pos:end="549:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="549:49" pos:end="549:55"><expr pos:start="549:49" pos:end="549:55"><name pos:start="549:49" pos:end="549:55"><name pos:start="549:49" pos:end="549:52">args</name><index pos:start="549:53" pos:end="549:55">[<expr pos:start="549:54" pos:end="549:54"><literal type="number" pos:start="549:54" pos:end="549:54">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="549:58" pos:end="549:64"><expr pos:start="549:58" pos:end="549:64"><name pos:start="549:58" pos:end="549:64"><name pos:start="549:58" pos:end="549:61">args</name><index pos:start="549:62" pos:end="549:64">[<expr pos:start="549:63" pos:end="549:63"><literal type="number" pos:start="549:63" pos:end="549:63">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="551:9" pos:end="551:14">break;</break>

    <case pos:start="553:5" pos:end="553:11">case <expr pos:start="553:10" pos:end="553:10"><literal type="number" pos:start="553:10" pos:end="553:10">6</literal></expr>:</case>

        <expr_stmt pos:start="555:9" pos:end="555:75"><expr pos:start="555:9" pos:end="555:74"><call pos:start="555:9" pos:end="555:74"><name pos:start="555:9" pos:end="555:20"><name pos:start="555:9" pos:end="555:11">cmd</name><operator pos:start="555:12" pos:end="555:13">-&gt;</operator><name pos:start="555:14" pos:end="555:20">handler</name></name><argument_list pos:start="555:21" pos:end="555:74">(<argument pos:start="555:22" pos:end="555:28"><expr pos:start="555:22" pos:end="555:28"><name pos:start="555:22" pos:end="555:28"><name pos:start="555:22" pos:end="555:25">args</name><index pos:start="555:26" pos:end="555:28">[<expr pos:start="555:27" pos:end="555:27"><literal type="number" pos:start="555:27" pos:end="555:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="555:31" pos:end="555:37"><expr pos:start="555:31" pos:end="555:37"><name pos:start="555:31" pos:end="555:37"><name pos:start="555:31" pos:end="555:34">args</name><index pos:start="555:35" pos:end="555:37">[<expr pos:start="555:36" pos:end="555:36"><literal type="number" pos:start="555:36" pos:end="555:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="555:40" pos:end="555:46"><expr pos:start="555:40" pos:end="555:46"><name pos:start="555:40" pos:end="555:46"><name pos:start="555:40" pos:end="555:43">args</name><index pos:start="555:44" pos:end="555:46">[<expr pos:start="555:45" pos:end="555:45"><literal type="number" pos:start="555:45" pos:end="555:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="555:49" pos:end="555:55"><expr pos:start="555:49" pos:end="555:55"><name pos:start="555:49" pos:end="555:55"><name pos:start="555:49" pos:end="555:52">args</name><index pos:start="555:53" pos:end="555:55">[<expr pos:start="555:54" pos:end="555:54"><literal type="number" pos:start="555:54" pos:end="555:54">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="555:58" pos:end="555:64"><expr pos:start="555:58" pos:end="555:64"><name pos:start="555:58" pos:end="555:64"><name pos:start="555:58" pos:end="555:61">args</name><index pos:start="555:62" pos:end="555:64">[<expr pos:start="555:63" pos:end="555:63"><literal type="number" pos:start="555:63" pos:end="555:63">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="555:67" pos:end="555:73"><expr pos:start="555:67" pos:end="555:73"><name pos:start="555:67" pos:end="555:73"><name pos:start="555:67" pos:end="555:70">args</name><index pos:start="555:71" pos:end="555:73">[<expr pos:start="555:72" pos:end="555:72"><literal type="number" pos:start="555:72" pos:end="555:72">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="557:9" pos:end="557:14">break;</break>

    <default pos:start="559:5" pos:end="559:12">default:</default>

        <expr_stmt pos:start="561:9" pos:end="561:70"><expr pos:start="561:9" pos:end="561:69"><call pos:start="561:9" pos:end="561:69"><name pos:start="561:9" pos:end="561:19">term_printf</name><argument_list pos:start="561:20" pos:end="561:69">(<argument pos:start="561:21" pos:end="561:59"><expr pos:start="561:21" pos:end="561:59"><literal type="string" pos:start="561:21" pos:end="561:59">"unsupported number of arguments: %d\n"</literal></expr></argument>, <argument pos:start="561:62" pos:end="561:68"><expr pos:start="561:62" pos:end="561:68"><name pos:start="561:62" pos:end="561:68">nb_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="563:9" pos:end="563:18">goto <name pos:start="563:14" pos:end="563:17">fail</name>;</goto>

    </block_content>}</block></switch>

 <label pos:start="567:2" pos:end="567:6"><name pos:start="567:2" pos:end="567:5">fail</name>:</label>

    <for pos:start="569:5" pos:end="571:36">for<control pos:start="569:8" pos:end="569:33">(<init pos:start="569:9" pos:end="569:14"><expr pos:start="569:9" pos:end="569:13"><name pos:start="569:9" pos:end="569:9">i</name> <operator pos:start="569:11" pos:end="569:11">=</operator> <literal type="number" pos:start="569:13" pos:end="569:13">0</literal></expr>;</init> <condition pos:start="569:16" pos:end="569:28"><expr pos:start="569:16" pos:end="569:27"><name pos:start="569:16" pos:end="569:16">i</name> <operator pos:start="569:18" pos:end="569:18">&lt;</operator> <name pos:start="569:20" pos:end="569:27">MAX_ARGS</name></expr>;</condition> <incr pos:start="569:30" pos:end="569:32"><expr pos:start="569:30" pos:end="569:32"><name pos:start="569:30" pos:end="569:30">i</name><operator pos:start="569:31" pos:end="569:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="571:9" pos:end="571:36"><block_content pos:start="571:9" pos:end="571:36">

        <expr_stmt pos:start="571:9" pos:end="571:36"><expr pos:start="571:9" pos:end="571:35"><call pos:start="571:9" pos:end="571:35"><name pos:start="571:9" pos:end="571:17">qemu_free</name><argument_list pos:start="571:18" pos:end="571:35">(<argument pos:start="571:19" pos:end="571:34"><expr pos:start="571:19" pos:end="571:34"><name pos:start="571:19" pos:end="571:34"><name pos:start="571:19" pos:end="571:31">str_allocated</name><index pos:start="571:32" pos:end="571:34">[<expr pos:start="571:33" pos:end="571:33"><name pos:start="571:33" pos:end="571:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return pos:start="573:5" pos:end="573:11">return;</return>

</block_content>}</block></function>
</unit>
