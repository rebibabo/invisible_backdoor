<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18027.c" pos:tabs="8"><function pos:start="1:1" pos:end="443:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">OutputStream</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:38">new_output_stream</name><parameter_list pos:start="1:39" pos:end="1:119">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:53">OptionsContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">o</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:77"><decl pos:start="1:59" pos:end="1:77"><type pos:start="1:59" pos:end="1:77"><name pos:start="1:59" pos:end="1:73">AVFormatContext</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:77">oc</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:100"><decl pos:start="1:80" pos:end="1:100"><type pos:start="1:80" pos:end="1:100"><name pos:start="1:80" pos:end="1:95"><name pos:start="1:80" pos:end="1:83">enum</name> <name pos:start="1:85" pos:end="1:95">AVMediaType</name></name></type> <name pos:start="1:97" pos:end="1:100">type</name></decl></parameter>, <parameter pos:start="1:103" pos:end="1:118"><decl pos:start="1:103" pos:end="1:118"><type pos:start="1:103" pos:end="1:118"><name pos:start="1:103" pos:end="1:105">int</name></type> <name pos:start="1:107" pos:end="1:118">source_index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="443:1">{<block_content pos:start="5:5" pos:end="441:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">OutputStream</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name> <init pos:start="7:18" pos:end="7:48">= <expr pos:start="7:20" pos:end="7:48"><call pos:start="7:20" pos:end="7:48"><name pos:start="7:20" pos:end="7:38">avformat_new_stream</name><argument_list pos:start="7:39" pos:end="7:48">(<argument pos:start="7:40" pos:end="7:41"><expr pos:start="7:40" pos:end="7:41"><name pos:start="7:40" pos:end="7:41">oc</name></expr></argument>, <argument pos:start="7:44" pos:end="7:47"><expr pos:start="7:44" pos:end="7:47"><name pos:start="7:44" pos:end="7:47">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">idx</name>      <init pos:start="9:18" pos:end="9:37">= <expr pos:start="9:20" pos:end="9:37"><name pos:start="9:20" pos:end="9:33"><name pos:start="9:20" pos:end="9:21">oc</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:33">nb_streams</name></name> <operator pos:start="9:35" pos:end="9:35">-</operator> <literal type="number" pos:start="9:37" pos:end="9:37">1</literal></expr></init></decl>, <decl pos:start="9:40" pos:end="9:46"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:42">ret</name> <init pos:start="9:44" pos:end="9:46">= <expr pos:start="9:46" pos:end="9:46"><literal type="number" pos:start="9:46" pos:end="9:46">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">bsfs</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>, <decl pos:start="11:30" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:39">time_base</name> <init pos:start="11:41" pos:end="11:46">= <expr pos:start="11:43" pos:end="11:46"><name pos:start="11:43" pos:end="11:46">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:14">next</name></decl>, <decl pos:start="13:17" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:26">codec_tag</name> <init pos:start="13:28" pos:end="13:33">= <expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">double</name></type> <name pos:start="15:12" pos:end="15:17">qscale</name> <init pos:start="15:19" pos:end="15:22">= <expr pos:start="15:21" pos:end="15:22"><operator pos:start="15:21" pos:end="15:21">-</operator><literal type="number" pos:start="15:22" pos:end="15:22">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:11">st</name></expr>)</condition> <block pos:start="21:14" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:24">

        <expr_stmt pos:start="23:9" pos:end="23:64"><expr pos:start="23:9" pos:end="23:63"><call pos:start="23:9" pos:end="23:63"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:63">(<argument pos:start="23:16" pos:end="23:19"><expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr></argument>, <argument pos:start="23:22" pos:end="23:33"><expr pos:start="23:22" pos:end="23:33"><name pos:start="23:22" pos:end="23:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="23:36" pos:end="23:62"><expr pos:start="23:36" pos:end="23:62"><literal type="string" pos:start="23:36" pos:end="23:62">"Could not alloc stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:24"><expr pos:start="25:9" pos:end="25:23"><call pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:20">exit_program</name><argument_list pos:start="25:21" pos:end="25:23">(<argument pos:start="25:22" pos:end="25:22"><expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="33:53"><if pos:start="31:5" pos:end="33:53">if <condition pos:start="31:8" pos:end="31:48">(<expr pos:start="31:9" pos:end="31:47"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:10">oc</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:22">nb_streams</name></name> <operator pos:start="31:24" pos:end="31:24">-</operator> <literal type="number" pos:start="31:26" pos:end="31:26">1</literal> <operator pos:start="31:28" pos:end="31:28">&lt;</operator> <name pos:start="31:30" pos:end="31:47"><name pos:start="31:30" pos:end="31:30">o</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:47">nb_streamid_map</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:53"><block_content pos:start="33:9" pos:end="33:53">

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:10">st</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:14">id</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:52"><name pos:start="33:18" pos:end="33:18">o</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:32">streamid_map</name><index pos:start="33:33" pos:end="33:52">[<expr pos:start="33:34" pos:end="33:51"><name pos:start="33:34" pos:end="33:47"><name pos:start="33:34" pos:end="33:35">oc</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:47">nb_streams</name></name> <operator pos:start="33:49" pos:end="33:49">-</operator> <literal type="number" pos:start="33:51" pos:end="33:51">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><call pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:14">GROW_ARRAY</name><argument_list pos:start="37:15" pos:end="37:49">(<argument pos:start="37:16" pos:end="37:29"><expr pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:29">output_streams</name></expr></argument>, <argument pos:start="37:32" pos:end="37:48"><expr pos:start="37:32" pos:end="37:48"><name pos:start="37:32" pos:end="37:48">nb_output_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:24"><if pos:start="39:5" pos:end="41:24">if <condition pos:start="39:8" pos:end="39:42">(<expr pos:start="39:9" pos:end="39:41"><operator pos:start="39:9" pos:end="39:9">!</operator><operator pos:start="39:10" pos:end="39:10">(</operator><name pos:start="39:11" pos:end="39:13">ost</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:40"><name pos:start="39:17" pos:end="39:26">av_mallocz</name><argument_list pos:start="39:27" pos:end="39:40">(<argument pos:start="39:28" pos:end="39:39"><expr pos:start="39:28" pos:end="39:39"><sizeof pos:start="39:28" pos:end="39:39">sizeof<argument_list pos:start="39:34" pos:end="39:39">(<argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><operator pos:start="39:35" pos:end="39:35">*</operator><name pos:start="39:36" pos:end="39:38">ost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="39:41" pos:end="39:41">)</operator></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:24"><block_content pos:start="41:9" pos:end="41:24">

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><call pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:20">exit_program</name><argument_list pos:start="41:21" pos:end="41:23">(<argument pos:start="41:22" pos:end="41:22"><expr pos:start="41:22" pos:end="41:22"><literal type="number" pos:start="41:22" pos:end="41:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:41"><name pos:start="43:5" pos:end="43:18">output_streams</name><index pos:start="43:19" pos:end="43:41">[<expr pos:start="43:20" pos:end="43:40"><name pos:start="43:20" pos:end="43:36">nb_output_streams</name> <operator pos:start="43:38" pos:end="43:38">-</operator> <literal type="number" pos:start="43:40" pos:end="43:40">1</literal></expr>]</index></name> <operator pos:start="43:43" pos:end="43:43">=</operator> <name pos:start="43:45" pos:end="43:47">ost</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:7">ost</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:19">file_index</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:37">nb_output_files</name> <operator pos:start="47:39" pos:end="47:39">-</operator> <literal type="number" pos:start="47:41" pos:end="47:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:7">ost</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:14">index</name></name>      <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:25">idx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:7">ost</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:11">st</name></name>         <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:24">st</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:6">st</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:16">codecpar</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:28">codec_type</name></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <name pos:start="53:32" pos:end="53:35">type</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:36"><name pos:start="57:11" pos:end="57:24">choose_encoder</name><argument_list pos:start="57:25" pos:end="57:36">(<argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><name pos:start="57:26" pos:end="57:26">o</name></expr></argument>, <argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><name pos:start="57:29" pos:end="57:30">oc</name></expr></argument>, <argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:35">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:24">

        <expr_stmt pos:start="61:9" pos:end="63:55"><expr pos:start="61:9" pos:end="63:54"><call pos:start="61:9" pos:end="63:54"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:54">(<argument pos:start="61:16" pos:end="61:19"><expr pos:start="61:16" pos:end="61:19"><name pos:start="61:16" pos:end="61:19">NULL</name></expr></argument>, <argument pos:start="61:22" pos:end="61:33"><expr pos:start="61:22" pos:end="61:33"><name pos:start="61:22" pos:end="61:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="61:36" pos:end="63:24"><expr pos:start="61:36" pos:end="63:24"><literal type="string" pos:start="61:36" pos:end="61:75">"Error selecting an encoder for stream "</literal>

               <literal type="string" pos:start="63:16" pos:end="63:24">"%d:%d\n"</literal></expr></argument>, <argument pos:start="63:27" pos:end="63:41"><expr pos:start="63:27" pos:end="63:41"><name pos:start="63:27" pos:end="63:41"><name pos:start="63:27" pos:end="63:29">ost</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:41">file_index</name></name></expr></argument>, <argument pos:start="63:44" pos:end="63:53"><expr pos:start="63:44" pos:end="63:53"><name pos:start="63:44" pos:end="63:53"><name pos:start="63:44" pos:end="63:46">ost</name><operator pos:start="63:47" pos:end="63:48">-&gt;</operator><name pos:start="63:49" pos:end="63:53">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><call pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:20">exit_program</name><argument_list pos:start="65:21" pos:end="65:23">(<argument pos:start="65:22" pos:end="65:22"><expr pos:start="65:22" pos:end="65:22"><literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:52"><expr pos:start="71:5" pos:end="71:51"><name pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:7">ost</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:16">enc_ctx</name></name> <operator pos:start="71:18" pos:end="71:18">=</operator> <call pos:start="71:20" pos:end="71:51"><name pos:start="71:20" pos:end="71:41">avcodec_alloc_context3</name><argument_list pos:start="71:42" pos:end="71:51">(<argument pos:start="71:43" pos:end="71:50"><expr pos:start="71:43" pos:end="71:50"><name pos:start="71:43" pos:end="71:50"><name pos:start="71:43" pos:end="71:45">ost</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:50">enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:21"><name pos:start="73:10" pos:end="73:12">ost</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:21">enc_ctx</name></name></expr>)</condition> <block pos:start="73:24" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:24">

        <expr_stmt pos:start="75:9" pos:end="75:79"><expr pos:start="75:9" pos:end="75:78"><call pos:start="75:9" pos:end="75:78"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:78">(<argument pos:start="75:16" pos:end="75:19"><expr pos:start="75:16" pos:end="75:19"><name pos:start="75:16" pos:end="75:19">NULL</name></expr></argument>, <argument pos:start="75:22" pos:end="75:33"><expr pos:start="75:22" pos:end="75:33"><name pos:start="75:22" pos:end="75:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:36" pos:end="75:77"><expr pos:start="75:36" pos:end="75:77"><literal type="string" pos:start="75:36" pos:end="75:77">"Error allocating the encoding context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><call pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:20">exit_program</name><argument_list pos:start="77:21" pos:end="77:23">(<argument pos:start="77:22" pos:end="77:22"><expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:36"><expr pos:start="81:5" pos:end="81:35"><name pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:7">ost</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:16">enc_ctx</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:28">codec_type</name></name> <operator pos:start="81:30" pos:end="81:30">=</operator> <name pos:start="81:32" pos:end="81:35">type</name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:46"><expr pos:start="85:5" pos:end="85:45"><name pos:start="85:5" pos:end="85:16"><name pos:start="85:5" pos:end="85:7">ost</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:16">ref_par</name></name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="85:45"><name pos:start="85:20" pos:end="85:43">avcodec_parameters_alloc</name><argument_list pos:start="85:44" pos:end="85:45">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:22">(<expr pos:start="87:9" pos:end="87:21"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:21"><name pos:start="87:10" pos:end="87:12">ost</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:21">ref_par</name></name></expr>)</condition> <block pos:start="87:24" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:24">

        <expr_stmt pos:start="89:9" pos:end="89:82"><expr pos:start="89:9" pos:end="89:81"><call pos:start="89:9" pos:end="89:81"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:81">(<argument pos:start="89:16" pos:end="89:19"><expr pos:start="89:16" pos:end="89:19"><name pos:start="89:16" pos:end="89:19">NULL</name></expr></argument>, <argument pos:start="89:22" pos:end="89:33"><expr pos:start="89:22" pos:end="89:33"><name pos:start="89:22" pos:end="89:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:36" pos:end="89:80"><expr pos:start="89:36" pos:end="89:80"><literal type="string" pos:start="89:36" pos:end="89:80">"Error allocating the encoding parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:24"><expr pos:start="91:9" pos:end="91:23"><call pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:20">exit_program</name><argument_list pos:start="91:21" pos:end="91:23">(<argument pos:start="91:22" pos:end="91:22"><expr pos:start="91:22" pos:end="91:22"><literal type="number" pos:start="91:22" pos:end="91:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="161:5"><if pos:start="97:5" pos:end="157:5">if <condition pos:start="97:8" pos:end="97:17">(<expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">ost</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:16">enc</name></name></expr>)</condition> <block pos:start="97:19" pos:end="157:5">{<block_content pos:start="99:9" pos:end="155:9">

        <decl_stmt pos:start="99:9" pos:end="99:30"><decl pos:start="99:9" pos:end="99:29"><type pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:19">AVIOContext</name> <modifier pos:start="99:21" pos:end="99:21">*</modifier></type><name pos:start="99:22" pos:end="99:22">s</name> <init pos:start="99:24" pos:end="99:29">= <expr pos:start="99:26" pos:end="99:29"><name pos:start="99:26" pos:end="99:29">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:54"><decl pos:start="101:9" pos:end="101:24"><type pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:12">char</name> <modifier pos:start="101:14" pos:end="101:14">*</modifier></type><name pos:start="101:15" pos:end="101:17">buf</name> <init pos:start="101:19" pos:end="101:24">= <expr pos:start="101:21" pos:end="101:24"><name pos:start="101:21" pos:end="101:24">NULL</name></expr></init></decl>, <decl pos:start="101:27" pos:end="101:37"><type ref="prev" pos:start="101:9" pos:end="101:14"><modifier pos:start="101:27" pos:end="101:27">*</modifier></type><name pos:start="101:28" pos:end="101:30">arg</name> <init pos:start="101:32" pos:end="101:37">= <expr pos:start="101:34" pos:end="101:37"><name pos:start="101:34" pos:end="101:37">NULL</name></expr></init></decl>, <decl pos:start="101:40" pos:end="101:53"><type ref="prev" pos:start="101:9" pos:end="101:14"><modifier pos:start="101:40" pos:end="101:40">*</modifier></type><name pos:start="101:41" pos:end="101:46">preset</name> <init pos:start="101:48" pos:end="101:53">= <expr pos:start="101:50" pos:end="101:53"><name pos:start="101:50" pos:end="101:53">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:97"><expr pos:start="105:9" pos:end="105:96"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:11">ost</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:25">encoder_opts</name></name>  <operator pos:start="105:28" pos:end="105:28">=</operator> <call pos:start="105:30" pos:end="105:96"><name pos:start="105:30" pos:end="105:46">filter_codec_opts</name><argument_list pos:start="105:47" pos:end="105:96">(<argument pos:start="105:48" pos:end="105:63"><expr pos:start="105:48" pos:end="105:63"><name pos:start="105:48" pos:end="105:63"><name pos:start="105:48" pos:end="105:48">o</name><operator pos:start="105:49" pos:end="105:50">-&gt;</operator><name pos:start="105:51" pos:end="105:51">g</name><operator pos:start="105:52" pos:end="105:53">-&gt;</operator><name pos:start="105:54" pos:end="105:63">codec_opts</name></name></expr></argument>, <argument pos:start="105:66" pos:end="105:77"><expr pos:start="105:66" pos:end="105:77"><name pos:start="105:66" pos:end="105:77"><name pos:start="105:66" pos:end="105:68">ost</name><operator pos:start="105:69" pos:end="105:70">-&gt;</operator><name pos:start="105:71" pos:end="105:73">enc</name><operator pos:start="105:74" pos:end="105:75">-&gt;</operator><name pos:start="105:76" pos:end="105:77">id</name></name></expr></argument>, <argument pos:start="105:80" pos:end="105:81"><expr pos:start="105:80" pos:end="105:81"><name pos:start="105:80" pos:end="105:81">oc</name></expr></argument>, <argument pos:start="105:84" pos:end="105:85"><expr pos:start="105:84" pos:end="105:85"><name pos:start="105:84" pos:end="105:85">st</name></expr></argument>, <argument pos:start="105:88" pos:end="105:95"><expr pos:start="105:88" pos:end="105:95"><name pos:start="105:88" pos:end="105:95"><name pos:start="105:88" pos:end="105:90">ost</name><operator pos:start="105:91" pos:end="105:92">-&gt;</operator><name pos:start="105:93" pos:end="105:95">enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:59"><expr pos:start="109:9" pos:end="109:58"><call pos:start="109:9" pos:end="109:58"><name pos:start="109:9" pos:end="109:28">MATCH_PER_STREAM_OPT</name><argument_list pos:start="109:29" pos:end="109:58">(<argument pos:start="109:30" pos:end="109:36"><expr pos:start="109:30" pos:end="109:36"><name pos:start="109:30" pos:end="109:36">presets</name></expr></argument>, <argument pos:start="109:39" pos:end="109:41"><expr pos:start="109:39" pos:end="109:41"><name pos:start="109:39" pos:end="109:41">str</name></expr></argument>, <argument pos:start="109:44" pos:end="109:49"><expr pos:start="109:44" pos:end="109:49"><name pos:start="109:44" pos:end="109:49">preset</name></expr></argument>, <argument pos:start="109:52" pos:end="109:53"><expr pos:start="109:52" pos:end="109:53"><name pos:start="109:52" pos:end="109:53">oc</name></expr></argument>, <argument pos:start="109:56" pos:end="109:57"><expr pos:start="109:56" pos:end="109:57"><name pos:start="109:56" pos:end="109:57">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="143:9"><if pos:start="111:9" pos:end="143:9">if <condition pos:start="111:12" pos:end="111:79">(<expr pos:start="111:13" pos:end="111:78"><name pos:start="111:13" pos:end="111:18">preset</name> <operator pos:start="111:20" pos:end="111:21">&amp;&amp;</operator> <operator pos:start="111:23" pos:end="111:23">(</operator><operator pos:start="111:24" pos:end="111:24">!</operator><operator pos:start="111:25" pos:end="111:25">(</operator><name pos:start="111:26" pos:end="111:28">ret</name> <operator pos:start="111:30" pos:end="111:30">=</operator> <call pos:start="111:32" pos:end="111:76"><name pos:start="111:32" pos:end="111:48">get_preset_file_2</name><argument_list pos:start="111:49" pos:end="111:76">(<argument pos:start="111:50" pos:end="111:55"><expr pos:start="111:50" pos:end="111:55"><name pos:start="111:50" pos:end="111:55">preset</name></expr></argument>, <argument pos:start="111:58" pos:end="111:71"><expr pos:start="111:58" pos:end="111:71"><name pos:start="111:58" pos:end="111:71"><name pos:start="111:58" pos:end="111:60">ost</name><operator pos:start="111:61" pos:end="111:62">-&gt;</operator><name pos:start="111:63" pos:end="111:65">enc</name><operator pos:start="111:66" pos:end="111:67">-&gt;</operator><name pos:start="111:68" pos:end="111:71">name</name></name></expr></argument>, <argument pos:start="111:74" pos:end="111:75"><expr pos:start="111:74" pos:end="111:75"><operator pos:start="111:74" pos:end="111:74">&amp;</operator><name pos:start="111:75" pos:end="111:75">s</name></expr></argument>)</argument_list></call><operator pos:start="111:77" pos:end="111:77">)</operator><operator pos:start="111:78" pos:end="111:78">)</operator></expr>)</condition> <block pos:start="111:81" pos:end="143:9">{<block_content pos:start="113:13" pos:end="141:28">

            <do pos:start="113:13" pos:end="139:38">do  <block pos:start="113:17" pos:end="139:13">{<block_content pos:start="115:17" pos:end="137:29">

                <expr_stmt pos:start="115:17" pos:end="115:34"><expr pos:start="115:17" pos:end="115:33"><name pos:start="115:17" pos:end="115:19">buf</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <call pos:start="115:23" pos:end="115:33"><name pos:start="115:23" pos:end="115:30">get_line</name><argument_list pos:start="115:31" pos:end="115:33">(<argument pos:start="115:32" pos:end="115:32"><expr pos:start="115:32" pos:end="115:32"><name pos:start="115:32" pos:end="115:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="117:17" pos:end="123:17"><if pos:start="117:17" pos:end="123:17">if <condition pos:start="117:20" pos:end="117:45">(<expr pos:start="117:21" pos:end="117:44"><operator pos:start="117:21" pos:end="117:21">!</operator><name pos:start="117:22" pos:end="117:27"><name pos:start="117:22" pos:end="117:24">buf</name><index pos:start="117:25" pos:end="117:27">[<expr pos:start="117:26" pos:end="117:26"><literal type="number" pos:start="117:26" pos:end="117:26">0</literal></expr>]</index></name> <operator pos:start="117:29" pos:end="117:30">||</operator> <name pos:start="117:32" pos:end="117:37"><name pos:start="117:32" pos:end="117:34">buf</name><index pos:start="117:35" pos:end="117:37">[<expr pos:start="117:36" pos:end="117:36"><literal type="number" pos:start="117:36" pos:end="117:36">0</literal></expr>]</index></name> <operator pos:start="117:39" pos:end="117:40">==</operator> <literal type="char" pos:start="117:42" pos:end="117:44">'#'</literal></expr>)</condition> <block pos:start="117:47" pos:end="123:17">{<block_content pos:start="119:21" pos:end="121:29">

                    <expr_stmt pos:start="119:21" pos:end="119:33"><expr pos:start="119:21" pos:end="119:32"><call pos:start="119:21" pos:end="119:32"><name pos:start="119:21" pos:end="119:27">av_free</name><argument_list pos:start="119:28" pos:end="119:32">(<argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><name pos:start="119:29" pos:end="119:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="121:21" pos:end="121:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="125:17" pos:end="131:17"><if pos:start="125:17" pos:end="131:17">if <condition pos:start="125:20" pos:end="125:46">(<expr pos:start="125:21" pos:end="125:45"><operator pos:start="125:21" pos:end="125:21">!</operator><operator pos:start="125:22" pos:end="125:22">(</operator><name pos:start="125:23" pos:end="125:25">arg</name> <operator pos:start="125:27" pos:end="125:27">=</operator> <call pos:start="125:29" pos:end="125:44"><name pos:start="125:29" pos:end="125:34">strchr</name><argument_list pos:start="125:35" pos:end="125:44">(<argument pos:start="125:36" pos:end="125:38"><expr pos:start="125:36" pos:end="125:38"><name pos:start="125:36" pos:end="125:38">buf</name></expr></argument>, <argument pos:start="125:41" pos:end="125:43"><expr pos:start="125:41" pos:end="125:43"><literal type="char" pos:start="125:41" pos:end="125:43">'='</literal></expr></argument>)</argument_list></call><operator pos:start="125:45" pos:end="125:45">)</operator></expr>)</condition> <block pos:start="125:48" pos:end="131:17">{<block_content pos:start="127:21" pos:end="129:36">

                    <expr_stmt pos:start="127:21" pos:end="127:91"><expr pos:start="127:21" pos:end="127:90"><call pos:start="127:21" pos:end="127:90"><name pos:start="127:21" pos:end="127:26">av_log</name><argument_list pos:start="127:27" pos:end="127:90">(<argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">NULL</name></expr></argument>, <argument pos:start="127:34" pos:end="127:45"><expr pos:start="127:34" pos:end="127:45"><name pos:start="127:34" pos:end="127:45">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="127:48" pos:end="127:89"><expr pos:start="127:48" pos:end="127:89"><literal type="string" pos:start="127:48" pos:end="127:89">"Invalid line found in the preset file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:36"><expr pos:start="129:21" pos:end="129:35"><call pos:start="129:21" pos:end="129:35"><name pos:start="129:21" pos:end="129:32">exit_program</name><argument_list pos:start="129:33" pos:end="129:35">(<argument pos:start="129:34" pos:end="129:34"><expr pos:start="129:34" pos:end="129:34"><literal type="number" pos:start="129:34" pos:end="129:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:27"><expr pos:start="133:17" pos:end="133:26"><operator pos:start="133:17" pos:end="133:17">*</operator><name pos:start="133:18" pos:end="133:20">arg</name><operator pos:start="133:21" pos:end="133:22">++</operator> <operator pos:start="133:24" pos:end="133:24">=</operator> <literal type="number" pos:start="133:26" pos:end="133:26">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:82"><expr pos:start="135:17" pos:end="135:81"><call pos:start="135:17" pos:end="135:81"><name pos:start="135:17" pos:end="135:27">av_dict_set</name><argument_list pos:start="135:28" pos:end="135:81">(<argument pos:start="135:29" pos:end="135:46"><expr pos:start="135:29" pos:end="135:46"><operator pos:start="135:29" pos:end="135:29">&amp;</operator><name pos:start="135:30" pos:end="135:46"><name pos:start="135:30" pos:end="135:32">ost</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:46">encoder_opts</name></name></expr></argument>, <argument pos:start="135:49" pos:end="135:51"><expr pos:start="135:49" pos:end="135:51"><name pos:start="135:49" pos:end="135:51">buf</name></expr></argument>, <argument pos:start="135:54" pos:end="135:56"><expr pos:start="135:54" pos:end="135:56"><name pos:start="135:54" pos:end="135:56">arg</name></expr></argument>, <argument pos:start="135:59" pos:end="135:80"><expr pos:start="135:59" pos:end="135:80"><name pos:start="135:59" pos:end="135:80">AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:29"><expr pos:start="137:17" pos:end="137:28"><call pos:start="137:17" pos:end="137:28"><name pos:start="137:17" pos:end="137:23">av_free</name><argument_list pos:start="137:24" pos:end="137:28">(<argument pos:start="137:25" pos:end="137:27"><expr pos:start="137:25" pos:end="137:27"><name pos:start="137:25" pos:end="137:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block> while <condition pos:start="139:21" pos:end="139:37">(<expr pos:start="139:22" pos:end="139:36"><operator pos:start="139:22" pos:end="139:22">!</operator><name pos:start="139:23" pos:end="139:36"><name pos:start="139:23" pos:end="139:23">s</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:36">eof_reached</name></name></expr>)</condition>;</do>

            <expr_stmt pos:start="141:13" pos:end="141:28"><expr pos:start="141:13" pos:end="141:27"><call pos:start="141:13" pos:end="141:27"><name pos:start="141:13" pos:end="141:23">avio_closep</name><argument_list pos:start="141:24" pos:end="141:27">(<argument pos:start="141:25" pos:end="141:26"><expr pos:start="141:25" pos:end="141:26"><operator pos:start="141:25" pos:end="141:25">&amp;</operator><name pos:start="141:26" pos:end="141:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="145:9" pos:end="155:9"><if pos:start="145:9" pos:end="155:9">if <condition pos:start="145:12" pos:end="145:16">(<expr pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">ret</name></expr>)</condition> <block pos:start="145:18" pos:end="155:9">{<block_content pos:start="147:13" pos:end="153:28">

            <expr_stmt pos:start="147:13" pos:end="151:56"><expr pos:start="147:13" pos:end="151:55"><call pos:start="147:13" pos:end="151:55"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="151:55">(<argument pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:23"><name pos:start="147:20" pos:end="147:23">NULL</name></expr></argument>, <argument pos:start="147:26" pos:end="147:37"><expr pos:start="147:26" pos:end="147:37"><name pos:start="147:26" pos:end="147:37">AV_LOG_FATAL</name></expr></argument>,

                   <argument pos:start="149:20" pos:end="149:85"><expr pos:start="149:20" pos:end="149:85"><literal type="string" pos:start="149:20" pos:end="149:85">"Preset %s specified for stream %d:%d, but could not be opened.\n"</literal></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:25"><expr pos:start="151:20" pos:end="151:25"><name pos:start="151:20" pos:end="151:25">preset</name></expr></argument>, <argument pos:start="151:28" pos:end="151:42"><expr pos:start="151:28" pos:end="151:42"><name pos:start="151:28" pos:end="151:42"><name pos:start="151:28" pos:end="151:30">ost</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:42">file_index</name></name></expr></argument>, <argument pos:start="151:45" pos:end="151:54"><expr pos:start="151:45" pos:end="151:54"><name pos:start="151:45" pos:end="151:54"><name pos:start="151:45" pos:end="151:47">ost</name><operator pos:start="151:48" pos:end="151:49">-&gt;</operator><name pos:start="151:50" pos:end="151:54">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:28"><expr pos:start="153:13" pos:end="153:27"><call pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:24">exit_program</name><argument_list pos:start="153:25" pos:end="153:27">(<argument pos:start="153:26" pos:end="153:26"><expr pos:start="153:26" pos:end="153:26"><literal type="number" pos:start="153:26" pos:end="153:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="161:5">else <block pos:start="157:12" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:96">

        <expr_stmt pos:start="159:9" pos:end="159:96"><expr pos:start="159:9" pos:end="159:95"><name pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:11">ost</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:25">encoder_opts</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <call pos:start="159:29" pos:end="159:95"><name pos:start="159:29" pos:end="159:45">filter_codec_opts</name><argument_list pos:start="159:46" pos:end="159:95">(<argument pos:start="159:47" pos:end="159:62"><expr pos:start="159:47" pos:end="159:62"><name pos:start="159:47" pos:end="159:62"><name pos:start="159:47" pos:end="159:47">o</name><operator pos:start="159:48" pos:end="159:49">-&gt;</operator><name pos:start="159:50" pos:end="159:50">g</name><operator pos:start="159:51" pos:end="159:52">-&gt;</operator><name pos:start="159:53" pos:end="159:62">codec_opts</name></name></expr></argument>, <argument pos:start="159:65" pos:end="159:80"><expr pos:start="159:65" pos:end="159:80"><name pos:start="159:65" pos:end="159:80">AV_CODEC_ID_NONE</name></expr></argument>, <argument pos:start="159:83" pos:end="159:84"><expr pos:start="159:83" pos:end="159:84"><name pos:start="159:83" pos:end="159:84">oc</name></expr></argument>, <argument pos:start="159:87" pos:end="159:88"><expr pos:start="159:87" pos:end="159:88"><name pos:start="159:87" pos:end="159:88">st</name></expr></argument>, <argument pos:start="159:91" pos:end="159:94"><expr pos:start="159:91" pos:end="159:94"><name pos:start="159:91" pos:end="159:94">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:61"><expr pos:start="165:5" pos:end="165:60"><call pos:start="165:5" pos:end="165:60"><name pos:start="165:5" pos:end="165:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="165:25" pos:end="165:60">(<argument pos:start="165:26" pos:end="165:35"><expr pos:start="165:26" pos:end="165:35"><name pos:start="165:26" pos:end="165:35">time_bases</name></expr></argument>, <argument pos:start="165:38" pos:end="165:40"><expr pos:start="165:38" pos:end="165:40"><name pos:start="165:38" pos:end="165:40">str</name></expr></argument>, <argument pos:start="165:43" pos:end="165:51"><expr pos:start="165:43" pos:end="165:51"><name pos:start="165:43" pos:end="165:51">time_base</name></expr></argument>, <argument pos:start="165:54" pos:end="165:55"><expr pos:start="165:54" pos:end="165:55"><name pos:start="165:54" pos:end="165:55">oc</name></expr></argument>, <argument pos:start="165:58" pos:end="165:59"><expr pos:start="165:58" pos:end="165:59"><name pos:start="165:58" pos:end="165:59">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="183:5"><if pos:start="167:5" pos:end="183:5">if <condition pos:start="167:8" pos:end="167:18">(<expr pos:start="167:9" pos:end="167:17"><name pos:start="167:9" pos:end="167:17">time_base</name></expr>)</condition> <block pos:start="167:20" pos:end="183:5">{<block_content pos:start="169:9" pos:end="181:26">

        <decl_stmt pos:start="169:9" pos:end="169:21"><decl pos:start="169:9" pos:end="169:20"><type pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:18">AVRational</name></type> <name pos:start="169:20" pos:end="169:20">q</name></decl>;</decl_stmt>

        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="173:37">(<expr pos:start="171:13" pos:end="173:36"><call pos:start="171:13" pos:end="171:59"><name pos:start="171:13" pos:end="171:26">av_parse_ratio</name><argument_list pos:start="171:27" pos:end="171:59">(<argument pos:start="171:28" pos:end="171:29"><expr pos:start="171:28" pos:end="171:29"><operator pos:start="171:28" pos:end="171:28">&amp;</operator><name pos:start="171:29" pos:end="171:29">q</name></expr></argument>, <argument pos:start="171:32" pos:end="171:40"><expr pos:start="171:32" pos:end="171:40"><name pos:start="171:32" pos:end="171:40">time_base</name></expr></argument>, <argument pos:start="171:43" pos:end="171:49"><expr pos:start="171:43" pos:end="171:49"><name pos:start="171:43" pos:end="171:49">INT_MAX</name></expr></argument>, <argument pos:start="171:52" pos:end="171:52"><expr pos:start="171:52" pos:end="171:52"><literal type="number" pos:start="171:52" pos:end="171:52">0</literal></expr></argument>, <argument pos:start="171:55" pos:end="171:58"><expr pos:start="171:55" pos:end="171:58"><name pos:start="171:55" pos:end="171:58">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="171:61" pos:end="171:61">&lt;</operator> <literal type="number" pos:start="171:63" pos:end="171:63">0</literal> <operator pos:start="171:65" pos:end="171:66">||</operator>

            <name pos:start="173:13" pos:end="173:17"><name pos:start="173:13" pos:end="173:13">q</name><operator pos:start="173:14" pos:end="173:14">.</operator><name pos:start="173:15" pos:end="173:17">num</name></name> <operator pos:start="173:19" pos:end="173:20">&lt;=</operator> <literal type="number" pos:start="173:22" pos:end="173:22">0</literal> <operator pos:start="173:24" pos:end="173:25">||</operator> <name pos:start="173:27" pos:end="173:31"><name pos:start="173:27" pos:end="173:27">q</name><operator pos:start="173:28" pos:end="173:28">.</operator><name pos:start="173:29" pos:end="173:31">den</name></name> <operator pos:start="173:33" pos:end="173:34">&lt;=</operator> <literal type="number" pos:start="173:36" pos:end="173:36">0</literal></expr>)</condition> <block pos:start="173:39" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:28">

            <expr_stmt pos:start="175:13" pos:end="175:77"><expr pos:start="175:13" pos:end="175:76"><call pos:start="175:13" pos:end="175:76"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="175:76">(<argument pos:start="175:20" pos:end="175:23"><expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">NULL</name></expr></argument>, <argument pos:start="175:26" pos:end="175:37"><expr pos:start="175:26" pos:end="175:37"><name pos:start="175:26" pos:end="175:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="175:40" pos:end="175:64"><expr pos:start="175:40" pos:end="175:64"><literal type="string" pos:start="175:40" pos:end="175:64">"Invalid time base: %s\n"</literal></expr></argument>, <argument pos:start="175:67" pos:end="175:75"><expr pos:start="175:67" pos:end="175:75"><name pos:start="175:67" pos:end="175:75">time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:28"><expr pos:start="177:13" pos:end="177:27"><call pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:24">exit_program</name><argument_list pos:start="177:25" pos:end="177:27">(<argument pos:start="177:26" pos:end="177:26"><expr pos:start="177:26" pos:end="177:26"><literal type="number" pos:start="177:26" pos:end="177:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:26"><expr pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:10">st</name><operator pos:start="181:11" pos:end="181:12">-&gt;</operator><name pos:start="181:13" pos:end="181:21">time_base</name></name> <operator pos:start="181:23" pos:end="181:23">=</operator> <name pos:start="181:25" pos:end="181:25">q</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:65"><expr pos:start="187:5" pos:end="187:64"><call pos:start="187:5" pos:end="187:64"><name pos:start="187:5" pos:end="187:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="187:25" pos:end="187:64">(<argument pos:start="187:26" pos:end="187:39"><expr pos:start="187:26" pos:end="187:39"><name pos:start="187:26" pos:end="187:39">enc_time_bases</name></expr></argument>, <argument pos:start="187:42" pos:end="187:44"><expr pos:start="187:42" pos:end="187:44"><name pos:start="187:42" pos:end="187:44">str</name></expr></argument>, <argument pos:start="187:47" pos:end="187:55"><expr pos:start="187:47" pos:end="187:55"><name pos:start="187:47" pos:end="187:55">time_base</name></expr></argument>, <argument pos:start="187:58" pos:end="187:59"><expr pos:start="187:58" pos:end="187:59"><name pos:start="187:58" pos:end="187:59">oc</name></expr></argument>, <argument pos:start="187:62" pos:end="187:63"><expr pos:start="187:62" pos:end="187:63"><name pos:start="187:62" pos:end="187:63">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="205:5"><if pos:start="189:5" pos:end="205:5">if <condition pos:start="189:8" pos:end="189:18">(<expr pos:start="189:9" pos:end="189:17"><name pos:start="189:9" pos:end="189:17">time_base</name></expr>)</condition> <block pos:start="189:20" pos:end="205:5">{<block_content pos:start="191:9" pos:end="203:30">

        <decl_stmt pos:start="191:9" pos:end="191:21"><decl pos:start="191:9" pos:end="191:20"><type pos:start="191:9" pos:end="191:18"><name pos:start="191:9" pos:end="191:18">AVRational</name></type> <name pos:start="191:20" pos:end="191:20">q</name></decl>;</decl_stmt>

        <if_stmt pos:start="193:9" pos:end="201:9"><if pos:start="193:9" pos:end="201:9">if <condition pos:start="193:12" pos:end="195:23">(<expr pos:start="193:13" pos:end="195:22"><call pos:start="193:13" pos:end="193:59"><name pos:start="193:13" pos:end="193:26">av_parse_ratio</name><argument_list pos:start="193:27" pos:end="193:59">(<argument pos:start="193:28" pos:end="193:29"><expr pos:start="193:28" pos:end="193:29"><operator pos:start="193:28" pos:end="193:28">&amp;</operator><name pos:start="193:29" pos:end="193:29">q</name></expr></argument>, <argument pos:start="193:32" pos:end="193:40"><expr pos:start="193:32" pos:end="193:40"><name pos:start="193:32" pos:end="193:40">time_base</name></expr></argument>, <argument pos:start="193:43" pos:end="193:49"><expr pos:start="193:43" pos:end="193:49"><name pos:start="193:43" pos:end="193:49">INT_MAX</name></expr></argument>, <argument pos:start="193:52" pos:end="193:52"><expr pos:start="193:52" pos:end="193:52"><literal type="number" pos:start="193:52" pos:end="193:52">0</literal></expr></argument>, <argument pos:start="193:55" pos:end="193:58"><expr pos:start="193:55" pos:end="193:58"><name pos:start="193:55" pos:end="193:58">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="193:61" pos:end="193:61">&lt;</operator> <literal type="number" pos:start="193:63" pos:end="193:63">0</literal> <operator pos:start="193:65" pos:end="193:66">||</operator>

            <name pos:start="195:13" pos:end="195:17"><name pos:start="195:13" pos:end="195:13">q</name><operator pos:start="195:14" pos:end="195:14">.</operator><name pos:start="195:15" pos:end="195:17">den</name></name> <operator pos:start="195:19" pos:end="195:20">&lt;=</operator> <literal type="number" pos:start="195:22" pos:end="195:22">0</literal></expr>)</condition> <block pos:start="195:25" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:28">

            <expr_stmt pos:start="197:13" pos:end="197:77"><expr pos:start="197:13" pos:end="197:76"><call pos:start="197:13" pos:end="197:76"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="197:76">(<argument pos:start="197:20" pos:end="197:23"><expr pos:start="197:20" pos:end="197:23"><name pos:start="197:20" pos:end="197:23">NULL</name></expr></argument>, <argument pos:start="197:26" pos:end="197:37"><expr pos:start="197:26" pos:end="197:37"><name pos:start="197:26" pos:end="197:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="197:40" pos:end="197:64"><expr pos:start="197:40" pos:end="197:64"><literal type="string" pos:start="197:40" pos:end="197:64">"Invalid time base: %s\n"</literal></expr></argument>, <argument pos:start="197:67" pos:end="197:75"><expr pos:start="197:67" pos:end="197:75"><name pos:start="197:67" pos:end="197:75">time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:28"><expr pos:start="199:13" pos:end="199:27"><call pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:24">exit_program</name><argument_list pos:start="199:25" pos:end="199:27">(<argument pos:start="199:26" pos:end="199:26"><expr pos:start="199:26" pos:end="199:26"><literal type="number" pos:start="199:26" pos:end="199:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:30"><expr pos:start="203:9" pos:end="203:29"><name pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:11">ost</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:25">enc_timebase</name></name> <operator pos:start="203:27" pos:end="203:27">=</operator> <name pos:start="203:29" pos:end="203:29">q</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:32"><expr pos:start="209:5" pos:end="209:31"><name pos:start="209:5" pos:end="209:19"><name pos:start="209:5" pos:end="209:7">ost</name><operator pos:start="209:8" pos:end="209:9">-&gt;</operator><name pos:start="209:10" pos:end="209:19">max_frames</name></name> <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:31">INT64_MAX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:67"><expr pos:start="211:5" pos:end="211:66"><call pos:start="211:5" pos:end="211:66"><name pos:start="211:5" pos:end="211:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="211:25" pos:end="211:66">(<argument pos:start="211:26" pos:end="211:35"><expr pos:start="211:26" pos:end="211:35"><name pos:start="211:26" pos:end="211:35">max_frames</name></expr></argument>, <argument pos:start="211:38" pos:end="211:40"><expr pos:start="211:38" pos:end="211:40"><name pos:start="211:38" pos:end="211:40">i64</name></expr></argument>, <argument pos:start="211:43" pos:end="211:57"><expr pos:start="211:43" pos:end="211:57"><name pos:start="211:43" pos:end="211:57"><name pos:start="211:43" pos:end="211:45">ost</name><operator pos:start="211:46" pos:end="211:47">-&gt;</operator><name pos:start="211:48" pos:end="211:57">max_frames</name></name></expr></argument>, <argument pos:start="211:60" pos:end="211:61"><expr pos:start="211:60" pos:end="211:61"><name pos:start="211:60" pos:end="211:61">oc</name></expr></argument>, <argument pos:start="211:64" pos:end="211:65"><expr pos:start="211:64" pos:end="211:65"><name pos:start="211:64" pos:end="211:65">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="213:5" pos:end="225:5">for <control pos:start="213:9" pos:end="213:40">(<init pos:start="213:10" pos:end="213:15"><expr pos:start="213:10" pos:end="213:14"><name pos:start="213:10" pos:end="213:10">i</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <literal type="number" pos:start="213:14" pos:end="213:14">0</literal></expr>;</init> <condition pos:start="213:17" pos:end="213:35"><expr pos:start="213:17" pos:end="213:34"><name pos:start="213:17" pos:end="213:17">i</name><operator pos:start="213:18" pos:end="213:18">&lt;</operator><name pos:start="213:19" pos:end="213:34"><name pos:start="213:19" pos:end="213:19">o</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:34">nb_max_frames</name></name></expr>;</condition> <incr pos:start="213:37" pos:end="213:39"><expr pos:start="213:37" pos:end="213:39"><name pos:start="213:37" pos:end="213:37">i</name><operator pos:start="213:38" pos:end="213:39">++</operator></expr></incr>)</control> <block pos:start="213:42" pos:end="225:5">{<block_content pos:start="215:9" pos:end="223:9">

        <decl_stmt pos:start="215:9" pos:end="215:45"><decl pos:start="215:9" pos:end="215:44"><type pos:start="215:9" pos:end="215:14"><name pos:start="215:9" pos:end="215:12">char</name> <modifier pos:start="215:14" pos:end="215:14">*</modifier></type><name pos:start="215:15" pos:end="215:15">p</name> <init pos:start="215:17" pos:end="215:44">= <expr pos:start="215:19" pos:end="215:44"><name pos:start="215:19" pos:end="215:34"><name pos:start="215:19" pos:end="215:19">o</name><operator pos:start="215:20" pos:end="215:21">-&gt;</operator><name pos:start="215:22" pos:end="215:31">max_frames</name><index pos:start="215:32" pos:end="215:34">[<expr pos:start="215:33" pos:end="215:33"><name pos:start="215:33" pos:end="215:33">i</name></expr>]</index></name><operator pos:start="215:35" pos:end="215:35">.</operator><name pos:start="215:36" pos:end="215:44">specifier</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="217:9" pos:end="223:9"><if pos:start="217:9" pos:end="223:9">if <condition pos:start="217:12" pos:end="217:46">(<expr pos:start="217:13" pos:end="217:45"><operator pos:start="217:13" pos:end="217:13">!</operator><operator pos:start="217:14" pos:end="217:14">*</operator><name pos:start="217:15" pos:end="217:15">p</name> <operator pos:start="217:17" pos:end="217:18">&amp;&amp;</operator> <name pos:start="217:20" pos:end="217:23">type</name> <operator pos:start="217:25" pos:end="217:26">!=</operator> <name pos:start="217:28" pos:end="217:45">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="217:48" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:18">

            <expr_stmt pos:start="219:13" pos:end="219:123"><expr pos:start="219:13" pos:end="219:122"><call pos:start="219:13" pos:end="219:122"><name pos:start="219:13" pos:end="219:18">av_log</name><argument_list pos:start="219:19" pos:end="219:122">(<argument pos:start="219:20" pos:end="219:23"><expr pos:start="219:20" pos:end="219:23"><name pos:start="219:20" pos:end="219:23">NULL</name></expr></argument>, <argument pos:start="219:26" pos:end="219:39"><expr pos:start="219:26" pos:end="219:39"><name pos:start="219:26" pos:end="219:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="219:42" pos:end="219:121"><expr pos:start="219:42" pos:end="219:121"><literal type="string" pos:start="219:42" pos:end="219:121">"Applying unspecific -frames to non video streams, maybe you meant -vframes ?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="221:13" pos:end="221:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="229:5" pos:end="229:31"><expr pos:start="229:5" pos:end="229:30"><name pos:start="229:5" pos:end="229:25"><name pos:start="229:5" pos:end="229:7">ost</name><operator pos:start="229:8" pos:end="229:9">-&gt;</operator><name pos:start="229:10" pos:end="229:25">copy_prior_start</name></name> <operator pos:start="229:27" pos:end="229:27">=</operator> <operator pos:start="229:29" pos:end="229:29">-</operator><literal type="number" pos:start="229:30" pos:end="229:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:77"><expr pos:start="231:5" pos:end="231:76"><call pos:start="231:5" pos:end="231:76"><name pos:start="231:5" pos:end="231:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="231:25" pos:end="231:76">(<argument pos:start="231:26" pos:end="231:41"><expr pos:start="231:26" pos:end="231:41"><name pos:start="231:26" pos:end="231:41">copy_prior_start</name></expr></argument>, <argument pos:start="231:44" pos:end="231:44"><expr pos:start="231:44" pos:end="231:44"><name pos:start="231:44" pos:end="231:44">i</name></expr></argument>, <argument pos:start="231:47" pos:end="231:67"><expr pos:start="231:47" pos:end="231:67"><name pos:start="231:47" pos:end="231:67"><name pos:start="231:47" pos:end="231:49">ost</name><operator pos:start="231:50" pos:end="231:51">-&gt;</operator><name pos:start="231:52" pos:end="231:67">copy_prior_start</name></name></expr></argument>, <argument pos:start="231:70" pos:end="231:71"><expr pos:start="231:70" pos:end="231:71"><name pos:start="231:70" pos:end="231:71">oc</name></expr></argument> ,<argument pos:start="231:74" pos:end="231:75"><expr pos:start="231:74" pos:end="231:75"><name pos:start="231:74" pos:end="231:75">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:63"><expr pos:start="235:5" pos:end="235:62"><call pos:start="235:5" pos:end="235:62"><name pos:start="235:5" pos:end="235:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="235:25" pos:end="235:62">(<argument pos:start="235:26" pos:end="235:42"><expr pos:start="235:26" pos:end="235:42"><name pos:start="235:26" pos:end="235:42">bitstream_filters</name></expr></argument>, <argument pos:start="235:45" pos:end="235:47"><expr pos:start="235:45" pos:end="235:47"><name pos:start="235:45" pos:end="235:47">str</name></expr></argument>, <argument pos:start="235:50" pos:end="235:53"><expr pos:start="235:50" pos:end="235:53"><name pos:start="235:50" pos:end="235:53">bsfs</name></expr></argument>, <argument pos:start="235:56" pos:end="235:57"><expr pos:start="235:56" pos:end="235:57"><name pos:start="235:56" pos:end="235:57">oc</name></expr></argument>, <argument pos:start="235:60" pos:end="235:61"><expr pos:start="235:60" pos:end="235:61"><name pos:start="235:60" pos:end="235:61">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="237:5" pos:end="333:5">while <condition pos:start="237:11" pos:end="237:25">(<expr pos:start="237:12" pos:end="237:24"><name pos:start="237:12" pos:end="237:15">bsfs</name> <operator pos:start="237:17" pos:end="237:18">&amp;&amp;</operator> <operator pos:start="237:20" pos:end="237:20">*</operator><name pos:start="237:21" pos:end="237:24">bsfs</name></expr>)</condition> <block pos:start="237:27" pos:end="333:5">{<block_content pos:start="239:9" pos:end="331:19">

        <decl_stmt pos:start="239:9" pos:end="239:40"><decl pos:start="239:9" pos:end="239:39"><type pos:start="239:9" pos:end="239:33"><specifier pos:start="239:9" pos:end="239:13">const</specifier> <name pos:start="239:15" pos:end="239:31">AVBitStreamFilter</name> <modifier pos:start="239:33" pos:end="239:33">*</modifier></type><name pos:start="239:34" pos:end="239:39">filter</name></decl>;</decl_stmt>

        <decl_stmt pos:start="241:9" pos:end="241:47"><decl pos:start="241:9" pos:end="241:17"><type pos:start="241:9" pos:end="241:14"><name pos:start="241:9" pos:end="241:12">char</name> <modifier pos:start="241:14" pos:end="241:14">*</modifier></type><name pos:start="241:15" pos:end="241:17">bsf</name></decl>, <decl pos:start="241:20" pos:end="241:35"><type ref="prev" pos:start="241:9" pos:end="241:14"><modifier pos:start="241:20" pos:end="241:20">*</modifier></type><name pos:start="241:21" pos:end="241:35">bsf_options_str</name></decl>, <decl pos:start="241:38" pos:end="241:46"><type ref="prev" pos:start="241:9" pos:end="241:14"><modifier pos:start="241:38" pos:end="241:38">*</modifier></type><name pos:start="241:39" pos:end="241:46">bsf_name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="245:9" pos:end="245:39"><expr pos:start="245:9" pos:end="245:38"><name pos:start="245:9" pos:end="245:11">bsf</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <call pos:start="245:15" pos:end="245:38"><name pos:start="245:15" pos:end="245:26">av_get_token</name><argument_list pos:start="245:27" pos:end="245:38">(<argument pos:start="245:28" pos:end="245:32"><expr pos:start="245:28" pos:end="245:32"><operator pos:start="245:28" pos:end="245:28">&amp;</operator><name pos:start="245:29" pos:end="245:32">bsfs</name></expr></argument>, <argument pos:start="245:35" pos:end="245:37"><expr pos:start="245:35" pos:end="245:37"><literal type="string" pos:start="245:35" pos:end="245:37">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="247:9" pos:end="249:28"><if pos:start="247:9" pos:end="249:28">if <condition pos:start="247:12" pos:end="247:17">(<expr pos:start="247:13" pos:end="247:16"><operator pos:start="247:13" pos:end="247:13">!</operator><name pos:start="247:14" pos:end="247:16">bsf</name></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:28"><block_content pos:start="249:13" pos:end="249:28">

            <expr_stmt pos:start="249:13" pos:end="249:28"><expr pos:start="249:13" pos:end="249:27"><call pos:start="249:13" pos:end="249:27"><name pos:start="249:13" pos:end="249:24">exit_program</name><argument_list pos:start="249:25" pos:end="249:27">(<argument pos:start="249:26" pos:end="249:26"><expr pos:start="249:26" pos:end="249:26"><literal type="number" pos:start="249:26" pos:end="249:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:57"><expr pos:start="251:9" pos:end="251:56"><name pos:start="251:9" pos:end="251:16">bsf_name</name> <operator pos:start="251:18" pos:end="251:18">=</operator> <call pos:start="251:20" pos:end="251:56"><name pos:start="251:20" pos:end="251:28">av_strtok</name><argument_list pos:start="251:29" pos:end="251:56">(<argument pos:start="251:30" pos:end="251:32"><expr pos:start="251:30" pos:end="251:32"><name pos:start="251:30" pos:end="251:32">bsf</name></expr></argument>, <argument pos:start="251:35" pos:end="251:37"><expr pos:start="251:35" pos:end="251:37"><literal type="string" pos:start="251:35" pos:end="251:37">"="</literal></expr></argument>, <argument pos:start="251:40" pos:end="251:55"><expr pos:start="251:40" pos:end="251:55"><operator pos:start="251:40" pos:end="251:40">&amp;</operator><name pos:start="251:41" pos:end="251:55">bsf_options_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="255:28"><if pos:start="253:9" pos:end="255:28">if <condition pos:start="253:12" pos:end="253:22">(<expr pos:start="253:13" pos:end="253:21"><operator pos:start="253:13" pos:end="253:13">!</operator><name pos:start="253:14" pos:end="253:21">bsf_name</name></expr>)</condition><block type="pseudo" pos:start="255:13" pos:end="255:28"><block_content pos:start="255:13" pos:end="255:28">

            <expr_stmt pos:start="255:13" pos:end="255:28"><expr pos:start="255:13" pos:end="255:27"><call pos:start="255:13" pos:end="255:27"><name pos:start="255:13" pos:end="255:24">exit_program</name><argument_list pos:start="255:25" pos:end="255:27">(<argument pos:start="255:26" pos:end="255:26"><expr pos:start="255:26" pos:end="255:26"><literal type="number" pos:start="255:26" pos:end="255:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:46"><expr pos:start="259:9" pos:end="259:45"><name pos:start="259:9" pos:end="259:14">filter</name> <operator pos:start="259:16" pos:end="259:16">=</operator> <call pos:start="259:18" pos:end="259:45"><name pos:start="259:18" pos:end="259:35">av_bsf_get_by_name</name><argument_list pos:start="259:36" pos:end="259:45">(<argument pos:start="259:37" pos:end="259:44"><expr pos:start="259:37" pos:end="259:44"><name pos:start="259:37" pos:end="259:44">bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="261:9" pos:end="267:9"><if pos:start="261:9" pos:end="267:9">if <condition pos:start="261:12" pos:end="261:20">(<expr pos:start="261:13" pos:end="261:19"><operator pos:start="261:13" pos:end="261:13">!</operator><name pos:start="261:14" pos:end="261:19">filter</name></expr>)</condition> <block pos:start="261:22" pos:end="267:9">{<block_content pos:start="263:13" pos:end="265:28">

            <expr_stmt pos:start="263:13" pos:end="263:82"><expr pos:start="263:13" pos:end="263:81"><call pos:start="263:13" pos:end="263:81"><name pos:start="263:13" pos:end="263:18">av_log</name><argument_list pos:start="263:19" pos:end="263:81">(<argument pos:start="263:20" pos:end="263:23"><expr pos:start="263:20" pos:end="263:23"><name pos:start="263:20" pos:end="263:23">NULL</name></expr></argument>, <argument pos:start="263:26" pos:end="263:37"><expr pos:start="263:26" pos:end="263:37"><name pos:start="263:26" pos:end="263:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="263:40" pos:end="263:70"><expr pos:start="263:40" pos:end="263:70"><literal type="string" pos:start="263:40" pos:end="263:70">"Unknown bitstream filter %s\n"</literal></expr></argument>, <argument pos:start="263:73" pos:end="263:80"><expr pos:start="263:73" pos:end="263:80"><name pos:start="263:73" pos:end="263:80">bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:28"><expr pos:start="265:13" pos:end="265:27"><call pos:start="265:13" pos:end="265:27"><name pos:start="265:13" pos:end="265:24">exit_program</name><argument_list pos:start="265:25" pos:end="265:27">(<argument pos:start="265:26" pos:end="265:26"><expr pos:start="265:26" pos:end="265:26"><literal type="number" pos:start="265:26" pos:end="265:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="271:9" pos:end="275:63"><expr pos:start="271:9" pos:end="275:62"><name pos:start="271:9" pos:end="271:20"><name pos:start="271:9" pos:end="271:11">ost</name><operator pos:start="271:12" pos:end="271:13">-&gt;</operator><name pos:start="271:14" pos:end="271:20">bsf_ctx</name></name> <operator pos:start="271:22" pos:end="271:22">=</operator> <call pos:start="271:24" pos:end="275:62"><name pos:start="271:24" pos:end="271:39">av_realloc_array</name><argument_list pos:start="271:40" pos:end="275:62">(<argument pos:start="271:41" pos:end="271:52"><expr pos:start="271:41" pos:end="271:52"><name pos:start="271:41" pos:end="271:52"><name pos:start="271:41" pos:end="271:43">ost</name><operator pos:start="271:44" pos:end="271:45">-&gt;</operator><name pos:start="271:46" pos:end="271:52">bsf_ctx</name></name></expr></argument>,

                                        <argument pos:start="273:41" pos:end="273:69"><expr pos:start="273:41" pos:end="273:69"><name pos:start="273:41" pos:end="273:65"><name pos:start="273:41" pos:end="273:43">ost</name><operator pos:start="273:44" pos:end="273:45">-&gt;</operator><name pos:start="273:46" pos:end="273:65">nb_bitstream_filters</name></name> <operator pos:start="273:67" pos:end="273:67">+</operator> <literal type="number" pos:start="273:69" pos:end="273:69">1</literal></expr></argument>,

                                        <argument pos:start="275:41" pos:end="275:61"><expr pos:start="275:41" pos:end="275:61"><sizeof pos:start="275:41" pos:end="275:61">sizeof<argument_list pos:start="275:47" pos:end="275:61">(<argument pos:start="275:48" pos:end="275:60"><expr pos:start="275:48" pos:end="275:60"><operator pos:start="275:48" pos:end="275:48">*</operator><name pos:start="275:49" pos:end="275:60"><name pos:start="275:49" pos:end="275:51">ost</name><operator pos:start="275:52" pos:end="275:53">-&gt;</operator><name pos:start="275:54" pos:end="275:60">bsf_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="277:9" pos:end="279:28"><if pos:start="277:9" pos:end="279:28">if <condition pos:start="277:12" pos:end="277:26">(<expr pos:start="277:13" pos:end="277:25"><operator pos:start="277:13" pos:end="277:13">!</operator><name pos:start="277:14" pos:end="277:25"><name pos:start="277:14" pos:end="277:16">ost</name><operator pos:start="277:17" pos:end="277:18">-&gt;</operator><name pos:start="277:19" pos:end="277:25">bsf_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:28"><block_content pos:start="279:13" pos:end="279:28">

            <expr_stmt pos:start="279:13" pos:end="279:28"><expr pos:start="279:13" pos:end="279:27"><call pos:start="279:13" pos:end="279:27"><name pos:start="279:13" pos:end="279:24">exit_program</name><argument_list pos:start="279:25" pos:end="279:27">(<argument pos:start="279:26" pos:end="279:26"><expr pos:start="279:26" pos:end="279:26"><literal type="number" pos:start="279:26" pos:end="279:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="283:9" pos:end="283:77"><expr pos:start="283:9" pos:end="283:76"><name pos:start="283:9" pos:end="283:11">ret</name> <operator pos:start="283:13" pos:end="283:13">=</operator> <call pos:start="283:15" pos:end="283:76"><name pos:start="283:15" pos:end="283:26">av_bsf_alloc</name><argument_list pos:start="283:27" pos:end="283:76">(<argument pos:start="283:28" pos:end="283:33"><expr pos:start="283:28" pos:end="283:33"><name pos:start="283:28" pos:end="283:33">filter</name></expr></argument>, <argument pos:start="283:36" pos:end="283:75"><expr pos:start="283:36" pos:end="283:75"><operator pos:start="283:36" pos:end="283:36">&amp;</operator><name pos:start="283:37" pos:end="283:75"><name pos:start="283:37" pos:end="283:39">ost</name><operator pos:start="283:40" pos:end="283:41">-&gt;</operator><name pos:start="283:42" pos:end="283:48">bsf_ctx</name><index pos:start="283:49" pos:end="283:75">[<expr pos:start="283:50" pos:end="283:74"><name pos:start="283:50" pos:end="283:74"><name pos:start="283:50" pos:end="283:52">ost</name><operator pos:start="283:53" pos:end="283:54">-&gt;</operator><name pos:start="283:55" pos:end="283:74">nb_bitstream_filters</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="285:9" pos:end="291:9"><if pos:start="285:9" pos:end="291:9">if <condition pos:start="285:12" pos:end="285:20">(<expr pos:start="285:13" pos:end="285:19"><name pos:start="285:13" pos:end="285:15">ret</name> <operator pos:start="285:17" pos:end="285:17">&lt;</operator> <literal type="number" pos:start="285:19" pos:end="285:19">0</literal></expr>)</condition> <block pos:start="285:22" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:28">

            <expr_stmt pos:start="287:13" pos:end="287:88"><expr pos:start="287:13" pos:end="287:87"><call pos:start="287:13" pos:end="287:87"><name pos:start="287:13" pos:end="287:18">av_log</name><argument_list pos:start="287:19" pos:end="287:87">(<argument pos:start="287:20" pos:end="287:23"><expr pos:start="287:20" pos:end="287:23"><name pos:start="287:20" pos:end="287:23">NULL</name></expr></argument>, <argument pos:start="287:26" pos:end="287:37"><expr pos:start="287:26" pos:end="287:37"><name pos:start="287:26" pos:end="287:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="287:40" pos:end="287:86"><expr pos:start="287:40" pos:end="287:86"><literal type="string" pos:start="287:40" pos:end="287:86">"Error allocating a bitstream filter context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:28"><expr pos:start="289:13" pos:end="289:27"><call pos:start="289:13" pos:end="289:27"><name pos:start="289:13" pos:end="289:24">exit_program</name><argument_list pos:start="289:25" pos:end="289:27">(<argument pos:start="289:26" pos:end="289:26"><expr pos:start="289:26" pos:end="289:26"><literal type="number" pos:start="289:26" pos:end="289:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="295:9" pos:end="295:36"><expr pos:start="295:9" pos:end="295:35"><name pos:start="295:9" pos:end="295:33"><name pos:start="295:9" pos:end="295:11">ost</name><operator pos:start="295:12" pos:end="295:13">-&gt;</operator><name pos:start="295:14" pos:end="295:33">nb_bitstream_filters</name></name><operator pos:start="295:34" pos:end="295:35">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="299:9" pos:end="323:9"><if pos:start="299:9" pos:end="323:9">if <condition pos:start="299:12" pos:end="299:50">(<expr pos:start="299:13" pos:end="299:49"><name pos:start="299:13" pos:end="299:27">bsf_options_str</name> <operator pos:start="299:29" pos:end="299:30">&amp;&amp;</operator> <name pos:start="299:32" pos:end="299:49"><name pos:start="299:32" pos:end="299:37">filter</name><operator pos:start="299:38" pos:end="299:39">-&gt;</operator><name pos:start="299:40" pos:end="299:49">priv_class</name></name></expr>)</condition> <block pos:start="299:52" pos:end="323:9">{<block_content pos:start="301:13" pos:end="321:13">

            <decl_stmt pos:start="301:13" pos:end="301:106"><decl pos:start="301:13" pos:end="301:105"><type pos:start="301:13" pos:end="301:28"><specifier pos:start="301:13" pos:end="301:17">const</specifier> <name pos:start="301:19" pos:end="301:26">AVOption</name> <modifier pos:start="301:28" pos:end="301:28">*</modifier></type><name pos:start="301:29" pos:end="301:31">opt</name> <init pos:start="301:33" pos:end="301:105">= <expr pos:start="301:35" pos:end="301:105"><call pos:start="301:35" pos:end="301:105"><name pos:start="301:35" pos:end="301:45">av_opt_next</name><argument_list pos:start="301:46" pos:end="301:105">(<argument pos:start="301:47" pos:end="301:98"><expr pos:start="301:47" pos:end="301:98"><name pos:start="301:47" pos:end="301:87"><name pos:start="301:47" pos:end="301:49">ost</name><operator pos:start="301:50" pos:end="301:51">-&gt;</operator><name pos:start="301:52" pos:end="301:58">bsf_ctx</name><index pos:start="301:59" pos:end="301:87">[<expr pos:start="301:60" pos:end="301:86"><name pos:start="301:60" pos:end="301:84"><name pos:start="301:60" pos:end="301:62">ost</name><operator pos:start="301:63" pos:end="301:64">-&gt;</operator><name pos:start="301:65" pos:end="301:84">nb_bitstream_filters</name></name><operator pos:start="301:85" pos:end="301:85">-</operator><literal type="number" pos:start="301:86" pos:end="301:86">1</literal></expr>]</index></name><operator pos:start="301:88" pos:end="301:89">-&gt;</operator><name pos:start="301:90" pos:end="301:98">priv_data</name></expr></argument>, <argument pos:start="301:101" pos:end="301:104"><expr pos:start="301:101" pos:end="301:104"><name pos:start="301:101" pos:end="301:104">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="303:13" pos:end="303:47"><decl pos:start="303:13" pos:end="303:46"><type pos:start="303:13" pos:end="303:24"><specifier pos:start="303:13" pos:end="303:17">const</specifier> <name pos:start="303:19" pos:end="303:22">char</name> <modifier pos:start="303:24" pos:end="303:24">*</modifier></type> <name pos:start="303:26" pos:end="303:37"><name pos:start="303:26" pos:end="303:34">shorthand</name><index pos:start="303:35" pos:end="303:37">[<expr pos:start="303:36" pos:end="303:36"><literal type="number" pos:start="303:36" pos:end="303:36">2</literal></expr>]</index></name> <init pos:start="303:39" pos:end="303:46">= <expr pos:start="303:41" pos:end="303:46"><block pos:start="303:41" pos:end="303:46">{<expr pos:start="303:42" pos:end="303:45"><name pos:start="303:42" pos:end="303:45">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="307:13" pos:end="309:41"><if pos:start="307:13" pos:end="309:41">if <condition pos:start="307:16" pos:end="307:20">(<expr pos:start="307:17" pos:end="307:19"><name pos:start="307:17" pos:end="307:19">opt</name></expr>)</condition><block type="pseudo" pos:start="309:17" pos:end="309:41"><block_content pos:start="309:17" pos:end="309:41">

                <expr_stmt pos:start="309:17" pos:end="309:41"><expr pos:start="309:17" pos:end="309:40"><name pos:start="309:17" pos:end="309:28"><name pos:start="309:17" pos:end="309:25">shorthand</name><index pos:start="309:26" pos:end="309:28">[<expr pos:start="309:27" pos:end="309:27"><literal type="number" pos:start="309:27" pos:end="309:27">0</literal></expr>]</index></name> <operator pos:start="309:30" pos:end="309:30">=</operator> <name pos:start="309:32" pos:end="309:40"><name pos:start="309:32" pos:end="309:34">opt</name><operator pos:start="309:35" pos:end="309:36">-&gt;</operator><name pos:start="309:37" pos:end="309:40">name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="313:13" pos:end="313:133"><expr pos:start="313:13" pos:end="313:132"><name pos:start="313:13" pos:end="313:15">ret</name> <operator pos:start="313:17" pos:end="313:17">=</operator> <call pos:start="313:19" pos:end="313:132"><name pos:start="313:19" pos:end="313:40">av_opt_set_from_string</name><argument_list pos:start="313:41" pos:end="313:132">(<argument pos:start="313:42" pos:end="313:93"><expr pos:start="313:42" pos:end="313:93"><name pos:start="313:42" pos:end="313:82"><name pos:start="313:42" pos:end="313:44">ost</name><operator pos:start="313:45" pos:end="313:46">-&gt;</operator><name pos:start="313:47" pos:end="313:53">bsf_ctx</name><index pos:start="313:54" pos:end="313:82">[<expr pos:start="313:55" pos:end="313:81"><name pos:start="313:55" pos:end="313:79"><name pos:start="313:55" pos:end="313:57">ost</name><operator pos:start="313:58" pos:end="313:59">-&gt;</operator><name pos:start="313:60" pos:end="313:79">nb_bitstream_filters</name></name><operator pos:start="313:80" pos:end="313:80">-</operator><literal type="number" pos:start="313:81" pos:end="313:81">1</literal></expr>]</index></name><operator pos:start="313:83" pos:end="313:84">-&gt;</operator><name pos:start="313:85" pos:end="313:93">priv_data</name></expr></argument>, <argument pos:start="313:96" pos:end="313:110"><expr pos:start="313:96" pos:end="313:110"><name pos:start="313:96" pos:end="313:110">bsf_options_str</name></expr></argument>, <argument pos:start="313:113" pos:end="313:121"><expr pos:start="313:113" pos:end="313:121"><name pos:start="313:113" pos:end="313:121">shorthand</name></expr></argument>, <argument pos:start="313:124" pos:end="313:126"><expr pos:start="313:124" pos:end="313:126"><literal type="string" pos:start="313:124" pos:end="313:126">"="</literal></expr></argument>, <argument pos:start="313:129" pos:end="313:131"><expr pos:start="313:129" pos:end="313:131"><literal type="string" pos:start="313:129" pos:end="313:131">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="315:13" pos:end="321:13"><if pos:start="315:13" pos:end="321:13">if <condition pos:start="315:16" pos:end="315:24">(<expr pos:start="315:17" pos:end="315:23"><name pos:start="315:17" pos:end="315:19">ret</name> <operator pos:start="315:21" pos:end="315:21">&lt;</operator> <literal type="number" pos:start="315:23" pos:end="315:23">0</literal></expr>)</condition> <block pos:start="315:26" pos:end="321:13">{<block_content pos:start="317:17" pos:end="319:32">

                <expr_stmt pos:start="317:17" pos:end="317:104"><expr pos:start="317:17" pos:end="317:103"><call pos:start="317:17" pos:end="317:103"><name pos:start="317:17" pos:end="317:22">av_log</name><argument_list pos:start="317:23" pos:end="317:103">(<argument pos:start="317:24" pos:end="317:27"><expr pos:start="317:24" pos:end="317:27"><name pos:start="317:24" pos:end="317:27">NULL</name></expr></argument>, <argument pos:start="317:30" pos:end="317:41"><expr pos:start="317:30" pos:end="317:41"><name pos:start="317:30" pos:end="317:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="317:44" pos:end="317:92"><expr pos:start="317:44" pos:end="317:92"><literal type="string" pos:start="317:44" pos:end="317:92">"Error parsing options for bitstream filter %s\n"</literal></expr></argument>, <argument pos:start="317:95" pos:end="317:102"><expr pos:start="317:95" pos:end="317:102"><name pos:start="317:95" pos:end="317:102">bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:32"><expr pos:start="319:17" pos:end="319:31"><call pos:start="319:17" pos:end="319:31"><name pos:start="319:17" pos:end="319:28">exit_program</name><argument_list pos:start="319:29" pos:end="319:31">(<argument pos:start="319:30" pos:end="319:30"><expr pos:start="319:30" pos:end="319:30"><literal type="number" pos:start="319:30" pos:end="319:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:23"><expr pos:start="325:9" pos:end="325:22"><call pos:start="325:9" pos:end="325:22"><name pos:start="325:9" pos:end="325:16">av_freep</name><argument_list pos:start="325:17" pos:end="325:22">(<argument pos:start="325:18" pos:end="325:21"><expr pos:start="325:18" pos:end="325:21"><operator pos:start="325:18" pos:end="325:18">&amp;</operator><name pos:start="325:19" pos:end="325:21">bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="329:9" pos:end="331:19"><if pos:start="329:9" pos:end="331:19">if <condition pos:start="329:12" pos:end="329:18">(<expr pos:start="329:13" pos:end="329:17"><operator pos:start="329:13" pos:end="329:13">*</operator><name pos:start="329:14" pos:end="329:17">bsfs</name></expr>)</condition><block type="pseudo" pos:start="331:13" pos:end="331:19"><block_content pos:start="331:13" pos:end="331:19">

            <expr_stmt pos:start="331:13" pos:end="331:19"><expr pos:start="331:13" pos:end="331:18"><name pos:start="331:13" pos:end="331:16">bsfs</name><operator pos:start="331:17" pos:end="331:18">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="335:5" pos:end="347:5"><if pos:start="335:5" pos:end="347:5">if <condition pos:start="335:8" pos:end="335:34">(<expr pos:start="335:9" pos:end="335:33"><name pos:start="335:9" pos:end="335:33"><name pos:start="335:9" pos:end="335:11">ost</name><operator pos:start="335:12" pos:end="335:13">-&gt;</operator><name pos:start="335:14" pos:end="335:33">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="335:36" pos:end="347:5">{<block_content pos:start="337:9" pos:end="345:9">

        <expr_stmt pos:start="337:9" pos:end="337:118"><expr pos:start="337:9" pos:end="337:117"><name pos:start="337:9" pos:end="337:34"><name pos:start="337:9" pos:end="337:11">ost</name><operator pos:start="337:12" pos:end="337:13">-&gt;</operator><name pos:start="337:14" pos:end="337:34">bsf_extradata_updated</name></name> <operator pos:start="337:36" pos:end="337:36">=</operator> <call pos:start="337:38" pos:end="337:117"><name pos:start="337:38" pos:end="337:53">av_mallocz_array</name><argument_list pos:start="337:54" pos:end="337:117">(<argument pos:start="337:55" pos:end="337:79"><expr pos:start="337:55" pos:end="337:79"><name pos:start="337:55" pos:end="337:79"><name pos:start="337:55" pos:end="337:57">ost</name><operator pos:start="337:58" pos:end="337:59">-&gt;</operator><name pos:start="337:60" pos:end="337:79">nb_bitstream_filters</name></name></expr></argument>, <argument pos:start="337:82" pos:end="337:116"><expr pos:start="337:82" pos:end="337:116"><sizeof pos:start="337:82" pos:end="337:116">sizeof<argument_list pos:start="337:88" pos:end="337:116">(<argument pos:start="337:89" pos:end="337:115"><expr pos:start="337:89" pos:end="337:115"><operator pos:start="337:89" pos:end="337:89">*</operator><name pos:start="337:90" pos:end="337:115"><name pos:start="337:90" pos:end="337:92">ost</name><operator pos:start="337:93" pos:end="337:94">-&gt;</operator><name pos:start="337:95" pos:end="337:115">bsf_extradata_updated</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="339:9" pos:end="345:9"><if pos:start="339:9" pos:end="345:9">if <condition pos:start="339:12" pos:end="339:40">(<expr pos:start="339:13" pos:end="339:39"><operator pos:start="339:13" pos:end="339:13">!</operator><name pos:start="339:14" pos:end="339:39"><name pos:start="339:14" pos:end="339:16">ost</name><operator pos:start="339:17" pos:end="339:18">-&gt;</operator><name pos:start="339:19" pos:end="339:39">bsf_extradata_updated</name></name></expr>)</condition> <block pos:start="339:42" pos:end="345:9">{<block_content pos:start="341:13" pos:end="343:28">

            <expr_stmt pos:start="341:13" pos:end="341:86"><expr pos:start="341:13" pos:end="341:85"><call pos:start="341:13" pos:end="341:85"><name pos:start="341:13" pos:end="341:18">av_log</name><argument_list pos:start="341:19" pos:end="341:85">(<argument pos:start="341:20" pos:end="341:23"><expr pos:start="341:20" pos:end="341:23"><name pos:start="341:20" pos:end="341:23">NULL</name></expr></argument>, <argument pos:start="341:26" pos:end="341:37"><expr pos:start="341:26" pos:end="341:37"><name pos:start="341:26" pos:end="341:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="341:40" pos:end="341:84"><expr pos:start="341:40" pos:end="341:84"><literal type="string" pos:start="341:40" pos:end="341:84">"Bitstream filter memory allocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:28"><expr pos:start="343:13" pos:end="343:27"><call pos:start="343:13" pos:end="343:27"><name pos:start="343:13" pos:end="343:24">exit_program</name><argument_list pos:start="343:25" pos:end="343:27">(<argument pos:start="343:26" pos:end="343:26"><expr pos:start="343:26" pos:end="343:26"><literal type="number" pos:start="343:26" pos:end="343:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:61"><expr pos:start="351:5" pos:end="351:60"><call pos:start="351:5" pos:end="351:60"><name pos:start="351:5" pos:end="351:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="351:25" pos:end="351:60">(<argument pos:start="351:26" pos:end="351:35"><expr pos:start="351:26" pos:end="351:35"><name pos:start="351:26" pos:end="351:35">codec_tags</name></expr></argument>, <argument pos:start="351:38" pos:end="351:40"><expr pos:start="351:38" pos:end="351:40"><name pos:start="351:38" pos:end="351:40">str</name></expr></argument>, <argument pos:start="351:43" pos:end="351:51"><expr pos:start="351:43" pos:end="351:51"><name pos:start="351:43" pos:end="351:51">codec_tag</name></expr></argument>, <argument pos:start="351:54" pos:end="351:55"><expr pos:start="351:54" pos:end="351:55"><name pos:start="351:54" pos:end="351:55">oc</name></expr></argument>, <argument pos:start="351:58" pos:end="351:59"><expr pos:start="351:58" pos:end="351:59"><name pos:start="351:58" pos:end="351:59">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="353:5" pos:end="365:5"><if pos:start="353:5" pos:end="365:5">if <condition pos:start="353:8" pos:end="353:18">(<expr pos:start="353:9" pos:end="353:17"><name pos:start="353:9" pos:end="353:17">codec_tag</name></expr>)</condition> <block pos:start="353:20" pos:end="365:5">{<block_content pos:start="355:9" pos:end="363:38">

        <decl_stmt pos:start="355:9" pos:end="355:51"><decl pos:start="355:9" pos:end="355:50"><type pos:start="355:9" pos:end="355:16"><name pos:start="355:9" pos:end="355:16">uint32_t</name></type> <name pos:start="355:18" pos:end="355:20">tag</name> <init pos:start="355:22" pos:end="355:50">= <expr pos:start="355:24" pos:end="355:50"><call pos:start="355:24" pos:end="355:50"><name pos:start="355:24" pos:end="355:29">strtol</name><argument_list pos:start="355:30" pos:end="355:50">(<argument pos:start="355:31" pos:end="355:39"><expr pos:start="355:31" pos:end="355:39"><name pos:start="355:31" pos:end="355:39">codec_tag</name></expr></argument>, <argument pos:start="355:42" pos:end="355:46"><expr pos:start="355:42" pos:end="355:46"><operator pos:start="355:42" pos:end="355:42">&amp;</operator><name pos:start="355:43" pos:end="355:46">next</name></expr></argument>, <argument pos:start="355:49" pos:end="355:49"><expr pos:start="355:49" pos:end="355:49"><literal type="number" pos:start="355:49" pos:end="355:49">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="357:9" pos:end="359:37"><if pos:start="357:9" pos:end="359:37">if <condition pos:start="357:12" pos:end="357:18">(<expr pos:start="357:13" pos:end="357:17"><operator pos:start="357:13" pos:end="357:13">*</operator><name pos:start="357:14" pos:end="357:17">next</name></expr>)</condition><block type="pseudo" pos:start="359:13" pos:end="359:37"><block_content pos:start="359:13" pos:end="359:37">

            <expr_stmt pos:start="359:13" pos:end="359:37"><expr pos:start="359:13" pos:end="359:36"><name pos:start="359:13" pos:end="359:15">tag</name> <operator pos:start="359:17" pos:end="359:17">=</operator> <call pos:start="359:19" pos:end="359:36"><name pos:start="359:19" pos:end="359:25">AV_RL32</name><argument_list pos:start="359:26" pos:end="359:36">(<argument pos:start="359:27" pos:end="359:35"><expr pos:start="359:27" pos:end="359:35"><name pos:start="359:27" pos:end="359:35">codec_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="361:9" pos:end="363:38"><expr pos:start="361:9" pos:end="363:37"><name pos:start="361:9" pos:end="361:36"><name pos:start="361:9" pos:end="361:11">ost</name><operator pos:start="361:12" pos:end="361:13">-&gt;</operator><name pos:start="361:14" pos:end="361:15">st</name><operator pos:start="361:16" pos:end="361:17">-&gt;</operator><name pos:start="361:18" pos:end="361:25">codecpar</name><operator pos:start="361:26" pos:end="361:27">-&gt;</operator><name pos:start="361:28" pos:end="361:36">codec_tag</name></name> <operator pos:start="361:38" pos:end="361:38">=</operator>

        <name pos:start="363:9" pos:end="363:31"><name pos:start="363:9" pos:end="363:11">ost</name><operator pos:start="363:12" pos:end="363:13">-&gt;</operator><name pos:start="363:14" pos:end="363:20">enc_ctx</name><operator pos:start="363:21" pos:end="363:22">-&gt;</operator><name pos:start="363:23" pos:end="363:31">codec_tag</name></name> <operator pos:start="363:33" pos:end="363:33">=</operator> <name pos:start="363:35" pos:end="363:37">tag</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:54"><expr pos:start="369:5" pos:end="369:53"><call pos:start="369:5" pos:end="369:53"><name pos:start="369:5" pos:end="369:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="369:25" pos:end="369:53">(<argument pos:start="369:26" pos:end="369:31"><expr pos:start="369:26" pos:end="369:31"><name pos:start="369:26" pos:end="369:31">qscale</name></expr></argument>, <argument pos:start="369:34" pos:end="369:36"><expr pos:start="369:34" pos:end="369:36"><name pos:start="369:34" pos:end="369:36">dbl</name></expr></argument>, <argument pos:start="369:39" pos:end="369:44"><expr pos:start="369:39" pos:end="369:44"><name pos:start="369:39" pos:end="369:44">qscale</name></expr></argument>, <argument pos:start="369:47" pos:end="369:48"><expr pos:start="369:47" pos:end="369:48"><name pos:start="369:47" pos:end="369:48">oc</name></expr></argument>, <argument pos:start="369:51" pos:end="369:52"><expr pos:start="369:51" pos:end="369:52"><name pos:start="369:51" pos:end="369:52">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="371:5" pos:end="377:5"><if pos:start="371:5" pos:end="377:5">if <condition pos:start="371:8" pos:end="371:20">(<expr pos:start="371:9" pos:end="371:19"><name pos:start="371:9" pos:end="371:14">qscale</name> <operator pos:start="371:16" pos:end="371:17">&gt;=</operator> <literal type="number" pos:start="371:19" pos:end="371:19">0</literal></expr>)</condition> <block pos:start="371:22" pos:end="377:5">{<block_content pos:start="373:9" pos:end="375:61">

        <expr_stmt pos:start="373:9" pos:end="373:52"><expr pos:start="373:9" pos:end="373:51"><name pos:start="373:9" pos:end="373:27"><name pos:start="373:9" pos:end="373:11">ost</name><operator pos:start="373:12" pos:end="373:13">-&gt;</operator><name pos:start="373:14" pos:end="373:20">enc_ctx</name><operator pos:start="373:21" pos:end="373:22">-&gt;</operator><name pos:start="373:23" pos:end="373:27">flags</name></name> <operator pos:start="373:29" pos:end="373:30">|=</operator> <name pos:start="373:32" pos:end="373:51">AV_CODEC_FLAG_QSCALE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:61"><expr pos:start="375:9" pos:end="375:60"><name pos:start="375:9" pos:end="375:36"><name pos:start="375:9" pos:end="375:11">ost</name><operator pos:start="375:12" pos:end="375:13">-&gt;</operator><name pos:start="375:14" pos:end="375:20">enc_ctx</name><operator pos:start="375:21" pos:end="375:22">-&gt;</operator><name pos:start="375:23" pos:end="375:36">global_quality</name></name> <operator pos:start="375:38" pos:end="375:38">=</operator> <name pos:start="375:40" pos:end="375:51">FF_QP2LAMBDA</name> <operator pos:start="375:53" pos:end="375:53">*</operator> <name pos:start="375:55" pos:end="375:60">qscale</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="381:5" pos:end="381:69"><expr pos:start="381:5" pos:end="381:68"><call pos:start="381:5" pos:end="381:68"><name pos:start="381:5" pos:end="381:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="381:25" pos:end="381:68">(<argument pos:start="381:26" pos:end="381:36"><expr pos:start="381:26" pos:end="381:36"><name pos:start="381:26" pos:end="381:36">disposition</name></expr></argument>, <argument pos:start="381:39" pos:end="381:41"><expr pos:start="381:39" pos:end="381:41"><name pos:start="381:39" pos:end="381:41">str</name></expr></argument>, <argument pos:start="381:44" pos:end="381:59"><expr pos:start="381:44" pos:end="381:59"><name pos:start="381:44" pos:end="381:59"><name pos:start="381:44" pos:end="381:46">ost</name><operator pos:start="381:47" pos:end="381:48">-&gt;</operator><name pos:start="381:49" pos:end="381:59">disposition</name></name></expr></argument>, <argument pos:start="381:62" pos:end="381:63"><expr pos:start="381:62" pos:end="381:63"><name pos:start="381:62" pos:end="381:63">oc</name></expr></argument>, <argument pos:start="381:66" pos:end="381:67"><expr pos:start="381:66" pos:end="381:67"><name pos:start="381:66" pos:end="381:67">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:51"><expr pos:start="383:5" pos:end="383:50"><name pos:start="383:5" pos:end="383:20"><name pos:start="383:5" pos:end="383:7">ost</name><operator pos:start="383:8" pos:end="383:9">-&gt;</operator><name pos:start="383:10" pos:end="383:20">disposition</name></name> <operator pos:start="383:22" pos:end="383:22">=</operator> <call pos:start="383:24" pos:end="383:50"><name pos:start="383:24" pos:end="383:32">av_strdup</name><argument_list pos:start="383:33" pos:end="383:50">(<argument pos:start="383:34" pos:end="383:49"><expr pos:start="383:34" pos:end="383:49"><name pos:start="383:34" pos:end="383:49"><name pos:start="383:34" pos:end="383:36">ost</name><operator pos:start="383:37" pos:end="383:38">-&gt;</operator><name pos:start="383:39" pos:end="383:49">disposition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="387:5" pos:end="387:37"><expr pos:start="387:5" pos:end="387:36"><name pos:start="387:5" pos:end="387:30"><name pos:start="387:5" pos:end="387:7">ost</name><operator pos:start="387:8" pos:end="387:9">-&gt;</operator><name pos:start="387:10" pos:end="387:30">max_muxing_queue_size</name></name> <operator pos:start="387:32" pos:end="387:32">=</operator> <literal type="number" pos:start="387:34" pos:end="387:36">128</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:87"><expr pos:start="389:5" pos:end="389:86"><call pos:start="389:5" pos:end="389:86"><name pos:start="389:5" pos:end="389:24">MATCH_PER_STREAM_OPT</name><argument_list pos:start="389:25" pos:end="389:86">(<argument pos:start="389:26" pos:end="389:46"><expr pos:start="389:26" pos:end="389:46"><name pos:start="389:26" pos:end="389:46">max_muxing_queue_size</name></expr></argument>, <argument pos:start="389:49" pos:end="389:49"><expr pos:start="389:49" pos:end="389:49"><name pos:start="389:49" pos:end="389:49">i</name></expr></argument>, <argument pos:start="389:52" pos:end="389:77"><expr pos:start="389:52" pos:end="389:77"><name pos:start="389:52" pos:end="389:77"><name pos:start="389:52" pos:end="389:54">ost</name><operator pos:start="389:55" pos:end="389:56">-&gt;</operator><name pos:start="389:57" pos:end="389:77">max_muxing_queue_size</name></name></expr></argument>, <argument pos:start="389:80" pos:end="389:81"><expr pos:start="389:80" pos:end="389:81"><name pos:start="389:80" pos:end="389:81">oc</name></expr></argument>, <argument pos:start="389:84" pos:end="389:85"><expr pos:start="389:84" pos:end="389:85"><name pos:start="389:84" pos:end="389:85">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:51"><expr pos:start="391:5" pos:end="391:50"><name pos:start="391:5" pos:end="391:30"><name pos:start="391:5" pos:end="391:7">ost</name><operator pos:start="391:8" pos:end="391:9">-&gt;</operator><name pos:start="391:10" pos:end="391:30">max_muxing_queue_size</name></name> <operator pos:start="391:32" pos:end="391:33">*=</operator> <sizeof pos:start="391:35" pos:end="391:50">sizeof<argument_list pos:start="391:41" pos:end="391:50">(<argument pos:start="391:42" pos:end="391:49"><expr pos:start="391:42" pos:end="391:49"><name pos:start="391:42" pos:end="391:49">AVPacket</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="395:5" pos:end="397:59"><if pos:start="395:5" pos:end="397:59">if <condition pos:start="395:8" pos:end="395:48">(<expr pos:start="395:9" pos:end="395:47"><name pos:start="395:9" pos:end="395:26"><name pos:start="395:9" pos:end="395:10">oc</name><operator pos:start="395:11" pos:end="395:12">-&gt;</operator><name pos:start="395:13" pos:end="395:19">oformat</name><operator pos:start="395:20" pos:end="395:21">-&gt;</operator><name pos:start="395:22" pos:end="395:26">flags</name></name> <operator pos:start="395:28" pos:end="395:28">&amp;</operator> <name pos:start="395:30" pos:end="395:47">AVFMT_GLOBALHEADER</name></expr>)</condition><block type="pseudo" pos:start="397:9" pos:end="397:59"><block_content pos:start="397:9" pos:end="397:59">

        <expr_stmt pos:start="397:9" pos:end="397:59"><expr pos:start="397:9" pos:end="397:58"><name pos:start="397:9" pos:end="397:27"><name pos:start="397:9" pos:end="397:11">ost</name><operator pos:start="397:12" pos:end="397:13">-&gt;</operator><name pos:start="397:14" pos:end="397:20">enc_ctx</name><operator pos:start="397:21" pos:end="397:22">-&gt;</operator><name pos:start="397:23" pos:end="397:27">flags</name></name> <operator pos:start="397:29" pos:end="397:30">|=</operator> <name pos:start="397:32" pos:end="397:58">AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="401:5" pos:end="401:52"><expr pos:start="401:5" pos:end="401:51"><call pos:start="401:5" pos:end="401:51"><name pos:start="401:5" pos:end="401:16">av_dict_copy</name><argument_list pos:start="401:17" pos:end="401:51">(<argument pos:start="401:18" pos:end="401:31"><expr pos:start="401:18" pos:end="401:31"><operator pos:start="401:18" pos:end="401:18">&amp;</operator><name pos:start="401:19" pos:end="401:31"><name pos:start="401:19" pos:end="401:21">ost</name><operator pos:start="401:22" pos:end="401:23">-&gt;</operator><name pos:start="401:24" pos:end="401:31">sws_dict</name></name></expr></argument>, <argument pos:start="401:34" pos:end="401:47"><expr pos:start="401:34" pos:end="401:47"><name pos:start="401:34" pos:end="401:47"><name pos:start="401:34" pos:end="401:34">o</name><operator pos:start="401:35" pos:end="401:36">-&gt;</operator><name pos:start="401:37" pos:end="401:37">g</name><operator pos:start="401:38" pos:end="401:39">-&gt;</operator><name pos:start="401:40" pos:end="401:47">sws_dict</name></name></expr></argument>, <argument pos:start="401:50" pos:end="401:50"><expr pos:start="401:50" pos:end="401:50"><literal type="number" pos:start="401:50" pos:end="401:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="405:5" pos:end="405:52"><expr pos:start="405:5" pos:end="405:51"><call pos:start="405:5" pos:end="405:51"><name pos:start="405:5" pos:end="405:16">av_dict_copy</name><argument_list pos:start="405:17" pos:end="405:51">(<argument pos:start="405:18" pos:end="405:31"><expr pos:start="405:18" pos:end="405:31"><operator pos:start="405:18" pos:end="405:18">&amp;</operator><name pos:start="405:19" pos:end="405:31"><name pos:start="405:19" pos:end="405:21">ost</name><operator pos:start="405:22" pos:end="405:23">-&gt;</operator><name pos:start="405:24" pos:end="405:31">swr_opts</name></name></expr></argument>, <argument pos:start="405:34" pos:end="405:47"><expr pos:start="405:34" pos:end="405:47"><name pos:start="405:34" pos:end="405:47"><name pos:start="405:34" pos:end="405:34">o</name><operator pos:start="405:35" pos:end="405:36">-&gt;</operator><name pos:start="405:37" pos:end="405:37">g</name><operator pos:start="405:38" pos:end="405:39">-&gt;</operator><name pos:start="405:40" pos:end="405:47">swr_opts</name></name></expr></argument>, <argument pos:start="405:50" pos:end="405:50"><expr pos:start="405:50" pos:end="405:50"><literal type="number" pos:start="405:50" pos:end="405:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="407:5" pos:end="409:67"><if pos:start="407:5" pos:end="409:67">if <condition pos:start="407:8" pos:end="407:69">(<expr pos:start="407:9" pos:end="407:68"><name pos:start="407:9" pos:end="407:16"><name pos:start="407:9" pos:end="407:11">ost</name><operator pos:start="407:12" pos:end="407:13">-&gt;</operator><name pos:start="407:14" pos:end="407:16">enc</name></name> <operator pos:start="407:18" pos:end="407:19">&amp;&amp;</operator> <call pos:start="407:21" pos:end="407:62"><name pos:start="407:21" pos:end="407:48">av_get_exact_bits_per_sample</name><argument_list pos:start="407:49" pos:end="407:62">(<argument pos:start="407:50" pos:end="407:61"><expr pos:start="407:50" pos:end="407:61"><name pos:start="407:50" pos:end="407:61"><name pos:start="407:50" pos:end="407:52">ost</name><operator pos:start="407:53" pos:end="407:54">-&gt;</operator><name pos:start="407:55" pos:end="407:57">enc</name><operator pos:start="407:58" pos:end="407:59">-&gt;</operator><name pos:start="407:60" pos:end="407:61">id</name></name></expr></argument>)</argument_list></call> <operator pos:start="407:64" pos:end="407:65">==</operator> <literal type="number" pos:start="407:67" pos:end="407:68">24</literal></expr>)</condition><block type="pseudo" pos:start="409:9" pos:end="409:67"><block_content pos:start="409:9" pos:end="409:67">

        <expr_stmt pos:start="409:9" pos:end="409:67"><expr pos:start="409:9" pos:end="409:66"><call pos:start="409:9" pos:end="409:66"><name pos:start="409:9" pos:end="409:19">av_dict_set</name><argument_list pos:start="409:20" pos:end="409:66">(<argument pos:start="409:21" pos:end="409:34"><expr pos:start="409:21" pos:end="409:34"><operator pos:start="409:21" pos:end="409:21">&amp;</operator><name pos:start="409:22" pos:end="409:34"><name pos:start="409:22" pos:end="409:24">ost</name><operator pos:start="409:25" pos:end="409:26">-&gt;</operator><name pos:start="409:27" pos:end="409:34">swr_opts</name></name></expr></argument>, <argument pos:start="409:37" pos:end="409:56"><expr pos:start="409:37" pos:end="409:56"><literal type="string" pos:start="409:37" pos:end="409:56">"output_sample_bits"</literal></expr></argument>, <argument pos:start="409:59" pos:end="409:62"><expr pos:start="409:59" pos:end="409:62"><literal type="string" pos:start="409:59" pos:end="409:62">"24"</literal></expr></argument>, <argument pos:start="409:65" pos:end="409:65"><expr pos:start="409:65" pos:end="409:65"><literal type="number" pos:start="409:65" pos:end="409:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="413:5" pos:end="413:62"><expr pos:start="413:5" pos:end="413:61"><call pos:start="413:5" pos:end="413:61"><name pos:start="413:5" pos:end="413:16">av_dict_copy</name><argument_list pos:start="413:17" pos:end="413:61">(<argument pos:start="413:18" pos:end="413:36"><expr pos:start="413:18" pos:end="413:36"><operator pos:start="413:18" pos:end="413:18">&amp;</operator><name pos:start="413:19" pos:end="413:36"><name pos:start="413:19" pos:end="413:21">ost</name><operator pos:start="413:22" pos:end="413:23">-&gt;</operator><name pos:start="413:24" pos:end="413:36">resample_opts</name></name></expr></argument>, <argument pos:start="413:39" pos:end="413:57"><expr pos:start="413:39" pos:end="413:57"><name pos:start="413:39" pos:end="413:57"><name pos:start="413:39" pos:end="413:39">o</name><operator pos:start="413:40" pos:end="413:41">-&gt;</operator><name pos:start="413:42" pos:end="413:42">g</name><operator pos:start="413:43" pos:end="413:44">-&gt;</operator><name pos:start="413:45" pos:end="413:57">resample_opts</name></name></expr></argument>, <argument pos:start="413:60" pos:end="413:60"><expr pos:start="413:60" pos:end="413:60"><literal type="number" pos:start="413:60" pos:end="413:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="417:5" pos:end="417:37"><expr pos:start="417:5" pos:end="417:36"><name pos:start="417:5" pos:end="417:21"><name pos:start="417:5" pos:end="417:7">ost</name><operator pos:start="417:8" pos:end="417:9">-&gt;</operator><name pos:start="417:10" pos:end="417:21">source_index</name></name> <operator pos:start="417:23" pos:end="417:23">=</operator> <name pos:start="417:25" pos:end="417:36">source_index</name></expr>;</expr_stmt>

    <if_stmt pos:start="419:5" pos:end="427:5"><if pos:start="419:5" pos:end="427:5">if <condition pos:start="419:8" pos:end="419:26">(<expr pos:start="419:9" pos:end="419:25"><name pos:start="419:9" pos:end="419:20">source_index</name> <operator pos:start="419:22" pos:end="419:23">&gt;=</operator> <literal type="number" pos:start="419:25" pos:end="419:25">0</literal></expr>)</condition> <block pos:start="419:28" pos:end="427:5">{<block_content pos:start="421:9" pos:end="425:97">

        <expr_stmt pos:start="421:9" pos:end="421:52"><expr pos:start="421:9" pos:end="421:51"><name pos:start="421:9" pos:end="421:21"><name pos:start="421:9" pos:end="421:11">ost</name><operator pos:start="421:12" pos:end="421:13">-&gt;</operator><name pos:start="421:14" pos:end="421:21">sync_ist</name></name> <operator pos:start="421:23" pos:end="421:23">=</operator> <name pos:start="421:25" pos:end="421:51"><name pos:start="421:25" pos:end="421:37">input_streams</name><index pos:start="421:38" pos:end="421:51">[<expr pos:start="421:39" pos:end="421:50"><name pos:start="421:39" pos:end="421:50">source_index</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:49"><expr pos:start="423:9" pos:end="423:48"><name pos:start="423:9" pos:end="423:35"><name pos:start="423:9" pos:end="423:21">input_streams</name><index pos:start="423:22" pos:end="423:35">[<expr pos:start="423:23" pos:end="423:34"><name pos:start="423:23" pos:end="423:34">source_index</name></expr>]</index></name><operator pos:start="423:36" pos:end="423:37">-&gt;</operator><name pos:start="423:38" pos:end="423:44">discard</name> <operator pos:start="423:46" pos:end="423:46">=</operator> <literal type="number" pos:start="423:48" pos:end="423:48">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:97"><expr pos:start="425:9" pos:end="425:96"><name pos:start="425:9" pos:end="425:35"><name pos:start="425:9" pos:end="425:21">input_streams</name><index pos:start="425:22" pos:end="425:35">[<expr pos:start="425:23" pos:end="425:34"><name pos:start="425:23" pos:end="425:34">source_index</name></expr>]</index></name><operator pos:start="425:36" pos:end="425:37">-&gt;</operator><name pos:start="425:38" pos:end="425:48"><name pos:start="425:38" pos:end="425:39">st</name><operator pos:start="425:40" pos:end="425:41">-&gt;</operator><name pos:start="425:42" pos:end="425:48">discard</name></name> <operator pos:start="425:50" pos:end="425:50">=</operator> <name pos:start="425:52" pos:end="425:78"><name pos:start="425:52" pos:end="425:64">input_streams</name><index pos:start="425:65" pos:end="425:78">[<expr pos:start="425:66" pos:end="425:77"><name pos:start="425:66" pos:end="425:77">source_index</name></expr>]</index></name><operator pos:start="425:79" pos:end="425:80">-&gt;</operator><name pos:start="425:81" pos:end="425:96">user_set_discard</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:39"><expr pos:start="429:5" pos:end="429:38"><name pos:start="429:5" pos:end="429:21"><name pos:start="429:5" pos:end="429:7">ost</name><operator pos:start="429:8" pos:end="429:9">-&gt;</operator><name pos:start="429:10" pos:end="429:21">last_mux_dts</name></name> <operator pos:start="429:23" pos:end="429:23">=</operator> <name pos:start="429:25" pos:end="429:38">AV_NOPTS_VALUE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="433:5" pos:end="433:60"><expr pos:start="433:5" pos:end="433:59"><name pos:start="433:5" pos:end="433:21"><name pos:start="433:5" pos:end="433:7">ost</name><operator pos:start="433:8" pos:end="433:9">-&gt;</operator><name pos:start="433:10" pos:end="433:21">muxing_queue</name></name> <operator pos:start="433:23" pos:end="433:23">=</operator> <call pos:start="433:25" pos:end="433:59"><name pos:start="433:25" pos:end="433:37">av_fifo_alloc</name><argument_list pos:start="433:38" pos:end="433:59">(<argument pos:start="433:39" pos:end="433:58"><expr pos:start="433:39" pos:end="433:58"><literal type="number" pos:start="433:39" pos:end="433:39">8</literal> <operator pos:start="433:41" pos:end="433:41">*</operator> <sizeof pos:start="433:43" pos:end="433:58">sizeof<argument_list pos:start="433:49" pos:end="433:58">(<argument pos:start="433:50" pos:end="433:57"><expr pos:start="433:50" pos:end="433:57"><name pos:start="433:50" pos:end="433:57">AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="435:5" pos:end="437:24"><if pos:start="435:5" pos:end="437:24">if <condition pos:start="435:8" pos:end="435:27">(<expr pos:start="435:9" pos:end="435:26"><operator pos:start="435:9" pos:end="435:9">!</operator><name pos:start="435:10" pos:end="435:26"><name pos:start="435:10" pos:end="435:12">ost</name><operator pos:start="435:13" pos:end="435:14">-&gt;</operator><name pos:start="435:15" pos:end="435:26">muxing_queue</name></name></expr>)</condition><block type="pseudo" pos:start="437:9" pos:end="437:24"><block_content pos:start="437:9" pos:end="437:24">

        <expr_stmt pos:start="437:9" pos:end="437:24"><expr pos:start="437:9" pos:end="437:23"><call pos:start="437:9" pos:end="437:23"><name pos:start="437:9" pos:end="437:20">exit_program</name><argument_list pos:start="437:21" pos:end="437:23">(<argument pos:start="437:22" pos:end="437:22"><expr pos:start="437:22" pos:end="437:22"><literal type="number" pos:start="437:22" pos:end="437:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="441:5" pos:end="441:15">return <expr pos:start="441:12" pos:end="441:14"><name pos:start="441:12" pos:end="441:14">ost</name></expr>;</return>

</block_content>}</block></function>
</unit>
