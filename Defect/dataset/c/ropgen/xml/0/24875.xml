<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24875.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:34"><name pos:start="1:1" pos:end="1:16">build_hash_table</name> <argument_list pos:start="1:18" pos:end="5:34">(<argument pos:start="1:19" pos:end="1:51">const sparc_opcode **opcode_table</argument>,

                  <argument pos:start="3:19" pos:end="3:48">sparc_opcode_hash **hash_table</argument>,

                  <argument pos:start="5:19" pos:end="5:33">int num_opcodes</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:3" pos:end="90:0">

  <decl_stmt pos:start="9:3" pos:end="9:8"><decl pos:start="9:3" pos:end="9:7"><type pos:start="9:3" pos:end="9:5"><name pos:start="9:3" pos:end="9:5">int</name></type> <name pos:start="9:7" pos:end="9:7">i</name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:28"><decl pos:start="11:3" pos:end="11:27"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type> <name pos:start="11:7" pos:end="11:27"><name pos:start="11:7" pos:end="11:16">hash_count</name><index pos:start="11:17" pos:end="11:27">[<expr pos:start="11:18" pos:end="11:26"><name pos:start="11:18" pos:end="11:26">HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="13:3" pos:end="13:44"><decl pos:start="13:3" pos:end="13:43"><type pos:start="13:3" pos:end="13:28"><specifier pos:start="13:3" pos:end="13:8">static</specifier> <name pos:start="13:10" pos:end="13:26">sparc_opcode_hash</name> <modifier pos:start="13:28" pos:end="13:28">*</modifier></type><name pos:start="13:29" pos:end="13:36">hash_buf</name> <init pos:start="13:38" pos:end="13:43">= <expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">NULL</name></expr></init></decl>;</decl_stmt>



  <comment type="block" pos:start="17:3" pos:end="19:25">/* Start at the end of the table and work backwards so that each

     chain is sorted.  */</comment>



  <expr_stmt pos:start="23:3" pos:end="23:61"><expr pos:start="23:3" pos:end="23:60"><call pos:start="23:3" pos:end="23:60"><name pos:start="23:3" pos:end="23:8">memset</name> <argument_list pos:start="23:10" pos:end="23:60">(<argument pos:start="23:11" pos:end="23:20"><expr pos:start="23:11" pos:end="23:20"><name pos:start="23:11" pos:end="23:20">hash_table</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:59"><expr pos:start="23:26" pos:end="23:59"><name pos:start="23:26" pos:end="23:34">HASH_SIZE</name> <operator pos:start="23:36" pos:end="23:36">*</operator> <sizeof pos:start="23:38" pos:end="23:59">sizeof <argument_list pos:start="23:45" pos:end="23:59">(<argument pos:start="23:46" pos:end="23:58"><expr pos:start="23:46" pos:end="23:58"><name pos:start="23:46" pos:end="23:58"><name pos:start="23:46" pos:end="23:55">hash_table</name><index pos:start="23:56" pos:end="23:58">[<expr pos:start="23:57" pos:end="23:57"><literal type="number" pos:start="23:57" pos:end="23:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="25:3" pos:end="25:61"><expr pos:start="25:3" pos:end="25:60"><call pos:start="25:3" pos:end="25:60"><name pos:start="25:3" pos:end="25:8">memset</name> <argument_list pos:start="25:10" pos:end="25:60">(<argument pos:start="25:11" pos:end="25:20"><expr pos:start="25:11" pos:end="25:20"><name pos:start="25:11" pos:end="25:20">hash_count</name></expr></argument>, <argument pos:start="25:23" pos:end="25:23"><expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr></argument>, <argument pos:start="25:26" pos:end="25:59"><expr pos:start="25:26" pos:end="25:59"><name pos:start="25:26" pos:end="25:34">HASH_SIZE</name> <operator pos:start="25:36" pos:end="25:36">*</operator> <sizeof pos:start="25:38" pos:end="25:59">sizeof <argument_list pos:start="25:45" pos:end="25:59">(<argument pos:start="25:46" pos:end="25:58"><expr pos:start="25:46" pos:end="25:58"><name pos:start="25:46" pos:end="25:58"><name pos:start="25:46" pos:end="25:55">hash_count</name><index pos:start="25:56" pos:end="25:58">[<expr pos:start="25:57" pos:end="25:57"><literal type="number" pos:start="25:57" pos:end="25:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt pos:start="27:3" pos:end="29:20"><if pos:start="27:3" pos:end="29:20">if <condition pos:start="27:6" pos:end="27:23">(<expr pos:start="27:7" pos:end="27:22"><name pos:start="27:7" pos:end="27:14">hash_buf</name> <operator pos:start="27:16" pos:end="27:17">!=</operator> <name pos:start="27:19" pos:end="27:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="29:5" pos:end="29:20"><block_content pos:start="29:5" pos:end="29:20">

    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><call pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:8">free</name> <argument_list pos:start="29:10" pos:end="29:19">(<argument pos:start="29:11" pos:end="29:18"><expr pos:start="29:11" pos:end="29:18"><name pos:start="29:11" pos:end="29:18">hash_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt pos:start="31:3" pos:end="31:56"><expr pos:start="31:3" pos:end="31:55"><name pos:start="31:3" pos:end="31:10">hash_buf</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:55"><name pos:start="31:14" pos:end="31:19">malloc</name> <argument_list pos:start="31:21" pos:end="31:55">(<argument pos:start="31:22" pos:end="31:54"><expr pos:start="31:22" pos:end="31:54"><sizeof pos:start="31:22" pos:end="31:40">sizeof <argument_list pos:start="31:29" pos:end="31:40">(<argument pos:start="31:30" pos:end="31:39"><expr pos:start="31:30" pos:end="31:39"><operator pos:start="31:30" pos:end="31:30">*</operator> <name pos:start="31:32" pos:end="31:39">hash_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:42" pos:end="31:42">*</operator> <name pos:start="31:44" pos:end="31:54">num_opcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for pos:start="33:3" pos:end="90:0">for <control pos:start="33:7" pos:end="33:40">(<init pos:start="33:8" pos:end="33:27"><expr pos:start="33:8" pos:end="33:26"><name pos:start="33:8" pos:end="33:8">i</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:22">num_opcodes</name> <operator pos:start="33:24" pos:end="33:24">-</operator> <literal type="number" pos:start="33:26" pos:end="33:26">1</literal></expr>;</init> <condition pos:start="33:29" pos:end="33:35"><expr pos:start="33:29" pos:end="33:34"><name pos:start="33:29" pos:end="33:29">i</name> <operator pos:start="33:31" pos:end="33:32">&gt;=</operator> <literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr>;</condition> <incr pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><operator pos:start="33:37" pos:end="33:38">--</operator><name pos:start="33:39" pos:end="33:39">i</name></expr></incr>)</control>

    <block pos:start="35:5" pos:end="90:0">{<block_content pos:start="37:7" pos:end="49:25">

      <decl_stmt pos:start="37:7" pos:end="37:52"><decl pos:start="37:7" pos:end="37:51"><type pos:start="37:7" pos:end="37:9"><name pos:start="37:7" pos:end="37:9">int</name></type> <name pos:start="37:11" pos:end="37:14">hash</name> <init pos:start="37:16" pos:end="37:51">= <expr pos:start="37:18" pos:end="37:51"><call pos:start="37:18" pos:end="37:51"><name pos:start="37:18" pos:end="37:26">HASH_INSN</name> <argument_list pos:start="37:28" pos:end="37:51">(<argument pos:start="37:29" pos:end="37:50"><expr pos:start="37:29" pos:end="37:50"><name pos:start="37:29" pos:end="37:43"><name pos:start="37:29" pos:end="37:40">opcode_table</name><index pos:start="37:41" pos:end="37:43">[<expr pos:start="37:42" pos:end="37:42"><name pos:start="37:42" pos:end="37:42">i</name></expr>]</index></name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:50">match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="39:7" pos:end="39:42"><decl pos:start="39:7" pos:end="39:41"><type pos:start="39:7" pos:end="39:25"><name pos:start="39:7" pos:end="39:23">sparc_opcode_hash</name> <modifier pos:start="39:25" pos:end="39:25">*</modifier></type><name pos:start="39:26" pos:end="39:26">h</name> <init pos:start="39:28" pos:end="39:41">= <expr pos:start="39:30" pos:end="39:41"><operator pos:start="39:30" pos:end="39:30">&amp;</operator><name pos:start="39:31" pos:end="39:41"><name pos:start="39:31" pos:end="39:38">hash_buf</name><index pos:start="39:39" pos:end="39:41">[<expr pos:start="39:40" pos:end="39:40"><name pos:start="39:40" pos:end="39:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



      <expr_stmt pos:start="43:7" pos:end="43:33"><expr pos:start="43:7" pos:end="43:32"><name pos:start="43:7" pos:end="43:13"><name pos:start="43:7" pos:end="43:7">h</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:13">next</name></name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:26">hash_table</name><index pos:start="43:27" pos:end="43:32">[<expr pos:start="43:28" pos:end="43:31"><name pos:start="43:28" pos:end="43:31">hash</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="45:7" pos:end="45:34"><expr pos:start="45:7" pos:end="45:33"><name pos:start="45:7" pos:end="45:15"><name pos:start="45:7" pos:end="45:7">h</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:15">opcode</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:33"><name pos:start="45:19" pos:end="45:30">opcode_table</name><index pos:start="45:31" pos:end="45:33">[<expr pos:start="45:32" pos:end="45:32"><name pos:start="45:32" pos:end="45:32">i</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="47:7" pos:end="47:27"><expr pos:start="47:7" pos:end="47:26"><name pos:start="47:7" pos:end="47:22"><name pos:start="47:7" pos:end="47:16">hash_table</name><index pos:start="47:17" pos:end="47:22">[<expr pos:start="47:18" pos:end="47:21"><name pos:start="47:18" pos:end="47:21">hash</name></expr>]</index></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:26">h</name></expr>;</expr_stmt>

      <expr_stmt pos:start="49:7" pos:end="49:25"><expr pos:start="49:7" pos:end="49:24"><operator pos:start="49:7" pos:end="49:8">++</operator><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:18">hash_count</name><index pos:start="49:19" pos:end="49:24">[<expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">hash</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:if pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:5"><literal type="number" pos:start="55:5" pos:end="55:5">0</literal></expr></cpp:if> <comment type="block" pos:start="55:7" pos:end="55:25">/* for debugging */</comment>

  {

    int min_count = num_opcodes, max_count = 0;

    int total;



    for (i = 0; i &lt; HASH_SIZE; ++i)

      {

        if (hash_count[i] &lt; min_count)

          min_count = hash_count[i];

        if (hash_count[i] &gt; max_count)

          max_count = hash_count[i];

        total += hash_count[i];

      }



    printf ("Opcode hash table stats: min %d, max %d, ave %f\n",

            min_count, max_count, (double) total / HASH_SIZE);

  }

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

</block_content>}</block>
</unit>
