<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22200.c" pos:tabs="8"><function pos:start="1:1" pos:end="275:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">qcow2_amend_options</name><parameter_list pos:start="1:31" pos:end="3:67">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:61">QemuOpts</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">opts</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:66"><decl pos:start="3:32" pos:end="3:66"><type pos:start="3:32" pos:end="3:66"><name pos:start="3:32" pos:end="3:55">BlockDriverAmendStatusCB</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:66">status_cb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="275:1">{<block_content pos:start="7:5" pos:end="273:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">old_version</name> <init pos:start="9:21" pos:end="9:37">= <expr pos:start="9:23" pos:end="9:37"><name pos:start="9:23" pos:end="9:37"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:37">qcow_version</name></name></expr></init></decl>, <decl pos:start="9:40" pos:end="9:64"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:50">new_version</name> <init pos:start="9:52" pos:end="9:64">= <expr pos:start="9:54" pos:end="9:64"><name pos:start="9:54" pos:end="9:64">old_version</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">new_size</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:60"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:28">backing_file</name> <init pos:start="13:30" pos:end="13:35">= <expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">NULL</name></expr></init></decl>, <decl pos:start="13:38" pos:end="13:59"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:38" pos:end="13:38">*</modifier></type><name pos:start="13:39" pos:end="13:52">backing_format</name> <init pos:start="13:54" pos:end="13:59">= <expr pos:start="13:56" pos:end="13:59"><name pos:start="13:56" pos:end="13:59">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:23">lazy_refcounts</name> <init pos:start="15:25" pos:end="15:47">= <expr pos:start="15:27" pos:end="15:47"><name pos:start="15:27" pos:end="15:47"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:47">use_lazy_refcounts</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">compat</name> <init pos:start="17:24" pos:end="17:29">= <expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:25">cluster_size</name> <init pos:start="19:27" pos:end="19:43">= <expr pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:43"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:43">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:16">encrypt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:40"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">QemuOptDesc</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:21">desc</name> <init pos:start="25:23" pos:end="25:40">= <expr pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:28">opts</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:34">list</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:40">desc</name></name></expr></init></decl>;</decl_stmt>



    <while pos:start="29:5" pos:end="143:5">while <condition pos:start="29:11" pos:end="29:30">(<expr pos:start="29:12" pos:end="29:29"><name pos:start="29:12" pos:end="29:15">desc</name> <operator pos:start="29:17" pos:end="29:18">&amp;&amp;</operator> <name pos:start="29:20" pos:end="29:29"><name pos:start="29:20" pos:end="29:23">desc</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:29">name</name></name></expr>)</condition> <block pos:start="29:32" pos:end="143:5">{<block_content pos:start="31:9" pos:end="141:15">

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:45">(<expr pos:start="31:13" pos:end="31:44"><operator pos:start="31:13" pos:end="31:13">!</operator><call pos:start="31:14" pos:end="31:44"><name pos:start="31:14" pos:end="31:26">qemu_opt_find</name><argument_list pos:start="31:27" pos:end="31:44">(<argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><name pos:start="31:28" pos:end="31:31">opts</name></expr></argument>, <argument pos:start="31:34" pos:end="31:43"><expr pos:start="31:34" pos:end="31:43"><name pos:start="31:34" pos:end="31:43"><name pos:start="31:34" pos:end="31:37">desc</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:43">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:47" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:21">

            <comment type="block" pos:start="33:13" pos:end="33:56">/* only change explicitly defined options */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:19"><expr pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:16">desc</name><operator pos:start="35:17" pos:end="35:18">++</operator></expr>;</expr_stmt>

            <continue pos:start="37:13" pos:end="37:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="43:9" pos:end="137:9"><if pos:start="43:9" pos:end="67:9">if <condition pos:start="43:12" pos:end="43:56">(<expr pos:start="43:13" pos:end="43:55"><operator pos:start="43:13" pos:end="43:13">!</operator><call pos:start="43:14" pos:end="43:55"><name pos:start="43:14" pos:end="43:19">strcmp</name><argument_list pos:start="43:20" pos:end="43:55">(<argument pos:start="43:21" pos:end="43:30"><expr pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:24">desc</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:30">name</name></name></expr></argument>, <argument pos:start="43:33" pos:end="43:54"><expr pos:start="43:33" pos:end="43:54"><name pos:start="43:33" pos:end="43:54">BLOCK_OPT_COMPAT_LEVEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:58" pos:end="67:9">{<block_content pos:start="45:13" pos:end="65:13">

            <expr_stmt pos:start="45:13" pos:end="45:64"><expr pos:start="45:13" pos:end="45:63"><name pos:start="45:13" pos:end="45:18">compat</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:63"><name pos:start="45:22" pos:end="45:33">qemu_opt_get</name><argument_list pos:start="45:34" pos:end="45:63">(<argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><name pos:start="45:35" pos:end="45:38">opts</name></expr></argument>, <argument pos:start="45:41" pos:end="45:62"><expr pos:start="45:41" pos:end="45:62"><name pos:start="45:41" pos:end="45:62">BLOCK_OPT_COMPAT_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="65:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:24">(<expr pos:start="47:17" pos:end="47:23"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:23">compat</name></expr>)</condition> <block pos:start="47:26" pos:end="51:13">{<block_content>

                <comment type="block" pos:start="49:17" pos:end="49:38">/* preserve default */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="51:15" pos:end="55:13">else if <condition pos:start="51:23" pos:end="51:47">(<expr pos:start="51:24" pos:end="51:46"><operator pos:start="51:24" pos:end="51:24">!</operator><call pos:start="51:25" pos:end="51:46"><name pos:start="51:25" pos:end="51:30">strcmp</name><argument_list pos:start="51:31" pos:end="51:46">(<argument pos:start="51:32" pos:end="51:37"><expr pos:start="51:32" pos:end="51:37"><name pos:start="51:32" pos:end="51:37">compat</name></expr></argument>, <argument pos:start="51:40" pos:end="51:45"><expr pos:start="51:40" pos:end="51:45"><literal type="string" pos:start="51:40" pos:end="51:45">"0.10"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:49" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:32">

                <expr_stmt pos:start="53:17" pos:end="53:32"><expr pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:27">new_version</name> <operator pos:start="53:29" pos:end="53:29">=</operator> <literal type="number" pos:start="53:31" pos:end="53:31">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="55:15" pos:end="59:13">else if <condition pos:start="55:23" pos:end="55:46">(<expr pos:start="55:24" pos:end="55:45"><operator pos:start="55:24" pos:end="55:24">!</operator><call pos:start="55:25" pos:end="55:45"><name pos:start="55:25" pos:end="55:30">strcmp</name><argument_list pos:start="55:31" pos:end="55:45">(<argument pos:start="55:32" pos:end="55:37"><expr pos:start="55:32" pos:end="55:37"><name pos:start="55:32" pos:end="55:37">compat</name></expr></argument>, <argument pos:start="55:40" pos:end="55:44"><expr pos:start="55:40" pos:end="55:44"><literal type="string" pos:start="55:40" pos:end="55:44">"1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:48" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:32">

                <expr_stmt pos:start="57:17" pos:end="57:32"><expr pos:start="57:17" pos:end="57:31"><name pos:start="57:17" pos:end="57:27">new_version</name> <operator pos:start="57:29" pos:end="57:29">=</operator> <literal type="number" pos:start="57:31" pos:end="57:31">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="59:15" pos:end="65:13">else <block pos:start="59:20" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:31">

                <expr_stmt pos:start="61:17" pos:end="61:77"><expr pos:start="61:17" pos:end="61:76"><call pos:start="61:17" pos:end="61:76"><name pos:start="61:17" pos:end="61:23">fprintf</name><argument_list pos:start="61:24" pos:end="61:76">(<argument pos:start="61:25" pos:end="61:30"><expr pos:start="61:25" pos:end="61:30"><name pos:start="61:25" pos:end="61:30">stderr</name></expr></argument>, <argument pos:start="61:33" pos:end="61:67"><expr pos:start="61:33" pos:end="61:67"><literal type="string" pos:start="61:33" pos:end="61:67">"Unknown compatibility level %s.\n"</literal></expr></argument>, <argument pos:start="61:70" pos:end="61:75"><expr pos:start="61:70" pos:end="61:75"><name pos:start="61:70" pos:end="61:75">compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="63:17" pos:end="63:31">return <expr pos:start="63:24" pos:end="63:30"><operator pos:start="63:24" pos:end="63:24">-</operator><name pos:start="63:25" pos:end="63:30">EINVAL</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="67:11" pos:end="73:9">else if <condition pos:start="67:19" pos:end="67:59">(<expr pos:start="67:20" pos:end="67:58"><operator pos:start="67:20" pos:end="67:20">!</operator><call pos:start="67:21" pos:end="67:58"><name pos:start="67:21" pos:end="67:26">strcmp</name><argument_list pos:start="67:27" pos:end="67:58">(<argument pos:start="67:28" pos:end="67:37"><expr pos:start="67:28" pos:end="67:37"><name pos:start="67:28" pos:end="67:37"><name pos:start="67:28" pos:end="67:31">desc</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:37">name</name></name></expr></argument>, <argument pos:start="67:40" pos:end="67:57"><expr pos:start="67:40" pos:end="67:57"><name pos:start="67:40" pos:end="67:57">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:61" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:28">

            <expr_stmt pos:start="69:13" pos:end="69:67"><expr pos:start="69:13" pos:end="69:66"><call pos:start="69:13" pos:end="69:66"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="69:66">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:65"><expr pos:start="69:29" pos:end="69:65"><literal type="string" pos:start="69:29" pos:end="69:65">"Cannot change preallocation mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:28">return <expr pos:start="71:20" pos:end="71:27"><operator pos:start="71:20" pos:end="71:20">-</operator><name pos:start="71:21" pos:end="71:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="73:11" pos:end="77:9">else if <condition pos:start="73:19" pos:end="73:55">(<expr pos:start="73:20" pos:end="73:54"><operator pos:start="73:20" pos:end="73:20">!</operator><call pos:start="73:21" pos:end="73:54"><name pos:start="73:21" pos:end="73:26">strcmp</name><argument_list pos:start="73:27" pos:end="73:54">(<argument pos:start="73:28" pos:end="73:37"><expr pos:start="73:28" pos:end="73:37"><name pos:start="73:28" pos:end="73:37"><name pos:start="73:28" pos:end="73:31">desc</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:37">name</name></name></expr></argument>, <argument pos:start="73:40" pos:end="73:53"><expr pos:start="73:40" pos:end="73:53"><name pos:start="73:40" pos:end="73:53">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:57" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:66">

            <expr_stmt pos:start="75:13" pos:end="75:66"><expr pos:start="75:13" pos:end="75:65"><name pos:start="75:13" pos:end="75:20">new_size</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:65"><name pos:start="75:24" pos:end="75:40">qemu_opt_get_size</name><argument_list pos:start="75:41" pos:end="75:65">(<argument pos:start="75:42" pos:end="75:45"><expr pos:start="75:42" pos:end="75:45"><name pos:start="75:42" pos:end="75:45">opts</name></expr></argument>, <argument pos:start="75:48" pos:end="75:61"><expr pos:start="75:48" pos:end="75:61"><name pos:start="75:48" pos:end="75:61">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="75:64" pos:end="75:64"><expr pos:start="75:64" pos:end="75:64"><literal type="number" pos:start="75:64" pos:end="75:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="77:11" pos:end="81:9">else if <condition pos:start="77:19" pos:end="77:63">(<expr pos:start="77:20" pos:end="77:62"><operator pos:start="77:20" pos:end="77:20">!</operator><call pos:start="77:21" pos:end="77:62"><name pos:start="77:21" pos:end="77:26">strcmp</name><argument_list pos:start="77:27" pos:end="77:62">(<argument pos:start="77:28" pos:end="77:37"><expr pos:start="77:28" pos:end="77:37"><name pos:start="77:28" pos:end="77:37"><name pos:start="77:28" pos:end="77:31">desc</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:37">name</name></name></expr></argument>, <argument pos:start="77:40" pos:end="77:61"><expr pos:start="77:40" pos:end="77:61"><name pos:start="77:40" pos:end="77:61">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:65" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:70">

            <expr_stmt pos:start="79:13" pos:end="79:70"><expr pos:start="79:13" pos:end="79:69"><name pos:start="79:13" pos:end="79:24">backing_file</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <call pos:start="79:28" pos:end="79:69"><name pos:start="79:28" pos:end="79:39">qemu_opt_get</name><argument_list pos:start="79:40" pos:end="79:69">(<argument pos:start="79:41" pos:end="79:44"><expr pos:start="79:41" pos:end="79:44"><name pos:start="79:41" pos:end="79:44">opts</name></expr></argument>, <argument pos:start="79:47" pos:end="79:68"><expr pos:start="79:47" pos:end="79:68"><name pos:start="79:47" pos:end="79:68">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="81:11" pos:end="85:9">else if <condition pos:start="81:19" pos:end="81:62">(<expr pos:start="81:20" pos:end="81:61"><operator pos:start="81:20" pos:end="81:20">!</operator><call pos:start="81:21" pos:end="81:61"><name pos:start="81:21" pos:end="81:26">strcmp</name><argument_list pos:start="81:27" pos:end="81:61">(<argument pos:start="81:28" pos:end="81:37"><expr pos:start="81:28" pos:end="81:37"><name pos:start="81:28" pos:end="81:37"><name pos:start="81:28" pos:end="81:31">desc</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:37">name</name></name></expr></argument>, <argument pos:start="81:40" pos:end="81:60"><expr pos:start="81:40" pos:end="81:60"><name pos:start="81:40" pos:end="81:60">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:64" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:71">

            <expr_stmt pos:start="83:13" pos:end="83:71"><expr pos:start="83:13" pos:end="83:70"><name pos:start="83:13" pos:end="83:26">backing_format</name> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:70"><name pos:start="83:30" pos:end="83:41">qemu_opt_get</name><argument_list pos:start="83:42" pos:end="83:70">(<argument pos:start="83:43" pos:end="83:46"><expr pos:start="83:43" pos:end="83:46"><name pos:start="83:43" pos:end="83:46">opts</name></expr></argument>, <argument pos:start="83:49" pos:end="83:69"><expr pos:start="83:49" pos:end="83:69"><name pos:start="83:49" pos:end="83:69">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="101:9">else if <condition pos:start="85:19" pos:end="85:58">(<expr pos:start="85:20" pos:end="85:57"><operator pos:start="85:20" pos:end="85:20">!</operator><call pos:start="85:21" pos:end="85:57"><name pos:start="85:21" pos:end="85:26">strcmp</name><argument_list pos:start="85:27" pos:end="85:57">(<argument pos:start="85:28" pos:end="85:37"><expr pos:start="85:28" pos:end="85:37"><name pos:start="85:28" pos:end="85:37"><name pos:start="85:28" pos:end="85:31">desc</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:37">name</name></name></expr></argument>, <argument pos:start="85:40" pos:end="85:56"><expr pos:start="85:40" pos:end="85:56"><name pos:start="85:40" pos:end="85:56">BLOCK_OPT_ENCRYPT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:60" pos:end="101:9">{<block_content pos:start="87:13" pos:end="99:13">

            <expr_stmt pos:start="87:13" pos:end="89:57"><expr pos:start="87:13" pos:end="89:56"><name pos:start="87:13" pos:end="87:19">encrypt</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="89:56"><name pos:start="87:23" pos:end="87:39">qemu_opt_get_bool</name><argument_list pos:start="87:40" pos:end="89:56">(<argument pos:start="87:41" pos:end="87:44"><expr pos:start="87:41" pos:end="87:44"><name pos:start="87:41" pos:end="87:44">opts</name></expr></argument>, <argument pos:start="87:47" pos:end="87:63"><expr pos:start="87:47" pos:end="87:63"><name pos:start="87:47" pos:end="87:63">BLOCK_OPT_ENCRYPT</name></expr></argument>,

                                        <argument pos:start="89:41" pos:end="89:55"><expr pos:start="89:41" pos:end="89:55"><name pos:start="89:41" pos:end="89:55"><name pos:start="89:41" pos:end="89:41">s</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:55">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="99:13"><if pos:start="91:13" pos:end="99:13">if <condition pos:start="91:16" pos:end="91:45">(<expr pos:start="91:17" pos:end="91:44"><name pos:start="91:17" pos:end="91:23">encrypt</name> <operator pos:start="91:25" pos:end="91:26">!=</operator> <operator pos:start="91:28" pos:end="91:28">!</operator><operator pos:start="91:29" pos:end="91:29">!</operator><name pos:start="91:30" pos:end="91:44"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:44">crypt_method</name></name></expr>)</condition> <block pos:start="91:47" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:32">

                <expr_stmt pos:start="93:17" pos:end="95:40"><expr pos:start="93:17" pos:end="95:39"><call pos:start="93:17" pos:end="95:39"><name pos:start="93:17" pos:end="93:23">fprintf</name><argument_list pos:start="93:24" pos:end="95:39">(<argument pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:30">stderr</name></expr></argument>, <argument pos:start="93:33" pos:end="95:38"><expr pos:start="93:33" pos:end="95:38"><literal type="string" pos:start="93:33" pos:end="93:70">"Changing the encryption flag is not "</literal>

                        <literal type="string" pos:start="95:25" pos:end="95:38">"supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="97:17" pos:end="97:32">return <expr pos:start="97:24" pos:end="97:31"><operator pos:start="97:24" pos:end="97:24">-</operator><name pos:start="97:25" pos:end="97:31">ENOTSUP</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="101:11" pos:end="117:9">else if <condition pos:start="101:19" pos:end="101:63">(<expr pos:start="101:20" pos:end="101:62"><operator pos:start="101:20" pos:end="101:20">!</operator><call pos:start="101:21" pos:end="101:62"><name pos:start="101:21" pos:end="101:26">strcmp</name><argument_list pos:start="101:27" pos:end="101:62">(<argument pos:start="101:28" pos:end="101:37"><expr pos:start="101:28" pos:end="101:37"><name pos:start="101:28" pos:end="101:37"><name pos:start="101:28" pos:end="101:31">desc</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:37">name</name></name></expr></argument>, <argument pos:start="101:40" pos:end="101:61"><expr pos:start="101:40" pos:end="101:61"><name pos:start="101:40" pos:end="101:61">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:65" pos:end="117:9">{<block_content pos:start="103:13" pos:end="115:13">

            <expr_stmt pos:start="103:13" pos:end="105:59"><expr pos:start="103:13" pos:end="105:58"><name pos:start="103:13" pos:end="103:24">cluster_size</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <call pos:start="103:28" pos:end="105:58"><name pos:start="103:28" pos:end="103:44">qemu_opt_get_size</name><argument_list pos:start="103:45" pos:end="105:58">(<argument pos:start="103:46" pos:end="103:49"><expr pos:start="103:46" pos:end="103:49"><name pos:start="103:46" pos:end="103:49">opts</name></expr></argument>, <argument pos:start="103:52" pos:end="103:73"><expr pos:start="103:52" pos:end="103:73"><name pos:start="103:52" pos:end="103:73">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>,

                                             <argument pos:start="105:46" pos:end="105:57"><expr pos:start="105:46" pos:end="105:57"><name pos:start="105:46" pos:end="105:57">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:48">(<expr pos:start="107:17" pos:end="107:47"><name pos:start="107:17" pos:end="107:28">cluster_size</name> <operator pos:start="107:30" pos:end="107:31">!=</operator> <name pos:start="107:33" pos:end="107:47"><name pos:start="107:33" pos:end="107:33">s</name><operator pos:start="107:34" pos:end="107:35">-&gt;</operator><name pos:start="107:36" pos:end="107:47">cluster_size</name></name></expr>)</condition> <block pos:start="107:50" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:32">

                <expr_stmt pos:start="109:17" pos:end="111:40"><expr pos:start="109:17" pos:end="111:39"><call pos:start="109:17" pos:end="111:39"><name pos:start="109:17" pos:end="109:23">fprintf</name><argument_list pos:start="109:24" pos:end="111:39">(<argument pos:start="109:25" pos:end="109:30"><expr pos:start="109:25" pos:end="109:30"><name pos:start="109:25" pos:end="109:30">stderr</name></expr></argument>, <argument pos:start="109:33" pos:end="111:38"><expr pos:start="109:33" pos:end="111:38"><literal type="string" pos:start="109:33" pos:end="109:67">"Changing the cluster size is not "</literal>

                        <literal type="string" pos:start="111:25" pos:end="111:38">"supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="113:17" pos:end="113:32">return <expr pos:start="113:24" pos:end="113:31"><operator pos:start="113:24" pos:end="113:24">-</operator><name pos:start="113:25" pos:end="113:31">ENOTSUP</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="123:9">else if <condition pos:start="117:19" pos:end="117:65">(<expr pos:start="117:20" pos:end="117:64"><operator pos:start="117:20" pos:end="117:20">!</operator><call pos:start="117:21" pos:end="117:64"><name pos:start="117:21" pos:end="117:26">strcmp</name><argument_list pos:start="117:27" pos:end="117:64">(<argument pos:start="117:28" pos:end="117:37"><expr pos:start="117:28" pos:end="117:37"><name pos:start="117:28" pos:end="117:37"><name pos:start="117:28" pos:end="117:31">desc</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:37">name</name></name></expr></argument>, <argument pos:start="117:40" pos:end="117:63"><expr pos:start="117:40" pos:end="117:63"><name pos:start="117:40" pos:end="117:63">BLOCK_OPT_LAZY_REFCOUNTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:67" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:63">

            <expr_stmt pos:start="119:13" pos:end="121:63"><expr pos:start="119:13" pos:end="121:62"><name pos:start="119:13" pos:end="119:26">lazy_refcounts</name> <operator pos:start="119:28" pos:end="119:28">=</operator> <call pos:start="119:30" pos:end="121:62"><name pos:start="119:30" pos:end="119:46">qemu_opt_get_bool</name><argument_list pos:start="119:47" pos:end="121:62">(<argument pos:start="119:48" pos:end="119:51"><expr pos:start="119:48" pos:end="119:51"><name pos:start="119:48" pos:end="119:51">opts</name></expr></argument>, <argument pos:start="119:54" pos:end="119:77"><expr pos:start="119:54" pos:end="119:77"><name pos:start="119:54" pos:end="119:77">BLOCK_OPT_LAZY_REFCOUNTS</name></expr></argument>,

                                               <argument pos:start="121:48" pos:end="121:61"><expr pos:start="121:48" pos:end="121:61"><name pos:start="121:48" pos:end="121:61">lazy_refcounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="129:9">else if <condition pos:start="123:19" pos:end="123:64">(<expr pos:start="123:20" pos:end="123:63"><operator pos:start="123:20" pos:end="123:20">!</operator><call pos:start="123:21" pos:end="123:63"><name pos:start="123:21" pos:end="123:26">strcmp</name><argument_list pos:start="123:27" pos:end="123:63">(<argument pos:start="123:28" pos:end="123:37"><expr pos:start="123:28" pos:end="123:37"><name pos:start="123:28" pos:end="123:37"><name pos:start="123:28" pos:end="123:31">desc</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:37">name</name></name></expr></argument>, <argument pos:start="123:40" pos:end="123:62"><expr pos:start="123:40" pos:end="123:62"><name pos:start="123:40" pos:end="123:62">BLOCK_OPT_REFCOUNT_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:66" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:28">

            <expr_stmt pos:start="125:13" pos:end="125:63"><expr pos:start="125:13" pos:end="125:62"><call pos:start="125:13" pos:end="125:62"><name pos:start="125:13" pos:end="125:24">error_report</name><argument_list pos:start="125:25" pos:end="125:62">(<argument pos:start="125:26" pos:end="125:61"><expr pos:start="125:26" pos:end="125:61"><literal type="string" pos:start="125:26" pos:end="125:61">"Cannot change refcount entry width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:28">return <expr pos:start="127:20" pos:end="127:27"><operator pos:start="127:20" pos:end="127:20">-</operator><name pos:start="127:21" pos:end="127:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="137:9">else <block pos:start="129:16" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:26">

            <comment type="block" pos:start="131:13" pos:end="133:54">/* if this assertion fails, this probably means a new option was

             * added without having it covered here */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:26"><expr pos:start="135:13" pos:end="135:25"><call pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:18">assert</name><argument_list pos:start="135:19" pos:end="135:25">(<argument pos:start="135:20" pos:end="135:24"><expr pos:start="135:20" pos:end="135:24"><name pos:start="135:20" pos:end="135:24">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:15"><expr pos:start="141:9" pos:end="141:14"><name pos:start="141:9" pos:end="141:12">desc</name><operator pos:start="141:13" pos:end="141:14">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="147:5" pos:end="177:5"><if pos:start="147:5" pos:end="177:5">if <condition pos:start="147:8" pos:end="147:35">(<expr pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:19">new_version</name> <operator pos:start="147:21" pos:end="147:22">!=</operator> <name pos:start="147:24" pos:end="147:34">old_version</name></expr>)</condition> <block pos:start="147:37" pos:end="177:5">{<block_content pos:start="149:9" pos:end="175:9">

        <if_stmt pos:start="149:9" pos:end="175:9"><if pos:start="149:9" pos:end="165:9">if <condition pos:start="149:12" pos:end="149:38">(<expr pos:start="149:13" pos:end="149:37"><name pos:start="149:13" pos:end="149:23">new_version</name> <operator pos:start="149:25" pos:end="149:25">&gt;</operator> <name pos:start="149:27" pos:end="149:37">old_version</name></expr>)</condition> <block pos:start="149:40" pos:end="165:9">{<block_content pos:start="153:13" pos:end="163:13">

            <comment type="block" pos:start="151:13" pos:end="151:25">/* Upgrade */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:42"><expr pos:start="153:13" pos:end="153:41"><name pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:27">qcow_version</name></name> <operator pos:start="153:29" pos:end="153:29">=</operator> <name pos:start="153:31" pos:end="153:41">new_version</name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:42"><expr pos:start="155:13" pos:end="155:41"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:41"><name pos:start="155:19" pos:end="155:37">qcow2_update_header</name><argument_list pos:start="155:38" pos:end="155:41">(<argument pos:start="155:39" pos:end="155:40"><expr pos:start="155:39" pos:end="155:40"><name pos:start="155:39" pos:end="155:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="163:13"><if pos:start="157:13" pos:end="163:13">if <condition pos:start="157:16" pos:end="157:24">(<expr pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:19">ret</name> <operator pos:start="157:21" pos:end="157:21">&lt;</operator> <literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>)</condition> <block pos:start="157:26" pos:end="163:13">{<block_content pos:start="159:17" pos:end="161:27">

                <expr_stmt pos:start="159:17" pos:end="159:46"><expr pos:start="159:17" pos:end="159:45"><name pos:start="159:17" pos:end="159:31"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:31">qcow_version</name></name> <operator pos:start="159:33" pos:end="159:33">=</operator> <name pos:start="159:35" pos:end="159:45">old_version</name></expr>;</expr_stmt>

                <return pos:start="161:17" pos:end="161:27">return <expr pos:start="161:24" pos:end="161:26"><name pos:start="161:24" pos:end="161:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="165:11" pos:end="175:9">else <block pos:start="165:16" pos:end="175:9">{<block_content pos:start="167:13" pos:end="173:13">

            <expr_stmt pos:start="167:13" pos:end="167:62"><expr pos:start="167:13" pos:end="167:61"><name pos:start="167:13" pos:end="167:15">ret</name> <operator pos:start="167:17" pos:end="167:17">=</operator> <call pos:start="167:19" pos:end="167:61"><name pos:start="167:19" pos:end="167:33">qcow2_downgrade</name><argument_list pos:start="167:34" pos:end="167:61">(<argument pos:start="167:35" pos:end="167:36"><expr pos:start="167:35" pos:end="167:36"><name pos:start="167:35" pos:end="167:36">bs</name></expr></argument>, <argument pos:start="167:39" pos:end="167:49"><expr pos:start="167:39" pos:end="167:49"><name pos:start="167:39" pos:end="167:49">new_version</name></expr></argument>, <argument pos:start="167:52" pos:end="167:60"><expr pos:start="167:52" pos:end="167:60"><name pos:start="167:52" pos:end="167:60">status_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="173:13"><if pos:start="169:13" pos:end="173:13">if <condition pos:start="169:16" pos:end="169:24">(<expr pos:start="169:17" pos:end="169:23"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">&lt;</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>)</condition> <block pos:start="169:26" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:27">

                <return pos:start="171:17" pos:end="171:27">return <expr pos:start="171:24" pos:end="171:26"><name pos:start="171:24" pos:end="171:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="193:5"><if pos:start="181:5" pos:end="193:5">if <condition pos:start="181:8" pos:end="181:39">(<expr pos:start="181:9" pos:end="181:38"><name pos:start="181:9" pos:end="181:20">backing_file</name> <operator pos:start="181:22" pos:end="181:23">||</operator> <name pos:start="181:25" pos:end="181:38">backing_format</name></expr>)</condition> <block pos:start="181:41" pos:end="193:5">{<block_content pos:start="183:9" pos:end="191:9">

        <expr_stmt pos:start="183:9" pos:end="185:78"><expr pos:start="183:9" pos:end="185:77"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="185:77"><name pos:start="183:15" pos:end="183:39">qcow2_change_backing_file</name><argument_list pos:start="183:40" pos:end="185:77">(<argument pos:start="183:41" pos:end="183:42"><expr pos:start="183:41" pos:end="183:42"><name pos:start="183:41" pos:end="183:42">bs</name></expr></argument>, <argument pos:start="183:45" pos:end="183:76"><expr pos:start="183:45" pos:end="183:76"><ternary pos:start="183:45" pos:end="183:76"><condition pos:start="183:45" pos:end="183:58"><expr pos:start="183:45" pos:end="183:56"><name pos:start="183:45" pos:end="183:56">backing_file</name></expr> ?</condition><then/><else pos:start="183:59" pos:end="183:76">: <expr pos:start="183:61" pos:end="183:76"><name pos:start="183:61" pos:end="183:76"><name pos:start="183:61" pos:end="183:62">bs</name><operator pos:start="183:63" pos:end="183:64">-&gt;</operator><name pos:start="183:65" pos:end="183:76">backing_file</name></name></expr></else></ternary></expr></argument>,

                                        <argument pos:start="185:41" pos:end="185:76"><expr pos:start="185:41" pos:end="185:76"><ternary pos:start="185:41" pos:end="185:76"><condition pos:start="185:41" pos:end="185:56"><expr pos:start="185:41" pos:end="185:54"><name pos:start="185:41" pos:end="185:54">backing_format</name></expr> ?</condition><then/><else pos:start="185:57" pos:end="185:76">: <expr pos:start="185:59" pos:end="185:76"><name pos:start="185:59" pos:end="185:76"><name pos:start="185:59" pos:end="185:60">bs</name><operator pos:start="185:61" pos:end="185:62">-&gt;</operator><name pos:start="185:63" pos:end="185:76">backing_format</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:20">(<expr pos:start="187:13" pos:end="187:19"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">&lt;</operator> <literal type="number" pos:start="187:19" pos:end="187:19">0</literal></expr>)</condition> <block pos:start="187:22" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:23">

            <return pos:start="189:13" pos:end="189:23">return <expr pos:start="189:20" pos:end="189:22"><name pos:start="189:20" pos:end="189:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="197:5" pos:end="255:5"><if pos:start="197:5" pos:end="255:5">if <condition pos:start="197:8" pos:end="197:48">(<expr pos:start="197:9" pos:end="197:47"><name pos:start="197:9" pos:end="197:29"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:29">use_lazy_refcounts</name></name> <operator pos:start="197:31" pos:end="197:32">!=</operator> <name pos:start="197:34" pos:end="197:47">lazy_refcounts</name></expr>)</condition> <block pos:start="197:50" pos:end="255:5">{<block_content pos:start="199:9" pos:end="253:9">

        <if_stmt pos:start="199:9" pos:end="253:9"><if pos:start="199:9" pos:end="225:9">if <condition pos:start="199:12" pos:end="199:27">(<expr pos:start="199:13" pos:end="199:26"><name pos:start="199:13" pos:end="199:26">lazy_refcounts</name></expr>)</condition> <block pos:start="199:29" pos:end="225:9">{<block_content pos:start="201:13" pos:end="223:41">

            <if_stmt pos:start="201:13" pos:end="209:13"><if pos:start="201:13" pos:end="209:13">if <condition pos:start="201:16" pos:end="201:36">(<expr pos:start="201:17" pos:end="201:35"><name pos:start="201:17" pos:end="201:31"><name pos:start="201:17" pos:end="201:17">s</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:31">qcow_version</name></name> <operator pos:start="201:33" pos:end="201:33">&lt;</operator> <literal type="number" pos:start="201:35" pos:end="201:35">3</literal></expr>)</condition> <block pos:start="201:38" pos:end="209:13">{<block_content pos:start="203:17" pos:end="207:31">

                <expr_stmt pos:start="203:17" pos:end="205:77"><expr pos:start="203:17" pos:end="205:76"><call pos:start="203:17" pos:end="205:76"><name pos:start="203:17" pos:end="203:23">fprintf</name><argument_list pos:start="203:24" pos:end="205:76">(<argument pos:start="203:25" pos:end="203:30"><expr pos:start="203:25" pos:end="203:30"><name pos:start="203:25" pos:end="203:30">stderr</name></expr></argument>, <argument pos:start="203:33" pos:end="205:75"><expr pos:start="203:33" pos:end="205:75"><literal type="string" pos:start="203:33" pos:end="203:83">"Lazy refcounts only supported with compatibility "</literal>

                        <literal type="string" pos:start="205:25" pos:end="205:75">"level 1.1 and above (use compat=1.1 or greater)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="207:17" pos:end="207:31">return <expr pos:start="207:24" pos:end="207:30"><operator pos:start="207:24" pos:end="207:24">-</operator><name pos:start="207:25" pos:end="207:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:66"><expr pos:start="211:13" pos:end="211:65"><name pos:start="211:13" pos:end="211:34"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:34">compatible_features</name></name> <operator pos:start="211:36" pos:end="211:37">|=</operator> <name pos:start="211:39" pos:end="211:65">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:42"><expr pos:start="213:13" pos:end="213:41"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <call pos:start="213:19" pos:end="213:41"><name pos:start="213:19" pos:end="213:37">qcow2_update_header</name><argument_list pos:start="213:38" pos:end="213:41">(<argument pos:start="213:39" pos:end="213:40"><expr pos:start="213:39" pos:end="213:40"><name pos:start="213:39" pos:end="213:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="221:13"><if pos:start="215:13" pos:end="221:13">if <condition pos:start="215:16" pos:end="215:24">(<expr pos:start="215:17" pos:end="215:23"><name pos:start="215:17" pos:end="215:19">ret</name> <operator pos:start="215:21" pos:end="215:21">&lt;</operator> <literal type="number" pos:start="215:23" pos:end="215:23">0</literal></expr>)</condition> <block pos:start="215:26" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:27">

                <expr_stmt pos:start="217:17" pos:end="217:71"><expr pos:start="217:17" pos:end="217:70"><name pos:start="217:17" pos:end="217:38"><name pos:start="217:17" pos:end="217:17">s</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:38">compatible_features</name></name> <operator pos:start="217:40" pos:end="217:41">&amp;=</operator> <operator pos:start="217:43" pos:end="217:43">~</operator><name pos:start="217:44" pos:end="217:70">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

                <return pos:start="219:17" pos:end="219:27">return <expr pos:start="219:24" pos:end="219:26"><name pos:start="219:24" pos:end="219:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:41"><expr pos:start="223:13" pos:end="223:40"><name pos:start="223:13" pos:end="223:33"><name pos:start="223:13" pos:end="223:13">s</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:33">use_lazy_refcounts</name></name> <operator pos:start="223:35" pos:end="223:35">=</operator> <name pos:start="223:37" pos:end="223:40">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="225:11" pos:end="253:9">else <block pos:start="225:16" pos:end="253:9">{<block_content pos:start="229:13" pos:end="251:42">

            <comment type="block" pos:start="227:13" pos:end="227:40">/* make image clean first */</comment>

            <expr_stmt pos:start="229:13" pos:end="229:39"><expr pos:start="229:13" pos:end="229:38"><name pos:start="229:13" pos:end="229:15">ret</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:38"><name pos:start="229:19" pos:end="229:34">qcow2_mark_clean</name><argument_list pos:start="229:35" pos:end="229:38">(<argument pos:start="229:36" pos:end="229:37"><expr pos:start="229:36" pos:end="229:37"><name pos:start="229:36" pos:end="229:37">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="235:13"><if pos:start="231:13" pos:end="235:13">if <condition pos:start="231:16" pos:end="231:24">(<expr pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:19">ret</name> <operator pos:start="231:21" pos:end="231:21">&lt;</operator> <literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>)</condition> <block pos:start="231:26" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:27">

                <return pos:start="233:17" pos:end="233:27">return <expr pos:start="233:24" pos:end="233:26"><name pos:start="233:24" pos:end="233:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="237:13" pos:end="237:45">/* now disallow lazy refcounts */</comment>

            <expr_stmt pos:start="239:13" pos:end="239:67"><expr pos:start="239:13" pos:end="239:66"><name pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:34">compatible_features</name></name> <operator pos:start="239:36" pos:end="239:37">&amp;=</operator> <operator pos:start="239:39" pos:end="239:39">~</operator><name pos:start="239:40" pos:end="239:66">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:42"><expr pos:start="241:13" pos:end="241:41"><name pos:start="241:13" pos:end="241:15">ret</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <call pos:start="241:19" pos:end="241:41"><name pos:start="241:19" pos:end="241:37">qcow2_update_header</name><argument_list pos:start="241:38" pos:end="241:41">(<argument pos:start="241:39" pos:end="241:40"><expr pos:start="241:39" pos:end="241:40"><name pos:start="241:39" pos:end="241:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="243:13" pos:end="249:13"><if pos:start="243:13" pos:end="249:13">if <condition pos:start="243:16" pos:end="243:24">(<expr pos:start="243:17" pos:end="243:23"><name pos:start="243:17" pos:end="243:19">ret</name> <operator pos:start="243:21" pos:end="243:21">&lt;</operator> <literal type="number" pos:start="243:23" pos:end="243:23">0</literal></expr>)</condition> <block pos:start="243:26" pos:end="249:13">{<block_content pos:start="245:17" pos:end="247:27">

                <expr_stmt pos:start="245:17" pos:end="245:70"><expr pos:start="245:17" pos:end="245:69"><name pos:start="245:17" pos:end="245:38"><name pos:start="245:17" pos:end="245:17">s</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:38">compatible_features</name></name> <operator pos:start="245:40" pos:end="245:41">|=</operator> <name pos:start="245:43" pos:end="245:69">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

                <return pos:start="247:17" pos:end="247:27">return <expr pos:start="247:24" pos:end="247:26"><name pos:start="247:24" pos:end="247:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:42"><expr pos:start="251:13" pos:end="251:41"><name pos:start="251:13" pos:end="251:33"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:33">use_lazy_refcounts</name></name> <operator pos:start="251:35" pos:end="251:35">=</operator> <name pos:start="251:37" pos:end="251:41">false</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="259:5" pos:end="269:5"><if pos:start="259:5" pos:end="269:5">if <condition pos:start="259:8" pos:end="259:17">(<expr pos:start="259:9" pos:end="259:16"><name pos:start="259:9" pos:end="259:16">new_size</name></expr>)</condition> <block pos:start="259:19" pos:end="269:5">{<block_content pos:start="261:9" pos:end="267:9">

        <expr_stmt pos:start="261:9" pos:end="261:42"><expr pos:start="261:9" pos:end="261:41"><name pos:start="261:9" pos:end="261:11">ret</name> <operator pos:start="261:13" pos:end="261:13">=</operator> <call pos:start="261:15" pos:end="261:41"><name pos:start="261:15" pos:end="261:27">bdrv_truncate</name><argument_list pos:start="261:28" pos:end="261:41">(<argument pos:start="261:29" pos:end="261:30"><expr pos:start="261:29" pos:end="261:30"><name pos:start="261:29" pos:end="261:30">bs</name></expr></argument>, <argument pos:start="261:33" pos:end="261:40"><expr pos:start="261:33" pos:end="261:40"><name pos:start="261:33" pos:end="261:40">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="267:9"><if pos:start="263:9" pos:end="267:9">if <condition pos:start="263:12" pos:end="263:20">(<expr pos:start="263:13" pos:end="263:19"><name pos:start="263:13" pos:end="263:15">ret</name> <operator pos:start="263:17" pos:end="263:17">&lt;</operator> <literal type="number" pos:start="263:19" pos:end="263:19">0</literal></expr>)</condition> <block pos:start="263:22" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:23">

            <return pos:start="265:13" pos:end="265:23">return <expr pos:start="265:20" pos:end="265:22"><name pos:start="265:20" pos:end="265:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="273:5" pos:end="273:13">return <expr pos:start="273:12" pos:end="273:12"><literal type="number" pos:start="273:12" pos:end="273:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
