<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8863.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">load_vmstate</name><parameter_list pos:start="1:17" pos:end="1:48">(<parameter pos:start="1:18" pos:end="1:29"><decl pos:start="1:18" pos:end="1:29"><type pos:start="1:18" pos:end="1:29"><name pos:start="1:18" pos:end="1:24">Monitor</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">mon</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">DriveInfo</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:22"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">bs1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20">QEMUSnapshotInfo</name></type> <name pos:start="9:22" pos:end="9:23">sn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QEMUFile</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:6">bs</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:27"><name pos:start="17:10" pos:end="17:25">get_bs_snapshots</name><argument_list pos:start="17:26" pos:end="17:27">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:12">(<expr pos:start="19:9" pos:end="19:11"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:11">bs</name></expr>)</condition> <block pos:start="19:14" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:23">

        <expr_stmt pos:start="21:9" pos:end="21:68"><expr pos:start="21:9" pos:end="21:67"><call pos:start="21:9" pos:end="21:67"><name pos:start="21:9" pos:end="21:22">monitor_printf</name><argument_list pos:start="21:23" pos:end="21:67">(<argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">mon</name></expr></argument>, <argument pos:start="21:29" pos:end="21:66"><expr pos:start="21:29" pos:end="21:66"><literal type="string" pos:start="21:29" pos:end="21:66">"No block device supports snapshots\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:23">return <expr pos:start="23:16" pos:end="23:22"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:76">/* Flush all IO requests so they don't interfere with the new state.  */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><call pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:18">qemu_aio_flush</name><argument_list pos:start="31:19" pos:end="31:20">()</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:17">TAILQ_FOREACH</name><argument_list pos:start="35:18" pos:end="35:39">(<argument pos:start="35:19" pos:end="35:23">dinfo</argument>, <argument pos:start="35:26" pos:end="35:32">&amp;drives</argument>, <argument pos:start="35:35" pos:end="35:38">next</argument>)</argument_list></macro> <block pos:start="35:41" pos:end="91:5">{<block_content pos:start="37:9" pos:end="89:9">

        <expr_stmt pos:start="37:9" pos:end="37:26"><expr pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:11">bs1</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:25"><name pos:start="37:15" pos:end="37:19">dinfo</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:25">bdrv</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="89:9"><if pos:start="39:9" pos:end="89:9">if <condition pos:start="39:12" pos:end="39:35">(<expr pos:start="39:13" pos:end="39:34"><call pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:29">bdrv_has_snapshot</name><argument_list pos:start="39:30" pos:end="39:34">(<argument pos:start="39:31" pos:end="39:33"><expr pos:start="39:31" pos:end="39:33"><name pos:start="39:31" pos:end="39:33">bs1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:37" pos:end="89:9">{<block_content pos:start="41:13" pos:end="87:13">

            <expr_stmt pos:start="41:13" pos:end="41:48"><expr pos:start="41:13" pos:end="41:47"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:47"><name pos:start="41:19" pos:end="41:36">bdrv_snapshot_goto</name><argument_list pos:start="41:37" pos:end="41:47">(<argument pos:start="41:38" pos:end="41:40"><expr pos:start="41:38" pos:end="41:40"><name pos:start="41:38" pos:end="41:40">bs1</name></expr></argument>, <argument pos:start="41:43" pos:end="41:46"><expr pos:start="41:43" pos:end="41:46"><name pos:start="41:43" pos:end="41:46">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="87:13"><if pos:start="43:13" pos:end="87:13">if <condition pos:start="43:16" pos:end="43:24">(<expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:21">&lt;</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>)</condition> <block pos:start="43:26" pos:end="87:13">{<block_content pos:start="45:17" pos:end="85:29">

                <if_stmt pos:start="45:17" pos:end="47:53"><if pos:start="45:17" pos:end="47:53">if <condition pos:start="45:20" pos:end="45:30">(<expr pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:22">bs</name> <operator pos:start="45:24" pos:end="45:25">!=</operator> <name pos:start="45:27" pos:end="45:29">bs1</name></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:53"><block_content pos:start="47:21" pos:end="47:53">

                    <expr_stmt pos:start="47:21" pos:end="47:53"><expr pos:start="47:21" pos:end="47:52"><call pos:start="47:21" pos:end="47:52"><name pos:start="47:21" pos:end="47:34">monitor_printf</name><argument_list pos:start="47:35" pos:end="47:52">(<argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">mon</name></expr></argument>, <argument pos:start="47:41" pos:end="47:51"><expr pos:start="47:41" pos:end="47:51"><literal type="string" pos:start="47:41" pos:end="47:51">"Warning: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <switch pos:start="49:17" pos:end="79:17">switch<condition pos:start="49:23" pos:end="49:27">(<expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:26">ret</name></expr>)</condition> <block pos:start="49:29" pos:end="79:17">{<block_content pos:start="51:17" pos:end="77:26">

                <case pos:start="51:17" pos:end="51:30">case <expr pos:start="51:22" pos:end="51:29"><operator pos:start="51:22" pos:end="51:22">-</operator><name pos:start="51:23" pos:end="51:29">ENOTSUP</name></expr>:</case>

                    <expr_stmt pos:start="53:21" pos:end="57:62"><expr pos:start="53:21" pos:end="57:61"><call pos:start="53:21" pos:end="57:61"><name pos:start="53:21" pos:end="53:34">monitor_printf</name><argument_list pos:start="53:35" pos:end="57:61">(<argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><name pos:start="53:36" pos:end="53:38">mon</name></expr></argument>,

                                   <argument pos:start="55:36" pos:end="55:77"><expr pos:start="55:36" pos:end="55:77"><literal type="string" pos:start="55:36" pos:end="55:77">"Snapshots not supported on device '%s'\n"</literal></expr></argument>,

                                   <argument pos:start="57:36" pos:end="57:60"><expr pos:start="57:36" pos:end="57:60"><call pos:start="57:36" pos:end="57:60"><name pos:start="57:36" pos:end="57:55">bdrv_get_device_name</name><argument_list pos:start="57:56" pos:end="57:60">(<argument pos:start="57:57" pos:end="57:59"><expr pos:start="57:57" pos:end="57:59"><name pos:start="57:57" pos:end="57:59">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="59:21" pos:end="59:26">break;</break>

                <case pos:start="61:17" pos:end="61:29">case <expr pos:start="61:22" pos:end="61:28"><operator pos:start="61:22" pos:end="61:22">-</operator><name pos:start="61:23" pos:end="61:28">ENOENT</name></expr>:</case>

                    <expr_stmt pos:start="63:21" pos:end="67:68"><expr pos:start="63:21" pos:end="67:67"><call pos:start="63:21" pos:end="67:67"><name pos:start="63:21" pos:end="63:34">monitor_printf</name><argument_list pos:start="63:35" pos:end="67:67">(<argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:38">mon</name></expr></argument>, <argument pos:start="63:41" pos:end="65:50"><expr pos:start="63:41" pos:end="65:50"><literal type="string" pos:start="63:41" pos:end="63:74">"Could not find snapshot '%s' on "</literal>

                                   <literal type="string" pos:start="65:36" pos:end="65:50">"device '%s'\n"</literal></expr></argument>,

                                   <argument pos:start="67:36" pos:end="67:39"><expr pos:start="67:36" pos:end="67:39"><name pos:start="67:36" pos:end="67:39">name</name></expr></argument>, <argument pos:start="67:42" pos:end="67:66"><expr pos:start="67:42" pos:end="67:66"><call pos:start="67:42" pos:end="67:66"><name pos:start="67:42" pos:end="67:61">bdrv_get_device_name</name><argument_list pos:start="67:62" pos:end="67:66">(<argument pos:start="67:63" pos:end="67:65"><expr pos:start="67:63" pos:end="67:65"><name pos:start="67:63" pos:end="67:65">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="69:21" pos:end="69:26">break;</break>

                <default pos:start="71:17" pos:end="71:24">default:</default>

                    <expr_stmt pos:start="73:21" pos:end="75:78"><expr pos:start="73:21" pos:end="75:77"><call pos:start="73:21" pos:end="75:77"><name pos:start="73:21" pos:end="73:34">monitor_printf</name><argument_list pos:start="73:35" pos:end="75:77">(<argument pos:start="73:36" pos:end="73:38"><expr pos:start="73:36" pos:end="73:38"><name pos:start="73:36" pos:end="73:38">mon</name></expr></argument>, <argument pos:start="73:41" pos:end="75:44"><expr pos:start="73:41" pos:end="75:44"><literal type="string" pos:start="73:41" pos:end="73:79">"Error %d while activating snapshot on"</literal>

                                   <literal type="string" pos:start="75:36" pos:end="75:44">" '%s'\n"</literal></expr></argument>, <argument pos:start="75:47" pos:end="75:49"><expr pos:start="75:47" pos:end="75:49"><name pos:start="75:47" pos:end="75:49">ret</name></expr></argument>, <argument pos:start="75:52" pos:end="75:76"><expr pos:start="75:52" pos:end="75:76"><call pos:start="75:52" pos:end="75:76"><name pos:start="75:52" pos:end="75:71">bdrv_get_device_name</name><argument_list pos:start="75:72" pos:end="75:76">(<argument pos:start="75:73" pos:end="75:75"><expr pos:start="75:73" pos:end="75:75"><name pos:start="75:73" pos:end="75:75">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="77:21" pos:end="77:26">break;</break>

                </block_content>}</block></switch>

                <comment type="block" pos:start="81:17" pos:end="81:52">/* fatal on snapshot block device */</comment>

                <if_stmt pos:start="83:17" pos:end="85:29"><if pos:start="83:17" pos:end="85:29">if <condition pos:start="83:20" pos:end="83:30">(<expr pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:22">bs</name> <operator pos:start="83:24" pos:end="83:25">==</operator> <name pos:start="83:27" pos:end="83:29">bs1</name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:29"><block_content pos:start="85:21" pos:end="85:29">

                    <return pos:start="85:21" pos:end="85:29">return <expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="95:5" pos:end="95:48">/* Don't even try to load empty VM states */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:44"><expr pos:start="97:5" pos:end="97:43"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:43"><name pos:start="97:11" pos:end="97:28">bdrv_snapshot_find</name><argument_list pos:start="97:29" pos:end="97:43">(<argument pos:start="97:30" pos:end="97:31"><expr pos:start="97:30" pos:end="97:31"><name pos:start="97:30" pos:end="97:31">bs</name></expr></argument>, <argument pos:start="97:34" pos:end="97:36"><expr pos:start="97:34" pos:end="97:36"><operator pos:start="97:34" pos:end="97:34">&amp;</operator><name pos:start="97:35" pos:end="97:36">sn</name></expr></argument>, <argument pos:start="97:39" pos:end="97:42"><expr pos:start="97:39" pos:end="97:42"><name pos:start="97:39" pos:end="97:42">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="101:23"><if pos:start="99:5" pos:end="101:23">if <condition pos:start="99:8" pos:end="99:46">(<expr pos:start="99:9" pos:end="99:45"><operator pos:start="99:9" pos:end="99:9">(</operator><name pos:start="99:10" pos:end="99:12">ret</name> <operator pos:start="99:14" pos:end="99:15">&gt;=</operator> <literal type="number" pos:start="99:17" pos:end="99:17">0</literal><operator pos:start="99:18" pos:end="99:18">)</operator> <operator pos:start="99:20" pos:end="99:21">&amp;&amp;</operator> <operator pos:start="99:23" pos:end="99:23">(</operator><name pos:start="99:24" pos:end="99:39"><name pos:start="99:24" pos:end="99:25">sn</name><operator pos:start="99:26" pos:end="99:26">.</operator><name pos:start="99:27" pos:end="99:39">vm_state_size</name></name> <operator pos:start="99:41" pos:end="99:42">==</operator> <literal type="number" pos:start="99:44" pos:end="99:44">0</literal><operator pos:start="99:45" pos:end="99:45">)</operator></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:23"><block_content pos:start="101:9" pos:end="101:23">

        <return pos:start="101:9" pos:end="101:23">return <expr pos:start="101:16" pos:end="101:22"><operator pos:start="101:16" pos:end="101:16">-</operator><name pos:start="101:17" pos:end="101:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:30">/* restore the VM state */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:31"><expr pos:start="107:5" pos:end="107:30"><name pos:start="107:5" pos:end="107:5">f</name> <operator pos:start="107:7" pos:end="107:7">=</operator> <call pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:23">qemu_fopen_bdrv</name><argument_list pos:start="107:24" pos:end="107:30">(<argument pos:start="107:25" pos:end="107:26"><expr pos:start="107:25" pos:end="107:26"><name pos:start="107:25" pos:end="107:26">bs</name></expr></argument>, <argument pos:start="107:29" pos:end="107:29"><expr pos:start="107:29" pos:end="107:29"><literal type="number" pos:start="107:29" pos:end="107:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:11">(<expr pos:start="109:9" pos:end="109:10"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:10">f</name></expr>)</condition> <block pos:start="109:13" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:23">

        <expr_stmt pos:start="111:9" pos:end="111:62"><expr pos:start="111:9" pos:end="111:61"><call pos:start="111:9" pos:end="111:61"><name pos:start="111:9" pos:end="111:22">monitor_printf</name><argument_list pos:start="111:23" pos:end="111:61">(<argument pos:start="111:24" pos:end="111:26"><expr pos:start="111:24" pos:end="111:26"><name pos:start="111:24" pos:end="111:26">mon</name></expr></argument>, <argument pos:start="111:29" pos:end="111:60"><expr pos:start="111:29" pos:end="111:60"><literal type="string" pos:start="111:29" pos:end="111:60">"Could not open VM state file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:23">return <expr pos:start="113:16" pos:end="113:22"><operator pos:start="113:16" pos:end="113:16">-</operator><name pos:start="113:17" pos:end="113:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:31"><expr pos:start="117:5" pos:end="117:30"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:30"><name pos:start="117:11" pos:end="117:27">qemu_loadvm_state</name><argument_list pos:start="117:28" pos:end="117:30">(<argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><name pos:start="117:29" pos:end="117:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:19"><expr pos:start="119:5" pos:end="119:18"><call pos:start="119:5" pos:end="119:18"><name pos:start="119:5" pos:end="119:15">qemu_fclose</name><argument_list pos:start="119:16" pos:end="119:18">(<argument pos:start="119:17" pos:end="119:17"><expr pos:start="119:17" pos:end="119:17"><name pos:start="119:17" pos:end="119:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:16">(<expr pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">&lt;</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>)</condition> <block pos:start="121:18" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:19">

        <expr_stmt pos:start="123:9" pos:end="123:70"><expr pos:start="123:9" pos:end="123:69"><call pos:start="123:9" pos:end="123:69"><name pos:start="123:9" pos:end="123:22">monitor_printf</name><argument_list pos:start="123:23" pos:end="123:69">(<argument pos:start="123:24" pos:end="123:26"><expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">mon</name></expr></argument>, <argument pos:start="123:29" pos:end="123:63"><expr pos:start="123:29" pos:end="123:63"><literal type="string" pos:start="123:29" pos:end="123:63">"Error %d while loading VM state\n"</literal></expr></argument>, <argument pos:start="123:66" pos:end="123:68"><expr pos:start="123:66" pos:end="123:68"><name pos:start="123:66" pos:end="123:68">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:19">return <expr pos:start="125:16" pos:end="125:18"><name pos:start="125:16" pos:end="125:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
