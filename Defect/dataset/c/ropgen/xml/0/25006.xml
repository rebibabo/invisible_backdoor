<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25006.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">RTCState</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:21">rtc_mm_init</name><parameter_list pos:start="1:22" pos:end="3:36">(<parameter pos:start="1:23" pos:end="1:45"><decl pos:start="1:23" pos:end="1:45"><type pos:start="1:23" pos:end="1:45"><name pos:start="1:23" pos:end="1:40">target_phys_addr_t</name></type> <name pos:start="1:42" pos:end="1:45">base</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:59">it_shift</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:69">qemu_irq</name></type> <name pos:start="1:71" pos:end="1:73">irq</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:35">base_year</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:13">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RTCState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">io_memory</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:5">s</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <call pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:20">qemu_mallocz</name><argument_list pos:start="13:21" pos:end="13:38">(<argument pos:start="13:22" pos:end="13:37"><expr pos:start="13:22" pos:end="13:37"><sizeof pos:start="13:22" pos:end="13:37">sizeof<argument_list pos:start="13:28" pos:end="13:37">(<argument pos:start="13:29" pos:end="13:36"><expr pos:start="13:29" pos:end="13:36"><name pos:start="13:29" pos:end="13:36">RTCState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:10">irq</name></name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:16">irq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:16">cmos_data</name><index pos:start="19:17" pos:end="19:27">[<expr pos:start="19:18" pos:end="19:26"><name pos:start="19:18" pos:end="19:26">RTC_REG_A</name></expr>]</index></name> <operator pos:start="19:29" pos:end="19:29">=</operator> <literal type="number" pos:start="19:31" pos:end="19:34">0x26</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:16">cmos_data</name><index pos:start="21:17" pos:end="21:27">[<expr pos:start="21:18" pos:end="21:26"><name pos:start="21:18" pos:end="21:26">RTC_REG_B</name></expr>]</index></name> <operator pos:start="21:29" pos:end="21:29">=</operator> <literal type="number" pos:start="21:31" pos:end="21:34">0x02</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:16">cmos_data</name><index pos:start="23:17" pos:end="23:27">[<expr pos:start="23:18" pos:end="23:26"><name pos:start="23:18" pos:end="23:26">RTC_REG_C</name></expr>]</index></name> <operator pos:start="23:29" pos:end="23:29">=</operator> <literal type="number" pos:start="23:31" pos:end="23:34">0x00</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:35"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:16">cmos_data</name><index pos:start="25:17" pos:end="25:27">[<expr pos:start="25:18" pos:end="25:26"><name pos:start="25:18" pos:end="25:26">RTC_REG_D</name></expr>]</index></name> <operator pos:start="25:29" pos:end="25:29">=</operator> <literal type="number" pos:start="25:31" pos:end="25:34">0x80</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:16">base_year</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <name pos:start="29:20" pos:end="29:28">base_year</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><call pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:26">rtc_set_date_from_host</name><argument_list pos:start="31:27" pos:end="31:29">(<argument pos:start="31:28" pos:end="31:28"><expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:73"><expr pos:start="35:5" pos:end="35:72"><name pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:21">periodic_timer</name></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <call pos:start="35:25" pos:end="35:72"><name pos:start="35:25" pos:end="35:38">qemu_new_timer</name><argument_list pos:start="35:39" pos:end="35:72">(<argument pos:start="35:40" pos:end="35:48"><expr pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:48">rtc_clock</name></expr></argument>, <argument pos:start="35:51" pos:end="35:68"><expr pos:start="35:51" pos:end="35:68"><name pos:start="35:51" pos:end="35:68">rtc_periodic_timer</name></expr></argument>, <argument pos:start="35:71" pos:end="35:71"><expr pos:start="35:71" pos:end="35:71"><name pos:start="35:71" pos:end="35:71">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:70"><expr pos:start="37:5" pos:end="37:69"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:19">second_timer</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:69"><name pos:start="37:23" pos:end="37:36">qemu_new_timer</name><argument_list pos:start="37:37" pos:end="37:69">(<argument pos:start="37:38" pos:end="37:46"><expr pos:start="37:38" pos:end="37:46"><name pos:start="37:38" pos:end="37:46">rtc_clock</name></expr></argument>, <argument pos:start="37:49" pos:end="37:65"><expr pos:start="37:49" pos:end="37:65"><name pos:start="37:49" pos:end="37:65">rtc_update_second</name></expr></argument>, <argument pos:start="37:68" pos:end="37:68"><expr pos:start="37:68" pos:end="37:68"><name pos:start="37:68" pos:end="37:68">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:72"><expr pos:start="39:5" pos:end="39:71"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:20">second_timer2</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:71"><name pos:start="39:24" pos:end="39:37">qemu_new_timer</name><argument_list pos:start="39:38" pos:end="39:71">(<argument pos:start="39:39" pos:end="39:47"><expr pos:start="39:39" pos:end="39:47"><name pos:start="39:39" pos:end="39:47">rtc_clock</name></expr></argument>, <argument pos:start="39:50" pos:end="39:67"><expr pos:start="39:50" pos:end="39:67"><name pos:start="39:50" pos:end="39:67">rtc_update_second2</name></expr></argument>, <argument pos:start="39:70" pos:end="39:70"><expr pos:start="39:70" pos:end="39:70"><name pos:start="39:70" pos:end="39:70">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:69"><expr pos:start="43:5" pos:end="45:68"><name pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:23">next_second_time</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator>

        <call pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:22">qemu_get_clock</name><argument_list pos:start="45:23" pos:end="45:33">(<argument pos:start="45:24" pos:end="45:32"><expr pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:32">rtc_clock</name></expr></argument>)</argument_list></call> <operator pos:start="45:35" pos:end="45:35">+</operator> <operator pos:start="45:37" pos:end="45:37">(</operator><call pos:start="45:38" pos:end="45:56"><name pos:start="45:38" pos:end="45:54">get_ticks_per_sec</name><argument_list pos:start="45:55" pos:end="45:56">()</argument_list></call> <operator pos:start="45:58" pos:end="45:58">*</operator> <literal type="number" pos:start="45:60" pos:end="45:61">99</literal><operator pos:start="45:62" pos:end="45:62">)</operator> <operator pos:start="45:64" pos:end="45:64">/</operator> <literal type="number" pos:start="45:66" pos:end="45:68">100</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:58"><expr pos:start="47:5" pos:end="47:57"><call pos:start="47:5" pos:end="47:57"><name pos:start="47:5" pos:end="47:18">qemu_mod_timer</name><argument_list pos:start="47:19" pos:end="47:57">(<argument pos:start="47:20" pos:end="47:35"><expr pos:start="47:20" pos:end="47:35"><name pos:start="47:20" pos:end="47:35"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:35">second_timer2</name></name></expr></argument>, <argument pos:start="47:38" pos:end="47:56"><expr pos:start="47:38" pos:end="47:56"><name pos:start="47:38" pos:end="47:56"><name pos:start="47:38" pos:end="47:38">s</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:56">next_second_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:69"><expr pos:start="51:5" pos:end="51:68"><name pos:start="51:5" pos:end="51:13">io_memory</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:68"><name pos:start="51:17" pos:end="51:38">cpu_register_io_memory</name><argument_list pos:start="51:39" pos:end="51:68">(<argument pos:start="51:40" pos:end="51:50"><expr pos:start="51:40" pos:end="51:50"><name pos:start="51:40" pos:end="51:50">rtc_mm_read</name></expr></argument>, <argument pos:start="51:53" pos:end="51:64"><expr pos:start="51:53" pos:end="51:64"><name pos:start="51:53" pos:end="51:64">rtc_mm_write</name></expr></argument>, <argument pos:start="51:67" pos:end="51:67"><expr pos:start="51:67" pos:end="51:67"><name pos:start="51:67" pos:end="51:67">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:65"><expr pos:start="53:5" pos:end="53:64"><call pos:start="53:5" pos:end="53:64"><name pos:start="53:5" pos:end="53:32">cpu_register_physical_memory</name><argument_list pos:start="53:33" pos:end="53:64">(<argument pos:start="53:34" pos:end="53:37"><expr pos:start="53:34" pos:end="53:37"><name pos:start="53:34" pos:end="53:37">base</name></expr></argument>, <argument pos:start="53:40" pos:end="53:52"><expr pos:start="53:40" pos:end="53:52"><literal type="number" pos:start="53:40" pos:end="53:40">2</literal> <operator pos:start="53:42" pos:end="53:43">&lt;&lt;</operator> <name pos:start="53:45" pos:end="53:52">it_shift</name></expr></argument>, <argument pos:start="53:55" pos:end="53:63"><expr pos:start="53:55" pos:end="53:63"><name pos:start="53:55" pos:end="53:63">io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:66"><call pos:start="57:5" pos:end="57:66"><name pos:start="57:5" pos:end="57:19">register_savevm</name><argument_list pos:start="57:20" pos:end="57:66">(<argument pos:start="57:21" pos:end="57:33"><expr pos:start="57:21" pos:end="57:33"><literal type="string" pos:start="57:21" pos:end="57:33">"mc146818rtc"</literal></expr></argument>, <argument pos:start="57:36" pos:end="57:39"><expr pos:start="57:36" pos:end="57:39"><name pos:start="57:36" pos:end="57:39">base</name></expr></argument>, <argument pos:start="57:42" pos:end="57:42"><expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">1</literal></expr></argument>, <argument pos:start="57:45" pos:end="57:52"><expr pos:start="57:45" pos:end="57:52"><name pos:start="57:45" pos:end="57:52">rtc_save</name></expr></argument>, <argument pos:start="57:55" pos:end="57:62"><expr pos:start="57:55" pos:end="57:62"><name pos:start="57:55" pos:end="57:62">rtc_load</name></expr></argument>, <argument pos:start="57:65" pos:end="57:65"><expr pos:start="57:65" pos:end="57:65"><name pos:start="57:65" pos:end="57:65">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="59:1" pos:end="59:18">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:18">TARGET_I386</name></cpp:ifdef>

    <if_stmt pos:start="61:5" pos:end="66:0"><if pos:start="61:5" pos:end="66:0">if <condition pos:start="61:8" pos:end="61:20">(<expr pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:19">rtc_td_hack</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="66:0"><block_content pos:start="63:9" pos:end="66:0">

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:79"><call pos:start="63:9" pos:end="63:79"><name pos:start="63:9" pos:end="63:23">register_savevm</name><argument_list pos:start="63:24" pos:end="63:79">(<argument pos:start="63:25" pos:end="63:40"><expr pos:start="63:25" pos:end="63:40"><literal type="string" pos:start="63:25" pos:end="63:40">"mc146818rtc-td"</literal></expr></argument>, <argument pos:start="63:43" pos:end="63:46"><expr pos:start="63:43" pos:end="63:46"><name pos:start="63:43" pos:end="63:46">base</name></expr></argument>, <argument pos:start="63:49" pos:end="63:49"><expr pos:start="63:49" pos:end="63:49"><literal type="number" pos:start="63:49" pos:end="63:49">1</literal></expr></argument>, <argument pos:start="63:52" pos:end="63:62"><expr pos:start="63:52" pos:end="63:62"><name pos:start="63:52" pos:end="63:62">rtc_save_td</name></expr></argument>, <argument pos:start="63:65" pos:end="63:75"><expr pos:start="63:65" pos:end="63:75"><name pos:start="63:65" pos:end="63:75">rtc_load_td</name></expr></argument>, <argument pos:start="63:78" pos:end="63:78"><expr pos:start="63:78" pos:end="63:78"><name pos:start="63:78" pos:end="63:78">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="67:5" pos:end="67:38"><expr pos:start="67:5" pos:end="67:37"><call pos:start="67:5" pos:end="67:37"><name pos:start="67:5" pos:end="67:23">qemu_register_reset</name><argument_list pos:start="67:24" pos:end="67:37">(<argument pos:start="67:25" pos:end="67:33"><expr pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:33">rtc_reset</name></expr></argument>, <argument pos:start="67:36" pos:end="67:36"><expr pos:start="67:36" pos:end="67:36"><name pos:start="67:36" pos:end="67:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><name pos:start="69:12" pos:end="69:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
