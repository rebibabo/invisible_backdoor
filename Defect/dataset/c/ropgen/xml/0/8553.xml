<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8553.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">sd_rsp_type_t</name></type> <name pos:start="1:22" pos:end="1:35">sd_app_command</name><parameter_list pos:start="1:36" pos:end="3:50">(<parameter pos:start="1:37" pos:end="1:47"><decl pos:start="1:37" pos:end="1:47"><type pos:start="1:37" pos:end="1:47"><name pos:start="1:37" pos:end="1:43">SDState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">sd</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:49"><decl pos:start="3:37" pos:end="3:49"><type pos:start="3:37" pos:end="3:49"><name pos:start="3:37" pos:end="3:45">SDRequest</name></type> <name pos:start="3:47" pos:end="3:49">req</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="223:1">{<block_content pos:start="7:5" pos:end="221:22">

    <expr_stmt pos:start="7:5" pos:end="7:49"><expr pos:start="7:5" pos:end="7:48"><call pos:start="7:5" pos:end="7:48"><name pos:start="7:5" pos:end="7:11">DPRINTF</name><argument_list pos:start="7:12" pos:end="7:48">(<argument pos:start="7:13" pos:end="7:29"><expr pos:start="7:13" pos:end="7:29"><literal type="string" pos:start="7:13" pos:end="7:29">"ACMD%d 0x%08x\n"</literal></expr></argument>, <argument pos:start="7:32" pos:end="7:38"><expr pos:start="7:32" pos:end="7:38"><name pos:start="7:32" pos:end="7:38"><name pos:start="7:32" pos:end="7:34">req</name><operator pos:start="7:35" pos:end="7:35">.</operator><name pos:start="7:36" pos:end="7:38">cmd</name></name></expr></argument>, <argument pos:start="7:41" pos:end="7:47"><expr pos:start="7:41" pos:end="7:47"><name pos:start="7:41" pos:end="7:47"><name pos:start="7:41" pos:end="7:43">req</name><operator pos:start="7:44" pos:end="7:44">.</operator><name pos:start="7:45" pos:end="7:47">arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:31"><expr pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:6">sd</name><operator pos:start="9:7" pos:end="9:8">-&gt;</operator><name pos:start="9:9" pos:end="9:19">card_status</name></name> <operator pos:start="9:21" pos:end="9:22">|=</operator> <name pos:start="9:24" pos:end="9:30">APP_CMD</name></expr>;</expr_stmt>

    <switch pos:start="11:5" pos:end="215:5">switch <condition pos:start="11:12" pos:end="11:20">(<expr pos:start="11:13" pos:end="11:19"><name pos:start="11:13" pos:end="11:19"><name pos:start="11:13" pos:end="11:15">req</name><operator pos:start="11:16" pos:end="11:16">.</operator><name pos:start="11:17" pos:end="11:19">cmd</name></name></expr>)</condition> <block pos:start="11:22" pos:end="215:5">{<block_content pos:start="13:5" pos:end="213:42">

    <case pos:start="13:5" pos:end="13:11">case <expr pos:start="13:10" pos:end="13:10"><literal type="number" pos:start="13:10" pos:end="13:10">6</literal></expr>:</case>	<comment type="block" pos:start="13:17" pos:end="13:43">/* ACMD6:  SET_BUS_WIDTH */</comment>

        <switch pos:start="15:9" pos:end="31:9">switch <condition pos:start="15:16" pos:end="15:26">(<expr pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:18">sd</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:25">state</name></name></expr>)</condition> <block pos:start="15:28" pos:end="31:9">{<block_content pos:start="17:9" pos:end="29:18">

        <case pos:start="17:9" pos:end="17:31">case <expr pos:start="17:14" pos:end="17:30"><name pos:start="17:14" pos:end="17:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="19:13" pos:end="19:37"><expr pos:start="19:13" pos:end="19:36"><name pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:14">sd</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:25">sd_status</name><index pos:start="19:26" pos:end="19:28">[<expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr>]</index></name> <operator pos:start="19:30" pos:end="19:31">&amp;=</operator> <literal type="number" pos:start="19:33" pos:end="19:36">0x3f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:54"><expr pos:start="21:13" pos:end="21:53"><name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:14">sd</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:25">sd_status</name><index pos:start="21:26" pos:end="21:28">[<expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr>]</index></name> <operator pos:start="21:30" pos:end="21:31">|=</operator> <operator pos:start="21:33" pos:end="21:33">(</operator><name pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:36">req</name><operator pos:start="21:37" pos:end="21:37">.</operator><name pos:start="21:38" pos:end="21:40">arg</name></name> <operator pos:start="21:42" pos:end="21:42">&amp;</operator> <literal type="number" pos:start="21:44" pos:end="21:47">0x03</literal><operator pos:start="21:48" pos:end="21:48">)</operator> <operator pos:start="21:50" pos:end="21:51">&lt;&lt;</operator> <literal type="number" pos:start="21:53" pos:end="21:53">6</literal></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:25">return <expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:24">sd_r1</name></expr>;</return>



        <default pos:start="27:9" pos:end="27:16">default:</default>

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="33:9" pos:end="33:14">break;</break>



    <case pos:start="37:5" pos:end="37:12">case <expr pos:start="37:10" pos:end="37:11"><literal type="number" pos:start="37:10" pos:end="37:11">13</literal></expr>:</case>	<comment type="block" pos:start="37:17" pos:end="37:39">/* ACMD13: SD_STATUS */</comment>

        <switch pos:start="39:9" pos:end="57:9">switch <condition pos:start="39:16" pos:end="39:26">(<expr pos:start="39:17" pos:end="39:25"><name pos:start="39:17" pos:end="39:25"><name pos:start="39:17" pos:end="39:18">sd</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:25">state</name></name></expr>)</condition> <block pos:start="39:28" pos:end="57:9">{<block_content pos:start="41:9" pos:end="55:18">

        <case pos:start="41:9" pos:end="41:31">case <expr pos:start="41:14" pos:end="41:30"><name pos:start="41:14" pos:end="41:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:14">sd</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:21">state</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:44">sd_sendingdata_state</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:31"><expr pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:14">sd</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:26">data_start</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <literal type="number" pos:start="45:30" pos:end="45:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:32"><expr pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:14">sd</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:27">data_offset</name></name> <operator pos:start="47:29" pos:end="47:29">=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:25">return <expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:24">sd_r1</name></expr>;</return>



        <default pos:start="53:9" pos:end="53:16">default:</default>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="59:9" pos:end="59:14">break;</break>



    <case pos:start="63:5" pos:end="63:12">case <expr pos:start="63:10" pos:end="63:11"><literal type="number" pos:start="63:10" pos:end="63:11">22</literal></expr>:</case>	<comment type="block" pos:start="63:17" pos:end="63:48">/* ACMD22: SEND_NUM_WR_BLOCKS */</comment>

        <switch pos:start="65:9" pos:end="87:9">switch <condition pos:start="65:16" pos:end="65:26">(<expr pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:18">sd</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:25">state</name></name></expr>)</condition> <block pos:start="65:28" pos:end="87:9">{<block_content pos:start="67:9" pos:end="85:18">

        <case pos:start="67:9" pos:end="67:31">case <expr pos:start="67:14" pos:end="67:30"><name pos:start="67:14" pos:end="67:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:53"><expr pos:start="69:13" pos:end="69:52"><operator pos:start="69:13" pos:end="69:13">*</operator><operator pos:start="69:14" pos:end="69:14">(</operator><name pos:start="69:15" pos:end="69:22">uint32_t</name> <operator pos:start="69:24" pos:end="69:24">*</operator><operator pos:start="69:25" pos:end="69:25">)</operator> <name pos:start="69:27" pos:end="69:34"><name pos:start="69:27" pos:end="69:28">sd</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:34">data</name></name> <operator pos:start="69:36" pos:end="69:36">=</operator> <name pos:start="69:38" pos:end="69:52"><name pos:start="69:38" pos:end="69:39">sd</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:52">blk_written</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:45"><expr pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:14">sd</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:21">state</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:44">sd_sendingdata_state</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:31"><expr pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:14">sd</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:26">data_start</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <literal type="number" pos:start="75:30" pos:end="75:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:14">sd</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:27">data_offset</name></name> <operator pos:start="77:29" pos:end="77:29">=</operator> <literal type="number" pos:start="77:31" pos:end="77:31">0</literal></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:25">return <expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:24">sd_r1</name></expr>;</return>



        <default pos:start="83:9" pos:end="83:16">default:</default>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <case pos:start="93:5" pos:end="93:12">case <expr pos:start="93:10" pos:end="93:11"><literal type="number" pos:start="93:10" pos:end="93:11">23</literal></expr>:</case>	<comment type="block" pos:start="93:17" pos:end="93:52">/* ACMD23: SET_WR_BLK_ERASE_COUNT */</comment>

        <switch pos:start="95:9" pos:end="107:9">switch <condition pos:start="95:16" pos:end="95:26">(<expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:18">sd</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:25">state</name></name></expr>)</condition> <block pos:start="95:28" pos:end="107:9">{<block_content pos:start="97:9" pos:end="105:18">

        <case pos:start="97:9" pos:end="97:31">case <expr pos:start="97:14" pos:end="97:30"><name pos:start="97:14" pos:end="97:30">sd_transfer_state</name></expr>:</case>

            <return pos:start="99:13" pos:end="99:25">return <expr pos:start="99:20" pos:end="99:24"><name pos:start="99:20" pos:end="99:24">sd_r1</name></expr>;</return>



        <default pos:start="103:9" pos:end="103:16">default:</default>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="109:9" pos:end="109:14">break;</break>



    <case pos:start="113:5" pos:end="113:12">case <expr pos:start="113:10" pos:end="113:11"><literal type="number" pos:start="113:10" pos:end="113:11">41</literal></expr>:</case>	<comment type="block" pos:start="113:17" pos:end="113:44">/* ACMD41: SD_APP_OP_COND */</comment>

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:14">sd</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:19">spi</name></name></expr>)</condition> <block pos:start="115:22" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:25">

            <comment type="block" pos:start="117:13" pos:end="117:29">/* SEND_OP_CMD */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:42"><expr pos:start="119:13" pos:end="119:41"><name pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:14">sd</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:21">state</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:41">sd_transfer_state</name></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:25">return <expr pos:start="121:20" pos:end="121:24"><name pos:start="121:20" pos:end="121:24">sd_r1</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="125:9" pos:end="155:9">switch <condition pos:start="125:16" pos:end="125:26">(<expr pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:18">sd</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:25">state</name></name></expr>)</condition> <block pos:start="125:28" pos:end="155:9">{<block_content pos:start="127:9" pos:end="153:18">

        <case pos:start="127:9" pos:end="127:27">case <expr pos:start="127:14" pos:end="127:26"><name pos:start="127:14" pos:end="127:26">sd_idle_state</name></expr>:</case>

            <comment type="block" pos:start="129:13" pos:end="137:15">/* We accept any voltage.  10000 V is nothing.

             *

             * We don't model init delay so just advance straight to ready state

             * unless it's an enquiry ACMD41 (bits 23:0 == 0).

             */</comment>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:46">(<expr pos:start="139:17" pos:end="139:45"><name pos:start="139:17" pos:end="139:23"><name pos:start="139:17" pos:end="139:19">req</name><operator pos:start="139:20" pos:end="139:20">.</operator><name pos:start="139:21" pos:end="139:23">arg</name></name> <operator pos:start="139:25" pos:end="139:25">&amp;</operator> <name pos:start="139:27" pos:end="139:45">ACMD41_ENQUIRY_MASK</name></expr>)</condition> <block pos:start="139:48" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:43">

                <expr_stmt pos:start="141:17" pos:end="141:43"><expr pos:start="141:17" pos:end="141:42"><name pos:start="141:17" pos:end="141:25"><name pos:start="141:17" pos:end="141:18">sd</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:25">state</name></name> <operator pos:start="141:27" pos:end="141:27">=</operator> <name pos:start="141:29" pos:end="141:42">sd_ready_state</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <return pos:start="147:13" pos:end="147:25">return <expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">sd_r3</name></expr>;</return>



        <default pos:start="151:9" pos:end="151:16">default:</default>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="157:9" pos:end="157:14">break;</break>



    <case pos:start="161:5" pos:end="161:12">case <expr pos:start="161:10" pos:end="161:11"><literal type="number" pos:start="161:10" pos:end="161:11">42</literal></expr>:</case>	<comment type="block" pos:start="161:17" pos:end="161:49">/* ACMD42: SET_CLR_CARD_DETECT */</comment>

        <switch pos:start="163:9" pos:end="177:9">switch <condition pos:start="163:16" pos:end="163:26">(<expr pos:start="163:17" pos:end="163:25"><name pos:start="163:17" pos:end="163:25"><name pos:start="163:17" pos:end="163:18">sd</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:25">state</name></name></expr>)</condition> <block pos:start="163:28" pos:end="177:9">{<block_content pos:start="165:9" pos:end="175:18">

        <case pos:start="165:9" pos:end="165:31">case <expr pos:start="165:14" pos:end="165:30"><name pos:start="165:14" pos:end="165:30">sd_transfer_state</name></expr>:</case>

            <comment type="block" pos:start="167:13" pos:end="167:67">/* Bringing in the 50KOhm pull-up resistor... Done.  */</comment>

            <return pos:start="169:13" pos:end="169:25">return <expr pos:start="169:20" pos:end="169:24"><name pos:start="169:20" pos:end="169:24">sd_r1</name></expr>;</return>



        <default pos:start="173:9" pos:end="173:16">default:</default>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="179:9" pos:end="179:14">break;</break>



    <case pos:start="183:5" pos:end="183:12">case <expr pos:start="183:10" pos:end="183:11"><literal type="number" pos:start="183:10" pos:end="183:11">51</literal></expr>:</case>	<comment type="block" pos:start="183:17" pos:end="183:38">/* ACMD51: SEND_SCR */</comment>

        <switch pos:start="185:9" pos:end="203:9">switch <condition pos:start="185:16" pos:end="185:26">(<expr pos:start="185:17" pos:end="185:25"><name pos:start="185:17" pos:end="185:25"><name pos:start="185:17" pos:end="185:18">sd</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:25">state</name></name></expr>)</condition> <block pos:start="185:28" pos:end="203:9">{<block_content pos:start="187:9" pos:end="201:18">

        <case pos:start="187:9" pos:end="187:31">case <expr pos:start="187:14" pos:end="187:30"><name pos:start="187:14" pos:end="187:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="189:13" pos:end="189:45"><expr pos:start="189:13" pos:end="189:44"><name pos:start="189:13" pos:end="189:21"><name pos:start="189:13" pos:end="189:14">sd</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:21">state</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:44">sd_sendingdata_state</name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:31"><expr pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:14">sd</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:26">data_start</name></name> <operator pos:start="191:28" pos:end="191:28">=</operator> <literal type="number" pos:start="191:30" pos:end="191:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:32"><expr pos:start="193:13" pos:end="193:31"><name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:14">sd</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:27">data_offset</name></name> <operator pos:start="193:29" pos:end="193:29">=</operator> <literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr>;</expr_stmt>

            <return pos:start="195:13" pos:end="195:25">return <expr pos:start="195:20" pos:end="195:24"><name pos:start="195:20" pos:end="195:24">sd_r1</name></expr>;</return>



        <default pos:start="199:9" pos:end="199:16">default:</default>

            <break pos:start="201:13" pos:end="201:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="205:9" pos:end="205:14">break;</break>



    <default pos:start="209:5" pos:end="209:12">default:</default>

        <comment type="block" pos:start="211:9" pos:end="211:46">/* Fall back to standard commands.  */</comment>

        <return pos:start="213:9" pos:end="213:42">return <expr pos:start="213:16" pos:end="213:41"><call pos:start="213:16" pos:end="213:41"><name pos:start="213:16" pos:end="213:32">sd_normal_command</name><argument_list pos:start="213:33" pos:end="213:41">(<argument pos:start="213:34" pos:end="213:35"><expr pos:start="213:34" pos:end="213:35"><name pos:start="213:34" pos:end="213:35">sd</name></expr></argument>, <argument pos:start="213:38" pos:end="213:40"><expr pos:start="213:38" pos:end="213:40"><name pos:start="213:38" pos:end="213:40">req</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="219:5" pos:end="219:62"><expr pos:start="219:5" pos:end="219:61"><call pos:start="219:5" pos:end="219:61"><name pos:start="219:5" pos:end="219:11">fprintf</name><argument_list pos:start="219:12" pos:end="219:61">(<argument pos:start="219:13" pos:end="219:18"><expr pos:start="219:13" pos:end="219:18"><name pos:start="219:13" pos:end="219:18">stderr</name></expr></argument>, <argument pos:start="219:21" pos:end="219:51"><expr pos:start="219:21" pos:end="219:51"><literal type="string" pos:start="219:21" pos:end="219:51">"SD: ACMD%i in a wrong state\n"</literal></expr></argument>, <argument pos:start="219:54" pos:end="219:60"><expr pos:start="219:54" pos:end="219:60"><name pos:start="219:54" pos:end="219:60"><name pos:start="219:54" pos:end="219:56">req</name><operator pos:start="219:57" pos:end="219:57">.</operator><name pos:start="219:58" pos:end="219:60">cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="221:5" pos:end="221:22">return <expr pos:start="221:12" pos:end="221:21"><name pos:start="221:12" pos:end="221:21">sd_illegal</name></expr>;</return>

</block_content>}</block></function>
</unit>
