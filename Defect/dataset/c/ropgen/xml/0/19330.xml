<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19330.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">test_init</name><parameter_list pos:start="1:22" pos:end="1:34">(<parameter pos:start="1:23" pos:end="1:33"><decl pos:start="1:23" pos:end="1:33"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:30">TestData</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:65">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">QPCIBus</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">QTestState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">qs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:11">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:68"><expr pos:start="13:5" pos:end="13:67"><name pos:start="13:5" pos:end="13:5">s</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <call pos:start="13:9" pos:end="13:67"><name pos:start="13:9" pos:end="13:23">g_strdup_printf</name><argument_list pos:start="13:24" pos:end="13:67">(<argument pos:start="13:25" pos:end="13:41"><expr pos:start="13:25" pos:end="13:41"><literal type="string" pos:start="13:25" pos:end="13:41">"-machine q35 %s"</literal></expr></argument>, <argument pos:start="13:44" pos:end="13:66"><expr pos:start="13:44" pos:end="13:66"><ternary pos:start="13:44" pos:end="13:66"><condition pos:start="13:44" pos:end="13:53"><expr pos:start="13:44" pos:end="13:51"><operator pos:start="13:44" pos:end="13:44">!</operator><name pos:start="13:45" pos:end="13:51"><name pos:start="13:45" pos:end="13:45">d</name><operator pos:start="13:46" pos:end="13:47">-&gt;</operator><name pos:start="13:48" pos:end="13:51">args</name></name></expr> ?</condition><then pos:start="13:55" pos:end="13:56"> <expr pos:start="13:55" pos:end="13:56"><literal type="string" pos:start="13:55" pos:end="13:56">""</literal></expr> </then><else pos:start="13:58" pos:end="13:66">: <expr pos:start="13:60" pos:end="13:66"><name pos:start="13:60" pos:end="13:66"><name pos:start="13:60" pos:end="13:60">d</name><operator pos:start="13:61" pos:end="13:62">-&gt;</operator><name pos:start="13:63" pos:end="13:66">args</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:24"><expr pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:6">qs</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:23"><name pos:start="15:10" pos:end="15:20">qtest_start</name><argument_list pos:start="15:21" pos:end="15:23">(<argument pos:start="15:22" pos:end="15:22"><expr pos:start="15:22" pos:end="15:22"><name pos:start="15:22" pos:end="15:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><call pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:26">qtest_irq_intercept_in</name><argument_list pos:start="17:27" pos:end="17:40">(<argument pos:start="17:28" pos:end="17:29"><expr pos:start="17:28" pos:end="17:29"><name pos:start="17:28" pos:end="17:29">qs</name></expr></argument>, <argument pos:start="17:32" pos:end="17:39"><expr pos:start="17:32" pos:end="17:39"><literal type="string" pos:start="17:32" pos:end="17:39">"ioapic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:14"><expr pos:start="19:5" pos:end="19:13"><call pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:10">g_free</name><argument_list pos:start="19:11" pos:end="19:13">(<argument pos:start="19:12" pos:end="19:12"><expr pos:start="19:12" pos:end="19:12"><name pos:start="19:12" pos:end="19:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:7">bus</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:24"><name pos:start="23:11" pos:end="23:22">qpci_init_pc</name><argument_list pos:start="23:23" pos:end="23:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:59"><expr pos:start="25:5" pos:end="25:58"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:5">d</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:10">dev</name></name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:58"><name pos:start="25:14" pos:end="25:29">qpci_device_find</name><argument_list pos:start="25:30" pos:end="25:58">(<argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">bus</name></expr></argument>, <argument pos:start="25:36" pos:end="25:57"><expr pos:start="25:36" pos:end="25:57"><call pos:start="25:36" pos:end="25:57"><name pos:start="25:36" pos:end="25:45">QPCI_DEVFN</name><argument_list pos:start="25:46" pos:end="25:57">(<argument pos:start="25:47" pos:end="25:50"><expr pos:start="25:47" pos:end="25:50"><literal type="number" pos:start="25:47" pos:end="25:50">0x1f</literal></expr></argument>, <argument pos:start="25:53" pos:end="25:56"><expr pos:start="25:53" pos:end="25:56"><literal type="number" pos:start="25:53" pos:end="25:56">0x00</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><call pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:12">g_assert</name><argument_list pos:start="27:13" pos:end="27:28">(<argument pos:start="27:14" pos:end="27:27"><expr pos:start="27:14" pos:end="27:27"><name pos:start="27:14" pos:end="27:19"><name pos:start="27:14" pos:end="27:14">d</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:19">dev</name></name> <operator pos:start="27:21" pos:end="27:22">!=</operator> <name pos:start="27:24" pos:end="27:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:45">/* map PCI-to-LPC bridge interface BAR */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">d</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:15">lpc_base</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:45"><name pos:start="33:19" pos:end="33:28">qpci_iomap</name><argument_list pos:start="33:29" pos:end="33:45">(<argument pos:start="33:30" pos:end="33:35"><expr pos:start="33:30" pos:end="33:35"><name pos:start="33:30" pos:end="33:35"><name pos:start="33:30" pos:end="33:30">d</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:35">dev</name></name></expr></argument>, <argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><literal type="number" pos:start="33:38" pos:end="33:38">0</literal></expr></argument>, <argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><name pos:start="33:41" pos:end="33:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:22">qpci_device_enable</name><argument_list pos:start="37:23" pos:end="37:30">(<argument pos:start="37:24" pos:end="37:29"><expr pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:24">d</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:29">dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:34"><expr pos:start="41:5" pos:end="41:33"><call pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:12">g_assert</name><argument_list pos:start="41:13" pos:end="41:33">(<argument pos:start="41:14" pos:end="41:32"><expr pos:start="41:14" pos:end="41:32"><name pos:start="41:14" pos:end="41:24"><name pos:start="41:14" pos:end="41:14">d</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:24">lpc_base</name></name> <operator pos:start="41:26" pos:end="41:27">!=</operator> <name pos:start="41:29" pos:end="41:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:44">/* set ACPI PM I/O space base address */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:46"><expr pos:start="47:5" pos:end="49:45"><call pos:start="47:5" pos:end="49:45"><name pos:start="47:5" pos:end="47:22">qpci_config_writel</name><argument_list pos:start="47:23" pos:end="49:45">(<argument pos:start="47:24" pos:end="47:29"><expr pos:start="47:24" pos:end="47:29"><name pos:start="47:24" pos:end="47:29"><name pos:start="47:24" pos:end="47:24">d</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:29">dev</name></name></expr></argument>, <argument pos:start="47:32" pos:end="47:71"><expr pos:start="47:32" pos:end="47:71"><operator pos:start="47:32" pos:end="47:32">(</operator><name pos:start="47:33" pos:end="47:41">uintptr_t</name><operator pos:start="47:42" pos:end="47:42">)</operator><name pos:start="47:43" pos:end="47:53"><name pos:start="47:43" pos:end="47:43">d</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:53">lpc_base</name></name> <operator pos:start="47:55" pos:end="47:55">+</operator> <name pos:start="47:57" pos:end="47:71">ICH9_LPC_PMBASE</name></expr></argument>,

                       <argument pos:start="49:24" pos:end="49:44"><expr pos:start="49:24" pos:end="49:44"><name pos:start="49:24" pos:end="49:38">PM_IO_BASE_ADDR</name> <operator pos:start="49:40" pos:end="49:40">|</operator> <literal type="number" pos:start="49:42" pos:end="49:44">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:25">/* enable ACPI I/O */</comment>

    <expr_stmt pos:start="53:5" pos:end="55:29"><expr pos:start="53:5" pos:end="55:28"><call pos:start="53:5" pos:end="55:28"><name pos:start="53:5" pos:end="53:22">qpci_config_writeb</name><argument_list pos:start="53:23" pos:end="55:28">(<argument pos:start="53:24" pos:end="53:29"><expr pos:start="53:24" pos:end="53:29"><name pos:start="53:24" pos:end="53:29"><name pos:start="53:24" pos:end="53:24">d</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:29">dev</name></name></expr></argument>, <argument pos:start="53:32" pos:end="53:74"><expr pos:start="53:32" pos:end="53:74"><operator pos:start="53:32" pos:end="53:32">(</operator><name pos:start="53:33" pos:end="53:41">uintptr_t</name><operator pos:start="53:42" pos:end="53:42">)</operator><name pos:start="53:43" pos:end="53:53"><name pos:start="53:43" pos:end="53:43">d</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:53">lpc_base</name></name> <operator pos:start="53:55" pos:end="53:55">+</operator> <name pos:start="53:57" pos:end="53:74">ICH9_LPC_ACPI_CTRL</name></expr></argument>,

                       <argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><literal type="number" pos:start="55:24" pos:end="55:27">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:30">/* set Root Complex BAR */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:45"><expr pos:start="59:5" pos:end="61:44"><call pos:start="59:5" pos:end="61:44"><name pos:start="59:5" pos:end="59:22">qpci_config_writel</name><argument_list pos:start="59:23" pos:end="61:44">(<argument pos:start="59:24" pos:end="59:29"><expr pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:24">d</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:29">dev</name></name></expr></argument>, <argument pos:start="59:32" pos:end="59:69"><expr pos:start="59:32" pos:end="59:69"><operator pos:start="59:32" pos:end="59:32">(</operator><name pos:start="59:33" pos:end="59:41">uintptr_t</name><operator pos:start="59:42" pos:end="59:42">)</operator><name pos:start="59:43" pos:end="59:53"><name pos:start="59:43" pos:end="59:43">d</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:53">lpc_base</name></name> <operator pos:start="59:55" pos:end="59:55">+</operator> <name pos:start="59:57" pos:end="59:69">ICH9_LPC_RCBA</name></expr></argument>,

                       <argument pos:start="61:24" pos:end="61:43"><expr pos:start="61:24" pos:end="61:43"><name pos:start="61:24" pos:end="61:37">RCBA_BASE_ADDR</name> <operator pos:start="61:39" pos:end="61:39">|</operator> <literal type="number" pos:start="61:41" pos:end="61:43">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:65"><expr pos:start="65:5" pos:end="65:64"><name pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:5">d</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:18">tco_io_base</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:26">void</name> <operator pos:start="65:28" pos:end="65:28">*</operator><operator pos:start="65:29" pos:end="65:29">)</operator><operator pos:start="65:30" pos:end="65:30">(</operator><operator pos:start="65:31" pos:end="65:31">(</operator><name pos:start="65:32" pos:end="65:40">uintptr_t</name><operator pos:start="65:41" pos:end="65:41">)</operator><name pos:start="65:42" pos:end="65:56">PM_IO_BASE_ADDR</name> <operator pos:start="65:58" pos:end="65:58">+</operator> <literal type="number" pos:start="65:60" pos:end="65:63">0x60</literal><operator pos:start="65:64" pos:end="65:64">)</operator></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
