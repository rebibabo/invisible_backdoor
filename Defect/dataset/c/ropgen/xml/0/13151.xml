<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13151.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">avcodec_decode_audio2</name><parameter_list pos:start="1:26" pos:end="5:52">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:65"><decl pos:start="1:50" pos:end="1:65"><type pos:start="1:50" pos:end="1:65"><name pos:start="1:50" pos:end="1:56">int16_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">samples</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:44"><decl pos:start="3:26" pos:end="3:44"><type pos:start="3:26" pos:end="3:44"><name pos:start="3:26" pos:end="3:28">int</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:44">frame_size_ptr</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:37"><decl pos:start="5:26" pos:end="5:37"><type pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:32">uint8_t</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:37">buf</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:51"><decl pos:start="5:40" pos:end="5:51"><type pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:51">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="53:1">{<block_content pos:start="9:5" pos:end="51:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:107">//FIXME remove the check below _after_ ensuring that all audio check that the available space is enough</comment>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if<condition pos:start="15:7" pos:end="15:54">(<expr pos:start="15:8" pos:end="15:53"><operator pos:start="15:8" pos:end="15:8">*</operator><name pos:start="15:9" pos:end="15:22">frame_size_ptr</name> <operator pos:start="15:24" pos:end="15:24">&lt;</operator> <name pos:start="15:26" pos:end="15:53">AVCODEC_MAX_AUDIO_FRAME_SIZE</name></expr>)</condition><block pos:start="15:55" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:90"><expr pos:start="17:9" pos:end="17:89"><call pos:start="17:9" pos:end="17:89"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:89">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:88"><expr pos:start="17:37" pos:end="17:88"><literal type="string" pos:start="17:37" pos:end="17:88">"buffer smaller than AVCODEC_MAX_AUDIO_FRAME_SIZE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if<condition pos:start="23:7" pos:end="27:34">(<expr pos:start="23:8" pos:end="27:33"><operator pos:start="23:8" pos:end="23:8">*</operator><name pos:start="23:9" pos:end="23:22">frame_size_ptr</name> <operator pos:start="23:24" pos:end="23:24">&lt;</operator> <name pos:start="23:26" pos:end="23:43">FF_MIN_BUFFER_SIZE</name> <operator pos:start="23:45" pos:end="23:46">||</operator>

       <operator pos:start="25:8" pos:end="25:8">*</operator><name pos:start="25:9" pos:end="25:22">frame_size_ptr</name> <operator pos:start="25:24" pos:end="25:24">&lt;</operator> <name pos:start="25:26" pos:end="25:40"><name pos:start="25:26" pos:end="25:30">avctx</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:40">channels</name></name> <operator pos:start="25:42" pos:end="25:42">*</operator> <name pos:start="25:44" pos:end="25:60"><name pos:start="25:44" pos:end="25:48">avctx</name><operator pos:start="25:49" pos:end="25:50">-&gt;</operator><name pos:start="25:51" pos:end="25:60">frame_size</name></name> <operator pos:start="25:62" pos:end="25:62">*</operator> <sizeof pos:start="25:64" pos:end="25:78">sizeof<argument_list pos:start="25:70" pos:end="25:78">(<argument pos:start="25:71" pos:end="25:77"><expr pos:start="25:71" pos:end="25:77"><name pos:start="25:71" pos:end="25:77">int16_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="25:80" pos:end="25:81">||</operator>

       <operator pos:start="27:8" pos:end="27:8">*</operator><name pos:start="27:9" pos:end="27:22">frame_size_ptr</name> <operator pos:start="27:24" pos:end="27:24">&lt;</operator> <name pos:start="27:26" pos:end="27:33">buf_size</name></expr>)</condition><block pos:start="27:35" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:78"><expr pos:start="29:9" pos:end="29:77"><call pos:start="29:9" pos:end="29:77"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:77">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:59"><expr pos:start="29:37" pos:end="29:59"><literal type="string" pos:start="29:37" pos:end="29:59">"buffer %d too small\n"</literal></expr></argument>, <argument pos:start="29:62" pos:end="29:76"><expr pos:start="29:62" pos:end="29:76"><operator pos:start="29:62" pos:end="29:62">*</operator><name pos:start="29:63" pos:end="29:76">frame_size_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="49:5"><if pos:start="35:5" pos:end="43:5">if<condition pos:start="35:7" pos:end="35:66">(<expr pos:start="35:8" pos:end="35:65"><operator pos:start="35:8" pos:end="35:8">(</operator><name pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:13">avctx</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">codec</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:34">capabilities</name></name> <operator pos:start="35:36" pos:end="35:36">&amp;</operator> <name pos:start="35:38" pos:end="35:52">CODEC_CAP_DELAY</name><operator pos:start="35:53" pos:end="35:53">)</operator> <operator pos:start="35:55" pos:end="35:56">||</operator> <name pos:start="35:58" pos:end="35:65">buf_size</name></expr>)</condition><block pos:start="35:67" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:30">

        <expr_stmt pos:start="37:9" pos:end="39:47"><expr pos:start="37:9" pos:end="39:46"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="39:46"><name pos:start="37:15" pos:end="37:34"><name pos:start="37:15" pos:end="37:19">avctx</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:26">codec</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:34">decode</name></name><argument_list pos:start="37:35" pos:end="39:46">(<argument pos:start="37:36" pos:end="37:40"><expr pos:start="37:36" pos:end="37:40"><name pos:start="37:36" pos:end="37:40">avctx</name></expr></argument>, <argument pos:start="37:43" pos:end="37:49"><expr pos:start="37:43" pos:end="37:49"><name pos:start="37:43" pos:end="37:49">samples</name></expr></argument>, <argument pos:start="37:52" pos:end="37:65"><expr pos:start="37:52" pos:end="37:65"><name pos:start="37:52" pos:end="37:65">frame_size_ptr</name></expr></argument>,

                                <argument pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:35">buf</name></expr></argument>, <argument pos:start="39:38" pos:end="39:45"><expr pos:start="39:38" pos:end="39:45"><name pos:start="39:38" pos:end="39:45">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:27">frame_number</name></name><operator pos:start="41:28" pos:end="41:29">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="43:6" pos:end="49:5">else<block pos:start="43:10" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:26">

        <expr_stmt pos:start="45:9" pos:end="45:15"><expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:11">ret</name><operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><operator pos:start="47:9" pos:end="47:9">*</operator><name pos:start="47:10" pos:end="47:23">frame_size_ptr</name><operator pos:start="47:24" pos:end="47:24">=</operator><literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
