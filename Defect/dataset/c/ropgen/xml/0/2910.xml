<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2910.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_coeffs</name><parameter_list pos:start="1:25" pos:end="1:51">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><name pos:start="1:26" pos:end="1:40">WMAProDecodeCtx</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:50"><decl pos:start="1:46" pos:end="1:50"><type pos:start="1:46" pos:end="1:50"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:50">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="11:5" pos:end="191:13">

    <comment type="block" pos:start="5:5" pos:end="9:45">/* Integers 0..15 as single-precision floats.  The table saves a

       costly int to float conversion, and storing the values as

       integers allows fast sign-flipping. */</comment>

    <decl_stmt pos:start="11:5" pos:end="21:6"><decl pos:start="11:5" pos:end="21:5"><type pos:start="11:5" pos:end="11:20"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <specifier pos:start="11:12" pos:end="11:16">const</specifier> <name pos:start="11:18" pos:end="11:20">int</name></type> <name pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:29">fval_tab</name><index pos:start="11:30" pos:end="11:33">[<expr pos:start="11:31" pos:end="11:32"><literal type="number" pos:start="11:31" pos:end="11:32">16</literal></expr>]</index></name> <init pos:start="11:35" pos:end="21:5">= <expr pos:start="11:37" pos:end="21:5"><block pos:start="11:37" pos:end="21:5">{

        <expr pos:start="13:9" pos:end="13:18"><literal type="number" pos:start="13:9" pos:end="13:18">0x00000000</literal></expr>, <expr pos:start="13:21" pos:end="13:30"><literal type="number" pos:start="13:21" pos:end="13:30">0x3f800000</literal></expr>, <expr pos:start="13:33" pos:end="13:42"><literal type="number" pos:start="13:33" pos:end="13:42">0x40000000</literal></expr>, <expr pos:start="13:45" pos:end="13:54"><literal type="number" pos:start="13:45" pos:end="13:54">0x40400000</literal></expr>,

        <expr pos:start="15:9" pos:end="15:18"><literal type="number" pos:start="15:9" pos:end="15:18">0x40800000</literal></expr>, <expr pos:start="15:21" pos:end="15:30"><literal type="number" pos:start="15:21" pos:end="15:30">0x40a00000</literal></expr>, <expr pos:start="15:33" pos:end="15:42"><literal type="number" pos:start="15:33" pos:end="15:42">0x40c00000</literal></expr>, <expr pos:start="15:45" pos:end="15:54"><literal type="number" pos:start="15:45" pos:end="15:54">0x40e00000</literal></expr>,

        <expr pos:start="17:9" pos:end="17:18"><literal type="number" pos:start="17:9" pos:end="17:18">0x41000000</literal></expr>, <expr pos:start="17:21" pos:end="17:30"><literal type="number" pos:start="17:21" pos:end="17:30">0x41100000</literal></expr>, <expr pos:start="17:33" pos:end="17:42"><literal type="number" pos:start="17:33" pos:end="17:42">0x41200000</literal></expr>, <expr pos:start="17:45" pos:end="17:54"><literal type="number" pos:start="17:45" pos:end="17:54">0x41300000</literal></expr>,

        <expr pos:start="19:9" pos:end="19:18"><literal type="number" pos:start="19:9" pos:end="19:18">0x41400000</literal></expr>, <expr pos:start="19:21" pos:end="19:30"><literal type="number" pos:start="19:21" pos:end="19:30">0x41500000</literal></expr>, <expr pos:start="19:33" pos:end="19:42"><literal type="number" pos:start="19:33" pos:end="19:42">0x41600000</literal></expr>, <expr pos:start="19:45" pos:end="19:54"><literal type="number" pos:start="19:45" pos:end="19:54">0x41700000</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">vlctable</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:13"><decl pos:start="25:5" pos:end="25:12"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:7">VLC</name><modifier pos:start="25:8" pos:end="25:8">*</modifier></type> <name pos:start="25:10" pos:end="25:12">vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:42"><decl pos:start="27:5" pos:end="27:41"><type pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:20">WMAProChannelCtx</name><modifier pos:start="27:21" pos:end="27:21">*</modifier></type> <name pos:start="27:23" pos:end="27:24">ci</name> <init pos:start="27:26" pos:end="27:41">= <expr pos:start="27:28" pos:end="27:41"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:29">s</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:38">channel</name><index pos:start="27:39" pos:end="27:41">[<expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:15">rl_mode</name> <init pos:start="29:17" pos:end="29:19">= <expr pos:start="29:19" pos:end="29:19"><literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:17">cur_coeff</name> <init pos:start="31:19" pos:end="31:21">= <expr pos:start="31:21" pos:end="31:21"><literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:17">num_zeros</name> <init pos:start="33:19" pos:end="33:21">= <expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:19"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:18">uint16_t</name><modifier pos:start="35:19" pos:end="35:19">*</modifier></type> <name pos:start="35:21" pos:end="35:23">run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:23"><decl pos:start="37:5" pos:end="37:22"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:15">float</name><modifier pos:start="37:16" pos:end="37:16">*</modifier></type> <name pos:start="37:18" pos:end="37:22">level</name></decl>;</decl_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:65"><expr pos:start="41:5" pos:end="41:64"><call pos:start="41:5" pos:end="41:64"><name pos:start="41:5" pos:end="41:11">av_dlog</name><argument_list pos:start="41:12" pos:end="41:64">(<argument pos:start="41:13" pos:end="41:20"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:20">avctx</name></name></expr></argument>, <argument pos:start="41:23" pos:end="41:60"><expr pos:start="41:23" pos:end="41:60"><literal type="string" pos:start="41:23" pos:end="41:60">"decode coefficients for channel %i\n"</literal></expr></argument>, <argument pos:start="41:63" pos:end="41:63"><expr pos:start="41:63" pos:end="41:63"><name pos:start="41:63" pos:end="41:63">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:12">vlctable</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:32"><name pos:start="45:16" pos:end="45:24">get_bits1</name><argument_list pos:start="45:25" pos:end="45:32">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:31"><name pos:start="45:27" pos:end="45:27">s</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:7">vlc</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <operator pos:start="47:11" pos:end="47:11">&amp;</operator><name pos:start="47:12" pos:end="47:29"><name pos:start="47:12" pos:end="47:19">coef_vlc</name><index pos:start="47:20" pos:end="47:29">[<expr pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:28">vlctable</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="63:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:17">(<expr pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:16">vlctable</name></expr>)</condition> <block pos:start="51:19" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:28">

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:11">run</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:23">coef1_run</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:28"><expr pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:13">level</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:27">coef1_level</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="63:5">else <block pos:start="57:12" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:28">

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:11">run</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:23">coef0_run</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:28"><expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:13">level</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:27">coef0_level</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" format="doxygen" pos:start="67:5" pos:end="69:37">/** decode vector coefficients (consumes up to 167 bits per iteration for

      4 vector coded large values) */</comment>

    <while pos:start="71:5" pos:end="165:5">while <condition pos:start="71:11" pos:end="73:48">(<expr pos:start="71:12" pos:end="73:47"><operator pos:start="71:12" pos:end="71:12">(</operator><name pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:38">transmit_num_vec_coeffs</name></name> <operator pos:start="71:40" pos:end="71:41">||</operator> <operator pos:start="71:43" pos:end="71:43">!</operator><name pos:start="71:44" pos:end="71:50">rl_mode</name><operator pos:start="71:51" pos:end="71:51">)</operator> <operator pos:start="71:53" pos:end="71:54">&amp;&amp;</operator>

           <operator pos:start="73:12" pos:end="73:12">(</operator><name pos:start="73:13" pos:end="73:21">cur_coeff</name> <operator pos:start="73:23" pos:end="73:23">+</operator> <literal type="number" pos:start="73:25" pos:end="73:25">3</literal> <operator pos:start="73:27" pos:end="73:27">&lt;</operator> <name pos:start="73:29" pos:end="73:46"><name pos:start="73:29" pos:end="73:30">ci</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:46">num_vec_coeffs</name></name><operator pos:start="73:47" pos:end="73:47">)</operator></expr>)</condition> <block pos:start="73:50" pos:end="165:5">{<block_content pos:start="75:9" pos:end="163:9">

        <decl_stmt pos:start="75:9" pos:end="75:20"><decl pos:start="75:9" pos:end="75:19"><type pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">int</name></type> <name pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">vals</name><index pos:start="75:17" pos:end="75:19">[<expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">4</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:14"><decl pos:start="77:9" pos:end="77:13"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:25"><decl pos:start="79:9" pos:end="79:24"><type pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:16">unsigned</name> <name pos:start="79:18" pos:end="79:20">int</name></type> <name pos:start="79:22" pos:end="79:24">idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:70"><expr pos:start="83:9" pos:end="83:69"><name pos:start="83:9" pos:end="83:11">idx</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:69"><name pos:start="83:15" pos:end="83:22">get_vlc2</name><argument_list pos:start="83:23" pos:end="83:69">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><operator pos:start="83:24" pos:end="83:24">&amp;</operator><name pos:start="83:25" pos:end="83:29"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:29">gb</name></name></expr></argument>, <argument pos:start="83:32" pos:end="83:45"><expr pos:start="83:32" pos:end="83:45"><name pos:start="83:32" pos:end="83:45"><name pos:start="83:32" pos:end="83:39">vec4_vlc</name><operator pos:start="83:40" pos:end="83:40">.</operator><name pos:start="83:41" pos:end="83:45">table</name></name></expr></argument>, <argument pos:start="83:48" pos:end="83:54"><expr pos:start="83:48" pos:end="83:54"><name pos:start="83:48" pos:end="83:54">VLCBITS</name></expr></argument>, <argument pos:start="83:57" pos:end="83:68"><expr pos:start="83:57" pos:end="83:68"><name pos:start="83:57" pos:end="83:68">VEC4MAXDEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="133:9"><if pos:start="87:9" pos:end="123:9">if <condition pos:start="87:12" pos:end="87:38">(<expr pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:15">idx</name> <operator pos:start="87:17" pos:end="87:18">==</operator> <name pos:start="87:20" pos:end="87:33">HUFF_VEC4_SIZE</name> <operator pos:start="87:35" pos:end="87:35">-</operator> <literal type="number" pos:start="87:37" pos:end="87:37">1</literal></expr>)</condition> <block pos:start="87:40" pos:end="123:9">{<block_content pos:start="89:13" pos:end="121:13">

            <for pos:start="89:13" pos:end="121:13">for <control pos:start="89:17" pos:end="89:38">(<init pos:start="89:18" pos:end="89:23"><expr pos:start="89:18" pos:end="89:22"><name pos:start="89:18" pos:end="89:18">i</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>;</init> <condition pos:start="89:25" pos:end="89:30"><expr pos:start="89:25" pos:end="89:29"><name pos:start="89:25" pos:end="89:25">i</name> <operator pos:start="89:27" pos:end="89:27">&lt;</operator> <literal type="number" pos:start="89:29" pos:end="89:29">4</literal></expr>;</condition> <incr pos:start="89:32" pos:end="89:37"><expr pos:start="89:32" pos:end="89:37"><name pos:start="89:32" pos:end="89:32">i</name> <operator pos:start="89:34" pos:end="89:35">+=</operator> <literal type="number" pos:start="89:37" pos:end="89:37">2</literal></expr></incr>)</control> <block pos:start="89:40" pos:end="121:13">{<block_content pos:start="91:17" pos:end="119:17">

                <expr_stmt pos:start="91:17" pos:end="91:78"><expr pos:start="91:17" pos:end="91:77"><name pos:start="91:17" pos:end="91:19">idx</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:77"><name pos:start="91:23" pos:end="91:30">get_vlc2</name><argument_list pos:start="91:31" pos:end="91:77">(<argument pos:start="91:32" pos:end="91:37"><expr pos:start="91:32" pos:end="91:37"><operator pos:start="91:32" pos:end="91:32">&amp;</operator><name pos:start="91:33" pos:end="91:37"><name pos:start="91:33" pos:end="91:33">s</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:37">gb</name></name></expr></argument>, <argument pos:start="91:40" pos:end="91:53"><expr pos:start="91:40" pos:end="91:53"><name pos:start="91:40" pos:end="91:53"><name pos:start="91:40" pos:end="91:47">vec2_vlc</name><operator pos:start="91:48" pos:end="91:48">.</operator><name pos:start="91:49" pos:end="91:53">table</name></name></expr></argument>, <argument pos:start="91:56" pos:end="91:62"><expr pos:start="91:56" pos:end="91:62"><name pos:start="91:56" pos:end="91:62">VLCBITS</name></expr></argument>, <argument pos:start="91:65" pos:end="91:76"><expr pos:start="91:65" pos:end="91:76"><name pos:start="91:65" pos:end="91:76">VEC2MAXDEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="119:17"><if pos:start="93:17" pos:end="113:17">if <condition pos:start="93:20" pos:end="93:46">(<expr pos:start="93:21" pos:end="93:45"><name pos:start="93:21" pos:end="93:23">idx</name> <operator pos:start="93:25" pos:end="93:26">==</operator> <name pos:start="93:28" pos:end="93:41">HUFF_VEC2_SIZE</name> <operator pos:start="93:43" pos:end="93:43">-</operator> <literal type="number" pos:start="93:45" pos:end="93:45">1</literal></expr>)</condition> <block pos:start="93:48" pos:end="113:17">{<block_content pos:start="95:21" pos:end="111:45">

                    <decl_stmt pos:start="95:21" pos:end="95:31"><decl pos:start="95:21" pos:end="95:26"><type pos:start="95:21" pos:end="95:23"><name pos:start="95:21" pos:end="95:23">int</name></type> <name pos:start="95:25" pos:end="95:26">v0</name></decl>, <decl pos:start="95:29" pos:end="95:30"><type ref="prev" pos:start="95:21" pos:end="95:23"/><name pos:start="95:29" pos:end="95:30">v1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:81"><expr pos:start="97:21" pos:end="97:80"><name pos:start="97:21" pos:end="97:22">v0</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:80"><name pos:start="97:26" pos:end="97:33">get_vlc2</name><argument_list pos:start="97:34" pos:end="97:80">(<argument pos:start="97:35" pos:end="97:40"><expr pos:start="97:35" pos:end="97:40"><operator pos:start="97:35" pos:end="97:35">&amp;</operator><name pos:start="97:36" pos:end="97:40"><name pos:start="97:36" pos:end="97:36">s</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:40">gb</name></name></expr></argument>, <argument pos:start="97:43" pos:end="97:56"><expr pos:start="97:43" pos:end="97:56"><name pos:start="97:43" pos:end="97:56"><name pos:start="97:43" pos:end="97:50">vec1_vlc</name><operator pos:start="97:51" pos:end="97:51">.</operator><name pos:start="97:52" pos:end="97:56">table</name></name></expr></argument>, <argument pos:start="97:59" pos:end="97:65"><expr pos:start="97:59" pos:end="97:65"><name pos:start="97:59" pos:end="97:65">VLCBITS</name></expr></argument>, <argument pos:start="97:68" pos:end="97:79"><expr pos:start="97:68" pos:end="97:79"><name pos:start="97:68" pos:end="97:79">VEC1MAXDEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="99:21" pos:end="101:59"><if pos:start="99:21" pos:end="101:59">if <condition pos:start="99:24" pos:end="99:49">(<expr pos:start="99:25" pos:end="99:48"><name pos:start="99:25" pos:end="99:26">v0</name> <operator pos:start="99:28" pos:end="99:29">==</operator> <name pos:start="99:31" pos:end="99:44">HUFF_VEC1_SIZE</name> <operator pos:start="99:46" pos:end="99:46">-</operator> <literal type="number" pos:start="99:48" pos:end="99:48">1</literal></expr>)</condition><block type="pseudo" pos:start="101:25" pos:end="101:59"><block_content pos:start="101:25" pos:end="101:59">

                        <expr_stmt pos:start="101:25" pos:end="101:59"><expr pos:start="101:25" pos:end="101:58"><name pos:start="101:25" pos:end="101:26">v0</name> <operator pos:start="101:28" pos:end="101:29">+=</operator> <call pos:start="101:31" pos:end="101:58"><name pos:start="101:31" pos:end="101:50">ff_wma_get_large_val</name><argument_list pos:start="101:51" pos:end="101:58">(<argument pos:start="101:52" pos:end="101:57"><expr pos:start="101:52" pos:end="101:57"><operator pos:start="101:52" pos:end="101:52">&amp;</operator><name pos:start="101:53" pos:end="101:57"><name pos:start="101:53" pos:end="101:53">s</name><operator pos:start="101:54" pos:end="101:55">-&gt;</operator><name pos:start="101:56" pos:end="101:57">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:81"><expr pos:start="103:21" pos:end="103:80"><name pos:start="103:21" pos:end="103:22">v1</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:80"><name pos:start="103:26" pos:end="103:33">get_vlc2</name><argument_list pos:start="103:34" pos:end="103:80">(<argument pos:start="103:35" pos:end="103:40"><expr pos:start="103:35" pos:end="103:40"><operator pos:start="103:35" pos:end="103:35">&amp;</operator><name pos:start="103:36" pos:end="103:40"><name pos:start="103:36" pos:end="103:36">s</name><operator pos:start="103:37" pos:end="103:38">-&gt;</operator><name pos:start="103:39" pos:end="103:40">gb</name></name></expr></argument>, <argument pos:start="103:43" pos:end="103:56"><expr pos:start="103:43" pos:end="103:56"><name pos:start="103:43" pos:end="103:56"><name pos:start="103:43" pos:end="103:50">vec1_vlc</name><operator pos:start="103:51" pos:end="103:51">.</operator><name pos:start="103:52" pos:end="103:56">table</name></name></expr></argument>, <argument pos:start="103:59" pos:end="103:65"><expr pos:start="103:59" pos:end="103:65"><name pos:start="103:59" pos:end="103:65">VLCBITS</name></expr></argument>, <argument pos:start="103:68" pos:end="103:79"><expr pos:start="103:68" pos:end="103:79"><name pos:start="103:68" pos:end="103:79">VEC1MAXDEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="105:21" pos:end="107:59"><if pos:start="105:21" pos:end="107:59">if <condition pos:start="105:24" pos:end="105:49">(<expr pos:start="105:25" pos:end="105:48"><name pos:start="105:25" pos:end="105:26">v1</name> <operator pos:start="105:28" pos:end="105:29">==</operator> <name pos:start="105:31" pos:end="105:44">HUFF_VEC1_SIZE</name> <operator pos:start="105:46" pos:end="105:46">-</operator> <literal type="number" pos:start="105:48" pos:end="105:48">1</literal></expr>)</condition><block type="pseudo" pos:start="107:25" pos:end="107:59"><block_content pos:start="107:25" pos:end="107:59">

                        <expr_stmt pos:start="107:25" pos:end="107:59"><expr pos:start="107:25" pos:end="107:58"><name pos:start="107:25" pos:end="107:26">v1</name> <operator pos:start="107:28" pos:end="107:29">+=</operator> <call pos:start="107:31" pos:end="107:58"><name pos:start="107:31" pos:end="107:50">ff_wma_get_large_val</name><argument_list pos:start="107:51" pos:end="107:58">(<argument pos:start="107:52" pos:end="107:57"><expr pos:start="107:52" pos:end="107:57"><operator pos:start="107:52" pos:end="107:52">&amp;</operator><name pos:start="107:53" pos:end="107:57"><name pos:start="107:53" pos:end="107:53">s</name><operator pos:start="107:54" pos:end="107:55">-&gt;</operator><name pos:start="107:56" pos:end="107:57">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:45"><expr pos:start="109:21" pos:end="109:44"><operator pos:start="109:21" pos:end="109:21">(</operator><operator pos:start="109:22" pos:end="109:22">(</operator><name pos:start="109:23" pos:end="109:27">float</name><operator pos:start="109:28" pos:end="109:28">*</operator><operator pos:start="109:29" pos:end="109:29">)</operator><name pos:start="109:30" pos:end="109:33">vals</name><operator pos:start="109:34" pos:end="109:34">)</operator><index pos:start="109:35" pos:end="109:39">[<expr pos:start="109:36" pos:end="109:36"><name pos:start="109:36" pos:end="109:36">i</name></expr>  ]</index> <operator pos:start="109:41" pos:end="109:41">=</operator> <name pos:start="109:43" pos:end="109:44">v0</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:45"><expr pos:start="111:21" pos:end="111:44"><operator pos:start="111:21" pos:end="111:21">(</operator><operator pos:start="111:22" pos:end="111:22">(</operator><name pos:start="111:23" pos:end="111:27">float</name><operator pos:start="111:28" pos:end="111:28">*</operator><operator pos:start="111:29" pos:end="111:29">)</operator><name pos:start="111:30" pos:end="111:33">vals</name><operator pos:start="111:34" pos:end="111:34">)</operator><index pos:start="111:35" pos:end="111:39">[<expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:36">i</name><operator pos:start="111:37" pos:end="111:37">+</operator><literal type="number" pos:start="111:38" pos:end="111:38">1</literal></expr>]</index> <operator pos:start="111:41" pos:end="111:41">=</operator> <name pos:start="111:43" pos:end="111:44">v1</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="113:19" pos:end="119:17">else <block pos:start="113:24" pos:end="119:17">{<block_content pos:start="115:21" pos:end="117:68">

                    <expr_stmt pos:start="115:21" pos:end="115:68"><expr pos:start="115:21" pos:end="115:67"><name pos:start="115:21" pos:end="115:27"><name pos:start="115:21" pos:end="115:24">vals</name><index pos:start="115:25" pos:end="115:27">[<expr pos:start="115:26" pos:end="115:26"><name pos:start="115:26" pos:end="115:26">i</name></expr>]</index></name>   <operator pos:start="115:31" pos:end="115:31">=</operator> <name pos:start="115:33" pos:end="115:67"><name pos:start="115:33" pos:end="115:40">fval_tab</name><index pos:start="115:41" pos:end="115:67">[<expr pos:start="115:42" pos:end="115:65"><name pos:start="115:42" pos:end="115:60"><name pos:start="115:42" pos:end="115:55">symbol_to_vec2</name><index pos:start="115:56" pos:end="115:60">[<expr pos:start="115:57" pos:end="115:59"><name pos:start="115:57" pos:end="115:59">idx</name></expr>]</index></name> <operator pos:start="115:62" pos:end="115:63">&gt;&gt;</operator> <literal type="number" pos:start="115:65" pos:end="115:65">4</literal></expr> ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:68"><expr pos:start="117:21" pos:end="117:67"><name pos:start="117:21" pos:end="117:29"><name pos:start="117:21" pos:end="117:24">vals</name><index pos:start="117:25" pos:end="117:29">[<expr pos:start="117:26" pos:end="117:28"><name pos:start="117:26" pos:end="117:26">i</name><operator pos:start="117:27" pos:end="117:27">+</operator><literal type="number" pos:start="117:28" pos:end="117:28">1</literal></expr>]</index></name> <operator pos:start="117:31" pos:end="117:31">=</operator> <name pos:start="117:33" pos:end="117:67"><name pos:start="117:33" pos:end="117:40">fval_tab</name><index pos:start="117:41" pos:end="117:67">[<expr pos:start="117:42" pos:end="117:66"><name pos:start="117:42" pos:end="117:60"><name pos:start="117:42" pos:end="117:55">symbol_to_vec2</name><index pos:start="117:56" pos:end="117:60">[<expr pos:start="117:57" pos:end="117:59"><name pos:start="117:57" pos:end="117:59">idx</name></expr>]</index></name> <operator pos:start="117:62" pos:end="117:62">&amp;</operator> <literal type="number" pos:start="117:64" pos:end="117:66">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="133:9">else <block pos:start="123:16" pos:end="133:9">{<block_content pos:start="125:13" pos:end="131:65">

            <expr_stmt pos:start="125:13" pos:end="125:65"><expr pos:start="125:13" pos:end="125:64"><name pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:16">vals</name><index pos:start="125:17" pos:end="125:19">[<expr pos:start="125:18" pos:end="125:18"><literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>]</index></name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:64"><name pos:start="125:23" pos:end="125:30">fval_tab</name><index pos:start="125:31" pos:end="125:64">[ <expr pos:start="125:33" pos:end="125:57"><name pos:start="125:33" pos:end="125:51"><name pos:start="125:33" pos:end="125:46">symbol_to_vec4</name><index pos:start="125:47" pos:end="125:51">[<expr pos:start="125:48" pos:end="125:50"><name pos:start="125:48" pos:end="125:50">idx</name></expr>]</index></name> <operator pos:start="125:53" pos:end="125:54">&gt;&gt;</operator> <literal type="number" pos:start="125:56" pos:end="125:57">12</literal></expr>      ]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:65"><expr pos:start="127:13" pos:end="127:64"><name pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:16">vals</name><index pos:start="127:17" pos:end="127:19">[<expr pos:start="127:18" pos:end="127:18"><literal type="number" pos:start="127:18" pos:end="127:18">1</literal></expr>]</index></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:64"><name pos:start="127:23" pos:end="127:30">fval_tab</name><index pos:start="127:31" pos:end="127:64">[<expr pos:start="127:32" pos:end="127:63"><operator pos:start="127:32" pos:end="127:32">(</operator><name pos:start="127:33" pos:end="127:51"><name pos:start="127:33" pos:end="127:46">symbol_to_vec4</name><index pos:start="127:47" pos:end="127:51">[<expr pos:start="127:48" pos:end="127:50"><name pos:start="127:48" pos:end="127:50">idx</name></expr>]</index></name> <operator pos:start="127:53" pos:end="127:54">&gt;&gt;</operator> <literal type="number" pos:start="127:56" pos:end="127:56">8</literal><operator pos:start="127:57" pos:end="127:57">)</operator> <operator pos:start="127:59" pos:end="127:59">&amp;</operator> <literal type="number" pos:start="127:61" pos:end="127:63">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:65"><expr pos:start="129:13" pos:end="129:64"><name pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:16">vals</name><index pos:start="129:17" pos:end="129:19">[<expr pos:start="129:18" pos:end="129:18"><literal type="number" pos:start="129:18" pos:end="129:18">2</literal></expr>]</index></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:64"><name pos:start="129:23" pos:end="129:30">fval_tab</name><index pos:start="129:31" pos:end="129:64">[<expr pos:start="129:32" pos:end="129:63"><operator pos:start="129:32" pos:end="129:32">(</operator><name pos:start="129:33" pos:end="129:51"><name pos:start="129:33" pos:end="129:46">symbol_to_vec4</name><index pos:start="129:47" pos:end="129:51">[<expr pos:start="129:48" pos:end="129:50"><name pos:start="129:48" pos:end="129:50">idx</name></expr>]</index></name> <operator pos:start="129:53" pos:end="129:54">&gt;&gt;</operator> <literal type="number" pos:start="129:56" pos:end="129:56">4</literal><operator pos:start="129:57" pos:end="129:57">)</operator> <operator pos:start="129:59" pos:end="129:59">&amp;</operator> <literal type="number" pos:start="129:61" pos:end="129:63">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:65"><expr pos:start="131:13" pos:end="131:64"><name pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:16">vals</name><index pos:start="131:17" pos:end="131:19">[<expr pos:start="131:18" pos:end="131:18"><literal type="number" pos:start="131:18" pos:end="131:18">3</literal></expr>]</index></name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:64"><name pos:start="131:23" pos:end="131:30">fval_tab</name><index pos:start="131:31" pos:end="131:64">[ <expr pos:start="131:33" pos:end="131:63"><name pos:start="131:33" pos:end="131:51"><name pos:start="131:33" pos:end="131:46">symbol_to_vec4</name><index pos:start="131:47" pos:end="131:51">[<expr pos:start="131:48" pos:end="131:50"><name pos:start="131:48" pos:end="131:50">idx</name></expr>]</index></name>       <operator pos:start="131:59" pos:end="131:59">&amp;</operator> <literal type="number" pos:start="131:61" pos:end="131:63">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" format="doxygen" pos:start="137:9" pos:end="137:26">/** decode sign */</comment>

        <for pos:start="139:9" pos:end="163:9">for <control pos:start="139:13" pos:end="139:31">(<init pos:start="139:14" pos:end="139:19"><expr pos:start="139:14" pos:end="139:18"><name pos:start="139:14" pos:end="139:14">i</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>;</init> <condition pos:start="139:21" pos:end="139:26"><expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:21">i</name> <operator pos:start="139:23" pos:end="139:23">&lt;</operator> <literal type="number" pos:start="139:25" pos:end="139:25">4</literal></expr>;</condition> <incr pos:start="139:28" pos:end="139:30"><expr pos:start="139:28" pos:end="139:30"><name pos:start="139:28" pos:end="139:28">i</name><operator pos:start="139:29" pos:end="139:30">++</operator></expr></incr>)</control> <block pos:start="139:33" pos:end="163:9">{<block_content pos:start="141:13" pos:end="161:24">

            <if_stmt pos:start="141:13" pos:end="159:13"><if pos:start="141:13" pos:end="149:13">if <condition pos:start="141:16" pos:end="141:24">(<expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:20">vals</name><index pos:start="141:21" pos:end="141:23">[<expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">i</name></expr>]</index></name></expr>)</condition> <block pos:start="141:26" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:30">

                <decl_stmt pos:start="143:17" pos:end="143:49"><decl pos:start="143:17" pos:end="143:48"><type pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:19">int</name></type> <name pos:start="143:21" pos:end="143:24">sign</name> <init pos:start="143:26" pos:end="143:48">= <expr pos:start="143:28" pos:end="143:48"><call pos:start="143:28" pos:end="143:44"><name pos:start="143:28" pos:end="143:36">get_bits1</name><argument_list pos:start="143:37" pos:end="143:44">(<argument pos:start="143:38" pos:end="143:43"><expr pos:start="143:38" pos:end="143:43"><operator pos:start="143:38" pos:end="143:38">&amp;</operator><name pos:start="143:39" pos:end="143:43"><name pos:start="143:39" pos:end="143:39">s</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="143:46" pos:end="143:46">-</operator> <literal type="number" pos:start="143:48" pos:end="143:48">1</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:72"><expr pos:start="145:17" pos:end="145:71"><operator pos:start="145:17" pos:end="145:17">*</operator><operator pos:start="145:18" pos:end="145:18">(</operator><name pos:start="145:19" pos:end="145:26">uint32_t</name><operator pos:start="145:27" pos:end="145:27">*</operator><operator pos:start="145:28" pos:end="145:28">)</operator><operator pos:start="145:29" pos:end="145:29">&amp;</operator><name pos:start="145:30" pos:end="145:50"><name pos:start="145:30" pos:end="145:31">ci</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:39">coeffs</name><index pos:start="145:40" pos:end="145:50">[<expr pos:start="145:41" pos:end="145:49"><name pos:start="145:41" pos:end="145:49">cur_coeff</name></expr>]</index></name> <operator pos:start="145:52" pos:end="145:52">=</operator> <name pos:start="145:54" pos:end="145:60"><name pos:start="145:54" pos:end="145:57">vals</name><index pos:start="145:58" pos:end="145:60">[<expr pos:start="145:59" pos:end="145:59"><name pos:start="145:59" pos:end="145:59">i</name></expr>]</index></name> <operator pos:start="145:62" pos:end="145:62">^</operator> <name pos:start="145:64" pos:end="145:67">sign</name><operator pos:start="145:68" pos:end="145:69">&lt;&lt;</operator><literal type="number" pos:start="145:70" pos:end="145:71">31</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:30"><expr pos:start="147:17" pos:end="147:29"><name pos:start="147:17" pos:end="147:25">num_zeros</name> <operator pos:start="147:27" pos:end="147:27">=</operator> <literal type="number" pos:start="147:29" pos:end="147:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="149:15" pos:end="159:13">else <block pos:start="149:20" pos:end="159:13">{<block_content pos:start="151:17" pos:end="157:64">

                <expr_stmt pos:start="151:17" pos:end="151:42"><expr pos:start="151:17" pos:end="151:41"><name pos:start="151:17" pos:end="151:37"><name pos:start="151:17" pos:end="151:18">ci</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:26">coeffs</name><index pos:start="151:27" pos:end="151:37">[<expr pos:start="151:28" pos:end="151:36"><name pos:start="151:28" pos:end="151:36">cur_coeff</name></expr>]</index></name> <operator pos:start="151:39" pos:end="151:39">=</operator> <literal type="number" pos:start="151:41" pos:end="151:41">0</literal></expr>;</expr_stmt>

                <comment type="block" format="doxygen" pos:start="153:17" pos:end="155:42">/** switch to run level mode when subframe_len / 128 zeros

                    were found in a row */</comment>

                <expr_stmt pos:start="157:17" pos:end="157:64"><expr pos:start="157:17" pos:end="157:63"><name pos:start="157:17" pos:end="157:23">rl_mode</name> <operator pos:start="157:25" pos:end="157:26">|=</operator> <operator pos:start="157:28" pos:end="157:28">(</operator><operator pos:start="157:29" pos:end="157:30">++</operator><name pos:start="157:31" pos:end="157:39">num_zeros</name> <operator pos:start="157:41" pos:end="157:41">&gt;</operator> <name pos:start="157:43" pos:end="157:57"><name pos:start="157:43" pos:end="157:43">s</name><operator pos:start="157:44" pos:end="157:45">-&gt;</operator><name pos:start="157:46" pos:end="157:57">subframe_len</name></name> <operator pos:start="157:59" pos:end="157:60">&gt;&gt;</operator> <literal type="number" pos:start="157:62" pos:end="157:62">8</literal><operator pos:start="157:63" pos:end="157:63">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:24"><expr pos:start="161:13" pos:end="161:23"><operator pos:start="161:13" pos:end="161:14">++</operator><name pos:start="161:15" pos:end="161:23">cur_coeff</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></while>



    <comment type="block" format="doxygen" pos:start="169:5" pos:end="169:46">/** decode run level coded coefficients */</comment>

    <if_stmt pos:start="171:5" pos:end="187:5"><if pos:start="171:5" pos:end="187:5">if <condition pos:start="171:8" pos:end="171:36">(<expr pos:start="171:9" pos:end="171:35"><name pos:start="171:9" pos:end="171:17">cur_coeff</name> <operator pos:start="171:19" pos:end="171:19">&lt;</operator> <name pos:start="171:21" pos:end="171:35"><name pos:start="171:21" pos:end="171:21">s</name><operator pos:start="171:22" pos:end="171:23">-&gt;</operator><name pos:start="171:24" pos:end="171:35">subframe_len</name></name></expr>)</condition> <block pos:start="171:38" pos:end="187:5">{<block_content pos:start="173:9" pos:end="185:39">

        <expr_stmt pos:start="173:9" pos:end="175:68"><expr pos:start="173:9" pos:end="175:67"><call pos:start="173:9" pos:end="175:67"><name pos:start="173:9" pos:end="173:14">memset</name><argument_list pos:start="173:15" pos:end="175:67">(<argument pos:start="173:16" pos:end="173:37"><expr pos:start="173:16" pos:end="173:37"><operator pos:start="173:16" pos:end="173:16">&amp;</operator><name pos:start="173:17" pos:end="173:37"><name pos:start="173:17" pos:end="173:18">ci</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:26">coeffs</name><index pos:start="173:27" pos:end="173:37">[<expr pos:start="173:28" pos:end="173:36"><name pos:start="173:28" pos:end="173:36">cur_coeff</name></expr>]</index></name></expr></argument>, <argument pos:start="173:40" pos:end="173:40"><expr pos:start="173:40" pos:end="173:40"><literal type="number" pos:start="173:40" pos:end="173:40">0</literal></expr></argument>,

               <argument pos:start="175:16" pos:end="175:66"><expr pos:start="175:16" pos:end="175:66"><sizeof pos:start="175:16" pos:end="175:34">sizeof<argument_list pos:start="175:22" pos:end="175:34">(<argument pos:start="175:23" pos:end="175:33"><expr pos:start="175:23" pos:end="175:33"><operator pos:start="175:23" pos:end="175:23">*</operator><name pos:start="175:24" pos:end="175:33"><name pos:start="175:24" pos:end="175:25">ci</name><operator pos:start="175:26" pos:end="175:27">-&gt;</operator><name pos:start="175:28" pos:end="175:33">coeffs</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="175:36" pos:end="175:36">*</operator> <operator pos:start="175:38" pos:end="175:38">(</operator><name pos:start="175:39" pos:end="175:53"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:53">subframe_len</name></name> <operator pos:start="175:55" pos:end="175:55">-</operator> <name pos:start="175:57" pos:end="175:65">cur_coeff</name><operator pos:start="175:66" pos:end="175:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="185:39"><if pos:start="177:9" pos:end="185:39">if <condition pos:start="177:12" pos:end="183:68">(<expr pos:start="177:13" pos:end="183:67"><call pos:start="177:13" pos:end="183:67"><name pos:start="177:13" pos:end="177:35">ff_wma_run_level_decode</name><argument_list pos:start="177:36" pos:end="183:67">(<argument pos:start="177:37" pos:end="177:44"><expr pos:start="177:37" pos:end="177:44"><name pos:start="177:37" pos:end="177:44"><name pos:start="177:37" pos:end="177:37">s</name><operator pos:start="177:38" pos:end="177:39">-&gt;</operator><name pos:start="177:40" pos:end="177:44">avctx</name></name></expr></argument>, <argument pos:start="177:47" pos:end="177:52"><expr pos:start="177:47" pos:end="177:52"><operator pos:start="177:47" pos:end="177:47">&amp;</operator><name pos:start="177:48" pos:end="177:52"><name pos:start="177:48" pos:end="177:48">s</name><operator pos:start="177:49" pos:end="177:50">-&gt;</operator><name pos:start="177:51" pos:end="177:52">gb</name></name></expr></argument>, <argument pos:start="177:55" pos:end="177:57"><expr pos:start="177:55" pos:end="177:57"><name pos:start="177:55" pos:end="177:57">vlc</name></expr></argument>,

                                    <argument pos:start="179:37" pos:end="179:41"><expr pos:start="179:37" pos:end="179:41"><name pos:start="179:37" pos:end="179:41">level</name></expr></argument>, <argument pos:start="179:44" pos:end="179:46"><expr pos:start="179:44" pos:end="179:46"><name pos:start="179:44" pos:end="179:46">run</name></expr></argument>, <argument pos:start="179:49" pos:end="179:49"><expr pos:start="179:49" pos:end="179:49"><literal type="number" pos:start="179:49" pos:end="179:49">1</literal></expr></argument>, <argument pos:start="179:52" pos:end="179:61"><expr pos:start="179:52" pos:end="179:61"><name pos:start="179:52" pos:end="179:61"><name pos:start="179:52" pos:end="179:53">ci</name><operator pos:start="179:54" pos:end="179:55">-&gt;</operator><name pos:start="179:56" pos:end="179:61">coeffs</name></name></expr></argument>,

                                    <argument pos:start="181:37" pos:end="181:45"><expr pos:start="181:37" pos:end="181:45"><name pos:start="181:37" pos:end="181:45">cur_coeff</name></expr></argument>, <argument pos:start="181:48" pos:end="181:62"><expr pos:start="181:48" pos:end="181:62"><name pos:start="181:48" pos:end="181:62"><name pos:start="181:48" pos:end="181:48">s</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:62">subframe_len</name></name></expr></argument>,

                                    <argument pos:start="183:37" pos:end="183:51"><expr pos:start="183:37" pos:end="183:51"><name pos:start="183:37" pos:end="183:51"><name pos:start="183:37" pos:end="183:37">s</name><operator pos:start="183:38" pos:end="183:39">-&gt;</operator><name pos:start="183:40" pos:end="183:51">subframe_len</name></name></expr></argument>, <argument pos:start="183:54" pos:end="183:63"><expr pos:start="183:54" pos:end="183:63"><name pos:start="183:54" pos:end="183:63"><name pos:start="183:54" pos:end="183:54">s</name><operator pos:start="183:55" pos:end="183:56">-&gt;</operator><name pos:start="183:57" pos:end="183:63">esc_len</name></name></expr></argument>, <argument pos:start="183:66" pos:end="183:66"><expr pos:start="183:66" pos:end="183:66"><literal type="number" pos:start="183:66" pos:end="183:66">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:39"><block_content pos:start="185:13" pos:end="185:39">

            <return pos:start="185:13" pos:end="185:39">return <expr pos:start="185:20" pos:end="185:38"><name pos:start="185:20" pos:end="185:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="191:5" pos:end="191:13">return <expr pos:start="191:12" pos:end="191:12"><literal type="number" pos:start="191:12" pos:end="191:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
