<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20521.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:31">local_llistxattr</name><parameter_list pos:start="1:32" pos:end="3:57">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:41">FsContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">ctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">path</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:43"><decl pos:start="3:33" pos:end="3:43"><type pos:start="3:33" pos:end="3:43"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">value</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:56"><decl pos:start="3:46" pos:end="3:56"><type pos:start="3:46" pos:end="3:56"><name pos:start="3:46" pos:end="3:51">size_t</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="109:1">{<block_content pos:start="7:5" pos:end="107:18">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">ssize_t</name></type> <name pos:start="7:13" pos:end="7:18">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:22">actual_len</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:20">orig_value</name></decl>, <decl pos:start="11:23" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:39">orig_value_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:20">temp_value</name></decl>, <decl pos:start="13:23" pos:end="13:39"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:39">temp_value_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">ssize_t</name></type> <name pos:start="15:13" pos:end="15:21">xattr_len</name></decl>, <decl pos:start="15:24" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:24" pos:end="15:33">parsed_len</name> <init pos:start="15:35" pos:end="15:37">= <expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr></init></decl>, <decl pos:start="15:40" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:40" pos:end="15:47">attr_len</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:32">(<expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:11">ctx</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:18">fs_sm</name></name> <operator pos:start="19:20" pos:end="19:21">!=</operator> <name pos:start="19:23" pos:end="19:31">SM_MAPPED</name></expr>)</condition> <block pos:start="19:34" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:57">

        <return pos:start="21:9" pos:end="21:57">return <expr pos:start="21:16" pos:end="21:56"><call pos:start="21:16" pos:end="21:56"><name pos:start="21:16" pos:end="21:25">llistxattr</name><argument_list pos:start="21:26" pos:end="21:56">(<argument pos:start="21:27" pos:end="21:42"><expr pos:start="21:27" pos:end="21:42"><call pos:start="21:27" pos:end="21:42"><name pos:start="21:27" pos:end="21:31">rpath</name><argument_list pos:start="21:32" pos:end="21:42">(<argument pos:start="21:33" pos:end="21:35"><expr pos:start="21:33" pos:end="21:35"><name pos:start="21:33" pos:end="21:35">ctx</name></expr></argument>, <argument pos:start="21:38" pos:end="21:41"><expr pos:start="21:38" pos:end="21:41"><name pos:start="21:38" pos:end="21:41">path</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:45" pos:end="21:49"><expr pos:start="21:45" pos:end="21:49"><name pos:start="21:45" pos:end="21:49">value</name></expr></argument>, <argument pos:start="21:52" pos:end="21:55"><expr pos:start="21:52" pos:end="21:55"><name pos:start="21:52" pos:end="21:55">size</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:28">/* Get the actual len */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:55"><expr pos:start="29:5" pos:end="29:54"><name pos:start="29:5" pos:end="29:13">xattr_len</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:54"><name pos:start="29:17" pos:end="29:26">llistxattr</name><argument_list pos:start="29:27" pos:end="29:54">(<argument pos:start="29:28" pos:end="29:43"><expr pos:start="29:28" pos:end="29:43"><call pos:start="29:28" pos:end="29:43"><name pos:start="29:28" pos:end="29:32">rpath</name><argument_list pos:start="29:33" pos:end="29:43">(<argument pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><name pos:start="29:34" pos:end="29:36">ctx</name></expr></argument>, <argument pos:start="29:39" pos:end="29:42"><expr pos:start="29:39" pos:end="29:42"><name pos:start="29:39" pos:end="29:42">path</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:46" pos:end="29:50"><expr pos:start="29:46" pos:end="29:50"><name pos:start="29:46" pos:end="29:50">value</name></expr></argument>, <argument pos:start="29:53" pos:end="29:53"><expr pos:start="29:53" pos:end="29:53"><literal type="number" pos:start="29:53" pos:end="29:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:54">/* Now fetch the xattr and find the actual size */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:14">orig_value</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:39"><name pos:start="35:18" pos:end="35:28">qemu_malloc</name><argument_list pos:start="35:29" pos:end="35:39">(<argument pos:start="35:30" pos:end="35:38"><expr pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:38">xattr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:68"><expr pos:start="37:5" pos:end="37:67"><name pos:start="37:5" pos:end="37:13">xattr_len</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:67"><name pos:start="37:17" pos:end="37:26">llistxattr</name><argument_list pos:start="37:27" pos:end="37:67">(<argument pos:start="37:28" pos:end="37:43"><expr pos:start="37:28" pos:end="37:43"><call pos:start="37:28" pos:end="37:43"><name pos:start="37:28" pos:end="37:32">rpath</name><argument_list pos:start="37:33" pos:end="37:43">(<argument pos:start="37:34" pos:end="37:36"><expr pos:start="37:34" pos:end="37:36"><name pos:start="37:34" pos:end="37:36">ctx</name></expr></argument>, <argument pos:start="37:39" pos:end="37:42"><expr pos:start="37:39" pos:end="37:42"><name pos:start="37:39" pos:end="37:42">path</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:46" pos:end="37:55"><expr pos:start="37:46" pos:end="37:55"><name pos:start="37:46" pos:end="37:55">orig_value</name></expr></argument>, <argument pos:start="37:58" pos:end="37:66"><expr pos:start="37:58" pos:end="37:66"><name pos:start="37:58" pos:end="37:66">xattr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="47:7">/*

     * For mapped security model drop user.virtfs namespace

     * from the list

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:41"><expr pos:start="49:5" pos:end="49:40"><name pos:start="49:5" pos:end="49:14">temp_value</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:40"><name pos:start="49:18" pos:end="49:29">qemu_mallocz</name><argument_list pos:start="49:30" pos:end="49:40">(<argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:39">xattr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:20">temp_value_start</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:33">temp_value</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:20">orig_value_start</name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:33">orig_value</name></expr>;</expr_stmt>

    <while pos:start="55:5" pos:end="75:5">while <condition pos:start="55:11" pos:end="55:34">(<expr pos:start="55:12" pos:end="55:33"><name pos:start="55:12" pos:end="55:20">xattr_len</name> <operator pos:start="55:22" pos:end="55:22">&gt;</operator> <name pos:start="55:24" pos:end="55:33">parsed_len</name></expr>)</condition> <block pos:start="55:36" pos:end="75:5">{<block_content pos:start="57:9" pos:end="73:31">

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:16">attr_len</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:37"><name pos:start="57:20" pos:end="57:25">strlen</name><argument_list pos:start="57:26" pos:end="57:37">(<argument pos:start="57:27" pos:end="57:36"><expr pos:start="57:27" pos:end="57:36"><name pos:start="57:27" pos:end="57:36">orig_value</name></expr></argument>)</argument_list></call> <operator pos:start="57:39" pos:end="57:39">+</operator> <literal type="number" pos:start="57:41" pos:end="57:41">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="59:57">(<expr pos:start="59:13" pos:end="59:56"><call pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:19">strncmp</name><argument_list pos:start="59:20" pos:end="59:51">(<argument pos:start="59:21" pos:end="59:30"><expr pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:30">orig_value</name></expr></argument>, <argument pos:start="59:33" pos:end="59:46"><expr pos:start="59:33" pos:end="59:46"><literal type="string" pos:start="59:33" pos:end="59:46">"user.virtfs."</literal></expr></argument>, <argument pos:start="59:49" pos:end="59:50"><expr pos:start="59:49" pos:end="59:50"><literal type="number" pos:start="59:49" pos:end="59:50">12</literal></expr></argument>)</argument_list></call> <operator pos:start="59:53" pos:end="59:54">!=</operator> <literal type="number" pos:start="59:56" pos:end="59:56">0</literal></expr>)</condition> <block pos:start="59:59" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:35">

            <comment type="block" pos:start="61:13" pos:end="61:33">/* Copy this entry */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:43"><expr pos:start="63:13" pos:end="63:42"><call pos:start="63:13" pos:end="63:42"><name pos:start="63:13" pos:end="63:18">strcat</name><argument_list pos:start="63:19" pos:end="63:42">(<argument pos:start="63:20" pos:end="63:29"><expr pos:start="63:20" pos:end="63:29"><name pos:start="63:20" pos:end="63:29">temp_value</name></expr></argument>, <argument pos:start="63:32" pos:end="63:41"><expr pos:start="63:32" pos:end="63:41"><name pos:start="63:32" pos:end="63:41">orig_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:36"><expr pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:22">temp_value</name>  <operator pos:start="65:25" pos:end="65:26">+=</operator> <name pos:start="65:28" pos:end="65:35">attr_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:22">actual_len</name> <operator pos:start="67:24" pos:end="67:25">+=</operator> <name pos:start="67:27" pos:end="67:34">attr_len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:18">parsed_len</name> <operator pos:start="71:20" pos:end="71:21">+=</operator> <name pos:start="71:23" pos:end="71:30">attr_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:18">orig_value</name> <operator pos:start="73:20" pos:end="73:21">+=</operator> <name pos:start="73:23" pos:end="73:30">attr_len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="77:5" pos:end="95:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:14">(<expr pos:start="77:9" pos:end="77:13"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:13">size</name></expr>)</condition> <block pos:start="77:16" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:17">

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:14">retval</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:27">actual_len</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:17">goto <name pos:start="81:14" pos:end="81:16">out</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="95:5">else if <condition pos:start="83:15" pos:end="83:34">(<expr pos:start="83:16" pos:end="83:33"><name pos:start="83:16" pos:end="83:19">size</name> <operator pos:start="83:21" pos:end="83:22">&gt;=</operator> <name pos:start="83:24" pos:end="83:33">actual_len</name></expr>)</condition> <block pos:start="83:36" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:17">

        <comment type="block" pos:start="85:9" pos:end="85:53">/* now copy the parsed attribute list back */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:31"><expr pos:start="87:9" pos:end="87:30"><call pos:start="87:9" pos:end="87:30"><name pos:start="87:9" pos:end="87:14">memset</name><argument_list pos:start="87:15" pos:end="87:30">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">value</name></expr></argument>, <argument pos:start="87:23" pos:end="87:23"><expr pos:start="87:23" pos:end="87:23"><literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr></argument>, <argument pos:start="87:26" pos:end="87:29"><expr pos:start="87:26" pos:end="87:29"><name pos:start="87:26" pos:end="87:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:52"><expr pos:start="89:9" pos:end="89:51"><call pos:start="89:9" pos:end="89:51"><name pos:start="89:9" pos:end="89:14">memcpy</name><argument_list pos:start="89:15" pos:end="89:51">(<argument pos:start="89:16" pos:end="89:20"><expr pos:start="89:16" pos:end="89:20"><name pos:start="89:16" pos:end="89:20">value</name></expr></argument>, <argument pos:start="89:23" pos:end="89:38"><expr pos:start="89:23" pos:end="89:38"><name pos:start="89:23" pos:end="89:38">temp_value_start</name></expr></argument>, <argument pos:start="89:41" pos:end="89:50"><expr pos:start="89:41" pos:end="89:50"><name pos:start="89:41" pos:end="89:50">actual_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:14">retval</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <name pos:start="91:18" pos:end="91:27">actual_len</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:17">goto <name pos:start="93:14" pos:end="93:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:19"><expr pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:9">errno</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:18">ERANGE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:16"><expr pos:start="99:5" pos:end="99:15"><name pos:start="99:5" pos:end="99:10">retval</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <operator pos:start="99:14" pos:end="99:14">-</operator><literal type="number" pos:start="99:15" pos:end="99:15">1</literal></expr>;</expr_stmt>

<label pos:start="101:1" pos:end="101:4"><name pos:start="101:1" pos:end="101:3">out</name>:</label>

    <expr_stmt pos:start="103:5" pos:end="103:32"><expr pos:start="103:5" pos:end="103:31"><call pos:start="103:5" pos:end="103:31"><name pos:start="103:5" pos:end="103:13">qemu_free</name><argument_list pos:start="103:14" pos:end="103:31">(<argument pos:start="103:15" pos:end="103:30"><expr pos:start="103:15" pos:end="103:30"><name pos:start="103:15" pos:end="103:30">orig_value_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:32"><expr pos:start="105:5" pos:end="105:31"><call pos:start="105:5" pos:end="105:31"><name pos:start="105:5" pos:end="105:13">qemu_free</name><argument_list pos:start="105:14" pos:end="105:31">(<argument pos:start="105:15" pos:end="105:30"><expr pos:start="105:15" pos:end="105:30"><name pos:start="105:15" pos:end="105:30">temp_value_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:18">return <expr pos:start="107:12" pos:end="107:17"><name pos:start="107:12" pos:end="107:17">retval</name></expr>;</return>

</block_content>}</block></function>
</unit>
