<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18001.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:32">get_generic_seed</name><parameter_list pos:start="1:33" pos:end="1:38">(<parameter pos:start="1:34" pos:end="1:37"><decl pos:start="1:34" pos:end="1:37"><type pos:start="1:34" pos:end="1:37"><name pos:start="1:34" pos:end="1:37">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:50">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:20"><name pos:start="5:13" pos:end="5:15">tmp</name><index pos:start="5:16" pos:end="5:20">[<expr pos:start="5:17" pos:end="5:19"><literal type="number" pos:start="5:17" pos:end="5:19">120</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">AVSHA</name></name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">sha</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:29">void</name><operator pos:start="7:30" pos:end="7:30">*</operator><operator pos:start="7:31" pos:end="7:31">)</operator><name pos:start="7:32" pos:end="7:34">tmp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">clock_t</name></type> <name pos:start="9:13" pos:end="9:18">last_t</name>  <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <name pos:start="11:12" pos:end="11:19">uint64_t</name></type> <name pos:start="11:21" pos:end="11:21">i</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:19">uint32_t</name></type> <name pos:start="13:21" pos:end="13:31"><name pos:start="13:21" pos:end="13:26">buffer</name><index pos:start="13:27" pos:end="13:31">[<expr pos:start="13:28" pos:end="13:30"><literal type="number" pos:start="13:28" pos:end="13:30">512</literal></expr>]</index></name> <init pos:start="13:33" pos:end="13:39">= <expr pos:start="13:35" pos:end="13:39"><block pos:start="13:35" pos:end="13:39">{ <expr pos:start="13:37" pos:end="13:37"><literal type="number" pos:start="13:37" pos:end="13:37">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:28"><name pos:start="15:19" pos:end="15:24">digest</name><index pos:start="15:25" pos:end="15:28">[<expr pos:start="15:26" pos:end="15:27"><literal type="number" pos:start="15:26" pos:end="15:27">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:19">last_i</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><name pos:start="17:23" pos:end="17:23">i</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:14">av_assert0</name><argument_list pos:start="21:15" pos:end="21:42">(<argument pos:start="21:16" pos:end="21:41"><expr pos:start="21:16" pos:end="21:41"><sizeof pos:start="21:16" pos:end="21:26">sizeof<argument_list pos:start="21:22" pos:end="21:26">(<argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">tmp</name></expr></argument>)</argument_list></sizeof> <operator pos:start="21:28" pos:end="21:29">&gt;=</operator> <name pos:start="21:31" pos:end="21:41">av_sha_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="41:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:12">(<expr pos:start="25:8" pos:end="25:11"><name pos:start="25:8" pos:end="25:11">TEST</name></expr>)</condition><block pos:start="25:13" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:23">

        <expr_stmt pos:start="27:9" pos:end="27:42"><expr pos:start="27:9" pos:end="27:41"><call pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:14">memset</name><argument_list pos:start="27:15" pos:end="27:41">(<argument pos:start="27:16" pos:end="27:21"><expr pos:start="27:16" pos:end="27:21"><name pos:start="27:16" pos:end="27:21">buffer</name></expr></argument>, <argument pos:start="27:24" pos:end="27:24"><expr pos:start="27:24" pos:end="27:24"><literal type="number" pos:start="27:24" pos:end="27:24">0</literal></expr></argument>, <argument pos:start="27:27" pos:end="27:40"><expr pos:start="27:27" pos:end="27:40"><sizeof pos:start="27:27" pos:end="27:40">sizeof<argument_list pos:start="27:33" pos:end="27:40">(<argument pos:start="27:34" pos:end="27:39"><expr pos:start="27:34" pos:end="27:39"><name pos:start="27:34" pos:end="27:39">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:14">last_i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:18">i</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="31:6" pos:end="41:5">else<block pos:start="31:10" pos:end="41:5">{<block_content pos:start="35:9" pos:end="40:0">

<cpp:ifdef pos:start="33:1" pos:end="33:19">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:19">AV_READ_TIME</name></cpp:ifdef>

        <expr_stmt pos:start="35:9" pos:end="35:37"><expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:14">buffer</name><index pos:start="35:15" pos:end="35:18">[<expr pos:start="35:16" pos:end="35:17"><literal type="number" pos:start="35:16" pos:end="35:17">13</literal></expr>]</index></name> <operator pos:start="35:20" pos:end="35:21">^=</operator> <call pos:start="35:23" pos:end="35:36"><name pos:start="35:23" pos:end="35:34">AV_READ_TIME</name><argument_list pos:start="35:35" pos:end="35:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="40:0"><expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:14">buffer</name><index pos:start="37:15" pos:end="37:18">[<expr pos:start="37:16" pos:end="37:17"><literal type="number" pos:start="37:16" pos:end="37:17">41</literal></expr>]</index></name> <operator pos:start="37:20" pos:end="37:21">^=</operator> <call pos:start="37:23" pos:end="37:36"><name pos:start="37:23" pos:end="37:34">AV_READ_TIME</name><argument_list pos:start="37:35" pos:end="37:36">()</argument_list></call><operator pos:start="37:37" pos:end="37:38">&gt;&gt;</operator><literal type="number" pos:start="37:39" pos:end="37:40">32</literal></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <for pos:start="45:5" pos:end="67:5">for <control pos:start="45:9" pos:end="45:12">(<init pos:start="45:10" pos:end="45:10">;</init><condition pos:start="45:11" pos:end="45:11">;</condition><incr/>)</control> <block pos:start="45:14" pos:end="67:5">{<block_content pos:start="47:9" pos:end="65:19">

        <decl_stmt pos:start="47:9" pos:end="47:28"><decl pos:start="47:9" pos:end="47:27"><type pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:15">clock_t</name></type> <name pos:start="47:17" pos:end="47:17">t</name> <init pos:start="47:19" pos:end="47:27">= <expr pos:start="47:21" pos:end="47:27"><call pos:start="47:21" pos:end="47:27"><name pos:start="47:21" pos:end="47:25">clock</name><argument_list pos:start="47:26" pos:end="47:27">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="51:9" pos:end="63:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:24">(<expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:18">last_t</name> <operator pos:start="51:20" pos:end="51:21">==</operator> <name pos:start="51:23" pos:end="51:23">t</name></expr>)</condition> <block pos:start="51:26" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:30">

            <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:18">buffer</name><index pos:start="53:19" pos:end="53:27">[<expr pos:start="53:20" pos:end="53:26"><name pos:start="53:20" pos:end="53:20">i</name> <operator pos:start="53:22" pos:end="53:22">&amp;</operator> <literal type="number" pos:start="53:24" pos:end="53:26">511</literal></expr>]</index></name><operator pos:start="53:28" pos:end="53:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="63:9">else <block pos:start="55:16" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:22">

            <expr_stmt pos:start="57:13" pos:end="57:60"><expr pos:start="57:13" pos:end="57:59"><name pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:18">buffer</name><index pos:start="57:19" pos:end="57:29">[<expr pos:start="57:20" pos:end="57:28"><operator pos:start="57:20" pos:end="57:21">++</operator><name pos:start="57:22" pos:end="57:22">i</name> <operator pos:start="57:24" pos:end="57:24">&amp;</operator> <literal type="number" pos:start="57:26" pos:end="57:28">511</literal></expr>]</index></name> <operator pos:start="57:31" pos:end="57:32">+=</operator> <operator pos:start="57:34" pos:end="57:34">(</operator><name pos:start="57:35" pos:end="57:35">t</name> <operator pos:start="57:37" pos:end="57:37">-</operator> <name pos:start="57:39" pos:end="57:44">last_t</name><operator pos:start="57:45" pos:end="57:45">)</operator> <operator pos:start="57:47" pos:end="57:47">%</operator> <literal type="number" pos:start="57:49" pos:end="57:59">3294638521U</literal></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="61:22"><if pos:start="59:13" pos:end="61:22">if <condition pos:start="59:16" pos:end="59:86">(<expr pos:start="59:17" pos:end="59:85"><name pos:start="59:17" pos:end="59:22">last_i</name> <operator pos:start="59:24" pos:end="59:25">&amp;&amp;</operator> <name pos:start="59:27" pos:end="59:27">i</name> <operator pos:start="59:29" pos:end="59:29">-</operator> <name pos:start="59:31" pos:end="59:36">last_i</name> <operator pos:start="59:38" pos:end="59:38">&gt;</operator> <literal type="number" pos:start="59:40" pos:end="59:40">4</literal> <operator pos:start="59:42" pos:end="59:43">||</operator> <name pos:start="59:45" pos:end="59:45">i</name> <operator pos:start="59:47" pos:end="59:47">-</operator> <name pos:start="59:49" pos:end="59:54">last_i</name> <operator pos:start="59:56" pos:end="59:56">&gt;</operator> <literal type="number" pos:start="59:58" pos:end="59:59">64</literal> <operator pos:start="59:61" pos:end="59:62">||</operator> <name pos:start="59:64" pos:end="59:67">TEST</name> <operator pos:start="59:69" pos:end="59:70">&amp;&amp;</operator> <name pos:start="59:72" pos:end="59:72">i</name> <operator pos:start="59:74" pos:end="59:74">-</operator> <name pos:start="59:76" pos:end="59:81">last_i</name> <operator pos:start="59:83" pos:end="59:83">&gt;</operator> <literal type="number" pos:start="59:85" pos:end="59:85">8</literal></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:22"><block_content pos:start="61:17" pos:end="61:22">

                <break pos:start="61:17" pos:end="61:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:19"><expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:14">last_t</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:18">t</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="71:5" pos:end="73:34"><if pos:start="71:5" pos:end="73:34">if<condition pos:start="71:7" pos:end="71:12">(<expr pos:start="71:8" pos:end="71:11"><name pos:start="71:8" pos:end="71:11">TEST</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:34"><block_content pos:start="73:9" pos:end="73:34">

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:14">buffer</name><index pos:start="73:15" pos:end="73:17">[<expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>]</index></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:29"><name pos:start="73:21" pos:end="73:26">buffer</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><literal type="number" pos:start="73:28" pos:end="73:28">1</literal></expr>]</index></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <literal type="number" pos:start="73:33" pos:end="73:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><call pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:15">av_sha_init</name><argument_list pos:start="77:16" pos:end="77:25">(<argument pos:start="77:17" pos:end="77:19"><expr pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">sha</name></expr></argument>, <argument pos:start="77:22" pos:end="77:24"><expr pos:start="77:22" pos:end="77:24"><literal type="number" pos:start="77:22" pos:end="77:24">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:64"><expr pos:start="79:5" pos:end="79:63"><call pos:start="79:5" pos:end="79:63"><name pos:start="79:5" pos:end="79:17">av_sha_update</name><argument_list pos:start="79:18" pos:end="79:63">(<argument pos:start="79:19" pos:end="79:21"><expr pos:start="79:19" pos:end="79:21"><name pos:start="79:19" pos:end="79:21">sha</name></expr></argument>, <argument pos:start="79:24" pos:end="79:46"><expr pos:start="79:24" pos:end="79:46"><operator pos:start="79:24" pos:end="79:24">(</operator><specifier pos:start="79:25" pos:end="79:29">const</specifier> <name pos:start="79:31" pos:end="79:37">uint8_t</name> <operator pos:start="79:39" pos:end="79:39">*</operator><operator pos:start="79:40" pos:end="79:40">)</operator><name pos:start="79:41" pos:end="79:46">buffer</name></expr></argument>, <argument pos:start="79:49" pos:end="79:62"><expr pos:start="79:49" pos:end="79:62"><sizeof pos:start="79:49" pos:end="79:62">sizeof<argument_list pos:start="79:55" pos:end="79:62">(<argument pos:start="79:56" pos:end="79:61"><expr pos:start="79:56" pos:end="79:61"><name pos:start="79:56" pos:end="79:61">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:30"><expr pos:start="81:5" pos:end="81:29"><call pos:start="81:5" pos:end="81:29"><name pos:start="81:5" pos:end="81:16">av_sha_final</name><argument_list pos:start="81:17" pos:end="81:29">(<argument pos:start="81:18" pos:end="81:20"><expr pos:start="81:18" pos:end="81:20"><name pos:start="81:18" pos:end="81:20">sha</name></expr></argument>, <argument pos:start="81:23" pos:end="81:28"><expr pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:28">digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="83:5" pos:end="83:50">return <expr pos:start="83:12" pos:end="83:49"><call pos:start="83:12" pos:end="83:26"><name pos:start="83:12" pos:end="83:18">AV_RB32</name><argument_list pos:start="83:19" pos:end="83:26">(<argument pos:start="83:20" pos:end="83:25"><expr pos:start="83:20" pos:end="83:25"><name pos:start="83:20" pos:end="83:25">digest</name></expr></argument>)</argument_list></call> <operator pos:start="83:28" pos:end="83:28">+</operator> <call pos:start="83:30" pos:end="83:49"><name pos:start="83:30" pos:end="83:36">AV_RB32</name><argument_list pos:start="83:37" pos:end="83:49">(<argument pos:start="83:38" pos:end="83:48"><expr pos:start="83:38" pos:end="83:48"><name pos:start="83:38" pos:end="83:43">digest</name> <operator pos:start="83:45" pos:end="83:45">+</operator> <literal type="number" pos:start="83:47" pos:end="83:48">16</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
