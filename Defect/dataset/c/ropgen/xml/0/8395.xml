<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8395.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:75"><name pos:start="1:1" pos:end="1:16">opts_type_uint64</name><argument_list pos:start="1:17" pos:end="1:75">(<argument pos:start="1:18" pos:end="1:27">Visitor *v</argument>, <argument pos:start="1:30" pos:end="1:42">uint64_t *obj</argument>, <argument pos:start="1:45" pos:end="1:60">const char *name</argument>, <argument pos:start="1:63" pos:end="1:74">Error **errp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:70">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OptsVisitor</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">ov</name> <init pos:start="5:21" pos:end="5:56">= <expr pos:start="5:23" pos:end="5:56"><call pos:start="5:23" pos:end="5:56"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:56">(<argument pos:start="5:33" pos:end="5:43"><expr pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:43">OptsVisitor</name></expr></argument>, <argument pos:start="5:46" pos:end="5:52"><expr pos:start="5:46" pos:end="5:52"><name pos:start="5:46" pos:end="5:52">visitor</name></expr></argument>, <argument pos:start="5:55" pos:end="5:55"><expr pos:start="5:55" pos:end="5:55"><name pos:start="5:55" pos:end="5:55">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">QemuOpt</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">opt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name> <name pos:start="11:19" pos:end="11:22">long</name></type> <name pos:start="11:24" pos:end="11:26">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:16">endptr</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:46">(<expr pos:start="17:9" pos:end="17:45"><name pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:10">ov</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:21">list_mode</name></name> <operator pos:start="17:23" pos:end="17:24">==</operator> <name pos:start="17:26" pos:end="17:45">LM_UNSIGNED_INTERVAL</name></expr>)</condition> <block pos:start="17:48" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><operator pos:start="19:9" pos:end="19:9">*</operator><name pos:start="19:10" pos:end="19:12">obj</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:31"><name pos:start="19:16" pos:end="19:17">ov</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:29">range_next</name><operator pos:start="19:30" pos:end="19:30">.</operator><name pos:start="19:31" pos:end="19:31">u</name></name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:7">opt</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:39"><name pos:start="27:11" pos:end="27:23">lookup_scalar</name><argument_list pos:start="27:24" pos:end="27:39">(<argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><name pos:start="27:25" pos:end="27:26">ov</name></expr></argument>, <argument pos:start="27:29" pos:end="27:32"><expr pos:start="27:29" pos:end="27:32"><name pos:start="27:29" pos:end="27:32">name</name></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:13">(<expr pos:start="29:9" pos:end="29:12"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:12">opt</name></expr>)</condition> <block pos:start="29:15" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:7">str</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <name pos:start="35:11" pos:end="35:18"><name pos:start="35:11" pos:end="35:13">opt</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">str</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:43">/* we've gotten past lookup_scalar() */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:72"><expr pos:start="41:5" pos:end="41:71"><call pos:start="41:5" pos:end="41:71"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:71">(<argument pos:start="41:12" pos:end="41:70"><expr pos:start="41:12" pos:end="41:70"><name pos:start="41:12" pos:end="41:24"><name pos:start="41:12" pos:end="41:13">ov</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:24">list_mode</name></name> <operator pos:start="41:26" pos:end="41:27">==</operator> <name pos:start="41:29" pos:end="41:35">LM_NONE</name> <operator pos:start="41:37" pos:end="41:38">||</operator> <name pos:start="41:40" pos:end="41:52"><name pos:start="41:40" pos:end="41:41">ov</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:52">list_mode</name></name> <operator pos:start="41:54" pos:end="41:55">==</operator> <name pos:start="41:57" pos:end="41:70">LM_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="87:5"><if pos:start="45:5" pos:end="87:5">if <condition pos:start="45:8" pos:end="45:68">(<expr pos:start="45:9" pos:end="45:67"><call pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:18">parse_uint</name><argument_list pos:start="45:19" pos:end="45:41">(<argument pos:start="45:20" pos:end="45:22"><expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">str</name></expr></argument>, <argument pos:start="45:25" pos:end="45:28"><expr pos:start="45:25" pos:end="45:28"><operator pos:start="45:25" pos:end="45:25">&amp;</operator><name pos:start="45:26" pos:end="45:28">val</name></expr></argument>, <argument pos:start="45:31" pos:end="45:37"><expr pos:start="45:31" pos:end="45:37"><operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:37">endptr</name></expr></argument>, <argument pos:start="45:40" pos:end="45:40"><expr pos:start="45:40" pos:end="45:40"><literal type="number" pos:start="45:40" pos:end="45:40">0</literal></expr></argument>)</argument_list></call> <operator pos:start="45:43" pos:end="45:44">==</operator> <literal type="number" pos:start="45:46" pos:end="45:46">0</literal> <operator pos:start="45:48" pos:end="45:49">&amp;&amp;</operator> <name pos:start="45:51" pos:end="45:53">val</name> <operator pos:start="45:55" pos:end="45:56">&lt;=</operator> <name pos:start="45:58" pos:end="45:67">UINT64_MAX</name></expr>)</condition> <block pos:start="45:70" pos:end="87:5">{<block_content pos:start="47:9" pos:end="85:9">

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:28">(<expr pos:start="47:13" pos:end="47:27"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:19">endptr</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <literal type="char" pos:start="47:24" pos:end="47:27">'\0'</literal></expr>)</condition> <block pos:start="47:30" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:19">

            <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:16">obj</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:22">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:32"><expr pos:start="51:13" pos:end="51:31"><call pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:21">processed</name><argument_list pos:start="51:22" pos:end="51:31">(<argument pos:start="51:23" pos:end="51:24"><expr pos:start="51:23" pos:end="51:24"><name pos:start="51:23" pos:end="51:24">ov</name></expr></argument>, <argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><name pos:start="51:27" pos:end="51:30">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="85:9"><if pos:start="57:9" pos:end="85:9">if <condition pos:start="57:12" pos:end="57:62">(<expr pos:start="57:13" pos:end="57:61"><operator pos:start="57:13" pos:end="57:13">*</operator><name pos:start="57:14" pos:end="57:19">endptr</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <literal type="char" pos:start="57:24" pos:end="57:26">'-'</literal> <operator pos:start="57:28" pos:end="57:29">&amp;&amp;</operator> <name pos:start="57:31" pos:end="57:43"><name pos:start="57:31" pos:end="57:32">ov</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:43">list_mode</name></name> <operator pos:start="57:45" pos:end="57:46">==</operator> <name pos:start="57:48" pos:end="57:61">LM_IN_PROGRESS</name></expr>)</condition> <block pos:start="57:64" pos:end="85:9">{<block_content pos:start="59:13" pos:end="83:13">

            <decl_stmt pos:start="59:13" pos:end="59:36"><decl pos:start="59:13" pos:end="59:35"><type pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:20">unsigned</name> <name pos:start="59:22" pos:end="59:25">long</name> <name pos:start="59:27" pos:end="59:30">long</name></type> <name pos:start="59:32" pos:end="59:35">val2</name></decl>;</decl_stmt>



            <expr_stmt pos:start="63:13" pos:end="63:29"><expr pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:15">str</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:24">endptr</name> <operator pos:start="63:26" pos:end="63:26">+</operator> <literal type="number" pos:start="63:28" pos:end="63:28">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="83:13"><if pos:start="65:13" pos:end="83:13">if <condition pos:start="65:16" pos:end="67:50">(<expr pos:start="65:17" pos:end="67:49"><call pos:start="65:17" pos:end="65:46"><name pos:start="65:17" pos:end="65:31">parse_uint_full</name><argument_list pos:start="65:32" pos:end="65:46">(<argument pos:start="65:33" pos:end="65:35"><expr pos:start="65:33" pos:end="65:35"><name pos:start="65:33" pos:end="65:35">str</name></expr></argument>, <argument pos:start="65:38" pos:end="65:42"><expr pos:start="65:38" pos:end="65:42"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:42">val2</name></expr></argument>, <argument pos:start="65:45" pos:end="65:45"><expr pos:start="65:45" pos:end="65:45"><literal type="number" pos:start="65:45" pos:end="65:45">0</literal></expr></argument>)</argument_list></call> <operator pos:start="65:48" pos:end="65:49">==</operator> <literal type="number" pos:start="65:51" pos:end="65:51">0</literal> <operator pos:start="65:53" pos:end="65:54">&amp;&amp;</operator>

                <name pos:start="67:17" pos:end="67:20">val2</name> <operator pos:start="67:22" pos:end="67:23">&lt;=</operator> <name pos:start="67:25" pos:end="67:34">UINT64_MAX</name> <operator pos:start="67:36" pos:end="67:37">&amp;&amp;</operator> <name pos:start="67:39" pos:end="67:41">val</name> <operator pos:start="67:43" pos:end="67:44">&lt;=</operator> <name pos:start="67:46" pos:end="67:49">val2</name></expr>)</condition> <block pos:start="67:52" pos:end="83:13">{<block_content pos:start="69:17" pos:end="81:23">

                <expr_stmt pos:start="69:17" pos:end="69:39"><expr pos:start="69:17" pos:end="69:38"><name pos:start="69:17" pos:end="69:32"><name pos:start="69:17" pos:end="69:18">ov</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:30">range_next</name><operator pos:start="69:31" pos:end="69:31">.</operator><name pos:start="69:32" pos:end="69:32">u</name></name> <operator pos:start="69:34" pos:end="69:34">=</operator> <name pos:start="69:36" pos:end="69:38">val</name></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:41"><expr pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:33"><name pos:start="71:17" pos:end="71:18">ov</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:31">range_limit</name><operator pos:start="71:32" pos:end="71:32">.</operator><name pos:start="71:33" pos:end="71:33">u</name></name> <operator pos:start="71:35" pos:end="71:35">=</operator> <name pos:start="71:37" pos:end="71:40">val2</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:53"><expr pos:start="73:17" pos:end="73:52"><name pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:18">ov</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:29">list_mode</name></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <name pos:start="73:33" pos:end="73:52">LM_UNSIGNED_INTERVAL</name></expr>;</expr_stmt>



                <comment type="block" pos:start="77:17" pos:end="77:47">/* as if entering on the top */</comment>

                <expr_stmt pos:start="79:17" pos:end="79:40"><expr pos:start="79:17" pos:end="79:39"><operator pos:start="79:17" pos:end="79:17">*</operator><name pos:start="79:18" pos:end="79:20">obj</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:39"><name pos:start="79:24" pos:end="79:25">ov</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:37">range_next</name><operator pos:start="79:38" pos:end="79:38">.</operator><name pos:start="79:39" pos:end="79:39">u</name></name></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="93:70"><expr pos:start="89:5" pos:end="93:69"><call pos:start="89:5" pos:end="93:69"><name pos:start="89:5" pos:end="89:13">error_set</name><argument_list pos:start="89:14" pos:end="93:69">(<argument pos:start="89:15" pos:end="89:18"><expr pos:start="89:15" pos:end="89:18"><name pos:start="89:15" pos:end="89:18">errp</name></expr></argument>, <argument pos:start="89:21" pos:end="89:48"><expr pos:start="89:21" pos:end="89:48"><name pos:start="89:21" pos:end="89:48">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="89:51" pos:end="89:59"><expr pos:start="89:51" pos:end="89:59"><name pos:start="89:51" pos:end="89:59"><name pos:start="89:51" pos:end="89:53">opt</name><operator pos:start="89:54" pos:end="89:55">-&gt;</operator><name pos:start="89:56" pos:end="89:59">name</name></name></expr></argument>,

              <argument pos:start="91:15" pos:end="93:68"><expr pos:start="91:15" pos:end="93:68"><ternary pos:start="91:15" pos:end="93:68"><condition pos:start="91:15" pos:end="91:42"><expr pos:start="91:15" pos:end="91:40"><operator pos:start="91:15" pos:end="91:15">(</operator><name pos:start="91:16" pos:end="91:28"><name pos:start="91:16" pos:end="91:17">ov</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:28">list_mode</name></name> <operator pos:start="91:30" pos:end="91:31">==</operator> <name pos:start="91:33" pos:end="91:39">LM_NONE</name><operator pos:start="91:40" pos:end="91:40">)</operator></expr> ?</condition><then pos:start="91:44" pos:end="91:59"> <expr pos:start="91:44" pos:end="91:59"><literal type="string" pos:start="91:44" pos:end="91:59">"a uint64 value"</literal></expr> </then><else pos:start="91:61" pos:end="93:68">:

                                           <expr pos:start="93:44" pos:end="93:68"><literal type="string" pos:start="93:44" pos:end="93:68">"a uint64 value or range"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
