<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18011.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vnc_update_client</name><parameter_list pos:start="1:29" pos:end="1:57">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:37">VncState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">vs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:56">has_dirty</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <if_stmt pos:start="5:5" pos:end="119:5"><if pos:start="5:5" pos:end="119:5">if <condition pos:start="5:8" pos:end="5:43">(<expr pos:start="5:9" pos:end="5:42"><name pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:10">vs</name><operator pos:start="5:11" pos:end="5:12">-&gt;</operator><name pos:start="5:13" pos:end="5:23">need_update</name></name> <operator pos:start="5:25" pos:end="5:26">&amp;&amp;</operator> <name pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:29">vs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:36">csock</name></name> <operator pos:start="5:38" pos:end="5:39">!=</operator> <operator pos:start="5:41" pos:end="5:41">-</operator><literal type="number" pos:start="5:42" pos:end="5:42">1</literal></expr>)</condition> <block pos:start="5:45" pos:end="119:5">{<block_content pos:start="7:9" pos:end="117:28">

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:18">VncDisplay</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">vd</name> <init pos:start="7:24" pos:end="7:31">= <expr pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:27">vs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:31">vd</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:14"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">y</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:25"><decl pos:start="11:9" pos:end="11:24"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:24">n_rectangles</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:25"><decl pos:start="13:9" pos:end="13:24"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:24">saved_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:14"><decl pos:start="15:9" pos:end="15:13"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">n</name></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="23:21"><if pos:start="19:9" pos:end="23:21">if <condition pos:start="19:12" pos:end="19:69">(<expr pos:start="19:13" pos:end="19:68"><name pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:14">vs</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:22">output</name><operator pos:start="19:23" pos:end="19:23">.</operator><name pos:start="19:24" pos:end="19:29">offset</name></name> <operator pos:start="19:31" pos:end="19:32">&amp;&amp;</operator> <operator pos:start="19:34" pos:end="19:34">!</operator><name pos:start="19:35" pos:end="19:47"><name pos:start="19:35" pos:end="19:36">vs</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:47">audio_cap</name></name> <operator pos:start="19:49" pos:end="19:50">&amp;&amp;</operator> <operator pos:start="19:52" pos:end="19:52">!</operator><name pos:start="19:53" pos:end="19:68"><name pos:start="19:53" pos:end="19:54">vs</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:68">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:21"><block_content pos:start="23:13" pos:end="23:21">

            <comment type="block" pos:start="21:13" pos:end="21:73">/* kernel send buffers are full -&gt; drop frames to throttle */</comment>

            <return pos:start="23:13" pos:end="23:21">return <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="27:9" pos:end="29:21"><if pos:start="27:9" pos:end="29:21">if <condition pos:start="27:12" pos:end="27:62">(<expr pos:start="27:13" pos:end="27:61"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:22">has_dirty</name> <operator pos:start="27:24" pos:end="27:25">&amp;&amp;</operator> <operator pos:start="27:27" pos:end="27:27">!</operator><name pos:start="27:28" pos:end="27:40"><name pos:start="27:28" pos:end="27:29">vs</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:40">audio_cap</name></name> <operator pos:start="27:42" pos:end="27:43">&amp;&amp;</operator> <operator pos:start="27:45" pos:end="27:45">!</operator><name pos:start="27:46" pos:end="27:61"><name pos:start="27:46" pos:end="27:47">vs</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:61">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:21"><block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="33:9" pos:end="43:11">/*

         * Send screen updates to the vnc client using the server

         * surface and server dirty map.  guest surface updates

         * happening in parallel don't disturb us, the next pass will

         * send them to the client.

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:25"><expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:20">n_rectangles</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:60"><expr pos:start="47:9" pos:end="47:59"><call pos:start="47:9" pos:end="47:59"><name pos:start="47:9" pos:end="47:20">vnc_write_u8</name><argument_list pos:start="47:21" pos:end="47:59">(<argument pos:start="47:22" pos:end="47:23"><expr pos:start="47:22" pos:end="47:23"><name pos:start="47:22" pos:end="47:23">vs</name></expr></argument>, <argument pos:start="47:26" pos:end="47:58"><expr pos:start="47:26" pos:end="47:58"><name pos:start="47:26" pos:end="47:58">VNC_MSG_SERVER_FRAMEBUFFER_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><call pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:20">vnc_write_u8</name><argument_list pos:start="49:21" pos:end="49:27">(<argument pos:start="49:22" pos:end="49:23"><expr pos:start="49:22" pos:end="49:23"><name pos:start="49:22" pos:end="49:23">vs</name></expr></argument>, <argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:20">saved_offset</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:40"><name pos:start="51:24" pos:end="51:25">vs</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:33">output</name><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:40">offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><call pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:21">vnc_write_u16</name><argument_list pos:start="53:22" pos:end="53:28">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">vs</name></expr></argument>, <argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="57:9" pos:end="107:9">for <control pos:start="57:13" pos:end="57:48">(<init pos:start="57:14" pos:end="57:19"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">y</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>;</init> <condition pos:start="57:21" pos:end="57:43"><expr pos:start="57:21" pos:end="57:42"><name pos:start="57:21" pos:end="57:21">y</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <name pos:start="57:25" pos:end="57:42"><name pos:start="57:25" pos:end="57:26">vd</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:34">server</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:42">height</name></name></expr>;</condition> <incr pos:start="57:45" pos:end="57:47"><expr pos:start="57:45" pos:end="57:47"><name pos:start="57:45" pos:end="57:45">y</name><operator pos:start="57:46" pos:end="57:47">++</operator></expr></incr>)</control> <block pos:start="57:50" pos:end="107:9">{<block_content pos:start="59:13" pos:end="105:13">

            <decl_stmt pos:start="59:13" pos:end="59:18"><decl pos:start="59:13" pos:end="59:17"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="61:28"><decl pos:start="61:13" pos:end="61:27"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:22">last_x</name> <init pos:start="61:24" pos:end="61:27">= <expr pos:start="61:26" pos:end="61:27"><operator pos:start="61:26" pos:end="61:26">-</operator><literal type="number" pos:start="61:27" pos:end="61:27">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="63:13" pos:end="93:13">for <control pos:start="63:17" pos:end="63:56">(<init pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:18">x</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</init> <condition pos:start="63:25" pos:end="63:51"><expr pos:start="63:25" pos:end="63:50"><name pos:start="63:25" pos:end="63:25">x</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <name pos:start="63:29" pos:end="63:45"><name pos:start="63:29" pos:end="63:30">vd</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:38">server</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:45">width</name></name> <operator pos:start="63:47" pos:end="63:47">/</operator> <literal type="number" pos:start="63:49" pos:end="63:50">16</literal></expr>;</condition> <incr pos:start="63:53" pos:end="63:55"><expr pos:start="63:53" pos:end="63:55"><name pos:start="63:53" pos:end="63:53">x</name><operator pos:start="63:54" pos:end="63:55">++</operator></expr></incr>)</control> <block pos:start="63:58" pos:end="93:13">{<block_content pos:start="65:17" pos:end="91:17">

                <if_stmt pos:start="65:17" pos:end="91:17"><if pos:start="65:17" pos:end="75:17">if <condition pos:start="65:20" pos:end="65:49">(<expr pos:start="65:21" pos:end="65:48"><call pos:start="65:21" pos:end="65:48"><name pos:start="65:21" pos:end="65:31">vnc_get_bit</name><argument_list pos:start="65:32" pos:end="65:48">(<argument pos:start="65:33" pos:end="65:44"><expr pos:start="65:33" pos:end="65:44"><name pos:start="65:33" pos:end="65:44"><name pos:start="65:33" pos:end="65:34">vs</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:41">dirty</name><index pos:start="65:42" pos:end="65:44">[<expr pos:start="65:43" pos:end="65:43"><name pos:start="65:43" pos:end="65:43">y</name></expr>]</index></name></expr></argument>, <argument pos:start="65:47" pos:end="65:47"><expr pos:start="65:47" pos:end="65:47"><name pos:start="65:47" pos:end="65:47">x</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:51" pos:end="75:17">{<block_content pos:start="67:21" pos:end="73:51">

                    <if_stmt pos:start="67:21" pos:end="71:21"><if pos:start="67:21" pos:end="71:21">if <condition pos:start="67:24" pos:end="67:37">(<expr pos:start="67:25" pos:end="67:36"><name pos:start="67:25" pos:end="67:30">last_x</name> <operator pos:start="67:32" pos:end="67:33">==</operator> <operator pos:start="67:35" pos:end="67:35">-</operator><literal type="number" pos:start="67:36" pos:end="67:36">1</literal></expr>)</condition> <block pos:start="67:39" pos:end="71:21">{<block_content pos:start="69:25" pos:end="69:35">

                        <expr_stmt pos:start="69:25" pos:end="69:35"><expr pos:start="69:25" pos:end="69:34"><name pos:start="69:25" pos:end="69:30">last_x</name> <operator pos:start="69:32" pos:end="69:32">=</operator> <name pos:start="69:34" pos:end="69:34">x</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:51"><expr pos:start="73:21" pos:end="73:50"><call pos:start="73:21" pos:end="73:50"><name pos:start="73:21" pos:end="73:33">vnc_clear_bit</name><argument_list pos:start="73:34" pos:end="73:50">(<argument pos:start="73:35" pos:end="73:46"><expr pos:start="73:35" pos:end="73:46"><name pos:start="73:35" pos:end="73:46"><name pos:start="73:35" pos:end="73:36">vs</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:43">dirty</name><index pos:start="73:44" pos:end="73:46">[<expr pos:start="73:45" pos:end="73:45"><name pos:start="73:45" pos:end="73:45">y</name></expr>]</index></name></expr></argument>, <argument pos:start="73:49" pos:end="73:49"><expr pos:start="73:49" pos:end="73:49"><name pos:start="73:49" pos:end="73:49">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="75:19" pos:end="91:17">else <block pos:start="75:24" pos:end="91:17">{<block_content pos:start="77:21" pos:end="89:32">

                    <if_stmt pos:start="77:21" pos:end="87:21"><if pos:start="77:21" pos:end="87:21">if <condition pos:start="77:24" pos:end="77:37">(<expr pos:start="77:25" pos:end="77:36"><name pos:start="77:25" pos:end="77:30">last_x</name> <operator pos:start="77:32" pos:end="77:33">!=</operator> <operator pos:start="77:35" pos:end="77:35">-</operator><literal type="number" pos:start="77:36" pos:end="77:36">1</literal></expr>)</condition> <block pos:start="77:39" pos:end="87:21">{<block_content pos:start="79:25" pos:end="85:42">

                        <decl_stmt pos:start="79:25" pos:end="79:78"><decl pos:start="79:25" pos:end="79:77"><type pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">int</name></type> <name pos:start="79:29" pos:end="79:29">h</name> <init pos:start="79:31" pos:end="79:77">= <expr pos:start="79:33" pos:end="79:77"><call pos:start="79:33" pos:end="79:77"><name pos:start="79:33" pos:end="79:59">find_and_clear_dirty_height</name><argument_list pos:start="79:60" pos:end="79:77">(<argument pos:start="79:61" pos:end="79:62"><expr pos:start="79:61" pos:end="79:62"><name pos:start="79:61" pos:end="79:62">vs</name></expr></argument>, <argument pos:start="79:65" pos:end="79:65"><expr pos:start="79:65" pos:end="79:65"><name pos:start="79:65" pos:end="79:65">y</name></expr></argument>, <argument pos:start="79:68" pos:end="79:73"><expr pos:start="79:68" pos:end="79:73"><name pos:start="79:68" pos:end="79:73">last_x</name></expr></argument>, <argument pos:start="79:76" pos:end="79:76"><expr pos:start="79:76" pos:end="79:76"><name pos:start="79:76" pos:end="79:76">x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="81:25" pos:end="83:74"><expr pos:start="81:25" pos:end="83:73"><name pos:start="81:25" pos:end="81:25">n</name> <operator pos:start="81:27" pos:end="81:27">=</operator> <call pos:start="81:29" pos:end="83:73"><name pos:start="81:29" pos:end="81:51">send_framebuffer_update</name><argument_list pos:start="81:52" pos:end="83:73">(<argument pos:start="81:53" pos:end="81:54"><expr pos:start="81:53" pos:end="81:54"><name pos:start="81:53" pos:end="81:54">vs</name></expr></argument>, <argument pos:start="81:57" pos:end="81:67"><expr pos:start="81:57" pos:end="81:67"><name pos:start="81:57" pos:end="81:62">last_x</name> <operator pos:start="81:64" pos:end="81:64">*</operator> <literal type="number" pos:start="81:66" pos:end="81:67">16</literal></expr></argument>, <argument pos:start="81:70" pos:end="81:70"><expr pos:start="81:70" pos:end="81:70"><name pos:start="81:70" pos:end="81:70">y</name></expr></argument>,

                                                    <argument pos:start="83:53" pos:end="83:69"><expr pos:start="83:53" pos:end="83:69"><operator pos:start="83:53" pos:end="83:53">(</operator><name pos:start="83:54" pos:end="83:54">x</name> <operator pos:start="83:56" pos:end="83:56">-</operator> <name pos:start="83:58" pos:end="83:63">last_x</name><operator pos:start="83:64" pos:end="83:64">)</operator> <operator pos:start="83:66" pos:end="83:66">*</operator> <literal type="number" pos:start="83:68" pos:end="83:69">16</literal></expr></argument>, <argument pos:start="83:72" pos:end="83:72"><expr pos:start="83:72" pos:end="83:72"><name pos:start="83:72" pos:end="83:72">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="85:25" pos:end="85:42"><expr pos:start="85:25" pos:end="85:41"><name pos:start="85:25" pos:end="85:36">n_rectangles</name> <operator pos:start="85:38" pos:end="85:39">+=</operator> <name pos:start="85:41" pos:end="85:41">n</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:31"><name pos:start="89:21" pos:end="89:26">last_x</name> <operator pos:start="89:28" pos:end="89:28">=</operator> <operator pos:start="89:30" pos:end="89:30">-</operator><literal type="number" pos:start="89:31" pos:end="89:31">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="95:13" pos:end="105:13"><if pos:start="95:13" pos:end="105:13">if <condition pos:start="95:16" pos:end="95:29">(<expr pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:22">last_x</name> <operator pos:start="95:24" pos:end="95:25">!=</operator> <operator pos:start="95:27" pos:end="95:27">-</operator><literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>)</condition> <block pos:start="95:31" pos:end="105:13">{<block_content pos:start="97:17" pos:end="103:34">

                <decl_stmt pos:start="97:17" pos:end="97:70"><decl pos:start="97:17" pos:end="97:69"><type pos:start="97:17" pos:end="97:19"><name pos:start="97:17" pos:end="97:19">int</name></type> <name pos:start="97:21" pos:end="97:21">h</name> <init pos:start="97:23" pos:end="97:69">= <expr pos:start="97:25" pos:end="97:69"><call pos:start="97:25" pos:end="97:69"><name pos:start="97:25" pos:end="97:51">find_and_clear_dirty_height</name><argument_list pos:start="97:52" pos:end="97:69">(<argument pos:start="97:53" pos:end="97:54"><expr pos:start="97:53" pos:end="97:54"><name pos:start="97:53" pos:end="97:54">vs</name></expr></argument>, <argument pos:start="97:57" pos:end="97:57"><expr pos:start="97:57" pos:end="97:57"><name pos:start="97:57" pos:end="97:57">y</name></expr></argument>, <argument pos:start="97:60" pos:end="97:65"><expr pos:start="97:60" pos:end="97:65"><name pos:start="97:60" pos:end="97:65">last_x</name></expr></argument>, <argument pos:start="97:68" pos:end="97:68"><expr pos:start="97:68" pos:end="97:68"><name pos:start="97:68" pos:end="97:68">x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="99:17" pos:end="101:66"><expr pos:start="99:17" pos:end="101:65"><name pos:start="99:17" pos:end="99:17">n</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="101:65"><name pos:start="99:21" pos:end="99:43">send_framebuffer_update</name><argument_list pos:start="99:44" pos:end="101:65">(<argument pos:start="99:45" pos:end="99:46"><expr pos:start="99:45" pos:end="99:46"><name pos:start="99:45" pos:end="99:46">vs</name></expr></argument>, <argument pos:start="99:49" pos:end="99:59"><expr pos:start="99:49" pos:end="99:59"><name pos:start="99:49" pos:end="99:54">last_x</name> <operator pos:start="99:56" pos:end="99:56">*</operator> <literal type="number" pos:start="99:58" pos:end="99:59">16</literal></expr></argument>, <argument pos:start="99:62" pos:end="99:62"><expr pos:start="99:62" pos:end="99:62"><name pos:start="99:62" pos:end="99:62">y</name></expr></argument>,

                                            <argument pos:start="101:45" pos:end="101:61"><expr pos:start="101:45" pos:end="101:61"><operator pos:start="101:45" pos:end="101:45">(</operator><name pos:start="101:46" pos:end="101:46">x</name> <operator pos:start="101:48" pos:end="101:48">-</operator> <name pos:start="101:50" pos:end="101:55">last_x</name><operator pos:start="101:56" pos:end="101:56">)</operator> <operator pos:start="101:58" pos:end="101:58">*</operator> <literal type="number" pos:start="101:60" pos:end="101:61">16</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:64"><expr pos:start="101:64" pos:end="101:64"><name pos:start="101:64" pos:end="101:64">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:34"><expr pos:start="103:17" pos:end="103:33"><name pos:start="103:17" pos:end="103:28">n_rectangles</name> <operator pos:start="103:30" pos:end="103:31">+=</operator> <name pos:start="103:33" pos:end="103:33">n</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="109:9" pos:end="109:69"><expr pos:start="109:9" pos:end="109:68"><name pos:start="109:9" pos:end="109:39"><name pos:start="109:9" pos:end="109:10">vs</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:18">output</name><operator pos:start="109:19" pos:end="109:19">.</operator><name pos:start="109:20" pos:end="109:25">buffer</name><index pos:start="109:26" pos:end="109:39">[<expr pos:start="109:27" pos:end="109:38"><name pos:start="109:27" pos:end="109:38">saved_offset</name></expr>]</index></name> <operator pos:start="109:41" pos:end="109:41">=</operator> <operator pos:start="109:43" pos:end="109:43">(</operator><name pos:start="109:44" pos:end="109:55">n_rectangles</name> <operator pos:start="109:57" pos:end="109:58">&gt;&gt;</operator> <literal type="number" pos:start="109:60" pos:end="109:60">8</literal><operator pos:start="109:61" pos:end="109:61">)</operator> <operator pos:start="109:63" pos:end="109:63">&amp;</operator> <literal type="number" pos:start="109:65" pos:end="109:68">0xFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:66"><expr pos:start="111:9" pos:end="111:65"><name pos:start="111:9" pos:end="111:43"><name pos:start="111:9" pos:end="111:10">vs</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:18">output</name><operator pos:start="111:19" pos:end="111:19">.</operator><name pos:start="111:20" pos:end="111:25">buffer</name><index pos:start="111:26" pos:end="111:43">[<expr pos:start="111:27" pos:end="111:42"><name pos:start="111:27" pos:end="111:38">saved_offset</name> <operator pos:start="111:40" pos:end="111:40">+</operator> <literal type="number" pos:start="111:42" pos:end="111:42">1</literal></expr>]</index></name> <operator pos:start="111:45" pos:end="111:45">=</operator> <name pos:start="111:47" pos:end="111:58">n_rectangles</name> <operator pos:start="111:60" pos:end="111:60">&amp;</operator> <literal type="number" pos:start="111:62" pos:end="111:65">0xFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:22"><expr pos:start="113:9" pos:end="113:21"><call pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:17">vnc_flush</name><argument_list pos:start="113:18" pos:end="113:21">(<argument pos:start="113:19" pos:end="113:20"><expr pos:start="113:19" pos:end="113:20"><name pos:start="113:19" pos:end="113:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:29"><expr pos:start="115:9" pos:end="115:28"><name pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:10">vs</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:24">force_update</name></name> <operator pos:start="115:26" pos:end="115:26">=</operator> <literal type="number" pos:start="115:28" pos:end="115:28">0</literal></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:28">return <expr pos:start="117:16" pos:end="117:27"><name pos:start="117:16" pos:end="117:27">n_rectangles</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="125:34"><if pos:start="123:5" pos:end="125:34">if <condition pos:start="123:8" pos:end="123:24">(<expr pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:17"><name pos:start="123:9" pos:end="123:10">vs</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:17">csock</name></name> <operator pos:start="123:19" pos:end="123:20">==</operator> <operator pos:start="123:22" pos:end="123:22">-</operator><literal type="number" pos:start="123:23" pos:end="123:23">1</literal></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:34"><block_content pos:start="125:9" pos:end="125:34">

        <expr_stmt pos:start="125:9" pos:end="125:34"><expr pos:start="125:9" pos:end="125:33"><call pos:start="125:9" pos:end="125:33"><name pos:start="125:9" pos:end="125:29">vnc_disconnect_finish</name><argument_list pos:start="125:30" pos:end="125:33">(<argument pos:start="125:31" pos:end="125:32"><expr pos:start="125:31" pos:end="125:32"><name pos:start="125:31" pos:end="125:32">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
