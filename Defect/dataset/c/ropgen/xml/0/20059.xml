<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20059.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">max7310_tx</name><parameter_list pos:start="1:22" pos:end="1:50">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">I2CSlave</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">i2c</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:44">uint8_t</name></type> <name pos:start="1:46" pos:end="1:49">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MAX7310State</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><call pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:29">MAX7310</name><argument_list pos:start="5:30" pos:end="5:34">(<argument pos:start="5:31" pos:end="5:33"><expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">i2c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:16">diff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">line</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">len</name></name> <operator pos:start="13:16" pos:end="13:17">++</operator> <operator pos:start="13:19" pos:end="13:19">&gt;</operator> <literal type="number" pos:start="13:21" pos:end="13:21">1</literal></expr>)</condition> <block pos:start="13:24" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:17">

<cpp:ifdef pos:start="15:1" pos:end="15:14">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:14">VERBOSE</name></cpp:ifdef>

        <expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:73"><call pos:start="17:9" pos:end="17:73"><name pos:start="17:9" pos:end="17:14">printf</name><argument_list pos:start="17:15" pos:end="17:73">(<argument pos:start="17:16" pos:end="17:50"><expr pos:start="17:16" pos:end="17:50"><literal type="string" pos:start="17:16" pos:end="17:50">"%s: message too long (%i bytes)\n"</literal></expr></argument>, <argument pos:start="17:53" pos:end="17:64"><expr pos:start="17:53" pos:end="17:64"><name pos:start="17:53" pos:end="17:64">__FUNCTION__</name></expr></argument>, <argument pos:start="17:67" pos:end="17:72"><expr pos:start="17:67" pos:end="17:72"><name pos:start="17:67" pos:end="17:72"><name pos:start="17:67" pos:end="17:67">s</name><operator pos:start="17:68" pos:end="17:69">-&gt;</operator><name pos:start="17:70" pos:end="17:72">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:27">i2c_command_byte</name></name></expr>)</condition> <block pos:start="27:30" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:17">

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:18">command</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:25">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:27">i2c_command_byte</name></name> <operator pos:start="31:29" pos:end="31:29">=</operator> <literal type="number" pos:start="31:31" pos:end="31:31">0</literal></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="39:5" pos:end="101:5">switch <condition pos:start="39:12" pos:end="39:23">(<expr pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:22">command</name></name></expr>)</condition> <block pos:start="39:25" pos:end="101:5">{<block_content pos:start="41:5" pos:end="99:17">

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x01</literal></expr>:</case>	<comment type="block" pos:start="41:17" pos:end="41:33">/* Output port */</comment>

        <for pos:start="43:9" pos:end="53:9">for <control pos:start="43:13" pos:end="45:45">(<init pos:start="43:14" pos:end="43:54"><expr pos:start="43:14" pos:end="43:53"><name pos:start="43:14" pos:end="43:17">diff</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:25">data</name> <operator pos:start="43:27" pos:end="43:27">^</operator> <name pos:start="43:29" pos:end="43:36"><name pos:start="43:29" pos:end="43:29">s</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:36">level</name></name><operator pos:start="43:37" pos:end="43:37">)</operator> <operator pos:start="43:39" pos:end="43:39">&amp;</operator> <operator pos:start="43:41" pos:end="43:41">~</operator><name pos:start="43:42" pos:end="43:53"><name pos:start="43:42" pos:end="43:42">s</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:53">direction</name></name></expr>;</init> <condition pos:start="43:56" pos:end="43:60"><expr pos:start="43:56" pos:end="43:59"><name pos:start="43:56" pos:end="43:59">diff</name></expr>;</condition>

                        <incr pos:start="45:25" pos:end="45:44"><expr pos:start="45:25" pos:end="45:44"><name pos:start="45:25" pos:end="45:28">diff</name> <operator pos:start="45:30" pos:end="45:31">&amp;=</operator> <operator pos:start="45:33" pos:end="45:33">~</operator><operator pos:start="45:34" pos:end="45:34">(</operator><literal type="number" pos:start="45:35" pos:end="45:35">1</literal> <operator pos:start="45:37" pos:end="45:38">&lt;&lt;</operator> <name pos:start="45:40" pos:end="45:43">line</name><operator pos:start="45:44" pos:end="45:44">)</operator></expr></incr>)</control> <block pos:start="45:47" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:67">

            <expr_stmt pos:start="47:13" pos:end="47:33"><expr pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:16">line</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:22">ffs</name><argument_list pos:start="47:23" pos:end="47:28">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">diff</name></expr></argument>)</argument_list></call> <operator pos:start="47:30" pos:end="47:30">-</operator> <literal type="number" pos:start="47:32" pos:end="47:32">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="51:67"><if pos:start="49:13" pos:end="51:67">if <condition pos:start="49:16" pos:end="49:33">(<expr pos:start="49:17" pos:end="49:32"><name pos:start="49:17" pos:end="49:32"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:26">handler</name><index pos:start="49:27" pos:end="49:32">[<expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">line</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:67"><block_content pos:start="51:17" pos:end="51:67">

                <expr_stmt pos:start="51:17" pos:end="51:67"><expr pos:start="51:17" pos:end="51:66"><call pos:start="51:17" pos:end="51:66"><name pos:start="51:17" pos:end="51:28">qemu_set_irq</name><argument_list pos:start="51:29" pos:end="51:66">(<argument pos:start="51:30" pos:end="51:45"><expr pos:start="51:30" pos:end="51:45"><name pos:start="51:30" pos:end="51:45"><name pos:start="51:30" pos:end="51:30">s</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:39">handler</name><index pos:start="51:40" pos:end="51:45">[<expr pos:start="51:41" pos:end="51:44"><name pos:start="51:41" pos:end="51:44">line</name></expr>]</index></name></expr></argument>, <argument pos:start="51:48" pos:end="51:65"><expr pos:start="51:48" pos:end="51:65"><operator pos:start="51:48" pos:end="51:48">(</operator><name pos:start="51:49" pos:end="51:52">data</name> <operator pos:start="51:54" pos:end="51:55">&gt;&gt;</operator> <name pos:start="51:57" pos:end="51:60">line</name><operator pos:start="51:61" pos:end="51:61">)</operator> <operator pos:start="51:63" pos:end="51:63">&amp;</operator> <literal type="number" pos:start="51:65" pos:end="51:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="55:9" pos:end="55:70"><expr pos:start="55:9" pos:end="55:69"><name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:16">level</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:28">level</name></name> <operator pos:start="55:30" pos:end="55:30">&amp;</operator> <name pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:43">direction</name></name><operator pos:start="55:44" pos:end="55:44">)</operator> <operator pos:start="55:46" pos:end="55:46">|</operator> <operator pos:start="55:48" pos:end="55:48">(</operator><name pos:start="55:49" pos:end="55:52">data</name> <operator pos:start="55:54" pos:end="55:54">&amp;</operator> <operator pos:start="55:56" pos:end="55:56">~</operator><name pos:start="55:57" pos:end="55:68"><name pos:start="55:57" pos:end="55:57">s</name><operator pos:start="55:58" pos:end="55:59">-&gt;</operator><name pos:start="55:60" pos:end="55:68">direction</name></name><operator pos:start="55:69" pos:end="55:69">)</operator></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <case pos:start="61:5" pos:end="61:14">case <expr pos:start="61:10" pos:end="61:13"><literal type="number" pos:start="61:10" pos:end="61:13">0x02</literal></expr>:</case>	<comment type="block" pos:start="61:17" pos:end="61:40">/* Polarity inversion */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:27"><expr pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:19">polarity</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:26">data</name></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>



    <case pos:start="69:5" pos:end="69:14">case <expr pos:start="69:10" pos:end="69:13"><literal type="number" pos:start="69:10" pos:end="69:13">0x03</literal></expr>:</case>	<comment type="block" pos:start="69:17" pos:end="69:35">/* Configuration */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:16">level</name></name> <operator pos:start="71:18" pos:end="71:19">&amp;=</operator> <operator pos:start="71:21" pos:end="71:21">~</operator><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:23">s</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:34">direction</name></name> <operator pos:start="71:36" pos:end="71:36">^</operator> <name pos:start="71:38" pos:end="71:41">data</name><operator pos:start="71:42" pos:end="71:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:28"><expr pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:20">direction</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:27">data</name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>



    <case pos:start="79:5" pos:end="79:14">case <expr pos:start="79:10" pos:end="79:13"><literal type="number" pos:start="79:10" pos:end="79:13">0x04</literal></expr>:</case>	<comment type="block" pos:start="79:17" pos:end="79:29">/* Timeout */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:17">status</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:24">data</name></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>



    <case pos:start="87:5" pos:end="87:14">case <expr pos:start="87:10" pos:end="87:13"><literal type="number" pos:start="87:10" pos:end="87:13">0x00</literal></expr>:</case>	<comment type="block" pos:start="87:17" pos:end="87:48">/* Input port - ignore writes */</comment>

	<break pos:start="89:9" pos:end="89:14">break;</break>

    <default pos:start="91:5" pos:end="94:0">default:</default>

<cpp:ifdef pos:start="93:1" pos:end="93:14">#<cpp:directive pos:start="93:2" pos:end="93:6">ifdef</cpp:directive> <name pos:start="93:8" pos:end="93:14">VERBOSE</name></cpp:ifdef>

        <expr_stmt pos:start="95:9" pos:end="98:0"><expr pos:start="95:9" pos:end="95:71"><call pos:start="95:9" pos:end="95:71"><name pos:start="95:9" pos:end="95:14">printf</name><argument_list pos:start="95:15" pos:end="95:71">(<argument pos:start="95:16" pos:end="95:44"><expr pos:start="95:16" pos:end="95:44"><literal type="string" pos:start="95:16" pos:end="95:44">"%s: unknown register %02x\n"</literal></expr></argument>, <argument pos:start="95:47" pos:end="95:58"><expr pos:start="95:47" pos:end="95:58"><name pos:start="95:47" pos:end="95:58">__FUNCTION__</name></expr></argument>, <argument pos:start="95:61" pos:end="95:70"><expr pos:start="95:61" pos:end="95:70"><name pos:start="95:61" pos:end="95:70"><name pos:start="95:61" pos:end="95:61">s</name><operator pos:start="95:62" pos:end="95:63">-&gt;</operator><name pos:start="95:64" pos:end="95:70">command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

        <return pos:start="99:9" pos:end="99:17">return <expr pos:start="99:16" pos:end="99:16"><literal type="number" pos:start="99:16" pos:end="99:16">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
