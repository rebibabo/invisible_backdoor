<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18737.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">m68k_cpu_reset</name><parameter_list pos:start="1:27" pos:end="1:39">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:37"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:16">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">M68kCPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name> <init pos:start="5:18" pos:end="5:30">= <expr pos:start="5:20" pos:end="5:30"><call pos:start="5:20" pos:end="5:30"><name pos:start="5:20" pos:end="5:27">M68K_CPU</name><argument_list pos:start="5:28" pos:end="5:30">(<argument pos:start="5:29" pos:end="5:29"><expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">M68kCPUClass</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">mcc</name> <init pos:start="7:23" pos:end="7:47">= <expr pos:start="7:25" pos:end="7:47"><call pos:start="7:25" pos:end="7:47"><name pos:start="7:25" pos:end="7:42">M68K_CPU_GET_CLASS</name><argument_list pos:start="7:43" pos:end="7:47">(<argument pos:start="7:44" pos:end="7:46"><expr pos:start="7:44" pos:end="7:46"><name pos:start="7:44" pos:end="7:46">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">CPUM68KState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">env</name> <init pos:start="9:23" pos:end="9:33">= <expr pos:start="9:25" pos:end="9:33"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:28">cpu</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:33">env</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><call pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:7">mcc</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:21">parent_reset</name></name><argument_list pos:start="13:22" pos:end="13:24">(<argument pos:start="13:23" pos:end="13:23"><expr pos:start="13:23" pos:end="13:23"><name pos:start="13:23" pos:end="13:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:60"><call pos:start="17:5" pos:end="17:60"><name pos:start="17:5" pos:end="17:10">memset</name><argument_list pos:start="17:11" pos:end="17:60">(<argument pos:start="17:12" pos:end="17:14"><expr pos:start="17:12" pos:end="17:14"><name pos:start="17:12" pos:end="17:14">env</name></expr></argument>, <argument pos:start="17:17" pos:end="17:17"><expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></argument>, <argument pos:start="17:20" pos:end="17:59"><expr pos:start="17:20" pos:end="17:59"><call pos:start="17:20" pos:end="17:59"><name pos:start="17:20" pos:end="17:27">offsetof</name><argument_list pos:start="17:28" pos:end="17:59">(<argument pos:start="17:29" pos:end="17:40"><expr pos:start="17:29" pos:end="17:40"><name pos:start="17:29" pos:end="17:40">CPUM68KState</name></expr></argument>, <argument pos:start="17:43" pos:end="17:58"><expr pos:start="17:43" pos:end="17:58"><name pos:start="17:43" pos:end="17:58">end_reset_fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:30">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:30"><operator pos:start="19:5" pos:end="19:5">!</operator><call pos:start="19:6" pos:end="19:30"><name pos:start="19:6" pos:end="19:12">defined</name><argument_list pos:start="19:13" pos:end="19:30">(<argument pos:start="19:14" pos:end="19:29"><expr pos:start="19:14" pos:end="19:29"><name pos:start="19:14" pos:end="19:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">env</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:11">sr</name></name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:20">0x2700</literal></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><call pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:18">m68k_switch_sp</name><argument_list pos:start="25:19" pos:end="25:23">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:52">/* ??? FP regs should be initialized to NaN.  */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><call pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:20">cpu_m68k_set_ccr</name><argument_list pos:start="29:21" pos:end="29:28">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">env</name></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:60">/* TODO: We should set PC from the interrupt vector.  */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:7">env</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:11">pc</name></name> <operator pos:start="33:13" pos:end="33:13">=</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
