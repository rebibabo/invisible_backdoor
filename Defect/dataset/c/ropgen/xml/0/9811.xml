<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9811.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:11">av_cold</name></type> <name pos:start="1:13" pos:end="1:28">ff_celt_pvq_init</name><parameter_list pos:start="1:29" pos:end="1:55">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:36">CeltPVQ</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">pvq</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:54"><decl pos:start="1:45" pos:end="1:54"><type pos:start="1:45" pos:end="1:54"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:54">encode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:13">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">CeltPVQ</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:14">s</name> <init pos:start="5:16" pos:end="5:43">= <expr pos:start="5:18" pos:end="5:43"><call pos:start="5:18" pos:end="5:43"><name pos:start="5:18" pos:end="5:26">av_malloc</name><argument_list pos:start="5:27" pos:end="5:43">(<argument pos:start="5:28" pos:end="5:42"><expr pos:start="5:28" pos:end="5:42"><sizeof pos:start="5:28" pos:end="5:42">sizeof<argument_list pos:start="5:34" pos:end="5:42">(<argument pos:start="5:35" pos:end="5:41"><expr pos:start="5:35" pos:end="5:41"><name pos:start="5:35" pos:end="5:41">CeltPVQ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="7:5" pos:end="9:31"><if pos:start="7:5" pos:end="9:31">if <condition pos:start="7:8" pos:end="7:11">(<expr pos:start="7:9" pos:end="7:10"><operator pos:start="7:9" pos:end="7:9">!</operator><name pos:start="7:10" pos:end="7:10">s</name></expr>)</condition><block type="pseudo" pos:start="9:9" pos:end="9:31"><block_content pos:start="9:9" pos:end="9:31">

        <return pos:start="9:9" pos:end="9:31">return <expr pos:start="9:16" pos:end="9:30"><call pos:start="9:16" pos:end="9:30"><name pos:start="9:16" pos:end="9:22">AVERROR</name><argument_list pos:start="9:23" pos:end="9:30">(<argument pos:start="9:24" pos:end="9:29"><expr pos:start="9:24" pos:end="9:29"><name pos:start="9:24" pos:end="9:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:17">pvq_search</name></name> <operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:36">ppp_pvq_search_c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:63"><expr pos:start="15:5" pos:end="15:62"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:17">quant_band</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <ternary pos:start="15:21" pos:end="15:62"><condition pos:start="15:21" pos:end="15:28"><expr pos:start="15:21" pos:end="15:26"><name pos:start="15:21" pos:end="15:26">encode</name></expr> ?</condition><then pos:start="15:30" pos:end="15:44"> <expr pos:start="15:30" pos:end="15:44"><name pos:start="15:30" pos:end="15:44">pvq_encode_band</name></expr> </then><else pos:start="15:46" pos:end="15:62">: <expr pos:start="15:48" pos:end="15:62"><name pos:start="15:48" pos:end="15:62">pvq_decode_band</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:16">band_cost</name></name>  <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:33">pvq_band_cost</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="23:32"><if pos:start="21:5" pos:end="23:32">if <condition pos:start="21:8" pos:end="21:17">(<expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">ARCH_X86</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:32"><block_content pos:start="23:9" pos:end="23:32">

        <expr_stmt pos:start="23:9" pos:end="23:32"><expr pos:start="23:9" pos:end="23:31"><call pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:28">ff_opus_dsp_init_x86</name><argument_list pos:start="23:29" pos:end="23:31">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:13"><expr pos:start="27:5" pos:end="27:12"><operator pos:start="27:5" pos:end="27:5">*</operator><name pos:start="27:6" pos:end="27:8">pvq</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:12">s</name></expr>;</expr_stmt>



    <return pos:start="31:5" pos:end="31:13">return <expr pos:start="31:12" pos:end="31:12"><literal type="number" pos:start="31:12" pos:end="31:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
