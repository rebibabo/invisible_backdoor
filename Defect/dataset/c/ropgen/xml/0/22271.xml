<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22271.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">test_redirector_rx</name><parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:16">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:20">backend_sock</name><index pos:start="5:21" pos:end="5:23">[<expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">2</literal></expr>]</index></name></decl>, <decl pos:start="5:26" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:34">send_sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">cmdline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">ret</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>, <decl pos:start="9:23" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:23" pos:end="9:25">len</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:17">send_buf</name><index pos:start="11:18" pos:end="11:19">[]</index></name> <init pos:start="11:21" pos:end="11:31">= <expr pos:start="11:23" pos:end="11:31"><literal type="string" pos:start="11:23" pos:end="11:31">"Hello!!"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:19">sock_path0</name><index pos:start="13:20" pos:end="13:21">[]</index></name> <init pos:start="13:23" pos:end="13:51">= <expr pos:start="13:25" pos:end="13:51"><literal type="string" pos:start="13:25" pos:end="13:51">"filter-redirector0.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:21"><name pos:start="15:10" pos:end="15:19">sock_path1</name><index pos:start="15:20" pos:end="15:21">[]</index></name> <init pos:start="15:23" pos:end="15:51">= <expr pos:start="15:25" pos:end="15:51"><literal type="string" pos:start="15:25" pos:end="15:51">"filter-redirector1.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">recv_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:17">size</name> <init pos:start="19:19" pos:end="19:36">= <expr pos:start="19:21" pos:end="19:36"><sizeof pos:start="19:21" pos:end="19:36">sizeof<argument_list pos:start="19:27" pos:end="19:36">(<argument pos:start="19:28" pos:end="19:35"><expr pos:start="19:28" pos:end="19:35"><name pos:start="19:28" pos:end="19:35">send_buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:8">size</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:22"><name pos:start="21:12" pos:end="21:16">htonl</name><argument_list pos:start="21:17" pos:end="21:22">(<argument pos:start="21:18" pos:end="21:21"><expr pos:start="21:18" pos:end="21:21"><name pos:start="21:18" pos:end="21:21">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:60"><expr pos:start="25:5" pos:end="25:59"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:59"><name pos:start="25:11" pos:end="25:20">socketpair</name><argument_list pos:start="25:21" pos:end="25:59">(<argument pos:start="25:22" pos:end="25:28"><expr pos:start="25:22" pos:end="25:28"><name pos:start="25:22" pos:end="25:28">PF_UNIX</name></expr></argument>, <argument pos:start="25:31" pos:end="25:41"><expr pos:start="25:31" pos:end="25:41"><name pos:start="25:31" pos:end="25:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><literal type="number" pos:start="25:44" pos:end="25:44">0</literal></expr></argument>, <argument pos:start="25:47" pos:end="25:58"><expr pos:start="25:47" pos:end="25:58"><name pos:start="25:47" pos:end="25:58">backend_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:19">g_assert_cmpint</name><argument_list pos:start="27:20" pos:end="27:32">(<argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">ret</name></expr></argument>, <argument pos:start="27:26" pos:end="27:27"><expr pos:start="27:26" pos:end="27:27"><operator pos:start="27:26" pos:end="27:27">!=</operator></expr></argument>, <argument pos:start="27:30" pos:end="27:31"><expr pos:start="27:30" pos:end="27:31"><operator pos:start="27:30" pos:end="27:30">-</operator><literal type="number" pos:start="27:31" pos:end="27:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:29"><name pos:start="31:11" pos:end="31:17">mkstemp</name><argument_list pos:start="31:18" pos:end="31:29">(<argument pos:start="31:19" pos:end="31:28"><expr pos:start="31:19" pos:end="31:28"><name pos:start="31:19" pos:end="31:28">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><call pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:32">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">ret</name></expr></argument>, <argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><operator pos:start="33:26" pos:end="33:27">!=</operator></expr></argument>, <argument pos:start="33:30" pos:end="33:31"><expr pos:start="33:30" pos:end="33:31"><operator pos:start="33:30" pos:end="33:30">-</operator><literal type="number" pos:start="33:31" pos:end="33:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:29"><name pos:start="35:11" pos:end="35:17">mkstemp</name><argument_list pos:start="35:18" pos:end="35:29">(<argument pos:start="35:19" pos:end="35:28"><expr pos:start="35:19" pos:end="35:28"><name pos:start="35:19" pos:end="35:28">sock_path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:19">g_assert_cmpint</name><argument_list pos:start="37:20" pos:end="37:32">(<argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">ret</name></expr></argument>, <argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><operator pos:start="37:26" pos:end="37:27">!=</operator></expr></argument>, <argument pos:start="37:30" pos:end="37:31"><expr pos:start="37:30" pos:end="37:31"><operator pos:start="37:30" pos:end="37:30">-</operator><literal type="number" pos:start="37:31" pos:end="37:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="63:71"><expr pos:start="41:5" pos:end="63:70"><name pos:start="41:5" pos:end="41:11">cmdline</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="63:70"><name pos:start="41:15" pos:end="41:29">g_strdup_printf</name><argument_list pos:start="41:30" pos:end="63:70">(<argument pos:start="41:31" pos:end="61:45"><expr pos:start="41:31" pos:end="61:45"><literal type="string" pos:start="41:31" pos:end="41:66">"-netdev socket,id=qtest-bn0,fd=%d "</literal>

                <literal type="string" pos:start="43:17" pos:end="43:63">"-device rtl8139,netdev=qtest-bn0,id=qtest-e0 "</literal>

                <literal type="string" pos:start="45:17" pos:end="45:71">"-chardev socket,id=redirector0,path=%s,server,nowait "</literal>

                <literal type="string" pos:start="47:17" pos:end="47:71">"-chardev socket,id=redirector1,path=%s,server,nowait "</literal>

                <literal type="string" pos:start="49:17" pos:end="49:64">"-chardev socket,id=redirector2,path=%s,nowait "</literal>

                <literal type="string" pos:start="51:17" pos:end="51:73">"-object filter-redirector,id=qtest-f0,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="53:17" pos:end="53:45">"queue=rx,indev=redirector0 "</literal>

                <literal type="string" pos:start="55:17" pos:end="55:73">"-object filter-redirector,id=qtest-f1,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="57:17" pos:end="57:46">"queue=rx,outdev=redirector2 "</literal>

                <literal type="string" pos:start="59:17" pos:end="59:73">"-object filter-redirector,id=qtest-f2,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="61:17" pos:end="61:45">"queue=rx,indev=redirector1 "</literal></expr></argument>

                , <argument pos:start="63:19" pos:end="63:33"><expr pos:start="63:19" pos:end="63:33"><name pos:start="63:19" pos:end="63:33"><name pos:start="63:19" pos:end="63:30">backend_sock</name><index pos:start="63:31" pos:end="63:33">[<expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:36" pos:end="63:45"><expr pos:start="63:36" pos:end="63:45"><name pos:start="63:36" pos:end="63:45">sock_path0</name></expr></argument>, <argument pos:start="63:48" pos:end="63:57"><expr pos:start="63:48" pos:end="63:57"><name pos:start="63:48" pos:end="63:57">sock_path1</name></expr></argument>, <argument pos:start="63:60" pos:end="63:69"><expr pos:start="63:60" pos:end="63:69"><name pos:start="63:60" pos:end="63:69">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><call pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:15">qtest_start</name><argument_list pos:start="65:16" pos:end="65:24">(<argument pos:start="65:17" pos:end="65:23"><expr pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:23">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:20"><expr pos:start="67:5" pos:end="67:19"><call pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:10">g_free</name><argument_list pos:start="67:11" pos:end="67:19">(<argument pos:start="67:12" pos:end="67:18"><expr pos:start="67:12" pos:end="67:18"><name pos:start="67:12" pos:end="67:18">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="71:5" pos:end="87:6"><decl pos:start="71:5" pos:end="87:5"><type pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:10">struct</name> <name pos:start="71:12" pos:end="71:16">iovec</name></name></type> <name pos:start="71:18" pos:end="71:22"><name pos:start="71:18" pos:end="71:20">iov</name><index pos:start="71:21" pos:end="71:22">[]</index></name> <init pos:start="71:24" pos:end="87:5">= <expr pos:start="71:26" pos:end="87:5"><block pos:start="71:26" pos:end="87:5">{

        <expr pos:start="73:9" pos:end="79:9"><block pos:start="73:9" pos:end="79:9">{

            <expr pos:start="75:13" pos:end="75:29"><operator pos:start="75:13" pos:end="75:13">.</operator><name pos:start="75:14" pos:end="75:21">iov_base</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <operator pos:start="75:25" pos:end="75:25">&amp;</operator><name pos:start="75:26" pos:end="75:29">size</name></expr>,

            <expr pos:start="77:13" pos:end="77:35"><operator pos:start="77:13" pos:end="77:13">.</operator><name pos:start="77:14" pos:end="77:20">iov_len</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <sizeof pos:start="77:24" pos:end="77:35">sizeof<argument_list pos:start="77:30" pos:end="77:35">(<argument pos:start="77:31" pos:end="77:34"><expr pos:start="77:31" pos:end="77:34"><name pos:start="77:31" pos:end="77:34">size</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>, <expr pos:start="79:12" pos:end="85:9"><block pos:start="79:12" pos:end="85:9">{

            <expr pos:start="81:13" pos:end="81:32"><operator pos:start="81:13" pos:end="81:13">.</operator><name pos:start="81:14" pos:end="81:21">iov_base</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:32">send_buf</name></expr>,

            <expr pos:start="83:13" pos:end="83:39"><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:20">iov_len</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <sizeof pos:start="83:24" pos:end="83:39">sizeof<argument_list pos:start="83:30" pos:end="83:39">(<argument pos:start="83:31" pos:end="83:38"><expr pos:start="83:31" pos:end="83:38"><name pos:start="83:31" pos:end="83:38">send_buf</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:47"><expr pos:start="91:5" pos:end="91:46"><name pos:start="91:5" pos:end="91:13">send_sock</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:46"><name pos:start="91:17" pos:end="91:28">unix_connect</name><argument_list pos:start="91:29" pos:end="91:46">(<argument pos:start="91:30" pos:end="91:39"><expr pos:start="91:30" pos:end="91:39"><name pos:start="91:30" pos:end="91:39">sock_path1</name></expr></argument>, <argument pos:start="91:42" pos:end="91:45"><expr pos:start="91:42" pos:end="91:45"><name pos:start="91:42" pos:end="91:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><call pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:19">g_assert_cmpint</name><argument_list pos:start="93:20" pos:end="93:38">(<argument pos:start="93:21" pos:end="93:29"><expr pos:start="93:21" pos:end="93:29"><name pos:start="93:21" pos:end="93:29">send_sock</name></expr></argument>, <argument pos:start="93:32" pos:end="93:33"><expr pos:start="93:32" pos:end="93:33"><operator pos:start="93:32" pos:end="93:33">!=</operator></expr></argument>, <argument pos:start="93:36" pos:end="93:37"><expr pos:start="93:36" pos:end="93:37"><operator pos:start="93:36" pos:end="93:36">-</operator><literal type="number" pos:start="93:37" pos:end="93:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="95:5" pos:end="95:78">/* send a qmp command to guarantee that 'connected' is setting to true. */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:58"><expr pos:start="97:5" pos:end="97:57"><call pos:start="97:5" pos:end="97:57"><name pos:start="97:5" pos:end="97:24">qmp_discard_response</name><argument_list pos:start="97:25" pos:end="97:57">(<argument pos:start="97:26" pos:end="97:56"><expr pos:start="97:26" pos:end="97:56"><literal type="string" pos:start="97:26" pos:end="97:56">"{ 'execute' : 'query-status'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:74"><expr pos:start="101:5" pos:end="101:73"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:73"><name pos:start="101:11" pos:end="101:18">iov_send</name><argument_list pos:start="101:19" pos:end="101:73">(<argument pos:start="101:20" pos:end="101:28"><expr pos:start="101:20" pos:end="101:28"><name pos:start="101:20" pos:end="101:28">send_sock</name></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">iov</name></expr></argument>, <argument pos:start="101:36" pos:end="101:36"><expr pos:start="101:36" pos:end="101:36"><literal type="number" pos:start="101:36" pos:end="101:36">2</literal></expr></argument>, <argument pos:start="101:39" pos:end="101:39"><expr pos:start="101:39" pos:end="101:39"><literal type="number" pos:start="101:39" pos:end="101:39">0</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:72"><expr pos:start="101:42" pos:end="101:72"><sizeof pos:start="101:42" pos:end="101:53">sizeof<argument_list pos:start="101:48" pos:end="101:53">(<argument pos:start="101:49" pos:end="101:52"><expr pos:start="101:49" pos:end="101:52"><name pos:start="101:49" pos:end="101:52">size</name></expr></argument>)</argument_list></sizeof> <operator pos:start="101:55" pos:end="101:55">+</operator> <sizeof pos:start="101:57" pos:end="101:72">sizeof<argument_list pos:start="101:63" pos:end="101:72">(<argument pos:start="101:64" pos:end="101:71"><expr pos:start="101:64" pos:end="101:71"><name pos:start="101:64" pos:end="101:71">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:62"><expr pos:start="103:5" pos:end="103:61"><call pos:start="103:5" pos:end="103:61"><name pos:start="103:5" pos:end="103:19">g_assert_cmpint</name><argument_list pos:start="103:20" pos:end="103:61">(<argument pos:start="103:21" pos:end="103:23"><expr pos:start="103:21" pos:end="103:23"><name pos:start="103:21" pos:end="103:23">ret</name></expr></argument>, <argument pos:start="103:26" pos:end="103:27"><expr pos:start="103:26" pos:end="103:27"><operator pos:start="103:26" pos:end="103:27">==</operator></expr></argument>, <argument pos:start="103:30" pos:end="103:60"><expr pos:start="103:30" pos:end="103:60"><sizeof pos:start="103:30" pos:end="103:45">sizeof<argument_list pos:start="103:36" pos:end="103:45">(<argument pos:start="103:37" pos:end="103:44"><expr pos:start="103:37" pos:end="103:44"><name pos:start="103:37" pos:end="103:44">send_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="103:47" pos:end="103:47">+</operator> <sizeof pos:start="103:49" pos:end="103:60">sizeof<argument_list pos:start="103:55" pos:end="103:60">(<argument pos:start="103:56" pos:end="103:59"><expr pos:start="103:56" pos:end="103:59"><name pos:start="103:56" pos:end="103:59">size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:21"><expr pos:start="105:5" pos:end="105:20"><call pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:9">close</name><argument_list pos:start="105:10" pos:end="105:20">(<argument pos:start="105:11" pos:end="105:19"><expr pos:start="105:11" pos:end="105:19"><name pos:start="105:11" pos:end="105:19">send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:7">ret</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:58"><name pos:start="109:11" pos:end="109:19">qemu_recv</name><argument_list pos:start="109:20" pos:end="109:58">(<argument pos:start="109:21" pos:end="109:35"><expr pos:start="109:21" pos:end="109:35"><name pos:start="109:21" pos:end="109:35"><name pos:start="109:21" pos:end="109:32">backend_sock</name><index pos:start="109:33" pos:end="109:35">[<expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:38" pos:end="109:41"><expr pos:start="109:38" pos:end="109:41"><operator pos:start="109:38" pos:end="109:38">&amp;</operator><name pos:start="109:39" pos:end="109:41">len</name></expr></argument>, <argument pos:start="109:44" pos:end="109:54"><expr pos:start="109:44" pos:end="109:54"><sizeof pos:start="109:44" pos:end="109:54">sizeof<argument_list pos:start="109:50" pos:end="109:54">(<argument pos:start="109:51" pos:end="109:53"><expr pos:start="109:51" pos:end="109:53"><name pos:start="109:51" pos:end="109:53">len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:57" pos:end="109:57"><expr pos:start="109:57" pos:end="109:57"><literal type="number" pos:start="109:57" pos:end="109:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:42"><expr pos:start="111:5" pos:end="111:41"><call pos:start="111:5" pos:end="111:41"><name pos:start="111:5" pos:end="111:19">g_assert_cmpint</name><argument_list pos:start="111:20" pos:end="111:41">(<argument pos:start="111:21" pos:end="111:23"><expr pos:start="111:21" pos:end="111:23"><name pos:start="111:21" pos:end="111:23">ret</name></expr></argument>, <argument pos:start="111:26" pos:end="111:27"><expr pos:start="111:26" pos:end="111:27"><operator pos:start="111:26" pos:end="111:27">==</operator></expr></argument>, <argument pos:start="111:30" pos:end="111:40"><expr pos:start="111:30" pos:end="111:40"><sizeof pos:start="111:30" pos:end="111:40">sizeof<argument_list pos:start="111:36" pos:end="111:40">(<argument pos:start="111:37" pos:end="111:39"><expr pos:start="111:37" pos:end="111:39"><name pos:start="111:37" pos:end="111:39">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:21"><expr pos:start="113:5" pos:end="113:20"><name pos:start="113:5" pos:end="113:7">len</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:20"><name pos:start="113:11" pos:end="113:15">ntohl</name><argument_list pos:start="113:16" pos:end="113:20">(<argument pos:start="113:17" pos:end="113:19"><expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:47"><expr pos:start="117:5" pos:end="117:46"><call pos:start="117:5" pos:end="117:46"><name pos:start="117:5" pos:end="117:19">g_assert_cmpint</name><argument_list pos:start="117:20" pos:end="117:46">(<argument pos:start="117:21" pos:end="117:23"><expr pos:start="117:21" pos:end="117:23"><name pos:start="117:21" pos:end="117:23">len</name></expr></argument>, <argument pos:start="117:26" pos:end="117:27"><expr pos:start="117:26" pos:end="117:27"><operator pos:start="117:26" pos:end="117:27">==</operator></expr></argument>, <argument pos:start="117:30" pos:end="117:45"><expr pos:start="117:30" pos:end="117:45"><sizeof pos:start="117:30" pos:end="117:45">sizeof<argument_list pos:start="117:36" pos:end="117:45">(<argument pos:start="117:37" pos:end="117:44"><expr pos:start="117:37" pos:end="117:44"><name pos:start="117:37" pos:end="117:44">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:29"><expr pos:start="119:5" pos:end="119:28"><name pos:start="119:5" pos:end="119:12">recv_buf</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:28"><name pos:start="119:16" pos:end="119:23">g_malloc</name><argument_list pos:start="119:24" pos:end="119:28">(<argument pos:start="119:25" pos:end="119:27"><expr pos:start="119:25" pos:end="119:27"><name pos:start="119:25" pos:end="119:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:55"><expr pos:start="121:5" pos:end="121:54"><name pos:start="121:5" pos:end="121:7">ret</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:54"><name pos:start="121:11" pos:end="121:19">qemu_recv</name><argument_list pos:start="121:20" pos:end="121:54">(<argument pos:start="121:21" pos:end="121:35"><expr pos:start="121:21" pos:end="121:35"><name pos:start="121:21" pos:end="121:35"><name pos:start="121:21" pos:end="121:32">backend_sock</name><index pos:start="121:33" pos:end="121:35">[<expr pos:start="121:34" pos:end="121:34"><literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:38" pos:end="121:45"><expr pos:start="121:38" pos:end="121:45"><name pos:start="121:38" pos:end="121:45">recv_buf</name></expr></argument>, <argument pos:start="121:48" pos:end="121:50"><expr pos:start="121:48" pos:end="121:50"><name pos:start="121:48" pos:end="121:50">len</name></expr></argument>, <argument pos:start="121:53" pos:end="121:53"><expr pos:start="121:53" pos:end="121:53"><literal type="number" pos:start="121:53" pos:end="121:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:44"><expr pos:start="123:5" pos:end="123:43"><call pos:start="123:5" pos:end="123:43"><name pos:start="123:5" pos:end="123:19">g_assert_cmpstr</name><argument_list pos:start="123:20" pos:end="123:43">(<argument pos:start="123:21" pos:end="123:28"><expr pos:start="123:21" pos:end="123:28"><name pos:start="123:21" pos:end="123:28">recv_buf</name></expr></argument>, <argument pos:start="123:31" pos:end="123:32"><expr pos:start="123:31" pos:end="123:32"><operator pos:start="123:31" pos:end="123:32">==</operator></expr></argument>, <argument pos:start="123:35" pos:end="123:42"><expr pos:start="123:35" pos:end="123:42"><name pos:start="123:35" pos:end="123:42">send_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:21"><expr pos:start="127:5" pos:end="127:20"><call pos:start="127:5" pos:end="127:20"><name pos:start="127:5" pos:end="127:10">g_free</name><argument_list pos:start="127:11" pos:end="127:20">(<argument pos:start="127:12" pos:end="127:19"><expr pos:start="127:12" pos:end="127:19"><name pos:start="127:12" pos:end="127:19">recv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:23"><expr pos:start="129:5" pos:end="129:22"><call pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:10">unlink</name><argument_list pos:start="129:11" pos:end="129:22">(<argument pos:start="129:12" pos:end="129:21"><expr pos:start="129:12" pos:end="129:21"><name pos:start="129:12" pos:end="129:21">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:23"><expr pos:start="131:5" pos:end="131:22"><call pos:start="131:5" pos:end="131:22"><name pos:start="131:5" pos:end="131:10">unlink</name><argument_list pos:start="131:11" pos:end="131:22">(<argument pos:start="131:12" pos:end="131:21"><expr pos:start="131:12" pos:end="131:21"><name pos:start="131:12" pos:end="131:21">sock_path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:16"><expr pos:start="133:5" pos:end="133:15"><call pos:start="133:5" pos:end="133:15"><name pos:start="133:5" pos:end="133:13">qtest_end</name><argument_list pos:start="133:14" pos:end="133:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
