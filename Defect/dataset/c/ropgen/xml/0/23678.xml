<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23678.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">decode_plane10</name><parameter_list pos:start="1:26" pos:end="9:39">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:40">UtvideoContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">c</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:57">plane_no</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">uint16_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">dst</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:49"><decl pos:start="3:42" pos:end="3:49"><type pos:start="3:42" pos:end="3:49"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:49">step</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:67"><decl pos:start="3:52" pos:end="3:67"><type pos:start="3:52" pos:end="3:67"><name pos:start="3:52" pos:end="3:60">ptrdiff_t</name></type> <name pos:start="3:62" pos:end="3:67">stride</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:35"><decl pos:start="5:27" pos:end="5:35"><type pos:start="5:27" pos:end="5:35"><name pos:start="5:27" pos:end="5:29">int</name></type> <name pos:start="5:31" pos:end="5:35">width</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:47"><decl pos:start="5:38" pos:end="5:47"><type pos:start="5:38" pos:end="5:47"><name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:47">height</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:44"><decl pos:start="7:27" pos:end="7:44"><type pos:start="7:27" pos:end="7:44"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:39">uint8_t</name> <modifier pos:start="7:41" pos:end="7:41">*</modifier></type><name pos:start="7:42" pos:end="7:44">src</name></decl></parameter>, <parameter pos:start="7:47" pos:end="7:65"><decl pos:start="7:47" pos:end="7:65"><type pos:start="7:47" pos:end="7:65"><specifier pos:start="7:47" pos:end="7:51">const</specifier> <name pos:start="7:53" pos:end="7:59">uint8_t</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:65">huff</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:38"><decl pos:start="9:27" pos:end="9:38"><type pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:29">int</name></type> <name pos:start="9:31" pos:end="9:38">use_pred</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="203:1">{<block_content pos:start="13:5" pos:end="201:31">

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>, <decl pos:start="13:15" pos:end="13:19"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:19">slice</name></decl>, <decl pos:start="13:22" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:22" pos:end="13:24">pix</name></decl>, <decl pos:start="13:27" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:27" pos:end="13:29">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">sstart</name></decl>, <decl pos:start="15:17" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:20">send</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">VLC</name></type> <name pos:start="17:9" pos:end="17:11">vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">GetBitContext</name></type> <name pos:start="19:19" pos:end="19:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">prev</name></decl>, <decl pos:start="21:15" pos:end="21:18"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:18">fsym</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:52">(<expr pos:start="25:9" pos:end="25:51"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:12">ret</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:46"><name pos:start="25:16" pos:end="25:27">build_huff10</name><argument_list pos:start="25:28" pos:end="25:46">(<argument pos:start="25:29" pos:end="25:32"><expr pos:start="25:29" pos:end="25:32"><name pos:start="25:29" pos:end="25:32">huff</name></expr></argument>, <argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><operator pos:start="25:35" pos:end="25:35">&amp;</operator><name pos:start="25:36" pos:end="25:38">vlc</name></expr></argument>, <argument pos:start="25:41" pos:end="25:45"><expr pos:start="25:41" pos:end="25:45"><operator pos:start="25:41" pos:end="25:41">&amp;</operator><name pos:start="25:42" pos:end="25:45">fsym</name></expr></argument>)</argument_list></call><operator pos:start="25:47" pos:end="25:47">)</operator> <operator pos:start="25:49" pos:end="25:49">&lt;</operator> <literal type="number" pos:start="25:51" pos:end="25:51">0</literal></expr>)</condition> <block pos:start="25:54" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:19">

        <expr_stmt pos:start="27:9" pos:end="27:71"><expr pos:start="27:9" pos:end="27:70"><call pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:70">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">c</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:40" pos:end="27:69"><expr pos:start="27:40" pos:end="27:69"><literal type="string" pos:start="27:40" pos:end="27:69">"Cannot build Huffman codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="81:5"><if pos:start="33:5" pos:end="81:5">if <condition pos:start="33:8" pos:end="33:18">(<expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:12">fsym</name> <operator pos:start="33:14" pos:end="33:15">&gt;=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>)</condition> <block pos:start="33:20" pos:end="81:5">{<block_content pos:start="35:9" pos:end="79:17"> <comment type="line" pos:start="33:22" pos:end="33:72">// build_huff reported a symbol to fill slices with</comment>

        <expr_stmt pos:start="35:9" pos:end="35:17"><expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:12">send</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</expr_stmt>

        <for pos:start="37:9" pos:end="77:9">for <control pos:start="37:13" pos:end="37:51">(<init pos:start="37:14" pos:end="37:23"><expr pos:start="37:14" pos:end="37:22"><name pos:start="37:14" pos:end="37:18">slice</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</init> <condition pos:start="37:25" pos:end="37:42"><expr pos:start="37:25" pos:end="37:41"><name pos:start="37:25" pos:end="37:29">slice</name> <operator pos:start="37:31" pos:end="37:31">&lt;</operator> <name pos:start="37:33" pos:end="37:41"><name pos:start="37:33" pos:end="37:33">c</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:41">slices</name></name></expr>;</condition> <incr pos:start="37:44" pos:end="37:50"><expr pos:start="37:44" pos:end="37:50"><name pos:start="37:44" pos:end="37:48">slice</name><operator pos:start="37:49" pos:end="37:50">++</operator></expr></incr>)</control> <block pos:start="37:53" pos:end="77:9">{<block_content pos:start="39:13" pos:end="75:13">

            <decl_stmt pos:start="39:13" pos:end="39:27"><decl pos:start="39:13" pos:end="39:26"><type pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:20">uint16_t</name> <modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:26">dest</name></decl>;</decl_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:26"><expr pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:18">sstart</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:25">send</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:56"><expr pos:start="45:13" pos:end="45:55"><name pos:start="45:13" pos:end="45:16">send</name>   <operator pos:start="45:20" pos:end="45:20">=</operator> <operator pos:start="45:22" pos:end="45:22">(</operator><name pos:start="45:23" pos:end="45:28">height</name> <operator pos:start="45:30" pos:end="45:30">*</operator> <operator pos:start="45:32" pos:end="45:32">(</operator><name pos:start="45:33" pos:end="45:37">slice</name> <operator pos:start="45:39" pos:end="45:39">+</operator> <literal type="number" pos:start="45:41" pos:end="45:41">1</literal><operator pos:start="45:42" pos:end="45:42">)</operator> <operator pos:start="45:44" pos:end="45:44">/</operator> <name pos:start="45:46" pos:end="45:54"><name pos:start="45:46" pos:end="45:46">c</name><operator pos:start="45:47" pos:end="45:48">-&gt;</operator><name pos:start="45:49" pos:end="45:54">slices</name></name><operator pos:start="45:55" pos:end="45:55">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:43"><expr pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:16">dest</name>   <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:24">dst</name> <operator pos:start="47:26" pos:end="47:26">+</operator> <name pos:start="47:28" pos:end="47:33">sstart</name> <operator pos:start="47:35" pos:end="47:35">*</operator> <name pos:start="47:37" pos:end="47:42">stride</name></expr>;</expr_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:25"><expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:16">prev</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <literal type="number" pos:start="51:20" pos:end="51:24">0x200</literal></expr>;</expr_stmt>

            <for pos:start="53:13" pos:end="75:13">for <control pos:start="53:17" pos:end="53:43">(<init pos:start="53:18" pos:end="53:28"><expr pos:start="53:18" pos:end="53:27"><name pos:start="53:18" pos:end="53:18">j</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:27">sstart</name></expr>;</init> <condition pos:start="53:30" pos:end="53:38"><expr pos:start="53:30" pos:end="53:37"><name pos:start="53:30" pos:end="53:30">j</name> <operator pos:start="53:32" pos:end="53:32">&lt;</operator> <name pos:start="53:34" pos:end="53:37">send</name></expr>;</condition> <incr pos:start="53:40" pos:end="53:42"><expr pos:start="53:40" pos:end="53:42"><name pos:start="53:40" pos:end="53:40">j</name><operator pos:start="53:41" pos:end="53:42">++</operator></expr></incr>)</control> <block pos:start="53:45" pos:end="75:13">{<block_content pos:start="55:17" pos:end="73:31">

                <for pos:start="55:17" pos:end="71:17">for <control pos:start="55:21" pos:end="55:56">(<init pos:start="55:22" pos:end="55:27"><expr pos:start="55:22" pos:end="55:26"><name pos:start="55:22" pos:end="55:22">i</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <literal type="number" pos:start="55:26" pos:end="55:26">0</literal></expr>;</init> <condition pos:start="55:29" pos:end="55:45"><expr pos:start="55:29" pos:end="55:44"><name pos:start="55:29" pos:end="55:29">i</name> <operator pos:start="55:31" pos:end="55:31">&lt;</operator> <name pos:start="55:33" pos:end="55:37">width</name> <operator pos:start="55:39" pos:end="55:39">*</operator> <name pos:start="55:41" pos:end="55:44">step</name></expr>;</condition> <incr pos:start="55:47" pos:end="55:55"><expr pos:start="55:47" pos:end="55:55"><name pos:start="55:47" pos:end="55:47">i</name> <operator pos:start="55:49" pos:end="55:50">+=</operator> <name pos:start="55:52" pos:end="55:55">step</name></expr></incr>)</control> <block pos:start="55:58" pos:end="71:17">{<block_content pos:start="57:21" pos:end="69:34">

                    <expr_stmt pos:start="57:21" pos:end="57:31"><expr pos:start="57:21" pos:end="57:30"><name pos:start="57:21" pos:end="57:23">pix</name> <operator pos:start="57:25" pos:end="57:25">=</operator> <name pos:start="57:27" pos:end="57:30">fsym</name></expr>;</expr_stmt>

                    <if_stmt pos:start="59:21" pos:end="67:21"><if pos:start="59:21" pos:end="67:21">if <condition pos:start="59:24" pos:end="59:33">(<expr pos:start="59:25" pos:end="59:32"><name pos:start="59:25" pos:end="59:32">use_pred</name></expr>)</condition> <block pos:start="59:35" pos:end="67:21">{<block_content pos:start="61:25" pos:end="65:37">

                        <expr_stmt pos:start="61:25" pos:end="61:36"><expr pos:start="61:25" pos:end="61:35"><name pos:start="61:25" pos:end="61:28">prev</name> <operator pos:start="61:30" pos:end="61:31">+=</operator> <name pos:start="61:33" pos:end="61:35">pix</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="63:25" pos:end="63:38"><expr pos:start="63:25" pos:end="63:37"><name pos:start="63:25" pos:end="63:28">prev</name> <operator pos:start="63:30" pos:end="63:31">&amp;=</operator> <literal type="number" pos:start="63:33" pos:end="63:37">0x3FF</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="65:25" pos:end="65:37"><expr pos:start="65:25" pos:end="65:36"><name pos:start="65:25" pos:end="65:27">pix</name>   <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:36">prev</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:34"><expr pos:start="69:21" pos:end="69:33"><name pos:start="69:21" pos:end="69:27"><name pos:start="69:21" pos:end="69:24">dest</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">i</name></expr>]</index></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:33">pix</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="73:17" pos:end="73:31"><expr pos:start="73:17" pos:end="73:30"><name pos:start="73:17" pos:end="73:20">dest</name> <operator pos:start="73:22" pos:end="73:23">+=</operator> <name pos:start="73:25" pos:end="73:30">stride</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <return pos:start="79:9" pos:end="79:17">return <expr pos:start="79:16" pos:end="79:16"><literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:13"><expr pos:start="85:5" pos:end="85:12"><name pos:start="85:5" pos:end="85:8">send</name> <operator pos:start="85:10" pos:end="85:10">=</operator> <literal type="number" pos:start="85:12" pos:end="85:12">0</literal></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="187:5">for <control pos:start="87:9" pos:end="87:47">(<init pos:start="87:10" pos:end="87:19"><expr pos:start="87:10" pos:end="87:18"><name pos:start="87:10" pos:end="87:14">slice</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>;</init> <condition pos:start="87:21" pos:end="87:38"><expr pos:start="87:21" pos:end="87:37"><name pos:start="87:21" pos:end="87:25">slice</name> <operator pos:start="87:27" pos:end="87:27">&lt;</operator> <name pos:start="87:29" pos:end="87:37"><name pos:start="87:29" pos:end="87:29">c</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:37">slices</name></name></expr>;</condition> <incr pos:start="87:40" pos:end="87:46"><expr pos:start="87:40" pos:end="87:46"><name pos:start="87:40" pos:end="87:44">slice</name><operator pos:start="87:45" pos:end="87:46">++</operator></expr></incr>)</control> <block pos:start="87:49" pos:end="187:5">{<block_content pos:start="89:9" pos:end="185:78">

        <decl_stmt pos:start="89:9" pos:end="89:23"><decl pos:start="89:9" pos:end="89:22"><type pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:16">uint16_t</name> <modifier pos:start="89:18" pos:end="89:18">*</modifier></type><name pos:start="89:19" pos:end="89:22">dest</name></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:57"><decl pos:start="91:9" pos:end="91:28"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:28">slice_data_start</name></decl>, <decl pos:start="91:31" pos:end="91:44"><type ref="prev" pos:start="91:9" pos:end="91:11"/><name pos:start="91:31" pos:end="91:44">slice_data_end</name></decl>, <decl pos:start="91:47" pos:end="91:56"><type ref="prev" pos:start="91:9" pos:end="91:11"/><name pos:start="91:47" pos:end="91:56">slice_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:14">sstart</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <name pos:start="95:18" pos:end="95:21">send</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:52"><expr pos:start="97:9" pos:end="97:51"><name pos:start="97:9" pos:end="97:12">send</name>   <operator pos:start="97:16" pos:end="97:16">=</operator> <operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:24">height</name> <operator pos:start="97:26" pos:end="97:26">*</operator> <operator pos:start="97:28" pos:end="97:28">(</operator><name pos:start="97:29" pos:end="97:33">slice</name> <operator pos:start="97:35" pos:end="97:35">+</operator> <literal type="number" pos:start="97:37" pos:end="97:37">1</literal><operator pos:start="97:38" pos:end="97:38">)</operator> <operator pos:start="97:40" pos:end="97:40">/</operator> <name pos:start="97:42" pos:end="97:50"><name pos:start="97:42" pos:end="97:42">c</name><operator pos:start="97:43" pos:end="97:44">-&gt;</operator><name pos:start="97:45" pos:end="97:50">slices</name></name><operator pos:start="97:51" pos:end="97:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:39"><expr pos:start="99:9" pos:end="99:38"><name pos:start="99:9" pos:end="99:12">dest</name>   <operator pos:start="99:16" pos:end="99:16">=</operator> <name pos:start="99:18" pos:end="99:20">dst</name> <operator pos:start="99:22" pos:end="99:22">+</operator> <name pos:start="99:24" pos:end="99:29">sstart</name> <operator pos:start="99:31" pos:end="99:31">*</operator> <name pos:start="99:33" pos:end="99:38">stride</name></expr>;</expr_stmt>



        <comment type="line" pos:start="103:9" pos:end="103:60">// slice offset and size validation was done earlier</comment>

        <expr_stmt pos:start="105:9" pos:end="105:68"><expr pos:start="105:9" pos:end="105:67"><name pos:start="105:9" pos:end="105:24">slice_data_start</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <ternary pos:start="105:28" pos:end="105:67"><condition pos:start="105:28" pos:end="105:34"><expr pos:start="105:28" pos:end="105:32"><name pos:start="105:28" pos:end="105:32">slice</name></expr> ?</condition><then pos:start="105:36" pos:end="105:63"> <expr pos:start="105:36" pos:end="105:63"><call pos:start="105:36" pos:end="105:63"><name pos:start="105:36" pos:end="105:42">AV_RL32</name><argument_list pos:start="105:43" pos:end="105:63">(<argument pos:start="105:44" pos:end="105:62"><expr pos:start="105:44" pos:end="105:62"><name pos:start="105:44" pos:end="105:46">src</name> <operator pos:start="105:48" pos:end="105:48">+</operator> <name pos:start="105:50" pos:end="105:54">slice</name> <operator pos:start="105:56" pos:end="105:56">*</operator> <literal type="number" pos:start="105:58" pos:end="105:60">4</literal> <operator pos:start="105:60" pos:end="105:60">-</operator> <literal type="number" pos:start="105:62" pos:end="105:62">4</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="105:65" pos:end="105:67">: <expr pos:start="105:67" pos:end="105:67"><literal type="number" pos:start="105:67" pos:end="105:67">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:52"><expr pos:start="107:9" pos:end="107:51"><name pos:start="107:9" pos:end="107:22">slice_data_end</name>   <operator pos:start="107:26" pos:end="107:26">=</operator> <call pos:start="107:28" pos:end="107:51"><name pos:start="107:28" pos:end="107:34">AV_RL32</name><argument_list pos:start="107:35" pos:end="107:51">(<argument pos:start="107:36" pos:end="107:50"><expr pos:start="107:36" pos:end="107:50"><name pos:start="107:36" pos:end="107:38">src</name> <operator pos:start="107:40" pos:end="107:40">+</operator> <name pos:start="107:42" pos:end="107:46">slice</name> <operator pos:start="107:48" pos:end="107:48">*</operator> <literal type="number" pos:start="107:50" pos:end="107:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:61"><expr pos:start="109:9" pos:end="109:60"><name pos:start="109:9" pos:end="109:18">slice_size</name>       <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:41">slice_data_end</name> <operator pos:start="109:43" pos:end="109:43">-</operator> <name pos:start="109:45" pos:end="109:60">slice_data_start</name></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:24">(<expr pos:start="113:13" pos:end="113:23"><operator pos:start="113:13" pos:end="113:13">!</operator><name pos:start="113:14" pos:end="113:23">slice_size</name></expr>)</condition> <block pos:start="113:26" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:22">

            <expr_stmt pos:start="115:13" pos:end="117:58"><expr pos:start="115:13" pos:end="117:57"><call pos:start="115:13" pos:end="117:57"><name pos:start="115:13" pos:end="115:18">av_log</name><argument_list pos:start="115:19" pos:end="117:57">(<argument pos:start="115:20" pos:end="115:27"><expr pos:start="115:20" pos:end="115:27"><name pos:start="115:20" pos:end="115:27"><name pos:start="115:20" pos:end="115:20">c</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:27">avctx</name></name></expr></argument>, <argument pos:start="115:30" pos:end="115:41"><expr pos:start="115:30" pos:end="115:41"><name pos:start="115:30" pos:end="115:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:44" pos:end="117:56"><expr pos:start="115:44" pos:end="117:56"><literal type="string" pos:start="115:44" pos:end="115:76">"Plane has more than one symbol "</literal>

                   <literal type="string" pos:start="117:20" pos:end="117:56">"yet a slice has a length of zero.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:22">goto <name pos:start="119:18" pos:end="119:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:76"><expr pos:start="125:9" pos:end="125:75"><call pos:start="125:9" pos:end="125:75"><name pos:start="125:9" pos:end="125:14">memset</name><argument_list pos:start="125:15" pos:end="125:75">(<argument pos:start="125:16" pos:end="125:41"><expr pos:start="125:16" pos:end="125:41"><name pos:start="125:16" pos:end="125:28"><name pos:start="125:16" pos:end="125:16">c</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:28">slice_bits</name></name> <operator pos:start="125:30" pos:end="125:30">+</operator> <name pos:start="125:32" pos:end="125:41">slice_size</name></expr></argument>, <argument pos:start="125:44" pos:end="125:44"><expr pos:start="125:44" pos:end="125:44"><literal type="number" pos:start="125:44" pos:end="125:44">0</literal></expr></argument>, <argument pos:start="125:47" pos:end="125:74"><expr pos:start="125:47" pos:end="125:74"><name pos:start="125:47" pos:end="125:74">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="131:72"><expr pos:start="127:9" pos:end="131:71"><call pos:start="127:9" pos:end="131:71"><name pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:9">c</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:15">bdsp</name><operator pos:start="127:16" pos:end="127:16">.</operator><name pos:start="127:17" pos:end="127:25">bswap_buf</name></name><argument_list pos:start="127:26" pos:end="131:71">(<argument pos:start="127:27" pos:end="127:52"><expr pos:start="127:27" pos:end="127:52"><operator pos:start="127:27" pos:end="127:27">(</operator><name pos:start="127:28" pos:end="127:35">uint32_t</name> <operator pos:start="127:37" pos:end="127:37">*</operator><operator pos:start="127:38" pos:end="127:38">)</operator> <name pos:start="127:40" pos:end="127:52"><name pos:start="127:40" pos:end="127:40">c</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:52">slice_bits</name></name></expr></argument>,

                          <argument pos:start="129:27" pos:end="129:78"><expr pos:start="129:27" pos:end="129:78"><operator pos:start="129:27" pos:end="129:27">(</operator><name pos:start="129:28" pos:end="129:35">uint32_t</name> <operator pos:start="129:37" pos:end="129:37">*</operator><operator pos:start="129:38" pos:end="129:38">)</operator><operator pos:start="129:39" pos:end="129:39">(</operator><name pos:start="129:40" pos:end="129:42">src</name> <operator pos:start="129:44" pos:end="129:44">+</operator> <name pos:start="129:46" pos:end="129:61">slice_data_start</name> <operator pos:start="129:63" pos:end="129:63">+</operator> <name pos:start="129:65" pos:end="129:73"><name pos:start="129:65" pos:end="129:65">c</name><operator pos:start="129:66" pos:end="129:67">-&gt;</operator><name pos:start="129:68" pos:end="129:73">slices</name></name> <operator pos:start="129:75" pos:end="129:75">*</operator> <literal type="number" pos:start="129:77" pos:end="129:77">4</literal><operator pos:start="129:78" pos:end="129:78">)</operator></expr></argument>,

                          <argument pos:start="131:27" pos:end="131:70"><expr pos:start="131:27" pos:end="131:70"><operator pos:start="131:27" pos:end="131:27">(</operator><name pos:start="131:28" pos:end="131:41">slice_data_end</name> <operator pos:start="131:43" pos:end="131:43">-</operator> <name pos:start="131:45" pos:end="131:60">slice_data_start</name> <operator pos:start="131:62" pos:end="131:62">+</operator> <literal type="number" pos:start="131:64" pos:end="131:64">3</literal><operator pos:start="131:65" pos:end="131:65">)</operator> <operator pos:start="131:67" pos:end="131:68">&gt;&gt;</operator> <literal type="number" pos:start="131:70" pos:end="131:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:58"><expr pos:start="133:9" pos:end="133:57"><call pos:start="133:9" pos:end="133:57"><name pos:start="133:9" pos:end="133:21">init_get_bits</name><argument_list pos:start="133:22" pos:end="133:57">(<argument pos:start="133:23" pos:end="133:25"><expr pos:start="133:23" pos:end="133:25"><operator pos:start="133:23" pos:end="133:23">&amp;</operator><name pos:start="133:24" pos:end="133:25">gb</name></expr></argument>, <argument pos:start="133:28" pos:end="133:40"><expr pos:start="133:28" pos:end="133:40"><name pos:start="133:28" pos:end="133:40"><name pos:start="133:28" pos:end="133:28">c</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:40">slice_bits</name></name></expr></argument>, <argument pos:start="133:43" pos:end="133:56"><expr pos:start="133:43" pos:end="133:56"><name pos:start="133:43" pos:end="133:52">slice_size</name> <operator pos:start="133:54" pos:end="133:54">*</operator> <literal type="number" pos:start="133:56" pos:end="133:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:12">prev</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <literal type="number" pos:start="137:16" pos:end="137:20">0x200</literal></expr>;</expr_stmt>

        <for pos:start="139:9" pos:end="179:9">for <control pos:start="139:13" pos:end="139:39">(<init pos:start="139:14" pos:end="139:24"><expr pos:start="139:14" pos:end="139:23"><name pos:start="139:14" pos:end="139:14">j</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <name pos:start="139:18" pos:end="139:23">sstart</name></expr>;</init> <condition pos:start="139:26" pos:end="139:34"><expr pos:start="139:26" pos:end="139:33"><name pos:start="139:26" pos:end="139:26">j</name> <operator pos:start="139:28" pos:end="139:28">&lt;</operator> <name pos:start="139:30" pos:end="139:33">send</name></expr>;</condition> <incr pos:start="139:36" pos:end="139:38"><expr pos:start="139:36" pos:end="139:38"><name pos:start="139:36" pos:end="139:36">j</name><operator pos:start="139:37" pos:end="139:38">++</operator></expr></incr>)</control> <block pos:start="139:41" pos:end="179:9">{<block_content pos:start="141:13" pos:end="177:13">

            <for pos:start="141:13" pos:end="165:13">for <control pos:start="141:17" pos:end="141:52">(<init pos:start="141:18" pos:end="141:23"><expr pos:start="141:18" pos:end="141:22"><name pos:start="141:18" pos:end="141:18">i</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <literal type="number" pos:start="141:22" pos:end="141:22">0</literal></expr>;</init> <condition pos:start="141:25" pos:end="141:41"><expr pos:start="141:25" pos:end="141:40"><name pos:start="141:25" pos:end="141:25">i</name> <operator pos:start="141:27" pos:end="141:27">&lt;</operator> <name pos:start="141:29" pos:end="141:33">width</name> <operator pos:start="141:35" pos:end="141:35">*</operator> <name pos:start="141:37" pos:end="141:40">step</name></expr>;</condition> <incr pos:start="141:43" pos:end="141:51"><expr pos:start="141:43" pos:end="141:51"><name pos:start="141:43" pos:end="141:43">i</name> <operator pos:start="141:45" pos:end="141:46">+=</operator> <name pos:start="141:48" pos:end="141:51">step</name></expr></incr>)</control> <block pos:start="141:54" pos:end="165:13">{<block_content pos:start="143:17" pos:end="163:30">

                <expr_stmt pos:start="143:17" pos:end="143:60"><expr pos:start="143:17" pos:end="143:59"><name pos:start="143:17" pos:end="143:19">pix</name> <operator pos:start="143:21" pos:end="143:21">=</operator> <call pos:start="143:23" pos:end="143:59"><name pos:start="143:23" pos:end="143:30">get_vlc2</name><argument_list pos:start="143:31" pos:end="143:59">(<argument pos:start="143:32" pos:end="143:34"><expr pos:start="143:32" pos:end="143:34"><operator pos:start="143:32" pos:end="143:32">&amp;</operator><name pos:start="143:33" pos:end="143:34">gb</name></expr></argument>, <argument pos:start="143:37" pos:end="143:45"><expr pos:start="143:37" pos:end="143:45"><name pos:start="143:37" pos:end="143:45"><name pos:start="143:37" pos:end="143:39">vlc</name><operator pos:start="143:40" pos:end="143:40">.</operator><name pos:start="143:41" pos:end="143:45">table</name></name></expr></argument>, <argument pos:start="143:48" pos:end="143:55"><expr pos:start="143:48" pos:end="143:55"><name pos:start="143:48" pos:end="143:55">VLC_BITS</name></expr></argument>, <argument pos:start="143:58" pos:end="143:58"><expr pos:start="143:58" pos:end="143:58"><literal type="number" pos:start="143:58" pos:end="143:58">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="145:17" pos:end="151:17"><if pos:start="145:17" pos:end="151:17">if <condition pos:start="145:20" pos:end="145:28">(<expr pos:start="145:21" pos:end="145:27"><name pos:start="145:21" pos:end="145:23">pix</name> <operator pos:start="145:25" pos:end="145:25">&lt;</operator> <literal type="number" pos:start="145:27" pos:end="145:27">0</literal></expr>)</condition> <block pos:start="145:30" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:30">

                    <expr_stmt pos:start="147:21" pos:end="147:71"><expr pos:start="147:21" pos:end="147:70"><call pos:start="147:21" pos:end="147:70"><name pos:start="147:21" pos:end="147:26">av_log</name><argument_list pos:start="147:27" pos:end="147:70">(<argument pos:start="147:28" pos:end="147:35"><expr pos:start="147:28" pos:end="147:35"><name pos:start="147:28" pos:end="147:35"><name pos:start="147:28" pos:end="147:28">c</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:35">avctx</name></name></expr></argument>, <argument pos:start="147:38" pos:end="147:49"><expr pos:start="147:38" pos:end="147:49"><name pos:start="147:38" pos:end="147:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:52" pos:end="147:69"><expr pos:start="147:52" pos:end="147:69"><literal type="string" pos:start="147:52" pos:end="147:69">"Decoding error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="149:21" pos:end="149:30">goto <name pos:start="149:26" pos:end="149:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="153:17" pos:end="161:17"><if pos:start="153:17" pos:end="161:17">if <condition pos:start="153:20" pos:end="153:29">(<expr pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:28">use_pred</name></expr>)</condition> <block pos:start="153:31" pos:end="161:17">{<block_content pos:start="155:21" pos:end="159:33">

                    <expr_stmt pos:start="155:21" pos:end="155:32"><expr pos:start="155:21" pos:end="155:31"><name pos:start="155:21" pos:end="155:24">prev</name> <operator pos:start="155:26" pos:end="155:27">+=</operator> <name pos:start="155:29" pos:end="155:31">pix</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:34"><expr pos:start="157:21" pos:end="157:33"><name pos:start="157:21" pos:end="157:24">prev</name> <operator pos:start="157:26" pos:end="157:27">&amp;=</operator> <literal type="number" pos:start="157:29" pos:end="157:33">0x3FF</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:33"><expr pos:start="159:21" pos:end="159:32"><name pos:start="159:21" pos:end="159:23">pix</name>   <operator pos:start="159:27" pos:end="159:27">=</operator> <name pos:start="159:29" pos:end="159:32">prev</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:30"><expr pos:start="163:17" pos:end="163:29"><name pos:start="163:17" pos:end="163:23"><name pos:start="163:17" pos:end="163:20">dest</name><index pos:start="163:21" pos:end="163:23">[<expr pos:start="163:22" pos:end="163:22"><name pos:start="163:22" pos:end="163:22">i</name></expr>]</index></name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:29">pix</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="167:13" pos:end="167:27"><expr pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:16">dest</name> <operator pos:start="167:18" pos:end="167:19">+=</operator> <name pos:start="167:21" pos:end="167:26">stride</name></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="177:13"><if pos:start="169:13" pos:end="177:13">if <condition pos:start="169:16" pos:end="169:39">(<expr pos:start="169:17" pos:end="169:38"><call pos:start="169:17" pos:end="169:34"><name pos:start="169:17" pos:end="169:29">get_bits_left</name><argument_list pos:start="169:30" pos:end="169:34">(<argument pos:start="169:31" pos:end="169:33"><expr pos:start="169:31" pos:end="169:33"><operator pos:start="169:31" pos:end="169:31">&amp;</operator><name pos:start="169:32" pos:end="169:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="169:36" pos:end="169:36">&lt;</operator> <literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr>)</condition> <block pos:start="169:41" pos:end="177:13">{<block_content pos:start="171:17" pos:end="175:26">

                <expr_stmt pos:start="171:17" pos:end="173:60"><expr pos:start="171:17" pos:end="173:59"><call pos:start="171:17" pos:end="173:59"><name pos:start="171:17" pos:end="171:22">av_log</name><argument_list pos:start="171:23" pos:end="173:59">(<argument pos:start="171:24" pos:end="171:31"><expr pos:start="171:24" pos:end="171:31"><name pos:start="171:24" pos:end="171:31"><name pos:start="171:24" pos:end="171:24">c</name><operator pos:start="171:25" pos:end="171:26">-&gt;</operator><name pos:start="171:27" pos:end="171:31">avctx</name></name></expr></argument>, <argument pos:start="171:34" pos:end="171:45"><expr pos:start="171:34" pos:end="171:45"><name pos:start="171:34" pos:end="171:45">AV_LOG_ERROR</name></expr></argument>,

                        <argument pos:start="173:25" pos:end="173:58"><expr pos:start="173:25" pos:end="173:58"><literal type="string" pos:start="173:25" pos:end="173:58">"Slice decoding ran out of bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="175:17" pos:end="175:26">goto <name pos:start="175:22" pos:end="175:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="181:9" pos:end="185:78"><if pos:start="181:9" pos:end="185:78">if <condition pos:start="181:12" pos:end="181:36">(<expr pos:start="181:13" pos:end="181:35"><call pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:25">get_bits_left</name><argument_list pos:start="181:26" pos:end="181:30">(<argument pos:start="181:27" pos:end="181:29"><expr pos:start="181:27" pos:end="181:29"><operator pos:start="181:27" pos:end="181:27">&amp;</operator><name pos:start="181:28" pos:end="181:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="181:32" pos:end="181:32">&gt;</operator> <literal type="number" pos:start="181:34" pos:end="181:35">32</literal></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="185:78"><block_content pos:start="183:13" pos:end="185:78">

            <expr_stmt pos:start="183:13" pos:end="185:78"><expr pos:start="183:13" pos:end="185:77"><call pos:start="183:13" pos:end="185:77"><name pos:start="183:13" pos:end="183:18">av_log</name><argument_list pos:start="183:19" pos:end="185:77">(<argument pos:start="183:20" pos:end="183:27"><expr pos:start="183:20" pos:end="183:27"><name pos:start="183:20" pos:end="183:27"><name pos:start="183:20" pos:end="183:20">c</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:27">avctx</name></name></expr></argument>, <argument pos:start="183:30" pos:end="183:43"><expr pos:start="183:30" pos:end="183:43"><name pos:start="183:30" pos:end="183:43">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="185:20" pos:end="185:56"><expr pos:start="185:20" pos:end="185:56"><literal type="string" pos:start="185:20" pos:end="185:56">"%d bits left after decoding slice\n"</literal></expr></argument>, <argument pos:start="185:59" pos:end="185:76"><expr pos:start="185:59" pos:end="185:76"><call pos:start="185:59" pos:end="185:76"><name pos:start="185:59" pos:end="185:71">get_bits_left</name><argument_list pos:start="185:72" pos:end="185:76">(<argument pos:start="185:73" pos:end="185:75"><expr pos:start="185:73" pos:end="185:75"><operator pos:start="185:73" pos:end="185:73">&amp;</operator><name pos:start="185:74" pos:end="185:75">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="191:5" pos:end="191:22"><expr pos:start="191:5" pos:end="191:21"><call pos:start="191:5" pos:end="191:21"><name pos:start="191:5" pos:end="191:15">ff_free_vlc</name><argument_list pos:start="191:16" pos:end="191:21">(<argument pos:start="191:17" pos:end="191:20"><expr pos:start="191:17" pos:end="191:20"><operator pos:start="191:17" pos:end="191:17">&amp;</operator><name pos:start="191:18" pos:end="191:20">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="195:5" pos:end="195:13">return <expr pos:start="195:12" pos:end="195:12"><literal type="number" pos:start="195:12" pos:end="195:12">0</literal></expr>;</return>

<label pos:start="197:1" pos:end="197:5"><name pos:start="197:1" pos:end="197:4">fail</name>:</label>

    <expr_stmt pos:start="199:5" pos:end="199:22"><expr pos:start="199:5" pos:end="199:21"><call pos:start="199:5" pos:end="199:21"><name pos:start="199:5" pos:end="199:15">ff_free_vlc</name><argument_list pos:start="199:16" pos:end="199:21">(<argument pos:start="199:17" pos:end="199:20"><expr pos:start="199:17" pos:end="199:20"><operator pos:start="199:17" pos:end="199:17">&amp;</operator><name pos:start="199:18" pos:end="199:20">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="201:5" pos:end="201:31">return <expr pos:start="201:12" pos:end="201:30"><name pos:start="201:12" pos:end="201:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
