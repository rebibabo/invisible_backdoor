<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4843.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:8">uint32_t</name> <name pos:start="1:10" pos:end="1:15">HELPER</name></type>(<name pos:start="1:17" pos:end="1:18">xc</name>)<parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:38"><name pos:start="1:21" pos:end="1:33">CPUS390XState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:50"><decl pos:start="1:41" pos:end="1:50"><type pos:start="1:41" pos:end="1:50"><name pos:start="1:41" pos:end="1:48">uint32_t</name></type> <name pos:start="1:50" pos:end="1:50">l</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:65"><decl pos:start="1:53" pos:end="1:65"><type pos:start="1:53" pos:end="1:65"><name pos:start="1:53" pos:end="1:60">uint64_t</name></type> <name pos:start="1:62" pos:end="1:65">dest</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:28">uint64_t</name></type> <name pos:start="3:30" pos:end="3:32">src</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="63:14">

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:19">x</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:15">cc</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="22:0"><expr pos:start="15:5" pos:end="17:38"><call pos:start="15:5" pos:end="17:38"><name pos:start="15:5" pos:end="15:14">HELPER_LOG</name><argument_list pos:start="15:15" pos:end="17:38">(<argument pos:start="15:16" pos:end="15:59"><expr pos:start="15:16" pos:end="15:59"><literal type="string" pos:start="15:16" pos:end="15:31">"%s l %d dest %"</literal> <name pos:start="15:33" pos:end="15:38">PRIx64</name> <literal type="string" pos:start="15:40" pos:end="15:47">" src %"</literal> <name pos:start="15:49" pos:end="15:54">PRIx64</name> <literal type="string" pos:start="15:56" pos:end="15:59">"\n"</literal></expr></argument>,

               <argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">__func__</name></expr></argument>, <argument pos:start="17:26" pos:end="17:26"><expr pos:start="17:26" pos:end="17:26"><name pos:start="17:26" pos:end="17:26">l</name></expr></argument>, <argument pos:start="17:29" pos:end="17:32"><expr pos:start="17:29" pos:end="17:32"><name pos:start="17:29" pos:end="17:32">dest</name></expr></argument>, <argument pos:start="17:35" pos:end="17:37"><expr pos:start="17:35" pos:end="17:37"><name pos:start="17:35" pos:end="17:37">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="21:1" pos:end="21:24">#<cpp:directive pos:start="21:2" pos:end="21:7">ifndef</cpp:directive> <name pos:start="21:9" pos:end="21:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="23:5" pos:end="23:50">/* xor with itself is the same as memset(0) */</comment>

    <if_stmt pos:start="25:5" pos:end="36:0"><if pos:start="25:5" pos:end="36:0">if <condition pos:start="25:8" pos:end="27:67">(<expr pos:start="25:9" pos:end="27:66"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:10">l</name> <operator pos:start="25:12" pos:end="25:12">&gt;</operator> <literal type="number" pos:start="25:14" pos:end="25:15">32</literal><operator pos:start="25:16" pos:end="25:16">)</operator> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <operator pos:start="25:21" pos:end="25:21">(</operator><name pos:start="25:22" pos:end="25:24">src</name> <operator pos:start="25:26" pos:end="25:27">==</operator> <name pos:start="25:29" pos:end="25:32">dest</name><operator pos:start="25:33" pos:end="25:33">)</operator> <operator pos:start="25:35" pos:end="25:36">&amp;&amp;</operator>

        <operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">src</name> <operator pos:start="27:14" pos:end="27:14">&amp;</operator> <name pos:start="27:16" pos:end="27:31">TARGET_PAGE_MASK</name><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:35">==</operator> <operator pos:start="27:37" pos:end="27:37">(</operator><operator pos:start="27:38" pos:end="27:38">(</operator><name pos:start="27:39" pos:end="27:41">src</name> <operator pos:start="27:43" pos:end="27:43">+</operator> <name pos:start="27:45" pos:end="27:45">l</name><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:48">&amp;</operator> <name pos:start="27:50" pos:end="27:65">TARGET_PAGE_MASK</name><operator pos:start="27:66" pos:end="27:66">)</operator></expr>)</condition> <block pos:start="27:69" pos:end="36:0">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><call pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:23">mvc_fast_memset</name><argument_list pos:start="29:24" pos:end="29:44">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">env</name></expr></argument>, <argument pos:start="29:30" pos:end="29:34"><expr pos:start="29:30" pos:end="29:34"><name pos:start="29:30" pos:end="29:30">l</name> <operator pos:start="29:32" pos:end="29:32">+</operator> <literal type="number" pos:start="29:34" pos:end="29:34">1</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:40"><expr pos:start="29:37" pos:end="29:40"><name pos:start="29:37" pos:end="29:40">dest</name></expr></argument>, <argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><literal type="number" pos:start="29:43" pos:end="29:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="37:5" pos:end="46:0"><if pos:start="37:5" pos:end="46:0">if <condition pos:start="37:8" pos:end="37:20">(<expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">src</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <name pos:start="37:16" pos:end="37:19">dest</name></expr>)</condition> <block pos:start="37:22" pos:end="46:0">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><call pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:14">memset</name><argument_list pos:start="39:15" pos:end="39:35">(<argument pos:start="39:16" pos:end="39:24"><expr pos:start="39:16" pos:end="39:24"><call pos:start="39:16" pos:end="39:24"><name pos:start="39:16" pos:end="39:18">g2h</name><argument_list pos:start="39:19" pos:end="39:24">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">dest</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">0</literal></expr></argument>, <argument pos:start="39:30" pos:end="39:34"><expr pos:start="39:30" pos:end="39:34"><name pos:start="39:30" pos:end="39:30">l</name> <operator pos:start="39:32" pos:end="39:32">+</operator> <literal type="number" pos:start="39:34" pos:end="39:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>



    <for pos:start="49:5" pos:end="61:5">for <control pos:start="49:9" pos:end="49:28">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:23"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:20">&lt;=</operator> <name pos:start="49:22" pos:end="49:22">l</name></expr>;</condition> <incr pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:25">i</name><operator pos:start="49:26" pos:end="49:27">++</operator></expr></incr>)</control> <block pos:start="49:30" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:39">

        <expr_stmt pos:start="51:9" pos:end="51:71"><expr pos:start="51:9" pos:end="51:70"><name pos:start="51:9" pos:end="51:9">x</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:25">cpu_ldub_data</name><argument_list pos:start="51:26" pos:end="51:40">(<argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:29">env</name></expr></argument>, <argument pos:start="51:32" pos:end="51:39"><expr pos:start="51:32" pos:end="51:39"><name pos:start="51:32" pos:end="51:35">dest</name> <operator pos:start="51:37" pos:end="51:37">+</operator> <name pos:start="51:39" pos:end="51:39">i</name></expr></argument>)</argument_list></call> <operator pos:start="51:42" pos:end="51:42">^</operator> <call pos:start="51:44" pos:end="51:70"><name pos:start="51:44" pos:end="51:56">cpu_ldub_data</name><argument_list pos:start="51:57" pos:end="51:70">(<argument pos:start="51:58" pos:end="51:60"><expr pos:start="51:58" pos:end="51:60"><name pos:start="51:58" pos:end="51:60">env</name></expr></argument>, <argument pos:start="51:63" pos:end="51:69"><expr pos:start="51:63" pos:end="51:69"><name pos:start="51:63" pos:end="51:65">src</name> <operator pos:start="51:67" pos:end="51:67">+</operator> <name pos:start="51:69" pos:end="51:69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:14">(<expr pos:start="53:13" pos:end="53:13"><name pos:start="53:13" pos:end="53:13">x</name></expr>)</condition> <block pos:start="53:16" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:19">

            <expr_stmt pos:start="55:13" pos:end="55:19"><expr pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:14">cc</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:39"><expr pos:start="59:9" pos:end="59:38"><call pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:20">cpu_stb_data</name><argument_list pos:start="59:21" pos:end="59:38">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><name pos:start="59:22" pos:end="59:24">env</name></expr></argument>, <argument pos:start="59:27" pos:end="59:34"><expr pos:start="59:27" pos:end="59:34"><name pos:start="59:27" pos:end="59:30">dest</name> <operator pos:start="59:32" pos:end="59:32">+</operator> <name pos:start="59:34" pos:end="59:34">i</name></expr></argument>, <argument pos:start="59:37" pos:end="59:37"><expr pos:start="59:37" pos:end="59:37"><name pos:start="59:37" pos:end="59:37">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="63:5" pos:end="63:14">return <expr pos:start="63:12" pos:end="63:13"><name pos:start="63:12" pos:end="63:13">cc</name></expr>;</return>

</block_content>}</block></function>
</unit>
