<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11907.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">CaptureVoiceOut</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:32">AUD_add_capture</name> <parameter_list pos:start="1:34" pos:end="9:5">(

    <parameter pos:start="3:5" pos:end="3:26"><decl pos:start="3:5" pos:end="3:26"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:10">struct</name> <name pos:start="3:12" pos:end="3:22">audsettings</name></name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:26">as</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:33"><name pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:28">audio_capture_ops</name></name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:33">ops</name></decl></parameter>,

    <parameter pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:19">cb_opaque</name></decl></parameter>

    )</parameter_list>

<block pos:start="11:1" pos:end="179:1">{<block_content pos:start="13:5" pos:end="177:5">

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">AudioState</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:37">= <expr pos:start="13:21" pos:end="13:37"><operator pos:start="13:21" pos:end="13:21">&amp;</operator><name pos:start="13:22" pos:end="13:37">glob_audio_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">CaptureVoiceOut</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">capture_callback</name></name> <modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:31">cb</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><call pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:31">audio_validate_settings</name> <argument_list pos:start="21:33" pos:end="21:36">(<argument pos:start="21:34" pos:end="21:35"><expr pos:start="21:34" pos:end="21:35"><name pos:start="21:34" pos:end="21:35">as</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:39" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:18">

        <expr_stmt pos:start="23:9" pos:end="23:76"><expr pos:start="23:9" pos:end="23:75"><call pos:start="23:9" pos:end="23:75"><name pos:start="23:9" pos:end="23:13">dolog</name> <argument_list pos:start="23:15" pos:end="23:75">(<argument pos:start="23:16" pos:end="23:74"><expr pos:start="23:16" pos:end="23:74"><literal type="string" pos:start="23:16" pos:end="23:74">"Invalid settings were passed when trying to add capture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:34"><expr pos:start="25:9" pos:end="25:33"><call pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:28">audio_print_settings</name> <argument_list pos:start="25:30" pos:end="25:33">(<argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:18">goto <name pos:start="27:14" pos:end="27:17">err0</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:6">cb</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:51"><name pos:start="33:10" pos:end="33:21">audio_calloc</name> <argument_list pos:start="33:23" pos:end="33:51">(<argument pos:start="33:24" pos:end="33:33"><expr pos:start="33:24" pos:end="33:33"><name pos:start="33:24" pos:end="33:33">AUDIO_FUNC</name></expr></argument>, <argument pos:start="33:36" pos:end="33:36"><expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">1</literal></expr></argument>, <argument pos:start="33:39" pos:end="33:50"><expr pos:start="33:39" pos:end="33:50"><sizeof pos:start="33:39" pos:end="33:50">sizeof <argument_list pos:start="33:46" pos:end="33:50">(<argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><operator pos:start="33:47" pos:end="33:47">*</operator><name pos:start="33:48" pos:end="33:49">cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:11">cb</name></expr>)</condition> <block pos:start="35:14" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:18">

        <expr_stmt pos:start="37:9" pos:end="39:29"><expr pos:start="37:9" pos:end="39:28"><call pos:start="37:9" pos:end="39:28"><name pos:start="37:9" pos:end="37:13">dolog</name> <argument_list pos:start="37:15" pos:end="39:28">(<argument pos:start="37:16" pos:end="37:76"><expr pos:start="37:16" pos:end="37:76"><literal type="string" pos:start="37:16" pos:end="37:76">"Could not allocate capture callback information, size %zu\n"</literal></expr></argument>,

               <argument pos:start="39:16" pos:end="39:27"><expr pos:start="39:16" pos:end="39:27"><sizeof pos:start="39:16" pos:end="39:27">sizeof <argument_list pos:start="39:23" pos:end="39:27">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><operator pos:start="39:24" pos:end="39:24">*</operator><name pos:start="39:25" pos:end="39:26">cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">err0</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:19"><expr pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:6">cb</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:11">ops</name></name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">*</operator><name pos:start="45:16" pos:end="45:18">ops</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:6">cb</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">opaque</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:26">cb_opaque</name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:47"><expr pos:start="51:5" pos:end="51:46"><name pos:start="51:5" pos:end="51:7">cap</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:46"><name pos:start="51:11" pos:end="51:41">audio_pcm_capture_find_specific</name> <argument_list pos:start="51:43" pos:end="51:46">(<argument pos:start="51:44" pos:end="51:45"><expr pos:start="51:44" pos:end="51:45"><name pos:start="51:44" pos:end="51:45">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="177:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">cap</name></expr>)</condition> <block pos:start="53:14" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:19">

        <expr_stmt pos:start="55:9" pos:end="55:54"><expr pos:start="55:9" pos:end="55:53"><call pos:start="55:9" pos:end="55:53"><name pos:start="55:9" pos:end="55:24">LIST_INSERT_HEAD</name> <argument_list pos:start="55:26" pos:end="55:53">(<argument pos:start="55:27" pos:end="55:39"><expr pos:start="55:27" pos:end="55:39"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:39"><name pos:start="55:28" pos:end="55:30">cap</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:39">cb_head</name></name></expr></argument>, <argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><name pos:start="55:42" pos:end="55:43">cb</name></expr></argument>, <argument pos:start="55:46" pos:end="55:52"><expr pos:start="55:46" pos:end="55:52"><name pos:start="55:46" pos:end="55:52">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:19">return <expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">cap</name></expr>;</return>

    </block_content>}</block></if>

    <else pos:start="61:5" pos:end="177:5">else <block pos:start="61:10" pos:end="177:5">{<block_content pos:start="63:9" pos:end="175:20">

        <decl_stmt pos:start="63:9" pos:end="63:23"><decl pos:start="63:9" pos:end="63:22"><type pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:18">HWVoiceOut</name> <modifier pos:start="63:20" pos:end="63:20">*</modifier></type><name pos:start="63:21" pos:end="63:22">hw</name></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:29"><decl pos:start="65:9" pos:end="65:28"><type pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:23">CaptureVoiceOut</name> <modifier pos:start="65:25" pos:end="65:25">*</modifier></type><name pos:start="65:26" pos:end="65:28">cap</name></decl>;</decl_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:58"><expr pos:start="69:9" pos:end="69:57"><name pos:start="69:9" pos:end="69:11">cap</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:57"><name pos:start="69:15" pos:end="69:26">audio_calloc</name> <argument_list pos:start="69:28" pos:end="69:57">(<argument pos:start="69:29" pos:end="69:38"><expr pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:38">AUDIO_FUNC</name></expr></argument>, <argument pos:start="69:41" pos:end="69:41"><expr pos:start="69:41" pos:end="69:41"><literal type="number" pos:start="69:41" pos:end="69:41">1</literal></expr></argument>, <argument pos:start="69:44" pos:end="69:56"><expr pos:start="69:44" pos:end="69:56"><sizeof pos:start="69:44" pos:end="69:56">sizeof <argument_list pos:start="69:51" pos:end="69:56">(<argument pos:start="69:52" pos:end="69:55"><expr pos:start="69:52" pos:end="69:55"><operator pos:start="69:52" pos:end="69:52">*</operator><name pos:start="69:53" pos:end="69:55">cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:17">(<expr pos:start="71:13" pos:end="71:16"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:16">cap</name></expr>)</condition> <block pos:start="71:19" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:22">

            <expr_stmt pos:start="73:13" pos:end="75:34"><expr pos:start="73:13" pos:end="75:33"><call pos:start="73:13" pos:end="75:33"><name pos:start="73:13" pos:end="73:17">dolog</name> <argument_list pos:start="73:19" pos:end="75:33">(<argument pos:start="73:20" pos:end="73:65"><expr pos:start="73:20" pos:end="73:65"><literal type="string" pos:start="73:20" pos:end="73:65">"Could not allocate capture voice, size %zu\n"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:32"><expr pos:start="75:20" pos:end="75:32"><sizeof pos:start="75:20" pos:end="75:32">sizeof <argument_list pos:start="75:27" pos:end="75:32">(<argument pos:start="75:28" pos:end="75:31"><expr pos:start="75:28" pos:end="75:31"><operator pos:start="75:28" pos:end="75:28">*</operator><name pos:start="75:29" pos:end="75:31">cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:22">goto <name pos:start="77:18" pos:end="77:21">err1</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:10">hw</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <operator pos:start="83:14" pos:end="83:14">&amp;</operator><name pos:start="83:15" pos:end="83:21"><name pos:start="83:15" pos:end="83:17">cap</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:21">hw</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:33"><expr pos:start="85:9" pos:end="85:32"><call pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:17">LIST_INIT</name> <argument_list pos:start="85:19" pos:end="85:32">(<argument pos:start="85:20" pos:end="85:31"><expr pos:start="85:20" pos:end="85:31"><operator pos:start="85:20" pos:end="85:20">&amp;</operator><name pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:22">hw</name><operator pos:start="85:23" pos:end="85:24">-&gt;</operator><name pos:start="85:25" pos:end="85:31">sw_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><call pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:17">LIST_INIT</name> <argument_list pos:start="87:19" pos:end="87:33">(<argument pos:start="87:20" pos:end="87:32"><expr pos:start="87:20" pos:end="87:32"><operator pos:start="87:20" pos:end="87:20">&amp;</operator><name pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:23">cap</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:32">cb_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:41">/* XXX find a more elegant way */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:31"><expr pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:10">hw</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:19">samples</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <literal type="number" pos:start="93:23" pos:end="93:26">4096</literal> <operator pos:start="93:28" pos:end="93:28">*</operator> <literal type="number" pos:start="93:30" pos:end="93:30">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="97:63"><expr pos:start="95:9" pos:end="97:62"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:10">hw</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:19">mix_buf</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="97:62"><name pos:start="95:23" pos:end="95:34">audio_calloc</name> <argument_list pos:start="95:36" pos:end="97:62">(<argument pos:start="95:37" pos:end="95:46"><expr pos:start="95:37" pos:end="95:46"><name pos:start="95:37" pos:end="95:46">AUDIO_FUNC</name></expr></argument>, <argument pos:start="95:49" pos:end="95:59"><expr pos:start="95:49" pos:end="95:59"><name pos:start="95:49" pos:end="95:59"><name pos:start="95:49" pos:end="95:50">hw</name><operator pos:start="95:51" pos:end="95:52">-&gt;</operator><name pos:start="95:53" pos:end="95:59">samples</name></name></expr></argument>,

                                    <argument pos:start="97:37" pos:end="97:61"><expr pos:start="97:37" pos:end="97:61"><sizeof pos:start="97:37" pos:end="97:61">sizeof <argument_list pos:start="97:44" pos:end="97:61">(<argument pos:start="97:45" pos:end="97:60"><expr pos:start="97:45" pos:end="97:60">struct <name pos:start="97:52" pos:end="97:60">st_sample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:25">(<expr pos:start="99:13" pos:end="99:24"><operator pos:start="99:13" pos:end="99:13">!</operator><name pos:start="99:14" pos:end="99:24"><name pos:start="99:14" pos:end="99:15">hw</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:24">mix_buf</name></name></expr>)</condition> <block pos:start="99:27" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:22">

            <expr_stmt pos:start="101:13" pos:end="103:32"><expr pos:start="101:13" pos:end="103:31"><call pos:start="101:13" pos:end="103:31"><name pos:start="101:13" pos:end="101:17">dolog</name> <argument_list pos:start="101:19" pos:end="103:31">(<argument pos:start="101:20" pos:end="101:73"><expr pos:start="101:20" pos:end="101:73"><literal type="string" pos:start="101:20" pos:end="101:73">"Could not allocate capture mix buffer (%d samples)\n"</literal></expr></argument>,

                   <argument pos:start="103:20" pos:end="103:30"><expr pos:start="103:20" pos:end="103:30"><name pos:start="103:20" pos:end="103:30"><name pos:start="103:20" pos:end="103:21">hw</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:30">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="105:13" pos:end="105:22">goto <name pos:start="105:18" pos:end="105:21">err2</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:44"><expr pos:start="111:9" pos:end="111:43"><call pos:start="111:9" pos:end="111:43"><name pos:start="111:9" pos:end="111:27">audio_pcm_init_info</name> <argument_list pos:start="111:29" pos:end="111:43">(<argument pos:start="111:30" pos:end="111:38"><expr pos:start="111:30" pos:end="111:38"><operator pos:start="111:30" pos:end="111:30">&amp;</operator><name pos:start="111:31" pos:end="111:38"><name pos:start="111:31" pos:end="111:32">hw</name><operator pos:start="111:33" pos:end="111:34">-&gt;</operator><name pos:start="111:35" pos:end="111:38">info</name></name></expr></argument>, <argument pos:start="111:41" pos:end="111:42"><expr pos:start="111:41" pos:end="111:42"><name pos:start="111:41" pos:end="111:42">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:79"><expr pos:start="115:9" pos:end="115:78"><name pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:11">cap</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:16">buf</name></name> <operator pos:start="115:18" pos:end="115:18">=</operator> <call pos:start="115:20" pos:end="115:78"><name pos:start="115:20" pos:end="115:31">audio_calloc</name> <argument_list pos:start="115:33" pos:end="115:78">(<argument pos:start="115:34" pos:end="115:43"><expr pos:start="115:34" pos:end="115:43"><name pos:start="115:34" pos:end="115:43">AUDIO_FUNC</name></expr></argument>, <argument pos:start="115:46" pos:end="115:56"><expr pos:start="115:46" pos:end="115:56"><name pos:start="115:46" pos:end="115:56"><name pos:start="115:46" pos:end="115:47">hw</name><operator pos:start="115:48" pos:end="115:49">-&gt;</operator><name pos:start="115:50" pos:end="115:56">samples</name></name></expr></argument>, <argument pos:start="115:59" pos:end="115:77"><expr pos:start="115:59" pos:end="115:77"><literal type="number" pos:start="115:59" pos:end="115:59">1</literal> <operator pos:start="115:61" pos:end="115:62">&lt;&lt;</operator> <name pos:start="115:64" pos:end="115:77"><name pos:start="115:64" pos:end="115:65">hw</name><operator pos:start="115:66" pos:end="115:67">-&gt;</operator><name pos:start="115:68" pos:end="115:71">info</name><operator pos:start="115:72" pos:end="115:72">.</operator><name pos:start="115:73" pos:end="115:77">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="127:9"><if pos:start="117:9" pos:end="127:9">if <condition pos:start="117:12" pos:end="117:22">(<expr pos:start="117:13" pos:end="117:21"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:21"><name pos:start="117:14" pos:end="117:16">cap</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:21">buf</name></name></expr>)</condition> <block pos:start="117:24" pos:end="127:9">{<block_content pos:start="119:13" pos:end="125:22">

            <expr_stmt pos:start="119:13" pos:end="123:53"><expr pos:start="119:13" pos:end="123:52"><call pos:start="119:13" pos:end="123:52"><name pos:start="119:13" pos:end="119:17">dolog</name> <argument_list pos:start="119:19" pos:end="123:52">(<argument pos:start="119:20" pos:end="121:50"><expr pos:start="119:20" pos:end="121:50"><literal type="string" pos:start="119:20" pos:end="119:55">"Could not allocate capture buffer "</literal>

                   <literal type="string" pos:start="121:20" pos:end="121:50">"(%d samples, each %d bytes)\n"</literal></expr></argument>,

                   <argument pos:start="123:20" pos:end="123:30"><expr pos:start="123:20" pos:end="123:30"><name pos:start="123:20" pos:end="123:30"><name pos:start="123:20" pos:end="123:21">hw</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:30">samples</name></name></expr></argument>, <argument pos:start="123:33" pos:end="123:51"><expr pos:start="123:33" pos:end="123:51"><literal type="number" pos:start="123:33" pos:end="123:33">1</literal> <operator pos:start="123:35" pos:end="123:36">&lt;&lt;</operator> <name pos:start="123:38" pos:end="123:51"><name pos:start="123:38" pos:end="123:39">hw</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:45">info</name><operator pos:start="123:46" pos:end="123:46">.</operator><name pos:start="123:47" pos:end="123:51">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:22">goto <name pos:start="125:18" pos:end="125:21">err3</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="131:9" pos:end="139:50"><expr pos:start="131:9" pos:end="139:49"><name pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:10">hw</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:16">clip</name></name> <operator pos:start="131:18" pos:end="131:18">=</operator> <name pos:start="131:20" pos:end="139:49"><name pos:start="131:20" pos:end="131:30">mixeng_clip</name>

            <index pos:start="133:13" pos:end="133:37">[<expr pos:start="133:14" pos:end="133:36"><name pos:start="133:14" pos:end="133:31"><name pos:start="133:14" pos:end="133:15">hw</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:21">info</name><operator pos:start="133:22" pos:end="133:22">.</operator><name pos:start="133:23" pos:end="133:31">nchannels</name></name> <operator pos:start="133:33" pos:end="133:34">==</operator> <literal type="number" pos:start="133:36" pos:end="133:36">2</literal></expr>]</index>

            <index pos:start="135:13" pos:end="135:27">[<expr pos:start="135:14" pos:end="135:26"><name pos:start="135:14" pos:end="135:26"><name pos:start="135:14" pos:end="135:15">hw</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:21">info</name><operator pos:start="135:22" pos:end="135:22">.</operator><name pos:start="135:23" pos:end="135:26">sign</name></name></expr>]</index>

            <index pos:start="137:13" pos:end="137:38">[<expr pos:start="137:14" pos:end="137:37"><name pos:start="137:14" pos:end="137:37"><name pos:start="137:14" pos:end="137:15">hw</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:21">info</name><operator pos:start="137:22" pos:end="137:22">.</operator><name pos:start="137:23" pos:end="137:37">swap_endianness</name></name></expr>]</index>

            <index pos:start="139:13" pos:end="139:49">[<expr pos:start="139:14" pos:end="139:48"><call pos:start="139:14" pos:end="139:48"><name pos:start="139:14" pos:end="139:32">audio_bits_to_index</name> <argument_list pos:start="139:34" pos:end="139:48">(<argument pos:start="139:35" pos:end="139:47"><expr pos:start="139:35" pos:end="139:47"><name pos:start="139:35" pos:end="139:47"><name pos:start="139:35" pos:end="139:36">hw</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:42">info</name><operator pos:start="139:43" pos:end="139:43">.</operator><name pos:start="139:44" pos:end="139:47">bits</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:54"><expr pos:start="143:9" pos:end="143:53"><call pos:start="143:9" pos:end="143:53"><name pos:start="143:9" pos:end="143:24">LIST_INSERT_HEAD</name> <argument_list pos:start="143:26" pos:end="143:53">(<argument pos:start="143:27" pos:end="143:38"><expr pos:start="143:27" pos:end="143:38"><operator pos:start="143:27" pos:end="143:27">&amp;</operator><name pos:start="143:28" pos:end="143:38"><name pos:start="143:28" pos:end="143:28">s</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:38">cap_head</name></name></expr></argument>, <argument pos:start="143:41" pos:end="143:43"><expr pos:start="143:41" pos:end="143:43"><name pos:start="143:41" pos:end="143:43">cap</name></expr></argument>, <argument pos:start="143:46" pos:end="143:52"><expr pos:start="143:46" pos:end="143:52"><name pos:start="143:46" pos:end="143:52">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:54"><expr pos:start="145:9" pos:end="145:53"><call pos:start="145:9" pos:end="145:53"><name pos:start="145:9" pos:end="145:24">LIST_INSERT_HEAD</name> <argument_list pos:start="145:26" pos:end="145:53">(<argument pos:start="145:27" pos:end="145:39"><expr pos:start="145:27" pos:end="145:39"><operator pos:start="145:27" pos:end="145:27">&amp;</operator><name pos:start="145:28" pos:end="145:39"><name pos:start="145:28" pos:end="145:30">cap</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:39">cb_head</name></name></expr></argument>, <argument pos:start="145:42" pos:end="145:43"><expr pos:start="145:42" pos:end="145:43"><name pos:start="145:42" pos:end="145:43">cb</name></expr></argument>, <argument pos:start="145:46" pos:end="145:52"><expr pos:start="145:46" pos:end="145:52"><name pos:start="145:46" pos:end="145:52">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:18"><expr pos:start="149:9" pos:end="149:17"><name pos:start="149:9" pos:end="149:10">hw</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <name pos:start="149:14" pos:end="149:17">NULL</name></expr>;</expr_stmt>

        <while pos:start="151:9" pos:end="155:9">while <condition pos:start="151:15" pos:end="151:53">(<expr pos:start="151:16" pos:end="151:52"><operator pos:start="151:16" pos:end="151:16">(</operator><name pos:start="151:17" pos:end="151:18">hw</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:51"><name pos:start="151:22" pos:end="151:46">audio_pcm_hw_find_any_out</name> <argument_list pos:start="151:48" pos:end="151:51">(<argument pos:start="151:49" pos:end="151:50"><expr pos:start="151:49" pos:end="151:50"><name pos:start="151:49" pos:end="151:50">hw</name></expr></argument>)</argument_list></call><operator pos:start="151:52" pos:end="151:52">)</operator></expr>)</condition> <block pos:start="151:55" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:38">

            <expr_stmt pos:start="153:13" pos:end="153:38"><expr pos:start="153:13" pos:end="153:37"><call pos:start="153:13" pos:end="153:37"><name pos:start="153:13" pos:end="153:32">audio_attach_capture</name> <argument_list pos:start="153:34" pos:end="153:37">(<argument pos:start="153:35" pos:end="153:36"><expr pos:start="153:35" pos:end="153:36"><name pos:start="153:35" pos:end="153:36">hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <return pos:start="157:9" pos:end="157:19">return <expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">cap</name></expr>;</return>



    <label pos:start="161:5" pos:end="161:9"><name pos:start="161:5" pos:end="161:8">err3</name>:</label>

        <expr_stmt pos:start="163:9" pos:end="163:36"><expr pos:start="163:9" pos:end="163:35"><call pos:start="163:9" pos:end="163:35"><name pos:start="163:9" pos:end="163:17">qemu_free</name> <argument_list pos:start="163:19" pos:end="163:35">(<argument pos:start="163:20" pos:end="163:34"><expr pos:start="163:20" pos:end="163:34"><name pos:start="163:20" pos:end="163:34"><name pos:start="163:20" pos:end="163:22">cap</name><operator pos:start="163:23" pos:end="163:24">-&gt;</operator><name pos:start="163:25" pos:end="163:26">hw</name><operator pos:start="163:27" pos:end="163:27">.</operator><name pos:start="163:28" pos:end="163:34">mix_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="165:5" pos:end="165:9"><name pos:start="165:5" pos:end="165:8">err2</name>:</label>

        <expr_stmt pos:start="167:9" pos:end="167:24"><expr pos:start="167:9" pos:end="167:23"><call pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:17">qemu_free</name> <argument_list pos:start="167:19" pos:end="167:23">(<argument pos:start="167:20" pos:end="167:22"><expr pos:start="167:20" pos:end="167:22"><name pos:start="167:20" pos:end="167:22">cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="169:5" pos:end="169:9"><name pos:start="169:5" pos:end="169:8">err1</name>:</label>

        <expr_stmt pos:start="171:9" pos:end="171:23"><expr pos:start="171:9" pos:end="171:22"><call pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:17">qemu_free</name> <argument_list pos:start="171:19" pos:end="171:22">(<argument pos:start="171:20" pos:end="171:21"><expr pos:start="171:20" pos:end="171:21"><name pos:start="171:20" pos:end="171:21">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="173:5" pos:end="173:9"><name pos:start="173:5" pos:end="173:8">err0</name>:</label>

        <return pos:start="175:9" pos:end="175:20">return <expr pos:start="175:16" pos:end="175:19"><name pos:start="175:16" pos:end="175:19">NULL</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
