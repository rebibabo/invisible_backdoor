<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7821.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">get_pci_irq_state</name><parameter_list pos:start="1:29" pos:end="1:64">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:37">QEMUFile</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">f</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:50"><decl pos:start="1:43" pos:end="1:50"><type pos:start="1:43" pos:end="1:50"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">pv</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:58">size_t</name></type> <name pos:start="1:60" pos:end="1:63">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><call pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:31">container_of</name><argument_list pos:start="5:32" pos:end="5:54">(<argument pos:start="5:33" pos:end="5:34"><expr pos:start="5:33" pos:end="5:34"><name pos:start="5:33" pos:end="5:34">pv</name></expr></argument>, <argument pos:start="5:37" pos:end="5:45"><expr pos:start="5:37" pos:end="5:45"><name pos:start="5:37" pos:end="5:45">PCIDevice</name></expr></argument>, <argument pos:start="5:48" pos:end="5:53"><expr pos:start="5:48" pos:end="5:53"><name pos:start="5:48" pos:end="5:53">config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:36"><name pos:start="7:14" pos:end="7:22">irq_state</name><index pos:start="7:23" pos:end="7:36">[<expr pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:35">PCI_NUM_PINS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <for pos:start="11:5" pos:end="25:5">for <control pos:start="11:9" pos:end="11:38">(<init pos:start="11:10" pos:end="11:15"><expr pos:start="11:10" pos:end="11:14"><name pos:start="11:10" pos:end="11:10">i</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>;</init> <condition pos:start="11:17" pos:end="11:33"><expr pos:start="11:17" pos:end="11:32"><name pos:start="11:17" pos:end="11:17">i</name> <operator pos:start="11:19" pos:end="11:19">&lt;</operator> <name pos:start="11:21" pos:end="11:32">PCI_NUM_PINS</name></expr>;</condition> <incr pos:start="11:35" pos:end="11:37"><expr pos:start="11:35" pos:end="11:37"><operator pos:start="11:35" pos:end="11:36">++</operator><name pos:start="11:37" pos:end="11:37">i</name></expr></incr>)</control> <block pos:start="11:40" pos:end="25:5">{<block_content pos:start="13:9" pos:end="23:9">

        <expr_stmt pos:start="13:9" pos:end="13:40"><expr pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:17">irq_state</name><index pos:start="13:18" pos:end="13:20">[<expr pos:start="13:19" pos:end="13:19"><name pos:start="13:19" pos:end="13:19">i</name></expr>]</index></name> <operator pos:start="13:22" pos:end="13:22">=</operator> <call pos:start="13:24" pos:end="13:39"><name pos:start="13:24" pos:end="13:36">qemu_get_be32</name><argument_list pos:start="13:37" pos:end="13:39">(<argument pos:start="13:38" pos:end="13:38"><expr pos:start="13:38" pos:end="13:38"><name pos:start="13:38" pos:end="13:38">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="23:9"><if pos:start="15:9" pos:end="23:9">if <condition pos:start="15:12" pos:end="15:53">(<expr pos:start="15:13" pos:end="15:52"><name pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:21">irq_state</name><index pos:start="15:22" pos:end="15:24">[<expr pos:start="15:23" pos:end="15:23"><name pos:start="15:23" pos:end="15:23">i</name></expr>]</index></name> <operator pos:start="15:26" pos:end="15:27">!=</operator> <literal type="number" pos:start="15:29" pos:end="15:31">0x1</literal> <operator pos:start="15:33" pos:end="15:34">&amp;&amp;</operator> <name pos:start="15:36" pos:end="15:47"><name pos:start="15:36" pos:end="15:44">irq_state</name><index pos:start="15:45" pos:end="15:47">[<expr pos:start="15:46" pos:end="15:46"><name pos:start="15:46" pos:end="15:46">i</name></expr>]</index></name> <operator pos:start="15:49" pos:end="15:50">!=</operator> <literal type="number" pos:start="15:52" pos:end="15:52">0</literal></expr>)</condition> <block pos:start="15:55" pos:end="23:9">{<block_content pos:start="17:13" pos:end="21:27">

            <expr_stmt pos:start="17:13" pos:end="19:34"><expr pos:start="17:13" pos:end="19:33"><call pos:start="17:13" pos:end="19:33"><name pos:start="17:13" pos:end="17:19">fprintf</name><argument_list pos:start="17:20" pos:end="19:33">(<argument pos:start="17:21" pos:end="17:26"><expr pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:26">stderr</name></expr></argument>, <argument pos:start="17:29" pos:end="17:61"><expr pos:start="17:29" pos:end="17:61"><literal type="string" pos:start="17:29" pos:end="17:61">"irq state %d: must be 0 or 1.\n"</literal></expr></argument>,

                    <argument pos:start="19:21" pos:end="19:32"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:29">irq_state</name><index pos:start="19:30" pos:end="19:32">[<expr pos:start="19:31" pos:end="19:31"><name pos:start="19:31" pos:end="19:31">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="21:13" pos:end="21:27">return <expr pos:start="21:20" pos:end="21:26"><operator pos:start="21:20" pos:end="21:20">-</operator><name pos:start="21:21" pos:end="21:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="29:5" pos:end="33:5">for <control pos:start="29:9" pos:end="29:38">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:33"><expr pos:start="29:17" pos:end="29:32"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:32">PCI_NUM_PINS</name></expr>;</condition> <incr pos:start="29:35" pos:end="29:37"><expr pos:start="29:35" pos:end="29:37"><operator pos:start="29:35" pos:end="29:36">++</operator><name pos:start="29:37" pos:end="29:37">i</name></expr></incr>)</control> <block pos:start="29:40" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:46">

        <expr_stmt pos:start="31:9" pos:end="31:46"><expr pos:start="31:9" pos:end="31:45"><call pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:25">pci_set_irq_state</name><argument_list pos:start="31:26" pos:end="31:45">(<argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><name pos:start="31:27" pos:end="31:27">s</name></expr></argument>, <argument pos:start="31:30" pos:end="31:30"><expr pos:start="31:30" pos:end="31:30"><name pos:start="31:30" pos:end="31:30">i</name></expr></argument>, <argument pos:start="31:33" pos:end="31:44"><expr pos:start="31:33" pos:end="31:44"><name pos:start="31:33" pos:end="31:44"><name pos:start="31:33" pos:end="31:41">irq_state</name><index pos:start="31:42" pos:end="31:44">[<expr pos:start="31:43" pos:end="31:43"><name pos:start="31:43" pos:end="31:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
