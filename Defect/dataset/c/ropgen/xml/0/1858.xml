<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1858.c" pos:tabs="8"><function pos:start="1:1" pos:end="411:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:65">(<parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:60">PowerPCCPU</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:54">bool</name></type> <name pos:start="5:56" pos:end="5:64">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="411:1">{<block_content pos:start="9:5" pos:end="410:0">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUPPCState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">DisasContext</name></type> <name pos:start="13:18" pos:end="13:20">ctx</name></decl>, <decl pos:start="13:23" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:27">ctxp</name> <init pos:start="13:29" pos:end="13:34">= <expr pos:start="13:31" pos:end="13:34"><operator pos:start="13:31" pos:end="13:31">&amp;</operator><name pos:start="13:32" pos:end="13:34">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:17">opc_handler_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier><modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:25">table</name></decl>, <decl pos:start="15:28" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:20"><modifier pos:start="15:28" pos:end="15:28">*</modifier></type><name pos:start="15:29" pos:end="15:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:17">CPUBreakpoint</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">j</name></decl>, <decl pos:start="23:12" pos:end="23:18"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:13">lj</name> <init pos:start="23:15" pos:end="23:18">= <expr pos:start="23:17" pos:end="23:18"><operator pos:start="23:17" pos:end="23:17">-</operator><literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:12">pc_start</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:17">tb</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:15">gen_opc_end</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:37"><name pos:start="33:19" pos:end="33:25">tcg_ctx</name><operator pos:start="33:26" pos:end="33:26">.</operator><name pos:start="33:27" pos:end="33:37">gen_opc_buf</name></name> <operator pos:start="33:39" pos:end="33:39">+</operator> <name pos:start="33:41" pos:end="33:52">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:11">nip</name></name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:16"><expr pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:10">tb</name></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:17">exception</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:37">POWERPC_EXCP_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:14">spr_cb</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:28"><name pos:start="41:18" pos:end="41:20">env</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:28">spr_cb</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:20"><expr pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:10">pr</name></name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:19">msr_pr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:10">hv</name></name> <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">!</operator><name pos:start="45:15" pos:end="45:20">msr_pr</name> <operator pos:start="45:22" pos:end="45:23">&amp;&amp;</operator> <name pos:start="45:25" pos:end="45:30">msr_hv</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:15">mem_idx</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:30"><name pos:start="47:19" pos:end="47:21">env</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:30">mmu_idx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:7">ctx</name><operator pos:start="49:8" pos:end="49:8">.</operator><name pos:start="49:9" pos:end="49:19">insns_flags</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:38"><name pos:start="49:23" pos:end="49:25">env</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:38">insns_flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:41"><expr pos:start="51:5" pos:end="51:40"><name pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:20">insns_flags2</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:40"><name pos:start="51:24" pos:end="51:26">env</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:40">insns_flags2</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:8">.</operator><name pos:start="53:9" pos:end="53:19">access_type</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <operator pos:start="53:23" pos:end="53:23">-</operator><literal type="number" pos:start="53:24" pos:end="53:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:54"><expr pos:start="55:5" pos:end="55:53"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:7">ctx</name><operator pos:start="55:8" pos:end="55:8">.</operator><name pos:start="55:9" pos:end="55:15">le_mode</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <ternary pos:start="55:19" pos:end="55:53"><condition pos:start="55:19" pos:end="55:47"><expr pos:start="55:19" pos:end="55:45"><name pos:start="55:19" pos:end="55:29"><name pos:start="55:19" pos:end="55:21">env</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:29">hflags</name></name> <operator pos:start="55:31" pos:end="55:31">&amp;</operator> <operator pos:start="55:33" pos:end="55:33">(</operator><literal type="number" pos:start="55:34" pos:end="55:34">1</literal> <operator pos:start="55:36" pos:end="55:37">&lt;&lt;</operator> <name pos:start="55:39" pos:end="55:44">MSR_LE</name><operator pos:start="55:45" pos:end="55:45">)</operator></expr> ?</condition><then pos:start="55:49" pos:end="55:49"> <expr pos:start="55:49" pos:end="55:49"><literal type="number" pos:start="55:49" pos:end="55:49">1</literal></expr> </then><else pos:start="55:51" pos:end="55:53">: <expr pos:start="55:53" pos:end="55:53"><literal type="number" pos:start="55:53" pos:end="55:53">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:60"><name pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:7">ctx</name><operator pos:start="57:8" pos:end="57:8">.</operator><name pos:start="57:9" pos:end="57:30">default_tcg_memop_mask</name></name> <operator pos:start="57:32" pos:end="57:32">=</operator> <ternary pos:start="57:34" pos:end="57:60"><condition pos:start="57:34" pos:end="57:46"><expr pos:start="57:34" pos:end="57:44"><name pos:start="57:34" pos:end="57:44"><name pos:start="57:34" pos:end="57:36">ctx</name><operator pos:start="57:37" pos:end="57:37">.</operator><name pos:start="57:38" pos:end="57:44">le_mode</name></name></expr> ?</condition><then pos:start="57:48" pos:end="57:52"> <expr pos:start="57:48" pos:end="57:52"><name pos:start="57:48" pos:end="57:52">MO_LE</name></expr> </then><else pos:start="57:54" pos:end="57:60">: <expr pos:start="57:56" pos:end="57:60"><name pos:start="57:56" pos:end="57:60">MO_BE</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:25">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:25"><call pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:11">defined</name><argument_list pos:start="59:12" pos:end="59:25">(<argument pos:start="59:13" pos:end="59:24"><expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="61:5" pos:end="61:46"><expr pos:start="61:5" pos:end="61:45"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:7">ctx</name><operator pos:start="61:8" pos:end="61:8">.</operator><name pos:start="61:9" pos:end="61:15">sf_mode</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:45"><name pos:start="61:19" pos:end="61:30">msr_is_64bit</name><argument_list pos:start="61:31" pos:end="61:45">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">env</name></expr></argument>, <argument pos:start="61:37" pos:end="61:44"><expr pos:start="61:37" pos:end="61:44"><name pos:start="61:37" pos:end="61:44"><name pos:start="61:37" pos:end="61:39">env</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:44">msr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="66:0"><expr pos:start="63:5" pos:end="63:53"><name pos:start="63:5" pos:end="63:16"><name pos:start="63:5" pos:end="63:7">ctx</name><operator pos:start="63:8" pos:end="63:8">.</operator><name pos:start="63:9" pos:end="63:16">has_cfar</name></name> <operator pos:start="63:18" pos:end="63:18">=</operator> <operator pos:start="63:20" pos:end="63:20">!</operator><operator pos:start="63:21" pos:end="63:21">!</operator><operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:32"><name pos:start="63:23" pos:end="63:25">env</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:32">flags</name></name> <operator pos:start="63:34" pos:end="63:34">&amp;</operator> <name pos:start="63:36" pos:end="63:52">POWERPC_FLAG_CFAR</name><operator pos:start="63:53" pos:end="63:53">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="67:5" pos:end="67:29"><expr pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:7">ctx</name><operator pos:start="67:8" pos:end="67:8">.</operator><name pos:start="67:9" pos:end="67:19">fpu_enabled</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:28">msr_fp</name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:28"><if pos:start="69:5" pos:end="71:34">if <condition pos:start="69:8" pos:end="69:51">(<expr pos:start="69:9" pos:end="69:50"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:19"><name pos:start="69:10" pos:end="69:12">env</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:19">flags</name></name> <operator pos:start="69:21" pos:end="69:21">&amp;</operator> <name pos:start="69:23" pos:end="69:38">POWERPC_FLAG_SPE</name><operator pos:start="69:39" pos:end="69:39">)</operator> <operator pos:start="69:41" pos:end="69:42">&amp;&amp;</operator> <name pos:start="69:44" pos:end="69:50">msr_spe</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:34"><block_content pos:start="71:9" pos:end="71:34">

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:12">.</operator><name pos:start="71:13" pos:end="71:23">spe_enabled</name></name> <operator pos:start="71:25" pos:end="71:25">=</operator> <name pos:start="71:27" pos:end="71:33">msr_spe</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="73:5" pos:end="75:28">else<block type="pseudo" pos:start="75:9" pos:end="75:28"><block_content pos:start="75:9" pos:end="75:28">

        <expr_stmt pos:start="75:9" pos:end="75:28"><expr pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:23">spe_enabled</name></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="77:5" pos:end="83:32"><if pos:start="77:5" pos:end="79:37">if <condition pos:start="77:8" pos:end="77:50">(<expr pos:start="77:9" pos:end="77:49"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:19"><name pos:start="77:10" pos:end="77:12">env</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:19">flags</name></name> <operator pos:start="77:21" pos:end="77:21">&amp;</operator> <name pos:start="77:23" pos:end="77:38">POWERPC_FLAG_VRE</name><operator pos:start="77:39" pos:end="77:39">)</operator> <operator pos:start="77:41" pos:end="77:42">&amp;&amp;</operator> <name pos:start="77:44" pos:end="77:49">msr_vr</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:37"><block_content pos:start="79:9" pos:end="79:37">

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:11">ctx</name><operator pos:start="79:12" pos:end="79:12">.</operator><name pos:start="79:13" pos:end="79:27">altivec_enabled</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <name pos:start="79:31" pos:end="79:36">msr_vr</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="81:5" pos:end="83:32">else<block type="pseudo" pos:start="83:9" pos:end="83:32"><block_content pos:start="83:9" pos:end="83:32">

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:11">ctx</name><operator pos:start="83:12" pos:end="83:12">.</operator><name pos:start="83:13" pos:end="83:27">altivec_enabled</name></name> <operator pos:start="83:29" pos:end="83:29">=</operator> <literal type="number" pos:start="83:31" pos:end="83:31">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:51">(<expr pos:start="85:9" pos:end="85:50"><operator pos:start="85:9" pos:end="85:9">(</operator><name pos:start="85:10" pos:end="85:19"><name pos:start="85:10" pos:end="85:12">env</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:19">flags</name></name> <operator pos:start="85:21" pos:end="85:21">&amp;</operator> <name pos:start="85:23" pos:end="85:38">POWERPC_FLAG_VSX</name><operator pos:start="85:39" pos:end="85:39">)</operator> <operator pos:start="85:41" pos:end="85:42">&amp;&amp;</operator> <name pos:start="85:44" pos:end="85:50">msr_vsx</name></expr>)</condition> <block pos:start="85:53" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:34">

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:11">ctx</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:23">vsx_enabled</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:33">msr_vsx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="93:5">else <block pos:start="89:12" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:28">

        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:11">ctx</name><operator pos:start="91:12" pos:end="91:12">.</operator><name pos:start="91:13" pos:end="91:23">vsx_enabled</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <literal type="number" pos:start="91:27" pos:end="91:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="95:5" pos:end="101:35"><if pos:start="95:5" pos:end="97:49">if <condition pos:start="95:8" pos:end="95:49">(<expr pos:start="95:9" pos:end="95:48"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:19"><name pos:start="95:10" pos:end="95:12">env</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:19">flags</name></name> <operator pos:start="95:21" pos:end="95:21">&amp;</operator> <name pos:start="95:23" pos:end="95:37">POWERPC_FLAG_SE</name><operator pos:start="95:38" pos:end="95:38">)</operator> <operator pos:start="95:40" pos:end="95:41">&amp;&amp;</operator> <name pos:start="95:43" pos:end="95:48">msr_se</name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:49"><block_content pos:start="97:9" pos:end="97:49">

        <expr_stmt pos:start="97:9" pos:end="97:49"><expr pos:start="97:9" pos:end="97:48"><name pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:11">ctx</name><operator pos:start="97:12" pos:end="97:12">.</operator><name pos:start="97:13" pos:end="97:30">singlestep_enabled</name></name> <operator pos:start="97:32" pos:end="97:32">=</operator> <name pos:start="97:34" pos:end="97:48">CPU_SINGLE_STEP</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="99:5" pos:end="101:35">else<block type="pseudo" pos:start="101:9" pos:end="101:35"><block_content pos:start="101:9" pos:end="101:35">

        <expr_stmt pos:start="101:9" pos:end="101:35"><expr pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:11">ctx</name><operator pos:start="101:12" pos:end="101:12">.</operator><name pos:start="101:13" pos:end="101:30">singlestep_enabled</name></name> <operator pos:start="101:32" pos:end="101:32">=</operator> <literal type="number" pos:start="101:34" pos:end="101:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="103:5" pos:end="105:50"><if pos:start="103:5" pos:end="105:50">if <condition pos:start="103:8" pos:end="103:49">(<expr pos:start="103:9" pos:end="103:48"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:19"><name pos:start="103:10" pos:end="103:12">env</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:19">flags</name></name> <operator pos:start="103:21" pos:end="103:21">&amp;</operator> <name pos:start="103:23" pos:end="103:37">POWERPC_FLAG_BE</name><operator pos:start="103:38" pos:end="103:38">)</operator> <operator pos:start="103:40" pos:end="103:41">&amp;&amp;</operator> <name pos:start="103:43" pos:end="103:48">msr_be</name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:50"><block_content pos:start="105:9" pos:end="105:50">

        <expr_stmt pos:start="105:9" pos:end="105:50"><expr pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:11">ctx</name><operator pos:start="105:12" pos:end="105:12">.</operator><name pos:start="105:13" pos:end="105:30">singlestep_enabled</name></name> <operator pos:start="105:32" pos:end="105:33">|=</operator> <name pos:start="105:35" pos:end="105:49">CPU_BRANCH_STEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="114:0"><if pos:start="107:5" pos:end="114:0">if <condition pos:start="107:8" pos:end="107:41">(<expr pos:start="107:9" pos:end="107:40"><call pos:start="107:9" pos:end="107:40"><name pos:start="107:9" pos:end="107:16">unlikely</name><argument_list pos:start="107:17" pos:end="107:40">(<argument pos:start="107:18" pos:end="107:39"><expr pos:start="107:18" pos:end="107:39"><name pos:start="107:18" pos:end="107:39"><name pos:start="107:18" pos:end="107:19">cs</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:39">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:43" pos:end="114:0">{<block_content pos:start="109:9" pos:end="109:54">

        <expr_stmt pos:start="109:9" pos:end="109:54"><expr pos:start="109:9" pos:end="109:53"><name pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:11">ctx</name><operator pos:start="109:12" pos:end="109:12">.</operator><name pos:start="109:13" pos:end="109:30">singlestep_enabled</name></name> <operator pos:start="109:32" pos:end="109:33">|=</operator> <name pos:start="109:35" pos:end="109:53">GDBSTUB_SINGLE_STEP</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="113:1" pos:end="113:33">#<cpp:directive pos:start="113:2" pos:end="113:3">if</cpp:directive> <expr pos:start="113:5" pos:end="113:33"><call pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:11">defined</name> <argument_list pos:start="113:13" pos:end="113:28">(<argument pos:start="113:14" pos:end="113:27"><expr pos:start="113:14" pos:end="113:27"><name pos:start="113:14" pos:end="113:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call> <operator pos:start="113:30" pos:end="113:31">&amp;&amp;</operator> <literal type="number" pos:start="113:33" pos:end="113:33">0</literal></expr></cpp:if>

    <comment type="block" pos:start="115:5" pos:end="115:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="117:5" pos:end="120:0"><expr pos:start="117:5" pos:end="117:14"><name pos:start="117:5" pos:end="117:10">msr_se</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <literal type="number" pos:start="117:14" pos:end="117:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="121:5" pos:end="121:18"><expr pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:13">num_insns</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <literal type="number" pos:start="121:17" pos:end="121:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:43"><expr pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:13">max_insns</name> <operator pos:start="123:15" pos:end="123:15">=</operator> <name pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:18">tb</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:26">cflags</name></name> <operator pos:start="123:28" pos:end="123:28">&amp;</operator> <name pos:start="123:30" pos:end="123:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="127:34"><if pos:start="125:5" pos:end="127:34">if <condition pos:start="125:8" pos:end="125:23">(<expr pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:17">max_insns</name> <operator pos:start="125:19" pos:end="125:20">==</operator> <literal type="number" pos:start="125:22" pos:end="125:22">0</literal></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:34"><block_content pos:start="127:9" pos:end="127:34">

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:17">max_insns</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:19"><expr pos:start="131:5" pos:end="131:18"><call pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:16">gen_tb_start</name><argument_list pos:start="131:17" pos:end="131:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:27"><expr pos:start="133:5" pos:end="133:26"><call pos:start="133:5" pos:end="133:26"><name pos:start="133:5" pos:end="133:24">tcg_clear_temp_count</name><argument_list pos:start="133:25" pos:end="133:26">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="135:5" pos:end="135:55">/* Set env in case of segfault during code fetch */</comment>

    <while pos:start="137:5" pos:end="345:5">while <condition pos:start="137:11" pos:end="139:49">(<expr pos:start="137:12" pos:end="139:48"><name pos:start="137:12" pos:end="137:24"><name pos:start="137:12" pos:end="137:14">ctx</name><operator pos:start="137:15" pos:end="137:15">.</operator><name pos:start="137:16" pos:end="137:24">exception</name></name> <operator pos:start="137:26" pos:end="137:27">==</operator> <name pos:start="137:29" pos:end="137:45">POWERPC_EXCP_NONE</name>

            <operator pos:start="139:13" pos:end="139:14">&amp;&amp;</operator> <name pos:start="139:16" pos:end="139:34"><name pos:start="139:16" pos:end="139:22">tcg_ctx</name><operator pos:start="139:23" pos:end="139:23">.</operator><name pos:start="139:24" pos:end="139:34">gen_opc_ptr</name></name> <operator pos:start="139:36" pos:end="139:36">&lt;</operator> <name pos:start="139:38" pos:end="139:48">gen_opc_end</name></expr>)</condition> <block pos:start="139:51" pos:end="345:5">{<block_content pos:start="141:9" pos:end="343:9">

        <if_stmt pos:start="141:9" pos:end="155:9"><if pos:start="141:9" pos:end="155:9">if <condition pos:start="141:12" pos:end="141:54">(<expr pos:start="141:13" pos:end="141:53"><call pos:start="141:13" pos:end="141:53"><name pos:start="141:13" pos:end="141:20">unlikely</name><argument_list pos:start="141:21" pos:end="141:53">(<argument pos:start="141:22" pos:end="141:52"><expr pos:start="141:22" pos:end="141:52"><operator pos:start="141:22" pos:end="141:22">!</operator><call pos:start="141:23" pos:end="141:52"><name pos:start="141:23" pos:end="141:34">QTAILQ_EMPTY</name><argument_list pos:start="141:35" pos:end="141:52">(<argument pos:start="141:36" pos:end="141:51"><expr pos:start="141:36" pos:end="141:51"><operator pos:start="141:36" pos:end="141:36">&amp;</operator><name pos:start="141:37" pos:end="141:51"><name pos:start="141:37" pos:end="141:38">cs</name><operator pos:start="141:39" pos:end="141:40">-&gt;</operator><name pos:start="141:41" pos:end="141:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:56" pos:end="155:9">{<block_content pos:start="143:13" pos:end="153:13">

            <macro pos:start="143:13" pos:end="143:55"><name pos:start="143:13" pos:end="143:26">QTAILQ_FOREACH</name><argument_list pos:start="143:27" pos:end="143:55">(<argument pos:start="143:28" pos:end="143:29">bp</argument>, <argument pos:start="143:32" pos:end="143:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="143:50" pos:end="143:54">entry</argument>)</argument_list></macro> <block pos:start="143:57" pos:end="153:13">{<block_content pos:start="145:17" pos:end="151:17">

                <if_stmt pos:start="145:17" pos:end="151:17"><if pos:start="145:17" pos:end="151:17">if <condition pos:start="145:20" pos:end="145:38">(<expr pos:start="145:21" pos:end="145:37"><name pos:start="145:21" pos:end="145:26"><name pos:start="145:21" pos:end="145:22">bp</name><operator pos:start="145:23" pos:end="145:24">-&gt;</operator><name pos:start="145:25" pos:end="145:26">pc</name></name> <operator pos:start="145:28" pos:end="145:29">==</operator> <name pos:start="145:31" pos:end="145:37"><name pos:start="145:31" pos:end="145:33">ctx</name><operator pos:start="145:34" pos:end="145:34">.</operator><name pos:start="145:35" pos:end="145:37">nip</name></name></expr>)</condition> <block pos:start="145:40" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:26">

                    <expr_stmt pos:start="147:21" pos:end="147:46"><expr pos:start="147:21" pos:end="147:45"><call pos:start="147:21" pos:end="147:45"><name pos:start="147:21" pos:end="147:39">gen_debug_exception</name><argument_list pos:start="147:40" pos:end="147:45">(<argument pos:start="147:41" pos:end="147:44"><expr pos:start="147:41" pos:end="147:44"><name pos:start="147:41" pos:end="147:44">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="149:21" pos:end="149:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="157:9" pos:end="177:9"><if pos:start="157:9" pos:end="177:9">if <condition pos:start="157:12" pos:end="157:32">(<expr pos:start="157:13" pos:end="157:31"><call pos:start="157:13" pos:end="157:31"><name pos:start="157:13" pos:end="157:20">unlikely</name><argument_list pos:start="157:21" pos:end="157:31">(<argument pos:start="157:22" pos:end="157:30"><expr pos:start="157:22" pos:end="157:30"><name pos:start="157:22" pos:end="157:30">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:34" pos:end="177:9">{<block_content pos:start="159:13" pos:end="175:51">

            <expr_stmt pos:start="159:13" pos:end="159:58"><expr pos:start="159:13" pos:end="159:57"><name pos:start="159:13" pos:end="159:13">j</name> <operator pos:start="159:15" pos:end="159:15">=</operator> <name pos:start="159:17" pos:end="159:35"><name pos:start="159:17" pos:end="159:23">tcg_ctx</name><operator pos:start="159:24" pos:end="159:24">.</operator><name pos:start="159:25" pos:end="159:35">gen_opc_ptr</name></name> <operator pos:start="159:37" pos:end="159:37">-</operator> <name pos:start="159:39" pos:end="159:57"><name pos:start="159:39" pos:end="159:45">tcg_ctx</name><operator pos:start="159:46" pos:end="159:46">.</operator><name pos:start="159:47" pos:end="159:57">gen_opc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="169:13"><if pos:start="161:13" pos:end="169:13">if <condition pos:start="161:16" pos:end="161:23">(<expr pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:18">lj</name> <operator pos:start="161:20" pos:end="161:20">&lt;</operator> <name pos:start="161:22" pos:end="161:22">j</name></expr>)</condition> <block pos:start="161:25" pos:end="169:13">{<block_content pos:start="163:17" pos:end="167:58">

                <expr_stmt pos:start="163:17" pos:end="163:21"><expr pos:start="163:17" pos:end="163:20"><name pos:start="163:17" pos:end="163:18">lj</name><operator pos:start="163:19" pos:end="163:20">++</operator></expr>;</expr_stmt>

                <while pos:start="165:17" pos:end="167:58">while <condition pos:start="165:23" pos:end="165:30">(<expr pos:start="165:24" pos:end="165:29"><name pos:start="165:24" pos:end="165:25">lj</name> <operator pos:start="165:27" pos:end="165:27">&lt;</operator> <name pos:start="165:29" pos:end="165:29">j</name></expr>)</condition><block type="pseudo" pos:start="167:21" pos:end="167:58"><block_content pos:start="167:21" pos:end="167:58">

                    <expr_stmt pos:start="167:21" pos:end="167:58"><expr pos:start="167:21" pos:end="167:57"><name pos:start="167:21" pos:end="167:53"><name pos:start="167:21" pos:end="167:27">tcg_ctx</name><operator pos:start="167:28" pos:end="167:28">.</operator><name pos:start="167:29" pos:end="167:47">gen_opc_instr_start</name><index pos:start="167:48" pos:end="167:53">[<expr pos:start="167:49" pos:end="167:52"><name pos:start="167:49" pos:end="167:50">lj</name><operator pos:start="167:51" pos:end="167:52">++</operator></expr>]</index></name> <operator pos:start="167:55" pos:end="167:55">=</operator> <literal type="number" pos:start="167:57" pos:end="167:57">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:34"><name pos:start="171:13" pos:end="171:19">tcg_ctx</name><operator pos:start="171:20" pos:end="171:20">.</operator><name pos:start="171:21" pos:end="171:30">gen_opc_pc</name><index pos:start="171:31" pos:end="171:34">[<expr pos:start="171:32" pos:end="171:33"><name pos:start="171:32" pos:end="171:33">lj</name></expr>]</index></name> <operator pos:start="171:36" pos:end="171:36">=</operator> <name pos:start="171:38" pos:end="171:44"><name pos:start="171:38" pos:end="171:40">ctx</name><operator pos:start="171:41" pos:end="171:41">.</operator><name pos:start="171:42" pos:end="171:44">nip</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:48"><expr pos:start="173:13" pos:end="173:47"><name pos:start="173:13" pos:end="173:43"><name pos:start="173:13" pos:end="173:19">tcg_ctx</name><operator pos:start="173:20" pos:end="173:20">.</operator><name pos:start="173:21" pos:end="173:39">gen_opc_instr_start</name><index pos:start="173:40" pos:end="173:43">[<expr pos:start="173:41" pos:end="173:42"><name pos:start="173:41" pos:end="173:42">lj</name></expr>]</index></name> <operator pos:start="173:45" pos:end="173:45">=</operator> <literal type="number" pos:start="173:47" pos:end="173:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:51"><expr pos:start="175:13" pos:end="175:50"><name pos:start="175:13" pos:end="175:38"><name pos:start="175:13" pos:end="175:19">tcg_ctx</name><operator pos:start="175:20" pos:end="175:20">.</operator><name pos:start="175:21" pos:end="175:34">gen_opc_icount</name><index pos:start="175:35" pos:end="175:38">[<expr pos:start="175:36" pos:end="175:37"><name pos:start="175:36" pos:end="175:37">lj</name></expr>]</index></name> <operator pos:start="175:40" pos:end="175:40">=</operator> <name pos:start="175:42" pos:end="175:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:40"><expr pos:start="179:9" pos:end="179:39"><call pos:start="179:9" pos:end="179:39"><name pos:start="179:9" pos:end="179:17">LOG_DISAS</name><argument_list pos:start="179:18" pos:end="179:39">(<argument pos:start="179:19" pos:end="179:38"><expr pos:start="179:19" pos:end="179:38"><literal type="string" pos:start="179:19" pos:end="179:38">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="183:53"><expr pos:start="181:9" pos:end="183:52"><call pos:start="181:9" pos:end="183:52"><name pos:start="181:9" pos:end="181:17">LOG_DISAS</name><argument_list pos:start="181:18" pos:end="183:52">(<argument pos:start="181:19" pos:end="181:58"><expr pos:start="181:19" pos:end="181:58"><literal type="string" pos:start="181:19" pos:end="181:24">"nip="</literal> <name pos:start="181:26" pos:end="181:38">TARGET_FMT_lx</name> <literal type="string" pos:start="181:40" pos:end="181:58">" super=%d ir=%d\n"</literal></expr></argument>,

                  <argument pos:start="183:19" pos:end="183:25"><expr pos:start="183:19" pos:end="183:25"><name pos:start="183:19" pos:end="183:25"><name pos:start="183:19" pos:end="183:21">ctx</name><operator pos:start="183:22" pos:end="183:22">.</operator><name pos:start="183:23" pos:end="183:25">nip</name></name></expr></argument>, <argument pos:start="183:28" pos:end="183:38"><expr pos:start="183:28" pos:end="183:38"><name pos:start="183:28" pos:end="183:38"><name pos:start="183:28" pos:end="183:30">ctx</name><operator pos:start="183:31" pos:end="183:31">.</operator><name pos:start="183:32" pos:end="183:38">mem_idx</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:51"><expr pos:start="183:41" pos:end="183:51"><operator pos:start="183:41" pos:end="183:41">(</operator><name pos:start="183:42" pos:end="183:44">int</name><operator pos:start="183:45" pos:end="183:45">)</operator><name pos:start="183:46" pos:end="183:51">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="187:27"><if pos:start="185:9" pos:end="187:27">if <condition pos:start="185:12" pos:end="185:68">(<expr pos:start="185:13" pos:end="185:67"><name pos:start="185:13" pos:end="185:21">num_insns</name> <operator pos:start="185:23" pos:end="185:23">+</operator> <literal type="number" pos:start="185:25" pos:end="185:25">1</literal> <operator pos:start="185:27" pos:end="185:28">==</operator> <name pos:start="185:30" pos:end="185:38">max_insns</name> <operator pos:start="185:40" pos:end="185:41">&amp;&amp;</operator> <operator pos:start="185:43" pos:end="185:43">(</operator><name pos:start="185:44" pos:end="185:53"><name pos:start="185:44" pos:end="185:45">tb</name><operator pos:start="185:46" pos:end="185:47">-&gt;</operator><name pos:start="185:48" pos:end="185:53">cflags</name></name> <operator pos:start="185:55" pos:end="185:55">&amp;</operator> <name pos:start="185:57" pos:end="185:66">CF_LAST_IO</name><operator pos:start="185:67" pos:end="185:67">)</operator></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:27"><block_content pos:start="187:13" pos:end="187:27">

            <expr_stmt pos:start="187:13" pos:end="187:27"><expr pos:start="187:13" pos:end="187:26"><call pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:24">gen_io_start</name><argument_list pos:start="187:25" pos:end="187:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="193:9">if <condition pos:start="189:12" pos:end="189:42">(<expr pos:start="189:13" pos:end="189:41"><call pos:start="189:13" pos:end="189:41"><name pos:start="189:13" pos:end="189:20">unlikely</name><argument_list pos:start="189:21" pos:end="189:41">(<argument pos:start="189:22" pos:end="189:40"><expr pos:start="189:22" pos:end="189:40"><call pos:start="189:22" pos:end="189:40"><name pos:start="189:22" pos:end="189:34">need_byteswap</name><argument_list pos:start="189:35" pos:end="189:40">(<argument pos:start="189:36" pos:end="189:39"><expr pos:start="189:36" pos:end="189:39"><operator pos:start="189:36" pos:end="189:36">&amp;</operator><name pos:start="189:37" pos:end="189:39">ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:44" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:61">

            <expr_stmt pos:start="191:13" pos:end="191:61"><expr pos:start="191:13" pos:end="191:60"><name pos:start="191:13" pos:end="191:22"><name pos:start="191:13" pos:end="191:15">ctx</name><operator pos:start="191:16" pos:end="191:16">.</operator><name pos:start="191:17" pos:end="191:22">opcode</name></name> <operator pos:start="191:24" pos:end="191:24">=</operator> <call pos:start="191:26" pos:end="191:60"><name pos:start="191:26" pos:end="191:32">bswap32</name><argument_list pos:start="191:33" pos:end="191:60">(<argument pos:start="191:34" pos:end="191:59"><expr pos:start="191:34" pos:end="191:59"><call pos:start="191:34" pos:end="191:59"><name pos:start="191:34" pos:end="191:45">cpu_ldl_code</name><argument_list pos:start="191:46" pos:end="191:59">(<argument pos:start="191:47" pos:end="191:49"><expr pos:start="191:47" pos:end="191:49"><name pos:start="191:47" pos:end="191:49">env</name></expr></argument>, <argument pos:start="191:52" pos:end="191:58"><expr pos:start="191:52" pos:end="191:58"><name pos:start="191:52" pos:end="191:58"><name pos:start="191:52" pos:end="191:54">ctx</name><operator pos:start="191:55" pos:end="191:55">.</operator><name pos:start="191:56" pos:end="191:58">nip</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="193:11" pos:end="197:9">else <block pos:start="193:16" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:52">

            <expr_stmt pos:start="195:13" pos:end="195:52"><expr pos:start="195:13" pos:end="195:51"><name pos:start="195:13" pos:end="195:22"><name pos:start="195:13" pos:end="195:15">ctx</name><operator pos:start="195:16" pos:end="195:16">.</operator><name pos:start="195:17" pos:end="195:22">opcode</name></name> <operator pos:start="195:24" pos:end="195:24">=</operator> <call pos:start="195:26" pos:end="195:51"><name pos:start="195:26" pos:end="195:37">cpu_ldl_code</name><argument_list pos:start="195:38" pos:end="195:51">(<argument pos:start="195:39" pos:end="195:41"><expr pos:start="195:39" pos:end="195:41"><name pos:start="195:39" pos:end="195:41">env</name></expr></argument>, <argument pos:start="195:44" pos:end="195:50"><expr pos:start="195:44" pos:end="195:50"><name pos:start="195:44" pos:end="195:50"><name pos:start="195:44" pos:end="195:46">ctx</name><operator pos:start="195:47" pos:end="195:47">.</operator><name pos:start="195:48" pos:end="195:50">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="203:70"><expr pos:start="199:9" pos:end="203:69"><call pos:start="199:9" pos:end="203:69"><name pos:start="199:9" pos:end="199:17">LOG_DISAS</name><argument_list pos:start="199:18" pos:end="203:69">(<argument pos:start="199:19" pos:end="199:65"><expr pos:start="199:19" pos:end="199:65"><literal type="string" pos:start="199:19" pos:end="199:65">"translate opcode %08x (%02x %02x %02x) (%s)\n"</literal></expr></argument>,

                    <argument pos:start="201:21" pos:end="201:30"><expr pos:start="201:21" pos:end="201:30"><name pos:start="201:21" pos:end="201:30"><name pos:start="201:21" pos:end="201:23">ctx</name><operator pos:start="201:24" pos:end="201:24">.</operator><name pos:start="201:25" pos:end="201:30">opcode</name></name></expr></argument>, <argument pos:start="201:33" pos:end="201:48"><expr pos:start="201:33" pos:end="201:48"><call pos:start="201:33" pos:end="201:48"><name pos:start="201:33" pos:end="201:36">opc1</name><argument_list pos:start="201:37" pos:end="201:48">(<argument pos:start="201:38" pos:end="201:47"><expr pos:start="201:38" pos:end="201:47"><name pos:start="201:38" pos:end="201:47"><name pos:start="201:38" pos:end="201:40">ctx</name><operator pos:start="201:41" pos:end="201:41">.</operator><name pos:start="201:42" pos:end="201:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="201:51" pos:end="201:66"><expr pos:start="201:51" pos:end="201:66"><call pos:start="201:51" pos:end="201:66"><name pos:start="201:51" pos:end="201:54">opc2</name><argument_list pos:start="201:55" pos:end="201:66">(<argument pos:start="201:56" pos:end="201:65"><expr pos:start="201:56" pos:end="201:65"><name pos:start="201:56" pos:end="201:65"><name pos:start="201:56" pos:end="201:58">ctx</name><operator pos:start="201:59" pos:end="201:59">.</operator><name pos:start="201:60" pos:end="201:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="203:21" pos:end="203:36"><expr pos:start="203:21" pos:end="203:36"><call pos:start="203:21" pos:end="203:36"><name pos:start="203:21" pos:end="203:24">opc3</name><argument_list pos:start="203:25" pos:end="203:36">(<argument pos:start="203:26" pos:end="203:35"><expr pos:start="203:26" pos:end="203:35"><name pos:start="203:26" pos:end="203:35"><name pos:start="203:26" pos:end="203:28">ctx</name><operator pos:start="203:29" pos:end="203:29">.</operator><name pos:start="203:30" pos:end="203:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:39" pos:end="203:68"><expr pos:start="203:39" pos:end="203:68"><ternary pos:start="203:39" pos:end="203:68"><condition pos:start="203:39" pos:end="203:51"><expr pos:start="203:39" pos:end="203:49"><name pos:start="203:39" pos:end="203:49"><name pos:start="203:39" pos:end="203:41">ctx</name><operator pos:start="203:42" pos:end="203:42">.</operator><name pos:start="203:43" pos:end="203:49">le_mode</name></name></expr> ?</condition><then pos:start="203:53" pos:end="203:60"> <expr pos:start="203:53" pos:end="203:60"><literal type="string" pos:start="203:53" pos:end="203:60">"little"</literal></expr> </then><else pos:start="203:62" pos:end="203:68">: <expr pos:start="203:64" pos:end="203:68"><literal type="string" pos:start="203:64" pos:end="203:68">"big"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="209:9"><if pos:start="205:9" pos:end="209:9">if <condition pos:start="205:12" pos:end="205:76">(<expr pos:start="205:13" pos:end="205:75"><call pos:start="205:13" pos:end="205:75"><name pos:start="205:13" pos:end="205:20">unlikely</name><argument_list pos:start="205:21" pos:end="205:75">(<argument pos:start="205:22" pos:end="205:74"><expr pos:start="205:22" pos:end="205:74"><call pos:start="205:22" pos:end="205:74"><name pos:start="205:22" pos:end="205:39">qemu_loglevel_mask</name><argument_list pos:start="205:40" pos:end="205:74">(<argument pos:start="205:41" pos:end="205:73"><expr pos:start="205:41" pos:end="205:73"><name pos:start="205:41" pos:end="205:53">CPU_LOG_TB_OP</name> <operator pos:start="205:55" pos:end="205:55">|</operator> <name pos:start="205:57" pos:end="205:73">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:78" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:46">

            <expr_stmt pos:start="207:13" pos:end="207:46"><expr pos:start="207:13" pos:end="207:45"><call pos:start="207:13" pos:end="207:45"><name pos:start="207:13" pos:end="207:36">tcg_gen_debug_insn_start</name><argument_list pos:start="207:37" pos:end="207:45">(<argument pos:start="207:38" pos:end="207:44"><expr pos:start="207:38" pos:end="207:44"><name pos:start="207:38" pos:end="207:44"><name pos:start="207:38" pos:end="207:40">ctx</name><operator pos:start="207:41" pos:end="207:41">.</operator><name pos:start="207:42" pos:end="207:44">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:21"><expr pos:start="211:9" pos:end="211:20"><name pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:11">ctx</name><operator pos:start="211:12" pos:end="211:12">.</operator><name pos:start="211:13" pos:end="211:15">nip</name></name> <operator pos:start="211:17" pos:end="211:18">+=</operator> <literal type="number" pos:start="211:20" pos:end="211:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:29"><expr pos:start="213:9" pos:end="213:28"><name pos:start="213:9" pos:end="213:13">table</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <name pos:start="213:17" pos:end="213:28"><name pos:start="213:17" pos:end="213:19">env</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:28">opcodes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:20"><expr pos:start="215:9" pos:end="215:19"><name pos:start="215:9" pos:end="215:17">num_insns</name><operator pos:start="215:18" pos:end="215:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:42"><expr pos:start="217:9" pos:end="217:41"><name pos:start="217:9" pos:end="217:15">handler</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <name pos:start="217:19" pos:end="217:41"><name pos:start="217:19" pos:end="217:23">table</name><index pos:start="217:24" pos:end="217:41">[<expr pos:start="217:25" pos:end="217:40"><call pos:start="217:25" pos:end="217:40"><name pos:start="217:25" pos:end="217:28">opc1</name><argument_list pos:start="217:29" pos:end="217:40">(<argument pos:start="217:30" pos:end="217:39"><expr pos:start="217:30" pos:end="217:39"><name pos:start="217:30" pos:end="217:39"><name pos:start="217:30" pos:end="217:32">ctx</name><operator pos:start="217:33" pos:end="217:33">.</operator><name pos:start="217:34" pos:end="217:39">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="233:9"><if pos:start="219:9" pos:end="233:9">if <condition pos:start="219:12" pos:end="219:40">(<expr pos:start="219:13" pos:end="219:39"><call pos:start="219:13" pos:end="219:39"><name pos:start="219:13" pos:end="219:30">is_indirect_opcode</name><argument_list pos:start="219:31" pos:end="219:39">(<argument pos:start="219:32" pos:end="219:38"><expr pos:start="219:32" pos:end="219:38"><name pos:start="219:32" pos:end="219:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="219:42" pos:end="233:9">{<block_content pos:start="221:13" pos:end="231:13">

            <expr_stmt pos:start="221:13" pos:end="221:39"><expr pos:start="221:13" pos:end="221:38"><name pos:start="221:13" pos:end="221:17">table</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <call pos:start="221:21" pos:end="221:38"><name pos:start="221:21" pos:end="221:29">ind_table</name><argument_list pos:start="221:30" pos:end="221:38">(<argument pos:start="221:31" pos:end="221:37"><expr pos:start="221:31" pos:end="221:37"><name pos:start="221:31" pos:end="221:37">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:46"><expr pos:start="223:13" pos:end="223:45"><name pos:start="223:13" pos:end="223:19">handler</name> <operator pos:start="223:21" pos:end="223:21">=</operator> <name pos:start="223:23" pos:end="223:45"><name pos:start="223:23" pos:end="223:27">table</name><index pos:start="223:28" pos:end="223:45">[<expr pos:start="223:29" pos:end="223:44"><call pos:start="223:29" pos:end="223:44"><name pos:start="223:29" pos:end="223:32">opc2</name><argument_list pos:start="223:33" pos:end="223:44">(<argument pos:start="223:34" pos:end="223:43"><expr pos:start="223:34" pos:end="223:43"><name pos:start="223:34" pos:end="223:43"><name pos:start="223:34" pos:end="223:36">ctx</name><operator pos:start="223:37" pos:end="223:37">.</operator><name pos:start="223:38" pos:end="223:43">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="231:13"><if pos:start="225:13" pos:end="231:13">if <condition pos:start="225:16" pos:end="225:44">(<expr pos:start="225:17" pos:end="225:43"><call pos:start="225:17" pos:end="225:43"><name pos:start="225:17" pos:end="225:34">is_indirect_opcode</name><argument_list pos:start="225:35" pos:end="225:43">(<argument pos:start="225:36" pos:end="225:42"><expr pos:start="225:36" pos:end="225:42"><name pos:start="225:36" pos:end="225:42">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:46" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:50">

                <expr_stmt pos:start="227:17" pos:end="227:43"><expr pos:start="227:17" pos:end="227:42"><name pos:start="227:17" pos:end="227:21">table</name> <operator pos:start="227:23" pos:end="227:23">=</operator> <call pos:start="227:25" pos:end="227:42"><name pos:start="227:25" pos:end="227:33">ind_table</name><argument_list pos:start="227:34" pos:end="227:42">(<argument pos:start="227:35" pos:end="227:41"><expr pos:start="227:35" pos:end="227:41"><name pos:start="227:35" pos:end="227:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:50"><expr pos:start="229:17" pos:end="229:49"><name pos:start="229:17" pos:end="229:23">handler</name> <operator pos:start="229:25" pos:end="229:25">=</operator> <name pos:start="229:27" pos:end="229:49"><name pos:start="229:27" pos:end="229:31">table</name><index pos:start="229:32" pos:end="229:49">[<expr pos:start="229:33" pos:end="229:48"><call pos:start="229:33" pos:end="229:48"><name pos:start="229:33" pos:end="229:36">opc3</name><argument_list pos:start="229:37" pos:end="229:48">(<argument pos:start="229:38" pos:end="229:47"><expr pos:start="229:38" pos:end="229:47"><name pos:start="229:38" pos:end="229:47"><name pos:start="229:38" pos:end="229:40">ctx</name><operator pos:start="229:41" pos:end="229:41">.</operator><name pos:start="229:42" pos:end="229:47">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="235:9" pos:end="235:40">/* Is opcode *REALLY* valid ? */</comment>

        <if_stmt pos:start="237:9" pos:end="291:9"><if pos:start="237:9" pos:end="251:9">if <condition pos:start="237:12" pos:end="237:55">(<expr pos:start="237:13" pos:end="237:54"><call pos:start="237:13" pos:end="237:54"><name pos:start="237:13" pos:end="237:20">unlikely</name><argument_list pos:start="237:21" pos:end="237:54">(<argument pos:start="237:22" pos:end="237:53"><expr pos:start="237:22" pos:end="237:53"><name pos:start="237:22" pos:end="237:37"><name pos:start="237:22" pos:end="237:28">handler</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:37">handler</name></name> <operator pos:start="237:39" pos:end="237:40">==</operator> <operator pos:start="237:42" pos:end="237:42">&amp;</operator><name pos:start="237:43" pos:end="237:53">gen_invalid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:57" pos:end="251:9">{<block_content pos:start="239:13" pos:end="249:13">

            <if_stmt pos:start="239:13" pos:end="249:13"><if pos:start="239:13" pos:end="249:13">if <condition pos:start="239:16" pos:end="239:35">(<expr pos:start="239:17" pos:end="239:34"><call pos:start="239:17" pos:end="239:34"><name pos:start="239:17" pos:end="239:32">qemu_log_enabled</name><argument_list pos:start="239:33" pos:end="239:34">()</argument_list></call></expr>)</condition> <block pos:start="239:37" pos:end="249:13">{<block_content pos:start="241:17" pos:end="247:81">

                <expr_stmt pos:start="241:17" pos:end="247:81"><expr pos:start="241:17" pos:end="247:80"><call pos:start="241:17" pos:end="247:80"><name pos:start="241:17" pos:end="241:24">qemu_log</name><argument_list pos:start="241:25" pos:end="247:80">(<argument pos:start="241:26" pos:end="243:75"><expr pos:start="241:26" pos:end="243:75"><literal type="string" pos:start="241:26" pos:end="241:55">"invalid/unsupported opcode: "</literal>

                         <literal type="string" pos:start="243:26" pos:end="243:53">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="243:55" pos:end="243:67">TARGET_FMT_lx</name> <literal type="string" pos:start="243:69" pos:end="243:75">" %d\n"</literal></expr></argument>,

                         <argument pos:start="245:26" pos:end="245:41"><expr pos:start="245:26" pos:end="245:41"><call pos:start="245:26" pos:end="245:41"><name pos:start="245:26" pos:end="245:29">opc1</name><argument_list pos:start="245:30" pos:end="245:41">(<argument pos:start="245:31" pos:end="245:40"><expr pos:start="245:31" pos:end="245:40"><name pos:start="245:31" pos:end="245:40"><name pos:start="245:31" pos:end="245:33">ctx</name><operator pos:start="245:34" pos:end="245:34">.</operator><name pos:start="245:35" pos:end="245:40">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:44" pos:end="245:59"><expr pos:start="245:44" pos:end="245:59"><call pos:start="245:44" pos:end="245:59"><name pos:start="245:44" pos:end="245:47">opc2</name><argument_list pos:start="245:48" pos:end="245:59">(<argument pos:start="245:49" pos:end="245:58"><expr pos:start="245:49" pos:end="245:58"><name pos:start="245:49" pos:end="245:58"><name pos:start="245:49" pos:end="245:51">ctx</name><operator pos:start="245:52" pos:end="245:52">.</operator><name pos:start="245:53" pos:end="245:58">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="247:26" pos:end="247:41"><expr pos:start="247:26" pos:end="247:41"><call pos:start="247:26" pos:end="247:41"><name pos:start="247:26" pos:end="247:29">opc3</name><argument_list pos:start="247:30" pos:end="247:41">(<argument pos:start="247:31" pos:end="247:40"><expr pos:start="247:31" pos:end="247:40"><name pos:start="247:31" pos:end="247:40"><name pos:start="247:31" pos:end="247:33">ctx</name><operator pos:start="247:34" pos:end="247:34">.</operator><name pos:start="247:35" pos:end="247:40">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:44" pos:end="247:53"><expr pos:start="247:44" pos:end="247:53"><name pos:start="247:44" pos:end="247:53"><name pos:start="247:44" pos:end="247:46">ctx</name><operator pos:start="247:47" pos:end="247:47">.</operator><name pos:start="247:48" pos:end="247:53">opcode</name></name></expr></argument>, <argument pos:start="247:56" pos:end="247:66"><expr pos:start="247:56" pos:end="247:66"><name pos:start="247:56" pos:end="247:62"><name pos:start="247:56" pos:end="247:58">ctx</name><operator pos:start="247:59" pos:end="247:59">.</operator><name pos:start="247:60" pos:end="247:62">nip</name></name> <operator pos:start="247:64" pos:end="247:64">-</operator> <literal type="number" pos:start="247:66" pos:end="247:66">4</literal></expr></argument>, <argument pos:start="247:69" pos:end="247:79"><expr pos:start="247:69" pos:end="247:79"><operator pos:start="247:69" pos:end="247:69">(</operator><name pos:start="247:70" pos:end="247:72">int</name><operator pos:start="247:73" pos:end="247:73">)</operator><name pos:start="247:74" pos:end="247:79">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="251:11" pos:end="291:9">else <block pos:start="251:16" pos:end="291:9">{<block_content pos:start="253:13" pos:end="289:13">

            <decl_stmt pos:start="253:13" pos:end="253:27"><decl pos:start="253:13" pos:end="253:26"><type pos:start="253:13" pos:end="253:20"><name pos:start="253:13" pos:end="253:20">uint32_t</name></type> <name pos:start="253:22" pos:end="253:26">inval</name></decl>;</decl_stmt>



            <if_stmt pos:start="257:13" pos:end="265:13"><if pos:start="257:13" pos:end="261:13">if <condition pos:start="257:16" pos:end="257:104">(<expr pos:start="257:17" pos:end="257:103"><call pos:start="257:17" pos:end="257:103"><name pos:start="257:17" pos:end="257:24">unlikely</name><argument_list pos:start="257:25" pos:end="257:103">(<argument pos:start="257:26" pos:end="257:102"><expr pos:start="257:26" pos:end="257:102"><name pos:start="257:26" pos:end="257:38"><name pos:start="257:26" pos:end="257:32">handler</name><operator pos:start="257:33" pos:end="257:34">-&gt;</operator><name pos:start="257:35" pos:end="257:38">type</name></name> <operator pos:start="257:40" pos:end="257:40">&amp;</operator> <operator pos:start="257:42" pos:end="257:42">(</operator><name pos:start="257:43" pos:end="257:49">PPC_SPE</name> <operator pos:start="257:51" pos:end="257:51">|</operator> <name pos:start="257:53" pos:end="257:66">PPC_SPE_SINGLE</name> <operator pos:start="257:68" pos:end="257:68">|</operator> <name pos:start="257:70" pos:end="257:83">PPC_SPE_DOUBLE</name><operator pos:start="257:84" pos:end="257:84">)</operator> <operator pos:start="257:86" pos:end="257:87">&amp;&amp;</operator> <call pos:start="257:89" pos:end="257:102"><name pos:start="257:89" pos:end="257:90">Rc</name><argument_list pos:start="257:91" pos:end="257:102">(<argument pos:start="257:92" pos:end="257:101"><expr pos:start="257:92" pos:end="257:101"><name pos:start="257:92" pos:end="257:101"><name pos:start="257:92" pos:end="257:94">ctx</name><operator pos:start="257:95" pos:end="257:95">.</operator><name pos:start="257:96" pos:end="257:101">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="257:106" pos:end="261:13">{<block_content pos:start="259:17" pos:end="259:40">

                <expr_stmt pos:start="259:17" pos:end="259:40"><expr pos:start="259:17" pos:end="259:39"><name pos:start="259:17" pos:end="259:21">inval</name> <operator pos:start="259:23" pos:end="259:23">=</operator> <name pos:start="259:25" pos:end="259:39"><name pos:start="259:25" pos:end="259:31">handler</name><operator pos:start="259:32" pos:end="259:33">-&gt;</operator><name pos:start="259:34" pos:end="259:39">inval2</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="261:15" pos:end="265:13">else <block pos:start="261:20" pos:end="265:13">{<block_content pos:start="263:17" pos:end="263:40">

                <expr_stmt pos:start="263:17" pos:end="263:40"><expr pos:start="263:17" pos:end="263:39"><name pos:start="263:17" pos:end="263:21">inval</name> <operator pos:start="263:23" pos:end="263:23">=</operator> <name pos:start="263:25" pos:end="263:39"><name pos:start="263:25" pos:end="263:31">handler</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:39">inval1</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="269:13" pos:end="289:13"><if pos:start="269:13" pos:end="289:13">if <condition pos:start="269:16" pos:end="269:52">(<expr pos:start="269:17" pos:end="269:51"><call pos:start="269:17" pos:end="269:51"><name pos:start="269:17" pos:end="269:24">unlikely</name><argument_list pos:start="269:25" pos:end="269:51">(<argument pos:start="269:26" pos:end="269:50"><expr pos:start="269:26" pos:end="269:50"><operator pos:start="269:26" pos:end="269:26">(</operator><name pos:start="269:27" pos:end="269:36"><name pos:start="269:27" pos:end="269:29">ctx</name><operator pos:start="269:30" pos:end="269:30">.</operator><name pos:start="269:31" pos:end="269:36">opcode</name></name> <operator pos:start="269:38" pos:end="269:38">&amp;</operator> <name pos:start="269:40" pos:end="269:44">inval</name><operator pos:start="269:45" pos:end="269:45">)</operator> <operator pos:start="269:47" pos:end="269:48">!=</operator> <literal type="number" pos:start="269:50" pos:end="269:50">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:54" pos:end="289:13">{<block_content pos:start="271:17" pos:end="287:22">

                <if_stmt pos:start="271:17" pos:end="283:17"><if pos:start="271:17" pos:end="283:17">if <condition pos:start="271:20" pos:end="271:39">(<expr pos:start="271:21" pos:end="271:38"><call pos:start="271:21" pos:end="271:38"><name pos:start="271:21" pos:end="271:36">qemu_log_enabled</name><argument_list pos:start="271:37" pos:end="271:38">()</argument_list></call></expr>)</condition> <block pos:start="271:41" pos:end="283:17">{<block_content pos:start="273:21" pos:end="281:54">

                    <expr_stmt pos:start="273:21" pos:end="281:54"><expr pos:start="273:21" pos:end="281:53"><call pos:start="273:21" pos:end="281:53"><name pos:start="273:21" pos:end="273:28">qemu_log</name><argument_list pos:start="273:29" pos:end="281:53">(<argument pos:start="273:30" pos:end="275:76"><expr pos:start="273:30" pos:end="275:76"><literal type="string" pos:start="273:30" pos:end="273:62">"invalid bits: %08x for opcode: "</literal>

                             <literal type="string" pos:start="275:30" pos:end="275:57">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="275:59" pos:end="275:71">TARGET_FMT_lx</name> <literal type="string" pos:start="275:73" pos:end="275:76">"\n"</literal></expr></argument>,

                             <argument pos:start="277:30" pos:end="277:47"><expr pos:start="277:30" pos:end="277:47"><name pos:start="277:30" pos:end="277:39"><name pos:start="277:30" pos:end="277:32">ctx</name><operator pos:start="277:33" pos:end="277:33">.</operator><name pos:start="277:34" pos:end="277:39">opcode</name></name> <operator pos:start="277:41" pos:end="277:41">&amp;</operator> <name pos:start="277:43" pos:end="277:47">inval</name></expr></argument>, <argument pos:start="277:50" pos:end="277:65"><expr pos:start="277:50" pos:end="277:65"><call pos:start="277:50" pos:end="277:65"><name pos:start="277:50" pos:end="277:53">opc1</name><argument_list pos:start="277:54" pos:end="277:65">(<argument pos:start="277:55" pos:end="277:64"><expr pos:start="277:55" pos:end="277:64"><name pos:start="277:55" pos:end="277:64"><name pos:start="277:55" pos:end="277:57">ctx</name><operator pos:start="277:58" pos:end="277:58">.</operator><name pos:start="277:59" pos:end="277:64">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="279:30" pos:end="279:45"><expr pos:start="279:30" pos:end="279:45"><call pos:start="279:30" pos:end="279:45"><name pos:start="279:30" pos:end="279:33">opc2</name><argument_list pos:start="279:34" pos:end="279:45">(<argument pos:start="279:35" pos:end="279:44"><expr pos:start="279:35" pos:end="279:44"><name pos:start="279:35" pos:end="279:44"><name pos:start="279:35" pos:end="279:37">ctx</name><operator pos:start="279:38" pos:end="279:38">.</operator><name pos:start="279:39" pos:end="279:44">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="279:48" pos:end="279:63"><expr pos:start="279:48" pos:end="279:63"><call pos:start="279:48" pos:end="279:63"><name pos:start="279:48" pos:end="279:51">opc3</name><argument_list pos:start="279:52" pos:end="279:63">(<argument pos:start="279:53" pos:end="279:62"><expr pos:start="279:53" pos:end="279:62"><name pos:start="279:53" pos:end="279:62"><name pos:start="279:53" pos:end="279:55">ctx</name><operator pos:start="279:56" pos:end="279:56">.</operator><name pos:start="279:57" pos:end="279:62">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="281:30" pos:end="281:39"><expr pos:start="281:30" pos:end="281:39"><name pos:start="281:30" pos:end="281:39"><name pos:start="281:30" pos:end="281:32">ctx</name><operator pos:start="281:33" pos:end="281:33">.</operator><name pos:start="281:34" pos:end="281:39">opcode</name></name></expr></argument>, <argument pos:start="281:42" pos:end="281:52"><expr pos:start="281:42" pos:end="281:52"><name pos:start="281:42" pos:end="281:48"><name pos:start="281:42" pos:end="281:44">ctx</name><operator pos:start="281:45" pos:end="281:45">.</operator><name pos:start="281:46" pos:end="281:48">nip</name></name> <operator pos:start="281:50" pos:end="281:50">-</operator> <literal type="number" pos:start="281:52" pos:end="281:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:68"><expr pos:start="285:17" pos:end="285:67"><call pos:start="285:17" pos:end="285:67"><name pos:start="285:17" pos:end="285:35">gen_inval_exception</name><argument_list pos:start="285:36" pos:end="285:67">(<argument pos:start="285:37" pos:end="285:40"><expr pos:start="285:37" pos:end="285:40"><name pos:start="285:37" pos:end="285:40">ctxp</name></expr></argument>, <argument pos:start="285:43" pos:end="285:66"><expr pos:start="285:43" pos:end="285:66"><name pos:start="285:43" pos:end="285:66">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="287:17" pos:end="287:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="296:0"><expr pos:start="293:9" pos:end="293:35"><operator pos:start="293:9" pos:end="293:9">(</operator><operator pos:start="293:10" pos:end="293:10">*</operator><operator pos:start="293:11" pos:end="293:11">(</operator><name pos:start="293:12" pos:end="293:27"><name pos:start="293:12" pos:end="293:18">handler</name><operator pos:start="293:19" pos:end="293:20">-&gt;</operator><name pos:start="293:21" pos:end="293:27">handler</name></name><operator pos:start="293:28" pos:end="293:28">)</operator><operator pos:start="293:29" pos:end="293:29">)</operator><operator pos:start="293:30" pos:end="293:30">(</operator><operator pos:start="293:31" pos:end="293:31">&amp;</operator><name pos:start="293:32" pos:end="293:34">ctx</name><operator pos:start="293:35" pos:end="293:35">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="295:1" pos:end="295:30">#<cpp:directive pos:start="295:2" pos:end="295:3">if</cpp:directive> <expr pos:start="295:5" pos:end="295:30"><call pos:start="295:5" pos:end="295:30"><name pos:start="295:5" pos:end="295:11">defined</name><argument_list pos:start="295:12" pos:end="295:30">(<argument pos:start="295:13" pos:end="295:29"><expr pos:start="295:13" pos:end="295:29"><name pos:start="295:13" pos:end="295:29">DO_PPC_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="297:9" pos:end="300:0"><expr pos:start="297:9" pos:end="297:24"><name pos:start="297:9" pos:end="297:22"><name pos:start="297:9" pos:end="297:15">handler</name><operator pos:start="297:16" pos:end="297:17">-&gt;</operator><name pos:start="297:18" pos:end="297:22">count</name></name><operator pos:start="297:23" pos:end="297:24">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="299:1" pos:end="299:6">#<cpp:directive pos:start="299:2" pos:end="299:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="301:9" pos:end="301:41">/* Check trace mode exceptions */</comment>

        <if_stmt pos:start="303:9" pos:end="331:9"><if pos:start="303:9" pos:end="315:9">if <condition pos:start="303:12" pos:end="311:59">(<expr pos:start="303:13" pos:end="311:58"><call pos:start="303:13" pos:end="311:58"><name pos:start="303:13" pos:end="303:20">unlikely</name><argument_list pos:start="303:21" pos:end="311:58">(<argument pos:start="303:22" pos:end="311:57"><expr pos:start="303:22" pos:end="311:57"><name pos:start="303:22" pos:end="303:43"><name pos:start="303:22" pos:end="303:24">ctx</name><operator pos:start="303:25" pos:end="303:25">.</operator><name pos:start="303:26" pos:end="303:43">singlestep_enabled</name></name> <operator pos:start="303:45" pos:end="303:45">&amp;</operator> <name pos:start="303:47" pos:end="303:61">CPU_SINGLE_STEP</name> <operator pos:start="303:63" pos:end="303:64">&amp;&amp;</operator>

                     <operator pos:start="305:22" pos:end="305:22">(</operator><name pos:start="305:23" pos:end="305:29"><name pos:start="305:23" pos:end="305:25">ctx</name><operator pos:start="305:26" pos:end="305:26">.</operator><name pos:start="305:27" pos:end="305:29">nip</name></name> <operator pos:start="305:31" pos:end="305:32">&lt;=</operator> <literal type="number" pos:start="305:34" pos:end="305:38">0x100</literal> <operator pos:start="305:40" pos:end="305:41">||</operator> <name pos:start="305:43" pos:end="305:49"><name pos:start="305:43" pos:end="305:45">ctx</name><operator pos:start="305:46" pos:end="305:46">.</operator><name pos:start="305:47" pos:end="305:49">nip</name></name> <operator pos:start="305:51" pos:end="305:51">&gt;</operator> <literal type="number" pos:start="305:53" pos:end="305:57">0xF00</literal><operator pos:start="305:58" pos:end="305:58">)</operator> <operator pos:start="305:60" pos:end="305:61">&amp;&amp;</operator>

                     <name pos:start="307:22" pos:end="307:34"><name pos:start="307:22" pos:end="307:24">ctx</name><operator pos:start="307:25" pos:end="307:25">.</operator><name pos:start="307:26" pos:end="307:34">exception</name></name> <operator pos:start="307:36" pos:end="307:37">!=</operator> <name pos:start="307:39" pos:end="307:53">POWERPC_SYSCALL</name> <operator pos:start="307:55" pos:end="307:56">&amp;&amp;</operator>

                     <name pos:start="309:22" pos:end="309:34"><name pos:start="309:22" pos:end="309:24">ctx</name><operator pos:start="309:25" pos:end="309:25">.</operator><name pos:start="309:26" pos:end="309:34">exception</name></name> <operator pos:start="309:36" pos:end="309:37">!=</operator> <name pos:start="309:39" pos:end="309:55">POWERPC_EXCP_TRAP</name> <operator pos:start="309:57" pos:end="309:58">&amp;&amp;</operator>

                     <name pos:start="311:22" pos:end="311:34"><name pos:start="311:22" pos:end="311:24">ctx</name><operator pos:start="311:25" pos:end="311:25">.</operator><name pos:start="311:26" pos:end="311:34">exception</name></name> <operator pos:start="311:36" pos:end="311:37">!=</operator> <name pos:start="311:39" pos:end="311:57">POWERPC_EXCP_BRANCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:61" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:52">

            <expr_stmt pos:start="313:13" pos:end="313:52"><expr pos:start="313:13" pos:end="313:51"><call pos:start="313:13" pos:end="313:51"><name pos:start="313:13" pos:end="313:25">gen_exception</name><argument_list pos:start="313:26" pos:end="313:51">(<argument pos:start="313:27" pos:end="313:30"><expr pos:start="313:27" pos:end="313:30"><name pos:start="313:27" pos:end="313:30">ctxp</name></expr></argument>, <argument pos:start="313:33" pos:end="313:50"><expr pos:start="313:33" pos:end="313:50"><name pos:start="313:33" pos:end="313:50">POWERPC_EXCP_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="315:11" pos:end="331:9">else if <condition pos:start="315:19" pos:end="321:52">(<expr pos:start="315:20" pos:end="321:51"><call pos:start="315:20" pos:end="321:51"><name pos:start="315:20" pos:end="315:27">unlikely</name><argument_list pos:start="315:28" pos:end="321:51">(<argument pos:start="315:29" pos:end="321:50"><expr pos:start="315:29" pos:end="321:50"><operator pos:start="315:29" pos:end="315:29">(</operator><operator pos:start="315:30" pos:end="315:30">(</operator><name pos:start="315:31" pos:end="315:37"><name pos:start="315:31" pos:end="315:33">ctx</name><operator pos:start="315:34" pos:end="315:34">.</operator><name pos:start="315:35" pos:end="315:37">nip</name></name> <operator pos:start="315:39" pos:end="315:39">&amp;</operator> <operator pos:start="315:41" pos:end="315:41">(</operator><name pos:start="315:42" pos:end="315:57">TARGET_PAGE_SIZE</name> <operator pos:start="315:59" pos:end="315:59">-</operator> <literal type="number" pos:start="315:61" pos:end="315:61">1</literal><operator pos:start="315:62" pos:end="315:62">)</operator><operator pos:start="315:63" pos:end="315:63">)</operator> <operator pos:start="315:65" pos:end="315:66">==</operator> <literal type="number" pos:start="315:68" pos:end="315:68">0</literal><operator pos:start="315:69" pos:end="315:69">)</operator> <operator pos:start="315:71" pos:end="315:72">||</operator>

                            <operator pos:start="317:29" pos:end="317:29">(</operator><name pos:start="317:30" pos:end="317:51"><name pos:start="317:30" pos:end="317:31">cs</name><operator pos:start="317:32" pos:end="317:33">-&gt;</operator><name pos:start="317:34" pos:end="317:51">singlestep_enabled</name></name><operator pos:start="317:52" pos:end="317:52">)</operator> <operator pos:start="317:54" pos:end="317:55">||</operator>

                            <name pos:start="319:29" pos:end="319:38">singlestep</name> <operator pos:start="319:40" pos:end="319:41">||</operator>

                            <name pos:start="321:29" pos:end="321:37">num_insns</name> <operator pos:start="321:39" pos:end="321:40">&gt;=</operator> <name pos:start="321:42" pos:end="321:50">max_insns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="321:54" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:18">

            <comment type="block" pos:start="323:13" pos:end="327:15">/* if we reach a page boundary or are single stepping, stop

             * generation

             */</comment>

            <break pos:start="329:13" pos:end="329:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="333:9" pos:end="343:9"><if pos:start="333:9" pos:end="343:9">if <condition pos:start="333:12" pos:end="333:35">(<expr pos:start="333:13" pos:end="333:34"><call pos:start="333:13" pos:end="333:34"><name pos:start="333:13" pos:end="333:32">tcg_check_temp_count</name><argument_list pos:start="333:33" pos:end="333:34">()</argument_list></call></expr>)</condition> <block pos:start="333:37" pos:end="343:9">{<block_content pos:start="335:13" pos:end="341:20">

            <expr_stmt pos:start="335:13" pos:end="339:32"><expr pos:start="335:13" pos:end="339:31"><call pos:start="335:13" pos:end="339:31"><name pos:start="335:13" pos:end="335:19">fprintf</name><argument_list pos:start="335:20" pos:end="339:31">(<argument pos:start="335:21" pos:end="335:26"><expr pos:start="335:21" pos:end="335:26"><name pos:start="335:21" pos:end="335:26">stderr</name></expr></argument>, <argument pos:start="335:29" pos:end="335:79"><expr pos:start="335:29" pos:end="335:79"><literal type="string" pos:start="335:29" pos:end="335:79">"Opcode %02x %02x %02x (%08x) leaked temporaries\n"</literal></expr></argument>,

                    <argument pos:start="337:21" pos:end="337:36"><expr pos:start="337:21" pos:end="337:36"><call pos:start="337:21" pos:end="337:36"><name pos:start="337:21" pos:end="337:24">opc1</name><argument_list pos:start="337:25" pos:end="337:36">(<argument pos:start="337:26" pos:end="337:35"><expr pos:start="337:26" pos:end="337:35"><name pos:start="337:26" pos:end="337:35"><name pos:start="337:26" pos:end="337:28">ctx</name><operator pos:start="337:29" pos:end="337:29">.</operator><name pos:start="337:30" pos:end="337:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:39" pos:end="337:54"><expr pos:start="337:39" pos:end="337:54"><call pos:start="337:39" pos:end="337:54"><name pos:start="337:39" pos:end="337:42">opc2</name><argument_list pos:start="337:43" pos:end="337:54">(<argument pos:start="337:44" pos:end="337:53"><expr pos:start="337:44" pos:end="337:53"><name pos:start="337:44" pos:end="337:53"><name pos:start="337:44" pos:end="337:46">ctx</name><operator pos:start="337:47" pos:end="337:47">.</operator><name pos:start="337:48" pos:end="337:53">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:57" pos:end="337:72"><expr pos:start="337:57" pos:end="337:72"><call pos:start="337:57" pos:end="337:72"><name pos:start="337:57" pos:end="337:60">opc3</name><argument_list pos:start="337:61" pos:end="337:72">(<argument pos:start="337:62" pos:end="337:71"><expr pos:start="337:62" pos:end="337:71"><name pos:start="337:62" pos:end="337:71"><name pos:start="337:62" pos:end="337:64">ctx</name><operator pos:start="337:65" pos:end="337:65">.</operator><name pos:start="337:66" pos:end="337:71">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="339:21" pos:end="339:30"><expr pos:start="339:21" pos:end="339:30"><name pos:start="339:21" pos:end="339:30"><name pos:start="339:21" pos:end="339:23">ctx</name><operator pos:start="339:24" pos:end="339:24">.</operator><name pos:start="339:25" pos:end="339:30">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:20"><expr pos:start="341:13" pos:end="341:19"><call pos:start="341:13" pos:end="341:19"><name pos:start="341:13" pos:end="341:16">exit</name><argument_list pos:start="341:17" pos:end="341:19">(<argument pos:start="341:18" pos:end="341:18"><expr pos:start="341:18" pos:end="341:18"><literal type="number" pos:start="341:18" pos:end="341:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="347:5" pos:end="349:21"><if pos:start="347:5" pos:end="349:21">if <condition pos:start="347:8" pos:end="347:32">(<expr pos:start="347:9" pos:end="347:31"><name pos:start="347:9" pos:end="347:18"><name pos:start="347:9" pos:end="347:10">tb</name><operator pos:start="347:11" pos:end="347:12">-&gt;</operator><name pos:start="347:13" pos:end="347:18">cflags</name></name> <operator pos:start="347:20" pos:end="347:20">&amp;</operator> <name pos:start="347:22" pos:end="347:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:21"><block_content pos:start="349:9" pos:end="349:21">

        <expr_stmt pos:start="349:9" pos:end="349:21"><expr pos:start="349:9" pos:end="349:20"><call pos:start="349:9" pos:end="349:20"><name pos:start="349:9" pos:end="349:18">gen_io_end</name><argument_list pos:start="349:19" pos:end="349:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="351:5" pos:end="367:5"><if pos:start="351:5" pos:end="355:5">if <condition pos:start="351:8" pos:end="351:43">(<expr pos:start="351:9" pos:end="351:42"><name pos:start="351:9" pos:end="351:21"><name pos:start="351:9" pos:end="351:11">ctx</name><operator pos:start="351:12" pos:end="351:12">.</operator><name pos:start="351:13" pos:end="351:21">exception</name></name> <operator pos:start="351:23" pos:end="351:24">==</operator> <name pos:start="351:26" pos:end="351:42">POWERPC_EXCP_NONE</name></expr>)</condition> <block pos:start="351:45" pos:end="355:5">{<block_content pos:start="353:9" pos:end="353:38">

        <expr_stmt pos:start="353:9" pos:end="353:38"><expr pos:start="353:9" pos:end="353:37"><call pos:start="353:9" pos:end="353:37"><name pos:start="353:9" pos:end="353:19">gen_goto_tb</name><argument_list pos:start="353:20" pos:end="353:37">(<argument pos:start="353:21" pos:end="353:24"><expr pos:start="353:21" pos:end="353:24"><operator pos:start="353:21" pos:end="353:21">&amp;</operator><name pos:start="353:22" pos:end="353:24">ctx</name></expr></argument>, <argument pos:start="353:27" pos:end="353:27"><expr pos:start="353:27" pos:end="353:27"><literal type="number" pos:start="353:27" pos:end="353:27">0</literal></expr></argument>, <argument pos:start="353:30" pos:end="353:36"><expr pos:start="353:30" pos:end="353:36"><name pos:start="353:30" pos:end="353:36"><name pos:start="353:30" pos:end="353:32">ctx</name><operator pos:start="353:33" pos:end="353:33">.</operator><name pos:start="353:34" pos:end="353:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="355:7" pos:end="367:5">else if <condition pos:start="355:15" pos:end="355:52">(<expr pos:start="355:16" pos:end="355:51"><name pos:start="355:16" pos:end="355:28"><name pos:start="355:16" pos:end="355:18">ctx</name><operator pos:start="355:19" pos:end="355:19">.</operator><name pos:start="355:20" pos:end="355:28">exception</name></name> <operator pos:start="355:30" pos:end="355:31">!=</operator> <name pos:start="355:33" pos:end="355:51">POWERPC_EXCP_BRANCH</name></expr>)</condition> <block pos:start="355:54" pos:end="367:5">{<block_content pos:start="357:9" pos:end="365:27">

        <if_stmt pos:start="357:9" pos:end="361:9"><if pos:start="357:9" pos:end="361:9">if <condition pos:start="357:12" pos:end="357:45">(<expr pos:start="357:13" pos:end="357:44"><call pos:start="357:13" pos:end="357:44"><name pos:start="357:13" pos:end="357:20">unlikely</name><argument_list pos:start="357:21" pos:end="357:44">(<argument pos:start="357:22" pos:end="357:43"><expr pos:start="357:22" pos:end="357:43"><name pos:start="357:22" pos:end="357:43"><name pos:start="357:22" pos:end="357:23">cs</name><operator pos:start="357:24" pos:end="357:25">-&gt;</operator><name pos:start="357:26" pos:end="357:43">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="357:47" pos:end="361:9">{<block_content pos:start="359:13" pos:end="359:38">

            <expr_stmt pos:start="359:13" pos:end="359:38"><expr pos:start="359:13" pos:end="359:37"><call pos:start="359:13" pos:end="359:37"><name pos:start="359:13" pos:end="359:31">gen_debug_exception</name><argument_list pos:start="359:32" pos:end="359:37">(<argument pos:start="359:33" pos:end="359:36"><expr pos:start="359:33" pos:end="359:36"><name pos:start="359:33" pos:end="359:36">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="363:9" pos:end="363:45">/* Generate the return instruction */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:27"><expr pos:start="365:9" pos:end="365:26"><call pos:start="365:9" pos:end="365:26"><name pos:start="365:9" pos:end="365:23">tcg_gen_exit_tb</name><argument_list pos:start="365:24" pos:end="365:26">(<argument pos:start="365:25" pos:end="365:25"><expr pos:start="365:25" pos:end="365:25"><literal type="number" pos:start="365:25" pos:end="365:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:30"><expr pos:start="369:5" pos:end="369:29"><call pos:start="369:5" pos:end="369:29"><name pos:start="369:5" pos:end="369:14">gen_tb_end</name><argument_list pos:start="369:15" pos:end="369:29">(<argument pos:start="369:16" pos:end="369:17"><expr pos:start="369:16" pos:end="369:17"><name pos:start="369:16" pos:end="369:17">tb</name></expr></argument>, <argument pos:start="369:20" pos:end="369:28"><expr pos:start="369:20" pos:end="369:28"><name pos:start="369:20" pos:end="369:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:40"><expr pos:start="371:5" pos:end="371:39"><operator pos:start="371:5" pos:end="371:5">*</operator><name pos:start="371:6" pos:end="371:24"><name pos:start="371:6" pos:end="371:12">tcg_ctx</name><operator pos:start="371:13" pos:end="371:13">.</operator><name pos:start="371:14" pos:end="371:24">gen_opc_ptr</name></name> <operator pos:start="371:26" pos:end="371:26">=</operator> <name pos:start="371:28" pos:end="371:39">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="373:5" pos:end="392:0"><if pos:start="373:5" pos:end="383:5">if <condition pos:start="373:8" pos:end="373:28">(<expr pos:start="373:9" pos:end="373:27"><call pos:start="373:9" pos:end="373:27"><name pos:start="373:9" pos:end="373:16">unlikely</name><argument_list pos:start="373:17" pos:end="373:27">(<argument pos:start="373:18" pos:end="373:26"><expr pos:start="373:18" pos:end="373:26"><name pos:start="373:18" pos:end="373:26">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="373:30" pos:end="383:5">{<block_content pos:start="375:9" pos:end="381:50">

        <expr_stmt pos:start="375:9" pos:end="375:54"><expr pos:start="375:9" pos:end="375:53"><name pos:start="375:9" pos:end="375:9">j</name> <operator pos:start="375:11" pos:end="375:11">=</operator> <name pos:start="375:13" pos:end="375:31"><name pos:start="375:13" pos:end="375:19">tcg_ctx</name><operator pos:start="375:20" pos:end="375:20">.</operator><name pos:start="375:21" pos:end="375:31">gen_opc_ptr</name></name> <operator pos:start="375:33" pos:end="375:33">-</operator> <name pos:start="375:35" pos:end="375:53"><name pos:start="375:35" pos:end="375:41">tcg_ctx</name><operator pos:start="375:42" pos:end="375:42">.</operator><name pos:start="375:43" pos:end="375:53">gen_opc_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:13"><expr pos:start="377:9" pos:end="377:12"><name pos:start="377:9" pos:end="377:10">lj</name><operator pos:start="377:11" pos:end="377:12">++</operator></expr>;</expr_stmt>

        <while pos:start="379:9" pos:end="381:50">while <condition pos:start="379:15" pos:end="379:23">(<expr pos:start="379:16" pos:end="379:22"><name pos:start="379:16" pos:end="379:17">lj</name> <operator pos:start="379:19" pos:end="379:20">&lt;=</operator> <name pos:start="379:22" pos:end="379:22">j</name></expr>)</condition><block type="pseudo" pos:start="381:13" pos:end="381:50"><block_content pos:start="381:13" pos:end="381:50">

            <expr_stmt pos:start="381:13" pos:end="381:50"><expr pos:start="381:13" pos:end="381:49"><name pos:start="381:13" pos:end="381:45"><name pos:start="381:13" pos:end="381:19">tcg_ctx</name><operator pos:start="381:20" pos:end="381:20">.</operator><name pos:start="381:21" pos:end="381:39">gen_opc_instr_start</name><index pos:start="381:40" pos:end="381:45">[<expr pos:start="381:41" pos:end="381:44"><name pos:start="381:41" pos:end="381:42">lj</name><operator pos:start="381:43" pos:end="381:44">++</operator></expr>]</index></name> <operator pos:start="381:47" pos:end="381:47">=</operator> <literal type="number" pos:start="381:49" pos:end="381:49">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="383:7" pos:end="392:0">else <block pos:start="383:12" pos:end="392:0">{<block_content pos:start="385:9" pos:end="387:31">

        <expr_stmt pos:start="385:9" pos:end="385:38"><expr pos:start="385:9" pos:end="385:37"><name pos:start="385:9" pos:end="385:16"><name pos:start="385:9" pos:end="385:10">tb</name><operator pos:start="385:11" pos:end="385:12">-&gt;</operator><name pos:start="385:13" pos:end="385:16">size</name></name> <operator pos:start="385:18" pos:end="385:18">=</operator> <name pos:start="385:20" pos:end="385:26"><name pos:start="385:20" pos:end="385:22">ctx</name><operator pos:start="385:23" pos:end="385:23">.</operator><name pos:start="385:24" pos:end="385:26">nip</name></name> <operator pos:start="385:28" pos:end="385:28">-</operator> <name pos:start="385:30" pos:end="385:37">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:31"><expr pos:start="387:9" pos:end="387:30"><name pos:start="387:9" pos:end="387:18"><name pos:start="387:9" pos:end="387:10">tb</name><operator pos:start="387:11" pos:end="387:12">-&gt;</operator><name pos:start="387:13" pos:end="387:18">icount</name></name> <operator pos:start="387:20" pos:end="387:20">=</operator> <name pos:start="387:22" pos:end="387:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="391:1" pos:end="391:24">#<cpp:directive pos:start="391:2" pos:end="391:3">if</cpp:directive> <expr pos:start="391:5" pos:end="391:24"><call pos:start="391:5" pos:end="391:24"><name pos:start="391:5" pos:end="391:11">defined</name><argument_list pos:start="391:12" pos:end="391:24">(<argument pos:start="391:13" pos:end="391:23"><expr pos:start="391:13" pos:end="391:23"><name pos:start="391:13" pos:end="391:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="393:5" pos:end="410:0"><if pos:start="393:5" pos:end="410:0">if <condition pos:start="393:8" pos:end="393:46">(<expr pos:start="393:9" pos:end="393:45"><call pos:start="393:9" pos:end="393:45"><name pos:start="393:9" pos:end="393:26">qemu_loglevel_mask</name><argument_list pos:start="393:27" pos:end="393:45">(<argument pos:start="393:28" pos:end="393:44"><expr pos:start="393:28" pos:end="393:44"><name pos:start="393:28" pos:end="393:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="393:48" pos:end="410:0">{<block_content pos:start="395:9" pos:end="405:23">

        <decl_stmt pos:start="395:9" pos:end="395:18"><decl pos:start="395:9" pos:end="395:17"><type pos:start="395:9" pos:end="395:11"><name pos:start="395:9" pos:end="395:11">int</name></type> <name pos:start="395:13" pos:end="395:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:30"><expr pos:start="397:9" pos:end="397:29"><name pos:start="397:9" pos:end="397:13">flags</name> <operator pos:start="397:15" pos:end="397:15">=</operator> <name pos:start="397:17" pos:end="397:29"><name pos:start="397:17" pos:end="397:19">env</name><operator pos:start="397:20" pos:end="397:21">-&gt;</operator><name pos:start="397:22" pos:end="397:29">bfd_mach</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:35"><expr pos:start="399:9" pos:end="399:34"><name pos:start="399:9" pos:end="399:13">flags</name> <operator pos:start="399:15" pos:end="399:16">|=</operator> <name pos:start="399:18" pos:end="399:28"><name pos:start="399:18" pos:end="399:20">ctx</name><operator pos:start="399:21" pos:end="399:21">.</operator><name pos:start="399:22" pos:end="399:28">le_mode</name></name> <operator pos:start="399:30" pos:end="399:31">&lt;&lt;</operator> <literal type="number" pos:start="399:33" pos:end="399:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:54"><expr pos:start="401:9" pos:end="401:53"><call pos:start="401:9" pos:end="401:53"><name pos:start="401:9" pos:end="401:16">qemu_log</name><argument_list pos:start="401:17" pos:end="401:53">(<argument pos:start="401:18" pos:end="401:27"><expr pos:start="401:18" pos:end="401:27"><literal type="string" pos:start="401:18" pos:end="401:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="401:30" pos:end="401:52"><expr pos:start="401:30" pos:end="401:52"><call pos:start="401:30" pos:end="401:52"><name pos:start="401:30" pos:end="401:42">lookup_symbol</name><argument_list pos:start="401:43" pos:end="401:52">(<argument pos:start="401:44" pos:end="401:51"><expr pos:start="401:44" pos:end="401:51"><name pos:start="401:44" pos:end="401:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:67"><expr pos:start="403:9" pos:end="403:66"><call pos:start="403:9" pos:end="403:66"><name pos:start="403:9" pos:end="403:24">log_target_disas</name><argument_list pos:start="403:25" pos:end="403:66">(<argument pos:start="403:26" pos:end="403:28"><expr pos:start="403:26" pos:end="403:28"><name pos:start="403:26" pos:end="403:28">env</name></expr></argument>, <argument pos:start="403:31" pos:end="403:38"><expr pos:start="403:31" pos:end="403:38"><name pos:start="403:31" pos:end="403:38">pc_start</name></expr></argument>, <argument pos:start="403:41" pos:end="403:58"><expr pos:start="403:41" pos:end="403:58"><name pos:start="403:41" pos:end="403:47"><name pos:start="403:41" pos:end="403:43">ctx</name><operator pos:start="403:44" pos:end="403:44">.</operator><name pos:start="403:45" pos:end="403:47">nip</name></name> <operator pos:start="403:49" pos:end="403:49">-</operator> <name pos:start="403:51" pos:end="403:58">pc_start</name></expr></argument>, <argument pos:start="403:61" pos:end="403:65"><expr pos:start="403:61" pos:end="403:65"><name pos:start="403:61" pos:end="403:65">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="405:9" pos:end="405:23"><expr pos:start="405:9" pos:end="405:22"><call pos:start="405:9" pos:end="405:22"><name pos:start="405:9" pos:end="405:16">qemu_log</name><argument_list pos:start="405:17" pos:end="405:22">(<argument pos:start="405:18" pos:end="405:21"><expr pos:start="405:18" pos:end="405:21"><literal type="string" pos:start="405:18" pos:end="405:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="409:1" pos:end="409:6">#<cpp:directive pos:start="409:2" pos:end="409:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
