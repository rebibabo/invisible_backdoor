<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9990.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">rm_read_packet</name><parameter_list pos:start="1:26" pos:end="1:60">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">AVPacket</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">RMDemuxContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:22">rm</name> <init pos:start="5:24" pos:end="5:37">= <expr pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">len</name></decl>, <decl pos:start="9:17" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:19">res</name></decl>, <decl pos:start="9:22" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:24">seq</name> <init pos:start="9:26" pos:end="9:28">= <expr pos:start="9:28" pos:end="9:28"><literal type="number" pos:start="9:28" pos:end="9:28">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:21">timestamp</name></decl>, <decl pos:start="11:24" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:24" pos:end="11:26">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">flags</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="95:5">for <control pos:start="17:9" pos:end="17:12">(<init pos:start="17:10" pos:end="17:10">;</init><condition pos:start="17:11" pos:end="17:11">;</condition><incr/>)</control> <block pos:start="17:14" pos:end="95:5">{<block_content pos:start="19:9" pos:end="93:18">

        <if_stmt pos:start="19:9" pos:end="81:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:14">rm</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:29">audio_pkt_cnt</name></name></expr>)</condition> <block pos:start="19:32" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:22">

            <comment type="line" pos:start="21:13" pos:end="21:65">// If there are queued audio packet return them first</comment>

            <expr_stmt pos:start="23:13" pos:end="23:50"><expr pos:start="23:13" pos:end="23:49"><name pos:start="23:13" pos:end="23:14">st</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:49"><name pos:start="23:18" pos:end="23:18">s</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:27">streams</name><index pos:start="23:28" pos:end="23:49">[<expr pos:start="23:29" pos:end="23:48"><name pos:start="23:29" pos:end="23:48"><name pos:start="23:29" pos:end="23:30">rm</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:48">audio_stream_num</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:67"><expr pos:start="25:13" pos:end="25:66"><call pos:start="25:13" pos:end="25:66"><name pos:start="25:13" pos:end="25:32">ff_rm_retrieve_cache</name><argument_list pos:start="25:33" pos:end="25:66">(<argument pos:start="25:34" pos:end="25:34"><expr pos:start="25:34" pos:end="25:34"><name pos:start="25:34" pos:end="25:34">s</name></expr></argument>, <argument pos:start="25:37" pos:end="25:41"><expr pos:start="25:37" pos:end="25:41"><name pos:start="25:37" pos:end="25:41"><name pos:start="25:37" pos:end="25:37">s</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:41">pb</name></name></expr></argument>, <argument pos:start="25:44" pos:end="25:45"><expr pos:start="25:44" pos:end="25:45"><name pos:start="25:44" pos:end="25:45">st</name></expr></argument>, <argument pos:start="25:48" pos:end="25:60"><expr pos:start="25:48" pos:end="25:60"><name pos:start="25:48" pos:end="25:60"><name pos:start="25:48" pos:end="25:49">st</name><operator pos:start="25:50" pos:end="25:51">-&gt;</operator><name pos:start="25:52" pos:end="25:60">priv_data</name></name></expr></argument>, <argument pos:start="25:63" pos:end="25:65"><expr pos:start="25:63" pos:end="25:65"><name pos:start="25:63" pos:end="25:65">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:22"><expr pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:17">flags</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="81:9">else <block pos:start="29:16" pos:end="81:9">{<block_content pos:start="31:13" pos:end="79:25">

            <if_stmt pos:start="31:13" pos:end="59:13"><if pos:start="31:13" pos:end="51:13">if <condition pos:start="31:16" pos:end="31:31">(<expr pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:18">rm</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:30">old_format</name></name></expr>)</condition> <block pos:start="31:33" pos:end="51:13">{<block_content pos:start="33:17" pos:end="49:39">

                <decl_stmt pos:start="33:17" pos:end="33:30"><decl pos:start="33:17" pos:end="33:29"><type pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:24">RMStream</name> <modifier pos:start="33:26" pos:end="33:26">*</modifier></type><name pos:start="33:27" pos:end="33:29">ast</name></decl>;</decl_stmt>



                <expr_stmt pos:start="37:17" pos:end="37:35"><expr pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:18">st</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">streams</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><literal type="number" pos:start="37:33" pos:end="37:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:36"><expr pos:start="39:17" pos:end="39:35"><name pos:start="39:17" pos:end="39:19">ast</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:35"><name pos:start="39:23" pos:end="39:24">st</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:35">priv_data</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:43"><expr pos:start="41:17" pos:end="41:42"><name pos:start="41:17" pos:end="41:25">timestamp</name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:42">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="45:65"><expr pos:start="43:17" pos:end="45:64"><name pos:start="43:17" pos:end="43:19">len</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <ternary pos:start="43:23" pos:end="45:64"><condition pos:start="43:23" pos:end="43:45"><expr pos:start="43:23" pos:end="43:43"><operator pos:start="43:23" pos:end="43:23">!</operator><name pos:start="43:24" pos:end="43:43"><name pos:start="43:24" pos:end="43:26">ast</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:43">audio_framesize</name></name></expr> ?</condition><then pos:start="43:47" pos:end="43:61"> <expr pos:start="43:47" pos:end="43:61"><name pos:start="43:47" pos:end="43:61">RAW_PACKET_SIZE</name></expr> </then><else pos:start="43:63" pos:end="45:64">:

                    <expr pos:start="45:21" pos:end="45:64"><name pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:23">ast</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:40">coded_framesize</name></name> <operator pos:start="45:42" pos:end="45:42">*</operator> <name pos:start="45:44" pos:end="45:60"><name pos:start="45:44" pos:end="45:46">ast</name><operator pos:start="45:47" pos:end="45:48">-&gt;</operator><name pos:start="45:49" pos:end="45:60">sub_packet_h</name></name> <operator pos:start="45:62" pos:end="45:62">/</operator> <literal type="number" pos:start="45:64" pos:end="45:64">2</literal></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:45"><expr pos:start="47:17" pos:end="47:44"><name pos:start="47:17" pos:end="47:21">flags</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <ternary pos:start="47:25" pos:end="47:44"><condition pos:start="47:25" pos:end="47:38"><expr pos:start="47:25" pos:end="47:36"><operator pos:start="47:25" pos:end="47:25">(</operator><name pos:start="47:26" pos:end="47:28">seq</name><operator pos:start="47:29" pos:end="47:30">++</operator> <operator pos:start="47:32" pos:end="47:33">==</operator> <literal type="number" pos:start="47:35" pos:end="47:35">1</literal><operator pos:start="47:36" pos:end="47:36">)</operator></expr> ?</condition><then pos:start="47:40" pos:end="47:40"> <expr pos:start="47:40" pos:end="47:40"><literal type="number" pos:start="47:40" pos:end="47:40">2</literal></expr> </then><else pos:start="47:42" pos:end="47:44">: <expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:39"><expr pos:start="49:17" pos:end="49:38"><name pos:start="49:17" pos:end="49:19">pos</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:38"><name pos:start="49:23" pos:end="49:31">avio_tell</name><argument_list pos:start="49:32" pos:end="49:38">(<argument pos:start="49:33" pos:end="49:37"><expr pos:start="49:33" pos:end="49:37"><name pos:start="49:33" pos:end="49:37"><name pos:start="49:33" pos:end="49:33">s</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="59:13">else <block pos:start="51:20" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:39">

                <expr_stmt pos:start="53:17" pos:end="53:58"><expr pos:start="53:17" pos:end="53:57"><name pos:start="53:17" pos:end="53:19">len</name><operator pos:start="53:20" pos:end="53:20">=</operator><call pos:start="53:21" pos:end="53:57"><name pos:start="53:21" pos:end="53:24">sync</name><argument_list pos:start="53:25" pos:end="53:57">(<argument pos:start="53:26" pos:end="53:26"><expr pos:start="53:26" pos:end="53:26"><name pos:start="53:26" pos:end="53:26">s</name></expr></argument>, <argument pos:start="53:29" pos:end="53:38"><expr pos:start="53:29" pos:end="53:38"><operator pos:start="53:29" pos:end="53:29">&amp;</operator><name pos:start="53:30" pos:end="53:38">timestamp</name></expr></argument>, <argument pos:start="53:41" pos:end="53:46"><expr pos:start="53:41" pos:end="53:46"><operator pos:start="53:41" pos:end="53:41">&amp;</operator><name pos:start="53:42" pos:end="53:46">flags</name></expr></argument>, <argument pos:start="53:49" pos:end="53:50"><expr pos:start="53:49" pos:end="53:50"><operator pos:start="53:49" pos:end="53:49">&amp;</operator><name pos:start="53:50" pos:end="53:50">i</name></expr></argument>, <argument pos:start="53:53" pos:end="53:56"><expr pos:start="53:53" pos:end="53:56"><operator pos:start="53:53" pos:end="53:53">&amp;</operator><name pos:start="53:54" pos:end="53:56">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="55:17" pos:end="57:39"><if pos:start="55:17" pos:end="57:39">if <condition pos:start="55:20" pos:end="55:28">(<expr pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:23">len</name> <operator pos:start="55:25" pos:end="55:25">&gt;</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="57:39"><block_content pos:start="57:21" pos:end="57:39">

                    <expr_stmt pos:start="57:21" pos:end="57:39"><expr pos:start="57:21" pos:end="57:38"><name pos:start="57:21" pos:end="57:22">st</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:38"><name pos:start="57:26" pos:end="57:26">s</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:35">streams</name><index pos:start="57:36" pos:end="57:38">[<expr pos:start="57:37" pos:end="57:37"><name pos:start="57:37" pos:end="57:37">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="63:13" pos:end="65:36"><if pos:start="63:13" pos:end="65:36">if<condition pos:start="63:15" pos:end="63:43">(<expr pos:start="63:16" pos:end="63:42"><name pos:start="63:16" pos:end="63:18">len</name><operator pos:start="63:19" pos:end="63:19">&lt;</operator><literal type="number" pos:start="63:20" pos:end="63:20">0</literal> <operator pos:start="63:22" pos:end="63:23">||</operator> <name pos:start="63:25" pos:end="63:42"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:29">pb</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:42">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:36"><block_content pos:start="65:17" pos:end="65:36">

                <return pos:start="65:17" pos:end="65:36">return <expr pos:start="65:24" pos:end="65:35"><call pos:start="65:24" pos:end="65:35"><name pos:start="65:24" pos:end="65:30">AVERROR</name><argument_list pos:start="65:31" pos:end="65:35">(<argument pos:start="65:32" pos:end="65:34"><expr pos:start="65:32" pos:end="65:34"><name pos:start="65:32" pos:end="65:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="69:13" pos:end="71:62"><expr pos:start="69:13" pos:end="71:61"><name pos:start="69:13" pos:end="69:15">res</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="71:61"><name pos:start="69:19" pos:end="69:36">ff_rm_parse_packet</name> <argument_list pos:start="69:38" pos:end="71:61">(<argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">s</name></expr></argument>, <argument pos:start="69:42" pos:end="69:46"><expr pos:start="69:42" pos:end="69:46"><name pos:start="69:42" pos:end="69:46"><name pos:start="69:42" pos:end="69:42">s</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:46">pb</name></name></expr></argument>, <argument pos:start="69:49" pos:end="69:50"><expr pos:start="69:49" pos:end="69:50"><name pos:start="69:49" pos:end="69:50">st</name></expr></argument>, <argument pos:start="69:53" pos:end="69:65"><expr pos:start="69:53" pos:end="69:65"><name pos:start="69:53" pos:end="69:65"><name pos:start="69:53" pos:end="69:54">st</name><operator pos:start="69:55" pos:end="69:56">-&gt;</operator><name pos:start="69:57" pos:end="69:65">priv_data</name></name></expr></argument>, <argument pos:start="69:68" pos:end="69:70"><expr pos:start="69:68" pos:end="69:70"><name pos:start="69:68" pos:end="69:70">len</name></expr></argument>, <argument pos:start="69:73" pos:end="69:75"><expr pos:start="69:73" pos:end="69:75"><name pos:start="69:73" pos:end="69:75">pkt</name></expr></argument>,

                                      <argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><operator pos:start="71:39" pos:end="71:39">&amp;</operator><name pos:start="71:40" pos:end="71:42">seq</name></expr></argument>, <argument pos:start="71:45" pos:end="71:49"><expr pos:start="71:45" pos:end="71:49"><name pos:start="71:45" pos:end="71:49">flags</name></expr></argument>, <argument pos:start="71:52" pos:end="71:60"><expr pos:start="71:52" pos:end="71:60"><name pos:start="71:52" pos:end="71:60">timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="75:79"><if pos:start="73:13" pos:end="75:79">if<condition pos:start="73:15" pos:end="73:44">(<expr pos:start="73:16" pos:end="73:43"><operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:21">flags</name><operator pos:start="73:22" pos:end="73:22">&amp;</operator><literal type="number" pos:start="73:23" pos:end="73:23">2</literal><operator pos:start="73:24" pos:end="73:24">)</operator> <operator pos:start="73:26" pos:end="73:27">&amp;&amp;</operator> <operator pos:start="73:29" pos:end="73:29">(</operator><name pos:start="73:30" pos:end="73:32">seq</name><operator pos:start="73:33" pos:end="73:33">&amp;</operator><literal type="number" pos:start="73:34" pos:end="73:37">0x7F</literal><operator pos:start="73:38" pos:end="73:38">)</operator> <operator pos:start="73:40" pos:end="73:41">==</operator> <literal type="number" pos:start="73:43" pos:end="73:43">1</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:79"><block_content pos:start="75:17" pos:end="75:79">

                <expr_stmt pos:start="75:17" pos:end="75:79"><expr pos:start="75:17" pos:end="75:78"><call pos:start="75:17" pos:end="75:78"><name pos:start="75:17" pos:end="75:34">av_add_index_entry</name><argument_list pos:start="75:35" pos:end="75:78">(<argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">st</name></expr></argument>, <argument pos:start="75:40" pos:end="75:42"><expr pos:start="75:40" pos:end="75:42"><name pos:start="75:40" pos:end="75:42">pos</name></expr></argument>, <argument pos:start="75:45" pos:end="75:53"><expr pos:start="75:45" pos:end="75:53"><name pos:start="75:45" pos:end="75:53">timestamp</name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><literal type="number" pos:start="75:56" pos:end="75:56">0</literal></expr></argument>, <argument pos:start="75:59" pos:end="75:59"><expr pos:start="75:59" pos:end="75:59"><literal type="number" pos:start="75:59" pos:end="75:59">0</literal></expr></argument>, <argument pos:start="75:62" pos:end="75:77"><expr pos:start="75:62" pos:end="75:77"><name pos:start="75:62" pos:end="75:77">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="77:13" pos:end="79:25"><if pos:start="77:13" pos:end="79:25">if <condition pos:start="77:16" pos:end="77:20">(<expr pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">res</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:25"><block_content pos:start="79:17" pos:end="79:25">

                <continue pos:start="79:17" pos:end="79:25">continue;</continue></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="85:9" pos:end="93:18"><if pos:start="85:9" pos:end="91:9">if<condition pos:start="85:11" pos:end="87:43">(  <expr pos:start="85:14" pos:end="87:42"><operator pos:start="85:14" pos:end="85:14">(</operator><name pos:start="85:15" pos:end="85:25"><name pos:start="85:15" pos:end="85:16">st</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:25">discard</name></name> <operator pos:start="85:27" pos:end="85:28">&gt;=</operator> <name pos:start="85:30" pos:end="85:45">AVDISCARD_NONKEY</name> <operator pos:start="85:47" pos:end="85:48">&amp;&amp;</operator> <operator pos:start="85:50" pos:end="85:50">!</operator><operator pos:start="85:51" pos:end="85:51">(</operator><name pos:start="85:52" pos:end="85:56">flags</name><operator pos:start="85:57" pos:end="85:57">&amp;</operator><literal type="number" pos:start="85:58" pos:end="85:58">2</literal><operator pos:start="85:59" pos:end="85:59">)</operator><operator pos:start="85:60" pos:end="85:60">)</operator>

           <operator pos:start="87:12" pos:end="87:13">||</operator> <name pos:start="87:15" pos:end="87:25"><name pos:start="87:15" pos:end="87:16">st</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:25">discard</name></name> <operator pos:start="87:27" pos:end="87:28">&gt;=</operator> <name pos:start="87:30" pos:end="87:42">AVDISCARD_ALL</name></expr>)</condition><block pos:start="87:44" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:32">

            <expr_stmt pos:start="89:13" pos:end="89:32"><expr pos:start="89:13" pos:end="89:31"><call pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:26">av_free_packet</name><argument_list pos:start="89:27" pos:end="89:31">(<argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="93:18">else<block type="pseudo" pos:start="93:13" pos:end="93:18"><block_content pos:start="93:13" pos:end="93:18">

            <break pos:start="93:13" pos:end="93:18">break;</break></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
