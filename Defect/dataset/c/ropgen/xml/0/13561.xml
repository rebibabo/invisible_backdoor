<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13561.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:24">void</name></type> <name pos:start="1:26" pos:end="1:45">nbd_read_reply_entry</name><parameter_list pos:start="1:46" pos:end="1:59">(<parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:52"><name pos:start="1:47" pos:end="1:50">void</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:58">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:28">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">NBDClientSession</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="71:5">for <control pos:start="13:9" pos:end="13:12">(<init pos:start="13:10" pos:end="13:10">;</init><condition pos:start="13:11" pos:end="13:11">;</condition><incr/>)</control> <block pos:start="13:14" pos:end="71:5">{<block_content pos:start="15:9" pos:end="69:31">

        <expr_stmt pos:start="15:9" pos:end="15:37"><expr pos:start="15:9" pos:end="15:36"><call pos:start="15:9" pos:end="15:36"><name pos:start="15:9" pos:end="15:14">assert</name><argument_list pos:start="15:15" pos:end="15:36">(<argument pos:start="15:16" pos:end="15:35"><expr pos:start="15:16" pos:end="15:35"><name pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:16">s</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:23">reply</name><operator pos:start="15:24" pos:end="15:24">.</operator><name pos:start="15:25" pos:end="15:30">handle</name></name> <operator pos:start="15:32" pos:end="15:33">==</operator> <literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:50"><name pos:start="17:15" pos:end="17:31">nbd_receive_reply</name><argument_list pos:start="17:32" pos:end="17:50">(<argument pos:start="17:33" pos:end="17:38"><expr pos:start="17:33" pos:end="17:38"><name pos:start="17:33" pos:end="17:38"><name pos:start="17:33" pos:end="17:33">s</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:38">ioc</name></name></expr></argument>, <argument pos:start="17:41" pos:end="17:49"><expr pos:start="17:41" pos:end="17:49"><operator pos:start="17:41" pos:end="17:41">&amp;</operator><name pos:start="17:42" pos:end="17:49"><name pos:start="17:42" pos:end="17:42">s</name><operator pos:start="17:43" pos:end="17:44">-&gt;</operator><name pos:start="17:45" pos:end="17:49">reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:20">(<expr pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:15">ret</name> <operator pos:start="19:17" pos:end="19:17">&lt;</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition> <block pos:start="19:22" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:18">

            <break pos:start="21:13" pos:end="21:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="27:9" pos:end="33:11">/* There's no need for a mutex on the receive side, because the

         * handler acts as a synchronization point and ensures that only

         * one coroutine is called until the reply finishes.

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:9">i</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:47"><name pos:start="35:13" pos:end="35:27">HANDLE_TO_INDEX</name><argument_list pos:start="35:28" pos:end="35:47">(<argument pos:start="35:29" pos:end="35:29"><expr pos:start="35:29" pos:end="35:29"><name pos:start="35:29" pos:end="35:29">s</name></expr></argument>, <argument pos:start="35:32" pos:end="35:46"><expr pos:start="35:32" pos:end="35:46"><name pos:start="35:32" pos:end="35:46"><name pos:start="35:32" pos:end="35:32">s</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:39">reply</name><operator pos:start="35:40" pos:end="35:40">.</operator><name pos:start="35:41" pos:end="35:46">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:59">(<expr pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:13">i</name> <operator pos:start="37:15" pos:end="37:16">&gt;=</operator> <name pos:start="37:18" pos:end="37:33">MAX_NBD_REQUESTS</name> <operator pos:start="37:35" pos:end="37:36">||</operator> <operator pos:start="37:38" pos:end="37:38">!</operator><name pos:start="37:39" pos:end="37:58"><name pos:start="37:39" pos:end="37:39">s</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:55">recv_coroutine</name><index pos:start="37:56" pos:end="37:58">[<expr pos:start="37:57" pos:end="37:57"><name pos:start="37:57" pos:end="37:57">i</name></expr>]</index></name></expr>)</condition> <block pos:start="37:61" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="45:9" pos:end="65:11">/* We're woken up by the recv_coroutine itself.  Note that there

         * is no race between yielding and reentering read_reply_co.  This

         * is because:

         *

         * - if recv_coroutine[i] runs on the same AioContext, it is only

         *   entered after we yield

         *

         * - if recv_coroutine[i] runs on a different AioContext, reentering

         *   read_reply_co happens through a bottom half, which can only

         *   run after we yield.

         */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><call pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:19">aio_co_wake</name><argument_list pos:start="67:20" pos:end="67:41">(<argument pos:start="67:21" pos:end="67:40"><expr pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:37">recv_coroutine</name><index pos:start="67:38" pos:end="67:40">[<expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><call pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:28">qemu_coroutine_yield</name><argument_list pos:start="69:29" pos:end="69:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:20">read_reply_co</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:27">NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
