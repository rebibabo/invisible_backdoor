<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16906.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">cirrus_init_common</name><parameter_list pos:start="1:31" pos:end="1:77">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:45">CirrusVGAState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type> <name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:64">device_id</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:76"><decl pos:start="1:67" pos:end="1:76"><type pos:start="1:67" pos:end="1:76"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:76">is_pci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:77">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:21">inited</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="61:5"><if pos:start="11:5" pos:end="61:5">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:15">inited</name></expr>)</condition> <block pos:start="11:18" pos:end="61:5">{<block_content pos:start="13:9" pos:end="59:44">

        <expr_stmt pos:start="13:9" pos:end="13:19"><expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:14">inited</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <literal type="number" pos:start="13:18" pos:end="13:18">1</literal></expr>;</expr_stmt>

        <for pos:start="15:9" pos:end="17:51">for<control pos:start="15:12" pos:end="15:31">(<init pos:start="15:13" pos:end="15:18"><expr pos:start="15:13" pos:end="15:17"><name pos:start="15:13" pos:end="15:13">i</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>;</init><condition pos:start="15:19" pos:end="15:26"><expr pos:start="15:19" pos:end="15:25"><name pos:start="15:19" pos:end="15:19">i</name> <operator pos:start="15:21" pos:end="15:21">&lt;</operator> <literal type="number" pos:start="15:23" pos:end="15:25">256</literal></expr>;</condition> <incr pos:start="15:28" pos:end="15:30"><expr pos:start="15:28" pos:end="15:30"><name pos:start="15:28" pos:end="15:28">i</name><operator pos:start="15:29" pos:end="15:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="17:13" pos:end="17:51"><block_content pos:start="17:13" pos:end="17:51">

            <expr_stmt pos:start="17:13" pos:end="17:51"><expr pos:start="17:13" pos:end="17:50"><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:24">rop_to_index</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><name pos:start="17:26" pos:end="17:26">i</name></expr>]</index></name> <operator pos:start="17:29" pos:end="17:29">=</operator> <name pos:start="17:31" pos:end="17:50">CIRRUS_ROP_NOP_INDEX</name></expr>;</expr_stmt></block_content></block></for> <comment type="block" pos:start="17:53" pos:end="17:65">/* nop rop */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:20">rop_to_index</name><index pos:start="19:21" pos:end="19:34">[<expr pos:start="19:22" pos:end="19:33"><name pos:start="19:22" pos:end="19:33">CIRRUS_ROP_0</name></expr>]</index></name> <operator pos:start="19:36" pos:end="19:36">=</operator> <literal type="number" pos:start="19:38" pos:end="19:38">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:20">rop_to_index</name><index pos:start="21:21" pos:end="21:44">[<expr pos:start="21:22" pos:end="21:43"><name pos:start="21:22" pos:end="21:43">CIRRUS_ROP_SRC_AND_DST</name></expr>]</index></name> <operator pos:start="21:46" pos:end="21:46">=</operator> <literal type="number" pos:start="21:48" pos:end="21:48">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:20">rop_to_index</name><index pos:start="23:21" pos:end="23:36">[<expr pos:start="23:22" pos:end="23:35"><name pos:start="23:22" pos:end="23:35">CIRRUS_ROP_NOP</name></expr>]</index></name> <operator pos:start="23:38" pos:end="23:38">=</operator> <literal type="number" pos:start="23:40" pos:end="23:40">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:52"><expr pos:start="25:9" pos:end="25:51"><name pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:20">rop_to_index</name><index pos:start="25:21" pos:end="25:47">[<expr pos:start="25:22" pos:end="25:46"><name pos:start="25:22" pos:end="25:46">CIRRUS_ROP_SRC_AND_NOTDST</name></expr>]</index></name> <operator pos:start="25:49" pos:end="25:49">=</operator> <literal type="number" pos:start="25:51" pos:end="25:51">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:20">rop_to_index</name><index pos:start="27:21" pos:end="27:39">[<expr pos:start="27:22" pos:end="27:38"><name pos:start="27:22" pos:end="27:38">CIRRUS_ROP_NOTDST</name></expr>]</index></name> <operator pos:start="27:41" pos:end="27:41">=</operator> <literal type="number" pos:start="27:43" pos:end="27:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:20">rop_to_index</name><index pos:start="29:21" pos:end="29:36">[<expr pos:start="29:22" pos:end="29:35"><name pos:start="29:22" pos:end="29:35">CIRRUS_ROP_SRC</name></expr>]</index></name> <operator pos:start="29:38" pos:end="29:38">=</operator> <literal type="number" pos:start="29:40" pos:end="29:40">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:20">rop_to_index</name><index pos:start="31:21" pos:end="31:34">[<expr pos:start="31:22" pos:end="31:33"><name pos:start="31:22" pos:end="31:33">CIRRUS_ROP_1</name></expr>]</index></name> <operator pos:start="31:36" pos:end="31:36">=</operator> <literal type="number" pos:start="31:38" pos:end="31:38">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:47"><name pos:start="33:9" pos:end="33:20">rop_to_index</name><index pos:start="33:21" pos:end="33:47">[<expr pos:start="33:22" pos:end="33:46"><name pos:start="33:22" pos:end="33:46">CIRRUS_ROP_NOTSRC_AND_DST</name></expr>]</index></name> <operator pos:start="33:49" pos:end="33:49">=</operator> <literal type="number" pos:start="33:51" pos:end="33:51">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:49"><expr pos:start="35:9" pos:end="35:48"><name pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:20">rop_to_index</name><index pos:start="35:21" pos:end="35:44">[<expr pos:start="35:22" pos:end="35:43"><name pos:start="35:22" pos:end="35:43">CIRRUS_ROP_SRC_XOR_DST</name></expr>]</index></name> <operator pos:start="35:46" pos:end="35:46">=</operator> <literal type="number" pos:start="35:48" pos:end="35:48">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:48"><expr pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:20">rop_to_index</name><index pos:start="37:21" pos:end="37:43">[<expr pos:start="37:22" pos:end="37:42"><name pos:start="37:22" pos:end="37:42">CIRRUS_ROP_SRC_OR_DST</name></expr>]</index></name> <operator pos:start="37:45" pos:end="37:45">=</operator> <literal type="number" pos:start="37:47" pos:end="37:47">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:20">rop_to_index</name><index pos:start="39:21" pos:end="39:49">[<expr pos:start="39:22" pos:end="39:48"><name pos:start="39:22" pos:end="39:48">CIRRUS_ROP_NOTSRC_OR_NOTDST</name></expr>]</index></name> <operator pos:start="39:51" pos:end="39:51">=</operator> <literal type="number" pos:start="39:53" pos:end="39:54">10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:20">rop_to_index</name><index pos:start="41:21" pos:end="41:47">[<expr pos:start="41:22" pos:end="41:46"><name pos:start="41:22" pos:end="41:46">CIRRUS_ROP_SRC_NOTXOR_DST</name></expr>]</index></name> <operator pos:start="41:49" pos:end="41:49">=</operator> <literal type="number" pos:start="41:51" pos:end="41:52">11</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:20">rop_to_index</name><index pos:start="43:21" pos:end="43:46">[<expr pos:start="43:22" pos:end="43:45"><name pos:start="43:22" pos:end="43:45">CIRRUS_ROP_SRC_OR_NOTDST</name></expr>]</index></name> <operator pos:start="43:48" pos:end="43:48">=</operator> <literal type="number" pos:start="43:50" pos:end="43:51">12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:20">rop_to_index</name><index pos:start="45:21" pos:end="45:39">[<expr pos:start="45:22" pos:end="45:38"><name pos:start="45:22" pos:end="45:38">CIRRUS_ROP_NOTSRC</name></expr>]</index></name> <operator pos:start="45:41" pos:end="45:41">=</operator> <literal type="number" pos:start="45:43" pos:end="45:44">13</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:46"><name pos:start="47:9" pos:end="47:20">rop_to_index</name><index pos:start="47:21" pos:end="47:46">[<expr pos:start="47:22" pos:end="47:45"><name pos:start="47:22" pos:end="47:45">CIRRUS_ROP_NOTSRC_OR_DST</name></expr>]</index></name> <operator pos:start="47:48" pos:end="47:48">=</operator> <literal type="number" pos:start="47:50" pos:end="47:51">14</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:56"><expr pos:start="49:9" pos:end="49:55"><name pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:20">rop_to_index</name><index pos:start="49:21" pos:end="49:50">[<expr pos:start="49:22" pos:end="49:49"><name pos:start="49:22" pos:end="49:49">CIRRUS_ROP_NOTSRC_AND_NOTDST</name></expr>]</index></name> <operator pos:start="49:52" pos:end="49:52">=</operator> <literal type="number" pos:start="49:54" pos:end="49:55">15</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:20">device_id</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:32">device_id</name></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:44"><if pos:start="53:9" pos:end="55:44">if <condition pos:start="53:12" pos:end="53:19">(<expr pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:18">is_pci</name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:44"><block_content pos:start="55:13" pos:end="55:44">

            <expr_stmt pos:start="55:13" pos:end="55:44"><expr pos:start="55:13" pos:end="55:43"><name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:22">bustype</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <name pos:start="55:26" pos:end="55:43">CIRRUS_BUSTYPE_PCI</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="57:9" pos:end="59:44">else<block type="pseudo" pos:start="59:13" pos:end="59:44"><block_content pos:start="59:13" pos:end="59:44">

            <expr_stmt pos:start="59:13" pos:end="59:44"><expr pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">bustype</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:43">CIRRUS_BUSTYPE_ISA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:61"><expr pos:start="65:5" pos:end="65:60"><call pos:start="65:5" pos:end="65:60"><name pos:start="65:5" pos:end="65:25">register_ioport_write</name><argument_list pos:start="65:26" pos:end="65:60">(<argument pos:start="65:27" pos:end="65:31"><expr pos:start="65:27" pos:end="65:31"><literal type="number" pos:start="65:27" pos:end="65:31">0x3c0</literal></expr></argument>, <argument pos:start="65:34" pos:end="65:35"><expr pos:start="65:34" pos:end="65:35"><literal type="number" pos:start="65:34" pos:end="65:35">16</literal></expr></argument>, <argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">1</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:56"><expr pos:start="65:41" pos:end="65:56"><name pos:start="65:41" pos:end="65:56">vga_ioport_write</name></expr></argument>, <argument pos:start="65:59" pos:end="65:59"><expr pos:start="65:59" pos:end="65:59"><name pos:start="65:59" pos:end="65:59">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:60"><expr pos:start="69:5" pos:end="69:59"><call pos:start="69:5" pos:end="69:59"><name pos:start="69:5" pos:end="69:25">register_ioport_write</name><argument_list pos:start="69:26" pos:end="69:59">(<argument pos:start="69:27" pos:end="69:31"><expr pos:start="69:27" pos:end="69:31"><literal type="number" pos:start="69:27" pos:end="69:31">0x3b4</literal></expr></argument>, <argument pos:start="69:34" pos:end="69:34"><expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">2</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">1</literal></expr></argument>, <argument pos:start="69:40" pos:end="69:55"><expr pos:start="69:40" pos:end="69:55"><name pos:start="69:40" pos:end="69:55">vga_ioport_write</name></expr></argument>, <argument pos:start="69:58" pos:end="69:58"><expr pos:start="69:58" pos:end="69:58"><name pos:start="69:58" pos:end="69:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:60"><expr pos:start="71:5" pos:end="71:59"><call pos:start="71:5" pos:end="71:59"><name pos:start="71:5" pos:end="71:25">register_ioport_write</name><argument_list pos:start="71:26" pos:end="71:59">(<argument pos:start="71:27" pos:end="71:31"><expr pos:start="71:27" pos:end="71:31"><literal type="number" pos:start="71:27" pos:end="71:31">0x3d4</literal></expr></argument>, <argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><literal type="number" pos:start="71:34" pos:end="71:34">2</literal></expr></argument>, <argument pos:start="71:37" pos:end="71:37"><expr pos:start="71:37" pos:end="71:37"><literal type="number" pos:start="71:37" pos:end="71:37">1</literal></expr></argument>, <argument pos:start="71:40" pos:end="71:55"><expr pos:start="71:40" pos:end="71:55"><name pos:start="71:40" pos:end="71:55">vga_ioport_write</name></expr></argument>, <argument pos:start="71:58" pos:end="71:58"><expr pos:start="71:58" pos:end="71:58"><name pos:start="71:58" pos:end="71:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:60"><expr pos:start="73:5" pos:end="73:59"><call pos:start="73:5" pos:end="73:59"><name pos:start="73:5" pos:end="73:25">register_ioport_write</name><argument_list pos:start="73:26" pos:end="73:59">(<argument pos:start="73:27" pos:end="73:31"><expr pos:start="73:27" pos:end="73:31"><literal type="number" pos:start="73:27" pos:end="73:31">0x3ba</literal></expr></argument>, <argument pos:start="73:34" pos:end="73:34"><expr pos:start="73:34" pos:end="73:34"><literal type="number" pos:start="73:34" pos:end="73:34">1</literal></expr></argument>, <argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><literal type="number" pos:start="73:37" pos:end="73:37">1</literal></expr></argument>, <argument pos:start="73:40" pos:end="73:55"><expr pos:start="73:40" pos:end="73:55"><name pos:start="73:40" pos:end="73:55">vga_ioport_write</name></expr></argument>, <argument pos:start="73:58" pos:end="73:58"><expr pos:start="73:58" pos:end="73:58"><name pos:start="73:58" pos:end="73:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:60"><expr pos:start="75:5" pos:end="75:59"><call pos:start="75:5" pos:end="75:59"><name pos:start="75:5" pos:end="75:25">register_ioport_write</name><argument_list pos:start="75:26" pos:end="75:59">(<argument pos:start="75:27" pos:end="75:31"><expr pos:start="75:27" pos:end="75:31"><literal type="number" pos:start="75:27" pos:end="75:31">0x3da</literal></expr></argument>, <argument pos:start="75:34" pos:end="75:34"><expr pos:start="75:34" pos:end="75:34"><literal type="number" pos:start="75:34" pos:end="75:34">1</literal></expr></argument>, <argument pos:start="75:37" pos:end="75:37"><expr pos:start="75:37" pos:end="75:37"><literal type="number" pos:start="75:37" pos:end="75:37">1</literal></expr></argument>, <argument pos:start="75:40" pos:end="75:55"><expr pos:start="75:40" pos:end="75:55"><name pos:start="75:40" pos:end="75:55">vga_ioport_write</name></expr></argument>, <argument pos:start="75:58" pos:end="75:58"><expr pos:start="75:58" pos:end="75:58"><name pos:start="75:58" pos:end="75:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:59"><expr pos:start="79:5" pos:end="79:58"><call pos:start="79:5" pos:end="79:58"><name pos:start="79:5" pos:end="79:24">register_ioport_read</name><argument_list pos:start="79:25" pos:end="79:58">(<argument pos:start="79:26" pos:end="79:30"><expr pos:start="79:26" pos:end="79:30"><literal type="number" pos:start="79:26" pos:end="79:30">0x3c0</literal></expr></argument>, <argument pos:start="79:33" pos:end="79:34"><expr pos:start="79:33" pos:end="79:34"><literal type="number" pos:start="79:33" pos:end="79:34">16</literal></expr></argument>, <argument pos:start="79:37" pos:end="79:37"><expr pos:start="79:37" pos:end="79:37"><literal type="number" pos:start="79:37" pos:end="79:37">1</literal></expr></argument>, <argument pos:start="79:40" pos:end="79:54"><expr pos:start="79:40" pos:end="79:54"><name pos:start="79:40" pos:end="79:54">vga_ioport_read</name></expr></argument>, <argument pos:start="79:57" pos:end="79:57"><expr pos:start="79:57" pos:end="79:57"><name pos:start="79:57" pos:end="79:57">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:58"><expr pos:start="83:5" pos:end="83:57"><call pos:start="83:5" pos:end="83:57"><name pos:start="83:5" pos:end="83:24">register_ioport_read</name><argument_list pos:start="83:25" pos:end="83:57">(<argument pos:start="83:26" pos:end="83:30"><expr pos:start="83:26" pos:end="83:30"><literal type="number" pos:start="83:26" pos:end="83:30">0x3b4</literal></expr></argument>, <argument pos:start="83:33" pos:end="83:33"><expr pos:start="83:33" pos:end="83:33"><literal type="number" pos:start="83:33" pos:end="83:33">2</literal></expr></argument>, <argument pos:start="83:36" pos:end="83:36"><expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">1</literal></expr></argument>, <argument pos:start="83:39" pos:end="83:53"><expr pos:start="83:39" pos:end="83:53"><name pos:start="83:39" pos:end="83:53">vga_ioport_read</name></expr></argument>, <argument pos:start="83:56" pos:end="83:56"><expr pos:start="83:56" pos:end="83:56"><name pos:start="83:56" pos:end="83:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:58"><expr pos:start="85:5" pos:end="85:57"><call pos:start="85:5" pos:end="85:57"><name pos:start="85:5" pos:end="85:24">register_ioport_read</name><argument_list pos:start="85:25" pos:end="85:57">(<argument pos:start="85:26" pos:end="85:30"><expr pos:start="85:26" pos:end="85:30"><literal type="number" pos:start="85:26" pos:end="85:30">0x3d4</literal></expr></argument>, <argument pos:start="85:33" pos:end="85:33"><expr pos:start="85:33" pos:end="85:33"><literal type="number" pos:start="85:33" pos:end="85:33">2</literal></expr></argument>, <argument pos:start="85:36" pos:end="85:36"><expr pos:start="85:36" pos:end="85:36"><literal type="number" pos:start="85:36" pos:end="85:36">1</literal></expr></argument>, <argument pos:start="85:39" pos:end="85:53"><expr pos:start="85:39" pos:end="85:53"><name pos:start="85:39" pos:end="85:53">vga_ioport_read</name></expr></argument>, <argument pos:start="85:56" pos:end="85:56"><expr pos:start="85:56" pos:end="85:56"><name pos:start="85:56" pos:end="85:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:58"><expr pos:start="87:5" pos:end="87:57"><call pos:start="87:5" pos:end="87:57"><name pos:start="87:5" pos:end="87:24">register_ioport_read</name><argument_list pos:start="87:25" pos:end="87:57">(<argument pos:start="87:26" pos:end="87:30"><expr pos:start="87:26" pos:end="87:30"><literal type="number" pos:start="87:26" pos:end="87:30">0x3ba</literal></expr></argument>, <argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><literal type="number" pos:start="87:33" pos:end="87:33">1</literal></expr></argument>, <argument pos:start="87:36" pos:end="87:36"><expr pos:start="87:36" pos:end="87:36"><literal type="number" pos:start="87:36" pos:end="87:36">1</literal></expr></argument>, <argument pos:start="87:39" pos:end="87:53"><expr pos:start="87:39" pos:end="87:53"><name pos:start="87:39" pos:end="87:53">vga_ioport_read</name></expr></argument>, <argument pos:start="87:56" pos:end="87:56"><expr pos:start="87:56" pos:end="87:56"><name pos:start="87:56" pos:end="87:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:58"><expr pos:start="89:5" pos:end="89:57"><call pos:start="89:5" pos:end="89:57"><name pos:start="89:5" pos:end="89:24">register_ioport_read</name><argument_list pos:start="89:25" pos:end="89:57">(<argument pos:start="89:26" pos:end="89:30"><expr pos:start="89:26" pos:end="89:30"><literal type="number" pos:start="89:26" pos:end="89:30">0x3da</literal></expr></argument>, <argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><literal type="number" pos:start="89:33" pos:end="89:33">1</literal></expr></argument>, <argument pos:start="89:36" pos:end="89:36"><expr pos:start="89:36" pos:end="89:36"><literal type="number" pos:start="89:36" pos:end="89:36">1</literal></expr></argument>, <argument pos:start="89:39" pos:end="89:53"><expr pos:start="89:39" pos:end="89:53"><name pos:start="89:39" pos:end="89:53">vga_ioport_read</name></expr></argument>, <argument pos:start="89:56" pos:end="89:56"><expr pos:start="89:56" pos:end="89:56"><name pos:start="89:56" pos:end="89:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="95:68"><expr pos:start="93:5" pos:end="95:67"><name pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:20">vga_io_memory</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="95:67"><name pos:start="93:24" pos:end="93:45">cpu_register_io_memory</name><argument_list pos:start="93:46" pos:end="95:67">(<argument pos:start="93:47" pos:end="93:47"><expr pos:start="93:47" pos:end="93:47"><literal type="number" pos:start="93:47" pos:end="93:47">0</literal></expr></argument>, <argument pos:start="93:50" pos:end="93:68"><expr pos:start="93:50" pos:end="93:68"><name pos:start="93:50" pos:end="93:68">cirrus_vga_mem_read</name></expr></argument>,

                                           <argument pos:start="95:44" pos:end="95:63"><expr pos:start="95:44" pos:end="95:63"><name pos:start="95:44" pos:end="95:63">cirrus_vga_mem_write</name></expr></argument>, <argument pos:start="95:66" pos:end="95:66"><expr pos:start="95:66" pos:end="95:66"><name pos:start="95:66" pos:end="95:66">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="99:51"><expr pos:start="97:5" pos:end="99:50"><call pos:start="97:5" pos:end="99:50"><name pos:start="97:5" pos:end="97:32">cpu_register_physical_memory</name><argument_list pos:start="97:33" pos:end="99:50">(<argument pos:start="97:34" pos:end="97:58"><expr pos:start="97:34" pos:end="97:58"><name pos:start="97:34" pos:end="97:45">isa_mem_base</name> <operator pos:start="97:47" pos:end="97:47">+</operator> <literal type="number" pos:start="97:49" pos:end="97:58">0x000a0000</literal></expr></argument>, <argument pos:start="97:61" pos:end="97:67"><expr pos:start="97:61" pos:end="97:67"><literal type="number" pos:start="97:61" pos:end="97:67">0x20000</literal></expr></argument>,

                                 <argument pos:start="99:34" pos:end="99:49"><expr pos:start="99:34" pos:end="99:49"><name pos:start="99:34" pos:end="99:49"><name pos:start="99:34" pos:end="99:34">s</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:49">vga_io_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:69"><expr pos:start="101:5" pos:end="101:68"><call pos:start="101:5" pos:end="101:68"><name pos:start="101:5" pos:end="101:32">qemu_register_coalesced_mmio</name><argument_list pos:start="101:33" pos:end="101:68">(<argument pos:start="101:34" pos:end="101:58"><expr pos:start="101:34" pos:end="101:58"><name pos:start="101:34" pos:end="101:45">isa_mem_base</name> <operator pos:start="101:47" pos:end="101:47">+</operator> <literal type="number" pos:start="101:49" pos:end="101:58">0x000a0000</literal></expr></argument>, <argument pos:start="101:61" pos:end="101:67"><expr pos:start="101:61" pos:end="101:67"><literal type="number" pos:start="101:61" pos:end="101:67">0x20000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:29">/* I/O handler for LFB */</comment>

    <expr_stmt pos:start="107:5" pos:end="109:78"><expr pos:start="107:5" pos:end="109:77"><name pos:start="107:5" pos:end="107:28"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:28">cirrus_linear_io_addr</name></name> <operator pos:start="107:30" pos:end="107:30">=</operator>

        <call pos:start="109:9" pos:end="109:77"><name pos:start="109:9" pos:end="109:30">cpu_register_io_memory</name><argument_list pos:start="109:31" pos:end="109:77">(<argument pos:start="109:32" pos:end="109:32"><expr pos:start="109:32" pos:end="109:32"><literal type="number" pos:start="109:32" pos:end="109:32">0</literal></expr></argument>, <argument pos:start="109:35" pos:end="109:52"><expr pos:start="109:35" pos:end="109:52"><name pos:start="109:35" pos:end="109:52">cirrus_linear_read</name></expr></argument>, <argument pos:start="109:55" pos:end="109:73"><expr pos:start="109:55" pos:end="109:73"><name pos:start="109:55" pos:end="109:73">cirrus_linear_write</name></expr></argument>, <argument pos:start="109:76" pos:end="109:76"><expr pos:start="109:76" pos:end="109:76"><name pos:start="109:76" pos:end="109:76">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:79"><expr pos:start="111:5" pos:end="111:78"><name pos:start="111:5" pos:end="111:26"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:26">cirrus_linear_write</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <call pos:start="111:30" pos:end="111:78"><name pos:start="111:30" pos:end="111:52">cpu_get_io_memory_write</name><argument_list pos:start="111:53" pos:end="111:78">(<argument pos:start="111:54" pos:end="111:77"><expr pos:start="111:54" pos:end="111:77"><name pos:start="111:54" pos:end="111:77"><name pos:start="111:54" pos:end="111:54">s</name><operator pos:start="111:55" pos:end="111:56">-&gt;</operator><name pos:start="111:57" pos:end="111:77">cirrus_linear_io_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:29">/* I/O handler for LFB */</comment>

    <expr_stmt pos:start="117:5" pos:end="121:62"><expr pos:start="117:5" pos:end="121:61"><name pos:start="117:5" pos:end="117:35"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:35">cirrus_linear_bitblt_io_addr</name></name> <operator pos:start="117:37" pos:end="117:37">=</operator>

        <call pos:start="119:9" pos:end="121:61"><name pos:start="119:9" pos:end="119:30">cpu_register_io_memory</name><argument_list pos:start="119:31" pos:end="121:61">(<argument pos:start="119:32" pos:end="119:32"><expr pos:start="119:32" pos:end="119:32"><literal type="number" pos:start="119:32" pos:end="119:32">0</literal></expr></argument>, <argument pos:start="119:35" pos:end="119:59"><expr pos:start="119:35" pos:end="119:59"><name pos:start="119:35" pos:end="119:59">cirrus_linear_bitblt_read</name></expr></argument>,

                               <argument pos:start="121:32" pos:end="121:57"><expr pos:start="121:32" pos:end="121:57"><name pos:start="121:32" pos:end="121:57">cirrus_linear_bitblt_write</name></expr></argument>, <argument pos:start="121:60" pos:end="121:60"><expr pos:start="121:60" pos:end="121:60"><name pos:start="121:60" pos:end="121:60">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:43">/* I/O handler for memory-mapped I/O */</comment>

    <expr_stmt pos:start="127:5" pos:end="129:74"><expr pos:start="127:5" pos:end="129:73"><name pos:start="127:5" pos:end="127:26"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:26">cirrus_mmio_io_addr</name></name> <operator pos:start="127:28" pos:end="127:28">=</operator>

        <call pos:start="129:9" pos:end="129:73"><name pos:start="129:9" pos:end="129:30">cpu_register_io_memory</name><argument_list pos:start="129:31" pos:end="129:73">(<argument pos:start="129:32" pos:end="129:32"><expr pos:start="129:32" pos:end="129:32"><literal type="number" pos:start="129:32" pos:end="129:32">0</literal></expr></argument>, <argument pos:start="129:35" pos:end="129:50"><expr pos:start="129:35" pos:end="129:50"><name pos:start="129:35" pos:end="129:50">cirrus_mmio_read</name></expr></argument>, <argument pos:start="129:53" pos:end="129:69"><expr pos:start="129:53" pos:end="129:69"><name pos:start="129:53" pos:end="129:69">cirrus_mmio_write</name></expr></argument>, <argument pos:start="129:72" pos:end="129:72"><expr pos:start="129:72" pos:end="129:72"><name pos:start="129:72" pos:end="129:72">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="135:73"><expr pos:start="133:5" pos:end="135:72"><name pos:start="133:5" pos:end="133:21"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:21">real_vram_size</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator>

        <ternary pos:start="135:9" pos:end="135:72"><condition pos:start="135:9" pos:end="135:46"><expr pos:start="135:9" pos:end="135:44"><operator pos:start="135:9" pos:end="135:9">(</operator><name pos:start="135:10" pos:end="135:21"><name pos:start="135:10" pos:end="135:10">s</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:21">device_id</name></name> <operator pos:start="135:23" pos:end="135:24">==</operator> <name pos:start="135:26" pos:end="135:43">CIRRUS_ID_CLGD5446</name><operator pos:start="135:44" pos:end="135:44">)</operator></expr> ?</condition><then pos:start="135:48" pos:end="135:58"> <expr pos:start="135:48" pos:end="135:58"><literal type="number" pos:start="135:48" pos:end="135:51">4096</literal> <operator pos:start="135:53" pos:end="135:53">*</operator> <literal type="number" pos:start="135:55" pos:end="135:58">1024</literal></expr> </then><else pos:start="135:60" pos:end="135:72">: <expr pos:start="135:62" pos:end="135:72"><literal type="number" pos:start="135:62" pos:end="135:65">2048</literal> <operator pos:start="135:67" pos:end="135:67">*</operator> <literal type="number" pos:start="135:69" pos:end="135:72">1024</literal></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:50">/* XXX: s-&gt;vram_size must be a power of two */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:48"><expr pos:start="141:5" pos:end="141:47"><name pos:start="141:5" pos:end="141:23"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:23">cirrus_addr_mask</name></name> <operator pos:start="141:25" pos:end="141:25">=</operator> <name pos:start="141:27" pos:end="141:43"><name pos:start="141:27" pos:end="141:27">s</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:43">real_vram_size</name></name> <operator pos:start="141:45" pos:end="141:45">-</operator> <literal type="number" pos:start="141:47" pos:end="141:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:50"><expr pos:start="143:5" pos:end="143:49"><name pos:start="143:5" pos:end="143:23"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:23">linear_mmio_mask</name></name> <operator pos:start="143:25" pos:end="143:25">=</operator> <name pos:start="143:27" pos:end="143:43"><name pos:start="143:27" pos:end="143:27">s</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:43">real_vram_size</name></name> <operator pos:start="143:45" pos:end="143:45">-</operator> <literal type="number" pos:start="143:47" pos:end="143:49">256</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:32"><expr pos:start="147:5" pos:end="147:31"><name pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:14">get_bpp</name></name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:31">cirrus_get_bpp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:40"><expr pos:start="149:5" pos:end="149:39"><name pos:start="149:5" pos:end="149:18"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:18">get_offsets</name></name> <operator pos:start="149:20" pos:end="149:20">=</operator> <name pos:start="149:22" pos:end="149:39">cirrus_get_offsets</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:46"><expr pos:start="151:5" pos:end="151:45"><name pos:start="151:5" pos:end="151:21"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:21">get_resolution</name></name> <operator pos:start="151:23" pos:end="151:23">=</operator> <name pos:start="151:25" pos:end="151:45">cirrus_get_resolution</name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:52"><expr pos:start="153:5" pos:end="153:51"><name pos:start="153:5" pos:end="153:24"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:24">cursor_invalidate</name></name> <operator pos:start="153:26" pos:end="153:26">=</operator> <name pos:start="153:28" pos:end="153:51">cirrus_cursor_invalidate</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:50"><expr pos:start="155:5" pos:end="155:49"><name pos:start="155:5" pos:end="155:23"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:23">cursor_draw_line</name></name> <operator pos:start="155:25" pos:end="155:25">=</operator> <name pos:start="155:27" pos:end="155:49">cirrus_cursor_draw_line</name></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:41"><expr pos:start="159:5" pos:end="159:40"><call pos:start="159:5" pos:end="159:40"><name pos:start="159:5" pos:end="159:23">qemu_register_reset</name><argument_list pos:start="159:24" pos:end="159:40">(<argument pos:start="159:25" pos:end="159:36"><expr pos:start="159:25" pos:end="159:36"><name pos:start="159:25" pos:end="159:36">cirrus_reset</name></expr></argument>, <argument pos:start="159:39" pos:end="159:39"><expr pos:start="159:39" pos:end="159:39"><name pos:start="159:39" pos:end="159:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:20"><expr pos:start="161:5" pos:end="161:19"><call pos:start="161:5" pos:end="161:19"><name pos:start="161:5" pos:end="161:16">cirrus_reset</name><argument_list pos:start="161:17" pos:end="161:19">(<argument pos:start="161:18" pos:end="161:18"><expr pos:start="161:18" pos:end="161:18"><name pos:start="161:18" pos:end="161:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:77"><expr pos:start="163:5" pos:end="163:76"><call pos:start="163:5" pos:end="163:76"><name pos:start="163:5" pos:end="163:19">register_savevm</name><argument_list pos:start="163:20" pos:end="163:76">(<argument pos:start="163:21" pos:end="163:32"><expr pos:start="163:21" pos:end="163:32"><literal type="string" pos:start="163:21" pos:end="163:32">"cirrus_vga"</literal></expr></argument>, <argument pos:start="163:35" pos:end="163:35"><expr pos:start="163:35" pos:end="163:35"><literal type="number" pos:start="163:35" pos:end="163:35">0</literal></expr></argument>, <argument pos:start="163:38" pos:end="163:38"><expr pos:start="163:38" pos:end="163:38"><literal type="number" pos:start="163:38" pos:end="163:38">2</literal></expr></argument>, <argument pos:start="163:41" pos:end="163:55"><expr pos:start="163:41" pos:end="163:55"><name pos:start="163:41" pos:end="163:55">cirrus_vga_save</name></expr></argument>, <argument pos:start="163:58" pos:end="163:72"><expr pos:start="163:58" pos:end="163:72"><name pos:start="163:58" pos:end="163:72">cirrus_vga_load</name></expr></argument>, <argument pos:start="163:75" pos:end="163:75"><expr pos:start="163:75" pos:end="163:75"><name pos:start="163:75" pos:end="163:75">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
