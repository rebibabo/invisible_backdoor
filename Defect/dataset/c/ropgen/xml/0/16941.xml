<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16941.c" pos:tabs="8"><function pos:start="1:1" pos:end="327:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">asf_read_stream_properties</name><parameter_list pos:start="1:38" pos:end="1:71">(<parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:53">AVFormatContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">int64_t</name></type> <name pos:start="1:67" pos:end="1:70">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="327:1">{<block_content pos:start="5:5" pos:end="325:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">ASFStream</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:21">asf_st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">ff_asf_guid</name></type> <name pos:start="13:17" pos:end="13:17">g</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:8">enum</name> <name pos:start="15:10" pos:end="15:20">AVMediaType</name></name></type> <name pos:start="15:22" pos:end="15:25">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:26">type_specific_size</name></decl>, <decl pos:start="17:29" pos:end="17:33"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:29" pos:end="17:33">sizeX</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:21">tag1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:16">pos1</name></decl>, <decl pos:start="21:19" pos:end="21:22"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:19" pos:end="21:22">pos2</name></decl>, <decl pos:start="21:25" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:25" pos:end="21:34">start_time</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:53"><decl pos:start="23:5" pos:end="23:33"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:33">test_for_ext_stream_audio</name></decl>, <decl pos:start="23:36" pos:end="23:52"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:36" pos:end="23:50">is_dvr_ms_audio</name><init pos:start="23:51" pos:end="23:52">=<expr pos:start="23:52" pos:end="23:52"><literal type="number" pos:start="23:52" pos:end="23:52">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:41">(<expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:21">nb_streams</name></name> <operator pos:start="27:23" pos:end="27:24">==</operator> <name pos:start="27:26" pos:end="27:40">ASF_MAX_STREAMS</name></expr>)</condition> <block pos:start="27:43" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:31">

        <expr_stmt pos:start="29:9" pos:end="29:54"><expr pos:start="29:9" pos:end="29:53"><call pos:start="29:9" pos:end="29:53"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:53">(<argument pos:start="29:16" pos:end="29:16"><expr pos:start="29:16" pos:end="29:16"><name pos:start="29:16" pos:end="29:16">s</name></expr></argument>, <argument pos:start="29:19" pos:end="29:30"><expr pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:33" pos:end="29:52"><expr pos:start="29:33" pos:end="29:52"><literal type="string" pos:start="29:33" pos:end="29:52">"too many streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:8">pos1</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:24"><name pos:start="37:12" pos:end="37:20">avio_tell</name><argument_list pos:start="37:21" pos:end="37:24">(<argument pos:start="37:22" pos:end="37:23"><expr pos:start="37:22" pos:end="37:23"><name pos:start="37:22" pos:end="37:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:6">st</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <call pos:start="41:10" pos:end="41:37"><name pos:start="41:10" pos:end="41:28">avformat_new_stream</name><argument_list pos:start="41:29" pos:end="41:37">(<argument pos:start="41:30" pos:end="41:30"><expr pos:start="41:30" pos:end="41:30"><name pos:start="41:30" pos:end="41:30">s</name></expr></argument>, <argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:31"><if pos:start="43:5" pos:end="45:31">if <condition pos:start="43:8" pos:end="43:12">(<expr pos:start="43:9" pos:end="43:11"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:11">st</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:31"><block_content pos:start="45:9" pos:end="45:31">

        <return pos:start="45:9" pos:end="45:31">return <expr pos:start="45:16" pos:end="45:30"><call pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:22">AVERROR</name><argument_list pos:start="45:23" pos:end="45:30">(<argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><call pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:23">avpriv_set_pts_info</name><argument_list pos:start="47:24" pos:end="47:40">(<argument pos:start="47:25" pos:end="47:26"><expr pos:start="47:25" pos:end="47:26"><name pos:start="47:25" pos:end="47:26">st</name></expr></argument>, <argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><literal type="number" pos:start="47:29" pos:end="47:30">32</literal></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">1</literal></expr></argument>, <argument pos:start="47:36" pos:end="47:39"><expr pos:start="47:36" pos:end="47:39"><literal type="number" pos:start="47:36" pos:end="47:39">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:43" pos:end="47:64">/* 32 bit pts in ms */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:10">asf_st</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <call pos:start="49:14" pos:end="49:42"><name pos:start="49:14" pos:end="49:23">av_mallocz</name><argument_list pos:start="49:24" pos:end="49:42">(<argument pos:start="49:25" pos:end="49:41"><expr pos:start="49:25" pos:end="49:41"><sizeof pos:start="49:25" pos:end="49:41">sizeof<argument_list pos:start="49:31" pos:end="49:41">(<argument pos:start="49:32" pos:end="49:40"><expr pos:start="49:32" pos:end="49:40"><name pos:start="49:32" pos:end="49:40">ASFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="53:31"><if pos:start="51:5" pos:end="53:31">if <condition pos:start="51:8" pos:end="51:16">(<expr pos:start="51:9" pos:end="51:15"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:15">asf_st</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:31"><block_content pos:start="53:9" pos:end="53:31">

        <return pos:start="53:9" pos:end="53:31">return <expr pos:start="53:16" pos:end="53:30"><call pos:start="53:16" pos:end="53:30"><name pos:start="53:16" pos:end="53:22">AVERROR</name><argument_list pos:start="53:23" pos:end="53:30">(<argument pos:start="53:24" pos:end="53:29"><expr pos:start="53:24" pos:end="53:29"><name pos:start="53:24" pos:end="53:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:27"><expr pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:6">st</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:17">priv_data</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:26">asf_st</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:34"><expr pos:start="57:5" pos:end="57:33"><name pos:start="57:5" pos:end="57:14">start_time</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:33"><name pos:start="57:18" pos:end="57:20">asf</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:25">hdr</name><operator pos:start="57:26" pos:end="57:26">.</operator><name pos:start="57:27" pos:end="57:33">preroll</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:40"><expr pos:start="61:5" pos:end="61:39"><name pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:10">asf_st</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:33">stream_language_index</name></name> <operator pos:start="61:35" pos:end="61:35">=</operator> <literal type="number" pos:start="61:37" pos:end="61:39">128</literal></expr>;</expr_stmt> <comment type="line" pos:start="61:42" pos:end="61:87">// invalid stream index means no language info</comment>



    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if<condition pos:start="65:7" pos:end="65:32">(<expr pos:start="65:8" pos:end="65:31"><operator pos:start="65:8" pos:end="65:8">!</operator><operator pos:start="65:9" pos:end="65:9">(</operator><name pos:start="65:10" pos:end="65:23"><name pos:start="65:10" pos:end="65:12">asf</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:17">hdr</name><operator pos:start="65:18" pos:end="65:18">.</operator><name pos:start="65:19" pos:end="65:23">flags</name></name> <operator pos:start="65:25" pos:end="65:25">&amp;</operator> <literal type="number" pos:start="65:27" pos:end="65:30">0x01</literal><operator pos:start="65:31" pos:end="65:31">)</operator></expr>)</condition> <block pos:start="65:34" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:47"> <comment type="line" pos:start="65:36" pos:end="65:63">// if we aren't streaming...</comment>

        <decl_stmt pos:start="67:9" pos:end="67:38"><decl pos:start="67:9" pos:end="67:37"><type pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:15">int64_t</name></type> <name pos:start="67:17" pos:end="67:21">fsize</name> <init pos:start="67:23" pos:end="67:37">= <expr pos:start="67:25" pos:end="67:37"><call pos:start="67:25" pos:end="67:37"><name pos:start="67:25" pos:end="67:33">avio_size</name><argument_list pos:start="67:34" pos:end="67:37">(<argument pos:start="67:35" pos:end="67:36"><expr pos:start="67:35" pos:end="67:36"><name pos:start="67:35" pos:end="67:36">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="69:9" pos:end="73:47"><if pos:start="69:9" pos:end="73:47">if <condition pos:start="69:12" pos:end="69:113">(<expr pos:start="69:13" pos:end="69:112"><name pos:start="69:13" pos:end="69:17">fsize</name> <operator pos:start="69:19" pos:end="69:20">&lt;=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal> <operator pos:start="69:24" pos:end="69:25">||</operator> <operator pos:start="69:27" pos:end="69:27">(</operator><name pos:start="69:28" pos:end="69:34">int64_t</name><operator pos:start="69:35" pos:end="69:35">)</operator><name pos:start="69:36" pos:end="69:53"><name pos:start="69:36" pos:end="69:38">asf</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:43">hdr</name><operator pos:start="69:44" pos:end="69:44">.</operator><name pos:start="69:45" pos:end="69:53">file_size</name></name> <operator pos:start="69:55" pos:end="69:56">&lt;=</operator> <literal type="number" pos:start="69:58" pos:end="69:58">0</literal> <operator pos:start="69:60" pos:end="69:61">||</operator> <call pos:start="69:63" pos:end="69:104"><name pos:start="69:63" pos:end="69:67">FFABS</name><argument_list pos:start="69:68" pos:end="69:104">(<argument pos:start="69:69" pos:end="69:103"><expr pos:start="69:69" pos:end="69:103"><name pos:start="69:69" pos:end="69:73">fsize</name> <operator pos:start="69:75" pos:end="69:75">-</operator> <operator pos:start="69:77" pos:end="69:77">(</operator><name pos:start="69:78" pos:end="69:84">int64_t</name><operator pos:start="69:85" pos:end="69:85">)</operator><name pos:start="69:86" pos:end="69:103"><name pos:start="69:86" pos:end="69:88">asf</name><operator pos:start="69:89" pos:end="69:90">-&gt;</operator><name pos:start="69:91" pos:end="69:93">hdr</name><operator pos:start="69:94" pos:end="69:94">.</operator><name pos:start="69:95" pos:end="69:103">file_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="69:106" pos:end="69:106">&lt;</operator> <literal type="number" pos:start="69:108" pos:end="69:112">10000</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="73:47"><block_content pos:start="71:13" pos:end="73:47">

            <expr_stmt pos:start="71:13" pos:end="73:47"><expr pos:start="71:13" pos:end="73:46"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:14">st</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:24">duration</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:45"><name pos:start="71:28" pos:end="71:30">asf</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:35">hdr</name><operator pos:start="71:36" pos:end="71:36">.</operator><name pos:start="71:37" pos:end="71:45">play_time</name></name> <operator pos:start="71:47" pos:end="71:47">/</operator>

                <operator pos:start="73:17" pos:end="73:17">(</operator><literal type="number" pos:start="73:18" pos:end="73:25">10000000</literal> <operator pos:start="73:27" pos:end="73:27">/</operator> <literal type="number" pos:start="73:29" pos:end="73:32">1000</literal><operator pos:start="73:33" pos:end="73:33">)</operator> <operator pos:start="73:35" pos:end="73:35">-</operator> <name pos:start="73:37" pos:end="73:46">start_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><call pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:15">ff_get_guid</name><argument_list pos:start="77:16" pos:end="77:23">(<argument pos:start="77:17" pos:end="77:18"><expr pos:start="77:17" pos:end="77:18"><name pos:start="77:17" pos:end="77:18">pb</name></expr></argument>, <argument pos:start="77:21" pos:end="77:22"><expr pos:start="77:21" pos:end="77:22"><operator pos:start="77:21" pos:end="77:21">&amp;</operator><name pos:start="77:22" pos:end="77:22">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:29">test_for_ext_stream_audio</name> <operator pos:start="81:31" pos:end="81:31">=</operator> <literal type="number" pos:start="81:33" pos:end="81:33">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="111:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:46">(<expr pos:start="83:9" pos:end="83:45"><operator pos:start="83:9" pos:end="83:9">!</operator><call pos:start="83:10" pos:end="83:45"><name pos:start="83:10" pos:end="83:19">ff_guidcmp</name><argument_list pos:start="83:20" pos:end="83:45">(<argument pos:start="83:21" pos:end="83:22"><expr pos:start="83:21" pos:end="83:22"><operator pos:start="83:21" pos:end="83:21">&amp;</operator><name pos:start="83:22" pos:end="83:22">g</name></expr></argument>, <argument pos:start="83:25" pos:end="83:44"><expr pos:start="83:25" pos:end="83:44"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:44">ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:48" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:34">

        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:12">type</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <name pos:start="85:16" pos:end="85:33">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="91:5">else if <condition pos:start="87:15" pos:end="87:53">(<expr pos:start="87:16" pos:end="87:52"><operator pos:start="87:16" pos:end="87:16">!</operator><call pos:start="87:17" pos:end="87:52"><name pos:start="87:17" pos:end="87:26">ff_guidcmp</name><argument_list pos:start="87:27" pos:end="87:52">(<argument pos:start="87:28" pos:end="87:29"><expr pos:start="87:28" pos:end="87:29"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:29">g</name></expr></argument>, <argument pos:start="87:32" pos:end="87:51"><expr pos:start="87:32" pos:end="87:51"><operator pos:start="87:32" pos:end="87:32">&amp;</operator><name pos:start="87:33" pos:end="87:51">ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:55" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:34">

        <expr_stmt pos:start="89:9" pos:end="89:34"><expr pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:12">type</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <name pos:start="89:16" pos:end="89:33">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="97:5">else if <condition pos:start="91:15" pos:end="91:51">(<expr pos:start="91:16" pos:end="91:50"><operator pos:start="91:16" pos:end="91:16">!</operator><call pos:start="91:17" pos:end="91:50"><name pos:start="91:17" pos:end="91:26">ff_guidcmp</name><argument_list pos:start="91:27" pos:end="91:50">(<argument pos:start="91:28" pos:end="91:29"><expr pos:start="91:28" pos:end="91:29"><operator pos:start="91:28" pos:end="91:28">&amp;</operator><name pos:start="91:29" pos:end="91:29">g</name></expr></argument>, <argument pos:start="91:32" pos:end="91:49"><expr pos:start="91:32" pos:end="91:49"><operator pos:start="91:32" pos:end="91:32">&amp;</operator><name pos:start="91:33" pos:end="91:49">ff_asf_jfif_media</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:53" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:48">

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:12">type</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <name pos:start="93:16" pos:end="93:33">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:48"><expr pos:start="95:9" pos:end="95:47"><name pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:10">st</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:17">codec</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:27">codec_id</name></name> <operator pos:start="95:29" pos:end="95:29">=</operator> <name pos:start="95:31" pos:end="95:47">AV_CODEC_ID_MJPEG</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="97:7" pos:end="101:5">else if <condition pos:start="97:15" pos:end="97:55">(<expr pos:start="97:16" pos:end="97:54"><operator pos:start="97:16" pos:end="97:16">!</operator><call pos:start="97:17" pos:end="97:54"><name pos:start="97:17" pos:end="97:26">ff_guidcmp</name><argument_list pos:start="97:27" pos:end="97:54">(<argument pos:start="97:28" pos:end="97:29"><expr pos:start="97:28" pos:end="97:29"><operator pos:start="97:28" pos:end="97:28">&amp;</operator><name pos:start="97:29" pos:end="97:29">g</name></expr></argument>, <argument pos:start="97:32" pos:end="97:53"><expr pos:start="97:32" pos:end="97:53"><operator pos:start="97:32" pos:end="97:32">&amp;</operator><name pos:start="97:33" pos:end="97:53">ff_asf_command_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:57" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:33">

        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:12">type</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <name pos:start="99:16" pos:end="99:32">AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="101:7" pos:end="107:5">else if <condition pos:start="101:15" pos:end="101:71">(<expr pos:start="101:16" pos:end="101:70"><operator pos:start="101:16" pos:end="101:16">!</operator><call pos:start="101:17" pos:end="101:70"><name pos:start="101:17" pos:end="101:26">ff_guidcmp</name><argument_list pos:start="101:27" pos:end="101:70">(<argument pos:start="101:28" pos:end="101:29"><expr pos:start="101:28" pos:end="101:29"><operator pos:start="101:28" pos:end="101:28">&amp;</operator><name pos:start="101:29" pos:end="101:29">g</name></expr></argument>, <argument pos:start="101:32" pos:end="101:69"><expr pos:start="101:32" pos:end="101:69"><operator pos:start="101:32" pos:end="101:32">&amp;</operator><name pos:start="101:33" pos:end="101:69">ff_asf_ext_stream_embed_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:73" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:36">

        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:33">test_for_ext_stream_audio</name> <operator pos:start="103:35" pos:end="103:35">=</operator> <literal type="number" pos:start="103:37" pos:end="103:37">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:12">type</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <name pos:start="105:16" pos:end="105:35">AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:18">

        <return pos:start="109:9" pos:end="109:18">return <expr pos:start="109:16" pos:end="109:17"><operator pos:start="109:16" pos:end="109:16">-</operator><literal type="number" pos:start="109:17" pos:end="109:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:24"><expr pos:start="113:5" pos:end="113:23"><call pos:start="113:5" pos:end="113:23"><name pos:start="113:5" pos:end="113:15">ff_get_guid</name><argument_list pos:start="113:16" pos:end="113:23">(<argument pos:start="113:17" pos:end="113:18"><expr pos:start="113:17" pos:end="113:18"><name pos:start="113:17" pos:end="113:18">pb</name></expr></argument>, <argument pos:start="113:21" pos:end="113:22"><expr pos:start="113:21" pos:end="113:22"><operator pos:start="113:21" pos:end="113:21">&amp;</operator><name pos:start="113:22" pos:end="113:22">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:21"><expr pos:start="115:5" pos:end="115:20"><call pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:13">avio_skip</name><argument_list pos:start="115:14" pos:end="115:20">(<argument pos:start="115:15" pos:end="115:16"><expr pos:start="115:15" pos:end="115:16"><name pos:start="115:15" pos:end="115:16">pb</name></expr></argument>, <argument pos:start="115:19" pos:end="115:19"><expr pos:start="115:19" pos:end="115:19"><literal type="number" pos:start="115:19" pos:end="115:19">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="115:23" pos:end="115:38">/* total_size */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:22">type_specific_size</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <call pos:start="117:26" pos:end="117:38"><name pos:start="117:26" pos:end="117:34">avio_rl32</name><argument_list pos:start="117:35" pos:end="117:38">(<argument pos:start="117:36" pos:end="117:37"><expr pos:start="117:36" pos:end="117:37"><name pos:start="117:36" pos:end="117:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:18"><expr pos:start="119:5" pos:end="119:17"><call pos:start="119:5" pos:end="119:17"><name pos:start="119:5" pos:end="119:13">avio_rl32</name><argument_list pos:start="119:14" pos:end="119:17">(<argument pos:start="119:15" pos:end="119:16"><expr pos:start="119:15" pos:end="119:16"><name pos:start="119:15" pos:end="119:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:34"><expr pos:start="121:5" pos:end="121:33"><name pos:start="121:5" pos:end="121:10"><name pos:start="121:5" pos:end="121:6">st</name><operator pos:start="121:7" pos:end="121:8">-&gt;</operator><name pos:start="121:9" pos:end="121:10">id</name></name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:26"><name pos:start="121:14" pos:end="121:22">avio_rl16</name><argument_list pos:start="121:23" pos:end="121:26">(<argument pos:start="121:24" pos:end="121:25"><expr pos:start="121:24" pos:end="121:25"><name pos:start="121:24" pos:end="121:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="121:28" pos:end="121:28">&amp;</operator> <literal type="number" pos:start="121:30" pos:end="121:33">0x7f</literal></expr>;</expr_stmt> <comment type="block" pos:start="121:36" pos:end="121:50">/* stream id */</comment>

    <comment type="line" pos:start="123:5" pos:end="123:41">// mapping of asf ID to AV stream ID;</comment>

    <expr_stmt pos:start="125:5" pos:end="125:48"><expr pos:start="125:5" pos:end="125:47"><name pos:start="125:5" pos:end="125:27"><name pos:start="125:5" pos:end="125:7">asf</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:19">asfid2avid</name><index pos:start="125:20" pos:end="125:27">[<expr pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:22">st</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:26">id</name></name></expr>]</index></name> <operator pos:start="125:29" pos:end="125:29">=</operator> <name pos:start="125:31" pos:end="125:43"><name pos:start="125:31" pos:end="125:31">s</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:43">nb_streams</name></name> <operator pos:start="125:45" pos:end="125:45">-</operator> <literal type="number" pos:start="125:47" pos:end="125:47">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:18"><expr pos:start="129:5" pos:end="129:17"><call pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:13">avio_rl32</name><argument_list pos:start="129:14" pos:end="129:17">(<argument pos:start="129:15" pos:end="129:16"><expr pos:start="129:15" pos:end="129:16"><name pos:start="129:15" pos:end="129:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="157:5"><if pos:start="133:5" pos:end="157:5">if <condition pos:start="133:8" pos:end="133:34">(<expr pos:start="133:9" pos:end="133:33"><name pos:start="133:9" pos:end="133:33">test_for_ext_stream_audio</name></expr>)</condition> <block pos:start="133:36" pos:end="157:5">{<block_content pos:start="135:9" pos:end="155:9">

        <expr_stmt pos:start="135:9" pos:end="135:28"><expr pos:start="135:9" pos:end="135:27"><call pos:start="135:9" pos:end="135:27"><name pos:start="135:9" pos:end="135:19">ff_get_guid</name><argument_list pos:start="135:20" pos:end="135:27">(<argument pos:start="135:21" pos:end="135:22"><expr pos:start="135:21" pos:end="135:22"><name pos:start="135:21" pos:end="135:22">pb</name></expr></argument>, <argument pos:start="135:25" pos:end="135:26"><expr pos:start="135:25" pos:end="135:26"><operator pos:start="135:25" pos:end="135:25">&amp;</operator><name pos:start="135:26" pos:end="135:26">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="155:9"><if pos:start="137:9" pos:end="155:9">if <condition pos:start="137:12" pos:end="137:61">(<expr pos:start="137:13" pos:end="137:60"><operator pos:start="137:13" pos:end="137:13">!</operator><call pos:start="137:14" pos:end="137:60"><name pos:start="137:14" pos:end="137:23">ff_guidcmp</name><argument_list pos:start="137:24" pos:end="137:60">(<argument pos:start="137:25" pos:end="137:26"><expr pos:start="137:25" pos:end="137:26"><operator pos:start="137:25" pos:end="137:25">&amp;</operator><name pos:start="137:26" pos:end="137:26">g</name></expr></argument>, <argument pos:start="137:29" pos:end="137:59"><expr pos:start="137:29" pos:end="137:59"><operator pos:start="137:29" pos:end="137:29">&amp;</operator><name pos:start="137:30" pos:end="137:59">ff_asf_ext_stream_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:63" pos:end="155:9">{<block_content pos:start="139:13" pos:end="153:26">

            <expr_stmt pos:start="139:13" pos:end="139:38"><expr pos:start="139:13" pos:end="139:37"><name pos:start="139:13" pos:end="139:16">type</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <name pos:start="139:20" pos:end="139:37">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:30"><expr pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:27">is_dvr_ms_audio</name><operator pos:start="141:28" pos:end="141:28">=</operator><literal type="number" pos:start="141:29" pos:end="141:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:32"><expr pos:start="143:13" pos:end="143:31"><call pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:23">ff_get_guid</name><argument_list pos:start="143:24" pos:end="143:31">(<argument pos:start="143:25" pos:end="143:26"><expr pos:start="143:25" pos:end="143:26"><name pos:start="143:25" pos:end="143:26">pb</name></expr></argument>, <argument pos:start="143:29" pos:end="143:30"><expr pos:start="143:29" pos:end="143:30"><operator pos:start="143:29" pos:end="143:29">&amp;</operator><name pos:start="143:30" pos:end="143:30">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:26"><expr pos:start="145:13" pos:end="145:25"><call pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:21">avio_rl32</name><argument_list pos:start="145:22" pos:end="145:25">(<argument pos:start="145:23" pos:end="145:24"><expr pos:start="145:23" pos:end="145:24"><name pos:start="145:23" pos:end="145:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:26"><expr pos:start="147:13" pos:end="147:25"><call pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:21">avio_rl32</name><argument_list pos:start="147:22" pos:end="147:25">(<argument pos:start="147:23" pos:end="147:24"><expr pos:start="147:23" pos:end="147:24"><name pos:start="147:23" pos:end="147:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:26"><expr pos:start="149:13" pos:end="149:25"><call pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:21">avio_rl32</name><argument_list pos:start="149:22" pos:end="149:25">(<argument pos:start="149:23" pos:end="149:24"><expr pos:start="149:23" pos:end="149:24"><name pos:start="149:23" pos:end="149:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:32"><expr pos:start="151:13" pos:end="151:31"><call pos:start="151:13" pos:end="151:31"><name pos:start="151:13" pos:end="151:23">ff_get_guid</name><argument_list pos:start="151:24" pos:end="151:31">(<argument pos:start="151:25" pos:end="151:26"><expr pos:start="151:25" pos:end="151:26"><name pos:start="151:25" pos:end="151:26">pb</name></expr></argument>, <argument pos:start="151:29" pos:end="151:30"><expr pos:start="151:29" pos:end="151:30"><operator pos:start="151:29" pos:end="151:29">&amp;</operator><name pos:start="151:30" pos:end="151:30">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:26"><expr pos:start="153:13" pos:end="153:25"><call pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:21">avio_rl32</name><argument_list pos:start="153:22" pos:end="153:25">(<argument pos:start="153:23" pos:end="153:24"><expr pos:start="153:23" pos:end="153:24"><name pos:start="153:23" pos:end="153:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:33"><expr pos:start="161:5" pos:end="161:32"><name pos:start="161:5" pos:end="161:25"><name pos:start="161:5" pos:end="161:6">st</name><operator pos:start="161:7" pos:end="161:8">-&gt;</operator><name pos:start="161:9" pos:end="161:13">codec</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:25">codec_type</name></name> <operator pos:start="161:27" pos:end="161:27">=</operator> <name pos:start="161:29" pos:end="161:32">type</name></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="317:5"><if pos:start="163:5" pos:end="223:5">if <condition pos:start="163:8" pos:end="163:35">(<expr pos:start="163:9" pos:end="163:34"><name pos:start="163:9" pos:end="163:12">type</name> <operator pos:start="163:14" pos:end="163:15">==</operator> <name pos:start="163:17" pos:end="163:34">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="163:37" pos:end="223:5">{<block_content pos:start="165:9" pos:end="221:9">

        <decl_stmt pos:start="165:9" pos:end="165:71"><decl pos:start="165:9" pos:end="165:70"><type pos:start="165:9" pos:end="165:11"><name pos:start="165:9" pos:end="165:11">int</name></type> <name pos:start="165:13" pos:end="165:15">ret</name> <init pos:start="165:17" pos:end="165:70">= <expr pos:start="165:19" pos:end="165:70"><call pos:start="165:19" pos:end="165:70"><name pos:start="165:19" pos:end="165:35">ff_get_wav_header</name><argument_list pos:start="165:36" pos:end="165:70">(<argument pos:start="165:37" pos:end="165:38"><expr pos:start="165:37" pos:end="165:38"><name pos:start="165:37" pos:end="165:38">pb</name></expr></argument>, <argument pos:start="165:41" pos:end="165:49"><expr pos:start="165:41" pos:end="165:49"><name pos:start="165:41" pos:end="165:49"><name pos:start="165:41" pos:end="165:42">st</name><operator pos:start="165:43" pos:end="165:44">-&gt;</operator><name pos:start="165:45" pos:end="165:49">codec</name></name></expr></argument>, <argument pos:start="165:52" pos:end="165:69"><expr pos:start="165:52" pos:end="165:69"><name pos:start="165:52" pos:end="165:69">type_specific_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="167:9" pos:end="169:23"><if pos:start="167:9" pos:end="169:23">if <condition pos:start="167:12" pos:end="167:20">(<expr pos:start="167:13" pos:end="167:19"><name pos:start="167:13" pos:end="167:15">ret</name> <operator pos:start="167:17" pos:end="167:17">&lt;</operator> <literal type="number" pos:start="167:19" pos:end="167:19">0</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:23"><block_content pos:start="169:13" pos:end="169:23">

            <return pos:start="169:13" pos:end="169:23">return <expr pos:start="169:20" pos:end="169:22"><name pos:start="169:20" pos:end="169:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="181:9"><if pos:start="171:9" pos:end="181:9">if <condition pos:start="171:12" pos:end="171:28">(<expr pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:27">is_dvr_ms_audio</name></expr>)</condition> <block pos:start="171:30" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:37">

            <comment type="line" pos:start="173:13" pos:end="173:62">// codec_id and codec_tag are unreliable in dvr_ms</comment>

            <comment type="line" pos:start="175:13" pos:end="175:55">// files. Set them later by probing stream.</comment>

            <expr_stmt pos:start="177:13" pos:end="177:33"><expr pos:start="177:13" pos:end="177:32"><name pos:start="177:13" pos:end="177:29"><name pos:start="177:13" pos:end="177:14">st</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:29">request_probe</name></name><operator pos:start="177:30" pos:end="177:30">=</operator> <literal type="number" pos:start="177:32" pos:end="177:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:37"><expr pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:14">st</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:21">codec</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:32">codec_tag</name></name> <operator pos:start="179:34" pos:end="179:34">=</operator> <literal type="number" pos:start="179:36" pos:end="179:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="191:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:51">(<expr pos:start="183:13" pos:end="183:50"><name pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:14">st</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:21">codec</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:31">codec_id</name></name> <operator pos:start="183:33" pos:end="183:34">==</operator> <name pos:start="183:36" pos:end="183:50">AV_CODEC_ID_AAC</name></expr>)</condition> <block pos:start="183:53" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:51">

            <expr_stmt pos:start="185:13" pos:end="185:51"><expr pos:start="185:13" pos:end="185:50"><name pos:start="185:13" pos:end="185:28"><name pos:start="185:13" pos:end="185:14">st</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:28">need_parsing</name></name> <operator pos:start="185:30" pos:end="185:30">=</operator> <name pos:start="185:32" pos:end="185:50">AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="187:11" pos:end="191:9">else <block pos:start="187:16" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:51">

            <expr_stmt pos:start="189:13" pos:end="189:51"><expr pos:start="189:13" pos:end="189:50"><name pos:start="189:13" pos:end="189:28"><name pos:start="189:13" pos:end="189:14">st</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:28">need_parsing</name></name> <operator pos:start="189:30" pos:end="189:30">=</operator> <name pos:start="189:32" pos:end="189:50">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:63">/* We have to init the frame size at some point .... */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:29"><expr pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:12">pos2</name> <operator pos:start="195:14" pos:end="195:14">=</operator> <call pos:start="195:16" pos:end="195:28"><name pos:start="195:16" pos:end="195:24">avio_tell</name><argument_list pos:start="195:25" pos:end="195:28">(<argument pos:start="195:26" pos:end="195:27"><expr pos:start="195:26" pos:end="195:27"><name pos:start="195:26" pos:end="195:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="209:9"><if pos:start="197:9" pos:end="209:9">if <condition pos:start="197:12" pos:end="197:43">(<expr pos:start="197:13" pos:end="197:42"><name pos:start="197:13" pos:end="197:16">size</name> <operator pos:start="197:18" pos:end="197:19">&gt;=</operator> <operator pos:start="197:21" pos:end="197:21">(</operator><name pos:start="197:22" pos:end="197:25">pos2</name> <operator pos:start="197:27" pos:end="197:27">+</operator> <literal type="number" pos:start="197:29" pos:end="197:31">8</literal> <operator pos:start="197:31" pos:end="197:31">-</operator> <name pos:start="197:33" pos:end="197:36">pos1</name> <operator pos:start="197:38" pos:end="197:38">+</operator> <literal type="number" pos:start="197:40" pos:end="197:41">24</literal><operator pos:start="197:42" pos:end="197:42">)</operator></expr>)</condition> <block pos:start="197:45" pos:end="209:9">{<block_content pos:start="199:13" pos:end="207:24">

            <expr_stmt pos:start="199:13" pos:end="199:42"><expr pos:start="199:13" pos:end="199:41"><name pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:18">asf_st</name><operator pos:start="199:19" pos:end="199:20">-&gt;</operator><name pos:start="199:21" pos:end="199:27">ds_span</name></name> <operator pos:start="199:29" pos:end="199:29">=</operator> <call pos:start="199:31" pos:end="199:41"><name pos:start="199:31" pos:end="199:37">avio_r8</name><argument_list pos:start="199:38" pos:end="199:41">(<argument pos:start="199:39" pos:end="199:40"><expr pos:start="199:39" pos:end="199:40"><name pos:start="199:39" pos:end="199:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:51"><expr pos:start="201:13" pos:end="201:50"><name pos:start="201:13" pos:end="201:34"><name pos:start="201:13" pos:end="201:18">asf_st</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:34">ds_packet_size</name></name> <operator pos:start="201:36" pos:end="201:36">=</operator> <call pos:start="201:38" pos:end="201:50"><name pos:start="201:38" pos:end="201:46">avio_rl16</name><argument_list pos:start="201:47" pos:end="201:50">(<argument pos:start="201:48" pos:end="201:49"><expr pos:start="201:48" pos:end="201:49"><name pos:start="201:48" pos:end="201:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:50"><expr pos:start="203:13" pos:end="203:49"><name pos:start="203:13" pos:end="203:33"><name pos:start="203:13" pos:end="203:18">asf_st</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:33">ds_chunk_size</name></name> <operator pos:start="203:35" pos:end="203:35">=</operator> <call pos:start="203:37" pos:end="203:49"><name pos:start="203:37" pos:end="203:45">avio_rl16</name><argument_list pos:start="203:46" pos:end="203:49">(<argument pos:start="203:47" pos:end="203:48"><expr pos:start="203:47" pos:end="203:48"><name pos:start="203:47" pos:end="203:48">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:26"><expr pos:start="205:13" pos:end="205:25"><call pos:start="205:13" pos:end="205:25"><name pos:start="205:13" pos:end="205:21">avio_rl16</name><argument_list pos:start="205:22" pos:end="205:25">(<argument pos:start="205:23" pos:end="205:24"><expr pos:start="205:23" pos:end="205:24"><name pos:start="205:23" pos:end="205:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="205:28" pos:end="205:41">//ds_data_size</comment>

            <expr_stmt pos:start="207:13" pos:end="207:24"><expr pos:start="207:13" pos:end="207:23"><call pos:start="207:13" pos:end="207:23"><name pos:start="207:13" pos:end="207:19">avio_r8</name><argument_list pos:start="207:20" pos:end="207:23">(<argument pos:start="207:21" pos:end="207:22"><expr pos:start="207:21" pos:end="207:22"><name pos:start="207:21" pos:end="207:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="207:28" pos:end="207:44">//ds_silence_data</comment>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="221:9"><if pos:start="211:9" pos:end="221:9">if <condition pos:start="211:12" pos:end="211:32">(<expr pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:18">asf_st</name><operator pos:start="211:19" pos:end="211:20">-&gt;</operator><name pos:start="211:21" pos:end="211:27">ds_span</name></name> <operator pos:start="211:29" pos:end="211:29">&gt;</operator> <literal type="number" pos:start="211:31" pos:end="211:31">1</literal></expr>)</condition> <block pos:start="211:34" pos:end="221:9">{<block_content pos:start="213:13" pos:end="219:36">

            <if_stmt pos:start="213:13" pos:end="219:36"><if pos:start="213:13" pos:end="219:36">if <condition pos:start="213:16" pos:end="217:70">(<expr pos:start="213:17" pos:end="217:69"><operator pos:start="213:17" pos:end="213:17">!</operator><name pos:start="213:18" pos:end="213:38"><name pos:start="213:18" pos:end="213:23">asf_st</name><operator pos:start="213:24" pos:end="213:25">-&gt;</operator><name pos:start="213:26" pos:end="213:38">ds_chunk_size</name></name>

                    <operator pos:start="215:21" pos:end="215:22">||</operator> <operator pos:start="215:24" pos:end="215:24">(</operator><name pos:start="215:25" pos:end="215:46"><name pos:start="215:25" pos:end="215:30">asf_st</name><operator pos:start="215:31" pos:end="215:32">-&gt;</operator><name pos:start="215:33" pos:end="215:46">ds_packet_size</name></name><operator pos:start="215:47" pos:end="215:47">/</operator><name pos:start="215:48" pos:end="215:68"><name pos:start="215:48" pos:end="215:53">asf_st</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:68">ds_chunk_size</name></name> <operator pos:start="215:70" pos:end="215:71">&lt;=</operator> <literal type="number" pos:start="215:73" pos:end="215:73">1</literal><operator pos:start="215:74" pos:end="215:74">)</operator>

                    <operator pos:start="217:21" pos:end="217:22">||</operator> <name pos:start="217:24" pos:end="217:45"><name pos:start="217:24" pos:end="217:29">asf_st</name><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:45">ds_packet_size</name></name> <operator pos:start="217:47" pos:end="217:47">%</operator> <name pos:start="217:49" pos:end="217:69"><name pos:start="217:49" pos:end="217:54">asf_st</name><operator pos:start="217:55" pos:end="217:56">-&gt;</operator><name pos:start="217:57" pos:end="217:69">ds_chunk_size</name></name></expr>)</condition><block type="pseudo" pos:start="219:17" pos:end="219:36"><block_content pos:start="219:17" pos:end="219:36">

                <expr_stmt pos:start="219:17" pos:end="219:36"><expr pos:start="219:17" pos:end="219:35"><name pos:start="219:17" pos:end="219:31"><name pos:start="219:17" pos:end="219:22">asf_st</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:31">ds_span</name></name> <operator pos:start="219:33" pos:end="219:33">=</operator> <literal type="number" pos:start="219:35" pos:end="219:35">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="219:38" pos:end="219:60">// disable descrambling</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="223:7" pos:end="317:5">else if <condition pos:start="223:15" pos:end="225:53">(<expr pos:start="223:16" pos:end="225:52"><name pos:start="223:16" pos:end="223:19">type</name> <operator pos:start="223:21" pos:end="223:22">==</operator> <name pos:start="223:24" pos:end="223:41">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="223:43" pos:end="223:44">&amp;&amp;</operator>

            <name pos:start="225:13" pos:end="225:16">size</name> <operator pos:start="225:18" pos:end="225:18">-</operator> <operator pos:start="225:20" pos:end="225:20">(</operator><call pos:start="225:21" pos:end="225:33"><name pos:start="225:21" pos:end="225:29">avio_tell</name><argument_list pos:start="225:30" pos:end="225:33">(<argument pos:start="225:31" pos:end="225:32"><expr pos:start="225:31" pos:end="225:32"><name pos:start="225:31" pos:end="225:32">pb</name></expr></argument>)</argument_list></call> <operator pos:start="225:35" pos:end="225:35">-</operator> <name pos:start="225:37" pos:end="225:40">pos1</name> <operator pos:start="225:42" pos:end="225:42">+</operator> <literal type="number" pos:start="225:44" pos:end="225:45">24</literal><operator pos:start="225:46" pos:end="225:46">)</operator> <operator pos:start="225:48" pos:end="225:49">&gt;=</operator> <literal type="number" pos:start="225:51" pos:end="225:52">51</literal></expr>)</condition> <block pos:start="225:55" pos:end="317:5">{<block_content pos:start="227:9" pos:end="315:56">

        <expr_stmt pos:start="227:9" pos:end="227:22"><expr pos:start="227:9" pos:end="227:21"><call pos:start="227:9" pos:end="227:21"><name pos:start="227:9" pos:end="227:17">avio_rl32</name><argument_list pos:start="227:18" pos:end="227:21">(<argument pos:start="227:19" pos:end="227:20"><expr pos:start="227:19" pos:end="227:20"><name pos:start="227:19" pos:end="227:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:22"><expr pos:start="229:9" pos:end="229:21"><call pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:17">avio_rl32</name><argument_list pos:start="229:18" pos:end="229:21">(<argument pos:start="229:19" pos:end="229:20"><expr pos:start="229:19" pos:end="229:20"><name pos:start="229:19" pos:end="229:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:20"><expr pos:start="231:9" pos:end="231:19"><call pos:start="231:9" pos:end="231:19"><name pos:start="231:9" pos:end="231:15">avio_r8</name><argument_list pos:start="231:16" pos:end="231:19">(<argument pos:start="231:17" pos:end="231:18"><expr pos:start="231:17" pos:end="231:18"><name pos:start="231:17" pos:end="231:18">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:22"><expr pos:start="233:9" pos:end="233:21"><call pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:17">avio_rl16</name><argument_list pos:start="233:18" pos:end="233:21">(<argument pos:start="233:19" pos:end="233:20"><expr pos:start="233:19" pos:end="233:20"><name pos:start="233:19" pos:end="233:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block" pos:start="233:31" pos:end="233:40">/* size */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:29"><expr pos:start="235:9" pos:end="235:28"><name pos:start="235:9" pos:end="235:13">sizeX</name><operator pos:start="235:14" pos:end="235:14">=</operator> <call pos:start="235:16" pos:end="235:28"><name pos:start="235:16" pos:end="235:24">avio_rl32</name><argument_list pos:start="235:25" pos:end="235:28">(<argument pos:start="235:26" pos:end="235:27"><expr pos:start="235:26" pos:end="235:27"><name pos:start="235:26" pos:end="235:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="235:31" pos:end="235:40">/* size */</comment>

        <expr_stmt pos:start="237:9" pos:end="237:41"><expr pos:start="237:9" pos:end="237:40"><name pos:start="237:9" pos:end="237:24"><name pos:start="237:9" pos:end="237:10">st</name><operator pos:start="237:11" pos:end="237:12">-&gt;</operator><name pos:start="237:13" pos:end="237:17">codec</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:24">width</name></name> <operator pos:start="237:26" pos:end="237:26">=</operator> <call pos:start="237:28" pos:end="237:40"><name pos:start="237:28" pos:end="237:36">avio_rl32</name><argument_list pos:start="237:37" pos:end="237:40">(<argument pos:start="237:38" pos:end="237:39"><expr pos:start="237:38" pos:end="237:39"><name pos:start="237:38" pos:end="237:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:42"><expr pos:start="239:9" pos:end="239:41"><name pos:start="239:9" pos:end="239:25"><name pos:start="239:9" pos:end="239:10">st</name><operator pos:start="239:11" pos:end="239:12">-&gt;</operator><name pos:start="239:13" pos:end="239:17">codec</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:25">height</name></name> <operator pos:start="239:27" pos:end="239:27">=</operator> <call pos:start="239:29" pos:end="239:41"><name pos:start="239:29" pos:end="239:37">avio_rl32</name><argument_list pos:start="239:38" pos:end="239:41">(<argument pos:start="239:39" pos:end="239:40"><expr pos:start="239:39" pos:end="239:40"><name pos:start="239:39" pos:end="239:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="241:9" pos:end="241:35">/* not available for asf */</comment>

        <expr_stmt pos:start="243:9" pos:end="243:22"><expr pos:start="243:9" pos:end="243:21"><call pos:start="243:9" pos:end="243:21"><name pos:start="243:9" pos:end="243:17">avio_rl16</name><argument_list pos:start="243:18" pos:end="243:21">(<argument pos:start="243:19" pos:end="243:20"><expr pos:start="243:19" pos:end="243:20"><name pos:start="243:19" pos:end="243:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="243:24" pos:end="243:34">/* panes */</comment>

        <expr_stmt pos:start="245:9" pos:end="245:57"><expr pos:start="245:9" pos:end="245:56"><name pos:start="245:9" pos:end="245:40"><name pos:start="245:9" pos:end="245:10">st</name><operator pos:start="245:11" pos:end="245:12">-&gt;</operator><name pos:start="245:13" pos:end="245:17">codec</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:40">bits_per_coded_sample</name></name> <operator pos:start="245:42" pos:end="245:42">=</operator> <call pos:start="245:44" pos:end="245:56"><name pos:start="245:44" pos:end="245:52">avio_rl16</name><argument_list pos:start="245:53" pos:end="245:56">(<argument pos:start="245:54" pos:end="245:55"><expr pos:start="245:54" pos:end="245:55"><name pos:start="245:54" pos:end="245:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="245:59" pos:end="245:69">/* depth */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:29"><expr pos:start="247:9" pos:end="247:28"><name pos:start="247:9" pos:end="247:12">tag1</name> <operator pos:start="247:14" pos:end="247:14">=</operator> <call pos:start="247:16" pos:end="247:28"><name pos:start="247:16" pos:end="247:24">avio_rl32</name><argument_list pos:start="247:25" pos:end="247:28">(<argument pos:start="247:26" pos:end="247:27"><expr pos:start="247:26" pos:end="247:27"><name pos:start="247:26" pos:end="247:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:26"><expr pos:start="249:9" pos:end="249:25"><call pos:start="249:9" pos:end="249:25"><name pos:start="249:9" pos:end="249:17">avio_skip</name><argument_list pos:start="249:18" pos:end="249:25">(<argument pos:start="249:19" pos:end="249:20"><expr pos:start="249:19" pos:end="249:20"><name pos:start="249:19" pos:end="249:20">pb</name></expr></argument>, <argument pos:start="249:23" pos:end="249:24"><expr pos:start="249:23" pos:end="249:24"><literal type="number" pos:start="249:23" pos:end="249:24">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="259:9"><if pos:start="251:9" pos:end="259:9">if <condition pos:start="251:12" pos:end="251:23">(<expr pos:start="251:13" pos:end="251:22"><name pos:start="251:13" pos:end="251:17">sizeX</name> <operator pos:start="251:19" pos:end="251:19">&gt;</operator> <literal type="number" pos:start="251:21" pos:end="251:22">40</literal></expr>)</condition> <block pos:start="251:25" pos:end="259:9">{<block_content pos:start="253:13" pos:end="257:75">

            <expr_stmt pos:start="253:13" pos:end="253:51"><expr pos:start="253:13" pos:end="253:50"><name pos:start="253:13" pos:end="253:37"><name pos:start="253:13" pos:end="253:14">st</name><operator pos:start="253:15" pos:end="253:16">-&gt;</operator><name pos:start="253:17" pos:end="253:21">codec</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:37">extradata_size</name></name> <operator pos:start="253:39" pos:end="253:39">=</operator> <name pos:start="253:41" pos:end="253:45">sizeX</name> <operator pos:start="253:47" pos:end="253:47">-</operator> <literal type="number" pos:start="253:49" pos:end="253:50">40</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:104"><expr pos:start="255:13" pos:end="255:103"><name pos:start="255:13" pos:end="255:32"><name pos:start="255:13" pos:end="255:14">st</name><operator pos:start="255:15" pos:end="255:16">-&gt;</operator><name pos:start="255:17" pos:end="255:21">codec</name><operator pos:start="255:22" pos:end="255:23">-&gt;</operator><name pos:start="255:24" pos:end="255:32">extradata</name></name> <operator pos:start="255:34" pos:end="255:34">=</operator> <call pos:start="255:36" pos:end="255:103"><name pos:start="255:36" pos:end="255:45">av_mallocz</name><argument_list pos:start="255:46" pos:end="255:103">(<argument pos:start="255:47" pos:end="255:102"><expr pos:start="255:47" pos:end="255:102"><name pos:start="255:47" pos:end="255:71"><name pos:start="255:47" pos:end="255:48">st</name><operator pos:start="255:49" pos:end="255:50">-&gt;</operator><name pos:start="255:51" pos:end="255:55">codec</name><operator pos:start="255:56" pos:end="255:57">-&gt;</operator><name pos:start="255:58" pos:end="255:71">extradata_size</name></name> <operator pos:start="255:73" pos:end="255:73">+</operator> <name pos:start="255:75" pos:end="255:102">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:75"><expr pos:start="257:13" pos:end="257:74"><call pos:start="257:13" pos:end="257:74"><name pos:start="257:13" pos:end="257:21">avio_read</name><argument_list pos:start="257:22" pos:end="257:74">(<argument pos:start="257:23" pos:end="257:24"><expr pos:start="257:23" pos:end="257:24"><name pos:start="257:23" pos:end="257:24">pb</name></expr></argument>, <argument pos:start="257:27" pos:end="257:46"><expr pos:start="257:27" pos:end="257:46"><name pos:start="257:27" pos:end="257:46"><name pos:start="257:27" pos:end="257:28">st</name><operator pos:start="257:29" pos:end="257:30">-&gt;</operator><name pos:start="257:31" pos:end="257:35">codec</name><operator pos:start="257:36" pos:end="257:37">-&gt;</operator><name pos:start="257:38" pos:end="257:46">extradata</name></name></expr></argument>, <argument pos:start="257:49" pos:end="257:73"><expr pos:start="257:49" pos:end="257:73"><name pos:start="257:49" pos:end="257:73"><name pos:start="257:49" pos:end="257:50">st</name><operator pos:start="257:51" pos:end="257:52">-&gt;</operator><name pos:start="257:53" pos:end="257:57">codec</name><operator pos:start="257:58" pos:end="257:59">-&gt;</operator><name pos:start="257:60" pos:end="257:73">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="263:9" pos:end="263:56">/* Extract palette from extradata if bpp &lt;= 8 */</comment>

        <comment type="block" pos:start="265:9" pos:end="265:68">/* This code assumes that extradata contains only palette */</comment>

        <comment type="block" pos:start="267:9" pos:end="267:76">/* This is true for all paletted codecs implemented in libavcodec */</comment>

        <if_stmt pos:start="269:9" pos:end="289:9"><if pos:start="269:9" pos:end="289:9">if <condition pos:start="269:12" pos:end="269:81">(<expr pos:start="269:13" pos:end="269:80"><name pos:start="269:13" pos:end="269:37"><name pos:start="269:13" pos:end="269:14">st</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:21">codec</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:37">extradata_size</name></name> <operator pos:start="269:39" pos:end="269:40">&amp;&amp;</operator> <operator pos:start="269:42" pos:end="269:42">(</operator><name pos:start="269:43" pos:end="269:74"><name pos:start="269:43" pos:end="269:44">st</name><operator pos:start="269:45" pos:end="269:46">-&gt;</operator><name pos:start="269:47" pos:end="269:51">codec</name><operator pos:start="269:52" pos:end="269:53">-&gt;</operator><name pos:start="269:54" pos:end="269:74">bits_per_coded_sample</name></name> <operator pos:start="269:76" pos:end="269:77">&lt;=</operator> <literal type="number" pos:start="269:79" pos:end="269:79">8</literal><operator pos:start="269:80" pos:end="269:80">)</operator></expr>)</condition> <block pos:start="269:83" pos:end="289:9">{<block_content pos:start="273:13" pos:end="287:40">

<cpp:if pos:start="271:1" pos:end="271:18">#<cpp:directive pos:start="271:2" pos:end="271:3">if</cpp:directive> <expr pos:start="271:5" pos:end="271:18"><name pos:start="271:5" pos:end="271:18">HAVE_BIGENDIAN</name></expr></cpp:if>

            <decl_stmt pos:start="273:13" pos:end="273:18"><decl pos:start="273:13" pos:end="273:17"><type pos:start="273:13" pos:end="273:15"><name pos:start="273:13" pos:end="273:15">int</name></type> <name pos:start="273:17" pos:end="273:17">i</name></decl>;</decl_stmt>

            <for pos:start="275:13" pos:end="280:0">for <control pos:start="275:17" pos:end="275:84">(<init pos:start="275:18" pos:end="275:23"><expr pos:start="275:18" pos:end="275:22"><name pos:start="275:18" pos:end="275:18">i</name> <operator pos:start="275:20" pos:end="275:20">=</operator> <literal type="number" pos:start="275:22" pos:end="275:22">0</literal></expr>;</init> <condition pos:start="275:25" pos:end="275:79"><expr pos:start="275:25" pos:end="275:78"><name pos:start="275:25" pos:end="275:25">i</name> <operator pos:start="275:27" pos:end="275:27">&lt;</operator> <call pos:start="275:29" pos:end="275:76"><name pos:start="275:29" pos:end="275:33">FFMIN</name><argument_list pos:start="275:34" pos:end="275:76">(<argument pos:start="275:35" pos:end="275:59"><expr pos:start="275:35" pos:end="275:59"><name pos:start="275:35" pos:end="275:59"><name pos:start="275:35" pos:end="275:36">st</name><operator pos:start="275:37" pos:end="275:38">-&gt;</operator><name pos:start="275:39" pos:end="275:43">codec</name><operator pos:start="275:44" pos:end="275:45">-&gt;</operator><name pos:start="275:46" pos:end="275:59">extradata_size</name></name></expr></argument>, <argument pos:start="275:62" pos:end="275:75"><expr pos:start="275:62" pos:end="275:75"><name pos:start="275:62" pos:end="275:75">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="275:77" pos:end="275:77">/</operator><literal type="number" pos:start="275:78" pos:end="275:78">4</literal></expr>;</condition> <incr pos:start="275:81" pos:end="275:83"><expr pos:start="275:81" pos:end="275:83"><name pos:start="275:81" pos:end="275:81">i</name><operator pos:start="275:82" pos:end="275:83">++</operator></expr></incr>)</control><block type="pseudo" pos:start="277:17" pos:end="280:0"><block_content pos:start="277:17" pos:end="280:0">

                <expr_stmt pos:start="277:17" pos:end="280:0"><expr pos:start="277:17" pos:end="277:85"><name pos:start="277:17" pos:end="277:34"><name pos:start="277:17" pos:end="277:22">asf_st</name><operator pos:start="277:23" pos:end="277:24">-&gt;</operator><name pos:start="277:25" pos:end="277:31">palette</name><index pos:start="277:32" pos:end="277:34">[<expr pos:start="277:33" pos:end="277:33"><name pos:start="277:33" pos:end="277:33">i</name></expr>]</index></name> <operator pos:start="277:36" pos:end="277:36">=</operator> <call pos:start="277:38" pos:end="277:85"><name pos:start="277:38" pos:end="277:47">av_bswap32</name><argument_list pos:start="277:48" pos:end="277:85">(<argument pos:start="277:49" pos:end="277:84"><expr pos:start="277:49" pos:end="277:84"><operator pos:start="277:49" pos:end="277:49">(</operator><operator pos:start="277:50" pos:end="277:50">(</operator><name pos:start="277:51" pos:end="277:58">uint32_t</name><operator pos:start="277:59" pos:end="277:59">*</operator><operator pos:start="277:60" pos:end="277:60">)</operator><name pos:start="277:61" pos:end="277:80"><name pos:start="277:61" pos:end="277:62">st</name><operator pos:start="277:63" pos:end="277:64">-&gt;</operator><name pos:start="277:65" pos:end="277:69">codec</name><operator pos:start="277:70" pos:end="277:71">-&gt;</operator><name pos:start="277:72" pos:end="277:80">extradata</name></name><operator pos:start="277:81" pos:end="277:81">)</operator><index pos:start="277:82" pos:end="277:84">[<expr pos:start="277:83" pos:end="277:83"><name pos:start="277:83" pos:end="277:83">i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else pos:start="279:1" pos:end="279:5">#<cpp:directive pos:start="279:2" pos:end="279:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="281:13" pos:end="286:0"><expr pos:start="281:13" pos:end="283:68"><call pos:start="281:13" pos:end="283:68"><name pos:start="281:13" pos:end="281:18">memcpy</name><argument_list pos:start="281:19" pos:end="283:68">(<argument pos:start="281:20" pos:end="281:34"><expr pos:start="281:20" pos:end="281:34"><name pos:start="281:20" pos:end="281:34"><name pos:start="281:20" pos:end="281:25">asf_st</name><operator pos:start="281:26" pos:end="281:27">-&gt;</operator><name pos:start="281:28" pos:end="281:34">palette</name></name></expr></argument>, <argument pos:start="281:37" pos:end="281:56"><expr pos:start="281:37" pos:end="281:56"><name pos:start="281:37" pos:end="281:56"><name pos:start="281:37" pos:end="281:38">st</name><operator pos:start="281:39" pos:end="281:40">-&gt;</operator><name pos:start="281:41" pos:end="281:45">codec</name><operator pos:start="281:46" pos:end="281:47">-&gt;</operator><name pos:start="281:48" pos:end="281:56">extradata</name></name></expr></argument>,

                   <argument pos:start="283:20" pos:end="283:67"><expr pos:start="283:20" pos:end="283:67"><call pos:start="283:20" pos:end="283:67"><name pos:start="283:20" pos:end="283:24">FFMIN</name><argument_list pos:start="283:25" pos:end="283:67">(<argument pos:start="283:26" pos:end="283:50"><expr pos:start="283:26" pos:end="283:50"><name pos:start="283:26" pos:end="283:50"><name pos:start="283:26" pos:end="283:27">st</name><operator pos:start="283:28" pos:end="283:29">-&gt;</operator><name pos:start="283:30" pos:end="283:34">codec</name><operator pos:start="283:35" pos:end="283:36">-&gt;</operator><name pos:start="283:37" pos:end="283:50">extradata_size</name></name></expr></argument>, <argument pos:start="283:53" pos:end="283:66"><expr pos:start="283:53" pos:end="283:66"><name pos:start="283:53" pos:end="283:66">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="285:1" pos:end="285:6">#<cpp:directive pos:start="285:2" pos:end="285:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="287:13" pos:end="287:40"><expr pos:start="287:13" pos:end="287:39"><name pos:start="287:13" pos:end="287:35"><name pos:start="287:13" pos:end="287:18">asf_st</name><operator pos:start="287:19" pos:end="287:20">-&gt;</operator><name pos:start="287:21" pos:end="287:35">palette_changed</name></name> <operator pos:start="287:37" pos:end="287:37">=</operator> <literal type="number" pos:start="287:39" pos:end="287:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="293:9" pos:end="293:36"><expr pos:start="293:9" pos:end="293:35"><name pos:start="293:9" pos:end="293:28"><name pos:start="293:9" pos:end="293:10">st</name><operator pos:start="293:11" pos:end="293:12">-&gt;</operator><name pos:start="293:13" pos:end="293:17">codec</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:28">codec_tag</name></name> <operator pos:start="293:30" pos:end="293:30">=</operator> <name pos:start="293:32" pos:end="293:35">tag1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:71"><expr pos:start="295:9" pos:end="295:70"><name pos:start="295:9" pos:end="295:27"><name pos:start="295:9" pos:end="295:10">st</name><operator pos:start="295:11" pos:end="295:12">-&gt;</operator><name pos:start="295:13" pos:end="295:17">codec</name><operator pos:start="295:18" pos:end="295:19">-&gt;</operator><name pos:start="295:20" pos:end="295:27">codec_id</name></name> <operator pos:start="295:29" pos:end="295:29">=</operator> <call pos:start="295:31" pos:end="295:70"><name pos:start="295:31" pos:end="295:45">ff_codec_get_id</name><argument_list pos:start="295:46" pos:end="295:70">(<argument pos:start="295:47" pos:end="295:63"><expr pos:start="295:47" pos:end="295:63"><name pos:start="295:47" pos:end="295:63">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="295:66" pos:end="295:69"><expr pos:start="295:66" pos:end="295:69"><name pos:start="295:66" pos:end="295:69">tag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="297:9" pos:end="311:9"><if pos:start="297:9" pos:end="311:9">if<condition pos:start="297:11" pos:end="297:45">(<expr pos:start="297:12" pos:end="297:44"><name pos:start="297:12" pos:end="297:15">tag1</name> <operator pos:start="297:17" pos:end="297:18">==</operator> <call pos:start="297:20" pos:end="297:44"><name pos:start="297:20" pos:end="297:24">MKTAG</name><argument_list pos:start="297:25" pos:end="297:44">(<argument pos:start="297:26" pos:end="297:28"><expr pos:start="297:26" pos:end="297:28"><literal type="char" pos:start="297:26" pos:end="297:28">'D'</literal></expr></argument>, <argument pos:start="297:31" pos:end="297:33"><expr pos:start="297:31" pos:end="297:33"><literal type="char" pos:start="297:31" pos:end="297:33">'V'</literal></expr></argument>, <argument pos:start="297:36" pos:end="297:38"><expr pos:start="297:36" pos:end="297:38"><literal type="char" pos:start="297:36" pos:end="297:38">'R'</literal></expr></argument>, <argument pos:start="297:41" pos:end="297:43"><expr pos:start="297:41" pos:end="297:43"><literal type="char" pos:start="297:41" pos:end="297:43">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="297:46" pos:end="311:9">{<block_content pos:start="299:13" pos:end="309:40">

            <expr_stmt pos:start="299:13" pos:end="299:51"><expr pos:start="299:13" pos:end="299:50"><name pos:start="299:13" pos:end="299:28"><name pos:start="299:13" pos:end="299:14">st</name><operator pos:start="299:15" pos:end="299:16">-&gt;</operator><name pos:start="299:17" pos:end="299:28">need_parsing</name></name> <operator pos:start="299:30" pos:end="299:30">=</operator> <name pos:start="299:32" pos:end="299:50">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

            <comment type="line" pos:start="301:13" pos:end="301:160">// issue658 containse wrong w/h and MS even puts a fake seq header with wrong w/h in extradata while a correct one is in te stream. maximum lameness</comment>

            <expr_stmt pos:start="303:13" pos:end="305:38"><expr pos:start="303:13" pos:end="305:37"><name pos:start="303:13" pos:end="303:28"><name pos:start="303:13" pos:end="303:14">st</name><operator pos:start="303:15" pos:end="303:16">-&gt;</operator><name pos:start="303:17" pos:end="303:21">codec</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:28">width</name></name>  <operator pos:start="303:31" pos:end="303:31">=</operator>

                <name pos:start="305:17" pos:end="305:33"><name pos:start="305:17" pos:end="305:18">st</name><operator pos:start="305:19" pos:end="305:20">-&gt;</operator><name pos:start="305:21" pos:end="305:25">codec</name><operator pos:start="305:26" pos:end="305:27">-&gt;</operator><name pos:start="305:28" pos:end="305:33">height</name></name> <operator pos:start="305:35" pos:end="305:35">=</operator> <literal type="number" pos:start="305:37" pos:end="305:37">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:44"><expr pos:start="307:13" pos:end="307:43"><call pos:start="307:13" pos:end="307:43"><name pos:start="307:13" pos:end="307:20">av_freep</name><argument_list pos:start="307:21" pos:end="307:43">(<argument pos:start="307:22" pos:end="307:42"><expr pos:start="307:22" pos:end="307:42"><operator pos:start="307:22" pos:end="307:22">&amp;</operator><name pos:start="307:23" pos:end="307:42"><name pos:start="307:23" pos:end="307:24">st</name><operator pos:start="307:25" pos:end="307:26">-&gt;</operator><name pos:start="307:27" pos:end="307:31">codec</name><operator pos:start="307:32" pos:end="307:33">-&gt;</operator><name pos:start="307:34" pos:end="307:42">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:40"><expr pos:start="309:13" pos:end="309:39"><name pos:start="309:13" pos:end="309:37"><name pos:start="309:13" pos:end="309:14">st</name><operator pos:start="309:15" pos:end="309:16">-&gt;</operator><name pos:start="309:17" pos:end="309:21">codec</name><operator pos:start="309:22" pos:end="309:23">-&gt;</operator><name pos:start="309:24" pos:end="309:37">extradata_size</name></name><operator pos:start="309:38" pos:end="309:38">=</operator><literal type="number" pos:start="309:39" pos:end="309:39">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="313:9" pos:end="315:56"><if pos:start="313:9" pos:end="315:56">if<condition pos:start="313:11" pos:end="313:51">(<expr pos:start="313:12" pos:end="313:50"><name pos:start="313:12" pos:end="313:30"><name pos:start="313:12" pos:end="313:13">st</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:20">codec</name><operator pos:start="313:21" pos:end="313:22">-&gt;</operator><name pos:start="313:23" pos:end="313:30">codec_id</name></name> <operator pos:start="313:32" pos:end="313:33">==</operator> <name pos:start="313:35" pos:end="313:50">AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo" pos:start="315:13" pos:end="315:56"><block_content pos:start="315:13" pos:end="315:56">

            <expr_stmt pos:start="315:13" pos:end="315:56"><expr pos:start="315:13" pos:end="315:55"><name pos:start="315:13" pos:end="315:28"><name pos:start="315:13" pos:end="315:14">st</name><operator pos:start="315:15" pos:end="315:16">-&gt;</operator><name pos:start="315:17" pos:end="315:28">need_parsing</name></name> <operator pos:start="315:30" pos:end="315:30">=</operator> <name pos:start="315:32" pos:end="315:55">AVSTREAM_PARSE_FULL_ONCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:25"><expr pos:start="319:5" pos:end="319:24"><name pos:start="319:5" pos:end="319:8">pos2</name> <operator pos:start="319:10" pos:end="319:10">=</operator> <call pos:start="319:12" pos:end="319:24"><name pos:start="319:12" pos:end="319:20">avio_tell</name><argument_list pos:start="319:21" pos:end="319:24">(<argument pos:start="319:22" pos:end="319:23"><expr pos:start="319:22" pos:end="319:23"><name pos:start="319:22" pos:end="319:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:45"><expr pos:start="321:5" pos:end="321:44"><call pos:start="321:5" pos:end="321:44"><name pos:start="321:5" pos:end="321:13">avio_skip</name><argument_list pos:start="321:14" pos:end="321:44">(<argument pos:start="321:15" pos:end="321:16"><expr pos:start="321:15" pos:end="321:16"><name pos:start="321:15" pos:end="321:16">pb</name></expr></argument>, <argument pos:start="321:19" pos:end="321:43"><expr pos:start="321:19" pos:end="321:43"><name pos:start="321:19" pos:end="321:22">size</name> <operator pos:start="321:24" pos:end="321:24">-</operator> <operator pos:start="321:26" pos:end="321:26">(</operator><name pos:start="321:27" pos:end="321:30">pos2</name> <operator pos:start="321:32" pos:end="321:32">-</operator> <name pos:start="321:34" pos:end="321:37">pos1</name> <operator pos:start="321:39" pos:end="321:39">+</operator> <literal type="number" pos:start="321:41" pos:end="321:42">24</literal><operator pos:start="321:43" pos:end="321:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="325:5" pos:end="325:13">return <expr pos:start="325:12" pos:end="325:12"><literal type="number" pos:start="325:12" pos:end="325:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
