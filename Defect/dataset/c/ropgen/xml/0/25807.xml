<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25807.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_encode_audio2</name><parameter_list pos:start="1:46" pos:end="7:66">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:54">AVPacket</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:61">avpkt</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:66"><decl pos:start="5:47" pos:end="5:66"><type pos:start="5:47" pos:end="5:66"><specifier pos:start="5:47" pos:end="5:51">const</specifier> <name pos:start="5:53" pos:end="5:59">AVFrame</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:66">frame</name></decl></parameter>,

                                              <parameter pos:start="7:47" pos:end="7:65"><decl pos:start="7:47" pos:end="7:65"><type pos:start="7:47" pos:end="7:65"><name pos:start="7:47" pos:end="7:49">int</name> <modifier pos:start="7:51" pos:end="7:51">*</modifier></type><name pos:start="7:52" pos:end="7:65">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="243:1">{<block_content pos:start="11:5" pos:end="241:15">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">AVFrame</name></type> <name pos:start="11:13" pos:end="11:15">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:25">padded_frame</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">AVPacket</name></type> <name pos:start="17:14" pos:end="17:21">user_pkt</name> <init pos:start="17:23" pos:end="17:30">= <expr pos:start="17:25" pos:end="17:30"><operator pos:start="17:25" pos:end="17:25">*</operator><name pos:start="17:26" pos:end="17:30">avpkt</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21">needs_realloc</name> <init pos:start="19:23" pos:end="19:38">= <expr pos:start="19:25" pos:end="19:38"><operator pos:start="19:25" pos:end="19:25">!</operator><name pos:start="19:26" pos:end="19:38"><name pos:start="19:26" pos:end="19:33">user_pkt</name><operator pos:start="19:34" pos:end="19:34">.</operator><name pos:start="19:35" pos:end="19:38">data</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:19">got_packet_ptr</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:66">(<expr pos:start="27:9" pos:end="27:65"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">(</operator><name pos:start="27:11" pos:end="27:36"><name pos:start="27:11" pos:end="27:15">avctx</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:22">codec</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:36">capabilities</name></name> <operator pos:start="27:38" pos:end="27:38">&amp;</operator> <name pos:start="27:40" pos:end="27:54">CODEC_CAP_DELAY</name><operator pos:start="27:55" pos:end="27:55">)</operator> <operator pos:start="27:57" pos:end="27:58">&amp;&amp;</operator> <operator pos:start="27:60" pos:end="27:60">!</operator><name pos:start="27:61" pos:end="27:65">frame</name></expr>)</condition> <block pos:start="27:68" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:17">

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:22">av_free_packet</name><argument_list pos:start="29:23" pos:end="29:29">(<argument pos:start="29:24" pos:end="29:28"><expr pos:start="29:24" pos:end="29:28"><name pos:start="29:24" pos:end="29:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><call pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:22">av_init_packet</name><argument_list pos:start="31:23" pos:end="31:29">(<argument pos:start="31:24" pos:end="31:28"><expr pos:start="31:24" pos:end="31:28"><name pos:start="31:24" pos:end="31:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:51">/* ensure that extended_data is properly set */</comment>

    <if_stmt pos:start="41:5" pos:end="67:5"><if pos:start="41:5" pos:end="67:5">if <condition pos:start="41:8" pos:end="41:39">(<expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:13">frame</name> <operator pos:start="41:15" pos:end="41:16">&amp;&amp;</operator> <operator pos:start="41:18" pos:end="41:18">!</operator><name pos:start="41:19" pos:end="41:38"><name pos:start="41:19" pos:end="41:23">frame</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:38">extended_data</name></name></expr>)</condition> <block pos:start="41:41" pos:end="67:5">{<block_content pos:start="43:9" pos:end="65:21">

        <if_stmt pos:start="43:9" pos:end="55:9"><if pos:start="43:9" pos:end="55:9">if <condition pos:start="43:12" pos:end="45:51">(<expr pos:start="43:13" pos:end="45:50"><call pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:35">av_sample_fmt_is_planar</name><argument_list pos:start="43:36" pos:end="43:54">(<argument pos:start="43:37" pos:end="43:53"><expr pos:start="43:37" pos:end="43:53"><name pos:start="43:37" pos:end="43:53"><name pos:start="43:37" pos:end="43:41">avctx</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:53">sample_fmt</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:56" pos:end="43:57">&amp;&amp;</operator>

            <name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:17">avctx</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:27">channels</name></name> <operator pos:start="45:29" pos:end="45:29">&gt;</operator> <name pos:start="45:31" pos:end="45:50">AV_NUM_DATA_POINTERS</name></expr>)</condition> <block pos:start="45:53" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:35">

            <expr_stmt pos:start="47:13" pos:end="51:41"><expr pos:start="47:13" pos:end="51:40"><call pos:start="47:13" pos:end="51:40"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="51:40">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="49:101"><expr pos:start="47:41" pos:end="49:101"><literal type="string" pos:start="47:41" pos:end="47:78">"Encoding to a planar sample format, "</literal>

                                        <literal type="string" pos:start="49:41" pos:end="49:101">"with more than %d channels, but extended_data is not set.\n"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:39"><expr pos:start="51:20" pos:end="51:39"><name pos:start="51:20" pos:end="51:39">AV_NUM_DATA_POINTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:35">return <expr pos:start="53:20" pos:end="53:34"><call pos:start="53:20" pos:end="53:34"><name pos:start="53:20" pos:end="53:26">AVERROR</name><argument_list pos:start="53:27" pos:end="53:34">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:69"><expr pos:start="57:9" pos:end="57:68"><call pos:start="57:9" pos:end="57:68"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:68">(<argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">avctx</name></expr></argument>, <argument pos:start="57:23" pos:end="57:36"><expr pos:start="57:23" pos:end="57:36"><name pos:start="57:23" pos:end="57:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="57:39" pos:end="57:67"><expr pos:start="57:39" pos:end="57:67"><literal type="string" pos:start="57:39" pos:end="57:67">"extended_data is not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:21"><expr pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:11">tmp</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <operator pos:start="61:15" pos:end="61:15">*</operator><name pos:start="61:16" pos:end="61:20">frame</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:11">tmp</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:25">extended_data</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:36"><name pos:start="63:29" pos:end="63:31">tmp</name><operator pos:start="63:32" pos:end="63:32">.</operator><name pos:start="63:33" pos:end="63:36">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:21"><expr pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:13">frame</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <operator pos:start="65:17" pos:end="65:17">&amp;</operator><name pos:start="65:18" pos:end="65:20">tmp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:36">/* check for valid frame size */</comment>

    <if_stmt pos:start="73:5" pos:end="119:5"><if pos:start="73:5" pos:end="119:5">if <condition pos:start="73:8" pos:end="73:14">(<expr pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13">frame</name></expr>)</condition> <block pos:start="73:16" pos:end="119:5">{<block_content pos:start="75:9" pos:end="117:9">

        <if_stmt pos:start="75:9" pos:end="117:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:68">(<expr pos:start="75:13" pos:end="75:67"><name pos:start="75:13" pos:end="75:38"><name pos:start="75:13" pos:end="75:17">avctx</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:24">codec</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:38">capabilities</name></name> <operator pos:start="75:40" pos:end="75:40">&amp;</operator> <name pos:start="75:42" pos:end="75:67">CODEC_CAP_SMALL_LAST_FRAME</name></expr>)</condition> <block pos:start="75:70" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:13">

            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if <condition pos:start="77:16" pos:end="77:54">(<expr pos:start="77:17" pos:end="77:53"><name pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:21">frame</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:33">nb_samples</name></name> <operator pos:start="77:35" pos:end="77:35">&gt;</operator> <name pos:start="77:37" pos:end="77:53"><name pos:start="77:37" pos:end="77:41">avctx</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:53">frame_size</name></name></expr>)</condition> <block pos:start="77:56" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:39">

                <expr_stmt pos:start="79:17" pos:end="79:102"><expr pos:start="79:17" pos:end="79:101"><call pos:start="79:17" pos:end="79:101"><name pos:start="79:17" pos:end="79:22">av_log</name><argument_list pos:start="79:23" pos:end="79:101">(<argument pos:start="79:24" pos:end="79:28"><expr pos:start="79:24" pos:end="79:28"><name pos:start="79:24" pos:end="79:28">avctx</name></expr></argument>, <argument pos:start="79:31" pos:end="79:42"><expr pos:start="79:31" pos:end="79:42"><name pos:start="79:31" pos:end="79:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:45" pos:end="79:100"><expr pos:start="79:45" pos:end="79:100"><literal type="string" pos:start="79:45" pos:end="79:100">"more samples than frame size (avcodec_encode_audio2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:39">return <expr pos:start="81:24" pos:end="81:38"><call pos:start="81:24" pos:end="81:38"><name pos:start="81:24" pos:end="81:30">AVERROR</name><argument_list pos:start="81:31" pos:end="81:38">(<argument pos:start="81:32" pos:end="81:37"><expr pos:start="81:32" pos:end="81:37"><name pos:start="81:32" pos:end="81:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="117:9">else if <condition pos:start="85:19" pos:end="85:81">(<expr pos:start="85:20" pos:end="85:80"><operator pos:start="85:20" pos:end="85:20">!</operator><operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:47"><name pos:start="85:22" pos:end="85:26">avctx</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:33">codec</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:47">capabilities</name></name> <operator pos:start="85:49" pos:end="85:49">&amp;</operator> <name pos:start="85:51" pos:end="85:79">CODEC_CAP_VARIABLE_FRAME_SIZE</name><operator pos:start="85:80" pos:end="85:80">)</operator></expr>)</condition> <block pos:start="85:83" pos:end="117:9">{<block_content pos:start="87:13" pos:end="115:13">

            <if_stmt pos:start="87:13" pos:end="103:13"><if pos:start="87:13" pos:end="103:13">if <condition pos:start="87:16" pos:end="89:51">(<expr pos:start="87:17" pos:end="89:50"><name pos:start="87:17" pos:end="87:33"><name pos:start="87:17" pos:end="87:21">frame</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:33">nb_samples</name></name> <operator pos:start="87:35" pos:end="87:35">&lt;</operator> <name pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:41">avctx</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:53">frame_size</name></name> <operator pos:start="87:55" pos:end="87:56">&amp;&amp;</operator>

                <operator pos:start="89:17" pos:end="89:17">!</operator><name pos:start="89:18" pos:end="89:50"><name pos:start="89:18" pos:end="89:22">avctx</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:32">internal</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:50">last_audio_frame</name></name></expr>)</condition> <block pos:start="89:53" pos:end="103:13">{<block_content pos:start="91:17" pos:end="101:54">

                <expr_stmt pos:start="91:17" pos:end="91:66"><expr pos:start="91:17" pos:end="91:65"><name pos:start="91:17" pos:end="91:19">ret</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:65"><name pos:start="91:23" pos:end="91:36">pad_last_frame</name><argument_list pos:start="91:37" pos:end="91:65">(<argument pos:start="91:38" pos:end="91:42"><expr pos:start="91:38" pos:end="91:42"><name pos:start="91:38" pos:end="91:42">avctx</name></expr></argument>, <argument pos:start="91:45" pos:end="91:57"><expr pos:start="91:45" pos:end="91:57"><operator pos:start="91:45" pos:end="91:45">&amp;</operator><name pos:start="91:46" pos:end="91:57">padded_frame</name></expr></argument>, <argument pos:start="91:60" pos:end="91:64"><expr pos:start="91:60" pos:end="91:64"><name pos:start="91:60" pos:end="91:64">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="95:31"><if pos:start="93:17" pos:end="95:31">if <condition pos:start="93:20" pos:end="93:28">(<expr pos:start="93:21" pos:end="93:27"><name pos:start="93:21" pos:end="93:23">ret</name> <operator pos:start="93:25" pos:end="93:25">&lt;</operator> <literal type="number" pos:start="93:27" pos:end="93:27">0</literal></expr>)</condition><block type="pseudo" pos:start="95:21" pos:end="95:31"><block_content pos:start="95:21" pos:end="95:31">

                    <return pos:start="95:21" pos:end="95:31">return <expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="99:17" pos:end="99:37"><expr pos:start="99:17" pos:end="99:36"><name pos:start="99:17" pos:end="99:21">frame</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:36">padded_frame</name></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:54"><expr pos:start="101:17" pos:end="101:53"><name pos:start="101:17" pos:end="101:49"><name pos:start="101:17" pos:end="101:21">avctx</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:31">internal</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:49">last_audio_frame</name></name> <operator pos:start="101:51" pos:end="101:51">=</operator> <literal type="number" pos:start="101:53" pos:end="101:53">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:55">(<expr pos:start="107:17" pos:end="107:54"><name pos:start="107:17" pos:end="107:33"><name pos:start="107:17" pos:end="107:21">frame</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:33">nb_samples</name></name> <operator pos:start="107:35" pos:end="107:36">!=</operator> <name pos:start="107:38" pos:end="107:54"><name pos:start="107:38" pos:end="107:42">avctx</name><operator pos:start="107:43" pos:end="107:44">-&gt;</operator><name pos:start="107:45" pos:end="107:54">frame_size</name></name></expr>)</condition> <block pos:start="107:57" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:25">

                <expr_stmt pos:start="109:17" pos:end="109:146"><expr pos:start="109:17" pos:end="109:145"><call pos:start="109:17" pos:end="109:145"><name pos:start="109:17" pos:end="109:22">av_log</name><argument_list pos:start="109:23" pos:end="109:145">(<argument pos:start="109:24" pos:end="109:28"><expr pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:28">avctx</name></expr></argument>, <argument pos:start="109:31" pos:end="109:42"><expr pos:start="109:31" pos:end="109:42"><name pos:start="109:31" pos:end="109:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:45" pos:end="109:106"><expr pos:start="109:45" pos:end="109:106"><literal type="string" pos:start="109:45" pos:end="109:106">"nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n"</literal></expr></argument>, <argument pos:start="109:109" pos:end="109:125"><expr pos:start="109:109" pos:end="109:125"><name pos:start="109:109" pos:end="109:125"><name pos:start="109:109" pos:end="109:113">frame</name><operator pos:start="109:114" pos:end="109:115">-&gt;</operator><name pos:start="109:116" pos:end="109:125">nb_samples</name></name></expr></argument>, <argument pos:start="109:128" pos:end="109:144"><expr pos:start="109:128" pos:end="109:144"><name pos:start="109:128" pos:end="109:144"><name pos:start="109:128" pos:end="109:132">avctx</name><operator pos:start="109:133" pos:end="109:134">-&gt;</operator><name pos:start="109:135" pos:end="109:144">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:38"><expr pos:start="111:17" pos:end="111:37"><name pos:start="111:17" pos:end="111:19">ret</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="111:37"><name pos:start="111:23" pos:end="111:29">AVERROR</name><argument_list pos:start="111:30" pos:end="111:37">(<argument pos:start="111:31" pos:end="111:36"><expr pos:start="111:31" pos:end="111:36"><name pos:start="111:31" pos:end="111:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="113:17" pos:end="113:25">goto <name pos:start="113:22" pos:end="113:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:69"><expr pos:start="123:5" pos:end="123:68"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:68"><name pos:start="123:11" pos:end="123:31"><name pos:start="123:11" pos:end="123:15">avctx</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:22">codec</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:31">encode2</name></name><argument_list pos:start="123:32" pos:end="123:68">(<argument pos:start="123:33" pos:end="123:37"><expr pos:start="123:33" pos:end="123:37"><name pos:start="123:33" pos:end="123:37">avctx</name></expr></argument>, <argument pos:start="123:40" pos:end="123:44"><expr pos:start="123:40" pos:end="123:44"><name pos:start="123:40" pos:end="123:44">avpkt</name></expr></argument>, <argument pos:start="123:47" pos:end="123:51"><expr pos:start="123:47" pos:end="123:51"><name pos:start="123:47" pos:end="123:51">frame</name></expr></argument>, <argument pos:start="123:54" pos:end="123:67"><expr pos:start="123:54" pos:end="123:67"><name pos:start="123:54" pos:end="123:67">got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="151:5"><if pos:start="125:5" pos:end="151:5">if <condition pos:start="125:8" pos:end="125:13">(<expr pos:start="125:9" pos:end="125:12"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:12">ret</name></expr>)</condition> <block pos:start="125:15" pos:end="151:5">{<block_content pos:start="127:9" pos:end="149:9">

        <if_stmt pos:start="127:9" pos:end="149:9"><if pos:start="127:9" pos:end="145:9">if <condition pos:start="127:12" pos:end="127:28">(<expr pos:start="127:13" pos:end="127:27"><operator pos:start="127:13" pos:end="127:13">*</operator><name pos:start="127:14" pos:end="127:27">got_packet_ptr</name></expr>)</condition> <block pos:start="127:30" pos:end="145:9">{<block_content pos:start="129:13" pos:end="143:36">

            <if_stmt pos:start="129:13" pos:end="141:13"><if pos:start="129:13" pos:end="141:13">if <condition pos:start="129:16" pos:end="129:64">(<expr pos:start="129:17" pos:end="129:63"><operator pos:start="129:17" pos:end="129:17">!</operator><operator pos:start="129:18" pos:end="129:18">(</operator><name pos:start="129:19" pos:end="129:44"><name pos:start="129:19" pos:end="129:23">avctx</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:30">codec</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:44">capabilities</name></name> <operator pos:start="129:46" pos:end="129:46">&amp;</operator> <name pos:start="129:48" pos:end="129:62">CODEC_CAP_DELAY</name><operator pos:start="129:63" pos:end="129:63">)</operator></expr>)</condition> <block pos:start="129:66" pos:end="141:13">{<block_content pos:start="131:17" pos:end="139:81">

                <if_stmt pos:start="131:17" pos:end="133:44"><if pos:start="131:17" pos:end="133:44">if <condition pos:start="131:20" pos:end="131:49">(<expr pos:start="131:21" pos:end="131:48"><name pos:start="131:21" pos:end="131:30"><name pos:start="131:21" pos:end="131:25">avpkt</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:30">pts</name></name> <operator pos:start="131:32" pos:end="131:33">==</operator> <name pos:start="131:35" pos:end="131:48">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="133:21" pos:end="133:44"><block_content pos:start="133:21" pos:end="133:44">

                    <expr_stmt pos:start="133:21" pos:end="133:44"><expr pos:start="133:21" pos:end="133:43"><name pos:start="133:21" pos:end="133:30"><name pos:start="133:21" pos:end="133:25">avpkt</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:30">pts</name></name> <operator pos:start="133:32" pos:end="133:32">=</operator> <name pos:start="133:34" pos:end="133:43"><name pos:start="133:34" pos:end="133:38">frame</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:43">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="135:17" pos:end="139:81"><if pos:start="135:17" pos:end="139:81">if <condition pos:start="135:20" pos:end="135:37">(<expr pos:start="135:21" pos:end="135:36"><operator pos:start="135:21" pos:end="135:21">!</operator><name pos:start="135:22" pos:end="135:36"><name pos:start="135:22" pos:end="135:26">avpkt</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:36">duration</name></name></expr>)</condition><block type="pseudo" pos:start="137:21" pos:end="139:81"><block_content pos:start="137:21" pos:end="139:81">

                    <expr_stmt pos:start="137:21" pos:end="139:81"><expr pos:start="137:21" pos:end="139:80"><name pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:25">avpkt</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:35">duration</name></name> <operator pos:start="137:37" pos:end="137:37">=</operator> <call pos:start="137:39" pos:end="139:80"><name pos:start="137:39" pos:end="137:61">ff_samples_to_time_base</name><argument_list pos:start="137:62" pos:end="139:80">(<argument pos:start="137:63" pos:end="137:67"><expr pos:start="137:63" pos:end="137:67"><name pos:start="137:63" pos:end="137:67">avctx</name></expr></argument>,

                                                              <argument pos:start="139:63" pos:end="139:79"><expr pos:start="139:63" pos:end="139:79"><name pos:start="139:63" pos:end="139:79"><name pos:start="139:63" pos:end="139:67">frame</name><operator pos:start="139:68" pos:end="139:69">-&gt;</operator><name pos:start="139:70" pos:end="139:79">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:36"><expr pos:start="143:13" pos:end="143:35"><name pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:17">avpkt</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:22">dts</name></name> <operator pos:start="143:24" pos:end="143:24">=</operator> <name pos:start="143:26" pos:end="143:35"><name pos:start="143:26" pos:end="143:30">avpkt</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:35">pts</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="149:9">else <block pos:start="145:16" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:28">

            <expr_stmt pos:start="147:13" pos:end="147:28"><expr pos:start="147:13" pos:end="147:27"><name pos:start="147:13" pos:end="147:23"><name pos:start="147:13" pos:end="147:17">avpkt</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:23">size</name></name> <operator pos:start="147:25" pos:end="147:25">=</operator> <literal type="number" pos:start="147:27" pos:end="147:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="189:5"><if pos:start="153:5" pos:end="189:5">if <condition pos:start="153:8" pos:end="153:67">(<expr pos:start="153:9" pos:end="153:66"><name pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:13">avpkt</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:19">data</name></name> <operator pos:start="153:21" pos:end="153:22">&amp;&amp;</operator> <name pos:start="153:24" pos:end="153:34"><name pos:start="153:24" pos:end="153:28">avpkt</name><operator pos:start="153:29" pos:end="153:30">-&gt;</operator><name pos:start="153:31" pos:end="153:34">data</name></name> <operator pos:start="153:36" pos:end="153:37">==</operator> <name pos:start="153:39" pos:end="153:66"><name pos:start="153:39" pos:end="153:43">avctx</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:53">internal</name><operator pos:start="153:54" pos:end="153:55">-&gt;</operator><name pos:start="153:56" pos:end="153:66">byte_buffer</name></name></expr>)</condition> <block pos:start="153:69" pos:end="189:5">{<block_content pos:start="155:9" pos:end="187:9">

        <expr_stmt pos:start="155:9" pos:end="155:26"><expr pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:21">needs_realloc</name> <operator pos:start="155:23" pos:end="155:23">=</operator> <literal type="number" pos:start="155:25" pos:end="155:25">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="187:9"><if pos:start="157:9" pos:end="179:9">if <condition pos:start="157:12" pos:end="157:26">(<expr pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:20">user_pkt</name><operator pos:start="157:21" pos:end="157:21">.</operator><name pos:start="157:22" pos:end="157:25">data</name></name></expr>)</condition> <block pos:start="157:28" pos:end="179:9">{<block_content pos:start="159:13" pos:end="177:48">

            <if_stmt pos:start="159:13" pos:end="171:13"><if pos:start="159:13" pos:end="163:13">if <condition pos:start="159:16" pos:end="159:45">(<expr pos:start="159:17" pos:end="159:44"><name pos:start="159:17" pos:end="159:29"><name pos:start="159:17" pos:end="159:24">user_pkt</name><operator pos:start="159:25" pos:end="159:25">.</operator><name pos:start="159:26" pos:end="159:29">size</name></name> <operator pos:start="159:31" pos:end="159:32">&gt;=</operator> <name pos:start="159:34" pos:end="159:44"><name pos:start="159:34" pos:end="159:38">avpkt</name><operator pos:start="159:39" pos:end="159:40">-&gt;</operator><name pos:start="159:41" pos:end="159:44">size</name></name></expr>)</condition> <block pos:start="159:47" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:64">

                <expr_stmt pos:start="161:17" pos:end="161:64"><expr pos:start="161:17" pos:end="161:63"><call pos:start="161:17" pos:end="161:63"><name pos:start="161:17" pos:end="161:22">memcpy</name><argument_list pos:start="161:23" pos:end="161:63">(<argument pos:start="161:24" pos:end="161:36"><expr pos:start="161:24" pos:end="161:36"><name pos:start="161:24" pos:end="161:36"><name pos:start="161:24" pos:end="161:31">user_pkt</name><operator pos:start="161:32" pos:end="161:32">.</operator><name pos:start="161:33" pos:end="161:36">data</name></name></expr></argument>, <argument pos:start="161:39" pos:end="161:49"><expr pos:start="161:39" pos:end="161:49"><name pos:start="161:39" pos:end="161:49"><name pos:start="161:39" pos:end="161:43">avpkt</name><operator pos:start="161:44" pos:end="161:45">-&gt;</operator><name pos:start="161:46" pos:end="161:49">data</name></name></expr></argument>, <argument pos:start="161:52" pos:end="161:62"><expr pos:start="161:52" pos:end="161:62"><name pos:start="161:52" pos:end="161:62"><name pos:start="161:52" pos:end="161:56">avpkt</name><operator pos:start="161:57" pos:end="161:58">-&gt;</operator><name pos:start="161:59" pos:end="161:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="171:13">else <block pos:start="163:20" pos:end="171:13">{<block_content pos:start="165:17" pos:end="169:25">

                <expr_stmt pos:start="165:17" pos:end="165:107"><expr pos:start="165:17" pos:end="165:106"><call pos:start="165:17" pos:end="165:106"><name pos:start="165:17" pos:end="165:22">av_log</name><argument_list pos:start="165:23" pos:end="165:106">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">avctx</name></expr></argument>, <argument pos:start="165:31" pos:end="165:42"><expr pos:start="165:31" pos:end="165:42"><name pos:start="165:31" pos:end="165:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:45" pos:end="165:92"><expr pos:start="165:45" pos:end="165:92"><literal type="string" pos:start="165:45" pos:end="165:92">"Provided packet is too small, needs to be %d\n"</literal></expr></argument>, <argument pos:start="165:95" pos:end="165:105"><expr pos:start="165:95" pos:end="165:105"><name pos:start="165:95" pos:end="165:105"><name pos:start="165:95" pos:end="165:99">avpkt</name><operator pos:start="165:100" pos:end="165:101">-&gt;</operator><name pos:start="165:102" pos:end="165:105">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:44"><expr pos:start="167:17" pos:end="167:43"><name pos:start="167:17" pos:end="167:27"><name pos:start="167:17" pos:end="167:21">avpkt</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:27">size</name></name> <operator pos:start="167:29" pos:end="167:29">=</operator> <name pos:start="167:31" pos:end="167:43"><name pos:start="167:31" pos:end="167:38">user_pkt</name><operator pos:start="167:39" pos:end="167:39">.</operator><name pos:start="167:40" pos:end="167:43">size</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:25"><expr pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <operator pos:start="169:23" pos:end="169:23">-</operator><literal type="number" pos:start="169:24" pos:end="169:24">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:43"><expr pos:start="173:13" pos:end="173:42"><name pos:start="173:13" pos:end="173:22"><name pos:start="173:13" pos:end="173:17">avpkt</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:22">buf</name></name>      <operator pos:start="173:29" pos:end="173:29">=</operator> <name pos:start="173:31" pos:end="173:42"><name pos:start="173:31" pos:end="173:38">user_pkt</name><operator pos:start="173:39" pos:end="173:39">.</operator><name pos:start="173:40" pos:end="173:42">buf</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:44"><expr pos:start="175:13" pos:end="175:43"><name pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:17">avpkt</name><operator pos:start="175:18" pos:end="175:19">-&gt;</operator><name pos:start="175:20" pos:end="175:23">data</name></name>     <operator pos:start="175:29" pos:end="175:29">=</operator> <name pos:start="175:31" pos:end="175:43"><name pos:start="175:31" pos:end="175:38">user_pkt</name><operator pos:start="175:39" pos:end="175:39">.</operator><name pos:start="175:40" pos:end="175:43">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:48"><expr pos:start="177:13" pos:end="177:47"><name pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:17">avpkt</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:27">destruct</name></name> <operator pos:start="177:29" pos:end="177:29">=</operator> <name pos:start="177:31" pos:end="177:47"><name pos:start="177:31" pos:end="177:38">user_pkt</name><operator pos:start="177:39" pos:end="177:39">.</operator><name pos:start="177:40" pos:end="177:47">destruct</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="179:11" pos:end="187:9">else <block pos:start="179:16" pos:end="187:9">{<block_content pos:start="181:13" pos:end="185:13">

            <if_stmt pos:start="181:13" pos:end="185:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:41">(<expr pos:start="181:17" pos:end="181:40"><call pos:start="181:17" pos:end="181:36"><name pos:start="181:17" pos:end="181:29">av_dup_packet</name><argument_list pos:start="181:30" pos:end="181:36">(<argument pos:start="181:31" pos:end="181:35"><expr pos:start="181:31" pos:end="181:35"><name pos:start="181:31" pos:end="181:35">avpkt</name></expr></argument>)</argument_list></call> <operator pos:start="181:38" pos:end="181:38">&lt;</operator> <literal type="number" pos:start="181:40" pos:end="181:40">0</literal></expr>)</condition> <block pos:start="181:43" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:38">

                <expr_stmt pos:start="183:17" pos:end="183:38"><expr pos:start="183:17" pos:end="183:37"><name pos:start="183:17" pos:end="183:19">ret</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <call pos:start="183:23" pos:end="183:37"><name pos:start="183:23" pos:end="183:29">AVERROR</name><argument_list pos:start="183:30" pos:end="183:37">(<argument pos:start="183:31" pos:end="183:36"><expr pos:start="183:31" pos:end="183:36"><name pos:start="183:31" pos:end="183:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="193:5" pos:end="209:5"><if pos:start="193:5" pos:end="209:5">if <condition pos:start="193:8" pos:end="193:13">(<expr pos:start="193:9" pos:end="193:12"><operator pos:start="193:9" pos:end="193:9">!</operator><name pos:start="193:10" pos:end="193:12">ret</name></expr>)</condition> <block pos:start="193:15" pos:end="209:5">{<block_content pos:start="195:9" pos:end="207:30">

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="203:9">if <condition pos:start="195:12" pos:end="195:41">(<expr pos:start="195:13" pos:end="195:40"><name pos:start="195:13" pos:end="195:25">needs_realloc</name> <operator pos:start="195:27" pos:end="195:28">&amp;&amp;</operator> <name pos:start="195:30" pos:end="195:40"><name pos:start="195:30" pos:end="195:34">avpkt</name><operator pos:start="195:35" pos:end="195:36">-&gt;</operator><name pos:start="195:37" pos:end="195:40">data</name></name></expr>)</condition> <block pos:start="195:43" pos:end="203:9">{<block_content pos:start="197:13" pos:end="201:47">

            <expr_stmt pos:start="197:13" pos:end="197:93"><expr pos:start="197:13" pos:end="197:92"><name pos:start="197:13" pos:end="197:15">ret</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <call pos:start="197:19" pos:end="197:92"><name pos:start="197:19" pos:end="197:35">av_buffer_realloc</name><argument_list pos:start="197:36" pos:end="197:92">(<argument pos:start="197:37" pos:end="197:47"><expr pos:start="197:37" pos:end="197:47"><operator pos:start="197:37" pos:end="197:37">&amp;</operator><name pos:start="197:38" pos:end="197:47"><name pos:start="197:38" pos:end="197:42">avpkt</name><operator pos:start="197:43" pos:end="197:44">-&gt;</operator><name pos:start="197:45" pos:end="197:47">buf</name></name></expr></argument>, <argument pos:start="197:50" pos:end="197:91"><expr pos:start="197:50" pos:end="197:91"><name pos:start="197:50" pos:end="197:60"><name pos:start="197:50" pos:end="197:54">avpkt</name><operator pos:start="197:55" pos:end="197:56">-&gt;</operator><name pos:start="197:57" pos:end="197:60">size</name></name> <operator pos:start="197:62" pos:end="197:62">+</operator> <name pos:start="197:64" pos:end="197:91">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="201:47"><if pos:start="199:13" pos:end="201:47">if <condition pos:start="199:16" pos:end="199:25">(<expr pos:start="199:17" pos:end="199:24"><name pos:start="199:17" pos:end="199:19">ret</name> <operator pos:start="199:21" pos:end="199:22">&gt;=</operator> <literal type="number" pos:start="199:24" pos:end="199:24">0</literal></expr>)</condition><block type="pseudo" pos:start="201:17" pos:end="201:47"><block_content pos:start="201:17" pos:end="201:47">

                <expr_stmt pos:start="201:17" pos:end="201:47"><expr pos:start="201:17" pos:end="201:46"><name pos:start="201:17" pos:end="201:27"><name pos:start="201:17" pos:end="201:21">avpkt</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:27">data</name></name> <operator pos:start="201:29" pos:end="201:29">=</operator> <name pos:start="201:31" pos:end="201:46"><name pos:start="201:31" pos:end="201:35">avpkt</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:40">buf</name><operator pos:start="201:41" pos:end="201:42">-&gt;</operator><name pos:start="201:43" pos:end="201:46">data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="207:9" pos:end="207:30"><expr pos:start="207:9" pos:end="207:29"><name pos:start="207:9" pos:end="207:27"><name pos:start="207:9" pos:end="207:13">avctx</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:27">frame_number</name></name><operator pos:start="207:28" pos:end="207:29">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="213:5" pos:end="221:5"><if pos:start="213:5" pos:end="221:5">if <condition pos:start="213:8" pos:end="213:36">(<expr pos:start="213:9" pos:end="213:35"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">&lt;</operator> <literal type="number" pos:start="213:15" pos:end="213:15">0</literal> <operator pos:start="213:17" pos:end="213:18">||</operator> <operator pos:start="213:20" pos:end="213:20">!</operator><operator pos:start="213:21" pos:end="213:21">*</operator><name pos:start="213:22" pos:end="213:35">got_packet_ptr</name></expr>)</condition> <block pos:start="213:38" pos:end="221:5">{<block_content pos:start="215:9" pos:end="219:17">

        <expr_stmt pos:start="215:9" pos:end="215:30"><expr pos:start="215:9" pos:end="215:29"><call pos:start="215:9" pos:end="215:29"><name pos:start="215:9" pos:end="215:22">av_free_packet</name><argument_list pos:start="215:23" pos:end="215:29">(<argument pos:start="215:24" pos:end="215:28"><expr pos:start="215:24" pos:end="215:28"><name pos:start="215:24" pos:end="215:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:30"><expr pos:start="217:9" pos:end="217:29"><call pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:22">av_init_packet</name><argument_list pos:start="217:23" pos:end="217:29">(<argument pos:start="217:24" pos:end="217:28"><expr pos:start="217:24" pos:end="217:28"><name pos:start="217:24" pos:end="217:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="219:9" pos:end="219:17">goto <name pos:start="219:14" pos:end="219:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="229:39">/* NOTE: if we add any audio encoders which output non-keyframe packets,

     *       this needs to be moved to the encoders, but for now we can do it

     *       here to simplify things */</comment>

    <expr_stmt pos:start="231:5" pos:end="231:36"><expr pos:start="231:5" pos:end="231:35"><name pos:start="231:5" pos:end="231:16"><name pos:start="231:5" pos:end="231:9">avpkt</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:16">flags</name></name> <operator pos:start="231:18" pos:end="231:19">|=</operator> <name pos:start="231:21" pos:end="231:35">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>



<label pos:start="235:1" pos:end="235:4"><name pos:start="235:1" pos:end="235:3">end</name>:</label>

    <expr_stmt pos:start="237:5" pos:end="237:33"><expr pos:start="237:5" pos:end="237:32"><call pos:start="237:5" pos:end="237:32"><name pos:start="237:5" pos:end="237:17">av_frame_free</name><argument_list pos:start="237:18" pos:end="237:32">(<argument pos:start="237:19" pos:end="237:31"><expr pos:start="237:19" pos:end="237:31"><operator pos:start="237:19" pos:end="237:19">&amp;</operator><name pos:start="237:20" pos:end="237:31">padded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="241:5" pos:end="241:15">return <expr pos:start="241:12" pos:end="241:14"><name pos:start="241:12" pos:end="241:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
