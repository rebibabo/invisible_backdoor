<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10186.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">xhci_submit</name><parameter_list pos:start="1:23" pos:end="1:81">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:32">XHCIState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">xhci</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><name pos:start="1:41" pos:end="1:52">XHCITransfer</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">xfer</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:80"><decl pos:start="1:61" pos:end="1:80"><type pos:start="1:61" pos:end="1:80"><name pos:start="1:61" pos:end="1:73">XHCIEPContext</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:80">epctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:20">mfindex</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:74"><expr pos:start="9:5" pos:end="9:73"><call pos:start="9:5" pos:end="9:73"><name pos:start="9:5" pos:end="9:11">DPRINTF</name><argument_list pos:start="9:12" pos:end="9:73">(<argument pos:start="9:13" pos:end="9:46"><expr pos:start="9:13" pos:end="9:46"><literal type="string" pos:start="9:13" pos:end="9:46">"xhci_submit(slotid=%d,epid=%d)\n"</literal></expr></argument>, <argument pos:start="9:49" pos:end="9:60"><expr pos:start="9:49" pos:end="9:60"><name pos:start="9:49" pos:end="9:60"><name pos:start="9:49" pos:end="9:52">xfer</name><operator pos:start="9:53" pos:end="9:54">-&gt;</operator><name pos:start="9:55" pos:end="9:60">slotid</name></name></expr></argument>, <argument pos:start="9:63" pos:end="9:72"><expr pos:start="9:63" pos:end="9:72"><name pos:start="9:63" pos:end="9:72"><name pos:start="9:63" pos:end="9:66">xfer</name><operator pos:start="9:67" pos:end="9:68">-&gt;</operator><name pos:start="9:69" pos:end="9:72">epid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:8">xfer</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:17">in_xfer</name></name> <operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:31"><name pos:start="13:21" pos:end="13:25">epctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:31">type</name></name><operator pos:start="13:32" pos:end="13:33">&gt;&gt;</operator><literal type="number" pos:start="13:34" pos:end="13:34">2</literal></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="85:5">switch<condition pos:start="17:11" pos:end="17:23">(<expr pos:start="17:12" pos:end="17:22"><name pos:start="17:12" pos:end="17:22"><name pos:start="17:12" pos:end="17:16">epctx</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:22">type</name></name></expr>)</condition> <block pos:start="17:25" pos:end="85:5">{<block_content pos:start="19:5" pos:end="83:18">

    <case pos:start="19:5" pos:end="19:21">case <expr pos:start="19:10" pos:end="19:20"><name pos:start="19:10" pos:end="19:20">ET_INTR_OUT</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:20">case <expr pos:start="21:10" pos:end="21:19"><name pos:start="21:10" pos:end="21:19">ET_INTR_IN</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:23"><expr pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:12">xfer</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:18">pkts</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:12">xfer</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:22">iso_xfer</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:30">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:12">xfer</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:24">timed_xfer</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <name pos:start="27:28" pos:end="27:31">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:15">mfindex</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:40"><name pos:start="29:19" pos:end="29:34">xhci_mfindex_get</name><argument_list pos:start="29:35" pos:end="29:40">(<argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><name pos:start="29:36" pos:end="29:39">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><call pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:27">xhci_calc_intr_kick</name><argument_list pos:start="31:28" pos:end="31:55">(<argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><name pos:start="31:29" pos:end="31:32">xhci</name></expr></argument>, <argument pos:start="31:35" pos:end="31:38"><expr pos:start="31:35" pos:end="31:38"><name pos:start="31:35" pos:end="31:38">xfer</name></expr></argument>, <argument pos:start="31:41" pos:end="31:45"><expr pos:start="31:41" pos:end="31:45"><name pos:start="31:41" pos:end="31:45">epctx</name></expr></argument>, <argument pos:start="31:48" pos:end="31:54"><expr pos:start="31:48" pos:end="31:54"><name pos:start="31:48" pos:end="31:54">mfindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:61"><expr pos:start="33:9" pos:end="33:60"><call pos:start="33:9" pos:end="33:60"><name pos:start="33:9" pos:end="33:32">xhci_check_intr_iso_kick</name><argument_list pos:start="33:33" pos:end="33:60">(<argument pos:start="33:34" pos:end="33:37"><expr pos:start="33:34" pos:end="33:37"><name pos:start="33:34" pos:end="33:37">xhci</name></expr></argument>, <argument pos:start="33:40" pos:end="33:43"><expr pos:start="33:40" pos:end="33:43"><name pos:start="33:40" pos:end="33:43">xfer</name></expr></argument>, <argument pos:start="33:46" pos:end="33:50"><expr pos:start="33:46" pos:end="33:50"><name pos:start="33:46" pos:end="33:50">epctx</name></expr></argument>, <argument pos:start="33:53" pos:end="33:59"><expr pos:start="33:53" pos:end="33:59"><name pos:start="33:53" pos:end="33:59">mfindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:32">(<expr pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:16">xfer</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:31">running_retry</name></name></expr>)</condition> <block pos:start="35:34" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:22">

            <return pos:start="37:13" pos:end="37:22">return <expr pos:start="37:20" pos:end="37:21"><operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:21">case <expr pos:start="43:10" pos:end="43:20"><name pos:start="43:10" pos:end="43:20">ET_BULK_OUT</name></expr>:</case>

    <case pos:start="45:5" pos:end="45:20">case <expr pos:start="45:10" pos:end="45:19"><name pos:start="45:10" pos:end="45:19">ET_BULK_IN</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:12">xfer</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:18">pkts</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:12">xfer</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:22">iso_xfer</name></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:30">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:12">xfer</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:24">timed_xfer</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:32">false</name></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:20">case <expr pos:start="55:10" pos:end="55:19"><name pos:start="55:10" pos:end="55:19">ET_ISO_OUT</name></expr>:</case>

    <case pos:start="57:5" pos:end="57:19">case <expr pos:start="57:10" pos:end="57:18"><name pos:start="57:10" pos:end="57:18">ET_ISO_IN</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:12">xfer</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:18">pkts</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:12">xfer</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:22">iso_xfer</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:29">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:12">xfer</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:24">timed_xfer</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:31">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:15">mfindex</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:40"><name pos:start="65:19" pos:end="65:34">xhci_mfindex_get</name><argument_list pos:start="65:35" pos:end="65:40">(<argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><name pos:start="65:36" pos:end="65:39">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:55"><expr pos:start="67:9" pos:end="67:54"><call pos:start="67:9" pos:end="67:54"><name pos:start="67:9" pos:end="67:26">xhci_calc_iso_kick</name><argument_list pos:start="67:27" pos:end="67:54">(<argument pos:start="67:28" pos:end="67:31"><expr pos:start="67:28" pos:end="67:31"><name pos:start="67:28" pos:end="67:31">xhci</name></expr></argument>, <argument pos:start="67:34" pos:end="67:37"><expr pos:start="67:34" pos:end="67:37"><name pos:start="67:34" pos:end="67:37">xfer</name></expr></argument>, <argument pos:start="67:40" pos:end="67:44"><expr pos:start="67:40" pos:end="67:44"><name pos:start="67:40" pos:end="67:44">epctx</name></expr></argument>, <argument pos:start="67:47" pos:end="67:53"><expr pos:start="67:47" pos:end="67:53"><name pos:start="67:47" pos:end="67:53">mfindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><call pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:32">xhci_check_intr_iso_kick</name><argument_list pos:start="69:33" pos:end="69:60">(<argument pos:start="69:34" pos:end="69:37"><expr pos:start="69:34" pos:end="69:37"><name pos:start="69:34" pos:end="69:37">xhci</name></expr></argument>, <argument pos:start="69:40" pos:end="69:43"><expr pos:start="69:40" pos:end="69:43"><name pos:start="69:40" pos:end="69:43">xfer</name></expr></argument>, <argument pos:start="69:46" pos:end="69:50"><expr pos:start="69:46" pos:end="69:50"><name pos:start="69:46" pos:end="69:50">epctx</name></expr></argument>, <argument pos:start="69:53" pos:end="69:59"><expr pos:start="69:53" pos:end="69:59"><name pos:start="69:53" pos:end="69:59">mfindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:32">(<expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:16">xfer</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:31">running_retry</name></name></expr>)</condition> <block pos:start="71:34" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:22">

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <default pos:start="79:5" pos:end="79:12">default:</default>

        <expr_stmt pos:start="81:9" pos:end="81:67"><expr pos:start="81:9" pos:end="81:66"><call pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:36">trace_usb_xhci_unimplemented</name><argument_list pos:start="81:37" pos:end="81:66">(<argument pos:start="81:38" pos:end="81:52"><expr pos:start="81:38" pos:end="81:52"><literal type="string" pos:start="81:38" pos:end="81:52">"endpoint type"</literal></expr></argument>, <argument pos:start="81:55" pos:end="81:65"><expr pos:start="81:55" pos:end="81:65"><name pos:start="81:55" pos:end="81:65"><name pos:start="81:55" pos:end="81:59">epctx</name><operator pos:start="81:60" pos:end="81:61">-&gt;</operator><name pos:start="81:62" pos:end="81:65">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:36">(<expr pos:start="89:9" pos:end="89:35"><call pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:25">xhci_setup_packet</name><argument_list pos:start="89:26" pos:end="89:31">(<argument pos:start="89:27" pos:end="89:30"><expr pos:start="89:27" pos:end="89:30"><name pos:start="89:27" pos:end="89:30">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="89:33" pos:end="89:33">&lt;</operator> <literal type="number" pos:start="89:35" pos:end="89:35">0</literal></expr>)</condition> <block pos:start="89:38" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:18">

        <return pos:start="91:9" pos:end="91:18">return <expr pos:start="91:16" pos:end="91:17"><operator pos:start="91:16" pos:end="91:16">-</operator><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:59"><expr pos:start="95:5" pos:end="95:58"><call pos:start="95:5" pos:end="95:58"><name pos:start="95:5" pos:end="95:21">usb_handle_packet</name><argument_list pos:start="95:22" pos:end="95:58">(<argument pos:start="95:23" pos:end="95:42"><expr pos:start="95:23" pos:end="95:42"><name pos:start="95:23" pos:end="95:42"><name pos:start="95:23" pos:end="95:26">xfer</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:34">packet</name><operator pos:start="95:35" pos:end="95:35">.</operator><name pos:start="95:36" pos:end="95:37">ep</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:42">dev</name></name></expr></argument>, <argument pos:start="95:45" pos:end="95:57"><expr pos:start="95:45" pos:end="95:57"><operator pos:start="95:45" pos:end="95:45">&amp;</operator><name pos:start="95:46" pos:end="95:57"><name pos:start="95:46" pos:end="95:49">xfer</name><operator pos:start="95:50" pos:end="95:51">-&gt;</operator><name pos:start="95:52" pos:end="95:57">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:35"><expr pos:start="99:5" pos:end="99:34"><call pos:start="99:5" pos:end="99:34"><name pos:start="99:5" pos:end="99:28">xhci_try_complete_packet</name><argument_list pos:start="99:29" pos:end="99:34">(<argument pos:start="99:30" pos:end="99:33"><expr pos:start="99:30" pos:end="99:33"><name pos:start="99:30" pos:end="99:33">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:53">(<expr pos:start="101:9" pos:end="101:52"><operator pos:start="101:9" pos:end="101:9">!</operator><name pos:start="101:10" pos:end="101:28"><name pos:start="101:10" pos:end="101:13">xfer</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:28">running_async</name></name> <operator pos:start="101:30" pos:end="101:31">&amp;&amp;</operator> <operator pos:start="101:33" pos:end="101:33">!</operator><name pos:start="101:34" pos:end="101:52"><name pos:start="101:34" pos:end="101:37">xfer</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:52">running_retry</name></name></expr>)</condition> <block pos:start="101:55" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:53">

        <expr_stmt pos:start="103:9" pos:end="103:53"><expr pos:start="103:9" pos:end="103:52"><call pos:start="103:9" pos:end="103:52"><name pos:start="103:9" pos:end="103:23">xhci_kick_epctx</name><argument_list pos:start="103:24" pos:end="103:52">(<argument pos:start="103:25" pos:end="103:35"><expr pos:start="103:25" pos:end="103:35"><name pos:start="103:25" pos:end="103:35"><name pos:start="103:25" pos:end="103:28">xfer</name><operator pos:start="103:29" pos:end="103:30">-&gt;</operator><name pos:start="103:31" pos:end="103:35">epctx</name></name></expr></argument>, <argument pos:start="103:38" pos:end="103:51"><expr pos:start="103:38" pos:end="103:51"><name pos:start="103:38" pos:end="103:51"><name pos:start="103:38" pos:end="103:41">xfer</name><operator pos:start="103:42" pos:end="103:43">-&gt;</operator><name pos:start="103:44" pos:end="103:51">streamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
