<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12530.c" pos:tabs="8"><function pos:start="1:1" pos:end="317:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">hda_audio_command</name><parameter_list pos:start="1:30" pos:end="1:79">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:44">HDACodecDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">hda</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:63">nid</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:73">uint32_t</name></type> <name pos:start="1:75" pos:end="1:78">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="317:1">{<block_content pos:start="5:5" pos:end="315:37">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">HDAAudioState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">a</name> <init pos:start="5:22" pos:end="5:37">= <expr pos:start="5:24" pos:end="5:37"><call pos:start="5:24" pos:end="5:37"><name pos:start="5:24" pos:end="5:32">HDA_AUDIO</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">hda</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">HDAAudioStream</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:19">desc_node</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:25">node</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><name pos:start="9:29" pos:end="9:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:22"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:20">desc_param</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">verb</name></decl>, <decl pos:start="13:20" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:20" pos:end="13:26">payload</name></decl>, <decl pos:start="13:29" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:29" pos:end="13:36">response</name></decl>, <decl pos:start="13:39" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:39" pos:end="13:43">count</name></decl>, <decl pos:start="13:46" pos:end="13:50"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:46" pos:end="13:50">shift</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="33:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:36">(<expr pos:start="17:9" pos:end="17:35"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:13">data</name> <operator pos:start="17:15" pos:end="17:15">&amp;</operator> <literal type="number" pos:start="17:17" pos:end="17:23">0x70000</literal><operator pos:start="17:24" pos:end="17:24">)</operator> <operator pos:start="17:26" pos:end="17:27">==</operator> <literal type="number" pos:start="17:29" pos:end="17:35">0x70000</literal></expr>)</condition> <block pos:start="17:38" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:32">

        <comment type="block" pos:start="19:9" pos:end="19:29">/* 12/8 id/payload */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:35"><expr pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:12">verb</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <operator pos:start="21:16" pos:end="21:16">(</operator><name pos:start="21:17" pos:end="21:20">data</name> <operator pos:start="21:22" pos:end="21:23">&gt;&gt;</operator> <literal type="number" pos:start="21:25" pos:end="21:25">8</literal><operator pos:start="21:26" pos:end="21:26">)</operator> <operator pos:start="21:28" pos:end="21:28">&amp;</operator> <literal type="number" pos:start="21:30" pos:end="21:34">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:32"><expr pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:15">payload</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:22">data</name> <operator pos:start="23:24" pos:end="23:24">&amp;</operator> <literal type="number" pos:start="23:26" pos:end="23:31">0x00ff</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="33:5">else <block pos:start="25:12" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:32">

        <comment type="block" pos:start="27:9" pos:end="27:29">/* 4/16 id/payload */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:12">verb</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:20">data</name> <operator pos:start="29:22" pos:end="29:23">&gt;&gt;</operator> <literal type="number" pos:start="29:25" pos:end="29:25">8</literal><operator pos:start="29:26" pos:end="29:26">)</operator> <operator pos:start="29:28" pos:end="29:28">&amp;</operator> <literal type="number" pos:start="29:30" pos:end="29:34">0xf00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:15">payload</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:22">data</name> <operator pos:start="31:24" pos:end="31:24">&amp;</operator> <literal type="number" pos:start="31:26" pos:end="31:31">0xffff</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:8">node</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:44"><name pos:start="37:12" pos:end="37:30">hda_codec_find_node</name><argument_list pos:start="37:31" pos:end="37:44">(<argument pos:start="37:32" pos:end="37:38"><expr pos:start="37:32" pos:end="37:38"><name pos:start="37:32" pos:end="37:38"><name pos:start="37:32" pos:end="37:32">a</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:38">desc</name></name></expr></argument>, <argument pos:start="37:41" pos:end="37:43"><expr pos:start="37:41" pos:end="37:43"><name pos:start="37:41" pos:end="37:43">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:21">(<expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:12">node</name> <operator pos:start="39:14" pos:end="39:15">==</operator> <name pos:start="39:17" pos:end="39:20">NULL</name></expr>)</condition> <block pos:start="39:23" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:18">

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="47:57"><expr pos:start="45:5" pos:end="47:56"><call pos:start="45:5" pos:end="47:56"><name pos:start="45:5" pos:end="45:10">dprint</name><argument_list pos:start="45:11" pos:end="47:56">(<argument pos:start="45:12" pos:end="45:12"><expr pos:start="45:12" pos:end="45:12"><name pos:start="45:12" pos:end="45:12">a</name></expr></argument>, <argument pos:start="45:15" pos:end="45:15"><expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">2</literal></expr></argument>, <argument pos:start="45:18" pos:end="45:61"><expr pos:start="45:18" pos:end="45:61"><literal type="string" pos:start="45:18" pos:end="45:61">"%s: nid %d (%s), verb 0x%x, payload 0x%x\n"</literal></expr></argument>,

           <argument pos:start="47:12" pos:end="47:23"><expr pos:start="47:12" pos:end="47:23"><name pos:start="47:12" pos:end="47:23">__FUNCTION__</name></expr></argument>, <argument pos:start="47:26" pos:end="47:28"><expr pos:start="47:26" pos:end="47:28"><name pos:start="47:26" pos:end="47:28">nid</name></expr></argument>, <argument pos:start="47:31" pos:end="47:40"><expr pos:start="47:31" pos:end="47:40"><name pos:start="47:31" pos:end="47:40"><name pos:start="47:31" pos:end="47:34">node</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:40">name</name></name></expr></argument>, <argument pos:start="47:43" pos:end="47:46"><expr pos:start="47:43" pos:end="47:46"><name pos:start="47:43" pos:end="47:46">verb</name></expr></argument>, <argument pos:start="47:49" pos:end="47:55"><expr pos:start="47:49" pos:end="47:55"><name pos:start="47:49" pos:end="47:55">payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="51:5" pos:end="303:5">switch <condition pos:start="51:12" pos:end="51:17">(<expr pos:start="51:13" pos:end="51:16"><name pos:start="51:13" pos:end="51:16">verb</name></expr>)</condition> <block pos:start="51:19" pos:end="303:5">{<block_content pos:start="55:5" pos:end="301:18">

    <comment type="block" pos:start="53:5" pos:end="53:19">/* all nodes */</comment>

    <case pos:start="55:5" pos:end="55:28">case <expr pos:start="55:10" pos:end="55:27"><name pos:start="55:10" pos:end="55:27">AC_VERB_PARAMETERS</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:52"><expr pos:start="57:9" pos:end="57:51"><name pos:start="57:9" pos:end="57:13">param</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:51"><name pos:start="57:17" pos:end="57:36">hda_codec_find_param</name><argument_list pos:start="57:37" pos:end="57:51">(<argument pos:start="57:38" pos:end="57:41"><expr pos:start="57:38" pos:end="57:41"><name pos:start="57:38" pos:end="57:41">node</name></expr></argument>, <argument pos:start="57:44" pos:end="57:50"><expr pos:start="57:44" pos:end="57:50"><name pos:start="57:44" pos:end="57:50">payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:26">(<expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:17">param</name> <operator pos:start="59:19" pos:end="59:20">==</operator> <name pos:start="59:22" pos:end="59:25">NULL</name></expr>)</condition> <block pos:start="59:28" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:22">

            <goto pos:start="61:13" pos:end="61:22">goto <name pos:start="61:18" pos:end="61:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:50"><expr pos:start="65:9" pos:end="65:49"><call pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:26">hda_codec_response</name><argument_list pos:start="65:27" pos:end="65:49">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">hda</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">true</name></expr></argument>, <argument pos:start="65:39" pos:end="65:48"><expr pos:start="65:39" pos:end="65:48"><name pos:start="65:39" pos:end="65:48"><name pos:start="65:39" pos:end="65:43">param</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:48">val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:34">case <expr pos:start="69:10" pos:end="69:33"><name pos:start="69:10" pos:end="69:33">AC_VERB_GET_SUBSYSTEM_ID</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:52"><expr pos:start="71:9" pos:end="71:51"><call pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:26">hda_codec_response</name><argument_list pos:start="71:27" pos:end="71:51">(<argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">hda</name></expr></argument>, <argument pos:start="71:33" pos:end="71:36"><expr pos:start="71:33" pos:end="71:36"><name pos:start="71:33" pos:end="71:36">true</name></expr></argument>, <argument pos:start="71:39" pos:end="71:50"><expr pos:start="71:39" pos:end="71:50"><name pos:start="71:39" pos:end="71:50"><name pos:start="71:39" pos:end="71:39">a</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:45">desc</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:50">iid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <comment type="block" pos:start="77:5" pos:end="77:23">/* all functions */</comment>

    <case pos:start="79:5" pos:end="79:34">case <expr pos:start="79:10" pos:end="79:33"><name pos:start="79:10" pos:end="79:33">AC_VERB_GET_CONNECT_LIST</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:64"><expr pos:start="81:9" pos:end="81:63"><name pos:start="81:9" pos:end="81:13">param</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <call pos:start="81:17" pos:end="81:63"><name pos:start="81:17" pos:end="81:36">hda_codec_find_param</name><argument_list pos:start="81:37" pos:end="81:63">(<argument pos:start="81:38" pos:end="81:41"><expr pos:start="81:38" pos:end="81:41"><name pos:start="81:38" pos:end="81:41">node</name></expr></argument>, <argument pos:start="81:44" pos:end="81:62"><expr pos:start="81:44" pos:end="81:62"><name pos:start="81:44" pos:end="81:62">AC_PAR_CONNLIST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:13">count</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <ternary pos:start="83:17" pos:end="83:38"><condition pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:21"><name pos:start="83:17" pos:end="83:21">param</name></expr> ?</condition><then pos:start="83:25" pos:end="83:34"> <expr pos:start="83:25" pos:end="83:34"><name pos:start="83:25" pos:end="83:34"><name pos:start="83:25" pos:end="83:29">param</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:34">val</name></name></expr> </then><else pos:start="83:36" pos:end="83:38">: <expr pos:start="83:38" pos:end="83:38"><literal type="number" pos:start="83:38" pos:end="83:38">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:21"><expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:16">response</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:18"><expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:13">shift</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:17">0</literal></expr>;</expr_stmt>

        <while pos:start="89:9" pos:end="97:9">while <condition pos:start="89:15" pos:end="89:45">(<expr pos:start="89:16" pos:end="89:44"><name pos:start="89:16" pos:end="89:22">payload</name> <operator pos:start="89:24" pos:end="89:24">&lt;</operator> <name pos:start="89:26" pos:end="89:30">count</name> <operator pos:start="89:32" pos:end="89:33">&amp;&amp;</operator> <name pos:start="89:35" pos:end="89:39">shift</name> <operator pos:start="89:41" pos:end="89:41">&lt;</operator> <literal type="number" pos:start="89:43" pos:end="89:44">32</literal></expr>)</condition> <block pos:start="89:47" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:23">

            <expr_stmt pos:start="91:13" pos:end="91:53"><expr pos:start="91:13" pos:end="91:52"><name pos:start="91:13" pos:end="91:20">response</name> <operator pos:start="91:22" pos:end="91:23">|=</operator> <name pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:28">node</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:34">conn</name><index pos:start="91:35" pos:end="91:43">[<expr pos:start="91:36" pos:end="91:42"><name pos:start="91:36" pos:end="91:42">payload</name></expr>]</index></name> <operator pos:start="91:45" pos:end="91:46">&lt;&lt;</operator> <name pos:start="91:48" pos:end="91:52">shift</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:22"><expr pos:start="93:13" pos:end="93:21"><name pos:start="93:13" pos:end="93:19">payload</name><operator pos:start="93:20" pos:end="93:21">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:23"><expr pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:17">shift</name> <operator pos:start="95:19" pos:end="95:20">+=</operator> <literal type="number" pos:start="95:22" pos:end="95:22">8</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="99:9" pos:end="99:48"><expr pos:start="99:9" pos:end="99:47"><call pos:start="99:9" pos:end="99:47"><name pos:start="99:9" pos:end="99:26">hda_codec_response</name><argument_list pos:start="99:27" pos:end="99:47">(<argument pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><name pos:start="99:28" pos:end="99:30">hda</name></expr></argument>, <argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">true</name></expr></argument>, <argument pos:start="99:39" pos:end="99:46"><expr pos:start="99:39" pos:end="99:46"><name pos:start="99:39" pos:end="99:46">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>



    <comment type="block" pos:start="105:5" pos:end="105:20">/* pin widget */</comment>

    <case pos:start="107:5" pos:end="107:36">case <expr pos:start="107:10" pos:end="107:35"><name pos:start="107:10" pos:end="107:35">AC_VERB_GET_CONFIG_DEFAULT</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:52"><expr pos:start="109:9" pos:end="109:51"><call pos:start="109:9" pos:end="109:51"><name pos:start="109:9" pos:end="109:26">hda_codec_response</name><argument_list pos:start="109:27" pos:end="109:51">(<argument pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:30">hda</name></expr></argument>, <argument pos:start="109:33" pos:end="109:36"><expr pos:start="109:33" pos:end="109:36"><name pos:start="109:33" pos:end="109:36">true</name></expr></argument>, <argument pos:start="109:39" pos:end="109:50"><expr pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:42">node</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:50">config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:40">case <expr pos:start="113:10" pos:end="113:39"><name pos:start="113:10" pos:end="113:39">AC_VERB_GET_PIN_WIDGET_CONTROL</name></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:52"><expr pos:start="115:9" pos:end="115:51"><call pos:start="115:9" pos:end="115:51"><name pos:start="115:9" pos:end="115:26">hda_codec_response</name><argument_list pos:start="115:27" pos:end="115:51">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">hda</name></expr></argument>, <argument pos:start="115:33" pos:end="115:36"><expr pos:start="115:33" pos:end="115:36"><name pos:start="115:33" pos:end="115:36">true</name></expr></argument>, <argument pos:start="115:39" pos:end="115:50"><expr pos:start="115:39" pos:end="115:50"><name pos:start="115:39" pos:end="115:50"><name pos:start="115:39" pos:end="115:42">node</name><operator pos:start="115:43" pos:end="115:44">-&gt;</operator><name pos:start="115:45" pos:end="115:50">pinctl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:40">case <expr pos:start="119:10" pos:end="119:39"><name pos:start="119:10" pos:end="119:39">AC_VERB_SET_PIN_WIDGET_CONTROL</name></expr>:</case>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:36">(<expr pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:16">node</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:24">pinctl</name></name> <operator pos:start="121:26" pos:end="121:27">!=</operator> <name pos:start="121:29" pos:end="121:35">payload</name></expr>)</condition> <block pos:start="121:38" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:56">

            <expr_stmt pos:start="123:13" pos:end="123:56"><expr pos:start="123:13" pos:end="123:55"><call pos:start="123:13" pos:end="123:55"><name pos:start="123:13" pos:end="123:18">dprint</name><argument_list pos:start="123:19" pos:end="123:55">(<argument pos:start="123:20" pos:end="123:20"><expr pos:start="123:20" pos:end="123:20"><name pos:start="123:20" pos:end="123:20">a</name></expr></argument>, <argument pos:start="123:23" pos:end="123:23"><expr pos:start="123:23" pos:end="123:23"><literal type="number" pos:start="123:23" pos:end="123:23">1</literal></expr></argument>, <argument pos:start="123:26" pos:end="123:54"><expr pos:start="123:26" pos:end="123:54"><literal type="string" pos:start="123:26" pos:end="123:54">"unhandled pin control bit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:41"><expr pos:start="127:9" pos:end="127:40"><call pos:start="127:9" pos:end="127:40"><name pos:start="127:9" pos:end="127:26">hda_codec_response</name><argument_list pos:start="127:27" pos:end="127:40">(<argument pos:start="127:28" pos:end="127:30"><expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:30">hda</name></expr></argument>, <argument pos:start="127:33" pos:end="127:36"><expr pos:start="127:33" pos:end="127:36"><name pos:start="127:33" pos:end="127:36">true</name></expr></argument>, <argument pos:start="127:39" pos:end="127:39"><expr pos:start="127:39" pos:end="127:39"><literal type="number" pos:start="127:39" pos:end="127:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>



    <comment type="block" pos:start="133:5" pos:end="133:29">/* audio in/out widget */</comment>

    <case pos:start="135:5" pos:end="135:38">case <expr pos:start="135:10" pos:end="135:37"><name pos:start="135:10" pos:end="135:37">AC_VERB_SET_CHANNEL_STREAMID</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:35"><expr pos:start="137:9" pos:end="137:34"><name pos:start="137:9" pos:end="137:10">st</name> <operator pos:start="137:12" pos:end="137:12">=</operator> <name pos:start="137:14" pos:end="137:18"><name pos:start="137:14" pos:end="137:14">a</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:18">st</name></name> <operator pos:start="137:20" pos:end="137:20">+</operator> <name pos:start="137:22" pos:end="137:34"><name pos:start="137:22" pos:end="137:25">node</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:34">stindex</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:29">(<expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:14">st</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:20">node</name></name> <operator pos:start="139:22" pos:end="139:23">==</operator> <name pos:start="139:25" pos:end="139:28">NULL</name></expr>)</condition> <block pos:start="139:31" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:22">

            <goto pos:start="141:13" pos:end="141:22">goto <name pos:start="141:18" pos:end="141:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:41"><expr pos:start="145:9" pos:end="145:40"><call pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:29">hda_audio_set_running</name><argument_list pos:start="145:30" pos:end="145:40">(<argument pos:start="145:31" pos:end="145:32"><expr pos:start="145:31" pos:end="145:32"><name pos:start="145:31" pos:end="145:32">st</name></expr></argument>, <argument pos:start="145:35" pos:end="145:39"><expr pos:start="145:35" pos:end="145:39"><name pos:start="145:35" pos:end="145:39">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:43"><expr pos:start="147:9" pos:end="147:42"><name pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:10">st</name><operator pos:start="147:11" pos:end="147:12">-&gt;</operator><name pos:start="147:13" pos:end="147:18">stream</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <operator pos:start="147:22" pos:end="147:22">(</operator><name pos:start="147:23" pos:end="147:29">payload</name> <operator pos:start="147:31" pos:end="147:32">&gt;&gt;</operator> <literal type="number" pos:start="147:34" pos:end="147:34">4</literal><operator pos:start="147:35" pos:end="147:35">)</operator> <operator pos:start="147:37" pos:end="147:37">&amp;</operator> <literal type="number" pos:start="147:39" pos:end="147:42">0x0f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:37"><expr pos:start="149:9" pos:end="149:36"><name pos:start="149:9" pos:end="149:19"><name pos:start="149:9" pos:end="149:10">st</name><operator pos:start="149:11" pos:end="149:12">-&gt;</operator><name pos:start="149:13" pos:end="149:19">channel</name></name> <operator pos:start="149:21" pos:end="149:21">=</operator> <name pos:start="149:23" pos:end="149:29">payload</name> <operator pos:start="149:31" pos:end="149:31">&amp;</operator> <literal type="number" pos:start="149:33" pos:end="149:36">0x0f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="153:56"><expr pos:start="151:9" pos:end="153:55"><call pos:start="151:9" pos:end="153:55"><name pos:start="151:9" pos:end="151:14">dprint</name><argument_list pos:start="151:15" pos:end="153:55">(<argument pos:start="151:16" pos:end="151:16"><expr pos:start="151:16" pos:end="151:16"><name pos:start="151:16" pos:end="151:16">a</name></expr></argument>, <argument pos:start="151:19" pos:end="151:19"><expr pos:start="151:19" pos:end="151:19"><literal type="number" pos:start="151:19" pos:end="151:19">2</literal></expr></argument>, <argument pos:start="151:22" pos:end="151:50"><expr pos:start="151:22" pos:end="151:50"><literal type="string" pos:start="151:22" pos:end="151:50">"%s: stream %d, channel %d\n"</literal></expr></argument>,

               <argument pos:start="153:16" pos:end="153:29"><expr pos:start="153:16" pos:end="153:29"><name pos:start="153:16" pos:end="153:29"><name pos:start="153:16" pos:end="153:17">st</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:23">node</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:29">name</name></name></expr></argument>, <argument pos:start="153:32" pos:end="153:41"><expr pos:start="153:32" pos:end="153:41"><name pos:start="153:32" pos:end="153:41"><name pos:start="153:32" pos:end="153:33">st</name><operator pos:start="153:34" pos:end="153:35">-&gt;</operator><name pos:start="153:36" pos:end="153:41">stream</name></name></expr></argument>, <argument pos:start="153:44" pos:end="153:54"><expr pos:start="153:44" pos:end="153:54"><name pos:start="153:44" pos:end="153:54"><name pos:start="153:44" pos:end="153:45">st</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:54">channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:81"><expr pos:start="155:9" pos:end="155:80"><call pos:start="155:9" pos:end="155:80"><name pos:start="155:9" pos:end="155:29">hda_audio_set_running</name><argument_list pos:start="155:30" pos:end="155:80">(<argument pos:start="155:31" pos:end="155:32"><expr pos:start="155:31" pos:end="155:32"><name pos:start="155:31" pos:end="155:32">st</name></expr></argument>, <argument pos:start="155:35" pos:end="155:79"><expr pos:start="155:35" pos:end="155:79"><name pos:start="155:35" pos:end="155:79"><name pos:start="155:35" pos:end="155:35">a</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:49">running_real</name><index pos:start="155:50" pos:end="155:79">[<expr pos:start="155:51" pos:end="155:78"><name pos:start="155:51" pos:end="155:60"><name pos:start="155:51" pos:end="155:52">st</name><operator pos:start="155:53" pos:end="155:54">-&gt;</operator><name pos:start="155:55" pos:end="155:60">output</name></name> <operator pos:start="155:62" pos:end="155:62">*</operator> <literal type="number" pos:start="155:64" pos:end="155:67">16</literal> <operator pos:start="155:67" pos:end="155:67">+</operator> <name pos:start="155:69" pos:end="155:78"><name pos:start="155:69" pos:end="155:70">st</name><operator pos:start="155:71" pos:end="155:72">-&gt;</operator><name pos:start="155:73" pos:end="155:78">stream</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:41"><expr pos:start="157:9" pos:end="157:40"><call pos:start="157:9" pos:end="157:40"><name pos:start="157:9" pos:end="157:26">hda_codec_response</name><argument_list pos:start="157:27" pos:end="157:40">(<argument pos:start="157:28" pos:end="157:30"><expr pos:start="157:28" pos:end="157:30"><name pos:start="157:28" pos:end="157:30">hda</name></expr></argument>, <argument pos:start="157:33" pos:end="157:36"><expr pos:start="157:33" pos:end="157:36"><name pos:start="157:33" pos:end="157:36">true</name></expr></argument>, <argument pos:start="157:39" pos:end="157:39"><expr pos:start="157:39" pos:end="157:39"><literal type="number" pos:start="157:39" pos:end="157:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:26">case <expr pos:start="161:10" pos:end="161:25"><name pos:start="161:10" pos:end="161:25">AC_VERB_GET_CONV</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:35"><expr pos:start="163:9" pos:end="163:34"><name pos:start="163:9" pos:end="163:10">st</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <name pos:start="163:14" pos:end="163:18"><name pos:start="163:14" pos:end="163:14">a</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:18">st</name></name> <operator pos:start="163:20" pos:end="163:20">+</operator> <name pos:start="163:22" pos:end="163:34"><name pos:start="163:22" pos:end="163:25">node</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:34">stindex</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:29">(<expr pos:start="165:13" pos:end="165:28"><name pos:start="165:13" pos:end="165:20"><name pos:start="165:13" pos:end="165:14">st</name><operator pos:start="165:15" pos:end="165:16">-&gt;</operator><name pos:start="165:17" pos:end="165:20">node</name></name> <operator pos:start="165:22" pos:end="165:23">==</operator> <name pos:start="165:25" pos:end="165:28">NULL</name></expr>)</condition> <block pos:start="165:31" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:22">

            <goto pos:start="167:13" pos:end="167:22">goto <name pos:start="167:18" pos:end="167:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:16">response</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <name pos:start="171:20" pos:end="171:29"><name pos:start="171:20" pos:end="171:21">st</name><operator pos:start="171:22" pos:end="171:23">-&gt;</operator><name pos:start="171:24" pos:end="171:29">stream</name></name> <operator pos:start="171:31" pos:end="171:32">&lt;&lt;</operator> <literal type="number" pos:start="171:34" pos:end="171:34">4</literal> <operator pos:start="171:36" pos:end="171:36">|</operator> <name pos:start="171:38" pos:end="171:48"><name pos:start="171:38" pos:end="171:39">st</name><operator pos:start="171:40" pos:end="171:41">-&gt;</operator><name pos:start="171:42" pos:end="171:48">channel</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:48"><expr pos:start="173:9" pos:end="173:47"><call pos:start="173:9" pos:end="173:47"><name pos:start="173:9" pos:end="173:26">hda_codec_response</name><argument_list pos:start="173:27" pos:end="173:47">(<argument pos:start="173:28" pos:end="173:30"><expr pos:start="173:28" pos:end="173:30"><name pos:start="173:28" pos:end="173:30">hda</name></expr></argument>, <argument pos:start="173:33" pos:end="173:36"><expr pos:start="173:33" pos:end="173:36"><name pos:start="173:33" pos:end="173:36">true</name></expr></argument>, <argument pos:start="173:39" pos:end="173:46"><expr pos:start="173:39" pos:end="173:46"><name pos:start="173:39" pos:end="173:46">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:35">case <expr pos:start="177:10" pos:end="177:34"><name pos:start="177:10" pos:end="177:34">AC_VERB_SET_STREAM_FORMAT</name></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:35"><expr pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:10">st</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <name pos:start="179:14" pos:end="179:18"><name pos:start="179:14" pos:end="179:14">a</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:18">st</name></name> <operator pos:start="179:20" pos:end="179:20">+</operator> <name pos:start="179:22" pos:end="179:34"><name pos:start="179:22" pos:end="179:25">node</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:34">stindex</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="185:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:29">(<expr pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:20"><name pos:start="181:13" pos:end="181:14">st</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:20">node</name></name> <operator pos:start="181:22" pos:end="181:23">==</operator> <name pos:start="181:25" pos:end="181:28">NULL</name></expr>)</condition> <block pos:start="181:31" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:22">

            <goto pos:start="183:13" pos:end="183:22">goto <name pos:start="183:18" pos:end="183:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:18"><name pos:start="187:9" pos:end="187:10">st</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:18">format</name></name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:28">payload</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:49"><expr pos:start="189:9" pos:end="189:48"><call pos:start="189:9" pos:end="189:48"><name pos:start="189:9" pos:end="189:27">hda_codec_parse_fmt</name><argument_list pos:start="189:28" pos:end="189:48">(<argument pos:start="189:29" pos:end="189:38"><expr pos:start="189:29" pos:end="189:38"><name pos:start="189:29" pos:end="189:38"><name pos:start="189:29" pos:end="189:30">st</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:38">format</name></name></expr></argument>, <argument pos:start="189:41" pos:end="189:47"><expr pos:start="189:41" pos:end="189:47"><operator pos:start="189:41" pos:end="189:41">&amp;</operator><name pos:start="189:42" pos:end="189:47"><name pos:start="189:42" pos:end="189:43">st</name><operator pos:start="189:44" pos:end="189:45">-&gt;</operator><name pos:start="189:46" pos:end="189:47">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:28"><expr pos:start="191:9" pos:end="191:27"><call pos:start="191:9" pos:end="191:27"><name pos:start="191:9" pos:end="191:23">hda_audio_setup</name><argument_list pos:start="191:24" pos:end="191:27">(<argument pos:start="191:25" pos:end="191:26"><expr pos:start="191:25" pos:end="191:26"><name pos:start="191:25" pos:end="191:26">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:41"><expr pos:start="193:9" pos:end="193:40"><call pos:start="193:9" pos:end="193:40"><name pos:start="193:9" pos:end="193:26">hda_codec_response</name><argument_list pos:start="193:27" pos:end="193:40">(<argument pos:start="193:28" pos:end="193:30"><expr pos:start="193:28" pos:end="193:30"><name pos:start="193:28" pos:end="193:30">hda</name></expr></argument>, <argument pos:start="193:33" pos:end="193:36"><expr pos:start="193:33" pos:end="193:36"><name pos:start="193:33" pos:end="193:36">true</name></expr></argument>, <argument pos:start="193:39" pos:end="193:39"><expr pos:start="193:39" pos:end="193:39"><literal type="number" pos:start="193:39" pos:end="193:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    <case pos:start="197:5" pos:end="197:35">case <expr pos:start="197:10" pos:end="197:34"><name pos:start="197:10" pos:end="197:34">AC_VERB_GET_STREAM_FORMAT</name></expr>:</case>

        <expr_stmt pos:start="199:9" pos:end="199:35"><expr pos:start="199:9" pos:end="199:34"><name pos:start="199:9" pos:end="199:10">st</name> <operator pos:start="199:12" pos:end="199:12">=</operator> <name pos:start="199:14" pos:end="199:18"><name pos:start="199:14" pos:end="199:14">a</name><operator pos:start="199:15" pos:end="199:16">-&gt;</operator><name pos:start="199:17" pos:end="199:18">st</name></name> <operator pos:start="199:20" pos:end="199:20">+</operator> <name pos:start="199:22" pos:end="199:34"><name pos:start="199:22" pos:end="199:25">node</name><operator pos:start="199:26" pos:end="199:27">-&gt;</operator><name pos:start="199:28" pos:end="199:34">stindex</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="205:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:29">(<expr pos:start="201:13" pos:end="201:28"><name pos:start="201:13" pos:end="201:20"><name pos:start="201:13" pos:end="201:14">st</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:20">node</name></name> <operator pos:start="201:22" pos:end="201:23">==</operator> <name pos:start="201:25" pos:end="201:28">NULL</name></expr>)</condition> <block pos:start="201:31" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:22">

            <goto pos:start="203:13" pos:end="203:22">goto <name pos:start="203:18" pos:end="203:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:50"><expr pos:start="207:9" pos:end="207:49"><call pos:start="207:9" pos:end="207:49"><name pos:start="207:9" pos:end="207:26">hda_codec_response</name><argument_list pos:start="207:27" pos:end="207:49">(<argument pos:start="207:28" pos:end="207:30"><expr pos:start="207:28" pos:end="207:30"><name pos:start="207:28" pos:end="207:30">hda</name></expr></argument>, <argument pos:start="207:33" pos:end="207:36"><expr pos:start="207:33" pos:end="207:36"><name pos:start="207:33" pos:end="207:36">true</name></expr></argument>, <argument pos:start="207:39" pos:end="207:48"><expr pos:start="207:39" pos:end="207:48"><name pos:start="207:39" pos:end="207:48"><name pos:start="207:39" pos:end="207:40">st</name><operator pos:start="207:41" pos:end="207:42">-&gt;</operator><name pos:start="207:43" pos:end="207:48">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="209:9" pos:end="209:14">break;</break>

    <case pos:start="211:5" pos:end="211:35">case <expr pos:start="211:10" pos:end="211:34"><name pos:start="211:10" pos:end="211:34">AC_VERB_GET_AMP_GAIN_MUTE</name></expr>:</case>

        <expr_stmt pos:start="213:9" pos:end="213:35"><expr pos:start="213:9" pos:end="213:34"><name pos:start="213:9" pos:end="213:10">st</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <name pos:start="213:14" pos:end="213:18"><name pos:start="213:14" pos:end="213:14">a</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:18">st</name></name> <operator pos:start="213:20" pos:end="213:20">+</operator> <name pos:start="213:22" pos:end="213:34"><name pos:start="213:22" pos:end="213:25">node</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:34">stindex</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="219:9"><if pos:start="215:9" pos:end="219:9">if <condition pos:start="215:12" pos:end="215:29">(<expr pos:start="215:13" pos:end="215:28"><name pos:start="215:13" pos:end="215:20"><name pos:start="215:13" pos:end="215:14">st</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:20">node</name></name> <operator pos:start="215:22" pos:end="215:23">==</operator> <name pos:start="215:25" pos:end="215:28">NULL</name></expr>)</condition> <block pos:start="215:31" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:22">

            <goto pos:start="217:13" pos:end="217:22">goto <name pos:start="217:18" pos:end="217:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="229:9"><if pos:start="221:9" pos:end="225:9">if <condition pos:start="221:12" pos:end="221:38">(<expr pos:start="221:13" pos:end="221:37"><name pos:start="221:13" pos:end="221:19">payload</name> <operator pos:start="221:21" pos:end="221:21">&amp;</operator> <name pos:start="221:23" pos:end="221:37">AC_AMP_GET_LEFT</name></expr>)</condition> <block pos:start="221:40" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:73">

            <expr_stmt pos:start="223:13" pos:end="223:73"><expr pos:start="223:13" pos:end="223:72"><name pos:start="223:13" pos:end="223:20">response</name> <operator pos:start="223:22" pos:end="223:22">=</operator> <name pos:start="223:24" pos:end="223:36"><name pos:start="223:24" pos:end="223:25">st</name><operator pos:start="223:26" pos:end="223:27">-&gt;</operator><name pos:start="223:28" pos:end="223:36">gain_left</name></name> <operator pos:start="223:38" pos:end="223:38">|</operator> <operator pos:start="223:40" pos:end="223:40">(</operator><ternary pos:start="223:41" pos:end="223:71"><condition pos:start="223:41" pos:end="223:55"><expr pos:start="223:41" pos:end="223:53"><name pos:start="223:41" pos:end="223:53"><name pos:start="223:41" pos:end="223:42">st</name><operator pos:start="223:43" pos:end="223:44">-&gt;</operator><name pos:start="223:45" pos:end="223:53">mute_left</name></name></expr> ?</condition><then pos:start="223:57" pos:end="223:67"> <expr pos:start="223:57" pos:end="223:67"><name pos:start="223:57" pos:end="223:67">AC_AMP_MUTE</name></expr> </then><else pos:start="223:69" pos:end="223:71">: <expr pos:start="223:71" pos:end="223:71"><literal type="number" pos:start="223:71" pos:end="223:71">0</literal></expr></else></ternary><operator pos:start="223:72" pos:end="223:72">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="225:11" pos:end="229:9">else <block pos:start="225:16" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:75">

            <expr_stmt pos:start="227:13" pos:end="227:75"><expr pos:start="227:13" pos:end="227:74"><name pos:start="227:13" pos:end="227:20">response</name> <operator pos:start="227:22" pos:end="227:22">=</operator> <name pos:start="227:24" pos:end="227:37"><name pos:start="227:24" pos:end="227:25">st</name><operator pos:start="227:26" pos:end="227:27">-&gt;</operator><name pos:start="227:28" pos:end="227:37">gain_right</name></name> <operator pos:start="227:39" pos:end="227:39">|</operator> <operator pos:start="227:41" pos:end="227:41">(</operator><ternary pos:start="227:42" pos:end="227:73"><condition pos:start="227:42" pos:end="227:57"><expr pos:start="227:42" pos:end="227:55"><name pos:start="227:42" pos:end="227:55"><name pos:start="227:42" pos:end="227:43">st</name><operator pos:start="227:44" pos:end="227:45">-&gt;</operator><name pos:start="227:46" pos:end="227:55">mute_right</name></name></expr> ?</condition><then pos:start="227:59" pos:end="227:69"> <expr pos:start="227:59" pos:end="227:69"><name pos:start="227:59" pos:end="227:69">AC_AMP_MUTE</name></expr> </then><else pos:start="227:71" pos:end="227:73">: <expr pos:start="227:73" pos:end="227:73"><literal type="number" pos:start="227:73" pos:end="227:73">0</literal></expr></else></ternary><operator pos:start="227:74" pos:end="227:74">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:48"><expr pos:start="231:9" pos:end="231:47"><call pos:start="231:9" pos:end="231:47"><name pos:start="231:9" pos:end="231:26">hda_codec_response</name><argument_list pos:start="231:27" pos:end="231:47">(<argument pos:start="231:28" pos:end="231:30"><expr pos:start="231:28" pos:end="231:30"><name pos:start="231:28" pos:end="231:30">hda</name></expr></argument>, <argument pos:start="231:33" pos:end="231:36"><expr pos:start="231:33" pos:end="231:36"><name pos:start="231:33" pos:end="231:36">true</name></expr></argument>, <argument pos:start="231:39" pos:end="231:46"><expr pos:start="231:39" pos:end="231:46"><name pos:start="231:39" pos:end="231:46">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:35">case <expr pos:start="235:10" pos:end="235:34"><name pos:start="235:10" pos:end="235:34">AC_VERB_SET_AMP_GAIN_MUTE</name></expr>:</case>

        <expr_stmt pos:start="237:9" pos:end="237:35"><expr pos:start="237:9" pos:end="237:34"><name pos:start="237:9" pos:end="237:10">st</name> <operator pos:start="237:12" pos:end="237:12">=</operator> <name pos:start="237:14" pos:end="237:18"><name pos:start="237:14" pos:end="237:14">a</name><operator pos:start="237:15" pos:end="237:16">-&gt;</operator><name pos:start="237:17" pos:end="237:18">st</name></name> <operator pos:start="237:20" pos:end="237:20">+</operator> <name pos:start="237:22" pos:end="237:34"><name pos:start="237:22" pos:end="237:25">node</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:34">stindex</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="239:9" pos:end="243:9"><if pos:start="239:9" pos:end="243:9">if <condition pos:start="239:12" pos:end="239:29">(<expr pos:start="239:13" pos:end="239:28"><name pos:start="239:13" pos:end="239:20"><name pos:start="239:13" pos:end="239:14">st</name><operator pos:start="239:15" pos:end="239:16">-&gt;</operator><name pos:start="239:17" pos:end="239:20">node</name></name> <operator pos:start="239:22" pos:end="239:23">==</operator> <name pos:start="239:25" pos:end="239:28">NULL</name></expr>)</condition> <block pos:start="239:31" pos:end="243:9">{<block_content pos:start="241:13" pos:end="241:22">

            <goto pos:start="241:13" pos:end="241:22">goto <name pos:start="241:18" pos:end="241:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="245:9" pos:end="261:55"><expr pos:start="245:9" pos:end="261:54"><call pos:start="245:9" pos:end="261:54"><name pos:start="245:9" pos:end="245:14">dprint</name><argument_list pos:start="245:15" pos:end="261:54">(<argument pos:start="245:16" pos:end="245:16"><expr pos:start="245:16" pos:end="245:16"><name pos:start="245:16" pos:end="245:16">a</name></expr></argument>, <argument pos:start="245:19" pos:end="245:19"><expr pos:start="245:19" pos:end="245:19"><literal type="number" pos:start="245:19" pos:end="245:19">1</literal></expr></argument>, <argument pos:start="245:22" pos:end="245:65"><expr pos:start="245:22" pos:end="245:65"><literal type="string" pos:start="245:22" pos:end="245:65">"amp (%s): %s%s%s%s index %d  gain %3d %s\n"</literal></expr></argument>,

               <argument pos:start="247:16" pos:end="247:29"><expr pos:start="247:16" pos:end="247:29"><name pos:start="247:16" pos:end="247:29"><name pos:start="247:16" pos:end="247:17">st</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:23">node</name><operator pos:start="247:24" pos:end="247:25">-&gt;</operator><name pos:start="247:26" pos:end="247:29">name</name></name></expr></argument>,

               <argument pos:start="249:16" pos:end="249:56"><expr pos:start="249:16" pos:end="249:56"><ternary pos:start="249:16" pos:end="249:56"><condition pos:start="249:16" pos:end="249:46"><expr pos:start="249:16" pos:end="249:44"><operator pos:start="249:16" pos:end="249:16">(</operator><name pos:start="249:17" pos:end="249:23">payload</name> <operator pos:start="249:25" pos:end="249:25">&amp;</operator> <name pos:start="249:27" pos:end="249:43">AC_AMP_SET_OUTPUT</name><operator pos:start="249:44" pos:end="249:44">)</operator></expr> ?</condition><then pos:start="249:48" pos:end="249:50"> <expr pos:start="249:48" pos:end="249:50"><literal type="string" pos:start="249:48" pos:end="249:50">"o"</literal></expr> </then><else pos:start="249:52" pos:end="249:56">: <expr pos:start="249:54" pos:end="249:56"><literal type="string" pos:start="249:54" pos:end="249:56">"-"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="251:16" pos:end="251:56"><expr pos:start="251:16" pos:end="251:56"><ternary pos:start="251:16" pos:end="251:56"><condition pos:start="251:16" pos:end="251:46"><expr pos:start="251:16" pos:end="251:43"><operator pos:start="251:16" pos:end="251:16">(</operator><name pos:start="251:17" pos:end="251:23">payload</name> <operator pos:start="251:25" pos:end="251:25">&amp;</operator> <name pos:start="251:27" pos:end="251:42">AC_AMP_SET_INPUT</name><operator pos:start="251:43" pos:end="251:43">)</operator></expr>  ?</condition><then pos:start="251:48" pos:end="251:50"> <expr pos:start="251:48" pos:end="251:50"><literal type="string" pos:start="251:48" pos:end="251:50">"i"</literal></expr> </then><else pos:start="251:52" pos:end="251:56">: <expr pos:start="251:54" pos:end="251:56"><literal type="string" pos:start="251:54" pos:end="251:56">"-"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="253:16" pos:end="253:56"><expr pos:start="253:16" pos:end="253:56"><ternary pos:start="253:16" pos:end="253:56"><condition pos:start="253:16" pos:end="253:46"><expr pos:start="253:16" pos:end="253:42"><operator pos:start="253:16" pos:end="253:16">(</operator><name pos:start="253:17" pos:end="253:23">payload</name> <operator pos:start="253:25" pos:end="253:25">&amp;</operator> <name pos:start="253:27" pos:end="253:41">AC_AMP_SET_LEFT</name><operator pos:start="253:42" pos:end="253:42">)</operator></expr>   ?</condition><then pos:start="253:48" pos:end="253:50"> <expr pos:start="253:48" pos:end="253:50"><literal type="string" pos:start="253:48" pos:end="253:50">"l"</literal></expr> </then><else pos:start="253:52" pos:end="253:56">: <expr pos:start="253:54" pos:end="253:56"><literal type="string" pos:start="253:54" pos:end="253:56">"-"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="255:16" pos:end="255:56"><expr pos:start="255:16" pos:end="255:56"><ternary pos:start="255:16" pos:end="255:56"><condition pos:start="255:16" pos:end="255:46"><expr pos:start="255:16" pos:end="255:43"><operator pos:start="255:16" pos:end="255:16">(</operator><name pos:start="255:17" pos:end="255:23">payload</name> <operator pos:start="255:25" pos:end="255:25">&amp;</operator> <name pos:start="255:27" pos:end="255:42">AC_AMP_SET_RIGHT</name><operator pos:start="255:43" pos:end="255:43">)</operator></expr>  ?</condition><then pos:start="255:48" pos:end="255:50"> <expr pos:start="255:48" pos:end="255:50"><literal type="string" pos:start="255:48" pos:end="255:50">"r"</literal></expr> </then><else pos:start="255:52" pos:end="255:56">: <expr pos:start="255:54" pos:end="255:56"><literal type="string" pos:start="255:54" pos:end="255:56">"-"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="257:16" pos:end="257:69"><expr pos:start="257:16" pos:end="257:69"><operator pos:start="257:16" pos:end="257:16">(</operator><name pos:start="257:17" pos:end="257:23">payload</name> <operator pos:start="257:25" pos:end="257:25">&amp;</operator> <name pos:start="257:27" pos:end="257:42">AC_AMP_SET_INDEX</name><operator pos:start="257:43" pos:end="257:43">)</operator> <operator pos:start="257:45" pos:end="257:46">&gt;&gt;</operator> <name pos:start="257:48" pos:end="257:69">AC_AMP_SET_INDEX_SHIFT</name></expr></argument>,

               <argument pos:start="259:16" pos:end="259:38"><expr pos:start="259:16" pos:end="259:38"><operator pos:start="259:16" pos:end="259:16">(</operator><name pos:start="259:17" pos:end="259:23">payload</name> <operator pos:start="259:25" pos:end="259:25">&amp;</operator> <name pos:start="259:27" pos:end="259:37">AC_AMP_GAIN</name><operator pos:start="259:38" pos:end="259:38">)</operator></expr></argument>,

               <argument pos:start="261:16" pos:end="261:53"><expr pos:start="261:16" pos:end="261:53"><ternary pos:start="261:16" pos:end="261:53"><condition pos:start="261:16" pos:end="261:40"><expr pos:start="261:16" pos:end="261:38"><operator pos:start="261:16" pos:end="261:16">(</operator><name pos:start="261:17" pos:end="261:23">payload</name> <operator pos:start="261:25" pos:end="261:25">&amp;</operator> <name pos:start="261:27" pos:end="261:37">AC_AMP_MUTE</name><operator pos:start="261:38" pos:end="261:38">)</operator></expr> ?</condition><then pos:start="261:42" pos:end="261:48"> <expr pos:start="261:42" pos:end="261:48"><literal type="string" pos:start="261:42" pos:end="261:48">"muted"</literal></expr> </then><else pos:start="261:50" pos:end="261:53">: <expr pos:start="261:52" pos:end="261:53"><literal type="string" pos:start="261:52" pos:end="261:53">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="269:9"><if pos:start="263:9" pos:end="269:9">if <condition pos:start="263:12" pos:end="263:38">(<expr pos:start="263:13" pos:end="263:37"><name pos:start="263:13" pos:end="263:19">payload</name> <operator pos:start="263:21" pos:end="263:21">&amp;</operator> <name pos:start="263:23" pos:end="263:37">AC_AMP_SET_LEFT</name></expr>)</condition> <block pos:start="263:40" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:50">

            <expr_stmt pos:start="265:13" pos:end="265:50"><expr pos:start="265:13" pos:end="265:49"><name pos:start="265:13" pos:end="265:25"><name pos:start="265:13" pos:end="265:14">st</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:25">gain_left</name></name> <operator pos:start="265:27" pos:end="265:27">=</operator> <name pos:start="265:29" pos:end="265:35">payload</name> <operator pos:start="265:37" pos:end="265:37">&amp;</operator> <name pos:start="265:39" pos:end="265:49">AC_AMP_GAIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:50"><expr pos:start="267:13" pos:end="267:49"><name pos:start="267:13" pos:end="267:25"><name pos:start="267:13" pos:end="267:14">st</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:25">mute_left</name></name> <operator pos:start="267:27" pos:end="267:27">=</operator> <name pos:start="267:29" pos:end="267:35">payload</name> <operator pos:start="267:37" pos:end="267:37">&amp;</operator> <name pos:start="267:39" pos:end="267:49">AC_AMP_MUTE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="271:9" pos:end="277:9"><if pos:start="271:9" pos:end="277:9">if <condition pos:start="271:12" pos:end="271:39">(<expr pos:start="271:13" pos:end="271:38"><name pos:start="271:13" pos:end="271:19">payload</name> <operator pos:start="271:21" pos:end="271:21">&amp;</operator> <name pos:start="271:23" pos:end="271:38">AC_AMP_SET_RIGHT</name></expr>)</condition> <block pos:start="271:41" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:51">

            <expr_stmt pos:start="273:13" pos:end="273:51"><expr pos:start="273:13" pos:end="273:50"><name pos:start="273:13" pos:end="273:26"><name pos:start="273:13" pos:end="273:14">st</name><operator pos:start="273:15" pos:end="273:16">-&gt;</operator><name pos:start="273:17" pos:end="273:26">gain_right</name></name> <operator pos:start="273:28" pos:end="273:28">=</operator> <name pos:start="273:30" pos:end="273:36">payload</name> <operator pos:start="273:38" pos:end="273:38">&amp;</operator> <name pos:start="273:40" pos:end="273:50">AC_AMP_GAIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:51"><expr pos:start="275:13" pos:end="275:50"><name pos:start="275:13" pos:end="275:26"><name pos:start="275:13" pos:end="275:14">st</name><operator pos:start="275:15" pos:end="275:16">-&gt;</operator><name pos:start="275:17" pos:end="275:26">mute_right</name></name> <operator pos:start="275:28" pos:end="275:28">=</operator> <name pos:start="275:30" pos:end="275:36">payload</name> <operator pos:start="275:38" pos:end="275:38">&amp;</operator> <name pos:start="275:40" pos:end="275:50">AC_AMP_MUTE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:30"><expr pos:start="279:9" pos:end="279:29"><call pos:start="279:9" pos:end="279:29"><name pos:start="279:9" pos:end="279:25">hda_audio_set_amp</name><argument_list pos:start="279:26" pos:end="279:29">(<argument pos:start="279:27" pos:end="279:28"><expr pos:start="279:27" pos:end="279:28"><name pos:start="279:27" pos:end="279:28">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:41"><expr pos:start="281:9" pos:end="281:40"><call pos:start="281:9" pos:end="281:40"><name pos:start="281:9" pos:end="281:26">hda_codec_response</name><argument_list pos:start="281:27" pos:end="281:40">(<argument pos:start="281:28" pos:end="281:30"><expr pos:start="281:28" pos:end="281:30"><name pos:start="281:28" pos:end="281:30">hda</name></expr></argument>, <argument pos:start="281:33" pos:end="281:36"><expr pos:start="281:33" pos:end="281:36"><name pos:start="281:33" pos:end="281:36">true</name></expr></argument>, <argument pos:start="281:39" pos:end="281:39"><expr pos:start="281:39" pos:end="281:39"><literal type="number" pos:start="281:39" pos:end="281:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="283:9" pos:end="283:14">break;</break>



    <comment type="block" pos:start="287:5" pos:end="287:23">/* not supported */</comment>

    <case pos:start="289:5" pos:end="289:33">case <expr pos:start="289:10" pos:end="289:32"><name pos:start="289:10" pos:end="289:32">AC_VERB_SET_POWER_STATE</name></expr>:</case>

    <case pos:start="291:5" pos:end="291:33">case <expr pos:start="291:10" pos:end="291:32"><name pos:start="291:10" pos:end="291:32">AC_VERB_GET_POWER_STATE</name></expr>:</case>

    <case pos:start="293:5" pos:end="293:32">case <expr pos:start="293:10" pos:end="293:31"><name pos:start="293:10" pos:end="293:31">AC_VERB_GET_SDI_SELECT</name></expr>:</case>

        <expr_stmt pos:start="295:9" pos:end="295:41"><expr pos:start="295:9" pos:end="295:40"><call pos:start="295:9" pos:end="295:40"><name pos:start="295:9" pos:end="295:26">hda_codec_response</name><argument_list pos:start="295:27" pos:end="295:40">(<argument pos:start="295:28" pos:end="295:30"><expr pos:start="295:28" pos:end="295:30"><name pos:start="295:28" pos:end="295:30">hda</name></expr></argument>, <argument pos:start="295:33" pos:end="295:36"><expr pos:start="295:33" pos:end="295:36"><name pos:start="295:33" pos:end="295:36">true</name></expr></argument>, <argument pos:start="295:39" pos:end="295:39"><expr pos:start="295:39" pos:end="295:39"><literal type="number" pos:start="295:39" pos:end="295:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="297:9" pos:end="297:14">break;</break>

    <default pos:start="299:5" pos:end="299:12">default:</default>

        <goto pos:start="301:9" pos:end="301:18">goto <name pos:start="301:14" pos:end="301:17">fail</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="305:5" pos:end="305:11">return;</return>



<label pos:start="309:1" pos:end="309:5"><name pos:start="309:1" pos:end="309:4">fail</name>:</label>

    <expr_stmt pos:start="311:5" pos:end="313:70"><expr pos:start="311:5" pos:end="313:69"><call pos:start="311:5" pos:end="313:69"><name pos:start="311:5" pos:end="311:10">dprint</name><argument_list pos:start="311:11" pos:end="313:69">(<argument pos:start="311:12" pos:end="311:12"><expr pos:start="311:12" pos:end="311:12"><name pos:start="311:12" pos:end="311:12">a</name></expr></argument>, <argument pos:start="311:15" pos:end="311:15"><expr pos:start="311:15" pos:end="311:15"><literal type="number" pos:start="311:15" pos:end="311:15">1</literal></expr></argument>, <argument pos:start="311:18" pos:end="311:74"><expr pos:start="311:18" pos:end="311:74"><literal type="string" pos:start="311:18" pos:end="311:74">"%s: not handled: nid %d (%s), verb 0x%x, payload 0x%x\n"</literal></expr></argument>,

           <argument pos:start="313:12" pos:end="313:23"><expr pos:start="313:12" pos:end="313:23"><name pos:start="313:12" pos:end="313:23">__FUNCTION__</name></expr></argument>, <argument pos:start="313:26" pos:end="313:28"><expr pos:start="313:26" pos:end="313:28"><name pos:start="313:26" pos:end="313:28">nid</name></expr></argument>, <argument pos:start="313:31" pos:end="313:53"><expr pos:start="313:31" pos:end="313:53"><ternary pos:start="313:31" pos:end="313:53"><condition pos:start="313:31" pos:end="313:36"><expr pos:start="313:31" pos:end="313:34"><name pos:start="313:31" pos:end="313:34">node</name></expr> ?</condition><then pos:start="313:38" pos:end="313:47"> <expr pos:start="313:38" pos:end="313:47"><name pos:start="313:38" pos:end="313:47"><name pos:start="313:38" pos:end="313:41">node</name><operator pos:start="313:42" pos:end="313:43">-&gt;</operator><name pos:start="313:44" pos:end="313:47">name</name></name></expr> </then><else pos:start="313:49" pos:end="313:53">: <expr pos:start="313:51" pos:end="313:53"><literal type="string" pos:start="313:51" pos:end="313:53">"?"</literal></expr></else></ternary></expr></argument>, <argument pos:start="313:56" pos:end="313:59"><expr pos:start="313:56" pos:end="313:59"><name pos:start="313:56" pos:end="313:59">verb</name></expr></argument>, <argument pos:start="313:62" pos:end="313:68"><expr pos:start="313:62" pos:end="313:68"><name pos:start="313:62" pos:end="313:68">payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:37"><expr pos:start="315:5" pos:end="315:36"><call pos:start="315:5" pos:end="315:36"><name pos:start="315:5" pos:end="315:22">hda_codec_response</name><argument_list pos:start="315:23" pos:end="315:36">(<argument pos:start="315:24" pos:end="315:26"><expr pos:start="315:24" pos:end="315:26"><name pos:start="315:24" pos:end="315:26">hda</name></expr></argument>, <argument pos:start="315:29" pos:end="315:32"><expr pos:start="315:29" pos:end="315:32"><name pos:start="315:29" pos:end="315:32">true</name></expr></argument>, <argument pos:start="315:35" pos:end="315:35"><expr pos:start="315:35" pos:end="315:35"><literal type="number" pos:start="315:35" pos:end="315:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
