<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24925.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">fd_open</name><parameter_list pos:start="1:19" pos:end="1:40">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:37"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVRawState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:26">last_media_present</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:28">(<expr pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:15">type</name></name> <operator pos:start="11:17" pos:end="11:18">!=</operator> <name pos:start="11:20" pos:end="11:27">FTYPE_FD</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:22">last_media_present</name> <operator pos:start="15:24" pos:end="15:24">=</operator> <operator pos:start="15:26" pos:end="15:26">(</operator><name pos:start="15:27" pos:end="15:31"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:31">fd</name></name> <operator pos:start="15:33" pos:end="15:34">&gt;=</operator> <literal type="number" pos:start="15:36" pos:end="15:36">0</literal><operator pos:start="15:37" pos:end="15:37">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="33:5"><if pos:start="17:5" pos:end="33:5">if <condition pos:start="17:8" pos:end="19:72">(<expr pos:start="17:9" pos:end="19:71"><name pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:13">fd</name></name> <operator pos:start="17:15" pos:end="17:16">&gt;=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal> <operator pos:start="17:20" pos:end="17:21">&amp;&amp;</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><call pos:start="19:10" pos:end="19:33"><name pos:start="19:10" pos:end="19:23">qemu_get_clock</name><argument_list pos:start="19:24" pos:end="19:33">(<argument pos:start="19:25" pos:end="19:32"><expr pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:32">rt_clock</name></expr></argument>)</argument_list></call> <operator pos:start="19:35" pos:end="19:35">-</operator> <name pos:start="19:37" pos:end="19:51"><name pos:start="19:37" pos:end="19:37">s</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:51">fd_open_time</name></name><operator pos:start="19:52" pos:end="19:52">)</operator> <operator pos:start="19:54" pos:end="19:55">&gt;=</operator> <name pos:start="19:57" pos:end="19:71">FD_OPEN_TIMEOUT</name></expr>)</condition> <block pos:start="19:74" pos:end="33:5">{<block_content pos:start="21:9" pos:end="32:0">

        <expr_stmt pos:start="21:9" pos:end="21:21"><expr pos:start="21:9" pos:end="21:20"><call pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:13">close</name><argument_list pos:start="21:14" pos:end="21:20">(<argument pos:start="21:15" pos:end="21:19"><expr pos:start="21:15" pos:end="21:19"><name pos:start="21:15" pos:end="21:19"><name pos:start="21:15" pos:end="21:15">s</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:19">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:19"><expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:13">fd</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <operator pos:start="23:17" pos:end="23:17">-</operator><literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="25:28"><call pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:25">raw_close_fd_pool</name><argument_list pos:start="25:26" pos:end="25:28">(<argument pos:start="25:27" pos:end="25:27"><expr pos:start="25:27" pos:end="25:27"><name pos:start="25:27" pos:end="25:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="27:1" pos:end="27:19">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:19">DEBUG_FLOPPY</name></cpp:ifdef>

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:33"><call pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:14">printf</name><argument_list pos:start="29:15" pos:end="29:33">(<argument pos:start="29:16" pos:end="29:32"><expr pos:start="29:16" pos:end="29:32"><literal type="string" pos:start="29:16" pos:end="29:32">"Floppy closed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="79:5"><if pos:start="35:5" pos:end="79:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:13">fd</name></name> <operator pos:start="35:15" pos:end="35:15">&lt;</operator> <literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr>)</condition> <block pos:start="35:20" pos:end="79:5">{<block_content pos:start="37:9" pos:end="78:0">

        <if_stmt pos:start="37:9" pos:end="49:9"><if pos:start="37:9" pos:end="49:9">if <condition pos:start="37:12" pos:end="39:76">(<expr pos:start="37:13" pos:end="39:75"><name pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:27">fd_got_error</name></name> <operator pos:start="37:29" pos:end="37:30">&amp;&amp;</operator>

            <operator pos:start="39:13" pos:end="39:13">(</operator><call pos:start="39:14" pos:end="39:37"><name pos:start="39:14" pos:end="39:27">qemu_get_clock</name><argument_list pos:start="39:28" pos:end="39:37">(<argument pos:start="39:29" pos:end="39:36"><expr pos:start="39:29" pos:end="39:36"><name pos:start="39:29" pos:end="39:36">rt_clock</name></expr></argument>)</argument_list></call> <operator pos:start="39:39" pos:end="39:39">-</operator> <name pos:start="39:41" pos:end="39:56"><name pos:start="39:41" pos:end="39:41">s</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:56">fd_error_time</name></name><operator pos:start="39:57" pos:end="39:57">)</operator> <operator pos:start="39:59" pos:end="39:59">&lt;</operator> <name pos:start="39:61" pos:end="39:75">FD_OPEN_TIMEOUT</name></expr>)</condition> <block pos:start="39:78" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:24">

<cpp:ifdef pos:start="41:1" pos:end="41:19">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:19">DEBUG_FLOPPY</name></cpp:ifdef>

            <expr_stmt pos:start="43:13" pos:end="46:0"><expr pos:start="43:13" pos:end="43:48"><call pos:start="43:13" pos:end="43:48"><name pos:start="43:13" pos:end="43:18">printf</name><argument_list pos:start="43:19" pos:end="43:48">(<argument pos:start="43:20" pos:end="43:47"><expr pos:start="43:20" pos:end="43:47"><literal type="string" pos:start="43:20" pos:end="43:47">"No floppy (open delayed)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

            <return pos:start="47:13" pos:end="47:24">return <expr pos:start="47:20" pos:end="47:23"><operator pos:start="47:20" pos:end="47:20">-</operator><name pos:start="47:21" pos:end="47:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:53"><expr pos:start="51:9" pos:end="51:52"><name pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:13">fd</name></name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:20">open</name><argument_list pos:start="51:21" pos:end="51:52">(<argument pos:start="51:22" pos:end="51:33"><expr pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:23">bs</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:33">filename</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:51"><expr pos:start="51:36" pos:end="51:51"><name pos:start="51:36" pos:end="51:51"><name pos:start="51:36" pos:end="51:36">s</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:51">fd_open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="74:0"><if pos:start="53:9" pos:end="74:0">if <condition pos:start="53:12" pos:end="53:22">(<expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:17"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:17">fd</name></name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="74:0">{<block_content pos:start="55:13" pos:end="69:24">

            <expr_stmt pos:start="55:13" pos:end="55:56"><expr pos:start="55:13" pos:end="55:55"><name pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:28">fd_error_time</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <call pos:start="55:32" pos:end="55:55"><name pos:start="55:32" pos:end="55:45">qemu_get_clock</name><argument_list pos:start="55:46" pos:end="55:55">(<argument pos:start="55:47" pos:end="55:54"><expr pos:start="55:47" pos:end="55:54"><name pos:start="55:47" pos:end="55:54">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:32"><expr pos:start="57:13" pos:end="57:31"><name pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:27">fd_got_error</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <literal type="number" pos:start="57:31" pos:end="57:31">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="64:0"><if pos:start="59:13" pos:end="64:0">if <condition pos:start="59:16" pos:end="59:35">(<expr pos:start="59:17" pos:end="59:34"><name pos:start="59:17" pos:end="59:34">last_media_present</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="64:0"><block_content pos:start="61:17" pos:end="64:0">

                <expr_stmt pos:start="61:17" pos:end="64:0"><expr pos:start="61:17" pos:end="61:39"><name pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:35">fd_media_changed</name></name> <operator pos:start="61:37" pos:end="61:37">=</operator> <literal type="number" pos:start="61:39" pos:end="61:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="63:1" pos:end="63:19">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:19">DEBUG_FLOPPY</name></cpp:ifdef>

            <expr_stmt pos:start="65:13" pos:end="68:0"><expr pos:start="65:13" pos:end="65:33"><call pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:18">printf</name><argument_list pos:start="65:19" pos:end="65:33">(<argument pos:start="65:20" pos:end="65:32"><expr pos:start="65:20" pos:end="65:32"><literal type="string" pos:start="65:20" pos:end="65:32">"No floppy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

            <return pos:start="69:13" pos:end="69:24">return <expr pos:start="69:20" pos:end="69:23"><operator pos:start="69:20" pos:end="69:20">-</operator><name pos:start="69:21" pos:end="69:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="73:1" pos:end="73:19">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:19">DEBUG_FLOPPY</name></cpp:ifdef>

        <expr_stmt pos:start="75:9" pos:end="78:0"><expr pos:start="75:9" pos:end="75:33"><call pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:14">printf</name><argument_list pos:start="75:15" pos:end="75:33">(<argument pos:start="75:16" pos:end="75:32"><expr pos:start="75:16" pos:end="75:32"><literal type="string" pos:start="75:16" pos:end="75:32">"Floppy opened\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="83:32"><if pos:start="81:5" pos:end="83:32">if <condition pos:start="81:8" pos:end="81:28">(<expr pos:start="81:9" pos:end="81:27"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:27">last_media_present</name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:32"><block_content pos:start="83:9" pos:end="83:32">

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:27">fd_media_changed</name></name> <operator pos:start="83:29" pos:end="83:29">=</operator> <literal type="number" pos:start="83:31" pos:end="83:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:47"><expr pos:start="85:5" pos:end="85:46"><name pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:19">fd_open_time</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:46"><name pos:start="85:23" pos:end="85:36">qemu_get_clock</name><argument_list pos:start="85:37" pos:end="85:46">(<argument pos:start="85:38" pos:end="85:45"><expr pos:start="85:38" pos:end="85:45"><name pos:start="85:38" pos:end="85:45">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:24"><expr pos:start="87:5" pos:end="87:23"><name pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:19">fd_got_error</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
