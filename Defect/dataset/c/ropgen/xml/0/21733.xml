<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21733.c" pos:tabs="8"><function pos:start="1:1" pos:end="3989:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">disas_neon_data_insn</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:44">DisasContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">uint32_t</name></type> <name pos:start="1:59" pos:end="1:62">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="3989:1">{<block_content pos:start="5:5" pos:end="3987:13">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rd</name></decl>, <decl pos:start="9:13" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:14">rn</name></decl>, <decl pos:start="9:17" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:18">rm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">pass</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">pairwise</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">u</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:16">imm</name></decl>, <decl pos:start="23:19" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:19" pos:end="23:22">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">TCGv_i32</name></type> <name pos:start="25:14" pos:end="25:16">tmp</name></decl>, <decl pos:start="25:19" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:19" pos:end="25:22">tmp2</name></decl>, <decl pos:start="25:25" pos:end="25:28"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:25" pos:end="25:28">tmp3</name></decl>, <decl pos:start="25:31" pos:end="25:34"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:31" pos:end="25:34">tmp4</name></decl>, <decl pos:start="25:37" pos:end="25:40"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:37" pos:end="25:40">tmp5</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">TCGv_i64</name></type> <name pos:start="27:14" pos:end="27:18">tmp64</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="37:7">/* FIXME: this access check should not take precedence over UNDEF

     * for invalid encodings; we will generate incorrect syndrome information

     * for attempts to execute invalid vfp/neon encodings with FP disabled.

     */</comment>

    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:22"><name pos:start="39:10" pos:end="39:10">s</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:22">cpacr_fpen</name></name></expr>)</condition> <block pos:start="39:25" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:17">

        <expr_stmt pos:start="41:9" pos:end="45:52"><expr pos:start="41:9" pos:end="45:51"><call pos:start="41:9" pos:end="45:51"><name pos:start="41:9" pos:end="41:26">gen_exception_insn</name><argument_list pos:start="41:27" pos:end="45:51">(<argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">s</name></expr></argument>, <argument pos:start="41:31" pos:end="41:31"><expr pos:start="41:31" pos:end="41:31"><literal type="number" pos:start="41:31" pos:end="41:31">4</literal></expr></argument>, <argument pos:start="41:34" pos:end="41:42"><expr pos:start="41:34" pos:end="41:42"><name pos:start="41:34" pos:end="41:42">EXCP_UDEF</name></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:63"><expr pos:start="43:28" pos:end="43:63"><call pos:start="43:28" pos:end="43:63"><name pos:start="43:28" pos:end="43:45">syn_fp_access_trap</name><argument_list pos:start="43:46" pos:end="43:63">(<argument pos:start="43:47" pos:end="43:47"><expr pos:start="43:47" pos:end="43:47"><literal type="number" pos:start="43:47" pos:end="43:47">1</literal></expr></argument>, <argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><literal type="number" pos:start="43:50" pos:end="43:52">0xe</literal></expr></argument>, <argument pos:start="43:55" pos:end="43:62"><expr pos:start="43:55" pos:end="43:62"><name pos:start="43:55" pos:end="43:62"><name pos:start="43:55" pos:end="43:55">s</name><operator pos:start="43:56" pos:end="43:57">-&gt;</operator><name pos:start="43:58" pos:end="43:62">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:50"><expr pos:start="45:28" pos:end="45:50"><call pos:start="45:28" pos:end="45:50"><name pos:start="45:28" pos:end="45:47">default_exception_el</name><argument_list pos:start="45:48" pos:end="45:50">(<argument pos:start="45:49" pos:end="45:49"><expr pos:start="45:49" pos:end="45:49"><name pos:start="45:49" pos:end="45:49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="55:15"><if pos:start="53:5" pos:end="55:15">if <condition pos:start="53:8" pos:end="53:24">(<expr pos:start="53:9" pos:end="53:23"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:23"><name pos:start="53:10" pos:end="53:10">s</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:23">vfp_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="55:7" pos:end="55:15"><block_content pos:start="55:7" pos:end="55:15">

      <return pos:start="55:7" pos:end="55:15">return <expr pos:start="55:14" pos:end="55:14"><literal type="number" pos:start="55:14" pos:end="55:14">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:5">q</name> <operator pos:start="57:7" pos:end="57:7">=</operator> <operator pos:start="57:9" pos:end="57:9">(</operator><name pos:start="57:10" pos:end="57:13">insn</name> <operator pos:start="57:15" pos:end="57:15">&amp;</operator> <operator pos:start="57:17" pos:end="57:17">(</operator><literal type="number" pos:start="57:18" pos:end="57:18">1</literal> <operator pos:start="57:20" pos:end="57:21">&lt;&lt;</operator> <literal type="number" pos:start="57:23" pos:end="57:23">6</literal><operator pos:start="57:24" pos:end="57:24">)</operator><operator pos:start="57:25" pos:end="57:25">)</operator> <operator pos:start="57:27" pos:end="57:28">!=</operator> <literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:5">u</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:13">insn</name> <operator pos:start="59:15" pos:end="59:16">&gt;&gt;</operator> <literal type="number" pos:start="59:18" pos:end="59:19">24</literal><operator pos:start="59:20" pos:end="59:20">)</operator> <operator pos:start="59:22" pos:end="59:22">&amp;</operator> <literal type="number" pos:start="59:24" pos:end="59:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><call pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:14">VFP_DREG_D</name><argument_list pos:start="61:15" pos:end="61:24">(<argument pos:start="61:16" pos:end="61:17"><expr pos:start="61:16" pos:end="61:17"><name pos:start="61:16" pos:end="61:17">rd</name></expr></argument>, <argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><call pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:14">VFP_DREG_N</name><argument_list pos:start="63:15" pos:end="63:24">(<argument pos:start="63:16" pos:end="63:17"><expr pos:start="63:16" pos:end="63:17"><name pos:start="63:16" pos:end="63:17">rn</name></expr></argument>, <argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><call pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:14">VFP_DREG_M</name><argument_list pos:start="65:15" pos:end="65:24">(<argument pos:start="65:16" pos:end="65:17"><expr pos:start="65:16" pos:end="65:17"><name pos:start="65:16" pos:end="65:17">rm</name></expr></argument>, <argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:8">size</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <operator pos:start="67:12" pos:end="67:12">(</operator><name pos:start="67:13" pos:end="67:16">insn</name> <operator pos:start="67:18" pos:end="67:19">&gt;&gt;</operator> <literal type="number" pos:start="67:21" pos:end="67:22">20</literal><operator pos:start="67:23" pos:end="67:23">)</operator> <operator pos:start="67:25" pos:end="67:25">&amp;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="3985:5"><if pos:start="69:5" pos:end="1091:5">if <condition pos:start="69:8" pos:end="69:32">(<expr pos:start="69:9" pos:end="69:31"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:13">insn</name> <operator pos:start="69:15" pos:end="69:15">&amp;</operator> <operator pos:start="69:17" pos:end="69:17">(</operator><literal type="number" pos:start="69:18" pos:end="69:18">1</literal> <operator pos:start="69:20" pos:end="69:21">&lt;&lt;</operator> <literal type="number" pos:start="69:23" pos:end="69:24">23</literal><operator pos:start="69:25" pos:end="69:25">)</operator><operator pos:start="69:26" pos:end="69:26">)</operator> <operator pos:start="69:28" pos:end="69:29">==</operator> <literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr>)</condition> <block pos:start="69:34" pos:end="1091:5">{<block_content pos:start="73:9" pos:end="1087:9">

        <comment type="block" pos:start="71:9" pos:end="71:42">/* Three register same length.  */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:54"><expr pos:start="73:9" pos:end="73:53"><name pos:start="73:9" pos:end="73:10">op</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <operator pos:start="73:14" pos:end="73:14">(</operator><operator pos:start="73:15" pos:end="73:15">(</operator><name pos:start="73:16" pos:end="73:19">insn</name> <operator pos:start="73:21" pos:end="73:22">&gt;&gt;</operator> <literal type="number" pos:start="73:24" pos:end="73:24">7</literal><operator pos:start="73:25" pos:end="73:25">)</operator> <operator pos:start="73:27" pos:end="73:27">&amp;</operator> <literal type="number" pos:start="73:29" pos:end="73:32">0x1e</literal><operator pos:start="73:33" pos:end="73:33">)</operator> <operator pos:start="73:35" pos:end="73:35">|</operator> <operator pos:start="73:37" pos:end="73:37">(</operator><operator pos:start="73:38" pos:end="73:38">(</operator><name pos:start="73:39" pos:end="73:42">insn</name> <operator pos:start="73:44" pos:end="73:45">&gt;&gt;</operator> <literal type="number" pos:start="73:47" pos:end="73:47">4</literal><operator pos:start="73:48" pos:end="73:48">)</operator> <operator pos:start="73:50" pos:end="73:50">&amp;</operator> <literal type="number" pos:start="73:52" pos:end="73:52">1</literal><operator pos:start="73:53" pos:end="73:53">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="75:9" pos:end="75:63">/* Catch invalid op and bad size combinations: UNDEF */</comment>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:51">(<expr pos:start="77:13" pos:end="77:50"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:30"><name pos:start="77:14" pos:end="77:26">neon_3r_sizes</name><index pos:start="77:27" pos:end="77:30">[<expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">op</name></expr>]</index></name> <operator pos:start="77:32" pos:end="77:32">&amp;</operator> <operator pos:start="77:34" pos:end="77:34">(</operator><literal type="number" pos:start="77:35" pos:end="77:35">1</literal> <operator pos:start="77:37" pos:end="77:38">&lt;&lt;</operator> <name pos:start="77:40" pos:end="77:43">size</name><operator pos:start="77:44" pos:end="77:44">)</operator><operator pos:start="77:45" pos:end="77:45">)</operator> <operator pos:start="77:47" pos:end="77:48">==</operator> <literal type="number" pos:start="77:50" pos:end="77:50">0</literal></expr>)</condition> <block pos:start="77:53" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:21">

            <return pos:start="79:13" pos:end="79:21">return <expr pos:start="79:20" pos:end="79:20"><literal type="number" pos:start="79:20" pos:end="79:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="83:9" pos:end="87:11">/* All insns of this form UNDEF for either this condition or the

         * superset of cases "Q==1"; we catch the latter later.

         */</comment>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:38">(<expr pos:start="89:13" pos:end="89:37"><name pos:start="89:13" pos:end="89:13">q</name> <operator pos:start="89:15" pos:end="89:16">&amp;&amp;</operator> <operator pos:start="89:18" pos:end="89:18">(</operator><operator pos:start="89:19" pos:end="89:19">(</operator><name pos:start="89:20" pos:end="89:21">rd</name> <operator pos:start="89:23" pos:end="89:23">|</operator> <name pos:start="89:25" pos:end="89:26">rn</name> <operator pos:start="89:28" pos:end="89:28">|</operator> <name pos:start="89:30" pos:end="89:31">rm</name><operator pos:start="89:32" pos:end="89:32">)</operator> <operator pos:start="89:34" pos:end="89:34">&amp;</operator> <literal type="number" pos:start="89:36" pos:end="89:36">1</literal><operator pos:start="89:37" pos:end="89:37">)</operator></expr>)</condition> <block pos:start="89:40" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:21">

            <return pos:start="91:13" pos:end="91:21">return <expr pos:start="91:20" pos:end="91:20"><literal type="number" pos:start="91:20" pos:end="91:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="95:9" pos:end="103:11">/*

         * The SHA-1/SHA-256 3-register instructions require special treatment

         * here, as their size field is overloaded as an op type selector, and

         * they all consume their input in a single pass.

         */</comment>

        <if_stmt pos:start="105:9" pos:end="179:9"><if pos:start="105:9" pos:end="179:9">if <condition pos:start="105:12" pos:end="105:30">(<expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:14">op</name> <operator pos:start="105:16" pos:end="105:17">==</operator> <name pos:start="105:19" pos:end="105:29">NEON_3R_SHA</name></expr>)</condition> <block pos:start="105:32" pos:end="179:9">{<block_content pos:start="107:13" pos:end="177:21">

            <if_stmt pos:start="107:13" pos:end="111:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:19">(<expr pos:start="107:17" pos:end="107:18"><operator pos:start="107:17" pos:end="107:17">!</operator><name pos:start="107:18" pos:end="107:18">q</name></expr>)</condition> <block pos:start="107:21" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:25">

                <return pos:start="109:17" pos:end="109:25">return <expr pos:start="109:24" pos:end="109:24"><literal type="number" pos:start="109:24" pos:end="109:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="113:13" pos:end="169:13"><if pos:start="113:13" pos:end="133:13">if <condition pos:start="113:16" pos:end="113:19">(<expr pos:start="113:17" pos:end="113:18"><operator pos:start="113:17" pos:end="113:17">!</operator><name pos:start="113:18" pos:end="113:18">u</name></expr>)</condition> <block pos:start="113:21" pos:end="133:13">{<block_content pos:start="115:17" pos:end="131:40"> <comment type="block" pos:start="113:23" pos:end="113:33">/* SHA-1 */</comment>

                <if_stmt pos:start="115:17" pos:end="119:17"><if pos:start="115:17" pos:end="119:17">if <condition pos:start="115:20" pos:end="115:60">(<expr pos:start="115:21" pos:end="115:59"><operator pos:start="115:21" pos:end="115:21">!</operator><call pos:start="115:22" pos:end="115:59"><name pos:start="115:22" pos:end="115:35">arm_dc_feature</name><argument_list pos:start="115:36" pos:end="115:59">(<argument pos:start="115:37" pos:end="115:37"><expr pos:start="115:37" pos:end="115:37"><name pos:start="115:37" pos:end="115:37">s</name></expr></argument>, <argument pos:start="115:40" pos:end="115:58"><expr pos:start="115:40" pos:end="115:58"><name pos:start="115:40" pos:end="115:58">ARM_FEATURE_V8_SHA1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:62" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:29">

                    <return pos:start="117:21" pos:end="117:29">return <expr pos:start="117:28" pos:end="117:28"><literal type="number" pos:start="117:28" pos:end="117:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:40"><expr pos:start="121:17" pos:end="121:39"><name pos:start="121:17" pos:end="121:19">tmp</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <call pos:start="121:23" pos:end="121:39"><name pos:start="121:23" pos:end="121:35">tcg_const_i32</name><argument_list pos:start="121:36" pos:end="121:39">(<argument pos:start="121:37" pos:end="121:38"><expr pos:start="121:37" pos:end="121:38"><name pos:start="121:37" pos:end="121:38">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:41"><expr pos:start="123:17" pos:end="123:40"><name pos:start="123:17" pos:end="123:20">tmp2</name> <operator pos:start="123:22" pos:end="123:22">=</operator> <call pos:start="123:24" pos:end="123:40"><name pos:start="123:24" pos:end="123:36">tcg_const_i32</name><argument_list pos:start="123:37" pos:end="123:40">(<argument pos:start="123:38" pos:end="123:39"><expr pos:start="123:38" pos:end="123:39"><name pos:start="123:38" pos:end="123:39">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:41"><expr pos:start="125:17" pos:end="125:40"><name pos:start="125:17" pos:end="125:20">tmp3</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <call pos:start="125:24" pos:end="125:40"><name pos:start="125:24" pos:end="125:36">tcg_const_i32</name><argument_list pos:start="125:37" pos:end="125:40">(<argument pos:start="125:38" pos:end="125:39"><expr pos:start="125:38" pos:end="125:39"><name pos:start="125:38" pos:end="125:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:43"><expr pos:start="127:17" pos:end="127:42"><name pos:start="127:17" pos:end="127:20">tmp4</name> <operator pos:start="127:22" pos:end="127:22">=</operator> <call pos:start="127:24" pos:end="127:42"><name pos:start="127:24" pos:end="127:36">tcg_const_i32</name><argument_list pos:start="127:37" pos:end="127:42">(<argument pos:start="127:38" pos:end="127:41"><expr pos:start="127:38" pos:end="127:41"><name pos:start="127:38" pos:end="127:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:76"><expr pos:start="129:17" pos:end="129:75"><call pos:start="129:17" pos:end="129:75"><name pos:start="129:17" pos:end="129:43">gen_helper_crypto_sha1_3reg</name><argument_list pos:start="129:44" pos:end="129:75">(<argument pos:start="129:45" pos:end="129:51"><expr pos:start="129:45" pos:end="129:51"><name pos:start="129:45" pos:end="129:51">cpu_env</name></expr></argument>, <argument pos:start="129:54" pos:end="129:56"><expr pos:start="129:54" pos:end="129:56"><name pos:start="129:54" pos:end="129:56">tmp</name></expr></argument>, <argument pos:start="129:59" pos:end="129:62"><expr pos:start="129:59" pos:end="129:62"><name pos:start="129:59" pos:end="129:62">tmp2</name></expr></argument>, <argument pos:start="129:65" pos:end="129:68"><expr pos:start="129:65" pos:end="129:68"><name pos:start="129:65" pos:end="129:68">tmp3</name></expr></argument>, <argument pos:start="129:71" pos:end="129:74"><expr pos:start="129:71" pos:end="129:74"><name pos:start="129:71" pos:end="129:74">tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:40"><expr pos:start="131:17" pos:end="131:39"><call pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:33">tcg_temp_free_i32</name><argument_list pos:start="131:34" pos:end="131:39">(<argument pos:start="131:35" pos:end="131:38"><expr pos:start="131:35" pos:end="131:38"><name pos:start="131:35" pos:end="131:38">tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="133:15" pos:end="169:13">else <block pos:start="133:20" pos:end="169:13">{<block_content pos:start="135:17" pos:end="167:17"> <comment type="block" pos:start="133:22" pos:end="133:34">/* SHA-256 */</comment>

                <if_stmt pos:start="135:17" pos:end="139:17"><if pos:start="135:17" pos:end="139:17">if <condition pos:start="135:20" pos:end="135:75">(<expr pos:start="135:21" pos:end="135:74"><operator pos:start="135:21" pos:end="135:21">!</operator><call pos:start="135:22" pos:end="135:61"><name pos:start="135:22" pos:end="135:35">arm_dc_feature</name><argument_list pos:start="135:36" pos:end="135:61">(<argument pos:start="135:37" pos:end="135:37"><expr pos:start="135:37" pos:end="135:37"><name pos:start="135:37" pos:end="135:37">s</name></expr></argument>, <argument pos:start="135:40" pos:end="135:60"><expr pos:start="135:40" pos:end="135:60"><name pos:start="135:40" pos:end="135:60">ARM_FEATURE_V8_SHA256</name></expr></argument>)</argument_list></call> <operator pos:start="135:63" pos:end="135:64">||</operator> <name pos:start="135:66" pos:end="135:69">size</name> <operator pos:start="135:71" pos:end="135:72">==</operator> <literal type="number" pos:start="135:74" pos:end="135:74">3</literal></expr>)</condition> <block pos:start="135:77" pos:end="139:17">{<block_content pos:start="137:21" pos:end="137:29">

                    <return pos:start="137:21" pos:end="137:29">return <expr pos:start="137:28" pos:end="137:28"><literal type="number" pos:start="137:28" pos:end="137:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:40"><expr pos:start="141:17" pos:end="141:39"><name pos:start="141:17" pos:end="141:19">tmp</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <call pos:start="141:23" pos:end="141:39"><name pos:start="141:23" pos:end="141:35">tcg_const_i32</name><argument_list pos:start="141:36" pos:end="141:39">(<argument pos:start="141:37" pos:end="141:38"><expr pos:start="141:37" pos:end="141:38"><name pos:start="141:37" pos:end="141:38">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:41"><expr pos:start="143:17" pos:end="143:40"><name pos:start="143:17" pos:end="143:20">tmp2</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <call pos:start="143:24" pos:end="143:40"><name pos:start="143:24" pos:end="143:36">tcg_const_i32</name><argument_list pos:start="143:37" pos:end="143:40">(<argument pos:start="143:38" pos:end="143:39"><expr pos:start="143:38" pos:end="143:39"><name pos:start="143:38" pos:end="143:39">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:41"><expr pos:start="145:17" pos:end="145:40"><name pos:start="145:17" pos:end="145:20">tmp3</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:40"><name pos:start="145:24" pos:end="145:36">tcg_const_i32</name><argument_list pos:start="145:37" pos:end="145:40">(<argument pos:start="145:38" pos:end="145:39"><expr pos:start="145:38" pos:end="145:39"><name pos:start="145:38" pos:end="145:39">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="147:17" pos:end="167:17">switch <condition pos:start="147:24" pos:end="147:29">(<expr pos:start="147:25" pos:end="147:28"><name pos:start="147:25" pos:end="147:28">size</name></expr>)</condition> <block pos:start="147:31" pos:end="167:17">{<block_content pos:start="149:17" pos:end="165:26">

                <case pos:start="149:17" pos:end="149:23">case <expr pos:start="149:22" pos:end="149:22"><literal type="number" pos:start="149:22" pos:end="149:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="151:21" pos:end="151:72"><expr pos:start="151:21" pos:end="151:71"><call pos:start="151:21" pos:end="151:71"><name pos:start="151:21" pos:end="151:45">gen_helper_crypto_sha256h</name><argument_list pos:start="151:46" pos:end="151:71">(<argument pos:start="151:47" pos:end="151:53"><expr pos:start="151:47" pos:end="151:53"><name pos:start="151:47" pos:end="151:53">cpu_env</name></expr></argument>, <argument pos:start="151:56" pos:end="151:58"><expr pos:start="151:56" pos:end="151:58"><name pos:start="151:56" pos:end="151:58">tmp</name></expr></argument>, <argument pos:start="151:61" pos:end="151:64"><expr pos:start="151:61" pos:end="151:64"><name pos:start="151:61" pos:end="151:64">tmp2</name></expr></argument>, <argument pos:start="151:67" pos:end="151:70"><expr pos:start="151:67" pos:end="151:70"><name pos:start="151:67" pos:end="151:70">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="153:21" pos:end="153:26">break;</break>

                <case pos:start="155:17" pos:end="155:23">case <expr pos:start="155:22" pos:end="155:22"><literal type="number" pos:start="155:22" pos:end="155:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="157:21" pos:end="157:73"><expr pos:start="157:21" pos:end="157:72"><call pos:start="157:21" pos:end="157:72"><name pos:start="157:21" pos:end="157:46">gen_helper_crypto_sha256h2</name><argument_list pos:start="157:47" pos:end="157:72">(<argument pos:start="157:48" pos:end="157:54"><expr pos:start="157:48" pos:end="157:54"><name pos:start="157:48" pos:end="157:54">cpu_env</name></expr></argument>, <argument pos:start="157:57" pos:end="157:59"><expr pos:start="157:57" pos:end="157:59"><name pos:start="157:57" pos:end="157:59">tmp</name></expr></argument>, <argument pos:start="157:62" pos:end="157:65"><expr pos:start="157:62" pos:end="157:65"><name pos:start="157:62" pos:end="157:65">tmp2</name></expr></argument>, <argument pos:start="157:68" pos:end="157:71"><expr pos:start="157:68" pos:end="157:71"><name pos:start="157:68" pos:end="157:71">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="159:21" pos:end="159:26">break;</break>

                <case pos:start="161:17" pos:end="161:23">case <expr pos:start="161:22" pos:end="161:22"><literal type="number" pos:start="161:22" pos:end="161:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="163:21" pos:end="163:74"><expr pos:start="163:21" pos:end="163:73"><call pos:start="163:21" pos:end="163:73"><name pos:start="163:21" pos:end="163:47">gen_helper_crypto_sha256su1</name><argument_list pos:start="163:48" pos:end="163:73">(<argument pos:start="163:49" pos:end="163:55"><expr pos:start="163:49" pos:end="163:55"><name pos:start="163:49" pos:end="163:55">cpu_env</name></expr></argument>, <argument pos:start="163:58" pos:end="163:60"><expr pos:start="163:58" pos:end="163:60"><name pos:start="163:58" pos:end="163:60">tmp</name></expr></argument>, <argument pos:start="163:63" pos:end="163:66"><expr pos:start="163:63" pos:end="163:66"><name pos:start="163:63" pos:end="163:66">tmp2</name></expr></argument>, <argument pos:start="163:69" pos:end="163:72"><expr pos:start="163:69" pos:end="163:72"><name pos:start="163:69" pos:end="163:72">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="165:21" pos:end="165:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:35"><expr pos:start="171:13" pos:end="171:34"><call pos:start="171:13" pos:end="171:34"><name pos:start="171:13" pos:end="171:29">tcg_temp_free_i32</name><argument_list pos:start="171:30" pos:end="171:34">(<argument pos:start="171:31" pos:end="171:33"><expr pos:start="171:31" pos:end="171:33"><name pos:start="171:31" pos:end="171:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:36"><expr pos:start="173:13" pos:end="173:35"><call pos:start="173:13" pos:end="173:35"><name pos:start="173:13" pos:end="173:29">tcg_temp_free_i32</name><argument_list pos:start="173:30" pos:end="173:35">(<argument pos:start="173:31" pos:end="173:34"><expr pos:start="173:31" pos:end="173:34"><name pos:start="173:31" pos:end="173:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:36"><expr pos:start="175:13" pos:end="175:35"><call pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:29">tcg_temp_free_i32</name><argument_list pos:start="175:30" pos:end="175:35">(<argument pos:start="175:31" pos:end="175:34"><expr pos:start="175:31" pos:end="175:34"><name pos:start="175:31" pos:end="175:34">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="177:13" pos:end="177:21">return <expr pos:start="177:20" pos:end="177:20"><literal type="number" pos:start="177:20" pos:end="177:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="181:9" pos:end="319:9"><if pos:start="181:9" pos:end="319:9">if <condition pos:start="181:12" pos:end="181:45">(<expr pos:start="181:13" pos:end="181:44"><name pos:start="181:13" pos:end="181:16">size</name> <operator pos:start="181:18" pos:end="181:19">==</operator> <literal type="number" pos:start="181:21" pos:end="181:21">3</literal> <operator pos:start="181:23" pos:end="181:24">&amp;&amp;</operator> <name pos:start="181:26" pos:end="181:27">op</name> <operator pos:start="181:29" pos:end="181:30">!=</operator> <name pos:start="181:32" pos:end="181:44">NEON_3R_LOGIC</name></expr>)</condition> <block pos:start="181:47" pos:end="319:9">{<block_content pos:start="185:13" pos:end="317:21">

            <comment type="block" pos:start="183:13" pos:end="183:46">/* 64-bit element instructions. */</comment>

            <for pos:start="185:13" pos:end="315:13">for <control pos:start="185:17" pos:end="185:54">(<init pos:start="185:18" pos:end="185:26"><expr pos:start="185:18" pos:end="185:25"><name pos:start="185:18" pos:end="185:21">pass</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <literal type="number" pos:start="185:25" pos:end="185:25">0</literal></expr>;</init> <condition pos:start="185:28" pos:end="185:46"><expr pos:start="185:28" pos:end="185:45"><name pos:start="185:28" pos:end="185:31">pass</name> <operator pos:start="185:33" pos:end="185:33">&lt;</operator> <operator pos:start="185:35" pos:end="185:35">(</operator><ternary pos:start="185:36" pos:end="185:44"><condition pos:start="185:36" pos:end="185:38"><expr pos:start="185:36" pos:end="185:36"><name pos:start="185:36" pos:end="185:36">q</name></expr> ?</condition><then pos:start="185:40" pos:end="185:40"> <expr pos:start="185:40" pos:end="185:40"><literal type="number" pos:start="185:40" pos:end="185:40">2</literal></expr> </then><else pos:start="185:42" pos:end="185:44">: <expr pos:start="185:44" pos:end="185:44"><literal type="number" pos:start="185:44" pos:end="185:44">1</literal></expr></else></ternary><operator pos:start="185:45" pos:end="185:45">)</operator></expr>;</condition> <incr pos:start="185:48" pos:end="185:53"><expr pos:start="185:48" pos:end="185:53"><name pos:start="185:48" pos:end="185:51">pass</name><operator pos:start="185:52" pos:end="185:53">++</operator></expr></incr>)</control> <block pos:start="185:56" pos:end="315:13">{<block_content pos:start="187:17" pos:end="313:52">

                <expr_stmt pos:start="187:17" pos:end="187:51"><expr pos:start="187:17" pos:end="187:50"><call pos:start="187:17" pos:end="187:50"><name pos:start="187:17" pos:end="187:31">neon_load_reg64</name><argument_list pos:start="187:32" pos:end="187:50">(<argument pos:start="187:33" pos:end="187:38"><expr pos:start="187:33" pos:end="187:38"><name pos:start="187:33" pos:end="187:38">cpu_V0</name></expr></argument>, <argument pos:start="187:41" pos:end="187:49"><expr pos:start="187:41" pos:end="187:49"><name pos:start="187:41" pos:end="187:42">rn</name> <operator pos:start="187:44" pos:end="187:44">+</operator> <name pos:start="187:46" pos:end="187:49">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:51"><expr pos:start="189:17" pos:end="189:50"><call pos:start="189:17" pos:end="189:50"><name pos:start="189:17" pos:end="189:31">neon_load_reg64</name><argument_list pos:start="189:32" pos:end="189:50">(<argument pos:start="189:33" pos:end="189:38"><expr pos:start="189:33" pos:end="189:38"><name pos:start="189:33" pos:end="189:38">cpu_V1</name></expr></argument>, <argument pos:start="189:41" pos:end="189:49"><expr pos:start="189:41" pos:end="189:49"><name pos:start="189:41" pos:end="189:42">rm</name> <operator pos:start="189:44" pos:end="189:44">+</operator> <name pos:start="189:46" pos:end="189:49">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="191:17" pos:end="311:17">switch <condition pos:start="191:24" pos:end="191:27">(<expr pos:start="191:25" pos:end="191:26"><name pos:start="191:25" pos:end="191:26">op</name></expr>)</condition> <block pos:start="191:29" pos:end="311:17">{<block_content pos:start="193:17" pos:end="309:28">

                <case pos:start="193:17" pos:end="193:35">case <expr pos:start="193:22" pos:end="193:34"><name pos:start="193:22" pos:end="193:34">NEON_3R_VQADD</name></expr>:</case>

                    <if_stmt pos:start="195:21" pos:end="207:21"><if pos:start="195:21" pos:end="201:21">if <condition pos:start="195:24" pos:end="195:26">(<expr pos:start="195:25" pos:end="195:25"><name pos:start="195:25" pos:end="195:25">u</name></expr>)</condition> <block pos:start="195:28" pos:end="201:21">{<block_content pos:start="197:25" pos:end="199:65">

                        <expr_stmt pos:start="197:25" pos:end="199:65"><expr pos:start="197:25" pos:end="199:64"><call pos:start="197:25" pos:end="199:64"><name pos:start="197:25" pos:end="197:48">gen_helper_neon_qadd_u64</name><argument_list pos:start="197:49" pos:end="199:64">(<argument pos:start="197:50" pos:end="197:55"><expr pos:start="197:50" pos:end="197:55"><name pos:start="197:50" pos:end="197:55">cpu_V0</name></expr></argument>, <argument pos:start="197:58" pos:end="197:64"><expr pos:start="197:58" pos:end="197:64"><name pos:start="197:58" pos:end="197:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="199:50" pos:end="199:55"><expr pos:start="199:50" pos:end="199:55"><name pos:start="199:50" pos:end="199:55">cpu_V0</name></expr></argument>, <argument pos:start="199:58" pos:end="199:63"><expr pos:start="199:58" pos:end="199:63"><name pos:start="199:58" pos:end="199:63">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="201:23" pos:end="207:21">else <block pos:start="201:28" pos:end="207:21">{<block_content pos:start="203:25" pos:end="205:65">

                        <expr_stmt pos:start="203:25" pos:end="205:65"><expr pos:start="203:25" pos:end="205:64"><call pos:start="203:25" pos:end="205:64"><name pos:start="203:25" pos:end="203:48">gen_helper_neon_qadd_s64</name><argument_list pos:start="203:49" pos:end="205:64">(<argument pos:start="203:50" pos:end="203:55"><expr pos:start="203:50" pos:end="203:55"><name pos:start="203:50" pos:end="203:55">cpu_V0</name></expr></argument>, <argument pos:start="203:58" pos:end="203:64"><expr pos:start="203:58" pos:end="203:64"><name pos:start="203:58" pos:end="203:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="205:50" pos:end="205:55"><expr pos:start="205:50" pos:end="205:55"><name pos:start="205:50" pos:end="205:55">cpu_V0</name></expr></argument>, <argument pos:start="205:58" pos:end="205:63"><expr pos:start="205:58" pos:end="205:63"><name pos:start="205:58" pos:end="205:63">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="209:21" pos:end="209:26">break;</break>

                <case pos:start="211:17" pos:end="211:35">case <expr pos:start="211:22" pos:end="211:34"><name pos:start="211:22" pos:end="211:34">NEON_3R_VQSUB</name></expr>:</case>

                    <if_stmt pos:start="213:21" pos:end="225:21"><if pos:start="213:21" pos:end="219:21">if <condition pos:start="213:24" pos:end="213:26">(<expr pos:start="213:25" pos:end="213:25"><name pos:start="213:25" pos:end="213:25">u</name></expr>)</condition> <block pos:start="213:28" pos:end="219:21">{<block_content pos:start="215:25" pos:end="217:65">

                        <expr_stmt pos:start="215:25" pos:end="217:65"><expr pos:start="215:25" pos:end="217:64"><call pos:start="215:25" pos:end="217:64"><name pos:start="215:25" pos:end="215:48">gen_helper_neon_qsub_u64</name><argument_list pos:start="215:49" pos:end="217:64">(<argument pos:start="215:50" pos:end="215:55"><expr pos:start="215:50" pos:end="215:55"><name pos:start="215:50" pos:end="215:55">cpu_V0</name></expr></argument>, <argument pos:start="215:58" pos:end="215:64"><expr pos:start="215:58" pos:end="215:64"><name pos:start="215:58" pos:end="215:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="217:50" pos:end="217:55"><expr pos:start="217:50" pos:end="217:55"><name pos:start="217:50" pos:end="217:55">cpu_V0</name></expr></argument>, <argument pos:start="217:58" pos:end="217:63"><expr pos:start="217:58" pos:end="217:63"><name pos:start="217:58" pos:end="217:63">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="219:23" pos:end="225:21">else <block pos:start="219:28" pos:end="225:21">{<block_content pos:start="221:25" pos:end="223:65">

                        <expr_stmt pos:start="221:25" pos:end="223:65"><expr pos:start="221:25" pos:end="223:64"><call pos:start="221:25" pos:end="223:64"><name pos:start="221:25" pos:end="221:48">gen_helper_neon_qsub_s64</name><argument_list pos:start="221:49" pos:end="223:64">(<argument pos:start="221:50" pos:end="221:55"><expr pos:start="221:50" pos:end="221:55"><name pos:start="221:50" pos:end="221:55">cpu_V0</name></expr></argument>, <argument pos:start="221:58" pos:end="221:64"><expr pos:start="221:58" pos:end="221:64"><name pos:start="221:58" pos:end="221:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="223:50" pos:end="223:55"><expr pos:start="223:50" pos:end="223:55"><name pos:start="223:50" pos:end="223:55">cpu_V0</name></expr></argument>, <argument pos:start="223:58" pos:end="223:63"><expr pos:start="223:58" pos:end="223:63"><name pos:start="223:58" pos:end="223:63">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="227:21" pos:end="227:26">break;</break>

                <case pos:start="229:17" pos:end="229:34">case <expr pos:start="229:22" pos:end="229:33"><name pos:start="229:22" pos:end="229:33">NEON_3R_VSHL</name></expr>:</case>

                    <if_stmt pos:start="231:21" pos:end="239:21"><if pos:start="231:21" pos:end="235:21">if <condition pos:start="231:24" pos:end="231:26">(<expr pos:start="231:25" pos:end="231:25"><name pos:start="231:25" pos:end="231:25">u</name></expr>)</condition> <block pos:start="231:28" pos:end="235:21">{<block_content pos:start="233:25" pos:end="233:72">

                        <expr_stmt pos:start="233:25" pos:end="233:72"><expr pos:start="233:25" pos:end="233:71"><call pos:start="233:25" pos:end="233:71"><name pos:start="233:25" pos:end="233:47">gen_helper_neon_shl_u64</name><argument_list pos:start="233:48" pos:end="233:71">(<argument pos:start="233:49" pos:end="233:54"><expr pos:start="233:49" pos:end="233:54"><name pos:start="233:49" pos:end="233:54">cpu_V0</name></expr></argument>, <argument pos:start="233:57" pos:end="233:62"><expr pos:start="233:57" pos:end="233:62"><name pos:start="233:57" pos:end="233:62">cpu_V1</name></expr></argument>, <argument pos:start="233:65" pos:end="233:70"><expr pos:start="233:65" pos:end="233:70"><name pos:start="233:65" pos:end="233:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="235:23" pos:end="239:21">else <block pos:start="235:28" pos:end="239:21">{<block_content pos:start="237:25" pos:end="237:72">

                        <expr_stmt pos:start="237:25" pos:end="237:72"><expr pos:start="237:25" pos:end="237:71"><call pos:start="237:25" pos:end="237:71"><name pos:start="237:25" pos:end="237:47">gen_helper_neon_shl_s64</name><argument_list pos:start="237:48" pos:end="237:71">(<argument pos:start="237:49" pos:end="237:54"><expr pos:start="237:49" pos:end="237:54"><name pos:start="237:49" pos:end="237:54">cpu_V0</name></expr></argument>, <argument pos:start="237:57" pos:end="237:62"><expr pos:start="237:57" pos:end="237:62"><name pos:start="237:57" pos:end="237:62">cpu_V1</name></expr></argument>, <argument pos:start="237:65" pos:end="237:70"><expr pos:start="237:65" pos:end="237:70"><name pos:start="237:65" pos:end="237:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="241:21" pos:end="241:26">break;</break>

                <case pos:start="243:17" pos:end="243:35">case <expr pos:start="243:22" pos:end="243:34"><name pos:start="243:22" pos:end="243:34">NEON_3R_VQSHL</name></expr>:</case>

                    <if_stmt pos:start="245:21" pos:end="257:21"><if pos:start="245:21" pos:end="251:21">if <condition pos:start="245:24" pos:end="245:26">(<expr pos:start="245:25" pos:end="245:25"><name pos:start="245:25" pos:end="245:25">u</name></expr>)</condition> <block pos:start="245:28" pos:end="251:21">{<block_content pos:start="247:25" pos:end="249:65">

                        <expr_stmt pos:start="247:25" pos:end="249:65"><expr pos:start="247:25" pos:end="249:64"><call pos:start="247:25" pos:end="249:64"><name pos:start="247:25" pos:end="247:48">gen_helper_neon_qshl_u64</name><argument_list pos:start="247:49" pos:end="249:64">(<argument pos:start="247:50" pos:end="247:55"><expr pos:start="247:50" pos:end="247:55"><name pos:start="247:50" pos:end="247:55">cpu_V0</name></expr></argument>, <argument pos:start="247:58" pos:end="247:64"><expr pos:start="247:58" pos:end="247:64"><name pos:start="247:58" pos:end="247:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="249:50" pos:end="249:55"><expr pos:start="249:50" pos:end="249:55"><name pos:start="249:50" pos:end="249:55">cpu_V1</name></expr></argument>, <argument pos:start="249:58" pos:end="249:63"><expr pos:start="249:58" pos:end="249:63"><name pos:start="249:58" pos:end="249:63">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="251:23" pos:end="257:21">else <block pos:start="251:28" pos:end="257:21">{<block_content pos:start="253:25" pos:end="255:65">

                        <expr_stmt pos:start="253:25" pos:end="255:65"><expr pos:start="253:25" pos:end="255:64"><call pos:start="253:25" pos:end="255:64"><name pos:start="253:25" pos:end="253:48">gen_helper_neon_qshl_s64</name><argument_list pos:start="253:49" pos:end="255:64">(<argument pos:start="253:50" pos:end="253:55"><expr pos:start="253:50" pos:end="253:55"><name pos:start="253:50" pos:end="253:55">cpu_V0</name></expr></argument>, <argument pos:start="253:58" pos:end="253:64"><expr pos:start="253:58" pos:end="253:64"><name pos:start="253:58" pos:end="253:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="255:50" pos:end="255:55"><expr pos:start="255:50" pos:end="255:55"><name pos:start="255:50" pos:end="255:55">cpu_V1</name></expr></argument>, <argument pos:start="255:58" pos:end="255:63"><expr pos:start="255:58" pos:end="255:63"><name pos:start="255:58" pos:end="255:63">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="259:21" pos:end="259:26">break;</break>

                <case pos:start="261:17" pos:end="261:35">case <expr pos:start="261:22" pos:end="261:34"><name pos:start="261:22" pos:end="261:34">NEON_3R_VRSHL</name></expr>:</case>

                    <if_stmt pos:start="263:21" pos:end="271:21"><if pos:start="263:21" pos:end="267:21">if <condition pos:start="263:24" pos:end="263:26">(<expr pos:start="263:25" pos:end="263:25"><name pos:start="263:25" pos:end="263:25">u</name></expr>)</condition> <block pos:start="263:28" pos:end="267:21">{<block_content pos:start="265:25" pos:end="265:73">

                        <expr_stmt pos:start="265:25" pos:end="265:73"><expr pos:start="265:25" pos:end="265:72"><call pos:start="265:25" pos:end="265:72"><name pos:start="265:25" pos:end="265:48">gen_helper_neon_rshl_u64</name><argument_list pos:start="265:49" pos:end="265:72">(<argument pos:start="265:50" pos:end="265:55"><expr pos:start="265:50" pos:end="265:55"><name pos:start="265:50" pos:end="265:55">cpu_V0</name></expr></argument>, <argument pos:start="265:58" pos:end="265:63"><expr pos:start="265:58" pos:end="265:63"><name pos:start="265:58" pos:end="265:63">cpu_V1</name></expr></argument>, <argument pos:start="265:66" pos:end="265:71"><expr pos:start="265:66" pos:end="265:71"><name pos:start="265:66" pos:end="265:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="267:23" pos:end="271:21">else <block pos:start="267:28" pos:end="271:21">{<block_content pos:start="269:25" pos:end="269:73">

                        <expr_stmt pos:start="269:25" pos:end="269:73"><expr pos:start="269:25" pos:end="269:72"><call pos:start="269:25" pos:end="269:72"><name pos:start="269:25" pos:end="269:48">gen_helper_neon_rshl_s64</name><argument_list pos:start="269:49" pos:end="269:72">(<argument pos:start="269:50" pos:end="269:55"><expr pos:start="269:50" pos:end="269:55"><name pos:start="269:50" pos:end="269:55">cpu_V0</name></expr></argument>, <argument pos:start="269:58" pos:end="269:63"><expr pos:start="269:58" pos:end="269:63"><name pos:start="269:58" pos:end="269:63">cpu_V1</name></expr></argument>, <argument pos:start="269:66" pos:end="269:71"><expr pos:start="269:66" pos:end="269:71"><name pos:start="269:66" pos:end="269:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="273:21" pos:end="273:26">break;</break>

                <case pos:start="275:17" pos:end="275:36">case <expr pos:start="275:22" pos:end="275:35"><name pos:start="275:22" pos:end="275:35">NEON_3R_VQRSHL</name></expr>:</case>

                    <if_stmt pos:start="277:21" pos:end="289:21"><if pos:start="277:21" pos:end="283:21">if <condition pos:start="277:24" pos:end="277:26">(<expr pos:start="277:25" pos:end="277:25"><name pos:start="277:25" pos:end="277:25">u</name></expr>)</condition> <block pos:start="277:28" pos:end="283:21">{<block_content pos:start="279:25" pos:end="281:66">

                        <expr_stmt pos:start="279:25" pos:end="281:66"><expr pos:start="279:25" pos:end="281:65"><call pos:start="279:25" pos:end="281:65"><name pos:start="279:25" pos:end="279:49">gen_helper_neon_qrshl_u64</name><argument_list pos:start="279:50" pos:end="281:65">(<argument pos:start="279:51" pos:end="279:56"><expr pos:start="279:51" pos:end="279:56"><name pos:start="279:51" pos:end="279:56">cpu_V0</name></expr></argument>, <argument pos:start="279:59" pos:end="279:65"><expr pos:start="279:59" pos:end="279:65"><name pos:start="279:59" pos:end="279:65">cpu_env</name></expr></argument>,

                                                  <argument pos:start="281:51" pos:end="281:56"><expr pos:start="281:51" pos:end="281:56"><name pos:start="281:51" pos:end="281:56">cpu_V1</name></expr></argument>, <argument pos:start="281:59" pos:end="281:64"><expr pos:start="281:59" pos:end="281:64"><name pos:start="281:59" pos:end="281:64">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="283:23" pos:end="289:21">else <block pos:start="283:28" pos:end="289:21">{<block_content pos:start="285:25" pos:end="287:66">

                        <expr_stmt pos:start="285:25" pos:end="287:66"><expr pos:start="285:25" pos:end="287:65"><call pos:start="285:25" pos:end="287:65"><name pos:start="285:25" pos:end="285:49">gen_helper_neon_qrshl_s64</name><argument_list pos:start="285:50" pos:end="287:65">(<argument pos:start="285:51" pos:end="285:56"><expr pos:start="285:51" pos:end="285:56"><name pos:start="285:51" pos:end="285:56">cpu_V0</name></expr></argument>, <argument pos:start="285:59" pos:end="285:65"><expr pos:start="285:59" pos:end="285:65"><name pos:start="285:59" pos:end="285:65">cpu_env</name></expr></argument>,

                                                  <argument pos:start="287:51" pos:end="287:56"><expr pos:start="287:51" pos:end="287:56"><name pos:start="287:51" pos:end="287:56">cpu_V1</name></expr></argument>, <argument pos:start="287:59" pos:end="287:64"><expr pos:start="287:59" pos:end="287:64"><name pos:start="287:59" pos:end="287:64">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="291:21" pos:end="291:26">break;</break>

                <case pos:start="293:17" pos:end="293:39">case <expr pos:start="293:22" pos:end="293:38"><name pos:start="293:22" pos:end="293:38">NEON_3R_VADD_VSUB</name></expr>:</case>

                    <if_stmt pos:start="295:21" pos:end="303:21"><if pos:start="295:21" pos:end="299:21">if <condition pos:start="295:24" pos:end="295:26">(<expr pos:start="295:25" pos:end="295:25"><name pos:start="295:25" pos:end="295:25">u</name></expr>)</condition> <block pos:start="295:28" pos:end="299:21">{<block_content pos:start="297:25" pos:end="297:50">

                        <expr_stmt pos:start="297:25" pos:end="297:50"><expr pos:start="297:25" pos:end="297:49"><call pos:start="297:25" pos:end="297:49"><name pos:start="297:25" pos:end="297:39">tcg_gen_sub_i64</name><argument_list pos:start="297:40" pos:end="297:49">(<argument pos:start="297:41" pos:end="297:48"><expr pos:start="297:41" pos:end="297:48"><name pos:start="297:41" pos:end="297:48">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="299:23" pos:end="303:21">else <block pos:start="299:28" pos:end="303:21">{<block_content pos:start="301:25" pos:end="301:50">

                        <expr_stmt pos:start="301:25" pos:end="301:50"><expr pos:start="301:25" pos:end="301:49"><call pos:start="301:25" pos:end="301:49"><name pos:start="301:25" pos:end="301:39">tcg_gen_add_i64</name><argument_list pos:start="301:40" pos:end="301:49">(<argument pos:start="301:41" pos:end="301:48"><expr pos:start="301:41" pos:end="301:48"><name pos:start="301:41" pos:end="301:48">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="305:21" pos:end="305:26">break;</break>

                <default pos:start="307:17" pos:end="307:24">default:</default>

                    <expr_stmt pos:start="309:21" pos:end="309:28"><expr pos:start="309:21" pos:end="309:27"><call pos:start="309:21" pos:end="309:27"><name pos:start="309:21" pos:end="309:25">abort</name><argument_list pos:start="309:26" pos:end="309:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

                <expr_stmt pos:start="313:17" pos:end="313:52"><expr pos:start="313:17" pos:end="313:51"><call pos:start="313:17" pos:end="313:51"><name pos:start="313:17" pos:end="313:32">neon_store_reg64</name><argument_list pos:start="313:33" pos:end="313:51">(<argument pos:start="313:34" pos:end="313:39"><expr pos:start="313:34" pos:end="313:39"><name pos:start="313:34" pos:end="313:39">cpu_V0</name></expr></argument>, <argument pos:start="313:42" pos:end="313:50"><expr pos:start="313:42" pos:end="313:50"><name pos:start="313:42" pos:end="313:43">rd</name> <operator pos:start="313:45" pos:end="313:45">+</operator> <name pos:start="313:47" pos:end="313:50">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <return pos:start="317:13" pos:end="317:21">return <expr pos:start="317:20" pos:end="317:20"><literal type="number" pos:start="317:20" pos:end="317:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:21"><expr pos:start="321:9" pos:end="321:20"><name pos:start="321:9" pos:end="321:16">pairwise</name> <operator pos:start="321:18" pos:end="321:18">=</operator> <literal type="number" pos:start="321:20" pos:end="321:20">0</literal></expr>;</expr_stmt>

        <switch pos:start="323:9" pos:end="439:9">switch <condition pos:start="323:16" pos:end="323:19">(<expr pos:start="323:17" pos:end="323:18"><name pos:start="323:17" pos:end="323:18">op</name></expr>)</condition> <block pos:start="323:21" pos:end="439:9">{<block_content pos:start="325:9" pos:end="437:18">

        <case pos:start="325:9" pos:end="325:26">case <expr pos:start="325:14" pos:end="325:25"><name pos:start="325:14" pos:end="325:25">NEON_3R_VSHL</name></expr>:</case>

        <case pos:start="327:9" pos:end="327:27">case <expr pos:start="327:14" pos:end="327:26"><name pos:start="327:14" pos:end="327:26">NEON_3R_VQSHL</name></expr>:</case>

        <case pos:start="329:9" pos:end="329:27">case <expr pos:start="329:14" pos:end="329:26"><name pos:start="329:14" pos:end="329:26">NEON_3R_VRSHL</name></expr>:</case>

        <case pos:start="331:9" pos:end="331:28">case <expr pos:start="331:14" pos:end="331:27"><name pos:start="331:14" pos:end="331:27">NEON_3R_VQRSHL</name></expr>:</case>

            <block pos:start="333:13" pos:end="345:13">{<block_content pos:start="335:17" pos:end="343:26">

                <decl_stmt pos:start="335:17" pos:end="335:25"><decl pos:start="335:17" pos:end="335:24"><type pos:start="335:17" pos:end="335:19"><name pos:start="335:17" pos:end="335:19">int</name></type> <name pos:start="335:21" pos:end="335:24">rtmp</name></decl>;</decl_stmt>

                <comment type="block" pos:start="337:17" pos:end="337:63">/* Shift instruction operands are reversed.  */</comment>

                <expr_stmt pos:start="339:17" pos:end="339:26"><expr pos:start="339:17" pos:end="339:25"><name pos:start="339:17" pos:end="339:20">rtmp</name> <operator pos:start="339:22" pos:end="339:22">=</operator> <name pos:start="339:24" pos:end="339:25">rn</name></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:24"><expr pos:start="341:17" pos:end="341:23"><name pos:start="341:17" pos:end="341:18">rn</name> <operator pos:start="341:20" pos:end="341:20">=</operator> <name pos:start="341:22" pos:end="341:23">rm</name></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:26"><expr pos:start="343:17" pos:end="343:25"><name pos:start="343:17" pos:end="343:18">rm</name> <operator pos:start="343:20" pos:end="343:20">=</operator> <name pos:start="343:22" pos:end="343:25">rtmp</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="347:13" pos:end="347:18">break;</break>

        <case pos:start="349:9" pos:end="349:27">case <expr pos:start="349:14" pos:end="349:26"><name pos:start="349:14" pos:end="349:26">NEON_3R_VPADD</name></expr>:</case>

            <if_stmt pos:start="351:13" pos:end="355:13"><if pos:start="351:13" pos:end="355:13">if <condition pos:start="351:16" pos:end="351:18">(<expr pos:start="351:17" pos:end="351:17"><name pos:start="351:17" pos:end="351:17">u</name></expr>)</condition> <block pos:start="351:20" pos:end="355:13">{<block_content pos:start="353:17" pos:end="353:25">

                <return pos:start="353:17" pos:end="353:25">return <expr pos:start="353:24" pos:end="353:24"><literal type="number" pos:start="353:24" pos:end="353:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="357:13" pos:end="357:30">/* Fall through */</comment>

        <case pos:start="359:9" pos:end="359:27">case <expr pos:start="359:14" pos:end="359:26"><name pos:start="359:14" pos:end="359:26">NEON_3R_VPMAX</name></expr>:</case>

        <case pos:start="361:9" pos:end="361:27">case <expr pos:start="361:14" pos:end="361:26"><name pos:start="361:14" pos:end="361:26">NEON_3R_VPMIN</name></expr>:</case>

            <expr_stmt pos:start="363:13" pos:end="363:25"><expr pos:start="363:13" pos:end="363:24"><name pos:start="363:13" pos:end="363:20">pairwise</name> <operator pos:start="363:22" pos:end="363:22">=</operator> <literal type="number" pos:start="363:24" pos:end="363:24">1</literal></expr>;</expr_stmt>

            <break pos:start="365:13" pos:end="365:18">break;</break>

        <case pos:start="367:9" pos:end="367:33">case <expr pos:start="367:14" pos:end="367:32"><name pos:start="367:14" pos:end="367:32">NEON_3R_FLOAT_ARITH</name></expr>:</case>

            <expr_stmt pos:start="369:13" pos:end="369:39"><expr pos:start="369:13" pos:end="369:38"><name pos:start="369:13" pos:end="369:20">pairwise</name> <operator pos:start="369:22" pos:end="369:22">=</operator> <operator pos:start="369:24" pos:end="369:24">(</operator><name pos:start="369:25" pos:end="369:25">u</name> <operator pos:start="369:27" pos:end="369:28">&amp;&amp;</operator> <name pos:start="369:30" pos:end="369:33">size</name> <operator pos:start="369:35" pos:end="369:35">&lt;</operator> <literal type="number" pos:start="369:37" pos:end="369:37">2</literal><operator pos:start="369:38" pos:end="369:38">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="369:41" pos:end="369:62">/* if VPADD (float) */</comment>

            <break pos:start="371:13" pos:end="371:18">break;</break>

        <case pos:start="373:9" pos:end="373:34">case <expr pos:start="373:14" pos:end="373:33"><name pos:start="373:14" pos:end="373:33">NEON_3R_FLOAT_MINMAX</name></expr>:</case>

            <expr_stmt pos:start="375:13" pos:end="375:25"><expr pos:start="375:13" pos:end="375:24"><name pos:start="375:13" pos:end="375:20">pairwise</name> <operator pos:start="375:22" pos:end="375:22">=</operator> <name pos:start="375:24" pos:end="375:24">u</name></expr>;</expr_stmt> <comment type="block" pos:start="375:27" pos:end="375:54">/* if VPMIN/VPMAX (float) */</comment>

            <break pos:start="377:13" pos:end="377:18">break;</break>

        <case pos:start="379:9" pos:end="379:31">case <expr pos:start="379:14" pos:end="379:30"><name pos:start="379:14" pos:end="379:30">NEON_3R_FLOAT_CMP</name></expr>:</case>

            <if_stmt pos:start="381:13" pos:end="387:13"><if pos:start="381:13" pos:end="387:13">if <condition pos:start="381:16" pos:end="381:27">(<expr pos:start="381:17" pos:end="381:26"><operator pos:start="381:17" pos:end="381:17">!</operator><name pos:start="381:18" pos:end="381:18">u</name> <operator pos:start="381:20" pos:end="381:21">&amp;&amp;</operator> <name pos:start="381:23" pos:end="381:26">size</name></expr>)</condition> <block pos:start="381:29" pos:end="387:13">{<block_content pos:start="385:17" pos:end="385:25">

                <comment type="block" pos:start="383:17" pos:end="383:46">/* no encoding for U=0 C=1x */</comment>

                <return pos:start="385:17" pos:end="385:25">return <expr pos:start="385:24" pos:end="385:24"><literal type="number" pos:start="385:24" pos:end="385:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="389:13" pos:end="389:18">break;</break>

        <case pos:start="391:9" pos:end="391:32">case <expr pos:start="391:14" pos:end="391:31"><name pos:start="391:14" pos:end="391:31">NEON_3R_FLOAT_ACMP</name></expr>:</case>

            <if_stmt pos:start="393:13" pos:end="397:13"><if pos:start="393:13" pos:end="397:13">if <condition pos:start="393:16" pos:end="393:19">(<expr pos:start="393:17" pos:end="393:18"><operator pos:start="393:17" pos:end="393:17">!</operator><name pos:start="393:18" pos:end="393:18">u</name></expr>)</condition> <block pos:start="393:21" pos:end="397:13">{<block_content pos:start="395:17" pos:end="395:25">

                <return pos:start="395:17" pos:end="395:25">return <expr pos:start="395:24" pos:end="395:24"><literal type="number" pos:start="395:24" pos:end="395:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="399:13" pos:end="399:18">break;</break>

        <case pos:start="401:9" pos:end="401:32">case <expr pos:start="401:14" pos:end="401:31"><name pos:start="401:14" pos:end="401:31">NEON_3R_FLOAT_MISC</name></expr>:</case>

            <comment type="block" pos:start="403:13" pos:end="403:40">/* VMAXNM/VMINNM in ARMv8 */</comment>

            <if_stmt pos:start="405:13" pos:end="409:13"><if pos:start="405:13" pos:end="409:13">if <condition pos:start="405:16" pos:end="405:56">(<expr pos:start="405:17" pos:end="405:55"><name pos:start="405:17" pos:end="405:17">u</name> <operator pos:start="405:19" pos:end="405:20">&amp;&amp;</operator> <operator pos:start="405:22" pos:end="405:22">!</operator><call pos:start="405:23" pos:end="405:55"><name pos:start="405:23" pos:end="405:36">arm_dc_feature</name><argument_list pos:start="405:37" pos:end="405:55">(<argument pos:start="405:38" pos:end="405:38"><expr pos:start="405:38" pos:end="405:38"><name pos:start="405:38" pos:end="405:38">s</name></expr></argument>, <argument pos:start="405:41" pos:end="405:54"><expr pos:start="405:41" pos:end="405:54"><name pos:start="405:41" pos:end="405:54">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="405:58" pos:end="409:13">{<block_content pos:start="407:17" pos:end="407:25">

                <return pos:start="407:17" pos:end="407:25">return <expr pos:start="407:24" pos:end="407:24"><literal type="number" pos:start="407:24" pos:end="407:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="411:13" pos:end="411:18">break;</break>

        <case pos:start="413:9" pos:end="413:26">case <expr pos:start="413:14" pos:end="413:25"><name pos:start="413:14" pos:end="413:25">NEON_3R_VMUL</name></expr>:</case>

            <if_stmt pos:start="415:13" pos:end="421:13"><if pos:start="415:13" pos:end="421:13">if <condition pos:start="415:16" pos:end="415:33">(<expr pos:start="415:17" pos:end="415:32"><name pos:start="415:17" pos:end="415:17">u</name> <operator pos:start="415:19" pos:end="415:20">&amp;&amp;</operator> <operator pos:start="415:22" pos:end="415:22">(</operator><name pos:start="415:23" pos:end="415:26">size</name> <operator pos:start="415:28" pos:end="415:29">!=</operator> <literal type="number" pos:start="415:31" pos:end="415:31">0</literal><operator pos:start="415:32" pos:end="415:32">)</operator></expr>)</condition> <block pos:start="415:35" pos:end="421:13">{<block_content pos:start="419:17" pos:end="419:25">

                <comment type="block" pos:start="417:17" pos:end="417:66">/* UNDEF on invalid size for polynomial subcase */</comment>

                <return pos:start="419:17" pos:end="419:25">return <expr pos:start="419:24" pos:end="419:24"><literal type="number" pos:start="419:24" pos:end="419:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="423:13" pos:end="423:18">break;</break>

        <case pos:start="425:9" pos:end="425:25">case <expr pos:start="425:14" pos:end="425:24"><name pos:start="425:14" pos:end="425:24">NEON_3R_VFM</name></expr>:</case>

            <if_stmt pos:start="427:13" pos:end="431:13"><if pos:start="427:13" pos:end="431:13">if <condition pos:start="427:16" pos:end="427:58">(<expr pos:start="427:17" pos:end="427:57"><operator pos:start="427:17" pos:end="427:17">!</operator><call pos:start="427:18" pos:end="427:52"><name pos:start="427:18" pos:end="427:31">arm_dc_feature</name><argument_list pos:start="427:32" pos:end="427:52">(<argument pos:start="427:33" pos:end="427:33"><expr pos:start="427:33" pos:end="427:33"><name pos:start="427:33" pos:end="427:33">s</name></expr></argument>, <argument pos:start="427:36" pos:end="427:51"><expr pos:start="427:36" pos:end="427:51"><name pos:start="427:36" pos:end="427:51">ARM_FEATURE_VFP4</name></expr></argument>)</argument_list></call> <operator pos:start="427:54" pos:end="427:55">||</operator> <name pos:start="427:57" pos:end="427:57">u</name></expr>)</condition> <block pos:start="427:60" pos:end="431:13">{<block_content pos:start="429:17" pos:end="429:25">

                <return pos:start="429:17" pos:end="429:25">return <expr pos:start="429:24" pos:end="429:24"><literal type="number" pos:start="429:24" pos:end="429:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="433:13" pos:end="433:18">break;</break>

        <default pos:start="435:9" pos:end="435:16">default:</default>

            <break pos:start="437:13" pos:end="437:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="443:9" pos:end="449:9"><if pos:start="443:9" pos:end="449:9">if <condition pos:start="443:12" pos:end="443:26">(<expr pos:start="443:13" pos:end="443:25"><name pos:start="443:13" pos:end="443:20">pairwise</name> <operator pos:start="443:22" pos:end="443:23">&amp;&amp;</operator> <name pos:start="443:25" pos:end="443:25">q</name></expr>)</condition> <block pos:start="443:28" pos:end="449:9">{<block_content pos:start="447:13" pos:end="447:21">

            <comment type="block" pos:start="445:13" pos:end="445:58">/* All the pairwise insns UNDEF if Q is set */</comment>

            <return pos:start="447:13" pos:end="447:21">return <expr pos:start="447:20" pos:end="447:20"><literal type="number" pos:start="447:20" pos:end="447:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="453:9" pos:end="1075:9">for <control pos:start="453:13" pos:end="453:50">(<init pos:start="453:14" pos:end="453:22"><expr pos:start="453:14" pos:end="453:21"><name pos:start="453:14" pos:end="453:17">pass</name> <operator pos:start="453:19" pos:end="453:19">=</operator> <literal type="number" pos:start="453:21" pos:end="453:21">0</literal></expr>;</init> <condition pos:start="453:24" pos:end="453:42"><expr pos:start="453:24" pos:end="453:41"><name pos:start="453:24" pos:end="453:27">pass</name> <operator pos:start="453:29" pos:end="453:29">&lt;</operator> <operator pos:start="453:31" pos:end="453:31">(</operator><ternary pos:start="453:32" pos:end="453:40"><condition pos:start="453:32" pos:end="453:34"><expr pos:start="453:32" pos:end="453:32"><name pos:start="453:32" pos:end="453:32">q</name></expr> ?</condition><then pos:start="453:36" pos:end="453:36"> <expr pos:start="453:36" pos:end="453:36"><literal type="number" pos:start="453:36" pos:end="453:36">4</literal></expr> </then><else pos:start="453:38" pos:end="453:40">: <expr pos:start="453:40" pos:end="453:40"><literal type="number" pos:start="453:40" pos:end="453:40">2</literal></expr></else></ternary><operator pos:start="453:41" pos:end="453:41">)</operator></expr>;</condition> <incr pos:start="453:44" pos:end="453:49"><expr pos:start="453:44" pos:end="453:49"><name pos:start="453:44" pos:end="453:47">pass</name><operator pos:start="453:48" pos:end="453:49">++</operator></expr></incr>)</control> <block pos:start="453:52" pos:end="1075:9">{<block_content pos:start="457:9" pos:end="1071:9">



        <if_stmt pos:start="457:9" pos:end="483:9"><if pos:start="457:9" pos:end="475:9">if <condition pos:start="457:12" pos:end="457:21">(<expr pos:start="457:13" pos:end="457:20"><name pos:start="457:13" pos:end="457:20">pairwise</name></expr>)</condition> <block pos:start="457:23" pos:end="475:9">{<block_content pos:start="461:13" pos:end="473:13">

            <comment type="block" pos:start="459:13" pos:end="459:28">/* Pairwise.  */</comment>

            <if_stmt pos:start="461:13" pos:end="473:13"><if pos:start="461:13" pos:end="467:13">if <condition pos:start="461:16" pos:end="461:25">(<expr pos:start="461:17" pos:end="461:24"><name pos:start="461:17" pos:end="461:20">pass</name> <operator pos:start="461:22" pos:end="461:22">&lt;</operator> <literal type="number" pos:start="461:24" pos:end="461:24">1</literal></expr>)</condition> <block pos:start="461:27" pos:end="467:13">{<block_content pos:start="463:17" pos:end="465:44">

                <expr_stmt pos:start="463:17" pos:end="463:43"><expr pos:start="463:17" pos:end="463:42"><name pos:start="463:17" pos:end="463:19">tmp</name> <operator pos:start="463:21" pos:end="463:21">=</operator> <call pos:start="463:23" pos:end="463:42"><name pos:start="463:23" pos:end="463:35">neon_load_reg</name><argument_list pos:start="463:36" pos:end="463:42">(<argument pos:start="463:37" pos:end="463:38"><expr pos:start="463:37" pos:end="463:38"><name pos:start="463:37" pos:end="463:38">rn</name></expr></argument>, <argument pos:start="463:41" pos:end="463:41"><expr pos:start="463:41" pos:end="463:41"><literal type="number" pos:start="463:41" pos:end="463:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="465:17" pos:end="465:44"><expr pos:start="465:17" pos:end="465:43"><name pos:start="465:17" pos:end="465:20">tmp2</name> <operator pos:start="465:22" pos:end="465:22">=</operator> <call pos:start="465:24" pos:end="465:43"><name pos:start="465:24" pos:end="465:36">neon_load_reg</name><argument_list pos:start="465:37" pos:end="465:43">(<argument pos:start="465:38" pos:end="465:39"><expr pos:start="465:38" pos:end="465:39"><name pos:start="465:38" pos:end="465:39">rn</name></expr></argument>, <argument pos:start="465:42" pos:end="465:42"><expr pos:start="465:42" pos:end="465:42"><literal type="number" pos:start="465:42" pos:end="465:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="467:15" pos:end="473:13">else <block pos:start="467:20" pos:end="473:13">{<block_content pos:start="469:17" pos:end="471:44">

                <expr_stmt pos:start="469:17" pos:end="469:43"><expr pos:start="469:17" pos:end="469:42"><name pos:start="469:17" pos:end="469:19">tmp</name> <operator pos:start="469:21" pos:end="469:21">=</operator> <call pos:start="469:23" pos:end="469:42"><name pos:start="469:23" pos:end="469:35">neon_load_reg</name><argument_list pos:start="469:36" pos:end="469:42">(<argument pos:start="469:37" pos:end="469:38"><expr pos:start="469:37" pos:end="469:38"><name pos:start="469:37" pos:end="469:38">rm</name></expr></argument>, <argument pos:start="469:41" pos:end="469:41"><expr pos:start="469:41" pos:end="469:41"><literal type="number" pos:start="469:41" pos:end="469:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:44"><expr pos:start="471:17" pos:end="471:43"><name pos:start="471:17" pos:end="471:20">tmp2</name> <operator pos:start="471:22" pos:end="471:22">=</operator> <call pos:start="471:24" pos:end="471:43"><name pos:start="471:24" pos:end="471:36">neon_load_reg</name><argument_list pos:start="471:37" pos:end="471:43">(<argument pos:start="471:38" pos:end="471:39"><expr pos:start="471:38" pos:end="471:39"><name pos:start="471:38" pos:end="471:39">rm</name></expr></argument>, <argument pos:start="471:42" pos:end="471:42"><expr pos:start="471:42" pos:end="471:42"><literal type="number" pos:start="471:42" pos:end="471:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="475:11" pos:end="483:9">else <block pos:start="475:16" pos:end="483:9">{<block_content pos:start="479:13" pos:end="481:43">

            <comment type="block" pos:start="477:13" pos:end="477:31">/* Elementwise.  */</comment>

            <expr_stmt pos:start="479:13" pos:end="479:42"><expr pos:start="479:13" pos:end="479:41"><name pos:start="479:13" pos:end="479:15">tmp</name> <operator pos:start="479:17" pos:end="479:17">=</operator> <call pos:start="479:19" pos:end="479:41"><name pos:start="479:19" pos:end="479:31">neon_load_reg</name><argument_list pos:start="479:32" pos:end="479:41">(<argument pos:start="479:33" pos:end="479:34"><expr pos:start="479:33" pos:end="479:34"><name pos:start="479:33" pos:end="479:34">rn</name></expr></argument>, <argument pos:start="479:37" pos:end="479:40"><expr pos:start="479:37" pos:end="479:40"><name pos:start="479:37" pos:end="479:40">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:43"><expr pos:start="481:13" pos:end="481:42"><name pos:start="481:13" pos:end="481:16">tmp2</name> <operator pos:start="481:18" pos:end="481:18">=</operator> <call pos:start="481:20" pos:end="481:42"><name pos:start="481:20" pos:end="481:32">neon_load_reg</name><argument_list pos:start="481:33" pos:end="481:42">(<argument pos:start="481:34" pos:end="481:35"><expr pos:start="481:34" pos:end="481:35"><name pos:start="481:34" pos:end="481:35">rm</name></expr></argument>, <argument pos:start="481:38" pos:end="481:41"><expr pos:start="481:38" pos:end="481:41"><name pos:start="481:38" pos:end="481:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="485:9" pos:end="1051:9">switch <condition pos:start="485:16" pos:end="485:19">(<expr pos:start="485:17" pos:end="485:18"><name pos:start="485:17" pos:end="485:18">op</name></expr>)</condition> <block pos:start="485:21" pos:end="1051:9">{<block_content pos:start="487:9" pos:end="1049:20">

        <case pos:start="487:9" pos:end="487:27">case <expr pos:start="487:14" pos:end="487:26"><name pos:start="487:14" pos:end="487:26">NEON_3R_VHADD</name></expr>:</case>

            <expr_stmt pos:start="489:13" pos:end="489:38"><expr pos:start="489:13" pos:end="489:37"><call pos:start="489:13" pos:end="489:37"><name pos:start="489:13" pos:end="489:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="489:32" pos:end="489:37">(<argument pos:start="489:33" pos:end="489:36"><expr pos:start="489:33" pos:end="489:36"><name pos:start="489:33" pos:end="489:36">hadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="491:13" pos:end="491:18">break;</break>

        <case pos:start="493:9" pos:end="493:27">case <expr pos:start="493:14" pos:end="493:26"><name pos:start="493:14" pos:end="493:26">NEON_3R_VQADD</name></expr>:</case>

            <expr_stmt pos:start="495:13" pos:end="495:42"><expr pos:start="495:13" pos:end="495:41"><call pos:start="495:13" pos:end="495:41"><name pos:start="495:13" pos:end="495:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="495:36" pos:end="495:41">(<argument pos:start="495:37" pos:end="495:40"><expr pos:start="495:37" pos:end="495:40"><name pos:start="495:37" pos:end="495:40">qadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="497:13" pos:end="497:18">break;</break>

        <case pos:start="499:9" pos:end="499:28">case <expr pos:start="499:14" pos:end="499:27"><name pos:start="499:14" pos:end="499:27">NEON_3R_VRHADD</name></expr>:</case>

            <expr_stmt pos:start="501:13" pos:end="501:39"><expr pos:start="501:13" pos:end="501:38"><call pos:start="501:13" pos:end="501:38"><name pos:start="501:13" pos:end="501:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="501:32" pos:end="501:38">(<argument pos:start="501:33" pos:end="501:37"><expr pos:start="501:33" pos:end="501:37"><name pos:start="501:33" pos:end="501:37">rhadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="503:13" pos:end="503:18">break;</break>

        <case pos:start="505:9" pos:end="505:27">case <expr pos:start="505:14" pos:end="505:26"><name pos:start="505:14" pos:end="505:26">NEON_3R_LOGIC</name></expr>:</case> <comment type="block" pos:start="505:29" pos:end="505:45">/* Logic ops.  */</comment>

            <switch pos:start="507:13" pos:end="569:13">switch <condition pos:start="507:20" pos:end="507:36">(<expr pos:start="507:21" pos:end="507:35"><operator pos:start="507:21" pos:end="507:21">(</operator><name pos:start="507:22" pos:end="507:22">u</name> <operator pos:start="507:24" pos:end="507:25">&lt;&lt;</operator> <literal type="number" pos:start="507:27" pos:end="507:27">2</literal><operator pos:start="507:28" pos:end="507:28">)</operator> <operator pos:start="507:30" pos:end="507:30">|</operator> <name pos:start="507:32" pos:end="507:35">size</name></expr>)</condition> <block pos:start="507:38" pos:end="569:13">{<block_content pos:start="509:13" pos:end="567:22">

            <case pos:start="509:13" pos:end="509:19">case <expr pos:start="509:18" pos:end="509:18"><literal type="number" pos:start="509:18" pos:end="509:18">0</literal></expr>:</case> <comment type="block" pos:start="509:21" pos:end="509:30">/* VAND */</comment>

                <expr_stmt pos:start="511:17" pos:end="511:48"><expr pos:start="511:17" pos:end="511:47"><call pos:start="511:17" pos:end="511:47"><name pos:start="511:17" pos:end="511:31">tcg_gen_and_i32</name><argument_list pos:start="511:32" pos:end="511:47">(<argument pos:start="511:33" pos:end="511:35"><expr pos:start="511:33" pos:end="511:35"><name pos:start="511:33" pos:end="511:35">tmp</name></expr></argument>, <argument pos:start="511:38" pos:end="511:40"><expr pos:start="511:38" pos:end="511:40"><name pos:start="511:38" pos:end="511:40">tmp</name></expr></argument>, <argument pos:start="511:43" pos:end="511:46"><expr pos:start="511:43" pos:end="511:46"><name pos:start="511:43" pos:end="511:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="513:17" pos:end="513:22">break;</break>

            <case pos:start="515:13" pos:end="515:19">case <expr pos:start="515:18" pos:end="515:18"><literal type="number" pos:start="515:18" pos:end="515:18">1</literal></expr>:</case> <comment type="block" pos:start="515:21" pos:end="515:29">/* BIC */</comment>

                <expr_stmt pos:start="517:17" pos:end="517:49"><expr pos:start="517:17" pos:end="517:48"><call pos:start="517:17" pos:end="517:48"><name pos:start="517:17" pos:end="517:32">tcg_gen_andc_i32</name><argument_list pos:start="517:33" pos:end="517:48">(<argument pos:start="517:34" pos:end="517:36"><expr pos:start="517:34" pos:end="517:36"><name pos:start="517:34" pos:end="517:36">tmp</name></expr></argument>, <argument pos:start="517:39" pos:end="517:41"><expr pos:start="517:39" pos:end="517:41"><name pos:start="517:39" pos:end="517:41">tmp</name></expr></argument>, <argument pos:start="517:44" pos:end="517:47"><expr pos:start="517:44" pos:end="517:47"><name pos:start="517:44" pos:end="517:47">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="519:17" pos:end="519:22">break;</break>

            <case pos:start="521:13" pos:end="521:19">case <expr pos:start="521:18" pos:end="521:18"><literal type="number" pos:start="521:18" pos:end="521:18">2</literal></expr>:</case> <comment type="block" pos:start="521:21" pos:end="521:30">/* VORR */</comment>

                <expr_stmt pos:start="523:17" pos:end="523:47"><expr pos:start="523:17" pos:end="523:46"><call pos:start="523:17" pos:end="523:46"><name pos:start="523:17" pos:end="523:30">tcg_gen_or_i32</name><argument_list pos:start="523:31" pos:end="523:46">(<argument pos:start="523:32" pos:end="523:34"><expr pos:start="523:32" pos:end="523:34"><name pos:start="523:32" pos:end="523:34">tmp</name></expr></argument>, <argument pos:start="523:37" pos:end="523:39"><expr pos:start="523:37" pos:end="523:39"><name pos:start="523:37" pos:end="523:39">tmp</name></expr></argument>, <argument pos:start="523:42" pos:end="523:45"><expr pos:start="523:42" pos:end="523:45"><name pos:start="523:42" pos:end="523:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="525:17" pos:end="525:22">break;</break>

            <case pos:start="527:13" pos:end="527:19">case <expr pos:start="527:18" pos:end="527:18"><literal type="number" pos:start="527:18" pos:end="527:18">3</literal></expr>:</case> <comment type="block" pos:start="527:21" pos:end="527:30">/* VORN */</comment>

                <expr_stmt pos:start="529:17" pos:end="529:48"><expr pos:start="529:17" pos:end="529:47"><call pos:start="529:17" pos:end="529:47"><name pos:start="529:17" pos:end="529:31">tcg_gen_orc_i32</name><argument_list pos:start="529:32" pos:end="529:47">(<argument pos:start="529:33" pos:end="529:35"><expr pos:start="529:33" pos:end="529:35"><name pos:start="529:33" pos:end="529:35">tmp</name></expr></argument>, <argument pos:start="529:38" pos:end="529:40"><expr pos:start="529:38" pos:end="529:40"><name pos:start="529:38" pos:end="529:40">tmp</name></expr></argument>, <argument pos:start="529:43" pos:end="529:46"><expr pos:start="529:43" pos:end="529:46"><name pos:start="529:43" pos:end="529:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="531:17" pos:end="531:22">break;</break>

            <case pos:start="533:13" pos:end="533:19">case <expr pos:start="533:18" pos:end="533:18"><literal type="number" pos:start="533:18" pos:end="533:18">4</literal></expr>:</case> <comment type="block" pos:start="533:21" pos:end="533:30">/* VEOR */</comment>

                <expr_stmt pos:start="535:17" pos:end="535:48"><expr pos:start="535:17" pos:end="535:47"><call pos:start="535:17" pos:end="535:47"><name pos:start="535:17" pos:end="535:31">tcg_gen_xor_i32</name><argument_list pos:start="535:32" pos:end="535:47">(<argument pos:start="535:33" pos:end="535:35"><expr pos:start="535:33" pos:end="535:35"><name pos:start="535:33" pos:end="535:35">tmp</name></expr></argument>, <argument pos:start="535:38" pos:end="535:40"><expr pos:start="535:38" pos:end="535:40"><name pos:start="535:38" pos:end="535:40">tmp</name></expr></argument>, <argument pos:start="535:43" pos:end="535:46"><expr pos:start="535:43" pos:end="535:46"><name pos:start="535:43" pos:end="535:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="537:17" pos:end="537:22">break;</break>

            <case pos:start="539:13" pos:end="539:19">case <expr pos:start="539:18" pos:end="539:18"><literal type="number" pos:start="539:18" pos:end="539:18">5</literal></expr>:</case> <comment type="block" pos:start="539:21" pos:end="539:30">/* VBSL */</comment>

                <expr_stmt pos:start="541:17" pos:end="541:47"><expr pos:start="541:17" pos:end="541:46"><name pos:start="541:17" pos:end="541:20">tmp3</name> <operator pos:start="541:22" pos:end="541:22">=</operator> <call pos:start="541:24" pos:end="541:46"><name pos:start="541:24" pos:end="541:36">neon_load_reg</name><argument_list pos:start="541:37" pos:end="541:46">(<argument pos:start="541:38" pos:end="541:39"><expr pos:start="541:38" pos:end="541:39"><name pos:start="541:38" pos:end="541:39">rd</name></expr></argument>, <argument pos:start="541:42" pos:end="541:45"><expr pos:start="541:42" pos:end="541:45"><name pos:start="541:42" pos:end="541:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="543:17" pos:end="543:51"><expr pos:start="543:17" pos:end="543:50"><call pos:start="543:17" pos:end="543:50"><name pos:start="543:17" pos:end="543:28">gen_neon_bsl</name><argument_list pos:start="543:29" pos:end="543:50">(<argument pos:start="543:30" pos:end="543:32"><expr pos:start="543:30" pos:end="543:32"><name pos:start="543:30" pos:end="543:32">tmp</name></expr></argument>, <argument pos:start="543:35" pos:end="543:37"><expr pos:start="543:35" pos:end="543:37"><name pos:start="543:35" pos:end="543:37">tmp</name></expr></argument>, <argument pos:start="543:40" pos:end="543:43"><expr pos:start="543:40" pos:end="543:43"><name pos:start="543:40" pos:end="543:43">tmp2</name></expr></argument>, <argument pos:start="543:46" pos:end="543:49"><expr pos:start="543:46" pos:end="543:49"><name pos:start="543:46" pos:end="543:49">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="545:17" pos:end="545:40"><expr pos:start="545:17" pos:end="545:39"><call pos:start="545:17" pos:end="545:39"><name pos:start="545:17" pos:end="545:33">tcg_temp_free_i32</name><argument_list pos:start="545:34" pos:end="545:39">(<argument pos:start="545:35" pos:end="545:38"><expr pos:start="545:35" pos:end="545:38"><name pos:start="545:35" pos:end="545:38">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="547:17" pos:end="547:22">break;</break>

            <case pos:start="549:13" pos:end="549:19">case <expr pos:start="549:18" pos:end="549:18"><literal type="number" pos:start="549:18" pos:end="549:18">6</literal></expr>:</case> <comment type="block" pos:start="549:21" pos:end="549:30">/* VBIT */</comment>

                <expr_stmt pos:start="551:17" pos:end="551:47"><expr pos:start="551:17" pos:end="551:46"><name pos:start="551:17" pos:end="551:20">tmp3</name> <operator pos:start="551:22" pos:end="551:22">=</operator> <call pos:start="551:24" pos:end="551:46"><name pos:start="551:24" pos:end="551:36">neon_load_reg</name><argument_list pos:start="551:37" pos:end="551:46">(<argument pos:start="551:38" pos:end="551:39"><expr pos:start="551:38" pos:end="551:39"><name pos:start="551:38" pos:end="551:39">rd</name></expr></argument>, <argument pos:start="551:42" pos:end="551:45"><expr pos:start="551:42" pos:end="551:45"><name pos:start="551:42" pos:end="551:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="553:17" pos:end="553:51"><expr pos:start="553:17" pos:end="553:50"><call pos:start="553:17" pos:end="553:50"><name pos:start="553:17" pos:end="553:28">gen_neon_bsl</name><argument_list pos:start="553:29" pos:end="553:50">(<argument pos:start="553:30" pos:end="553:32"><expr pos:start="553:30" pos:end="553:32"><name pos:start="553:30" pos:end="553:32">tmp</name></expr></argument>, <argument pos:start="553:35" pos:end="553:37"><expr pos:start="553:35" pos:end="553:37"><name pos:start="553:35" pos:end="553:37">tmp</name></expr></argument>, <argument pos:start="553:40" pos:end="553:43"><expr pos:start="553:40" pos:end="553:43"><name pos:start="553:40" pos:end="553:43">tmp3</name></expr></argument>, <argument pos:start="553:46" pos:end="553:49"><expr pos:start="553:46" pos:end="553:49"><name pos:start="553:46" pos:end="553:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="555:17" pos:end="555:40"><expr pos:start="555:17" pos:end="555:39"><call pos:start="555:17" pos:end="555:39"><name pos:start="555:17" pos:end="555:33">tcg_temp_free_i32</name><argument_list pos:start="555:34" pos:end="555:39">(<argument pos:start="555:35" pos:end="555:38"><expr pos:start="555:35" pos:end="555:38"><name pos:start="555:35" pos:end="555:38">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="557:17" pos:end="557:22">break;</break>

            <case pos:start="559:13" pos:end="559:19">case <expr pos:start="559:18" pos:end="559:18"><literal type="number" pos:start="559:18" pos:end="559:18">7</literal></expr>:</case> <comment type="block" pos:start="559:21" pos:end="559:30">/* VBIF */</comment>

                <expr_stmt pos:start="561:17" pos:end="561:47"><expr pos:start="561:17" pos:end="561:46"><name pos:start="561:17" pos:end="561:20">tmp3</name> <operator pos:start="561:22" pos:end="561:22">=</operator> <call pos:start="561:24" pos:end="561:46"><name pos:start="561:24" pos:end="561:36">neon_load_reg</name><argument_list pos:start="561:37" pos:end="561:46">(<argument pos:start="561:38" pos:end="561:39"><expr pos:start="561:38" pos:end="561:39"><name pos:start="561:38" pos:end="561:39">rd</name></expr></argument>, <argument pos:start="561:42" pos:end="561:45"><expr pos:start="561:42" pos:end="561:45"><name pos:start="561:42" pos:end="561:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="563:17" pos:end="563:51"><expr pos:start="563:17" pos:end="563:50"><call pos:start="563:17" pos:end="563:50"><name pos:start="563:17" pos:end="563:28">gen_neon_bsl</name><argument_list pos:start="563:29" pos:end="563:50">(<argument pos:start="563:30" pos:end="563:32"><expr pos:start="563:30" pos:end="563:32"><name pos:start="563:30" pos:end="563:32">tmp</name></expr></argument>, <argument pos:start="563:35" pos:end="563:38"><expr pos:start="563:35" pos:end="563:38"><name pos:start="563:35" pos:end="563:38">tmp3</name></expr></argument>, <argument pos:start="563:41" pos:end="563:43"><expr pos:start="563:41" pos:end="563:43"><name pos:start="563:41" pos:end="563:43">tmp</name></expr></argument>, <argument pos:start="563:46" pos:end="563:49"><expr pos:start="563:46" pos:end="563:49"><name pos:start="563:46" pos:end="563:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="565:17" pos:end="565:40"><expr pos:start="565:17" pos:end="565:39"><call pos:start="565:17" pos:end="565:39"><name pos:start="565:17" pos:end="565:33">tcg_temp_free_i32</name><argument_list pos:start="565:34" pos:end="565:39">(<argument pos:start="565:35" pos:end="565:38"><expr pos:start="565:35" pos:end="565:38"><name pos:start="565:35" pos:end="565:38">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="567:17" pos:end="567:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="571:13" pos:end="571:18">break;</break>

        <case pos:start="573:9" pos:end="573:27">case <expr pos:start="573:14" pos:end="573:26"><name pos:start="573:14" pos:end="573:26">NEON_3R_VHSUB</name></expr>:</case>

            <expr_stmt pos:start="575:13" pos:end="575:38"><expr pos:start="575:13" pos:end="575:37"><call pos:start="575:13" pos:end="575:37"><name pos:start="575:13" pos:end="575:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="575:32" pos:end="575:37">(<argument pos:start="575:33" pos:end="575:36"><expr pos:start="575:33" pos:end="575:36"><name pos:start="575:33" pos:end="575:36">hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="577:13" pos:end="577:18">break;</break>

        <case pos:start="579:9" pos:end="579:27">case <expr pos:start="579:14" pos:end="579:26"><name pos:start="579:14" pos:end="579:26">NEON_3R_VQSUB</name></expr>:</case>

            <expr_stmt pos:start="581:13" pos:end="581:42"><expr pos:start="581:13" pos:end="581:41"><call pos:start="581:13" pos:end="581:41"><name pos:start="581:13" pos:end="581:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="581:36" pos:end="581:41">(<argument pos:start="581:37" pos:end="581:40"><expr pos:start="581:37" pos:end="581:40"><name pos:start="581:37" pos:end="581:40">qsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="583:13" pos:end="583:18">break;</break>

        <case pos:start="585:9" pos:end="585:26">case <expr pos:start="585:14" pos:end="585:25"><name pos:start="585:14" pos:end="585:25">NEON_3R_VCGT</name></expr>:</case>

            <expr_stmt pos:start="587:13" pos:end="587:37"><expr pos:start="587:13" pos:end="587:36"><call pos:start="587:13" pos:end="587:36"><name pos:start="587:13" pos:end="587:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="587:32" pos:end="587:36">(<argument pos:start="587:33" pos:end="587:35"><expr pos:start="587:33" pos:end="587:35"><name pos:start="587:33" pos:end="587:35">cgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="589:13" pos:end="589:18">break;</break>

        <case pos:start="591:9" pos:end="591:26">case <expr pos:start="591:14" pos:end="591:25"><name pos:start="591:14" pos:end="591:25">NEON_3R_VCGE</name></expr>:</case>

            <expr_stmt pos:start="593:13" pos:end="593:37"><expr pos:start="593:13" pos:end="593:36"><call pos:start="593:13" pos:end="593:36"><name pos:start="593:13" pos:end="593:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="593:32" pos:end="593:36">(<argument pos:start="593:33" pos:end="593:35"><expr pos:start="593:33" pos:end="593:35"><name pos:start="593:33" pos:end="593:35">cge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="595:13" pos:end="595:18">break;</break>

        <case pos:start="597:9" pos:end="597:26">case <expr pos:start="597:14" pos:end="597:25"><name pos:start="597:14" pos:end="597:25">NEON_3R_VSHL</name></expr>:</case>

            <expr_stmt pos:start="599:13" pos:end="599:37"><expr pos:start="599:13" pos:end="599:36"><call pos:start="599:13" pos:end="599:36"><name pos:start="599:13" pos:end="599:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="599:32" pos:end="599:36">(<argument pos:start="599:33" pos:end="599:35"><expr pos:start="599:33" pos:end="599:35"><name pos:start="599:33" pos:end="599:35">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="601:13" pos:end="601:18">break;</break>

        <case pos:start="603:9" pos:end="603:27">case <expr pos:start="603:14" pos:end="603:26"><name pos:start="603:14" pos:end="603:26">NEON_3R_VQSHL</name></expr>:</case>

            <expr_stmt pos:start="605:13" pos:end="605:42"><expr pos:start="605:13" pos:end="605:41"><call pos:start="605:13" pos:end="605:41"><name pos:start="605:13" pos:end="605:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="605:36" pos:end="605:41">(<argument pos:start="605:37" pos:end="605:40"><expr pos:start="605:37" pos:end="605:40"><name pos:start="605:37" pos:end="605:40">qshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="607:13" pos:end="607:18">break;</break>

        <case pos:start="609:9" pos:end="609:27">case <expr pos:start="609:14" pos:end="609:26"><name pos:start="609:14" pos:end="609:26">NEON_3R_VRSHL</name></expr>:</case>

            <expr_stmt pos:start="611:13" pos:end="611:38"><expr pos:start="611:13" pos:end="611:37"><call pos:start="611:13" pos:end="611:37"><name pos:start="611:13" pos:end="611:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="611:32" pos:end="611:37">(<argument pos:start="611:33" pos:end="611:36"><expr pos:start="611:33" pos:end="611:36"><name pos:start="611:33" pos:end="611:36">rshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="613:13" pos:end="613:18">break;</break>

        <case pos:start="615:9" pos:end="615:28">case <expr pos:start="615:14" pos:end="615:27"><name pos:start="615:14" pos:end="615:27">NEON_3R_VQRSHL</name></expr>:</case>

            <expr_stmt pos:start="617:13" pos:end="617:43"><expr pos:start="617:13" pos:end="617:42"><call pos:start="617:13" pos:end="617:42"><name pos:start="617:13" pos:end="617:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="617:36" pos:end="617:42">(<argument pos:start="617:37" pos:end="617:41"><expr pos:start="617:37" pos:end="617:41"><name pos:start="617:37" pos:end="617:41">qrshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="619:13" pos:end="619:18">break;</break>

        <case pos:start="621:9" pos:end="621:26">case <expr pos:start="621:14" pos:end="621:25"><name pos:start="621:14" pos:end="621:25">NEON_3R_VMAX</name></expr>:</case>

            <expr_stmt pos:start="623:13" pos:end="623:37"><expr pos:start="623:13" pos:end="623:36"><call pos:start="623:13" pos:end="623:36"><name pos:start="623:13" pos:end="623:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="623:32" pos:end="623:36">(<argument pos:start="623:33" pos:end="623:35"><expr pos:start="623:33" pos:end="623:35"><name pos:start="623:33" pos:end="623:35">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="625:13" pos:end="625:18">break;</break>

        <case pos:start="627:9" pos:end="627:26">case <expr pos:start="627:14" pos:end="627:25"><name pos:start="627:14" pos:end="627:25">NEON_3R_VMIN</name></expr>:</case>

            <expr_stmt pos:start="629:13" pos:end="629:37"><expr pos:start="629:13" pos:end="629:36"><call pos:start="629:13" pos:end="629:36"><name pos:start="629:13" pos:end="629:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="629:32" pos:end="629:36">(<argument pos:start="629:33" pos:end="629:35"><expr pos:start="629:33" pos:end="629:35"><name pos:start="629:33" pos:end="629:35">min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="631:13" pos:end="631:18">break;</break>

        <case pos:start="633:9" pos:end="633:26">case <expr pos:start="633:14" pos:end="633:25"><name pos:start="633:14" pos:end="633:25">NEON_3R_VABD</name></expr>:</case>

            <expr_stmt pos:start="635:13" pos:end="635:37"><expr pos:start="635:13" pos:end="635:36"><call pos:start="635:13" pos:end="635:36"><name pos:start="635:13" pos:end="635:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="635:32" pos:end="635:36">(<argument pos:start="635:33" pos:end="635:35"><expr pos:start="635:33" pos:end="635:35"><name pos:start="635:33" pos:end="635:35">abd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="637:13" pos:end="637:18">break;</break>

        <case pos:start="639:9" pos:end="639:26">case <expr pos:start="639:14" pos:end="639:25"><name pos:start="639:14" pos:end="639:25">NEON_3R_VABA</name></expr>:</case>

            <expr_stmt pos:start="641:13" pos:end="641:37"><expr pos:start="641:13" pos:end="641:36"><call pos:start="641:13" pos:end="641:36"><name pos:start="641:13" pos:end="641:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="641:32" pos:end="641:36">(<argument pos:start="641:33" pos:end="641:35"><expr pos:start="641:33" pos:end="641:35"><name pos:start="641:33" pos:end="641:35">abd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="643:13" pos:end="643:36"><expr pos:start="643:13" pos:end="643:35"><call pos:start="643:13" pos:end="643:35"><name pos:start="643:13" pos:end="643:29">tcg_temp_free_i32</name><argument_list pos:start="643:30" pos:end="643:35">(<argument pos:start="643:31" pos:end="643:34"><expr pos:start="643:31" pos:end="643:34"><name pos:start="643:31" pos:end="643:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:43"><expr pos:start="645:13" pos:end="645:42"><name pos:start="645:13" pos:end="645:16">tmp2</name> <operator pos:start="645:18" pos:end="645:18">=</operator> <call pos:start="645:20" pos:end="645:42"><name pos:start="645:20" pos:end="645:32">neon_load_reg</name><argument_list pos:start="645:33" pos:end="645:42">(<argument pos:start="645:34" pos:end="645:35"><expr pos:start="645:34" pos:end="645:35"><name pos:start="645:34" pos:end="645:35">rd</name></expr></argument>, <argument pos:start="645:38" pos:end="645:41"><expr pos:start="645:38" pos:end="645:41"><name pos:start="645:38" pos:end="645:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="647:13" pos:end="647:42"><expr pos:start="647:13" pos:end="647:41"><call pos:start="647:13" pos:end="647:41"><name pos:start="647:13" pos:end="647:24">gen_neon_add</name><argument_list pos:start="647:25" pos:end="647:41">(<argument pos:start="647:26" pos:end="647:29"><expr pos:start="647:26" pos:end="647:29"><name pos:start="647:26" pos:end="647:29">size</name></expr></argument>, <argument pos:start="647:32" pos:end="647:34"><expr pos:start="647:32" pos:end="647:34"><name pos:start="647:32" pos:end="647:34">tmp</name></expr></argument>, <argument pos:start="647:37" pos:end="647:40"><expr pos:start="647:37" pos:end="647:40"><name pos:start="647:37" pos:end="647:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="649:13" pos:end="649:18">break;</break>

        <case pos:start="651:9" pos:end="651:31">case <expr pos:start="651:14" pos:end="651:30"><name pos:start="651:14" pos:end="651:30">NEON_3R_VADD_VSUB</name></expr>:</case>

            <if_stmt pos:start="653:13" pos:end="671:13"><if pos:start="653:13" pos:end="657:13">if <condition pos:start="653:16" pos:end="653:19">(<expr pos:start="653:17" pos:end="653:18"><operator pos:start="653:17" pos:end="653:17">!</operator><name pos:start="653:18" pos:end="653:18">u</name></expr>)</condition> <block pos:start="653:21" pos:end="657:13">{<block_content pos:start="655:17" pos:end="655:46"> <comment type="block" pos:start="653:23" pos:end="653:32">/* VADD */</comment>

                <expr_stmt pos:start="655:17" pos:end="655:46"><expr pos:start="655:17" pos:end="655:45"><call pos:start="655:17" pos:end="655:45"><name pos:start="655:17" pos:end="655:28">gen_neon_add</name><argument_list pos:start="655:29" pos:end="655:45">(<argument pos:start="655:30" pos:end="655:33"><expr pos:start="655:30" pos:end="655:33"><name pos:start="655:30" pos:end="655:33">size</name></expr></argument>, <argument pos:start="655:36" pos:end="655:38"><expr pos:start="655:36" pos:end="655:38"><name pos:start="655:36" pos:end="655:38">tmp</name></expr></argument>, <argument pos:start="655:41" pos:end="655:44"><expr pos:start="655:41" pos:end="655:44"><name pos:start="655:41" pos:end="655:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="657:15" pos:end="671:13">else <block pos:start="657:20" pos:end="671:13">{<block_content pos:start="659:17" pos:end="669:17"> <comment type="block" pos:start="657:22" pos:end="657:31">/* VSUB */</comment>

                <switch pos:start="659:17" pos:end="669:17">switch <condition pos:start="659:24" pos:end="659:29">(<expr pos:start="659:25" pos:end="659:28"><name pos:start="659:25" pos:end="659:28">size</name></expr>)</condition> <block pos:start="659:31" pos:end="669:17">{<block_content pos:start="661:17" pos:end="667:33">

                <case pos:start="661:17" pos:end="661:23">case <expr pos:start="661:22" pos:end="661:22"><literal type="number" pos:start="661:22" pos:end="661:22">0</literal></expr>:</case> <expr_stmt pos:start="661:25" pos:end="661:63"><expr pos:start="661:25" pos:end="661:62"><call pos:start="661:25" pos:end="661:62"><name pos:start="661:25" pos:end="661:46">gen_helper_neon_sub_u8</name><argument_list pos:start="661:47" pos:end="661:62">(<argument pos:start="661:48" pos:end="661:50"><expr pos:start="661:48" pos:end="661:50"><name pos:start="661:48" pos:end="661:50">tmp</name></expr></argument>, <argument pos:start="661:53" pos:end="661:55"><expr pos:start="661:53" pos:end="661:55"><name pos:start="661:53" pos:end="661:55">tmp</name></expr></argument>, <argument pos:start="661:58" pos:end="661:61"><expr pos:start="661:58" pos:end="661:61"><name pos:start="661:58" pos:end="661:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="661:65" pos:end="661:70">break;</break>

                <case pos:start="663:17" pos:end="663:23">case <expr pos:start="663:22" pos:end="663:22"><literal type="number" pos:start="663:22" pos:end="663:22">1</literal></expr>:</case> <expr_stmt pos:start="663:25" pos:end="663:64"><expr pos:start="663:25" pos:end="663:63"><call pos:start="663:25" pos:end="663:63"><name pos:start="663:25" pos:end="663:47">gen_helper_neon_sub_u16</name><argument_list pos:start="663:48" pos:end="663:63">(<argument pos:start="663:49" pos:end="663:51"><expr pos:start="663:49" pos:end="663:51"><name pos:start="663:49" pos:end="663:51">tmp</name></expr></argument>, <argument pos:start="663:54" pos:end="663:56"><expr pos:start="663:54" pos:end="663:56"><name pos:start="663:54" pos:end="663:56">tmp</name></expr></argument>, <argument pos:start="663:59" pos:end="663:62"><expr pos:start="663:59" pos:end="663:62"><name pos:start="663:59" pos:end="663:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="663:66" pos:end="663:71">break;</break>

                <case pos:start="665:17" pos:end="665:23">case <expr pos:start="665:22" pos:end="665:22"><literal type="number" pos:start="665:22" pos:end="665:22">2</literal></expr>:</case> <expr_stmt pos:start="665:25" pos:end="665:56"><expr pos:start="665:25" pos:end="665:55"><call pos:start="665:25" pos:end="665:55"><name pos:start="665:25" pos:end="665:39">tcg_gen_sub_i32</name><argument_list pos:start="665:40" pos:end="665:55">(<argument pos:start="665:41" pos:end="665:43"><expr pos:start="665:41" pos:end="665:43"><name pos:start="665:41" pos:end="665:43">tmp</name></expr></argument>, <argument pos:start="665:46" pos:end="665:48"><expr pos:start="665:46" pos:end="665:48"><name pos:start="665:46" pos:end="665:48">tmp</name></expr></argument>, <argument pos:start="665:51" pos:end="665:54"><expr pos:start="665:51" pos:end="665:54"><name pos:start="665:51" pos:end="665:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="665:58" pos:end="665:63">break;</break>

                <default pos:start="667:17" pos:end="667:24">default:</default> <expr_stmt pos:start="667:26" pos:end="667:33"><expr pos:start="667:26" pos:end="667:32"><call pos:start="667:26" pos:end="667:32"><name pos:start="667:26" pos:end="667:30">abort</name><argument_list pos:start="667:31" pos:end="667:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="673:13" pos:end="673:18">break;</break>

        <case pos:start="675:9" pos:end="675:31">case <expr pos:start="675:14" pos:end="675:30"><name pos:start="675:14" pos:end="675:30">NEON_3R_VTST_VCEQ</name></expr>:</case>

            <if_stmt pos:start="677:13" pos:end="705:13"><if pos:start="677:13" pos:end="691:13">if <condition pos:start="677:16" pos:end="677:19">(<expr pos:start="677:17" pos:end="677:18"><operator pos:start="677:17" pos:end="677:17">!</operator><name pos:start="677:18" pos:end="677:18">u</name></expr>)</condition> <block pos:start="677:21" pos:end="691:13">{<block_content pos:start="679:17" pos:end="689:17"> <comment type="block" pos:start="677:23" pos:end="677:32">/* VTST */</comment>

                <switch pos:start="679:17" pos:end="689:17">switch <condition pos:start="679:24" pos:end="679:29">(<expr pos:start="679:25" pos:end="679:28"><name pos:start="679:25" pos:end="679:28">size</name></expr>)</condition> <block pos:start="679:31" pos:end="689:17">{<block_content pos:start="681:17" pos:end="687:33">

                <case pos:start="681:17" pos:end="681:23">case <expr pos:start="681:22" pos:end="681:22"><literal type="number" pos:start="681:22" pos:end="681:22">0</literal></expr>:</case> <expr_stmt pos:start="681:25" pos:end="681:63"><expr pos:start="681:25" pos:end="681:62"><call pos:start="681:25" pos:end="681:62"><name pos:start="681:25" pos:end="681:46">gen_helper_neon_tst_u8</name><argument_list pos:start="681:47" pos:end="681:62">(<argument pos:start="681:48" pos:end="681:50"><expr pos:start="681:48" pos:end="681:50"><name pos:start="681:48" pos:end="681:50">tmp</name></expr></argument>, <argument pos:start="681:53" pos:end="681:55"><expr pos:start="681:53" pos:end="681:55"><name pos:start="681:53" pos:end="681:55">tmp</name></expr></argument>, <argument pos:start="681:58" pos:end="681:61"><expr pos:start="681:58" pos:end="681:61"><name pos:start="681:58" pos:end="681:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="681:65" pos:end="681:70">break;</break>

                <case pos:start="683:17" pos:end="683:23">case <expr pos:start="683:22" pos:end="683:22"><literal type="number" pos:start="683:22" pos:end="683:22">1</literal></expr>:</case> <expr_stmt pos:start="683:25" pos:end="683:64"><expr pos:start="683:25" pos:end="683:63"><call pos:start="683:25" pos:end="683:63"><name pos:start="683:25" pos:end="683:47">gen_helper_neon_tst_u16</name><argument_list pos:start="683:48" pos:end="683:63">(<argument pos:start="683:49" pos:end="683:51"><expr pos:start="683:49" pos:end="683:51"><name pos:start="683:49" pos:end="683:51">tmp</name></expr></argument>, <argument pos:start="683:54" pos:end="683:56"><expr pos:start="683:54" pos:end="683:56"><name pos:start="683:54" pos:end="683:56">tmp</name></expr></argument>, <argument pos:start="683:59" pos:end="683:62"><expr pos:start="683:59" pos:end="683:62"><name pos:start="683:59" pos:end="683:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="683:66" pos:end="683:71">break;</break>

                <case pos:start="685:17" pos:end="685:23">case <expr pos:start="685:22" pos:end="685:22"><literal type="number" pos:start="685:22" pos:end="685:22">2</literal></expr>:</case> <expr_stmt pos:start="685:25" pos:end="685:64"><expr pos:start="685:25" pos:end="685:63"><call pos:start="685:25" pos:end="685:63"><name pos:start="685:25" pos:end="685:47">gen_helper_neon_tst_u32</name><argument_list pos:start="685:48" pos:end="685:63">(<argument pos:start="685:49" pos:end="685:51"><expr pos:start="685:49" pos:end="685:51"><name pos:start="685:49" pos:end="685:51">tmp</name></expr></argument>, <argument pos:start="685:54" pos:end="685:56"><expr pos:start="685:54" pos:end="685:56"><name pos:start="685:54" pos:end="685:56">tmp</name></expr></argument>, <argument pos:start="685:59" pos:end="685:62"><expr pos:start="685:59" pos:end="685:62"><name pos:start="685:59" pos:end="685:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="685:66" pos:end="685:71">break;</break>

                <default pos:start="687:17" pos:end="687:24">default:</default> <expr_stmt pos:start="687:26" pos:end="687:33"><expr pos:start="687:26" pos:end="687:32"><call pos:start="687:26" pos:end="687:32"><name pos:start="687:26" pos:end="687:30">abort</name><argument_list pos:start="687:31" pos:end="687:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="691:15" pos:end="705:13">else <block pos:start="691:20" pos:end="705:13">{<block_content pos:start="693:17" pos:end="703:17"> <comment type="block" pos:start="691:22" pos:end="691:31">/* VCEQ */</comment>

                <switch pos:start="693:17" pos:end="703:17">switch <condition pos:start="693:24" pos:end="693:29">(<expr pos:start="693:25" pos:end="693:28"><name pos:start="693:25" pos:end="693:28">size</name></expr>)</condition> <block pos:start="693:31" pos:end="703:17">{<block_content pos:start="695:17" pos:end="701:33">

                <case pos:start="695:17" pos:end="695:23">case <expr pos:start="695:22" pos:end="695:22"><literal type="number" pos:start="695:22" pos:end="695:22">0</literal></expr>:</case> <expr_stmt pos:start="695:25" pos:end="695:63"><expr pos:start="695:25" pos:end="695:62"><call pos:start="695:25" pos:end="695:62"><name pos:start="695:25" pos:end="695:46">gen_helper_neon_ceq_u8</name><argument_list pos:start="695:47" pos:end="695:62">(<argument pos:start="695:48" pos:end="695:50"><expr pos:start="695:48" pos:end="695:50"><name pos:start="695:48" pos:end="695:50">tmp</name></expr></argument>, <argument pos:start="695:53" pos:end="695:55"><expr pos:start="695:53" pos:end="695:55"><name pos:start="695:53" pos:end="695:55">tmp</name></expr></argument>, <argument pos:start="695:58" pos:end="695:61"><expr pos:start="695:58" pos:end="695:61"><name pos:start="695:58" pos:end="695:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="695:65" pos:end="695:70">break;</break>

                <case pos:start="697:17" pos:end="697:23">case <expr pos:start="697:22" pos:end="697:22"><literal type="number" pos:start="697:22" pos:end="697:22">1</literal></expr>:</case> <expr_stmt pos:start="697:25" pos:end="697:64"><expr pos:start="697:25" pos:end="697:63"><call pos:start="697:25" pos:end="697:63"><name pos:start="697:25" pos:end="697:47">gen_helper_neon_ceq_u16</name><argument_list pos:start="697:48" pos:end="697:63">(<argument pos:start="697:49" pos:end="697:51"><expr pos:start="697:49" pos:end="697:51"><name pos:start="697:49" pos:end="697:51">tmp</name></expr></argument>, <argument pos:start="697:54" pos:end="697:56"><expr pos:start="697:54" pos:end="697:56"><name pos:start="697:54" pos:end="697:56">tmp</name></expr></argument>, <argument pos:start="697:59" pos:end="697:62"><expr pos:start="697:59" pos:end="697:62"><name pos:start="697:59" pos:end="697:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="697:66" pos:end="697:71">break;</break>

                <case pos:start="699:17" pos:end="699:23">case <expr pos:start="699:22" pos:end="699:22"><literal type="number" pos:start="699:22" pos:end="699:22">2</literal></expr>:</case> <expr_stmt pos:start="699:25" pos:end="699:64"><expr pos:start="699:25" pos:end="699:63"><call pos:start="699:25" pos:end="699:63"><name pos:start="699:25" pos:end="699:47">gen_helper_neon_ceq_u32</name><argument_list pos:start="699:48" pos:end="699:63">(<argument pos:start="699:49" pos:end="699:51"><expr pos:start="699:49" pos:end="699:51"><name pos:start="699:49" pos:end="699:51">tmp</name></expr></argument>, <argument pos:start="699:54" pos:end="699:56"><expr pos:start="699:54" pos:end="699:56"><name pos:start="699:54" pos:end="699:56">tmp</name></expr></argument>, <argument pos:start="699:59" pos:end="699:62"><expr pos:start="699:59" pos:end="699:62"><name pos:start="699:59" pos:end="699:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="699:66" pos:end="699:71">break;</break>

                <default pos:start="701:17" pos:end="701:24">default:</default> <expr_stmt pos:start="701:26" pos:end="701:33"><expr pos:start="701:26" pos:end="701:32"><call pos:start="701:26" pos:end="701:32"><name pos:start="701:26" pos:end="701:30">abort</name><argument_list pos:start="701:31" pos:end="701:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="707:13" pos:end="707:18">break;</break>

        <case pos:start="709:9" pos:end="709:25">case <expr pos:start="709:14" pos:end="709:24"><name pos:start="709:14" pos:end="709:24">NEON_3R_VML</name></expr>:</case> <comment type="block" pos:start="709:27" pos:end="709:55">/* VMLA, VMLAL, VMLS,VMLSL */</comment>

            <switch pos:start="711:13" pos:end="721:13">switch <condition pos:start="711:20" pos:end="711:25">(<expr pos:start="711:21" pos:end="711:24"><name pos:start="711:21" pos:end="711:24">size</name></expr>)</condition> <block pos:start="711:27" pos:end="721:13">{<block_content pos:start="713:13" pos:end="719:29">

            <case pos:start="713:13" pos:end="713:19">case <expr pos:start="713:18" pos:end="713:18"><literal type="number" pos:start="713:18" pos:end="713:18">0</literal></expr>:</case> <expr_stmt pos:start="713:21" pos:end="713:59"><expr pos:start="713:21" pos:end="713:58"><call pos:start="713:21" pos:end="713:58"><name pos:start="713:21" pos:end="713:42">gen_helper_neon_mul_u8</name><argument_list pos:start="713:43" pos:end="713:58">(<argument pos:start="713:44" pos:end="713:46"><expr pos:start="713:44" pos:end="713:46"><name pos:start="713:44" pos:end="713:46">tmp</name></expr></argument>, <argument pos:start="713:49" pos:end="713:51"><expr pos:start="713:49" pos:end="713:51"><name pos:start="713:49" pos:end="713:51">tmp</name></expr></argument>, <argument pos:start="713:54" pos:end="713:57"><expr pos:start="713:54" pos:end="713:57"><name pos:start="713:54" pos:end="713:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="713:61" pos:end="713:66">break;</break>

            <case pos:start="715:13" pos:end="715:19">case <expr pos:start="715:18" pos:end="715:18"><literal type="number" pos:start="715:18" pos:end="715:18">1</literal></expr>:</case> <expr_stmt pos:start="715:21" pos:end="715:60"><expr pos:start="715:21" pos:end="715:59"><call pos:start="715:21" pos:end="715:59"><name pos:start="715:21" pos:end="715:43">gen_helper_neon_mul_u16</name><argument_list pos:start="715:44" pos:end="715:59">(<argument pos:start="715:45" pos:end="715:47"><expr pos:start="715:45" pos:end="715:47"><name pos:start="715:45" pos:end="715:47">tmp</name></expr></argument>, <argument pos:start="715:50" pos:end="715:52"><expr pos:start="715:50" pos:end="715:52"><name pos:start="715:50" pos:end="715:52">tmp</name></expr></argument>, <argument pos:start="715:55" pos:end="715:58"><expr pos:start="715:55" pos:end="715:58"><name pos:start="715:55" pos:end="715:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="715:62" pos:end="715:67">break;</break>

            <case pos:start="717:13" pos:end="717:19">case <expr pos:start="717:18" pos:end="717:18"><literal type="number" pos:start="717:18" pos:end="717:18">2</literal></expr>:</case> <expr_stmt pos:start="717:21" pos:end="717:52"><expr pos:start="717:21" pos:end="717:51"><call pos:start="717:21" pos:end="717:51"><name pos:start="717:21" pos:end="717:35">tcg_gen_mul_i32</name><argument_list pos:start="717:36" pos:end="717:51">(<argument pos:start="717:37" pos:end="717:39"><expr pos:start="717:37" pos:end="717:39"><name pos:start="717:37" pos:end="717:39">tmp</name></expr></argument>, <argument pos:start="717:42" pos:end="717:44"><expr pos:start="717:42" pos:end="717:44"><name pos:start="717:42" pos:end="717:44">tmp</name></expr></argument>, <argument pos:start="717:47" pos:end="717:50"><expr pos:start="717:47" pos:end="717:50"><name pos:start="717:47" pos:end="717:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="717:54" pos:end="717:59">break;</break>

            <default pos:start="719:13" pos:end="719:20">default:</default> <expr_stmt pos:start="719:22" pos:end="719:29"><expr pos:start="719:22" pos:end="719:28"><call pos:start="719:22" pos:end="719:28"><name pos:start="719:22" pos:end="719:26">abort</name><argument_list pos:start="719:27" pos:end="719:28">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="723:13" pos:end="723:36"><expr pos:start="723:13" pos:end="723:35"><call pos:start="723:13" pos:end="723:35"><name pos:start="723:13" pos:end="723:29">tcg_temp_free_i32</name><argument_list pos:start="723:30" pos:end="723:35">(<argument pos:start="723:31" pos:end="723:34"><expr pos:start="723:31" pos:end="723:34"><name pos:start="723:31" pos:end="723:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="725:13" pos:end="725:43"><expr pos:start="725:13" pos:end="725:42"><name pos:start="725:13" pos:end="725:16">tmp2</name> <operator pos:start="725:18" pos:end="725:18">=</operator> <call pos:start="725:20" pos:end="725:42"><name pos:start="725:20" pos:end="725:32">neon_load_reg</name><argument_list pos:start="725:33" pos:end="725:42">(<argument pos:start="725:34" pos:end="725:35"><expr pos:start="725:34" pos:end="725:35"><name pos:start="725:34" pos:end="725:35">rd</name></expr></argument>, <argument pos:start="725:38" pos:end="725:41"><expr pos:start="725:38" pos:end="725:41"><name pos:start="725:38" pos:end="725:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="727:13" pos:end="735:13"><if pos:start="727:13" pos:end="731:13">if <condition pos:start="727:16" pos:end="727:18">(<expr pos:start="727:17" pos:end="727:17"><name pos:start="727:17" pos:end="727:17">u</name></expr>)</condition> <block pos:start="727:20" pos:end="731:13">{<block_content pos:start="729:17" pos:end="729:46"> <comment type="block" pos:start="727:22" pos:end="727:31">/* VMLS */</comment>

                <expr_stmt pos:start="729:17" pos:end="729:46"><expr pos:start="729:17" pos:end="729:45"><call pos:start="729:17" pos:end="729:45"><name pos:start="729:17" pos:end="729:28">gen_neon_rsb</name><argument_list pos:start="729:29" pos:end="729:45">(<argument pos:start="729:30" pos:end="729:33"><expr pos:start="729:30" pos:end="729:33"><name pos:start="729:30" pos:end="729:33">size</name></expr></argument>, <argument pos:start="729:36" pos:end="729:38"><expr pos:start="729:36" pos:end="729:38"><name pos:start="729:36" pos:end="729:38">tmp</name></expr></argument>, <argument pos:start="729:41" pos:end="729:44"><expr pos:start="729:41" pos:end="729:44"><name pos:start="729:41" pos:end="729:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="731:15" pos:end="735:13">else <block pos:start="731:20" pos:end="735:13">{<block_content pos:start="733:17" pos:end="733:46"> <comment type="block" pos:start="731:22" pos:end="731:31">/* VMLA */</comment>

                <expr_stmt pos:start="733:17" pos:end="733:46"><expr pos:start="733:17" pos:end="733:45"><call pos:start="733:17" pos:end="733:45"><name pos:start="733:17" pos:end="733:28">gen_neon_add</name><argument_list pos:start="733:29" pos:end="733:45">(<argument pos:start="733:30" pos:end="733:33"><expr pos:start="733:30" pos:end="733:33"><name pos:start="733:30" pos:end="733:33">size</name></expr></argument>, <argument pos:start="733:36" pos:end="733:38"><expr pos:start="733:36" pos:end="733:38"><name pos:start="733:36" pos:end="733:38">tmp</name></expr></argument>, <argument pos:start="733:41" pos:end="733:44"><expr pos:start="733:41" pos:end="733:44"><name pos:start="733:41" pos:end="733:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="737:13" pos:end="737:18">break;</break>

        <case pos:start="739:9" pos:end="739:26">case <expr pos:start="739:14" pos:end="739:25"><name pos:start="739:14" pos:end="739:25">NEON_3R_VMUL</name></expr>:</case>

            <if_stmt pos:start="741:13" pos:end="759:13"><if pos:start="741:13" pos:end="745:13">if <condition pos:start="741:16" pos:end="741:18">(<expr pos:start="741:17" pos:end="741:17"><name pos:start="741:17" pos:end="741:17">u</name></expr>)</condition> <block pos:start="741:20" pos:end="745:13">{<block_content pos:start="743:17" pos:end="743:55"> <comment type="block" pos:start="741:22" pos:end="741:37">/* polynomial */</comment>

                <expr_stmt pos:start="743:17" pos:end="743:55"><expr pos:start="743:17" pos:end="743:54"><call pos:start="743:17" pos:end="743:54"><name pos:start="743:17" pos:end="743:38">gen_helper_neon_mul_p8</name><argument_list pos:start="743:39" pos:end="743:54">(<argument pos:start="743:40" pos:end="743:42"><expr pos:start="743:40" pos:end="743:42"><name pos:start="743:40" pos:end="743:42">tmp</name></expr></argument>, <argument pos:start="743:45" pos:end="743:47"><expr pos:start="743:45" pos:end="743:47"><name pos:start="743:45" pos:end="743:47">tmp</name></expr></argument>, <argument pos:start="743:50" pos:end="743:53"><expr pos:start="743:50" pos:end="743:53"><name pos:start="743:50" pos:end="743:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="745:15" pos:end="759:13">else <block pos:start="745:20" pos:end="759:13">{<block_content pos:start="747:17" pos:end="757:17"> <comment type="block" pos:start="745:22" pos:end="745:34">/* Integer */</comment>

                <switch pos:start="747:17" pos:end="757:17">switch <condition pos:start="747:24" pos:end="747:29">(<expr pos:start="747:25" pos:end="747:28"><name pos:start="747:25" pos:end="747:28">size</name></expr>)</condition> <block pos:start="747:31" pos:end="757:17">{<block_content pos:start="749:17" pos:end="755:33">

                <case pos:start="749:17" pos:end="749:23">case <expr pos:start="749:22" pos:end="749:22"><literal type="number" pos:start="749:22" pos:end="749:22">0</literal></expr>:</case> <expr_stmt pos:start="749:25" pos:end="749:63"><expr pos:start="749:25" pos:end="749:62"><call pos:start="749:25" pos:end="749:62"><name pos:start="749:25" pos:end="749:46">gen_helper_neon_mul_u8</name><argument_list pos:start="749:47" pos:end="749:62">(<argument pos:start="749:48" pos:end="749:50"><expr pos:start="749:48" pos:end="749:50"><name pos:start="749:48" pos:end="749:50">tmp</name></expr></argument>, <argument pos:start="749:53" pos:end="749:55"><expr pos:start="749:53" pos:end="749:55"><name pos:start="749:53" pos:end="749:55">tmp</name></expr></argument>, <argument pos:start="749:58" pos:end="749:61"><expr pos:start="749:58" pos:end="749:61"><name pos:start="749:58" pos:end="749:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="749:65" pos:end="749:70">break;</break>

                <case pos:start="751:17" pos:end="751:23">case <expr pos:start="751:22" pos:end="751:22"><literal type="number" pos:start="751:22" pos:end="751:22">1</literal></expr>:</case> <expr_stmt pos:start="751:25" pos:end="751:64"><expr pos:start="751:25" pos:end="751:63"><call pos:start="751:25" pos:end="751:63"><name pos:start="751:25" pos:end="751:47">gen_helper_neon_mul_u16</name><argument_list pos:start="751:48" pos:end="751:63">(<argument pos:start="751:49" pos:end="751:51"><expr pos:start="751:49" pos:end="751:51"><name pos:start="751:49" pos:end="751:51">tmp</name></expr></argument>, <argument pos:start="751:54" pos:end="751:56"><expr pos:start="751:54" pos:end="751:56"><name pos:start="751:54" pos:end="751:56">tmp</name></expr></argument>, <argument pos:start="751:59" pos:end="751:62"><expr pos:start="751:59" pos:end="751:62"><name pos:start="751:59" pos:end="751:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="751:66" pos:end="751:71">break;</break>

                <case pos:start="753:17" pos:end="753:23">case <expr pos:start="753:22" pos:end="753:22"><literal type="number" pos:start="753:22" pos:end="753:22">2</literal></expr>:</case> <expr_stmt pos:start="753:25" pos:end="753:56"><expr pos:start="753:25" pos:end="753:55"><call pos:start="753:25" pos:end="753:55"><name pos:start="753:25" pos:end="753:39">tcg_gen_mul_i32</name><argument_list pos:start="753:40" pos:end="753:55">(<argument pos:start="753:41" pos:end="753:43"><expr pos:start="753:41" pos:end="753:43"><name pos:start="753:41" pos:end="753:43">tmp</name></expr></argument>, <argument pos:start="753:46" pos:end="753:48"><expr pos:start="753:46" pos:end="753:48"><name pos:start="753:46" pos:end="753:48">tmp</name></expr></argument>, <argument pos:start="753:51" pos:end="753:54"><expr pos:start="753:51" pos:end="753:54"><name pos:start="753:51" pos:end="753:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="753:58" pos:end="753:63">break;</break>

                <default pos:start="755:17" pos:end="755:24">default:</default> <expr_stmt pos:start="755:26" pos:end="755:33"><expr pos:start="755:26" pos:end="755:32"><call pos:start="755:26" pos:end="755:32"><name pos:start="755:26" pos:end="755:30">abort</name><argument_list pos:start="755:31" pos:end="755:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="761:13" pos:end="761:18">break;</break>

        <case pos:start="763:9" pos:end="763:27">case <expr pos:start="763:14" pos:end="763:26"><name pos:start="763:14" pos:end="763:26">NEON_3R_VPMAX</name></expr>:</case>

            <expr_stmt pos:start="765:13" pos:end="765:38"><expr pos:start="765:13" pos:end="765:37"><call pos:start="765:13" pos:end="765:37"><name pos:start="765:13" pos:end="765:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="765:32" pos:end="765:37">(<argument pos:start="765:33" pos:end="765:36"><expr pos:start="765:33" pos:end="765:36"><name pos:start="765:33" pos:end="765:36">pmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="767:13" pos:end="767:18">break;</break>

        <case pos:start="769:9" pos:end="769:27">case <expr pos:start="769:14" pos:end="769:26"><name pos:start="769:14" pos:end="769:26">NEON_3R_VPMIN</name></expr>:</case>

            <expr_stmt pos:start="771:13" pos:end="771:38"><expr pos:start="771:13" pos:end="771:37"><call pos:start="771:13" pos:end="771:37"><name pos:start="771:13" pos:end="771:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="771:32" pos:end="771:37">(<argument pos:start="771:33" pos:end="771:36"><expr pos:start="771:33" pos:end="771:36"><name pos:start="771:33" pos:end="771:36">pmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="773:13" pos:end="773:18">break;</break>

        <case pos:start="775:9" pos:end="775:38">case <expr pos:start="775:14" pos:end="775:37"><name pos:start="775:14" pos:end="775:37">NEON_3R_VQDMULH_VQRDMULH</name></expr>:</case> <comment type="block" pos:start="775:40" pos:end="775:60">/* Multiply high.  */</comment>

            <if_stmt pos:start="777:13" pos:end="817:13"><if pos:start="777:13" pos:end="797:13">if <condition pos:start="777:16" pos:end="777:19">(<expr pos:start="777:17" pos:end="777:18"><operator pos:start="777:17" pos:end="777:17">!</operator><name pos:start="777:18" pos:end="777:18">u</name></expr>)</condition> <block pos:start="777:21" pos:end="797:13">{<block_content pos:start="779:17" pos:end="795:17"> <comment type="block" pos:start="777:23" pos:end="777:35">/* VQDMULH */</comment>

                <switch pos:start="779:17" pos:end="795:17">switch <condition pos:start="779:24" pos:end="779:29">(<expr pos:start="779:25" pos:end="779:28"><name pos:start="779:25" pos:end="779:28">size</name></expr>)</condition> <block pos:start="779:31" pos:end="795:17">{<block_content pos:start="781:17" pos:end="793:33">

                <case pos:start="781:17" pos:end="781:23">case <expr pos:start="781:22" pos:end="781:22"><literal type="number" pos:start="781:22" pos:end="781:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="783:21" pos:end="783:72"><expr pos:start="783:21" pos:end="783:71"><call pos:start="783:21" pos:end="783:71"><name pos:start="783:21" pos:end="783:46">gen_helper_neon_qdmulh_s16</name><argument_list pos:start="783:47" pos:end="783:71">(<argument pos:start="783:48" pos:end="783:50"><expr pos:start="783:48" pos:end="783:50"><name pos:start="783:48" pos:end="783:50">tmp</name></expr></argument>, <argument pos:start="783:53" pos:end="783:59"><expr pos:start="783:53" pos:end="783:59"><name pos:start="783:53" pos:end="783:59">cpu_env</name></expr></argument>, <argument pos:start="783:62" pos:end="783:64"><expr pos:start="783:62" pos:end="783:64"><name pos:start="783:62" pos:end="783:64">tmp</name></expr></argument>, <argument pos:start="783:67" pos:end="783:70"><expr pos:start="783:67" pos:end="783:70"><name pos:start="783:67" pos:end="783:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="785:21" pos:end="785:26">break;</break>

                <case pos:start="787:17" pos:end="787:23">case <expr pos:start="787:22" pos:end="787:22"><literal type="number" pos:start="787:22" pos:end="787:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="789:21" pos:end="789:72"><expr pos:start="789:21" pos:end="789:71"><call pos:start="789:21" pos:end="789:71"><name pos:start="789:21" pos:end="789:46">gen_helper_neon_qdmulh_s32</name><argument_list pos:start="789:47" pos:end="789:71">(<argument pos:start="789:48" pos:end="789:50"><expr pos:start="789:48" pos:end="789:50"><name pos:start="789:48" pos:end="789:50">tmp</name></expr></argument>, <argument pos:start="789:53" pos:end="789:59"><expr pos:start="789:53" pos:end="789:59"><name pos:start="789:53" pos:end="789:59">cpu_env</name></expr></argument>, <argument pos:start="789:62" pos:end="789:64"><expr pos:start="789:62" pos:end="789:64"><name pos:start="789:62" pos:end="789:64">tmp</name></expr></argument>, <argument pos:start="789:67" pos:end="789:70"><expr pos:start="789:67" pos:end="789:70"><name pos:start="789:67" pos:end="789:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="791:21" pos:end="791:26">break;</break>

                <default pos:start="793:17" pos:end="793:24">default:</default> <expr_stmt pos:start="793:26" pos:end="793:33"><expr pos:start="793:26" pos:end="793:32"><call pos:start="793:26" pos:end="793:32"><name pos:start="793:26" pos:end="793:30">abort</name><argument_list pos:start="793:31" pos:end="793:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="797:15" pos:end="817:13">else <block pos:start="797:20" pos:end="817:13">{<block_content pos:start="799:17" pos:end="815:17"> <comment type="block" pos:start="797:22" pos:end="797:35">/* VQRDMULH */</comment>

                <switch pos:start="799:17" pos:end="815:17">switch <condition pos:start="799:24" pos:end="799:29">(<expr pos:start="799:25" pos:end="799:28"><name pos:start="799:25" pos:end="799:28">size</name></expr>)</condition> <block pos:start="799:31" pos:end="815:17">{<block_content pos:start="801:17" pos:end="813:33">

                <case pos:start="801:17" pos:end="801:23">case <expr pos:start="801:22" pos:end="801:22"><literal type="number" pos:start="801:22" pos:end="801:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="803:21" pos:end="803:73"><expr pos:start="803:21" pos:end="803:72"><call pos:start="803:21" pos:end="803:72"><name pos:start="803:21" pos:end="803:47">gen_helper_neon_qrdmulh_s16</name><argument_list pos:start="803:48" pos:end="803:72">(<argument pos:start="803:49" pos:end="803:51"><expr pos:start="803:49" pos:end="803:51"><name pos:start="803:49" pos:end="803:51">tmp</name></expr></argument>, <argument pos:start="803:54" pos:end="803:60"><expr pos:start="803:54" pos:end="803:60"><name pos:start="803:54" pos:end="803:60">cpu_env</name></expr></argument>, <argument pos:start="803:63" pos:end="803:65"><expr pos:start="803:63" pos:end="803:65"><name pos:start="803:63" pos:end="803:65">tmp</name></expr></argument>, <argument pos:start="803:68" pos:end="803:71"><expr pos:start="803:68" pos:end="803:71"><name pos:start="803:68" pos:end="803:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="805:21" pos:end="805:26">break;</break>

                <case pos:start="807:17" pos:end="807:23">case <expr pos:start="807:22" pos:end="807:22"><literal type="number" pos:start="807:22" pos:end="807:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="809:21" pos:end="809:73"><expr pos:start="809:21" pos:end="809:72"><call pos:start="809:21" pos:end="809:72"><name pos:start="809:21" pos:end="809:47">gen_helper_neon_qrdmulh_s32</name><argument_list pos:start="809:48" pos:end="809:72">(<argument pos:start="809:49" pos:end="809:51"><expr pos:start="809:49" pos:end="809:51"><name pos:start="809:49" pos:end="809:51">tmp</name></expr></argument>, <argument pos:start="809:54" pos:end="809:60"><expr pos:start="809:54" pos:end="809:60"><name pos:start="809:54" pos:end="809:60">cpu_env</name></expr></argument>, <argument pos:start="809:63" pos:end="809:65"><expr pos:start="809:63" pos:end="809:65"><name pos:start="809:63" pos:end="809:65">tmp</name></expr></argument>, <argument pos:start="809:68" pos:end="809:71"><expr pos:start="809:68" pos:end="809:71"><name pos:start="809:68" pos:end="809:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="811:21" pos:end="811:26">break;</break>

                <default pos:start="813:17" pos:end="813:24">default:</default> <expr_stmt pos:start="813:26" pos:end="813:33"><expr pos:start="813:26" pos:end="813:32"><call pos:start="813:26" pos:end="813:32"><name pos:start="813:26" pos:end="813:30">abort</name><argument_list pos:start="813:31" pos:end="813:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="819:13" pos:end="819:18">break;</break>

        <case pos:start="821:9" pos:end="821:27">case <expr pos:start="821:14" pos:end="821:26"><name pos:start="821:14" pos:end="821:26">NEON_3R_VPADD</name></expr>:</case>

            <switch pos:start="823:13" pos:end="833:13">switch <condition pos:start="823:20" pos:end="823:25">(<expr pos:start="823:21" pos:end="823:24"><name pos:start="823:21" pos:end="823:24">size</name></expr>)</condition> <block pos:start="823:27" pos:end="833:13">{<block_content pos:start="825:13" pos:end="831:29">

            <case pos:start="825:13" pos:end="825:19">case <expr pos:start="825:18" pos:end="825:18"><literal type="number" pos:start="825:18" pos:end="825:18">0</literal></expr>:</case> <expr_stmt pos:start="825:21" pos:end="825:60"><expr pos:start="825:21" pos:end="825:59"><call pos:start="825:21" pos:end="825:59"><name pos:start="825:21" pos:end="825:43">gen_helper_neon_padd_u8</name><argument_list pos:start="825:44" pos:end="825:59">(<argument pos:start="825:45" pos:end="825:47"><expr pos:start="825:45" pos:end="825:47"><name pos:start="825:45" pos:end="825:47">tmp</name></expr></argument>, <argument pos:start="825:50" pos:end="825:52"><expr pos:start="825:50" pos:end="825:52"><name pos:start="825:50" pos:end="825:52">tmp</name></expr></argument>, <argument pos:start="825:55" pos:end="825:58"><expr pos:start="825:55" pos:end="825:58"><name pos:start="825:55" pos:end="825:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="825:62" pos:end="825:67">break;</break>

            <case pos:start="827:13" pos:end="827:19">case <expr pos:start="827:18" pos:end="827:18"><literal type="number" pos:start="827:18" pos:end="827:18">1</literal></expr>:</case> <expr_stmt pos:start="827:21" pos:end="827:61"><expr pos:start="827:21" pos:end="827:60"><call pos:start="827:21" pos:end="827:60"><name pos:start="827:21" pos:end="827:44">gen_helper_neon_padd_u16</name><argument_list pos:start="827:45" pos:end="827:60">(<argument pos:start="827:46" pos:end="827:48"><expr pos:start="827:46" pos:end="827:48"><name pos:start="827:46" pos:end="827:48">tmp</name></expr></argument>, <argument pos:start="827:51" pos:end="827:53"><expr pos:start="827:51" pos:end="827:53"><name pos:start="827:51" pos:end="827:53">tmp</name></expr></argument>, <argument pos:start="827:56" pos:end="827:59"><expr pos:start="827:56" pos:end="827:59"><name pos:start="827:56" pos:end="827:59">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="827:63" pos:end="827:68">break;</break>

            <case pos:start="829:13" pos:end="829:19">case <expr pos:start="829:18" pos:end="829:18"><literal type="number" pos:start="829:18" pos:end="829:18">2</literal></expr>:</case> <expr_stmt pos:start="829:21" pos:end="829:52"><expr pos:start="829:21" pos:end="829:51"><call pos:start="829:21" pos:end="829:51"><name pos:start="829:21" pos:end="829:35">tcg_gen_add_i32</name><argument_list pos:start="829:36" pos:end="829:51">(<argument pos:start="829:37" pos:end="829:39"><expr pos:start="829:37" pos:end="829:39"><name pos:start="829:37" pos:end="829:39">tmp</name></expr></argument>, <argument pos:start="829:42" pos:end="829:44"><expr pos:start="829:42" pos:end="829:44"><name pos:start="829:42" pos:end="829:44">tmp</name></expr></argument>, <argument pos:start="829:47" pos:end="829:50"><expr pos:start="829:47" pos:end="829:50"><name pos:start="829:47" pos:end="829:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="829:54" pos:end="829:59">break;</break>

            <default pos:start="831:13" pos:end="831:20">default:</default> <expr_stmt pos:start="831:22" pos:end="831:29"><expr pos:start="831:22" pos:end="831:28"><call pos:start="831:22" pos:end="831:28"><name pos:start="831:22" pos:end="831:26">abort</name><argument_list pos:start="831:27" pos:end="831:28">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <break pos:start="835:13" pos:end="835:18">break;</break>

        <case pos:start="837:9" pos:end="837:33">case <expr pos:start="837:14" pos:end="837:32"><name pos:start="837:14" pos:end="837:32">NEON_3R_FLOAT_ARITH</name></expr>:</case> <comment type="block" pos:start="837:35" pos:end="837:66">/* Floating point arithmetic. */</comment>

        <block pos:start="839:9" pos:end="875:9">{<block_content pos:start="841:13" pos:end="873:18">

            <decl_stmt pos:start="841:13" pos:end="841:52"><decl pos:start="841:13" pos:end="841:51"><type pos:start="841:13" pos:end="841:20"><name pos:start="841:13" pos:end="841:20">TCGv_ptr</name></type> <name pos:start="841:22" pos:end="841:29">fpstatus</name> <init pos:start="841:31" pos:end="841:51">= <expr pos:start="841:33" pos:end="841:51"><call pos:start="841:33" pos:end="841:51"><name pos:start="841:33" pos:end="841:48">get_fpstatus_ptr</name><argument_list pos:start="841:49" pos:end="841:51">(<argument pos:start="841:50" pos:end="841:50"><expr pos:start="841:50" pos:end="841:50"><literal type="number" pos:start="841:50" pos:end="841:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <switch pos:start="843:13" pos:end="869:13">switch <condition pos:start="843:20" pos:end="843:36">(<expr pos:start="843:21" pos:end="843:35"><operator pos:start="843:21" pos:end="843:21">(</operator><name pos:start="843:22" pos:end="843:22">u</name> <operator pos:start="843:24" pos:end="843:25">&lt;&lt;</operator> <literal type="number" pos:start="843:27" pos:end="843:27">2</literal><operator pos:start="843:28" pos:end="843:28">)</operator> <operator pos:start="843:30" pos:end="843:30">|</operator> <name pos:start="843:32" pos:end="843:35">size</name></expr>)</condition> <block pos:start="843:38" pos:end="869:13">{<block_content pos:start="845:13" pos:end="867:24">

            <case pos:start="845:13" pos:end="845:19">case <expr pos:start="845:18" pos:end="845:18"><literal type="number" pos:start="845:18" pos:end="845:18">0</literal></expr>:</case> <comment type="block" pos:start="845:21" pos:end="845:30">/* VADD */</comment>

            <case pos:start="847:13" pos:end="847:19">case <expr pos:start="847:18" pos:end="847:18"><literal type="number" pos:start="847:18" pos:end="847:18">4</literal></expr>:</case> <comment type="block" pos:start="847:21" pos:end="847:31">/* VPADD */</comment>

                <expr_stmt pos:start="849:17" pos:end="849:62"><expr pos:start="849:17" pos:end="849:61"><call pos:start="849:17" pos:end="849:61"><name pos:start="849:17" pos:end="849:35">gen_helper_vfp_adds</name><argument_list pos:start="849:36" pos:end="849:61">(<argument pos:start="849:37" pos:end="849:39"><expr pos:start="849:37" pos:end="849:39"><name pos:start="849:37" pos:end="849:39">tmp</name></expr></argument>, <argument pos:start="849:42" pos:end="849:44"><expr pos:start="849:42" pos:end="849:44"><name pos:start="849:42" pos:end="849:44">tmp</name></expr></argument>, <argument pos:start="849:47" pos:end="849:50"><expr pos:start="849:47" pos:end="849:50"><name pos:start="849:47" pos:end="849:50">tmp2</name></expr></argument>, <argument pos:start="849:53" pos:end="849:60"><expr pos:start="849:53" pos:end="849:60"><name pos:start="849:53" pos:end="849:60">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="851:17" pos:end="851:22">break;</break>

            <case pos:start="853:13" pos:end="853:19">case <expr pos:start="853:18" pos:end="853:18"><literal type="number" pos:start="853:18" pos:end="853:18">2</literal></expr>:</case> <comment type="block" pos:start="853:21" pos:end="853:30">/* VSUB */</comment>

                <expr_stmt pos:start="855:17" pos:end="855:62"><expr pos:start="855:17" pos:end="855:61"><call pos:start="855:17" pos:end="855:61"><name pos:start="855:17" pos:end="855:35">gen_helper_vfp_subs</name><argument_list pos:start="855:36" pos:end="855:61">(<argument pos:start="855:37" pos:end="855:39"><expr pos:start="855:37" pos:end="855:39"><name pos:start="855:37" pos:end="855:39">tmp</name></expr></argument>, <argument pos:start="855:42" pos:end="855:44"><expr pos:start="855:42" pos:end="855:44"><name pos:start="855:42" pos:end="855:44">tmp</name></expr></argument>, <argument pos:start="855:47" pos:end="855:50"><expr pos:start="855:47" pos:end="855:50"><name pos:start="855:47" pos:end="855:50">tmp2</name></expr></argument>, <argument pos:start="855:53" pos:end="855:60"><expr pos:start="855:53" pos:end="855:60"><name pos:start="855:53" pos:end="855:60">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="857:17" pos:end="857:22">break;</break>

            <case pos:start="859:13" pos:end="859:19">case <expr pos:start="859:18" pos:end="859:18"><literal type="number" pos:start="859:18" pos:end="859:18">6</literal></expr>:</case> <comment type="block" pos:start="859:21" pos:end="859:30">/* VABD */</comment>

                <expr_stmt pos:start="861:17" pos:end="861:66"><expr pos:start="861:17" pos:end="861:65"><call pos:start="861:17" pos:end="861:65"><name pos:start="861:17" pos:end="861:39">gen_helper_neon_abd_f32</name><argument_list pos:start="861:40" pos:end="861:65">(<argument pos:start="861:41" pos:end="861:43"><expr pos:start="861:41" pos:end="861:43"><name pos:start="861:41" pos:end="861:43">tmp</name></expr></argument>, <argument pos:start="861:46" pos:end="861:48"><expr pos:start="861:46" pos:end="861:48"><name pos:start="861:46" pos:end="861:48">tmp</name></expr></argument>, <argument pos:start="861:51" pos:end="861:54"><expr pos:start="861:51" pos:end="861:54"><name pos:start="861:51" pos:end="861:54">tmp2</name></expr></argument>, <argument pos:start="861:57" pos:end="861:64"><expr pos:start="861:57" pos:end="861:64"><name pos:start="861:57" pos:end="861:64">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="863:17" pos:end="863:22">break;</break>

            <default pos:start="865:13" pos:end="865:20">default:</default>

                <expr_stmt pos:start="867:17" pos:end="867:24"><expr pos:start="867:17" pos:end="867:23"><call pos:start="867:17" pos:end="867:23"><name pos:start="867:17" pos:end="867:21">abort</name><argument_list pos:start="867:22" pos:end="867:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="871:13" pos:end="871:40"><expr pos:start="871:13" pos:end="871:39"><call pos:start="871:13" pos:end="871:39"><name pos:start="871:13" pos:end="871:29">tcg_temp_free_ptr</name><argument_list pos:start="871:30" pos:end="871:39">(<argument pos:start="871:31" pos:end="871:38"><expr pos:start="871:31" pos:end="871:38"><name pos:start="871:31" pos:end="871:38">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="873:13" pos:end="873:18">break;</break>

        </block_content>}</block>

        <case pos:start="877:9" pos:end="877:36">case <expr pos:start="877:14" pos:end="877:35"><name pos:start="877:14" pos:end="877:35">NEON_3R_FLOAT_MULTIPLY</name></expr>:</case>

        <block pos:start="879:9" pos:end="907:9">{<block_content pos:start="881:13" pos:end="905:18">

            <decl_stmt pos:start="881:13" pos:end="881:52"><decl pos:start="881:13" pos:end="881:51"><type pos:start="881:13" pos:end="881:20"><name pos:start="881:13" pos:end="881:20">TCGv_ptr</name></type> <name pos:start="881:22" pos:end="881:29">fpstatus</name> <init pos:start="881:31" pos:end="881:51">= <expr pos:start="881:33" pos:end="881:51"><call pos:start="881:33" pos:end="881:51"><name pos:start="881:33" pos:end="881:48">get_fpstatus_ptr</name><argument_list pos:start="881:49" pos:end="881:51">(<argument pos:start="881:50" pos:end="881:50"><expr pos:start="881:50" pos:end="881:50"><literal type="number" pos:start="881:50" pos:end="881:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="883:13" pos:end="883:58"><expr pos:start="883:13" pos:end="883:57"><call pos:start="883:13" pos:end="883:57"><name pos:start="883:13" pos:end="883:31">gen_helper_vfp_muls</name><argument_list pos:start="883:32" pos:end="883:57">(<argument pos:start="883:33" pos:end="883:35"><expr pos:start="883:33" pos:end="883:35"><name pos:start="883:33" pos:end="883:35">tmp</name></expr></argument>, <argument pos:start="883:38" pos:end="883:40"><expr pos:start="883:38" pos:end="883:40"><name pos:start="883:38" pos:end="883:40">tmp</name></expr></argument>, <argument pos:start="883:43" pos:end="883:46"><expr pos:start="883:43" pos:end="883:46"><name pos:start="883:43" pos:end="883:46">tmp2</name></expr></argument>, <argument pos:start="883:49" pos:end="883:56"><expr pos:start="883:49" pos:end="883:56"><name pos:start="883:49" pos:end="883:56">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="885:13" pos:end="901:13"><if pos:start="885:13" pos:end="901:13">if <condition pos:start="885:16" pos:end="885:19">(<expr pos:start="885:17" pos:end="885:18"><operator pos:start="885:17" pos:end="885:17">!</operator><name pos:start="885:18" pos:end="885:18">u</name></expr>)</condition> <block pos:start="885:21" pos:end="901:13">{<block_content pos:start="887:17" pos:end="899:17">

                <expr_stmt pos:start="887:17" pos:end="887:40"><expr pos:start="887:17" pos:end="887:39"><call pos:start="887:17" pos:end="887:39"><name pos:start="887:17" pos:end="887:33">tcg_temp_free_i32</name><argument_list pos:start="887:34" pos:end="887:39">(<argument pos:start="887:35" pos:end="887:38"><expr pos:start="887:35" pos:end="887:38"><name pos:start="887:35" pos:end="887:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="889:17" pos:end="889:47"><expr pos:start="889:17" pos:end="889:46"><name pos:start="889:17" pos:end="889:20">tmp2</name> <operator pos:start="889:22" pos:end="889:22">=</operator> <call pos:start="889:24" pos:end="889:46"><name pos:start="889:24" pos:end="889:36">neon_load_reg</name><argument_list pos:start="889:37" pos:end="889:46">(<argument pos:start="889:38" pos:end="889:39"><expr pos:start="889:38" pos:end="889:39"><name pos:start="889:38" pos:end="889:39">rd</name></expr></argument>, <argument pos:start="889:42" pos:end="889:45"><expr pos:start="889:42" pos:end="889:45"><name pos:start="889:42" pos:end="889:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="891:17" pos:end="899:17"><if pos:start="891:17" pos:end="895:17">if <condition pos:start="891:20" pos:end="891:30">(<expr pos:start="891:21" pos:end="891:29"><name pos:start="891:21" pos:end="891:24">size</name> <operator pos:start="891:26" pos:end="891:27">==</operator> <literal type="number" pos:start="891:29" pos:end="891:29">0</literal></expr>)</condition> <block pos:start="891:32" pos:end="895:17">{<block_content pos:start="893:21" pos:end="893:66">

                    <expr_stmt pos:start="893:21" pos:end="893:66"><expr pos:start="893:21" pos:end="893:65"><call pos:start="893:21" pos:end="893:65"><name pos:start="893:21" pos:end="893:39">gen_helper_vfp_adds</name><argument_list pos:start="893:40" pos:end="893:65">(<argument pos:start="893:41" pos:end="893:43"><expr pos:start="893:41" pos:end="893:43"><name pos:start="893:41" pos:end="893:43">tmp</name></expr></argument>, <argument pos:start="893:46" pos:end="893:48"><expr pos:start="893:46" pos:end="893:48"><name pos:start="893:46" pos:end="893:48">tmp</name></expr></argument>, <argument pos:start="893:51" pos:end="893:54"><expr pos:start="893:51" pos:end="893:54"><name pos:start="893:51" pos:end="893:54">tmp2</name></expr></argument>, <argument pos:start="893:57" pos:end="893:64"><expr pos:start="893:57" pos:end="893:64"><name pos:start="893:57" pos:end="893:64">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="895:19" pos:end="899:17">else <block pos:start="895:24" pos:end="899:17">{<block_content pos:start="897:21" pos:end="897:66">

                    <expr_stmt pos:start="897:21" pos:end="897:66"><expr pos:start="897:21" pos:end="897:65"><call pos:start="897:21" pos:end="897:65"><name pos:start="897:21" pos:end="897:39">gen_helper_vfp_subs</name><argument_list pos:start="897:40" pos:end="897:65">(<argument pos:start="897:41" pos:end="897:43"><expr pos:start="897:41" pos:end="897:43"><name pos:start="897:41" pos:end="897:43">tmp</name></expr></argument>, <argument pos:start="897:46" pos:end="897:49"><expr pos:start="897:46" pos:end="897:49"><name pos:start="897:46" pos:end="897:49">tmp2</name></expr></argument>, <argument pos:start="897:52" pos:end="897:54"><expr pos:start="897:52" pos:end="897:54"><name pos:start="897:52" pos:end="897:54">tmp</name></expr></argument>, <argument pos:start="897:57" pos:end="897:64"><expr pos:start="897:57" pos:end="897:64"><name pos:start="897:57" pos:end="897:64">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="903:13" pos:end="903:40"><expr pos:start="903:13" pos:end="903:39"><call pos:start="903:13" pos:end="903:39"><name pos:start="903:13" pos:end="903:29">tcg_temp_free_ptr</name><argument_list pos:start="903:30" pos:end="903:39">(<argument pos:start="903:31" pos:end="903:38"><expr pos:start="903:31" pos:end="903:38"><name pos:start="903:31" pos:end="903:38">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="905:13" pos:end="905:18">break;</break>

        </block_content>}</block>

        <case pos:start="909:9" pos:end="909:31">case <expr pos:start="909:14" pos:end="909:30"><name pos:start="909:14" pos:end="909:30">NEON_3R_FLOAT_CMP</name></expr>:</case>

        <block pos:start="911:9" pos:end="937:9">{<block_content pos:start="913:13" pos:end="935:18">

            <decl_stmt pos:start="913:13" pos:end="913:52"><decl pos:start="913:13" pos:end="913:51"><type pos:start="913:13" pos:end="913:20"><name pos:start="913:13" pos:end="913:20">TCGv_ptr</name></type> <name pos:start="913:22" pos:end="913:29">fpstatus</name> <init pos:start="913:31" pos:end="913:51">= <expr pos:start="913:33" pos:end="913:51"><call pos:start="913:33" pos:end="913:51"><name pos:start="913:33" pos:end="913:48">get_fpstatus_ptr</name><argument_list pos:start="913:49" pos:end="913:51">(<argument pos:start="913:50" pos:end="913:50"><expr pos:start="913:50" pos:end="913:50"><literal type="number" pos:start="913:50" pos:end="913:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="915:13" pos:end="931:13"><if pos:start="915:13" pos:end="919:13">if <condition pos:start="915:16" pos:end="915:19">(<expr pos:start="915:17" pos:end="915:18"><operator pos:start="915:17" pos:end="915:17">!</operator><name pos:start="915:18" pos:end="915:18">u</name></expr>)</condition> <block pos:start="915:21" pos:end="919:13">{<block_content pos:start="917:17" pos:end="917:66">

                <expr_stmt pos:start="917:17" pos:end="917:66"><expr pos:start="917:17" pos:end="917:65"><call pos:start="917:17" pos:end="917:65"><name pos:start="917:17" pos:end="917:39">gen_helper_neon_ceq_f32</name><argument_list pos:start="917:40" pos:end="917:65">(<argument pos:start="917:41" pos:end="917:43"><expr pos:start="917:41" pos:end="917:43"><name pos:start="917:41" pos:end="917:43">tmp</name></expr></argument>, <argument pos:start="917:46" pos:end="917:48"><expr pos:start="917:46" pos:end="917:48"><name pos:start="917:46" pos:end="917:48">tmp</name></expr></argument>, <argument pos:start="917:51" pos:end="917:54"><expr pos:start="917:51" pos:end="917:54"><name pos:start="917:51" pos:end="917:54">tmp2</name></expr></argument>, <argument pos:start="917:57" pos:end="917:64"><expr pos:start="917:57" pos:end="917:64"><name pos:start="917:57" pos:end="917:64">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="919:15" pos:end="931:13">else <block pos:start="919:20" pos:end="931:13">{<block_content pos:start="921:17" pos:end="929:17">

                <if_stmt pos:start="921:17" pos:end="929:17"><if pos:start="921:17" pos:end="925:17">if <condition pos:start="921:20" pos:end="921:30">(<expr pos:start="921:21" pos:end="921:29"><name pos:start="921:21" pos:end="921:24">size</name> <operator pos:start="921:26" pos:end="921:27">==</operator> <literal type="number" pos:start="921:29" pos:end="921:29">0</literal></expr>)</condition> <block pos:start="921:32" pos:end="925:17">{<block_content pos:start="923:21" pos:end="923:70">

                    <expr_stmt pos:start="923:21" pos:end="923:70"><expr pos:start="923:21" pos:end="923:69"><call pos:start="923:21" pos:end="923:69"><name pos:start="923:21" pos:end="923:43">gen_helper_neon_cge_f32</name><argument_list pos:start="923:44" pos:end="923:69">(<argument pos:start="923:45" pos:end="923:47"><expr pos:start="923:45" pos:end="923:47"><name pos:start="923:45" pos:end="923:47">tmp</name></expr></argument>, <argument pos:start="923:50" pos:end="923:52"><expr pos:start="923:50" pos:end="923:52"><name pos:start="923:50" pos:end="923:52">tmp</name></expr></argument>, <argument pos:start="923:55" pos:end="923:58"><expr pos:start="923:55" pos:end="923:58"><name pos:start="923:55" pos:end="923:58">tmp2</name></expr></argument>, <argument pos:start="923:61" pos:end="923:68"><expr pos:start="923:61" pos:end="923:68"><name pos:start="923:61" pos:end="923:68">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="925:19" pos:end="929:17">else <block pos:start="925:24" pos:end="929:17">{<block_content pos:start="927:21" pos:end="927:70">

                    <expr_stmt pos:start="927:21" pos:end="927:70"><expr pos:start="927:21" pos:end="927:69"><call pos:start="927:21" pos:end="927:69"><name pos:start="927:21" pos:end="927:43">gen_helper_neon_cgt_f32</name><argument_list pos:start="927:44" pos:end="927:69">(<argument pos:start="927:45" pos:end="927:47"><expr pos:start="927:45" pos:end="927:47"><name pos:start="927:45" pos:end="927:47">tmp</name></expr></argument>, <argument pos:start="927:50" pos:end="927:52"><expr pos:start="927:50" pos:end="927:52"><name pos:start="927:50" pos:end="927:52">tmp</name></expr></argument>, <argument pos:start="927:55" pos:end="927:58"><expr pos:start="927:55" pos:end="927:58"><name pos:start="927:55" pos:end="927:58">tmp2</name></expr></argument>, <argument pos:start="927:61" pos:end="927:68"><expr pos:start="927:61" pos:end="927:68"><name pos:start="927:61" pos:end="927:68">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="933:13" pos:end="933:40"><expr pos:start="933:13" pos:end="933:39"><call pos:start="933:13" pos:end="933:39"><name pos:start="933:13" pos:end="933:29">tcg_temp_free_ptr</name><argument_list pos:start="933:30" pos:end="933:39">(<argument pos:start="933:31" pos:end="933:38"><expr pos:start="933:31" pos:end="933:38"><name pos:start="933:31" pos:end="933:38">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="935:13" pos:end="935:18">break;</break>

        </block_content>}</block>

        <case pos:start="939:9" pos:end="939:32">case <expr pos:start="939:14" pos:end="939:31"><name pos:start="939:14" pos:end="939:31">NEON_3R_FLOAT_ACMP</name></expr>:</case>

        <block pos:start="941:9" pos:end="959:9">{<block_content pos:start="943:13" pos:end="957:18">

            <decl_stmt pos:start="943:13" pos:end="943:52"><decl pos:start="943:13" pos:end="943:51"><type pos:start="943:13" pos:end="943:20"><name pos:start="943:13" pos:end="943:20">TCGv_ptr</name></type> <name pos:start="943:22" pos:end="943:29">fpstatus</name> <init pos:start="943:31" pos:end="943:51">= <expr pos:start="943:33" pos:end="943:51"><call pos:start="943:33" pos:end="943:51"><name pos:start="943:33" pos:end="943:48">get_fpstatus_ptr</name><argument_list pos:start="943:49" pos:end="943:51">(<argument pos:start="943:50" pos:end="943:50"><expr pos:start="943:50" pos:end="943:50"><literal type="number" pos:start="943:50" pos:end="943:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="945:13" pos:end="953:13"><if pos:start="945:13" pos:end="949:13">if <condition pos:start="945:16" pos:end="945:26">(<expr pos:start="945:17" pos:end="945:25"><name pos:start="945:17" pos:end="945:20">size</name> <operator pos:start="945:22" pos:end="945:23">==</operator> <literal type="number" pos:start="945:25" pos:end="945:25">0</literal></expr>)</condition> <block pos:start="945:28" pos:end="949:13">{<block_content pos:start="947:17" pos:end="947:67">

                <expr_stmt pos:start="947:17" pos:end="947:67"><expr pos:start="947:17" pos:end="947:66"><call pos:start="947:17" pos:end="947:66"><name pos:start="947:17" pos:end="947:40">gen_helper_neon_acge_f32</name><argument_list pos:start="947:41" pos:end="947:66">(<argument pos:start="947:42" pos:end="947:44"><expr pos:start="947:42" pos:end="947:44"><name pos:start="947:42" pos:end="947:44">tmp</name></expr></argument>, <argument pos:start="947:47" pos:end="947:49"><expr pos:start="947:47" pos:end="947:49"><name pos:start="947:47" pos:end="947:49">tmp</name></expr></argument>, <argument pos:start="947:52" pos:end="947:55"><expr pos:start="947:52" pos:end="947:55"><name pos:start="947:52" pos:end="947:55">tmp2</name></expr></argument>, <argument pos:start="947:58" pos:end="947:65"><expr pos:start="947:58" pos:end="947:65"><name pos:start="947:58" pos:end="947:65">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="949:15" pos:end="953:13">else <block pos:start="949:20" pos:end="953:13">{<block_content pos:start="951:17" pos:end="951:67">

                <expr_stmt pos:start="951:17" pos:end="951:67"><expr pos:start="951:17" pos:end="951:66"><call pos:start="951:17" pos:end="951:66"><name pos:start="951:17" pos:end="951:40">gen_helper_neon_acgt_f32</name><argument_list pos:start="951:41" pos:end="951:66">(<argument pos:start="951:42" pos:end="951:44"><expr pos:start="951:42" pos:end="951:44"><name pos:start="951:42" pos:end="951:44">tmp</name></expr></argument>, <argument pos:start="951:47" pos:end="951:49"><expr pos:start="951:47" pos:end="951:49"><name pos:start="951:47" pos:end="951:49">tmp</name></expr></argument>, <argument pos:start="951:52" pos:end="951:55"><expr pos:start="951:52" pos:end="951:55"><name pos:start="951:52" pos:end="951:55">tmp2</name></expr></argument>, <argument pos:start="951:58" pos:end="951:65"><expr pos:start="951:58" pos:end="951:65"><name pos:start="951:58" pos:end="951:65">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="955:13" pos:end="955:40"><expr pos:start="955:13" pos:end="955:39"><call pos:start="955:13" pos:end="955:39"><name pos:start="955:13" pos:end="955:29">tcg_temp_free_ptr</name><argument_list pos:start="955:30" pos:end="955:39">(<argument pos:start="955:31" pos:end="955:38"><expr pos:start="955:31" pos:end="955:38"><name pos:start="955:31" pos:end="955:38">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="957:13" pos:end="957:18">break;</break>

        </block_content>}</block>

        <case pos:start="961:9" pos:end="961:34">case <expr pos:start="961:14" pos:end="961:33"><name pos:start="961:14" pos:end="961:33">NEON_3R_FLOAT_MINMAX</name></expr>:</case>

        <block pos:start="963:9" pos:end="981:9">{<block_content pos:start="965:13" pos:end="979:18">

            <decl_stmt pos:start="965:13" pos:end="965:52"><decl pos:start="965:13" pos:end="965:51"><type pos:start="965:13" pos:end="965:20"><name pos:start="965:13" pos:end="965:20">TCGv_ptr</name></type> <name pos:start="965:22" pos:end="965:29">fpstatus</name> <init pos:start="965:31" pos:end="965:51">= <expr pos:start="965:33" pos:end="965:51"><call pos:start="965:33" pos:end="965:51"><name pos:start="965:33" pos:end="965:48">get_fpstatus_ptr</name><argument_list pos:start="965:49" pos:end="965:51">(<argument pos:start="965:50" pos:end="965:50"><expr pos:start="965:50" pos:end="965:50"><literal type="number" pos:start="965:50" pos:end="965:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="967:13" pos:end="975:13"><if pos:start="967:13" pos:end="971:13">if <condition pos:start="967:16" pos:end="967:26">(<expr pos:start="967:17" pos:end="967:25"><name pos:start="967:17" pos:end="967:20">size</name> <operator pos:start="967:22" pos:end="967:23">==</operator> <literal type="number" pos:start="967:25" pos:end="967:25">0</literal></expr>)</condition> <block pos:start="967:28" pos:end="971:13">{<block_content pos:start="969:17" pos:end="969:62">

                <expr_stmt pos:start="969:17" pos:end="969:62"><expr pos:start="969:17" pos:end="969:61"><call pos:start="969:17" pos:end="969:61"><name pos:start="969:17" pos:end="969:35">gen_helper_vfp_maxs</name><argument_list pos:start="969:36" pos:end="969:61">(<argument pos:start="969:37" pos:end="969:39"><expr pos:start="969:37" pos:end="969:39"><name pos:start="969:37" pos:end="969:39">tmp</name></expr></argument>, <argument pos:start="969:42" pos:end="969:44"><expr pos:start="969:42" pos:end="969:44"><name pos:start="969:42" pos:end="969:44">tmp</name></expr></argument>, <argument pos:start="969:47" pos:end="969:50"><expr pos:start="969:47" pos:end="969:50"><name pos:start="969:47" pos:end="969:50">tmp2</name></expr></argument>, <argument pos:start="969:53" pos:end="969:60"><expr pos:start="969:53" pos:end="969:60"><name pos:start="969:53" pos:end="969:60">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="971:15" pos:end="975:13">else <block pos:start="971:20" pos:end="975:13">{<block_content pos:start="973:17" pos:end="973:62">

                <expr_stmt pos:start="973:17" pos:end="973:62"><expr pos:start="973:17" pos:end="973:61"><call pos:start="973:17" pos:end="973:61"><name pos:start="973:17" pos:end="973:35">gen_helper_vfp_mins</name><argument_list pos:start="973:36" pos:end="973:61">(<argument pos:start="973:37" pos:end="973:39"><expr pos:start="973:37" pos:end="973:39"><name pos:start="973:37" pos:end="973:39">tmp</name></expr></argument>, <argument pos:start="973:42" pos:end="973:44"><expr pos:start="973:42" pos:end="973:44"><name pos:start="973:42" pos:end="973:44">tmp</name></expr></argument>, <argument pos:start="973:47" pos:end="973:50"><expr pos:start="973:47" pos:end="973:50"><name pos:start="973:47" pos:end="973:50">tmp2</name></expr></argument>, <argument pos:start="973:53" pos:end="973:60"><expr pos:start="973:53" pos:end="973:60"><name pos:start="973:53" pos:end="973:60">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="977:13" pos:end="977:40"><expr pos:start="977:13" pos:end="977:39"><call pos:start="977:13" pos:end="977:39"><name pos:start="977:13" pos:end="977:29">tcg_temp_free_ptr</name><argument_list pos:start="977:30" pos:end="977:39">(<argument pos:start="977:31" pos:end="977:38"><expr pos:start="977:31" pos:end="977:38"><name pos:start="977:31" pos:end="977:38">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="979:13" pos:end="979:18">break;</break>

        </block_content>}</block>

        <case pos:start="983:9" pos:end="983:32">case <expr pos:start="983:14" pos:end="983:31"><name pos:start="983:14" pos:end="983:31">NEON_3R_FLOAT_MISC</name></expr>:</case>

            <if_stmt pos:start="985:13" pos:end="1015:13"><if pos:start="985:13" pos:end="1003:13">if <condition pos:start="985:16" pos:end="985:18">(<expr pos:start="985:17" pos:end="985:17"><name pos:start="985:17" pos:end="985:17">u</name></expr>)</condition> <block pos:start="985:20" pos:end="1003:13">{<block_content pos:start="989:17" pos:end="1001:44">

                <comment type="block" pos:start="987:17" pos:end="987:35">/* VMAXNM/VMINNM */</comment>

                <decl_stmt pos:start="989:17" pos:end="989:56"><decl pos:start="989:17" pos:end="989:55"><type pos:start="989:17" pos:end="989:24"><name pos:start="989:17" pos:end="989:24">TCGv_ptr</name></type> <name pos:start="989:26" pos:end="989:33">fpstatus</name> <init pos:start="989:35" pos:end="989:55">= <expr pos:start="989:37" pos:end="989:55"><call pos:start="989:37" pos:end="989:55"><name pos:start="989:37" pos:end="989:52">get_fpstatus_ptr</name><argument_list pos:start="989:53" pos:end="989:55">(<argument pos:start="989:54" pos:end="989:54"><expr pos:start="989:54" pos:end="989:54"><literal type="number" pos:start="989:54" pos:end="989:54">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="991:17" pos:end="999:17"><if pos:start="991:17" pos:end="995:17">if <condition pos:start="991:20" pos:end="991:30">(<expr pos:start="991:21" pos:end="991:29"><name pos:start="991:21" pos:end="991:24">size</name> <operator pos:start="991:26" pos:end="991:27">==</operator> <literal type="number" pos:start="991:29" pos:end="991:29">0</literal></expr>)</condition> <block pos:start="991:32" pos:end="995:17">{<block_content pos:start="993:21" pos:end="993:69">

                    <expr_stmt pos:start="993:21" pos:end="993:69"><expr pos:start="993:21" pos:end="993:68"><call pos:start="993:21" pos:end="993:68"><name pos:start="993:21" pos:end="993:42">gen_helper_vfp_maxnums</name><argument_list pos:start="993:43" pos:end="993:68">(<argument pos:start="993:44" pos:end="993:46"><expr pos:start="993:44" pos:end="993:46"><name pos:start="993:44" pos:end="993:46">tmp</name></expr></argument>, <argument pos:start="993:49" pos:end="993:51"><expr pos:start="993:49" pos:end="993:51"><name pos:start="993:49" pos:end="993:51">tmp</name></expr></argument>, <argument pos:start="993:54" pos:end="993:57"><expr pos:start="993:54" pos:end="993:57"><name pos:start="993:54" pos:end="993:57">tmp2</name></expr></argument>, <argument pos:start="993:60" pos:end="993:67"><expr pos:start="993:60" pos:end="993:67"><name pos:start="993:60" pos:end="993:67">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="995:19" pos:end="999:17">else <block pos:start="995:24" pos:end="999:17">{<block_content pos:start="997:21" pos:end="997:69">

                    <expr_stmt pos:start="997:21" pos:end="997:69"><expr pos:start="997:21" pos:end="997:68"><call pos:start="997:21" pos:end="997:68"><name pos:start="997:21" pos:end="997:42">gen_helper_vfp_minnums</name><argument_list pos:start="997:43" pos:end="997:68">(<argument pos:start="997:44" pos:end="997:46"><expr pos:start="997:44" pos:end="997:46"><name pos:start="997:44" pos:end="997:46">tmp</name></expr></argument>, <argument pos:start="997:49" pos:end="997:51"><expr pos:start="997:49" pos:end="997:51"><name pos:start="997:49" pos:end="997:51">tmp</name></expr></argument>, <argument pos:start="997:54" pos:end="997:57"><expr pos:start="997:54" pos:end="997:57"><name pos:start="997:54" pos:end="997:57">tmp2</name></expr></argument>, <argument pos:start="997:60" pos:end="997:67"><expr pos:start="997:60" pos:end="997:67"><name pos:start="997:60" pos:end="997:67">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1001:17" pos:end="1001:44"><expr pos:start="1001:17" pos:end="1001:43"><call pos:start="1001:17" pos:end="1001:43"><name pos:start="1001:17" pos:end="1001:33">tcg_temp_free_ptr</name><argument_list pos:start="1001:34" pos:end="1001:43">(<argument pos:start="1001:35" pos:end="1001:42"><expr pos:start="1001:35" pos:end="1001:42"><name pos:start="1001:35" pos:end="1001:42">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1003:15" pos:end="1015:13">else <block pos:start="1003:20" pos:end="1015:13">{<block_content pos:start="1005:17" pos:end="1013:15">

                <if_stmt pos:start="1005:17" pos:end="1013:15"><if pos:start="1005:17" pos:end="1009:17">if <condition pos:start="1005:20" pos:end="1005:30">(<expr pos:start="1005:21" pos:end="1005:29"><name pos:start="1005:21" pos:end="1005:24">size</name> <operator pos:start="1005:26" pos:end="1005:27">==</operator> <literal type="number" pos:start="1005:29" pos:end="1005:29">0</literal></expr>)</condition> <block pos:start="1005:32" pos:end="1009:17">{<block_content pos:start="1007:21" pos:end="1007:66">

                    <expr_stmt pos:start="1007:21" pos:end="1007:66"><expr pos:start="1007:21" pos:end="1007:65"><call pos:start="1007:21" pos:end="1007:65"><name pos:start="1007:21" pos:end="1007:40">gen_helper_recps_f32</name><argument_list pos:start="1007:41" pos:end="1007:65">(<argument pos:start="1007:42" pos:end="1007:44"><expr pos:start="1007:42" pos:end="1007:44"><name pos:start="1007:42" pos:end="1007:44">tmp</name></expr></argument>, <argument pos:start="1007:47" pos:end="1007:49"><expr pos:start="1007:47" pos:end="1007:49"><name pos:start="1007:47" pos:end="1007:49">tmp</name></expr></argument>, <argument pos:start="1007:52" pos:end="1007:55"><expr pos:start="1007:52" pos:end="1007:55"><name pos:start="1007:52" pos:end="1007:55">tmp2</name></expr></argument>, <argument pos:start="1007:58" pos:end="1007:64"><expr pos:start="1007:58" pos:end="1007:64"><name pos:start="1007:58" pos:end="1007:64">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1009:19" pos:end="1013:15">else <block pos:start="1009:24" pos:end="1013:15">{<block_content pos:start="1011:21" pos:end="1011:67">

                    <expr_stmt pos:start="1011:21" pos:end="1011:67"><expr pos:start="1011:21" pos:end="1011:66"><call pos:start="1011:21" pos:end="1011:66"><name pos:start="1011:21" pos:end="1011:41">gen_helper_rsqrts_f32</name><argument_list pos:start="1011:42" pos:end="1011:66">(<argument pos:start="1011:43" pos:end="1011:45"><expr pos:start="1011:43" pos:end="1011:45"><name pos:start="1011:43" pos:end="1011:45">tmp</name></expr></argument>, <argument pos:start="1011:48" pos:end="1011:50"><expr pos:start="1011:48" pos:end="1011:50"><name pos:start="1011:48" pos:end="1011:50">tmp</name></expr></argument>, <argument pos:start="1011:53" pos:end="1011:56"><expr pos:start="1011:53" pos:end="1011:56"><name pos:start="1011:53" pos:end="1011:56">tmp2</name></expr></argument>, <argument pos:start="1011:59" pos:end="1011:65"><expr pos:start="1011:59" pos:end="1011:65"><name pos:start="1011:59" pos:end="1011:65">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1017:13" pos:end="1017:18">break;</break>

        <case pos:start="1019:9" pos:end="1019:25">case <expr pos:start="1019:14" pos:end="1019:24"><name pos:start="1019:14" pos:end="1019:24">NEON_3R_VFM</name></expr>:</case>

        <block pos:start="1021:9" pos:end="1045:9">{<block_content pos:start="1025:13" pos:end="1043:18">

            <comment type="block" pos:start="1023:13" pos:end="1023:48">/* VFMA, VFMS: fused multiply-add */</comment>

            <decl_stmt pos:start="1025:13" pos:end="1025:52"><decl pos:start="1025:13" pos:end="1025:51"><type pos:start="1025:13" pos:end="1025:20"><name pos:start="1025:13" pos:end="1025:20">TCGv_ptr</name></type> <name pos:start="1025:22" pos:end="1025:29">fpstatus</name> <init pos:start="1025:31" pos:end="1025:51">= <expr pos:start="1025:33" pos:end="1025:51"><call pos:start="1025:33" pos:end="1025:51"><name pos:start="1025:33" pos:end="1025:48">get_fpstatus_ptr</name><argument_list pos:start="1025:49" pos:end="1025:51">(<argument pos:start="1025:50" pos:end="1025:50"><expr pos:start="1025:50" pos:end="1025:50"><literal type="number" pos:start="1025:50" pos:end="1025:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1027:13" pos:end="1027:52"><decl pos:start="1027:13" pos:end="1027:51"><type pos:start="1027:13" pos:end="1027:20"><name pos:start="1027:13" pos:end="1027:20">TCGv_i32</name></type> <name pos:start="1027:22" pos:end="1027:25">tmp3</name> <init pos:start="1027:27" pos:end="1027:51">= <expr pos:start="1027:29" pos:end="1027:51"><call pos:start="1027:29" pos:end="1027:51"><name pos:start="1027:29" pos:end="1027:41">neon_load_reg</name><argument_list pos:start="1027:42" pos:end="1027:51">(<argument pos:start="1027:43" pos:end="1027:44"><expr pos:start="1027:43" pos:end="1027:44"><name pos:start="1027:43" pos:end="1027:44">rd</name></expr></argument>, <argument pos:start="1027:47" pos:end="1027:50"><expr pos:start="1027:47" pos:end="1027:50"><name pos:start="1027:47" pos:end="1027:50">pass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="1029:13" pos:end="1035:13"><if pos:start="1029:13" pos:end="1035:13">if <condition pos:start="1029:16" pos:end="1029:21">(<expr pos:start="1029:17" pos:end="1029:20"><name pos:start="1029:17" pos:end="1029:20">size</name></expr>)</condition> <block pos:start="1029:23" pos:end="1035:13">{<block_content pos:start="1033:17" pos:end="1033:46">

                <comment type="block" pos:start="1031:17" pos:end="1031:26">/* VFMS */</comment>

                <expr_stmt pos:start="1033:17" pos:end="1033:46"><expr pos:start="1033:17" pos:end="1033:45"><call pos:start="1033:17" pos:end="1033:45"><name pos:start="1033:17" pos:end="1033:35">gen_helper_vfp_negs</name><argument_list pos:start="1033:36" pos:end="1033:45">(<argument pos:start="1033:37" pos:end="1033:39"><expr pos:start="1033:37" pos:end="1033:39"><name pos:start="1033:37" pos:end="1033:39">tmp</name></expr></argument>, <argument pos:start="1033:42" pos:end="1033:44"><expr pos:start="1033:42" pos:end="1033:44"><name pos:start="1033:42" pos:end="1033:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1037:13" pos:end="1037:67"><expr pos:start="1037:13" pos:end="1037:66"><call pos:start="1037:13" pos:end="1037:66"><name pos:start="1037:13" pos:end="1037:34">gen_helper_vfp_muladds</name><argument_list pos:start="1037:35" pos:end="1037:66">(<argument pos:start="1037:36" pos:end="1037:38"><expr pos:start="1037:36" pos:end="1037:38"><name pos:start="1037:36" pos:end="1037:38">tmp</name></expr></argument>, <argument pos:start="1037:41" pos:end="1037:43"><expr pos:start="1037:41" pos:end="1037:43"><name pos:start="1037:41" pos:end="1037:43">tmp</name></expr></argument>, <argument pos:start="1037:46" pos:end="1037:49"><expr pos:start="1037:46" pos:end="1037:49"><name pos:start="1037:46" pos:end="1037:49">tmp2</name></expr></argument>, <argument pos:start="1037:52" pos:end="1037:55"><expr pos:start="1037:52" pos:end="1037:55"><name pos:start="1037:52" pos:end="1037:55">tmp3</name></expr></argument>, <argument pos:start="1037:58" pos:end="1037:65"><expr pos:start="1037:58" pos:end="1037:65"><name pos:start="1037:58" pos:end="1037:65">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1039:13" pos:end="1039:36"><expr pos:start="1039:13" pos:end="1039:35"><call pos:start="1039:13" pos:end="1039:35"><name pos:start="1039:13" pos:end="1039:29">tcg_temp_free_i32</name><argument_list pos:start="1039:30" pos:end="1039:35">(<argument pos:start="1039:31" pos:end="1039:34"><expr pos:start="1039:31" pos:end="1039:34"><name pos:start="1039:31" pos:end="1039:34">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:40"><expr pos:start="1041:13" pos:end="1041:39"><call pos:start="1041:13" pos:end="1041:39"><name pos:start="1041:13" pos:end="1041:29">tcg_temp_free_ptr</name><argument_list pos:start="1041:30" pos:end="1041:39">(<argument pos:start="1041:31" pos:end="1041:38"><expr pos:start="1041:31" pos:end="1041:38"><name pos:start="1041:31" pos:end="1041:38">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1043:13" pos:end="1043:18">break;</break>

        </block_content>}</block>

        <default pos:start="1047:9" pos:end="1047:16">default:</default>

            <expr_stmt pos:start="1049:13" pos:end="1049:20"><expr pos:start="1049:13" pos:end="1049:19"><call pos:start="1049:13" pos:end="1049:19"><name pos:start="1049:13" pos:end="1049:17">abort</name><argument_list pos:start="1049:18" pos:end="1049:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="1053:9" pos:end="1053:32"><expr pos:start="1053:9" pos:end="1053:31"><call pos:start="1053:9" pos:end="1053:31"><name pos:start="1053:9" pos:end="1053:25">tcg_temp_free_i32</name><argument_list pos:start="1053:26" pos:end="1053:31">(<argument pos:start="1053:27" pos:end="1053:30"><expr pos:start="1053:27" pos:end="1053:30"><name pos:start="1053:27" pos:end="1053:30">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="1057:9" pos:end="1061:77">/* Save the result.  For elementwise operations we can put it

           straight into the destination register.  For pairwise operations

           we have to be careful to avoid clobbering the source operands.  */</comment>

        <if_stmt pos:start="1063:9" pos:end="1071:9"><if pos:start="1063:9" pos:end="1067:9">if <condition pos:start="1063:12" pos:end="1063:33">(<expr pos:start="1063:13" pos:end="1063:32"><name pos:start="1063:13" pos:end="1063:20">pairwise</name> <operator pos:start="1063:22" pos:end="1063:23">&amp;&amp;</operator> <name pos:start="1063:25" pos:end="1063:26">rd</name> <operator pos:start="1063:28" pos:end="1063:29">==</operator> <name pos:start="1063:31" pos:end="1063:32">rm</name></expr>)</condition> <block pos:start="1063:35" pos:end="1067:9">{<block_content pos:start="1065:13" pos:end="1065:42">

            <expr_stmt pos:start="1065:13" pos:end="1065:42"><expr pos:start="1065:13" pos:end="1065:41"><call pos:start="1065:13" pos:end="1065:41"><name pos:start="1065:13" pos:end="1065:30">neon_store_scratch</name><argument_list pos:start="1065:31" pos:end="1065:41">(<argument pos:start="1065:32" pos:end="1065:35"><expr pos:start="1065:32" pos:end="1065:35"><name pos:start="1065:32" pos:end="1065:35">pass</name></expr></argument>, <argument pos:start="1065:38" pos:end="1065:40"><expr pos:start="1065:38" pos:end="1065:40"><name pos:start="1065:38" pos:end="1065:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1067:11" pos:end="1071:9">else <block pos:start="1067:16" pos:end="1071:9">{<block_content pos:start="1069:13" pos:end="1069:42">

            <expr_stmt pos:start="1069:13" pos:end="1069:42"><expr pos:start="1069:13" pos:end="1069:41"><call pos:start="1069:13" pos:end="1069:41"><name pos:start="1069:13" pos:end="1069:26">neon_store_reg</name><argument_list pos:start="1069:27" pos:end="1069:41">(<argument pos:start="1069:28" pos:end="1069:29"><expr pos:start="1069:28" pos:end="1069:29"><name pos:start="1069:28" pos:end="1069:29">rd</name></expr></argument>, <argument pos:start="1069:32" pos:end="1069:35"><expr pos:start="1069:32" pos:end="1069:35"><name pos:start="1069:32" pos:end="1069:35">pass</name></expr></argument>, <argument pos:start="1069:38" pos:end="1069:40"><expr pos:start="1069:38" pos:end="1069:40"><name pos:start="1069:38" pos:end="1069:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        </block_content>}</block></for> <comment type="block" pos:start="1075:11" pos:end="1075:24">/* for pass */</comment>

        <if_stmt pos:start="1077:9" pos:end="1087:9"><if pos:start="1077:9" pos:end="1087:9">if <condition pos:start="1077:12" pos:end="1077:33">(<expr pos:start="1077:13" pos:end="1077:32"><name pos:start="1077:13" pos:end="1077:20">pairwise</name> <operator pos:start="1077:22" pos:end="1077:23">&amp;&amp;</operator> <name pos:start="1077:25" pos:end="1077:26">rd</name> <operator pos:start="1077:28" pos:end="1077:29">==</operator> <name pos:start="1077:31" pos:end="1077:32">rm</name></expr>)</condition> <block pos:start="1077:35" pos:end="1087:9">{<block_content pos:start="1079:13" pos:end="1085:13">

            <for pos:start="1079:13" pos:end="1085:13">for <control pos:start="1079:17" pos:end="1079:54">(<init pos:start="1079:18" pos:end="1079:26"><expr pos:start="1079:18" pos:end="1079:25"><name pos:start="1079:18" pos:end="1079:21">pass</name> <operator pos:start="1079:23" pos:end="1079:23">=</operator> <literal type="number" pos:start="1079:25" pos:end="1079:25">0</literal></expr>;</init> <condition pos:start="1079:28" pos:end="1079:46"><expr pos:start="1079:28" pos:end="1079:45"><name pos:start="1079:28" pos:end="1079:31">pass</name> <operator pos:start="1079:33" pos:end="1079:33">&lt;</operator> <operator pos:start="1079:35" pos:end="1079:35">(</operator><ternary pos:start="1079:36" pos:end="1079:44"><condition pos:start="1079:36" pos:end="1079:38"><expr pos:start="1079:36" pos:end="1079:36"><name pos:start="1079:36" pos:end="1079:36">q</name></expr> ?</condition><then pos:start="1079:40" pos:end="1079:40"> <expr pos:start="1079:40" pos:end="1079:40"><literal type="number" pos:start="1079:40" pos:end="1079:40">4</literal></expr> </then><else pos:start="1079:42" pos:end="1079:44">: <expr pos:start="1079:44" pos:end="1079:44"><literal type="number" pos:start="1079:44" pos:end="1079:44">2</literal></expr></else></ternary><operator pos:start="1079:45" pos:end="1079:45">)</operator></expr>;</condition> <incr pos:start="1079:48" pos:end="1079:53"><expr pos:start="1079:48" pos:end="1079:53"><name pos:start="1079:48" pos:end="1079:51">pass</name><operator pos:start="1079:52" pos:end="1079:53">++</operator></expr></incr>)</control> <block pos:start="1079:56" pos:end="1085:13">{<block_content pos:start="1081:17" pos:end="1083:46">

                <expr_stmt pos:start="1081:17" pos:end="1081:46"><expr pos:start="1081:17" pos:end="1081:45"><name pos:start="1081:17" pos:end="1081:19">tmp</name> <operator pos:start="1081:21" pos:end="1081:21">=</operator> <call pos:start="1081:23" pos:end="1081:45"><name pos:start="1081:23" pos:end="1081:39">neon_load_scratch</name><argument_list pos:start="1081:40" pos:end="1081:45">(<argument pos:start="1081:41" pos:end="1081:44"><expr pos:start="1081:41" pos:end="1081:44"><name pos:start="1081:41" pos:end="1081:44">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1083:17" pos:end="1083:46"><expr pos:start="1083:17" pos:end="1083:45"><call pos:start="1083:17" pos:end="1083:45"><name pos:start="1083:17" pos:end="1083:30">neon_store_reg</name><argument_list pos:start="1083:31" pos:end="1083:45">(<argument pos:start="1083:32" pos:end="1083:33"><expr pos:start="1083:32" pos:end="1083:33"><name pos:start="1083:32" pos:end="1083:33">rd</name></expr></argument>, <argument pos:start="1083:36" pos:end="1083:39"><expr pos:start="1083:36" pos:end="1083:39"><name pos:start="1083:36" pos:end="1083:39">pass</name></expr></argument>, <argument pos:start="1083:42" pos:end="1083:44"><expr pos:start="1083:42" pos:end="1083:44"><name pos:start="1083:42" pos:end="1083:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1089:9" pos:end="1089:54">/* End of 3 register same size operations.  */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="1091:7" pos:end="1953:5">else if <condition pos:start="1091:15" pos:end="1091:31">(<expr pos:start="1091:16" pos:end="1091:30"><name pos:start="1091:16" pos:end="1091:19">insn</name> <operator pos:start="1091:21" pos:end="1091:21">&amp;</operator> <operator pos:start="1091:23" pos:end="1091:23">(</operator><literal type="number" pos:start="1091:24" pos:end="1091:24">1</literal> <operator pos:start="1091:26" pos:end="1091:27">&lt;&lt;</operator> <literal type="number" pos:start="1091:29" pos:end="1091:29">4</literal><operator pos:start="1091:30" pos:end="1091:30">)</operator></expr>)</condition> <block pos:start="1091:33" pos:end="1953:5">{<block_content pos:start="1093:9" pos:end="1951:9">

        <if_stmt pos:start="1093:9" pos:end="1951:9"><if pos:start="1093:9" pos:end="1785:9">if <condition pos:start="1093:12" pos:end="1093:37">(<expr pos:start="1093:13" pos:end="1093:36"><operator pos:start="1093:13" pos:end="1093:13">(</operator><name pos:start="1093:14" pos:end="1093:17">insn</name> <operator pos:start="1093:19" pos:end="1093:19">&amp;</operator> <literal type="number" pos:start="1093:21" pos:end="1093:30">0x00380080</literal><operator pos:start="1093:31" pos:end="1093:31">)</operator> <operator pos:start="1093:33" pos:end="1093:34">!=</operator> <literal type="number" pos:start="1093:36" pos:end="1093:36">0</literal></expr>)</condition> <block pos:start="1093:39" pos:end="1785:9">{<block_content pos:start="1097:13" pos:end="1783:13">

            <comment type="block" pos:start="1095:13" pos:end="1095:43">/* Two registers and shift.  */</comment>

            <expr_stmt pos:start="1097:13" pos:end="1097:35"><expr pos:start="1097:13" pos:end="1097:34"><name pos:start="1097:13" pos:end="1097:14">op</name> <operator pos:start="1097:16" pos:end="1097:16">=</operator> <operator pos:start="1097:18" pos:end="1097:18">(</operator><name pos:start="1097:19" pos:end="1097:22">insn</name> <operator pos:start="1097:24" pos:end="1097:25">&gt;&gt;</operator> <literal type="number" pos:start="1097:27" pos:end="1097:27">8</literal><operator pos:start="1097:28" pos:end="1097:28">)</operator> <operator pos:start="1097:30" pos:end="1097:30">&amp;</operator> <literal type="number" pos:start="1097:32" pos:end="1097:34">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1099:13" pos:end="1119:13"><if pos:start="1099:13" pos:end="1111:13">if <condition pos:start="1099:16" pos:end="1099:32">(<expr pos:start="1099:17" pos:end="1099:31"><name pos:start="1099:17" pos:end="1099:20">insn</name> <operator pos:start="1099:22" pos:end="1099:22">&amp;</operator> <operator pos:start="1099:24" pos:end="1099:24">(</operator><literal type="number" pos:start="1099:25" pos:end="1099:25">1</literal> <operator pos:start="1099:27" pos:end="1099:28">&lt;&lt;</operator> <literal type="number" pos:start="1099:30" pos:end="1099:30">7</literal><operator pos:start="1099:31" pos:end="1099:31">)</operator></expr>)</condition> <block pos:start="1099:34" pos:end="1111:13">{<block_content pos:start="1103:17" pos:end="1109:25">

                <comment type="block" pos:start="1101:17" pos:end="1101:35">/* 64-bit shift. */</comment>

                <if_stmt pos:start="1103:17" pos:end="1107:17"><if pos:start="1103:17" pos:end="1107:17">if <condition pos:start="1103:20" pos:end="1103:27">(<expr pos:start="1103:21" pos:end="1103:26"><name pos:start="1103:21" pos:end="1103:22">op</name> <operator pos:start="1103:24" pos:end="1103:24">&gt;</operator> <literal type="number" pos:start="1103:26" pos:end="1103:26">7</literal></expr>)</condition> <block pos:start="1103:29" pos:end="1107:17">{<block_content pos:start="1105:21" pos:end="1105:29">

                    <return pos:start="1105:21" pos:end="1105:29">return <expr pos:start="1105:28" pos:end="1105:28"><literal type="number" pos:start="1105:28" pos:end="1105:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1109:17" pos:end="1109:25"><expr pos:start="1109:17" pos:end="1109:24"><name pos:start="1109:17" pos:end="1109:20">size</name> <operator pos:start="1109:22" pos:end="1109:22">=</operator> <literal type="number" pos:start="1109:24" pos:end="1109:24">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1111:15" pos:end="1119:13">else <block pos:start="1111:20" pos:end="1119:13">{<block_content pos:start="1113:17" pos:end="1117:27">

                <expr_stmt pos:start="1113:17" pos:end="1113:25"><expr pos:start="1113:17" pos:end="1113:24"><name pos:start="1113:17" pos:end="1113:20">size</name> <operator pos:start="1113:22" pos:end="1113:22">=</operator> <literal type="number" pos:start="1113:24" pos:end="1113:24">2</literal></expr>;</expr_stmt>

                <while pos:start="1115:17" pos:end="1117:27">while <condition pos:start="1115:23" pos:end="1115:56">(<expr pos:start="1115:24" pos:end="1115:55"><operator pos:start="1115:24" pos:end="1115:24">(</operator><name pos:start="1115:25" pos:end="1115:28">insn</name> <operator pos:start="1115:30" pos:end="1115:30">&amp;</operator> <operator pos:start="1115:32" pos:end="1115:32">(</operator><literal type="number" pos:start="1115:33" pos:end="1115:33">1</literal> <operator pos:start="1115:35" pos:end="1115:36">&lt;&lt;</operator> <operator pos:start="1115:38" pos:end="1115:38">(</operator><name pos:start="1115:39" pos:end="1115:42">size</name> <operator pos:start="1115:44" pos:end="1115:44">+</operator> <literal type="number" pos:start="1115:46" pos:end="1115:47">19</literal><operator pos:start="1115:48" pos:end="1115:48">)</operator><operator pos:start="1115:49" pos:end="1115:49">)</operator><operator pos:start="1115:50" pos:end="1115:50">)</operator> <operator pos:start="1115:52" pos:end="1115:53">==</operator> <literal type="number" pos:start="1115:55" pos:end="1115:55">0</literal></expr>)</condition><block type="pseudo" pos:start="1117:21" pos:end="1117:27"><block_content pos:start="1117:21" pos:end="1117:27">

                    <expr_stmt pos:start="1117:21" pos:end="1117:27"><expr pos:start="1117:21" pos:end="1117:26"><name pos:start="1117:21" pos:end="1117:24">size</name><operator pos:start="1117:25" pos:end="1117:26">--</operator></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1121:13" pos:end="1121:59"><expr pos:start="1121:13" pos:end="1121:58"><name pos:start="1121:13" pos:end="1121:17">shift</name> <operator pos:start="1121:19" pos:end="1121:19">=</operator> <operator pos:start="1121:21" pos:end="1121:21">(</operator><name pos:start="1121:22" pos:end="1121:25">insn</name> <operator pos:start="1121:27" pos:end="1121:28">&gt;&gt;</operator> <literal type="number" pos:start="1121:30" pos:end="1121:31">16</literal><operator pos:start="1121:32" pos:end="1121:32">)</operator> <operator pos:start="1121:34" pos:end="1121:34">&amp;</operator> <operator pos:start="1121:36" pos:end="1121:36">(</operator><operator pos:start="1121:37" pos:end="1121:37">(</operator><literal type="number" pos:start="1121:38" pos:end="1121:38">1</literal> <operator pos:start="1121:40" pos:end="1121:41">&lt;&lt;</operator> <operator pos:start="1121:43" pos:end="1121:43">(</operator><literal type="number" pos:start="1121:44" pos:end="1121:46">3</literal> <operator pos:start="1121:46" pos:end="1121:46">+</operator> <name pos:start="1121:48" pos:end="1121:51">size</name><operator pos:start="1121:52" pos:end="1121:52">)</operator><operator pos:start="1121:53" pos:end="1121:53">)</operator> <operator pos:start="1121:55" pos:end="1121:55">-</operator> <literal type="number" pos:start="1121:57" pos:end="1121:57">1</literal><operator pos:start="1121:58" pos:end="1121:58">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="1123:13" pos:end="1125:68">/* To avoid excessive duplication of ops we implement shift

               by immediate using the variable shift operations.  */</comment>

            <if_stmt pos:start="1127:13" pos:end="1783:13"><if pos:start="1127:13" pos:end="1499:13">if <condition pos:start="1127:16" pos:end="1127:23">(<expr pos:start="1127:17" pos:end="1127:22"><name pos:start="1127:17" pos:end="1127:18">op</name> <operator pos:start="1127:20" pos:end="1127:20">&lt;</operator> <literal type="number" pos:start="1127:22" pos:end="1127:22">8</literal></expr>)</condition> <block pos:start="1127:25" pos:end="1499:13">{<block_content pos:start="1133:17" pos:end="1497:17">

                <comment type="block" pos:start="1129:17" pos:end="1131:75">/* Shift by immediate:

                   VSHR, VSRA, VRSHR, VRSRA, VSRI, VSHL, VQSHL, VQSHLU.  */</comment>

                <if_stmt pos:start="1133:17" pos:end="1137:17"><if pos:start="1133:17" pos:end="1137:17">if <condition pos:start="1133:20" pos:end="1133:41">(<expr pos:start="1133:21" pos:end="1133:40"><name pos:start="1133:21" pos:end="1133:21">q</name> <operator pos:start="1133:23" pos:end="1133:24">&amp;&amp;</operator> <operator pos:start="1133:26" pos:end="1133:26">(</operator><operator pos:start="1133:27" pos:end="1133:27">(</operator><name pos:start="1133:28" pos:end="1133:29">rd</name> <operator pos:start="1133:31" pos:end="1133:31">|</operator> <name pos:start="1133:33" pos:end="1133:34">rm</name><operator pos:start="1133:35" pos:end="1133:35">)</operator> <operator pos:start="1133:37" pos:end="1133:37">&amp;</operator> <literal type="number" pos:start="1133:39" pos:end="1133:39">1</literal><operator pos:start="1133:40" pos:end="1133:40">)</operator></expr>)</condition> <block pos:start="1133:43" pos:end="1137:17">{<block_content pos:start="1135:21" pos:end="1135:29">

                    <return pos:start="1135:21" pos:end="1135:29">return <expr pos:start="1135:28" pos:end="1135:28"><literal type="number" pos:start="1135:28" pos:end="1135:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1139:17" pos:end="1143:17"><if pos:start="1139:17" pos:end="1143:17">if <condition pos:start="1139:20" pos:end="1139:47">(<expr pos:start="1139:21" pos:end="1139:46"><operator pos:start="1139:21" pos:end="1139:21">!</operator><name pos:start="1139:22" pos:end="1139:22">u</name> <operator pos:start="1139:24" pos:end="1139:25">&amp;&amp;</operator> <operator pos:start="1139:27" pos:end="1139:27">(</operator><name pos:start="1139:28" pos:end="1139:29">op</name> <operator pos:start="1139:31" pos:end="1139:32">==</operator> <literal type="number" pos:start="1139:34" pos:end="1139:34">4</literal> <operator pos:start="1139:36" pos:end="1139:37">||</operator> <name pos:start="1139:39" pos:end="1139:40">op</name> <operator pos:start="1139:42" pos:end="1139:43">==</operator> <literal type="number" pos:start="1139:45" pos:end="1139:45">6</literal><operator pos:start="1139:46" pos:end="1139:46">)</operator></expr>)</condition> <block pos:start="1139:49" pos:end="1143:17">{<block_content pos:start="1141:21" pos:end="1141:29">

                    <return pos:start="1141:21" pos:end="1141:29">return <expr pos:start="1141:28" pos:end="1141:28"><literal type="number" pos:start="1141:28" pos:end="1141:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1145:17" pos:end="1147:44">/* Right shifts are encoded as N - shift, where N is the

                   element size in bits.  */</comment>

                <if_stmt pos:start="1149:17" pos:end="1151:54"><if pos:start="1149:17" pos:end="1151:54">if <condition pos:start="1149:20" pos:end="1149:28">(<expr pos:start="1149:21" pos:end="1149:27"><name pos:start="1149:21" pos:end="1149:22">op</name> <operator pos:start="1149:24" pos:end="1149:25">&lt;=</operator> <literal type="number" pos:start="1149:27" pos:end="1149:27">4</literal></expr>)</condition><block type="pseudo" pos:start="1151:21" pos:end="1151:54"><block_content pos:start="1151:21" pos:end="1151:54">

                    <expr_stmt pos:start="1151:21" pos:end="1151:54"><expr pos:start="1151:21" pos:end="1151:53"><name pos:start="1151:21" pos:end="1151:25">shift</name> <operator pos:start="1151:27" pos:end="1151:27">=</operator> <name pos:start="1151:29" pos:end="1151:33">shift</name> <operator pos:start="1151:35" pos:end="1151:35">-</operator> <operator pos:start="1151:37" pos:end="1151:37">(</operator><literal type="number" pos:start="1151:38" pos:end="1151:38">1</literal> <operator pos:start="1151:40" pos:end="1151:41">&lt;&lt;</operator> <operator pos:start="1151:43" pos:end="1151:43">(</operator><name pos:start="1151:44" pos:end="1151:47">size</name> <operator pos:start="1151:49" pos:end="1151:49">+</operator> <literal type="number" pos:start="1151:51" pos:end="1151:51">3</literal><operator pos:start="1151:52" pos:end="1151:52">)</operator><operator pos:start="1151:53" pos:end="1151:53">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="1153:17" pos:end="1161:17"><if pos:start="1153:17" pos:end="1157:17">if <condition pos:start="1153:20" pos:end="1153:30">(<expr pos:start="1153:21" pos:end="1153:29"><name pos:start="1153:21" pos:end="1153:24">size</name> <operator pos:start="1153:26" pos:end="1153:27">==</operator> <literal type="number" pos:start="1153:29" pos:end="1153:29">3</literal></expr>)</condition> <block pos:start="1153:32" pos:end="1157:17">{<block_content pos:start="1155:21" pos:end="1155:34">

                    <expr_stmt pos:start="1155:21" pos:end="1155:34"><expr pos:start="1155:21" pos:end="1155:33"><name pos:start="1155:21" pos:end="1155:25">count</name> <operator pos:start="1155:27" pos:end="1155:27">=</operator> <name pos:start="1155:29" pos:end="1155:29">q</name> <operator pos:start="1155:31" pos:end="1155:31">+</operator> <literal type="number" pos:start="1155:33" pos:end="1155:33">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1157:19" pos:end="1161:17">else <block pos:start="1157:24" pos:end="1161:17">{<block_content pos:start="1159:21" pos:end="1159:37">

                    <expr_stmt pos:start="1159:21" pos:end="1159:37"><expr pos:start="1159:21" pos:end="1159:36"><name pos:start="1159:21" pos:end="1159:25">count</name> <operator pos:start="1159:27" pos:end="1159:27">=</operator> <ternary pos:start="1159:29" pos:end="1159:36"><condition pos:start="1159:29" pos:end="1159:31"><expr pos:start="1159:29" pos:end="1159:29"><name pos:start="1159:29" pos:end="1159:29">q</name></expr> ?</condition><then pos:start="1159:33" pos:end="1159:33"> <expr pos:start="1159:33" pos:end="1159:33"><literal type="number" pos:start="1159:33" pos:end="1159:33">4</literal></expr></then><else pos:start="1159:34" pos:end="1159:36">: <expr pos:start="1159:36" pos:end="1159:36"><literal type="number" pos:start="1159:36" pos:end="1159:36">2</literal></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <switch pos:start="1163:17" pos:end="1195:17">switch <condition pos:start="1163:24" pos:end="1163:29">(<expr pos:start="1163:25" pos:end="1163:28"><name pos:start="1163:25" pos:end="1163:28">size</name></expr>)</condition> <block pos:start="1163:31" pos:end="1195:17">{<block_content pos:start="1165:17" pos:end="1193:28">

                <case pos:start="1165:17" pos:end="1165:23">case <expr pos:start="1165:22" pos:end="1165:22"><literal type="number" pos:start="1165:22" pos:end="1165:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="1167:21" pos:end="1167:42"><expr pos:start="1167:21" pos:end="1167:41"><name pos:start="1167:21" pos:end="1167:23">imm</name> <operator pos:start="1167:25" pos:end="1167:25">=</operator> <operator pos:start="1167:27" pos:end="1167:27">(</operator><name pos:start="1167:28" pos:end="1167:34">uint8_t</name><operator pos:start="1167:35" pos:end="1167:35">)</operator> <name pos:start="1167:37" pos:end="1167:41">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1169:21" pos:end="1169:36"><expr pos:start="1169:21" pos:end="1169:35"><name pos:start="1169:21" pos:end="1169:23">imm</name> <operator pos:start="1169:25" pos:end="1169:26">|=</operator> <name pos:start="1169:28" pos:end="1169:30">imm</name> <operator pos:start="1169:32" pos:end="1169:33">&lt;&lt;</operator> <literal type="number" pos:start="1169:35" pos:end="1169:35">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1171:21" pos:end="1171:37"><expr pos:start="1171:21" pos:end="1171:36"><name pos:start="1171:21" pos:end="1171:23">imm</name> <operator pos:start="1171:25" pos:end="1171:26">|=</operator> <name pos:start="1171:28" pos:end="1171:30">imm</name> <operator pos:start="1171:32" pos:end="1171:33">&lt;&lt;</operator> <literal type="number" pos:start="1171:35" pos:end="1171:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="1173:21" pos:end="1173:26">break;</break>

                <case pos:start="1175:17" pos:end="1175:23">case <expr pos:start="1175:22" pos:end="1175:22"><literal type="number" pos:start="1175:22" pos:end="1175:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="1177:21" pos:end="1177:43"><expr pos:start="1177:21" pos:end="1177:42"><name pos:start="1177:21" pos:end="1177:23">imm</name> <operator pos:start="1177:25" pos:end="1177:25">=</operator> <operator pos:start="1177:27" pos:end="1177:27">(</operator><name pos:start="1177:28" pos:end="1177:35">uint16_t</name><operator pos:start="1177:36" pos:end="1177:36">)</operator> <name pos:start="1177:38" pos:end="1177:42">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1179:21" pos:end="1179:37"><expr pos:start="1179:21" pos:end="1179:36"><name pos:start="1179:21" pos:end="1179:23">imm</name> <operator pos:start="1179:25" pos:end="1179:26">|=</operator> <name pos:start="1179:28" pos:end="1179:30">imm</name> <operator pos:start="1179:32" pos:end="1179:33">&lt;&lt;</operator> <literal type="number" pos:start="1179:35" pos:end="1179:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="1181:21" pos:end="1181:26">break;</break>

                <case pos:start="1183:17" pos:end="1183:23">case <expr pos:start="1183:22" pos:end="1183:22"><literal type="number" pos:start="1183:22" pos:end="1183:22">2</literal></expr>:</case>

                <case pos:start="1185:17" pos:end="1185:23">case <expr pos:start="1185:22" pos:end="1185:22"><literal type="number" pos:start="1185:22" pos:end="1185:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="1187:21" pos:end="1187:32"><expr pos:start="1187:21" pos:end="1187:31"><name pos:start="1187:21" pos:end="1187:23">imm</name> <operator pos:start="1187:25" pos:end="1187:25">=</operator> <name pos:start="1187:27" pos:end="1187:31">shift</name></expr>;</expr_stmt>

                    <break pos:start="1189:21" pos:end="1189:26">break;</break>

                <default pos:start="1191:17" pos:end="1191:24">default:</default>

                    <expr_stmt pos:start="1193:21" pos:end="1193:28"><expr pos:start="1193:21" pos:end="1193:27"><call pos:start="1193:21" pos:end="1193:27"><name pos:start="1193:21" pos:end="1193:25">abort</name><argument_list pos:start="1193:26" pos:end="1193:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>



                <for pos:start="1199:17" pos:end="1497:17">for <control pos:start="1199:21" pos:end="1199:52">(<init pos:start="1199:22" pos:end="1199:30"><expr pos:start="1199:22" pos:end="1199:29"><name pos:start="1199:22" pos:end="1199:25">pass</name> <operator pos:start="1199:27" pos:end="1199:27">=</operator> <literal type="number" pos:start="1199:29" pos:end="1199:29">0</literal></expr>;</init> <condition pos:start="1199:32" pos:end="1199:44"><expr pos:start="1199:32" pos:end="1199:43"><name pos:start="1199:32" pos:end="1199:35">pass</name> <operator pos:start="1199:37" pos:end="1199:37">&lt;</operator> <name pos:start="1199:39" pos:end="1199:43">count</name></expr>;</condition> <incr pos:start="1199:46" pos:end="1199:51"><expr pos:start="1199:46" pos:end="1199:51"><name pos:start="1199:46" pos:end="1199:49">pass</name><operator pos:start="1199:50" pos:end="1199:51">++</operator></expr></incr>)</control> <block pos:start="1199:54" pos:end="1497:17">{<block_content pos:start="1201:21" pos:end="1495:21">

                    <if_stmt pos:start="1201:21" pos:end="1495:21"><if pos:start="1201:21" pos:end="1315:21">if <condition pos:start="1201:24" pos:end="1201:34">(<expr pos:start="1201:25" pos:end="1201:33"><name pos:start="1201:25" pos:end="1201:28">size</name> <operator pos:start="1201:30" pos:end="1201:31">==</operator> <literal type="number" pos:start="1201:33" pos:end="1201:33">3</literal></expr>)</condition> <block pos:start="1201:36" pos:end="1315:21">{<block_content pos:start="1203:25" pos:end="1313:60">

                        <expr_stmt pos:start="1203:25" pos:end="1203:59"><expr pos:start="1203:25" pos:end="1203:58"><call pos:start="1203:25" pos:end="1203:58"><name pos:start="1203:25" pos:end="1203:39">neon_load_reg64</name><argument_list pos:start="1203:40" pos:end="1203:58">(<argument pos:start="1203:41" pos:end="1203:46"><expr pos:start="1203:41" pos:end="1203:46"><name pos:start="1203:41" pos:end="1203:46">cpu_V0</name></expr></argument>, <argument pos:start="1203:49" pos:end="1203:57"><expr pos:start="1203:49" pos:end="1203:57"><name pos:start="1203:49" pos:end="1203:50">rm</name> <operator pos:start="1203:52" pos:end="1203:52">+</operator> <name pos:start="1203:54" pos:end="1203:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1205:25" pos:end="1205:54"><expr pos:start="1205:25" pos:end="1205:53"><call pos:start="1205:25" pos:end="1205:53"><name pos:start="1205:25" pos:end="1205:40">tcg_gen_movi_i64</name><argument_list pos:start="1205:41" pos:end="1205:53">(<argument pos:start="1205:42" pos:end="1205:47"><expr pos:start="1205:42" pos:end="1205:47"><name pos:start="1205:42" pos:end="1205:47">cpu_V1</name></expr></argument>, <argument pos:start="1205:50" pos:end="1205:52"><expr pos:start="1205:50" pos:end="1205:52"><name pos:start="1205:50" pos:end="1205:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="1207:25" pos:end="1271:25">switch <condition pos:start="1207:32" pos:end="1207:35">(<expr pos:start="1207:33" pos:end="1207:34"><name pos:start="1207:33" pos:end="1207:34">op</name></expr>)</condition> <block pos:start="1207:37" pos:end="1271:25">{<block_content pos:start="1209:25" pos:end="1269:34">

                        <case pos:start="1209:25" pos:end="1209:31">case <expr pos:start="1209:30" pos:end="1209:30"><literal type="number" pos:start="1209:30" pos:end="1209:30">0</literal></expr>:</case>  <comment type="block" pos:start="1209:34" pos:end="1209:43">/* VSHR */</comment>

                        <case pos:start="1211:25" pos:end="1211:31">case <expr pos:start="1211:30" pos:end="1211:30"><literal type="number" pos:start="1211:30" pos:end="1211:30">1</literal></expr>:</case>  <comment type="block" pos:start="1211:34" pos:end="1211:43">/* VSRA */</comment>

                            <if_stmt pos:start="1213:29" pos:end="1219:80"><if pos:start="1213:29" pos:end="1215:80">if <condition pos:start="1213:32" pos:end="1213:34">(<expr pos:start="1213:33" pos:end="1213:33"><name pos:start="1213:33" pos:end="1213:33">u</name></expr>)</condition><block type="pseudo" pos:start="1215:33" pos:end="1215:80"><block_content pos:start="1215:33" pos:end="1215:80">

                                <expr_stmt pos:start="1215:33" pos:end="1215:80"><expr pos:start="1215:33" pos:end="1215:79"><call pos:start="1215:33" pos:end="1215:79"><name pos:start="1215:33" pos:end="1215:55">gen_helper_neon_shl_u64</name><argument_list pos:start="1215:56" pos:end="1215:79">(<argument pos:start="1215:57" pos:end="1215:62"><expr pos:start="1215:57" pos:end="1215:62"><name pos:start="1215:57" pos:end="1215:62">cpu_V0</name></expr></argument>, <argument pos:start="1215:65" pos:end="1215:70"><expr pos:start="1215:65" pos:end="1215:70"><name pos:start="1215:65" pos:end="1215:70">cpu_V0</name></expr></argument>, <argument pos:start="1215:73" pos:end="1215:78"><expr pos:start="1215:73" pos:end="1215:78"><name pos:start="1215:73" pos:end="1215:78">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1217:29" pos:end="1219:80">else<block type="pseudo" pos:start="1219:33" pos:end="1219:80"><block_content pos:start="1219:33" pos:end="1219:80">

                                <expr_stmt pos:start="1219:33" pos:end="1219:80"><expr pos:start="1219:33" pos:end="1219:79"><call pos:start="1219:33" pos:end="1219:79"><name pos:start="1219:33" pos:end="1219:55">gen_helper_neon_shl_s64</name><argument_list pos:start="1219:56" pos:end="1219:79">(<argument pos:start="1219:57" pos:end="1219:62"><expr pos:start="1219:57" pos:end="1219:62"><name pos:start="1219:57" pos:end="1219:62">cpu_V0</name></expr></argument>, <argument pos:start="1219:65" pos:end="1219:70"><expr pos:start="1219:65" pos:end="1219:70"><name pos:start="1219:65" pos:end="1219:70">cpu_V0</name></expr></argument>, <argument pos:start="1219:73" pos:end="1219:78"><expr pos:start="1219:73" pos:end="1219:78"><name pos:start="1219:73" pos:end="1219:78">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="1221:29" pos:end="1221:34">break;</break>

                        <case pos:start="1223:25" pos:end="1223:31">case <expr pos:start="1223:30" pos:end="1223:30"><literal type="number" pos:start="1223:30" pos:end="1223:30">2</literal></expr>:</case> <comment type="block" pos:start="1223:33" pos:end="1223:43">/* VRSHR */</comment>

                        <case pos:start="1225:25" pos:end="1225:31">case <expr pos:start="1225:30" pos:end="1225:30"><literal type="number" pos:start="1225:30" pos:end="1225:30">3</literal></expr>:</case> <comment type="block" pos:start="1225:33" pos:end="1225:43">/* VRSRA */</comment>

                            <if_stmt pos:start="1227:29" pos:end="1233:81"><if pos:start="1227:29" pos:end="1229:81">if <condition pos:start="1227:32" pos:end="1227:34">(<expr pos:start="1227:33" pos:end="1227:33"><name pos:start="1227:33" pos:end="1227:33">u</name></expr>)</condition><block type="pseudo" pos:start="1229:33" pos:end="1229:81"><block_content pos:start="1229:33" pos:end="1229:81">

                                <expr_stmt pos:start="1229:33" pos:end="1229:81"><expr pos:start="1229:33" pos:end="1229:80"><call pos:start="1229:33" pos:end="1229:80"><name pos:start="1229:33" pos:end="1229:56">gen_helper_neon_rshl_u64</name><argument_list pos:start="1229:57" pos:end="1229:80">(<argument pos:start="1229:58" pos:end="1229:63"><expr pos:start="1229:58" pos:end="1229:63"><name pos:start="1229:58" pos:end="1229:63">cpu_V0</name></expr></argument>, <argument pos:start="1229:66" pos:end="1229:71"><expr pos:start="1229:66" pos:end="1229:71"><name pos:start="1229:66" pos:end="1229:71">cpu_V0</name></expr></argument>, <argument pos:start="1229:74" pos:end="1229:79"><expr pos:start="1229:74" pos:end="1229:79"><name pos:start="1229:74" pos:end="1229:79">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1231:29" pos:end="1233:81">else<block type="pseudo" pos:start="1233:33" pos:end="1233:81"><block_content pos:start="1233:33" pos:end="1233:81">

                                <expr_stmt pos:start="1233:33" pos:end="1233:81"><expr pos:start="1233:33" pos:end="1233:80"><call pos:start="1233:33" pos:end="1233:80"><name pos:start="1233:33" pos:end="1233:56">gen_helper_neon_rshl_s64</name><argument_list pos:start="1233:57" pos:end="1233:80">(<argument pos:start="1233:58" pos:end="1233:63"><expr pos:start="1233:58" pos:end="1233:63"><name pos:start="1233:58" pos:end="1233:63">cpu_V0</name></expr></argument>, <argument pos:start="1233:66" pos:end="1233:71"><expr pos:start="1233:66" pos:end="1233:71"><name pos:start="1233:66" pos:end="1233:71">cpu_V0</name></expr></argument>, <argument pos:start="1233:74" pos:end="1233:79"><expr pos:start="1233:74" pos:end="1233:79"><name pos:start="1233:74" pos:end="1233:79">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="1235:29" pos:end="1235:34">break;</break>

                        <case pos:start="1237:25" pos:end="1237:31">case <expr pos:start="1237:30" pos:end="1237:30"><literal type="number" pos:start="1237:30" pos:end="1237:30">4</literal></expr>:</case> <comment type="block" pos:start="1237:33" pos:end="1237:42">/* VSRI */</comment>

                        <case pos:start="1239:25" pos:end="1239:31">case <expr pos:start="1239:30" pos:end="1239:30"><literal type="number" pos:start="1239:30" pos:end="1239:30">5</literal></expr>:</case> <comment type="block" pos:start="1239:33" pos:end="1239:48">/* VSHL, VSLI */</comment>

                            <expr_stmt pos:start="1241:29" pos:end="1241:76"><expr pos:start="1241:29" pos:end="1241:75"><call pos:start="1241:29" pos:end="1241:75"><name pos:start="1241:29" pos:end="1241:51">gen_helper_neon_shl_u64</name><argument_list pos:start="1241:52" pos:end="1241:75">(<argument pos:start="1241:53" pos:end="1241:58"><expr pos:start="1241:53" pos:end="1241:58"><name pos:start="1241:53" pos:end="1241:58">cpu_V0</name></expr></argument>, <argument pos:start="1241:61" pos:end="1241:66"><expr pos:start="1241:61" pos:end="1241:66"><name pos:start="1241:61" pos:end="1241:66">cpu_V0</name></expr></argument>, <argument pos:start="1241:69" pos:end="1241:74"><expr pos:start="1241:69" pos:end="1241:74"><name pos:start="1241:69" pos:end="1241:74">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1243:29" pos:end="1243:34">break;</break>

                        <case pos:start="1245:25" pos:end="1245:31">case <expr pos:start="1245:30" pos:end="1245:30"><literal type="number" pos:start="1245:30" pos:end="1245:30">6</literal></expr>:</case> <comment type="block" pos:start="1245:33" pos:end="1245:44">/* VQSHLU */</comment>

                            <expr_stmt pos:start="1247:29" pos:end="1249:70"><expr pos:start="1247:29" pos:end="1249:69"><call pos:start="1247:29" pos:end="1249:69"><name pos:start="1247:29" pos:end="1247:53">gen_helper_neon_qshlu_s64</name><argument_list pos:start="1247:54" pos:end="1249:69">(<argument pos:start="1247:55" pos:end="1247:60"><expr pos:start="1247:55" pos:end="1247:60"><name pos:start="1247:55" pos:end="1247:60">cpu_V0</name></expr></argument>, <argument pos:start="1247:63" pos:end="1247:69"><expr pos:start="1247:63" pos:end="1247:69"><name pos:start="1247:63" pos:end="1247:69">cpu_env</name></expr></argument>,

                                                      <argument pos:start="1249:55" pos:end="1249:60"><expr pos:start="1249:55" pos:end="1249:60"><name pos:start="1249:55" pos:end="1249:60">cpu_V0</name></expr></argument>, <argument pos:start="1249:63" pos:end="1249:68"><expr pos:start="1249:63" pos:end="1249:68"><name pos:start="1249:63" pos:end="1249:68">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1251:29" pos:end="1251:34">break;</break>

                        <case pos:start="1253:25" pos:end="1253:31">case <expr pos:start="1253:30" pos:end="1253:30"><literal type="number" pos:start="1253:30" pos:end="1253:30">7</literal></expr>:</case> <comment type="block" pos:start="1253:33" pos:end="1253:43">/* VQSHL */</comment>

                            <if_stmt pos:start="1255:29" pos:end="1267:29"><if pos:start="1255:29" pos:end="1261:29">if <condition pos:start="1255:32" pos:end="1255:34">(<expr pos:start="1255:33" pos:end="1255:33"><name pos:start="1255:33" pos:end="1255:33">u</name></expr>)</condition> <block pos:start="1255:36" pos:end="1261:29">{<block_content pos:start="1257:33" pos:end="1259:73">

                                <expr_stmt pos:start="1257:33" pos:end="1259:73"><expr pos:start="1257:33" pos:end="1259:72"><call pos:start="1257:33" pos:end="1259:72"><name pos:start="1257:33" pos:end="1257:56">gen_helper_neon_qshl_u64</name><argument_list pos:start="1257:57" pos:end="1259:72">(<argument pos:start="1257:58" pos:end="1257:63"><expr pos:start="1257:58" pos:end="1257:63"><name pos:start="1257:58" pos:end="1257:63">cpu_V0</name></expr></argument>, <argument pos:start="1257:66" pos:end="1257:72"><expr pos:start="1257:66" pos:end="1257:72"><name pos:start="1257:66" pos:end="1257:72">cpu_env</name></expr></argument>,

                                                         <argument pos:start="1259:58" pos:end="1259:63"><expr pos:start="1259:58" pos:end="1259:63"><name pos:start="1259:58" pos:end="1259:63">cpu_V0</name></expr></argument>, <argument pos:start="1259:66" pos:end="1259:71"><expr pos:start="1259:66" pos:end="1259:71"><name pos:start="1259:66" pos:end="1259:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1261:31" pos:end="1267:29">else <block pos:start="1261:36" pos:end="1267:29">{<block_content pos:start="1263:33" pos:end="1265:73">

                                <expr_stmt pos:start="1263:33" pos:end="1265:73"><expr pos:start="1263:33" pos:end="1265:72"><call pos:start="1263:33" pos:end="1265:72"><name pos:start="1263:33" pos:end="1263:56">gen_helper_neon_qshl_s64</name><argument_list pos:start="1263:57" pos:end="1265:72">(<argument pos:start="1263:58" pos:end="1263:63"><expr pos:start="1263:58" pos:end="1263:63"><name pos:start="1263:58" pos:end="1263:63">cpu_V0</name></expr></argument>, <argument pos:start="1263:66" pos:end="1263:72"><expr pos:start="1263:66" pos:end="1263:72"><name pos:start="1263:66" pos:end="1263:72">cpu_env</name></expr></argument>,

                                                         <argument pos:start="1265:58" pos:end="1265:63"><expr pos:start="1265:58" pos:end="1265:63"><name pos:start="1265:58" pos:end="1265:63">cpu_V0</name></expr></argument>, <argument pos:start="1265:66" pos:end="1265:71"><expr pos:start="1265:66" pos:end="1265:71"><name pos:start="1265:66" pos:end="1265:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <break pos:start="1269:29" pos:end="1269:34">break;</break>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="1273:25" pos:end="1311:25"><if pos:start="1273:25" pos:end="1281:25">if <condition pos:start="1273:28" pos:end="1273:47">(<expr pos:start="1273:29" pos:end="1273:46"><name pos:start="1273:29" pos:end="1273:30">op</name> <operator pos:start="1273:32" pos:end="1273:33">==</operator> <literal type="number" pos:start="1273:35" pos:end="1273:35">1</literal> <operator pos:start="1273:37" pos:end="1273:38">||</operator> <name pos:start="1273:40" pos:end="1273:41">op</name> <operator pos:start="1273:43" pos:end="1273:44">==</operator> <literal type="number" pos:start="1273:46" pos:end="1273:46">3</literal></expr>)</condition> <block pos:start="1273:49" pos:end="1281:25">{<block_content pos:start="1277:29" pos:end="1279:68">

                            <comment type="block" pos:start="1275:29" pos:end="1275:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="1277:29" pos:end="1277:63"><expr pos:start="1277:29" pos:end="1277:62"><call pos:start="1277:29" pos:end="1277:62"><name pos:start="1277:29" pos:end="1277:43">neon_load_reg64</name><argument_list pos:start="1277:44" pos:end="1277:62">(<argument pos:start="1277:45" pos:end="1277:50"><expr pos:start="1277:45" pos:end="1277:50"><name pos:start="1277:45" pos:end="1277:50">cpu_V1</name></expr></argument>, <argument pos:start="1277:53" pos:end="1277:61"><expr pos:start="1277:53" pos:end="1277:61"><name pos:start="1277:53" pos:end="1277:54">rd</name> <operator pos:start="1277:56" pos:end="1277:56">+</operator> <name pos:start="1277:58" pos:end="1277:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1279:29" pos:end="1279:68"><expr pos:start="1279:29" pos:end="1279:67"><call pos:start="1279:29" pos:end="1279:67"><name pos:start="1279:29" pos:end="1279:43">tcg_gen_add_i64</name><argument_list pos:start="1279:44" pos:end="1279:67">(<argument pos:start="1279:45" pos:end="1279:50"><expr pos:start="1279:45" pos:end="1279:50"><name pos:start="1279:45" pos:end="1279:50">cpu_V0</name></expr></argument>, <argument pos:start="1279:53" pos:end="1279:58"><expr pos:start="1279:53" pos:end="1279:58"><name pos:start="1279:53" pos:end="1279:58">cpu_V0</name></expr></argument>, <argument pos:start="1279:61" pos:end="1279:66"><expr pos:start="1279:61" pos:end="1279:66"><name pos:start="1279:61" pos:end="1279:66">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1281:27" pos:end="1311:25">else if <condition pos:start="1281:35" pos:end="1281:61">(<expr pos:start="1281:36" pos:end="1281:60"><name pos:start="1281:36" pos:end="1281:37">op</name> <operator pos:start="1281:39" pos:end="1281:40">==</operator> <literal type="number" pos:start="1281:42" pos:end="1281:42">4</literal> <operator pos:start="1281:44" pos:end="1281:45">||</operator> <operator pos:start="1281:47" pos:end="1281:47">(</operator><name pos:start="1281:48" pos:end="1281:49">op</name> <operator pos:start="1281:51" pos:end="1281:52">==</operator> <literal type="number" pos:start="1281:54" pos:end="1281:54">5</literal> <operator pos:start="1281:56" pos:end="1281:57">&amp;&amp;</operator> <name pos:start="1281:59" pos:end="1281:59">u</name><operator pos:start="1281:60" pos:end="1281:60">)</operator></expr>)</condition> <block pos:start="1281:63" pos:end="1311:25">{<block_content pos:start="1285:29" pos:end="1309:67">

                            <comment type="block" pos:start="1283:29" pos:end="1283:40">/* Insert */</comment>

                            <expr_stmt pos:start="1285:29" pos:end="1285:63"><expr pos:start="1285:29" pos:end="1285:62"><call pos:start="1285:29" pos:end="1285:62"><name pos:start="1285:29" pos:end="1285:43">neon_load_reg64</name><argument_list pos:start="1285:44" pos:end="1285:62">(<argument pos:start="1285:45" pos:end="1285:50"><expr pos:start="1285:45" pos:end="1285:50"><name pos:start="1285:45" pos:end="1285:50">cpu_V1</name></expr></argument>, <argument pos:start="1285:53" pos:end="1285:61"><expr pos:start="1285:53" pos:end="1285:61"><name pos:start="1285:53" pos:end="1285:54">rd</name> <operator pos:start="1285:56" pos:end="1285:56">+</operator> <name pos:start="1285:58" pos:end="1285:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt pos:start="1287:29" pos:end="1287:42"><decl pos:start="1287:29" pos:end="1287:41"><type pos:start="1287:29" pos:end="1287:36"><name pos:start="1287:29" pos:end="1287:36">uint64_t</name></type> <name pos:start="1287:38" pos:end="1287:41">mask</name></decl>;</decl_stmt>

                            <if_stmt pos:start="1289:29" pos:end="1305:29"><if pos:start="1289:29" pos:end="1293:29">if <condition pos:start="1289:32" pos:end="1289:58">(<expr pos:start="1289:33" pos:end="1289:57"><name pos:start="1289:33" pos:end="1289:54"><name pos:start="1289:33" pos:end="1289:37">shift</name> <argument_list type="generic" pos:start="1289:39" pos:end="1289:54">&lt; <argument pos:start="1289:41" pos:end="1289:52"><expr pos:start="1289:41" pos:end="1289:52"><operator pos:start="1289:41" pos:end="1289:41">-</operator><literal type="number" pos:start="1289:42" pos:end="1289:43">63</literal> <operator pos:start="1289:45" pos:end="1289:46">||</operator> <name pos:start="1289:48" pos:end="1289:52">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="1289:56" pos:end="1289:57">63</literal></expr>)</condition> <block pos:start="1289:60" pos:end="1293:29">{<block_content pos:start="1291:33" pos:end="1291:41">

                                <expr_stmt pos:start="1291:33" pos:end="1291:41"><expr pos:start="1291:33" pos:end="1291:40"><name pos:start="1291:33" pos:end="1291:36">mask</name> <operator pos:start="1291:38" pos:end="1291:38">=</operator> <literal type="number" pos:start="1291:40" pos:end="1291:40">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1293:31" pos:end="1305:29">else <block pos:start="1293:36" pos:end="1305:29">{<block_content pos:start="1295:33" pos:end="1303:33">

                                <if_stmt pos:start="1295:33" pos:end="1303:33"><if pos:start="1295:33" pos:end="1299:33">if <condition pos:start="1295:36" pos:end="1295:44">(<expr pos:start="1295:37" pos:end="1295:43"><name pos:start="1295:37" pos:end="1295:38">op</name> <operator pos:start="1295:40" pos:end="1295:41">==</operator> <literal type="number" pos:start="1295:43" pos:end="1295:43">4</literal></expr>)</condition> <block pos:start="1295:46" pos:end="1299:33">{<block_content pos:start="1297:37" pos:end="1297:75">

                                    <expr_stmt pos:start="1297:37" pos:end="1297:75"><expr pos:start="1297:37" pos:end="1297:74"><name pos:start="1297:37" pos:end="1297:40">mask</name> <operator pos:start="1297:42" pos:end="1297:42">=</operator> <literal type="number" pos:start="1297:44" pos:end="1297:64">0xffffffffffffffffull</literal> <operator pos:start="1297:66" pos:end="1297:67">&gt;&gt;</operator> <operator pos:start="1297:69" pos:end="1297:69">-</operator><name pos:start="1297:70" pos:end="1297:74">shift</name></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="1299:35" pos:end="1303:33">else <block pos:start="1299:40" pos:end="1303:33">{<block_content pos:start="1301:37" pos:end="1301:74">

                                    <expr_stmt pos:start="1301:37" pos:end="1301:74"><expr pos:start="1301:37" pos:end="1301:73"><name pos:start="1301:37" pos:end="1301:40">mask</name> <operator pos:start="1301:42" pos:end="1301:42">=</operator> <literal type="number" pos:start="1301:44" pos:end="1301:64">0xffffffffffffffffull</literal> <operator pos:start="1301:66" pos:end="1301:67">&lt;&lt;</operator> <name pos:start="1301:69" pos:end="1301:73">shift</name></expr>;</expr_stmt>

                                </block_content>}</block></else></if_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="1307:29" pos:end="1307:68"><expr pos:start="1307:29" pos:end="1307:67"><call pos:start="1307:29" pos:end="1307:67"><name pos:start="1307:29" pos:end="1307:44">tcg_gen_andi_i64</name><argument_list pos:start="1307:45" pos:end="1307:67">(<argument pos:start="1307:46" pos:end="1307:51"><expr pos:start="1307:46" pos:end="1307:51"><name pos:start="1307:46" pos:end="1307:51">cpu_V1</name></expr></argument>, <argument pos:start="1307:54" pos:end="1307:59"><expr pos:start="1307:54" pos:end="1307:59"><name pos:start="1307:54" pos:end="1307:59">cpu_V1</name></expr></argument>, <argument pos:start="1307:62" pos:end="1307:66"><expr pos:start="1307:62" pos:end="1307:66"><operator pos:start="1307:62" pos:end="1307:62">~</operator><name pos:start="1307:63" pos:end="1307:66">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1309:29" pos:end="1309:67"><expr pos:start="1309:29" pos:end="1309:66"><call pos:start="1309:29" pos:end="1309:66"><name pos:start="1309:29" pos:end="1309:42">tcg_gen_or_i64</name><argument_list pos:start="1309:43" pos:end="1309:66">(<argument pos:start="1309:44" pos:end="1309:49"><expr pos:start="1309:44" pos:end="1309:49"><name pos:start="1309:44" pos:end="1309:49">cpu_V0</name></expr></argument>, <argument pos:start="1309:52" pos:end="1309:57"><expr pos:start="1309:52" pos:end="1309:57"><name pos:start="1309:52" pos:end="1309:57">cpu_V0</name></expr></argument>, <argument pos:start="1309:60" pos:end="1309:65"><expr pos:start="1309:60" pos:end="1309:65"><name pos:start="1309:60" pos:end="1309:65">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1313:25" pos:end="1313:60"><expr pos:start="1313:25" pos:end="1313:59"><call pos:start="1313:25" pos:end="1313:59"><name pos:start="1313:25" pos:end="1313:40">neon_store_reg64</name><argument_list pos:start="1313:41" pos:end="1313:59">(<argument pos:start="1313:42" pos:end="1313:47"><expr pos:start="1313:42" pos:end="1313:47"><name pos:start="1313:42" pos:end="1313:47">cpu_V0</name></expr></argument>, <argument pos:start="1313:50" pos:end="1313:58"><expr pos:start="1313:50" pos:end="1313:58"><name pos:start="1313:50" pos:end="1313:51">rd</name> <operator pos:start="1313:53" pos:end="1313:53">+</operator> <name pos:start="1313:55" pos:end="1313:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1315:23" pos:end="1495:21">else <block pos:start="1315:28" pos:end="1495:21">{<block_content pos:start="1319:25" pos:end="1493:54"> <comment type="block" pos:start="1315:30" pos:end="1315:43">/* size &lt; 3 */</comment>

                        <comment type="block" pos:start="1317:25" pos:end="1317:53">/* Operands in T0 and T1.  */</comment>

                        <expr_stmt pos:start="1319:25" pos:end="1319:54"><expr pos:start="1319:25" pos:end="1319:53"><name pos:start="1319:25" pos:end="1319:27">tmp</name> <operator pos:start="1319:29" pos:end="1319:29">=</operator> <call pos:start="1319:31" pos:end="1319:53"><name pos:start="1319:31" pos:end="1319:43">neon_load_reg</name><argument_list pos:start="1319:44" pos:end="1319:53">(<argument pos:start="1319:45" pos:end="1319:46"><expr pos:start="1319:45" pos:end="1319:46"><name pos:start="1319:45" pos:end="1319:46">rm</name></expr></argument>, <argument pos:start="1319:49" pos:end="1319:52"><expr pos:start="1319:49" pos:end="1319:52"><name pos:start="1319:49" pos:end="1319:52">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1321:25" pos:end="1321:50"><expr pos:start="1321:25" pos:end="1321:49"><name pos:start="1321:25" pos:end="1321:28">tmp2</name> <operator pos:start="1321:30" pos:end="1321:30">=</operator> <call pos:start="1321:32" pos:end="1321:49"><name pos:start="1321:32" pos:end="1321:47">tcg_temp_new_i32</name><argument_list pos:start="1321:48" pos:end="1321:49">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1323:25" pos:end="1323:52"><expr pos:start="1323:25" pos:end="1323:51"><call pos:start="1323:25" pos:end="1323:51"><name pos:start="1323:25" pos:end="1323:40">tcg_gen_movi_i32</name><argument_list pos:start="1323:41" pos:end="1323:51">(<argument pos:start="1323:42" pos:end="1323:45"><expr pos:start="1323:42" pos:end="1323:45"><name pos:start="1323:42" pos:end="1323:45">tmp2</name></expr></argument>, <argument pos:start="1323:48" pos:end="1323:50"><expr pos:start="1323:48" pos:end="1323:50"><name pos:start="1323:48" pos:end="1323:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="1325:25" pos:end="1403:25">switch <condition pos:start="1325:32" pos:end="1325:35">(<expr pos:start="1325:33" pos:end="1325:34"><name pos:start="1325:33" pos:end="1325:34">op</name></expr>)</condition> <block pos:start="1325:37" pos:end="1403:25">{<block_content pos:start="1327:25" pos:end="1401:34">

                        <case pos:start="1327:25" pos:end="1327:31">case <expr pos:start="1327:30" pos:end="1327:30"><literal type="number" pos:start="1327:30" pos:end="1327:30">0</literal></expr>:</case>  <comment type="block" pos:start="1327:34" pos:end="1327:43">/* VSHR */</comment>

                        <case pos:start="1329:25" pos:end="1329:31">case <expr pos:start="1329:30" pos:end="1329:30"><literal type="number" pos:start="1329:30" pos:end="1329:30">1</literal></expr>:</case>  <comment type="block" pos:start="1329:34" pos:end="1329:43">/* VSRA */</comment>

                            <expr_stmt pos:start="1331:29" pos:end="1331:53"><expr pos:start="1331:29" pos:end="1331:52"><call pos:start="1331:29" pos:end="1331:52"><name pos:start="1331:29" pos:end="1331:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1331:48" pos:end="1331:52">(<argument pos:start="1331:49" pos:end="1331:51"><expr pos:start="1331:49" pos:end="1331:51"><name pos:start="1331:49" pos:end="1331:51">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1333:29" pos:end="1333:34">break;</break>

                        <case pos:start="1335:25" pos:end="1335:31">case <expr pos:start="1335:30" pos:end="1335:30"><literal type="number" pos:start="1335:30" pos:end="1335:30">2</literal></expr>:</case> <comment type="block" pos:start="1335:33" pos:end="1335:43">/* VRSHR */</comment>

                        <case pos:start="1337:25" pos:end="1337:31">case <expr pos:start="1337:30" pos:end="1337:30"><literal type="number" pos:start="1337:30" pos:end="1337:30">3</literal></expr>:</case> <comment type="block" pos:start="1337:33" pos:end="1337:43">/* VRSRA */</comment>

                            <expr_stmt pos:start="1339:29" pos:end="1339:54"><expr pos:start="1339:29" pos:end="1339:53"><call pos:start="1339:29" pos:end="1339:53"><name pos:start="1339:29" pos:end="1339:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1339:48" pos:end="1339:53">(<argument pos:start="1339:49" pos:end="1339:52"><expr pos:start="1339:49" pos:end="1339:52"><name pos:start="1339:49" pos:end="1339:52">rshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1341:29" pos:end="1341:34">break;</break>

                        <case pos:start="1343:25" pos:end="1343:31">case <expr pos:start="1343:30" pos:end="1343:30"><literal type="number" pos:start="1343:30" pos:end="1343:30">4</literal></expr>:</case> <comment type="block" pos:start="1343:33" pos:end="1343:42">/* VSRI */</comment>

                        <case pos:start="1345:25" pos:end="1345:31">case <expr pos:start="1345:30" pos:end="1345:30"><literal type="number" pos:start="1345:30" pos:end="1345:30">5</literal></expr>:</case> <comment type="block" pos:start="1345:33" pos:end="1345:48">/* VSHL, VSLI */</comment>

                            <switch pos:start="1347:29" pos:end="1357:29">switch <condition pos:start="1347:36" pos:end="1347:41">(<expr pos:start="1347:37" pos:end="1347:40"><name pos:start="1347:37" pos:end="1347:40">size</name></expr>)</condition> <block pos:start="1347:43" pos:end="1357:29">{<block_content pos:start="1349:29" pos:end="1355:45">

                            <case pos:start="1349:29" pos:end="1349:35">case <expr pos:start="1349:34" pos:end="1349:34"><literal type="number" pos:start="1349:34" pos:end="1349:34">0</literal></expr>:</case> <expr_stmt pos:start="1349:37" pos:end="1349:75"><expr pos:start="1349:37" pos:end="1349:74"><call pos:start="1349:37" pos:end="1349:74"><name pos:start="1349:37" pos:end="1349:58">gen_helper_neon_shl_u8</name><argument_list pos:start="1349:59" pos:end="1349:74">(<argument pos:start="1349:60" pos:end="1349:62"><expr pos:start="1349:60" pos:end="1349:62"><name pos:start="1349:60" pos:end="1349:62">tmp</name></expr></argument>, <argument pos:start="1349:65" pos:end="1349:67"><expr pos:start="1349:65" pos:end="1349:67"><name pos:start="1349:65" pos:end="1349:67">tmp</name></expr></argument>, <argument pos:start="1349:70" pos:end="1349:73"><expr pos:start="1349:70" pos:end="1349:73"><name pos:start="1349:70" pos:end="1349:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1349:77" pos:end="1349:82">break;</break>

                            <case pos:start="1351:29" pos:end="1351:35">case <expr pos:start="1351:34" pos:end="1351:34"><literal type="number" pos:start="1351:34" pos:end="1351:34">1</literal></expr>:</case> <expr_stmt pos:start="1351:37" pos:end="1351:76"><expr pos:start="1351:37" pos:end="1351:75"><call pos:start="1351:37" pos:end="1351:75"><name pos:start="1351:37" pos:end="1351:59">gen_helper_neon_shl_u16</name><argument_list pos:start="1351:60" pos:end="1351:75">(<argument pos:start="1351:61" pos:end="1351:63"><expr pos:start="1351:61" pos:end="1351:63"><name pos:start="1351:61" pos:end="1351:63">tmp</name></expr></argument>, <argument pos:start="1351:66" pos:end="1351:68"><expr pos:start="1351:66" pos:end="1351:68"><name pos:start="1351:66" pos:end="1351:68">tmp</name></expr></argument>, <argument pos:start="1351:71" pos:end="1351:74"><expr pos:start="1351:71" pos:end="1351:74"><name pos:start="1351:71" pos:end="1351:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1351:78" pos:end="1351:83">break;</break>

                            <case pos:start="1353:29" pos:end="1353:35">case <expr pos:start="1353:34" pos:end="1353:34"><literal type="number" pos:start="1353:34" pos:end="1353:34">2</literal></expr>:</case> <expr_stmt pos:start="1353:37" pos:end="1353:76"><expr pos:start="1353:37" pos:end="1353:75"><call pos:start="1353:37" pos:end="1353:75"><name pos:start="1353:37" pos:end="1353:59">gen_helper_neon_shl_u32</name><argument_list pos:start="1353:60" pos:end="1353:75">(<argument pos:start="1353:61" pos:end="1353:63"><expr pos:start="1353:61" pos:end="1353:63"><name pos:start="1353:61" pos:end="1353:63">tmp</name></expr></argument>, <argument pos:start="1353:66" pos:end="1353:68"><expr pos:start="1353:66" pos:end="1353:68"><name pos:start="1353:66" pos:end="1353:68">tmp</name></expr></argument>, <argument pos:start="1353:71" pos:end="1353:74"><expr pos:start="1353:71" pos:end="1353:74"><name pos:start="1353:71" pos:end="1353:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1353:78" pos:end="1353:83">break;</break>

                            <default pos:start="1355:29" pos:end="1355:36">default:</default> <expr_stmt pos:start="1355:38" pos:end="1355:45"><expr pos:start="1355:38" pos:end="1355:44"><call pos:start="1355:38" pos:end="1355:44"><name pos:start="1355:38" pos:end="1355:42">abort</name><argument_list pos:start="1355:43" pos:end="1355:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="1359:29" pos:end="1359:34">break;</break>

                        <case pos:start="1361:25" pos:end="1361:31">case <expr pos:start="1361:30" pos:end="1361:30"><literal type="number" pos:start="1361:30" pos:end="1361:30">6</literal></expr>:</case> <comment type="block" pos:start="1361:33" pos:end="1361:44">/* VQSHLU */</comment>

                            <switch pos:start="1363:29" pos:end="1393:29">switch <condition pos:start="1363:36" pos:end="1363:41">(<expr pos:start="1363:37" pos:end="1363:40"><name pos:start="1363:37" pos:end="1363:40">size</name></expr>)</condition> <block pos:start="1363:43" pos:end="1393:29">{<block_content pos:start="1365:29" pos:end="1391:40">

                            <case pos:start="1365:29" pos:end="1365:35">case <expr pos:start="1365:34" pos:end="1365:34"><literal type="number" pos:start="1365:34" pos:end="1365:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="1367:33" pos:end="1369:68"><expr pos:start="1367:33" pos:end="1369:67"><call pos:start="1367:33" pos:end="1369:67"><name pos:start="1367:33" pos:end="1367:56">gen_helper_neon_qshlu_s8</name><argument_list pos:start="1367:57" pos:end="1369:67">(<argument pos:start="1367:58" pos:end="1367:60"><expr pos:start="1367:58" pos:end="1367:60"><name pos:start="1367:58" pos:end="1367:60">tmp</name></expr></argument>, <argument pos:start="1367:63" pos:end="1367:69"><expr pos:start="1367:63" pos:end="1367:69"><name pos:start="1367:63" pos:end="1367:69">cpu_env</name></expr></argument>,

                                                         <argument pos:start="1369:58" pos:end="1369:60"><expr pos:start="1369:58" pos:end="1369:60"><name pos:start="1369:58" pos:end="1369:60">tmp</name></expr></argument>, <argument pos:start="1369:63" pos:end="1369:66"><expr pos:start="1369:63" pos:end="1369:66"><name pos:start="1369:63" pos:end="1369:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1371:33" pos:end="1371:38">break;</break>

                            <case pos:start="1373:29" pos:end="1373:35">case <expr pos:start="1373:34" pos:end="1373:34"><literal type="number" pos:start="1373:34" pos:end="1373:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="1375:33" pos:end="1377:69"><expr pos:start="1375:33" pos:end="1377:68"><call pos:start="1375:33" pos:end="1377:68"><name pos:start="1375:33" pos:end="1375:57">gen_helper_neon_qshlu_s16</name><argument_list pos:start="1375:58" pos:end="1377:68">(<argument pos:start="1375:59" pos:end="1375:61"><expr pos:start="1375:59" pos:end="1375:61"><name pos:start="1375:59" pos:end="1375:61">tmp</name></expr></argument>, <argument pos:start="1375:64" pos:end="1375:70"><expr pos:start="1375:64" pos:end="1375:70"><name pos:start="1375:64" pos:end="1375:70">cpu_env</name></expr></argument>,

                                                          <argument pos:start="1377:59" pos:end="1377:61"><expr pos:start="1377:59" pos:end="1377:61"><name pos:start="1377:59" pos:end="1377:61">tmp</name></expr></argument>, <argument pos:start="1377:64" pos:end="1377:67"><expr pos:start="1377:64" pos:end="1377:67"><name pos:start="1377:64" pos:end="1377:67">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1379:33" pos:end="1379:38">break;</break>

                            <case pos:start="1381:29" pos:end="1381:35">case <expr pos:start="1381:34" pos:end="1381:34"><literal type="number" pos:start="1381:34" pos:end="1381:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="1383:33" pos:end="1385:69"><expr pos:start="1383:33" pos:end="1385:68"><call pos:start="1383:33" pos:end="1385:68"><name pos:start="1383:33" pos:end="1383:57">gen_helper_neon_qshlu_s32</name><argument_list pos:start="1383:58" pos:end="1385:68">(<argument pos:start="1383:59" pos:end="1383:61"><expr pos:start="1383:59" pos:end="1383:61"><name pos:start="1383:59" pos:end="1383:61">tmp</name></expr></argument>, <argument pos:start="1383:64" pos:end="1383:70"><expr pos:start="1383:64" pos:end="1383:70"><name pos:start="1383:64" pos:end="1383:70">cpu_env</name></expr></argument>,

                                                          <argument pos:start="1385:59" pos:end="1385:61"><expr pos:start="1385:59" pos:end="1385:61"><name pos:start="1385:59" pos:end="1385:61">tmp</name></expr></argument>, <argument pos:start="1385:64" pos:end="1385:67"><expr pos:start="1385:64" pos:end="1385:67"><name pos:start="1385:64" pos:end="1385:67">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1387:33" pos:end="1387:38">break;</break>

                            <default pos:start="1389:29" pos:end="1389:36">default:</default>

                                <expr_stmt pos:start="1391:33" pos:end="1391:40"><expr pos:start="1391:33" pos:end="1391:39"><call pos:start="1391:33" pos:end="1391:39"><name pos:start="1391:33" pos:end="1391:37">abort</name><argument_list pos:start="1391:38" pos:end="1391:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="1395:29" pos:end="1395:34">break;</break>

                        <case pos:start="1397:25" pos:end="1397:31">case <expr pos:start="1397:30" pos:end="1397:30"><literal type="number" pos:start="1397:30" pos:end="1397:30">7</literal></expr>:</case> <comment type="block" pos:start="1397:33" pos:end="1397:43">/* VQSHL */</comment>

                            <expr_stmt pos:start="1399:29" pos:end="1399:58"><expr pos:start="1399:29" pos:end="1399:57"><call pos:start="1399:29" pos:end="1399:57"><name pos:start="1399:29" pos:end="1399:51">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="1399:52" pos:end="1399:57">(<argument pos:start="1399:53" pos:end="1399:56"><expr pos:start="1399:53" pos:end="1399:56"><name pos:start="1399:53" pos:end="1399:56">qshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1401:29" pos:end="1401:34">break;</break>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="1405:25" pos:end="1405:48"><expr pos:start="1405:25" pos:end="1405:47"><call pos:start="1405:25" pos:end="1405:47"><name pos:start="1405:25" pos:end="1405:41">tcg_temp_free_i32</name><argument_list pos:start="1405:42" pos:end="1405:47">(<argument pos:start="1405:43" pos:end="1405:46"><expr pos:start="1405:43" pos:end="1405:46"><name pos:start="1405:43" pos:end="1405:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="1409:25" pos:end="1491:25"><if pos:start="1409:25" pos:end="1419:25">if <condition pos:start="1409:28" pos:end="1409:47">(<expr pos:start="1409:29" pos:end="1409:46"><name pos:start="1409:29" pos:end="1409:30">op</name> <operator pos:start="1409:32" pos:end="1409:33">==</operator> <literal type="number" pos:start="1409:35" pos:end="1409:35">1</literal> <operator pos:start="1409:37" pos:end="1409:38">||</operator> <name pos:start="1409:40" pos:end="1409:41">op</name> <operator pos:start="1409:43" pos:end="1409:44">==</operator> <literal type="number" pos:start="1409:46" pos:end="1409:46">3</literal></expr>)</condition> <block pos:start="1409:49" pos:end="1419:25">{<block_content pos:start="1413:29" pos:end="1417:52">

                            <comment type="block" pos:start="1411:29" pos:end="1411:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="1413:29" pos:end="1413:59"><expr pos:start="1413:29" pos:end="1413:58"><name pos:start="1413:29" pos:end="1413:32">tmp2</name> <operator pos:start="1413:34" pos:end="1413:34">=</operator> <call pos:start="1413:36" pos:end="1413:58"><name pos:start="1413:36" pos:end="1413:48">neon_load_reg</name><argument_list pos:start="1413:49" pos:end="1413:58">(<argument pos:start="1413:50" pos:end="1413:51"><expr pos:start="1413:50" pos:end="1413:51"><name pos:start="1413:50" pos:end="1413:51">rd</name></expr></argument>, <argument pos:start="1413:54" pos:end="1413:57"><expr pos:start="1413:54" pos:end="1413:57"><name pos:start="1413:54" pos:end="1413:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1415:29" pos:end="1415:58"><expr pos:start="1415:29" pos:end="1415:57"><call pos:start="1415:29" pos:end="1415:57"><name pos:start="1415:29" pos:end="1415:40">gen_neon_add</name><argument_list pos:start="1415:41" pos:end="1415:57">(<argument pos:start="1415:42" pos:end="1415:45"><expr pos:start="1415:42" pos:end="1415:45"><name pos:start="1415:42" pos:end="1415:45">size</name></expr></argument>, <argument pos:start="1415:48" pos:end="1415:50"><expr pos:start="1415:48" pos:end="1415:50"><name pos:start="1415:48" pos:end="1415:50">tmp</name></expr></argument>, <argument pos:start="1415:53" pos:end="1415:56"><expr pos:start="1415:53" pos:end="1415:56"><name pos:start="1415:53" pos:end="1415:56">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1417:29" pos:end="1417:52"><expr pos:start="1417:29" pos:end="1417:51"><call pos:start="1417:29" pos:end="1417:51"><name pos:start="1417:29" pos:end="1417:45">tcg_temp_free_i32</name><argument_list pos:start="1417:46" pos:end="1417:51">(<argument pos:start="1417:47" pos:end="1417:50"><expr pos:start="1417:47" pos:end="1417:50"><name pos:start="1417:47" pos:end="1417:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1419:27" pos:end="1491:25">else if <condition pos:start="1419:35" pos:end="1419:61">(<expr pos:start="1419:36" pos:end="1419:60"><name pos:start="1419:36" pos:end="1419:37">op</name> <operator pos:start="1419:39" pos:end="1419:40">==</operator> <literal type="number" pos:start="1419:42" pos:end="1419:42">4</literal> <operator pos:start="1419:44" pos:end="1419:45">||</operator> <operator pos:start="1419:47" pos:end="1419:47">(</operator><name pos:start="1419:48" pos:end="1419:49">op</name> <operator pos:start="1419:51" pos:end="1419:52">==</operator> <literal type="number" pos:start="1419:54" pos:end="1419:54">5</literal> <operator pos:start="1419:56" pos:end="1419:57">&amp;&amp;</operator> <name pos:start="1419:59" pos:end="1419:59">u</name><operator pos:start="1419:60" pos:end="1419:60">)</operator></expr>)</condition> <block pos:start="1419:63" pos:end="1491:25">{<block_content pos:start="1423:29" pos:end="1489:52">

                            <comment type="block" pos:start="1421:29" pos:end="1421:40">/* Insert */</comment>

                            <switch pos:start="1423:29" pos:end="1479:29">switch <condition pos:start="1423:36" pos:end="1423:41">(<expr pos:start="1423:37" pos:end="1423:40"><name pos:start="1423:37" pos:end="1423:40">size</name></expr>)</condition> <block pos:start="1423:43" pos:end="1479:29">{<block_content pos:start="1425:29" pos:end="1477:40">

                            <case pos:start="1425:29" pos:end="1425:35">case <expr pos:start="1425:34" pos:end="1425:34"><literal type="number" pos:start="1425:34" pos:end="1425:34">0</literal></expr>:</case>

                                <if_stmt pos:start="1427:33" pos:end="1433:68"><if pos:start="1427:33" pos:end="1429:58">if <condition pos:start="1427:36" pos:end="1427:44">(<expr pos:start="1427:37" pos:end="1427:43"><name pos:start="1427:37" pos:end="1427:38">op</name> <operator pos:start="1427:40" pos:end="1427:41">==</operator> <literal type="number" pos:start="1427:43" pos:end="1427:43">4</literal></expr>)</condition><block type="pseudo" pos:start="1429:37" pos:end="1429:58"><block_content pos:start="1429:37" pos:end="1429:58">

                                    <expr_stmt pos:start="1429:37" pos:end="1429:58"><expr pos:start="1429:37" pos:end="1429:57"><name pos:start="1429:37" pos:end="1429:40">mask</name> <operator pos:start="1429:42" pos:end="1429:42">=</operator> <literal type="number" pos:start="1429:44" pos:end="1429:47">0xff</literal> <operator pos:start="1429:49" pos:end="1429:50">&gt;&gt;</operator> <operator pos:start="1429:52" pos:end="1429:52">-</operator><name pos:start="1429:53" pos:end="1429:57">shift</name></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="1431:33" pos:end="1433:68">else<block type="pseudo" pos:start="1433:37" pos:end="1433:68"><block_content pos:start="1433:37" pos:end="1433:68">

                                    <expr_stmt pos:start="1433:37" pos:end="1433:68"><expr pos:start="1433:37" pos:end="1433:67"><name pos:start="1433:37" pos:end="1433:40">mask</name> <operator pos:start="1433:42" pos:end="1433:42">=</operator> <operator pos:start="1433:44" pos:end="1433:44">(</operator><name pos:start="1433:45" pos:end="1433:51">uint8_t</name><operator pos:start="1433:52" pos:end="1433:52">)</operator><operator pos:start="1433:53" pos:end="1433:53">(</operator><literal type="number" pos:start="1433:54" pos:end="1433:57">0xff</literal> <operator pos:start="1433:59" pos:end="1433:60">&lt;&lt;</operator> <name pos:start="1433:62" pos:end="1433:66">shift</name><operator pos:start="1433:67" pos:end="1433:67">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="1435:33" pos:end="1435:50"><expr pos:start="1435:33" pos:end="1435:49"><name pos:start="1435:33" pos:end="1435:36">mask</name> <operator pos:start="1435:38" pos:end="1435:39">|=</operator> <name pos:start="1435:41" pos:end="1435:44">mask</name> <operator pos:start="1435:46" pos:end="1435:47">&lt;&lt;</operator> <literal type="number" pos:start="1435:49" pos:end="1435:49">8</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="1437:33" pos:end="1437:51"><expr pos:start="1437:33" pos:end="1437:50"><name pos:start="1437:33" pos:end="1437:36">mask</name> <operator pos:start="1437:38" pos:end="1437:39">|=</operator> <name pos:start="1437:41" pos:end="1437:44">mask</name> <operator pos:start="1437:46" pos:end="1437:47">&lt;&lt;</operator> <literal type="number" pos:start="1437:49" pos:end="1437:50">16</literal></expr>;</expr_stmt>

                                <break pos:start="1439:33" pos:end="1439:38">break;</break>

                            <case pos:start="1441:29" pos:end="1441:35">case <expr pos:start="1441:34" pos:end="1441:34"><literal type="number" pos:start="1441:34" pos:end="1441:34">1</literal></expr>:</case>

                                <if_stmt pos:start="1443:33" pos:end="1449:71"><if pos:start="1443:33" pos:end="1445:60">if <condition pos:start="1443:36" pos:end="1443:44">(<expr pos:start="1443:37" pos:end="1443:43"><name pos:start="1443:37" pos:end="1443:38">op</name> <operator pos:start="1443:40" pos:end="1443:41">==</operator> <literal type="number" pos:start="1443:43" pos:end="1443:43">4</literal></expr>)</condition><block type="pseudo" pos:start="1445:37" pos:end="1445:60"><block_content pos:start="1445:37" pos:end="1445:60">

                                    <expr_stmt pos:start="1445:37" pos:end="1445:60"><expr pos:start="1445:37" pos:end="1445:59"><name pos:start="1445:37" pos:end="1445:40">mask</name> <operator pos:start="1445:42" pos:end="1445:42">=</operator> <literal type="number" pos:start="1445:44" pos:end="1445:49">0xffff</literal> <operator pos:start="1445:51" pos:end="1445:52">&gt;&gt;</operator> <operator pos:start="1445:54" pos:end="1445:54">-</operator><name pos:start="1445:55" pos:end="1445:59">shift</name></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="1447:33" pos:end="1449:71">else<block type="pseudo" pos:start="1449:37" pos:end="1449:71"><block_content pos:start="1449:37" pos:end="1449:71">

                                    <expr_stmt pos:start="1449:37" pos:end="1449:71"><expr pos:start="1449:37" pos:end="1449:70"><name pos:start="1449:37" pos:end="1449:40">mask</name> <operator pos:start="1449:42" pos:end="1449:42">=</operator> <operator pos:start="1449:44" pos:end="1449:44">(</operator><name pos:start="1449:45" pos:end="1449:52">uint16_t</name><operator pos:start="1449:53" pos:end="1449:53">)</operator><operator pos:start="1449:54" pos:end="1449:54">(</operator><literal type="number" pos:start="1449:55" pos:end="1449:60">0xffff</literal> <operator pos:start="1449:62" pos:end="1449:63">&lt;&lt;</operator> <name pos:start="1449:65" pos:end="1449:69">shift</name><operator pos:start="1449:70" pos:end="1449:70">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="1451:33" pos:end="1451:51"><expr pos:start="1451:33" pos:end="1451:50"><name pos:start="1451:33" pos:end="1451:36">mask</name> <operator pos:start="1451:38" pos:end="1451:39">|=</operator> <name pos:start="1451:41" pos:end="1451:44">mask</name> <operator pos:start="1451:46" pos:end="1451:47">&lt;&lt;</operator> <literal type="number" pos:start="1451:49" pos:end="1451:50">16</literal></expr>;</expr_stmt>

                                <break pos:start="1453:33" pos:end="1453:38">break;</break>

                            <case pos:start="1455:29" pos:end="1455:35">case <expr pos:start="1455:34" pos:end="1455:34"><literal type="number" pos:start="1455:34" pos:end="1455:34">2</literal></expr>:</case>

                                <if_stmt pos:start="1457:33" pos:end="1471:33"><if pos:start="1457:33" pos:end="1461:33">if <condition pos:start="1457:36" pos:end="1457:62">(<expr pos:start="1457:37" pos:end="1457:61"><name pos:start="1457:37" pos:end="1457:58"><name pos:start="1457:37" pos:end="1457:41">shift</name> <argument_list type="generic" pos:start="1457:43" pos:end="1457:58">&lt; <argument pos:start="1457:45" pos:end="1457:56"><expr pos:start="1457:45" pos:end="1457:56"><operator pos:start="1457:45" pos:end="1457:45">-</operator><literal type="number" pos:start="1457:46" pos:end="1457:47">31</literal> <operator pos:start="1457:49" pos:end="1457:50">||</operator> <name pos:start="1457:52" pos:end="1457:56">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="1457:60" pos:end="1457:61">31</literal></expr>)</condition> <block pos:start="1457:64" pos:end="1461:33">{<block_content pos:start="1459:37" pos:end="1459:45">

                                    <expr_stmt pos:start="1459:37" pos:end="1459:45"><expr pos:start="1459:37" pos:end="1459:44"><name pos:start="1459:37" pos:end="1459:40">mask</name> <operator pos:start="1459:42" pos:end="1459:42">=</operator> <literal type="number" pos:start="1459:44" pos:end="1459:44">0</literal></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="1461:35" pos:end="1471:33">else <block pos:start="1461:40" pos:end="1471:33">{<block_content pos:start="1463:37" pos:end="1469:68">

                                    <if_stmt pos:start="1463:37" pos:end="1469:68"><if pos:start="1463:37" pos:end="1465:69">if <condition pos:start="1463:40" pos:end="1463:48">(<expr pos:start="1463:41" pos:end="1463:47"><name pos:start="1463:41" pos:end="1463:42">op</name> <operator pos:start="1463:44" pos:end="1463:45">==</operator> <literal type="number" pos:start="1463:47" pos:end="1463:47">4</literal></expr>)</condition><block type="pseudo" pos:start="1465:41" pos:end="1465:69"><block_content pos:start="1465:41" pos:end="1465:69">

                                        <expr_stmt pos:start="1465:41" pos:end="1465:69"><expr pos:start="1465:41" pos:end="1465:68"><name pos:start="1465:41" pos:end="1465:44">mask</name> <operator pos:start="1465:46" pos:end="1465:46">=</operator> <literal type="number" pos:start="1465:48" pos:end="1465:58">0xffffffffu</literal> <operator pos:start="1465:60" pos:end="1465:61">&gt;&gt;</operator> <operator pos:start="1465:63" pos:end="1465:63">-</operator><name pos:start="1465:64" pos:end="1465:68">shift</name></expr>;</expr_stmt></block_content></block></if>

                                    <else pos:start="1467:37" pos:end="1469:68">else<block type="pseudo" pos:start="1469:41" pos:end="1469:68"><block_content pos:start="1469:41" pos:end="1469:68">

                                        <expr_stmt pos:start="1469:41" pos:end="1469:68"><expr pos:start="1469:41" pos:end="1469:67"><name pos:start="1469:41" pos:end="1469:44">mask</name> <operator pos:start="1469:46" pos:end="1469:46">=</operator> <literal type="number" pos:start="1469:48" pos:end="1469:58">0xffffffffu</literal> <operator pos:start="1469:60" pos:end="1469:61">&lt;&lt;</operator> <name pos:start="1469:63" pos:end="1469:67">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                </block_content>}</block></else></if_stmt>

                                <break pos:start="1473:33" pos:end="1473:38">break;</break>

                            <default pos:start="1475:29" pos:end="1475:36">default:</default>

                                <expr_stmt pos:start="1477:33" pos:end="1477:40"><expr pos:start="1477:33" pos:end="1477:39"><call pos:start="1477:33" pos:end="1477:39"><name pos:start="1477:33" pos:end="1477:37">abort</name><argument_list pos:start="1477:38" pos:end="1477:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="1481:29" pos:end="1481:59"><expr pos:start="1481:29" pos:end="1481:58"><name pos:start="1481:29" pos:end="1481:32">tmp2</name> <operator pos:start="1481:34" pos:end="1481:34">=</operator> <call pos:start="1481:36" pos:end="1481:58"><name pos:start="1481:36" pos:end="1481:48">neon_load_reg</name><argument_list pos:start="1481:49" pos:end="1481:58">(<argument pos:start="1481:50" pos:end="1481:51"><expr pos:start="1481:50" pos:end="1481:51"><name pos:start="1481:50" pos:end="1481:51">rd</name></expr></argument>, <argument pos:start="1481:54" pos:end="1481:57"><expr pos:start="1481:54" pos:end="1481:57"><name pos:start="1481:54" pos:end="1481:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1483:29" pos:end="1483:61"><expr pos:start="1483:29" pos:end="1483:60"><call pos:start="1483:29" pos:end="1483:60"><name pos:start="1483:29" pos:end="1483:44">tcg_gen_andi_i32</name><argument_list pos:start="1483:45" pos:end="1483:60">(<argument pos:start="1483:46" pos:end="1483:48"><expr pos:start="1483:46" pos:end="1483:48"><name pos:start="1483:46" pos:end="1483:48">tmp</name></expr></argument>, <argument pos:start="1483:51" pos:end="1483:53"><expr pos:start="1483:51" pos:end="1483:53"><name pos:start="1483:51" pos:end="1483:53">tmp</name></expr></argument>, <argument pos:start="1483:56" pos:end="1483:59"><expr pos:start="1483:56" pos:end="1483:59"><name pos:start="1483:56" pos:end="1483:59">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1485:29" pos:end="1485:64"><expr pos:start="1485:29" pos:end="1485:63"><call pos:start="1485:29" pos:end="1485:63"><name pos:start="1485:29" pos:end="1485:44">tcg_gen_andi_i32</name><argument_list pos:start="1485:45" pos:end="1485:63">(<argument pos:start="1485:46" pos:end="1485:49"><expr pos:start="1485:46" pos:end="1485:49"><name pos:start="1485:46" pos:end="1485:49">tmp2</name></expr></argument>, <argument pos:start="1485:52" pos:end="1485:55"><expr pos:start="1485:52" pos:end="1485:55"><name pos:start="1485:52" pos:end="1485:55">tmp2</name></expr></argument>, <argument pos:start="1485:58" pos:end="1485:62"><expr pos:start="1485:58" pos:end="1485:62"><operator pos:start="1485:58" pos:end="1485:58">~</operator><name pos:start="1485:59" pos:end="1485:62">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1487:29" pos:end="1487:59"><expr pos:start="1487:29" pos:end="1487:58"><call pos:start="1487:29" pos:end="1487:58"><name pos:start="1487:29" pos:end="1487:42">tcg_gen_or_i32</name><argument_list pos:start="1487:43" pos:end="1487:58">(<argument pos:start="1487:44" pos:end="1487:46"><expr pos:start="1487:44" pos:end="1487:46"><name pos:start="1487:44" pos:end="1487:46">tmp</name></expr></argument>, <argument pos:start="1487:49" pos:end="1487:51"><expr pos:start="1487:49" pos:end="1487:51"><name pos:start="1487:49" pos:end="1487:51">tmp</name></expr></argument>, <argument pos:start="1487:54" pos:end="1487:57"><expr pos:start="1487:54" pos:end="1487:57"><name pos:start="1487:54" pos:end="1487:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1489:29" pos:end="1489:52"><expr pos:start="1489:29" pos:end="1489:51"><call pos:start="1489:29" pos:end="1489:51"><name pos:start="1489:29" pos:end="1489:45">tcg_temp_free_i32</name><argument_list pos:start="1489:46" pos:end="1489:51">(<argument pos:start="1489:47" pos:end="1489:50"><expr pos:start="1489:47" pos:end="1489:50"><name pos:start="1489:47" pos:end="1489:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1493:25" pos:end="1493:54"><expr pos:start="1493:25" pos:end="1493:53"><call pos:start="1493:25" pos:end="1493:53"><name pos:start="1493:25" pos:end="1493:38">neon_store_reg</name><argument_list pos:start="1493:39" pos:end="1493:53">(<argument pos:start="1493:40" pos:end="1493:41"><expr pos:start="1493:40" pos:end="1493:41"><name pos:start="1493:40" pos:end="1493:41">rd</name></expr></argument>, <argument pos:start="1493:44" pos:end="1493:47"><expr pos:start="1493:44" pos:end="1493:47"><name pos:start="1493:44" pos:end="1493:47">pass</name></expr></argument>, <argument pos:start="1493:50" pos:end="1493:52"><expr pos:start="1493:50" pos:end="1493:52"><name pos:start="1493:50" pos:end="1493:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for> <comment type="block" pos:start="1497:19" pos:end="1497:32">/* for pass */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="1499:15" pos:end="1645:13">else if <condition pos:start="1499:23" pos:end="1499:31">(<expr pos:start="1499:24" pos:end="1499:30"><name pos:start="1499:24" pos:end="1499:25">op</name> <operator pos:start="1499:27" pos:end="1499:27">&lt;</operator> <literal type="number" pos:start="1499:29" pos:end="1499:30">10</literal></expr>)</condition> <block pos:start="1499:33" pos:end="1645:13">{<block_content pos:start="1505:17" pos:end="1643:17">

                <comment type="block" pos:start="1501:17" pos:end="1503:54">/* Shift by immediate and narrow:

                   VSHRN, VRSHRN, VQSHRN, VQRSHRN.  */</comment>

                <decl_stmt pos:start="1505:17" pos:end="1505:56"><decl pos:start="1505:17" pos:end="1505:55"><type pos:start="1505:17" pos:end="1505:19"><name pos:start="1505:17" pos:end="1505:19">int</name></type> <name pos:start="1505:21" pos:end="1505:34">input_unsigned</name> <init pos:start="1505:36" pos:end="1505:55">= <expr pos:start="1505:38" pos:end="1505:55"><ternary pos:start="1505:38" pos:end="1505:55"><condition pos:start="1505:38" pos:end="1505:48"><expr pos:start="1505:38" pos:end="1505:46"><operator pos:start="1505:38" pos:end="1505:38">(</operator><name pos:start="1505:39" pos:end="1505:40">op</name> <operator pos:start="1505:42" pos:end="1505:43">==</operator> <literal type="number" pos:start="1505:45" pos:end="1505:45">8</literal><operator pos:start="1505:46" pos:end="1505:46">)</operator></expr> ?</condition><then pos:start="1505:50" pos:end="1505:51"> <expr pos:start="1505:50" pos:end="1505:51"><operator pos:start="1505:50" pos:end="1505:50">!</operator><name pos:start="1505:51" pos:end="1505:51">u</name></expr> </then><else pos:start="1505:53" pos:end="1505:55">: <expr pos:start="1505:55" pos:end="1505:55"><name pos:start="1505:55" pos:end="1505:55">u</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1507:17" pos:end="1511:17"><if pos:start="1507:17" pos:end="1511:17">if <condition pos:start="1507:20" pos:end="1507:27">(<expr pos:start="1507:21" pos:end="1507:26"><name pos:start="1507:21" pos:end="1507:22">rm</name> <operator pos:start="1507:24" pos:end="1507:24">&amp;</operator> <literal type="number" pos:start="1507:26" pos:end="1507:26">1</literal></expr>)</condition> <block pos:start="1507:29" pos:end="1511:17">{<block_content pos:start="1509:21" pos:end="1509:29">

                    <return pos:start="1509:21" pos:end="1509:29">return <expr pos:start="1509:28" pos:end="1509:28"><literal type="number" pos:start="1509:28" pos:end="1509:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1513:17" pos:end="1513:50"><expr pos:start="1513:17" pos:end="1513:49"><name pos:start="1513:17" pos:end="1513:21">shift</name> <operator pos:start="1513:23" pos:end="1513:23">=</operator> <name pos:start="1513:25" pos:end="1513:29">shift</name> <operator pos:start="1513:31" pos:end="1513:31">-</operator> <operator pos:start="1513:33" pos:end="1513:33">(</operator><literal type="number" pos:start="1513:34" pos:end="1513:34">1</literal> <operator pos:start="1513:36" pos:end="1513:37">&lt;&lt;</operator> <operator pos:start="1513:39" pos:end="1513:39">(</operator><name pos:start="1513:40" pos:end="1513:43">size</name> <operator pos:start="1513:45" pos:end="1513:45">+</operator> <literal type="number" pos:start="1513:47" pos:end="1513:47">3</literal><operator pos:start="1513:48" pos:end="1513:48">)</operator><operator pos:start="1513:49" pos:end="1513:49">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1515:17" pos:end="1515:23"><expr pos:start="1515:17" pos:end="1515:22"><name pos:start="1515:17" pos:end="1515:20">size</name><operator pos:start="1515:21" pos:end="1515:22">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1517:17" pos:end="1643:17"><if pos:start="1517:17" pos:end="1575:17">if <condition pos:start="1517:20" pos:end="1517:30">(<expr pos:start="1517:21" pos:end="1517:29"><name pos:start="1517:21" pos:end="1517:24">size</name> <operator pos:start="1517:26" pos:end="1517:27">==</operator> <literal type="number" pos:start="1517:29" pos:end="1517:29">3</literal></expr>)</condition> <block pos:start="1517:32" pos:end="1575:17">{<block_content pos:start="1519:21" pos:end="1573:45">

                    <expr_stmt pos:start="1519:21" pos:end="1519:49"><expr pos:start="1519:21" pos:end="1519:48"><name pos:start="1519:21" pos:end="1519:25">tmp64</name> <operator pos:start="1519:27" pos:end="1519:27">=</operator> <call pos:start="1519:29" pos:end="1519:48"><name pos:start="1519:29" pos:end="1519:41">tcg_const_i64</name><argument_list pos:start="1519:42" pos:end="1519:48">(<argument pos:start="1519:43" pos:end="1519:47"><expr pos:start="1519:43" pos:end="1519:47"><name pos:start="1519:43" pos:end="1519:47">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1521:21" pos:end="1521:48"><expr pos:start="1521:21" pos:end="1521:47"><call pos:start="1521:21" pos:end="1521:47"><name pos:start="1521:21" pos:end="1521:35">neon_load_reg64</name><argument_list pos:start="1521:36" pos:end="1521:47">(<argument pos:start="1521:37" pos:end="1521:42"><expr pos:start="1521:37" pos:end="1521:42"><name pos:start="1521:37" pos:end="1521:42">cpu_V0</name></expr></argument>, <argument pos:start="1521:45" pos:end="1521:46"><expr pos:start="1521:45" pos:end="1521:46"><name pos:start="1521:45" pos:end="1521:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1523:21" pos:end="1523:52"><expr pos:start="1523:21" pos:end="1523:51"><call pos:start="1523:21" pos:end="1523:51"><name pos:start="1523:21" pos:end="1523:35">neon_load_reg64</name><argument_list pos:start="1523:36" pos:end="1523:51">(<argument pos:start="1523:37" pos:end="1523:42"><expr pos:start="1523:37" pos:end="1523:42"><name pos:start="1523:37" pos:end="1523:42">cpu_V1</name></expr></argument>, <argument pos:start="1523:45" pos:end="1523:50"><expr pos:start="1523:45" pos:end="1523:50"><name pos:start="1523:45" pos:end="1523:46">rm</name> <operator pos:start="1523:48" pos:end="1523:48">+</operator> <literal type="number" pos:start="1523:50" pos:end="1523:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="1525:21" pos:end="1571:21">for <control pos:start="1525:25" pos:end="1525:52">(<init pos:start="1525:26" pos:end="1525:34"><expr pos:start="1525:26" pos:end="1525:33"><name pos:start="1525:26" pos:end="1525:29">pass</name> <operator pos:start="1525:31" pos:end="1525:31">=</operator> <literal type="number" pos:start="1525:33" pos:end="1525:33">0</literal></expr>;</init> <condition pos:start="1525:36" pos:end="1525:44"><expr pos:start="1525:36" pos:end="1525:43"><name pos:start="1525:36" pos:end="1525:39">pass</name> <operator pos:start="1525:41" pos:end="1525:41">&lt;</operator> <literal type="number" pos:start="1525:43" pos:end="1525:43">2</literal></expr>;</condition> <incr pos:start="1525:46" pos:end="1525:51"><expr pos:start="1525:46" pos:end="1525:51"><name pos:start="1525:46" pos:end="1525:49">pass</name><operator pos:start="1525:50" pos:end="1525:51">++</operator></expr></incr>)</control> <block pos:start="1525:54" pos:end="1571:21">{<block_content pos:start="1527:25" pos:end="1569:54">

                        <decl_stmt pos:start="1527:25" pos:end="1527:36"><decl pos:start="1527:25" pos:end="1527:35"><type pos:start="1527:25" pos:end="1527:32"><name pos:start="1527:25" pos:end="1527:32">TCGv_i64</name></type> <name pos:start="1527:34" pos:end="1527:35">in</name></decl>;</decl_stmt>

                        <if_stmt pos:start="1529:25" pos:end="1537:25"><if pos:start="1529:25" pos:end="1533:25">if <condition pos:start="1529:28" pos:end="1529:38">(<expr pos:start="1529:29" pos:end="1529:37"><name pos:start="1529:29" pos:end="1529:32">pass</name> <operator pos:start="1529:34" pos:end="1529:35">==</operator> <literal type="number" pos:start="1529:37" pos:end="1529:37">0</literal></expr>)</condition> <block pos:start="1529:40" pos:end="1533:25">{<block_content pos:start="1531:29" pos:end="1531:40">

                            <expr_stmt pos:start="1531:29" pos:end="1531:40"><expr pos:start="1531:29" pos:end="1531:39"><name pos:start="1531:29" pos:end="1531:30">in</name> <operator pos:start="1531:32" pos:end="1531:32">=</operator> <name pos:start="1531:34" pos:end="1531:39">cpu_V0</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1533:27" pos:end="1537:25">else <block pos:start="1533:32" pos:end="1537:25">{<block_content pos:start="1535:29" pos:end="1535:40">

                            <expr_stmt pos:start="1535:29" pos:end="1535:40"><expr pos:start="1535:29" pos:end="1535:39"><name pos:start="1535:29" pos:end="1535:30">in</name> <operator pos:start="1535:32" pos:end="1535:32">=</operator> <name pos:start="1535:34" pos:end="1535:39">cpu_V1</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1539:25" pos:end="1563:25"><if pos:start="1539:25" pos:end="1551:25">if <condition pos:start="1539:28" pos:end="1539:30">(<expr pos:start="1539:29" pos:end="1539:29"><name pos:start="1539:29" pos:end="1539:29">q</name></expr>)</condition> <block pos:start="1539:32" pos:end="1551:25">{<block_content pos:start="1541:29" pos:end="1549:29">

                            <if_stmt pos:start="1541:29" pos:end="1549:29"><if pos:start="1541:29" pos:end="1545:29">if <condition pos:start="1541:32" pos:end="1541:47">(<expr pos:start="1541:33" pos:end="1541:46"><name pos:start="1541:33" pos:end="1541:46">input_unsigned</name></expr>)</condition> <block pos:start="1541:49" pos:end="1545:29">{<block_content pos:start="1543:33" pos:end="1543:76">

                                <expr_stmt pos:start="1543:33" pos:end="1543:76"><expr pos:start="1543:33" pos:end="1543:75"><call pos:start="1543:33" pos:end="1543:75"><name pos:start="1543:33" pos:end="1543:56">gen_helper_neon_rshl_u64</name><argument_list pos:start="1543:57" pos:end="1543:75">(<argument pos:start="1543:58" pos:end="1543:63"><expr pos:start="1543:58" pos:end="1543:63"><name pos:start="1543:58" pos:end="1543:63">cpu_V0</name></expr></argument>, <argument pos:start="1543:66" pos:end="1543:67"><expr pos:start="1543:66" pos:end="1543:67"><name pos:start="1543:66" pos:end="1543:67">in</name></expr></argument>, <argument pos:start="1543:70" pos:end="1543:74"><expr pos:start="1543:70" pos:end="1543:74"><name pos:start="1543:70" pos:end="1543:74">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1545:31" pos:end="1549:29">else <block pos:start="1545:36" pos:end="1549:29">{<block_content pos:start="1547:33" pos:end="1547:76">

                                <expr_stmt pos:start="1547:33" pos:end="1547:76"><expr pos:start="1547:33" pos:end="1547:75"><call pos:start="1547:33" pos:end="1547:75"><name pos:start="1547:33" pos:end="1547:56">gen_helper_neon_rshl_s64</name><argument_list pos:start="1547:57" pos:end="1547:75">(<argument pos:start="1547:58" pos:end="1547:63"><expr pos:start="1547:58" pos:end="1547:63"><name pos:start="1547:58" pos:end="1547:63">cpu_V0</name></expr></argument>, <argument pos:start="1547:66" pos:end="1547:67"><expr pos:start="1547:66" pos:end="1547:67"><name pos:start="1547:66" pos:end="1547:67">in</name></expr></argument>, <argument pos:start="1547:70" pos:end="1547:74"><expr pos:start="1547:70" pos:end="1547:74"><name pos:start="1547:70" pos:end="1547:74">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="1551:27" pos:end="1563:25">else <block pos:start="1551:32" pos:end="1563:25">{<block_content pos:start="1553:29" pos:end="1561:29">

                            <if_stmt pos:start="1553:29" pos:end="1561:29"><if pos:start="1553:29" pos:end="1557:29">if <condition pos:start="1553:32" pos:end="1553:47">(<expr pos:start="1553:33" pos:end="1553:46"><name pos:start="1553:33" pos:end="1553:46">input_unsigned</name></expr>)</condition> <block pos:start="1553:49" pos:end="1557:29">{<block_content pos:start="1555:33" pos:end="1555:75">

                                <expr_stmt pos:start="1555:33" pos:end="1555:75"><expr pos:start="1555:33" pos:end="1555:74"><call pos:start="1555:33" pos:end="1555:74"><name pos:start="1555:33" pos:end="1555:55">gen_helper_neon_shl_u64</name><argument_list pos:start="1555:56" pos:end="1555:74">(<argument pos:start="1555:57" pos:end="1555:62"><expr pos:start="1555:57" pos:end="1555:62"><name pos:start="1555:57" pos:end="1555:62">cpu_V0</name></expr></argument>, <argument pos:start="1555:65" pos:end="1555:66"><expr pos:start="1555:65" pos:end="1555:66"><name pos:start="1555:65" pos:end="1555:66">in</name></expr></argument>, <argument pos:start="1555:69" pos:end="1555:73"><expr pos:start="1555:69" pos:end="1555:73"><name pos:start="1555:69" pos:end="1555:73">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1557:31" pos:end="1561:29">else <block pos:start="1557:36" pos:end="1561:29">{<block_content pos:start="1559:33" pos:end="1559:75">

                                <expr_stmt pos:start="1559:33" pos:end="1559:75"><expr pos:start="1559:33" pos:end="1559:74"><call pos:start="1559:33" pos:end="1559:74"><name pos:start="1559:33" pos:end="1559:55">gen_helper_neon_shl_s64</name><argument_list pos:start="1559:56" pos:end="1559:74">(<argument pos:start="1559:57" pos:end="1559:62"><expr pos:start="1559:57" pos:end="1559:62"><name pos:start="1559:57" pos:end="1559:62">cpu_V0</name></expr></argument>, <argument pos:start="1559:65" pos:end="1559:66"><expr pos:start="1559:65" pos:end="1559:66"><name pos:start="1559:65" pos:end="1559:66">in</name></expr></argument>, <argument pos:start="1559:69" pos:end="1559:73"><expr pos:start="1559:69" pos:end="1559:73"><name pos:start="1559:69" pos:end="1559:73">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1565:25" pos:end="1565:49"><expr pos:start="1565:25" pos:end="1565:48"><name pos:start="1565:25" pos:end="1565:27">tmp</name> <operator pos:start="1565:29" pos:end="1565:29">=</operator> <call pos:start="1565:31" pos:end="1565:48"><name pos:start="1565:31" pos:end="1565:46">tcg_temp_new_i32</name><argument_list pos:start="1565:47" pos:end="1565:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1567:25" pos:end="1567:78"><expr pos:start="1567:25" pos:end="1567:77"><call pos:start="1567:25" pos:end="1567:77"><name pos:start="1567:25" pos:end="1567:42">gen_neon_narrow_op</name><argument_list pos:start="1567:43" pos:end="1567:77">(<argument pos:start="1567:44" pos:end="1567:50"><expr pos:start="1567:44" pos:end="1567:50"><name pos:start="1567:44" pos:end="1567:45">op</name> <operator pos:start="1567:47" pos:end="1567:48">==</operator> <literal type="number" pos:start="1567:50" pos:end="1567:50">8</literal></expr></argument>, <argument pos:start="1567:53" pos:end="1567:53"><expr pos:start="1567:53" pos:end="1567:53"><name pos:start="1567:53" pos:end="1567:53">u</name></expr></argument>, <argument pos:start="1567:56" pos:end="1567:63"><expr pos:start="1567:56" pos:end="1567:63"><name pos:start="1567:56" pos:end="1567:59">size</name> <operator pos:start="1567:61" pos:end="1567:61">-</operator> <literal type="number" pos:start="1567:63" pos:end="1567:63">1</literal></expr></argument>, <argument pos:start="1567:66" pos:end="1567:68"><expr pos:start="1567:66" pos:end="1567:68"><name pos:start="1567:66" pos:end="1567:68">tmp</name></expr></argument>, <argument pos:start="1567:71" pos:end="1567:76"><expr pos:start="1567:71" pos:end="1567:76"><name pos:start="1567:71" pos:end="1567:76">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1569:25" pos:end="1569:54"><expr pos:start="1569:25" pos:end="1569:53"><call pos:start="1569:25" pos:end="1569:53"><name pos:start="1569:25" pos:end="1569:38">neon_store_reg</name><argument_list pos:start="1569:39" pos:end="1569:53">(<argument pos:start="1569:40" pos:end="1569:41"><expr pos:start="1569:40" pos:end="1569:41"><name pos:start="1569:40" pos:end="1569:41">rd</name></expr></argument>, <argument pos:start="1569:44" pos:end="1569:47"><expr pos:start="1569:44" pos:end="1569:47"><name pos:start="1569:44" pos:end="1569:47">pass</name></expr></argument>, <argument pos:start="1569:50" pos:end="1569:52"><expr pos:start="1569:50" pos:end="1569:52"><name pos:start="1569:50" pos:end="1569:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for> <comment type="block" pos:start="1571:23" pos:end="1571:36">/* for pass */</comment>

                    <expr_stmt pos:start="1573:21" pos:end="1573:45"><expr pos:start="1573:21" pos:end="1573:44"><call pos:start="1573:21" pos:end="1573:44"><name pos:start="1573:21" pos:end="1573:37">tcg_temp_free_i64</name><argument_list pos:start="1573:38" pos:end="1573:44">(<argument pos:start="1573:39" pos:end="1573:43"><expr pos:start="1573:39" pos:end="1573:43"><name pos:start="1573:39" pos:end="1573:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1575:19" pos:end="1643:17">else <block pos:start="1575:24" pos:end="1643:17">{<block_content pos:start="1577:21" pos:end="1641:44">

                    <if_stmt pos:start="1577:21" pos:end="1589:21"><if pos:start="1577:21" pos:end="1583:21">if <condition pos:start="1577:24" pos:end="1577:34">(<expr pos:start="1577:25" pos:end="1577:33"><name pos:start="1577:25" pos:end="1577:28">size</name> <operator pos:start="1577:30" pos:end="1577:31">==</operator> <literal type="number" pos:start="1577:33" pos:end="1577:33">1</literal></expr>)</condition> <block pos:start="1577:36" pos:end="1583:21">{<block_content pos:start="1579:25" pos:end="1581:41">

                        <expr_stmt pos:start="1579:25" pos:end="1579:46"><expr pos:start="1579:25" pos:end="1579:45"><name pos:start="1579:25" pos:end="1579:27">imm</name> <operator pos:start="1579:29" pos:end="1579:29">=</operator> <operator pos:start="1579:31" pos:end="1579:31">(</operator><name pos:start="1579:32" pos:end="1579:39">uint16_t</name><operator pos:start="1579:40" pos:end="1579:40">)</operator><name pos:start="1579:41" pos:end="1579:45">shift</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1581:25" pos:end="1581:41"><expr pos:start="1581:25" pos:end="1581:40"><name pos:start="1581:25" pos:end="1581:27">imm</name> <operator pos:start="1581:29" pos:end="1581:30">|=</operator> <name pos:start="1581:32" pos:end="1581:34">imm</name> <operator pos:start="1581:36" pos:end="1581:37">&lt;&lt;</operator> <literal type="number" pos:start="1581:39" pos:end="1581:40">16</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1583:23" pos:end="1589:21">else <block pos:start="1583:28" pos:end="1589:21">{<block_content pos:start="1587:25" pos:end="1587:46">

                        <comment type="block" pos:start="1585:25" pos:end="1585:39">/* size == 2 */</comment>

                        <expr_stmt pos:start="1587:25" pos:end="1587:46"><expr pos:start="1587:25" pos:end="1587:45"><name pos:start="1587:25" pos:end="1587:27">imm</name> <operator pos:start="1587:29" pos:end="1587:29">=</operator> <operator pos:start="1587:31" pos:end="1587:31">(</operator><name pos:start="1587:32" pos:end="1587:39">uint32_t</name><operator pos:start="1587:40" pos:end="1587:40">)</operator><name pos:start="1587:41" pos:end="1587:45">shift</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1591:21" pos:end="1591:46"><expr pos:start="1591:21" pos:end="1591:45"><name pos:start="1591:21" pos:end="1591:24">tmp2</name> <operator pos:start="1591:26" pos:end="1591:26">=</operator> <call pos:start="1591:28" pos:end="1591:45"><name pos:start="1591:28" pos:end="1591:40">tcg_const_i32</name><argument_list pos:start="1591:41" pos:end="1591:45">(<argument pos:start="1591:42" pos:end="1591:44"><expr pos:start="1591:42" pos:end="1591:44"><name pos:start="1591:42" pos:end="1591:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1593:21" pos:end="1593:52"><expr pos:start="1593:21" pos:end="1593:51"><name pos:start="1593:21" pos:end="1593:24">tmp4</name> <operator pos:start="1593:26" pos:end="1593:26">=</operator> <call pos:start="1593:28" pos:end="1593:51"><name pos:start="1593:28" pos:end="1593:40">neon_load_reg</name><argument_list pos:start="1593:41" pos:end="1593:51">(<argument pos:start="1593:42" pos:end="1593:47"><expr pos:start="1593:42" pos:end="1593:47"><name pos:start="1593:42" pos:end="1593:43">rm</name> <operator pos:start="1593:45" pos:end="1593:45">+</operator> <literal type="number" pos:start="1593:47" pos:end="1593:47">1</literal></expr></argument>, <argument pos:start="1593:50" pos:end="1593:50"><expr pos:start="1593:50" pos:end="1593:50"><literal type="number" pos:start="1593:50" pos:end="1593:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1595:21" pos:end="1595:52"><expr pos:start="1595:21" pos:end="1595:51"><name pos:start="1595:21" pos:end="1595:24">tmp5</name> <operator pos:start="1595:26" pos:end="1595:26">=</operator> <call pos:start="1595:28" pos:end="1595:51"><name pos:start="1595:28" pos:end="1595:40">neon_load_reg</name><argument_list pos:start="1595:41" pos:end="1595:51">(<argument pos:start="1595:42" pos:end="1595:47"><expr pos:start="1595:42" pos:end="1595:47"><name pos:start="1595:42" pos:end="1595:43">rm</name> <operator pos:start="1595:45" pos:end="1595:45">+</operator> <literal type="number" pos:start="1595:47" pos:end="1595:47">1</literal></expr></argument>, <argument pos:start="1595:50" pos:end="1595:50"><expr pos:start="1595:50" pos:end="1595:50"><literal type="number" pos:start="1595:50" pos:end="1595:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="1597:21" pos:end="1639:21">for <control pos:start="1597:25" pos:end="1597:52">(<init pos:start="1597:26" pos:end="1597:34"><expr pos:start="1597:26" pos:end="1597:33"><name pos:start="1597:26" pos:end="1597:29">pass</name> <operator pos:start="1597:31" pos:end="1597:31">=</operator> <literal type="number" pos:start="1597:33" pos:end="1597:33">0</literal></expr>;</init> <condition pos:start="1597:36" pos:end="1597:44"><expr pos:start="1597:36" pos:end="1597:43"><name pos:start="1597:36" pos:end="1597:39">pass</name> <operator pos:start="1597:41" pos:end="1597:41">&lt;</operator> <literal type="number" pos:start="1597:43" pos:end="1597:43">2</literal></expr>;</condition> <incr pos:start="1597:46" pos:end="1597:51"><expr pos:start="1597:46" pos:end="1597:51"><name pos:start="1597:46" pos:end="1597:49">pass</name><operator pos:start="1597:50" pos:end="1597:51">++</operator></expr></incr>)</control> <block pos:start="1597:54" pos:end="1639:21">{<block_content pos:start="1599:25" pos:end="1637:54">

                        <if_stmt pos:start="1599:25" pos:end="1607:25"><if pos:start="1599:25" pos:end="1603:25">if <condition pos:start="1599:28" pos:end="1599:38">(<expr pos:start="1599:29" pos:end="1599:37"><name pos:start="1599:29" pos:end="1599:32">pass</name> <operator pos:start="1599:34" pos:end="1599:35">==</operator> <literal type="number" pos:start="1599:37" pos:end="1599:37">0</literal></expr>)</condition> <block pos:start="1599:40" pos:end="1603:25">{<block_content pos:start="1601:29" pos:end="1601:55">

                            <expr_stmt pos:start="1601:29" pos:end="1601:55"><expr pos:start="1601:29" pos:end="1601:54"><name pos:start="1601:29" pos:end="1601:31">tmp</name> <operator pos:start="1601:33" pos:end="1601:33">=</operator> <call pos:start="1601:35" pos:end="1601:54"><name pos:start="1601:35" pos:end="1601:47">neon_load_reg</name><argument_list pos:start="1601:48" pos:end="1601:54">(<argument pos:start="1601:49" pos:end="1601:50"><expr pos:start="1601:49" pos:end="1601:50"><name pos:start="1601:49" pos:end="1601:50">rm</name></expr></argument>, <argument pos:start="1601:53" pos:end="1601:53"><expr pos:start="1601:53" pos:end="1601:53"><literal type="number" pos:start="1601:53" pos:end="1601:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1603:27" pos:end="1607:25">else <block pos:start="1603:32" pos:end="1607:25">{<block_content pos:start="1605:29" pos:end="1605:39">

                            <expr_stmt pos:start="1605:29" pos:end="1605:39"><expr pos:start="1605:29" pos:end="1605:38"><name pos:start="1605:29" pos:end="1605:31">tmp</name> <operator pos:start="1605:33" pos:end="1605:33">=</operator> <name pos:start="1605:35" pos:end="1605:38">tmp4</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1609:25" pos:end="1611:62"><expr pos:start="1609:25" pos:end="1611:61"><call pos:start="1609:25" pos:end="1611:61"><name pos:start="1609:25" pos:end="1609:45">gen_neon_shift_narrow</name><argument_list pos:start="1609:46" pos:end="1611:61">(<argument pos:start="1609:47" pos:end="1609:50"><expr pos:start="1609:47" pos:end="1609:50"><name pos:start="1609:47" pos:end="1609:50">size</name></expr></argument>, <argument pos:start="1609:53" pos:end="1609:55"><expr pos:start="1609:53" pos:end="1609:55"><name pos:start="1609:53" pos:end="1609:55">tmp</name></expr></argument>, <argument pos:start="1609:58" pos:end="1609:61"><expr pos:start="1609:58" pos:end="1609:61"><name pos:start="1609:58" pos:end="1609:61">tmp2</name></expr></argument>, <argument pos:start="1609:64" pos:end="1609:64"><expr pos:start="1609:64" pos:end="1609:64"><name pos:start="1609:64" pos:end="1609:64">q</name></expr></argument>,

                                              <argument pos:start="1611:47" pos:end="1611:60"><expr pos:start="1611:47" pos:end="1611:60"><name pos:start="1611:47" pos:end="1611:60">input_unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1613:25" pos:end="1621:25"><if pos:start="1613:25" pos:end="1617:25">if <condition pos:start="1613:28" pos:end="1613:38">(<expr pos:start="1613:29" pos:end="1613:37"><name pos:start="1613:29" pos:end="1613:32">pass</name> <operator pos:start="1613:34" pos:end="1613:35">==</operator> <literal type="number" pos:start="1613:37" pos:end="1613:37">0</literal></expr>)</condition> <block pos:start="1613:40" pos:end="1617:25">{<block_content pos:start="1615:29" pos:end="1615:56">

                            <expr_stmt pos:start="1615:29" pos:end="1615:56"><expr pos:start="1615:29" pos:end="1615:55"><name pos:start="1615:29" pos:end="1615:32">tmp3</name> <operator pos:start="1615:34" pos:end="1615:34">=</operator> <call pos:start="1615:36" pos:end="1615:55"><name pos:start="1615:36" pos:end="1615:48">neon_load_reg</name><argument_list pos:start="1615:49" pos:end="1615:55">(<argument pos:start="1615:50" pos:end="1615:51"><expr pos:start="1615:50" pos:end="1615:51"><name pos:start="1615:50" pos:end="1615:51">rm</name></expr></argument>, <argument pos:start="1615:54" pos:end="1615:54"><expr pos:start="1615:54" pos:end="1615:54"><literal type="number" pos:start="1615:54" pos:end="1615:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1617:27" pos:end="1621:25">else <block pos:start="1617:32" pos:end="1621:25">{<block_content pos:start="1619:29" pos:end="1619:40">

                            <expr_stmt pos:start="1619:29" pos:end="1619:40"><expr pos:start="1619:29" pos:end="1619:39"><name pos:start="1619:29" pos:end="1619:32">tmp3</name> <operator pos:start="1619:34" pos:end="1619:34">=</operator> <name pos:start="1619:36" pos:end="1619:39">tmp5</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1623:25" pos:end="1625:62"><expr pos:start="1623:25" pos:end="1625:61"><call pos:start="1623:25" pos:end="1625:61"><name pos:start="1623:25" pos:end="1623:45">gen_neon_shift_narrow</name><argument_list pos:start="1623:46" pos:end="1625:61">(<argument pos:start="1623:47" pos:end="1623:50"><expr pos:start="1623:47" pos:end="1623:50"><name pos:start="1623:47" pos:end="1623:50">size</name></expr></argument>, <argument pos:start="1623:53" pos:end="1623:56"><expr pos:start="1623:53" pos:end="1623:56"><name pos:start="1623:53" pos:end="1623:56">tmp3</name></expr></argument>, <argument pos:start="1623:59" pos:end="1623:62"><expr pos:start="1623:59" pos:end="1623:62"><name pos:start="1623:59" pos:end="1623:62">tmp2</name></expr></argument>, <argument pos:start="1623:65" pos:end="1623:65"><expr pos:start="1623:65" pos:end="1623:65"><name pos:start="1623:65" pos:end="1623:65">q</name></expr></argument>,

                                              <argument pos:start="1625:47" pos:end="1625:60"><expr pos:start="1625:47" pos:end="1625:60"><name pos:start="1625:47" pos:end="1625:60">input_unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1627:25" pos:end="1627:66"><expr pos:start="1627:25" pos:end="1627:65"><call pos:start="1627:25" pos:end="1627:65"><name pos:start="1627:25" pos:end="1627:46">tcg_gen_concat_i32_i64</name><argument_list pos:start="1627:47" pos:end="1627:65">(<argument pos:start="1627:48" pos:end="1627:53"><expr pos:start="1627:48" pos:end="1627:53"><name pos:start="1627:48" pos:end="1627:53">cpu_V0</name></expr></argument>, <argument pos:start="1627:56" pos:end="1627:58"><expr pos:start="1627:56" pos:end="1627:58"><name pos:start="1627:56" pos:end="1627:58">tmp</name></expr></argument>, <argument pos:start="1627:61" pos:end="1627:64"><expr pos:start="1627:61" pos:end="1627:64"><name pos:start="1627:61" pos:end="1627:64">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1629:25" pos:end="1629:47"><expr pos:start="1629:25" pos:end="1629:46"><call pos:start="1629:25" pos:end="1629:46"><name pos:start="1629:25" pos:end="1629:41">tcg_temp_free_i32</name><argument_list pos:start="1629:42" pos:end="1629:46">(<argument pos:start="1629:43" pos:end="1629:45"><expr pos:start="1629:43" pos:end="1629:45"><name pos:start="1629:43" pos:end="1629:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1631:25" pos:end="1631:48"><expr pos:start="1631:25" pos:end="1631:47"><call pos:start="1631:25" pos:end="1631:47"><name pos:start="1631:25" pos:end="1631:41">tcg_temp_free_i32</name><argument_list pos:start="1631:42" pos:end="1631:47">(<argument pos:start="1631:43" pos:end="1631:46"><expr pos:start="1631:43" pos:end="1631:46"><name pos:start="1631:43" pos:end="1631:46">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1633:25" pos:end="1633:49"><expr pos:start="1633:25" pos:end="1633:48"><name pos:start="1633:25" pos:end="1633:27">tmp</name> <operator pos:start="1633:29" pos:end="1633:29">=</operator> <call pos:start="1633:31" pos:end="1633:48"><name pos:start="1633:31" pos:end="1633:46">tcg_temp_new_i32</name><argument_list pos:start="1633:47" pos:end="1633:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1635:25" pos:end="1635:78"><expr pos:start="1635:25" pos:end="1635:77"><call pos:start="1635:25" pos:end="1635:77"><name pos:start="1635:25" pos:end="1635:42">gen_neon_narrow_op</name><argument_list pos:start="1635:43" pos:end="1635:77">(<argument pos:start="1635:44" pos:end="1635:50"><expr pos:start="1635:44" pos:end="1635:50"><name pos:start="1635:44" pos:end="1635:45">op</name> <operator pos:start="1635:47" pos:end="1635:48">==</operator> <literal type="number" pos:start="1635:50" pos:end="1635:50">8</literal></expr></argument>, <argument pos:start="1635:53" pos:end="1635:53"><expr pos:start="1635:53" pos:end="1635:53"><name pos:start="1635:53" pos:end="1635:53">u</name></expr></argument>, <argument pos:start="1635:56" pos:end="1635:63"><expr pos:start="1635:56" pos:end="1635:63"><name pos:start="1635:56" pos:end="1635:59">size</name> <operator pos:start="1635:61" pos:end="1635:61">-</operator> <literal type="number" pos:start="1635:63" pos:end="1635:63">1</literal></expr></argument>, <argument pos:start="1635:66" pos:end="1635:68"><expr pos:start="1635:66" pos:end="1635:68"><name pos:start="1635:66" pos:end="1635:68">tmp</name></expr></argument>, <argument pos:start="1635:71" pos:end="1635:76"><expr pos:start="1635:71" pos:end="1635:76"><name pos:start="1635:71" pos:end="1635:76">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1637:25" pos:end="1637:54"><expr pos:start="1637:25" pos:end="1637:53"><call pos:start="1637:25" pos:end="1637:53"><name pos:start="1637:25" pos:end="1637:38">neon_store_reg</name><argument_list pos:start="1637:39" pos:end="1637:53">(<argument pos:start="1637:40" pos:end="1637:41"><expr pos:start="1637:40" pos:end="1637:41"><name pos:start="1637:40" pos:end="1637:41">rd</name></expr></argument>, <argument pos:start="1637:44" pos:end="1637:47"><expr pos:start="1637:44" pos:end="1637:47"><name pos:start="1637:44" pos:end="1637:47">pass</name></expr></argument>, <argument pos:start="1637:50" pos:end="1637:52"><expr pos:start="1637:50" pos:end="1637:52"><name pos:start="1637:50" pos:end="1637:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for> <comment type="block" pos:start="1639:23" pos:end="1639:36">/* for pass */</comment>

                    <expr_stmt pos:start="1641:21" pos:end="1641:44"><expr pos:start="1641:21" pos:end="1641:43"><call pos:start="1641:21" pos:end="1641:43"><name pos:start="1641:21" pos:end="1641:37">tcg_temp_free_i32</name><argument_list pos:start="1641:38" pos:end="1641:43">(<argument pos:start="1641:39" pos:end="1641:42"><expr pos:start="1641:39" pos:end="1641:42"><name pos:start="1641:39" pos:end="1641:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1645:15" pos:end="1731:13">else if <condition pos:start="1645:23" pos:end="1645:32">(<expr pos:start="1645:24" pos:end="1645:31"><name pos:start="1645:24" pos:end="1645:25">op</name> <operator pos:start="1645:27" pos:end="1645:28">==</operator> <literal type="number" pos:start="1645:30" pos:end="1645:31">10</literal></expr>)</condition> <block pos:start="1645:34" pos:end="1731:13">{<block_content pos:start="1649:17" pos:end="1729:17">

                <comment type="block" pos:start="1647:17" pos:end="1647:34">/* VSHLL, VMOVL */</comment>

                <if_stmt pos:start="1649:17" pos:end="1653:17"><if pos:start="1649:17" pos:end="1653:17">if <condition pos:start="1649:20" pos:end="1649:34">(<expr pos:start="1649:21" pos:end="1649:33"><name pos:start="1649:21" pos:end="1649:21">q</name> <operator pos:start="1649:23" pos:end="1649:24">||</operator> <operator pos:start="1649:26" pos:end="1649:26">(</operator><name pos:start="1649:27" pos:end="1649:28">rd</name> <operator pos:start="1649:30" pos:end="1649:30">&amp;</operator> <literal type="number" pos:start="1649:32" pos:end="1649:32">1</literal><operator pos:start="1649:33" pos:end="1649:33">)</operator></expr>)</condition> <block pos:start="1649:36" pos:end="1653:17">{<block_content pos:start="1651:21" pos:end="1651:29">

                    <return pos:start="1651:21" pos:end="1651:29">return <expr pos:start="1651:28" pos:end="1651:28"><literal type="number" pos:start="1651:28" pos:end="1651:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1655:17" pos:end="1655:43"><expr pos:start="1655:17" pos:end="1655:42"><name pos:start="1655:17" pos:end="1655:19">tmp</name> <operator pos:start="1655:21" pos:end="1655:21">=</operator> <call pos:start="1655:23" pos:end="1655:42"><name pos:start="1655:23" pos:end="1655:35">neon_load_reg</name><argument_list pos:start="1655:36" pos:end="1655:42">(<argument pos:start="1655:37" pos:end="1655:38"><expr pos:start="1655:37" pos:end="1655:38"><name pos:start="1655:37" pos:end="1655:38">rm</name></expr></argument>, <argument pos:start="1655:41" pos:end="1655:41"><expr pos:start="1655:41" pos:end="1655:41"><literal type="number" pos:start="1655:41" pos:end="1655:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1657:17" pos:end="1657:44"><expr pos:start="1657:17" pos:end="1657:43"><name pos:start="1657:17" pos:end="1657:20">tmp2</name> <operator pos:start="1657:22" pos:end="1657:22">=</operator> <call pos:start="1657:24" pos:end="1657:43"><name pos:start="1657:24" pos:end="1657:36">neon_load_reg</name><argument_list pos:start="1657:37" pos:end="1657:43">(<argument pos:start="1657:38" pos:end="1657:39"><expr pos:start="1657:38" pos:end="1657:39"><name pos:start="1657:38" pos:end="1657:39">rm</name></expr></argument>, <argument pos:start="1657:42" pos:end="1657:42"><expr pos:start="1657:42" pos:end="1657:42"><literal type="number" pos:start="1657:42" pos:end="1657:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="1659:17" pos:end="1729:17">for <control pos:start="1659:21" pos:end="1659:48">(<init pos:start="1659:22" pos:end="1659:30"><expr pos:start="1659:22" pos:end="1659:29"><name pos:start="1659:22" pos:end="1659:25">pass</name> <operator pos:start="1659:27" pos:end="1659:27">=</operator> <literal type="number" pos:start="1659:29" pos:end="1659:29">0</literal></expr>;</init> <condition pos:start="1659:32" pos:end="1659:40"><expr pos:start="1659:32" pos:end="1659:39"><name pos:start="1659:32" pos:end="1659:35">pass</name> <operator pos:start="1659:37" pos:end="1659:37">&lt;</operator> <literal type="number" pos:start="1659:39" pos:end="1659:39">2</literal></expr>;</condition> <incr pos:start="1659:42" pos:end="1659:47"><expr pos:start="1659:42" pos:end="1659:47"><name pos:start="1659:42" pos:end="1659:45">pass</name><operator pos:start="1659:46" pos:end="1659:47">++</operator></expr></incr>)</control> <block pos:start="1659:50" pos:end="1729:17">{<block_content pos:start="1661:21" pos:end="1727:56">

                    <if_stmt pos:start="1661:21" pos:end="1663:35"><if pos:start="1661:21" pos:end="1663:35">if <condition pos:start="1661:24" pos:end="1661:34">(<expr pos:start="1661:25" pos:end="1661:33"><name pos:start="1661:25" pos:end="1661:28">pass</name> <operator pos:start="1661:30" pos:end="1661:31">==</operator> <literal type="number" pos:start="1661:33" pos:end="1661:33">1</literal></expr>)</condition><block type="pseudo" pos:start="1663:25" pos:end="1663:35"><block_content pos:start="1663:25" pos:end="1663:35">

                        <expr_stmt pos:start="1663:25" pos:end="1663:35"><expr pos:start="1663:25" pos:end="1663:34"><name pos:start="1663:25" pos:end="1663:27">tmp</name> <operator pos:start="1663:29" pos:end="1663:29">=</operator> <name pos:start="1663:31" pos:end="1663:34">tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="1667:21" pos:end="1667:57"><expr pos:start="1667:21" pos:end="1667:56"><call pos:start="1667:21" pos:end="1667:56"><name pos:start="1667:21" pos:end="1667:34">gen_neon_widen</name><argument_list pos:start="1667:35" pos:end="1667:56">(<argument pos:start="1667:36" pos:end="1667:41"><expr pos:start="1667:36" pos:end="1667:41"><name pos:start="1667:36" pos:end="1667:41">cpu_V0</name></expr></argument>, <argument pos:start="1667:44" pos:end="1667:46"><expr pos:start="1667:44" pos:end="1667:46"><name pos:start="1667:44" pos:end="1667:46">tmp</name></expr></argument>, <argument pos:start="1667:49" pos:end="1667:52"><expr pos:start="1667:49" pos:end="1667:52"><name pos:start="1667:49" pos:end="1667:52">size</name></expr></argument>, <argument pos:start="1667:55" pos:end="1667:55"><expr pos:start="1667:55" pos:end="1667:55"><name pos:start="1667:55" pos:end="1667:55">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="1671:21" pos:end="1725:21"><if pos:start="1671:21" pos:end="1725:21">if <condition pos:start="1671:24" pos:end="1671:35">(<expr pos:start="1671:25" pos:end="1671:34"><name pos:start="1671:25" pos:end="1671:29">shift</name> <operator pos:start="1671:31" pos:end="1671:32">!=</operator> <literal type="number" pos:start="1671:34" pos:end="1671:34">0</literal></expr>)</condition> <block pos:start="1671:37" pos:end="1725:21">{<block_content pos:start="1677:25" pos:end="1723:25">

                        <comment type="block" pos:start="1673:25" pos:end="1675:77">/* The shift is less than the width of the source

                           type, so we can just shift the whole register.  */</comment>

                        <expr_stmt pos:start="1677:25" pos:end="1677:64"><expr pos:start="1677:25" pos:end="1677:63"><call pos:start="1677:25" pos:end="1677:63"><name pos:start="1677:25" pos:end="1677:40">tcg_gen_shli_i64</name><argument_list pos:start="1677:41" pos:end="1677:63">(<argument pos:start="1677:42" pos:end="1677:47"><expr pos:start="1677:42" pos:end="1677:47"><name pos:start="1677:42" pos:end="1677:47">cpu_V0</name></expr></argument>, <argument pos:start="1677:50" pos:end="1677:55"><expr pos:start="1677:50" pos:end="1677:55"><name pos:start="1677:50" pos:end="1677:55">cpu_V0</name></expr></argument>, <argument pos:start="1677:58" pos:end="1677:62"><expr pos:start="1677:58" pos:end="1677:62"><name pos:start="1677:58" pos:end="1677:62">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="1679:25" pos:end="1687:37">/* Widen the result of shift: we need to clear

                         * the potential overflow bits resulting from

                         * left bits of the narrow input appearing as

                         * right bits of left the neighbour narrow

                         * input.  */</comment>

                        <if_stmt pos:start="1689:25" pos:end="1723:25"><if pos:start="1689:25" pos:end="1723:25">if <condition pos:start="1689:28" pos:end="1689:43">(<expr pos:start="1689:29" pos:end="1689:42"><name pos:start="1689:29" pos:end="1689:32">size</name> <operator pos:start="1689:34" pos:end="1689:34">&lt;</operator> <literal type="number" pos:start="1689:36" pos:end="1689:36">2</literal> <operator pos:start="1689:38" pos:end="1689:39">||</operator> <operator pos:start="1689:41" pos:end="1689:41">!</operator><name pos:start="1689:42" pos:end="1689:42">u</name></expr>)</condition> <block pos:start="1689:45" pos:end="1723:25">{<block_content pos:start="1691:29" pos:end="1721:69">

                            <decl_stmt pos:start="1691:29" pos:end="1691:43"><decl pos:start="1691:29" pos:end="1691:42"><type pos:start="1691:29" pos:end="1691:36"><name pos:start="1691:29" pos:end="1691:36">uint64_t</name></type> <name pos:start="1691:38" pos:end="1691:42">imm64</name></decl>;</decl_stmt>

                            <if_stmt pos:start="1693:29" pos:end="1709:29"><if pos:start="1693:29" pos:end="1699:29">if <condition pos:start="1693:32" pos:end="1693:42">(<expr pos:start="1693:33" pos:end="1693:41"><name pos:start="1693:33" pos:end="1693:36">size</name> <operator pos:start="1693:38" pos:end="1693:39">==</operator> <literal type="number" pos:start="1693:41" pos:end="1693:41">0</literal></expr>)</condition> <block pos:start="1693:44" pos:end="1699:29">{<block_content pos:start="1695:33" pos:end="1697:49">

                                <expr_stmt pos:start="1695:33" pos:end="1695:61"><expr pos:start="1695:33" pos:end="1695:60"><name pos:start="1695:33" pos:end="1695:35">imm</name> <operator pos:start="1695:37" pos:end="1695:37">=</operator> <operator pos:start="1695:39" pos:end="1695:39">(</operator><literal type="number" pos:start="1695:40" pos:end="1695:44">0xffu</literal> <operator pos:start="1695:46" pos:end="1695:47">&gt;&gt;</operator> <operator pos:start="1695:49" pos:end="1695:49">(</operator><literal type="number" pos:start="1695:50" pos:end="1695:52">8</literal> <operator pos:start="1695:52" pos:end="1695:52">-</operator> <name pos:start="1695:54" pos:end="1695:58">shift</name><operator pos:start="1695:59" pos:end="1695:59">)</operator><operator pos:start="1695:60" pos:end="1695:60">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="1697:33" pos:end="1697:49"><expr pos:start="1697:33" pos:end="1697:48"><name pos:start="1697:33" pos:end="1697:35">imm</name> <operator pos:start="1697:37" pos:end="1697:38">|=</operator> <name pos:start="1697:40" pos:end="1697:42">imm</name> <operator pos:start="1697:44" pos:end="1697:45">&lt;&lt;</operator> <literal type="number" pos:start="1697:47" pos:end="1697:48">16</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="1699:31" pos:end="1703:29">else if <condition pos:start="1699:39" pos:end="1699:49">(<expr pos:start="1699:40" pos:end="1699:48"><name pos:start="1699:40" pos:end="1699:43">size</name> <operator pos:start="1699:45" pos:end="1699:46">==</operator> <literal type="number" pos:start="1699:48" pos:end="1699:48">1</literal></expr>)</condition> <block pos:start="1699:51" pos:end="1703:29">{<block_content pos:start="1701:33" pos:end="1701:61">

                                <expr_stmt pos:start="1701:33" pos:end="1701:61"><expr pos:start="1701:33" pos:end="1701:60"><name pos:start="1701:33" pos:end="1701:35">imm</name> <operator pos:start="1701:37" pos:end="1701:37">=</operator> <literal type="number" pos:start="1701:39" pos:end="1701:44">0xffff</literal> <operator pos:start="1701:46" pos:end="1701:47">&gt;&gt;</operator> <operator pos:start="1701:49" pos:end="1701:49">(</operator><literal type="number" pos:start="1701:50" pos:end="1701:53">16</literal> <operator pos:start="1701:53" pos:end="1701:53">-</operator> <name pos:start="1701:55" pos:end="1701:59">shift</name><operator pos:start="1701:60" pos:end="1701:60">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1703:31" pos:end="1709:29">else <block pos:start="1703:36" pos:end="1709:29">{<block_content pos:start="1707:33" pos:end="1707:65">

                                <comment type="block" pos:start="1705:33" pos:end="1705:47">/* size == 2 */</comment>

                                <expr_stmt pos:start="1707:33" pos:end="1707:65"><expr pos:start="1707:33" pos:end="1707:64"><name pos:start="1707:33" pos:end="1707:35">imm</name> <operator pos:start="1707:37" pos:end="1707:37">=</operator> <literal type="number" pos:start="1707:39" pos:end="1707:48">0xffffffff</literal> <operator pos:start="1707:50" pos:end="1707:51">&gt;&gt;</operator> <operator pos:start="1707:53" pos:end="1707:53">(</operator><literal type="number" pos:start="1707:54" pos:end="1707:57">32</literal> <operator pos:start="1707:57" pos:end="1707:57">-</operator> <name pos:start="1707:59" pos:end="1707:63">shift</name><operator pos:start="1707:64" pos:end="1707:64">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <if_stmt pos:start="1711:29" pos:end="1719:29"><if pos:start="1711:29" pos:end="1715:29">if <condition pos:start="1711:32" pos:end="1711:41">(<expr pos:start="1711:33" pos:end="1711:40"><name pos:start="1711:33" pos:end="1711:36">size</name> <operator pos:start="1711:38" pos:end="1711:38">&lt;</operator> <literal type="number" pos:start="1711:40" pos:end="1711:40">2</literal></expr>)</condition> <block pos:start="1711:43" pos:end="1715:29">{<block_content pos:start="1713:33" pos:end="1713:70">

                                <expr_stmt pos:start="1713:33" pos:end="1713:70"><expr pos:start="1713:33" pos:end="1713:69"><name pos:start="1713:33" pos:end="1713:37">imm64</name> <operator pos:start="1713:39" pos:end="1713:39">=</operator> <name pos:start="1713:41" pos:end="1713:43">imm</name> <operator pos:start="1713:45" pos:end="1713:45">|</operator> <operator pos:start="1713:47" pos:end="1713:47">(</operator><operator pos:start="1713:48" pos:end="1713:48">(</operator><operator pos:start="1713:49" pos:end="1713:49">(</operator><name pos:start="1713:50" pos:end="1713:57">uint64_t</name><operator pos:start="1713:58" pos:end="1713:58">)</operator><name pos:start="1713:59" pos:end="1713:61">imm</name><operator pos:start="1713:62" pos:end="1713:62">)</operator> <operator pos:start="1713:64" pos:end="1713:65">&lt;&lt;</operator> <literal type="number" pos:start="1713:67" pos:end="1713:68">32</literal><operator pos:start="1713:69" pos:end="1713:69">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1715:31" pos:end="1719:29">else <block pos:start="1715:36" pos:end="1719:29">{<block_content pos:start="1717:33" pos:end="1717:44">

                                <expr_stmt pos:start="1717:33" pos:end="1717:44"><expr pos:start="1717:33" pos:end="1717:43"><name pos:start="1717:33" pos:end="1717:37">imm64</name> <operator pos:start="1717:39" pos:end="1717:39">=</operator> <name pos:start="1717:41" pos:end="1717:43">imm</name></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="1721:29" pos:end="1721:69"><expr pos:start="1721:29" pos:end="1721:68"><call pos:start="1721:29" pos:end="1721:68"><name pos:start="1721:29" pos:end="1721:44">tcg_gen_andi_i64</name><argument_list pos:start="1721:45" pos:end="1721:68">(<argument pos:start="1721:46" pos:end="1721:51"><expr pos:start="1721:46" pos:end="1721:51"><name pos:start="1721:46" pos:end="1721:51">cpu_V0</name></expr></argument>, <argument pos:start="1721:54" pos:end="1721:59"><expr pos:start="1721:54" pos:end="1721:59"><name pos:start="1721:54" pos:end="1721:59">cpu_V0</name></expr></argument>, <argument pos:start="1721:62" pos:end="1721:67"><expr pos:start="1721:62" pos:end="1721:67"><operator pos:start="1721:62" pos:end="1721:62">~</operator><name pos:start="1721:63" pos:end="1721:67">imm64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1727:21" pos:end="1727:56"><expr pos:start="1727:21" pos:end="1727:55"><call pos:start="1727:21" pos:end="1727:55"><name pos:start="1727:21" pos:end="1727:36">neon_store_reg64</name><argument_list pos:start="1727:37" pos:end="1727:55">(<argument pos:start="1727:38" pos:end="1727:43"><expr pos:start="1727:38" pos:end="1727:43"><name pos:start="1727:38" pos:end="1727:43">cpu_V0</name></expr></argument>, <argument pos:start="1727:46" pos:end="1727:54"><expr pos:start="1727:46" pos:end="1727:54"><name pos:start="1727:46" pos:end="1727:47">rd</name> <operator pos:start="1727:49" pos:end="1727:49">+</operator> <name pos:start="1727:51" pos:end="1727:54">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="1731:15" pos:end="1779:13">else if <condition pos:start="1731:23" pos:end="1731:32">(<expr pos:start="1731:24" pos:end="1731:31"><name pos:start="1731:24" pos:end="1731:25">op</name> <operator pos:start="1731:27" pos:end="1731:28">&gt;=</operator> <literal type="number" pos:start="1731:30" pos:end="1731:31">14</literal></expr>)</condition> <block pos:start="1731:34" pos:end="1779:13">{<block_content pos:start="1735:17" pos:end="1777:17">

                <comment type="block" pos:start="1733:17" pos:end="1733:40">/* VCVT fixed-point.  */</comment>

                <if_stmt pos:start="1735:17" pos:end="1739:17"><if pos:start="1735:17" pos:end="1739:17">if <condition pos:start="1735:20" pos:end="1735:66">(<expr pos:start="1735:21" pos:end="1735:65"><operator pos:start="1735:21" pos:end="1735:21">!</operator><operator pos:start="1735:22" pos:end="1735:22">(</operator><name pos:start="1735:23" pos:end="1735:26">insn</name> <operator pos:start="1735:28" pos:end="1735:28">&amp;</operator> <operator pos:start="1735:30" pos:end="1735:30">(</operator><literal type="number" pos:start="1735:31" pos:end="1735:31">1</literal> <operator pos:start="1735:33" pos:end="1735:34">&lt;&lt;</operator> <literal type="number" pos:start="1735:36" pos:end="1735:37">21</literal><operator pos:start="1735:38" pos:end="1735:38">)</operator><operator pos:start="1735:39" pos:end="1735:39">)</operator> <operator pos:start="1735:41" pos:end="1735:42">||</operator> <operator pos:start="1735:44" pos:end="1735:44">(</operator><name pos:start="1735:45" pos:end="1735:45">q</name> <operator pos:start="1735:47" pos:end="1735:48">&amp;&amp;</operator> <operator pos:start="1735:50" pos:end="1735:50">(</operator><operator pos:start="1735:51" pos:end="1735:51">(</operator><name pos:start="1735:52" pos:end="1735:53">rd</name> <operator pos:start="1735:55" pos:end="1735:55">|</operator> <name pos:start="1735:57" pos:end="1735:58">rm</name><operator pos:start="1735:59" pos:end="1735:59">)</operator> <operator pos:start="1735:61" pos:end="1735:61">&amp;</operator> <literal type="number" pos:start="1735:63" pos:end="1735:63">1</literal><operator pos:start="1735:64" pos:end="1735:64">)</operator><operator pos:start="1735:65" pos:end="1735:65">)</operator></expr>)</condition> <block pos:start="1735:68" pos:end="1739:17">{<block_content pos:start="1737:21" pos:end="1737:29">

                    <return pos:start="1737:21" pos:end="1737:29">return <expr pos:start="1737:28" pos:end="1737:28"><literal type="number" pos:start="1737:28" pos:end="1737:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1741:17" pos:end="1745:19">/* We have already masked out the must-be-1 top bit of imm6,

                 * hence this 32-shift where the ARM ARM has 64-imm6.

                 */</comment>

                <expr_stmt pos:start="1747:17" pos:end="1747:35"><expr pos:start="1747:17" pos:end="1747:34"><name pos:start="1747:17" pos:end="1747:21">shift</name> <operator pos:start="1747:23" pos:end="1747:23">=</operator> <literal type="number" pos:start="1747:25" pos:end="1747:28">32</literal> <operator pos:start="1747:28" pos:end="1747:28">-</operator> <name pos:start="1747:30" pos:end="1747:34">shift</name></expr>;</expr_stmt>

                <for pos:start="1749:17" pos:end="1777:17">for <control pos:start="1749:21" pos:end="1749:58">(<init pos:start="1749:22" pos:end="1749:30"><expr pos:start="1749:22" pos:end="1749:29"><name pos:start="1749:22" pos:end="1749:25">pass</name> <operator pos:start="1749:27" pos:end="1749:27">=</operator> <literal type="number" pos:start="1749:29" pos:end="1749:29">0</literal></expr>;</init> <condition pos:start="1749:32" pos:end="1749:50"><expr pos:start="1749:32" pos:end="1749:49"><name pos:start="1749:32" pos:end="1749:35">pass</name> <operator pos:start="1749:37" pos:end="1749:37">&lt;</operator> <operator pos:start="1749:39" pos:end="1749:39">(</operator><ternary pos:start="1749:40" pos:end="1749:48"><condition pos:start="1749:40" pos:end="1749:42"><expr pos:start="1749:40" pos:end="1749:40"><name pos:start="1749:40" pos:end="1749:40">q</name></expr> ?</condition><then pos:start="1749:44" pos:end="1749:44"> <expr pos:start="1749:44" pos:end="1749:44"><literal type="number" pos:start="1749:44" pos:end="1749:44">4</literal></expr> </then><else pos:start="1749:46" pos:end="1749:48">: <expr pos:start="1749:48" pos:end="1749:48"><literal type="number" pos:start="1749:48" pos:end="1749:48">2</literal></expr></else></ternary><operator pos:start="1749:49" pos:end="1749:49">)</operator></expr>;</condition> <incr pos:start="1749:52" pos:end="1749:57"><expr pos:start="1749:52" pos:end="1749:57"><name pos:start="1749:52" pos:end="1749:55">pass</name><operator pos:start="1749:56" pos:end="1749:57">++</operator></expr></incr>)</control> <block pos:start="1749:60" pos:end="1777:17">{<block_content pos:start="1751:21" pos:end="1775:80">

                    <expr_stmt pos:start="1751:21" pos:end="1751:80"><expr pos:start="1751:21" pos:end="1751:79"><call pos:start="1751:21" pos:end="1751:79"><name pos:start="1751:21" pos:end="1751:34">tcg_gen_ld_f32</name><argument_list pos:start="1751:35" pos:end="1751:79">(<argument pos:start="1751:36" pos:end="1751:42"><expr pos:start="1751:36" pos:end="1751:42"><name pos:start="1751:36" pos:end="1751:42">cpu_F0s</name></expr></argument>, <argument pos:start="1751:45" pos:end="1751:51"><expr pos:start="1751:45" pos:end="1751:51"><name pos:start="1751:45" pos:end="1751:51">cpu_env</name></expr></argument>, <argument pos:start="1751:54" pos:end="1751:78"><expr pos:start="1751:54" pos:end="1751:78"><call pos:start="1751:54" pos:end="1751:78"><name pos:start="1751:54" pos:end="1751:68">neon_reg_offset</name><argument_list pos:start="1751:69" pos:end="1751:78">(<argument pos:start="1751:70" pos:end="1751:71"><expr pos:start="1751:70" pos:end="1751:71"><name pos:start="1751:70" pos:end="1751:71">rm</name></expr></argument>, <argument pos:start="1751:74" pos:end="1751:77"><expr pos:start="1751:74" pos:end="1751:77"><name pos:start="1751:74" pos:end="1751:77">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1753:21" pos:end="1773:21"><if pos:start="1753:21" pos:end="1763:21">if <condition pos:start="1753:24" pos:end="1753:34">(<expr pos:start="1753:25" pos:end="1753:33"><operator pos:start="1753:25" pos:end="1753:25">!</operator><operator pos:start="1753:26" pos:end="1753:26">(</operator><name pos:start="1753:27" pos:end="1753:28">op</name> <operator pos:start="1753:30" pos:end="1753:30">&amp;</operator> <literal type="number" pos:start="1753:32" pos:end="1753:32">1</literal><operator pos:start="1753:33" pos:end="1753:33">)</operator></expr>)</condition> <block pos:start="1753:36" pos:end="1763:21">{<block_content pos:start="1755:25" pos:end="1761:54">

                        <if_stmt pos:start="1755:25" pos:end="1761:54"><if pos:start="1755:25" pos:end="1757:54">if <condition pos:start="1755:28" pos:end="1755:30">(<expr pos:start="1755:29" pos:end="1755:29"><name pos:start="1755:29" pos:end="1755:29">u</name></expr>)</condition><block type="pseudo" pos:start="1757:29" pos:end="1757:54"><block_content pos:start="1757:29" pos:end="1757:54">

                            <expr_stmt pos:start="1757:29" pos:end="1757:54"><expr pos:start="1757:29" pos:end="1757:53"><call pos:start="1757:29" pos:end="1757:53"><name pos:start="1757:29" pos:end="1757:40">gen_vfp_ulto</name><argument_list pos:start="1757:41" pos:end="1757:53">(<argument pos:start="1757:42" pos:end="1757:42"><expr pos:start="1757:42" pos:end="1757:42"><literal type="number" pos:start="1757:42" pos:end="1757:42">0</literal></expr></argument>, <argument pos:start="1757:45" pos:end="1757:49"><expr pos:start="1757:45" pos:end="1757:49"><name pos:start="1757:45" pos:end="1757:49">shift</name></expr></argument>, <argument pos:start="1757:52" pos:end="1757:52"><expr pos:start="1757:52" pos:end="1757:52"><literal type="number" pos:start="1757:52" pos:end="1757:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1759:25" pos:end="1761:54">else<block type="pseudo" pos:start="1761:29" pos:end="1761:54"><block_content pos:start="1761:29" pos:end="1761:54">

                            <expr_stmt pos:start="1761:29" pos:end="1761:54"><expr pos:start="1761:29" pos:end="1761:53"><call pos:start="1761:29" pos:end="1761:53"><name pos:start="1761:29" pos:end="1761:40">gen_vfp_slto</name><argument_list pos:start="1761:41" pos:end="1761:53">(<argument pos:start="1761:42" pos:end="1761:42"><expr pos:start="1761:42" pos:end="1761:42"><literal type="number" pos:start="1761:42" pos:end="1761:42">0</literal></expr></argument>, <argument pos:start="1761:45" pos:end="1761:49"><expr pos:start="1761:45" pos:end="1761:49"><name pos:start="1761:45" pos:end="1761:49">shift</name></expr></argument>, <argument pos:start="1761:52" pos:end="1761:52"><expr pos:start="1761:52" pos:end="1761:52"><literal type="number" pos:start="1761:52" pos:end="1761:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1763:23" pos:end="1773:21">else <block pos:start="1763:28" pos:end="1773:21">{<block_content pos:start="1765:25" pos:end="1771:54">

                        <if_stmt pos:start="1765:25" pos:end="1771:54"><if pos:start="1765:25" pos:end="1767:54">if <condition pos:start="1765:28" pos:end="1765:30">(<expr pos:start="1765:29" pos:end="1765:29"><name pos:start="1765:29" pos:end="1765:29">u</name></expr>)</condition><block type="pseudo" pos:start="1767:29" pos:end="1767:54"><block_content pos:start="1767:29" pos:end="1767:54">

                            <expr_stmt pos:start="1767:29" pos:end="1767:54"><expr pos:start="1767:29" pos:end="1767:53"><call pos:start="1767:29" pos:end="1767:53"><name pos:start="1767:29" pos:end="1767:40">gen_vfp_toul</name><argument_list pos:start="1767:41" pos:end="1767:53">(<argument pos:start="1767:42" pos:end="1767:42"><expr pos:start="1767:42" pos:end="1767:42"><literal type="number" pos:start="1767:42" pos:end="1767:42">0</literal></expr></argument>, <argument pos:start="1767:45" pos:end="1767:49"><expr pos:start="1767:45" pos:end="1767:49"><name pos:start="1767:45" pos:end="1767:49">shift</name></expr></argument>, <argument pos:start="1767:52" pos:end="1767:52"><expr pos:start="1767:52" pos:end="1767:52"><literal type="number" pos:start="1767:52" pos:end="1767:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1769:25" pos:end="1771:54">else<block type="pseudo" pos:start="1771:29" pos:end="1771:54"><block_content pos:start="1771:29" pos:end="1771:54">

                            <expr_stmt pos:start="1771:29" pos:end="1771:54"><expr pos:start="1771:29" pos:end="1771:53"><call pos:start="1771:29" pos:end="1771:53"><name pos:start="1771:29" pos:end="1771:40">gen_vfp_tosl</name><argument_list pos:start="1771:41" pos:end="1771:53">(<argument pos:start="1771:42" pos:end="1771:42"><expr pos:start="1771:42" pos:end="1771:42"><literal type="number" pos:start="1771:42" pos:end="1771:42">0</literal></expr></argument>, <argument pos:start="1771:45" pos:end="1771:49"><expr pos:start="1771:45" pos:end="1771:49"><name pos:start="1771:45" pos:end="1771:49">shift</name></expr></argument>, <argument pos:start="1771:52" pos:end="1771:52"><expr pos:start="1771:52" pos:end="1771:52"><literal type="number" pos:start="1771:52" pos:end="1771:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1775:21" pos:end="1775:80"><expr pos:start="1775:21" pos:end="1775:79"><call pos:start="1775:21" pos:end="1775:79"><name pos:start="1775:21" pos:end="1775:34">tcg_gen_st_f32</name><argument_list pos:start="1775:35" pos:end="1775:79">(<argument pos:start="1775:36" pos:end="1775:42"><expr pos:start="1775:36" pos:end="1775:42"><name pos:start="1775:36" pos:end="1775:42">cpu_F0s</name></expr></argument>, <argument pos:start="1775:45" pos:end="1775:51"><expr pos:start="1775:45" pos:end="1775:51"><name pos:start="1775:45" pos:end="1775:51">cpu_env</name></expr></argument>, <argument pos:start="1775:54" pos:end="1775:78"><expr pos:start="1775:54" pos:end="1775:78"><call pos:start="1775:54" pos:end="1775:78"><name pos:start="1775:54" pos:end="1775:68">neon_reg_offset</name><argument_list pos:start="1775:69" pos:end="1775:78">(<argument pos:start="1775:70" pos:end="1775:71"><expr pos:start="1775:70" pos:end="1775:71"><name pos:start="1775:70" pos:end="1775:71">rd</name></expr></argument>, <argument pos:start="1775:74" pos:end="1775:77"><expr pos:start="1775:74" pos:end="1775:77"><name pos:start="1775:74" pos:end="1775:77">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="1779:15" pos:end="1783:13">else <block pos:start="1779:20" pos:end="1783:13">{<block_content pos:start="1781:17" pos:end="1781:25">

                <return pos:start="1781:17" pos:end="1781:25">return <expr pos:start="1781:24" pos:end="1781:24"><literal type="number" pos:start="1781:24" pos:end="1781:24">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1785:11" pos:end="1951:9">else <block pos:start="1785:16" pos:end="1951:9">{<block_content pos:start="1787:13" pos:end="1949:13"> <comment type="block" pos:start="1785:18" pos:end="1785:47">/* (insn &amp; 0x00380080) == 0 */</comment>

            <decl_stmt pos:start="1787:13" pos:end="1787:23"><decl pos:start="1787:13" pos:end="1787:22"><type pos:start="1787:13" pos:end="1787:15"><name pos:start="1787:13" pos:end="1787:15">int</name></type> <name pos:start="1787:17" pos:end="1787:22">invert</name></decl>;</decl_stmt>

            <if_stmt pos:start="1789:13" pos:end="1793:13"><if pos:start="1789:13" pos:end="1793:13">if <condition pos:start="1789:16" pos:end="1789:30">(<expr pos:start="1789:17" pos:end="1789:29"><name pos:start="1789:17" pos:end="1789:17">q</name> <operator pos:start="1789:19" pos:end="1789:20">&amp;&amp;</operator> <operator pos:start="1789:22" pos:end="1789:22">(</operator><name pos:start="1789:23" pos:end="1789:24">rd</name> <operator pos:start="1789:26" pos:end="1789:26">&amp;</operator> <literal type="number" pos:start="1789:28" pos:end="1789:28">1</literal><operator pos:start="1789:29" pos:end="1789:29">)</operator></expr>)</condition> <block pos:start="1789:32" pos:end="1793:13">{<block_content pos:start="1791:17" pos:end="1791:25">

                <return pos:start="1791:17" pos:end="1791:25">return <expr pos:start="1791:24" pos:end="1791:24"><literal type="number" pos:start="1791:24" pos:end="1791:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1797:13" pos:end="1797:35"><expr pos:start="1797:13" pos:end="1797:34"><name pos:start="1797:13" pos:end="1797:14">op</name> <operator pos:start="1797:16" pos:end="1797:16">=</operator> <operator pos:start="1797:18" pos:end="1797:18">(</operator><name pos:start="1797:19" pos:end="1797:22">insn</name> <operator pos:start="1797:24" pos:end="1797:25">&gt;&gt;</operator> <literal type="number" pos:start="1797:27" pos:end="1797:27">8</literal><operator pos:start="1797:28" pos:end="1797:28">)</operator> <operator pos:start="1797:30" pos:end="1797:30">&amp;</operator> <literal type="number" pos:start="1797:32" pos:end="1797:34">0xf</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1799:13" pos:end="1799:46">/* One register and immediate.  */</comment>

            <expr_stmt pos:start="1801:13" pos:end="1801:66"><expr pos:start="1801:13" pos:end="1801:65"><name pos:start="1801:13" pos:end="1801:15">imm</name> <operator pos:start="1801:17" pos:end="1801:17">=</operator> <operator pos:start="1801:19" pos:end="1801:19">(</operator><name pos:start="1801:20" pos:end="1801:20">u</name> <operator pos:start="1801:22" pos:end="1801:23">&lt;&lt;</operator> <literal type="number" pos:start="1801:25" pos:end="1801:25">7</literal><operator pos:start="1801:26" pos:end="1801:26">)</operator> <operator pos:start="1801:28" pos:end="1801:28">|</operator> <operator pos:start="1801:30" pos:end="1801:30">(</operator><operator pos:start="1801:31" pos:end="1801:31">(</operator><name pos:start="1801:32" pos:end="1801:35">insn</name> <operator pos:start="1801:37" pos:end="1801:38">&gt;&gt;</operator> <literal type="number" pos:start="1801:40" pos:end="1801:41">12</literal><operator pos:start="1801:42" pos:end="1801:42">)</operator> <operator pos:start="1801:44" pos:end="1801:44">&amp;</operator> <literal type="number" pos:start="1801:46" pos:end="1801:49">0x70</literal><operator pos:start="1801:50" pos:end="1801:50">)</operator> <operator pos:start="1801:52" pos:end="1801:52">|</operator> <operator pos:start="1801:54" pos:end="1801:54">(</operator><name pos:start="1801:55" pos:end="1801:58">insn</name> <operator pos:start="1801:60" pos:end="1801:60">&amp;</operator> <literal type="number" pos:start="1801:62" pos:end="1801:64">0xf</literal><operator pos:start="1801:65" pos:end="1801:65">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1803:13" pos:end="1803:44"><expr pos:start="1803:13" pos:end="1803:43"><name pos:start="1803:13" pos:end="1803:18">invert</name> <operator pos:start="1803:20" pos:end="1803:20">=</operator> <operator pos:start="1803:22" pos:end="1803:22">(</operator><name pos:start="1803:23" pos:end="1803:26">insn</name> <operator pos:start="1803:28" pos:end="1803:28">&amp;</operator> <operator pos:start="1803:30" pos:end="1803:30">(</operator><literal type="number" pos:start="1803:31" pos:end="1803:31">1</literal> <operator pos:start="1803:33" pos:end="1803:34">&lt;&lt;</operator> <literal type="number" pos:start="1803:36" pos:end="1803:36">5</literal><operator pos:start="1803:37" pos:end="1803:37">)</operator><operator pos:start="1803:38" pos:end="1803:38">)</operator> <operator pos:start="1803:40" pos:end="1803:41">!=</operator> <literal type="number" pos:start="1803:43" pos:end="1803:43">0</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1805:13" pos:end="1811:15">/* Note that op = 2,3,4,5,6,7,10,11,12,13 imm=0 is UNPREDICTABLE.

             * We choose to not special-case this and will behave as if a

             * valid constant encoding of 0 had been given.

             */</comment>

            <switch pos:start="1813:13" pos:end="1887:13">switch <condition pos:start="1813:20" pos:end="1813:23">(<expr pos:start="1813:21" pos:end="1813:22"><name pos:start="1813:21" pos:end="1813:22">op</name></expr>)</condition> <block pos:start="1813:25" pos:end="1887:13">{<block_content pos:start="1815:13" pos:end="1885:22">

            <case pos:start="1815:13" pos:end="1815:19">case <expr pos:start="1815:18" pos:end="1815:18"><literal type="number" pos:start="1815:18" pos:end="1815:18">0</literal></expr>:</case> <case pos:start="1815:21" pos:end="1815:27">case <expr pos:start="1815:26" pos:end="1815:26"><literal type="number" pos:start="1815:26" pos:end="1815:26">1</literal></expr>:</case>

                <comment type="block" pos:start="1817:17" pos:end="1817:27">/* no-op */</comment>

                <break pos:start="1819:17" pos:end="1819:22">break;</break>

            <case pos:start="1821:13" pos:end="1821:19">case <expr pos:start="1821:18" pos:end="1821:18"><literal type="number" pos:start="1821:18" pos:end="1821:18">2</literal></expr>:</case> <case pos:start="1821:21" pos:end="1821:27">case <expr pos:start="1821:26" pos:end="1821:26"><literal type="number" pos:start="1821:26" pos:end="1821:26">3</literal></expr>:</case>

                <expr_stmt pos:start="1823:17" pos:end="1823:26"><expr pos:start="1823:17" pos:end="1823:25"><name pos:start="1823:17" pos:end="1823:19">imm</name> <operator pos:start="1823:21" pos:end="1823:23">&lt;&lt;=</operator> <literal type="number" pos:start="1823:25" pos:end="1823:25">8</literal></expr>;</expr_stmt>

                <break pos:start="1825:17" pos:end="1825:22">break;</break>

            <case pos:start="1827:13" pos:end="1827:19">case <expr pos:start="1827:18" pos:end="1827:18"><literal type="number" pos:start="1827:18" pos:end="1827:18">4</literal></expr>:</case> <case pos:start="1827:21" pos:end="1827:27">case <expr pos:start="1827:26" pos:end="1827:26"><literal type="number" pos:start="1827:26" pos:end="1827:26">5</literal></expr>:</case>

                <expr_stmt pos:start="1829:17" pos:end="1829:27"><expr pos:start="1829:17" pos:end="1829:26"><name pos:start="1829:17" pos:end="1829:19">imm</name> <operator pos:start="1829:21" pos:end="1829:23">&lt;&lt;=</operator> <literal type="number" pos:start="1829:25" pos:end="1829:26">16</literal></expr>;</expr_stmt>

                <break pos:start="1831:17" pos:end="1831:22">break;</break>

            <case pos:start="1833:13" pos:end="1833:19">case <expr pos:start="1833:18" pos:end="1833:18"><literal type="number" pos:start="1833:18" pos:end="1833:18">6</literal></expr>:</case> <case pos:start="1833:21" pos:end="1833:27">case <expr pos:start="1833:26" pos:end="1833:26"><literal type="number" pos:start="1833:26" pos:end="1833:26">7</literal></expr>:</case>

                <expr_stmt pos:start="1835:17" pos:end="1835:27"><expr pos:start="1835:17" pos:end="1835:26"><name pos:start="1835:17" pos:end="1835:19">imm</name> <operator pos:start="1835:21" pos:end="1835:23">&lt;&lt;=</operator> <literal type="number" pos:start="1835:25" pos:end="1835:26">24</literal></expr>;</expr_stmt>

                <break pos:start="1837:17" pos:end="1837:22">break;</break>

            <case pos:start="1839:13" pos:end="1839:19">case <expr pos:start="1839:18" pos:end="1839:18"><literal type="number" pos:start="1839:18" pos:end="1839:18">8</literal></expr>:</case> <case pos:start="1839:21" pos:end="1839:27">case <expr pos:start="1839:26" pos:end="1839:26"><literal type="number" pos:start="1839:26" pos:end="1839:26">9</literal></expr>:</case>

                <expr_stmt pos:start="1841:17" pos:end="1841:33"><expr pos:start="1841:17" pos:end="1841:32"><name pos:start="1841:17" pos:end="1841:19">imm</name> <operator pos:start="1841:21" pos:end="1841:22">|=</operator> <name pos:start="1841:24" pos:end="1841:26">imm</name> <operator pos:start="1841:28" pos:end="1841:29">&lt;&lt;</operator> <literal type="number" pos:start="1841:31" pos:end="1841:32">16</literal></expr>;</expr_stmt>

                <break pos:start="1843:17" pos:end="1843:22">break;</break>

            <case pos:start="1845:13" pos:end="1845:20">case <expr pos:start="1845:18" pos:end="1845:19"><literal type="number" pos:start="1845:18" pos:end="1845:19">10</literal></expr>:</case> <case pos:start="1845:22" pos:end="1845:29">case <expr pos:start="1845:27" pos:end="1845:28"><literal type="number" pos:start="1845:27" pos:end="1845:28">11</literal></expr>:</case>

                <expr_stmt pos:start="1847:17" pos:end="1847:47"><expr pos:start="1847:17" pos:end="1847:46"><name pos:start="1847:17" pos:end="1847:19">imm</name> <operator pos:start="1847:21" pos:end="1847:21">=</operator> <operator pos:start="1847:23" pos:end="1847:23">(</operator><name pos:start="1847:24" pos:end="1847:26">imm</name> <operator pos:start="1847:28" pos:end="1847:29">&lt;&lt;</operator> <literal type="number" pos:start="1847:31" pos:end="1847:31">8</literal><operator pos:start="1847:32" pos:end="1847:32">)</operator> <operator pos:start="1847:34" pos:end="1847:34">|</operator> <operator pos:start="1847:36" pos:end="1847:36">(</operator><name pos:start="1847:37" pos:end="1847:39">imm</name> <operator pos:start="1847:41" pos:end="1847:42">&lt;&lt;</operator> <literal type="number" pos:start="1847:44" pos:end="1847:45">24</literal><operator pos:start="1847:46" pos:end="1847:46">)</operator></expr>;</expr_stmt>

                <break pos:start="1849:17" pos:end="1849:22">break;</break>

            <case pos:start="1851:13" pos:end="1851:20">case <expr pos:start="1851:18" pos:end="1851:19"><literal type="number" pos:start="1851:18" pos:end="1851:19">12</literal></expr>:</case>

                <expr_stmt pos:start="1853:17" pos:end="1853:40"><expr pos:start="1853:17" pos:end="1853:39"><name pos:start="1853:17" pos:end="1853:19">imm</name> <operator pos:start="1853:21" pos:end="1853:21">=</operator> <operator pos:start="1853:23" pos:end="1853:23">(</operator><name pos:start="1853:24" pos:end="1853:26">imm</name> <operator pos:start="1853:28" pos:end="1853:29">&lt;&lt;</operator> <literal type="number" pos:start="1853:31" pos:end="1853:31">8</literal><operator pos:start="1853:32" pos:end="1853:32">)</operator> <operator pos:start="1853:34" pos:end="1853:34">|</operator> <literal type="number" pos:start="1853:36" pos:end="1853:39">0xff</literal></expr>;</expr_stmt>

                <break pos:start="1855:17" pos:end="1855:22">break;</break>

            <case pos:start="1857:13" pos:end="1857:20">case <expr pos:start="1857:18" pos:end="1857:19"><literal type="number" pos:start="1857:18" pos:end="1857:19">13</literal></expr>:</case>

                <expr_stmt pos:start="1859:17" pos:end="1859:43"><expr pos:start="1859:17" pos:end="1859:42"><name pos:start="1859:17" pos:end="1859:19">imm</name> <operator pos:start="1859:21" pos:end="1859:21">=</operator> <operator pos:start="1859:23" pos:end="1859:23">(</operator><name pos:start="1859:24" pos:end="1859:26">imm</name> <operator pos:start="1859:28" pos:end="1859:29">&lt;&lt;</operator> <literal type="number" pos:start="1859:31" pos:end="1859:32">16</literal><operator pos:start="1859:33" pos:end="1859:33">)</operator> <operator pos:start="1859:35" pos:end="1859:35">|</operator> <literal type="number" pos:start="1859:37" pos:end="1859:42">0xffff</literal></expr>;</expr_stmt>

                <break pos:start="1861:17" pos:end="1861:22">break;</break>

            <case pos:start="1863:13" pos:end="1863:20">case <expr pos:start="1863:18" pos:end="1863:19"><literal type="number" pos:start="1863:18" pos:end="1863:19">14</literal></expr>:</case>

                <expr_stmt pos:start="1865:17" pos:end="1865:62"><expr pos:start="1865:17" pos:end="1865:61"><name pos:start="1865:17" pos:end="1865:19">imm</name> <operator pos:start="1865:21" pos:end="1865:22">|=</operator> <operator pos:start="1865:24" pos:end="1865:24">(</operator><name pos:start="1865:25" pos:end="1865:27">imm</name> <operator pos:start="1865:29" pos:end="1865:30">&lt;&lt;</operator> <literal type="number" pos:start="1865:32" pos:end="1865:32">8</literal><operator pos:start="1865:33" pos:end="1865:33">)</operator> <operator pos:start="1865:35" pos:end="1865:35">|</operator> <operator pos:start="1865:37" pos:end="1865:37">(</operator><name pos:start="1865:38" pos:end="1865:40">imm</name> <operator pos:start="1865:42" pos:end="1865:43">&lt;&lt;</operator> <literal type="number" pos:start="1865:45" pos:end="1865:46">16</literal><operator pos:start="1865:47" pos:end="1865:47">)</operator> <operator pos:start="1865:49" pos:end="1865:49">|</operator> <operator pos:start="1865:51" pos:end="1865:51">(</operator><name pos:start="1865:52" pos:end="1865:54">imm</name> <operator pos:start="1865:56" pos:end="1865:57">&lt;&lt;</operator> <literal type="number" pos:start="1865:59" pos:end="1865:60">24</literal><operator pos:start="1865:61" pos:end="1865:61">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1867:17" pos:end="1869:31"><if pos:start="1867:17" pos:end="1869:31">if <condition pos:start="1867:20" pos:end="1867:27">(<expr pos:start="1867:21" pos:end="1867:26"><name pos:start="1867:21" pos:end="1867:26">invert</name></expr>)</condition><block type="pseudo" pos:start="1869:21" pos:end="1869:31"><block_content pos:start="1869:21" pos:end="1869:31">

                    <expr_stmt pos:start="1869:21" pos:end="1869:31"><expr pos:start="1869:21" pos:end="1869:30"><name pos:start="1869:21" pos:end="1869:23">imm</name> <operator pos:start="1869:25" pos:end="1869:25">=</operator> <operator pos:start="1869:27" pos:end="1869:27">~</operator><name pos:start="1869:28" pos:end="1869:30">imm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="1871:17" pos:end="1871:22">break;</break>

            <case pos:start="1873:13" pos:end="1873:20">case <expr pos:start="1873:18" pos:end="1873:19"><literal type="number" pos:start="1873:18" pos:end="1873:19">15</literal></expr>:</case>

                <if_stmt pos:start="1875:17" pos:end="1879:17"><if pos:start="1875:17" pos:end="1879:17">if <condition pos:start="1875:20" pos:end="1875:27">(<expr pos:start="1875:21" pos:end="1875:26"><name pos:start="1875:21" pos:end="1875:26">invert</name></expr>)</condition> <block pos:start="1875:29" pos:end="1879:17">{<block_content pos:start="1877:21" pos:end="1877:29">

                    <return pos:start="1877:21" pos:end="1877:29">return <expr pos:start="1877:28" pos:end="1877:28"><literal type="number" pos:start="1877:28" pos:end="1877:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1881:17" pos:end="1883:66"><expr pos:start="1881:17" pos:end="1883:65"><name pos:start="1881:17" pos:end="1881:19">imm</name> <operator pos:start="1881:21" pos:end="1881:21">=</operator> <operator pos:start="1881:23" pos:end="1881:23">(</operator><operator pos:start="1881:24" pos:end="1881:24">(</operator><name pos:start="1881:25" pos:end="1881:27">imm</name> <operator pos:start="1881:29" pos:end="1881:29">&amp;</operator> <literal type="number" pos:start="1881:31" pos:end="1881:34">0x80</literal><operator pos:start="1881:35" pos:end="1881:35">)</operator> <operator pos:start="1881:37" pos:end="1881:38">&lt;&lt;</operator> <literal type="number" pos:start="1881:40" pos:end="1881:41">24</literal><operator pos:start="1881:42" pos:end="1881:42">)</operator> <operator pos:start="1881:44" pos:end="1881:44">|</operator> <operator pos:start="1881:46" pos:end="1881:46">(</operator><operator pos:start="1881:47" pos:end="1881:47">(</operator><name pos:start="1881:48" pos:end="1881:50">imm</name> <operator pos:start="1881:52" pos:end="1881:52">&amp;</operator> <literal type="number" pos:start="1881:54" pos:end="1881:57">0x3f</literal><operator pos:start="1881:58" pos:end="1881:58">)</operator> <operator pos:start="1881:60" pos:end="1881:61">&lt;&lt;</operator> <literal type="number" pos:start="1881:63" pos:end="1881:64">19</literal><operator pos:start="1881:65" pos:end="1881:65">)</operator>

                      <operator pos:start="1883:23" pos:end="1883:23">|</operator> <operator pos:start="1883:25" pos:end="1883:25">(</operator><ternary pos:start="1883:26" pos:end="1883:64"><condition pos:start="1883:26" pos:end="1883:39"><expr pos:start="1883:26" pos:end="1883:37"><operator pos:start="1883:26" pos:end="1883:26">(</operator><name pos:start="1883:27" pos:end="1883:29">imm</name> <operator pos:start="1883:31" pos:end="1883:31">&amp;</operator> <literal type="number" pos:start="1883:33" pos:end="1883:36">0x40</literal><operator pos:start="1883:37" pos:end="1883:37">)</operator></expr> ?</condition><then pos:start="1883:41" pos:end="1883:52"> <expr pos:start="1883:41" pos:end="1883:52"><operator pos:start="1883:41" pos:end="1883:41">(</operator><literal type="number" pos:start="1883:42" pos:end="1883:45">0x1f</literal> <operator pos:start="1883:47" pos:end="1883:48">&lt;&lt;</operator> <literal type="number" pos:start="1883:50" pos:end="1883:51">25</literal><operator pos:start="1883:52" pos:end="1883:52">)</operator></expr> </then><else pos:start="1883:54" pos:end="1883:64">: <expr pos:start="1883:56" pos:end="1883:64"><operator pos:start="1883:56" pos:end="1883:56">(</operator><literal type="number" pos:start="1883:57" pos:end="1883:57">1</literal> <operator pos:start="1883:59" pos:end="1883:60">&lt;&lt;</operator> <literal type="number" pos:start="1883:62" pos:end="1883:63">30</literal><operator pos:start="1883:64" pos:end="1883:64">)</operator></expr></else></ternary><operator pos:start="1883:65" pos:end="1883:65">)</operator></expr>;</expr_stmt>

                <break pos:start="1885:17" pos:end="1885:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="1889:13" pos:end="1891:27"><if pos:start="1889:13" pos:end="1891:27">if <condition pos:start="1889:16" pos:end="1889:23">(<expr pos:start="1889:17" pos:end="1889:22"><name pos:start="1889:17" pos:end="1889:22">invert</name></expr>)</condition><block type="pseudo" pos:start="1891:17" pos:end="1891:27"><block_content pos:start="1891:17" pos:end="1891:27">

                <expr_stmt pos:start="1891:17" pos:end="1891:27"><expr pos:start="1891:17" pos:end="1891:26"><name pos:start="1891:17" pos:end="1891:19">imm</name> <operator pos:start="1891:21" pos:end="1891:21">=</operator> <operator pos:start="1891:23" pos:end="1891:23">~</operator><name pos:start="1891:24" pos:end="1891:26">imm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="1895:13" pos:end="1949:13">for <control pos:start="1895:17" pos:end="1895:54">(<init pos:start="1895:18" pos:end="1895:26"><expr pos:start="1895:18" pos:end="1895:25"><name pos:start="1895:18" pos:end="1895:21">pass</name> <operator pos:start="1895:23" pos:end="1895:23">=</operator> <literal type="number" pos:start="1895:25" pos:end="1895:25">0</literal></expr>;</init> <condition pos:start="1895:28" pos:end="1895:46"><expr pos:start="1895:28" pos:end="1895:45"><name pos:start="1895:28" pos:end="1895:31">pass</name> <operator pos:start="1895:33" pos:end="1895:33">&lt;</operator> <operator pos:start="1895:35" pos:end="1895:35">(</operator><ternary pos:start="1895:36" pos:end="1895:44"><condition pos:start="1895:36" pos:end="1895:38"><expr pos:start="1895:36" pos:end="1895:36"><name pos:start="1895:36" pos:end="1895:36">q</name></expr> ?</condition><then pos:start="1895:40" pos:end="1895:40"> <expr pos:start="1895:40" pos:end="1895:40"><literal type="number" pos:start="1895:40" pos:end="1895:40">4</literal></expr> </then><else pos:start="1895:42" pos:end="1895:44">: <expr pos:start="1895:44" pos:end="1895:44"><literal type="number" pos:start="1895:44" pos:end="1895:44">2</literal></expr></else></ternary><operator pos:start="1895:45" pos:end="1895:45">)</operator></expr>;</condition> <incr pos:start="1895:48" pos:end="1895:53"><expr pos:start="1895:48" pos:end="1895:53"><name pos:start="1895:48" pos:end="1895:51">pass</name><operator pos:start="1895:52" pos:end="1895:53">++</operator></expr></incr>)</control> <block pos:start="1895:56" pos:end="1949:13">{<block_content pos:start="1897:17" pos:end="1947:46">

                <if_stmt pos:start="1897:17" pos:end="1945:17"><if pos:start="1897:17" pos:end="1915:17">if <condition pos:start="1897:20" pos:end="1897:38">(<expr pos:start="1897:21" pos:end="1897:37"><name pos:start="1897:21" pos:end="1897:22">op</name> <operator pos:start="1897:24" pos:end="1897:24">&amp;</operator> <literal type="number" pos:start="1897:26" pos:end="1897:26">1</literal> <operator pos:start="1897:28" pos:end="1897:29">&amp;&amp;</operator> <name pos:start="1897:31" pos:end="1897:32">op</name> <operator pos:start="1897:34" pos:end="1897:34">&lt;</operator> <literal type="number" pos:start="1897:36" pos:end="1897:37">12</literal></expr>)</condition> <block pos:start="1897:40" pos:end="1915:17">{<block_content pos:start="1899:21" pos:end="1913:21">

                    <expr_stmt pos:start="1899:21" pos:end="1899:50"><expr pos:start="1899:21" pos:end="1899:49"><name pos:start="1899:21" pos:end="1899:23">tmp</name> <operator pos:start="1899:25" pos:end="1899:25">=</operator> <call pos:start="1899:27" pos:end="1899:49"><name pos:start="1899:27" pos:end="1899:39">neon_load_reg</name><argument_list pos:start="1899:40" pos:end="1899:49">(<argument pos:start="1899:41" pos:end="1899:42"><expr pos:start="1899:41" pos:end="1899:42"><name pos:start="1899:41" pos:end="1899:42">rd</name></expr></argument>, <argument pos:start="1899:45" pos:end="1899:48"><expr pos:start="1899:45" pos:end="1899:48"><name pos:start="1899:45" pos:end="1899:48">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1901:21" pos:end="1913:21"><if pos:start="1901:21" pos:end="1909:21">if <condition pos:start="1901:24" pos:end="1901:31">(<expr pos:start="1901:25" pos:end="1901:30"><name pos:start="1901:25" pos:end="1901:30">invert</name></expr>)</condition> <block pos:start="1901:33" pos:end="1909:21">{<block_content pos:start="1907:25" pos:end="1907:56">

                        <comment type="block" pos:start="1903:25" pos:end="1905:47">/* The immediate value has already been inverted, so

                           BIC becomes AND.  */</comment>

                        <expr_stmt pos:start="1907:25" pos:end="1907:56"><expr pos:start="1907:25" pos:end="1907:55"><call pos:start="1907:25" pos:end="1907:55"><name pos:start="1907:25" pos:end="1907:40">tcg_gen_andi_i32</name><argument_list pos:start="1907:41" pos:end="1907:55">(<argument pos:start="1907:42" pos:end="1907:44"><expr pos:start="1907:42" pos:end="1907:44"><name pos:start="1907:42" pos:end="1907:44">tmp</name></expr></argument>, <argument pos:start="1907:47" pos:end="1907:49"><expr pos:start="1907:47" pos:end="1907:49"><name pos:start="1907:47" pos:end="1907:49">tmp</name></expr></argument>, <argument pos:start="1907:52" pos:end="1907:54"><expr pos:start="1907:52" pos:end="1907:54"><name pos:start="1907:52" pos:end="1907:54">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1909:23" pos:end="1913:21">else <block pos:start="1909:28" pos:end="1913:21">{<block_content pos:start="1911:25" pos:end="1911:55">

                        <expr_stmt pos:start="1911:25" pos:end="1911:55"><expr pos:start="1911:25" pos:end="1911:54"><call pos:start="1911:25" pos:end="1911:54"><name pos:start="1911:25" pos:end="1911:39">tcg_gen_ori_i32</name><argument_list pos:start="1911:40" pos:end="1911:54">(<argument pos:start="1911:41" pos:end="1911:43"><expr pos:start="1911:41" pos:end="1911:43"><name pos:start="1911:41" pos:end="1911:43">tmp</name></expr></argument>, <argument pos:start="1911:46" pos:end="1911:48"><expr pos:start="1911:46" pos:end="1911:48"><name pos:start="1911:46" pos:end="1911:48">tmp</name></expr></argument>, <argument pos:start="1911:51" pos:end="1911:53"><expr pos:start="1911:51" pos:end="1911:53"><name pos:start="1911:51" pos:end="1911:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1915:19" pos:end="1945:17">else <block pos:start="1915:24" pos:end="1945:17">{<block_content pos:start="1919:21" pos:end="1943:21">

                    <comment type="block" pos:start="1917:21" pos:end="1917:38">/* VMOV, VMVN.  */</comment>

                    <expr_stmt pos:start="1919:21" pos:end="1919:45"><expr pos:start="1919:21" pos:end="1919:44"><name pos:start="1919:21" pos:end="1919:23">tmp</name> <operator pos:start="1919:25" pos:end="1919:25">=</operator> <call pos:start="1919:27" pos:end="1919:44"><name pos:start="1919:27" pos:end="1919:42">tcg_temp_new_i32</name><argument_list pos:start="1919:43" pos:end="1919:44">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1921:21" pos:end="1943:21"><if pos:start="1921:21" pos:end="1939:21">if <condition pos:start="1921:24" pos:end="1921:43">(<expr pos:start="1921:25" pos:end="1921:42"><name pos:start="1921:25" pos:end="1921:26">op</name> <operator pos:start="1921:28" pos:end="1921:29">==</operator> <literal type="number" pos:start="1921:31" pos:end="1921:32">14</literal> <operator pos:start="1921:34" pos:end="1921:35">&amp;&amp;</operator> <name pos:start="1921:37" pos:end="1921:42">invert</name></expr>)</condition> <block pos:start="1921:45" pos:end="1939:21">{<block_content pos:start="1923:25" pos:end="1937:51">

                        <decl_stmt pos:start="1923:25" pos:end="1923:30"><decl pos:start="1923:25" pos:end="1923:29"><type pos:start="1923:25" pos:end="1923:27"><name pos:start="1923:25" pos:end="1923:27">int</name></type> <name pos:start="1923:29" pos:end="1923:29">n</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="1925:25" pos:end="1925:37"><decl pos:start="1925:25" pos:end="1925:36"><type pos:start="1925:25" pos:end="1925:32"><name pos:start="1925:25" pos:end="1925:32">uint32_t</name></type> <name pos:start="1925:34" pos:end="1925:36">val</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="1927:25" pos:end="1927:32"><expr pos:start="1927:25" pos:end="1927:31"><name pos:start="1927:25" pos:end="1927:27">val</name> <operator pos:start="1927:29" pos:end="1927:29">=</operator> <literal type="number" pos:start="1927:31" pos:end="1927:31">0</literal></expr>;</expr_stmt>

                        <for pos:start="1929:25" pos:end="1935:25">for <control pos:start="1929:29" pos:end="1929:47">(<init pos:start="1929:30" pos:end="1929:35"><expr pos:start="1929:30" pos:end="1929:34"><name pos:start="1929:30" pos:end="1929:30">n</name> <operator pos:start="1929:32" pos:end="1929:32">=</operator> <literal type="number" pos:start="1929:34" pos:end="1929:34">0</literal></expr>;</init> <condition pos:start="1929:37" pos:end="1929:42"><expr pos:start="1929:37" pos:end="1929:41"><name pos:start="1929:37" pos:end="1929:37">n</name> <operator pos:start="1929:39" pos:end="1929:39">&lt;</operator> <literal type="number" pos:start="1929:41" pos:end="1929:41">4</literal></expr>;</condition> <incr pos:start="1929:44" pos:end="1929:46"><expr pos:start="1929:44" pos:end="1929:46"><name pos:start="1929:44" pos:end="1929:44">n</name><operator pos:start="1929:45" pos:end="1929:46">++</operator></expr></incr>)</control> <block pos:start="1929:49" pos:end="1935:25">{<block_content pos:start="1931:29" pos:end="1933:55">

                            <if_stmt pos:start="1931:29" pos:end="1933:55"><if pos:start="1931:29" pos:end="1933:55">if <condition pos:start="1931:32" pos:end="1931:66">(<expr pos:start="1931:33" pos:end="1931:65"><name pos:start="1931:33" pos:end="1931:35">imm</name> <operator pos:start="1931:37" pos:end="1931:37">&amp;</operator> <operator pos:start="1931:39" pos:end="1931:39">(</operator><literal type="number" pos:start="1931:40" pos:end="1931:40">1</literal> <operator pos:start="1931:42" pos:end="1931:43">&lt;&lt;</operator> <operator pos:start="1931:45" pos:end="1931:45">(</operator><name pos:start="1931:46" pos:end="1931:46">n</name> <operator pos:start="1931:48" pos:end="1931:48">+</operator> <operator pos:start="1931:50" pos:end="1931:50">(</operator><name pos:start="1931:51" pos:end="1931:54">pass</name> <operator pos:start="1931:56" pos:end="1931:56">&amp;</operator> <literal type="number" pos:start="1931:58" pos:end="1931:58">1</literal><operator pos:start="1931:59" pos:end="1931:59">)</operator> <operator pos:start="1931:61" pos:end="1931:61">*</operator> <literal type="number" pos:start="1931:63" pos:end="1931:63">4</literal><operator pos:start="1931:64" pos:end="1931:64">)</operator><operator pos:start="1931:65" pos:end="1931:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1933:33" pos:end="1933:55"><block_content pos:start="1933:33" pos:end="1933:55">

                                <expr_stmt pos:start="1933:33" pos:end="1933:55"><expr pos:start="1933:33" pos:end="1933:54"><name pos:start="1933:33" pos:end="1933:35">val</name> <operator pos:start="1933:37" pos:end="1933:38">|=</operator> <literal type="number" pos:start="1933:40" pos:end="1933:43">0xff</literal> <operator pos:start="1933:45" pos:end="1933:46">&lt;&lt;</operator> <operator pos:start="1933:48" pos:end="1933:48">(</operator><name pos:start="1933:49" pos:end="1933:49">n</name> <operator pos:start="1933:51" pos:end="1933:51">*</operator> <literal type="number" pos:start="1933:53" pos:end="1933:53">8</literal><operator pos:start="1933:54" pos:end="1933:54">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="1937:25" pos:end="1937:51"><expr pos:start="1937:25" pos:end="1937:50"><call pos:start="1937:25" pos:end="1937:50"><name pos:start="1937:25" pos:end="1937:40">tcg_gen_movi_i32</name><argument_list pos:start="1937:41" pos:end="1937:50">(<argument pos:start="1937:42" pos:end="1937:44"><expr pos:start="1937:42" pos:end="1937:44"><name pos:start="1937:42" pos:end="1937:44">tmp</name></expr></argument>, <argument pos:start="1937:47" pos:end="1937:49"><expr pos:start="1937:47" pos:end="1937:49"><name pos:start="1937:47" pos:end="1937:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1939:23" pos:end="1943:21">else <block pos:start="1939:28" pos:end="1943:21">{<block_content pos:start="1941:25" pos:end="1941:51">

                        <expr_stmt pos:start="1941:25" pos:end="1941:51"><expr pos:start="1941:25" pos:end="1941:50"><call pos:start="1941:25" pos:end="1941:50"><name pos:start="1941:25" pos:end="1941:40">tcg_gen_movi_i32</name><argument_list pos:start="1941:41" pos:end="1941:50">(<argument pos:start="1941:42" pos:end="1941:44"><expr pos:start="1941:42" pos:end="1941:44"><name pos:start="1941:42" pos:end="1941:44">tmp</name></expr></argument>, <argument pos:start="1941:47" pos:end="1941:49"><expr pos:start="1941:47" pos:end="1941:49"><name pos:start="1941:47" pos:end="1941:49">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1947:17" pos:end="1947:46"><expr pos:start="1947:17" pos:end="1947:45"><call pos:start="1947:17" pos:end="1947:45"><name pos:start="1947:17" pos:end="1947:30">neon_store_reg</name><argument_list pos:start="1947:31" pos:end="1947:45">(<argument pos:start="1947:32" pos:end="1947:33"><expr pos:start="1947:32" pos:end="1947:33"><name pos:start="1947:32" pos:end="1947:33">rd</name></expr></argument>, <argument pos:start="1947:36" pos:end="1947:39"><expr pos:start="1947:36" pos:end="1947:39"><name pos:start="1947:36" pos:end="1947:39">pass</name></expr></argument>, <argument pos:start="1947:42" pos:end="1947:44"><expr pos:start="1947:42" pos:end="1947:44"><name pos:start="1947:42" pos:end="1947:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="1953:7" pos:end="3985:5">else <block pos:start="1953:12" pos:end="3985:5">{<block_content pos:start="1955:9" pos:end="3983:9"> <comment type="block" pos:start="1953:14" pos:end="1953:52">/* (insn &amp; 0x00800010 == 0x00800000) */</comment>

        <if_stmt pos:start="1955:9" pos:end="3983:9"><if pos:start="1955:9" pos:end="2701:9">if <condition pos:start="1955:12" pos:end="1955:22">(<expr pos:start="1955:13" pos:end="1955:21"><name pos:start="1955:13" pos:end="1955:16">size</name> <operator pos:start="1955:18" pos:end="1955:19">!=</operator> <literal type="number" pos:start="1955:21" pos:end="1955:21">3</literal></expr>)</condition> <block pos:start="1955:24" pos:end="2701:9">{<block_content pos:start="1957:13" pos:end="2699:13">

            <expr_stmt pos:start="1957:13" pos:end="1957:35"><expr pos:start="1957:13" pos:end="1957:34"><name pos:start="1957:13" pos:end="1957:14">op</name> <operator pos:start="1957:16" pos:end="1957:16">=</operator> <operator pos:start="1957:18" pos:end="1957:18">(</operator><name pos:start="1957:19" pos:end="1957:22">insn</name> <operator pos:start="1957:24" pos:end="1957:25">&gt;&gt;</operator> <literal type="number" pos:start="1957:27" pos:end="1957:27">8</literal><operator pos:start="1957:28" pos:end="1957:28">)</operator> <operator pos:start="1957:30" pos:end="1957:30">&amp;</operator> <literal type="number" pos:start="1957:32" pos:end="1957:34">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1959:13" pos:end="2699:13"><if pos:start="1959:13" pos:end="2403:13">if <condition pos:start="1959:16" pos:end="1959:39">(<expr pos:start="1959:17" pos:end="1959:38"><operator pos:start="1959:17" pos:end="1959:17">(</operator><name pos:start="1959:18" pos:end="1959:21">insn</name> <operator pos:start="1959:23" pos:end="1959:23">&amp;</operator> <operator pos:start="1959:25" pos:end="1959:25">(</operator><literal type="number" pos:start="1959:26" pos:end="1959:26">1</literal> <operator pos:start="1959:28" pos:end="1959:29">&lt;&lt;</operator> <literal type="number" pos:start="1959:31" pos:end="1959:31">6</literal><operator pos:start="1959:32" pos:end="1959:32">)</operator><operator pos:start="1959:33" pos:end="1959:33">)</operator> <operator pos:start="1959:35" pos:end="1959:36">==</operator> <literal type="number" pos:start="1959:38" pos:end="1959:38">0</literal></expr>)</condition> <block pos:start="1959:41" pos:end="2403:13">{<block_content pos:start="1963:17" pos:end="2401:17">

                <comment type="block" pos:start="1961:17" pos:end="1961:60">/* Three registers of different lengths.  */</comment>

                <decl_stmt pos:start="1963:17" pos:end="1963:30"><decl pos:start="1963:17" pos:end="1963:29"><type pos:start="1963:17" pos:end="1963:19"><name pos:start="1963:17" pos:end="1963:19">int</name></type> <name pos:start="1963:21" pos:end="1963:29">src1_wide</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1965:17" pos:end="1965:30"><decl pos:start="1965:17" pos:end="1965:29"><type pos:start="1965:17" pos:end="1965:19"><name pos:start="1965:17" pos:end="1965:19">int</name></type> <name pos:start="1965:21" pos:end="1965:29">src2_wide</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1967:17" pos:end="1967:29"><decl pos:start="1967:17" pos:end="1967:28"><type pos:start="1967:17" pos:end="1967:19"><name pos:start="1967:17" pos:end="1967:19">int</name></type> <name pos:start="1967:21" pos:end="1967:28">prewiden</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1969:17" pos:end="1979:19">/* undefreq: bit 0 : UNDEF if size == 0

                 *           bit 1 : UNDEF if size == 1

                 *           bit 2 : UNDEF if size == 2

                 *           bit 3 : UNDEF if U == 1

                 * Note that [2:0] set implies 'always UNDEF'

                 */</comment>

                <decl_stmt pos:start="1981:17" pos:end="1981:29"><decl pos:start="1981:17" pos:end="1981:28"><type pos:start="1981:17" pos:end="1981:19"><name pos:start="1981:17" pos:end="1981:19">int</name></type> <name pos:start="1981:21" pos:end="1981:28">undefreq</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1983:17" pos:end="1983:62">/* prewiden, src1_wide, src2_wide, undefreq */</comment>

                <decl_stmt pos:start="1985:17" pos:end="2019:18"><decl pos:start="1985:17" pos:end="2019:17"><type pos:start="1985:17" pos:end="1985:32"><specifier pos:start="1985:17" pos:end="1985:22">static</specifier> <specifier pos:start="1985:24" pos:end="1985:28">const</specifier> <name pos:start="1985:30" pos:end="1985:32">int</name></type> <name pos:start="1985:34" pos:end="1985:54"><name pos:start="1985:34" pos:end="1985:47">neon_3reg_wide</name><index pos:start="1985:48" pos:end="1985:51">[<expr pos:start="1985:49" pos:end="1985:50"><literal type="number" pos:start="1985:49" pos:end="1985:50">16</literal></expr>]</index><index pos:start="1985:52" pos:end="1985:54">[<expr pos:start="1985:53" pos:end="1985:53"><literal type="number" pos:start="1985:53" pos:end="1985:53">4</literal></expr>]</index></name> <init pos:start="1985:56" pos:end="2019:17">= <expr pos:start="1985:58" pos:end="2019:17"><block pos:start="1985:58" pos:end="2019:17">{

                    <expr pos:start="1987:21" pos:end="1987:32"><block pos:start="1987:21" pos:end="1987:32">{<expr pos:start="1987:22" pos:end="1987:22"><literal type="number" pos:start="1987:22" pos:end="1987:22">1</literal></expr>, <expr pos:start="1987:25" pos:end="1987:25"><literal type="number" pos:start="1987:25" pos:end="1987:25">0</literal></expr>, <expr pos:start="1987:28" pos:end="1987:28"><literal type="number" pos:start="1987:28" pos:end="1987:28">0</literal></expr>, <expr pos:start="1987:31" pos:end="1987:31"><literal type="number" pos:start="1987:31" pos:end="1987:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1987:35" pos:end="1987:45">/* VADDL */</comment>

                    <expr pos:start="1989:21" pos:end="1989:32"><block pos:start="1989:21" pos:end="1989:32">{<expr pos:start="1989:22" pos:end="1989:22"><literal type="number" pos:start="1989:22" pos:end="1989:22">1</literal></expr>, <expr pos:start="1989:25" pos:end="1989:25"><literal type="number" pos:start="1989:25" pos:end="1989:25">1</literal></expr>, <expr pos:start="1989:28" pos:end="1989:28"><literal type="number" pos:start="1989:28" pos:end="1989:28">0</literal></expr>, <expr pos:start="1989:31" pos:end="1989:31"><literal type="number" pos:start="1989:31" pos:end="1989:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1989:35" pos:end="1989:45">/* VADDW */</comment>

                    <expr pos:start="1991:21" pos:end="1991:32"><block pos:start="1991:21" pos:end="1991:32">{<expr pos:start="1991:22" pos:end="1991:22"><literal type="number" pos:start="1991:22" pos:end="1991:22">1</literal></expr>, <expr pos:start="1991:25" pos:end="1991:25"><literal type="number" pos:start="1991:25" pos:end="1991:25">0</literal></expr>, <expr pos:start="1991:28" pos:end="1991:28"><literal type="number" pos:start="1991:28" pos:end="1991:28">0</literal></expr>, <expr pos:start="1991:31" pos:end="1991:31"><literal type="number" pos:start="1991:31" pos:end="1991:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1991:35" pos:end="1991:45">/* VSUBL */</comment>

                    <expr pos:start="1993:21" pos:end="1993:32"><block pos:start="1993:21" pos:end="1993:32">{<expr pos:start="1993:22" pos:end="1993:22"><literal type="number" pos:start="1993:22" pos:end="1993:22">1</literal></expr>, <expr pos:start="1993:25" pos:end="1993:25"><literal type="number" pos:start="1993:25" pos:end="1993:25">1</literal></expr>, <expr pos:start="1993:28" pos:end="1993:28"><literal type="number" pos:start="1993:28" pos:end="1993:28">0</literal></expr>, <expr pos:start="1993:31" pos:end="1993:31"><literal type="number" pos:start="1993:31" pos:end="1993:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1993:35" pos:end="1993:45">/* VSUBW */</comment>

                    <expr pos:start="1995:21" pos:end="1995:32"><block pos:start="1995:21" pos:end="1995:32">{<expr pos:start="1995:22" pos:end="1995:22"><literal type="number" pos:start="1995:22" pos:end="1995:22">0</literal></expr>, <expr pos:start="1995:25" pos:end="1995:25"><literal type="number" pos:start="1995:25" pos:end="1995:25">1</literal></expr>, <expr pos:start="1995:28" pos:end="1995:28"><literal type="number" pos:start="1995:28" pos:end="1995:28">1</literal></expr>, <expr pos:start="1995:31" pos:end="1995:31"><literal type="number" pos:start="1995:31" pos:end="1995:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1995:35" pos:end="1995:46">/* VADDHN */</comment>

                    <expr pos:start="1997:21" pos:end="1997:32"><block pos:start="1997:21" pos:end="1997:32">{<expr pos:start="1997:22" pos:end="1997:22"><literal type="number" pos:start="1997:22" pos:end="1997:22">0</literal></expr>, <expr pos:start="1997:25" pos:end="1997:25"><literal type="number" pos:start="1997:25" pos:end="1997:25">0</literal></expr>, <expr pos:start="1997:28" pos:end="1997:28"><literal type="number" pos:start="1997:28" pos:end="1997:28">0</literal></expr>, <expr pos:start="1997:31" pos:end="1997:31"><literal type="number" pos:start="1997:31" pos:end="1997:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1997:35" pos:end="1997:45">/* VABAL */</comment>

                    <expr pos:start="1999:21" pos:end="1999:32"><block pos:start="1999:21" pos:end="1999:32">{<expr pos:start="1999:22" pos:end="1999:22"><literal type="number" pos:start="1999:22" pos:end="1999:22">0</literal></expr>, <expr pos:start="1999:25" pos:end="1999:25"><literal type="number" pos:start="1999:25" pos:end="1999:25">1</literal></expr>, <expr pos:start="1999:28" pos:end="1999:28"><literal type="number" pos:start="1999:28" pos:end="1999:28">1</literal></expr>, <expr pos:start="1999:31" pos:end="1999:31"><literal type="number" pos:start="1999:31" pos:end="1999:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1999:35" pos:end="1999:46">/* VSUBHN */</comment>

                    <expr pos:start="2001:21" pos:end="2001:32"><block pos:start="2001:21" pos:end="2001:32">{<expr pos:start="2001:22" pos:end="2001:22"><literal type="number" pos:start="2001:22" pos:end="2001:22">0</literal></expr>, <expr pos:start="2001:25" pos:end="2001:25"><literal type="number" pos:start="2001:25" pos:end="2001:25">0</literal></expr>, <expr pos:start="2001:28" pos:end="2001:28"><literal type="number" pos:start="2001:28" pos:end="2001:28">0</literal></expr>, <expr pos:start="2001:31" pos:end="2001:31"><literal type="number" pos:start="2001:31" pos:end="2001:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="2001:35" pos:end="2001:45">/* VABDL */</comment>

                    <expr pos:start="2003:21" pos:end="2003:32"><block pos:start="2003:21" pos:end="2003:32">{<expr pos:start="2003:22" pos:end="2003:22"><literal type="number" pos:start="2003:22" pos:end="2003:22">0</literal></expr>, <expr pos:start="2003:25" pos:end="2003:25"><literal type="number" pos:start="2003:25" pos:end="2003:25">0</literal></expr>, <expr pos:start="2003:28" pos:end="2003:28"><literal type="number" pos:start="2003:28" pos:end="2003:28">0</literal></expr>, <expr pos:start="2003:31" pos:end="2003:31"><literal type="number" pos:start="2003:31" pos:end="2003:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="2003:35" pos:end="2003:45">/* VMLAL */</comment>

                    <expr pos:start="2005:21" pos:end="2005:32"><block pos:start="2005:21" pos:end="2005:32">{<expr pos:start="2005:22" pos:end="2005:22"><literal type="number" pos:start="2005:22" pos:end="2005:22">0</literal></expr>, <expr pos:start="2005:25" pos:end="2005:25"><literal type="number" pos:start="2005:25" pos:end="2005:25">0</literal></expr>, <expr pos:start="2005:28" pos:end="2005:28"><literal type="number" pos:start="2005:28" pos:end="2005:28">0</literal></expr>, <expr pos:start="2005:31" pos:end="2005:31"><literal type="number" pos:start="2005:31" pos:end="2005:31">9</literal></expr>}</block></expr>, <comment type="block" pos:start="2005:35" pos:end="2005:47">/* VQDMLAL */</comment>

                    <expr pos:start="2007:21" pos:end="2007:32"><block pos:start="2007:21" pos:end="2007:32">{<expr pos:start="2007:22" pos:end="2007:22"><literal type="number" pos:start="2007:22" pos:end="2007:22">0</literal></expr>, <expr pos:start="2007:25" pos:end="2007:25"><literal type="number" pos:start="2007:25" pos:end="2007:25">0</literal></expr>, <expr pos:start="2007:28" pos:end="2007:28"><literal type="number" pos:start="2007:28" pos:end="2007:28">0</literal></expr>, <expr pos:start="2007:31" pos:end="2007:31"><literal type="number" pos:start="2007:31" pos:end="2007:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="2007:35" pos:end="2007:45">/* VMLSL */</comment>

                    <expr pos:start="2009:21" pos:end="2009:32"><block pos:start="2009:21" pos:end="2009:32">{<expr pos:start="2009:22" pos:end="2009:22"><literal type="number" pos:start="2009:22" pos:end="2009:22">0</literal></expr>, <expr pos:start="2009:25" pos:end="2009:25"><literal type="number" pos:start="2009:25" pos:end="2009:25">0</literal></expr>, <expr pos:start="2009:28" pos:end="2009:28"><literal type="number" pos:start="2009:28" pos:end="2009:28">0</literal></expr>, <expr pos:start="2009:31" pos:end="2009:31"><literal type="number" pos:start="2009:31" pos:end="2009:31">9</literal></expr>}</block></expr>, <comment type="block" pos:start="2009:35" pos:end="2009:47">/* VQDMLSL */</comment>

                    <expr pos:start="2011:21" pos:end="2011:32"><block pos:start="2011:21" pos:end="2011:32">{<expr pos:start="2011:22" pos:end="2011:22"><literal type="number" pos:start="2011:22" pos:end="2011:22">0</literal></expr>, <expr pos:start="2011:25" pos:end="2011:25"><literal type="number" pos:start="2011:25" pos:end="2011:25">0</literal></expr>, <expr pos:start="2011:28" pos:end="2011:28"><literal type="number" pos:start="2011:28" pos:end="2011:28">0</literal></expr>, <expr pos:start="2011:31" pos:end="2011:31"><literal type="number" pos:start="2011:31" pos:end="2011:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="2011:35" pos:end="2011:53">/* Integer VMULL */</comment>

                    <expr pos:start="2013:21" pos:end="2013:32"><block pos:start="2013:21" pos:end="2013:32">{<expr pos:start="2013:22" pos:end="2013:22"><literal type="number" pos:start="2013:22" pos:end="2013:22">0</literal></expr>, <expr pos:start="2013:25" pos:end="2013:25"><literal type="number" pos:start="2013:25" pos:end="2013:25">0</literal></expr>, <expr pos:start="2013:28" pos:end="2013:28"><literal type="number" pos:start="2013:28" pos:end="2013:28">0</literal></expr>, <expr pos:start="2013:31" pos:end="2013:31"><literal type="number" pos:start="2013:31" pos:end="2013:31">1</literal></expr>}</block></expr>, <comment type="block" pos:start="2013:35" pos:end="2013:47">/* VQDMULL */</comment>

                    <expr pos:start="2015:21" pos:end="2015:34"><block pos:start="2015:21" pos:end="2015:34">{<expr pos:start="2015:22" pos:end="2015:22"><literal type="number" pos:start="2015:22" pos:end="2015:22">0</literal></expr>, <expr pos:start="2015:25" pos:end="2015:25"><literal type="number" pos:start="2015:25" pos:end="2015:25">0</literal></expr>, <expr pos:start="2015:28" pos:end="2015:28"><literal type="number" pos:start="2015:28" pos:end="2015:28">0</literal></expr>, <expr pos:start="2015:31" pos:end="2015:33"><literal type="number" pos:start="2015:31" pos:end="2015:33">0xa</literal></expr>}</block></expr>, <comment type="block" pos:start="2015:37" pos:end="2015:58">/* Polynomial VMULL */</comment>

                    <expr pos:start="2017:21" pos:end="2017:32"><block pos:start="2017:21" pos:end="2017:32">{<expr pos:start="2017:22" pos:end="2017:22"><literal type="number" pos:start="2017:22" pos:end="2017:22">0</literal></expr>, <expr pos:start="2017:25" pos:end="2017:25"><literal type="number" pos:start="2017:25" pos:end="2017:25">0</literal></expr>, <expr pos:start="2017:28" pos:end="2017:28"><literal type="number" pos:start="2017:28" pos:end="2017:28">0</literal></expr>, <expr pos:start="2017:31" pos:end="2017:31"><literal type="number" pos:start="2017:31" pos:end="2017:31">7</literal></expr>}</block></expr>, <comment type="block" pos:start="2017:35" pos:end="2017:62">/* Reserved: always UNDEF */</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="2023:17" pos:end="2023:49"><expr pos:start="2023:17" pos:end="2023:48"><name pos:start="2023:17" pos:end="2023:24">prewiden</name> <operator pos:start="2023:26" pos:end="2023:26">=</operator> <name pos:start="2023:28" pos:end="2023:48"><name pos:start="2023:28" pos:end="2023:41">neon_3reg_wide</name><index pos:start="2023:42" pos:end="2023:45">[<expr pos:start="2023:43" pos:end="2023:44"><name pos:start="2023:43" pos:end="2023:44">op</name></expr>]</index><index pos:start="2023:46" pos:end="2023:48">[<expr pos:start="2023:47" pos:end="2023:47"><literal type="number" pos:start="2023:47" pos:end="2023:47">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="2025:17" pos:end="2025:50"><expr pos:start="2025:17" pos:end="2025:49"><name pos:start="2025:17" pos:end="2025:25">src1_wide</name> <operator pos:start="2025:27" pos:end="2025:27">=</operator> <name pos:start="2025:29" pos:end="2025:49"><name pos:start="2025:29" pos:end="2025:42">neon_3reg_wide</name><index pos:start="2025:43" pos:end="2025:46">[<expr pos:start="2025:44" pos:end="2025:45"><name pos:start="2025:44" pos:end="2025:45">op</name></expr>]</index><index pos:start="2025:47" pos:end="2025:49">[<expr pos:start="2025:48" pos:end="2025:48"><literal type="number" pos:start="2025:48" pos:end="2025:48">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="2027:17" pos:end="2027:50"><expr pos:start="2027:17" pos:end="2027:49"><name pos:start="2027:17" pos:end="2027:25">src2_wide</name> <operator pos:start="2027:27" pos:end="2027:27">=</operator> <name pos:start="2027:29" pos:end="2027:49"><name pos:start="2027:29" pos:end="2027:42">neon_3reg_wide</name><index pos:start="2027:43" pos:end="2027:46">[<expr pos:start="2027:44" pos:end="2027:45"><name pos:start="2027:44" pos:end="2027:45">op</name></expr>]</index><index pos:start="2027:47" pos:end="2027:49">[<expr pos:start="2027:48" pos:end="2027:48"><literal type="number" pos:start="2027:48" pos:end="2027:48">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="2029:17" pos:end="2029:49"><expr pos:start="2029:17" pos:end="2029:48"><name pos:start="2029:17" pos:end="2029:24">undefreq</name> <operator pos:start="2029:26" pos:end="2029:26">=</operator> <name pos:start="2029:28" pos:end="2029:48"><name pos:start="2029:28" pos:end="2029:41">neon_3reg_wide</name><index pos:start="2029:42" pos:end="2029:45">[<expr pos:start="2029:43" pos:end="2029:44"><name pos:start="2029:43" pos:end="2029:44">op</name></expr>]</index><index pos:start="2029:46" pos:end="2029:48">[<expr pos:start="2029:47" pos:end="2029:47"><literal type="number" pos:start="2029:47" pos:end="2029:47">3</literal></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="2033:17" pos:end="2039:17"><if pos:start="2033:17" pos:end="2039:17">if <condition pos:start="2033:20" pos:end="2035:42">(<expr pos:start="2033:21" pos:end="2035:41"><operator pos:start="2033:21" pos:end="2033:21">(</operator><name pos:start="2033:22" pos:end="2033:29">undefreq</name> <operator pos:start="2033:31" pos:end="2033:31">&amp;</operator> <operator pos:start="2033:33" pos:end="2033:33">(</operator><literal type="number" pos:start="2033:34" pos:end="2033:34">1</literal> <operator pos:start="2033:36" pos:end="2033:37">&lt;&lt;</operator> <name pos:start="2033:39" pos:end="2033:42">size</name><operator pos:start="2033:43" pos:end="2033:43">)</operator><operator pos:start="2033:44" pos:end="2033:44">)</operator> <operator pos:start="2033:46" pos:end="2033:47">||</operator>

                    <operator pos:start="2035:21" pos:end="2035:21">(</operator><operator pos:start="2035:22" pos:end="2035:22">(</operator><name pos:start="2035:23" pos:end="2035:30">undefreq</name> <operator pos:start="2035:32" pos:end="2035:32">&amp;</operator> <literal type="number" pos:start="2035:34" pos:end="2035:34">8</literal><operator pos:start="2035:35" pos:end="2035:35">)</operator> <operator pos:start="2035:37" pos:end="2035:38">&amp;&amp;</operator> <name pos:start="2035:40" pos:end="2035:40">u</name><operator pos:start="2035:41" pos:end="2035:41">)</operator></expr>)</condition> <block pos:start="2035:44" pos:end="2039:17">{<block_content pos:start="2037:21" pos:end="2037:29">

                    <return pos:start="2037:21" pos:end="2037:29">return <expr pos:start="2037:28" pos:end="2037:28"><literal type="number" pos:start="2037:28" pos:end="2037:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2041:17" pos:end="2049:17"><if pos:start="2041:17" pos:end="2049:17">if <condition pos:start="2041:20" pos:end="2045:45">(<expr pos:start="2041:21" pos:end="2045:44"><operator pos:start="2041:21" pos:end="2041:21">(</operator><name pos:start="2041:22" pos:end="2041:30">src1_wide</name> <operator pos:start="2041:32" pos:end="2041:33">&amp;&amp;</operator> <operator pos:start="2041:35" pos:end="2041:35">(</operator><name pos:start="2041:36" pos:end="2041:37">rn</name> <operator pos:start="2041:39" pos:end="2041:39">&amp;</operator> <literal type="number" pos:start="2041:41" pos:end="2041:41">1</literal><operator pos:start="2041:42" pos:end="2041:42">)</operator><operator pos:start="2041:43" pos:end="2041:43">)</operator> <operator pos:start="2041:45" pos:end="2041:46">||</operator>

                    <operator pos:start="2043:21" pos:end="2043:21">(</operator><name pos:start="2043:22" pos:end="2043:30">src2_wide</name> <operator pos:start="2043:32" pos:end="2043:33">&amp;&amp;</operator> <operator pos:start="2043:35" pos:end="2043:35">(</operator><name pos:start="2043:36" pos:end="2043:37">rm</name> <operator pos:start="2043:39" pos:end="2043:39">&amp;</operator> <literal type="number" pos:start="2043:41" pos:end="2043:41">1</literal><operator pos:start="2043:42" pos:end="2043:42">)</operator><operator pos:start="2043:43" pos:end="2043:43">)</operator> <operator pos:start="2043:45" pos:end="2043:46">||</operator>

                    <operator pos:start="2045:21" pos:end="2045:21">(</operator><operator pos:start="2045:22" pos:end="2045:22">!</operator><name pos:start="2045:23" pos:end="2045:31">src2_wide</name> <operator pos:start="2045:33" pos:end="2045:34">&amp;&amp;</operator> <operator pos:start="2045:36" pos:end="2045:36">(</operator><name pos:start="2045:37" pos:end="2045:38">rd</name> <operator pos:start="2045:40" pos:end="2045:40">&amp;</operator> <literal type="number" pos:start="2045:42" pos:end="2045:42">1</literal><operator pos:start="2045:43" pos:end="2045:43">)</operator><operator pos:start="2045:44" pos:end="2045:44">)</operator></expr>)</condition> <block pos:start="2045:47" pos:end="2049:17">{<block_content pos:start="2047:21" pos:end="2047:29">

                    <return pos:start="2047:21" pos:end="2047:29">return <expr pos:start="2047:28" pos:end="2047:28"><literal type="number" pos:start="2047:28" pos:end="2047:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="2053:17" pos:end="2057:19">/* Handle VMULL.P64 (Polynomial 64x64 to 128 bit multiply)

                 * outside the loop below as it only performs a single pass.

                 */</comment>

                <if_stmt pos:start="2059:17" pos:end="2097:17"><if pos:start="2059:17" pos:end="2097:17">if <condition pos:start="2059:20" pos:end="2059:42">(<expr pos:start="2059:21" pos:end="2059:41"><name pos:start="2059:21" pos:end="2059:22">op</name> <operator pos:start="2059:24" pos:end="2059:25">==</operator> <literal type="number" pos:start="2059:27" pos:end="2059:28">14</literal> <operator pos:start="2059:30" pos:end="2059:31">&amp;&amp;</operator> <name pos:start="2059:33" pos:end="2059:36">size</name> <operator pos:start="2059:38" pos:end="2059:39">==</operator> <literal type="number" pos:start="2059:41" pos:end="2059:41">2</literal></expr>)</condition> <block pos:start="2059:44" pos:end="2097:17">{<block_content pos:start="2061:21" pos:end="2095:29">

                    <decl_stmt pos:start="2061:21" pos:end="2061:52"><decl pos:start="2061:21" pos:end="2061:35"><type pos:start="2061:21" pos:end="2061:28"><name pos:start="2061:21" pos:end="2061:28">TCGv_i64</name></type> <name pos:start="2061:30" pos:end="2061:35">tcg_rn</name></decl>, <decl pos:start="2061:38" pos:end="2061:43"><type ref="prev" pos:start="2061:21" pos:end="2061:28"/><name pos:start="2061:38" pos:end="2061:43">tcg_rm</name></decl>, <decl pos:start="2061:46" pos:end="2061:51"><type ref="prev" pos:start="2061:21" pos:end="2061:28"/><name pos:start="2061:46" pos:end="2061:51">tcg_rd</name></decl>;</decl_stmt>



                    <if_stmt pos:start="2065:21" pos:end="2069:21"><if pos:start="2065:21" pos:end="2069:21">if <condition pos:start="2065:24" pos:end="2065:65">(<expr pos:start="2065:25" pos:end="2065:64"><operator pos:start="2065:25" pos:end="2065:25">!</operator><call pos:start="2065:26" pos:end="2065:64"><name pos:start="2065:26" pos:end="2065:39">arm_dc_feature</name><argument_list pos:start="2065:40" pos:end="2065:64">(<argument pos:start="2065:41" pos:end="2065:41"><expr pos:start="2065:41" pos:end="2065:41"><name pos:start="2065:41" pos:end="2065:41">s</name></expr></argument>, <argument pos:start="2065:44" pos:end="2065:63"><expr pos:start="2065:44" pos:end="2065:63"><name pos:start="2065:44" pos:end="2065:63">ARM_FEATURE_V8_PMULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2065:67" pos:end="2069:21">{<block_content pos:start="2067:25" pos:end="2067:33">

                        <return pos:start="2067:25" pos:end="2067:33">return <expr pos:start="2067:32" pos:end="2067:32"><literal type="number" pos:start="2067:32" pos:end="2067:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2071:21" pos:end="2071:48"><expr pos:start="2071:21" pos:end="2071:47"><name pos:start="2071:21" pos:end="2071:26">tcg_rn</name> <operator pos:start="2071:28" pos:end="2071:28">=</operator> <call pos:start="2071:30" pos:end="2071:47"><name pos:start="2071:30" pos:end="2071:45">tcg_temp_new_i64</name><argument_list pos:start="2071:46" pos:end="2071:47">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2073:21" pos:end="2073:48"><expr pos:start="2073:21" pos:end="2073:47"><name pos:start="2073:21" pos:end="2073:26">tcg_rm</name> <operator pos:start="2073:28" pos:end="2073:28">=</operator> <call pos:start="2073:30" pos:end="2073:47"><name pos:start="2073:30" pos:end="2073:45">tcg_temp_new_i64</name><argument_list pos:start="2073:46" pos:end="2073:47">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2075:21" pos:end="2075:48"><expr pos:start="2075:21" pos:end="2075:47"><name pos:start="2075:21" pos:end="2075:26">tcg_rd</name> <operator pos:start="2075:28" pos:end="2075:28">=</operator> <call pos:start="2075:30" pos:end="2075:47"><name pos:start="2075:30" pos:end="2075:45">tcg_temp_new_i64</name><argument_list pos:start="2075:46" pos:end="2075:47">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2077:21" pos:end="2077:48"><expr pos:start="2077:21" pos:end="2077:47"><call pos:start="2077:21" pos:end="2077:47"><name pos:start="2077:21" pos:end="2077:35">neon_load_reg64</name><argument_list pos:start="2077:36" pos:end="2077:47">(<argument pos:start="2077:37" pos:end="2077:42"><expr pos:start="2077:37" pos:end="2077:42"><name pos:start="2077:37" pos:end="2077:42">tcg_rn</name></expr></argument>, <argument pos:start="2077:45" pos:end="2077:46"><expr pos:start="2077:45" pos:end="2077:46"><name pos:start="2077:45" pos:end="2077:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2079:21" pos:end="2079:48"><expr pos:start="2079:21" pos:end="2079:47"><call pos:start="2079:21" pos:end="2079:47"><name pos:start="2079:21" pos:end="2079:35">neon_load_reg64</name><argument_list pos:start="2079:36" pos:end="2079:47">(<argument pos:start="2079:37" pos:end="2079:42"><expr pos:start="2079:37" pos:end="2079:42"><name pos:start="2079:37" pos:end="2079:42">tcg_rm</name></expr></argument>, <argument pos:start="2079:45" pos:end="2079:46"><expr pos:start="2079:45" pos:end="2079:46"><name pos:start="2079:45" pos:end="2079:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2081:21" pos:end="2081:72"><expr pos:start="2081:21" pos:end="2081:71"><call pos:start="2081:21" pos:end="2081:71"><name pos:start="2081:21" pos:end="2081:47">gen_helper_neon_pmull_64_lo</name><argument_list pos:start="2081:48" pos:end="2081:71">(<argument pos:start="2081:49" pos:end="2081:54"><expr pos:start="2081:49" pos:end="2081:54"><name pos:start="2081:49" pos:end="2081:54">tcg_rd</name></expr></argument>, <argument pos:start="2081:57" pos:end="2081:62"><expr pos:start="2081:57" pos:end="2081:62"><name pos:start="2081:57" pos:end="2081:62">tcg_rn</name></expr></argument>, <argument pos:start="2081:65" pos:end="2081:70"><expr pos:start="2081:65" pos:end="2081:70"><name pos:start="2081:65" pos:end="2081:70">tcg_rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2083:21" pos:end="2083:49"><expr pos:start="2083:21" pos:end="2083:48"><call pos:start="2083:21" pos:end="2083:48"><name pos:start="2083:21" pos:end="2083:36">neon_store_reg64</name><argument_list pos:start="2083:37" pos:end="2083:48">(<argument pos:start="2083:38" pos:end="2083:43"><expr pos:start="2083:38" pos:end="2083:43"><name pos:start="2083:38" pos:end="2083:43">tcg_rd</name></expr></argument>, <argument pos:start="2083:46" pos:end="2083:47"><expr pos:start="2083:46" pos:end="2083:47"><name pos:start="2083:46" pos:end="2083:47">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2085:21" pos:end="2085:72"><expr pos:start="2085:21" pos:end="2085:71"><call pos:start="2085:21" pos:end="2085:71"><name pos:start="2085:21" pos:end="2085:47">gen_helper_neon_pmull_64_hi</name><argument_list pos:start="2085:48" pos:end="2085:71">(<argument pos:start="2085:49" pos:end="2085:54"><expr pos:start="2085:49" pos:end="2085:54"><name pos:start="2085:49" pos:end="2085:54">tcg_rd</name></expr></argument>, <argument pos:start="2085:57" pos:end="2085:62"><expr pos:start="2085:57" pos:end="2085:62"><name pos:start="2085:57" pos:end="2085:62">tcg_rn</name></expr></argument>, <argument pos:start="2085:65" pos:end="2085:70"><expr pos:start="2085:65" pos:end="2085:70"><name pos:start="2085:65" pos:end="2085:70">tcg_rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2087:21" pos:end="2087:53"><expr pos:start="2087:21" pos:end="2087:52"><call pos:start="2087:21" pos:end="2087:52"><name pos:start="2087:21" pos:end="2087:36">neon_store_reg64</name><argument_list pos:start="2087:37" pos:end="2087:52">(<argument pos:start="2087:38" pos:end="2087:43"><expr pos:start="2087:38" pos:end="2087:43"><name pos:start="2087:38" pos:end="2087:43">tcg_rd</name></expr></argument>, <argument pos:start="2087:46" pos:end="2087:51"><expr pos:start="2087:46" pos:end="2087:51"><name pos:start="2087:46" pos:end="2087:47">rd</name> <operator pos:start="2087:49" pos:end="2087:49">+</operator> <literal type="number" pos:start="2087:51" pos:end="2087:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2089:21" pos:end="2089:46"><expr pos:start="2089:21" pos:end="2089:45"><call pos:start="2089:21" pos:end="2089:45"><name pos:start="2089:21" pos:end="2089:37">tcg_temp_free_i64</name><argument_list pos:start="2089:38" pos:end="2089:45">(<argument pos:start="2089:39" pos:end="2089:44"><expr pos:start="2089:39" pos:end="2089:44"><name pos:start="2089:39" pos:end="2089:44">tcg_rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2091:21" pos:end="2091:46"><expr pos:start="2091:21" pos:end="2091:45"><call pos:start="2091:21" pos:end="2091:45"><name pos:start="2091:21" pos:end="2091:37">tcg_temp_free_i64</name><argument_list pos:start="2091:38" pos:end="2091:45">(<argument pos:start="2091:39" pos:end="2091:44"><expr pos:start="2091:39" pos:end="2091:44"><name pos:start="2091:39" pos:end="2091:44">tcg_rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2093:21" pos:end="2093:46"><expr pos:start="2093:21" pos:end="2093:45"><call pos:start="2093:21" pos:end="2093:45"><name pos:start="2093:21" pos:end="2093:37">tcg_temp_free_i64</name><argument_list pos:start="2093:38" pos:end="2093:45">(<argument pos:start="2093:39" pos:end="2093:44"><expr pos:start="2093:39" pos:end="2093:44"><name pos:start="2093:39" pos:end="2093:44">tcg_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="2095:21" pos:end="2095:29">return <expr pos:start="2095:28" pos:end="2095:28"><literal type="number" pos:start="2095:28" pos:end="2095:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="2101:17" pos:end="2105:56">/* Avoid overlapping operands.  Wide source operands are

                   always aligned so will never overlap with wide

                   destinations in problematic ways.  */</comment>

                <if_stmt pos:start="2107:17" pos:end="2119:17"><if pos:start="2107:17" pos:end="2113:17">if <condition pos:start="2107:20" pos:end="2107:43">(<expr pos:start="2107:21" pos:end="2107:42"><name pos:start="2107:21" pos:end="2107:22">rd</name> <operator pos:start="2107:24" pos:end="2107:25">==</operator> <name pos:start="2107:27" pos:end="2107:28">rm</name> <operator pos:start="2107:30" pos:end="2107:31">&amp;&amp;</operator> <operator pos:start="2107:33" pos:end="2107:33">!</operator><name pos:start="2107:34" pos:end="2107:42">src2_wide</name></expr>)</condition> <block pos:start="2107:45" pos:end="2113:17">{<block_content pos:start="2109:21" pos:end="2111:47">

                    <expr_stmt pos:start="2109:21" pos:end="2109:47"><expr pos:start="2109:21" pos:end="2109:46"><name pos:start="2109:21" pos:end="2109:23">tmp</name> <operator pos:start="2109:25" pos:end="2109:25">=</operator> <call pos:start="2109:27" pos:end="2109:46"><name pos:start="2109:27" pos:end="2109:39">neon_load_reg</name><argument_list pos:start="2109:40" pos:end="2109:46">(<argument pos:start="2109:41" pos:end="2109:42"><expr pos:start="2109:41" pos:end="2109:42"><name pos:start="2109:41" pos:end="2109:42">rm</name></expr></argument>, <argument pos:start="2109:45" pos:end="2109:45"><expr pos:start="2109:45" pos:end="2109:45"><literal type="number" pos:start="2109:45" pos:end="2109:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2111:21" pos:end="2111:47"><expr pos:start="2111:21" pos:end="2111:46"><call pos:start="2111:21" pos:end="2111:46"><name pos:start="2111:21" pos:end="2111:38">neon_store_scratch</name><argument_list pos:start="2111:39" pos:end="2111:46">(<argument pos:start="2111:40" pos:end="2111:40"><expr pos:start="2111:40" pos:end="2111:40"><literal type="number" pos:start="2111:40" pos:end="2111:40">2</literal></expr></argument>, <argument pos:start="2111:43" pos:end="2111:45"><expr pos:start="2111:43" pos:end="2111:45"><name pos:start="2111:43" pos:end="2111:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2113:19" pos:end="2119:17">else if <condition pos:start="2113:27" pos:end="2113:50">(<expr pos:start="2113:28" pos:end="2113:49"><name pos:start="2113:28" pos:end="2113:29">rd</name> <operator pos:start="2113:31" pos:end="2113:32">==</operator> <name pos:start="2113:34" pos:end="2113:35">rn</name> <operator pos:start="2113:37" pos:end="2113:38">&amp;&amp;</operator> <operator pos:start="2113:40" pos:end="2113:40">!</operator><name pos:start="2113:41" pos:end="2113:49">src1_wide</name></expr>)</condition> <block pos:start="2113:52" pos:end="2119:17">{<block_content pos:start="2115:21" pos:end="2117:47">

                    <expr_stmt pos:start="2115:21" pos:end="2115:47"><expr pos:start="2115:21" pos:end="2115:46"><name pos:start="2115:21" pos:end="2115:23">tmp</name> <operator pos:start="2115:25" pos:end="2115:25">=</operator> <call pos:start="2115:27" pos:end="2115:46"><name pos:start="2115:27" pos:end="2115:39">neon_load_reg</name><argument_list pos:start="2115:40" pos:end="2115:46">(<argument pos:start="2115:41" pos:end="2115:42"><expr pos:start="2115:41" pos:end="2115:42"><name pos:start="2115:41" pos:end="2115:42">rn</name></expr></argument>, <argument pos:start="2115:45" pos:end="2115:45"><expr pos:start="2115:45" pos:end="2115:45"><literal type="number" pos:start="2115:45" pos:end="2115:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2117:21" pos:end="2117:47"><expr pos:start="2117:21" pos:end="2117:46"><call pos:start="2117:21" pos:end="2117:46"><name pos:start="2117:21" pos:end="2117:38">neon_store_scratch</name><argument_list pos:start="2117:39" pos:end="2117:46">(<argument pos:start="2117:40" pos:end="2117:40"><expr pos:start="2117:40" pos:end="2117:40"><literal type="number" pos:start="2117:40" pos:end="2117:40">2</literal></expr></argument>, <argument pos:start="2117:43" pos:end="2117:45"><expr pos:start="2117:43" pos:end="2117:45"><name pos:start="2117:43" pos:end="2117:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2121:17" pos:end="2121:38"><expr pos:start="2121:17" pos:end="2121:37"><call pos:start="2121:17" pos:end="2121:37"><name pos:start="2121:17" pos:end="2121:31">TCGV_UNUSED_I32</name><argument_list pos:start="2121:32" pos:end="2121:37">(<argument pos:start="2121:33" pos:end="2121:36"><expr pos:start="2121:33" pos:end="2121:36"><name pos:start="2121:33" pos:end="2121:36">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="2123:17" pos:end="2401:17">for <control pos:start="2123:21" pos:end="2123:48">(<init pos:start="2123:22" pos:end="2123:30"><expr pos:start="2123:22" pos:end="2123:29"><name pos:start="2123:22" pos:end="2123:25">pass</name> <operator pos:start="2123:27" pos:end="2123:27">=</operator> <literal type="number" pos:start="2123:29" pos:end="2123:29">0</literal></expr>;</init> <condition pos:start="2123:32" pos:end="2123:40"><expr pos:start="2123:32" pos:end="2123:39"><name pos:start="2123:32" pos:end="2123:35">pass</name> <operator pos:start="2123:37" pos:end="2123:37">&lt;</operator> <literal type="number" pos:start="2123:39" pos:end="2123:39">2</literal></expr>;</condition> <incr pos:start="2123:42" pos:end="2123:47"><expr pos:start="2123:42" pos:end="2123:47"><name pos:start="2123:42" pos:end="2123:45">pass</name><operator pos:start="2123:46" pos:end="2123:47">++</operator></expr></incr>)</control> <block pos:start="2123:50" pos:end="2401:17">{<block_content pos:start="2125:21" pos:end="2399:21">

                    <if_stmt pos:start="2125:21" pos:end="2149:21"><if pos:start="2125:21" pos:end="2131:21">if <condition pos:start="2125:24" pos:end="2125:34">(<expr pos:start="2125:25" pos:end="2125:33"><name pos:start="2125:25" pos:end="2125:33">src1_wide</name></expr>)</condition> <block pos:start="2125:36" pos:end="2131:21">{<block_content pos:start="2127:25" pos:end="2129:45">

                        <expr_stmt pos:start="2127:25" pos:end="2127:59"><expr pos:start="2127:25" pos:end="2127:58"><call pos:start="2127:25" pos:end="2127:58"><name pos:start="2127:25" pos:end="2127:39">neon_load_reg64</name><argument_list pos:start="2127:40" pos:end="2127:58">(<argument pos:start="2127:41" pos:end="2127:46"><expr pos:start="2127:41" pos:end="2127:46"><name pos:start="2127:41" pos:end="2127:46">cpu_V0</name></expr></argument>, <argument pos:start="2127:49" pos:end="2127:57"><expr pos:start="2127:49" pos:end="2127:57"><name pos:start="2127:49" pos:end="2127:50">rn</name> <operator pos:start="2127:52" pos:end="2127:52">+</operator> <name pos:start="2127:54" pos:end="2127:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2129:25" pos:end="2129:45"><expr pos:start="2129:25" pos:end="2129:44"><call pos:start="2129:25" pos:end="2129:44"><name pos:start="2129:25" pos:end="2129:39">TCGV_UNUSED_I32</name><argument_list pos:start="2129:40" pos:end="2129:44">(<argument pos:start="2129:41" pos:end="2129:43"><expr pos:start="2129:41" pos:end="2129:43"><name pos:start="2129:41" pos:end="2129:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2131:23" pos:end="2149:21">else <block pos:start="2131:28" pos:end="2149:21">{<block_content pos:start="2133:25" pos:end="2147:25">

                        <if_stmt pos:start="2133:25" pos:end="2141:25"><if pos:start="2133:25" pos:end="2137:25">if <condition pos:start="2133:28" pos:end="2133:50">(<expr pos:start="2133:29" pos:end="2133:49"><name pos:start="2133:29" pos:end="2133:32">pass</name> <operator pos:start="2133:34" pos:end="2133:35">==</operator> <literal type="number" pos:start="2133:37" pos:end="2133:37">1</literal> <operator pos:start="2133:39" pos:end="2133:40">&amp;&amp;</operator> <name pos:start="2133:42" pos:end="2133:43">rd</name> <operator pos:start="2133:45" pos:end="2133:46">==</operator> <name pos:start="2133:48" pos:end="2133:49">rn</name></expr>)</condition> <block pos:start="2133:52" pos:end="2137:25">{<block_content pos:start="2135:29" pos:end="2135:55">

                            <expr_stmt pos:start="2135:29" pos:end="2135:55"><expr pos:start="2135:29" pos:end="2135:54"><name pos:start="2135:29" pos:end="2135:31">tmp</name> <operator pos:start="2135:33" pos:end="2135:33">=</operator> <call pos:start="2135:35" pos:end="2135:54"><name pos:start="2135:35" pos:end="2135:51">neon_load_scratch</name><argument_list pos:start="2135:52" pos:end="2135:54">(<argument pos:start="2135:53" pos:end="2135:53"><expr pos:start="2135:53" pos:end="2135:53"><literal type="number" pos:start="2135:53" pos:end="2135:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2137:27" pos:end="2141:25">else <block pos:start="2137:32" pos:end="2141:25">{<block_content pos:start="2139:29" pos:end="2139:58">

                            <expr_stmt pos:start="2139:29" pos:end="2139:58"><expr pos:start="2139:29" pos:end="2139:57"><name pos:start="2139:29" pos:end="2139:31">tmp</name> <operator pos:start="2139:33" pos:end="2139:33">=</operator> <call pos:start="2139:35" pos:end="2139:57"><name pos:start="2139:35" pos:end="2139:47">neon_load_reg</name><argument_list pos:start="2139:48" pos:end="2139:57">(<argument pos:start="2139:49" pos:end="2139:50"><expr pos:start="2139:49" pos:end="2139:50"><name pos:start="2139:49" pos:end="2139:50">rn</name></expr></argument>, <argument pos:start="2139:53" pos:end="2139:56"><expr pos:start="2139:53" pos:end="2139:56"><name pos:start="2139:53" pos:end="2139:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="2143:25" pos:end="2147:25"><if pos:start="2143:25" pos:end="2147:25">if <condition pos:start="2143:28" pos:end="2143:37">(<expr pos:start="2143:29" pos:end="2143:36"><name pos:start="2143:29" pos:end="2143:36">prewiden</name></expr>)</condition> <block pos:start="2143:39" pos:end="2147:25">{<block_content pos:start="2145:29" pos:end="2145:65">

                            <expr_stmt pos:start="2145:29" pos:end="2145:65"><expr pos:start="2145:29" pos:end="2145:64"><call pos:start="2145:29" pos:end="2145:64"><name pos:start="2145:29" pos:end="2145:42">gen_neon_widen</name><argument_list pos:start="2145:43" pos:end="2145:64">(<argument pos:start="2145:44" pos:end="2145:49"><expr pos:start="2145:44" pos:end="2145:49"><name pos:start="2145:44" pos:end="2145:49">cpu_V0</name></expr></argument>, <argument pos:start="2145:52" pos:end="2145:54"><expr pos:start="2145:52" pos:end="2145:54"><name pos:start="2145:52" pos:end="2145:54">tmp</name></expr></argument>, <argument pos:start="2145:57" pos:end="2145:60"><expr pos:start="2145:57" pos:end="2145:60"><name pos:start="2145:57" pos:end="2145:60">size</name></expr></argument>, <argument pos:start="2145:63" pos:end="2145:63"><expr pos:start="2145:63" pos:end="2145:63"><name pos:start="2145:63" pos:end="2145:63">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="2151:21" pos:end="2175:21"><if pos:start="2151:21" pos:end="2157:21">if <condition pos:start="2151:24" pos:end="2151:34">(<expr pos:start="2151:25" pos:end="2151:33"><name pos:start="2151:25" pos:end="2151:33">src2_wide</name></expr>)</condition> <block pos:start="2151:36" pos:end="2157:21">{<block_content pos:start="2153:25" pos:end="2155:46">

                        <expr_stmt pos:start="2153:25" pos:end="2153:59"><expr pos:start="2153:25" pos:end="2153:58"><call pos:start="2153:25" pos:end="2153:58"><name pos:start="2153:25" pos:end="2153:39">neon_load_reg64</name><argument_list pos:start="2153:40" pos:end="2153:58">(<argument pos:start="2153:41" pos:end="2153:46"><expr pos:start="2153:41" pos:end="2153:46"><name pos:start="2153:41" pos:end="2153:46">cpu_V1</name></expr></argument>, <argument pos:start="2153:49" pos:end="2153:57"><expr pos:start="2153:49" pos:end="2153:57"><name pos:start="2153:49" pos:end="2153:50">rm</name> <operator pos:start="2153:52" pos:end="2153:52">+</operator> <name pos:start="2153:54" pos:end="2153:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2155:25" pos:end="2155:46"><expr pos:start="2155:25" pos:end="2155:45"><call pos:start="2155:25" pos:end="2155:45"><name pos:start="2155:25" pos:end="2155:39">TCGV_UNUSED_I32</name><argument_list pos:start="2155:40" pos:end="2155:45">(<argument pos:start="2155:41" pos:end="2155:44"><expr pos:start="2155:41" pos:end="2155:44"><name pos:start="2155:41" pos:end="2155:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2157:23" pos:end="2175:21">else <block pos:start="2157:28" pos:end="2175:21">{<block_content pos:start="2159:25" pos:end="2173:25">

                        <if_stmt pos:start="2159:25" pos:end="2167:25"><if pos:start="2159:25" pos:end="2163:25">if <condition pos:start="2159:28" pos:end="2159:50">(<expr pos:start="2159:29" pos:end="2159:49"><name pos:start="2159:29" pos:end="2159:32">pass</name> <operator pos:start="2159:34" pos:end="2159:35">==</operator> <literal type="number" pos:start="2159:37" pos:end="2159:37">1</literal> <operator pos:start="2159:39" pos:end="2159:40">&amp;&amp;</operator> <name pos:start="2159:42" pos:end="2159:43">rd</name> <operator pos:start="2159:45" pos:end="2159:46">==</operator> <name pos:start="2159:48" pos:end="2159:49">rm</name></expr>)</condition> <block pos:start="2159:52" pos:end="2163:25">{<block_content pos:start="2161:29" pos:end="2161:56">

                            <expr_stmt pos:start="2161:29" pos:end="2161:56"><expr pos:start="2161:29" pos:end="2161:55"><name pos:start="2161:29" pos:end="2161:32">tmp2</name> <operator pos:start="2161:34" pos:end="2161:34">=</operator> <call pos:start="2161:36" pos:end="2161:55"><name pos:start="2161:36" pos:end="2161:52">neon_load_scratch</name><argument_list pos:start="2161:53" pos:end="2161:55">(<argument pos:start="2161:54" pos:end="2161:54"><expr pos:start="2161:54" pos:end="2161:54"><literal type="number" pos:start="2161:54" pos:end="2161:54">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2163:27" pos:end="2167:25">else <block pos:start="2163:32" pos:end="2167:25">{<block_content pos:start="2165:29" pos:end="2165:59">

                            <expr_stmt pos:start="2165:29" pos:end="2165:59"><expr pos:start="2165:29" pos:end="2165:58"><name pos:start="2165:29" pos:end="2165:32">tmp2</name> <operator pos:start="2165:34" pos:end="2165:34">=</operator> <call pos:start="2165:36" pos:end="2165:58"><name pos:start="2165:36" pos:end="2165:48">neon_load_reg</name><argument_list pos:start="2165:49" pos:end="2165:58">(<argument pos:start="2165:50" pos:end="2165:51"><expr pos:start="2165:50" pos:end="2165:51"><name pos:start="2165:50" pos:end="2165:51">rm</name></expr></argument>, <argument pos:start="2165:54" pos:end="2165:57"><expr pos:start="2165:54" pos:end="2165:57"><name pos:start="2165:54" pos:end="2165:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="2169:25" pos:end="2173:25"><if pos:start="2169:25" pos:end="2173:25">if <condition pos:start="2169:28" pos:end="2169:37">(<expr pos:start="2169:29" pos:end="2169:36"><name pos:start="2169:29" pos:end="2169:36">prewiden</name></expr>)</condition> <block pos:start="2169:39" pos:end="2173:25">{<block_content pos:start="2171:29" pos:end="2171:66">

                            <expr_stmt pos:start="2171:29" pos:end="2171:66"><expr pos:start="2171:29" pos:end="2171:65"><call pos:start="2171:29" pos:end="2171:65"><name pos:start="2171:29" pos:end="2171:42">gen_neon_widen</name><argument_list pos:start="2171:43" pos:end="2171:65">(<argument pos:start="2171:44" pos:end="2171:49"><expr pos:start="2171:44" pos:end="2171:49"><name pos:start="2171:44" pos:end="2171:49">cpu_V1</name></expr></argument>, <argument pos:start="2171:52" pos:end="2171:55"><expr pos:start="2171:52" pos:end="2171:55"><name pos:start="2171:52" pos:end="2171:55">tmp2</name></expr></argument>, <argument pos:start="2171:58" pos:end="2171:61"><expr pos:start="2171:58" pos:end="2171:61"><name pos:start="2171:58" pos:end="2171:61">size</name></expr></argument>, <argument pos:start="2171:64" pos:end="2171:64"><expr pos:start="2171:64" pos:end="2171:64"><name pos:start="2171:64" pos:end="2171:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <switch pos:start="2177:21" pos:end="2263:21">switch <condition pos:start="2177:28" pos:end="2177:31">(<expr pos:start="2177:29" pos:end="2177:30"><name pos:start="2177:29" pos:end="2177:30">op</name></expr>)</condition> <block pos:start="2177:33" pos:end="2263:21">{<block_content pos:start="2179:21" pos:end="2261:32">

                    <case pos:start="2179:21" pos:end="2179:27">case <expr pos:start="2179:26" pos:end="2179:26"><literal type="number" pos:start="2179:26" pos:end="2179:26">0</literal></expr>:</case> <case pos:start="2179:29" pos:end="2179:35">case <expr pos:start="2179:34" pos:end="2179:34"><literal type="number" pos:start="2179:34" pos:end="2179:34">1</literal></expr>:</case> <case pos:start="2179:37" pos:end="2179:43">case <expr pos:start="2179:42" pos:end="2179:42"><literal type="number" pos:start="2179:42" pos:end="2179:42">4</literal></expr>:</case> <comment type="block" pos:start="2179:45" pos:end="2179:79">/* VADDL, VADDW, VADDHN, VRADDHN */</comment>

                        <expr_stmt pos:start="2181:25" pos:end="2181:44"><expr pos:start="2181:25" pos:end="2181:43"><call pos:start="2181:25" pos:end="2181:43"><name pos:start="2181:25" pos:end="2181:37">gen_neon_addl</name><argument_list pos:start="2181:38" pos:end="2181:43">(<argument pos:start="2181:39" pos:end="2181:42"><expr pos:start="2181:39" pos:end="2181:42"><name pos:start="2181:39" pos:end="2181:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2183:25" pos:end="2183:30">break;</break>

                    <case pos:start="2185:21" pos:end="2185:27">case <expr pos:start="2185:26" pos:end="2185:26"><literal type="number" pos:start="2185:26" pos:end="2185:26">2</literal></expr>:</case> <case pos:start="2185:29" pos:end="2185:35">case <expr pos:start="2185:34" pos:end="2185:34"><literal type="number" pos:start="2185:34" pos:end="2185:34">3</literal></expr>:</case> <case pos:start="2185:37" pos:end="2185:43">case <expr pos:start="2185:42" pos:end="2185:42"><literal type="number" pos:start="2185:42" pos:end="2185:42">6</literal></expr>:</case> <comment type="block" pos:start="2185:45" pos:end="2185:79">/* VSUBL, VSUBW, VSUBHN, VRSUBHN */</comment>

                        <expr_stmt pos:start="2187:25" pos:end="2187:44"><expr pos:start="2187:25" pos:end="2187:43"><call pos:start="2187:25" pos:end="2187:43"><name pos:start="2187:25" pos:end="2187:37">gen_neon_subl</name><argument_list pos:start="2187:38" pos:end="2187:43">(<argument pos:start="2187:39" pos:end="2187:42"><expr pos:start="2187:39" pos:end="2187:42"><name pos:start="2187:39" pos:end="2187:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2189:25" pos:end="2189:30">break;</break>

                    <case pos:start="2191:21" pos:end="2191:27">case <expr pos:start="2191:26" pos:end="2191:26"><literal type="number" pos:start="2191:26" pos:end="2191:26">5</literal></expr>:</case> <case pos:start="2191:29" pos:end="2191:35">case <expr pos:start="2191:34" pos:end="2191:34"><literal type="number" pos:start="2191:34" pos:end="2191:34">7</literal></expr>:</case> <comment type="block" pos:start="2191:37" pos:end="2191:54">/* VABAL, VABDL */</comment>

                        <switch pos:start="2193:25" pos:end="2233:25">switch <condition pos:start="2193:32" pos:end="2193:48">(<expr pos:start="2193:33" pos:end="2193:47"><operator pos:start="2193:33" pos:end="2193:33">(</operator><name pos:start="2193:34" pos:end="2193:37">size</name> <operator pos:start="2193:39" pos:end="2193:40">&lt;&lt;</operator> <literal type="number" pos:start="2193:42" pos:end="2193:42">1</literal><operator pos:start="2193:43" pos:end="2193:43">)</operator> <operator pos:start="2193:45" pos:end="2193:45">|</operator> <name pos:start="2193:47" pos:end="2193:47">u</name></expr>)</condition> <block pos:start="2193:50" pos:end="2233:25">{<block_content pos:start="2195:25" pos:end="2231:41">

                        <case pos:start="2195:25" pos:end="2195:31">case <expr pos:start="2195:30" pos:end="2195:30"><literal type="number" pos:start="2195:30" pos:end="2195:30">0</literal></expr>:</case>

                            <expr_stmt pos:start="2197:29" pos:end="2197:72"><expr pos:start="2197:29" pos:end="2197:71"><call pos:start="2197:29" pos:end="2197:71"><name pos:start="2197:29" pos:end="2197:52">gen_helper_neon_abdl_s16</name><argument_list pos:start="2197:53" pos:end="2197:71">(<argument pos:start="2197:54" pos:end="2197:59"><expr pos:start="2197:54" pos:end="2197:59"><name pos:start="2197:54" pos:end="2197:59">cpu_V0</name></expr></argument>, <argument pos:start="2197:62" pos:end="2197:64"><expr pos:start="2197:62" pos:end="2197:64"><name pos:start="2197:62" pos:end="2197:64">tmp</name></expr></argument>, <argument pos:start="2197:67" pos:end="2197:70"><expr pos:start="2197:67" pos:end="2197:70"><name pos:start="2197:67" pos:end="2197:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2199:29" pos:end="2199:34">break;</break>

                        <case pos:start="2201:25" pos:end="2201:31">case <expr pos:start="2201:30" pos:end="2201:30"><literal type="number" pos:start="2201:30" pos:end="2201:30">1</literal></expr>:</case>

                            <expr_stmt pos:start="2203:29" pos:end="2203:72"><expr pos:start="2203:29" pos:end="2203:71"><call pos:start="2203:29" pos:end="2203:71"><name pos:start="2203:29" pos:end="2203:52">gen_helper_neon_abdl_u16</name><argument_list pos:start="2203:53" pos:end="2203:71">(<argument pos:start="2203:54" pos:end="2203:59"><expr pos:start="2203:54" pos:end="2203:59"><name pos:start="2203:54" pos:end="2203:59">cpu_V0</name></expr></argument>, <argument pos:start="2203:62" pos:end="2203:64"><expr pos:start="2203:62" pos:end="2203:64"><name pos:start="2203:62" pos:end="2203:64">tmp</name></expr></argument>, <argument pos:start="2203:67" pos:end="2203:70"><expr pos:start="2203:67" pos:end="2203:70"><name pos:start="2203:67" pos:end="2203:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2205:29" pos:end="2205:34">break;</break>

                        <case pos:start="2207:25" pos:end="2207:31">case <expr pos:start="2207:30" pos:end="2207:30"><literal type="number" pos:start="2207:30" pos:end="2207:30">2</literal></expr>:</case>

                            <expr_stmt pos:start="2209:29" pos:end="2209:72"><expr pos:start="2209:29" pos:end="2209:71"><call pos:start="2209:29" pos:end="2209:71"><name pos:start="2209:29" pos:end="2209:52">gen_helper_neon_abdl_s32</name><argument_list pos:start="2209:53" pos:end="2209:71">(<argument pos:start="2209:54" pos:end="2209:59"><expr pos:start="2209:54" pos:end="2209:59"><name pos:start="2209:54" pos:end="2209:59">cpu_V0</name></expr></argument>, <argument pos:start="2209:62" pos:end="2209:64"><expr pos:start="2209:62" pos:end="2209:64"><name pos:start="2209:62" pos:end="2209:64">tmp</name></expr></argument>, <argument pos:start="2209:67" pos:end="2209:70"><expr pos:start="2209:67" pos:end="2209:70"><name pos:start="2209:67" pos:end="2209:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2211:29" pos:end="2211:34">break;</break>

                        <case pos:start="2213:25" pos:end="2213:31">case <expr pos:start="2213:30" pos:end="2213:30"><literal type="number" pos:start="2213:30" pos:end="2213:30">3</literal></expr>:</case>

                            <expr_stmt pos:start="2215:29" pos:end="2215:72"><expr pos:start="2215:29" pos:end="2215:71"><call pos:start="2215:29" pos:end="2215:71"><name pos:start="2215:29" pos:end="2215:52">gen_helper_neon_abdl_u32</name><argument_list pos:start="2215:53" pos:end="2215:71">(<argument pos:start="2215:54" pos:end="2215:59"><expr pos:start="2215:54" pos:end="2215:59"><name pos:start="2215:54" pos:end="2215:59">cpu_V0</name></expr></argument>, <argument pos:start="2215:62" pos:end="2215:64"><expr pos:start="2215:62" pos:end="2215:64"><name pos:start="2215:62" pos:end="2215:64">tmp</name></expr></argument>, <argument pos:start="2215:67" pos:end="2215:70"><expr pos:start="2215:67" pos:end="2215:70"><name pos:start="2215:67" pos:end="2215:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2217:29" pos:end="2217:34">break;</break>

                        <case pos:start="2219:25" pos:end="2219:31">case <expr pos:start="2219:30" pos:end="2219:30"><literal type="number" pos:start="2219:30" pos:end="2219:30">4</literal></expr>:</case>

                            <expr_stmt pos:start="2221:29" pos:end="2221:72"><expr pos:start="2221:29" pos:end="2221:71"><call pos:start="2221:29" pos:end="2221:71"><name pos:start="2221:29" pos:end="2221:52">gen_helper_neon_abdl_s64</name><argument_list pos:start="2221:53" pos:end="2221:71">(<argument pos:start="2221:54" pos:end="2221:59"><expr pos:start="2221:54" pos:end="2221:59"><name pos:start="2221:54" pos:end="2221:59">cpu_V0</name></expr></argument>, <argument pos:start="2221:62" pos:end="2221:64"><expr pos:start="2221:62" pos:end="2221:64"><name pos:start="2221:62" pos:end="2221:64">tmp</name></expr></argument>, <argument pos:start="2221:67" pos:end="2221:70"><expr pos:start="2221:67" pos:end="2221:70"><name pos:start="2221:67" pos:end="2221:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2223:29" pos:end="2223:34">break;</break>

                        <case pos:start="2225:25" pos:end="2225:31">case <expr pos:start="2225:30" pos:end="2225:30"><literal type="number" pos:start="2225:30" pos:end="2225:30">5</literal></expr>:</case>

                            <expr_stmt pos:start="2227:29" pos:end="2227:72"><expr pos:start="2227:29" pos:end="2227:71"><call pos:start="2227:29" pos:end="2227:71"><name pos:start="2227:29" pos:end="2227:52">gen_helper_neon_abdl_u64</name><argument_list pos:start="2227:53" pos:end="2227:71">(<argument pos:start="2227:54" pos:end="2227:59"><expr pos:start="2227:54" pos:end="2227:59"><name pos:start="2227:54" pos:end="2227:59">cpu_V0</name></expr></argument>, <argument pos:start="2227:62" pos:end="2227:64"><expr pos:start="2227:62" pos:end="2227:64"><name pos:start="2227:62" pos:end="2227:64">tmp</name></expr></argument>, <argument pos:start="2227:67" pos:end="2227:70"><expr pos:start="2227:67" pos:end="2227:70"><name pos:start="2227:67" pos:end="2227:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2229:29" pos:end="2229:34">break;</break>

                        <default pos:start="2231:25" pos:end="2231:32">default:</default> <expr_stmt pos:start="2231:34" pos:end="2231:41"><expr pos:start="2231:34" pos:end="2231:40"><call pos:start="2231:34" pos:end="2231:40"><name pos:start="2231:34" pos:end="2231:38">abort</name><argument_list pos:start="2231:39" pos:end="2231:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2235:25" pos:end="2235:48"><expr pos:start="2235:25" pos:end="2235:47"><call pos:start="2235:25" pos:end="2235:47"><name pos:start="2235:25" pos:end="2235:41">tcg_temp_free_i32</name><argument_list pos:start="2235:42" pos:end="2235:47">(<argument pos:start="2235:43" pos:end="2235:46"><expr pos:start="2235:43" pos:end="2235:46"><name pos:start="2235:43" pos:end="2235:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2237:25" pos:end="2237:47"><expr pos:start="2237:25" pos:end="2237:46"><call pos:start="2237:25" pos:end="2237:46"><name pos:start="2237:25" pos:end="2237:41">tcg_temp_free_i32</name><argument_list pos:start="2237:42" pos:end="2237:46">(<argument pos:start="2237:43" pos:end="2237:45"><expr pos:start="2237:43" pos:end="2237:45"><name pos:start="2237:43" pos:end="2237:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2239:25" pos:end="2239:30">break;</break>

                    <case pos:start="2241:21" pos:end="2241:27">case <expr pos:start="2241:26" pos:end="2241:26"><literal type="number" pos:start="2241:26" pos:end="2241:26">8</literal></expr>:</case> <case pos:start="2241:29" pos:end="2241:35">case <expr pos:start="2241:34" pos:end="2241:34"><literal type="number" pos:start="2241:34" pos:end="2241:34">9</literal></expr>:</case> <case pos:start="2241:37" pos:end="2241:44">case <expr pos:start="2241:42" pos:end="2241:43"><literal type="number" pos:start="2241:42" pos:end="2241:43">10</literal></expr>:</case> <case pos:start="2241:46" pos:end="2241:53">case <expr pos:start="2241:51" pos:end="2241:52"><literal type="number" pos:start="2241:51" pos:end="2241:52">11</literal></expr>:</case> <case pos:start="2241:55" pos:end="2241:62">case <expr pos:start="2241:60" pos:end="2241:61"><literal type="number" pos:start="2241:60" pos:end="2241:61">12</literal></expr>:</case> <case pos:start="2241:64" pos:end="2241:71">case <expr pos:start="2241:69" pos:end="2241:70"><literal type="number" pos:start="2241:69" pos:end="2241:70">13</literal></expr>:</case>

                        <comment type="block" pos:start="2243:25" pos:end="2243:76">/* VMLAL, VQDMLAL, VMLSL, VQDMLSL, VMULL, VQDMULL */</comment>

                        <expr_stmt pos:start="2245:25" pos:end="2245:66"><expr pos:start="2245:25" pos:end="2245:65"><call pos:start="2245:25" pos:end="2245:65"><name pos:start="2245:25" pos:end="2245:37">gen_neon_mull</name><argument_list pos:start="2245:38" pos:end="2245:65">(<argument pos:start="2245:39" pos:end="2245:44"><expr pos:start="2245:39" pos:end="2245:44"><name pos:start="2245:39" pos:end="2245:44">cpu_V0</name></expr></argument>, <argument pos:start="2245:47" pos:end="2245:49"><expr pos:start="2245:47" pos:end="2245:49"><name pos:start="2245:47" pos:end="2245:49">tmp</name></expr></argument>, <argument pos:start="2245:52" pos:end="2245:55"><expr pos:start="2245:52" pos:end="2245:55"><name pos:start="2245:52" pos:end="2245:55">tmp2</name></expr></argument>, <argument pos:start="2245:58" pos:end="2245:61"><expr pos:start="2245:58" pos:end="2245:61"><name pos:start="2245:58" pos:end="2245:61">size</name></expr></argument>, <argument pos:start="2245:64" pos:end="2245:64"><expr pos:start="2245:64" pos:end="2245:64"><name pos:start="2245:64" pos:end="2245:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2247:25" pos:end="2247:30">break;</break>

                    <case pos:start="2249:21" pos:end="2249:28">case <expr pos:start="2249:26" pos:end="2249:27"><literal type="number" pos:start="2249:26" pos:end="2249:27">14</literal></expr>:</case> <comment type="block" pos:start="2249:30" pos:end="2249:51">/* Polynomial VMULL */</comment>

                        <expr_stmt pos:start="2251:25" pos:end="2251:67"><expr pos:start="2251:25" pos:end="2251:66"><call pos:start="2251:25" pos:end="2251:66"><name pos:start="2251:25" pos:end="2251:47">gen_helper_neon_mull_p8</name><argument_list pos:start="2251:48" pos:end="2251:66">(<argument pos:start="2251:49" pos:end="2251:54"><expr pos:start="2251:49" pos:end="2251:54"><name pos:start="2251:49" pos:end="2251:54">cpu_V0</name></expr></argument>, <argument pos:start="2251:57" pos:end="2251:59"><expr pos:start="2251:57" pos:end="2251:59"><name pos:start="2251:57" pos:end="2251:59">tmp</name></expr></argument>, <argument pos:start="2251:62" pos:end="2251:65"><expr pos:start="2251:62" pos:end="2251:65"><name pos:start="2251:62" pos:end="2251:65">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2253:25" pos:end="2253:48"><expr pos:start="2253:25" pos:end="2253:47"><call pos:start="2253:25" pos:end="2253:47"><name pos:start="2253:25" pos:end="2253:41">tcg_temp_free_i32</name><argument_list pos:start="2253:42" pos:end="2253:47">(<argument pos:start="2253:43" pos:end="2253:46"><expr pos:start="2253:43" pos:end="2253:46"><name pos:start="2253:43" pos:end="2253:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2255:25" pos:end="2255:47"><expr pos:start="2255:25" pos:end="2255:46"><call pos:start="2255:25" pos:end="2255:46"><name pos:start="2255:25" pos:end="2255:41">tcg_temp_free_i32</name><argument_list pos:start="2255:42" pos:end="2255:46">(<argument pos:start="2255:43" pos:end="2255:45"><expr pos:start="2255:43" pos:end="2255:45"><name pos:start="2255:43" pos:end="2255:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2257:25" pos:end="2257:30">break;</break>

                    <default pos:start="2259:21" pos:end="2259:28">default:</default> <comment type="block" pos:start="2259:30" pos:end="2259:66">/* 15 is RESERVED: caught earlier  */</comment>

                        <expr_stmt pos:start="2261:25" pos:end="2261:32"><expr pos:start="2261:25" pos:end="2261:31"><call pos:start="2261:25" pos:end="2261:31"><name pos:start="2261:25" pos:end="2261:29">abort</name><argument_list pos:start="2261:30" pos:end="2261:31">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="2265:21" pos:end="2399:21"><if pos:start="2265:21" pos:end="2273:21">if <condition pos:start="2265:24" pos:end="2265:33">(<expr pos:start="2265:25" pos:end="2265:32"><name pos:start="2265:25" pos:end="2265:26">op</name> <operator pos:start="2265:28" pos:end="2265:29">==</operator> <literal type="number" pos:start="2265:31" pos:end="2265:32">13</literal></expr>)</condition> <block pos:start="2265:35" pos:end="2273:21">{<block_content pos:start="2269:25" pos:end="2271:60">

                        <comment type="block" pos:start="2267:25" pos:end="2267:37">/* VQDMULL */</comment>

                        <expr_stmt pos:start="2269:25" pos:end="2269:69"><expr pos:start="2269:25" pos:end="2269:68"><call pos:start="2269:25" pos:end="2269:68"><name pos:start="2269:25" pos:end="2269:46">gen_neon_addl_saturate</name><argument_list pos:start="2269:47" pos:end="2269:68">(<argument pos:start="2269:48" pos:end="2269:53"><expr pos:start="2269:48" pos:end="2269:53"><name pos:start="2269:48" pos:end="2269:53">cpu_V0</name></expr></argument>, <argument pos:start="2269:56" pos:end="2269:61"><expr pos:start="2269:56" pos:end="2269:61"><name pos:start="2269:56" pos:end="2269:61">cpu_V0</name></expr></argument>, <argument pos:start="2269:64" pos:end="2269:67"><expr pos:start="2269:64" pos:end="2269:67"><name pos:start="2269:64" pos:end="2269:67">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2271:25" pos:end="2271:60"><expr pos:start="2271:25" pos:end="2271:59"><call pos:start="2271:25" pos:end="2271:59"><name pos:start="2271:25" pos:end="2271:40">neon_store_reg64</name><argument_list pos:start="2271:41" pos:end="2271:59">(<argument pos:start="2271:42" pos:end="2271:47"><expr pos:start="2271:42" pos:end="2271:47"><name pos:start="2271:42" pos:end="2271:47">cpu_V0</name></expr></argument>, <argument pos:start="2271:50" pos:end="2271:58"><expr pos:start="2271:50" pos:end="2271:58"><name pos:start="2271:50" pos:end="2271:51">rd</name> <operator pos:start="2271:53" pos:end="2271:53">+</operator> <name pos:start="2271:55" pos:end="2271:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="2273:23" pos:end="2315:21">else if <condition pos:start="2273:31" pos:end="2273:64">(<expr pos:start="2273:32" pos:end="2273:63"><name pos:start="2273:32" pos:end="2273:33">op</name> <operator pos:start="2273:35" pos:end="2273:36">==</operator> <literal type="number" pos:start="2273:38" pos:end="2273:38">5</literal> <operator pos:start="2273:40" pos:end="2273:41">||</operator> <operator pos:start="2273:43" pos:end="2273:43">(</operator><name pos:start="2273:44" pos:end="2273:45">op</name> <operator pos:start="2273:47" pos:end="2273:48">&gt;=</operator> <literal type="number" pos:start="2273:50" pos:end="2273:50">8</literal> <operator pos:start="2273:52" pos:end="2273:53">&amp;&amp;</operator> <name pos:start="2273:55" pos:end="2273:56">op</name> <operator pos:start="2273:58" pos:end="2273:59">&lt;=</operator> <literal type="number" pos:start="2273:61" pos:end="2273:62">11</literal><operator pos:start="2273:63" pos:end="2273:63">)</operator></expr>)</condition> <block pos:start="2273:66" pos:end="2315:21">{<block_content pos:start="2277:25" pos:end="2313:60">

                        <comment type="block" pos:start="2275:25" pos:end="2275:42">/* Accumulate.  */</comment>

                        <expr_stmt pos:start="2277:25" pos:end="2277:59"><expr pos:start="2277:25" pos:end="2277:58"><call pos:start="2277:25" pos:end="2277:58"><name pos:start="2277:25" pos:end="2277:39">neon_load_reg64</name><argument_list pos:start="2277:40" pos:end="2277:58">(<argument pos:start="2277:41" pos:end="2277:46"><expr pos:start="2277:41" pos:end="2277:46"><name pos:start="2277:41" pos:end="2277:46">cpu_V1</name></expr></argument>, <argument pos:start="2277:49" pos:end="2277:57"><expr pos:start="2277:49" pos:end="2277:57"><name pos:start="2277:49" pos:end="2277:50">rd</name> <operator pos:start="2277:52" pos:end="2277:52">+</operator> <name pos:start="2277:54" pos:end="2277:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2279:25" pos:end="2311:25">switch <condition pos:start="2279:32" pos:end="2279:35">(<expr pos:start="2279:33" pos:end="2279:34"><name pos:start="2279:33" pos:end="2279:34">op</name></expr>)</condition> <block pos:start="2279:37" pos:end="2311:25">{<block_content pos:start="2281:25" pos:end="2309:36">

                        <case pos:start="2281:25" pos:end="2281:32">case <expr pos:start="2281:30" pos:end="2281:31"><literal type="number" pos:start="2281:30" pos:end="2281:31">10</literal></expr>:</case> <comment type="block" pos:start="2281:34" pos:end="2281:44">/* VMLSL */</comment>

                            <expr_stmt pos:start="2283:29" pos:end="2283:56"><expr pos:start="2283:29" pos:end="2283:55"><call pos:start="2283:29" pos:end="2283:55"><name pos:start="2283:29" pos:end="2283:41">gen_neon_negl</name><argument_list pos:start="2283:42" pos:end="2283:55">(<argument pos:start="2283:43" pos:end="2283:48"><expr pos:start="2283:43" pos:end="2283:48"><name pos:start="2283:43" pos:end="2283:48">cpu_V0</name></expr></argument>, <argument pos:start="2283:51" pos:end="2283:54"><expr pos:start="2283:51" pos:end="2283:54"><name pos:start="2283:51" pos:end="2283:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="2285:29" pos:end="2285:46">/* Fall through */</comment>

                        <case pos:start="2287:25" pos:end="2287:31">case <expr pos:start="2287:30" pos:end="2287:30"><literal type="number" pos:start="2287:30" pos:end="2287:30">5</literal></expr>:</case> <case pos:start="2287:33" pos:end="2287:39">case <expr pos:start="2287:38" pos:end="2287:38"><literal type="number" pos:start="2287:38" pos:end="2287:38">8</literal></expr>:</case> <comment type="block" pos:start="2287:41" pos:end="2287:58">/* VABAL, VMLAL */</comment>

                            <expr_stmt pos:start="2289:29" pos:end="2289:48"><expr pos:start="2289:29" pos:end="2289:47"><call pos:start="2289:29" pos:end="2289:47"><name pos:start="2289:29" pos:end="2289:41">gen_neon_addl</name><argument_list pos:start="2289:42" pos:end="2289:47">(<argument pos:start="2289:43" pos:end="2289:46"><expr pos:start="2289:43" pos:end="2289:46"><name pos:start="2289:43" pos:end="2289:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2291:29" pos:end="2291:34">break;</break>

                        <case pos:start="2293:25" pos:end="2293:31">case <expr pos:start="2293:30" pos:end="2293:30"><literal type="number" pos:start="2293:30" pos:end="2293:30">9</literal></expr>:</case> <case pos:start="2293:33" pos:end="2293:40">case <expr pos:start="2293:38" pos:end="2293:39"><literal type="number" pos:start="2293:38" pos:end="2293:39">11</literal></expr>:</case> <comment type="block" pos:start="2293:42" pos:end="2293:63">/* VQDMLAL, VQDMLSL */</comment>

                            <expr_stmt pos:start="2295:29" pos:end="2295:73"><expr pos:start="2295:29" pos:end="2295:72"><call pos:start="2295:29" pos:end="2295:72"><name pos:start="2295:29" pos:end="2295:50">gen_neon_addl_saturate</name><argument_list pos:start="2295:51" pos:end="2295:72">(<argument pos:start="2295:52" pos:end="2295:57"><expr pos:start="2295:52" pos:end="2295:57"><name pos:start="2295:52" pos:end="2295:57">cpu_V0</name></expr></argument>, <argument pos:start="2295:60" pos:end="2295:65"><expr pos:start="2295:60" pos:end="2295:65"><name pos:start="2295:60" pos:end="2295:65">cpu_V0</name></expr></argument>, <argument pos:start="2295:68" pos:end="2295:71"><expr pos:start="2295:68" pos:end="2295:71"><name pos:start="2295:68" pos:end="2295:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2297:29" pos:end="2301:29"><if pos:start="2297:29" pos:end="2301:29">if <condition pos:start="2297:32" pos:end="2297:41">(<expr pos:start="2297:33" pos:end="2297:40"><name pos:start="2297:33" pos:end="2297:34">op</name> <operator pos:start="2297:36" pos:end="2297:37">==</operator> <literal type="number" pos:start="2297:39" pos:end="2297:40">11</literal></expr>)</condition> <block pos:start="2297:43" pos:end="2301:29">{<block_content pos:start="2299:33" pos:end="2299:60">

                                <expr_stmt pos:start="2299:33" pos:end="2299:60"><expr pos:start="2299:33" pos:end="2299:59"><call pos:start="2299:33" pos:end="2299:59"><name pos:start="2299:33" pos:end="2299:45">gen_neon_negl</name><argument_list pos:start="2299:46" pos:end="2299:59">(<argument pos:start="2299:47" pos:end="2299:52"><expr pos:start="2299:47" pos:end="2299:52"><name pos:start="2299:47" pos:end="2299:52">cpu_V0</name></expr></argument>, <argument pos:start="2299:55" pos:end="2299:58"><expr pos:start="2299:55" pos:end="2299:58"><name pos:start="2299:55" pos:end="2299:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="2303:29" pos:end="2303:73"><expr pos:start="2303:29" pos:end="2303:72"><call pos:start="2303:29" pos:end="2303:72"><name pos:start="2303:29" pos:end="2303:50">gen_neon_addl_saturate</name><argument_list pos:start="2303:51" pos:end="2303:72">(<argument pos:start="2303:52" pos:end="2303:57"><expr pos:start="2303:52" pos:end="2303:57"><name pos:start="2303:52" pos:end="2303:57">cpu_V0</name></expr></argument>, <argument pos:start="2303:60" pos:end="2303:65"><expr pos:start="2303:60" pos:end="2303:65"><name pos:start="2303:60" pos:end="2303:65">cpu_V1</name></expr></argument>, <argument pos:start="2303:68" pos:end="2303:71"><expr pos:start="2303:68" pos:end="2303:71"><name pos:start="2303:68" pos:end="2303:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2305:29" pos:end="2305:34">break;</break>

                        <default pos:start="2307:25" pos:end="2307:32">default:</default>

                            <expr_stmt pos:start="2309:29" pos:end="2309:36"><expr pos:start="2309:29" pos:end="2309:35"><call pos:start="2309:29" pos:end="2309:35"><name pos:start="2309:29" pos:end="2309:33">abort</name><argument_list pos:start="2309:34" pos:end="2309:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2313:25" pos:end="2313:60"><expr pos:start="2313:25" pos:end="2313:59"><call pos:start="2313:25" pos:end="2313:59"><name pos:start="2313:25" pos:end="2313:40">neon_store_reg64</name><argument_list pos:start="2313:41" pos:end="2313:59">(<argument pos:start="2313:42" pos:end="2313:47"><expr pos:start="2313:42" pos:end="2313:47"><name pos:start="2313:42" pos:end="2313:47">cpu_V0</name></expr></argument>, <argument pos:start="2313:50" pos:end="2313:58"><expr pos:start="2313:50" pos:end="2313:58"><name pos:start="2313:50" pos:end="2313:51">rd</name> <operator pos:start="2313:53" pos:end="2313:53">+</operator> <name pos:start="2313:55" pos:end="2313:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="2315:23" pos:end="2393:21">else if <condition pos:start="2315:31" pos:end="2315:50">(<expr pos:start="2315:32" pos:end="2315:49"><name pos:start="2315:32" pos:end="2315:33">op</name> <operator pos:start="2315:35" pos:end="2315:36">==</operator> <literal type="number" pos:start="2315:38" pos:end="2315:38">4</literal> <operator pos:start="2315:40" pos:end="2315:41">||</operator> <name pos:start="2315:43" pos:end="2315:44">op</name> <operator pos:start="2315:46" pos:end="2315:47">==</operator> <literal type="number" pos:start="2315:49" pos:end="2315:49">6</literal></expr>)</condition> <block pos:start="2315:52" pos:end="2393:21">{<block_content pos:start="2319:25" pos:end="2391:25">

                        <comment type="block" pos:start="2317:25" pos:end="2317:51">/* Narrowing operation.  */</comment>

                        <expr_stmt pos:start="2319:25" pos:end="2319:49"><expr pos:start="2319:25" pos:end="2319:48"><name pos:start="2319:25" pos:end="2319:27">tmp</name> <operator pos:start="2319:29" pos:end="2319:29">=</operator> <call pos:start="2319:31" pos:end="2319:48"><name pos:start="2319:31" pos:end="2319:46">tcg_temp_new_i32</name><argument_list pos:start="2319:47" pos:end="2319:48">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2321:25" pos:end="2379:25"><if pos:start="2321:25" pos:end="2349:25">if <condition pos:start="2321:28" pos:end="2321:31">(<expr pos:start="2321:29" pos:end="2321:30"><operator pos:start="2321:29" pos:end="2321:29">!</operator><name pos:start="2321:30" pos:end="2321:30">u</name></expr>)</condition> <block pos:start="2321:33" pos:end="2349:25">{<block_content pos:start="2323:29" pos:end="2347:29">

                            <switch pos:start="2323:29" pos:end="2347:29">switch <condition pos:start="2323:36" pos:end="2323:41">(<expr pos:start="2323:37" pos:end="2323:40"><name pos:start="2323:37" pos:end="2323:40">size</name></expr>)</condition> <block pos:start="2323:43" pos:end="2347:29">{<block_content pos:start="2325:29" pos:end="2345:45">

                            <case pos:start="2325:29" pos:end="2325:35">case <expr pos:start="2325:34" pos:end="2325:34"><literal type="number" pos:start="2325:34" pos:end="2325:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2327:33" pos:end="2327:76"><expr pos:start="2327:33" pos:end="2327:75"><call pos:start="2327:33" pos:end="2327:75"><name pos:start="2327:33" pos:end="2327:62">gen_helper_neon_narrow_high_u8</name><argument_list pos:start="2327:63" pos:end="2327:75">(<argument pos:start="2327:64" pos:end="2327:66"><expr pos:start="2327:64" pos:end="2327:66"><name pos:start="2327:64" pos:end="2327:66">tmp</name></expr></argument>, <argument pos:start="2327:69" pos:end="2327:74"><expr pos:start="2327:69" pos:end="2327:74"><name pos:start="2327:69" pos:end="2327:74">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2329:33" pos:end="2329:38">break;</break>

                            <case pos:start="2331:29" pos:end="2331:35">case <expr pos:start="2331:34" pos:end="2331:34"><literal type="number" pos:start="2331:34" pos:end="2331:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2333:33" pos:end="2333:77"><expr pos:start="2333:33" pos:end="2333:76"><call pos:start="2333:33" pos:end="2333:76"><name pos:start="2333:33" pos:end="2333:63">gen_helper_neon_narrow_high_u16</name><argument_list pos:start="2333:64" pos:end="2333:76">(<argument pos:start="2333:65" pos:end="2333:67"><expr pos:start="2333:65" pos:end="2333:67"><name pos:start="2333:65" pos:end="2333:67">tmp</name></expr></argument>, <argument pos:start="2333:70" pos:end="2333:75"><expr pos:start="2333:70" pos:end="2333:75"><name pos:start="2333:70" pos:end="2333:75">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2335:33" pos:end="2335:38">break;</break>

                            <case pos:start="2337:29" pos:end="2337:35">case <expr pos:start="2337:34" pos:end="2337:34"><literal type="number" pos:start="2337:34" pos:end="2337:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="2339:33" pos:end="2339:69"><expr pos:start="2339:33" pos:end="2339:68"><call pos:start="2339:33" pos:end="2339:68"><name pos:start="2339:33" pos:end="2339:48">tcg_gen_shri_i64</name><argument_list pos:start="2339:49" pos:end="2339:68">(<argument pos:start="2339:50" pos:end="2339:55"><expr pos:start="2339:50" pos:end="2339:55"><name pos:start="2339:50" pos:end="2339:55">cpu_V0</name></expr></argument>, <argument pos:start="2339:58" pos:end="2339:63"><expr pos:start="2339:58" pos:end="2339:63"><name pos:start="2339:58" pos:end="2339:63">cpu_V0</name></expr></argument>, <argument pos:start="2339:66" pos:end="2339:67"><expr pos:start="2339:66" pos:end="2339:67"><literal type="number" pos:start="2339:66" pos:end="2339:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2341:33" pos:end="2341:67"><expr pos:start="2341:33" pos:end="2341:66"><call pos:start="2341:33" pos:end="2341:66"><name pos:start="2341:33" pos:end="2341:53">tcg_gen_trunc_i64_i32</name><argument_list pos:start="2341:54" pos:end="2341:66">(<argument pos:start="2341:55" pos:end="2341:57"><expr pos:start="2341:55" pos:end="2341:57"><name pos:start="2341:55" pos:end="2341:57">tmp</name></expr></argument>, <argument pos:start="2341:60" pos:end="2341:65"><expr pos:start="2341:60" pos:end="2341:65"><name pos:start="2341:60" pos:end="2341:65">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2343:33" pos:end="2343:38">break;</break>

                            <default pos:start="2345:29" pos:end="2345:36">default:</default> <expr_stmt pos:start="2345:38" pos:end="2345:45"><expr pos:start="2345:38" pos:end="2345:44"><call pos:start="2345:38" pos:end="2345:44"><name pos:start="2345:38" pos:end="2345:42">abort</name><argument_list pos:start="2345:43" pos:end="2345:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></if> <else pos:start="2349:27" pos:end="2379:25">else <block pos:start="2349:32" pos:end="2379:25">{<block_content pos:start="2351:29" pos:end="2377:29">

                            <switch pos:start="2351:29" pos:end="2377:29">switch <condition pos:start="2351:36" pos:end="2351:41">(<expr pos:start="2351:37" pos:end="2351:40"><name pos:start="2351:37" pos:end="2351:40">size</name></expr>)</condition> <block pos:start="2351:43" pos:end="2377:29">{<block_content pos:start="2353:29" pos:end="2375:45">

                            <case pos:start="2353:29" pos:end="2353:35">case <expr pos:start="2353:34" pos:end="2353:34"><literal type="number" pos:start="2353:34" pos:end="2353:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2355:33" pos:end="2355:82"><expr pos:start="2355:33" pos:end="2355:81"><call pos:start="2355:33" pos:end="2355:81"><name pos:start="2355:33" pos:end="2355:68">gen_helper_neon_narrow_round_high_u8</name><argument_list pos:start="2355:69" pos:end="2355:81">(<argument pos:start="2355:70" pos:end="2355:72"><expr pos:start="2355:70" pos:end="2355:72"><name pos:start="2355:70" pos:end="2355:72">tmp</name></expr></argument>, <argument pos:start="2355:75" pos:end="2355:80"><expr pos:start="2355:75" pos:end="2355:80"><name pos:start="2355:75" pos:end="2355:80">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2357:33" pos:end="2357:38">break;</break>

                            <case pos:start="2359:29" pos:end="2359:35">case <expr pos:start="2359:34" pos:end="2359:34"><literal type="number" pos:start="2359:34" pos:end="2359:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2361:33" pos:end="2361:83"><expr pos:start="2361:33" pos:end="2361:82"><call pos:start="2361:33" pos:end="2361:82"><name pos:start="2361:33" pos:end="2361:69">gen_helper_neon_narrow_round_high_u16</name><argument_list pos:start="2361:70" pos:end="2361:82">(<argument pos:start="2361:71" pos:end="2361:73"><expr pos:start="2361:71" pos:end="2361:73"><name pos:start="2361:71" pos:end="2361:73">tmp</name></expr></argument>, <argument pos:start="2361:76" pos:end="2361:81"><expr pos:start="2361:76" pos:end="2361:81"><name pos:start="2361:76" pos:end="2361:81">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2363:33" pos:end="2363:38">break;</break>

                            <case pos:start="2365:29" pos:end="2365:35">case <expr pos:start="2365:34" pos:end="2365:34"><literal type="number" pos:start="2365:34" pos:end="2365:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="2367:33" pos:end="2367:75"><expr pos:start="2367:33" pos:end="2367:74"><call pos:start="2367:33" pos:end="2367:74"><name pos:start="2367:33" pos:end="2367:48">tcg_gen_addi_i64</name><argument_list pos:start="2367:49" pos:end="2367:74">(<argument pos:start="2367:50" pos:end="2367:55"><expr pos:start="2367:50" pos:end="2367:55"><name pos:start="2367:50" pos:end="2367:55">cpu_V0</name></expr></argument>, <argument pos:start="2367:58" pos:end="2367:63"><expr pos:start="2367:58" pos:end="2367:63"><name pos:start="2367:58" pos:end="2367:63">cpu_V0</name></expr></argument>, <argument pos:start="2367:66" pos:end="2367:73"><expr pos:start="2367:66" pos:end="2367:73"><literal type="number" pos:start="2367:66" pos:end="2367:67">1u</literal> <operator pos:start="2367:69" pos:end="2367:70">&lt;&lt;</operator> <literal type="number" pos:start="2367:72" pos:end="2367:73">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2369:33" pos:end="2369:69"><expr pos:start="2369:33" pos:end="2369:68"><call pos:start="2369:33" pos:end="2369:68"><name pos:start="2369:33" pos:end="2369:48">tcg_gen_shri_i64</name><argument_list pos:start="2369:49" pos:end="2369:68">(<argument pos:start="2369:50" pos:end="2369:55"><expr pos:start="2369:50" pos:end="2369:55"><name pos:start="2369:50" pos:end="2369:55">cpu_V0</name></expr></argument>, <argument pos:start="2369:58" pos:end="2369:63"><expr pos:start="2369:58" pos:end="2369:63"><name pos:start="2369:58" pos:end="2369:63">cpu_V0</name></expr></argument>, <argument pos:start="2369:66" pos:end="2369:67"><expr pos:start="2369:66" pos:end="2369:67"><literal type="number" pos:start="2369:66" pos:end="2369:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2371:33" pos:end="2371:67"><expr pos:start="2371:33" pos:end="2371:66"><call pos:start="2371:33" pos:end="2371:66"><name pos:start="2371:33" pos:end="2371:53">tcg_gen_trunc_i64_i32</name><argument_list pos:start="2371:54" pos:end="2371:66">(<argument pos:start="2371:55" pos:end="2371:57"><expr pos:start="2371:55" pos:end="2371:57"><name pos:start="2371:55" pos:end="2371:57">tmp</name></expr></argument>, <argument pos:start="2371:60" pos:end="2371:65"><expr pos:start="2371:60" pos:end="2371:65"><name pos:start="2371:60" pos:end="2371:65">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2373:33" pos:end="2373:38">break;</break>

                            <default pos:start="2375:29" pos:end="2375:36">default:</default> <expr_stmt pos:start="2375:38" pos:end="2375:45"><expr pos:start="2375:38" pos:end="2375:44"><call pos:start="2375:38" pos:end="2375:44"><name pos:start="2375:38" pos:end="2375:42">abort</name><argument_list pos:start="2375:43" pos:end="2375:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="2381:25" pos:end="2391:25"><if pos:start="2381:25" pos:end="2385:25">if <condition pos:start="2381:28" pos:end="2381:38">(<expr pos:start="2381:29" pos:end="2381:37"><name pos:start="2381:29" pos:end="2381:32">pass</name> <operator pos:start="2381:34" pos:end="2381:35">==</operator> <literal type="number" pos:start="2381:37" pos:end="2381:37">0</literal></expr>)</condition> <block pos:start="2381:40" pos:end="2385:25">{<block_content pos:start="2383:29" pos:end="2383:39">

                            <expr_stmt pos:start="2383:29" pos:end="2383:39"><expr pos:start="2383:29" pos:end="2383:38"><name pos:start="2383:29" pos:end="2383:32">tmp3</name> <operator pos:start="2383:34" pos:end="2383:34">=</operator> <name pos:start="2383:36" pos:end="2383:38">tmp</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2385:27" pos:end="2391:25">else <block pos:start="2385:32" pos:end="2391:25">{<block_content pos:start="2387:29" pos:end="2389:55">

                            <expr_stmt pos:start="2387:29" pos:end="2387:56"><expr pos:start="2387:29" pos:end="2387:55"><call pos:start="2387:29" pos:end="2387:55"><name pos:start="2387:29" pos:end="2387:42">neon_store_reg</name><argument_list pos:start="2387:43" pos:end="2387:55">(<argument pos:start="2387:44" pos:end="2387:45"><expr pos:start="2387:44" pos:end="2387:45"><name pos:start="2387:44" pos:end="2387:45">rd</name></expr></argument>, <argument pos:start="2387:48" pos:end="2387:48"><expr pos:start="2387:48" pos:end="2387:48"><literal type="number" pos:start="2387:48" pos:end="2387:48">0</literal></expr></argument>, <argument pos:start="2387:51" pos:end="2387:54"><expr pos:start="2387:51" pos:end="2387:54"><name pos:start="2387:51" pos:end="2387:54">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2389:29" pos:end="2389:55"><expr pos:start="2389:29" pos:end="2389:54"><call pos:start="2389:29" pos:end="2389:54"><name pos:start="2389:29" pos:end="2389:42">neon_store_reg</name><argument_list pos:start="2389:43" pos:end="2389:54">(<argument pos:start="2389:44" pos:end="2389:45"><expr pos:start="2389:44" pos:end="2389:45"><name pos:start="2389:44" pos:end="2389:45">rd</name></expr></argument>, <argument pos:start="2389:48" pos:end="2389:48"><expr pos:start="2389:48" pos:end="2389:48"><literal type="number" pos:start="2389:48" pos:end="2389:48">1</literal></expr></argument>, <argument pos:start="2389:51" pos:end="2389:53"><expr pos:start="2389:51" pos:end="2389:53"><name pos:start="2389:51" pos:end="2389:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2393:23" pos:end="2399:21">else <block pos:start="2393:28" pos:end="2399:21">{<block_content pos:start="2397:25" pos:end="2397:60">

                        <comment type="block" pos:start="2395:25" pos:end="2395:53">/* Write back the result.  */</comment>

                        <expr_stmt pos:start="2397:25" pos:end="2397:60"><expr pos:start="2397:25" pos:end="2397:59"><call pos:start="2397:25" pos:end="2397:59"><name pos:start="2397:25" pos:end="2397:40">neon_store_reg64</name><argument_list pos:start="2397:41" pos:end="2397:59">(<argument pos:start="2397:42" pos:end="2397:47"><expr pos:start="2397:42" pos:end="2397:47"><name pos:start="2397:42" pos:end="2397:47">cpu_V0</name></expr></argument>, <argument pos:start="2397:50" pos:end="2397:58"><expr pos:start="2397:50" pos:end="2397:58"><name pos:start="2397:50" pos:end="2397:51">rd</name> <operator pos:start="2397:53" pos:end="2397:53">+</operator> <name pos:start="2397:55" pos:end="2397:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="2403:15" pos:end="2699:13">else <block pos:start="2403:20" pos:end="2699:13">{<block_content pos:start="2413:17" pos:end="2697:17">

                <comment type="block" pos:start="2405:17" pos:end="2411:19">/* Two registers and a scalar. NB that for ops of this form

                 * the ARM ARM labels bit 24 as Q, but it is in our variable

                 * 'u', not 'q'.

                 */</comment>

                <if_stmt pos:start="2413:17" pos:end="2417:17"><if pos:start="2413:17" pos:end="2417:17">if <condition pos:start="2413:20" pos:end="2413:30">(<expr pos:start="2413:21" pos:end="2413:29"><name pos:start="2413:21" pos:end="2413:24">size</name> <operator pos:start="2413:26" pos:end="2413:27">==</operator> <literal type="number" pos:start="2413:29" pos:end="2413:29">0</literal></expr>)</condition> <block pos:start="2413:32" pos:end="2417:17">{<block_content pos:start="2415:21" pos:end="2415:29">

                    <return pos:start="2415:21" pos:end="2415:29">return <expr pos:start="2415:28" pos:end="2415:28"><literal type="number" pos:start="2415:28" pos:end="2415:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="2419:17" pos:end="2697:17">switch <condition pos:start="2419:24" pos:end="2419:27">(<expr pos:start="2419:25" pos:end="2419:26"><name pos:start="2419:25" pos:end="2419:26">op</name></expr>)</condition> <block pos:start="2419:29" pos:end="2697:17">{<block_content pos:start="2421:17" pos:end="2695:29">

                <case pos:start="2421:17" pos:end="2421:23">case <expr pos:start="2421:22" pos:end="2421:22"><literal type="number" pos:start="2421:22" pos:end="2421:22">1</literal></expr>:</case> <comment type="block" pos:start="2421:25" pos:end="2421:47">/* Float VMLA scalar */</comment>

                <case pos:start="2423:17" pos:end="2423:23">case <expr pos:start="2423:22" pos:end="2423:22"><literal type="number" pos:start="2423:22" pos:end="2423:22">5</literal></expr>:</case> <comment type="block" pos:start="2423:25" pos:end="2423:56">/* Floating point VMLS scalar */</comment>

                <case pos:start="2425:17" pos:end="2425:23">case <expr pos:start="2425:22" pos:end="2425:22"><literal type="number" pos:start="2425:22" pos:end="2425:22">9</literal></expr>:</case> <comment type="block" pos:start="2425:25" pos:end="2425:56">/* Floating point VMUL scalar */</comment>

                    <if_stmt pos:start="2427:21" pos:end="2431:21"><if pos:start="2427:21" pos:end="2431:21">if <condition pos:start="2427:24" pos:end="2427:34">(<expr pos:start="2427:25" pos:end="2427:33"><name pos:start="2427:25" pos:end="2427:28">size</name> <operator pos:start="2427:30" pos:end="2427:31">==</operator> <literal type="number" pos:start="2427:33" pos:end="2427:33">1</literal></expr>)</condition> <block pos:start="2427:36" pos:end="2431:21">{<block_content pos:start="2429:25" pos:end="2429:33">

                        <return pos:start="2429:25" pos:end="2429:33">return <expr pos:start="2429:32" pos:end="2429:32"><literal type="number" pos:start="2429:32" pos:end="2429:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="2433:21" pos:end="2433:38">/* fall through */</comment>

                <case pos:start="2435:17" pos:end="2435:23">case <expr pos:start="2435:22" pos:end="2435:22"><literal type="number" pos:start="2435:22" pos:end="2435:22">0</literal></expr>:</case> <comment type="block" pos:start="2435:25" pos:end="2435:49">/* Integer VMLA scalar */</comment>

                <case pos:start="2437:17" pos:end="2437:23">case <expr pos:start="2437:22" pos:end="2437:22"><literal type="number" pos:start="2437:22" pos:end="2437:22">4</literal></expr>:</case> <comment type="block" pos:start="2437:25" pos:end="2437:49">/* Integer VMLS scalar */</comment>

                <case pos:start="2439:17" pos:end="2439:23">case <expr pos:start="2439:22" pos:end="2439:22"><literal type="number" pos:start="2439:22" pos:end="2439:22">8</literal></expr>:</case> <comment type="block" pos:start="2439:25" pos:end="2439:49">/* Integer VMUL scalar */</comment>

                <case pos:start="2441:17" pos:end="2441:24">case <expr pos:start="2441:22" pos:end="2441:23"><literal type="number" pos:start="2441:22" pos:end="2441:23">12</literal></expr>:</case> <comment type="block" pos:start="2441:26" pos:end="2441:45">/* VQDMULH scalar */</comment>

                <case pos:start="2443:17" pos:end="2443:24">case <expr pos:start="2443:22" pos:end="2443:23"><literal type="number" pos:start="2443:22" pos:end="2443:23">13</literal></expr>:</case> <comment type="block" pos:start="2443:26" pos:end="2443:46">/* VQRDMULH scalar */</comment>

                    <if_stmt pos:start="2445:21" pos:end="2449:21"><if pos:start="2445:21" pos:end="2449:21">if <condition pos:start="2445:24" pos:end="2445:45">(<expr pos:start="2445:25" pos:end="2445:44"><name pos:start="2445:25" pos:end="2445:25">u</name> <operator pos:start="2445:27" pos:end="2445:28">&amp;&amp;</operator> <operator pos:start="2445:30" pos:end="2445:30">(</operator><operator pos:start="2445:31" pos:end="2445:31">(</operator><name pos:start="2445:32" pos:end="2445:33">rd</name> <operator pos:start="2445:35" pos:end="2445:35">|</operator> <name pos:start="2445:37" pos:end="2445:38">rn</name><operator pos:start="2445:39" pos:end="2445:39">)</operator> <operator pos:start="2445:41" pos:end="2445:41">&amp;</operator> <literal type="number" pos:start="2445:43" pos:end="2445:43">1</literal><operator pos:start="2445:44" pos:end="2445:44">)</operator></expr>)</condition> <block pos:start="2445:47" pos:end="2449:21">{<block_content pos:start="2447:25" pos:end="2447:33">

                        <return pos:start="2447:25" pos:end="2447:33">return <expr pos:start="2447:32" pos:end="2447:32"><literal type="number" pos:start="2447:32" pos:end="2447:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2451:21" pos:end="2451:52"><expr pos:start="2451:21" pos:end="2451:51"><name pos:start="2451:21" pos:end="2451:23">tmp</name> <operator pos:start="2451:25" pos:end="2451:25">=</operator> <call pos:start="2451:27" pos:end="2451:51"><name pos:start="2451:27" pos:end="2451:41">neon_get_scalar</name><argument_list pos:start="2451:42" pos:end="2451:51">(<argument pos:start="2451:43" pos:end="2451:46"><expr pos:start="2451:43" pos:end="2451:46"><name pos:start="2451:43" pos:end="2451:46">size</name></expr></argument>, <argument pos:start="2451:49" pos:end="2451:50"><expr pos:start="2451:49" pos:end="2451:50"><name pos:start="2451:49" pos:end="2451:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2453:21" pos:end="2453:47"><expr pos:start="2453:21" pos:end="2453:46"><call pos:start="2453:21" pos:end="2453:46"><name pos:start="2453:21" pos:end="2453:38">neon_store_scratch</name><argument_list pos:start="2453:39" pos:end="2453:46">(<argument pos:start="2453:40" pos:end="2453:40"><expr pos:start="2453:40" pos:end="2453:40"><literal type="number" pos:start="2453:40" pos:end="2453:40">0</literal></expr></argument>, <argument pos:start="2453:43" pos:end="2453:45"><expr pos:start="2453:43" pos:end="2453:45"><name pos:start="2453:43" pos:end="2453:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2455:21" pos:end="2571:21">for <control pos:start="2455:25" pos:end="2455:62">(<init pos:start="2455:26" pos:end="2455:34"><expr pos:start="2455:26" pos:end="2455:33"><name pos:start="2455:26" pos:end="2455:29">pass</name> <operator pos:start="2455:31" pos:end="2455:31">=</operator> <literal type="number" pos:start="2455:33" pos:end="2455:33">0</literal></expr>;</init> <condition pos:start="2455:36" pos:end="2455:54"><expr pos:start="2455:36" pos:end="2455:53"><name pos:start="2455:36" pos:end="2455:39">pass</name> <operator pos:start="2455:41" pos:end="2455:41">&lt;</operator> <operator pos:start="2455:43" pos:end="2455:43">(</operator><ternary pos:start="2455:44" pos:end="2455:52"><condition pos:start="2455:44" pos:end="2455:46"><expr pos:start="2455:44" pos:end="2455:44"><name pos:start="2455:44" pos:end="2455:44">u</name></expr> ?</condition><then pos:start="2455:48" pos:end="2455:48"> <expr pos:start="2455:48" pos:end="2455:48"><literal type="number" pos:start="2455:48" pos:end="2455:48">4</literal></expr> </then><else pos:start="2455:50" pos:end="2455:52">: <expr pos:start="2455:52" pos:end="2455:52"><literal type="number" pos:start="2455:52" pos:end="2455:52">2</literal></expr></else></ternary><operator pos:start="2455:53" pos:end="2455:53">)</operator></expr>;</condition> <incr pos:start="2455:56" pos:end="2455:61"><expr pos:start="2455:56" pos:end="2455:61"><name pos:start="2455:56" pos:end="2455:59">pass</name><operator pos:start="2455:60" pos:end="2455:61">++</operator></expr></incr>)</control> <block pos:start="2455:64" pos:end="2571:21">{<block_content pos:start="2457:25" pos:end="2569:54">

                        <expr_stmt pos:start="2457:25" pos:end="2457:51"><expr pos:start="2457:25" pos:end="2457:50"><name pos:start="2457:25" pos:end="2457:27">tmp</name> <operator pos:start="2457:29" pos:end="2457:29">=</operator> <call pos:start="2457:31" pos:end="2457:50"><name pos:start="2457:31" pos:end="2457:47">neon_load_scratch</name><argument_list pos:start="2457:48" pos:end="2457:50">(<argument pos:start="2457:49" pos:end="2457:49"><expr pos:start="2457:49" pos:end="2457:49"><literal type="number" pos:start="2457:49" pos:end="2457:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2459:25" pos:end="2459:55"><expr pos:start="2459:25" pos:end="2459:54"><name pos:start="2459:25" pos:end="2459:28">tmp2</name> <operator pos:start="2459:30" pos:end="2459:30">=</operator> <call pos:start="2459:32" pos:end="2459:54"><name pos:start="2459:32" pos:end="2459:44">neon_load_reg</name><argument_list pos:start="2459:45" pos:end="2459:54">(<argument pos:start="2459:46" pos:end="2459:47"><expr pos:start="2459:46" pos:end="2459:47"><name pos:start="2459:46" pos:end="2459:47">rn</name></expr></argument>, <argument pos:start="2459:50" pos:end="2459:53"><expr pos:start="2459:50" pos:end="2459:53"><name pos:start="2459:50" pos:end="2459:53">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2461:25" pos:end="2507:25"><if pos:start="2461:25" pos:end="2473:25">if <condition pos:start="2461:28" pos:end="2461:37">(<expr pos:start="2461:29" pos:end="2461:36"><name pos:start="2461:29" pos:end="2461:30">op</name> <operator pos:start="2461:32" pos:end="2461:33">==</operator> <literal type="number" pos:start="2461:35" pos:end="2461:36">12</literal></expr>)</condition> <block pos:start="2461:39" pos:end="2473:25">{<block_content pos:start="2463:29" pos:end="2471:29">

                            <if_stmt pos:start="2463:29" pos:end="2471:29"><if pos:start="2463:29" pos:end="2467:29">if <condition pos:start="2463:32" pos:end="2463:42">(<expr pos:start="2463:33" pos:end="2463:41"><name pos:start="2463:33" pos:end="2463:36">size</name> <operator pos:start="2463:38" pos:end="2463:39">==</operator> <literal type="number" pos:start="2463:41" pos:end="2463:41">1</literal></expr>)</condition> <block pos:start="2463:44" pos:end="2467:29">{<block_content pos:start="2465:33" pos:end="2465:84">

                                <expr_stmt pos:start="2465:33" pos:end="2465:84"><expr pos:start="2465:33" pos:end="2465:83"><call pos:start="2465:33" pos:end="2465:83"><name pos:start="2465:33" pos:end="2465:58">gen_helper_neon_qdmulh_s16</name><argument_list pos:start="2465:59" pos:end="2465:83">(<argument pos:start="2465:60" pos:end="2465:62"><expr pos:start="2465:60" pos:end="2465:62"><name pos:start="2465:60" pos:end="2465:62">tmp</name></expr></argument>, <argument pos:start="2465:65" pos:end="2465:71"><expr pos:start="2465:65" pos:end="2465:71"><name pos:start="2465:65" pos:end="2465:71">cpu_env</name></expr></argument>, <argument pos:start="2465:74" pos:end="2465:76"><expr pos:start="2465:74" pos:end="2465:76"><name pos:start="2465:74" pos:end="2465:76">tmp</name></expr></argument>, <argument pos:start="2465:79" pos:end="2465:82"><expr pos:start="2465:79" pos:end="2465:82"><name pos:start="2465:79" pos:end="2465:82">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2467:31" pos:end="2471:29">else <block pos:start="2467:36" pos:end="2471:29">{<block_content pos:start="2469:33" pos:end="2469:84">

                                <expr_stmt pos:start="2469:33" pos:end="2469:84"><expr pos:start="2469:33" pos:end="2469:83"><call pos:start="2469:33" pos:end="2469:83"><name pos:start="2469:33" pos:end="2469:58">gen_helper_neon_qdmulh_s32</name><argument_list pos:start="2469:59" pos:end="2469:83">(<argument pos:start="2469:60" pos:end="2469:62"><expr pos:start="2469:60" pos:end="2469:62"><name pos:start="2469:60" pos:end="2469:62">tmp</name></expr></argument>, <argument pos:start="2469:65" pos:end="2469:71"><expr pos:start="2469:65" pos:end="2469:71"><name pos:start="2469:65" pos:end="2469:71">cpu_env</name></expr></argument>, <argument pos:start="2469:74" pos:end="2469:76"><expr pos:start="2469:74" pos:end="2469:76"><name pos:start="2469:74" pos:end="2469:76">tmp</name></expr></argument>, <argument pos:start="2469:79" pos:end="2469:82"><expr pos:start="2469:79" pos:end="2469:82"><name pos:start="2469:79" pos:end="2469:82">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="2473:27" pos:end="2485:25">else if <condition pos:start="2473:35" pos:end="2473:44">(<expr pos:start="2473:36" pos:end="2473:43"><name pos:start="2473:36" pos:end="2473:37">op</name> <operator pos:start="2473:39" pos:end="2473:40">==</operator> <literal type="number" pos:start="2473:42" pos:end="2473:43">13</literal></expr>)</condition> <block pos:start="2473:46" pos:end="2485:25">{<block_content pos:start="2475:29" pos:end="2483:29">

                            <if_stmt pos:start="2475:29" pos:end="2483:29"><if pos:start="2475:29" pos:end="2479:29">if <condition pos:start="2475:32" pos:end="2475:42">(<expr pos:start="2475:33" pos:end="2475:41"><name pos:start="2475:33" pos:end="2475:36">size</name> <operator pos:start="2475:38" pos:end="2475:39">==</operator> <literal type="number" pos:start="2475:41" pos:end="2475:41">1</literal></expr>)</condition> <block pos:start="2475:44" pos:end="2479:29">{<block_content pos:start="2477:33" pos:end="2477:85">

                                <expr_stmt pos:start="2477:33" pos:end="2477:85"><expr pos:start="2477:33" pos:end="2477:84"><call pos:start="2477:33" pos:end="2477:84"><name pos:start="2477:33" pos:end="2477:59">gen_helper_neon_qrdmulh_s16</name><argument_list pos:start="2477:60" pos:end="2477:84">(<argument pos:start="2477:61" pos:end="2477:63"><expr pos:start="2477:61" pos:end="2477:63"><name pos:start="2477:61" pos:end="2477:63">tmp</name></expr></argument>, <argument pos:start="2477:66" pos:end="2477:72"><expr pos:start="2477:66" pos:end="2477:72"><name pos:start="2477:66" pos:end="2477:72">cpu_env</name></expr></argument>, <argument pos:start="2477:75" pos:end="2477:77"><expr pos:start="2477:75" pos:end="2477:77"><name pos:start="2477:75" pos:end="2477:77">tmp</name></expr></argument>, <argument pos:start="2477:80" pos:end="2477:83"><expr pos:start="2477:80" pos:end="2477:83"><name pos:start="2477:80" pos:end="2477:83">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2479:31" pos:end="2483:29">else <block pos:start="2479:36" pos:end="2483:29">{<block_content pos:start="2481:33" pos:end="2481:85">

                                <expr_stmt pos:start="2481:33" pos:end="2481:85"><expr pos:start="2481:33" pos:end="2481:84"><call pos:start="2481:33" pos:end="2481:84"><name pos:start="2481:33" pos:end="2481:59">gen_helper_neon_qrdmulh_s32</name><argument_list pos:start="2481:60" pos:end="2481:84">(<argument pos:start="2481:61" pos:end="2481:63"><expr pos:start="2481:61" pos:end="2481:63"><name pos:start="2481:61" pos:end="2481:63">tmp</name></expr></argument>, <argument pos:start="2481:66" pos:end="2481:72"><expr pos:start="2481:66" pos:end="2481:72"><name pos:start="2481:66" pos:end="2481:72">cpu_env</name></expr></argument>, <argument pos:start="2481:75" pos:end="2481:77"><expr pos:start="2481:75" pos:end="2481:77"><name pos:start="2481:75" pos:end="2481:77">tmp</name></expr></argument>, <argument pos:start="2481:80" pos:end="2481:83"><expr pos:start="2481:80" pos:end="2481:83"><name pos:start="2481:80" pos:end="2481:83">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="2485:27" pos:end="2493:25">else if <condition pos:start="2485:35" pos:end="2485:42">(<expr pos:start="2485:36" pos:end="2485:41"><name pos:start="2485:36" pos:end="2485:37">op</name> <operator pos:start="2485:39" pos:end="2485:39">&amp;</operator> <literal type="number" pos:start="2485:41" pos:end="2485:41">1</literal></expr>)</condition> <block pos:start="2485:44" pos:end="2493:25">{<block_content pos:start="2487:29" pos:end="2491:56">

                            <decl_stmt pos:start="2487:29" pos:end="2487:68"><decl pos:start="2487:29" pos:end="2487:67"><type pos:start="2487:29" pos:end="2487:36"><name pos:start="2487:29" pos:end="2487:36">TCGv_ptr</name></type> <name pos:start="2487:38" pos:end="2487:45">fpstatus</name> <init pos:start="2487:47" pos:end="2487:67">= <expr pos:start="2487:49" pos:end="2487:67"><call pos:start="2487:49" pos:end="2487:67"><name pos:start="2487:49" pos:end="2487:64">get_fpstatus_ptr</name><argument_list pos:start="2487:65" pos:end="2487:67">(<argument pos:start="2487:66" pos:end="2487:66"><expr pos:start="2487:66" pos:end="2487:66"><literal type="number" pos:start="2487:66" pos:end="2487:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="2489:29" pos:end="2489:74"><expr pos:start="2489:29" pos:end="2489:73"><call pos:start="2489:29" pos:end="2489:73"><name pos:start="2489:29" pos:end="2489:47">gen_helper_vfp_muls</name><argument_list pos:start="2489:48" pos:end="2489:73">(<argument pos:start="2489:49" pos:end="2489:51"><expr pos:start="2489:49" pos:end="2489:51"><name pos:start="2489:49" pos:end="2489:51">tmp</name></expr></argument>, <argument pos:start="2489:54" pos:end="2489:56"><expr pos:start="2489:54" pos:end="2489:56"><name pos:start="2489:54" pos:end="2489:56">tmp</name></expr></argument>, <argument pos:start="2489:59" pos:end="2489:62"><expr pos:start="2489:59" pos:end="2489:62"><name pos:start="2489:59" pos:end="2489:62">tmp2</name></expr></argument>, <argument pos:start="2489:65" pos:end="2489:72"><expr pos:start="2489:65" pos:end="2489:72"><name pos:start="2489:65" pos:end="2489:72">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2491:29" pos:end="2491:56"><expr pos:start="2491:29" pos:end="2491:55"><call pos:start="2491:29" pos:end="2491:55"><name pos:start="2491:29" pos:end="2491:45">tcg_temp_free_ptr</name><argument_list pos:start="2491:46" pos:end="2491:55">(<argument pos:start="2491:47" pos:end="2491:54"><expr pos:start="2491:47" pos:end="2491:54"><name pos:start="2491:47" pos:end="2491:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2493:27" pos:end="2507:25">else <block pos:start="2493:32" pos:end="2507:25">{<block_content pos:start="2495:29" pos:end="2505:29">

                            <switch pos:start="2495:29" pos:end="2505:29">switch <condition pos:start="2495:36" pos:end="2495:41">(<expr pos:start="2495:37" pos:end="2495:40"><name pos:start="2495:37" pos:end="2495:40">size</name></expr>)</condition> <block pos:start="2495:43" pos:end="2505:29">{<block_content pos:start="2497:29" pos:end="2503:45">

                            <case pos:start="2497:29" pos:end="2497:35">case <expr pos:start="2497:34" pos:end="2497:34"><literal type="number" pos:start="2497:34" pos:end="2497:34">0</literal></expr>:</case> <expr_stmt pos:start="2497:37" pos:end="2497:75"><expr pos:start="2497:37" pos:end="2497:74"><call pos:start="2497:37" pos:end="2497:74"><name pos:start="2497:37" pos:end="2497:58">gen_helper_neon_mul_u8</name><argument_list pos:start="2497:59" pos:end="2497:74">(<argument pos:start="2497:60" pos:end="2497:62"><expr pos:start="2497:60" pos:end="2497:62"><name pos:start="2497:60" pos:end="2497:62">tmp</name></expr></argument>, <argument pos:start="2497:65" pos:end="2497:67"><expr pos:start="2497:65" pos:end="2497:67"><name pos:start="2497:65" pos:end="2497:67">tmp</name></expr></argument>, <argument pos:start="2497:70" pos:end="2497:73"><expr pos:start="2497:70" pos:end="2497:73"><name pos:start="2497:70" pos:end="2497:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2497:77" pos:end="2497:82">break;</break>

                            <case pos:start="2499:29" pos:end="2499:35">case <expr pos:start="2499:34" pos:end="2499:34"><literal type="number" pos:start="2499:34" pos:end="2499:34">1</literal></expr>:</case> <expr_stmt pos:start="2499:37" pos:end="2499:76"><expr pos:start="2499:37" pos:end="2499:75"><call pos:start="2499:37" pos:end="2499:75"><name pos:start="2499:37" pos:end="2499:59">gen_helper_neon_mul_u16</name><argument_list pos:start="2499:60" pos:end="2499:75">(<argument pos:start="2499:61" pos:end="2499:63"><expr pos:start="2499:61" pos:end="2499:63"><name pos:start="2499:61" pos:end="2499:63">tmp</name></expr></argument>, <argument pos:start="2499:66" pos:end="2499:68"><expr pos:start="2499:66" pos:end="2499:68"><name pos:start="2499:66" pos:end="2499:68">tmp</name></expr></argument>, <argument pos:start="2499:71" pos:end="2499:74"><expr pos:start="2499:71" pos:end="2499:74"><name pos:start="2499:71" pos:end="2499:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2499:78" pos:end="2499:83">break;</break>

                            <case pos:start="2501:29" pos:end="2501:35">case <expr pos:start="2501:34" pos:end="2501:34"><literal type="number" pos:start="2501:34" pos:end="2501:34">2</literal></expr>:</case> <expr_stmt pos:start="2501:37" pos:end="2501:68"><expr pos:start="2501:37" pos:end="2501:67"><call pos:start="2501:37" pos:end="2501:67"><name pos:start="2501:37" pos:end="2501:51">tcg_gen_mul_i32</name><argument_list pos:start="2501:52" pos:end="2501:67">(<argument pos:start="2501:53" pos:end="2501:55"><expr pos:start="2501:53" pos:end="2501:55"><name pos:start="2501:53" pos:end="2501:55">tmp</name></expr></argument>, <argument pos:start="2501:58" pos:end="2501:60"><expr pos:start="2501:58" pos:end="2501:60"><name pos:start="2501:58" pos:end="2501:60">tmp</name></expr></argument>, <argument pos:start="2501:63" pos:end="2501:66"><expr pos:start="2501:63" pos:end="2501:66"><name pos:start="2501:63" pos:end="2501:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2501:70" pos:end="2501:75">break;</break>

                            <default pos:start="2503:29" pos:end="2503:36">default:</default> <expr_stmt pos:start="2503:38" pos:end="2503:45"><expr pos:start="2503:38" pos:end="2503:44"><call pos:start="2503:38" pos:end="2503:44"><name pos:start="2503:38" pos:end="2503:42">abort</name><argument_list pos:start="2503:43" pos:end="2503:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2509:25" pos:end="2509:48"><expr pos:start="2509:25" pos:end="2509:47"><call pos:start="2509:25" pos:end="2509:47"><name pos:start="2509:25" pos:end="2509:41">tcg_temp_free_i32</name><argument_list pos:start="2509:42" pos:end="2509:47">(<argument pos:start="2509:43" pos:end="2509:46"><expr pos:start="2509:43" pos:end="2509:46"><name pos:start="2509:43" pos:end="2509:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2511:25" pos:end="2567:25"><if pos:start="2511:25" pos:end="2567:25">if <condition pos:start="2511:28" pos:end="2511:35">(<expr pos:start="2511:29" pos:end="2511:34"><name pos:start="2511:29" pos:end="2511:30">op</name> <operator pos:start="2511:32" pos:end="2511:32">&lt;</operator> <literal type="number" pos:start="2511:34" pos:end="2511:34">8</literal></expr>)</condition> <block pos:start="2511:37" pos:end="2567:25">{<block_content pos:start="2515:29" pos:end="2565:52">

                            <comment type="block" pos:start="2513:29" pos:end="2513:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="2515:29" pos:end="2515:59"><expr pos:start="2515:29" pos:end="2515:58"><name pos:start="2515:29" pos:end="2515:32">tmp2</name> <operator pos:start="2515:34" pos:end="2515:34">=</operator> <call pos:start="2515:36" pos:end="2515:58"><name pos:start="2515:36" pos:end="2515:48">neon_load_reg</name><argument_list pos:start="2515:49" pos:end="2515:58">(<argument pos:start="2515:50" pos:end="2515:51"><expr pos:start="2515:50" pos:end="2515:51"><name pos:start="2515:50" pos:end="2515:51">rd</name></expr></argument>, <argument pos:start="2515:54" pos:end="2515:57"><expr pos:start="2515:54" pos:end="2515:57"><name pos:start="2515:54" pos:end="2515:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2517:29" pos:end="2563:29">switch <condition pos:start="2517:36" pos:end="2517:39">(<expr pos:start="2517:37" pos:end="2517:38"><name pos:start="2517:37" pos:end="2517:38">op</name></expr>)</condition> <block pos:start="2517:41" pos:end="2563:29">{<block_content pos:start="2519:29" pos:end="2561:40">

                            <case pos:start="2519:29" pos:end="2519:35">case <expr pos:start="2519:34" pos:end="2519:34"><literal type="number" pos:start="2519:34" pos:end="2519:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2521:33" pos:end="2521:62"><expr pos:start="2521:33" pos:end="2521:61"><call pos:start="2521:33" pos:end="2521:61"><name pos:start="2521:33" pos:end="2521:44">gen_neon_add</name><argument_list pos:start="2521:45" pos:end="2521:61">(<argument pos:start="2521:46" pos:end="2521:49"><expr pos:start="2521:46" pos:end="2521:49"><name pos:start="2521:46" pos:end="2521:49">size</name></expr></argument>, <argument pos:start="2521:52" pos:end="2521:54"><expr pos:start="2521:52" pos:end="2521:54"><name pos:start="2521:52" pos:end="2521:54">tmp</name></expr></argument>, <argument pos:start="2521:57" pos:end="2521:60"><expr pos:start="2521:57" pos:end="2521:60"><name pos:start="2521:57" pos:end="2521:60">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2523:33" pos:end="2523:38">break;</break>

                            <case pos:start="2525:29" pos:end="2525:35">case <expr pos:start="2525:34" pos:end="2525:34"><literal type="number" pos:start="2525:34" pos:end="2525:34">1</literal></expr>:</case>

                            <block pos:start="2527:29" pos:end="2537:29">{<block_content pos:start="2529:33" pos:end="2535:38">

                                <decl_stmt pos:start="2529:33" pos:end="2529:72"><decl pos:start="2529:33" pos:end="2529:71"><type pos:start="2529:33" pos:end="2529:40"><name pos:start="2529:33" pos:end="2529:40">TCGv_ptr</name></type> <name pos:start="2529:42" pos:end="2529:49">fpstatus</name> <init pos:start="2529:51" pos:end="2529:71">= <expr pos:start="2529:53" pos:end="2529:71"><call pos:start="2529:53" pos:end="2529:71"><name pos:start="2529:53" pos:end="2529:68">get_fpstatus_ptr</name><argument_list pos:start="2529:69" pos:end="2529:71">(<argument pos:start="2529:70" pos:end="2529:70"><expr pos:start="2529:70" pos:end="2529:70"><literal type="number" pos:start="2529:70" pos:end="2529:70">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt pos:start="2531:33" pos:end="2531:78"><expr pos:start="2531:33" pos:end="2531:77"><call pos:start="2531:33" pos:end="2531:77"><name pos:start="2531:33" pos:end="2531:51">gen_helper_vfp_adds</name><argument_list pos:start="2531:52" pos:end="2531:77">(<argument pos:start="2531:53" pos:end="2531:55"><expr pos:start="2531:53" pos:end="2531:55"><name pos:start="2531:53" pos:end="2531:55">tmp</name></expr></argument>, <argument pos:start="2531:58" pos:end="2531:60"><expr pos:start="2531:58" pos:end="2531:60"><name pos:start="2531:58" pos:end="2531:60">tmp</name></expr></argument>, <argument pos:start="2531:63" pos:end="2531:66"><expr pos:start="2531:63" pos:end="2531:66"><name pos:start="2531:63" pos:end="2531:66">tmp2</name></expr></argument>, <argument pos:start="2531:69" pos:end="2531:76"><expr pos:start="2531:69" pos:end="2531:76"><name pos:start="2531:69" pos:end="2531:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2533:33" pos:end="2533:60"><expr pos:start="2533:33" pos:end="2533:59"><call pos:start="2533:33" pos:end="2533:59"><name pos:start="2533:33" pos:end="2533:49">tcg_temp_free_ptr</name><argument_list pos:start="2533:50" pos:end="2533:59">(<argument pos:start="2533:51" pos:end="2533:58"><expr pos:start="2533:51" pos:end="2533:58"><name pos:start="2533:51" pos:end="2533:58">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2535:33" pos:end="2535:38">break;</break>

                            </block_content>}</block>

                            <case pos:start="2539:29" pos:end="2539:35">case <expr pos:start="2539:34" pos:end="2539:34"><literal type="number" pos:start="2539:34" pos:end="2539:34">4</literal></expr>:</case>

                                <expr_stmt pos:start="2541:33" pos:end="2541:62"><expr pos:start="2541:33" pos:end="2541:61"><call pos:start="2541:33" pos:end="2541:61"><name pos:start="2541:33" pos:end="2541:44">gen_neon_rsb</name><argument_list pos:start="2541:45" pos:end="2541:61">(<argument pos:start="2541:46" pos:end="2541:49"><expr pos:start="2541:46" pos:end="2541:49"><name pos:start="2541:46" pos:end="2541:49">size</name></expr></argument>, <argument pos:start="2541:52" pos:end="2541:54"><expr pos:start="2541:52" pos:end="2541:54"><name pos:start="2541:52" pos:end="2541:54">tmp</name></expr></argument>, <argument pos:start="2541:57" pos:end="2541:60"><expr pos:start="2541:57" pos:end="2541:60"><name pos:start="2541:57" pos:end="2541:60">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2543:33" pos:end="2543:38">break;</break>

                            <case pos:start="2545:29" pos:end="2545:35">case <expr pos:start="2545:34" pos:end="2545:34"><literal type="number" pos:start="2545:34" pos:end="2545:34">5</literal></expr>:</case>

                            <block pos:start="2547:29" pos:end="2557:29">{<block_content pos:start="2549:33" pos:end="2555:38">

                                <decl_stmt pos:start="2549:33" pos:end="2549:72"><decl pos:start="2549:33" pos:end="2549:71"><type pos:start="2549:33" pos:end="2549:40"><name pos:start="2549:33" pos:end="2549:40">TCGv_ptr</name></type> <name pos:start="2549:42" pos:end="2549:49">fpstatus</name> <init pos:start="2549:51" pos:end="2549:71">= <expr pos:start="2549:53" pos:end="2549:71"><call pos:start="2549:53" pos:end="2549:71"><name pos:start="2549:53" pos:end="2549:68">get_fpstatus_ptr</name><argument_list pos:start="2549:69" pos:end="2549:71">(<argument pos:start="2549:70" pos:end="2549:70"><expr pos:start="2549:70" pos:end="2549:70"><literal type="number" pos:start="2549:70" pos:end="2549:70">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt pos:start="2551:33" pos:end="2551:78"><expr pos:start="2551:33" pos:end="2551:77"><call pos:start="2551:33" pos:end="2551:77"><name pos:start="2551:33" pos:end="2551:51">gen_helper_vfp_subs</name><argument_list pos:start="2551:52" pos:end="2551:77">(<argument pos:start="2551:53" pos:end="2551:55"><expr pos:start="2551:53" pos:end="2551:55"><name pos:start="2551:53" pos:end="2551:55">tmp</name></expr></argument>, <argument pos:start="2551:58" pos:end="2551:61"><expr pos:start="2551:58" pos:end="2551:61"><name pos:start="2551:58" pos:end="2551:61">tmp2</name></expr></argument>, <argument pos:start="2551:64" pos:end="2551:66"><expr pos:start="2551:64" pos:end="2551:66"><name pos:start="2551:64" pos:end="2551:66">tmp</name></expr></argument>, <argument pos:start="2551:69" pos:end="2551:76"><expr pos:start="2551:69" pos:end="2551:76"><name pos:start="2551:69" pos:end="2551:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2553:33" pos:end="2553:60"><expr pos:start="2553:33" pos:end="2553:59"><call pos:start="2553:33" pos:end="2553:59"><name pos:start="2553:33" pos:end="2553:49">tcg_temp_free_ptr</name><argument_list pos:start="2553:50" pos:end="2553:59">(<argument pos:start="2553:51" pos:end="2553:58"><expr pos:start="2553:51" pos:end="2553:58"><name pos:start="2553:51" pos:end="2553:58">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2555:33" pos:end="2555:38">break;</break>

                            </block_content>}</block>

                            <default pos:start="2559:29" pos:end="2559:36">default:</default>

                                <expr_stmt pos:start="2561:33" pos:end="2561:40"><expr pos:start="2561:33" pos:end="2561:39"><call pos:start="2561:33" pos:end="2561:39"><name pos:start="2561:33" pos:end="2561:37">abort</name><argument_list pos:start="2561:38" pos:end="2561:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2565:29" pos:end="2565:52"><expr pos:start="2565:29" pos:end="2565:51"><call pos:start="2565:29" pos:end="2565:51"><name pos:start="2565:29" pos:end="2565:45">tcg_temp_free_i32</name><argument_list pos:start="2565:46" pos:end="2565:51">(<argument pos:start="2565:47" pos:end="2565:50"><expr pos:start="2565:47" pos:end="2565:50"><name pos:start="2565:47" pos:end="2565:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2569:25" pos:end="2569:54"><expr pos:start="2569:25" pos:end="2569:53"><call pos:start="2569:25" pos:end="2569:53"><name pos:start="2569:25" pos:end="2569:38">neon_store_reg</name><argument_list pos:start="2569:39" pos:end="2569:53">(<argument pos:start="2569:40" pos:end="2569:41"><expr pos:start="2569:40" pos:end="2569:41"><name pos:start="2569:40" pos:end="2569:41">rd</name></expr></argument>, <argument pos:start="2569:44" pos:end="2569:47"><expr pos:start="2569:44" pos:end="2569:47"><name pos:start="2569:44" pos:end="2569:47">pass</name></expr></argument>, <argument pos:start="2569:50" pos:end="2569:52"><expr pos:start="2569:50" pos:end="2569:52"><name pos:start="2569:50" pos:end="2569:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2573:21" pos:end="2573:26">break;</break>

                <case pos:start="2575:17" pos:end="2575:23">case <expr pos:start="2575:22" pos:end="2575:22"><literal type="number" pos:start="2575:22" pos:end="2575:22">3</literal></expr>:</case> <comment type="block" pos:start="2575:25" pos:end="2575:44">/* VQDMLAL scalar */</comment>

                <case pos:start="2577:17" pos:end="2577:23">case <expr pos:start="2577:22" pos:end="2577:22"><literal type="number" pos:start="2577:22" pos:end="2577:22">7</literal></expr>:</case> <comment type="block" pos:start="2577:25" pos:end="2577:44">/* VQDMLSL scalar */</comment>

                <case pos:start="2579:17" pos:end="2579:24">case <expr pos:start="2579:22" pos:end="2579:23"><literal type="number" pos:start="2579:22" pos:end="2579:23">11</literal></expr>:</case> <comment type="block" pos:start="2579:26" pos:end="2579:45">/* VQDMULL scalar */</comment>

                    <if_stmt pos:start="2581:21" pos:end="2585:21"><if pos:start="2581:21" pos:end="2585:21">if <condition pos:start="2581:24" pos:end="2581:31">(<expr pos:start="2581:25" pos:end="2581:30"><name pos:start="2581:25" pos:end="2581:25">u</name> <operator pos:start="2581:27" pos:end="2581:28">==</operator> <literal type="number" pos:start="2581:30" pos:end="2581:30">1</literal></expr>)</condition> <block pos:start="2581:33" pos:end="2585:21">{<block_content pos:start="2583:25" pos:end="2583:33">

                        <return pos:start="2583:25" pos:end="2583:33">return <expr pos:start="2583:32" pos:end="2583:32"><literal type="number" pos:start="2583:32" pos:end="2583:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="2587:21" pos:end="2587:38">/* fall through */</comment>

                <case pos:start="2589:17" pos:end="2589:23">case <expr pos:start="2589:22" pos:end="2589:22"><literal type="number" pos:start="2589:22" pos:end="2589:22">2</literal></expr>:</case> <comment type="block" pos:start="2589:25" pos:end="2589:41">/* VMLAL sclar */</comment>

                <case pos:start="2591:17" pos:end="2591:23">case <expr pos:start="2591:22" pos:end="2591:22"><literal type="number" pos:start="2591:22" pos:end="2591:22">6</literal></expr>:</case> <comment type="block" pos:start="2591:25" pos:end="2591:42">/* VMLSL scalar */</comment>

                <case pos:start="2593:17" pos:end="2593:24">case <expr pos:start="2593:22" pos:end="2593:23"><literal type="number" pos:start="2593:22" pos:end="2593:23">10</literal></expr>:</case> <comment type="block" pos:start="2593:26" pos:end="2593:43">/* VMULL scalar */</comment>

                    <if_stmt pos:start="2595:21" pos:end="2599:21"><if pos:start="2595:21" pos:end="2599:21">if <condition pos:start="2595:24" pos:end="2595:31">(<expr pos:start="2595:25" pos:end="2595:30"><name pos:start="2595:25" pos:end="2595:26">rd</name> <operator pos:start="2595:28" pos:end="2595:28">&amp;</operator> <literal type="number" pos:start="2595:30" pos:end="2595:30">1</literal></expr>)</condition> <block pos:start="2595:33" pos:end="2599:21">{<block_content pos:start="2597:25" pos:end="2597:33">

                        <return pos:start="2597:25" pos:end="2597:33">return <expr pos:start="2597:32" pos:end="2597:32"><literal type="number" pos:start="2597:32" pos:end="2597:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2601:21" pos:end="2601:53"><expr pos:start="2601:21" pos:end="2601:52"><name pos:start="2601:21" pos:end="2601:24">tmp2</name> <operator pos:start="2601:26" pos:end="2601:26">=</operator> <call pos:start="2601:28" pos:end="2601:52"><name pos:start="2601:28" pos:end="2601:42">neon_get_scalar</name><argument_list pos:start="2601:43" pos:end="2601:52">(<argument pos:start="2601:44" pos:end="2601:47"><expr pos:start="2601:44" pos:end="2601:47"><name pos:start="2601:44" pos:end="2601:47">size</name></expr></argument>, <argument pos:start="2601:50" pos:end="2601:51"><expr pos:start="2601:50" pos:end="2601:51"><name pos:start="2601:50" pos:end="2601:51">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="2603:21" pos:end="2605:52">/* We need a copy of tmp2 because gen_neon_mull

                     * deletes it during pass 0.  */</comment>

                    <expr_stmt pos:start="2607:21" pos:end="2607:46"><expr pos:start="2607:21" pos:end="2607:45"><name pos:start="2607:21" pos:end="2607:24">tmp4</name> <operator pos:start="2607:26" pos:end="2607:26">=</operator> <call pos:start="2607:28" pos:end="2607:45"><name pos:start="2607:28" pos:end="2607:43">tcg_temp_new_i32</name><argument_list pos:start="2607:44" pos:end="2607:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2609:21" pos:end="2609:48"><expr pos:start="2609:21" pos:end="2609:47"><call pos:start="2609:21" pos:end="2609:47"><name pos:start="2609:21" pos:end="2609:35">tcg_gen_mov_i32</name><argument_list pos:start="2609:36" pos:end="2609:47">(<argument pos:start="2609:37" pos:end="2609:40"><expr pos:start="2609:37" pos:end="2609:40"><name pos:start="2609:37" pos:end="2609:40">tmp4</name></expr></argument>, <argument pos:start="2609:43" pos:end="2609:46"><expr pos:start="2609:43" pos:end="2609:46"><name pos:start="2609:43" pos:end="2609:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2611:21" pos:end="2611:48"><expr pos:start="2611:21" pos:end="2611:47"><name pos:start="2611:21" pos:end="2611:24">tmp3</name> <operator pos:start="2611:26" pos:end="2611:26">=</operator> <call pos:start="2611:28" pos:end="2611:47"><name pos:start="2611:28" pos:end="2611:40">neon_load_reg</name><argument_list pos:start="2611:41" pos:end="2611:47">(<argument pos:start="2611:42" pos:end="2611:43"><expr pos:start="2611:42" pos:end="2611:43"><name pos:start="2611:42" pos:end="2611:43">rn</name></expr></argument>, <argument pos:start="2611:46" pos:end="2611:46"><expr pos:start="2611:46" pos:end="2611:46"><literal type="number" pos:start="2611:46" pos:end="2611:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <for pos:start="2615:21" pos:end="2685:21">for <control pos:start="2615:25" pos:end="2615:52">(<init pos:start="2615:26" pos:end="2615:34"><expr pos:start="2615:26" pos:end="2615:33"><name pos:start="2615:26" pos:end="2615:29">pass</name> <operator pos:start="2615:31" pos:end="2615:31">=</operator> <literal type="number" pos:start="2615:33" pos:end="2615:33">0</literal></expr>;</init> <condition pos:start="2615:36" pos:end="2615:44"><expr pos:start="2615:36" pos:end="2615:43"><name pos:start="2615:36" pos:end="2615:39">pass</name> <operator pos:start="2615:41" pos:end="2615:41">&lt;</operator> <literal type="number" pos:start="2615:43" pos:end="2615:43">2</literal></expr>;</condition> <incr pos:start="2615:46" pos:end="2615:51"><expr pos:start="2615:46" pos:end="2615:51"><name pos:start="2615:46" pos:end="2615:49">pass</name><operator pos:start="2615:50" pos:end="2615:51">++</operator></expr></incr>)</control> <block pos:start="2615:54" pos:end="2685:21">{<block_content pos:start="2617:25" pos:end="2683:60">

                        <if_stmt pos:start="2617:25" pos:end="2627:25"><if pos:start="2617:25" pos:end="2621:25">if <condition pos:start="2617:28" pos:end="2617:38">(<expr pos:start="2617:29" pos:end="2617:37"><name pos:start="2617:29" pos:end="2617:32">pass</name> <operator pos:start="2617:34" pos:end="2617:35">==</operator> <literal type="number" pos:start="2617:37" pos:end="2617:37">0</literal></expr>)</condition> <block pos:start="2617:40" pos:end="2621:25">{<block_content pos:start="2619:29" pos:end="2619:55">

                            <expr_stmt pos:start="2619:29" pos:end="2619:55"><expr pos:start="2619:29" pos:end="2619:54"><name pos:start="2619:29" pos:end="2619:31">tmp</name> <operator pos:start="2619:33" pos:end="2619:33">=</operator> <call pos:start="2619:35" pos:end="2619:54"><name pos:start="2619:35" pos:end="2619:47">neon_load_reg</name><argument_list pos:start="2619:48" pos:end="2619:54">(<argument pos:start="2619:49" pos:end="2619:50"><expr pos:start="2619:49" pos:end="2619:50"><name pos:start="2619:49" pos:end="2619:50">rn</name></expr></argument>, <argument pos:start="2619:53" pos:end="2619:53"><expr pos:start="2619:53" pos:end="2619:53"><literal type="number" pos:start="2619:53" pos:end="2619:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2621:27" pos:end="2627:25">else <block pos:start="2621:32" pos:end="2627:25">{<block_content pos:start="2623:29" pos:end="2625:40">

                            <expr_stmt pos:start="2623:29" pos:end="2623:39"><expr pos:start="2623:29" pos:end="2623:38"><name pos:start="2623:29" pos:end="2623:31">tmp</name> <operator pos:start="2623:33" pos:end="2623:33">=</operator> <name pos:start="2623:35" pos:end="2623:38">tmp3</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="2625:29" pos:end="2625:40"><expr pos:start="2625:29" pos:end="2625:39"><name pos:start="2625:29" pos:end="2625:32">tmp2</name> <operator pos:start="2625:34" pos:end="2625:34">=</operator> <name pos:start="2625:36" pos:end="2625:39">tmp4</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2629:25" pos:end="2629:66"><expr pos:start="2629:25" pos:end="2629:65"><call pos:start="2629:25" pos:end="2629:65"><name pos:start="2629:25" pos:end="2629:37">gen_neon_mull</name><argument_list pos:start="2629:38" pos:end="2629:65">(<argument pos:start="2629:39" pos:end="2629:44"><expr pos:start="2629:39" pos:end="2629:44"><name pos:start="2629:39" pos:end="2629:44">cpu_V0</name></expr></argument>, <argument pos:start="2629:47" pos:end="2629:49"><expr pos:start="2629:47" pos:end="2629:49"><name pos:start="2629:47" pos:end="2629:49">tmp</name></expr></argument>, <argument pos:start="2629:52" pos:end="2629:55"><expr pos:start="2629:52" pos:end="2629:55"><name pos:start="2629:52" pos:end="2629:55">tmp2</name></expr></argument>, <argument pos:start="2629:58" pos:end="2629:61"><expr pos:start="2629:58" pos:end="2629:61"><name pos:start="2629:58" pos:end="2629:61">size</name></expr></argument>, <argument pos:start="2629:64" pos:end="2629:64"><expr pos:start="2629:64" pos:end="2629:64"><name pos:start="2629:64" pos:end="2629:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2631:25" pos:end="2635:25"><if pos:start="2631:25" pos:end="2635:25">if <condition pos:start="2631:28" pos:end="2631:37">(<expr pos:start="2631:29" pos:end="2631:36"><name pos:start="2631:29" pos:end="2631:30">op</name> <operator pos:start="2631:32" pos:end="2631:33">!=</operator> <literal type="number" pos:start="2631:35" pos:end="2631:36">11</literal></expr>)</condition> <block pos:start="2631:39" pos:end="2635:25">{<block_content pos:start="2633:29" pos:end="2633:63">

                            <expr_stmt pos:start="2633:29" pos:end="2633:63"><expr pos:start="2633:29" pos:end="2633:62"><call pos:start="2633:29" pos:end="2633:62"><name pos:start="2633:29" pos:end="2633:43">neon_load_reg64</name><argument_list pos:start="2633:44" pos:end="2633:62">(<argument pos:start="2633:45" pos:end="2633:50"><expr pos:start="2633:45" pos:end="2633:50"><name pos:start="2633:45" pos:end="2633:50">cpu_V1</name></expr></argument>, <argument pos:start="2633:53" pos:end="2633:61"><expr pos:start="2633:53" pos:end="2633:61"><name pos:start="2633:53" pos:end="2633:54">rd</name> <operator pos:start="2633:56" pos:end="2633:56">+</operator> <name pos:start="2633:58" pos:end="2633:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <switch pos:start="2637:25" pos:end="2681:25">switch <condition pos:start="2637:32" pos:end="2637:35">(<expr pos:start="2637:33" pos:end="2637:34"><name pos:start="2637:33" pos:end="2637:34">op</name></expr>)</condition> <block pos:start="2637:37" pos:end="2681:25">{<block_content pos:start="2639:25" pos:end="2679:36">

                        <case pos:start="2639:25" pos:end="2639:31">case <expr pos:start="2639:30" pos:end="2639:30"><literal type="number" pos:start="2639:30" pos:end="2639:30">6</literal></expr>:</case>

                            <expr_stmt pos:start="2641:29" pos:end="2641:56"><expr pos:start="2641:29" pos:end="2641:55"><call pos:start="2641:29" pos:end="2641:55"><name pos:start="2641:29" pos:end="2641:41">gen_neon_negl</name><argument_list pos:start="2641:42" pos:end="2641:55">(<argument pos:start="2641:43" pos:end="2641:48"><expr pos:start="2641:43" pos:end="2641:48"><name pos:start="2641:43" pos:end="2641:48">cpu_V0</name></expr></argument>, <argument pos:start="2641:51" pos:end="2641:54"><expr pos:start="2641:51" pos:end="2641:54"><name pos:start="2641:51" pos:end="2641:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="2643:29" pos:end="2643:46">/* Fall through */</comment>

                        <case pos:start="2645:25" pos:end="2645:31">case <expr pos:start="2645:30" pos:end="2645:30"><literal type="number" pos:start="2645:30" pos:end="2645:30">2</literal></expr>:</case>

                            <expr_stmt pos:start="2647:29" pos:end="2647:48"><expr pos:start="2647:29" pos:end="2647:47"><call pos:start="2647:29" pos:end="2647:47"><name pos:start="2647:29" pos:end="2647:41">gen_neon_addl</name><argument_list pos:start="2647:42" pos:end="2647:47">(<argument pos:start="2647:43" pos:end="2647:46"><expr pos:start="2647:43" pos:end="2647:46"><name pos:start="2647:43" pos:end="2647:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2649:29" pos:end="2649:34">break;</break>

                        <case pos:start="2651:25" pos:end="2651:31">case <expr pos:start="2651:30" pos:end="2651:30"><literal type="number" pos:start="2651:30" pos:end="2651:30">3</literal></expr>:</case> <case pos:start="2651:33" pos:end="2651:39">case <expr pos:start="2651:38" pos:end="2651:38"><literal type="number" pos:start="2651:38" pos:end="2651:38">7</literal></expr>:</case>

                            <expr_stmt pos:start="2653:29" pos:end="2653:73"><expr pos:start="2653:29" pos:end="2653:72"><call pos:start="2653:29" pos:end="2653:72"><name pos:start="2653:29" pos:end="2653:50">gen_neon_addl_saturate</name><argument_list pos:start="2653:51" pos:end="2653:72">(<argument pos:start="2653:52" pos:end="2653:57"><expr pos:start="2653:52" pos:end="2653:57"><name pos:start="2653:52" pos:end="2653:57">cpu_V0</name></expr></argument>, <argument pos:start="2653:60" pos:end="2653:65"><expr pos:start="2653:60" pos:end="2653:65"><name pos:start="2653:60" pos:end="2653:65">cpu_V0</name></expr></argument>, <argument pos:start="2653:68" pos:end="2653:71"><expr pos:start="2653:68" pos:end="2653:71"><name pos:start="2653:68" pos:end="2653:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2655:29" pos:end="2659:29"><if pos:start="2655:29" pos:end="2659:29">if <condition pos:start="2655:32" pos:end="2655:40">(<expr pos:start="2655:33" pos:end="2655:39"><name pos:start="2655:33" pos:end="2655:34">op</name> <operator pos:start="2655:36" pos:end="2655:37">==</operator> <literal type="number" pos:start="2655:39" pos:end="2655:39">7</literal></expr>)</condition> <block pos:start="2655:42" pos:end="2659:29">{<block_content pos:start="2657:33" pos:end="2657:60">

                                <expr_stmt pos:start="2657:33" pos:end="2657:60"><expr pos:start="2657:33" pos:end="2657:59"><call pos:start="2657:33" pos:end="2657:59"><name pos:start="2657:33" pos:end="2657:45">gen_neon_negl</name><argument_list pos:start="2657:46" pos:end="2657:59">(<argument pos:start="2657:47" pos:end="2657:52"><expr pos:start="2657:47" pos:end="2657:52"><name pos:start="2657:47" pos:end="2657:52">cpu_V0</name></expr></argument>, <argument pos:start="2657:55" pos:end="2657:58"><expr pos:start="2657:55" pos:end="2657:58"><name pos:start="2657:55" pos:end="2657:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="2661:29" pos:end="2661:73"><expr pos:start="2661:29" pos:end="2661:72"><call pos:start="2661:29" pos:end="2661:72"><name pos:start="2661:29" pos:end="2661:50">gen_neon_addl_saturate</name><argument_list pos:start="2661:51" pos:end="2661:72">(<argument pos:start="2661:52" pos:end="2661:57"><expr pos:start="2661:52" pos:end="2661:57"><name pos:start="2661:52" pos:end="2661:57">cpu_V0</name></expr></argument>, <argument pos:start="2661:60" pos:end="2661:65"><expr pos:start="2661:60" pos:end="2661:65"><name pos:start="2661:60" pos:end="2661:65">cpu_V1</name></expr></argument>, <argument pos:start="2661:68" pos:end="2661:71"><expr pos:start="2661:68" pos:end="2661:71"><name pos:start="2661:68" pos:end="2661:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2663:29" pos:end="2663:34">break;</break>

                        <case pos:start="2665:25" pos:end="2665:32">case <expr pos:start="2665:30" pos:end="2665:31"><literal type="number" pos:start="2665:30" pos:end="2665:31">10</literal></expr>:</case>

                            <comment type="block" pos:start="2667:29" pos:end="2667:39">/* no-op */</comment>

                            <break pos:start="2669:29" pos:end="2669:34">break;</break>

                        <case pos:start="2671:25" pos:end="2671:32">case <expr pos:start="2671:30" pos:end="2671:31"><literal type="number" pos:start="2671:30" pos:end="2671:31">11</literal></expr>:</case>

                            <expr_stmt pos:start="2673:29" pos:end="2673:73"><expr pos:start="2673:29" pos:end="2673:72"><call pos:start="2673:29" pos:end="2673:72"><name pos:start="2673:29" pos:end="2673:50">gen_neon_addl_saturate</name><argument_list pos:start="2673:51" pos:end="2673:72">(<argument pos:start="2673:52" pos:end="2673:57"><expr pos:start="2673:52" pos:end="2673:57"><name pos:start="2673:52" pos:end="2673:57">cpu_V0</name></expr></argument>, <argument pos:start="2673:60" pos:end="2673:65"><expr pos:start="2673:60" pos:end="2673:65"><name pos:start="2673:60" pos:end="2673:65">cpu_V0</name></expr></argument>, <argument pos:start="2673:68" pos:end="2673:71"><expr pos:start="2673:68" pos:end="2673:71"><name pos:start="2673:68" pos:end="2673:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2675:29" pos:end="2675:34">break;</break>

                        <default pos:start="2677:25" pos:end="2677:32">default:</default>

                            <expr_stmt pos:start="2679:29" pos:end="2679:36"><expr pos:start="2679:29" pos:end="2679:35"><call pos:start="2679:29" pos:end="2679:35"><name pos:start="2679:29" pos:end="2679:33">abort</name><argument_list pos:start="2679:34" pos:end="2679:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2683:25" pos:end="2683:60"><expr pos:start="2683:25" pos:end="2683:59"><call pos:start="2683:25" pos:end="2683:59"><name pos:start="2683:25" pos:end="2683:40">neon_store_reg64</name><argument_list pos:start="2683:41" pos:end="2683:59">(<argument pos:start="2683:42" pos:end="2683:47"><expr pos:start="2683:42" pos:end="2683:47"><name pos:start="2683:42" pos:end="2683:47">cpu_V0</name></expr></argument>, <argument pos:start="2683:50" pos:end="2683:58"><expr pos:start="2683:50" pos:end="2683:58"><name pos:start="2683:50" pos:end="2683:51">rd</name> <operator pos:start="2683:53" pos:end="2683:53">+</operator> <name pos:start="2683:55" pos:end="2683:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>





                    <break pos:start="2691:21" pos:end="2691:26">break;</break>

                <default pos:start="2693:17" pos:end="2693:24">default:</default> <comment type="block" pos:start="2693:26" pos:end="2693:53">/* 14 and 15 are RESERVED */</comment>

                    <return pos:start="2695:21" pos:end="2695:29">return <expr pos:start="2695:28" pos:end="2695:28"><literal type="number" pos:start="2695:28" pos:end="2695:28">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2701:11" pos:end="3983:9">else <block pos:start="2701:16" pos:end="3983:9">{<block_content pos:start="2703:13" pos:end="3981:13"> <comment type="block" pos:start="2701:18" pos:end="2701:32">/* size == 3 */</comment>

            <if_stmt pos:start="2703:13" pos:end="3981:13"><if pos:start="2703:13" pos:end="2813:13">if <condition pos:start="2703:16" pos:end="2703:19">(<expr pos:start="2703:17" pos:end="2703:18"><operator pos:start="2703:17" pos:end="2703:17">!</operator><name pos:start="2703:18" pos:end="2703:18">u</name></expr>)</condition> <block pos:start="2703:21" pos:end="2813:13">{<block_content pos:start="2707:17" pos:end="2811:17">

                <comment type="block" pos:start="2705:17" pos:end="2705:31">/* Extract.  */</comment>

                <expr_stmt pos:start="2707:17" pos:end="2707:40"><expr pos:start="2707:17" pos:end="2707:39"><name pos:start="2707:17" pos:end="2707:19">imm</name> <operator pos:start="2707:21" pos:end="2707:21">=</operator> <operator pos:start="2707:23" pos:end="2707:23">(</operator><name pos:start="2707:24" pos:end="2707:27">insn</name> <operator pos:start="2707:29" pos:end="2707:30">&gt;&gt;</operator> <literal type="number" pos:start="2707:32" pos:end="2707:32">8</literal><operator pos:start="2707:33" pos:end="2707:33">)</operator> <operator pos:start="2707:35" pos:end="2707:35">&amp;</operator> <literal type="number" pos:start="2707:37" pos:end="2707:39">0xf</literal></expr>;</expr_stmt>



                <if_stmt pos:start="2711:17" pos:end="2713:29"><if pos:start="2711:17" pos:end="2713:29">if <condition pos:start="2711:20" pos:end="2711:34">(<expr pos:start="2711:21" pos:end="2711:33"><name pos:start="2711:21" pos:end="2711:23">imm</name> <operator pos:start="2711:25" pos:end="2711:25">&gt;</operator> <literal type="number" pos:start="2711:27" pos:end="2711:27">7</literal> <operator pos:start="2711:29" pos:end="2711:30">&amp;&amp;</operator> <operator pos:start="2711:32" pos:end="2711:32">!</operator><name pos:start="2711:33" pos:end="2711:33">q</name></expr>)</condition><block type="pseudo" pos:start="2713:21" pos:end="2713:29"><block_content pos:start="2713:21" pos:end="2713:29">

                    <return pos:start="2713:21" pos:end="2713:29">return <expr pos:start="2713:28" pos:end="2713:28"><literal type="number" pos:start="2713:28" pos:end="2713:28">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="2717:17" pos:end="2721:17"><if pos:start="2717:17" pos:end="2721:17">if <condition pos:start="2717:20" pos:end="2717:46">(<expr pos:start="2717:21" pos:end="2717:45"><name pos:start="2717:21" pos:end="2717:21">q</name> <operator pos:start="2717:23" pos:end="2717:24">&amp;&amp;</operator> <operator pos:start="2717:26" pos:end="2717:26">(</operator><operator pos:start="2717:27" pos:end="2717:27">(</operator><name pos:start="2717:28" pos:end="2717:29">rd</name> <operator pos:start="2717:31" pos:end="2717:31">|</operator> <name pos:start="2717:33" pos:end="2717:34">rn</name> <operator pos:start="2717:36" pos:end="2717:36">|</operator> <name pos:start="2717:38" pos:end="2717:39">rm</name><operator pos:start="2717:40" pos:end="2717:40">)</operator> <operator pos:start="2717:42" pos:end="2717:42">&amp;</operator> <literal type="number" pos:start="2717:44" pos:end="2717:44">1</literal><operator pos:start="2717:45" pos:end="2717:45">)</operator></expr>)</condition> <block pos:start="2717:48" pos:end="2721:17">{<block_content pos:start="2719:21" pos:end="2719:29">

                    <return pos:start="2719:21" pos:end="2719:29">return <expr pos:start="2719:28" pos:end="2719:28"><literal type="number" pos:start="2719:28" pos:end="2719:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="2725:17" pos:end="2803:17"><if pos:start="2725:17" pos:end="2735:17">if <condition pos:start="2725:20" pos:end="2725:29">(<expr pos:start="2725:21" pos:end="2725:28"><name pos:start="2725:21" pos:end="2725:23">imm</name> <operator pos:start="2725:25" pos:end="2725:26">==</operator> <literal type="number" pos:start="2725:28" pos:end="2725:28">0</literal></expr>)</condition> <block pos:start="2725:31" pos:end="2735:17">{<block_content pos:start="2727:21" pos:end="2733:21">

                    <expr_stmt pos:start="2727:21" pos:end="2727:48"><expr pos:start="2727:21" pos:end="2727:47"><call pos:start="2727:21" pos:end="2727:47"><name pos:start="2727:21" pos:end="2727:35">neon_load_reg64</name><argument_list pos:start="2727:36" pos:end="2727:47">(<argument pos:start="2727:37" pos:end="2727:42"><expr pos:start="2727:37" pos:end="2727:42"><name pos:start="2727:37" pos:end="2727:42">cpu_V0</name></expr></argument>, <argument pos:start="2727:45" pos:end="2727:46"><expr pos:start="2727:45" pos:end="2727:46"><name pos:start="2727:45" pos:end="2727:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2729:21" pos:end="2733:21"><if pos:start="2729:21" pos:end="2733:21">if <condition pos:start="2729:24" pos:end="2729:26">(<expr pos:start="2729:25" pos:end="2729:25"><name pos:start="2729:25" pos:end="2729:25">q</name></expr>)</condition> <block pos:start="2729:28" pos:end="2733:21">{<block_content pos:start="2731:25" pos:end="2731:56">

                        <expr_stmt pos:start="2731:25" pos:end="2731:56"><expr pos:start="2731:25" pos:end="2731:55"><call pos:start="2731:25" pos:end="2731:55"><name pos:start="2731:25" pos:end="2731:39">neon_load_reg64</name><argument_list pos:start="2731:40" pos:end="2731:55">(<argument pos:start="2731:41" pos:end="2731:46"><expr pos:start="2731:41" pos:end="2731:46"><name pos:start="2731:41" pos:end="2731:46">cpu_V1</name></expr></argument>, <argument pos:start="2731:49" pos:end="2731:54"><expr pos:start="2731:49" pos:end="2731:54"><name pos:start="2731:49" pos:end="2731:50">rn</name> <operator pos:start="2731:52" pos:end="2731:52">+</operator> <literal type="number" pos:start="2731:54" pos:end="2731:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2735:19" pos:end="2745:17">else if <condition pos:start="2735:27" pos:end="2735:36">(<expr pos:start="2735:28" pos:end="2735:35"><name pos:start="2735:28" pos:end="2735:30">imm</name> <operator pos:start="2735:32" pos:end="2735:33">==</operator> <literal type="number" pos:start="2735:35" pos:end="2735:35">8</literal></expr>)</condition> <block pos:start="2735:38" pos:end="2745:17">{<block_content pos:start="2737:21" pos:end="2743:21">

                    <expr_stmt pos:start="2737:21" pos:end="2737:52"><expr pos:start="2737:21" pos:end="2737:51"><call pos:start="2737:21" pos:end="2737:51"><name pos:start="2737:21" pos:end="2737:35">neon_load_reg64</name><argument_list pos:start="2737:36" pos:end="2737:51">(<argument pos:start="2737:37" pos:end="2737:42"><expr pos:start="2737:37" pos:end="2737:42"><name pos:start="2737:37" pos:end="2737:42">cpu_V0</name></expr></argument>, <argument pos:start="2737:45" pos:end="2737:50"><expr pos:start="2737:45" pos:end="2737:50"><name pos:start="2737:45" pos:end="2737:46">rn</name> <operator pos:start="2737:48" pos:end="2737:48">+</operator> <literal type="number" pos:start="2737:50" pos:end="2737:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2739:21" pos:end="2743:21"><if pos:start="2739:21" pos:end="2743:21">if <condition pos:start="2739:24" pos:end="2739:26">(<expr pos:start="2739:25" pos:end="2739:25"><name pos:start="2739:25" pos:end="2739:25">q</name></expr>)</condition> <block pos:start="2739:28" pos:end="2743:21">{<block_content pos:start="2741:25" pos:end="2741:52">

                        <expr_stmt pos:start="2741:25" pos:end="2741:52"><expr pos:start="2741:25" pos:end="2741:51"><call pos:start="2741:25" pos:end="2741:51"><name pos:start="2741:25" pos:end="2741:39">neon_load_reg64</name><argument_list pos:start="2741:40" pos:end="2741:51">(<argument pos:start="2741:41" pos:end="2741:46"><expr pos:start="2741:41" pos:end="2741:46"><name pos:start="2741:41" pos:end="2741:46">cpu_V1</name></expr></argument>, <argument pos:start="2741:49" pos:end="2741:50"><expr pos:start="2741:49" pos:end="2741:50"><name pos:start="2741:49" pos:end="2741:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2745:19" pos:end="2789:17">else if <condition pos:start="2745:27" pos:end="2745:29">(<expr pos:start="2745:28" pos:end="2745:28"><name pos:start="2745:28" pos:end="2745:28">q</name></expr>)</condition> <block pos:start="2745:31" pos:end="2789:17">{<block_content pos:start="2747:21" pos:end="2787:45">

                    <expr_stmt pos:start="2747:21" pos:end="2747:47"><expr pos:start="2747:21" pos:end="2747:46"><name pos:start="2747:21" pos:end="2747:25">tmp64</name> <operator pos:start="2747:27" pos:end="2747:27">=</operator> <call pos:start="2747:29" pos:end="2747:46"><name pos:start="2747:29" pos:end="2747:44">tcg_temp_new_i64</name><argument_list pos:start="2747:45" pos:end="2747:46">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2749:21" pos:end="2761:21"><if pos:start="2749:21" pos:end="2755:21">if <condition pos:start="2749:24" pos:end="2749:32">(<expr pos:start="2749:25" pos:end="2749:31"><name pos:start="2749:25" pos:end="2749:27">imm</name> <operator pos:start="2749:29" pos:end="2749:29">&lt;</operator> <literal type="number" pos:start="2749:31" pos:end="2749:31">8</literal></expr>)</condition> <block pos:start="2749:34" pos:end="2755:21">{<block_content pos:start="2751:25" pos:end="2753:55">

                        <expr_stmt pos:start="2751:25" pos:end="2751:52"><expr pos:start="2751:25" pos:end="2751:51"><call pos:start="2751:25" pos:end="2751:51"><name pos:start="2751:25" pos:end="2751:39">neon_load_reg64</name><argument_list pos:start="2751:40" pos:end="2751:51">(<argument pos:start="2751:41" pos:end="2751:46"><expr pos:start="2751:41" pos:end="2751:46"><name pos:start="2751:41" pos:end="2751:46">cpu_V0</name></expr></argument>, <argument pos:start="2751:49" pos:end="2751:50"><expr pos:start="2751:49" pos:end="2751:50"><name pos:start="2751:49" pos:end="2751:50">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2753:25" pos:end="2753:55"><expr pos:start="2753:25" pos:end="2753:54"><call pos:start="2753:25" pos:end="2753:54"><name pos:start="2753:25" pos:end="2753:39">neon_load_reg64</name><argument_list pos:start="2753:40" pos:end="2753:54">(<argument pos:start="2753:41" pos:end="2753:45"><expr pos:start="2753:41" pos:end="2753:45"><name pos:start="2753:41" pos:end="2753:45">tmp64</name></expr></argument>, <argument pos:start="2753:48" pos:end="2753:53"><expr pos:start="2753:48" pos:end="2753:53"><name pos:start="2753:48" pos:end="2753:49">rn</name> <operator pos:start="2753:51" pos:end="2753:51">+</operator> <literal type="number" pos:start="2753:53" pos:end="2753:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2755:23" pos:end="2761:21">else <block pos:start="2755:28" pos:end="2761:21">{<block_content pos:start="2757:25" pos:end="2759:51">

                        <expr_stmt pos:start="2757:25" pos:end="2757:56"><expr pos:start="2757:25" pos:end="2757:55"><call pos:start="2757:25" pos:end="2757:55"><name pos:start="2757:25" pos:end="2757:39">neon_load_reg64</name><argument_list pos:start="2757:40" pos:end="2757:55">(<argument pos:start="2757:41" pos:end="2757:46"><expr pos:start="2757:41" pos:end="2757:46"><name pos:start="2757:41" pos:end="2757:46">cpu_V0</name></expr></argument>, <argument pos:start="2757:49" pos:end="2757:54"><expr pos:start="2757:49" pos:end="2757:54"><name pos:start="2757:49" pos:end="2757:50">rn</name> <operator pos:start="2757:52" pos:end="2757:52">+</operator> <literal type="number" pos:start="2757:54" pos:end="2757:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2759:25" pos:end="2759:51"><expr pos:start="2759:25" pos:end="2759:50"><call pos:start="2759:25" pos:end="2759:50"><name pos:start="2759:25" pos:end="2759:39">neon_load_reg64</name><argument_list pos:start="2759:40" pos:end="2759:50">(<argument pos:start="2759:41" pos:end="2759:45"><expr pos:start="2759:41" pos:end="2759:45"><name pos:start="2759:41" pos:end="2759:45">tmp64</name></expr></argument>, <argument pos:start="2759:48" pos:end="2759:49"><expr pos:start="2759:48" pos:end="2759:49"><name pos:start="2759:48" pos:end="2759:49">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2763:21" pos:end="2763:68"><expr pos:start="2763:21" pos:end="2763:67"><call pos:start="2763:21" pos:end="2763:67"><name pos:start="2763:21" pos:end="2763:36">tcg_gen_shri_i64</name><argument_list pos:start="2763:37" pos:end="2763:67">(<argument pos:start="2763:38" pos:end="2763:43"><expr pos:start="2763:38" pos:end="2763:43"><name pos:start="2763:38" pos:end="2763:43">cpu_V0</name></expr></argument>, <argument pos:start="2763:46" pos:end="2763:51"><expr pos:start="2763:46" pos:end="2763:51"><name pos:start="2763:46" pos:end="2763:51">cpu_V0</name></expr></argument>, <argument pos:start="2763:54" pos:end="2763:66"><expr pos:start="2763:54" pos:end="2763:66"><operator pos:start="2763:54" pos:end="2763:54">(</operator><name pos:start="2763:55" pos:end="2763:57">imm</name> <operator pos:start="2763:59" pos:end="2763:59">&amp;</operator> <literal type="number" pos:start="2763:61" pos:end="2763:61">7</literal><operator pos:start="2763:62" pos:end="2763:62">)</operator> <operator pos:start="2763:64" pos:end="2763:64">*</operator> <literal type="number" pos:start="2763:66" pos:end="2763:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2765:21" pos:end="2765:74"><expr pos:start="2765:21" pos:end="2765:73"><call pos:start="2765:21" pos:end="2765:73"><name pos:start="2765:21" pos:end="2765:36">tcg_gen_shli_i64</name><argument_list pos:start="2765:37" pos:end="2765:73">(<argument pos:start="2765:38" pos:end="2765:43"><expr pos:start="2765:38" pos:end="2765:43"><name pos:start="2765:38" pos:end="2765:43">cpu_V1</name></expr></argument>, <argument pos:start="2765:46" pos:end="2765:50"><expr pos:start="2765:46" pos:end="2765:50"><name pos:start="2765:46" pos:end="2765:50">tmp64</name></expr></argument>, <argument pos:start="2765:53" pos:end="2765:72"><expr pos:start="2765:53" pos:end="2765:72"><literal type="number" pos:start="2765:53" pos:end="2765:56">64</literal> <operator pos:start="2765:56" pos:end="2765:56">-</operator> <operator pos:start="2765:58" pos:end="2765:58">(</operator><operator pos:start="2765:59" pos:end="2765:59">(</operator><name pos:start="2765:60" pos:end="2765:62">imm</name> <operator pos:start="2765:64" pos:end="2765:64">&amp;</operator> <literal type="number" pos:start="2765:66" pos:end="2765:66">7</literal><operator pos:start="2765:67" pos:end="2765:67">)</operator> <operator pos:start="2765:69" pos:end="2765:69">*</operator> <literal type="number" pos:start="2765:71" pos:end="2765:71">8</literal><operator pos:start="2765:72" pos:end="2765:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2767:21" pos:end="2767:59"><expr pos:start="2767:21" pos:end="2767:58"><call pos:start="2767:21" pos:end="2767:58"><name pos:start="2767:21" pos:end="2767:34">tcg_gen_or_i64</name><argument_list pos:start="2767:35" pos:end="2767:58">(<argument pos:start="2767:36" pos:end="2767:41"><expr pos:start="2767:36" pos:end="2767:41"><name pos:start="2767:36" pos:end="2767:41">cpu_V0</name></expr></argument>, <argument pos:start="2767:44" pos:end="2767:49"><expr pos:start="2767:44" pos:end="2767:49"><name pos:start="2767:44" pos:end="2767:49">cpu_V0</name></expr></argument>, <argument pos:start="2767:52" pos:end="2767:57"><expr pos:start="2767:52" pos:end="2767:57"><name pos:start="2767:52" pos:end="2767:57">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2769:21" pos:end="2779:21"><if pos:start="2769:21" pos:end="2773:21">if <condition pos:start="2769:24" pos:end="2769:32">(<expr pos:start="2769:25" pos:end="2769:31"><name pos:start="2769:25" pos:end="2769:27">imm</name> <operator pos:start="2769:29" pos:end="2769:29">&lt;</operator> <literal type="number" pos:start="2769:31" pos:end="2769:31">8</literal></expr>)</condition> <block pos:start="2769:34" pos:end="2773:21">{<block_content pos:start="2771:25" pos:end="2771:52">

                        <expr_stmt pos:start="2771:25" pos:end="2771:52"><expr pos:start="2771:25" pos:end="2771:51"><call pos:start="2771:25" pos:end="2771:51"><name pos:start="2771:25" pos:end="2771:39">neon_load_reg64</name><argument_list pos:start="2771:40" pos:end="2771:51">(<argument pos:start="2771:41" pos:end="2771:46"><expr pos:start="2771:41" pos:end="2771:46"><name pos:start="2771:41" pos:end="2771:46">cpu_V1</name></expr></argument>, <argument pos:start="2771:49" pos:end="2771:50"><expr pos:start="2771:49" pos:end="2771:50"><name pos:start="2771:49" pos:end="2771:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2773:23" pos:end="2779:21">else <block pos:start="2773:28" pos:end="2779:21">{<block_content pos:start="2775:25" pos:end="2777:33">

                        <expr_stmt pos:start="2775:25" pos:end="2775:56"><expr pos:start="2775:25" pos:end="2775:55"><call pos:start="2775:25" pos:end="2775:55"><name pos:start="2775:25" pos:end="2775:39">neon_load_reg64</name><argument_list pos:start="2775:40" pos:end="2775:55">(<argument pos:start="2775:41" pos:end="2775:46"><expr pos:start="2775:41" pos:end="2775:46"><name pos:start="2775:41" pos:end="2775:46">cpu_V1</name></expr></argument>, <argument pos:start="2775:49" pos:end="2775:54"><expr pos:start="2775:49" pos:end="2775:54"><name pos:start="2775:49" pos:end="2775:50">rm</name> <operator pos:start="2775:52" pos:end="2775:52">+</operator> <literal type="number" pos:start="2775:54" pos:end="2775:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2777:25" pos:end="2777:33"><expr pos:start="2777:25" pos:end="2777:32"><name pos:start="2777:25" pos:end="2777:27">imm</name> <operator pos:start="2777:29" pos:end="2777:30">-=</operator> <literal type="number" pos:start="2777:32" pos:end="2777:32">8</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2781:21" pos:end="2781:69"><expr pos:start="2781:21" pos:end="2781:68"><call pos:start="2781:21" pos:end="2781:68"><name pos:start="2781:21" pos:end="2781:36">tcg_gen_shli_i64</name><argument_list pos:start="2781:37" pos:end="2781:68">(<argument pos:start="2781:38" pos:end="2781:43"><expr pos:start="2781:38" pos:end="2781:43"><name pos:start="2781:38" pos:end="2781:43">cpu_V1</name></expr></argument>, <argument pos:start="2781:46" pos:end="2781:51"><expr pos:start="2781:46" pos:end="2781:51"><name pos:start="2781:46" pos:end="2781:51">cpu_V1</name></expr></argument>, <argument pos:start="2781:54" pos:end="2781:67"><expr pos:start="2781:54" pos:end="2781:67"><literal type="number" pos:start="2781:54" pos:end="2781:57">64</literal> <operator pos:start="2781:57" pos:end="2781:57">-</operator> <operator pos:start="2781:59" pos:end="2781:59">(</operator><name pos:start="2781:60" pos:end="2781:62">imm</name> <operator pos:start="2781:64" pos:end="2781:64">*</operator> <literal type="number" pos:start="2781:66" pos:end="2781:66">8</literal><operator pos:start="2781:67" pos:end="2781:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2783:21" pos:end="2783:60"><expr pos:start="2783:21" pos:end="2783:59"><call pos:start="2783:21" pos:end="2783:59"><name pos:start="2783:21" pos:end="2783:36">tcg_gen_shri_i64</name><argument_list pos:start="2783:37" pos:end="2783:59">(<argument pos:start="2783:38" pos:end="2783:42"><expr pos:start="2783:38" pos:end="2783:42"><name pos:start="2783:38" pos:end="2783:42">tmp64</name></expr></argument>, <argument pos:start="2783:45" pos:end="2783:49"><expr pos:start="2783:45" pos:end="2783:49"><name pos:start="2783:45" pos:end="2783:49">tmp64</name></expr></argument>, <argument pos:start="2783:52" pos:end="2783:58"><expr pos:start="2783:52" pos:end="2783:58"><name pos:start="2783:52" pos:end="2783:54">imm</name> <operator pos:start="2783:56" pos:end="2783:56">*</operator> <literal type="number" pos:start="2783:58" pos:end="2783:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2785:21" pos:end="2785:58"><expr pos:start="2785:21" pos:end="2785:57"><call pos:start="2785:21" pos:end="2785:57"><name pos:start="2785:21" pos:end="2785:34">tcg_gen_or_i64</name><argument_list pos:start="2785:35" pos:end="2785:57">(<argument pos:start="2785:36" pos:end="2785:41"><expr pos:start="2785:36" pos:end="2785:41"><name pos:start="2785:36" pos:end="2785:41">cpu_V1</name></expr></argument>, <argument pos:start="2785:44" pos:end="2785:49"><expr pos:start="2785:44" pos:end="2785:49"><name pos:start="2785:44" pos:end="2785:49">cpu_V1</name></expr></argument>, <argument pos:start="2785:52" pos:end="2785:56"><expr pos:start="2785:52" pos:end="2785:56"><name pos:start="2785:52" pos:end="2785:56">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2787:21" pos:end="2787:45"><expr pos:start="2787:21" pos:end="2787:44"><call pos:start="2787:21" pos:end="2787:44"><name pos:start="2787:21" pos:end="2787:37">tcg_temp_free_i64</name><argument_list pos:start="2787:38" pos:end="2787:44">(<argument pos:start="2787:39" pos:end="2787:43"><expr pos:start="2787:39" pos:end="2787:43"><name pos:start="2787:39" pos:end="2787:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2789:19" pos:end="2803:17">else <block pos:start="2789:24" pos:end="2803:17">{<block_content pos:start="2793:21" pos:end="2801:59">

                    <comment type="block" pos:start="2791:21" pos:end="2791:32">/* BUGFIX */</comment>

                    <expr_stmt pos:start="2793:21" pos:end="2793:48"><expr pos:start="2793:21" pos:end="2793:47"><call pos:start="2793:21" pos:end="2793:47"><name pos:start="2793:21" pos:end="2793:35">neon_load_reg64</name><argument_list pos:start="2793:36" pos:end="2793:47">(<argument pos:start="2793:37" pos:end="2793:42"><expr pos:start="2793:37" pos:end="2793:42"><name pos:start="2793:37" pos:end="2793:42">cpu_V0</name></expr></argument>, <argument pos:start="2793:45" pos:end="2793:46"><expr pos:start="2793:45" pos:end="2793:46"><name pos:start="2793:45" pos:end="2793:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2795:21" pos:end="2795:62"><expr pos:start="2795:21" pos:end="2795:61"><call pos:start="2795:21" pos:end="2795:61"><name pos:start="2795:21" pos:end="2795:36">tcg_gen_shri_i64</name><argument_list pos:start="2795:37" pos:end="2795:61">(<argument pos:start="2795:38" pos:end="2795:43"><expr pos:start="2795:38" pos:end="2795:43"><name pos:start="2795:38" pos:end="2795:43">cpu_V0</name></expr></argument>, <argument pos:start="2795:46" pos:end="2795:51"><expr pos:start="2795:46" pos:end="2795:51"><name pos:start="2795:46" pos:end="2795:51">cpu_V0</name></expr></argument>, <argument pos:start="2795:54" pos:end="2795:60"><expr pos:start="2795:54" pos:end="2795:60"><name pos:start="2795:54" pos:end="2795:56">imm</name> <operator pos:start="2795:58" pos:end="2795:58">*</operator> <literal type="number" pos:start="2795:60" pos:end="2795:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2797:21" pos:end="2797:48"><expr pos:start="2797:21" pos:end="2797:47"><call pos:start="2797:21" pos:end="2797:47"><name pos:start="2797:21" pos:end="2797:35">neon_load_reg64</name><argument_list pos:start="2797:36" pos:end="2797:47">(<argument pos:start="2797:37" pos:end="2797:42"><expr pos:start="2797:37" pos:end="2797:42"><name pos:start="2797:37" pos:end="2797:42">cpu_V1</name></expr></argument>, <argument pos:start="2797:45" pos:end="2797:46"><expr pos:start="2797:45" pos:end="2797:46"><name pos:start="2797:45" pos:end="2797:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2799:21" pos:end="2799:69"><expr pos:start="2799:21" pos:end="2799:68"><call pos:start="2799:21" pos:end="2799:68"><name pos:start="2799:21" pos:end="2799:36">tcg_gen_shli_i64</name><argument_list pos:start="2799:37" pos:end="2799:68">(<argument pos:start="2799:38" pos:end="2799:43"><expr pos:start="2799:38" pos:end="2799:43"><name pos:start="2799:38" pos:end="2799:43">cpu_V1</name></expr></argument>, <argument pos:start="2799:46" pos:end="2799:51"><expr pos:start="2799:46" pos:end="2799:51"><name pos:start="2799:46" pos:end="2799:51">cpu_V1</name></expr></argument>, <argument pos:start="2799:54" pos:end="2799:67"><expr pos:start="2799:54" pos:end="2799:67"><literal type="number" pos:start="2799:54" pos:end="2799:57">64</literal> <operator pos:start="2799:57" pos:end="2799:57">-</operator> <operator pos:start="2799:59" pos:end="2799:59">(</operator><name pos:start="2799:60" pos:end="2799:62">imm</name> <operator pos:start="2799:64" pos:end="2799:64">*</operator> <literal type="number" pos:start="2799:66" pos:end="2799:66">8</literal><operator pos:start="2799:67" pos:end="2799:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2801:21" pos:end="2801:59"><expr pos:start="2801:21" pos:end="2801:58"><call pos:start="2801:21" pos:end="2801:58"><name pos:start="2801:21" pos:end="2801:34">tcg_gen_or_i64</name><argument_list pos:start="2801:35" pos:end="2801:58">(<argument pos:start="2801:36" pos:end="2801:41"><expr pos:start="2801:36" pos:end="2801:41"><name pos:start="2801:36" pos:end="2801:41">cpu_V0</name></expr></argument>, <argument pos:start="2801:44" pos:end="2801:49"><expr pos:start="2801:44" pos:end="2801:49"><name pos:start="2801:44" pos:end="2801:49">cpu_V0</name></expr></argument>, <argument pos:start="2801:52" pos:end="2801:57"><expr pos:start="2801:52" pos:end="2801:57"><name pos:start="2801:52" pos:end="2801:57">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2805:17" pos:end="2805:45"><expr pos:start="2805:17" pos:end="2805:44"><call pos:start="2805:17" pos:end="2805:44"><name pos:start="2805:17" pos:end="2805:32">neon_store_reg64</name><argument_list pos:start="2805:33" pos:end="2805:44">(<argument pos:start="2805:34" pos:end="2805:39"><expr pos:start="2805:34" pos:end="2805:39"><name pos:start="2805:34" pos:end="2805:39">cpu_V0</name></expr></argument>, <argument pos:start="2805:42" pos:end="2805:43"><expr pos:start="2805:42" pos:end="2805:43"><name pos:start="2805:42" pos:end="2805:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2807:17" pos:end="2811:17"><if pos:start="2807:17" pos:end="2811:17">if <condition pos:start="2807:20" pos:end="2807:22">(<expr pos:start="2807:21" pos:end="2807:21"><name pos:start="2807:21" pos:end="2807:21">q</name></expr>)</condition> <block pos:start="2807:24" pos:end="2811:17">{<block_content pos:start="2809:21" pos:end="2809:53">

                    <expr_stmt pos:start="2809:21" pos:end="2809:53"><expr pos:start="2809:21" pos:end="2809:52"><call pos:start="2809:21" pos:end="2809:52"><name pos:start="2809:21" pos:end="2809:36">neon_store_reg64</name><argument_list pos:start="2809:37" pos:end="2809:52">(<argument pos:start="2809:38" pos:end="2809:43"><expr pos:start="2809:38" pos:end="2809:43"><name pos:start="2809:38" pos:end="2809:43">cpu_V1</name></expr></argument>, <argument pos:start="2809:46" pos:end="2809:51"><expr pos:start="2809:46" pos:end="2809:51"><name pos:start="2809:46" pos:end="2809:47">rd</name> <operator pos:start="2809:49" pos:end="2809:49">+</operator> <literal type="number" pos:start="2809:51" pos:end="2809:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="2813:15" pos:end="3861:13">else if <condition pos:start="2813:23" pos:end="2813:47">(<expr pos:start="2813:24" pos:end="2813:46"><operator pos:start="2813:24" pos:end="2813:24">(</operator><name pos:start="2813:25" pos:end="2813:28">insn</name> <operator pos:start="2813:30" pos:end="2813:30">&amp;</operator> <operator pos:start="2813:32" pos:end="2813:32">(</operator><literal type="number" pos:start="2813:33" pos:end="2813:33">1</literal> <operator pos:start="2813:35" pos:end="2813:36">&lt;&lt;</operator> <literal type="number" pos:start="2813:38" pos:end="2813:39">11</literal><operator pos:start="2813:40" pos:end="2813:40">)</operator><operator pos:start="2813:41" pos:end="2813:41">)</operator> <operator pos:start="2813:43" pos:end="2813:44">==</operator> <literal type="number" pos:start="2813:46" pos:end="2813:46">0</literal></expr>)</condition> <block pos:start="2813:49" pos:end="3861:13">{<block_content pos:start="2817:17" pos:end="3859:17">

                <comment type="block" pos:start="2815:17" pos:end="2815:41">/* Two register misc.  */</comment>

                <expr_stmt pos:start="2817:17" pos:end="2817:65"><expr pos:start="2817:17" pos:end="2817:64"><name pos:start="2817:17" pos:end="2817:18">op</name> <operator pos:start="2817:20" pos:end="2817:20">=</operator> <operator pos:start="2817:22" pos:end="2817:22">(</operator><operator pos:start="2817:23" pos:end="2817:23">(</operator><name pos:start="2817:24" pos:end="2817:27">insn</name> <operator pos:start="2817:29" pos:end="2817:30">&gt;&gt;</operator> <literal type="number" pos:start="2817:32" pos:end="2817:33">12</literal><operator pos:start="2817:34" pos:end="2817:34">)</operator> <operator pos:start="2817:36" pos:end="2817:36">&amp;</operator> <literal type="number" pos:start="2817:38" pos:end="2817:41">0x30</literal><operator pos:start="2817:42" pos:end="2817:42">)</operator> <operator pos:start="2817:44" pos:end="2817:44">|</operator> <operator pos:start="2817:46" pos:end="2817:46">(</operator><operator pos:start="2817:47" pos:end="2817:47">(</operator><name pos:start="2817:48" pos:end="2817:51">insn</name> <operator pos:start="2817:53" pos:end="2817:54">&gt;&gt;</operator> <literal type="number" pos:start="2817:56" pos:end="2817:56">7</literal><operator pos:start="2817:57" pos:end="2817:57">)</operator> <operator pos:start="2817:59" pos:end="2817:59">&amp;</operator> <literal type="number" pos:start="2817:61" pos:end="2817:63">0xf</literal><operator pos:start="2817:64" pos:end="2817:64">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2819:17" pos:end="2819:40"><expr pos:start="2819:17" pos:end="2819:39"><name pos:start="2819:17" pos:end="2819:20">size</name> <operator pos:start="2819:22" pos:end="2819:22">=</operator> <operator pos:start="2819:24" pos:end="2819:24">(</operator><name pos:start="2819:25" pos:end="2819:28">insn</name> <operator pos:start="2819:30" pos:end="2819:31">&gt;&gt;</operator> <literal type="number" pos:start="2819:33" pos:end="2819:34">18</literal><operator pos:start="2819:35" pos:end="2819:35">)</operator> <operator pos:start="2819:37" pos:end="2819:37">&amp;</operator> <literal type="number" pos:start="2819:39" pos:end="2819:39">3</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="2821:17" pos:end="2821:78">/* UNDEF for unknown op values and bad op-size combinations */</comment>

                <if_stmt pos:start="2823:17" pos:end="2827:17"><if pos:start="2823:17" pos:end="2827:17">if <condition pos:start="2823:20" pos:end="2823:60">(<expr pos:start="2823:21" pos:end="2823:59"><operator pos:start="2823:21" pos:end="2823:21">(</operator><name pos:start="2823:22" pos:end="2823:39"><name pos:start="2823:22" pos:end="2823:35">neon_2rm_sizes</name><index pos:start="2823:36" pos:end="2823:39">[<expr pos:start="2823:37" pos:end="2823:38"><name pos:start="2823:37" pos:end="2823:38">op</name></expr>]</index></name> <operator pos:start="2823:41" pos:end="2823:41">&amp;</operator> <operator pos:start="2823:43" pos:end="2823:43">(</operator><literal type="number" pos:start="2823:44" pos:end="2823:44">1</literal> <operator pos:start="2823:46" pos:end="2823:47">&lt;&lt;</operator> <name pos:start="2823:49" pos:end="2823:52">size</name><operator pos:start="2823:53" pos:end="2823:53">)</operator><operator pos:start="2823:54" pos:end="2823:54">)</operator> <operator pos:start="2823:56" pos:end="2823:57">==</operator> <literal type="number" pos:start="2823:59" pos:end="2823:59">0</literal></expr>)</condition> <block pos:start="2823:62" pos:end="2827:17">{<block_content pos:start="2825:21" pos:end="2825:29">

                    <return pos:start="2825:21" pos:end="2825:29">return <expr pos:start="2825:28" pos:end="2825:28"><literal type="number" pos:start="2825:28" pos:end="2825:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2829:17" pos:end="2835:17"><if pos:start="2829:17" pos:end="2835:17">if <condition pos:start="2829:20" pos:end="2831:41">(<expr pos:start="2829:21" pos:end="2831:40"><operator pos:start="2829:21" pos:end="2829:21">(</operator><name pos:start="2829:22" pos:end="2829:23">op</name> <operator pos:start="2829:25" pos:end="2829:26">!=</operator> <name pos:start="2829:28" pos:end="2829:41">NEON_2RM_VMOVN</name> <operator pos:start="2829:43" pos:end="2829:44">&amp;&amp;</operator> <name pos:start="2829:46" pos:end="2829:47">op</name> <operator pos:start="2829:49" pos:end="2829:50">!=</operator> <name pos:start="2829:52" pos:end="2829:66">NEON_2RM_VQMOVN</name><operator pos:start="2829:67" pos:end="2829:67">)</operator> <operator pos:start="2829:69" pos:end="2829:70">&amp;&amp;</operator>

                    <name pos:start="2831:21" pos:end="2831:21">q</name> <operator pos:start="2831:23" pos:end="2831:24">&amp;&amp;</operator> <operator pos:start="2831:26" pos:end="2831:26">(</operator><operator pos:start="2831:27" pos:end="2831:27">(</operator><name pos:start="2831:28" pos:end="2831:29">rm</name> <operator pos:start="2831:31" pos:end="2831:31">|</operator> <name pos:start="2831:33" pos:end="2831:34">rd</name><operator pos:start="2831:35" pos:end="2831:35">)</operator> <operator pos:start="2831:37" pos:end="2831:37">&amp;</operator> <literal type="number" pos:start="2831:39" pos:end="2831:39">1</literal><operator pos:start="2831:40" pos:end="2831:40">)</operator></expr>)</condition> <block pos:start="2831:43" pos:end="2835:17">{<block_content pos:start="2833:21" pos:end="2833:29">

                    <return pos:start="2833:21" pos:end="2833:29">return <expr pos:start="2833:28" pos:end="2833:28"><literal type="number" pos:start="2833:28" pos:end="2833:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="2837:17" pos:end="3859:17">switch <condition pos:start="2837:24" pos:end="2837:27">(<expr pos:start="2837:25" pos:end="2837:26"><name pos:start="2837:25" pos:end="2837:26">op</name></expr>)</condition> <block pos:start="2837:29" pos:end="3859:17">{<block_content pos:start="2839:17" pos:end="3857:26">

                <case pos:start="2839:17" pos:end="2839:37">case <expr pos:start="2839:22" pos:end="2839:36"><name pos:start="2839:22" pos:end="2839:36">NEON_2RM_VREV64</name></expr>:</case>

                    <for pos:start="2841:21" pos:end="2881:21">for <control pos:start="2841:25" pos:end="2841:62">(<init pos:start="2841:26" pos:end="2841:34"><expr pos:start="2841:26" pos:end="2841:33"><name pos:start="2841:26" pos:end="2841:29">pass</name> <operator pos:start="2841:31" pos:end="2841:31">=</operator> <literal type="number" pos:start="2841:33" pos:end="2841:33">0</literal></expr>;</init> <condition pos:start="2841:36" pos:end="2841:54"><expr pos:start="2841:36" pos:end="2841:53"><name pos:start="2841:36" pos:end="2841:39">pass</name> <operator pos:start="2841:41" pos:end="2841:41">&lt;</operator> <operator pos:start="2841:43" pos:end="2841:43">(</operator><ternary pos:start="2841:44" pos:end="2841:52"><condition pos:start="2841:44" pos:end="2841:46"><expr pos:start="2841:44" pos:end="2841:44"><name pos:start="2841:44" pos:end="2841:44">q</name></expr> ?</condition><then pos:start="2841:48" pos:end="2841:48"> <expr pos:start="2841:48" pos:end="2841:48"><literal type="number" pos:start="2841:48" pos:end="2841:48">2</literal></expr> </then><else pos:start="2841:50" pos:end="2841:52">: <expr pos:start="2841:52" pos:end="2841:52"><literal type="number" pos:start="2841:52" pos:end="2841:52">1</literal></expr></else></ternary><operator pos:start="2841:53" pos:end="2841:53">)</operator></expr>;</condition> <incr pos:start="2841:56" pos:end="2841:61"><expr pos:start="2841:56" pos:end="2841:61"><name pos:start="2841:56" pos:end="2841:59">pass</name><operator pos:start="2841:60" pos:end="2841:61">++</operator></expr></incr>)</control> <block pos:start="2841:64" pos:end="2881:21">{<block_content pos:start="2843:25" pos:end="2879:25">

                        <expr_stmt pos:start="2843:25" pos:end="2843:58"><expr pos:start="2843:25" pos:end="2843:57"><name pos:start="2843:25" pos:end="2843:27">tmp</name> <operator pos:start="2843:29" pos:end="2843:29">=</operator> <call pos:start="2843:31" pos:end="2843:57"><name pos:start="2843:31" pos:end="2843:43">neon_load_reg</name><argument_list pos:start="2843:44" pos:end="2843:57">(<argument pos:start="2843:45" pos:end="2843:46"><expr pos:start="2843:45" pos:end="2843:46"><name pos:start="2843:45" pos:end="2843:46">rm</name></expr></argument>, <argument pos:start="2843:49" pos:end="2843:56"><expr pos:start="2843:49" pos:end="2843:56"><name pos:start="2843:49" pos:end="2843:52">pass</name> <operator pos:start="2843:54" pos:end="2843:54">*</operator> <literal type="number" pos:start="2843:56" pos:end="2843:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2845:25" pos:end="2845:63"><expr pos:start="2845:25" pos:end="2845:62"><name pos:start="2845:25" pos:end="2845:28">tmp2</name> <operator pos:start="2845:30" pos:end="2845:30">=</operator> <call pos:start="2845:32" pos:end="2845:62"><name pos:start="2845:32" pos:end="2845:44">neon_load_reg</name><argument_list pos:start="2845:45" pos:end="2845:62">(<argument pos:start="2845:46" pos:end="2845:47"><expr pos:start="2845:46" pos:end="2845:47"><name pos:start="2845:46" pos:end="2845:47">rm</name></expr></argument>, <argument pos:start="2845:50" pos:end="2845:61"><expr pos:start="2845:50" pos:end="2845:61"><name pos:start="2845:50" pos:end="2845:53">pass</name> <operator pos:start="2845:55" pos:end="2845:55">*</operator> <literal type="number" pos:start="2845:57" pos:end="2845:59">2</literal> <operator pos:start="2845:59" pos:end="2845:59">+</operator> <literal type="number" pos:start="2845:61" pos:end="2845:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2847:25" pos:end="2857:25">switch <condition pos:start="2847:32" pos:end="2847:37">(<expr pos:start="2847:33" pos:end="2847:36"><name pos:start="2847:33" pos:end="2847:36">size</name></expr>)</condition> <block pos:start="2847:39" pos:end="2857:25">{<block_content pos:start="2849:25" pos:end="2855:41">

                        <case pos:start="2849:25" pos:end="2849:31">case <expr pos:start="2849:30" pos:end="2849:30"><literal type="number" pos:start="2849:30" pos:end="2849:30">0</literal></expr>:</case> <expr_stmt pos:start="2849:33" pos:end="2849:62"><expr pos:start="2849:33" pos:end="2849:61"><call pos:start="2849:33" pos:end="2849:61"><name pos:start="2849:33" pos:end="2849:51">tcg_gen_bswap32_i32</name><argument_list pos:start="2849:52" pos:end="2849:61">(<argument pos:start="2849:53" pos:end="2849:55"><expr pos:start="2849:53" pos:end="2849:55"><name pos:start="2849:53" pos:end="2849:55">tmp</name></expr></argument>, <argument pos:start="2849:58" pos:end="2849:60"><expr pos:start="2849:58" pos:end="2849:60"><name pos:start="2849:58" pos:end="2849:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2849:64" pos:end="2849:69">break;</break>

                        <case pos:start="2851:25" pos:end="2851:31">case <expr pos:start="2851:30" pos:end="2851:30"><literal type="number" pos:start="2851:30" pos:end="2851:30">1</literal></expr>:</case> <expr_stmt pos:start="2851:33" pos:end="2851:51"><expr pos:start="2851:33" pos:end="2851:50"><call pos:start="2851:33" pos:end="2851:50"><name pos:start="2851:33" pos:end="2851:45">gen_swap_half</name><argument_list pos:start="2851:46" pos:end="2851:50">(<argument pos:start="2851:47" pos:end="2851:49"><expr pos:start="2851:47" pos:end="2851:49"><name pos:start="2851:47" pos:end="2851:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2851:53" pos:end="2851:58">break;</break>

                        <case pos:start="2853:25" pos:end="2853:31">case <expr pos:start="2853:30" pos:end="2853:30"><literal type="number" pos:start="2853:30" pos:end="2853:30">2</literal></expr>:</case> <comment type="block" pos:start="2853:33" pos:end="2853:43">/* no-op */</comment> <break pos:start="2853:45" pos:end="2853:50">break;</break>

                        <default pos:start="2855:25" pos:end="2855:32">default:</default> <expr_stmt pos:start="2855:34" pos:end="2855:41"><expr pos:start="2855:34" pos:end="2855:40"><call pos:start="2855:34" pos:end="2855:40"><name pos:start="2855:34" pos:end="2855:38">abort</name><argument_list pos:start="2855:39" pos:end="2855:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2859:25" pos:end="2859:62"><expr pos:start="2859:25" pos:end="2859:61"><call pos:start="2859:25" pos:end="2859:61"><name pos:start="2859:25" pos:end="2859:38">neon_store_reg</name><argument_list pos:start="2859:39" pos:end="2859:61">(<argument pos:start="2859:40" pos:end="2859:41"><expr pos:start="2859:40" pos:end="2859:41"><name pos:start="2859:40" pos:end="2859:41">rd</name></expr></argument>, <argument pos:start="2859:44" pos:end="2859:55"><expr pos:start="2859:44" pos:end="2859:55"><name pos:start="2859:44" pos:end="2859:47">pass</name> <operator pos:start="2859:49" pos:end="2859:49">*</operator> <literal type="number" pos:start="2859:51" pos:end="2859:53">2</literal> <operator pos:start="2859:53" pos:end="2859:53">+</operator> <literal type="number" pos:start="2859:55" pos:end="2859:55">1</literal></expr></argument>, <argument pos:start="2859:58" pos:end="2859:60"><expr pos:start="2859:58" pos:end="2859:60"><name pos:start="2859:58" pos:end="2859:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2861:25" pos:end="2879:25"><if pos:start="2861:25" pos:end="2865:25">if <condition pos:start="2861:28" pos:end="2861:38">(<expr pos:start="2861:29" pos:end="2861:37"><name pos:start="2861:29" pos:end="2861:32">size</name> <operator pos:start="2861:34" pos:end="2861:35">==</operator> <literal type="number" pos:start="2861:37" pos:end="2861:37">2</literal></expr>)</condition> <block pos:start="2861:40" pos:end="2865:25">{<block_content pos:start="2863:29" pos:end="2863:63">

                            <expr_stmt pos:start="2863:29" pos:end="2863:63"><expr pos:start="2863:29" pos:end="2863:62"><call pos:start="2863:29" pos:end="2863:62"><name pos:start="2863:29" pos:end="2863:42">neon_store_reg</name><argument_list pos:start="2863:43" pos:end="2863:62">(<argument pos:start="2863:44" pos:end="2863:45"><expr pos:start="2863:44" pos:end="2863:45"><name pos:start="2863:44" pos:end="2863:45">rd</name></expr></argument>, <argument pos:start="2863:48" pos:end="2863:55"><expr pos:start="2863:48" pos:end="2863:55"><name pos:start="2863:48" pos:end="2863:51">pass</name> <operator pos:start="2863:53" pos:end="2863:53">*</operator> <literal type="number" pos:start="2863:55" pos:end="2863:55">2</literal></expr></argument>, <argument pos:start="2863:58" pos:end="2863:61"><expr pos:start="2863:58" pos:end="2863:61"><name pos:start="2863:58" pos:end="2863:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2865:27" pos:end="2879:25">else <block pos:start="2865:32" pos:end="2879:25">{<block_content pos:start="2867:29" pos:end="2877:63">

                            <switch pos:start="2867:29" pos:end="2875:29">switch <condition pos:start="2867:36" pos:end="2867:41">(<expr pos:start="2867:37" pos:end="2867:40"><name pos:start="2867:37" pos:end="2867:40">size</name></expr>)</condition> <block pos:start="2867:43" pos:end="2875:29">{<block_content pos:start="2869:29" pos:end="2873:45">

                            <case pos:start="2869:29" pos:end="2869:35">case <expr pos:start="2869:34" pos:end="2869:34"><literal type="number" pos:start="2869:34" pos:end="2869:34">0</literal></expr>:</case> <expr_stmt pos:start="2869:37" pos:end="2869:68"><expr pos:start="2869:37" pos:end="2869:67"><call pos:start="2869:37" pos:end="2869:67"><name pos:start="2869:37" pos:end="2869:55">tcg_gen_bswap32_i32</name><argument_list pos:start="2869:56" pos:end="2869:67">(<argument pos:start="2869:57" pos:end="2869:60"><expr pos:start="2869:57" pos:end="2869:60"><name pos:start="2869:57" pos:end="2869:60">tmp2</name></expr></argument>, <argument pos:start="2869:63" pos:end="2869:66"><expr pos:start="2869:63" pos:end="2869:66"><name pos:start="2869:63" pos:end="2869:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2869:70" pos:end="2869:75">break;</break>

                            <case pos:start="2871:29" pos:end="2871:35">case <expr pos:start="2871:34" pos:end="2871:34"><literal type="number" pos:start="2871:34" pos:end="2871:34">1</literal></expr>:</case> <expr_stmt pos:start="2871:37" pos:end="2871:56"><expr pos:start="2871:37" pos:end="2871:55"><call pos:start="2871:37" pos:end="2871:55"><name pos:start="2871:37" pos:end="2871:49">gen_swap_half</name><argument_list pos:start="2871:50" pos:end="2871:55">(<argument pos:start="2871:51" pos:end="2871:54"><expr pos:start="2871:51" pos:end="2871:54"><name pos:start="2871:51" pos:end="2871:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2871:58" pos:end="2871:63">break;</break>

                            <default pos:start="2873:29" pos:end="2873:36">default:</default> <expr_stmt pos:start="2873:38" pos:end="2873:45"><expr pos:start="2873:38" pos:end="2873:44"><call pos:start="2873:38" pos:end="2873:44"><name pos:start="2873:38" pos:end="2873:42">abort</name><argument_list pos:start="2873:43" pos:end="2873:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2877:29" pos:end="2877:63"><expr pos:start="2877:29" pos:end="2877:62"><call pos:start="2877:29" pos:end="2877:62"><name pos:start="2877:29" pos:end="2877:42">neon_store_reg</name><argument_list pos:start="2877:43" pos:end="2877:62">(<argument pos:start="2877:44" pos:end="2877:45"><expr pos:start="2877:44" pos:end="2877:45"><name pos:start="2877:44" pos:end="2877:45">rd</name></expr></argument>, <argument pos:start="2877:48" pos:end="2877:55"><expr pos:start="2877:48" pos:end="2877:55"><name pos:start="2877:48" pos:end="2877:51">pass</name> <operator pos:start="2877:53" pos:end="2877:53">*</operator> <literal type="number" pos:start="2877:55" pos:end="2877:55">2</literal></expr></argument>, <argument pos:start="2877:58" pos:end="2877:61"><expr pos:start="2877:58" pos:end="2877:61"><name pos:start="2877:58" pos:end="2877:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2883:21" pos:end="2883:26">break;</break>

                <case pos:start="2885:17" pos:end="2885:37">case <expr pos:start="2885:22" pos:end="2885:36"><name pos:start="2885:22" pos:end="2885:36">NEON_2RM_VPADDL</name></expr>:</case> <case pos:start="2885:39" pos:end="2885:61">case <expr pos:start="2885:44" pos:end="2885:60"><name pos:start="2885:44" pos:end="2885:60">NEON_2RM_VPADDL_U</name></expr>:</case>

                <case pos:start="2887:17" pos:end="2887:37">case <expr pos:start="2887:22" pos:end="2887:36"><name pos:start="2887:22" pos:end="2887:36">NEON_2RM_VPADAL</name></expr>:</case> <case pos:start="2887:39" pos:end="2887:61">case <expr pos:start="2887:44" pos:end="2887:60"><name pos:start="2887:44" pos:end="2887:60">NEON_2RM_VPADAL_U</name></expr>:</case>

                    <for pos:start="2889:21" pos:end="2923:21">for <control pos:start="2889:25" pos:end="2889:56">(<init pos:start="2889:26" pos:end="2889:34"><expr pos:start="2889:26" pos:end="2889:33"><name pos:start="2889:26" pos:end="2889:29">pass</name> <operator pos:start="2889:31" pos:end="2889:31">=</operator> <literal type="number" pos:start="2889:33" pos:end="2889:33">0</literal></expr>;</init> <condition pos:start="2889:36" pos:end="2889:48"><expr pos:start="2889:36" pos:end="2889:47"><name pos:start="2889:36" pos:end="2889:39">pass</name> <operator pos:start="2889:41" pos:end="2889:41">&lt;</operator> <name pos:start="2889:43" pos:end="2889:43">q</name> <operator pos:start="2889:45" pos:end="2889:45">+</operator> <literal type="number" pos:start="2889:47" pos:end="2889:47">1</literal></expr>;</condition> <incr pos:start="2889:50" pos:end="2889:55"><expr pos:start="2889:50" pos:end="2889:55"><name pos:start="2889:50" pos:end="2889:53">pass</name><operator pos:start="2889:54" pos:end="2889:55">++</operator></expr></incr>)</control> <block pos:start="2889:58" pos:end="2923:21">{<block_content pos:start="2891:25" pos:end="2921:60">

                        <expr_stmt pos:start="2891:25" pos:end="2891:58"><expr pos:start="2891:25" pos:end="2891:57"><name pos:start="2891:25" pos:end="2891:27">tmp</name> <operator pos:start="2891:29" pos:end="2891:29">=</operator> <call pos:start="2891:31" pos:end="2891:57"><name pos:start="2891:31" pos:end="2891:43">neon_load_reg</name><argument_list pos:start="2891:44" pos:end="2891:57">(<argument pos:start="2891:45" pos:end="2891:46"><expr pos:start="2891:45" pos:end="2891:46"><name pos:start="2891:45" pos:end="2891:46">rm</name></expr></argument>, <argument pos:start="2891:49" pos:end="2891:56"><expr pos:start="2891:49" pos:end="2891:56"><name pos:start="2891:49" pos:end="2891:52">pass</name> <operator pos:start="2891:54" pos:end="2891:54">*</operator> <literal type="number" pos:start="2891:56" pos:end="2891:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2893:25" pos:end="2893:66"><expr pos:start="2893:25" pos:end="2893:65"><call pos:start="2893:25" pos:end="2893:65"><name pos:start="2893:25" pos:end="2893:38">gen_neon_widen</name><argument_list pos:start="2893:39" pos:end="2893:65">(<argument pos:start="2893:40" pos:end="2893:45"><expr pos:start="2893:40" pos:end="2893:45"><name pos:start="2893:40" pos:end="2893:45">cpu_V0</name></expr></argument>, <argument pos:start="2893:48" pos:end="2893:50"><expr pos:start="2893:48" pos:end="2893:50"><name pos:start="2893:48" pos:end="2893:50">tmp</name></expr></argument>, <argument pos:start="2893:53" pos:end="2893:56"><expr pos:start="2893:53" pos:end="2893:56"><name pos:start="2893:53" pos:end="2893:56">size</name></expr></argument>, <argument pos:start="2893:59" pos:end="2893:64"><expr pos:start="2893:59" pos:end="2893:64"><name pos:start="2893:59" pos:end="2893:60">op</name> <operator pos:start="2893:62" pos:end="2893:62">&amp;</operator> <literal type="number" pos:start="2893:64" pos:end="2893:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2895:25" pos:end="2895:62"><expr pos:start="2895:25" pos:end="2895:61"><name pos:start="2895:25" pos:end="2895:27">tmp</name> <operator pos:start="2895:29" pos:end="2895:29">=</operator> <call pos:start="2895:31" pos:end="2895:61"><name pos:start="2895:31" pos:end="2895:43">neon_load_reg</name><argument_list pos:start="2895:44" pos:end="2895:61">(<argument pos:start="2895:45" pos:end="2895:46"><expr pos:start="2895:45" pos:end="2895:46"><name pos:start="2895:45" pos:end="2895:46">rm</name></expr></argument>, <argument pos:start="2895:49" pos:end="2895:60"><expr pos:start="2895:49" pos:end="2895:60"><name pos:start="2895:49" pos:end="2895:52">pass</name> <operator pos:start="2895:54" pos:end="2895:54">*</operator> <literal type="number" pos:start="2895:56" pos:end="2895:58">2</literal> <operator pos:start="2895:58" pos:end="2895:58">+</operator> <literal type="number" pos:start="2895:60" pos:end="2895:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2897:25" pos:end="2897:66"><expr pos:start="2897:25" pos:end="2897:65"><call pos:start="2897:25" pos:end="2897:65"><name pos:start="2897:25" pos:end="2897:38">gen_neon_widen</name><argument_list pos:start="2897:39" pos:end="2897:65">(<argument pos:start="2897:40" pos:end="2897:45"><expr pos:start="2897:40" pos:end="2897:45"><name pos:start="2897:40" pos:end="2897:45">cpu_V1</name></expr></argument>, <argument pos:start="2897:48" pos:end="2897:50"><expr pos:start="2897:48" pos:end="2897:50"><name pos:start="2897:48" pos:end="2897:50">tmp</name></expr></argument>, <argument pos:start="2897:53" pos:end="2897:56"><expr pos:start="2897:53" pos:end="2897:56"><name pos:start="2897:53" pos:end="2897:56">size</name></expr></argument>, <argument pos:start="2897:59" pos:end="2897:64"><expr pos:start="2897:59" pos:end="2897:64"><name pos:start="2897:59" pos:end="2897:60">op</name> <operator pos:start="2897:62" pos:end="2897:62">&amp;</operator> <literal type="number" pos:start="2897:64" pos:end="2897:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2899:25" pos:end="2909:25">switch <condition pos:start="2899:32" pos:end="2899:37">(<expr pos:start="2899:33" pos:end="2899:36"><name pos:start="2899:33" pos:end="2899:36">size</name></expr>)</condition> <block pos:start="2899:39" pos:end="2909:25">{<block_content pos:start="2901:25" pos:end="2907:41">

                        <case pos:start="2901:25" pos:end="2901:31">case <expr pos:start="2901:30" pos:end="2901:30"><literal type="number" pos:start="2901:30" pos:end="2901:30">0</literal></expr>:</case> <expr_stmt pos:start="2901:33" pos:end="2901:68"><expr pos:start="2901:33" pos:end="2901:67"><call pos:start="2901:33" pos:end="2901:67"><name pos:start="2901:33" pos:end="2901:57">gen_helper_neon_paddl_u16</name><argument_list pos:start="2901:58" pos:end="2901:67">(<argument pos:start="2901:59" pos:end="2901:66"><expr pos:start="2901:59" pos:end="2901:66"><name pos:start="2901:59" pos:end="2901:66">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2901:70" pos:end="2901:75">break;</break>

                        <case pos:start="2903:25" pos:end="2903:31">case <expr pos:start="2903:30" pos:end="2903:30"><literal type="number" pos:start="2903:30" pos:end="2903:30">1</literal></expr>:</case> <expr_stmt pos:start="2903:33" pos:end="2903:68"><expr pos:start="2903:33" pos:end="2903:67"><call pos:start="2903:33" pos:end="2903:67"><name pos:start="2903:33" pos:end="2903:57">gen_helper_neon_paddl_u32</name><argument_list pos:start="2903:58" pos:end="2903:67">(<argument pos:start="2903:59" pos:end="2903:66"><expr pos:start="2903:59" pos:end="2903:66"><name pos:start="2903:59" pos:end="2903:66">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2903:70" pos:end="2903:75">break;</break>

                        <case pos:start="2905:25" pos:end="2905:31">case <expr pos:start="2905:30" pos:end="2905:30"><literal type="number" pos:start="2905:30" pos:end="2905:30">2</literal></expr>:</case> <expr_stmt pos:start="2905:33" pos:end="2905:58"><expr pos:start="2905:33" pos:end="2905:57"><call pos:start="2905:33" pos:end="2905:57"><name pos:start="2905:33" pos:end="2905:47">tcg_gen_add_i64</name><argument_list pos:start="2905:48" pos:end="2905:57">(<argument pos:start="2905:49" pos:end="2905:56"><expr pos:start="2905:49" pos:end="2905:56"><name pos:start="2905:49" pos:end="2905:56">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2905:60" pos:end="2905:65">break;</break>

                        <default pos:start="2907:25" pos:end="2907:32">default:</default> <expr_stmt pos:start="2907:34" pos:end="2907:41"><expr pos:start="2907:34" pos:end="2907:40"><call pos:start="2907:34" pos:end="2907:40"><name pos:start="2907:34" pos:end="2907:38">abort</name><argument_list pos:start="2907:39" pos:end="2907:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="2911:25" pos:end="2919:25"><if pos:start="2911:25" pos:end="2919:25">if <condition pos:start="2911:28" pos:end="2911:50">(<expr pos:start="2911:29" pos:end="2911:49"><name pos:start="2911:29" pos:end="2911:30">op</name> <operator pos:start="2911:32" pos:end="2911:33">&gt;=</operator> <name pos:start="2911:35" pos:end="2911:49">NEON_2RM_VPADAL</name></expr>)</condition> <block pos:start="2911:52" pos:end="2919:25">{<block_content pos:start="2915:29" pos:end="2917:48">

                            <comment type="block" pos:start="2913:29" pos:end="2913:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="2915:29" pos:end="2915:63"><expr pos:start="2915:29" pos:end="2915:62"><call pos:start="2915:29" pos:end="2915:62"><name pos:start="2915:29" pos:end="2915:43">neon_load_reg64</name><argument_list pos:start="2915:44" pos:end="2915:62">(<argument pos:start="2915:45" pos:end="2915:50"><expr pos:start="2915:45" pos:end="2915:50"><name pos:start="2915:45" pos:end="2915:50">cpu_V1</name></expr></argument>, <argument pos:start="2915:53" pos:end="2915:61"><expr pos:start="2915:53" pos:end="2915:61"><name pos:start="2915:53" pos:end="2915:54">rd</name> <operator pos:start="2915:56" pos:end="2915:56">+</operator> <name pos:start="2915:58" pos:end="2915:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2917:29" pos:end="2917:48"><expr pos:start="2917:29" pos:end="2917:47"><call pos:start="2917:29" pos:end="2917:47"><name pos:start="2917:29" pos:end="2917:41">gen_neon_addl</name><argument_list pos:start="2917:42" pos:end="2917:47">(<argument pos:start="2917:43" pos:end="2917:46"><expr pos:start="2917:43" pos:end="2917:46"><name pos:start="2917:43" pos:end="2917:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2921:25" pos:end="2921:60"><expr pos:start="2921:25" pos:end="2921:59"><call pos:start="2921:25" pos:end="2921:59"><name pos:start="2921:25" pos:end="2921:40">neon_store_reg64</name><argument_list pos:start="2921:41" pos:end="2921:59">(<argument pos:start="2921:42" pos:end="2921:47"><expr pos:start="2921:42" pos:end="2921:47"><name pos:start="2921:42" pos:end="2921:47">cpu_V0</name></expr></argument>, <argument pos:start="2921:50" pos:end="2921:58"><expr pos:start="2921:50" pos:end="2921:58"><name pos:start="2921:50" pos:end="2921:51">rd</name> <operator pos:start="2921:53" pos:end="2921:53">+</operator> <name pos:start="2921:55" pos:end="2921:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2925:21" pos:end="2925:26">break;</break>

                <case pos:start="2927:17" pos:end="2927:35">case <expr pos:start="2927:22" pos:end="2927:34"><name pos:start="2927:22" pos:end="2927:34">NEON_2RM_VTRN</name></expr>:</case>

                    <if_stmt pos:start="2929:21" pos:end="2949:21"><if pos:start="2929:21" pos:end="2945:21">if <condition pos:start="2929:24" pos:end="2929:34">(<expr pos:start="2929:25" pos:end="2929:33"><name pos:start="2929:25" pos:end="2929:28">size</name> <operator pos:start="2929:30" pos:end="2929:31">==</operator> <literal type="number" pos:start="2929:33" pos:end="2929:33">2</literal></expr>)</condition> <block pos:start="2929:36" pos:end="2945:21">{<block_content pos:start="2931:25" pos:end="2943:25">

                        <decl_stmt pos:start="2931:25" pos:end="2931:30"><decl pos:start="2931:25" pos:end="2931:29"><type pos:start="2931:25" pos:end="2931:27"><name pos:start="2931:25" pos:end="2931:27">int</name></type> <name pos:start="2931:29" pos:end="2931:29">n</name></decl>;</decl_stmt>

                        <for pos:start="2933:25" pos:end="2943:25">for <control pos:start="2933:29" pos:end="2933:60">(<init pos:start="2933:30" pos:end="2933:35"><expr pos:start="2933:30" pos:end="2933:34"><name pos:start="2933:30" pos:end="2933:30">n</name> <operator pos:start="2933:32" pos:end="2933:32">=</operator> <literal type="number" pos:start="2933:34" pos:end="2933:34">0</literal></expr>;</init> <condition pos:start="2933:37" pos:end="2933:52"><expr pos:start="2933:37" pos:end="2933:51"><name pos:start="2933:37" pos:end="2933:37">n</name> <operator pos:start="2933:39" pos:end="2933:39">&lt;</operator> <operator pos:start="2933:41" pos:end="2933:41">(</operator><ternary pos:start="2933:42" pos:end="2933:50"><condition pos:start="2933:42" pos:end="2933:44"><expr pos:start="2933:42" pos:end="2933:42"><name pos:start="2933:42" pos:end="2933:42">q</name></expr> ?</condition><then pos:start="2933:46" pos:end="2933:46"> <expr pos:start="2933:46" pos:end="2933:46"><literal type="number" pos:start="2933:46" pos:end="2933:46">4</literal></expr> </then><else pos:start="2933:48" pos:end="2933:50">: <expr pos:start="2933:50" pos:end="2933:50"><literal type="number" pos:start="2933:50" pos:end="2933:50">2</literal></expr></else></ternary><operator pos:start="2933:51" pos:end="2933:51">)</operator></expr>;</condition> <incr pos:start="2933:54" pos:end="2933:59"><expr pos:start="2933:54" pos:end="2933:59"><name pos:start="2933:54" pos:end="2933:54">n</name> <operator pos:start="2933:56" pos:end="2933:57">+=</operator> <literal type="number" pos:start="2933:59" pos:end="2933:59">2</literal></expr></incr>)</control> <block pos:start="2933:62" pos:end="2943:25">{<block_content pos:start="2935:29" pos:end="2941:59">

                            <expr_stmt pos:start="2935:29" pos:end="2935:55"><expr pos:start="2935:29" pos:end="2935:54"><name pos:start="2935:29" pos:end="2935:31">tmp</name> <operator pos:start="2935:33" pos:end="2935:33">=</operator> <call pos:start="2935:35" pos:end="2935:54"><name pos:start="2935:35" pos:end="2935:47">neon_load_reg</name><argument_list pos:start="2935:48" pos:end="2935:54">(<argument pos:start="2935:49" pos:end="2935:50"><expr pos:start="2935:49" pos:end="2935:50"><name pos:start="2935:49" pos:end="2935:50">rm</name></expr></argument>, <argument pos:start="2935:53" pos:end="2935:53"><expr pos:start="2935:53" pos:end="2935:53"><name pos:start="2935:53" pos:end="2935:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2937:29" pos:end="2937:60"><expr pos:start="2937:29" pos:end="2937:59"><name pos:start="2937:29" pos:end="2937:32">tmp2</name> <operator pos:start="2937:34" pos:end="2937:34">=</operator> <call pos:start="2937:36" pos:end="2937:59"><name pos:start="2937:36" pos:end="2937:48">neon_load_reg</name><argument_list pos:start="2937:49" pos:end="2937:59">(<argument pos:start="2937:50" pos:end="2937:51"><expr pos:start="2937:50" pos:end="2937:51"><name pos:start="2937:50" pos:end="2937:51">rd</name></expr></argument>, <argument pos:start="2937:54" pos:end="2937:58"><expr pos:start="2937:54" pos:end="2937:58"><name pos:start="2937:54" pos:end="2937:54">n</name> <operator pos:start="2937:56" pos:end="2937:56">+</operator> <literal type="number" pos:start="2937:58" pos:end="2937:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2939:29" pos:end="2939:56"><expr pos:start="2939:29" pos:end="2939:55"><call pos:start="2939:29" pos:end="2939:55"><name pos:start="2939:29" pos:end="2939:42">neon_store_reg</name><argument_list pos:start="2939:43" pos:end="2939:55">(<argument pos:start="2939:44" pos:end="2939:45"><expr pos:start="2939:44" pos:end="2939:45"><name pos:start="2939:44" pos:end="2939:45">rm</name></expr></argument>, <argument pos:start="2939:48" pos:end="2939:48"><expr pos:start="2939:48" pos:end="2939:48"><name pos:start="2939:48" pos:end="2939:48">n</name></expr></argument>, <argument pos:start="2939:51" pos:end="2939:54"><expr pos:start="2939:51" pos:end="2939:54"><name pos:start="2939:51" pos:end="2939:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2941:29" pos:end="2941:59"><expr pos:start="2941:29" pos:end="2941:58"><call pos:start="2941:29" pos:end="2941:58"><name pos:start="2941:29" pos:end="2941:42">neon_store_reg</name><argument_list pos:start="2941:43" pos:end="2941:58">(<argument pos:start="2941:44" pos:end="2941:45"><expr pos:start="2941:44" pos:end="2941:45"><name pos:start="2941:44" pos:end="2941:45">rd</name></expr></argument>, <argument pos:start="2941:48" pos:end="2941:52"><expr pos:start="2941:48" pos:end="2941:52"><name pos:start="2941:48" pos:end="2941:48">n</name> <operator pos:start="2941:50" pos:end="2941:50">+</operator> <literal type="number" pos:start="2941:52" pos:end="2941:52">1</literal></expr></argument>, <argument pos:start="2941:55" pos:end="2941:57"><expr pos:start="2941:55" pos:end="2941:57"><name pos:start="2941:55" pos:end="2941:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="2945:23" pos:end="2949:21">else <block pos:start="2945:28" pos:end="2949:21">{<block_content pos:start="2947:25" pos:end="2947:41">

                        <goto pos:start="2947:25" pos:end="2947:41">goto <name pos:start="2947:30" pos:end="2947:40">elementwise</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2951:21" pos:end="2951:26">break;</break>

                <case pos:start="2953:17" pos:end="2953:35">case <expr pos:start="2953:22" pos:end="2953:34"><name pos:start="2953:22" pos:end="2953:34">NEON_2RM_VUZP</name></expr>:</case>

                    <if_stmt pos:start="2955:21" pos:end="2959:21"><if pos:start="2955:21" pos:end="2959:21">if <condition pos:start="2955:24" pos:end="2955:56">(<expr pos:start="2955:25" pos:end="2955:55"><call pos:start="2955:25" pos:end="2955:55"><name pos:start="2955:25" pos:end="2955:38">gen_neon_unzip</name><argument_list pos:start="2955:39" pos:end="2955:55">(<argument pos:start="2955:40" pos:end="2955:41"><expr pos:start="2955:40" pos:end="2955:41"><name pos:start="2955:40" pos:end="2955:41">rd</name></expr></argument>, <argument pos:start="2955:44" pos:end="2955:45"><expr pos:start="2955:44" pos:end="2955:45"><name pos:start="2955:44" pos:end="2955:45">rm</name></expr></argument>, <argument pos:start="2955:48" pos:end="2955:51"><expr pos:start="2955:48" pos:end="2955:51"><name pos:start="2955:48" pos:end="2955:51">size</name></expr></argument>, <argument pos:start="2955:54" pos:end="2955:54"><expr pos:start="2955:54" pos:end="2955:54"><name pos:start="2955:54" pos:end="2955:54">q</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2955:58" pos:end="2959:21">{<block_content pos:start="2957:25" pos:end="2957:33">

                        <return pos:start="2957:25" pos:end="2957:33">return <expr pos:start="2957:32" pos:end="2957:32"><literal type="number" pos:start="2957:32" pos:end="2957:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="2961:21" pos:end="2961:26">break;</break>

                <case pos:start="2963:17" pos:end="2963:35">case <expr pos:start="2963:22" pos:end="2963:34"><name pos:start="2963:22" pos:end="2963:34">NEON_2RM_VZIP</name></expr>:</case>

                    <if_stmt pos:start="2965:21" pos:end="2969:21"><if pos:start="2965:21" pos:end="2969:21">if <condition pos:start="2965:24" pos:end="2965:54">(<expr pos:start="2965:25" pos:end="2965:53"><call pos:start="2965:25" pos:end="2965:53"><name pos:start="2965:25" pos:end="2965:36">gen_neon_zip</name><argument_list pos:start="2965:37" pos:end="2965:53">(<argument pos:start="2965:38" pos:end="2965:39"><expr pos:start="2965:38" pos:end="2965:39"><name pos:start="2965:38" pos:end="2965:39">rd</name></expr></argument>, <argument pos:start="2965:42" pos:end="2965:43"><expr pos:start="2965:42" pos:end="2965:43"><name pos:start="2965:42" pos:end="2965:43">rm</name></expr></argument>, <argument pos:start="2965:46" pos:end="2965:49"><expr pos:start="2965:46" pos:end="2965:49"><name pos:start="2965:46" pos:end="2965:49">size</name></expr></argument>, <argument pos:start="2965:52" pos:end="2965:52"><expr pos:start="2965:52" pos:end="2965:52"><name pos:start="2965:52" pos:end="2965:52">q</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2965:56" pos:end="2969:21">{<block_content pos:start="2967:25" pos:end="2967:33">

                        <return pos:start="2967:25" pos:end="2967:33">return <expr pos:start="2967:32" pos:end="2967:32"><literal type="number" pos:start="2967:32" pos:end="2967:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="2971:21" pos:end="2971:26">break;</break>

                <case pos:start="2973:17" pos:end="2973:36">case <expr pos:start="2973:22" pos:end="2973:35"><name pos:start="2973:22" pos:end="2973:35">NEON_2RM_VMOVN</name></expr>:</case> <case pos:start="2973:38" pos:end="2973:58">case <expr pos:start="2973:43" pos:end="2973:57"><name pos:start="2973:43" pos:end="2973:57">NEON_2RM_VQMOVN</name></expr>:</case>

                    <comment type="block" pos:start="2975:21" pos:end="2975:76">/* also VQMOVUN; op field and mnemonics don't line up */</comment>

                    <if_stmt pos:start="2977:21" pos:end="2981:21"><if pos:start="2977:21" pos:end="2981:21">if <condition pos:start="2977:24" pos:end="2977:31">(<expr pos:start="2977:25" pos:end="2977:30"><name pos:start="2977:25" pos:end="2977:26">rm</name> <operator pos:start="2977:28" pos:end="2977:28">&amp;</operator> <literal type="number" pos:start="2977:30" pos:end="2977:30">1</literal></expr>)</condition> <block pos:start="2977:33" pos:end="2981:21">{<block_content pos:start="2979:25" pos:end="2979:33">

                        <return pos:start="2979:25" pos:end="2979:33">return <expr pos:start="2979:32" pos:end="2979:32"><literal type="number" pos:start="2979:32" pos:end="2979:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2983:21" pos:end="2983:42"><expr pos:start="2983:21" pos:end="2983:41"><call pos:start="2983:21" pos:end="2983:41"><name pos:start="2983:21" pos:end="2983:35">TCGV_UNUSED_I32</name><argument_list pos:start="2983:36" pos:end="2983:41">(<argument pos:start="2983:37" pos:end="2983:40"><expr pos:start="2983:37" pos:end="2983:40"><name pos:start="2983:37" pos:end="2983:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2985:21" pos:end="3007:21">for <control pos:start="2985:25" pos:end="2985:52">(<init pos:start="2985:26" pos:end="2985:34"><expr pos:start="2985:26" pos:end="2985:33"><name pos:start="2985:26" pos:end="2985:29">pass</name> <operator pos:start="2985:31" pos:end="2985:31">=</operator> <literal type="number" pos:start="2985:33" pos:end="2985:33">0</literal></expr>;</init> <condition pos:start="2985:36" pos:end="2985:44"><expr pos:start="2985:36" pos:end="2985:43"><name pos:start="2985:36" pos:end="2985:39">pass</name> <operator pos:start="2985:41" pos:end="2985:41">&lt;</operator> <literal type="number" pos:start="2985:43" pos:end="2985:43">2</literal></expr>;</condition> <incr pos:start="2985:46" pos:end="2985:51"><expr pos:start="2985:46" pos:end="2985:51"><name pos:start="2985:46" pos:end="2985:49">pass</name><operator pos:start="2985:50" pos:end="2985:51">++</operator></expr></incr>)</control> <block pos:start="2985:54" pos:end="3007:21">{<block_content pos:start="2987:25" pos:end="3005:25">

                        <expr_stmt pos:start="2987:25" pos:end="2987:59"><expr pos:start="2987:25" pos:end="2987:58"><call pos:start="2987:25" pos:end="2987:58"><name pos:start="2987:25" pos:end="2987:39">neon_load_reg64</name><argument_list pos:start="2987:40" pos:end="2987:58">(<argument pos:start="2987:41" pos:end="2987:46"><expr pos:start="2987:41" pos:end="2987:46"><name pos:start="2987:41" pos:end="2987:46">cpu_V0</name></expr></argument>, <argument pos:start="2987:49" pos:end="2987:57"><expr pos:start="2987:49" pos:end="2987:57"><name pos:start="2987:49" pos:end="2987:50">rm</name> <operator pos:start="2987:52" pos:end="2987:52">+</operator> <name pos:start="2987:54" pos:end="2987:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2989:25" pos:end="2989:49"><expr pos:start="2989:25" pos:end="2989:48"><name pos:start="2989:25" pos:end="2989:27">tmp</name> <operator pos:start="2989:29" pos:end="2989:29">=</operator> <call pos:start="2989:31" pos:end="2989:48"><name pos:start="2989:31" pos:end="2989:46">tcg_temp_new_i32</name><argument_list pos:start="2989:47" pos:end="2989:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2991:25" pos:end="2993:56"><expr pos:start="2991:25" pos:end="2993:55"><call pos:start="2991:25" pos:end="2993:55"><name pos:start="2991:25" pos:end="2991:42">gen_neon_narrow_op</name><argument_list pos:start="2991:43" pos:end="2993:55">(<argument pos:start="2991:44" pos:end="2991:63"><expr pos:start="2991:44" pos:end="2991:63"><name pos:start="2991:44" pos:end="2991:45">op</name> <operator pos:start="2991:47" pos:end="2991:48">==</operator> <name pos:start="2991:50" pos:end="2991:63">NEON_2RM_VMOVN</name></expr></argument>, <argument pos:start="2991:66" pos:end="2991:66"><expr pos:start="2991:66" pos:end="2991:66"><name pos:start="2991:66" pos:end="2991:66">q</name></expr></argument>, <argument pos:start="2991:69" pos:end="2991:72"><expr pos:start="2991:69" pos:end="2991:72"><name pos:start="2991:69" pos:end="2991:72">size</name></expr></argument>,

                                           <argument pos:start="2993:44" pos:end="2993:46"><expr pos:start="2993:44" pos:end="2993:46"><name pos:start="2993:44" pos:end="2993:46">tmp</name></expr></argument>, <argument pos:start="2993:49" pos:end="2993:54"><expr pos:start="2993:49" pos:end="2993:54"><name pos:start="2993:49" pos:end="2993:54">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2995:25" pos:end="3005:25"><if pos:start="2995:25" pos:end="2999:25">if <condition pos:start="2995:28" pos:end="2995:38">(<expr pos:start="2995:29" pos:end="2995:37"><name pos:start="2995:29" pos:end="2995:32">pass</name> <operator pos:start="2995:34" pos:end="2995:35">==</operator> <literal type="number" pos:start="2995:37" pos:end="2995:37">0</literal></expr>)</condition> <block pos:start="2995:40" pos:end="2999:25">{<block_content pos:start="2997:29" pos:end="2997:39">

                            <expr_stmt pos:start="2997:29" pos:end="2997:39"><expr pos:start="2997:29" pos:end="2997:38"><name pos:start="2997:29" pos:end="2997:32">tmp2</name> <operator pos:start="2997:34" pos:end="2997:34">=</operator> <name pos:start="2997:36" pos:end="2997:38">tmp</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2999:27" pos:end="3005:25">else <block pos:start="2999:32" pos:end="3005:25">{<block_content pos:start="3001:29" pos:end="3003:55">

                            <expr_stmt pos:start="3001:29" pos:end="3001:56"><expr pos:start="3001:29" pos:end="3001:55"><call pos:start="3001:29" pos:end="3001:55"><name pos:start="3001:29" pos:end="3001:42">neon_store_reg</name><argument_list pos:start="3001:43" pos:end="3001:55">(<argument pos:start="3001:44" pos:end="3001:45"><expr pos:start="3001:44" pos:end="3001:45"><name pos:start="3001:44" pos:end="3001:45">rd</name></expr></argument>, <argument pos:start="3001:48" pos:end="3001:48"><expr pos:start="3001:48" pos:end="3001:48"><literal type="number" pos:start="3001:48" pos:end="3001:48">0</literal></expr></argument>, <argument pos:start="3001:51" pos:end="3001:54"><expr pos:start="3001:51" pos:end="3001:54"><name pos:start="3001:51" pos:end="3001:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3003:29" pos:end="3003:55"><expr pos:start="3003:29" pos:end="3003:54"><call pos:start="3003:29" pos:end="3003:54"><name pos:start="3003:29" pos:end="3003:42">neon_store_reg</name><argument_list pos:start="3003:43" pos:end="3003:54">(<argument pos:start="3003:44" pos:end="3003:45"><expr pos:start="3003:44" pos:end="3003:45"><name pos:start="3003:44" pos:end="3003:45">rd</name></expr></argument>, <argument pos:start="3003:48" pos:end="3003:48"><expr pos:start="3003:48" pos:end="3003:48"><literal type="number" pos:start="3003:48" pos:end="3003:48">1</literal></expr></argument>, <argument pos:start="3003:51" pos:end="3003:53"><expr pos:start="3003:51" pos:end="3003:53"><name pos:start="3003:51" pos:end="3003:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="3009:21" pos:end="3009:26">break;</break>

                <case pos:start="3011:17" pos:end="3011:36">case <expr pos:start="3011:22" pos:end="3011:35"><name pos:start="3011:22" pos:end="3011:35">NEON_2RM_VSHLL</name></expr>:</case>

                    <if_stmt pos:start="3013:21" pos:end="3017:21"><if pos:start="3013:21" pos:end="3017:21">if <condition pos:start="3013:24" pos:end="3013:38">(<expr pos:start="3013:25" pos:end="3013:37"><name pos:start="3013:25" pos:end="3013:25">q</name> <operator pos:start="3013:27" pos:end="3013:28">||</operator> <operator pos:start="3013:30" pos:end="3013:30">(</operator><name pos:start="3013:31" pos:end="3013:32">rd</name> <operator pos:start="3013:34" pos:end="3013:34">&amp;</operator> <literal type="number" pos:start="3013:36" pos:end="3013:36">1</literal><operator pos:start="3013:37" pos:end="3013:37">)</operator></expr>)</condition> <block pos:start="3013:40" pos:end="3017:21">{<block_content pos:start="3015:25" pos:end="3015:33">

                        <return pos:start="3015:25" pos:end="3015:33">return <expr pos:start="3015:32" pos:end="3015:32"><literal type="number" pos:start="3015:32" pos:end="3015:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3019:21" pos:end="3019:47"><expr pos:start="3019:21" pos:end="3019:46"><name pos:start="3019:21" pos:end="3019:23">tmp</name> <operator pos:start="3019:25" pos:end="3019:25">=</operator> <call pos:start="3019:27" pos:end="3019:46"><name pos:start="3019:27" pos:end="3019:39">neon_load_reg</name><argument_list pos:start="3019:40" pos:end="3019:46">(<argument pos:start="3019:41" pos:end="3019:42"><expr pos:start="3019:41" pos:end="3019:42"><name pos:start="3019:41" pos:end="3019:42">rm</name></expr></argument>, <argument pos:start="3019:45" pos:end="3019:45"><expr pos:start="3019:45" pos:end="3019:45"><literal type="number" pos:start="3019:45" pos:end="3019:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3021:21" pos:end="3021:48"><expr pos:start="3021:21" pos:end="3021:47"><name pos:start="3021:21" pos:end="3021:24">tmp2</name> <operator pos:start="3021:26" pos:end="3021:26">=</operator> <call pos:start="3021:28" pos:end="3021:47"><name pos:start="3021:28" pos:end="3021:40">neon_load_reg</name><argument_list pos:start="3021:41" pos:end="3021:47">(<argument pos:start="3021:42" pos:end="3021:43"><expr pos:start="3021:42" pos:end="3021:43"><name pos:start="3021:42" pos:end="3021:43">rm</name></expr></argument>, <argument pos:start="3021:46" pos:end="3021:46"><expr pos:start="3021:46" pos:end="3021:46"><literal type="number" pos:start="3021:46" pos:end="3021:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="3023:21" pos:end="3035:21">for <control pos:start="3023:25" pos:end="3023:52">(<init pos:start="3023:26" pos:end="3023:34"><expr pos:start="3023:26" pos:end="3023:33"><name pos:start="3023:26" pos:end="3023:29">pass</name> <operator pos:start="3023:31" pos:end="3023:31">=</operator> <literal type="number" pos:start="3023:33" pos:end="3023:33">0</literal></expr>;</init> <condition pos:start="3023:36" pos:end="3023:44"><expr pos:start="3023:36" pos:end="3023:43"><name pos:start="3023:36" pos:end="3023:39">pass</name> <operator pos:start="3023:41" pos:end="3023:41">&lt;</operator> <literal type="number" pos:start="3023:43" pos:end="3023:43">2</literal></expr>;</condition> <incr pos:start="3023:46" pos:end="3023:51"><expr pos:start="3023:46" pos:end="3023:51"><name pos:start="3023:46" pos:end="3023:49">pass</name><operator pos:start="3023:50" pos:end="3023:51">++</operator></expr></incr>)</control> <block pos:start="3023:54" pos:end="3035:21">{<block_content pos:start="3025:25" pos:end="3033:60">

                        <if_stmt pos:start="3025:25" pos:end="3027:39"><if pos:start="3025:25" pos:end="3027:39">if <condition pos:start="3025:28" pos:end="3025:38">(<expr pos:start="3025:29" pos:end="3025:37"><name pos:start="3025:29" pos:end="3025:32">pass</name> <operator pos:start="3025:34" pos:end="3025:35">==</operator> <literal type="number" pos:start="3025:37" pos:end="3025:37">1</literal></expr>)</condition><block type="pseudo" pos:start="3027:29" pos:end="3027:39"><block_content pos:start="3027:29" pos:end="3027:39">

                            <expr_stmt pos:start="3027:29" pos:end="3027:39"><expr pos:start="3027:29" pos:end="3027:38"><name pos:start="3027:29" pos:end="3027:31">tmp</name> <operator pos:start="3027:33" pos:end="3027:33">=</operator> <name pos:start="3027:35" pos:end="3027:38">tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="3029:25" pos:end="3029:61"><expr pos:start="3029:25" pos:end="3029:60"><call pos:start="3029:25" pos:end="3029:60"><name pos:start="3029:25" pos:end="3029:38">gen_neon_widen</name><argument_list pos:start="3029:39" pos:end="3029:60">(<argument pos:start="3029:40" pos:end="3029:45"><expr pos:start="3029:40" pos:end="3029:45"><name pos:start="3029:40" pos:end="3029:45">cpu_V0</name></expr></argument>, <argument pos:start="3029:48" pos:end="3029:50"><expr pos:start="3029:48" pos:end="3029:50"><name pos:start="3029:48" pos:end="3029:50">tmp</name></expr></argument>, <argument pos:start="3029:53" pos:end="3029:56"><expr pos:start="3029:53" pos:end="3029:56"><name pos:start="3029:53" pos:end="3029:56">size</name></expr></argument>, <argument pos:start="3029:59" pos:end="3029:59"><expr pos:start="3029:59" pos:end="3029:59"><literal type="number" pos:start="3029:59" pos:end="3029:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3031:25" pos:end="3031:68"><expr pos:start="3031:25" pos:end="3031:67"><call pos:start="3031:25" pos:end="3031:67"><name pos:start="3031:25" pos:end="3031:40">tcg_gen_shli_i64</name><argument_list pos:start="3031:41" pos:end="3031:67">(<argument pos:start="3031:42" pos:end="3031:47"><expr pos:start="3031:42" pos:end="3031:47"><name pos:start="3031:42" pos:end="3031:47">cpu_V0</name></expr></argument>, <argument pos:start="3031:50" pos:end="3031:55"><expr pos:start="3031:50" pos:end="3031:55"><name pos:start="3031:50" pos:end="3031:55">cpu_V0</name></expr></argument>, <argument pos:start="3031:58" pos:end="3031:66"><expr pos:start="3031:58" pos:end="3031:66"><literal type="number" pos:start="3031:58" pos:end="3031:58">8</literal> <operator pos:start="3031:60" pos:end="3031:61">&lt;&lt;</operator> <name pos:start="3031:63" pos:end="3031:66">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3033:25" pos:end="3033:60"><expr pos:start="3033:25" pos:end="3033:59"><call pos:start="3033:25" pos:end="3033:59"><name pos:start="3033:25" pos:end="3033:40">neon_store_reg64</name><argument_list pos:start="3033:41" pos:end="3033:59">(<argument pos:start="3033:42" pos:end="3033:47"><expr pos:start="3033:42" pos:end="3033:47"><name pos:start="3033:42" pos:end="3033:47">cpu_V0</name></expr></argument>, <argument pos:start="3033:50" pos:end="3033:58"><expr pos:start="3033:50" pos:end="3033:58"><name pos:start="3033:50" pos:end="3033:51">rd</name> <operator pos:start="3033:53" pos:end="3033:53">+</operator> <name pos:start="3033:55" pos:end="3033:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="3037:21" pos:end="3037:26">break;</break>

                <case pos:start="3039:17" pos:end="3039:43">case <expr pos:start="3039:22" pos:end="3039:42"><name pos:start="3039:22" pos:end="3039:42">NEON_2RM_VCVT_F16_F32</name></expr>:</case>

                    <if_stmt pos:start="3041:21" pos:end="3047:21"><if pos:start="3041:21" pos:end="3047:21">if <condition pos:start="3041:24" pos:end="3043:38">(<expr pos:start="3041:25" pos:end="3043:37"><operator pos:start="3041:25" pos:end="3041:25">!</operator><call pos:start="3041:26" pos:end="3041:64"><name pos:start="3041:26" pos:end="3041:39">arm_dc_feature</name><argument_list pos:start="3041:40" pos:end="3041:64">(<argument pos:start="3041:41" pos:end="3041:41"><expr pos:start="3041:41" pos:end="3041:41"><name pos:start="3041:41" pos:end="3041:41">s</name></expr></argument>, <argument pos:start="3041:44" pos:end="3041:63"><expr pos:start="3041:44" pos:end="3041:63"><name pos:start="3041:44" pos:end="3041:63">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call> <operator pos:start="3041:66" pos:end="3041:67">||</operator>

                        <name pos:start="3043:25" pos:end="3043:25">q</name> <operator pos:start="3043:27" pos:end="3043:28">||</operator> <operator pos:start="3043:30" pos:end="3043:30">(</operator><name pos:start="3043:31" pos:end="3043:32">rm</name> <operator pos:start="3043:34" pos:end="3043:34">&amp;</operator> <literal type="number" pos:start="3043:36" pos:end="3043:36">1</literal><operator pos:start="3043:37" pos:end="3043:37">)</operator></expr>)</condition> <block pos:start="3043:40" pos:end="3047:21">{<block_content pos:start="3045:25" pos:end="3045:33">

                        <return pos:start="3045:25" pos:end="3045:33">return <expr pos:start="3045:32" pos:end="3045:32"><literal type="number" pos:start="3045:32" pos:end="3045:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3049:21" pos:end="3049:45"><expr pos:start="3049:21" pos:end="3049:44"><name pos:start="3049:21" pos:end="3049:23">tmp</name> <operator pos:start="3049:25" pos:end="3049:25">=</operator> <call pos:start="3049:27" pos:end="3049:44"><name pos:start="3049:27" pos:end="3049:42">tcg_temp_new_i32</name><argument_list pos:start="3049:43" pos:end="3049:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3051:21" pos:end="3051:46"><expr pos:start="3051:21" pos:end="3051:45"><name pos:start="3051:21" pos:end="3051:24">tmp2</name> <operator pos:start="3051:26" pos:end="3051:26">=</operator> <call pos:start="3051:28" pos:end="3051:45"><name pos:start="3051:28" pos:end="3051:43">tcg_temp_new_i32</name><argument_list pos:start="3051:44" pos:end="3051:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3053:21" pos:end="3053:77"><expr pos:start="3053:21" pos:end="3053:76"><call pos:start="3053:21" pos:end="3053:76"><name pos:start="3053:21" pos:end="3053:34">tcg_gen_ld_f32</name><argument_list pos:start="3053:35" pos:end="3053:76">(<argument pos:start="3053:36" pos:end="3053:42"><expr pos:start="3053:36" pos:end="3053:42"><name pos:start="3053:36" pos:end="3053:42">cpu_F0s</name></expr></argument>, <argument pos:start="3053:45" pos:end="3053:51"><expr pos:start="3053:45" pos:end="3053:51"><name pos:start="3053:45" pos:end="3053:51">cpu_env</name></expr></argument>, <argument pos:start="3053:54" pos:end="3053:75"><expr pos:start="3053:54" pos:end="3053:75"><call pos:start="3053:54" pos:end="3053:75"><name pos:start="3053:54" pos:end="3053:68">neon_reg_offset</name><argument_list pos:start="3053:69" pos:end="3053:75">(<argument pos:start="3053:70" pos:end="3053:71"><expr pos:start="3053:70" pos:end="3053:71"><name pos:start="3053:70" pos:end="3053:71">rm</name></expr></argument>, <argument pos:start="3053:74" pos:end="3053:74"><expr pos:start="3053:74" pos:end="3053:74"><literal type="number" pos:start="3053:74" pos:end="3053:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3055:21" pos:end="3055:75"><expr pos:start="3055:21" pos:end="3055:74"><call pos:start="3055:21" pos:end="3055:74"><name pos:start="3055:21" pos:end="3055:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="3055:52" pos:end="3055:74">(<argument pos:start="3055:53" pos:end="3055:55"><expr pos:start="3055:53" pos:end="3055:55"><name pos:start="3055:53" pos:end="3055:55">tmp</name></expr></argument>, <argument pos:start="3055:58" pos:end="3055:64"><expr pos:start="3055:58" pos:end="3055:64"><name pos:start="3055:58" pos:end="3055:64">cpu_F0s</name></expr></argument>, <argument pos:start="3055:67" pos:end="3055:73"><expr pos:start="3055:67" pos:end="3055:73"><name pos:start="3055:67" pos:end="3055:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3057:21" pos:end="3057:77"><expr pos:start="3057:21" pos:end="3057:76"><call pos:start="3057:21" pos:end="3057:76"><name pos:start="3057:21" pos:end="3057:34">tcg_gen_ld_f32</name><argument_list pos:start="3057:35" pos:end="3057:76">(<argument pos:start="3057:36" pos:end="3057:42"><expr pos:start="3057:36" pos:end="3057:42"><name pos:start="3057:36" pos:end="3057:42">cpu_F0s</name></expr></argument>, <argument pos:start="3057:45" pos:end="3057:51"><expr pos:start="3057:45" pos:end="3057:51"><name pos:start="3057:45" pos:end="3057:51">cpu_env</name></expr></argument>, <argument pos:start="3057:54" pos:end="3057:75"><expr pos:start="3057:54" pos:end="3057:75"><call pos:start="3057:54" pos:end="3057:75"><name pos:start="3057:54" pos:end="3057:68">neon_reg_offset</name><argument_list pos:start="3057:69" pos:end="3057:75">(<argument pos:start="3057:70" pos:end="3057:71"><expr pos:start="3057:70" pos:end="3057:71"><name pos:start="3057:70" pos:end="3057:71">rm</name></expr></argument>, <argument pos:start="3057:74" pos:end="3057:74"><expr pos:start="3057:74" pos:end="3057:74"><literal type="number" pos:start="3057:74" pos:end="3057:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3059:21" pos:end="3059:76"><expr pos:start="3059:21" pos:end="3059:75"><call pos:start="3059:21" pos:end="3059:75"><name pos:start="3059:21" pos:end="3059:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="3059:52" pos:end="3059:75">(<argument pos:start="3059:53" pos:end="3059:56"><expr pos:start="3059:53" pos:end="3059:56"><name pos:start="3059:53" pos:end="3059:56">tmp2</name></expr></argument>, <argument pos:start="3059:59" pos:end="3059:65"><expr pos:start="3059:59" pos:end="3059:65"><name pos:start="3059:59" pos:end="3059:65">cpu_F0s</name></expr></argument>, <argument pos:start="3059:68" pos:end="3059:74"><expr pos:start="3059:68" pos:end="3059:74"><name pos:start="3059:68" pos:end="3059:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3061:21" pos:end="3061:53"><expr pos:start="3061:21" pos:end="3061:52"><call pos:start="3061:21" pos:end="3061:52"><name pos:start="3061:21" pos:end="3061:36">tcg_gen_shli_i32</name><argument_list pos:start="3061:37" pos:end="3061:52">(<argument pos:start="3061:38" pos:end="3061:41"><expr pos:start="3061:38" pos:end="3061:41"><name pos:start="3061:38" pos:end="3061:41">tmp2</name></expr></argument>, <argument pos:start="3061:44" pos:end="3061:47"><expr pos:start="3061:44" pos:end="3061:47"><name pos:start="3061:44" pos:end="3061:47">tmp2</name></expr></argument>, <argument pos:start="3061:50" pos:end="3061:51"><expr pos:start="3061:50" pos:end="3061:51"><literal type="number" pos:start="3061:50" pos:end="3061:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3063:21" pos:end="3063:52"><expr pos:start="3063:21" pos:end="3063:51"><call pos:start="3063:21" pos:end="3063:51"><name pos:start="3063:21" pos:end="3063:34">tcg_gen_or_i32</name><argument_list pos:start="3063:35" pos:end="3063:51">(<argument pos:start="3063:36" pos:end="3063:39"><expr pos:start="3063:36" pos:end="3063:39"><name pos:start="3063:36" pos:end="3063:39">tmp2</name></expr></argument>, <argument pos:start="3063:42" pos:end="3063:45"><expr pos:start="3063:42" pos:end="3063:45"><name pos:start="3063:42" pos:end="3063:45">tmp2</name></expr></argument>, <argument pos:start="3063:48" pos:end="3063:50"><expr pos:start="3063:48" pos:end="3063:50"><name pos:start="3063:48" pos:end="3063:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3065:21" pos:end="3065:77"><expr pos:start="3065:21" pos:end="3065:76"><call pos:start="3065:21" pos:end="3065:76"><name pos:start="3065:21" pos:end="3065:34">tcg_gen_ld_f32</name><argument_list pos:start="3065:35" pos:end="3065:76">(<argument pos:start="3065:36" pos:end="3065:42"><expr pos:start="3065:36" pos:end="3065:42"><name pos:start="3065:36" pos:end="3065:42">cpu_F0s</name></expr></argument>, <argument pos:start="3065:45" pos:end="3065:51"><expr pos:start="3065:45" pos:end="3065:51"><name pos:start="3065:45" pos:end="3065:51">cpu_env</name></expr></argument>, <argument pos:start="3065:54" pos:end="3065:75"><expr pos:start="3065:54" pos:end="3065:75"><call pos:start="3065:54" pos:end="3065:75"><name pos:start="3065:54" pos:end="3065:68">neon_reg_offset</name><argument_list pos:start="3065:69" pos:end="3065:75">(<argument pos:start="3065:70" pos:end="3065:71"><expr pos:start="3065:70" pos:end="3065:71"><name pos:start="3065:70" pos:end="3065:71">rm</name></expr></argument>, <argument pos:start="3065:74" pos:end="3065:74"><expr pos:start="3065:74" pos:end="3065:74"><literal type="number" pos:start="3065:74" pos:end="3065:74">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3067:21" pos:end="3067:75"><expr pos:start="3067:21" pos:end="3067:74"><call pos:start="3067:21" pos:end="3067:74"><name pos:start="3067:21" pos:end="3067:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="3067:52" pos:end="3067:74">(<argument pos:start="3067:53" pos:end="3067:55"><expr pos:start="3067:53" pos:end="3067:55"><name pos:start="3067:53" pos:end="3067:55">tmp</name></expr></argument>, <argument pos:start="3067:58" pos:end="3067:64"><expr pos:start="3067:58" pos:end="3067:64"><name pos:start="3067:58" pos:end="3067:64">cpu_F0s</name></expr></argument>, <argument pos:start="3067:67" pos:end="3067:73"><expr pos:start="3067:67" pos:end="3067:73"><name pos:start="3067:67" pos:end="3067:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3069:21" pos:end="3069:77"><expr pos:start="3069:21" pos:end="3069:76"><call pos:start="3069:21" pos:end="3069:76"><name pos:start="3069:21" pos:end="3069:34">tcg_gen_ld_f32</name><argument_list pos:start="3069:35" pos:end="3069:76">(<argument pos:start="3069:36" pos:end="3069:42"><expr pos:start="3069:36" pos:end="3069:42"><name pos:start="3069:36" pos:end="3069:42">cpu_F0s</name></expr></argument>, <argument pos:start="3069:45" pos:end="3069:51"><expr pos:start="3069:45" pos:end="3069:51"><name pos:start="3069:45" pos:end="3069:51">cpu_env</name></expr></argument>, <argument pos:start="3069:54" pos:end="3069:75"><expr pos:start="3069:54" pos:end="3069:75"><call pos:start="3069:54" pos:end="3069:75"><name pos:start="3069:54" pos:end="3069:68">neon_reg_offset</name><argument_list pos:start="3069:69" pos:end="3069:75">(<argument pos:start="3069:70" pos:end="3069:71"><expr pos:start="3069:70" pos:end="3069:71"><name pos:start="3069:70" pos:end="3069:71">rm</name></expr></argument>, <argument pos:start="3069:74" pos:end="3069:74"><expr pos:start="3069:74" pos:end="3069:74"><literal type="number" pos:start="3069:74" pos:end="3069:74">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3071:21" pos:end="3071:48"><expr pos:start="3071:21" pos:end="3071:47"><call pos:start="3071:21" pos:end="3071:47"><name pos:start="3071:21" pos:end="3071:34">neon_store_reg</name><argument_list pos:start="3071:35" pos:end="3071:47">(<argument pos:start="3071:36" pos:end="3071:37"><expr pos:start="3071:36" pos:end="3071:37"><name pos:start="3071:36" pos:end="3071:37">rd</name></expr></argument>, <argument pos:start="3071:40" pos:end="3071:40"><expr pos:start="3071:40" pos:end="3071:40"><literal type="number" pos:start="3071:40" pos:end="3071:40">0</literal></expr></argument>, <argument pos:start="3071:43" pos:end="3071:46"><expr pos:start="3071:43" pos:end="3071:46"><name pos:start="3071:43" pos:end="3071:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3073:21" pos:end="3073:46"><expr pos:start="3073:21" pos:end="3073:45"><name pos:start="3073:21" pos:end="3073:24">tmp2</name> <operator pos:start="3073:26" pos:end="3073:26">=</operator> <call pos:start="3073:28" pos:end="3073:45"><name pos:start="3073:28" pos:end="3073:43">tcg_temp_new_i32</name><argument_list pos:start="3073:44" pos:end="3073:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3075:21" pos:end="3075:76"><expr pos:start="3075:21" pos:end="3075:75"><call pos:start="3075:21" pos:end="3075:75"><name pos:start="3075:21" pos:end="3075:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="3075:52" pos:end="3075:75">(<argument pos:start="3075:53" pos:end="3075:56"><expr pos:start="3075:53" pos:end="3075:56"><name pos:start="3075:53" pos:end="3075:56">tmp2</name></expr></argument>, <argument pos:start="3075:59" pos:end="3075:65"><expr pos:start="3075:59" pos:end="3075:65"><name pos:start="3075:59" pos:end="3075:65">cpu_F0s</name></expr></argument>, <argument pos:start="3075:68" pos:end="3075:74"><expr pos:start="3075:68" pos:end="3075:74"><name pos:start="3075:68" pos:end="3075:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3077:21" pos:end="3077:53"><expr pos:start="3077:21" pos:end="3077:52"><call pos:start="3077:21" pos:end="3077:52"><name pos:start="3077:21" pos:end="3077:36">tcg_gen_shli_i32</name><argument_list pos:start="3077:37" pos:end="3077:52">(<argument pos:start="3077:38" pos:end="3077:41"><expr pos:start="3077:38" pos:end="3077:41"><name pos:start="3077:38" pos:end="3077:41">tmp2</name></expr></argument>, <argument pos:start="3077:44" pos:end="3077:47"><expr pos:start="3077:44" pos:end="3077:47"><name pos:start="3077:44" pos:end="3077:47">tmp2</name></expr></argument>, <argument pos:start="3077:50" pos:end="3077:51"><expr pos:start="3077:50" pos:end="3077:51"><literal type="number" pos:start="3077:50" pos:end="3077:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3079:21" pos:end="3079:52"><expr pos:start="3079:21" pos:end="3079:51"><call pos:start="3079:21" pos:end="3079:51"><name pos:start="3079:21" pos:end="3079:34">tcg_gen_or_i32</name><argument_list pos:start="3079:35" pos:end="3079:51">(<argument pos:start="3079:36" pos:end="3079:39"><expr pos:start="3079:36" pos:end="3079:39"><name pos:start="3079:36" pos:end="3079:39">tmp2</name></expr></argument>, <argument pos:start="3079:42" pos:end="3079:45"><expr pos:start="3079:42" pos:end="3079:45"><name pos:start="3079:42" pos:end="3079:45">tmp2</name></expr></argument>, <argument pos:start="3079:48" pos:end="3079:50"><expr pos:start="3079:48" pos:end="3079:50"><name pos:start="3079:48" pos:end="3079:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3081:21" pos:end="3081:48"><expr pos:start="3081:21" pos:end="3081:47"><call pos:start="3081:21" pos:end="3081:47"><name pos:start="3081:21" pos:end="3081:34">neon_store_reg</name><argument_list pos:start="3081:35" pos:end="3081:47">(<argument pos:start="3081:36" pos:end="3081:37"><expr pos:start="3081:36" pos:end="3081:37"><name pos:start="3081:36" pos:end="3081:37">rd</name></expr></argument>, <argument pos:start="3081:40" pos:end="3081:40"><expr pos:start="3081:40" pos:end="3081:40"><literal type="number" pos:start="3081:40" pos:end="3081:40">1</literal></expr></argument>, <argument pos:start="3081:43" pos:end="3081:46"><expr pos:start="3081:43" pos:end="3081:46"><name pos:start="3081:43" pos:end="3081:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3083:21" pos:end="3083:43"><expr pos:start="3083:21" pos:end="3083:42"><call pos:start="3083:21" pos:end="3083:42"><name pos:start="3083:21" pos:end="3083:37">tcg_temp_free_i32</name><argument_list pos:start="3083:38" pos:end="3083:42">(<argument pos:start="3083:39" pos:end="3083:41"><expr pos:start="3083:39" pos:end="3083:41"><name pos:start="3083:39" pos:end="3083:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3085:21" pos:end="3085:26">break;</break>

                <case pos:start="3087:17" pos:end="3087:43">case <expr pos:start="3087:22" pos:end="3087:42"><name pos:start="3087:22" pos:end="3087:42">NEON_2RM_VCVT_F32_F16</name></expr>:</case>

                    <if_stmt pos:start="3089:21" pos:end="3095:21"><if pos:start="3089:21" pos:end="3095:21">if <condition pos:start="3089:24" pos:end="3091:38">(<expr pos:start="3089:25" pos:end="3091:37"><operator pos:start="3089:25" pos:end="3089:25">!</operator><call pos:start="3089:26" pos:end="3089:64"><name pos:start="3089:26" pos:end="3089:39">arm_dc_feature</name><argument_list pos:start="3089:40" pos:end="3089:64">(<argument pos:start="3089:41" pos:end="3089:41"><expr pos:start="3089:41" pos:end="3089:41"><name pos:start="3089:41" pos:end="3089:41">s</name></expr></argument>, <argument pos:start="3089:44" pos:end="3089:63"><expr pos:start="3089:44" pos:end="3089:63"><name pos:start="3089:44" pos:end="3089:63">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call> <operator pos:start="3089:66" pos:end="3089:67">||</operator>

                        <name pos:start="3091:25" pos:end="3091:25">q</name> <operator pos:start="3091:27" pos:end="3091:28">||</operator> <operator pos:start="3091:30" pos:end="3091:30">(</operator><name pos:start="3091:31" pos:end="3091:32">rd</name> <operator pos:start="3091:34" pos:end="3091:34">&amp;</operator> <literal type="number" pos:start="3091:36" pos:end="3091:36">1</literal><operator pos:start="3091:37" pos:end="3091:37">)</operator></expr>)</condition> <block pos:start="3091:40" pos:end="3095:21">{<block_content pos:start="3093:25" pos:end="3093:33">

                        <return pos:start="3093:25" pos:end="3093:33">return <expr pos:start="3093:32" pos:end="3093:32"><literal type="number" pos:start="3093:32" pos:end="3093:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3097:21" pos:end="3097:46"><expr pos:start="3097:21" pos:end="3097:45"><name pos:start="3097:21" pos:end="3097:24">tmp3</name> <operator pos:start="3097:26" pos:end="3097:26">=</operator> <call pos:start="3097:28" pos:end="3097:45"><name pos:start="3097:28" pos:end="3097:43">tcg_temp_new_i32</name><argument_list pos:start="3097:44" pos:end="3097:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3099:21" pos:end="3099:47"><expr pos:start="3099:21" pos:end="3099:46"><name pos:start="3099:21" pos:end="3099:23">tmp</name> <operator pos:start="3099:25" pos:end="3099:25">=</operator> <call pos:start="3099:27" pos:end="3099:46"><name pos:start="3099:27" pos:end="3099:39">neon_load_reg</name><argument_list pos:start="3099:40" pos:end="3099:46">(<argument pos:start="3099:41" pos:end="3099:42"><expr pos:start="3099:41" pos:end="3099:42"><name pos:start="3099:41" pos:end="3099:42">rm</name></expr></argument>, <argument pos:start="3099:45" pos:end="3099:45"><expr pos:start="3099:45" pos:end="3099:45"><literal type="number" pos:start="3099:45" pos:end="3099:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3101:21" pos:end="3101:48"><expr pos:start="3101:21" pos:end="3101:47"><name pos:start="3101:21" pos:end="3101:24">tmp2</name> <operator pos:start="3101:26" pos:end="3101:26">=</operator> <call pos:start="3101:28" pos:end="3101:47"><name pos:start="3101:28" pos:end="3101:40">neon_load_reg</name><argument_list pos:start="3101:41" pos:end="3101:47">(<argument pos:start="3101:42" pos:end="3101:43"><expr pos:start="3101:42" pos:end="3101:43"><name pos:start="3101:42" pos:end="3101:43">rm</name></expr></argument>, <argument pos:start="3101:46" pos:end="3101:46"><expr pos:start="3101:46" pos:end="3101:46"><literal type="number" pos:start="3101:46" pos:end="3101:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3103:21" pos:end="3103:50"><expr pos:start="3103:21" pos:end="3103:49"><call pos:start="3103:21" pos:end="3103:49"><name pos:start="3103:21" pos:end="3103:38">tcg_gen_ext16u_i32</name><argument_list pos:start="3103:39" pos:end="3103:49">(<argument pos:start="3103:40" pos:end="3103:43"><expr pos:start="3103:40" pos:end="3103:43"><name pos:start="3103:40" pos:end="3103:43">tmp3</name></expr></argument>, <argument pos:start="3103:46" pos:end="3103:48"><expr pos:start="3103:46" pos:end="3103:48"><name pos:start="3103:46" pos:end="3103:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3105:21" pos:end="3105:76"><expr pos:start="3105:21" pos:end="3105:75"><call pos:start="3105:21" pos:end="3105:75"><name pos:start="3105:21" pos:end="3105:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="3105:52" pos:end="3105:75">(<argument pos:start="3105:53" pos:end="3105:59"><expr pos:start="3105:53" pos:end="3105:59"><name pos:start="3105:53" pos:end="3105:59">cpu_F0s</name></expr></argument>, <argument pos:start="3105:62" pos:end="3105:65"><expr pos:start="3105:62" pos:end="3105:65"><name pos:start="3105:62" pos:end="3105:65">tmp3</name></expr></argument>, <argument pos:start="3105:68" pos:end="3105:74"><expr pos:start="3105:68" pos:end="3105:74"><name pos:start="3105:68" pos:end="3105:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3107:21" pos:end="3107:77"><expr pos:start="3107:21" pos:end="3107:76"><call pos:start="3107:21" pos:end="3107:76"><name pos:start="3107:21" pos:end="3107:34">tcg_gen_st_f32</name><argument_list pos:start="3107:35" pos:end="3107:76">(<argument pos:start="3107:36" pos:end="3107:42"><expr pos:start="3107:36" pos:end="3107:42"><name pos:start="3107:36" pos:end="3107:42">cpu_F0s</name></expr></argument>, <argument pos:start="3107:45" pos:end="3107:51"><expr pos:start="3107:45" pos:end="3107:51"><name pos:start="3107:45" pos:end="3107:51">cpu_env</name></expr></argument>, <argument pos:start="3107:54" pos:end="3107:75"><expr pos:start="3107:54" pos:end="3107:75"><call pos:start="3107:54" pos:end="3107:75"><name pos:start="3107:54" pos:end="3107:68">neon_reg_offset</name><argument_list pos:start="3107:69" pos:end="3107:75">(<argument pos:start="3107:70" pos:end="3107:71"><expr pos:start="3107:70" pos:end="3107:71"><name pos:start="3107:70" pos:end="3107:71">rd</name></expr></argument>, <argument pos:start="3107:74" pos:end="3107:74"><expr pos:start="3107:74" pos:end="3107:74"><literal type="number" pos:start="3107:74" pos:end="3107:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3109:21" pos:end="3109:52"><expr pos:start="3109:21" pos:end="3109:51"><call pos:start="3109:21" pos:end="3109:51"><name pos:start="3109:21" pos:end="3109:36">tcg_gen_shri_i32</name><argument_list pos:start="3109:37" pos:end="3109:51">(<argument pos:start="3109:38" pos:end="3109:41"><expr pos:start="3109:38" pos:end="3109:41"><name pos:start="3109:38" pos:end="3109:41">tmp3</name></expr></argument>, <argument pos:start="3109:44" pos:end="3109:46"><expr pos:start="3109:44" pos:end="3109:46"><name pos:start="3109:44" pos:end="3109:46">tmp</name></expr></argument>, <argument pos:start="3109:49" pos:end="3109:50"><expr pos:start="3109:49" pos:end="3109:50"><literal type="number" pos:start="3109:49" pos:end="3109:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3111:21" pos:end="3111:76"><expr pos:start="3111:21" pos:end="3111:75"><call pos:start="3111:21" pos:end="3111:75"><name pos:start="3111:21" pos:end="3111:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="3111:52" pos:end="3111:75">(<argument pos:start="3111:53" pos:end="3111:59"><expr pos:start="3111:53" pos:end="3111:59"><name pos:start="3111:53" pos:end="3111:59">cpu_F0s</name></expr></argument>, <argument pos:start="3111:62" pos:end="3111:65"><expr pos:start="3111:62" pos:end="3111:65"><name pos:start="3111:62" pos:end="3111:65">tmp3</name></expr></argument>, <argument pos:start="3111:68" pos:end="3111:74"><expr pos:start="3111:68" pos:end="3111:74"><name pos:start="3111:68" pos:end="3111:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3113:21" pos:end="3113:77"><expr pos:start="3113:21" pos:end="3113:76"><call pos:start="3113:21" pos:end="3113:76"><name pos:start="3113:21" pos:end="3113:34">tcg_gen_st_f32</name><argument_list pos:start="3113:35" pos:end="3113:76">(<argument pos:start="3113:36" pos:end="3113:42"><expr pos:start="3113:36" pos:end="3113:42"><name pos:start="3113:36" pos:end="3113:42">cpu_F0s</name></expr></argument>, <argument pos:start="3113:45" pos:end="3113:51"><expr pos:start="3113:45" pos:end="3113:51"><name pos:start="3113:45" pos:end="3113:51">cpu_env</name></expr></argument>, <argument pos:start="3113:54" pos:end="3113:75"><expr pos:start="3113:54" pos:end="3113:75"><call pos:start="3113:54" pos:end="3113:75"><name pos:start="3113:54" pos:end="3113:68">neon_reg_offset</name><argument_list pos:start="3113:69" pos:end="3113:75">(<argument pos:start="3113:70" pos:end="3113:71"><expr pos:start="3113:70" pos:end="3113:71"><name pos:start="3113:70" pos:end="3113:71">rd</name></expr></argument>, <argument pos:start="3113:74" pos:end="3113:74"><expr pos:start="3113:74" pos:end="3113:74"><literal type="number" pos:start="3113:74" pos:end="3113:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3115:21" pos:end="3115:43"><expr pos:start="3115:21" pos:end="3115:42"><call pos:start="3115:21" pos:end="3115:42"><name pos:start="3115:21" pos:end="3115:37">tcg_temp_free_i32</name><argument_list pos:start="3115:38" pos:end="3115:42">(<argument pos:start="3115:39" pos:end="3115:41"><expr pos:start="3115:39" pos:end="3115:41"><name pos:start="3115:39" pos:end="3115:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3117:21" pos:end="3117:51"><expr pos:start="3117:21" pos:end="3117:50"><call pos:start="3117:21" pos:end="3117:50"><name pos:start="3117:21" pos:end="3117:38">tcg_gen_ext16u_i32</name><argument_list pos:start="3117:39" pos:end="3117:50">(<argument pos:start="3117:40" pos:end="3117:43"><expr pos:start="3117:40" pos:end="3117:43"><name pos:start="3117:40" pos:end="3117:43">tmp3</name></expr></argument>, <argument pos:start="3117:46" pos:end="3117:49"><expr pos:start="3117:46" pos:end="3117:49"><name pos:start="3117:46" pos:end="3117:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3119:21" pos:end="3119:76"><expr pos:start="3119:21" pos:end="3119:75"><call pos:start="3119:21" pos:end="3119:75"><name pos:start="3119:21" pos:end="3119:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="3119:52" pos:end="3119:75">(<argument pos:start="3119:53" pos:end="3119:59"><expr pos:start="3119:53" pos:end="3119:59"><name pos:start="3119:53" pos:end="3119:59">cpu_F0s</name></expr></argument>, <argument pos:start="3119:62" pos:end="3119:65"><expr pos:start="3119:62" pos:end="3119:65"><name pos:start="3119:62" pos:end="3119:65">tmp3</name></expr></argument>, <argument pos:start="3119:68" pos:end="3119:74"><expr pos:start="3119:68" pos:end="3119:74"><name pos:start="3119:68" pos:end="3119:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3121:21" pos:end="3121:77"><expr pos:start="3121:21" pos:end="3121:76"><call pos:start="3121:21" pos:end="3121:76"><name pos:start="3121:21" pos:end="3121:34">tcg_gen_st_f32</name><argument_list pos:start="3121:35" pos:end="3121:76">(<argument pos:start="3121:36" pos:end="3121:42"><expr pos:start="3121:36" pos:end="3121:42"><name pos:start="3121:36" pos:end="3121:42">cpu_F0s</name></expr></argument>, <argument pos:start="3121:45" pos:end="3121:51"><expr pos:start="3121:45" pos:end="3121:51"><name pos:start="3121:45" pos:end="3121:51">cpu_env</name></expr></argument>, <argument pos:start="3121:54" pos:end="3121:75"><expr pos:start="3121:54" pos:end="3121:75"><call pos:start="3121:54" pos:end="3121:75"><name pos:start="3121:54" pos:end="3121:68">neon_reg_offset</name><argument_list pos:start="3121:69" pos:end="3121:75">(<argument pos:start="3121:70" pos:end="3121:71"><expr pos:start="3121:70" pos:end="3121:71"><name pos:start="3121:70" pos:end="3121:71">rd</name></expr></argument>, <argument pos:start="3121:74" pos:end="3121:74"><expr pos:start="3121:74" pos:end="3121:74"><literal type="number" pos:start="3121:74" pos:end="3121:74">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3123:21" pos:end="3123:53"><expr pos:start="3123:21" pos:end="3123:52"><call pos:start="3123:21" pos:end="3123:52"><name pos:start="3123:21" pos:end="3123:36">tcg_gen_shri_i32</name><argument_list pos:start="3123:37" pos:end="3123:52">(<argument pos:start="3123:38" pos:end="3123:41"><expr pos:start="3123:38" pos:end="3123:41"><name pos:start="3123:38" pos:end="3123:41">tmp3</name></expr></argument>, <argument pos:start="3123:44" pos:end="3123:47"><expr pos:start="3123:44" pos:end="3123:47"><name pos:start="3123:44" pos:end="3123:47">tmp2</name></expr></argument>, <argument pos:start="3123:50" pos:end="3123:51"><expr pos:start="3123:50" pos:end="3123:51"><literal type="number" pos:start="3123:50" pos:end="3123:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3125:21" pos:end="3125:76"><expr pos:start="3125:21" pos:end="3125:75"><call pos:start="3125:21" pos:end="3125:75"><name pos:start="3125:21" pos:end="3125:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="3125:52" pos:end="3125:75">(<argument pos:start="3125:53" pos:end="3125:59"><expr pos:start="3125:53" pos:end="3125:59"><name pos:start="3125:53" pos:end="3125:59">cpu_F0s</name></expr></argument>, <argument pos:start="3125:62" pos:end="3125:65"><expr pos:start="3125:62" pos:end="3125:65"><name pos:start="3125:62" pos:end="3125:65">tmp3</name></expr></argument>, <argument pos:start="3125:68" pos:end="3125:74"><expr pos:start="3125:68" pos:end="3125:74"><name pos:start="3125:68" pos:end="3125:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3127:21" pos:end="3127:77"><expr pos:start="3127:21" pos:end="3127:76"><call pos:start="3127:21" pos:end="3127:76"><name pos:start="3127:21" pos:end="3127:34">tcg_gen_st_f32</name><argument_list pos:start="3127:35" pos:end="3127:76">(<argument pos:start="3127:36" pos:end="3127:42"><expr pos:start="3127:36" pos:end="3127:42"><name pos:start="3127:36" pos:end="3127:42">cpu_F0s</name></expr></argument>, <argument pos:start="3127:45" pos:end="3127:51"><expr pos:start="3127:45" pos:end="3127:51"><name pos:start="3127:45" pos:end="3127:51">cpu_env</name></expr></argument>, <argument pos:start="3127:54" pos:end="3127:75"><expr pos:start="3127:54" pos:end="3127:75"><call pos:start="3127:54" pos:end="3127:75"><name pos:start="3127:54" pos:end="3127:68">neon_reg_offset</name><argument_list pos:start="3127:69" pos:end="3127:75">(<argument pos:start="3127:70" pos:end="3127:71"><expr pos:start="3127:70" pos:end="3127:71"><name pos:start="3127:70" pos:end="3127:71">rd</name></expr></argument>, <argument pos:start="3127:74" pos:end="3127:74"><expr pos:start="3127:74" pos:end="3127:74"><literal type="number" pos:start="3127:74" pos:end="3127:74">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3129:21" pos:end="3129:44"><expr pos:start="3129:21" pos:end="3129:43"><call pos:start="3129:21" pos:end="3129:43"><name pos:start="3129:21" pos:end="3129:37">tcg_temp_free_i32</name><argument_list pos:start="3129:38" pos:end="3129:43">(<argument pos:start="3129:39" pos:end="3129:42"><expr pos:start="3129:39" pos:end="3129:42"><name pos:start="3129:39" pos:end="3129:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3131:21" pos:end="3131:44"><expr pos:start="3131:21" pos:end="3131:43"><call pos:start="3131:21" pos:end="3131:43"><name pos:start="3131:21" pos:end="3131:37">tcg_temp_free_i32</name><argument_list pos:start="3131:38" pos:end="3131:43">(<argument pos:start="3131:39" pos:end="3131:42"><expr pos:start="3131:39" pos:end="3131:42"><name pos:start="3131:39" pos:end="3131:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3133:21" pos:end="3133:26">break;</break>

                <case pos:start="3135:17" pos:end="3135:35">case <expr pos:start="3135:22" pos:end="3135:34"><name pos:start="3135:22" pos:end="3135:34">NEON_2RM_AESE</name></expr>:</case> <case pos:start="3135:37" pos:end="3135:56">case <expr pos:start="3135:42" pos:end="3135:55"><name pos:start="3135:42" pos:end="3135:55">NEON_2RM_AESMC</name></expr>:</case>

                    <if_stmt pos:start="3137:21" pos:end="3143:21"><if pos:start="3137:21" pos:end="3143:21">if <condition pos:start="3137:24" pos:end="3139:43">(<expr pos:start="3137:25" pos:end="3139:42"><operator pos:start="3137:25" pos:end="3137:25">!</operator><call pos:start="3137:26" pos:end="3137:62"><name pos:start="3137:26" pos:end="3137:39">arm_dc_feature</name><argument_list pos:start="3137:40" pos:end="3137:62">(<argument pos:start="3137:41" pos:end="3137:41"><expr pos:start="3137:41" pos:end="3137:41"><name pos:start="3137:41" pos:end="3137:41">s</name></expr></argument>, <argument pos:start="3137:44" pos:end="3137:61"><expr pos:start="3137:44" pos:end="3137:61"><name pos:start="3137:44" pos:end="3137:61">ARM_FEATURE_V8_AES</name></expr></argument>)</argument_list></call>

                        <operator pos:start="3139:25" pos:end="3139:26">||</operator> <operator pos:start="3139:28" pos:end="3139:28">(</operator><operator pos:start="3139:29" pos:end="3139:29">(</operator><name pos:start="3139:30" pos:end="3139:31">rm</name> <operator pos:start="3139:33" pos:end="3139:33">|</operator> <name pos:start="3139:35" pos:end="3139:36">rd</name><operator pos:start="3139:37" pos:end="3139:37">)</operator> <operator pos:start="3139:39" pos:end="3139:39">&amp;</operator> <literal type="number" pos:start="3139:41" pos:end="3139:41">1</literal><operator pos:start="3139:42" pos:end="3139:42">)</operator></expr>)</condition> <block pos:start="3139:45" pos:end="3143:21">{<block_content pos:start="3141:25" pos:end="3141:33">

                        <return pos:start="3141:25" pos:end="3141:33">return <expr pos:start="3141:32" pos:end="3141:32"><literal type="number" pos:start="3141:32" pos:end="3141:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3145:21" pos:end="3145:44"><expr pos:start="3145:21" pos:end="3145:43"><name pos:start="3145:21" pos:end="3145:23">tmp</name> <operator pos:start="3145:25" pos:end="3145:25">=</operator> <call pos:start="3145:27" pos:end="3145:43"><name pos:start="3145:27" pos:end="3145:39">tcg_const_i32</name><argument_list pos:start="3145:40" pos:end="3145:43">(<argument pos:start="3145:41" pos:end="3145:42"><expr pos:start="3145:41" pos:end="3145:42"><name pos:start="3145:41" pos:end="3145:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3147:21" pos:end="3147:45"><expr pos:start="3147:21" pos:end="3147:44"><name pos:start="3147:21" pos:end="3147:24">tmp2</name> <operator pos:start="3147:26" pos:end="3147:26">=</operator> <call pos:start="3147:28" pos:end="3147:44"><name pos:start="3147:28" pos:end="3147:40">tcg_const_i32</name><argument_list pos:start="3147:41" pos:end="3147:44">(<argument pos:start="3147:42" pos:end="3147:43"><expr pos:start="3147:42" pos:end="3147:43"><name pos:start="3147:42" pos:end="3147:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                     <comment type="block" pos:start="3151:22" pos:end="3155:24">/* Bit 6 is the lowest opcode bit; it distinguishes between

                      * encryption (AESE/AESMC) and decryption (AESD/AESIMC)

                      */</comment>

                    <expr_stmt pos:start="3157:21" pos:end="3157:64"><expr pos:start="3157:21" pos:end="3157:63"><name pos:start="3157:21" pos:end="3157:24">tmp3</name> <operator pos:start="3157:26" pos:end="3157:26">=</operator> <call pos:start="3157:28" pos:end="3157:63"><name pos:start="3157:28" pos:end="3157:40">tcg_const_i32</name><argument_list pos:start="3157:41" pos:end="3157:63">(<argument pos:start="3157:42" pos:end="3157:62"><expr pos:start="3157:42" pos:end="3157:62"><call pos:start="3157:42" pos:end="3157:62"><name pos:start="3157:42" pos:end="3157:50">extract32</name><argument_list pos:start="3157:51" pos:end="3157:62">(<argument pos:start="3157:52" pos:end="3157:55"><expr pos:start="3157:52" pos:end="3157:55"><name pos:start="3157:52" pos:end="3157:55">insn</name></expr></argument>, <argument pos:start="3157:58" pos:end="3157:58"><expr pos:start="3157:58" pos:end="3157:58"><literal type="number" pos:start="3157:58" pos:end="3157:58">6</literal></expr></argument>, <argument pos:start="3157:61" pos:end="3157:61"><expr pos:start="3157:61" pos:end="3157:61"><literal type="number" pos:start="3157:61" pos:end="3157:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="3161:21" pos:end="3169:21"><if pos:start="3161:21" pos:end="3165:21">if <condition pos:start="3161:24" pos:end="3161:44">(<expr pos:start="3161:25" pos:end="3161:43"><name pos:start="3161:25" pos:end="3161:26">op</name> <operator pos:start="3161:28" pos:end="3161:29">==</operator> <name pos:start="3161:31" pos:end="3161:43">NEON_2RM_AESE</name></expr>)</condition> <block pos:start="3161:46" pos:end="3165:21">{<block_content pos:start="3163:25" pos:end="3163:73">

                        <expr_stmt pos:start="3163:25" pos:end="3163:73"><expr pos:start="3163:25" pos:end="3163:72"><call pos:start="3163:25" pos:end="3163:72"><name pos:start="3163:25" pos:end="3163:46">gen_helper_crypto_aese</name><argument_list pos:start="3163:47" pos:end="3163:72">(<argument pos:start="3163:48" pos:end="3163:54"><expr pos:start="3163:48" pos:end="3163:54"><name pos:start="3163:48" pos:end="3163:54">cpu_env</name></expr></argument>, <argument pos:start="3163:57" pos:end="3163:59"><expr pos:start="3163:57" pos:end="3163:59"><name pos:start="3163:57" pos:end="3163:59">tmp</name></expr></argument>, <argument pos:start="3163:62" pos:end="3163:65"><expr pos:start="3163:62" pos:end="3163:65"><name pos:start="3163:62" pos:end="3163:65">tmp2</name></expr></argument>, <argument pos:start="3163:68" pos:end="3163:71"><expr pos:start="3163:68" pos:end="3163:71"><name pos:start="3163:68" pos:end="3163:71">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="3165:23" pos:end="3169:21">else <block pos:start="3165:28" pos:end="3169:21">{<block_content pos:start="3167:25" pos:end="3167:74">

                        <expr_stmt pos:start="3167:25" pos:end="3167:74"><expr pos:start="3167:25" pos:end="3167:73"><call pos:start="3167:25" pos:end="3167:73"><name pos:start="3167:25" pos:end="3167:47">gen_helper_crypto_aesmc</name><argument_list pos:start="3167:48" pos:end="3167:73">(<argument pos:start="3167:49" pos:end="3167:55"><expr pos:start="3167:49" pos:end="3167:55"><name pos:start="3167:49" pos:end="3167:55">cpu_env</name></expr></argument>, <argument pos:start="3167:58" pos:end="3167:60"><expr pos:start="3167:58" pos:end="3167:60"><name pos:start="3167:58" pos:end="3167:60">tmp</name></expr></argument>, <argument pos:start="3167:63" pos:end="3167:66"><expr pos:start="3167:63" pos:end="3167:66"><name pos:start="3167:63" pos:end="3167:66">tmp2</name></expr></argument>, <argument pos:start="3167:69" pos:end="3167:72"><expr pos:start="3167:69" pos:end="3167:72"><name pos:start="3167:69" pos:end="3167:72">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="3171:21" pos:end="3171:43"><expr pos:start="3171:21" pos:end="3171:42"><call pos:start="3171:21" pos:end="3171:42"><name pos:start="3171:21" pos:end="3171:37">tcg_temp_free_i32</name><argument_list pos:start="3171:38" pos:end="3171:42">(<argument pos:start="3171:39" pos:end="3171:41"><expr pos:start="3171:39" pos:end="3171:41"><name pos:start="3171:39" pos:end="3171:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3173:21" pos:end="3173:44"><expr pos:start="3173:21" pos:end="3173:43"><call pos:start="3173:21" pos:end="3173:43"><name pos:start="3173:21" pos:end="3173:37">tcg_temp_free_i32</name><argument_list pos:start="3173:38" pos:end="3173:43">(<argument pos:start="3173:39" pos:end="3173:42"><expr pos:start="3173:39" pos:end="3173:42"><name pos:start="3173:39" pos:end="3173:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3175:21" pos:end="3175:44"><expr pos:start="3175:21" pos:end="3175:43"><call pos:start="3175:21" pos:end="3175:43"><name pos:start="3175:21" pos:end="3175:37">tcg_temp_free_i32</name><argument_list pos:start="3175:38" pos:end="3175:43">(<argument pos:start="3175:39" pos:end="3175:42"><expr pos:start="3175:39" pos:end="3175:42"><name pos:start="3175:39" pos:end="3175:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3177:21" pos:end="3177:26">break;</break>

                <case pos:start="3179:17" pos:end="3179:36">case <expr pos:start="3179:22" pos:end="3179:35"><name pos:start="3179:22" pos:end="3179:35">NEON_2RM_SHA1H</name></expr>:</case>

                    <if_stmt pos:start="3181:21" pos:end="3187:21"><if pos:start="3181:21" pos:end="3187:21">if <condition pos:start="3181:24" pos:end="3183:43">(<expr pos:start="3181:25" pos:end="3183:42"><operator pos:start="3181:25" pos:end="3181:25">!</operator><call pos:start="3181:26" pos:end="3181:63"><name pos:start="3181:26" pos:end="3181:39">arm_dc_feature</name><argument_list pos:start="3181:40" pos:end="3181:63">(<argument pos:start="3181:41" pos:end="3181:41"><expr pos:start="3181:41" pos:end="3181:41"><name pos:start="3181:41" pos:end="3181:41">s</name></expr></argument>, <argument pos:start="3181:44" pos:end="3181:62"><expr pos:start="3181:44" pos:end="3181:62"><name pos:start="3181:44" pos:end="3181:62">ARM_FEATURE_V8_SHA1</name></expr></argument>)</argument_list></call>

                        <operator pos:start="3183:25" pos:end="3183:26">||</operator> <operator pos:start="3183:28" pos:end="3183:28">(</operator><operator pos:start="3183:29" pos:end="3183:29">(</operator><name pos:start="3183:30" pos:end="3183:31">rm</name> <operator pos:start="3183:33" pos:end="3183:33">|</operator> <name pos:start="3183:35" pos:end="3183:36">rd</name><operator pos:start="3183:37" pos:end="3183:37">)</operator> <operator pos:start="3183:39" pos:end="3183:39">&amp;</operator> <literal type="number" pos:start="3183:41" pos:end="3183:41">1</literal><operator pos:start="3183:42" pos:end="3183:42">)</operator></expr>)</condition> <block pos:start="3183:45" pos:end="3187:21">{<block_content pos:start="3185:25" pos:end="3185:33">

                        <return pos:start="3185:25" pos:end="3185:33">return <expr pos:start="3185:32" pos:end="3185:32"><literal type="number" pos:start="3185:32" pos:end="3185:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3189:21" pos:end="3189:44"><expr pos:start="3189:21" pos:end="3189:43"><name pos:start="3189:21" pos:end="3189:23">tmp</name> <operator pos:start="3189:25" pos:end="3189:25">=</operator> <call pos:start="3189:27" pos:end="3189:43"><name pos:start="3189:27" pos:end="3189:39">tcg_const_i32</name><argument_list pos:start="3189:40" pos:end="3189:43">(<argument pos:start="3189:41" pos:end="3189:42"><expr pos:start="3189:41" pos:end="3189:42"><name pos:start="3189:41" pos:end="3189:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3191:21" pos:end="3191:45"><expr pos:start="3191:21" pos:end="3191:44"><name pos:start="3191:21" pos:end="3191:24">tmp2</name> <operator pos:start="3191:26" pos:end="3191:26">=</operator> <call pos:start="3191:28" pos:end="3191:44"><name pos:start="3191:28" pos:end="3191:40">tcg_const_i32</name><argument_list pos:start="3191:41" pos:end="3191:44">(<argument pos:start="3191:42" pos:end="3191:43"><expr pos:start="3191:42" pos:end="3191:43"><name pos:start="3191:42" pos:end="3191:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="3195:21" pos:end="3195:64"><expr pos:start="3195:21" pos:end="3195:63"><call pos:start="3195:21" pos:end="3195:63"><name pos:start="3195:21" pos:end="3195:43">gen_helper_crypto_sha1h</name><argument_list pos:start="3195:44" pos:end="3195:63">(<argument pos:start="3195:45" pos:end="3195:51"><expr pos:start="3195:45" pos:end="3195:51"><name pos:start="3195:45" pos:end="3195:51">cpu_env</name></expr></argument>, <argument pos:start="3195:54" pos:end="3195:56"><expr pos:start="3195:54" pos:end="3195:56"><name pos:start="3195:54" pos:end="3195:56">tmp</name></expr></argument>, <argument pos:start="3195:59" pos:end="3195:62"><expr pos:start="3195:59" pos:end="3195:62"><name pos:start="3195:59" pos:end="3195:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="3199:21" pos:end="3199:43"><expr pos:start="3199:21" pos:end="3199:42"><call pos:start="3199:21" pos:end="3199:42"><name pos:start="3199:21" pos:end="3199:37">tcg_temp_free_i32</name><argument_list pos:start="3199:38" pos:end="3199:42">(<argument pos:start="3199:39" pos:end="3199:41"><expr pos:start="3199:39" pos:end="3199:41"><name pos:start="3199:39" pos:end="3199:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3201:21" pos:end="3201:44"><expr pos:start="3201:21" pos:end="3201:43"><call pos:start="3201:21" pos:end="3201:43"><name pos:start="3201:21" pos:end="3201:37">tcg_temp_free_i32</name><argument_list pos:start="3201:38" pos:end="3201:43">(<argument pos:start="3201:39" pos:end="3201:42"><expr pos:start="3201:39" pos:end="3201:42"><name pos:start="3201:39" pos:end="3201:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3203:21" pos:end="3203:26">break;</break>

                <case pos:start="3205:17" pos:end="3205:38">case <expr pos:start="3205:22" pos:end="3205:37"><name pos:start="3205:22" pos:end="3205:37">NEON_2RM_SHA1SU1</name></expr>:</case>

                    <if_stmt pos:start="3207:21" pos:end="3211:21"><if pos:start="3207:21" pos:end="3211:21">if <condition pos:start="3207:24" pos:end="3207:38">(<expr pos:start="3207:25" pos:end="3207:37"><operator pos:start="3207:25" pos:end="3207:25">(</operator><name pos:start="3207:26" pos:end="3207:27">rm</name> <operator pos:start="3207:29" pos:end="3207:29">|</operator> <name pos:start="3207:31" pos:end="3207:32">rd</name><operator pos:start="3207:33" pos:end="3207:33">)</operator> <operator pos:start="3207:35" pos:end="3207:35">&amp;</operator> <literal type="number" pos:start="3207:37" pos:end="3207:37">1</literal></expr>)</condition> <block pos:start="3207:40" pos:end="3211:21">{<block_content pos:start="3209:29" pos:end="3209:37">

                            <return pos:start="3209:29" pos:end="3209:37">return <expr pos:start="3209:36" pos:end="3209:36"><literal type="number" pos:start="3209:36" pos:end="3209:36">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="3213:21" pos:end="3213:73">/* bit 6 (q): set -&gt; SHA256SU0, cleared -&gt; SHA1SU1 */</comment>

                    <if_stmt pos:start="3215:21" pos:end="3227:21"><if pos:start="3215:21" pos:end="3223:21">if <condition pos:start="3215:24" pos:end="3215:26">(<expr pos:start="3215:25" pos:end="3215:25"><name pos:start="3215:25" pos:end="3215:25">q</name></expr>)</condition> <block pos:start="3215:28" pos:end="3223:21">{<block_content pos:start="3217:25" pos:end="3221:25">

                        <if_stmt pos:start="3217:25" pos:end="3221:25"><if pos:start="3217:25" pos:end="3221:25">if <condition pos:start="3217:28" pos:end="3217:70">(<expr pos:start="3217:29" pos:end="3217:69"><operator pos:start="3217:29" pos:end="3217:29">!</operator><call pos:start="3217:30" pos:end="3217:69"><name pos:start="3217:30" pos:end="3217:43">arm_dc_feature</name><argument_list pos:start="3217:44" pos:end="3217:69">(<argument pos:start="3217:45" pos:end="3217:45"><expr pos:start="3217:45" pos:end="3217:45"><name pos:start="3217:45" pos:end="3217:45">s</name></expr></argument>, <argument pos:start="3217:48" pos:end="3217:68"><expr pos:start="3217:48" pos:end="3217:68"><name pos:start="3217:48" pos:end="3217:68">ARM_FEATURE_V8_SHA256</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3217:72" pos:end="3221:25">{<block_content pos:start="3219:29" pos:end="3219:37">

                            <return pos:start="3219:29" pos:end="3219:37">return <expr pos:start="3219:36" pos:end="3219:36"><literal type="number" pos:start="3219:36" pos:end="3219:36">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="3223:23" pos:end="3227:21">else if <condition pos:start="3223:31" pos:end="3223:71">(<expr pos:start="3223:32" pos:end="3223:70"><operator pos:start="3223:32" pos:end="3223:32">!</operator><call pos:start="3223:33" pos:end="3223:70"><name pos:start="3223:33" pos:end="3223:46">arm_dc_feature</name><argument_list pos:start="3223:47" pos:end="3223:70">(<argument pos:start="3223:48" pos:end="3223:48"><expr pos:start="3223:48" pos:end="3223:48"><name pos:start="3223:48" pos:end="3223:48">s</name></expr></argument>, <argument pos:start="3223:51" pos:end="3223:69"><expr pos:start="3223:51" pos:end="3223:69"><name pos:start="3223:51" pos:end="3223:69">ARM_FEATURE_V8_SHA1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3223:73" pos:end="3227:21">{<block_content pos:start="3225:25" pos:end="3225:33">

                        <return pos:start="3225:25" pos:end="3225:33">return <expr pos:start="3225:32" pos:end="3225:32"><literal type="number" pos:start="3225:32" pos:end="3225:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="3229:21" pos:end="3229:44"><expr pos:start="3229:21" pos:end="3229:43"><name pos:start="3229:21" pos:end="3229:23">tmp</name> <operator pos:start="3229:25" pos:end="3229:25">=</operator> <call pos:start="3229:27" pos:end="3229:43"><name pos:start="3229:27" pos:end="3229:39">tcg_const_i32</name><argument_list pos:start="3229:40" pos:end="3229:43">(<argument pos:start="3229:41" pos:end="3229:42"><expr pos:start="3229:41" pos:end="3229:42"><name pos:start="3229:41" pos:end="3229:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3231:21" pos:end="3231:45"><expr pos:start="3231:21" pos:end="3231:44"><name pos:start="3231:21" pos:end="3231:24">tmp2</name> <operator pos:start="3231:26" pos:end="3231:26">=</operator> <call pos:start="3231:28" pos:end="3231:44"><name pos:start="3231:28" pos:end="3231:40">tcg_const_i32</name><argument_list pos:start="3231:41" pos:end="3231:44">(<argument pos:start="3231:42" pos:end="3231:43"><expr pos:start="3231:42" pos:end="3231:43"><name pos:start="3231:42" pos:end="3231:43">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="3233:21" pos:end="3241:21"><if pos:start="3233:21" pos:end="3237:21">if <condition pos:start="3233:24" pos:end="3233:26">(<expr pos:start="3233:25" pos:end="3233:25"><name pos:start="3233:25" pos:end="3233:25">q</name></expr>)</condition> <block pos:start="3233:28" pos:end="3237:21">{<block_content pos:start="3235:25" pos:end="3235:72">

                        <expr_stmt pos:start="3235:25" pos:end="3235:72"><expr pos:start="3235:25" pos:end="3235:71"><call pos:start="3235:25" pos:end="3235:71"><name pos:start="3235:25" pos:end="3235:51">gen_helper_crypto_sha256su0</name><argument_list pos:start="3235:52" pos:end="3235:71">(<argument pos:start="3235:53" pos:end="3235:59"><expr pos:start="3235:53" pos:end="3235:59"><name pos:start="3235:53" pos:end="3235:59">cpu_env</name></expr></argument>, <argument pos:start="3235:62" pos:end="3235:64"><expr pos:start="3235:62" pos:end="3235:64"><name pos:start="3235:62" pos:end="3235:64">tmp</name></expr></argument>, <argument pos:start="3235:67" pos:end="3235:70"><expr pos:start="3235:67" pos:end="3235:70"><name pos:start="3235:67" pos:end="3235:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="3237:23" pos:end="3241:21">else <block pos:start="3237:28" pos:end="3241:21">{<block_content pos:start="3239:25" pos:end="3239:70">

                        <expr_stmt pos:start="3239:25" pos:end="3239:70"><expr pos:start="3239:25" pos:end="3239:69"><call pos:start="3239:25" pos:end="3239:69"><name pos:start="3239:25" pos:end="3239:49">gen_helper_crypto_sha1su1</name><argument_list pos:start="3239:50" pos:end="3239:69">(<argument pos:start="3239:51" pos:end="3239:57"><expr pos:start="3239:51" pos:end="3239:57"><name pos:start="3239:51" pos:end="3239:57">cpu_env</name></expr></argument>, <argument pos:start="3239:60" pos:end="3239:62"><expr pos:start="3239:60" pos:end="3239:62"><name pos:start="3239:60" pos:end="3239:62">tmp</name></expr></argument>, <argument pos:start="3239:65" pos:end="3239:68"><expr pos:start="3239:65" pos:end="3239:68"><name pos:start="3239:65" pos:end="3239:68">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="3243:21" pos:end="3243:43"><expr pos:start="3243:21" pos:end="3243:42"><call pos:start="3243:21" pos:end="3243:42"><name pos:start="3243:21" pos:end="3243:37">tcg_temp_free_i32</name><argument_list pos:start="3243:38" pos:end="3243:42">(<argument pos:start="3243:39" pos:end="3243:41"><expr pos:start="3243:39" pos:end="3243:41"><name pos:start="3243:39" pos:end="3243:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3245:21" pos:end="3245:44"><expr pos:start="3245:21" pos:end="3245:43"><call pos:start="3245:21" pos:end="3245:43"><name pos:start="3245:21" pos:end="3245:37">tcg_temp_free_i32</name><argument_list pos:start="3245:38" pos:end="3245:43">(<argument pos:start="3245:39" pos:end="3245:42"><expr pos:start="3245:39" pos:end="3245:42"><name pos:start="3245:39" pos:end="3245:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3247:21" pos:end="3247:26">break;</break>

                <default pos:start="3249:17" pos:end="3249:24">default:</default>

                <label pos:start="3251:17" pos:end="3251:28"><name pos:start="3251:17" pos:end="3251:27">elementwise</name>:</label>

                    <for pos:start="3253:21" pos:end="3855:21">for <control pos:start="3253:25" pos:end="3253:62">(<init pos:start="3253:26" pos:end="3253:34"><expr pos:start="3253:26" pos:end="3253:33"><name pos:start="3253:26" pos:end="3253:29">pass</name> <operator pos:start="3253:31" pos:end="3253:31">=</operator> <literal type="number" pos:start="3253:33" pos:end="3253:33">0</literal></expr>;</init> <condition pos:start="3253:36" pos:end="3253:54"><expr pos:start="3253:36" pos:end="3253:53"><name pos:start="3253:36" pos:end="3253:39">pass</name> <operator pos:start="3253:41" pos:end="3253:41">&lt;</operator> <operator pos:start="3253:43" pos:end="3253:43">(</operator><ternary pos:start="3253:44" pos:end="3253:52"><condition pos:start="3253:44" pos:end="3253:46"><expr pos:start="3253:44" pos:end="3253:44"><name pos:start="3253:44" pos:end="3253:44">q</name></expr> ?</condition><then pos:start="3253:48" pos:end="3253:48"> <expr pos:start="3253:48" pos:end="3253:48"><literal type="number" pos:start="3253:48" pos:end="3253:48">4</literal></expr> </then><else pos:start="3253:50" pos:end="3253:52">: <expr pos:start="3253:52" pos:end="3253:52"><literal type="number" pos:start="3253:52" pos:end="3253:52">2</literal></expr></else></ternary><operator pos:start="3253:53" pos:end="3253:53">)</operator></expr>;</condition> <incr pos:start="3253:56" pos:end="3253:61"><expr pos:start="3253:56" pos:end="3253:61"><name pos:start="3253:56" pos:end="3253:59">pass</name><operator pos:start="3253:60" pos:end="3253:61">++</operator></expr></incr>)</control> <block pos:start="3253:64" pos:end="3855:21">{<block_content pos:start="3255:25" pos:end="3853:25">

                        <if_stmt pos:start="3255:25" pos:end="3267:25"><if pos:start="3255:25" pos:end="3263:25">if <condition pos:start="3255:28" pos:end="3255:53">(<expr pos:start="3255:29" pos:end="3255:52"><call pos:start="3255:29" pos:end="3255:52"><name pos:start="3255:29" pos:end="3255:48">neon_2rm_is_float_op</name><argument_list pos:start="3255:49" pos:end="3255:52">(<argument pos:start="3255:50" pos:end="3255:51"><expr pos:start="3255:50" pos:end="3255:51"><name pos:start="3255:50" pos:end="3255:51">op</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3255:55" pos:end="3263:25">{<block_content pos:start="3257:29" pos:end="3261:49">

                            <expr_stmt pos:start="3257:29" pos:end="3259:70"><expr pos:start="3257:29" pos:end="3259:69"><call pos:start="3257:29" pos:end="3259:69"><name pos:start="3257:29" pos:end="3257:42">tcg_gen_ld_f32</name><argument_list pos:start="3257:43" pos:end="3259:69">(<argument pos:start="3257:44" pos:end="3257:50"><expr pos:start="3257:44" pos:end="3257:50"><name pos:start="3257:44" pos:end="3257:50">cpu_F0s</name></expr></argument>, <argument pos:start="3257:53" pos:end="3257:59"><expr pos:start="3257:53" pos:end="3257:59"><name pos:start="3257:53" pos:end="3257:59">cpu_env</name></expr></argument>,

                                           <argument pos:start="3259:44" pos:end="3259:68"><expr pos:start="3259:44" pos:end="3259:68"><call pos:start="3259:44" pos:end="3259:68"><name pos:start="3259:44" pos:end="3259:58">neon_reg_offset</name><argument_list pos:start="3259:59" pos:end="3259:68">(<argument pos:start="3259:60" pos:end="3259:61"><expr pos:start="3259:60" pos:end="3259:61"><name pos:start="3259:60" pos:end="3259:61">rm</name></expr></argument>, <argument pos:start="3259:64" pos:end="3259:67"><expr pos:start="3259:64" pos:end="3259:67"><name pos:start="3259:64" pos:end="3259:67">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3261:29" pos:end="3261:49"><expr pos:start="3261:29" pos:end="3261:48"><call pos:start="3261:29" pos:end="3261:48"><name pos:start="3261:29" pos:end="3261:43">TCGV_UNUSED_I32</name><argument_list pos:start="3261:44" pos:end="3261:48">(<argument pos:start="3261:45" pos:end="3261:47"><expr pos:start="3261:45" pos:end="3261:47"><name pos:start="3261:45" pos:end="3261:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="3263:27" pos:end="3267:25">else <block pos:start="3263:32" pos:end="3267:25">{<block_content pos:start="3265:29" pos:end="3265:58">

                            <expr_stmt pos:start="3265:29" pos:end="3265:58"><expr pos:start="3265:29" pos:end="3265:57"><name pos:start="3265:29" pos:end="3265:31">tmp</name> <operator pos:start="3265:33" pos:end="3265:33">=</operator> <call pos:start="3265:35" pos:end="3265:57"><name pos:start="3265:35" pos:end="3265:47">neon_load_reg</name><argument_list pos:start="3265:48" pos:end="3265:57">(<argument pos:start="3265:49" pos:end="3265:50"><expr pos:start="3265:49" pos:end="3265:50"><name pos:start="3265:49" pos:end="3265:50">rm</name></expr></argument>, <argument pos:start="3265:53" pos:end="3265:56"><expr pos:start="3265:53" pos:end="3265:56"><name pos:start="3265:53" pos:end="3265:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <switch pos:start="3269:25" pos:end="3841:25">switch <condition pos:start="3269:32" pos:end="3269:35">(<expr pos:start="3269:33" pos:end="3269:34"><name pos:start="3269:33" pos:end="3269:34">op</name></expr>)</condition> <block pos:start="3269:37" pos:end="3841:25">{<block_content pos:start="3271:25" pos:end="3839:36">

                        <case pos:start="3271:25" pos:end="3271:45">case <expr pos:start="3271:30" pos:end="3271:44"><name pos:start="3271:30" pos:end="3271:44">NEON_2RM_VREV32</name></expr>:</case>

                            <switch pos:start="3273:29" pos:end="3281:29">switch <condition pos:start="3273:36" pos:end="3273:41">(<expr pos:start="3273:37" pos:end="3273:40"><name pos:start="3273:37" pos:end="3273:40">size</name></expr>)</condition> <block pos:start="3273:43" pos:end="3281:29">{<block_content pos:start="3275:29" pos:end="3279:45">

                            <case pos:start="3275:29" pos:end="3275:35">case <expr pos:start="3275:34" pos:end="3275:34"><literal type="number" pos:start="3275:34" pos:end="3275:34">0</literal></expr>:</case> <expr_stmt pos:start="3275:37" pos:end="3275:66"><expr pos:start="3275:37" pos:end="3275:65"><call pos:start="3275:37" pos:end="3275:65"><name pos:start="3275:37" pos:end="3275:55">tcg_gen_bswap32_i32</name><argument_list pos:start="3275:56" pos:end="3275:65">(<argument pos:start="3275:57" pos:end="3275:59"><expr pos:start="3275:57" pos:end="3275:59"><name pos:start="3275:57" pos:end="3275:59">tmp</name></expr></argument>, <argument pos:start="3275:62" pos:end="3275:64"><expr pos:start="3275:62" pos:end="3275:64"><name pos:start="3275:62" pos:end="3275:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3275:68" pos:end="3275:73">break;</break>

                            <case pos:start="3277:29" pos:end="3277:35">case <expr pos:start="3277:34" pos:end="3277:34"><literal type="number" pos:start="3277:34" pos:end="3277:34">1</literal></expr>:</case> <expr_stmt pos:start="3277:37" pos:end="3277:55"><expr pos:start="3277:37" pos:end="3277:54"><call pos:start="3277:37" pos:end="3277:54"><name pos:start="3277:37" pos:end="3277:49">gen_swap_half</name><argument_list pos:start="3277:50" pos:end="3277:54">(<argument pos:start="3277:51" pos:end="3277:53"><expr pos:start="3277:51" pos:end="3277:53"><name pos:start="3277:51" pos:end="3277:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3277:57" pos:end="3277:62">break;</break>

                            <default pos:start="3279:29" pos:end="3279:36">default:</default> <expr_stmt pos:start="3279:38" pos:end="3279:45"><expr pos:start="3279:38" pos:end="3279:44"><call pos:start="3279:38" pos:end="3279:44"><name pos:start="3279:38" pos:end="3279:42">abort</name><argument_list pos:start="3279:43" pos:end="3279:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="3283:29" pos:end="3283:34">break;</break>

                        <case pos:start="3285:25" pos:end="3285:45">case <expr pos:start="3285:30" pos:end="3285:44"><name pos:start="3285:30" pos:end="3285:44">NEON_2RM_VREV16</name></expr>:</case>

                            <expr_stmt pos:start="3287:29" pos:end="3287:43"><expr pos:start="3287:29" pos:end="3287:42"><call pos:start="3287:29" pos:end="3287:42"><name pos:start="3287:29" pos:end="3287:37">gen_rev16</name><argument_list pos:start="3287:38" pos:end="3287:42">(<argument pos:start="3287:39" pos:end="3287:41"><expr pos:start="3287:39" pos:end="3287:41"><name pos:start="3287:39" pos:end="3287:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3289:29" pos:end="3289:34">break;</break>

                        <case pos:start="3291:25" pos:end="3291:43">case <expr pos:start="3291:30" pos:end="3291:42"><name pos:start="3291:30" pos:end="3291:42">NEON_2RM_VCLS</name></expr>:</case>

                            <switch pos:start="3293:29" pos:end="3303:29">switch <condition pos:start="3293:36" pos:end="3293:41">(<expr pos:start="3293:37" pos:end="3293:40"><name pos:start="3293:37" pos:end="3293:40">size</name></expr>)</condition> <block pos:start="3293:43" pos:end="3303:29">{<block_content pos:start="3295:29" pos:end="3301:45">

                            <case pos:start="3295:29" pos:end="3295:35">case <expr pos:start="3295:34" pos:end="3295:34"><literal type="number" pos:start="3295:34" pos:end="3295:34">0</literal></expr>:</case> <expr_stmt pos:start="3295:37" pos:end="3295:69"><expr pos:start="3295:37" pos:end="3295:68"><call pos:start="3295:37" pos:end="3295:68"><name pos:start="3295:37" pos:end="3295:58">gen_helper_neon_cls_s8</name><argument_list pos:start="3295:59" pos:end="3295:68">(<argument pos:start="3295:60" pos:end="3295:62"><expr pos:start="3295:60" pos:end="3295:62"><name pos:start="3295:60" pos:end="3295:62">tmp</name></expr></argument>, <argument pos:start="3295:65" pos:end="3295:67"><expr pos:start="3295:65" pos:end="3295:67"><name pos:start="3295:65" pos:end="3295:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3295:71" pos:end="3295:76">break;</break>

                            <case pos:start="3297:29" pos:end="3297:35">case <expr pos:start="3297:34" pos:end="3297:34"><literal type="number" pos:start="3297:34" pos:end="3297:34">1</literal></expr>:</case> <expr_stmt pos:start="3297:37" pos:end="3297:70"><expr pos:start="3297:37" pos:end="3297:69"><call pos:start="3297:37" pos:end="3297:69"><name pos:start="3297:37" pos:end="3297:59">gen_helper_neon_cls_s16</name><argument_list pos:start="3297:60" pos:end="3297:69">(<argument pos:start="3297:61" pos:end="3297:63"><expr pos:start="3297:61" pos:end="3297:63"><name pos:start="3297:61" pos:end="3297:63">tmp</name></expr></argument>, <argument pos:start="3297:66" pos:end="3297:68"><expr pos:start="3297:66" pos:end="3297:68"><name pos:start="3297:66" pos:end="3297:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3297:72" pos:end="3297:77">break;</break>

                            <case pos:start="3299:29" pos:end="3299:35">case <expr pos:start="3299:34" pos:end="3299:34"><literal type="number" pos:start="3299:34" pos:end="3299:34">2</literal></expr>:</case> <expr_stmt pos:start="3299:37" pos:end="3299:70"><expr pos:start="3299:37" pos:end="3299:69"><call pos:start="3299:37" pos:end="3299:69"><name pos:start="3299:37" pos:end="3299:59">gen_helper_neon_cls_s32</name><argument_list pos:start="3299:60" pos:end="3299:69">(<argument pos:start="3299:61" pos:end="3299:63"><expr pos:start="3299:61" pos:end="3299:63"><name pos:start="3299:61" pos:end="3299:63">tmp</name></expr></argument>, <argument pos:start="3299:66" pos:end="3299:68"><expr pos:start="3299:66" pos:end="3299:68"><name pos:start="3299:66" pos:end="3299:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3299:72" pos:end="3299:77">break;</break>

                            <default pos:start="3301:29" pos:end="3301:36">default:</default> <expr_stmt pos:start="3301:38" pos:end="3301:45"><expr pos:start="3301:38" pos:end="3301:44"><call pos:start="3301:38" pos:end="3301:44"><name pos:start="3301:38" pos:end="3301:42">abort</name><argument_list pos:start="3301:43" pos:end="3301:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="3305:29" pos:end="3305:34">break;</break>

                        <case pos:start="3307:25" pos:end="3307:43">case <expr pos:start="3307:30" pos:end="3307:42"><name pos:start="3307:30" pos:end="3307:42">NEON_2RM_VCLZ</name></expr>:</case>

                            <switch pos:start="3309:29" pos:end="3319:29">switch <condition pos:start="3309:36" pos:end="3309:41">(<expr pos:start="3309:37" pos:end="3309:40"><name pos:start="3309:37" pos:end="3309:40">size</name></expr>)</condition> <block pos:start="3309:43" pos:end="3319:29">{<block_content pos:start="3311:29" pos:end="3317:45">

                            <case pos:start="3311:29" pos:end="3311:35">case <expr pos:start="3311:34" pos:end="3311:34"><literal type="number" pos:start="3311:34" pos:end="3311:34">0</literal></expr>:</case> <expr_stmt pos:start="3311:37" pos:end="3311:69"><expr pos:start="3311:37" pos:end="3311:68"><call pos:start="3311:37" pos:end="3311:68"><name pos:start="3311:37" pos:end="3311:58">gen_helper_neon_clz_u8</name><argument_list pos:start="3311:59" pos:end="3311:68">(<argument pos:start="3311:60" pos:end="3311:62"><expr pos:start="3311:60" pos:end="3311:62"><name pos:start="3311:60" pos:end="3311:62">tmp</name></expr></argument>, <argument pos:start="3311:65" pos:end="3311:67"><expr pos:start="3311:65" pos:end="3311:67"><name pos:start="3311:65" pos:end="3311:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3311:71" pos:end="3311:76">break;</break>

                            <case pos:start="3313:29" pos:end="3313:35">case <expr pos:start="3313:34" pos:end="3313:34"><literal type="number" pos:start="3313:34" pos:end="3313:34">1</literal></expr>:</case> <expr_stmt pos:start="3313:37" pos:end="3313:70"><expr pos:start="3313:37" pos:end="3313:69"><call pos:start="3313:37" pos:end="3313:69"><name pos:start="3313:37" pos:end="3313:59">gen_helper_neon_clz_u16</name><argument_list pos:start="3313:60" pos:end="3313:69">(<argument pos:start="3313:61" pos:end="3313:63"><expr pos:start="3313:61" pos:end="3313:63"><name pos:start="3313:61" pos:end="3313:63">tmp</name></expr></argument>, <argument pos:start="3313:66" pos:end="3313:68"><expr pos:start="3313:66" pos:end="3313:68"><name pos:start="3313:66" pos:end="3313:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3313:72" pos:end="3313:77">break;</break>

                            <case pos:start="3315:29" pos:end="3315:35">case <expr pos:start="3315:34" pos:end="3315:34"><literal type="number" pos:start="3315:34" pos:end="3315:34">2</literal></expr>:</case> <expr_stmt pos:start="3315:37" pos:end="3315:61"><expr pos:start="3315:37" pos:end="3315:60"><call pos:start="3315:37" pos:end="3315:60"><name pos:start="3315:37" pos:end="3315:50">gen_helper_clz</name><argument_list pos:start="3315:51" pos:end="3315:60">(<argument pos:start="3315:52" pos:end="3315:54"><expr pos:start="3315:52" pos:end="3315:54"><name pos:start="3315:52" pos:end="3315:54">tmp</name></expr></argument>, <argument pos:start="3315:57" pos:end="3315:59"><expr pos:start="3315:57" pos:end="3315:59"><name pos:start="3315:57" pos:end="3315:59">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3315:63" pos:end="3315:68">break;</break>

                            <default pos:start="3317:29" pos:end="3317:36">default:</default> <expr_stmt pos:start="3317:38" pos:end="3317:45"><expr pos:start="3317:38" pos:end="3317:44"><call pos:start="3317:38" pos:end="3317:44"><name pos:start="3317:38" pos:end="3317:42">abort</name><argument_list pos:start="3317:43" pos:end="3317:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="3321:29" pos:end="3321:34">break;</break>

                        <case pos:start="3323:25" pos:end="3323:43">case <expr pos:start="3323:30" pos:end="3323:42"><name pos:start="3323:30" pos:end="3323:42">NEON_2RM_VCNT</name></expr>:</case>

                            <expr_stmt pos:start="3325:29" pos:end="3325:61"><expr pos:start="3325:29" pos:end="3325:60"><call pos:start="3325:29" pos:end="3325:60"><name pos:start="3325:29" pos:end="3325:50">gen_helper_neon_cnt_u8</name><argument_list pos:start="3325:51" pos:end="3325:60">(<argument pos:start="3325:52" pos:end="3325:54"><expr pos:start="3325:52" pos:end="3325:54"><name pos:start="3325:52" pos:end="3325:54">tmp</name></expr></argument>, <argument pos:start="3325:57" pos:end="3325:59"><expr pos:start="3325:57" pos:end="3325:59"><name pos:start="3325:57" pos:end="3325:59">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3327:29" pos:end="3327:34">break;</break>

                        <case pos:start="3329:25" pos:end="3329:43">case <expr pos:start="3329:30" pos:end="3329:42"><name pos:start="3329:30" pos:end="3329:42">NEON_2RM_VMVN</name></expr>:</case>

                            <expr_stmt pos:start="3331:29" pos:end="3331:54"><expr pos:start="3331:29" pos:end="3331:53"><call pos:start="3331:29" pos:end="3331:53"><name pos:start="3331:29" pos:end="3331:43">tcg_gen_not_i32</name><argument_list pos:start="3331:44" pos:end="3331:53">(<argument pos:start="3331:45" pos:end="3331:47"><expr pos:start="3331:45" pos:end="3331:47"><name pos:start="3331:45" pos:end="3331:47">tmp</name></expr></argument>, <argument pos:start="3331:50" pos:end="3331:52"><expr pos:start="3331:50" pos:end="3331:52"><name pos:start="3331:50" pos:end="3331:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3333:29" pos:end="3333:34">break;</break>

                        <case pos:start="3335:25" pos:end="3335:44">case <expr pos:start="3335:30" pos:end="3335:43"><name pos:start="3335:30" pos:end="3335:43">NEON_2RM_VQABS</name></expr>:</case>

                            <switch pos:start="3337:29" pos:end="3359:29">switch <condition pos:start="3337:36" pos:end="3337:41">(<expr pos:start="3337:37" pos:end="3337:40"><name pos:start="3337:37" pos:end="3337:40">size</name></expr>)</condition> <block pos:start="3337:43" pos:end="3359:29">{<block_content pos:start="3339:29" pos:end="3357:45">

                            <case pos:start="3339:29" pos:end="3339:35">case <expr pos:start="3339:34" pos:end="3339:34"><literal type="number" pos:start="3339:34" pos:end="3339:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="3341:33" pos:end="3341:75"><expr pos:start="3341:33" pos:end="3341:74"><call pos:start="3341:33" pos:end="3341:74"><name pos:start="3341:33" pos:end="3341:55">gen_helper_neon_qabs_s8</name><argument_list pos:start="3341:56" pos:end="3341:74">(<argument pos:start="3341:57" pos:end="3341:59"><expr pos:start="3341:57" pos:end="3341:59"><name pos:start="3341:57" pos:end="3341:59">tmp</name></expr></argument>, <argument pos:start="3341:62" pos:end="3341:68"><expr pos:start="3341:62" pos:end="3341:68"><name pos:start="3341:62" pos:end="3341:68">cpu_env</name></expr></argument>, <argument pos:start="3341:71" pos:end="3341:73"><expr pos:start="3341:71" pos:end="3341:73"><name pos:start="3341:71" pos:end="3341:73">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="3343:33" pos:end="3343:38">break;</break>

                            <case pos:start="3345:29" pos:end="3345:35">case <expr pos:start="3345:34" pos:end="3345:34"><literal type="number" pos:start="3345:34" pos:end="3345:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="3347:33" pos:end="3347:76"><expr pos:start="3347:33" pos:end="3347:75"><call pos:start="3347:33" pos:end="3347:75"><name pos:start="3347:33" pos:end="3347:56">gen_helper_neon_qabs_s16</name><argument_list pos:start="3347:57" pos:end="3347:75">(<argument pos:start="3347:58" pos:end="3347:60"><expr pos:start="3347:58" pos:end="3347:60"><name pos:start="3347:58" pos:end="3347:60">tmp</name></expr></argument>, <argument pos:start="3347:63" pos:end="3347:69"><expr pos:start="3347:63" pos:end="3347:69"><name pos:start="3347:63" pos:end="3347:69">cpu_env</name></expr></argument>, <argument pos:start="3347:72" pos:end="3347:74"><expr pos:start="3347:72" pos:end="3347:74"><name pos:start="3347:72" pos:end="3347:74">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="3349:33" pos:end="3349:38">break;</break>

                            <case pos:start="3351:29" pos:end="3351:35">case <expr pos:start="3351:34" pos:end="3351:34"><literal type="number" pos:start="3351:34" pos:end="3351:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="3353:33" pos:end="3353:76"><expr pos:start="3353:33" pos:end="3353:75"><call pos:start="3353:33" pos:end="3353:75"><name pos:start="3353:33" pos:end="3353:56">gen_helper_neon_qabs_s32</name><argument_list pos:start="3353:57" pos:end="3353:75">(<argument pos:start="3353:58" pos:end="3353:60"><expr pos:start="3353:58" pos:end="3353:60"><name pos:start="3353:58" pos:end="3353:60">tmp</name></expr></argument>, <argument pos:start="3353:63" pos:end="3353:69"><expr pos:start="3353:63" pos:end="3353:69"><name pos:start="3353:63" pos:end="3353:69">cpu_env</name></expr></argument>, <argument pos:start="3353:72" pos:end="3353:74"><expr pos:start="3353:72" pos:end="3353:74"><name pos:start="3353:72" pos:end="3353:74">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="3355:33" pos:end="3355:38">break;</break>

                            <default pos:start="3357:29" pos:end="3357:36">default:</default> <expr_stmt pos:start="3357:38" pos:end="3357:45"><expr pos:start="3357:38" pos:end="3357:44"><call pos:start="3357:38" pos:end="3357:44"><name pos:start="3357:38" pos:end="3357:42">abort</name><argument_list pos:start="3357:43" pos:end="3357:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="3361:29" pos:end="3361:34">break;</break>

                        <case pos:start="3363:25" pos:end="3363:44">case <expr pos:start="3363:30" pos:end="3363:43"><name pos:start="3363:30" pos:end="3363:43">NEON_2RM_VQNEG</name></expr>:</case>

                            <switch pos:start="3365:29" pos:end="3387:29">switch <condition pos:start="3365:36" pos:end="3365:41">(<expr pos:start="3365:37" pos:end="3365:40"><name pos:start="3365:37" pos:end="3365:40">size</name></expr>)</condition> <block pos:start="3365:43" pos:end="3387:29">{<block_content pos:start="3367:29" pos:end="3385:45">

                            <case pos:start="3367:29" pos:end="3367:35">case <expr pos:start="3367:34" pos:end="3367:34"><literal type="number" pos:start="3367:34" pos:end="3367:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="3369:33" pos:end="3369:75"><expr pos:start="3369:33" pos:end="3369:74"><call pos:start="3369:33" pos:end="3369:74"><name pos:start="3369:33" pos:end="3369:55">gen_helper_neon_qneg_s8</name><argument_list pos:start="3369:56" pos:end="3369:74">(<argument pos:start="3369:57" pos:end="3369:59"><expr pos:start="3369:57" pos:end="3369:59"><name pos:start="3369:57" pos:end="3369:59">tmp</name></expr></argument>, <argument pos:start="3369:62" pos:end="3369:68"><expr pos:start="3369:62" pos:end="3369:68"><name pos:start="3369:62" pos:end="3369:68">cpu_env</name></expr></argument>, <argument pos:start="3369:71" pos:end="3369:73"><expr pos:start="3369:71" pos:end="3369:73"><name pos:start="3369:71" pos:end="3369:73">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="3371:33" pos:end="3371:38">break;</break>

                            <case pos:start="3373:29" pos:end="3373:35">case <expr pos:start="3373:34" pos:end="3373:34"><literal type="number" pos:start="3373:34" pos:end="3373:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="3375:33" pos:end="3375:76"><expr pos:start="3375:33" pos:end="3375:75"><call pos:start="3375:33" pos:end="3375:75"><name pos:start="3375:33" pos:end="3375:56">gen_helper_neon_qneg_s16</name><argument_list pos:start="3375:57" pos:end="3375:75">(<argument pos:start="3375:58" pos:end="3375:60"><expr pos:start="3375:58" pos:end="3375:60"><name pos:start="3375:58" pos:end="3375:60">tmp</name></expr></argument>, <argument pos:start="3375:63" pos:end="3375:69"><expr pos:start="3375:63" pos:end="3375:69"><name pos:start="3375:63" pos:end="3375:69">cpu_env</name></expr></argument>, <argument pos:start="3375:72" pos:end="3375:74"><expr pos:start="3375:72" pos:end="3375:74"><name pos:start="3375:72" pos:end="3375:74">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="3377:33" pos:end="3377:38">break;</break>

                            <case pos:start="3379:29" pos:end="3379:35">case <expr pos:start="3379:34" pos:end="3379:34"><literal type="number" pos:start="3379:34" pos:end="3379:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="3381:33" pos:end="3381:76"><expr pos:start="3381:33" pos:end="3381:75"><call pos:start="3381:33" pos:end="3381:75"><name pos:start="3381:33" pos:end="3381:56">gen_helper_neon_qneg_s32</name><argument_list pos:start="3381:57" pos:end="3381:75">(<argument pos:start="3381:58" pos:end="3381:60"><expr pos:start="3381:58" pos:end="3381:60"><name pos:start="3381:58" pos:end="3381:60">tmp</name></expr></argument>, <argument pos:start="3381:63" pos:end="3381:69"><expr pos:start="3381:63" pos:end="3381:69"><name pos:start="3381:63" pos:end="3381:69">cpu_env</name></expr></argument>, <argument pos:start="3381:72" pos:end="3381:74"><expr pos:start="3381:72" pos:end="3381:74"><name pos:start="3381:72" pos:end="3381:74">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="3383:33" pos:end="3383:38">break;</break>

                            <default pos:start="3385:29" pos:end="3385:36">default:</default> <expr_stmt pos:start="3385:38" pos:end="3385:45"><expr pos:start="3385:38" pos:end="3385:44"><call pos:start="3385:38" pos:end="3385:44"><name pos:start="3385:38" pos:end="3385:42">abort</name><argument_list pos:start="3385:43" pos:end="3385:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="3389:29" pos:end="3389:34">break;</break>

                        <case pos:start="3391:25" pos:end="3391:44">case <expr pos:start="3391:30" pos:end="3391:43"><name pos:start="3391:30" pos:end="3391:43">NEON_2RM_VCGT0</name></expr>:</case> <case pos:start="3391:46" pos:end="3391:65">case <expr pos:start="3391:51" pos:end="3391:64"><name pos:start="3391:51" pos:end="3391:64">NEON_2RM_VCLE0</name></expr>:</case>

                            <expr_stmt pos:start="3393:29" pos:end="3393:52"><expr pos:start="3393:29" pos:end="3393:51"><name pos:start="3393:29" pos:end="3393:32">tmp2</name> <operator pos:start="3393:34" pos:end="3393:34">=</operator> <call pos:start="3393:36" pos:end="3393:51"><name pos:start="3393:36" pos:end="3393:48">tcg_const_i32</name><argument_list pos:start="3393:49" pos:end="3393:51">(<argument pos:start="3393:50" pos:end="3393:50"><expr pos:start="3393:50" pos:end="3393:50"><literal type="number" pos:start="3393:50" pos:end="3393:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="3395:29" pos:end="3405:29">switch<condition pos:start="3395:35" pos:end="3395:40">(<expr pos:start="3395:36" pos:end="3395:39"><name pos:start="3395:36" pos:end="3395:39">size</name></expr>)</condition> <block pos:start="3395:42" pos:end="3405:29">{<block_content pos:start="3397:29" pos:end="3403:45">

                            <case pos:start="3397:29" pos:end="3397:35">case <expr pos:start="3397:34" pos:end="3397:34"><literal type="number" pos:start="3397:34" pos:end="3397:34">0</literal></expr>:</case> <expr_stmt pos:start="3397:37" pos:end="3397:75"><expr pos:start="3397:37" pos:end="3397:74"><call pos:start="3397:37" pos:end="3397:74"><name pos:start="3397:37" pos:end="3397:58">gen_helper_neon_cgt_s8</name><argument_list pos:start="3397:59" pos:end="3397:74">(<argument pos:start="3397:60" pos:end="3397:62"><expr pos:start="3397:60" pos:end="3397:62"><name pos:start="3397:60" pos:end="3397:62">tmp</name></expr></argument>, <argument pos:start="3397:65" pos:end="3397:67"><expr pos:start="3397:65" pos:end="3397:67"><name pos:start="3397:65" pos:end="3397:67">tmp</name></expr></argument>, <argument pos:start="3397:70" pos:end="3397:73"><expr pos:start="3397:70" pos:end="3397:73"><name pos:start="3397:70" pos:end="3397:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3397:77" pos:end="3397:82">break;</break>

                            <case pos:start="3399:29" pos:end="3399:35">case <expr pos:start="3399:34" pos:end="3399:34"><literal type="number" pos:start="3399:34" pos:end="3399:34">1</literal></expr>:</case> <expr_stmt pos:start="3399:37" pos:end="3399:76"><expr pos:start="3399:37" pos:end="3399:75"><call pos:start="3399:37" pos:end="3399:75"><name pos:start="3399:37" pos:end="3399:59">gen_helper_neon_cgt_s16</name><argument_list pos:start="3399:60" pos:end="3399:75">(<argument pos:start="3399:61" pos:end="3399:63"><expr pos:start="3399:61" pos:end="3399:63"><name pos:start="3399:61" pos:end="3399:63">tmp</name></expr></argument>, <argument pos:start="3399:66" pos:end="3399:68"><expr pos:start="3399:66" pos:end="3399:68"><name pos:start="3399:66" pos:end="3399:68">tmp</name></expr></argument>, <argument pos:start="3399:71" pos:end="3399:74"><expr pos:start="3399:71" pos:end="3399:74"><name pos:start="3399:71" pos:end="3399:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3399:78" pos:end="3399:83">break;</break>

                            <case pos:start="3401:29" pos:end="3401:35">case <expr pos:start="3401:34" pos:end="3401:34"><literal type="number" pos:start="3401:34" pos:end="3401:34">2</literal></expr>:</case> <expr_stmt pos:start="3401:37" pos:end="3401:76"><expr pos:start="3401:37" pos:end="3401:75"><call pos:start="3401:37" pos:end="3401:75"><name pos:start="3401:37" pos:end="3401:59">gen_helper_neon_cgt_s32</name><argument_list pos:start="3401:60" pos:end="3401:75">(<argument pos:start="3401:61" pos:end="3401:63"><expr pos:start="3401:61" pos:end="3401:63"><name pos:start="3401:61" pos:end="3401:63">tmp</name></expr></argument>, <argument pos:start="3401:66" pos:end="3401:68"><expr pos:start="3401:66" pos:end="3401:68"><name pos:start="3401:66" pos:end="3401:68">tmp</name></expr></argument>, <argument pos:start="3401:71" pos:end="3401:74"><expr pos:start="3401:71" pos:end="3401:74"><name pos:start="3401:71" pos:end="3401:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3401:78" pos:end="3401:83">break;</break>

                            <default pos:start="3403:29" pos:end="3403:36">default:</default> <expr_stmt pos:start="3403:38" pos:end="3403:45"><expr pos:start="3403:38" pos:end="3403:44"><call pos:start="3403:38" pos:end="3403:44"><name pos:start="3403:38" pos:end="3403:42">abort</name><argument_list pos:start="3403:43" pos:end="3403:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="3407:29" pos:end="3407:52"><expr pos:start="3407:29" pos:end="3407:51"><call pos:start="3407:29" pos:end="3407:51"><name pos:start="3407:29" pos:end="3407:45">tcg_temp_free_i32</name><argument_list pos:start="3407:46" pos:end="3407:51">(<argument pos:start="3407:47" pos:end="3407:50"><expr pos:start="3407:47" pos:end="3407:50"><name pos:start="3407:47" pos:end="3407:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="3409:29" pos:end="3413:29"><if pos:start="3409:29" pos:end="3413:29">if <condition pos:start="3409:32" pos:end="3409:53">(<expr pos:start="3409:33" pos:end="3409:52"><name pos:start="3409:33" pos:end="3409:34">op</name> <operator pos:start="3409:36" pos:end="3409:37">==</operator> <name pos:start="3409:39" pos:end="3409:52">NEON_2RM_VCLE0</name></expr>)</condition> <block pos:start="3409:55" pos:end="3413:29">{<block_content pos:start="3411:33" pos:end="3411:58">

                                <expr_stmt pos:start="3411:33" pos:end="3411:58"><expr pos:start="3411:33" pos:end="3411:57"><call pos:start="3411:33" pos:end="3411:57"><name pos:start="3411:33" pos:end="3411:47">tcg_gen_not_i32</name><argument_list pos:start="3411:48" pos:end="3411:57">(<argument pos:start="3411:49" pos:end="3411:51"><expr pos:start="3411:49" pos:end="3411:51"><name pos:start="3411:49" pos:end="3411:51">tmp</name></expr></argument>, <argument pos:start="3411:54" pos:end="3411:56"><expr pos:start="3411:54" pos:end="3411:56"><name pos:start="3411:54" pos:end="3411:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <break pos:start="3415:29" pos:end="3415:34">break;</break>

                        <case pos:start="3417:25" pos:end="3417:44">case <expr pos:start="3417:30" pos:end="3417:43"><name pos:start="3417:30" pos:end="3417:43">NEON_2RM_VCGE0</name></expr>:</case> <case pos:start="3417:46" pos:end="3417:65">case <expr pos:start="3417:51" pos:end="3417:64"><name pos:start="3417:51" pos:end="3417:64">NEON_2RM_VCLT0</name></expr>:</case>

                            <expr_stmt pos:start="3419:29" pos:end="3419:52"><expr pos:start="3419:29" pos:end="3419:51"><name pos:start="3419:29" pos:end="3419:32">tmp2</name> <operator pos:start="3419:34" pos:end="3419:34">=</operator> <call pos:start="3419:36" pos:end="3419:51"><name pos:start="3419:36" pos:end="3419:48">tcg_const_i32</name><argument_list pos:start="3419:49" pos:end="3419:51">(<argument pos:start="3419:50" pos:end="3419:50"><expr pos:start="3419:50" pos:end="3419:50"><literal type="number" pos:start="3419:50" pos:end="3419:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="3421:29" pos:end="3431:29">switch<condition pos:start="3421:35" pos:end="3421:40">(<expr pos:start="3421:36" pos:end="3421:39"><name pos:start="3421:36" pos:end="3421:39">size</name></expr>)</condition> <block pos:start="3421:42" pos:end="3431:29">{<block_content pos:start="3423:29" pos:end="3429:45">

                            <case pos:start="3423:29" pos:end="3423:35">case <expr pos:start="3423:34" pos:end="3423:34"><literal type="number" pos:start="3423:34" pos:end="3423:34">0</literal></expr>:</case> <expr_stmt pos:start="3423:37" pos:end="3423:75"><expr pos:start="3423:37" pos:end="3423:74"><call pos:start="3423:37" pos:end="3423:74"><name pos:start="3423:37" pos:end="3423:58">gen_helper_neon_cge_s8</name><argument_list pos:start="3423:59" pos:end="3423:74">(<argument pos:start="3423:60" pos:end="3423:62"><expr pos:start="3423:60" pos:end="3423:62"><name pos:start="3423:60" pos:end="3423:62">tmp</name></expr></argument>, <argument pos:start="3423:65" pos:end="3423:67"><expr pos:start="3423:65" pos:end="3423:67"><name pos:start="3423:65" pos:end="3423:67">tmp</name></expr></argument>, <argument pos:start="3423:70" pos:end="3423:73"><expr pos:start="3423:70" pos:end="3423:73"><name pos:start="3423:70" pos:end="3423:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3423:77" pos:end="3423:82">break;</break>

                            <case pos:start="3425:29" pos:end="3425:35">case <expr pos:start="3425:34" pos:end="3425:34"><literal type="number" pos:start="3425:34" pos:end="3425:34">1</literal></expr>:</case> <expr_stmt pos:start="3425:37" pos:end="3425:76"><expr pos:start="3425:37" pos:end="3425:75"><call pos:start="3425:37" pos:end="3425:75"><name pos:start="3425:37" pos:end="3425:59">gen_helper_neon_cge_s16</name><argument_list pos:start="3425:60" pos:end="3425:75">(<argument pos:start="3425:61" pos:end="3425:63"><expr pos:start="3425:61" pos:end="3425:63"><name pos:start="3425:61" pos:end="3425:63">tmp</name></expr></argument>, <argument pos:start="3425:66" pos:end="3425:68"><expr pos:start="3425:66" pos:end="3425:68"><name pos:start="3425:66" pos:end="3425:68">tmp</name></expr></argument>, <argument pos:start="3425:71" pos:end="3425:74"><expr pos:start="3425:71" pos:end="3425:74"><name pos:start="3425:71" pos:end="3425:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3425:78" pos:end="3425:83">break;</break>

                            <case pos:start="3427:29" pos:end="3427:35">case <expr pos:start="3427:34" pos:end="3427:34"><literal type="number" pos:start="3427:34" pos:end="3427:34">2</literal></expr>:</case> <expr_stmt pos:start="3427:37" pos:end="3427:76"><expr pos:start="3427:37" pos:end="3427:75"><call pos:start="3427:37" pos:end="3427:75"><name pos:start="3427:37" pos:end="3427:59">gen_helper_neon_cge_s32</name><argument_list pos:start="3427:60" pos:end="3427:75">(<argument pos:start="3427:61" pos:end="3427:63"><expr pos:start="3427:61" pos:end="3427:63"><name pos:start="3427:61" pos:end="3427:63">tmp</name></expr></argument>, <argument pos:start="3427:66" pos:end="3427:68"><expr pos:start="3427:66" pos:end="3427:68"><name pos:start="3427:66" pos:end="3427:68">tmp</name></expr></argument>, <argument pos:start="3427:71" pos:end="3427:74"><expr pos:start="3427:71" pos:end="3427:74"><name pos:start="3427:71" pos:end="3427:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3427:78" pos:end="3427:83">break;</break>

                            <default pos:start="3429:29" pos:end="3429:36">default:</default> <expr_stmt pos:start="3429:38" pos:end="3429:45"><expr pos:start="3429:38" pos:end="3429:44"><call pos:start="3429:38" pos:end="3429:44"><name pos:start="3429:38" pos:end="3429:42">abort</name><argument_list pos:start="3429:43" pos:end="3429:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="3433:29" pos:end="3433:52"><expr pos:start="3433:29" pos:end="3433:51"><call pos:start="3433:29" pos:end="3433:51"><name pos:start="3433:29" pos:end="3433:45">tcg_temp_free_i32</name><argument_list pos:start="3433:46" pos:end="3433:51">(<argument pos:start="3433:47" pos:end="3433:50"><expr pos:start="3433:47" pos:end="3433:50"><name pos:start="3433:47" pos:end="3433:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="3435:29" pos:end="3439:29"><if pos:start="3435:29" pos:end="3439:29">if <condition pos:start="3435:32" pos:end="3435:53">(<expr pos:start="3435:33" pos:end="3435:52"><name pos:start="3435:33" pos:end="3435:34">op</name> <operator pos:start="3435:36" pos:end="3435:37">==</operator> <name pos:start="3435:39" pos:end="3435:52">NEON_2RM_VCLT0</name></expr>)</condition> <block pos:start="3435:55" pos:end="3439:29">{<block_content pos:start="3437:33" pos:end="3437:58">

                                <expr_stmt pos:start="3437:33" pos:end="3437:58"><expr pos:start="3437:33" pos:end="3437:57"><call pos:start="3437:33" pos:end="3437:57"><name pos:start="3437:33" pos:end="3437:47">tcg_gen_not_i32</name><argument_list pos:start="3437:48" pos:end="3437:57">(<argument pos:start="3437:49" pos:end="3437:51"><expr pos:start="3437:49" pos:end="3437:51"><name pos:start="3437:49" pos:end="3437:51">tmp</name></expr></argument>, <argument pos:start="3437:54" pos:end="3437:56"><expr pos:start="3437:54" pos:end="3437:56"><name pos:start="3437:54" pos:end="3437:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <break pos:start="3441:29" pos:end="3441:34">break;</break>

                        <case pos:start="3443:25" pos:end="3443:44">case <expr pos:start="3443:30" pos:end="3443:43"><name pos:start="3443:30" pos:end="3443:43">NEON_2RM_VCEQ0</name></expr>:</case>

                            <expr_stmt pos:start="3445:29" pos:end="3445:52"><expr pos:start="3445:29" pos:end="3445:51"><name pos:start="3445:29" pos:end="3445:32">tmp2</name> <operator pos:start="3445:34" pos:end="3445:34">=</operator> <call pos:start="3445:36" pos:end="3445:51"><name pos:start="3445:36" pos:end="3445:48">tcg_const_i32</name><argument_list pos:start="3445:49" pos:end="3445:51">(<argument pos:start="3445:50" pos:end="3445:50"><expr pos:start="3445:50" pos:end="3445:50"><literal type="number" pos:start="3445:50" pos:end="3445:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="3447:29" pos:end="3457:29">switch<condition pos:start="3447:35" pos:end="3447:40">(<expr pos:start="3447:36" pos:end="3447:39"><name pos:start="3447:36" pos:end="3447:39">size</name></expr>)</condition> <block pos:start="3447:42" pos:end="3457:29">{<block_content pos:start="3449:29" pos:end="3455:45">

                            <case pos:start="3449:29" pos:end="3449:35">case <expr pos:start="3449:34" pos:end="3449:34"><literal type="number" pos:start="3449:34" pos:end="3449:34">0</literal></expr>:</case> <expr_stmt pos:start="3449:37" pos:end="3449:75"><expr pos:start="3449:37" pos:end="3449:74"><call pos:start="3449:37" pos:end="3449:74"><name pos:start="3449:37" pos:end="3449:58">gen_helper_neon_ceq_u8</name><argument_list pos:start="3449:59" pos:end="3449:74">(<argument pos:start="3449:60" pos:end="3449:62"><expr pos:start="3449:60" pos:end="3449:62"><name pos:start="3449:60" pos:end="3449:62">tmp</name></expr></argument>, <argument pos:start="3449:65" pos:end="3449:67"><expr pos:start="3449:65" pos:end="3449:67"><name pos:start="3449:65" pos:end="3449:67">tmp</name></expr></argument>, <argument pos:start="3449:70" pos:end="3449:73"><expr pos:start="3449:70" pos:end="3449:73"><name pos:start="3449:70" pos:end="3449:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3449:77" pos:end="3449:82">break;</break>

                            <case pos:start="3451:29" pos:end="3451:35">case <expr pos:start="3451:34" pos:end="3451:34"><literal type="number" pos:start="3451:34" pos:end="3451:34">1</literal></expr>:</case> <expr_stmt pos:start="3451:37" pos:end="3451:76"><expr pos:start="3451:37" pos:end="3451:75"><call pos:start="3451:37" pos:end="3451:75"><name pos:start="3451:37" pos:end="3451:59">gen_helper_neon_ceq_u16</name><argument_list pos:start="3451:60" pos:end="3451:75">(<argument pos:start="3451:61" pos:end="3451:63"><expr pos:start="3451:61" pos:end="3451:63"><name pos:start="3451:61" pos:end="3451:63">tmp</name></expr></argument>, <argument pos:start="3451:66" pos:end="3451:68"><expr pos:start="3451:66" pos:end="3451:68"><name pos:start="3451:66" pos:end="3451:68">tmp</name></expr></argument>, <argument pos:start="3451:71" pos:end="3451:74"><expr pos:start="3451:71" pos:end="3451:74"><name pos:start="3451:71" pos:end="3451:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3451:78" pos:end="3451:83">break;</break>

                            <case pos:start="3453:29" pos:end="3453:35">case <expr pos:start="3453:34" pos:end="3453:34"><literal type="number" pos:start="3453:34" pos:end="3453:34">2</literal></expr>:</case> <expr_stmt pos:start="3453:37" pos:end="3453:76"><expr pos:start="3453:37" pos:end="3453:75"><call pos:start="3453:37" pos:end="3453:75"><name pos:start="3453:37" pos:end="3453:59">gen_helper_neon_ceq_u32</name><argument_list pos:start="3453:60" pos:end="3453:75">(<argument pos:start="3453:61" pos:end="3453:63"><expr pos:start="3453:61" pos:end="3453:63"><name pos:start="3453:61" pos:end="3453:63">tmp</name></expr></argument>, <argument pos:start="3453:66" pos:end="3453:68"><expr pos:start="3453:66" pos:end="3453:68"><name pos:start="3453:66" pos:end="3453:68">tmp</name></expr></argument>, <argument pos:start="3453:71" pos:end="3453:74"><expr pos:start="3453:71" pos:end="3453:74"><name pos:start="3453:71" pos:end="3453:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3453:78" pos:end="3453:83">break;</break>

                            <default pos:start="3455:29" pos:end="3455:36">default:</default> <expr_stmt pos:start="3455:38" pos:end="3455:45"><expr pos:start="3455:38" pos:end="3455:44"><call pos:start="3455:38" pos:end="3455:44"><name pos:start="3455:38" pos:end="3455:42">abort</name><argument_list pos:start="3455:43" pos:end="3455:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="3459:29" pos:end="3459:52"><expr pos:start="3459:29" pos:end="3459:51"><call pos:start="3459:29" pos:end="3459:51"><name pos:start="3459:29" pos:end="3459:45">tcg_temp_free_i32</name><argument_list pos:start="3459:46" pos:end="3459:51">(<argument pos:start="3459:47" pos:end="3459:50"><expr pos:start="3459:47" pos:end="3459:50"><name pos:start="3459:47" pos:end="3459:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3461:29" pos:end="3461:34">break;</break>

                        <case pos:start="3463:25" pos:end="3463:43">case <expr pos:start="3463:30" pos:end="3463:42"><name pos:start="3463:30" pos:end="3463:42">NEON_2RM_VABS</name></expr>:</case>

                            <switch pos:start="3465:29" pos:end="3475:29">switch<condition pos:start="3465:35" pos:end="3465:40">(<expr pos:start="3465:36" pos:end="3465:39"><name pos:start="3465:36" pos:end="3465:39">size</name></expr>)</condition> <block pos:start="3465:42" pos:end="3475:29">{<block_content pos:start="3467:29" pos:end="3473:45">

                            <case pos:start="3467:29" pos:end="3467:35">case <expr pos:start="3467:34" pos:end="3467:34"><literal type="number" pos:start="3467:34" pos:end="3467:34">0</literal></expr>:</case> <expr_stmt pos:start="3467:37" pos:end="3467:69"><expr pos:start="3467:37" pos:end="3467:68"><call pos:start="3467:37" pos:end="3467:68"><name pos:start="3467:37" pos:end="3467:58">gen_helper_neon_abs_s8</name><argument_list pos:start="3467:59" pos:end="3467:68">(<argument pos:start="3467:60" pos:end="3467:62"><expr pos:start="3467:60" pos:end="3467:62"><name pos:start="3467:60" pos:end="3467:62">tmp</name></expr></argument>, <argument pos:start="3467:65" pos:end="3467:67"><expr pos:start="3467:65" pos:end="3467:67"><name pos:start="3467:65" pos:end="3467:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3467:71" pos:end="3467:76">break;</break>

                            <case pos:start="3469:29" pos:end="3469:35">case <expr pos:start="3469:34" pos:end="3469:34"><literal type="number" pos:start="3469:34" pos:end="3469:34">1</literal></expr>:</case> <expr_stmt pos:start="3469:37" pos:end="3469:70"><expr pos:start="3469:37" pos:end="3469:69"><call pos:start="3469:37" pos:end="3469:69"><name pos:start="3469:37" pos:end="3469:59">gen_helper_neon_abs_s16</name><argument_list pos:start="3469:60" pos:end="3469:69">(<argument pos:start="3469:61" pos:end="3469:63"><expr pos:start="3469:61" pos:end="3469:63"><name pos:start="3469:61" pos:end="3469:63">tmp</name></expr></argument>, <argument pos:start="3469:66" pos:end="3469:68"><expr pos:start="3469:66" pos:end="3469:68"><name pos:start="3469:66" pos:end="3469:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3469:72" pos:end="3469:77">break;</break>

                            <case pos:start="3471:29" pos:end="3471:35">case <expr pos:start="3471:34" pos:end="3471:34"><literal type="number" pos:start="3471:34" pos:end="3471:34">2</literal></expr>:</case> <expr_stmt pos:start="3471:37" pos:end="3471:62"><expr pos:start="3471:37" pos:end="3471:61"><call pos:start="3471:37" pos:end="3471:61"><name pos:start="3471:37" pos:end="3471:51">tcg_gen_abs_i32</name><argument_list pos:start="3471:52" pos:end="3471:61">(<argument pos:start="3471:53" pos:end="3471:55"><expr pos:start="3471:53" pos:end="3471:55"><name pos:start="3471:53" pos:end="3471:55">tmp</name></expr></argument>, <argument pos:start="3471:58" pos:end="3471:60"><expr pos:start="3471:58" pos:end="3471:60"><name pos:start="3471:58" pos:end="3471:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3471:64" pos:end="3471:69">break;</break>

                            <default pos:start="3473:29" pos:end="3473:36">default:</default> <expr_stmt pos:start="3473:38" pos:end="3473:45"><expr pos:start="3473:38" pos:end="3473:44"><call pos:start="3473:38" pos:end="3473:44"><name pos:start="3473:38" pos:end="3473:42">abort</name><argument_list pos:start="3473:43" pos:end="3473:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="3477:29" pos:end="3477:34">break;</break>

                        <case pos:start="3479:25" pos:end="3479:43">case <expr pos:start="3479:30" pos:end="3479:42"><name pos:start="3479:30" pos:end="3479:42">NEON_2RM_VNEG</name></expr>:</case>

                            <expr_stmt pos:start="3481:29" pos:end="3481:52"><expr pos:start="3481:29" pos:end="3481:51"><name pos:start="3481:29" pos:end="3481:32">tmp2</name> <operator pos:start="3481:34" pos:end="3481:34">=</operator> <call pos:start="3481:36" pos:end="3481:51"><name pos:start="3481:36" pos:end="3481:48">tcg_const_i32</name><argument_list pos:start="3481:49" pos:end="3481:51">(<argument pos:start="3481:50" pos:end="3481:50"><expr pos:start="3481:50" pos:end="3481:50"><literal type="number" pos:start="3481:50" pos:end="3481:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3483:29" pos:end="3483:58"><expr pos:start="3483:29" pos:end="3483:57"><call pos:start="3483:29" pos:end="3483:57"><name pos:start="3483:29" pos:end="3483:40">gen_neon_rsb</name><argument_list pos:start="3483:41" pos:end="3483:57">(<argument pos:start="3483:42" pos:end="3483:45"><expr pos:start="3483:42" pos:end="3483:45"><name pos:start="3483:42" pos:end="3483:45">size</name></expr></argument>, <argument pos:start="3483:48" pos:end="3483:50"><expr pos:start="3483:48" pos:end="3483:50"><name pos:start="3483:48" pos:end="3483:50">tmp</name></expr></argument>, <argument pos:start="3483:53" pos:end="3483:56"><expr pos:start="3483:53" pos:end="3483:56"><name pos:start="3483:53" pos:end="3483:56">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3485:29" pos:end="3485:52"><expr pos:start="3485:29" pos:end="3485:51"><call pos:start="3485:29" pos:end="3485:51"><name pos:start="3485:29" pos:end="3485:45">tcg_temp_free_i32</name><argument_list pos:start="3485:46" pos:end="3485:51">(<argument pos:start="3485:47" pos:end="3485:50"><expr pos:start="3485:47" pos:end="3485:50"><name pos:start="3485:47" pos:end="3485:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3487:29" pos:end="3487:34">break;</break>

                        <case pos:start="3489:25" pos:end="3489:46">case <expr pos:start="3489:30" pos:end="3489:45"><name pos:start="3489:30" pos:end="3489:45">NEON_2RM_VCGT0_F</name></expr>:</case>

                        <block pos:start="3491:25" pos:end="3505:25">{<block_content pos:start="3493:29" pos:end="3503:34">

                            <decl_stmt pos:start="3493:29" pos:end="3493:68"><decl pos:start="3493:29" pos:end="3493:67"><type pos:start="3493:29" pos:end="3493:36"><name pos:start="3493:29" pos:end="3493:36">TCGv_ptr</name></type> <name pos:start="3493:38" pos:end="3493:45">fpstatus</name> <init pos:start="3493:47" pos:end="3493:67">= <expr pos:start="3493:49" pos:end="3493:67"><call pos:start="3493:49" pos:end="3493:67"><name pos:start="3493:49" pos:end="3493:64">get_fpstatus_ptr</name><argument_list pos:start="3493:65" pos:end="3493:67">(<argument pos:start="3493:66" pos:end="3493:66"><expr pos:start="3493:66" pos:end="3493:66"><literal type="number" pos:start="3493:66" pos:end="3493:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3495:29" pos:end="3495:52"><expr pos:start="3495:29" pos:end="3495:51"><name pos:start="3495:29" pos:end="3495:32">tmp2</name> <operator pos:start="3495:34" pos:end="3495:34">=</operator> <call pos:start="3495:36" pos:end="3495:51"><name pos:start="3495:36" pos:end="3495:48">tcg_const_i32</name><argument_list pos:start="3495:49" pos:end="3495:51">(<argument pos:start="3495:50" pos:end="3495:50"><expr pos:start="3495:50" pos:end="3495:50"><literal type="number" pos:start="3495:50" pos:end="3495:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3497:29" pos:end="3497:78"><expr pos:start="3497:29" pos:end="3497:77"><call pos:start="3497:29" pos:end="3497:77"><name pos:start="3497:29" pos:end="3497:51">gen_helper_neon_cgt_f32</name><argument_list pos:start="3497:52" pos:end="3497:77">(<argument pos:start="3497:53" pos:end="3497:55"><expr pos:start="3497:53" pos:end="3497:55"><name pos:start="3497:53" pos:end="3497:55">tmp</name></expr></argument>, <argument pos:start="3497:58" pos:end="3497:60"><expr pos:start="3497:58" pos:end="3497:60"><name pos:start="3497:58" pos:end="3497:60">tmp</name></expr></argument>, <argument pos:start="3497:63" pos:end="3497:66"><expr pos:start="3497:63" pos:end="3497:66"><name pos:start="3497:63" pos:end="3497:66">tmp2</name></expr></argument>, <argument pos:start="3497:69" pos:end="3497:76"><expr pos:start="3497:69" pos:end="3497:76"><name pos:start="3497:69" pos:end="3497:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3499:29" pos:end="3499:52"><expr pos:start="3499:29" pos:end="3499:51"><call pos:start="3499:29" pos:end="3499:51"><name pos:start="3499:29" pos:end="3499:45">tcg_temp_free_i32</name><argument_list pos:start="3499:46" pos:end="3499:51">(<argument pos:start="3499:47" pos:end="3499:50"><expr pos:start="3499:47" pos:end="3499:50"><name pos:start="3499:47" pos:end="3499:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3501:29" pos:end="3501:56"><expr pos:start="3501:29" pos:end="3501:55"><call pos:start="3501:29" pos:end="3501:55"><name pos:start="3501:29" pos:end="3501:45">tcg_temp_free_ptr</name><argument_list pos:start="3501:46" pos:end="3501:55">(<argument pos:start="3501:47" pos:end="3501:54"><expr pos:start="3501:47" pos:end="3501:54"><name pos:start="3501:47" pos:end="3501:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3503:29" pos:end="3503:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3507:25" pos:end="3507:46">case <expr pos:start="3507:30" pos:end="3507:45"><name pos:start="3507:30" pos:end="3507:45">NEON_2RM_VCGE0_F</name></expr>:</case>

                        <block pos:start="3509:25" pos:end="3523:25">{<block_content pos:start="3511:29" pos:end="3521:34">

                            <decl_stmt pos:start="3511:29" pos:end="3511:68"><decl pos:start="3511:29" pos:end="3511:67"><type pos:start="3511:29" pos:end="3511:36"><name pos:start="3511:29" pos:end="3511:36">TCGv_ptr</name></type> <name pos:start="3511:38" pos:end="3511:45">fpstatus</name> <init pos:start="3511:47" pos:end="3511:67">= <expr pos:start="3511:49" pos:end="3511:67"><call pos:start="3511:49" pos:end="3511:67"><name pos:start="3511:49" pos:end="3511:64">get_fpstatus_ptr</name><argument_list pos:start="3511:65" pos:end="3511:67">(<argument pos:start="3511:66" pos:end="3511:66"><expr pos:start="3511:66" pos:end="3511:66"><literal type="number" pos:start="3511:66" pos:end="3511:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3513:29" pos:end="3513:52"><expr pos:start="3513:29" pos:end="3513:51"><name pos:start="3513:29" pos:end="3513:32">tmp2</name> <operator pos:start="3513:34" pos:end="3513:34">=</operator> <call pos:start="3513:36" pos:end="3513:51"><name pos:start="3513:36" pos:end="3513:48">tcg_const_i32</name><argument_list pos:start="3513:49" pos:end="3513:51">(<argument pos:start="3513:50" pos:end="3513:50"><expr pos:start="3513:50" pos:end="3513:50"><literal type="number" pos:start="3513:50" pos:end="3513:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3515:29" pos:end="3515:78"><expr pos:start="3515:29" pos:end="3515:77"><call pos:start="3515:29" pos:end="3515:77"><name pos:start="3515:29" pos:end="3515:51">gen_helper_neon_cge_f32</name><argument_list pos:start="3515:52" pos:end="3515:77">(<argument pos:start="3515:53" pos:end="3515:55"><expr pos:start="3515:53" pos:end="3515:55"><name pos:start="3515:53" pos:end="3515:55">tmp</name></expr></argument>, <argument pos:start="3515:58" pos:end="3515:60"><expr pos:start="3515:58" pos:end="3515:60"><name pos:start="3515:58" pos:end="3515:60">tmp</name></expr></argument>, <argument pos:start="3515:63" pos:end="3515:66"><expr pos:start="3515:63" pos:end="3515:66"><name pos:start="3515:63" pos:end="3515:66">tmp2</name></expr></argument>, <argument pos:start="3515:69" pos:end="3515:76"><expr pos:start="3515:69" pos:end="3515:76"><name pos:start="3515:69" pos:end="3515:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3517:29" pos:end="3517:52"><expr pos:start="3517:29" pos:end="3517:51"><call pos:start="3517:29" pos:end="3517:51"><name pos:start="3517:29" pos:end="3517:45">tcg_temp_free_i32</name><argument_list pos:start="3517:46" pos:end="3517:51">(<argument pos:start="3517:47" pos:end="3517:50"><expr pos:start="3517:47" pos:end="3517:50"><name pos:start="3517:47" pos:end="3517:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3519:29" pos:end="3519:56"><expr pos:start="3519:29" pos:end="3519:55"><call pos:start="3519:29" pos:end="3519:55"><name pos:start="3519:29" pos:end="3519:45">tcg_temp_free_ptr</name><argument_list pos:start="3519:46" pos:end="3519:55">(<argument pos:start="3519:47" pos:end="3519:54"><expr pos:start="3519:47" pos:end="3519:54"><name pos:start="3519:47" pos:end="3519:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3521:29" pos:end="3521:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3525:25" pos:end="3525:46">case <expr pos:start="3525:30" pos:end="3525:45"><name pos:start="3525:30" pos:end="3525:45">NEON_2RM_VCEQ0_F</name></expr>:</case>

                        <block pos:start="3527:25" pos:end="3541:25">{<block_content pos:start="3529:29" pos:end="3539:34">

                            <decl_stmt pos:start="3529:29" pos:end="3529:68"><decl pos:start="3529:29" pos:end="3529:67"><type pos:start="3529:29" pos:end="3529:36"><name pos:start="3529:29" pos:end="3529:36">TCGv_ptr</name></type> <name pos:start="3529:38" pos:end="3529:45">fpstatus</name> <init pos:start="3529:47" pos:end="3529:67">= <expr pos:start="3529:49" pos:end="3529:67"><call pos:start="3529:49" pos:end="3529:67"><name pos:start="3529:49" pos:end="3529:64">get_fpstatus_ptr</name><argument_list pos:start="3529:65" pos:end="3529:67">(<argument pos:start="3529:66" pos:end="3529:66"><expr pos:start="3529:66" pos:end="3529:66"><literal type="number" pos:start="3529:66" pos:end="3529:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3531:29" pos:end="3531:52"><expr pos:start="3531:29" pos:end="3531:51"><name pos:start="3531:29" pos:end="3531:32">tmp2</name> <operator pos:start="3531:34" pos:end="3531:34">=</operator> <call pos:start="3531:36" pos:end="3531:51"><name pos:start="3531:36" pos:end="3531:48">tcg_const_i32</name><argument_list pos:start="3531:49" pos:end="3531:51">(<argument pos:start="3531:50" pos:end="3531:50"><expr pos:start="3531:50" pos:end="3531:50"><literal type="number" pos:start="3531:50" pos:end="3531:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3533:29" pos:end="3533:78"><expr pos:start="3533:29" pos:end="3533:77"><call pos:start="3533:29" pos:end="3533:77"><name pos:start="3533:29" pos:end="3533:51">gen_helper_neon_ceq_f32</name><argument_list pos:start="3533:52" pos:end="3533:77">(<argument pos:start="3533:53" pos:end="3533:55"><expr pos:start="3533:53" pos:end="3533:55"><name pos:start="3533:53" pos:end="3533:55">tmp</name></expr></argument>, <argument pos:start="3533:58" pos:end="3533:60"><expr pos:start="3533:58" pos:end="3533:60"><name pos:start="3533:58" pos:end="3533:60">tmp</name></expr></argument>, <argument pos:start="3533:63" pos:end="3533:66"><expr pos:start="3533:63" pos:end="3533:66"><name pos:start="3533:63" pos:end="3533:66">tmp2</name></expr></argument>, <argument pos:start="3533:69" pos:end="3533:76"><expr pos:start="3533:69" pos:end="3533:76"><name pos:start="3533:69" pos:end="3533:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3535:29" pos:end="3535:52"><expr pos:start="3535:29" pos:end="3535:51"><call pos:start="3535:29" pos:end="3535:51"><name pos:start="3535:29" pos:end="3535:45">tcg_temp_free_i32</name><argument_list pos:start="3535:46" pos:end="3535:51">(<argument pos:start="3535:47" pos:end="3535:50"><expr pos:start="3535:47" pos:end="3535:50"><name pos:start="3535:47" pos:end="3535:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3537:29" pos:end="3537:56"><expr pos:start="3537:29" pos:end="3537:55"><call pos:start="3537:29" pos:end="3537:55"><name pos:start="3537:29" pos:end="3537:45">tcg_temp_free_ptr</name><argument_list pos:start="3537:46" pos:end="3537:55">(<argument pos:start="3537:47" pos:end="3537:54"><expr pos:start="3537:47" pos:end="3537:54"><name pos:start="3537:47" pos:end="3537:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3539:29" pos:end="3539:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3543:25" pos:end="3543:46">case <expr pos:start="3543:30" pos:end="3543:45"><name pos:start="3543:30" pos:end="3543:45">NEON_2RM_VCLE0_F</name></expr>:</case>

                        <block pos:start="3545:25" pos:end="3559:25">{<block_content pos:start="3547:29" pos:end="3557:34">

                            <decl_stmt pos:start="3547:29" pos:end="3547:68"><decl pos:start="3547:29" pos:end="3547:67"><type pos:start="3547:29" pos:end="3547:36"><name pos:start="3547:29" pos:end="3547:36">TCGv_ptr</name></type> <name pos:start="3547:38" pos:end="3547:45">fpstatus</name> <init pos:start="3547:47" pos:end="3547:67">= <expr pos:start="3547:49" pos:end="3547:67"><call pos:start="3547:49" pos:end="3547:67"><name pos:start="3547:49" pos:end="3547:64">get_fpstatus_ptr</name><argument_list pos:start="3547:65" pos:end="3547:67">(<argument pos:start="3547:66" pos:end="3547:66"><expr pos:start="3547:66" pos:end="3547:66"><literal type="number" pos:start="3547:66" pos:end="3547:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3549:29" pos:end="3549:52"><expr pos:start="3549:29" pos:end="3549:51"><name pos:start="3549:29" pos:end="3549:32">tmp2</name> <operator pos:start="3549:34" pos:end="3549:34">=</operator> <call pos:start="3549:36" pos:end="3549:51"><name pos:start="3549:36" pos:end="3549:48">tcg_const_i32</name><argument_list pos:start="3549:49" pos:end="3549:51">(<argument pos:start="3549:50" pos:end="3549:50"><expr pos:start="3549:50" pos:end="3549:50"><literal type="number" pos:start="3549:50" pos:end="3549:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3551:29" pos:end="3551:78"><expr pos:start="3551:29" pos:end="3551:77"><call pos:start="3551:29" pos:end="3551:77"><name pos:start="3551:29" pos:end="3551:51">gen_helper_neon_cge_f32</name><argument_list pos:start="3551:52" pos:end="3551:77">(<argument pos:start="3551:53" pos:end="3551:55"><expr pos:start="3551:53" pos:end="3551:55"><name pos:start="3551:53" pos:end="3551:55">tmp</name></expr></argument>, <argument pos:start="3551:58" pos:end="3551:61"><expr pos:start="3551:58" pos:end="3551:61"><name pos:start="3551:58" pos:end="3551:61">tmp2</name></expr></argument>, <argument pos:start="3551:64" pos:end="3551:66"><expr pos:start="3551:64" pos:end="3551:66"><name pos:start="3551:64" pos:end="3551:66">tmp</name></expr></argument>, <argument pos:start="3551:69" pos:end="3551:76"><expr pos:start="3551:69" pos:end="3551:76"><name pos:start="3551:69" pos:end="3551:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3553:29" pos:end="3553:52"><expr pos:start="3553:29" pos:end="3553:51"><call pos:start="3553:29" pos:end="3553:51"><name pos:start="3553:29" pos:end="3553:45">tcg_temp_free_i32</name><argument_list pos:start="3553:46" pos:end="3553:51">(<argument pos:start="3553:47" pos:end="3553:50"><expr pos:start="3553:47" pos:end="3553:50"><name pos:start="3553:47" pos:end="3553:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3555:29" pos:end="3555:56"><expr pos:start="3555:29" pos:end="3555:55"><call pos:start="3555:29" pos:end="3555:55"><name pos:start="3555:29" pos:end="3555:45">tcg_temp_free_ptr</name><argument_list pos:start="3555:46" pos:end="3555:55">(<argument pos:start="3555:47" pos:end="3555:54"><expr pos:start="3555:47" pos:end="3555:54"><name pos:start="3555:47" pos:end="3555:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3557:29" pos:end="3557:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3561:25" pos:end="3561:46">case <expr pos:start="3561:30" pos:end="3561:45"><name pos:start="3561:30" pos:end="3561:45">NEON_2RM_VCLT0_F</name></expr>:</case>

                        <block pos:start="3563:25" pos:end="3577:25">{<block_content pos:start="3565:29" pos:end="3575:34">

                            <decl_stmt pos:start="3565:29" pos:end="3565:68"><decl pos:start="3565:29" pos:end="3565:67"><type pos:start="3565:29" pos:end="3565:36"><name pos:start="3565:29" pos:end="3565:36">TCGv_ptr</name></type> <name pos:start="3565:38" pos:end="3565:45">fpstatus</name> <init pos:start="3565:47" pos:end="3565:67">= <expr pos:start="3565:49" pos:end="3565:67"><call pos:start="3565:49" pos:end="3565:67"><name pos:start="3565:49" pos:end="3565:64">get_fpstatus_ptr</name><argument_list pos:start="3565:65" pos:end="3565:67">(<argument pos:start="3565:66" pos:end="3565:66"><expr pos:start="3565:66" pos:end="3565:66"><literal type="number" pos:start="3565:66" pos:end="3565:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3567:29" pos:end="3567:52"><expr pos:start="3567:29" pos:end="3567:51"><name pos:start="3567:29" pos:end="3567:32">tmp2</name> <operator pos:start="3567:34" pos:end="3567:34">=</operator> <call pos:start="3567:36" pos:end="3567:51"><name pos:start="3567:36" pos:end="3567:48">tcg_const_i32</name><argument_list pos:start="3567:49" pos:end="3567:51">(<argument pos:start="3567:50" pos:end="3567:50"><expr pos:start="3567:50" pos:end="3567:50"><literal type="number" pos:start="3567:50" pos:end="3567:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3569:29" pos:end="3569:78"><expr pos:start="3569:29" pos:end="3569:77"><call pos:start="3569:29" pos:end="3569:77"><name pos:start="3569:29" pos:end="3569:51">gen_helper_neon_cgt_f32</name><argument_list pos:start="3569:52" pos:end="3569:77">(<argument pos:start="3569:53" pos:end="3569:55"><expr pos:start="3569:53" pos:end="3569:55"><name pos:start="3569:53" pos:end="3569:55">tmp</name></expr></argument>, <argument pos:start="3569:58" pos:end="3569:61"><expr pos:start="3569:58" pos:end="3569:61"><name pos:start="3569:58" pos:end="3569:61">tmp2</name></expr></argument>, <argument pos:start="3569:64" pos:end="3569:66"><expr pos:start="3569:64" pos:end="3569:66"><name pos:start="3569:64" pos:end="3569:66">tmp</name></expr></argument>, <argument pos:start="3569:69" pos:end="3569:76"><expr pos:start="3569:69" pos:end="3569:76"><name pos:start="3569:69" pos:end="3569:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3571:29" pos:end="3571:52"><expr pos:start="3571:29" pos:end="3571:51"><call pos:start="3571:29" pos:end="3571:51"><name pos:start="3571:29" pos:end="3571:45">tcg_temp_free_i32</name><argument_list pos:start="3571:46" pos:end="3571:51">(<argument pos:start="3571:47" pos:end="3571:50"><expr pos:start="3571:47" pos:end="3571:50"><name pos:start="3571:47" pos:end="3571:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3573:29" pos:end="3573:56"><expr pos:start="3573:29" pos:end="3573:55"><call pos:start="3573:29" pos:end="3573:55"><name pos:start="3573:29" pos:end="3573:45">tcg_temp_free_ptr</name><argument_list pos:start="3573:46" pos:end="3573:55">(<argument pos:start="3573:47" pos:end="3573:54"><expr pos:start="3573:47" pos:end="3573:54"><name pos:start="3573:47" pos:end="3573:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3575:29" pos:end="3575:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3579:25" pos:end="3579:45">case <expr pos:start="3579:30" pos:end="3579:44"><name pos:start="3579:30" pos:end="3579:44">NEON_2RM_VABS_F</name></expr>:</case>

                            <expr_stmt pos:start="3581:29" pos:end="3581:43"><expr pos:start="3581:29" pos:end="3581:42"><call pos:start="3581:29" pos:end="3581:42"><name pos:start="3581:29" pos:end="3581:39">gen_vfp_abs</name><argument_list pos:start="3581:40" pos:end="3581:42">(<argument pos:start="3581:41" pos:end="3581:41"><expr pos:start="3581:41" pos:end="3581:41"><literal type="number" pos:start="3581:41" pos:end="3581:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3583:29" pos:end="3583:34">break;</break>

                        <case pos:start="3585:25" pos:end="3585:45">case <expr pos:start="3585:30" pos:end="3585:44"><name pos:start="3585:30" pos:end="3585:44">NEON_2RM_VNEG_F</name></expr>:</case>

                            <expr_stmt pos:start="3587:29" pos:end="3587:43"><expr pos:start="3587:29" pos:end="3587:42"><call pos:start="3587:29" pos:end="3587:42"><name pos:start="3587:29" pos:end="3587:39">gen_vfp_neg</name><argument_list pos:start="3587:40" pos:end="3587:42">(<argument pos:start="3587:41" pos:end="3587:41"><expr pos:start="3587:41" pos:end="3587:41"><literal type="number" pos:start="3587:41" pos:end="3587:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3589:29" pos:end="3589:34">break;</break>

                        <case pos:start="3591:25" pos:end="3591:43">case <expr pos:start="3591:30" pos:end="3591:42"><name pos:start="3591:30" pos:end="3591:42">NEON_2RM_VSWP</name></expr>:</case>

                            <expr_stmt pos:start="3593:29" pos:end="3593:59"><expr pos:start="3593:29" pos:end="3593:58"><name pos:start="3593:29" pos:end="3593:32">tmp2</name> <operator pos:start="3593:34" pos:end="3593:34">=</operator> <call pos:start="3593:36" pos:end="3593:58"><name pos:start="3593:36" pos:end="3593:48">neon_load_reg</name><argument_list pos:start="3593:49" pos:end="3593:58">(<argument pos:start="3593:50" pos:end="3593:51"><expr pos:start="3593:50" pos:end="3593:51"><name pos:start="3593:50" pos:end="3593:51">rd</name></expr></argument>, <argument pos:start="3593:54" pos:end="3593:57"><expr pos:start="3593:54" pos:end="3593:57"><name pos:start="3593:54" pos:end="3593:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3595:29" pos:end="3595:59"><expr pos:start="3595:29" pos:end="3595:58"><call pos:start="3595:29" pos:end="3595:58"><name pos:start="3595:29" pos:end="3595:42">neon_store_reg</name><argument_list pos:start="3595:43" pos:end="3595:58">(<argument pos:start="3595:44" pos:end="3595:45"><expr pos:start="3595:44" pos:end="3595:45"><name pos:start="3595:44" pos:end="3595:45">rm</name></expr></argument>, <argument pos:start="3595:48" pos:end="3595:51"><expr pos:start="3595:48" pos:end="3595:51"><name pos:start="3595:48" pos:end="3595:51">pass</name></expr></argument>, <argument pos:start="3595:54" pos:end="3595:57"><expr pos:start="3595:54" pos:end="3595:57"><name pos:start="3595:54" pos:end="3595:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3597:29" pos:end="3597:34">break;</break>

                        <case pos:start="3599:25" pos:end="3599:43">case <expr pos:start="3599:30" pos:end="3599:42"><name pos:start="3599:30" pos:end="3599:42">NEON_2RM_VTRN</name></expr>:</case>

                            <expr_stmt pos:start="3601:29" pos:end="3601:59"><expr pos:start="3601:29" pos:end="3601:58"><name pos:start="3601:29" pos:end="3601:32">tmp2</name> <operator pos:start="3601:34" pos:end="3601:34">=</operator> <call pos:start="3601:36" pos:end="3601:58"><name pos:start="3601:36" pos:end="3601:48">neon_load_reg</name><argument_list pos:start="3601:49" pos:end="3601:58">(<argument pos:start="3601:50" pos:end="3601:51"><expr pos:start="3601:50" pos:end="3601:51"><name pos:start="3601:50" pos:end="3601:51">rd</name></expr></argument>, <argument pos:start="3601:54" pos:end="3601:57"><expr pos:start="3601:54" pos:end="3601:57"><name pos:start="3601:54" pos:end="3601:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="3603:29" pos:end="3611:29">switch <condition pos:start="3603:36" pos:end="3603:41">(<expr pos:start="3603:37" pos:end="3603:40"><name pos:start="3603:37" pos:end="3603:40">size</name></expr>)</condition> <block pos:start="3603:43" pos:end="3611:29">{<block_content pos:start="3605:29" pos:end="3609:45">

                            <case pos:start="3605:29" pos:end="3605:35">case <expr pos:start="3605:34" pos:end="3605:34"><literal type="number" pos:start="3605:34" pos:end="3605:34">0</literal></expr>:</case> <expr_stmt pos:start="3605:37" pos:end="3605:63"><expr pos:start="3605:37" pos:end="3605:62"><call pos:start="3605:37" pos:end="3605:62"><name pos:start="3605:37" pos:end="3605:51">gen_neon_trn_u8</name><argument_list pos:start="3605:52" pos:end="3605:62">(<argument pos:start="3605:53" pos:end="3605:55"><expr pos:start="3605:53" pos:end="3605:55"><name pos:start="3605:53" pos:end="3605:55">tmp</name></expr></argument>, <argument pos:start="3605:58" pos:end="3605:61"><expr pos:start="3605:58" pos:end="3605:61"><name pos:start="3605:58" pos:end="3605:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3605:65" pos:end="3605:70">break;</break>

                            <case pos:start="3607:29" pos:end="3607:35">case <expr pos:start="3607:34" pos:end="3607:34"><literal type="number" pos:start="3607:34" pos:end="3607:34">1</literal></expr>:</case> <expr_stmt pos:start="3607:37" pos:end="3607:64"><expr pos:start="3607:37" pos:end="3607:63"><call pos:start="3607:37" pos:end="3607:63"><name pos:start="3607:37" pos:end="3607:52">gen_neon_trn_u16</name><argument_list pos:start="3607:53" pos:end="3607:63">(<argument pos:start="3607:54" pos:end="3607:56"><expr pos:start="3607:54" pos:end="3607:56"><name pos:start="3607:54" pos:end="3607:56">tmp</name></expr></argument>, <argument pos:start="3607:59" pos:end="3607:62"><expr pos:start="3607:59" pos:end="3607:62"><name pos:start="3607:59" pos:end="3607:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3607:66" pos:end="3607:71">break;</break>

                            <default pos:start="3609:29" pos:end="3609:36">default:</default> <expr_stmt pos:start="3609:38" pos:end="3609:45"><expr pos:start="3609:38" pos:end="3609:44"><call pos:start="3609:38" pos:end="3609:44"><name pos:start="3609:38" pos:end="3609:42">abort</name><argument_list pos:start="3609:43" pos:end="3609:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="3613:29" pos:end="3613:59"><expr pos:start="3613:29" pos:end="3613:58"><call pos:start="3613:29" pos:end="3613:58"><name pos:start="3613:29" pos:end="3613:42">neon_store_reg</name><argument_list pos:start="3613:43" pos:end="3613:58">(<argument pos:start="3613:44" pos:end="3613:45"><expr pos:start="3613:44" pos:end="3613:45"><name pos:start="3613:44" pos:end="3613:45">rm</name></expr></argument>, <argument pos:start="3613:48" pos:end="3613:51"><expr pos:start="3613:48" pos:end="3613:51"><name pos:start="3613:48" pos:end="3613:51">pass</name></expr></argument>, <argument pos:start="3613:54" pos:end="3613:57"><expr pos:start="3613:54" pos:end="3613:57"><name pos:start="3613:54" pos:end="3613:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3615:29" pos:end="3615:34">break;</break>

                        <case pos:start="3617:25" pos:end="3617:45">case <expr pos:start="3617:30" pos:end="3617:44"><name pos:start="3617:30" pos:end="3617:44">NEON_2RM_VRINTN</name></expr>:</case>

                        <case pos:start="3619:25" pos:end="3619:45">case <expr pos:start="3619:30" pos:end="3619:44"><name pos:start="3619:30" pos:end="3619:44">NEON_2RM_VRINTA</name></expr>:</case>

                        <case pos:start="3621:25" pos:end="3621:45">case <expr pos:start="3621:30" pos:end="3621:44"><name pos:start="3621:30" pos:end="3621:44">NEON_2RM_VRINTM</name></expr>:</case>

                        <case pos:start="3623:25" pos:end="3623:45">case <expr pos:start="3623:30" pos:end="3623:44"><name pos:start="3623:30" pos:end="3623:44">NEON_2RM_VRINTP</name></expr>:</case>

                        <case pos:start="3625:25" pos:end="3625:45">case <expr pos:start="3625:30" pos:end="3625:44"><name pos:start="3625:30" pos:end="3625:44">NEON_2RM_VRINTZ</name></expr>:</case>

                        <block pos:start="3627:25" pos:end="3667:25">{<block_content pos:start="3629:29" pos:end="3665:34">

                            <decl_stmt pos:start="3629:29" pos:end="3629:47"><decl pos:start="3629:29" pos:end="3629:46"><type pos:start="3629:29" pos:end="3629:36"><name pos:start="3629:29" pos:end="3629:36">TCGv_i32</name></type> <name pos:start="3629:38" pos:end="3629:46">tcg_rmode</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="3631:29" pos:end="3631:68"><decl pos:start="3631:29" pos:end="3631:67"><type pos:start="3631:29" pos:end="3631:36"><name pos:start="3631:29" pos:end="3631:36">TCGv_ptr</name></type> <name pos:start="3631:38" pos:end="3631:45">fpstatus</name> <init pos:start="3631:47" pos:end="3631:67">= <expr pos:start="3631:49" pos:end="3631:67"><call pos:start="3631:49" pos:end="3631:67"><name pos:start="3631:49" pos:end="3631:64">get_fpstatus_ptr</name><argument_list pos:start="3631:65" pos:end="3631:67">(<argument pos:start="3631:66" pos:end="3631:66"><expr pos:start="3631:66" pos:end="3631:66"><literal type="number" pos:start="3631:66" pos:end="3631:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="3633:29" pos:end="3633:38"><decl pos:start="3633:29" pos:end="3633:37"><type pos:start="3633:29" pos:end="3633:31"><name pos:start="3633:29" pos:end="3633:31">int</name></type> <name pos:start="3633:33" pos:end="3633:37">rmode</name></decl>;</decl_stmt>



                            <if_stmt pos:start="3637:29" pos:end="3645:29"><if pos:start="3637:29" pos:end="3641:29">if <condition pos:start="3637:32" pos:end="3637:54">(<expr pos:start="3637:33" pos:end="3637:53"><name pos:start="3637:33" pos:end="3637:34">op</name> <operator pos:start="3637:36" pos:end="3637:37">==</operator> <name pos:start="3637:39" pos:end="3637:53">NEON_2RM_VRINTZ</name></expr>)</condition> <block pos:start="3637:56" pos:end="3641:29">{<block_content pos:start="3639:33" pos:end="3639:56">

                                <expr_stmt pos:start="3639:33" pos:end="3639:56"><expr pos:start="3639:33" pos:end="3639:55"><name pos:start="3639:33" pos:end="3639:37">rmode</name> <operator pos:start="3639:39" pos:end="3639:39">=</operator> <name pos:start="3639:41" pos:end="3639:55">FPROUNDING_ZERO</name></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="3641:31" pos:end="3645:29">else <block pos:start="3641:36" pos:end="3645:29">{<block_content pos:start="3643:33" pos:end="3643:76">

                                <expr_stmt pos:start="3643:33" pos:end="3643:76"><expr pos:start="3643:33" pos:end="3643:75"><name pos:start="3643:33" pos:end="3643:37">rmode</name> <operator pos:start="3643:39" pos:end="3643:39">=</operator> <name pos:start="3643:41" pos:end="3643:75"><name pos:start="3643:41" pos:end="3643:52">fp_decode_rm</name><index pos:start="3643:53" pos:end="3643:75">[<expr pos:start="3643:54" pos:end="3643:74"><operator pos:start="3643:54" pos:end="3643:54">(</operator><operator pos:start="3643:55" pos:end="3643:55">(</operator><name pos:start="3643:56" pos:end="3643:57">op</name> <operator pos:start="3643:59" pos:end="3643:59">&amp;</operator> <literal type="number" pos:start="3643:61" pos:end="3643:63">0x6</literal><operator pos:start="3643:64" pos:end="3643:64">)</operator> <operator pos:start="3643:66" pos:end="3643:67">&gt;&gt;</operator> <literal type="number" pos:start="3643:69" pos:end="3643:69">1</literal><operator pos:start="3643:70" pos:end="3643:70">)</operator> <operator pos:start="3643:72" pos:end="3643:72">^</operator> <literal type="number" pos:start="3643:74" pos:end="3643:74">1</literal></expr>]</index></name></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>



                            <expr_stmt pos:start="3649:29" pos:end="3649:78"><expr pos:start="3649:29" pos:end="3649:77"><name pos:start="3649:29" pos:end="3649:37">tcg_rmode</name> <operator pos:start="3649:39" pos:end="3649:39">=</operator> <call pos:start="3649:41" pos:end="3649:77"><name pos:start="3649:41" pos:end="3649:53">tcg_const_i32</name><argument_list pos:start="3649:54" pos:end="3649:77">(<argument pos:start="3649:55" pos:end="3649:76"><expr pos:start="3649:55" pos:end="3649:76"><call pos:start="3649:55" pos:end="3649:76"><name pos:start="3649:55" pos:end="3649:69">arm_rmode_to_sf</name><argument_list pos:start="3649:70" pos:end="3649:76">(<argument pos:start="3649:71" pos:end="3649:75"><expr pos:start="3649:71" pos:end="3649:75"><name pos:start="3649:71" pos:end="3649:75">rmode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3651:29" pos:end="3653:63"><expr pos:start="3651:29" pos:end="3653:62"><call pos:start="3651:29" pos:end="3653:62"><name pos:start="3651:29" pos:end="3651:53">gen_helper_set_neon_rmode</name><argument_list pos:start="3651:54" pos:end="3653:62">(<argument pos:start="3651:55" pos:end="3651:63"><expr pos:start="3651:55" pos:end="3651:63"><name pos:start="3651:55" pos:end="3651:63">tcg_rmode</name></expr></argument>, <argument pos:start="3651:66" pos:end="3651:74"><expr pos:start="3651:66" pos:end="3651:74"><name pos:start="3651:66" pos:end="3651:74">tcg_rmode</name></expr></argument>,

                                                      <argument pos:start="3653:55" pos:end="3653:61"><expr pos:start="3653:55" pos:end="3653:61"><name pos:start="3653:55" pos:end="3653:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3655:29" pos:end="3655:73"><expr pos:start="3655:29" pos:end="3655:72"><call pos:start="3655:29" pos:end="3655:72"><name pos:start="3655:29" pos:end="3655:44">gen_helper_rints</name><argument_list pos:start="3655:45" pos:end="3655:72">(<argument pos:start="3655:46" pos:end="3655:52"><expr pos:start="3655:46" pos:end="3655:52"><name pos:start="3655:46" pos:end="3655:52">cpu_F0s</name></expr></argument>, <argument pos:start="3655:55" pos:end="3655:61"><expr pos:start="3655:55" pos:end="3655:61"><name pos:start="3655:55" pos:end="3655:61">cpu_F0s</name></expr></argument>, <argument pos:start="3655:64" pos:end="3655:71"><expr pos:start="3655:64" pos:end="3655:71"><name pos:start="3655:64" pos:end="3655:71">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3657:29" pos:end="3659:63"><expr pos:start="3657:29" pos:end="3659:62"><call pos:start="3657:29" pos:end="3659:62"><name pos:start="3657:29" pos:end="3657:53">gen_helper_set_neon_rmode</name><argument_list pos:start="3657:54" pos:end="3659:62">(<argument pos:start="3657:55" pos:end="3657:63"><expr pos:start="3657:55" pos:end="3657:63"><name pos:start="3657:55" pos:end="3657:63">tcg_rmode</name></expr></argument>, <argument pos:start="3657:66" pos:end="3657:74"><expr pos:start="3657:66" pos:end="3657:74"><name pos:start="3657:66" pos:end="3657:74">tcg_rmode</name></expr></argument>,

                                                      <argument pos:start="3659:55" pos:end="3659:61"><expr pos:start="3659:55" pos:end="3659:61"><name pos:start="3659:55" pos:end="3659:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3661:29" pos:end="3661:56"><expr pos:start="3661:29" pos:end="3661:55"><call pos:start="3661:29" pos:end="3661:55"><name pos:start="3661:29" pos:end="3661:45">tcg_temp_free_ptr</name><argument_list pos:start="3661:46" pos:end="3661:55">(<argument pos:start="3661:47" pos:end="3661:54"><expr pos:start="3661:47" pos:end="3661:54"><name pos:start="3661:47" pos:end="3661:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3663:29" pos:end="3663:57"><expr pos:start="3663:29" pos:end="3663:56"><call pos:start="3663:29" pos:end="3663:56"><name pos:start="3663:29" pos:end="3663:45">tcg_temp_free_i32</name><argument_list pos:start="3663:46" pos:end="3663:56">(<argument pos:start="3663:47" pos:end="3663:55"><expr pos:start="3663:47" pos:end="3663:55"><name pos:start="3663:47" pos:end="3663:55">tcg_rmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3665:29" pos:end="3665:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3669:25" pos:end="3669:45">case <expr pos:start="3669:30" pos:end="3669:44"><name pos:start="3669:30" pos:end="3669:44">NEON_2RM_VRINTX</name></expr>:</case>

                        <block pos:start="3671:25" pos:end="3681:25">{<block_content pos:start="3673:29" pos:end="3679:34">

                            <decl_stmt pos:start="3673:29" pos:end="3673:68"><decl pos:start="3673:29" pos:end="3673:67"><type pos:start="3673:29" pos:end="3673:36"><name pos:start="3673:29" pos:end="3673:36">TCGv_ptr</name></type> <name pos:start="3673:38" pos:end="3673:45">fpstatus</name> <init pos:start="3673:47" pos:end="3673:67">= <expr pos:start="3673:49" pos:end="3673:67"><call pos:start="3673:49" pos:end="3673:67"><name pos:start="3673:49" pos:end="3673:64">get_fpstatus_ptr</name><argument_list pos:start="3673:65" pos:end="3673:67">(<argument pos:start="3673:66" pos:end="3673:66"><expr pos:start="3673:66" pos:end="3673:66"><literal type="number" pos:start="3673:66" pos:end="3673:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3675:29" pos:end="3675:79"><expr pos:start="3675:29" pos:end="3675:78"><call pos:start="3675:29" pos:end="3675:78"><name pos:start="3675:29" pos:end="3675:50">gen_helper_rints_exact</name><argument_list pos:start="3675:51" pos:end="3675:78">(<argument pos:start="3675:52" pos:end="3675:58"><expr pos:start="3675:52" pos:end="3675:58"><name pos:start="3675:52" pos:end="3675:58">cpu_F0s</name></expr></argument>, <argument pos:start="3675:61" pos:end="3675:67"><expr pos:start="3675:61" pos:end="3675:67"><name pos:start="3675:61" pos:end="3675:67">cpu_F0s</name></expr></argument>, <argument pos:start="3675:70" pos:end="3675:77"><expr pos:start="3675:70" pos:end="3675:77"><name pos:start="3675:70" pos:end="3675:77">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3677:29" pos:end="3677:56"><expr pos:start="3677:29" pos:end="3677:55"><call pos:start="3677:29" pos:end="3677:55"><name pos:start="3677:29" pos:end="3677:45">tcg_temp_free_ptr</name><argument_list pos:start="3677:46" pos:end="3677:55">(<argument pos:start="3677:47" pos:end="3677:54"><expr pos:start="3677:47" pos:end="3677:54"><name pos:start="3677:47" pos:end="3677:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3679:29" pos:end="3679:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3683:25" pos:end="3683:45">case <expr pos:start="3683:30" pos:end="3683:44"><name pos:start="3683:30" pos:end="3683:44">NEON_2RM_VCVTAU</name></expr>:</case>

                        <case pos:start="3685:25" pos:end="3685:45">case <expr pos:start="3685:30" pos:end="3685:44"><name pos:start="3685:30" pos:end="3685:44">NEON_2RM_VCVTAS</name></expr>:</case>

                        <case pos:start="3687:25" pos:end="3687:45">case <expr pos:start="3687:30" pos:end="3687:44"><name pos:start="3687:30" pos:end="3687:44">NEON_2RM_VCVTNU</name></expr>:</case>

                        <case pos:start="3689:25" pos:end="3689:45">case <expr pos:start="3689:30" pos:end="3689:44"><name pos:start="3689:30" pos:end="3689:44">NEON_2RM_VCVTNS</name></expr>:</case>

                        <case pos:start="3691:25" pos:end="3691:45">case <expr pos:start="3691:30" pos:end="3691:44"><name pos:start="3691:30" pos:end="3691:44">NEON_2RM_VCVTPU</name></expr>:</case>

                        <case pos:start="3693:25" pos:end="3693:45">case <expr pos:start="3693:30" pos:end="3693:44"><name pos:start="3693:30" pos:end="3693:44">NEON_2RM_VCVTPS</name></expr>:</case>

                        <case pos:start="3695:25" pos:end="3695:45">case <expr pos:start="3695:30" pos:end="3695:44"><name pos:start="3695:30" pos:end="3695:44">NEON_2RM_VCVTMU</name></expr>:</case>

                        <case pos:start="3697:25" pos:end="3697:45">case <expr pos:start="3697:30" pos:end="3697:44"><name pos:start="3697:30" pos:end="3697:44">NEON_2RM_VCVTMS</name></expr>:</case>

                        <block pos:start="3699:25" pos:end="3749:25">{<block_content pos:start="3701:29" pos:end="3747:34">

                            <decl_stmt pos:start="3701:29" pos:end="3701:68"><decl pos:start="3701:29" pos:end="3701:67"><type pos:start="3701:29" pos:end="3701:32"><name pos:start="3701:29" pos:end="3701:32">bool</name></type> <name pos:start="3701:34" pos:end="3701:42">is_signed</name> <init pos:start="3701:44" pos:end="3701:67">= <expr pos:start="3701:46" pos:end="3701:67"><operator pos:start="3701:46" pos:end="3701:46">!</operator><call pos:start="3701:47" pos:end="3701:67"><name pos:start="3701:47" pos:end="3701:55">extract32</name><argument_list pos:start="3701:56" pos:end="3701:67">(<argument pos:start="3701:57" pos:end="3701:60"><expr pos:start="3701:57" pos:end="3701:60"><name pos:start="3701:57" pos:end="3701:60">insn</name></expr></argument>, <argument pos:start="3701:63" pos:end="3701:63"><expr pos:start="3701:63" pos:end="3701:63"><literal type="number" pos:start="3701:63" pos:end="3701:63">7</literal></expr></argument>, <argument pos:start="3701:66" pos:end="3701:66"><expr pos:start="3701:66" pos:end="3701:66"><literal type="number" pos:start="3701:66" pos:end="3701:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="3703:29" pos:end="3703:64"><decl pos:start="3703:29" pos:end="3703:63"><type pos:start="3703:29" pos:end="3703:36"><name pos:start="3703:29" pos:end="3703:36">TCGv_ptr</name></type> <name pos:start="3703:38" pos:end="3703:41">fpst</name> <init pos:start="3703:43" pos:end="3703:63">= <expr pos:start="3703:45" pos:end="3703:63"><call pos:start="3703:45" pos:end="3703:63"><name pos:start="3703:45" pos:end="3703:60">get_fpstatus_ptr</name><argument_list pos:start="3703:61" pos:end="3703:63">(<argument pos:start="3703:62" pos:end="3703:62"><expr pos:start="3703:62" pos:end="3703:62"><literal type="number" pos:start="3703:62" pos:end="3703:62">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="3705:29" pos:end="3705:58"><decl pos:start="3705:29" pos:end="3705:46"><type pos:start="3705:29" pos:end="3705:36"><name pos:start="3705:29" pos:end="3705:36">TCGv_i32</name></type> <name pos:start="3705:38" pos:end="3705:46">tcg_rmode</name></decl>, <decl pos:start="3705:49" pos:end="3705:57"><type ref="prev" pos:start="3705:29" pos:end="3705:36"/><name pos:start="3705:49" pos:end="3705:57">tcg_shift</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="3707:29" pos:end="3707:76"><decl pos:start="3707:29" pos:end="3707:75"><type pos:start="3707:29" pos:end="3707:31"><name pos:start="3707:29" pos:end="3707:31">int</name></type> <name pos:start="3707:33" pos:end="3707:37">rmode</name> <init pos:start="3707:39" pos:end="3707:75">= <expr pos:start="3707:41" pos:end="3707:75"><name pos:start="3707:41" pos:end="3707:75"><name pos:start="3707:41" pos:end="3707:52">fp_decode_rm</name><index pos:start="3707:53" pos:end="3707:75">[<expr pos:start="3707:54" pos:end="3707:74"><call pos:start="3707:54" pos:end="3707:74"><name pos:start="3707:54" pos:end="3707:62">extract32</name><argument_list pos:start="3707:63" pos:end="3707:74">(<argument pos:start="3707:64" pos:end="3707:67"><expr pos:start="3707:64" pos:end="3707:67"><name pos:start="3707:64" pos:end="3707:67">insn</name></expr></argument>, <argument pos:start="3707:70" pos:end="3707:70"><expr pos:start="3707:70" pos:end="3707:70"><literal type="number" pos:start="3707:70" pos:end="3707:70">8</literal></expr></argument>, <argument pos:start="3707:73" pos:end="3707:73"><expr pos:start="3707:73" pos:end="3707:73"><literal type="number" pos:start="3707:73" pos:end="3707:73">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>



                            <expr_stmt pos:start="3711:29" pos:end="3711:57"><expr pos:start="3711:29" pos:end="3711:56"><name pos:start="3711:29" pos:end="3711:37">tcg_shift</name> <operator pos:start="3711:39" pos:end="3711:39">=</operator> <call pos:start="3711:41" pos:end="3711:56"><name pos:start="3711:41" pos:end="3711:53">tcg_const_i32</name><argument_list pos:start="3711:54" pos:end="3711:56">(<argument pos:start="3711:55" pos:end="3711:55"><expr pos:start="3711:55" pos:end="3711:55"><literal type="number" pos:start="3711:55" pos:end="3711:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3713:29" pos:end="3713:78"><expr pos:start="3713:29" pos:end="3713:77"><name pos:start="3713:29" pos:end="3713:37">tcg_rmode</name> <operator pos:start="3713:39" pos:end="3713:39">=</operator> <call pos:start="3713:41" pos:end="3713:77"><name pos:start="3713:41" pos:end="3713:53">tcg_const_i32</name><argument_list pos:start="3713:54" pos:end="3713:77">(<argument pos:start="3713:55" pos:end="3713:76"><expr pos:start="3713:55" pos:end="3713:76"><call pos:start="3713:55" pos:end="3713:76"><name pos:start="3713:55" pos:end="3713:69">arm_rmode_to_sf</name><argument_list pos:start="3713:70" pos:end="3713:76">(<argument pos:start="3713:71" pos:end="3713:75"><expr pos:start="3713:71" pos:end="3713:75"><name pos:start="3713:71" pos:end="3713:75">rmode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3715:29" pos:end="3717:63"><expr pos:start="3715:29" pos:end="3717:62"><call pos:start="3715:29" pos:end="3717:62"><name pos:start="3715:29" pos:end="3715:53">gen_helper_set_neon_rmode</name><argument_list pos:start="3715:54" pos:end="3717:62">(<argument pos:start="3715:55" pos:end="3715:63"><expr pos:start="3715:55" pos:end="3715:63"><name pos:start="3715:55" pos:end="3715:63">tcg_rmode</name></expr></argument>, <argument pos:start="3715:66" pos:end="3715:74"><expr pos:start="3715:66" pos:end="3715:74"><name pos:start="3715:66" pos:end="3715:74">tcg_rmode</name></expr></argument>,

                                                      <argument pos:start="3717:55" pos:end="3717:61"><expr pos:start="3717:55" pos:end="3717:61"><name pos:start="3717:55" pos:end="3717:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                            <if_stmt pos:start="3721:29" pos:end="3733:29"><if pos:start="3721:29" pos:end="3727:29">if <condition pos:start="3721:32" pos:end="3721:42">(<expr pos:start="3721:33" pos:end="3721:41"><name pos:start="3721:33" pos:end="3721:41">is_signed</name></expr>)</condition> <block pos:start="3721:44" pos:end="3727:29">{<block_content pos:start="3723:33" pos:end="3725:70">

                                <expr_stmt pos:start="3723:33" pos:end="3725:70"><expr pos:start="3723:33" pos:end="3725:69"><call pos:start="3723:33" pos:end="3725:69"><name pos:start="3723:33" pos:end="3723:52">gen_helper_vfp_tosls</name><argument_list pos:start="3723:53" pos:end="3725:69">(<argument pos:start="3723:54" pos:end="3723:60"><expr pos:start="3723:54" pos:end="3723:60"><name pos:start="3723:54" pos:end="3723:60">cpu_F0s</name></expr></argument>, <argument pos:start="3723:63" pos:end="3723:69"><expr pos:start="3723:63" pos:end="3723:69"><name pos:start="3723:63" pos:end="3723:69">cpu_F0s</name></expr></argument>,

                                                     <argument pos:start="3725:54" pos:end="3725:62"><expr pos:start="3725:54" pos:end="3725:62"><name pos:start="3725:54" pos:end="3725:62">tcg_shift</name></expr></argument>, <argument pos:start="3725:65" pos:end="3725:68"><expr pos:start="3725:65" pos:end="3725:68"><name pos:start="3725:65" pos:end="3725:68">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="3727:31" pos:end="3733:29">else <block pos:start="3727:36" pos:end="3733:29">{<block_content pos:start="3729:33" pos:end="3731:70">

                                <expr_stmt pos:start="3729:33" pos:end="3731:70"><expr pos:start="3729:33" pos:end="3731:69"><call pos:start="3729:33" pos:end="3731:69"><name pos:start="3729:33" pos:end="3729:52">gen_helper_vfp_touls</name><argument_list pos:start="3729:53" pos:end="3731:69">(<argument pos:start="3729:54" pos:end="3729:60"><expr pos:start="3729:54" pos:end="3729:60"><name pos:start="3729:54" pos:end="3729:60">cpu_F0s</name></expr></argument>, <argument pos:start="3729:63" pos:end="3729:69"><expr pos:start="3729:63" pos:end="3729:69"><name pos:start="3729:63" pos:end="3729:69">cpu_F0s</name></expr></argument>,

                                                     <argument pos:start="3731:54" pos:end="3731:62"><expr pos:start="3731:54" pos:end="3731:62"><name pos:start="3731:54" pos:end="3731:62">tcg_shift</name></expr></argument>, <argument pos:start="3731:65" pos:end="3731:68"><expr pos:start="3731:65" pos:end="3731:68"><name pos:start="3731:65" pos:end="3731:68">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>



                            <expr_stmt pos:start="3737:29" pos:end="3739:63"><expr pos:start="3737:29" pos:end="3739:62"><call pos:start="3737:29" pos:end="3739:62"><name pos:start="3737:29" pos:end="3737:53">gen_helper_set_neon_rmode</name><argument_list pos:start="3737:54" pos:end="3739:62">(<argument pos:start="3737:55" pos:end="3737:63"><expr pos:start="3737:55" pos:end="3737:63"><name pos:start="3737:55" pos:end="3737:63">tcg_rmode</name></expr></argument>, <argument pos:start="3737:66" pos:end="3737:74"><expr pos:start="3737:66" pos:end="3737:74"><name pos:start="3737:66" pos:end="3737:74">tcg_rmode</name></expr></argument>,

                                                      <argument pos:start="3739:55" pos:end="3739:61"><expr pos:start="3739:55" pos:end="3739:61"><name pos:start="3739:55" pos:end="3739:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3741:29" pos:end="3741:57"><expr pos:start="3741:29" pos:end="3741:56"><call pos:start="3741:29" pos:end="3741:56"><name pos:start="3741:29" pos:end="3741:45">tcg_temp_free_i32</name><argument_list pos:start="3741:46" pos:end="3741:56">(<argument pos:start="3741:47" pos:end="3741:55"><expr pos:start="3741:47" pos:end="3741:55"><name pos:start="3741:47" pos:end="3741:55">tcg_rmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3743:29" pos:end="3743:57"><expr pos:start="3743:29" pos:end="3743:56"><call pos:start="3743:29" pos:end="3743:56"><name pos:start="3743:29" pos:end="3743:45">tcg_temp_free_i32</name><argument_list pos:start="3743:46" pos:end="3743:56">(<argument pos:start="3743:47" pos:end="3743:55"><expr pos:start="3743:47" pos:end="3743:55"><name pos:start="3743:47" pos:end="3743:55">tcg_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3745:29" pos:end="3745:52"><expr pos:start="3745:29" pos:end="3745:51"><call pos:start="3745:29" pos:end="3745:51"><name pos:start="3745:29" pos:end="3745:45">tcg_temp_free_ptr</name><argument_list pos:start="3745:46" pos:end="3745:51">(<argument pos:start="3745:47" pos:end="3745:50"><expr pos:start="3745:47" pos:end="3745:50"><name pos:start="3745:47" pos:end="3745:50">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3747:29" pos:end="3747:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3751:25" pos:end="3751:45">case <expr pos:start="3751:30" pos:end="3751:44"><name pos:start="3751:30" pos:end="3751:44">NEON_2RM_VRECPE</name></expr>:</case>

                        <block pos:start="3753:25" pos:end="3763:25">{<block_content pos:start="3755:29" pos:end="3761:34">

                            <decl_stmt pos:start="3755:29" pos:end="3755:68"><decl pos:start="3755:29" pos:end="3755:67"><type pos:start="3755:29" pos:end="3755:36"><name pos:start="3755:29" pos:end="3755:36">TCGv_ptr</name></type> <name pos:start="3755:38" pos:end="3755:45">fpstatus</name> <init pos:start="3755:47" pos:end="3755:67">= <expr pos:start="3755:49" pos:end="3755:67"><call pos:start="3755:49" pos:end="3755:67"><name pos:start="3755:49" pos:end="3755:64">get_fpstatus_ptr</name><argument_list pos:start="3755:65" pos:end="3755:67">(<argument pos:start="3755:66" pos:end="3755:66"><expr pos:start="3755:66" pos:end="3755:66"><literal type="number" pos:start="3755:66" pos:end="3755:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3757:29" pos:end="3757:69"><expr pos:start="3757:29" pos:end="3757:68"><call pos:start="3757:29" pos:end="3757:68"><name pos:start="3757:29" pos:end="3757:48">gen_helper_recpe_u32</name><argument_list pos:start="3757:49" pos:end="3757:68">(<argument pos:start="3757:50" pos:end="3757:52"><expr pos:start="3757:50" pos:end="3757:52"><name pos:start="3757:50" pos:end="3757:52">tmp</name></expr></argument>, <argument pos:start="3757:55" pos:end="3757:57"><expr pos:start="3757:55" pos:end="3757:57"><name pos:start="3757:55" pos:end="3757:57">tmp</name></expr></argument>, <argument pos:start="3757:60" pos:end="3757:67"><expr pos:start="3757:60" pos:end="3757:67"><name pos:start="3757:60" pos:end="3757:67">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3759:29" pos:end="3759:56"><expr pos:start="3759:29" pos:end="3759:55"><call pos:start="3759:29" pos:end="3759:55"><name pos:start="3759:29" pos:end="3759:45">tcg_temp_free_ptr</name><argument_list pos:start="3759:46" pos:end="3759:55">(<argument pos:start="3759:47" pos:end="3759:54"><expr pos:start="3759:47" pos:end="3759:54"><name pos:start="3759:47" pos:end="3759:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3761:29" pos:end="3761:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3765:25" pos:end="3765:46">case <expr pos:start="3765:30" pos:end="3765:45"><name pos:start="3765:30" pos:end="3765:45">NEON_2RM_VRSQRTE</name></expr>:</case>

                        <block pos:start="3767:25" pos:end="3777:25">{<block_content pos:start="3769:29" pos:end="3775:34">

                            <decl_stmt pos:start="3769:29" pos:end="3769:68"><decl pos:start="3769:29" pos:end="3769:67"><type pos:start="3769:29" pos:end="3769:36"><name pos:start="3769:29" pos:end="3769:36">TCGv_ptr</name></type> <name pos:start="3769:38" pos:end="3769:45">fpstatus</name> <init pos:start="3769:47" pos:end="3769:67">= <expr pos:start="3769:49" pos:end="3769:67"><call pos:start="3769:49" pos:end="3769:67"><name pos:start="3769:49" pos:end="3769:64">get_fpstatus_ptr</name><argument_list pos:start="3769:65" pos:end="3769:67">(<argument pos:start="3769:66" pos:end="3769:66"><expr pos:start="3769:66" pos:end="3769:66"><literal type="number" pos:start="3769:66" pos:end="3769:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3771:29" pos:end="3771:70"><expr pos:start="3771:29" pos:end="3771:69"><call pos:start="3771:29" pos:end="3771:69"><name pos:start="3771:29" pos:end="3771:49">gen_helper_rsqrte_u32</name><argument_list pos:start="3771:50" pos:end="3771:69">(<argument pos:start="3771:51" pos:end="3771:53"><expr pos:start="3771:51" pos:end="3771:53"><name pos:start="3771:51" pos:end="3771:53">tmp</name></expr></argument>, <argument pos:start="3771:56" pos:end="3771:58"><expr pos:start="3771:56" pos:end="3771:58"><name pos:start="3771:56" pos:end="3771:58">tmp</name></expr></argument>, <argument pos:start="3771:61" pos:end="3771:68"><expr pos:start="3771:61" pos:end="3771:68"><name pos:start="3771:61" pos:end="3771:68">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3773:29" pos:end="3773:56"><expr pos:start="3773:29" pos:end="3773:55"><call pos:start="3773:29" pos:end="3773:55"><name pos:start="3773:29" pos:end="3773:45">tcg_temp_free_ptr</name><argument_list pos:start="3773:46" pos:end="3773:55">(<argument pos:start="3773:47" pos:end="3773:54"><expr pos:start="3773:47" pos:end="3773:54"><name pos:start="3773:47" pos:end="3773:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3775:29" pos:end="3775:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3779:25" pos:end="3779:47">case <expr pos:start="3779:30" pos:end="3779:46"><name pos:start="3779:30" pos:end="3779:46">NEON_2RM_VRECPE_F</name></expr>:</case>

                        <block pos:start="3781:25" pos:end="3791:25">{<block_content pos:start="3783:29" pos:end="3789:34">

                            <decl_stmt pos:start="3783:29" pos:end="3783:68"><decl pos:start="3783:29" pos:end="3783:67"><type pos:start="3783:29" pos:end="3783:36"><name pos:start="3783:29" pos:end="3783:36">TCGv_ptr</name></type> <name pos:start="3783:38" pos:end="3783:45">fpstatus</name> <init pos:start="3783:47" pos:end="3783:67">= <expr pos:start="3783:49" pos:end="3783:67"><call pos:start="3783:49" pos:end="3783:67"><name pos:start="3783:49" pos:end="3783:64">get_fpstatus_ptr</name><argument_list pos:start="3783:65" pos:end="3783:67">(<argument pos:start="3783:66" pos:end="3783:66"><expr pos:start="3783:66" pos:end="3783:66"><literal type="number" pos:start="3783:66" pos:end="3783:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3785:29" pos:end="3785:77"><expr pos:start="3785:29" pos:end="3785:76"><call pos:start="3785:29" pos:end="3785:76"><name pos:start="3785:29" pos:end="3785:48">gen_helper_recpe_f32</name><argument_list pos:start="3785:49" pos:end="3785:76">(<argument pos:start="3785:50" pos:end="3785:56"><expr pos:start="3785:50" pos:end="3785:56"><name pos:start="3785:50" pos:end="3785:56">cpu_F0s</name></expr></argument>, <argument pos:start="3785:59" pos:end="3785:65"><expr pos:start="3785:59" pos:end="3785:65"><name pos:start="3785:59" pos:end="3785:65">cpu_F0s</name></expr></argument>, <argument pos:start="3785:68" pos:end="3785:75"><expr pos:start="3785:68" pos:end="3785:75"><name pos:start="3785:68" pos:end="3785:75">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3787:29" pos:end="3787:56"><expr pos:start="3787:29" pos:end="3787:55"><call pos:start="3787:29" pos:end="3787:55"><name pos:start="3787:29" pos:end="3787:45">tcg_temp_free_ptr</name><argument_list pos:start="3787:46" pos:end="3787:55">(<argument pos:start="3787:47" pos:end="3787:54"><expr pos:start="3787:47" pos:end="3787:54"><name pos:start="3787:47" pos:end="3787:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3789:29" pos:end="3789:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3793:25" pos:end="3793:48">case <expr pos:start="3793:30" pos:end="3793:47"><name pos:start="3793:30" pos:end="3793:47">NEON_2RM_VRSQRTE_F</name></expr>:</case>

                        <block pos:start="3795:25" pos:end="3805:25">{<block_content pos:start="3797:29" pos:end="3803:34">

                            <decl_stmt pos:start="3797:29" pos:end="3797:68"><decl pos:start="3797:29" pos:end="3797:67"><type pos:start="3797:29" pos:end="3797:36"><name pos:start="3797:29" pos:end="3797:36">TCGv_ptr</name></type> <name pos:start="3797:38" pos:end="3797:45">fpstatus</name> <init pos:start="3797:47" pos:end="3797:67">= <expr pos:start="3797:49" pos:end="3797:67"><call pos:start="3797:49" pos:end="3797:67"><name pos:start="3797:49" pos:end="3797:64">get_fpstatus_ptr</name><argument_list pos:start="3797:65" pos:end="3797:67">(<argument pos:start="3797:66" pos:end="3797:66"><expr pos:start="3797:66" pos:end="3797:66"><literal type="number" pos:start="3797:66" pos:end="3797:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3799:29" pos:end="3799:78"><expr pos:start="3799:29" pos:end="3799:77"><call pos:start="3799:29" pos:end="3799:77"><name pos:start="3799:29" pos:end="3799:49">gen_helper_rsqrte_f32</name><argument_list pos:start="3799:50" pos:end="3799:77">(<argument pos:start="3799:51" pos:end="3799:57"><expr pos:start="3799:51" pos:end="3799:57"><name pos:start="3799:51" pos:end="3799:57">cpu_F0s</name></expr></argument>, <argument pos:start="3799:60" pos:end="3799:66"><expr pos:start="3799:60" pos:end="3799:66"><name pos:start="3799:60" pos:end="3799:66">cpu_F0s</name></expr></argument>, <argument pos:start="3799:69" pos:end="3799:76"><expr pos:start="3799:69" pos:end="3799:76"><name pos:start="3799:69" pos:end="3799:76">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3801:29" pos:end="3801:56"><expr pos:start="3801:29" pos:end="3801:55"><call pos:start="3801:29" pos:end="3801:55"><name pos:start="3801:29" pos:end="3801:45">tcg_temp_free_ptr</name><argument_list pos:start="3801:46" pos:end="3801:55">(<argument pos:start="3801:47" pos:end="3801:54"><expr pos:start="3801:47" pos:end="3801:54"><name pos:start="3801:47" pos:end="3801:54">fpstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3803:29" pos:end="3803:34">break;</break>

                        </block_content>}</block>

                        <case pos:start="3807:25" pos:end="3807:46">case <expr pos:start="3807:30" pos:end="3807:45"><name pos:start="3807:30" pos:end="3807:45">NEON_2RM_VCVT_FS</name></expr>:</case> <comment type="block" pos:start="3807:48" pos:end="3807:65">/* VCVT.F32.S32 */</comment>

                            <expr_stmt pos:start="3809:29" pos:end="3809:47"><expr pos:start="3809:29" pos:end="3809:46"><call pos:start="3809:29" pos:end="3809:46"><name pos:start="3809:29" pos:end="3809:40">gen_vfp_sito</name><argument_list pos:start="3809:41" pos:end="3809:46">(<argument pos:start="3809:42" pos:end="3809:42"><expr pos:start="3809:42" pos:end="3809:42"><literal type="number" pos:start="3809:42" pos:end="3809:42">0</literal></expr></argument>, <argument pos:start="3809:45" pos:end="3809:45"><expr pos:start="3809:45" pos:end="3809:45"><literal type="number" pos:start="3809:45" pos:end="3809:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3811:29" pos:end="3811:34">break;</break>

                        <case pos:start="3813:25" pos:end="3813:46">case <expr pos:start="3813:30" pos:end="3813:45"><name pos:start="3813:30" pos:end="3813:45">NEON_2RM_VCVT_FU</name></expr>:</case> <comment type="block" pos:start="3813:48" pos:end="3813:65">/* VCVT.F32.U32 */</comment>

                            <expr_stmt pos:start="3815:29" pos:end="3815:47"><expr pos:start="3815:29" pos:end="3815:46"><call pos:start="3815:29" pos:end="3815:46"><name pos:start="3815:29" pos:end="3815:40">gen_vfp_uito</name><argument_list pos:start="3815:41" pos:end="3815:46">(<argument pos:start="3815:42" pos:end="3815:42"><expr pos:start="3815:42" pos:end="3815:42"><literal type="number" pos:start="3815:42" pos:end="3815:42">0</literal></expr></argument>, <argument pos:start="3815:45" pos:end="3815:45"><expr pos:start="3815:45" pos:end="3815:45"><literal type="number" pos:start="3815:45" pos:end="3815:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3817:29" pos:end="3817:34">break;</break>

                        <case pos:start="3819:25" pos:end="3819:46">case <expr pos:start="3819:30" pos:end="3819:45"><name pos:start="3819:30" pos:end="3819:45">NEON_2RM_VCVT_SF</name></expr>:</case> <comment type="block" pos:start="3819:48" pos:end="3819:65">/* VCVT.S32.F32 */</comment>

                            <expr_stmt pos:start="3821:29" pos:end="3821:48"><expr pos:start="3821:29" pos:end="3821:47"><call pos:start="3821:29" pos:end="3821:47"><name pos:start="3821:29" pos:end="3821:41">gen_vfp_tosiz</name><argument_list pos:start="3821:42" pos:end="3821:47">(<argument pos:start="3821:43" pos:end="3821:43"><expr pos:start="3821:43" pos:end="3821:43"><literal type="number" pos:start="3821:43" pos:end="3821:43">0</literal></expr></argument>, <argument pos:start="3821:46" pos:end="3821:46"><expr pos:start="3821:46" pos:end="3821:46"><literal type="number" pos:start="3821:46" pos:end="3821:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3823:29" pos:end="3823:34">break;</break>

                        <case pos:start="3825:25" pos:end="3825:46">case <expr pos:start="3825:30" pos:end="3825:45"><name pos:start="3825:30" pos:end="3825:45">NEON_2RM_VCVT_UF</name></expr>:</case> <comment type="block" pos:start="3825:48" pos:end="3825:65">/* VCVT.U32.F32 */</comment>

                            <expr_stmt pos:start="3827:29" pos:end="3827:48"><expr pos:start="3827:29" pos:end="3827:47"><call pos:start="3827:29" pos:end="3827:47"><name pos:start="3827:29" pos:end="3827:41">gen_vfp_touiz</name><argument_list pos:start="3827:42" pos:end="3827:47">(<argument pos:start="3827:43" pos:end="3827:43"><expr pos:start="3827:43" pos:end="3827:43"><literal type="number" pos:start="3827:43" pos:end="3827:43">0</literal></expr></argument>, <argument pos:start="3827:46" pos:end="3827:46"><expr pos:start="3827:46" pos:end="3827:46"><literal type="number" pos:start="3827:46" pos:end="3827:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3829:29" pos:end="3829:34">break;</break>

                        <default pos:start="3831:25" pos:end="3831:32">default:</default>

                            <comment type="block" pos:start="3833:29" pos:end="3837:31">/* Reserved op values were caught by the

                             * neon_2rm_sizes[] check earlier.

                             */</comment>

                            <expr_stmt pos:start="3839:29" pos:end="3839:36"><expr pos:start="3839:29" pos:end="3839:35"><call pos:start="3839:29" pos:end="3839:35"><name pos:start="3839:29" pos:end="3839:33">abort</name><argument_list pos:start="3839:34" pos:end="3839:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="3843:25" pos:end="3853:25"><if pos:start="3843:25" pos:end="3849:25">if <condition pos:start="3843:28" pos:end="3843:53">(<expr pos:start="3843:29" pos:end="3843:52"><call pos:start="3843:29" pos:end="3843:52"><name pos:start="3843:29" pos:end="3843:48">neon_2rm_is_float_op</name><argument_list pos:start="3843:49" pos:end="3843:52">(<argument pos:start="3843:50" pos:end="3843:51"><expr pos:start="3843:50" pos:end="3843:51"><name pos:start="3843:50" pos:end="3843:51">op</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3843:55" pos:end="3849:25">{<block_content pos:start="3845:29" pos:end="3847:70">

                            <expr_stmt pos:start="3845:29" pos:end="3847:70"><expr pos:start="3845:29" pos:end="3847:69"><call pos:start="3845:29" pos:end="3847:69"><name pos:start="3845:29" pos:end="3845:42">tcg_gen_st_f32</name><argument_list pos:start="3845:43" pos:end="3847:69">(<argument pos:start="3845:44" pos:end="3845:50"><expr pos:start="3845:44" pos:end="3845:50"><name pos:start="3845:44" pos:end="3845:50">cpu_F0s</name></expr></argument>, <argument pos:start="3845:53" pos:end="3845:59"><expr pos:start="3845:53" pos:end="3845:59"><name pos:start="3845:53" pos:end="3845:59">cpu_env</name></expr></argument>,

                                           <argument pos:start="3847:44" pos:end="3847:68"><expr pos:start="3847:44" pos:end="3847:68"><call pos:start="3847:44" pos:end="3847:68"><name pos:start="3847:44" pos:end="3847:58">neon_reg_offset</name><argument_list pos:start="3847:59" pos:end="3847:68">(<argument pos:start="3847:60" pos:end="3847:61"><expr pos:start="3847:60" pos:end="3847:61"><name pos:start="3847:60" pos:end="3847:61">rd</name></expr></argument>, <argument pos:start="3847:64" pos:end="3847:67"><expr pos:start="3847:64" pos:end="3847:67"><name pos:start="3847:64" pos:end="3847:67">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="3849:27" pos:end="3853:25">else <block pos:start="3849:32" pos:end="3853:25">{<block_content pos:start="3851:29" pos:end="3851:58">

                            <expr_stmt pos:start="3851:29" pos:end="3851:58"><expr pos:start="3851:29" pos:end="3851:57"><call pos:start="3851:29" pos:end="3851:57"><name pos:start="3851:29" pos:end="3851:42">neon_store_reg</name><argument_list pos:start="3851:43" pos:end="3851:57">(<argument pos:start="3851:44" pos:end="3851:45"><expr pos:start="3851:44" pos:end="3851:45"><name pos:start="3851:44" pos:end="3851:45">rd</name></expr></argument>, <argument pos:start="3851:48" pos:end="3851:51"><expr pos:start="3851:48" pos:end="3851:51"><name pos:start="3851:48" pos:end="3851:51">pass</name></expr></argument>, <argument pos:start="3851:54" pos:end="3851:56"><expr pos:start="3851:54" pos:end="3851:56"><name pos:start="3851:54" pos:end="3851:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="3857:21" pos:end="3857:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="3861:15" pos:end="3929:13">else if <condition pos:start="3861:23" pos:end="3861:47">(<expr pos:start="3861:24" pos:end="3861:46"><operator pos:start="3861:24" pos:end="3861:24">(</operator><name pos:start="3861:25" pos:end="3861:28">insn</name> <operator pos:start="3861:30" pos:end="3861:30">&amp;</operator> <operator pos:start="3861:32" pos:end="3861:32">(</operator><literal type="number" pos:start="3861:33" pos:end="3861:33">1</literal> <operator pos:start="3861:35" pos:end="3861:36">&lt;&lt;</operator> <literal type="number" pos:start="3861:38" pos:end="3861:39">10</literal><operator pos:start="3861:40" pos:end="3861:40">)</operator><operator pos:start="3861:41" pos:end="3861:41">)</operator> <operator pos:start="3861:43" pos:end="3861:44">==</operator> <literal type="number" pos:start="3861:46" pos:end="3861:46">0</literal></expr>)</condition> <block pos:start="3861:49" pos:end="3929:13">{<block_content pos:start="3865:17" pos:end="3927:39">

                <comment type="block" pos:start="3863:17" pos:end="3863:34">/* VTBL, VTBX.  */</comment>

                <decl_stmt pos:start="3865:17" pos:end="3865:46"><decl pos:start="3865:17" pos:end="3865:45"><type pos:start="3865:17" pos:end="3865:19"><name pos:start="3865:17" pos:end="3865:19">int</name></type> <name pos:start="3865:21" pos:end="3865:21">n</name> <init pos:start="3865:23" pos:end="3865:45">= <expr pos:start="3865:25" pos:end="3865:45"><operator pos:start="3865:25" pos:end="3865:25">(</operator><operator pos:start="3865:26" pos:end="3865:26">(</operator><name pos:start="3865:27" pos:end="3865:30">insn</name> <operator pos:start="3865:32" pos:end="3865:33">&gt;&gt;</operator> <literal type="number" pos:start="3865:35" pos:end="3865:35">8</literal><operator pos:start="3865:36" pos:end="3865:36">)</operator> <operator pos:start="3865:38" pos:end="3865:38">&amp;</operator> <literal type="number" pos:start="3865:40" pos:end="3865:40">3</literal><operator pos:start="3865:41" pos:end="3865:41">)</operator> <operator pos:start="3865:43" pos:end="3865:43">+</operator> <literal type="number" pos:start="3865:45" pos:end="3865:45">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="3867:17" pos:end="3877:17"><if pos:start="3867:17" pos:end="3877:17">if <condition pos:start="3867:20" pos:end="3867:34">(<expr pos:start="3867:21" pos:end="3867:33"><operator pos:start="3867:21" pos:end="3867:21">(</operator><name pos:start="3867:22" pos:end="3867:23">rn</name> <operator pos:start="3867:25" pos:end="3867:25">+</operator> <name pos:start="3867:27" pos:end="3867:27">n</name><operator pos:start="3867:28" pos:end="3867:28">)</operator> <operator pos:start="3867:30" pos:end="3867:30">&gt;</operator> <literal type="number" pos:start="3867:32" pos:end="3867:33">32</literal></expr>)</condition> <block pos:start="3867:36" pos:end="3877:17">{<block_content pos:start="3875:21" pos:end="3875:29">

                    <comment type="block" pos:start="3869:21" pos:end="3873:23">/* This is UNPREDICTABLE; we choose to UNDEF to avoid the

                     * helper function running off the end of the register file.

                     */</comment>

                    <return pos:start="3875:21" pos:end="3875:29">return <expr pos:start="3875:28" pos:end="3875:28"><literal type="number" pos:start="3875:28" pos:end="3875:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="3879:17" pos:end="3879:24"><expr pos:start="3879:17" pos:end="3879:23"><name pos:start="3879:17" pos:end="3879:17">n</name> <operator pos:start="3879:19" pos:end="3879:21">&lt;&lt;=</operator> <literal type="number" pos:start="3879:23" pos:end="3879:23">3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="3881:17" pos:end="3891:17"><if pos:start="3881:17" pos:end="3885:17">if <condition pos:start="3881:20" pos:end="3881:36">(<expr pos:start="3881:21" pos:end="3881:35"><name pos:start="3881:21" pos:end="3881:24">insn</name> <operator pos:start="3881:26" pos:end="3881:26">&amp;</operator> <operator pos:start="3881:28" pos:end="3881:28">(</operator><literal type="number" pos:start="3881:29" pos:end="3881:29">1</literal> <operator pos:start="3881:31" pos:end="3881:32">&lt;&lt;</operator> <literal type="number" pos:start="3881:34" pos:end="3881:34">6</literal><operator pos:start="3881:35" pos:end="3881:35">)</operator></expr>)</condition> <block pos:start="3881:38" pos:end="3885:17">{<block_content pos:start="3883:21" pos:end="3883:47">

                    <expr_stmt pos:start="3883:21" pos:end="3883:47"><expr pos:start="3883:21" pos:end="3883:46"><name pos:start="3883:21" pos:end="3883:23">tmp</name> <operator pos:start="3883:25" pos:end="3883:25">=</operator> <call pos:start="3883:27" pos:end="3883:46"><name pos:start="3883:27" pos:end="3883:39">neon_load_reg</name><argument_list pos:start="3883:40" pos:end="3883:46">(<argument pos:start="3883:41" pos:end="3883:42"><expr pos:start="3883:41" pos:end="3883:42"><name pos:start="3883:41" pos:end="3883:42">rd</name></expr></argument>, <argument pos:start="3883:45" pos:end="3883:45"><expr pos:start="3883:45" pos:end="3883:45"><literal type="number" pos:start="3883:45" pos:end="3883:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3885:19" pos:end="3891:17">else <block pos:start="3885:24" pos:end="3891:17">{<block_content pos:start="3887:21" pos:end="3889:45">

                    <expr_stmt pos:start="3887:21" pos:end="3887:45"><expr pos:start="3887:21" pos:end="3887:44"><name pos:start="3887:21" pos:end="3887:23">tmp</name> <operator pos:start="3887:25" pos:end="3887:25">=</operator> <call pos:start="3887:27" pos:end="3887:44"><name pos:start="3887:27" pos:end="3887:42">tcg_temp_new_i32</name><argument_list pos:start="3887:43" pos:end="3887:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3889:21" pos:end="3889:45"><expr pos:start="3889:21" pos:end="3889:44"><call pos:start="3889:21" pos:end="3889:44"><name pos:start="3889:21" pos:end="3889:36">tcg_gen_movi_i32</name><argument_list pos:start="3889:37" pos:end="3889:44">(<argument pos:start="3889:38" pos:end="3889:40"><expr pos:start="3889:38" pos:end="3889:40"><name pos:start="3889:38" pos:end="3889:40">tmp</name></expr></argument>, <argument pos:start="3889:43" pos:end="3889:43"><expr pos:start="3889:43" pos:end="3889:43"><literal type="number" pos:start="3889:43" pos:end="3889:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3893:17" pos:end="3893:44"><expr pos:start="3893:17" pos:end="3893:43"><name pos:start="3893:17" pos:end="3893:20">tmp2</name> <operator pos:start="3893:22" pos:end="3893:22">=</operator> <call pos:start="3893:24" pos:end="3893:43"><name pos:start="3893:24" pos:end="3893:36">neon_load_reg</name><argument_list pos:start="3893:37" pos:end="3893:43">(<argument pos:start="3893:38" pos:end="3893:39"><expr pos:start="3893:38" pos:end="3893:39"><name pos:start="3893:38" pos:end="3893:39">rm</name></expr></argument>, <argument pos:start="3893:42" pos:end="3893:42"><expr pos:start="3893:42" pos:end="3893:42"><literal type="number" pos:start="3893:42" pos:end="3893:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3895:17" pos:end="3895:41"><expr pos:start="3895:17" pos:end="3895:40"><name pos:start="3895:17" pos:end="3895:20">tmp4</name> <operator pos:start="3895:22" pos:end="3895:22">=</operator> <call pos:start="3895:24" pos:end="3895:40"><name pos:start="3895:24" pos:end="3895:36">tcg_const_i32</name><argument_list pos:start="3895:37" pos:end="3895:40">(<argument pos:start="3895:38" pos:end="3895:39"><expr pos:start="3895:38" pos:end="3895:39"><name pos:start="3895:38" pos:end="3895:39">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3897:17" pos:end="3897:40"><expr pos:start="3897:17" pos:end="3897:39"><name pos:start="3897:17" pos:end="3897:20">tmp5</name> <operator pos:start="3897:22" pos:end="3897:22">=</operator> <call pos:start="3897:24" pos:end="3897:39"><name pos:start="3897:24" pos:end="3897:36">tcg_const_i32</name><argument_list pos:start="3897:37" pos:end="3897:39">(<argument pos:start="3897:38" pos:end="3897:38"><expr pos:start="3897:38" pos:end="3897:38"><name pos:start="3897:38" pos:end="3897:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3899:17" pos:end="3899:74"><expr pos:start="3899:17" pos:end="3899:73"><call pos:start="3899:17" pos:end="3899:73"><name pos:start="3899:17" pos:end="3899:35">gen_helper_neon_tbl</name><argument_list pos:start="3899:36" pos:end="3899:73">(<argument pos:start="3899:37" pos:end="3899:40"><expr pos:start="3899:37" pos:end="3899:40"><name pos:start="3899:37" pos:end="3899:40">tmp2</name></expr></argument>, <argument pos:start="3899:43" pos:end="3899:49"><expr pos:start="3899:43" pos:end="3899:49"><name pos:start="3899:43" pos:end="3899:49">cpu_env</name></expr></argument>, <argument pos:start="3899:52" pos:end="3899:55"><expr pos:start="3899:52" pos:end="3899:55"><name pos:start="3899:52" pos:end="3899:55">tmp2</name></expr></argument>, <argument pos:start="3899:58" pos:end="3899:60"><expr pos:start="3899:58" pos:end="3899:60"><name pos:start="3899:58" pos:end="3899:60">tmp</name></expr></argument>, <argument pos:start="3899:63" pos:end="3899:66"><expr pos:start="3899:63" pos:end="3899:66"><name pos:start="3899:63" pos:end="3899:66">tmp4</name></expr></argument>, <argument pos:start="3899:69" pos:end="3899:72"><expr pos:start="3899:69" pos:end="3899:72"><name pos:start="3899:69" pos:end="3899:72">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3901:17" pos:end="3901:39"><expr pos:start="3901:17" pos:end="3901:38"><call pos:start="3901:17" pos:end="3901:38"><name pos:start="3901:17" pos:end="3901:33">tcg_temp_free_i32</name><argument_list pos:start="3901:34" pos:end="3901:38">(<argument pos:start="3901:35" pos:end="3901:37"><expr pos:start="3901:35" pos:end="3901:37"><name pos:start="3901:35" pos:end="3901:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3903:17" pos:end="3913:17"><if pos:start="3903:17" pos:end="3907:17">if <condition pos:start="3903:20" pos:end="3903:36">(<expr pos:start="3903:21" pos:end="3903:35"><name pos:start="3903:21" pos:end="3903:24">insn</name> <operator pos:start="3903:26" pos:end="3903:26">&amp;</operator> <operator pos:start="3903:28" pos:end="3903:28">(</operator><literal type="number" pos:start="3903:29" pos:end="3903:29">1</literal> <operator pos:start="3903:31" pos:end="3903:32">&lt;&lt;</operator> <literal type="number" pos:start="3903:34" pos:end="3903:34">6</literal><operator pos:start="3903:35" pos:end="3903:35">)</operator></expr>)</condition> <block pos:start="3903:38" pos:end="3907:17">{<block_content pos:start="3905:21" pos:end="3905:47">

                    <expr_stmt pos:start="3905:21" pos:end="3905:47"><expr pos:start="3905:21" pos:end="3905:46"><name pos:start="3905:21" pos:end="3905:23">tmp</name> <operator pos:start="3905:25" pos:end="3905:25">=</operator> <call pos:start="3905:27" pos:end="3905:46"><name pos:start="3905:27" pos:end="3905:39">neon_load_reg</name><argument_list pos:start="3905:40" pos:end="3905:46">(<argument pos:start="3905:41" pos:end="3905:42"><expr pos:start="3905:41" pos:end="3905:42"><name pos:start="3905:41" pos:end="3905:42">rd</name></expr></argument>, <argument pos:start="3905:45" pos:end="3905:45"><expr pos:start="3905:45" pos:end="3905:45"><literal type="number" pos:start="3905:45" pos:end="3905:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3907:19" pos:end="3913:17">else <block pos:start="3907:24" pos:end="3913:17">{<block_content pos:start="3909:21" pos:end="3911:45">

                    <expr_stmt pos:start="3909:21" pos:end="3909:45"><expr pos:start="3909:21" pos:end="3909:44"><name pos:start="3909:21" pos:end="3909:23">tmp</name> <operator pos:start="3909:25" pos:end="3909:25">=</operator> <call pos:start="3909:27" pos:end="3909:44"><name pos:start="3909:27" pos:end="3909:42">tcg_temp_new_i32</name><argument_list pos:start="3909:43" pos:end="3909:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3911:21" pos:end="3911:45"><expr pos:start="3911:21" pos:end="3911:44"><call pos:start="3911:21" pos:end="3911:44"><name pos:start="3911:21" pos:end="3911:36">tcg_gen_movi_i32</name><argument_list pos:start="3911:37" pos:end="3911:44">(<argument pos:start="3911:38" pos:end="3911:40"><expr pos:start="3911:38" pos:end="3911:40"><name pos:start="3911:38" pos:end="3911:40">tmp</name></expr></argument>, <argument pos:start="3911:43" pos:end="3911:43"><expr pos:start="3911:43" pos:end="3911:43"><literal type="number" pos:start="3911:43" pos:end="3911:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3915:17" pos:end="3915:44"><expr pos:start="3915:17" pos:end="3915:43"><name pos:start="3915:17" pos:end="3915:20">tmp3</name> <operator pos:start="3915:22" pos:end="3915:22">=</operator> <call pos:start="3915:24" pos:end="3915:43"><name pos:start="3915:24" pos:end="3915:36">neon_load_reg</name><argument_list pos:start="3915:37" pos:end="3915:43">(<argument pos:start="3915:38" pos:end="3915:39"><expr pos:start="3915:38" pos:end="3915:39"><name pos:start="3915:38" pos:end="3915:39">rm</name></expr></argument>, <argument pos:start="3915:42" pos:end="3915:42"><expr pos:start="3915:42" pos:end="3915:42"><literal type="number" pos:start="3915:42" pos:end="3915:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3917:17" pos:end="3917:74"><expr pos:start="3917:17" pos:end="3917:73"><call pos:start="3917:17" pos:end="3917:73"><name pos:start="3917:17" pos:end="3917:35">gen_helper_neon_tbl</name><argument_list pos:start="3917:36" pos:end="3917:73">(<argument pos:start="3917:37" pos:end="3917:40"><expr pos:start="3917:37" pos:end="3917:40"><name pos:start="3917:37" pos:end="3917:40">tmp3</name></expr></argument>, <argument pos:start="3917:43" pos:end="3917:49"><expr pos:start="3917:43" pos:end="3917:49"><name pos:start="3917:43" pos:end="3917:49">cpu_env</name></expr></argument>, <argument pos:start="3917:52" pos:end="3917:55"><expr pos:start="3917:52" pos:end="3917:55"><name pos:start="3917:52" pos:end="3917:55">tmp3</name></expr></argument>, <argument pos:start="3917:58" pos:end="3917:60"><expr pos:start="3917:58" pos:end="3917:60"><name pos:start="3917:58" pos:end="3917:60">tmp</name></expr></argument>, <argument pos:start="3917:63" pos:end="3917:66"><expr pos:start="3917:63" pos:end="3917:66"><name pos:start="3917:63" pos:end="3917:66">tmp4</name></expr></argument>, <argument pos:start="3917:69" pos:end="3917:72"><expr pos:start="3917:69" pos:end="3917:72"><name pos:start="3917:69" pos:end="3917:72">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3919:17" pos:end="3919:40"><expr pos:start="3919:17" pos:end="3919:39"><call pos:start="3919:17" pos:end="3919:39"><name pos:start="3919:17" pos:end="3919:33">tcg_temp_free_i32</name><argument_list pos:start="3919:34" pos:end="3919:39">(<argument pos:start="3919:35" pos:end="3919:38"><expr pos:start="3919:35" pos:end="3919:38"><name pos:start="3919:35" pos:end="3919:38">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3921:17" pos:end="3921:40"><expr pos:start="3921:17" pos:end="3921:39"><call pos:start="3921:17" pos:end="3921:39"><name pos:start="3921:17" pos:end="3921:33">tcg_temp_free_i32</name><argument_list pos:start="3921:34" pos:end="3921:39">(<argument pos:start="3921:35" pos:end="3921:38"><expr pos:start="3921:35" pos:end="3921:38"><name pos:start="3921:35" pos:end="3921:38">tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3923:17" pos:end="3923:44"><expr pos:start="3923:17" pos:end="3923:43"><call pos:start="3923:17" pos:end="3923:43"><name pos:start="3923:17" pos:end="3923:30">neon_store_reg</name><argument_list pos:start="3923:31" pos:end="3923:43">(<argument pos:start="3923:32" pos:end="3923:33"><expr pos:start="3923:32" pos:end="3923:33"><name pos:start="3923:32" pos:end="3923:33">rd</name></expr></argument>, <argument pos:start="3923:36" pos:end="3923:36"><expr pos:start="3923:36" pos:end="3923:36"><literal type="number" pos:start="3923:36" pos:end="3923:36">0</literal></expr></argument>, <argument pos:start="3923:39" pos:end="3923:42"><expr pos:start="3923:39" pos:end="3923:42"><name pos:start="3923:39" pos:end="3923:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3925:17" pos:end="3925:44"><expr pos:start="3925:17" pos:end="3925:43"><call pos:start="3925:17" pos:end="3925:43"><name pos:start="3925:17" pos:end="3925:30">neon_store_reg</name><argument_list pos:start="3925:31" pos:end="3925:43">(<argument pos:start="3925:32" pos:end="3925:33"><expr pos:start="3925:32" pos:end="3925:33"><name pos:start="3925:32" pos:end="3925:33">rd</name></expr></argument>, <argument pos:start="3925:36" pos:end="3925:36"><expr pos:start="3925:36" pos:end="3925:36"><literal type="number" pos:start="3925:36" pos:end="3925:36">1</literal></expr></argument>, <argument pos:start="3925:39" pos:end="3925:42"><expr pos:start="3925:39" pos:end="3925:42"><name pos:start="3925:39" pos:end="3925:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3927:17" pos:end="3927:39"><expr pos:start="3927:17" pos:end="3927:38"><call pos:start="3927:17" pos:end="3927:38"><name pos:start="3927:17" pos:end="3927:33">tcg_temp_free_i32</name><argument_list pos:start="3927:34" pos:end="3927:38">(<argument pos:start="3927:35" pos:end="3927:37"><expr pos:start="3927:35" pos:end="3927:37"><name pos:start="3927:35" pos:end="3927:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="3929:15" pos:end="3977:13">else if <condition pos:start="3929:23" pos:end="3929:43">(<expr pos:start="3929:24" pos:end="3929:42"><operator pos:start="3929:24" pos:end="3929:24">(</operator><name pos:start="3929:25" pos:end="3929:28">insn</name> <operator pos:start="3929:30" pos:end="3929:30">&amp;</operator> <literal type="number" pos:start="3929:32" pos:end="3929:36">0x380</literal><operator pos:start="3929:37" pos:end="3929:37">)</operator> <operator pos:start="3929:39" pos:end="3929:40">==</operator> <literal type="number" pos:start="3929:42" pos:end="3929:42">0</literal></expr>)</condition> <block pos:start="3929:45" pos:end="3977:13">{<block_content pos:start="3933:17" pos:end="3975:39">

                <comment type="block" pos:start="3931:17" pos:end="3931:26">/* VDUP */</comment>

                <if_stmt pos:start="3933:17" pos:end="3937:17"><if pos:start="3933:17" pos:end="3937:17">if <condition pos:start="3933:20" pos:end="3933:63">(<expr pos:start="3933:21" pos:end="3933:62"><operator pos:start="3933:21" pos:end="3933:21">(</operator><name pos:start="3933:22" pos:end="3933:25">insn</name> <operator pos:start="3933:27" pos:end="3933:27">&amp;</operator> <operator pos:start="3933:29" pos:end="3933:29">(</operator><literal type="number" pos:start="3933:30" pos:end="3933:30">7</literal> <operator pos:start="3933:32" pos:end="3933:33">&lt;&lt;</operator> <literal type="number" pos:start="3933:35" pos:end="3933:36">16</literal><operator pos:start="3933:37" pos:end="3933:37">)</operator><operator pos:start="3933:38" pos:end="3933:38">)</operator> <operator pos:start="3933:40" pos:end="3933:41">==</operator> <literal type="number" pos:start="3933:43" pos:end="3933:43">0</literal> <operator pos:start="3933:45" pos:end="3933:46">||</operator> <operator pos:start="3933:48" pos:end="3933:48">(</operator><name pos:start="3933:49" pos:end="3933:49">q</name> <operator pos:start="3933:51" pos:end="3933:52">&amp;&amp;</operator> <operator pos:start="3933:54" pos:end="3933:54">(</operator><name pos:start="3933:55" pos:end="3933:56">rd</name> <operator pos:start="3933:58" pos:end="3933:58">&amp;</operator> <literal type="number" pos:start="3933:60" pos:end="3933:60">1</literal><operator pos:start="3933:61" pos:end="3933:61">)</operator><operator pos:start="3933:62" pos:end="3933:62">)</operator></expr>)</condition> <block pos:start="3933:65" pos:end="3937:17">{<block_content pos:start="3935:21" pos:end="3935:29">

                    <return pos:start="3935:21" pos:end="3935:29">return <expr pos:start="3935:28" pos:end="3935:28"><literal type="number" pos:start="3935:28" pos:end="3935:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="3939:17" pos:end="3947:17"><if pos:start="3939:17" pos:end="3943:17">if <condition pos:start="3939:20" pos:end="3939:37">(<expr pos:start="3939:21" pos:end="3939:36"><name pos:start="3939:21" pos:end="3939:24">insn</name> <operator pos:start="3939:26" pos:end="3939:26">&amp;</operator> <operator pos:start="3939:28" pos:end="3939:28">(</operator><literal type="number" pos:start="3939:29" pos:end="3939:29">1</literal> <operator pos:start="3939:31" pos:end="3939:32">&lt;&lt;</operator> <literal type="number" pos:start="3939:34" pos:end="3939:35">19</literal><operator pos:start="3939:36" pos:end="3939:36">)</operator></expr>)</condition> <block pos:start="3939:39" pos:end="3943:17">{<block_content pos:start="3941:21" pos:end="3941:47">

                    <expr_stmt pos:start="3941:21" pos:end="3941:47"><expr pos:start="3941:21" pos:end="3941:46"><name pos:start="3941:21" pos:end="3941:23">tmp</name> <operator pos:start="3941:25" pos:end="3941:25">=</operator> <call pos:start="3941:27" pos:end="3941:46"><name pos:start="3941:27" pos:end="3941:39">neon_load_reg</name><argument_list pos:start="3941:40" pos:end="3941:46">(<argument pos:start="3941:41" pos:end="3941:42"><expr pos:start="3941:41" pos:end="3941:42"><name pos:start="3941:41" pos:end="3941:42">rm</name></expr></argument>, <argument pos:start="3941:45" pos:end="3941:45"><expr pos:start="3941:45" pos:end="3941:45"><literal type="number" pos:start="3941:45" pos:end="3941:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3943:19" pos:end="3947:17">else <block pos:start="3943:24" pos:end="3947:17">{<block_content pos:start="3945:21" pos:end="3945:47">

                    <expr_stmt pos:start="3945:21" pos:end="3945:47"><expr pos:start="3945:21" pos:end="3945:46"><name pos:start="3945:21" pos:end="3945:23">tmp</name> <operator pos:start="3945:25" pos:end="3945:25">=</operator> <call pos:start="3945:27" pos:end="3945:46"><name pos:start="3945:27" pos:end="3945:39">neon_load_reg</name><argument_list pos:start="3945:40" pos:end="3945:46">(<argument pos:start="3945:41" pos:end="3945:42"><expr pos:start="3945:41" pos:end="3945:42"><name pos:start="3945:41" pos:end="3945:42">rm</name></expr></argument>, <argument pos:start="3945:45" pos:end="3945:45"><expr pos:start="3945:45" pos:end="3945:45"><literal type="number" pos:start="3945:45" pos:end="3945:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="3949:17" pos:end="3963:17"><if pos:start="3949:17" pos:end="3953:17">if <condition pos:start="3949:20" pos:end="3949:37">(<expr pos:start="3949:21" pos:end="3949:36"><name pos:start="3949:21" pos:end="3949:24">insn</name> <operator pos:start="3949:26" pos:end="3949:26">&amp;</operator> <operator pos:start="3949:28" pos:end="3949:28">(</operator><literal type="number" pos:start="3949:29" pos:end="3949:29">1</literal> <operator pos:start="3949:31" pos:end="3949:32">&lt;&lt;</operator> <literal type="number" pos:start="3949:34" pos:end="3949:35">16</literal><operator pos:start="3949:36" pos:end="3949:36">)</operator></expr>)</condition> <block pos:start="3949:39" pos:end="3953:17">{<block_content pos:start="3951:21" pos:end="3951:65">

                    <expr_stmt pos:start="3951:21" pos:end="3951:65"><expr pos:start="3951:21" pos:end="3951:64"><call pos:start="3951:21" pos:end="3951:64"><name pos:start="3951:21" pos:end="3951:35">gen_neon_dup_u8</name><argument_list pos:start="3951:36" pos:end="3951:64">(<argument pos:start="3951:37" pos:end="3951:39"><expr pos:start="3951:37" pos:end="3951:39"><name pos:start="3951:37" pos:end="3951:39">tmp</name></expr></argument>, <argument pos:start="3951:42" pos:end="3951:63"><expr pos:start="3951:42" pos:end="3951:63"><operator pos:start="3951:42" pos:end="3951:42">(</operator><operator pos:start="3951:43" pos:end="3951:43">(</operator><name pos:start="3951:44" pos:end="3951:47">insn</name> <operator pos:start="3951:49" pos:end="3951:50">&gt;&gt;</operator> <literal type="number" pos:start="3951:52" pos:end="3951:53">17</literal><operator pos:start="3951:54" pos:end="3951:54">)</operator> <operator pos:start="3951:56" pos:end="3951:56">&amp;</operator> <literal type="number" pos:start="3951:58" pos:end="3951:58">3</literal><operator pos:start="3951:59" pos:end="3951:59">)</operator> <operator pos:start="3951:61" pos:end="3951:61">*</operator> <literal type="number" pos:start="3951:63" pos:end="3951:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="3953:19" pos:end="3963:17">else if <condition pos:start="3953:27" pos:end="3953:44">(<expr pos:start="3953:28" pos:end="3953:43"><name pos:start="3953:28" pos:end="3953:31">insn</name> <operator pos:start="3953:33" pos:end="3953:33">&amp;</operator> <operator pos:start="3953:35" pos:end="3953:35">(</operator><literal type="number" pos:start="3953:36" pos:end="3953:36">1</literal> <operator pos:start="3953:38" pos:end="3953:39">&lt;&lt;</operator> <literal type="number" pos:start="3953:41" pos:end="3953:42">17</literal><operator pos:start="3953:43" pos:end="3953:43">)</operator></expr>)</condition> <block pos:start="3953:46" pos:end="3963:17">{<block_content pos:start="3955:21" pos:end="3961:48">

                    <if_stmt pos:start="3955:21" pos:end="3961:48"><if pos:start="3955:21" pos:end="3957:49">if <condition pos:start="3955:24" pos:end="3955:41">(<expr pos:start="3955:25" pos:end="3955:40"><operator pos:start="3955:25" pos:end="3955:25">(</operator><name pos:start="3955:26" pos:end="3955:29">insn</name> <operator pos:start="3955:31" pos:end="3955:32">&gt;&gt;</operator> <literal type="number" pos:start="3955:34" pos:end="3955:35">18</literal><operator pos:start="3955:36" pos:end="3955:36">)</operator> <operator pos:start="3955:38" pos:end="3955:38">&amp;</operator> <literal type="number" pos:start="3955:40" pos:end="3955:40">1</literal></expr>)</condition><block type="pseudo" pos:start="3957:25" pos:end="3957:49"><block_content pos:start="3957:25" pos:end="3957:49">

                        <expr_stmt pos:start="3957:25" pos:end="3957:49"><expr pos:start="3957:25" pos:end="3957:48"><call pos:start="3957:25" pos:end="3957:48"><name pos:start="3957:25" pos:end="3957:43">gen_neon_dup_high16</name><argument_list pos:start="3957:44" pos:end="3957:48">(<argument pos:start="3957:45" pos:end="3957:47"><expr pos:start="3957:45" pos:end="3957:47"><name pos:start="3957:45" pos:end="3957:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="3959:21" pos:end="3961:48">else<block type="pseudo" pos:start="3961:25" pos:end="3961:48"><block_content pos:start="3961:25" pos:end="3961:48">

                        <expr_stmt pos:start="3961:25" pos:end="3961:48"><expr pos:start="3961:25" pos:end="3961:47"><call pos:start="3961:25" pos:end="3961:47"><name pos:start="3961:25" pos:end="3961:42">gen_neon_dup_low16</name><argument_list pos:start="3961:43" pos:end="3961:47">(<argument pos:start="3961:44" pos:end="3961:46"><expr pos:start="3961:44" pos:end="3961:46"><name pos:start="3961:44" pos:end="3961:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <for pos:start="3965:17" pos:end="3973:17">for <control pos:start="3965:21" pos:end="3965:58">(<init pos:start="3965:22" pos:end="3965:30"><expr pos:start="3965:22" pos:end="3965:29"><name pos:start="3965:22" pos:end="3965:25">pass</name> <operator pos:start="3965:27" pos:end="3965:27">=</operator> <literal type="number" pos:start="3965:29" pos:end="3965:29">0</literal></expr>;</init> <condition pos:start="3965:32" pos:end="3965:50"><expr pos:start="3965:32" pos:end="3965:49"><name pos:start="3965:32" pos:end="3965:35">pass</name> <operator pos:start="3965:37" pos:end="3965:37">&lt;</operator> <operator pos:start="3965:39" pos:end="3965:39">(</operator><ternary pos:start="3965:40" pos:end="3965:48"><condition pos:start="3965:40" pos:end="3965:42"><expr pos:start="3965:40" pos:end="3965:40"><name pos:start="3965:40" pos:end="3965:40">q</name></expr> ?</condition><then pos:start="3965:44" pos:end="3965:44"> <expr pos:start="3965:44" pos:end="3965:44"><literal type="number" pos:start="3965:44" pos:end="3965:44">4</literal></expr> </then><else pos:start="3965:46" pos:end="3965:48">: <expr pos:start="3965:48" pos:end="3965:48"><literal type="number" pos:start="3965:48" pos:end="3965:48">2</literal></expr></else></ternary><operator pos:start="3965:49" pos:end="3965:49">)</operator></expr>;</condition> <incr pos:start="3965:52" pos:end="3965:57"><expr pos:start="3965:52" pos:end="3965:57"><name pos:start="3965:52" pos:end="3965:55">pass</name><operator pos:start="3965:56" pos:end="3965:57">++</operator></expr></incr>)</control> <block pos:start="3965:60" pos:end="3973:17">{<block_content pos:start="3967:21" pos:end="3971:51">

                    <expr_stmt pos:start="3967:21" pos:end="3967:46"><expr pos:start="3967:21" pos:end="3967:45"><name pos:start="3967:21" pos:end="3967:24">tmp2</name> <operator pos:start="3967:26" pos:end="3967:26">=</operator> <call pos:start="3967:28" pos:end="3967:45"><name pos:start="3967:28" pos:end="3967:43">tcg_temp_new_i32</name><argument_list pos:start="3967:44" pos:end="3967:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3969:21" pos:end="3969:47"><expr pos:start="3969:21" pos:end="3969:46"><call pos:start="3969:21" pos:end="3969:46"><name pos:start="3969:21" pos:end="3969:35">tcg_gen_mov_i32</name><argument_list pos:start="3969:36" pos:end="3969:46">(<argument pos:start="3969:37" pos:end="3969:40"><expr pos:start="3969:37" pos:end="3969:40"><name pos:start="3969:37" pos:end="3969:40">tmp2</name></expr></argument>, <argument pos:start="3969:43" pos:end="3969:45"><expr pos:start="3969:43" pos:end="3969:45"><name pos:start="3969:43" pos:end="3969:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3971:21" pos:end="3971:51"><expr pos:start="3971:21" pos:end="3971:50"><call pos:start="3971:21" pos:end="3971:50"><name pos:start="3971:21" pos:end="3971:34">neon_store_reg</name><argument_list pos:start="3971:35" pos:end="3971:50">(<argument pos:start="3971:36" pos:end="3971:37"><expr pos:start="3971:36" pos:end="3971:37"><name pos:start="3971:36" pos:end="3971:37">rd</name></expr></argument>, <argument pos:start="3971:40" pos:end="3971:43"><expr pos:start="3971:40" pos:end="3971:43"><name pos:start="3971:40" pos:end="3971:43">pass</name></expr></argument>, <argument pos:start="3971:46" pos:end="3971:49"><expr pos:start="3971:46" pos:end="3971:49"><name pos:start="3971:46" pos:end="3971:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="3975:17" pos:end="3975:39"><expr pos:start="3975:17" pos:end="3975:38"><call pos:start="3975:17" pos:end="3975:38"><name pos:start="3975:17" pos:end="3975:33">tcg_temp_free_i32</name><argument_list pos:start="3975:34" pos:end="3975:38">(<argument pos:start="3975:35" pos:end="3975:37"><expr pos:start="3975:35" pos:end="3975:37"><name pos:start="3975:35" pos:end="3975:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3977:15" pos:end="3981:13">else <block pos:start="3977:20" pos:end="3981:13">{<block_content pos:start="3979:17" pos:end="3979:25">

                <return pos:start="3979:17" pos:end="3979:25">return <expr pos:start="3979:24" pos:end="3979:24"><literal type="number" pos:start="3979:24" pos:end="3979:24">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="3987:5" pos:end="3987:13">return <expr pos:start="3987:12" pos:end="3987:12"><literal type="number" pos:start="3987:12" pos:end="3987:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
