<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13823.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">imx_timerg_write</name><parameter_list pos:start="1:29" pos:end="3:59">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:68"><decl pos:start="1:44" pos:end="1:68"><type pos:start="1:44" pos:end="1:68"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:43">value</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="153:1">{<block_content pos:start="7:5" pos:end="151:5">

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">IMXTimerGState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:48">= <expr pos:start="7:25" pos:end="7:48"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">IMXTimerGState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator><name pos:start="7:43" pos:end="7:48">opaque</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="11:33"><expr pos:start="9:5" pos:end="11:32"><call pos:start="9:5" pos:end="11:32"><name pos:start="9:5" pos:end="9:11">DPRINTF</name><argument_list pos:start="9:12" pos:end="11:32">(<argument pos:start="9:13" pos:end="9:48"><expr pos:start="9:13" pos:end="9:48"><literal type="string" pos:start="9:13" pos:end="9:48">"g-write(offset=%x, value = 0x%x)\n"</literal></expr></argument>, <argument pos:start="9:51" pos:end="9:75"><expr pos:start="9:51" pos:end="9:75"><operator pos:start="9:51" pos:end="9:51">(</operator><name pos:start="9:52" pos:end="9:59">unsigned</name> <name pos:start="9:61" pos:end="9:63">int</name><operator pos:start="9:64" pos:end="9:64">)</operator><name pos:start="9:65" pos:end="9:70">offset</name> <operator pos:start="9:72" pos:end="9:73">&gt;&gt;</operator> <literal type="number" pos:start="9:75" pos:end="9:75">2</literal></expr></argument>,

            <argument pos:start="11:13" pos:end="11:31"><expr pos:start="11:13" pos:end="11:31"><operator pos:start="11:13" pos:end="11:13">(</operator><name pos:start="11:14" pos:end="11:21">unsigned</name> <name pos:start="11:23" pos:end="11:25">int</name><operator pos:start="11:26" pos:end="11:26">)</operator><name pos:start="11:27" pos:end="11:31">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="15:5" pos:end="151:5">switch <condition pos:start="15:12" pos:end="15:24">(<expr pos:start="15:13" pos:end="15:23"><name pos:start="15:13" pos:end="15:18">offset</name> <operator pos:start="15:20" pos:end="15:21">&gt;&gt;</operator> <literal type="number" pos:start="15:23" pos:end="15:23">2</literal></expr>)</condition> <block pos:start="15:26" pos:end="151:5">{<block_content pos:start="17:5" pos:end="149:34">

    <case pos:start="17:5" pos:end="17:11">case <expr pos:start="17:10" pos:end="17:10"><literal type="number" pos:start="17:10" pos:end="17:10">0</literal></expr>:</case> <block pos:start="17:13" pos:end="65:5">{<block_content pos:start="19:9" pos:end="63:15">

        <decl_stmt pos:start="19:9" pos:end="19:31"><decl pos:start="19:9" pos:end="19:30"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:22">oldcr</name> <init pos:start="19:24" pos:end="19:30">= <expr pos:start="19:26" pos:end="19:30"><name pos:start="19:26" pos:end="19:30"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:30">cr</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="21:9" pos:end="21:16">/* CR */</comment>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:31">(<expr pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:17">value</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <name pos:start="23:21" pos:end="23:30">GPT_CR_SWR</name></expr>)</condition> <block pos:start="23:33" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:33"> <comment type="block" pos:start="23:35" pos:end="23:51">/* force reset */</comment>

            <expr_stmt pos:start="25:13" pos:end="25:33"><expr pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:17">value</name> <operator pos:start="25:19" pos:end="25:20">&amp;=</operator> <operator pos:start="25:22" pos:end="25:22">~</operator><name pos:start="25:23" pos:end="25:32">GPT_CR_SWR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:46"><expr pos:start="27:13" pos:end="27:45"><call pos:start="27:13" pos:end="27:45"><name pos:start="27:13" pos:end="27:28">imx_timerg_reset</name><argument_list pos:start="27:29" pos:end="27:45">(<argument pos:start="27:30" pos:end="27:44"><expr pos:start="27:30" pos:end="27:44"><operator pos:start="27:30" pos:end="27:30">&amp;</operator><name pos:start="27:31" pos:end="27:44"><name pos:start="27:31" pos:end="27:31">s</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:39">busdev</name><operator pos:start="27:40" pos:end="27:40">.</operator><name pos:start="27:41" pos:end="27:44">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><call pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:29">imx_timerg_update</name><argument_list pos:start="29:30" pos:end="29:32">(<argument pos:start="29:31" pos:end="29:31"><expr pos:start="29:31" pos:end="29:31"><name pos:start="29:31" pos:end="29:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:13">cr</name></name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:21">value</name> <operator pos:start="35:23" pos:end="35:23">&amp;</operator> <operator pos:start="35:25" pos:end="35:25">~</operator><literal type="number" pos:start="35:26" pos:end="35:31">0x7c00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><call pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:27">imx_timerg_set_freq</name><argument_list pos:start="37:28" pos:end="37:30">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="61:9"><if pos:start="39:9" pos:end="61:9">if <condition pos:start="39:12" pos:end="39:40">(<expr pos:start="39:13" pos:end="39:39"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:18">oldcr</name> <operator pos:start="39:20" pos:end="39:20">^</operator> <name pos:start="39:22" pos:end="39:26">value</name><operator pos:start="39:27" pos:end="39:27">)</operator> <operator pos:start="39:29" pos:end="39:29">&amp;</operator> <name pos:start="39:31" pos:end="39:39">GPT_CR_EN</name></expr>)</condition> <block pos:start="39:42" pos:end="61:9">{<block_content pos:start="41:13" pos:end="59:14">

            <if_stmt pos:start="41:13" pos:end="59:13"><if pos:start="41:13" pos:end="55:13">if <condition pos:start="41:16" pos:end="41:34">(<expr pos:start="41:17" pos:end="41:33"><name pos:start="41:17" pos:end="41:21">value</name> <operator pos:start="41:23" pos:end="41:23">&amp;</operator> <name pos:start="41:25" pos:end="41:33">GPT_CR_EN</name></expr>)</condition> <block pos:start="41:36" pos:end="55:13">{<block_content pos:start="43:17" pos:end="53:75">

                <if_stmt pos:start="43:17" pos:end="49:17"><if pos:start="43:17" pos:end="49:17">if <condition pos:start="43:20" pos:end="43:41">(<expr pos:start="43:21" pos:end="43:40"><name pos:start="43:21" pos:end="43:25">value</name> <operator pos:start="43:27" pos:end="43:27">&amp;</operator> <name pos:start="43:29" pos:end="43:40">GPT_CR_ENMOD</name></expr>)</condition> <block pos:start="43:43" pos:end="49:17">{<block_content pos:start="45:21" pos:end="47:31">

                    <expr_stmt pos:start="45:21" pos:end="45:56"><expr pos:start="45:21" pos:end="45:55"><call pos:start="45:21" pos:end="45:55"><name pos:start="45:21" pos:end="45:36">ptimer_set_count</name><argument_list pos:start="45:37" pos:end="45:55">(<argument pos:start="45:38" pos:end="45:45"><expr pos:start="45:38" pos:end="45:45"><name pos:start="45:38" pos:end="45:45"><name pos:start="45:38" pos:end="45:38">s</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:45">timer</name></name></expr></argument>, <argument pos:start="45:48" pos:end="45:54"><expr pos:start="45:48" pos:end="45:54"><name pos:start="45:48" pos:end="45:54"><name pos:start="45:48" pos:end="45:48">s</name><operator pos:start="45:49" pos:end="45:50">-&gt;</operator><name pos:start="45:51" pos:end="45:54">ocr1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:31"><expr pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:26">cnt</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="51:17" pos:end="53:75"><expr pos:start="51:17" pos:end="53:74"><call pos:start="51:17" pos:end="53:74"><name pos:start="51:17" pos:end="51:26">ptimer_run</name><argument_list pos:start="51:27" pos:end="53:74">(<argument pos:start="51:28" pos:end="51:35"><expr pos:start="51:28" pos:end="51:35"><name pos:start="51:28" pos:end="51:35"><name pos:start="51:28" pos:end="51:28">s</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:35">timer</name></name></expr></argument>,

                           <argument pos:start="53:28" pos:end="53:73"><expr pos:start="53:28" pos:end="53:73"><operator pos:start="53:28" pos:end="53:28">(</operator><name pos:start="53:29" pos:end="53:33">value</name> <operator pos:start="53:35" pos:end="53:35">&amp;</operator> <name pos:start="53:37" pos:end="53:46">GPT_CR_FRR</name><operator pos:start="53:47" pos:end="53:47">)</operator> <operator pos:start="53:49" pos:end="53:50">&amp;&amp;</operator> <operator pos:start="53:52" pos:end="53:52">(</operator><name pos:start="53:53" pos:end="53:59"><name pos:start="53:53" pos:end="53:53">s</name><operator pos:start="53:54" pos:end="53:55">-&gt;</operator><name pos:start="53:56" pos:end="53:59">ocr1</name></name> <operator pos:start="53:61" pos:end="53:62">!=</operator> <name pos:start="53:64" pos:end="53:72">TIMER_MAX</name><operator pos:start="53:73" pos:end="53:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="55:15" pos:end="59:13">else <block pos:start="55:20" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:38">

                <expr_stmt pos:start="57:17" pos:end="57:38"><expr pos:start="57:17" pos:end="57:37"><call pos:start="57:17" pos:end="57:37"><name pos:start="57:17" pos:end="57:27">ptimer_stop</name><argument_list pos:start="57:28" pos:end="57:37">(<argument pos:start="57:29" pos:end="57:36"><expr pos:start="57:29" pos:end="57:36"><name pos:start="57:29" pos:end="57:36"><name pos:start="57:29" pos:end="57:29">s</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:36">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt><empty_stmt pos:start="59:14" pos:end="59:14">;</empty_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block>



    <case pos:start="69:5" pos:end="69:11">case <expr pos:start="69:10" pos:end="69:10"><literal type="number" pos:start="69:10" pos:end="69:10">1</literal></expr>:</case> <comment type="block" pos:start="69:13" pos:end="69:27">/* Prescaler */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:13">pr</name></name> <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:21">value</name> <operator pos:start="71:23" pos:end="71:23">&amp;</operator> <literal type="number" pos:start="71:25" pos:end="71:29">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><call pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:27">imx_timerg_set_freq</name><argument_list pos:start="73:28" pos:end="73:30">(<argument pos:start="73:29" pos:end="73:29"><expr pos:start="73:29" pos:end="73:29"><name pos:start="73:29" pos:end="73:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>



    <case pos:start="79:5" pos:end="79:11">case <expr pos:start="79:10" pos:end="79:10"><literal type="number" pos:start="79:10" pos:end="79:10">2</literal></expr>:</case> <comment type="block" pos:start="79:13" pos:end="79:20">/* SR */</comment>

        <comment type="block" pos:start="81:9" pos:end="87:11">/*

         * No point in implementing the status register bits to do with

         * external interrupt sources.

         */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:41"><expr pos:start="89:9" pos:end="89:40"><name pos:start="89:9" pos:end="89:13">value</name> <operator pos:start="89:15" pos:end="89:16">&amp;=</operator> <name pos:start="89:18" pos:end="89:27">GPT_SR_OF1</name> <operator pos:start="89:29" pos:end="89:29">|</operator> <name pos:start="89:31" pos:end="89:40">GPT_SR_ROV</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:24"><expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:13"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:13">sr</name></name> <operator pos:start="91:15" pos:end="91:16">&amp;=</operator> <operator pos:start="91:18" pos:end="91:18">~</operator><name pos:start="91:19" pos:end="91:23">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:29"><expr pos:start="93:9" pos:end="93:28"><call pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:25">imx_timerg_update</name><argument_list pos:start="93:26" pos:end="93:28">(<argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><name pos:start="93:27" pos:end="93:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:15">return;</return>



    <case pos:start="99:5" pos:end="99:11">case <expr pos:start="99:10" pos:end="99:10"><literal type="number" pos:start="99:10" pos:end="99:10">3</literal></expr>:</case> <comment type="block" pos:start="99:13" pos:end="99:42">/* IR -- interrupt register */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:13"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:13">ir</name></name> <operator pos:start="101:15" pos:end="101:15">=</operator> <name pos:start="101:17" pos:end="101:21">value</name> <operator pos:start="101:23" pos:end="101:23">&amp;</operator> <literal type="number" pos:start="101:25" pos:end="101:28">0x3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:29"><expr pos:start="103:9" pos:end="103:28"><call pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:25">imx_timerg_update</name><argument_list pos:start="103:26" pos:end="103:28">(<argument pos:start="103:27" pos:end="103:27"><expr pos:start="103:27" pos:end="103:27"><name pos:start="103:27" pos:end="103:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:15">return;</return>



    <case pos:start="109:5" pos:end="109:11">case <expr pos:start="109:10" pos:end="109:10"><literal type="number" pos:start="109:10" pos:end="109:10">4</literal></expr>:</case> <comment type="block" pos:start="109:13" pos:end="109:49">/* OCR1 -- output compare register */</comment>

        <comment type="block" pos:start="111:9" pos:end="111:76">/* In non-freerun mode, reset count when this register is written */</comment>

        <if_stmt pos:start="113:9" pos:end="137:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:34">(<expr pos:start="113:13" pos:end="113:33"><operator pos:start="113:13" pos:end="113:13">!</operator><operator pos:start="113:14" pos:end="113:14">(</operator><name pos:start="113:15" pos:end="113:19"><name pos:start="113:15" pos:end="113:15">s</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:19">cr</name></name> <operator pos:start="113:21" pos:end="113:21">&amp;</operator> <name pos:start="113:23" pos:end="113:32">GPT_CR_FRR</name><operator pos:start="113:33" pos:end="113:33">)</operator></expr>)</condition> <block pos:start="113:36" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:49">

            <expr_stmt pos:start="115:13" pos:end="115:31"><expr pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:26">waiting_rov</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <literal type="number" pos:start="115:30" pos:end="115:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:49"><expr pos:start="117:13" pos:end="117:48"><call pos:start="117:13" pos:end="117:48"><name pos:start="117:13" pos:end="117:28">ptimer_set_limit</name><argument_list pos:start="117:29" pos:end="117:48">(<argument pos:start="117:30" pos:end="117:37"><expr pos:start="117:30" pos:end="117:37"><name pos:start="117:30" pos:end="117:37"><name pos:start="117:30" pos:end="117:30">s</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:37">timer</name></name></expr></argument>, <argument pos:start="117:40" pos:end="117:44"><expr pos:start="117:40" pos:end="117:44"><name pos:start="117:40" pos:end="117:44">value</name></expr></argument>, <argument pos:start="117:47" pos:end="117:47"><expr pos:start="117:47" pos:end="117:47"><literal type="number" pos:start="117:47" pos:end="117:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="137:9">else <block pos:start="119:16" pos:end="137:9">{<block_content pos:start="121:13" pos:end="135:13">

            <expr_stmt pos:start="121:13" pos:end="121:40"><expr pos:start="121:13" pos:end="121:39"><call pos:start="121:13" pos:end="121:39"><name pos:start="121:13" pos:end="121:36">imx_timerg_update_counts</name><argument_list pos:start="121:37" pos:end="121:39">(<argument pos:start="121:38" pos:end="121:38"><expr pos:start="121:38" pos:end="121:38"><name pos:start="121:38" pos:end="121:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="135:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:31">(<expr pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:21">value</name> <operator pos:start="123:23" pos:end="123:23">&gt;</operator> <name pos:start="123:25" pos:end="123:30"><name pos:start="123:25" pos:end="123:25">s</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:30">cnt</name></name></expr>)</condition> <block pos:start="123:33" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:44">

                <expr_stmt pos:start="125:17" pos:end="125:35"><expr pos:start="125:17" pos:end="125:34"><name pos:start="125:17" pos:end="125:30"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:30">waiting_rov</name></name> <operator pos:start="125:32" pos:end="125:32">=</operator> <literal type="number" pos:start="125:34" pos:end="125:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:44"><expr pos:start="127:17" pos:end="127:43"><call pos:start="127:17" pos:end="127:43"><name pos:start="127:17" pos:end="127:33">imx_timerg_reload</name><argument_list pos:start="127:34" pos:end="127:43">(<argument pos:start="127:35" pos:end="127:35"><expr pos:start="127:35" pos:end="127:35"><name pos:start="127:35" pos:end="127:35">s</name></expr></argument>, <argument pos:start="127:38" pos:end="127:42"><expr pos:start="127:38" pos:end="127:42"><name pos:start="127:38" pos:end="127:42">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="129:15" pos:end="135:13">else <block pos:start="129:20" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:57">

                <expr_stmt pos:start="131:17" pos:end="131:35"><expr pos:start="131:17" pos:end="131:34"><name pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:30">waiting_rov</name></name> <operator pos:start="131:32" pos:end="131:32">=</operator> <literal type="number" pos:start="131:34" pos:end="131:34">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:57"><expr pos:start="133:17" pos:end="133:56"><call pos:start="133:17" pos:end="133:56"><name pos:start="133:17" pos:end="133:33">imx_timerg_reload</name><argument_list pos:start="133:34" pos:end="133:56">(<argument pos:start="133:35" pos:end="133:35"><expr pos:start="133:35" pos:end="133:35"><name pos:start="133:35" pos:end="133:35">s</name></expr></argument>, <argument pos:start="133:38" pos:end="133:55"><expr pos:start="133:38" pos:end="133:55"><name pos:start="133:38" pos:end="133:46">TIMER_MAX</name> <operator pos:start="133:48" pos:end="133:48">-</operator> <name pos:start="133:50" pos:end="133:55"><name pos:start="133:50" pos:end="133:50">s</name><operator pos:start="133:51" pos:end="133:52">-&gt;</operator><name pos:start="133:53" pos:end="133:55">cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:15">ocr1</name></name> <operator pos:start="139:17" pos:end="139:17">=</operator> <name pos:start="139:19" pos:end="139:23">value</name></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:15">return;</return>



    <default pos:start="145:5" pos:end="145:12">default:</default>

        <expr_stmt pos:start="147:9" pos:end="149:34"><expr pos:start="147:9" pos:end="149:33"><call pos:start="147:9" pos:end="149:33"><name pos:start="147:9" pos:end="147:15">IPRINTF</name><argument_list pos:start="147:16" pos:end="149:33">(<argument pos:start="147:17" pos:end="147:51"><expr pos:start="147:17" pos:end="147:51"><literal type="string" pos:start="147:17" pos:end="147:51">"imx_timerg_write: Bad offset %x\n"</literal></expr></argument>,

                <argument pos:start="149:17" pos:end="149:32"><expr pos:start="149:17" pos:end="149:32"><operator pos:start="149:17" pos:end="149:17">(</operator><name pos:start="149:18" pos:end="149:20">int</name><operator pos:start="149:21" pos:end="149:21">)</operator><name pos:start="149:22" pos:end="149:27">offset</name> <operator pos:start="149:29" pos:end="149:30">&gt;&gt;</operator> <literal type="number" pos:start="149:32" pos:end="149:32">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
