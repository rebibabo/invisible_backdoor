<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1440.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:33">circular_buffer_task</name><parameter_list pos:start="1:34" pos:end="1:53">( <parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">_URLContext</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">URLContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">h</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">_URLContext</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">UDPContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">h</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:23">old_cancelstate</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:69"><expr pos:start="13:5" pos:end="13:68"><call pos:start="13:5" pos:end="13:68"><name pos:start="13:5" pos:end="13:26">pthread_setcancelstate</name><argument_list pos:start="13:27" pos:end="13:68">(<argument pos:start="13:28" pos:end="13:49"><expr pos:start="13:28" pos:end="13:49"><name pos:start="13:28" pos:end="13:49">PTHREAD_CANCEL_DISABLE</name></expr></argument>, <argument pos:start="13:52" pos:end="13:67"><expr pos:start="13:52" pos:end="13:67"><operator pos:start="13:52" pos:end="13:52">&amp;</operator><name pos:start="13:53" pos:end="13:67">old_cancelstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><call pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:22">ff_socket_nonblock</name><argument_list pos:start="15:23" pos:end="15:36">(<argument pos:start="15:24" pos:end="15:32"><expr pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:32">udp_fd</name></name></expr></argument>, <argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="97:5">while<condition pos:start="17:10" pos:end="17:12">(<expr pos:start="17:11" pos:end="17:11"><literal type="number" pos:start="17:11" pos:end="17:11">1</literal></expr>)</condition> <block pos:start="17:14" pos:end="97:5">{<block_content pos:start="19:9" pos:end="95:40">

        <decl_stmt pos:start="19:9" pos:end="19:17"><decl pos:start="19:9" pos:end="19:16"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:16">left</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:16"><decl pos:start="21:9" pos:end="21:15"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:63">/* How much do we have left to the end of the buffer */</comment>

        <comment type="block" pos:start="27:9" pos:end="27:85">/* Whats the minimum we can read so that we dont comletely fill the buffer */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:12">left</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:37"><name pos:start="29:16" pos:end="29:28">av_fifo_space</name><argument_list pos:start="29:29" pos:end="29:37">(<argument pos:start="29:30" pos:end="29:36"><expr pos:start="29:30" pos:end="29:36"><name pos:start="29:30" pos:end="29:36"><name pos:start="29:30" pos:end="29:30">s</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:36">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="33:9" pos:end="37:29">/* Blocking operations are always cancellation points;

           see "General Information" / "Thread Cancelation Overview"

           in Single Unix. */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:72"><expr pos:start="39:9" pos:end="39:71"><call pos:start="39:9" pos:end="39:71"><name pos:start="39:9" pos:end="39:30">pthread_setcancelstate</name><argument_list pos:start="39:31" pos:end="39:71">(<argument pos:start="39:32" pos:end="39:52"><expr pos:start="39:32" pos:end="39:52"><name pos:start="39:32" pos:end="39:52">PTHREAD_CANCEL_ENABLE</name></expr></argument>, <argument pos:start="39:55" pos:end="39:70"><expr pos:start="39:55" pos:end="39:70"><operator pos:start="39:55" pos:end="39:55">&amp;</operator><name pos:start="39:56" pos:end="39:70">old_cancelstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:11">len</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:60"><name pos:start="41:15" pos:end="41:18">recv</name><argument_list pos:start="41:19" pos:end="41:60">(<argument pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:28"><name pos:start="41:20" pos:end="41:28"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:28">udp_fd</name></name></expr></argument>, <argument pos:start="41:31" pos:end="41:38"><expr pos:start="41:31" pos:end="41:38"><name pos:start="41:31" pos:end="41:36"><name pos:start="41:31" pos:end="41:31">s</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:36">tmp</name></name><operator pos:start="41:37" pos:end="41:37">+</operator><literal type="number" pos:start="41:38" pos:end="41:38">4</literal></expr></argument>, <argument pos:start="41:41" pos:end="41:56"><expr pos:start="41:41" pos:end="41:56"><sizeof pos:start="41:41" pos:end="41:54">sizeof<argument_list pos:start="41:47" pos:end="41:54">(<argument pos:start="41:48" pos:end="41:53"><expr pos:start="41:48" pos:end="41:53"><name pos:start="41:48" pos:end="41:53"><name pos:start="41:48" pos:end="41:48">s</name><operator pos:start="41:49" pos:end="41:50">-&gt;</operator><name pos:start="41:51" pos:end="41:53">tmp</name></name></expr></argument>)</argument_list></sizeof><operator pos:start="41:55" pos:end="41:55">-</operator><literal type="number" pos:start="41:56" pos:end="41:56">4</literal></expr></argument>, <argument pos:start="41:59" pos:end="41:59"><expr pos:start="41:59" pos:end="41:59"><literal type="number" pos:start="41:59" pos:end="41:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:73"><expr pos:start="43:9" pos:end="43:72"><call pos:start="43:9" pos:end="43:72"><name pos:start="43:9" pos:end="43:30">pthread_setcancelstate</name><argument_list pos:start="43:31" pos:end="43:72">(<argument pos:start="43:32" pos:end="43:53"><expr pos:start="43:32" pos:end="43:53"><name pos:start="43:32" pos:end="43:53">PTHREAD_CANCEL_DISABLE</name></expr></argument>, <argument pos:start="43:56" pos:end="43:71"><expr pos:start="43:56" pos:end="43:71"><operator pos:start="43:56" pos:end="43:56">&amp;</operator><name pos:start="43:57" pos:end="43:71">old_cancelstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="57:9"><if pos:start="45:9" pos:end="57:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">len</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="57:9">{<block_content pos:start="47:13" pos:end="55:21">

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:84">(<expr pos:start="47:17" pos:end="47:83"><call pos:start="47:17" pos:end="47:29"><name pos:start="47:17" pos:end="47:27">ff_neterrno</name><argument_list pos:start="47:28" pos:end="47:29">()</argument_list></call> <operator pos:start="47:31" pos:end="47:32">!=</operator> <call pos:start="47:34" pos:end="47:48"><name pos:start="47:34" pos:end="47:40">AVERROR</name><argument_list pos:start="47:41" pos:end="47:48">(<argument pos:start="47:42" pos:end="47:47"><expr pos:start="47:42" pos:end="47:47"><name pos:start="47:42" pos:end="47:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="47:50" pos:end="47:51">&amp;&amp;</operator> <call pos:start="47:53" pos:end="47:65"><name pos:start="47:53" pos:end="47:63">ff_neterrno</name><argument_list pos:start="47:64" pos:end="47:65">()</argument_list></call> <operator pos:start="47:67" pos:end="47:68">!=</operator> <call pos:start="47:70" pos:end="47:83"><name pos:start="47:70" pos:end="47:76">AVERROR</name><argument_list pos:start="47:77" pos:end="47:83">(<argument pos:start="47:78" pos:end="47:82"><expr pos:start="47:78" pos:end="47:82"><name pos:start="47:78" pos:end="47:82">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:86" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:25">

                <expr_stmt pos:start="49:17" pos:end="49:56"><expr pos:start="49:17" pos:end="49:55"><name pos:start="49:17" pos:end="49:40"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:40">circular_buffer_error</name></name> <operator pos:start="49:42" pos:end="49:42">=</operator> <call pos:start="49:44" pos:end="49:55"><name pos:start="49:44" pos:end="49:50">AVERROR</name><argument_list pos:start="49:51" pos:end="49:55">(<argument pos:start="49:52" pos:end="49:54"><expr pos:start="49:52" pos:end="49:54"><name pos:start="49:52" pos:end="49:54">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="51:17" pos:end="51:25">goto <name pos:start="51:22" pos:end="51:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <continue pos:start="55:13" pos:end="55:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><call pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:15">AV_WL32</name><argument_list pos:start="59:16" pos:end="59:28">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:17">s</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:22">tmp</name></name></expr></argument>, <argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="87:9"><if pos:start="61:9" pos:end="87:9">if<condition pos:start="61:11" pos:end="61:26">(<expr pos:start="61:12" pos:end="61:25"><name pos:start="61:12" pos:end="61:15">left</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <name pos:start="61:19" pos:end="61:21">len</name> <operator pos:start="61:23" pos:end="61:23">+</operator> <literal type="number" pos:start="61:25" pos:end="61:25">4</literal></expr>)</condition> <block pos:start="61:28" pos:end="87:9">{<block_content pos:start="65:13" pos:end="85:13">

            <comment type="block" pos:start="63:13" pos:end="63:31">/* No Space left */</comment>

            <if_stmt pos:start="65:13" pos:end="85:13"><if pos:start="65:13" pos:end="73:13">if <condition pos:start="65:16" pos:end="65:36">(<expr pos:start="65:17" pos:end="65:35"><name pos:start="65:17" pos:end="65:35"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:35">overrun_nonfatal</name></name></expr>)</condition> <block pos:start="65:38" pos:end="73:13">{<block_content pos:start="67:17" pos:end="71:25">

                <expr_stmt pos:start="67:17" pos:end="69:70"><expr pos:start="67:17" pos:end="69:69"><call pos:start="67:17" pos:end="69:69"><name pos:start="67:17" pos:end="67:22">av_log</name><argument_list pos:start="67:23" pos:end="69:69">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">h</name></expr></argument>, <argument pos:start="67:27" pos:end="67:40"><expr pos:start="67:27" pos:end="67:40"><name pos:start="67:27" pos:end="67:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="67:43" pos:end="69:68"><expr pos:start="67:43" pos:end="69:68"><literal type="string" pos:start="67:43" pos:end="67:69">"Circular buffer overrun. "</literal>

                        <literal type="string" pos:start="69:25" pos:end="69:68">"Surviving due to overrun_nonfatal option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="71:17" pos:end="71:25">continue;</continue>

            </block_content>}</block></if> <else pos:start="73:15" pos:end="85:13">else <block pos:start="73:20" pos:end="85:13">{<block_content pos:start="75:17" pos:end="83:25">

                <expr_stmt pos:start="75:17" pos:end="79:82"><expr pos:start="75:17" pos:end="79:81"><call pos:start="75:17" pos:end="79:81"><name pos:start="75:17" pos:end="75:22">av_log</name><argument_list pos:start="75:23" pos:end="79:81">(<argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><name pos:start="75:24" pos:end="75:24">h</name></expr></argument>, <argument pos:start="75:27" pos:end="75:38"><expr pos:start="75:27" pos:end="75:38"><name pos:start="75:27" pos:end="75:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:41" pos:end="79:80"><expr pos:start="75:41" pos:end="79:80"><literal type="string" pos:start="75:41" pos:end="75:67">"Circular buffer overrun. "</literal>

                        <literal type="string" pos:start="77:25" pos:end="77:67">"To avoid, increase fifo_size URL option. "</literal>

                        <literal type="string" pos:start="79:25" pos:end="79:80">"To survive in such case, use overrun_nonfatal option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:56"><expr pos:start="81:17" pos:end="81:55"><name pos:start="81:17" pos:end="81:40"><name pos:start="81:17" pos:end="81:17">s</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:40">circular_buffer_error</name></name> <operator pos:start="81:42" pos:end="81:42">=</operator> <call pos:start="81:44" pos:end="81:55"><name pos:start="81:44" pos:end="81:50">AVERROR</name><argument_list pos:start="81:51" pos:end="81:55">(<argument pos:start="81:52" pos:end="81:54"><expr pos:start="81:52" pos:end="81:54"><name pos:start="81:52" pos:end="81:54">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="83:17" pos:end="83:25">goto <name pos:start="83:22" pos:end="83:24">end</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:38"><expr pos:start="89:9" pos:end="89:37"><call pos:start="89:9" pos:end="89:37"><name pos:start="89:9" pos:end="89:26">pthread_mutex_lock</name><argument_list pos:start="89:27" pos:end="89:37">(<argument pos:start="89:28" pos:end="89:36"><expr pos:start="89:28" pos:end="89:36"><operator pos:start="89:28" pos:end="89:28">&amp;</operator><name pos:start="89:29" pos:end="89:36"><name pos:start="89:29" pos:end="89:29">s</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:60"><expr pos:start="91:9" pos:end="91:59"><call pos:start="91:9" pos:end="91:59"><name pos:start="91:9" pos:end="91:29">av_fifo_generic_write</name><argument_list pos:start="91:30" pos:end="91:59">(<argument pos:start="91:31" pos:end="91:37"><expr pos:start="91:31" pos:end="91:37"><name pos:start="91:31" pos:end="91:37"><name pos:start="91:31" pos:end="91:31">s</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:37">fifo</name></name></expr></argument>, <argument pos:start="91:40" pos:end="91:45"><expr pos:start="91:40" pos:end="91:45"><name pos:start="91:40" pos:end="91:45"><name pos:start="91:40" pos:end="91:40">s</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:45">tmp</name></name></expr></argument>, <argument pos:start="91:48" pos:end="91:52"><expr pos:start="91:48" pos:end="91:52"><name pos:start="91:48" pos:end="91:50">len</name><operator pos:start="91:51" pos:end="91:51">+</operator><literal type="number" pos:start="91:52" pos:end="91:52">4</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:58"><expr pos:start="91:55" pos:end="91:58"><name pos:start="91:55" pos:end="91:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:38"><expr pos:start="93:9" pos:end="93:37"><call pos:start="93:9" pos:end="93:37"><name pos:start="93:9" pos:end="93:27">pthread_cond_signal</name><argument_list pos:start="93:28" pos:end="93:37">(<argument pos:start="93:29" pos:end="93:36"><expr pos:start="93:29" pos:end="93:36"><operator pos:start="93:29" pos:end="93:29">&amp;</operator><name pos:start="93:30" pos:end="93:36"><name pos:start="93:30" pos:end="93:30">s</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:36">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:40"><expr pos:start="95:9" pos:end="95:39"><call pos:start="95:9" pos:end="95:39"><name pos:start="95:9" pos:end="95:28">pthread_mutex_unlock</name><argument_list pos:start="95:29" pos:end="95:39">(<argument pos:start="95:30" pos:end="95:38"><expr pos:start="95:30" pos:end="95:38"><operator pos:start="95:30" pos:end="95:30">&amp;</operator><name pos:start="95:31" pos:end="95:38"><name pos:start="95:31" pos:end="95:31">s</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



<label pos:start="101:1" pos:end="101:4"><name pos:start="101:1" pos:end="101:3">end</name>:</label>

    <expr_stmt pos:start="103:5" pos:end="103:34"><expr pos:start="103:5" pos:end="103:33"><call pos:start="103:5" pos:end="103:33"><name pos:start="103:5" pos:end="103:22">pthread_mutex_lock</name><argument_list pos:start="103:23" pos:end="103:33">(<argument pos:start="103:24" pos:end="103:32"><expr pos:start="103:24" pos:end="103:32"><operator pos:start="103:24" pos:end="103:24">&amp;</operator><name pos:start="103:25" pos:end="103:32"><name pos:start="103:25" pos:end="103:25">s</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:32">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:34"><expr pos:start="105:5" pos:end="105:33"><call pos:start="105:5" pos:end="105:33"><name pos:start="105:5" pos:end="105:23">pthread_cond_signal</name><argument_list pos:start="105:24" pos:end="105:33">(<argument pos:start="105:25" pos:end="105:32"><expr pos:start="105:25" pos:end="105:32"><operator pos:start="105:25" pos:end="105:25">&amp;</operator><name pos:start="105:26" pos:end="105:32"><name pos:start="105:26" pos:end="105:26">s</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:32">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:36"><expr pos:start="107:5" pos:end="107:35"><call pos:start="107:5" pos:end="107:35"><name pos:start="107:5" pos:end="107:24">pthread_mutex_unlock</name><argument_list pos:start="107:25" pos:end="107:35">(<argument pos:start="107:26" pos:end="107:34"><expr pos:start="107:26" pos:end="107:34"><operator pos:start="107:26" pos:end="107:26">&amp;</operator><name pos:start="107:27" pos:end="107:34"><name pos:start="107:27" pos:end="107:27">s</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:34">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="109:5" pos:end="109:16">return <expr pos:start="109:12" pos:end="109:15"><name pos:start="109:12" pos:end="109:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
