<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11028.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">alloc_buffer</name><parameter_list pos:start="1:24" pos:end="1:82">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:35">FrameBuffer</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier><modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">pool</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:58">AVCodecContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:81"><decl pos:start="1:64" pos:end="1:81"><type pos:start="1:64" pos:end="1:81"><name pos:start="1:64" pos:end="1:74">FrameBuffer</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier><modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:81">pbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:69"><decl pos:start="5:5" pos:end="5:68"><type pos:start="5:5" pos:end="5:30"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:28">AVPixFmtDescriptor</name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:34">desc</name> <init pos:start="5:36" pos:end="5:68">= <expr pos:start="5:38" pos:end="5:68"><call pos:start="5:38" pos:end="5:68"><name pos:start="5:38" pos:end="5:56">av_pix_fmt_desc_get</name><argument_list pos:start="5:57" pos:end="5:68">(<argument pos:start="5:58" pos:end="5:67"><expr pos:start="5:58" pos:end="5:67"><name pos:start="5:58" pos:end="5:67"><name pos:start="5:58" pos:end="5:58">s</name><operator pos:start="5:59" pos:end="5:60">-&gt;</operator><name pos:start="5:61" pos:end="5:67">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">FrameBuffer</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">pixel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">h_chroma_shift</name></decl>, <decl pos:start="13:25" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:38">v_chroma_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">edge</name> <init pos:start="15:14" pos:end="15:17">= <expr pos:start="15:16" pos:end="15:17"><literal type="number" pos:start="15:16" pos:end="15:17">32</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="15:20" pos:end="15:84">// XXX should be avcodec_get_edge_width(), but that fails on svq1</comment>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">w</name> <init pos:start="17:11" pos:end="17:20">= <expr pos:start="17:13" pos:end="17:20"><name pos:start="17:13" pos:end="17:20"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:20">width</name></name></expr></init></decl>, <decl pos:start="17:23" pos:end="17:35"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:23" pos:end="17:23">h</name> <init pos:start="17:25" pos:end="17:35">= <expr pos:start="17:27" pos:end="17:35"><name pos:start="17:27" pos:end="17:35"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:35">height</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">desc</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:14">pixel_size</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:30"><name pos:start="25:18" pos:end="25:21">desc</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">comp</name><index pos:start="25:28" pos:end="25:30">[<expr pos:start="25:29" pos:end="25:29"><literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>]</index></name><operator pos:start="25:31" pos:end="25:31">.</operator><name pos:start="25:32" pos:end="25:42">step_minus1</name> <operator pos:start="25:44" pos:end="25:44">+</operator> <literal type="number" pos:start="25:46" pos:end="25:46">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:7">buf</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:34"><name pos:start="29:11" pos:end="29:20">av_mallocz</name><argument_list pos:start="29:21" pos:end="29:34">(<argument pos:start="29:22" pos:end="29:33"><expr pos:start="29:22" pos:end="29:33"><sizeof pos:start="29:22" pos:end="29:33">sizeof<argument_list pos:start="29:28" pos:end="29:33">(<argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><operator pos:start="29:29" pos:end="29:29">*</operator><name pos:start="29:30" pos:end="29:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:31"><if pos:start="31:5" pos:end="33:31">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">buf</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:31"><block_content pos:start="33:9" pos:end="33:31">

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:42">(<expr pos:start="37:9" pos:end="37:41"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:18"><name pos:start="37:11" pos:end="37:11">s</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:18">flags</name></name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <name pos:start="37:22" pos:end="37:40">CODEC_FLAG_EMU_EDGE</name><operator pos:start="37:41" pos:end="37:41">)</operator></expr>)</condition> <block pos:start="37:44" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:20">

        <expr_stmt pos:start="39:9" pos:end="39:20"><expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:9">w</name> <operator pos:start="39:11" pos:end="39:12">+=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">2</literal><operator pos:start="39:15" pos:end="39:15">*</operator><name pos:start="39:16" pos:end="39:19">edge</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:20"><expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:9">h</name> <operator pos:start="41:11" pos:end="41:12">+=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">2</literal><operator pos:start="41:15" pos:end="41:15">*</operator><name pos:start="41:16" pos:end="41:19">edge</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><call pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:28">avcodec_align_dimensions</name><argument_list pos:start="47:29" pos:end="47:39">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">s</name></expr></argument>, <argument pos:start="47:33" pos:end="47:34"><expr pos:start="47:33" pos:end="47:34"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:34">w</name></expr></argument>, <argument pos:start="47:37" pos:end="47:38"><expr pos:start="47:37" pos:end="47:38"><operator pos:start="47:37" pos:end="47:37">&amp;</operator><name pos:start="47:38" pos:end="47:38">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="51:51">(<expr pos:start="49:9" pos:end="51:50"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:12">ret</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="51:45"><name pos:start="49:16" pos:end="49:29">av_image_alloc</name><argument_list pos:start="49:30" pos:end="51:45">(<argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:33">buf</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:39">base</name></name></expr></argument>, <argument pos:start="49:42" pos:end="49:54"><expr pos:start="49:42" pos:end="49:54"><name pos:start="49:42" pos:end="49:54"><name pos:start="49:42" pos:end="49:44">buf</name><operator pos:start="49:45" pos:end="49:46">-&gt;</operator><name pos:start="49:47" pos:end="49:54">linesize</name></name></expr></argument>, <argument pos:start="49:57" pos:end="49:57"><expr pos:start="49:57" pos:end="49:57"><name pos:start="49:57" pos:end="49:57">w</name></expr></argument>, <argument pos:start="49:60" pos:end="49:60"><expr pos:start="49:60" pos:end="49:60"><name pos:start="49:60" pos:end="49:60">h</name></expr></argument>,

                              <argument pos:start="51:31" pos:end="51:40"><expr pos:start="51:31" pos:end="51:40"><name pos:start="51:31" pos:end="51:40"><name pos:start="51:31" pos:end="51:31">s</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:40">pix_fmt</name></name></expr></argument>, <argument pos:start="51:43" pos:end="51:44"><expr pos:start="51:43" pos:end="51:44"><literal type="number" pos:start="51:43" pos:end="51:44">32</literal></expr></argument>)</argument_list></call><operator pos:start="51:46" pos:end="51:46">)</operator> <operator pos:start="51:48" pos:end="51:48">&lt;</operator> <literal type="number" pos:start="51:50" pos:end="51:50">0</literal></expr>)</condition> <block pos:start="51:53" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:19">

        <expr_stmt pos:start="53:9" pos:end="53:23"><expr pos:start="53:9" pos:end="53:22"><call pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:16">av_freep</name><argument_list pos:start="53:17" pos:end="53:22">(<argument pos:start="53:18" pos:end="53:21"><expr pos:start="53:18" pos:end="53:21"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:19">return <expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="59:5" pos:end="65:7">/* XXX this shouldn't be needed, but some tests break without this line

     * those decoders are buggy and need to be fixed.

     * the following tests fail:

     */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><call pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:10">memset</name><argument_list pos:start="67:11" pos:end="67:34">(<argument pos:start="67:12" pos:end="67:23"><expr pos:start="67:12" pos:end="67:23"><name pos:start="67:12" pos:end="67:23"><name pos:start="67:12" pos:end="67:14">buf</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:20">base</name><index pos:start="67:21" pos:end="67:23">[<expr pos:start="67:22" pos:end="67:22"><literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:26" pos:end="67:28"><expr pos:start="67:26" pos:end="67:28"><literal type="number" pos:start="67:26" pos:end="67:28">128</literal></expr></argument>, <argument pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:71"><expr pos:start="71:5" pos:end="73:70"><call pos:start="71:5" pos:end="73:70"><name pos:start="71:5" pos:end="71:36">av_pix_fmt_get_chroma_sub_sample</name><argument_list pos:start="71:37" pos:end="73:70">(<argument pos:start="71:38" pos:end="71:47"><expr pos:start="71:38" pos:end="71:47"><name pos:start="71:38" pos:end="71:47"><name pos:start="71:38" pos:end="71:38">s</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:47">pix_fmt</name></name></expr></argument>,

                                     <argument pos:start="73:38" pos:end="73:52"><expr pos:start="73:38" pos:end="73:52"><operator pos:start="73:38" pos:end="73:38">&amp;</operator><name pos:start="73:39" pos:end="73:52">h_chroma_shift</name></expr></argument>, <argument pos:start="73:55" pos:end="73:69"><expr pos:start="73:55" pos:end="73:69"><operator pos:start="73:55" pos:end="73:55">&amp;</operator><name pos:start="73:56" pos:end="73:69">v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="77:5" pos:end="95:5">for <control pos:start="77:9" pos:end="77:51">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:46"><expr pos:start="77:17" pos:end="77:45"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <call pos:start="77:21" pos:end="77:45"><name pos:start="77:21" pos:end="77:34">FF_ARRAY_ELEMS</name><argument_list pos:start="77:35" pos:end="77:45">(<argument pos:start="77:36" pos:end="77:44"><expr pos:start="77:36" pos:end="77:44"><name pos:start="77:36" pos:end="77:44"><name pos:start="77:36" pos:end="77:38">buf</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:44">data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="77:48" pos:end="77:50"><expr pos:start="77:48" pos:end="77:50"><name pos:start="77:48" pos:end="77:48">i</name><operator pos:start="77:49" pos:end="77:50">++</operator></expr></incr>)</control> <block pos:start="77:53" pos:end="95:5">{<block_content pos:start="79:9" pos:end="93:69">

        <decl_stmt pos:start="79:9" pos:end="79:54"><decl pos:start="79:9" pos:end="79:53"><type pos:start="79:9" pos:end="79:17"><specifier pos:start="79:9" pos:end="79:13">const</specifier> <name pos:start="79:15" pos:end="79:17">int</name></type> <name pos:start="79:19" pos:end="79:25">h_shift</name> <init pos:start="79:27" pos:end="79:53">= <expr pos:start="79:29" pos:end="79:53"><ternary pos:start="79:29" pos:end="79:53"><condition pos:start="79:29" pos:end="79:34"><expr pos:start="79:29" pos:end="79:32"><name pos:start="79:29" pos:end="79:29">i</name><operator pos:start="79:30" pos:end="79:31">==</operator><literal type="number" pos:start="79:32" pos:end="79:32">0</literal></expr> ?</condition><then pos:start="79:36" pos:end="79:36"> <expr pos:start="79:36" pos:end="79:36"><literal type="number" pos:start="79:36" pos:end="79:36">0</literal></expr> </then><else pos:start="79:38" pos:end="79:53">: <expr pos:start="79:40" pos:end="79:53"><name pos:start="79:40" pos:end="79:53">h_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:54"><decl pos:start="81:9" pos:end="81:53"><type pos:start="81:9" pos:end="81:17"><specifier pos:start="81:9" pos:end="81:13">const</specifier> <name pos:start="81:15" pos:end="81:17">int</name></type> <name pos:start="81:19" pos:end="81:25">v_shift</name> <init pos:start="81:27" pos:end="81:53">= <expr pos:start="81:29" pos:end="81:53"><ternary pos:start="81:29" pos:end="81:53"><condition pos:start="81:29" pos:end="81:34"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:29">i</name><operator pos:start="81:30" pos:end="81:31">==</operator><literal type="number" pos:start="81:32" pos:end="81:32">0</literal></expr> ?</condition><then pos:start="81:36" pos:end="81:36"> <expr pos:start="81:36" pos:end="81:36"><literal type="number" pos:start="81:36" pos:end="81:36">0</literal></expr> </then><else pos:start="81:38" pos:end="81:53">: <expr pos:start="81:40" pos:end="81:53"><name pos:start="81:40" pos:end="81:53">v_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="83:9" pos:end="93:69"><if pos:start="83:9" pos:end="85:40">if <condition pos:start="83:12" pos:end="83:43">(<expr pos:start="83:13" pos:end="83:42"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:20">flags</name></name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:42">CODEC_FLAG_EMU_EDGE</name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:40"><block_content pos:start="85:13" pos:end="85:40">

            <expr_stmt pos:start="85:13" pos:end="85:40"><expr pos:start="85:13" pos:end="85:39"><name pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:15">buf</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:21">data</name><index pos:start="85:22" pos:end="85:24">[<expr pos:start="85:23" pos:end="85:23"><name pos:start="85:23" pos:end="85:23">i</name></expr>]</index></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:39"><name pos:start="85:28" pos:end="85:30">buf</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:36">base</name><index pos:start="85:37" pos:end="85:39">[<expr pos:start="85:38" pos:end="85:38"><name pos:start="85:38" pos:end="85:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="87:9" pos:end="93:69">else if <condition pos:start="87:17" pos:end="87:30">(<expr pos:start="87:18" pos:end="87:29"><name pos:start="87:18" pos:end="87:29"><name pos:start="87:18" pos:end="87:20">buf</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:26">base</name><index pos:start="87:27" pos:end="87:29">[<expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="93:69"><block_content pos:start="89:13" pos:end="93:69">

            <expr_stmt pos:start="89:13" pos:end="93:69"><expr pos:start="89:13" pos:end="93:68"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:15">buf</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:21">data</name><index pos:start="89:22" pos:end="89:24">[<expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">i</name></expr>]</index></name> <operator pos:start="89:26" pos:end="89:26">=</operator> <name pos:start="89:28" pos:end="89:39"><name pos:start="89:28" pos:end="89:30">buf</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:36">base</name><index pos:start="89:37" pos:end="89:39">[<expr pos:start="89:38" pos:end="89:38"><name pos:start="89:38" pos:end="89:38">i</name></expr>]</index></name> <operator pos:start="89:41" pos:end="89:41">+</operator>

                           <call pos:start="91:28" pos:end="93:68"><name pos:start="91:28" pos:end="91:34">FFALIGN</name><argument_list pos:start="91:35" pos:end="93:68">(<argument pos:start="91:36" pos:end="93:63"><expr pos:start="91:36" pos:end="93:63"><operator pos:start="91:36" pos:end="91:36">(</operator><name pos:start="91:37" pos:end="91:52"><name pos:start="91:37" pos:end="91:39">buf</name><operator pos:start="91:40" pos:end="91:41">-&gt;</operator><name pos:start="91:42" pos:end="91:49">linesize</name><index pos:start="91:50" pos:end="91:52">[<expr pos:start="91:51" pos:end="91:51"><name pos:start="91:51" pos:end="91:51">i</name></expr>]</index></name><operator pos:start="91:53" pos:end="91:53">*</operator><name pos:start="91:54" pos:end="91:57">edge</name> <operator pos:start="91:59" pos:end="91:60">&gt;&gt;</operator> <name pos:start="91:62" pos:end="91:68">v_shift</name><operator pos:start="91:69" pos:end="91:69">)</operator> <operator pos:start="91:71" pos:end="91:71">+</operator>

                                   <operator pos:start="93:36" pos:end="93:36">(</operator><name pos:start="93:37" pos:end="93:46">pixel_size</name><operator pos:start="93:47" pos:end="93:47">*</operator><name pos:start="93:48" pos:end="93:51">edge</name> <operator pos:start="93:53" pos:end="93:54">&gt;&gt;</operator> <name pos:start="93:56" pos:end="93:62">h_shift</name><operator pos:start="93:63" pos:end="93:63">)</operator></expr></argument>, <argument pos:start="93:66" pos:end="93:67"><expr pos:start="93:66" pos:end="93:67"><literal type="number" pos:start="93:66" pos:end="93:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:10"><name pos:start="97:5" pos:end="97:7">buf</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:10">w</name></name>       <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:27"><name pos:start="97:20" pos:end="97:20">s</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:27">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:29"><expr pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:10"><name pos:start="99:5" pos:end="99:7">buf</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:10">h</name></name>       <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:28"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:28">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:30"><expr pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:16"><name pos:start="101:5" pos:end="101:7">buf</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:16">pix_fmt</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:29"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:29">pix_fmt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:24"><expr pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:13"><name pos:start="103:5" pos:end="103:7">buf</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:13">pool</name></name>    <operator pos:start="103:18" pos:end="103:18">=</operator> <name pos:start="103:20" pos:end="103:23">pool</name></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:16"><expr pos:start="107:5" pos:end="107:15"><operator pos:start="107:5" pos:end="107:5">*</operator><name pos:start="107:6" pos:end="107:9">pbuf</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <name pos:start="107:13" pos:end="107:15">buf</name></expr>;</expr_stmt>

    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
