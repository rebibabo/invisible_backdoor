<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25536.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:34">pcie_aer_msg_root_port</name><parameter_list pos:start="1:35" pos:end="1:73">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:44">PCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">dev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:72"><decl pos:start="1:52" pos:end="1:72"><type pos:start="1:52" pos:end="1:72"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:67">PCIEAERMsg</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">msg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:20">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:17">msg_sent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:16">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:20">aer_cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">root_cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:24">root_status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:20">msi_trigger</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:12">msg_sent</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:20">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:50"><expr pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:7">cmd</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:49"><name pos:start="21:11" pos:end="21:22">pci_get_word</name><argument_list pos:start="21:23" pos:end="21:49">(<argument pos:start="21:24" pos:end="21:48"><expr pos:start="21:24" pos:end="21:48"><name pos:start="21:24" pos:end="21:34"><name pos:start="21:24" pos:end="21:26">dev</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:34">config</name></name> <operator pos:start="21:36" pos:end="21:36">+</operator> <name pos:start="21:38" pos:end="21:48">PCI_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:11">aer_cap</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:25"><name pos:start="23:15" pos:end="23:17">dev</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:25">config</name></name> <operator pos:start="23:27" pos:end="23:27">+</operator> <name pos:start="23:29" pos:end="23:44"><name pos:start="23:29" pos:end="23:31">dev</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:36">exp</name><operator pos:start="23:37" pos:end="23:37">.</operator><name pos:start="23:38" pos:end="23:44">aer_cap</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:60"><expr pos:start="25:5" pos:end="25:59"><name pos:start="25:5" pos:end="25:12">root_cmd</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:59"><name pos:start="25:16" pos:end="25:27">pci_get_long</name><argument_list pos:start="25:28" pos:end="25:59">(<argument pos:start="25:29" pos:end="25:58"><expr pos:start="25:29" pos:end="25:58"><name pos:start="25:29" pos:end="25:35">aer_cap</name> <operator pos:start="25:37" pos:end="25:37">+</operator> <name pos:start="25:39" pos:end="25:58">PCI_ERR_ROOT_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:62"><expr pos:start="27:5" pos:end="27:61"><name pos:start="27:5" pos:end="27:15">root_status</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:61"><name pos:start="27:19" pos:end="27:30">pci_get_long</name><argument_list pos:start="27:31" pos:end="27:61">(<argument pos:start="27:32" pos:end="27:60"><expr pos:start="27:32" pos:end="27:60"><name pos:start="27:32" pos:end="27:38">aer_cap</name> <operator pos:start="27:40" pos:end="27:40">+</operator> <name pos:start="27:42" pos:end="27:60">PCI_ERR_ROOT_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:15">msi_trigger</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:23">false</name></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:11">cmd</name> <operator pos:start="33:13" pos:end="33:13">&amp;</operator> <name pos:start="33:15" pos:end="33:30">PCI_COMMAND_SERR</name></expr>)</condition> <block pos:start="33:33" pos:end="51:5">{<block_content>

        <comment type="block" pos:start="35:9" pos:end="49:11">/* System Error.

         *

         * The way to report System Error is platform specific and

         * it isn't implemented in qemu right now.

         * So just discard the error for now.

         * OS which cares of aer would receive errors via

         * native aer mechanims, so this wouldn't matter.

         */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:60">/* Errro Message Received: Root Error Status register */</comment>

    <switch pos:start="57:5" pos:end="121:5">switch <condition pos:start="57:12" pos:end="57:26">(<expr pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:15">msg</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:25">severity</name></name></expr>)</condition> <block pos:start="57:28" pos:end="121:5">{<block_content pos:start="59:5" pos:end="119:14">

    <case pos:start="59:5" pos:end="59:33">case <expr pos:start="59:10" pos:end="59:32"><name pos:start="59:10" pos:end="59:32">PCI_ERR_ROOT_CMD_COR_EN</name></expr>:</case>

        <if_stmt pos:start="61:9" pos:end="75:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:47">(<expr pos:start="61:13" pos:end="61:46"><name pos:start="61:13" pos:end="61:23">root_status</name> <operator pos:start="61:25" pos:end="61:25">&amp;</operator> <name pos:start="61:27" pos:end="61:46">PCI_ERR_ROOT_COR_RCV</name></expr>)</condition> <block pos:start="61:49" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:54">

            <expr_stmt pos:start="63:13" pos:end="63:54"><expr pos:start="63:13" pos:end="63:53"><name pos:start="63:13" pos:end="63:23">root_status</name> <operator pos:start="63:25" pos:end="63:26">|=</operator> <name pos:start="63:28" pos:end="63:53">PCI_ERR_ROOT_MULTI_COR_RCV</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="75:9">else <block pos:start="65:16" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:73">

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:51">(<expr pos:start="67:17" pos:end="67:50"><name pos:start="67:17" pos:end="67:24">root_cmd</name> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <name pos:start="67:28" pos:end="67:50">PCI_ERR_ROOT_CMD_COR_EN</name></expr>)</condition> <block pos:start="67:53" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:35">

                <expr_stmt pos:start="69:17" pos:end="69:35"><expr pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:27">msi_trigger</name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:34">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:73"><expr pos:start="73:13" pos:end="73:72"><call pos:start="73:13" pos:end="73:72"><name pos:start="73:13" pos:end="73:24">pci_set_word</name><argument_list pos:start="73:25" pos:end="73:72">(<argument pos:start="73:26" pos:end="73:55"><expr pos:start="73:26" pos:end="73:55"><name pos:start="73:26" pos:end="73:32">aer_cap</name> <operator pos:start="73:34" pos:end="73:34">+</operator> <name pos:start="73:36" pos:end="73:55">PCI_ERR_ROOT_COR_SRC</name></expr></argument>, <argument pos:start="73:58" pos:end="73:71"><expr pos:start="73:58" pos:end="73:71"><name pos:start="73:58" pos:end="73:71"><name pos:start="73:58" pos:end="73:60">msg</name><operator pos:start="73:61" pos:end="73:62">-&gt;</operator><name pos:start="73:63" pos:end="73:71">source_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:19">root_status</name> <operator pos:start="77:21" pos:end="77:22">|=</operator> <name pos:start="77:24" pos:end="77:43">PCI_ERR_ROOT_COR_RCV</name></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:38">case <expr pos:start="81:10" pos:end="81:37"><name pos:start="81:10" pos:end="81:37">PCI_ERR_ROOT_CMD_NONFATAL_EN</name></expr>:</case>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="85:52">(<expr pos:start="83:13" pos:end="85:51"><operator pos:start="83:13" pos:end="83:13">!</operator><operator pos:start="83:14" pos:end="83:14">(</operator><name pos:start="83:15" pos:end="83:25">root_status</name> <operator pos:start="83:27" pos:end="83:27">&amp;</operator> <name pos:start="83:29" pos:end="83:53">PCI_ERR_ROOT_NONFATAL_RCV</name><operator pos:start="83:54" pos:end="83:54">)</operator> <operator pos:start="83:56" pos:end="83:57">&amp;&amp;</operator>

            <name pos:start="85:13" pos:end="85:20">root_cmd</name> <operator pos:start="85:22" pos:end="85:22">&amp;</operator> <name pos:start="85:24" pos:end="85:51">PCI_ERR_ROOT_CMD_NONFATAL_EN</name></expr>)</condition> <block pos:start="85:54" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:31">

            <expr_stmt pos:start="87:13" pos:end="87:31"><expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:23">msi_trigger</name> <operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:49"><expr pos:start="91:9" pos:end="91:48"><name pos:start="91:9" pos:end="91:19">root_status</name> <operator pos:start="91:21" pos:end="91:22">|=</operator> <name pos:start="91:24" pos:end="91:48">PCI_ERR_ROOT_NONFATAL_RCV</name></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:35">case <expr pos:start="95:10" pos:end="95:34"><name pos:start="95:10" pos:end="95:34">PCI_ERR_ROOT_CMD_FATAL_EN</name></expr>:</case>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="99:49">(<expr pos:start="97:13" pos:end="99:48"><operator pos:start="97:13" pos:end="97:13">!</operator><operator pos:start="97:14" pos:end="97:14">(</operator><name pos:start="97:15" pos:end="97:25">root_status</name> <operator pos:start="97:27" pos:end="97:27">&amp;</operator> <name pos:start="97:29" pos:end="97:50">PCI_ERR_ROOT_FATAL_RCV</name><operator pos:start="97:51" pos:end="97:51">)</operator> <operator pos:start="97:53" pos:end="97:54">&amp;&amp;</operator>

            <name pos:start="99:13" pos:end="99:20">root_cmd</name> <operator pos:start="99:22" pos:end="99:22">&amp;</operator> <name pos:start="99:24" pos:end="99:48">PCI_ERR_ROOT_CMD_FATAL_EN</name></expr>)</condition> <block pos:start="99:51" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:31">

            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:23">msi_trigger</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <name pos:start="101:27" pos:end="101:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:52">(<expr pos:start="105:13" pos:end="105:51"><operator pos:start="105:13" pos:end="105:13">!</operator><operator pos:start="105:14" pos:end="105:14">(</operator><name pos:start="105:15" pos:end="105:25">root_status</name> <operator pos:start="105:27" pos:end="105:27">&amp;</operator> <name pos:start="105:29" pos:end="105:50">PCI_ERR_ROOT_UNCOR_RCV</name><operator pos:start="105:51" pos:end="105:51">)</operator></expr>)</condition> <block pos:start="105:54" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:52">

            <expr_stmt pos:start="107:13" pos:end="107:52"><expr pos:start="107:13" pos:end="107:51"><name pos:start="107:13" pos:end="107:23">root_status</name> <operator pos:start="107:25" pos:end="107:26">|=</operator> <name pos:start="107:28" pos:end="107:51">PCI_ERR_ROOT_FIRST_FATAL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:46"><expr pos:start="111:9" pos:end="111:45"><name pos:start="111:9" pos:end="111:19">root_status</name> <operator pos:start="111:21" pos:end="111:22">|=</operator> <name pos:start="111:24" pos:end="111:45">PCI_ERR_ROOT_FATAL_RCV</name></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <default pos:start="115:5" pos:end="115:12">default:</default>

        <expr_stmt pos:start="117:9" pos:end="117:16"><expr pos:start="117:9" pos:end="117:15"><call pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:13">abort</name><argument_list pos:start="117:14" pos:end="117:15">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="123:5" pos:end="137:5"><if pos:start="123:5" pos:end="137:5">if <condition pos:start="123:8" pos:end="123:35">(<expr pos:start="123:9" pos:end="123:34"><call pos:start="123:9" pos:end="123:34"><name pos:start="123:9" pos:end="123:29">pcie_aer_msg_is_uncor</name><argument_list pos:start="123:30" pos:end="123:34">(<argument pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><name pos:start="123:31" pos:end="123:33">msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:37" pos:end="137:5">{<block_content pos:start="125:9" pos:end="135:46">

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:49">(<expr pos:start="125:13" pos:end="125:48"><name pos:start="125:13" pos:end="125:23">root_status</name> <operator pos:start="125:25" pos:end="125:25">&amp;</operator> <name pos:start="125:27" pos:end="125:48">PCI_ERR_ROOT_UNCOR_RCV</name></expr>)</condition> <block pos:start="125:51" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:56">

            <expr_stmt pos:start="127:13" pos:end="127:56"><expr pos:start="127:13" pos:end="127:55"><name pos:start="127:13" pos:end="127:23">root_status</name> <operator pos:start="127:25" pos:end="127:26">|=</operator> <name pos:start="127:28" pos:end="127:55">PCI_ERR_ROOT_MULTI_UNCOR_RCV</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="133:9">else <block pos:start="129:16" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:69">

            <expr_stmt pos:start="131:13" pos:end="131:69"><expr pos:start="131:13" pos:end="131:68"><call pos:start="131:13" pos:end="131:68"><name pos:start="131:13" pos:end="131:24">pci_set_word</name><argument_list pos:start="131:25" pos:end="131:68">(<argument pos:start="131:26" pos:end="131:51"><expr pos:start="131:26" pos:end="131:51"><name pos:start="131:26" pos:end="131:32">aer_cap</name> <operator pos:start="131:34" pos:end="131:34">+</operator> <name pos:start="131:36" pos:end="131:51">PCI_ERR_ROOT_SRC</name></expr></argument>, <argument pos:start="131:54" pos:end="131:67"><expr pos:start="131:54" pos:end="131:67"><name pos:start="131:54" pos:end="131:67"><name pos:start="131:54" pos:end="131:56">msg</name><operator pos:start="131:57" pos:end="131:58">-&gt;</operator><name pos:start="131:59" pos:end="131:67">source_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:46"><expr pos:start="135:9" pos:end="135:45"><name pos:start="135:9" pos:end="135:19">root_status</name> <operator pos:start="135:21" pos:end="135:22">|=</operator> <name pos:start="135:24" pos:end="135:45">PCI_ERR_ROOT_UNCOR_RCV</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:61"><expr pos:start="139:5" pos:end="139:60"><call pos:start="139:5" pos:end="139:60"><name pos:start="139:5" pos:end="139:16">pci_set_long</name><argument_list pos:start="139:17" pos:end="139:60">(<argument pos:start="139:18" pos:end="139:46"><expr pos:start="139:18" pos:end="139:46"><name pos:start="139:18" pos:end="139:24">aer_cap</name> <operator pos:start="139:26" pos:end="139:26">+</operator> <name pos:start="139:28" pos:end="139:46">PCI_ERR_ROOT_STATUS</name></expr></argument>, <argument pos:start="139:49" pos:end="139:59"><expr pos:start="139:49" pos:end="139:59"><name pos:start="139:49" pos:end="139:59">root_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="143:5" pos:end="171:5"><if pos:start="143:5" pos:end="171:5">if <condition pos:start="143:8" pos:end="143:33">(<expr pos:start="143:9" pos:end="143:32"><name pos:start="143:9" pos:end="143:16">root_cmd</name> <operator pos:start="143:18" pos:end="143:18">&amp;</operator> <name pos:start="143:20" pos:end="143:32"><name pos:start="143:20" pos:end="143:22">msg</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:32">severity</name></name></expr>)</condition> <block pos:start="143:35" pos:end="171:5">{<block_content pos:start="147:9" pos:end="169:24">

        <comment type="block" pos:start="145:9" pos:end="145:44">/* 6.2.4.1.2 Interrupt Generation */</comment>

        <if_stmt pos:start="147:9" pos:end="167:9"><if pos:start="147:9" pos:end="155:9">if <condition pos:start="147:12" pos:end="147:30">(<expr pos:start="147:13" pos:end="147:29"><call pos:start="147:13" pos:end="147:29"><name pos:start="147:13" pos:end="147:24">msix_enabled</name><argument_list pos:start="147:25" pos:end="147:29">(<argument pos:start="147:26" pos:end="147:28"><expr pos:start="147:26" pos:end="147:28"><name pos:start="147:26" pos:end="147:28">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:32" pos:end="155:9">{<block_content pos:start="149:13" pos:end="153:13">

            <if_stmt pos:start="149:13" pos:end="153:13"><if pos:start="149:13" pos:end="153:13">if <condition pos:start="149:16" pos:end="149:28">(<expr pos:start="149:17" pos:end="149:27"><name pos:start="149:17" pos:end="149:27">msi_trigger</name></expr>)</condition> <block pos:start="149:30" pos:end="153:13">{<block_content pos:start="151:17" pos:end="151:64">

                <expr_stmt pos:start="151:17" pos:end="151:64"><expr pos:start="151:17" pos:end="151:63"><call pos:start="151:17" pos:end="151:63"><name pos:start="151:17" pos:end="151:27">msix_notify</name><argument_list pos:start="151:28" pos:end="151:63">(<argument pos:start="151:29" pos:end="151:31"><expr pos:start="151:29" pos:end="151:31"><name pos:start="151:29" pos:end="151:31">dev</name></expr></argument>, <argument pos:start="151:34" pos:end="151:62"><expr pos:start="151:34" pos:end="151:62"><call pos:start="151:34" pos:end="151:62"><name pos:start="151:34" pos:end="151:57">pcie_aer_root_get_vector</name><argument_list pos:start="151:58" pos:end="151:62">(<argument pos:start="151:59" pos:end="151:61"><expr pos:start="151:59" pos:end="151:61"><name pos:start="151:59" pos:end="151:61">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="155:11" pos:end="163:9">else if <condition pos:start="155:19" pos:end="155:36">(<expr pos:start="155:20" pos:end="155:35"><call pos:start="155:20" pos:end="155:35"><name pos:start="155:20" pos:end="155:30">msi_enabled</name><argument_list pos:start="155:31" pos:end="155:35">(<argument pos:start="155:32" pos:end="155:34"><expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:34">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:38" pos:end="163:9">{<block_content pos:start="157:13" pos:end="161:13">

            <if_stmt pos:start="157:13" pos:end="161:13"><if pos:start="157:13" pos:end="161:13">if <condition pos:start="157:16" pos:end="157:28">(<expr pos:start="157:17" pos:end="157:27"><name pos:start="157:17" pos:end="157:27">msi_trigger</name></expr>)</condition> <block pos:start="157:30" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:63">

                <expr_stmt pos:start="159:17" pos:end="159:63"><expr pos:start="159:17" pos:end="159:62"><call pos:start="159:17" pos:end="159:62"><name pos:start="159:17" pos:end="159:26">msi_notify</name><argument_list pos:start="159:27" pos:end="159:62">(<argument pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><name pos:start="159:28" pos:end="159:30">dev</name></expr></argument>, <argument pos:start="159:33" pos:end="159:61"><expr pos:start="159:33" pos:end="159:61"><call pos:start="159:33" pos:end="159:61"><name pos:start="159:33" pos:end="159:56">pcie_aer_root_get_vector</name><argument_list pos:start="159:57" pos:end="159:61">(<argument pos:start="159:58" pos:end="159:60"><expr pos:start="159:58" pos:end="159:60"><name pos:start="159:58" pos:end="159:60">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="167:9">else <block pos:start="163:16" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:57">

            <expr_stmt pos:start="165:13" pos:end="165:57"><expr pos:start="165:13" pos:end="165:56"><call pos:start="165:13" pos:end="165:56"><name pos:start="165:13" pos:end="165:24">qemu_set_irq</name><argument_list pos:start="165:25" pos:end="165:56">(<argument pos:start="165:26" pos:end="165:52"><expr pos:start="165:26" pos:end="165:52"><name pos:start="165:26" pos:end="165:52"><name pos:start="165:26" pos:end="165:28">dev</name><operator pos:start="165:29" pos:end="165:30">-&gt;</operator><name pos:start="165:31" pos:end="165:33">irq</name><index pos:start="165:34" pos:end="165:52">[<expr pos:start="165:35" pos:end="165:51"><name pos:start="165:35" pos:end="165:51"><name pos:start="165:35" pos:end="165:37">dev</name><operator pos:start="165:38" pos:end="165:39">-&gt;</operator><name pos:start="165:40" pos:end="165:42">exp</name><operator pos:start="165:43" pos:end="165:43">.</operator><name pos:start="165:44" pos:end="165:51">aer_intx</name></name></expr>]</index></name></expr></argument>, <argument pos:start="165:55" pos:end="165:55"><expr pos:start="165:55" pos:end="165:55"><literal type="number" pos:start="165:55" pos:end="165:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:16">msg_sent</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <name pos:start="169:20" pos:end="169:23">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="173:5" pos:end="173:20">return <expr pos:start="173:12" pos:end="173:19"><name pos:start="173:12" pos:end="173:19">msg_sent</name></expr>;</return>

</block_content>}</block></function>
</unit>
