<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25177.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">net_check_clients</name><parameter_list pos:start="1:23" pos:end="1:28">(<parameter pos:start="1:24" pos:end="1:27"><decl pos:start="1:24" pos:end="1:27"><type pos:start="1:24" pos:end="1:27"><name pos:start="1:24" pos:end="1:27">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VLANState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">vlan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">VLANClientState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">vc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="27:7">/* Don't warn about the default network setup that you get if

     * no command line -net or -netdev options are specified. There

     * are two cases that we would otherwise complain about:

     * (1) board doesn't support a NIC but the implicit "-net nic"

     * requested one

     * (2) CONFIG_SLIRP not set, in which case the implicit "-net nic"

     * sets up a nic that isn't connected to anything.

     */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:20">(<expr pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:19">default_net</name></expr>)</condition> <block pos:start="29:22" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:18">QTAILQ_FOREACH</name><argument_list pos:start="37:19" pos:end="37:38">(<argument pos:start="37:20" pos:end="37:23">vlan</argument>, <argument pos:start="37:26" pos:end="37:31">&amp;vlans</argument>, <argument pos:start="37:34" pos:end="37:37">next</argument>)</argument_list></macro> <block pos:start="37:40" pos:end="83:5">{<block_content pos:start="39:9" pos:end="81:30">

        <decl_stmt pos:start="39:9" pos:end="39:42"><decl pos:start="39:9" pos:end="39:23"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:19">has_nic</name> <init pos:start="39:21" pos:end="39:23">= <expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr></init></decl>, <decl pos:start="39:26" pos:end="39:41"><type ref="prev" pos:start="39:9" pos:end="39:11"/><name pos:start="39:26" pos:end="39:37">has_host_dev</name> <init pos:start="39:39" pos:end="39:41">= <expr pos:start="39:41" pos:end="39:41"><literal type="number" pos:start="39:41" pos:end="39:41">0</literal></expr></init></decl>;</decl_stmt>



        <macro pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:22">QTAILQ_FOREACH</name><argument_list pos:start="43:23" pos:end="43:48">(<argument pos:start="43:24" pos:end="43:25">vc</argument>, <argument pos:start="43:28" pos:end="43:41">&amp;vlan-&gt;clients</argument>, <argument pos:start="43:44" pos:end="43:47">next</argument>)</argument_list></macro> <block pos:start="43:50" pos:end="69:9">{<block_content pos:start="45:13" pos:end="67:13">

            <switch pos:start="45:13" pos:end="67:13">switch <condition pos:start="45:20" pos:end="45:35">(<expr pos:start="45:21" pos:end="45:34"><name pos:start="45:21" pos:end="45:34"><name pos:start="45:21" pos:end="45:22">vc</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:28">info</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:34">type</name></name></expr>)</condition> <block pos:start="45:37" pos:end="67:13">{<block_content pos:start="47:13" pos:end="65:22">

            <case pos:start="47:13" pos:end="47:45">case <expr pos:start="47:18" pos:end="47:44"><name pos:start="47:18" pos:end="47:44">NET_CLIENT_OPTIONS_KIND_NIC</name></expr>:</case>

                <expr_stmt pos:start="49:17" pos:end="49:28"><expr pos:start="49:17" pos:end="49:27"><name pos:start="49:17" pos:end="49:23">has_nic</name> <operator pos:start="49:25" pos:end="49:25">=</operator> <literal type="number" pos:start="49:27" pos:end="49:27">1</literal></expr>;</expr_stmt>

                <break pos:start="51:17" pos:end="51:22">break;</break>

            <case pos:start="53:13" pos:end="53:46">case <expr pos:start="53:18" pos:end="53:45"><name pos:start="53:18" pos:end="53:45">NET_CLIENT_OPTIONS_KIND_USER</name></expr>:</case>

            <case pos:start="55:13" pos:end="55:45">case <expr pos:start="55:18" pos:end="55:44"><name pos:start="55:18" pos:end="55:44">NET_CLIENT_OPTIONS_KIND_TAP</name></expr>:</case>

            <case pos:start="57:13" pos:end="57:48">case <expr pos:start="57:18" pos:end="57:47"><name pos:start="57:18" pos:end="57:47">NET_CLIENT_OPTIONS_KIND_SOCKET</name></expr>:</case>

            <case pos:start="59:13" pos:end="59:45">case <expr pos:start="59:18" pos:end="59:44"><name pos:start="59:18" pos:end="59:44">NET_CLIENT_OPTIONS_KIND_VDE</name></expr>:</case>

                <expr_stmt pos:start="61:17" pos:end="61:33"><expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:28">has_host_dev</name> <operator pos:start="61:30" pos:end="61:30">=</operator> <literal type="number" pos:start="61:32" pos:end="61:32">1</literal></expr>;</expr_stmt>

                <break pos:start="63:17" pos:end="63:22">break;</break>

            <default pos:start="65:13" pos:end="65:20">default:</default> <empty_stmt pos:start="65:22" pos:end="65:22">;</empty_stmt>

            </block_content>}</block></switch>

        </block_content>}</block>

        <if_stmt pos:start="71:9" pos:end="73:73"><if pos:start="71:9" pos:end="73:73">if <condition pos:start="71:12" pos:end="71:37">(<expr pos:start="71:13" pos:end="71:36"><name pos:start="71:13" pos:end="71:24">has_host_dev</name> <operator pos:start="71:26" pos:end="71:27">&amp;&amp;</operator> <operator pos:start="71:29" pos:end="71:29">!</operator><name pos:start="71:30" pos:end="71:36">has_nic</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:73"><block_content pos:start="73:13" pos:end="73:73">

            <expr_stmt pos:start="73:13" pos:end="73:73"><expr pos:start="73:13" pos:end="73:72"><call pos:start="73:13" pos:end="73:72"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:72">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:61"><expr pos:start="73:29" pos:end="73:61"><literal type="string" pos:start="73:29" pos:end="73:61">"Warning: vlan %d with no nics\n"</literal></expr></argument>, <argument pos:start="73:64" pos:end="73:71"><expr pos:start="73:64" pos:end="73:71"><name pos:start="73:64" pos:end="73:71"><name pos:start="73:64" pos:end="73:67">vlan</name><operator pos:start="73:68" pos:end="73:69">-&gt;</operator><name pos:start="73:70" pos:end="73:71">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="81:30"><if pos:start="75:9" pos:end="81:30">if <condition pos:start="75:12" pos:end="75:37">(<expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:19">has_nic</name> <operator pos:start="75:21" pos:end="75:22">&amp;&amp;</operator> <operator pos:start="75:24" pos:end="75:24">!</operator><name pos:start="75:25" pos:end="75:36">has_host_dev</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="81:30"><block_content pos:start="77:13" pos:end="81:30">

            <expr_stmt pos:start="77:13" pos:end="81:30"><expr pos:start="77:13" pos:end="81:29"><call pos:start="77:13" pos:end="81:29"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="81:29">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:73"><expr pos:start="79:21" pos:end="79:73"><literal type="string" pos:start="79:21" pos:end="79:73">"Warning: vlan %d is not connected to host network\n"</literal></expr></argument>,

                    <argument pos:start="81:21" pos:end="81:28"><expr pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:24">vlan</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:28">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block>

    <macro pos:start="85:5" pos:end="85:47"><name pos:start="85:5" pos:end="85:18">QTAILQ_FOREACH</name><argument_list pos:start="85:19" pos:end="85:47">(<argument pos:start="85:20" pos:end="85:21">vc</argument>, <argument pos:start="85:24" pos:end="85:40">&amp;non_vlan_clients</argument>, <argument pos:start="85:43" pos:end="85:46">next</argument>)</argument_list></macro> <block pos:start="85:49" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:9">

        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:22">(<expr pos:start="87:13" pos:end="87:21"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:21"><name pos:start="87:14" pos:end="87:15">vc</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:21">peer</name></name></expr>)</condition> <block pos:start="87:24" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:30">

            <expr_stmt pos:start="89:13" pos:end="93:30"><expr pos:start="89:13" pos:end="93:29"><call pos:start="89:13" pos:end="93:29"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="93:29">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:58"><expr pos:start="89:29" pos:end="89:58"><literal type="string" pos:start="89:29" pos:end="89:58">"Warning: %s %s has no peer\n"</literal></expr></argument>,

                    <argument pos:start="91:21" pos:end="91:84"><expr pos:start="91:21" pos:end="91:84"><ternary pos:start="91:21" pos:end="91:84"><condition pos:start="91:21" pos:end="91:67"><expr pos:start="91:21" pos:end="91:65"><name pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:22">vc</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:28">info</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:34">type</name></name> <operator pos:start="91:36" pos:end="91:37">==</operator> <name pos:start="91:39" pos:end="91:65">NET_CLIENT_OPTIONS_KIND_NIC</name></expr> ?</condition><then pos:start="91:69" pos:end="91:73"> <expr pos:start="91:69" pos:end="91:73"><literal type="string" pos:start="91:69" pos:end="91:73">"nic"</literal></expr> </then><else pos:start="91:75" pos:end="91:84">: <expr pos:start="91:77" pos:end="91:84"><literal type="string" pos:start="91:77" pos:end="91:84">"netdev"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:28"><expr pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:22">vc</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:28">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="101:5" pos:end="107:7">/* Check that all NICs requested via -net nic actually got created.

     * NICs created via -device don't need to be checked here because

     * they are always instantiated.

     */</comment>

    <for pos:start="109:5" pos:end="125:5">for <control pos:start="109:9" pos:end="109:34">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:29"><expr pos:start="109:17" pos:end="109:28"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:28">MAX_NICS</name></expr>;</condition> <incr pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:31">i</name><operator pos:start="109:32" pos:end="109:33">++</operator></expr></incr>)</control> <block pos:start="109:36" pos:end="125:5">{<block_content pos:start="111:9" pos:end="123:9">

        <decl_stmt pos:start="111:9" pos:end="111:35"><decl pos:start="111:9" pos:end="111:34"><type pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:15">NICInfo</name> <modifier pos:start="111:17" pos:end="111:17">*</modifier></type><name pos:start="111:18" pos:end="111:19">nd</name> <init pos:start="111:21" pos:end="111:34">= <expr pos:start="111:23" pos:end="111:34"><operator pos:start="111:23" pos:end="111:23">&amp;</operator><name pos:start="111:24" pos:end="111:34"><name pos:start="111:24" pos:end="111:31">nd_table</name><index pos:start="111:32" pos:end="111:34">[<expr pos:start="111:33" pos:end="111:33"><name pos:start="111:33" pos:end="111:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="113:42">(<expr pos:start="113:13" pos:end="113:41"><name pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:14">nd</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:20">used</name></name> <operator pos:start="113:22" pos:end="113:23">&amp;&amp;</operator> <operator pos:start="113:25" pos:end="113:25">!</operator><name pos:start="113:26" pos:end="113:41"><name pos:start="113:26" pos:end="113:27">nd</name><operator pos:start="113:28" pos:end="113:29">-&gt;</operator><name pos:start="113:30" pos:end="113:41">instantiated</name></name></expr>)</condition> <block pos:start="113:44" pos:end="123:9">{<block_content pos:start="115:13" pos:end="121:59">

            <expr_stmt pos:start="115:13" pos:end="121:59"><expr pos:start="115:13" pos:end="121:58"><call pos:start="115:13" pos:end="121:58"><name pos:start="115:13" pos:end="115:19">fprintf</name><argument_list pos:start="115:20" pos:end="121:58">(<argument pos:start="115:21" pos:end="115:26"><expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:26">stderr</name></expr></argument>, <argument pos:start="115:29" pos:end="117:72"><expr pos:start="115:29" pos:end="117:72"><literal type="string" pos:start="115:29" pos:end="115:68">"Warning: requested NIC (%s, model %s) "</literal>

                    <literal type="string" pos:start="117:21" pos:end="117:72">"was not created (not supported by this machine?)\n"</literal></expr></argument>,

                    <argument pos:start="119:21" pos:end="119:53"><expr pos:start="119:21" pos:end="119:53"><ternary pos:start="119:21" pos:end="119:53"><condition pos:start="119:21" pos:end="119:30"><expr pos:start="119:21" pos:end="119:28"><name pos:start="119:21" pos:end="119:28"><name pos:start="119:21" pos:end="119:22">nd</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:28">name</name></name></expr> ?</condition><then pos:start="119:32" pos:end="119:39"> <expr pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:33">nd</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:39">name</name></name></expr> </then><else pos:start="119:41" pos:end="119:53">: <expr pos:start="119:43" pos:end="119:53"><literal type="string" pos:start="119:43" pos:end="119:53">"anonymous"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="121:21" pos:end="121:57"><expr pos:start="121:21" pos:end="121:57"><ternary pos:start="121:21" pos:end="121:57"><condition pos:start="121:21" pos:end="121:31"><expr pos:start="121:21" pos:end="121:29"><name pos:start="121:21" pos:end="121:29"><name pos:start="121:21" pos:end="121:22">nd</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:29">model</name></name></expr> ?</condition><then pos:start="121:33" pos:end="121:41"> <expr pos:start="121:33" pos:end="121:41"><name pos:start="121:33" pos:end="121:41"><name pos:start="121:33" pos:end="121:34">nd</name><operator pos:start="121:35" pos:end="121:36">-&gt;</operator><name pos:start="121:37" pos:end="121:41">model</name></name></expr> </then><else pos:start="121:43" pos:end="121:57">: <expr pos:start="121:45" pos:end="121:57"><literal type="string" pos:start="121:45" pos:end="121:57">"unspecified"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
