<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16301.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">external_snapshot_prepare</name><parameter_list pos:start="1:38" pos:end="3:51">(<parameter pos:start="1:39" pos:end="1:66"><decl pos:start="1:39" pos:end="1:66"><type pos:start="1:39" pos:end="1:66"><name pos:start="1:39" pos:end="1:58">BlkTransactionStates</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">common</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:43">Error</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="173:1">{<block_content pos:start="7:5" pos:end="171:5">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:26">proto_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">flags</name></decl>, <decl pos:start="11:16" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:18">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:30">new_image_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:22">format</name> <init pos:start="19:24" pos:end="19:32">= <expr pos:start="19:26" pos:end="19:32"><literal type="string" pos:start="19:26" pos:end="19:32">"qcow2"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:59"><decl pos:start="21:5" pos:end="21:58"><type pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:8">enum</name> <name pos:start="21:10" pos:end="21:21">NewImageMode</name></name></type> <name pos:start="21:23" pos:end="21:26">mode</name> <init pos:start="21:28" pos:end="21:58">= <expr pos:start="21:30" pos:end="21:58"><name pos:start="21:30" pos:end="21:58">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="25:79"><decl pos:start="23:5" pos:end="25:78"><type pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:26">ExternalSnapshotStates</name> <modifier pos:start="23:28" pos:end="23:28">*</modifier></type><name pos:start="23:29" pos:end="23:34">states</name> <init pos:start="23:36" pos:end="25:78">=

                             <expr pos:start="25:30" pos:end="25:78"><call pos:start="25:30" pos:end="25:78"><name pos:start="25:30" pos:end="25:38">DO_UPCAST</name><argument_list pos:start="25:39" pos:end="25:78">(<argument pos:start="25:40" pos:end="25:61"><expr pos:start="25:40" pos:end="25:61"><name pos:start="25:40" pos:end="25:61">ExternalSnapshotStates</name></expr></argument>, <argument pos:start="25:64" pos:end="25:69"><expr pos:start="25:64" pos:end="25:69"><name pos:start="25:64" pos:end="25:69">common</name></expr></argument>, <argument pos:start="25:72" pos:end="25:77"><expr pos:start="25:72" pos:end="25:77"><name pos:start="25:72" pos:end="25:77">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:47"><decl pos:start="27:5" pos:end="27:46"><type pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:21">TransactionAction</name> <modifier pos:start="27:23" pos:end="27:23">*</modifier></type><name pos:start="27:24" pos:end="27:29">action</name> <init pos:start="27:31" pos:end="27:46">= <expr pos:start="27:33" pos:end="27:46"><name pos:start="27:33" pos:end="27:46"><name pos:start="27:33" pos:end="27:38">common</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:46">action</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:24">/* get parameters */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:77"><expr pos:start="33:5" pos:end="33:76"><call pos:start="33:5" pos:end="33:76"><name pos:start="33:5" pos:end="33:12">g_assert</name><argument_list pos:start="33:13" pos:end="33:76">(<argument pos:start="33:14" pos:end="33:75"><expr pos:start="33:14" pos:end="33:75"><name pos:start="33:14" pos:end="33:25"><name pos:start="33:14" pos:end="33:19">action</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:25">kind</name></name> <operator pos:start="33:27" pos:end="33:28">==</operator> <name pos:start="33:30" pos:end="33:75">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:52"><expr pos:start="37:5" pos:end="37:51"><name pos:start="37:5" pos:end="37:10">device</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:51"><name pos:start="37:14" pos:end="37:19">action</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:43">blockdev_snapshot_sync</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:51">device</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:67"><expr pos:start="39:5" pos:end="39:66"><name pos:start="39:5" pos:end="39:18">new_image_file</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:66"><name pos:start="39:22" pos:end="39:27">action</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:51">blockdev_snapshot_sync</name><operator pos:start="39:52" pos:end="39:53">-&gt;</operator><name pos:start="39:54" pos:end="39:66">snapshot_file</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:51">(<expr pos:start="41:9" pos:end="41:50"><name pos:start="41:9" pos:end="41:50"><name pos:start="41:9" pos:end="41:14">action</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:38">blockdev_snapshot_sync</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:50">has_format</name></name></expr>)</condition> <block pos:start="41:53" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:56">

        <expr_stmt pos:start="43:9" pos:end="43:56"><expr pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:14">format</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:55"><name pos:start="43:18" pos:end="43:23">action</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:47">blockdev_snapshot_sync</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:55">format</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:49">(<expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:14">action</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:38">blockdev_snapshot_sync</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:48">has_mode</name></name></expr>)</condition> <block pos:start="47:51" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:52">

        <expr_stmt pos:start="49:9" pos:end="49:52"><expr pos:start="49:9" pos:end="49:51"><name pos:start="49:9" pos:end="49:12">mode</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:51"><name pos:start="49:16" pos:end="49:21">action</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:45">blockdev_snapshot_sync</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:51">mode</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:26">/* start processing */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:7">drv</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:34"><name pos:start="57:11" pos:end="57:26">bdrv_find_format</name><argument_list pos:start="57:27" pos:end="57:34">(<argument pos:start="57:28" pos:end="57:33"><expr pos:start="57:28" pos:end="57:33"><name pos:start="57:28" pos:end="57:33">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:13">(<expr pos:start="59:9" pos:end="59:12"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:12">drv</name></expr>)</condition> <block pos:start="59:15" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:15">

        <expr_stmt pos:start="61:9" pos:end="61:59"><expr pos:start="61:9" pos:end="61:58"><call pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:17">error_set</name><argument_list pos:start="61:18" pos:end="61:58">(<argument pos:start="61:19" pos:end="61:22"><expr pos:start="61:19" pos:end="61:22"><name pos:start="61:19" pos:end="61:22">errp</name></expr></argument>, <argument pos:start="61:25" pos:end="61:49"><expr pos:start="61:25" pos:end="61:49"><name pos:start="61:25" pos:end="61:49">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="61:52" pos:end="61:57"><expr pos:start="61:52" pos:end="61:57"><name pos:start="61:52" pos:end="61:57">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:39"><expr pos:start="69:5" pos:end="69:38"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:10">states</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:18">old_bs</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:38"><name pos:start="69:22" pos:end="69:30">bdrv_find</name><argument_list pos:start="69:31" pos:end="69:38">(<argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:24">(<expr pos:start="71:9" pos:end="71:23"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:23"><name pos:start="71:10" pos:end="71:15">states</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:23">old_bs</name></name></expr>)</condition> <block pos:start="71:26" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:15">

        <expr_stmt pos:start="73:9" pos:end="73:55"><expr pos:start="73:9" pos:end="73:54"><call pos:start="73:9" pos:end="73:54"><name pos:start="73:9" pos:end="73:17">error_set</name><argument_list pos:start="73:18" pos:end="73:54">(<argument pos:start="73:19" pos:end="73:22"><expr pos:start="73:19" pos:end="73:22"><name pos:start="73:19" pos:end="73:22">errp</name></expr></argument>, <argument pos:start="73:25" pos:end="73:45"><expr pos:start="73:25" pos:end="73:45"><name pos:start="73:25" pos:end="73:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="73:48" pos:end="73:53"><expr pos:start="73:48" pos:end="73:53"><name pos:start="73:48" pos:end="73:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:42">(<expr pos:start="81:9" pos:end="81:41"><operator pos:start="81:9" pos:end="81:9">!</operator><call pos:start="81:10" pos:end="81:41"><name pos:start="81:10" pos:end="81:25">bdrv_is_inserted</name><argument_list pos:start="81:26" pos:end="81:41">(<argument pos:start="81:27" pos:end="81:40"><expr pos:start="81:27" pos:end="81:40"><name pos:start="81:27" pos:end="81:40"><name pos:start="81:27" pos:end="81:32">states</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:40">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:44" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:15">

        <expr_stmt pos:start="83:9" pos:end="83:59"><expr pos:start="83:9" pos:end="83:58"><call pos:start="83:9" pos:end="83:58"><name pos:start="83:9" pos:end="83:17">error_set</name><argument_list pos:start="83:18" pos:end="83:58">(<argument pos:start="83:19" pos:end="83:22"><expr pos:start="83:19" pos:end="83:22"><name pos:start="83:19" pos:end="83:22">errp</name></expr></argument>, <argument pos:start="83:25" pos:end="83:49"><expr pos:start="83:25" pos:end="83:49"><name pos:start="83:25" pos:end="83:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="83:52" pos:end="83:57"><expr pos:start="83:52" pos:end="83:57"><name pos:start="83:52" pos:end="83:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:36">(<expr pos:start="91:9" pos:end="91:35"><call pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:19">bdrv_in_use</name><argument_list pos:start="91:20" pos:end="91:35">(<argument pos:start="91:21" pos:end="91:34"><expr pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:26">states</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:34">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:38" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:15">

        <expr_stmt pos:start="93:9" pos:end="93:52"><expr pos:start="93:9" pos:end="93:51"><call pos:start="93:9" pos:end="93:51"><name pos:start="93:9" pos:end="93:17">error_set</name><argument_list pos:start="93:18" pos:end="93:51">(<argument pos:start="93:19" pos:end="93:22"><expr pos:start="93:19" pos:end="93:22"><name pos:start="93:19" pos:end="93:22">errp</name></expr></argument>, <argument pos:start="93:25" pos:end="93:42"><expr pos:start="93:25" pos:end="93:42"><name pos:start="93:25" pos:end="93:42">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="93:45" pos:end="93:50"><expr pos:start="93:45" pos:end="93:50"><name pos:start="93:45" pos:end="93:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:43">(<expr pos:start="101:9" pos:end="101:42"><operator pos:start="101:9" pos:end="101:9">!</operator><call pos:start="101:10" pos:end="101:42"><name pos:start="101:10" pos:end="101:26">bdrv_is_read_only</name><argument_list pos:start="101:27" pos:end="101:42">(<argument pos:start="101:28" pos:end="101:41"><expr pos:start="101:28" pos:end="101:41"><name pos:start="101:28" pos:end="101:41"><name pos:start="101:28" pos:end="101:33">states</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:41">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:45" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:9">

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:39">(<expr pos:start="103:13" pos:end="103:38"><call pos:start="103:13" pos:end="103:38"><name pos:start="103:13" pos:end="103:22">bdrv_flush</name><argument_list pos:start="103:23" pos:end="103:38">(<argument pos:start="103:24" pos:end="103:37"><expr pos:start="103:24" pos:end="103:37"><name pos:start="103:24" pos:end="103:37"><name pos:start="103:24" pos:end="103:29">states</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:37">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:41" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:19">

            <expr_stmt pos:start="105:13" pos:end="105:43"><expr pos:start="105:13" pos:end="105:42"><call pos:start="105:13" pos:end="105:42"><name pos:start="105:13" pos:end="105:21">error_set</name><argument_list pos:start="105:22" pos:end="105:42">(<argument pos:start="105:23" pos:end="105:26"><expr pos:start="105:23" pos:end="105:26"><name pos:start="105:23" pos:end="105:26">errp</name></expr></argument>, <argument pos:start="105:29" pos:end="105:41"><expr pos:start="105:29" pos:end="105:41"><name pos:start="105:29" pos:end="105:41">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:39"><expr pos:start="115:5" pos:end="115:38"><name pos:start="115:5" pos:end="115:9">flags</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <name pos:start="115:13" pos:end="115:38"><name pos:start="115:13" pos:end="115:18">states</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:26">old_bs</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:38">open_flags</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:51"><expr pos:start="119:5" pos:end="119:50"><name pos:start="119:5" pos:end="119:13">proto_drv</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <call pos:start="119:17" pos:end="119:50"><name pos:start="119:17" pos:end="119:34">bdrv_find_protocol</name><argument_list pos:start="119:35" pos:end="119:50">(<argument pos:start="119:36" pos:end="119:49"><expr pos:start="119:36" pos:end="119:49"><name pos:start="119:36" pos:end="119:49">new_image_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:19">(<expr pos:start="121:9" pos:end="121:18"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:18">proto_drv</name></expr>)</condition> <block pos:start="121:21" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:15">

        <expr_stmt pos:start="123:9" pos:end="123:59"><expr pos:start="123:9" pos:end="123:58"><call pos:start="123:9" pos:end="123:58"><name pos:start="123:9" pos:end="123:17">error_set</name><argument_list pos:start="123:18" pos:end="123:58">(<argument pos:start="123:19" pos:end="123:22"><expr pos:start="123:19" pos:end="123:22"><name pos:start="123:19" pos:end="123:22">errp</name></expr></argument>, <argument pos:start="123:25" pos:end="123:49"><expr pos:start="123:25" pos:end="123:49"><name pos:start="123:25" pos:end="123:49">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="123:52" pos:end="123:57"><expr pos:start="123:52" pos:end="123:57"><name pos:start="123:52" pos:end="123:57">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:41">/* create new image w/backing file */</comment>

    <if_stmt pos:start="133:5" pos:end="151:5"><if pos:start="133:5" pos:end="151:5">if <condition pos:start="133:8" pos:end="133:40">(<expr pos:start="133:9" pos:end="133:39"><name pos:start="133:9" pos:end="133:12">mode</name> <operator pos:start="133:14" pos:end="133:15">!=</operator> <name pos:start="133:17" pos:end="133:39">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="133:42" pos:end="151:5">{<block_content pos:start="135:9" pos:end="149:9">

        <expr_stmt pos:start="135:9" pos:end="141:60"><expr pos:start="135:9" pos:end="141:59"><call pos:start="135:9" pos:end="141:59"><name pos:start="135:9" pos:end="135:23">bdrv_img_create</name><argument_list pos:start="135:24" pos:end="141:59">(<argument pos:start="135:25" pos:end="135:38"><expr pos:start="135:25" pos:end="135:38"><name pos:start="135:25" pos:end="135:38">new_image_file</name></expr></argument>, <argument pos:start="135:41" pos:end="135:46"><expr pos:start="135:41" pos:end="135:46"><name pos:start="135:41" pos:end="135:46">format</name></expr></argument>,

                        <argument pos:start="137:25" pos:end="137:48"><expr pos:start="137:25" pos:end="137:48"><name pos:start="137:25" pos:end="137:48"><name pos:start="137:25" pos:end="137:30">states</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:38">old_bs</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:48">filename</name></name></expr></argument>,

                        <argument pos:start="139:25" pos:end="139:56"><expr pos:start="139:25" pos:end="139:56"><name pos:start="139:25" pos:end="139:56"><name pos:start="139:25" pos:end="139:30">states</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:38">old_bs</name><operator pos:start="139:39" pos:end="139:40">-&gt;</operator><name pos:start="139:41" pos:end="139:43">drv</name><operator pos:start="139:44" pos:end="139:45">-&gt;</operator><name pos:start="139:46" pos:end="139:56">format_name</name></name></expr></argument>,

                        <argument pos:start="141:25" pos:end="141:28"><expr pos:start="141:25" pos:end="141:28"><name pos:start="141:25" pos:end="141:28">NULL</name></expr></argument>, <argument pos:start="141:31" pos:end="141:32"><expr pos:start="141:31" pos:end="141:32"><operator pos:start="141:31" pos:end="141:31">-</operator><literal type="number" pos:start="141:32" pos:end="141:32">1</literal></expr></argument>, <argument pos:start="141:35" pos:end="141:39"><expr pos:start="141:35" pos:end="141:39"><name pos:start="141:35" pos:end="141:39">flags</name></expr></argument>, <argument pos:start="141:42" pos:end="141:51"><expr pos:start="141:42" pos:end="141:51"><operator pos:start="141:42" pos:end="141:42">&amp;</operator><name pos:start="141:43" pos:end="141:51">local_err</name></expr></argument>, <argument pos:start="141:54" pos:end="141:58"><expr pos:start="141:54" pos:end="141:58"><name pos:start="141:54" pos:end="141:58">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:37">(<expr pos:start="143:13" pos:end="143:36"><call pos:start="143:13" pos:end="143:36"><name pos:start="143:13" pos:end="143:24">error_is_set</name><argument_list pos:start="143:25" pos:end="143:36">(<argument pos:start="143:26" pos:end="143:35"><expr pos:start="143:26" pos:end="143:35"><operator pos:start="143:26" pos:end="143:26">&amp;</operator><name pos:start="143:27" pos:end="143:35">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:39" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:19">

            <expr_stmt pos:start="145:13" pos:end="145:45"><expr pos:start="145:13" pos:end="145:44"><call pos:start="145:13" pos:end="145:44"><name pos:start="145:13" pos:end="145:27">error_propagate</name><argument_list pos:start="145:28" pos:end="145:44">(<argument pos:start="145:29" pos:end="145:32"><expr pos:start="145:29" pos:end="145:32"><name pos:start="145:29" pos:end="145:32">errp</name></expr></argument>, <argument pos:start="145:35" pos:end="145:43"><expr pos:start="145:35" pos:end="145:43"><name pos:start="145:35" pos:end="145:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:67">/* We will manually add the backing_hd field to the bs later */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:34"><expr pos:start="157:5" pos:end="157:33"><name pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:10">states</name><operator pos:start="157:11" pos:end="157:12">-&gt;</operator><name pos:start="157:13" pos:end="157:18">new_bs</name></name> <operator pos:start="157:20" pos:end="157:20">=</operator> <call pos:start="157:22" pos:end="157:33"><name pos:start="157:22" pos:end="157:29">bdrv_new</name><argument_list pos:start="157:30" pos:end="157:33">(<argument pos:start="157:31" pos:end="157:32"><expr pos:start="157:31" pos:end="157:32"><literal type="string" pos:start="157:31" pos:end="157:32">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="159:5" pos:end="161:31">/* TODO Inherit bs-&gt;options or only take explicit options with an

     * extended QMP command? */</comment>

    <expr_stmt pos:start="163:5" pos:end="165:52"><expr pos:start="163:5" pos:end="165:51"><name pos:start="163:5" pos:end="163:7">ret</name> <operator pos:start="163:9" pos:end="163:9">=</operator> <call pos:start="163:11" pos:end="165:51"><name pos:start="163:11" pos:end="163:19">bdrv_open</name><argument_list pos:start="163:20" pos:end="165:51">(<argument pos:start="163:21" pos:end="163:34"><expr pos:start="163:21" pos:end="163:34"><name pos:start="163:21" pos:end="163:34"><name pos:start="163:21" pos:end="163:26">states</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:34">new_bs</name></name></expr></argument>, <argument pos:start="163:37" pos:end="163:50"><expr pos:start="163:37" pos:end="163:50"><name pos:start="163:37" pos:end="163:50">new_image_file</name></expr></argument>, <argument pos:start="163:53" pos:end="163:56"><expr pos:start="163:53" pos:end="163:56"><name pos:start="163:53" pos:end="163:56">NULL</name></expr></argument>,

                    <argument pos:start="165:21" pos:end="165:45"><expr pos:start="165:21" pos:end="165:45"><name pos:start="165:21" pos:end="165:25">flags</name> <operator pos:start="165:27" pos:end="165:27">|</operator> <name pos:start="165:29" pos:end="165:45">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="165:48" pos:end="165:50"><expr pos:start="165:48" pos:end="165:50"><name pos:start="165:48" pos:end="165:50">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:17">(<expr pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:14">!=</operator> <literal type="number" pos:start="167:16" pos:end="167:16">0</literal></expr>)</condition> <block pos:start="167:19" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:57">

        <expr_stmt pos:start="169:9" pos:end="169:57"><expr pos:start="169:9" pos:end="169:56"><call pos:start="169:9" pos:end="169:56"><name pos:start="169:9" pos:end="169:28">error_setg_file_open</name><argument_list pos:start="169:29" pos:end="169:56">(<argument pos:start="169:30" pos:end="169:33"><expr pos:start="169:30" pos:end="169:33"><name pos:start="169:30" pos:end="169:33">errp</name></expr></argument>, <argument pos:start="169:36" pos:end="169:39"><expr pos:start="169:36" pos:end="169:39"><operator pos:start="169:36" pos:end="169:36">-</operator><name pos:start="169:37" pos:end="169:39">ret</name></expr></argument>, <argument pos:start="169:42" pos:end="169:55"><expr pos:start="169:42" pos:end="169:55"><name pos:start="169:42" pos:end="169:55">new_image_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
