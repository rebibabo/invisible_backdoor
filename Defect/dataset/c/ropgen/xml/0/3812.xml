<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3812.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">cpu_x86_inject_mce</name><parameter_list pos:start="1:24" pos:end="5:49">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">Monitor</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">mon</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:52"><name pos:start="1:39" pos:end="1:46">CPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">cenv</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:62"><decl pos:start="1:55" pos:end="1:62"><type pos:start="1:55" pos:end="1:62"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:62">bank</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:39">status</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:60"><decl pos:start="3:42" pos:end="3:60"><type pos:start="3:42" pos:end="3:60"><name pos:start="3:42" pos:end="3:49">uint64_t</name></type> <name pos:start="3:51" pos:end="3:60">mcg_status</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:75"><decl pos:start="3:63" pos:end="3:75"><type pos:start="3:63" pos:end="3:75"><name pos:start="3:63" pos:end="3:70">uint64_t</name></type> <name pos:start="3:72" pos:end="3:75">addr</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:37"><decl pos:start="5:25" pos:end="5:37"><type pos:start="5:25" pos:end="5:37"><name pos:start="5:25" pos:end="5:32">uint64_t</name></type> <name pos:start="5:34" pos:end="5:37">misc</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="95:1">{<block_content pos:start="9:5" pos:end="93:5">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:21">bank_num</name> <init pos:start="9:23" pos:end="9:44">= <expr pos:start="9:25" pos:end="9:44"><name pos:start="9:25" pos:end="9:37"><name pos:start="9:25" pos:end="9:28">cenv</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:37">mcg_cap</name></name> <operator pos:start="9:39" pos:end="9:39">&amp;</operator> <literal type="number" pos:start="9:41" pos:end="9:44">0xff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">flag</name> <init pos:start="13:14" pos:end="13:16">= <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:13">cenv</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:22">mcg_cap</name></name></expr>)</condition> <block pos:start="17:25" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:22">monitor_printf</name><argument_list pos:start="19:23" pos:end="19:60">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">mon</name></expr></argument>, <argument pos:start="19:29" pos:end="19:59"><expr pos:start="19:29" pos:end="19:59"><literal type="string" pos:start="19:29" pos:end="19:59">"MCE injection not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:25">(<expr pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:12">bank</name> <operator pos:start="25:14" pos:end="25:15">&gt;=</operator> <name pos:start="25:17" pos:end="25:24">bank_num</name></expr>)</condition> <block pos:start="25:27" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><call pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:22">monitor_printf</name><argument_list pos:start="27:23" pos:end="27:56">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">mon</name></expr></argument>, <argument pos:start="27:29" pos:end="27:55"><expr pos:start="27:29" pos:end="27:55"><literal type="string" pos:start="27:29" pos:end="27:55">"Invalid MCE bank number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:35">(<expr pos:start="33:9" pos:end="33:34"><operator pos:start="33:9" pos:end="33:9">!</operator><operator pos:start="33:10" pos:end="33:10">(</operator><name pos:start="33:11" pos:end="33:16">status</name> <operator pos:start="33:18" pos:end="33:18">&amp;</operator> <name pos:start="33:20" pos:end="33:33">MCI_STATUS_VAL</name><operator pos:start="33:34" pos:end="33:34">)</operator></expr>)</condition> <block pos:start="33:37" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><call pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:22">monitor_printf</name><argument_list pos:start="35:23" pos:end="35:56">(<argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:26">mon</name></expr></argument>, <argument pos:start="35:29" pos:end="35:55"><expr pos:start="35:29" pos:end="35:55"><literal type="string" pos:start="35:29" pos:end="35:55">"Invalid MCE status code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="43:48">(<expr pos:start="41:9" pos:end="43:47"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:14">flags</name> <operator pos:start="41:16" pos:end="41:16">&amp;</operator> <name pos:start="41:18" pos:end="41:37">MCE_INJECT_BROADCAST</name><operator pos:start="41:38" pos:end="41:38">)</operator>

        <operator pos:start="43:9" pos:end="43:10">&amp;&amp;</operator> <operator pos:start="43:12" pos:end="43:12">!</operator><call pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:41">cpu_x86_support_mca_broadcast</name><argument_list pos:start="43:42" pos:end="43:47">(<argument pos:start="43:43" pos:end="43:46"><expr pos:start="43:43" pos:end="43:46"><name pos:start="43:43" pos:end="43:46">cenv</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:50" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:74"><expr pos:start="45:9" pos:end="45:73"><call pos:start="45:9" pos:end="45:73"><name pos:start="45:9" pos:end="45:22">monitor_printf</name><argument_list pos:start="45:23" pos:end="45:73">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">mon</name></expr></argument>, <argument pos:start="45:29" pos:end="45:72"><expr pos:start="45:29" pos:end="45:72"><literal type="string" pos:start="45:29" pos:end="45:72">"Guest CPU does not support MCA broadcast\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="93:5"><if pos:start="53:5" pos:end="65:5">if <condition pos:start="53:8" pos:end="53:22">(<expr pos:start="53:9" pos:end="53:21"><call pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:19">kvm_enabled</name><argument_list pos:start="53:20" pos:end="53:21">()</argument_list></call></expr>)</condition> <block pos:start="53:24" pos:end="65:5">{<block_content pos:start="55:9" pos:end="63:77">

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:41">(<expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:17">flags</name> <operator pos:start="55:19" pos:end="55:19">&amp;</operator> <name pos:start="55:21" pos:end="55:40">MCE_INJECT_BROADCAST</name></expr>)</condition> <block pos:start="55:43" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:34">

            <expr_stmt pos:start="57:13" pos:end="57:34"><expr pos:start="57:13" pos:end="57:33"><name pos:start="57:13" pos:end="57:16">flag</name> <operator pos:start="57:18" pos:end="57:19">|=</operator> <name pos:start="57:21" pos:end="57:33">MCE_BROADCAST</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:77"><expr pos:start="63:9" pos:end="63:76"><call pos:start="63:9" pos:end="63:76"><name pos:start="63:9" pos:end="63:26">kvm_inject_x86_mce</name><argument_list pos:start="63:27" pos:end="63:76">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">cenv</name></expr></argument>, <argument pos:start="63:34" pos:end="63:37"><expr pos:start="63:34" pos:end="63:37"><name pos:start="63:34" pos:end="63:37">bank</name></expr></argument>, <argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><name pos:start="63:40" pos:end="63:45">status</name></expr></argument>, <argument pos:start="63:48" pos:end="63:57"><expr pos:start="63:48" pos:end="63:57"><name pos:start="63:48" pos:end="63:57">mcg_status</name></expr></argument>, <argument pos:start="63:60" pos:end="63:63"><expr pos:start="63:60" pos:end="63:63"><name pos:start="63:60" pos:end="63:63">addr</name></expr></argument>, <argument pos:start="63:66" pos:end="63:69"><expr pos:start="63:66" pos:end="63:69"><name pos:start="63:66" pos:end="63:69">misc</name></expr></argument>, <argument pos:start="63:72" pos:end="63:75"><expr pos:start="63:72" pos:end="63:75"><name pos:start="63:72" pos:end="63:75">flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="93:5">else <block pos:start="65:12" pos:end="93:5">{<block_content pos:start="67:9" pos:end="91:9">

        <expr_stmt pos:start="67:9" pos:end="69:35"><expr pos:start="67:9" pos:end="69:34"><call pos:start="67:9" pos:end="69:34"><name pos:start="67:9" pos:end="67:27">qemu_inject_x86_mce</name><argument_list pos:start="67:28" pos:end="69:34">(<argument pos:start="67:29" pos:end="67:31"><expr pos:start="67:29" pos:end="67:31"><name pos:start="67:29" pos:end="67:31">mon</name></expr></argument>, <argument pos:start="67:34" pos:end="67:37"><expr pos:start="67:34" pos:end="67:37"><name pos:start="67:34" pos:end="67:37">cenv</name></expr></argument>, <argument pos:start="67:40" pos:end="67:43"><expr pos:start="67:40" pos:end="67:43"><name pos:start="67:40" pos:end="67:43">bank</name></expr></argument>, <argument pos:start="67:46" pos:end="67:51"><expr pos:start="67:46" pos:end="67:51"><name pos:start="67:46" pos:end="67:51">status</name></expr></argument>, <argument pos:start="67:54" pos:end="67:63"><expr pos:start="67:54" pos:end="67:63"><name pos:start="67:54" pos:end="67:63">mcg_status</name></expr></argument>, <argument pos:start="67:66" pos:end="67:69"><expr pos:start="67:66" pos:end="67:69"><name pos:start="67:66" pos:end="67:69">addr</name></expr></argument>, <argument pos:start="67:72" pos:end="67:75"><expr pos:start="67:72" pos:end="67:75"><name pos:start="67:72" pos:end="67:75">misc</name></expr></argument>,

                            <argument pos:start="69:29" pos:end="69:33"><expr pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:33">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="91:9"><if pos:start="71:9" pos:end="91:9">if <condition pos:start="71:12" pos:end="71:41">(<expr pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:17">flags</name> <operator pos:start="71:19" pos:end="71:19">&amp;</operator> <name pos:start="71:21" pos:end="71:40">MCE_INJECT_BROADCAST</name></expr>)</condition> <block pos:start="71:43" pos:end="91:9">{<block_content pos:start="73:13" pos:end="89:13">

            <for pos:start="73:13" pos:end="89:13">for <control pos:start="73:17" pos:end="73:67">(<init pos:start="73:18" pos:end="73:33"><expr pos:start="73:18" pos:end="73:32"><name pos:start="73:18" pos:end="73:20">env</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:32">first_cpu</name></expr>;</init> <condition pos:start="73:35" pos:end="73:46"><expr pos:start="73:35" pos:end="73:45"><name pos:start="73:35" pos:end="73:37">env</name> <operator pos:start="73:39" pos:end="73:40">!=</operator> <name pos:start="73:42" pos:end="73:45">NULL</name></expr>;</condition> <incr pos:start="73:48" pos:end="73:66"><expr pos:start="73:48" pos:end="73:66"><name pos:start="73:48" pos:end="73:50">env</name> <operator pos:start="73:52" pos:end="73:52">=</operator> <name pos:start="73:54" pos:end="73:66"><name pos:start="73:54" pos:end="73:56">env</name><operator pos:start="73:57" pos:end="73:58">-&gt;</operator><name pos:start="73:59" pos:end="73:66">next_cpu</name></name></expr></incr>)</control> <block pos:start="73:69" pos:end="89:13">{<block_content pos:start="75:17" pos:end="87:43">

                <if_stmt pos:start="75:17" pos:end="79:17"><if pos:start="75:17" pos:end="79:17">if <condition pos:start="75:20" pos:end="75:32">(<expr pos:start="75:21" pos:end="75:31"><name pos:start="75:21" pos:end="75:24">cenv</name> <operator pos:start="75:26" pos:end="75:27">==</operator> <name pos:start="75:29" pos:end="75:31">env</name></expr>)</condition> <block pos:start="75:34" pos:end="79:17">{<block_content pos:start="77:21" pos:end="77:29">

                    <continue pos:start="77:21" pos:end="77:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="81:17" pos:end="87:43"><expr pos:start="81:17" pos:end="87:42"><call pos:start="81:17" pos:end="87:42"><name pos:start="81:17" pos:end="81:35">qemu_inject_x86_mce</name><argument_list pos:start="81:36" pos:end="87:42">(<argument pos:start="81:37" pos:end="81:39"><expr pos:start="81:37" pos:end="81:39"><name pos:start="81:37" pos:end="81:39">mon</name></expr></argument>, <argument pos:start="81:42" pos:end="81:44"><expr pos:start="81:42" pos:end="81:44"><name pos:start="81:42" pos:end="81:44">env</name></expr></argument>, <argument pos:start="81:47" pos:end="81:47"><expr pos:start="81:47" pos:end="81:47"><literal type="number" pos:start="81:47" pos:end="81:47">1</literal></expr></argument>,

                                    <argument pos:start="83:37" pos:end="83:66"><expr pos:start="83:37" pos:end="83:66"><name pos:start="83:37" pos:end="83:50">MCI_STATUS_VAL</name> <operator pos:start="83:52" pos:end="83:52">|</operator> <name pos:start="83:54" pos:end="83:66">MCI_STATUS_UC</name></expr></argument>,

                                    <argument pos:start="85:37" pos:end="85:69"><expr pos:start="85:37" pos:end="85:69"><name pos:start="85:37" pos:end="85:51">MCG_STATUS_MCIP</name> <operator pos:start="85:53" pos:end="85:53">|</operator> <name pos:start="85:55" pos:end="85:69">MCG_STATUS_RIPV</name></expr></argument>, <argument pos:start="85:72" pos:end="85:72"><expr pos:start="85:72" pos:end="85:72"><literal type="number" pos:start="85:72" pos:end="85:72">0</literal></expr></argument>, <argument pos:start="85:75" pos:end="85:75"><expr pos:start="85:75" pos:end="85:75"><literal type="number" pos:start="85:75" pos:end="85:75">0</literal></expr></argument>,

                                    <argument pos:start="87:37" pos:end="87:41"><expr pos:start="87:37" pos:end="87:41"><name pos:start="87:37" pos:end="87:41">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
