<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26060.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">list_formats</name><parameter_list pos:start="1:25" pos:end="1:56">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:40">AVFormatContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:55"><decl pos:start="1:48" pos:end="1:55"><type pos:start="1:48" pos:end="1:55"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:55">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:29"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:27"><name pos:start="5:11" pos:end="5:16">struct</name> <name pos:start="5:18" pos:end="5:27">video_data</name></name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">s</name> <init pos:start="5:32" pos:end="5:47">= <expr pos:start="5:34" pos:end="5:47"><name pos:start="5:34" pos:end="5:47"><name pos:start="5:34" pos:end="5:36">ctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:47">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:70"><decl pos:start="7:5" pos:end="7:69"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:23">v4l2_fmtdesc</name></name></type> <name pos:start="7:25" pos:end="7:27">vfd</name> <init pos:start="7:29" pos:end="7:69">= <expr pos:start="7:31" pos:end="7:69"><block pos:start="7:31" pos:end="7:69">{ <expr pos:start="7:33" pos:end="7:67"><operator pos:start="7:33" pos:end="7:33">.</operator><name pos:start="7:34" pos:end="7:37">type</name> <operator pos:start="7:39" pos:end="7:39">=</operator> <name pos:start="7:41" pos:end="7:67">V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr> }</block></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="71:5">while<condition pos:start="11:10" pos:end="11:52">(<expr pos:start="11:11" pos:end="11:51"><operator pos:start="11:11" pos:end="11:11">!</operator><call pos:start="11:12" pos:end="11:51"><name pos:start="11:12" pos:end="11:21">v4l2_ioctl</name><argument_list pos:start="11:22" pos:end="11:51">(<argument pos:start="11:23" pos:end="11:27"><expr pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:23">s</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:27">fd</name></name></expr></argument>, <argument pos:start="11:30" pos:end="11:44"><expr pos:start="11:30" pos:end="11:44"><name pos:start="11:30" pos:end="11:44">VIDIOC_ENUM_FMT</name></expr></argument>, <argument pos:start="11:47" pos:end="11:50"><expr pos:start="11:47" pos:end="11:50"><operator pos:start="11:47" pos:end="11:47">&amp;</operator><name pos:start="11:48" pos:end="11:50">vfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:54" pos:end="71:5">{<block_content pos:start="13:9" pos:end="69:39">

        <decl_stmt pos:start="13:9" pos:end="13:72"><decl pos:start="13:9" pos:end="13:71"><type pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:12">enum</name> <name pos:start="13:14" pos:end="13:22">AVCodecID</name></name></type> <name pos:start="13:24" pos:end="13:31">codec_id</name> <init pos:start="13:33" pos:end="13:71">= <expr pos:start="13:35" pos:end="13:71"><call pos:start="13:35" pos:end="13:71"><name pos:start="13:35" pos:end="13:54">avpriv_fmt_v4l2codec</name><argument_list pos:start="13:55" pos:end="13:71">(<argument pos:start="13:56" pos:end="13:70"><expr pos:start="13:56" pos:end="13:70"><name pos:start="13:56" pos:end="13:70"><name pos:start="13:56" pos:end="13:58">vfd</name><operator pos:start="13:59" pos:end="13:59">.</operator><name pos:start="13:60" pos:end="13:70">pixelformat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:82"><decl pos:start="15:9" pos:end="15:81"><type pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:12">enum</name> <name pos:start="15:14" pos:end="15:26">AVPixelFormat</name></name></type> <name pos:start="15:28" pos:end="15:34">pix_fmt</name> <init pos:start="15:36" pos:end="15:81">= <expr pos:start="15:38" pos:end="15:81"><call pos:start="15:38" pos:end="15:81"><name pos:start="15:38" pos:end="15:54">avpriv_fmt_v4l2ff</name><argument_list pos:start="15:55" pos:end="15:81">(<argument pos:start="15:56" pos:end="15:70"><expr pos:start="15:56" pos:end="15:70"><name pos:start="15:56" pos:end="15:70"><name pos:start="15:56" pos:end="15:58">vfd</name><operator pos:start="15:59" pos:end="15:59">.</operator><name pos:start="15:60" pos:end="15:70">pixelformat</name></name></expr></argument>, <argument pos:start="15:73" pos:end="15:80"><expr pos:start="15:73" pos:end="15:80"><name pos:start="15:73" pos:end="15:80">codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:20"><expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">vfd</name><operator pos:start="19:12" pos:end="19:12">.</operator><name pos:start="19:13" pos:end="19:17">index</name></name><operator pos:start="19:18" pos:end="19:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="23:9" pos:end="56:0"><if pos:start="23:9" pos:end="35:9">if <condition pos:start="23:12" pos:end="25:34">(<expr pos:start="23:13" pos:end="25:33"><operator pos:start="23:13" pos:end="23:13">!</operator><operator pos:start="23:14" pos:end="23:14">(</operator><name pos:start="23:15" pos:end="23:23"><name pos:start="23:15" pos:end="23:17">vfd</name><operator pos:start="23:18" pos:end="23:18">.</operator><name pos:start="23:19" pos:end="23:23">flags</name></name> <operator pos:start="23:25" pos:end="23:25">&amp;</operator> <name pos:start="23:27" pos:end="23:50">V4L2_FMT_FLAG_COMPRESSED</name><operator pos:start="23:51" pos:end="23:51">)</operator> <operator pos:start="23:53" pos:end="23:54">&amp;&amp;</operator>

            <name pos:start="25:13" pos:end="25:16">type</name> <operator pos:start="25:18" pos:end="25:18">&amp;</operator> <name pos:start="25:20" pos:end="25:33">V4L_RAWFORMATS</name></expr>)</condition> <block pos:start="25:36" pos:end="35:9">{<block_content pos:start="27:13" pos:end="33:36">

            <decl_stmt pos:start="27:13" pos:end="27:64"><decl pos:start="27:13" pos:end="27:63"><type pos:start="27:13" pos:end="27:24"><specifier pos:start="27:13" pos:end="27:17">const</specifier> <name pos:start="27:19" pos:end="27:22">char</name> <modifier pos:start="27:24" pos:end="27:24">*</modifier></type><name pos:start="27:25" pos:end="27:32">fmt_name</name> <init pos:start="27:34" pos:end="27:63">= <expr pos:start="27:36" pos:end="27:63"><call pos:start="27:36" pos:end="27:63"><name pos:start="27:36" pos:end="27:54">av_get_pix_fmt_name</name><argument_list pos:start="27:55" pos:end="27:63">(<argument pos:start="27:56" pos:end="27:62"><expr pos:start="27:56" pos:end="27:62"><name pos:start="27:56" pos:end="27:62">pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="29:13" pos:end="33:36"><expr pos:start="29:13" pos:end="33:35"><call pos:start="29:13" pos:end="33:35"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="33:35">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">ctx</name></expr></argument>, <argument pos:start="29:25" pos:end="29:35"><expr pos:start="29:25" pos:end="29:35"><name pos:start="29:25" pos:end="29:35">AV_LOG_INFO</name></expr></argument>, <argument pos:start="29:38" pos:end="29:63"><expr pos:start="29:38" pos:end="29:63"><literal type="string" pos:start="29:38" pos:end="29:63">"Raw       : %9s : %20s :"</literal></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:54"><expr pos:start="31:20" pos:end="31:54"><ternary pos:start="31:20" pos:end="31:54"><condition pos:start="31:20" pos:end="31:29"><expr pos:start="31:20" pos:end="31:27"><name pos:start="31:20" pos:end="31:27">fmt_name</name></expr> ?</condition><then pos:start="31:31" pos:end="31:38"> <expr pos:start="31:31" pos:end="31:38"><name pos:start="31:31" pos:end="31:38">fmt_name</name></expr> </then><else pos:start="31:40" pos:end="31:54">: <expr pos:start="31:42" pos:end="31:54"><literal type="string" pos:start="31:42" pos:end="31:54">"Unsupported"</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="33:20" pos:end="33:34"><expr pos:start="33:20" pos:end="33:34"><name pos:start="33:20" pos:end="33:34"><name pos:start="33:20" pos:end="33:22">vfd</name><operator pos:start="33:23" pos:end="33:23">.</operator><name pos:start="33:24" pos:end="33:34">description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="47:9">else if <condition pos:start="35:19" pos:end="37:42">(<expr pos:start="35:20" pos:end="37:41"><name pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:22">vfd</name><operator pos:start="35:23" pos:end="35:23">.</operator><name pos:start="35:24" pos:end="35:28">flags</name></name> <operator pos:start="35:30" pos:end="35:30">&amp;</operator> <name pos:start="35:32" pos:end="35:55">V4L2_FMT_FLAG_COMPRESSED</name> <operator pos:start="35:57" pos:end="35:58">&amp;&amp;</operator>

                   <name pos:start="37:20" pos:end="37:23">type</name> <operator pos:start="37:25" pos:end="37:25">&amp;</operator> <name pos:start="37:27" pos:end="37:41">V4L_COMPFORMATS</name></expr>)</condition> <block pos:start="37:44" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:36">

            <decl_stmt pos:start="39:13" pos:end="39:60"><decl pos:start="39:13" pos:end="39:59"><type pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:19">AVCodec</name> <modifier pos:start="39:21" pos:end="39:21">*</modifier></type><name pos:start="39:22" pos:end="39:26">codec</name> <init pos:start="39:28" pos:end="39:59">= <expr pos:start="39:30" pos:end="39:59"><call pos:start="39:30" pos:end="39:59"><name pos:start="39:30" pos:end="39:49">avcodec_find_decoder</name><argument_list pos:start="39:50" pos:end="39:59">(<argument pos:start="39:51" pos:end="39:58"><expr pos:start="39:51" pos:end="39:58"><name pos:start="39:51" pos:end="39:58">codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="45:36"><expr pos:start="41:13" pos:end="45:35"><call pos:start="41:13" pos:end="45:35"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="45:35">(<argument pos:start="41:20" pos:end="41:22"><expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">ctx</name></expr></argument>, <argument pos:start="41:25" pos:end="41:35"><expr pos:start="41:25" pos:end="41:35"><name pos:start="41:25" pos:end="41:35">AV_LOG_INFO</name></expr></argument>, <argument pos:start="41:38" pos:end="41:63"><expr pos:start="41:38" pos:end="41:63"><literal type="string" pos:start="41:38" pos:end="41:63">"Compressed: %9s : %20s :"</literal></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:54"><expr pos:start="43:20" pos:end="43:54"><ternary pos:start="43:20" pos:end="43:54"><condition pos:start="43:20" pos:end="43:26"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">codec</name></expr> ?</condition><then pos:start="43:28" pos:end="43:38"> <expr pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:32">codec</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:38">name</name></name></expr> </then><else pos:start="43:40" pos:end="43:54">: <expr pos:start="43:42" pos:end="43:54"><literal type="string" pos:start="43:42" pos:end="43:54">"Unsupported"</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="45:20" pos:end="45:34"><expr pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:22">vfd</name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:34">description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="56:0">else <block pos:start="47:16" pos:end="56:0">{<block_content pos:start="49:13" pos:end="49:21">

            <continue pos:start="49:13" pos:end="49:21">continue;</continue>

        </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="55:1" pos:end="55:29">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:29">V4L2_FMT_FLAG_EMULATED</name></cpp:ifdef>

        <if_stmt pos:start="57:9" pos:end="64:0"><if pos:start="57:9" pos:end="64:0">if <condition pos:start="57:12" pos:end="57:47">(<expr pos:start="57:13" pos:end="57:46"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:15">vfd</name><operator pos:start="57:16" pos:end="57:16">.</operator><name pos:start="57:17" pos:end="57:21">flags</name></name> <operator pos:start="57:23" pos:end="57:23">&amp;</operator> <name pos:start="57:25" pos:end="57:46">V4L2_FMT_FLAG_EMULATED</name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="64:0"><block_content pos:start="59:13" pos:end="64:0">

            <expr_stmt pos:start="59:13" pos:end="64:0"><expr pos:start="59:13" pos:end="59:51"><call pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="59:51">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">ctx</name></expr></argument>, <argument pos:start="59:25" pos:end="59:35"><expr pos:start="59:25" pos:end="59:35"><name pos:start="59:25" pos:end="59:35">AV_LOG_INFO</name></expr></argument>, <argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><literal type="string" pos:start="59:38" pos:end="59:50">" Emulated :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="63:1" pos:end="63:41">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:41">HAVE_STRUCT_V4L2_FRMIVALENUM_DISCRETE</name></expr></cpp:if>

        <expr_stmt pos:start="65:9" pos:end="68:0"><expr pos:start="65:9" pos:end="65:45"><call pos:start="65:9" pos:end="65:45"><name pos:start="65:9" pos:end="65:23">list_framesizes</name><argument_list pos:start="65:24" pos:end="65:45">(<argument pos:start="65:25" pos:end="65:27"><expr pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">ctx</name></expr></argument>, <argument pos:start="65:30" pos:end="65:44"><expr pos:start="65:30" pos:end="65:44"><name pos:start="65:30" pos:end="65:44"><name pos:start="65:30" pos:end="65:32">vfd</name><operator pos:start="65:33" pos:end="65:33">.</operator><name pos:start="65:34" pos:end="65:44">pixelformat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><call pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:38">(<argument pos:start="69:16" pos:end="69:18"><expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">ctx</name></expr></argument>, <argument pos:start="69:21" pos:end="69:31"><expr pos:start="69:21" pos:end="69:31"><name pos:start="69:21" pos:end="69:31">AV_LOG_INFO</name></expr></argument>, <argument pos:start="69:34" pos:end="69:37"><expr pos:start="69:34" pos:end="69:37"><literal type="string" pos:start="69:34" pos:end="69:37">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
