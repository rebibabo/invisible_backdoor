<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17643.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">xics_realize</name><parameter_list pos:start="1:25" pos:end="1:56">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:36">DeviceState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">dev</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:48">Error</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier><modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">XICSState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">icp</name> <init pos:start="5:20" pos:end="5:30">= <expr pos:start="5:22" pos:end="5:30"><call pos:start="5:22" pos:end="5:30"><name pos:start="5:22" pos:end="5:25">XICS</name><argument_list pos:start="5:26" pos:end="5:30">(<argument pos:start="5:27" pos:end="5:29"><expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">ICSState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">ics</name> <init pos:start="7:19" pos:end="7:28">= <expr pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:23">icp</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:28">ics</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:16">error</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:24"><name pos:start="15:10" pos:end="15:12">icp</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:24">nr_servers</name></name></expr>)</condition> <block pos:start="15:27" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:68"><expr pos:start="17:9" pos:end="17:67"><call pos:start="17:9" pos:end="17:67"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:67">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:66"><expr pos:start="17:26" pos:end="17:66"><literal type="string" pos:start="17:26" pos:end="17:66">"Number of servers needs to be greater 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:59">/* Registration of global state belongs into realize */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:55"><expr pos:start="27:5" pos:end="27:54"><call pos:start="27:5" pos:end="27:54"><name pos:start="27:5" pos:end="27:23">spapr_rtas_register</name><argument_list pos:start="27:24" pos:end="27:54">(<argument pos:start="27:25" pos:end="27:38"><expr pos:start="27:25" pos:end="27:38"><literal type="string" pos:start="27:25" pos:end="27:38">"ibm,set-xive"</literal></expr></argument>, <argument pos:start="27:41" pos:end="27:53"><expr pos:start="27:41" pos:end="27:53"><name pos:start="27:41" pos:end="27:53">rtas_set_xive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:55"><expr pos:start="29:5" pos:end="29:54"><call pos:start="29:5" pos:end="29:54"><name pos:start="29:5" pos:end="29:23">spapr_rtas_register</name><argument_list pos:start="29:24" pos:end="29:54">(<argument pos:start="29:25" pos:end="29:38"><expr pos:start="29:25" pos:end="29:38"><literal type="string" pos:start="29:25" pos:end="29:38">"ibm,get-xive"</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:53"><expr pos:start="29:41" pos:end="29:53"><name pos:start="29:41" pos:end="29:53">rtas_get_xive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:53"><expr pos:start="31:5" pos:end="31:52"><call pos:start="31:5" pos:end="31:52"><name pos:start="31:5" pos:end="31:23">spapr_rtas_register</name><argument_list pos:start="31:24" pos:end="31:52">(<argument pos:start="31:25" pos:end="31:37"><expr pos:start="31:25" pos:end="31:37"><literal type="string" pos:start="31:25" pos:end="31:37">"ibm,int-off"</literal></expr></argument>, <argument pos:start="31:40" pos:end="31:51"><expr pos:start="31:40" pos:end="31:51"><name pos:start="31:40" pos:end="31:51">rtas_int_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><call pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:23">spapr_rtas_register</name><argument_list pos:start="33:24" pos:end="33:50">(<argument pos:start="33:25" pos:end="33:36"><expr pos:start="33:25" pos:end="33:36"><literal type="string" pos:start="33:25" pos:end="33:36">"ibm,int-on"</literal></expr></argument>, <argument pos:start="33:39" pos:end="33:49"><expr pos:start="33:39" pos:end="33:49"><name pos:start="33:39" pos:end="33:49">rtas_int_on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><call pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:28">spapr_register_hypercall</name><argument_list pos:start="37:29" pos:end="37:44">(<argument pos:start="37:30" pos:end="37:35"><expr pos:start="37:30" pos:end="37:35"><name pos:start="37:30" pos:end="37:35">H_CPPR</name></expr></argument>, <argument pos:start="37:38" pos:end="37:43"><expr pos:start="37:38" pos:end="37:43"><name pos:start="37:38" pos:end="37:43">h_cppr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><call pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:28">spapr_register_hypercall</name><argument_list pos:start="39:29" pos:end="39:42">(<argument pos:start="39:30" pos:end="39:34"><expr pos:start="39:30" pos:end="39:34"><name pos:start="39:30" pos:end="39:34">H_IPI</name></expr></argument>, <argument pos:start="39:37" pos:end="39:41"><expr pos:start="39:37" pos:end="39:41"><name pos:start="39:37" pos:end="39:41">h_ipi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><call pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:28">spapr_register_hypercall</name><argument_list pos:start="41:29" pos:end="41:44">(<argument pos:start="41:30" pos:end="41:35"><expr pos:start="41:30" pos:end="41:35"><name pos:start="41:30" pos:end="41:35">H_XIRR</name></expr></argument>, <argument pos:start="41:38" pos:end="41:43"><expr pos:start="41:38" pos:end="41:43"><name pos:start="41:38" pos:end="41:43">h_xirr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><call pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:28">spapr_register_hypercall</name><argument_list pos:start="43:29" pos:end="43:42">(<argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><name pos:start="43:30" pos:end="43:34">H_EOI</name></expr></argument>, <argument pos:start="43:37" pos:end="43:41"><expr pos:start="43:37" pos:end="43:41"><name pos:start="43:37" pos:end="43:41">h_eoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:7">ics</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:16">nr_irqs</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:31"><name pos:start="47:20" pos:end="47:22">icp</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:31">nr_irqs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:32"><expr pos:start="49:5" pos:end="49:31"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">ics</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:15">offset</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:31">XICS_IRQ_BASE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:7">ics</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:12">icp</name></name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:18">icp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:73"><expr pos:start="53:5" pos:end="53:72"><call pos:start="53:5" pos:end="53:72"><name pos:start="53:5" pos:end="53:28">object_property_set_bool</name><argument_list pos:start="53:29" pos:end="53:72">(<argument pos:start="53:30" pos:end="53:45"><expr pos:start="53:30" pos:end="53:45"><call pos:start="53:30" pos:end="53:45"><name pos:start="53:30" pos:end="53:35">OBJECT</name><argument_list pos:start="53:36" pos:end="53:45">(<argument pos:start="53:37" pos:end="53:44"><expr pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:39">icp</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:44">ics</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:48" pos:end="53:51"><expr pos:start="53:48" pos:end="53:51"><name pos:start="53:48" pos:end="53:51">true</name></expr></argument>, <argument pos:start="53:54" pos:end="53:63"><expr pos:start="53:54" pos:end="53:63"><literal type="string" pos:start="53:54" pos:end="53:63">"realized"</literal></expr></argument>, <argument pos:start="53:66" pos:end="53:71"><expr pos:start="53:66" pos:end="53:71"><operator pos:start="53:66" pos:end="53:66">&amp;</operator><name pos:start="53:67" pos:end="53:71">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:14">(<expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:13">error</name></expr>)</condition> <block pos:start="55:16" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:15">

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:23">error_propagate</name><argument_list pos:start="57:24" pos:end="57:36">(<argument pos:start="57:25" pos:end="57:28"><expr pos:start="57:25" pos:end="57:28"><name pos:start="57:25" pos:end="57:28">errp</name></expr></argument>, <argument pos:start="57:31" pos:end="57:35"><expr pos:start="57:31" pos:end="57:35"><name pos:start="57:31" pos:end="57:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:58"><expr pos:start="65:5" pos:end="65:57"><name pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:7">icp</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:11">ss</name></name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:57"><name pos:start="65:15" pos:end="65:23">g_malloc0</name><argument_list pos:start="65:24" pos:end="65:57">(<argument pos:start="65:25" pos:end="65:56"><expr pos:start="65:25" pos:end="65:56"><name pos:start="65:25" pos:end="65:39"><name pos:start="65:25" pos:end="65:27">icp</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:39">nr_servers</name></name><operator pos:start="65:40" pos:end="65:40">*</operator><sizeof pos:start="65:41" pos:end="65:56">sizeof<argument_list pos:start="65:47" pos:end="65:56">(<argument pos:start="65:48" pos:end="65:55"><expr pos:start="65:48" pos:end="65:55"><name pos:start="65:48" pos:end="65:55">ICPState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="87:5">for <control pos:start="67:9" pos:end="67:41">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:36"><expr pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:35"><name pos:start="67:21" pos:end="67:23">icp</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:35">nr_servers</name></name></expr>;</condition> <incr pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr></incr>)</control> <block pos:start="67:43" pos:end="87:5">{<block_content pos:start="69:9" pos:end="85:9">

        <decl_stmt pos:start="69:9" pos:end="69:24"><decl pos:start="69:9" pos:end="69:23"><type pos:start="69:9" pos:end="69:12"><name pos:start="69:9" pos:end="69:12">char</name></type> <name pos:start="69:14" pos:end="69:23"><name pos:start="69:14" pos:end="69:19">buffer</name><index pos:start="69:20" pos:end="69:23">[<expr pos:start="69:21" pos:end="69:22"><literal type="number" pos:start="69:21" pos:end="69:22">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:69"><expr pos:start="71:9" pos:end="71:68"><call pos:start="71:9" pos:end="71:68"><name pos:start="71:9" pos:end="71:25">object_initialize</name><argument_list pos:start="71:26" pos:end="71:68">(<argument pos:start="71:27" pos:end="71:37"><expr pos:start="71:27" pos:end="71:37"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:37"><name pos:start="71:28" pos:end="71:30">icp</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:34">ss</name><index pos:start="71:35" pos:end="71:37">[<expr pos:start="71:36" pos:end="71:36"><name pos:start="71:36" pos:end="71:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="71:40" pos:end="71:57"><expr pos:start="71:40" pos:end="71:57"><sizeof pos:start="71:40" pos:end="71:57">sizeof<argument_list pos:start="71:46" pos:end="71:57">(<argument pos:start="71:47" pos:end="71:56"><expr pos:start="71:47" pos:end="71:56"><name pos:start="71:47" pos:end="71:56"><name pos:start="71:47" pos:end="71:49">icp</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:53">ss</name><index pos:start="71:54" pos:end="71:56">[<expr pos:start="71:55" pos:end="71:55"><name pos:start="71:55" pos:end="71:55">i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:60" pos:end="71:67"><expr pos:start="71:60" pos:end="71:67"><name pos:start="71:60" pos:end="71:67">TYPE_ICP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:55"><expr pos:start="73:9" pos:end="73:54"><call pos:start="73:9" pos:end="73:54"><name pos:start="73:9" pos:end="73:16">snprintf</name><argument_list pos:start="73:17" pos:end="73:54">(<argument pos:start="73:18" pos:end="73:23"><expr pos:start="73:18" pos:end="73:23"><name pos:start="73:18" pos:end="73:23">buffer</name></expr></argument>, <argument pos:start="73:26" pos:end="73:39"><expr pos:start="73:26" pos:end="73:39"><sizeof pos:start="73:26" pos:end="73:39">sizeof<argument_list pos:start="73:32" pos:end="73:39">(<argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><name pos:start="73:33" pos:end="73:38">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:42" pos:end="73:50"><expr pos:start="73:42" pos:end="73:50"><literal type="string" pos:start="73:42" pos:end="73:50">"icp[%d]"</literal></expr></argument>, <argument pos:start="73:53" pos:end="73:53"><expr pos:start="73:53" pos:end="73:53"><name pos:start="73:53" pos:end="73:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:82"><expr pos:start="75:9" pos:end="75:81"><call pos:start="75:9" pos:end="75:81"><name pos:start="75:9" pos:end="75:33">object_property_add_child</name><argument_list pos:start="75:34" pos:end="75:81">(<argument pos:start="75:35" pos:end="75:45"><expr pos:start="75:35" pos:end="75:45"><call pos:start="75:35" pos:end="75:45"><name pos:start="75:35" pos:end="75:40">OBJECT</name><argument_list pos:start="75:41" pos:end="75:45">(<argument pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:44">icp</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:48" pos:end="75:53"><expr pos:start="75:48" pos:end="75:53"><name pos:start="75:48" pos:end="75:53">buffer</name></expr></argument>, <argument pos:start="75:56" pos:end="75:74"><expr pos:start="75:56" pos:end="75:74"><call pos:start="75:56" pos:end="75:74"><name pos:start="75:56" pos:end="75:61">OBJECT</name><argument_list pos:start="75:62" pos:end="75:74">(<argument pos:start="75:63" pos:end="75:73"><expr pos:start="75:63" pos:end="75:73"><operator pos:start="75:63" pos:end="75:63">&amp;</operator><name pos:start="75:64" pos:end="75:73"><name pos:start="75:64" pos:end="75:66">icp</name><operator pos:start="75:67" pos:end="75:68">-&gt;</operator><name pos:start="75:69" pos:end="75:70">ss</name><index pos:start="75:71" pos:end="75:73">[<expr pos:start="75:72" pos:end="75:72"><name pos:start="75:72" pos:end="75:72">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:77" pos:end="75:80"><expr pos:start="75:77" pos:end="75:80"><name pos:start="75:77" pos:end="75:80">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:80"><expr pos:start="77:9" pos:end="77:79"><call pos:start="77:9" pos:end="77:79"><name pos:start="77:9" pos:end="77:32">object_property_set_bool</name><argument_list pos:start="77:33" pos:end="77:79">(<argument pos:start="77:34" pos:end="77:52"><expr pos:start="77:34" pos:end="77:52"><call pos:start="77:34" pos:end="77:52"><name pos:start="77:34" pos:end="77:39">OBJECT</name><argument_list pos:start="77:40" pos:end="77:52">(<argument pos:start="77:41" pos:end="77:51"><expr pos:start="77:41" pos:end="77:51"><operator pos:start="77:41" pos:end="77:41">&amp;</operator><name pos:start="77:42" pos:end="77:51"><name pos:start="77:42" pos:end="77:44">icp</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:48">ss</name><index pos:start="77:49" pos:end="77:51">[<expr pos:start="77:50" pos:end="77:50"><name pos:start="77:50" pos:end="77:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:55" pos:end="77:58"><expr pos:start="77:55" pos:end="77:58"><name pos:start="77:55" pos:end="77:58">true</name></expr></argument>, <argument pos:start="77:61" pos:end="77:70"><expr pos:start="77:61" pos:end="77:70"><literal type="string" pos:start="77:61" pos:end="77:70">"realized"</literal></expr></argument>, <argument pos:start="77:73" pos:end="77:78"><expr pos:start="77:73" pos:end="77:78"><operator pos:start="77:73" pos:end="77:73">&amp;</operator><name pos:start="77:74" pos:end="77:78">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:18">(<expr pos:start="79:13" pos:end="79:17"><name pos:start="79:13" pos:end="79:17">error</name></expr>)</condition> <block pos:start="79:20" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:19">

            <expr_stmt pos:start="81:13" pos:end="81:41"><expr pos:start="81:13" pos:end="81:40"><call pos:start="81:13" pos:end="81:40"><name pos:start="81:13" pos:end="81:27">error_propagate</name><argument_list pos:start="81:28" pos:end="81:40">(<argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:32">errp</name></expr></argument>, <argument pos:start="81:35" pos:end="81:39"><expr pos:start="81:35" pos:end="81:39"><name pos:start="81:35" pos:end="81:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
