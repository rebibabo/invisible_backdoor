<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9679.c" pos:tabs="8"><function pos:start="1:1" pos:end="407:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_create2</name><parameter_list pos:start="1:25" pos:end="9:62">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:45">filename</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:54">int64_t</name></type> <name pos:start="1:56" pos:end="1:65">total_size</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:49"><decl pos:start="3:26" pos:end="3:49"><type pos:start="3:26" pos:end="3:49"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:49">backing_file</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:77"><decl pos:start="3:52" pos:end="3:77"><type pos:start="3:52" pos:end="3:77"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:77">backing_format</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:34"><decl pos:start="5:26" pos:end="5:34"><type pos:start="5:26" pos:end="5:34"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:34">flags</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:55"><decl pos:start="5:37" pos:end="5:55"><type pos:start="5:37" pos:end="5:55"><name pos:start="5:37" pos:end="5:42">size_t</name></type> <name pos:start="5:44" pos:end="5:55">cluster_size</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:78"><decl pos:start="5:58" pos:end="5:78"><type pos:start="5:58" pos:end="5:78"><name pos:start="5:58" pos:end="5:69">PreallocMode</name></type> <name pos:start="5:71" pos:end="5:78">prealloc</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:39"><decl pos:start="7:26" pos:end="7:39"><type pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:33">QemuOpts</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:39">opts</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:52"><decl pos:start="7:42" pos:end="7:52"><type pos:start="7:42" pos:end="7:52"><name pos:start="7:42" pos:end="7:44">int</name></type> <name pos:start="7:46" pos:end="7:52">version</name></decl></parameter>, <parameter pos:start="7:55" pos:end="7:72"><decl pos:start="7:55" pos:end="7:72"><type pos:start="7:55" pos:end="7:72"><name pos:start="7:55" pos:end="7:57">int</name></type> <name pos:start="7:59" pos:end="7:72">refcount_order</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:47"><decl pos:start="9:26" pos:end="9:47"><type pos:start="9:26" pos:end="9:47"><specifier pos:start="9:26" pos:end="9:30">const</specifier> <name pos:start="9:32" pos:end="9:35">char</name> <modifier pos:start="9:37" pos:end="9:37">*</modifier></type><name pos:start="9:38" pos:end="9:47">encryptfmt</name></decl></parameter>, <parameter pos:start="9:50" pos:end="9:61"><decl pos:start="9:50" pos:end="9:61"><type pos:start="9:50" pos:end="9:61"><name pos:start="9:50" pos:end="9:54">Error</name> <modifier pos:start="9:56" pos:end="9:56">*</modifier><modifier pos:start="9:57" pos:end="9:57">*</modifier></type><name pos:start="9:58" pos:end="9:61">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="407:1">{<block_content pos:start="13:5" pos:end="405:15">

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">cluster_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:18">options</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:32">/* Calculate cluster_bits */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:16">cluster_bits</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:38"><name pos:start="21:20" pos:end="21:24">ctz32</name><argument_list pos:start="21:25" pos:end="21:38">(<argument pos:start="21:26" pos:end="21:37"><expr pos:start="21:26" pos:end="21:37"><name pos:start="21:26" pos:end="21:37">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="25:44">(<expr pos:start="23:9" pos:end="25:43"><name pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:20">cluster_bits</name> <argument_list type="generic" pos:start="23:22" pos:end="23:57">&lt; <argument pos:start="23:24" pos:end="23:55"><expr pos:start="23:24" pos:end="23:55"><name pos:start="23:24" pos:end="23:39">MIN_CLUSTER_BITS</name> <operator pos:start="23:41" pos:end="23:42">||</operator> <name pos:start="23:44" pos:end="23:55">cluster_bits</name></expr></argument> &gt;</argument_list></name> <name pos:start="23:59" pos:end="23:74">MAX_CLUSTER_BITS</name> <operator pos:start="23:76" pos:end="23:77">||</operator>

        <operator pos:start="25:9" pos:end="25:9">(</operator><literal type="number" pos:start="25:10" pos:end="25:10">1</literal> <operator pos:start="25:12" pos:end="25:13">&lt;&lt;</operator> <name pos:start="25:15" pos:end="25:26">cluster_bits</name><operator pos:start="25:27" pos:end="25:27">)</operator> <operator pos:start="25:29" pos:end="25:30">!=</operator> <name pos:start="25:32" pos:end="25:43">cluster_size</name></expr>)</condition>

    <block pos:start="27:5" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:23">

        <expr_stmt pos:start="29:9" pos:end="31:79"><expr pos:start="29:9" pos:end="31:78"><call pos:start="29:9" pos:end="31:78"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="31:78">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="31:24"><expr pos:start="29:26" pos:end="31:24"><literal type="string" pos:start="29:26" pos:end="29:78">"Cluster size must be a power of two between %d and "</literal>

                   <literal type="string" pos:start="31:20" pos:end="31:24">"%dk"</literal></expr></argument>, <argument pos:start="31:27" pos:end="31:47"><expr pos:start="31:27" pos:end="31:47"><literal type="number" pos:start="31:27" pos:end="31:27">1</literal> <operator pos:start="31:29" pos:end="31:30">&lt;&lt;</operator> <name pos:start="31:32" pos:end="31:47">MIN_CLUSTER_BITS</name></expr></argument>, <argument pos:start="31:50" pos:end="31:77"><expr pos:start="31:50" pos:end="31:77"><literal type="number" pos:start="31:50" pos:end="31:50">1</literal> <operator pos:start="31:52" pos:end="31:53">&lt;&lt;</operator> <operator pos:start="31:55" pos:end="31:55">(</operator><name pos:start="31:56" pos:end="31:71">MAX_CLUSTER_BITS</name> <operator pos:start="31:73" pos:end="31:73">-</operator> <literal type="number" pos:start="31:75" pos:end="31:76">10</literal><operator pos:start="31:77" pos:end="31:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:23">return <expr pos:start="33:16" pos:end="33:22"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="61:7">/*

     * Open the image file and write a minimal qcow2 header.

     *

     * We keep things simple and start with a zero-sized image. We also

     * do without refcount blocks or a L1 table for now. We'll fix the

     * inconsistency later.

     *

     * We do need a refcount table because growing the refcount table means

     * allocating two new refcount blocks - the seconds of which would be at

     * 2 GB for 64k clusters, and we don't want to have a 2 GB initial file

     * size for any qcow2 image.

     */</comment>

    <decl_stmt pos:start="63:5" pos:end="63:22"><decl pos:start="63:5" pos:end="63:21"><type pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:16">BlockBackend</name> <modifier pos:start="63:18" pos:end="63:18">*</modifier></type><name pos:start="63:19" pos:end="63:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:23"><decl pos:start="65:5" pos:end="65:22"><type pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:14">QCowHeader</name> <modifier pos:start="65:16" pos:end="65:16">*</modifier></type><name pos:start="65:17" pos:end="65:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:29"><decl pos:start="67:5" pos:end="67:28"><type pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:12">uint64_t</name><modifier pos:start="67:13" pos:end="67:13">*</modifier></type> <name pos:start="67:15" pos:end="67:28">refcount_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="69:5" pos:end="69:28"><decl pos:start="69:5" pos:end="69:27"><type pos:start="69:5" pos:end="69:11"><name pos:start="69:5" pos:end="69:9">Error</name> <modifier pos:start="69:11" pos:end="69:11">*</modifier></type><name pos:start="69:12" pos:end="69:20">local_err</name> <init pos:start="69:22" pos:end="69:27">= <expr pos:start="69:24" pos:end="69:27"><name pos:start="69:24" pos:end="69:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="71:5" pos:end="71:12"><decl pos:start="71:5" pos:end="71:11"><type pos:start="71:5" pos:end="71:7"><name pos:start="71:5" pos:end="71:7">int</name></type> <name pos:start="71:9" pos:end="71:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="87:5">if <condition pos:start="75:8" pos:end="75:75">(<expr pos:start="75:9" pos:end="75:74"><name pos:start="75:9" pos:end="75:16">prealloc</name> <operator pos:start="75:18" pos:end="75:19">==</operator> <name pos:start="75:21" pos:end="75:38">PREALLOC_MODE_FULL</name> <operator pos:start="75:40" pos:end="75:41">||</operator> <name pos:start="75:43" pos:end="75:50">prealloc</name> <operator pos:start="75:52" pos:end="75:53">==</operator> <name pos:start="75:55" pos:end="75:74">PREALLOC_MODE_FALLOC</name></expr>)</condition> <block pos:start="75:77" pos:end="87:5">{<block_content pos:start="77:9" pos:end="85:35">

        <decl_stmt pos:start="77:9" pos:end="79:79"><decl pos:start="77:9" pos:end="79:78"><type pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:15">int64_t</name></type> <name pos:start="77:17" pos:end="77:29">prealloc_size</name> <init pos:start="77:31" pos:end="79:78">=

            <expr pos:start="79:13" pos:end="79:78"><call pos:start="79:13" pos:end="79:78"><name pos:start="79:13" pos:end="79:36">qcow2_calc_prealloc_size</name><argument_list pos:start="79:37" pos:end="79:78">(<argument pos:start="79:38" pos:end="79:47"><expr pos:start="79:38" pos:end="79:47"><name pos:start="79:38" pos:end="79:47">total_size</name></expr></argument>, <argument pos:start="79:50" pos:end="79:61"><expr pos:start="79:50" pos:end="79:61"><name pos:start="79:50" pos:end="79:61">cluster_size</name></expr></argument>, <argument pos:start="79:64" pos:end="79:77"><expr pos:start="79:64" pos:end="79:77"><name pos:start="79:64" pos:end="79:77">refcount_order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:79"><expr pos:start="81:9" pos:end="81:78"><call pos:start="81:9" pos:end="81:78"><name pos:start="81:9" pos:end="81:27">qemu_opt_set_number</name><argument_list pos:start="81:28" pos:end="81:78">(<argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:32">opts</name></expr></argument>, <argument pos:start="81:35" pos:end="81:48"><expr pos:start="81:35" pos:end="81:48"><name pos:start="81:35" pos:end="81:48">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="81:51" pos:end="81:63"><expr pos:start="81:51" pos:end="81:63"><name pos:start="81:51" pos:end="81:63">prealloc_size</name></expr></argument>, <argument pos:start="81:66" pos:end="81:77"><expr pos:start="81:66" pos:end="81:77"><operator pos:start="81:66" pos:end="81:66">&amp;</operator><name pos:start="81:67" pos:end="81:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="85:35"><expr pos:start="83:9" pos:end="85:34"><call pos:start="83:9" pos:end="85:34"><name pos:start="83:9" pos:end="83:20">qemu_opt_set</name><argument_list pos:start="83:21" pos:end="85:34">(<argument pos:start="83:22" pos:end="83:25"><expr pos:start="83:22" pos:end="83:25"><name pos:start="83:22" pos:end="83:25">opts</name></expr></argument>, <argument pos:start="83:28" pos:end="83:45"><expr pos:start="83:28" pos:end="83:45"><name pos:start="83:28" pos:end="83:45">BLOCK_OPT_PREALLOC</name></expr></argument>, <argument pos:start="83:48" pos:end="83:76"><expr pos:start="83:48" pos:end="83:76"><name pos:start="83:48" pos:end="83:76"><name pos:start="83:48" pos:end="83:66">PreallocMode_lookup</name><index pos:start="83:67" pos:end="83:76">[<expr pos:start="83:68" pos:end="83:75"><name pos:start="83:68" pos:end="83:75">prealloc</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="85:22" pos:end="85:33"><expr pos:start="85:22" pos:end="85:33"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:33">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:55"><expr pos:start="91:5" pos:end="91:54"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:54"><name pos:start="91:11" pos:end="91:26">bdrv_create_file</name><argument_list pos:start="91:27" pos:end="91:54">(<argument pos:start="91:28" pos:end="91:35"><expr pos:start="91:28" pos:end="91:35"><name pos:start="91:28" pos:end="91:35">filename</name></expr></argument>, <argument pos:start="91:38" pos:end="91:41"><expr pos:start="91:38" pos:end="91:41"><name pos:start="91:38" pos:end="91:41">opts</name></expr></argument>, <argument pos:start="91:44" pos:end="91:53"><expr pos:start="91:44" pos:end="91:53"><operator pos:start="91:44" pos:end="91:44">&amp;</operator><name pos:start="91:45" pos:end="91:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:16">(<expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>)</condition> <block pos:start="93:18" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:19">

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><call pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:23">error_propagate</name><argument_list pos:start="95:24" pos:end="95:40">(<argument pos:start="95:25" pos:end="95:28"><expr pos:start="95:25" pos:end="95:28"><name pos:start="95:25" pos:end="95:28">errp</name></expr></argument>, <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:19">return <expr pos:start="97:16" pos:end="97:18"><name pos:start="97:16" pos:end="97:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="107:35"><expr pos:start="103:5" pos:end="107:34"><name pos:start="103:5" pos:end="103:7">blk</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="107:34"><name pos:start="103:11" pos:end="103:22">blk_new_open</name><argument_list pos:start="103:23" pos:end="107:34">(<argument pos:start="103:24" pos:end="103:31"><expr pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:31">filename</name></expr></argument>, <argument pos:start="103:34" pos:end="103:37"><expr pos:start="103:34" pos:end="103:37"><name pos:start="103:34" pos:end="103:37">NULL</name></expr></argument>, <argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">NULL</name></expr></argument>,

                       <argument pos:start="105:24" pos:end="105:68"><expr pos:start="105:24" pos:end="105:68"><name pos:start="105:24" pos:end="105:34">BDRV_O_RDWR</name> <operator pos:start="105:36" pos:end="105:36">|</operator> <name pos:start="105:38" pos:end="105:50">BDRV_O_RESIZE</name> <operator pos:start="105:52" pos:end="105:52">|</operator> <name pos:start="105:54" pos:end="105:68">BDRV_O_PROTOCOL</name></expr></argument>,

                       <argument pos:start="107:24" pos:end="107:33"><expr pos:start="107:24" pos:end="107:33"><operator pos:start="107:24" pos:end="107:24">&amp;</operator><name pos:start="107:25" pos:end="107:33">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:20">(<expr pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:11">blk</name> <operator pos:start="109:13" pos:end="109:14">==</operator> <name pos:start="109:16" pos:end="109:19">NULL</name></expr>)</condition> <block pos:start="109:22" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:20">

        <expr_stmt pos:start="111:9" pos:end="111:41"><expr pos:start="111:9" pos:end="111:40"><call pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:23">error_propagate</name><argument_list pos:start="111:24" pos:end="111:40">(<argument pos:start="111:25" pos:end="111:28"><expr pos:start="111:25" pos:end="111:28"><name pos:start="111:25" pos:end="111:28">errp</name></expr></argument>, <argument pos:start="111:31" pos:end="111:39"><expr pos:start="111:31" pos:end="111:39"><name pos:start="111:31" pos:end="111:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:20">return <expr pos:start="113:16" pos:end="113:19"><operator pos:start="113:16" pos:end="113:16">-</operator><name pos:start="113:17" pos:end="113:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:46"><expr pos:start="119:5" pos:end="119:45"><call pos:start="119:5" pos:end="119:45"><name pos:start="119:5" pos:end="119:34">blk_set_allow_write_beyond_eof</name><argument_list pos:start="119:35" pos:end="119:45">(<argument pos:start="119:36" pos:end="119:38"><expr pos:start="119:36" pos:end="119:38"><name pos:start="119:36" pos:end="119:38">blk</name></expr></argument>, <argument pos:start="119:41" pos:end="119:44"><expr pos:start="119:41" pos:end="119:44"><name pos:start="119:41" pos:end="119:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:26">/* Write the header */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:65"><expr pos:start="125:5" pos:end="125:64"><call pos:start="125:5" pos:end="125:64"><name pos:start="125:5" pos:end="125:21">QEMU_BUILD_BUG_ON</name><argument_list pos:start="125:22" pos:end="125:64">(<argument pos:start="125:23" pos:end="125:63"><expr pos:start="125:23" pos:end="125:63"><operator pos:start="125:23" pos:end="125:23">(</operator><literal type="number" pos:start="125:24" pos:end="125:24">1</literal> <operator pos:start="125:26" pos:end="125:27">&lt;&lt;</operator> <name pos:start="125:29" pos:end="125:44">MIN_CLUSTER_BITS</name><operator pos:start="125:45" pos:end="125:45">)</operator> <operator pos:start="125:47" pos:end="125:47">&lt;</operator> <sizeof pos:start="125:49" pos:end="125:63">sizeof<argument_list pos:start="125:55" pos:end="125:63">(<argument pos:start="125:56" pos:end="125:62"><expr pos:start="125:56" pos:end="125:62"><operator pos:start="125:56" pos:end="125:56">*</operator><name pos:start="125:57" pos:end="125:62">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:37"><expr pos:start="127:5" pos:end="127:36"><name pos:start="127:5" pos:end="127:10">header</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <call pos:start="127:14" pos:end="127:36"><name pos:start="127:14" pos:end="127:22">g_malloc0</name><argument_list pos:start="127:23" pos:end="127:36">(<argument pos:start="127:24" pos:end="127:35"><expr pos:start="127:24" pos:end="127:35"><name pos:start="127:24" pos:end="127:35">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="151:6"><expr pos:start="129:5" pos:end="151:5"><operator pos:start="129:5" pos:end="129:5">*</operator><name pos:start="129:6" pos:end="129:11">header</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <operator pos:start="129:15" pos:end="129:15">(</operator><name pos:start="129:16" pos:end="129:25">QCowHeader</name><operator pos:start="129:26" pos:end="129:26">)</operator> <block pos:start="129:28" pos:end="151:5">{

        <expr pos:start="131:9" pos:end="131:61"><operator pos:start="131:9" pos:end="131:9">.</operator><name pos:start="131:10" pos:end="131:14">magic</name>                      <operator pos:start="131:37" pos:end="131:37">=</operator> <call pos:start="131:39" pos:end="131:61"><name pos:start="131:39" pos:end="131:49">cpu_to_be32</name><argument_list pos:start="131:50" pos:end="131:61">(<argument pos:start="131:51" pos:end="131:60"><expr pos:start="131:51" pos:end="131:60"><name pos:start="131:51" pos:end="131:60">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="133:9" pos:end="133:58"><operator pos:start="133:9" pos:end="133:9">.</operator><name pos:start="133:10" pos:end="133:16">version</name>                    <operator pos:start="133:37" pos:end="133:37">=</operator> <call pos:start="133:39" pos:end="133:58"><name pos:start="133:39" pos:end="133:49">cpu_to_be32</name><argument_list pos:start="133:50" pos:end="133:58">(<argument pos:start="133:51" pos:end="133:57"><expr pos:start="133:51" pos:end="133:57"><name pos:start="133:51" pos:end="133:57">version</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="135:9" pos:end="135:63"><operator pos:start="135:9" pos:end="135:9">.</operator><name pos:start="135:10" pos:end="135:21">cluster_bits</name>               <operator pos:start="135:37" pos:end="135:37">=</operator> <call pos:start="135:39" pos:end="135:63"><name pos:start="135:39" pos:end="135:49">cpu_to_be32</name><argument_list pos:start="135:50" pos:end="135:63">(<argument pos:start="135:51" pos:end="135:62"><expr pos:start="135:51" pos:end="135:62"><name pos:start="135:51" pos:end="135:62">cluster_bits</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="137:9" pos:end="137:52"><operator pos:start="137:9" pos:end="137:9">.</operator><name pos:start="137:10" pos:end="137:13">size</name>                       <operator pos:start="137:37" pos:end="137:37">=</operator> <call pos:start="137:39" pos:end="137:52"><name pos:start="137:39" pos:end="137:49">cpu_to_be64</name><argument_list pos:start="137:50" pos:end="137:52">(<argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="139:9" pos:end="139:52"><operator pos:start="139:9" pos:end="139:9">.</operator><name pos:start="139:10" pos:end="139:24">l1_table_offset</name>            <operator pos:start="139:37" pos:end="139:37">=</operator> <call pos:start="139:39" pos:end="139:52"><name pos:start="139:39" pos:end="139:49">cpu_to_be64</name><argument_list pos:start="139:50" pos:end="139:52">(<argument pos:start="139:51" pos:end="139:51"><expr pos:start="139:51" pos:end="139:51"><literal type="number" pos:start="139:51" pos:end="139:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="141:9" pos:end="141:52"><operator pos:start="141:9" pos:end="141:9">.</operator><name pos:start="141:10" pos:end="141:16">l1_size</name>                    <operator pos:start="141:37" pos:end="141:37">=</operator> <call pos:start="141:39" pos:end="141:52"><name pos:start="141:39" pos:end="141:49">cpu_to_be32</name><argument_list pos:start="141:50" pos:end="141:52">(<argument pos:start="141:51" pos:end="141:51"><expr pos:start="141:51" pos:end="141:51"><literal type="number" pos:start="141:51" pos:end="141:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="143:9" pos:end="143:63"><operator pos:start="143:9" pos:end="143:9">.</operator><name pos:start="143:10" pos:end="143:30">refcount_table_offset</name>      <operator pos:start="143:37" pos:end="143:37">=</operator> <call pos:start="143:39" pos:end="143:63"><name pos:start="143:39" pos:end="143:49">cpu_to_be64</name><argument_list pos:start="143:50" pos:end="143:63">(<argument pos:start="143:51" pos:end="143:62"><expr pos:start="143:51" pos:end="143:62"><name pos:start="143:51" pos:end="143:62">cluster_size</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="145:9" pos:end="145:52"><operator pos:start="145:9" pos:end="145:9">.</operator><name pos:start="145:10" pos:end="145:32">refcount_table_clusters</name>    <operator pos:start="145:37" pos:end="145:37">=</operator> <call pos:start="145:39" pos:end="145:52"><name pos:start="145:39" pos:end="145:49">cpu_to_be32</name><argument_list pos:start="145:50" pos:end="145:52">(<argument pos:start="145:51" pos:end="145:51"><expr pos:start="145:51" pos:end="145:51"><literal type="number" pos:start="145:51" pos:end="145:51">1</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="147:9" pos:end="147:65"><operator pos:start="147:9" pos:end="147:9">.</operator><name pos:start="147:10" pos:end="147:23">refcount_order</name>             <operator pos:start="147:37" pos:end="147:37">=</operator> <call pos:start="147:39" pos:end="147:65"><name pos:start="147:39" pos:end="147:49">cpu_to_be32</name><argument_list pos:start="147:50" pos:end="147:65">(<argument pos:start="147:51" pos:end="147:64"><expr pos:start="147:51" pos:end="147:64"><name pos:start="147:51" pos:end="147:64">refcount_order</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="149:9" pos:end="149:66"><operator pos:start="149:9" pos:end="149:9">.</operator><name pos:start="149:10" pos:end="149:22">header_length</name>              <operator pos:start="149:37" pos:end="149:37">=</operator> <call pos:start="149:39" pos:end="149:66"><name pos:start="149:39" pos:end="149:49">cpu_to_be32</name><argument_list pos:start="149:50" pos:end="149:66">(<argument pos:start="149:51" pos:end="149:65"><expr pos:start="149:51" pos:end="149:65"><sizeof pos:start="149:51" pos:end="149:65">sizeof<argument_list pos:start="149:57" pos:end="149:65">(<argument pos:start="149:58" pos:end="149:64"><expr pos:start="149:58" pos:end="149:64"><operator pos:start="149:58" pos:end="149:58">*</operator><name pos:start="149:59" pos:end="149:64">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,

    }</block></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:50">/* We'll update this to correct value later */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:56"><expr pos:start="157:5" pos:end="157:55"><name pos:start="157:5" pos:end="157:24"><name pos:start="157:5" pos:end="157:10">header</name><operator pos:start="157:11" pos:end="157:12">-&gt;</operator><name pos:start="157:13" pos:end="157:24">crypt_method</name></name> <operator pos:start="157:26" pos:end="157:26">=</operator> <call pos:start="157:28" pos:end="157:55"><name pos:start="157:28" pos:end="157:38">cpu_to_be32</name><argument_list pos:start="157:39" pos:end="157:55">(<argument pos:start="157:40" pos:end="157:54"><expr pos:start="157:40" pos:end="157:54"><name pos:start="157:40" pos:end="157:54">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:42">(<expr pos:start="161:9" pos:end="161:41"><name pos:start="161:9" pos:end="161:13">flags</name> <operator pos:start="161:15" pos:end="161:15">&amp;</operator> <name pos:start="161:17" pos:end="161:41">BLOCK_FLAG_LAZY_REFCOUNTS</name></expr>)</condition> <block pos:start="161:44" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:53">

        <expr_stmt pos:start="163:9" pos:end="165:53"><expr pos:start="163:9" pos:end="165:52"><name pos:start="163:9" pos:end="163:35"><name pos:start="163:9" pos:end="163:14">header</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:35">compatible_features</name></name> <operator pos:start="163:37" pos:end="163:38">|=</operator>

            <call pos:start="165:13" pos:end="165:52"><name pos:start="165:13" pos:end="165:23">cpu_to_be64</name><argument_list pos:start="165:24" pos:end="165:52">(<argument pos:start="165:25" pos:end="165:51"><expr pos:start="165:25" pos:end="165:51"><name pos:start="165:25" pos:end="165:51">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:54"><expr pos:start="171:5" pos:end="171:53"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="171:53"><name pos:start="171:11" pos:end="171:20">blk_pwrite</name><argument_list pos:start="171:21" pos:end="171:53">(<argument pos:start="171:22" pos:end="171:24"><expr pos:start="171:22" pos:end="171:24"><name pos:start="171:22" pos:end="171:24">blk</name></expr></argument>, <argument pos:start="171:27" pos:end="171:27"><expr pos:start="171:27" pos:end="171:27"><literal type="number" pos:start="171:27" pos:end="171:27">0</literal></expr></argument>, <argument pos:start="171:30" pos:end="171:35"><expr pos:start="171:30" pos:end="171:35"><name pos:start="171:30" pos:end="171:35">header</name></expr></argument>, <argument pos:start="171:38" pos:end="171:49"><expr pos:start="171:38" pos:end="171:49"><name pos:start="171:38" pos:end="171:49">cluster_size</name></expr></argument>, <argument pos:start="171:52" pos:end="171:52"><expr pos:start="171:52" pos:end="171:52"><literal type="number" pos:start="171:52" pos:end="171:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:19"><expr pos:start="173:5" pos:end="173:18"><call pos:start="173:5" pos:end="173:18"><name pos:start="173:5" pos:end="173:10">g_free</name><argument_list pos:start="173:11" pos:end="173:18">(<argument pos:start="173:12" pos:end="173:17"><expr pos:start="173:12" pos:end="173:17"><name pos:start="173:12" pos:end="173:17">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:16">(<expr pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">&lt;</operator> <literal type="number" pos:start="175:15" pos:end="175:15">0</literal></expr>)</condition> <block pos:start="175:18" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:17">

        <expr_stmt pos:start="177:9" pos:end="177:69"><expr pos:start="177:9" pos:end="177:68"><call pos:start="177:9" pos:end="177:68"><name pos:start="177:9" pos:end="177:24">error_setg_errno</name><argument_list pos:start="177:25" pos:end="177:68">(<argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><name pos:start="177:26" pos:end="177:29">errp</name></expr></argument>, <argument pos:start="177:32" pos:end="177:35"><expr pos:start="177:32" pos:end="177:35"><operator pos:start="177:32" pos:end="177:32">-</operator><name pos:start="177:33" pos:end="177:35">ret</name></expr></argument>, <argument pos:start="177:38" pos:end="177:67"><expr pos:start="177:38" pos:end="177:67"><literal type="string" pos:start="177:38" pos:end="177:67">"Could not write qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="179:9" pos:end="179:17">goto <name pos:start="179:14" pos:end="179:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:56">/* Write a refcount table with one refcount block */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:49"><expr pos:start="187:5" pos:end="187:48"><name pos:start="187:5" pos:end="187:18">refcount_table</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <call pos:start="187:22" pos:end="187:48"><name pos:start="187:22" pos:end="187:30">g_malloc0</name><argument_list pos:start="187:31" pos:end="187:48">(<argument pos:start="187:32" pos:end="187:47"><expr pos:start="187:32" pos:end="187:47"><literal type="number" pos:start="187:32" pos:end="187:32">2</literal> <operator pos:start="187:34" pos:end="187:34">*</operator> <name pos:start="187:36" pos:end="187:47">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:54"><expr pos:start="189:5" pos:end="189:53"><name pos:start="189:5" pos:end="189:21"><name pos:start="189:5" pos:end="189:18">refcount_table</name><index pos:start="189:19" pos:end="189:21">[<expr pos:start="189:20" pos:end="189:20"><literal type="number" pos:start="189:20" pos:end="189:20">0</literal></expr>]</index></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <call pos:start="189:25" pos:end="189:53"><name pos:start="189:25" pos:end="189:35">cpu_to_be64</name><argument_list pos:start="189:36" pos:end="189:53">(<argument pos:start="189:37" pos:end="189:52"><expr pos:start="189:37" pos:end="189:52"><literal type="number" pos:start="189:37" pos:end="189:37">2</literal> <operator pos:start="189:39" pos:end="189:39">*</operator> <name pos:start="189:41" pos:end="189:52">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:77"><expr pos:start="191:5" pos:end="191:76"><name pos:start="191:5" pos:end="191:7">ret</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:76"><name pos:start="191:11" pos:end="191:20">blk_pwrite</name><argument_list pos:start="191:21" pos:end="191:76">(<argument pos:start="191:22" pos:end="191:24"><expr pos:start="191:22" pos:end="191:24"><name pos:start="191:22" pos:end="191:24">blk</name></expr></argument>, <argument pos:start="191:27" pos:end="191:38"><expr pos:start="191:27" pos:end="191:38"><name pos:start="191:27" pos:end="191:38">cluster_size</name></expr></argument>, <argument pos:start="191:41" pos:end="191:54"><expr pos:start="191:41" pos:end="191:54"><name pos:start="191:41" pos:end="191:54">refcount_table</name></expr></argument>, <argument pos:start="191:57" pos:end="191:72"><expr pos:start="191:57" pos:end="191:72"><literal type="number" pos:start="191:57" pos:end="191:57">2</literal> <operator pos:start="191:59" pos:end="191:59">*</operator> <name pos:start="191:61" pos:end="191:72">cluster_size</name></expr></argument>, <argument pos:start="191:75" pos:end="191:75"><expr pos:start="191:75" pos:end="191:75"><literal type="number" pos:start="191:75" pos:end="191:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:27"><expr pos:start="193:5" pos:end="193:26"><call pos:start="193:5" pos:end="193:26"><name pos:start="193:5" pos:end="193:10">g_free</name><argument_list pos:start="193:11" pos:end="193:26">(<argument pos:start="193:12" pos:end="193:25"><expr pos:start="193:12" pos:end="193:25"><name pos:start="193:12" pos:end="193:25">refcount_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="203:5"><if pos:start="197:5" pos:end="203:5">if <condition pos:start="197:8" pos:end="197:16">(<expr pos:start="197:9" pos:end="197:15"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">&lt;</operator> <literal type="number" pos:start="197:15" pos:end="197:15">0</literal></expr>)</condition> <block pos:start="197:18" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:17">

        <expr_stmt pos:start="199:9" pos:end="199:71"><expr pos:start="199:9" pos:end="199:70"><call pos:start="199:9" pos:end="199:70"><name pos:start="199:9" pos:end="199:24">error_setg_errno</name><argument_list pos:start="199:25" pos:end="199:70">(<argument pos:start="199:26" pos:end="199:29"><expr pos:start="199:26" pos:end="199:29"><name pos:start="199:26" pos:end="199:29">errp</name></expr></argument>, <argument pos:start="199:32" pos:end="199:35"><expr pos:start="199:32" pos:end="199:35"><operator pos:start="199:32" pos:end="199:32">-</operator><name pos:start="199:33" pos:end="199:35">ret</name></expr></argument>, <argument pos:start="199:38" pos:end="199:69"><expr pos:start="199:38" pos:end="199:69"><literal type="string" pos:start="199:38" pos:end="199:69">"Could not write refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="201:9" pos:end="201:17">goto <name pos:start="201:14" pos:end="201:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:19"><expr pos:start="207:5" pos:end="207:18"><call pos:start="207:5" pos:end="207:18"><name pos:start="207:5" pos:end="207:13">blk_unref</name><argument_list pos:start="207:14" pos:end="207:18">(<argument pos:start="207:15" pos:end="207:17"><expr pos:start="207:15" pos:end="207:17"><name pos:start="207:15" pos:end="207:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:15"><expr pos:start="209:5" pos:end="209:14"><name pos:start="209:5" pos:end="209:7">blk</name> <operator pos:start="209:9" pos:end="209:9">=</operator> <name pos:start="209:11" pos:end="209:14">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="213:5" pos:end="221:7">/*

     * And now open the image and make it consistent first (i.e. increase the

     * refcount of the cluster that is occupied by the header and the refcount

     * table)

     */</comment>

    <expr_stmt pos:start="223:5" pos:end="223:26"><expr pos:start="223:5" pos:end="223:25"><name pos:start="223:5" pos:end="223:11">options</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:25"><name pos:start="223:15" pos:end="223:23">qdict_new</name><argument_list pos:start="223:24" pos:end="223:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:46"><expr pos:start="225:5" pos:end="225:45"><call pos:start="225:5" pos:end="225:45"><name pos:start="225:5" pos:end="225:17">qdict_put_str</name><argument_list pos:start="225:18" pos:end="225:45">(<argument pos:start="225:19" pos:end="225:25"><expr pos:start="225:19" pos:end="225:25"><name pos:start="225:19" pos:end="225:25">options</name></expr></argument>, <argument pos:start="225:28" pos:end="225:35"><expr pos:start="225:28" pos:end="225:35"><literal type="string" pos:start="225:28" pos:end="225:35">"driver"</literal></expr></argument>, <argument pos:start="225:38" pos:end="225:44"><expr pos:start="225:38" pos:end="225:44"><literal type="string" pos:start="225:38" pos:end="225:44">"qcow2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="231:35"><expr pos:start="227:5" pos:end="231:34"><name pos:start="227:5" pos:end="227:7">blk</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="231:34"><name pos:start="227:11" pos:end="227:22">blk_new_open</name><argument_list pos:start="227:23" pos:end="231:34">(<argument pos:start="227:24" pos:end="227:31"><expr pos:start="227:24" pos:end="227:31"><name pos:start="227:24" pos:end="227:31">filename</name></expr></argument>, <argument pos:start="227:34" pos:end="227:37"><expr pos:start="227:34" pos:end="227:37"><name pos:start="227:34" pos:end="227:37">NULL</name></expr></argument>, <argument pos:start="227:40" pos:end="227:46"><expr pos:start="227:40" pos:end="227:46"><name pos:start="227:40" pos:end="227:46">options</name></expr></argument>,

                       <argument pos:start="229:24" pos:end="229:68"><expr pos:start="229:24" pos:end="229:68"><name pos:start="229:24" pos:end="229:34">BDRV_O_RDWR</name> <operator pos:start="229:36" pos:end="229:36">|</operator> <name pos:start="229:38" pos:end="229:50">BDRV_O_RESIZE</name> <operator pos:start="229:52" pos:end="229:52">|</operator> <name pos:start="229:54" pos:end="229:68">BDRV_O_NO_FLUSH</name></expr></argument>,

                       <argument pos:start="231:24" pos:end="231:33"><expr pos:start="231:24" pos:end="231:33"><operator pos:start="231:24" pos:end="231:24">&amp;</operator><name pos:start="231:25" pos:end="231:33">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="233:5" pos:end="241:5"><if pos:start="233:5" pos:end="241:5">if <condition pos:start="233:8" pos:end="233:20">(<expr pos:start="233:9" pos:end="233:19"><name pos:start="233:9" pos:end="233:11">blk</name> <operator pos:start="233:13" pos:end="233:14">==</operator> <name pos:start="233:16" pos:end="233:19">NULL</name></expr>)</condition> <block pos:start="233:22" pos:end="241:5">{<block_content pos:start="235:9" pos:end="239:17">

        <expr_stmt pos:start="235:9" pos:end="235:41"><expr pos:start="235:9" pos:end="235:40"><call pos:start="235:9" pos:end="235:40"><name pos:start="235:9" pos:end="235:23">error_propagate</name><argument_list pos:start="235:24" pos:end="235:40">(<argument pos:start="235:25" pos:end="235:28"><expr pos:start="235:25" pos:end="235:28"><name pos:start="235:25" pos:end="235:28">errp</name></expr></argument>, <argument pos:start="235:31" pos:end="235:39"><expr pos:start="235:31" pos:end="235:39"><name pos:start="235:31" pos:end="235:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:19"><expr pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">=</operator> <operator pos:start="237:15" pos:end="237:15">-</operator><name pos:start="237:16" pos:end="237:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="239:9" pos:end="239:17">goto <name pos:start="239:14" pos:end="239:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:62"><expr pos:start="245:5" pos:end="245:61"><name pos:start="245:5" pos:end="245:7">ret</name> <operator pos:start="245:9" pos:end="245:9">=</operator> <call pos:start="245:11" pos:end="245:61"><name pos:start="245:11" pos:end="245:30">qcow2_alloc_clusters</name><argument_list pos:start="245:31" pos:end="245:61">(<argument pos:start="245:32" pos:end="245:42"><expr pos:start="245:32" pos:end="245:42"><call pos:start="245:32" pos:end="245:42"><name pos:start="245:32" pos:end="245:37">blk_bs</name><argument_list pos:start="245:38" pos:end="245:42">(<argument pos:start="245:39" pos:end="245:41"><expr pos:start="245:39" pos:end="245:41"><name pos:start="245:39" pos:end="245:41">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:45" pos:end="245:60"><expr pos:start="245:45" pos:end="245:60"><literal type="number" pos:start="245:45" pos:end="245:45">3</literal> <operator pos:start="245:47" pos:end="245:47">*</operator> <name pos:start="245:49" pos:end="245:60">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="263:5"><if pos:start="247:5" pos:end="257:5">if <condition pos:start="247:8" pos:end="247:16">(<expr pos:start="247:9" pos:end="247:15"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">&lt;</operator> <literal type="number" pos:start="247:15" pos:end="247:15">0</literal></expr>)</condition> <block pos:start="247:18" pos:end="257:5">{<block_content pos:start="249:9" pos:end="253:17">

        <expr_stmt pos:start="249:9" pos:end="251:54"><expr pos:start="249:9" pos:end="251:53"><call pos:start="249:9" pos:end="251:53"><name pos:start="249:9" pos:end="249:24">error_setg_errno</name><argument_list pos:start="249:25" pos:end="251:53">(<argument pos:start="249:26" pos:end="249:29"><expr pos:start="249:26" pos:end="249:29"><name pos:start="249:26" pos:end="249:29">errp</name></expr></argument>, <argument pos:start="249:32" pos:end="249:35"><expr pos:start="249:32" pos:end="249:35"><operator pos:start="249:32" pos:end="249:32">-</operator><name pos:start="249:33" pos:end="249:35">ret</name></expr></argument>, <argument pos:start="249:38" pos:end="251:52"><expr pos:start="249:38" pos:end="251:52"><literal type="string" pos:start="249:38" pos:end="249:77">"Could not allocate clusters for qcow2 "</literal>

                         <literal type="string" pos:start="251:26" pos:end="251:52">"header and refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="253:9" pos:end="253:17">goto <name pos:start="253:14" pos:end="253:16">out</name>;</goto>



    </block_content>}</block></if> <if type="elseif" pos:start="257:7" pos:end="263:5">else if <condition pos:start="257:15" pos:end="257:24">(<expr pos:start="257:16" pos:end="257:23"><name pos:start="257:16" pos:end="257:18">ret</name> <operator pos:start="257:20" pos:end="257:21">!=</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>)</condition> <block pos:start="257:26" pos:end="263:5">{<block_content pos:start="259:9" pos:end="261:16">

        <expr_stmt pos:start="259:9" pos:end="259:77"><expr pos:start="259:9" pos:end="259:76"><call pos:start="259:9" pos:end="259:76"><name pos:start="259:9" pos:end="259:20">error_report</name><argument_list pos:start="259:21" pos:end="259:76">(<argument pos:start="259:22" pos:end="259:75"><expr pos:start="259:22" pos:end="259:75"><literal type="string" pos:start="259:22" pos:end="259:75">"Huh, first cluster in empty image is already in use?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:16"><expr pos:start="261:9" pos:end="261:15"><call pos:start="261:9" pos:end="261:15"><name pos:start="261:9" pos:end="261:13">abort</name><argument_list pos:start="261:14" pos:end="261:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:68">/* Create a full header (including things like feature table) */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:43"><expr pos:start="269:5" pos:end="269:42"><name pos:start="269:5" pos:end="269:7">ret</name> <operator pos:start="269:9" pos:end="269:9">=</operator> <call pos:start="269:11" pos:end="269:42"><name pos:start="269:11" pos:end="269:29">qcow2_update_header</name><argument_list pos:start="269:30" pos:end="269:42">(<argument pos:start="269:31" pos:end="269:41"><expr pos:start="269:31" pos:end="269:41"><call pos:start="269:31" pos:end="269:41"><name pos:start="269:31" pos:end="269:36">blk_bs</name><argument_list pos:start="269:37" pos:end="269:41">(<argument pos:start="269:38" pos:end="269:40"><expr pos:start="269:38" pos:end="269:40"><name pos:start="269:38" pos:end="269:40">blk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="271:5" pos:end="277:5"><if pos:start="271:5" pos:end="277:5">if <condition pos:start="271:8" pos:end="271:16">(<expr pos:start="271:9" pos:end="271:15"><name pos:start="271:9" pos:end="271:11">ret</name> <operator pos:start="271:13" pos:end="271:13">&lt;</operator> <literal type="number" pos:start="271:15" pos:end="271:15">0</literal></expr>)</condition> <block pos:start="271:18" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:17">

        <expr_stmt pos:start="273:9" pos:end="273:70"><expr pos:start="273:9" pos:end="273:69"><call pos:start="273:9" pos:end="273:69"><name pos:start="273:9" pos:end="273:24">error_setg_errno</name><argument_list pos:start="273:25" pos:end="273:69">(<argument pos:start="273:26" pos:end="273:29"><expr pos:start="273:26" pos:end="273:29"><name pos:start="273:26" pos:end="273:29">errp</name></expr></argument>, <argument pos:start="273:32" pos:end="273:35"><expr pos:start="273:32" pos:end="273:35"><operator pos:start="273:32" pos:end="273:32">-</operator><name pos:start="273:33" pos:end="273:35">ret</name></expr></argument>, <argument pos:start="273:38" pos:end="273:68"><expr pos:start="273:38" pos:end="273:68"><literal type="string" pos:start="273:38" pos:end="273:68">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="275:9" pos:end="275:17">goto <name pos:start="275:14" pos:end="275:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="281:5" pos:end="281:76">/* Okay, now that we have a valid image, let's give it the right size */</comment>

    <expr_stmt pos:start="283:5" pos:end="283:46"><expr pos:start="283:5" pos:end="283:45"><name pos:start="283:5" pos:end="283:7">ret</name> <operator pos:start="283:9" pos:end="283:9">=</operator> <call pos:start="283:11" pos:end="283:45"><name pos:start="283:11" pos:end="283:22">blk_truncate</name><argument_list pos:start="283:23" pos:end="283:45">(<argument pos:start="283:24" pos:end="283:26"><expr pos:start="283:24" pos:end="283:26"><name pos:start="283:24" pos:end="283:26">blk</name></expr></argument>, <argument pos:start="283:29" pos:end="283:38"><expr pos:start="283:29" pos:end="283:38"><name pos:start="283:29" pos:end="283:38">total_size</name></expr></argument>, <argument pos:start="283:41" pos:end="283:44"><expr pos:start="283:41" pos:end="283:44"><name pos:start="283:41" pos:end="283:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="285:5" pos:end="291:5"><if pos:start="285:5" pos:end="291:5">if <condition pos:start="285:8" pos:end="285:16">(<expr pos:start="285:9" pos:end="285:15"><name pos:start="285:9" pos:end="285:11">ret</name> <operator pos:start="285:13" pos:end="285:13">&lt;</operator> <literal type="number" pos:start="285:15" pos:end="285:15">0</literal></expr>)</condition> <block pos:start="285:18" pos:end="291:5">{<block_content pos:start="287:9" pos:end="289:17">

        <expr_stmt pos:start="287:9" pos:end="287:56"><expr pos:start="287:9" pos:end="287:55"><call pos:start="287:9" pos:end="287:55"><name pos:start="287:9" pos:end="287:21">error_prepend</name><argument_list pos:start="287:22" pos:end="287:55">(<argument pos:start="287:23" pos:end="287:26"><expr pos:start="287:23" pos:end="287:26"><name pos:start="287:23" pos:end="287:26">errp</name></expr></argument>, <argument pos:start="287:29" pos:end="287:54"><expr pos:start="287:29" pos:end="287:54"><literal type="string" pos:start="287:29" pos:end="287:54">"Could not resize image: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="289:9" pos:end="289:17">goto <name pos:start="289:14" pos:end="289:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="295:5" pos:end="295:43">/* Want a backing file? There you go.*/</comment>

    <if_stmt pos:start="297:5" pos:end="311:5"><if pos:start="297:5" pos:end="311:5">if <condition pos:start="297:8" pos:end="297:21">(<expr pos:start="297:9" pos:end="297:20"><name pos:start="297:9" pos:end="297:20">backing_file</name></expr>)</condition> <block pos:start="297:23" pos:end="311:5">{<block_content pos:start="299:9" pos:end="309:9">

        <expr_stmt pos:start="299:9" pos:end="299:82"><expr pos:start="299:9" pos:end="299:81"><name pos:start="299:9" pos:end="299:11">ret</name> <operator pos:start="299:13" pos:end="299:13">=</operator> <call pos:start="299:15" pos:end="299:81"><name pos:start="299:15" pos:end="299:38">bdrv_change_backing_file</name><argument_list pos:start="299:39" pos:end="299:81">(<argument pos:start="299:40" pos:end="299:50"><expr pos:start="299:40" pos:end="299:50"><call pos:start="299:40" pos:end="299:50"><name pos:start="299:40" pos:end="299:45">blk_bs</name><argument_list pos:start="299:46" pos:end="299:50">(<argument pos:start="299:47" pos:end="299:49"><expr pos:start="299:47" pos:end="299:49"><name pos:start="299:47" pos:end="299:49">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:53" pos:end="299:64"><expr pos:start="299:53" pos:end="299:64"><name pos:start="299:53" pos:end="299:64">backing_file</name></expr></argument>, <argument pos:start="299:67" pos:end="299:80"><expr pos:start="299:67" pos:end="299:80"><name pos:start="299:67" pos:end="299:80">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="309:9"><if pos:start="301:9" pos:end="309:9">if <condition pos:start="301:12" pos:end="301:20">(<expr pos:start="301:13" pos:end="301:19"><name pos:start="301:13" pos:end="301:15">ret</name> <operator pos:start="301:17" pos:end="301:17">&lt;</operator> <literal type="number" pos:start="301:19" pos:end="301:19">0</literal></expr>)</condition> <block pos:start="301:22" pos:end="309:9">{<block_content pos:start="303:13" pos:end="307:21">

            <expr_stmt pos:start="303:13" pos:end="305:79"><expr pos:start="303:13" pos:end="305:78"><call pos:start="303:13" pos:end="305:78"><name pos:start="303:13" pos:end="303:28">error_setg_errno</name><argument_list pos:start="303:29" pos:end="305:78">(<argument pos:start="303:30" pos:end="303:33"><expr pos:start="303:30" pos:end="303:33"><name pos:start="303:30" pos:end="303:33">errp</name></expr></argument>, <argument pos:start="303:36" pos:end="303:39"><expr pos:start="303:36" pos:end="303:39"><operator pos:start="303:36" pos:end="303:36">-</operator><name pos:start="303:37" pos:end="303:39">ret</name></expr></argument>, <argument pos:start="303:42" pos:end="305:47"><expr pos:start="303:42" pos:end="305:47"><literal type="string" pos:start="303:42" pos:end="303:78">"Could not assign backing file '%s' "</literal>

                             <literal type="string" pos:start="305:30" pos:end="305:47">"with format '%s'"</literal></expr></argument>, <argument pos:start="305:50" pos:end="305:61"><expr pos:start="305:50" pos:end="305:61"><name pos:start="305:50" pos:end="305:61">backing_file</name></expr></argument>, <argument pos:start="305:64" pos:end="305:77"><expr pos:start="305:64" pos:end="305:77"><name pos:start="305:64" pos:end="305:77">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="307:13" pos:end="307:21">goto <name pos:start="307:18" pos:end="307:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="315:5" pos:end="315:40">/* Want encryption? There you go. */</comment>

    <if_stmt pos:start="317:5" pos:end="327:5"><if pos:start="317:5" pos:end="327:5">if <condition pos:start="317:8" pos:end="317:19">(<expr pos:start="317:9" pos:end="317:18"><name pos:start="317:9" pos:end="317:18">encryptfmt</name></expr>)</condition> <block pos:start="317:21" pos:end="327:5">{<block_content pos:start="319:9" pos:end="325:9">

        <expr_stmt pos:start="319:9" pos:end="319:75"><expr pos:start="319:9" pos:end="319:74"><name pos:start="319:9" pos:end="319:11">ret</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <call pos:start="319:15" pos:end="319:74"><name pos:start="319:15" pos:end="319:37">qcow2_set_up_encryption</name><argument_list pos:start="319:38" pos:end="319:74">(<argument pos:start="319:39" pos:end="319:49"><expr pos:start="319:39" pos:end="319:49"><call pos:start="319:39" pos:end="319:49"><name pos:start="319:39" pos:end="319:44">blk_bs</name><argument_list pos:start="319:45" pos:end="319:49">(<argument pos:start="319:46" pos:end="319:48"><expr pos:start="319:46" pos:end="319:48"><name pos:start="319:46" pos:end="319:48">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="319:52" pos:end="319:61"><expr pos:start="319:52" pos:end="319:61"><name pos:start="319:52" pos:end="319:61">encryptfmt</name></expr></argument>, <argument pos:start="319:64" pos:end="319:67"><expr pos:start="319:64" pos:end="319:67"><name pos:start="319:64" pos:end="319:67">opts</name></expr></argument>, <argument pos:start="319:70" pos:end="319:73"><expr pos:start="319:70" pos:end="319:73"><name pos:start="319:70" pos:end="319:73">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="325:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:20">(<expr pos:start="321:13" pos:end="321:19"><name pos:start="321:13" pos:end="321:15">ret</name> <operator pos:start="321:17" pos:end="321:17">&lt;</operator> <literal type="number" pos:start="321:19" pos:end="321:19">0</literal></expr>)</condition> <block pos:start="321:22" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:21">

            <goto pos:start="323:13" pos:end="323:21">goto <name pos:start="323:18" pos:end="323:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="331:5" pos:end="331:68">/* And if we're supposed to preallocate metadata, do that now */</comment>

    <if_stmt pos:start="333:5" pos:end="351:5"><if pos:start="333:5" pos:end="351:5">if <condition pos:start="333:8" pos:end="333:38">(<expr pos:start="333:9" pos:end="333:37"><name pos:start="333:9" pos:end="333:16">prealloc</name> <operator pos:start="333:18" pos:end="333:19">!=</operator> <name pos:start="333:21" pos:end="333:37">PREALLOC_MODE_OFF</name></expr>)</condition> <block pos:start="333:40" pos:end="351:5">{<block_content pos:start="335:9" pos:end="349:9">

        <decl_stmt pos:start="335:9" pos:end="335:48"><decl pos:start="335:9" pos:end="335:47"><type pos:start="335:9" pos:end="335:24"><name pos:start="335:9" pos:end="335:22">BDRVQcow2State</name> <modifier pos:start="335:24" pos:end="335:24">*</modifier></type><name pos:start="335:25" pos:end="335:25">s</name> <init pos:start="335:27" pos:end="335:47">= <expr pos:start="335:29" pos:end="335:47"><call pos:start="335:29" pos:end="335:39"><name pos:start="335:29" pos:end="335:34">blk_bs</name><argument_list pos:start="335:35" pos:end="335:39">(<argument pos:start="335:36" pos:end="335:38"><expr pos:start="335:36" pos:end="335:38"><name pos:start="335:36" pos:end="335:38">blk</name></expr></argument>)</argument_list></call><operator pos:start="335:40" pos:end="335:41">-&gt;</operator><name pos:start="335:42" pos:end="335:47">opaque</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:37"><expr pos:start="337:9" pos:end="337:36"><call pos:start="337:9" pos:end="337:36"><name pos:start="337:9" pos:end="337:26">qemu_co_mutex_lock</name><argument_list pos:start="337:27" pos:end="337:36">(<argument pos:start="337:28" pos:end="337:35"><expr pos:start="337:28" pos:end="337:35"><operator pos:start="337:28" pos:end="337:28">&amp;</operator><name pos:start="337:29" pos:end="337:35"><name pos:start="337:29" pos:end="337:29">s</name><operator pos:start="337:30" pos:end="337:31">-&gt;</operator><name pos:start="337:32" pos:end="337:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:39"><expr pos:start="339:9" pos:end="339:38"><name pos:start="339:9" pos:end="339:11">ret</name> <operator pos:start="339:13" pos:end="339:13">=</operator> <call pos:start="339:15" pos:end="339:38"><name pos:start="339:15" pos:end="339:25">preallocate</name><argument_list pos:start="339:26" pos:end="339:38">(<argument pos:start="339:27" pos:end="339:37"><expr pos:start="339:27" pos:end="339:37"><call pos:start="339:27" pos:end="339:37"><name pos:start="339:27" pos:end="339:32">blk_bs</name><argument_list pos:start="339:33" pos:end="339:37">(<argument pos:start="339:34" pos:end="339:36"><expr pos:start="339:34" pos:end="339:36"><name pos:start="339:34" pos:end="339:36">blk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:39"><expr pos:start="341:9" pos:end="341:38"><call pos:start="341:9" pos:end="341:38"><name pos:start="341:9" pos:end="341:28">qemu_co_mutex_unlock</name><argument_list pos:start="341:29" pos:end="341:38">(<argument pos:start="341:30" pos:end="341:37"><expr pos:start="341:30" pos:end="341:37"><operator pos:start="341:30" pos:end="341:30">&amp;</operator><name pos:start="341:31" pos:end="341:37"><name pos:start="341:31" pos:end="341:31">s</name><operator pos:start="341:32" pos:end="341:33">-&gt;</operator><name pos:start="341:34" pos:end="341:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="343:9" pos:end="349:9"><if pos:start="343:9" pos:end="349:9">if <condition pos:start="343:12" pos:end="343:20">(<expr pos:start="343:13" pos:end="343:19"><name pos:start="343:13" pos:end="343:15">ret</name> <operator pos:start="343:17" pos:end="343:17">&lt;</operator> <literal type="number" pos:start="343:19" pos:end="343:19">0</literal></expr>)</condition> <block pos:start="343:22" pos:end="349:9">{<block_content pos:start="345:13" pos:end="347:21">

            <expr_stmt pos:start="345:13" pos:end="345:75"><expr pos:start="345:13" pos:end="345:74"><call pos:start="345:13" pos:end="345:74"><name pos:start="345:13" pos:end="345:28">error_setg_errno</name><argument_list pos:start="345:29" pos:end="345:74">(<argument pos:start="345:30" pos:end="345:33"><expr pos:start="345:30" pos:end="345:33"><name pos:start="345:30" pos:end="345:33">errp</name></expr></argument>, <argument pos:start="345:36" pos:end="345:39"><expr pos:start="345:36" pos:end="345:39"><operator pos:start="345:36" pos:end="345:36">-</operator><name pos:start="345:37" pos:end="345:39">ret</name></expr></argument>, <argument pos:start="345:42" pos:end="345:73"><expr pos:start="345:42" pos:end="345:73"><literal type="string" pos:start="345:42" pos:end="345:73">"Could not preallocate metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="347:13" pos:end="347:21">goto <name pos:start="347:18" pos:end="347:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="355:5" pos:end="355:19"><expr pos:start="355:5" pos:end="355:18"><call pos:start="355:5" pos:end="355:18"><name pos:start="355:5" pos:end="355:13">blk_unref</name><argument_list pos:start="355:14" pos:end="355:18">(<argument pos:start="355:15" pos:end="355:17"><expr pos:start="355:15" pos:end="355:17"><name pos:start="355:15" pos:end="355:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:15"><expr pos:start="357:5" pos:end="357:14"><name pos:start="357:5" pos:end="357:7">blk</name> <operator pos:start="357:9" pos:end="357:9">=</operator> <name pos:start="357:11" pos:end="357:14">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="361:5" pos:end="371:7">/* Reopen the image without BDRV_O_NO_FLUSH to flush it before returning.

     * Using BDRV_O_NO_IO, since encryption is now setup we don't want to

     * have to setup decryption context. We're not doing any I/O on the top

     * level BlockDriverState, only lower layers, where BDRV_O_NO_IO does

     * not have effect.

     */</comment>

    <expr_stmt pos:start="373:5" pos:end="373:26"><expr pos:start="373:5" pos:end="373:25"><name pos:start="373:5" pos:end="373:11">options</name> <operator pos:start="373:13" pos:end="373:13">=</operator> <call pos:start="373:15" pos:end="373:25"><name pos:start="373:15" pos:end="373:23">qdict_new</name><argument_list pos:start="373:24" pos:end="373:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:46"><expr pos:start="375:5" pos:end="375:45"><call pos:start="375:5" pos:end="375:45"><name pos:start="375:5" pos:end="375:17">qdict_put_str</name><argument_list pos:start="375:18" pos:end="375:45">(<argument pos:start="375:19" pos:end="375:25"><expr pos:start="375:19" pos:end="375:25"><name pos:start="375:19" pos:end="375:25">options</name></expr></argument>, <argument pos:start="375:28" pos:end="375:35"><expr pos:start="375:28" pos:end="375:35"><literal type="string" pos:start="375:28" pos:end="375:35">"driver"</literal></expr></argument>, <argument pos:start="375:38" pos:end="375:44"><expr pos:start="375:38" pos:end="375:44"><literal type="string" pos:start="375:38" pos:end="375:44">"qcow2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="381:35"><expr pos:start="377:5" pos:end="381:34"><name pos:start="377:5" pos:end="377:7">blk</name> <operator pos:start="377:9" pos:end="377:9">=</operator> <call pos:start="377:11" pos:end="381:34"><name pos:start="377:11" pos:end="377:22">blk_new_open</name><argument_list pos:start="377:23" pos:end="381:34">(<argument pos:start="377:24" pos:end="377:31"><expr pos:start="377:24" pos:end="377:31"><name pos:start="377:24" pos:end="377:31">filename</name></expr></argument>, <argument pos:start="377:34" pos:end="377:37"><expr pos:start="377:34" pos:end="377:37"><name pos:start="377:34" pos:end="377:37">NULL</name></expr></argument>, <argument pos:start="377:40" pos:end="377:46"><expr pos:start="377:40" pos:end="377:46"><name pos:start="377:40" pos:end="377:46">options</name></expr></argument>,

                       <argument pos:start="379:24" pos:end="379:69"><expr pos:start="379:24" pos:end="379:69"><name pos:start="379:24" pos:end="379:34">BDRV_O_RDWR</name> <operator pos:start="379:36" pos:end="379:36">|</operator> <name pos:start="379:38" pos:end="379:54">BDRV_O_NO_BACKING</name> <operator pos:start="379:56" pos:end="379:56">|</operator> <name pos:start="379:58" pos:end="379:69">BDRV_O_NO_IO</name></expr></argument>,

                       <argument pos:start="381:24" pos:end="381:33"><expr pos:start="381:24" pos:end="381:33"><operator pos:start="381:24" pos:end="381:24">&amp;</operator><name pos:start="381:25" pos:end="381:33">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="383:5" pos:end="391:5"><if pos:start="383:5" pos:end="391:5">if <condition pos:start="383:8" pos:end="383:20">(<expr pos:start="383:9" pos:end="383:19"><name pos:start="383:9" pos:end="383:11">blk</name> <operator pos:start="383:13" pos:end="383:14">==</operator> <name pos:start="383:16" pos:end="383:19">NULL</name></expr>)</condition> <block pos:start="383:22" pos:end="391:5">{<block_content pos:start="385:9" pos:end="389:17">

        <expr_stmt pos:start="385:9" pos:end="385:41"><expr pos:start="385:9" pos:end="385:40"><call pos:start="385:9" pos:end="385:40"><name pos:start="385:9" pos:end="385:23">error_propagate</name><argument_list pos:start="385:24" pos:end="385:40">(<argument pos:start="385:25" pos:end="385:28"><expr pos:start="385:25" pos:end="385:28"><name pos:start="385:25" pos:end="385:28">errp</name></expr></argument>, <argument pos:start="385:31" pos:end="385:39"><expr pos:start="385:31" pos:end="385:39"><name pos:start="385:31" pos:end="385:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:19"><expr pos:start="387:9" pos:end="387:18"><name pos:start="387:9" pos:end="387:11">ret</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <operator pos:start="387:15" pos:end="387:15">-</operator><name pos:start="387:16" pos:end="387:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="389:9" pos:end="389:17">goto <name pos:start="389:14" pos:end="389:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:12"><expr pos:start="395:5" pos:end="395:11"><name pos:start="395:5" pos:end="395:7">ret</name> <operator pos:start="395:9" pos:end="395:9">=</operator> <literal type="number" pos:start="395:11" pos:end="395:11">0</literal></expr>;</expr_stmt>

<label pos:start="397:1" pos:end="397:4"><name pos:start="397:1" pos:end="397:3">out</name>:</label>

    <if_stmt pos:start="399:5" pos:end="403:5"><if pos:start="399:5" pos:end="403:5">if <condition pos:start="399:8" pos:end="399:12">(<expr pos:start="399:9" pos:end="399:11"><name pos:start="399:9" pos:end="399:11">blk</name></expr>)</condition> <block pos:start="399:14" pos:end="403:5">{<block_content pos:start="401:9" pos:end="401:23">

        <expr_stmt pos:start="401:9" pos:end="401:23"><expr pos:start="401:9" pos:end="401:22"><call pos:start="401:9" pos:end="401:22"><name pos:start="401:9" pos:end="401:17">blk_unref</name><argument_list pos:start="401:18" pos:end="401:22">(<argument pos:start="401:19" pos:end="401:21"><expr pos:start="401:19" pos:end="401:21"><name pos:start="401:19" pos:end="401:21">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="405:5" pos:end="405:15">return <expr pos:start="405:12" pos:end="405:14"><name pos:start="405:12" pos:end="405:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
