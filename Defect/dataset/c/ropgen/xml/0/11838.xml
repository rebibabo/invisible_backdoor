<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11838.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">nbd_init</name><parameter_list pos:start="1:13" pos:end="1:72">(<parameter pos:start="1:14" pos:end="1:19"><decl pos:start="1:14" pos:end="1:19"><type pos:start="1:14" pos:end="1:19"><name pos:start="1:14" pos:end="1:16">int</name></type> <name pos:start="1:18" pos:end="1:19">fd</name></decl></parameter>, <parameter pos:start="1:22" pos:end="1:43"><decl pos:start="1:22" pos:end="1:43"><type pos:start="1:22" pos:end="1:43"><name pos:start="1:22" pos:end="1:37">QIOChannelSocket</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">sioc</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:53">uint32_t</name></type> <name pos:start="1:55" pos:end="1:59">flags</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:71"><decl pos:start="1:62" pos:end="1:71"><type pos:start="1:62" pos:end="1:71"><name pos:start="1:62" pos:end="1:66">off_t</name></type> <name pos:start="1:68" pos:end="1:71">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <expr_stmt pos:start="5:5" pos:end="5:32"><expr pos:start="5:5" pos:end="5:31"><call pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:9">TRACE</name><argument_list pos:start="5:10" pos:end="5:31">(<argument pos:start="5:11" pos:end="5:30"><expr pos:start="5:11" pos:end="5:30"><literal type="string" pos:start="5:11" pos:end="5:30">"Setting NBD socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="9:5" pos:end="17:5"><if pos:start="9:5" pos:end="17:5">if <condition pos:start="9:8" pos:end="9:46">(<expr pos:start="9:9" pos:end="9:45"><call pos:start="9:9" pos:end="9:41"><name pos:start="9:9" pos:end="9:13">ioctl</name><argument_list pos:start="9:14" pos:end="9:41">(<argument pos:start="9:15" pos:end="9:16"><expr pos:start="9:15" pos:end="9:16"><name pos:start="9:15" pos:end="9:16">fd</name></expr></argument>, <argument pos:start="9:19" pos:end="9:30"><expr pos:start="9:19" pos:end="9:30"><name pos:start="9:19" pos:end="9:30">NBD_SET_SOCK</name></expr></argument>, <argument pos:start="9:33" pos:end="9:40"><expr pos:start="9:33" pos:end="9:40"><name pos:start="9:33" pos:end="9:40"><name pos:start="9:33" pos:end="9:36">sioc</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:40">fd</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:43" pos:end="9:43">&lt;</operator> <literal type="number" pos:start="9:45" pos:end="9:45">0</literal></expr>)</condition> <block pos:start="9:48" pos:end="17:5">{<block_content pos:start="11:9" pos:end="15:23">

        <decl_stmt pos:start="11:9" pos:end="11:27"><decl pos:start="11:9" pos:end="11:26"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:18">serrno</name> <init pos:start="11:20" pos:end="11:26">= <expr pos:start="11:22" pos:end="11:26"><name pos:start="11:22" pos:end="11:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:40"><expr pos:start="13:9" pos:end="13:39"><call pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:11">LOG</name><argument_list pos:start="13:12" pos:end="13:39">(<argument pos:start="13:13" pos:end="13:38"><expr pos:start="13:13" pos:end="13:38"><literal type="string" pos:start="13:13" pos:end="13:38">"Failed to set NBD socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:23">return <expr pos:start="15:16" pos:end="15:22"><operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:22">serrno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:72"><expr pos:start="21:5" pos:end="21:71"><call pos:start="21:5" pos:end="21:71"><name pos:start="21:5" pos:end="21:9">TRACE</name><argument_list pos:start="21:10" pos:end="21:71">(<argument pos:start="21:11" pos:end="21:37"><expr pos:start="21:11" pos:end="21:37"><literal type="string" pos:start="21:11" pos:end="21:37">"Setting block size to %lu"</literal></expr></argument>, <argument pos:start="21:40" pos:end="21:70"><expr pos:start="21:40" pos:end="21:70"><operator pos:start="21:40" pos:end="21:40">(</operator><name pos:start="21:41" pos:end="21:48">unsigned</name> <name pos:start="21:50" pos:end="21:53">long</name><operator pos:start="21:54" pos:end="21:54">)</operator><name pos:start="21:55" pos:end="21:70">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:65">(<expr pos:start="25:9" pos:end="25:64"><call pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:13">ioctl</name><argument_list pos:start="25:14" pos:end="25:60">(<argument pos:start="25:15" pos:end="25:16"><expr pos:start="25:15" pos:end="25:16"><name pos:start="25:15" pos:end="25:16">fd</name></expr></argument>, <argument pos:start="25:19" pos:end="25:33"><expr pos:start="25:19" pos:end="25:33"><name pos:start="25:19" pos:end="25:33">NBD_SET_BLKSIZE</name></expr></argument>, <argument pos:start="25:36" pos:end="25:59"><expr pos:start="25:36" pos:end="25:59"><operator pos:start="25:36" pos:end="25:36">(</operator><name pos:start="25:37" pos:end="25:42">size_t</name><operator pos:start="25:43" pos:end="25:43">)</operator><name pos:start="25:44" pos:end="25:59">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="25:62" pos:end="25:62">&lt;</operator> <literal type="number" pos:start="25:64" pos:end="25:64">0</literal></expr>)</condition> <block pos:start="25:67" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:23">

        <decl_stmt pos:start="27:9" pos:end="27:27"><decl pos:start="27:9" pos:end="27:26"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:18">serrno</name> <init pos:start="27:20" pos:end="27:26">= <expr pos:start="27:22" pos:end="27:26"><name pos:start="27:22" pos:end="27:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><call pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:11">LOG</name><argument_list pos:start="29:12" pos:end="29:44">(<argument pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:43"><literal type="string" pos:start="29:13" pos:end="29:43">"Failed setting NBD block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">serrno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:77"><expr pos:start="37:5" pos:end="37:76"><call pos:start="37:5" pos:end="37:76"><name pos:start="37:5" pos:end="37:9">TRACE</name><argument_list pos:start="37:10" pos:end="37:76">(<argument pos:start="37:11" pos:end="37:40"><expr pos:start="37:11" pos:end="37:40"><literal type="string" pos:start="37:11" pos:end="37:40">"Setting size to %zd block(s)"</literal></expr></argument>, <argument pos:start="37:43" pos:end="37:75"><expr pos:start="37:43" pos:end="37:75"><operator pos:start="37:43" pos:end="37:43">(</operator><name pos:start="37:44" pos:end="37:49">size_t</name><operator pos:start="37:50" pos:end="37:50">)</operator><operator pos:start="37:51" pos:end="37:51">(</operator><name pos:start="37:52" pos:end="37:55">size</name> <operator pos:start="37:57" pos:end="37:57">/</operator> <name pos:start="37:59" pos:end="37:74">BDRV_SECTOR_SIZE</name><operator pos:start="37:75" pos:end="37:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:78">(<expr pos:start="41:9" pos:end="41:77"><call pos:start="41:9" pos:end="41:73"><name pos:start="41:9" pos:end="41:13">ioctl</name><argument_list pos:start="41:14" pos:end="41:73">(<argument pos:start="41:15" pos:end="41:16"><expr pos:start="41:15" pos:end="41:16"><name pos:start="41:15" pos:end="41:16">fd</name></expr></argument>, <argument pos:start="41:19" pos:end="41:37"><expr pos:start="41:19" pos:end="41:37"><name pos:start="41:19" pos:end="41:37">NBD_SET_SIZE_BLOCKS</name></expr></argument>, <argument pos:start="41:40" pos:end="41:72"><expr pos:start="41:40" pos:end="41:72"><operator pos:start="41:40" pos:end="41:40">(</operator><name pos:start="41:41" pos:end="41:46">size_t</name><operator pos:start="41:47" pos:end="41:47">)</operator><operator pos:start="41:48" pos:end="41:48">(</operator><name pos:start="41:49" pos:end="41:52">size</name> <operator pos:start="41:54" pos:end="41:54">/</operator> <name pos:start="41:56" pos:end="41:71">BDRV_SECTOR_SIZE</name><operator pos:start="41:72" pos:end="41:72">)</operator></expr></argument>)</argument_list></call> <operator pos:start="41:75" pos:end="41:75">&lt;</operator> <literal type="number" pos:start="41:77" pos:end="41:77">0</literal></expr>)</condition> <block pos:start="41:80" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:23">

        <decl_stmt pos:start="43:9" pos:end="43:27"><decl pos:start="43:9" pos:end="43:26"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:18">serrno</name> <init pos:start="43:20" pos:end="43:26">= <expr pos:start="43:22" pos:end="43:26"><name pos:start="43:22" pos:end="43:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:47"><expr pos:start="45:9" pos:end="45:46"><call pos:start="45:9" pos:end="45:46"><name pos:start="45:9" pos:end="45:11">LOG</name><argument_list pos:start="45:12" pos:end="45:46">(<argument pos:start="45:13" pos:end="45:45"><expr pos:start="45:13" pos:end="45:45"><literal type="string" pos:start="45:13" pos:end="45:45">"Failed setting size (in blocks)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:23">return <expr pos:start="47:16" pos:end="47:22"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:22">serrno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="83:5"><if pos:start="53:5" pos:end="83:5">if <condition pos:start="53:8" pos:end="53:44">(<expr pos:start="53:9" pos:end="53:43"><call pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:13">ioctl</name><argument_list pos:start="53:14" pos:end="53:39">(<argument pos:start="53:15" pos:end="53:16"><expr pos:start="53:15" pos:end="53:16"><name pos:start="53:15" pos:end="53:16">fd</name></expr></argument>, <argument pos:start="53:19" pos:end="53:31"><expr pos:start="53:19" pos:end="53:31"><name pos:start="53:19" pos:end="53:31">NBD_SET_FLAGS</name></expr></argument>, <argument pos:start="53:34" pos:end="53:38"><expr pos:start="53:34" pos:end="53:38"><name pos:start="53:34" pos:end="53:38">flags</name></expr></argument>)</argument_list></call> <operator pos:start="53:41" pos:end="53:41">&lt;</operator> <literal type="number" pos:start="53:43" pos:end="53:43">0</literal></expr>)</condition> <block pos:start="53:46" pos:end="83:5">{<block_content pos:start="55:9" pos:end="81:9">

        <if_stmt pos:start="55:9" pos:end="81:9"><if pos:start="55:9" pos:end="73:9">if <condition pos:start="55:12" pos:end="55:28">(<expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:17">errno</name> <operator pos:start="55:19" pos:end="55:20">==</operator> <name pos:start="55:22" pos:end="55:27">ENOTTY</name></expr>)</condition> <block pos:start="55:30" pos:end="73:9">{<block_content pos:start="57:13" pos:end="71:13">

            <decl_stmt pos:start="57:13" pos:end="57:62"><decl pos:start="57:13" pos:end="57:61"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:25">read_only</name> <init pos:start="57:27" pos:end="57:61">= <expr pos:start="57:29" pos:end="57:61"><operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:34">flags</name> <operator pos:start="57:36" pos:end="57:36">&amp;</operator> <name pos:start="57:38" pos:end="57:55">NBD_FLAG_READ_ONLY</name><operator pos:start="57:56" pos:end="57:56">)</operator> <operator pos:start="57:58" pos:end="57:59">!=</operator> <literal type="number" pos:start="57:61" pos:end="57:61">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:48"><expr pos:start="59:13" pos:end="59:47"><call pos:start="59:13" pos:end="59:47"><name pos:start="59:13" pos:end="59:17">TRACE</name><argument_list pos:start="59:18" pos:end="59:47">(<argument pos:start="59:19" pos:end="59:46"><expr pos:start="59:19" pos:end="59:46"><literal type="string" pos:start="59:19" pos:end="59:46">"Setting readonly attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="63:13" pos:end="71:13"><if pos:start="63:13" pos:end="71:13">if <condition pos:start="63:16" pos:end="63:68">(<expr pos:start="63:17" pos:end="63:67"><call pos:start="63:17" pos:end="63:63"><name pos:start="63:17" pos:end="63:21">ioctl</name><argument_list pos:start="63:22" pos:end="63:63">(<argument pos:start="63:23" pos:end="63:24"><expr pos:start="63:23" pos:end="63:24"><name pos:start="63:23" pos:end="63:24">fd</name></expr></argument>, <argument pos:start="63:27" pos:end="63:34"><expr pos:start="63:27" pos:end="63:34"><name pos:start="63:27" pos:end="63:34">BLKROSET</name></expr></argument>, <argument pos:start="63:37" pos:end="63:62"><expr pos:start="63:37" pos:end="63:62"><operator pos:start="63:37" pos:end="63:37">(</operator><name pos:start="63:38" pos:end="63:45">unsigned</name> <name pos:start="63:47" pos:end="63:50">long</name><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:62">read_only</name></expr></argument>)</argument_list></call> <operator pos:start="63:65" pos:end="63:65">&lt;</operator> <literal type="number" pos:start="63:67" pos:end="63:67">0</literal></expr>)</condition> <block pos:start="63:70" pos:end="71:13">{<block_content pos:start="65:17" pos:end="69:31">

                <decl_stmt pos:start="65:17" pos:end="65:35"><decl pos:start="65:17" pos:end="65:34"><type pos:start="65:17" pos:end="65:19"><name pos:start="65:17" pos:end="65:19">int</name></type> <name pos:start="65:21" pos:end="65:26">serrno</name> <init pos:start="65:28" pos:end="65:34">= <expr pos:start="65:30" pos:end="65:34"><name pos:start="65:30" pos:end="65:34">errno</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:58"><expr pos:start="67:17" pos:end="67:57"><call pos:start="67:17" pos:end="67:57"><name pos:start="67:17" pos:end="67:19">LOG</name><argument_list pos:start="67:20" pos:end="67:57">(<argument pos:start="67:21" pos:end="67:56"><expr pos:start="67:21" pos:end="67:56"><literal type="string" pos:start="67:21" pos:end="67:56">"Failed setting read-only attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:31">return <expr pos:start="69:24" pos:end="69:30"><operator pos:start="69:24" pos:end="69:24">-</operator><name pos:start="69:25" pos:end="69:30">serrno</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="81:9">else <block pos:start="73:16" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:27">

            <decl_stmt pos:start="75:13" pos:end="75:31"><decl pos:start="75:13" pos:end="75:30"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:22">serrno</name> <init pos:start="75:24" pos:end="75:30">= <expr pos:start="75:26" pos:end="75:30"><name pos:start="75:26" pos:end="75:30">errno</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:40"><expr pos:start="77:13" pos:end="77:39"><call pos:start="77:13" pos:end="77:39"><name pos:start="77:13" pos:end="77:15">LOG</name><argument_list pos:start="77:16" pos:end="77:39">(<argument pos:start="77:17" pos:end="77:38"><expr pos:start="77:17" pos:end="77:38"><literal type="string" pos:start="77:17" pos:end="77:38">"Failed setting flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:27">return <expr pos:start="79:20" pos:end="79:26"><operator pos:start="79:20" pos:end="79:20">-</operator><name pos:start="79:21" pos:end="79:26">serrno</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:31"><expr pos:start="87:5" pos:end="87:30"><call pos:start="87:5" pos:end="87:30"><name pos:start="87:5" pos:end="87:9">TRACE</name><argument_list pos:start="87:10" pos:end="87:30">(<argument pos:start="87:11" pos:end="87:29"><expr pos:start="87:11" pos:end="87:29"><literal type="string" pos:start="87:11" pos:end="87:29">"Negotiation ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
