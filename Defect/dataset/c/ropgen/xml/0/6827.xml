<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6827.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:48">gen_intermediate_code_internal</name><parameter_list pos:start="1:49" pos:end="3:77">(<parameter pos:start="1:50" pos:end="1:70"><decl pos:start="1:50" pos:end="1:70"><type pos:start="1:50" pos:end="1:70"><name pos:start="1:50" pos:end="1:65">TranslationBlock</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type> <name pos:start="1:69" pos:end="1:70">tb</name></decl></parameter>,

						 <parameter pos:start="3:50" pos:end="3:56"><decl pos:start="3:50" pos:end="3:56"><type pos:start="3:50" pos:end="3:56"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:56">spc</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:76"><decl pos:start="3:59" pos:end="3:76"><type pos:start="3:59" pos:end="3:76"><name pos:start="3:59" pos:end="3:71">CPUSPARCState</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:76">env</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:25">pc_start</name></decl>, <decl pos:start="7:28" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:28" pos:end="7:34">last_pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint16_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">DisasContext</name></type> <name pos:start="11:18" pos:end="11:20">dc1</name></decl>, <decl pos:start="11:23" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:25">dc</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><operator pos:start="11:29" pos:end="11:29">&amp;</operator><name pos:start="11:30" pos:end="11:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">j</name></decl>, <decl pos:start="13:12" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:13">lj</name> <init pos:start="13:15" pos:end="13:18">= <expr pos:start="13:17" pos:end="13:18"><operator pos:start="13:17" pos:end="13:17">-</operator><literal type="number" pos:start="13:18" pos:end="13:18">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><call pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:10">memset</name><argument_list pos:start="17:11" pos:end="17:39">(<argument pos:start="17:12" pos:end="17:13"><expr pos:start="17:12" pos:end="17:13"><name pos:start="17:12" pos:end="17:13">dc</name></expr></argument>, <argument pos:start="17:16" pos:end="17:16"><expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr></argument>, <argument pos:start="17:19" pos:end="17:38"><expr pos:start="17:19" pos:end="17:38"><sizeof pos:start="17:19" pos:end="17:38">sizeof<argument_list pos:start="17:25" pos:end="17:38">(<argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">DisasContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:16"><expr pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:6">dc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:10">tb</name></name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:12">pc_start</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:17">tb</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:6">dc</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:10">pc</name></name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:6">dc</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:11">npc</name></name> <operator pos:start="25:13" pos:end="25:13">=</operator> <operator pos:start="25:15" pos:end="25:15">(</operator><name pos:start="25:16" pos:end="25:27">target_ulong</name><operator pos:start="25:28" pos:end="25:28">)</operator> <name pos:start="25:30" pos:end="25:40"><name pos:start="25:30" pos:end="25:31">tb</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:40">cs_base</name></name></expr>;</expr_stmt>

<cpp:if pos:start="27:1" pos:end="27:29">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:29"><call pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:11">defined</name><argument_list pos:start="27:12" pos:end="27:29">(<argument pos:start="27:13" pos:end="27:28"><expr pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:15">mem_idx</name></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:15">mem_idx</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <operator pos:start="33:19" pos:end="33:19">(</operator><operator pos:start="33:20" pos:end="33:20">(</operator><name pos:start="33:21" pos:end="33:29"><name pos:start="33:21" pos:end="33:23">env</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">psrs</name></name><operator pos:start="33:30" pos:end="33:30">)</operator> <operator pos:start="33:32" pos:end="33:33">!=</operator> <literal type="number" pos:start="33:35" pos:end="33:35">0</literal><operator pos:start="33:36" pos:end="33:36">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:15">gen_opc_ptr</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:29">gen_opc_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:45"><expr pos:start="39:5" pos:end="39:44"><name pos:start="39:5" pos:end="39:15">gen_opc_end</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:29">gen_opc_buf</name> <operator pos:start="39:31" pos:end="39:31">+</operator> <name pos:start="39:33" pos:end="39:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:19">gen_opparam_ptr</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:37">gen_opparam_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:20">access_type</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:34">ACCESS_CODE</name></expr>;</expr_stmt>



    <do pos:start="49:5" pos:end="109:60">do <block pos:start="49:8" pos:end="107:5">{<block_content pos:start="51:9" pos:end="105:18">

        <if_stmt pos:start="51:9" pos:end="65:9"><if pos:start="51:9" pos:end="65:9">if <condition pos:start="51:12" pos:end="51:36">(<expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:15">env</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:31">nb_breakpoints</name></name> <operator pos:start="51:33" pos:end="51:33">&gt;</operator> <literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>)</condition> <block pos:start="51:38" pos:end="65:9">{<block_content pos:start="53:13" pos:end="63:13">

            <for pos:start="53:13" pos:end="63:13">for<control pos:start="53:16" pos:end="53:52">(<init pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:21"><name pos:start="53:17" pos:end="53:17">j</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>;</init> <condition pos:start="53:24" pos:end="53:47"><expr pos:start="53:24" pos:end="53:46"><name pos:start="53:24" pos:end="53:24">j</name> <operator pos:start="53:26" pos:end="53:26">&lt;</operator> <name pos:start="53:28" pos:end="53:46"><name pos:start="53:28" pos:end="53:30">env</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:46">nb_breakpoints</name></name></expr>;</condition> <incr pos:start="53:49" pos:end="53:51"><expr pos:start="53:49" pos:end="53:51"><name pos:start="53:49" pos:end="53:49">j</name><operator pos:start="53:50" pos:end="53:51">++</operator></expr></incr>)</control> <block pos:start="53:54" pos:end="63:13">{<block_content pos:start="55:17" pos:end="61:17">

                <if_stmt pos:start="55:17" pos:end="61:17"><if pos:start="55:17" pos:end="61:17">if <condition pos:start="55:20" pos:end="55:50">(<expr pos:start="55:21" pos:end="55:49"><name pos:start="55:21" pos:end="55:39"><name pos:start="55:21" pos:end="55:23">env</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:36">breakpoints</name><index pos:start="55:37" pos:end="55:39">[<expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">j</name></expr>]</index></name> <operator pos:start="55:41" pos:end="55:42">==</operator> <name pos:start="55:44" pos:end="55:49"><name pos:start="55:44" pos:end="55:45">dc</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:49">pc</name></name></expr>)</condition> <block pos:start="55:52" pos:end="61:17">{<block_content pos:start="57:21" pos:end="59:26">

                    <expr_stmt pos:start="57:21" pos:end="57:42"><expr pos:start="57:21" pos:end="57:41"><call pos:start="57:21" pos:end="57:41"><name pos:start="57:21" pos:end="57:29">gen_debug</name><argument_list pos:start="57:30" pos:end="57:41">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">dc</name></expr></argument>, <argument pos:start="57:35" pos:end="57:40"><expr pos:start="57:35" pos:end="57:40"><name pos:start="57:35" pos:end="57:40"><name pos:start="57:35" pos:end="57:36">dc</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:40">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="59:21" pos:end="59:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="91:9"><if pos:start="67:9" pos:end="91:9">if <condition pos:start="67:12" pos:end="67:16">(<expr pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">spc</name></expr>)</condition> <block pos:start="67:18" pos:end="91:9">{<block_content pos:start="69:13" pos:end="89:13">

            <if_stmt pos:start="69:13" pos:end="71:51"><if pos:start="69:13" pos:end="71:51">if <condition pos:start="69:16" pos:end="69:29">(<expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:24">loglevel</name> <operator pos:start="69:26" pos:end="69:26">&gt;</operator> <literal type="number" pos:start="69:28" pos:end="69:28">0</literal></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:51"><block_content pos:start="71:17" pos:end="71:51">

                <expr_stmt pos:start="71:17" pos:end="71:51"><expr pos:start="71:17" pos:end="71:50"><call pos:start="71:17" pos:end="71:50"><name pos:start="71:17" pos:end="71:23">fprintf</name><argument_list pos:start="71:24" pos:end="71:50">(<argument pos:start="71:25" pos:end="71:31"><expr pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:31">logfile</name></expr></argument>, <argument pos:start="71:34" pos:end="71:49"><expr pos:start="71:34" pos:end="71:49"><literal type="string" pos:start="71:34" pos:end="71:49">"Search PC...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:42"><expr pos:start="73:13" pos:end="73:41"><name pos:start="73:13" pos:end="73:13">j</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:27">gen_opc_ptr</name> <operator pos:start="73:29" pos:end="73:29">-</operator> <name pos:start="73:31" pos:end="73:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="89:13"><if pos:start="75:13" pos:end="89:13">if <condition pos:start="75:16" pos:end="75:23">(<expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:18">lj</name> <operator pos:start="75:20" pos:end="75:20">&lt;</operator> <name pos:start="75:22" pos:end="75:22">j</name></expr>)</condition> <block pos:start="75:25" pos:end="89:13">{<block_content pos:start="77:17" pos:end="87:44">

                <expr_stmt pos:start="77:17" pos:end="77:21"><expr pos:start="77:17" pos:end="77:20"><name pos:start="77:17" pos:end="77:18">lj</name><operator pos:start="77:19" pos:end="77:20">++</operator></expr>;</expr_stmt>

                <while pos:start="79:17" pos:end="81:50">while <condition pos:start="79:23" pos:end="79:30">(<expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:25">lj</name> <operator pos:start="79:27" pos:end="79:27">&lt;</operator> <name pos:start="79:29" pos:end="79:29">j</name></expr>)</condition><block type="pseudo" pos:start="81:21" pos:end="81:50"><block_content pos:start="81:21" pos:end="81:50">

                    <expr_stmt pos:start="81:21" pos:end="81:50"><expr pos:start="81:21" pos:end="81:49"><name pos:start="81:21" pos:end="81:45"><name pos:start="81:21" pos:end="81:39">gen_opc_instr_start</name><index pos:start="81:40" pos:end="81:45">[<expr pos:start="81:41" pos:end="81:44"><name pos:start="81:41" pos:end="81:42">lj</name><operator pos:start="81:43" pos:end="81:44">++</operator></expr>]</index></name> <operator pos:start="81:47" pos:end="81:47">=</operator> <literal type="number" pos:start="81:49" pos:end="81:49">0</literal></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="83:17" pos:end="83:40"><expr pos:start="83:17" pos:end="83:39"><name pos:start="83:17" pos:end="83:30"><name pos:start="83:17" pos:end="83:26">gen_opc_pc</name><index pos:start="83:27" pos:end="83:30">[<expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">lj</name></expr>]</index></name> <operator pos:start="83:32" pos:end="83:32">=</operator> <name pos:start="83:34" pos:end="83:39"><name pos:start="83:34" pos:end="83:35">dc</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:39">pc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:42"><expr pos:start="85:17" pos:end="85:41"><name pos:start="85:17" pos:end="85:31"><name pos:start="85:17" pos:end="85:27">gen_opc_npc</name><index pos:start="85:28" pos:end="85:31">[<expr pos:start="85:29" pos:end="85:30"><name pos:start="85:29" pos:end="85:30">lj</name></expr>]</index></name> <operator pos:start="85:33" pos:end="85:33">=</operator> <name pos:start="85:35" pos:end="85:41"><name pos:start="85:35" pos:end="85:36">dc</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:41">npc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:44"><expr pos:start="87:17" pos:end="87:43"><name pos:start="87:17" pos:end="87:39"><name pos:start="87:17" pos:end="87:35">gen_opc_instr_start</name><index pos:start="87:36" pos:end="87:39">[<expr pos:start="87:37" pos:end="87:38"><name pos:start="87:37" pos:end="87:38">lj</name></expr>]</index></name> <operator pos:start="87:41" pos:end="87:41">=</operator> <literal type="number" pos:start="87:43" pos:end="87:43">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="93:9" pos:end="93:25"><expr pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:15">last_pc</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:24"><name pos:start="93:19" pos:end="93:20">dc</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:24">pc</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="95:9" pos:end="95:29"><expr pos:start="95:9" pos:end="95:28"><call pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:24">disas_sparc_insn</name><argument_list pos:start="95:25" pos:end="95:28">(<argument pos:start="95:26" pos:end="95:27"><expr pos:start="95:26" pos:end="95:27"><name pos:start="95:26" pos:end="95:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="97:9" pos:end="99:18"><if pos:start="97:9" pos:end="99:18">if <condition pos:start="97:12" pos:end="97:22">(<expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:14">dc</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:21">is_br</name></name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:18"><block_content pos:start="99:13" pos:end="99:18">

	    <break pos:start="99:13" pos:end="99:18">break;</break></block_content></block></if></if_stmt>

	<comment type="block" pos:start="101:9" pos:end="101:55">/* if the next PC is different, we abort now */</comment>

	<if_stmt pos:start="103:9" pos:end="105:18"><if pos:start="103:9" pos:end="105:18">if <condition pos:start="103:12" pos:end="103:36">(<expr pos:start="103:13" pos:end="103:35"><name pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:14">dc</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:18">pc</name></name> <operator pos:start="103:20" pos:end="103:21">!=</operator> <operator pos:start="103:23" pos:end="103:23">(</operator><name pos:start="103:24" pos:end="103:30">last_pc</name> <operator pos:start="103:32" pos:end="103:32">+</operator> <literal type="number" pos:start="103:34" pos:end="103:34">4</literal><operator pos:start="103:35" pos:end="103:35">)</operator></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:18"><block_content pos:start="105:13" pos:end="105:18">

	    <break pos:start="105:13" pos:end="105:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="107:13" pos:end="109:59">(<expr pos:start="107:14" pos:end="109:58"><operator pos:start="107:14" pos:end="107:14">(</operator><name pos:start="107:15" pos:end="107:25">gen_opc_ptr</name> <operator pos:start="107:27" pos:end="107:27">&lt;</operator> <name pos:start="107:29" pos:end="107:39">gen_opc_end</name><operator pos:start="107:40" pos:end="107:40">)</operator> <operator pos:start="107:42" pos:end="107:43">&amp;&amp;</operator>

	     <operator pos:start="109:14" pos:end="109:14">(</operator><name pos:start="109:15" pos:end="109:20"><name pos:start="109:15" pos:end="109:16">dc</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:20">pc</name></name> <operator pos:start="109:22" pos:end="109:22">-</operator> <name pos:start="109:24" pos:end="109:31">pc_start</name><operator pos:start="109:32" pos:end="109:32">)</operator> <operator pos:start="109:34" pos:end="109:34">&lt;</operator> <operator pos:start="109:36" pos:end="109:36">(</operator><name pos:start="109:37" pos:end="109:52">TARGET_PAGE_SIZE</name> <operator pos:start="109:54" pos:end="109:54">-</operator> <literal type="number" pos:start="109:56" pos:end="109:57">32</literal><operator pos:start="109:58" pos:end="109:58">)</operator></expr>)</condition>;</do>

    <if_stmt pos:start="111:5" pos:end="135:5"><if pos:start="111:5" pos:end="135:5">if <condition pos:start="111:8" pos:end="111:19">(<expr pos:start="111:9" pos:end="111:18"><operator pos:start="111:9" pos:end="111:9">!</operator><name pos:start="111:10" pos:end="111:18"><name pos:start="111:10" pos:end="111:11">dc</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:18">is_br</name></name></expr>)</condition> <block pos:start="111:21" pos:end="135:5">{<block_content pos:start="113:9" pos:end="133:9">

        <if_stmt pos:start="113:9" pos:end="133:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="115:58">(<expr pos:start="113:13" pos:end="115:57"><name pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:14">dc</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:18">pc</name></name> <operator pos:start="113:20" pos:end="113:21">!=</operator> <name pos:start="113:23" pos:end="113:32">DYNAMIC_PC</name> <operator pos:start="113:34" pos:end="113:35">&amp;&amp;</operator> 

            <operator pos:start="115:13" pos:end="115:13">(</operator><name pos:start="115:14" pos:end="115:20"><name pos:start="115:14" pos:end="115:15">dc</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:20">npc</name></name> <operator pos:start="115:22" pos:end="115:23">!=</operator> <name pos:start="115:25" pos:end="115:34">DYNAMIC_PC</name> <operator pos:start="115:36" pos:end="115:37">&amp;&amp;</operator> <name pos:start="115:39" pos:end="115:45"><name pos:start="115:39" pos:end="115:40">dc</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:45">npc</name></name> <operator pos:start="115:47" pos:end="115:48">!=</operator> <name pos:start="115:50" pos:end="115:56">JUMP_PC</name><operator pos:start="115:57" pos:end="115:57">)</operator></expr>)</condition> <block pos:start="115:60" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:53">

            <comment type="block" pos:start="117:13" pos:end="117:63">/* static PC and NPC: we can use direct chaining */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:53"><expr pos:start="119:13" pos:end="119:52"><call pos:start="119:13" pos:end="119:52"><name pos:start="119:13" pos:end="119:25">gen_op_branch</name><argument_list pos:start="119:26" pos:end="119:52">(<argument pos:start="119:27" pos:end="119:34"><expr pos:start="119:27" pos:end="119:34"><operator pos:start="119:27" pos:end="119:27">(</operator><name pos:start="119:28" pos:end="119:31">long</name><operator pos:start="119:32" pos:end="119:32">)</operator><name pos:start="119:33" pos:end="119:34">tb</name></expr></argument>, <argument pos:start="119:37" pos:end="119:42"><expr pos:start="119:37" pos:end="119:42"><name pos:start="119:37" pos:end="119:42"><name pos:start="119:37" pos:end="119:38">dc</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:42">pc</name></name></expr></argument>, <argument pos:start="119:45" pos:end="119:51"><expr pos:start="119:45" pos:end="119:51"><name pos:start="119:45" pos:end="119:51"><name pos:start="119:45" pos:end="119:46">dc</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:51">npc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="133:9">else <block pos:start="121:16" pos:end="133:9">{<block_content pos:start="123:13" pos:end="131:29">

            <if_stmt pos:start="123:13" pos:end="125:38"><if pos:start="123:13" pos:end="125:38">if <condition pos:start="123:16" pos:end="123:37">(<expr pos:start="123:17" pos:end="123:36"><name pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:18">dc</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:22">pc</name></name> <operator pos:start="123:24" pos:end="123:25">!=</operator> <name pos:start="123:27" pos:end="123:36">DYNAMIC_PC</name></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:38"><block_content pos:start="125:17" pos:end="125:38">

                <expr_stmt pos:start="125:17" pos:end="125:38"><expr pos:start="125:17" pos:end="125:37"><call pos:start="125:17" pos:end="125:37"><name pos:start="125:17" pos:end="125:29">gen_op_jmp_im</name><argument_list pos:start="125:30" pos:end="125:37">(<argument pos:start="125:31" pos:end="125:36"><expr pos:start="125:31" pos:end="125:36"><name pos:start="125:31" pos:end="125:36"><name pos:start="125:31" pos:end="125:32">dc</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:25"><expr pos:start="127:13" pos:end="127:24"><call pos:start="127:13" pos:end="127:24"><name pos:start="127:13" pos:end="127:20">save_npc</name><argument_list pos:start="127:21" pos:end="127:24">(<argument pos:start="127:22" pos:end="127:23"><expr pos:start="127:22" pos:end="127:23"><name pos:start="127:22" pos:end="127:23">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:31"><expr pos:start="129:13" pos:end="129:30"><call pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:28">gen_op_movl_T0_0</name><argument_list pos:start="129:29" pos:end="129:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><call pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:26">gen_op_exit_tb</name><argument_list pos:start="131:27" pos:end="131:28">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:32"><expr pos:start="137:5" pos:end="137:31"><operator pos:start="137:5" pos:end="137:5">*</operator><name pos:start="137:6" pos:end="137:16">gen_opc_ptr</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <name pos:start="137:20" pos:end="137:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="168:0"><if pos:start="139:5" pos:end="161:5">if <condition pos:start="139:8" pos:end="139:12">(<expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">spc</name></expr>)</condition> <block pos:start="139:14" pos:end="161:5">{<block_content pos:start="141:9" pos:end="160:0">

        <expr_stmt pos:start="141:9" pos:end="141:38"><expr pos:start="141:9" pos:end="141:37"><name pos:start="141:9" pos:end="141:9">j</name> <operator pos:start="141:11" pos:end="141:11">=</operator> <name pos:start="141:13" pos:end="141:23">gen_opc_ptr</name> <operator pos:start="141:25" pos:end="141:25">-</operator> <name pos:start="141:27" pos:end="141:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:13"><expr pos:start="143:9" pos:end="143:12"><name pos:start="143:9" pos:end="143:10">lj</name><operator pos:start="143:11" pos:end="143:12">++</operator></expr>;</expr_stmt>

        <while pos:start="145:9" pos:end="147:42">while <condition pos:start="145:15" pos:end="145:23">(<expr pos:start="145:16" pos:end="145:22"><name pos:start="145:16" pos:end="145:17">lj</name> <operator pos:start="145:19" pos:end="145:20">&lt;=</operator> <name pos:start="145:22" pos:end="145:22">j</name></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:42"><block_content pos:start="147:13" pos:end="147:42">

            <expr_stmt pos:start="147:13" pos:end="147:42"><expr pos:start="147:13" pos:end="147:41"><name pos:start="147:13" pos:end="147:37"><name pos:start="147:13" pos:end="147:31">gen_opc_instr_start</name><index pos:start="147:32" pos:end="147:37">[<expr pos:start="147:33" pos:end="147:36"><name pos:start="147:33" pos:end="147:34">lj</name><operator pos:start="147:35" pos:end="147:36">++</operator></expr>]</index></name> <operator pos:start="147:39" pos:end="147:39">=</operator> <literal type="number" pos:start="147:41" pos:end="147:41">0</literal></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="149:9" pos:end="160:0"><expr pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:10">tb</name><operator pos:start="149:11" pos:end="149:12">-&gt;</operator><name pos:start="149:13" pos:end="149:16">size</name></name> <operator pos:start="149:18" pos:end="149:18">=</operator> <literal type="number" pos:start="149:20" pos:end="149:20">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="151:1" pos:end="151:5">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:5"><literal type="number" pos:start="151:5" pos:end="151:5">0</literal></expr></cpp:if>

        if (loglevel &gt; 0) {

            page_dump(logfile);

        }

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="168:0">else <block pos:start="161:12" pos:end="168:0">{<block_content pos:start="163:9" pos:end="163:38">

        <expr_stmt pos:start="163:9" pos:end="163:38"><expr pos:start="163:9" pos:end="163:37"><name pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:10">tb</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:16">size</name></name> <operator pos:start="163:18" pos:end="163:18">=</operator> <name pos:start="163:20" pos:end="163:26"><name pos:start="163:20" pos:end="163:21">dc</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:26">npc</name></name> <operator pos:start="163:28" pos:end="163:28">-</operator> <name pos:start="163:30" pos:end="163:37">pc_start</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="167:1" pos:end="167:18">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="169:5" pos:end="192:0"><if pos:start="169:5" pos:end="192:0">if <condition pos:start="169:8" pos:end="169:37">(<expr pos:start="169:9" pos:end="169:36"><name pos:start="169:9" pos:end="169:16">loglevel</name> <operator pos:start="169:18" pos:end="169:18">&amp;</operator> <name pos:start="169:20" pos:end="169:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="169:39" pos:end="192:0">{<block_content pos:start="171:9" pos:end="187:9">

	<expr_stmt pos:start="171:9" pos:end="171:45"><expr pos:start="171:9" pos:end="171:44"><call pos:start="171:9" pos:end="171:44"><name pos:start="171:9" pos:end="171:15">fprintf</name><argument_list pos:start="171:16" pos:end="171:44">(<argument pos:start="171:17" pos:end="171:23"><expr pos:start="171:17" pos:end="171:23"><name pos:start="171:17" pos:end="171:23">logfile</name></expr></argument>, <argument pos:start="171:26" pos:end="171:43"><expr pos:start="171:26" pos:end="171:43"><literal type="string" pos:start="171:26" pos:end="171:43">"--------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="173:9" pos:end="173:73"><expr pos:start="173:9" pos:end="173:72"><call pos:start="173:9" pos:end="173:72"><name pos:start="173:9" pos:end="173:15">fprintf</name><argument_list pos:start="173:16" pos:end="173:72">(<argument pos:start="173:17" pos:end="173:23"><expr pos:start="173:17" pos:end="173:23"><name pos:start="173:17" pos:end="173:23">logfile</name></expr></argument>, <argument pos:start="173:26" pos:end="173:35"><expr pos:start="173:26" pos:end="173:35"><literal type="string" pos:start="173:26" pos:end="173:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="173:38" pos:end="173:71"><expr pos:start="173:38" pos:end="173:71"><call pos:start="173:38" pos:end="173:71"><name pos:start="173:38" pos:end="173:50">lookup_symbol</name><argument_list pos:start="173:51" pos:end="173:71">(<argument pos:start="173:52" pos:end="173:70"><expr pos:start="173:52" pos:end="173:70"><operator pos:start="173:52" pos:end="173:52">(</operator><name pos:start="173:53" pos:end="173:59">uint8_t</name> <operator pos:start="173:61" pos:end="173:61">*</operator><operator pos:start="173:62" pos:end="173:62">)</operator><name pos:start="173:63" pos:end="173:70">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="175:9" pos:end="175:74"><expr pos:start="175:9" pos:end="175:73"><call pos:start="175:9" pos:end="175:73"><name pos:start="175:9" pos:end="175:13">disas</name><argument_list pos:start="175:14" pos:end="175:73">(<argument pos:start="175:15" pos:end="175:21"><expr pos:start="175:15" pos:end="175:21"><name pos:start="175:15" pos:end="175:21">logfile</name></expr></argument>, <argument pos:start="175:24" pos:end="175:42"><expr pos:start="175:24" pos:end="175:42"><operator pos:start="175:24" pos:end="175:24">(</operator><name pos:start="175:25" pos:end="175:31">uint8_t</name> <operator pos:start="175:33" pos:end="175:33">*</operator><operator pos:start="175:34" pos:end="175:34">)</operator><name pos:start="175:35" pos:end="175:42">pc_start</name></expr></argument>, <argument pos:start="175:45" pos:end="175:66"><expr pos:start="175:45" pos:end="175:66"><name pos:start="175:45" pos:end="175:51">last_pc</name> <operator pos:start="175:53" pos:end="175:53">+</operator> <literal type="number" pos:start="175:55" pos:end="175:57">4</literal> <operator pos:start="175:57" pos:end="175:57">-</operator> <name pos:start="175:59" pos:end="175:66">pc_start</name></expr></argument>, <argument pos:start="175:69" pos:end="175:69"><expr pos:start="175:69" pos:end="175:69"><literal type="number" pos:start="175:69" pos:end="175:69">0</literal></expr></argument>, <argument pos:start="175:72" pos:end="175:72"><expr pos:start="175:72" pos:end="175:72"><literal type="number" pos:start="175:72" pos:end="175:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="177:9" pos:end="177:31"><expr pos:start="177:9" pos:end="177:30"><call pos:start="177:9" pos:end="177:30"><name pos:start="177:9" pos:end="177:15">fprintf</name><argument_list pos:start="177:16" pos:end="177:30">(<argument pos:start="177:17" pos:end="177:23"><expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:23">logfile</name></expr></argument>, <argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><literal type="string" pos:start="177:26" pos:end="177:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="187:9"><if pos:start="179:9" pos:end="187:9">if <condition pos:start="179:12" pos:end="179:37">(<expr pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:20">loglevel</name> <operator pos:start="179:22" pos:end="179:22">&amp;</operator> <name pos:start="179:24" pos:end="179:36">CPU_LOG_TB_OP</name></expr>)</condition> <block pos:start="179:39" pos:end="187:9">{<block_content pos:start="181:13" pos:end="185:35">

            <expr_stmt pos:start="181:13" pos:end="181:38"><expr pos:start="181:13" pos:end="181:37"><call pos:start="181:13" pos:end="181:37"><name pos:start="181:13" pos:end="181:19">fprintf</name><argument_list pos:start="181:20" pos:end="181:37">(<argument pos:start="181:21" pos:end="181:27"><expr pos:start="181:21" pos:end="181:27"><name pos:start="181:21" pos:end="181:27">logfile</name></expr></argument>, <argument pos:start="181:30" pos:end="181:36"><expr pos:start="181:30" pos:end="181:36"><literal type="string" pos:start="181:30" pos:end="181:36">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:51"><expr pos:start="183:13" pos:end="183:50"><call pos:start="183:13" pos:end="183:50"><name pos:start="183:13" pos:end="183:20">dump_ops</name><argument_list pos:start="183:21" pos:end="183:50">(<argument pos:start="183:22" pos:end="183:32"><expr pos:start="183:22" pos:end="183:32"><name pos:start="183:22" pos:end="183:32">gen_opc_buf</name></expr></argument>, <argument pos:start="183:35" pos:end="183:49"><expr pos:start="183:35" pos:end="183:49"><name pos:start="183:35" pos:end="183:49">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:35"><expr pos:start="185:13" pos:end="185:34"><call pos:start="185:13" pos:end="185:34"><name pos:start="185:13" pos:end="185:19">fprintf</name><argument_list pos:start="185:20" pos:end="185:34">(<argument pos:start="185:21" pos:end="185:27"><expr pos:start="185:21" pos:end="185:27"><name pos:start="185:21" pos:end="185:27">logfile</name></expr></argument>, <argument pos:start="185:30" pos:end="185:33"><expr pos:start="185:30" pos:end="185:33"><literal type="string" pos:start="185:30" pos:end="185:33">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="195:5" pos:end="195:35"><expr pos:start="195:5" pos:end="195:34"><name pos:start="195:5" pos:end="195:20"><name pos:start="195:5" pos:end="195:7">env</name><operator pos:start="195:8" pos:end="195:9">-&gt;</operator><name pos:start="195:10" pos:end="195:20">access_type</name></name> <operator pos:start="195:22" pos:end="195:22">=</operator> <name pos:start="195:24" pos:end="195:34">ACCESS_DATA</name></expr>;</expr_stmt>

    <return pos:start="197:5" pos:end="197:13">return <expr pos:start="197:12" pos:end="197:12"><literal type="number" pos:start="197:12" pos:end="197:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
