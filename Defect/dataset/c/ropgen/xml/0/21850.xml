<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21850.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">ff_rtp_send_jpeg</name><parameter_list pos:start="1:22" pos:end="1:72">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">s1</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">buf</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:71"><decl pos:start="1:64" pos:end="1:71"><type pos:start="1:64" pos:end="1:71"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:71">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="223:1">{<block_content pos:start="5:5" pos:end="221:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">RTPMuxContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:36">= <expr pos:start="5:24" pos:end="5:36"><name pos:start="5:24" pos:end="5:36"><name pos:start="5:24" pos:end="5:25">s1</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:26">qtables</name> <init pos:start="7:28" pos:end="7:33">= <expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">nb_qtables</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:16">type</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="11:23" pos:end="11:71">/* default pixel format is AV_PIX_FMT_YUVJ420P */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:13">w</name></decl>, <decl pos:start="13:16" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:16" pos:end="13:16">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">off</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:18" pos:end="17:64">/* fragment offset of the current JPEG frame */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">buf_ptr</name></name>   <operator pos:start="25:18" pos:end="25:18">=</operator> <name pos:start="25:20" pos:end="25:25"><name pos:start="25:20" pos:end="25:20">s</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:25">buf</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:16">timestamp</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:35"><name pos:start="27:20" pos:end="27:20">s</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:35">cur_timestamp</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:62">/* convert video pixel dimensions from pixels to blocks */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:5">w</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:10">s1</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:19">streams</name><index pos:start="33:20" pos:end="33:22">[<expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr>]</index></name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:29">codec</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:36">width</name></name>  <operator pos:start="33:39" pos:end="33:40">&gt;&gt;</operator> <literal type="number" pos:start="33:42" pos:end="33:42">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:5">h</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:10">s1</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:19">streams</name><index pos:start="35:20" pos:end="35:22">[<expr pos:start="35:21" pos:end="35:21"><literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>]</index></name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:37"><name pos:start="35:25" pos:end="35:29">codec</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:37">height</name></name> <operator pos:start="35:39" pos:end="35:40">&gt;&gt;</operator> <literal type="number" pos:start="35:42" pos:end="35:42">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:58">/* check if pixel format is not the normal 420 case */</comment>

    <if_stmt pos:start="41:5" pos:end="55:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:62">(<expr pos:start="41:9" pos:end="41:61"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:10">s1</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:19">streams</name><index pos:start="41:20" pos:end="41:22">[<expr pos:start="41:21" pos:end="41:21"><literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>]</index></name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:38"><name pos:start="41:25" pos:end="41:29">codec</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:38">pix_fmt</name></name> <operator pos:start="41:40" pos:end="41:41">==</operator> <name pos:start="41:43" pos:end="41:61">AV_PIX_FMT_YUVJ422P</name></expr>)</condition> <block pos:start="41:64" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <expr_stmt pos:start="43:9" pos:end="43:17"><expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:12">type</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="49:5">else if <condition pos:start="45:15" pos:end="45:69">(<expr pos:start="45:16" pos:end="45:68"><name pos:start="45:16" pos:end="45:29"><name pos:start="45:16" pos:end="45:17">s1</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:26">streams</name><index pos:start="45:27" pos:end="45:29">[<expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">0</literal></expr>]</index></name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:45"><name pos:start="45:32" pos:end="45:36">codec</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:45">pix_fmt</name></name> <operator pos:start="45:47" pos:end="45:48">==</operator> <name pos:start="45:50" pos:end="45:68">AV_PIX_FMT_YUVJ420P</name></expr>)</condition> <block pos:start="45:71" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:17">

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">type</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="55:5">else <block pos:start="49:12" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:15">

        <expr_stmt pos:start="51:9" pos:end="51:63"><expr pos:start="51:9" pos:end="51:62"><call pos:start="51:9" pos:end="51:62"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:62">(<argument pos:start="51:16" pos:end="51:17"><expr pos:start="51:16" pos:end="51:17"><name pos:start="51:16" pos:end="51:17">s1</name></expr></argument>, <argument pos:start="51:20" pos:end="51:31"><expr pos:start="51:20" pos:end="51:31"><name pos:start="51:20" pos:end="51:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:34" pos:end="51:61"><expr pos:start="51:34" pos:end="51:61"><literal type="string" pos:start="51:34" pos:end="51:61">"Unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:52">/* preparse the header for getting some infos */</comment>

    <for pos:start="61:5" pos:end="117:5">for <control pos:start="61:9" pos:end="61:30">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:25"><expr pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:24">size</name></expr>;</condition> <incr pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:27">i</name><operator pos:start="61:28" pos:end="61:29">++</operator></expr></incr>)</control> <block pos:start="61:32" pos:end="117:5">{<block_content pos:start="63:9" pos:end="115:9">

        <if_stmt pos:start="63:9" pos:end="65:21"><if pos:start="63:9" pos:end="65:21">if <condition pos:start="63:12" pos:end="63:27">(<expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:15">buf</name><index pos:start="63:16" pos:end="63:18">[<expr pos:start="63:17" pos:end="63:17"><name pos:start="63:17" pos:end="63:17">i</name></expr>]</index></name> <operator pos:start="63:20" pos:end="63:21">!=</operator> <literal type="number" pos:start="63:23" pos:end="63:26">0xff</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:21"><block_content pos:start="65:13" pos:end="65:21">

            <continue pos:start="65:13" pos:end="65:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="69:9" pos:end="115:9"><if pos:start="69:9" pos:end="95:9">if <condition pos:start="69:12" pos:end="69:30">(<expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:15">buf</name><index pos:start="69:16" pos:end="69:22">[<expr pos:start="69:17" pos:end="69:21"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">+</operator> <literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>]</index></name> <operator pos:start="69:24" pos:end="69:25">==</operator> <name pos:start="69:27" pos:end="69:29">DQT</name></expr>)</condition> <block pos:start="69:32" pos:end="95:9">{<block_content pos:start="71:13" pos:end="93:34">

            <if_stmt pos:start="71:13" pos:end="75:63"><if pos:start="71:13" pos:end="75:63">if <condition pos:start="71:16" pos:end="71:27">(<expr pos:start="71:17" pos:end="71:26"><name pos:start="71:17" pos:end="71:26"><name pos:start="71:17" pos:end="71:19">buf</name><index pos:start="71:20" pos:end="71:26">[<expr pos:start="71:21" pos:end="71:25"><name pos:start="71:21" pos:end="71:21">i</name> <operator pos:start="71:23" pos:end="71:23">+</operator> <literal type="number" pos:start="71:25" pos:end="71:25">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="75:63"><block_content pos:start="73:17" pos:end="75:63">

                <expr_stmt pos:start="73:17" pos:end="75:63"><expr pos:start="73:17" pos:end="75:62"><call pos:start="73:17" pos:end="75:62"><name pos:start="73:17" pos:end="73:22">av_log</name><argument_list pos:start="73:23" pos:end="75:62">(<argument pos:start="73:24" pos:end="73:25"><expr pos:start="73:24" pos:end="73:25"><name pos:start="73:24" pos:end="73:25">s1</name></expr></argument>, <argument pos:start="73:28" pos:end="73:41"><expr pos:start="73:28" pos:end="73:41"><name pos:start="73:28" pos:end="73:41">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="75:24" pos:end="75:61"><expr pos:start="75:24" pos:end="75:61"><literal type="string" pos:start="75:24" pos:end="75:61">"Only 8-bit precision is supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="79:13" pos:end="79:55">/* a quantization table is 64 bytes long */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:51"><expr pos:start="81:13" pos:end="81:50"><name pos:start="81:13" pos:end="81:22">nb_qtables</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <call pos:start="81:26" pos:end="81:45"><name pos:start="81:26" pos:end="81:32">AV_RB16</name><argument_list pos:start="81:33" pos:end="81:45">(<argument pos:start="81:34" pos:end="81:44"><expr pos:start="81:34" pos:end="81:44"><operator pos:start="81:34" pos:end="81:34">&amp;</operator><name pos:start="81:35" pos:end="81:44"><name pos:start="81:35" pos:end="81:37">buf</name><index pos:start="81:38" pos:end="81:44">[<expr pos:start="81:39" pos:end="81:43"><name pos:start="81:39" pos:end="81:39">i</name> <operator pos:start="81:41" pos:end="81:41">+</operator> <literal type="number" pos:start="81:43" pos:end="81:43">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="81:47" pos:end="81:47">/</operator> <literal type="number" pos:start="81:49" pos:end="81:50">65</literal></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="89:13"><if pos:start="83:13" pos:end="89:13">if <condition pos:start="83:16" pos:end="83:47">(<expr pos:start="83:17" pos:end="83:46"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">+</operator> <literal type="number" pos:start="83:21" pos:end="83:23">4</literal> <operator pos:start="83:23" pos:end="83:23">+</operator> <name pos:start="83:25" pos:end="83:34">nb_qtables</name> <operator pos:start="83:36" pos:end="83:36">*</operator> <literal type="number" pos:start="83:38" pos:end="83:39">65</literal> <operator pos:start="83:41" pos:end="83:41">&gt;</operator> <name pos:start="83:43" pos:end="83:46">size</name></expr>)</condition> <block pos:start="83:49" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:23">

                <expr_stmt pos:start="85:17" pos:end="85:78"><expr pos:start="85:17" pos:end="85:77"><call pos:start="85:17" pos:end="85:77"><name pos:start="85:17" pos:end="85:22">av_log</name><argument_list pos:start="85:23" pos:end="85:77">(<argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">s1</name></expr></argument>, <argument pos:start="85:28" pos:end="85:39"><expr pos:start="85:28" pos:end="85:39"><name pos:start="85:28" pos:end="85:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:42" pos:end="85:76"><expr pos:start="85:42" pos:end="85:76"><literal type="string" pos:start="85:42" pos:end="85:76">"Too short JPEG header. Aborted!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:34"><expr pos:start="93:13" pos:end="93:33"><name pos:start="93:13" pos:end="93:19">qtables</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <operator pos:start="93:23" pos:end="93:23">&amp;</operator><name pos:start="93:24" pos:end="93:33"><name pos:start="93:24" pos:end="93:26">buf</name><index pos:start="93:27" pos:end="93:33">[<expr pos:start="93:28" pos:end="93:32"><name pos:start="93:28" pos:end="93:28">i</name> <operator pos:start="93:30" pos:end="93:30">+</operator> <literal type="number" pos:start="93:32" pos:end="93:32">4</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="95:11" pos:end="107:9">else if <condition pos:start="95:19" pos:end="95:38">(<expr pos:start="95:20" pos:end="95:37"><name pos:start="95:20" pos:end="95:29"><name pos:start="95:20" pos:end="95:22">buf</name><index pos:start="95:23" pos:end="95:29">[<expr pos:start="95:24" pos:end="95:28"><name pos:start="95:24" pos:end="95:24">i</name> <operator pos:start="95:26" pos:end="95:26">+</operator> <literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>]</index></name> <operator pos:start="95:31" pos:end="95:32">==</operator> <name pos:start="95:34" pos:end="95:37">SOF0</name></expr>)</condition> <block pos:start="95:40" pos:end="107:9">{<block_content pos:start="97:13" pos:end="105:13">

            <if_stmt pos:start="97:13" pos:end="105:13"><if pos:start="97:13" pos:end="105:13">if <condition pos:start="97:16" pos:end="97:55">(<expr pos:start="97:17" pos:end="97:54"><name pos:start="97:17" pos:end="97:27"><name pos:start="97:17" pos:end="97:19">buf</name><index pos:start="97:20" pos:end="97:27">[<expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:21">i</name> <operator pos:start="97:23" pos:end="97:23">+</operator> <literal type="number" pos:start="97:25" pos:end="97:26">14</literal></expr>]</index></name> <operator pos:start="97:29" pos:end="97:30">!=</operator> <literal type="number" pos:start="97:32" pos:end="97:33">17</literal> <operator pos:start="97:35" pos:end="97:36">||</operator> <name pos:start="97:38" pos:end="97:48"><name pos:start="97:38" pos:end="97:40">buf</name><index pos:start="97:41" pos:end="97:48">[<expr pos:start="97:42" pos:end="97:47"><name pos:start="97:42" pos:end="97:42">i</name> <operator pos:start="97:44" pos:end="97:44">+</operator> <literal type="number" pos:start="97:46" pos:end="97:47">17</literal></expr>]</index></name> <operator pos:start="97:50" pos:end="97:51">!=</operator> <literal type="number" pos:start="97:53" pos:end="97:54">17</literal></expr>)</condition> <block pos:start="97:57" pos:end="105:13">{<block_content pos:start="99:17" pos:end="103:23">

                <expr_stmt pos:start="99:17" pos:end="101:75"><expr pos:start="99:17" pos:end="101:74"><call pos:start="99:17" pos:end="101:74"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="101:74">(<argument pos:start="99:24" pos:end="99:25"><expr pos:start="99:24" pos:end="99:25"><name pos:start="99:24" pos:end="99:25">s1</name></expr></argument>, <argument pos:start="99:28" pos:end="99:39"><expr pos:start="99:28" pos:end="99:39"><name pos:start="99:28" pos:end="99:39">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="101:24" pos:end="101:73"><expr pos:start="101:24" pos:end="101:73"><literal type="string" pos:start="101:24" pos:end="101:73">"Only 1x1 chroma blocks are supported. Aborted!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="103:17" pos:end="103:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="115:9">else if <condition pos:start="107:19" pos:end="107:37">(<expr pos:start="107:20" pos:end="107:36"><name pos:start="107:20" pos:end="107:29"><name pos:start="107:20" pos:end="107:22">buf</name><index pos:start="107:23" pos:end="107:29">[<expr pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:24">i</name> <operator pos:start="107:26" pos:end="107:26">+</operator> <literal type="number" pos:start="107:28" pos:end="107:28">1</literal></expr>]</index></name> <operator pos:start="107:31" pos:end="107:32">==</operator> <name pos:start="107:34" pos:end="107:36">SOS</name></expr>)</condition> <block pos:start="107:39" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:18">

            <comment type="block" pos:start="109:13" pos:end="109:50">/* SOS is last marker in the header */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:42"><expr pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:13">i</name> <operator pos:start="111:15" pos:end="111:16">+=</operator> <call pos:start="111:18" pos:end="111:37"><name pos:start="111:18" pos:end="111:24">AV_RB16</name><argument_list pos:start="111:25" pos:end="111:37">(<argument pos:start="111:26" pos:end="111:36"><expr pos:start="111:26" pos:end="111:36"><operator pos:start="111:26" pos:end="111:26">&amp;</operator><name pos:start="111:27" pos:end="111:36"><name pos:start="111:27" pos:end="111:29">buf</name><index pos:start="111:30" pos:end="111:36">[<expr pos:start="111:31" pos:end="111:35"><name pos:start="111:31" pos:end="111:31">i</name> <operator pos:start="111:33" pos:end="111:33">+</operator> <literal type="number" pos:start="111:35" pos:end="111:35">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="111:39" pos:end="111:39">+</operator> <literal type="number" pos:start="111:41" pos:end="111:41">2</literal></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="121:5" pos:end="121:26">/* skip JPEG header */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:14"><expr pos:start="123:5" pos:end="123:13"><name pos:start="123:5" pos:end="123:7">buf</name>  <operator pos:start="123:10" pos:end="123:11">+=</operator> <name pos:start="123:13" pos:end="123:13">i</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:14"><expr pos:start="125:5" pos:end="125:13"><name pos:start="125:5" pos:end="125:8">size</name> <operator pos:start="125:10" pos:end="125:11">-=</operator> <name pos:start="125:13" pos:end="125:13">i</name></expr>;</expr_stmt>



    <for pos:start="129:5" pos:end="141:5">for <control pos:start="129:9" pos:end="129:35">(<init pos:start="129:10" pos:end="129:22"><expr pos:start="129:10" pos:end="129:21"><name pos:start="129:10" pos:end="129:10">i</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <name pos:start="129:14" pos:end="129:17">size</name> <operator pos:start="129:19" pos:end="129:19">-</operator> <literal type="number" pos:start="129:21" pos:end="129:21">2</literal></expr>;</init> <condition pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:29"><name pos:start="129:24" pos:end="129:24">i</name> <operator pos:start="129:26" pos:end="129:27">&gt;=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>;</condition> <incr pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:32">i</name><operator pos:start="129:33" pos:end="129:34">--</operator></expr></incr>)</control> <block pos:start="129:37" pos:end="141:5">{<block_content pos:start="131:9" pos:end="139:9">

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:48">(<expr pos:start="131:13" pos:end="131:47"><name pos:start="131:13" pos:end="131:18"><name pos:start="131:13" pos:end="131:15">buf</name><index pos:start="131:16" pos:end="131:18">[<expr pos:start="131:17" pos:end="131:17"><name pos:start="131:17" pos:end="131:17">i</name></expr>]</index></name> <operator pos:start="131:20" pos:end="131:21">==</operator> <literal type="number" pos:start="131:23" pos:end="131:26">0xff</literal> <operator pos:start="131:28" pos:end="131:29">&amp;&amp;</operator> <name pos:start="131:31" pos:end="131:40"><name pos:start="131:31" pos:end="131:33">buf</name><index pos:start="131:34" pos:end="131:40">[<expr pos:start="131:35" pos:end="131:39"><name pos:start="131:35" pos:end="131:35">i</name> <operator pos:start="131:37" pos:end="131:37">+</operator> <literal type="number" pos:start="131:39" pos:end="131:39">1</literal></expr>]</index></name> <operator pos:start="131:42" pos:end="131:43">==</operator> <name pos:start="131:45" pos:end="131:47">EOI</name></expr>)</condition> <block pos:start="131:50" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:18">

            <comment type="block" pos:start="133:13" pos:end="133:39">/* Remove the EOI marker */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:21"><expr pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:16">size</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:20">i</name></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="145:5" pos:end="145:19"><expr pos:start="145:5" pos:end="145:18"><name pos:start="145:5" pos:end="145:5">p</name> <operator pos:start="145:7" pos:end="145:7">=</operator> <name pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:18">buf_ptr</name></name></expr>;</expr_stmt>

    <while pos:start="147:5" pos:end="221:5">while <condition pos:start="147:11" pos:end="147:20">(<expr pos:start="147:12" pos:end="147:19"><name pos:start="147:12" pos:end="147:15">size</name> <operator pos:start="147:17" pos:end="147:17">&gt;</operator> <literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>)</condition> <block pos:start="147:22" pos:end="221:5">{<block_content pos:start="149:9" pos:end="219:23">

        <decl_stmt pos:start="149:9" pos:end="149:25"><decl pos:start="149:9" pos:end="149:24"><type pos:start="149:9" pos:end="149:11"><name pos:start="149:9" pos:end="149:11">int</name></type> <name pos:start="149:13" pos:end="149:20">hdr_size</name> <init pos:start="149:22" pos:end="149:24">= <expr pos:start="149:24" pos:end="149:24"><literal type="number" pos:start="149:24" pos:end="149:24">8</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="153:9" pos:end="155:44"><if pos:start="153:9" pos:end="155:44">if <condition pos:start="153:12" pos:end="153:35">(<expr pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:15">off</name> <operator pos:start="153:17" pos:end="153:18">==</operator> <literal type="number" pos:start="153:20" pos:end="153:20">0</literal> <operator pos:start="153:22" pos:end="153:23">&amp;&amp;</operator> <name pos:start="153:25" pos:end="153:34">nb_qtables</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:44"><block_content pos:start="155:13" pos:end="155:44">

            <expr_stmt pos:start="155:13" pos:end="155:44"><expr pos:start="155:13" pos:end="155:43"><name pos:start="155:13" pos:end="155:20">hdr_size</name> <operator pos:start="155:22" pos:end="155:23">+=</operator> <literal type="number" pos:start="155:25" pos:end="155:27">4</literal> <operator pos:start="155:27" pos:end="155:27">+</operator> <literal type="number" pos:start="155:29" pos:end="155:30">64</literal> <operator pos:start="155:32" pos:end="155:32">*</operator> <name pos:start="155:34" pos:end="155:43">nb_qtables</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:39">/* payload max in one packet */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:58"><expr pos:start="161:9" pos:end="161:57"><name pos:start="161:9" pos:end="161:11">len</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <call pos:start="161:15" pos:end="161:57"><name pos:start="161:15" pos:end="161:19">FFMIN</name><argument_list pos:start="161:20" pos:end="161:57">(<argument pos:start="161:21" pos:end="161:24"><expr pos:start="161:21" pos:end="161:24"><name pos:start="161:21" pos:end="161:24">size</name></expr></argument>, <argument pos:start="161:27" pos:end="161:56"><expr pos:start="161:27" pos:end="161:56"><name pos:start="161:27" pos:end="161:45"><name pos:start="161:27" pos:end="161:27">s</name><operator pos:start="161:28" pos:end="161:29">-&gt;</operator><name pos:start="161:30" pos:end="161:45">max_payload_size</name></name> <operator pos:start="161:47" pos:end="161:47">-</operator> <name pos:start="161:49" pos:end="161:56">hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="165:9" pos:end="165:29">/* set main header */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:35"><expr pos:start="167:9" pos:end="167:34"><call pos:start="167:9" pos:end="167:34"><name pos:start="167:9" pos:end="167:27">bytestream_put_byte</name><argument_list pos:start="167:28" pos:end="167:34">(<argument pos:start="167:29" pos:end="167:30"><expr pos:start="167:29" pos:end="167:30"><operator pos:start="167:29" pos:end="167:29">&amp;</operator><name pos:start="167:30" pos:end="167:30">p</name></expr></argument>, <argument pos:start="167:33" pos:end="167:33"><expr pos:start="167:33" pos:end="167:33"><literal type="number" pos:start="167:33" pos:end="167:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:37"><expr pos:start="169:9" pos:end="169:36"><call pos:start="169:9" pos:end="169:36"><name pos:start="169:9" pos:end="169:27">bytestream_put_be24</name><argument_list pos:start="169:28" pos:end="169:36">(<argument pos:start="169:29" pos:end="169:30"><expr pos:start="169:29" pos:end="169:30"><operator pos:start="169:29" pos:end="169:29">&amp;</operator><name pos:start="169:30" pos:end="169:30">p</name></expr></argument>, <argument pos:start="169:33" pos:end="169:35"><expr pos:start="169:33" pos:end="169:35"><name pos:start="169:33" pos:end="169:35">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><call pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:27">bytestream_put_byte</name><argument_list pos:start="171:28" pos:end="171:37">(<argument pos:start="171:29" pos:end="171:30"><expr pos:start="171:29" pos:end="171:30"><operator pos:start="171:29" pos:end="171:29">&amp;</operator><name pos:start="171:30" pos:end="171:30">p</name></expr></argument>, <argument pos:start="171:33" pos:end="171:36"><expr pos:start="171:33" pos:end="171:36"><name pos:start="171:33" pos:end="171:36">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:37"><expr pos:start="173:9" pos:end="173:36"><call pos:start="173:9" pos:end="173:36"><name pos:start="173:9" pos:end="173:27">bytestream_put_byte</name><argument_list pos:start="173:28" pos:end="173:36">(<argument pos:start="173:29" pos:end="173:30"><expr pos:start="173:29" pos:end="173:30"><operator pos:start="173:29" pos:end="173:29">&amp;</operator><name pos:start="173:30" pos:end="173:30">p</name></expr></argument>, <argument pos:start="173:33" pos:end="173:35"><expr pos:start="173:33" pos:end="173:35"><literal type="number" pos:start="173:33" pos:end="173:35">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:35"><expr pos:start="175:9" pos:end="175:34"><call pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:27">bytestream_put_byte</name><argument_list pos:start="175:28" pos:end="175:34">(<argument pos:start="175:29" pos:end="175:30"><expr pos:start="175:29" pos:end="175:30"><operator pos:start="175:29" pos:end="175:29">&amp;</operator><name pos:start="175:30" pos:end="175:30">p</name></expr></argument>, <argument pos:start="175:33" pos:end="175:33"><expr pos:start="175:33" pos:end="175:33"><name pos:start="175:33" pos:end="175:33">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:35"><expr pos:start="177:9" pos:end="177:34"><call pos:start="177:9" pos:end="177:34"><name pos:start="177:9" pos:end="177:27">bytestream_put_byte</name><argument_list pos:start="177:28" pos:end="177:34">(<argument pos:start="177:29" pos:end="177:30"><expr pos:start="177:29" pos:end="177:30"><operator pos:start="177:29" pos:end="177:29">&amp;</operator><name pos:start="177:30" pos:end="177:30">p</name></expr></argument>, <argument pos:start="177:33" pos:end="177:33"><expr pos:start="177:33" pos:end="177:33"><name pos:start="177:33" pos:end="177:33">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="181:9" pos:end="197:9"><if pos:start="181:9" pos:end="197:9">if <condition pos:start="181:12" pos:end="181:35">(<expr pos:start="181:13" pos:end="181:34"><name pos:start="181:13" pos:end="181:15">off</name> <operator pos:start="181:17" pos:end="181:18">==</operator> <literal type="number" pos:start="181:20" pos:end="181:20">0</literal> <operator pos:start="181:22" pos:end="181:23">&amp;&amp;</operator> <name pos:start="181:25" pos:end="181:34">nb_qtables</name></expr>)</condition> <block pos:start="181:37" pos:end="197:9">{<block_content pos:start="185:13" pos:end="195:68">

            <comment type="block" pos:start="183:13" pos:end="183:48">/* set quantization tables header */</comment>

            <expr_stmt pos:start="185:13" pos:end="185:39"><expr pos:start="185:13" pos:end="185:38"><call pos:start="185:13" pos:end="185:38"><name pos:start="185:13" pos:end="185:31">bytestream_put_byte</name><argument_list pos:start="185:32" pos:end="185:38">(<argument pos:start="185:33" pos:end="185:34"><expr pos:start="185:33" pos:end="185:34"><operator pos:start="185:33" pos:end="185:33">&amp;</operator><name pos:start="185:34" pos:end="185:34">p</name></expr></argument>, <argument pos:start="185:37" pos:end="185:37"><expr pos:start="185:37" pos:end="185:37"><literal type="number" pos:start="185:37" pos:end="185:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:39"><expr pos:start="187:13" pos:end="187:38"><call pos:start="187:13" pos:end="187:38"><name pos:start="187:13" pos:end="187:31">bytestream_put_byte</name><argument_list pos:start="187:32" pos:end="187:38">(<argument pos:start="187:33" pos:end="187:34"><expr pos:start="187:33" pos:end="187:34"><operator pos:start="187:33" pos:end="187:33">&amp;</operator><name pos:start="187:34" pos:end="187:34">p</name></expr></argument>, <argument pos:start="187:37" pos:end="187:37"><expr pos:start="187:37" pos:end="187:37"><literal type="number" pos:start="187:37" pos:end="187:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:53"><expr pos:start="189:13" pos:end="189:52"><call pos:start="189:13" pos:end="189:52"><name pos:start="189:13" pos:end="189:31">bytestream_put_be16</name><argument_list pos:start="189:32" pos:end="189:52">(<argument pos:start="189:33" pos:end="189:34"><expr pos:start="189:33" pos:end="189:34"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:34">p</name></expr></argument>, <argument pos:start="189:37" pos:end="189:51"><expr pos:start="189:37" pos:end="189:51"><literal type="number" pos:start="189:37" pos:end="189:38">64</literal> <operator pos:start="189:40" pos:end="189:40">*</operator> <name pos:start="189:42" pos:end="189:51">nb_qtables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="193:13" pos:end="195:68">for <control pos:start="193:17" pos:end="193:44">(<init pos:start="193:18" pos:end="193:23"><expr pos:start="193:18" pos:end="193:22"><name pos:start="193:18" pos:end="193:18">i</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <literal type="number" pos:start="193:22" pos:end="193:22">0</literal></expr>;</init> <condition pos:start="193:25" pos:end="193:39"><expr pos:start="193:25" pos:end="193:38"><name pos:start="193:25" pos:end="193:25">i</name> <operator pos:start="193:27" pos:end="193:27">&lt;</operator> <name pos:start="193:29" pos:end="193:38">nb_qtables</name></expr>;</condition> <incr pos:start="193:41" pos:end="193:43"><expr pos:start="193:41" pos:end="193:43"><name pos:start="193:41" pos:end="193:41">i</name><operator pos:start="193:42" pos:end="193:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="195:17" pos:end="195:68"><block_content pos:start="195:17" pos:end="195:68">

                <expr_stmt pos:start="195:17" pos:end="195:68"><expr pos:start="195:17" pos:end="195:67"><call pos:start="195:17" pos:end="195:67"><name pos:start="195:17" pos:end="195:37">bytestream_put_buffer</name><argument_list pos:start="195:38" pos:end="195:67">(<argument pos:start="195:39" pos:end="195:40"><expr pos:start="195:39" pos:end="195:40"><operator pos:start="195:39" pos:end="195:39">&amp;</operator><name pos:start="195:40" pos:end="195:40">p</name></expr></argument>, <argument pos:start="195:43" pos:end="195:62"><expr pos:start="195:43" pos:end="195:62"><operator pos:start="195:43" pos:end="195:43">&amp;</operator><name pos:start="195:44" pos:end="195:62"><name pos:start="195:44" pos:end="195:50">qtables</name><index pos:start="195:51" pos:end="195:62">[<expr pos:start="195:52" pos:end="195:61"><literal type="number" pos:start="195:52" pos:end="195:53">65</literal> <operator pos:start="195:55" pos:end="195:55">*</operator> <name pos:start="195:57" pos:end="195:57">i</name> <operator pos:start="195:59" pos:end="195:59">+</operator> <literal type="number" pos:start="195:61" pos:end="195:61">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="195:65" pos:end="195:66"><expr pos:start="195:65" pos:end="195:66"><literal type="number" pos:start="195:65" pos:end="195:66">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="201:9" pos:end="201:31">/* copy payload data */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:28"><expr pos:start="203:9" pos:end="203:27"><call pos:start="203:9" pos:end="203:27"><name pos:start="203:9" pos:end="203:14">memcpy</name><argument_list pos:start="203:15" pos:end="203:27">(<argument pos:start="203:16" pos:end="203:16"><expr pos:start="203:16" pos:end="203:16"><name pos:start="203:16" pos:end="203:16">p</name></expr></argument>, <argument pos:start="203:19" pos:end="203:21"><expr pos:start="203:19" pos:end="203:21"><name pos:start="203:19" pos:end="203:21">buf</name></expr></argument>, <argument pos:start="203:24" pos:end="203:26"><expr pos:start="203:24" pos:end="203:26"><name pos:start="203:24" pos:end="203:26">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="207:9" pos:end="207:48">/* marker bit is last packet in frame */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:66"><expr pos:start="209:9" pos:end="209:65"><call pos:start="209:9" pos:end="209:65"><name pos:start="209:9" pos:end="209:24">ff_rtp_send_data</name><argument_list pos:start="209:25" pos:end="209:65">(<argument pos:start="209:26" pos:end="209:27"><expr pos:start="209:26" pos:end="209:27"><name pos:start="209:26" pos:end="209:27">s1</name></expr></argument>, <argument pos:start="209:30" pos:end="209:35"><expr pos:start="209:30" pos:end="209:35"><name pos:start="209:30" pos:end="209:35"><name pos:start="209:30" pos:end="209:30">s</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:35">buf</name></name></expr></argument>, <argument pos:start="209:38" pos:end="209:51"><expr pos:start="209:38" pos:end="209:51"><name pos:start="209:38" pos:end="209:40">len</name> <operator pos:start="209:42" pos:end="209:42">+</operator> <name pos:start="209:44" pos:end="209:51">hdr_size</name></expr></argument>, <argument pos:start="209:54" pos:end="209:64"><expr pos:start="209:54" pos:end="209:64"><name pos:start="209:54" pos:end="209:57">size</name> <operator pos:start="209:59" pos:end="209:60">==</operator> <name pos:start="209:62" pos:end="209:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:20"><expr pos:start="213:9" pos:end="213:19"><name pos:start="213:9" pos:end="213:11">buf</name>  <operator pos:start="213:14" pos:end="213:15">+=</operator> <name pos:start="213:17" pos:end="213:19">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:20"><expr pos:start="215:9" pos:end="215:19"><name pos:start="215:9" pos:end="215:12">size</name> <operator pos:start="215:14" pos:end="215:15">-=</operator> <name pos:start="215:17" pos:end="215:19">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:20"><expr pos:start="217:9" pos:end="217:19"><name pos:start="217:9" pos:end="217:11">off</name>  <operator pos:start="217:14" pos:end="217:15">+=</operator> <name pos:start="217:17" pos:end="217:19">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:23"><expr pos:start="219:9" pos:end="219:22"><name pos:start="219:9" pos:end="219:9">p</name>     <operator pos:start="219:15" pos:end="219:15">=</operator> <name pos:start="219:17" pos:end="219:22"><name pos:start="219:17" pos:end="219:17">s</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:22">buf</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
