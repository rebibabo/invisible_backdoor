<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6805.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">svq3_decode_slice_header</name><parameter_list pos:start="1:36" pos:end="1:51">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:47">H264Context</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:13">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:18">MpegEncContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier><specifier pos:start="5:21" pos:end="5:25">const</specifier></type> <name pos:start="5:27" pos:end="5:27">s</name> <init pos:start="5:29" pos:end="5:50">= <expr pos:start="5:31" pos:end="5:50"><operator pos:start="5:31" pos:end="5:31">(</operator><name pos:start="5:32" pos:end="5:45">MpegEncContext</name> <operator pos:start="5:47" pos:end="5:47">*</operator><operator pos:start="5:48" pos:end="5:48">)</operator> <name pos:start="5:50" pos:end="5:50">h</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:19">mb_xy</name> <init pos:start="7:21" pos:end="7:30">= <expr pos:start="7:23" pos:end="7:30"><name pos:start="7:23" pos:end="7:30"><name pos:start="7:23" pos:end="7:23">h</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:30">mb_xy</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:17">header</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:10">header</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <call pos:start="13:14" pos:end="13:32"><name pos:start="13:14" pos:end="13:21">get_bits</name><argument_list pos:start="13:22" pos:end="13:32">(<argument pos:start="13:23" pos:end="13:28"><expr pos:start="13:23" pos:end="13:28"><operator pos:start="13:23" pos:end="13:23">&amp;</operator><name pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:24">s</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:28">gb</name></name></expr></argument>, <argument pos:start="13:31" pos:end="13:31"><expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="69:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:79">(<expr pos:start="17:9" pos:end="17:78"><operator pos:start="17:9" pos:end="17:9">(</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:16">header</name> <operator pos:start="17:18" pos:end="17:18">&amp;</operator> <literal type="number" pos:start="17:20" pos:end="17:23">0x9F</literal><operator pos:start="17:24" pos:end="17:24">)</operator> <operator pos:start="17:26" pos:end="17:27">!=</operator> <literal type="number" pos:start="17:29" pos:end="17:29">1</literal> <operator pos:start="17:31" pos:end="17:32">&amp;&amp;</operator> <operator pos:start="17:34" pos:end="17:34">(</operator><name pos:start="17:35" pos:end="17:40">header</name> <operator pos:start="17:42" pos:end="17:42">&amp;</operator> <literal type="number" pos:start="17:44" pos:end="17:47">0x9F</literal><operator pos:start="17:48" pos:end="17:48">)</operator> <operator pos:start="17:50" pos:end="17:51">!=</operator> <literal type="number" pos:start="17:53" pos:end="17:53">2</literal><operator pos:start="17:54" pos:end="17:54">)</operator> <operator pos:start="17:56" pos:end="17:57">||</operator> <operator pos:start="17:59" pos:end="17:59">(</operator><name pos:start="17:60" pos:end="17:65">header</name> <operator pos:start="17:67" pos:end="17:67">&amp;</operator> <literal type="number" pos:start="17:69" pos:end="17:72">0x60</literal><operator pos:start="17:73" pos:end="17:73">)</operator> <operator pos:start="17:75" pos:end="17:76">==</operator> <literal type="number" pos:start="17:78" pos:end="17:78">0</literal></expr>)</condition> <block pos:start="17:81" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <comment type="block" pos:start="19:9" pos:end="19:25">/* TODO: what? */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:86"><expr pos:start="21:9" pos:end="21:85"><call pos:start="21:9" pos:end="21:85"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:85">(<argument pos:start="21:16" pos:end="21:25"><expr pos:start="21:16" pos:end="21:25"><name pos:start="21:16" pos:end="21:25"><name pos:start="21:16" pos:end="21:16">h</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:19">s</name><operator pos:start="21:20" pos:end="21:20">.</operator><name pos:start="21:21" pos:end="21:25">avctx</name></name></expr></argument>, <argument pos:start="21:28" pos:end="21:39"><expr pos:start="21:28" pos:end="21:39"><name pos:start="21:28" pos:end="21:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:42" pos:end="21:76"><expr pos:start="21:42" pos:end="21:76"><literal type="string" pos:start="21:42" pos:end="21:76">"unsupported slice header (%02X)\n"</literal></expr></argument>, <argument pos:start="21:79" pos:end="21:84"><expr pos:start="21:79" pos:end="21:84"><name pos:start="21:79" pos:end="21:84">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="69:5">else <block pos:start="25:12" pos:end="69:5">{<block_content pos:start="27:9" pos:end="67:34">

        <decl_stmt pos:start="27:9" pos:end="27:39"><decl pos:start="27:9" pos:end="27:38"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:18">length</name> <init pos:start="27:20" pos:end="27:38">= <expr pos:start="27:22" pos:end="27:38"><operator pos:start="27:22" pos:end="27:22">(</operator><name pos:start="27:23" pos:end="27:28">header</name> <operator pos:start="27:30" pos:end="27:31">&gt;&gt;</operator> <literal type="number" pos:start="27:33" pos:end="27:33">5</literal><operator pos:start="27:34" pos:end="27:34">)</operator> <operator pos:start="27:36" pos:end="27:36">&amp;</operator> <literal type="number" pos:start="27:38" pos:end="27:38">3</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:96"><expr pos:start="31:9" pos:end="31:95"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:9">h</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:27">next_slice_index</name></name> <operator pos:start="31:29" pos:end="31:29">=</operator> <call pos:start="31:31" pos:end="31:52"><name pos:start="31:31" pos:end="31:44">get_bits_count</name><argument_list pos:start="31:45" pos:end="31:52">(<argument pos:start="31:46" pos:end="31:51"><expr pos:start="31:46" pos:end="31:51"><operator pos:start="31:46" pos:end="31:46">&amp;</operator><name pos:start="31:47" pos:end="31:51"><name pos:start="31:47" pos:end="31:47">s</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:51">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="31:54" pos:end="31:54">+</operator> <literal type="number" pos:start="31:56" pos:end="31:56">8</literal><operator pos:start="31:57" pos:end="31:57">*</operator><call pos:start="31:58" pos:end="31:84"><name pos:start="31:58" pos:end="31:66">show_bits</name><argument_list pos:start="31:67" pos:end="31:84">(<argument pos:start="31:68" pos:end="31:73"><expr pos:start="31:68" pos:end="31:73"><operator pos:start="31:68" pos:end="31:68">&amp;</operator><name pos:start="31:69" pos:end="31:73"><name pos:start="31:69" pos:end="31:69">s</name><operator pos:start="31:70" pos:end="31:71">-&gt;</operator><name pos:start="31:72" pos:end="31:73">gb</name></name></expr></argument>, <argument pos:start="31:76" pos:end="31:83"><expr pos:start="31:76" pos:end="31:83"><literal type="number" pos:start="31:76" pos:end="31:76">8</literal><operator pos:start="31:77" pos:end="31:77">*</operator><name pos:start="31:78" pos:end="31:83">length</name></expr></argument>)</argument_list></call> <operator pos:start="31:86" pos:end="31:86">+</operator> <literal type="number" pos:start="31:88" pos:end="31:88">8</literal><operator pos:start="31:89" pos:end="31:89">*</operator><name pos:start="31:90" pos:end="31:95">length</name></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="41:5"><if pos:start="35:9" pos:end="41:5">if <condition pos:start="35:12" pos:end="35:53">(<expr pos:start="35:13" pos:end="35:52"><name pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:13">h</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:31">next_slice_index</name></name> <operator pos:start="35:33" pos:end="35:33">&gt;</operator> <name pos:start="35:35" pos:end="35:52"><name pos:start="35:35" pos:end="35:35">s</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:39">gb</name><operator pos:start="35:40" pos:end="35:40">.</operator><name pos:start="35:41" pos:end="35:52">size_in_bits</name></name></expr>)</condition> <block pos:start="35:55" pos:end="41:5">{<block_content pos:start="37:13" pos:end="39:22">

            <expr_stmt pos:start="37:13" pos:end="37:76"><expr pos:start="37:13" pos:end="37:75"><call pos:start="37:13" pos:end="37:75"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:75">(<argument pos:start="37:20" pos:end="37:29"><expr pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:20">h</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:23">s</name><operator pos:start="37:24" pos:end="37:24">.</operator><name pos:start="37:25" pos:end="37:29">avctx</name></name></expr></argument>, <argument pos:start="37:32" pos:end="37:43"><expr pos:start="37:32" pos:end="37:43"><name pos:start="37:32" pos:end="37:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:46" pos:end="37:74"><expr pos:start="37:46" pos:end="37:74"><literal type="string" pos:start="37:46" pos:end="37:74">"slice after bitstream end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><operator pos:start="39:20" pos:end="39:20">-</operator><literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:66"><expr pos:start="45:9" pos:end="45:65"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:13">gb</name><operator pos:start="45:14" pos:end="45:14">.</operator><name pos:start="45:15" pos:end="45:26">size_in_bits</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:48"><name pos:start="45:30" pos:end="45:30">h</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:48">next_slice_index</name></name> <operator pos:start="45:50" pos:end="45:50">-</operator> <literal type="number" pos:start="45:52" pos:end="45:52">8</literal><operator pos:start="45:53" pos:end="45:53">*</operator><operator pos:start="45:54" pos:end="45:54">(</operator><name pos:start="45:55" pos:end="45:60">length</name> <operator pos:start="45:62" pos:end="45:62">-</operator> <literal type="number" pos:start="45:64" pos:end="45:64">1</literal><operator pos:start="45:65" pos:end="45:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><call pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:17">skip_bits</name><argument_list pos:start="47:18" pos:end="47:28">(<argument pos:start="47:19" pos:end="47:24"><expr pos:start="47:19" pos:end="47:24"><operator pos:start="47:19" pos:end="47:19">&amp;</operator><name pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:24">gb</name></name></expr></argument>, <argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:13">h</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:33">svq3_watermark_key</name></name></expr>)</condition> <block pos:start="51:36" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:98">

            <decl_stmt pos:start="53:13" pos:end="53:84"><decl pos:start="53:13" pos:end="53:83"><type pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:20">uint32_t</name></type> <name pos:start="53:22" pos:end="53:27">header</name> <init pos:start="53:29" pos:end="53:83">= <expr pos:start="53:31" pos:end="53:83"><call pos:start="53:31" pos:end="53:83"><name pos:start="53:31" pos:end="53:37">AV_RL32</name><argument_list pos:start="53:38" pos:end="53:83">(<argument pos:start="53:39" pos:end="53:82"><expr pos:start="53:39" pos:end="53:82"><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:82"><name pos:start="53:40" pos:end="53:40">s</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:44">gb</name><operator pos:start="53:45" pos:end="53:45">.</operator><name pos:start="53:46" pos:end="53:51">buffer</name><index pos:start="53:52" pos:end="53:82">[<expr pos:start="53:53" pos:end="53:81"><operator pos:start="53:53" pos:end="53:53">(</operator><call pos:start="53:54" pos:end="53:75"><name pos:start="53:54" pos:end="53:67">get_bits_count</name><argument_list pos:start="53:68" pos:end="53:75">(<argument pos:start="53:69" pos:end="53:74"><expr pos:start="53:69" pos:end="53:74"><operator pos:start="53:69" pos:end="53:69">&amp;</operator><name pos:start="53:70" pos:end="53:74"><name pos:start="53:70" pos:end="53:70">s</name><operator pos:start="53:71" pos:end="53:72">-&gt;</operator><name pos:start="53:73" pos:end="53:74">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="53:76" pos:end="53:77">&gt;&gt;</operator><literal type="number" pos:start="53:78" pos:end="53:78">3</literal><operator pos:start="53:79" pos:end="53:79">)</operator><operator pos:start="53:80" pos:end="53:80">+</operator><literal type="number" pos:start="53:81" pos:end="53:81">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:98"><expr pos:start="55:13" pos:end="55:97"><call pos:start="55:13" pos:end="55:97"><name pos:start="55:13" pos:end="55:19">AV_WL32</name><argument_list pos:start="55:20" pos:end="55:97">(<argument pos:start="55:21" pos:end="55:64"><expr pos:start="55:21" pos:end="55:64"><operator pos:start="55:21" pos:end="55:21">&amp;</operator><name pos:start="55:22" pos:end="55:64"><name pos:start="55:22" pos:end="55:22">s</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:26">gb</name><operator pos:start="55:27" pos:end="55:27">.</operator><name pos:start="55:28" pos:end="55:33">buffer</name><index pos:start="55:34" pos:end="55:64">[<expr pos:start="55:35" pos:end="55:63"><operator pos:start="55:35" pos:end="55:35">(</operator><call pos:start="55:36" pos:end="55:57"><name pos:start="55:36" pos:end="55:49">get_bits_count</name><argument_list pos:start="55:50" pos:end="55:57">(<argument pos:start="55:51" pos:end="55:56"><expr pos:start="55:51" pos:end="55:56"><operator pos:start="55:51" pos:end="55:51">&amp;</operator><name pos:start="55:52" pos:end="55:56"><name pos:start="55:52" pos:end="55:52">s</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:56">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="55:58" pos:end="55:59">&gt;&gt;</operator><literal type="number" pos:start="55:60" pos:end="55:60">3</literal><operator pos:start="55:61" pos:end="55:61">)</operator><operator pos:start="55:62" pos:end="55:62">+</operator><literal type="number" pos:start="55:63" pos:end="55:63">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:67" pos:end="55:96"><expr pos:start="55:67" pos:end="55:96"><name pos:start="55:67" pos:end="55:72">header</name> <operator pos:start="55:74" pos:end="55:74">^</operator> <name pos:start="55:76" pos:end="55:96"><name pos:start="55:76" pos:end="55:76">h</name><operator pos:start="55:77" pos:end="55:78">-&gt;</operator><name pos:start="55:79" pos:end="55:96">svq3_watermark_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:23">(<expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:18">length</name> <operator pos:start="59:20" pos:end="59:20">&gt;</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>)</condition> <block pos:start="59:25" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:73">

            <expr_stmt pos:start="61:13" pos:end="63:73"><expr pos:start="61:13" pos:end="63:72"><call pos:start="61:13" pos:end="63:72"><name pos:start="61:13" pos:end="61:18">memcpy</name><argument_list pos:start="61:19" pos:end="63:72">(<argument pos:start="61:20" pos:end="61:73"><expr pos:start="61:20" pos:end="61:73"><operator pos:start="61:20" pos:end="61:20">(</operator><name pos:start="61:21" pos:end="61:27">uint8_t</name> <operator pos:start="61:29" pos:end="61:29">*</operator><operator pos:start="61:30" pos:end="61:30">)</operator> <operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:73"><name pos:start="61:33" pos:end="61:33">s</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:37">gb</name><operator pos:start="61:38" pos:end="61:38">.</operator><name pos:start="61:39" pos:end="61:44">buffer</name><index pos:start="61:45" pos:end="61:73">[<expr pos:start="61:46" pos:end="61:72"><call pos:start="61:46" pos:end="61:67"><name pos:start="61:46" pos:end="61:59">get_bits_count</name><argument_list pos:start="61:60" pos:end="61:67">(<argument pos:start="61:61" pos:end="61:66"><expr pos:start="61:61" pos:end="61:66"><operator pos:start="61:61" pos:end="61:61">&amp;</operator><name pos:start="61:62" pos:end="61:66"><name pos:start="61:62" pos:end="61:62">s</name><operator pos:start="61:63" pos:end="61:64">-&gt;</operator><name pos:start="61:65" pos:end="61:66">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:69" pos:end="61:70">&gt;&gt;</operator> <literal type="number" pos:start="61:72" pos:end="61:72">3</literal></expr>]</index></name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:57"><expr pos:start="63:20" pos:end="63:57"><operator pos:start="63:20" pos:end="63:20">&amp;</operator><name pos:start="63:21" pos:end="63:57"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:25">gb</name><operator pos:start="63:26" pos:end="63:26">.</operator><name pos:start="63:27" pos:end="63:32">buffer</name><index pos:start="63:33" pos:end="63:57">[<expr pos:start="63:34" pos:end="63:56"><name pos:start="63:34" pos:end="63:51"><name pos:start="63:34" pos:end="63:34">s</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:38">gb</name><operator pos:start="63:39" pos:end="63:39">.</operator><name pos:start="63:40" pos:end="63:51">size_in_bits</name></name> <operator pos:start="63:53" pos:end="63:54">&gt;&gt;</operator> <literal type="number" pos:start="63:56" pos:end="63:56">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:60" pos:end="63:71"><expr pos:start="63:60" pos:end="63:71"><operator pos:start="63:60" pos:end="63:60">(</operator><name pos:start="63:61" pos:end="63:66">length</name> <operator pos:start="63:68" pos:end="63:68">-</operator> <literal type="number" pos:start="63:70" pos:end="63:70">1</literal><operator pos:start="63:71" pos:end="63:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><call pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:22">skip_bits_long</name><argument_list pos:start="67:23" pos:end="67:33">(<argument pos:start="67:24" pos:end="67:29"><expr pos:start="67:24" pos:end="67:29"><operator pos:start="67:24" pos:end="67:24">&amp;</operator><name pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:29">gb</name></name></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><literal type="number" pos:start="67:32" pos:end="67:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:66">(<expr pos:start="73:9" pos:end="73:65"><operator pos:start="73:9" pos:end="73:9">(</operator><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:39"><name pos:start="73:14" pos:end="73:31">svq3_get_ue_golomb</name><argument_list pos:start="73:32" pos:end="73:39">(<argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><operator pos:start="73:33" pos:end="73:33">&amp;</operator><name pos:start="73:34" pos:end="73:38"><name pos:start="73:34" pos:end="73:34">s</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:38">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="73:40" pos:end="73:40">)</operator> <operator pos:start="73:42" pos:end="73:43">==</operator> <name pos:start="73:45" pos:end="73:55">INVALID_VLC</name> <operator pos:start="73:57" pos:end="73:58">||</operator> <name pos:start="73:60" pos:end="73:60">i</name> <operator pos:start="73:62" pos:end="73:63">&gt;=</operator> <literal type="number" pos:start="73:65" pos:end="73:65">3</literal></expr>)</condition><block pos:start="73:67" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:18">

        <expr_stmt pos:start="75:9" pos:end="75:72"><expr pos:start="75:9" pos:end="75:71"><call pos:start="75:9" pos:end="75:71"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:71">(<argument pos:start="75:16" pos:end="75:25"><expr pos:start="75:16" pos:end="75:25"><name pos:start="75:16" pos:end="75:25"><name pos:start="75:16" pos:end="75:16">h</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:19">s</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:25">avctx</name></name></expr></argument>, <argument pos:start="75:28" pos:end="75:39"><expr pos:start="75:28" pos:end="75:39"><name pos:start="75:28" pos:end="75:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:42" pos:end="75:67"><expr pos:start="75:42" pos:end="75:67"><literal type="string" pos:start="75:42" pos:end="75:67">"illegal slice type %d \n"</literal></expr></argument>, <argument pos:start="75:70" pos:end="75:70"><expr pos:start="75:70" pos:end="75:70"><name pos:start="75:70" pos:end="75:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:18">return <expr pos:start="77:16" pos:end="77:17"><operator pos:start="77:16" pos:end="77:16">-</operator><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:43"><expr pos:start="83:5" pos:end="83:42"><name pos:start="83:5" pos:end="83:17"><name pos:start="83:5" pos:end="83:5">h</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:17">slice_type</name></name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:42"><name pos:start="83:21" pos:end="83:39">golomb_to_pict_type</name><index pos:start="83:40" pos:end="83:42">[<expr pos:start="83:41" pos:end="83:41"><name pos:start="83:41" pos:end="83:41">i</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:29">(<expr pos:start="87:9" pos:end="87:28"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:15">header</name> <operator pos:start="87:17" pos:end="87:17">&amp;</operator> <literal type="number" pos:start="87:19" pos:end="87:22">0x9F</literal><operator pos:start="87:23" pos:end="87:23">)</operator> <operator pos:start="87:25" pos:end="87:26">==</operator> <literal type="number" pos:start="87:28" pos:end="87:28">2</literal></expr>)</condition> <block pos:start="87:31" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:83">

        <expr_stmt pos:start="89:9" pos:end="89:65"><expr pos:start="89:9" pos:end="89:64"><name pos:start="89:9" pos:end="89:9">i</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <ternary pos:start="89:13" pos:end="89:64"><condition pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:28"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:22"><name pos:start="89:14" pos:end="89:14">s</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:22">mb_num</name></name> <operator pos:start="89:24" pos:end="89:24">&lt;</operator> <literal type="number" pos:start="89:26" pos:end="89:27">64</literal><operator pos:start="89:28" pos:end="89:28">)</operator></expr> ?</condition><then pos:start="89:32" pos:end="89:32"> <expr pos:start="89:32" pos:end="89:32"><literal type="number" pos:start="89:32" pos:end="89:32">6</literal></expr> </then><else pos:start="89:34" pos:end="89:64">: <expr pos:start="89:36" pos:end="89:64"><operator pos:start="89:36" pos:end="89:36">(</operator><literal type="number" pos:start="89:37" pos:end="89:39">1</literal> <operator pos:start="89:39" pos:end="89:39">+</operator> <call pos:start="89:41" pos:end="89:63"><name pos:start="89:41" pos:end="89:47">av_log2</name> <argument_list pos:start="89:49" pos:end="89:63">(<argument pos:start="89:50" pos:end="89:62"><expr pos:start="89:50" pos:end="89:62"><name pos:start="89:50" pos:end="89:58"><name pos:start="89:50" pos:end="89:50">s</name><operator pos:start="89:51" pos:end="89:52">-&gt;</operator><name pos:start="89:53" pos:end="89:58">mb_num</name></name> <operator pos:start="89:60" pos:end="89:60">-</operator> <literal type="number" pos:start="89:62" pos:end="89:62">1</literal></expr></argument>)</argument_list></call><operator pos:start="89:64" pos:end="89:64">)</operator></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:83"><expr pos:start="91:9" pos:end="91:82"><name pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">mb_skip_run</name></name> <operator pos:start="91:24" pos:end="91:24">=</operator> <call pos:start="91:26" pos:end="91:44"><name pos:start="91:26" pos:end="91:33">get_bits</name><argument_list pos:start="91:34" pos:end="91:44">(<argument pos:start="91:35" pos:end="91:40"><expr pos:start="91:35" pos:end="91:40"><operator pos:start="91:35" pos:end="91:35">&amp;</operator><name pos:start="91:36" pos:end="91:40"><name pos:start="91:36" pos:end="91:36">s</name><operator pos:start="91:37" pos:end="91:38">-&gt;</operator><name pos:start="91:39" pos:end="91:40">gb</name></name></expr></argument>, <argument pos:start="91:43" pos:end="91:43"><expr pos:start="91:43" pos:end="91:43"><name pos:start="91:43" pos:end="91:43">i</name></expr></argument>)</argument_list></call> <operator pos:start="91:46" pos:end="91:46">-</operator> <operator pos:start="91:48" pos:end="91:48">(</operator><name pos:start="91:49" pos:end="91:55"><name pos:start="91:49" pos:end="91:49">s</name><operator pos:start="91:50" pos:end="91:51">-&gt;</operator><name pos:start="91:52" pos:end="91:55">mb_x</name></name> <operator pos:start="91:57" pos:end="91:57">+</operator> <operator pos:start="91:59" pos:end="91:59">(</operator><name pos:start="91:60" pos:end="91:66"><name pos:start="91:60" pos:end="91:60">s</name><operator pos:start="91:61" pos:end="91:62">-&gt;</operator><name pos:start="91:63" pos:end="91:66">mb_y</name></name> <operator pos:start="91:68" pos:end="91:68">*</operator> <name pos:start="91:70" pos:end="91:80"><name pos:start="91:70" pos:end="91:70">s</name><operator pos:start="91:71" pos:end="91:72">-&gt;</operator><name pos:start="91:73" pos:end="91:80">mb_width</name></name><operator pos:start="91:81" pos:end="91:81">)</operator><operator pos:start="91:82" pos:end="91:82">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="99:5">else <block pos:start="93:12" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:27">

        <expr_stmt pos:start="95:9" pos:end="95:27"><expr pos:start="95:9" pos:end="95:26"><call pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:18">skip_bits1</name><argument_list pos:start="95:19" pos:end="95:26">(<argument pos:start="95:20" pos:end="95:25"><expr pos:start="95:20" pos:end="95:25"><operator pos:start="95:20" pos:end="95:20">&amp;</operator><name pos:start="95:21" pos:end="95:25"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:27"><expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:22">mb_skip_run</name></name> <operator pos:start="97:24" pos:end="97:24">=</operator> <literal type="number" pos:start="97:26" pos:end="97:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:39"><expr pos:start="103:5" pos:end="103:38"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:5">h</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:16">slice_num</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:38"><name pos:start="103:20" pos:end="103:27">get_bits</name><argument_list pos:start="103:28" pos:end="103:38">(<argument pos:start="103:29" pos:end="103:34"><expr pos:start="103:29" pos:end="103:34"><operator pos:start="103:29" pos:end="103:29">&amp;</operator><name pos:start="103:30" pos:end="103:34"><name pos:start="103:30" pos:end="103:30">s</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:34">gb</name></name></expr></argument>, <argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><literal type="number" pos:start="103:37" pos:end="103:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:36"><expr pos:start="105:5" pos:end="105:35"><name pos:start="105:5" pos:end="105:13"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:13">qscale</name></name> <operator pos:start="105:15" pos:end="105:15">=</operator> <call pos:start="105:17" pos:end="105:35"><name pos:start="105:17" pos:end="105:24">get_bits</name><argument_list pos:start="105:25" pos:end="105:35">(<argument pos:start="105:26" pos:end="105:31"><expr pos:start="105:26" pos:end="105:31"><operator pos:start="105:26" pos:end="105:26">&amp;</operator><name pos:start="105:27" pos:end="105:31"><name pos:start="105:27" pos:end="105:27">s</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:31">gb</name></name></expr></argument>, <argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><literal type="number" pos:start="105:34" pos:end="105:34">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:21">adaptive_quant</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <call pos:start="107:25" pos:end="107:41"><name pos:start="107:25" pos:end="107:33">get_bits1</name><argument_list pos:start="107:34" pos:end="107:41">(<argument pos:start="107:35" pos:end="107:40"><expr pos:start="107:35" pos:end="107:40"><operator pos:start="107:35" pos:end="107:35">&amp;</operator><name pos:start="107:36" pos:end="107:40"><name pos:start="107:36" pos:end="107:36">s</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:24">/* unknown fields */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:23"><expr pos:start="113:5" pos:end="113:22"><call pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:14">skip_bits1</name><argument_list pos:start="113:15" pos:end="113:22">(<argument pos:start="113:16" pos:end="113:21"><expr pos:start="113:16" pos:end="113:21"><operator pos:start="113:16" pos:end="113:16">&amp;</operator><name pos:start="113:17" pos:end="113:21"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:29">(<expr pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:9">h</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:28">unknown_svq3_flag</name></name></expr>)</condition> <block pos:start="117:31" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:27">

        <expr_stmt pos:start="119:9" pos:end="119:27"><expr pos:start="119:9" pos:end="119:26"><call pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:18">skip_bits1</name><argument_list pos:start="119:19" pos:end="119:26">(<argument pos:start="119:20" pos:end="119:25"><expr pos:start="119:20" pos:end="119:25"><operator pos:start="119:20" pos:end="119:20">&amp;</operator><name pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:21">s</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:23"><expr pos:start="125:5" pos:end="125:22"><call pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:14">skip_bits1</name><argument_list pos:start="125:15" pos:end="125:22">(<argument pos:start="125:16" pos:end="125:21"><expr pos:start="125:16" pos:end="125:21"><operator pos:start="125:16" pos:end="125:16">&amp;</operator><name pos:start="125:17" pos:end="125:21"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:25"><expr pos:start="127:5" pos:end="127:24"><call pos:start="127:5" pos:end="127:24"><name pos:start="127:5" pos:end="127:13">skip_bits</name><argument_list pos:start="127:14" pos:end="127:24">(<argument pos:start="127:15" pos:end="127:20"><expr pos:start="127:15" pos:end="127:20"><operator pos:start="127:15" pos:end="127:15">&amp;</operator><name pos:start="127:16" pos:end="127:20"><name pos:start="127:16" pos:end="127:16">s</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:20">gb</name></name></expr></argument>, <argument pos:start="127:23" pos:end="127:23"><expr pos:start="127:23" pos:end="127:23"><literal type="number" pos:start="127:23" pos:end="127:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="131:5" pos:end="135:5">while <condition pos:start="131:11" pos:end="131:29">(<expr pos:start="131:12" pos:end="131:28"><call pos:start="131:12" pos:end="131:28"><name pos:start="131:12" pos:end="131:20">get_bits1</name><argument_list pos:start="131:21" pos:end="131:28">(<argument pos:start="131:22" pos:end="131:27"><expr pos:start="131:22" pos:end="131:27"><operator pos:start="131:22" pos:end="131:22">&amp;</operator><name pos:start="131:23" pos:end="131:27"><name pos:start="131:23" pos:end="131:23">s</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:31" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:29">

        <expr_stmt pos:start="133:9" pos:end="133:29"><expr pos:start="133:9" pos:end="133:28"><call pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:17">skip_bits</name><argument_list pos:start="133:18" pos:end="133:28">(<argument pos:start="133:19" pos:end="133:24"><expr pos:start="133:19" pos:end="133:24"><operator pos:start="133:19" pos:end="133:19">&amp;</operator><name pos:start="133:20" pos:end="133:24"><name pos:start="133:20" pos:end="133:20">s</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:24">gb</name></name></expr></argument>, <argument pos:start="133:27" pos:end="133:27"><expr pos:start="133:27" pos:end="133:27"><literal type="number" pos:start="133:27" pos:end="133:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="139:5" pos:end="139:72">/* reset intra predictors and invalidate motion vector references */</comment>

    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:20">(<expr pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:15">mb_x</name></name> <operator pos:start="141:17" pos:end="141:17">&gt;</operator> <literal type="number" pos:start="141:19" pos:end="141:19">0</literal></expr>)</condition> <block pos:start="141:22" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:101">

        <expr_stmt pos:start="143:9" pos:end="143:93"><expr pos:start="143:9" pos:end="143:92"><call pos:start="143:9" pos:end="143:92"><name pos:start="143:9" pos:end="143:14">memset</name><argument_list pos:start="143:15" pos:end="143:92">(<argument pos:start="143:16" pos:end="143:69"><expr pos:start="143:16" pos:end="143:69"><name pos:start="143:16" pos:end="143:36"><name pos:start="143:16" pos:end="143:16">h</name><operator pos:start="143:17" pos:end="143:18">-&gt;</operator><name pos:start="143:19" pos:end="143:36">intra4x4_pred_mode</name></name><operator pos:start="143:37" pos:end="143:37">+</operator><literal type="number" pos:start="143:38" pos:end="143:38">8</literal><operator pos:start="143:39" pos:end="143:39">*</operator><name pos:start="143:40" pos:end="143:67"><name pos:start="143:40" pos:end="143:40">h</name><operator pos:start="143:41" pos:end="143:42">-&gt;</operator><name pos:start="143:43" pos:end="143:50">mb2br_xy</name><index pos:start="143:51" pos:end="143:67">[<expr pos:start="143:52" pos:end="143:60"><name pos:start="143:52" pos:end="143:56">mb_xy</name> <operator pos:start="143:58" pos:end="143:58">-</operator> <literal type="number" pos:start="143:60" pos:end="143:60">1</literal></expr>      ]</index></name><operator pos:start="143:68" pos:end="143:68">+</operator><literal type="number" pos:start="143:69" pos:end="143:69">3</literal></expr></argument>, <argument pos:start="143:72" pos:end="143:73"><expr pos:start="143:72" pos:end="143:73"><operator pos:start="143:72" pos:end="143:72">-</operator><literal type="number" pos:start="143:73" pos:end="143:73">1</literal></expr></argument>, <argument pos:start="143:76" pos:end="143:91"><expr pos:start="143:76" pos:end="143:91"><literal type="number" pos:start="143:76" pos:end="143:76">4</literal><operator pos:start="143:77" pos:end="143:77">*</operator><sizeof pos:start="143:78" pos:end="143:91">sizeof<argument_list pos:start="143:84" pos:end="143:91">(<argument pos:start="143:85" pos:end="143:90"><expr pos:start="143:85" pos:end="143:90"><name pos:start="143:85" pos:end="143:90">int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:101"><expr pos:start="145:9" pos:end="145:100"><call pos:start="145:9" pos:end="145:100"><name pos:start="145:9" pos:end="145:14">memset</name><argument_list pos:start="145:15" pos:end="145:100">(<argument pos:start="145:16" pos:end="145:67"><expr pos:start="145:16" pos:end="145:67"><name pos:start="145:16" pos:end="145:36"><name pos:start="145:16" pos:end="145:16">h</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:36">intra4x4_pred_mode</name></name><operator pos:start="145:37" pos:end="145:37">+</operator><literal type="number" pos:start="145:38" pos:end="145:38">8</literal><operator pos:start="145:39" pos:end="145:39">*</operator><name pos:start="145:40" pos:end="145:67"><name pos:start="145:40" pos:end="145:40">h</name><operator pos:start="145:41" pos:end="145:42">-&gt;</operator><name pos:start="145:43" pos:end="145:50">mb2br_xy</name><index pos:start="145:51" pos:end="145:67">[<expr pos:start="145:52" pos:end="145:66"><name pos:start="145:52" pos:end="145:56">mb_xy</name> <operator pos:start="145:58" pos:end="145:58">-</operator> <name pos:start="145:60" pos:end="145:66"><name pos:start="145:60" pos:end="145:60">s</name><operator pos:start="145:61" pos:end="145:62">-&gt;</operator><name pos:start="145:63" pos:end="145:66">mb_x</name></name></expr>]</index></name></expr></argument>  , <argument pos:start="145:72" pos:end="145:73"><expr pos:start="145:72" pos:end="145:73"><operator pos:start="145:72" pos:end="145:72">-</operator><literal type="number" pos:start="145:73" pos:end="145:73">1</literal></expr></argument>, <argument pos:start="145:76" pos:end="145:99"><expr pos:start="145:76" pos:end="145:99"><literal type="number" pos:start="145:76" pos:end="145:76">8</literal><operator pos:start="145:77" pos:end="145:77">*</operator><sizeof pos:start="145:78" pos:end="145:91">sizeof<argument_list pos:start="145:84" pos:end="145:91">(<argument pos:start="145:85" pos:end="145:90"><expr pos:start="145:85" pos:end="145:90"><name pos:start="145:85" pos:end="145:90">int8_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="145:92" pos:end="145:92">*</operator><name pos:start="145:93" pos:end="145:99"><name pos:start="145:93" pos:end="145:93">s</name><operator pos:start="145:94" pos:end="145:95">-&gt;</operator><name pos:start="145:96" pos:end="145:99">mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="149:5" pos:end="161:5"><if pos:start="149:5" pos:end="161:5">if <condition pos:start="149:8" pos:end="149:20">(<expr pos:start="149:9" pos:end="149:19"><name pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:15">mb_y</name></name> <operator pos:start="149:17" pos:end="149:17">&gt;</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition> <block pos:start="149:22" pos:end="161:5">{<block_content pos:start="151:9" pos:end="159:9">

        <expr_stmt pos:start="151:9" pos:end="151:120"><expr pos:start="151:9" pos:end="151:119"><call pos:start="151:9" pos:end="151:119"><name pos:start="151:9" pos:end="151:14">memset</name><argument_list pos:start="151:15" pos:end="151:119">(<argument pos:start="151:16" pos:end="151:72"><expr pos:start="151:16" pos:end="151:72"><name pos:start="151:16" pos:end="151:36"><name pos:start="151:16" pos:end="151:16">h</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:36">intra4x4_pred_mode</name></name><operator pos:start="151:37" pos:end="151:37">+</operator><literal type="number" pos:start="151:38" pos:end="151:38">8</literal><operator pos:start="151:39" pos:end="151:39">*</operator><name pos:start="151:40" pos:end="151:72"><name pos:start="151:40" pos:end="151:40">h</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:50">mb2br_xy</name><index pos:start="151:51" pos:end="151:72">[<expr pos:start="151:52" pos:end="151:71"><name pos:start="151:52" pos:end="151:56">mb_xy</name> <operator pos:start="151:58" pos:end="151:58">-</operator> <name pos:start="151:60" pos:end="151:71"><name pos:start="151:60" pos:end="151:60">s</name><operator pos:start="151:61" pos:end="151:62">-&gt;</operator><name pos:start="151:63" pos:end="151:71">mb_stride</name></name></expr>]</index></name></expr></argument>, <argument pos:start="151:75" pos:end="151:76"><expr pos:start="151:75" pos:end="151:76"><operator pos:start="151:75" pos:end="151:75">-</operator><literal type="number" pos:start="151:76" pos:end="151:76">1</literal></expr></argument>, <argument pos:start="151:79" pos:end="151:118"><expr pos:start="151:79" pos:end="151:118"><literal type="number" pos:start="151:79" pos:end="151:79">8</literal><operator pos:start="151:80" pos:end="151:80">*</operator><sizeof pos:start="151:81" pos:end="151:94">sizeof<argument_list pos:start="151:87" pos:end="151:94">(<argument pos:start="151:88" pos:end="151:93"><expr pos:start="151:88" pos:end="151:93"><name pos:start="151:88" pos:end="151:93">int8_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="151:95" pos:end="151:95">*</operator><operator pos:start="151:96" pos:end="151:96">(</operator><name pos:start="151:97" pos:end="151:107"><name pos:start="151:97" pos:end="151:97">s</name><operator pos:start="151:98" pos:end="151:99">-&gt;</operator><name pos:start="151:100" pos:end="151:107">mb_width</name></name> <operator pos:start="151:109" pos:end="151:109">-</operator> <name pos:start="151:111" pos:end="151:117"><name pos:start="151:111" pos:end="151:111">s</name><operator pos:start="151:112" pos:end="151:113">-&gt;</operator><name pos:start="151:114" pos:end="151:117">mb_x</name></name><operator pos:start="151:118" pos:end="151:118">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:24">(<expr pos:start="155:13" pos:end="155:23"><name pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:19">mb_x</name></name> <operator pos:start="155:21" pos:end="155:21">&gt;</operator> <literal type="number" pos:start="155:23" pos:end="155:23">0</literal></expr>)</condition> <block pos:start="155:26" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:82">

            <expr_stmt pos:start="157:13" pos:end="157:82"><expr pos:start="157:13" pos:end="157:81"><name pos:start="157:13" pos:end="157:76"><name pos:start="157:13" pos:end="157:13">h</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:33">intra4x4_pred_mode</name><index pos:start="157:34" pos:end="157:76">[<expr pos:start="157:35" pos:end="157:75"><literal type="number" pos:start="157:35" pos:end="157:35">8</literal><operator pos:start="157:36" pos:end="157:36">*</operator><name pos:start="157:37" pos:end="157:73"><name pos:start="157:37" pos:end="157:37">h</name><operator pos:start="157:38" pos:end="157:39">-&gt;</operator><name pos:start="157:40" pos:end="157:47">mb2br_xy</name><index pos:start="157:48" pos:end="157:73">[<expr pos:start="157:49" pos:end="157:72"><name pos:start="157:49" pos:end="157:53">mb_xy</name> <operator pos:start="157:55" pos:end="157:55">-</operator> <name pos:start="157:57" pos:end="157:68"><name pos:start="157:57" pos:end="157:57">s</name><operator pos:start="157:58" pos:end="157:59">-&gt;</operator><name pos:start="157:60" pos:end="157:68">mb_stride</name></name> <operator pos:start="157:70" pos:end="157:70">-</operator> <literal type="number" pos:start="157:72" pos:end="157:72">1</literal></expr>]</index></name><operator pos:start="157:74" pos:end="157:74">+</operator><literal type="number" pos:start="157:75" pos:end="157:75">3</literal></expr>]</index></name> <operator pos:start="157:78" pos:end="157:78">=</operator> <operator pos:start="157:80" pos:end="157:80">-</operator><literal type="number" pos:start="157:81" pos:end="157:81">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
