<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17159.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">connect_to_sdog</name><parameter_list pos:start="1:27" pos:end="1:62">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:44">BDRVSheepdogState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:54">Error</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier><modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:14">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:51"><expr pos:start="9:5" pos:end="9:50"><name pos:start="9:5" pos:end="9:6">fd</name> <operator pos:start="9:8" pos:end="9:8">=</operator> <call pos:start="9:10" pos:end="9:50"><name pos:start="9:10" pos:end="9:23">socket_connect</name><argument_list pos:start="9:24" pos:end="9:50">(<argument pos:start="9:25" pos:end="9:31"><expr pos:start="9:25" pos:end="9:31"><name pos:start="9:25" pos:end="9:31"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:31">addr</name></name></expr></argument>, <argument pos:start="9:34" pos:end="9:37"><expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></argument>, <argument pos:start="9:40" pos:end="9:43"><expr pos:start="9:40" pos:end="9:43"><name pos:start="9:40" pos:end="9:43">NULL</name></expr></argument>, <argument pos:start="9:46" pos:end="9:49"><expr pos:start="9:46" pos:end="9:49"><name pos:start="9:46" pos:end="9:49">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:61">(<expr pos:start="13:9" pos:end="13:60"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:15">addr</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:21">type</name></name> <operator pos:start="13:23" pos:end="13:24">==</operator> <name pos:start="13:26" pos:end="13:49">SOCKET_ADDRESS_KIND_INET</name> <operator pos:start="13:51" pos:end="13:52">&amp;&amp;</operator> <name pos:start="13:54" pos:end="13:55">fd</name> <operator pos:start="13:57" pos:end="13:58">&gt;=</operator> <literal type="number" pos:start="13:60" pos:end="13:60">0</literal></expr>)</condition> <block pos:start="13:63" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:9">

        <decl_stmt pos:start="15:9" pos:end="15:41"><decl pos:start="15:9" pos:end="15:40"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">ret</name> <init pos:start="15:17" pos:end="15:40">= <expr pos:start="15:19" pos:end="15:40"><call pos:start="15:19" pos:end="15:40"><name pos:start="15:19" pos:end="15:36">socket_set_nodelay</name><argument_list pos:start="15:37" pos:end="15:40">(<argument pos:start="15:38" pos:end="15:39"><expr pos:start="15:38" pos:end="15:39"><name pos:start="15:38" pos:end="15:39">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:20">(<expr pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:15">ret</name> <operator pos:start="17:17" pos:end="17:17">&lt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>)</condition> <block pos:start="17:22" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:48">

            <expr_stmt pos:start="19:13" pos:end="19:48"><expr pos:start="19:13" pos:end="19:47"><call pos:start="19:13" pos:end="19:47"><name pos:start="19:13" pos:end="19:24">error_report</name><argument_list pos:start="19:25" pos:end="19:47">(<argument pos:start="19:26" pos:end="19:29"><expr pos:start="19:26" pos:end="19:29"><literal type="string" pos:start="19:26" pos:end="19:29">"%s"</literal></expr></argument>, <argument pos:start="19:32" pos:end="19:46"><expr pos:start="19:32" pos:end="19:46"><call pos:start="19:32" pos:end="19:46"><name pos:start="19:32" pos:end="19:39">strerror</name><argument_list pos:start="19:40" pos:end="19:46">(<argument pos:start="19:41" pos:end="19:45"><expr pos:start="19:41" pos:end="19:45"><name pos:start="19:41" pos:end="19:45">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:13">&gt;=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:30">

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:25">qemu_set_nonblock</name><argument_list pos:start="29:26" pos:end="29:29">(<argument pos:start="29:27" pos:end="29:28"><expr pos:start="29:27" pos:end="29:28"><name pos:start="29:27" pos:end="29:28">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:5">else <block pos:start="31:12" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:10">fd</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <operator pos:start="33:14" pos:end="33:14">-</operator><name pos:start="33:15" pos:end="33:17">EIO</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="39:5" pos:end="39:14">return <expr pos:start="39:12" pos:end="39:13"><name pos:start="39:12" pos:end="39:13">fd</name></expr>;</return>

</block_content>}</block></function>
</unit>
