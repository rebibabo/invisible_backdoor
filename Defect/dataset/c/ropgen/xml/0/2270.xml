<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2270.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bdrv_qed_do_open</name><parameter_list pos:start="1:28" pos:end="3:41">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:64"><decl pos:start="1:51" pos:end="1:64"><type pos:start="1:51" pos:end="1:64"><name pos:start="1:51" pos:end="1:55">QDict</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:64">options</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:75"><decl pos:start="1:67" pos:end="1:75"><type pos:start="1:67" pos:end="1:75"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:75">flags</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:33">Error</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier><modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="267:1">{<block_content pos:start="7:5" pos:end="265:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVQEDState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">QEDHeader</name></type> <name pos:start="9:15" pos:end="9:23">le_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:21">file_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:9">bs</name></name> <operator pos:start="17:11" pos:end="17:11">=</operator> <name pos:start="17:13" pos:end="17:14">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:50"><expr pos:start="19:5" pos:end="19:49"><call pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:22">qemu_co_queue_init</name><argument_list pos:start="19:23" pos:end="19:49">(<argument pos:start="19:24" pos:end="19:48"><expr pos:start="19:24" pos:end="19:48"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:48"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:48">allocating_write_reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:65"><expr pos:start="23:5" pos:end="23:64"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:64"><name pos:start="23:11" pos:end="23:20">bdrv_pread</name><argument_list pos:start="23:21" pos:end="23:64">(<argument pos:start="23:22" pos:end="23:29"><expr pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:23">bs</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:29">file</name></name></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:44">le_header</name></expr></argument>, <argument pos:start="23:47" pos:end="23:63"><expr pos:start="23:47" pos:end="23:63"><sizeof pos:start="23:47" pos:end="23:63">sizeof<argument_list pos:start="23:53" pos:end="23:63">(<argument pos:start="23:54" pos:end="23:62"><expr pos:start="23:54" pos:end="23:62"><name pos:start="23:54" pos:end="23:62">le_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><call pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:24">qed_header_le_to_cpu</name><argument_list pos:start="31:25" pos:end="31:48">(<argument pos:start="31:26" pos:end="31:35"><expr pos:start="31:26" pos:end="31:35"><operator pos:start="31:26" pos:end="31:26">&amp;</operator><name pos:start="31:27" pos:end="31:35">le_header</name></expr></argument>, <argument pos:start="31:38" pos:end="31:47"><expr pos:start="31:38" pos:end="31:47"><operator pos:start="31:38" pos:end="31:38">&amp;</operator><name pos:start="31:39" pos:end="31:47"><name pos:start="31:39" pos:end="31:39">s</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:47">header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:37">(<expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">header</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:23">magic</name></name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <name pos:start="35:28" pos:end="35:36">QED_MAGIC</name></expr>)</condition> <block pos:start="35:39" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:23">

        <expr_stmt pos:start="37:9" pos:end="37:52"><expr pos:start="37:9" pos:end="37:51"><call pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="37:51">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">errp</name></expr></argument>, <argument pos:start="37:26" pos:end="37:50"><expr pos:start="37:26" pos:end="37:50"><literal type="string" pos:start="37:26" pos:end="37:50">"Image not in QED format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:47">(<expr pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:17">header</name><operator pos:start="43:18" pos:end="43:18">.</operator><name pos:start="43:19" pos:end="43:26">features</name></name> <operator pos:start="43:28" pos:end="43:28">&amp;</operator> <operator pos:start="43:30" pos:end="43:30">~</operator><name pos:start="43:31" pos:end="43:46">QED_FEATURE_MASK</name></expr>)</condition> <block pos:start="43:49" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:24">

        <comment type="block" pos:start="45:9" pos:end="45:49">/* image uses unsupported feature bits */</comment>

        <expr_stmt pos:start="47:9" pos:end="49:59"><expr pos:start="47:9" pos:end="49:58"><call pos:start="47:9" pos:end="49:58"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="49:58">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="47:61"><expr pos:start="47:26" pos:end="47:61"><literal type="string" pos:start="47:26" pos:end="47:54">"Unsupported QED features: %"</literal> <name pos:start="47:56" pos:end="47:61">PRIx64</name></expr></argument>,

                   <argument pos:start="49:20" pos:end="49:57"><expr pos:start="49:20" pos:end="49:57"><name pos:start="49:20" pos:end="49:37"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:28">header</name><operator pos:start="49:29" pos:end="49:29">.</operator><name pos:start="49:30" pos:end="49:37">features</name></name> <operator pos:start="49:39" pos:end="49:39">&amp;</operator> <operator pos:start="49:41" pos:end="49:41">~</operator><name pos:start="49:42" pos:end="49:57">QED_FEATURE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:24">return <expr pos:start="51:16" pos:end="51:23"><operator pos:start="51:16" pos:end="51:16">-</operator><name pos:start="51:17" pos:end="51:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:59">(<expr pos:start="55:9" pos:end="55:58"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:58"><name pos:start="55:10" pos:end="55:34">qed_is_cluster_size_valid</name><argument_list pos:start="55:35" pos:end="55:58">(<argument pos:start="55:36" pos:end="55:57"><expr pos:start="55:36" pos:end="55:57"><name pos:start="55:36" pos:end="55:57"><name pos:start="55:36" pos:end="55:36">s</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:44">header</name><operator pos:start="55:45" pos:end="55:45">.</operator><name pos:start="55:46" pos:end="55:57">cluster_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:61" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:23">

        <return pos:start="57:9" pos:end="57:23">return <expr pos:start="57:16" pos:end="57:22"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:50">/* Round down file size to the last cluster */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:13">file_size</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:44"><name pos:start="65:17" pos:end="65:30">bdrv_getlength</name><argument_list pos:start="65:31" pos:end="65:44">(<argument pos:start="65:32" pos:end="65:43"><expr pos:start="65:32" pos:end="65:43"><name pos:start="65:32" pos:end="65:43"><name pos:start="65:32" pos:end="65:33">bs</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:39">file</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:43">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17">file_size</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>)</condition> <block pos:start="67:24" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:25">

        <return pos:start="69:9" pos:end="69:25">return <expr pos:start="69:16" pos:end="69:24"><name pos:start="69:16" pos:end="69:24">file_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:54"><expr pos:start="73:5" pos:end="73:53"><name pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:16">file_size</name></name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:53"><name pos:start="73:20" pos:end="73:39">qed_start_of_cluster</name><argument_list pos:start="73:40" pos:end="73:53">(<argument pos:start="73:41" pos:end="73:41"><expr pos:start="73:41" pos:end="73:41"><name pos:start="73:41" pos:end="73:41">s</name></expr></argument>, <argument pos:start="73:44" pos:end="73:52"><expr pos:start="73:44" pos:end="73:52"><name pos:start="73:44" pos:end="73:52">file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:55">(<expr pos:start="77:9" pos:end="77:54"><operator pos:start="77:9" pos:end="77:9">!</operator><call pos:start="77:10" pos:end="77:54"><name pos:start="77:10" pos:end="77:32">qed_is_table_size_valid</name><argument_list pos:start="77:33" pos:end="77:54">(<argument pos:start="77:34" pos:end="77:53"><expr pos:start="77:34" pos:end="77:53"><name pos:start="77:34" pos:end="77:53"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:42">header</name><operator pos:start="77:43" pos:end="77:43">.</operator><name pos:start="77:44" pos:end="77:53">table_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:57" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:23">

        <return pos:start="79:9" pos:end="79:23">return <expr pos:start="79:16" pos:end="79:22"><operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="87:55">(<expr pos:start="83:9" pos:end="87:54"><operator pos:start="83:9" pos:end="83:9">!</operator><call pos:start="83:10" pos:end="87:54"><name pos:start="83:10" pos:end="83:32">qed_is_image_size_valid</name><argument_list pos:start="83:33" pos:end="87:54">(<argument pos:start="83:34" pos:end="83:53"><expr pos:start="83:34" pos:end="83:53"><name pos:start="83:34" pos:end="83:53"><name pos:start="83:34" pos:end="83:34">s</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:42">header</name><operator pos:start="83:43" pos:end="83:43">.</operator><name pos:start="83:44" pos:end="83:53">image_size</name></name></expr></argument>,

                                 <argument pos:start="85:34" pos:end="85:55"><expr pos:start="85:34" pos:end="85:55"><name pos:start="85:34" pos:end="85:55"><name pos:start="85:34" pos:end="85:34">s</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:42">header</name><operator pos:start="85:43" pos:end="85:43">.</operator><name pos:start="85:44" pos:end="85:55">cluster_size</name></name></expr></argument>,

                                 <argument pos:start="87:34" pos:end="87:53"><expr pos:start="87:34" pos:end="87:53"><name pos:start="87:34" pos:end="87:53"><name pos:start="87:34" pos:end="87:34">s</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:42">header</name><operator pos:start="87:43" pos:end="87:43">.</operator><name pos:start="87:44" pos:end="87:53">table_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:57" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:23">

        <return pos:start="89:9" pos:end="89:23">return <expr pos:start="89:16" pos:end="89:22"><operator pos:start="89:16" pos:end="89:16">-</operator><name pos:start="89:17" pos:end="89:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:62">(<expr pos:start="93:9" pos:end="93:61"><operator pos:start="93:9" pos:end="93:9">!</operator><call pos:start="93:10" pos:end="93:61"><name pos:start="93:10" pos:end="93:31">qed_check_table_offset</name><argument_list pos:start="93:32" pos:end="93:61">(<argument pos:start="93:33" pos:end="93:33"><expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">s</name></expr></argument>, <argument pos:start="93:36" pos:end="93:60"><expr pos:start="93:36" pos:end="93:60"><name pos:start="93:36" pos:end="93:60"><name pos:start="93:36" pos:end="93:36">s</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:44">header</name><operator pos:start="93:45" pos:end="93:45">.</operator><name pos:start="93:46" pos:end="93:60">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:64" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:23">

        <return pos:start="95:9" pos:end="95:23">return <expr pos:start="95:16" pos:end="95:22"><operator pos:start="95:16" pos:end="95:16">-</operator><name pos:start="95:17" pos:end="95:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:39"><expr pos:start="101:5" pos:end="103:38"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:19">table_nelems</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <operator pos:start="101:23" pos:end="101:23">(</operator><name pos:start="101:24" pos:end="101:45"><name pos:start="101:24" pos:end="101:24">s</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:32">header</name><operator pos:start="101:33" pos:end="101:33">.</operator><name pos:start="101:34" pos:end="101:45">cluster_size</name></name> <operator pos:start="101:47" pos:end="101:47">*</operator> <name pos:start="101:49" pos:end="101:68"><name pos:start="101:49" pos:end="101:49">s</name><operator pos:start="101:50" pos:end="101:51">-&gt;</operator><name pos:start="101:52" pos:end="101:57">header</name><operator pos:start="101:58" pos:end="101:58">.</operator><name pos:start="101:59" pos:end="101:68">table_size</name></name><operator pos:start="101:69" pos:end="101:69">)</operator> <operator pos:start="101:71" pos:end="101:71">/</operator>

                      <sizeof pos:start="103:23" pos:end="103:38">sizeof<argument_list pos:start="103:29" pos:end="103:38">(<argument pos:start="103:30" pos:end="103:37"><expr pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:37">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:48"><expr pos:start="105:5" pos:end="105:47"><name pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:15">l2_shift</name></name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:47"><name pos:start="105:19" pos:end="105:23">ctz32</name><argument_list pos:start="105:24" pos:end="105:47">(<argument pos:start="105:25" pos:end="105:46"><expr pos:start="105:25" pos:end="105:46"><name pos:start="105:25" pos:end="105:46"><name pos:start="105:25" pos:end="105:25">s</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:33">header</name><operator pos:start="105:34" pos:end="105:34">.</operator><name pos:start="105:35" pos:end="105:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:37"><expr pos:start="107:5" pos:end="107:36"><name pos:start="107:5" pos:end="107:14"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:14">l2_mask</name></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <name pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:18">s</name><operator pos:start="107:19" pos:end="107:20">-&gt;</operator><name pos:start="107:21" pos:end="107:32">table_nelems</name></name> <operator pos:start="107:34" pos:end="107:34">-</operator> <literal type="number" pos:start="107:36" pos:end="107:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:55"><expr pos:start="109:5" pos:end="109:54"><name pos:start="109:5" pos:end="109:15"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:15">l1_shift</name></name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:29"><name pos:start="109:19" pos:end="109:19">s</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:29">l2_shift</name></name> <operator pos:start="109:31" pos:end="109:31">+</operator> <call pos:start="109:33" pos:end="109:54"><name pos:start="109:33" pos:end="109:37">ctz32</name><argument_list pos:start="109:38" pos:end="109:54">(<argument pos:start="109:39" pos:end="109:53"><expr pos:start="109:39" pos:end="109:53"><name pos:start="109:39" pos:end="109:53"><name pos:start="109:39" pos:end="109:39">s</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:53">table_nelems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:60">/* Header size calculation must not overflow uint32_t */</comment>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:68">(<expr pos:start="115:9" pos:end="115:67"><name pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:17">header</name><operator pos:start="115:18" pos:end="115:18">.</operator><name pos:start="115:19" pos:end="115:29">header_size</name></name> <operator pos:start="115:31" pos:end="115:31">&gt;</operator> <name pos:start="115:33" pos:end="115:42">UINT32_MAX</name> <operator pos:start="115:44" pos:end="115:44">/</operator> <name pos:start="115:46" pos:end="115:67"><name pos:start="115:46" pos:end="115:46">s</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:54">header</name><operator pos:start="115:55" pos:end="115:55">.</operator><name pos:start="115:56" pos:end="115:67">cluster_size</name></name></expr>)</condition> <block pos:start="115:70" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:23">

        <return pos:start="117:9" pos:end="117:23">return <expr pos:start="117:16" pos:end="117:22"><operator pos:start="117:16" pos:end="117:16">-</operator><name pos:start="117:17" pos:end="117:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="157:5"><if pos:start="123:5" pos:end="157:5">if <condition pos:start="123:8" pos:end="123:50">(<expr pos:start="123:9" pos:end="123:49"><operator pos:start="123:9" pos:end="123:9">(</operator><name pos:start="123:10" pos:end="123:27"><name pos:start="123:10" pos:end="123:10">s</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:18">header</name><operator pos:start="123:19" pos:end="123:19">.</operator><name pos:start="123:20" pos:end="123:27">features</name></name> <operator pos:start="123:29" pos:end="123:29">&amp;</operator> <name pos:start="123:31" pos:end="123:48">QED_F_BACKING_FILE</name><operator pos:start="123:49" pos:end="123:49">)</operator></expr>)</condition> <block pos:start="123:52" pos:end="157:5">{<block_content pos:start="125:9" pos:end="155:9">

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="129:59">(<expr pos:start="125:13" pos:end="129:58"><operator pos:start="125:13" pos:end="125:13">(</operator><name pos:start="125:14" pos:end="125:21">uint64_t</name><operator pos:start="125:22" pos:end="125:22">)</operator><name pos:start="125:23" pos:end="125:55"><name pos:start="125:23" pos:end="125:23">s</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:31">header</name><operator pos:start="125:32" pos:end="125:32">.</operator><name pos:start="125:33" pos:end="125:55">backing_filename_offset</name></name> <operator pos:start="125:57" pos:end="125:57">+</operator>

            <name pos:start="127:13" pos:end="127:43"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:21">header</name><operator pos:start="127:22" pos:end="127:22">.</operator><name pos:start="127:23" pos:end="127:43">backing_filename_size</name></name> <operator pos:start="127:45" pos:end="127:45">&gt;</operator>

            <name pos:start="129:13" pos:end="129:34"><name pos:start="129:13" pos:end="129:13">s</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:21">header</name><operator pos:start="129:22" pos:end="129:22">.</operator><name pos:start="129:23" pos:end="129:34">cluster_size</name></name> <operator pos:start="129:36" pos:end="129:36">*</operator> <name pos:start="129:38" pos:end="129:58"><name pos:start="129:38" pos:end="129:38">s</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:46">header</name><operator pos:start="129:47" pos:end="129:47">.</operator><name pos:start="129:48" pos:end="129:58">header_size</name></name></expr>)</condition> <block pos:start="129:61" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:27">

            <return pos:start="131:13" pos:end="131:27">return <expr pos:start="131:20" pos:end="131:26"><operator pos:start="131:20" pos:end="131:20">-</operator><name pos:start="131:21" pos:end="131:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="141:56"><expr pos:start="137:9" pos:end="141:55"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="141:55"><name pos:start="137:15" pos:end="137:29">qed_read_string</name><argument_list pos:start="137:30" pos:end="141:55">(<argument pos:start="137:31" pos:end="137:38"><expr pos:start="137:31" pos:end="137:38"><name pos:start="137:31" pos:end="137:38"><name pos:start="137:31" pos:end="137:32">bs</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:38">file</name></name></expr></argument>, <argument pos:start="137:41" pos:end="137:73"><expr pos:start="137:41" pos:end="137:73"><name pos:start="137:41" pos:end="137:73"><name pos:start="137:41" pos:end="137:41">s</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:49">header</name><operator pos:start="137:50" pos:end="137:50">.</operator><name pos:start="137:51" pos:end="137:73">backing_filename_offset</name></name></expr></argument>,

                              <argument pos:start="139:31" pos:end="139:61"><expr pos:start="139:31" pos:end="139:61"><name pos:start="139:31" pos:end="139:61"><name pos:start="139:31" pos:end="139:31">s</name><operator pos:start="139:32" pos:end="139:33">-&gt;</operator><name pos:start="139:34" pos:end="139:39">header</name><operator pos:start="139:40" pos:end="139:40">.</operator><name pos:start="139:41" pos:end="139:61">backing_filename_size</name></name></expr></argument>, <argument pos:start="139:64" pos:end="139:79"><expr pos:start="139:64" pos:end="139:79"><name pos:start="139:64" pos:end="139:79"><name pos:start="139:64" pos:end="139:65">bs</name><operator pos:start="139:66" pos:end="139:67">-&gt;</operator><name pos:start="139:68" pos:end="139:79">backing_file</name></name></expr></argument>,

                              <argument pos:start="141:31" pos:end="141:54"><expr pos:start="141:31" pos:end="141:54"><sizeof pos:start="141:31" pos:end="141:54">sizeof<argument_list pos:start="141:37" pos:end="141:54">(<argument pos:start="141:38" pos:end="141:53"><expr pos:start="141:38" pos:end="141:53"><name pos:start="141:38" pos:end="141:53"><name pos:start="141:38" pos:end="141:39">bs</name><operator pos:start="141:40" pos:end="141:41">-&gt;</operator><name pos:start="141:42" pos:end="141:53">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:20">(<expr pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">&lt;</operator> <literal type="number" pos:start="143:19" pos:end="143:19">0</literal></expr>)</condition> <block pos:start="143:22" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:23">

            <return pos:start="145:13" pos:end="145:23">return <expr pos:start="145:20" pos:end="145:22"><name pos:start="145:20" pos:end="145:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:63">(<expr pos:start="151:13" pos:end="151:62"><name pos:start="151:13" pos:end="151:30"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:21">header</name><operator pos:start="151:22" pos:end="151:22">.</operator><name pos:start="151:23" pos:end="151:30">features</name></name> <operator pos:start="151:32" pos:end="151:32">&amp;</operator> <name pos:start="151:34" pos:end="151:62">QED_F_BACKING_FORMAT_NO_PROBE</name></expr>)</condition> <block pos:start="151:65" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:75">

            <expr_stmt pos:start="153:13" pos:end="153:75"><expr pos:start="153:13" pos:end="153:74"><call pos:start="153:13" pos:end="153:74"><name pos:start="153:13" pos:end="153:19">pstrcpy</name><argument_list pos:start="153:20" pos:end="153:74">(<argument pos:start="153:21" pos:end="153:38"><expr pos:start="153:21" pos:end="153:38"><name pos:start="153:21" pos:end="153:38"><name pos:start="153:21" pos:end="153:22">bs</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:38">backing_format</name></name></expr></argument>, <argument pos:start="153:41" pos:end="153:66"><expr pos:start="153:41" pos:end="153:66"><sizeof pos:start="153:41" pos:end="153:66">sizeof<argument_list pos:start="153:47" pos:end="153:66">(<argument pos:start="153:48" pos:end="153:65"><expr pos:start="153:48" pos:end="153:65"><name pos:start="153:48" pos:end="153:65"><name pos:start="153:48" pos:end="153:49">bs</name><operator pos:start="153:50" pos:end="153:51">-&gt;</operator><name pos:start="153:52" pos:end="153:65">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="153:69" pos:end="153:73"><expr pos:start="153:69" pos:end="153:73"><literal type="string" pos:start="153:69" pos:end="153:73">"raw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="161:5" pos:end="171:7">/* Reset unknown autoclear feature bits.  This is a backwards

     * compatibility mechanism that allows images to be opened by older

     * programs, which "knock out" unknown feature bits.  When an image is

     * opened by a newer program again it can detect that the autoclear

     * feature is no longer valid.

     */</comment>

    <if_stmt pos:start="173:5" pos:end="195:5"><if pos:start="173:5" pos:end="195:5">if <condition pos:start="173:8" pos:end="175:71">(<expr pos:start="173:9" pos:end="175:70"><operator pos:start="173:9" pos:end="173:9">(</operator><name pos:start="173:10" pos:end="173:37"><name pos:start="173:10" pos:end="173:10">s</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:18">header</name><operator pos:start="173:19" pos:end="173:19">.</operator><name pos:start="173:20" pos:end="173:37">autoclear_features</name></name> <operator pos:start="173:39" pos:end="173:39">&amp;</operator> <operator pos:start="173:41" pos:end="173:41">~</operator><name pos:start="173:42" pos:end="173:67">QED_AUTOCLEAR_FEATURE_MASK</name><operator pos:start="173:68" pos:end="173:68">)</operator> <operator pos:start="173:70" pos:end="173:71">!=</operator> <literal type="number" pos:start="173:73" pos:end="173:73">0</literal> <operator pos:start="173:75" pos:end="173:76">&amp;&amp;</operator>

        <operator pos:start="175:9" pos:end="175:9">!</operator><call pos:start="175:10" pos:end="175:40"><name pos:start="175:10" pos:end="175:26">bdrv_is_read_only</name><argument_list pos:start="175:27" pos:end="175:40">(<argument pos:start="175:28" pos:end="175:39"><expr pos:start="175:28" pos:end="175:39"><name pos:start="175:28" pos:end="175:39"><name pos:start="175:28" pos:end="175:29">bs</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:35">file</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:39">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="175:42" pos:end="175:43">&amp;&amp;</operator> <operator pos:start="175:45" pos:end="175:45">!</operator><operator pos:start="175:46" pos:end="175:46">(</operator><name pos:start="175:47" pos:end="175:51">flags</name> <operator pos:start="175:53" pos:end="175:53">&amp;</operator> <name pos:start="175:55" pos:end="175:69">BDRV_O_INACTIVE</name><operator pos:start="175:70" pos:end="175:70">)</operator></expr>)</condition> <block pos:start="175:73" pos:end="195:5">{<block_content pos:start="177:9" pos:end="193:33">

        <expr_stmt pos:start="177:9" pos:end="177:67"><expr pos:start="177:9" pos:end="177:66"><name pos:start="177:9" pos:end="177:36"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:17">header</name><operator pos:start="177:18" pos:end="177:18">.</operator><name pos:start="177:19" pos:end="177:36">autoclear_features</name></name> <operator pos:start="177:38" pos:end="177:39">&amp;=</operator> <name pos:start="177:41" pos:end="177:66">QED_AUTOCLEAR_FEATURE_MASK</name></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:39"><expr pos:start="181:9" pos:end="181:38"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="181:38"><name pos:start="181:15" pos:end="181:35">qed_write_header_sync</name><argument_list pos:start="181:36" pos:end="181:38">(<argument pos:start="181:37" pos:end="181:37"><expr pos:start="181:37" pos:end="181:37"><name pos:start="181:37" pos:end="181:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="187:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:16">(<expr pos:start="183:13" pos:end="183:15"><name pos:start="183:13" pos:end="183:15">ret</name></expr>)</condition> <block pos:start="183:18" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:23">

            <return pos:start="185:13" pos:end="185:23">return <expr pos:start="185:20" pos:end="185:22"><name pos:start="185:20" pos:end="185:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="191:9" pos:end="191:70">/* From here on only known autoclear feature bits are valid */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:33"><expr pos:start="193:9" pos:end="193:32"><call pos:start="193:9" pos:end="193:32"><name pos:start="193:9" pos:end="193:18">bdrv_flush</name><argument_list pos:start="193:19" pos:end="193:32">(<argument pos:start="193:20" pos:end="193:31"><expr pos:start="193:20" pos:end="193:31"><name pos:start="193:20" pos:end="193:31"><name pos:start="193:20" pos:end="193:21">bs</name><operator pos:start="193:22" pos:end="193:23">-&gt;</operator><name pos:start="193:24" pos:end="193:27">file</name><operator pos:start="193:28" pos:end="193:29">-&gt;</operator><name pos:start="193:30" pos:end="193:31">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:37"><expr pos:start="199:5" pos:end="199:36"><name pos:start="199:5" pos:end="199:15"><name pos:start="199:5" pos:end="199:5">s</name><operator pos:start="199:6" pos:end="199:7">-&gt;</operator><name pos:start="199:8" pos:end="199:15">l1_table</name></name> <operator pos:start="199:17" pos:end="199:17">=</operator> <call pos:start="199:19" pos:end="199:36"><name pos:start="199:19" pos:end="199:33">qed_alloc_table</name><argument_list pos:start="199:34" pos:end="199:36">(<argument pos:start="199:35" pos:end="199:35"><expr pos:start="199:35" pos:end="199:35"><name pos:start="199:35" pos:end="199:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:36"><expr pos:start="201:5" pos:end="201:35"><call pos:start="201:5" pos:end="201:35"><name pos:start="201:5" pos:end="201:21">qed_init_l2_cache</name><argument_list pos:start="201:22" pos:end="201:35">(<argument pos:start="201:23" pos:end="201:34"><expr pos:start="201:23" pos:end="201:34"><operator pos:start="201:23" pos:end="201:23">&amp;</operator><name pos:start="201:24" pos:end="201:34"><name pos:start="201:24" pos:end="201:24">s</name><operator pos:start="201:25" pos:end="201:26">-&gt;</operator><name pos:start="201:27" pos:end="201:34">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:36"><expr pos:start="205:5" pos:end="205:35"><name pos:start="205:5" pos:end="205:7">ret</name> <operator pos:start="205:9" pos:end="205:9">=</operator> <call pos:start="205:11" pos:end="205:35"><name pos:start="205:11" pos:end="205:32">qed_read_l1_table_sync</name><argument_list pos:start="205:33" pos:end="205:35">(<argument pos:start="205:34" pos:end="205:34"><expr pos:start="205:34" pos:end="205:34"><name pos:start="205:34" pos:end="205:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="211:5"><if pos:start="207:5" pos:end="211:5">if <condition pos:start="207:8" pos:end="207:12">(<expr pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">ret</name></expr>)</condition> <block pos:start="207:14" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:17">

        <goto pos:start="209:9" pos:end="209:17">goto <name pos:start="209:14" pos:end="209:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:60">/* If image was not closed cleanly, check consistency */</comment>

    <if_stmt pos:start="217:5" pos:end="247:5"><if pos:start="217:5" pos:end="247:5">if <condition pos:start="217:8" pos:end="217:75">(<expr pos:start="217:9" pos:end="217:74"><operator pos:start="217:9" pos:end="217:9">!</operator><operator pos:start="217:10" pos:end="217:10">(</operator><name pos:start="217:11" pos:end="217:15">flags</name> <operator pos:start="217:17" pos:end="217:17">&amp;</operator> <name pos:start="217:19" pos:end="217:30">BDRV_O_CHECK</name><operator pos:start="217:31" pos:end="217:31">)</operator> <operator pos:start="217:33" pos:end="217:34">&amp;&amp;</operator> <operator pos:start="217:36" pos:end="217:36">(</operator><name pos:start="217:37" pos:end="217:54"><name pos:start="217:37" pos:end="217:37">s</name><operator pos:start="217:38" pos:end="217:39">-&gt;</operator><name pos:start="217:40" pos:end="217:45">header</name><operator pos:start="217:46" pos:end="217:46">.</operator><name pos:start="217:47" pos:end="217:54">features</name></name> <operator pos:start="217:56" pos:end="217:56">&amp;</operator> <name pos:start="217:58" pos:end="217:73">QED_F_NEED_CHECK</name><operator pos:start="217:74" pos:end="217:74">)</operator></expr>)</condition> <block pos:start="217:77" pos:end="247:5">{<block_content pos:start="229:9" pos:end="245:9">

        <comment type="block" pos:start="219:9" pos:end="227:11">/* Read-only images cannot be fixed.  There is no risk of corruption

         * since write operations are not possible.  Therefore, allow

         * potentially inconsistent images to be opened read-only.  This can

         * aid data recovery from an otherwise inconsistent image.

         */</comment>

        <if_stmt pos:start="229:9" pos:end="245:9"><if pos:start="229:9" pos:end="245:9">if <condition pos:start="229:12" pos:end="231:39">(<expr pos:start="229:13" pos:end="231:38"><operator pos:start="229:13" pos:end="229:13">!</operator><call pos:start="229:14" pos:end="229:44"><name pos:start="229:14" pos:end="229:30">bdrv_is_read_only</name><argument_list pos:start="229:31" pos:end="229:44">(<argument pos:start="229:32" pos:end="229:43"><expr pos:start="229:32" pos:end="229:43"><name pos:start="229:32" pos:end="229:43"><name pos:start="229:32" pos:end="229:33">bs</name><operator pos:start="229:34" pos:end="229:35">-&gt;</operator><name pos:start="229:36" pos:end="229:39">file</name><operator pos:start="229:40" pos:end="229:41">-&gt;</operator><name pos:start="229:42" pos:end="229:43">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="229:46" pos:end="229:47">&amp;&amp;</operator>

            <operator pos:start="231:13" pos:end="231:13">!</operator><operator pos:start="231:14" pos:end="231:14">(</operator><name pos:start="231:15" pos:end="231:19">flags</name> <operator pos:start="231:21" pos:end="231:21">&amp;</operator> <name pos:start="231:23" pos:end="231:37">BDRV_O_INACTIVE</name><operator pos:start="231:38" pos:end="231:38">)</operator></expr>)</condition> <block pos:start="231:41" pos:end="245:9">{<block_content pos:start="233:13" pos:end="243:13">

            <decl_stmt pos:start="233:13" pos:end="233:41"><decl pos:start="233:13" pos:end="233:40"><type pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:27">BdrvCheckResult</name></type> <name pos:start="233:29" pos:end="233:34">result</name> <init pos:start="233:36" pos:end="233:40">= <expr pos:start="233:38" pos:end="233:40"><block pos:start="233:38" pos:end="233:40">{<expr pos:start="233:39" pos:end="233:39"><literal type="number" pos:start="233:39" pos:end="233:39">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="237:13" pos:end="237:46"><expr pos:start="237:13" pos:end="237:45"><name pos:start="237:13" pos:end="237:15">ret</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:45"><name pos:start="237:19" pos:end="237:27">qed_check</name><argument_list pos:start="237:28" pos:end="237:45">(<argument pos:start="237:29" pos:end="237:29"><expr pos:start="237:29" pos:end="237:29"><name pos:start="237:29" pos:end="237:29">s</name></expr></argument>, <argument pos:start="237:32" pos:end="237:38"><expr pos:start="237:32" pos:end="237:38"><operator pos:start="237:32" pos:end="237:32">&amp;</operator><name pos:start="237:33" pos:end="237:38">result</name></expr></argument>, <argument pos:start="237:41" pos:end="237:44"><expr pos:start="237:41" pos:end="237:44"><name pos:start="237:41" pos:end="237:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="239:13" pos:end="243:13"><if pos:start="239:13" pos:end="243:13">if <condition pos:start="239:16" pos:end="239:20">(<expr pos:start="239:17" pos:end="239:19"><name pos:start="239:17" pos:end="239:19">ret</name></expr>)</condition> <block pos:start="239:22" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:25">

                <goto pos:start="241:17" pos:end="241:25">goto <name pos:start="241:22" pos:end="241:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:62"><expr pos:start="251:5" pos:end="251:61"><call pos:start="251:5" pos:end="251:61"><name pos:start="251:5" pos:end="251:31">bdrv_qed_attach_aio_context</name><argument_list pos:start="251:32" pos:end="251:61">(<argument pos:start="251:33" pos:end="251:34"><expr pos:start="251:33" pos:end="251:34"><name pos:start="251:33" pos:end="251:34">bs</name></expr></argument>, <argument pos:start="251:37" pos:end="251:60"><expr pos:start="251:37" pos:end="251:60"><call pos:start="251:37" pos:end="251:60"><name pos:start="251:37" pos:end="251:56">bdrv_get_aio_context</name><argument_list pos:start="251:57" pos:end="251:60">(<argument pos:start="251:58" pos:end="251:59"><expr pos:start="251:58" pos:end="251:59"><name pos:start="251:58" pos:end="251:59">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="255:1" pos:end="255:4"><name pos:start="255:1" pos:end="255:3">out</name>:</label>

    <if_stmt pos:start="257:5" pos:end="263:5"><if pos:start="257:5" pos:end="263:5">if <condition pos:start="257:8" pos:end="257:12">(<expr pos:start="257:9" pos:end="257:11"><name pos:start="257:9" pos:end="257:11">ret</name></expr>)</condition> <block pos:start="257:14" pos:end="263:5">{<block_content pos:start="259:9" pos:end="261:32">

        <expr_stmt pos:start="259:9" pos:end="259:40"><expr pos:start="259:9" pos:end="259:39"><call pos:start="259:9" pos:end="259:39"><name pos:start="259:9" pos:end="259:25">qed_free_l2_cache</name><argument_list pos:start="259:26" pos:end="259:39">(<argument pos:start="259:27" pos:end="259:38"><expr pos:start="259:27" pos:end="259:38"><operator pos:start="259:27" pos:end="259:27">&amp;</operator><name pos:start="259:28" pos:end="259:38"><name pos:start="259:28" pos:end="259:28">s</name><operator pos:start="259:29" pos:end="259:30">-&gt;</operator><name pos:start="259:31" pos:end="259:38">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:32"><expr pos:start="261:9" pos:end="261:31"><call pos:start="261:9" pos:end="261:31"><name pos:start="261:9" pos:end="261:18">qemu_vfree</name><argument_list pos:start="261:19" pos:end="261:31">(<argument pos:start="261:20" pos:end="261:30"><expr pos:start="261:20" pos:end="261:30"><name pos:start="261:20" pos:end="261:30"><name pos:start="261:20" pos:end="261:20">s</name><operator pos:start="261:21" pos:end="261:22">-&gt;</operator><name pos:start="261:23" pos:end="261:30">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="265:5" pos:end="265:15">return <expr pos:start="265:12" pos:end="265:14"><name pos:start="265:12" pos:end="265:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
