<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/312.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">icount_warp_rt</name><parameter_list pos:start="1:27" pos:end="1:32">(<parameter pos:start="1:28" pos:end="1:31"><decl pos:start="1:28" pos:end="1:31"><type pos:start="1:28" pos:end="1:31"><name pos:start="1:28" pos:end="1:31">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type> <name pos:start="5:14" pos:end="5:16">seq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:22">warp_start</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="15:7">/* The icount_warp_timer is rescheduled soon after vm_clock_warp_start

     * changes from -1 to another value, so the race here is okay.

     */</comment>

    <do pos:start="17:5" pos:end="23:70">do <block pos:start="17:8" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:41">

        <expr_stmt pos:start="19:9" pos:end="19:65"><expr pos:start="19:9" pos:end="19:64"><name pos:start="19:9" pos:end="19:11">seq</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:64"><name pos:start="19:15" pos:end="19:32">seqlock_read_begin</name><argument_list pos:start="19:33" pos:end="19:64">(<argument pos:start="19:34" pos:end="19:63"><expr pos:start="19:34" pos:end="19:63"><operator pos:start="19:34" pos:end="19:34">&amp;</operator><name pos:start="19:35" pos:end="19:63"><name pos:start="19:35" pos:end="19:46">timers_state</name><operator pos:start="19:47" pos:end="19:47">.</operator><name pos:start="19:48" pos:end="19:63">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:18">warp_start</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:40">vm_clock_warp_start</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="23:13" pos:end="23:69">(<expr pos:start="23:14" pos:end="23:68"><call pos:start="23:14" pos:end="23:68"><name pos:start="23:14" pos:end="23:31">seqlock_read_retry</name><argument_list pos:start="23:32" pos:end="23:68">(<argument pos:start="23:33" pos:end="23:62"><expr pos:start="23:33" pos:end="23:62"><operator pos:start="23:33" pos:end="23:33">&amp;</operator><name pos:start="23:34" pos:end="23:62"><name pos:start="23:34" pos:end="23:45">timers_state</name><operator pos:start="23:46" pos:end="23:46">.</operator><name pos:start="23:47" pos:end="23:62">vm_clock_seqlock</name></name></expr></argument>, <argument pos:start="23:65" pos:end="23:67"><expr pos:start="23:65" pos:end="23:67"><name pos:start="23:65" pos:end="23:67">seq</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:18">warp_start</name> <operator pos:start="27:20" pos:end="27:21">==</operator> <operator pos:start="27:23" pos:end="27:23">-</operator><literal type="number" pos:start="27:24" pos:end="27:24">1</literal></expr>)</condition> <block pos:start="27:27" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:56"><expr pos:start="35:5" pos:end="35:55"><call pos:start="35:5" pos:end="35:55"><name pos:start="35:5" pos:end="35:23">seqlock_write_begin</name><argument_list pos:start="35:24" pos:end="35:55">(<argument pos:start="35:25" pos:end="35:54"><expr pos:start="35:25" pos:end="35:54"><operator pos:start="35:25" pos:end="35:25">&amp;</operator><name pos:start="35:26" pos:end="35:54"><name pos:start="35:26" pos:end="35:37">timers_state</name><operator pos:start="35:38" pos:end="35:38">.</operator><name pos:start="35:39" pos:end="35:54">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="69:5"><if pos:start="37:5" pos:end="69:5">if <condition pos:start="37:8" pos:end="37:30">(<expr pos:start="37:9" pos:end="37:29"><call pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:27">runstate_is_running</name><argument_list pos:start="37:28" pos:end="37:29">()</argument_list></call></expr>)</condition> <block pos:start="37:32" pos:end="69:5">{<block_content pos:start="39:9" pos:end="67:52">

        <decl_stmt pos:start="39:9" pos:end="41:61"><decl pos:start="39:9" pos:end="41:60"><type pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:15">int64_t</name></type> <name pos:start="39:17" pos:end="39:21">clock</name> <init pos:start="39:23" pos:end="41:60">= <expr pos:start="39:25" pos:end="41:60"><call pos:start="39:25" pos:end="41:60"><name pos:start="39:25" pos:end="39:36">REPLAY_CLOCK</name><argument_list pos:start="39:37" pos:end="41:60">(<argument pos:start="39:38" pos:end="39:60"><expr pos:start="39:38" pos:end="39:60"><name pos:start="39:38" pos:end="39:60">REPLAY_CLOCK_VIRTUAL_RT</name></expr></argument>,

                                     <argument pos:start="41:38" pos:end="41:59"><expr pos:start="41:38" pos:end="41:59"><call pos:start="41:38" pos:end="41:59"><name pos:start="41:38" pos:end="41:57">cpu_get_clock_locked</name><argument_list pos:start="41:58" pos:end="41:59">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:27"><decl pos:start="43:9" pos:end="43:26"><type pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:15">int64_t</name></type> <name pos:start="43:17" pos:end="43:26">warp_delta</name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:49"><expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:18">warp_delta</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:26">clock</name> <operator pos:start="47:28" pos:end="47:28">-</operator> <name pos:start="47:30" pos:end="47:48">vm_clock_warp_start</name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="65:9">if <condition pos:start="49:12" pos:end="49:28">(<expr pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:22">use_icount</name> <operator pos:start="49:24" pos:end="49:25">==</operator> <literal type="number" pos:start="49:27" pos:end="49:27">2</literal></expr>)</condition> <block pos:start="49:30" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:48">

            <comment type="block" pos:start="51:13" pos:end="57:15">/*

             * In adaptive mode, do not let QEMU_CLOCK_VIRTUAL run too

             * far ahead of real time.

             */</comment>

            <decl_stmt pos:start="59:13" pos:end="59:57"><decl pos:start="59:13" pos:end="59:56"><type pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:19">int64_t</name></type> <name pos:start="59:21" pos:end="59:30">cur_icount</name> <init pos:start="59:32" pos:end="59:56">= <expr pos:start="59:34" pos:end="59:56"><call pos:start="59:34" pos:end="59:56"><name pos:start="59:34" pos:end="59:54">cpu_get_icount_locked</name><argument_list pos:start="59:55" pos:end="59:56">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="61:47"><decl pos:start="61:13" pos:end="61:46"><type pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">int64_t</name></type> <name pos:start="61:21" pos:end="61:25">delta</name> <init pos:start="61:27" pos:end="61:46">= <expr pos:start="61:29" pos:end="61:46"><name pos:start="61:29" pos:end="61:33">clock</name> <operator pos:start="61:35" pos:end="61:35">-</operator> <name pos:start="61:37" pos:end="61:46">cur_icount</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:48"><expr pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:22">warp_delta</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="63:47"><name pos:start="63:26" pos:end="63:28">MIN</name><argument_list pos:start="63:29" pos:end="63:47">(<argument pos:start="63:30" pos:end="63:39"><expr pos:start="63:30" pos:end="63:39"><name pos:start="63:30" pos:end="63:39">warp_delta</name></expr></argument>, <argument pos:start="63:42" pos:end="63:46"><expr pos:start="63:42" pos:end="63:46"><name pos:start="63:42" pos:end="63:46">delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:52"><expr pos:start="67:9" pos:end="67:51"><name pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:20">timers_state</name><operator pos:start="67:21" pos:end="67:21">.</operator><name pos:start="67:22" pos:end="67:37">qemu_icount_bias</name></name> <operator pos:start="67:39" pos:end="67:40">+=</operator> <name pos:start="67:42" pos:end="67:51">warp_delta</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:23">vm_clock_warp_start</name> <operator pos:start="71:25" pos:end="71:25">=</operator> <operator pos:start="71:27" pos:end="71:27">-</operator><literal type="number" pos:start="71:28" pos:end="71:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:54"><expr pos:start="73:5" pos:end="73:53"><call pos:start="73:5" pos:end="73:53"><name pos:start="73:5" pos:end="73:21">seqlock_write_end</name><argument_list pos:start="73:22" pos:end="73:53">(<argument pos:start="73:23" pos:end="73:52"><expr pos:start="73:23" pos:end="73:52"><operator pos:start="73:23" pos:end="73:23">&amp;</operator><name pos:start="73:24" pos:end="73:52"><name pos:start="73:24" pos:end="73:35">timers_state</name><operator pos:start="73:36" pos:end="73:36">.</operator><name pos:start="73:37" pos:end="73:52">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:47">(<expr pos:start="77:9" pos:end="77:46"><call pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:26">qemu_clock_expired</name><argument_list pos:start="77:27" pos:end="77:46">(<argument pos:start="77:28" pos:end="77:45"><expr pos:start="77:28" pos:end="77:45"><name pos:start="77:28" pos:end="77:45">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:49" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:46">

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><call pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:25">qemu_clock_notify</name><argument_list pos:start="79:26" pos:end="79:45">(<argument pos:start="79:27" pos:end="79:44"><expr pos:start="79:27" pos:end="79:44"><name pos:start="79:27" pos:end="79:44">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
