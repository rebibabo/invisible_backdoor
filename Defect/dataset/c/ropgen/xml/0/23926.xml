<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23926.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">vfio_listener_region_del</name><parameter_list pos:start="1:37" pos:end="3:66">(<parameter pos:start="1:38" pos:end="1:61"><decl pos:start="1:38" pos:end="1:61"><type pos:start="1:38" pos:end="1:61"><name pos:start="1:38" pos:end="1:51">MemoryListener</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">listener</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:65"><decl pos:start="3:38" pos:end="3:65"><type pos:start="3:38" pos:end="3:65"><name pos:start="3:38" pos:end="3:56">MemoryRegionSection</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">section</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="153:5">

    <decl_stmt pos:start="7:5" pos:end="7:79"><decl pos:start="7:5" pos:end="7:78"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOContainer</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">container</name> <init pos:start="7:30" pos:end="7:78">= <expr pos:start="7:32" pos:end="7:78"><call pos:start="7:32" pos:end="7:78"><name pos:start="7:32" pos:end="7:43">container_of</name><argument_list pos:start="7:44" pos:end="7:78">(<argument pos:start="7:45" pos:end="7:52"><expr pos:start="7:45" pos:end="7:52"><name pos:start="7:45" pos:end="7:52">listener</name></expr></argument>, <argument pos:start="7:55" pos:end="7:67"><expr pos:start="7:55" pos:end="7:67"><name pos:start="7:55" pos:end="7:67">VFIOContainer</name></expr></argument>, <argument pos:start="7:70" pos:end="7:77"><expr pos:start="7:70" pos:end="7:77"><name pos:start="7:70" pos:end="7:77">listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:15">iova</name></decl>, <decl pos:start="9:18" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:18" pos:end="9:20">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">Int128</name></type> <name pos:start="11:12" pos:end="11:16">llend</name></decl>, <decl pos:start="11:19" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:19" pos:end="11:24">llsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:47">(<expr pos:start="17:9" pos:end="17:46"><call pos:start="17:9" pos:end="17:46"><name pos:start="17:9" pos:end="17:37">vfio_listener_skipped_section</name><argument_list pos:start="17:38" pos:end="17:46">(<argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><name pos:start="17:39" pos:end="17:45">section</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:49" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:15">

        <expr_stmt pos:start="19:9" pos:end="25:71"><expr pos:start="19:9" pos:end="25:70"><call pos:start="19:9" pos:end="25:70"><name pos:start="19:9" pos:end="19:43">trace_vfio_listener_region_del_skip</name><argument_list pos:start="19:44" pos:end="25:70">(

                <argument pos:start="21:17" pos:end="21:52"><expr pos:start="21:17" pos:end="21:52"><name pos:start="21:17" pos:end="21:52"><name pos:start="21:17" pos:end="21:23">section</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:52">offset_within_address_space</name></name></expr></argument>,

                <argument pos:start="23:17" pos:end="25:69"><expr pos:start="23:17" pos:end="25:69"><name pos:start="23:17" pos:end="23:52"><name pos:start="23:17" pos:end="23:23">section</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:52">offset_within_address_space</name></name> <operator pos:start="23:54" pos:end="23:54">+</operator>

                <call pos:start="25:17" pos:end="25:69"><name pos:start="25:17" pos:end="25:28">int128_get64</name><argument_list pos:start="25:29" pos:end="25:69">(<argument pos:start="25:30" pos:end="25:68"><expr pos:start="25:30" pos:end="25:68"><call pos:start="25:30" pos:end="25:68"><name pos:start="25:30" pos:end="25:39">int128_sub</name><argument_list pos:start="25:40" pos:end="25:68">(<argument pos:start="25:41" pos:end="25:53"><expr pos:start="25:41" pos:end="25:53"><name pos:start="25:41" pos:end="25:53"><name pos:start="25:41" pos:end="25:47">section</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:53">size</name></name></expr></argument>, <argument pos:start="25:56" pos:end="25:67"><expr pos:start="25:56" pos:end="25:67"><call pos:start="25:56" pos:end="25:67"><name pos:start="25:56" pos:end="25:65">int128_one</name><argument_list pos:start="25:66" pos:end="25:67">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="35:70">(<expr pos:start="33:9" pos:end="35:69"><call pos:start="33:9" pos:end="35:69"><name pos:start="33:9" pos:end="33:16">unlikely</name><argument_list pos:start="33:17" pos:end="35:69">(<argument pos:start="33:18" pos:end="35:68"><expr pos:start="33:18" pos:end="35:68"><operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:54"><name pos:start="33:19" pos:end="33:25">section</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:54">offset_within_address_space</name></name> <operator pos:start="33:56" pos:end="33:56">&amp;</operator> <operator pos:start="33:58" pos:end="33:58">~</operator><name pos:start="33:59" pos:end="33:74">TARGET_PAGE_MASK</name><operator pos:start="33:75" pos:end="33:75">)</operator> <operator pos:start="33:77" pos:end="33:78">!=</operator>

                 <operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:47"><name pos:start="35:19" pos:end="35:25">section</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:47">offset_within_region</name></name> <operator pos:start="35:49" pos:end="35:49">&amp;</operator> <operator pos:start="35:51" pos:end="35:51">~</operator><name pos:start="35:52" pos:end="35:67">TARGET_PAGE_MASK</name><operator pos:start="35:68" pos:end="35:68">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:72" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:63"><expr pos:start="37:9" pos:end="37:62"><call pos:start="37:9" pos:end="37:62"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:62">(<argument pos:start="37:22" pos:end="37:51"><expr pos:start="37:22" pos:end="37:51"><literal type="string" pos:start="37:22" pos:end="37:51">"%s received unaligned region"</literal></expr></argument>, <argument pos:start="37:54" pos:end="37:61"><expr pos:start="37:54" pos:end="37:61"><name pos:start="37:54" pos:end="37:61">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="85:5"><if pos:start="45:5" pos:end="85:5">if <condition pos:start="45:8" pos:end="45:44">(<expr pos:start="45:9" pos:end="45:43"><call pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:30">memory_region_is_iommu</name><argument_list pos:start="45:31" pos:end="45:43">(<argument pos:start="45:32" pos:end="45:42"><expr pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:38">section</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:42">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:46" pos:end="85:5">{<block_content pos:start="47:9" pos:end="67:9">

        <decl_stmt pos:start="47:9" pos:end="47:31"><decl pos:start="47:9" pos:end="47:30"><type pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:22">VFIOGuestIOMMU</name> <modifier pos:start="47:24" pos:end="47:24">*</modifier></type><name pos:start="47:25" pos:end="47:30">giommu</name></decl>;</decl_stmt>



        <macro pos:start="51:9" pos:end="51:67"><name pos:start="51:9" pos:end="51:21">QLIST_FOREACH</name><argument_list pos:start="51:22" pos:end="51:67">(<argument pos:start="51:23" pos:end="51:28">giommu</argument>, <argument pos:start="51:31" pos:end="51:53">&amp;container-&gt;giommu_list</argument>, <argument pos:start="51:56" pos:end="51:66">giommu_next</argument>)</argument_list></macro> <block pos:start="51:69" pos:end="67:9">{<block_content pos:start="53:13" pos:end="65:13">

            <if_stmt pos:start="53:13" pos:end="65:13"><if pos:start="53:13" pos:end="65:13">if <condition pos:start="53:16" pos:end="53:45">(<expr pos:start="53:17" pos:end="53:44"><name pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:22">giommu</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:29">iommu</name></name> <operator pos:start="53:31" pos:end="53:32">==</operator> <name pos:start="53:34" pos:end="53:44"><name pos:start="53:34" pos:end="53:40">section</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:44">mr</name></name></expr>)</condition> <block pos:start="53:47" pos:end="65:13">{<block_content pos:start="55:17" pos:end="63:22">

                <expr_stmt pos:start="55:17" pos:end="57:68"><expr pos:start="55:17" pos:end="57:67"><call pos:start="55:17" pos:end="57:67"><name pos:start="55:17" pos:end="55:55">memory_region_unregister_iommu_notifier</name><argument_list pos:start="55:56" pos:end="57:67">(<argument pos:start="55:57" pos:end="55:69"><expr pos:start="55:57" pos:end="55:69"><name pos:start="55:57" pos:end="55:69"><name pos:start="55:57" pos:end="55:62">giommu</name><operator pos:start="55:63" pos:end="55:64">-&gt;</operator><name pos:start="55:65" pos:end="55:69">iommu</name></name></expr></argument>,

                                                        <argument pos:start="57:57" pos:end="57:66"><expr pos:start="57:57" pos:end="57:66"><operator pos:start="57:57" pos:end="57:57">&amp;</operator><name pos:start="57:58" pos:end="57:66"><name pos:start="57:58" pos:end="57:63">giommu</name><operator pos:start="57:64" pos:end="57:65">-&gt;</operator><name pos:start="57:66" pos:end="57:66">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:50"><expr pos:start="59:17" pos:end="59:49"><call pos:start="59:17" pos:end="59:49"><name pos:start="59:17" pos:end="59:28">QLIST_REMOVE</name><argument_list pos:start="59:29" pos:end="59:49">(<argument pos:start="59:30" pos:end="59:35"><expr pos:start="59:30" pos:end="59:35"><name pos:start="59:30" pos:end="59:35">giommu</name></expr></argument>, <argument pos:start="59:38" pos:end="59:48"><expr pos:start="59:38" pos:end="59:48"><name pos:start="59:38" pos:end="59:48">giommu_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:31"><expr pos:start="61:17" pos:end="61:30"><call pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:22">g_free</name><argument_list pos:start="61:23" pos:end="61:30">(<argument pos:start="61:24" pos:end="61:29"><expr pos:start="61:24" pos:end="61:29"><name pos:start="61:24" pos:end="61:29">giommu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="63:17" pos:end="63:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <comment type="block" pos:start="71:9" pos:end="83:11">/*

         * FIXME: We assume the one big unmap below is adequate to

         * remove any individual page mappings in the IOMMU which

         * might have been copied into VFIO. This works for a page table

         * based IOMMU where a big unmap flattens a large range of IO-PTEs.

         * That may not be true for all IOMMU types.

         */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:67"><expr pos:start="89:5" pos:end="89:66"><name pos:start="89:5" pos:end="89:8">iova</name> <operator pos:start="89:10" pos:end="89:10">=</operator> <call pos:start="89:12" pos:end="89:66"><name pos:start="89:12" pos:end="89:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="89:29" pos:end="89:66">(<argument pos:start="89:30" pos:end="89:65"><expr pos:start="89:30" pos:end="89:65"><name pos:start="89:30" pos:end="89:65"><name pos:start="89:30" pos:end="89:36">section</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:65">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:64"><expr pos:start="91:5" pos:end="91:63"><name pos:start="91:5" pos:end="91:9">llend</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:63"><name pos:start="91:13" pos:end="91:25">int128_make64</name><argument_list pos:start="91:26" pos:end="91:63">(<argument pos:start="91:27" pos:end="91:62"><expr pos:start="91:27" pos:end="91:62"><name pos:start="91:27" pos:end="91:62"><name pos:start="91:27" pos:end="91:33">section</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:62">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:45"><expr pos:start="93:5" pos:end="93:44"><name pos:start="93:5" pos:end="93:9">llend</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <call pos:start="93:13" pos:end="93:44"><name pos:start="93:13" pos:end="93:22">int128_add</name><argument_list pos:start="93:23" pos:end="93:44">(<argument pos:start="93:24" pos:end="93:28"><expr pos:start="93:24" pos:end="93:28"><name pos:start="93:24" pos:end="93:28">llend</name></expr></argument>, <argument pos:start="93:31" pos:end="93:43"><expr pos:start="93:31" pos:end="93:43"><name pos:start="93:31" pos:end="93:43"><name pos:start="93:31" pos:end="93:37">section</name><operator pos:start="93:38" pos:end="93:39">-&gt;</operator><name pos:start="93:40" pos:end="93:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:63"><expr pos:start="95:5" pos:end="95:62"><name pos:start="95:5" pos:end="95:9">llend</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <call pos:start="95:13" pos:end="95:62"><name pos:start="95:13" pos:end="95:22">int128_and</name><argument_list pos:start="95:23" pos:end="95:62">(<argument pos:start="95:24" pos:end="95:28"><expr pos:start="95:24" pos:end="95:28"><name pos:start="95:24" pos:end="95:28">llend</name></expr></argument>, <argument pos:start="95:31" pos:end="95:61"><expr pos:start="95:31" pos:end="95:61"><call pos:start="95:31" pos:end="95:61"><name pos:start="95:31" pos:end="95:43">int128_exts64</name><argument_list pos:start="95:44" pos:end="95:61">(<argument pos:start="95:45" pos:end="95:60"><expr pos:start="95:45" pos:end="95:60"><name pos:start="95:45" pos:end="95:60">TARGET_PAGE_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:46">(<expr pos:start="99:9" pos:end="99:45"><call pos:start="99:9" pos:end="99:45"><name pos:start="99:9" pos:end="99:17">int128_ge</name><argument_list pos:start="99:18" pos:end="99:45">(<argument pos:start="99:19" pos:end="99:37"><expr pos:start="99:19" pos:end="99:37"><call pos:start="99:19" pos:end="99:37"><name pos:start="99:19" pos:end="99:31">int128_make64</name><argument_list pos:start="99:32" pos:end="99:37">(<argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">iova</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:40" pos:end="99:44"><expr pos:start="99:40" pos:end="99:44"><name pos:start="99:40" pos:end="99:44">llend</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:48" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:15">

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:56"><expr pos:start="105:5" pos:end="105:55"><name pos:start="105:5" pos:end="105:7">end</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:55"><name pos:start="105:11" pos:end="105:22">int128_get64</name><argument_list pos:start="105:23" pos:end="105:55">(<argument pos:start="105:24" pos:end="105:54"><expr pos:start="105:24" pos:end="105:54"><call pos:start="105:24" pos:end="105:54"><name pos:start="105:24" pos:end="105:33">int128_sub</name><argument_list pos:start="105:34" pos:end="105:54">(<argument pos:start="105:35" pos:end="105:39"><expr pos:start="105:35" pos:end="105:39"><name pos:start="105:35" pos:end="105:39">llend</name></expr></argument>, <argument pos:start="105:42" pos:end="105:53"><expr pos:start="105:42" pos:end="105:53"><call pos:start="105:42" pos:end="105:53"><name pos:start="105:42" pos:end="105:51">int128_one</name><argument_list pos:start="105:52" pos:end="105:53">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:52"><expr pos:start="109:5" pos:end="109:51"><name pos:start="109:5" pos:end="109:10">llsize</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <call pos:start="109:14" pos:end="109:51"><name pos:start="109:14" pos:end="109:23">int128_sub</name><argument_list pos:start="109:24" pos:end="109:51">(<argument pos:start="109:25" pos:end="109:29"><expr pos:start="109:25" pos:end="109:29"><name pos:start="109:25" pos:end="109:29">llend</name></expr></argument>, <argument pos:start="109:32" pos:end="109:50"><expr pos:start="109:32" pos:end="109:50"><call pos:start="109:32" pos:end="109:50"><name pos:start="109:32" pos:end="109:44">int128_make64</name><argument_list pos:start="109:45" pos:end="109:50">(<argument pos:start="109:46" pos:end="109:49"><expr pos:start="109:46" pos:end="109:49"><name pos:start="109:46" pos:end="109:49">iova</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:46"><expr pos:start="113:5" pos:end="113:45"><call pos:start="113:5" pos:end="113:45"><name pos:start="113:5" pos:end="113:34">trace_vfio_listener_region_del</name><argument_list pos:start="113:35" pos:end="113:45">(<argument pos:start="113:36" pos:end="113:39"><expr pos:start="113:36" pos:end="113:39"><name pos:start="113:36" pos:end="113:39">iova</name></expr></argument>, <argument pos:start="113:42" pos:end="113:44"><expr pos:start="113:42" pos:end="113:44"><name pos:start="113:42" pos:end="113:44">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:64"><expr pos:start="117:5" pos:end="117:63"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:63"><name pos:start="117:11" pos:end="117:24">vfio_dma_unmap</name><argument_list pos:start="117:25" pos:end="117:63">(<argument pos:start="117:26" pos:end="117:34"><expr pos:start="117:26" pos:end="117:34"><name pos:start="117:26" pos:end="117:34">container</name></expr></argument>, <argument pos:start="117:37" pos:end="117:40"><expr pos:start="117:37" pos:end="117:40"><name pos:start="117:37" pos:end="117:40">iova</name></expr></argument>, <argument pos:start="117:43" pos:end="117:62"><expr pos:start="117:43" pos:end="117:62"><call pos:start="117:43" pos:end="117:62"><name pos:start="117:43" pos:end="117:54">int128_get64</name><argument_list pos:start="117:55" pos:end="117:62">(<argument pos:start="117:56" pos:end="117:61"><expr pos:start="117:56" pos:end="117:61"><name pos:start="117:56" pos:end="117:61">llsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:37"><expr pos:start="119:5" pos:end="119:36"><call pos:start="119:5" pos:end="119:36"><name pos:start="119:5" pos:end="119:23">memory_region_unref</name><argument_list pos:start="119:24" pos:end="119:36">(<argument pos:start="119:25" pos:end="119:35"><expr pos:start="119:25" pos:end="119:35"><name pos:start="119:25" pos:end="119:35"><name pos:start="119:25" pos:end="119:31">section</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:35">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="129:5"><if pos:start="121:5" pos:end="129:5">if <condition pos:start="121:8" pos:end="121:12">(<expr pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">ret</name></expr>)</condition> <block pos:start="121:14" pos:end="129:5">{<block_content pos:start="123:9" pos:end="127:65">

        <expr_stmt pos:start="123:9" pos:end="127:65"><expr pos:start="123:9" pos:end="127:64"><call pos:start="123:9" pos:end="127:64"><name pos:start="123:9" pos:end="123:20">error_report</name><argument_list pos:start="123:21" pos:end="127:64">(<argument pos:start="123:22" pos:end="125:50"><expr pos:start="123:22" pos:end="125:50"><literal type="string" pos:start="123:22" pos:end="123:45">"vfio_dma_unmap(%p, 0x%"</literal><name pos:start="123:46" pos:end="123:56">HWADDR_PRIx</name><literal type="string" pos:start="123:57" pos:end="123:60">", "</literal>

                     <literal type="string" pos:start="125:22" pos:end="125:26">"0x%"</literal><name pos:start="125:27" pos:end="125:37">HWADDR_PRIx</name><literal type="string" pos:start="125:38" pos:end="125:50">") = %d (%m)"</literal></expr></argument>,

                     <argument pos:start="127:22" pos:end="127:30"><expr pos:start="127:22" pos:end="127:30"><name pos:start="127:22" pos:end="127:30">container</name></expr></argument>, <argument pos:start="127:33" pos:end="127:36"><expr pos:start="127:33" pos:end="127:36"><name pos:start="127:33" pos:end="127:36">iova</name></expr></argument>, <argument pos:start="127:39" pos:end="127:58"><expr pos:start="127:39" pos:end="127:58"><call pos:start="127:39" pos:end="127:58"><name pos:start="127:39" pos:end="127:50">int128_get64</name><argument_list pos:start="127:51" pos:end="127:58">(<argument pos:start="127:52" pos:end="127:57"><expr pos:start="127:52" pos:end="127:57"><name pos:start="127:52" pos:end="127:57">llsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:61" pos:end="127:63"><expr pos:start="127:61" pos:end="127:63"><name pos:start="127:61" pos:end="127:63">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="153:5"><if pos:start="133:5" pos:end="153:5">if <condition pos:start="133:8" pos:end="133:57">(<expr pos:start="133:9" pos:end="133:56"><name pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:17">container</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:29">iommu_type</name></name> <operator pos:start="133:31" pos:end="133:32">==</operator> <name pos:start="133:34" pos:end="133:56">VFIO_SPAPR_TCE_v2_IOMMU</name></expr>)</condition> <block pos:start="133:59" pos:end="153:5">{<block_content pos:start="135:9" pos:end="151:9">

        <expr_stmt pos:start="135:9" pos:end="137:71"><expr pos:start="135:9" pos:end="137:70"><call pos:start="135:9" pos:end="137:70"><name pos:start="135:9" pos:end="135:32">vfio_spapr_remove_window</name><argument_list pos:start="135:33" pos:end="137:70">(<argument pos:start="135:34" pos:end="135:42"><expr pos:start="135:34" pos:end="135:42"><name pos:start="135:34" pos:end="135:42">container</name></expr></argument>,

                                 <argument pos:start="137:34" pos:end="137:69"><expr pos:start="137:34" pos:end="137:69"><name pos:start="137:34" pos:end="137:69"><name pos:start="137:34" pos:end="137:40">section</name><operator pos:start="137:41" pos:end="137:42">-&gt;</operator><name pos:start="137:43" pos:end="137:69">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="151:9"><if pos:start="139:9" pos:end="151:9">if <condition pos:start="139:12" pos:end="145:67">(<expr pos:start="139:13" pos:end="145:66"><call pos:start="139:13" pos:end="145:62"><name pos:start="139:13" pos:end="139:29">vfio_host_win_del</name><argument_list pos:start="139:30" pos:end="145:62">(<argument pos:start="139:31" pos:end="139:39"><expr pos:start="139:31" pos:end="139:39"><name pos:start="139:31" pos:end="139:39">container</name></expr></argument>,

                              <argument pos:start="141:31" pos:end="141:66"><expr pos:start="141:31" pos:end="141:66"><name pos:start="141:31" pos:end="141:66"><name pos:start="141:31" pos:end="141:37">section</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:66">offset_within_address_space</name></name></expr></argument>,

                              <argument pos:start="143:31" pos:end="145:61"><expr pos:start="143:31" pos:end="145:61"><name pos:start="143:31" pos:end="143:66"><name pos:start="143:31" pos:end="143:37">section</name><operator pos:start="143:38" pos:end="143:39">-&gt;</operator><name pos:start="143:40" pos:end="143:66">offset_within_address_space</name></name> <operator pos:start="143:68" pos:end="143:68">+</operator>

                              <call pos:start="145:31" pos:end="145:57"><name pos:start="145:31" pos:end="145:42">int128_get64</name><argument_list pos:start="145:43" pos:end="145:57">(<argument pos:start="145:44" pos:end="145:56"><expr pos:start="145:44" pos:end="145:56"><name pos:start="145:44" pos:end="145:56"><name pos:start="145:44" pos:end="145:50">section</name><operator pos:start="145:51" pos:end="145:52">-&gt;</operator><name pos:start="145:53" pos:end="145:56">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="145:59" pos:end="145:59">-</operator> <literal type="number" pos:start="145:61" pos:end="145:61">1</literal></expr></argument>)</argument_list></call> <operator pos:start="145:64" pos:end="145:64">&lt;</operator> <literal type="number" pos:start="145:66" pos:end="145:66">0</literal></expr>)</condition> <block pos:start="145:69" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:69">

            <expr_stmt pos:start="147:13" pos:end="149:69"><expr pos:start="147:13" pos:end="149:68"><call pos:start="147:13" pos:end="149:68"><name pos:start="147:13" pos:end="147:20">hw_error</name><argument_list pos:start="147:21" pos:end="149:68">(<argument pos:start="147:22" pos:end="147:71"><expr pos:start="147:22" pos:end="147:71"><literal type="string" pos:start="147:22" pos:end="147:60">"%s: Cannot delete missing window at %"</literal><name pos:start="147:61" pos:end="147:71">HWADDR_PRIx</name></expr></argument>,

                     <argument pos:start="149:22" pos:end="149:29"><expr pos:start="149:22" pos:end="149:29"><name pos:start="149:22" pos:end="149:29">__func__</name></expr></argument>, <argument pos:start="149:32" pos:end="149:67"><expr pos:start="149:32" pos:end="149:67"><name pos:start="149:32" pos:end="149:67"><name pos:start="149:32" pos:end="149:38">section</name><operator pos:start="149:39" pos:end="149:40">-&gt;</operator><name pos:start="149:41" pos:end="149:67">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
