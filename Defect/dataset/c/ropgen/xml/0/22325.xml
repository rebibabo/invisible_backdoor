<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22325.c" pos:tabs="8"><function pos:start="1:1" pos:end="559:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">mips_malta_init</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="559:1">{<block_content pos:start="5:5" pos:end="557:26">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">ram_addr_t</name></type> <name pos:start="7:16" pos:end="7:27">ram_low_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">cpu_model</name> <init pos:start="9:27" pos:end="9:46">= <expr pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:35">machine</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">kernel_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:57"><decl pos:start="13:5" pos:end="13:56"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:30">kernel_cmdline</name> <init pos:start="13:32" pos:end="13:56">= <expr pos:start="13:34" pos:end="13:56"><name pos:start="13:34" pos:end="13:56"><name pos:start="13:34" pos:end="13:40">machine</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:31">initrd_filename</name> <init pos:start="15:33" pos:end="15:58">= <expr pos:start="15:35" pos:end="15:58"><name pos:start="15:35" pos:end="15:58"><name pos:start="15:35" pos:end="15:41">machine</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">pflash_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:16">fl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:54"><decl pos:start="21:5" pos:end="21:53"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:31">system_memory</name> <init pos:start="21:33" pos:end="21:53">= <expr pos:start="21:35" pos:end="21:53"><call pos:start="21:35" pos:end="21:53"><name pos:start="21:35" pos:end="21:51">get_system_memory</name><argument_list pos:start="21:52" pos:end="21:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:52"><decl pos:start="23:5" pos:end="23:51"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:26">ram_high</name> <init pos:start="23:28" pos:end="23:51">= <expr pos:start="23:30" pos:end="23:51"><call pos:start="23:30" pos:end="23:51"><name pos:start="23:30" pos:end="23:34">g_new</name><argument_list pos:start="23:35" pos:end="23:51">(<argument pos:start="23:36" pos:end="23:47"><expr pos:start="23:36" pos:end="23:47"><name pos:start="23:36" pos:end="23:47">MemoryRegion</name></expr></argument>, <argument pos:start="23:50" pos:end="23:50"><expr pos:start="23:50" pos:end="23:50"><literal type="number" pos:start="23:50" pos:end="23:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:57"><decl pos:start="25:5" pos:end="25:56"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:31">ram_low_preio</name> <init pos:start="25:33" pos:end="25:56">= <expr pos:start="25:35" pos:end="25:56"><call pos:start="25:35" pos:end="25:56"><name pos:start="25:35" pos:end="25:39">g_new</name><argument_list pos:start="25:40" pos:end="25:56">(<argument pos:start="25:41" pos:end="25:52"><expr pos:start="25:41" pos:end="25:52"><name pos:start="25:41" pos:end="25:52">MemoryRegion</name></expr></argument>, <argument pos:start="25:55" pos:end="25:55"><expr pos:start="25:55" pos:end="25:55"><literal type="number" pos:start="25:55" pos:end="25:55">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:33"><decl pos:start="27:5" pos:end="27:32"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:32">ram_low_postio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:60"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:22">bios</name></decl>, <decl pos:start="29:25" pos:end="29:59"><type ref="prev" pos:start="29:5" pos:end="29:18"><modifier pos:start="29:25" pos:end="29:25">*</modifier></type><name pos:start="29:26" pos:end="29:34">bios_copy</name> <init pos:start="29:36" pos:end="29:59">= <expr pos:start="29:38" pos:end="29:59"><call pos:start="29:38" pos:end="29:59"><name pos:start="29:38" pos:end="29:42">g_new</name><argument_list pos:start="29:43" pos:end="29:59">(<argument pos:start="29:44" pos:end="29:55"><expr pos:start="29:44" pos:end="29:55"><name pos:start="29:44" pos:end="29:55">MemoryRegion</name></expr></argument>, <argument pos:start="29:58" pos:end="29:58"><expr pos:start="29:58" pos:end="29:58"><literal type="number" pos:start="29:58" pos:end="29:58">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:39"><decl pos:start="31:5" pos:end="31:38"><type pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:15">target_long</name></type> <name pos:start="31:17" pos:end="31:25">bios_size</name> <init pos:start="31:27" pos:end="31:38">= <expr pos:start="31:29" pos:end="31:38"><name pos:start="31:29" pos:end="31:38">FLASH_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:45"><decl pos:start="33:5" pos:end="33:44"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:16">size_t</name></type> <name pos:start="33:18" pos:end="33:34">smbus_eeprom_size</name> <init pos:start="33:36" pos:end="33:44">= <expr pos:start="33:38" pos:end="33:44"><literal type="number" pos:start="33:38" pos:end="33:38">8</literal> <operator pos:start="33:40" pos:end="33:40">*</operator> <literal type="number" pos:start="33:42" pos:end="33:44">256</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:61"><decl pos:start="35:5" pos:end="35:60"><type pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:11">uint8_t</name> <modifier pos:start="35:13" pos:end="35:13">*</modifier></type><name pos:start="35:14" pos:end="35:29">smbus_eeprom_buf</name> <init pos:start="35:31" pos:end="35:60">= <expr pos:start="35:33" pos:end="35:60"><call pos:start="35:33" pos:end="35:60"><name pos:start="35:33" pos:end="35:41">g_malloc0</name><argument_list pos:start="35:42" pos:end="35:60">(<argument pos:start="35:43" pos:end="35:59"><expr pos:start="35:43" pos:end="35:59"><name pos:start="35:43" pos:end="35:59">smbus_eeprom_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:11">int64_t</name></type> <name pos:start="37:13" pos:end="37:24">kernel_entry</name></decl>, <decl pos:start="37:27" pos:end="37:45"><type ref="prev" pos:start="37:5" pos:end="37:11"/><name pos:start="37:27" pos:end="37:45">bootloader_run_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">PCIBus</name> <modifier pos:start="39:12" pos:end="39:12">*</modifier></type><name pos:start="39:13" pos:end="39:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:10">ISABus</name> <modifier pos:start="41:12" pos:end="41:12">*</modifier></type><name pos:start="41:13" pos:end="41:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:17"><decl pos:start="43:5" pos:end="43:16"><type pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:11">MIPSCPU</name> <modifier pos:start="43:13" pos:end="43:13">*</modifier></type><name pos:start="43:14" pos:end="43:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:22"><decl pos:start="45:5" pos:end="45:21"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">CPUMIPSState</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:22"><decl pos:start="47:5" pos:end="47:21"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">qemu_irq</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:21">isa_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:27"><decl pos:start="49:5" pos:end="49:26"><type pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:12">qemu_irq</name> <modifier pos:start="49:14" pos:end="49:14">*</modifier></type><name pos:start="49:15" pos:end="49:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:20"><decl pos:start="51:5" pos:end="51:19"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:19">piix4_devfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:18"><decl pos:start="53:5" pos:end="53:17"><type pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:10">I2CBus</name> <modifier pos:start="53:12" pos:end="53:12">*</modifier></type><name pos:start="53:13" pos:end="53:17">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:10"><decl pos:start="55:5" pos:end="55:9"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:21"><decl pos:start="57:5" pos:end="57:20"><type pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">DriveInfo</name> <modifier pos:start="57:15" pos:end="57:15">*</modifier></type><name pos:start="57:16" pos:end="57:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:46"><decl pos:start="59:5" pos:end="59:45"><type pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:13">DriveInfo</name> <modifier pos:start="59:15" pos:end="59:15">*</modifier></type><name pos:start="59:16" pos:end="59:45"><name pos:start="59:16" pos:end="59:17">hd</name><index pos:start="59:18" pos:end="59:45">[<expr pos:start="59:19" pos:end="59:44"><name pos:start="59:19" pos:end="59:29">MAX_IDE_BUS</name> <operator pos:start="59:31" pos:end="59:31">*</operator> <name pos:start="59:33" pos:end="59:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:26"><decl pos:start="61:5" pos:end="61:25"><type pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:13">DriveInfo</name> <modifier pos:start="61:15" pos:end="61:15">*</modifier></type><name pos:start="61:16" pos:end="61:25"><name pos:start="61:16" pos:end="61:17">fd</name><index pos:start="61:18" pos:end="61:25">[<expr pos:start="61:19" pos:end="61:24"><name pos:start="61:19" pos:end="61:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:19"><decl pos:start="63:5" pos:end="63:18"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:14">fl_idx</name> <init pos:start="63:16" pos:end="63:18">= <expr pos:start="63:18" pos:end="63:18"><literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:37"><decl pos:start="65:5" pos:end="65:36"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:18">fl_sectors</name> <init pos:start="65:20" pos:end="65:36">= <expr pos:start="65:22" pos:end="65:36"><name pos:start="65:22" pos:end="65:30">bios_size</name> <operator pos:start="65:32" pos:end="65:33">&gt;&gt;</operator> <literal type="number" pos:start="65:35" pos:end="65:36">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:11"><decl pos:start="67:5" pos:end="67:10"><type pos:start="67:5" pos:end="67:7"><name pos:start="67:5" pos:end="67:7">int</name></type> <name pos:start="67:9" pos:end="67:10">be</name></decl>;</decl_stmt>



    <decl_stmt pos:start="71:5" pos:end="71:58"><decl pos:start="71:5" pos:end="71:57"><type pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:15">DeviceState</name> <modifier pos:start="71:17" pos:end="71:17">*</modifier></type><name pos:start="71:18" pos:end="71:20">dev</name> <init pos:start="71:22" pos:end="71:57">= <expr pos:start="71:24" pos:end="71:57"><call pos:start="71:24" pos:end="71:57"><name pos:start="71:24" pos:end="71:34">qdev_create</name><argument_list pos:start="71:35" pos:end="71:57">(<argument pos:start="71:36" pos:end="71:39"><expr pos:start="71:36" pos:end="71:39"><name pos:start="71:36" pos:end="71:39">NULL</name></expr></argument>, <argument pos:start="71:42" pos:end="71:56"><expr pos:start="71:42" pos:end="71:56"><name pos:start="71:42" pos:end="71:56">TYPE_MIPS_MALTA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="73:5" pos:end="73:36"><decl pos:start="73:5" pos:end="73:35"><type pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:14">MaltaState</name> <modifier pos:start="73:16" pos:end="73:16">*</modifier></type><name pos:start="73:17" pos:end="73:17">s</name> <init pos:start="73:19" pos:end="73:35">= <expr pos:start="73:21" pos:end="73:35"><call pos:start="73:21" pos:end="73:35"><name pos:start="73:21" pos:end="73:30">MIPS_MALTA</name><argument_list pos:start="73:31" pos:end="73:35">(<argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="77:5" pos:end="81:31">/* The whole address space decoded by the GT-64120A doesn't generate

       exception when accessing invalid memory. Create an empty slot to

       emulate this feature. */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><call pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:19">empty_slot_init</name><argument_list pos:start="83:20" pos:end="83:34">(<argument pos:start="83:21" pos:end="83:21"><expr pos:start="83:21" pos:end="83:21"><literal type="number" pos:start="83:21" pos:end="83:21">0</literal></expr></argument>, <argument pos:start="83:24" pos:end="83:33"><expr pos:start="83:24" pos:end="83:33"><literal type="number" pos:start="83:24" pos:end="83:33">0x20000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><call pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:20">qdev_init_nofail</name><argument_list pos:start="87:21" pos:end="87:25">(<argument pos:start="87:22" pos:end="87:24"><expr pos:start="87:22" pos:end="87:24"><name pos:start="87:22" pos:end="87:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:74">/* Make sure the first 3 serial ports are associated with a device. */</comment>

    <for pos:start="93:5" pos:end="105:5">for<control pos:start="93:8" pos:end="93:26">(<init pos:start="93:9" pos:end="93:14"><expr pos:start="93:9" pos:end="93:13"><name pos:start="93:9" pos:end="93:9">i</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <literal type="number" pos:start="93:13" pos:end="93:13">0</literal></expr>;</init> <condition pos:start="93:16" pos:end="93:21"><expr pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:16">i</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <literal type="number" pos:start="93:20" pos:end="93:20">3</literal></expr>;</condition> <incr pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><name pos:start="93:23" pos:end="93:23">i</name><operator pos:start="93:24" pos:end="93:25">++</operator></expr></incr>)</control> <block pos:start="93:28" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:9">

        <if_stmt pos:start="95:9" pos:end="103:9"><if pos:start="95:9" pos:end="103:9">if <condition pos:start="95:12" pos:end="95:27">(<expr pos:start="95:13" pos:end="95:26"><operator pos:start="95:13" pos:end="95:13">!</operator><name pos:start="95:14" pos:end="95:26"><name pos:start="95:14" pos:end="95:23">serial_hds</name><index pos:start="95:24" pos:end="95:26">[<expr pos:start="95:25" pos:end="95:25"><name pos:start="95:25" pos:end="95:25">i</name></expr>]</index></name></expr>)</condition> <block pos:start="95:29" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:62">

            <decl_stmt pos:start="97:13" pos:end="97:27"><decl pos:start="97:13" pos:end="97:26"><type pos:start="97:13" pos:end="97:16"><name pos:start="97:13" pos:end="97:16">char</name></type> <name pos:start="97:18" pos:end="97:26"><name pos:start="97:18" pos:end="97:22">label</name><index pos:start="97:23" pos:end="97:26">[<expr pos:start="97:24" pos:end="97:25"><literal type="number" pos:start="97:24" pos:end="97:25">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:20">snprintf</name><argument_list pos:start="99:21" pos:end="99:57">(<argument pos:start="99:22" pos:end="99:26"><expr pos:start="99:22" pos:end="99:26"><name pos:start="99:22" pos:end="99:26">label</name></expr></argument>, <argument pos:start="99:29" pos:end="99:41"><expr pos:start="99:29" pos:end="99:41"><sizeof pos:start="99:29" pos:end="99:41">sizeof<argument_list pos:start="99:35" pos:end="99:41">(<argument pos:start="99:36" pos:end="99:40"><expr pos:start="99:36" pos:end="99:40"><name pos:start="99:36" pos:end="99:40">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:44" pos:end="99:53"><expr pos:start="99:44" pos:end="99:53"><literal type="string" pos:start="99:44" pos:end="99:53">"serial%d"</literal></expr></argument>, <argument pos:start="99:56" pos:end="99:56"><expr pos:start="99:56" pos:end="99:56"><name pos:start="99:56" pos:end="99:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:62"><expr pos:start="101:13" pos:end="101:61"><name pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:22">serial_hds</name><index pos:start="101:23" pos:end="101:25">[<expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">i</name></expr>]</index></name> <operator pos:start="101:27" pos:end="101:27">=</operator> <call pos:start="101:29" pos:end="101:61"><name pos:start="101:29" pos:end="101:40">qemu_chr_new</name><argument_list pos:start="101:41" pos:end="101:61">(<argument pos:start="101:42" pos:end="101:46"><expr pos:start="101:42" pos:end="101:46"><name pos:start="101:42" pos:end="101:46">label</name></expr></argument>, <argument pos:start="101:49" pos:end="101:54"><expr pos:start="101:49" pos:end="101:54"><literal type="string" pos:start="101:49" pos:end="101:54">"null"</literal></expr></argument>, <argument pos:start="101:57" pos:end="101:60"><expr pos:start="101:57" pos:end="101:60"><name pos:start="101:57" pos:end="101:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="109:5" pos:end="109:19">/* init CPUs */</comment>

    <if_stmt pos:start="111:5" pos:end="123:5"><if pos:start="111:5" pos:end="123:5">if <condition pos:start="111:8" pos:end="111:26">(<expr pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:17">cpu_model</name> <operator pos:start="111:19" pos:end="111:20">==</operator> <name pos:start="111:22" pos:end="111:25">NULL</name></expr>)</condition> <block pos:start="111:28" pos:end="123:5">{<block_content pos:start="115:9" pos:end="122:0">

<cpp:ifdef pos:start="113:1" pos:end="113:20">#<cpp:directive pos:start="113:2" pos:end="113:6">ifdef</cpp:directive> <name pos:start="113:8" pos:end="113:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="115:9" pos:end="118:0"><expr pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:17">cpu_model</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <literal type="string" pos:start="115:21" pos:end="115:26">"20Kc"</literal></expr>;</expr_stmt>

<cpp:else pos:start="117:1" pos:end="117:5">#<cpp:directive pos:start="117:2" pos:end="117:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="119:9" pos:end="122:0"><expr pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:17">cpu_model</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <literal type="string" pos:start="119:21" pos:end="119:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <for pos:start="127:5" pos:end="151:5">for <control pos:start="127:9" pos:end="127:34">(<init pos:start="127:10" pos:end="127:15"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">i</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>;</init> <condition pos:start="127:17" pos:end="127:29"><expr pos:start="127:17" pos:end="127:28"><name pos:start="127:17" pos:end="127:17">i</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <name pos:start="127:21" pos:end="127:28">smp_cpus</name></expr>;</condition> <incr pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><name pos:start="127:31" pos:end="127:31">i</name><operator pos:start="127:32" pos:end="127:33">++</operator></expr></incr>)</control> <block pos:start="127:36" pos:end="151:5">{<block_content pos:start="129:9" pos:end="149:49">

        <expr_stmt pos:start="129:9" pos:end="129:39"><expr pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:11">cpu</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:38"><name pos:start="129:15" pos:end="129:27">cpu_mips_init</name><argument_list pos:start="129:28" pos:end="129:38">(<argument pos:start="129:29" pos:end="129:37"><expr pos:start="129:29" pos:end="129:37"><name pos:start="129:29" pos:end="129:37">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:24">(<expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:15">cpu</name> <operator pos:start="131:17" pos:end="131:18">==</operator> <name pos:start="131:20" pos:end="131:23">NULL</name></expr>)</condition> <block pos:start="131:26" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:20">

            <expr_stmt pos:start="133:13" pos:end="133:63"><expr pos:start="133:13" pos:end="133:62"><call pos:start="133:13" pos:end="133:62"><name pos:start="133:13" pos:end="133:19">fprintf</name><argument_list pos:start="133:20" pos:end="133:62">(<argument pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:26">stderr</name></expr></argument>, <argument pos:start="133:29" pos:end="133:61"><expr pos:start="133:29" pos:end="133:61"><literal type="string" pos:start="133:29" pos:end="133:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:20"><expr pos:start="135:13" pos:end="135:19"><call pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:16">exit</name><argument_list pos:start="135:17" pos:end="135:19">(<argument pos:start="135:18" pos:end="135:18"><expr pos:start="135:18" pos:end="135:18"><literal type="number" pos:start="135:18" pos:end="135:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:11">env</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <operator pos:start="139:15" pos:end="139:15">&amp;</operator><name pos:start="139:16" pos:end="139:23"><name pos:start="139:16" pos:end="139:18">cpu</name><operator pos:start="139:19" pos:end="139:20">-&gt;</operator><name pos:start="139:21" pos:end="139:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="143:9" pos:end="143:35">/* Init internal devices */</comment>

        <expr_stmt pos:start="145:9" pos:end="145:35"><expr pos:start="145:9" pos:end="145:34"><call pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:29">cpu_mips_irq_init_cpu</name><argument_list pos:start="145:30" pos:end="145:34">(<argument pos:start="145:31" pos:end="145:33"><expr pos:start="145:31" pos:end="145:33"><name pos:start="145:31" pos:end="145:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:33"><expr pos:start="147:9" pos:end="147:32"><call pos:start="147:9" pos:end="147:32"><name pos:start="147:9" pos:end="147:27">cpu_mips_clock_init</name><argument_list pos:start="147:28" pos:end="147:32">(<argument pos:start="147:29" pos:end="147:31"><expr pos:start="147:29" pos:end="147:31"><name pos:start="147:29" pos:end="147:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:49"><expr pos:start="149:9" pos:end="149:48"><call pos:start="149:9" pos:end="149:48"><name pos:start="149:9" pos:end="149:27">qemu_register_reset</name><argument_list pos:start="149:28" pos:end="149:48">(<argument pos:start="149:29" pos:end="149:42"><expr pos:start="149:29" pos:end="149:42"><name pos:start="149:29" pos:end="149:42">main_cpu_reset</name></expr></argument>, <argument pos:start="149:45" pos:end="149:47"><expr pos:start="149:45" pos:end="149:47"><name pos:start="149:45" pos:end="149:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="153:5" pos:end="153:30"><expr pos:start="153:5" pos:end="153:29"><name pos:start="153:5" pos:end="153:7">cpu</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="153:29"><name pos:start="153:11" pos:end="153:18">MIPS_CPU</name><argument_list pos:start="153:19" pos:end="153:29">(<argument pos:start="153:20" pos:end="153:28"><expr pos:start="153:20" pos:end="153:28"><name pos:start="153:20" pos:end="153:28">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:20"><expr pos:start="155:5" pos:end="155:19"><name pos:start="155:5" pos:end="155:7">env</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <operator pos:start="155:11" pos:end="155:11">&amp;</operator><name pos:start="155:12" pos:end="155:19"><name pos:start="155:12" pos:end="155:14">cpu</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:19">env</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:22">/* allocate RAM */</comment>

    <if_stmt pos:start="161:5" pos:end="171:5"><if pos:start="161:5" pos:end="171:5">if <condition pos:start="161:8" pos:end="161:33">(<expr pos:start="161:9" pos:end="161:32"><name pos:start="161:9" pos:end="161:16">ram_size</name> <operator pos:start="161:18" pos:end="161:18">&gt;</operator> <operator pos:start="161:20" pos:end="161:20">(</operator><literal type="number" pos:start="161:21" pos:end="161:25">2048u</literal> <operator pos:start="161:27" pos:end="161:28">&lt;&lt;</operator> <literal type="number" pos:start="161:30" pos:end="161:31">20</literal><operator pos:start="161:32" pos:end="161:32">)</operator></expr>)</condition> <block pos:start="161:35" pos:end="171:5">{<block_content pos:start="163:9" pos:end="169:16">

        <expr_stmt pos:start="163:9" pos:end="167:54"><expr pos:start="163:9" pos:end="167:53"><call pos:start="163:9" pos:end="167:53"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="167:53">(<argument pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">stderr</name></expr></argument>,

                <argument pos:start="165:17" pos:end="165:82"><expr pos:start="165:17" pos:end="165:82"><literal type="string" pos:start="165:17" pos:end="165:82">"qemu: Too much memory for this machine: %d MB, maximum 2048 MB\n"</literal></expr></argument>,

                <argument pos:start="167:17" pos:end="167:52"><expr pos:start="167:17" pos:end="167:52"><operator pos:start="167:17" pos:end="167:17">(</operator><operator pos:start="167:18" pos:end="167:18">(</operator><name pos:start="167:19" pos:end="167:26">unsigned</name> <name pos:start="167:28" pos:end="167:30">int</name><operator pos:start="167:31" pos:end="167:31">)</operator><name pos:start="167:32" pos:end="167:39">ram_size</name> <operator pos:start="167:41" pos:end="167:41">/</operator> <operator pos:start="167:43" pos:end="167:43">(</operator><literal type="number" pos:start="167:44" pos:end="167:44">1</literal> <operator pos:start="167:46" pos:end="167:47">&lt;&lt;</operator> <literal type="number" pos:start="167:49" pos:end="167:50">20</literal><operator pos:start="167:51" pos:end="167:51">)</operator><operator pos:start="167:52" pos:end="167:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:16"><expr pos:start="169:9" pos:end="169:15"><call pos:start="169:9" pos:end="169:15"><name pos:start="169:9" pos:end="169:12">exit</name><argument_list pos:start="169:13" pos:end="169:15">(<argument pos:start="169:14" pos:end="169:14"><expr pos:start="169:14" pos:end="169:14"><literal type="number" pos:start="169:14" pos:end="169:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:68">/* register RAM at high address where it is undisturbed by IO */</comment>

    <expr_stmt pos:start="177:5" pos:end="179:51"><expr pos:start="177:5" pos:end="179:50"><call pos:start="177:5" pos:end="179:50"><name pos:start="177:5" pos:end="177:40">memory_region_allocate_system_memory</name><argument_list pos:start="177:41" pos:end="179:50">(<argument pos:start="177:42" pos:end="177:49"><expr pos:start="177:42" pos:end="177:49"><name pos:start="177:42" pos:end="177:49">ram_high</name></expr></argument>, <argument pos:start="177:52" pos:end="177:55"><expr pos:start="177:52" pos:end="177:55"><name pos:start="177:52" pos:end="177:55">NULL</name></expr></argument>, <argument pos:start="177:58" pos:end="177:73"><expr pos:start="177:58" pos:end="177:73"><literal type="string" pos:start="177:58" pos:end="177:73">"mips_malta.ram"</literal></expr></argument>,

                                         <argument pos:start="179:42" pos:end="179:49"><expr pos:start="179:42" pos:end="179:49"><name pos:start="179:42" pos:end="179:49">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:69"><expr pos:start="181:5" pos:end="181:68"><call pos:start="181:5" pos:end="181:68"><name pos:start="181:5" pos:end="181:31">memory_region_add_subregion</name><argument_list pos:start="181:32" pos:end="181:68">(<argument pos:start="181:33" pos:end="181:45"><expr pos:start="181:33" pos:end="181:45"><name pos:start="181:33" pos:end="181:45">system_memory</name></expr></argument>, <argument pos:start="181:48" pos:end="181:57"><expr pos:start="181:48" pos:end="181:57"><literal type="number" pos:start="181:48" pos:end="181:57">0x80000000</literal></expr></argument>, <argument pos:start="181:60" pos:end="181:67"><expr pos:start="181:60" pos:end="181:67"><name pos:start="181:60" pos:end="181:67">ram_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:38">/* alias for pre IO hole access */</comment>

    <expr_stmt pos:start="187:5" pos:end="189:70"><expr pos:start="187:5" pos:end="189:69"><call pos:start="187:5" pos:end="189:69"><name pos:start="187:5" pos:end="187:28">memory_region_init_alias</name><argument_list pos:start="187:29" pos:end="189:69">(<argument pos:start="187:30" pos:end="187:42"><expr pos:start="187:30" pos:end="187:42"><name pos:start="187:30" pos:end="187:42">ram_low_preio</name></expr></argument>, <argument pos:start="187:45" pos:end="187:48"><expr pos:start="187:45" pos:end="187:48"><name pos:start="187:45" pos:end="187:48">NULL</name></expr></argument>, <argument pos:start="187:51" pos:end="187:76"><expr pos:start="187:51" pos:end="187:76"><literal type="string" pos:start="187:51" pos:end="187:76">"mips_malta_low_preio.ram"</literal></expr></argument>,

                             <argument pos:start="189:30" pos:end="189:37"><expr pos:start="189:30" pos:end="189:37"><name pos:start="189:30" pos:end="189:37">ram_high</name></expr></argument>, <argument pos:start="189:40" pos:end="189:40"><expr pos:start="189:40" pos:end="189:40"><literal type="number" pos:start="189:40" pos:end="189:40">0</literal></expr></argument>, <argument pos:start="189:43" pos:end="189:68"><expr pos:start="189:43" pos:end="189:68"><call pos:start="189:43" pos:end="189:68"><name pos:start="189:43" pos:end="189:45">MIN</name><argument_list pos:start="189:46" pos:end="189:68">(<argument pos:start="189:47" pos:end="189:54"><expr pos:start="189:47" pos:end="189:54"><name pos:start="189:47" pos:end="189:54">ram_size</name></expr></argument>, <argument pos:start="189:57" pos:end="189:67"><expr pos:start="189:57" pos:end="189:67"><operator pos:start="189:57" pos:end="189:57">(</operator><literal type="number" pos:start="189:58" pos:end="189:60">256</literal> <operator pos:start="189:62" pos:end="189:63">&lt;&lt;</operator> <literal type="number" pos:start="189:65" pos:end="189:66">20</literal><operator pos:start="189:67" pos:end="189:67">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:65"><expr pos:start="191:5" pos:end="191:64"><call pos:start="191:5" pos:end="191:64"><name pos:start="191:5" pos:end="191:31">memory_region_add_subregion</name><argument_list pos:start="191:32" pos:end="191:64">(<argument pos:start="191:33" pos:end="191:45"><expr pos:start="191:33" pos:end="191:45"><name pos:start="191:33" pos:end="191:45">system_memory</name></expr></argument>, <argument pos:start="191:48" pos:end="191:48"><expr pos:start="191:48" pos:end="191:48"><literal type="number" pos:start="191:48" pos:end="191:48">0</literal></expr></argument>, <argument pos:start="191:51" pos:end="191:63"><expr pos:start="191:51" pos:end="191:63"><name pos:start="191:51" pos:end="191:63">ram_low_preio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:63">/* alias for post IO hole access, if there is enough RAM */</comment>

    <if_stmt pos:start="197:5" pos:end="211:5"><if pos:start="197:5" pos:end="211:5">if <condition pos:start="197:8" pos:end="197:31">(<expr pos:start="197:9" pos:end="197:30"><name pos:start="197:9" pos:end="197:16">ram_size</name> <operator pos:start="197:18" pos:end="197:18">&gt;</operator> <operator pos:start="197:20" pos:end="197:20">(</operator><literal type="number" pos:start="197:21" pos:end="197:23">512</literal> <operator pos:start="197:25" pos:end="197:26">&lt;&lt;</operator> <literal type="number" pos:start="197:28" pos:end="197:29">20</literal><operator pos:start="197:30" pos:end="197:30">)</operator></expr>)</condition> <block pos:start="197:33" pos:end="211:5">{<block_content pos:start="199:9" pos:end="209:78">

        <expr_stmt pos:start="199:9" pos:end="199:48"><expr pos:start="199:9" pos:end="199:47"><name pos:start="199:9" pos:end="199:22">ram_low_postio</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <call pos:start="199:26" pos:end="199:47"><name pos:start="199:26" pos:end="199:30">g_new</name><argument_list pos:start="199:31" pos:end="199:47">(<argument pos:start="199:32" pos:end="199:43"><expr pos:start="199:32" pos:end="199:43"><name pos:start="199:32" pos:end="199:43">MemoryRegion</name></expr></argument>, <argument pos:start="199:46" pos:end="199:46"><expr pos:start="199:46" pos:end="199:46"><literal type="number" pos:start="199:46" pos:end="199:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="207:57"><expr pos:start="201:9" pos:end="207:56"><call pos:start="201:9" pos:end="207:56"><name pos:start="201:9" pos:end="201:32">memory_region_init_alias</name><argument_list pos:start="201:33" pos:end="207:56">(<argument pos:start="201:34" pos:end="201:47"><expr pos:start="201:34" pos:end="201:47"><name pos:start="201:34" pos:end="201:47">ram_low_postio</name></expr></argument>, <argument pos:start="201:50" pos:end="201:53"><expr pos:start="201:50" pos:end="201:53"><name pos:start="201:50" pos:end="201:53">NULL</name></expr></argument>,

                                 <argument pos:start="203:34" pos:end="203:60"><expr pos:start="203:34" pos:end="203:60"><literal type="string" pos:start="203:34" pos:end="203:60">"mips_malta_low_postio.ram"</literal></expr></argument>,

                                 <argument pos:start="205:34" pos:end="205:41"><expr pos:start="205:34" pos:end="205:41"><name pos:start="205:34" pos:end="205:41">ram_high</name></expr></argument>, <argument pos:start="205:44" pos:end="205:52"><expr pos:start="205:44" pos:end="205:52"><literal type="number" pos:start="205:44" pos:end="205:46">512</literal> <operator pos:start="205:48" pos:end="205:49">&lt;&lt;</operator> <literal type="number" pos:start="205:51" pos:end="205:52">20</literal></expr></argument>,

                                 <argument pos:start="207:34" pos:end="207:55"><expr pos:start="207:34" pos:end="207:55"><name pos:start="207:34" pos:end="207:41">ram_size</name> <operator pos:start="207:43" pos:end="207:43">-</operator> <operator pos:start="207:45" pos:end="207:45">(</operator><literal type="number" pos:start="207:46" pos:end="207:48">512</literal> <operator pos:start="207:50" pos:end="207:51">&lt;&lt;</operator> <literal type="number" pos:start="207:53" pos:end="207:54">20</literal><operator pos:start="207:55" pos:end="207:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:78"><expr pos:start="209:9" pos:end="209:77"><call pos:start="209:9" pos:end="209:77"><name pos:start="209:9" pos:end="209:35">memory_region_add_subregion</name><argument_list pos:start="209:36" pos:end="209:77">(<argument pos:start="209:37" pos:end="209:49"><expr pos:start="209:37" pos:end="209:49"><name pos:start="209:37" pos:end="209:49">system_memory</name></expr></argument>, <argument pos:start="209:52" pos:end="209:60"><expr pos:start="209:52" pos:end="209:60"><literal type="number" pos:start="209:52" pos:end="209:54">512</literal> <operator pos:start="209:56" pos:end="209:57">&lt;&lt;</operator> <literal type="number" pos:start="209:59" pos:end="209:60">20</literal></expr></argument>, <argument pos:start="209:63" pos:end="209:76"><expr pos:start="209:63" pos:end="209:76"><name pos:start="209:63" pos:end="209:76">ram_low_postio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:34">/* generate SPD EEPROM data */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:62"><expr pos:start="217:5" pos:end="217:61"><call pos:start="217:5" pos:end="217:61"><name pos:start="217:5" pos:end="217:23">generate_eeprom_spd</name><argument_list pos:start="217:24" pos:end="217:61">(<argument pos:start="217:25" pos:end="217:50"><expr pos:start="217:25" pos:end="217:50"><operator pos:start="217:25" pos:end="217:25">&amp;</operator><name pos:start="217:26" pos:end="217:50"><name pos:start="217:26" pos:end="217:41">smbus_eeprom_buf</name><index pos:start="217:42" pos:end="217:50">[<expr pos:start="217:43" pos:end="217:49"><literal type="number" pos:start="217:43" pos:end="217:43">0</literal> <operator pos:start="217:45" pos:end="217:45">*</operator> <literal type="number" pos:start="217:47" pos:end="217:49">256</literal></expr>]</index></name></expr></argument>, <argument pos:start="217:53" pos:end="217:60"><expr pos:start="217:53" pos:end="217:60"><name pos:start="217:53" pos:end="217:60">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="224:0"><expr pos:start="219:5" pos:end="219:54"><call pos:start="219:5" pos:end="219:54"><name pos:start="219:5" pos:end="219:26">generate_eeprom_serial</name><argument_list pos:start="219:27" pos:end="219:54">(<argument pos:start="219:28" pos:end="219:53"><expr pos:start="219:28" pos:end="219:53"><operator pos:start="219:28" pos:end="219:28">&amp;</operator><name pos:start="219:29" pos:end="219:53"><name pos:start="219:29" pos:end="219:44">smbus_eeprom_buf</name><index pos:start="219:45" pos:end="219:53">[<expr pos:start="219:46" pos:end="219:52"><literal type="number" pos:start="219:46" pos:end="219:46">6</literal> <operator pos:start="219:48" pos:end="219:48">*</operator> <literal type="number" pos:start="219:50" pos:end="219:52">256</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="223:1" pos:end="223:29">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="225:5" pos:end="228:0"><expr pos:start="225:5" pos:end="225:10"><name pos:start="225:5" pos:end="225:6">be</name> <operator pos:start="225:8" pos:end="225:8">=</operator> <literal type="number" pos:start="225:10" pos:end="225:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="227:1" pos:end="227:5">#<cpp:directive pos:start="227:2" pos:end="227:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="229:5" pos:end="232:0"><expr pos:start="229:5" pos:end="229:10"><name pos:start="229:5" pos:end="229:6">be</name> <operator pos:start="229:8" pos:end="229:8">=</operator> <literal type="number" pos:start="229:10" pos:end="229:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="233:5" pos:end="233:14">/* FPGA */</comment>

    <comment type="block" pos:start="235:5" pos:end="235:76">/* The CBUS UART is attached to the MIPS CPU INT2 pin, ie interrupt 4 */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:77"><expr pos:start="237:5" pos:end="237:76"><call pos:start="237:5" pos:end="237:76"><name pos:start="237:5" pos:end="237:19">malta_fpga_init</name><argument_list pos:start="237:20" pos:end="237:76">(<argument pos:start="237:21" pos:end="237:33"><expr pos:start="237:21" pos:end="237:33"><name pos:start="237:21" pos:end="237:33">system_memory</name></expr></argument>, <argument pos:start="237:36" pos:end="237:47"><expr pos:start="237:36" pos:end="237:47"><name pos:start="237:36" pos:end="237:47">FPGA_ADDRESS</name></expr></argument>, <argument pos:start="237:50" pos:end="237:60"><expr pos:start="237:50" pos:end="237:60"><name pos:start="237:50" pos:end="237:60"><name pos:start="237:50" pos:end="237:52">env</name><operator pos:start="237:53" pos:end="237:54">-&gt;</operator><name pos:start="237:55" pos:end="237:57">irq</name><index pos:start="237:58" pos:end="237:60">[<expr pos:start="237:59" pos:end="237:59"><literal type="number" pos:start="237:59" pos:end="237:59">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="237:63" pos:end="237:75"><expr pos:start="237:63" pos:end="237:75"><name pos:start="237:63" pos:end="237:75"><name pos:start="237:63" pos:end="237:72">serial_hds</name><index pos:start="237:73" pos:end="237:75">[<expr pos:start="237:74" pos:end="237:74"><literal type="number" pos:start="237:74" pos:end="237:74">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:40">/* Load firmware in flash / BIOS. */</comment>

    <expr_stmt pos:start="243:5" pos:end="246:0"><expr pos:start="243:5" pos:end="243:43"><name pos:start="243:5" pos:end="243:9">dinfo</name> <operator pos:start="243:11" pos:end="243:11">=</operator> <call pos:start="243:13" pos:end="243:43"><name pos:start="243:13" pos:end="243:21">drive_get</name><argument_list pos:start="243:22" pos:end="243:43">(<argument pos:start="243:23" pos:end="243:31"><expr pos:start="243:23" pos:end="243:31"><name pos:start="243:23" pos:end="243:31">IF_PFLASH</name></expr></argument>, <argument pos:start="243:34" pos:end="243:34"><expr pos:start="243:34" pos:end="243:34"><literal type="number" pos:start="243:34" pos:end="243:34">0</literal></expr></argument>, <argument pos:start="243:37" pos:end="243:42"><expr pos:start="243:37" pos:end="243:42"><name pos:start="243:37" pos:end="243:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="245:1" pos:end="245:23">#<cpp:directive pos:start="245:2" pos:end="245:6">ifdef</cpp:directive> <name pos:start="245:8" pos:end="245:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <if_stmt pos:start="247:5" pos:end="260:0"><if pos:start="247:5" pos:end="260:0">if <condition pos:start="247:8" pos:end="247:14">(<expr pos:start="247:9" pos:end="247:13"><name pos:start="247:9" pos:end="247:13">dinfo</name></expr>)</condition> <block pos:start="247:16" pos:end="260:0">{<block_content pos:start="249:9" pos:end="255:50">

        <expr_stmt pos:start="249:9" pos:end="255:50"><expr pos:start="249:9" pos:end="255:49"><call pos:start="249:9" pos:end="255:49"><name pos:start="249:9" pos:end="249:14">printf</name><argument_list pos:start="249:15" pos:end="255:49">(<argument pos:start="249:16" pos:end="251:38"><expr pos:start="249:16" pos:end="251:38"><literal type="string" pos:start="249:16" pos:end="249:49">"Register parallel flash %d size "</literal> <name pos:start="249:51" pos:end="249:63">TARGET_FMT_lx</name> <literal type="string" pos:start="249:65" pos:end="249:70">" at "</literal>

               <literal type="string" pos:start="251:16" pos:end="251:38">"addr %08llx '%s' %x\n"</literal></expr></argument>,

               <argument pos:start="253:16" pos:end="253:21"><expr pos:start="253:16" pos:end="253:21"><name pos:start="253:16" pos:end="253:21">fl_idx</name></expr></argument>, <argument pos:start="253:24" pos:end="253:32"><expr pos:start="253:24" pos:end="253:32"><name pos:start="253:24" pos:end="253:32">bios_size</name></expr></argument>, <argument pos:start="253:35" pos:end="253:47"><expr pos:start="253:35" pos:end="253:47"><name pos:start="253:35" pos:end="253:47">FLASH_ADDRESS</name></expr></argument>,

               <argument pos:start="255:16" pos:end="255:36"><expr pos:start="255:16" pos:end="255:36"><call pos:start="255:16" pos:end="255:36"><name pos:start="255:16" pos:end="255:23">blk_name</name><argument_list pos:start="255:24" pos:end="255:36">(<argument pos:start="255:25" pos:end="255:35"><expr pos:start="255:25" pos:end="255:35"><name pos:start="255:25" pos:end="255:35"><name pos:start="255:25" pos:end="255:29">dinfo</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:35">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="255:39" pos:end="255:48"><expr pos:start="255:39" pos:end="255:48"><name pos:start="255:39" pos:end="255:48">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="261:5" pos:end="269:70"><expr pos:start="261:5" pos:end="269:69"><name pos:start="261:5" pos:end="261:6">fl</name> <operator pos:start="261:8" pos:end="261:8">=</operator> <call pos:start="261:10" pos:end="269:69"><name pos:start="261:10" pos:end="261:30">pflash_cfi01_register</name><argument_list pos:start="261:31" pos:end="269:69">(<argument pos:start="261:32" pos:end="261:44"><expr pos:start="261:32" pos:end="261:44"><name pos:start="261:32" pos:end="261:44">FLASH_ADDRESS</name></expr></argument>, <argument pos:start="261:47" pos:end="261:50"><expr pos:start="261:47" pos:end="261:50"><name pos:start="261:47" pos:end="261:50">NULL</name></expr></argument>, <argument pos:start="261:53" pos:end="261:69"><expr pos:start="261:53" pos:end="261:69"><literal type="string" pos:start="261:53" pos:end="261:69">"mips_malta.bios"</literal></expr></argument>,

                               <argument pos:start="263:32" pos:end="263:40"><expr pos:start="263:32" pos:end="263:40"><name pos:start="263:32" pos:end="263:40">BIOS_SIZE</name></expr></argument>,

                               <argument pos:start="265:32" pos:end="265:72"><expr pos:start="265:32" pos:end="265:72"><ternary pos:start="265:32" pos:end="265:72"><condition pos:start="265:32" pos:end="265:38"><expr pos:start="265:32" pos:end="265:36"><name pos:start="265:32" pos:end="265:36">dinfo</name></expr> ?</condition><then pos:start="265:40" pos:end="265:65"> <expr pos:start="265:40" pos:end="265:65"><call pos:start="265:40" pos:end="265:65"><name pos:start="265:40" pos:end="265:58">blk_by_legacy_dinfo</name><argument_list pos:start="265:59" pos:end="265:65">(<argument pos:start="265:60" pos:end="265:64"><expr pos:start="265:60" pos:end="265:64"><name pos:start="265:60" pos:end="265:64">dinfo</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="265:67" pos:end="265:72">: <expr pos:start="265:69" pos:end="265:72"><name pos:start="265:69" pos:end="265:72">NULL</name></expr></else></ternary></expr></argument>,

                               <argument pos:start="267:32" pos:end="267:36"><expr pos:start="267:32" pos:end="267:36"><literal type="number" pos:start="267:32" pos:end="267:36">65536</literal></expr></argument>, <argument pos:start="267:39" pos:end="267:48"><expr pos:start="267:39" pos:end="267:48"><name pos:start="267:39" pos:end="267:48">fl_sectors</name></expr></argument>,

                               <argument pos:start="269:32" pos:end="269:32"><expr pos:start="269:32" pos:end="269:32"><literal type="number" pos:start="269:32" pos:end="269:32">4</literal></expr></argument>, <argument pos:start="269:35" pos:end="269:40"><expr pos:start="269:35" pos:end="269:40"><literal type="number" pos:start="269:35" pos:end="269:40">0x0000</literal></expr></argument>, <argument pos:start="269:43" pos:end="269:48"><expr pos:start="269:43" pos:end="269:48"><literal type="number" pos:start="269:43" pos:end="269:48">0x0000</literal></expr></argument>, <argument pos:start="269:51" pos:end="269:56"><expr pos:start="269:51" pos:end="269:56"><literal type="number" pos:start="269:51" pos:end="269:56">0x0000</literal></expr></argument>, <argument pos:start="269:59" pos:end="269:64"><expr pos:start="269:59" pos:end="269:64"><literal type="number" pos:start="269:59" pos:end="269:64">0x0000</literal></expr></argument>, <argument pos:start="269:67" pos:end="269:68"><expr pos:start="269:67" pos:end="269:68"><name pos:start="269:67" pos:end="269:68">be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:39"><expr pos:start="271:5" pos:end="271:38"><name pos:start="271:5" pos:end="271:8">bios</name> <operator pos:start="271:10" pos:end="271:10">=</operator> <call pos:start="271:12" pos:end="271:38"><name pos:start="271:12" pos:end="271:34">pflash_cfi01_get_memory</name><argument_list pos:start="271:35" pos:end="271:38">(<argument pos:start="271:36" pos:end="271:37"><expr pos:start="271:36" pos:end="271:37"><name pos:start="271:36" pos:end="271:37">fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:13"><expr pos:start="273:5" pos:end="273:12"><name pos:start="273:5" pos:end="273:10">fl_idx</name><operator pos:start="273:11" pos:end="273:12">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="275:5" pos:end="411:5"><if pos:start="275:5" pos:end="325:5">if <condition pos:start="275:8" pos:end="275:24">(<expr pos:start="275:9" pos:end="275:23"><name pos:start="275:9" pos:end="275:23">kernel_filename</name></expr>)</condition> <block pos:start="275:26" pos:end="325:5">{<block_content pos:start="277:9" pos:end="323:9">

        <expr_stmt pos:start="277:9" pos:end="277:48"><expr pos:start="277:9" pos:end="277:47"><name pos:start="277:9" pos:end="277:20">ram_low_size</name> <operator pos:start="277:22" pos:end="277:22">=</operator> <call pos:start="277:24" pos:end="277:47"><name pos:start="277:24" pos:end="277:26">MIN</name><argument_list pos:start="277:27" pos:end="277:47">(<argument pos:start="277:28" pos:end="277:35"><expr pos:start="277:28" pos:end="277:35"><name pos:start="277:28" pos:end="277:35">ram_size</name></expr></argument>, <argument pos:start="277:38" pos:end="277:46"><expr pos:start="277:38" pos:end="277:46"><literal type="number" pos:start="277:38" pos:end="277:40">256</literal> <operator pos:start="277:42" pos:end="277:43">&lt;&lt;</operator> <literal type="number" pos:start="277:45" pos:end="277:46">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="279:9" pos:end="279:66">/* For KVM we reserve 1MB of RAM for running bootloader */</comment>

        <if_stmt pos:start="281:9" pos:end="291:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:26">(<expr pos:start="281:13" pos:end="281:25"><call pos:start="281:13" pos:end="281:25"><name pos:start="281:13" pos:end="281:23">kvm_enabled</name><argument_list pos:start="281:24" pos:end="281:25">()</argument_list></call></expr>)</condition> <block pos:start="281:28" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:60">

            <expr_stmt pos:start="283:13" pos:end="283:37"><expr pos:start="283:13" pos:end="283:36"><name pos:start="283:13" pos:end="283:24">ram_low_size</name> <operator pos:start="283:26" pos:end="283:27">-=</operator> <literal type="number" pos:start="283:29" pos:end="283:36">0x100000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:60"><expr pos:start="285:13" pos:end="285:59"><name pos:start="285:13" pos:end="285:31">bootloader_run_addr</name> <operator pos:start="285:33" pos:end="285:33">=</operator> <literal type="number" pos:start="285:35" pos:end="285:46">0x40000000</literal> <operator pos:start="285:46" pos:end="285:46">+</operator> <name pos:start="285:48" pos:end="285:59">ram_low_size</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="287:11" pos:end="291:9">else <block pos:start="287:16" pos:end="291:9">{<block_content pos:start="289:13" pos:end="289:45">

            <expr_stmt pos:start="289:13" pos:end="289:45"><expr pos:start="289:13" pos:end="289:44"><name pos:start="289:13" pos:end="289:31">bootloader_run_addr</name> <operator pos:start="289:33" pos:end="289:33">=</operator> <literal type="number" pos:start="289:35" pos:end="289:44">0xbfc00000</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="295:9" pos:end="295:61">/* Write a small bootloader to the flash location. */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:45"><expr pos:start="297:9" pos:end="297:44"><name pos:start="297:9" pos:end="297:29"><name pos:start="297:9" pos:end="297:20">loaderparams</name><operator pos:start="297:21" pos:end="297:21">.</operator><name pos:start="297:22" pos:end="297:29">ram_size</name></name> <operator pos:start="297:31" pos:end="297:31">=</operator> <name pos:start="297:33" pos:end="297:44">ram_low_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:55"><expr pos:start="299:9" pos:end="299:54"><name pos:start="299:9" pos:end="299:36"><name pos:start="299:9" pos:end="299:20">loaderparams</name><operator pos:start="299:21" pos:end="299:21">.</operator><name pos:start="299:22" pos:end="299:36">kernel_filename</name></name> <operator pos:start="299:38" pos:end="299:38">=</operator> <name pos:start="299:40" pos:end="299:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:53"><expr pos:start="301:9" pos:end="301:52"><name pos:start="301:9" pos:end="301:35"><name pos:start="301:9" pos:end="301:20">loaderparams</name><operator pos:start="301:21" pos:end="301:21">.</operator><name pos:start="301:22" pos:end="301:35">kernel_cmdline</name></name> <operator pos:start="301:37" pos:end="301:37">=</operator> <name pos:start="301:39" pos:end="301:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:55"><expr pos:start="303:9" pos:end="303:54"><name pos:start="303:9" pos:end="303:36"><name pos:start="303:9" pos:end="303:20">loaderparams</name><operator pos:start="303:21" pos:end="303:21">.</operator><name pos:start="303:22" pos:end="303:36">initrd_filename</name></name> <operator pos:start="303:38" pos:end="303:38">=</operator> <name pos:start="303:40" pos:end="303:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:37"><expr pos:start="305:9" pos:end="305:36"><name pos:start="305:9" pos:end="305:20">kernel_entry</name> <operator pos:start="305:22" pos:end="305:22">=</operator> <call pos:start="305:24" pos:end="305:36"><name pos:start="305:24" pos:end="305:34">load_kernel</name><argument_list pos:start="305:35" pos:end="305:36">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="309:9" pos:end="311:60"><expr pos:start="309:9" pos:end="311:59"><call pos:start="309:9" pos:end="311:59"><name pos:start="309:9" pos:end="309:24">write_bootloader</name><argument_list pos:start="309:25" pos:end="311:59">(<argument pos:start="309:26" pos:end="309:28"><expr pos:start="309:26" pos:end="309:28"><name pos:start="309:26" pos:end="309:28">env</name></expr></argument>, <argument pos:start="309:31" pos:end="309:61"><expr pos:start="309:31" pos:end="309:61"><call pos:start="309:31" pos:end="309:61"><name pos:start="309:31" pos:end="309:55">memory_region_get_ram_ptr</name><argument_list pos:start="309:56" pos:end="309:61">(<argument pos:start="309:57" pos:end="309:60"><expr pos:start="309:57" pos:end="309:60"><name pos:start="309:57" pos:end="309:60">bios</name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="311:26" pos:end="311:44"><expr pos:start="311:26" pos:end="311:44"><name pos:start="311:26" pos:end="311:44">bootloader_run_addr</name></expr></argument>, <argument pos:start="311:47" pos:end="311:58"><expr pos:start="311:47" pos:end="311:58"><name pos:start="311:47" pos:end="311:58">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="323:9"><if pos:start="313:9" pos:end="323:9">if <condition pos:start="313:12" pos:end="313:26">(<expr pos:start="313:13" pos:end="313:25"><call pos:start="313:13" pos:end="313:25"><name pos:start="313:13" pos:end="313:23">kvm_enabled</name><argument_list pos:start="313:24" pos:end="313:25">()</argument_list></call></expr>)</condition> <block pos:start="313:28" pos:end="323:9">{<block_content pos:start="317:13" pos:end="321:64">

            <comment type="block" pos:start="315:13" pos:end="315:74">/* Write the bootloader code @ the end of RAM, 1MB reserved */</comment>

            <expr_stmt pos:start="317:13" pos:end="321:64"><expr pos:start="317:13" pos:end="321:63"><call pos:start="317:13" pos:end="321:63"><name pos:start="317:13" pos:end="317:28">write_bootloader</name><argument_list pos:start="317:29" pos:end="321:63">(<argument pos:start="317:30" pos:end="317:32"><expr pos:start="317:30" pos:end="317:32"><name pos:start="317:30" pos:end="317:32">env</name></expr></argument>, <argument pos:start="317:35" pos:end="319:48"><expr pos:start="317:35" pos:end="319:48"><call pos:start="317:35" pos:end="317:74"><name pos:start="317:35" pos:end="317:59">memory_region_get_ram_ptr</name><argument_list pos:start="317:60" pos:end="317:74">(<argument pos:start="317:61" pos:end="317:73"><expr pos:start="317:61" pos:end="317:73"><name pos:start="317:61" pos:end="317:73">ram_low_preio</name></expr></argument>)</argument_list></call> <operator pos:start="317:76" pos:end="317:76">+</operator>

                                    <name pos:start="319:37" pos:end="319:48">ram_low_size</name></expr></argument>,

                             <argument pos:start="321:30" pos:end="321:48"><expr pos:start="321:30" pos:end="321:48"><name pos:start="321:30" pos:end="321:48">bootloader_run_addr</name></expr></argument>, <argument pos:start="321:51" pos:end="321:62"><expr pos:start="321:51" pos:end="321:62"><name pos:start="321:51" pos:end="321:62">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="325:7" pos:end="411:5">else <block pos:start="325:12" pos:end="411:5">{<block_content pos:start="329:9" pos:end="410:0">

        <comment type="block" pos:start="327:9" pos:end="327:64">/* The flash region isn't executable from a KVM guest */</comment>

        <if_stmt pos:start="329:9" pos:end="337:9"><if pos:start="329:9" pos:end="337:9">if <condition pos:start="329:12" pos:end="329:26">(<expr pos:start="329:13" pos:end="329:25"><call pos:start="329:13" pos:end="329:25"><name pos:start="329:13" pos:end="329:23">kvm_enabled</name><argument_list pos:start="329:24" pos:end="329:25">()</argument_list></call></expr>)</condition> <block pos:start="329:28" pos:end="337:9">{<block_content pos:start="331:13" pos:end="335:20">

            <expr_stmt pos:start="331:13" pos:end="333:74"><expr pos:start="331:13" pos:end="333:73"><call pos:start="331:13" pos:end="333:73"><name pos:start="331:13" pos:end="331:24">error_report</name><argument_list pos:start="331:25" pos:end="333:73">(<argument pos:start="331:26" pos:end="333:72"><expr pos:start="331:26" pos:end="333:72"><literal type="string" pos:start="331:26" pos:end="331:78">"KVM enabled but no -kernel argument was specified. "</literal>

                         <literal type="string" pos:start="333:26" pos:end="333:72">"Booting from flash is not supported with KVM."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:20"><expr pos:start="335:13" pos:end="335:19"><call pos:start="335:13" pos:end="335:19"><name pos:start="335:13" pos:end="335:16">exit</name><argument_list pos:start="335:17" pos:end="335:19">(<argument pos:start="335:18" pos:end="335:18"><expr pos:start="335:18" pos:end="335:18"><literal type="number" pos:start="335:18" pos:end="335:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="339:9" pos:end="339:39">/* Load firmware from flash. */</comment>

        <if_stmt pos:start="341:9" pos:end="386:0"><if pos:start="341:9" pos:end="386:0">if <condition pos:start="341:12" pos:end="341:19">(<expr pos:start="341:13" pos:end="341:18"><operator pos:start="341:13" pos:end="341:13">!</operator><name pos:start="341:14" pos:end="341:18">dinfo</name></expr>)</condition> <block pos:start="341:21" pos:end="386:0">{<block_content pos:start="345:13" pos:end="377:13">

            <comment type="block" pos:start="343:13" pos:end="343:36">/* Load a BIOS image. */</comment>

            <if_stmt pos:start="345:13" pos:end="349:13"><if pos:start="345:13" pos:end="349:13">if <condition pos:start="345:16" pos:end="345:34">(<expr pos:start="345:17" pos:end="345:33"><name pos:start="345:17" pos:end="345:25">bios_name</name> <operator pos:start="345:27" pos:end="345:28">==</operator> <name pos:start="345:30" pos:end="345:33">NULL</name></expr>)</condition> <block pos:start="345:36" pos:end="349:13">{<block_content pos:start="347:17" pos:end="347:42">

                <expr_stmt pos:start="347:17" pos:end="347:42"><expr pos:start="347:17" pos:end="347:41"><name pos:start="347:17" pos:end="347:25">bios_name</name> <operator pos:start="347:27" pos:end="347:27">=</operator> <name pos:start="347:29" pos:end="347:41">BIOS_FILENAME</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:70"><expr pos:start="351:13" pos:end="351:69"><name pos:start="351:13" pos:end="351:20">filename</name> <operator pos:start="351:22" pos:end="351:22">=</operator> <call pos:start="351:24" pos:end="351:69"><name pos:start="351:24" pos:end="351:37">qemu_find_file</name><argument_list pos:start="351:38" pos:end="351:69">(<argument pos:start="351:39" pos:end="351:57"><expr pos:start="351:39" pos:end="351:57"><name pos:start="351:39" pos:end="351:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="351:60" pos:end="351:68"><expr pos:start="351:60" pos:end="351:68"><name pos:start="351:60" pos:end="351:68">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="353:13" pos:end="365:13"><if pos:start="353:13" pos:end="361:13">if <condition pos:start="353:16" pos:end="353:25">(<expr pos:start="353:17" pos:end="353:24"><name pos:start="353:17" pos:end="353:24">filename</name></expr>)</condition> <block pos:start="353:27" pos:end="361:13">{<block_content pos:start="355:17" pos:end="359:33">

                <expr_stmt pos:start="355:17" pos:end="357:59"><expr pos:start="355:17" pos:end="357:58"><name pos:start="355:17" pos:end="355:25">bios_size</name> <operator pos:start="355:27" pos:end="355:27">=</operator> <call pos:start="355:29" pos:end="357:58"><name pos:start="355:29" pos:end="355:47">load_image_targphys</name><argument_list pos:start="355:48" pos:end="357:58">(<argument pos:start="355:49" pos:end="355:56"><expr pos:start="355:49" pos:end="355:56"><name pos:start="355:49" pos:end="355:56">filename</name></expr></argument>, <argument pos:start="355:59" pos:end="355:71"><expr pos:start="355:59" pos:end="355:71"><name pos:start="355:59" pos:end="355:71">FLASH_ADDRESS</name></expr></argument>,

                                                <argument pos:start="357:49" pos:end="357:57"><expr pos:start="357:49" pos:end="357:57"><name pos:start="357:49" pos:end="357:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:33"><expr pos:start="359:17" pos:end="359:32"><call pos:start="359:17" pos:end="359:32"><name pos:start="359:17" pos:end="359:22">g_free</name><argument_list pos:start="359:23" pos:end="359:32">(<argument pos:start="359:24" pos:end="359:31"><expr pos:start="359:24" pos:end="359:31"><name pos:start="359:24" pos:end="359:31">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="361:15" pos:end="365:13">else <block pos:start="361:20" pos:end="365:13">{<block_content pos:start="363:17" pos:end="363:31">

                <expr_stmt pos:start="363:17" pos:end="363:31"><expr pos:start="363:17" pos:end="363:30"><name pos:start="363:17" pos:end="363:25">bios_size</name> <operator pos:start="363:27" pos:end="363:27">=</operator> <operator pos:start="363:29" pos:end="363:29">-</operator><literal type="number" pos:start="363:30" pos:end="363:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="367:13" pos:end="377:13"><if pos:start="367:13" pos:end="377:13">if <condition pos:start="367:16" pos:end="369:53">(<expr pos:start="367:17" pos:end="369:52"><operator pos:start="367:17" pos:end="367:17">(</operator><name pos:start="367:18" pos:end="367:45"><name pos:start="367:18" pos:end="367:26">bios_size</name> <argument_list type="generic" pos:start="367:28" pos:end="367:45">&lt; <argument pos:start="367:30" pos:end="367:43"><expr pos:start="367:30" pos:end="367:43"><literal type="number" pos:start="367:30" pos:end="367:30">0</literal> <operator pos:start="367:32" pos:end="367:33">||</operator> <name pos:start="367:35" pos:end="367:43">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="367:47" pos:end="367:55">BIOS_SIZE</name><operator pos:start="367:56" pos:end="367:56">)</operator> <operator pos:start="367:58" pos:end="367:59">&amp;&amp;</operator>

                <operator pos:start="369:17" pos:end="369:17">!</operator><name pos:start="369:18" pos:end="369:32">kernel_filename</name> <operator pos:start="369:34" pos:end="369:35">&amp;&amp;</operator> <operator pos:start="369:37" pos:end="369:37">!</operator><call pos:start="369:38" pos:end="369:52"><name pos:start="369:38" pos:end="369:50">qtest_enabled</name><argument_list pos:start="369:51" pos:end="369:52">()</argument_list></call></expr>)</condition> <block pos:start="369:55" pos:end="377:13">{<block_content pos:start="371:17" pos:end="375:24">

                <expr_stmt pos:start="371:17" pos:end="373:74"><expr pos:start="371:17" pos:end="373:73"><call pos:start="371:17" pos:end="373:73"><name pos:start="371:17" pos:end="371:28">error_report</name><argument_list pos:start="371:29" pos:end="373:73">(<argument pos:start="371:30" pos:end="373:61"><expr pos:start="371:30" pos:end="373:61"><literal type="string" pos:start="371:30" pos:end="371:69">"Could not load MIPS bios '%s', and no "</literal>

                             <literal type="string" pos:start="373:30" pos:end="373:61">"-kernel argument was specified"</literal></expr></argument>, <argument pos:start="373:64" pos:end="373:72"><expr pos:start="373:64" pos:end="373:72"><name pos:start="373:64" pos:end="373:72">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:24"><expr pos:start="375:17" pos:end="375:23"><call pos:start="375:17" pos:end="375:23"><name pos:start="375:17" pos:end="375:20">exit</name><argument_list pos:start="375:21" pos:end="375:23">(<argument pos:start="375:22" pos:end="375:22"><expr pos:start="375:22" pos:end="375:22"><literal type="number" pos:start="375:22" pos:end="375:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="381:9" pos:end="383:59">/* In little endian mode the 32bit words in the bios are swapped,

           a neat trick which allows bi-endian firmware. */</comment>

<cpp:ifndef pos:start="385:1" pos:end="385:30">#<cpp:directive pos:start="385:2" pos:end="385:7">ifndef</cpp:directive> <name pos:start="385:9" pos:end="385:30">TARGET_WORDS_BIGENDIAN</name></cpp:ifndef>

        <block pos:start="387:9" pos:end="410:0">{<block_content pos:start="389:13" pos:end="405:13">

            <decl_stmt pos:start="389:13" pos:end="389:58"><decl pos:start="389:13" pos:end="389:25"><type pos:start="389:13" pos:end="389:22"><name pos:start="389:13" pos:end="389:20">uint32_t</name> <modifier pos:start="389:22" pos:end="389:22">*</modifier></type><name pos:start="389:23" pos:end="389:25">end</name></decl>, <decl pos:start="389:28" pos:end="389:57"><type ref="prev" pos:start="389:13" pos:end="389:22"><modifier pos:start="389:28" pos:end="389:28">*</modifier></type><name pos:start="389:29" pos:end="389:32">addr</name> <init pos:start="389:34" pos:end="389:57">= <expr pos:start="389:36" pos:end="389:57"><call pos:start="389:36" pos:end="389:57"><name pos:start="389:36" pos:end="389:42">rom_ptr</name><argument_list pos:start="389:43" pos:end="389:57">(<argument pos:start="389:44" pos:end="389:56"><expr pos:start="389:44" pos:end="389:56"><name pos:start="389:44" pos:end="389:56">FLASH_ADDRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="391:13" pos:end="395:13"><if pos:start="391:13" pos:end="395:13">if <condition pos:start="391:16" pos:end="391:22">(<expr pos:start="391:17" pos:end="391:21"><operator pos:start="391:17" pos:end="391:17">!</operator><name pos:start="391:18" pos:end="391:21">addr</name></expr>)</condition> <block pos:start="391:24" pos:end="395:13">{<block_content pos:start="393:17" pos:end="393:55">

                <expr_stmt pos:start="393:17" pos:end="393:55"><expr pos:start="393:17" pos:end="393:54"><name pos:start="393:17" pos:end="393:20">addr</name> <operator pos:start="393:22" pos:end="393:22">=</operator> <call pos:start="393:24" pos:end="393:54"><name pos:start="393:24" pos:end="393:48">memory_region_get_ram_ptr</name><argument_list pos:start="393:49" pos:end="393:54">(<argument pos:start="393:50" pos:end="393:53"><expr pos:start="393:50" pos:end="393:53"><name pos:start="393:50" pos:end="393:53">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:58"><expr pos:start="397:13" pos:end="397:57"><name pos:start="397:13" pos:end="397:15">end</name> <operator pos:start="397:17" pos:end="397:17">=</operator> <operator pos:start="397:19" pos:end="397:19">(</operator><name pos:start="397:20" pos:end="397:23">void</name> <operator pos:start="397:25" pos:end="397:25">*</operator><operator pos:start="397:26" pos:end="397:26">)</operator><name pos:start="397:27" pos:end="397:30">addr</name> <operator pos:start="397:32" pos:end="397:32">+</operator> <call pos:start="397:34" pos:end="397:57"><name pos:start="397:34" pos:end="397:36">MIN</name><argument_list pos:start="397:37" pos:end="397:57">(<argument pos:start="397:38" pos:end="397:46"><expr pos:start="397:38" pos:end="397:46"><name pos:start="397:38" pos:end="397:46">bios_size</name></expr></argument>, <argument pos:start="397:49" pos:end="397:56"><expr pos:start="397:49" pos:end="397:56"><literal type="number" pos:start="397:49" pos:end="397:56">0x3e0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="399:13" pos:end="405:13">while <condition pos:start="399:19" pos:end="399:30">(<expr pos:start="399:20" pos:end="399:29"><name pos:start="399:20" pos:end="399:23">addr</name> <operator pos:start="399:25" pos:end="399:25">&lt;</operator> <name pos:start="399:27" pos:end="399:29">end</name></expr>)</condition> <block pos:start="399:32" pos:end="405:13">{<block_content pos:start="401:17" pos:end="403:23">

                <expr_stmt pos:start="401:17" pos:end="401:31"><expr pos:start="401:17" pos:end="401:30"><call pos:start="401:17" pos:end="401:30"><name pos:start="401:17" pos:end="401:24">bswap32s</name><argument_list pos:start="401:25" pos:end="401:30">(<argument pos:start="401:26" pos:end="401:29"><expr pos:start="401:26" pos:end="401:29"><name pos:start="401:26" pos:end="401:29">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="403:17" pos:end="403:23"><expr pos:start="403:17" pos:end="403:22"><name pos:start="403:17" pos:end="403:20">addr</name><operator pos:start="403:21" pos:end="403:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block>

<cpp:endif pos:start="409:1" pos:end="409:6">#<cpp:directive pos:start="409:2" pos:end="409:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="415:5" pos:end="425:7">/*

     * Map the BIOS at a 2nd physical location, as on the real board.

     * Copy it so that we can patch in the MIPS revision, which cannot be

     * handled by an overlapping region as the resulting ROM code subpage

     * regions are not executable.

     */</comment>

    <expr_stmt pos:start="427:5" pos:end="429:41"><expr pos:start="427:5" pos:end="429:40"><call pos:start="427:5" pos:end="429:40"><name pos:start="427:5" pos:end="427:26">memory_region_init_ram</name><argument_list pos:start="427:27" pos:end="429:40">(<argument pos:start="427:28" pos:end="427:36"><expr pos:start="427:28" pos:end="427:36"><name pos:start="427:28" pos:end="427:36">bios_copy</name></expr></argument>, <argument pos:start="427:39" pos:end="427:42"><expr pos:start="427:39" pos:end="427:42"><name pos:start="427:39" pos:end="427:42">NULL</name></expr></argument>, <argument pos:start="427:45" pos:end="427:54"><expr pos:start="427:45" pos:end="427:54"><literal type="string" pos:start="427:45" pos:end="427:54">"bios.1fc"</literal></expr></argument>, <argument pos:start="427:57" pos:end="427:65"><expr pos:start="427:57" pos:end="427:65"><name pos:start="427:57" pos:end="427:65">BIOS_SIZE</name></expr></argument>,

                           <argument pos:start="429:28" pos:end="429:39"><expr pos:start="429:28" pos:end="429:39"><operator pos:start="429:28" pos:end="429:28">&amp;</operator><name pos:start="429:29" pos:end="429:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="431:5" pos:end="439:5"><if pos:start="431:5" pos:end="439:5">if <condition pos:start="431:8" pos:end="433:44">(<expr pos:start="431:9" pos:end="433:43"><operator pos:start="431:9" pos:end="431:9">!</operator><call pos:start="431:10" pos:end="433:43"><name pos:start="431:10" pos:end="431:17">rom_copy</name><argument_list pos:start="431:18" pos:end="433:43">(<argument pos:start="431:19" pos:end="431:54"><expr pos:start="431:19" pos:end="431:54"><call pos:start="431:19" pos:end="431:54"><name pos:start="431:19" pos:end="431:43">memory_region_get_ram_ptr</name><argument_list pos:start="431:44" pos:end="431:54">(<argument pos:start="431:45" pos:end="431:53"><expr pos:start="431:45" pos:end="431:53"><name pos:start="431:45" pos:end="431:53">bios_copy</name></expr></argument>)</argument_list></call></expr></argument>,

                  <argument pos:start="433:19" pos:end="433:31"><expr pos:start="433:19" pos:end="433:31"><name pos:start="433:19" pos:end="433:31">FLASH_ADDRESS</name></expr></argument>, <argument pos:start="433:34" pos:end="433:42"><expr pos:start="433:34" pos:end="433:42"><name pos:start="433:34" pos:end="433:42">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="433:46" pos:end="439:5">{<block_content pos:start="435:9" pos:end="437:59">

        <expr_stmt pos:start="435:9" pos:end="437:59"><expr pos:start="435:9" pos:end="437:58"><call pos:start="435:9" pos:end="437:58"><name pos:start="435:9" pos:end="435:14">memcpy</name><argument_list pos:start="435:15" pos:end="437:58">(<argument pos:start="435:16" pos:end="435:51"><expr pos:start="435:16" pos:end="435:51"><call pos:start="435:16" pos:end="435:51"><name pos:start="435:16" pos:end="435:40">memory_region_get_ram_ptr</name><argument_list pos:start="435:41" pos:end="435:51">(<argument pos:start="435:42" pos:end="435:50"><expr pos:start="435:42" pos:end="435:50"><name pos:start="435:42" pos:end="435:50">bios_copy</name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="437:16" pos:end="437:46"><expr pos:start="437:16" pos:end="437:46"><call pos:start="437:16" pos:end="437:46"><name pos:start="437:16" pos:end="437:40">memory_region_get_ram_ptr</name><argument_list pos:start="437:41" pos:end="437:46">(<argument pos:start="437:42" pos:end="437:45"><expr pos:start="437:42" pos:end="437:45"><name pos:start="437:42" pos:end="437:45">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="437:49" pos:end="437:57"><expr pos:start="437:49" pos:end="437:57"><name pos:start="437:49" pos:end="437:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:48"><expr pos:start="441:5" pos:end="441:47"><call pos:start="441:5" pos:end="441:47"><name pos:start="441:5" pos:end="441:30">memory_region_set_readonly</name><argument_list pos:start="441:31" pos:end="441:47">(<argument pos:start="441:32" pos:end="441:40"><expr pos:start="441:32" pos:end="441:40"><name pos:start="441:32" pos:end="441:40">bios_copy</name></expr></argument>, <argument pos:start="441:43" pos:end="441:46"><expr pos:start="441:43" pos:end="441:46"><name pos:start="441:43" pos:end="441:46">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="443:5" pos:end="443:73"><expr pos:start="443:5" pos:end="443:72"><call pos:start="443:5" pos:end="443:72"><name pos:start="443:5" pos:end="443:31">memory_region_add_subregion</name><argument_list pos:start="443:32" pos:end="443:72">(<argument pos:start="443:33" pos:end="443:45"><expr pos:start="443:33" pos:end="443:45"><name pos:start="443:33" pos:end="443:45">system_memory</name></expr></argument>, <argument pos:start="443:48" pos:end="443:60"><expr pos:start="443:48" pos:end="443:60"><name pos:start="443:48" pos:end="443:60">RESET_ADDRESS</name></expr></argument>, <argument pos:start="443:63" pos:end="443:71"><expr pos:start="443:63" pos:end="443:71"><name pos:start="443:63" pos:end="443:71">bios_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="447:5" pos:end="447:52">/* Board ID = 0x420 (Malta Board with CoreLV) */</comment>

    <expr_stmt pos:start="449:5" pos:end="449:67"><expr pos:start="449:5" pos:end="449:66"><call pos:start="449:5" pos:end="449:66"><name pos:start="449:5" pos:end="449:9">stl_p</name><argument_list pos:start="449:10" pos:end="449:66">(<argument pos:start="449:11" pos:end="449:53"><expr pos:start="449:11" pos:end="449:53"><call pos:start="449:11" pos:end="449:46"><name pos:start="449:11" pos:end="449:35">memory_region_get_ram_ptr</name><argument_list pos:start="449:36" pos:end="449:46">(<argument pos:start="449:37" pos:end="449:45"><expr pos:start="449:37" pos:end="449:45"><name pos:start="449:37" pos:end="449:45">bios_copy</name></expr></argument>)</argument_list></call> <operator pos:start="449:48" pos:end="449:48">+</operator> <literal type="number" pos:start="449:50" pos:end="449:53">0x10</literal></expr></argument>, <argument pos:start="449:56" pos:end="449:65"><expr pos:start="449:56" pos:end="449:65"><literal type="number" pos:start="449:56" pos:end="449:65">0x00000420</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="453:5" pos:end="453:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="455:5" pos:end="455:31"><expr pos:start="455:5" pos:end="455:30"><call pos:start="455:5" pos:end="455:30"><name pos:start="455:5" pos:end="455:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="455:26" pos:end="455:30">(<argument pos:start="455:27" pos:end="455:29"><expr pos:start="455:27" pos:end="455:29"><name pos:start="455:27" pos:end="455:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="457:5" pos:end="457:29"><expr pos:start="457:5" pos:end="457:28"><call pos:start="457:5" pos:end="457:28"><name pos:start="457:5" pos:end="457:23">cpu_mips_clock_init</name><argument_list pos:start="457:24" pos:end="457:28">(<argument pos:start="457:25" pos:end="457:27"><expr pos:start="457:25" pos:end="457:27"><name pos:start="457:25" pos:end="457:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="461:5" pos:end="473:7">/*

     * We have a circular dependency problem: pci_bus depends on isa_irq,

     * isa_irq is provided by i8259, i8259 depends on ISA, ISA depends

     * on piix4, and piix4 depends on pci_bus.  To stop the cycle we have

     * qemu_irq_proxy() adds an extra bit of indirection, allowing us

     * to resolve the isa_irq -&gt; i8259 dependency after i8259 is initialized.

     */</comment>

    <expr_stmt pos:start="475:5" pos:end="475:44"><expr pos:start="475:5" pos:end="475:43"><name pos:start="475:5" pos:end="475:11">isa_irq</name> <operator pos:start="475:13" pos:end="475:13">=</operator> <call pos:start="475:15" pos:end="475:43"><name pos:start="475:15" pos:end="475:28">qemu_irq_proxy</name><argument_list pos:start="475:29" pos:end="475:43">(<argument pos:start="475:30" pos:end="475:38"><expr pos:start="475:30" pos:end="475:38"><operator pos:start="475:30" pos:end="475:30">&amp;</operator><name pos:start="475:31" pos:end="475:38"><name pos:start="475:31" pos:end="475:31">s</name><operator pos:start="475:32" pos:end="475:33">-&gt;</operator><name pos:start="475:34" pos:end="475:38">i8259</name></name></expr></argument>, <argument pos:start="475:41" pos:end="475:42"><expr pos:start="475:41" pos:end="475:42"><literal type="number" pos:start="475:41" pos:end="475:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="479:5" pos:end="479:21">/* Northbridge */</comment>

    <expr_stmt pos:start="481:5" pos:end="481:40"><expr pos:start="481:5" pos:end="481:39"><name pos:start="481:5" pos:end="481:11">pci_bus</name> <operator pos:start="481:13" pos:end="481:13">=</operator> <call pos:start="481:15" pos:end="481:39"><name pos:start="481:15" pos:end="481:30">gt64120_register</name><argument_list pos:start="481:31" pos:end="481:39">(<argument pos:start="481:32" pos:end="481:38"><expr pos:start="481:32" pos:end="481:38"><name pos:start="481:32" pos:end="481:38">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="485:5" pos:end="485:21">/* Southbridge */</comment>

    <expr_stmt pos:start="487:5" pos:end="487:38"><expr pos:start="487:5" pos:end="487:37"><call pos:start="487:5" pos:end="487:37"><name pos:start="487:5" pos:end="487:17">ide_drive_get</name><argument_list pos:start="487:18" pos:end="487:37">(<argument pos:start="487:19" pos:end="487:20"><expr pos:start="487:19" pos:end="487:20"><name pos:start="487:19" pos:end="487:20">hd</name></expr></argument>, <argument pos:start="487:23" pos:end="487:36"><expr pos:start="487:23" pos:end="487:36"><call pos:start="487:23" pos:end="487:36"><name pos:start="487:23" pos:end="487:32">ARRAY_SIZE</name><argument_list pos:start="487:33" pos:end="487:36">(<argument pos:start="487:34" pos:end="487:35"><expr pos:start="487:34" pos:end="487:35"><name pos:start="487:34" pos:end="487:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="491:5" pos:end="491:52"><expr pos:start="491:5" pos:end="491:51"><name pos:start="491:5" pos:end="491:15">piix4_devfn</name> <operator pos:start="491:17" pos:end="491:17">=</operator> <call pos:start="491:19" pos:end="491:51"><name pos:start="491:19" pos:end="491:28">piix4_init</name><argument_list pos:start="491:29" pos:end="491:51">(<argument pos:start="491:30" pos:end="491:36"><expr pos:start="491:30" pos:end="491:36"><name pos:start="491:30" pos:end="491:36">pci_bus</name></expr></argument>, <argument pos:start="491:39" pos:end="491:46"><expr pos:start="491:39" pos:end="491:46"><operator pos:start="491:39" pos:end="491:39">&amp;</operator><name pos:start="491:40" pos:end="491:46">isa_bus</name></expr></argument>, <argument pos:start="491:49" pos:end="491:50"><expr pos:start="491:49" pos:end="491:50"><literal type="number" pos:start="491:49" pos:end="491:50">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="495:5" pos:end="495:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="497:5" pos:end="497:71">/* The 8259 is attached to the MIPS CPU INT0 pin, ie interrupt 2 */</comment>

    <expr_stmt pos:start="499:5" pos:end="499:48"><expr pos:start="499:5" pos:end="499:47"><name pos:start="499:5" pos:end="499:12"><name pos:start="499:5" pos:end="499:5">s</name><operator pos:start="499:6" pos:end="499:7">-&gt;</operator><name pos:start="499:8" pos:end="499:12">i8259</name></name> <operator pos:start="499:14" pos:end="499:14">=</operator> <call pos:start="499:16" pos:end="499:47"><name pos:start="499:16" pos:end="499:25">i8259_init</name><argument_list pos:start="499:26" pos:end="499:47">(<argument pos:start="499:27" pos:end="499:33"><expr pos:start="499:27" pos:end="499:33"><name pos:start="499:27" pos:end="499:33">isa_bus</name></expr></argument>, <argument pos:start="499:36" pos:end="499:46"><expr pos:start="499:36" pos:end="499:46"><name pos:start="499:36" pos:end="499:46"><name pos:start="499:36" pos:end="499:38">env</name><operator pos:start="499:39" pos:end="499:40">-&gt;</operator><name pos:start="499:41" pos:end="499:43">irq</name><index pos:start="499:44" pos:end="499:46">[<expr pos:start="499:45" pos:end="499:45"><literal type="number" pos:start="499:45" pos:end="499:45">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="503:5" pos:end="503:36"><expr pos:start="503:5" pos:end="503:35"><call pos:start="503:5" pos:end="503:35"><name pos:start="503:5" pos:end="503:16">isa_bus_irqs</name><argument_list pos:start="503:17" pos:end="503:35">(<argument pos:start="503:18" pos:end="503:24"><expr pos:start="503:18" pos:end="503:24"><name pos:start="503:18" pos:end="503:24">isa_bus</name></expr></argument>, <argument pos:start="503:27" pos:end="503:34"><expr pos:start="503:27" pos:end="503:34"><name pos:start="503:27" pos:end="503:34"><name pos:start="503:27" pos:end="503:27">s</name><operator pos:start="503:28" pos:end="503:29">-&gt;</operator><name pos:start="503:30" pos:end="503:34">i8259</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="505:5" pos:end="505:53"><expr pos:start="505:5" pos:end="505:52"><call pos:start="505:5" pos:end="505:52"><name pos:start="505:5" pos:end="505:22">pci_piix4_ide_init</name><argument_list pos:start="505:23" pos:end="505:52">(<argument pos:start="505:24" pos:end="505:30"><expr pos:start="505:24" pos:end="505:30"><name pos:start="505:24" pos:end="505:30">pci_bus</name></expr></argument>, <argument pos:start="505:33" pos:end="505:34"><expr pos:start="505:33" pos:end="505:34"><name pos:start="505:33" pos:end="505:34">hd</name></expr></argument>, <argument pos:start="505:37" pos:end="505:51"><expr pos:start="505:37" pos:end="505:51"><name pos:start="505:37" pos:end="505:47">piix4_devfn</name> <operator pos:start="505:49" pos:end="505:49">+</operator> <literal type="number" pos:start="505:51" pos:end="505:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="507:5" pos:end="507:66"><expr pos:start="507:5" pos:end="507:65"><call pos:start="507:5" pos:end="507:65"><name pos:start="507:5" pos:end="507:21">pci_create_simple</name><argument_list pos:start="507:22" pos:end="507:65">(<argument pos:start="507:23" pos:end="507:29"><expr pos:start="507:23" pos:end="507:29"><name pos:start="507:23" pos:end="507:29">pci_bus</name></expr></argument>, <argument pos:start="507:32" pos:end="507:46"><expr pos:start="507:32" pos:end="507:46"><name pos:start="507:32" pos:end="507:42">piix4_devfn</name> <operator pos:start="507:44" pos:end="507:44">+</operator> <literal type="number" pos:start="507:46" pos:end="507:46">2</literal></expr></argument>, <argument pos:start="507:49" pos:end="507:64"><expr pos:start="507:49" pos:end="507:64"><literal type="string" pos:start="507:49" pos:end="507:64">"piix4-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="509:5" pos:end="511:69"><expr pos:start="509:5" pos:end="511:68"><name pos:start="509:5" pos:end="509:9">smbus</name> <operator pos:start="509:11" pos:end="509:11">=</operator> <call pos:start="509:13" pos:end="511:68"><name pos:start="509:13" pos:end="509:25">piix4_pm_init</name><argument_list pos:start="509:26" pos:end="511:68">(<argument pos:start="509:27" pos:end="509:33"><expr pos:start="509:27" pos:end="509:33"><name pos:start="509:27" pos:end="509:33">pci_bus</name></expr></argument>, <argument pos:start="509:36" pos:end="509:50"><expr pos:start="509:36" pos:end="509:50"><name pos:start="509:36" pos:end="509:46">piix4_devfn</name> <operator pos:start="509:48" pos:end="509:48">+</operator> <literal type="number" pos:start="509:50" pos:end="509:50">3</literal></expr></argument>, <argument pos:start="509:53" pos:end="509:58"><expr pos:start="509:53" pos:end="509:58"><literal type="number" pos:start="509:53" pos:end="509:58">0x1100</literal></expr></argument>,

                          <argument pos:start="511:27" pos:end="511:46"><expr pos:start="511:27" pos:end="511:46"><call pos:start="511:27" pos:end="511:46"><name pos:start="511:27" pos:end="511:37">isa_get_irq</name><argument_list pos:start="511:38" pos:end="511:46">(<argument pos:start="511:39" pos:end="511:42"><expr pos:start="511:39" pos:end="511:42"><name pos:start="511:39" pos:end="511:42">NULL</name></expr></argument>, <argument pos:start="511:45" pos:end="511:45"><expr pos:start="511:45" pos:end="511:45"><literal type="number" pos:start="511:45" pos:end="511:45">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="511:49" pos:end="511:52"><expr pos:start="511:49" pos:end="511:52"><name pos:start="511:49" pos:end="511:52">NULL</name></expr></argument>, <argument pos:start="511:55" pos:end="511:55"><expr pos:start="511:55" pos:end="511:55"><literal type="number" pos:start="511:55" pos:end="511:55">0</literal></expr></argument>, <argument pos:start="511:58" pos:end="511:61"><expr pos:start="511:58" pos:end="511:61"><name pos:start="511:58" pos:end="511:61">NULL</name></expr></argument>, <argument pos:start="511:64" pos:end="511:67"><expr pos:start="511:64" pos:end="511:67"><name pos:start="511:64" pos:end="511:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:69"><expr pos:start="513:5" pos:end="513:68"><call pos:start="513:5" pos:end="513:68"><name pos:start="513:5" pos:end="513:21">smbus_eeprom_init</name><argument_list pos:start="513:22" pos:end="513:68">(<argument pos:start="513:23" pos:end="513:27"><expr pos:start="513:23" pos:end="513:27"><name pos:start="513:23" pos:end="513:27">smbus</name></expr></argument>, <argument pos:start="513:30" pos:end="513:30"><expr pos:start="513:30" pos:end="513:30"><literal type="number" pos:start="513:30" pos:end="513:30">8</literal></expr></argument>, <argument pos:start="513:33" pos:end="513:48"><expr pos:start="513:33" pos:end="513:48"><name pos:start="513:33" pos:end="513:48">smbus_eeprom_buf</name></expr></argument>, <argument pos:start="513:51" pos:end="513:67"><expr pos:start="513:51" pos:end="513:67"><name pos:start="513:51" pos:end="513:67">smbus_eeprom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:29"><expr pos:start="515:5" pos:end="515:28"><call pos:start="515:5" pos:end="515:28"><name pos:start="515:5" pos:end="515:10">g_free</name><argument_list pos:start="515:11" pos:end="515:28">(<argument pos:start="515:12" pos:end="515:27"><expr pos:start="515:12" pos:end="515:27"><name pos:start="515:12" pos:end="515:27">smbus_eeprom_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:43"><expr pos:start="517:5" pos:end="517:42"><name pos:start="517:5" pos:end="517:7">pit</name> <operator pos:start="517:9" pos:end="517:9">=</operator> <call pos:start="517:11" pos:end="517:42"><name pos:start="517:11" pos:end="517:18">pit_init</name><argument_list pos:start="517:19" pos:end="517:42">(<argument pos:start="517:20" pos:end="517:26"><expr pos:start="517:20" pos:end="517:26"><name pos:start="517:20" pos:end="517:26">isa_bus</name></expr></argument>, <argument pos:start="517:29" pos:end="517:32"><expr pos:start="517:29" pos:end="517:32"><literal type="number" pos:start="517:29" pos:end="517:32">0x40</literal></expr></argument>, <argument pos:start="517:35" pos:end="517:35"><expr pos:start="517:35" pos:end="517:35"><literal type="number" pos:start="517:35" pos:end="517:35">0</literal></expr></argument>, <argument pos:start="517:38" pos:end="517:41"><expr pos:start="517:38" pos:end="517:41"><name pos:start="517:38" pos:end="517:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:65"><expr pos:start="519:5" pos:end="519:64"><name pos:start="519:5" pos:end="519:16">cpu_exit_irq</name> <operator pos:start="519:18" pos:end="519:18">=</operator> <call pos:start="519:20" pos:end="519:64"><name pos:start="519:20" pos:end="519:37">qemu_allocate_irqs</name><argument_list pos:start="519:38" pos:end="519:64">(<argument pos:start="519:39" pos:end="519:54"><expr pos:start="519:39" pos:end="519:54"><name pos:start="519:39" pos:end="519:54">cpu_request_exit</name></expr></argument>, <argument pos:start="519:57" pos:end="519:60"><expr pos:start="519:57" pos:end="519:60"><name pos:start="519:57" pos:end="519:60">NULL</name></expr></argument>, <argument pos:start="519:63" pos:end="519:63"><expr pos:start="519:63" pos:end="519:63"><literal type="number" pos:start="519:63" pos:end="519:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:30"><expr pos:start="521:5" pos:end="521:29"><call pos:start="521:5" pos:end="521:29"><name pos:start="521:5" pos:end="521:12">DMA_init</name><argument_list pos:start="521:13" pos:end="521:29">(<argument pos:start="521:14" pos:end="521:14"><expr pos:start="521:14" pos:end="521:14"><literal type="number" pos:start="521:14" pos:end="521:14">0</literal></expr></argument>, <argument pos:start="521:17" pos:end="521:28"><expr pos:start="521:17" pos:end="521:28"><name pos:start="521:17" pos:end="521:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="525:5" pos:end="525:19">/* Super I/O */</comment>

    <expr_stmt pos:start="527:5" pos:end="527:40"><expr pos:start="527:5" pos:end="527:39"><call pos:start="527:5" pos:end="527:39"><name pos:start="527:5" pos:end="527:21">isa_create_simple</name><argument_list pos:start="527:22" pos:end="527:39">(<argument pos:start="527:23" pos:end="527:29"><expr pos:start="527:23" pos:end="527:29"><name pos:start="527:23" pos:end="527:29">isa_bus</name></expr></argument>, <argument pos:start="527:32" pos:end="527:38"><expr pos:start="527:32" pos:end="527:38"><literal type="string" pos:start="527:32" pos:end="527:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="531:5" pos:end="531:34"><expr pos:start="531:5" pos:end="531:33"><call pos:start="531:5" pos:end="531:33"><name pos:start="531:5" pos:end="531:12">rtc_init</name><argument_list pos:start="531:13" pos:end="531:33">(<argument pos:start="531:14" pos:end="531:20"><expr pos:start="531:14" pos:end="531:20"><name pos:start="531:14" pos:end="531:20">isa_bus</name></expr></argument>, <argument pos:start="531:23" pos:end="531:26"><expr pos:start="531:23" pos:end="531:26"><literal type="number" pos:start="531:23" pos:end="531:26">2000</literal></expr></argument>, <argument pos:start="531:29" pos:end="531:32"><expr pos:start="531:29" pos:end="531:32"><name pos:start="531:29" pos:end="531:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="533:5" pos:end="533:36"><expr pos:start="533:5" pos:end="533:35"><call pos:start="533:5" pos:end="533:35"><name pos:start="533:5" pos:end="533:23">serial_hds_isa_init</name><argument_list pos:start="533:24" pos:end="533:35">(<argument pos:start="533:25" pos:end="533:31"><expr pos:start="533:25" pos:end="533:31"><name pos:start="533:25" pos:end="533:31">isa_bus</name></expr></argument>, <argument pos:start="533:34" pos:end="533:34"><expr pos:start="533:34" pos:end="533:34"><literal type="number" pos:start="533:34" pos:end="533:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="535:38"><expr pos:start="535:5" pos:end="535:37"><call pos:start="535:5" pos:end="535:37"><name pos:start="535:5" pos:end="535:25">parallel_hds_isa_init</name><argument_list pos:start="535:26" pos:end="535:37">(<argument pos:start="535:27" pos:end="535:33"><expr pos:start="535:27" pos:end="535:33"><name pos:start="535:27" pos:end="535:33">isa_bus</name></expr></argument>, <argument pos:start="535:36" pos:end="535:36"><expr pos:start="535:36" pos:end="535:36"><literal type="number" pos:start="535:36" pos:end="535:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="539:5" pos:end="543:5">for<control pos:start="539:8" pos:end="539:31">(<init pos:start="539:9" pos:end="539:14"><expr pos:start="539:9" pos:end="539:13"><name pos:start="539:9" pos:end="539:9">i</name> <operator pos:start="539:11" pos:end="539:11">=</operator> <literal type="number" pos:start="539:13" pos:end="539:13">0</literal></expr>;</init> <condition pos:start="539:16" pos:end="539:26"><expr pos:start="539:16" pos:end="539:25"><name pos:start="539:16" pos:end="539:16">i</name> <operator pos:start="539:18" pos:end="539:18">&lt;</operator> <name pos:start="539:20" pos:end="539:25">MAX_FD</name></expr>;</condition> <incr pos:start="539:28" pos:end="539:30"><expr pos:start="539:28" pos:end="539:30"><name pos:start="539:28" pos:end="539:28">i</name><operator pos:start="539:29" pos:end="539:30">++</operator></expr></incr>)</control> <block pos:start="539:33" pos:end="543:5">{<block_content pos:start="541:9" pos:end="541:43">

        <expr_stmt pos:start="541:9" pos:end="541:43"><expr pos:start="541:9" pos:end="541:42"><name pos:start="541:9" pos:end="541:13"><name pos:start="541:9" pos:end="541:10">fd</name><index pos:start="541:11" pos:end="541:13">[<expr pos:start="541:12" pos:end="541:12"><name pos:start="541:12" pos:end="541:12">i</name></expr>]</index></name> <operator pos:start="541:15" pos:end="541:15">=</operator> <call pos:start="541:17" pos:end="541:42"><name pos:start="541:17" pos:end="541:25">drive_get</name><argument_list pos:start="541:26" pos:end="541:42">(<argument pos:start="541:27" pos:end="541:35"><expr pos:start="541:27" pos:end="541:35"><name pos:start="541:27" pos:end="541:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="541:38" pos:end="541:38"><expr pos:start="541:38" pos:end="541:38"><literal type="number" pos:start="541:38" pos:end="541:38">0</literal></expr></argument>, <argument pos:start="541:41" pos:end="541:41"><expr pos:start="541:41" pos:end="541:41"><name pos:start="541:41" pos:end="541:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="545:5" pos:end="545:33"><expr pos:start="545:5" pos:end="545:32"><call pos:start="545:5" pos:end="545:32"><name pos:start="545:5" pos:end="545:19">fdctrl_init_isa</name><argument_list pos:start="545:20" pos:end="545:32">(<argument pos:start="545:21" pos:end="545:27"><expr pos:start="545:21" pos:end="545:27"><name pos:start="545:21" pos:end="545:27">isa_bus</name></expr></argument>, <argument pos:start="545:30" pos:end="545:31"><expr pos:start="545:30" pos:end="545:31"><name pos:start="545:30" pos:end="545:31">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="549:5" pos:end="549:22">/* Network card */</comment>

    <expr_stmt pos:start="551:5" pos:end="551:26"><expr pos:start="551:5" pos:end="551:25"><call pos:start="551:5" pos:end="551:25"><name pos:start="551:5" pos:end="551:16">network_init</name><argument_list pos:start="551:17" pos:end="551:25">(<argument pos:start="551:18" pos:end="551:24"><expr pos:start="551:18" pos:end="551:24"><name pos:start="551:18" pos:end="551:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="555:5" pos:end="555:33">/* Optional PCI video card */</comment>

    <expr_stmt pos:start="557:5" pos:end="557:26"><expr pos:start="557:5" pos:end="557:25"><call pos:start="557:5" pos:end="557:25"><name pos:start="557:5" pos:end="557:16">pci_vga_init</name><argument_list pos:start="557:17" pos:end="557:25">(<argument pos:start="557:18" pos:end="557:24"><expr pos:start="557:18" pos:end="557:24"><name pos:start="557:18" pos:end="557:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
