<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22401.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">X86CPU</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:25">pc_new_cpu</name><parameter_list pos:start="1:26" pos:end="3:64">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:47">cpu_model</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:56">int64_t</name></type> <name pos:start="1:58" pos:end="1:64">apic_id</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:49"><decl pos:start="3:27" pos:end="3:49"><type pos:start="3:27" pos:end="3:49"><name pos:start="3:27" pos:end="3:37">DeviceState</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:49">icc_bridge</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:63"><decl pos:start="3:52" pos:end="3:63"><type pos:start="3:52" pos:end="3:63"><name pos:start="3:52" pos:end="3:56">Error</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier><modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:63">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:15">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">X86CPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:22">= <expr pos:start="7:19" pos:end="7:22"><name pos:start="7:19" pos:end="7:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:18">icc_bridge</name> <operator pos:start="13:20" pos:end="13:21">==</operator> <name pos:start="13:23" pos:end="13:26">NULL</name></expr>)</condition> <block pos:start="13:29" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:59"><expr pos:start="15:9" pos:end="15:58"><call pos:start="15:9" pos:end="15:58"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:58">(<argument pos:start="15:20" pos:end="15:29"><expr pos:start="15:20" pos:end="15:29"><operator pos:start="15:20" pos:end="15:20">&amp;</operator><name pos:start="15:21" pos:end="15:29">local_err</name></expr></argument>, <argument pos:start="15:32" pos:end="15:57"><expr pos:start="15:32" pos:end="15:57"><literal type="string" pos:start="15:32" pos:end="15:57">"Invalid icc-bridge value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:48"><expr pos:start="23:5" pos:end="23:47"><name pos:start="23:5" pos:end="23:7">cpu</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:47"><name pos:start="23:11" pos:end="23:24">cpu_x86_create</name><argument_list pos:start="23:25" pos:end="23:47">(<argument pos:start="23:26" pos:end="23:34"><expr pos:start="23:26" pos:end="23:34"><name pos:start="23:26" pos:end="23:34">cpu_model</name></expr></argument>, <argument pos:start="23:37" pos:end="23:46"><expr pos:start="23:37" pos:end="23:46"><operator pos:start="23:37" pos:end="23:37">&amp;</operator><name pos:start="23:38" pos:end="23:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:26">(<expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:17">local_err</name> <operator pos:start="25:19" pos:end="25:20">!=</operator> <name pos:start="25:22" pos:end="25:25">NULL</name></expr>)</condition> <block pos:start="25:28" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:17">

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:76"><expr pos:start="33:5" pos:end="33:75"><call pos:start="33:5" pos:end="33:75"><name pos:start="33:5" pos:end="33:23">qdev_set_parent_bus</name><argument_list pos:start="33:24" pos:end="33:75">(<argument pos:start="33:25" pos:end="33:35"><expr pos:start="33:25" pos:end="33:35"><call pos:start="33:25" pos:end="33:35"><name pos:start="33:25" pos:end="33:30">DEVICE</name><argument_list pos:start="33:31" pos:end="33:35">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:38" pos:end="33:74"><expr pos:start="33:38" pos:end="33:74"><call pos:start="33:38" pos:end="33:74"><name pos:start="33:38" pos:end="33:55">qdev_get_child_bus</name><argument_list pos:start="33:56" pos:end="33:74">(<argument pos:start="33:57" pos:end="33:66"><expr pos:start="33:57" pos:end="33:66"><name pos:start="33:57" pos:end="33:66">icc_bridge</name></expr></argument>, <argument pos:start="33:69" pos:end="33:73"><expr pos:start="33:69" pos:end="33:73"><literal type="string" pos:start="33:69" pos:end="33:73">"icc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:73"><expr pos:start="37:5" pos:end="37:72"><call pos:start="37:5" pos:end="37:72"><name pos:start="37:5" pos:end="37:27">object_property_set_int</name><argument_list pos:start="37:28" pos:end="37:72">(<argument pos:start="37:29" pos:end="37:39"><expr pos:start="37:29" pos:end="37:39"><call pos:start="37:29" pos:end="37:39"><name pos:start="37:29" pos:end="37:34">OBJECT</name><argument_list pos:start="37:35" pos:end="37:39">(<argument pos:start="37:36" pos:end="37:38"><expr pos:start="37:36" pos:end="37:38"><name pos:start="37:36" pos:end="37:38">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:42" pos:end="37:48"><expr pos:start="37:42" pos:end="37:48"><name pos:start="37:42" pos:end="37:48">apic_id</name></expr></argument>, <argument pos:start="37:51" pos:end="37:59"><expr pos:start="37:51" pos:end="37:59"><literal type="string" pos:start="37:51" pos:end="37:59">"apic-id"</literal></expr></argument>, <argument pos:start="37:62" pos:end="37:71"><expr pos:start="37:62" pos:end="37:71"><operator pos:start="37:62" pos:end="37:62">&amp;</operator><name pos:start="37:63" pos:end="37:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:72"><expr pos:start="39:5" pos:end="39:71"><call pos:start="39:5" pos:end="39:71"><name pos:start="39:5" pos:end="39:28">object_property_set_bool</name><argument_list pos:start="39:29" pos:end="39:71">(<argument pos:start="39:30" pos:end="39:40"><expr pos:start="39:30" pos:end="39:40"><call pos:start="39:30" pos:end="39:40"><name pos:start="39:30" pos:end="39:35">OBJECT</name><argument_list pos:start="39:36" pos:end="39:40">(<argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><name pos:start="39:37" pos:end="39:39">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:43" pos:end="39:46"><expr pos:start="39:43" pos:end="39:46"><name pos:start="39:43" pos:end="39:46">true</name></expr></argument>, <argument pos:start="39:49" pos:end="39:58"><expr pos:start="39:49" pos:end="39:58"><literal type="string" pos:start="39:49" pos:end="39:58">"realized"</literal></expr></argument>, <argument pos:start="39:61" pos:end="39:70"><expr pos:start="39:61" pos:end="39:70"><operator pos:start="39:61" pos:end="39:61">&amp;</operator><name pos:start="39:62" pos:end="39:70">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="43:1" pos:end="43:4"><name pos:start="43:1" pos:end="43:3">out</name>:</label>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:17">local_err</name></expr>)</condition> <block pos:start="45:20" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:19">

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:23">error_propagate</name><argument_list pos:start="47:24" pos:end="47:40">(<argument pos:start="47:25" pos:end="47:28"><expr pos:start="47:25" pos:end="47:28"><name pos:start="47:25" pos:end="47:28">errp</name></expr></argument>, <argument pos:start="47:31" pos:end="47:39"><expr pos:start="47:31" pos:end="47:39"><name pos:start="47:31" pos:end="47:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><call pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:20">object_unref</name><argument_list pos:start="49:21" pos:end="49:33">(<argument pos:start="49:22" pos:end="49:32"><expr pos:start="49:22" pos:end="49:32"><call pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:27">OBJECT</name><argument_list pos:start="49:28" pos:end="49:32">(<argument pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:31">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">cpu</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="55:5" pos:end="55:15">return <expr pos:start="55:12" pos:end="55:14"><name pos:start="55:12" pos:end="55:14">cpu</name></expr>;</return>

</block_content>}</block></function>
</unit>
