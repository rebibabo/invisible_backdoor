<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16485.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:39"><name pos:start="1:1" pos:end="1:25">vnc_socket_ip_addr_string</name><argument_list pos:start="1:26" pos:end="5:39">(<argument pos:start="1:27" pos:end="1:47">QIOChannelSocket *ioc</argument>,

                          <argument pos:start="3:27" pos:end="3:36">bool local</argument>,

                          <argument pos:start="5:27" pos:end="5:38">Error **errp</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="47:1">{<block_content pos:start="9:5" pos:end="45:15">

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">SocketAddress</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:13">local</name></expr>)</condition> <block pos:start="15:16" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:63">

        <expr_stmt pos:start="17:9" pos:end="17:63"><expr pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:12">addr</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:62"><name pos:start="17:16" pos:end="17:51">qio_channel_socket_get_local_address</name><argument_list pos:start="17:52" pos:end="17:62">(<argument pos:start="17:53" pos:end="17:55"><expr pos:start="17:53" pos:end="17:55"><name pos:start="17:53" pos:end="17:55">ioc</name></expr></argument>, <argument pos:start="17:58" pos:end="17:61"><expr pos:start="17:58" pos:end="17:61"><name pos:start="17:58" pos:end="17:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:64">

        <expr_stmt pos:start="21:9" pos:end="21:64"><expr pos:start="21:9" pos:end="21:63"><name pos:start="21:9" pos:end="21:12">addr</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:63"><name pos:start="21:16" pos:end="21:52">qio_channel_socket_get_remote_address</name><argument_list pos:start="21:53" pos:end="21:63">(<argument pos:start="21:54" pos:end="21:56"><expr pos:start="21:54" pos:end="21:56"><name pos:start="21:54" pos:end="21:56">ioc</name></expr></argument>, <argument pos:start="21:59" pos:end="21:62"><expr pos:start="21:59" pos:end="21:62"><name pos:start="21:59" pos:end="21:62">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:14">(<expr pos:start="25:9" pos:end="25:13"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:13">addr</name></expr>)</condition> <block pos:start="25:16" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:20">

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:47">(<expr pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:12">addr</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:18">type</name></name> <operator pos:start="33:20" pos:end="33:21">!=</operator> <name pos:start="33:23" pos:end="33:46">SOCKET_ADDRESS_KIND_INET</name></expr>)</condition> <block pos:start="33:49" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:20">

        <expr_stmt pos:start="35:9" pos:end="35:52"><expr pos:start="35:9" pos:end="35:51"><call pos:start="35:9" pos:end="35:51"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:51">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:50"><expr pos:start="35:26" pos:end="35:50"><literal type="string" pos:start="35:26" pos:end="35:50">"Not an inet socket type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:75"><expr pos:start="41:5" pos:end="41:74"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:74"><name pos:start="41:11" pos:end="41:25">g_strdup_printf</name><argument_list pos:start="41:26" pos:end="41:74">(<argument pos:start="41:27" pos:end="41:33"><expr pos:start="41:27" pos:end="41:33"><literal type="string" pos:start="41:27" pos:end="41:33">"%s;%s"</literal></expr></argument>, <argument pos:start="41:36" pos:end="41:53"><expr pos:start="41:36" pos:end="41:53"><name pos:start="41:36" pos:end="41:53"><name pos:start="41:36" pos:end="41:39">addr</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:42">u</name><operator pos:start="41:43" pos:end="41:43">.</operator><name pos:start="41:44" pos:end="41:47">inet</name><operator pos:start="41:48" pos:end="41:49">-&gt;</operator><name pos:start="41:50" pos:end="41:53">host</name></name></expr></argument>, <argument pos:start="41:56" pos:end="41:73"><expr pos:start="41:56" pos:end="41:73"><name pos:start="41:56" pos:end="41:73"><name pos:start="41:56" pos:end="41:59">addr</name><operator pos:start="41:60" pos:end="41:61">-&gt;</operator><name pos:start="41:62" pos:end="41:62">u</name><operator pos:start="41:63" pos:end="41:63">.</operator><name pos:start="41:64" pos:end="41:67">inet</name><operator pos:start="41:68" pos:end="41:69">-&gt;</operator><name pos:start="41:70" pos:end="41:73">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><call pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:27">qapi_free_SocketAddress</name><argument_list pos:start="43:28" pos:end="43:33">(<argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:15">return <expr pos:start="45:12" pos:end="45:14"><name pos:start="45:12" pos:end="45:14">ret</name></expr>;</return>

</block_content>}</block>
</unit>
