<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2161.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">set_kernel_args_old</name><parameter_list pos:start="1:32" pos:end="1:65">(<parameter pos:start="1:33" pos:end="1:64"><decl pos:start="1:33" pos:end="1:64"><type pos:start="1:33" pos:end="1:64"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:44">struct</name> <name pos:start="1:46" pos:end="1:58">arm_boot_info</name></name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">target_phys_addr_t</name></type> <name pos:start="5:24" pos:end="5:24">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">initrd_size</name> <init pos:start="9:21" pos:end="9:39">= <expr pos:start="9:23" pos:end="9:39"><name pos:start="9:23" pos:end="9:39"><name pos:start="9:23" pos:end="9:26">info</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:39">initrd_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:49"><decl pos:start="11:5" pos:end="11:48"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">target_phys_addr_t</name></type> <name pos:start="11:24" pos:end="11:27">base</name> <init pos:start="11:29" pos:end="11:48">= <expr pos:start="11:31" pos:end="11:48"><name pos:start="11:31" pos:end="11:48"><name pos:start="11:31" pos:end="11:34">info</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:48">loader_start</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:43">/* see linux/include/asm-arm/setup.h */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:5">p</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <name pos:start="17:9" pos:end="17:12">base</name> <operator pos:start="17:14" pos:end="17:14">+</operator> <name pos:start="17:16" pos:end="17:31">KERNEL_ARGS_ADDR</name></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:19">/* page_size */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><call pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:14">WRITE_WORD</name><argument_list pos:start="21:15" pos:end="21:23">(<argument pos:start="21:16" pos:end="21:16"><expr pos:start="21:16" pos:end="21:16"><name pos:start="21:16" pos:end="21:16">p</name></expr></argument>, <argument pos:start="21:19" pos:end="21:22"><expr pos:start="21:19" pos:end="21:22"><literal type="number" pos:start="21:19" pos:end="21:22">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:18">/* nr_pages */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><call pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:14">WRITE_WORD</name><argument_list pos:start="25:15" pos:end="25:40">(<argument pos:start="25:16" pos:end="25:16"><expr pos:start="25:16" pos:end="25:16"><name pos:start="25:16" pos:end="25:16">p</name></expr></argument>, <argument pos:start="25:19" pos:end="25:39"><expr pos:start="25:19" pos:end="25:39"><name pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:22">info</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:32">ram_size</name></name> <operator pos:start="25:34" pos:end="25:34">/</operator> <literal type="number" pos:start="25:36" pos:end="25:39">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:22">/* ramdisk_size */</comment>

    <expr_stmt pos:start="29:5" pos:end="36:0"><expr pos:start="29:5" pos:end="29:20"><call pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:14">WRITE_WORD</name><argument_list pos:start="29:15" pos:end="29:20">(<argument pos:start="29:16" pos:end="29:16"><expr pos:start="29:16" pos:end="29:16"><name pos:start="29:16" pos:end="29:16">p</name></expr></argument>, <argument pos:start="29:19" pos:end="29:19"><expr pos:start="29:19" pos:end="29:19"><literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define pos:start="31:1" pos:end="31:25">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:21">FLAG_READONLY</name></cpp:macro>	<cpp:value pos:start="31:25" pos:end="31:25">1</cpp:value></cpp:define>

<cpp:define pos:start="33:1" pos:end="33:25">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:19">FLAG_RDLOAD</name></cpp:macro>	<cpp:value pos:start="33:25" pos:end="33:25">4</cpp:value></cpp:define>

<cpp:define pos:start="35:1" pos:end="35:25">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:21">FLAG_RDPROMPT</name></cpp:macro>	<cpp:value pos:start="35:25" pos:end="35:25">8</cpp:value></cpp:define>

    <comment type="block" pos:start="37:5" pos:end="37:15">/* flags */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:63"><expr pos:start="39:5" pos:end="39:62"><call pos:start="39:5" pos:end="39:62"><name pos:start="39:5" pos:end="39:14">WRITE_WORD</name><argument_list pos:start="39:15" pos:end="39:62">(<argument pos:start="39:16" pos:end="39:16"><expr pos:start="39:16" pos:end="39:16"><name pos:start="39:16" pos:end="39:16">p</name></expr></argument>, <argument pos:start="39:19" pos:end="39:61"><expr pos:start="39:19" pos:end="39:61"><name pos:start="39:19" pos:end="39:31">FLAG_READONLY</name> <operator pos:start="39:33" pos:end="39:33">|</operator> <name pos:start="39:35" pos:end="39:45">FLAG_RDLOAD</name> <operator pos:start="39:47" pos:end="39:47">|</operator> <name pos:start="39:49" pos:end="39:61">FLAG_RDPROMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:17">/* rootdev */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><call pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:14">WRITE_WORD</name><argument_list pos:start="43:15" pos:end="43:32">(<argument pos:start="43:16" pos:end="43:16"><expr pos:start="43:16" pos:end="43:16"><name pos:start="43:16" pos:end="43:16">p</name></expr></argument>, <argument pos:start="43:19" pos:end="43:31"><expr pos:start="43:19" pos:end="43:31"><operator pos:start="43:19" pos:end="43:19">(</operator><literal type="number" pos:start="43:20" pos:end="43:21">31</literal> <operator pos:start="43:23" pos:end="43:24">&lt;&lt;</operator> <literal type="number" pos:start="43:26" pos:end="43:26">8</literal><operator pos:start="43:27" pos:end="43:27">)</operator> <operator pos:start="43:29" pos:end="43:29">|</operator> <literal type="number" pos:start="43:31" pos:end="43:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="43:41" pos:end="43:60">/* /dev/mtdblock0 */</comment>

    <comment type="block" pos:start="45:5" pos:end="45:24">/* video_num_cols */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:21"><expr pos:start="47:5" pos:end="47:20"><call pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:14">WRITE_WORD</name><argument_list pos:start="47:15" pos:end="47:20">(<argument pos:start="47:16" pos:end="47:16"><expr pos:start="47:16" pos:end="47:16"><name pos:start="47:16" pos:end="47:16">p</name></expr></argument>, <argument pos:start="47:19" pos:end="47:19"><expr pos:start="47:19" pos:end="47:19"><literal type="number" pos:start="47:19" pos:end="47:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:24">/* video_num_rows */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:21"><expr pos:start="51:5" pos:end="51:20"><call pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:14">WRITE_WORD</name><argument_list pos:start="51:15" pos:end="51:20">(<argument pos:start="51:16" pos:end="51:16"><expr pos:start="51:16" pos:end="51:16"><name pos:start="51:16" pos:end="51:16">p</name></expr></argument>, <argument pos:start="51:19" pos:end="51:19"><expr pos:start="51:19" pos:end="51:19"><literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="53:17">/* video_x */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><call pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:14">WRITE_WORD</name><argument_list pos:start="55:15" pos:end="55:20">(<argument pos:start="55:16" pos:end="55:16"><expr pos:start="55:16" pos:end="55:16"><name pos:start="55:16" pos:end="55:16">p</name></expr></argument>, <argument pos:start="55:19" pos:end="55:19"><expr pos:start="55:19" pos:end="55:19"><literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:17">/* video_y */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><call pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:14">WRITE_WORD</name><argument_list pos:start="59:15" pos:end="59:20">(<argument pos:start="59:16" pos:end="59:16"><expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">p</name></expr></argument>, <argument pos:start="59:19" pos:end="59:19"><expr pos:start="59:19" pos:end="59:19"><literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:26">/* memc_control_reg */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:21"><expr pos:start="63:5" pos:end="63:20"><call pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:14">WRITE_WORD</name><argument_list pos:start="63:15" pos:end="63:20">(<argument pos:start="63:16" pos:end="63:16"><expr pos:start="63:16" pos:end="63:16"><name pos:start="63:16" pos:end="63:16">p</name></expr></argument>, <argument pos:start="63:19" pos:end="63:19"><expr pos:start="63:19" pos:end="63:19"><literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="65:5" pos:end="65:36">/* unsigned char sounddefault */</comment>

    <comment type="block" pos:start="67:5" pos:end="67:34">/* unsigned char adfsdrives */</comment>

    <comment type="block" pos:start="69:5" pos:end="69:40">/* unsigned char bytes_per_char_h */</comment>

    <comment type="block" pos:start="71:5" pos:end="71:40">/* unsigned char bytes_per_char_v */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:21"><expr pos:start="73:5" pos:end="73:20"><call pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:14">WRITE_WORD</name><argument_list pos:start="73:15" pos:end="73:20">(<argument pos:start="73:16" pos:end="73:16"><expr pos:start="73:16" pos:end="73:16"><name pos:start="73:16" pos:end="73:16">p</name></expr></argument>, <argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="75:5" pos:end="75:26">/* pages_in_bank[4] */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:21"><expr pos:start="77:5" pos:end="77:20"><call pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:14">WRITE_WORD</name><argument_list pos:start="77:15" pos:end="77:20">(<argument pos:start="77:16" pos:end="77:16"><expr pos:start="77:16" pos:end="77:16"><name pos:start="77:16" pos:end="77:16">p</name></expr></argument>, <argument pos:start="77:19" pos:end="77:19"><expr pos:start="77:19" pos:end="77:19"><literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:21"><expr pos:start="79:5" pos:end="79:20"><call pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:14">WRITE_WORD</name><argument_list pos:start="79:15" pos:end="79:20">(<argument pos:start="79:16" pos:end="79:16"><expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">p</name></expr></argument>, <argument pos:start="79:19" pos:end="79:19"><expr pos:start="79:19" pos:end="79:19"><literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><call pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:14">WRITE_WORD</name><argument_list pos:start="81:15" pos:end="81:20">(<argument pos:start="81:16" pos:end="81:16"><expr pos:start="81:16" pos:end="81:16"><name pos:start="81:16" pos:end="81:16">p</name></expr></argument>, <argument pos:start="81:19" pos:end="81:19"><expr pos:start="81:19" pos:end="81:19"><literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><call pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:14">WRITE_WORD</name><argument_list pos:start="83:15" pos:end="83:20">(<argument pos:start="83:16" pos:end="83:16"><expr pos:start="83:16" pos:end="83:16"><name pos:start="83:16" pos:end="83:16">p</name></expr></argument>, <argument pos:start="83:19" pos:end="83:19"><expr pos:start="83:19" pos:end="83:19"><literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="85:23">/* pages_in_vram */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:21"><expr pos:start="87:5" pos:end="87:20"><call pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:14">WRITE_WORD</name><argument_list pos:start="87:15" pos:end="87:20">(<argument pos:start="87:16" pos:end="87:16"><expr pos:start="87:16" pos:end="87:16"><name pos:start="87:16" pos:end="87:16">p</name></expr></argument>, <argument pos:start="87:19" pos:end="87:19"><expr pos:start="87:19" pos:end="87:19"><literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:22">/* initrd_start */</comment>

    <if_stmt pos:start="91:5" pos:end="97:25"><if pos:start="91:5" pos:end="93:61">if <condition pos:start="91:8" pos:end="91:20">(<expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:19">initrd_size</name></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:61"><block_content pos:start="93:9" pos:end="93:61">

        <expr_stmt pos:start="93:9" pos:end="93:61"><expr pos:start="93:9" pos:end="93:60"><call pos:start="93:9" pos:end="93:60"><name pos:start="93:9" pos:end="93:18">WRITE_WORD</name><argument_list pos:start="93:19" pos:end="93:60">(<argument pos:start="93:20" pos:end="93:20"><expr pos:start="93:20" pos:end="93:20"><name pos:start="93:20" pos:end="93:20">p</name></expr></argument>, <argument pos:start="93:23" pos:end="93:59"><expr pos:start="93:23" pos:end="93:59"><name pos:start="93:23" pos:end="93:40"><name pos:start="93:23" pos:end="93:26">info</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:40">loader_start</name></name> <operator pos:start="93:42" pos:end="93:42">+</operator> <name pos:start="93:44" pos:end="93:59">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="95:5" pos:end="97:25">else<block type="pseudo" pos:start="97:9" pos:end="97:25"><block_content pos:start="97:9" pos:end="97:25">

        <expr_stmt pos:start="97:9" pos:end="97:25"><expr pos:start="97:9" pos:end="97:24"><call pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:18">WRITE_WORD</name><argument_list pos:start="97:19" pos:end="97:24">(<argument pos:start="97:20" pos:end="97:20"><expr pos:start="97:20" pos:end="97:20"><name pos:start="97:20" pos:end="97:20">p</name></expr></argument>, <argument pos:start="97:23" pos:end="97:23"><expr pos:start="97:23" pos:end="97:23"><literal type="number" pos:start="97:23" pos:end="97:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:21">/* initrd_size */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:31"><expr pos:start="101:5" pos:end="101:30"><call pos:start="101:5" pos:end="101:30"><name pos:start="101:5" pos:end="101:14">WRITE_WORD</name><argument_list pos:start="101:15" pos:end="101:30">(<argument pos:start="101:16" pos:end="101:16"><expr pos:start="101:16" pos:end="101:16"><name pos:start="101:16" pos:end="101:16">p</name></expr></argument>, <argument pos:start="101:19" pos:end="101:29"><expr pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:29">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="103:5" pos:end="103:18">/* rd_start */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:21"><expr pos:start="105:5" pos:end="105:20"><call pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:14">WRITE_WORD</name><argument_list pos:start="105:15" pos:end="105:20">(<argument pos:start="105:16" pos:end="105:16"><expr pos:start="105:16" pos:end="105:16"><name pos:start="105:16" pos:end="105:16">p</name></expr></argument>, <argument pos:start="105:19" pos:end="105:19"><expr pos:start="105:19" pos:end="105:19"><literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="107:5" pos:end="107:20">/* system_rev */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><call pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:14">WRITE_WORD</name><argument_list pos:start="109:15" pos:end="109:20">(<argument pos:start="109:16" pos:end="109:16"><expr pos:start="109:16" pos:end="109:16"><name pos:start="109:16" pos:end="109:16">p</name></expr></argument>, <argument pos:start="109:19" pos:end="109:19"><expr pos:start="109:19" pos:end="109:19"><literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="111:5" pos:end="111:27">/* system_serial_low */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:21"><expr pos:start="113:5" pos:end="113:20"><call pos:start="113:5" pos:end="113:20"><name pos:start="113:5" pos:end="113:14">WRITE_WORD</name><argument_list pos:start="113:15" pos:end="113:20">(<argument pos:start="113:16" pos:end="113:16"><expr pos:start="113:16" pos:end="113:16"><name pos:start="113:16" pos:end="113:16">p</name></expr></argument>, <argument pos:start="113:19" pos:end="113:19"><expr pos:start="113:19" pos:end="113:19"><literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="115:5" pos:end="115:28">/* system_serial_high */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:21"><expr pos:start="117:5" pos:end="117:20"><call pos:start="117:5" pos:end="117:20"><name pos:start="117:5" pos:end="117:14">WRITE_WORD</name><argument_list pos:start="117:15" pos:end="117:20">(<argument pos:start="117:16" pos:end="117:16"><expr pos:start="117:16" pos:end="117:16"><name pos:start="117:16" pos:end="117:16">p</name></expr></argument>, <argument pos:start="117:19" pos:end="117:19"><expr pos:start="117:19" pos:end="117:19"><literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="119:5" pos:end="119:24">/* mem_fclk_21285 */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:21"><expr pos:start="121:5" pos:end="121:20"><call pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:14">WRITE_WORD</name><argument_list pos:start="121:15" pos:end="121:20">(<argument pos:start="121:16" pos:end="121:16"><expr pos:start="121:16" pos:end="121:16"><name pos:start="121:16" pos:end="121:16">p</name></expr></argument>, <argument pos:start="121:19" pos:end="121:19"><expr pos:start="121:19" pos:end="121:19"><literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="123:5" pos:end="123:28">/* zero unused fields */</comment>

    <while pos:start="125:5" pos:end="129:5">while <condition pos:start="125:11" pos:end="125:52">(<expr pos:start="125:12" pos:end="125:51"><name pos:start="125:12" pos:end="125:12">p</name> <operator pos:start="125:14" pos:end="125:14">&lt;</operator> <name pos:start="125:16" pos:end="125:19">base</name> <operator pos:start="125:21" pos:end="125:21">+</operator> <name pos:start="125:23" pos:end="125:38">KERNEL_ARGS_ADDR</name> <operator pos:start="125:40" pos:end="125:40">+</operator> <literal type="number" pos:start="125:42" pos:end="125:46">256</literal> <operator pos:start="125:46" pos:end="125:46">+</operator> <literal type="number" pos:start="125:48" pos:end="125:51">1024</literal></expr>)</condition> <block pos:start="125:54" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:25">

        <expr_stmt pos:start="127:9" pos:end="127:25"><expr pos:start="127:9" pos:end="127:24"><call pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:18">WRITE_WORD</name><argument_list pos:start="127:19" pos:end="127:24">(<argument pos:start="127:20" pos:end="127:20"><expr pos:start="127:20" pos:end="127:20"><name pos:start="127:20" pos:end="127:20">p</name></expr></argument>, <argument pos:start="127:23" pos:end="127:23"><expr pos:start="127:23" pos:end="127:23"><literal type="number" pos:start="127:23" pos:end="127:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="131:5" pos:end="131:29"><expr pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:5">s</name> <operator pos:start="131:7" pos:end="131:7">=</operator> <name pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:12">info</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:28">kernel_cmdline</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="141:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:10">(<expr pos:start="133:9" pos:end="133:9"><name pos:start="133:9" pos:end="133:9">s</name></expr>)</condition> <block pos:start="133:12" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:63">

        <expr_stmt pos:start="135:9" pos:end="135:63"><expr pos:start="135:9" pos:end="135:62"><call pos:start="135:9" pos:end="135:62"><name pos:start="135:9" pos:end="135:33">cpu_physical_memory_write</name><argument_list pos:start="135:34" pos:end="135:62">(<argument pos:start="135:35" pos:end="135:35"><expr pos:start="135:35" pos:end="135:35"><name pos:start="135:35" pos:end="135:35">p</name></expr></argument>, <argument pos:start="135:38" pos:end="135:46"><expr pos:start="135:38" pos:end="135:46"><operator pos:start="135:38" pos:end="135:38">(</operator><name pos:start="135:39" pos:end="135:42">void</name> <operator pos:start="135:44" pos:end="135:44">*</operator><operator pos:start="135:45" pos:end="135:45">)</operator><name pos:start="135:46" pos:end="135:46">s</name></expr></argument>, <argument pos:start="135:49" pos:end="135:61"><expr pos:start="135:49" pos:end="135:61"><call pos:start="135:49" pos:end="135:57"><name pos:start="135:49" pos:end="135:54">strlen</name><argument_list pos:start="135:55" pos:end="135:57">(<argument pos:start="135:56" pos:end="135:56"><expr pos:start="135:56" pos:end="135:56"><name pos:start="135:56" pos:end="135:56">s</name></expr></argument>)</argument_list></call> <operator pos:start="135:59" pos:end="135:59">+</operator> <literal type="number" pos:start="135:61" pos:end="135:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="141:5">else <block pos:start="137:12" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:25">

        <expr_stmt pos:start="139:9" pos:end="139:25"><expr pos:start="139:9" pos:end="139:24"><call pos:start="139:9" pos:end="139:24"><name pos:start="139:9" pos:end="139:18">WRITE_WORD</name><argument_list pos:start="139:19" pos:end="139:24">(<argument pos:start="139:20" pos:end="139:20"><expr pos:start="139:20" pos:end="139:20"><name pos:start="139:20" pos:end="139:20">p</name></expr></argument>, <argument pos:start="139:23" pos:end="139:23"><expr pos:start="139:23" pos:end="139:23"><literal type="number" pos:start="139:23" pos:end="139:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
