<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18796.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">msi_msix_setup</name><parameter_list pos:start="1:26" pos:end="13:45">(<parameter pos:start="1:27" pos:end="1:51"><decl pos:start="1:27" pos:end="1:51"><type pos:start="1:27" pos:end="1:51"><name pos:start="1:27" pos:end="1:48">XenPCIPassthroughState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">uint64_t</name></type> <name pos:start="3:36" pos:end="3:39">addr</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:39"><decl pos:start="5:27" pos:end="5:39"><type pos:start="5:27" pos:end="5:39"><name pos:start="5:27" pos:end="5:34">uint32_t</name></type> <name pos:start="5:36" pos:end="5:39">data</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:36"><decl pos:start="7:27" pos:end="7:36"><type pos:start="7:27" pos:end="7:36"><name pos:start="7:27" pos:end="7:29">int</name> <modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:36">ppirq</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:38"><decl pos:start="9:27" pos:end="9:38"><type pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:30">bool</name></type> <name pos:start="9:32" pos:end="9:38">is_msix</name></decl></parameter>,

                          <parameter pos:start="11:27" pos:end="11:40"><decl pos:start="11:27" pos:end="11:40"><type pos:start="11:27" pos:end="11:40"><name pos:start="11:27" pos:end="11:29">int</name></type> <name pos:start="11:31" pos:end="11:40">msix_entry</name></decl></parameter>,

                          <parameter pos:start="13:27" pos:end="13:44"><decl pos:start="13:27" pos:end="13:44"><type pos:start="13:27" pos:end="13:44"><name pos:start="13:27" pos:end="13:30">bool</name></type> <name pos:start="13:32" pos:end="13:44">is_not_mapped</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="99:1">{<block_content pos:start="17:5" pos:end="97:13">

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:16">gvec</name> <init pos:start="17:18" pos:end="17:35">= <expr pos:start="17:20" pos:end="17:35"><call pos:start="17:20" pos:end="17:35"><name pos:start="17:20" pos:end="17:29">msi_vector</name><argument_list pos:start="17:30" pos:end="17:35">(<argument pos:start="17:31" pos:end="17:34"><expr pos:start="17:31" pos:end="17:34"><name pos:start="17:31" pos:end="17:34">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">rc</name> <init pos:start="19:12" pos:end="19:14">= <expr pos:start="19:14" pos:end="19:14"><literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:53"><expr pos:start="23:5" pos:end="23:52"><call pos:start="23:5" pos:end="23:52"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:52">(<argument pos:start="23:12" pos:end="23:51"><expr pos:start="23:12" pos:end="23:51"><operator pos:start="23:12" pos:end="23:12">(</operator><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:20">is_msix</name> <operator pos:start="23:22" pos:end="23:23">&amp;&amp;</operator> <name pos:start="23:25" pos:end="23:34">msix_entry</name> <operator pos:start="23:36" pos:end="23:37">==</operator> <literal type="number" pos:start="23:39" pos:end="23:39">0</literal><operator pos:start="23:40" pos:end="23:40">)</operator> <operator pos:start="23:42" pos:end="23:43">||</operator> <name pos:start="23:45" pos:end="23:51">is_msix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="53:5"><if pos:start="27:5" pos:end="53:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:12">gvec</name> <operator pos:start="27:14" pos:end="27:15">==</operator> <literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>)</condition> <block pos:start="27:20" pos:end="53:5">{<block_content pos:start="33:9" pos:end="51:9">

        <comment type="block" pos:start="29:9" pos:end="31:34">/* if gvec is 0, the guest is asking for a particular pirq that

         * is passed as dest_id */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:65"><expr pos:start="33:9" pos:end="33:64"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:14">ppirq</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:44"><name pos:start="33:18" pos:end="33:32">msi_ext_dest_id</name><argument_list pos:start="33:33" pos:end="33:44">(<argument pos:start="33:34" pos:end="33:43"><expr pos:start="33:34" pos:end="33:43"><name pos:start="33:34" pos:end="33:37">addr</name> <operator pos:start="33:39" pos:end="33:40">&gt;&gt;</operator> <literal type="number" pos:start="33:42" pos:end="33:43">32</literal></expr></argument>)</argument_list></call> <operator pos:start="33:46" pos:end="33:46">|</operator> <call pos:start="33:48" pos:end="33:64"><name pos:start="33:48" pos:end="33:58">msi_dest_id</name><argument_list pos:start="33:59" pos:end="33:64">(<argument pos:start="33:60" pos:end="33:63"><expr pos:start="33:60" pos:end="33:63"><name pos:start="33:60" pos:end="33:63">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="51:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><operator pos:start="35:13" pos:end="35:13">!</operator><operator pos:start="35:14" pos:end="35:14">*</operator><name pos:start="35:15" pos:end="35:19">ppirq</name></expr>)</condition> <block pos:start="35:22" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:44">

            <comment type="block" pos:start="37:13" pos:end="39:39">/* this probably identifies an misconfiguration of the guest,

             * try the emulated path */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:44"><expr pos:start="41:13" pos:end="41:43"><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:18">ppirq</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:43">XEN_PT_UNASSIGNED_PIRQ</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="43:11" pos:end="51:9">else <block pos:start="43:16" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:70">

            <expr_stmt pos:start="45:13" pos:end="49:70"><expr pos:start="45:13" pos:end="49:69"><call pos:start="45:13" pos:end="49:69"><name pos:start="45:13" pos:end="45:22">XEN_PT_LOG</name><argument_list pos:start="45:23" pos:end="49:69">(<argument pos:start="45:24" pos:end="45:30"><expr pos:start="45:24" pos:end="45:30"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:30"><name pos:start="45:25" pos:end="45:25">s</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:30">dev</name></name></expr></argument>, <argument pos:start="45:33" pos:end="47:50"><expr pos:start="45:33" pos:end="47:50"><literal type="string" pos:start="45:33" pos:end="45:61">"requested pirq %d for MSI%s"</literal>

                       <literal type="string" pos:start="47:24" pos:end="47:50">" (vec: %#x, entry: %#x)\n"</literal></expr></argument>,

                       <argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><operator pos:start="49:24" pos:end="49:24">*</operator><name pos:start="49:25" pos:end="49:29">ppirq</name></expr></argument>, <argument pos:start="49:32" pos:end="49:50"><expr pos:start="49:32" pos:end="49:50"><ternary pos:start="49:32" pos:end="49:50"><condition pos:start="49:32" pos:end="49:40"><expr pos:start="49:32" pos:end="49:38"><name pos:start="49:32" pos:end="49:38">is_msix</name></expr> ?</condition><then pos:start="49:42" pos:end="49:45"> <expr pos:start="49:42" pos:end="49:45"><literal type="string" pos:start="49:42" pos:end="49:45">"-X"</literal></expr> </then><else pos:start="49:47" pos:end="49:50">: <expr pos:start="49:49" pos:end="49:50"><literal type="string" pos:start="49:49" pos:end="49:50">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="49:53" pos:end="49:56"><expr pos:start="49:53" pos:end="49:56"><name pos:start="49:53" pos:end="49:56">gvec</name></expr></argument>, <argument pos:start="49:59" pos:end="49:68"><expr pos:start="49:59" pos:end="49:68"><name pos:start="49:59" pos:end="49:68">msix_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="93:5"><if pos:start="57:5" pos:end="93:5">if <condition pos:start="57:8" pos:end="57:22">(<expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:21">is_not_mapped</name></expr>)</condition> <block pos:start="57:24" pos:end="93:5">{<block_content pos:start="59:9" pos:end="91:9">

        <decl_stmt pos:start="59:9" pos:end="59:32"><decl pos:start="59:9" pos:end="59:31"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint64_t</name></type> <name pos:start="59:18" pos:end="59:27">table_base</name> <init pos:start="59:29" pos:end="59:31">= <expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:19">is_msix</name></expr>)</condition> <block pos:start="63:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:45">

            <expr_stmt pos:start="65:13" pos:end="65:45"><expr pos:start="65:13" pos:end="65:44"><name pos:start="65:13" pos:end="65:22">table_base</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:44"><name pos:start="65:26" pos:end="65:26">s</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:32">msix</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:44">table_base</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="79:61"><expr pos:start="71:9" pos:end="79:60"><name pos:start="71:9" pos:end="71:10">rc</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="79:60"><name pos:start="71:14" pos:end="71:36">xc_physdev_map_pirq_msi</name><argument_list pos:start="71:37" pos:end="79:60">(<argument pos:start="71:38" pos:end="71:43"><expr pos:start="71:38" pos:end="71:43"><name pos:start="71:38" pos:end="71:43">xen_xc</name></expr></argument>, <argument pos:start="71:46" pos:end="71:54"><expr pos:start="71:46" pos:end="71:54"><name pos:start="71:46" pos:end="71:54">xen_domid</name></expr></argument>, <argument pos:start="71:57" pos:end="71:74"><expr pos:start="71:57" pos:end="71:74"><name pos:start="71:57" pos:end="71:74">XEN_PT_AUTO_ASSIGN</name></expr></argument>,

                                     <argument pos:start="73:38" pos:end="73:42"><expr pos:start="73:38" pos:end="73:42"><name pos:start="73:38" pos:end="73:42">ppirq</name></expr></argument>, <argument pos:start="73:45" pos:end="75:74"><expr pos:start="73:45" pos:end="75:74"><call pos:start="73:45" pos:end="75:74"><name pos:start="73:45" pos:end="73:53">PCI_DEVFN</name><argument_list pos:start="73:54" pos:end="75:74">(<argument pos:start="73:55" pos:end="73:72"><expr pos:start="73:55" pos:end="73:72"><name pos:start="73:55" pos:end="73:72"><name pos:start="73:55" pos:end="73:55">s</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:68">real_device</name><operator pos:start="73:69" pos:end="73:69">.</operator><name pos:start="73:70" pos:end="73:72">dev</name></name></expr></argument>,

                                                      <argument pos:start="75:55" pos:end="75:73"><expr pos:start="75:55" pos:end="75:73"><name pos:start="75:55" pos:end="75:73"><name pos:start="75:55" pos:end="75:55">s</name><operator pos:start="75:56" pos:end="75:57">-&gt;</operator><name pos:start="75:58" pos:end="75:68">real_device</name><operator pos:start="75:69" pos:end="75:69">.</operator><name pos:start="75:70" pos:end="75:73">func</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="77:38" pos:end="77:55"><expr pos:start="77:38" pos:end="77:55"><name pos:start="77:38" pos:end="77:55"><name pos:start="77:38" pos:end="77:38">s</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:51">real_device</name><operator pos:start="77:52" pos:end="77:52">.</operator><name pos:start="77:53" pos:end="77:55">bus</name></name></expr></argument>,

                                     <argument pos:start="79:38" pos:end="79:47"><expr pos:start="79:38" pos:end="79:47"><name pos:start="79:38" pos:end="79:47">msix_entry</name></expr></argument>, <argument pos:start="79:50" pos:end="79:59"><expr pos:start="79:50" pos:end="79:59"><name pos:start="79:50" pos:end="79:59">table_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:15">(<expr pos:start="81:13" pos:end="81:14"><name pos:start="81:13" pos:end="81:14">rc</name></expr>)</condition> <block pos:start="81:17" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:22">

            <expr_stmt pos:start="83:13" pos:end="87:69"><expr pos:start="83:13" pos:end="87:68"><call pos:start="83:13" pos:end="87:68"><name pos:start="83:13" pos:end="83:22">XEN_PT_ERR</name><argument_list pos:start="83:23" pos:end="87:68">(<argument pos:start="83:24" pos:end="83:30"><expr pos:start="83:24" pos:end="83:30"><operator pos:start="83:24" pos:end="83:24">&amp;</operator><name pos:start="83:25" pos:end="83:30"><name pos:start="83:25" pos:end="83:25">s</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:30">dev</name></name></expr></argument>,

                       <argument pos:start="85:24" pos:end="85:74"><expr pos:start="85:24" pos:end="85:74"><literal type="string" pos:start="85:24" pos:end="85:74">"Mapping of MSI%s (err: %i, vec: %#x, entry %#x)\n"</literal></expr></argument>,

                       <argument pos:start="87:24" pos:end="87:42"><expr pos:start="87:24" pos:end="87:42"><ternary pos:start="87:24" pos:end="87:42"><condition pos:start="87:24" pos:end="87:32"><expr pos:start="87:24" pos:end="87:30"><name pos:start="87:24" pos:end="87:30">is_msix</name></expr> ?</condition><then pos:start="87:34" pos:end="87:37"> <expr pos:start="87:34" pos:end="87:37"><literal type="string" pos:start="87:34" pos:end="87:37">"-X"</literal></expr> </then><else pos:start="87:39" pos:end="87:42">: <expr pos:start="87:41" pos:end="87:42"><literal type="string" pos:start="87:41" pos:end="87:42">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="87:45" pos:end="87:49"><expr pos:start="87:45" pos:end="87:49"><name pos:start="87:45" pos:end="87:49">errno</name></expr></argument>, <argument pos:start="87:52" pos:end="87:55"><expr pos:start="87:52" pos:end="87:55"><name pos:start="87:52" pos:end="87:55">gvec</name></expr></argument>, <argument pos:start="87:58" pos:end="87:67"><expr pos:start="87:58" pos:end="87:67"><name pos:start="87:58" pos:end="87:67">msix_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><name pos:start="89:20" pos:end="89:21">rc</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
