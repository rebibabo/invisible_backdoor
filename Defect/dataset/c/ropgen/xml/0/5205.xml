<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5205.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">xen_hvm_init</name><parameter_list pos:start="1:18" pos:end="1:66">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:32">PCMachineState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">pcms</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:65"><decl pos:start="1:41" pos:end="1:65"><type pos:start="1:41" pos:end="1:65"><name pos:start="1:41" pos:end="1:52">MemoryRegion</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:65">ram_memory</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="293:1">{<block_content pos:start="5:5" pos:end="291:12">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:13">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">xen_pfn_t</name></type> <name pos:start="7:15" pos:end="7:23">ioreq_pfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">xen_pfn_t</name></type> <name pos:start="9:15" pos:end="9:26">bufioreq_pfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">evtchn_port_t</name></type> <name pos:start="11:19" pos:end="11:33">bufioreq_evtchn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">XenIOState</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:21">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:9">state</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:42"><name pos:start="17:13" pos:end="17:21">g_malloc0</name><argument_list pos:start="17:22" pos:end="17:42">(<argument pos:start="17:23" pos:end="17:41"><expr pos:start="17:23" pos:end="17:41"><sizeof pos:start="17:23" pos:end="17:41">sizeof <argument_list pos:start="17:30" pos:end="17:41">(<argument pos:start="17:31" pos:end="17:40"><expr pos:start="17:31" pos:end="17:40"><name pos:start="17:31" pos:end="17:40">XenIOState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:9">state</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:21">xce_handle</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <call pos:start="21:25" pos:end="21:51"><name pos:start="21:25" pos:end="21:42">xen_xc_evtchn_open</name><argument_list pos:start="21:43" pos:end="21:51">(<argument pos:start="21:44" pos:end="21:47"><expr pos:start="21:44" pos:end="21:47"><name pos:start="21:44" pos:end="21:47">NULL</name></expr></argument>, <argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:54">(<expr pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:13">state</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">xce_handle</name></name> <operator pos:start="23:27" pos:end="23:28">==</operator> <name pos:start="23:30" pos:end="23:53">XC_HANDLER_INITIAL_VALUE</name></expr>)</condition> <block pos:start="23:56" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><call pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:14">perror</name><argument_list pos:start="25:15" pos:end="25:41">(<argument pos:start="25:16" pos:end="25:40"><expr pos:start="25:16" pos:end="25:40"><literal type="string" pos:start="25:16" pos:end="25:40">"xen: event channel open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:9">state</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">xenstore</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:38"><name pos:start="33:23" pos:end="33:36">xs_daemon_open</name><argument_list pos:start="33:37" pos:end="33:38">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:32">(<expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:13">state</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:23">xenstore</name></name> <operator pos:start="35:25" pos:end="35:26">==</operator> <name pos:start="35:28" pos:end="35:31">NULL</name></expr>)</condition> <block pos:start="35:34" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:37"><expr pos:start="37:9" pos:end="37:36"><call pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:14">perror</name><argument_list pos:start="37:15" pos:end="37:36">(<argument pos:start="37:16" pos:end="37:35"><expr pos:start="37:16" pos:end="37:35"><literal type="string" pos:start="37:16" pos:end="37:35">"xen: xenstore open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:70"><expr pos:start="45:5" pos:end="45:69"><name pos:start="45:5" pos:end="45:6">rc</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:69"><name pos:start="45:10" pos:end="45:32">xen_create_ioreq_server</name><argument_list pos:start="45:33" pos:end="45:69">(<argument pos:start="45:34" pos:end="45:39"><expr pos:start="45:34" pos:end="45:39"><name pos:start="45:34" pos:end="45:39">xen_xc</name></expr></argument>, <argument pos:start="45:42" pos:end="45:50"><expr pos:start="45:42" pos:end="45:50"><name pos:start="45:42" pos:end="45:50">xen_domid</name></expr></argument>, <argument pos:start="45:53" pos:end="45:68"><expr pos:start="45:53" pos:end="45:68"><operator pos:start="45:53" pos:end="45:53">&amp;</operator><name pos:start="45:54" pos:end="45:68"><name pos:start="45:54" pos:end="45:58">state</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:68">ioservid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:10">rc</name> <operator pos:start="47:12" pos:end="47:12">&lt;</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>)</condition> <block pos:start="47:17" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:43"><expr pos:start="49:9" pos:end="49:42"><call pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:14">perror</name><argument_list pos:start="49:15" pos:end="49:42">(<argument pos:start="49:16" pos:end="49:41"><expr pos:start="49:16" pos:end="49:41"><literal type="string" pos:start="49:16" pos:end="49:41">"xen: ioreq server create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:9">state</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:15">exit</name><operator pos:start="57:16" pos:end="57:16">.</operator><name pos:start="57:17" pos:end="57:22">notify</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:42">xen_exit_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><call pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:26">qemu_add_exit_notifier</name><argument_list pos:start="59:27" pos:end="59:40">(<argument pos:start="59:28" pos:end="59:39"><expr pos:start="59:28" pos:end="59:39"><operator pos:start="59:28" pos:end="59:28">&amp;</operator><name pos:start="59:29" pos:end="59:39"><name pos:start="59:29" pos:end="59:33">state</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:39">exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:9">state</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:18">suspend</name><operator pos:start="63:19" pos:end="63:19">.</operator><name pos:start="63:20" pos:end="63:25">notify</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:48">xen_suspend_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:52"><expr pos:start="65:5" pos:end="65:51"><call pos:start="65:5" pos:end="65:51"><name pos:start="65:5" pos:end="65:34">qemu_register_suspend_notifier</name><argument_list pos:start="65:35" pos:end="65:51">(<argument pos:start="65:36" pos:end="65:50"><expr pos:start="65:36" pos:end="65:50"><operator pos:start="65:36" pos:end="65:36">&amp;</operator><name pos:start="65:37" pos:end="65:50"><name pos:start="65:37" pos:end="65:41">state</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:50">suspend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:9">state</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:17">wakeup</name><operator pos:start="69:18" pos:end="69:18">.</operator><name pos:start="69:19" pos:end="69:24">notify</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:46">xen_wakeup_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><call pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:33">qemu_register_wakeup_notifier</name><argument_list pos:start="71:34" pos:end="71:49">(<argument pos:start="71:35" pos:end="71:48"><expr pos:start="71:35" pos:end="71:48"><operator pos:start="71:35" pos:end="71:35">&amp;</operator><name pos:start="71:36" pos:end="71:48"><name pos:start="71:36" pos:end="71:40">state</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:48">wakeup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="79:53"><expr pos:start="75:5" pos:end="79:52"><name pos:start="75:5" pos:end="75:6">rc</name> <operator pos:start="75:8" pos:end="75:8">=</operator> <call pos:start="75:10" pos:end="79:52"><name pos:start="75:10" pos:end="75:34">xen_get_ioreq_server_info</name><argument_list pos:start="75:35" pos:end="79:52">(<argument pos:start="75:36" pos:end="75:41"><expr pos:start="75:36" pos:end="75:41"><name pos:start="75:36" pos:end="75:41">xen_xc</name></expr></argument>, <argument pos:start="75:44" pos:end="75:52"><expr pos:start="75:44" pos:end="75:52"><name pos:start="75:44" pos:end="75:52">xen_domid</name></expr></argument>, <argument pos:start="75:55" pos:end="75:69"><expr pos:start="75:55" pos:end="75:69"><name pos:start="75:55" pos:end="75:69"><name pos:start="75:55" pos:end="75:59">state</name><operator pos:start="75:60" pos:end="75:61">-&gt;</operator><name pos:start="75:62" pos:end="75:69">ioservid</name></name></expr></argument>,

                                   <argument pos:start="77:36" pos:end="77:45"><expr pos:start="77:36" pos:end="77:45"><operator pos:start="77:36" pos:end="77:36">&amp;</operator><name pos:start="77:37" pos:end="77:45">ioreq_pfn</name></expr></argument>, <argument pos:start="77:48" pos:end="77:60"><expr pos:start="77:48" pos:end="77:60"><operator pos:start="77:48" pos:end="77:48">&amp;</operator><name pos:start="77:49" pos:end="77:60">bufioreq_pfn</name></expr></argument>,

                                   <argument pos:start="79:36" pos:end="79:51"><expr pos:start="79:36" pos:end="79:51"><operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:51">bufioreq_evtchn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:15">(<expr pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:10">rc</name> <operator pos:start="81:12" pos:end="81:12">&lt;</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>)</condition> <block pos:start="81:17" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:17">

        <expr_stmt pos:start="83:9" pos:end="85:36"><expr pos:start="83:9" pos:end="85:35"><call pos:start="83:9" pos:end="85:35"><name pos:start="83:9" pos:end="83:20">error_report</name><argument_list pos:start="83:21" pos:end="85:35">(<argument pos:start="83:22" pos:end="83:89"><expr pos:start="83:22" pos:end="83:89"><literal type="string" pos:start="83:22" pos:end="83:72">"failed to get ioreq server info: error %d handle="</literal> <name pos:start="83:74" pos:end="83:89">XC_INTERFACE_FMT</name></expr></argument>,

                     <argument pos:start="85:22" pos:end="85:26"><expr pos:start="85:22" pos:end="85:26"><name pos:start="85:22" pos:end="85:26">errno</name></expr></argument>, <argument pos:start="85:29" pos:end="85:34"><expr pos:start="85:29" pos:end="85:34"><name pos:start="85:29" pos:end="85:34">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:51"><expr pos:start="93:5" pos:end="93:50"><call pos:start="93:5" pos:end="93:50"><name pos:start="93:5" pos:end="93:11">DPRINTF</name><argument_list pos:start="93:12" pos:end="93:50">(<argument pos:start="93:13" pos:end="93:38"><expr pos:start="93:13" pos:end="93:38"><literal type="string" pos:start="93:13" pos:end="93:38">"shared page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="93:41" pos:end="93:49"><expr pos:start="93:41" pos:end="93:49"><name pos:start="93:41" pos:end="93:49">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:59"><expr pos:start="95:5" pos:end="95:58"><call pos:start="95:5" pos:end="95:58"><name pos:start="95:5" pos:end="95:11">DPRINTF</name><argument_list pos:start="95:12" pos:end="95:58">(<argument pos:start="95:13" pos:end="95:43"><expr pos:start="95:13" pos:end="95:43"><literal type="string" pos:start="95:13" pos:end="95:43">"buffered io page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="95:46" pos:end="95:57"><expr pos:start="95:46" pos:end="95:57"><name pos:start="95:46" pos:end="95:57">bufioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:59"><expr pos:start="97:5" pos:end="97:58"><call pos:start="97:5" pos:end="97:58"><name pos:start="97:5" pos:end="97:11">DPRINTF</name><argument_list pos:start="97:12" pos:end="97:58">(<argument pos:start="97:13" pos:end="97:40"><expr pos:start="97:13" pos:end="97:40"><literal type="string" pos:start="97:13" pos:end="97:40">"buffered io evtchn is %x\n"</literal></expr></argument>, <argument pos:start="97:43" pos:end="97:57"><expr pos:start="97:43" pos:end="97:57"><name pos:start="97:43" pos:end="97:57">bufioreq_evtchn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:79"><expr pos:start="101:5" pos:end="103:78"><name pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:9">state</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:22">shared_page</name></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <call pos:start="101:26" pos:end="103:78"><name pos:start="101:26" pos:end="101:45">xc_map_foreign_range</name><argument_list pos:start="101:46" pos:end="103:78">(<argument pos:start="101:47" pos:end="101:52"><expr pos:start="101:47" pos:end="101:52"><name pos:start="101:47" pos:end="101:52">xen_xc</name></expr></argument>, <argument pos:start="101:55" pos:end="101:63"><expr pos:start="101:55" pos:end="101:63"><name pos:start="101:55" pos:end="101:63">xen_domid</name></expr></argument>, <argument pos:start="101:66" pos:end="101:77"><expr pos:start="101:66" pos:end="101:77"><name pos:start="101:66" pos:end="101:77">XC_PAGE_SIZE</name></expr></argument>,

                                              <argument pos:start="103:47" pos:end="103:66"><expr pos:start="103:47" pos:end="103:66"><name pos:start="103:47" pos:end="103:55">PROT_READ</name><operator pos:start="103:56" pos:end="103:56">|</operator><name pos:start="103:57" pos:end="103:66">PROT_WRITE</name></expr></argument>, <argument pos:start="103:69" pos:end="103:77"><expr pos:start="103:69" pos:end="103:77"><name pos:start="103:69" pos:end="103:77">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:35">(<expr pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:13">state</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:26">shared_page</name></name> <operator pos:start="105:28" pos:end="105:29">==</operator> <name pos:start="105:31" pos:end="105:34">NULL</name></expr>)</condition> <block pos:start="105:37" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:17">

        <expr_stmt pos:start="107:9" pos:end="109:36"><expr pos:start="107:9" pos:end="109:35"><call pos:start="107:9" pos:end="109:35"><name pos:start="107:9" pos:end="107:20">error_report</name><argument_list pos:start="107:21" pos:end="109:35">(<argument pos:start="107:22" pos:end="107:84"><expr pos:start="107:22" pos:end="107:84"><literal type="string" pos:start="107:22" pos:end="107:67">"map shared IO page returned error %d handle="</literal> <name pos:start="107:69" pos:end="107:84">XC_INTERFACE_FMT</name></expr></argument>,

                     <argument pos:start="109:22" pos:end="109:26"><expr pos:start="109:22" pos:end="109:26"><name pos:start="109:22" pos:end="109:26">errno</name></expr></argument>, <argument pos:start="109:29" pos:end="109:34"><expr pos:start="109:29" pos:end="109:34"><name pos:start="109:29" pos:end="109:34">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:64"><expr pos:start="117:5" pos:end="117:63"><name pos:start="117:5" pos:end="117:6">rc</name> <operator pos:start="117:8" pos:end="117:8">=</operator> <call pos:start="117:10" pos:end="117:63"><name pos:start="117:10" pos:end="117:32">xen_get_vmport_regs_pfn</name><argument_list pos:start="117:33" pos:end="117:63">(<argument pos:start="117:34" pos:end="117:39"><expr pos:start="117:34" pos:end="117:39"><name pos:start="117:34" pos:end="117:39">xen_xc</name></expr></argument>, <argument pos:start="117:42" pos:end="117:50"><expr pos:start="117:42" pos:end="117:50"><name pos:start="117:42" pos:end="117:50">xen_domid</name></expr></argument>, <argument pos:start="117:53" pos:end="117:62"><expr pos:start="117:53" pos:end="117:62"><operator pos:start="117:53" pos:end="117:53">&amp;</operator><name pos:start="117:54" pos:end="117:62">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="147:5"><if pos:start="119:5" pos:end="139:5">if <condition pos:start="119:8" pos:end="119:12">(<expr pos:start="119:9" pos:end="119:11"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:11">rc</name></expr>)</condition> <block pos:start="119:14" pos:end="139:5">{<block_content pos:start="121:9" pos:end="137:9">

        <expr_stmt pos:start="121:9" pos:end="121:62"><expr pos:start="121:9" pos:end="121:61"><call pos:start="121:9" pos:end="121:61"><name pos:start="121:9" pos:end="121:15">DPRINTF</name><argument_list pos:start="121:16" pos:end="121:61">(<argument pos:start="121:17" pos:end="121:49"><expr pos:start="121:17" pos:end="121:49"><literal type="string" pos:start="121:17" pos:end="121:49">"shared vmport page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="121:52" pos:end="121:60"><expr pos:start="121:52" pos:end="121:60"><name pos:start="121:52" pos:end="121:60">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="127:66"><expr pos:start="123:9" pos:end="127:65"><name pos:start="123:9" pos:end="123:33"><name pos:start="123:9" pos:end="123:13">state</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:33">shared_vmport_page</name></name> <operator pos:start="123:35" pos:end="123:35">=</operator>

            <call pos:start="125:13" pos:end="127:65"><name pos:start="125:13" pos:end="125:32">xc_map_foreign_range</name><argument_list pos:start="125:33" pos:end="127:65">(<argument pos:start="125:34" pos:end="125:39"><expr pos:start="125:34" pos:end="125:39"><name pos:start="125:34" pos:end="125:39">xen_xc</name></expr></argument>, <argument pos:start="125:42" pos:end="125:50"><expr pos:start="125:42" pos:end="125:50"><name pos:start="125:42" pos:end="125:50">xen_domid</name></expr></argument>, <argument pos:start="125:53" pos:end="125:64"><expr pos:start="125:53" pos:end="125:64"><name pos:start="125:53" pos:end="125:64">XC_PAGE_SIZE</name></expr></argument>,

                                 <argument pos:start="127:34" pos:end="127:53"><expr pos:start="127:34" pos:end="127:53"><name pos:start="127:34" pos:end="127:42">PROT_READ</name><operator pos:start="127:43" pos:end="127:43">|</operator><name pos:start="127:44" pos:end="127:53">PROT_WRITE</name></expr></argument>, <argument pos:start="127:56" pos:end="127:64"><expr pos:start="127:56" pos:end="127:64"><name pos:start="127:56" pos:end="127:64">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="137:9">if <condition pos:start="129:12" pos:end="129:46">(<expr pos:start="129:13" pos:end="129:45"><name pos:start="129:13" pos:end="129:37"><name pos:start="129:13" pos:end="129:17">state</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:37">shared_vmport_page</name></name> <operator pos:start="129:39" pos:end="129:40">==</operator> <name pos:start="129:42" pos:end="129:45">NULL</name></expr>)</condition> <block pos:start="129:48" pos:end="137:9">{<block_content pos:start="131:13" pos:end="135:21">

            <expr_stmt pos:start="131:13" pos:end="133:58"><expr pos:start="131:13" pos:end="133:57"><call pos:start="131:13" pos:end="133:57"><name pos:start="131:13" pos:end="131:24">error_report</name><argument_list pos:start="131:25" pos:end="133:57">(<argument pos:start="131:26" pos:end="133:41"><expr pos:start="131:26" pos:end="133:41"><literal type="string" pos:start="131:26" pos:end="131:78">"map shared vmport IO page returned error %d handle="</literal>

                         <name pos:start="133:26" pos:end="133:41">XC_INTERFACE_FMT</name></expr></argument>, <argument pos:start="133:44" pos:end="133:48"><expr pos:start="133:44" pos:end="133:48"><name pos:start="133:44" pos:end="133:48">errno</name></expr></argument>, <argument pos:start="133:51" pos:end="133:56"><expr pos:start="133:51" pos:end="133:56"><name pos:start="133:51" pos:end="133:56">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="135:13" pos:end="135:21">goto <name pos:start="135:18" pos:end="135:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="147:5">else if <condition pos:start="139:15" pos:end="139:29">(<expr pos:start="139:16" pos:end="139:28"><name pos:start="139:16" pos:end="139:17">rc</name> <operator pos:start="139:19" pos:end="139:20">!=</operator> <operator pos:start="139:22" pos:end="139:22">-</operator><name pos:start="139:23" pos:end="139:28">ENOSYS</name></expr>)</condition> <block pos:start="139:31" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:17">

        <expr_stmt pos:start="141:9" pos:end="143:32"><expr pos:start="141:9" pos:end="143:31"><call pos:start="141:9" pos:end="143:31"><name pos:start="141:9" pos:end="141:20">error_report</name><argument_list pos:start="141:21" pos:end="143:31">(<argument pos:start="141:22" pos:end="141:67"><expr pos:start="141:22" pos:end="141:67"><literal type="string" pos:start="141:22" pos:end="141:67">"get vmport regs pfn returned error %d, rc=%d"</literal></expr></argument>,

                     <argument pos:start="143:22" pos:end="143:26"><expr pos:start="143:22" pos:end="143:26"><name pos:start="143:22" pos:end="143:26">errno</name></expr></argument>, <argument pos:start="143:29" pos:end="143:30"><expr pos:start="143:29" pos:end="143:30"><name pos:start="143:29" pos:end="143:30">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:17">goto <name pos:start="145:14" pos:end="145:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="157:65"><expr pos:start="151:5" pos:end="157:64"><name pos:start="151:5" pos:end="151:27"><name pos:start="151:5" pos:end="151:9">state</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:27">buffered_io_page</name></name> <operator pos:start="151:29" pos:end="151:29">=</operator> <call pos:start="151:31" pos:end="157:64"><name pos:start="151:31" pos:end="151:50">xc_map_foreign_range</name><argument_list pos:start="151:51" pos:end="157:64">(<argument pos:start="151:52" pos:end="151:57"><expr pos:start="151:52" pos:end="151:57"><name pos:start="151:52" pos:end="151:57">xen_xc</name></expr></argument>, <argument pos:start="151:60" pos:end="151:68"><expr pos:start="151:60" pos:end="151:68"><name pos:start="151:60" pos:end="151:68">xen_domid</name></expr></argument>,

                                                   <argument pos:start="153:52" pos:end="153:63"><expr pos:start="153:52" pos:end="153:63"><name pos:start="153:52" pos:end="153:63">XC_PAGE_SIZE</name></expr></argument>,

                                                   <argument pos:start="155:52" pos:end="155:71"><expr pos:start="155:52" pos:end="155:71"><name pos:start="155:52" pos:end="155:60">PROT_READ</name><operator pos:start="155:61" pos:end="155:61">|</operator><name pos:start="155:62" pos:end="155:71">PROT_WRITE</name></expr></argument>,

                                                   <argument pos:start="157:52" pos:end="157:63"><expr pos:start="157:52" pos:end="157:63"><name pos:start="157:52" pos:end="157:63">bufioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:40">(<expr pos:start="159:9" pos:end="159:39"><name pos:start="159:9" pos:end="159:31"><name pos:start="159:9" pos:end="159:13">state</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:31">buffered_io_page</name></name> <operator pos:start="159:33" pos:end="159:34">==</operator> <name pos:start="159:36" pos:end="159:39">NULL</name></expr>)</condition> <block pos:start="159:42" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:17">

        <expr_stmt pos:start="161:9" pos:end="161:70"><expr pos:start="161:9" pos:end="161:69"><call pos:start="161:9" pos:end="161:69"><name pos:start="161:9" pos:end="161:20">error_report</name><argument_list pos:start="161:21" pos:end="161:69">(<argument pos:start="161:22" pos:end="161:61"><expr pos:start="161:22" pos:end="161:61"><literal type="string" pos:start="161:22" pos:end="161:61">"map buffered IO page returned error %d"</literal></expr></argument>, <argument pos:start="161:64" pos:end="161:68"><expr pos:start="161:64" pos:end="161:68"><name pos:start="161:64" pos:end="161:68">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="163:9" pos:end="163:17">goto <name pos:start="163:14" pos:end="163:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:51">/* Note: cpus is empty at this point in init */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:69"><expr pos:start="171:5" pos:end="171:68"><name pos:start="171:5" pos:end="171:25"><name pos:start="171:5" pos:end="171:9">state</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:25">cpu_by_vcpu_id</name></name> <operator pos:start="171:27" pos:end="171:27">=</operator> <call pos:start="171:29" pos:end="171:68"><name pos:start="171:29" pos:end="171:37">g_malloc0</name><argument_list pos:start="171:38" pos:end="171:68">(<argument pos:start="171:39" pos:end="171:67"><expr pos:start="171:39" pos:end="171:67"><name pos:start="171:39" pos:end="171:46">max_cpus</name> <operator pos:start="171:48" pos:end="171:48">*</operator> <sizeof pos:start="171:50" pos:end="171:67">sizeof<argument_list pos:start="171:56" pos:end="171:67">(<argument pos:start="171:57" pos:end="171:66"><expr pos:start="171:57" pos:end="171:66"><name pos:start="171:57" pos:end="171:64">CPUState</name> <operator pos:start="171:66" pos:end="171:66">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:78"><expr pos:start="175:5" pos:end="175:77"><name pos:start="175:5" pos:end="175:6">rc</name> <operator pos:start="175:8" pos:end="175:8">=</operator> <call pos:start="175:10" pos:end="175:77"><name pos:start="175:10" pos:end="175:35">xen_set_ioreq_server_state</name><argument_list pos:start="175:36" pos:end="175:77">(<argument pos:start="175:37" pos:end="175:42"><expr pos:start="175:37" pos:end="175:42"><name pos:start="175:37" pos:end="175:42">xen_xc</name></expr></argument>, <argument pos:start="175:45" pos:end="175:53"><expr pos:start="175:45" pos:end="175:53"><name pos:start="175:45" pos:end="175:53">xen_domid</name></expr></argument>, <argument pos:start="175:56" pos:end="175:70"><expr pos:start="175:56" pos:end="175:70"><name pos:start="175:56" pos:end="175:70"><name pos:start="175:56" pos:end="175:60">state</name><operator pos:start="175:61" pos:end="175:62">-&gt;</operator><name pos:start="175:63" pos:end="175:70">ioservid</name></name></expr></argument>, <argument pos:start="175:73" pos:end="175:76"><expr pos:start="175:73" pos:end="175:76"><name pos:start="175:73" pos:end="175:76">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="185:5"><if pos:start="177:5" pos:end="185:5">if <condition pos:start="177:8" pos:end="177:15">(<expr pos:start="177:9" pos:end="177:14"><name pos:start="177:9" pos:end="177:10">rc</name> <operator pos:start="177:12" pos:end="177:12">&lt;</operator> <literal type="number" pos:start="177:14" pos:end="177:14">0</literal></expr>)</condition> <block pos:start="177:17" pos:end="185:5">{<block_content pos:start="179:9" pos:end="183:17">

        <expr_stmt pos:start="179:9" pos:end="181:36"><expr pos:start="179:9" pos:end="181:35"><call pos:start="179:9" pos:end="181:35"><name pos:start="179:9" pos:end="179:20">error_report</name><argument_list pos:start="179:21" pos:end="181:35">(<argument pos:start="179:22" pos:end="179:92"><expr pos:start="179:22" pos:end="179:92"><literal type="string" pos:start="179:22" pos:end="179:75">"failed to enable ioreq server info: error %d handle="</literal> <name pos:start="179:77" pos:end="179:92">XC_INTERFACE_FMT</name></expr></argument>,

                     <argument pos:start="181:22" pos:end="181:26"><expr pos:start="181:22" pos:end="181:26"><name pos:start="181:22" pos:end="181:26">errno</name></expr></argument>, <argument pos:start="181:29" pos:end="181:34"><expr pos:start="181:29" pos:end="181:34"><name pos:start="181:29" pos:end="181:34">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:17">goto <name pos:start="183:14" pos:end="183:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:75"><expr pos:start="189:5" pos:end="189:74"><name pos:start="189:5" pos:end="189:27"><name pos:start="189:5" pos:end="189:9">state</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:27">ioreq_local_port</name></name> <operator pos:start="189:29" pos:end="189:29">=</operator> <call pos:start="189:31" pos:end="189:74"><name pos:start="189:31" pos:end="189:39">g_malloc0</name><argument_list pos:start="189:40" pos:end="189:74">(<argument pos:start="189:41" pos:end="189:73"><expr pos:start="189:41" pos:end="189:73"><name pos:start="189:41" pos:end="189:48">max_cpus</name> <operator pos:start="189:50" pos:end="189:50">*</operator> <sizeof pos:start="189:52" pos:end="189:73">sizeof <argument_list pos:start="189:59" pos:end="189:73">(<argument pos:start="189:60" pos:end="189:72"><expr pos:start="189:60" pos:end="189:72"><name pos:start="189:60" pos:end="189:72">evtchn_port_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="193:5" pos:end="193:56">/* FIXME: how about if we overflow the page here? */</comment>

    <for pos:start="195:5" pos:end="211:5">for <control pos:start="195:9" pos:end="195:34">(<init pos:start="195:10" pos:end="195:15"><expr pos:start="195:10" pos:end="195:14"><name pos:start="195:10" pos:end="195:10">i</name> <operator pos:start="195:12" pos:end="195:12">=</operator> <literal type="number" pos:start="195:14" pos:end="195:14">0</literal></expr>;</init> <condition pos:start="195:17" pos:end="195:29"><expr pos:start="195:17" pos:end="195:28"><name pos:start="195:17" pos:end="195:17">i</name> <operator pos:start="195:19" pos:end="195:19">&lt;</operator> <name pos:start="195:21" pos:end="195:28">max_cpus</name></expr>;</condition> <incr pos:start="195:31" pos:end="195:33"><expr pos:start="195:31" pos:end="195:33"><name pos:start="195:31" pos:end="195:31">i</name><operator pos:start="195:32" pos:end="195:33">++</operator></expr></incr>)</control> <block pos:start="195:36" pos:end="211:5">{<block_content pos:start="197:9" pos:end="209:40">

        <expr_stmt pos:start="197:9" pos:end="199:79"><expr pos:start="197:9" pos:end="199:78"><name pos:start="197:9" pos:end="197:10">rc</name> <operator pos:start="197:12" pos:end="197:12">=</operator> <call pos:start="197:14" pos:end="199:78"><name pos:start="197:14" pos:end="197:39">xc_evtchn_bind_interdomain</name><argument_list pos:start="197:40" pos:end="199:78">(<argument pos:start="197:41" pos:end="197:57"><expr pos:start="197:41" pos:end="197:57"><name pos:start="197:41" pos:end="197:57"><name pos:start="197:41" pos:end="197:45">state</name><operator pos:start="197:46" pos:end="197:47">-&gt;</operator><name pos:start="197:48" pos:end="197:57">xce_handle</name></name></expr></argument>, <argument pos:start="197:60" pos:end="197:68"><expr pos:start="197:60" pos:end="197:68"><name pos:start="197:60" pos:end="197:68">xen_domid</name></expr></argument>,

                                        <argument pos:start="199:41" pos:end="199:77"><expr pos:start="199:41" pos:end="199:77"><call pos:start="199:41" pos:end="199:77"><name pos:start="199:41" pos:end="199:54">xen_vcpu_eport</name><argument_list pos:start="199:55" pos:end="199:77">(<argument pos:start="199:56" pos:end="199:73"><expr pos:start="199:56" pos:end="199:73"><name pos:start="199:56" pos:end="199:73"><name pos:start="199:56" pos:end="199:60">state</name><operator pos:start="199:61" pos:end="199:62">-&gt;</operator><name pos:start="199:63" pos:end="199:73">shared_page</name></name></expr></argument>, <argument pos:start="199:76" pos:end="199:76"><expr pos:start="199:76" pos:end="199:76"><name pos:start="199:76" pos:end="199:76">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="207:9"><if pos:start="201:9" pos:end="207:9">if <condition pos:start="201:12" pos:end="201:21">(<expr pos:start="201:13" pos:end="201:20"><name pos:start="201:13" pos:end="201:14">rc</name> <operator pos:start="201:16" pos:end="201:17">==</operator> <operator pos:start="201:19" pos:end="201:19">-</operator><literal type="number" pos:start="201:20" pos:end="201:20">1</literal></expr>)</condition> <block pos:start="201:23" pos:end="207:9">{<block_content pos:start="203:13" pos:end="205:21">

            <expr_stmt pos:start="203:13" pos:end="203:69"><expr pos:start="203:13" pos:end="203:68"><call pos:start="203:13" pos:end="203:68"><name pos:start="203:13" pos:end="203:24">error_report</name><argument_list pos:start="203:25" pos:end="203:68">(<argument pos:start="203:26" pos:end="203:57"><expr pos:start="203:26" pos:end="203:57"><literal type="string" pos:start="203:26" pos:end="203:57">"shared evtchn %d bind error %d"</literal></expr></argument>, <argument pos:start="203:60" pos:end="203:60"><expr pos:start="203:60" pos:end="203:60"><name pos:start="203:60" pos:end="203:60">i</name></expr></argument>, <argument pos:start="203:63" pos:end="203:67"><expr pos:start="203:63" pos:end="203:67"><name pos:start="203:63" pos:end="203:67">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="205:13" pos:end="205:21">goto <name pos:start="205:18" pos:end="205:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:40"><expr pos:start="209:9" pos:end="209:39"><name pos:start="209:9" pos:end="209:34"><name pos:start="209:9" pos:end="209:13">state</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:31">ioreq_local_port</name><index pos:start="209:32" pos:end="209:34">[<expr pos:start="209:33" pos:end="209:33"><name pos:start="209:33" pos:end="209:33">i</name></expr>]</index></name> <operator pos:start="209:36" pos:end="209:36">=</operator> <name pos:start="209:38" pos:end="209:39">rc</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="215:5" pos:end="217:53"><expr pos:start="215:5" pos:end="217:52"><name pos:start="215:5" pos:end="215:6">rc</name> <operator pos:start="215:8" pos:end="215:8">=</operator> <call pos:start="215:10" pos:end="217:52"><name pos:start="215:10" pos:end="215:35">xc_evtchn_bind_interdomain</name><argument_list pos:start="215:36" pos:end="217:52">(<argument pos:start="215:37" pos:end="215:53"><expr pos:start="215:37" pos:end="215:53"><name pos:start="215:37" pos:end="215:53"><name pos:start="215:37" pos:end="215:41">state</name><operator pos:start="215:42" pos:end="215:43">-&gt;</operator><name pos:start="215:44" pos:end="215:53">xce_handle</name></name></expr></argument>, <argument pos:start="215:56" pos:end="215:64"><expr pos:start="215:56" pos:end="215:64"><name pos:start="215:56" pos:end="215:64">xen_domid</name></expr></argument>,

                                    <argument pos:start="217:37" pos:end="217:51"><expr pos:start="217:37" pos:end="217:51"><name pos:start="217:37" pos:end="217:51">bufioreq_evtchn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="225:5"><if pos:start="219:5" pos:end="225:5">if <condition pos:start="219:8" pos:end="219:17">(<expr pos:start="219:9" pos:end="219:16"><name pos:start="219:9" pos:end="219:10">rc</name> <operator pos:start="219:12" pos:end="219:13">==</operator> <operator pos:start="219:15" pos:end="219:15">-</operator><literal type="number" pos:start="219:16" pos:end="219:16">1</literal></expr>)</condition> <block pos:start="219:19" pos:end="225:5">{<block_content pos:start="221:9" pos:end="223:17">

        <expr_stmt pos:start="221:9" pos:end="221:61"><expr pos:start="221:9" pos:end="221:60"><call pos:start="221:9" pos:end="221:60"><name pos:start="221:9" pos:end="221:20">error_report</name><argument_list pos:start="221:21" pos:end="221:60">(<argument pos:start="221:22" pos:end="221:52"><expr pos:start="221:22" pos:end="221:52"><literal type="string" pos:start="221:22" pos:end="221:52">"buffered evtchn bind error %d"</literal></expr></argument>, <argument pos:start="221:55" pos:end="221:59"><expr pos:start="221:55" pos:end="221:59"><name pos:start="221:55" pos:end="221:59">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="223:9" pos:end="223:17">goto <name pos:start="223:14" pos:end="223:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:36"><expr pos:start="227:5" pos:end="227:35"><name pos:start="227:5" pos:end="227:30"><name pos:start="227:5" pos:end="227:9">state</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:30">bufioreq_local_port</name></name> <operator pos:start="227:32" pos:end="227:32">=</operator> <name pos:start="227:34" pos:end="227:35">rc</name></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:29">/* Init RAM management */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:56"><expr pos:start="233:5" pos:end="233:55"><call pos:start="233:5" pos:end="233:55"><name pos:start="233:5" pos:end="233:22">xen_map_cache_init</name><argument_list pos:start="233:23" pos:end="233:55">(<argument pos:start="233:24" pos:end="233:47"><expr pos:start="233:24" pos:end="233:47"><name pos:start="233:24" pos:end="233:47">xen_phys_offset_to_gaddr</name></expr></argument>, <argument pos:start="233:50" pos:end="233:54"><expr pos:start="233:50" pos:end="233:54"><name pos:start="233:50" pos:end="233:54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:45"><expr pos:start="235:5" pos:end="235:44"><call pos:start="235:5" pos:end="235:44"><name pos:start="235:5" pos:end="235:16">xen_ram_init</name><argument_list pos:start="235:17" pos:end="235:44">(<argument pos:start="235:18" pos:end="235:21"><expr pos:start="235:18" pos:end="235:21"><name pos:start="235:18" pos:end="235:21">pcms</name></expr></argument>, <argument pos:start="235:24" pos:end="235:31"><expr pos:start="235:24" pos:end="235:31"><name pos:start="235:24" pos:end="235:31">ram_size</name></expr></argument>, <argument pos:start="235:34" pos:end="235:43"><expr pos:start="235:34" pos:end="235:43"><name pos:start="235:34" pos:end="235:43">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:74"><expr pos:start="239:5" pos:end="239:73"><call pos:start="239:5" pos:end="239:73"><name pos:start="239:5" pos:end="239:36">qemu_add_vm_change_state_handler</name><argument_list pos:start="239:37" pos:end="239:73">(<argument pos:start="239:38" pos:end="239:65"><expr pos:start="239:38" pos:end="239:65"><name pos:start="239:38" pos:end="239:65">xen_hvm_change_state_handler</name></expr></argument>, <argument pos:start="239:68" pos:end="239:72"><expr pos:start="239:68" pos:end="239:72"><name pos:start="239:68" pos:end="239:72">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:49"><expr pos:start="243:5" pos:end="243:48"><name pos:start="243:5" pos:end="243:26"><name pos:start="243:5" pos:end="243:9">state</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:26">memory_listener</name></name> <operator pos:start="243:28" pos:end="243:28">=</operator> <name pos:start="243:30" pos:end="243:48">xen_memory_listener</name></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:32"><expr pos:start="245:5" pos:end="245:31"><call pos:start="245:5" pos:end="245:31"><name pos:start="245:5" pos:end="245:14">QLIST_INIT</name><argument_list pos:start="245:15" pos:end="245:31">(<argument pos:start="245:16" pos:end="245:30"><expr pos:start="245:16" pos:end="245:30"><operator pos:start="245:16" pos:end="245:16">&amp;</operator><name pos:start="245:17" pos:end="245:30"><name pos:start="245:17" pos:end="245:21">state</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:30">physmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:77"><expr pos:start="247:5" pos:end="247:76"><call pos:start="247:5" pos:end="247:76"><name pos:start="247:5" pos:end="247:28">memory_listener_register</name><argument_list pos:start="247:29" pos:end="247:76">(<argument pos:start="247:30" pos:end="247:52"><expr pos:start="247:30" pos:end="247:52"><operator pos:start="247:30" pos:end="247:30">&amp;</operator><name pos:start="247:31" pos:end="247:52"><name pos:start="247:31" pos:end="247:35">state</name><operator pos:start="247:36" pos:end="247:37">-&gt;</operator><name pos:start="247:38" pos:end="247:52">memory_listener</name></name></expr></argument>, <argument pos:start="247:55" pos:end="247:75"><expr pos:start="247:55" pos:end="247:75"><operator pos:start="247:55" pos:end="247:55">&amp;</operator><name pos:start="247:56" pos:end="247:75">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:35"><expr pos:start="249:5" pos:end="249:34"><name pos:start="249:5" pos:end="249:27"><name pos:start="249:5" pos:end="249:9">state</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:27">log_for_dirtybit</name></name> <operator pos:start="249:29" pos:end="249:29">=</operator> <name pos:start="249:31" pos:end="249:34">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:41"><expr pos:start="253:5" pos:end="253:40"><name pos:start="253:5" pos:end="253:22"><name pos:start="253:5" pos:end="253:9">state</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:22">io_listener</name></name> <operator pos:start="253:24" pos:end="253:24">=</operator> <name pos:start="253:26" pos:end="253:40">xen_io_listener</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:69"><expr pos:start="255:5" pos:end="255:68"><call pos:start="255:5" pos:end="255:68"><name pos:start="255:5" pos:end="255:28">memory_listener_register</name><argument_list pos:start="255:29" pos:end="255:68">(<argument pos:start="255:30" pos:end="255:48"><expr pos:start="255:30" pos:end="255:48"><operator pos:start="255:30" pos:end="255:30">&amp;</operator><name pos:start="255:31" pos:end="255:48"><name pos:start="255:31" pos:end="255:35">state</name><operator pos:start="255:36" pos:end="255:37">-&gt;</operator><name pos:start="255:38" pos:end="255:48">io_listener</name></name></expr></argument>, <argument pos:start="255:51" pos:end="255:67"><expr pos:start="255:51" pos:end="255:67"><operator pos:start="255:51" pos:end="255:51">&amp;</operator><name pos:start="255:52" pos:end="255:67">address_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:49"><expr pos:start="259:5" pos:end="259:48"><name pos:start="259:5" pos:end="259:26"><name pos:start="259:5" pos:end="259:9">state</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:26">device_listener</name></name> <operator pos:start="259:28" pos:end="259:28">=</operator> <name pos:start="259:30" pos:end="259:48">xen_device_listener</name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:54"><expr pos:start="261:5" pos:end="261:53"><call pos:start="261:5" pos:end="261:53"><name pos:start="261:5" pos:end="261:28">device_listener_register</name><argument_list pos:start="261:29" pos:end="261:53">(<argument pos:start="261:30" pos:end="261:52"><expr pos:start="261:30" pos:end="261:52"><operator pos:start="261:30" pos:end="261:30">&amp;</operator><name pos:start="261:31" pos:end="261:52"><name pos:start="261:31" pos:end="261:35">state</name><operator pos:start="261:36" pos:end="261:37">-&gt;</operator><name pos:start="261:38" pos:end="261:52">device_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="265:5" pos:end="265:43">/* Initialize backend core &amp; drivers */</comment>

    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if <condition pos:start="267:8" pos:end="267:27">(<expr pos:start="267:9" pos:end="267:26"><call pos:start="267:9" pos:end="267:21"><name pos:start="267:9" pos:end="267:19">xen_be_init</name><argument_list pos:start="267:20" pos:end="267:21">()</argument_list></call> <operator pos:start="267:23" pos:end="267:24">!=</operator> <literal type="number" pos:start="267:26" pos:end="267:26">0</literal></expr>)</condition> <block pos:start="267:29" pos:end="273:5">{<block_content pos:start="269:9" pos:end="271:17">

        <expr_stmt pos:start="269:9" pos:end="269:54"><expr pos:start="269:9" pos:end="269:53"><call pos:start="269:9" pos:end="269:53"><name pos:start="269:9" pos:end="269:20">error_report</name><argument_list pos:start="269:21" pos:end="269:53">(<argument pos:start="269:22" pos:end="269:52"><expr pos:start="269:22" pos:end="269:52"><literal type="string" pos:start="269:22" pos:end="269:52">"xen backend core setup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="271:9" pos:end="271:17">goto <name pos:start="271:14" pos:end="271:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:49"><expr pos:start="275:5" pos:end="275:48"><call pos:start="275:5" pos:end="275:48"><name pos:start="275:5" pos:end="275:19">xen_be_register</name><argument_list pos:start="275:20" pos:end="275:48">(<argument pos:start="275:21" pos:end="275:29"><expr pos:start="275:21" pos:end="275:29"><literal type="string" pos:start="275:21" pos:end="275:29">"console"</literal></expr></argument>, <argument pos:start="275:32" pos:end="275:47"><expr pos:start="275:32" pos:end="275:47"><operator pos:start="275:32" pos:end="275:32">&amp;</operator><name pos:start="275:33" pos:end="275:47">xen_console_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:47"><expr pos:start="277:5" pos:end="277:46"><call pos:start="277:5" pos:end="277:46"><name pos:start="277:5" pos:end="277:19">xen_be_register</name><argument_list pos:start="277:20" pos:end="277:46">(<argument pos:start="277:21" pos:end="277:26"><expr pos:start="277:21" pos:end="277:26"><literal type="string" pos:start="277:21" pos:end="277:26">"vkbd"</literal></expr></argument>, <argument pos:start="277:29" pos:end="277:45"><expr pos:start="277:29" pos:end="277:45"><operator pos:start="277:29" pos:end="277:29">&amp;</operator><name pos:start="277:30" pos:end="277:45">xen_kbdmouse_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:46"><expr pos:start="279:5" pos:end="279:45"><call pos:start="279:5" pos:end="279:45"><name pos:start="279:5" pos:end="279:19">xen_be_register</name><argument_list pos:start="279:20" pos:end="279:45">(<argument pos:start="279:21" pos:end="279:27"><expr pos:start="279:21" pos:end="279:27"><literal type="string" pos:start="279:21" pos:end="279:27">"qdisk"</literal></expr></argument>, <argument pos:start="279:30" pos:end="279:44"><expr pos:start="279:30" pos:end="279:44"><operator pos:start="279:30" pos:end="279:30">&amp;</operator><name pos:start="279:31" pos:end="279:44">xen_blkdev_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:28"><expr pos:start="281:5" pos:end="281:27"><call pos:start="281:5" pos:end="281:27"><name pos:start="281:5" pos:end="281:20">xen_read_physmap</name><argument_list pos:start="281:21" pos:end="281:27">(<argument pos:start="281:22" pos:end="281:26"><expr pos:start="281:22" pos:end="281:26"><name pos:start="281:22" pos:end="281:26">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="283:5" pos:end="283:11">return;</return>



<label pos:start="287:1" pos:end="287:4"><name pos:start="287:1" pos:end="287:3">err</name>:</label>

    <expr_stmt pos:start="289:5" pos:end="289:71"><expr pos:start="289:5" pos:end="289:70"><call pos:start="289:5" pos:end="289:70"><name pos:start="289:5" pos:end="289:16">error_report</name><argument_list pos:start="289:17" pos:end="289:70">(<argument pos:start="289:18" pos:end="289:69"><expr pos:start="289:18" pos:end="289:69"><literal type="string" pos:start="289:18" pos:end="289:69">"xen hardware virtual machine initialisation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:12"><expr pos:start="291:5" pos:end="291:11"><call pos:start="291:5" pos:end="291:11"><name pos:start="291:5" pos:end="291:8">exit</name><argument_list pos:start="291:9" pos:end="291:11">(<argument pos:start="291:10" pos:end="291:10"><expr pos:start="291:10" pos:end="291:10"><literal type="number" pos:start="291:10" pos:end="291:10">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
