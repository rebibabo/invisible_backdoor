<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8800.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mjpegb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:57">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, 

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:37">uint8_t</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:42">buf</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:56">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="219:1">{<block_content pos:start="9:5" pos:end="217:25">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">MJpegDecodeContext</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:25">s</name> <init pos:start="9:27" pos:end="9:44">= <expr pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:33">avctx</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">buf_end</name></decl>, <decl pos:start="11:23" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:30">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">picture</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:21">hgb</name></decl>;</decl_stmt> <comment type="block" pos:start="15:24" pos:end="15:43">/* for the header */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:71"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:21">dqt_offs</name></decl>, <decl pos:start="17:24" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:24" pos:end="17:31">dht_offs</name></decl>, <decl pos:start="17:34" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:34" pos:end="17:41">sof_offs</name></decl>, <decl pos:start="17:44" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:44" pos:end="17:51">sos_offs</name></decl>, <decl pos:start="17:54" pos:end="17:70"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:54" pos:end="17:70">second_field_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:23">field_size</name></decl>, <decl pos:start="19:26" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:26" pos:end="19:33">sod_offs</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="25:5" pos:end="27:17"><if pos:start="25:5" pos:end="27:17">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:16">buf_size</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:11">buf_ptr</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:11">buf_end</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:17">buf</name> <operator pos:start="33:19" pos:end="33:19">+</operator> <name pos:start="33:21" pos:end="33:28">buf_size</name></expr>;</expr_stmt>

    

<label pos:start="37:1" pos:end="37:12"><name pos:start="37:1" pos:end="37:11">read_header</name>:</label>

    <comment type="block" pos:start="39:5" pos:end="39:28">/* reset on every SOI */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:28"><expr pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:23">restart_interval</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <literal type="number" pos:start="41:27" pos:end="41:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:21">mjpb_skiptosod</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:68"><expr pos:start="47:5" pos:end="47:67"><call pos:start="47:5" pos:end="47:67"><name pos:start="47:5" pos:end="47:17">init_get_bits</name><argument_list pos:start="47:18" pos:end="47:67">(<argument pos:start="47:19" pos:end="47:22"><expr pos:start="47:19" pos:end="47:22"><operator pos:start="47:19" pos:end="47:19">&amp;</operator><name pos:start="47:20" pos:end="47:22">hgb</name></expr></argument>, <argument pos:start="47:25" pos:end="47:31"><expr pos:start="47:25" pos:end="47:31"><name pos:start="47:25" pos:end="47:31">buf_ptr</name></expr></argument>, <comment type="block" pos:start="47:34" pos:end="47:45">/*buf_size*/</comment><argument pos:start="47:46" pos:end="47:66"><expr pos:start="47:46" pos:end="47:66"><operator pos:start="47:46" pos:end="47:46">(</operator><name pos:start="47:47" pos:end="47:53">buf_end</name> <operator pos:start="47:55" pos:end="47:55">-</operator> <name pos:start="47:57" pos:end="47:63">buf_ptr</name><operator pos:start="47:64" pos:end="47:64">)</operator><operator pos:start="47:65" pos:end="47:65">*</operator><literal type="number" pos:start="47:66" pos:end="47:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><call pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:13">skip_bits</name><argument_list pos:start="51:14" pos:end="51:23">(<argument pos:start="51:15" pos:end="51:18"><expr pos:start="51:15" pos:end="51:18"><operator pos:start="51:15" pos:end="51:15">&amp;</operator><name pos:start="51:16" pos:end="51:18">hgb</name></expr></argument>, <argument pos:start="51:21" pos:end="51:22"><expr pos:start="51:21" pos:end="51:22"><literal type="number" pos:start="51:21" pos:end="51:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="51:26" pos:end="51:45">/* reserved zeros */</comment>

    

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:67">(<expr pos:start="55:9" pos:end="55:66"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:21">get_bits_long</name><argument_list pos:start="55:22" pos:end="55:31">(<argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><operator pos:start="55:23" pos:end="55:23">&amp;</operator><name pos:start="55:24" pos:end="55:26">hgb</name></expr></argument>, <argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><literal type="number" pos:start="55:29" pos:end="55:30">32</literal></expr></argument>)</argument_list></call> <operator pos:start="55:33" pos:end="55:34">!=</operator> <call pos:start="55:36" pos:end="55:66"><name pos:start="55:36" pos:end="55:43">be2me_32</name><argument_list pos:start="55:44" pos:end="55:66">(<argument pos:start="55:45" pos:end="55:65"><expr pos:start="55:45" pos:end="55:65"><call pos:start="55:45" pos:end="55:65"><name pos:start="55:45" pos:end="55:57">ff_get_fourcc</name><argument_list pos:start="55:58" pos:end="55:65">(<argument pos:start="55:59" pos:end="55:64"><expr pos:start="55:59" pos:end="55:64"><literal type="string" pos:start="55:59" pos:end="55:64">"mjpg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="57:5" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:17">

	<expr_stmt pos:start="59:9" pos:end="59:46"><expr pos:start="59:9" pos:end="59:45"><call pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:15">dprintf</name><argument_list pos:start="59:16" pos:end="59:45">(<argument pos:start="59:17" pos:end="59:44"><expr pos:start="59:17" pos:end="59:44"><literal type="string" pos:start="59:17" pos:end="59:44">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:41"><expr pos:start="67:5" pos:end="67:40"><name pos:start="67:5" pos:end="67:14">field_size</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:40"><name pos:start="67:18" pos:end="67:30">get_bits_long</name><argument_list pos:start="67:31" pos:end="67:40">(<argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><operator pos:start="67:32" pos:end="67:32">&amp;</operator><name pos:start="67:33" pos:end="67:35">hgb</name></expr></argument>, <argument pos:start="67:38" pos:end="67:39"><expr pos:start="67:38" pos:end="67:39"><literal type="number" pos:start="67:38" pos:end="67:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:43" pos:end="67:58">/* field size */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:46"><expr pos:start="69:5" pos:end="69:45"><call pos:start="69:5" pos:end="69:45"><name pos:start="69:5" pos:end="69:11">dprintf</name><argument_list pos:start="69:12" pos:end="69:45">(<argument pos:start="69:13" pos:end="69:32"><expr pos:start="69:13" pos:end="69:32"><literal type="string" pos:start="69:13" pos:end="69:32">"field size: 0x%x\n"</literal></expr></argument>, <argument pos:start="69:35" pos:end="69:44"><expr pos:start="69:35" pos:end="69:44"><name pos:start="69:35" pos:end="69:44">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><call pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:13">skip_bits</name><argument_list pos:start="71:14" pos:end="71:23">(<argument pos:start="71:15" pos:end="71:18"><expr pos:start="71:15" pos:end="71:18"><operator pos:start="71:15" pos:end="71:15">&amp;</operator><name pos:start="71:16" pos:end="71:18">hgb</name></expr></argument>, <argument pos:start="71:21" pos:end="71:22"><expr pos:start="71:21" pos:end="71:22"><literal type="number" pos:start="71:21" pos:end="71:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:26" pos:end="71:48">/* padded field size */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:21">second_field_offs</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <call pos:start="73:25" pos:end="73:47"><name pos:start="73:25" pos:end="73:37">get_bits_long</name><argument_list pos:start="73:38" pos:end="73:47">(<argument pos:start="73:39" pos:end="73:42"><expr pos:start="73:39" pos:end="73:42"><operator pos:start="73:39" pos:end="73:39">&amp;</operator><name pos:start="73:40" pos:end="73:42">hgb</name></expr></argument>, <argument pos:start="73:45" pos:end="73:46"><expr pos:start="73:45" pos:end="73:46"><literal type="number" pos:start="73:45" pos:end="73:46">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:60"><expr pos:start="75:5" pos:end="75:59"><call pos:start="75:5" pos:end="75:59"><name pos:start="75:5" pos:end="75:11">dprintf</name><argument_list pos:start="75:12" pos:end="75:59">(<argument pos:start="75:13" pos:end="75:39"><expr pos:start="75:13" pos:end="75:39"><literal type="string" pos:start="75:13" pos:end="75:39">"second field offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="75:42" pos:end="75:58"><expr pos:start="75:42" pos:end="75:58"><name pos:start="75:42" pos:end="75:58">second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="79:26"><if pos:start="77:5" pos:end="79:26">if <condition pos:start="77:8" pos:end="77:26">(<expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:25">second_field_offs</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:26"><block_content pos:start="79:9" pos:end="79:26">

	<expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:21">interlaced</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <literal type="number" pos:start="79:25" pos:end="79:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:12">dqt_offs</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:38"><name pos:start="83:16" pos:end="83:28">get_bits_long</name><argument_list pos:start="83:29" pos:end="83:38">(<argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:33">hgb</name></expr></argument>, <argument pos:start="83:36" pos:end="83:37"><expr pos:start="83:36" pos:end="83:37"><literal type="number" pos:start="83:36" pos:end="83:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:42"><expr pos:start="85:5" pos:end="85:41"><call pos:start="85:5" pos:end="85:41"><name pos:start="85:5" pos:end="85:11">dprintf</name><argument_list pos:start="85:12" pos:end="85:41">(<argument pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:30"><literal type="string" pos:start="85:13" pos:end="85:30">"dqt offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="85:33" pos:end="85:40"><expr pos:start="85:33" pos:end="85:40"><name pos:start="85:33" pos:end="85:40">dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:17">(<expr pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">dqt_offs</name></expr>)</condition>

    <block pos:start="89:5" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:28">

	<expr_stmt pos:start="91:9" pos:end="91:74"><expr pos:start="91:9" pos:end="91:73"><call pos:start="91:9" pos:end="91:73"><name pos:start="91:9" pos:end="91:21">init_get_bits</name><argument_list pos:start="91:22" pos:end="91:73">(<argument pos:start="91:23" pos:end="91:28"><expr pos:start="91:23" pos:end="91:28"><operator pos:start="91:23" pos:end="91:23">&amp;</operator><name pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:24">s</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:28">gb</name></name></expr></argument>, <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:33">buf</name><operator pos:start="91:34" pos:end="91:34">+</operator><name pos:start="91:35" pos:end="91:42">dqt_offs</name></expr></argument>, <argument pos:start="91:45" pos:end="91:72"><expr pos:start="91:45" pos:end="91:72"><operator pos:start="91:45" pos:end="91:45">(</operator><name pos:start="91:46" pos:end="91:52">buf_end</name> <operator pos:start="91:54" pos:end="91:54">-</operator> <operator pos:start="91:56" pos:end="91:56">(</operator><name pos:start="91:57" pos:end="91:59">buf</name><operator pos:start="91:60" pos:end="91:60">+</operator><name pos:start="91:61" pos:end="91:68">dqt_offs</name><operator pos:start="91:69" pos:end="91:69">)</operator><operator pos:start="91:70" pos:end="91:70">)</operator><operator pos:start="91:71" pos:end="91:71">*</operator><literal type="number" pos:start="91:72" pos:end="91:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:21">start_code</name></name> <operator pos:start="93:23" pos:end="93:23">=</operator> <name pos:start="93:25" pos:end="93:27">DQT</name></expr>;</expr_stmt>

	<expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><call pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:24">mjpeg_decode_dqt</name><argument_list pos:start="95:25" pos:end="95:27">(<argument pos:start="95:26" pos:end="95:26"><expr pos:start="95:26" pos:end="95:26"><name pos:start="95:26" pos:end="95:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <expr_stmt pos:start="101:5" pos:end="101:39"><expr pos:start="101:5" pos:end="101:38"><name pos:start="101:5" pos:end="101:12">dht_offs</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:38"><name pos:start="101:16" pos:end="101:28">get_bits_long</name><argument_list pos:start="101:29" pos:end="101:38">(<argument pos:start="101:30" pos:end="101:33"><expr pos:start="101:30" pos:end="101:33"><operator pos:start="101:30" pos:end="101:30">&amp;</operator><name pos:start="101:31" pos:end="101:33">hgb</name></expr></argument>, <argument pos:start="101:36" pos:end="101:37"><expr pos:start="101:36" pos:end="101:37"><literal type="number" pos:start="101:36" pos:end="101:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><call pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:11">dprintf</name><argument_list pos:start="103:12" pos:end="103:41">(<argument pos:start="103:13" pos:end="103:30"><expr pos:start="103:13" pos:end="103:30"><literal type="string" pos:start="103:13" pos:end="103:30">"dht offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="103:33" pos:end="103:40"><expr pos:start="103:33" pos:end="103:40"><name pos:start="103:33" pos:end="103:40">dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:17">(<expr pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:16">dht_offs</name></expr>)</condition>

    <block pos:start="107:5" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:28">

	<expr_stmt pos:start="109:9" pos:end="109:74"><expr pos:start="109:9" pos:end="109:73"><call pos:start="109:9" pos:end="109:73"><name pos:start="109:9" pos:end="109:21">init_get_bits</name><argument_list pos:start="109:22" pos:end="109:73">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">gb</name></name></expr></argument>, <argument pos:start="109:31" pos:end="109:42"><expr pos:start="109:31" pos:end="109:42"><name pos:start="109:31" pos:end="109:33">buf</name><operator pos:start="109:34" pos:end="109:34">+</operator><name pos:start="109:35" pos:end="109:42">dht_offs</name></expr></argument>, <argument pos:start="109:45" pos:end="109:72"><expr pos:start="109:45" pos:end="109:72"><operator pos:start="109:45" pos:end="109:45">(</operator><name pos:start="109:46" pos:end="109:52">buf_end</name> <operator pos:start="109:54" pos:end="109:54">-</operator> <operator pos:start="109:56" pos:end="109:56">(</operator><name pos:start="109:57" pos:end="109:59">buf</name><operator pos:start="109:60" pos:end="109:60">+</operator><name pos:start="109:61" pos:end="109:68">dht_offs</name><operator pos:start="109:69" pos:end="109:69">)</operator><operator pos:start="109:70" pos:end="109:70">)</operator><operator pos:start="109:71" pos:end="109:71">*</operator><literal type="number" pos:start="109:72" pos:end="109:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="111:9" pos:end="111:28"><expr pos:start="111:9" pos:end="111:27"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:21">start_code</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:27">DHT</name></expr>;</expr_stmt>

	<expr_stmt pos:start="113:9" pos:end="113:28"><expr pos:start="113:9" pos:end="113:27"><call pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:24">mjpeg_decode_dht</name><argument_list pos:start="113:25" pos:end="113:27">(<argument pos:start="113:26" pos:end="113:26"><expr pos:start="113:26" pos:end="113:26"><name pos:start="113:26" pos:end="113:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:12">sof_offs</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:38"><name pos:start="119:16" pos:end="119:28">get_bits_long</name><argument_list pos:start="119:29" pos:end="119:38">(<argument pos:start="119:30" pos:end="119:33"><expr pos:start="119:30" pos:end="119:33"><operator pos:start="119:30" pos:end="119:30">&amp;</operator><name pos:start="119:31" pos:end="119:33">hgb</name></expr></argument>, <argument pos:start="119:36" pos:end="119:37"><expr pos:start="119:36" pos:end="119:37"><literal type="number" pos:start="119:36" pos:end="119:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:42"><expr pos:start="121:5" pos:end="121:41"><call pos:start="121:5" pos:end="121:41"><name pos:start="121:5" pos:end="121:11">dprintf</name><argument_list pos:start="121:12" pos:end="121:41">(<argument pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:30"><literal type="string" pos:start="121:13" pos:end="121:30">"sof offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="121:33" pos:end="121:40"><expr pos:start="121:33" pos:end="121:40"><name pos:start="121:33" pos:end="121:40">sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="135:5"><if pos:start="123:5" pos:end="135:5">if <condition pos:start="123:8" pos:end="123:17">(<expr pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:16">sof_offs</name></expr>)</condition>

    <block pos:start="125:5" pos:end="135:5">{<block_content pos:start="127:9" pos:end="133:22">

	<expr_stmt pos:start="127:9" pos:end="127:74"><expr pos:start="127:9" pos:end="127:73"><call pos:start="127:9" pos:end="127:73"><name pos:start="127:9" pos:end="127:21">init_get_bits</name><argument_list pos:start="127:22" pos:end="127:73">(<argument pos:start="127:23" pos:end="127:28"><expr pos:start="127:23" pos:end="127:28"><operator pos:start="127:23" pos:end="127:23">&amp;</operator><name pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:24">s</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:28">gb</name></name></expr></argument>, <argument pos:start="127:31" pos:end="127:42"><expr pos:start="127:31" pos:end="127:42"><name pos:start="127:31" pos:end="127:33">buf</name><operator pos:start="127:34" pos:end="127:34">+</operator><name pos:start="127:35" pos:end="127:42">sof_offs</name></expr></argument>, <argument pos:start="127:45" pos:end="127:72"><expr pos:start="127:45" pos:end="127:72"><operator pos:start="127:45" pos:end="127:45">(</operator><name pos:start="127:46" pos:end="127:52">buf_end</name> <operator pos:start="127:54" pos:end="127:54">-</operator> <operator pos:start="127:56" pos:end="127:56">(</operator><name pos:start="127:57" pos:end="127:59">buf</name><operator pos:start="127:60" pos:end="127:60">+</operator><name pos:start="127:61" pos:end="127:68">sof_offs</name><operator pos:start="127:69" pos:end="127:69">)</operator><operator pos:start="127:70" pos:end="127:70">)</operator><operator pos:start="127:71" pos:end="127:71">*</operator><literal type="number" pos:start="127:72" pos:end="127:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="129:9" pos:end="129:29"><expr pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:21">start_code</name></name> <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:28">SOF0</name></expr>;</expr_stmt>

	<if_stmt pos:start="131:9" pos:end="133:22"><if pos:start="131:9" pos:end="133:22">if <condition pos:start="131:12" pos:end="131:36">(<expr pos:start="131:13" pos:end="131:35"><call pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:28">mjpeg_decode_sof</name><argument_list pos:start="131:29" pos:end="131:31">(<argument pos:start="131:30" pos:end="131:30"><expr pos:start="131:30" pos:end="131:30"><name pos:start="131:30" pos:end="131:30">s</name></expr></argument>)</argument_list></call> <operator pos:start="131:33" pos:end="131:33">&lt;</operator> <literal type="number" pos:start="131:35" pos:end="131:35">0</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:22"><block_content pos:start="133:13" pos:end="133:22">

	    <return pos:start="133:13" pos:end="133:22">return <expr pos:start="133:20" pos:end="133:21"><operator pos:start="133:20" pos:end="133:20">-</operator><literal type="number" pos:start="133:21" pos:end="133:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:39"><expr pos:start="139:5" pos:end="139:38"><name pos:start="139:5" pos:end="139:12">sos_offs</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <call pos:start="139:16" pos:end="139:38"><name pos:start="139:16" pos:end="139:28">get_bits_long</name><argument_list pos:start="139:29" pos:end="139:38">(<argument pos:start="139:30" pos:end="139:33"><expr pos:start="139:30" pos:end="139:33"><operator pos:start="139:30" pos:end="139:30">&amp;</operator><name pos:start="139:31" pos:end="139:33">hgb</name></expr></argument>, <argument pos:start="139:36" pos:end="139:37"><expr pos:start="139:36" pos:end="139:37"><literal type="number" pos:start="139:36" pos:end="139:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:42"><expr pos:start="141:5" pos:end="141:41"><call pos:start="141:5" pos:end="141:41"><name pos:start="141:5" pos:end="141:11">dprintf</name><argument_list pos:start="141:12" pos:end="141:41">(<argument pos:start="141:13" pos:end="141:30"><expr pos:start="141:13" pos:end="141:30"><literal type="string" pos:start="141:13" pos:end="141:30">"sos offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="141:33" pos:end="141:40"><expr pos:start="141:33" pos:end="141:40"><name pos:start="141:33" pos:end="141:40">sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:39"><expr pos:start="143:5" pos:end="143:38"><name pos:start="143:5" pos:end="143:12">sod_offs</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <call pos:start="143:16" pos:end="143:38"><name pos:start="143:16" pos:end="143:28">get_bits_long</name><argument_list pos:start="143:29" pos:end="143:38">(<argument pos:start="143:30" pos:end="143:33"><expr pos:start="143:30" pos:end="143:33"><operator pos:start="143:30" pos:end="143:30">&amp;</operator><name pos:start="143:31" pos:end="143:33">hgb</name></expr></argument>, <argument pos:start="143:36" pos:end="143:37"><expr pos:start="143:36" pos:end="143:37"><literal type="number" pos:start="143:36" pos:end="143:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:42"><expr pos:start="145:5" pos:end="145:41"><call pos:start="145:5" pos:end="145:41"><name pos:start="145:5" pos:end="145:11">dprintf</name><argument_list pos:start="145:12" pos:end="145:41">(<argument pos:start="145:13" pos:end="145:30"><expr pos:start="145:13" pos:end="145:30"><literal type="string" pos:start="145:13" pos:end="145:30">"sod offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="145:33" pos:end="145:40"><expr pos:start="145:33" pos:end="145:40"><name pos:start="145:33" pos:end="145:40">sod_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="161:5"><if pos:start="147:5" pos:end="161:5">if <condition pos:start="147:8" pos:end="147:17">(<expr pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">sos_offs</name></expr>)</condition>

    <block pos:start="149:5" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:28">

<comment type="line" pos:start="151:1" pos:end="151:74">//	init_get_bits(&amp;s-&gt;gb, buf+sos_offs, (buf_end - (buf+sos_offs))*8);</comment>

	<expr_stmt pos:start="153:9" pos:end="153:58"><expr pos:start="153:9" pos:end="153:57"><call pos:start="153:9" pos:end="153:57"><name pos:start="153:9" pos:end="153:21">init_get_bits</name><argument_list pos:start="153:22" pos:end="153:57">(<argument pos:start="153:23" pos:end="153:28"><expr pos:start="153:23" pos:end="153:28"><operator pos:start="153:23" pos:end="153:23">&amp;</operator><name pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:24">s</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:28">gb</name></name></expr></argument>, <argument pos:start="153:31" pos:end="153:42"><expr pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:33">buf</name><operator pos:start="153:34" pos:end="153:34">+</operator><name pos:start="153:35" pos:end="153:42">sos_offs</name></expr></argument>, <argument pos:start="153:45" pos:end="153:56"><expr pos:start="153:45" pos:end="153:56"><name pos:start="153:45" pos:end="153:54">field_size</name><operator pos:start="153:55" pos:end="153:55">*</operator><literal type="number" pos:start="153:56" pos:end="153:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="155:9" pos:end="155:74"><expr pos:start="155:9" pos:end="155:73"><name pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:25">mjpb_skiptosod</name></name> <operator pos:start="155:27" pos:end="155:27">=</operator> <operator pos:start="155:29" pos:end="155:29">(</operator><name pos:start="155:30" pos:end="155:37">sod_offs</name> <operator pos:start="155:39" pos:end="155:39">-</operator> <name pos:start="155:41" pos:end="155:48">sos_offs</name> <operator pos:start="155:50" pos:end="155:50">-</operator> <call pos:start="155:52" pos:end="155:72"><name pos:start="155:52" pos:end="155:60">show_bits</name><argument_list pos:start="155:61" pos:end="155:72">(<argument pos:start="155:62" pos:end="155:67"><expr pos:start="155:62" pos:end="155:67"><operator pos:start="155:62" pos:end="155:62">&amp;</operator><name pos:start="155:63" pos:end="155:67"><name pos:start="155:63" pos:end="155:63">s</name><operator pos:start="155:64" pos:end="155:65">-&gt;</operator><name pos:start="155:66" pos:end="155:67">gb</name></name></expr></argument>, <argument pos:start="155:70" pos:end="155:71"><expr pos:start="155:70" pos:end="155:71"><literal type="number" pos:start="155:70" pos:end="155:71">16</literal></expr></argument>)</argument_list></call><operator pos:start="155:73" pos:end="155:73">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="157:9" pos:end="157:28"><expr pos:start="157:9" pos:end="157:27"><name pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:21">start_code</name></name> <operator pos:start="157:23" pos:end="157:23">=</operator> <name pos:start="157:25" pos:end="157:27">SOS</name></expr>;</expr_stmt>

	<expr_stmt pos:start="159:9" pos:end="159:28"><expr pos:start="159:9" pos:end="159:27"><call pos:start="159:9" pos:end="159:27"><name pos:start="159:9" pos:end="159:24">mjpeg_decode_sos</name><argument_list pos:start="159:25" pos:end="159:27">(<argument pos:start="159:26" pos:end="159:26"><expr pos:start="159:26" pos:end="159:26"><name pos:start="159:26" pos:end="159:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="183:5"><if pos:start="165:5" pos:end="183:5">if <condition pos:start="165:8" pos:end="165:22">(<expr pos:start="165:9" pos:end="165:21"><name pos:start="165:9" pos:end="165:21"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:21">interlaced</name></name></expr>)</condition> <block pos:start="165:24" pos:end="183:5">{<block_content pos:start="167:9" pos:end="181:9">

        <expr_stmt pos:start="167:9" pos:end="167:29"><expr pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:23">bottom_field</name></name> <operator pos:start="167:25" pos:end="167:26">^=</operator> <literal type="number" pos:start="167:28" pos:end="167:28">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="169:9" pos:end="169:58">/* if not bottom field, do not output image yet */</comment>

        <if_stmt pos:start="171:9" pos:end="181:9"><if pos:start="171:9" pos:end="181:9">if <condition pos:start="171:12" pos:end="171:49">(<expr pos:start="171:13" pos:end="171:48"><name pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:27">bottom_field</name></name> <operator pos:start="171:29" pos:end="171:30">&amp;&amp;</operator> <name pos:start="171:32" pos:end="171:48">second_field_offs</name></expr>)</condition>

	<block pos:start="173:9" pos:end="181:9">{<block_content pos:start="175:13" pos:end="179:29">

	    <expr_stmt pos:start="175:13" pos:end="175:46"><expr pos:start="175:13" pos:end="175:45"><name pos:start="175:13" pos:end="175:19">buf_ptr</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <name pos:start="175:23" pos:end="175:25">buf</name> <operator pos:start="175:27" pos:end="175:27">+</operator> <name pos:start="175:29" pos:end="175:45">second_field_offs</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="177:13" pos:end="177:34"><expr pos:start="177:13" pos:end="177:33"><name pos:start="177:13" pos:end="177:29">second_field_offs</name> <operator pos:start="177:31" pos:end="177:31">=</operator> <literal type="number" pos:start="177:33" pos:end="177:33">0</literal></expr>;</expr_stmt>

	    <goto pos:start="179:13" pos:end="179:29">goto <name pos:start="179:18" pos:end="179:28">read_header</name>;</goto>

    	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="187:5" pos:end="187:66">//XXX FIXME factorize, this looks very similar to the EOI code</comment>



    <expr_stmt pos:start="191:5" pos:end="191:25"><expr pos:start="191:5" pos:end="191:24"><operator pos:start="191:5" pos:end="191:5">*</operator><name pos:start="191:6" pos:end="191:12">picture</name><operator pos:start="191:13" pos:end="191:13">=</operator> <name pos:start="191:15" pos:end="191:24"><name pos:start="191:15" pos:end="191:15">s</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:24">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:33"><expr pos:start="193:5" pos:end="193:32"><operator pos:start="193:5" pos:end="193:5">*</operator><name pos:start="193:6" pos:end="193:14">data_size</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <sizeof pos:start="193:18" pos:end="193:32">sizeof<argument_list pos:start="193:24" pos:end="193:32">(<argument pos:start="193:25" pos:end="193:31"><expr pos:start="193:25" pos:end="193:31"><name pos:start="193:25" pos:end="193:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    

    <if_stmt pos:start="197:5" pos:end="213:5"><if pos:start="197:5" pos:end="213:5">if<condition pos:start="197:7" pos:end="197:20">(<expr pos:start="197:8" pos:end="197:19"><operator pos:start="197:8" pos:end="197:8">!</operator><name pos:start="197:9" pos:end="197:19"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:19">lossless</name></name></expr>)</condition><block pos:start="197:21" pos:end="213:5">{<block_content pos:start="199:9" pos:end="211:40">

        <expr_stmt pos:start="199:9" pos:end="199:81"><expr pos:start="199:9" pos:end="199:80"><name pos:start="199:9" pos:end="199:24"><name pos:start="199:9" pos:end="199:15">picture</name><operator pos:start="199:16" pos:end="199:17">-&gt;</operator><name pos:start="199:18" pos:end="199:24">quality</name></name><operator pos:start="199:25" pos:end="199:25">=</operator> <call pos:start="199:27" pos:end="199:80"><name pos:start="199:27" pos:end="199:31">FFMAX</name><argument_list pos:start="199:32" pos:end="199:80">(<argument pos:start="199:33" pos:end="199:65"><expr pos:start="199:33" pos:end="199:65"><call pos:start="199:33" pos:end="199:65"><name pos:start="199:33" pos:end="199:37">FFMAX</name><argument_list pos:start="199:38" pos:end="199:65">(<argument pos:start="199:39" pos:end="199:50"><expr pos:start="199:39" pos:end="199:50"><name pos:start="199:39" pos:end="199:50"><name pos:start="199:39" pos:end="199:39">s</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:47">qscale</name><index pos:start="199:48" pos:end="199:50">[<expr pos:start="199:49" pos:end="199:49"><literal type="number" pos:start="199:49" pos:end="199:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:53" pos:end="199:64"><expr pos:start="199:53" pos:end="199:64"><name pos:start="199:53" pos:end="199:64"><name pos:start="199:53" pos:end="199:53">s</name><operator pos:start="199:54" pos:end="199:55">-&gt;</operator><name pos:start="199:56" pos:end="199:61">qscale</name><index pos:start="199:62" pos:end="199:64">[<expr pos:start="199:63" pos:end="199:63"><literal type="number" pos:start="199:63" pos:end="199:63">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:68" pos:end="199:79"><expr pos:start="199:68" pos:end="199:79"><name pos:start="199:68" pos:end="199:79"><name pos:start="199:68" pos:end="199:68">s</name><operator pos:start="199:69" pos:end="199:70">-&gt;</operator><name pos:start="199:71" pos:end="199:76">qscale</name><index pos:start="199:77" pos:end="199:79">[<expr pos:start="199:78" pos:end="199:78"><literal type="number" pos:start="199:78" pos:end="199:78">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        <expr_stmt pos:start="201:9" pos:end="201:28"><expr pos:start="201:9" pos:end="201:27"><name pos:start="201:9" pos:end="201:24"><name pos:start="201:9" pos:end="201:15">picture</name><operator pos:start="201:16" pos:end="201:17">-&gt;</operator><name pos:start="201:18" pos:end="201:24">qstride</name></name><operator pos:start="201:25" pos:end="201:25">=</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:47"><expr pos:start="203:9" pos:end="203:46"><name pos:start="203:9" pos:end="203:29"><name pos:start="203:9" pos:end="203:15">picture</name><operator pos:start="203:16" pos:end="203:17">-&gt;</operator><name pos:start="203:18" pos:end="203:29">qscale_table</name></name><operator pos:start="203:30" pos:end="203:30">=</operator> <name pos:start="203:32" pos:end="203:46"><name pos:start="203:32" pos:end="203:32">s</name><operator pos:start="203:33" pos:end="203:34">-&gt;</operator><name pos:start="203:35" pos:end="203:46">qscale_table</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:74"><expr pos:start="205:9" pos:end="205:73"><call pos:start="205:9" pos:end="205:73"><name pos:start="205:9" pos:end="205:14">memset</name><argument_list pos:start="205:15" pos:end="205:73">(<argument pos:start="205:16" pos:end="205:36"><expr pos:start="205:16" pos:end="205:36"><name pos:start="205:16" pos:end="205:36"><name pos:start="205:16" pos:end="205:22">picture</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:36">qscale_table</name></name></expr></argument>, <argument pos:start="205:39" pos:end="205:54"><expr pos:start="205:39" pos:end="205:54"><name pos:start="205:39" pos:end="205:54"><name pos:start="205:39" pos:end="205:45">picture</name><operator pos:start="205:46" pos:end="205:47">-&gt;</operator><name pos:start="205:48" pos:end="205:54">quality</name></name></expr></argument>, <argument pos:start="205:57" pos:end="205:72"><expr pos:start="205:57" pos:end="205:72"><operator pos:start="205:57" pos:end="205:57">(</operator><name pos:start="205:58" pos:end="205:65"><name pos:start="205:58" pos:end="205:58">s</name><operator pos:start="205:59" pos:end="205:60">-&gt;</operator><name pos:start="205:61" pos:end="205:65">width</name></name><operator pos:start="205:66" pos:end="205:66">+</operator><literal type="number" pos:start="205:67" pos:end="205:68">15</literal><operator pos:start="205:69" pos:end="205:69">)</operator><operator pos:start="205:70" pos:end="205:70">/</operator><literal type="number" pos:start="205:71" pos:end="205:72">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="209:70"><if pos:start="207:9" pos:end="209:70">if<condition pos:start="207:11" pos:end="207:38">(<expr pos:start="207:12" pos:end="207:37"><name pos:start="207:12" pos:end="207:23"><name pos:start="207:12" pos:end="207:16">avctx</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:23">debug</name></name> <operator pos:start="207:25" pos:end="207:25">&amp;</operator> <name pos:start="207:27" pos:end="207:37">FF_DEBUG_QP</name></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="209:70"><block_content pos:start="209:13" pos:end="209:70">

            <expr_stmt pos:start="209:13" pos:end="209:70"><expr pos:start="209:13" pos:end="209:69"><call pos:start="209:13" pos:end="209:69"><name pos:start="209:13" pos:end="209:18">av_log</name><argument_list pos:start="209:19" pos:end="209:69">(<argument pos:start="209:20" pos:end="209:24"><expr pos:start="209:20" pos:end="209:24"><name pos:start="209:20" pos:end="209:24">avctx</name></expr></argument>, <argument pos:start="209:27" pos:end="209:38"><expr pos:start="209:27" pos:end="209:38"><name pos:start="209:27" pos:end="209:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="209:41" pos:end="209:50"><expr pos:start="209:41" pos:end="209:50"><literal type="string" pos:start="209:41" pos:end="209:50">"QP: %d\n"</literal></expr></argument>, <argument pos:start="209:53" pos:end="209:68"><expr pos:start="209:53" pos:end="209:68"><name pos:start="209:53" pos:end="209:68"><name pos:start="209:53" pos:end="209:59">picture</name><operator pos:start="209:60" pos:end="209:61">-&gt;</operator><name pos:start="209:62" pos:end="209:68">quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:40"><expr pos:start="211:9" pos:end="211:39"><name pos:start="211:9" pos:end="211:24"><name pos:start="211:9" pos:end="211:15">picture</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:24">quality</name></name><operator pos:start="211:25" pos:end="211:26">*=</operator> <name pos:start="211:28" pos:end="211:39">FF_QP2LAMBDA</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="217:5" pos:end="217:25">return <expr pos:start="217:12" pos:end="217:24"><name pos:start="217:12" pos:end="217:18">buf_ptr</name> <operator pos:start="217:20" pos:end="217:20">-</operator> <name pos:start="217:22" pos:end="217:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
