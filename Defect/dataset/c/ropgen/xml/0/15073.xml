<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15073.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">fdctrl_t</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:21">fdctrl_init</name> <parameter_list pos:start="1:23" pos:end="5:46">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:31">qemu_irq</name></type> <name pos:start="1:33" pos:end="1:35">irq</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:50"><decl pos:start="1:38" pos:end="1:50"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:50">dma_chann</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:66">mem_mapped</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:49"><decl pos:start="3:24" pos:end="3:49"><type pos:start="3:24" pos:end="3:49"><name pos:start="3:24" pos:end="3:41">target_phys_addr_t</name></type> <name pos:start="3:43" pos:end="3:49">io_base</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:45"><decl pos:start="5:24" pos:end="5:45"><type pos:start="5:24" pos:end="5:45"><name pos:start="5:24" pos:end="5:39">BlockDriverState</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier><modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:45">fds</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="117:1">{<block_content pos:start="9:5" pos:end="115:18">

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">fdctrl_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:20">fdctrl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">io_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><call pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:18">FLOPPY_DPRINTF</name><argument_list pos:start="17:19" pos:end="17:39">(<argument pos:start="17:20" pos:end="17:38"><expr pos:start="17:20" pos:end="17:38"><literal type="string" pos:start="17:20" pos:end="17:38">"init controller\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:10">fdctrl</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:43"><name pos:start="19:14" pos:end="19:25">qemu_mallocz</name><argument_list pos:start="19:26" pos:end="19:43">(<argument pos:start="19:27" pos:end="19:42"><expr pos:start="19:27" pos:end="19:42"><sizeof pos:start="19:27" pos:end="19:42">sizeof<argument_list pos:start="19:33" pos:end="19:42">(<argument pos:start="19:34" pos:end="19:41"><expr pos:start="19:34" pos:end="19:41"><name pos:start="19:34" pos:end="19:41">fdctrl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:20"><if pos:start="21:5" pos:end="23:20">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:15">fdctrl</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:20"><block_content pos:start="23:9" pos:end="23:20">

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:53"><expr pos:start="25:5" pos:end="25:52"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:10">fdctrl</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:16">fifo</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:52"><name pos:start="25:20" pos:end="25:32">qemu_memalign</name><argument_list pos:start="25:33" pos:end="25:52">(<argument pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><literal type="number" pos:start="25:34" pos:end="25:36">512</literal></expr></argument>, <argument pos:start="25:39" pos:end="25:51"><expr pos:start="25:39" pos:end="25:51"><name pos:start="25:39" pos:end="25:51">FD_SECTOR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:29">(<expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:14">fdctrl</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">fifo</name></name> <operator pos:start="27:22" pos:end="27:23">==</operator> <name pos:start="27:25" pos:end="27:28">NULL</name></expr>)</condition> <block pos:start="27:31" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><call pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:17">qemu_free</name><argument_list pos:start="29:18" pos:end="29:25">(<argument pos:start="29:19" pos:end="29:24"><expr pos:start="29:19" pos:end="29:24"><name pos:start="29:19" pos:end="29:24">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="37:71"><expr pos:start="35:5" pos:end="37:70"><name pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:10">fdctrl</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:24">result_timer</name></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <call pos:start="35:28" pos:end="37:70"><name pos:start="35:28" pos:end="35:41">qemu_new_timer</name><argument_list pos:start="35:42" pos:end="37:70">(<argument pos:start="35:43" pos:end="35:50"><expr pos:start="35:43" pos:end="35:50"><name pos:start="35:43" pos:end="35:50">vm_clock</name></expr></argument>,

                                          <argument pos:start="37:43" pos:end="37:61"><expr pos:start="37:43" pos:end="37:61"><name pos:start="37:43" pos:end="37:61">fdctrl_result_timer</name></expr></argument>, <argument pos:start="37:64" pos:end="37:69"><expr pos:start="37:64" pos:end="37:69"><name pos:start="37:64" pos:end="37:69">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:27"><expr pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:10">fdctrl</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:19">version</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <literal type="number" pos:start="41:23" pos:end="41:26">0x90</literal></expr>;</expr_stmt> <comment type="block" pos:start="41:29" pos:end="41:56">/* Intel 82078 controller */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:10">fdctrl</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:15">irq</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:21">irq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:10">fdctrl</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:21">dma_chann</name></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:33">dma_chann</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:10">fdctrl</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:19">io_base</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:29">io_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:10">fdctrl</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:18">config</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:25">0x60</literal></expr>;</expr_stmt> <comment type="block" pos:start="49:28" pos:end="49:70">/* Implicit seek, polling &amp; FIFO enabled */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:10">fdctrl</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:17">sun4m</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:32">(<expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:14">fdctrl</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:25">dma_chann</name></name> <operator pos:start="53:27" pos:end="53:28">!=</operator> <operator pos:start="53:30" pos:end="53:30">-</operator><literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr>)</condition> <block pos:start="53:34" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:74">

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:14">fdctrl</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:22">dma_en</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <literal type="number" pos:start="55:26" pos:end="55:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:74"><expr pos:start="57:9" pos:end="57:73"><call pos:start="57:9" pos:end="57:73"><name pos:start="57:9" pos:end="57:28">DMA_register_channel</name><argument_list pos:start="57:29" pos:end="57:73">(<argument pos:start="57:30" pos:end="57:38"><expr pos:start="57:30" pos:end="57:38"><name pos:start="57:30" pos:end="57:38">dma_chann</name></expr></argument>, <argument pos:start="57:41" pos:end="57:64"><expr pos:start="57:41" pos:end="57:64"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:64">fdctrl_transfer_handler</name></expr></argument>, <argument pos:start="57:67" pos:end="57:72"><expr pos:start="57:67" pos:end="57:72"><name pos:start="57:67" pos:end="57:72">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:27">

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:14">fdctrl</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:22">dma_en</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <for pos:start="65:5" pos:end="69:5">for <control pos:start="65:9" pos:end="65:27">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:21"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <literal type="number" pos:start="65:21" pos:end="65:21">2</literal></expr>;</condition> <incr pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:24">i</name><operator pos:start="65:25" pos:end="65:26">++</operator></expr></incr>)</control> <block pos:start="65:29" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:44">

        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><call pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:15">fd_init</name><argument_list pos:start="67:16" pos:end="67:43">(<argument pos:start="67:17" pos:end="67:34"><expr pos:start="67:17" pos:end="67:34"><operator pos:start="67:17" pos:end="67:17">&amp;</operator><name pos:start="67:18" pos:end="67:34"><name pos:start="67:18" pos:end="67:23">fdctrl</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:31">drives</name><index pos:start="67:32" pos:end="67:34">[<expr pos:start="67:33" pos:end="67:33"><name pos:start="67:33" pos:end="67:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="67:37" pos:end="67:42"><expr pos:start="67:37" pos:end="67:42"><name pos:start="67:37" pos:end="67:42"><name pos:start="67:37" pos:end="67:39">fds</name><index pos:start="67:40" pos:end="67:42">[<expr pos:start="67:41" pos:end="67:41"><name pos:start="67:41" pos:end="67:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><call pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:16">fdctrl_reset</name><argument_list pos:start="71:17" pos:end="71:27">(<argument pos:start="71:18" pos:end="71:23"><expr pos:start="71:18" pos:end="71:23"><name pos:start="71:18" pos:end="71:23">fdctrl</name></expr></argument>, <argument pos:start="71:26" pos:end="71:26"><expr pos:start="71:26" pos:end="71:26"><literal type="number" pos:start="71:26" pos:end="71:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:35"><expr pos:start="73:5" pos:end="73:34"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:10">fdctrl</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:17">state</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:34">FD_CTRL_ACTIVE</name></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="101:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:19">(<expr pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:18">mem_mapped</name></expr>)</condition> <block pos:start="75:21" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:60">

        <expr_stmt pos:start="77:9" pos:end="79:48"><expr pos:start="77:9" pos:end="79:47"><name pos:start="77:9" pos:end="77:14">io_mem</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <call pos:start="77:18" pos:end="79:47"><name pos:start="77:18" pos:end="77:39">cpu_register_io_memory</name><argument_list pos:start="77:40" pos:end="79:47">(<argument pos:start="77:41" pos:end="77:41"><expr pos:start="77:41" pos:end="77:41"><literal type="number" pos:start="77:41" pos:end="77:41">0</literal></expr></argument>, <argument pos:start="77:44" pos:end="77:58"><expr pos:start="77:44" pos:end="77:58"><name pos:start="77:44" pos:end="77:58">fdctrl_mem_read</name></expr></argument>, <argument pos:start="77:61" pos:end="77:76"><expr pos:start="77:61" pos:end="77:76"><name pos:start="77:61" pos:end="77:76">fdctrl_mem_write</name></expr></argument>,

                                        <argument pos:start="79:41" pos:end="79:46"><expr pos:start="79:41" pos:end="79:46"><name pos:start="79:41" pos:end="79:46">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:36">cpu_register_physical_memory</name><argument_list pos:start="81:37" pos:end="81:59">(<argument pos:start="81:38" pos:end="81:44"><expr pos:start="81:38" pos:end="81:44"><name pos:start="81:38" pos:end="81:44">io_base</name></expr></argument>, <argument pos:start="81:47" pos:end="81:50"><expr pos:start="81:47" pos:end="81:50"><literal type="number" pos:start="81:47" pos:end="81:50">0x08</literal></expr></argument>, <argument pos:start="81:53" pos:end="81:58"><expr pos:start="81:53" pos:end="81:58"><name pos:start="81:53" pos:end="81:58">io_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="101:5">else <block pos:start="83:12" pos:end="101:5">{<block_content pos:start="85:9" pos:end="99:38">

        <expr_stmt pos:start="85:9" pos:end="87:37"><expr pos:start="85:9" pos:end="87:36"><call pos:start="85:9" pos:end="87:36"><name pos:start="85:9" pos:end="85:28">register_ioport_read</name><argument_list pos:start="85:29" pos:end="87:36">(<argument pos:start="85:30" pos:end="85:53"><expr pos:start="85:30" pos:end="85:53"><operator pos:start="85:30" pos:end="85:30">(</operator><name pos:start="85:31" pos:end="85:38">uint32_t</name><operator pos:start="85:39" pos:end="85:39">)</operator><name pos:start="85:40" pos:end="85:46">io_base</name> <operator pos:start="85:48" pos:end="85:48">+</operator> <literal type="number" pos:start="85:50" pos:end="85:53">0x01</literal></expr></argument>, <argument pos:start="85:56" pos:end="85:56"><expr pos:start="85:56" pos:end="85:56"><literal type="number" pos:start="85:56" pos:end="85:56">5</literal></expr></argument>, <argument pos:start="85:59" pos:end="85:59"><expr pos:start="85:59" pos:end="85:59"><literal type="number" pos:start="85:59" pos:end="85:59">1</literal></expr></argument>, <argument pos:start="85:62" pos:end="85:73"><expr pos:start="85:62" pos:end="85:73"><operator pos:start="85:62" pos:end="85:62">&amp;</operator><name pos:start="85:63" pos:end="85:73">fdctrl_read</name></expr></argument>,

                             <argument pos:start="87:30" pos:end="87:35"><expr pos:start="87:30" pos:end="87:35"><name pos:start="87:30" pos:end="87:35">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="91:37"><expr pos:start="89:9" pos:end="91:36"><call pos:start="89:9" pos:end="91:36"><name pos:start="89:9" pos:end="89:28">register_ioport_read</name><argument_list pos:start="89:29" pos:end="91:36">(<argument pos:start="89:30" pos:end="89:53"><expr pos:start="89:30" pos:end="89:53"><operator pos:start="89:30" pos:end="89:30">(</operator><name pos:start="89:31" pos:end="89:38">uint32_t</name><operator pos:start="89:39" pos:end="89:39">)</operator><name pos:start="89:40" pos:end="89:46">io_base</name> <operator pos:start="89:48" pos:end="89:48">+</operator> <literal type="number" pos:start="89:50" pos:end="89:53">0x07</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:56"><expr pos:start="89:56" pos:end="89:56"><literal type="number" pos:start="89:56" pos:end="89:56">1</literal></expr></argument>, <argument pos:start="89:59" pos:end="89:59"><expr pos:start="89:59" pos:end="89:59"><literal type="number" pos:start="89:59" pos:end="89:59">1</literal></expr></argument>, <argument pos:start="89:62" pos:end="89:73"><expr pos:start="89:62" pos:end="89:73"><operator pos:start="89:62" pos:end="89:62">&amp;</operator><name pos:start="89:63" pos:end="89:73">fdctrl_read</name></expr></argument>,

                             <argument pos:start="91:30" pos:end="91:35"><expr pos:start="91:30" pos:end="91:35"><name pos:start="91:30" pos:end="91:35">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="95:38"><expr pos:start="93:9" pos:end="95:37"><call pos:start="93:9" pos:end="95:37"><name pos:start="93:9" pos:end="93:29">register_ioport_write</name><argument_list pos:start="93:30" pos:end="95:37">(<argument pos:start="93:31" pos:end="93:54"><expr pos:start="93:31" pos:end="93:54"><operator pos:start="93:31" pos:end="93:31">(</operator><name pos:start="93:32" pos:end="93:39">uint32_t</name><operator pos:start="93:40" pos:end="93:40">)</operator><name pos:start="93:41" pos:end="93:47">io_base</name> <operator pos:start="93:49" pos:end="93:49">+</operator> <literal type="number" pos:start="93:51" pos:end="93:54">0x01</literal></expr></argument>, <argument pos:start="93:57" pos:end="93:57"><expr pos:start="93:57" pos:end="93:57"><literal type="number" pos:start="93:57" pos:end="93:57">5</literal></expr></argument>, <argument pos:start="93:60" pos:end="93:60"><expr pos:start="93:60" pos:end="93:60"><literal type="number" pos:start="93:60" pos:end="93:60">1</literal></expr></argument>, <argument pos:start="93:63" pos:end="93:75"><expr pos:start="93:63" pos:end="93:75"><operator pos:start="93:63" pos:end="93:63">&amp;</operator><name pos:start="93:64" pos:end="93:75">fdctrl_write</name></expr></argument>,

                              <argument pos:start="95:31" pos:end="95:36"><expr pos:start="95:31" pos:end="95:36"><name pos:start="95:31" pos:end="95:36">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="99:38"><expr pos:start="97:9" pos:end="99:37"><call pos:start="97:9" pos:end="99:37"><name pos:start="97:9" pos:end="97:29">register_ioport_write</name><argument_list pos:start="97:30" pos:end="99:37">(<argument pos:start="97:31" pos:end="97:54"><expr pos:start="97:31" pos:end="97:54"><operator pos:start="97:31" pos:end="97:31">(</operator><name pos:start="97:32" pos:end="97:39">uint32_t</name><operator pos:start="97:40" pos:end="97:40">)</operator><name pos:start="97:41" pos:end="97:47">io_base</name> <operator pos:start="97:49" pos:end="97:49">+</operator> <literal type="number" pos:start="97:51" pos:end="97:54">0x07</literal></expr></argument>, <argument pos:start="97:57" pos:end="97:57"><expr pos:start="97:57" pos:end="97:57"><literal type="number" pos:start="97:57" pos:end="97:57">1</literal></expr></argument>, <argument pos:start="97:60" pos:end="97:60"><expr pos:start="97:60" pos:end="97:60"><literal type="number" pos:start="97:60" pos:end="97:60">1</literal></expr></argument>, <argument pos:start="97:63" pos:end="97:75"><expr pos:start="97:63" pos:end="97:75"><operator pos:start="97:63" pos:end="97:63">&amp;</operator><name pos:start="97:64" pos:end="97:75">fdctrl_write</name></expr></argument>,

                              <argument pos:start="99:31" pos:end="99:36"><expr pos:start="99:31" pos:end="99:36"><name pos:start="99:31" pos:end="99:36">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:67"><expr pos:start="103:5" pos:end="103:66"><call pos:start="103:5" pos:end="103:66"><name pos:start="103:5" pos:end="103:19">register_savevm</name><argument_list pos:start="103:20" pos:end="103:66">(<argument pos:start="103:21" pos:end="103:25"><expr pos:start="103:21" pos:end="103:25"><literal type="string" pos:start="103:21" pos:end="103:25">"fdc"</literal></expr></argument>, <argument pos:start="103:28" pos:end="103:34"><expr pos:start="103:28" pos:end="103:34"><name pos:start="103:28" pos:end="103:34">io_base</name></expr></argument>, <argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><literal type="number" pos:start="103:37" pos:end="103:37">1</literal></expr></argument>, <argument pos:start="103:40" pos:end="103:47"><expr pos:start="103:40" pos:end="103:47"><name pos:start="103:40" pos:end="103:47">fdc_save</name></expr></argument>, <argument pos:start="103:50" pos:end="103:57"><expr pos:start="103:50" pos:end="103:57"><name pos:start="103:50" pos:end="103:57">fdc_load</name></expr></argument>, <argument pos:start="103:60" pos:end="103:65"><expr pos:start="103:60" pos:end="103:65"><name pos:start="103:60" pos:end="103:65">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><call pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:23">qemu_register_reset</name><argument_list pos:start="105:24" pos:end="105:54">(<argument pos:start="105:25" pos:end="105:45"><expr pos:start="105:25" pos:end="105:45"><name pos:start="105:25" pos:end="105:45">fdctrl_external_reset</name></expr></argument>, <argument pos:start="105:48" pos:end="105:53"><expr pos:start="105:48" pos:end="105:53"><name pos:start="105:48" pos:end="105:53">fdctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="107:5" pos:end="111:5">for <control pos:start="107:9" pos:end="107:27">(<init pos:start="107:10" pos:end="107:15"><expr pos:start="107:10" pos:end="107:14"><name pos:start="107:10" pos:end="107:10">i</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <literal type="number" pos:start="107:14" pos:end="107:14">0</literal></expr>;</init> <condition pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:17">i</name> <operator pos:start="107:19" pos:end="107:19">&lt;</operator> <literal type="number" pos:start="107:21" pos:end="107:21">2</literal></expr>;</condition> <incr pos:start="107:24" pos:end="107:26"><expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:24">i</name><operator pos:start="107:25" pos:end="107:26">++</operator></expr></incr>)</control> <block pos:start="107:29" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:42">

        <expr_stmt pos:start="109:9" pos:end="109:42"><expr pos:start="109:9" pos:end="109:41"><call pos:start="109:9" pos:end="109:41"><name pos:start="109:9" pos:end="109:21">fd_revalidate</name><argument_list pos:start="109:22" pos:end="109:41">(<argument pos:start="109:23" pos:end="109:40"><expr pos:start="109:23" pos:end="109:40"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:40"><name pos:start="109:24" pos:end="109:29">fdctrl</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:37">drives</name><index pos:start="109:38" pos:end="109:40">[<expr pos:start="109:39" pos:end="109:39"><name pos:start="109:39" pos:end="109:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="115:5" pos:end="115:18">return <expr pos:start="115:12" pos:end="115:17"><name pos:start="115:12" pos:end="115:17">fdctrl</name></expr>;</return>

</block_content>}</block></function>
</unit>
