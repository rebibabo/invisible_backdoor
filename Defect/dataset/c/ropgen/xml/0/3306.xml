<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3306.c" pos:tabs="8"><function pos:start="1:1" pos:end="3281:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">disas_neon_data_insn</name><parameter_list pos:start="1:32" pos:end="1:79">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:40">CPUState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type> <name pos:start="1:44" pos:end="1:46">env</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:60">DisasContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:73">uint32_t</name></type> <name pos:start="1:75" pos:end="1:78">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="3281:1">{<block_content pos:start="5:5" pos:end="3279:13">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rd</name></decl>, <decl pos:start="9:13" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:14">rn</name></decl>, <decl pos:start="9:17" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:18">rm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">pass</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">pairwise</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">u</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:16">imm</name></decl>, <decl pos:start="23:19" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:19" pos:end="23:22">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:37"><decl pos:start="25:5" pos:end="25:12"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">TCGv</name></type> <name pos:start="25:10" pos:end="25:12">tmp</name></decl>, <decl pos:start="25:15" pos:end="25:18"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:15" pos:end="25:18">tmp2</name></decl>, <decl pos:start="25:21" pos:end="25:24"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:21" pos:end="25:24">tmp3</name></decl>, <decl pos:start="25:27" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:27" pos:end="25:30">tmp4</name></decl>, <decl pos:start="25:33" pos:end="25:36"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:33" pos:end="25:36">tmp5</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">TCGv_i64</name></type> <name pos:start="27:14" pos:end="27:18">tmp64</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="33:15"><if pos:start="31:5" pos:end="33:15">if <condition pos:start="31:8" pos:end="31:24">(<expr pos:start="31:9" pos:end="31:23"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:23"><name pos:start="31:10" pos:end="31:10">s</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:23">vfp_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="33:7" pos:end="33:15"><block_content pos:start="33:7" pos:end="33:15">

      <return pos:start="33:7" pos:end="33:15">return <expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:5">q</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:13">insn</name> <operator pos:start="35:15" pos:end="35:15">&amp;</operator> <operator pos:start="35:17" pos:end="35:17">(</operator><literal type="number" pos:start="35:18" pos:end="35:18">1</literal> <operator pos:start="35:20" pos:end="35:21">&lt;&lt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">6</literal><operator pos:start="35:24" pos:end="35:24">)</operator><operator pos:start="35:25" pos:end="35:25">)</operator> <operator pos:start="35:27" pos:end="35:28">!=</operator> <literal type="number" pos:start="35:30" pos:end="35:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:5">u</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:13">insn</name> <operator pos:start="37:15" pos:end="37:16">&gt;&gt;</operator> <literal type="number" pos:start="37:18" pos:end="37:19">24</literal><operator pos:start="37:20" pos:end="37:20">)</operator> <operator pos:start="37:22" pos:end="37:22">&amp;</operator> <literal type="number" pos:start="37:24" pos:end="37:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><call pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:14">VFP_DREG_D</name><argument_list pos:start="39:15" pos:end="39:24">(<argument pos:start="39:16" pos:end="39:17"><expr pos:start="39:16" pos:end="39:17"><name pos:start="39:16" pos:end="39:17">rd</name></expr></argument>, <argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><call pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:14">VFP_DREG_N</name><argument_list pos:start="41:15" pos:end="41:24">(<argument pos:start="41:16" pos:end="41:17"><expr pos:start="41:16" pos:end="41:17"><name pos:start="41:16" pos:end="41:17">rn</name></expr></argument>, <argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:14">VFP_DREG_M</name><argument_list pos:start="43:15" pos:end="43:24">(<argument pos:start="43:16" pos:end="43:17"><expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">rm</name></expr></argument>, <argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:8">size</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:16">insn</name> <operator pos:start="45:18" pos:end="45:19">&gt;&gt;</operator> <literal type="number" pos:start="45:21" pos:end="45:22">20</literal><operator pos:start="45:23" pos:end="45:23">)</operator> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="3277:5"><if pos:start="47:5" pos:end="845:5">if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><operator pos:start="47:9" pos:end="47:9">(</operator><name pos:start="47:10" pos:end="47:13">insn</name> <operator pos:start="47:15" pos:end="47:15">&amp;</operator> <operator pos:start="47:17" pos:end="47:17">(</operator><literal type="number" pos:start="47:18" pos:end="47:18">1</literal> <operator pos:start="47:20" pos:end="47:21">&lt;&lt;</operator> <literal type="number" pos:start="47:23" pos:end="47:24">23</literal><operator pos:start="47:25" pos:end="47:25">)</operator><operator pos:start="47:26" pos:end="47:26">)</operator> <operator pos:start="47:28" pos:end="47:29">==</operator> <literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr>)</condition> <block pos:start="47:34" pos:end="845:5">{<block_content pos:start="51:9" pos:end="841:9">

        <comment type="block" pos:start="49:9" pos:end="49:42">/* Three register same length.  */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:54"><expr pos:start="51:9" pos:end="51:53"><name pos:start="51:9" pos:end="51:10">op</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <operator pos:start="51:14" pos:end="51:14">(</operator><operator pos:start="51:15" pos:end="51:15">(</operator><name pos:start="51:16" pos:end="51:19">insn</name> <operator pos:start="51:21" pos:end="51:22">&gt;&gt;</operator> <literal type="number" pos:start="51:24" pos:end="51:24">7</literal><operator pos:start="51:25" pos:end="51:25">)</operator> <operator pos:start="51:27" pos:end="51:27">&amp;</operator> <literal type="number" pos:start="51:29" pos:end="51:32">0x1e</literal><operator pos:start="51:33" pos:end="51:33">)</operator> <operator pos:start="51:35" pos:end="51:35">|</operator> <operator pos:start="51:37" pos:end="51:37">(</operator><operator pos:start="51:38" pos:end="51:38">(</operator><name pos:start="51:39" pos:end="51:42">insn</name> <operator pos:start="51:44" pos:end="51:45">&gt;&gt;</operator> <literal type="number" pos:start="51:47" pos:end="51:47">4</literal><operator pos:start="51:48" pos:end="51:48">)</operator> <operator pos:start="51:50" pos:end="51:50">&amp;</operator> <literal type="number" pos:start="51:52" pos:end="51:52">1</literal><operator pos:start="51:53" pos:end="51:53">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="53:9" pos:end="53:63">/* Catch invalid op and bad size combinations: UNDEF */</comment>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:51">(<expr pos:start="55:13" pos:end="55:50"><operator pos:start="55:13" pos:end="55:13">(</operator><name pos:start="55:14" pos:end="55:30"><name pos:start="55:14" pos:end="55:26">neon_3r_sizes</name><index pos:start="55:27" pos:end="55:30">[<expr pos:start="55:28" pos:end="55:29"><name pos:start="55:28" pos:end="55:29">op</name></expr>]</index></name> <operator pos:start="55:32" pos:end="55:32">&amp;</operator> <operator pos:start="55:34" pos:end="55:34">(</operator><literal type="number" pos:start="55:35" pos:end="55:35">1</literal> <operator pos:start="55:37" pos:end="55:38">&lt;&lt;</operator> <name pos:start="55:40" pos:end="55:43">size</name><operator pos:start="55:44" pos:end="55:44">)</operator><operator pos:start="55:45" pos:end="55:45">)</operator> <operator pos:start="55:47" pos:end="55:48">==</operator> <literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr>)</condition> <block pos:start="55:53" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:21">

            <return pos:start="57:13" pos:end="57:21">return <expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="61:9" pos:end="65:11">/* All insns of this form UNDEF for either this condition or the

         * superset of cases "Q==1"; we catch the latter later.

         */</comment>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:38">(<expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:13">q</name> <operator pos:start="67:15" pos:end="67:16">&amp;&amp;</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><operator pos:start="67:19" pos:end="67:19">(</operator><name pos:start="67:20" pos:end="67:21">rd</name> <operator pos:start="67:23" pos:end="67:23">|</operator> <name pos:start="67:25" pos:end="67:26">rn</name> <operator pos:start="67:28" pos:end="67:28">|</operator> <name pos:start="67:30" pos:end="67:31">rm</name><operator pos:start="67:32" pos:end="67:32">)</operator> <operator pos:start="67:34" pos:end="67:34">&amp;</operator> <literal type="number" pos:start="67:36" pos:end="67:36">1</literal><operator pos:start="67:37" pos:end="67:37">)</operator></expr>)</condition> <block pos:start="67:40" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:21">

            <return pos:start="69:13" pos:end="69:21">return <expr pos:start="69:20" pos:end="69:20"><literal type="number" pos:start="69:20" pos:end="69:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="195:9"><if pos:start="73:9" pos:end="195:9">if <condition pos:start="73:12" pos:end="73:45">(<expr pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:16">size</name> <operator pos:start="73:18" pos:end="73:19">==</operator> <literal type="number" pos:start="73:21" pos:end="73:21">3</literal> <operator pos:start="73:23" pos:end="73:24">&amp;&amp;</operator> <name pos:start="73:26" pos:end="73:27">op</name> <operator pos:start="73:29" pos:end="73:30">!=</operator> <name pos:start="73:32" pos:end="73:44">NEON_3R_LOGIC</name></expr>)</condition> <block pos:start="73:47" pos:end="195:9">{<block_content pos:start="77:13" pos:end="193:21">

            <comment type="block" pos:start="75:13" pos:end="75:46">/* 64-bit element instructions. */</comment>

            <for pos:start="77:13" pos:end="191:13">for <control pos:start="77:17" pos:end="77:54">(<init pos:start="77:18" pos:end="77:26"><expr pos:start="77:18" pos:end="77:25"><name pos:start="77:18" pos:end="77:21">pass</name> <operator pos:start="77:23" pos:end="77:23">=</operator> <literal type="number" pos:start="77:25" pos:end="77:25">0</literal></expr>;</init> <condition pos:start="77:28" pos:end="77:46"><expr pos:start="77:28" pos:end="77:45"><name pos:start="77:28" pos:end="77:31">pass</name> <operator pos:start="77:33" pos:end="77:33">&lt;</operator> <operator pos:start="77:35" pos:end="77:35">(</operator><ternary pos:start="77:36" pos:end="77:44"><condition pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:36"><name pos:start="77:36" pos:end="77:36">q</name></expr> ?</condition><then pos:start="77:40" pos:end="77:40"> <expr pos:start="77:40" pos:end="77:40"><literal type="number" pos:start="77:40" pos:end="77:40">2</literal></expr> </then><else pos:start="77:42" pos:end="77:44">: <expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">1</literal></expr></else></ternary><operator pos:start="77:45" pos:end="77:45">)</operator></expr>;</condition> <incr pos:start="77:48" pos:end="77:53"><expr pos:start="77:48" pos:end="77:53"><name pos:start="77:48" pos:end="77:51">pass</name><operator pos:start="77:52" pos:end="77:53">++</operator></expr></incr>)</control> <block pos:start="77:56" pos:end="191:13">{<block_content pos:start="79:17" pos:end="189:52">

                <expr_stmt pos:start="79:17" pos:end="79:51"><expr pos:start="79:17" pos:end="79:50"><call pos:start="79:17" pos:end="79:50"><name pos:start="79:17" pos:end="79:31">neon_load_reg64</name><argument_list pos:start="79:32" pos:end="79:50">(<argument pos:start="79:33" pos:end="79:38"><expr pos:start="79:33" pos:end="79:38"><name pos:start="79:33" pos:end="79:38">cpu_V0</name></expr></argument>, <argument pos:start="79:41" pos:end="79:49"><expr pos:start="79:41" pos:end="79:49"><name pos:start="79:41" pos:end="79:42">rn</name> <operator pos:start="79:44" pos:end="79:44">+</operator> <name pos:start="79:46" pos:end="79:49">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:51"><expr pos:start="81:17" pos:end="81:50"><call pos:start="81:17" pos:end="81:50"><name pos:start="81:17" pos:end="81:31">neon_load_reg64</name><argument_list pos:start="81:32" pos:end="81:50">(<argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><name pos:start="81:33" pos:end="81:38">cpu_V1</name></expr></argument>, <argument pos:start="81:41" pos:end="81:49"><expr pos:start="81:41" pos:end="81:49"><name pos:start="81:41" pos:end="81:42">rm</name> <operator pos:start="81:44" pos:end="81:44">+</operator> <name pos:start="81:46" pos:end="81:49">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="83:17" pos:end="187:17">switch <condition pos:start="83:24" pos:end="83:27">(<expr pos:start="83:25" pos:end="83:26"><name pos:start="83:25" pos:end="83:26">op</name></expr>)</condition> <block pos:start="83:29" pos:end="187:17">{<block_content pos:start="85:17" pos:end="185:28">

                <case pos:start="85:17" pos:end="85:35">case <expr pos:start="85:22" pos:end="85:34"><name pos:start="85:22" pos:end="85:34">NEON_3R_VQADD</name></expr>:</case>

                    <if_stmt pos:start="87:21" pos:end="95:21"><if pos:start="87:21" pos:end="91:21">if <condition pos:start="87:24" pos:end="87:26">(<expr pos:start="87:25" pos:end="87:25"><name pos:start="87:25" pos:end="87:25">u</name></expr>)</condition> <block pos:start="87:28" pos:end="91:21">{<block_content pos:start="89:25" pos:end="89:73">

                        <expr_stmt pos:start="89:25" pos:end="89:73"><expr pos:start="89:25" pos:end="89:72"><call pos:start="89:25" pos:end="89:72"><name pos:start="89:25" pos:end="89:48">gen_helper_neon_qadd_u64</name><argument_list pos:start="89:49" pos:end="89:72">(<argument pos:start="89:50" pos:end="89:55"><expr pos:start="89:50" pos:end="89:55"><name pos:start="89:50" pos:end="89:55">cpu_V0</name></expr></argument>, <argument pos:start="89:58" pos:end="89:63"><expr pos:start="89:58" pos:end="89:63"><name pos:start="89:58" pos:end="89:63">cpu_V0</name></expr></argument>, <argument pos:start="89:66" pos:end="89:71"><expr pos:start="89:66" pos:end="89:71"><name pos:start="89:66" pos:end="89:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="91:23" pos:end="95:21">else <block pos:start="91:28" pos:end="95:21">{<block_content pos:start="93:25" pos:end="93:73">

                        <expr_stmt pos:start="93:25" pos:end="93:73"><expr pos:start="93:25" pos:end="93:72"><call pos:start="93:25" pos:end="93:72"><name pos:start="93:25" pos:end="93:48">gen_helper_neon_qadd_s64</name><argument_list pos:start="93:49" pos:end="93:72">(<argument pos:start="93:50" pos:end="93:55"><expr pos:start="93:50" pos:end="93:55"><name pos:start="93:50" pos:end="93:55">cpu_V0</name></expr></argument>, <argument pos:start="93:58" pos:end="93:63"><expr pos:start="93:58" pos:end="93:63"><name pos:start="93:58" pos:end="93:63">cpu_V0</name></expr></argument>, <argument pos:start="93:66" pos:end="93:71"><expr pos:start="93:66" pos:end="93:71"><name pos:start="93:66" pos:end="93:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="97:21" pos:end="97:26">break;</break>

                <case pos:start="99:17" pos:end="99:35">case <expr pos:start="99:22" pos:end="99:34"><name pos:start="99:22" pos:end="99:34">NEON_3R_VQSUB</name></expr>:</case>

                    <if_stmt pos:start="101:21" pos:end="109:21"><if pos:start="101:21" pos:end="105:21">if <condition pos:start="101:24" pos:end="101:26">(<expr pos:start="101:25" pos:end="101:25"><name pos:start="101:25" pos:end="101:25">u</name></expr>)</condition> <block pos:start="101:28" pos:end="105:21">{<block_content pos:start="103:25" pos:end="103:73">

                        <expr_stmt pos:start="103:25" pos:end="103:73"><expr pos:start="103:25" pos:end="103:72"><call pos:start="103:25" pos:end="103:72"><name pos:start="103:25" pos:end="103:48">gen_helper_neon_qsub_u64</name><argument_list pos:start="103:49" pos:end="103:72">(<argument pos:start="103:50" pos:end="103:55"><expr pos:start="103:50" pos:end="103:55"><name pos:start="103:50" pos:end="103:55">cpu_V0</name></expr></argument>, <argument pos:start="103:58" pos:end="103:63"><expr pos:start="103:58" pos:end="103:63"><name pos:start="103:58" pos:end="103:63">cpu_V0</name></expr></argument>, <argument pos:start="103:66" pos:end="103:71"><expr pos:start="103:66" pos:end="103:71"><name pos:start="103:66" pos:end="103:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="105:23" pos:end="109:21">else <block pos:start="105:28" pos:end="109:21">{<block_content pos:start="107:25" pos:end="107:73">

                        <expr_stmt pos:start="107:25" pos:end="107:73"><expr pos:start="107:25" pos:end="107:72"><call pos:start="107:25" pos:end="107:72"><name pos:start="107:25" pos:end="107:48">gen_helper_neon_qsub_s64</name><argument_list pos:start="107:49" pos:end="107:72">(<argument pos:start="107:50" pos:end="107:55"><expr pos:start="107:50" pos:end="107:55"><name pos:start="107:50" pos:end="107:55">cpu_V0</name></expr></argument>, <argument pos:start="107:58" pos:end="107:63"><expr pos:start="107:58" pos:end="107:63"><name pos:start="107:58" pos:end="107:63">cpu_V0</name></expr></argument>, <argument pos:start="107:66" pos:end="107:71"><expr pos:start="107:66" pos:end="107:71"><name pos:start="107:66" pos:end="107:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="111:21" pos:end="111:26">break;</break>

                <case pos:start="113:17" pos:end="113:34">case <expr pos:start="113:22" pos:end="113:33"><name pos:start="113:22" pos:end="113:33">NEON_3R_VSHL</name></expr>:</case>

                    <if_stmt pos:start="115:21" pos:end="123:21"><if pos:start="115:21" pos:end="119:21">if <condition pos:start="115:24" pos:end="115:26">(<expr pos:start="115:25" pos:end="115:25"><name pos:start="115:25" pos:end="115:25">u</name></expr>)</condition> <block pos:start="115:28" pos:end="119:21">{<block_content pos:start="117:25" pos:end="117:72">

                        <expr_stmt pos:start="117:25" pos:end="117:72"><expr pos:start="117:25" pos:end="117:71"><call pos:start="117:25" pos:end="117:71"><name pos:start="117:25" pos:end="117:47">gen_helper_neon_shl_u64</name><argument_list pos:start="117:48" pos:end="117:71">(<argument pos:start="117:49" pos:end="117:54"><expr pos:start="117:49" pos:end="117:54"><name pos:start="117:49" pos:end="117:54">cpu_V0</name></expr></argument>, <argument pos:start="117:57" pos:end="117:62"><expr pos:start="117:57" pos:end="117:62"><name pos:start="117:57" pos:end="117:62">cpu_V1</name></expr></argument>, <argument pos:start="117:65" pos:end="117:70"><expr pos:start="117:65" pos:end="117:70"><name pos:start="117:65" pos:end="117:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="119:23" pos:end="123:21">else <block pos:start="119:28" pos:end="123:21">{<block_content pos:start="121:25" pos:end="121:72">

                        <expr_stmt pos:start="121:25" pos:end="121:72"><expr pos:start="121:25" pos:end="121:71"><call pos:start="121:25" pos:end="121:71"><name pos:start="121:25" pos:end="121:47">gen_helper_neon_shl_s64</name><argument_list pos:start="121:48" pos:end="121:71">(<argument pos:start="121:49" pos:end="121:54"><expr pos:start="121:49" pos:end="121:54"><name pos:start="121:49" pos:end="121:54">cpu_V0</name></expr></argument>, <argument pos:start="121:57" pos:end="121:62"><expr pos:start="121:57" pos:end="121:62"><name pos:start="121:57" pos:end="121:62">cpu_V1</name></expr></argument>, <argument pos:start="121:65" pos:end="121:70"><expr pos:start="121:65" pos:end="121:70"><name pos:start="121:65" pos:end="121:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="125:21" pos:end="125:26">break;</break>

                <case pos:start="127:17" pos:end="127:35">case <expr pos:start="127:22" pos:end="127:34"><name pos:start="127:22" pos:end="127:34">NEON_3R_VQSHL</name></expr>:</case>

                    <if_stmt pos:start="129:21" pos:end="137:21"><if pos:start="129:21" pos:end="133:21">if <condition pos:start="129:24" pos:end="129:26">(<expr pos:start="129:25" pos:end="129:25"><name pos:start="129:25" pos:end="129:25">u</name></expr>)</condition> <block pos:start="129:28" pos:end="133:21">{<block_content pos:start="131:25" pos:end="131:73">

                        <expr_stmt pos:start="131:25" pos:end="131:73"><expr pos:start="131:25" pos:end="131:72"><call pos:start="131:25" pos:end="131:72"><name pos:start="131:25" pos:end="131:48">gen_helper_neon_qshl_u64</name><argument_list pos:start="131:49" pos:end="131:72">(<argument pos:start="131:50" pos:end="131:55"><expr pos:start="131:50" pos:end="131:55"><name pos:start="131:50" pos:end="131:55">cpu_V0</name></expr></argument>, <argument pos:start="131:58" pos:end="131:63"><expr pos:start="131:58" pos:end="131:63"><name pos:start="131:58" pos:end="131:63">cpu_V1</name></expr></argument>, <argument pos:start="131:66" pos:end="131:71"><expr pos:start="131:66" pos:end="131:71"><name pos:start="131:66" pos:end="131:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="133:23" pos:end="137:21">else <block pos:start="133:28" pos:end="137:21">{<block_content pos:start="135:25" pos:end="135:73">

                        <expr_stmt pos:start="135:25" pos:end="135:73"><expr pos:start="135:25" pos:end="135:72"><call pos:start="135:25" pos:end="135:72"><name pos:start="135:25" pos:end="135:48">gen_helper_neon_qshl_s64</name><argument_list pos:start="135:49" pos:end="135:72">(<argument pos:start="135:50" pos:end="135:55"><expr pos:start="135:50" pos:end="135:55"><name pos:start="135:50" pos:end="135:55">cpu_V0</name></expr></argument>, <argument pos:start="135:58" pos:end="135:63"><expr pos:start="135:58" pos:end="135:63"><name pos:start="135:58" pos:end="135:63">cpu_V1</name></expr></argument>, <argument pos:start="135:66" pos:end="135:71"><expr pos:start="135:66" pos:end="135:71"><name pos:start="135:66" pos:end="135:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="139:21" pos:end="139:26">break;</break>

                <case pos:start="141:17" pos:end="141:35">case <expr pos:start="141:22" pos:end="141:34"><name pos:start="141:22" pos:end="141:34">NEON_3R_VRSHL</name></expr>:</case>

                    <if_stmt pos:start="143:21" pos:end="151:21"><if pos:start="143:21" pos:end="147:21">if <condition pos:start="143:24" pos:end="143:26">(<expr pos:start="143:25" pos:end="143:25"><name pos:start="143:25" pos:end="143:25">u</name></expr>)</condition> <block pos:start="143:28" pos:end="147:21">{<block_content pos:start="145:25" pos:end="145:73">

                        <expr_stmt pos:start="145:25" pos:end="145:73"><expr pos:start="145:25" pos:end="145:72"><call pos:start="145:25" pos:end="145:72"><name pos:start="145:25" pos:end="145:48">gen_helper_neon_rshl_u64</name><argument_list pos:start="145:49" pos:end="145:72">(<argument pos:start="145:50" pos:end="145:55"><expr pos:start="145:50" pos:end="145:55"><name pos:start="145:50" pos:end="145:55">cpu_V0</name></expr></argument>, <argument pos:start="145:58" pos:end="145:63"><expr pos:start="145:58" pos:end="145:63"><name pos:start="145:58" pos:end="145:63">cpu_V1</name></expr></argument>, <argument pos:start="145:66" pos:end="145:71"><expr pos:start="145:66" pos:end="145:71"><name pos:start="145:66" pos:end="145:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="147:23" pos:end="151:21">else <block pos:start="147:28" pos:end="151:21">{<block_content pos:start="149:25" pos:end="149:73">

                        <expr_stmt pos:start="149:25" pos:end="149:73"><expr pos:start="149:25" pos:end="149:72"><call pos:start="149:25" pos:end="149:72"><name pos:start="149:25" pos:end="149:48">gen_helper_neon_rshl_s64</name><argument_list pos:start="149:49" pos:end="149:72">(<argument pos:start="149:50" pos:end="149:55"><expr pos:start="149:50" pos:end="149:55"><name pos:start="149:50" pos:end="149:55">cpu_V0</name></expr></argument>, <argument pos:start="149:58" pos:end="149:63"><expr pos:start="149:58" pos:end="149:63"><name pos:start="149:58" pos:end="149:63">cpu_V1</name></expr></argument>, <argument pos:start="149:66" pos:end="149:71"><expr pos:start="149:66" pos:end="149:71"><name pos:start="149:66" pos:end="149:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="153:21" pos:end="153:26">break;</break>

                <case pos:start="155:17" pos:end="155:36">case <expr pos:start="155:22" pos:end="155:35"><name pos:start="155:22" pos:end="155:35">NEON_3R_VQRSHL</name></expr>:</case>

                    <if_stmt pos:start="157:21" pos:end="165:21"><if pos:start="157:21" pos:end="161:21">if <condition pos:start="157:24" pos:end="157:26">(<expr pos:start="157:25" pos:end="157:25"><name pos:start="157:25" pos:end="157:25">u</name></expr>)</condition> <block pos:start="157:28" pos:end="161:21">{<block_content pos:start="159:25" pos:end="159:74">

                        <expr_stmt pos:start="159:25" pos:end="159:74"><expr pos:start="159:25" pos:end="159:73"><call pos:start="159:25" pos:end="159:73"><name pos:start="159:25" pos:end="159:49">gen_helper_neon_qrshl_u64</name><argument_list pos:start="159:50" pos:end="159:73">(<argument pos:start="159:51" pos:end="159:56"><expr pos:start="159:51" pos:end="159:56"><name pos:start="159:51" pos:end="159:56">cpu_V0</name></expr></argument>, <argument pos:start="159:59" pos:end="159:64"><expr pos:start="159:59" pos:end="159:64"><name pos:start="159:59" pos:end="159:64">cpu_V1</name></expr></argument>, <argument pos:start="159:67" pos:end="159:72"><expr pos:start="159:67" pos:end="159:72"><name pos:start="159:67" pos:end="159:72">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="161:23" pos:end="165:21">else <block pos:start="161:28" pos:end="165:21">{<block_content pos:start="163:25" pos:end="163:74">

                        <expr_stmt pos:start="163:25" pos:end="163:74"><expr pos:start="163:25" pos:end="163:73"><call pos:start="163:25" pos:end="163:73"><name pos:start="163:25" pos:end="163:49">gen_helper_neon_qrshl_s64</name><argument_list pos:start="163:50" pos:end="163:73">(<argument pos:start="163:51" pos:end="163:56"><expr pos:start="163:51" pos:end="163:56"><name pos:start="163:51" pos:end="163:56">cpu_V0</name></expr></argument>, <argument pos:start="163:59" pos:end="163:64"><expr pos:start="163:59" pos:end="163:64"><name pos:start="163:59" pos:end="163:64">cpu_V1</name></expr></argument>, <argument pos:start="163:67" pos:end="163:72"><expr pos:start="163:67" pos:end="163:72"><name pos:start="163:67" pos:end="163:72">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="167:21" pos:end="167:26">break;</break>

                <case pos:start="169:17" pos:end="169:39">case <expr pos:start="169:22" pos:end="169:38"><name pos:start="169:22" pos:end="169:38">NEON_3R_VADD_VSUB</name></expr>:</case>

                    <if_stmt pos:start="171:21" pos:end="179:21"><if pos:start="171:21" pos:end="175:21">if <condition pos:start="171:24" pos:end="171:26">(<expr pos:start="171:25" pos:end="171:25"><name pos:start="171:25" pos:end="171:25">u</name></expr>)</condition> <block pos:start="171:28" pos:end="175:21">{<block_content pos:start="173:25" pos:end="173:50">

                        <expr_stmt pos:start="173:25" pos:end="173:50"><expr pos:start="173:25" pos:end="173:49"><call pos:start="173:25" pos:end="173:49"><name pos:start="173:25" pos:end="173:39">tcg_gen_sub_i64</name><argument_list pos:start="173:40" pos:end="173:49">(<argument pos:start="173:41" pos:end="173:48"><expr pos:start="173:41" pos:end="173:48"><name pos:start="173:41" pos:end="173:48">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="175:23" pos:end="179:21">else <block pos:start="175:28" pos:end="179:21">{<block_content pos:start="177:25" pos:end="177:50">

                        <expr_stmt pos:start="177:25" pos:end="177:50"><expr pos:start="177:25" pos:end="177:49"><call pos:start="177:25" pos:end="177:49"><name pos:start="177:25" pos:end="177:39">tcg_gen_add_i64</name><argument_list pos:start="177:40" pos:end="177:49">(<argument pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:48"><name pos:start="177:41" pos:end="177:48">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="181:21" pos:end="181:26">break;</break>

                <default pos:start="183:17" pos:end="183:24">default:</default>

                    <expr_stmt pos:start="185:21" pos:end="185:28"><expr pos:start="185:21" pos:end="185:27"><call pos:start="185:21" pos:end="185:27"><name pos:start="185:21" pos:end="185:25">abort</name><argument_list pos:start="185:26" pos:end="185:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

                <expr_stmt pos:start="189:17" pos:end="189:52"><expr pos:start="189:17" pos:end="189:51"><call pos:start="189:17" pos:end="189:51"><name pos:start="189:17" pos:end="189:32">neon_store_reg64</name><argument_list pos:start="189:33" pos:end="189:51">(<argument pos:start="189:34" pos:end="189:39"><expr pos:start="189:34" pos:end="189:39"><name pos:start="189:34" pos:end="189:39">cpu_V0</name></expr></argument>, <argument pos:start="189:42" pos:end="189:50"><expr pos:start="189:42" pos:end="189:50"><name pos:start="189:42" pos:end="189:43">rd</name> <operator pos:start="189:45" pos:end="189:45">+</operator> <name pos:start="189:47" pos:end="189:50">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <return pos:start="193:13" pos:end="193:21">return <expr pos:start="193:20" pos:end="193:20"><literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:21"><expr pos:start="197:9" pos:end="197:20"><name pos:start="197:9" pos:end="197:16">pairwise</name> <operator pos:start="197:18" pos:end="197:18">=</operator> <literal type="number" pos:start="197:20" pos:end="197:20">0</literal></expr>;</expr_stmt>

        <switch pos:start="199:9" pos:end="303:9">switch <condition pos:start="199:16" pos:end="199:19">(<expr pos:start="199:17" pos:end="199:18"><name pos:start="199:17" pos:end="199:18">op</name></expr>)</condition> <block pos:start="199:21" pos:end="303:9">{<block_content pos:start="201:9" pos:end="301:18">

        <case pos:start="201:9" pos:end="201:26">case <expr pos:start="201:14" pos:end="201:25"><name pos:start="201:14" pos:end="201:25">NEON_3R_VSHL</name></expr>:</case>

        <case pos:start="203:9" pos:end="203:27">case <expr pos:start="203:14" pos:end="203:26"><name pos:start="203:14" pos:end="203:26">NEON_3R_VQSHL</name></expr>:</case>

        <case pos:start="205:9" pos:end="205:27">case <expr pos:start="205:14" pos:end="205:26"><name pos:start="205:14" pos:end="205:26">NEON_3R_VRSHL</name></expr>:</case>

        <case pos:start="207:9" pos:end="207:28">case <expr pos:start="207:14" pos:end="207:27"><name pos:start="207:14" pos:end="207:27">NEON_3R_VQRSHL</name></expr>:</case>

            <block pos:start="209:13" pos:end="221:13">{<block_content pos:start="211:17" pos:end="219:26">

                <decl_stmt pos:start="211:17" pos:end="211:25"><decl pos:start="211:17" pos:end="211:24"><type pos:start="211:17" pos:end="211:19"><name pos:start="211:17" pos:end="211:19">int</name></type> <name pos:start="211:21" pos:end="211:24">rtmp</name></decl>;</decl_stmt>

                <comment type="block" pos:start="213:17" pos:end="213:63">/* Shift instruction operands are reversed.  */</comment>

                <expr_stmt pos:start="215:17" pos:end="215:26"><expr pos:start="215:17" pos:end="215:25"><name pos:start="215:17" pos:end="215:20">rtmp</name> <operator pos:start="215:22" pos:end="215:22">=</operator> <name pos:start="215:24" pos:end="215:25">rn</name></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:24"><expr pos:start="217:17" pos:end="217:23"><name pos:start="217:17" pos:end="217:18">rn</name> <operator pos:start="217:20" pos:end="217:20">=</operator> <name pos:start="217:22" pos:end="217:23">rm</name></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:26"><expr pos:start="219:17" pos:end="219:25"><name pos:start="219:17" pos:end="219:18">rm</name> <operator pos:start="219:20" pos:end="219:20">=</operator> <name pos:start="219:22" pos:end="219:25">rtmp</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="225:27">case <expr pos:start="225:14" pos:end="225:26"><name pos:start="225:14" pos:end="225:26">NEON_3R_VPADD</name></expr>:</case>

            <if_stmt pos:start="227:13" pos:end="231:13"><if pos:start="227:13" pos:end="231:13">if <condition pos:start="227:16" pos:end="227:18">(<expr pos:start="227:17" pos:end="227:17"><name pos:start="227:17" pos:end="227:17">u</name></expr>)</condition> <block pos:start="227:20" pos:end="231:13">{<block_content pos:start="229:17" pos:end="229:25">

                <return pos:start="229:17" pos:end="229:25">return <expr pos:start="229:24" pos:end="229:24"><literal type="number" pos:start="229:24" pos:end="229:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="233:13" pos:end="233:30">/* Fall through */</comment>

        <case pos:start="235:9" pos:end="235:27">case <expr pos:start="235:14" pos:end="235:26"><name pos:start="235:14" pos:end="235:26">NEON_3R_VPMAX</name></expr>:</case>

        <case pos:start="237:9" pos:end="237:27">case <expr pos:start="237:14" pos:end="237:26"><name pos:start="237:14" pos:end="237:26">NEON_3R_VPMIN</name></expr>:</case>

            <expr_stmt pos:start="239:13" pos:end="239:25"><expr pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:20">pairwise</name> <operator pos:start="239:22" pos:end="239:22">=</operator> <literal type="number" pos:start="239:24" pos:end="239:24">1</literal></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:33">case <expr pos:start="243:14" pos:end="243:32"><name pos:start="243:14" pos:end="243:32">NEON_3R_FLOAT_ARITH</name></expr>:</case>

            <expr_stmt pos:start="245:13" pos:end="245:39"><expr pos:start="245:13" pos:end="245:38"><name pos:start="245:13" pos:end="245:20">pairwise</name> <operator pos:start="245:22" pos:end="245:22">=</operator> <operator pos:start="245:24" pos:end="245:24">(</operator><name pos:start="245:25" pos:end="245:25">u</name> <operator pos:start="245:27" pos:end="245:28">&amp;&amp;</operator> <name pos:start="245:30" pos:end="245:33">size</name> <operator pos:start="245:35" pos:end="245:35">&lt;</operator> <literal type="number" pos:start="245:37" pos:end="245:37">2</literal><operator pos:start="245:38" pos:end="245:38">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="245:41" pos:end="245:62">/* if VPADD (float) */</comment>

            <break pos:start="247:13" pos:end="247:18">break;</break>

        <case pos:start="249:9" pos:end="249:34">case <expr pos:start="249:14" pos:end="249:33"><name pos:start="249:14" pos:end="249:33">NEON_3R_FLOAT_MINMAX</name></expr>:</case>

            <expr_stmt pos:start="251:13" pos:end="251:25"><expr pos:start="251:13" pos:end="251:24"><name pos:start="251:13" pos:end="251:20">pairwise</name> <operator pos:start="251:22" pos:end="251:22">=</operator> <name pos:start="251:24" pos:end="251:24">u</name></expr>;</expr_stmt> <comment type="block" pos:start="251:27" pos:end="251:54">/* if VPMIN/VPMAX (float) */</comment>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        <case pos:start="255:9" pos:end="255:31">case <expr pos:start="255:14" pos:end="255:30"><name pos:start="255:14" pos:end="255:30">NEON_3R_FLOAT_CMP</name></expr>:</case>

            <if_stmt pos:start="257:13" pos:end="263:13"><if pos:start="257:13" pos:end="263:13">if <condition pos:start="257:16" pos:end="257:27">(<expr pos:start="257:17" pos:end="257:26"><operator pos:start="257:17" pos:end="257:17">!</operator><name pos:start="257:18" pos:end="257:18">u</name> <operator pos:start="257:20" pos:end="257:21">&amp;&amp;</operator> <name pos:start="257:23" pos:end="257:26">size</name></expr>)</condition> <block pos:start="257:29" pos:end="263:13">{<block_content pos:start="261:17" pos:end="261:25">

                <comment type="block" pos:start="259:17" pos:end="259:46">/* no encoding for U=0 C=1x */</comment>

                <return pos:start="261:17" pos:end="261:25">return <expr pos:start="261:24" pos:end="261:24"><literal type="number" pos:start="261:24" pos:end="261:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <case pos:start="267:9" pos:end="267:32">case <expr pos:start="267:14" pos:end="267:31"><name pos:start="267:14" pos:end="267:31">NEON_3R_FLOAT_ACMP</name></expr>:</case>

            <if_stmt pos:start="269:13" pos:end="273:13"><if pos:start="269:13" pos:end="273:13">if <condition pos:start="269:16" pos:end="269:19">(<expr pos:start="269:17" pos:end="269:18"><operator pos:start="269:17" pos:end="269:17">!</operator><name pos:start="269:18" pos:end="269:18">u</name></expr>)</condition> <block pos:start="269:21" pos:end="273:13">{<block_content pos:start="271:17" pos:end="271:25">

                <return pos:start="271:17" pos:end="271:25">return <expr pos:start="271:24" pos:end="271:24"><literal type="number" pos:start="271:24" pos:end="271:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="275:13" pos:end="275:18">break;</break>

        <case pos:start="277:9" pos:end="277:36">case <expr pos:start="277:14" pos:end="277:35"><name pos:start="277:14" pos:end="277:35">NEON_3R_VRECPS_VRSQRTS</name></expr>:</case>

            <if_stmt pos:start="279:13" pos:end="283:13"><if pos:start="279:13" pos:end="283:13">if <condition pos:start="279:16" pos:end="279:18">(<expr pos:start="279:17" pos:end="279:17"><name pos:start="279:17" pos:end="279:17">u</name></expr>)</condition> <block pos:start="279:20" pos:end="283:13">{<block_content pos:start="281:17" pos:end="281:25">

                <return pos:start="281:17" pos:end="281:25">return <expr pos:start="281:24" pos:end="281:24"><literal type="number" pos:start="281:24" pos:end="281:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="285:13" pos:end="285:18">break;</break>

        <case pos:start="287:9" pos:end="287:26">case <expr pos:start="287:14" pos:end="287:25"><name pos:start="287:14" pos:end="287:25">NEON_3R_VMUL</name></expr>:</case>

            <if_stmt pos:start="289:13" pos:end="295:13"><if pos:start="289:13" pos:end="295:13">if <condition pos:start="289:16" pos:end="289:33">(<expr pos:start="289:17" pos:end="289:32"><name pos:start="289:17" pos:end="289:17">u</name> <operator pos:start="289:19" pos:end="289:20">&amp;&amp;</operator> <operator pos:start="289:22" pos:end="289:22">(</operator><name pos:start="289:23" pos:end="289:26">size</name> <operator pos:start="289:28" pos:end="289:29">!=</operator> <literal type="number" pos:start="289:31" pos:end="289:31">0</literal><operator pos:start="289:32" pos:end="289:32">)</operator></expr>)</condition> <block pos:start="289:35" pos:end="295:13">{<block_content pos:start="293:17" pos:end="293:25">

                <comment type="block" pos:start="291:17" pos:end="291:66">/* UNDEF on invalid size for polynomial subcase */</comment>

                <return pos:start="293:17" pos:end="293:25">return <expr pos:start="293:24" pos:end="293:24"><literal type="number" pos:start="293:24" pos:end="293:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="297:13" pos:end="297:18">break;</break>

        <default pos:start="299:9" pos:end="299:16">default:</default>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="307:9" pos:end="313:9"><if pos:start="307:9" pos:end="313:9">if <condition pos:start="307:12" pos:end="307:26">(<expr pos:start="307:13" pos:end="307:25"><name pos:start="307:13" pos:end="307:20">pairwise</name> <operator pos:start="307:22" pos:end="307:23">&amp;&amp;</operator> <name pos:start="307:25" pos:end="307:25">q</name></expr>)</condition> <block pos:start="307:28" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:21">

            <comment type="block" pos:start="309:13" pos:end="309:58">/* All the pairwise insns UNDEF if Q is set */</comment>

            <return pos:start="311:13" pos:end="311:21">return <expr pos:start="311:20" pos:end="311:20"><literal type="number" pos:start="311:20" pos:end="311:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="317:9" pos:end="829:9">for <control pos:start="317:13" pos:end="317:50">(<init pos:start="317:14" pos:end="317:22"><expr pos:start="317:14" pos:end="317:21"><name pos:start="317:14" pos:end="317:17">pass</name> <operator pos:start="317:19" pos:end="317:19">=</operator> <literal type="number" pos:start="317:21" pos:end="317:21">0</literal></expr>;</init> <condition pos:start="317:24" pos:end="317:42"><expr pos:start="317:24" pos:end="317:41"><name pos:start="317:24" pos:end="317:27">pass</name> <operator pos:start="317:29" pos:end="317:29">&lt;</operator> <operator pos:start="317:31" pos:end="317:31">(</operator><ternary pos:start="317:32" pos:end="317:40"><condition pos:start="317:32" pos:end="317:34"><expr pos:start="317:32" pos:end="317:32"><name pos:start="317:32" pos:end="317:32">q</name></expr> ?</condition><then pos:start="317:36" pos:end="317:36"> <expr pos:start="317:36" pos:end="317:36"><literal type="number" pos:start="317:36" pos:end="317:36">4</literal></expr> </then><else pos:start="317:38" pos:end="317:40">: <expr pos:start="317:40" pos:end="317:40"><literal type="number" pos:start="317:40" pos:end="317:40">2</literal></expr></else></ternary><operator pos:start="317:41" pos:end="317:41">)</operator></expr>;</condition> <incr pos:start="317:44" pos:end="317:49"><expr pos:start="317:44" pos:end="317:49"><name pos:start="317:44" pos:end="317:47">pass</name><operator pos:start="317:48" pos:end="317:49">++</operator></expr></incr>)</control> <block pos:start="317:52" pos:end="829:9">{<block_content pos:start="321:9" pos:end="825:9">



        <if_stmt pos:start="321:9" pos:end="347:9"><if pos:start="321:9" pos:end="339:9">if <condition pos:start="321:12" pos:end="321:21">(<expr pos:start="321:13" pos:end="321:20"><name pos:start="321:13" pos:end="321:20">pairwise</name></expr>)</condition> <block pos:start="321:23" pos:end="339:9">{<block_content pos:start="325:13" pos:end="337:13">

            <comment type="block" pos:start="323:13" pos:end="323:28">/* Pairwise.  */</comment>

            <if_stmt pos:start="325:13" pos:end="337:13"><if pos:start="325:13" pos:end="331:13">if <condition pos:start="325:16" pos:end="325:25">(<expr pos:start="325:17" pos:end="325:24"><name pos:start="325:17" pos:end="325:20">pass</name> <operator pos:start="325:22" pos:end="325:22">&lt;</operator> <literal type="number" pos:start="325:24" pos:end="325:24">1</literal></expr>)</condition> <block pos:start="325:27" pos:end="331:13">{<block_content pos:start="327:17" pos:end="329:44">

                <expr_stmt pos:start="327:17" pos:end="327:43"><expr pos:start="327:17" pos:end="327:42"><name pos:start="327:17" pos:end="327:19">tmp</name> <operator pos:start="327:21" pos:end="327:21">=</operator> <call pos:start="327:23" pos:end="327:42"><name pos:start="327:23" pos:end="327:35">neon_load_reg</name><argument_list pos:start="327:36" pos:end="327:42">(<argument pos:start="327:37" pos:end="327:38"><expr pos:start="327:37" pos:end="327:38"><name pos:start="327:37" pos:end="327:38">rn</name></expr></argument>, <argument pos:start="327:41" pos:end="327:41"><expr pos:start="327:41" pos:end="327:41"><literal type="number" pos:start="327:41" pos:end="327:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:44"><expr pos:start="329:17" pos:end="329:43"><name pos:start="329:17" pos:end="329:20">tmp2</name> <operator pos:start="329:22" pos:end="329:22">=</operator> <call pos:start="329:24" pos:end="329:43"><name pos:start="329:24" pos:end="329:36">neon_load_reg</name><argument_list pos:start="329:37" pos:end="329:43">(<argument pos:start="329:38" pos:end="329:39"><expr pos:start="329:38" pos:end="329:39"><name pos:start="329:38" pos:end="329:39">rn</name></expr></argument>, <argument pos:start="329:42" pos:end="329:42"><expr pos:start="329:42" pos:end="329:42"><literal type="number" pos:start="329:42" pos:end="329:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="331:15" pos:end="337:13">else <block pos:start="331:20" pos:end="337:13">{<block_content pos:start="333:17" pos:end="335:44">

                <expr_stmt pos:start="333:17" pos:end="333:43"><expr pos:start="333:17" pos:end="333:42"><name pos:start="333:17" pos:end="333:19">tmp</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <call pos:start="333:23" pos:end="333:42"><name pos:start="333:23" pos:end="333:35">neon_load_reg</name><argument_list pos:start="333:36" pos:end="333:42">(<argument pos:start="333:37" pos:end="333:38"><expr pos:start="333:37" pos:end="333:38"><name pos:start="333:37" pos:end="333:38">rm</name></expr></argument>, <argument pos:start="333:41" pos:end="333:41"><expr pos:start="333:41" pos:end="333:41"><literal type="number" pos:start="333:41" pos:end="333:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:44"><expr pos:start="335:17" pos:end="335:43"><name pos:start="335:17" pos:end="335:20">tmp2</name> <operator pos:start="335:22" pos:end="335:22">=</operator> <call pos:start="335:24" pos:end="335:43"><name pos:start="335:24" pos:end="335:36">neon_load_reg</name><argument_list pos:start="335:37" pos:end="335:43">(<argument pos:start="335:38" pos:end="335:39"><expr pos:start="335:38" pos:end="335:39"><name pos:start="335:38" pos:end="335:39">rm</name></expr></argument>, <argument pos:start="335:42" pos:end="335:42"><expr pos:start="335:42" pos:end="335:42"><literal type="number" pos:start="335:42" pos:end="335:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="339:11" pos:end="347:9">else <block pos:start="339:16" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:43">

            <comment type="block" pos:start="341:13" pos:end="341:31">/* Elementwise.  */</comment>

            <expr_stmt pos:start="343:13" pos:end="343:42"><expr pos:start="343:13" pos:end="343:41"><name pos:start="343:13" pos:end="343:15">tmp</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <call pos:start="343:19" pos:end="343:41"><name pos:start="343:19" pos:end="343:31">neon_load_reg</name><argument_list pos:start="343:32" pos:end="343:41">(<argument pos:start="343:33" pos:end="343:34"><expr pos:start="343:33" pos:end="343:34"><name pos:start="343:33" pos:end="343:34">rn</name></expr></argument>, <argument pos:start="343:37" pos:end="343:40"><expr pos:start="343:37" pos:end="343:40"><name pos:start="343:37" pos:end="343:40">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:43"><expr pos:start="345:13" pos:end="345:42"><name pos:start="345:13" pos:end="345:16">tmp2</name> <operator pos:start="345:18" pos:end="345:18">=</operator> <call pos:start="345:20" pos:end="345:42"><name pos:start="345:20" pos:end="345:32">neon_load_reg</name><argument_list pos:start="345:33" pos:end="345:42">(<argument pos:start="345:34" pos:end="345:35"><expr pos:start="345:34" pos:end="345:35"><name pos:start="345:34" pos:end="345:35">rm</name></expr></argument>, <argument pos:start="345:38" pos:end="345:41"><expr pos:start="345:38" pos:end="345:41"><name pos:start="345:38" pos:end="345:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="349:9" pos:end="805:9">switch <condition pos:start="349:16" pos:end="349:19">(<expr pos:start="349:17" pos:end="349:18"><name pos:start="349:17" pos:end="349:18">op</name></expr>)</condition> <block pos:start="349:21" pos:end="805:9">{<block_content pos:start="351:9" pos:end="803:20">

        <case pos:start="351:9" pos:end="351:27">case <expr pos:start="351:14" pos:end="351:26"><name pos:start="351:14" pos:end="351:26">NEON_3R_VHADD</name></expr>:</case>

            <expr_stmt pos:start="353:13" pos:end="353:38"><expr pos:start="353:13" pos:end="353:37"><call pos:start="353:13" pos:end="353:37"><name pos:start="353:13" pos:end="353:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="353:32" pos:end="353:37">(<argument pos:start="353:33" pos:end="353:36"><expr pos:start="353:33" pos:end="353:36"><name pos:start="353:33" pos:end="353:36">hadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="355:13" pos:end="355:18">break;</break>

        <case pos:start="357:9" pos:end="357:27">case <expr pos:start="357:14" pos:end="357:26"><name pos:start="357:14" pos:end="357:26">NEON_3R_VQADD</name></expr>:</case>

            <expr_stmt pos:start="359:13" pos:end="359:38"><expr pos:start="359:13" pos:end="359:37"><call pos:start="359:13" pos:end="359:37"><name pos:start="359:13" pos:end="359:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="359:32" pos:end="359:37">(<argument pos:start="359:33" pos:end="359:36"><expr pos:start="359:33" pos:end="359:36"><name pos:start="359:33" pos:end="359:36">qadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="361:13" pos:end="361:18">break;</break>

        <case pos:start="363:9" pos:end="363:28">case <expr pos:start="363:14" pos:end="363:27"><name pos:start="363:14" pos:end="363:27">NEON_3R_VRHADD</name></expr>:</case>

            <expr_stmt pos:start="365:13" pos:end="365:39"><expr pos:start="365:13" pos:end="365:38"><call pos:start="365:13" pos:end="365:38"><name pos:start="365:13" pos:end="365:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="365:32" pos:end="365:38">(<argument pos:start="365:33" pos:end="365:37"><expr pos:start="365:33" pos:end="365:37"><name pos:start="365:33" pos:end="365:37">rhadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="367:13" pos:end="367:18">break;</break>

        <case pos:start="369:9" pos:end="369:27">case <expr pos:start="369:14" pos:end="369:26"><name pos:start="369:14" pos:end="369:26">NEON_3R_LOGIC</name></expr>:</case> <comment type="block" pos:start="369:29" pos:end="369:45">/* Logic ops.  */</comment>

            <switch pos:start="371:13" pos:end="433:13">switch <condition pos:start="371:20" pos:end="371:36">(<expr pos:start="371:21" pos:end="371:35"><operator pos:start="371:21" pos:end="371:21">(</operator><name pos:start="371:22" pos:end="371:22">u</name> <operator pos:start="371:24" pos:end="371:25">&lt;&lt;</operator> <literal type="number" pos:start="371:27" pos:end="371:27">2</literal><operator pos:start="371:28" pos:end="371:28">)</operator> <operator pos:start="371:30" pos:end="371:30">|</operator> <name pos:start="371:32" pos:end="371:35">size</name></expr>)</condition> <block pos:start="371:38" pos:end="433:13">{<block_content pos:start="373:13" pos:end="431:22">

            <case pos:start="373:13" pos:end="373:19">case <expr pos:start="373:18" pos:end="373:18"><literal type="number" pos:start="373:18" pos:end="373:18">0</literal></expr>:</case> <comment type="block" pos:start="373:21" pos:end="373:30">/* VAND */</comment>

                <expr_stmt pos:start="375:17" pos:end="375:48"><expr pos:start="375:17" pos:end="375:47"><call pos:start="375:17" pos:end="375:47"><name pos:start="375:17" pos:end="375:31">tcg_gen_and_i32</name><argument_list pos:start="375:32" pos:end="375:47">(<argument pos:start="375:33" pos:end="375:35"><expr pos:start="375:33" pos:end="375:35"><name pos:start="375:33" pos:end="375:35">tmp</name></expr></argument>, <argument pos:start="375:38" pos:end="375:40"><expr pos:start="375:38" pos:end="375:40"><name pos:start="375:38" pos:end="375:40">tmp</name></expr></argument>, <argument pos:start="375:43" pos:end="375:46"><expr pos:start="375:43" pos:end="375:46"><name pos:start="375:43" pos:end="375:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="377:17" pos:end="377:22">break;</break>

            <case pos:start="379:13" pos:end="379:19">case <expr pos:start="379:18" pos:end="379:18"><literal type="number" pos:start="379:18" pos:end="379:18">1</literal></expr>:</case> <comment type="block" pos:start="379:21" pos:end="379:29">/* BIC */</comment>

                <expr_stmt pos:start="381:17" pos:end="381:49"><expr pos:start="381:17" pos:end="381:48"><call pos:start="381:17" pos:end="381:48"><name pos:start="381:17" pos:end="381:32">tcg_gen_andc_i32</name><argument_list pos:start="381:33" pos:end="381:48">(<argument pos:start="381:34" pos:end="381:36"><expr pos:start="381:34" pos:end="381:36"><name pos:start="381:34" pos:end="381:36">tmp</name></expr></argument>, <argument pos:start="381:39" pos:end="381:41"><expr pos:start="381:39" pos:end="381:41"><name pos:start="381:39" pos:end="381:41">tmp</name></expr></argument>, <argument pos:start="381:44" pos:end="381:47"><expr pos:start="381:44" pos:end="381:47"><name pos:start="381:44" pos:end="381:47">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="383:17" pos:end="383:22">break;</break>

            <case pos:start="385:13" pos:end="385:19">case <expr pos:start="385:18" pos:end="385:18"><literal type="number" pos:start="385:18" pos:end="385:18">2</literal></expr>:</case> <comment type="block" pos:start="385:21" pos:end="385:30">/* VORR */</comment>

                <expr_stmt pos:start="387:17" pos:end="387:47"><expr pos:start="387:17" pos:end="387:46"><call pos:start="387:17" pos:end="387:46"><name pos:start="387:17" pos:end="387:30">tcg_gen_or_i32</name><argument_list pos:start="387:31" pos:end="387:46">(<argument pos:start="387:32" pos:end="387:34"><expr pos:start="387:32" pos:end="387:34"><name pos:start="387:32" pos:end="387:34">tmp</name></expr></argument>, <argument pos:start="387:37" pos:end="387:39"><expr pos:start="387:37" pos:end="387:39"><name pos:start="387:37" pos:end="387:39">tmp</name></expr></argument>, <argument pos:start="387:42" pos:end="387:45"><expr pos:start="387:42" pos:end="387:45"><name pos:start="387:42" pos:end="387:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="389:17" pos:end="389:22">break;</break>

            <case pos:start="391:13" pos:end="391:19">case <expr pos:start="391:18" pos:end="391:18"><literal type="number" pos:start="391:18" pos:end="391:18">3</literal></expr>:</case> <comment type="block" pos:start="391:21" pos:end="391:30">/* VORN */</comment>

                <expr_stmt pos:start="393:17" pos:end="393:48"><expr pos:start="393:17" pos:end="393:47"><call pos:start="393:17" pos:end="393:47"><name pos:start="393:17" pos:end="393:31">tcg_gen_orc_i32</name><argument_list pos:start="393:32" pos:end="393:47">(<argument pos:start="393:33" pos:end="393:35"><expr pos:start="393:33" pos:end="393:35"><name pos:start="393:33" pos:end="393:35">tmp</name></expr></argument>, <argument pos:start="393:38" pos:end="393:40"><expr pos:start="393:38" pos:end="393:40"><name pos:start="393:38" pos:end="393:40">tmp</name></expr></argument>, <argument pos:start="393:43" pos:end="393:46"><expr pos:start="393:43" pos:end="393:46"><name pos:start="393:43" pos:end="393:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="395:17" pos:end="395:22">break;</break>

            <case pos:start="397:13" pos:end="397:19">case <expr pos:start="397:18" pos:end="397:18"><literal type="number" pos:start="397:18" pos:end="397:18">4</literal></expr>:</case> <comment type="block" pos:start="397:21" pos:end="397:30">/* VEOR */</comment>

                <expr_stmt pos:start="399:17" pos:end="399:48"><expr pos:start="399:17" pos:end="399:47"><call pos:start="399:17" pos:end="399:47"><name pos:start="399:17" pos:end="399:31">tcg_gen_xor_i32</name><argument_list pos:start="399:32" pos:end="399:47">(<argument pos:start="399:33" pos:end="399:35"><expr pos:start="399:33" pos:end="399:35"><name pos:start="399:33" pos:end="399:35">tmp</name></expr></argument>, <argument pos:start="399:38" pos:end="399:40"><expr pos:start="399:38" pos:end="399:40"><name pos:start="399:38" pos:end="399:40">tmp</name></expr></argument>, <argument pos:start="399:43" pos:end="399:46"><expr pos:start="399:43" pos:end="399:46"><name pos:start="399:43" pos:end="399:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="401:17" pos:end="401:22">break;</break>

            <case pos:start="403:13" pos:end="403:19">case <expr pos:start="403:18" pos:end="403:18"><literal type="number" pos:start="403:18" pos:end="403:18">5</literal></expr>:</case> <comment type="block" pos:start="403:21" pos:end="403:30">/* VBSL */</comment>

                <expr_stmt pos:start="405:17" pos:end="405:47"><expr pos:start="405:17" pos:end="405:46"><name pos:start="405:17" pos:end="405:20">tmp3</name> <operator pos:start="405:22" pos:end="405:22">=</operator> <call pos:start="405:24" pos:end="405:46"><name pos:start="405:24" pos:end="405:36">neon_load_reg</name><argument_list pos:start="405:37" pos:end="405:46">(<argument pos:start="405:38" pos:end="405:39"><expr pos:start="405:38" pos:end="405:39"><name pos:start="405:38" pos:end="405:39">rd</name></expr></argument>, <argument pos:start="405:42" pos:end="405:45"><expr pos:start="405:42" pos:end="405:45"><name pos:start="405:42" pos:end="405:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:51"><expr pos:start="407:17" pos:end="407:50"><call pos:start="407:17" pos:end="407:50"><name pos:start="407:17" pos:end="407:28">gen_neon_bsl</name><argument_list pos:start="407:29" pos:end="407:50">(<argument pos:start="407:30" pos:end="407:32"><expr pos:start="407:30" pos:end="407:32"><name pos:start="407:30" pos:end="407:32">tmp</name></expr></argument>, <argument pos:start="407:35" pos:end="407:37"><expr pos:start="407:35" pos:end="407:37"><name pos:start="407:35" pos:end="407:37">tmp</name></expr></argument>, <argument pos:start="407:40" pos:end="407:43"><expr pos:start="407:40" pos:end="407:43"><name pos:start="407:40" pos:end="407:43">tmp2</name></expr></argument>, <argument pos:start="407:46" pos:end="407:49"><expr pos:start="407:46" pos:end="407:49"><name pos:start="407:46" pos:end="407:49">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:40"><expr pos:start="409:17" pos:end="409:39"><call pos:start="409:17" pos:end="409:39"><name pos:start="409:17" pos:end="409:33">tcg_temp_free_i32</name><argument_list pos:start="409:34" pos:end="409:39">(<argument pos:start="409:35" pos:end="409:38"><expr pos:start="409:35" pos:end="409:38"><name pos:start="409:35" pos:end="409:38">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="411:17" pos:end="411:22">break;</break>

            <case pos:start="413:13" pos:end="413:19">case <expr pos:start="413:18" pos:end="413:18"><literal type="number" pos:start="413:18" pos:end="413:18">6</literal></expr>:</case> <comment type="block" pos:start="413:21" pos:end="413:30">/* VBIT */</comment>

                <expr_stmt pos:start="415:17" pos:end="415:47"><expr pos:start="415:17" pos:end="415:46"><name pos:start="415:17" pos:end="415:20">tmp3</name> <operator pos:start="415:22" pos:end="415:22">=</operator> <call pos:start="415:24" pos:end="415:46"><name pos:start="415:24" pos:end="415:36">neon_load_reg</name><argument_list pos:start="415:37" pos:end="415:46">(<argument pos:start="415:38" pos:end="415:39"><expr pos:start="415:38" pos:end="415:39"><name pos:start="415:38" pos:end="415:39">rd</name></expr></argument>, <argument pos:start="415:42" pos:end="415:45"><expr pos:start="415:42" pos:end="415:45"><name pos:start="415:42" pos:end="415:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="417:17" pos:end="417:51"><expr pos:start="417:17" pos:end="417:50"><call pos:start="417:17" pos:end="417:50"><name pos:start="417:17" pos:end="417:28">gen_neon_bsl</name><argument_list pos:start="417:29" pos:end="417:50">(<argument pos:start="417:30" pos:end="417:32"><expr pos:start="417:30" pos:end="417:32"><name pos:start="417:30" pos:end="417:32">tmp</name></expr></argument>, <argument pos:start="417:35" pos:end="417:37"><expr pos:start="417:35" pos:end="417:37"><name pos:start="417:35" pos:end="417:37">tmp</name></expr></argument>, <argument pos:start="417:40" pos:end="417:43"><expr pos:start="417:40" pos:end="417:43"><name pos:start="417:40" pos:end="417:43">tmp3</name></expr></argument>, <argument pos:start="417:46" pos:end="417:49"><expr pos:start="417:46" pos:end="417:49"><name pos:start="417:46" pos:end="417:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:40"><expr pos:start="419:17" pos:end="419:39"><call pos:start="419:17" pos:end="419:39"><name pos:start="419:17" pos:end="419:33">tcg_temp_free_i32</name><argument_list pos:start="419:34" pos:end="419:39">(<argument pos:start="419:35" pos:end="419:38"><expr pos:start="419:35" pos:end="419:38"><name pos:start="419:35" pos:end="419:38">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="421:17" pos:end="421:22">break;</break>

            <case pos:start="423:13" pos:end="423:19">case <expr pos:start="423:18" pos:end="423:18"><literal type="number" pos:start="423:18" pos:end="423:18">7</literal></expr>:</case> <comment type="block" pos:start="423:21" pos:end="423:30">/* VBIF */</comment>

                <expr_stmt pos:start="425:17" pos:end="425:47"><expr pos:start="425:17" pos:end="425:46"><name pos:start="425:17" pos:end="425:20">tmp3</name> <operator pos:start="425:22" pos:end="425:22">=</operator> <call pos:start="425:24" pos:end="425:46"><name pos:start="425:24" pos:end="425:36">neon_load_reg</name><argument_list pos:start="425:37" pos:end="425:46">(<argument pos:start="425:38" pos:end="425:39"><expr pos:start="425:38" pos:end="425:39"><name pos:start="425:38" pos:end="425:39">rd</name></expr></argument>, <argument pos:start="425:42" pos:end="425:45"><expr pos:start="425:42" pos:end="425:45"><name pos:start="425:42" pos:end="425:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="427:17" pos:end="427:51"><expr pos:start="427:17" pos:end="427:50"><call pos:start="427:17" pos:end="427:50"><name pos:start="427:17" pos:end="427:28">gen_neon_bsl</name><argument_list pos:start="427:29" pos:end="427:50">(<argument pos:start="427:30" pos:end="427:32"><expr pos:start="427:30" pos:end="427:32"><name pos:start="427:30" pos:end="427:32">tmp</name></expr></argument>, <argument pos:start="427:35" pos:end="427:38"><expr pos:start="427:35" pos:end="427:38"><name pos:start="427:35" pos:end="427:38">tmp3</name></expr></argument>, <argument pos:start="427:41" pos:end="427:43"><expr pos:start="427:41" pos:end="427:43"><name pos:start="427:41" pos:end="427:43">tmp</name></expr></argument>, <argument pos:start="427:46" pos:end="427:49"><expr pos:start="427:46" pos:end="427:49"><name pos:start="427:46" pos:end="427:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="429:17" pos:end="429:40"><expr pos:start="429:17" pos:end="429:39"><call pos:start="429:17" pos:end="429:39"><name pos:start="429:17" pos:end="429:33">tcg_temp_free_i32</name><argument_list pos:start="429:34" pos:end="429:39">(<argument pos:start="429:35" pos:end="429:38"><expr pos:start="429:35" pos:end="429:38"><name pos:start="429:35" pos:end="429:38">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="431:17" pos:end="431:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="435:13" pos:end="435:18">break;</break>

        <case pos:start="437:9" pos:end="437:27">case <expr pos:start="437:14" pos:end="437:26"><name pos:start="437:14" pos:end="437:26">NEON_3R_VHSUB</name></expr>:</case>

            <expr_stmt pos:start="439:13" pos:end="439:38"><expr pos:start="439:13" pos:end="439:37"><call pos:start="439:13" pos:end="439:37"><name pos:start="439:13" pos:end="439:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="439:32" pos:end="439:37">(<argument pos:start="439:33" pos:end="439:36"><expr pos:start="439:33" pos:end="439:36"><name pos:start="439:33" pos:end="439:36">hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="441:13" pos:end="441:18">break;</break>

        <case pos:start="443:9" pos:end="443:27">case <expr pos:start="443:14" pos:end="443:26"><name pos:start="443:14" pos:end="443:26">NEON_3R_VQSUB</name></expr>:</case>

            <expr_stmt pos:start="445:13" pos:end="445:38"><expr pos:start="445:13" pos:end="445:37"><call pos:start="445:13" pos:end="445:37"><name pos:start="445:13" pos:end="445:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="445:32" pos:end="445:37">(<argument pos:start="445:33" pos:end="445:36"><expr pos:start="445:33" pos:end="445:36"><name pos:start="445:33" pos:end="445:36">qsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="447:13" pos:end="447:18">break;</break>

        <case pos:start="449:9" pos:end="449:26">case <expr pos:start="449:14" pos:end="449:25"><name pos:start="449:14" pos:end="449:25">NEON_3R_VCGT</name></expr>:</case>

            <expr_stmt pos:start="451:13" pos:end="451:37"><expr pos:start="451:13" pos:end="451:36"><call pos:start="451:13" pos:end="451:36"><name pos:start="451:13" pos:end="451:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="451:32" pos:end="451:36">(<argument pos:start="451:33" pos:end="451:35"><expr pos:start="451:33" pos:end="451:35"><name pos:start="451:33" pos:end="451:35">cgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="453:13" pos:end="453:18">break;</break>

        <case pos:start="455:9" pos:end="455:26">case <expr pos:start="455:14" pos:end="455:25"><name pos:start="455:14" pos:end="455:25">NEON_3R_VCGE</name></expr>:</case>

            <expr_stmt pos:start="457:13" pos:end="457:37"><expr pos:start="457:13" pos:end="457:36"><call pos:start="457:13" pos:end="457:36"><name pos:start="457:13" pos:end="457:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="457:32" pos:end="457:36">(<argument pos:start="457:33" pos:end="457:35"><expr pos:start="457:33" pos:end="457:35"><name pos:start="457:33" pos:end="457:35">cge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="459:13" pos:end="459:18">break;</break>

        <case pos:start="461:9" pos:end="461:26">case <expr pos:start="461:14" pos:end="461:25"><name pos:start="461:14" pos:end="461:25">NEON_3R_VSHL</name></expr>:</case>

            <expr_stmt pos:start="463:13" pos:end="463:37"><expr pos:start="463:13" pos:end="463:36"><call pos:start="463:13" pos:end="463:36"><name pos:start="463:13" pos:end="463:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="463:32" pos:end="463:36">(<argument pos:start="463:33" pos:end="463:35"><expr pos:start="463:33" pos:end="463:35"><name pos:start="463:33" pos:end="463:35">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="465:13" pos:end="465:18">break;</break>

        <case pos:start="467:9" pos:end="467:27">case <expr pos:start="467:14" pos:end="467:26"><name pos:start="467:14" pos:end="467:26">NEON_3R_VQSHL</name></expr>:</case>

            <expr_stmt pos:start="469:13" pos:end="469:38"><expr pos:start="469:13" pos:end="469:37"><call pos:start="469:13" pos:end="469:37"><name pos:start="469:13" pos:end="469:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="469:32" pos:end="469:37">(<argument pos:start="469:33" pos:end="469:36"><expr pos:start="469:33" pos:end="469:36"><name pos:start="469:33" pos:end="469:36">qshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="471:13" pos:end="471:18">break;</break>

        <case pos:start="473:9" pos:end="473:27">case <expr pos:start="473:14" pos:end="473:26"><name pos:start="473:14" pos:end="473:26">NEON_3R_VRSHL</name></expr>:</case>

            <expr_stmt pos:start="475:13" pos:end="475:38"><expr pos:start="475:13" pos:end="475:37"><call pos:start="475:13" pos:end="475:37"><name pos:start="475:13" pos:end="475:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="475:32" pos:end="475:37">(<argument pos:start="475:33" pos:end="475:36"><expr pos:start="475:33" pos:end="475:36"><name pos:start="475:33" pos:end="475:36">rshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="477:13" pos:end="477:18">break;</break>

        <case pos:start="479:9" pos:end="479:28">case <expr pos:start="479:14" pos:end="479:27"><name pos:start="479:14" pos:end="479:27">NEON_3R_VQRSHL</name></expr>:</case>

            <expr_stmt pos:start="481:13" pos:end="481:39"><expr pos:start="481:13" pos:end="481:38"><call pos:start="481:13" pos:end="481:38"><name pos:start="481:13" pos:end="481:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="481:32" pos:end="481:38">(<argument pos:start="481:33" pos:end="481:37"><expr pos:start="481:33" pos:end="481:37"><name pos:start="481:33" pos:end="481:37">qrshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="483:13" pos:end="483:18">break;</break>

        <case pos:start="485:9" pos:end="485:26">case <expr pos:start="485:14" pos:end="485:25"><name pos:start="485:14" pos:end="485:25">NEON_3R_VMAX</name></expr>:</case>

            <expr_stmt pos:start="487:13" pos:end="487:37"><expr pos:start="487:13" pos:end="487:36"><call pos:start="487:13" pos:end="487:36"><name pos:start="487:13" pos:end="487:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="487:32" pos:end="487:36">(<argument pos:start="487:33" pos:end="487:35"><expr pos:start="487:33" pos:end="487:35"><name pos:start="487:33" pos:end="487:35">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="489:13" pos:end="489:18">break;</break>

        <case pos:start="491:9" pos:end="491:26">case <expr pos:start="491:14" pos:end="491:25"><name pos:start="491:14" pos:end="491:25">NEON_3R_VMIN</name></expr>:</case>

            <expr_stmt pos:start="493:13" pos:end="493:37"><expr pos:start="493:13" pos:end="493:36"><call pos:start="493:13" pos:end="493:36"><name pos:start="493:13" pos:end="493:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="493:32" pos:end="493:36">(<argument pos:start="493:33" pos:end="493:35"><expr pos:start="493:33" pos:end="493:35"><name pos:start="493:33" pos:end="493:35">min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="495:13" pos:end="495:18">break;</break>

        <case pos:start="497:9" pos:end="497:26">case <expr pos:start="497:14" pos:end="497:25"><name pos:start="497:14" pos:end="497:25">NEON_3R_VABD</name></expr>:</case>

            <expr_stmt pos:start="499:13" pos:end="499:37"><expr pos:start="499:13" pos:end="499:36"><call pos:start="499:13" pos:end="499:36"><name pos:start="499:13" pos:end="499:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="499:32" pos:end="499:36">(<argument pos:start="499:33" pos:end="499:35"><expr pos:start="499:33" pos:end="499:35"><name pos:start="499:33" pos:end="499:35">abd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="501:13" pos:end="501:18">break;</break>

        <case pos:start="503:9" pos:end="503:26">case <expr pos:start="503:14" pos:end="503:25"><name pos:start="503:14" pos:end="503:25">NEON_3R_VABA</name></expr>:</case>

            <expr_stmt pos:start="505:13" pos:end="505:37"><expr pos:start="505:13" pos:end="505:36"><call pos:start="505:13" pos:end="505:36"><name pos:start="505:13" pos:end="505:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="505:32" pos:end="505:36">(<argument pos:start="505:33" pos:end="505:35"><expr pos:start="505:33" pos:end="505:35"><name pos:start="505:33" pos:end="505:35">abd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:36"><expr pos:start="507:13" pos:end="507:35"><call pos:start="507:13" pos:end="507:35"><name pos:start="507:13" pos:end="507:29">tcg_temp_free_i32</name><argument_list pos:start="507:30" pos:end="507:35">(<argument pos:start="507:31" pos:end="507:34"><expr pos:start="507:31" pos:end="507:34"><name pos:start="507:31" pos:end="507:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:43"><expr pos:start="509:13" pos:end="509:42"><name pos:start="509:13" pos:end="509:16">tmp2</name> <operator pos:start="509:18" pos:end="509:18">=</operator> <call pos:start="509:20" pos:end="509:42"><name pos:start="509:20" pos:end="509:32">neon_load_reg</name><argument_list pos:start="509:33" pos:end="509:42">(<argument pos:start="509:34" pos:end="509:35"><expr pos:start="509:34" pos:end="509:35"><name pos:start="509:34" pos:end="509:35">rd</name></expr></argument>, <argument pos:start="509:38" pos:end="509:41"><expr pos:start="509:38" pos:end="509:41"><name pos:start="509:38" pos:end="509:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:42"><expr pos:start="511:13" pos:end="511:41"><call pos:start="511:13" pos:end="511:41"><name pos:start="511:13" pos:end="511:24">gen_neon_add</name><argument_list pos:start="511:25" pos:end="511:41">(<argument pos:start="511:26" pos:end="511:29"><expr pos:start="511:26" pos:end="511:29"><name pos:start="511:26" pos:end="511:29">size</name></expr></argument>, <argument pos:start="511:32" pos:end="511:34"><expr pos:start="511:32" pos:end="511:34"><name pos:start="511:32" pos:end="511:34">tmp</name></expr></argument>, <argument pos:start="511:37" pos:end="511:40"><expr pos:start="511:37" pos:end="511:40"><name pos:start="511:37" pos:end="511:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="513:13" pos:end="513:18">break;</break>

        <case pos:start="515:9" pos:end="515:31">case <expr pos:start="515:14" pos:end="515:30"><name pos:start="515:14" pos:end="515:30">NEON_3R_VADD_VSUB</name></expr>:</case>

            <if_stmt pos:start="517:13" pos:end="535:13"><if pos:start="517:13" pos:end="521:13">if <condition pos:start="517:16" pos:end="517:19">(<expr pos:start="517:17" pos:end="517:18"><operator pos:start="517:17" pos:end="517:17">!</operator><name pos:start="517:18" pos:end="517:18">u</name></expr>)</condition> <block pos:start="517:21" pos:end="521:13">{<block_content pos:start="519:17" pos:end="519:46"> <comment type="block" pos:start="517:23" pos:end="517:32">/* VADD */</comment>

                <expr_stmt pos:start="519:17" pos:end="519:46"><expr pos:start="519:17" pos:end="519:45"><call pos:start="519:17" pos:end="519:45"><name pos:start="519:17" pos:end="519:28">gen_neon_add</name><argument_list pos:start="519:29" pos:end="519:45">(<argument pos:start="519:30" pos:end="519:33"><expr pos:start="519:30" pos:end="519:33"><name pos:start="519:30" pos:end="519:33">size</name></expr></argument>, <argument pos:start="519:36" pos:end="519:38"><expr pos:start="519:36" pos:end="519:38"><name pos:start="519:36" pos:end="519:38">tmp</name></expr></argument>, <argument pos:start="519:41" pos:end="519:44"><expr pos:start="519:41" pos:end="519:44"><name pos:start="519:41" pos:end="519:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="521:15" pos:end="535:13">else <block pos:start="521:20" pos:end="535:13">{<block_content pos:start="523:17" pos:end="533:17"> <comment type="block" pos:start="521:22" pos:end="521:31">/* VSUB */</comment>

                <switch pos:start="523:17" pos:end="533:17">switch <condition pos:start="523:24" pos:end="523:29">(<expr pos:start="523:25" pos:end="523:28"><name pos:start="523:25" pos:end="523:28">size</name></expr>)</condition> <block pos:start="523:31" pos:end="533:17">{<block_content pos:start="525:17" pos:end="531:33">

                <case pos:start="525:17" pos:end="525:23">case <expr pos:start="525:22" pos:end="525:22"><literal type="number" pos:start="525:22" pos:end="525:22">0</literal></expr>:</case> <expr_stmt pos:start="525:25" pos:end="525:63"><expr pos:start="525:25" pos:end="525:62"><call pos:start="525:25" pos:end="525:62"><name pos:start="525:25" pos:end="525:46">gen_helper_neon_sub_u8</name><argument_list pos:start="525:47" pos:end="525:62">(<argument pos:start="525:48" pos:end="525:50"><expr pos:start="525:48" pos:end="525:50"><name pos:start="525:48" pos:end="525:50">tmp</name></expr></argument>, <argument pos:start="525:53" pos:end="525:55"><expr pos:start="525:53" pos:end="525:55"><name pos:start="525:53" pos:end="525:55">tmp</name></expr></argument>, <argument pos:start="525:58" pos:end="525:61"><expr pos:start="525:58" pos:end="525:61"><name pos:start="525:58" pos:end="525:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="525:65" pos:end="525:70">break;</break>

                <case pos:start="527:17" pos:end="527:23">case <expr pos:start="527:22" pos:end="527:22"><literal type="number" pos:start="527:22" pos:end="527:22">1</literal></expr>:</case> <expr_stmt pos:start="527:25" pos:end="527:64"><expr pos:start="527:25" pos:end="527:63"><call pos:start="527:25" pos:end="527:63"><name pos:start="527:25" pos:end="527:47">gen_helper_neon_sub_u16</name><argument_list pos:start="527:48" pos:end="527:63">(<argument pos:start="527:49" pos:end="527:51"><expr pos:start="527:49" pos:end="527:51"><name pos:start="527:49" pos:end="527:51">tmp</name></expr></argument>, <argument pos:start="527:54" pos:end="527:56"><expr pos:start="527:54" pos:end="527:56"><name pos:start="527:54" pos:end="527:56">tmp</name></expr></argument>, <argument pos:start="527:59" pos:end="527:62"><expr pos:start="527:59" pos:end="527:62"><name pos:start="527:59" pos:end="527:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="527:66" pos:end="527:71">break;</break>

                <case pos:start="529:17" pos:end="529:23">case <expr pos:start="529:22" pos:end="529:22"><literal type="number" pos:start="529:22" pos:end="529:22">2</literal></expr>:</case> <expr_stmt pos:start="529:25" pos:end="529:56"><expr pos:start="529:25" pos:end="529:55"><call pos:start="529:25" pos:end="529:55"><name pos:start="529:25" pos:end="529:39">tcg_gen_sub_i32</name><argument_list pos:start="529:40" pos:end="529:55">(<argument pos:start="529:41" pos:end="529:43"><expr pos:start="529:41" pos:end="529:43"><name pos:start="529:41" pos:end="529:43">tmp</name></expr></argument>, <argument pos:start="529:46" pos:end="529:48"><expr pos:start="529:46" pos:end="529:48"><name pos:start="529:46" pos:end="529:48">tmp</name></expr></argument>, <argument pos:start="529:51" pos:end="529:54"><expr pos:start="529:51" pos:end="529:54"><name pos:start="529:51" pos:end="529:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="529:58" pos:end="529:63">break;</break>

                <default pos:start="531:17" pos:end="531:24">default:</default> <expr_stmt pos:start="531:26" pos:end="531:33"><expr pos:start="531:26" pos:end="531:32"><call pos:start="531:26" pos:end="531:32"><name pos:start="531:26" pos:end="531:30">abort</name><argument_list pos:start="531:31" pos:end="531:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="537:13" pos:end="537:18">break;</break>

        <case pos:start="539:9" pos:end="539:31">case <expr pos:start="539:14" pos:end="539:30"><name pos:start="539:14" pos:end="539:30">NEON_3R_VTST_VCEQ</name></expr>:</case>

            <if_stmt pos:start="541:13" pos:end="569:13"><if pos:start="541:13" pos:end="555:13">if <condition pos:start="541:16" pos:end="541:19">(<expr pos:start="541:17" pos:end="541:18"><operator pos:start="541:17" pos:end="541:17">!</operator><name pos:start="541:18" pos:end="541:18">u</name></expr>)</condition> <block pos:start="541:21" pos:end="555:13">{<block_content pos:start="543:17" pos:end="553:17"> <comment type="block" pos:start="541:23" pos:end="541:32">/* VTST */</comment>

                <switch pos:start="543:17" pos:end="553:17">switch <condition pos:start="543:24" pos:end="543:29">(<expr pos:start="543:25" pos:end="543:28"><name pos:start="543:25" pos:end="543:28">size</name></expr>)</condition> <block pos:start="543:31" pos:end="553:17">{<block_content pos:start="545:17" pos:end="551:33">

                <case pos:start="545:17" pos:end="545:23">case <expr pos:start="545:22" pos:end="545:22"><literal type="number" pos:start="545:22" pos:end="545:22">0</literal></expr>:</case> <expr_stmt pos:start="545:25" pos:end="545:63"><expr pos:start="545:25" pos:end="545:62"><call pos:start="545:25" pos:end="545:62"><name pos:start="545:25" pos:end="545:46">gen_helper_neon_tst_u8</name><argument_list pos:start="545:47" pos:end="545:62">(<argument pos:start="545:48" pos:end="545:50"><expr pos:start="545:48" pos:end="545:50"><name pos:start="545:48" pos:end="545:50">tmp</name></expr></argument>, <argument pos:start="545:53" pos:end="545:55"><expr pos:start="545:53" pos:end="545:55"><name pos:start="545:53" pos:end="545:55">tmp</name></expr></argument>, <argument pos:start="545:58" pos:end="545:61"><expr pos:start="545:58" pos:end="545:61"><name pos:start="545:58" pos:end="545:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="545:65" pos:end="545:70">break;</break>

                <case pos:start="547:17" pos:end="547:23">case <expr pos:start="547:22" pos:end="547:22"><literal type="number" pos:start="547:22" pos:end="547:22">1</literal></expr>:</case> <expr_stmt pos:start="547:25" pos:end="547:64"><expr pos:start="547:25" pos:end="547:63"><call pos:start="547:25" pos:end="547:63"><name pos:start="547:25" pos:end="547:47">gen_helper_neon_tst_u16</name><argument_list pos:start="547:48" pos:end="547:63">(<argument pos:start="547:49" pos:end="547:51"><expr pos:start="547:49" pos:end="547:51"><name pos:start="547:49" pos:end="547:51">tmp</name></expr></argument>, <argument pos:start="547:54" pos:end="547:56"><expr pos:start="547:54" pos:end="547:56"><name pos:start="547:54" pos:end="547:56">tmp</name></expr></argument>, <argument pos:start="547:59" pos:end="547:62"><expr pos:start="547:59" pos:end="547:62"><name pos:start="547:59" pos:end="547:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="547:66" pos:end="547:71">break;</break>

                <case pos:start="549:17" pos:end="549:23">case <expr pos:start="549:22" pos:end="549:22"><literal type="number" pos:start="549:22" pos:end="549:22">2</literal></expr>:</case> <expr_stmt pos:start="549:25" pos:end="549:64"><expr pos:start="549:25" pos:end="549:63"><call pos:start="549:25" pos:end="549:63"><name pos:start="549:25" pos:end="549:47">gen_helper_neon_tst_u32</name><argument_list pos:start="549:48" pos:end="549:63">(<argument pos:start="549:49" pos:end="549:51"><expr pos:start="549:49" pos:end="549:51"><name pos:start="549:49" pos:end="549:51">tmp</name></expr></argument>, <argument pos:start="549:54" pos:end="549:56"><expr pos:start="549:54" pos:end="549:56"><name pos:start="549:54" pos:end="549:56">tmp</name></expr></argument>, <argument pos:start="549:59" pos:end="549:62"><expr pos:start="549:59" pos:end="549:62"><name pos:start="549:59" pos:end="549:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="549:66" pos:end="549:71">break;</break>

                <default pos:start="551:17" pos:end="551:24">default:</default> <expr_stmt pos:start="551:26" pos:end="551:33"><expr pos:start="551:26" pos:end="551:32"><call pos:start="551:26" pos:end="551:32"><name pos:start="551:26" pos:end="551:30">abort</name><argument_list pos:start="551:31" pos:end="551:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="555:15" pos:end="569:13">else <block pos:start="555:20" pos:end="569:13">{<block_content pos:start="557:17" pos:end="567:17"> <comment type="block" pos:start="555:22" pos:end="555:31">/* VCEQ */</comment>

                <switch pos:start="557:17" pos:end="567:17">switch <condition pos:start="557:24" pos:end="557:29">(<expr pos:start="557:25" pos:end="557:28"><name pos:start="557:25" pos:end="557:28">size</name></expr>)</condition> <block pos:start="557:31" pos:end="567:17">{<block_content pos:start="559:17" pos:end="565:33">

                <case pos:start="559:17" pos:end="559:23">case <expr pos:start="559:22" pos:end="559:22"><literal type="number" pos:start="559:22" pos:end="559:22">0</literal></expr>:</case> <expr_stmt pos:start="559:25" pos:end="559:63"><expr pos:start="559:25" pos:end="559:62"><call pos:start="559:25" pos:end="559:62"><name pos:start="559:25" pos:end="559:46">gen_helper_neon_ceq_u8</name><argument_list pos:start="559:47" pos:end="559:62">(<argument pos:start="559:48" pos:end="559:50"><expr pos:start="559:48" pos:end="559:50"><name pos:start="559:48" pos:end="559:50">tmp</name></expr></argument>, <argument pos:start="559:53" pos:end="559:55"><expr pos:start="559:53" pos:end="559:55"><name pos:start="559:53" pos:end="559:55">tmp</name></expr></argument>, <argument pos:start="559:58" pos:end="559:61"><expr pos:start="559:58" pos:end="559:61"><name pos:start="559:58" pos:end="559:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="559:65" pos:end="559:70">break;</break>

                <case pos:start="561:17" pos:end="561:23">case <expr pos:start="561:22" pos:end="561:22"><literal type="number" pos:start="561:22" pos:end="561:22">1</literal></expr>:</case> <expr_stmt pos:start="561:25" pos:end="561:64"><expr pos:start="561:25" pos:end="561:63"><call pos:start="561:25" pos:end="561:63"><name pos:start="561:25" pos:end="561:47">gen_helper_neon_ceq_u16</name><argument_list pos:start="561:48" pos:end="561:63">(<argument pos:start="561:49" pos:end="561:51"><expr pos:start="561:49" pos:end="561:51"><name pos:start="561:49" pos:end="561:51">tmp</name></expr></argument>, <argument pos:start="561:54" pos:end="561:56"><expr pos:start="561:54" pos:end="561:56"><name pos:start="561:54" pos:end="561:56">tmp</name></expr></argument>, <argument pos:start="561:59" pos:end="561:62"><expr pos:start="561:59" pos:end="561:62"><name pos:start="561:59" pos:end="561:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="561:66" pos:end="561:71">break;</break>

                <case pos:start="563:17" pos:end="563:23">case <expr pos:start="563:22" pos:end="563:22"><literal type="number" pos:start="563:22" pos:end="563:22">2</literal></expr>:</case> <expr_stmt pos:start="563:25" pos:end="563:64"><expr pos:start="563:25" pos:end="563:63"><call pos:start="563:25" pos:end="563:63"><name pos:start="563:25" pos:end="563:47">gen_helper_neon_ceq_u32</name><argument_list pos:start="563:48" pos:end="563:63">(<argument pos:start="563:49" pos:end="563:51"><expr pos:start="563:49" pos:end="563:51"><name pos:start="563:49" pos:end="563:51">tmp</name></expr></argument>, <argument pos:start="563:54" pos:end="563:56"><expr pos:start="563:54" pos:end="563:56"><name pos:start="563:54" pos:end="563:56">tmp</name></expr></argument>, <argument pos:start="563:59" pos:end="563:62"><expr pos:start="563:59" pos:end="563:62"><name pos:start="563:59" pos:end="563:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="563:66" pos:end="563:71">break;</break>

                <default pos:start="565:17" pos:end="565:24">default:</default> <expr_stmt pos:start="565:26" pos:end="565:33"><expr pos:start="565:26" pos:end="565:32"><call pos:start="565:26" pos:end="565:32"><name pos:start="565:26" pos:end="565:30">abort</name><argument_list pos:start="565:31" pos:end="565:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="571:13" pos:end="571:18">break;</break>

        <case pos:start="573:9" pos:end="573:25">case <expr pos:start="573:14" pos:end="573:24"><name pos:start="573:14" pos:end="573:24">NEON_3R_VML</name></expr>:</case> <comment type="block" pos:start="573:27" pos:end="573:55">/* VMLA, VMLAL, VMLS,VMLSL */</comment>

            <switch pos:start="575:13" pos:end="585:13">switch <condition pos:start="575:20" pos:end="575:25">(<expr pos:start="575:21" pos:end="575:24"><name pos:start="575:21" pos:end="575:24">size</name></expr>)</condition> <block pos:start="575:27" pos:end="585:13">{<block_content pos:start="577:13" pos:end="583:29">

            <case pos:start="577:13" pos:end="577:19">case <expr pos:start="577:18" pos:end="577:18"><literal type="number" pos:start="577:18" pos:end="577:18">0</literal></expr>:</case> <expr_stmt pos:start="577:21" pos:end="577:59"><expr pos:start="577:21" pos:end="577:58"><call pos:start="577:21" pos:end="577:58"><name pos:start="577:21" pos:end="577:42">gen_helper_neon_mul_u8</name><argument_list pos:start="577:43" pos:end="577:58">(<argument pos:start="577:44" pos:end="577:46"><expr pos:start="577:44" pos:end="577:46"><name pos:start="577:44" pos:end="577:46">tmp</name></expr></argument>, <argument pos:start="577:49" pos:end="577:51"><expr pos:start="577:49" pos:end="577:51"><name pos:start="577:49" pos:end="577:51">tmp</name></expr></argument>, <argument pos:start="577:54" pos:end="577:57"><expr pos:start="577:54" pos:end="577:57"><name pos:start="577:54" pos:end="577:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="577:61" pos:end="577:66">break;</break>

            <case pos:start="579:13" pos:end="579:19">case <expr pos:start="579:18" pos:end="579:18"><literal type="number" pos:start="579:18" pos:end="579:18">1</literal></expr>:</case> <expr_stmt pos:start="579:21" pos:end="579:60"><expr pos:start="579:21" pos:end="579:59"><call pos:start="579:21" pos:end="579:59"><name pos:start="579:21" pos:end="579:43">gen_helper_neon_mul_u16</name><argument_list pos:start="579:44" pos:end="579:59">(<argument pos:start="579:45" pos:end="579:47"><expr pos:start="579:45" pos:end="579:47"><name pos:start="579:45" pos:end="579:47">tmp</name></expr></argument>, <argument pos:start="579:50" pos:end="579:52"><expr pos:start="579:50" pos:end="579:52"><name pos:start="579:50" pos:end="579:52">tmp</name></expr></argument>, <argument pos:start="579:55" pos:end="579:58"><expr pos:start="579:55" pos:end="579:58"><name pos:start="579:55" pos:end="579:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="579:62" pos:end="579:67">break;</break>

            <case pos:start="581:13" pos:end="581:19">case <expr pos:start="581:18" pos:end="581:18"><literal type="number" pos:start="581:18" pos:end="581:18">2</literal></expr>:</case> <expr_stmt pos:start="581:21" pos:end="581:52"><expr pos:start="581:21" pos:end="581:51"><call pos:start="581:21" pos:end="581:51"><name pos:start="581:21" pos:end="581:35">tcg_gen_mul_i32</name><argument_list pos:start="581:36" pos:end="581:51">(<argument pos:start="581:37" pos:end="581:39"><expr pos:start="581:37" pos:end="581:39"><name pos:start="581:37" pos:end="581:39">tmp</name></expr></argument>, <argument pos:start="581:42" pos:end="581:44"><expr pos:start="581:42" pos:end="581:44"><name pos:start="581:42" pos:end="581:44">tmp</name></expr></argument>, <argument pos:start="581:47" pos:end="581:50"><expr pos:start="581:47" pos:end="581:50"><name pos:start="581:47" pos:end="581:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="581:54" pos:end="581:59">break;</break>

            <default pos:start="583:13" pos:end="583:20">default:</default> <expr_stmt pos:start="583:22" pos:end="583:29"><expr pos:start="583:22" pos:end="583:28"><call pos:start="583:22" pos:end="583:28"><name pos:start="583:22" pos:end="583:26">abort</name><argument_list pos:start="583:27" pos:end="583:28">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="587:13" pos:end="587:36"><expr pos:start="587:13" pos:end="587:35"><call pos:start="587:13" pos:end="587:35"><name pos:start="587:13" pos:end="587:29">tcg_temp_free_i32</name><argument_list pos:start="587:30" pos:end="587:35">(<argument pos:start="587:31" pos:end="587:34"><expr pos:start="587:31" pos:end="587:34"><name pos:start="587:31" pos:end="587:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="589:13" pos:end="589:43"><expr pos:start="589:13" pos:end="589:42"><name pos:start="589:13" pos:end="589:16">tmp2</name> <operator pos:start="589:18" pos:end="589:18">=</operator> <call pos:start="589:20" pos:end="589:42"><name pos:start="589:20" pos:end="589:32">neon_load_reg</name><argument_list pos:start="589:33" pos:end="589:42">(<argument pos:start="589:34" pos:end="589:35"><expr pos:start="589:34" pos:end="589:35"><name pos:start="589:34" pos:end="589:35">rd</name></expr></argument>, <argument pos:start="589:38" pos:end="589:41"><expr pos:start="589:38" pos:end="589:41"><name pos:start="589:38" pos:end="589:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="591:13" pos:end="599:13"><if pos:start="591:13" pos:end="595:13">if <condition pos:start="591:16" pos:end="591:18">(<expr pos:start="591:17" pos:end="591:17"><name pos:start="591:17" pos:end="591:17">u</name></expr>)</condition> <block pos:start="591:20" pos:end="595:13">{<block_content pos:start="593:17" pos:end="593:46"> <comment type="block" pos:start="591:22" pos:end="591:31">/* VMLS */</comment>

                <expr_stmt pos:start="593:17" pos:end="593:46"><expr pos:start="593:17" pos:end="593:45"><call pos:start="593:17" pos:end="593:45"><name pos:start="593:17" pos:end="593:28">gen_neon_rsb</name><argument_list pos:start="593:29" pos:end="593:45">(<argument pos:start="593:30" pos:end="593:33"><expr pos:start="593:30" pos:end="593:33"><name pos:start="593:30" pos:end="593:33">size</name></expr></argument>, <argument pos:start="593:36" pos:end="593:38"><expr pos:start="593:36" pos:end="593:38"><name pos:start="593:36" pos:end="593:38">tmp</name></expr></argument>, <argument pos:start="593:41" pos:end="593:44"><expr pos:start="593:41" pos:end="593:44"><name pos:start="593:41" pos:end="593:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="595:15" pos:end="599:13">else <block pos:start="595:20" pos:end="599:13">{<block_content pos:start="597:17" pos:end="597:46"> <comment type="block" pos:start="595:22" pos:end="595:31">/* VMLA */</comment>

                <expr_stmt pos:start="597:17" pos:end="597:46"><expr pos:start="597:17" pos:end="597:45"><call pos:start="597:17" pos:end="597:45"><name pos:start="597:17" pos:end="597:28">gen_neon_add</name><argument_list pos:start="597:29" pos:end="597:45">(<argument pos:start="597:30" pos:end="597:33"><expr pos:start="597:30" pos:end="597:33"><name pos:start="597:30" pos:end="597:33">size</name></expr></argument>, <argument pos:start="597:36" pos:end="597:38"><expr pos:start="597:36" pos:end="597:38"><name pos:start="597:36" pos:end="597:38">tmp</name></expr></argument>, <argument pos:start="597:41" pos:end="597:44"><expr pos:start="597:41" pos:end="597:44"><name pos:start="597:41" pos:end="597:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="601:13" pos:end="601:18">break;</break>

        <case pos:start="603:9" pos:end="603:26">case <expr pos:start="603:14" pos:end="603:25"><name pos:start="603:14" pos:end="603:25">NEON_3R_VMUL</name></expr>:</case>

            <if_stmt pos:start="605:13" pos:end="623:13"><if pos:start="605:13" pos:end="609:13">if <condition pos:start="605:16" pos:end="605:18">(<expr pos:start="605:17" pos:end="605:17"><name pos:start="605:17" pos:end="605:17">u</name></expr>)</condition> <block pos:start="605:20" pos:end="609:13">{<block_content pos:start="607:17" pos:end="607:55"> <comment type="block" pos:start="605:22" pos:end="605:37">/* polynomial */</comment>

                <expr_stmt pos:start="607:17" pos:end="607:55"><expr pos:start="607:17" pos:end="607:54"><call pos:start="607:17" pos:end="607:54"><name pos:start="607:17" pos:end="607:38">gen_helper_neon_mul_p8</name><argument_list pos:start="607:39" pos:end="607:54">(<argument pos:start="607:40" pos:end="607:42"><expr pos:start="607:40" pos:end="607:42"><name pos:start="607:40" pos:end="607:42">tmp</name></expr></argument>, <argument pos:start="607:45" pos:end="607:47"><expr pos:start="607:45" pos:end="607:47"><name pos:start="607:45" pos:end="607:47">tmp</name></expr></argument>, <argument pos:start="607:50" pos:end="607:53"><expr pos:start="607:50" pos:end="607:53"><name pos:start="607:50" pos:end="607:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="609:15" pos:end="623:13">else <block pos:start="609:20" pos:end="623:13">{<block_content pos:start="611:17" pos:end="621:17"> <comment type="block" pos:start="609:22" pos:end="609:34">/* Integer */</comment>

                <switch pos:start="611:17" pos:end="621:17">switch <condition pos:start="611:24" pos:end="611:29">(<expr pos:start="611:25" pos:end="611:28"><name pos:start="611:25" pos:end="611:28">size</name></expr>)</condition> <block pos:start="611:31" pos:end="621:17">{<block_content pos:start="613:17" pos:end="619:33">

                <case pos:start="613:17" pos:end="613:23">case <expr pos:start="613:22" pos:end="613:22"><literal type="number" pos:start="613:22" pos:end="613:22">0</literal></expr>:</case> <expr_stmt pos:start="613:25" pos:end="613:63"><expr pos:start="613:25" pos:end="613:62"><call pos:start="613:25" pos:end="613:62"><name pos:start="613:25" pos:end="613:46">gen_helper_neon_mul_u8</name><argument_list pos:start="613:47" pos:end="613:62">(<argument pos:start="613:48" pos:end="613:50"><expr pos:start="613:48" pos:end="613:50"><name pos:start="613:48" pos:end="613:50">tmp</name></expr></argument>, <argument pos:start="613:53" pos:end="613:55"><expr pos:start="613:53" pos:end="613:55"><name pos:start="613:53" pos:end="613:55">tmp</name></expr></argument>, <argument pos:start="613:58" pos:end="613:61"><expr pos:start="613:58" pos:end="613:61"><name pos:start="613:58" pos:end="613:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="613:65" pos:end="613:70">break;</break>

                <case pos:start="615:17" pos:end="615:23">case <expr pos:start="615:22" pos:end="615:22"><literal type="number" pos:start="615:22" pos:end="615:22">1</literal></expr>:</case> <expr_stmt pos:start="615:25" pos:end="615:64"><expr pos:start="615:25" pos:end="615:63"><call pos:start="615:25" pos:end="615:63"><name pos:start="615:25" pos:end="615:47">gen_helper_neon_mul_u16</name><argument_list pos:start="615:48" pos:end="615:63">(<argument pos:start="615:49" pos:end="615:51"><expr pos:start="615:49" pos:end="615:51"><name pos:start="615:49" pos:end="615:51">tmp</name></expr></argument>, <argument pos:start="615:54" pos:end="615:56"><expr pos:start="615:54" pos:end="615:56"><name pos:start="615:54" pos:end="615:56">tmp</name></expr></argument>, <argument pos:start="615:59" pos:end="615:62"><expr pos:start="615:59" pos:end="615:62"><name pos:start="615:59" pos:end="615:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="615:66" pos:end="615:71">break;</break>

                <case pos:start="617:17" pos:end="617:23">case <expr pos:start="617:22" pos:end="617:22"><literal type="number" pos:start="617:22" pos:end="617:22">2</literal></expr>:</case> <expr_stmt pos:start="617:25" pos:end="617:56"><expr pos:start="617:25" pos:end="617:55"><call pos:start="617:25" pos:end="617:55"><name pos:start="617:25" pos:end="617:39">tcg_gen_mul_i32</name><argument_list pos:start="617:40" pos:end="617:55">(<argument pos:start="617:41" pos:end="617:43"><expr pos:start="617:41" pos:end="617:43"><name pos:start="617:41" pos:end="617:43">tmp</name></expr></argument>, <argument pos:start="617:46" pos:end="617:48"><expr pos:start="617:46" pos:end="617:48"><name pos:start="617:46" pos:end="617:48">tmp</name></expr></argument>, <argument pos:start="617:51" pos:end="617:54"><expr pos:start="617:51" pos:end="617:54"><name pos:start="617:51" pos:end="617:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="617:58" pos:end="617:63">break;</break>

                <default pos:start="619:17" pos:end="619:24">default:</default> <expr_stmt pos:start="619:26" pos:end="619:33"><expr pos:start="619:26" pos:end="619:32"><call pos:start="619:26" pos:end="619:32"><name pos:start="619:26" pos:end="619:30">abort</name><argument_list pos:start="619:31" pos:end="619:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="625:13" pos:end="625:18">break;</break>

        <case pos:start="627:9" pos:end="627:27">case <expr pos:start="627:14" pos:end="627:26"><name pos:start="627:14" pos:end="627:26">NEON_3R_VPMAX</name></expr>:</case>

            <expr_stmt pos:start="629:13" pos:end="629:38"><expr pos:start="629:13" pos:end="629:37"><call pos:start="629:13" pos:end="629:37"><name pos:start="629:13" pos:end="629:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="629:32" pos:end="629:37">(<argument pos:start="629:33" pos:end="629:36"><expr pos:start="629:33" pos:end="629:36"><name pos:start="629:33" pos:end="629:36">pmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="631:13" pos:end="631:18">break;</break>

        <case pos:start="633:9" pos:end="633:27">case <expr pos:start="633:14" pos:end="633:26"><name pos:start="633:14" pos:end="633:26">NEON_3R_VPMIN</name></expr>:</case>

            <expr_stmt pos:start="635:13" pos:end="635:38"><expr pos:start="635:13" pos:end="635:37"><call pos:start="635:13" pos:end="635:37"><name pos:start="635:13" pos:end="635:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="635:32" pos:end="635:37">(<argument pos:start="635:33" pos:end="635:36"><expr pos:start="635:33" pos:end="635:36"><name pos:start="635:33" pos:end="635:36">pmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="637:13" pos:end="637:18">break;</break>

        <case pos:start="639:9" pos:end="639:38">case <expr pos:start="639:14" pos:end="639:37"><name pos:start="639:14" pos:end="639:37">NEON_3R_VQDMULH_VQRDMULH</name></expr>:</case> <comment type="block" pos:start="639:40" pos:end="639:60">/* Multiply high.  */</comment>

            <if_stmt pos:start="641:13" pos:end="665:13"><if pos:start="641:13" pos:end="653:13">if <condition pos:start="641:16" pos:end="641:19">(<expr pos:start="641:17" pos:end="641:18"><operator pos:start="641:17" pos:end="641:17">!</operator><name pos:start="641:18" pos:end="641:18">u</name></expr>)</condition> <block pos:start="641:21" pos:end="653:13">{<block_content pos:start="643:17" pos:end="651:17"> <comment type="block" pos:start="641:23" pos:end="641:35">/* VQDMULH */</comment>

                <switch pos:start="643:17" pos:end="651:17">switch <condition pos:start="643:24" pos:end="643:29">(<expr pos:start="643:25" pos:end="643:28"><name pos:start="643:25" pos:end="643:28">size</name></expr>)</condition> <block pos:start="643:31" pos:end="651:17">{<block_content pos:start="645:17" pos:end="649:33">

                <case pos:start="645:17" pos:end="645:23">case <expr pos:start="645:22" pos:end="645:22"><literal type="number" pos:start="645:22" pos:end="645:22">1</literal></expr>:</case> <expr_stmt pos:start="645:25" pos:end="645:67"><expr pos:start="645:25" pos:end="645:66"><call pos:start="645:25" pos:end="645:66"><name pos:start="645:25" pos:end="645:50">gen_helper_neon_qdmulh_s16</name><argument_list pos:start="645:51" pos:end="645:66">(<argument pos:start="645:52" pos:end="645:54"><expr pos:start="645:52" pos:end="645:54"><name pos:start="645:52" pos:end="645:54">tmp</name></expr></argument>, <argument pos:start="645:57" pos:end="645:59"><expr pos:start="645:57" pos:end="645:59"><name pos:start="645:57" pos:end="645:59">tmp</name></expr></argument>, <argument pos:start="645:62" pos:end="645:65"><expr pos:start="645:62" pos:end="645:65"><name pos:start="645:62" pos:end="645:65">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="645:69" pos:end="645:74">break;</break>

                <case pos:start="647:17" pos:end="647:23">case <expr pos:start="647:22" pos:end="647:22"><literal type="number" pos:start="647:22" pos:end="647:22">2</literal></expr>:</case> <expr_stmt pos:start="647:25" pos:end="647:67"><expr pos:start="647:25" pos:end="647:66"><call pos:start="647:25" pos:end="647:66"><name pos:start="647:25" pos:end="647:50">gen_helper_neon_qdmulh_s32</name><argument_list pos:start="647:51" pos:end="647:66">(<argument pos:start="647:52" pos:end="647:54"><expr pos:start="647:52" pos:end="647:54"><name pos:start="647:52" pos:end="647:54">tmp</name></expr></argument>, <argument pos:start="647:57" pos:end="647:59"><expr pos:start="647:57" pos:end="647:59"><name pos:start="647:57" pos:end="647:59">tmp</name></expr></argument>, <argument pos:start="647:62" pos:end="647:65"><expr pos:start="647:62" pos:end="647:65"><name pos:start="647:62" pos:end="647:65">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="647:69" pos:end="647:74">break;</break>

                <default pos:start="649:17" pos:end="649:24">default:</default> <expr_stmt pos:start="649:26" pos:end="649:33"><expr pos:start="649:26" pos:end="649:32"><call pos:start="649:26" pos:end="649:32"><name pos:start="649:26" pos:end="649:30">abort</name><argument_list pos:start="649:31" pos:end="649:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="653:15" pos:end="665:13">else <block pos:start="653:20" pos:end="665:13">{<block_content pos:start="655:17" pos:end="663:17"> <comment type="block" pos:start="653:22" pos:end="653:35">/* VQRDMULH */</comment>

                <switch pos:start="655:17" pos:end="663:17">switch <condition pos:start="655:24" pos:end="655:29">(<expr pos:start="655:25" pos:end="655:28"><name pos:start="655:25" pos:end="655:28">size</name></expr>)</condition> <block pos:start="655:31" pos:end="663:17">{<block_content pos:start="657:17" pos:end="661:33">

                <case pos:start="657:17" pos:end="657:23">case <expr pos:start="657:22" pos:end="657:22"><literal type="number" pos:start="657:22" pos:end="657:22">1</literal></expr>:</case> <expr_stmt pos:start="657:25" pos:end="657:68"><expr pos:start="657:25" pos:end="657:67"><call pos:start="657:25" pos:end="657:67"><name pos:start="657:25" pos:end="657:51">gen_helper_neon_qrdmulh_s16</name><argument_list pos:start="657:52" pos:end="657:67">(<argument pos:start="657:53" pos:end="657:55"><expr pos:start="657:53" pos:end="657:55"><name pos:start="657:53" pos:end="657:55">tmp</name></expr></argument>, <argument pos:start="657:58" pos:end="657:60"><expr pos:start="657:58" pos:end="657:60"><name pos:start="657:58" pos:end="657:60">tmp</name></expr></argument>, <argument pos:start="657:63" pos:end="657:66"><expr pos:start="657:63" pos:end="657:66"><name pos:start="657:63" pos:end="657:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="657:70" pos:end="657:75">break;</break>

                <case pos:start="659:17" pos:end="659:23">case <expr pos:start="659:22" pos:end="659:22"><literal type="number" pos:start="659:22" pos:end="659:22">2</literal></expr>:</case> <expr_stmt pos:start="659:25" pos:end="659:68"><expr pos:start="659:25" pos:end="659:67"><call pos:start="659:25" pos:end="659:67"><name pos:start="659:25" pos:end="659:51">gen_helper_neon_qrdmulh_s32</name><argument_list pos:start="659:52" pos:end="659:67">(<argument pos:start="659:53" pos:end="659:55"><expr pos:start="659:53" pos:end="659:55"><name pos:start="659:53" pos:end="659:55">tmp</name></expr></argument>, <argument pos:start="659:58" pos:end="659:60"><expr pos:start="659:58" pos:end="659:60"><name pos:start="659:58" pos:end="659:60">tmp</name></expr></argument>, <argument pos:start="659:63" pos:end="659:66"><expr pos:start="659:63" pos:end="659:66"><name pos:start="659:63" pos:end="659:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="659:70" pos:end="659:75">break;</break>

                <default pos:start="661:17" pos:end="661:24">default:</default> <expr_stmt pos:start="661:26" pos:end="661:33"><expr pos:start="661:26" pos:end="661:32"><call pos:start="661:26" pos:end="661:32"><name pos:start="661:26" pos:end="661:30">abort</name><argument_list pos:start="661:31" pos:end="661:32">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="667:13" pos:end="667:18">break;</break>

        <case pos:start="669:9" pos:end="669:27">case <expr pos:start="669:14" pos:end="669:26"><name pos:start="669:14" pos:end="669:26">NEON_3R_VPADD</name></expr>:</case>

            <switch pos:start="671:13" pos:end="681:13">switch <condition pos:start="671:20" pos:end="671:25">(<expr pos:start="671:21" pos:end="671:24"><name pos:start="671:21" pos:end="671:24">size</name></expr>)</condition> <block pos:start="671:27" pos:end="681:13">{<block_content pos:start="673:13" pos:end="679:29">

            <case pos:start="673:13" pos:end="673:19">case <expr pos:start="673:18" pos:end="673:18"><literal type="number" pos:start="673:18" pos:end="673:18">0</literal></expr>:</case> <expr_stmt pos:start="673:21" pos:end="673:60"><expr pos:start="673:21" pos:end="673:59"><call pos:start="673:21" pos:end="673:59"><name pos:start="673:21" pos:end="673:43">gen_helper_neon_padd_u8</name><argument_list pos:start="673:44" pos:end="673:59">(<argument pos:start="673:45" pos:end="673:47"><expr pos:start="673:45" pos:end="673:47"><name pos:start="673:45" pos:end="673:47">tmp</name></expr></argument>, <argument pos:start="673:50" pos:end="673:52"><expr pos:start="673:50" pos:end="673:52"><name pos:start="673:50" pos:end="673:52">tmp</name></expr></argument>, <argument pos:start="673:55" pos:end="673:58"><expr pos:start="673:55" pos:end="673:58"><name pos:start="673:55" pos:end="673:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="673:62" pos:end="673:67">break;</break>

            <case pos:start="675:13" pos:end="675:19">case <expr pos:start="675:18" pos:end="675:18"><literal type="number" pos:start="675:18" pos:end="675:18">1</literal></expr>:</case> <expr_stmt pos:start="675:21" pos:end="675:61"><expr pos:start="675:21" pos:end="675:60"><call pos:start="675:21" pos:end="675:60"><name pos:start="675:21" pos:end="675:44">gen_helper_neon_padd_u16</name><argument_list pos:start="675:45" pos:end="675:60">(<argument pos:start="675:46" pos:end="675:48"><expr pos:start="675:46" pos:end="675:48"><name pos:start="675:46" pos:end="675:48">tmp</name></expr></argument>, <argument pos:start="675:51" pos:end="675:53"><expr pos:start="675:51" pos:end="675:53"><name pos:start="675:51" pos:end="675:53">tmp</name></expr></argument>, <argument pos:start="675:56" pos:end="675:59"><expr pos:start="675:56" pos:end="675:59"><name pos:start="675:56" pos:end="675:59">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="675:63" pos:end="675:68">break;</break>

            <case pos:start="677:13" pos:end="677:19">case <expr pos:start="677:18" pos:end="677:18"><literal type="number" pos:start="677:18" pos:end="677:18">2</literal></expr>:</case> <expr_stmt pos:start="677:21" pos:end="677:52"><expr pos:start="677:21" pos:end="677:51"><call pos:start="677:21" pos:end="677:51"><name pos:start="677:21" pos:end="677:35">tcg_gen_add_i32</name><argument_list pos:start="677:36" pos:end="677:51">(<argument pos:start="677:37" pos:end="677:39"><expr pos:start="677:37" pos:end="677:39"><name pos:start="677:37" pos:end="677:39">tmp</name></expr></argument>, <argument pos:start="677:42" pos:end="677:44"><expr pos:start="677:42" pos:end="677:44"><name pos:start="677:42" pos:end="677:44">tmp</name></expr></argument>, <argument pos:start="677:47" pos:end="677:50"><expr pos:start="677:47" pos:end="677:50"><name pos:start="677:47" pos:end="677:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="677:54" pos:end="677:59">break;</break>

            <default pos:start="679:13" pos:end="679:20">default:</default> <expr_stmt pos:start="679:22" pos:end="679:29"><expr pos:start="679:22" pos:end="679:28"><call pos:start="679:22" pos:end="679:28"><name pos:start="679:22" pos:end="679:26">abort</name><argument_list pos:start="679:27" pos:end="679:28">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <break pos:start="683:13" pos:end="683:18">break;</break>

        <case pos:start="685:9" pos:end="685:33">case <expr pos:start="685:14" pos:end="685:32"><name pos:start="685:14" pos:end="685:32">NEON_3R_FLOAT_ARITH</name></expr>:</case> <comment type="block" pos:start="685:35" pos:end="685:66">/* Floating point arithmetic. */</comment>

            <switch pos:start="687:13" pos:end="717:13">switch <condition pos:start="687:20" pos:end="687:36">(<expr pos:start="687:21" pos:end="687:35"><operator pos:start="687:21" pos:end="687:21">(</operator><name pos:start="687:22" pos:end="687:22">u</name> <operator pos:start="687:24" pos:end="687:25">&lt;&lt;</operator> <literal type="number" pos:start="687:27" pos:end="687:27">2</literal><operator pos:start="687:28" pos:end="687:28">)</operator> <operator pos:start="687:30" pos:end="687:30">|</operator> <name pos:start="687:32" pos:end="687:35">size</name></expr>)</condition> <block pos:start="687:38" pos:end="717:13">{<block_content pos:start="689:13" pos:end="715:24">

            <case pos:start="689:13" pos:end="689:19">case <expr pos:start="689:18" pos:end="689:18"><literal type="number" pos:start="689:18" pos:end="689:18">0</literal></expr>:</case> <comment type="block" pos:start="689:21" pos:end="689:30">/* VADD */</comment>

                <expr_stmt pos:start="691:17" pos:end="691:56"><expr pos:start="691:17" pos:end="691:55"><call pos:start="691:17" pos:end="691:55"><name pos:start="691:17" pos:end="691:39">gen_helper_neon_add_f32</name><argument_list pos:start="691:40" pos:end="691:55">(<argument pos:start="691:41" pos:end="691:43"><expr pos:start="691:41" pos:end="691:43"><name pos:start="691:41" pos:end="691:43">tmp</name></expr></argument>, <argument pos:start="691:46" pos:end="691:48"><expr pos:start="691:46" pos:end="691:48"><name pos:start="691:46" pos:end="691:48">tmp</name></expr></argument>, <argument pos:start="691:51" pos:end="691:54"><expr pos:start="691:51" pos:end="691:54"><name pos:start="691:51" pos:end="691:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="693:17" pos:end="693:22">break;</break>

            <case pos:start="695:13" pos:end="695:19">case <expr pos:start="695:18" pos:end="695:18"><literal type="number" pos:start="695:18" pos:end="695:18">2</literal></expr>:</case> <comment type="block" pos:start="695:21" pos:end="695:30">/* VSUB */</comment>

                <expr_stmt pos:start="697:17" pos:end="697:56"><expr pos:start="697:17" pos:end="697:55"><call pos:start="697:17" pos:end="697:55"><name pos:start="697:17" pos:end="697:39">gen_helper_neon_sub_f32</name><argument_list pos:start="697:40" pos:end="697:55">(<argument pos:start="697:41" pos:end="697:43"><expr pos:start="697:41" pos:end="697:43"><name pos:start="697:41" pos:end="697:43">tmp</name></expr></argument>, <argument pos:start="697:46" pos:end="697:48"><expr pos:start="697:46" pos:end="697:48"><name pos:start="697:46" pos:end="697:48">tmp</name></expr></argument>, <argument pos:start="697:51" pos:end="697:54"><expr pos:start="697:51" pos:end="697:54"><name pos:start="697:51" pos:end="697:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="699:17" pos:end="699:22">break;</break>

            <case pos:start="701:13" pos:end="701:19">case <expr pos:start="701:18" pos:end="701:18"><literal type="number" pos:start="701:18" pos:end="701:18">4</literal></expr>:</case> <comment type="block" pos:start="701:21" pos:end="701:31">/* VPADD */</comment>

                <expr_stmt pos:start="703:17" pos:end="703:56"><expr pos:start="703:17" pos:end="703:55"><call pos:start="703:17" pos:end="703:55"><name pos:start="703:17" pos:end="703:39">gen_helper_neon_add_f32</name><argument_list pos:start="703:40" pos:end="703:55">(<argument pos:start="703:41" pos:end="703:43"><expr pos:start="703:41" pos:end="703:43"><name pos:start="703:41" pos:end="703:43">tmp</name></expr></argument>, <argument pos:start="703:46" pos:end="703:48"><expr pos:start="703:46" pos:end="703:48"><name pos:start="703:46" pos:end="703:48">tmp</name></expr></argument>, <argument pos:start="703:51" pos:end="703:54"><expr pos:start="703:51" pos:end="703:54"><name pos:start="703:51" pos:end="703:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="705:17" pos:end="705:22">break;</break>

            <case pos:start="707:13" pos:end="707:19">case <expr pos:start="707:18" pos:end="707:18"><literal type="number" pos:start="707:18" pos:end="707:18">6</literal></expr>:</case> <comment type="block" pos:start="707:21" pos:end="707:30">/* VABD */</comment>

                <expr_stmt pos:start="709:17" pos:end="709:56"><expr pos:start="709:17" pos:end="709:55"><call pos:start="709:17" pos:end="709:55"><name pos:start="709:17" pos:end="709:39">gen_helper_neon_abd_f32</name><argument_list pos:start="709:40" pos:end="709:55">(<argument pos:start="709:41" pos:end="709:43"><expr pos:start="709:41" pos:end="709:43"><name pos:start="709:41" pos:end="709:43">tmp</name></expr></argument>, <argument pos:start="709:46" pos:end="709:48"><expr pos:start="709:46" pos:end="709:48"><name pos:start="709:46" pos:end="709:48">tmp</name></expr></argument>, <argument pos:start="709:51" pos:end="709:54"><expr pos:start="709:51" pos:end="709:54"><name pos:start="709:51" pos:end="709:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="711:17" pos:end="711:22">break;</break>

            <default pos:start="713:13" pos:end="713:20">default:</default>

                <expr_stmt pos:start="715:17" pos:end="715:24"><expr pos:start="715:17" pos:end="715:23"><call pos:start="715:17" pos:end="715:23"><name pos:start="715:17" pos:end="715:21">abort</name><argument_list pos:start="715:22" pos:end="715:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <break pos:start="719:13" pos:end="719:18">break;</break>

        <case pos:start="721:9" pos:end="721:36">case <expr pos:start="721:14" pos:end="721:35"><name pos:start="721:14" pos:end="721:35">NEON_3R_FLOAT_MULTIPLY</name></expr>:</case>

            <expr_stmt pos:start="723:13" pos:end="723:52"><expr pos:start="723:13" pos:end="723:51"><call pos:start="723:13" pos:end="723:51"><name pos:start="723:13" pos:end="723:35">gen_helper_neon_mul_f32</name><argument_list pos:start="723:36" pos:end="723:51">(<argument pos:start="723:37" pos:end="723:39"><expr pos:start="723:37" pos:end="723:39"><name pos:start="723:37" pos:end="723:39">tmp</name></expr></argument>, <argument pos:start="723:42" pos:end="723:44"><expr pos:start="723:42" pos:end="723:44"><name pos:start="723:42" pos:end="723:44">tmp</name></expr></argument>, <argument pos:start="723:47" pos:end="723:50"><expr pos:start="723:47" pos:end="723:50"><name pos:start="723:47" pos:end="723:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="725:13" pos:end="741:13"><if pos:start="725:13" pos:end="741:13">if <condition pos:start="725:16" pos:end="725:19">(<expr pos:start="725:17" pos:end="725:18"><operator pos:start="725:17" pos:end="725:17">!</operator><name pos:start="725:18" pos:end="725:18">u</name></expr>)</condition> <block pos:start="725:21" pos:end="741:13">{<block_content pos:start="727:17" pos:end="739:17">

                <expr_stmt pos:start="727:17" pos:end="727:40"><expr pos:start="727:17" pos:end="727:39"><call pos:start="727:17" pos:end="727:39"><name pos:start="727:17" pos:end="727:33">tcg_temp_free_i32</name><argument_list pos:start="727:34" pos:end="727:39">(<argument pos:start="727:35" pos:end="727:38"><expr pos:start="727:35" pos:end="727:38"><name pos:start="727:35" pos:end="727:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="729:17" pos:end="729:47"><expr pos:start="729:17" pos:end="729:46"><name pos:start="729:17" pos:end="729:20">tmp2</name> <operator pos:start="729:22" pos:end="729:22">=</operator> <call pos:start="729:24" pos:end="729:46"><name pos:start="729:24" pos:end="729:36">neon_load_reg</name><argument_list pos:start="729:37" pos:end="729:46">(<argument pos:start="729:38" pos:end="729:39"><expr pos:start="729:38" pos:end="729:39"><name pos:start="729:38" pos:end="729:39">rd</name></expr></argument>, <argument pos:start="729:42" pos:end="729:45"><expr pos:start="729:42" pos:end="729:45"><name pos:start="729:42" pos:end="729:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="731:17" pos:end="739:17"><if pos:start="731:17" pos:end="735:17">if <condition pos:start="731:20" pos:end="731:30">(<expr pos:start="731:21" pos:end="731:29"><name pos:start="731:21" pos:end="731:24">size</name> <operator pos:start="731:26" pos:end="731:27">==</operator> <literal type="number" pos:start="731:29" pos:end="731:29">0</literal></expr>)</condition> <block pos:start="731:32" pos:end="735:17">{<block_content pos:start="733:21" pos:end="733:60">

                    <expr_stmt pos:start="733:21" pos:end="733:60"><expr pos:start="733:21" pos:end="733:59"><call pos:start="733:21" pos:end="733:59"><name pos:start="733:21" pos:end="733:43">gen_helper_neon_add_f32</name><argument_list pos:start="733:44" pos:end="733:59">(<argument pos:start="733:45" pos:end="733:47"><expr pos:start="733:45" pos:end="733:47"><name pos:start="733:45" pos:end="733:47">tmp</name></expr></argument>, <argument pos:start="733:50" pos:end="733:52"><expr pos:start="733:50" pos:end="733:52"><name pos:start="733:50" pos:end="733:52">tmp</name></expr></argument>, <argument pos:start="733:55" pos:end="733:58"><expr pos:start="733:55" pos:end="733:58"><name pos:start="733:55" pos:end="733:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="735:19" pos:end="739:17">else <block pos:start="735:24" pos:end="739:17">{<block_content pos:start="737:21" pos:end="737:60">

                    <expr_stmt pos:start="737:21" pos:end="737:60"><expr pos:start="737:21" pos:end="737:59"><call pos:start="737:21" pos:end="737:59"><name pos:start="737:21" pos:end="737:43">gen_helper_neon_sub_f32</name><argument_list pos:start="737:44" pos:end="737:59">(<argument pos:start="737:45" pos:end="737:47"><expr pos:start="737:45" pos:end="737:47"><name pos:start="737:45" pos:end="737:47">tmp</name></expr></argument>, <argument pos:start="737:50" pos:end="737:53"><expr pos:start="737:50" pos:end="737:53"><name pos:start="737:50" pos:end="737:53">tmp2</name></expr></argument>, <argument pos:start="737:56" pos:end="737:58"><expr pos:start="737:56" pos:end="737:58"><name pos:start="737:56" pos:end="737:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="743:13" pos:end="743:18">break;</break>

        <case pos:start="745:9" pos:end="745:31">case <expr pos:start="745:14" pos:end="745:30"><name pos:start="745:14" pos:end="745:30">NEON_3R_FLOAT_CMP</name></expr>:</case>

            <if_stmt pos:start="747:13" pos:end="761:13"><if pos:start="747:13" pos:end="751:13">if <condition pos:start="747:16" pos:end="747:19">(<expr pos:start="747:17" pos:end="747:18"><operator pos:start="747:17" pos:end="747:17">!</operator><name pos:start="747:18" pos:end="747:18">u</name></expr>)</condition> <block pos:start="747:21" pos:end="751:13">{<block_content pos:start="749:17" pos:end="749:56">

                <expr_stmt pos:start="749:17" pos:end="749:56"><expr pos:start="749:17" pos:end="749:55"><call pos:start="749:17" pos:end="749:55"><name pos:start="749:17" pos:end="749:39">gen_helper_neon_ceq_f32</name><argument_list pos:start="749:40" pos:end="749:55">(<argument pos:start="749:41" pos:end="749:43"><expr pos:start="749:41" pos:end="749:43"><name pos:start="749:41" pos:end="749:43">tmp</name></expr></argument>, <argument pos:start="749:46" pos:end="749:48"><expr pos:start="749:46" pos:end="749:48"><name pos:start="749:46" pos:end="749:48">tmp</name></expr></argument>, <argument pos:start="749:51" pos:end="749:54"><expr pos:start="749:51" pos:end="749:54"><name pos:start="749:51" pos:end="749:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="751:15" pos:end="761:13">else <block pos:start="751:20" pos:end="761:13">{<block_content pos:start="753:17" pos:end="759:60">

                <if_stmt pos:start="753:17" pos:end="759:60"><if pos:start="753:17" pos:end="755:60">if <condition pos:start="753:20" pos:end="753:30">(<expr pos:start="753:21" pos:end="753:29"><name pos:start="753:21" pos:end="753:24">size</name> <operator pos:start="753:26" pos:end="753:27">==</operator> <literal type="number" pos:start="753:29" pos:end="753:29">0</literal></expr>)</condition><block type="pseudo" pos:start="755:21" pos:end="755:60"><block_content pos:start="755:21" pos:end="755:60">

                    <expr_stmt pos:start="755:21" pos:end="755:60"><expr pos:start="755:21" pos:end="755:59"><call pos:start="755:21" pos:end="755:59"><name pos:start="755:21" pos:end="755:43">gen_helper_neon_cge_f32</name><argument_list pos:start="755:44" pos:end="755:59">(<argument pos:start="755:45" pos:end="755:47"><expr pos:start="755:45" pos:end="755:47"><name pos:start="755:45" pos:end="755:47">tmp</name></expr></argument>, <argument pos:start="755:50" pos:end="755:52"><expr pos:start="755:50" pos:end="755:52"><name pos:start="755:50" pos:end="755:52">tmp</name></expr></argument>, <argument pos:start="755:55" pos:end="755:58"><expr pos:start="755:55" pos:end="755:58"><name pos:start="755:55" pos:end="755:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="757:17" pos:end="759:60">else<block type="pseudo" pos:start="759:21" pos:end="759:60"><block_content pos:start="759:21" pos:end="759:60">

                    <expr_stmt pos:start="759:21" pos:end="759:60"><expr pos:start="759:21" pos:end="759:59"><call pos:start="759:21" pos:end="759:59"><name pos:start="759:21" pos:end="759:43">gen_helper_neon_cgt_f32</name><argument_list pos:start="759:44" pos:end="759:59">(<argument pos:start="759:45" pos:end="759:47"><expr pos:start="759:45" pos:end="759:47"><name pos:start="759:45" pos:end="759:47">tmp</name></expr></argument>, <argument pos:start="759:50" pos:end="759:52"><expr pos:start="759:50" pos:end="759:52"><name pos:start="759:50" pos:end="759:52">tmp</name></expr></argument>, <argument pos:start="759:55" pos:end="759:58"><expr pos:start="759:55" pos:end="759:58"><name pos:start="759:55" pos:end="759:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="763:13" pos:end="763:18">break;</break>

        <case pos:start="765:9" pos:end="765:32">case <expr pos:start="765:14" pos:end="765:31"><name pos:start="765:14" pos:end="765:31">NEON_3R_FLOAT_ACMP</name></expr>:</case>

            <if_stmt pos:start="767:13" pos:end="773:57"><if pos:start="767:13" pos:end="769:57">if <condition pos:start="767:16" pos:end="767:26">(<expr pos:start="767:17" pos:end="767:25"><name pos:start="767:17" pos:end="767:20">size</name> <operator pos:start="767:22" pos:end="767:23">==</operator> <literal type="number" pos:start="767:25" pos:end="767:25">0</literal></expr>)</condition><block type="pseudo" pos:start="769:17" pos:end="769:57"><block_content pos:start="769:17" pos:end="769:57">

                <expr_stmt pos:start="769:17" pos:end="769:57"><expr pos:start="769:17" pos:end="769:56"><call pos:start="769:17" pos:end="769:56"><name pos:start="769:17" pos:end="769:40">gen_helper_neon_acge_f32</name><argument_list pos:start="769:41" pos:end="769:56">(<argument pos:start="769:42" pos:end="769:44"><expr pos:start="769:42" pos:end="769:44"><name pos:start="769:42" pos:end="769:44">tmp</name></expr></argument>, <argument pos:start="769:47" pos:end="769:49"><expr pos:start="769:47" pos:end="769:49"><name pos:start="769:47" pos:end="769:49">tmp</name></expr></argument>, <argument pos:start="769:52" pos:end="769:55"><expr pos:start="769:52" pos:end="769:55"><name pos:start="769:52" pos:end="769:55">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="771:13" pos:end="773:57">else<block type="pseudo" pos:start="773:17" pos:end="773:57"><block_content pos:start="773:17" pos:end="773:57">

                <expr_stmt pos:start="773:17" pos:end="773:57"><expr pos:start="773:17" pos:end="773:56"><call pos:start="773:17" pos:end="773:56"><name pos:start="773:17" pos:end="773:40">gen_helper_neon_acgt_f32</name><argument_list pos:start="773:41" pos:end="773:56">(<argument pos:start="773:42" pos:end="773:44"><expr pos:start="773:42" pos:end="773:44"><name pos:start="773:42" pos:end="773:44">tmp</name></expr></argument>, <argument pos:start="773:47" pos:end="773:49"><expr pos:start="773:47" pos:end="773:49"><name pos:start="773:47" pos:end="773:49">tmp</name></expr></argument>, <argument pos:start="773:52" pos:end="773:55"><expr pos:start="773:52" pos:end="773:55"><name pos:start="773:52" pos:end="773:55">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="775:13" pos:end="775:18">break;</break>

        <case pos:start="777:9" pos:end="777:34">case <expr pos:start="777:14" pos:end="777:33"><name pos:start="777:14" pos:end="777:33">NEON_3R_FLOAT_MINMAX</name></expr>:</case>

            <if_stmt pos:start="779:13" pos:end="785:56"><if pos:start="779:13" pos:end="781:56">if <condition pos:start="779:16" pos:end="779:26">(<expr pos:start="779:17" pos:end="779:25"><name pos:start="779:17" pos:end="779:20">size</name> <operator pos:start="779:22" pos:end="779:23">==</operator> <literal type="number" pos:start="779:25" pos:end="779:25">0</literal></expr>)</condition><block type="pseudo" pos:start="781:17" pos:end="781:56"><block_content pos:start="781:17" pos:end="781:56">

                <expr_stmt pos:start="781:17" pos:end="781:56"><expr pos:start="781:17" pos:end="781:55"><call pos:start="781:17" pos:end="781:55"><name pos:start="781:17" pos:end="781:39">gen_helper_neon_max_f32</name><argument_list pos:start="781:40" pos:end="781:55">(<argument pos:start="781:41" pos:end="781:43"><expr pos:start="781:41" pos:end="781:43"><name pos:start="781:41" pos:end="781:43">tmp</name></expr></argument>, <argument pos:start="781:46" pos:end="781:48"><expr pos:start="781:46" pos:end="781:48"><name pos:start="781:46" pos:end="781:48">tmp</name></expr></argument>, <argument pos:start="781:51" pos:end="781:54"><expr pos:start="781:51" pos:end="781:54"><name pos:start="781:51" pos:end="781:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="783:13" pos:end="785:56">else<block type="pseudo" pos:start="785:17" pos:end="785:56"><block_content pos:start="785:17" pos:end="785:56">

                <expr_stmt pos:start="785:17" pos:end="785:56"><expr pos:start="785:17" pos:end="785:55"><call pos:start="785:17" pos:end="785:55"><name pos:start="785:17" pos:end="785:39">gen_helper_neon_min_f32</name><argument_list pos:start="785:40" pos:end="785:55">(<argument pos:start="785:41" pos:end="785:43"><expr pos:start="785:41" pos:end="785:43"><name pos:start="785:41" pos:end="785:43">tmp</name></expr></argument>, <argument pos:start="785:46" pos:end="785:48"><expr pos:start="785:46" pos:end="785:48"><name pos:start="785:46" pos:end="785:48">tmp</name></expr></argument>, <argument pos:start="785:51" pos:end="785:54"><expr pos:start="785:51" pos:end="785:54"><name pos:start="785:51" pos:end="785:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="787:13" pos:end="787:18">break;</break>

        <case pos:start="789:9" pos:end="789:36">case <expr pos:start="789:14" pos:end="789:35"><name pos:start="789:14" pos:end="789:35">NEON_3R_VRECPS_VRSQRTS</name></expr>:</case>

            <if_stmt pos:start="791:13" pos:end="797:63"><if pos:start="791:13" pos:end="793:62">if <condition pos:start="791:16" pos:end="791:26">(<expr pos:start="791:17" pos:end="791:25"><name pos:start="791:17" pos:end="791:20">size</name> <operator pos:start="791:22" pos:end="791:23">==</operator> <literal type="number" pos:start="791:25" pos:end="791:25">0</literal></expr>)</condition><block type="pseudo" pos:start="793:17" pos:end="793:62"><block_content pos:start="793:17" pos:end="793:62">

                <expr_stmt pos:start="793:17" pos:end="793:62"><expr pos:start="793:17" pos:end="793:61"><call pos:start="793:17" pos:end="793:61"><name pos:start="793:17" pos:end="793:36">gen_helper_recps_f32</name><argument_list pos:start="793:37" pos:end="793:61">(<argument pos:start="793:38" pos:end="793:40"><expr pos:start="793:38" pos:end="793:40"><name pos:start="793:38" pos:end="793:40">tmp</name></expr></argument>, <argument pos:start="793:43" pos:end="793:45"><expr pos:start="793:43" pos:end="793:45"><name pos:start="793:43" pos:end="793:45">tmp</name></expr></argument>, <argument pos:start="793:48" pos:end="793:51"><expr pos:start="793:48" pos:end="793:51"><name pos:start="793:48" pos:end="793:51">tmp2</name></expr></argument>, <argument pos:start="793:54" pos:end="793:60"><expr pos:start="793:54" pos:end="793:60"><name pos:start="793:54" pos:end="793:60">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="795:13" pos:end="797:63">else<block type="pseudo" pos:start="797:17" pos:end="797:63"><block_content pos:start="797:17" pos:end="797:63">

                <expr_stmt pos:start="797:17" pos:end="797:63"><expr pos:start="797:17" pos:end="797:62"><call pos:start="797:17" pos:end="797:62"><name pos:start="797:17" pos:end="797:37">gen_helper_rsqrts_f32</name><argument_list pos:start="797:38" pos:end="797:62">(<argument pos:start="797:39" pos:end="797:41"><expr pos:start="797:39" pos:end="797:41"><name pos:start="797:39" pos:end="797:41">tmp</name></expr></argument>, <argument pos:start="797:44" pos:end="797:46"><expr pos:start="797:44" pos:end="797:46"><name pos:start="797:44" pos:end="797:46">tmp</name></expr></argument>, <argument pos:start="797:49" pos:end="797:52"><expr pos:start="797:49" pos:end="797:52"><name pos:start="797:49" pos:end="797:52">tmp2</name></expr></argument>, <argument pos:start="797:55" pos:end="797:61"><expr pos:start="797:55" pos:end="797:61"><name pos:start="797:55" pos:end="797:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="799:13" pos:end="799:18">break;</break>

        <default pos:start="801:9" pos:end="801:16">default:</default>

            <expr_stmt pos:start="803:13" pos:end="803:20"><expr pos:start="803:13" pos:end="803:19"><call pos:start="803:13" pos:end="803:19"><name pos:start="803:13" pos:end="803:17">abort</name><argument_list pos:start="803:18" pos:end="803:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="807:9" pos:end="807:32"><expr pos:start="807:9" pos:end="807:31"><call pos:start="807:9" pos:end="807:31"><name pos:start="807:9" pos:end="807:25">tcg_temp_free_i32</name><argument_list pos:start="807:26" pos:end="807:31">(<argument pos:start="807:27" pos:end="807:30"><expr pos:start="807:27" pos:end="807:30"><name pos:start="807:27" pos:end="807:30">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="811:9" pos:end="815:77">/* Save the result.  For elementwise operations we can put it

           straight into the destination register.  For pairwise operations

           we have to be careful to avoid clobbering the source operands.  */</comment>

        <if_stmt pos:start="817:9" pos:end="825:9"><if pos:start="817:9" pos:end="821:9">if <condition pos:start="817:12" pos:end="817:33">(<expr pos:start="817:13" pos:end="817:32"><name pos:start="817:13" pos:end="817:20">pairwise</name> <operator pos:start="817:22" pos:end="817:23">&amp;&amp;</operator> <name pos:start="817:25" pos:end="817:26">rd</name> <operator pos:start="817:28" pos:end="817:29">==</operator> <name pos:start="817:31" pos:end="817:32">rm</name></expr>)</condition> <block pos:start="817:35" pos:end="821:9">{<block_content pos:start="819:13" pos:end="819:42">

            <expr_stmt pos:start="819:13" pos:end="819:42"><expr pos:start="819:13" pos:end="819:41"><call pos:start="819:13" pos:end="819:41"><name pos:start="819:13" pos:end="819:30">neon_store_scratch</name><argument_list pos:start="819:31" pos:end="819:41">(<argument pos:start="819:32" pos:end="819:35"><expr pos:start="819:32" pos:end="819:35"><name pos:start="819:32" pos:end="819:35">pass</name></expr></argument>, <argument pos:start="819:38" pos:end="819:40"><expr pos:start="819:38" pos:end="819:40"><name pos:start="819:38" pos:end="819:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="821:11" pos:end="825:9">else <block pos:start="821:16" pos:end="825:9">{<block_content pos:start="823:13" pos:end="823:42">

            <expr_stmt pos:start="823:13" pos:end="823:42"><expr pos:start="823:13" pos:end="823:41"><call pos:start="823:13" pos:end="823:41"><name pos:start="823:13" pos:end="823:26">neon_store_reg</name><argument_list pos:start="823:27" pos:end="823:41">(<argument pos:start="823:28" pos:end="823:29"><expr pos:start="823:28" pos:end="823:29"><name pos:start="823:28" pos:end="823:29">rd</name></expr></argument>, <argument pos:start="823:32" pos:end="823:35"><expr pos:start="823:32" pos:end="823:35"><name pos:start="823:32" pos:end="823:35">pass</name></expr></argument>, <argument pos:start="823:38" pos:end="823:40"><expr pos:start="823:38" pos:end="823:40"><name pos:start="823:38" pos:end="823:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        </block_content>}</block></for> <comment type="block" pos:start="829:11" pos:end="829:24">/* for pass */</comment>

        <if_stmt pos:start="831:9" pos:end="841:9"><if pos:start="831:9" pos:end="841:9">if <condition pos:start="831:12" pos:end="831:33">(<expr pos:start="831:13" pos:end="831:32"><name pos:start="831:13" pos:end="831:20">pairwise</name> <operator pos:start="831:22" pos:end="831:23">&amp;&amp;</operator> <name pos:start="831:25" pos:end="831:26">rd</name> <operator pos:start="831:28" pos:end="831:29">==</operator> <name pos:start="831:31" pos:end="831:32">rm</name></expr>)</condition> <block pos:start="831:35" pos:end="841:9">{<block_content pos:start="833:13" pos:end="839:13">

            <for pos:start="833:13" pos:end="839:13">for <control pos:start="833:17" pos:end="833:54">(<init pos:start="833:18" pos:end="833:26"><expr pos:start="833:18" pos:end="833:25"><name pos:start="833:18" pos:end="833:21">pass</name> <operator pos:start="833:23" pos:end="833:23">=</operator> <literal type="number" pos:start="833:25" pos:end="833:25">0</literal></expr>;</init> <condition pos:start="833:28" pos:end="833:46"><expr pos:start="833:28" pos:end="833:45"><name pos:start="833:28" pos:end="833:31">pass</name> <operator pos:start="833:33" pos:end="833:33">&lt;</operator> <operator pos:start="833:35" pos:end="833:35">(</operator><ternary pos:start="833:36" pos:end="833:44"><condition pos:start="833:36" pos:end="833:38"><expr pos:start="833:36" pos:end="833:36"><name pos:start="833:36" pos:end="833:36">q</name></expr> ?</condition><then pos:start="833:40" pos:end="833:40"> <expr pos:start="833:40" pos:end="833:40"><literal type="number" pos:start="833:40" pos:end="833:40">4</literal></expr> </then><else pos:start="833:42" pos:end="833:44">: <expr pos:start="833:44" pos:end="833:44"><literal type="number" pos:start="833:44" pos:end="833:44">2</literal></expr></else></ternary><operator pos:start="833:45" pos:end="833:45">)</operator></expr>;</condition> <incr pos:start="833:48" pos:end="833:53"><expr pos:start="833:48" pos:end="833:53"><name pos:start="833:48" pos:end="833:51">pass</name><operator pos:start="833:52" pos:end="833:53">++</operator></expr></incr>)</control> <block pos:start="833:56" pos:end="839:13">{<block_content pos:start="835:17" pos:end="837:46">

                <expr_stmt pos:start="835:17" pos:end="835:46"><expr pos:start="835:17" pos:end="835:45"><name pos:start="835:17" pos:end="835:19">tmp</name> <operator pos:start="835:21" pos:end="835:21">=</operator> <call pos:start="835:23" pos:end="835:45"><name pos:start="835:23" pos:end="835:39">neon_load_scratch</name><argument_list pos:start="835:40" pos:end="835:45">(<argument pos:start="835:41" pos:end="835:44"><expr pos:start="835:41" pos:end="835:44"><name pos:start="835:41" pos:end="835:44">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="837:17" pos:end="837:46"><expr pos:start="837:17" pos:end="837:45"><call pos:start="837:17" pos:end="837:45"><name pos:start="837:17" pos:end="837:30">neon_store_reg</name><argument_list pos:start="837:31" pos:end="837:45">(<argument pos:start="837:32" pos:end="837:33"><expr pos:start="837:32" pos:end="837:33"><name pos:start="837:32" pos:end="837:33">rd</name></expr></argument>, <argument pos:start="837:36" pos:end="837:39"><expr pos:start="837:36" pos:end="837:39"><name pos:start="837:36" pos:end="837:39">pass</name></expr></argument>, <argument pos:start="837:42" pos:end="837:44"><expr pos:start="837:42" pos:end="837:44"><name pos:start="837:42" pos:end="837:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="843:9" pos:end="843:54">/* End of 3 register same size operations.  */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="845:7" pos:end="1699:5">else if <condition pos:start="845:15" pos:end="845:31">(<expr pos:start="845:16" pos:end="845:30"><name pos:start="845:16" pos:end="845:19">insn</name> <operator pos:start="845:21" pos:end="845:21">&amp;</operator> <operator pos:start="845:23" pos:end="845:23">(</operator><literal type="number" pos:start="845:24" pos:end="845:24">1</literal> <operator pos:start="845:26" pos:end="845:27">&lt;&lt;</operator> <literal type="number" pos:start="845:29" pos:end="845:29">4</literal><operator pos:start="845:30" pos:end="845:30">)</operator></expr>)</condition> <block pos:start="845:33" pos:end="1699:5">{<block_content pos:start="847:9" pos:end="1697:9">

        <if_stmt pos:start="847:9" pos:end="1697:9"><if pos:start="847:9" pos:end="1531:9">if <condition pos:start="847:12" pos:end="847:37">(<expr pos:start="847:13" pos:end="847:36"><operator pos:start="847:13" pos:end="847:13">(</operator><name pos:start="847:14" pos:end="847:17">insn</name> <operator pos:start="847:19" pos:end="847:19">&amp;</operator> <literal type="number" pos:start="847:21" pos:end="847:30">0x00380080</literal><operator pos:start="847:31" pos:end="847:31">)</operator> <operator pos:start="847:33" pos:end="847:34">!=</operator> <literal type="number" pos:start="847:36" pos:end="847:36">0</literal></expr>)</condition> <block pos:start="847:39" pos:end="1531:9">{<block_content pos:start="851:13" pos:end="1529:13">

            <comment type="block" pos:start="849:13" pos:end="849:43">/* Two registers and shift.  */</comment>

            <expr_stmt pos:start="851:13" pos:end="851:35"><expr pos:start="851:13" pos:end="851:34"><name pos:start="851:13" pos:end="851:14">op</name> <operator pos:start="851:16" pos:end="851:16">=</operator> <operator pos:start="851:18" pos:end="851:18">(</operator><name pos:start="851:19" pos:end="851:22">insn</name> <operator pos:start="851:24" pos:end="851:25">&gt;&gt;</operator> <literal type="number" pos:start="851:27" pos:end="851:27">8</literal><operator pos:start="851:28" pos:end="851:28">)</operator> <operator pos:start="851:30" pos:end="851:30">&amp;</operator> <literal type="number" pos:start="851:32" pos:end="851:34">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="853:13" pos:end="873:13"><if pos:start="853:13" pos:end="865:13">if <condition pos:start="853:16" pos:end="853:32">(<expr pos:start="853:17" pos:end="853:31"><name pos:start="853:17" pos:end="853:20">insn</name> <operator pos:start="853:22" pos:end="853:22">&amp;</operator> <operator pos:start="853:24" pos:end="853:24">(</operator><literal type="number" pos:start="853:25" pos:end="853:25">1</literal> <operator pos:start="853:27" pos:end="853:28">&lt;&lt;</operator> <literal type="number" pos:start="853:30" pos:end="853:30">7</literal><operator pos:start="853:31" pos:end="853:31">)</operator></expr>)</condition> <block pos:start="853:34" pos:end="865:13">{<block_content pos:start="857:17" pos:end="863:25">

                <comment type="block" pos:start="855:17" pos:end="855:35">/* 64-bit shift. */</comment>

                <if_stmt pos:start="857:17" pos:end="861:17"><if pos:start="857:17" pos:end="861:17">if <condition pos:start="857:20" pos:end="857:27">(<expr pos:start="857:21" pos:end="857:26"><name pos:start="857:21" pos:end="857:22">op</name> <operator pos:start="857:24" pos:end="857:24">&gt;</operator> <literal type="number" pos:start="857:26" pos:end="857:26">7</literal></expr>)</condition> <block pos:start="857:29" pos:end="861:17">{<block_content pos:start="859:21" pos:end="859:29">

                    <return pos:start="859:21" pos:end="859:29">return <expr pos:start="859:28" pos:end="859:28"><literal type="number" pos:start="859:28" pos:end="859:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="863:17" pos:end="863:25"><expr pos:start="863:17" pos:end="863:24"><name pos:start="863:17" pos:end="863:20">size</name> <operator pos:start="863:22" pos:end="863:22">=</operator> <literal type="number" pos:start="863:24" pos:end="863:24">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="865:15" pos:end="873:13">else <block pos:start="865:20" pos:end="873:13">{<block_content pos:start="867:17" pos:end="871:27">

                <expr_stmt pos:start="867:17" pos:end="867:25"><expr pos:start="867:17" pos:end="867:24"><name pos:start="867:17" pos:end="867:20">size</name> <operator pos:start="867:22" pos:end="867:22">=</operator> <literal type="number" pos:start="867:24" pos:end="867:24">2</literal></expr>;</expr_stmt>

                <while pos:start="869:17" pos:end="871:27">while <condition pos:start="869:23" pos:end="869:56">(<expr pos:start="869:24" pos:end="869:55"><operator pos:start="869:24" pos:end="869:24">(</operator><name pos:start="869:25" pos:end="869:28">insn</name> <operator pos:start="869:30" pos:end="869:30">&amp;</operator> <operator pos:start="869:32" pos:end="869:32">(</operator><literal type="number" pos:start="869:33" pos:end="869:33">1</literal> <operator pos:start="869:35" pos:end="869:36">&lt;&lt;</operator> <operator pos:start="869:38" pos:end="869:38">(</operator><name pos:start="869:39" pos:end="869:42">size</name> <operator pos:start="869:44" pos:end="869:44">+</operator> <literal type="number" pos:start="869:46" pos:end="869:47">19</literal><operator pos:start="869:48" pos:end="869:48">)</operator><operator pos:start="869:49" pos:end="869:49">)</operator><operator pos:start="869:50" pos:end="869:50">)</operator> <operator pos:start="869:52" pos:end="869:53">==</operator> <literal type="number" pos:start="869:55" pos:end="869:55">0</literal></expr>)</condition><block type="pseudo" pos:start="871:21" pos:end="871:27"><block_content pos:start="871:21" pos:end="871:27">

                    <expr_stmt pos:start="871:21" pos:end="871:27"><expr pos:start="871:21" pos:end="871:26"><name pos:start="871:21" pos:end="871:24">size</name><operator pos:start="871:25" pos:end="871:26">--</operator></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="875:13" pos:end="875:59"><expr pos:start="875:13" pos:end="875:58"><name pos:start="875:13" pos:end="875:17">shift</name> <operator pos:start="875:19" pos:end="875:19">=</operator> <operator pos:start="875:21" pos:end="875:21">(</operator><name pos:start="875:22" pos:end="875:25">insn</name> <operator pos:start="875:27" pos:end="875:28">&gt;&gt;</operator> <literal type="number" pos:start="875:30" pos:end="875:31">16</literal><operator pos:start="875:32" pos:end="875:32">)</operator> <operator pos:start="875:34" pos:end="875:34">&amp;</operator> <operator pos:start="875:36" pos:end="875:36">(</operator><operator pos:start="875:37" pos:end="875:37">(</operator><literal type="number" pos:start="875:38" pos:end="875:38">1</literal> <operator pos:start="875:40" pos:end="875:41">&lt;&lt;</operator> <operator pos:start="875:43" pos:end="875:43">(</operator><literal type="number" pos:start="875:44" pos:end="875:46">3</literal> <operator pos:start="875:46" pos:end="875:46">+</operator> <name pos:start="875:48" pos:end="875:51">size</name><operator pos:start="875:52" pos:end="875:52">)</operator><operator pos:start="875:53" pos:end="875:53">)</operator> <operator pos:start="875:55" pos:end="875:55">-</operator> <literal type="number" pos:start="875:57" pos:end="875:57">1</literal><operator pos:start="875:58" pos:end="875:58">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="877:13" pos:end="879:68">/* To avoid excessive dumplication of ops we implement shift

               by immediate using the variable shift operations.  */</comment>

            <if_stmt pos:start="881:13" pos:end="1529:13"><if pos:start="881:13" pos:end="1245:13">if <condition pos:start="881:16" pos:end="881:23">(<expr pos:start="881:17" pos:end="881:22"><name pos:start="881:17" pos:end="881:18">op</name> <operator pos:start="881:20" pos:end="881:20">&lt;</operator> <literal type="number" pos:start="881:22" pos:end="881:22">8</literal></expr>)</condition> <block pos:start="881:25" pos:end="1245:13">{<block_content pos:start="887:17" pos:end="1243:17">

                <comment type="block" pos:start="883:17" pos:end="885:75">/* Shift by immediate:

                   VSHR, VSRA, VRSHR, VRSRA, VSRI, VSHL, VQSHL, VQSHLU.  */</comment>

                <if_stmt pos:start="887:17" pos:end="891:17"><if pos:start="887:17" pos:end="891:17">if <condition pos:start="887:20" pos:end="887:41">(<expr pos:start="887:21" pos:end="887:40"><name pos:start="887:21" pos:end="887:21">q</name> <operator pos:start="887:23" pos:end="887:24">&amp;&amp;</operator> <operator pos:start="887:26" pos:end="887:26">(</operator><operator pos:start="887:27" pos:end="887:27">(</operator><name pos:start="887:28" pos:end="887:29">rd</name> <operator pos:start="887:31" pos:end="887:31">|</operator> <name pos:start="887:33" pos:end="887:34">rm</name><operator pos:start="887:35" pos:end="887:35">)</operator> <operator pos:start="887:37" pos:end="887:37">&amp;</operator> <literal type="number" pos:start="887:39" pos:end="887:39">1</literal><operator pos:start="887:40" pos:end="887:40">)</operator></expr>)</condition> <block pos:start="887:43" pos:end="891:17">{<block_content pos:start="889:21" pos:end="889:29">

                    <return pos:start="889:21" pos:end="889:29">return <expr pos:start="889:28" pos:end="889:28"><literal type="number" pos:start="889:28" pos:end="889:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="893:17" pos:end="897:17"><if pos:start="893:17" pos:end="897:17">if <condition pos:start="893:20" pos:end="893:47">(<expr pos:start="893:21" pos:end="893:46"><operator pos:start="893:21" pos:end="893:21">!</operator><name pos:start="893:22" pos:end="893:22">u</name> <operator pos:start="893:24" pos:end="893:25">&amp;&amp;</operator> <operator pos:start="893:27" pos:end="893:27">(</operator><name pos:start="893:28" pos:end="893:29">op</name> <operator pos:start="893:31" pos:end="893:32">==</operator> <literal type="number" pos:start="893:34" pos:end="893:34">4</literal> <operator pos:start="893:36" pos:end="893:37">||</operator> <name pos:start="893:39" pos:end="893:40">op</name> <operator pos:start="893:42" pos:end="893:43">==</operator> <literal type="number" pos:start="893:45" pos:end="893:45">6</literal><operator pos:start="893:46" pos:end="893:46">)</operator></expr>)</condition> <block pos:start="893:49" pos:end="897:17">{<block_content pos:start="895:21" pos:end="895:29">

                    <return pos:start="895:21" pos:end="895:29">return <expr pos:start="895:28" pos:end="895:28"><literal type="number" pos:start="895:28" pos:end="895:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="899:17" pos:end="901:44">/* Right shifts are encoded as N - shift, where N is the

                   element size in bits.  */</comment>

                <if_stmt pos:start="903:17" pos:end="905:54"><if pos:start="903:17" pos:end="905:54">if <condition pos:start="903:20" pos:end="903:28">(<expr pos:start="903:21" pos:end="903:27"><name pos:start="903:21" pos:end="903:22">op</name> <operator pos:start="903:24" pos:end="903:25">&lt;=</operator> <literal type="number" pos:start="903:27" pos:end="903:27">4</literal></expr>)</condition><block type="pseudo" pos:start="905:21" pos:end="905:54"><block_content pos:start="905:21" pos:end="905:54">

                    <expr_stmt pos:start="905:21" pos:end="905:54"><expr pos:start="905:21" pos:end="905:53"><name pos:start="905:21" pos:end="905:25">shift</name> <operator pos:start="905:27" pos:end="905:27">=</operator> <name pos:start="905:29" pos:end="905:33">shift</name> <operator pos:start="905:35" pos:end="905:35">-</operator> <operator pos:start="905:37" pos:end="905:37">(</operator><literal type="number" pos:start="905:38" pos:end="905:38">1</literal> <operator pos:start="905:40" pos:end="905:41">&lt;&lt;</operator> <operator pos:start="905:43" pos:end="905:43">(</operator><name pos:start="905:44" pos:end="905:47">size</name> <operator pos:start="905:49" pos:end="905:49">+</operator> <literal type="number" pos:start="905:51" pos:end="905:51">3</literal><operator pos:start="905:52" pos:end="905:52">)</operator><operator pos:start="905:53" pos:end="905:53">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="907:17" pos:end="915:17"><if pos:start="907:17" pos:end="911:17">if <condition pos:start="907:20" pos:end="907:30">(<expr pos:start="907:21" pos:end="907:29"><name pos:start="907:21" pos:end="907:24">size</name> <operator pos:start="907:26" pos:end="907:27">==</operator> <literal type="number" pos:start="907:29" pos:end="907:29">3</literal></expr>)</condition> <block pos:start="907:32" pos:end="911:17">{<block_content pos:start="909:21" pos:end="909:34">

                    <expr_stmt pos:start="909:21" pos:end="909:34"><expr pos:start="909:21" pos:end="909:33"><name pos:start="909:21" pos:end="909:25">count</name> <operator pos:start="909:27" pos:end="909:27">=</operator> <name pos:start="909:29" pos:end="909:29">q</name> <operator pos:start="909:31" pos:end="909:31">+</operator> <literal type="number" pos:start="909:33" pos:end="909:33">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="911:19" pos:end="915:17">else <block pos:start="911:24" pos:end="915:17">{<block_content pos:start="913:21" pos:end="913:37">

                    <expr_stmt pos:start="913:21" pos:end="913:37"><expr pos:start="913:21" pos:end="913:36"><name pos:start="913:21" pos:end="913:25">count</name> <operator pos:start="913:27" pos:end="913:27">=</operator> <ternary pos:start="913:29" pos:end="913:36"><condition pos:start="913:29" pos:end="913:31"><expr pos:start="913:29" pos:end="913:29"><name pos:start="913:29" pos:end="913:29">q</name></expr> ?</condition><then pos:start="913:33" pos:end="913:33"> <expr pos:start="913:33" pos:end="913:33"><literal type="number" pos:start="913:33" pos:end="913:33">4</literal></expr></then><else pos:start="913:34" pos:end="913:36">: <expr pos:start="913:36" pos:end="913:36"><literal type="number" pos:start="913:36" pos:end="913:36">2</literal></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <switch pos:start="917:17" pos:end="949:17">switch <condition pos:start="917:24" pos:end="917:29">(<expr pos:start="917:25" pos:end="917:28"><name pos:start="917:25" pos:end="917:28">size</name></expr>)</condition> <block pos:start="917:31" pos:end="949:17">{<block_content pos:start="919:17" pos:end="947:28">

                <case pos:start="919:17" pos:end="919:23">case <expr pos:start="919:22" pos:end="919:22"><literal type="number" pos:start="919:22" pos:end="919:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="921:21" pos:end="921:42"><expr pos:start="921:21" pos:end="921:41"><name pos:start="921:21" pos:end="921:23">imm</name> <operator pos:start="921:25" pos:end="921:25">=</operator> <operator pos:start="921:27" pos:end="921:27">(</operator><name pos:start="921:28" pos:end="921:34">uint8_t</name><operator pos:start="921:35" pos:end="921:35">)</operator> <name pos:start="921:37" pos:end="921:41">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="923:21" pos:end="923:36"><expr pos:start="923:21" pos:end="923:35"><name pos:start="923:21" pos:end="923:23">imm</name> <operator pos:start="923:25" pos:end="923:26">|=</operator> <name pos:start="923:28" pos:end="923:30">imm</name> <operator pos:start="923:32" pos:end="923:33">&lt;&lt;</operator> <literal type="number" pos:start="923:35" pos:end="923:35">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="925:21" pos:end="925:37"><expr pos:start="925:21" pos:end="925:36"><name pos:start="925:21" pos:end="925:23">imm</name> <operator pos:start="925:25" pos:end="925:26">|=</operator> <name pos:start="925:28" pos:end="925:30">imm</name> <operator pos:start="925:32" pos:end="925:33">&lt;&lt;</operator> <literal type="number" pos:start="925:35" pos:end="925:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="927:21" pos:end="927:26">break;</break>

                <case pos:start="929:17" pos:end="929:23">case <expr pos:start="929:22" pos:end="929:22"><literal type="number" pos:start="929:22" pos:end="929:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="931:21" pos:end="931:43"><expr pos:start="931:21" pos:end="931:42"><name pos:start="931:21" pos:end="931:23">imm</name> <operator pos:start="931:25" pos:end="931:25">=</operator> <operator pos:start="931:27" pos:end="931:27">(</operator><name pos:start="931:28" pos:end="931:35">uint16_t</name><operator pos:start="931:36" pos:end="931:36">)</operator> <name pos:start="931:38" pos:end="931:42">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="933:21" pos:end="933:37"><expr pos:start="933:21" pos:end="933:36"><name pos:start="933:21" pos:end="933:23">imm</name> <operator pos:start="933:25" pos:end="933:26">|=</operator> <name pos:start="933:28" pos:end="933:30">imm</name> <operator pos:start="933:32" pos:end="933:33">&lt;&lt;</operator> <literal type="number" pos:start="933:35" pos:end="933:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="935:21" pos:end="935:26">break;</break>

                <case pos:start="937:17" pos:end="937:23">case <expr pos:start="937:22" pos:end="937:22"><literal type="number" pos:start="937:22" pos:end="937:22">2</literal></expr>:</case>

                <case pos:start="939:17" pos:end="939:23">case <expr pos:start="939:22" pos:end="939:22"><literal type="number" pos:start="939:22" pos:end="939:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="941:21" pos:end="941:32"><expr pos:start="941:21" pos:end="941:31"><name pos:start="941:21" pos:end="941:23">imm</name> <operator pos:start="941:25" pos:end="941:25">=</operator> <name pos:start="941:27" pos:end="941:31">shift</name></expr>;</expr_stmt>

                    <break pos:start="943:21" pos:end="943:26">break;</break>

                <default pos:start="945:17" pos:end="945:24">default:</default>

                    <expr_stmt pos:start="947:21" pos:end="947:28"><expr pos:start="947:21" pos:end="947:27"><call pos:start="947:21" pos:end="947:27"><name pos:start="947:21" pos:end="947:25">abort</name><argument_list pos:start="947:26" pos:end="947:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>



                <for pos:start="953:17" pos:end="1243:17">for <control pos:start="953:21" pos:end="953:52">(<init pos:start="953:22" pos:end="953:30"><expr pos:start="953:22" pos:end="953:29"><name pos:start="953:22" pos:end="953:25">pass</name> <operator pos:start="953:27" pos:end="953:27">=</operator> <literal type="number" pos:start="953:29" pos:end="953:29">0</literal></expr>;</init> <condition pos:start="953:32" pos:end="953:44"><expr pos:start="953:32" pos:end="953:43"><name pos:start="953:32" pos:end="953:35">pass</name> <operator pos:start="953:37" pos:end="953:37">&lt;</operator> <name pos:start="953:39" pos:end="953:43">count</name></expr>;</condition> <incr pos:start="953:46" pos:end="953:51"><expr pos:start="953:46" pos:end="953:51"><name pos:start="953:46" pos:end="953:49">pass</name><operator pos:start="953:50" pos:end="953:51">++</operator></expr></incr>)</control> <block pos:start="953:54" pos:end="1243:17">{<block_content pos:start="955:21" pos:end="1241:21">

                    <if_stmt pos:start="955:21" pos:end="1241:21"><if pos:start="955:21" pos:end="1067:21">if <condition pos:start="955:24" pos:end="955:34">(<expr pos:start="955:25" pos:end="955:33"><name pos:start="955:25" pos:end="955:28">size</name> <operator pos:start="955:30" pos:end="955:31">==</operator> <literal type="number" pos:start="955:33" pos:end="955:33">3</literal></expr>)</condition> <block pos:start="955:36" pos:end="1067:21">{<block_content pos:start="957:25" pos:end="1065:60">

                        <expr_stmt pos:start="957:25" pos:end="957:59"><expr pos:start="957:25" pos:end="957:58"><call pos:start="957:25" pos:end="957:58"><name pos:start="957:25" pos:end="957:39">neon_load_reg64</name><argument_list pos:start="957:40" pos:end="957:58">(<argument pos:start="957:41" pos:end="957:46"><expr pos:start="957:41" pos:end="957:46"><name pos:start="957:41" pos:end="957:46">cpu_V0</name></expr></argument>, <argument pos:start="957:49" pos:end="957:57"><expr pos:start="957:49" pos:end="957:57"><name pos:start="957:49" pos:end="957:50">rm</name> <operator pos:start="957:52" pos:end="957:52">+</operator> <name pos:start="957:54" pos:end="957:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="959:25" pos:end="959:54"><expr pos:start="959:25" pos:end="959:53"><call pos:start="959:25" pos:end="959:53"><name pos:start="959:25" pos:end="959:40">tcg_gen_movi_i64</name><argument_list pos:start="959:41" pos:end="959:53">(<argument pos:start="959:42" pos:end="959:47"><expr pos:start="959:42" pos:end="959:47"><name pos:start="959:42" pos:end="959:47">cpu_V1</name></expr></argument>, <argument pos:start="959:50" pos:end="959:52"><expr pos:start="959:50" pos:end="959:52"><name pos:start="959:50" pos:end="959:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="961:25" pos:end="1023:25">switch <condition pos:start="961:32" pos:end="961:35">(<expr pos:start="961:33" pos:end="961:34"><name pos:start="961:33" pos:end="961:34">op</name></expr>)</condition> <block pos:start="961:37" pos:end="1023:25">{<block_content pos:start="963:25" pos:end="1021:34">

                        <case pos:start="963:25" pos:end="963:31">case <expr pos:start="963:30" pos:end="963:30"><literal type="number" pos:start="963:30" pos:end="963:30">0</literal></expr>:</case>  <comment type="block" pos:start="963:34" pos:end="963:43">/* VSHR */</comment>

                        <case pos:start="965:25" pos:end="965:31">case <expr pos:start="965:30" pos:end="965:30"><literal type="number" pos:start="965:30" pos:end="965:30">1</literal></expr>:</case>  <comment type="block" pos:start="965:34" pos:end="965:43">/* VSRA */</comment>

                            <if_stmt pos:start="967:29" pos:end="973:80"><if pos:start="967:29" pos:end="969:80">if <condition pos:start="967:32" pos:end="967:34">(<expr pos:start="967:33" pos:end="967:33"><name pos:start="967:33" pos:end="967:33">u</name></expr>)</condition><block type="pseudo" pos:start="969:33" pos:end="969:80"><block_content pos:start="969:33" pos:end="969:80">

                                <expr_stmt pos:start="969:33" pos:end="969:80"><expr pos:start="969:33" pos:end="969:79"><call pos:start="969:33" pos:end="969:79"><name pos:start="969:33" pos:end="969:55">gen_helper_neon_shl_u64</name><argument_list pos:start="969:56" pos:end="969:79">(<argument pos:start="969:57" pos:end="969:62"><expr pos:start="969:57" pos:end="969:62"><name pos:start="969:57" pos:end="969:62">cpu_V0</name></expr></argument>, <argument pos:start="969:65" pos:end="969:70"><expr pos:start="969:65" pos:end="969:70"><name pos:start="969:65" pos:end="969:70">cpu_V0</name></expr></argument>, <argument pos:start="969:73" pos:end="969:78"><expr pos:start="969:73" pos:end="969:78"><name pos:start="969:73" pos:end="969:78">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="971:29" pos:end="973:80">else<block type="pseudo" pos:start="973:33" pos:end="973:80"><block_content pos:start="973:33" pos:end="973:80">

                                <expr_stmt pos:start="973:33" pos:end="973:80"><expr pos:start="973:33" pos:end="973:79"><call pos:start="973:33" pos:end="973:79"><name pos:start="973:33" pos:end="973:55">gen_helper_neon_shl_s64</name><argument_list pos:start="973:56" pos:end="973:79">(<argument pos:start="973:57" pos:end="973:62"><expr pos:start="973:57" pos:end="973:62"><name pos:start="973:57" pos:end="973:62">cpu_V0</name></expr></argument>, <argument pos:start="973:65" pos:end="973:70"><expr pos:start="973:65" pos:end="973:70"><name pos:start="973:65" pos:end="973:70">cpu_V0</name></expr></argument>, <argument pos:start="973:73" pos:end="973:78"><expr pos:start="973:73" pos:end="973:78"><name pos:start="973:73" pos:end="973:78">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="975:29" pos:end="975:34">break;</break>

                        <case pos:start="977:25" pos:end="977:31">case <expr pos:start="977:30" pos:end="977:30"><literal type="number" pos:start="977:30" pos:end="977:30">2</literal></expr>:</case> <comment type="block" pos:start="977:33" pos:end="977:43">/* VRSHR */</comment>

                        <case pos:start="979:25" pos:end="979:31">case <expr pos:start="979:30" pos:end="979:30"><literal type="number" pos:start="979:30" pos:end="979:30">3</literal></expr>:</case> <comment type="block" pos:start="979:33" pos:end="979:43">/* VRSRA */</comment>

                            <if_stmt pos:start="981:29" pos:end="987:81"><if pos:start="981:29" pos:end="983:81">if <condition pos:start="981:32" pos:end="981:34">(<expr pos:start="981:33" pos:end="981:33"><name pos:start="981:33" pos:end="981:33">u</name></expr>)</condition><block type="pseudo" pos:start="983:33" pos:end="983:81"><block_content pos:start="983:33" pos:end="983:81">

                                <expr_stmt pos:start="983:33" pos:end="983:81"><expr pos:start="983:33" pos:end="983:80"><call pos:start="983:33" pos:end="983:80"><name pos:start="983:33" pos:end="983:56">gen_helper_neon_rshl_u64</name><argument_list pos:start="983:57" pos:end="983:80">(<argument pos:start="983:58" pos:end="983:63"><expr pos:start="983:58" pos:end="983:63"><name pos:start="983:58" pos:end="983:63">cpu_V0</name></expr></argument>, <argument pos:start="983:66" pos:end="983:71"><expr pos:start="983:66" pos:end="983:71"><name pos:start="983:66" pos:end="983:71">cpu_V0</name></expr></argument>, <argument pos:start="983:74" pos:end="983:79"><expr pos:start="983:74" pos:end="983:79"><name pos:start="983:74" pos:end="983:79">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="985:29" pos:end="987:81">else<block type="pseudo" pos:start="987:33" pos:end="987:81"><block_content pos:start="987:33" pos:end="987:81">

                                <expr_stmt pos:start="987:33" pos:end="987:81"><expr pos:start="987:33" pos:end="987:80"><call pos:start="987:33" pos:end="987:80"><name pos:start="987:33" pos:end="987:56">gen_helper_neon_rshl_s64</name><argument_list pos:start="987:57" pos:end="987:80">(<argument pos:start="987:58" pos:end="987:63"><expr pos:start="987:58" pos:end="987:63"><name pos:start="987:58" pos:end="987:63">cpu_V0</name></expr></argument>, <argument pos:start="987:66" pos:end="987:71"><expr pos:start="987:66" pos:end="987:71"><name pos:start="987:66" pos:end="987:71">cpu_V0</name></expr></argument>, <argument pos:start="987:74" pos:end="987:79"><expr pos:start="987:74" pos:end="987:79"><name pos:start="987:74" pos:end="987:79">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="989:29" pos:end="989:34">break;</break>

                        <case pos:start="991:25" pos:end="991:31">case <expr pos:start="991:30" pos:end="991:30"><literal type="number" pos:start="991:30" pos:end="991:30">4</literal></expr>:</case> <comment type="block" pos:start="991:33" pos:end="991:42">/* VSRI */</comment>

                        <case pos:start="993:25" pos:end="993:31">case <expr pos:start="993:30" pos:end="993:30"><literal type="number" pos:start="993:30" pos:end="993:30">5</literal></expr>:</case> <comment type="block" pos:start="993:33" pos:end="993:48">/* VSHL, VSLI */</comment>

                            <expr_stmt pos:start="995:29" pos:end="995:76"><expr pos:start="995:29" pos:end="995:75"><call pos:start="995:29" pos:end="995:75"><name pos:start="995:29" pos:end="995:51">gen_helper_neon_shl_u64</name><argument_list pos:start="995:52" pos:end="995:75">(<argument pos:start="995:53" pos:end="995:58"><expr pos:start="995:53" pos:end="995:58"><name pos:start="995:53" pos:end="995:58">cpu_V0</name></expr></argument>, <argument pos:start="995:61" pos:end="995:66"><expr pos:start="995:61" pos:end="995:66"><name pos:start="995:61" pos:end="995:66">cpu_V0</name></expr></argument>, <argument pos:start="995:69" pos:end="995:74"><expr pos:start="995:69" pos:end="995:74"><name pos:start="995:69" pos:end="995:74">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="997:29" pos:end="997:34">break;</break>

                        <case pos:start="999:25" pos:end="999:31">case <expr pos:start="999:30" pos:end="999:30"><literal type="number" pos:start="999:30" pos:end="999:30">6</literal></expr>:</case> <comment type="block" pos:start="999:33" pos:end="999:44">/* VQSHLU */</comment>

                            <expr_stmt pos:start="1001:29" pos:end="1001:78"><expr pos:start="1001:29" pos:end="1001:77"><call pos:start="1001:29" pos:end="1001:77"><name pos:start="1001:29" pos:end="1001:53">gen_helper_neon_qshlu_s64</name><argument_list pos:start="1001:54" pos:end="1001:77">(<argument pos:start="1001:55" pos:end="1001:60"><expr pos:start="1001:55" pos:end="1001:60"><name pos:start="1001:55" pos:end="1001:60">cpu_V0</name></expr></argument>, <argument pos:start="1001:63" pos:end="1001:68"><expr pos:start="1001:63" pos:end="1001:68"><name pos:start="1001:63" pos:end="1001:68">cpu_V0</name></expr></argument>, <argument pos:start="1001:71" pos:end="1001:76"><expr pos:start="1001:71" pos:end="1001:76"><name pos:start="1001:71" pos:end="1001:76">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1003:29" pos:end="1003:34">break;</break>

                        <case pos:start="1005:25" pos:end="1005:31">case <expr pos:start="1005:30" pos:end="1005:30"><literal type="number" pos:start="1005:30" pos:end="1005:30">7</literal></expr>:</case> <comment type="block" pos:start="1005:33" pos:end="1005:43">/* VQSHL */</comment>

                            <if_stmt pos:start="1007:29" pos:end="1019:29"><if pos:start="1007:29" pos:end="1013:29">if <condition pos:start="1007:32" pos:end="1007:34">(<expr pos:start="1007:33" pos:end="1007:33"><name pos:start="1007:33" pos:end="1007:33">u</name></expr>)</condition> <block pos:start="1007:36" pos:end="1013:29">{<block_content pos:start="1009:33" pos:end="1011:73">

                                <expr_stmt pos:start="1009:33" pos:end="1011:73"><expr pos:start="1009:33" pos:end="1011:72"><call pos:start="1009:33" pos:end="1011:72"><name pos:start="1009:33" pos:end="1009:56">gen_helper_neon_qshl_u64</name><argument_list pos:start="1009:57" pos:end="1011:72">(<argument pos:start="1009:58" pos:end="1009:63"><expr pos:start="1009:58" pos:end="1009:63"><name pos:start="1009:58" pos:end="1009:63">cpu_V0</name></expr></argument>,

                                                         <argument pos:start="1011:58" pos:end="1011:63"><expr pos:start="1011:58" pos:end="1011:63"><name pos:start="1011:58" pos:end="1011:63">cpu_V0</name></expr></argument>, <argument pos:start="1011:66" pos:end="1011:71"><expr pos:start="1011:66" pos:end="1011:71"><name pos:start="1011:66" pos:end="1011:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1013:31" pos:end="1019:29">else <block pos:start="1013:36" pos:end="1019:29">{<block_content pos:start="1015:33" pos:end="1017:73">

                                <expr_stmt pos:start="1015:33" pos:end="1017:73"><expr pos:start="1015:33" pos:end="1017:72"><call pos:start="1015:33" pos:end="1017:72"><name pos:start="1015:33" pos:end="1015:56">gen_helper_neon_qshl_s64</name><argument_list pos:start="1015:57" pos:end="1017:72">(<argument pos:start="1015:58" pos:end="1015:63"><expr pos:start="1015:58" pos:end="1015:63"><name pos:start="1015:58" pos:end="1015:63">cpu_V0</name></expr></argument>,

                                                         <argument pos:start="1017:58" pos:end="1017:63"><expr pos:start="1017:58" pos:end="1017:63"><name pos:start="1017:58" pos:end="1017:63">cpu_V0</name></expr></argument>, <argument pos:start="1017:66" pos:end="1017:71"><expr pos:start="1017:66" pos:end="1017:71"><name pos:start="1017:66" pos:end="1017:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <break pos:start="1021:29" pos:end="1021:34">break;</break>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="1025:25" pos:end="1063:25"><if pos:start="1025:25" pos:end="1033:25">if <condition pos:start="1025:28" pos:end="1025:47">(<expr pos:start="1025:29" pos:end="1025:46"><name pos:start="1025:29" pos:end="1025:30">op</name> <operator pos:start="1025:32" pos:end="1025:33">==</operator> <literal type="number" pos:start="1025:35" pos:end="1025:35">1</literal> <operator pos:start="1025:37" pos:end="1025:38">||</operator> <name pos:start="1025:40" pos:end="1025:41">op</name> <operator pos:start="1025:43" pos:end="1025:44">==</operator> <literal type="number" pos:start="1025:46" pos:end="1025:46">3</literal></expr>)</condition> <block pos:start="1025:49" pos:end="1033:25">{<block_content pos:start="1029:29" pos:end="1031:68">

                            <comment type="block" pos:start="1027:29" pos:end="1027:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="1029:29" pos:end="1029:63"><expr pos:start="1029:29" pos:end="1029:62"><call pos:start="1029:29" pos:end="1029:62"><name pos:start="1029:29" pos:end="1029:43">neon_load_reg64</name><argument_list pos:start="1029:44" pos:end="1029:62">(<argument pos:start="1029:45" pos:end="1029:50"><expr pos:start="1029:45" pos:end="1029:50"><name pos:start="1029:45" pos:end="1029:50">cpu_V1</name></expr></argument>, <argument pos:start="1029:53" pos:end="1029:61"><expr pos:start="1029:53" pos:end="1029:61"><name pos:start="1029:53" pos:end="1029:54">rd</name> <operator pos:start="1029:56" pos:end="1029:56">+</operator> <name pos:start="1029:58" pos:end="1029:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1031:29" pos:end="1031:68"><expr pos:start="1031:29" pos:end="1031:67"><call pos:start="1031:29" pos:end="1031:67"><name pos:start="1031:29" pos:end="1031:43">tcg_gen_add_i64</name><argument_list pos:start="1031:44" pos:end="1031:67">(<argument pos:start="1031:45" pos:end="1031:50"><expr pos:start="1031:45" pos:end="1031:50"><name pos:start="1031:45" pos:end="1031:50">cpu_V0</name></expr></argument>, <argument pos:start="1031:53" pos:end="1031:58"><expr pos:start="1031:53" pos:end="1031:58"><name pos:start="1031:53" pos:end="1031:58">cpu_V0</name></expr></argument>, <argument pos:start="1031:61" pos:end="1031:66"><expr pos:start="1031:61" pos:end="1031:66"><name pos:start="1031:61" pos:end="1031:66">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1033:27" pos:end="1063:25">else if <condition pos:start="1033:35" pos:end="1033:61">(<expr pos:start="1033:36" pos:end="1033:60"><name pos:start="1033:36" pos:end="1033:37">op</name> <operator pos:start="1033:39" pos:end="1033:40">==</operator> <literal type="number" pos:start="1033:42" pos:end="1033:42">4</literal> <operator pos:start="1033:44" pos:end="1033:45">||</operator> <operator pos:start="1033:47" pos:end="1033:47">(</operator><name pos:start="1033:48" pos:end="1033:49">op</name> <operator pos:start="1033:51" pos:end="1033:52">==</operator> <literal type="number" pos:start="1033:54" pos:end="1033:54">5</literal> <operator pos:start="1033:56" pos:end="1033:57">&amp;&amp;</operator> <name pos:start="1033:59" pos:end="1033:59">u</name><operator pos:start="1033:60" pos:end="1033:60">)</operator></expr>)</condition> <block pos:start="1033:63" pos:end="1063:25">{<block_content pos:start="1037:29" pos:end="1061:67">

                            <comment type="block" pos:start="1035:29" pos:end="1035:40">/* Insert */</comment>

                            <expr_stmt pos:start="1037:29" pos:end="1037:63"><expr pos:start="1037:29" pos:end="1037:62"><call pos:start="1037:29" pos:end="1037:62"><name pos:start="1037:29" pos:end="1037:43">neon_load_reg64</name><argument_list pos:start="1037:44" pos:end="1037:62">(<argument pos:start="1037:45" pos:end="1037:50"><expr pos:start="1037:45" pos:end="1037:50"><name pos:start="1037:45" pos:end="1037:50">cpu_V1</name></expr></argument>, <argument pos:start="1037:53" pos:end="1037:61"><expr pos:start="1037:53" pos:end="1037:61"><name pos:start="1037:53" pos:end="1037:54">rd</name> <operator pos:start="1037:56" pos:end="1037:56">+</operator> <name pos:start="1037:58" pos:end="1037:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt pos:start="1039:29" pos:end="1039:42"><decl pos:start="1039:29" pos:end="1039:41"><type pos:start="1039:29" pos:end="1039:36"><name pos:start="1039:29" pos:end="1039:36">uint64_t</name></type> <name pos:start="1039:38" pos:end="1039:41">mask</name></decl>;</decl_stmt>

                            <if_stmt pos:start="1041:29" pos:end="1057:29"><if pos:start="1041:29" pos:end="1045:29">if <condition pos:start="1041:32" pos:end="1041:58">(<expr pos:start="1041:33" pos:end="1041:57"><name pos:start="1041:33" pos:end="1041:54"><name pos:start="1041:33" pos:end="1041:37">shift</name> <argument_list type="generic" pos:start="1041:39" pos:end="1041:54">&lt; <argument pos:start="1041:41" pos:end="1041:52"><expr pos:start="1041:41" pos:end="1041:52"><operator pos:start="1041:41" pos:end="1041:41">-</operator><literal type="number" pos:start="1041:42" pos:end="1041:43">63</literal> <operator pos:start="1041:45" pos:end="1041:46">||</operator> <name pos:start="1041:48" pos:end="1041:52">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="1041:56" pos:end="1041:57">63</literal></expr>)</condition> <block pos:start="1041:60" pos:end="1045:29">{<block_content pos:start="1043:33" pos:end="1043:41">

                                <expr_stmt pos:start="1043:33" pos:end="1043:41"><expr pos:start="1043:33" pos:end="1043:40"><name pos:start="1043:33" pos:end="1043:36">mask</name> <operator pos:start="1043:38" pos:end="1043:38">=</operator> <literal type="number" pos:start="1043:40" pos:end="1043:40">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1045:31" pos:end="1057:29">else <block pos:start="1045:36" pos:end="1057:29">{<block_content pos:start="1047:33" pos:end="1055:33">

                                <if_stmt pos:start="1047:33" pos:end="1055:33"><if pos:start="1047:33" pos:end="1051:33">if <condition pos:start="1047:36" pos:end="1047:44">(<expr pos:start="1047:37" pos:end="1047:43"><name pos:start="1047:37" pos:end="1047:38">op</name> <operator pos:start="1047:40" pos:end="1047:41">==</operator> <literal type="number" pos:start="1047:43" pos:end="1047:43">4</literal></expr>)</condition> <block pos:start="1047:46" pos:end="1051:33">{<block_content pos:start="1049:37" pos:end="1049:75">

                                    <expr_stmt pos:start="1049:37" pos:end="1049:75"><expr pos:start="1049:37" pos:end="1049:74"><name pos:start="1049:37" pos:end="1049:40">mask</name> <operator pos:start="1049:42" pos:end="1049:42">=</operator> <literal type="number" pos:start="1049:44" pos:end="1049:64">0xffffffffffffffffull</literal> <operator pos:start="1049:66" pos:end="1049:67">&gt;&gt;</operator> <operator pos:start="1049:69" pos:end="1049:69">-</operator><name pos:start="1049:70" pos:end="1049:74">shift</name></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="1051:35" pos:end="1055:33">else <block pos:start="1051:40" pos:end="1055:33">{<block_content pos:start="1053:37" pos:end="1053:74">

                                    <expr_stmt pos:start="1053:37" pos:end="1053:74"><expr pos:start="1053:37" pos:end="1053:73"><name pos:start="1053:37" pos:end="1053:40">mask</name> <operator pos:start="1053:42" pos:end="1053:42">=</operator> <literal type="number" pos:start="1053:44" pos:end="1053:64">0xffffffffffffffffull</literal> <operator pos:start="1053:66" pos:end="1053:67">&lt;&lt;</operator> <name pos:start="1053:69" pos:end="1053:73">shift</name></expr>;</expr_stmt>

                                </block_content>}</block></else></if_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="1059:29" pos:end="1059:68"><expr pos:start="1059:29" pos:end="1059:67"><call pos:start="1059:29" pos:end="1059:67"><name pos:start="1059:29" pos:end="1059:44">tcg_gen_andi_i64</name><argument_list pos:start="1059:45" pos:end="1059:67">(<argument pos:start="1059:46" pos:end="1059:51"><expr pos:start="1059:46" pos:end="1059:51"><name pos:start="1059:46" pos:end="1059:51">cpu_V1</name></expr></argument>, <argument pos:start="1059:54" pos:end="1059:59"><expr pos:start="1059:54" pos:end="1059:59"><name pos:start="1059:54" pos:end="1059:59">cpu_V1</name></expr></argument>, <argument pos:start="1059:62" pos:end="1059:66"><expr pos:start="1059:62" pos:end="1059:66"><operator pos:start="1059:62" pos:end="1059:62">~</operator><name pos:start="1059:63" pos:end="1059:66">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1061:29" pos:end="1061:67"><expr pos:start="1061:29" pos:end="1061:66"><call pos:start="1061:29" pos:end="1061:66"><name pos:start="1061:29" pos:end="1061:42">tcg_gen_or_i64</name><argument_list pos:start="1061:43" pos:end="1061:66">(<argument pos:start="1061:44" pos:end="1061:49"><expr pos:start="1061:44" pos:end="1061:49"><name pos:start="1061:44" pos:end="1061:49">cpu_V0</name></expr></argument>, <argument pos:start="1061:52" pos:end="1061:57"><expr pos:start="1061:52" pos:end="1061:57"><name pos:start="1061:52" pos:end="1061:57">cpu_V0</name></expr></argument>, <argument pos:start="1061:60" pos:end="1061:65"><expr pos:start="1061:60" pos:end="1061:65"><name pos:start="1061:60" pos:end="1061:65">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1065:25" pos:end="1065:60"><expr pos:start="1065:25" pos:end="1065:59"><call pos:start="1065:25" pos:end="1065:59"><name pos:start="1065:25" pos:end="1065:40">neon_store_reg64</name><argument_list pos:start="1065:41" pos:end="1065:59">(<argument pos:start="1065:42" pos:end="1065:47"><expr pos:start="1065:42" pos:end="1065:47"><name pos:start="1065:42" pos:end="1065:47">cpu_V0</name></expr></argument>, <argument pos:start="1065:50" pos:end="1065:58"><expr pos:start="1065:50" pos:end="1065:58"><name pos:start="1065:50" pos:end="1065:51">rd</name> <operator pos:start="1065:53" pos:end="1065:53">+</operator> <name pos:start="1065:55" pos:end="1065:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1067:23" pos:end="1241:21">else <block pos:start="1067:28" pos:end="1241:21">{<block_content pos:start="1071:25" pos:end="1239:54"> <comment type="block" pos:start="1067:30" pos:end="1067:43">/* size &lt; 3 */</comment>

                        <comment type="block" pos:start="1069:25" pos:end="1069:53">/* Operands in T0 and T1.  */</comment>

                        <expr_stmt pos:start="1071:25" pos:end="1071:54"><expr pos:start="1071:25" pos:end="1071:53"><name pos:start="1071:25" pos:end="1071:27">tmp</name> <operator pos:start="1071:29" pos:end="1071:29">=</operator> <call pos:start="1071:31" pos:end="1071:53"><name pos:start="1071:31" pos:end="1071:43">neon_load_reg</name><argument_list pos:start="1071:44" pos:end="1071:53">(<argument pos:start="1071:45" pos:end="1071:46"><expr pos:start="1071:45" pos:end="1071:46"><name pos:start="1071:45" pos:end="1071:46">rm</name></expr></argument>, <argument pos:start="1071:49" pos:end="1071:52"><expr pos:start="1071:49" pos:end="1071:52"><name pos:start="1071:49" pos:end="1071:52">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1073:25" pos:end="1073:50"><expr pos:start="1073:25" pos:end="1073:49"><name pos:start="1073:25" pos:end="1073:28">tmp2</name> <operator pos:start="1073:30" pos:end="1073:30">=</operator> <call pos:start="1073:32" pos:end="1073:49"><name pos:start="1073:32" pos:end="1073:47">tcg_temp_new_i32</name><argument_list pos:start="1073:48" pos:end="1073:49">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1075:25" pos:end="1075:52"><expr pos:start="1075:25" pos:end="1075:51"><call pos:start="1075:25" pos:end="1075:51"><name pos:start="1075:25" pos:end="1075:40">tcg_gen_movi_i32</name><argument_list pos:start="1075:41" pos:end="1075:51">(<argument pos:start="1075:42" pos:end="1075:45"><expr pos:start="1075:42" pos:end="1075:45"><name pos:start="1075:42" pos:end="1075:45">tmp2</name></expr></argument>, <argument pos:start="1075:48" pos:end="1075:50"><expr pos:start="1075:48" pos:end="1075:50"><name pos:start="1075:48" pos:end="1075:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="1077:25" pos:end="1149:25">switch <condition pos:start="1077:32" pos:end="1077:35">(<expr pos:start="1077:33" pos:end="1077:34"><name pos:start="1077:33" pos:end="1077:34">op</name></expr>)</condition> <block pos:start="1077:37" pos:end="1149:25">{<block_content pos:start="1079:25" pos:end="1147:34">

                        <case pos:start="1079:25" pos:end="1079:31">case <expr pos:start="1079:30" pos:end="1079:30"><literal type="number" pos:start="1079:30" pos:end="1079:30">0</literal></expr>:</case>  <comment type="block" pos:start="1079:34" pos:end="1079:43">/* VSHR */</comment>

                        <case pos:start="1081:25" pos:end="1081:31">case <expr pos:start="1081:30" pos:end="1081:30"><literal type="number" pos:start="1081:30" pos:end="1081:30">1</literal></expr>:</case>  <comment type="block" pos:start="1081:34" pos:end="1081:43">/* VSRA */</comment>

                            <expr_stmt pos:start="1083:29" pos:end="1083:53"><expr pos:start="1083:29" pos:end="1083:52"><call pos:start="1083:29" pos:end="1083:52"><name pos:start="1083:29" pos:end="1083:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1083:48" pos:end="1083:52">(<argument pos:start="1083:49" pos:end="1083:51"><expr pos:start="1083:49" pos:end="1083:51"><name pos:start="1083:49" pos:end="1083:51">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1085:29" pos:end="1085:34">break;</break>

                        <case pos:start="1087:25" pos:end="1087:31">case <expr pos:start="1087:30" pos:end="1087:30"><literal type="number" pos:start="1087:30" pos:end="1087:30">2</literal></expr>:</case> <comment type="block" pos:start="1087:33" pos:end="1087:43">/* VRSHR */</comment>

                        <case pos:start="1089:25" pos:end="1089:31">case <expr pos:start="1089:30" pos:end="1089:30"><literal type="number" pos:start="1089:30" pos:end="1089:30">3</literal></expr>:</case> <comment type="block" pos:start="1089:33" pos:end="1089:43">/* VRSRA */</comment>

                            <expr_stmt pos:start="1091:29" pos:end="1091:54"><expr pos:start="1091:29" pos:end="1091:53"><call pos:start="1091:29" pos:end="1091:53"><name pos:start="1091:29" pos:end="1091:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1091:48" pos:end="1091:53">(<argument pos:start="1091:49" pos:end="1091:52"><expr pos:start="1091:49" pos:end="1091:52"><name pos:start="1091:49" pos:end="1091:52">rshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1093:29" pos:end="1093:34">break;</break>

                        <case pos:start="1095:25" pos:end="1095:31">case <expr pos:start="1095:30" pos:end="1095:30"><literal type="number" pos:start="1095:30" pos:end="1095:30">4</literal></expr>:</case> <comment type="block" pos:start="1095:33" pos:end="1095:42">/* VSRI */</comment>

                        <case pos:start="1097:25" pos:end="1097:31">case <expr pos:start="1097:30" pos:end="1097:30"><literal type="number" pos:start="1097:30" pos:end="1097:30">5</literal></expr>:</case> <comment type="block" pos:start="1097:33" pos:end="1097:48">/* VSHL, VSLI */</comment>

                            <switch pos:start="1099:29" pos:end="1109:29">switch <condition pos:start="1099:36" pos:end="1099:41">(<expr pos:start="1099:37" pos:end="1099:40"><name pos:start="1099:37" pos:end="1099:40">size</name></expr>)</condition> <block pos:start="1099:43" pos:end="1109:29">{<block_content pos:start="1101:29" pos:end="1107:45">

                            <case pos:start="1101:29" pos:end="1101:35">case <expr pos:start="1101:34" pos:end="1101:34"><literal type="number" pos:start="1101:34" pos:end="1101:34">0</literal></expr>:</case> <expr_stmt pos:start="1101:37" pos:end="1101:75"><expr pos:start="1101:37" pos:end="1101:74"><call pos:start="1101:37" pos:end="1101:74"><name pos:start="1101:37" pos:end="1101:58">gen_helper_neon_shl_u8</name><argument_list pos:start="1101:59" pos:end="1101:74">(<argument pos:start="1101:60" pos:end="1101:62"><expr pos:start="1101:60" pos:end="1101:62"><name pos:start="1101:60" pos:end="1101:62">tmp</name></expr></argument>, <argument pos:start="1101:65" pos:end="1101:67"><expr pos:start="1101:65" pos:end="1101:67"><name pos:start="1101:65" pos:end="1101:67">tmp</name></expr></argument>, <argument pos:start="1101:70" pos:end="1101:73"><expr pos:start="1101:70" pos:end="1101:73"><name pos:start="1101:70" pos:end="1101:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1101:77" pos:end="1101:82">break;</break>

                            <case pos:start="1103:29" pos:end="1103:35">case <expr pos:start="1103:34" pos:end="1103:34"><literal type="number" pos:start="1103:34" pos:end="1103:34">1</literal></expr>:</case> <expr_stmt pos:start="1103:37" pos:end="1103:76"><expr pos:start="1103:37" pos:end="1103:75"><call pos:start="1103:37" pos:end="1103:75"><name pos:start="1103:37" pos:end="1103:59">gen_helper_neon_shl_u16</name><argument_list pos:start="1103:60" pos:end="1103:75">(<argument pos:start="1103:61" pos:end="1103:63"><expr pos:start="1103:61" pos:end="1103:63"><name pos:start="1103:61" pos:end="1103:63">tmp</name></expr></argument>, <argument pos:start="1103:66" pos:end="1103:68"><expr pos:start="1103:66" pos:end="1103:68"><name pos:start="1103:66" pos:end="1103:68">tmp</name></expr></argument>, <argument pos:start="1103:71" pos:end="1103:74"><expr pos:start="1103:71" pos:end="1103:74"><name pos:start="1103:71" pos:end="1103:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1103:78" pos:end="1103:83">break;</break>

                            <case pos:start="1105:29" pos:end="1105:35">case <expr pos:start="1105:34" pos:end="1105:34"><literal type="number" pos:start="1105:34" pos:end="1105:34">2</literal></expr>:</case> <expr_stmt pos:start="1105:37" pos:end="1105:76"><expr pos:start="1105:37" pos:end="1105:75"><call pos:start="1105:37" pos:end="1105:75"><name pos:start="1105:37" pos:end="1105:59">gen_helper_neon_shl_u32</name><argument_list pos:start="1105:60" pos:end="1105:75">(<argument pos:start="1105:61" pos:end="1105:63"><expr pos:start="1105:61" pos:end="1105:63"><name pos:start="1105:61" pos:end="1105:63">tmp</name></expr></argument>, <argument pos:start="1105:66" pos:end="1105:68"><expr pos:start="1105:66" pos:end="1105:68"><name pos:start="1105:66" pos:end="1105:68">tmp</name></expr></argument>, <argument pos:start="1105:71" pos:end="1105:74"><expr pos:start="1105:71" pos:end="1105:74"><name pos:start="1105:71" pos:end="1105:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1105:78" pos:end="1105:83">break;</break>

                            <default pos:start="1107:29" pos:end="1107:36">default:</default> <expr_stmt pos:start="1107:38" pos:end="1107:45"><expr pos:start="1107:38" pos:end="1107:44"><call pos:start="1107:38" pos:end="1107:44"><name pos:start="1107:38" pos:end="1107:42">abort</name><argument_list pos:start="1107:43" pos:end="1107:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="1111:29" pos:end="1111:34">break;</break>

                        <case pos:start="1113:25" pos:end="1113:31">case <expr pos:start="1113:30" pos:end="1113:30"><literal type="number" pos:start="1113:30" pos:end="1113:30">6</literal></expr>:</case> <comment type="block" pos:start="1113:33" pos:end="1113:44">/* VQSHLU */</comment>

                            <switch pos:start="1115:29" pos:end="1139:29">switch <condition pos:start="1115:36" pos:end="1115:41">(<expr pos:start="1115:37" pos:end="1115:40"><name pos:start="1115:37" pos:end="1115:40">size</name></expr>)</condition> <block pos:start="1115:43" pos:end="1139:29">{<block_content pos:start="1117:29" pos:end="1137:40">

                            <case pos:start="1117:29" pos:end="1117:35">case <expr pos:start="1117:34" pos:end="1117:34"><literal type="number" pos:start="1117:34" pos:end="1117:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="1119:33" pos:end="1119:73"><expr pos:start="1119:33" pos:end="1119:72"><call pos:start="1119:33" pos:end="1119:72"><name pos:start="1119:33" pos:end="1119:56">gen_helper_neon_qshlu_s8</name><argument_list pos:start="1119:57" pos:end="1119:72">(<argument pos:start="1119:58" pos:end="1119:60"><expr pos:start="1119:58" pos:end="1119:60"><name pos:start="1119:58" pos:end="1119:60">tmp</name></expr></argument>, <argument pos:start="1119:63" pos:end="1119:65"><expr pos:start="1119:63" pos:end="1119:65"><name pos:start="1119:63" pos:end="1119:65">tmp</name></expr></argument>, <argument pos:start="1119:68" pos:end="1119:71"><expr pos:start="1119:68" pos:end="1119:71"><name pos:start="1119:68" pos:end="1119:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1121:33" pos:end="1121:38">break;</break>

                            <case pos:start="1123:29" pos:end="1123:35">case <expr pos:start="1123:34" pos:end="1123:34"><literal type="number" pos:start="1123:34" pos:end="1123:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="1125:33" pos:end="1125:74"><expr pos:start="1125:33" pos:end="1125:73"><call pos:start="1125:33" pos:end="1125:73"><name pos:start="1125:33" pos:end="1125:57">gen_helper_neon_qshlu_s16</name><argument_list pos:start="1125:58" pos:end="1125:73">(<argument pos:start="1125:59" pos:end="1125:61"><expr pos:start="1125:59" pos:end="1125:61"><name pos:start="1125:59" pos:end="1125:61">tmp</name></expr></argument>, <argument pos:start="1125:64" pos:end="1125:66"><expr pos:start="1125:64" pos:end="1125:66"><name pos:start="1125:64" pos:end="1125:66">tmp</name></expr></argument>, <argument pos:start="1125:69" pos:end="1125:72"><expr pos:start="1125:69" pos:end="1125:72"><name pos:start="1125:69" pos:end="1125:72">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1127:33" pos:end="1127:38">break;</break>

                            <case pos:start="1129:29" pos:end="1129:35">case <expr pos:start="1129:34" pos:end="1129:34"><literal type="number" pos:start="1129:34" pos:end="1129:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="1131:33" pos:end="1131:74"><expr pos:start="1131:33" pos:end="1131:73"><call pos:start="1131:33" pos:end="1131:73"><name pos:start="1131:33" pos:end="1131:57">gen_helper_neon_qshlu_s32</name><argument_list pos:start="1131:58" pos:end="1131:73">(<argument pos:start="1131:59" pos:end="1131:61"><expr pos:start="1131:59" pos:end="1131:61"><name pos:start="1131:59" pos:end="1131:61">tmp</name></expr></argument>, <argument pos:start="1131:64" pos:end="1131:66"><expr pos:start="1131:64" pos:end="1131:66"><name pos:start="1131:64" pos:end="1131:66">tmp</name></expr></argument>, <argument pos:start="1131:69" pos:end="1131:72"><expr pos:start="1131:69" pos:end="1131:72"><name pos:start="1131:69" pos:end="1131:72">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1133:33" pos:end="1133:38">break;</break>

                            <default pos:start="1135:29" pos:end="1135:36">default:</default>

                                <expr_stmt pos:start="1137:33" pos:end="1137:40"><expr pos:start="1137:33" pos:end="1137:39"><call pos:start="1137:33" pos:end="1137:39"><name pos:start="1137:33" pos:end="1137:37">abort</name><argument_list pos:start="1137:38" pos:end="1137:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="1141:29" pos:end="1141:34">break;</break>

                        <case pos:start="1143:25" pos:end="1143:31">case <expr pos:start="1143:30" pos:end="1143:30"><literal type="number" pos:start="1143:30" pos:end="1143:30">7</literal></expr>:</case> <comment type="block" pos:start="1143:33" pos:end="1143:43">/* VQSHL */</comment>

                            <expr_stmt pos:start="1145:29" pos:end="1145:54"><expr pos:start="1145:29" pos:end="1145:53"><call pos:start="1145:29" pos:end="1145:53"><name pos:start="1145:29" pos:end="1145:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1145:48" pos:end="1145:53">(<argument pos:start="1145:49" pos:end="1145:52"><expr pos:start="1145:49" pos:end="1145:52"><name pos:start="1145:49" pos:end="1145:52">qshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1147:29" pos:end="1147:34">break;</break>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="1151:25" pos:end="1151:48"><expr pos:start="1151:25" pos:end="1151:47"><call pos:start="1151:25" pos:end="1151:47"><name pos:start="1151:25" pos:end="1151:41">tcg_temp_free_i32</name><argument_list pos:start="1151:42" pos:end="1151:47">(<argument pos:start="1151:43" pos:end="1151:46"><expr pos:start="1151:43" pos:end="1151:46"><name pos:start="1151:43" pos:end="1151:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="1155:25" pos:end="1237:25"><if pos:start="1155:25" pos:end="1165:25">if <condition pos:start="1155:28" pos:end="1155:47">(<expr pos:start="1155:29" pos:end="1155:46"><name pos:start="1155:29" pos:end="1155:30">op</name> <operator pos:start="1155:32" pos:end="1155:33">==</operator> <literal type="number" pos:start="1155:35" pos:end="1155:35">1</literal> <operator pos:start="1155:37" pos:end="1155:38">||</operator> <name pos:start="1155:40" pos:end="1155:41">op</name> <operator pos:start="1155:43" pos:end="1155:44">==</operator> <literal type="number" pos:start="1155:46" pos:end="1155:46">3</literal></expr>)</condition> <block pos:start="1155:49" pos:end="1165:25">{<block_content pos:start="1159:29" pos:end="1163:52">

                            <comment type="block" pos:start="1157:29" pos:end="1157:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="1159:29" pos:end="1159:59"><expr pos:start="1159:29" pos:end="1159:58"><name pos:start="1159:29" pos:end="1159:32">tmp2</name> <operator pos:start="1159:34" pos:end="1159:34">=</operator> <call pos:start="1159:36" pos:end="1159:58"><name pos:start="1159:36" pos:end="1159:48">neon_load_reg</name><argument_list pos:start="1159:49" pos:end="1159:58">(<argument pos:start="1159:50" pos:end="1159:51"><expr pos:start="1159:50" pos:end="1159:51"><name pos:start="1159:50" pos:end="1159:51">rd</name></expr></argument>, <argument pos:start="1159:54" pos:end="1159:57"><expr pos:start="1159:54" pos:end="1159:57"><name pos:start="1159:54" pos:end="1159:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1161:29" pos:end="1161:58"><expr pos:start="1161:29" pos:end="1161:57"><call pos:start="1161:29" pos:end="1161:57"><name pos:start="1161:29" pos:end="1161:40">gen_neon_add</name><argument_list pos:start="1161:41" pos:end="1161:57">(<argument pos:start="1161:42" pos:end="1161:45"><expr pos:start="1161:42" pos:end="1161:45"><name pos:start="1161:42" pos:end="1161:45">size</name></expr></argument>, <argument pos:start="1161:48" pos:end="1161:50"><expr pos:start="1161:48" pos:end="1161:50"><name pos:start="1161:48" pos:end="1161:50">tmp</name></expr></argument>, <argument pos:start="1161:53" pos:end="1161:56"><expr pos:start="1161:53" pos:end="1161:56"><name pos:start="1161:53" pos:end="1161:56">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1163:29" pos:end="1163:52"><expr pos:start="1163:29" pos:end="1163:51"><call pos:start="1163:29" pos:end="1163:51"><name pos:start="1163:29" pos:end="1163:45">tcg_temp_free_i32</name><argument_list pos:start="1163:46" pos:end="1163:51">(<argument pos:start="1163:47" pos:end="1163:50"><expr pos:start="1163:47" pos:end="1163:50"><name pos:start="1163:47" pos:end="1163:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1165:27" pos:end="1237:25">else if <condition pos:start="1165:35" pos:end="1165:61">(<expr pos:start="1165:36" pos:end="1165:60"><name pos:start="1165:36" pos:end="1165:37">op</name> <operator pos:start="1165:39" pos:end="1165:40">==</operator> <literal type="number" pos:start="1165:42" pos:end="1165:42">4</literal> <operator pos:start="1165:44" pos:end="1165:45">||</operator> <operator pos:start="1165:47" pos:end="1165:47">(</operator><name pos:start="1165:48" pos:end="1165:49">op</name> <operator pos:start="1165:51" pos:end="1165:52">==</operator> <literal type="number" pos:start="1165:54" pos:end="1165:54">5</literal> <operator pos:start="1165:56" pos:end="1165:57">&amp;&amp;</operator> <name pos:start="1165:59" pos:end="1165:59">u</name><operator pos:start="1165:60" pos:end="1165:60">)</operator></expr>)</condition> <block pos:start="1165:63" pos:end="1237:25">{<block_content pos:start="1169:29" pos:end="1235:52">

                            <comment type="block" pos:start="1167:29" pos:end="1167:40">/* Insert */</comment>

                            <switch pos:start="1169:29" pos:end="1225:29">switch <condition pos:start="1169:36" pos:end="1169:41">(<expr pos:start="1169:37" pos:end="1169:40"><name pos:start="1169:37" pos:end="1169:40">size</name></expr>)</condition> <block pos:start="1169:43" pos:end="1225:29">{<block_content pos:start="1171:29" pos:end="1223:40">

                            <case pos:start="1171:29" pos:end="1171:35">case <expr pos:start="1171:34" pos:end="1171:34"><literal type="number" pos:start="1171:34" pos:end="1171:34">0</literal></expr>:</case>

                                <if_stmt pos:start="1173:33" pos:end="1179:68"><if pos:start="1173:33" pos:end="1175:58">if <condition pos:start="1173:36" pos:end="1173:44">(<expr pos:start="1173:37" pos:end="1173:43"><name pos:start="1173:37" pos:end="1173:38">op</name> <operator pos:start="1173:40" pos:end="1173:41">==</operator> <literal type="number" pos:start="1173:43" pos:end="1173:43">4</literal></expr>)</condition><block type="pseudo" pos:start="1175:37" pos:end="1175:58"><block_content pos:start="1175:37" pos:end="1175:58">

                                    <expr_stmt pos:start="1175:37" pos:end="1175:58"><expr pos:start="1175:37" pos:end="1175:57"><name pos:start="1175:37" pos:end="1175:40">mask</name> <operator pos:start="1175:42" pos:end="1175:42">=</operator> <literal type="number" pos:start="1175:44" pos:end="1175:47">0xff</literal> <operator pos:start="1175:49" pos:end="1175:50">&gt;&gt;</operator> <operator pos:start="1175:52" pos:end="1175:52">-</operator><name pos:start="1175:53" pos:end="1175:57">shift</name></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="1177:33" pos:end="1179:68">else<block type="pseudo" pos:start="1179:37" pos:end="1179:68"><block_content pos:start="1179:37" pos:end="1179:68">

                                    <expr_stmt pos:start="1179:37" pos:end="1179:68"><expr pos:start="1179:37" pos:end="1179:67"><name pos:start="1179:37" pos:end="1179:40">mask</name> <operator pos:start="1179:42" pos:end="1179:42">=</operator> <operator pos:start="1179:44" pos:end="1179:44">(</operator><name pos:start="1179:45" pos:end="1179:51">uint8_t</name><operator pos:start="1179:52" pos:end="1179:52">)</operator><operator pos:start="1179:53" pos:end="1179:53">(</operator><literal type="number" pos:start="1179:54" pos:end="1179:57">0xff</literal> <operator pos:start="1179:59" pos:end="1179:60">&lt;&lt;</operator> <name pos:start="1179:62" pos:end="1179:66">shift</name><operator pos:start="1179:67" pos:end="1179:67">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="1181:33" pos:end="1181:50"><expr pos:start="1181:33" pos:end="1181:49"><name pos:start="1181:33" pos:end="1181:36">mask</name> <operator pos:start="1181:38" pos:end="1181:39">|=</operator> <name pos:start="1181:41" pos:end="1181:44">mask</name> <operator pos:start="1181:46" pos:end="1181:47">&lt;&lt;</operator> <literal type="number" pos:start="1181:49" pos:end="1181:49">8</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="1183:33" pos:end="1183:51"><expr pos:start="1183:33" pos:end="1183:50"><name pos:start="1183:33" pos:end="1183:36">mask</name> <operator pos:start="1183:38" pos:end="1183:39">|=</operator> <name pos:start="1183:41" pos:end="1183:44">mask</name> <operator pos:start="1183:46" pos:end="1183:47">&lt;&lt;</operator> <literal type="number" pos:start="1183:49" pos:end="1183:50">16</literal></expr>;</expr_stmt>

                                <break pos:start="1185:33" pos:end="1185:38">break;</break>

                            <case pos:start="1187:29" pos:end="1187:35">case <expr pos:start="1187:34" pos:end="1187:34"><literal type="number" pos:start="1187:34" pos:end="1187:34">1</literal></expr>:</case>

                                <if_stmt pos:start="1189:33" pos:end="1195:71"><if pos:start="1189:33" pos:end="1191:60">if <condition pos:start="1189:36" pos:end="1189:44">(<expr pos:start="1189:37" pos:end="1189:43"><name pos:start="1189:37" pos:end="1189:38">op</name> <operator pos:start="1189:40" pos:end="1189:41">==</operator> <literal type="number" pos:start="1189:43" pos:end="1189:43">4</literal></expr>)</condition><block type="pseudo" pos:start="1191:37" pos:end="1191:60"><block_content pos:start="1191:37" pos:end="1191:60">

                                    <expr_stmt pos:start="1191:37" pos:end="1191:60"><expr pos:start="1191:37" pos:end="1191:59"><name pos:start="1191:37" pos:end="1191:40">mask</name> <operator pos:start="1191:42" pos:end="1191:42">=</operator> <literal type="number" pos:start="1191:44" pos:end="1191:49">0xffff</literal> <operator pos:start="1191:51" pos:end="1191:52">&gt;&gt;</operator> <operator pos:start="1191:54" pos:end="1191:54">-</operator><name pos:start="1191:55" pos:end="1191:59">shift</name></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="1193:33" pos:end="1195:71">else<block type="pseudo" pos:start="1195:37" pos:end="1195:71"><block_content pos:start="1195:37" pos:end="1195:71">

                                    <expr_stmt pos:start="1195:37" pos:end="1195:71"><expr pos:start="1195:37" pos:end="1195:70"><name pos:start="1195:37" pos:end="1195:40">mask</name> <operator pos:start="1195:42" pos:end="1195:42">=</operator> <operator pos:start="1195:44" pos:end="1195:44">(</operator><name pos:start="1195:45" pos:end="1195:52">uint16_t</name><operator pos:start="1195:53" pos:end="1195:53">)</operator><operator pos:start="1195:54" pos:end="1195:54">(</operator><literal type="number" pos:start="1195:55" pos:end="1195:60">0xffff</literal> <operator pos:start="1195:62" pos:end="1195:63">&lt;&lt;</operator> <name pos:start="1195:65" pos:end="1195:69">shift</name><operator pos:start="1195:70" pos:end="1195:70">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="1197:33" pos:end="1197:51"><expr pos:start="1197:33" pos:end="1197:50"><name pos:start="1197:33" pos:end="1197:36">mask</name> <operator pos:start="1197:38" pos:end="1197:39">|=</operator> <name pos:start="1197:41" pos:end="1197:44">mask</name> <operator pos:start="1197:46" pos:end="1197:47">&lt;&lt;</operator> <literal type="number" pos:start="1197:49" pos:end="1197:50">16</literal></expr>;</expr_stmt>

                                <break pos:start="1199:33" pos:end="1199:38">break;</break>

                            <case pos:start="1201:29" pos:end="1201:35">case <expr pos:start="1201:34" pos:end="1201:34"><literal type="number" pos:start="1201:34" pos:end="1201:34">2</literal></expr>:</case>

                                <if_stmt pos:start="1203:33" pos:end="1217:33"><if pos:start="1203:33" pos:end="1207:33">if <condition pos:start="1203:36" pos:end="1203:62">(<expr pos:start="1203:37" pos:end="1203:61"><name pos:start="1203:37" pos:end="1203:58"><name pos:start="1203:37" pos:end="1203:41">shift</name> <argument_list type="generic" pos:start="1203:43" pos:end="1203:58">&lt; <argument pos:start="1203:45" pos:end="1203:56"><expr pos:start="1203:45" pos:end="1203:56"><operator pos:start="1203:45" pos:end="1203:45">-</operator><literal type="number" pos:start="1203:46" pos:end="1203:47">31</literal> <operator pos:start="1203:49" pos:end="1203:50">||</operator> <name pos:start="1203:52" pos:end="1203:56">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="1203:60" pos:end="1203:61">31</literal></expr>)</condition> <block pos:start="1203:64" pos:end="1207:33">{<block_content pos:start="1205:37" pos:end="1205:45">

                                    <expr_stmt pos:start="1205:37" pos:end="1205:45"><expr pos:start="1205:37" pos:end="1205:44"><name pos:start="1205:37" pos:end="1205:40">mask</name> <operator pos:start="1205:42" pos:end="1205:42">=</operator> <literal type="number" pos:start="1205:44" pos:end="1205:44">0</literal></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="1207:35" pos:end="1217:33">else <block pos:start="1207:40" pos:end="1217:33">{<block_content pos:start="1209:37" pos:end="1215:68">

                                    <if_stmt pos:start="1209:37" pos:end="1215:68"><if pos:start="1209:37" pos:end="1211:69">if <condition pos:start="1209:40" pos:end="1209:48">(<expr pos:start="1209:41" pos:end="1209:47"><name pos:start="1209:41" pos:end="1209:42">op</name> <operator pos:start="1209:44" pos:end="1209:45">==</operator> <literal type="number" pos:start="1209:47" pos:end="1209:47">4</literal></expr>)</condition><block type="pseudo" pos:start="1211:41" pos:end="1211:69"><block_content pos:start="1211:41" pos:end="1211:69">

                                        <expr_stmt pos:start="1211:41" pos:end="1211:69"><expr pos:start="1211:41" pos:end="1211:68"><name pos:start="1211:41" pos:end="1211:44">mask</name> <operator pos:start="1211:46" pos:end="1211:46">=</operator> <literal type="number" pos:start="1211:48" pos:end="1211:58">0xffffffffu</literal> <operator pos:start="1211:60" pos:end="1211:61">&gt;&gt;</operator> <operator pos:start="1211:63" pos:end="1211:63">-</operator><name pos:start="1211:64" pos:end="1211:68">shift</name></expr>;</expr_stmt></block_content></block></if>

                                    <else pos:start="1213:37" pos:end="1215:68">else<block type="pseudo" pos:start="1215:41" pos:end="1215:68"><block_content pos:start="1215:41" pos:end="1215:68">

                                        <expr_stmt pos:start="1215:41" pos:end="1215:68"><expr pos:start="1215:41" pos:end="1215:67"><name pos:start="1215:41" pos:end="1215:44">mask</name> <operator pos:start="1215:46" pos:end="1215:46">=</operator> <literal type="number" pos:start="1215:48" pos:end="1215:58">0xffffffffu</literal> <operator pos:start="1215:60" pos:end="1215:61">&lt;&lt;</operator> <name pos:start="1215:63" pos:end="1215:67">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                </block_content>}</block></else></if_stmt>

                                <break pos:start="1219:33" pos:end="1219:38">break;</break>

                            <default pos:start="1221:29" pos:end="1221:36">default:</default>

                                <expr_stmt pos:start="1223:33" pos:end="1223:40"><expr pos:start="1223:33" pos:end="1223:39"><call pos:start="1223:33" pos:end="1223:39"><name pos:start="1223:33" pos:end="1223:37">abort</name><argument_list pos:start="1223:38" pos:end="1223:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="1227:29" pos:end="1227:59"><expr pos:start="1227:29" pos:end="1227:58"><name pos:start="1227:29" pos:end="1227:32">tmp2</name> <operator pos:start="1227:34" pos:end="1227:34">=</operator> <call pos:start="1227:36" pos:end="1227:58"><name pos:start="1227:36" pos:end="1227:48">neon_load_reg</name><argument_list pos:start="1227:49" pos:end="1227:58">(<argument pos:start="1227:50" pos:end="1227:51"><expr pos:start="1227:50" pos:end="1227:51"><name pos:start="1227:50" pos:end="1227:51">rd</name></expr></argument>, <argument pos:start="1227:54" pos:end="1227:57"><expr pos:start="1227:54" pos:end="1227:57"><name pos:start="1227:54" pos:end="1227:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1229:29" pos:end="1229:61"><expr pos:start="1229:29" pos:end="1229:60"><call pos:start="1229:29" pos:end="1229:60"><name pos:start="1229:29" pos:end="1229:44">tcg_gen_andi_i32</name><argument_list pos:start="1229:45" pos:end="1229:60">(<argument pos:start="1229:46" pos:end="1229:48"><expr pos:start="1229:46" pos:end="1229:48"><name pos:start="1229:46" pos:end="1229:48">tmp</name></expr></argument>, <argument pos:start="1229:51" pos:end="1229:53"><expr pos:start="1229:51" pos:end="1229:53"><name pos:start="1229:51" pos:end="1229:53">tmp</name></expr></argument>, <argument pos:start="1229:56" pos:end="1229:59"><expr pos:start="1229:56" pos:end="1229:59"><name pos:start="1229:56" pos:end="1229:59">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1231:29" pos:end="1231:64"><expr pos:start="1231:29" pos:end="1231:63"><call pos:start="1231:29" pos:end="1231:63"><name pos:start="1231:29" pos:end="1231:44">tcg_gen_andi_i32</name><argument_list pos:start="1231:45" pos:end="1231:63">(<argument pos:start="1231:46" pos:end="1231:49"><expr pos:start="1231:46" pos:end="1231:49"><name pos:start="1231:46" pos:end="1231:49">tmp2</name></expr></argument>, <argument pos:start="1231:52" pos:end="1231:55"><expr pos:start="1231:52" pos:end="1231:55"><name pos:start="1231:52" pos:end="1231:55">tmp2</name></expr></argument>, <argument pos:start="1231:58" pos:end="1231:62"><expr pos:start="1231:58" pos:end="1231:62"><operator pos:start="1231:58" pos:end="1231:58">~</operator><name pos:start="1231:59" pos:end="1231:62">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1233:29" pos:end="1233:59"><expr pos:start="1233:29" pos:end="1233:58"><call pos:start="1233:29" pos:end="1233:58"><name pos:start="1233:29" pos:end="1233:42">tcg_gen_or_i32</name><argument_list pos:start="1233:43" pos:end="1233:58">(<argument pos:start="1233:44" pos:end="1233:46"><expr pos:start="1233:44" pos:end="1233:46"><name pos:start="1233:44" pos:end="1233:46">tmp</name></expr></argument>, <argument pos:start="1233:49" pos:end="1233:51"><expr pos:start="1233:49" pos:end="1233:51"><name pos:start="1233:49" pos:end="1233:51">tmp</name></expr></argument>, <argument pos:start="1233:54" pos:end="1233:57"><expr pos:start="1233:54" pos:end="1233:57"><name pos:start="1233:54" pos:end="1233:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1235:29" pos:end="1235:52"><expr pos:start="1235:29" pos:end="1235:51"><call pos:start="1235:29" pos:end="1235:51"><name pos:start="1235:29" pos:end="1235:45">tcg_temp_free_i32</name><argument_list pos:start="1235:46" pos:end="1235:51">(<argument pos:start="1235:47" pos:end="1235:50"><expr pos:start="1235:47" pos:end="1235:50"><name pos:start="1235:47" pos:end="1235:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1239:25" pos:end="1239:54"><expr pos:start="1239:25" pos:end="1239:53"><call pos:start="1239:25" pos:end="1239:53"><name pos:start="1239:25" pos:end="1239:38">neon_store_reg</name><argument_list pos:start="1239:39" pos:end="1239:53">(<argument pos:start="1239:40" pos:end="1239:41"><expr pos:start="1239:40" pos:end="1239:41"><name pos:start="1239:40" pos:end="1239:41">rd</name></expr></argument>, <argument pos:start="1239:44" pos:end="1239:47"><expr pos:start="1239:44" pos:end="1239:47"><name pos:start="1239:44" pos:end="1239:47">pass</name></expr></argument>, <argument pos:start="1239:50" pos:end="1239:52"><expr pos:start="1239:50" pos:end="1239:52"><name pos:start="1239:50" pos:end="1239:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for> <comment type="block" pos:start="1243:19" pos:end="1243:32">/* for pass */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="1245:15" pos:end="1391:13">else if <condition pos:start="1245:23" pos:end="1245:31">(<expr pos:start="1245:24" pos:end="1245:30"><name pos:start="1245:24" pos:end="1245:25">op</name> <operator pos:start="1245:27" pos:end="1245:27">&lt;</operator> <literal type="number" pos:start="1245:29" pos:end="1245:30">10</literal></expr>)</condition> <block pos:start="1245:33" pos:end="1391:13">{<block_content pos:start="1251:17" pos:end="1389:17">

                <comment type="block" pos:start="1247:17" pos:end="1249:54">/* Shift by immediate and narrow:

                   VSHRN, VRSHRN, VQSHRN, VQRSHRN.  */</comment>

                <decl_stmt pos:start="1251:17" pos:end="1251:56"><decl pos:start="1251:17" pos:end="1251:55"><type pos:start="1251:17" pos:end="1251:19"><name pos:start="1251:17" pos:end="1251:19">int</name></type> <name pos:start="1251:21" pos:end="1251:34">input_unsigned</name> <init pos:start="1251:36" pos:end="1251:55">= <expr pos:start="1251:38" pos:end="1251:55"><ternary pos:start="1251:38" pos:end="1251:55"><condition pos:start="1251:38" pos:end="1251:48"><expr pos:start="1251:38" pos:end="1251:46"><operator pos:start="1251:38" pos:end="1251:38">(</operator><name pos:start="1251:39" pos:end="1251:40">op</name> <operator pos:start="1251:42" pos:end="1251:43">==</operator> <literal type="number" pos:start="1251:45" pos:end="1251:45">8</literal><operator pos:start="1251:46" pos:end="1251:46">)</operator></expr> ?</condition><then pos:start="1251:50" pos:end="1251:51"> <expr pos:start="1251:50" pos:end="1251:51"><operator pos:start="1251:50" pos:end="1251:50">!</operator><name pos:start="1251:51" pos:end="1251:51">u</name></expr> </then><else pos:start="1251:53" pos:end="1251:55">: <expr pos:start="1251:55" pos:end="1251:55"><name pos:start="1251:55" pos:end="1251:55">u</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1253:17" pos:end="1257:17"><if pos:start="1253:17" pos:end="1257:17">if <condition pos:start="1253:20" pos:end="1253:27">(<expr pos:start="1253:21" pos:end="1253:26"><name pos:start="1253:21" pos:end="1253:22">rm</name> <operator pos:start="1253:24" pos:end="1253:24">&amp;</operator> <literal type="number" pos:start="1253:26" pos:end="1253:26">1</literal></expr>)</condition> <block pos:start="1253:29" pos:end="1257:17">{<block_content pos:start="1255:21" pos:end="1255:29">

                    <return pos:start="1255:21" pos:end="1255:29">return <expr pos:start="1255:28" pos:end="1255:28"><literal type="number" pos:start="1255:28" pos:end="1255:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1259:17" pos:end="1259:50"><expr pos:start="1259:17" pos:end="1259:49"><name pos:start="1259:17" pos:end="1259:21">shift</name> <operator pos:start="1259:23" pos:end="1259:23">=</operator> <name pos:start="1259:25" pos:end="1259:29">shift</name> <operator pos:start="1259:31" pos:end="1259:31">-</operator> <operator pos:start="1259:33" pos:end="1259:33">(</operator><literal type="number" pos:start="1259:34" pos:end="1259:34">1</literal> <operator pos:start="1259:36" pos:end="1259:37">&lt;&lt;</operator> <operator pos:start="1259:39" pos:end="1259:39">(</operator><name pos:start="1259:40" pos:end="1259:43">size</name> <operator pos:start="1259:45" pos:end="1259:45">+</operator> <literal type="number" pos:start="1259:47" pos:end="1259:47">3</literal><operator pos:start="1259:48" pos:end="1259:48">)</operator><operator pos:start="1259:49" pos:end="1259:49">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1261:17" pos:end="1261:23"><expr pos:start="1261:17" pos:end="1261:22"><name pos:start="1261:17" pos:end="1261:20">size</name><operator pos:start="1261:21" pos:end="1261:22">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1263:17" pos:end="1389:17"><if pos:start="1263:17" pos:end="1321:17">if <condition pos:start="1263:20" pos:end="1263:30">(<expr pos:start="1263:21" pos:end="1263:29"><name pos:start="1263:21" pos:end="1263:24">size</name> <operator pos:start="1263:26" pos:end="1263:27">==</operator> <literal type="number" pos:start="1263:29" pos:end="1263:29">3</literal></expr>)</condition> <block pos:start="1263:32" pos:end="1321:17">{<block_content pos:start="1265:21" pos:end="1319:45">

                    <expr_stmt pos:start="1265:21" pos:end="1265:49"><expr pos:start="1265:21" pos:end="1265:48"><name pos:start="1265:21" pos:end="1265:25">tmp64</name> <operator pos:start="1265:27" pos:end="1265:27">=</operator> <call pos:start="1265:29" pos:end="1265:48"><name pos:start="1265:29" pos:end="1265:41">tcg_const_i64</name><argument_list pos:start="1265:42" pos:end="1265:48">(<argument pos:start="1265:43" pos:end="1265:47"><expr pos:start="1265:43" pos:end="1265:47"><name pos:start="1265:43" pos:end="1265:47">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1267:21" pos:end="1267:48"><expr pos:start="1267:21" pos:end="1267:47"><call pos:start="1267:21" pos:end="1267:47"><name pos:start="1267:21" pos:end="1267:35">neon_load_reg64</name><argument_list pos:start="1267:36" pos:end="1267:47">(<argument pos:start="1267:37" pos:end="1267:42"><expr pos:start="1267:37" pos:end="1267:42"><name pos:start="1267:37" pos:end="1267:42">cpu_V0</name></expr></argument>, <argument pos:start="1267:45" pos:end="1267:46"><expr pos:start="1267:45" pos:end="1267:46"><name pos:start="1267:45" pos:end="1267:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1269:21" pos:end="1269:52"><expr pos:start="1269:21" pos:end="1269:51"><call pos:start="1269:21" pos:end="1269:51"><name pos:start="1269:21" pos:end="1269:35">neon_load_reg64</name><argument_list pos:start="1269:36" pos:end="1269:51">(<argument pos:start="1269:37" pos:end="1269:42"><expr pos:start="1269:37" pos:end="1269:42"><name pos:start="1269:37" pos:end="1269:42">cpu_V1</name></expr></argument>, <argument pos:start="1269:45" pos:end="1269:50"><expr pos:start="1269:45" pos:end="1269:50"><name pos:start="1269:45" pos:end="1269:46">rm</name> <operator pos:start="1269:48" pos:end="1269:48">+</operator> <literal type="number" pos:start="1269:50" pos:end="1269:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="1271:21" pos:end="1317:21">for <control pos:start="1271:25" pos:end="1271:52">(<init pos:start="1271:26" pos:end="1271:34"><expr pos:start="1271:26" pos:end="1271:33"><name pos:start="1271:26" pos:end="1271:29">pass</name> <operator pos:start="1271:31" pos:end="1271:31">=</operator> <literal type="number" pos:start="1271:33" pos:end="1271:33">0</literal></expr>;</init> <condition pos:start="1271:36" pos:end="1271:44"><expr pos:start="1271:36" pos:end="1271:43"><name pos:start="1271:36" pos:end="1271:39">pass</name> <operator pos:start="1271:41" pos:end="1271:41">&lt;</operator> <literal type="number" pos:start="1271:43" pos:end="1271:43">2</literal></expr>;</condition> <incr pos:start="1271:46" pos:end="1271:51"><expr pos:start="1271:46" pos:end="1271:51"><name pos:start="1271:46" pos:end="1271:49">pass</name><operator pos:start="1271:50" pos:end="1271:51">++</operator></expr></incr>)</control> <block pos:start="1271:54" pos:end="1317:21">{<block_content pos:start="1273:25" pos:end="1315:54">

                        <decl_stmt pos:start="1273:25" pos:end="1273:36"><decl pos:start="1273:25" pos:end="1273:35"><type pos:start="1273:25" pos:end="1273:32"><name pos:start="1273:25" pos:end="1273:32">TCGv_i64</name></type> <name pos:start="1273:34" pos:end="1273:35">in</name></decl>;</decl_stmt>

                        <if_stmt pos:start="1275:25" pos:end="1283:25"><if pos:start="1275:25" pos:end="1279:25">if <condition pos:start="1275:28" pos:end="1275:38">(<expr pos:start="1275:29" pos:end="1275:37"><name pos:start="1275:29" pos:end="1275:32">pass</name> <operator pos:start="1275:34" pos:end="1275:35">==</operator> <literal type="number" pos:start="1275:37" pos:end="1275:37">0</literal></expr>)</condition> <block pos:start="1275:40" pos:end="1279:25">{<block_content pos:start="1277:29" pos:end="1277:40">

                            <expr_stmt pos:start="1277:29" pos:end="1277:40"><expr pos:start="1277:29" pos:end="1277:39"><name pos:start="1277:29" pos:end="1277:30">in</name> <operator pos:start="1277:32" pos:end="1277:32">=</operator> <name pos:start="1277:34" pos:end="1277:39">cpu_V0</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1279:27" pos:end="1283:25">else <block pos:start="1279:32" pos:end="1283:25">{<block_content pos:start="1281:29" pos:end="1281:40">

                            <expr_stmt pos:start="1281:29" pos:end="1281:40"><expr pos:start="1281:29" pos:end="1281:39"><name pos:start="1281:29" pos:end="1281:30">in</name> <operator pos:start="1281:32" pos:end="1281:32">=</operator> <name pos:start="1281:34" pos:end="1281:39">cpu_V1</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1285:25" pos:end="1309:25"><if pos:start="1285:25" pos:end="1297:25">if <condition pos:start="1285:28" pos:end="1285:30">(<expr pos:start="1285:29" pos:end="1285:29"><name pos:start="1285:29" pos:end="1285:29">q</name></expr>)</condition> <block pos:start="1285:32" pos:end="1297:25">{<block_content pos:start="1287:29" pos:end="1295:29">

                            <if_stmt pos:start="1287:29" pos:end="1295:29"><if pos:start="1287:29" pos:end="1291:29">if <condition pos:start="1287:32" pos:end="1287:47">(<expr pos:start="1287:33" pos:end="1287:46"><name pos:start="1287:33" pos:end="1287:46">input_unsigned</name></expr>)</condition> <block pos:start="1287:49" pos:end="1291:29">{<block_content pos:start="1289:33" pos:end="1289:76">

                                <expr_stmt pos:start="1289:33" pos:end="1289:76"><expr pos:start="1289:33" pos:end="1289:75"><call pos:start="1289:33" pos:end="1289:75"><name pos:start="1289:33" pos:end="1289:56">gen_helper_neon_rshl_u64</name><argument_list pos:start="1289:57" pos:end="1289:75">(<argument pos:start="1289:58" pos:end="1289:63"><expr pos:start="1289:58" pos:end="1289:63"><name pos:start="1289:58" pos:end="1289:63">cpu_V0</name></expr></argument>, <argument pos:start="1289:66" pos:end="1289:67"><expr pos:start="1289:66" pos:end="1289:67"><name pos:start="1289:66" pos:end="1289:67">in</name></expr></argument>, <argument pos:start="1289:70" pos:end="1289:74"><expr pos:start="1289:70" pos:end="1289:74"><name pos:start="1289:70" pos:end="1289:74">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1291:31" pos:end="1295:29">else <block pos:start="1291:36" pos:end="1295:29">{<block_content pos:start="1293:33" pos:end="1293:76">

                                <expr_stmt pos:start="1293:33" pos:end="1293:76"><expr pos:start="1293:33" pos:end="1293:75"><call pos:start="1293:33" pos:end="1293:75"><name pos:start="1293:33" pos:end="1293:56">gen_helper_neon_rshl_s64</name><argument_list pos:start="1293:57" pos:end="1293:75">(<argument pos:start="1293:58" pos:end="1293:63"><expr pos:start="1293:58" pos:end="1293:63"><name pos:start="1293:58" pos:end="1293:63">cpu_V0</name></expr></argument>, <argument pos:start="1293:66" pos:end="1293:67"><expr pos:start="1293:66" pos:end="1293:67"><name pos:start="1293:66" pos:end="1293:67">in</name></expr></argument>, <argument pos:start="1293:70" pos:end="1293:74"><expr pos:start="1293:70" pos:end="1293:74"><name pos:start="1293:70" pos:end="1293:74">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="1297:27" pos:end="1309:25">else <block pos:start="1297:32" pos:end="1309:25">{<block_content pos:start="1299:29" pos:end="1307:29">

                            <if_stmt pos:start="1299:29" pos:end="1307:29"><if pos:start="1299:29" pos:end="1303:29">if <condition pos:start="1299:32" pos:end="1299:47">(<expr pos:start="1299:33" pos:end="1299:46"><name pos:start="1299:33" pos:end="1299:46">input_unsigned</name></expr>)</condition> <block pos:start="1299:49" pos:end="1303:29">{<block_content pos:start="1301:33" pos:end="1301:75">

                                <expr_stmt pos:start="1301:33" pos:end="1301:75"><expr pos:start="1301:33" pos:end="1301:74"><call pos:start="1301:33" pos:end="1301:74"><name pos:start="1301:33" pos:end="1301:55">gen_helper_neon_shl_u64</name><argument_list pos:start="1301:56" pos:end="1301:74">(<argument pos:start="1301:57" pos:end="1301:62"><expr pos:start="1301:57" pos:end="1301:62"><name pos:start="1301:57" pos:end="1301:62">cpu_V0</name></expr></argument>, <argument pos:start="1301:65" pos:end="1301:66"><expr pos:start="1301:65" pos:end="1301:66"><name pos:start="1301:65" pos:end="1301:66">in</name></expr></argument>, <argument pos:start="1301:69" pos:end="1301:73"><expr pos:start="1301:69" pos:end="1301:73"><name pos:start="1301:69" pos:end="1301:73">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1303:31" pos:end="1307:29">else <block pos:start="1303:36" pos:end="1307:29">{<block_content pos:start="1305:33" pos:end="1305:75">

                                <expr_stmt pos:start="1305:33" pos:end="1305:75"><expr pos:start="1305:33" pos:end="1305:74"><call pos:start="1305:33" pos:end="1305:74"><name pos:start="1305:33" pos:end="1305:55">gen_helper_neon_shl_s64</name><argument_list pos:start="1305:56" pos:end="1305:74">(<argument pos:start="1305:57" pos:end="1305:62"><expr pos:start="1305:57" pos:end="1305:62"><name pos:start="1305:57" pos:end="1305:62">cpu_V0</name></expr></argument>, <argument pos:start="1305:65" pos:end="1305:66"><expr pos:start="1305:65" pos:end="1305:66"><name pos:start="1305:65" pos:end="1305:66">in</name></expr></argument>, <argument pos:start="1305:69" pos:end="1305:73"><expr pos:start="1305:69" pos:end="1305:73"><name pos:start="1305:69" pos:end="1305:73">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1311:25" pos:end="1311:49"><expr pos:start="1311:25" pos:end="1311:48"><name pos:start="1311:25" pos:end="1311:27">tmp</name> <operator pos:start="1311:29" pos:end="1311:29">=</operator> <call pos:start="1311:31" pos:end="1311:48"><name pos:start="1311:31" pos:end="1311:46">tcg_temp_new_i32</name><argument_list pos:start="1311:47" pos:end="1311:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1313:25" pos:end="1313:78"><expr pos:start="1313:25" pos:end="1313:77"><call pos:start="1313:25" pos:end="1313:77"><name pos:start="1313:25" pos:end="1313:42">gen_neon_narrow_op</name><argument_list pos:start="1313:43" pos:end="1313:77">(<argument pos:start="1313:44" pos:end="1313:50"><expr pos:start="1313:44" pos:end="1313:50"><name pos:start="1313:44" pos:end="1313:45">op</name> <operator pos:start="1313:47" pos:end="1313:48">==</operator> <literal type="number" pos:start="1313:50" pos:end="1313:50">8</literal></expr></argument>, <argument pos:start="1313:53" pos:end="1313:53"><expr pos:start="1313:53" pos:end="1313:53"><name pos:start="1313:53" pos:end="1313:53">u</name></expr></argument>, <argument pos:start="1313:56" pos:end="1313:63"><expr pos:start="1313:56" pos:end="1313:63"><name pos:start="1313:56" pos:end="1313:59">size</name> <operator pos:start="1313:61" pos:end="1313:61">-</operator> <literal type="number" pos:start="1313:63" pos:end="1313:63">1</literal></expr></argument>, <argument pos:start="1313:66" pos:end="1313:68"><expr pos:start="1313:66" pos:end="1313:68"><name pos:start="1313:66" pos:end="1313:68">tmp</name></expr></argument>, <argument pos:start="1313:71" pos:end="1313:76"><expr pos:start="1313:71" pos:end="1313:76"><name pos:start="1313:71" pos:end="1313:76">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1315:25" pos:end="1315:54"><expr pos:start="1315:25" pos:end="1315:53"><call pos:start="1315:25" pos:end="1315:53"><name pos:start="1315:25" pos:end="1315:38">neon_store_reg</name><argument_list pos:start="1315:39" pos:end="1315:53">(<argument pos:start="1315:40" pos:end="1315:41"><expr pos:start="1315:40" pos:end="1315:41"><name pos:start="1315:40" pos:end="1315:41">rd</name></expr></argument>, <argument pos:start="1315:44" pos:end="1315:47"><expr pos:start="1315:44" pos:end="1315:47"><name pos:start="1315:44" pos:end="1315:47">pass</name></expr></argument>, <argument pos:start="1315:50" pos:end="1315:52"><expr pos:start="1315:50" pos:end="1315:52"><name pos:start="1315:50" pos:end="1315:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for> <comment type="block" pos:start="1317:23" pos:end="1317:36">/* for pass */</comment>

                    <expr_stmt pos:start="1319:21" pos:end="1319:45"><expr pos:start="1319:21" pos:end="1319:44"><call pos:start="1319:21" pos:end="1319:44"><name pos:start="1319:21" pos:end="1319:37">tcg_temp_free_i64</name><argument_list pos:start="1319:38" pos:end="1319:44">(<argument pos:start="1319:39" pos:end="1319:43"><expr pos:start="1319:39" pos:end="1319:43"><name pos:start="1319:39" pos:end="1319:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1321:19" pos:end="1389:17">else <block pos:start="1321:24" pos:end="1389:17">{<block_content pos:start="1323:21" pos:end="1387:44">

                    <if_stmt pos:start="1323:21" pos:end="1335:21"><if pos:start="1323:21" pos:end="1329:21">if <condition pos:start="1323:24" pos:end="1323:34">(<expr pos:start="1323:25" pos:end="1323:33"><name pos:start="1323:25" pos:end="1323:28">size</name> <operator pos:start="1323:30" pos:end="1323:31">==</operator> <literal type="number" pos:start="1323:33" pos:end="1323:33">1</literal></expr>)</condition> <block pos:start="1323:36" pos:end="1329:21">{<block_content pos:start="1325:25" pos:end="1327:41">

                        <expr_stmt pos:start="1325:25" pos:end="1325:46"><expr pos:start="1325:25" pos:end="1325:45"><name pos:start="1325:25" pos:end="1325:27">imm</name> <operator pos:start="1325:29" pos:end="1325:29">=</operator> <operator pos:start="1325:31" pos:end="1325:31">(</operator><name pos:start="1325:32" pos:end="1325:39">uint16_t</name><operator pos:start="1325:40" pos:end="1325:40">)</operator><name pos:start="1325:41" pos:end="1325:45">shift</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1327:25" pos:end="1327:41"><expr pos:start="1327:25" pos:end="1327:40"><name pos:start="1327:25" pos:end="1327:27">imm</name> <operator pos:start="1327:29" pos:end="1327:30">|=</operator> <name pos:start="1327:32" pos:end="1327:34">imm</name> <operator pos:start="1327:36" pos:end="1327:37">&lt;&lt;</operator> <literal type="number" pos:start="1327:39" pos:end="1327:40">16</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1329:23" pos:end="1335:21">else <block pos:start="1329:28" pos:end="1335:21">{<block_content pos:start="1333:25" pos:end="1333:46">

                        <comment type="block" pos:start="1331:25" pos:end="1331:39">/* size == 2 */</comment>

                        <expr_stmt pos:start="1333:25" pos:end="1333:46"><expr pos:start="1333:25" pos:end="1333:45"><name pos:start="1333:25" pos:end="1333:27">imm</name> <operator pos:start="1333:29" pos:end="1333:29">=</operator> <operator pos:start="1333:31" pos:end="1333:31">(</operator><name pos:start="1333:32" pos:end="1333:39">uint32_t</name><operator pos:start="1333:40" pos:end="1333:40">)</operator><name pos:start="1333:41" pos:end="1333:45">shift</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1337:21" pos:end="1337:46"><expr pos:start="1337:21" pos:end="1337:45"><name pos:start="1337:21" pos:end="1337:24">tmp2</name> <operator pos:start="1337:26" pos:end="1337:26">=</operator> <call pos:start="1337:28" pos:end="1337:45"><name pos:start="1337:28" pos:end="1337:40">tcg_const_i32</name><argument_list pos:start="1337:41" pos:end="1337:45">(<argument pos:start="1337:42" pos:end="1337:44"><expr pos:start="1337:42" pos:end="1337:44"><name pos:start="1337:42" pos:end="1337:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1339:21" pos:end="1339:52"><expr pos:start="1339:21" pos:end="1339:51"><name pos:start="1339:21" pos:end="1339:24">tmp4</name> <operator pos:start="1339:26" pos:end="1339:26">=</operator> <call pos:start="1339:28" pos:end="1339:51"><name pos:start="1339:28" pos:end="1339:40">neon_load_reg</name><argument_list pos:start="1339:41" pos:end="1339:51">(<argument pos:start="1339:42" pos:end="1339:47"><expr pos:start="1339:42" pos:end="1339:47"><name pos:start="1339:42" pos:end="1339:43">rm</name> <operator pos:start="1339:45" pos:end="1339:45">+</operator> <literal type="number" pos:start="1339:47" pos:end="1339:47">1</literal></expr></argument>, <argument pos:start="1339:50" pos:end="1339:50"><expr pos:start="1339:50" pos:end="1339:50"><literal type="number" pos:start="1339:50" pos:end="1339:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1341:21" pos:end="1341:52"><expr pos:start="1341:21" pos:end="1341:51"><name pos:start="1341:21" pos:end="1341:24">tmp5</name> <operator pos:start="1341:26" pos:end="1341:26">=</operator> <call pos:start="1341:28" pos:end="1341:51"><name pos:start="1341:28" pos:end="1341:40">neon_load_reg</name><argument_list pos:start="1341:41" pos:end="1341:51">(<argument pos:start="1341:42" pos:end="1341:47"><expr pos:start="1341:42" pos:end="1341:47"><name pos:start="1341:42" pos:end="1341:43">rm</name> <operator pos:start="1341:45" pos:end="1341:45">+</operator> <literal type="number" pos:start="1341:47" pos:end="1341:47">1</literal></expr></argument>, <argument pos:start="1341:50" pos:end="1341:50"><expr pos:start="1341:50" pos:end="1341:50"><literal type="number" pos:start="1341:50" pos:end="1341:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="1343:21" pos:end="1385:21">for <control pos:start="1343:25" pos:end="1343:52">(<init pos:start="1343:26" pos:end="1343:34"><expr pos:start="1343:26" pos:end="1343:33"><name pos:start="1343:26" pos:end="1343:29">pass</name> <operator pos:start="1343:31" pos:end="1343:31">=</operator> <literal type="number" pos:start="1343:33" pos:end="1343:33">0</literal></expr>;</init> <condition pos:start="1343:36" pos:end="1343:44"><expr pos:start="1343:36" pos:end="1343:43"><name pos:start="1343:36" pos:end="1343:39">pass</name> <operator pos:start="1343:41" pos:end="1343:41">&lt;</operator> <literal type="number" pos:start="1343:43" pos:end="1343:43">2</literal></expr>;</condition> <incr pos:start="1343:46" pos:end="1343:51"><expr pos:start="1343:46" pos:end="1343:51"><name pos:start="1343:46" pos:end="1343:49">pass</name><operator pos:start="1343:50" pos:end="1343:51">++</operator></expr></incr>)</control> <block pos:start="1343:54" pos:end="1385:21">{<block_content pos:start="1345:25" pos:end="1383:54">

                        <if_stmt pos:start="1345:25" pos:end="1353:25"><if pos:start="1345:25" pos:end="1349:25">if <condition pos:start="1345:28" pos:end="1345:38">(<expr pos:start="1345:29" pos:end="1345:37"><name pos:start="1345:29" pos:end="1345:32">pass</name> <operator pos:start="1345:34" pos:end="1345:35">==</operator> <literal type="number" pos:start="1345:37" pos:end="1345:37">0</literal></expr>)</condition> <block pos:start="1345:40" pos:end="1349:25">{<block_content pos:start="1347:29" pos:end="1347:55">

                            <expr_stmt pos:start="1347:29" pos:end="1347:55"><expr pos:start="1347:29" pos:end="1347:54"><name pos:start="1347:29" pos:end="1347:31">tmp</name> <operator pos:start="1347:33" pos:end="1347:33">=</operator> <call pos:start="1347:35" pos:end="1347:54"><name pos:start="1347:35" pos:end="1347:47">neon_load_reg</name><argument_list pos:start="1347:48" pos:end="1347:54">(<argument pos:start="1347:49" pos:end="1347:50"><expr pos:start="1347:49" pos:end="1347:50"><name pos:start="1347:49" pos:end="1347:50">rm</name></expr></argument>, <argument pos:start="1347:53" pos:end="1347:53"><expr pos:start="1347:53" pos:end="1347:53"><literal type="number" pos:start="1347:53" pos:end="1347:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1349:27" pos:end="1353:25">else <block pos:start="1349:32" pos:end="1353:25">{<block_content pos:start="1351:29" pos:end="1351:39">

                            <expr_stmt pos:start="1351:29" pos:end="1351:39"><expr pos:start="1351:29" pos:end="1351:38"><name pos:start="1351:29" pos:end="1351:31">tmp</name> <operator pos:start="1351:33" pos:end="1351:33">=</operator> <name pos:start="1351:35" pos:end="1351:38">tmp4</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1355:25" pos:end="1357:62"><expr pos:start="1355:25" pos:end="1357:61"><call pos:start="1355:25" pos:end="1357:61"><name pos:start="1355:25" pos:end="1355:45">gen_neon_shift_narrow</name><argument_list pos:start="1355:46" pos:end="1357:61">(<argument pos:start="1355:47" pos:end="1355:50"><expr pos:start="1355:47" pos:end="1355:50"><name pos:start="1355:47" pos:end="1355:50">size</name></expr></argument>, <argument pos:start="1355:53" pos:end="1355:55"><expr pos:start="1355:53" pos:end="1355:55"><name pos:start="1355:53" pos:end="1355:55">tmp</name></expr></argument>, <argument pos:start="1355:58" pos:end="1355:61"><expr pos:start="1355:58" pos:end="1355:61"><name pos:start="1355:58" pos:end="1355:61">tmp2</name></expr></argument>, <argument pos:start="1355:64" pos:end="1355:64"><expr pos:start="1355:64" pos:end="1355:64"><name pos:start="1355:64" pos:end="1355:64">q</name></expr></argument>,

                                              <argument pos:start="1357:47" pos:end="1357:60"><expr pos:start="1357:47" pos:end="1357:60"><name pos:start="1357:47" pos:end="1357:60">input_unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1359:25" pos:end="1367:25"><if pos:start="1359:25" pos:end="1363:25">if <condition pos:start="1359:28" pos:end="1359:38">(<expr pos:start="1359:29" pos:end="1359:37"><name pos:start="1359:29" pos:end="1359:32">pass</name> <operator pos:start="1359:34" pos:end="1359:35">==</operator> <literal type="number" pos:start="1359:37" pos:end="1359:37">0</literal></expr>)</condition> <block pos:start="1359:40" pos:end="1363:25">{<block_content pos:start="1361:29" pos:end="1361:56">

                            <expr_stmt pos:start="1361:29" pos:end="1361:56"><expr pos:start="1361:29" pos:end="1361:55"><name pos:start="1361:29" pos:end="1361:32">tmp3</name> <operator pos:start="1361:34" pos:end="1361:34">=</operator> <call pos:start="1361:36" pos:end="1361:55"><name pos:start="1361:36" pos:end="1361:48">neon_load_reg</name><argument_list pos:start="1361:49" pos:end="1361:55">(<argument pos:start="1361:50" pos:end="1361:51"><expr pos:start="1361:50" pos:end="1361:51"><name pos:start="1361:50" pos:end="1361:51">rm</name></expr></argument>, <argument pos:start="1361:54" pos:end="1361:54"><expr pos:start="1361:54" pos:end="1361:54"><literal type="number" pos:start="1361:54" pos:end="1361:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1363:27" pos:end="1367:25">else <block pos:start="1363:32" pos:end="1367:25">{<block_content pos:start="1365:29" pos:end="1365:40">

                            <expr_stmt pos:start="1365:29" pos:end="1365:40"><expr pos:start="1365:29" pos:end="1365:39"><name pos:start="1365:29" pos:end="1365:32">tmp3</name> <operator pos:start="1365:34" pos:end="1365:34">=</operator> <name pos:start="1365:36" pos:end="1365:39">tmp5</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1369:25" pos:end="1371:62"><expr pos:start="1369:25" pos:end="1371:61"><call pos:start="1369:25" pos:end="1371:61"><name pos:start="1369:25" pos:end="1369:45">gen_neon_shift_narrow</name><argument_list pos:start="1369:46" pos:end="1371:61">(<argument pos:start="1369:47" pos:end="1369:50"><expr pos:start="1369:47" pos:end="1369:50"><name pos:start="1369:47" pos:end="1369:50">size</name></expr></argument>, <argument pos:start="1369:53" pos:end="1369:56"><expr pos:start="1369:53" pos:end="1369:56"><name pos:start="1369:53" pos:end="1369:56">tmp3</name></expr></argument>, <argument pos:start="1369:59" pos:end="1369:62"><expr pos:start="1369:59" pos:end="1369:62"><name pos:start="1369:59" pos:end="1369:62">tmp2</name></expr></argument>, <argument pos:start="1369:65" pos:end="1369:65"><expr pos:start="1369:65" pos:end="1369:65"><name pos:start="1369:65" pos:end="1369:65">q</name></expr></argument>,

                                              <argument pos:start="1371:47" pos:end="1371:60"><expr pos:start="1371:47" pos:end="1371:60"><name pos:start="1371:47" pos:end="1371:60">input_unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1373:25" pos:end="1373:66"><expr pos:start="1373:25" pos:end="1373:65"><call pos:start="1373:25" pos:end="1373:65"><name pos:start="1373:25" pos:end="1373:46">tcg_gen_concat_i32_i64</name><argument_list pos:start="1373:47" pos:end="1373:65">(<argument pos:start="1373:48" pos:end="1373:53"><expr pos:start="1373:48" pos:end="1373:53"><name pos:start="1373:48" pos:end="1373:53">cpu_V0</name></expr></argument>, <argument pos:start="1373:56" pos:end="1373:58"><expr pos:start="1373:56" pos:end="1373:58"><name pos:start="1373:56" pos:end="1373:58">tmp</name></expr></argument>, <argument pos:start="1373:61" pos:end="1373:64"><expr pos:start="1373:61" pos:end="1373:64"><name pos:start="1373:61" pos:end="1373:64">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1375:25" pos:end="1375:47"><expr pos:start="1375:25" pos:end="1375:46"><call pos:start="1375:25" pos:end="1375:46"><name pos:start="1375:25" pos:end="1375:41">tcg_temp_free_i32</name><argument_list pos:start="1375:42" pos:end="1375:46">(<argument pos:start="1375:43" pos:end="1375:45"><expr pos:start="1375:43" pos:end="1375:45"><name pos:start="1375:43" pos:end="1375:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1377:25" pos:end="1377:48"><expr pos:start="1377:25" pos:end="1377:47"><call pos:start="1377:25" pos:end="1377:47"><name pos:start="1377:25" pos:end="1377:41">tcg_temp_free_i32</name><argument_list pos:start="1377:42" pos:end="1377:47">(<argument pos:start="1377:43" pos:end="1377:46"><expr pos:start="1377:43" pos:end="1377:46"><name pos:start="1377:43" pos:end="1377:46">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1379:25" pos:end="1379:49"><expr pos:start="1379:25" pos:end="1379:48"><name pos:start="1379:25" pos:end="1379:27">tmp</name> <operator pos:start="1379:29" pos:end="1379:29">=</operator> <call pos:start="1379:31" pos:end="1379:48"><name pos:start="1379:31" pos:end="1379:46">tcg_temp_new_i32</name><argument_list pos:start="1379:47" pos:end="1379:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1381:25" pos:end="1381:78"><expr pos:start="1381:25" pos:end="1381:77"><call pos:start="1381:25" pos:end="1381:77"><name pos:start="1381:25" pos:end="1381:42">gen_neon_narrow_op</name><argument_list pos:start="1381:43" pos:end="1381:77">(<argument pos:start="1381:44" pos:end="1381:50"><expr pos:start="1381:44" pos:end="1381:50"><name pos:start="1381:44" pos:end="1381:45">op</name> <operator pos:start="1381:47" pos:end="1381:48">==</operator> <literal type="number" pos:start="1381:50" pos:end="1381:50">8</literal></expr></argument>, <argument pos:start="1381:53" pos:end="1381:53"><expr pos:start="1381:53" pos:end="1381:53"><name pos:start="1381:53" pos:end="1381:53">u</name></expr></argument>, <argument pos:start="1381:56" pos:end="1381:63"><expr pos:start="1381:56" pos:end="1381:63"><name pos:start="1381:56" pos:end="1381:59">size</name> <operator pos:start="1381:61" pos:end="1381:61">-</operator> <literal type="number" pos:start="1381:63" pos:end="1381:63">1</literal></expr></argument>, <argument pos:start="1381:66" pos:end="1381:68"><expr pos:start="1381:66" pos:end="1381:68"><name pos:start="1381:66" pos:end="1381:68">tmp</name></expr></argument>, <argument pos:start="1381:71" pos:end="1381:76"><expr pos:start="1381:71" pos:end="1381:76"><name pos:start="1381:71" pos:end="1381:76">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1383:25" pos:end="1383:54"><expr pos:start="1383:25" pos:end="1383:53"><call pos:start="1383:25" pos:end="1383:53"><name pos:start="1383:25" pos:end="1383:38">neon_store_reg</name><argument_list pos:start="1383:39" pos:end="1383:53">(<argument pos:start="1383:40" pos:end="1383:41"><expr pos:start="1383:40" pos:end="1383:41"><name pos:start="1383:40" pos:end="1383:41">rd</name></expr></argument>, <argument pos:start="1383:44" pos:end="1383:47"><expr pos:start="1383:44" pos:end="1383:47"><name pos:start="1383:44" pos:end="1383:47">pass</name></expr></argument>, <argument pos:start="1383:50" pos:end="1383:52"><expr pos:start="1383:50" pos:end="1383:52"><name pos:start="1383:50" pos:end="1383:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for> <comment type="block" pos:start="1385:23" pos:end="1385:36">/* for pass */</comment>

                    <expr_stmt pos:start="1387:21" pos:end="1387:44"><expr pos:start="1387:21" pos:end="1387:43"><call pos:start="1387:21" pos:end="1387:43"><name pos:start="1387:21" pos:end="1387:37">tcg_temp_free_i32</name><argument_list pos:start="1387:38" pos:end="1387:43">(<argument pos:start="1387:39" pos:end="1387:42"><expr pos:start="1387:39" pos:end="1387:42"><name pos:start="1387:39" pos:end="1387:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1391:15" pos:end="1477:13">else if <condition pos:start="1391:23" pos:end="1391:32">(<expr pos:start="1391:24" pos:end="1391:31"><name pos:start="1391:24" pos:end="1391:25">op</name> <operator pos:start="1391:27" pos:end="1391:28">==</operator> <literal type="number" pos:start="1391:30" pos:end="1391:31">10</literal></expr>)</condition> <block pos:start="1391:34" pos:end="1477:13">{<block_content pos:start="1395:17" pos:end="1475:17">

                <comment type="block" pos:start="1393:17" pos:end="1393:34">/* VSHLL, VMOVL */</comment>

                <if_stmt pos:start="1395:17" pos:end="1399:17"><if pos:start="1395:17" pos:end="1399:17">if <condition pos:start="1395:20" pos:end="1395:34">(<expr pos:start="1395:21" pos:end="1395:33"><name pos:start="1395:21" pos:end="1395:21">q</name> <operator pos:start="1395:23" pos:end="1395:24">||</operator> <operator pos:start="1395:26" pos:end="1395:26">(</operator><name pos:start="1395:27" pos:end="1395:28">rd</name> <operator pos:start="1395:30" pos:end="1395:30">&amp;</operator> <literal type="number" pos:start="1395:32" pos:end="1395:32">1</literal><operator pos:start="1395:33" pos:end="1395:33">)</operator></expr>)</condition> <block pos:start="1395:36" pos:end="1399:17">{<block_content pos:start="1397:21" pos:end="1397:29">

                    <return pos:start="1397:21" pos:end="1397:29">return <expr pos:start="1397:28" pos:end="1397:28"><literal type="number" pos:start="1397:28" pos:end="1397:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1401:17" pos:end="1401:43"><expr pos:start="1401:17" pos:end="1401:42"><name pos:start="1401:17" pos:end="1401:19">tmp</name> <operator pos:start="1401:21" pos:end="1401:21">=</operator> <call pos:start="1401:23" pos:end="1401:42"><name pos:start="1401:23" pos:end="1401:35">neon_load_reg</name><argument_list pos:start="1401:36" pos:end="1401:42">(<argument pos:start="1401:37" pos:end="1401:38"><expr pos:start="1401:37" pos:end="1401:38"><name pos:start="1401:37" pos:end="1401:38">rm</name></expr></argument>, <argument pos:start="1401:41" pos:end="1401:41"><expr pos:start="1401:41" pos:end="1401:41"><literal type="number" pos:start="1401:41" pos:end="1401:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1403:17" pos:end="1403:44"><expr pos:start="1403:17" pos:end="1403:43"><name pos:start="1403:17" pos:end="1403:20">tmp2</name> <operator pos:start="1403:22" pos:end="1403:22">=</operator> <call pos:start="1403:24" pos:end="1403:43"><name pos:start="1403:24" pos:end="1403:36">neon_load_reg</name><argument_list pos:start="1403:37" pos:end="1403:43">(<argument pos:start="1403:38" pos:end="1403:39"><expr pos:start="1403:38" pos:end="1403:39"><name pos:start="1403:38" pos:end="1403:39">rm</name></expr></argument>, <argument pos:start="1403:42" pos:end="1403:42"><expr pos:start="1403:42" pos:end="1403:42"><literal type="number" pos:start="1403:42" pos:end="1403:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="1405:17" pos:end="1475:17">for <control pos:start="1405:21" pos:end="1405:48">(<init pos:start="1405:22" pos:end="1405:30"><expr pos:start="1405:22" pos:end="1405:29"><name pos:start="1405:22" pos:end="1405:25">pass</name> <operator pos:start="1405:27" pos:end="1405:27">=</operator> <literal type="number" pos:start="1405:29" pos:end="1405:29">0</literal></expr>;</init> <condition pos:start="1405:32" pos:end="1405:40"><expr pos:start="1405:32" pos:end="1405:39"><name pos:start="1405:32" pos:end="1405:35">pass</name> <operator pos:start="1405:37" pos:end="1405:37">&lt;</operator> <literal type="number" pos:start="1405:39" pos:end="1405:39">2</literal></expr>;</condition> <incr pos:start="1405:42" pos:end="1405:47"><expr pos:start="1405:42" pos:end="1405:47"><name pos:start="1405:42" pos:end="1405:45">pass</name><operator pos:start="1405:46" pos:end="1405:47">++</operator></expr></incr>)</control> <block pos:start="1405:50" pos:end="1475:17">{<block_content pos:start="1407:21" pos:end="1473:56">

                    <if_stmt pos:start="1407:21" pos:end="1409:35"><if pos:start="1407:21" pos:end="1409:35">if <condition pos:start="1407:24" pos:end="1407:34">(<expr pos:start="1407:25" pos:end="1407:33"><name pos:start="1407:25" pos:end="1407:28">pass</name> <operator pos:start="1407:30" pos:end="1407:31">==</operator> <literal type="number" pos:start="1407:33" pos:end="1407:33">1</literal></expr>)</condition><block type="pseudo" pos:start="1409:25" pos:end="1409:35"><block_content pos:start="1409:25" pos:end="1409:35">

                        <expr_stmt pos:start="1409:25" pos:end="1409:35"><expr pos:start="1409:25" pos:end="1409:34"><name pos:start="1409:25" pos:end="1409:27">tmp</name> <operator pos:start="1409:29" pos:end="1409:29">=</operator> <name pos:start="1409:31" pos:end="1409:34">tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="1413:21" pos:end="1413:57"><expr pos:start="1413:21" pos:end="1413:56"><call pos:start="1413:21" pos:end="1413:56"><name pos:start="1413:21" pos:end="1413:34">gen_neon_widen</name><argument_list pos:start="1413:35" pos:end="1413:56">(<argument pos:start="1413:36" pos:end="1413:41"><expr pos:start="1413:36" pos:end="1413:41"><name pos:start="1413:36" pos:end="1413:41">cpu_V0</name></expr></argument>, <argument pos:start="1413:44" pos:end="1413:46"><expr pos:start="1413:44" pos:end="1413:46"><name pos:start="1413:44" pos:end="1413:46">tmp</name></expr></argument>, <argument pos:start="1413:49" pos:end="1413:52"><expr pos:start="1413:49" pos:end="1413:52"><name pos:start="1413:49" pos:end="1413:52">size</name></expr></argument>, <argument pos:start="1413:55" pos:end="1413:55"><expr pos:start="1413:55" pos:end="1413:55"><name pos:start="1413:55" pos:end="1413:55">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="1417:21" pos:end="1471:21"><if pos:start="1417:21" pos:end="1471:21">if <condition pos:start="1417:24" pos:end="1417:35">(<expr pos:start="1417:25" pos:end="1417:34"><name pos:start="1417:25" pos:end="1417:29">shift</name> <operator pos:start="1417:31" pos:end="1417:32">!=</operator> <literal type="number" pos:start="1417:34" pos:end="1417:34">0</literal></expr>)</condition> <block pos:start="1417:37" pos:end="1471:21">{<block_content pos:start="1423:25" pos:end="1469:25">

                        <comment type="block" pos:start="1419:25" pos:end="1421:77">/* The shift is less than the width of the source

                           type, so we can just shift the whole register.  */</comment>

                        <expr_stmt pos:start="1423:25" pos:end="1423:64"><expr pos:start="1423:25" pos:end="1423:63"><call pos:start="1423:25" pos:end="1423:63"><name pos:start="1423:25" pos:end="1423:40">tcg_gen_shli_i64</name><argument_list pos:start="1423:41" pos:end="1423:63">(<argument pos:start="1423:42" pos:end="1423:47"><expr pos:start="1423:42" pos:end="1423:47"><name pos:start="1423:42" pos:end="1423:47">cpu_V0</name></expr></argument>, <argument pos:start="1423:50" pos:end="1423:55"><expr pos:start="1423:50" pos:end="1423:55"><name pos:start="1423:50" pos:end="1423:55">cpu_V0</name></expr></argument>, <argument pos:start="1423:58" pos:end="1423:62"><expr pos:start="1423:58" pos:end="1423:62"><name pos:start="1423:58" pos:end="1423:62">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="1425:25" pos:end="1433:37">/* Widen the result of shift: we need to clear

                         * the potential overflow bits resulting from

                         * left bits of the narrow input appearing as

                         * right bits of left the neighbour narrow

                         * input.  */</comment>

                        <if_stmt pos:start="1435:25" pos:end="1469:25"><if pos:start="1435:25" pos:end="1469:25">if <condition pos:start="1435:28" pos:end="1435:43">(<expr pos:start="1435:29" pos:end="1435:42"><name pos:start="1435:29" pos:end="1435:32">size</name> <operator pos:start="1435:34" pos:end="1435:34">&lt;</operator> <literal type="number" pos:start="1435:36" pos:end="1435:36">2</literal> <operator pos:start="1435:38" pos:end="1435:39">||</operator> <operator pos:start="1435:41" pos:end="1435:41">!</operator><name pos:start="1435:42" pos:end="1435:42">u</name></expr>)</condition> <block pos:start="1435:45" pos:end="1469:25">{<block_content pos:start="1437:29" pos:end="1467:69">

                            <decl_stmt pos:start="1437:29" pos:end="1437:43"><decl pos:start="1437:29" pos:end="1437:42"><type pos:start="1437:29" pos:end="1437:36"><name pos:start="1437:29" pos:end="1437:36">uint64_t</name></type> <name pos:start="1437:38" pos:end="1437:42">imm64</name></decl>;</decl_stmt>

                            <if_stmt pos:start="1439:29" pos:end="1455:29"><if pos:start="1439:29" pos:end="1445:29">if <condition pos:start="1439:32" pos:end="1439:42">(<expr pos:start="1439:33" pos:end="1439:41"><name pos:start="1439:33" pos:end="1439:36">size</name> <operator pos:start="1439:38" pos:end="1439:39">==</operator> <literal type="number" pos:start="1439:41" pos:end="1439:41">0</literal></expr>)</condition> <block pos:start="1439:44" pos:end="1445:29">{<block_content pos:start="1441:33" pos:end="1443:49">

                                <expr_stmt pos:start="1441:33" pos:end="1441:61"><expr pos:start="1441:33" pos:end="1441:60"><name pos:start="1441:33" pos:end="1441:35">imm</name> <operator pos:start="1441:37" pos:end="1441:37">=</operator> <operator pos:start="1441:39" pos:end="1441:39">(</operator><literal type="number" pos:start="1441:40" pos:end="1441:44">0xffu</literal> <operator pos:start="1441:46" pos:end="1441:47">&gt;&gt;</operator> <operator pos:start="1441:49" pos:end="1441:49">(</operator><literal type="number" pos:start="1441:50" pos:end="1441:52">8</literal> <operator pos:start="1441:52" pos:end="1441:52">-</operator> <name pos:start="1441:54" pos:end="1441:58">shift</name><operator pos:start="1441:59" pos:end="1441:59">)</operator><operator pos:start="1441:60" pos:end="1441:60">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="1443:33" pos:end="1443:49"><expr pos:start="1443:33" pos:end="1443:48"><name pos:start="1443:33" pos:end="1443:35">imm</name> <operator pos:start="1443:37" pos:end="1443:38">|=</operator> <name pos:start="1443:40" pos:end="1443:42">imm</name> <operator pos:start="1443:44" pos:end="1443:45">&lt;&lt;</operator> <literal type="number" pos:start="1443:47" pos:end="1443:48">16</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="1445:31" pos:end="1449:29">else if <condition pos:start="1445:39" pos:end="1445:49">(<expr pos:start="1445:40" pos:end="1445:48"><name pos:start="1445:40" pos:end="1445:43">size</name> <operator pos:start="1445:45" pos:end="1445:46">==</operator> <literal type="number" pos:start="1445:48" pos:end="1445:48">1</literal></expr>)</condition> <block pos:start="1445:51" pos:end="1449:29">{<block_content pos:start="1447:33" pos:end="1447:61">

                                <expr_stmt pos:start="1447:33" pos:end="1447:61"><expr pos:start="1447:33" pos:end="1447:60"><name pos:start="1447:33" pos:end="1447:35">imm</name> <operator pos:start="1447:37" pos:end="1447:37">=</operator> <literal type="number" pos:start="1447:39" pos:end="1447:44">0xffff</literal> <operator pos:start="1447:46" pos:end="1447:47">&gt;&gt;</operator> <operator pos:start="1447:49" pos:end="1447:49">(</operator><literal type="number" pos:start="1447:50" pos:end="1447:53">16</literal> <operator pos:start="1447:53" pos:end="1447:53">-</operator> <name pos:start="1447:55" pos:end="1447:59">shift</name><operator pos:start="1447:60" pos:end="1447:60">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1449:31" pos:end="1455:29">else <block pos:start="1449:36" pos:end="1455:29">{<block_content pos:start="1453:33" pos:end="1453:65">

                                <comment type="block" pos:start="1451:33" pos:end="1451:47">/* size == 2 */</comment>

                                <expr_stmt pos:start="1453:33" pos:end="1453:65"><expr pos:start="1453:33" pos:end="1453:64"><name pos:start="1453:33" pos:end="1453:35">imm</name> <operator pos:start="1453:37" pos:end="1453:37">=</operator> <literal type="number" pos:start="1453:39" pos:end="1453:48">0xffffffff</literal> <operator pos:start="1453:50" pos:end="1453:51">&gt;&gt;</operator> <operator pos:start="1453:53" pos:end="1453:53">(</operator><literal type="number" pos:start="1453:54" pos:end="1453:57">32</literal> <operator pos:start="1453:57" pos:end="1453:57">-</operator> <name pos:start="1453:59" pos:end="1453:63">shift</name><operator pos:start="1453:64" pos:end="1453:64">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <if_stmt pos:start="1457:29" pos:end="1465:29"><if pos:start="1457:29" pos:end="1461:29">if <condition pos:start="1457:32" pos:end="1457:41">(<expr pos:start="1457:33" pos:end="1457:40"><name pos:start="1457:33" pos:end="1457:36">size</name> <operator pos:start="1457:38" pos:end="1457:38">&lt;</operator> <literal type="number" pos:start="1457:40" pos:end="1457:40">2</literal></expr>)</condition> <block pos:start="1457:43" pos:end="1461:29">{<block_content pos:start="1459:33" pos:end="1459:70">

                                <expr_stmt pos:start="1459:33" pos:end="1459:70"><expr pos:start="1459:33" pos:end="1459:69"><name pos:start="1459:33" pos:end="1459:37">imm64</name> <operator pos:start="1459:39" pos:end="1459:39">=</operator> <name pos:start="1459:41" pos:end="1459:43">imm</name> <operator pos:start="1459:45" pos:end="1459:45">|</operator> <operator pos:start="1459:47" pos:end="1459:47">(</operator><operator pos:start="1459:48" pos:end="1459:48">(</operator><operator pos:start="1459:49" pos:end="1459:49">(</operator><name pos:start="1459:50" pos:end="1459:57">uint64_t</name><operator pos:start="1459:58" pos:end="1459:58">)</operator><name pos:start="1459:59" pos:end="1459:61">imm</name><operator pos:start="1459:62" pos:end="1459:62">)</operator> <operator pos:start="1459:64" pos:end="1459:65">&lt;&lt;</operator> <literal type="number" pos:start="1459:67" pos:end="1459:68">32</literal><operator pos:start="1459:69" pos:end="1459:69">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1461:31" pos:end="1465:29">else <block pos:start="1461:36" pos:end="1465:29">{<block_content pos:start="1463:33" pos:end="1463:44">

                                <expr_stmt pos:start="1463:33" pos:end="1463:44"><expr pos:start="1463:33" pos:end="1463:43"><name pos:start="1463:33" pos:end="1463:37">imm64</name> <operator pos:start="1463:39" pos:end="1463:39">=</operator> <name pos:start="1463:41" pos:end="1463:43">imm</name></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="1467:29" pos:end="1467:69"><expr pos:start="1467:29" pos:end="1467:68"><call pos:start="1467:29" pos:end="1467:68"><name pos:start="1467:29" pos:end="1467:44">tcg_gen_andi_i64</name><argument_list pos:start="1467:45" pos:end="1467:68">(<argument pos:start="1467:46" pos:end="1467:51"><expr pos:start="1467:46" pos:end="1467:51"><name pos:start="1467:46" pos:end="1467:51">cpu_V0</name></expr></argument>, <argument pos:start="1467:54" pos:end="1467:59"><expr pos:start="1467:54" pos:end="1467:59"><name pos:start="1467:54" pos:end="1467:59">cpu_V0</name></expr></argument>, <argument pos:start="1467:62" pos:end="1467:67"><expr pos:start="1467:62" pos:end="1467:67"><operator pos:start="1467:62" pos:end="1467:62">~</operator><name pos:start="1467:63" pos:end="1467:67">imm64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1473:21" pos:end="1473:56"><expr pos:start="1473:21" pos:end="1473:55"><call pos:start="1473:21" pos:end="1473:55"><name pos:start="1473:21" pos:end="1473:36">neon_store_reg64</name><argument_list pos:start="1473:37" pos:end="1473:55">(<argument pos:start="1473:38" pos:end="1473:43"><expr pos:start="1473:38" pos:end="1473:43"><name pos:start="1473:38" pos:end="1473:43">cpu_V0</name></expr></argument>, <argument pos:start="1473:46" pos:end="1473:54"><expr pos:start="1473:46" pos:end="1473:54"><name pos:start="1473:46" pos:end="1473:47">rd</name> <operator pos:start="1473:49" pos:end="1473:49">+</operator> <name pos:start="1473:51" pos:end="1473:54">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="1477:15" pos:end="1525:13">else if <condition pos:start="1477:23" pos:end="1477:32">(<expr pos:start="1477:24" pos:end="1477:31"><name pos:start="1477:24" pos:end="1477:25">op</name> <operator pos:start="1477:27" pos:end="1477:28">&gt;=</operator> <literal type="number" pos:start="1477:30" pos:end="1477:31">14</literal></expr>)</condition> <block pos:start="1477:34" pos:end="1525:13">{<block_content pos:start="1481:17" pos:end="1523:17">

                <comment type="block" pos:start="1479:17" pos:end="1479:40">/* VCVT fixed-point.  */</comment>

                <if_stmt pos:start="1481:17" pos:end="1485:17"><if pos:start="1481:17" pos:end="1485:17">if <condition pos:start="1481:20" pos:end="1481:66">(<expr pos:start="1481:21" pos:end="1481:65"><operator pos:start="1481:21" pos:end="1481:21">!</operator><operator pos:start="1481:22" pos:end="1481:22">(</operator><name pos:start="1481:23" pos:end="1481:26">insn</name> <operator pos:start="1481:28" pos:end="1481:28">&amp;</operator> <operator pos:start="1481:30" pos:end="1481:30">(</operator><literal type="number" pos:start="1481:31" pos:end="1481:31">1</literal> <operator pos:start="1481:33" pos:end="1481:34">&lt;&lt;</operator> <literal type="number" pos:start="1481:36" pos:end="1481:37">21</literal><operator pos:start="1481:38" pos:end="1481:38">)</operator><operator pos:start="1481:39" pos:end="1481:39">)</operator> <operator pos:start="1481:41" pos:end="1481:42">||</operator> <operator pos:start="1481:44" pos:end="1481:44">(</operator><name pos:start="1481:45" pos:end="1481:45">q</name> <operator pos:start="1481:47" pos:end="1481:48">&amp;&amp;</operator> <operator pos:start="1481:50" pos:end="1481:50">(</operator><operator pos:start="1481:51" pos:end="1481:51">(</operator><name pos:start="1481:52" pos:end="1481:53">rd</name> <operator pos:start="1481:55" pos:end="1481:55">|</operator> <name pos:start="1481:57" pos:end="1481:58">rm</name><operator pos:start="1481:59" pos:end="1481:59">)</operator> <operator pos:start="1481:61" pos:end="1481:61">&amp;</operator> <literal type="number" pos:start="1481:63" pos:end="1481:63">1</literal><operator pos:start="1481:64" pos:end="1481:64">)</operator><operator pos:start="1481:65" pos:end="1481:65">)</operator></expr>)</condition> <block pos:start="1481:68" pos:end="1485:17">{<block_content pos:start="1483:21" pos:end="1483:29">

                    <return pos:start="1483:21" pos:end="1483:29">return <expr pos:start="1483:28" pos:end="1483:28"><literal type="number" pos:start="1483:28" pos:end="1483:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1487:17" pos:end="1491:19">/* We have already masked out the must-be-1 top bit of imm6,

                 * hence this 32-shift where the ARM ARM has 64-imm6.

                 */</comment>

                <expr_stmt pos:start="1493:17" pos:end="1493:35"><expr pos:start="1493:17" pos:end="1493:34"><name pos:start="1493:17" pos:end="1493:21">shift</name> <operator pos:start="1493:23" pos:end="1493:23">=</operator> <literal type="number" pos:start="1493:25" pos:end="1493:28">32</literal> <operator pos:start="1493:28" pos:end="1493:28">-</operator> <name pos:start="1493:30" pos:end="1493:34">shift</name></expr>;</expr_stmt>

                <for pos:start="1495:17" pos:end="1523:17">for <control pos:start="1495:21" pos:end="1495:58">(<init pos:start="1495:22" pos:end="1495:30"><expr pos:start="1495:22" pos:end="1495:29"><name pos:start="1495:22" pos:end="1495:25">pass</name> <operator pos:start="1495:27" pos:end="1495:27">=</operator> <literal type="number" pos:start="1495:29" pos:end="1495:29">0</literal></expr>;</init> <condition pos:start="1495:32" pos:end="1495:50"><expr pos:start="1495:32" pos:end="1495:49"><name pos:start="1495:32" pos:end="1495:35">pass</name> <operator pos:start="1495:37" pos:end="1495:37">&lt;</operator> <operator pos:start="1495:39" pos:end="1495:39">(</operator><ternary pos:start="1495:40" pos:end="1495:48"><condition pos:start="1495:40" pos:end="1495:42"><expr pos:start="1495:40" pos:end="1495:40"><name pos:start="1495:40" pos:end="1495:40">q</name></expr> ?</condition><then pos:start="1495:44" pos:end="1495:44"> <expr pos:start="1495:44" pos:end="1495:44"><literal type="number" pos:start="1495:44" pos:end="1495:44">4</literal></expr> </then><else pos:start="1495:46" pos:end="1495:48">: <expr pos:start="1495:48" pos:end="1495:48"><literal type="number" pos:start="1495:48" pos:end="1495:48">2</literal></expr></else></ternary><operator pos:start="1495:49" pos:end="1495:49">)</operator></expr>;</condition> <incr pos:start="1495:52" pos:end="1495:57"><expr pos:start="1495:52" pos:end="1495:57"><name pos:start="1495:52" pos:end="1495:55">pass</name><operator pos:start="1495:56" pos:end="1495:57">++</operator></expr></incr>)</control> <block pos:start="1495:60" pos:end="1523:17">{<block_content pos:start="1497:21" pos:end="1521:80">

                    <expr_stmt pos:start="1497:21" pos:end="1497:80"><expr pos:start="1497:21" pos:end="1497:79"><call pos:start="1497:21" pos:end="1497:79"><name pos:start="1497:21" pos:end="1497:34">tcg_gen_ld_f32</name><argument_list pos:start="1497:35" pos:end="1497:79">(<argument pos:start="1497:36" pos:end="1497:42"><expr pos:start="1497:36" pos:end="1497:42"><name pos:start="1497:36" pos:end="1497:42">cpu_F0s</name></expr></argument>, <argument pos:start="1497:45" pos:end="1497:51"><expr pos:start="1497:45" pos:end="1497:51"><name pos:start="1497:45" pos:end="1497:51">cpu_env</name></expr></argument>, <argument pos:start="1497:54" pos:end="1497:78"><expr pos:start="1497:54" pos:end="1497:78"><call pos:start="1497:54" pos:end="1497:78"><name pos:start="1497:54" pos:end="1497:68">neon_reg_offset</name><argument_list pos:start="1497:69" pos:end="1497:78">(<argument pos:start="1497:70" pos:end="1497:71"><expr pos:start="1497:70" pos:end="1497:71"><name pos:start="1497:70" pos:end="1497:71">rm</name></expr></argument>, <argument pos:start="1497:74" pos:end="1497:77"><expr pos:start="1497:74" pos:end="1497:77"><name pos:start="1497:74" pos:end="1497:77">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1499:21" pos:end="1519:21"><if pos:start="1499:21" pos:end="1509:21">if <condition pos:start="1499:24" pos:end="1499:34">(<expr pos:start="1499:25" pos:end="1499:33"><operator pos:start="1499:25" pos:end="1499:25">!</operator><operator pos:start="1499:26" pos:end="1499:26">(</operator><name pos:start="1499:27" pos:end="1499:28">op</name> <operator pos:start="1499:30" pos:end="1499:30">&amp;</operator> <literal type="number" pos:start="1499:32" pos:end="1499:32">1</literal><operator pos:start="1499:33" pos:end="1499:33">)</operator></expr>)</condition> <block pos:start="1499:36" pos:end="1509:21">{<block_content pos:start="1501:25" pos:end="1507:51">

                        <if_stmt pos:start="1501:25" pos:end="1507:51"><if pos:start="1501:25" pos:end="1503:51">if <condition pos:start="1501:28" pos:end="1501:30">(<expr pos:start="1501:29" pos:end="1501:29"><name pos:start="1501:29" pos:end="1501:29">u</name></expr>)</condition><block type="pseudo" pos:start="1503:29" pos:end="1503:51"><block_content pos:start="1503:29" pos:end="1503:51">

                            <expr_stmt pos:start="1503:29" pos:end="1503:51"><expr pos:start="1503:29" pos:end="1503:50"><call pos:start="1503:29" pos:end="1503:50"><name pos:start="1503:29" pos:end="1503:40">gen_vfp_ulto</name><argument_list pos:start="1503:41" pos:end="1503:50">(<argument pos:start="1503:42" pos:end="1503:42"><expr pos:start="1503:42" pos:end="1503:42"><literal type="number" pos:start="1503:42" pos:end="1503:42">0</literal></expr></argument>, <argument pos:start="1503:45" pos:end="1503:49"><expr pos:start="1503:45" pos:end="1503:49"><name pos:start="1503:45" pos:end="1503:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1505:25" pos:end="1507:51">else<block type="pseudo" pos:start="1507:29" pos:end="1507:51"><block_content pos:start="1507:29" pos:end="1507:51">

                            <expr_stmt pos:start="1507:29" pos:end="1507:51"><expr pos:start="1507:29" pos:end="1507:50"><call pos:start="1507:29" pos:end="1507:50"><name pos:start="1507:29" pos:end="1507:40">gen_vfp_slto</name><argument_list pos:start="1507:41" pos:end="1507:50">(<argument pos:start="1507:42" pos:end="1507:42"><expr pos:start="1507:42" pos:end="1507:42"><literal type="number" pos:start="1507:42" pos:end="1507:42">0</literal></expr></argument>, <argument pos:start="1507:45" pos:end="1507:49"><expr pos:start="1507:45" pos:end="1507:49"><name pos:start="1507:45" pos:end="1507:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1509:23" pos:end="1519:21">else <block pos:start="1509:28" pos:end="1519:21">{<block_content pos:start="1511:25" pos:end="1517:51">

                        <if_stmt pos:start="1511:25" pos:end="1517:51"><if pos:start="1511:25" pos:end="1513:51">if <condition pos:start="1511:28" pos:end="1511:30">(<expr pos:start="1511:29" pos:end="1511:29"><name pos:start="1511:29" pos:end="1511:29">u</name></expr>)</condition><block type="pseudo" pos:start="1513:29" pos:end="1513:51"><block_content pos:start="1513:29" pos:end="1513:51">

                            <expr_stmt pos:start="1513:29" pos:end="1513:51"><expr pos:start="1513:29" pos:end="1513:50"><call pos:start="1513:29" pos:end="1513:50"><name pos:start="1513:29" pos:end="1513:40">gen_vfp_toul</name><argument_list pos:start="1513:41" pos:end="1513:50">(<argument pos:start="1513:42" pos:end="1513:42"><expr pos:start="1513:42" pos:end="1513:42"><literal type="number" pos:start="1513:42" pos:end="1513:42">0</literal></expr></argument>, <argument pos:start="1513:45" pos:end="1513:49"><expr pos:start="1513:45" pos:end="1513:49"><name pos:start="1513:45" pos:end="1513:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1515:25" pos:end="1517:51">else<block type="pseudo" pos:start="1517:29" pos:end="1517:51"><block_content pos:start="1517:29" pos:end="1517:51">

                            <expr_stmt pos:start="1517:29" pos:end="1517:51"><expr pos:start="1517:29" pos:end="1517:50"><call pos:start="1517:29" pos:end="1517:50"><name pos:start="1517:29" pos:end="1517:40">gen_vfp_tosl</name><argument_list pos:start="1517:41" pos:end="1517:50">(<argument pos:start="1517:42" pos:end="1517:42"><expr pos:start="1517:42" pos:end="1517:42"><literal type="number" pos:start="1517:42" pos:end="1517:42">0</literal></expr></argument>, <argument pos:start="1517:45" pos:end="1517:49"><expr pos:start="1517:45" pos:end="1517:49"><name pos:start="1517:45" pos:end="1517:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1521:21" pos:end="1521:80"><expr pos:start="1521:21" pos:end="1521:79"><call pos:start="1521:21" pos:end="1521:79"><name pos:start="1521:21" pos:end="1521:34">tcg_gen_st_f32</name><argument_list pos:start="1521:35" pos:end="1521:79">(<argument pos:start="1521:36" pos:end="1521:42"><expr pos:start="1521:36" pos:end="1521:42"><name pos:start="1521:36" pos:end="1521:42">cpu_F0s</name></expr></argument>, <argument pos:start="1521:45" pos:end="1521:51"><expr pos:start="1521:45" pos:end="1521:51"><name pos:start="1521:45" pos:end="1521:51">cpu_env</name></expr></argument>, <argument pos:start="1521:54" pos:end="1521:78"><expr pos:start="1521:54" pos:end="1521:78"><call pos:start="1521:54" pos:end="1521:78"><name pos:start="1521:54" pos:end="1521:68">neon_reg_offset</name><argument_list pos:start="1521:69" pos:end="1521:78">(<argument pos:start="1521:70" pos:end="1521:71"><expr pos:start="1521:70" pos:end="1521:71"><name pos:start="1521:70" pos:end="1521:71">rd</name></expr></argument>, <argument pos:start="1521:74" pos:end="1521:77"><expr pos:start="1521:74" pos:end="1521:77"><name pos:start="1521:74" pos:end="1521:77">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="1525:15" pos:end="1529:13">else <block pos:start="1525:20" pos:end="1529:13">{<block_content pos:start="1527:17" pos:end="1527:25">

                <return pos:start="1527:17" pos:end="1527:25">return <expr pos:start="1527:24" pos:end="1527:24"><literal type="number" pos:start="1527:24" pos:end="1527:24">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1531:11" pos:end="1697:9">else <block pos:start="1531:16" pos:end="1697:9">{<block_content pos:start="1533:13" pos:end="1695:13"> <comment type="block" pos:start="1531:18" pos:end="1531:47">/* (insn &amp; 0x00380080) == 0 */</comment>

            <decl_stmt pos:start="1533:13" pos:end="1533:23"><decl pos:start="1533:13" pos:end="1533:22"><type pos:start="1533:13" pos:end="1533:15"><name pos:start="1533:13" pos:end="1533:15">int</name></type> <name pos:start="1533:17" pos:end="1533:22">invert</name></decl>;</decl_stmt>

            <if_stmt pos:start="1535:13" pos:end="1539:13"><if pos:start="1535:13" pos:end="1539:13">if <condition pos:start="1535:16" pos:end="1535:30">(<expr pos:start="1535:17" pos:end="1535:29"><name pos:start="1535:17" pos:end="1535:17">q</name> <operator pos:start="1535:19" pos:end="1535:20">&amp;&amp;</operator> <operator pos:start="1535:22" pos:end="1535:22">(</operator><name pos:start="1535:23" pos:end="1535:24">rd</name> <operator pos:start="1535:26" pos:end="1535:26">&amp;</operator> <literal type="number" pos:start="1535:28" pos:end="1535:28">1</literal><operator pos:start="1535:29" pos:end="1535:29">)</operator></expr>)</condition> <block pos:start="1535:32" pos:end="1539:13">{<block_content pos:start="1537:17" pos:end="1537:25">

                <return pos:start="1537:17" pos:end="1537:25">return <expr pos:start="1537:24" pos:end="1537:24"><literal type="number" pos:start="1537:24" pos:end="1537:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1543:13" pos:end="1543:35"><expr pos:start="1543:13" pos:end="1543:34"><name pos:start="1543:13" pos:end="1543:14">op</name> <operator pos:start="1543:16" pos:end="1543:16">=</operator> <operator pos:start="1543:18" pos:end="1543:18">(</operator><name pos:start="1543:19" pos:end="1543:22">insn</name> <operator pos:start="1543:24" pos:end="1543:25">&gt;&gt;</operator> <literal type="number" pos:start="1543:27" pos:end="1543:27">8</literal><operator pos:start="1543:28" pos:end="1543:28">)</operator> <operator pos:start="1543:30" pos:end="1543:30">&amp;</operator> <literal type="number" pos:start="1543:32" pos:end="1543:34">0xf</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1545:13" pos:end="1545:46">/* One register and immediate.  */</comment>

            <expr_stmt pos:start="1547:13" pos:end="1547:66"><expr pos:start="1547:13" pos:end="1547:65"><name pos:start="1547:13" pos:end="1547:15">imm</name> <operator pos:start="1547:17" pos:end="1547:17">=</operator> <operator pos:start="1547:19" pos:end="1547:19">(</operator><name pos:start="1547:20" pos:end="1547:20">u</name> <operator pos:start="1547:22" pos:end="1547:23">&lt;&lt;</operator> <literal type="number" pos:start="1547:25" pos:end="1547:25">7</literal><operator pos:start="1547:26" pos:end="1547:26">)</operator> <operator pos:start="1547:28" pos:end="1547:28">|</operator> <operator pos:start="1547:30" pos:end="1547:30">(</operator><operator pos:start="1547:31" pos:end="1547:31">(</operator><name pos:start="1547:32" pos:end="1547:35">insn</name> <operator pos:start="1547:37" pos:end="1547:38">&gt;&gt;</operator> <literal type="number" pos:start="1547:40" pos:end="1547:41">12</literal><operator pos:start="1547:42" pos:end="1547:42">)</operator> <operator pos:start="1547:44" pos:end="1547:44">&amp;</operator> <literal type="number" pos:start="1547:46" pos:end="1547:49">0x70</literal><operator pos:start="1547:50" pos:end="1547:50">)</operator> <operator pos:start="1547:52" pos:end="1547:52">|</operator> <operator pos:start="1547:54" pos:end="1547:54">(</operator><name pos:start="1547:55" pos:end="1547:58">insn</name> <operator pos:start="1547:60" pos:end="1547:60">&amp;</operator> <literal type="number" pos:start="1547:62" pos:end="1547:64">0xf</literal><operator pos:start="1547:65" pos:end="1547:65">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1549:13" pos:end="1549:44"><expr pos:start="1549:13" pos:end="1549:43"><name pos:start="1549:13" pos:end="1549:18">invert</name> <operator pos:start="1549:20" pos:end="1549:20">=</operator> <operator pos:start="1549:22" pos:end="1549:22">(</operator><name pos:start="1549:23" pos:end="1549:26">insn</name> <operator pos:start="1549:28" pos:end="1549:28">&amp;</operator> <operator pos:start="1549:30" pos:end="1549:30">(</operator><literal type="number" pos:start="1549:31" pos:end="1549:31">1</literal> <operator pos:start="1549:33" pos:end="1549:34">&lt;&lt;</operator> <literal type="number" pos:start="1549:36" pos:end="1549:36">5</literal><operator pos:start="1549:37" pos:end="1549:37">)</operator><operator pos:start="1549:38" pos:end="1549:38">)</operator> <operator pos:start="1549:40" pos:end="1549:41">!=</operator> <literal type="number" pos:start="1549:43" pos:end="1549:43">0</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1551:13" pos:end="1557:15">/* Note that op = 2,3,4,5,6,7,10,11,12,13 imm=0 is UNPREDICTABLE.

             * We choose to not special-case this and will behave as if a

             * valid constant encoding of 0 had been given.

             */</comment>

            <switch pos:start="1559:13" pos:end="1633:13">switch <condition pos:start="1559:20" pos:end="1559:23">(<expr pos:start="1559:21" pos:end="1559:22"><name pos:start="1559:21" pos:end="1559:22">op</name></expr>)</condition> <block pos:start="1559:25" pos:end="1633:13">{<block_content pos:start="1561:13" pos:end="1631:22">

            <case pos:start="1561:13" pos:end="1561:19">case <expr pos:start="1561:18" pos:end="1561:18"><literal type="number" pos:start="1561:18" pos:end="1561:18">0</literal></expr>:</case> <case pos:start="1561:21" pos:end="1561:27">case <expr pos:start="1561:26" pos:end="1561:26"><literal type="number" pos:start="1561:26" pos:end="1561:26">1</literal></expr>:</case>

                <comment type="block" pos:start="1563:17" pos:end="1563:27">/* no-op */</comment>

                <break pos:start="1565:17" pos:end="1565:22">break;</break>

            <case pos:start="1567:13" pos:end="1567:19">case <expr pos:start="1567:18" pos:end="1567:18"><literal type="number" pos:start="1567:18" pos:end="1567:18">2</literal></expr>:</case> <case pos:start="1567:21" pos:end="1567:27">case <expr pos:start="1567:26" pos:end="1567:26"><literal type="number" pos:start="1567:26" pos:end="1567:26">3</literal></expr>:</case>

                <expr_stmt pos:start="1569:17" pos:end="1569:26"><expr pos:start="1569:17" pos:end="1569:25"><name pos:start="1569:17" pos:end="1569:19">imm</name> <operator pos:start="1569:21" pos:end="1569:23">&lt;&lt;=</operator> <literal type="number" pos:start="1569:25" pos:end="1569:25">8</literal></expr>;</expr_stmt>

                <break pos:start="1571:17" pos:end="1571:22">break;</break>

            <case pos:start="1573:13" pos:end="1573:19">case <expr pos:start="1573:18" pos:end="1573:18"><literal type="number" pos:start="1573:18" pos:end="1573:18">4</literal></expr>:</case> <case pos:start="1573:21" pos:end="1573:27">case <expr pos:start="1573:26" pos:end="1573:26"><literal type="number" pos:start="1573:26" pos:end="1573:26">5</literal></expr>:</case>

                <expr_stmt pos:start="1575:17" pos:end="1575:27"><expr pos:start="1575:17" pos:end="1575:26"><name pos:start="1575:17" pos:end="1575:19">imm</name> <operator pos:start="1575:21" pos:end="1575:23">&lt;&lt;=</operator> <literal type="number" pos:start="1575:25" pos:end="1575:26">16</literal></expr>;</expr_stmt>

                <break pos:start="1577:17" pos:end="1577:22">break;</break>

            <case pos:start="1579:13" pos:end="1579:19">case <expr pos:start="1579:18" pos:end="1579:18"><literal type="number" pos:start="1579:18" pos:end="1579:18">6</literal></expr>:</case> <case pos:start="1579:21" pos:end="1579:27">case <expr pos:start="1579:26" pos:end="1579:26"><literal type="number" pos:start="1579:26" pos:end="1579:26">7</literal></expr>:</case>

                <expr_stmt pos:start="1581:17" pos:end="1581:27"><expr pos:start="1581:17" pos:end="1581:26"><name pos:start="1581:17" pos:end="1581:19">imm</name> <operator pos:start="1581:21" pos:end="1581:23">&lt;&lt;=</operator> <literal type="number" pos:start="1581:25" pos:end="1581:26">24</literal></expr>;</expr_stmt>

                <break pos:start="1583:17" pos:end="1583:22">break;</break>

            <case pos:start="1585:13" pos:end="1585:19">case <expr pos:start="1585:18" pos:end="1585:18"><literal type="number" pos:start="1585:18" pos:end="1585:18">8</literal></expr>:</case> <case pos:start="1585:21" pos:end="1585:27">case <expr pos:start="1585:26" pos:end="1585:26"><literal type="number" pos:start="1585:26" pos:end="1585:26">9</literal></expr>:</case>

                <expr_stmt pos:start="1587:17" pos:end="1587:33"><expr pos:start="1587:17" pos:end="1587:32"><name pos:start="1587:17" pos:end="1587:19">imm</name> <operator pos:start="1587:21" pos:end="1587:22">|=</operator> <name pos:start="1587:24" pos:end="1587:26">imm</name> <operator pos:start="1587:28" pos:end="1587:29">&lt;&lt;</operator> <literal type="number" pos:start="1587:31" pos:end="1587:32">16</literal></expr>;</expr_stmt>

                <break pos:start="1589:17" pos:end="1589:22">break;</break>

            <case pos:start="1591:13" pos:end="1591:20">case <expr pos:start="1591:18" pos:end="1591:19"><literal type="number" pos:start="1591:18" pos:end="1591:19">10</literal></expr>:</case> <case pos:start="1591:22" pos:end="1591:29">case <expr pos:start="1591:27" pos:end="1591:28"><literal type="number" pos:start="1591:27" pos:end="1591:28">11</literal></expr>:</case>

                <expr_stmt pos:start="1593:17" pos:end="1593:47"><expr pos:start="1593:17" pos:end="1593:46"><name pos:start="1593:17" pos:end="1593:19">imm</name> <operator pos:start="1593:21" pos:end="1593:21">=</operator> <operator pos:start="1593:23" pos:end="1593:23">(</operator><name pos:start="1593:24" pos:end="1593:26">imm</name> <operator pos:start="1593:28" pos:end="1593:29">&lt;&lt;</operator> <literal type="number" pos:start="1593:31" pos:end="1593:31">8</literal><operator pos:start="1593:32" pos:end="1593:32">)</operator> <operator pos:start="1593:34" pos:end="1593:34">|</operator> <operator pos:start="1593:36" pos:end="1593:36">(</operator><name pos:start="1593:37" pos:end="1593:39">imm</name> <operator pos:start="1593:41" pos:end="1593:42">&lt;&lt;</operator> <literal type="number" pos:start="1593:44" pos:end="1593:45">24</literal><operator pos:start="1593:46" pos:end="1593:46">)</operator></expr>;</expr_stmt>

                <break pos:start="1595:17" pos:end="1595:22">break;</break>

            <case pos:start="1597:13" pos:end="1597:20">case <expr pos:start="1597:18" pos:end="1597:19"><literal type="number" pos:start="1597:18" pos:end="1597:19">12</literal></expr>:</case>

                <expr_stmt pos:start="1599:17" pos:end="1599:40"><expr pos:start="1599:17" pos:end="1599:39"><name pos:start="1599:17" pos:end="1599:19">imm</name> <operator pos:start="1599:21" pos:end="1599:21">=</operator> <operator pos:start="1599:23" pos:end="1599:23">(</operator><name pos:start="1599:24" pos:end="1599:26">imm</name> <operator pos:start="1599:28" pos:end="1599:29">&lt;&lt;</operator> <literal type="number" pos:start="1599:31" pos:end="1599:31">8</literal><operator pos:start="1599:32" pos:end="1599:32">)</operator> <operator pos:start="1599:34" pos:end="1599:34">|</operator> <literal type="number" pos:start="1599:36" pos:end="1599:39">0xff</literal></expr>;</expr_stmt>

                <break pos:start="1601:17" pos:end="1601:22">break;</break>

            <case pos:start="1603:13" pos:end="1603:20">case <expr pos:start="1603:18" pos:end="1603:19"><literal type="number" pos:start="1603:18" pos:end="1603:19">13</literal></expr>:</case>

                <expr_stmt pos:start="1605:17" pos:end="1605:43"><expr pos:start="1605:17" pos:end="1605:42"><name pos:start="1605:17" pos:end="1605:19">imm</name> <operator pos:start="1605:21" pos:end="1605:21">=</operator> <operator pos:start="1605:23" pos:end="1605:23">(</operator><name pos:start="1605:24" pos:end="1605:26">imm</name> <operator pos:start="1605:28" pos:end="1605:29">&lt;&lt;</operator> <literal type="number" pos:start="1605:31" pos:end="1605:32">16</literal><operator pos:start="1605:33" pos:end="1605:33">)</operator> <operator pos:start="1605:35" pos:end="1605:35">|</operator> <literal type="number" pos:start="1605:37" pos:end="1605:42">0xffff</literal></expr>;</expr_stmt>

                <break pos:start="1607:17" pos:end="1607:22">break;</break>

            <case pos:start="1609:13" pos:end="1609:20">case <expr pos:start="1609:18" pos:end="1609:19"><literal type="number" pos:start="1609:18" pos:end="1609:19">14</literal></expr>:</case>

                <expr_stmt pos:start="1611:17" pos:end="1611:62"><expr pos:start="1611:17" pos:end="1611:61"><name pos:start="1611:17" pos:end="1611:19">imm</name> <operator pos:start="1611:21" pos:end="1611:22">|=</operator> <operator pos:start="1611:24" pos:end="1611:24">(</operator><name pos:start="1611:25" pos:end="1611:27">imm</name> <operator pos:start="1611:29" pos:end="1611:30">&lt;&lt;</operator> <literal type="number" pos:start="1611:32" pos:end="1611:32">8</literal><operator pos:start="1611:33" pos:end="1611:33">)</operator> <operator pos:start="1611:35" pos:end="1611:35">|</operator> <operator pos:start="1611:37" pos:end="1611:37">(</operator><name pos:start="1611:38" pos:end="1611:40">imm</name> <operator pos:start="1611:42" pos:end="1611:43">&lt;&lt;</operator> <literal type="number" pos:start="1611:45" pos:end="1611:46">16</literal><operator pos:start="1611:47" pos:end="1611:47">)</operator> <operator pos:start="1611:49" pos:end="1611:49">|</operator> <operator pos:start="1611:51" pos:end="1611:51">(</operator><name pos:start="1611:52" pos:end="1611:54">imm</name> <operator pos:start="1611:56" pos:end="1611:57">&lt;&lt;</operator> <literal type="number" pos:start="1611:59" pos:end="1611:60">24</literal><operator pos:start="1611:61" pos:end="1611:61">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1613:17" pos:end="1615:31"><if pos:start="1613:17" pos:end="1615:31">if <condition pos:start="1613:20" pos:end="1613:27">(<expr pos:start="1613:21" pos:end="1613:26"><name pos:start="1613:21" pos:end="1613:26">invert</name></expr>)</condition><block type="pseudo" pos:start="1615:21" pos:end="1615:31"><block_content pos:start="1615:21" pos:end="1615:31">

                    <expr_stmt pos:start="1615:21" pos:end="1615:31"><expr pos:start="1615:21" pos:end="1615:30"><name pos:start="1615:21" pos:end="1615:23">imm</name> <operator pos:start="1615:25" pos:end="1615:25">=</operator> <operator pos:start="1615:27" pos:end="1615:27">~</operator><name pos:start="1615:28" pos:end="1615:30">imm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="1617:17" pos:end="1617:22">break;</break>

            <case pos:start="1619:13" pos:end="1619:20">case <expr pos:start="1619:18" pos:end="1619:19"><literal type="number" pos:start="1619:18" pos:end="1619:19">15</literal></expr>:</case>

                <if_stmt pos:start="1621:17" pos:end="1625:17"><if pos:start="1621:17" pos:end="1625:17">if <condition pos:start="1621:20" pos:end="1621:27">(<expr pos:start="1621:21" pos:end="1621:26"><name pos:start="1621:21" pos:end="1621:26">invert</name></expr>)</condition> <block pos:start="1621:29" pos:end="1625:17">{<block_content pos:start="1623:21" pos:end="1623:29">

                    <return pos:start="1623:21" pos:end="1623:29">return <expr pos:start="1623:28" pos:end="1623:28"><literal type="number" pos:start="1623:28" pos:end="1623:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1627:17" pos:end="1629:66"><expr pos:start="1627:17" pos:end="1629:65"><name pos:start="1627:17" pos:end="1627:19">imm</name> <operator pos:start="1627:21" pos:end="1627:21">=</operator> <operator pos:start="1627:23" pos:end="1627:23">(</operator><operator pos:start="1627:24" pos:end="1627:24">(</operator><name pos:start="1627:25" pos:end="1627:27">imm</name> <operator pos:start="1627:29" pos:end="1627:29">&amp;</operator> <literal type="number" pos:start="1627:31" pos:end="1627:34">0x80</literal><operator pos:start="1627:35" pos:end="1627:35">)</operator> <operator pos:start="1627:37" pos:end="1627:38">&lt;&lt;</operator> <literal type="number" pos:start="1627:40" pos:end="1627:41">24</literal><operator pos:start="1627:42" pos:end="1627:42">)</operator> <operator pos:start="1627:44" pos:end="1627:44">|</operator> <operator pos:start="1627:46" pos:end="1627:46">(</operator><operator pos:start="1627:47" pos:end="1627:47">(</operator><name pos:start="1627:48" pos:end="1627:50">imm</name> <operator pos:start="1627:52" pos:end="1627:52">&amp;</operator> <literal type="number" pos:start="1627:54" pos:end="1627:57">0x3f</literal><operator pos:start="1627:58" pos:end="1627:58">)</operator> <operator pos:start="1627:60" pos:end="1627:61">&lt;&lt;</operator> <literal type="number" pos:start="1627:63" pos:end="1627:64">19</literal><operator pos:start="1627:65" pos:end="1627:65">)</operator>

                      <operator pos:start="1629:23" pos:end="1629:23">|</operator> <operator pos:start="1629:25" pos:end="1629:25">(</operator><ternary pos:start="1629:26" pos:end="1629:64"><condition pos:start="1629:26" pos:end="1629:39"><expr pos:start="1629:26" pos:end="1629:37"><operator pos:start="1629:26" pos:end="1629:26">(</operator><name pos:start="1629:27" pos:end="1629:29">imm</name> <operator pos:start="1629:31" pos:end="1629:31">&amp;</operator> <literal type="number" pos:start="1629:33" pos:end="1629:36">0x40</literal><operator pos:start="1629:37" pos:end="1629:37">)</operator></expr> ?</condition><then pos:start="1629:41" pos:end="1629:52"> <expr pos:start="1629:41" pos:end="1629:52"><operator pos:start="1629:41" pos:end="1629:41">(</operator><literal type="number" pos:start="1629:42" pos:end="1629:45">0x1f</literal> <operator pos:start="1629:47" pos:end="1629:48">&lt;&lt;</operator> <literal type="number" pos:start="1629:50" pos:end="1629:51">25</literal><operator pos:start="1629:52" pos:end="1629:52">)</operator></expr> </then><else pos:start="1629:54" pos:end="1629:64">: <expr pos:start="1629:56" pos:end="1629:64"><operator pos:start="1629:56" pos:end="1629:56">(</operator><literal type="number" pos:start="1629:57" pos:end="1629:57">1</literal> <operator pos:start="1629:59" pos:end="1629:60">&lt;&lt;</operator> <literal type="number" pos:start="1629:62" pos:end="1629:63">30</literal><operator pos:start="1629:64" pos:end="1629:64">)</operator></expr></else></ternary><operator pos:start="1629:65" pos:end="1629:65">)</operator></expr>;</expr_stmt>

                <break pos:start="1631:17" pos:end="1631:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="1635:13" pos:end="1637:27"><if pos:start="1635:13" pos:end="1637:27">if <condition pos:start="1635:16" pos:end="1635:23">(<expr pos:start="1635:17" pos:end="1635:22"><name pos:start="1635:17" pos:end="1635:22">invert</name></expr>)</condition><block type="pseudo" pos:start="1637:17" pos:end="1637:27"><block_content pos:start="1637:17" pos:end="1637:27">

                <expr_stmt pos:start="1637:17" pos:end="1637:27"><expr pos:start="1637:17" pos:end="1637:26"><name pos:start="1637:17" pos:end="1637:19">imm</name> <operator pos:start="1637:21" pos:end="1637:21">=</operator> <operator pos:start="1637:23" pos:end="1637:23">~</operator><name pos:start="1637:24" pos:end="1637:26">imm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="1641:13" pos:end="1695:13">for <control pos:start="1641:17" pos:end="1641:54">(<init pos:start="1641:18" pos:end="1641:26"><expr pos:start="1641:18" pos:end="1641:25"><name pos:start="1641:18" pos:end="1641:21">pass</name> <operator pos:start="1641:23" pos:end="1641:23">=</operator> <literal type="number" pos:start="1641:25" pos:end="1641:25">0</literal></expr>;</init> <condition pos:start="1641:28" pos:end="1641:46"><expr pos:start="1641:28" pos:end="1641:45"><name pos:start="1641:28" pos:end="1641:31">pass</name> <operator pos:start="1641:33" pos:end="1641:33">&lt;</operator> <operator pos:start="1641:35" pos:end="1641:35">(</operator><ternary pos:start="1641:36" pos:end="1641:44"><condition pos:start="1641:36" pos:end="1641:38"><expr pos:start="1641:36" pos:end="1641:36"><name pos:start="1641:36" pos:end="1641:36">q</name></expr> ?</condition><then pos:start="1641:40" pos:end="1641:40"> <expr pos:start="1641:40" pos:end="1641:40"><literal type="number" pos:start="1641:40" pos:end="1641:40">4</literal></expr> </then><else pos:start="1641:42" pos:end="1641:44">: <expr pos:start="1641:44" pos:end="1641:44"><literal type="number" pos:start="1641:44" pos:end="1641:44">2</literal></expr></else></ternary><operator pos:start="1641:45" pos:end="1641:45">)</operator></expr>;</condition> <incr pos:start="1641:48" pos:end="1641:53"><expr pos:start="1641:48" pos:end="1641:53"><name pos:start="1641:48" pos:end="1641:51">pass</name><operator pos:start="1641:52" pos:end="1641:53">++</operator></expr></incr>)</control> <block pos:start="1641:56" pos:end="1695:13">{<block_content pos:start="1643:17" pos:end="1693:46">

                <if_stmt pos:start="1643:17" pos:end="1691:17"><if pos:start="1643:17" pos:end="1661:17">if <condition pos:start="1643:20" pos:end="1643:38">(<expr pos:start="1643:21" pos:end="1643:37"><name pos:start="1643:21" pos:end="1643:22">op</name> <operator pos:start="1643:24" pos:end="1643:24">&amp;</operator> <literal type="number" pos:start="1643:26" pos:end="1643:26">1</literal> <operator pos:start="1643:28" pos:end="1643:29">&amp;&amp;</operator> <name pos:start="1643:31" pos:end="1643:32">op</name> <operator pos:start="1643:34" pos:end="1643:34">&lt;</operator> <literal type="number" pos:start="1643:36" pos:end="1643:37">12</literal></expr>)</condition> <block pos:start="1643:40" pos:end="1661:17">{<block_content pos:start="1645:21" pos:end="1659:21">

                    <expr_stmt pos:start="1645:21" pos:end="1645:50"><expr pos:start="1645:21" pos:end="1645:49"><name pos:start="1645:21" pos:end="1645:23">tmp</name> <operator pos:start="1645:25" pos:end="1645:25">=</operator> <call pos:start="1645:27" pos:end="1645:49"><name pos:start="1645:27" pos:end="1645:39">neon_load_reg</name><argument_list pos:start="1645:40" pos:end="1645:49">(<argument pos:start="1645:41" pos:end="1645:42"><expr pos:start="1645:41" pos:end="1645:42"><name pos:start="1645:41" pos:end="1645:42">rd</name></expr></argument>, <argument pos:start="1645:45" pos:end="1645:48"><expr pos:start="1645:45" pos:end="1645:48"><name pos:start="1645:45" pos:end="1645:48">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1647:21" pos:end="1659:21"><if pos:start="1647:21" pos:end="1655:21">if <condition pos:start="1647:24" pos:end="1647:31">(<expr pos:start="1647:25" pos:end="1647:30"><name pos:start="1647:25" pos:end="1647:30">invert</name></expr>)</condition> <block pos:start="1647:33" pos:end="1655:21">{<block_content pos:start="1653:25" pos:end="1653:56">

                        <comment type="block" pos:start="1649:25" pos:end="1651:47">/* The immediate value has already been inverted, so

                           BIC becomes AND.  */</comment>

                        <expr_stmt pos:start="1653:25" pos:end="1653:56"><expr pos:start="1653:25" pos:end="1653:55"><call pos:start="1653:25" pos:end="1653:55"><name pos:start="1653:25" pos:end="1653:40">tcg_gen_andi_i32</name><argument_list pos:start="1653:41" pos:end="1653:55">(<argument pos:start="1653:42" pos:end="1653:44"><expr pos:start="1653:42" pos:end="1653:44"><name pos:start="1653:42" pos:end="1653:44">tmp</name></expr></argument>, <argument pos:start="1653:47" pos:end="1653:49"><expr pos:start="1653:47" pos:end="1653:49"><name pos:start="1653:47" pos:end="1653:49">tmp</name></expr></argument>, <argument pos:start="1653:52" pos:end="1653:54"><expr pos:start="1653:52" pos:end="1653:54"><name pos:start="1653:52" pos:end="1653:54">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1655:23" pos:end="1659:21">else <block pos:start="1655:28" pos:end="1659:21">{<block_content pos:start="1657:25" pos:end="1657:55">

                        <expr_stmt pos:start="1657:25" pos:end="1657:55"><expr pos:start="1657:25" pos:end="1657:54"><call pos:start="1657:25" pos:end="1657:54"><name pos:start="1657:25" pos:end="1657:39">tcg_gen_ori_i32</name><argument_list pos:start="1657:40" pos:end="1657:54">(<argument pos:start="1657:41" pos:end="1657:43"><expr pos:start="1657:41" pos:end="1657:43"><name pos:start="1657:41" pos:end="1657:43">tmp</name></expr></argument>, <argument pos:start="1657:46" pos:end="1657:48"><expr pos:start="1657:46" pos:end="1657:48"><name pos:start="1657:46" pos:end="1657:48">tmp</name></expr></argument>, <argument pos:start="1657:51" pos:end="1657:53"><expr pos:start="1657:51" pos:end="1657:53"><name pos:start="1657:51" pos:end="1657:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1661:19" pos:end="1691:17">else <block pos:start="1661:24" pos:end="1691:17">{<block_content pos:start="1665:21" pos:end="1689:21">

                    <comment type="block" pos:start="1663:21" pos:end="1663:38">/* VMOV, VMVN.  */</comment>

                    <expr_stmt pos:start="1665:21" pos:end="1665:45"><expr pos:start="1665:21" pos:end="1665:44"><name pos:start="1665:21" pos:end="1665:23">tmp</name> <operator pos:start="1665:25" pos:end="1665:25">=</operator> <call pos:start="1665:27" pos:end="1665:44"><name pos:start="1665:27" pos:end="1665:42">tcg_temp_new_i32</name><argument_list pos:start="1665:43" pos:end="1665:44">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1667:21" pos:end="1689:21"><if pos:start="1667:21" pos:end="1685:21">if <condition pos:start="1667:24" pos:end="1667:43">(<expr pos:start="1667:25" pos:end="1667:42"><name pos:start="1667:25" pos:end="1667:26">op</name> <operator pos:start="1667:28" pos:end="1667:29">==</operator> <literal type="number" pos:start="1667:31" pos:end="1667:32">14</literal> <operator pos:start="1667:34" pos:end="1667:35">&amp;&amp;</operator> <name pos:start="1667:37" pos:end="1667:42">invert</name></expr>)</condition> <block pos:start="1667:45" pos:end="1685:21">{<block_content pos:start="1669:25" pos:end="1683:51">

                        <decl_stmt pos:start="1669:25" pos:end="1669:30"><decl pos:start="1669:25" pos:end="1669:29"><type pos:start="1669:25" pos:end="1669:27"><name pos:start="1669:25" pos:end="1669:27">int</name></type> <name pos:start="1669:29" pos:end="1669:29">n</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="1671:25" pos:end="1671:37"><decl pos:start="1671:25" pos:end="1671:36"><type pos:start="1671:25" pos:end="1671:32"><name pos:start="1671:25" pos:end="1671:32">uint32_t</name></type> <name pos:start="1671:34" pos:end="1671:36">val</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="1673:25" pos:end="1673:32"><expr pos:start="1673:25" pos:end="1673:31"><name pos:start="1673:25" pos:end="1673:27">val</name> <operator pos:start="1673:29" pos:end="1673:29">=</operator> <literal type="number" pos:start="1673:31" pos:end="1673:31">0</literal></expr>;</expr_stmt>

                        <for pos:start="1675:25" pos:end="1681:25">for <control pos:start="1675:29" pos:end="1675:47">(<init pos:start="1675:30" pos:end="1675:35"><expr pos:start="1675:30" pos:end="1675:34"><name pos:start="1675:30" pos:end="1675:30">n</name> <operator pos:start="1675:32" pos:end="1675:32">=</operator> <literal type="number" pos:start="1675:34" pos:end="1675:34">0</literal></expr>;</init> <condition pos:start="1675:37" pos:end="1675:42"><expr pos:start="1675:37" pos:end="1675:41"><name pos:start="1675:37" pos:end="1675:37">n</name> <operator pos:start="1675:39" pos:end="1675:39">&lt;</operator> <literal type="number" pos:start="1675:41" pos:end="1675:41">4</literal></expr>;</condition> <incr pos:start="1675:44" pos:end="1675:46"><expr pos:start="1675:44" pos:end="1675:46"><name pos:start="1675:44" pos:end="1675:44">n</name><operator pos:start="1675:45" pos:end="1675:46">++</operator></expr></incr>)</control> <block pos:start="1675:49" pos:end="1681:25">{<block_content pos:start="1677:29" pos:end="1679:55">

                            <if_stmt pos:start="1677:29" pos:end="1679:55"><if pos:start="1677:29" pos:end="1679:55">if <condition pos:start="1677:32" pos:end="1677:66">(<expr pos:start="1677:33" pos:end="1677:65"><name pos:start="1677:33" pos:end="1677:35">imm</name> <operator pos:start="1677:37" pos:end="1677:37">&amp;</operator> <operator pos:start="1677:39" pos:end="1677:39">(</operator><literal type="number" pos:start="1677:40" pos:end="1677:40">1</literal> <operator pos:start="1677:42" pos:end="1677:43">&lt;&lt;</operator> <operator pos:start="1677:45" pos:end="1677:45">(</operator><name pos:start="1677:46" pos:end="1677:46">n</name> <operator pos:start="1677:48" pos:end="1677:48">+</operator> <operator pos:start="1677:50" pos:end="1677:50">(</operator><name pos:start="1677:51" pos:end="1677:54">pass</name> <operator pos:start="1677:56" pos:end="1677:56">&amp;</operator> <literal type="number" pos:start="1677:58" pos:end="1677:58">1</literal><operator pos:start="1677:59" pos:end="1677:59">)</operator> <operator pos:start="1677:61" pos:end="1677:61">*</operator> <literal type="number" pos:start="1677:63" pos:end="1677:63">4</literal><operator pos:start="1677:64" pos:end="1677:64">)</operator><operator pos:start="1677:65" pos:end="1677:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1679:33" pos:end="1679:55"><block_content pos:start="1679:33" pos:end="1679:55">

                                <expr_stmt pos:start="1679:33" pos:end="1679:55"><expr pos:start="1679:33" pos:end="1679:54"><name pos:start="1679:33" pos:end="1679:35">val</name> <operator pos:start="1679:37" pos:end="1679:38">|=</operator> <literal type="number" pos:start="1679:40" pos:end="1679:43">0xff</literal> <operator pos:start="1679:45" pos:end="1679:46">&lt;&lt;</operator> <operator pos:start="1679:48" pos:end="1679:48">(</operator><name pos:start="1679:49" pos:end="1679:49">n</name> <operator pos:start="1679:51" pos:end="1679:51">*</operator> <literal type="number" pos:start="1679:53" pos:end="1679:53">8</literal><operator pos:start="1679:54" pos:end="1679:54">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="1683:25" pos:end="1683:51"><expr pos:start="1683:25" pos:end="1683:50"><call pos:start="1683:25" pos:end="1683:50"><name pos:start="1683:25" pos:end="1683:40">tcg_gen_movi_i32</name><argument_list pos:start="1683:41" pos:end="1683:50">(<argument pos:start="1683:42" pos:end="1683:44"><expr pos:start="1683:42" pos:end="1683:44"><name pos:start="1683:42" pos:end="1683:44">tmp</name></expr></argument>, <argument pos:start="1683:47" pos:end="1683:49"><expr pos:start="1683:47" pos:end="1683:49"><name pos:start="1683:47" pos:end="1683:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1685:23" pos:end="1689:21">else <block pos:start="1685:28" pos:end="1689:21">{<block_content pos:start="1687:25" pos:end="1687:51">

                        <expr_stmt pos:start="1687:25" pos:end="1687:51"><expr pos:start="1687:25" pos:end="1687:50"><call pos:start="1687:25" pos:end="1687:50"><name pos:start="1687:25" pos:end="1687:40">tcg_gen_movi_i32</name><argument_list pos:start="1687:41" pos:end="1687:50">(<argument pos:start="1687:42" pos:end="1687:44"><expr pos:start="1687:42" pos:end="1687:44"><name pos:start="1687:42" pos:end="1687:44">tmp</name></expr></argument>, <argument pos:start="1687:47" pos:end="1687:49"><expr pos:start="1687:47" pos:end="1687:49"><name pos:start="1687:47" pos:end="1687:49">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1693:17" pos:end="1693:46"><expr pos:start="1693:17" pos:end="1693:45"><call pos:start="1693:17" pos:end="1693:45"><name pos:start="1693:17" pos:end="1693:30">neon_store_reg</name><argument_list pos:start="1693:31" pos:end="1693:45">(<argument pos:start="1693:32" pos:end="1693:33"><expr pos:start="1693:32" pos:end="1693:33"><name pos:start="1693:32" pos:end="1693:33">rd</name></expr></argument>, <argument pos:start="1693:36" pos:end="1693:39"><expr pos:start="1693:36" pos:end="1693:39"><name pos:start="1693:36" pos:end="1693:39">pass</name></expr></argument>, <argument pos:start="1693:42" pos:end="1693:44"><expr pos:start="1693:42" pos:end="1693:44"><name pos:start="1693:42" pos:end="1693:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="1699:7" pos:end="3277:5">else <block pos:start="1699:12" pos:end="3277:5">{<block_content pos:start="1701:9" pos:end="3275:9"> <comment type="block" pos:start="1699:14" pos:end="1699:52">/* (insn &amp; 0x00800010 == 0x00800000) */</comment>

        <if_stmt pos:start="1701:9" pos:end="3275:9"><if pos:start="1701:9" pos:end="2379:9">if <condition pos:start="1701:12" pos:end="1701:22">(<expr pos:start="1701:13" pos:end="1701:21"><name pos:start="1701:13" pos:end="1701:16">size</name> <operator pos:start="1701:18" pos:end="1701:19">!=</operator> <literal type="number" pos:start="1701:21" pos:end="1701:21">3</literal></expr>)</condition> <block pos:start="1701:24" pos:end="2379:9">{<block_content pos:start="1703:13" pos:end="2377:13">

            <expr_stmt pos:start="1703:13" pos:end="1703:35"><expr pos:start="1703:13" pos:end="1703:34"><name pos:start="1703:13" pos:end="1703:14">op</name> <operator pos:start="1703:16" pos:end="1703:16">=</operator> <operator pos:start="1703:18" pos:end="1703:18">(</operator><name pos:start="1703:19" pos:end="1703:22">insn</name> <operator pos:start="1703:24" pos:end="1703:25">&gt;&gt;</operator> <literal type="number" pos:start="1703:27" pos:end="1703:27">8</literal><operator pos:start="1703:28" pos:end="1703:28">)</operator> <operator pos:start="1703:30" pos:end="1703:30">&amp;</operator> <literal type="number" pos:start="1703:32" pos:end="1703:34">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1705:13" pos:end="2377:13"><if pos:start="1705:13" pos:end="2101:13">if <condition pos:start="1705:16" pos:end="1705:39">(<expr pos:start="1705:17" pos:end="1705:38"><operator pos:start="1705:17" pos:end="1705:17">(</operator><name pos:start="1705:18" pos:end="1705:21">insn</name> <operator pos:start="1705:23" pos:end="1705:23">&amp;</operator> <operator pos:start="1705:25" pos:end="1705:25">(</operator><literal type="number" pos:start="1705:26" pos:end="1705:26">1</literal> <operator pos:start="1705:28" pos:end="1705:29">&lt;&lt;</operator> <literal type="number" pos:start="1705:31" pos:end="1705:31">6</literal><operator pos:start="1705:32" pos:end="1705:32">)</operator><operator pos:start="1705:33" pos:end="1705:33">)</operator> <operator pos:start="1705:35" pos:end="1705:36">==</operator> <literal type="number" pos:start="1705:38" pos:end="1705:38">0</literal></expr>)</condition> <block pos:start="1705:41" pos:end="2101:13">{<block_content pos:start="1709:17" pos:end="2099:17">

                <comment type="block" pos:start="1707:17" pos:end="1707:60">/* Three registers of different lengths.  */</comment>

                <decl_stmt pos:start="1709:17" pos:end="1709:30"><decl pos:start="1709:17" pos:end="1709:29"><type pos:start="1709:17" pos:end="1709:19"><name pos:start="1709:17" pos:end="1709:19">int</name></type> <name pos:start="1709:21" pos:end="1709:29">src1_wide</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1711:17" pos:end="1711:30"><decl pos:start="1711:17" pos:end="1711:29"><type pos:start="1711:17" pos:end="1711:19"><name pos:start="1711:17" pos:end="1711:19">int</name></type> <name pos:start="1711:21" pos:end="1711:29">src2_wide</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1713:17" pos:end="1713:29"><decl pos:start="1713:17" pos:end="1713:28"><type pos:start="1713:17" pos:end="1713:19"><name pos:start="1713:17" pos:end="1713:19">int</name></type> <name pos:start="1713:21" pos:end="1713:28">prewiden</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1715:17" pos:end="1723:19">/* undefreq: bit 0 : UNDEF if size != 0

                 *           bit 1 : UNDEF if size == 0

                 *           bit 2 : UNDEF if U == 1

                 * Note that [1:0] set implies 'always UNDEF'

                 */</comment>

                <decl_stmt pos:start="1725:17" pos:end="1725:29"><decl pos:start="1725:17" pos:end="1725:28"><type pos:start="1725:17" pos:end="1725:19"><name pos:start="1725:17" pos:end="1725:19">int</name></type> <name pos:start="1725:21" pos:end="1725:28">undefreq</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1727:17" pos:end="1727:62">/* prewiden, src1_wide, src2_wide, undefreq */</comment>

                <decl_stmt pos:start="1729:17" pos:end="1763:18"><decl pos:start="1729:17" pos:end="1763:17"><type pos:start="1729:17" pos:end="1729:32"><specifier pos:start="1729:17" pos:end="1729:22">static</specifier> <specifier pos:start="1729:24" pos:end="1729:28">const</specifier> <name pos:start="1729:30" pos:end="1729:32">int</name></type> <name pos:start="1729:34" pos:end="1729:54"><name pos:start="1729:34" pos:end="1729:47">neon_3reg_wide</name><index pos:start="1729:48" pos:end="1729:51">[<expr pos:start="1729:49" pos:end="1729:50"><literal type="number" pos:start="1729:49" pos:end="1729:50">16</literal></expr>]</index><index pos:start="1729:52" pos:end="1729:54">[<expr pos:start="1729:53" pos:end="1729:53"><literal type="number" pos:start="1729:53" pos:end="1729:53">4</literal></expr>]</index></name> <init pos:start="1729:56" pos:end="1763:17">= <expr pos:start="1729:58" pos:end="1763:17"><block pos:start="1729:58" pos:end="1763:17">{

                    <expr pos:start="1731:21" pos:end="1731:32"><block pos:start="1731:21" pos:end="1731:32">{<expr pos:start="1731:22" pos:end="1731:22"><literal type="number" pos:start="1731:22" pos:end="1731:22">1</literal></expr>, <expr pos:start="1731:25" pos:end="1731:25"><literal type="number" pos:start="1731:25" pos:end="1731:25">0</literal></expr>, <expr pos:start="1731:28" pos:end="1731:28"><literal type="number" pos:start="1731:28" pos:end="1731:28">0</literal></expr>, <expr pos:start="1731:31" pos:end="1731:31"><literal type="number" pos:start="1731:31" pos:end="1731:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1731:35" pos:end="1731:45">/* VADDL */</comment>

                    <expr pos:start="1733:21" pos:end="1733:32"><block pos:start="1733:21" pos:end="1733:32">{<expr pos:start="1733:22" pos:end="1733:22"><literal type="number" pos:start="1733:22" pos:end="1733:22">1</literal></expr>, <expr pos:start="1733:25" pos:end="1733:25"><literal type="number" pos:start="1733:25" pos:end="1733:25">1</literal></expr>, <expr pos:start="1733:28" pos:end="1733:28"><literal type="number" pos:start="1733:28" pos:end="1733:28">0</literal></expr>, <expr pos:start="1733:31" pos:end="1733:31"><literal type="number" pos:start="1733:31" pos:end="1733:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1733:35" pos:end="1733:45">/* VADDW */</comment>

                    <expr pos:start="1735:21" pos:end="1735:32"><block pos:start="1735:21" pos:end="1735:32">{<expr pos:start="1735:22" pos:end="1735:22"><literal type="number" pos:start="1735:22" pos:end="1735:22">1</literal></expr>, <expr pos:start="1735:25" pos:end="1735:25"><literal type="number" pos:start="1735:25" pos:end="1735:25">0</literal></expr>, <expr pos:start="1735:28" pos:end="1735:28"><literal type="number" pos:start="1735:28" pos:end="1735:28">0</literal></expr>, <expr pos:start="1735:31" pos:end="1735:31"><literal type="number" pos:start="1735:31" pos:end="1735:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1735:35" pos:end="1735:45">/* VSUBL */</comment>

                    <expr pos:start="1737:21" pos:end="1737:32"><block pos:start="1737:21" pos:end="1737:32">{<expr pos:start="1737:22" pos:end="1737:22"><literal type="number" pos:start="1737:22" pos:end="1737:22">1</literal></expr>, <expr pos:start="1737:25" pos:end="1737:25"><literal type="number" pos:start="1737:25" pos:end="1737:25">1</literal></expr>, <expr pos:start="1737:28" pos:end="1737:28"><literal type="number" pos:start="1737:28" pos:end="1737:28">0</literal></expr>, <expr pos:start="1737:31" pos:end="1737:31"><literal type="number" pos:start="1737:31" pos:end="1737:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1737:35" pos:end="1737:45">/* VSUBW */</comment>

                    <expr pos:start="1739:21" pos:end="1739:32"><block pos:start="1739:21" pos:end="1739:32">{<expr pos:start="1739:22" pos:end="1739:22"><literal type="number" pos:start="1739:22" pos:end="1739:22">0</literal></expr>, <expr pos:start="1739:25" pos:end="1739:25"><literal type="number" pos:start="1739:25" pos:end="1739:25">1</literal></expr>, <expr pos:start="1739:28" pos:end="1739:28"><literal type="number" pos:start="1739:28" pos:end="1739:28">1</literal></expr>, <expr pos:start="1739:31" pos:end="1739:31"><literal type="number" pos:start="1739:31" pos:end="1739:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1739:35" pos:end="1739:46">/* VADDHN */</comment>

                    <expr pos:start="1741:21" pos:end="1741:32"><block pos:start="1741:21" pos:end="1741:32">{<expr pos:start="1741:22" pos:end="1741:22"><literal type="number" pos:start="1741:22" pos:end="1741:22">0</literal></expr>, <expr pos:start="1741:25" pos:end="1741:25"><literal type="number" pos:start="1741:25" pos:end="1741:25">0</literal></expr>, <expr pos:start="1741:28" pos:end="1741:28"><literal type="number" pos:start="1741:28" pos:end="1741:28">0</literal></expr>, <expr pos:start="1741:31" pos:end="1741:31"><literal type="number" pos:start="1741:31" pos:end="1741:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1741:35" pos:end="1741:45">/* VABAL */</comment>

                    <expr pos:start="1743:21" pos:end="1743:32"><block pos:start="1743:21" pos:end="1743:32">{<expr pos:start="1743:22" pos:end="1743:22"><literal type="number" pos:start="1743:22" pos:end="1743:22">0</literal></expr>, <expr pos:start="1743:25" pos:end="1743:25"><literal type="number" pos:start="1743:25" pos:end="1743:25">1</literal></expr>, <expr pos:start="1743:28" pos:end="1743:28"><literal type="number" pos:start="1743:28" pos:end="1743:28">1</literal></expr>, <expr pos:start="1743:31" pos:end="1743:31"><literal type="number" pos:start="1743:31" pos:end="1743:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1743:35" pos:end="1743:46">/* VSUBHN */</comment>

                    <expr pos:start="1745:21" pos:end="1745:32"><block pos:start="1745:21" pos:end="1745:32">{<expr pos:start="1745:22" pos:end="1745:22"><literal type="number" pos:start="1745:22" pos:end="1745:22">0</literal></expr>, <expr pos:start="1745:25" pos:end="1745:25"><literal type="number" pos:start="1745:25" pos:end="1745:25">0</literal></expr>, <expr pos:start="1745:28" pos:end="1745:28"><literal type="number" pos:start="1745:28" pos:end="1745:28">0</literal></expr>, <expr pos:start="1745:31" pos:end="1745:31"><literal type="number" pos:start="1745:31" pos:end="1745:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1745:35" pos:end="1745:45">/* VABDL */</comment>

                    <expr pos:start="1747:21" pos:end="1747:32"><block pos:start="1747:21" pos:end="1747:32">{<expr pos:start="1747:22" pos:end="1747:22"><literal type="number" pos:start="1747:22" pos:end="1747:22">0</literal></expr>, <expr pos:start="1747:25" pos:end="1747:25"><literal type="number" pos:start="1747:25" pos:end="1747:25">0</literal></expr>, <expr pos:start="1747:28" pos:end="1747:28"><literal type="number" pos:start="1747:28" pos:end="1747:28">0</literal></expr>, <expr pos:start="1747:31" pos:end="1747:31"><literal type="number" pos:start="1747:31" pos:end="1747:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1747:35" pos:end="1747:45">/* VMLAL */</comment>

                    <expr pos:start="1749:21" pos:end="1749:32"><block pos:start="1749:21" pos:end="1749:32">{<expr pos:start="1749:22" pos:end="1749:22"><literal type="number" pos:start="1749:22" pos:end="1749:22">0</literal></expr>, <expr pos:start="1749:25" pos:end="1749:25"><literal type="number" pos:start="1749:25" pos:end="1749:25">0</literal></expr>, <expr pos:start="1749:28" pos:end="1749:28"><literal type="number" pos:start="1749:28" pos:end="1749:28">0</literal></expr>, <expr pos:start="1749:31" pos:end="1749:31"><literal type="number" pos:start="1749:31" pos:end="1749:31">6</literal></expr>}</block></expr>, <comment type="block" pos:start="1749:35" pos:end="1749:47">/* VQDMLAL */</comment>

                    <expr pos:start="1751:21" pos:end="1751:32"><block pos:start="1751:21" pos:end="1751:32">{<expr pos:start="1751:22" pos:end="1751:22"><literal type="number" pos:start="1751:22" pos:end="1751:22">0</literal></expr>, <expr pos:start="1751:25" pos:end="1751:25"><literal type="number" pos:start="1751:25" pos:end="1751:25">0</literal></expr>, <expr pos:start="1751:28" pos:end="1751:28"><literal type="number" pos:start="1751:28" pos:end="1751:28">0</literal></expr>, <expr pos:start="1751:31" pos:end="1751:31"><literal type="number" pos:start="1751:31" pos:end="1751:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1751:35" pos:end="1751:45">/* VMLSL */</comment>

                    <expr pos:start="1753:21" pos:end="1753:32"><block pos:start="1753:21" pos:end="1753:32">{<expr pos:start="1753:22" pos:end="1753:22"><literal type="number" pos:start="1753:22" pos:end="1753:22">0</literal></expr>, <expr pos:start="1753:25" pos:end="1753:25"><literal type="number" pos:start="1753:25" pos:end="1753:25">0</literal></expr>, <expr pos:start="1753:28" pos:end="1753:28"><literal type="number" pos:start="1753:28" pos:end="1753:28">0</literal></expr>, <expr pos:start="1753:31" pos:end="1753:31"><literal type="number" pos:start="1753:31" pos:end="1753:31">6</literal></expr>}</block></expr>, <comment type="block" pos:start="1753:35" pos:end="1753:47">/* VQDMLSL */</comment>

                    <expr pos:start="1755:21" pos:end="1755:32"><block pos:start="1755:21" pos:end="1755:32">{<expr pos:start="1755:22" pos:end="1755:22"><literal type="number" pos:start="1755:22" pos:end="1755:22">0</literal></expr>, <expr pos:start="1755:25" pos:end="1755:25"><literal type="number" pos:start="1755:25" pos:end="1755:25">0</literal></expr>, <expr pos:start="1755:28" pos:end="1755:28"><literal type="number" pos:start="1755:28" pos:end="1755:28">0</literal></expr>, <expr pos:start="1755:31" pos:end="1755:31"><literal type="number" pos:start="1755:31" pos:end="1755:31">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1755:35" pos:end="1755:53">/* Integer VMULL */</comment>

                    <expr pos:start="1757:21" pos:end="1757:32"><block pos:start="1757:21" pos:end="1757:32">{<expr pos:start="1757:22" pos:end="1757:22"><literal type="number" pos:start="1757:22" pos:end="1757:22">0</literal></expr>, <expr pos:start="1757:25" pos:end="1757:25"><literal type="number" pos:start="1757:25" pos:end="1757:25">0</literal></expr>, <expr pos:start="1757:28" pos:end="1757:28"><literal type="number" pos:start="1757:28" pos:end="1757:28">0</literal></expr>, <expr pos:start="1757:31" pos:end="1757:31"><literal type="number" pos:start="1757:31" pos:end="1757:31">2</literal></expr>}</block></expr>, <comment type="block" pos:start="1757:35" pos:end="1757:47">/* VQDMULL */</comment>

                    <expr pos:start="1759:21" pos:end="1759:32"><block pos:start="1759:21" pos:end="1759:32">{<expr pos:start="1759:22" pos:end="1759:22"><literal type="number" pos:start="1759:22" pos:end="1759:22">0</literal></expr>, <expr pos:start="1759:25" pos:end="1759:25"><literal type="number" pos:start="1759:25" pos:end="1759:25">0</literal></expr>, <expr pos:start="1759:28" pos:end="1759:28"><literal type="number" pos:start="1759:28" pos:end="1759:28">0</literal></expr>, <expr pos:start="1759:31" pos:end="1759:31"><literal type="number" pos:start="1759:31" pos:end="1759:31">5</literal></expr>}</block></expr>, <comment type="block" pos:start="1759:35" pos:end="1759:56">/* Polynomial VMULL */</comment>

                    <expr pos:start="1761:21" pos:end="1761:32"><block pos:start="1761:21" pos:end="1761:32">{<expr pos:start="1761:22" pos:end="1761:22"><literal type="number" pos:start="1761:22" pos:end="1761:22">0</literal></expr>, <expr pos:start="1761:25" pos:end="1761:25"><literal type="number" pos:start="1761:25" pos:end="1761:25">0</literal></expr>, <expr pos:start="1761:28" pos:end="1761:28"><literal type="number" pos:start="1761:28" pos:end="1761:28">0</literal></expr>, <expr pos:start="1761:31" pos:end="1761:31"><literal type="number" pos:start="1761:31" pos:end="1761:31">3</literal></expr>}</block></expr>, <comment type="block" pos:start="1761:35" pos:end="1761:62">/* Reserved: always UNDEF */</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1767:17" pos:end="1767:49"><expr pos:start="1767:17" pos:end="1767:48"><name pos:start="1767:17" pos:end="1767:24">prewiden</name> <operator pos:start="1767:26" pos:end="1767:26">=</operator> <name pos:start="1767:28" pos:end="1767:48"><name pos:start="1767:28" pos:end="1767:41">neon_3reg_wide</name><index pos:start="1767:42" pos:end="1767:45">[<expr pos:start="1767:43" pos:end="1767:44"><name pos:start="1767:43" pos:end="1767:44">op</name></expr>]</index><index pos:start="1767:46" pos:end="1767:48">[<expr pos:start="1767:47" pos:end="1767:47"><literal type="number" pos:start="1767:47" pos:end="1767:47">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1769:17" pos:end="1769:50"><expr pos:start="1769:17" pos:end="1769:49"><name pos:start="1769:17" pos:end="1769:25">src1_wide</name> <operator pos:start="1769:27" pos:end="1769:27">=</operator> <name pos:start="1769:29" pos:end="1769:49"><name pos:start="1769:29" pos:end="1769:42">neon_3reg_wide</name><index pos:start="1769:43" pos:end="1769:46">[<expr pos:start="1769:44" pos:end="1769:45"><name pos:start="1769:44" pos:end="1769:45">op</name></expr>]</index><index pos:start="1769:47" pos:end="1769:49">[<expr pos:start="1769:48" pos:end="1769:48"><literal type="number" pos:start="1769:48" pos:end="1769:48">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1771:17" pos:end="1771:50"><expr pos:start="1771:17" pos:end="1771:49"><name pos:start="1771:17" pos:end="1771:25">src2_wide</name> <operator pos:start="1771:27" pos:end="1771:27">=</operator> <name pos:start="1771:29" pos:end="1771:49"><name pos:start="1771:29" pos:end="1771:42">neon_3reg_wide</name><index pos:start="1771:43" pos:end="1771:46">[<expr pos:start="1771:44" pos:end="1771:45"><name pos:start="1771:44" pos:end="1771:45">op</name></expr>]</index><index pos:start="1771:47" pos:end="1771:49">[<expr pos:start="1771:48" pos:end="1771:48"><literal type="number" pos:start="1771:48" pos:end="1771:48">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1773:17" pos:end="1773:49"><expr pos:start="1773:17" pos:end="1773:48"><name pos:start="1773:17" pos:end="1773:24">undefreq</name> <operator pos:start="1773:26" pos:end="1773:26">=</operator> <name pos:start="1773:28" pos:end="1773:48"><name pos:start="1773:28" pos:end="1773:41">neon_3reg_wide</name><index pos:start="1773:42" pos:end="1773:45">[<expr pos:start="1773:43" pos:end="1773:44"><name pos:start="1773:43" pos:end="1773:44">op</name></expr>]</index><index pos:start="1773:46" pos:end="1773:48">[<expr pos:start="1773:47" pos:end="1773:47"><literal type="number" pos:start="1773:47" pos:end="1773:47">3</literal></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="1777:17" pos:end="1785:17"><if pos:start="1777:17" pos:end="1785:17">if <condition pos:start="1777:20" pos:end="1781:42">(<expr pos:start="1777:21" pos:end="1781:41"><operator pos:start="1777:21" pos:end="1777:21">(</operator><operator pos:start="1777:22" pos:end="1777:22">(</operator><name pos:start="1777:23" pos:end="1777:30">undefreq</name> <operator pos:start="1777:32" pos:end="1777:32">&amp;</operator> <literal type="number" pos:start="1777:34" pos:end="1777:34">1</literal><operator pos:start="1777:35" pos:end="1777:35">)</operator> <operator pos:start="1777:37" pos:end="1777:38">&amp;&amp;</operator> <operator pos:start="1777:40" pos:end="1777:40">(</operator><name pos:start="1777:41" pos:end="1777:44">size</name> <operator pos:start="1777:46" pos:end="1777:47">!=</operator> <literal type="number" pos:start="1777:49" pos:end="1777:49">0</literal><operator pos:start="1777:50" pos:end="1777:50">)</operator><operator pos:start="1777:51" pos:end="1777:51">)</operator> <operator pos:start="1777:53" pos:end="1777:54">||</operator>

                    <operator pos:start="1779:21" pos:end="1779:21">(</operator><operator pos:start="1779:22" pos:end="1779:22">(</operator><name pos:start="1779:23" pos:end="1779:30">undefreq</name> <operator pos:start="1779:32" pos:end="1779:32">&amp;</operator> <literal type="number" pos:start="1779:34" pos:end="1779:34">2</literal><operator pos:start="1779:35" pos:end="1779:35">)</operator> <operator pos:start="1779:37" pos:end="1779:38">&amp;&amp;</operator> <operator pos:start="1779:40" pos:end="1779:40">(</operator><name pos:start="1779:41" pos:end="1779:44">size</name> <operator pos:start="1779:46" pos:end="1779:47">==</operator> <literal type="number" pos:start="1779:49" pos:end="1779:49">0</literal><operator pos:start="1779:50" pos:end="1779:50">)</operator><operator pos:start="1779:51" pos:end="1779:51">)</operator> <operator pos:start="1779:53" pos:end="1779:54">||</operator>

                    <operator pos:start="1781:21" pos:end="1781:21">(</operator><operator pos:start="1781:22" pos:end="1781:22">(</operator><name pos:start="1781:23" pos:end="1781:30">undefreq</name> <operator pos:start="1781:32" pos:end="1781:32">&amp;</operator> <literal type="number" pos:start="1781:34" pos:end="1781:34">4</literal><operator pos:start="1781:35" pos:end="1781:35">)</operator> <operator pos:start="1781:37" pos:end="1781:38">&amp;&amp;</operator> <name pos:start="1781:40" pos:end="1781:40">u</name><operator pos:start="1781:41" pos:end="1781:41">)</operator></expr>)</condition> <block pos:start="1781:44" pos:end="1785:17">{<block_content pos:start="1783:21" pos:end="1783:29">

                    <return pos:start="1783:21" pos:end="1783:29">return <expr pos:start="1783:28" pos:end="1783:28"><literal type="number" pos:start="1783:28" pos:end="1783:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1787:17" pos:end="1795:17"><if pos:start="1787:17" pos:end="1795:17">if <condition pos:start="1787:20" pos:end="1791:45">(<expr pos:start="1787:21" pos:end="1791:44"><operator pos:start="1787:21" pos:end="1787:21">(</operator><name pos:start="1787:22" pos:end="1787:30">src1_wide</name> <operator pos:start="1787:32" pos:end="1787:33">&amp;&amp;</operator> <operator pos:start="1787:35" pos:end="1787:35">(</operator><name pos:start="1787:36" pos:end="1787:37">rn</name> <operator pos:start="1787:39" pos:end="1787:39">&amp;</operator> <literal type="number" pos:start="1787:41" pos:end="1787:41">1</literal><operator pos:start="1787:42" pos:end="1787:42">)</operator><operator pos:start="1787:43" pos:end="1787:43">)</operator> <operator pos:start="1787:45" pos:end="1787:46">||</operator>

                    <operator pos:start="1789:21" pos:end="1789:21">(</operator><name pos:start="1789:22" pos:end="1789:30">src2_wide</name> <operator pos:start="1789:32" pos:end="1789:33">&amp;&amp;</operator> <operator pos:start="1789:35" pos:end="1789:35">(</operator><name pos:start="1789:36" pos:end="1789:37">rm</name> <operator pos:start="1789:39" pos:end="1789:39">&amp;</operator> <literal type="number" pos:start="1789:41" pos:end="1789:41">1</literal><operator pos:start="1789:42" pos:end="1789:42">)</operator><operator pos:start="1789:43" pos:end="1789:43">)</operator> <operator pos:start="1789:45" pos:end="1789:46">||</operator>

                    <operator pos:start="1791:21" pos:end="1791:21">(</operator><operator pos:start="1791:22" pos:end="1791:22">!</operator><name pos:start="1791:23" pos:end="1791:31">src2_wide</name> <operator pos:start="1791:33" pos:end="1791:34">&amp;&amp;</operator> <operator pos:start="1791:36" pos:end="1791:36">(</operator><name pos:start="1791:37" pos:end="1791:38">rd</name> <operator pos:start="1791:40" pos:end="1791:40">&amp;</operator> <literal type="number" pos:start="1791:42" pos:end="1791:42">1</literal><operator pos:start="1791:43" pos:end="1791:43">)</operator><operator pos:start="1791:44" pos:end="1791:44">)</operator></expr>)</condition> <block pos:start="1791:47" pos:end="1795:17">{<block_content pos:start="1793:21" pos:end="1793:29">

                    <return pos:start="1793:21" pos:end="1793:29">return <expr pos:start="1793:28" pos:end="1793:28"><literal type="number" pos:start="1793:28" pos:end="1793:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="1799:17" pos:end="1803:56">/* Avoid overlapping operands.  Wide source operands are

                   always aligned so will never overlap with wide

                   destinations in problematic ways.  */</comment>

                <if_stmt pos:start="1805:17" pos:end="1817:17"><if pos:start="1805:17" pos:end="1811:17">if <condition pos:start="1805:20" pos:end="1805:43">(<expr pos:start="1805:21" pos:end="1805:42"><name pos:start="1805:21" pos:end="1805:22">rd</name> <operator pos:start="1805:24" pos:end="1805:25">==</operator> <name pos:start="1805:27" pos:end="1805:28">rm</name> <operator pos:start="1805:30" pos:end="1805:31">&amp;&amp;</operator> <operator pos:start="1805:33" pos:end="1805:33">!</operator><name pos:start="1805:34" pos:end="1805:42">src2_wide</name></expr>)</condition> <block pos:start="1805:45" pos:end="1811:17">{<block_content pos:start="1807:21" pos:end="1809:47">

                    <expr_stmt pos:start="1807:21" pos:end="1807:47"><expr pos:start="1807:21" pos:end="1807:46"><name pos:start="1807:21" pos:end="1807:23">tmp</name> <operator pos:start="1807:25" pos:end="1807:25">=</operator> <call pos:start="1807:27" pos:end="1807:46"><name pos:start="1807:27" pos:end="1807:39">neon_load_reg</name><argument_list pos:start="1807:40" pos:end="1807:46">(<argument pos:start="1807:41" pos:end="1807:42"><expr pos:start="1807:41" pos:end="1807:42"><name pos:start="1807:41" pos:end="1807:42">rm</name></expr></argument>, <argument pos:start="1807:45" pos:end="1807:45"><expr pos:start="1807:45" pos:end="1807:45"><literal type="number" pos:start="1807:45" pos:end="1807:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1809:21" pos:end="1809:47"><expr pos:start="1809:21" pos:end="1809:46"><call pos:start="1809:21" pos:end="1809:46"><name pos:start="1809:21" pos:end="1809:38">neon_store_scratch</name><argument_list pos:start="1809:39" pos:end="1809:46">(<argument pos:start="1809:40" pos:end="1809:40"><expr pos:start="1809:40" pos:end="1809:40"><literal type="number" pos:start="1809:40" pos:end="1809:40">2</literal></expr></argument>, <argument pos:start="1809:43" pos:end="1809:45"><expr pos:start="1809:43" pos:end="1809:45"><name pos:start="1809:43" pos:end="1809:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1811:19" pos:end="1817:17">else if <condition pos:start="1811:27" pos:end="1811:50">(<expr pos:start="1811:28" pos:end="1811:49"><name pos:start="1811:28" pos:end="1811:29">rd</name> <operator pos:start="1811:31" pos:end="1811:32">==</operator> <name pos:start="1811:34" pos:end="1811:35">rn</name> <operator pos:start="1811:37" pos:end="1811:38">&amp;&amp;</operator> <operator pos:start="1811:40" pos:end="1811:40">!</operator><name pos:start="1811:41" pos:end="1811:49">src1_wide</name></expr>)</condition> <block pos:start="1811:52" pos:end="1817:17">{<block_content pos:start="1813:21" pos:end="1815:47">

                    <expr_stmt pos:start="1813:21" pos:end="1813:47"><expr pos:start="1813:21" pos:end="1813:46"><name pos:start="1813:21" pos:end="1813:23">tmp</name> <operator pos:start="1813:25" pos:end="1813:25">=</operator> <call pos:start="1813:27" pos:end="1813:46"><name pos:start="1813:27" pos:end="1813:39">neon_load_reg</name><argument_list pos:start="1813:40" pos:end="1813:46">(<argument pos:start="1813:41" pos:end="1813:42"><expr pos:start="1813:41" pos:end="1813:42"><name pos:start="1813:41" pos:end="1813:42">rn</name></expr></argument>, <argument pos:start="1813:45" pos:end="1813:45"><expr pos:start="1813:45" pos:end="1813:45"><literal type="number" pos:start="1813:45" pos:end="1813:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1815:21" pos:end="1815:47"><expr pos:start="1815:21" pos:end="1815:46"><call pos:start="1815:21" pos:end="1815:46"><name pos:start="1815:21" pos:end="1815:38">neon_store_scratch</name><argument_list pos:start="1815:39" pos:end="1815:46">(<argument pos:start="1815:40" pos:end="1815:40"><expr pos:start="1815:40" pos:end="1815:40"><literal type="number" pos:start="1815:40" pos:end="1815:40">2</literal></expr></argument>, <argument pos:start="1815:43" pos:end="1815:45"><expr pos:start="1815:43" pos:end="1815:45"><name pos:start="1815:43" pos:end="1815:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1819:17" pos:end="1819:34"><expr pos:start="1819:17" pos:end="1819:33"><call pos:start="1819:17" pos:end="1819:33"><name pos:start="1819:17" pos:end="1819:27">TCGV_UNUSED</name><argument_list pos:start="1819:28" pos:end="1819:33">(<argument pos:start="1819:29" pos:end="1819:32"><expr pos:start="1819:29" pos:end="1819:32"><name pos:start="1819:29" pos:end="1819:32">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="1821:17" pos:end="2099:17">for <control pos:start="1821:21" pos:end="1821:48">(<init pos:start="1821:22" pos:end="1821:30"><expr pos:start="1821:22" pos:end="1821:29"><name pos:start="1821:22" pos:end="1821:25">pass</name> <operator pos:start="1821:27" pos:end="1821:27">=</operator> <literal type="number" pos:start="1821:29" pos:end="1821:29">0</literal></expr>;</init> <condition pos:start="1821:32" pos:end="1821:40"><expr pos:start="1821:32" pos:end="1821:39"><name pos:start="1821:32" pos:end="1821:35">pass</name> <operator pos:start="1821:37" pos:end="1821:37">&lt;</operator> <literal type="number" pos:start="1821:39" pos:end="1821:39">2</literal></expr>;</condition> <incr pos:start="1821:42" pos:end="1821:47"><expr pos:start="1821:42" pos:end="1821:47"><name pos:start="1821:42" pos:end="1821:45">pass</name><operator pos:start="1821:46" pos:end="1821:47">++</operator></expr></incr>)</control> <block pos:start="1821:50" pos:end="2099:17">{<block_content pos:start="1823:21" pos:end="2097:21">

                    <if_stmt pos:start="1823:21" pos:end="1847:21"><if pos:start="1823:21" pos:end="1829:21">if <condition pos:start="1823:24" pos:end="1823:34">(<expr pos:start="1823:25" pos:end="1823:33"><name pos:start="1823:25" pos:end="1823:33">src1_wide</name></expr>)</condition> <block pos:start="1823:36" pos:end="1829:21">{<block_content pos:start="1825:25" pos:end="1827:41">

                        <expr_stmt pos:start="1825:25" pos:end="1825:59"><expr pos:start="1825:25" pos:end="1825:58"><call pos:start="1825:25" pos:end="1825:58"><name pos:start="1825:25" pos:end="1825:39">neon_load_reg64</name><argument_list pos:start="1825:40" pos:end="1825:58">(<argument pos:start="1825:41" pos:end="1825:46"><expr pos:start="1825:41" pos:end="1825:46"><name pos:start="1825:41" pos:end="1825:46">cpu_V0</name></expr></argument>, <argument pos:start="1825:49" pos:end="1825:57"><expr pos:start="1825:49" pos:end="1825:57"><name pos:start="1825:49" pos:end="1825:50">rn</name> <operator pos:start="1825:52" pos:end="1825:52">+</operator> <name pos:start="1825:54" pos:end="1825:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1827:25" pos:end="1827:41"><expr pos:start="1827:25" pos:end="1827:40"><call pos:start="1827:25" pos:end="1827:40"><name pos:start="1827:25" pos:end="1827:35">TCGV_UNUSED</name><argument_list pos:start="1827:36" pos:end="1827:40">(<argument pos:start="1827:37" pos:end="1827:39"><expr pos:start="1827:37" pos:end="1827:39"><name pos:start="1827:37" pos:end="1827:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1829:23" pos:end="1847:21">else <block pos:start="1829:28" pos:end="1847:21">{<block_content pos:start="1831:25" pos:end="1845:25">

                        <if_stmt pos:start="1831:25" pos:end="1839:25"><if pos:start="1831:25" pos:end="1835:25">if <condition pos:start="1831:28" pos:end="1831:50">(<expr pos:start="1831:29" pos:end="1831:49"><name pos:start="1831:29" pos:end="1831:32">pass</name> <operator pos:start="1831:34" pos:end="1831:35">==</operator> <literal type="number" pos:start="1831:37" pos:end="1831:37">1</literal> <operator pos:start="1831:39" pos:end="1831:40">&amp;&amp;</operator> <name pos:start="1831:42" pos:end="1831:43">rd</name> <operator pos:start="1831:45" pos:end="1831:46">==</operator> <name pos:start="1831:48" pos:end="1831:49">rn</name></expr>)</condition> <block pos:start="1831:52" pos:end="1835:25">{<block_content pos:start="1833:29" pos:end="1833:55">

                            <expr_stmt pos:start="1833:29" pos:end="1833:55"><expr pos:start="1833:29" pos:end="1833:54"><name pos:start="1833:29" pos:end="1833:31">tmp</name> <operator pos:start="1833:33" pos:end="1833:33">=</operator> <call pos:start="1833:35" pos:end="1833:54"><name pos:start="1833:35" pos:end="1833:51">neon_load_scratch</name><argument_list pos:start="1833:52" pos:end="1833:54">(<argument pos:start="1833:53" pos:end="1833:53"><expr pos:start="1833:53" pos:end="1833:53"><literal type="number" pos:start="1833:53" pos:end="1833:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1835:27" pos:end="1839:25">else <block pos:start="1835:32" pos:end="1839:25">{<block_content pos:start="1837:29" pos:end="1837:58">

                            <expr_stmt pos:start="1837:29" pos:end="1837:58"><expr pos:start="1837:29" pos:end="1837:57"><name pos:start="1837:29" pos:end="1837:31">tmp</name> <operator pos:start="1837:33" pos:end="1837:33">=</operator> <call pos:start="1837:35" pos:end="1837:57"><name pos:start="1837:35" pos:end="1837:47">neon_load_reg</name><argument_list pos:start="1837:48" pos:end="1837:57">(<argument pos:start="1837:49" pos:end="1837:50"><expr pos:start="1837:49" pos:end="1837:50"><name pos:start="1837:49" pos:end="1837:50">rn</name></expr></argument>, <argument pos:start="1837:53" pos:end="1837:56"><expr pos:start="1837:53" pos:end="1837:56"><name pos:start="1837:53" pos:end="1837:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1841:25" pos:end="1845:25"><if pos:start="1841:25" pos:end="1845:25">if <condition pos:start="1841:28" pos:end="1841:37">(<expr pos:start="1841:29" pos:end="1841:36"><name pos:start="1841:29" pos:end="1841:36">prewiden</name></expr>)</condition> <block pos:start="1841:39" pos:end="1845:25">{<block_content pos:start="1843:29" pos:end="1843:65">

                            <expr_stmt pos:start="1843:29" pos:end="1843:65"><expr pos:start="1843:29" pos:end="1843:64"><call pos:start="1843:29" pos:end="1843:64"><name pos:start="1843:29" pos:end="1843:42">gen_neon_widen</name><argument_list pos:start="1843:43" pos:end="1843:64">(<argument pos:start="1843:44" pos:end="1843:49"><expr pos:start="1843:44" pos:end="1843:49"><name pos:start="1843:44" pos:end="1843:49">cpu_V0</name></expr></argument>, <argument pos:start="1843:52" pos:end="1843:54"><expr pos:start="1843:52" pos:end="1843:54"><name pos:start="1843:52" pos:end="1843:54">tmp</name></expr></argument>, <argument pos:start="1843:57" pos:end="1843:60"><expr pos:start="1843:57" pos:end="1843:60"><name pos:start="1843:57" pos:end="1843:60">size</name></expr></argument>, <argument pos:start="1843:63" pos:end="1843:63"><expr pos:start="1843:63" pos:end="1843:63"><name pos:start="1843:63" pos:end="1843:63">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="1849:21" pos:end="1873:21"><if pos:start="1849:21" pos:end="1855:21">if <condition pos:start="1849:24" pos:end="1849:34">(<expr pos:start="1849:25" pos:end="1849:33"><name pos:start="1849:25" pos:end="1849:33">src2_wide</name></expr>)</condition> <block pos:start="1849:36" pos:end="1855:21">{<block_content pos:start="1851:25" pos:end="1853:42">

                        <expr_stmt pos:start="1851:25" pos:end="1851:59"><expr pos:start="1851:25" pos:end="1851:58"><call pos:start="1851:25" pos:end="1851:58"><name pos:start="1851:25" pos:end="1851:39">neon_load_reg64</name><argument_list pos:start="1851:40" pos:end="1851:58">(<argument pos:start="1851:41" pos:end="1851:46"><expr pos:start="1851:41" pos:end="1851:46"><name pos:start="1851:41" pos:end="1851:46">cpu_V1</name></expr></argument>, <argument pos:start="1851:49" pos:end="1851:57"><expr pos:start="1851:49" pos:end="1851:57"><name pos:start="1851:49" pos:end="1851:50">rm</name> <operator pos:start="1851:52" pos:end="1851:52">+</operator> <name pos:start="1851:54" pos:end="1851:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1853:25" pos:end="1853:42"><expr pos:start="1853:25" pos:end="1853:41"><call pos:start="1853:25" pos:end="1853:41"><name pos:start="1853:25" pos:end="1853:35">TCGV_UNUSED</name><argument_list pos:start="1853:36" pos:end="1853:41">(<argument pos:start="1853:37" pos:end="1853:40"><expr pos:start="1853:37" pos:end="1853:40"><name pos:start="1853:37" pos:end="1853:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1855:23" pos:end="1873:21">else <block pos:start="1855:28" pos:end="1873:21">{<block_content pos:start="1857:25" pos:end="1871:25">

                        <if_stmt pos:start="1857:25" pos:end="1865:25"><if pos:start="1857:25" pos:end="1861:25">if <condition pos:start="1857:28" pos:end="1857:50">(<expr pos:start="1857:29" pos:end="1857:49"><name pos:start="1857:29" pos:end="1857:32">pass</name> <operator pos:start="1857:34" pos:end="1857:35">==</operator> <literal type="number" pos:start="1857:37" pos:end="1857:37">1</literal> <operator pos:start="1857:39" pos:end="1857:40">&amp;&amp;</operator> <name pos:start="1857:42" pos:end="1857:43">rd</name> <operator pos:start="1857:45" pos:end="1857:46">==</operator> <name pos:start="1857:48" pos:end="1857:49">rm</name></expr>)</condition> <block pos:start="1857:52" pos:end="1861:25">{<block_content pos:start="1859:29" pos:end="1859:56">

                            <expr_stmt pos:start="1859:29" pos:end="1859:56"><expr pos:start="1859:29" pos:end="1859:55"><name pos:start="1859:29" pos:end="1859:32">tmp2</name> <operator pos:start="1859:34" pos:end="1859:34">=</operator> <call pos:start="1859:36" pos:end="1859:55"><name pos:start="1859:36" pos:end="1859:52">neon_load_scratch</name><argument_list pos:start="1859:53" pos:end="1859:55">(<argument pos:start="1859:54" pos:end="1859:54"><expr pos:start="1859:54" pos:end="1859:54"><literal type="number" pos:start="1859:54" pos:end="1859:54">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1861:27" pos:end="1865:25">else <block pos:start="1861:32" pos:end="1865:25">{<block_content pos:start="1863:29" pos:end="1863:59">

                            <expr_stmt pos:start="1863:29" pos:end="1863:59"><expr pos:start="1863:29" pos:end="1863:58"><name pos:start="1863:29" pos:end="1863:32">tmp2</name> <operator pos:start="1863:34" pos:end="1863:34">=</operator> <call pos:start="1863:36" pos:end="1863:58"><name pos:start="1863:36" pos:end="1863:48">neon_load_reg</name><argument_list pos:start="1863:49" pos:end="1863:58">(<argument pos:start="1863:50" pos:end="1863:51"><expr pos:start="1863:50" pos:end="1863:51"><name pos:start="1863:50" pos:end="1863:51">rm</name></expr></argument>, <argument pos:start="1863:54" pos:end="1863:57"><expr pos:start="1863:54" pos:end="1863:57"><name pos:start="1863:54" pos:end="1863:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1867:25" pos:end="1871:25"><if pos:start="1867:25" pos:end="1871:25">if <condition pos:start="1867:28" pos:end="1867:37">(<expr pos:start="1867:29" pos:end="1867:36"><name pos:start="1867:29" pos:end="1867:36">prewiden</name></expr>)</condition> <block pos:start="1867:39" pos:end="1871:25">{<block_content pos:start="1869:29" pos:end="1869:66">

                            <expr_stmt pos:start="1869:29" pos:end="1869:66"><expr pos:start="1869:29" pos:end="1869:65"><call pos:start="1869:29" pos:end="1869:65"><name pos:start="1869:29" pos:end="1869:42">gen_neon_widen</name><argument_list pos:start="1869:43" pos:end="1869:65">(<argument pos:start="1869:44" pos:end="1869:49"><expr pos:start="1869:44" pos:end="1869:49"><name pos:start="1869:44" pos:end="1869:49">cpu_V1</name></expr></argument>, <argument pos:start="1869:52" pos:end="1869:55"><expr pos:start="1869:52" pos:end="1869:55"><name pos:start="1869:52" pos:end="1869:55">tmp2</name></expr></argument>, <argument pos:start="1869:58" pos:end="1869:61"><expr pos:start="1869:58" pos:end="1869:61"><name pos:start="1869:58" pos:end="1869:61">size</name></expr></argument>, <argument pos:start="1869:64" pos:end="1869:64"><expr pos:start="1869:64" pos:end="1869:64"><name pos:start="1869:64" pos:end="1869:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <switch pos:start="1875:21" pos:end="1961:21">switch <condition pos:start="1875:28" pos:end="1875:31">(<expr pos:start="1875:29" pos:end="1875:30"><name pos:start="1875:29" pos:end="1875:30">op</name></expr>)</condition> <block pos:start="1875:33" pos:end="1961:21">{<block_content pos:start="1877:21" pos:end="1959:32">

                    <case pos:start="1877:21" pos:end="1877:27">case <expr pos:start="1877:26" pos:end="1877:26"><literal type="number" pos:start="1877:26" pos:end="1877:26">0</literal></expr>:</case> <case pos:start="1877:29" pos:end="1877:35">case <expr pos:start="1877:34" pos:end="1877:34"><literal type="number" pos:start="1877:34" pos:end="1877:34">1</literal></expr>:</case> <case pos:start="1877:37" pos:end="1877:43">case <expr pos:start="1877:42" pos:end="1877:42"><literal type="number" pos:start="1877:42" pos:end="1877:42">4</literal></expr>:</case> <comment type="block" pos:start="1877:45" pos:end="1877:79">/* VADDL, VADDW, VADDHN, VRADDHN */</comment>

                        <expr_stmt pos:start="1879:25" pos:end="1879:44"><expr pos:start="1879:25" pos:end="1879:43"><call pos:start="1879:25" pos:end="1879:43"><name pos:start="1879:25" pos:end="1879:37">gen_neon_addl</name><argument_list pos:start="1879:38" pos:end="1879:43">(<argument pos:start="1879:39" pos:end="1879:42"><expr pos:start="1879:39" pos:end="1879:42"><name pos:start="1879:39" pos:end="1879:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1881:25" pos:end="1881:30">break;</break>

                    <case pos:start="1883:21" pos:end="1883:27">case <expr pos:start="1883:26" pos:end="1883:26"><literal type="number" pos:start="1883:26" pos:end="1883:26">2</literal></expr>:</case> <case pos:start="1883:29" pos:end="1883:35">case <expr pos:start="1883:34" pos:end="1883:34"><literal type="number" pos:start="1883:34" pos:end="1883:34">3</literal></expr>:</case> <case pos:start="1883:37" pos:end="1883:43">case <expr pos:start="1883:42" pos:end="1883:42"><literal type="number" pos:start="1883:42" pos:end="1883:42">6</literal></expr>:</case> <comment type="block" pos:start="1883:45" pos:end="1883:79">/* VSUBL, VSUBW, VSUBHN, VRSUBHN */</comment>

                        <expr_stmt pos:start="1885:25" pos:end="1885:44"><expr pos:start="1885:25" pos:end="1885:43"><call pos:start="1885:25" pos:end="1885:43"><name pos:start="1885:25" pos:end="1885:37">gen_neon_subl</name><argument_list pos:start="1885:38" pos:end="1885:43">(<argument pos:start="1885:39" pos:end="1885:42"><expr pos:start="1885:39" pos:end="1885:42"><name pos:start="1885:39" pos:end="1885:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1887:25" pos:end="1887:30">break;</break>

                    <case pos:start="1889:21" pos:end="1889:27">case <expr pos:start="1889:26" pos:end="1889:26"><literal type="number" pos:start="1889:26" pos:end="1889:26">5</literal></expr>:</case> <case pos:start="1889:29" pos:end="1889:35">case <expr pos:start="1889:34" pos:end="1889:34"><literal type="number" pos:start="1889:34" pos:end="1889:34">7</literal></expr>:</case> <comment type="block" pos:start="1889:37" pos:end="1889:54">/* VABAL, VABDL */</comment>

                        <switch pos:start="1891:25" pos:end="1931:25">switch <condition pos:start="1891:32" pos:end="1891:48">(<expr pos:start="1891:33" pos:end="1891:47"><operator pos:start="1891:33" pos:end="1891:33">(</operator><name pos:start="1891:34" pos:end="1891:37">size</name> <operator pos:start="1891:39" pos:end="1891:40">&lt;&lt;</operator> <literal type="number" pos:start="1891:42" pos:end="1891:42">1</literal><operator pos:start="1891:43" pos:end="1891:43">)</operator> <operator pos:start="1891:45" pos:end="1891:45">|</operator> <name pos:start="1891:47" pos:end="1891:47">u</name></expr>)</condition> <block pos:start="1891:50" pos:end="1931:25">{<block_content pos:start="1893:25" pos:end="1929:41">

                        <case pos:start="1893:25" pos:end="1893:31">case <expr pos:start="1893:30" pos:end="1893:30"><literal type="number" pos:start="1893:30" pos:end="1893:30">0</literal></expr>:</case>

                            <expr_stmt pos:start="1895:29" pos:end="1895:72"><expr pos:start="1895:29" pos:end="1895:71"><call pos:start="1895:29" pos:end="1895:71"><name pos:start="1895:29" pos:end="1895:52">gen_helper_neon_abdl_s16</name><argument_list pos:start="1895:53" pos:end="1895:71">(<argument pos:start="1895:54" pos:end="1895:59"><expr pos:start="1895:54" pos:end="1895:59"><name pos:start="1895:54" pos:end="1895:59">cpu_V0</name></expr></argument>, <argument pos:start="1895:62" pos:end="1895:64"><expr pos:start="1895:62" pos:end="1895:64"><name pos:start="1895:62" pos:end="1895:64">tmp</name></expr></argument>, <argument pos:start="1895:67" pos:end="1895:70"><expr pos:start="1895:67" pos:end="1895:70"><name pos:start="1895:67" pos:end="1895:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1897:29" pos:end="1897:34">break;</break>

                        <case pos:start="1899:25" pos:end="1899:31">case <expr pos:start="1899:30" pos:end="1899:30"><literal type="number" pos:start="1899:30" pos:end="1899:30">1</literal></expr>:</case>

                            <expr_stmt pos:start="1901:29" pos:end="1901:72"><expr pos:start="1901:29" pos:end="1901:71"><call pos:start="1901:29" pos:end="1901:71"><name pos:start="1901:29" pos:end="1901:52">gen_helper_neon_abdl_u16</name><argument_list pos:start="1901:53" pos:end="1901:71">(<argument pos:start="1901:54" pos:end="1901:59"><expr pos:start="1901:54" pos:end="1901:59"><name pos:start="1901:54" pos:end="1901:59">cpu_V0</name></expr></argument>, <argument pos:start="1901:62" pos:end="1901:64"><expr pos:start="1901:62" pos:end="1901:64"><name pos:start="1901:62" pos:end="1901:64">tmp</name></expr></argument>, <argument pos:start="1901:67" pos:end="1901:70"><expr pos:start="1901:67" pos:end="1901:70"><name pos:start="1901:67" pos:end="1901:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1903:29" pos:end="1903:34">break;</break>

                        <case pos:start="1905:25" pos:end="1905:31">case <expr pos:start="1905:30" pos:end="1905:30"><literal type="number" pos:start="1905:30" pos:end="1905:30">2</literal></expr>:</case>

                            <expr_stmt pos:start="1907:29" pos:end="1907:72"><expr pos:start="1907:29" pos:end="1907:71"><call pos:start="1907:29" pos:end="1907:71"><name pos:start="1907:29" pos:end="1907:52">gen_helper_neon_abdl_s32</name><argument_list pos:start="1907:53" pos:end="1907:71">(<argument pos:start="1907:54" pos:end="1907:59"><expr pos:start="1907:54" pos:end="1907:59"><name pos:start="1907:54" pos:end="1907:59">cpu_V0</name></expr></argument>, <argument pos:start="1907:62" pos:end="1907:64"><expr pos:start="1907:62" pos:end="1907:64"><name pos:start="1907:62" pos:end="1907:64">tmp</name></expr></argument>, <argument pos:start="1907:67" pos:end="1907:70"><expr pos:start="1907:67" pos:end="1907:70"><name pos:start="1907:67" pos:end="1907:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1909:29" pos:end="1909:34">break;</break>

                        <case pos:start="1911:25" pos:end="1911:31">case <expr pos:start="1911:30" pos:end="1911:30"><literal type="number" pos:start="1911:30" pos:end="1911:30">3</literal></expr>:</case>

                            <expr_stmt pos:start="1913:29" pos:end="1913:72"><expr pos:start="1913:29" pos:end="1913:71"><call pos:start="1913:29" pos:end="1913:71"><name pos:start="1913:29" pos:end="1913:52">gen_helper_neon_abdl_u32</name><argument_list pos:start="1913:53" pos:end="1913:71">(<argument pos:start="1913:54" pos:end="1913:59"><expr pos:start="1913:54" pos:end="1913:59"><name pos:start="1913:54" pos:end="1913:59">cpu_V0</name></expr></argument>, <argument pos:start="1913:62" pos:end="1913:64"><expr pos:start="1913:62" pos:end="1913:64"><name pos:start="1913:62" pos:end="1913:64">tmp</name></expr></argument>, <argument pos:start="1913:67" pos:end="1913:70"><expr pos:start="1913:67" pos:end="1913:70"><name pos:start="1913:67" pos:end="1913:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1915:29" pos:end="1915:34">break;</break>

                        <case pos:start="1917:25" pos:end="1917:31">case <expr pos:start="1917:30" pos:end="1917:30"><literal type="number" pos:start="1917:30" pos:end="1917:30">4</literal></expr>:</case>

                            <expr_stmt pos:start="1919:29" pos:end="1919:72"><expr pos:start="1919:29" pos:end="1919:71"><call pos:start="1919:29" pos:end="1919:71"><name pos:start="1919:29" pos:end="1919:52">gen_helper_neon_abdl_s64</name><argument_list pos:start="1919:53" pos:end="1919:71">(<argument pos:start="1919:54" pos:end="1919:59"><expr pos:start="1919:54" pos:end="1919:59"><name pos:start="1919:54" pos:end="1919:59">cpu_V0</name></expr></argument>, <argument pos:start="1919:62" pos:end="1919:64"><expr pos:start="1919:62" pos:end="1919:64"><name pos:start="1919:62" pos:end="1919:64">tmp</name></expr></argument>, <argument pos:start="1919:67" pos:end="1919:70"><expr pos:start="1919:67" pos:end="1919:70"><name pos:start="1919:67" pos:end="1919:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1921:29" pos:end="1921:34">break;</break>

                        <case pos:start="1923:25" pos:end="1923:31">case <expr pos:start="1923:30" pos:end="1923:30"><literal type="number" pos:start="1923:30" pos:end="1923:30">5</literal></expr>:</case>

                            <expr_stmt pos:start="1925:29" pos:end="1925:72"><expr pos:start="1925:29" pos:end="1925:71"><call pos:start="1925:29" pos:end="1925:71"><name pos:start="1925:29" pos:end="1925:52">gen_helper_neon_abdl_u64</name><argument_list pos:start="1925:53" pos:end="1925:71">(<argument pos:start="1925:54" pos:end="1925:59"><expr pos:start="1925:54" pos:end="1925:59"><name pos:start="1925:54" pos:end="1925:59">cpu_V0</name></expr></argument>, <argument pos:start="1925:62" pos:end="1925:64"><expr pos:start="1925:62" pos:end="1925:64"><name pos:start="1925:62" pos:end="1925:64">tmp</name></expr></argument>, <argument pos:start="1925:67" pos:end="1925:70"><expr pos:start="1925:67" pos:end="1925:70"><name pos:start="1925:67" pos:end="1925:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1927:29" pos:end="1927:34">break;</break>

                        <default pos:start="1929:25" pos:end="1929:32">default:</default> <expr_stmt pos:start="1929:34" pos:end="1929:41"><expr pos:start="1929:34" pos:end="1929:40"><call pos:start="1929:34" pos:end="1929:40"><name pos:start="1929:34" pos:end="1929:38">abort</name><argument_list pos:start="1929:39" pos:end="1929:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="1933:25" pos:end="1933:48"><expr pos:start="1933:25" pos:end="1933:47"><call pos:start="1933:25" pos:end="1933:47"><name pos:start="1933:25" pos:end="1933:41">tcg_temp_free_i32</name><argument_list pos:start="1933:42" pos:end="1933:47">(<argument pos:start="1933:43" pos:end="1933:46"><expr pos:start="1933:43" pos:end="1933:46"><name pos:start="1933:43" pos:end="1933:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1935:25" pos:end="1935:47"><expr pos:start="1935:25" pos:end="1935:46"><call pos:start="1935:25" pos:end="1935:46"><name pos:start="1935:25" pos:end="1935:41">tcg_temp_free_i32</name><argument_list pos:start="1935:42" pos:end="1935:46">(<argument pos:start="1935:43" pos:end="1935:45"><expr pos:start="1935:43" pos:end="1935:45"><name pos:start="1935:43" pos:end="1935:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1937:25" pos:end="1937:30">break;</break>

                    <case pos:start="1939:21" pos:end="1939:27">case <expr pos:start="1939:26" pos:end="1939:26"><literal type="number" pos:start="1939:26" pos:end="1939:26">8</literal></expr>:</case> <case pos:start="1939:29" pos:end="1939:35">case <expr pos:start="1939:34" pos:end="1939:34"><literal type="number" pos:start="1939:34" pos:end="1939:34">9</literal></expr>:</case> <case pos:start="1939:37" pos:end="1939:44">case <expr pos:start="1939:42" pos:end="1939:43"><literal type="number" pos:start="1939:42" pos:end="1939:43">10</literal></expr>:</case> <case pos:start="1939:46" pos:end="1939:53">case <expr pos:start="1939:51" pos:end="1939:52"><literal type="number" pos:start="1939:51" pos:end="1939:52">11</literal></expr>:</case> <case pos:start="1939:55" pos:end="1939:62">case <expr pos:start="1939:60" pos:end="1939:61"><literal type="number" pos:start="1939:60" pos:end="1939:61">12</literal></expr>:</case> <case pos:start="1939:64" pos:end="1939:71">case <expr pos:start="1939:69" pos:end="1939:70"><literal type="number" pos:start="1939:69" pos:end="1939:70">13</literal></expr>:</case>

                        <comment type="block" pos:start="1941:25" pos:end="1941:76">/* VMLAL, VQDMLAL, VMLSL, VQDMLSL, VMULL, VQDMULL */</comment>

                        <expr_stmt pos:start="1943:25" pos:end="1943:66"><expr pos:start="1943:25" pos:end="1943:65"><call pos:start="1943:25" pos:end="1943:65"><name pos:start="1943:25" pos:end="1943:37">gen_neon_mull</name><argument_list pos:start="1943:38" pos:end="1943:65">(<argument pos:start="1943:39" pos:end="1943:44"><expr pos:start="1943:39" pos:end="1943:44"><name pos:start="1943:39" pos:end="1943:44">cpu_V0</name></expr></argument>, <argument pos:start="1943:47" pos:end="1943:49"><expr pos:start="1943:47" pos:end="1943:49"><name pos:start="1943:47" pos:end="1943:49">tmp</name></expr></argument>, <argument pos:start="1943:52" pos:end="1943:55"><expr pos:start="1943:52" pos:end="1943:55"><name pos:start="1943:52" pos:end="1943:55">tmp2</name></expr></argument>, <argument pos:start="1943:58" pos:end="1943:61"><expr pos:start="1943:58" pos:end="1943:61"><name pos:start="1943:58" pos:end="1943:61">size</name></expr></argument>, <argument pos:start="1943:64" pos:end="1943:64"><expr pos:start="1943:64" pos:end="1943:64"><name pos:start="1943:64" pos:end="1943:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1945:25" pos:end="1945:30">break;</break>

                    <case pos:start="1947:21" pos:end="1947:28">case <expr pos:start="1947:26" pos:end="1947:27"><literal type="number" pos:start="1947:26" pos:end="1947:27">14</literal></expr>:</case> <comment type="block" pos:start="1947:30" pos:end="1947:51">/* Polynomial VMULL */</comment>

                        <expr_stmt pos:start="1949:25" pos:end="1949:67"><expr pos:start="1949:25" pos:end="1949:66"><call pos:start="1949:25" pos:end="1949:66"><name pos:start="1949:25" pos:end="1949:47">gen_helper_neon_mull_p8</name><argument_list pos:start="1949:48" pos:end="1949:66">(<argument pos:start="1949:49" pos:end="1949:54"><expr pos:start="1949:49" pos:end="1949:54"><name pos:start="1949:49" pos:end="1949:54">cpu_V0</name></expr></argument>, <argument pos:start="1949:57" pos:end="1949:59"><expr pos:start="1949:57" pos:end="1949:59"><name pos:start="1949:57" pos:end="1949:59">tmp</name></expr></argument>, <argument pos:start="1949:62" pos:end="1949:65"><expr pos:start="1949:62" pos:end="1949:65"><name pos:start="1949:62" pos:end="1949:65">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1951:25" pos:end="1951:48"><expr pos:start="1951:25" pos:end="1951:47"><call pos:start="1951:25" pos:end="1951:47"><name pos:start="1951:25" pos:end="1951:41">tcg_temp_free_i32</name><argument_list pos:start="1951:42" pos:end="1951:47">(<argument pos:start="1951:43" pos:end="1951:46"><expr pos:start="1951:43" pos:end="1951:46"><name pos:start="1951:43" pos:end="1951:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1953:25" pos:end="1953:47"><expr pos:start="1953:25" pos:end="1953:46"><call pos:start="1953:25" pos:end="1953:46"><name pos:start="1953:25" pos:end="1953:41">tcg_temp_free_i32</name><argument_list pos:start="1953:42" pos:end="1953:46">(<argument pos:start="1953:43" pos:end="1953:45"><expr pos:start="1953:43" pos:end="1953:45"><name pos:start="1953:43" pos:end="1953:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1955:25" pos:end="1955:30">break;</break>

                    <default pos:start="1957:21" pos:end="1957:28">default:</default> <comment type="block" pos:start="1957:30" pos:end="1957:66">/* 15 is RESERVED: caught earlier  */</comment>

                        <expr_stmt pos:start="1959:25" pos:end="1959:32"><expr pos:start="1959:25" pos:end="1959:31"><call pos:start="1959:25" pos:end="1959:31"><name pos:start="1959:25" pos:end="1959:29">abort</name><argument_list pos:start="1959:30" pos:end="1959:31">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="1963:21" pos:end="2097:21"><if pos:start="1963:21" pos:end="1971:21">if <condition pos:start="1963:24" pos:end="1963:33">(<expr pos:start="1963:25" pos:end="1963:32"><name pos:start="1963:25" pos:end="1963:26">op</name> <operator pos:start="1963:28" pos:end="1963:29">==</operator> <literal type="number" pos:start="1963:31" pos:end="1963:32">13</literal></expr>)</condition> <block pos:start="1963:35" pos:end="1971:21">{<block_content pos:start="1967:25" pos:end="1969:60">

                        <comment type="block" pos:start="1965:25" pos:end="1965:37">/* VQDMULL */</comment>

                        <expr_stmt pos:start="1967:25" pos:end="1967:69"><expr pos:start="1967:25" pos:end="1967:68"><call pos:start="1967:25" pos:end="1967:68"><name pos:start="1967:25" pos:end="1967:46">gen_neon_addl_saturate</name><argument_list pos:start="1967:47" pos:end="1967:68">(<argument pos:start="1967:48" pos:end="1967:53"><expr pos:start="1967:48" pos:end="1967:53"><name pos:start="1967:48" pos:end="1967:53">cpu_V0</name></expr></argument>, <argument pos:start="1967:56" pos:end="1967:61"><expr pos:start="1967:56" pos:end="1967:61"><name pos:start="1967:56" pos:end="1967:61">cpu_V0</name></expr></argument>, <argument pos:start="1967:64" pos:end="1967:67"><expr pos:start="1967:64" pos:end="1967:67"><name pos:start="1967:64" pos:end="1967:67">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1969:25" pos:end="1969:60"><expr pos:start="1969:25" pos:end="1969:59"><call pos:start="1969:25" pos:end="1969:59"><name pos:start="1969:25" pos:end="1969:40">neon_store_reg64</name><argument_list pos:start="1969:41" pos:end="1969:59">(<argument pos:start="1969:42" pos:end="1969:47"><expr pos:start="1969:42" pos:end="1969:47"><name pos:start="1969:42" pos:end="1969:47">cpu_V0</name></expr></argument>, <argument pos:start="1969:50" pos:end="1969:58"><expr pos:start="1969:50" pos:end="1969:58"><name pos:start="1969:50" pos:end="1969:51">rd</name> <operator pos:start="1969:53" pos:end="1969:53">+</operator> <name pos:start="1969:55" pos:end="1969:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="1971:23" pos:end="2013:21">else if <condition pos:start="1971:31" pos:end="1971:64">(<expr pos:start="1971:32" pos:end="1971:63"><name pos:start="1971:32" pos:end="1971:33">op</name> <operator pos:start="1971:35" pos:end="1971:36">==</operator> <literal type="number" pos:start="1971:38" pos:end="1971:38">5</literal> <operator pos:start="1971:40" pos:end="1971:41">||</operator> <operator pos:start="1971:43" pos:end="1971:43">(</operator><name pos:start="1971:44" pos:end="1971:45">op</name> <operator pos:start="1971:47" pos:end="1971:48">&gt;=</operator> <literal type="number" pos:start="1971:50" pos:end="1971:50">8</literal> <operator pos:start="1971:52" pos:end="1971:53">&amp;&amp;</operator> <name pos:start="1971:55" pos:end="1971:56">op</name> <operator pos:start="1971:58" pos:end="1971:59">&lt;=</operator> <literal type="number" pos:start="1971:61" pos:end="1971:62">11</literal><operator pos:start="1971:63" pos:end="1971:63">)</operator></expr>)</condition> <block pos:start="1971:66" pos:end="2013:21">{<block_content pos:start="1975:25" pos:end="2011:60">

                        <comment type="block" pos:start="1973:25" pos:end="1973:42">/* Accumulate.  */</comment>

                        <expr_stmt pos:start="1975:25" pos:end="1975:59"><expr pos:start="1975:25" pos:end="1975:58"><call pos:start="1975:25" pos:end="1975:58"><name pos:start="1975:25" pos:end="1975:39">neon_load_reg64</name><argument_list pos:start="1975:40" pos:end="1975:58">(<argument pos:start="1975:41" pos:end="1975:46"><expr pos:start="1975:41" pos:end="1975:46"><name pos:start="1975:41" pos:end="1975:46">cpu_V1</name></expr></argument>, <argument pos:start="1975:49" pos:end="1975:57"><expr pos:start="1975:49" pos:end="1975:57"><name pos:start="1975:49" pos:end="1975:50">rd</name> <operator pos:start="1975:52" pos:end="1975:52">+</operator> <name pos:start="1975:54" pos:end="1975:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="1977:25" pos:end="2009:25">switch <condition pos:start="1977:32" pos:end="1977:35">(<expr pos:start="1977:33" pos:end="1977:34"><name pos:start="1977:33" pos:end="1977:34">op</name></expr>)</condition> <block pos:start="1977:37" pos:end="2009:25">{<block_content pos:start="1979:25" pos:end="2007:36">

                        <case pos:start="1979:25" pos:end="1979:32">case <expr pos:start="1979:30" pos:end="1979:31"><literal type="number" pos:start="1979:30" pos:end="1979:31">10</literal></expr>:</case> <comment type="block" pos:start="1979:34" pos:end="1979:44">/* VMLSL */</comment>

                            <expr_stmt pos:start="1981:29" pos:end="1981:56"><expr pos:start="1981:29" pos:end="1981:55"><call pos:start="1981:29" pos:end="1981:55"><name pos:start="1981:29" pos:end="1981:41">gen_neon_negl</name><argument_list pos:start="1981:42" pos:end="1981:55">(<argument pos:start="1981:43" pos:end="1981:48"><expr pos:start="1981:43" pos:end="1981:48"><name pos:start="1981:43" pos:end="1981:48">cpu_V0</name></expr></argument>, <argument pos:start="1981:51" pos:end="1981:54"><expr pos:start="1981:51" pos:end="1981:54"><name pos:start="1981:51" pos:end="1981:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="1983:29" pos:end="1983:46">/* Fall through */</comment>

                        <case pos:start="1985:25" pos:end="1985:31">case <expr pos:start="1985:30" pos:end="1985:30"><literal type="number" pos:start="1985:30" pos:end="1985:30">5</literal></expr>:</case> <case pos:start="1985:33" pos:end="1985:39">case <expr pos:start="1985:38" pos:end="1985:38"><literal type="number" pos:start="1985:38" pos:end="1985:38">8</literal></expr>:</case> <comment type="block" pos:start="1985:41" pos:end="1985:58">/* VABAL, VMLAL */</comment>

                            <expr_stmt pos:start="1987:29" pos:end="1987:48"><expr pos:start="1987:29" pos:end="1987:47"><call pos:start="1987:29" pos:end="1987:47"><name pos:start="1987:29" pos:end="1987:41">gen_neon_addl</name><argument_list pos:start="1987:42" pos:end="1987:47">(<argument pos:start="1987:43" pos:end="1987:46"><expr pos:start="1987:43" pos:end="1987:46"><name pos:start="1987:43" pos:end="1987:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1989:29" pos:end="1989:34">break;</break>

                        <case pos:start="1991:25" pos:end="1991:31">case <expr pos:start="1991:30" pos:end="1991:30"><literal type="number" pos:start="1991:30" pos:end="1991:30">9</literal></expr>:</case> <case pos:start="1991:33" pos:end="1991:40">case <expr pos:start="1991:38" pos:end="1991:39"><literal type="number" pos:start="1991:38" pos:end="1991:39">11</literal></expr>:</case> <comment type="block" pos:start="1991:42" pos:end="1991:63">/* VQDMLAL, VQDMLSL */</comment>

                            <expr_stmt pos:start="1993:29" pos:end="1993:73"><expr pos:start="1993:29" pos:end="1993:72"><call pos:start="1993:29" pos:end="1993:72"><name pos:start="1993:29" pos:end="1993:50">gen_neon_addl_saturate</name><argument_list pos:start="1993:51" pos:end="1993:72">(<argument pos:start="1993:52" pos:end="1993:57"><expr pos:start="1993:52" pos:end="1993:57"><name pos:start="1993:52" pos:end="1993:57">cpu_V0</name></expr></argument>, <argument pos:start="1993:60" pos:end="1993:65"><expr pos:start="1993:60" pos:end="1993:65"><name pos:start="1993:60" pos:end="1993:65">cpu_V0</name></expr></argument>, <argument pos:start="1993:68" pos:end="1993:71"><expr pos:start="1993:68" pos:end="1993:71"><name pos:start="1993:68" pos:end="1993:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="1995:29" pos:end="1999:29"><if pos:start="1995:29" pos:end="1999:29">if <condition pos:start="1995:32" pos:end="1995:41">(<expr pos:start="1995:33" pos:end="1995:40"><name pos:start="1995:33" pos:end="1995:34">op</name> <operator pos:start="1995:36" pos:end="1995:37">==</operator> <literal type="number" pos:start="1995:39" pos:end="1995:40">11</literal></expr>)</condition> <block pos:start="1995:43" pos:end="1999:29">{<block_content pos:start="1997:33" pos:end="1997:60">

                                <expr_stmt pos:start="1997:33" pos:end="1997:60"><expr pos:start="1997:33" pos:end="1997:59"><call pos:start="1997:33" pos:end="1997:59"><name pos:start="1997:33" pos:end="1997:45">gen_neon_negl</name><argument_list pos:start="1997:46" pos:end="1997:59">(<argument pos:start="1997:47" pos:end="1997:52"><expr pos:start="1997:47" pos:end="1997:52"><name pos:start="1997:47" pos:end="1997:52">cpu_V0</name></expr></argument>, <argument pos:start="1997:55" pos:end="1997:58"><expr pos:start="1997:55" pos:end="1997:58"><name pos:start="1997:55" pos:end="1997:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="2001:29" pos:end="2001:73"><expr pos:start="2001:29" pos:end="2001:72"><call pos:start="2001:29" pos:end="2001:72"><name pos:start="2001:29" pos:end="2001:50">gen_neon_addl_saturate</name><argument_list pos:start="2001:51" pos:end="2001:72">(<argument pos:start="2001:52" pos:end="2001:57"><expr pos:start="2001:52" pos:end="2001:57"><name pos:start="2001:52" pos:end="2001:57">cpu_V0</name></expr></argument>, <argument pos:start="2001:60" pos:end="2001:65"><expr pos:start="2001:60" pos:end="2001:65"><name pos:start="2001:60" pos:end="2001:65">cpu_V1</name></expr></argument>, <argument pos:start="2001:68" pos:end="2001:71"><expr pos:start="2001:68" pos:end="2001:71"><name pos:start="2001:68" pos:end="2001:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2003:29" pos:end="2003:34">break;</break>

                        <default pos:start="2005:25" pos:end="2005:32">default:</default>

                            <expr_stmt pos:start="2007:29" pos:end="2007:36"><expr pos:start="2007:29" pos:end="2007:35"><call pos:start="2007:29" pos:end="2007:35"><name pos:start="2007:29" pos:end="2007:33">abort</name><argument_list pos:start="2007:34" pos:end="2007:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2011:25" pos:end="2011:60"><expr pos:start="2011:25" pos:end="2011:59"><call pos:start="2011:25" pos:end="2011:59"><name pos:start="2011:25" pos:end="2011:40">neon_store_reg64</name><argument_list pos:start="2011:41" pos:end="2011:59">(<argument pos:start="2011:42" pos:end="2011:47"><expr pos:start="2011:42" pos:end="2011:47"><name pos:start="2011:42" pos:end="2011:47">cpu_V0</name></expr></argument>, <argument pos:start="2011:50" pos:end="2011:58"><expr pos:start="2011:50" pos:end="2011:58"><name pos:start="2011:50" pos:end="2011:51">rd</name> <operator pos:start="2011:53" pos:end="2011:53">+</operator> <name pos:start="2011:55" pos:end="2011:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="2013:23" pos:end="2091:21">else if <condition pos:start="2013:31" pos:end="2013:50">(<expr pos:start="2013:32" pos:end="2013:49"><name pos:start="2013:32" pos:end="2013:33">op</name> <operator pos:start="2013:35" pos:end="2013:36">==</operator> <literal type="number" pos:start="2013:38" pos:end="2013:38">4</literal> <operator pos:start="2013:40" pos:end="2013:41">||</operator> <name pos:start="2013:43" pos:end="2013:44">op</name> <operator pos:start="2013:46" pos:end="2013:47">==</operator> <literal type="number" pos:start="2013:49" pos:end="2013:49">6</literal></expr>)</condition> <block pos:start="2013:52" pos:end="2091:21">{<block_content pos:start="2017:25" pos:end="2089:25">

                        <comment type="block" pos:start="2015:25" pos:end="2015:51">/* Narrowing operation.  */</comment>

                        <expr_stmt pos:start="2017:25" pos:end="2017:49"><expr pos:start="2017:25" pos:end="2017:48"><name pos:start="2017:25" pos:end="2017:27">tmp</name> <operator pos:start="2017:29" pos:end="2017:29">=</operator> <call pos:start="2017:31" pos:end="2017:48"><name pos:start="2017:31" pos:end="2017:46">tcg_temp_new_i32</name><argument_list pos:start="2017:47" pos:end="2017:48">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2019:25" pos:end="2077:25"><if pos:start="2019:25" pos:end="2047:25">if <condition pos:start="2019:28" pos:end="2019:31">(<expr pos:start="2019:29" pos:end="2019:30"><operator pos:start="2019:29" pos:end="2019:29">!</operator><name pos:start="2019:30" pos:end="2019:30">u</name></expr>)</condition> <block pos:start="2019:33" pos:end="2047:25">{<block_content pos:start="2021:29" pos:end="2045:29">

                            <switch pos:start="2021:29" pos:end="2045:29">switch <condition pos:start="2021:36" pos:end="2021:41">(<expr pos:start="2021:37" pos:end="2021:40"><name pos:start="2021:37" pos:end="2021:40">size</name></expr>)</condition> <block pos:start="2021:43" pos:end="2045:29">{<block_content pos:start="2023:29" pos:end="2043:45">

                            <case pos:start="2023:29" pos:end="2023:35">case <expr pos:start="2023:34" pos:end="2023:34"><literal type="number" pos:start="2023:34" pos:end="2023:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2025:33" pos:end="2025:76"><expr pos:start="2025:33" pos:end="2025:75"><call pos:start="2025:33" pos:end="2025:75"><name pos:start="2025:33" pos:end="2025:62">gen_helper_neon_narrow_high_u8</name><argument_list pos:start="2025:63" pos:end="2025:75">(<argument pos:start="2025:64" pos:end="2025:66"><expr pos:start="2025:64" pos:end="2025:66"><name pos:start="2025:64" pos:end="2025:66">tmp</name></expr></argument>, <argument pos:start="2025:69" pos:end="2025:74"><expr pos:start="2025:69" pos:end="2025:74"><name pos:start="2025:69" pos:end="2025:74">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2027:33" pos:end="2027:38">break;</break>

                            <case pos:start="2029:29" pos:end="2029:35">case <expr pos:start="2029:34" pos:end="2029:34"><literal type="number" pos:start="2029:34" pos:end="2029:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2031:33" pos:end="2031:77"><expr pos:start="2031:33" pos:end="2031:76"><call pos:start="2031:33" pos:end="2031:76"><name pos:start="2031:33" pos:end="2031:63">gen_helper_neon_narrow_high_u16</name><argument_list pos:start="2031:64" pos:end="2031:76">(<argument pos:start="2031:65" pos:end="2031:67"><expr pos:start="2031:65" pos:end="2031:67"><name pos:start="2031:65" pos:end="2031:67">tmp</name></expr></argument>, <argument pos:start="2031:70" pos:end="2031:75"><expr pos:start="2031:70" pos:end="2031:75"><name pos:start="2031:70" pos:end="2031:75">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2033:33" pos:end="2033:38">break;</break>

                            <case pos:start="2035:29" pos:end="2035:35">case <expr pos:start="2035:34" pos:end="2035:34"><literal type="number" pos:start="2035:34" pos:end="2035:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="2037:33" pos:end="2037:69"><expr pos:start="2037:33" pos:end="2037:68"><call pos:start="2037:33" pos:end="2037:68"><name pos:start="2037:33" pos:end="2037:48">tcg_gen_shri_i64</name><argument_list pos:start="2037:49" pos:end="2037:68">(<argument pos:start="2037:50" pos:end="2037:55"><expr pos:start="2037:50" pos:end="2037:55"><name pos:start="2037:50" pos:end="2037:55">cpu_V0</name></expr></argument>, <argument pos:start="2037:58" pos:end="2037:63"><expr pos:start="2037:58" pos:end="2037:63"><name pos:start="2037:58" pos:end="2037:63">cpu_V0</name></expr></argument>, <argument pos:start="2037:66" pos:end="2037:67"><expr pos:start="2037:66" pos:end="2037:67"><literal type="number" pos:start="2037:66" pos:end="2037:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2039:33" pos:end="2039:67"><expr pos:start="2039:33" pos:end="2039:66"><call pos:start="2039:33" pos:end="2039:66"><name pos:start="2039:33" pos:end="2039:53">tcg_gen_trunc_i64_i32</name><argument_list pos:start="2039:54" pos:end="2039:66">(<argument pos:start="2039:55" pos:end="2039:57"><expr pos:start="2039:55" pos:end="2039:57"><name pos:start="2039:55" pos:end="2039:57">tmp</name></expr></argument>, <argument pos:start="2039:60" pos:end="2039:65"><expr pos:start="2039:60" pos:end="2039:65"><name pos:start="2039:60" pos:end="2039:65">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2041:33" pos:end="2041:38">break;</break>

                            <default pos:start="2043:29" pos:end="2043:36">default:</default> <expr_stmt pos:start="2043:38" pos:end="2043:45"><expr pos:start="2043:38" pos:end="2043:44"><call pos:start="2043:38" pos:end="2043:44"><name pos:start="2043:38" pos:end="2043:42">abort</name><argument_list pos:start="2043:43" pos:end="2043:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></if> <else pos:start="2047:27" pos:end="2077:25">else <block pos:start="2047:32" pos:end="2077:25">{<block_content pos:start="2049:29" pos:end="2075:29">

                            <switch pos:start="2049:29" pos:end="2075:29">switch <condition pos:start="2049:36" pos:end="2049:41">(<expr pos:start="2049:37" pos:end="2049:40"><name pos:start="2049:37" pos:end="2049:40">size</name></expr>)</condition> <block pos:start="2049:43" pos:end="2075:29">{<block_content pos:start="2051:29" pos:end="2073:45">

                            <case pos:start="2051:29" pos:end="2051:35">case <expr pos:start="2051:34" pos:end="2051:34"><literal type="number" pos:start="2051:34" pos:end="2051:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2053:33" pos:end="2053:82"><expr pos:start="2053:33" pos:end="2053:81"><call pos:start="2053:33" pos:end="2053:81"><name pos:start="2053:33" pos:end="2053:68">gen_helper_neon_narrow_round_high_u8</name><argument_list pos:start="2053:69" pos:end="2053:81">(<argument pos:start="2053:70" pos:end="2053:72"><expr pos:start="2053:70" pos:end="2053:72"><name pos:start="2053:70" pos:end="2053:72">tmp</name></expr></argument>, <argument pos:start="2053:75" pos:end="2053:80"><expr pos:start="2053:75" pos:end="2053:80"><name pos:start="2053:75" pos:end="2053:80">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2055:33" pos:end="2055:38">break;</break>

                            <case pos:start="2057:29" pos:end="2057:35">case <expr pos:start="2057:34" pos:end="2057:34"><literal type="number" pos:start="2057:34" pos:end="2057:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2059:33" pos:end="2059:83"><expr pos:start="2059:33" pos:end="2059:82"><call pos:start="2059:33" pos:end="2059:82"><name pos:start="2059:33" pos:end="2059:69">gen_helper_neon_narrow_round_high_u16</name><argument_list pos:start="2059:70" pos:end="2059:82">(<argument pos:start="2059:71" pos:end="2059:73"><expr pos:start="2059:71" pos:end="2059:73"><name pos:start="2059:71" pos:end="2059:73">tmp</name></expr></argument>, <argument pos:start="2059:76" pos:end="2059:81"><expr pos:start="2059:76" pos:end="2059:81"><name pos:start="2059:76" pos:end="2059:81">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2061:33" pos:end="2061:38">break;</break>

                            <case pos:start="2063:29" pos:end="2063:35">case <expr pos:start="2063:34" pos:end="2063:34"><literal type="number" pos:start="2063:34" pos:end="2063:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="2065:33" pos:end="2065:75"><expr pos:start="2065:33" pos:end="2065:74"><call pos:start="2065:33" pos:end="2065:74"><name pos:start="2065:33" pos:end="2065:48">tcg_gen_addi_i64</name><argument_list pos:start="2065:49" pos:end="2065:74">(<argument pos:start="2065:50" pos:end="2065:55"><expr pos:start="2065:50" pos:end="2065:55"><name pos:start="2065:50" pos:end="2065:55">cpu_V0</name></expr></argument>, <argument pos:start="2065:58" pos:end="2065:63"><expr pos:start="2065:58" pos:end="2065:63"><name pos:start="2065:58" pos:end="2065:63">cpu_V0</name></expr></argument>, <argument pos:start="2065:66" pos:end="2065:73"><expr pos:start="2065:66" pos:end="2065:73"><literal type="number" pos:start="2065:66" pos:end="2065:67">1u</literal> <operator pos:start="2065:69" pos:end="2065:70">&lt;&lt;</operator> <literal type="number" pos:start="2065:72" pos:end="2065:73">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2067:33" pos:end="2067:69"><expr pos:start="2067:33" pos:end="2067:68"><call pos:start="2067:33" pos:end="2067:68"><name pos:start="2067:33" pos:end="2067:48">tcg_gen_shri_i64</name><argument_list pos:start="2067:49" pos:end="2067:68">(<argument pos:start="2067:50" pos:end="2067:55"><expr pos:start="2067:50" pos:end="2067:55"><name pos:start="2067:50" pos:end="2067:55">cpu_V0</name></expr></argument>, <argument pos:start="2067:58" pos:end="2067:63"><expr pos:start="2067:58" pos:end="2067:63"><name pos:start="2067:58" pos:end="2067:63">cpu_V0</name></expr></argument>, <argument pos:start="2067:66" pos:end="2067:67"><expr pos:start="2067:66" pos:end="2067:67"><literal type="number" pos:start="2067:66" pos:end="2067:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2069:33" pos:end="2069:67"><expr pos:start="2069:33" pos:end="2069:66"><call pos:start="2069:33" pos:end="2069:66"><name pos:start="2069:33" pos:end="2069:53">tcg_gen_trunc_i64_i32</name><argument_list pos:start="2069:54" pos:end="2069:66">(<argument pos:start="2069:55" pos:end="2069:57"><expr pos:start="2069:55" pos:end="2069:57"><name pos:start="2069:55" pos:end="2069:57">tmp</name></expr></argument>, <argument pos:start="2069:60" pos:end="2069:65"><expr pos:start="2069:60" pos:end="2069:65"><name pos:start="2069:60" pos:end="2069:65">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2071:33" pos:end="2071:38">break;</break>

                            <default pos:start="2073:29" pos:end="2073:36">default:</default> <expr_stmt pos:start="2073:38" pos:end="2073:45"><expr pos:start="2073:38" pos:end="2073:44"><call pos:start="2073:38" pos:end="2073:44"><name pos:start="2073:38" pos:end="2073:42">abort</name><argument_list pos:start="2073:43" pos:end="2073:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="2079:25" pos:end="2089:25"><if pos:start="2079:25" pos:end="2083:25">if <condition pos:start="2079:28" pos:end="2079:38">(<expr pos:start="2079:29" pos:end="2079:37"><name pos:start="2079:29" pos:end="2079:32">pass</name> <operator pos:start="2079:34" pos:end="2079:35">==</operator> <literal type="number" pos:start="2079:37" pos:end="2079:37">0</literal></expr>)</condition> <block pos:start="2079:40" pos:end="2083:25">{<block_content pos:start="2081:29" pos:end="2081:39">

                            <expr_stmt pos:start="2081:29" pos:end="2081:39"><expr pos:start="2081:29" pos:end="2081:38"><name pos:start="2081:29" pos:end="2081:32">tmp3</name> <operator pos:start="2081:34" pos:end="2081:34">=</operator> <name pos:start="2081:36" pos:end="2081:38">tmp</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2083:27" pos:end="2089:25">else <block pos:start="2083:32" pos:end="2089:25">{<block_content pos:start="2085:29" pos:end="2087:55">

                            <expr_stmt pos:start="2085:29" pos:end="2085:56"><expr pos:start="2085:29" pos:end="2085:55"><call pos:start="2085:29" pos:end="2085:55"><name pos:start="2085:29" pos:end="2085:42">neon_store_reg</name><argument_list pos:start="2085:43" pos:end="2085:55">(<argument pos:start="2085:44" pos:end="2085:45"><expr pos:start="2085:44" pos:end="2085:45"><name pos:start="2085:44" pos:end="2085:45">rd</name></expr></argument>, <argument pos:start="2085:48" pos:end="2085:48"><expr pos:start="2085:48" pos:end="2085:48"><literal type="number" pos:start="2085:48" pos:end="2085:48">0</literal></expr></argument>, <argument pos:start="2085:51" pos:end="2085:54"><expr pos:start="2085:51" pos:end="2085:54"><name pos:start="2085:51" pos:end="2085:54">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2087:29" pos:end="2087:55"><expr pos:start="2087:29" pos:end="2087:54"><call pos:start="2087:29" pos:end="2087:54"><name pos:start="2087:29" pos:end="2087:42">neon_store_reg</name><argument_list pos:start="2087:43" pos:end="2087:54">(<argument pos:start="2087:44" pos:end="2087:45"><expr pos:start="2087:44" pos:end="2087:45"><name pos:start="2087:44" pos:end="2087:45">rd</name></expr></argument>, <argument pos:start="2087:48" pos:end="2087:48"><expr pos:start="2087:48" pos:end="2087:48"><literal type="number" pos:start="2087:48" pos:end="2087:48">1</literal></expr></argument>, <argument pos:start="2087:51" pos:end="2087:53"><expr pos:start="2087:51" pos:end="2087:53"><name pos:start="2087:51" pos:end="2087:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2091:23" pos:end="2097:21">else <block pos:start="2091:28" pos:end="2097:21">{<block_content pos:start="2095:25" pos:end="2095:60">

                        <comment type="block" pos:start="2093:25" pos:end="2093:53">/* Write back the result.  */</comment>

                        <expr_stmt pos:start="2095:25" pos:end="2095:60"><expr pos:start="2095:25" pos:end="2095:59"><call pos:start="2095:25" pos:end="2095:59"><name pos:start="2095:25" pos:end="2095:40">neon_store_reg64</name><argument_list pos:start="2095:41" pos:end="2095:59">(<argument pos:start="2095:42" pos:end="2095:47"><expr pos:start="2095:42" pos:end="2095:47"><name pos:start="2095:42" pos:end="2095:47">cpu_V0</name></expr></argument>, <argument pos:start="2095:50" pos:end="2095:58"><expr pos:start="2095:50" pos:end="2095:58"><name pos:start="2095:50" pos:end="2095:51">rd</name> <operator pos:start="2095:53" pos:end="2095:53">+</operator> <name pos:start="2095:55" pos:end="2095:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="2101:15" pos:end="2377:13">else <block pos:start="2101:20" pos:end="2377:13">{<block_content pos:start="2111:17" pos:end="2375:17">

                <comment type="block" pos:start="2103:17" pos:end="2109:19">/* Two registers and a scalar. NB that for ops of this form

                 * the ARM ARM labels bit 24 as Q, but it is in our variable

                 * 'u', not 'q'.

                 */</comment>

                <if_stmt pos:start="2111:17" pos:end="2115:17"><if pos:start="2111:17" pos:end="2115:17">if <condition pos:start="2111:20" pos:end="2111:30">(<expr pos:start="2111:21" pos:end="2111:29"><name pos:start="2111:21" pos:end="2111:24">size</name> <operator pos:start="2111:26" pos:end="2111:27">==</operator> <literal type="number" pos:start="2111:29" pos:end="2111:29">0</literal></expr>)</condition> <block pos:start="2111:32" pos:end="2115:17">{<block_content pos:start="2113:21" pos:end="2113:29">

                    <return pos:start="2113:21" pos:end="2113:29">return <expr pos:start="2113:28" pos:end="2113:28"><literal type="number" pos:start="2113:28" pos:end="2113:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="2117:17" pos:end="2375:17">switch <condition pos:start="2117:24" pos:end="2117:27">(<expr pos:start="2117:25" pos:end="2117:26"><name pos:start="2117:25" pos:end="2117:26">op</name></expr>)</condition> <block pos:start="2117:29" pos:end="2375:17">{<block_content pos:start="2119:17" pos:end="2373:29">

                <case pos:start="2119:17" pos:end="2119:23">case <expr pos:start="2119:22" pos:end="2119:22"><literal type="number" pos:start="2119:22" pos:end="2119:22">1</literal></expr>:</case> <comment type="block" pos:start="2119:25" pos:end="2119:47">/* Float VMLA scalar */</comment>

                <case pos:start="2121:17" pos:end="2121:23">case <expr pos:start="2121:22" pos:end="2121:22"><literal type="number" pos:start="2121:22" pos:end="2121:22">5</literal></expr>:</case> <comment type="block" pos:start="2121:25" pos:end="2121:56">/* Floating point VMLS scalar */</comment>

                <case pos:start="2123:17" pos:end="2123:23">case <expr pos:start="2123:22" pos:end="2123:22"><literal type="number" pos:start="2123:22" pos:end="2123:22">9</literal></expr>:</case> <comment type="block" pos:start="2123:25" pos:end="2123:56">/* Floating point VMUL scalar */</comment>

                    <if_stmt pos:start="2125:21" pos:end="2129:21"><if pos:start="2125:21" pos:end="2129:21">if <condition pos:start="2125:24" pos:end="2125:34">(<expr pos:start="2125:25" pos:end="2125:33"><name pos:start="2125:25" pos:end="2125:28">size</name> <operator pos:start="2125:30" pos:end="2125:31">==</operator> <literal type="number" pos:start="2125:33" pos:end="2125:33">1</literal></expr>)</condition> <block pos:start="2125:36" pos:end="2129:21">{<block_content pos:start="2127:25" pos:end="2127:33">

                        <return pos:start="2127:25" pos:end="2127:33">return <expr pos:start="2127:32" pos:end="2127:32"><literal type="number" pos:start="2127:32" pos:end="2127:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="2131:21" pos:end="2131:38">/* fall through */</comment>

                <case pos:start="2133:17" pos:end="2133:23">case <expr pos:start="2133:22" pos:end="2133:22"><literal type="number" pos:start="2133:22" pos:end="2133:22">0</literal></expr>:</case> <comment type="block" pos:start="2133:25" pos:end="2133:49">/* Integer VMLA scalar */</comment>

                <case pos:start="2135:17" pos:end="2135:23">case <expr pos:start="2135:22" pos:end="2135:22"><literal type="number" pos:start="2135:22" pos:end="2135:22">4</literal></expr>:</case> <comment type="block" pos:start="2135:25" pos:end="2135:49">/* Integer VMLS scalar */</comment>

                <case pos:start="2137:17" pos:end="2137:23">case <expr pos:start="2137:22" pos:end="2137:22"><literal type="number" pos:start="2137:22" pos:end="2137:22">8</literal></expr>:</case> <comment type="block" pos:start="2137:25" pos:end="2137:49">/* Integer VMUL scalar */</comment>

                <case pos:start="2139:17" pos:end="2139:24">case <expr pos:start="2139:22" pos:end="2139:23"><literal type="number" pos:start="2139:22" pos:end="2139:23">12</literal></expr>:</case> <comment type="block" pos:start="2139:26" pos:end="2139:45">/* VQDMULH scalar */</comment>

                <case pos:start="2141:17" pos:end="2141:24">case <expr pos:start="2141:22" pos:end="2141:23"><literal type="number" pos:start="2141:22" pos:end="2141:23">13</literal></expr>:</case> <comment type="block" pos:start="2141:26" pos:end="2141:46">/* VQRDMULH scalar */</comment>

                    <if_stmt pos:start="2143:21" pos:end="2147:21"><if pos:start="2143:21" pos:end="2147:21">if <condition pos:start="2143:24" pos:end="2143:45">(<expr pos:start="2143:25" pos:end="2143:44"><name pos:start="2143:25" pos:end="2143:25">u</name> <operator pos:start="2143:27" pos:end="2143:28">&amp;&amp;</operator> <operator pos:start="2143:30" pos:end="2143:30">(</operator><operator pos:start="2143:31" pos:end="2143:31">(</operator><name pos:start="2143:32" pos:end="2143:33">rd</name> <operator pos:start="2143:35" pos:end="2143:35">|</operator> <name pos:start="2143:37" pos:end="2143:38">rn</name><operator pos:start="2143:39" pos:end="2143:39">)</operator> <operator pos:start="2143:41" pos:end="2143:41">&amp;</operator> <literal type="number" pos:start="2143:43" pos:end="2143:43">1</literal><operator pos:start="2143:44" pos:end="2143:44">)</operator></expr>)</condition> <block pos:start="2143:47" pos:end="2147:21">{<block_content pos:start="2145:25" pos:end="2145:33">

                        <return pos:start="2145:25" pos:end="2145:33">return <expr pos:start="2145:32" pos:end="2145:32"><literal type="number" pos:start="2145:32" pos:end="2145:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2149:21" pos:end="2149:52"><expr pos:start="2149:21" pos:end="2149:51"><name pos:start="2149:21" pos:end="2149:23">tmp</name> <operator pos:start="2149:25" pos:end="2149:25">=</operator> <call pos:start="2149:27" pos:end="2149:51"><name pos:start="2149:27" pos:end="2149:41">neon_get_scalar</name><argument_list pos:start="2149:42" pos:end="2149:51">(<argument pos:start="2149:43" pos:end="2149:46"><expr pos:start="2149:43" pos:end="2149:46"><name pos:start="2149:43" pos:end="2149:46">size</name></expr></argument>, <argument pos:start="2149:49" pos:end="2149:50"><expr pos:start="2149:49" pos:end="2149:50"><name pos:start="2149:49" pos:end="2149:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2151:21" pos:end="2151:47"><expr pos:start="2151:21" pos:end="2151:46"><call pos:start="2151:21" pos:end="2151:46"><name pos:start="2151:21" pos:end="2151:38">neon_store_scratch</name><argument_list pos:start="2151:39" pos:end="2151:46">(<argument pos:start="2151:40" pos:end="2151:40"><expr pos:start="2151:40" pos:end="2151:40"><literal type="number" pos:start="2151:40" pos:end="2151:40">0</literal></expr></argument>, <argument pos:start="2151:43" pos:end="2151:45"><expr pos:start="2151:43" pos:end="2151:45"><name pos:start="2151:43" pos:end="2151:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2153:21" pos:end="2249:21">for <control pos:start="2153:25" pos:end="2153:62">(<init pos:start="2153:26" pos:end="2153:34"><expr pos:start="2153:26" pos:end="2153:33"><name pos:start="2153:26" pos:end="2153:29">pass</name> <operator pos:start="2153:31" pos:end="2153:31">=</operator> <literal type="number" pos:start="2153:33" pos:end="2153:33">0</literal></expr>;</init> <condition pos:start="2153:36" pos:end="2153:54"><expr pos:start="2153:36" pos:end="2153:53"><name pos:start="2153:36" pos:end="2153:39">pass</name> <operator pos:start="2153:41" pos:end="2153:41">&lt;</operator> <operator pos:start="2153:43" pos:end="2153:43">(</operator><ternary pos:start="2153:44" pos:end="2153:52"><condition pos:start="2153:44" pos:end="2153:46"><expr pos:start="2153:44" pos:end="2153:44"><name pos:start="2153:44" pos:end="2153:44">u</name></expr> ?</condition><then pos:start="2153:48" pos:end="2153:48"> <expr pos:start="2153:48" pos:end="2153:48"><literal type="number" pos:start="2153:48" pos:end="2153:48">4</literal></expr> </then><else pos:start="2153:50" pos:end="2153:52">: <expr pos:start="2153:52" pos:end="2153:52"><literal type="number" pos:start="2153:52" pos:end="2153:52">2</literal></expr></else></ternary><operator pos:start="2153:53" pos:end="2153:53">)</operator></expr>;</condition> <incr pos:start="2153:56" pos:end="2153:61"><expr pos:start="2153:56" pos:end="2153:61"><name pos:start="2153:56" pos:end="2153:59">pass</name><operator pos:start="2153:60" pos:end="2153:61">++</operator></expr></incr>)</control> <block pos:start="2153:64" pos:end="2249:21">{<block_content pos:start="2155:25" pos:end="2247:54">

                        <expr_stmt pos:start="2155:25" pos:end="2155:51"><expr pos:start="2155:25" pos:end="2155:50"><name pos:start="2155:25" pos:end="2155:27">tmp</name> <operator pos:start="2155:29" pos:end="2155:29">=</operator> <call pos:start="2155:31" pos:end="2155:50"><name pos:start="2155:31" pos:end="2155:47">neon_load_scratch</name><argument_list pos:start="2155:48" pos:end="2155:50">(<argument pos:start="2155:49" pos:end="2155:49"><expr pos:start="2155:49" pos:end="2155:49"><literal type="number" pos:start="2155:49" pos:end="2155:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2157:25" pos:end="2157:55"><expr pos:start="2157:25" pos:end="2157:54"><name pos:start="2157:25" pos:end="2157:28">tmp2</name> <operator pos:start="2157:30" pos:end="2157:30">=</operator> <call pos:start="2157:32" pos:end="2157:54"><name pos:start="2157:32" pos:end="2157:44">neon_load_reg</name><argument_list pos:start="2157:45" pos:end="2157:54">(<argument pos:start="2157:46" pos:end="2157:47"><expr pos:start="2157:46" pos:end="2157:47"><name pos:start="2157:46" pos:end="2157:47">rn</name></expr></argument>, <argument pos:start="2157:50" pos:end="2157:53"><expr pos:start="2157:50" pos:end="2157:53"><name pos:start="2157:50" pos:end="2157:53">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2159:25" pos:end="2201:25"><if pos:start="2159:25" pos:end="2171:25">if <condition pos:start="2159:28" pos:end="2159:37">(<expr pos:start="2159:29" pos:end="2159:36"><name pos:start="2159:29" pos:end="2159:30">op</name> <operator pos:start="2159:32" pos:end="2159:33">==</operator> <literal type="number" pos:start="2159:35" pos:end="2159:36">12</literal></expr>)</condition> <block pos:start="2159:39" pos:end="2171:25">{<block_content pos:start="2161:29" pos:end="2169:29">

                            <if_stmt pos:start="2161:29" pos:end="2169:29"><if pos:start="2161:29" pos:end="2165:29">if <condition pos:start="2161:32" pos:end="2161:42">(<expr pos:start="2161:33" pos:end="2161:41"><name pos:start="2161:33" pos:end="2161:36">size</name> <operator pos:start="2161:38" pos:end="2161:39">==</operator> <literal type="number" pos:start="2161:41" pos:end="2161:41">1</literal></expr>)</condition> <block pos:start="2161:44" pos:end="2165:29">{<block_content pos:start="2163:33" pos:end="2163:75">

                                <expr_stmt pos:start="2163:33" pos:end="2163:75"><expr pos:start="2163:33" pos:end="2163:74"><call pos:start="2163:33" pos:end="2163:74"><name pos:start="2163:33" pos:end="2163:58">gen_helper_neon_qdmulh_s16</name><argument_list pos:start="2163:59" pos:end="2163:74">(<argument pos:start="2163:60" pos:end="2163:62"><expr pos:start="2163:60" pos:end="2163:62"><name pos:start="2163:60" pos:end="2163:62">tmp</name></expr></argument>, <argument pos:start="2163:65" pos:end="2163:67"><expr pos:start="2163:65" pos:end="2163:67"><name pos:start="2163:65" pos:end="2163:67">tmp</name></expr></argument>, <argument pos:start="2163:70" pos:end="2163:73"><expr pos:start="2163:70" pos:end="2163:73"><name pos:start="2163:70" pos:end="2163:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2165:31" pos:end="2169:29">else <block pos:start="2165:36" pos:end="2169:29">{<block_content pos:start="2167:33" pos:end="2167:75">

                                <expr_stmt pos:start="2167:33" pos:end="2167:75"><expr pos:start="2167:33" pos:end="2167:74"><call pos:start="2167:33" pos:end="2167:74"><name pos:start="2167:33" pos:end="2167:58">gen_helper_neon_qdmulh_s32</name><argument_list pos:start="2167:59" pos:end="2167:74">(<argument pos:start="2167:60" pos:end="2167:62"><expr pos:start="2167:60" pos:end="2167:62"><name pos:start="2167:60" pos:end="2167:62">tmp</name></expr></argument>, <argument pos:start="2167:65" pos:end="2167:67"><expr pos:start="2167:65" pos:end="2167:67"><name pos:start="2167:65" pos:end="2167:67">tmp</name></expr></argument>, <argument pos:start="2167:70" pos:end="2167:73"><expr pos:start="2167:70" pos:end="2167:73"><name pos:start="2167:70" pos:end="2167:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="2171:27" pos:end="2183:25">else if <condition pos:start="2171:35" pos:end="2171:44">(<expr pos:start="2171:36" pos:end="2171:43"><name pos:start="2171:36" pos:end="2171:37">op</name> <operator pos:start="2171:39" pos:end="2171:40">==</operator> <literal type="number" pos:start="2171:42" pos:end="2171:43">13</literal></expr>)</condition> <block pos:start="2171:46" pos:end="2183:25">{<block_content pos:start="2173:29" pos:end="2181:29">

                            <if_stmt pos:start="2173:29" pos:end="2181:29"><if pos:start="2173:29" pos:end="2177:29">if <condition pos:start="2173:32" pos:end="2173:42">(<expr pos:start="2173:33" pos:end="2173:41"><name pos:start="2173:33" pos:end="2173:36">size</name> <operator pos:start="2173:38" pos:end="2173:39">==</operator> <literal type="number" pos:start="2173:41" pos:end="2173:41">1</literal></expr>)</condition> <block pos:start="2173:44" pos:end="2177:29">{<block_content pos:start="2175:33" pos:end="2175:76">

                                <expr_stmt pos:start="2175:33" pos:end="2175:76"><expr pos:start="2175:33" pos:end="2175:75"><call pos:start="2175:33" pos:end="2175:75"><name pos:start="2175:33" pos:end="2175:59">gen_helper_neon_qrdmulh_s16</name><argument_list pos:start="2175:60" pos:end="2175:75">(<argument pos:start="2175:61" pos:end="2175:63"><expr pos:start="2175:61" pos:end="2175:63"><name pos:start="2175:61" pos:end="2175:63">tmp</name></expr></argument>, <argument pos:start="2175:66" pos:end="2175:68"><expr pos:start="2175:66" pos:end="2175:68"><name pos:start="2175:66" pos:end="2175:68">tmp</name></expr></argument>, <argument pos:start="2175:71" pos:end="2175:74"><expr pos:start="2175:71" pos:end="2175:74"><name pos:start="2175:71" pos:end="2175:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2177:31" pos:end="2181:29">else <block pos:start="2177:36" pos:end="2181:29">{<block_content pos:start="2179:33" pos:end="2179:76">

                                <expr_stmt pos:start="2179:33" pos:end="2179:76"><expr pos:start="2179:33" pos:end="2179:75"><call pos:start="2179:33" pos:end="2179:75"><name pos:start="2179:33" pos:end="2179:59">gen_helper_neon_qrdmulh_s32</name><argument_list pos:start="2179:60" pos:end="2179:75">(<argument pos:start="2179:61" pos:end="2179:63"><expr pos:start="2179:61" pos:end="2179:63"><name pos:start="2179:61" pos:end="2179:63">tmp</name></expr></argument>, <argument pos:start="2179:66" pos:end="2179:68"><expr pos:start="2179:66" pos:end="2179:68"><name pos:start="2179:66" pos:end="2179:68">tmp</name></expr></argument>, <argument pos:start="2179:71" pos:end="2179:74"><expr pos:start="2179:71" pos:end="2179:74"><name pos:start="2179:71" pos:end="2179:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="2183:27" pos:end="2187:25">else if <condition pos:start="2183:35" pos:end="2183:42">(<expr pos:start="2183:36" pos:end="2183:41"><name pos:start="2183:36" pos:end="2183:37">op</name> <operator pos:start="2183:39" pos:end="2183:39">&amp;</operator> <literal type="number" pos:start="2183:41" pos:end="2183:41">1</literal></expr>)</condition> <block pos:start="2183:44" pos:end="2187:25">{<block_content pos:start="2185:29" pos:end="2185:68">

                            <expr_stmt pos:start="2185:29" pos:end="2185:68"><expr pos:start="2185:29" pos:end="2185:67"><call pos:start="2185:29" pos:end="2185:67"><name pos:start="2185:29" pos:end="2185:51">gen_helper_neon_mul_f32</name><argument_list pos:start="2185:52" pos:end="2185:67">(<argument pos:start="2185:53" pos:end="2185:55"><expr pos:start="2185:53" pos:end="2185:55"><name pos:start="2185:53" pos:end="2185:55">tmp</name></expr></argument>, <argument pos:start="2185:58" pos:end="2185:60"><expr pos:start="2185:58" pos:end="2185:60"><name pos:start="2185:58" pos:end="2185:60">tmp</name></expr></argument>, <argument pos:start="2185:63" pos:end="2185:66"><expr pos:start="2185:63" pos:end="2185:66"><name pos:start="2185:63" pos:end="2185:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2187:27" pos:end="2201:25">else <block pos:start="2187:32" pos:end="2201:25">{<block_content pos:start="2189:29" pos:end="2199:29">

                            <switch pos:start="2189:29" pos:end="2199:29">switch <condition pos:start="2189:36" pos:end="2189:41">(<expr pos:start="2189:37" pos:end="2189:40"><name pos:start="2189:37" pos:end="2189:40">size</name></expr>)</condition> <block pos:start="2189:43" pos:end="2199:29">{<block_content pos:start="2191:29" pos:end="2197:45">

                            <case pos:start="2191:29" pos:end="2191:35">case <expr pos:start="2191:34" pos:end="2191:34"><literal type="number" pos:start="2191:34" pos:end="2191:34">0</literal></expr>:</case> <expr_stmt pos:start="2191:37" pos:end="2191:75"><expr pos:start="2191:37" pos:end="2191:74"><call pos:start="2191:37" pos:end="2191:74"><name pos:start="2191:37" pos:end="2191:58">gen_helper_neon_mul_u8</name><argument_list pos:start="2191:59" pos:end="2191:74">(<argument pos:start="2191:60" pos:end="2191:62"><expr pos:start="2191:60" pos:end="2191:62"><name pos:start="2191:60" pos:end="2191:62">tmp</name></expr></argument>, <argument pos:start="2191:65" pos:end="2191:67"><expr pos:start="2191:65" pos:end="2191:67"><name pos:start="2191:65" pos:end="2191:67">tmp</name></expr></argument>, <argument pos:start="2191:70" pos:end="2191:73"><expr pos:start="2191:70" pos:end="2191:73"><name pos:start="2191:70" pos:end="2191:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2191:77" pos:end="2191:82">break;</break>

                            <case pos:start="2193:29" pos:end="2193:35">case <expr pos:start="2193:34" pos:end="2193:34"><literal type="number" pos:start="2193:34" pos:end="2193:34">1</literal></expr>:</case> <expr_stmt pos:start="2193:37" pos:end="2193:76"><expr pos:start="2193:37" pos:end="2193:75"><call pos:start="2193:37" pos:end="2193:75"><name pos:start="2193:37" pos:end="2193:59">gen_helper_neon_mul_u16</name><argument_list pos:start="2193:60" pos:end="2193:75">(<argument pos:start="2193:61" pos:end="2193:63"><expr pos:start="2193:61" pos:end="2193:63"><name pos:start="2193:61" pos:end="2193:63">tmp</name></expr></argument>, <argument pos:start="2193:66" pos:end="2193:68"><expr pos:start="2193:66" pos:end="2193:68"><name pos:start="2193:66" pos:end="2193:68">tmp</name></expr></argument>, <argument pos:start="2193:71" pos:end="2193:74"><expr pos:start="2193:71" pos:end="2193:74"><name pos:start="2193:71" pos:end="2193:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2193:78" pos:end="2193:83">break;</break>

                            <case pos:start="2195:29" pos:end="2195:35">case <expr pos:start="2195:34" pos:end="2195:34"><literal type="number" pos:start="2195:34" pos:end="2195:34">2</literal></expr>:</case> <expr_stmt pos:start="2195:37" pos:end="2195:68"><expr pos:start="2195:37" pos:end="2195:67"><call pos:start="2195:37" pos:end="2195:67"><name pos:start="2195:37" pos:end="2195:51">tcg_gen_mul_i32</name><argument_list pos:start="2195:52" pos:end="2195:67">(<argument pos:start="2195:53" pos:end="2195:55"><expr pos:start="2195:53" pos:end="2195:55"><name pos:start="2195:53" pos:end="2195:55">tmp</name></expr></argument>, <argument pos:start="2195:58" pos:end="2195:60"><expr pos:start="2195:58" pos:end="2195:60"><name pos:start="2195:58" pos:end="2195:60">tmp</name></expr></argument>, <argument pos:start="2195:63" pos:end="2195:66"><expr pos:start="2195:63" pos:end="2195:66"><name pos:start="2195:63" pos:end="2195:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2195:70" pos:end="2195:75">break;</break>

                            <default pos:start="2197:29" pos:end="2197:36">default:</default> <expr_stmt pos:start="2197:38" pos:end="2197:45"><expr pos:start="2197:38" pos:end="2197:44"><call pos:start="2197:38" pos:end="2197:44"><name pos:start="2197:38" pos:end="2197:42">abort</name><argument_list pos:start="2197:43" pos:end="2197:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2203:25" pos:end="2203:48"><expr pos:start="2203:25" pos:end="2203:47"><call pos:start="2203:25" pos:end="2203:47"><name pos:start="2203:25" pos:end="2203:41">tcg_temp_free_i32</name><argument_list pos:start="2203:42" pos:end="2203:47">(<argument pos:start="2203:43" pos:end="2203:46"><expr pos:start="2203:43" pos:end="2203:46"><name pos:start="2203:43" pos:end="2203:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2205:25" pos:end="2245:25"><if pos:start="2205:25" pos:end="2245:25">if <condition pos:start="2205:28" pos:end="2205:35">(<expr pos:start="2205:29" pos:end="2205:34"><name pos:start="2205:29" pos:end="2205:30">op</name> <operator pos:start="2205:32" pos:end="2205:32">&lt;</operator> <literal type="number" pos:start="2205:34" pos:end="2205:34">8</literal></expr>)</condition> <block pos:start="2205:37" pos:end="2245:25">{<block_content pos:start="2209:29" pos:end="2243:52">

                            <comment type="block" pos:start="2207:29" pos:end="2207:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="2209:29" pos:end="2209:59"><expr pos:start="2209:29" pos:end="2209:58"><name pos:start="2209:29" pos:end="2209:32">tmp2</name> <operator pos:start="2209:34" pos:end="2209:34">=</operator> <call pos:start="2209:36" pos:end="2209:58"><name pos:start="2209:36" pos:end="2209:48">neon_load_reg</name><argument_list pos:start="2209:49" pos:end="2209:58">(<argument pos:start="2209:50" pos:end="2209:51"><expr pos:start="2209:50" pos:end="2209:51"><name pos:start="2209:50" pos:end="2209:51">rd</name></expr></argument>, <argument pos:start="2209:54" pos:end="2209:57"><expr pos:start="2209:54" pos:end="2209:57"><name pos:start="2209:54" pos:end="2209:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2211:29" pos:end="2241:29">switch <condition pos:start="2211:36" pos:end="2211:39">(<expr pos:start="2211:37" pos:end="2211:38"><name pos:start="2211:37" pos:end="2211:38">op</name></expr>)</condition> <block pos:start="2211:41" pos:end="2241:29">{<block_content pos:start="2213:29" pos:end="2239:40">

                            <case pos:start="2213:29" pos:end="2213:35">case <expr pos:start="2213:34" pos:end="2213:34"><literal type="number" pos:start="2213:34" pos:end="2213:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2215:33" pos:end="2215:62"><expr pos:start="2215:33" pos:end="2215:61"><call pos:start="2215:33" pos:end="2215:61"><name pos:start="2215:33" pos:end="2215:44">gen_neon_add</name><argument_list pos:start="2215:45" pos:end="2215:61">(<argument pos:start="2215:46" pos:end="2215:49"><expr pos:start="2215:46" pos:end="2215:49"><name pos:start="2215:46" pos:end="2215:49">size</name></expr></argument>, <argument pos:start="2215:52" pos:end="2215:54"><expr pos:start="2215:52" pos:end="2215:54"><name pos:start="2215:52" pos:end="2215:54">tmp</name></expr></argument>, <argument pos:start="2215:57" pos:end="2215:60"><expr pos:start="2215:57" pos:end="2215:60"><name pos:start="2215:57" pos:end="2215:60">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2217:33" pos:end="2217:38">break;</break>

                            <case pos:start="2219:29" pos:end="2219:35">case <expr pos:start="2219:34" pos:end="2219:34"><literal type="number" pos:start="2219:34" pos:end="2219:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2221:33" pos:end="2221:72"><expr pos:start="2221:33" pos:end="2221:71"><call pos:start="2221:33" pos:end="2221:71"><name pos:start="2221:33" pos:end="2221:55">gen_helper_neon_add_f32</name><argument_list pos:start="2221:56" pos:end="2221:71">(<argument pos:start="2221:57" pos:end="2221:59"><expr pos:start="2221:57" pos:end="2221:59"><name pos:start="2221:57" pos:end="2221:59">tmp</name></expr></argument>, <argument pos:start="2221:62" pos:end="2221:64"><expr pos:start="2221:62" pos:end="2221:64"><name pos:start="2221:62" pos:end="2221:64">tmp</name></expr></argument>, <argument pos:start="2221:67" pos:end="2221:70"><expr pos:start="2221:67" pos:end="2221:70"><name pos:start="2221:67" pos:end="2221:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2223:33" pos:end="2223:38">break;</break>

                            <case pos:start="2225:29" pos:end="2225:35">case <expr pos:start="2225:34" pos:end="2225:34"><literal type="number" pos:start="2225:34" pos:end="2225:34">4</literal></expr>:</case>

                                <expr_stmt pos:start="2227:33" pos:end="2227:62"><expr pos:start="2227:33" pos:end="2227:61"><call pos:start="2227:33" pos:end="2227:61"><name pos:start="2227:33" pos:end="2227:44">gen_neon_rsb</name><argument_list pos:start="2227:45" pos:end="2227:61">(<argument pos:start="2227:46" pos:end="2227:49"><expr pos:start="2227:46" pos:end="2227:49"><name pos:start="2227:46" pos:end="2227:49">size</name></expr></argument>, <argument pos:start="2227:52" pos:end="2227:54"><expr pos:start="2227:52" pos:end="2227:54"><name pos:start="2227:52" pos:end="2227:54">tmp</name></expr></argument>, <argument pos:start="2227:57" pos:end="2227:60"><expr pos:start="2227:57" pos:end="2227:60"><name pos:start="2227:57" pos:end="2227:60">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2229:33" pos:end="2229:38">break;</break>

                            <case pos:start="2231:29" pos:end="2231:35">case <expr pos:start="2231:34" pos:end="2231:34"><literal type="number" pos:start="2231:34" pos:end="2231:34">5</literal></expr>:</case>

                                <expr_stmt pos:start="2233:33" pos:end="2233:72"><expr pos:start="2233:33" pos:end="2233:71"><call pos:start="2233:33" pos:end="2233:71"><name pos:start="2233:33" pos:end="2233:55">gen_helper_neon_sub_f32</name><argument_list pos:start="2233:56" pos:end="2233:71">(<argument pos:start="2233:57" pos:end="2233:59"><expr pos:start="2233:57" pos:end="2233:59"><name pos:start="2233:57" pos:end="2233:59">tmp</name></expr></argument>, <argument pos:start="2233:62" pos:end="2233:65"><expr pos:start="2233:62" pos:end="2233:65"><name pos:start="2233:62" pos:end="2233:65">tmp2</name></expr></argument>, <argument pos:start="2233:68" pos:end="2233:70"><expr pos:start="2233:68" pos:end="2233:70"><name pos:start="2233:68" pos:end="2233:70">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2235:33" pos:end="2235:38">break;</break>

                            <default pos:start="2237:29" pos:end="2237:36">default:</default>

                                <expr_stmt pos:start="2239:33" pos:end="2239:40"><expr pos:start="2239:33" pos:end="2239:39"><call pos:start="2239:33" pos:end="2239:39"><name pos:start="2239:33" pos:end="2239:37">abort</name><argument_list pos:start="2239:38" pos:end="2239:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2243:29" pos:end="2243:52"><expr pos:start="2243:29" pos:end="2243:51"><call pos:start="2243:29" pos:end="2243:51"><name pos:start="2243:29" pos:end="2243:45">tcg_temp_free_i32</name><argument_list pos:start="2243:46" pos:end="2243:51">(<argument pos:start="2243:47" pos:end="2243:50"><expr pos:start="2243:47" pos:end="2243:50"><name pos:start="2243:47" pos:end="2243:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2247:25" pos:end="2247:54"><expr pos:start="2247:25" pos:end="2247:53"><call pos:start="2247:25" pos:end="2247:53"><name pos:start="2247:25" pos:end="2247:38">neon_store_reg</name><argument_list pos:start="2247:39" pos:end="2247:53">(<argument pos:start="2247:40" pos:end="2247:41"><expr pos:start="2247:40" pos:end="2247:41"><name pos:start="2247:40" pos:end="2247:41">rd</name></expr></argument>, <argument pos:start="2247:44" pos:end="2247:47"><expr pos:start="2247:44" pos:end="2247:47"><name pos:start="2247:44" pos:end="2247:47">pass</name></expr></argument>, <argument pos:start="2247:50" pos:end="2247:52"><expr pos:start="2247:50" pos:end="2247:52"><name pos:start="2247:50" pos:end="2247:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2251:21" pos:end="2251:26">break;</break>

                <case pos:start="2253:17" pos:end="2253:23">case <expr pos:start="2253:22" pos:end="2253:22"><literal type="number" pos:start="2253:22" pos:end="2253:22">3</literal></expr>:</case> <comment type="block" pos:start="2253:25" pos:end="2253:44">/* VQDMLAL scalar */</comment>

                <case pos:start="2255:17" pos:end="2255:23">case <expr pos:start="2255:22" pos:end="2255:22"><literal type="number" pos:start="2255:22" pos:end="2255:22">7</literal></expr>:</case> <comment type="block" pos:start="2255:25" pos:end="2255:44">/* VQDMLSL scalar */</comment>

                <case pos:start="2257:17" pos:end="2257:24">case <expr pos:start="2257:22" pos:end="2257:23"><literal type="number" pos:start="2257:22" pos:end="2257:23">11</literal></expr>:</case> <comment type="block" pos:start="2257:26" pos:end="2257:45">/* VQDMULL scalar */</comment>

                    <if_stmt pos:start="2259:21" pos:end="2263:21"><if pos:start="2259:21" pos:end="2263:21">if <condition pos:start="2259:24" pos:end="2259:31">(<expr pos:start="2259:25" pos:end="2259:30"><name pos:start="2259:25" pos:end="2259:25">u</name> <operator pos:start="2259:27" pos:end="2259:28">==</operator> <literal type="number" pos:start="2259:30" pos:end="2259:30">1</literal></expr>)</condition> <block pos:start="2259:33" pos:end="2263:21">{<block_content pos:start="2261:25" pos:end="2261:33">

                        <return pos:start="2261:25" pos:end="2261:33">return <expr pos:start="2261:32" pos:end="2261:32"><literal type="number" pos:start="2261:32" pos:end="2261:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="2265:21" pos:end="2265:38">/* fall through */</comment>

                <case pos:start="2267:17" pos:end="2267:23">case <expr pos:start="2267:22" pos:end="2267:22"><literal type="number" pos:start="2267:22" pos:end="2267:22">2</literal></expr>:</case> <comment type="block" pos:start="2267:25" pos:end="2267:41">/* VMLAL sclar */</comment>

                <case pos:start="2269:17" pos:end="2269:23">case <expr pos:start="2269:22" pos:end="2269:22"><literal type="number" pos:start="2269:22" pos:end="2269:22">6</literal></expr>:</case> <comment type="block" pos:start="2269:25" pos:end="2269:42">/* VMLSL scalar */</comment>

                <case pos:start="2271:17" pos:end="2271:24">case <expr pos:start="2271:22" pos:end="2271:23"><literal type="number" pos:start="2271:22" pos:end="2271:23">10</literal></expr>:</case> <comment type="block" pos:start="2271:26" pos:end="2271:43">/* VMULL scalar */</comment>

                    <if_stmt pos:start="2273:21" pos:end="2277:21"><if pos:start="2273:21" pos:end="2277:21">if <condition pos:start="2273:24" pos:end="2273:31">(<expr pos:start="2273:25" pos:end="2273:30"><name pos:start="2273:25" pos:end="2273:26">rd</name> <operator pos:start="2273:28" pos:end="2273:28">&amp;</operator> <literal type="number" pos:start="2273:30" pos:end="2273:30">1</literal></expr>)</condition> <block pos:start="2273:33" pos:end="2277:21">{<block_content pos:start="2275:25" pos:end="2275:33">

                        <return pos:start="2275:25" pos:end="2275:33">return <expr pos:start="2275:32" pos:end="2275:32"><literal type="number" pos:start="2275:32" pos:end="2275:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2279:21" pos:end="2279:53"><expr pos:start="2279:21" pos:end="2279:52"><name pos:start="2279:21" pos:end="2279:24">tmp2</name> <operator pos:start="2279:26" pos:end="2279:26">=</operator> <call pos:start="2279:28" pos:end="2279:52"><name pos:start="2279:28" pos:end="2279:42">neon_get_scalar</name><argument_list pos:start="2279:43" pos:end="2279:52">(<argument pos:start="2279:44" pos:end="2279:47"><expr pos:start="2279:44" pos:end="2279:47"><name pos:start="2279:44" pos:end="2279:47">size</name></expr></argument>, <argument pos:start="2279:50" pos:end="2279:51"><expr pos:start="2279:50" pos:end="2279:51"><name pos:start="2279:50" pos:end="2279:51">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="2281:21" pos:end="2283:52">/* We need a copy of tmp2 because gen_neon_mull

                     * deletes it during pass 0.  */</comment>

                    <expr_stmt pos:start="2285:21" pos:end="2285:46"><expr pos:start="2285:21" pos:end="2285:45"><name pos:start="2285:21" pos:end="2285:24">tmp4</name> <operator pos:start="2285:26" pos:end="2285:26">=</operator> <call pos:start="2285:28" pos:end="2285:45"><name pos:start="2285:28" pos:end="2285:43">tcg_temp_new_i32</name><argument_list pos:start="2285:44" pos:end="2285:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2287:21" pos:end="2287:48"><expr pos:start="2287:21" pos:end="2287:47"><call pos:start="2287:21" pos:end="2287:47"><name pos:start="2287:21" pos:end="2287:35">tcg_gen_mov_i32</name><argument_list pos:start="2287:36" pos:end="2287:47">(<argument pos:start="2287:37" pos:end="2287:40"><expr pos:start="2287:37" pos:end="2287:40"><name pos:start="2287:37" pos:end="2287:40">tmp4</name></expr></argument>, <argument pos:start="2287:43" pos:end="2287:46"><expr pos:start="2287:43" pos:end="2287:46"><name pos:start="2287:43" pos:end="2287:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2289:21" pos:end="2289:48"><expr pos:start="2289:21" pos:end="2289:47"><name pos:start="2289:21" pos:end="2289:24">tmp3</name> <operator pos:start="2289:26" pos:end="2289:26">=</operator> <call pos:start="2289:28" pos:end="2289:47"><name pos:start="2289:28" pos:end="2289:40">neon_load_reg</name><argument_list pos:start="2289:41" pos:end="2289:47">(<argument pos:start="2289:42" pos:end="2289:43"><expr pos:start="2289:42" pos:end="2289:43"><name pos:start="2289:42" pos:end="2289:43">rn</name></expr></argument>, <argument pos:start="2289:46" pos:end="2289:46"><expr pos:start="2289:46" pos:end="2289:46"><literal type="number" pos:start="2289:46" pos:end="2289:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <for pos:start="2293:21" pos:end="2363:21">for <control pos:start="2293:25" pos:end="2293:52">(<init pos:start="2293:26" pos:end="2293:34"><expr pos:start="2293:26" pos:end="2293:33"><name pos:start="2293:26" pos:end="2293:29">pass</name> <operator pos:start="2293:31" pos:end="2293:31">=</operator> <literal type="number" pos:start="2293:33" pos:end="2293:33">0</literal></expr>;</init> <condition pos:start="2293:36" pos:end="2293:44"><expr pos:start="2293:36" pos:end="2293:43"><name pos:start="2293:36" pos:end="2293:39">pass</name> <operator pos:start="2293:41" pos:end="2293:41">&lt;</operator> <literal type="number" pos:start="2293:43" pos:end="2293:43">2</literal></expr>;</condition> <incr pos:start="2293:46" pos:end="2293:51"><expr pos:start="2293:46" pos:end="2293:51"><name pos:start="2293:46" pos:end="2293:49">pass</name><operator pos:start="2293:50" pos:end="2293:51">++</operator></expr></incr>)</control> <block pos:start="2293:54" pos:end="2363:21">{<block_content pos:start="2295:25" pos:end="2361:60">

                        <if_stmt pos:start="2295:25" pos:end="2305:25"><if pos:start="2295:25" pos:end="2299:25">if <condition pos:start="2295:28" pos:end="2295:38">(<expr pos:start="2295:29" pos:end="2295:37"><name pos:start="2295:29" pos:end="2295:32">pass</name> <operator pos:start="2295:34" pos:end="2295:35">==</operator> <literal type="number" pos:start="2295:37" pos:end="2295:37">0</literal></expr>)</condition> <block pos:start="2295:40" pos:end="2299:25">{<block_content pos:start="2297:29" pos:end="2297:55">

                            <expr_stmt pos:start="2297:29" pos:end="2297:55"><expr pos:start="2297:29" pos:end="2297:54"><name pos:start="2297:29" pos:end="2297:31">tmp</name> <operator pos:start="2297:33" pos:end="2297:33">=</operator> <call pos:start="2297:35" pos:end="2297:54"><name pos:start="2297:35" pos:end="2297:47">neon_load_reg</name><argument_list pos:start="2297:48" pos:end="2297:54">(<argument pos:start="2297:49" pos:end="2297:50"><expr pos:start="2297:49" pos:end="2297:50"><name pos:start="2297:49" pos:end="2297:50">rn</name></expr></argument>, <argument pos:start="2297:53" pos:end="2297:53"><expr pos:start="2297:53" pos:end="2297:53"><literal type="number" pos:start="2297:53" pos:end="2297:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2299:27" pos:end="2305:25">else <block pos:start="2299:32" pos:end="2305:25">{<block_content pos:start="2301:29" pos:end="2303:40">

                            <expr_stmt pos:start="2301:29" pos:end="2301:39"><expr pos:start="2301:29" pos:end="2301:38"><name pos:start="2301:29" pos:end="2301:31">tmp</name> <operator pos:start="2301:33" pos:end="2301:33">=</operator> <name pos:start="2301:35" pos:end="2301:38">tmp3</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="2303:29" pos:end="2303:40"><expr pos:start="2303:29" pos:end="2303:39"><name pos:start="2303:29" pos:end="2303:32">tmp2</name> <operator pos:start="2303:34" pos:end="2303:34">=</operator> <name pos:start="2303:36" pos:end="2303:39">tmp4</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2307:25" pos:end="2307:66"><expr pos:start="2307:25" pos:end="2307:65"><call pos:start="2307:25" pos:end="2307:65"><name pos:start="2307:25" pos:end="2307:37">gen_neon_mull</name><argument_list pos:start="2307:38" pos:end="2307:65">(<argument pos:start="2307:39" pos:end="2307:44"><expr pos:start="2307:39" pos:end="2307:44"><name pos:start="2307:39" pos:end="2307:44">cpu_V0</name></expr></argument>, <argument pos:start="2307:47" pos:end="2307:49"><expr pos:start="2307:47" pos:end="2307:49"><name pos:start="2307:47" pos:end="2307:49">tmp</name></expr></argument>, <argument pos:start="2307:52" pos:end="2307:55"><expr pos:start="2307:52" pos:end="2307:55"><name pos:start="2307:52" pos:end="2307:55">tmp2</name></expr></argument>, <argument pos:start="2307:58" pos:end="2307:61"><expr pos:start="2307:58" pos:end="2307:61"><name pos:start="2307:58" pos:end="2307:61">size</name></expr></argument>, <argument pos:start="2307:64" pos:end="2307:64"><expr pos:start="2307:64" pos:end="2307:64"><name pos:start="2307:64" pos:end="2307:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2309:25" pos:end="2313:25"><if pos:start="2309:25" pos:end="2313:25">if <condition pos:start="2309:28" pos:end="2309:37">(<expr pos:start="2309:29" pos:end="2309:36"><name pos:start="2309:29" pos:end="2309:30">op</name> <operator pos:start="2309:32" pos:end="2309:33">!=</operator> <literal type="number" pos:start="2309:35" pos:end="2309:36">11</literal></expr>)</condition> <block pos:start="2309:39" pos:end="2313:25">{<block_content pos:start="2311:29" pos:end="2311:63">

                            <expr_stmt pos:start="2311:29" pos:end="2311:63"><expr pos:start="2311:29" pos:end="2311:62"><call pos:start="2311:29" pos:end="2311:62"><name pos:start="2311:29" pos:end="2311:43">neon_load_reg64</name><argument_list pos:start="2311:44" pos:end="2311:62">(<argument pos:start="2311:45" pos:end="2311:50"><expr pos:start="2311:45" pos:end="2311:50"><name pos:start="2311:45" pos:end="2311:50">cpu_V1</name></expr></argument>, <argument pos:start="2311:53" pos:end="2311:61"><expr pos:start="2311:53" pos:end="2311:61"><name pos:start="2311:53" pos:end="2311:54">rd</name> <operator pos:start="2311:56" pos:end="2311:56">+</operator> <name pos:start="2311:58" pos:end="2311:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <switch pos:start="2315:25" pos:end="2359:25">switch <condition pos:start="2315:32" pos:end="2315:35">(<expr pos:start="2315:33" pos:end="2315:34"><name pos:start="2315:33" pos:end="2315:34">op</name></expr>)</condition> <block pos:start="2315:37" pos:end="2359:25">{<block_content pos:start="2317:25" pos:end="2357:36">

                        <case pos:start="2317:25" pos:end="2317:31">case <expr pos:start="2317:30" pos:end="2317:30"><literal type="number" pos:start="2317:30" pos:end="2317:30">6</literal></expr>:</case>

                            <expr_stmt pos:start="2319:29" pos:end="2319:56"><expr pos:start="2319:29" pos:end="2319:55"><call pos:start="2319:29" pos:end="2319:55"><name pos:start="2319:29" pos:end="2319:41">gen_neon_negl</name><argument_list pos:start="2319:42" pos:end="2319:55">(<argument pos:start="2319:43" pos:end="2319:48"><expr pos:start="2319:43" pos:end="2319:48"><name pos:start="2319:43" pos:end="2319:48">cpu_V0</name></expr></argument>, <argument pos:start="2319:51" pos:end="2319:54"><expr pos:start="2319:51" pos:end="2319:54"><name pos:start="2319:51" pos:end="2319:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="2321:29" pos:end="2321:46">/* Fall through */</comment>

                        <case pos:start="2323:25" pos:end="2323:31">case <expr pos:start="2323:30" pos:end="2323:30"><literal type="number" pos:start="2323:30" pos:end="2323:30">2</literal></expr>:</case>

                            <expr_stmt pos:start="2325:29" pos:end="2325:48"><expr pos:start="2325:29" pos:end="2325:47"><call pos:start="2325:29" pos:end="2325:47"><name pos:start="2325:29" pos:end="2325:41">gen_neon_addl</name><argument_list pos:start="2325:42" pos:end="2325:47">(<argument pos:start="2325:43" pos:end="2325:46"><expr pos:start="2325:43" pos:end="2325:46"><name pos:start="2325:43" pos:end="2325:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2327:29" pos:end="2327:34">break;</break>

                        <case pos:start="2329:25" pos:end="2329:31">case <expr pos:start="2329:30" pos:end="2329:30"><literal type="number" pos:start="2329:30" pos:end="2329:30">3</literal></expr>:</case> <case pos:start="2329:33" pos:end="2329:39">case <expr pos:start="2329:38" pos:end="2329:38"><literal type="number" pos:start="2329:38" pos:end="2329:38">7</literal></expr>:</case>

                            <expr_stmt pos:start="2331:29" pos:end="2331:73"><expr pos:start="2331:29" pos:end="2331:72"><call pos:start="2331:29" pos:end="2331:72"><name pos:start="2331:29" pos:end="2331:50">gen_neon_addl_saturate</name><argument_list pos:start="2331:51" pos:end="2331:72">(<argument pos:start="2331:52" pos:end="2331:57"><expr pos:start="2331:52" pos:end="2331:57"><name pos:start="2331:52" pos:end="2331:57">cpu_V0</name></expr></argument>, <argument pos:start="2331:60" pos:end="2331:65"><expr pos:start="2331:60" pos:end="2331:65"><name pos:start="2331:60" pos:end="2331:65">cpu_V0</name></expr></argument>, <argument pos:start="2331:68" pos:end="2331:71"><expr pos:start="2331:68" pos:end="2331:71"><name pos:start="2331:68" pos:end="2331:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2333:29" pos:end="2337:29"><if pos:start="2333:29" pos:end="2337:29">if <condition pos:start="2333:32" pos:end="2333:40">(<expr pos:start="2333:33" pos:end="2333:39"><name pos:start="2333:33" pos:end="2333:34">op</name> <operator pos:start="2333:36" pos:end="2333:37">==</operator> <literal type="number" pos:start="2333:39" pos:end="2333:39">7</literal></expr>)</condition> <block pos:start="2333:42" pos:end="2337:29">{<block_content pos:start="2335:33" pos:end="2335:60">

                                <expr_stmt pos:start="2335:33" pos:end="2335:60"><expr pos:start="2335:33" pos:end="2335:59"><call pos:start="2335:33" pos:end="2335:59"><name pos:start="2335:33" pos:end="2335:45">gen_neon_negl</name><argument_list pos:start="2335:46" pos:end="2335:59">(<argument pos:start="2335:47" pos:end="2335:52"><expr pos:start="2335:47" pos:end="2335:52"><name pos:start="2335:47" pos:end="2335:52">cpu_V0</name></expr></argument>, <argument pos:start="2335:55" pos:end="2335:58"><expr pos:start="2335:55" pos:end="2335:58"><name pos:start="2335:55" pos:end="2335:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="2339:29" pos:end="2339:73"><expr pos:start="2339:29" pos:end="2339:72"><call pos:start="2339:29" pos:end="2339:72"><name pos:start="2339:29" pos:end="2339:50">gen_neon_addl_saturate</name><argument_list pos:start="2339:51" pos:end="2339:72">(<argument pos:start="2339:52" pos:end="2339:57"><expr pos:start="2339:52" pos:end="2339:57"><name pos:start="2339:52" pos:end="2339:57">cpu_V0</name></expr></argument>, <argument pos:start="2339:60" pos:end="2339:65"><expr pos:start="2339:60" pos:end="2339:65"><name pos:start="2339:60" pos:end="2339:65">cpu_V1</name></expr></argument>, <argument pos:start="2339:68" pos:end="2339:71"><expr pos:start="2339:68" pos:end="2339:71"><name pos:start="2339:68" pos:end="2339:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2341:29" pos:end="2341:34">break;</break>

                        <case pos:start="2343:25" pos:end="2343:32">case <expr pos:start="2343:30" pos:end="2343:31"><literal type="number" pos:start="2343:30" pos:end="2343:31">10</literal></expr>:</case>

                            <comment type="block" pos:start="2345:29" pos:end="2345:39">/* no-op */</comment>

                            <break pos:start="2347:29" pos:end="2347:34">break;</break>

                        <case pos:start="2349:25" pos:end="2349:32">case <expr pos:start="2349:30" pos:end="2349:31"><literal type="number" pos:start="2349:30" pos:end="2349:31">11</literal></expr>:</case>

                            <expr_stmt pos:start="2351:29" pos:end="2351:73"><expr pos:start="2351:29" pos:end="2351:72"><call pos:start="2351:29" pos:end="2351:72"><name pos:start="2351:29" pos:end="2351:50">gen_neon_addl_saturate</name><argument_list pos:start="2351:51" pos:end="2351:72">(<argument pos:start="2351:52" pos:end="2351:57"><expr pos:start="2351:52" pos:end="2351:57"><name pos:start="2351:52" pos:end="2351:57">cpu_V0</name></expr></argument>, <argument pos:start="2351:60" pos:end="2351:65"><expr pos:start="2351:60" pos:end="2351:65"><name pos:start="2351:60" pos:end="2351:65">cpu_V0</name></expr></argument>, <argument pos:start="2351:68" pos:end="2351:71"><expr pos:start="2351:68" pos:end="2351:71"><name pos:start="2351:68" pos:end="2351:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2353:29" pos:end="2353:34">break;</break>

                        <default pos:start="2355:25" pos:end="2355:32">default:</default>

                            <expr_stmt pos:start="2357:29" pos:end="2357:36"><expr pos:start="2357:29" pos:end="2357:35"><call pos:start="2357:29" pos:end="2357:35"><name pos:start="2357:29" pos:end="2357:33">abort</name><argument_list pos:start="2357:34" pos:end="2357:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2361:25" pos:end="2361:60"><expr pos:start="2361:25" pos:end="2361:59"><call pos:start="2361:25" pos:end="2361:59"><name pos:start="2361:25" pos:end="2361:40">neon_store_reg64</name><argument_list pos:start="2361:41" pos:end="2361:59">(<argument pos:start="2361:42" pos:end="2361:47"><expr pos:start="2361:42" pos:end="2361:47"><name pos:start="2361:42" pos:end="2361:47">cpu_V0</name></expr></argument>, <argument pos:start="2361:50" pos:end="2361:58"><expr pos:start="2361:50" pos:end="2361:58"><name pos:start="2361:50" pos:end="2361:51">rd</name> <operator pos:start="2361:53" pos:end="2361:53">+</operator> <name pos:start="2361:55" pos:end="2361:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>





                    <break pos:start="2369:21" pos:end="2369:26">break;</break>

                <default pos:start="2371:17" pos:end="2371:24">default:</default> <comment type="block" pos:start="2371:26" pos:end="2371:53">/* 14 and 15 are RESERVED */</comment>

                    <return pos:start="2373:21" pos:end="2373:29">return <expr pos:start="2373:28" pos:end="2373:28"><literal type="number" pos:start="2373:28" pos:end="2373:28">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2379:11" pos:end="3275:9">else <block pos:start="2379:16" pos:end="3275:9">{<block_content pos:start="2381:13" pos:end="3273:13"> <comment type="block" pos:start="2379:18" pos:end="2379:32">/* size == 3 */</comment>

            <if_stmt pos:start="2381:13" pos:end="3273:13"><if pos:start="2381:13" pos:end="2491:13">if <condition pos:start="2381:16" pos:end="2381:19">(<expr pos:start="2381:17" pos:end="2381:18"><operator pos:start="2381:17" pos:end="2381:17">!</operator><name pos:start="2381:18" pos:end="2381:18">u</name></expr>)</condition> <block pos:start="2381:21" pos:end="2491:13">{<block_content pos:start="2385:17" pos:end="2489:17">

                <comment type="block" pos:start="2383:17" pos:end="2383:31">/* Extract.  */</comment>

                <expr_stmt pos:start="2385:17" pos:end="2385:40"><expr pos:start="2385:17" pos:end="2385:39"><name pos:start="2385:17" pos:end="2385:19">imm</name> <operator pos:start="2385:21" pos:end="2385:21">=</operator> <operator pos:start="2385:23" pos:end="2385:23">(</operator><name pos:start="2385:24" pos:end="2385:27">insn</name> <operator pos:start="2385:29" pos:end="2385:30">&gt;&gt;</operator> <literal type="number" pos:start="2385:32" pos:end="2385:32">8</literal><operator pos:start="2385:33" pos:end="2385:33">)</operator> <operator pos:start="2385:35" pos:end="2385:35">&amp;</operator> <literal type="number" pos:start="2385:37" pos:end="2385:39">0xf</literal></expr>;</expr_stmt>



                <if_stmt pos:start="2389:17" pos:end="2391:29"><if pos:start="2389:17" pos:end="2391:29">if <condition pos:start="2389:20" pos:end="2389:34">(<expr pos:start="2389:21" pos:end="2389:33"><name pos:start="2389:21" pos:end="2389:23">imm</name> <operator pos:start="2389:25" pos:end="2389:25">&gt;</operator> <literal type="number" pos:start="2389:27" pos:end="2389:27">7</literal> <operator pos:start="2389:29" pos:end="2389:30">&amp;&amp;</operator> <operator pos:start="2389:32" pos:end="2389:32">!</operator><name pos:start="2389:33" pos:end="2389:33">q</name></expr>)</condition><block type="pseudo" pos:start="2391:21" pos:end="2391:29"><block_content pos:start="2391:21" pos:end="2391:29">

                    <return pos:start="2391:21" pos:end="2391:29">return <expr pos:start="2391:28" pos:end="2391:28"><literal type="number" pos:start="2391:28" pos:end="2391:28">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="2395:17" pos:end="2399:17"><if pos:start="2395:17" pos:end="2399:17">if <condition pos:start="2395:20" pos:end="2395:46">(<expr pos:start="2395:21" pos:end="2395:45"><name pos:start="2395:21" pos:end="2395:21">q</name> <operator pos:start="2395:23" pos:end="2395:24">&amp;&amp;</operator> <operator pos:start="2395:26" pos:end="2395:26">(</operator><operator pos:start="2395:27" pos:end="2395:27">(</operator><name pos:start="2395:28" pos:end="2395:29">rd</name> <operator pos:start="2395:31" pos:end="2395:31">|</operator> <name pos:start="2395:33" pos:end="2395:34">rn</name> <operator pos:start="2395:36" pos:end="2395:36">|</operator> <name pos:start="2395:38" pos:end="2395:39">rm</name><operator pos:start="2395:40" pos:end="2395:40">)</operator> <operator pos:start="2395:42" pos:end="2395:42">&amp;</operator> <literal type="number" pos:start="2395:44" pos:end="2395:44">1</literal><operator pos:start="2395:45" pos:end="2395:45">)</operator></expr>)</condition> <block pos:start="2395:48" pos:end="2399:17">{<block_content pos:start="2397:21" pos:end="2397:29">

                    <return pos:start="2397:21" pos:end="2397:29">return <expr pos:start="2397:28" pos:end="2397:28"><literal type="number" pos:start="2397:28" pos:end="2397:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="2403:17" pos:end="2481:17"><if pos:start="2403:17" pos:end="2413:17">if <condition pos:start="2403:20" pos:end="2403:29">(<expr pos:start="2403:21" pos:end="2403:28"><name pos:start="2403:21" pos:end="2403:23">imm</name> <operator pos:start="2403:25" pos:end="2403:26">==</operator> <literal type="number" pos:start="2403:28" pos:end="2403:28">0</literal></expr>)</condition> <block pos:start="2403:31" pos:end="2413:17">{<block_content pos:start="2405:21" pos:end="2411:21">

                    <expr_stmt pos:start="2405:21" pos:end="2405:48"><expr pos:start="2405:21" pos:end="2405:47"><call pos:start="2405:21" pos:end="2405:47"><name pos:start="2405:21" pos:end="2405:35">neon_load_reg64</name><argument_list pos:start="2405:36" pos:end="2405:47">(<argument pos:start="2405:37" pos:end="2405:42"><expr pos:start="2405:37" pos:end="2405:42"><name pos:start="2405:37" pos:end="2405:42">cpu_V0</name></expr></argument>, <argument pos:start="2405:45" pos:end="2405:46"><expr pos:start="2405:45" pos:end="2405:46"><name pos:start="2405:45" pos:end="2405:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2407:21" pos:end="2411:21"><if pos:start="2407:21" pos:end="2411:21">if <condition pos:start="2407:24" pos:end="2407:26">(<expr pos:start="2407:25" pos:end="2407:25"><name pos:start="2407:25" pos:end="2407:25">q</name></expr>)</condition> <block pos:start="2407:28" pos:end="2411:21">{<block_content pos:start="2409:25" pos:end="2409:56">

                        <expr_stmt pos:start="2409:25" pos:end="2409:56"><expr pos:start="2409:25" pos:end="2409:55"><call pos:start="2409:25" pos:end="2409:55"><name pos:start="2409:25" pos:end="2409:39">neon_load_reg64</name><argument_list pos:start="2409:40" pos:end="2409:55">(<argument pos:start="2409:41" pos:end="2409:46"><expr pos:start="2409:41" pos:end="2409:46"><name pos:start="2409:41" pos:end="2409:46">cpu_V1</name></expr></argument>, <argument pos:start="2409:49" pos:end="2409:54"><expr pos:start="2409:49" pos:end="2409:54"><name pos:start="2409:49" pos:end="2409:50">rn</name> <operator pos:start="2409:52" pos:end="2409:52">+</operator> <literal type="number" pos:start="2409:54" pos:end="2409:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2413:19" pos:end="2423:17">else if <condition pos:start="2413:27" pos:end="2413:36">(<expr pos:start="2413:28" pos:end="2413:35"><name pos:start="2413:28" pos:end="2413:30">imm</name> <operator pos:start="2413:32" pos:end="2413:33">==</operator> <literal type="number" pos:start="2413:35" pos:end="2413:35">8</literal></expr>)</condition> <block pos:start="2413:38" pos:end="2423:17">{<block_content pos:start="2415:21" pos:end="2421:21">

                    <expr_stmt pos:start="2415:21" pos:end="2415:52"><expr pos:start="2415:21" pos:end="2415:51"><call pos:start="2415:21" pos:end="2415:51"><name pos:start="2415:21" pos:end="2415:35">neon_load_reg64</name><argument_list pos:start="2415:36" pos:end="2415:51">(<argument pos:start="2415:37" pos:end="2415:42"><expr pos:start="2415:37" pos:end="2415:42"><name pos:start="2415:37" pos:end="2415:42">cpu_V0</name></expr></argument>, <argument pos:start="2415:45" pos:end="2415:50"><expr pos:start="2415:45" pos:end="2415:50"><name pos:start="2415:45" pos:end="2415:46">rn</name> <operator pos:start="2415:48" pos:end="2415:48">+</operator> <literal type="number" pos:start="2415:50" pos:end="2415:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2417:21" pos:end="2421:21"><if pos:start="2417:21" pos:end="2421:21">if <condition pos:start="2417:24" pos:end="2417:26">(<expr pos:start="2417:25" pos:end="2417:25"><name pos:start="2417:25" pos:end="2417:25">q</name></expr>)</condition> <block pos:start="2417:28" pos:end="2421:21">{<block_content pos:start="2419:25" pos:end="2419:52">

                        <expr_stmt pos:start="2419:25" pos:end="2419:52"><expr pos:start="2419:25" pos:end="2419:51"><call pos:start="2419:25" pos:end="2419:51"><name pos:start="2419:25" pos:end="2419:39">neon_load_reg64</name><argument_list pos:start="2419:40" pos:end="2419:51">(<argument pos:start="2419:41" pos:end="2419:46"><expr pos:start="2419:41" pos:end="2419:46"><name pos:start="2419:41" pos:end="2419:46">cpu_V1</name></expr></argument>, <argument pos:start="2419:49" pos:end="2419:50"><expr pos:start="2419:49" pos:end="2419:50"><name pos:start="2419:49" pos:end="2419:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2423:19" pos:end="2467:17">else if <condition pos:start="2423:27" pos:end="2423:29">(<expr pos:start="2423:28" pos:end="2423:28"><name pos:start="2423:28" pos:end="2423:28">q</name></expr>)</condition> <block pos:start="2423:31" pos:end="2467:17">{<block_content pos:start="2425:21" pos:end="2465:45">

                    <expr_stmt pos:start="2425:21" pos:end="2425:47"><expr pos:start="2425:21" pos:end="2425:46"><name pos:start="2425:21" pos:end="2425:25">tmp64</name> <operator pos:start="2425:27" pos:end="2425:27">=</operator> <call pos:start="2425:29" pos:end="2425:46"><name pos:start="2425:29" pos:end="2425:44">tcg_temp_new_i64</name><argument_list pos:start="2425:45" pos:end="2425:46">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2427:21" pos:end="2439:21"><if pos:start="2427:21" pos:end="2433:21">if <condition pos:start="2427:24" pos:end="2427:32">(<expr pos:start="2427:25" pos:end="2427:31"><name pos:start="2427:25" pos:end="2427:27">imm</name> <operator pos:start="2427:29" pos:end="2427:29">&lt;</operator> <literal type="number" pos:start="2427:31" pos:end="2427:31">8</literal></expr>)</condition> <block pos:start="2427:34" pos:end="2433:21">{<block_content pos:start="2429:25" pos:end="2431:55">

                        <expr_stmt pos:start="2429:25" pos:end="2429:52"><expr pos:start="2429:25" pos:end="2429:51"><call pos:start="2429:25" pos:end="2429:51"><name pos:start="2429:25" pos:end="2429:39">neon_load_reg64</name><argument_list pos:start="2429:40" pos:end="2429:51">(<argument pos:start="2429:41" pos:end="2429:46"><expr pos:start="2429:41" pos:end="2429:46"><name pos:start="2429:41" pos:end="2429:46">cpu_V0</name></expr></argument>, <argument pos:start="2429:49" pos:end="2429:50"><expr pos:start="2429:49" pos:end="2429:50"><name pos:start="2429:49" pos:end="2429:50">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2431:25" pos:end="2431:55"><expr pos:start="2431:25" pos:end="2431:54"><call pos:start="2431:25" pos:end="2431:54"><name pos:start="2431:25" pos:end="2431:39">neon_load_reg64</name><argument_list pos:start="2431:40" pos:end="2431:54">(<argument pos:start="2431:41" pos:end="2431:45"><expr pos:start="2431:41" pos:end="2431:45"><name pos:start="2431:41" pos:end="2431:45">tmp64</name></expr></argument>, <argument pos:start="2431:48" pos:end="2431:53"><expr pos:start="2431:48" pos:end="2431:53"><name pos:start="2431:48" pos:end="2431:49">rn</name> <operator pos:start="2431:51" pos:end="2431:51">+</operator> <literal type="number" pos:start="2431:53" pos:end="2431:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2433:23" pos:end="2439:21">else <block pos:start="2433:28" pos:end="2439:21">{<block_content pos:start="2435:25" pos:end="2437:51">

                        <expr_stmt pos:start="2435:25" pos:end="2435:56"><expr pos:start="2435:25" pos:end="2435:55"><call pos:start="2435:25" pos:end="2435:55"><name pos:start="2435:25" pos:end="2435:39">neon_load_reg64</name><argument_list pos:start="2435:40" pos:end="2435:55">(<argument pos:start="2435:41" pos:end="2435:46"><expr pos:start="2435:41" pos:end="2435:46"><name pos:start="2435:41" pos:end="2435:46">cpu_V0</name></expr></argument>, <argument pos:start="2435:49" pos:end="2435:54"><expr pos:start="2435:49" pos:end="2435:54"><name pos:start="2435:49" pos:end="2435:50">rn</name> <operator pos:start="2435:52" pos:end="2435:52">+</operator> <literal type="number" pos:start="2435:54" pos:end="2435:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2437:25" pos:end="2437:51"><expr pos:start="2437:25" pos:end="2437:50"><call pos:start="2437:25" pos:end="2437:50"><name pos:start="2437:25" pos:end="2437:39">neon_load_reg64</name><argument_list pos:start="2437:40" pos:end="2437:50">(<argument pos:start="2437:41" pos:end="2437:45"><expr pos:start="2437:41" pos:end="2437:45"><name pos:start="2437:41" pos:end="2437:45">tmp64</name></expr></argument>, <argument pos:start="2437:48" pos:end="2437:49"><expr pos:start="2437:48" pos:end="2437:49"><name pos:start="2437:48" pos:end="2437:49">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2441:21" pos:end="2441:68"><expr pos:start="2441:21" pos:end="2441:67"><call pos:start="2441:21" pos:end="2441:67"><name pos:start="2441:21" pos:end="2441:36">tcg_gen_shri_i64</name><argument_list pos:start="2441:37" pos:end="2441:67">(<argument pos:start="2441:38" pos:end="2441:43"><expr pos:start="2441:38" pos:end="2441:43"><name pos:start="2441:38" pos:end="2441:43">cpu_V0</name></expr></argument>, <argument pos:start="2441:46" pos:end="2441:51"><expr pos:start="2441:46" pos:end="2441:51"><name pos:start="2441:46" pos:end="2441:51">cpu_V0</name></expr></argument>, <argument pos:start="2441:54" pos:end="2441:66"><expr pos:start="2441:54" pos:end="2441:66"><operator pos:start="2441:54" pos:end="2441:54">(</operator><name pos:start="2441:55" pos:end="2441:57">imm</name> <operator pos:start="2441:59" pos:end="2441:59">&amp;</operator> <literal type="number" pos:start="2441:61" pos:end="2441:61">7</literal><operator pos:start="2441:62" pos:end="2441:62">)</operator> <operator pos:start="2441:64" pos:end="2441:64">*</operator> <literal type="number" pos:start="2441:66" pos:end="2441:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2443:21" pos:end="2443:74"><expr pos:start="2443:21" pos:end="2443:73"><call pos:start="2443:21" pos:end="2443:73"><name pos:start="2443:21" pos:end="2443:36">tcg_gen_shli_i64</name><argument_list pos:start="2443:37" pos:end="2443:73">(<argument pos:start="2443:38" pos:end="2443:43"><expr pos:start="2443:38" pos:end="2443:43"><name pos:start="2443:38" pos:end="2443:43">cpu_V1</name></expr></argument>, <argument pos:start="2443:46" pos:end="2443:50"><expr pos:start="2443:46" pos:end="2443:50"><name pos:start="2443:46" pos:end="2443:50">tmp64</name></expr></argument>, <argument pos:start="2443:53" pos:end="2443:72"><expr pos:start="2443:53" pos:end="2443:72"><literal type="number" pos:start="2443:53" pos:end="2443:56">64</literal> <operator pos:start="2443:56" pos:end="2443:56">-</operator> <operator pos:start="2443:58" pos:end="2443:58">(</operator><operator pos:start="2443:59" pos:end="2443:59">(</operator><name pos:start="2443:60" pos:end="2443:62">imm</name> <operator pos:start="2443:64" pos:end="2443:64">&amp;</operator> <literal type="number" pos:start="2443:66" pos:end="2443:66">7</literal><operator pos:start="2443:67" pos:end="2443:67">)</operator> <operator pos:start="2443:69" pos:end="2443:69">*</operator> <literal type="number" pos:start="2443:71" pos:end="2443:71">8</literal><operator pos:start="2443:72" pos:end="2443:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2445:21" pos:end="2445:59"><expr pos:start="2445:21" pos:end="2445:58"><call pos:start="2445:21" pos:end="2445:58"><name pos:start="2445:21" pos:end="2445:34">tcg_gen_or_i64</name><argument_list pos:start="2445:35" pos:end="2445:58">(<argument pos:start="2445:36" pos:end="2445:41"><expr pos:start="2445:36" pos:end="2445:41"><name pos:start="2445:36" pos:end="2445:41">cpu_V0</name></expr></argument>, <argument pos:start="2445:44" pos:end="2445:49"><expr pos:start="2445:44" pos:end="2445:49"><name pos:start="2445:44" pos:end="2445:49">cpu_V0</name></expr></argument>, <argument pos:start="2445:52" pos:end="2445:57"><expr pos:start="2445:52" pos:end="2445:57"><name pos:start="2445:52" pos:end="2445:57">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2447:21" pos:end="2457:21"><if pos:start="2447:21" pos:end="2451:21">if <condition pos:start="2447:24" pos:end="2447:32">(<expr pos:start="2447:25" pos:end="2447:31"><name pos:start="2447:25" pos:end="2447:27">imm</name> <operator pos:start="2447:29" pos:end="2447:29">&lt;</operator> <literal type="number" pos:start="2447:31" pos:end="2447:31">8</literal></expr>)</condition> <block pos:start="2447:34" pos:end="2451:21">{<block_content pos:start="2449:25" pos:end="2449:52">

                        <expr_stmt pos:start="2449:25" pos:end="2449:52"><expr pos:start="2449:25" pos:end="2449:51"><call pos:start="2449:25" pos:end="2449:51"><name pos:start="2449:25" pos:end="2449:39">neon_load_reg64</name><argument_list pos:start="2449:40" pos:end="2449:51">(<argument pos:start="2449:41" pos:end="2449:46"><expr pos:start="2449:41" pos:end="2449:46"><name pos:start="2449:41" pos:end="2449:46">cpu_V1</name></expr></argument>, <argument pos:start="2449:49" pos:end="2449:50"><expr pos:start="2449:49" pos:end="2449:50"><name pos:start="2449:49" pos:end="2449:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2451:23" pos:end="2457:21">else <block pos:start="2451:28" pos:end="2457:21">{<block_content pos:start="2453:25" pos:end="2455:33">

                        <expr_stmt pos:start="2453:25" pos:end="2453:56"><expr pos:start="2453:25" pos:end="2453:55"><call pos:start="2453:25" pos:end="2453:55"><name pos:start="2453:25" pos:end="2453:39">neon_load_reg64</name><argument_list pos:start="2453:40" pos:end="2453:55">(<argument pos:start="2453:41" pos:end="2453:46"><expr pos:start="2453:41" pos:end="2453:46"><name pos:start="2453:41" pos:end="2453:46">cpu_V1</name></expr></argument>, <argument pos:start="2453:49" pos:end="2453:54"><expr pos:start="2453:49" pos:end="2453:54"><name pos:start="2453:49" pos:end="2453:50">rm</name> <operator pos:start="2453:52" pos:end="2453:52">+</operator> <literal type="number" pos:start="2453:54" pos:end="2453:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2455:25" pos:end="2455:33"><expr pos:start="2455:25" pos:end="2455:32"><name pos:start="2455:25" pos:end="2455:27">imm</name> <operator pos:start="2455:29" pos:end="2455:30">-=</operator> <literal type="number" pos:start="2455:32" pos:end="2455:32">8</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2459:21" pos:end="2459:69"><expr pos:start="2459:21" pos:end="2459:68"><call pos:start="2459:21" pos:end="2459:68"><name pos:start="2459:21" pos:end="2459:36">tcg_gen_shli_i64</name><argument_list pos:start="2459:37" pos:end="2459:68">(<argument pos:start="2459:38" pos:end="2459:43"><expr pos:start="2459:38" pos:end="2459:43"><name pos:start="2459:38" pos:end="2459:43">cpu_V1</name></expr></argument>, <argument pos:start="2459:46" pos:end="2459:51"><expr pos:start="2459:46" pos:end="2459:51"><name pos:start="2459:46" pos:end="2459:51">cpu_V1</name></expr></argument>, <argument pos:start="2459:54" pos:end="2459:67"><expr pos:start="2459:54" pos:end="2459:67"><literal type="number" pos:start="2459:54" pos:end="2459:57">64</literal> <operator pos:start="2459:57" pos:end="2459:57">-</operator> <operator pos:start="2459:59" pos:end="2459:59">(</operator><name pos:start="2459:60" pos:end="2459:62">imm</name> <operator pos:start="2459:64" pos:end="2459:64">*</operator> <literal type="number" pos:start="2459:66" pos:end="2459:66">8</literal><operator pos:start="2459:67" pos:end="2459:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2461:21" pos:end="2461:60"><expr pos:start="2461:21" pos:end="2461:59"><call pos:start="2461:21" pos:end="2461:59"><name pos:start="2461:21" pos:end="2461:36">tcg_gen_shri_i64</name><argument_list pos:start="2461:37" pos:end="2461:59">(<argument pos:start="2461:38" pos:end="2461:42"><expr pos:start="2461:38" pos:end="2461:42"><name pos:start="2461:38" pos:end="2461:42">tmp64</name></expr></argument>, <argument pos:start="2461:45" pos:end="2461:49"><expr pos:start="2461:45" pos:end="2461:49"><name pos:start="2461:45" pos:end="2461:49">tmp64</name></expr></argument>, <argument pos:start="2461:52" pos:end="2461:58"><expr pos:start="2461:52" pos:end="2461:58"><name pos:start="2461:52" pos:end="2461:54">imm</name> <operator pos:start="2461:56" pos:end="2461:56">*</operator> <literal type="number" pos:start="2461:58" pos:end="2461:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2463:21" pos:end="2463:58"><expr pos:start="2463:21" pos:end="2463:57"><call pos:start="2463:21" pos:end="2463:57"><name pos:start="2463:21" pos:end="2463:34">tcg_gen_or_i64</name><argument_list pos:start="2463:35" pos:end="2463:57">(<argument pos:start="2463:36" pos:end="2463:41"><expr pos:start="2463:36" pos:end="2463:41"><name pos:start="2463:36" pos:end="2463:41">cpu_V1</name></expr></argument>, <argument pos:start="2463:44" pos:end="2463:49"><expr pos:start="2463:44" pos:end="2463:49"><name pos:start="2463:44" pos:end="2463:49">cpu_V1</name></expr></argument>, <argument pos:start="2463:52" pos:end="2463:56"><expr pos:start="2463:52" pos:end="2463:56"><name pos:start="2463:52" pos:end="2463:56">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2465:21" pos:end="2465:45"><expr pos:start="2465:21" pos:end="2465:44"><call pos:start="2465:21" pos:end="2465:44"><name pos:start="2465:21" pos:end="2465:37">tcg_temp_free_i64</name><argument_list pos:start="2465:38" pos:end="2465:44">(<argument pos:start="2465:39" pos:end="2465:43"><expr pos:start="2465:39" pos:end="2465:43"><name pos:start="2465:39" pos:end="2465:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2467:19" pos:end="2481:17">else <block pos:start="2467:24" pos:end="2481:17">{<block_content pos:start="2471:21" pos:end="2479:59">

                    <comment type="block" pos:start="2469:21" pos:end="2469:32">/* BUGFIX */</comment>

                    <expr_stmt pos:start="2471:21" pos:end="2471:48"><expr pos:start="2471:21" pos:end="2471:47"><call pos:start="2471:21" pos:end="2471:47"><name pos:start="2471:21" pos:end="2471:35">neon_load_reg64</name><argument_list pos:start="2471:36" pos:end="2471:47">(<argument pos:start="2471:37" pos:end="2471:42"><expr pos:start="2471:37" pos:end="2471:42"><name pos:start="2471:37" pos:end="2471:42">cpu_V0</name></expr></argument>, <argument pos:start="2471:45" pos:end="2471:46"><expr pos:start="2471:45" pos:end="2471:46"><name pos:start="2471:45" pos:end="2471:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2473:21" pos:end="2473:62"><expr pos:start="2473:21" pos:end="2473:61"><call pos:start="2473:21" pos:end="2473:61"><name pos:start="2473:21" pos:end="2473:36">tcg_gen_shri_i64</name><argument_list pos:start="2473:37" pos:end="2473:61">(<argument pos:start="2473:38" pos:end="2473:43"><expr pos:start="2473:38" pos:end="2473:43"><name pos:start="2473:38" pos:end="2473:43">cpu_V0</name></expr></argument>, <argument pos:start="2473:46" pos:end="2473:51"><expr pos:start="2473:46" pos:end="2473:51"><name pos:start="2473:46" pos:end="2473:51">cpu_V0</name></expr></argument>, <argument pos:start="2473:54" pos:end="2473:60"><expr pos:start="2473:54" pos:end="2473:60"><name pos:start="2473:54" pos:end="2473:56">imm</name> <operator pos:start="2473:58" pos:end="2473:58">*</operator> <literal type="number" pos:start="2473:60" pos:end="2473:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2475:21" pos:end="2475:48"><expr pos:start="2475:21" pos:end="2475:47"><call pos:start="2475:21" pos:end="2475:47"><name pos:start="2475:21" pos:end="2475:35">neon_load_reg64</name><argument_list pos:start="2475:36" pos:end="2475:47">(<argument pos:start="2475:37" pos:end="2475:42"><expr pos:start="2475:37" pos:end="2475:42"><name pos:start="2475:37" pos:end="2475:42">cpu_V1</name></expr></argument>, <argument pos:start="2475:45" pos:end="2475:46"><expr pos:start="2475:45" pos:end="2475:46"><name pos:start="2475:45" pos:end="2475:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2477:21" pos:end="2477:69"><expr pos:start="2477:21" pos:end="2477:68"><call pos:start="2477:21" pos:end="2477:68"><name pos:start="2477:21" pos:end="2477:36">tcg_gen_shli_i64</name><argument_list pos:start="2477:37" pos:end="2477:68">(<argument pos:start="2477:38" pos:end="2477:43"><expr pos:start="2477:38" pos:end="2477:43"><name pos:start="2477:38" pos:end="2477:43">cpu_V1</name></expr></argument>, <argument pos:start="2477:46" pos:end="2477:51"><expr pos:start="2477:46" pos:end="2477:51"><name pos:start="2477:46" pos:end="2477:51">cpu_V1</name></expr></argument>, <argument pos:start="2477:54" pos:end="2477:67"><expr pos:start="2477:54" pos:end="2477:67"><literal type="number" pos:start="2477:54" pos:end="2477:57">64</literal> <operator pos:start="2477:57" pos:end="2477:57">-</operator> <operator pos:start="2477:59" pos:end="2477:59">(</operator><name pos:start="2477:60" pos:end="2477:62">imm</name> <operator pos:start="2477:64" pos:end="2477:64">*</operator> <literal type="number" pos:start="2477:66" pos:end="2477:66">8</literal><operator pos:start="2477:67" pos:end="2477:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2479:21" pos:end="2479:59"><expr pos:start="2479:21" pos:end="2479:58"><call pos:start="2479:21" pos:end="2479:58"><name pos:start="2479:21" pos:end="2479:34">tcg_gen_or_i64</name><argument_list pos:start="2479:35" pos:end="2479:58">(<argument pos:start="2479:36" pos:end="2479:41"><expr pos:start="2479:36" pos:end="2479:41"><name pos:start="2479:36" pos:end="2479:41">cpu_V0</name></expr></argument>, <argument pos:start="2479:44" pos:end="2479:49"><expr pos:start="2479:44" pos:end="2479:49"><name pos:start="2479:44" pos:end="2479:49">cpu_V0</name></expr></argument>, <argument pos:start="2479:52" pos:end="2479:57"><expr pos:start="2479:52" pos:end="2479:57"><name pos:start="2479:52" pos:end="2479:57">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2483:17" pos:end="2483:45"><expr pos:start="2483:17" pos:end="2483:44"><call pos:start="2483:17" pos:end="2483:44"><name pos:start="2483:17" pos:end="2483:32">neon_store_reg64</name><argument_list pos:start="2483:33" pos:end="2483:44">(<argument pos:start="2483:34" pos:end="2483:39"><expr pos:start="2483:34" pos:end="2483:39"><name pos:start="2483:34" pos:end="2483:39">cpu_V0</name></expr></argument>, <argument pos:start="2483:42" pos:end="2483:43"><expr pos:start="2483:42" pos:end="2483:43"><name pos:start="2483:42" pos:end="2483:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2485:17" pos:end="2489:17"><if pos:start="2485:17" pos:end="2489:17">if <condition pos:start="2485:20" pos:end="2485:22">(<expr pos:start="2485:21" pos:end="2485:21"><name pos:start="2485:21" pos:end="2485:21">q</name></expr>)</condition> <block pos:start="2485:24" pos:end="2489:17">{<block_content pos:start="2487:21" pos:end="2487:53">

                    <expr_stmt pos:start="2487:21" pos:end="2487:53"><expr pos:start="2487:21" pos:end="2487:52"><call pos:start="2487:21" pos:end="2487:52"><name pos:start="2487:21" pos:end="2487:36">neon_store_reg64</name><argument_list pos:start="2487:37" pos:end="2487:52">(<argument pos:start="2487:38" pos:end="2487:43"><expr pos:start="2487:38" pos:end="2487:43"><name pos:start="2487:38" pos:end="2487:43">cpu_V1</name></expr></argument>, <argument pos:start="2487:46" pos:end="2487:51"><expr pos:start="2487:46" pos:end="2487:51"><name pos:start="2487:46" pos:end="2487:47">rd</name> <operator pos:start="2487:49" pos:end="2487:49">+</operator> <literal type="number" pos:start="2487:51" pos:end="2487:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="2491:15" pos:end="3173:13">else if <condition pos:start="2491:23" pos:end="2491:47">(<expr pos:start="2491:24" pos:end="2491:46"><operator pos:start="2491:24" pos:end="2491:24">(</operator><name pos:start="2491:25" pos:end="2491:28">insn</name> <operator pos:start="2491:30" pos:end="2491:30">&amp;</operator> <operator pos:start="2491:32" pos:end="2491:32">(</operator><literal type="number" pos:start="2491:33" pos:end="2491:33">1</literal> <operator pos:start="2491:35" pos:end="2491:36">&lt;&lt;</operator> <literal type="number" pos:start="2491:38" pos:end="2491:39">11</literal><operator pos:start="2491:40" pos:end="2491:40">)</operator><operator pos:start="2491:41" pos:end="2491:41">)</operator> <operator pos:start="2491:43" pos:end="2491:44">==</operator> <literal type="number" pos:start="2491:46" pos:end="2491:46">0</literal></expr>)</condition> <block pos:start="2491:49" pos:end="3173:13">{<block_content pos:start="2495:17" pos:end="3171:17">

                <comment type="block" pos:start="2493:17" pos:end="2493:41">/* Two register misc.  */</comment>

                <expr_stmt pos:start="2495:17" pos:end="2495:65"><expr pos:start="2495:17" pos:end="2495:64"><name pos:start="2495:17" pos:end="2495:18">op</name> <operator pos:start="2495:20" pos:end="2495:20">=</operator> <operator pos:start="2495:22" pos:end="2495:22">(</operator><operator pos:start="2495:23" pos:end="2495:23">(</operator><name pos:start="2495:24" pos:end="2495:27">insn</name> <operator pos:start="2495:29" pos:end="2495:30">&gt;&gt;</operator> <literal type="number" pos:start="2495:32" pos:end="2495:33">12</literal><operator pos:start="2495:34" pos:end="2495:34">)</operator> <operator pos:start="2495:36" pos:end="2495:36">&amp;</operator> <literal type="number" pos:start="2495:38" pos:end="2495:41">0x30</literal><operator pos:start="2495:42" pos:end="2495:42">)</operator> <operator pos:start="2495:44" pos:end="2495:44">|</operator> <operator pos:start="2495:46" pos:end="2495:46">(</operator><operator pos:start="2495:47" pos:end="2495:47">(</operator><name pos:start="2495:48" pos:end="2495:51">insn</name> <operator pos:start="2495:53" pos:end="2495:54">&gt;&gt;</operator> <literal type="number" pos:start="2495:56" pos:end="2495:56">7</literal><operator pos:start="2495:57" pos:end="2495:57">)</operator> <operator pos:start="2495:59" pos:end="2495:59">&amp;</operator> <literal type="number" pos:start="2495:61" pos:end="2495:63">0xf</literal><operator pos:start="2495:64" pos:end="2495:64">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2497:17" pos:end="2497:40"><expr pos:start="2497:17" pos:end="2497:39"><name pos:start="2497:17" pos:end="2497:20">size</name> <operator pos:start="2497:22" pos:end="2497:22">=</operator> <operator pos:start="2497:24" pos:end="2497:24">(</operator><name pos:start="2497:25" pos:end="2497:28">insn</name> <operator pos:start="2497:30" pos:end="2497:31">&gt;&gt;</operator> <literal type="number" pos:start="2497:33" pos:end="2497:34">18</literal><operator pos:start="2497:35" pos:end="2497:35">)</operator> <operator pos:start="2497:37" pos:end="2497:37">&amp;</operator> <literal type="number" pos:start="2497:39" pos:end="2497:39">3</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="2499:17" pos:end="2499:78">/* UNDEF for unknown op values and bad op-size combinations */</comment>

                <if_stmt pos:start="2501:17" pos:end="2505:17"><if pos:start="2501:17" pos:end="2505:17">if <condition pos:start="2501:20" pos:end="2501:60">(<expr pos:start="2501:21" pos:end="2501:59"><operator pos:start="2501:21" pos:end="2501:21">(</operator><name pos:start="2501:22" pos:end="2501:39"><name pos:start="2501:22" pos:end="2501:35">neon_2rm_sizes</name><index pos:start="2501:36" pos:end="2501:39">[<expr pos:start="2501:37" pos:end="2501:38"><name pos:start="2501:37" pos:end="2501:38">op</name></expr>]</index></name> <operator pos:start="2501:41" pos:end="2501:41">&amp;</operator> <operator pos:start="2501:43" pos:end="2501:43">(</operator><literal type="number" pos:start="2501:44" pos:end="2501:44">1</literal> <operator pos:start="2501:46" pos:end="2501:47">&lt;&lt;</operator> <name pos:start="2501:49" pos:end="2501:52">size</name><operator pos:start="2501:53" pos:end="2501:53">)</operator><operator pos:start="2501:54" pos:end="2501:54">)</operator> <operator pos:start="2501:56" pos:end="2501:57">==</operator> <literal type="number" pos:start="2501:59" pos:end="2501:59">0</literal></expr>)</condition> <block pos:start="2501:62" pos:end="2505:17">{<block_content pos:start="2503:21" pos:end="2503:29">

                    <return pos:start="2503:21" pos:end="2503:29">return <expr pos:start="2503:28" pos:end="2503:28"><literal type="number" pos:start="2503:28" pos:end="2503:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="2507:17" pos:end="3171:17">switch <condition pos:start="2507:24" pos:end="2507:27">(<expr pos:start="2507:25" pos:end="2507:26"><name pos:start="2507:25" pos:end="2507:26">op</name></expr>)</condition> <block pos:start="2507:29" pos:end="3171:17">{<block_content pos:start="2509:17" pos:end="3169:26">

                <case pos:start="2509:17" pos:end="2509:37">case <expr pos:start="2509:22" pos:end="2509:36"><name pos:start="2509:22" pos:end="2509:36">NEON_2RM_VREV64</name></expr>:</case>

                    <for pos:start="2511:21" pos:end="2551:21">for <control pos:start="2511:25" pos:end="2511:62">(<init pos:start="2511:26" pos:end="2511:34"><expr pos:start="2511:26" pos:end="2511:33"><name pos:start="2511:26" pos:end="2511:29">pass</name> <operator pos:start="2511:31" pos:end="2511:31">=</operator> <literal type="number" pos:start="2511:33" pos:end="2511:33">0</literal></expr>;</init> <condition pos:start="2511:36" pos:end="2511:54"><expr pos:start="2511:36" pos:end="2511:53"><name pos:start="2511:36" pos:end="2511:39">pass</name> <operator pos:start="2511:41" pos:end="2511:41">&lt;</operator> <operator pos:start="2511:43" pos:end="2511:43">(</operator><ternary pos:start="2511:44" pos:end="2511:52"><condition pos:start="2511:44" pos:end="2511:46"><expr pos:start="2511:44" pos:end="2511:44"><name pos:start="2511:44" pos:end="2511:44">q</name></expr> ?</condition><then pos:start="2511:48" pos:end="2511:48"> <expr pos:start="2511:48" pos:end="2511:48"><literal type="number" pos:start="2511:48" pos:end="2511:48">2</literal></expr> </then><else pos:start="2511:50" pos:end="2511:52">: <expr pos:start="2511:52" pos:end="2511:52"><literal type="number" pos:start="2511:52" pos:end="2511:52">1</literal></expr></else></ternary><operator pos:start="2511:53" pos:end="2511:53">)</operator></expr>;</condition> <incr pos:start="2511:56" pos:end="2511:61"><expr pos:start="2511:56" pos:end="2511:61"><name pos:start="2511:56" pos:end="2511:59">pass</name><operator pos:start="2511:60" pos:end="2511:61">++</operator></expr></incr>)</control> <block pos:start="2511:64" pos:end="2551:21">{<block_content pos:start="2513:25" pos:end="2549:25">

                        <expr_stmt pos:start="2513:25" pos:end="2513:58"><expr pos:start="2513:25" pos:end="2513:57"><name pos:start="2513:25" pos:end="2513:27">tmp</name> <operator pos:start="2513:29" pos:end="2513:29">=</operator> <call pos:start="2513:31" pos:end="2513:57"><name pos:start="2513:31" pos:end="2513:43">neon_load_reg</name><argument_list pos:start="2513:44" pos:end="2513:57">(<argument pos:start="2513:45" pos:end="2513:46"><expr pos:start="2513:45" pos:end="2513:46"><name pos:start="2513:45" pos:end="2513:46">rm</name></expr></argument>, <argument pos:start="2513:49" pos:end="2513:56"><expr pos:start="2513:49" pos:end="2513:56"><name pos:start="2513:49" pos:end="2513:52">pass</name> <operator pos:start="2513:54" pos:end="2513:54">*</operator> <literal type="number" pos:start="2513:56" pos:end="2513:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2515:25" pos:end="2515:63"><expr pos:start="2515:25" pos:end="2515:62"><name pos:start="2515:25" pos:end="2515:28">tmp2</name> <operator pos:start="2515:30" pos:end="2515:30">=</operator> <call pos:start="2515:32" pos:end="2515:62"><name pos:start="2515:32" pos:end="2515:44">neon_load_reg</name><argument_list pos:start="2515:45" pos:end="2515:62">(<argument pos:start="2515:46" pos:end="2515:47"><expr pos:start="2515:46" pos:end="2515:47"><name pos:start="2515:46" pos:end="2515:47">rm</name></expr></argument>, <argument pos:start="2515:50" pos:end="2515:61"><expr pos:start="2515:50" pos:end="2515:61"><name pos:start="2515:50" pos:end="2515:53">pass</name> <operator pos:start="2515:55" pos:end="2515:55">*</operator> <literal type="number" pos:start="2515:57" pos:end="2515:59">2</literal> <operator pos:start="2515:59" pos:end="2515:59">+</operator> <literal type="number" pos:start="2515:61" pos:end="2515:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2517:25" pos:end="2527:25">switch <condition pos:start="2517:32" pos:end="2517:37">(<expr pos:start="2517:33" pos:end="2517:36"><name pos:start="2517:33" pos:end="2517:36">size</name></expr>)</condition> <block pos:start="2517:39" pos:end="2527:25">{<block_content pos:start="2519:25" pos:end="2525:41">

                        <case pos:start="2519:25" pos:end="2519:31">case <expr pos:start="2519:30" pos:end="2519:30"><literal type="number" pos:start="2519:30" pos:end="2519:30">0</literal></expr>:</case> <expr_stmt pos:start="2519:33" pos:end="2519:62"><expr pos:start="2519:33" pos:end="2519:61"><call pos:start="2519:33" pos:end="2519:61"><name pos:start="2519:33" pos:end="2519:51">tcg_gen_bswap32_i32</name><argument_list pos:start="2519:52" pos:end="2519:61">(<argument pos:start="2519:53" pos:end="2519:55"><expr pos:start="2519:53" pos:end="2519:55"><name pos:start="2519:53" pos:end="2519:55">tmp</name></expr></argument>, <argument pos:start="2519:58" pos:end="2519:60"><expr pos:start="2519:58" pos:end="2519:60"><name pos:start="2519:58" pos:end="2519:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2519:64" pos:end="2519:69">break;</break>

                        <case pos:start="2521:25" pos:end="2521:31">case <expr pos:start="2521:30" pos:end="2521:30"><literal type="number" pos:start="2521:30" pos:end="2521:30">1</literal></expr>:</case> <expr_stmt pos:start="2521:33" pos:end="2521:51"><expr pos:start="2521:33" pos:end="2521:50"><call pos:start="2521:33" pos:end="2521:50"><name pos:start="2521:33" pos:end="2521:45">gen_swap_half</name><argument_list pos:start="2521:46" pos:end="2521:50">(<argument pos:start="2521:47" pos:end="2521:49"><expr pos:start="2521:47" pos:end="2521:49"><name pos:start="2521:47" pos:end="2521:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2521:53" pos:end="2521:58">break;</break>

                        <case pos:start="2523:25" pos:end="2523:31">case <expr pos:start="2523:30" pos:end="2523:30"><literal type="number" pos:start="2523:30" pos:end="2523:30">2</literal></expr>:</case> <comment type="block" pos:start="2523:33" pos:end="2523:43">/* no-op */</comment> <break pos:start="2523:45" pos:end="2523:50">break;</break>

                        <default pos:start="2525:25" pos:end="2525:32">default:</default> <expr_stmt pos:start="2525:34" pos:end="2525:41"><expr pos:start="2525:34" pos:end="2525:40"><call pos:start="2525:34" pos:end="2525:40"><name pos:start="2525:34" pos:end="2525:38">abort</name><argument_list pos:start="2525:39" pos:end="2525:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2529:25" pos:end="2529:62"><expr pos:start="2529:25" pos:end="2529:61"><call pos:start="2529:25" pos:end="2529:61"><name pos:start="2529:25" pos:end="2529:38">neon_store_reg</name><argument_list pos:start="2529:39" pos:end="2529:61">(<argument pos:start="2529:40" pos:end="2529:41"><expr pos:start="2529:40" pos:end="2529:41"><name pos:start="2529:40" pos:end="2529:41">rd</name></expr></argument>, <argument pos:start="2529:44" pos:end="2529:55"><expr pos:start="2529:44" pos:end="2529:55"><name pos:start="2529:44" pos:end="2529:47">pass</name> <operator pos:start="2529:49" pos:end="2529:49">*</operator> <literal type="number" pos:start="2529:51" pos:end="2529:53">2</literal> <operator pos:start="2529:53" pos:end="2529:53">+</operator> <literal type="number" pos:start="2529:55" pos:end="2529:55">1</literal></expr></argument>, <argument pos:start="2529:58" pos:end="2529:60"><expr pos:start="2529:58" pos:end="2529:60"><name pos:start="2529:58" pos:end="2529:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2531:25" pos:end="2549:25"><if pos:start="2531:25" pos:end="2535:25">if <condition pos:start="2531:28" pos:end="2531:38">(<expr pos:start="2531:29" pos:end="2531:37"><name pos:start="2531:29" pos:end="2531:32">size</name> <operator pos:start="2531:34" pos:end="2531:35">==</operator> <literal type="number" pos:start="2531:37" pos:end="2531:37">2</literal></expr>)</condition> <block pos:start="2531:40" pos:end="2535:25">{<block_content pos:start="2533:29" pos:end="2533:63">

                            <expr_stmt pos:start="2533:29" pos:end="2533:63"><expr pos:start="2533:29" pos:end="2533:62"><call pos:start="2533:29" pos:end="2533:62"><name pos:start="2533:29" pos:end="2533:42">neon_store_reg</name><argument_list pos:start="2533:43" pos:end="2533:62">(<argument pos:start="2533:44" pos:end="2533:45"><expr pos:start="2533:44" pos:end="2533:45"><name pos:start="2533:44" pos:end="2533:45">rd</name></expr></argument>, <argument pos:start="2533:48" pos:end="2533:55"><expr pos:start="2533:48" pos:end="2533:55"><name pos:start="2533:48" pos:end="2533:51">pass</name> <operator pos:start="2533:53" pos:end="2533:53">*</operator> <literal type="number" pos:start="2533:55" pos:end="2533:55">2</literal></expr></argument>, <argument pos:start="2533:58" pos:end="2533:61"><expr pos:start="2533:58" pos:end="2533:61"><name pos:start="2533:58" pos:end="2533:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2535:27" pos:end="2549:25">else <block pos:start="2535:32" pos:end="2549:25">{<block_content pos:start="2537:29" pos:end="2547:63">

                            <switch pos:start="2537:29" pos:end="2545:29">switch <condition pos:start="2537:36" pos:end="2537:41">(<expr pos:start="2537:37" pos:end="2537:40"><name pos:start="2537:37" pos:end="2537:40">size</name></expr>)</condition> <block pos:start="2537:43" pos:end="2545:29">{<block_content pos:start="2539:29" pos:end="2543:45">

                            <case pos:start="2539:29" pos:end="2539:35">case <expr pos:start="2539:34" pos:end="2539:34"><literal type="number" pos:start="2539:34" pos:end="2539:34">0</literal></expr>:</case> <expr_stmt pos:start="2539:37" pos:end="2539:68"><expr pos:start="2539:37" pos:end="2539:67"><call pos:start="2539:37" pos:end="2539:67"><name pos:start="2539:37" pos:end="2539:55">tcg_gen_bswap32_i32</name><argument_list pos:start="2539:56" pos:end="2539:67">(<argument pos:start="2539:57" pos:end="2539:60"><expr pos:start="2539:57" pos:end="2539:60"><name pos:start="2539:57" pos:end="2539:60">tmp2</name></expr></argument>, <argument pos:start="2539:63" pos:end="2539:66"><expr pos:start="2539:63" pos:end="2539:66"><name pos:start="2539:63" pos:end="2539:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2539:70" pos:end="2539:75">break;</break>

                            <case pos:start="2541:29" pos:end="2541:35">case <expr pos:start="2541:34" pos:end="2541:34"><literal type="number" pos:start="2541:34" pos:end="2541:34">1</literal></expr>:</case> <expr_stmt pos:start="2541:37" pos:end="2541:56"><expr pos:start="2541:37" pos:end="2541:55"><call pos:start="2541:37" pos:end="2541:55"><name pos:start="2541:37" pos:end="2541:49">gen_swap_half</name><argument_list pos:start="2541:50" pos:end="2541:55">(<argument pos:start="2541:51" pos:end="2541:54"><expr pos:start="2541:51" pos:end="2541:54"><name pos:start="2541:51" pos:end="2541:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2541:58" pos:end="2541:63">break;</break>

                            <default pos:start="2543:29" pos:end="2543:36">default:</default> <expr_stmt pos:start="2543:38" pos:end="2543:45"><expr pos:start="2543:38" pos:end="2543:44"><call pos:start="2543:38" pos:end="2543:44"><name pos:start="2543:38" pos:end="2543:42">abort</name><argument_list pos:start="2543:43" pos:end="2543:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2547:29" pos:end="2547:63"><expr pos:start="2547:29" pos:end="2547:62"><call pos:start="2547:29" pos:end="2547:62"><name pos:start="2547:29" pos:end="2547:42">neon_store_reg</name><argument_list pos:start="2547:43" pos:end="2547:62">(<argument pos:start="2547:44" pos:end="2547:45"><expr pos:start="2547:44" pos:end="2547:45"><name pos:start="2547:44" pos:end="2547:45">rd</name></expr></argument>, <argument pos:start="2547:48" pos:end="2547:55"><expr pos:start="2547:48" pos:end="2547:55"><name pos:start="2547:48" pos:end="2547:51">pass</name> <operator pos:start="2547:53" pos:end="2547:53">*</operator> <literal type="number" pos:start="2547:55" pos:end="2547:55">2</literal></expr></argument>, <argument pos:start="2547:58" pos:end="2547:61"><expr pos:start="2547:58" pos:end="2547:61"><name pos:start="2547:58" pos:end="2547:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2553:21" pos:end="2553:26">break;</break>

                <case pos:start="2555:17" pos:end="2555:37">case <expr pos:start="2555:22" pos:end="2555:36"><name pos:start="2555:22" pos:end="2555:36">NEON_2RM_VPADDL</name></expr>:</case> <case pos:start="2555:39" pos:end="2555:61">case <expr pos:start="2555:44" pos:end="2555:60"><name pos:start="2555:44" pos:end="2555:60">NEON_2RM_VPADDL_U</name></expr>:</case>

                <case pos:start="2557:17" pos:end="2557:37">case <expr pos:start="2557:22" pos:end="2557:36"><name pos:start="2557:22" pos:end="2557:36">NEON_2RM_VPADAL</name></expr>:</case> <case pos:start="2557:39" pos:end="2557:61">case <expr pos:start="2557:44" pos:end="2557:60"><name pos:start="2557:44" pos:end="2557:60">NEON_2RM_VPADAL_U</name></expr>:</case>

                    <for pos:start="2559:21" pos:end="2593:21">for <control pos:start="2559:25" pos:end="2559:56">(<init pos:start="2559:26" pos:end="2559:34"><expr pos:start="2559:26" pos:end="2559:33"><name pos:start="2559:26" pos:end="2559:29">pass</name> <operator pos:start="2559:31" pos:end="2559:31">=</operator> <literal type="number" pos:start="2559:33" pos:end="2559:33">0</literal></expr>;</init> <condition pos:start="2559:36" pos:end="2559:48"><expr pos:start="2559:36" pos:end="2559:47"><name pos:start="2559:36" pos:end="2559:39">pass</name> <operator pos:start="2559:41" pos:end="2559:41">&lt;</operator> <name pos:start="2559:43" pos:end="2559:43">q</name> <operator pos:start="2559:45" pos:end="2559:45">+</operator> <literal type="number" pos:start="2559:47" pos:end="2559:47">1</literal></expr>;</condition> <incr pos:start="2559:50" pos:end="2559:55"><expr pos:start="2559:50" pos:end="2559:55"><name pos:start="2559:50" pos:end="2559:53">pass</name><operator pos:start="2559:54" pos:end="2559:55">++</operator></expr></incr>)</control> <block pos:start="2559:58" pos:end="2593:21">{<block_content pos:start="2561:25" pos:end="2591:60">

                        <expr_stmt pos:start="2561:25" pos:end="2561:58"><expr pos:start="2561:25" pos:end="2561:57"><name pos:start="2561:25" pos:end="2561:27">tmp</name> <operator pos:start="2561:29" pos:end="2561:29">=</operator> <call pos:start="2561:31" pos:end="2561:57"><name pos:start="2561:31" pos:end="2561:43">neon_load_reg</name><argument_list pos:start="2561:44" pos:end="2561:57">(<argument pos:start="2561:45" pos:end="2561:46"><expr pos:start="2561:45" pos:end="2561:46"><name pos:start="2561:45" pos:end="2561:46">rm</name></expr></argument>, <argument pos:start="2561:49" pos:end="2561:56"><expr pos:start="2561:49" pos:end="2561:56"><name pos:start="2561:49" pos:end="2561:52">pass</name> <operator pos:start="2561:54" pos:end="2561:54">*</operator> <literal type="number" pos:start="2561:56" pos:end="2561:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2563:25" pos:end="2563:66"><expr pos:start="2563:25" pos:end="2563:65"><call pos:start="2563:25" pos:end="2563:65"><name pos:start="2563:25" pos:end="2563:38">gen_neon_widen</name><argument_list pos:start="2563:39" pos:end="2563:65">(<argument pos:start="2563:40" pos:end="2563:45"><expr pos:start="2563:40" pos:end="2563:45"><name pos:start="2563:40" pos:end="2563:45">cpu_V0</name></expr></argument>, <argument pos:start="2563:48" pos:end="2563:50"><expr pos:start="2563:48" pos:end="2563:50"><name pos:start="2563:48" pos:end="2563:50">tmp</name></expr></argument>, <argument pos:start="2563:53" pos:end="2563:56"><expr pos:start="2563:53" pos:end="2563:56"><name pos:start="2563:53" pos:end="2563:56">size</name></expr></argument>, <argument pos:start="2563:59" pos:end="2563:64"><expr pos:start="2563:59" pos:end="2563:64"><name pos:start="2563:59" pos:end="2563:60">op</name> <operator pos:start="2563:62" pos:end="2563:62">&amp;</operator> <literal type="number" pos:start="2563:64" pos:end="2563:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2565:25" pos:end="2565:62"><expr pos:start="2565:25" pos:end="2565:61"><name pos:start="2565:25" pos:end="2565:27">tmp</name> <operator pos:start="2565:29" pos:end="2565:29">=</operator> <call pos:start="2565:31" pos:end="2565:61"><name pos:start="2565:31" pos:end="2565:43">neon_load_reg</name><argument_list pos:start="2565:44" pos:end="2565:61">(<argument pos:start="2565:45" pos:end="2565:46"><expr pos:start="2565:45" pos:end="2565:46"><name pos:start="2565:45" pos:end="2565:46">rm</name></expr></argument>, <argument pos:start="2565:49" pos:end="2565:60"><expr pos:start="2565:49" pos:end="2565:60"><name pos:start="2565:49" pos:end="2565:52">pass</name> <operator pos:start="2565:54" pos:end="2565:54">*</operator> <literal type="number" pos:start="2565:56" pos:end="2565:58">2</literal> <operator pos:start="2565:58" pos:end="2565:58">+</operator> <literal type="number" pos:start="2565:60" pos:end="2565:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2567:25" pos:end="2567:66"><expr pos:start="2567:25" pos:end="2567:65"><call pos:start="2567:25" pos:end="2567:65"><name pos:start="2567:25" pos:end="2567:38">gen_neon_widen</name><argument_list pos:start="2567:39" pos:end="2567:65">(<argument pos:start="2567:40" pos:end="2567:45"><expr pos:start="2567:40" pos:end="2567:45"><name pos:start="2567:40" pos:end="2567:45">cpu_V1</name></expr></argument>, <argument pos:start="2567:48" pos:end="2567:50"><expr pos:start="2567:48" pos:end="2567:50"><name pos:start="2567:48" pos:end="2567:50">tmp</name></expr></argument>, <argument pos:start="2567:53" pos:end="2567:56"><expr pos:start="2567:53" pos:end="2567:56"><name pos:start="2567:53" pos:end="2567:56">size</name></expr></argument>, <argument pos:start="2567:59" pos:end="2567:64"><expr pos:start="2567:59" pos:end="2567:64"><name pos:start="2567:59" pos:end="2567:60">op</name> <operator pos:start="2567:62" pos:end="2567:62">&amp;</operator> <literal type="number" pos:start="2567:64" pos:end="2567:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2569:25" pos:end="2579:25">switch <condition pos:start="2569:32" pos:end="2569:37">(<expr pos:start="2569:33" pos:end="2569:36"><name pos:start="2569:33" pos:end="2569:36">size</name></expr>)</condition> <block pos:start="2569:39" pos:end="2579:25">{<block_content pos:start="2571:25" pos:end="2577:41">

                        <case pos:start="2571:25" pos:end="2571:31">case <expr pos:start="2571:30" pos:end="2571:30"><literal type="number" pos:start="2571:30" pos:end="2571:30">0</literal></expr>:</case> <expr_stmt pos:start="2571:33" pos:end="2571:68"><expr pos:start="2571:33" pos:end="2571:67"><call pos:start="2571:33" pos:end="2571:67"><name pos:start="2571:33" pos:end="2571:57">gen_helper_neon_paddl_u16</name><argument_list pos:start="2571:58" pos:end="2571:67">(<argument pos:start="2571:59" pos:end="2571:66"><expr pos:start="2571:59" pos:end="2571:66"><name pos:start="2571:59" pos:end="2571:66">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2571:70" pos:end="2571:75">break;</break>

                        <case pos:start="2573:25" pos:end="2573:31">case <expr pos:start="2573:30" pos:end="2573:30"><literal type="number" pos:start="2573:30" pos:end="2573:30">1</literal></expr>:</case> <expr_stmt pos:start="2573:33" pos:end="2573:68"><expr pos:start="2573:33" pos:end="2573:67"><call pos:start="2573:33" pos:end="2573:67"><name pos:start="2573:33" pos:end="2573:57">gen_helper_neon_paddl_u32</name><argument_list pos:start="2573:58" pos:end="2573:67">(<argument pos:start="2573:59" pos:end="2573:66"><expr pos:start="2573:59" pos:end="2573:66"><name pos:start="2573:59" pos:end="2573:66">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2573:70" pos:end="2573:75">break;</break>

                        <case pos:start="2575:25" pos:end="2575:31">case <expr pos:start="2575:30" pos:end="2575:30"><literal type="number" pos:start="2575:30" pos:end="2575:30">2</literal></expr>:</case> <expr_stmt pos:start="2575:33" pos:end="2575:58"><expr pos:start="2575:33" pos:end="2575:57"><call pos:start="2575:33" pos:end="2575:57"><name pos:start="2575:33" pos:end="2575:47">tcg_gen_add_i64</name><argument_list pos:start="2575:48" pos:end="2575:57">(<argument pos:start="2575:49" pos:end="2575:56"><expr pos:start="2575:49" pos:end="2575:56"><name pos:start="2575:49" pos:end="2575:56">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2575:60" pos:end="2575:65">break;</break>

                        <default pos:start="2577:25" pos:end="2577:32">default:</default> <expr_stmt pos:start="2577:34" pos:end="2577:41"><expr pos:start="2577:34" pos:end="2577:40"><call pos:start="2577:34" pos:end="2577:40"><name pos:start="2577:34" pos:end="2577:38">abort</name><argument_list pos:start="2577:39" pos:end="2577:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="2581:25" pos:end="2589:25"><if pos:start="2581:25" pos:end="2589:25">if <condition pos:start="2581:28" pos:end="2581:50">(<expr pos:start="2581:29" pos:end="2581:49"><name pos:start="2581:29" pos:end="2581:30">op</name> <operator pos:start="2581:32" pos:end="2581:33">&gt;=</operator> <name pos:start="2581:35" pos:end="2581:49">NEON_2RM_VPADAL</name></expr>)</condition> <block pos:start="2581:52" pos:end="2589:25">{<block_content pos:start="2585:29" pos:end="2587:48">

                            <comment type="block" pos:start="2583:29" pos:end="2583:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="2585:29" pos:end="2585:63"><expr pos:start="2585:29" pos:end="2585:62"><call pos:start="2585:29" pos:end="2585:62"><name pos:start="2585:29" pos:end="2585:43">neon_load_reg64</name><argument_list pos:start="2585:44" pos:end="2585:62">(<argument pos:start="2585:45" pos:end="2585:50"><expr pos:start="2585:45" pos:end="2585:50"><name pos:start="2585:45" pos:end="2585:50">cpu_V1</name></expr></argument>, <argument pos:start="2585:53" pos:end="2585:61"><expr pos:start="2585:53" pos:end="2585:61"><name pos:start="2585:53" pos:end="2585:54">rd</name> <operator pos:start="2585:56" pos:end="2585:56">+</operator> <name pos:start="2585:58" pos:end="2585:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2587:29" pos:end="2587:48"><expr pos:start="2587:29" pos:end="2587:47"><call pos:start="2587:29" pos:end="2587:47"><name pos:start="2587:29" pos:end="2587:41">gen_neon_addl</name><argument_list pos:start="2587:42" pos:end="2587:47">(<argument pos:start="2587:43" pos:end="2587:46"><expr pos:start="2587:43" pos:end="2587:46"><name pos:start="2587:43" pos:end="2587:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2591:25" pos:end="2591:60"><expr pos:start="2591:25" pos:end="2591:59"><call pos:start="2591:25" pos:end="2591:59"><name pos:start="2591:25" pos:end="2591:40">neon_store_reg64</name><argument_list pos:start="2591:41" pos:end="2591:59">(<argument pos:start="2591:42" pos:end="2591:47"><expr pos:start="2591:42" pos:end="2591:47"><name pos:start="2591:42" pos:end="2591:47">cpu_V0</name></expr></argument>, <argument pos:start="2591:50" pos:end="2591:58"><expr pos:start="2591:50" pos:end="2591:58"><name pos:start="2591:50" pos:end="2591:51">rd</name> <operator pos:start="2591:53" pos:end="2591:53">+</operator> <name pos:start="2591:55" pos:end="2591:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2595:21" pos:end="2595:26">break;</break>

                <case pos:start="2597:17" pos:end="2597:35">case <expr pos:start="2597:22" pos:end="2597:34"><name pos:start="2597:22" pos:end="2597:34">NEON_2RM_VTRN</name></expr>:</case>

                    <if_stmt pos:start="2599:21" pos:end="2619:21"><if pos:start="2599:21" pos:end="2615:21">if <condition pos:start="2599:24" pos:end="2599:34">(<expr pos:start="2599:25" pos:end="2599:33"><name pos:start="2599:25" pos:end="2599:28">size</name> <operator pos:start="2599:30" pos:end="2599:31">==</operator> <literal type="number" pos:start="2599:33" pos:end="2599:33">2</literal></expr>)</condition> <block pos:start="2599:36" pos:end="2615:21">{<block_content pos:start="2601:25" pos:end="2613:25">

                        <decl_stmt pos:start="2601:25" pos:end="2601:30"><decl pos:start="2601:25" pos:end="2601:29"><type pos:start="2601:25" pos:end="2601:27"><name pos:start="2601:25" pos:end="2601:27">int</name></type> <name pos:start="2601:29" pos:end="2601:29">n</name></decl>;</decl_stmt>

                        <for pos:start="2603:25" pos:end="2613:25">for <control pos:start="2603:29" pos:end="2603:60">(<init pos:start="2603:30" pos:end="2603:35"><expr pos:start="2603:30" pos:end="2603:34"><name pos:start="2603:30" pos:end="2603:30">n</name> <operator pos:start="2603:32" pos:end="2603:32">=</operator> <literal type="number" pos:start="2603:34" pos:end="2603:34">0</literal></expr>;</init> <condition pos:start="2603:37" pos:end="2603:52"><expr pos:start="2603:37" pos:end="2603:51"><name pos:start="2603:37" pos:end="2603:37">n</name> <operator pos:start="2603:39" pos:end="2603:39">&lt;</operator> <operator pos:start="2603:41" pos:end="2603:41">(</operator><ternary pos:start="2603:42" pos:end="2603:50"><condition pos:start="2603:42" pos:end="2603:44"><expr pos:start="2603:42" pos:end="2603:42"><name pos:start="2603:42" pos:end="2603:42">q</name></expr> ?</condition><then pos:start="2603:46" pos:end="2603:46"> <expr pos:start="2603:46" pos:end="2603:46"><literal type="number" pos:start="2603:46" pos:end="2603:46">4</literal></expr> </then><else pos:start="2603:48" pos:end="2603:50">: <expr pos:start="2603:50" pos:end="2603:50"><literal type="number" pos:start="2603:50" pos:end="2603:50">2</literal></expr></else></ternary><operator pos:start="2603:51" pos:end="2603:51">)</operator></expr>;</condition> <incr pos:start="2603:54" pos:end="2603:59"><expr pos:start="2603:54" pos:end="2603:59"><name pos:start="2603:54" pos:end="2603:54">n</name> <operator pos:start="2603:56" pos:end="2603:57">+=</operator> <literal type="number" pos:start="2603:59" pos:end="2603:59">2</literal></expr></incr>)</control> <block pos:start="2603:62" pos:end="2613:25">{<block_content pos:start="2605:29" pos:end="2611:59">

                            <expr_stmt pos:start="2605:29" pos:end="2605:55"><expr pos:start="2605:29" pos:end="2605:54"><name pos:start="2605:29" pos:end="2605:31">tmp</name> <operator pos:start="2605:33" pos:end="2605:33">=</operator> <call pos:start="2605:35" pos:end="2605:54"><name pos:start="2605:35" pos:end="2605:47">neon_load_reg</name><argument_list pos:start="2605:48" pos:end="2605:54">(<argument pos:start="2605:49" pos:end="2605:50"><expr pos:start="2605:49" pos:end="2605:50"><name pos:start="2605:49" pos:end="2605:50">rm</name></expr></argument>, <argument pos:start="2605:53" pos:end="2605:53"><expr pos:start="2605:53" pos:end="2605:53"><name pos:start="2605:53" pos:end="2605:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2607:29" pos:end="2607:60"><expr pos:start="2607:29" pos:end="2607:59"><name pos:start="2607:29" pos:end="2607:32">tmp2</name> <operator pos:start="2607:34" pos:end="2607:34">=</operator> <call pos:start="2607:36" pos:end="2607:59"><name pos:start="2607:36" pos:end="2607:48">neon_load_reg</name><argument_list pos:start="2607:49" pos:end="2607:59">(<argument pos:start="2607:50" pos:end="2607:51"><expr pos:start="2607:50" pos:end="2607:51"><name pos:start="2607:50" pos:end="2607:51">rd</name></expr></argument>, <argument pos:start="2607:54" pos:end="2607:58"><expr pos:start="2607:54" pos:end="2607:58"><name pos:start="2607:54" pos:end="2607:54">n</name> <operator pos:start="2607:56" pos:end="2607:56">+</operator> <literal type="number" pos:start="2607:58" pos:end="2607:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2609:29" pos:end="2609:56"><expr pos:start="2609:29" pos:end="2609:55"><call pos:start="2609:29" pos:end="2609:55"><name pos:start="2609:29" pos:end="2609:42">neon_store_reg</name><argument_list pos:start="2609:43" pos:end="2609:55">(<argument pos:start="2609:44" pos:end="2609:45"><expr pos:start="2609:44" pos:end="2609:45"><name pos:start="2609:44" pos:end="2609:45">rm</name></expr></argument>, <argument pos:start="2609:48" pos:end="2609:48"><expr pos:start="2609:48" pos:end="2609:48"><name pos:start="2609:48" pos:end="2609:48">n</name></expr></argument>, <argument pos:start="2609:51" pos:end="2609:54"><expr pos:start="2609:51" pos:end="2609:54"><name pos:start="2609:51" pos:end="2609:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2611:29" pos:end="2611:59"><expr pos:start="2611:29" pos:end="2611:58"><call pos:start="2611:29" pos:end="2611:58"><name pos:start="2611:29" pos:end="2611:42">neon_store_reg</name><argument_list pos:start="2611:43" pos:end="2611:58">(<argument pos:start="2611:44" pos:end="2611:45"><expr pos:start="2611:44" pos:end="2611:45"><name pos:start="2611:44" pos:end="2611:45">rd</name></expr></argument>, <argument pos:start="2611:48" pos:end="2611:52"><expr pos:start="2611:48" pos:end="2611:52"><name pos:start="2611:48" pos:end="2611:48">n</name> <operator pos:start="2611:50" pos:end="2611:50">+</operator> <literal type="number" pos:start="2611:52" pos:end="2611:52">1</literal></expr></argument>, <argument pos:start="2611:55" pos:end="2611:57"><expr pos:start="2611:55" pos:end="2611:57"><name pos:start="2611:55" pos:end="2611:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="2615:23" pos:end="2619:21">else <block pos:start="2615:28" pos:end="2619:21">{<block_content pos:start="2617:25" pos:end="2617:41">

                        <goto pos:start="2617:25" pos:end="2617:41">goto <name pos:start="2617:30" pos:end="2617:40">elementwise</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2621:21" pos:end="2621:26">break;</break>

                <case pos:start="2623:17" pos:end="2623:35">case <expr pos:start="2623:22" pos:end="2623:34"><name pos:start="2623:22" pos:end="2623:34">NEON_2RM_VUZP</name></expr>:</case>

                    <if_stmt pos:start="2625:21" pos:end="2629:21"><if pos:start="2625:21" pos:end="2629:21">if <condition pos:start="2625:24" pos:end="2625:56">(<expr pos:start="2625:25" pos:end="2625:55"><call pos:start="2625:25" pos:end="2625:55"><name pos:start="2625:25" pos:end="2625:38">gen_neon_unzip</name><argument_list pos:start="2625:39" pos:end="2625:55">(<argument pos:start="2625:40" pos:end="2625:41"><expr pos:start="2625:40" pos:end="2625:41"><name pos:start="2625:40" pos:end="2625:41">rd</name></expr></argument>, <argument pos:start="2625:44" pos:end="2625:45"><expr pos:start="2625:44" pos:end="2625:45"><name pos:start="2625:44" pos:end="2625:45">rm</name></expr></argument>, <argument pos:start="2625:48" pos:end="2625:51"><expr pos:start="2625:48" pos:end="2625:51"><name pos:start="2625:48" pos:end="2625:51">size</name></expr></argument>, <argument pos:start="2625:54" pos:end="2625:54"><expr pos:start="2625:54" pos:end="2625:54"><name pos:start="2625:54" pos:end="2625:54">q</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2625:58" pos:end="2629:21">{<block_content pos:start="2627:25" pos:end="2627:33">

                        <return pos:start="2627:25" pos:end="2627:33">return <expr pos:start="2627:32" pos:end="2627:32"><literal type="number" pos:start="2627:32" pos:end="2627:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="2631:21" pos:end="2631:26">break;</break>

                <case pos:start="2633:17" pos:end="2633:35">case <expr pos:start="2633:22" pos:end="2633:34"><name pos:start="2633:22" pos:end="2633:34">NEON_2RM_VZIP</name></expr>:</case>

                    <if_stmt pos:start="2635:21" pos:end="2639:21"><if pos:start="2635:21" pos:end="2639:21">if <condition pos:start="2635:24" pos:end="2635:54">(<expr pos:start="2635:25" pos:end="2635:53"><call pos:start="2635:25" pos:end="2635:53"><name pos:start="2635:25" pos:end="2635:36">gen_neon_zip</name><argument_list pos:start="2635:37" pos:end="2635:53">(<argument pos:start="2635:38" pos:end="2635:39"><expr pos:start="2635:38" pos:end="2635:39"><name pos:start="2635:38" pos:end="2635:39">rd</name></expr></argument>, <argument pos:start="2635:42" pos:end="2635:43"><expr pos:start="2635:42" pos:end="2635:43"><name pos:start="2635:42" pos:end="2635:43">rm</name></expr></argument>, <argument pos:start="2635:46" pos:end="2635:49"><expr pos:start="2635:46" pos:end="2635:49"><name pos:start="2635:46" pos:end="2635:49">size</name></expr></argument>, <argument pos:start="2635:52" pos:end="2635:52"><expr pos:start="2635:52" pos:end="2635:52"><name pos:start="2635:52" pos:end="2635:52">q</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2635:56" pos:end="2639:21">{<block_content pos:start="2637:25" pos:end="2637:33">

                        <return pos:start="2637:25" pos:end="2637:33">return <expr pos:start="2637:32" pos:end="2637:32"><literal type="number" pos:start="2637:32" pos:end="2637:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="2641:21" pos:end="2641:26">break;</break>

                <case pos:start="2643:17" pos:end="2643:36">case <expr pos:start="2643:22" pos:end="2643:35"><name pos:start="2643:22" pos:end="2643:35">NEON_2RM_VMOVN</name></expr>:</case> <case pos:start="2643:38" pos:end="2643:58">case <expr pos:start="2643:43" pos:end="2643:57"><name pos:start="2643:43" pos:end="2643:57">NEON_2RM_VQMOVN</name></expr>:</case>

                    <comment type="block" pos:start="2645:21" pos:end="2645:76">/* also VQMOVUN; op field and mnemonics don't line up */</comment>

                    <expr_stmt pos:start="2647:21" pos:end="2647:38"><expr pos:start="2647:21" pos:end="2647:37"><call pos:start="2647:21" pos:end="2647:37"><name pos:start="2647:21" pos:end="2647:31">TCGV_UNUSED</name><argument_list pos:start="2647:32" pos:end="2647:37">(<argument pos:start="2647:33" pos:end="2647:36"><expr pos:start="2647:33" pos:end="2647:36"><name pos:start="2647:33" pos:end="2647:36">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2649:21" pos:end="2671:21">for <control pos:start="2649:25" pos:end="2649:52">(<init pos:start="2649:26" pos:end="2649:34"><expr pos:start="2649:26" pos:end="2649:33"><name pos:start="2649:26" pos:end="2649:29">pass</name> <operator pos:start="2649:31" pos:end="2649:31">=</operator> <literal type="number" pos:start="2649:33" pos:end="2649:33">0</literal></expr>;</init> <condition pos:start="2649:36" pos:end="2649:44"><expr pos:start="2649:36" pos:end="2649:43"><name pos:start="2649:36" pos:end="2649:39">pass</name> <operator pos:start="2649:41" pos:end="2649:41">&lt;</operator> <literal type="number" pos:start="2649:43" pos:end="2649:43">2</literal></expr>;</condition> <incr pos:start="2649:46" pos:end="2649:51"><expr pos:start="2649:46" pos:end="2649:51"><name pos:start="2649:46" pos:end="2649:49">pass</name><operator pos:start="2649:50" pos:end="2649:51">++</operator></expr></incr>)</control> <block pos:start="2649:54" pos:end="2671:21">{<block_content pos:start="2651:25" pos:end="2669:25">

                        <expr_stmt pos:start="2651:25" pos:end="2651:59"><expr pos:start="2651:25" pos:end="2651:58"><call pos:start="2651:25" pos:end="2651:58"><name pos:start="2651:25" pos:end="2651:39">neon_load_reg64</name><argument_list pos:start="2651:40" pos:end="2651:58">(<argument pos:start="2651:41" pos:end="2651:46"><expr pos:start="2651:41" pos:end="2651:46"><name pos:start="2651:41" pos:end="2651:46">cpu_V0</name></expr></argument>, <argument pos:start="2651:49" pos:end="2651:57"><expr pos:start="2651:49" pos:end="2651:57"><name pos:start="2651:49" pos:end="2651:50">rm</name> <operator pos:start="2651:52" pos:end="2651:52">+</operator> <name pos:start="2651:54" pos:end="2651:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2653:25" pos:end="2653:49"><expr pos:start="2653:25" pos:end="2653:48"><name pos:start="2653:25" pos:end="2653:27">tmp</name> <operator pos:start="2653:29" pos:end="2653:29">=</operator> <call pos:start="2653:31" pos:end="2653:48"><name pos:start="2653:31" pos:end="2653:46">tcg_temp_new_i32</name><argument_list pos:start="2653:47" pos:end="2653:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2655:25" pos:end="2657:56"><expr pos:start="2655:25" pos:end="2657:55"><call pos:start="2655:25" pos:end="2657:55"><name pos:start="2655:25" pos:end="2655:42">gen_neon_narrow_op</name><argument_list pos:start="2655:43" pos:end="2657:55">(<argument pos:start="2655:44" pos:end="2655:63"><expr pos:start="2655:44" pos:end="2655:63"><name pos:start="2655:44" pos:end="2655:45">op</name> <operator pos:start="2655:47" pos:end="2655:48">==</operator> <name pos:start="2655:50" pos:end="2655:63">NEON_2RM_VMOVN</name></expr></argument>, <argument pos:start="2655:66" pos:end="2655:66"><expr pos:start="2655:66" pos:end="2655:66"><name pos:start="2655:66" pos:end="2655:66">q</name></expr></argument>, <argument pos:start="2655:69" pos:end="2655:72"><expr pos:start="2655:69" pos:end="2655:72"><name pos:start="2655:69" pos:end="2655:72">size</name></expr></argument>,

                                           <argument pos:start="2657:44" pos:end="2657:46"><expr pos:start="2657:44" pos:end="2657:46"><name pos:start="2657:44" pos:end="2657:46">tmp</name></expr></argument>, <argument pos:start="2657:49" pos:end="2657:54"><expr pos:start="2657:49" pos:end="2657:54"><name pos:start="2657:49" pos:end="2657:54">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2659:25" pos:end="2669:25"><if pos:start="2659:25" pos:end="2663:25">if <condition pos:start="2659:28" pos:end="2659:38">(<expr pos:start="2659:29" pos:end="2659:37"><name pos:start="2659:29" pos:end="2659:32">pass</name> <operator pos:start="2659:34" pos:end="2659:35">==</operator> <literal type="number" pos:start="2659:37" pos:end="2659:37">0</literal></expr>)</condition> <block pos:start="2659:40" pos:end="2663:25">{<block_content pos:start="2661:29" pos:end="2661:39">

                            <expr_stmt pos:start="2661:29" pos:end="2661:39"><expr pos:start="2661:29" pos:end="2661:38"><name pos:start="2661:29" pos:end="2661:32">tmp2</name> <operator pos:start="2661:34" pos:end="2661:34">=</operator> <name pos:start="2661:36" pos:end="2661:38">tmp</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2663:27" pos:end="2669:25">else <block pos:start="2663:32" pos:end="2669:25">{<block_content pos:start="2665:29" pos:end="2667:55">

                            <expr_stmt pos:start="2665:29" pos:end="2665:56"><expr pos:start="2665:29" pos:end="2665:55"><call pos:start="2665:29" pos:end="2665:55"><name pos:start="2665:29" pos:end="2665:42">neon_store_reg</name><argument_list pos:start="2665:43" pos:end="2665:55">(<argument pos:start="2665:44" pos:end="2665:45"><expr pos:start="2665:44" pos:end="2665:45"><name pos:start="2665:44" pos:end="2665:45">rd</name></expr></argument>, <argument pos:start="2665:48" pos:end="2665:48"><expr pos:start="2665:48" pos:end="2665:48"><literal type="number" pos:start="2665:48" pos:end="2665:48">0</literal></expr></argument>, <argument pos:start="2665:51" pos:end="2665:54"><expr pos:start="2665:51" pos:end="2665:54"><name pos:start="2665:51" pos:end="2665:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2667:29" pos:end="2667:55"><expr pos:start="2667:29" pos:end="2667:54"><call pos:start="2667:29" pos:end="2667:54"><name pos:start="2667:29" pos:end="2667:42">neon_store_reg</name><argument_list pos:start="2667:43" pos:end="2667:54">(<argument pos:start="2667:44" pos:end="2667:45"><expr pos:start="2667:44" pos:end="2667:45"><name pos:start="2667:44" pos:end="2667:45">rd</name></expr></argument>, <argument pos:start="2667:48" pos:end="2667:48"><expr pos:start="2667:48" pos:end="2667:48"><literal type="number" pos:start="2667:48" pos:end="2667:48">1</literal></expr></argument>, <argument pos:start="2667:51" pos:end="2667:53"><expr pos:start="2667:51" pos:end="2667:53"><name pos:start="2667:51" pos:end="2667:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2673:21" pos:end="2673:26">break;</break>

                <case pos:start="2675:17" pos:end="2675:36">case <expr pos:start="2675:22" pos:end="2675:35"><name pos:start="2675:22" pos:end="2675:35">NEON_2RM_VSHLL</name></expr>:</case>

                    <if_stmt pos:start="2677:21" pos:end="2681:21"><if pos:start="2677:21" pos:end="2681:21">if <condition pos:start="2677:24" pos:end="2677:26">(<expr pos:start="2677:25" pos:end="2677:25"><name pos:start="2677:25" pos:end="2677:25">q</name></expr>)</condition> <block pos:start="2677:28" pos:end="2681:21">{<block_content pos:start="2679:25" pos:end="2679:33">

                        <return pos:start="2679:25" pos:end="2679:33">return <expr pos:start="2679:32" pos:end="2679:32"><literal type="number" pos:start="2679:32" pos:end="2679:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2683:21" pos:end="2683:47"><expr pos:start="2683:21" pos:end="2683:46"><name pos:start="2683:21" pos:end="2683:23">tmp</name> <operator pos:start="2683:25" pos:end="2683:25">=</operator> <call pos:start="2683:27" pos:end="2683:46"><name pos:start="2683:27" pos:end="2683:39">neon_load_reg</name><argument_list pos:start="2683:40" pos:end="2683:46">(<argument pos:start="2683:41" pos:end="2683:42"><expr pos:start="2683:41" pos:end="2683:42"><name pos:start="2683:41" pos:end="2683:42">rm</name></expr></argument>, <argument pos:start="2683:45" pos:end="2683:45"><expr pos:start="2683:45" pos:end="2683:45"><literal type="number" pos:start="2683:45" pos:end="2683:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2685:21" pos:end="2685:48"><expr pos:start="2685:21" pos:end="2685:47"><name pos:start="2685:21" pos:end="2685:24">tmp2</name> <operator pos:start="2685:26" pos:end="2685:26">=</operator> <call pos:start="2685:28" pos:end="2685:47"><name pos:start="2685:28" pos:end="2685:40">neon_load_reg</name><argument_list pos:start="2685:41" pos:end="2685:47">(<argument pos:start="2685:42" pos:end="2685:43"><expr pos:start="2685:42" pos:end="2685:43"><name pos:start="2685:42" pos:end="2685:43">rm</name></expr></argument>, <argument pos:start="2685:46" pos:end="2685:46"><expr pos:start="2685:46" pos:end="2685:46"><literal type="number" pos:start="2685:46" pos:end="2685:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2687:21" pos:end="2699:21">for <control pos:start="2687:25" pos:end="2687:52">(<init pos:start="2687:26" pos:end="2687:34"><expr pos:start="2687:26" pos:end="2687:33"><name pos:start="2687:26" pos:end="2687:29">pass</name> <operator pos:start="2687:31" pos:end="2687:31">=</operator> <literal type="number" pos:start="2687:33" pos:end="2687:33">0</literal></expr>;</init> <condition pos:start="2687:36" pos:end="2687:44"><expr pos:start="2687:36" pos:end="2687:43"><name pos:start="2687:36" pos:end="2687:39">pass</name> <operator pos:start="2687:41" pos:end="2687:41">&lt;</operator> <literal type="number" pos:start="2687:43" pos:end="2687:43">2</literal></expr>;</condition> <incr pos:start="2687:46" pos:end="2687:51"><expr pos:start="2687:46" pos:end="2687:51"><name pos:start="2687:46" pos:end="2687:49">pass</name><operator pos:start="2687:50" pos:end="2687:51">++</operator></expr></incr>)</control> <block pos:start="2687:54" pos:end="2699:21">{<block_content pos:start="2689:25" pos:end="2697:60">

                        <if_stmt pos:start="2689:25" pos:end="2691:39"><if pos:start="2689:25" pos:end="2691:39">if <condition pos:start="2689:28" pos:end="2689:38">(<expr pos:start="2689:29" pos:end="2689:37"><name pos:start="2689:29" pos:end="2689:32">pass</name> <operator pos:start="2689:34" pos:end="2689:35">==</operator> <literal type="number" pos:start="2689:37" pos:end="2689:37">1</literal></expr>)</condition><block type="pseudo" pos:start="2691:29" pos:end="2691:39"><block_content pos:start="2691:29" pos:end="2691:39">

                            <expr_stmt pos:start="2691:29" pos:end="2691:39"><expr pos:start="2691:29" pos:end="2691:38"><name pos:start="2691:29" pos:end="2691:31">tmp</name> <operator pos:start="2691:33" pos:end="2691:33">=</operator> <name pos:start="2691:35" pos:end="2691:38">tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="2693:25" pos:end="2693:61"><expr pos:start="2693:25" pos:end="2693:60"><call pos:start="2693:25" pos:end="2693:60"><name pos:start="2693:25" pos:end="2693:38">gen_neon_widen</name><argument_list pos:start="2693:39" pos:end="2693:60">(<argument pos:start="2693:40" pos:end="2693:45"><expr pos:start="2693:40" pos:end="2693:45"><name pos:start="2693:40" pos:end="2693:45">cpu_V0</name></expr></argument>, <argument pos:start="2693:48" pos:end="2693:50"><expr pos:start="2693:48" pos:end="2693:50"><name pos:start="2693:48" pos:end="2693:50">tmp</name></expr></argument>, <argument pos:start="2693:53" pos:end="2693:56"><expr pos:start="2693:53" pos:end="2693:56"><name pos:start="2693:53" pos:end="2693:56">size</name></expr></argument>, <argument pos:start="2693:59" pos:end="2693:59"><expr pos:start="2693:59" pos:end="2693:59"><literal type="number" pos:start="2693:59" pos:end="2693:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2695:25" pos:end="2695:68"><expr pos:start="2695:25" pos:end="2695:67"><call pos:start="2695:25" pos:end="2695:67"><name pos:start="2695:25" pos:end="2695:40">tcg_gen_shli_i64</name><argument_list pos:start="2695:41" pos:end="2695:67">(<argument pos:start="2695:42" pos:end="2695:47"><expr pos:start="2695:42" pos:end="2695:47"><name pos:start="2695:42" pos:end="2695:47">cpu_V0</name></expr></argument>, <argument pos:start="2695:50" pos:end="2695:55"><expr pos:start="2695:50" pos:end="2695:55"><name pos:start="2695:50" pos:end="2695:55">cpu_V0</name></expr></argument>, <argument pos:start="2695:58" pos:end="2695:66"><expr pos:start="2695:58" pos:end="2695:66"><literal type="number" pos:start="2695:58" pos:end="2695:58">8</literal> <operator pos:start="2695:60" pos:end="2695:61">&lt;&lt;</operator> <name pos:start="2695:63" pos:end="2695:66">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2697:25" pos:end="2697:60"><expr pos:start="2697:25" pos:end="2697:59"><call pos:start="2697:25" pos:end="2697:59"><name pos:start="2697:25" pos:end="2697:40">neon_store_reg64</name><argument_list pos:start="2697:41" pos:end="2697:59">(<argument pos:start="2697:42" pos:end="2697:47"><expr pos:start="2697:42" pos:end="2697:47"><name pos:start="2697:42" pos:end="2697:47">cpu_V0</name></expr></argument>, <argument pos:start="2697:50" pos:end="2697:58"><expr pos:start="2697:50" pos:end="2697:58"><name pos:start="2697:50" pos:end="2697:51">rd</name> <operator pos:start="2697:53" pos:end="2697:53">+</operator> <name pos:start="2697:55" pos:end="2697:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2701:21" pos:end="2701:26">break;</break>

                <case pos:start="2703:17" pos:end="2703:43">case <expr pos:start="2703:22" pos:end="2703:42"><name pos:start="2703:22" pos:end="2703:42">NEON_2RM_VCVT_F16_F32</name></expr>:</case>

                    <if_stmt pos:start="2705:21" pos:end="2707:31"><if pos:start="2705:21" pos:end="2707:31">if <condition pos:start="2705:24" pos:end="2705:64">(<expr pos:start="2705:25" pos:end="2705:63"><operator pos:start="2705:25" pos:end="2705:25">!</operator><call pos:start="2705:26" pos:end="2705:63"><name pos:start="2705:26" pos:end="2705:36">arm_feature</name><argument_list pos:start="2705:37" pos:end="2705:63">(<argument pos:start="2705:38" pos:end="2705:40"><expr pos:start="2705:38" pos:end="2705:40"><name pos:start="2705:38" pos:end="2705:40">env</name></expr></argument>, <argument pos:start="2705:43" pos:end="2705:62"><expr pos:start="2705:43" pos:end="2705:62"><name pos:start="2705:43" pos:end="2705:62">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2707:23" pos:end="2707:31"><block_content pos:start="2707:23" pos:end="2707:31">

                      <return pos:start="2707:23" pos:end="2707:31">return <expr pos:start="2707:30" pos:end="2707:30"><literal type="number" pos:start="2707:30" pos:end="2707:30">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2709:21" pos:end="2709:45"><expr pos:start="2709:21" pos:end="2709:44"><name pos:start="2709:21" pos:end="2709:23">tmp</name> <operator pos:start="2709:25" pos:end="2709:25">=</operator> <call pos:start="2709:27" pos:end="2709:44"><name pos:start="2709:27" pos:end="2709:42">tcg_temp_new_i32</name><argument_list pos:start="2709:43" pos:end="2709:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2711:21" pos:end="2711:46"><expr pos:start="2711:21" pos:end="2711:45"><name pos:start="2711:21" pos:end="2711:24">tmp2</name> <operator pos:start="2711:26" pos:end="2711:26">=</operator> <call pos:start="2711:28" pos:end="2711:45"><name pos:start="2711:28" pos:end="2711:43">tcg_temp_new_i32</name><argument_list pos:start="2711:44" pos:end="2711:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2713:21" pos:end="2713:77"><expr pos:start="2713:21" pos:end="2713:76"><call pos:start="2713:21" pos:end="2713:76"><name pos:start="2713:21" pos:end="2713:34">tcg_gen_ld_f32</name><argument_list pos:start="2713:35" pos:end="2713:76">(<argument pos:start="2713:36" pos:end="2713:42"><expr pos:start="2713:36" pos:end="2713:42"><name pos:start="2713:36" pos:end="2713:42">cpu_F0s</name></expr></argument>, <argument pos:start="2713:45" pos:end="2713:51"><expr pos:start="2713:45" pos:end="2713:51"><name pos:start="2713:45" pos:end="2713:51">cpu_env</name></expr></argument>, <argument pos:start="2713:54" pos:end="2713:75"><expr pos:start="2713:54" pos:end="2713:75"><call pos:start="2713:54" pos:end="2713:75"><name pos:start="2713:54" pos:end="2713:68">neon_reg_offset</name><argument_list pos:start="2713:69" pos:end="2713:75">(<argument pos:start="2713:70" pos:end="2713:71"><expr pos:start="2713:70" pos:end="2713:71"><name pos:start="2713:70" pos:end="2713:71">rm</name></expr></argument>, <argument pos:start="2713:74" pos:end="2713:74"><expr pos:start="2713:74" pos:end="2713:74"><literal type="number" pos:start="2713:74" pos:end="2713:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2715:21" pos:end="2715:75"><expr pos:start="2715:21" pos:end="2715:74"><call pos:start="2715:21" pos:end="2715:74"><name pos:start="2715:21" pos:end="2715:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="2715:52" pos:end="2715:74">(<argument pos:start="2715:53" pos:end="2715:55"><expr pos:start="2715:53" pos:end="2715:55"><name pos:start="2715:53" pos:end="2715:55">tmp</name></expr></argument>, <argument pos:start="2715:58" pos:end="2715:64"><expr pos:start="2715:58" pos:end="2715:64"><name pos:start="2715:58" pos:end="2715:64">cpu_F0s</name></expr></argument>, <argument pos:start="2715:67" pos:end="2715:73"><expr pos:start="2715:67" pos:end="2715:73"><name pos:start="2715:67" pos:end="2715:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2717:21" pos:end="2717:77"><expr pos:start="2717:21" pos:end="2717:76"><call pos:start="2717:21" pos:end="2717:76"><name pos:start="2717:21" pos:end="2717:34">tcg_gen_ld_f32</name><argument_list pos:start="2717:35" pos:end="2717:76">(<argument pos:start="2717:36" pos:end="2717:42"><expr pos:start="2717:36" pos:end="2717:42"><name pos:start="2717:36" pos:end="2717:42">cpu_F0s</name></expr></argument>, <argument pos:start="2717:45" pos:end="2717:51"><expr pos:start="2717:45" pos:end="2717:51"><name pos:start="2717:45" pos:end="2717:51">cpu_env</name></expr></argument>, <argument pos:start="2717:54" pos:end="2717:75"><expr pos:start="2717:54" pos:end="2717:75"><call pos:start="2717:54" pos:end="2717:75"><name pos:start="2717:54" pos:end="2717:68">neon_reg_offset</name><argument_list pos:start="2717:69" pos:end="2717:75">(<argument pos:start="2717:70" pos:end="2717:71"><expr pos:start="2717:70" pos:end="2717:71"><name pos:start="2717:70" pos:end="2717:71">rm</name></expr></argument>, <argument pos:start="2717:74" pos:end="2717:74"><expr pos:start="2717:74" pos:end="2717:74"><literal type="number" pos:start="2717:74" pos:end="2717:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2719:21" pos:end="2719:76"><expr pos:start="2719:21" pos:end="2719:75"><call pos:start="2719:21" pos:end="2719:75"><name pos:start="2719:21" pos:end="2719:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="2719:52" pos:end="2719:75">(<argument pos:start="2719:53" pos:end="2719:56"><expr pos:start="2719:53" pos:end="2719:56"><name pos:start="2719:53" pos:end="2719:56">tmp2</name></expr></argument>, <argument pos:start="2719:59" pos:end="2719:65"><expr pos:start="2719:59" pos:end="2719:65"><name pos:start="2719:59" pos:end="2719:65">cpu_F0s</name></expr></argument>, <argument pos:start="2719:68" pos:end="2719:74"><expr pos:start="2719:68" pos:end="2719:74"><name pos:start="2719:68" pos:end="2719:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2721:21" pos:end="2721:53"><expr pos:start="2721:21" pos:end="2721:52"><call pos:start="2721:21" pos:end="2721:52"><name pos:start="2721:21" pos:end="2721:36">tcg_gen_shli_i32</name><argument_list pos:start="2721:37" pos:end="2721:52">(<argument pos:start="2721:38" pos:end="2721:41"><expr pos:start="2721:38" pos:end="2721:41"><name pos:start="2721:38" pos:end="2721:41">tmp2</name></expr></argument>, <argument pos:start="2721:44" pos:end="2721:47"><expr pos:start="2721:44" pos:end="2721:47"><name pos:start="2721:44" pos:end="2721:47">tmp2</name></expr></argument>, <argument pos:start="2721:50" pos:end="2721:51"><expr pos:start="2721:50" pos:end="2721:51"><literal type="number" pos:start="2721:50" pos:end="2721:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2723:21" pos:end="2723:52"><expr pos:start="2723:21" pos:end="2723:51"><call pos:start="2723:21" pos:end="2723:51"><name pos:start="2723:21" pos:end="2723:34">tcg_gen_or_i32</name><argument_list pos:start="2723:35" pos:end="2723:51">(<argument pos:start="2723:36" pos:end="2723:39"><expr pos:start="2723:36" pos:end="2723:39"><name pos:start="2723:36" pos:end="2723:39">tmp2</name></expr></argument>, <argument pos:start="2723:42" pos:end="2723:45"><expr pos:start="2723:42" pos:end="2723:45"><name pos:start="2723:42" pos:end="2723:45">tmp2</name></expr></argument>, <argument pos:start="2723:48" pos:end="2723:50"><expr pos:start="2723:48" pos:end="2723:50"><name pos:start="2723:48" pos:end="2723:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2725:21" pos:end="2725:77"><expr pos:start="2725:21" pos:end="2725:76"><call pos:start="2725:21" pos:end="2725:76"><name pos:start="2725:21" pos:end="2725:34">tcg_gen_ld_f32</name><argument_list pos:start="2725:35" pos:end="2725:76">(<argument pos:start="2725:36" pos:end="2725:42"><expr pos:start="2725:36" pos:end="2725:42"><name pos:start="2725:36" pos:end="2725:42">cpu_F0s</name></expr></argument>, <argument pos:start="2725:45" pos:end="2725:51"><expr pos:start="2725:45" pos:end="2725:51"><name pos:start="2725:45" pos:end="2725:51">cpu_env</name></expr></argument>, <argument pos:start="2725:54" pos:end="2725:75"><expr pos:start="2725:54" pos:end="2725:75"><call pos:start="2725:54" pos:end="2725:75"><name pos:start="2725:54" pos:end="2725:68">neon_reg_offset</name><argument_list pos:start="2725:69" pos:end="2725:75">(<argument pos:start="2725:70" pos:end="2725:71"><expr pos:start="2725:70" pos:end="2725:71"><name pos:start="2725:70" pos:end="2725:71">rm</name></expr></argument>, <argument pos:start="2725:74" pos:end="2725:74"><expr pos:start="2725:74" pos:end="2725:74"><literal type="number" pos:start="2725:74" pos:end="2725:74">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2727:21" pos:end="2727:75"><expr pos:start="2727:21" pos:end="2727:74"><call pos:start="2727:21" pos:end="2727:74"><name pos:start="2727:21" pos:end="2727:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="2727:52" pos:end="2727:74">(<argument pos:start="2727:53" pos:end="2727:55"><expr pos:start="2727:53" pos:end="2727:55"><name pos:start="2727:53" pos:end="2727:55">tmp</name></expr></argument>, <argument pos:start="2727:58" pos:end="2727:64"><expr pos:start="2727:58" pos:end="2727:64"><name pos:start="2727:58" pos:end="2727:64">cpu_F0s</name></expr></argument>, <argument pos:start="2727:67" pos:end="2727:73"><expr pos:start="2727:67" pos:end="2727:73"><name pos:start="2727:67" pos:end="2727:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2729:21" pos:end="2729:77"><expr pos:start="2729:21" pos:end="2729:76"><call pos:start="2729:21" pos:end="2729:76"><name pos:start="2729:21" pos:end="2729:34">tcg_gen_ld_f32</name><argument_list pos:start="2729:35" pos:end="2729:76">(<argument pos:start="2729:36" pos:end="2729:42"><expr pos:start="2729:36" pos:end="2729:42"><name pos:start="2729:36" pos:end="2729:42">cpu_F0s</name></expr></argument>, <argument pos:start="2729:45" pos:end="2729:51"><expr pos:start="2729:45" pos:end="2729:51"><name pos:start="2729:45" pos:end="2729:51">cpu_env</name></expr></argument>, <argument pos:start="2729:54" pos:end="2729:75"><expr pos:start="2729:54" pos:end="2729:75"><call pos:start="2729:54" pos:end="2729:75"><name pos:start="2729:54" pos:end="2729:68">neon_reg_offset</name><argument_list pos:start="2729:69" pos:end="2729:75">(<argument pos:start="2729:70" pos:end="2729:71"><expr pos:start="2729:70" pos:end="2729:71"><name pos:start="2729:70" pos:end="2729:71">rm</name></expr></argument>, <argument pos:start="2729:74" pos:end="2729:74"><expr pos:start="2729:74" pos:end="2729:74"><literal type="number" pos:start="2729:74" pos:end="2729:74">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2731:21" pos:end="2731:48"><expr pos:start="2731:21" pos:end="2731:47"><call pos:start="2731:21" pos:end="2731:47"><name pos:start="2731:21" pos:end="2731:34">neon_store_reg</name><argument_list pos:start="2731:35" pos:end="2731:47">(<argument pos:start="2731:36" pos:end="2731:37"><expr pos:start="2731:36" pos:end="2731:37"><name pos:start="2731:36" pos:end="2731:37">rd</name></expr></argument>, <argument pos:start="2731:40" pos:end="2731:40"><expr pos:start="2731:40" pos:end="2731:40"><literal type="number" pos:start="2731:40" pos:end="2731:40">0</literal></expr></argument>, <argument pos:start="2731:43" pos:end="2731:46"><expr pos:start="2731:43" pos:end="2731:46"><name pos:start="2731:43" pos:end="2731:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2733:21" pos:end="2733:46"><expr pos:start="2733:21" pos:end="2733:45"><name pos:start="2733:21" pos:end="2733:24">tmp2</name> <operator pos:start="2733:26" pos:end="2733:26">=</operator> <call pos:start="2733:28" pos:end="2733:45"><name pos:start="2733:28" pos:end="2733:43">tcg_temp_new_i32</name><argument_list pos:start="2733:44" pos:end="2733:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2735:21" pos:end="2735:76"><expr pos:start="2735:21" pos:end="2735:75"><call pos:start="2735:21" pos:end="2735:75"><name pos:start="2735:21" pos:end="2735:51">gen_helper_neon_fcvt_f32_to_f16</name><argument_list pos:start="2735:52" pos:end="2735:75">(<argument pos:start="2735:53" pos:end="2735:56"><expr pos:start="2735:53" pos:end="2735:56"><name pos:start="2735:53" pos:end="2735:56">tmp2</name></expr></argument>, <argument pos:start="2735:59" pos:end="2735:65"><expr pos:start="2735:59" pos:end="2735:65"><name pos:start="2735:59" pos:end="2735:65">cpu_F0s</name></expr></argument>, <argument pos:start="2735:68" pos:end="2735:74"><expr pos:start="2735:68" pos:end="2735:74"><name pos:start="2735:68" pos:end="2735:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2737:21" pos:end="2737:53"><expr pos:start="2737:21" pos:end="2737:52"><call pos:start="2737:21" pos:end="2737:52"><name pos:start="2737:21" pos:end="2737:36">tcg_gen_shli_i32</name><argument_list pos:start="2737:37" pos:end="2737:52">(<argument pos:start="2737:38" pos:end="2737:41"><expr pos:start="2737:38" pos:end="2737:41"><name pos:start="2737:38" pos:end="2737:41">tmp2</name></expr></argument>, <argument pos:start="2737:44" pos:end="2737:47"><expr pos:start="2737:44" pos:end="2737:47"><name pos:start="2737:44" pos:end="2737:47">tmp2</name></expr></argument>, <argument pos:start="2737:50" pos:end="2737:51"><expr pos:start="2737:50" pos:end="2737:51"><literal type="number" pos:start="2737:50" pos:end="2737:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2739:21" pos:end="2739:52"><expr pos:start="2739:21" pos:end="2739:51"><call pos:start="2739:21" pos:end="2739:51"><name pos:start="2739:21" pos:end="2739:34">tcg_gen_or_i32</name><argument_list pos:start="2739:35" pos:end="2739:51">(<argument pos:start="2739:36" pos:end="2739:39"><expr pos:start="2739:36" pos:end="2739:39"><name pos:start="2739:36" pos:end="2739:39">tmp2</name></expr></argument>, <argument pos:start="2739:42" pos:end="2739:45"><expr pos:start="2739:42" pos:end="2739:45"><name pos:start="2739:42" pos:end="2739:45">tmp2</name></expr></argument>, <argument pos:start="2739:48" pos:end="2739:50"><expr pos:start="2739:48" pos:end="2739:50"><name pos:start="2739:48" pos:end="2739:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2741:21" pos:end="2741:48"><expr pos:start="2741:21" pos:end="2741:47"><call pos:start="2741:21" pos:end="2741:47"><name pos:start="2741:21" pos:end="2741:34">neon_store_reg</name><argument_list pos:start="2741:35" pos:end="2741:47">(<argument pos:start="2741:36" pos:end="2741:37"><expr pos:start="2741:36" pos:end="2741:37"><name pos:start="2741:36" pos:end="2741:37">rd</name></expr></argument>, <argument pos:start="2741:40" pos:end="2741:40"><expr pos:start="2741:40" pos:end="2741:40"><literal type="number" pos:start="2741:40" pos:end="2741:40">1</literal></expr></argument>, <argument pos:start="2741:43" pos:end="2741:46"><expr pos:start="2741:43" pos:end="2741:46"><name pos:start="2741:43" pos:end="2741:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2743:21" pos:end="2743:43"><expr pos:start="2743:21" pos:end="2743:42"><call pos:start="2743:21" pos:end="2743:42"><name pos:start="2743:21" pos:end="2743:37">tcg_temp_free_i32</name><argument_list pos:start="2743:38" pos:end="2743:42">(<argument pos:start="2743:39" pos:end="2743:41"><expr pos:start="2743:39" pos:end="2743:41"><name pos:start="2743:39" pos:end="2743:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2745:21" pos:end="2745:26">break;</break>

                <case pos:start="2747:17" pos:end="2747:43">case <expr pos:start="2747:22" pos:end="2747:42"><name pos:start="2747:22" pos:end="2747:42">NEON_2RM_VCVT_F32_F16</name></expr>:</case>

                    <if_stmt pos:start="2749:21" pos:end="2751:31"><if pos:start="2749:21" pos:end="2751:31">if <condition pos:start="2749:24" pos:end="2749:64">(<expr pos:start="2749:25" pos:end="2749:63"><operator pos:start="2749:25" pos:end="2749:25">!</operator><call pos:start="2749:26" pos:end="2749:63"><name pos:start="2749:26" pos:end="2749:36">arm_feature</name><argument_list pos:start="2749:37" pos:end="2749:63">(<argument pos:start="2749:38" pos:end="2749:40"><expr pos:start="2749:38" pos:end="2749:40"><name pos:start="2749:38" pos:end="2749:40">env</name></expr></argument>, <argument pos:start="2749:43" pos:end="2749:62"><expr pos:start="2749:43" pos:end="2749:62"><name pos:start="2749:43" pos:end="2749:62">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2751:23" pos:end="2751:31"><block_content pos:start="2751:23" pos:end="2751:31">

                      <return pos:start="2751:23" pos:end="2751:31">return <expr pos:start="2751:30" pos:end="2751:30"><literal type="number" pos:start="2751:30" pos:end="2751:30">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2753:21" pos:end="2753:46"><expr pos:start="2753:21" pos:end="2753:45"><name pos:start="2753:21" pos:end="2753:24">tmp3</name> <operator pos:start="2753:26" pos:end="2753:26">=</operator> <call pos:start="2753:28" pos:end="2753:45"><name pos:start="2753:28" pos:end="2753:43">tcg_temp_new_i32</name><argument_list pos:start="2753:44" pos:end="2753:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2755:21" pos:end="2755:47"><expr pos:start="2755:21" pos:end="2755:46"><name pos:start="2755:21" pos:end="2755:23">tmp</name> <operator pos:start="2755:25" pos:end="2755:25">=</operator> <call pos:start="2755:27" pos:end="2755:46"><name pos:start="2755:27" pos:end="2755:39">neon_load_reg</name><argument_list pos:start="2755:40" pos:end="2755:46">(<argument pos:start="2755:41" pos:end="2755:42"><expr pos:start="2755:41" pos:end="2755:42"><name pos:start="2755:41" pos:end="2755:42">rm</name></expr></argument>, <argument pos:start="2755:45" pos:end="2755:45"><expr pos:start="2755:45" pos:end="2755:45"><literal type="number" pos:start="2755:45" pos:end="2755:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2757:21" pos:end="2757:48"><expr pos:start="2757:21" pos:end="2757:47"><name pos:start="2757:21" pos:end="2757:24">tmp2</name> <operator pos:start="2757:26" pos:end="2757:26">=</operator> <call pos:start="2757:28" pos:end="2757:47"><name pos:start="2757:28" pos:end="2757:40">neon_load_reg</name><argument_list pos:start="2757:41" pos:end="2757:47">(<argument pos:start="2757:42" pos:end="2757:43"><expr pos:start="2757:42" pos:end="2757:43"><name pos:start="2757:42" pos:end="2757:43">rm</name></expr></argument>, <argument pos:start="2757:46" pos:end="2757:46"><expr pos:start="2757:46" pos:end="2757:46"><literal type="number" pos:start="2757:46" pos:end="2757:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2759:21" pos:end="2759:50"><expr pos:start="2759:21" pos:end="2759:49"><call pos:start="2759:21" pos:end="2759:49"><name pos:start="2759:21" pos:end="2759:38">tcg_gen_ext16u_i32</name><argument_list pos:start="2759:39" pos:end="2759:49">(<argument pos:start="2759:40" pos:end="2759:43"><expr pos:start="2759:40" pos:end="2759:43"><name pos:start="2759:40" pos:end="2759:43">tmp3</name></expr></argument>, <argument pos:start="2759:46" pos:end="2759:48"><expr pos:start="2759:46" pos:end="2759:48"><name pos:start="2759:46" pos:end="2759:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2761:21" pos:end="2761:76"><expr pos:start="2761:21" pos:end="2761:75"><call pos:start="2761:21" pos:end="2761:75"><name pos:start="2761:21" pos:end="2761:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="2761:52" pos:end="2761:75">(<argument pos:start="2761:53" pos:end="2761:59"><expr pos:start="2761:53" pos:end="2761:59"><name pos:start="2761:53" pos:end="2761:59">cpu_F0s</name></expr></argument>, <argument pos:start="2761:62" pos:end="2761:65"><expr pos:start="2761:62" pos:end="2761:65"><name pos:start="2761:62" pos:end="2761:65">tmp3</name></expr></argument>, <argument pos:start="2761:68" pos:end="2761:74"><expr pos:start="2761:68" pos:end="2761:74"><name pos:start="2761:68" pos:end="2761:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2763:21" pos:end="2763:77"><expr pos:start="2763:21" pos:end="2763:76"><call pos:start="2763:21" pos:end="2763:76"><name pos:start="2763:21" pos:end="2763:34">tcg_gen_st_f32</name><argument_list pos:start="2763:35" pos:end="2763:76">(<argument pos:start="2763:36" pos:end="2763:42"><expr pos:start="2763:36" pos:end="2763:42"><name pos:start="2763:36" pos:end="2763:42">cpu_F0s</name></expr></argument>, <argument pos:start="2763:45" pos:end="2763:51"><expr pos:start="2763:45" pos:end="2763:51"><name pos:start="2763:45" pos:end="2763:51">cpu_env</name></expr></argument>, <argument pos:start="2763:54" pos:end="2763:75"><expr pos:start="2763:54" pos:end="2763:75"><call pos:start="2763:54" pos:end="2763:75"><name pos:start="2763:54" pos:end="2763:68">neon_reg_offset</name><argument_list pos:start="2763:69" pos:end="2763:75">(<argument pos:start="2763:70" pos:end="2763:71"><expr pos:start="2763:70" pos:end="2763:71"><name pos:start="2763:70" pos:end="2763:71">rd</name></expr></argument>, <argument pos:start="2763:74" pos:end="2763:74"><expr pos:start="2763:74" pos:end="2763:74"><literal type="number" pos:start="2763:74" pos:end="2763:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2765:21" pos:end="2765:52"><expr pos:start="2765:21" pos:end="2765:51"><call pos:start="2765:21" pos:end="2765:51"><name pos:start="2765:21" pos:end="2765:36">tcg_gen_shri_i32</name><argument_list pos:start="2765:37" pos:end="2765:51">(<argument pos:start="2765:38" pos:end="2765:41"><expr pos:start="2765:38" pos:end="2765:41"><name pos:start="2765:38" pos:end="2765:41">tmp3</name></expr></argument>, <argument pos:start="2765:44" pos:end="2765:46"><expr pos:start="2765:44" pos:end="2765:46"><name pos:start="2765:44" pos:end="2765:46">tmp</name></expr></argument>, <argument pos:start="2765:49" pos:end="2765:50"><expr pos:start="2765:49" pos:end="2765:50"><literal type="number" pos:start="2765:49" pos:end="2765:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2767:21" pos:end="2767:76"><expr pos:start="2767:21" pos:end="2767:75"><call pos:start="2767:21" pos:end="2767:75"><name pos:start="2767:21" pos:end="2767:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="2767:52" pos:end="2767:75">(<argument pos:start="2767:53" pos:end="2767:59"><expr pos:start="2767:53" pos:end="2767:59"><name pos:start="2767:53" pos:end="2767:59">cpu_F0s</name></expr></argument>, <argument pos:start="2767:62" pos:end="2767:65"><expr pos:start="2767:62" pos:end="2767:65"><name pos:start="2767:62" pos:end="2767:65">tmp3</name></expr></argument>, <argument pos:start="2767:68" pos:end="2767:74"><expr pos:start="2767:68" pos:end="2767:74"><name pos:start="2767:68" pos:end="2767:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2769:21" pos:end="2769:77"><expr pos:start="2769:21" pos:end="2769:76"><call pos:start="2769:21" pos:end="2769:76"><name pos:start="2769:21" pos:end="2769:34">tcg_gen_st_f32</name><argument_list pos:start="2769:35" pos:end="2769:76">(<argument pos:start="2769:36" pos:end="2769:42"><expr pos:start="2769:36" pos:end="2769:42"><name pos:start="2769:36" pos:end="2769:42">cpu_F0s</name></expr></argument>, <argument pos:start="2769:45" pos:end="2769:51"><expr pos:start="2769:45" pos:end="2769:51"><name pos:start="2769:45" pos:end="2769:51">cpu_env</name></expr></argument>, <argument pos:start="2769:54" pos:end="2769:75"><expr pos:start="2769:54" pos:end="2769:75"><call pos:start="2769:54" pos:end="2769:75"><name pos:start="2769:54" pos:end="2769:68">neon_reg_offset</name><argument_list pos:start="2769:69" pos:end="2769:75">(<argument pos:start="2769:70" pos:end="2769:71"><expr pos:start="2769:70" pos:end="2769:71"><name pos:start="2769:70" pos:end="2769:71">rd</name></expr></argument>, <argument pos:start="2769:74" pos:end="2769:74"><expr pos:start="2769:74" pos:end="2769:74"><literal type="number" pos:start="2769:74" pos:end="2769:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2771:21" pos:end="2771:43"><expr pos:start="2771:21" pos:end="2771:42"><call pos:start="2771:21" pos:end="2771:42"><name pos:start="2771:21" pos:end="2771:37">tcg_temp_free_i32</name><argument_list pos:start="2771:38" pos:end="2771:42">(<argument pos:start="2771:39" pos:end="2771:41"><expr pos:start="2771:39" pos:end="2771:41"><name pos:start="2771:39" pos:end="2771:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2773:21" pos:end="2773:51"><expr pos:start="2773:21" pos:end="2773:50"><call pos:start="2773:21" pos:end="2773:50"><name pos:start="2773:21" pos:end="2773:38">tcg_gen_ext16u_i32</name><argument_list pos:start="2773:39" pos:end="2773:50">(<argument pos:start="2773:40" pos:end="2773:43"><expr pos:start="2773:40" pos:end="2773:43"><name pos:start="2773:40" pos:end="2773:43">tmp3</name></expr></argument>, <argument pos:start="2773:46" pos:end="2773:49"><expr pos:start="2773:46" pos:end="2773:49"><name pos:start="2773:46" pos:end="2773:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2775:21" pos:end="2775:76"><expr pos:start="2775:21" pos:end="2775:75"><call pos:start="2775:21" pos:end="2775:75"><name pos:start="2775:21" pos:end="2775:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="2775:52" pos:end="2775:75">(<argument pos:start="2775:53" pos:end="2775:59"><expr pos:start="2775:53" pos:end="2775:59"><name pos:start="2775:53" pos:end="2775:59">cpu_F0s</name></expr></argument>, <argument pos:start="2775:62" pos:end="2775:65"><expr pos:start="2775:62" pos:end="2775:65"><name pos:start="2775:62" pos:end="2775:65">tmp3</name></expr></argument>, <argument pos:start="2775:68" pos:end="2775:74"><expr pos:start="2775:68" pos:end="2775:74"><name pos:start="2775:68" pos:end="2775:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2777:21" pos:end="2777:77"><expr pos:start="2777:21" pos:end="2777:76"><call pos:start="2777:21" pos:end="2777:76"><name pos:start="2777:21" pos:end="2777:34">tcg_gen_st_f32</name><argument_list pos:start="2777:35" pos:end="2777:76">(<argument pos:start="2777:36" pos:end="2777:42"><expr pos:start="2777:36" pos:end="2777:42"><name pos:start="2777:36" pos:end="2777:42">cpu_F0s</name></expr></argument>, <argument pos:start="2777:45" pos:end="2777:51"><expr pos:start="2777:45" pos:end="2777:51"><name pos:start="2777:45" pos:end="2777:51">cpu_env</name></expr></argument>, <argument pos:start="2777:54" pos:end="2777:75"><expr pos:start="2777:54" pos:end="2777:75"><call pos:start="2777:54" pos:end="2777:75"><name pos:start="2777:54" pos:end="2777:68">neon_reg_offset</name><argument_list pos:start="2777:69" pos:end="2777:75">(<argument pos:start="2777:70" pos:end="2777:71"><expr pos:start="2777:70" pos:end="2777:71"><name pos:start="2777:70" pos:end="2777:71">rd</name></expr></argument>, <argument pos:start="2777:74" pos:end="2777:74"><expr pos:start="2777:74" pos:end="2777:74"><literal type="number" pos:start="2777:74" pos:end="2777:74">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2779:21" pos:end="2779:53"><expr pos:start="2779:21" pos:end="2779:52"><call pos:start="2779:21" pos:end="2779:52"><name pos:start="2779:21" pos:end="2779:36">tcg_gen_shri_i32</name><argument_list pos:start="2779:37" pos:end="2779:52">(<argument pos:start="2779:38" pos:end="2779:41"><expr pos:start="2779:38" pos:end="2779:41"><name pos:start="2779:38" pos:end="2779:41">tmp3</name></expr></argument>, <argument pos:start="2779:44" pos:end="2779:47"><expr pos:start="2779:44" pos:end="2779:47"><name pos:start="2779:44" pos:end="2779:47">tmp2</name></expr></argument>, <argument pos:start="2779:50" pos:end="2779:51"><expr pos:start="2779:50" pos:end="2779:51"><literal type="number" pos:start="2779:50" pos:end="2779:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2781:21" pos:end="2781:76"><expr pos:start="2781:21" pos:end="2781:75"><call pos:start="2781:21" pos:end="2781:75"><name pos:start="2781:21" pos:end="2781:51">gen_helper_neon_fcvt_f16_to_f32</name><argument_list pos:start="2781:52" pos:end="2781:75">(<argument pos:start="2781:53" pos:end="2781:59"><expr pos:start="2781:53" pos:end="2781:59"><name pos:start="2781:53" pos:end="2781:59">cpu_F0s</name></expr></argument>, <argument pos:start="2781:62" pos:end="2781:65"><expr pos:start="2781:62" pos:end="2781:65"><name pos:start="2781:62" pos:end="2781:65">tmp3</name></expr></argument>, <argument pos:start="2781:68" pos:end="2781:74"><expr pos:start="2781:68" pos:end="2781:74"><name pos:start="2781:68" pos:end="2781:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2783:21" pos:end="2783:77"><expr pos:start="2783:21" pos:end="2783:76"><call pos:start="2783:21" pos:end="2783:76"><name pos:start="2783:21" pos:end="2783:34">tcg_gen_st_f32</name><argument_list pos:start="2783:35" pos:end="2783:76">(<argument pos:start="2783:36" pos:end="2783:42"><expr pos:start="2783:36" pos:end="2783:42"><name pos:start="2783:36" pos:end="2783:42">cpu_F0s</name></expr></argument>, <argument pos:start="2783:45" pos:end="2783:51"><expr pos:start="2783:45" pos:end="2783:51"><name pos:start="2783:45" pos:end="2783:51">cpu_env</name></expr></argument>, <argument pos:start="2783:54" pos:end="2783:75"><expr pos:start="2783:54" pos:end="2783:75"><call pos:start="2783:54" pos:end="2783:75"><name pos:start="2783:54" pos:end="2783:68">neon_reg_offset</name><argument_list pos:start="2783:69" pos:end="2783:75">(<argument pos:start="2783:70" pos:end="2783:71"><expr pos:start="2783:70" pos:end="2783:71"><name pos:start="2783:70" pos:end="2783:71">rd</name></expr></argument>, <argument pos:start="2783:74" pos:end="2783:74"><expr pos:start="2783:74" pos:end="2783:74"><literal type="number" pos:start="2783:74" pos:end="2783:74">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2785:21" pos:end="2785:44"><expr pos:start="2785:21" pos:end="2785:43"><call pos:start="2785:21" pos:end="2785:43"><name pos:start="2785:21" pos:end="2785:37">tcg_temp_free_i32</name><argument_list pos:start="2785:38" pos:end="2785:43">(<argument pos:start="2785:39" pos:end="2785:42"><expr pos:start="2785:39" pos:end="2785:42"><name pos:start="2785:39" pos:end="2785:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2787:21" pos:end="2787:44"><expr pos:start="2787:21" pos:end="2787:43"><call pos:start="2787:21" pos:end="2787:43"><name pos:start="2787:21" pos:end="2787:37">tcg_temp_free_i32</name><argument_list pos:start="2787:38" pos:end="2787:43">(<argument pos:start="2787:39" pos:end="2787:42"><expr pos:start="2787:39" pos:end="2787:42"><name pos:start="2787:39" pos:end="2787:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2789:21" pos:end="2789:26">break;</break>

                <default pos:start="2791:17" pos:end="2791:24">default:</default>

                <label pos:start="2793:17" pos:end="2793:28"><name pos:start="2793:17" pos:end="2793:27">elementwise</name>:</label>

                    <for pos:start="2795:21" pos:end="3167:21">for <control pos:start="2795:25" pos:end="2795:62">(<init pos:start="2795:26" pos:end="2795:34"><expr pos:start="2795:26" pos:end="2795:33"><name pos:start="2795:26" pos:end="2795:29">pass</name> <operator pos:start="2795:31" pos:end="2795:31">=</operator> <literal type="number" pos:start="2795:33" pos:end="2795:33">0</literal></expr>;</init> <condition pos:start="2795:36" pos:end="2795:54"><expr pos:start="2795:36" pos:end="2795:53"><name pos:start="2795:36" pos:end="2795:39">pass</name> <operator pos:start="2795:41" pos:end="2795:41">&lt;</operator> <operator pos:start="2795:43" pos:end="2795:43">(</operator><ternary pos:start="2795:44" pos:end="2795:52"><condition pos:start="2795:44" pos:end="2795:46"><expr pos:start="2795:44" pos:end="2795:44"><name pos:start="2795:44" pos:end="2795:44">q</name></expr> ?</condition><then pos:start="2795:48" pos:end="2795:48"> <expr pos:start="2795:48" pos:end="2795:48"><literal type="number" pos:start="2795:48" pos:end="2795:48">4</literal></expr> </then><else pos:start="2795:50" pos:end="2795:52">: <expr pos:start="2795:52" pos:end="2795:52"><literal type="number" pos:start="2795:52" pos:end="2795:52">2</literal></expr></else></ternary><operator pos:start="2795:53" pos:end="2795:53">)</operator></expr>;</condition> <incr pos:start="2795:56" pos:end="2795:61"><expr pos:start="2795:56" pos:end="2795:61"><name pos:start="2795:56" pos:end="2795:59">pass</name><operator pos:start="2795:60" pos:end="2795:61">++</operator></expr></incr>)</control> <block pos:start="2795:64" pos:end="3167:21">{<block_content pos:start="2797:25" pos:end="3165:25">

                        <if_stmt pos:start="2797:25" pos:end="2809:25"><if pos:start="2797:25" pos:end="2805:25">if <condition pos:start="2797:28" pos:end="2797:53">(<expr pos:start="2797:29" pos:end="2797:52"><call pos:start="2797:29" pos:end="2797:52"><name pos:start="2797:29" pos:end="2797:48">neon_2rm_is_float_op</name><argument_list pos:start="2797:49" pos:end="2797:52">(<argument pos:start="2797:50" pos:end="2797:51"><expr pos:start="2797:50" pos:end="2797:51"><name pos:start="2797:50" pos:end="2797:51">op</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2797:55" pos:end="2805:25">{<block_content pos:start="2799:29" pos:end="2803:45">

                            <expr_stmt pos:start="2799:29" pos:end="2801:70"><expr pos:start="2799:29" pos:end="2801:69"><call pos:start="2799:29" pos:end="2801:69"><name pos:start="2799:29" pos:end="2799:42">tcg_gen_ld_f32</name><argument_list pos:start="2799:43" pos:end="2801:69">(<argument pos:start="2799:44" pos:end="2799:50"><expr pos:start="2799:44" pos:end="2799:50"><name pos:start="2799:44" pos:end="2799:50">cpu_F0s</name></expr></argument>, <argument pos:start="2799:53" pos:end="2799:59"><expr pos:start="2799:53" pos:end="2799:59"><name pos:start="2799:53" pos:end="2799:59">cpu_env</name></expr></argument>,

                                           <argument pos:start="2801:44" pos:end="2801:68"><expr pos:start="2801:44" pos:end="2801:68"><call pos:start="2801:44" pos:end="2801:68"><name pos:start="2801:44" pos:end="2801:58">neon_reg_offset</name><argument_list pos:start="2801:59" pos:end="2801:68">(<argument pos:start="2801:60" pos:end="2801:61"><expr pos:start="2801:60" pos:end="2801:61"><name pos:start="2801:60" pos:end="2801:61">rm</name></expr></argument>, <argument pos:start="2801:64" pos:end="2801:67"><expr pos:start="2801:64" pos:end="2801:67"><name pos:start="2801:64" pos:end="2801:67">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2803:29" pos:end="2803:45"><expr pos:start="2803:29" pos:end="2803:44"><call pos:start="2803:29" pos:end="2803:44"><name pos:start="2803:29" pos:end="2803:39">TCGV_UNUSED</name><argument_list pos:start="2803:40" pos:end="2803:44">(<argument pos:start="2803:41" pos:end="2803:43"><expr pos:start="2803:41" pos:end="2803:43"><name pos:start="2803:41" pos:end="2803:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2805:27" pos:end="2809:25">else <block pos:start="2805:32" pos:end="2809:25">{<block_content pos:start="2807:29" pos:end="2807:58">

                            <expr_stmt pos:start="2807:29" pos:end="2807:58"><expr pos:start="2807:29" pos:end="2807:57"><name pos:start="2807:29" pos:end="2807:31">tmp</name> <operator pos:start="2807:33" pos:end="2807:33">=</operator> <call pos:start="2807:35" pos:end="2807:57"><name pos:start="2807:35" pos:end="2807:47">neon_load_reg</name><argument_list pos:start="2807:48" pos:end="2807:57">(<argument pos:start="2807:49" pos:end="2807:50"><expr pos:start="2807:49" pos:end="2807:50"><name pos:start="2807:49" pos:end="2807:50">rm</name></expr></argument>, <argument pos:start="2807:53" pos:end="2807:56"><expr pos:start="2807:53" pos:end="2807:56"><name pos:start="2807:53" pos:end="2807:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <switch pos:start="2811:25" pos:end="3153:25">switch <condition pos:start="2811:32" pos:end="2811:35">(<expr pos:start="2811:33" pos:end="2811:34"><name pos:start="2811:33" pos:end="2811:34">op</name></expr>)</condition> <block pos:start="2811:37" pos:end="3153:25">{<block_content pos:start="2813:25" pos:end="3151:36">

                        <case pos:start="2813:25" pos:end="2813:45">case <expr pos:start="2813:30" pos:end="2813:44"><name pos:start="2813:30" pos:end="2813:44">NEON_2RM_VREV32</name></expr>:</case>

                            <switch pos:start="2815:29" pos:end="2823:29">switch <condition pos:start="2815:36" pos:end="2815:41">(<expr pos:start="2815:37" pos:end="2815:40"><name pos:start="2815:37" pos:end="2815:40">size</name></expr>)</condition> <block pos:start="2815:43" pos:end="2823:29">{<block_content pos:start="2817:29" pos:end="2821:45">

                            <case pos:start="2817:29" pos:end="2817:35">case <expr pos:start="2817:34" pos:end="2817:34"><literal type="number" pos:start="2817:34" pos:end="2817:34">0</literal></expr>:</case> <expr_stmt pos:start="2817:37" pos:end="2817:66"><expr pos:start="2817:37" pos:end="2817:65"><call pos:start="2817:37" pos:end="2817:65"><name pos:start="2817:37" pos:end="2817:55">tcg_gen_bswap32_i32</name><argument_list pos:start="2817:56" pos:end="2817:65">(<argument pos:start="2817:57" pos:end="2817:59"><expr pos:start="2817:57" pos:end="2817:59"><name pos:start="2817:57" pos:end="2817:59">tmp</name></expr></argument>, <argument pos:start="2817:62" pos:end="2817:64"><expr pos:start="2817:62" pos:end="2817:64"><name pos:start="2817:62" pos:end="2817:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2817:68" pos:end="2817:73">break;</break>

                            <case pos:start="2819:29" pos:end="2819:35">case <expr pos:start="2819:34" pos:end="2819:34"><literal type="number" pos:start="2819:34" pos:end="2819:34">1</literal></expr>:</case> <expr_stmt pos:start="2819:37" pos:end="2819:55"><expr pos:start="2819:37" pos:end="2819:54"><call pos:start="2819:37" pos:end="2819:54"><name pos:start="2819:37" pos:end="2819:49">gen_swap_half</name><argument_list pos:start="2819:50" pos:end="2819:54">(<argument pos:start="2819:51" pos:end="2819:53"><expr pos:start="2819:51" pos:end="2819:53"><name pos:start="2819:51" pos:end="2819:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2819:57" pos:end="2819:62">break;</break>

                            <default pos:start="2821:29" pos:end="2821:36">default:</default> <expr_stmt pos:start="2821:38" pos:end="2821:45"><expr pos:start="2821:38" pos:end="2821:44"><call pos:start="2821:38" pos:end="2821:44"><name pos:start="2821:38" pos:end="2821:42">abort</name><argument_list pos:start="2821:43" pos:end="2821:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="2825:29" pos:end="2825:34">break;</break>

                        <case pos:start="2827:25" pos:end="2827:45">case <expr pos:start="2827:30" pos:end="2827:44"><name pos:start="2827:30" pos:end="2827:44">NEON_2RM_VREV16</name></expr>:</case>

                            <expr_stmt pos:start="2829:29" pos:end="2829:43"><expr pos:start="2829:29" pos:end="2829:42"><call pos:start="2829:29" pos:end="2829:42"><name pos:start="2829:29" pos:end="2829:37">gen_rev16</name><argument_list pos:start="2829:38" pos:end="2829:42">(<argument pos:start="2829:39" pos:end="2829:41"><expr pos:start="2829:39" pos:end="2829:41"><name pos:start="2829:39" pos:end="2829:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2831:29" pos:end="2831:34">break;</break>

                        <case pos:start="2833:25" pos:end="2833:43">case <expr pos:start="2833:30" pos:end="2833:42"><name pos:start="2833:30" pos:end="2833:42">NEON_2RM_VCLS</name></expr>:</case>

                            <switch pos:start="2835:29" pos:end="2845:29">switch <condition pos:start="2835:36" pos:end="2835:41">(<expr pos:start="2835:37" pos:end="2835:40"><name pos:start="2835:37" pos:end="2835:40">size</name></expr>)</condition> <block pos:start="2835:43" pos:end="2845:29">{<block_content pos:start="2837:29" pos:end="2843:45">

                            <case pos:start="2837:29" pos:end="2837:35">case <expr pos:start="2837:34" pos:end="2837:34"><literal type="number" pos:start="2837:34" pos:end="2837:34">0</literal></expr>:</case> <expr_stmt pos:start="2837:37" pos:end="2837:69"><expr pos:start="2837:37" pos:end="2837:68"><call pos:start="2837:37" pos:end="2837:68"><name pos:start="2837:37" pos:end="2837:58">gen_helper_neon_cls_s8</name><argument_list pos:start="2837:59" pos:end="2837:68">(<argument pos:start="2837:60" pos:end="2837:62"><expr pos:start="2837:60" pos:end="2837:62"><name pos:start="2837:60" pos:end="2837:62">tmp</name></expr></argument>, <argument pos:start="2837:65" pos:end="2837:67"><expr pos:start="2837:65" pos:end="2837:67"><name pos:start="2837:65" pos:end="2837:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2837:71" pos:end="2837:76">break;</break>

                            <case pos:start="2839:29" pos:end="2839:35">case <expr pos:start="2839:34" pos:end="2839:34"><literal type="number" pos:start="2839:34" pos:end="2839:34">1</literal></expr>:</case> <expr_stmt pos:start="2839:37" pos:end="2839:70"><expr pos:start="2839:37" pos:end="2839:69"><call pos:start="2839:37" pos:end="2839:69"><name pos:start="2839:37" pos:end="2839:59">gen_helper_neon_cls_s16</name><argument_list pos:start="2839:60" pos:end="2839:69">(<argument pos:start="2839:61" pos:end="2839:63"><expr pos:start="2839:61" pos:end="2839:63"><name pos:start="2839:61" pos:end="2839:63">tmp</name></expr></argument>, <argument pos:start="2839:66" pos:end="2839:68"><expr pos:start="2839:66" pos:end="2839:68"><name pos:start="2839:66" pos:end="2839:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2839:72" pos:end="2839:77">break;</break>

                            <case pos:start="2841:29" pos:end="2841:35">case <expr pos:start="2841:34" pos:end="2841:34"><literal type="number" pos:start="2841:34" pos:end="2841:34">2</literal></expr>:</case> <expr_stmt pos:start="2841:37" pos:end="2841:70"><expr pos:start="2841:37" pos:end="2841:69"><call pos:start="2841:37" pos:end="2841:69"><name pos:start="2841:37" pos:end="2841:59">gen_helper_neon_cls_s32</name><argument_list pos:start="2841:60" pos:end="2841:69">(<argument pos:start="2841:61" pos:end="2841:63"><expr pos:start="2841:61" pos:end="2841:63"><name pos:start="2841:61" pos:end="2841:63">tmp</name></expr></argument>, <argument pos:start="2841:66" pos:end="2841:68"><expr pos:start="2841:66" pos:end="2841:68"><name pos:start="2841:66" pos:end="2841:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2841:72" pos:end="2841:77">break;</break>

                            <default pos:start="2843:29" pos:end="2843:36">default:</default> <expr_stmt pos:start="2843:38" pos:end="2843:45"><expr pos:start="2843:38" pos:end="2843:44"><call pos:start="2843:38" pos:end="2843:44"><name pos:start="2843:38" pos:end="2843:42">abort</name><argument_list pos:start="2843:43" pos:end="2843:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="2847:29" pos:end="2847:34">break;</break>

                        <case pos:start="2849:25" pos:end="2849:43">case <expr pos:start="2849:30" pos:end="2849:42"><name pos:start="2849:30" pos:end="2849:42">NEON_2RM_VCLZ</name></expr>:</case>

                            <switch pos:start="2851:29" pos:end="2861:29">switch <condition pos:start="2851:36" pos:end="2851:41">(<expr pos:start="2851:37" pos:end="2851:40"><name pos:start="2851:37" pos:end="2851:40">size</name></expr>)</condition> <block pos:start="2851:43" pos:end="2861:29">{<block_content pos:start="2853:29" pos:end="2859:45">

                            <case pos:start="2853:29" pos:end="2853:35">case <expr pos:start="2853:34" pos:end="2853:34"><literal type="number" pos:start="2853:34" pos:end="2853:34">0</literal></expr>:</case> <expr_stmt pos:start="2853:37" pos:end="2853:69"><expr pos:start="2853:37" pos:end="2853:68"><call pos:start="2853:37" pos:end="2853:68"><name pos:start="2853:37" pos:end="2853:58">gen_helper_neon_clz_u8</name><argument_list pos:start="2853:59" pos:end="2853:68">(<argument pos:start="2853:60" pos:end="2853:62"><expr pos:start="2853:60" pos:end="2853:62"><name pos:start="2853:60" pos:end="2853:62">tmp</name></expr></argument>, <argument pos:start="2853:65" pos:end="2853:67"><expr pos:start="2853:65" pos:end="2853:67"><name pos:start="2853:65" pos:end="2853:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2853:71" pos:end="2853:76">break;</break>

                            <case pos:start="2855:29" pos:end="2855:35">case <expr pos:start="2855:34" pos:end="2855:34"><literal type="number" pos:start="2855:34" pos:end="2855:34">1</literal></expr>:</case> <expr_stmt pos:start="2855:37" pos:end="2855:70"><expr pos:start="2855:37" pos:end="2855:69"><call pos:start="2855:37" pos:end="2855:69"><name pos:start="2855:37" pos:end="2855:59">gen_helper_neon_clz_u16</name><argument_list pos:start="2855:60" pos:end="2855:69">(<argument pos:start="2855:61" pos:end="2855:63"><expr pos:start="2855:61" pos:end="2855:63"><name pos:start="2855:61" pos:end="2855:63">tmp</name></expr></argument>, <argument pos:start="2855:66" pos:end="2855:68"><expr pos:start="2855:66" pos:end="2855:68"><name pos:start="2855:66" pos:end="2855:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2855:72" pos:end="2855:77">break;</break>

                            <case pos:start="2857:29" pos:end="2857:35">case <expr pos:start="2857:34" pos:end="2857:34"><literal type="number" pos:start="2857:34" pos:end="2857:34">2</literal></expr>:</case> <expr_stmt pos:start="2857:37" pos:end="2857:61"><expr pos:start="2857:37" pos:end="2857:60"><call pos:start="2857:37" pos:end="2857:60"><name pos:start="2857:37" pos:end="2857:50">gen_helper_clz</name><argument_list pos:start="2857:51" pos:end="2857:60">(<argument pos:start="2857:52" pos:end="2857:54"><expr pos:start="2857:52" pos:end="2857:54"><name pos:start="2857:52" pos:end="2857:54">tmp</name></expr></argument>, <argument pos:start="2857:57" pos:end="2857:59"><expr pos:start="2857:57" pos:end="2857:59"><name pos:start="2857:57" pos:end="2857:59">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2857:63" pos:end="2857:68">break;</break>

                            <default pos:start="2859:29" pos:end="2859:36">default:</default> <expr_stmt pos:start="2859:38" pos:end="2859:45"><expr pos:start="2859:38" pos:end="2859:44"><call pos:start="2859:38" pos:end="2859:44"><name pos:start="2859:38" pos:end="2859:42">abort</name><argument_list pos:start="2859:43" pos:end="2859:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="2863:29" pos:end="2863:34">break;</break>

                        <case pos:start="2865:25" pos:end="2865:43">case <expr pos:start="2865:30" pos:end="2865:42"><name pos:start="2865:30" pos:end="2865:42">NEON_2RM_VCNT</name></expr>:</case>

                            <expr_stmt pos:start="2867:29" pos:end="2867:61"><expr pos:start="2867:29" pos:end="2867:60"><call pos:start="2867:29" pos:end="2867:60"><name pos:start="2867:29" pos:end="2867:50">gen_helper_neon_cnt_u8</name><argument_list pos:start="2867:51" pos:end="2867:60">(<argument pos:start="2867:52" pos:end="2867:54"><expr pos:start="2867:52" pos:end="2867:54"><name pos:start="2867:52" pos:end="2867:54">tmp</name></expr></argument>, <argument pos:start="2867:57" pos:end="2867:59"><expr pos:start="2867:57" pos:end="2867:59"><name pos:start="2867:57" pos:end="2867:59">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2869:29" pos:end="2869:34">break;</break>

                        <case pos:start="2871:25" pos:end="2871:43">case <expr pos:start="2871:30" pos:end="2871:42"><name pos:start="2871:30" pos:end="2871:42">NEON_2RM_VMVN</name></expr>:</case>

                            <expr_stmt pos:start="2873:29" pos:end="2873:54"><expr pos:start="2873:29" pos:end="2873:53"><call pos:start="2873:29" pos:end="2873:53"><name pos:start="2873:29" pos:end="2873:43">tcg_gen_not_i32</name><argument_list pos:start="2873:44" pos:end="2873:53">(<argument pos:start="2873:45" pos:end="2873:47"><expr pos:start="2873:45" pos:end="2873:47"><name pos:start="2873:45" pos:end="2873:47">tmp</name></expr></argument>, <argument pos:start="2873:50" pos:end="2873:52"><expr pos:start="2873:50" pos:end="2873:52"><name pos:start="2873:50" pos:end="2873:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2875:29" pos:end="2875:34">break;</break>

                        <case pos:start="2877:25" pos:end="2877:44">case <expr pos:start="2877:30" pos:end="2877:43"><name pos:start="2877:30" pos:end="2877:43">NEON_2RM_VQABS</name></expr>:</case>

                            <switch pos:start="2879:29" pos:end="2889:29">switch <condition pos:start="2879:36" pos:end="2879:41">(<expr pos:start="2879:37" pos:end="2879:40"><name pos:start="2879:37" pos:end="2879:40">size</name></expr>)</condition> <block pos:start="2879:43" pos:end="2889:29">{<block_content pos:start="2881:29" pos:end="2887:45">

                            <case pos:start="2881:29" pos:end="2881:35">case <expr pos:start="2881:34" pos:end="2881:34"><literal type="number" pos:start="2881:34" pos:end="2881:34">0</literal></expr>:</case> <expr_stmt pos:start="2881:37" pos:end="2881:70"><expr pos:start="2881:37" pos:end="2881:69"><call pos:start="2881:37" pos:end="2881:69"><name pos:start="2881:37" pos:end="2881:59">gen_helper_neon_qabs_s8</name><argument_list pos:start="2881:60" pos:end="2881:69">(<argument pos:start="2881:61" pos:end="2881:63"><expr pos:start="2881:61" pos:end="2881:63"><name pos:start="2881:61" pos:end="2881:63">tmp</name></expr></argument>, <argument pos:start="2881:66" pos:end="2881:68"><expr pos:start="2881:66" pos:end="2881:68"><name pos:start="2881:66" pos:end="2881:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2881:72" pos:end="2881:77">break;</break>

                            <case pos:start="2883:29" pos:end="2883:35">case <expr pos:start="2883:34" pos:end="2883:34"><literal type="number" pos:start="2883:34" pos:end="2883:34">1</literal></expr>:</case> <expr_stmt pos:start="2883:37" pos:end="2883:71"><expr pos:start="2883:37" pos:end="2883:70"><call pos:start="2883:37" pos:end="2883:70"><name pos:start="2883:37" pos:end="2883:60">gen_helper_neon_qabs_s16</name><argument_list pos:start="2883:61" pos:end="2883:70">(<argument pos:start="2883:62" pos:end="2883:64"><expr pos:start="2883:62" pos:end="2883:64"><name pos:start="2883:62" pos:end="2883:64">tmp</name></expr></argument>, <argument pos:start="2883:67" pos:end="2883:69"><expr pos:start="2883:67" pos:end="2883:69"><name pos:start="2883:67" pos:end="2883:69">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2883:73" pos:end="2883:78">break;</break>

                            <case pos:start="2885:29" pos:end="2885:35">case <expr pos:start="2885:34" pos:end="2885:34"><literal type="number" pos:start="2885:34" pos:end="2885:34">2</literal></expr>:</case> <expr_stmt pos:start="2885:37" pos:end="2885:71"><expr pos:start="2885:37" pos:end="2885:70"><call pos:start="2885:37" pos:end="2885:70"><name pos:start="2885:37" pos:end="2885:60">gen_helper_neon_qabs_s32</name><argument_list pos:start="2885:61" pos:end="2885:70">(<argument pos:start="2885:62" pos:end="2885:64"><expr pos:start="2885:62" pos:end="2885:64"><name pos:start="2885:62" pos:end="2885:64">tmp</name></expr></argument>, <argument pos:start="2885:67" pos:end="2885:69"><expr pos:start="2885:67" pos:end="2885:69"><name pos:start="2885:67" pos:end="2885:69">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2885:73" pos:end="2885:78">break;</break>

                            <default pos:start="2887:29" pos:end="2887:36">default:</default> <expr_stmt pos:start="2887:38" pos:end="2887:45"><expr pos:start="2887:38" pos:end="2887:44"><call pos:start="2887:38" pos:end="2887:44"><name pos:start="2887:38" pos:end="2887:42">abort</name><argument_list pos:start="2887:43" pos:end="2887:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="2891:29" pos:end="2891:34">break;</break>

                        <case pos:start="2893:25" pos:end="2893:44">case <expr pos:start="2893:30" pos:end="2893:43"><name pos:start="2893:30" pos:end="2893:43">NEON_2RM_VQNEG</name></expr>:</case>

                            <switch pos:start="2895:29" pos:end="2905:29">switch <condition pos:start="2895:36" pos:end="2895:41">(<expr pos:start="2895:37" pos:end="2895:40"><name pos:start="2895:37" pos:end="2895:40">size</name></expr>)</condition> <block pos:start="2895:43" pos:end="2905:29">{<block_content pos:start="2897:29" pos:end="2903:45">

                            <case pos:start="2897:29" pos:end="2897:35">case <expr pos:start="2897:34" pos:end="2897:34"><literal type="number" pos:start="2897:34" pos:end="2897:34">0</literal></expr>:</case> <expr_stmt pos:start="2897:37" pos:end="2897:70"><expr pos:start="2897:37" pos:end="2897:69"><call pos:start="2897:37" pos:end="2897:69"><name pos:start="2897:37" pos:end="2897:59">gen_helper_neon_qneg_s8</name><argument_list pos:start="2897:60" pos:end="2897:69">(<argument pos:start="2897:61" pos:end="2897:63"><expr pos:start="2897:61" pos:end="2897:63"><name pos:start="2897:61" pos:end="2897:63">tmp</name></expr></argument>, <argument pos:start="2897:66" pos:end="2897:68"><expr pos:start="2897:66" pos:end="2897:68"><name pos:start="2897:66" pos:end="2897:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2897:72" pos:end="2897:77">break;</break>

                            <case pos:start="2899:29" pos:end="2899:35">case <expr pos:start="2899:34" pos:end="2899:34"><literal type="number" pos:start="2899:34" pos:end="2899:34">1</literal></expr>:</case> <expr_stmt pos:start="2899:37" pos:end="2899:71"><expr pos:start="2899:37" pos:end="2899:70"><call pos:start="2899:37" pos:end="2899:70"><name pos:start="2899:37" pos:end="2899:60">gen_helper_neon_qneg_s16</name><argument_list pos:start="2899:61" pos:end="2899:70">(<argument pos:start="2899:62" pos:end="2899:64"><expr pos:start="2899:62" pos:end="2899:64"><name pos:start="2899:62" pos:end="2899:64">tmp</name></expr></argument>, <argument pos:start="2899:67" pos:end="2899:69"><expr pos:start="2899:67" pos:end="2899:69"><name pos:start="2899:67" pos:end="2899:69">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2899:73" pos:end="2899:78">break;</break>

                            <case pos:start="2901:29" pos:end="2901:35">case <expr pos:start="2901:34" pos:end="2901:34"><literal type="number" pos:start="2901:34" pos:end="2901:34">2</literal></expr>:</case> <expr_stmt pos:start="2901:37" pos:end="2901:71"><expr pos:start="2901:37" pos:end="2901:70"><call pos:start="2901:37" pos:end="2901:70"><name pos:start="2901:37" pos:end="2901:60">gen_helper_neon_qneg_s32</name><argument_list pos:start="2901:61" pos:end="2901:70">(<argument pos:start="2901:62" pos:end="2901:64"><expr pos:start="2901:62" pos:end="2901:64"><name pos:start="2901:62" pos:end="2901:64">tmp</name></expr></argument>, <argument pos:start="2901:67" pos:end="2901:69"><expr pos:start="2901:67" pos:end="2901:69"><name pos:start="2901:67" pos:end="2901:69">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2901:73" pos:end="2901:78">break;</break>

                            <default pos:start="2903:29" pos:end="2903:36">default:</default> <expr_stmt pos:start="2903:38" pos:end="2903:45"><expr pos:start="2903:38" pos:end="2903:44"><call pos:start="2903:38" pos:end="2903:44"><name pos:start="2903:38" pos:end="2903:42">abort</name><argument_list pos:start="2903:43" pos:end="2903:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="2907:29" pos:end="2907:34">break;</break>

                        <case pos:start="2909:25" pos:end="2909:44">case <expr pos:start="2909:30" pos:end="2909:43"><name pos:start="2909:30" pos:end="2909:43">NEON_2RM_VCGT0</name></expr>:</case> <case pos:start="2909:46" pos:end="2909:65">case <expr pos:start="2909:51" pos:end="2909:64"><name pos:start="2909:51" pos:end="2909:64">NEON_2RM_VCLE0</name></expr>:</case>

                            <expr_stmt pos:start="2911:29" pos:end="2911:52"><expr pos:start="2911:29" pos:end="2911:51"><name pos:start="2911:29" pos:end="2911:32">tmp2</name> <operator pos:start="2911:34" pos:end="2911:34">=</operator> <call pos:start="2911:36" pos:end="2911:51"><name pos:start="2911:36" pos:end="2911:48">tcg_const_i32</name><argument_list pos:start="2911:49" pos:end="2911:51">(<argument pos:start="2911:50" pos:end="2911:50"><expr pos:start="2911:50" pos:end="2911:50"><literal type="number" pos:start="2911:50" pos:end="2911:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2913:29" pos:end="2923:29">switch<condition pos:start="2913:35" pos:end="2913:40">(<expr pos:start="2913:36" pos:end="2913:39"><name pos:start="2913:36" pos:end="2913:39">size</name></expr>)</condition> <block pos:start="2913:42" pos:end="2923:29">{<block_content pos:start="2915:29" pos:end="2921:45">

                            <case pos:start="2915:29" pos:end="2915:35">case <expr pos:start="2915:34" pos:end="2915:34"><literal type="number" pos:start="2915:34" pos:end="2915:34">0</literal></expr>:</case> <expr_stmt pos:start="2915:37" pos:end="2915:75"><expr pos:start="2915:37" pos:end="2915:74"><call pos:start="2915:37" pos:end="2915:74"><name pos:start="2915:37" pos:end="2915:58">gen_helper_neon_cgt_s8</name><argument_list pos:start="2915:59" pos:end="2915:74">(<argument pos:start="2915:60" pos:end="2915:62"><expr pos:start="2915:60" pos:end="2915:62"><name pos:start="2915:60" pos:end="2915:62">tmp</name></expr></argument>, <argument pos:start="2915:65" pos:end="2915:67"><expr pos:start="2915:65" pos:end="2915:67"><name pos:start="2915:65" pos:end="2915:67">tmp</name></expr></argument>, <argument pos:start="2915:70" pos:end="2915:73"><expr pos:start="2915:70" pos:end="2915:73"><name pos:start="2915:70" pos:end="2915:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2915:77" pos:end="2915:82">break;</break>

                            <case pos:start="2917:29" pos:end="2917:35">case <expr pos:start="2917:34" pos:end="2917:34"><literal type="number" pos:start="2917:34" pos:end="2917:34">1</literal></expr>:</case> <expr_stmt pos:start="2917:37" pos:end="2917:76"><expr pos:start="2917:37" pos:end="2917:75"><call pos:start="2917:37" pos:end="2917:75"><name pos:start="2917:37" pos:end="2917:59">gen_helper_neon_cgt_s16</name><argument_list pos:start="2917:60" pos:end="2917:75">(<argument pos:start="2917:61" pos:end="2917:63"><expr pos:start="2917:61" pos:end="2917:63"><name pos:start="2917:61" pos:end="2917:63">tmp</name></expr></argument>, <argument pos:start="2917:66" pos:end="2917:68"><expr pos:start="2917:66" pos:end="2917:68"><name pos:start="2917:66" pos:end="2917:68">tmp</name></expr></argument>, <argument pos:start="2917:71" pos:end="2917:74"><expr pos:start="2917:71" pos:end="2917:74"><name pos:start="2917:71" pos:end="2917:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2917:78" pos:end="2917:83">break;</break>

                            <case pos:start="2919:29" pos:end="2919:35">case <expr pos:start="2919:34" pos:end="2919:34"><literal type="number" pos:start="2919:34" pos:end="2919:34">2</literal></expr>:</case> <expr_stmt pos:start="2919:37" pos:end="2919:76"><expr pos:start="2919:37" pos:end="2919:75"><call pos:start="2919:37" pos:end="2919:75"><name pos:start="2919:37" pos:end="2919:59">gen_helper_neon_cgt_s32</name><argument_list pos:start="2919:60" pos:end="2919:75">(<argument pos:start="2919:61" pos:end="2919:63"><expr pos:start="2919:61" pos:end="2919:63"><name pos:start="2919:61" pos:end="2919:63">tmp</name></expr></argument>, <argument pos:start="2919:66" pos:end="2919:68"><expr pos:start="2919:66" pos:end="2919:68"><name pos:start="2919:66" pos:end="2919:68">tmp</name></expr></argument>, <argument pos:start="2919:71" pos:end="2919:74"><expr pos:start="2919:71" pos:end="2919:74"><name pos:start="2919:71" pos:end="2919:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2919:78" pos:end="2919:83">break;</break>

                            <default pos:start="2921:29" pos:end="2921:36">default:</default> <expr_stmt pos:start="2921:38" pos:end="2921:45"><expr pos:start="2921:38" pos:end="2921:44"><call pos:start="2921:38" pos:end="2921:44"><name pos:start="2921:38" pos:end="2921:42">abort</name><argument_list pos:start="2921:43" pos:end="2921:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2925:29" pos:end="2925:48"><expr pos:start="2925:29" pos:end="2925:47"><call pos:start="2925:29" pos:end="2925:47"><name pos:start="2925:29" pos:end="2925:41">tcg_temp_free</name><argument_list pos:start="2925:42" pos:end="2925:47">(<argument pos:start="2925:43" pos:end="2925:46"><expr pos:start="2925:43" pos:end="2925:46"><name pos:start="2925:43" pos:end="2925:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2927:29" pos:end="2931:29"><if pos:start="2927:29" pos:end="2931:29">if <condition pos:start="2927:32" pos:end="2927:53">(<expr pos:start="2927:33" pos:end="2927:52"><name pos:start="2927:33" pos:end="2927:34">op</name> <operator pos:start="2927:36" pos:end="2927:37">==</operator> <name pos:start="2927:39" pos:end="2927:52">NEON_2RM_VCLE0</name></expr>)</condition> <block pos:start="2927:55" pos:end="2931:29">{<block_content pos:start="2929:33" pos:end="2929:58">

                                <expr_stmt pos:start="2929:33" pos:end="2929:58"><expr pos:start="2929:33" pos:end="2929:57"><call pos:start="2929:33" pos:end="2929:57"><name pos:start="2929:33" pos:end="2929:47">tcg_gen_not_i32</name><argument_list pos:start="2929:48" pos:end="2929:57">(<argument pos:start="2929:49" pos:end="2929:51"><expr pos:start="2929:49" pos:end="2929:51"><name pos:start="2929:49" pos:end="2929:51">tmp</name></expr></argument>, <argument pos:start="2929:54" pos:end="2929:56"><expr pos:start="2929:54" pos:end="2929:56"><name pos:start="2929:54" pos:end="2929:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <break pos:start="2933:29" pos:end="2933:34">break;</break>

                        <case pos:start="2935:25" pos:end="2935:44">case <expr pos:start="2935:30" pos:end="2935:43"><name pos:start="2935:30" pos:end="2935:43">NEON_2RM_VCGE0</name></expr>:</case> <case pos:start="2935:46" pos:end="2935:65">case <expr pos:start="2935:51" pos:end="2935:64"><name pos:start="2935:51" pos:end="2935:64">NEON_2RM_VCLT0</name></expr>:</case>

                            <expr_stmt pos:start="2937:29" pos:end="2937:52"><expr pos:start="2937:29" pos:end="2937:51"><name pos:start="2937:29" pos:end="2937:32">tmp2</name> <operator pos:start="2937:34" pos:end="2937:34">=</operator> <call pos:start="2937:36" pos:end="2937:51"><name pos:start="2937:36" pos:end="2937:48">tcg_const_i32</name><argument_list pos:start="2937:49" pos:end="2937:51">(<argument pos:start="2937:50" pos:end="2937:50"><expr pos:start="2937:50" pos:end="2937:50"><literal type="number" pos:start="2937:50" pos:end="2937:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2939:29" pos:end="2949:29">switch<condition pos:start="2939:35" pos:end="2939:40">(<expr pos:start="2939:36" pos:end="2939:39"><name pos:start="2939:36" pos:end="2939:39">size</name></expr>)</condition> <block pos:start="2939:42" pos:end="2949:29">{<block_content pos:start="2941:29" pos:end="2947:45">

                            <case pos:start="2941:29" pos:end="2941:35">case <expr pos:start="2941:34" pos:end="2941:34"><literal type="number" pos:start="2941:34" pos:end="2941:34">0</literal></expr>:</case> <expr_stmt pos:start="2941:37" pos:end="2941:75"><expr pos:start="2941:37" pos:end="2941:74"><call pos:start="2941:37" pos:end="2941:74"><name pos:start="2941:37" pos:end="2941:58">gen_helper_neon_cge_s8</name><argument_list pos:start="2941:59" pos:end="2941:74">(<argument pos:start="2941:60" pos:end="2941:62"><expr pos:start="2941:60" pos:end="2941:62"><name pos:start="2941:60" pos:end="2941:62">tmp</name></expr></argument>, <argument pos:start="2941:65" pos:end="2941:67"><expr pos:start="2941:65" pos:end="2941:67"><name pos:start="2941:65" pos:end="2941:67">tmp</name></expr></argument>, <argument pos:start="2941:70" pos:end="2941:73"><expr pos:start="2941:70" pos:end="2941:73"><name pos:start="2941:70" pos:end="2941:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2941:77" pos:end="2941:82">break;</break>

                            <case pos:start="2943:29" pos:end="2943:35">case <expr pos:start="2943:34" pos:end="2943:34"><literal type="number" pos:start="2943:34" pos:end="2943:34">1</literal></expr>:</case> <expr_stmt pos:start="2943:37" pos:end="2943:76"><expr pos:start="2943:37" pos:end="2943:75"><call pos:start="2943:37" pos:end="2943:75"><name pos:start="2943:37" pos:end="2943:59">gen_helper_neon_cge_s16</name><argument_list pos:start="2943:60" pos:end="2943:75">(<argument pos:start="2943:61" pos:end="2943:63"><expr pos:start="2943:61" pos:end="2943:63"><name pos:start="2943:61" pos:end="2943:63">tmp</name></expr></argument>, <argument pos:start="2943:66" pos:end="2943:68"><expr pos:start="2943:66" pos:end="2943:68"><name pos:start="2943:66" pos:end="2943:68">tmp</name></expr></argument>, <argument pos:start="2943:71" pos:end="2943:74"><expr pos:start="2943:71" pos:end="2943:74"><name pos:start="2943:71" pos:end="2943:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2943:78" pos:end="2943:83">break;</break>

                            <case pos:start="2945:29" pos:end="2945:35">case <expr pos:start="2945:34" pos:end="2945:34"><literal type="number" pos:start="2945:34" pos:end="2945:34">2</literal></expr>:</case> <expr_stmt pos:start="2945:37" pos:end="2945:76"><expr pos:start="2945:37" pos:end="2945:75"><call pos:start="2945:37" pos:end="2945:75"><name pos:start="2945:37" pos:end="2945:59">gen_helper_neon_cge_s32</name><argument_list pos:start="2945:60" pos:end="2945:75">(<argument pos:start="2945:61" pos:end="2945:63"><expr pos:start="2945:61" pos:end="2945:63"><name pos:start="2945:61" pos:end="2945:63">tmp</name></expr></argument>, <argument pos:start="2945:66" pos:end="2945:68"><expr pos:start="2945:66" pos:end="2945:68"><name pos:start="2945:66" pos:end="2945:68">tmp</name></expr></argument>, <argument pos:start="2945:71" pos:end="2945:74"><expr pos:start="2945:71" pos:end="2945:74"><name pos:start="2945:71" pos:end="2945:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2945:78" pos:end="2945:83">break;</break>

                            <default pos:start="2947:29" pos:end="2947:36">default:</default> <expr_stmt pos:start="2947:38" pos:end="2947:45"><expr pos:start="2947:38" pos:end="2947:44"><call pos:start="2947:38" pos:end="2947:44"><name pos:start="2947:38" pos:end="2947:42">abort</name><argument_list pos:start="2947:43" pos:end="2947:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2951:29" pos:end="2951:48"><expr pos:start="2951:29" pos:end="2951:47"><call pos:start="2951:29" pos:end="2951:47"><name pos:start="2951:29" pos:end="2951:41">tcg_temp_free</name><argument_list pos:start="2951:42" pos:end="2951:47">(<argument pos:start="2951:43" pos:end="2951:46"><expr pos:start="2951:43" pos:end="2951:46"><name pos:start="2951:43" pos:end="2951:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2953:29" pos:end="2957:29"><if pos:start="2953:29" pos:end="2957:29">if <condition pos:start="2953:32" pos:end="2953:53">(<expr pos:start="2953:33" pos:end="2953:52"><name pos:start="2953:33" pos:end="2953:34">op</name> <operator pos:start="2953:36" pos:end="2953:37">==</operator> <name pos:start="2953:39" pos:end="2953:52">NEON_2RM_VCLT0</name></expr>)</condition> <block pos:start="2953:55" pos:end="2957:29">{<block_content pos:start="2955:33" pos:end="2955:58">

                                <expr_stmt pos:start="2955:33" pos:end="2955:58"><expr pos:start="2955:33" pos:end="2955:57"><call pos:start="2955:33" pos:end="2955:57"><name pos:start="2955:33" pos:end="2955:47">tcg_gen_not_i32</name><argument_list pos:start="2955:48" pos:end="2955:57">(<argument pos:start="2955:49" pos:end="2955:51"><expr pos:start="2955:49" pos:end="2955:51"><name pos:start="2955:49" pos:end="2955:51">tmp</name></expr></argument>, <argument pos:start="2955:54" pos:end="2955:56"><expr pos:start="2955:54" pos:end="2955:56"><name pos:start="2955:54" pos:end="2955:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <break pos:start="2959:29" pos:end="2959:34">break;</break>

                        <case pos:start="2961:25" pos:end="2961:44">case <expr pos:start="2961:30" pos:end="2961:43"><name pos:start="2961:30" pos:end="2961:43">NEON_2RM_VCEQ0</name></expr>:</case>

                            <expr_stmt pos:start="2963:29" pos:end="2963:52"><expr pos:start="2963:29" pos:end="2963:51"><name pos:start="2963:29" pos:end="2963:32">tmp2</name> <operator pos:start="2963:34" pos:end="2963:34">=</operator> <call pos:start="2963:36" pos:end="2963:51"><name pos:start="2963:36" pos:end="2963:48">tcg_const_i32</name><argument_list pos:start="2963:49" pos:end="2963:51">(<argument pos:start="2963:50" pos:end="2963:50"><expr pos:start="2963:50" pos:end="2963:50"><literal type="number" pos:start="2963:50" pos:end="2963:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2965:29" pos:end="2975:29">switch<condition pos:start="2965:35" pos:end="2965:40">(<expr pos:start="2965:36" pos:end="2965:39"><name pos:start="2965:36" pos:end="2965:39">size</name></expr>)</condition> <block pos:start="2965:42" pos:end="2975:29">{<block_content pos:start="2967:29" pos:end="2973:45">

                            <case pos:start="2967:29" pos:end="2967:35">case <expr pos:start="2967:34" pos:end="2967:34"><literal type="number" pos:start="2967:34" pos:end="2967:34">0</literal></expr>:</case> <expr_stmt pos:start="2967:37" pos:end="2967:75"><expr pos:start="2967:37" pos:end="2967:74"><call pos:start="2967:37" pos:end="2967:74"><name pos:start="2967:37" pos:end="2967:58">gen_helper_neon_ceq_u8</name><argument_list pos:start="2967:59" pos:end="2967:74">(<argument pos:start="2967:60" pos:end="2967:62"><expr pos:start="2967:60" pos:end="2967:62"><name pos:start="2967:60" pos:end="2967:62">tmp</name></expr></argument>, <argument pos:start="2967:65" pos:end="2967:67"><expr pos:start="2967:65" pos:end="2967:67"><name pos:start="2967:65" pos:end="2967:67">tmp</name></expr></argument>, <argument pos:start="2967:70" pos:end="2967:73"><expr pos:start="2967:70" pos:end="2967:73"><name pos:start="2967:70" pos:end="2967:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2967:77" pos:end="2967:82">break;</break>

                            <case pos:start="2969:29" pos:end="2969:35">case <expr pos:start="2969:34" pos:end="2969:34"><literal type="number" pos:start="2969:34" pos:end="2969:34">1</literal></expr>:</case> <expr_stmt pos:start="2969:37" pos:end="2969:76"><expr pos:start="2969:37" pos:end="2969:75"><call pos:start="2969:37" pos:end="2969:75"><name pos:start="2969:37" pos:end="2969:59">gen_helper_neon_ceq_u16</name><argument_list pos:start="2969:60" pos:end="2969:75">(<argument pos:start="2969:61" pos:end="2969:63"><expr pos:start="2969:61" pos:end="2969:63"><name pos:start="2969:61" pos:end="2969:63">tmp</name></expr></argument>, <argument pos:start="2969:66" pos:end="2969:68"><expr pos:start="2969:66" pos:end="2969:68"><name pos:start="2969:66" pos:end="2969:68">tmp</name></expr></argument>, <argument pos:start="2969:71" pos:end="2969:74"><expr pos:start="2969:71" pos:end="2969:74"><name pos:start="2969:71" pos:end="2969:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2969:78" pos:end="2969:83">break;</break>

                            <case pos:start="2971:29" pos:end="2971:35">case <expr pos:start="2971:34" pos:end="2971:34"><literal type="number" pos:start="2971:34" pos:end="2971:34">2</literal></expr>:</case> <expr_stmt pos:start="2971:37" pos:end="2971:76"><expr pos:start="2971:37" pos:end="2971:75"><call pos:start="2971:37" pos:end="2971:75"><name pos:start="2971:37" pos:end="2971:59">gen_helper_neon_ceq_u32</name><argument_list pos:start="2971:60" pos:end="2971:75">(<argument pos:start="2971:61" pos:end="2971:63"><expr pos:start="2971:61" pos:end="2971:63"><name pos:start="2971:61" pos:end="2971:63">tmp</name></expr></argument>, <argument pos:start="2971:66" pos:end="2971:68"><expr pos:start="2971:66" pos:end="2971:68"><name pos:start="2971:66" pos:end="2971:68">tmp</name></expr></argument>, <argument pos:start="2971:71" pos:end="2971:74"><expr pos:start="2971:71" pos:end="2971:74"><name pos:start="2971:71" pos:end="2971:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2971:78" pos:end="2971:83">break;</break>

                            <default pos:start="2973:29" pos:end="2973:36">default:</default> <expr_stmt pos:start="2973:38" pos:end="2973:45"><expr pos:start="2973:38" pos:end="2973:44"><call pos:start="2973:38" pos:end="2973:44"><name pos:start="2973:38" pos:end="2973:42">abort</name><argument_list pos:start="2973:43" pos:end="2973:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2977:29" pos:end="2977:48"><expr pos:start="2977:29" pos:end="2977:47"><call pos:start="2977:29" pos:end="2977:47"><name pos:start="2977:29" pos:end="2977:41">tcg_temp_free</name><argument_list pos:start="2977:42" pos:end="2977:47">(<argument pos:start="2977:43" pos:end="2977:46"><expr pos:start="2977:43" pos:end="2977:46"><name pos:start="2977:43" pos:end="2977:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2979:29" pos:end="2979:34">break;</break>

                        <case pos:start="2981:25" pos:end="2981:43">case <expr pos:start="2981:30" pos:end="2981:42"><name pos:start="2981:30" pos:end="2981:42">NEON_2RM_VABS</name></expr>:</case>

                            <switch pos:start="2983:29" pos:end="2993:29">switch<condition pos:start="2983:35" pos:end="2983:40">(<expr pos:start="2983:36" pos:end="2983:39"><name pos:start="2983:36" pos:end="2983:39">size</name></expr>)</condition> <block pos:start="2983:42" pos:end="2993:29">{<block_content pos:start="2985:29" pos:end="2991:45">

                            <case pos:start="2985:29" pos:end="2985:35">case <expr pos:start="2985:34" pos:end="2985:34"><literal type="number" pos:start="2985:34" pos:end="2985:34">0</literal></expr>:</case> <expr_stmt pos:start="2985:37" pos:end="2985:69"><expr pos:start="2985:37" pos:end="2985:68"><call pos:start="2985:37" pos:end="2985:68"><name pos:start="2985:37" pos:end="2985:58">gen_helper_neon_abs_s8</name><argument_list pos:start="2985:59" pos:end="2985:68">(<argument pos:start="2985:60" pos:end="2985:62"><expr pos:start="2985:60" pos:end="2985:62"><name pos:start="2985:60" pos:end="2985:62">tmp</name></expr></argument>, <argument pos:start="2985:65" pos:end="2985:67"><expr pos:start="2985:65" pos:end="2985:67"><name pos:start="2985:65" pos:end="2985:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2985:71" pos:end="2985:76">break;</break>

                            <case pos:start="2987:29" pos:end="2987:35">case <expr pos:start="2987:34" pos:end="2987:34"><literal type="number" pos:start="2987:34" pos:end="2987:34">1</literal></expr>:</case> <expr_stmt pos:start="2987:37" pos:end="2987:70"><expr pos:start="2987:37" pos:end="2987:69"><call pos:start="2987:37" pos:end="2987:69"><name pos:start="2987:37" pos:end="2987:59">gen_helper_neon_abs_s16</name><argument_list pos:start="2987:60" pos:end="2987:69">(<argument pos:start="2987:61" pos:end="2987:63"><expr pos:start="2987:61" pos:end="2987:63"><name pos:start="2987:61" pos:end="2987:63">tmp</name></expr></argument>, <argument pos:start="2987:66" pos:end="2987:68"><expr pos:start="2987:66" pos:end="2987:68"><name pos:start="2987:66" pos:end="2987:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2987:72" pos:end="2987:77">break;</break>

                            <case pos:start="2989:29" pos:end="2989:35">case <expr pos:start="2989:34" pos:end="2989:34"><literal type="number" pos:start="2989:34" pos:end="2989:34">2</literal></expr>:</case> <expr_stmt pos:start="2989:37" pos:end="2989:62"><expr pos:start="2989:37" pos:end="2989:61"><call pos:start="2989:37" pos:end="2989:61"><name pos:start="2989:37" pos:end="2989:51">tcg_gen_abs_i32</name><argument_list pos:start="2989:52" pos:end="2989:61">(<argument pos:start="2989:53" pos:end="2989:55"><expr pos:start="2989:53" pos:end="2989:55"><name pos:start="2989:53" pos:end="2989:55">tmp</name></expr></argument>, <argument pos:start="2989:58" pos:end="2989:60"><expr pos:start="2989:58" pos:end="2989:60"><name pos:start="2989:58" pos:end="2989:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2989:64" pos:end="2989:69">break;</break>

                            <default pos:start="2991:29" pos:end="2991:36">default:</default> <expr_stmt pos:start="2991:38" pos:end="2991:45"><expr pos:start="2991:38" pos:end="2991:44"><call pos:start="2991:38" pos:end="2991:44"><name pos:start="2991:38" pos:end="2991:42">abort</name><argument_list pos:start="2991:43" pos:end="2991:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <break pos:start="2995:29" pos:end="2995:34">break;</break>

                        <case pos:start="2997:25" pos:end="2997:43">case <expr pos:start="2997:30" pos:end="2997:42"><name pos:start="2997:30" pos:end="2997:42">NEON_2RM_VNEG</name></expr>:</case>

                            <expr_stmt pos:start="2999:29" pos:end="2999:52"><expr pos:start="2999:29" pos:end="2999:51"><name pos:start="2999:29" pos:end="2999:32">tmp2</name> <operator pos:start="2999:34" pos:end="2999:34">=</operator> <call pos:start="2999:36" pos:end="2999:51"><name pos:start="2999:36" pos:end="2999:48">tcg_const_i32</name><argument_list pos:start="2999:49" pos:end="2999:51">(<argument pos:start="2999:50" pos:end="2999:50"><expr pos:start="2999:50" pos:end="2999:50"><literal type="number" pos:start="2999:50" pos:end="2999:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3001:29" pos:end="3001:58"><expr pos:start="3001:29" pos:end="3001:57"><call pos:start="3001:29" pos:end="3001:57"><name pos:start="3001:29" pos:end="3001:40">gen_neon_rsb</name><argument_list pos:start="3001:41" pos:end="3001:57">(<argument pos:start="3001:42" pos:end="3001:45"><expr pos:start="3001:42" pos:end="3001:45"><name pos:start="3001:42" pos:end="3001:45">size</name></expr></argument>, <argument pos:start="3001:48" pos:end="3001:50"><expr pos:start="3001:48" pos:end="3001:50"><name pos:start="3001:48" pos:end="3001:50">tmp</name></expr></argument>, <argument pos:start="3001:53" pos:end="3001:56"><expr pos:start="3001:53" pos:end="3001:56"><name pos:start="3001:53" pos:end="3001:56">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3003:29" pos:end="3003:48"><expr pos:start="3003:29" pos:end="3003:47"><call pos:start="3003:29" pos:end="3003:47"><name pos:start="3003:29" pos:end="3003:41">tcg_temp_free</name><argument_list pos:start="3003:42" pos:end="3003:47">(<argument pos:start="3003:43" pos:end="3003:46"><expr pos:start="3003:43" pos:end="3003:46"><name pos:start="3003:43" pos:end="3003:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3005:29" pos:end="3005:34">break;</break>

                        <case pos:start="3007:25" pos:end="3007:46">case <expr pos:start="3007:30" pos:end="3007:45"><name pos:start="3007:30" pos:end="3007:45">NEON_2RM_VCGT0_F</name></expr>:</case>

                            <expr_stmt pos:start="3009:29" pos:end="3009:52"><expr pos:start="3009:29" pos:end="3009:51"><name pos:start="3009:29" pos:end="3009:32">tmp2</name> <operator pos:start="3009:34" pos:end="3009:34">=</operator> <call pos:start="3009:36" pos:end="3009:51"><name pos:start="3009:36" pos:end="3009:48">tcg_const_i32</name><argument_list pos:start="3009:49" pos:end="3009:51">(<argument pos:start="3009:50" pos:end="3009:50"><expr pos:start="3009:50" pos:end="3009:50"><literal type="number" pos:start="3009:50" pos:end="3009:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3011:29" pos:end="3011:68"><expr pos:start="3011:29" pos:end="3011:67"><call pos:start="3011:29" pos:end="3011:67"><name pos:start="3011:29" pos:end="3011:51">gen_helper_neon_cgt_f32</name><argument_list pos:start="3011:52" pos:end="3011:67">(<argument pos:start="3011:53" pos:end="3011:55"><expr pos:start="3011:53" pos:end="3011:55"><name pos:start="3011:53" pos:end="3011:55">tmp</name></expr></argument>, <argument pos:start="3011:58" pos:end="3011:60"><expr pos:start="3011:58" pos:end="3011:60"><name pos:start="3011:58" pos:end="3011:60">tmp</name></expr></argument>, <argument pos:start="3011:63" pos:end="3011:66"><expr pos:start="3011:63" pos:end="3011:66"><name pos:start="3011:63" pos:end="3011:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3013:29" pos:end="3013:48"><expr pos:start="3013:29" pos:end="3013:47"><call pos:start="3013:29" pos:end="3013:47"><name pos:start="3013:29" pos:end="3013:41">tcg_temp_free</name><argument_list pos:start="3013:42" pos:end="3013:47">(<argument pos:start="3013:43" pos:end="3013:46"><expr pos:start="3013:43" pos:end="3013:46"><name pos:start="3013:43" pos:end="3013:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3015:29" pos:end="3015:34">break;</break>

                        <case pos:start="3017:25" pos:end="3017:46">case <expr pos:start="3017:30" pos:end="3017:45"><name pos:start="3017:30" pos:end="3017:45">NEON_2RM_VCGE0_F</name></expr>:</case>

                            <expr_stmt pos:start="3019:29" pos:end="3019:52"><expr pos:start="3019:29" pos:end="3019:51"><name pos:start="3019:29" pos:end="3019:32">tmp2</name> <operator pos:start="3019:34" pos:end="3019:34">=</operator> <call pos:start="3019:36" pos:end="3019:51"><name pos:start="3019:36" pos:end="3019:48">tcg_const_i32</name><argument_list pos:start="3019:49" pos:end="3019:51">(<argument pos:start="3019:50" pos:end="3019:50"><expr pos:start="3019:50" pos:end="3019:50"><literal type="number" pos:start="3019:50" pos:end="3019:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3021:29" pos:end="3021:68"><expr pos:start="3021:29" pos:end="3021:67"><call pos:start="3021:29" pos:end="3021:67"><name pos:start="3021:29" pos:end="3021:51">gen_helper_neon_cge_f32</name><argument_list pos:start="3021:52" pos:end="3021:67">(<argument pos:start="3021:53" pos:end="3021:55"><expr pos:start="3021:53" pos:end="3021:55"><name pos:start="3021:53" pos:end="3021:55">tmp</name></expr></argument>, <argument pos:start="3021:58" pos:end="3021:60"><expr pos:start="3021:58" pos:end="3021:60"><name pos:start="3021:58" pos:end="3021:60">tmp</name></expr></argument>, <argument pos:start="3021:63" pos:end="3021:66"><expr pos:start="3021:63" pos:end="3021:66"><name pos:start="3021:63" pos:end="3021:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3023:29" pos:end="3023:48"><expr pos:start="3023:29" pos:end="3023:47"><call pos:start="3023:29" pos:end="3023:47"><name pos:start="3023:29" pos:end="3023:41">tcg_temp_free</name><argument_list pos:start="3023:42" pos:end="3023:47">(<argument pos:start="3023:43" pos:end="3023:46"><expr pos:start="3023:43" pos:end="3023:46"><name pos:start="3023:43" pos:end="3023:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3025:29" pos:end="3025:34">break;</break>

                        <case pos:start="3027:25" pos:end="3027:46">case <expr pos:start="3027:30" pos:end="3027:45"><name pos:start="3027:30" pos:end="3027:45">NEON_2RM_VCEQ0_F</name></expr>:</case>

                            <expr_stmt pos:start="3029:29" pos:end="3029:52"><expr pos:start="3029:29" pos:end="3029:51"><name pos:start="3029:29" pos:end="3029:32">tmp2</name> <operator pos:start="3029:34" pos:end="3029:34">=</operator> <call pos:start="3029:36" pos:end="3029:51"><name pos:start="3029:36" pos:end="3029:48">tcg_const_i32</name><argument_list pos:start="3029:49" pos:end="3029:51">(<argument pos:start="3029:50" pos:end="3029:50"><expr pos:start="3029:50" pos:end="3029:50"><literal type="number" pos:start="3029:50" pos:end="3029:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3031:29" pos:end="3031:68"><expr pos:start="3031:29" pos:end="3031:67"><call pos:start="3031:29" pos:end="3031:67"><name pos:start="3031:29" pos:end="3031:51">gen_helper_neon_ceq_f32</name><argument_list pos:start="3031:52" pos:end="3031:67">(<argument pos:start="3031:53" pos:end="3031:55"><expr pos:start="3031:53" pos:end="3031:55"><name pos:start="3031:53" pos:end="3031:55">tmp</name></expr></argument>, <argument pos:start="3031:58" pos:end="3031:60"><expr pos:start="3031:58" pos:end="3031:60"><name pos:start="3031:58" pos:end="3031:60">tmp</name></expr></argument>, <argument pos:start="3031:63" pos:end="3031:66"><expr pos:start="3031:63" pos:end="3031:66"><name pos:start="3031:63" pos:end="3031:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3033:29" pos:end="3033:48"><expr pos:start="3033:29" pos:end="3033:47"><call pos:start="3033:29" pos:end="3033:47"><name pos:start="3033:29" pos:end="3033:41">tcg_temp_free</name><argument_list pos:start="3033:42" pos:end="3033:47">(<argument pos:start="3033:43" pos:end="3033:46"><expr pos:start="3033:43" pos:end="3033:46"><name pos:start="3033:43" pos:end="3033:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3035:29" pos:end="3035:34">break;</break>

                        <case pos:start="3037:25" pos:end="3037:46">case <expr pos:start="3037:30" pos:end="3037:45"><name pos:start="3037:30" pos:end="3037:45">NEON_2RM_VCLE0_F</name></expr>:</case>

                            <expr_stmt pos:start="3039:29" pos:end="3039:52"><expr pos:start="3039:29" pos:end="3039:51"><name pos:start="3039:29" pos:end="3039:32">tmp2</name> <operator pos:start="3039:34" pos:end="3039:34">=</operator> <call pos:start="3039:36" pos:end="3039:51"><name pos:start="3039:36" pos:end="3039:48">tcg_const_i32</name><argument_list pos:start="3039:49" pos:end="3039:51">(<argument pos:start="3039:50" pos:end="3039:50"><expr pos:start="3039:50" pos:end="3039:50"><literal type="number" pos:start="3039:50" pos:end="3039:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3041:29" pos:end="3041:68"><expr pos:start="3041:29" pos:end="3041:67"><call pos:start="3041:29" pos:end="3041:67"><name pos:start="3041:29" pos:end="3041:51">gen_helper_neon_cge_f32</name><argument_list pos:start="3041:52" pos:end="3041:67">(<argument pos:start="3041:53" pos:end="3041:55"><expr pos:start="3041:53" pos:end="3041:55"><name pos:start="3041:53" pos:end="3041:55">tmp</name></expr></argument>, <argument pos:start="3041:58" pos:end="3041:61"><expr pos:start="3041:58" pos:end="3041:61"><name pos:start="3041:58" pos:end="3041:61">tmp2</name></expr></argument>, <argument pos:start="3041:64" pos:end="3041:66"><expr pos:start="3041:64" pos:end="3041:66"><name pos:start="3041:64" pos:end="3041:66">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3043:29" pos:end="3043:48"><expr pos:start="3043:29" pos:end="3043:47"><call pos:start="3043:29" pos:end="3043:47"><name pos:start="3043:29" pos:end="3043:41">tcg_temp_free</name><argument_list pos:start="3043:42" pos:end="3043:47">(<argument pos:start="3043:43" pos:end="3043:46"><expr pos:start="3043:43" pos:end="3043:46"><name pos:start="3043:43" pos:end="3043:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3045:29" pos:end="3045:34">break;</break>

                        <case pos:start="3047:25" pos:end="3047:46">case <expr pos:start="3047:30" pos:end="3047:45"><name pos:start="3047:30" pos:end="3047:45">NEON_2RM_VCLT0_F</name></expr>:</case>

                            <expr_stmt pos:start="3049:29" pos:end="3049:52"><expr pos:start="3049:29" pos:end="3049:51"><name pos:start="3049:29" pos:end="3049:32">tmp2</name> <operator pos:start="3049:34" pos:end="3049:34">=</operator> <call pos:start="3049:36" pos:end="3049:51"><name pos:start="3049:36" pos:end="3049:48">tcg_const_i32</name><argument_list pos:start="3049:49" pos:end="3049:51">(<argument pos:start="3049:50" pos:end="3049:50"><expr pos:start="3049:50" pos:end="3049:50"><literal type="number" pos:start="3049:50" pos:end="3049:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3051:29" pos:end="3051:68"><expr pos:start="3051:29" pos:end="3051:67"><call pos:start="3051:29" pos:end="3051:67"><name pos:start="3051:29" pos:end="3051:51">gen_helper_neon_cgt_f32</name><argument_list pos:start="3051:52" pos:end="3051:67">(<argument pos:start="3051:53" pos:end="3051:55"><expr pos:start="3051:53" pos:end="3051:55"><name pos:start="3051:53" pos:end="3051:55">tmp</name></expr></argument>, <argument pos:start="3051:58" pos:end="3051:61"><expr pos:start="3051:58" pos:end="3051:61"><name pos:start="3051:58" pos:end="3051:61">tmp2</name></expr></argument>, <argument pos:start="3051:64" pos:end="3051:66"><expr pos:start="3051:64" pos:end="3051:66"><name pos:start="3051:64" pos:end="3051:66">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3053:29" pos:end="3053:48"><expr pos:start="3053:29" pos:end="3053:47"><call pos:start="3053:29" pos:end="3053:47"><name pos:start="3053:29" pos:end="3053:41">tcg_temp_free</name><argument_list pos:start="3053:42" pos:end="3053:47">(<argument pos:start="3053:43" pos:end="3053:46"><expr pos:start="3053:43" pos:end="3053:46"><name pos:start="3053:43" pos:end="3053:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3055:29" pos:end="3055:34">break;</break>

                        <case pos:start="3057:25" pos:end="3057:45">case <expr pos:start="3057:30" pos:end="3057:44"><name pos:start="3057:30" pos:end="3057:44">NEON_2RM_VABS_F</name></expr>:</case>

                            <expr_stmt pos:start="3059:29" pos:end="3059:43"><expr pos:start="3059:29" pos:end="3059:42"><call pos:start="3059:29" pos:end="3059:42"><name pos:start="3059:29" pos:end="3059:39">gen_vfp_abs</name><argument_list pos:start="3059:40" pos:end="3059:42">(<argument pos:start="3059:41" pos:end="3059:41"><expr pos:start="3059:41" pos:end="3059:41"><literal type="number" pos:start="3059:41" pos:end="3059:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3061:29" pos:end="3061:34">break;</break>

                        <case pos:start="3063:25" pos:end="3063:45">case <expr pos:start="3063:30" pos:end="3063:44"><name pos:start="3063:30" pos:end="3063:44">NEON_2RM_VNEG_F</name></expr>:</case>

                            <expr_stmt pos:start="3065:29" pos:end="3065:43"><expr pos:start="3065:29" pos:end="3065:42"><call pos:start="3065:29" pos:end="3065:42"><name pos:start="3065:29" pos:end="3065:39">gen_vfp_neg</name><argument_list pos:start="3065:40" pos:end="3065:42">(<argument pos:start="3065:41" pos:end="3065:41"><expr pos:start="3065:41" pos:end="3065:41"><literal type="number" pos:start="3065:41" pos:end="3065:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3067:29" pos:end="3067:34">break;</break>

                        <case pos:start="3069:25" pos:end="3069:43">case <expr pos:start="3069:30" pos:end="3069:42"><name pos:start="3069:30" pos:end="3069:42">NEON_2RM_VSWP</name></expr>:</case>

                            <expr_stmt pos:start="3071:29" pos:end="3071:59"><expr pos:start="3071:29" pos:end="3071:58"><name pos:start="3071:29" pos:end="3071:32">tmp2</name> <operator pos:start="3071:34" pos:end="3071:34">=</operator> <call pos:start="3071:36" pos:end="3071:58"><name pos:start="3071:36" pos:end="3071:48">neon_load_reg</name><argument_list pos:start="3071:49" pos:end="3071:58">(<argument pos:start="3071:50" pos:end="3071:51"><expr pos:start="3071:50" pos:end="3071:51"><name pos:start="3071:50" pos:end="3071:51">rd</name></expr></argument>, <argument pos:start="3071:54" pos:end="3071:57"><expr pos:start="3071:54" pos:end="3071:57"><name pos:start="3071:54" pos:end="3071:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3073:29" pos:end="3073:59"><expr pos:start="3073:29" pos:end="3073:58"><call pos:start="3073:29" pos:end="3073:58"><name pos:start="3073:29" pos:end="3073:42">neon_store_reg</name><argument_list pos:start="3073:43" pos:end="3073:58">(<argument pos:start="3073:44" pos:end="3073:45"><expr pos:start="3073:44" pos:end="3073:45"><name pos:start="3073:44" pos:end="3073:45">rm</name></expr></argument>, <argument pos:start="3073:48" pos:end="3073:51"><expr pos:start="3073:48" pos:end="3073:51"><name pos:start="3073:48" pos:end="3073:51">pass</name></expr></argument>, <argument pos:start="3073:54" pos:end="3073:57"><expr pos:start="3073:54" pos:end="3073:57"><name pos:start="3073:54" pos:end="3073:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3075:29" pos:end="3075:34">break;</break>

                        <case pos:start="3077:25" pos:end="3077:43">case <expr pos:start="3077:30" pos:end="3077:42"><name pos:start="3077:30" pos:end="3077:42">NEON_2RM_VTRN</name></expr>:</case>

                            <expr_stmt pos:start="3079:29" pos:end="3079:59"><expr pos:start="3079:29" pos:end="3079:58"><name pos:start="3079:29" pos:end="3079:32">tmp2</name> <operator pos:start="3079:34" pos:end="3079:34">=</operator> <call pos:start="3079:36" pos:end="3079:58"><name pos:start="3079:36" pos:end="3079:48">neon_load_reg</name><argument_list pos:start="3079:49" pos:end="3079:58">(<argument pos:start="3079:50" pos:end="3079:51"><expr pos:start="3079:50" pos:end="3079:51"><name pos:start="3079:50" pos:end="3079:51">rd</name></expr></argument>, <argument pos:start="3079:54" pos:end="3079:57"><expr pos:start="3079:54" pos:end="3079:57"><name pos:start="3079:54" pos:end="3079:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="3081:29" pos:end="3089:29">switch <condition pos:start="3081:36" pos:end="3081:41">(<expr pos:start="3081:37" pos:end="3081:40"><name pos:start="3081:37" pos:end="3081:40">size</name></expr>)</condition> <block pos:start="3081:43" pos:end="3089:29">{<block_content pos:start="3083:29" pos:end="3087:45">

                            <case pos:start="3083:29" pos:end="3083:35">case <expr pos:start="3083:34" pos:end="3083:34"><literal type="number" pos:start="3083:34" pos:end="3083:34">0</literal></expr>:</case> <expr_stmt pos:start="3083:37" pos:end="3083:63"><expr pos:start="3083:37" pos:end="3083:62"><call pos:start="3083:37" pos:end="3083:62"><name pos:start="3083:37" pos:end="3083:51">gen_neon_trn_u8</name><argument_list pos:start="3083:52" pos:end="3083:62">(<argument pos:start="3083:53" pos:end="3083:55"><expr pos:start="3083:53" pos:end="3083:55"><name pos:start="3083:53" pos:end="3083:55">tmp</name></expr></argument>, <argument pos:start="3083:58" pos:end="3083:61"><expr pos:start="3083:58" pos:end="3083:61"><name pos:start="3083:58" pos:end="3083:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3083:65" pos:end="3083:70">break;</break>

                            <case pos:start="3085:29" pos:end="3085:35">case <expr pos:start="3085:34" pos:end="3085:34"><literal type="number" pos:start="3085:34" pos:end="3085:34">1</literal></expr>:</case> <expr_stmt pos:start="3085:37" pos:end="3085:64"><expr pos:start="3085:37" pos:end="3085:63"><call pos:start="3085:37" pos:end="3085:63"><name pos:start="3085:37" pos:end="3085:52">gen_neon_trn_u16</name><argument_list pos:start="3085:53" pos:end="3085:63">(<argument pos:start="3085:54" pos:end="3085:56"><expr pos:start="3085:54" pos:end="3085:56"><name pos:start="3085:54" pos:end="3085:56">tmp</name></expr></argument>, <argument pos:start="3085:59" pos:end="3085:62"><expr pos:start="3085:59" pos:end="3085:62"><name pos:start="3085:59" pos:end="3085:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="3085:66" pos:end="3085:71">break;</break>

                            <default pos:start="3087:29" pos:end="3087:36">default:</default> <expr_stmt pos:start="3087:38" pos:end="3087:45"><expr pos:start="3087:38" pos:end="3087:44"><call pos:start="3087:38" pos:end="3087:44"><name pos:start="3087:38" pos:end="3087:42">abort</name><argument_list pos:start="3087:43" pos:end="3087:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="3091:29" pos:end="3091:59"><expr pos:start="3091:29" pos:end="3091:58"><call pos:start="3091:29" pos:end="3091:58"><name pos:start="3091:29" pos:end="3091:42">neon_store_reg</name><argument_list pos:start="3091:43" pos:end="3091:58">(<argument pos:start="3091:44" pos:end="3091:45"><expr pos:start="3091:44" pos:end="3091:45"><name pos:start="3091:44" pos:end="3091:45">rm</name></expr></argument>, <argument pos:start="3091:48" pos:end="3091:51"><expr pos:start="3091:48" pos:end="3091:51"><name pos:start="3091:48" pos:end="3091:51">pass</name></expr></argument>, <argument pos:start="3091:54" pos:end="3091:57"><expr pos:start="3091:54" pos:end="3091:57"><name pos:start="3091:54" pos:end="3091:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3093:29" pos:end="3093:34">break;</break>

                        <case pos:start="3095:25" pos:end="3095:45">case <expr pos:start="3095:30" pos:end="3095:44"><name pos:start="3095:30" pos:end="3095:44">NEON_2RM_VRECPE</name></expr>:</case>

                            <expr_stmt pos:start="3097:29" pos:end="3097:68"><expr pos:start="3097:29" pos:end="3097:67"><call pos:start="3097:29" pos:end="3097:67"><name pos:start="3097:29" pos:end="3097:48">gen_helper_recpe_u32</name><argument_list pos:start="3097:49" pos:end="3097:67">(<argument pos:start="3097:50" pos:end="3097:52"><expr pos:start="3097:50" pos:end="3097:52"><name pos:start="3097:50" pos:end="3097:52">tmp</name></expr></argument>, <argument pos:start="3097:55" pos:end="3097:57"><expr pos:start="3097:55" pos:end="3097:57"><name pos:start="3097:55" pos:end="3097:57">tmp</name></expr></argument>, <argument pos:start="3097:60" pos:end="3097:66"><expr pos:start="3097:60" pos:end="3097:66"><name pos:start="3097:60" pos:end="3097:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3099:29" pos:end="3099:34">break;</break>

                        <case pos:start="3101:25" pos:end="3101:46">case <expr pos:start="3101:30" pos:end="3101:45"><name pos:start="3101:30" pos:end="3101:45">NEON_2RM_VRSQRTE</name></expr>:</case>

                            <expr_stmt pos:start="3103:29" pos:end="3103:69"><expr pos:start="3103:29" pos:end="3103:68"><call pos:start="3103:29" pos:end="3103:68"><name pos:start="3103:29" pos:end="3103:49">gen_helper_rsqrte_u32</name><argument_list pos:start="3103:50" pos:end="3103:68">(<argument pos:start="3103:51" pos:end="3103:53"><expr pos:start="3103:51" pos:end="3103:53"><name pos:start="3103:51" pos:end="3103:53">tmp</name></expr></argument>, <argument pos:start="3103:56" pos:end="3103:58"><expr pos:start="3103:56" pos:end="3103:58"><name pos:start="3103:56" pos:end="3103:58">tmp</name></expr></argument>, <argument pos:start="3103:61" pos:end="3103:67"><expr pos:start="3103:61" pos:end="3103:67"><name pos:start="3103:61" pos:end="3103:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3105:29" pos:end="3105:34">break;</break>

                        <case pos:start="3107:25" pos:end="3107:47">case <expr pos:start="3107:30" pos:end="3107:46"><name pos:start="3107:30" pos:end="3107:46">NEON_2RM_VRECPE_F</name></expr>:</case>

                            <expr_stmt pos:start="3109:29" pos:end="3109:76"><expr pos:start="3109:29" pos:end="3109:75"><call pos:start="3109:29" pos:end="3109:75"><name pos:start="3109:29" pos:end="3109:48">gen_helper_recpe_f32</name><argument_list pos:start="3109:49" pos:end="3109:75">(<argument pos:start="3109:50" pos:end="3109:56"><expr pos:start="3109:50" pos:end="3109:56"><name pos:start="3109:50" pos:end="3109:56">cpu_F0s</name></expr></argument>, <argument pos:start="3109:59" pos:end="3109:65"><expr pos:start="3109:59" pos:end="3109:65"><name pos:start="3109:59" pos:end="3109:65">cpu_F0s</name></expr></argument>, <argument pos:start="3109:68" pos:end="3109:74"><expr pos:start="3109:68" pos:end="3109:74"><name pos:start="3109:68" pos:end="3109:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3111:29" pos:end="3111:34">break;</break>

                        <case pos:start="3113:25" pos:end="3113:48">case <expr pos:start="3113:30" pos:end="3113:47"><name pos:start="3113:30" pos:end="3113:47">NEON_2RM_VRSQRTE_F</name></expr>:</case>

                            <expr_stmt pos:start="3115:29" pos:end="3115:77"><expr pos:start="3115:29" pos:end="3115:76"><call pos:start="3115:29" pos:end="3115:76"><name pos:start="3115:29" pos:end="3115:49">gen_helper_rsqrte_f32</name><argument_list pos:start="3115:50" pos:end="3115:76">(<argument pos:start="3115:51" pos:end="3115:57"><expr pos:start="3115:51" pos:end="3115:57"><name pos:start="3115:51" pos:end="3115:57">cpu_F0s</name></expr></argument>, <argument pos:start="3115:60" pos:end="3115:66"><expr pos:start="3115:60" pos:end="3115:66"><name pos:start="3115:60" pos:end="3115:66">cpu_F0s</name></expr></argument>, <argument pos:start="3115:69" pos:end="3115:75"><expr pos:start="3115:69" pos:end="3115:75"><name pos:start="3115:69" pos:end="3115:75">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3117:29" pos:end="3117:34">break;</break>

                        <case pos:start="3119:25" pos:end="3119:46">case <expr pos:start="3119:30" pos:end="3119:45"><name pos:start="3119:30" pos:end="3119:45">NEON_2RM_VCVT_FS</name></expr>:</case> <comment type="block" pos:start="3119:48" pos:end="3119:65">/* VCVT.F32.S32 */</comment>

                            <expr_stmt pos:start="3121:29" pos:end="3121:44"><expr pos:start="3121:29" pos:end="3121:43"><call pos:start="3121:29" pos:end="3121:43"><name pos:start="3121:29" pos:end="3121:40">gen_vfp_sito</name><argument_list pos:start="3121:41" pos:end="3121:43">(<argument pos:start="3121:42" pos:end="3121:42"><expr pos:start="3121:42" pos:end="3121:42"><literal type="number" pos:start="3121:42" pos:end="3121:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3123:29" pos:end="3123:34">break;</break>

                        <case pos:start="3125:25" pos:end="3125:46">case <expr pos:start="3125:30" pos:end="3125:45"><name pos:start="3125:30" pos:end="3125:45">NEON_2RM_VCVT_FU</name></expr>:</case> <comment type="block" pos:start="3125:48" pos:end="3125:65">/* VCVT.F32.U32 */</comment>

                            <expr_stmt pos:start="3127:29" pos:end="3127:44"><expr pos:start="3127:29" pos:end="3127:43"><call pos:start="3127:29" pos:end="3127:43"><name pos:start="3127:29" pos:end="3127:40">gen_vfp_uito</name><argument_list pos:start="3127:41" pos:end="3127:43">(<argument pos:start="3127:42" pos:end="3127:42"><expr pos:start="3127:42" pos:end="3127:42"><literal type="number" pos:start="3127:42" pos:end="3127:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3129:29" pos:end="3129:34">break;</break>

                        <case pos:start="3131:25" pos:end="3131:46">case <expr pos:start="3131:30" pos:end="3131:45"><name pos:start="3131:30" pos:end="3131:45">NEON_2RM_VCVT_SF</name></expr>:</case> <comment type="block" pos:start="3131:48" pos:end="3131:65">/* VCVT.S32.F32 */</comment>

                            <expr_stmt pos:start="3133:29" pos:end="3133:45"><expr pos:start="3133:29" pos:end="3133:44"><call pos:start="3133:29" pos:end="3133:44"><name pos:start="3133:29" pos:end="3133:41">gen_vfp_tosiz</name><argument_list pos:start="3133:42" pos:end="3133:44">(<argument pos:start="3133:43" pos:end="3133:43"><expr pos:start="3133:43" pos:end="3133:43"><literal type="number" pos:start="3133:43" pos:end="3133:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3135:29" pos:end="3135:34">break;</break>

                        <case pos:start="3137:25" pos:end="3137:46">case <expr pos:start="3137:30" pos:end="3137:45"><name pos:start="3137:30" pos:end="3137:45">NEON_2RM_VCVT_UF</name></expr>:</case> <comment type="block" pos:start="3137:48" pos:end="3137:65">/* VCVT.U32.F32 */</comment>

                            <expr_stmt pos:start="3139:29" pos:end="3139:45"><expr pos:start="3139:29" pos:end="3139:44"><call pos:start="3139:29" pos:end="3139:44"><name pos:start="3139:29" pos:end="3139:41">gen_vfp_touiz</name><argument_list pos:start="3139:42" pos:end="3139:44">(<argument pos:start="3139:43" pos:end="3139:43"><expr pos:start="3139:43" pos:end="3139:43"><literal type="number" pos:start="3139:43" pos:end="3139:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3141:29" pos:end="3141:34">break;</break>

                        <default pos:start="3143:25" pos:end="3143:32">default:</default>

                            <comment type="block" pos:start="3145:29" pos:end="3149:31">/* Reserved op values were caught by the

                             * neon_2rm_sizes[] check earlier.

                             */</comment>

                            <expr_stmt pos:start="3151:29" pos:end="3151:36"><expr pos:start="3151:29" pos:end="3151:35"><call pos:start="3151:29" pos:end="3151:35"><name pos:start="3151:29" pos:end="3151:33">abort</name><argument_list pos:start="3151:34" pos:end="3151:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="3155:25" pos:end="3165:25"><if pos:start="3155:25" pos:end="3161:25">if <condition pos:start="3155:28" pos:end="3155:53">(<expr pos:start="3155:29" pos:end="3155:52"><call pos:start="3155:29" pos:end="3155:52"><name pos:start="3155:29" pos:end="3155:48">neon_2rm_is_float_op</name><argument_list pos:start="3155:49" pos:end="3155:52">(<argument pos:start="3155:50" pos:end="3155:51"><expr pos:start="3155:50" pos:end="3155:51"><name pos:start="3155:50" pos:end="3155:51">op</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3155:55" pos:end="3161:25">{<block_content pos:start="3157:29" pos:end="3159:70">

                            <expr_stmt pos:start="3157:29" pos:end="3159:70"><expr pos:start="3157:29" pos:end="3159:69"><call pos:start="3157:29" pos:end="3159:69"><name pos:start="3157:29" pos:end="3157:42">tcg_gen_st_f32</name><argument_list pos:start="3157:43" pos:end="3159:69">(<argument pos:start="3157:44" pos:end="3157:50"><expr pos:start="3157:44" pos:end="3157:50"><name pos:start="3157:44" pos:end="3157:50">cpu_F0s</name></expr></argument>, <argument pos:start="3157:53" pos:end="3157:59"><expr pos:start="3157:53" pos:end="3157:59"><name pos:start="3157:53" pos:end="3157:59">cpu_env</name></expr></argument>,

                                           <argument pos:start="3159:44" pos:end="3159:68"><expr pos:start="3159:44" pos:end="3159:68"><call pos:start="3159:44" pos:end="3159:68"><name pos:start="3159:44" pos:end="3159:58">neon_reg_offset</name><argument_list pos:start="3159:59" pos:end="3159:68">(<argument pos:start="3159:60" pos:end="3159:61"><expr pos:start="3159:60" pos:end="3159:61"><name pos:start="3159:60" pos:end="3159:61">rd</name></expr></argument>, <argument pos:start="3159:64" pos:end="3159:67"><expr pos:start="3159:64" pos:end="3159:67"><name pos:start="3159:64" pos:end="3159:67">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="3161:27" pos:end="3165:25">else <block pos:start="3161:32" pos:end="3165:25">{<block_content pos:start="3163:29" pos:end="3163:58">

                            <expr_stmt pos:start="3163:29" pos:end="3163:58"><expr pos:start="3163:29" pos:end="3163:57"><call pos:start="3163:29" pos:end="3163:57"><name pos:start="3163:29" pos:end="3163:42">neon_store_reg</name><argument_list pos:start="3163:43" pos:end="3163:57">(<argument pos:start="3163:44" pos:end="3163:45"><expr pos:start="3163:44" pos:end="3163:45"><name pos:start="3163:44" pos:end="3163:45">rd</name></expr></argument>, <argument pos:start="3163:48" pos:end="3163:51"><expr pos:start="3163:48" pos:end="3163:51"><name pos:start="3163:48" pos:end="3163:51">pass</name></expr></argument>, <argument pos:start="3163:54" pos:end="3163:56"><expr pos:start="3163:54" pos:end="3163:56"><name pos:start="3163:54" pos:end="3163:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="3169:21" pos:end="3169:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="3173:15" pos:end="3227:13">else if <condition pos:start="3173:23" pos:end="3173:47">(<expr pos:start="3173:24" pos:end="3173:46"><operator pos:start="3173:24" pos:end="3173:24">(</operator><name pos:start="3173:25" pos:end="3173:28">insn</name> <operator pos:start="3173:30" pos:end="3173:30">&amp;</operator> <operator pos:start="3173:32" pos:end="3173:32">(</operator><literal type="number" pos:start="3173:33" pos:end="3173:33">1</literal> <operator pos:start="3173:35" pos:end="3173:36">&lt;&lt;</operator> <literal type="number" pos:start="3173:38" pos:end="3173:39">10</literal><operator pos:start="3173:40" pos:end="3173:40">)</operator><operator pos:start="3173:41" pos:end="3173:41">)</operator> <operator pos:start="3173:43" pos:end="3173:44">==</operator> <literal type="number" pos:start="3173:46" pos:end="3173:46">0</literal></expr>)</condition> <block pos:start="3173:49" pos:end="3227:13">{<block_content pos:start="3177:17" pos:end="3225:39">

                <comment type="block" pos:start="3175:17" pos:end="3175:34">/* VTBL, VTBX.  */</comment>

                <decl_stmt pos:start="3177:17" pos:end="3177:49"><decl pos:start="3177:17" pos:end="3177:48"><type pos:start="3177:17" pos:end="3177:19"><name pos:start="3177:17" pos:end="3177:19">int</name></type> <name pos:start="3177:21" pos:end="3177:21">n</name> <init pos:start="3177:23" pos:end="3177:48">= <expr pos:start="3177:25" pos:end="3177:48"><operator pos:start="3177:25" pos:end="3177:25">(</operator><operator pos:start="3177:26" pos:end="3177:26">(</operator><name pos:start="3177:27" pos:end="3177:30">insn</name> <operator pos:start="3177:32" pos:end="3177:33">&gt;&gt;</operator> <literal type="number" pos:start="3177:35" pos:end="3177:35">5</literal><operator pos:start="3177:36" pos:end="3177:36">)</operator> <operator pos:start="3177:38" pos:end="3177:38">&amp;</operator> <literal type="number" pos:start="3177:40" pos:end="3177:43">0x18</literal><operator pos:start="3177:44" pos:end="3177:44">)</operator> <operator pos:start="3177:46" pos:end="3177:46">+</operator> <literal type="number" pos:start="3177:48" pos:end="3177:48">8</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="3179:17" pos:end="3189:17"><if pos:start="3179:17" pos:end="3183:17">if <condition pos:start="3179:20" pos:end="3179:36">(<expr pos:start="3179:21" pos:end="3179:35"><name pos:start="3179:21" pos:end="3179:24">insn</name> <operator pos:start="3179:26" pos:end="3179:26">&amp;</operator> <operator pos:start="3179:28" pos:end="3179:28">(</operator><literal type="number" pos:start="3179:29" pos:end="3179:29">1</literal> <operator pos:start="3179:31" pos:end="3179:32">&lt;&lt;</operator> <literal type="number" pos:start="3179:34" pos:end="3179:34">6</literal><operator pos:start="3179:35" pos:end="3179:35">)</operator></expr>)</condition> <block pos:start="3179:38" pos:end="3183:17">{<block_content pos:start="3181:21" pos:end="3181:47">

                    <expr_stmt pos:start="3181:21" pos:end="3181:47"><expr pos:start="3181:21" pos:end="3181:46"><name pos:start="3181:21" pos:end="3181:23">tmp</name> <operator pos:start="3181:25" pos:end="3181:25">=</operator> <call pos:start="3181:27" pos:end="3181:46"><name pos:start="3181:27" pos:end="3181:39">neon_load_reg</name><argument_list pos:start="3181:40" pos:end="3181:46">(<argument pos:start="3181:41" pos:end="3181:42"><expr pos:start="3181:41" pos:end="3181:42"><name pos:start="3181:41" pos:end="3181:42">rd</name></expr></argument>, <argument pos:start="3181:45" pos:end="3181:45"><expr pos:start="3181:45" pos:end="3181:45"><literal type="number" pos:start="3181:45" pos:end="3181:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3183:19" pos:end="3189:17">else <block pos:start="3183:24" pos:end="3189:17">{<block_content pos:start="3185:21" pos:end="3187:45">

                    <expr_stmt pos:start="3185:21" pos:end="3185:45"><expr pos:start="3185:21" pos:end="3185:44"><name pos:start="3185:21" pos:end="3185:23">tmp</name> <operator pos:start="3185:25" pos:end="3185:25">=</operator> <call pos:start="3185:27" pos:end="3185:44"><name pos:start="3185:27" pos:end="3185:42">tcg_temp_new_i32</name><argument_list pos:start="3185:43" pos:end="3185:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3187:21" pos:end="3187:45"><expr pos:start="3187:21" pos:end="3187:44"><call pos:start="3187:21" pos:end="3187:44"><name pos:start="3187:21" pos:end="3187:36">tcg_gen_movi_i32</name><argument_list pos:start="3187:37" pos:end="3187:44">(<argument pos:start="3187:38" pos:end="3187:40"><expr pos:start="3187:38" pos:end="3187:40"><name pos:start="3187:38" pos:end="3187:40">tmp</name></expr></argument>, <argument pos:start="3187:43" pos:end="3187:43"><expr pos:start="3187:43" pos:end="3187:43"><literal type="number" pos:start="3187:43" pos:end="3187:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3191:17" pos:end="3191:44"><expr pos:start="3191:17" pos:end="3191:43"><name pos:start="3191:17" pos:end="3191:20">tmp2</name> <operator pos:start="3191:22" pos:end="3191:22">=</operator> <call pos:start="3191:24" pos:end="3191:43"><name pos:start="3191:24" pos:end="3191:36">neon_load_reg</name><argument_list pos:start="3191:37" pos:end="3191:43">(<argument pos:start="3191:38" pos:end="3191:39"><expr pos:start="3191:38" pos:end="3191:39"><name pos:start="3191:38" pos:end="3191:39">rm</name></expr></argument>, <argument pos:start="3191:42" pos:end="3191:42"><expr pos:start="3191:42" pos:end="3191:42"><literal type="number" pos:start="3191:42" pos:end="3191:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3193:17" pos:end="3193:41"><expr pos:start="3193:17" pos:end="3193:40"><name pos:start="3193:17" pos:end="3193:20">tmp4</name> <operator pos:start="3193:22" pos:end="3193:22">=</operator> <call pos:start="3193:24" pos:end="3193:40"><name pos:start="3193:24" pos:end="3193:36">tcg_const_i32</name><argument_list pos:start="3193:37" pos:end="3193:40">(<argument pos:start="3193:38" pos:end="3193:39"><expr pos:start="3193:38" pos:end="3193:39"><name pos:start="3193:38" pos:end="3193:39">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3195:17" pos:end="3195:40"><expr pos:start="3195:17" pos:end="3195:39"><name pos:start="3195:17" pos:end="3195:20">tmp5</name> <operator pos:start="3195:22" pos:end="3195:22">=</operator> <call pos:start="3195:24" pos:end="3195:39"><name pos:start="3195:24" pos:end="3195:36">tcg_const_i32</name><argument_list pos:start="3195:37" pos:end="3195:39">(<argument pos:start="3195:38" pos:end="3195:38"><expr pos:start="3195:38" pos:end="3195:38"><name pos:start="3195:38" pos:end="3195:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3197:17" pos:end="3197:65"><expr pos:start="3197:17" pos:end="3197:64"><call pos:start="3197:17" pos:end="3197:64"><name pos:start="3197:17" pos:end="3197:35">gen_helper_neon_tbl</name><argument_list pos:start="3197:36" pos:end="3197:64">(<argument pos:start="3197:37" pos:end="3197:40"><expr pos:start="3197:37" pos:end="3197:40"><name pos:start="3197:37" pos:end="3197:40">tmp2</name></expr></argument>, <argument pos:start="3197:43" pos:end="3197:46"><expr pos:start="3197:43" pos:end="3197:46"><name pos:start="3197:43" pos:end="3197:46">tmp2</name></expr></argument>, <argument pos:start="3197:49" pos:end="3197:51"><expr pos:start="3197:49" pos:end="3197:51"><name pos:start="3197:49" pos:end="3197:51">tmp</name></expr></argument>, <argument pos:start="3197:54" pos:end="3197:57"><expr pos:start="3197:54" pos:end="3197:57"><name pos:start="3197:54" pos:end="3197:57">tmp4</name></expr></argument>, <argument pos:start="3197:60" pos:end="3197:63"><expr pos:start="3197:60" pos:end="3197:63"><name pos:start="3197:60" pos:end="3197:63">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3199:17" pos:end="3199:39"><expr pos:start="3199:17" pos:end="3199:38"><call pos:start="3199:17" pos:end="3199:38"><name pos:start="3199:17" pos:end="3199:33">tcg_temp_free_i32</name><argument_list pos:start="3199:34" pos:end="3199:38">(<argument pos:start="3199:35" pos:end="3199:37"><expr pos:start="3199:35" pos:end="3199:37"><name pos:start="3199:35" pos:end="3199:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3201:17" pos:end="3211:17"><if pos:start="3201:17" pos:end="3205:17">if <condition pos:start="3201:20" pos:end="3201:36">(<expr pos:start="3201:21" pos:end="3201:35"><name pos:start="3201:21" pos:end="3201:24">insn</name> <operator pos:start="3201:26" pos:end="3201:26">&amp;</operator> <operator pos:start="3201:28" pos:end="3201:28">(</operator><literal type="number" pos:start="3201:29" pos:end="3201:29">1</literal> <operator pos:start="3201:31" pos:end="3201:32">&lt;&lt;</operator> <literal type="number" pos:start="3201:34" pos:end="3201:34">6</literal><operator pos:start="3201:35" pos:end="3201:35">)</operator></expr>)</condition> <block pos:start="3201:38" pos:end="3205:17">{<block_content pos:start="3203:21" pos:end="3203:47">

                    <expr_stmt pos:start="3203:21" pos:end="3203:47"><expr pos:start="3203:21" pos:end="3203:46"><name pos:start="3203:21" pos:end="3203:23">tmp</name> <operator pos:start="3203:25" pos:end="3203:25">=</operator> <call pos:start="3203:27" pos:end="3203:46"><name pos:start="3203:27" pos:end="3203:39">neon_load_reg</name><argument_list pos:start="3203:40" pos:end="3203:46">(<argument pos:start="3203:41" pos:end="3203:42"><expr pos:start="3203:41" pos:end="3203:42"><name pos:start="3203:41" pos:end="3203:42">rd</name></expr></argument>, <argument pos:start="3203:45" pos:end="3203:45"><expr pos:start="3203:45" pos:end="3203:45"><literal type="number" pos:start="3203:45" pos:end="3203:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3205:19" pos:end="3211:17">else <block pos:start="3205:24" pos:end="3211:17">{<block_content pos:start="3207:21" pos:end="3209:45">

                    <expr_stmt pos:start="3207:21" pos:end="3207:45"><expr pos:start="3207:21" pos:end="3207:44"><name pos:start="3207:21" pos:end="3207:23">tmp</name> <operator pos:start="3207:25" pos:end="3207:25">=</operator> <call pos:start="3207:27" pos:end="3207:44"><name pos:start="3207:27" pos:end="3207:42">tcg_temp_new_i32</name><argument_list pos:start="3207:43" pos:end="3207:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3209:21" pos:end="3209:45"><expr pos:start="3209:21" pos:end="3209:44"><call pos:start="3209:21" pos:end="3209:44"><name pos:start="3209:21" pos:end="3209:36">tcg_gen_movi_i32</name><argument_list pos:start="3209:37" pos:end="3209:44">(<argument pos:start="3209:38" pos:end="3209:40"><expr pos:start="3209:38" pos:end="3209:40"><name pos:start="3209:38" pos:end="3209:40">tmp</name></expr></argument>, <argument pos:start="3209:43" pos:end="3209:43"><expr pos:start="3209:43" pos:end="3209:43"><literal type="number" pos:start="3209:43" pos:end="3209:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3213:17" pos:end="3213:44"><expr pos:start="3213:17" pos:end="3213:43"><name pos:start="3213:17" pos:end="3213:20">tmp3</name> <operator pos:start="3213:22" pos:end="3213:22">=</operator> <call pos:start="3213:24" pos:end="3213:43"><name pos:start="3213:24" pos:end="3213:36">neon_load_reg</name><argument_list pos:start="3213:37" pos:end="3213:43">(<argument pos:start="3213:38" pos:end="3213:39"><expr pos:start="3213:38" pos:end="3213:39"><name pos:start="3213:38" pos:end="3213:39">rm</name></expr></argument>, <argument pos:start="3213:42" pos:end="3213:42"><expr pos:start="3213:42" pos:end="3213:42"><literal type="number" pos:start="3213:42" pos:end="3213:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3215:17" pos:end="3215:65"><expr pos:start="3215:17" pos:end="3215:64"><call pos:start="3215:17" pos:end="3215:64"><name pos:start="3215:17" pos:end="3215:35">gen_helper_neon_tbl</name><argument_list pos:start="3215:36" pos:end="3215:64">(<argument pos:start="3215:37" pos:end="3215:40"><expr pos:start="3215:37" pos:end="3215:40"><name pos:start="3215:37" pos:end="3215:40">tmp3</name></expr></argument>, <argument pos:start="3215:43" pos:end="3215:46"><expr pos:start="3215:43" pos:end="3215:46"><name pos:start="3215:43" pos:end="3215:46">tmp3</name></expr></argument>, <argument pos:start="3215:49" pos:end="3215:51"><expr pos:start="3215:49" pos:end="3215:51"><name pos:start="3215:49" pos:end="3215:51">tmp</name></expr></argument>, <argument pos:start="3215:54" pos:end="3215:57"><expr pos:start="3215:54" pos:end="3215:57"><name pos:start="3215:54" pos:end="3215:57">tmp4</name></expr></argument>, <argument pos:start="3215:60" pos:end="3215:63"><expr pos:start="3215:60" pos:end="3215:63"><name pos:start="3215:60" pos:end="3215:63">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3217:17" pos:end="3217:40"><expr pos:start="3217:17" pos:end="3217:39"><call pos:start="3217:17" pos:end="3217:39"><name pos:start="3217:17" pos:end="3217:33">tcg_temp_free_i32</name><argument_list pos:start="3217:34" pos:end="3217:39">(<argument pos:start="3217:35" pos:end="3217:38"><expr pos:start="3217:35" pos:end="3217:38"><name pos:start="3217:35" pos:end="3217:38">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3219:17" pos:end="3219:40"><expr pos:start="3219:17" pos:end="3219:39"><call pos:start="3219:17" pos:end="3219:39"><name pos:start="3219:17" pos:end="3219:33">tcg_temp_free_i32</name><argument_list pos:start="3219:34" pos:end="3219:39">(<argument pos:start="3219:35" pos:end="3219:38"><expr pos:start="3219:35" pos:end="3219:38"><name pos:start="3219:35" pos:end="3219:38">tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3221:17" pos:end="3221:44"><expr pos:start="3221:17" pos:end="3221:43"><call pos:start="3221:17" pos:end="3221:43"><name pos:start="3221:17" pos:end="3221:30">neon_store_reg</name><argument_list pos:start="3221:31" pos:end="3221:43">(<argument pos:start="3221:32" pos:end="3221:33"><expr pos:start="3221:32" pos:end="3221:33"><name pos:start="3221:32" pos:end="3221:33">rd</name></expr></argument>, <argument pos:start="3221:36" pos:end="3221:36"><expr pos:start="3221:36" pos:end="3221:36"><literal type="number" pos:start="3221:36" pos:end="3221:36">0</literal></expr></argument>, <argument pos:start="3221:39" pos:end="3221:42"><expr pos:start="3221:39" pos:end="3221:42"><name pos:start="3221:39" pos:end="3221:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3223:17" pos:end="3223:44"><expr pos:start="3223:17" pos:end="3223:43"><call pos:start="3223:17" pos:end="3223:43"><name pos:start="3223:17" pos:end="3223:30">neon_store_reg</name><argument_list pos:start="3223:31" pos:end="3223:43">(<argument pos:start="3223:32" pos:end="3223:33"><expr pos:start="3223:32" pos:end="3223:33"><name pos:start="3223:32" pos:end="3223:33">rd</name></expr></argument>, <argument pos:start="3223:36" pos:end="3223:36"><expr pos:start="3223:36" pos:end="3223:36"><literal type="number" pos:start="3223:36" pos:end="3223:36">1</literal></expr></argument>, <argument pos:start="3223:39" pos:end="3223:42"><expr pos:start="3223:39" pos:end="3223:42"><name pos:start="3223:39" pos:end="3223:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3225:17" pos:end="3225:39"><expr pos:start="3225:17" pos:end="3225:38"><call pos:start="3225:17" pos:end="3225:38"><name pos:start="3225:17" pos:end="3225:33">tcg_temp_free_i32</name><argument_list pos:start="3225:34" pos:end="3225:38">(<argument pos:start="3225:35" pos:end="3225:37"><expr pos:start="3225:35" pos:end="3225:37"><name pos:start="3225:35" pos:end="3225:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="3227:15" pos:end="3269:13">else if <condition pos:start="3227:23" pos:end="3227:43">(<expr pos:start="3227:24" pos:end="3227:42"><operator pos:start="3227:24" pos:end="3227:24">(</operator><name pos:start="3227:25" pos:end="3227:28">insn</name> <operator pos:start="3227:30" pos:end="3227:30">&amp;</operator> <literal type="number" pos:start="3227:32" pos:end="3227:36">0x380</literal><operator pos:start="3227:37" pos:end="3227:37">)</operator> <operator pos:start="3227:39" pos:end="3227:40">==</operator> <literal type="number" pos:start="3227:42" pos:end="3227:42">0</literal></expr>)</condition> <block pos:start="3227:45" pos:end="3269:13">{<block_content pos:start="3231:17" pos:end="3267:39">

                <comment type="block" pos:start="3229:17" pos:end="3229:26">/* VDUP */</comment>

                <if_stmt pos:start="3231:17" pos:end="3239:17"><if pos:start="3231:17" pos:end="3235:17">if <condition pos:start="3231:20" pos:end="3231:37">(<expr pos:start="3231:21" pos:end="3231:36"><name pos:start="3231:21" pos:end="3231:24">insn</name> <operator pos:start="3231:26" pos:end="3231:26">&amp;</operator> <operator pos:start="3231:28" pos:end="3231:28">(</operator><literal type="number" pos:start="3231:29" pos:end="3231:29">1</literal> <operator pos:start="3231:31" pos:end="3231:32">&lt;&lt;</operator> <literal type="number" pos:start="3231:34" pos:end="3231:35">19</literal><operator pos:start="3231:36" pos:end="3231:36">)</operator></expr>)</condition> <block pos:start="3231:39" pos:end="3235:17">{<block_content pos:start="3233:21" pos:end="3233:47">

                    <expr_stmt pos:start="3233:21" pos:end="3233:47"><expr pos:start="3233:21" pos:end="3233:46"><name pos:start="3233:21" pos:end="3233:23">tmp</name> <operator pos:start="3233:25" pos:end="3233:25">=</operator> <call pos:start="3233:27" pos:end="3233:46"><name pos:start="3233:27" pos:end="3233:39">neon_load_reg</name><argument_list pos:start="3233:40" pos:end="3233:46">(<argument pos:start="3233:41" pos:end="3233:42"><expr pos:start="3233:41" pos:end="3233:42"><name pos:start="3233:41" pos:end="3233:42">rm</name></expr></argument>, <argument pos:start="3233:45" pos:end="3233:45"><expr pos:start="3233:45" pos:end="3233:45"><literal type="number" pos:start="3233:45" pos:end="3233:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3235:19" pos:end="3239:17">else <block pos:start="3235:24" pos:end="3239:17">{<block_content pos:start="3237:21" pos:end="3237:47">

                    <expr_stmt pos:start="3237:21" pos:end="3237:47"><expr pos:start="3237:21" pos:end="3237:46"><name pos:start="3237:21" pos:end="3237:23">tmp</name> <operator pos:start="3237:25" pos:end="3237:25">=</operator> <call pos:start="3237:27" pos:end="3237:46"><name pos:start="3237:27" pos:end="3237:39">neon_load_reg</name><argument_list pos:start="3237:40" pos:end="3237:46">(<argument pos:start="3237:41" pos:end="3237:42"><expr pos:start="3237:41" pos:end="3237:42"><name pos:start="3237:41" pos:end="3237:42">rm</name></expr></argument>, <argument pos:start="3237:45" pos:end="3237:45"><expr pos:start="3237:45" pos:end="3237:45"><literal type="number" pos:start="3237:45" pos:end="3237:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="3241:17" pos:end="3255:17"><if pos:start="3241:17" pos:end="3245:17">if <condition pos:start="3241:20" pos:end="3241:37">(<expr pos:start="3241:21" pos:end="3241:36"><name pos:start="3241:21" pos:end="3241:24">insn</name> <operator pos:start="3241:26" pos:end="3241:26">&amp;</operator> <operator pos:start="3241:28" pos:end="3241:28">(</operator><literal type="number" pos:start="3241:29" pos:end="3241:29">1</literal> <operator pos:start="3241:31" pos:end="3241:32">&lt;&lt;</operator> <literal type="number" pos:start="3241:34" pos:end="3241:35">16</literal><operator pos:start="3241:36" pos:end="3241:36">)</operator></expr>)</condition> <block pos:start="3241:39" pos:end="3245:17">{<block_content pos:start="3243:21" pos:end="3243:65">

                    <expr_stmt pos:start="3243:21" pos:end="3243:65"><expr pos:start="3243:21" pos:end="3243:64"><call pos:start="3243:21" pos:end="3243:64"><name pos:start="3243:21" pos:end="3243:35">gen_neon_dup_u8</name><argument_list pos:start="3243:36" pos:end="3243:64">(<argument pos:start="3243:37" pos:end="3243:39"><expr pos:start="3243:37" pos:end="3243:39"><name pos:start="3243:37" pos:end="3243:39">tmp</name></expr></argument>, <argument pos:start="3243:42" pos:end="3243:63"><expr pos:start="3243:42" pos:end="3243:63"><operator pos:start="3243:42" pos:end="3243:42">(</operator><operator pos:start="3243:43" pos:end="3243:43">(</operator><name pos:start="3243:44" pos:end="3243:47">insn</name> <operator pos:start="3243:49" pos:end="3243:50">&gt;&gt;</operator> <literal type="number" pos:start="3243:52" pos:end="3243:53">17</literal><operator pos:start="3243:54" pos:end="3243:54">)</operator> <operator pos:start="3243:56" pos:end="3243:56">&amp;</operator> <literal type="number" pos:start="3243:58" pos:end="3243:58">3</literal><operator pos:start="3243:59" pos:end="3243:59">)</operator> <operator pos:start="3243:61" pos:end="3243:61">*</operator> <literal type="number" pos:start="3243:63" pos:end="3243:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="3245:19" pos:end="3255:17">else if <condition pos:start="3245:27" pos:end="3245:44">(<expr pos:start="3245:28" pos:end="3245:43"><name pos:start="3245:28" pos:end="3245:31">insn</name> <operator pos:start="3245:33" pos:end="3245:33">&amp;</operator> <operator pos:start="3245:35" pos:end="3245:35">(</operator><literal type="number" pos:start="3245:36" pos:end="3245:36">1</literal> <operator pos:start="3245:38" pos:end="3245:39">&lt;&lt;</operator> <literal type="number" pos:start="3245:41" pos:end="3245:42">17</literal><operator pos:start="3245:43" pos:end="3245:43">)</operator></expr>)</condition> <block pos:start="3245:46" pos:end="3255:17">{<block_content pos:start="3247:21" pos:end="3253:48">

                    <if_stmt pos:start="3247:21" pos:end="3253:48"><if pos:start="3247:21" pos:end="3249:49">if <condition pos:start="3247:24" pos:end="3247:41">(<expr pos:start="3247:25" pos:end="3247:40"><operator pos:start="3247:25" pos:end="3247:25">(</operator><name pos:start="3247:26" pos:end="3247:29">insn</name> <operator pos:start="3247:31" pos:end="3247:32">&gt;&gt;</operator> <literal type="number" pos:start="3247:34" pos:end="3247:35">18</literal><operator pos:start="3247:36" pos:end="3247:36">)</operator> <operator pos:start="3247:38" pos:end="3247:38">&amp;</operator> <literal type="number" pos:start="3247:40" pos:end="3247:40">1</literal></expr>)</condition><block type="pseudo" pos:start="3249:25" pos:end="3249:49"><block_content pos:start="3249:25" pos:end="3249:49">

                        <expr_stmt pos:start="3249:25" pos:end="3249:49"><expr pos:start="3249:25" pos:end="3249:48"><call pos:start="3249:25" pos:end="3249:48"><name pos:start="3249:25" pos:end="3249:43">gen_neon_dup_high16</name><argument_list pos:start="3249:44" pos:end="3249:48">(<argument pos:start="3249:45" pos:end="3249:47"><expr pos:start="3249:45" pos:end="3249:47"><name pos:start="3249:45" pos:end="3249:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="3251:21" pos:end="3253:48">else<block type="pseudo" pos:start="3253:25" pos:end="3253:48"><block_content pos:start="3253:25" pos:end="3253:48">

                        <expr_stmt pos:start="3253:25" pos:end="3253:48"><expr pos:start="3253:25" pos:end="3253:47"><call pos:start="3253:25" pos:end="3253:47"><name pos:start="3253:25" pos:end="3253:42">gen_neon_dup_low16</name><argument_list pos:start="3253:43" pos:end="3253:47">(<argument pos:start="3253:44" pos:end="3253:46"><expr pos:start="3253:44" pos:end="3253:46"><name pos:start="3253:44" pos:end="3253:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <for pos:start="3257:17" pos:end="3265:17">for <control pos:start="3257:21" pos:end="3257:58">(<init pos:start="3257:22" pos:end="3257:30"><expr pos:start="3257:22" pos:end="3257:29"><name pos:start="3257:22" pos:end="3257:25">pass</name> <operator pos:start="3257:27" pos:end="3257:27">=</operator> <literal type="number" pos:start="3257:29" pos:end="3257:29">0</literal></expr>;</init> <condition pos:start="3257:32" pos:end="3257:50"><expr pos:start="3257:32" pos:end="3257:49"><name pos:start="3257:32" pos:end="3257:35">pass</name> <operator pos:start="3257:37" pos:end="3257:37">&lt;</operator> <operator pos:start="3257:39" pos:end="3257:39">(</operator><ternary pos:start="3257:40" pos:end="3257:48"><condition pos:start="3257:40" pos:end="3257:42"><expr pos:start="3257:40" pos:end="3257:40"><name pos:start="3257:40" pos:end="3257:40">q</name></expr> ?</condition><then pos:start="3257:44" pos:end="3257:44"> <expr pos:start="3257:44" pos:end="3257:44"><literal type="number" pos:start="3257:44" pos:end="3257:44">4</literal></expr> </then><else pos:start="3257:46" pos:end="3257:48">: <expr pos:start="3257:48" pos:end="3257:48"><literal type="number" pos:start="3257:48" pos:end="3257:48">2</literal></expr></else></ternary><operator pos:start="3257:49" pos:end="3257:49">)</operator></expr>;</condition> <incr pos:start="3257:52" pos:end="3257:57"><expr pos:start="3257:52" pos:end="3257:57"><name pos:start="3257:52" pos:end="3257:55">pass</name><operator pos:start="3257:56" pos:end="3257:57">++</operator></expr></incr>)</control> <block pos:start="3257:60" pos:end="3265:17">{<block_content pos:start="3259:21" pos:end="3263:51">

                    <expr_stmt pos:start="3259:21" pos:end="3259:46"><expr pos:start="3259:21" pos:end="3259:45"><name pos:start="3259:21" pos:end="3259:24">tmp2</name> <operator pos:start="3259:26" pos:end="3259:26">=</operator> <call pos:start="3259:28" pos:end="3259:45"><name pos:start="3259:28" pos:end="3259:43">tcg_temp_new_i32</name><argument_list pos:start="3259:44" pos:end="3259:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3261:21" pos:end="3261:47"><expr pos:start="3261:21" pos:end="3261:46"><call pos:start="3261:21" pos:end="3261:46"><name pos:start="3261:21" pos:end="3261:35">tcg_gen_mov_i32</name><argument_list pos:start="3261:36" pos:end="3261:46">(<argument pos:start="3261:37" pos:end="3261:40"><expr pos:start="3261:37" pos:end="3261:40"><name pos:start="3261:37" pos:end="3261:40">tmp2</name></expr></argument>, <argument pos:start="3261:43" pos:end="3261:45"><expr pos:start="3261:43" pos:end="3261:45"><name pos:start="3261:43" pos:end="3261:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3263:21" pos:end="3263:51"><expr pos:start="3263:21" pos:end="3263:50"><call pos:start="3263:21" pos:end="3263:50"><name pos:start="3263:21" pos:end="3263:34">neon_store_reg</name><argument_list pos:start="3263:35" pos:end="3263:50">(<argument pos:start="3263:36" pos:end="3263:37"><expr pos:start="3263:36" pos:end="3263:37"><name pos:start="3263:36" pos:end="3263:37">rd</name></expr></argument>, <argument pos:start="3263:40" pos:end="3263:43"><expr pos:start="3263:40" pos:end="3263:43"><name pos:start="3263:40" pos:end="3263:43">pass</name></expr></argument>, <argument pos:start="3263:46" pos:end="3263:49"><expr pos:start="3263:46" pos:end="3263:49"><name pos:start="3263:46" pos:end="3263:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="3267:17" pos:end="3267:39"><expr pos:start="3267:17" pos:end="3267:38"><call pos:start="3267:17" pos:end="3267:38"><name pos:start="3267:17" pos:end="3267:33">tcg_temp_free_i32</name><argument_list pos:start="3267:34" pos:end="3267:38">(<argument pos:start="3267:35" pos:end="3267:37"><expr pos:start="3267:35" pos:end="3267:37"><name pos:start="3267:35" pos:end="3267:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3269:15" pos:end="3273:13">else <block pos:start="3269:20" pos:end="3273:13">{<block_content pos:start="3271:17" pos:end="3271:25">

                <return pos:start="3271:17" pos:end="3271:25">return <expr pos:start="3271:24" pos:end="3271:24"><literal type="number" pos:start="3271:24" pos:end="3271:24">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="3279:5" pos:end="3279:13">return <expr pos:start="3279:12" pos:end="3279:12"><literal type="number" pos:start="3279:12" pos:end="3279:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
