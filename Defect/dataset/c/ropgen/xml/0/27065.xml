<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27065.c" pos:tabs="8"><function pos:start="1:1" pos:end="647:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">transcode</name><parameter_list pos:start="1:21" pos:end="3:66">(<parameter pos:start="1:22" pos:end="1:45"><decl pos:start="1:22" pos:end="1:45"><type pos:start="1:22" pos:end="1:45"><name pos:start="1:22" pos:end="1:31">OutputFile</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:45">output_files</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:66">nb_output_files</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><name pos:start="3:22" pos:end="3:30">InputFile</name>  <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">input_files</name></decl></parameter>,  <parameter pos:start="3:48" pos:end="3:65"><decl pos:start="3:48" pos:end="3:65"><type pos:start="3:48" pos:end="3:65"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:65">nb_input_files</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="647:1">{<block_content pos:start="7:5" pos:end="645:15">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">AVFormatContext</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:23">is</name></decl>, <decl pos:start="9:26" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:21"><modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:28">os</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">OutputStream</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">InputStream</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:22">no_packet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">no_packet_count</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:23">timer_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">key</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:24"><if pos:start="25:5" pos:end="27:24">if <condition pos:start="25:8" pos:end="25:50">(<expr pos:start="25:9" pos:end="25:49"><operator pos:start="25:9" pos:end="25:9">!</operator><operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:19">no_packet</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:48"><name pos:start="25:23" pos:end="25:32">av_mallocz</name><argument_list pos:start="25:33" pos:end="25:48">(<argument pos:start="25:34" pos:end="25:47"><expr pos:start="25:34" pos:end="25:47"><name pos:start="25:34" pos:end="25:47">nb_input_files</name></expr></argument>)</argument_list></call><operator pos:start="25:49" pos:end="25:49">)</operator></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:24"><block_content pos:start="27:9" pos:end="27:24">

        <expr_stmt pos:start="27:9" pos:end="27:24"><expr pos:start="27:9" pos:end="27:23"><call pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:20">exit_program</name><argument_list pos:start="27:21" pos:end="27:23">(<argument pos:start="27:22" pos:end="27:22"><expr pos:start="27:22" pos:end="27:22"><literal type="number" pos:start="27:22" pos:end="27:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:85"><expr pos:start="31:5" pos:end="31:84"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:84"><name pos:start="31:11" pos:end="31:24">transcode_init</name><argument_list pos:start="31:25" pos:end="31:84">(<argument pos:start="31:26" pos:end="31:37"><expr pos:start="31:26" pos:end="31:37"><name pos:start="31:26" pos:end="31:37">output_files</name></expr></argument>, <argument pos:start="31:40" pos:end="31:54"><expr pos:start="31:40" pos:end="31:54"><name pos:start="31:40" pos:end="31:54">nb_output_files</name></expr></argument>, <argument pos:start="31:57" pos:end="31:67"><expr pos:start="31:57" pos:end="31:67"><name pos:start="31:57" pos:end="31:67">input_files</name></expr></argument>, <argument pos:start="31:70" pos:end="31:83"><expr pos:start="31:70" pos:end="31:83"><name pos:start="31:70" pos:end="31:83">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:21">(<expr pos:start="39:9" pos:end="39:20"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:20">using_stdin</name></expr>)</condition> <block pos:start="39:23" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:71">

        <expr_stmt pos:start="41:9" pos:end="41:71"><expr pos:start="41:9" pos:end="41:70"><call pos:start="41:9" pos:end="41:70"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:70">(<argument pos:start="41:16" pos:end="41:19"><expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">NULL</name></expr></argument>, <argument pos:start="41:22" pos:end="41:32"><expr pos:start="41:22" pos:end="41:32"><name pos:start="41:22" pos:end="41:32">AV_LOG_INFO</name></expr></argument>, <argument pos:start="41:35" pos:end="41:69"><expr pos:start="41:35" pos:end="41:69"><literal type="string" pos:start="41:35" pos:end="41:69">"Press [q] to stop, [?] for help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:15">timer_start</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:30"><name pos:start="47:19" pos:end="47:28">av_gettime</name><argument_list pos:start="47:29" pos:end="47:30">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="51:5" pos:end="505:5">for <control pos:start="51:9" pos:end="51:34">(<init pos:start="51:10" pos:end="51:10">;</init> <condition pos:start="51:12" pos:end="51:33"><expr pos:start="51:12" pos:end="51:32"><name pos:start="51:12" pos:end="51:27">received_sigterm</name> <operator pos:start="51:29" pos:end="51:30">==</operator> <literal type="number" pos:start="51:32" pos:end="51:32">0</literal></expr>;</condition><incr/>)</control> <block pos:start="51:36" pos:end="505:5">{<block_content pos:start="53:9" pos:end="503:96">

        <decl_stmt pos:start="53:9" pos:end="53:34"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:22">file_index</name></decl>, <decl pos:start="53:25" pos:end="53:33"><type ref="prev" pos:start="53:9" pos:end="53:11"/><name pos:start="53:25" pos:end="53:33">ist_index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:21"><decl pos:start="55:9" pos:end="55:20"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">AVPacket</name></type> <name pos:start="55:18" pos:end="55:20">pkt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:25"><decl pos:start="57:9" pos:end="57:24"><type pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:15">int64_t</name></type> <name pos:start="57:17" pos:end="57:24">ipts_min</name></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:24"><decl pos:start="59:9" pos:end="59:23"><type pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:14">double</name></type> <name pos:start="59:16" pos:end="59:23">opts_min</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:39"><decl pos:start="61:9" pos:end="61:38"><type pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:15">int64_t</name></type> <name pos:start="61:17" pos:end="61:24">cur_time</name><init pos:start="61:25" pos:end="61:38">= <expr pos:start="61:27" pos:end="61:38"><call pos:start="61:27" pos:end="61:38"><name pos:start="61:27" pos:end="61:36">av_gettime</name><argument_list pos:start="61:37" pos:end="61:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:16">ipts_min</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:28">INT64_MAX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:25"><expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:16">opts_min</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <literal type="number" pos:start="67:20" pos:end="67:24">1e100</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="69:9" pos:end="69:35">/* if 'q' pressed, exits */</comment>

        <if_stmt pos:start="71:9" pos:end="251:9"><if pos:start="71:9" pos:end="251:9">if <condition pos:start="71:12" pos:end="71:25">(<expr pos:start="71:13" pos:end="71:24"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:24">using_stdin</name></expr>)</condition> <block pos:start="71:27" pos:end="251:9">{<block_content pos:start="73:13" pos:end="249:13">

            <decl_stmt pos:start="73:13" pos:end="73:37"><decl pos:start="73:13" pos:end="73:36"><type pos:start="73:13" pos:end="73:26"><specifier pos:start="73:13" pos:end="73:18">static</specifier> <name pos:start="73:20" pos:end="73:26">int64_t</name></type> <name pos:start="73:28" pos:end="73:36">last_time</name></decl>;</decl_stmt>

            <if_stmt pos:start="75:13" pos:end="77:22"><if pos:start="75:13" pos:end="77:22">if <condition pos:start="75:16" pos:end="75:36">(<expr pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:35">received_nb_signals</name></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:22"><block_content pos:start="77:17" pos:end="77:22">

                <break pos:start="77:17" pos:end="77:22">break;</break></block_content></block></if></if_stmt>

            <comment type="block" pos:start="79:13" pos:end="79:45">/* read_key() returns 0 on EOF */</comment>

            <if_stmt pos:start="81:13" pos:end="89:25"><if pos:start="81:13" pos:end="87:13">if<condition pos:start="81:15" pos:end="81:64">(<expr pos:start="81:16" pos:end="81:63"><name pos:start="81:16" pos:end="81:23">cur_time</name> <operator pos:start="81:25" pos:end="81:25">-</operator> <name pos:start="81:27" pos:end="81:35">last_time</name> <operator pos:start="81:37" pos:end="81:38">&gt;=</operator> <literal type="number" pos:start="81:40" pos:end="81:45">100000</literal> <operator pos:start="81:47" pos:end="81:48">&amp;&amp;</operator> <operator pos:start="81:50" pos:end="81:50">!</operator><name pos:start="81:51" pos:end="81:63">run_as_daemon</name></expr>)</condition><block pos:start="81:65" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:37">

                <expr_stmt pos:start="83:17" pos:end="83:34"><expr pos:start="83:17" pos:end="83:33"><name pos:start="83:17" pos:end="83:19">key</name> <operator pos:start="83:21" pos:end="83:21">=</operator>  <call pos:start="83:24" pos:end="83:33"><name pos:start="83:24" pos:end="83:31">read_key</name><argument_list pos:start="83:32" pos:end="83:33">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:37"><expr pos:start="85:17" pos:end="85:36"><name pos:start="85:17" pos:end="85:25">last_time</name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:36">cur_time</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="87:14" pos:end="89:25">else<block type="pseudo" pos:start="89:17" pos:end="89:25"><block_content pos:start="89:17" pos:end="89:25">

                <expr_stmt pos:start="89:17" pos:end="89:25"><expr pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:19">key</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <operator pos:start="89:23" pos:end="89:23">-</operator><literal type="number" pos:start="89:24" pos:end="89:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="91:13" pos:end="93:22"><if pos:start="91:13" pos:end="93:22">if <condition pos:start="91:16" pos:end="91:27">(<expr pos:start="91:17" pos:end="91:26"><name pos:start="91:17" pos:end="91:19">key</name> <operator pos:start="91:21" pos:end="91:22">==</operator> <literal type="char" pos:start="91:24" pos:end="91:26">'q'</literal></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:22"><block_content pos:start="93:17" pos:end="93:22">

                <break pos:start="93:17" pos:end="93:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="95:68"><if pos:start="95:13" pos:end="95:68">if <condition pos:start="95:16" pos:end="95:27">(<expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:19">key</name> <operator pos:start="95:21" pos:end="95:22">==</operator> <literal type="char" pos:start="95:24" pos:end="95:26">'+'</literal></expr>)</condition><block type="pseudo" pos:start="95:29" pos:end="95:68"><block_content pos:start="95:29" pos:end="95:68"> <expr_stmt pos:start="95:29" pos:end="95:68"><expr pos:start="95:29" pos:end="95:67"><call pos:start="95:29" pos:end="95:67"><name pos:start="95:29" pos:end="95:44">av_log_set_level</name><argument_list pos:start="95:45" pos:end="95:67">(<argument pos:start="95:46" pos:end="95:66"><expr pos:start="95:46" pos:end="95:66"><call pos:start="95:46" pos:end="95:63"><name pos:start="95:46" pos:end="95:61">av_log_get_level</name><argument_list pos:start="95:62" pos:end="95:63">()</argument_list></call><operator pos:start="95:64" pos:end="95:64">+</operator><literal type="number" pos:start="95:65" pos:end="95:66">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="97:13" pos:end="97:68"><if pos:start="97:13" pos:end="97:68">if <condition pos:start="97:16" pos:end="97:27">(<expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:19">key</name> <operator pos:start="97:21" pos:end="97:22">==</operator> <literal type="char" pos:start="97:24" pos:end="97:26">'-'</literal></expr>)</condition><block type="pseudo" pos:start="97:29" pos:end="97:68"><block_content pos:start="97:29" pos:end="97:68"> <expr_stmt pos:start="97:29" pos:end="97:68"><expr pos:start="97:29" pos:end="97:67"><call pos:start="97:29" pos:end="97:67"><name pos:start="97:29" pos:end="97:44">av_log_set_level</name><argument_list pos:start="97:45" pos:end="97:67">(<argument pos:start="97:46" pos:end="97:66"><expr pos:start="97:46" pos:end="97:66"><call pos:start="97:46" pos:end="97:63"><name pos:start="97:46" pos:end="97:61">av_log_get_level</name><argument_list pos:start="97:62" pos:end="97:63">()</argument_list></call><operator pos:start="97:64" pos:end="97:64">-</operator><literal type="number" pos:start="97:65" pos:end="97:66">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="99:45"><if pos:start="99:13" pos:end="99:45">if <condition pos:start="99:16" pos:end="99:27">(<expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:19">key</name> <operator pos:start="99:21" pos:end="99:22">==</operator> <literal type="char" pos:start="99:24" pos:end="99:26">'s'</literal></expr>)</condition><block type="pseudo" pos:start="99:29" pos:end="99:45"><block_content pos:start="99:29" pos:end="99:45"> <expr_stmt pos:start="99:29" pos:end="99:45"><expr pos:start="99:29" pos:end="99:44"><name pos:start="99:29" pos:end="99:35">qp_hist</name>     <operator pos:start="99:41" pos:end="99:42">^=</operator> <literal type="number" pos:start="99:44" pos:end="99:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="101:13" pos:end="120:0"><if pos:start="101:13" pos:end="120:0">if <condition pos:start="101:16" pos:end="101:27">(<expr pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:19">key</name> <operator pos:start="101:21" pos:end="101:22">==</operator> <literal type="char" pos:start="101:24" pos:end="101:26">'h'</literal></expr>)</condition><block pos:start="101:28" pos:end="120:0">{<block_content pos:start="103:17" pos:end="115:47">

                <if_stmt pos:start="103:17" pos:end="113:36"><if pos:start="103:17" pos:end="107:17">if <condition pos:start="103:20" pos:end="103:32">(<expr pos:start="103:21" pos:end="103:31"><name pos:start="103:21" pos:end="103:31">do_hex_dump</name></expr>)</condition><block pos:start="103:33" pos:end="107:17">{<block_content pos:start="105:21" pos:end="105:50">

                    <expr_stmt pos:start="105:21" pos:end="105:50"><expr pos:start="105:21" pos:end="105:49"><name pos:start="105:21" pos:end="105:31">do_hex_dump</name> <operator pos:start="105:33" pos:end="105:33">=</operator> <name pos:start="105:35" pos:end="105:45">do_pkt_dump</name> <operator pos:start="105:47" pos:end="105:47">=</operator> <literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="107:19" pos:end="111:17">else if<condition pos:start="107:26" pos:end="107:38">(<expr pos:start="107:27" pos:end="107:37"><name pos:start="107:27" pos:end="107:37">do_pkt_dump</name></expr>)</condition><block pos:start="107:39" pos:end="111:17">{<block_content pos:start="109:21" pos:end="109:36">

                    <expr_stmt pos:start="109:21" pos:end="109:36"><expr pos:start="109:21" pos:end="109:35"><name pos:start="109:21" pos:end="109:31">do_hex_dump</name> <operator pos:start="109:33" pos:end="109:33">=</operator> <literal type="number" pos:start="109:35" pos:end="109:35">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="111:19" pos:end="113:36">else<block type="pseudo" pos:start="113:21" pos:end="113:36"><block_content pos:start="113:21" pos:end="113:36">

                    <expr_stmt pos:start="113:21" pos:end="113:36"><expr pos:start="113:21" pos:end="113:35"><name pos:start="113:21" pos:end="113:31">do_pkt_dump</name> <operator pos:start="113:33" pos:end="113:33">=</operator> <literal type="number" pos:start="113:35" pos:end="113:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:47"><expr pos:start="115:17" pos:end="115:46"><call pos:start="115:17" pos:end="115:46"><name pos:start="115:17" pos:end="115:32">av_log_set_level</name><argument_list pos:start="115:33" pos:end="115:46">(<argument pos:start="115:34" pos:end="115:45"><expr pos:start="115:34" pos:end="115:45"><name pos:start="115:34" pos:end="115:45">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:if pos:start="119:1" pos:end="119:19">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:19"><name pos:start="119:5" pos:end="119:19">CONFIG_AVFILTER</name></expr></cpp:if>

            <if_stmt pos:start="121:13" pos:end="186:0"><if pos:start="121:13" pos:end="186:0">if <condition pos:start="121:16" pos:end="121:41">(<expr pos:start="121:17" pos:end="121:40"><name pos:start="121:17" pos:end="121:19">key</name> <operator pos:start="121:21" pos:end="121:22">==</operator> <literal type="char" pos:start="121:24" pos:end="121:26">'c'</literal> <operator pos:start="121:28" pos:end="121:29">||</operator> <name pos:start="121:31" pos:end="121:33">key</name> <operator pos:start="121:35" pos:end="121:36">==</operator> <literal type="char" pos:start="121:38" pos:end="121:40">'C'</literal></expr>)</condition><block pos:start="121:42" pos:end="186:0">{<block_content pos:start="123:17" pos:end="181:17">

                <decl_stmt pos:start="123:17" pos:end="123:73"><decl pos:start="123:17" pos:end="123:30"><type pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:20">char</name></type> <name pos:start="123:22" pos:end="123:30"><name pos:start="123:22" pos:end="123:24">buf</name><index pos:start="123:25" pos:end="123:30">[<expr pos:start="123:26" pos:end="123:29"><literal type="number" pos:start="123:26" pos:end="123:29">4096</literal></expr>]</index></name></decl>, <decl pos:start="123:33" pos:end="123:42"><type ref="prev" pos:start="123:17" pos:end="123:20"/><name pos:start="123:33" pos:end="123:42"><name pos:start="123:33" pos:end="123:38">target</name><index pos:start="123:39" pos:end="123:42">[<expr pos:start="123:40" pos:end="123:41"><literal type="number" pos:start="123:40" pos:end="123:41">64</literal></expr>]</index></name></decl>, <decl pos:start="123:45" pos:end="123:56"><type ref="prev" pos:start="123:17" pos:end="123:20"/><name pos:start="123:45" pos:end="123:56"><name pos:start="123:45" pos:end="123:51">command</name><index pos:start="123:52" pos:end="123:56">[<expr pos:start="123:53" pos:end="123:55"><literal type="number" pos:start="123:53" pos:end="123:55">256</literal></expr>]</index></name></decl>, <decl pos:start="123:59" pos:end="123:72"><type ref="prev" pos:start="123:17" pos:end="123:20"/><name pos:start="123:59" pos:end="123:66"><name pos:start="123:59" pos:end="123:61">arg</name><index pos:start="123:62" pos:end="123:66">[<expr pos:start="123:63" pos:end="123:65"><literal type="number" pos:start="123:63" pos:end="123:65">256</literal></expr>]</index></name> <init pos:start="123:68" pos:end="123:72">= <expr pos:start="123:70" pos:end="123:72"><block pos:start="123:70" pos:end="123:72">{<expr pos:start="123:71" pos:end="123:71"><literal type="number" pos:start="123:71" pos:end="123:71">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="125:17" pos:end="125:28"><decl pos:start="125:17" pos:end="125:27"><type pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:22">double</name></type> <name pos:start="125:24" pos:end="125:27">time</name></decl>;</decl_stmt>

                <decl_stmt pos:start="127:17" pos:end="127:29"><decl pos:start="127:17" pos:end="127:21"><type pos:start="127:17" pos:end="127:19"><name pos:start="127:17" pos:end="127:19">int</name></type> <name pos:start="127:21" pos:end="127:21">k</name></decl>, <decl pos:start="127:24" pos:end="127:28"><type ref="prev" pos:start="127:17" pos:end="127:19"/><name pos:start="127:24" pos:end="127:24">n</name> <init pos:start="127:26" pos:end="127:28">= <expr pos:start="127:28" pos:end="127:28"><literal type="number" pos:start="127:28" pos:end="127:28">0</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:93"><expr pos:start="129:17" pos:end="129:92"><call pos:start="129:17" pos:end="129:92"><name pos:start="129:17" pos:end="129:23">fprintf</name><argument_list pos:start="129:24" pos:end="129:92">(<argument pos:start="129:25" pos:end="129:30"><expr pos:start="129:25" pos:end="129:30"><name pos:start="129:25" pos:end="129:30">stderr</name></expr></argument>, <argument pos:start="129:33" pos:end="129:91"><expr pos:start="129:33" pos:end="129:91"><literal type="string" pos:start="129:33" pos:end="129:91">"\nEnter command: &lt;target&gt; &lt;time&gt; &lt;command&gt;[ &lt;argument&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:22"><expr pos:start="131:17" pos:end="131:21"><name pos:start="131:17" pos:end="131:17">i</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <literal type="number" pos:start="131:21" pos:end="131:21">0</literal></expr>;</expr_stmt>

                <while pos:start="133:17" pos:end="137:37">while <condition pos:start="133:23" pos:end="133:82">(<expr pos:start="133:24" pos:end="133:81"><operator pos:start="133:24" pos:end="133:24">(</operator><name pos:start="133:25" pos:end="133:25">k</name> <operator pos:start="133:27" pos:end="133:27">=</operator> <call pos:start="133:29" pos:end="133:38"><name pos:start="133:29" pos:end="133:36">read_key</name><argument_list pos:start="133:37" pos:end="133:38">()</argument_list></call><operator pos:start="133:39" pos:end="133:39">)</operator> <operator pos:start="133:41" pos:end="133:42">!=</operator> <literal type="char" pos:start="133:44" pos:end="133:47">'\n'</literal> <operator pos:start="133:49" pos:end="133:50">&amp;&amp;</operator> <name pos:start="133:52" pos:end="133:52">k</name> <operator pos:start="133:54" pos:end="133:55">!=</operator> <literal type="char" pos:start="133:57" pos:end="133:60">'\r'</literal> <operator pos:start="133:62" pos:end="133:63">&amp;&amp;</operator> <name pos:start="133:65" pos:end="133:65">i</name> <operator pos:start="133:67" pos:end="133:67">&lt;</operator> <sizeof pos:start="133:69" pos:end="133:79">sizeof<argument_list pos:start="133:75" pos:end="133:79">(<argument pos:start="133:76" pos:end="133:78"><expr pos:start="133:76" pos:end="133:78"><name pos:start="133:76" pos:end="133:78">buf</name></expr></argument>)</argument_list></sizeof><operator pos:start="133:80" pos:end="133:80">-</operator><literal type="number" pos:start="133:81" pos:end="133:81">1</literal></expr>)</condition><block type="pseudo" pos:start="135:21" pos:end="137:37"><block_content pos:start="135:21" pos:end="137:37">

                    <if_stmt pos:start="135:21" pos:end="137:37"><if pos:start="135:21" pos:end="137:37">if <condition pos:start="135:24" pos:end="135:30">(<expr pos:start="135:25" pos:end="135:29"><name pos:start="135:25" pos:end="135:25">k</name> <operator pos:start="135:27" pos:end="135:27">&gt;</operator> <literal type="number" pos:start="135:29" pos:end="135:29">0</literal></expr>)</condition><block type="pseudo" pos:start="137:25" pos:end="137:37"><block_content pos:start="137:25" pos:end="137:37">

                        <expr_stmt pos:start="137:25" pos:end="137:37"><expr pos:start="137:25" pos:end="137:36"><name pos:start="137:25" pos:end="137:32"><name pos:start="137:25" pos:end="137:27">buf</name><index pos:start="137:28" pos:end="137:32">[<expr pos:start="137:29" pos:end="137:31"><name pos:start="137:29" pos:end="137:29">i</name><operator pos:start="137:30" pos:end="137:31">++</operator></expr>]</index></name> <operator pos:start="137:34" pos:end="137:34">=</operator> <name pos:start="137:36" pos:end="137:36">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

                <expr_stmt pos:start="139:17" pos:end="139:27"><expr pos:start="139:17" pos:end="139:26"><name pos:start="139:17" pos:end="139:22"><name pos:start="139:17" pos:end="139:19">buf</name><index pos:start="139:20" pos:end="139:22">[<expr pos:start="139:21" pos:end="139:21"><name pos:start="139:21" pos:end="139:21">i</name></expr>]</index></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <literal type="number" pos:start="139:26" pos:end="139:26">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="141:17" pos:end="181:17"><if pos:start="141:17" pos:end="173:17">if <condition pos:start="141:20" pos:end="143:106">(<expr pos:start="141:21" pos:end="143:105"><name pos:start="141:21" pos:end="141:21">k</name> <operator pos:start="141:23" pos:end="141:23">&gt;</operator> <literal type="number" pos:start="141:25" pos:end="141:25">0</literal> <operator pos:start="141:27" pos:end="141:28">&amp;&amp;</operator>

                    <operator pos:start="143:21" pos:end="143:21">(</operator><name pos:start="143:22" pos:end="143:22">n</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <call pos:start="143:26" pos:end="143:99"><name pos:start="143:26" pos:end="143:31">sscanf</name><argument_list pos:start="143:32" pos:end="143:99">(<argument pos:start="143:33" pos:end="143:35"><expr pos:start="143:33" pos:end="143:35"><name pos:start="143:33" pos:end="143:35">buf</name></expr></argument>, <argument pos:start="143:38" pos:end="143:69"><expr pos:start="143:38" pos:end="143:69"><literal type="string" pos:start="143:38" pos:end="143:69">"%63[^ ] %lf %255[^ ] %255[^\n]"</literal></expr></argument>, <argument pos:start="143:72" pos:end="143:77"><expr pos:start="143:72" pos:end="143:77"><name pos:start="143:72" pos:end="143:77">target</name></expr></argument>, <argument pos:start="143:80" pos:end="143:84"><expr pos:start="143:80" pos:end="143:84"><operator pos:start="143:80" pos:end="143:80">&amp;</operator><name pos:start="143:81" pos:end="143:84">time</name></expr></argument>, <argument pos:start="143:87" pos:end="143:93"><expr pos:start="143:87" pos:end="143:93"><name pos:start="143:87" pos:end="143:93">command</name></expr></argument>, <argument pos:start="143:96" pos:end="143:98"><expr pos:start="143:96" pos:end="143:98"><name pos:start="143:96" pos:end="143:98">arg</name></expr></argument>)</argument_list></call><operator pos:start="143:100" pos:end="143:100">)</operator> <operator pos:start="143:102" pos:end="143:103">&gt;=</operator> <literal type="number" pos:start="143:105" pos:end="143:105">3</literal></expr>)</condition> <block pos:start="143:108" pos:end="173:17">{<block_content pos:start="145:21" pos:end="171:21">

                    <expr_stmt pos:start="145:21" pos:end="147:55"><expr pos:start="145:21" pos:end="147:54"><call pos:start="145:21" pos:end="147:54"><name pos:start="145:21" pos:end="145:26">av_log</name><argument_list pos:start="145:27" pos:end="147:54">(<argument pos:start="145:28" pos:end="145:31"><expr pos:start="145:28" pos:end="145:31"><name pos:start="145:28" pos:end="145:31">NULL</name></expr></argument>, <argument pos:start="145:34" pos:end="145:45"><expr pos:start="145:34" pos:end="145:45"><name pos:start="145:34" pos:end="145:45">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="145:48" pos:end="145:103"><expr pos:start="145:48" pos:end="145:103"><literal type="string" pos:start="145:48" pos:end="145:103">"Processing command target:%s time:%f command:%s arg:%s"</literal></expr></argument>,

                           <argument pos:start="147:28" pos:end="147:33"><expr pos:start="147:28" pos:end="147:33"><name pos:start="147:28" pos:end="147:33">target</name></expr></argument>, <argument pos:start="147:36" pos:end="147:39"><expr pos:start="147:36" pos:end="147:39"><name pos:start="147:36" pos:end="147:39">time</name></expr></argument>, <argument pos:start="147:42" pos:end="147:48"><expr pos:start="147:42" pos:end="147:48"><name pos:start="147:42" pos:end="147:48">command</name></expr></argument>, <argument pos:start="147:51" pos:end="147:53"><expr pos:start="147:51" pos:end="147:53"><name pos:start="147:51" pos:end="147:53">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="149:21" pos:end="171:21">for <control pos:start="149:25" pos:end="149:59">(<init pos:start="149:26" pos:end="149:31"><expr pos:start="149:26" pos:end="149:30"><name pos:start="149:26" pos:end="149:26">i</name> <operator pos:start="149:28" pos:end="149:28">=</operator> <literal type="number" pos:start="149:30" pos:end="149:30">0</literal></expr>;</init> <condition pos:start="149:33" pos:end="149:54"><expr pos:start="149:33" pos:end="149:53"><name pos:start="149:33" pos:end="149:33">i</name> <operator pos:start="149:35" pos:end="149:35">&lt;</operator> <name pos:start="149:37" pos:end="149:53">nb_output_streams</name></expr>;</condition> <incr pos:start="149:56" pos:end="149:58"><expr pos:start="149:56" pos:end="149:58"><name pos:start="149:56" pos:end="149:56">i</name><operator pos:start="149:57" pos:end="149:58">++</operator></expr></incr>)</control> <block pos:start="149:61" pos:end="171:21">{<block_content pos:start="151:25" pos:end="169:25">

                        <expr_stmt pos:start="151:25" pos:end="151:49"><expr pos:start="151:25" pos:end="151:48"><name pos:start="151:25" pos:end="151:27">ost</name> <operator pos:start="151:29" pos:end="151:29">=</operator> <operator pos:start="151:31" pos:end="151:31">&amp;</operator><name pos:start="151:32" pos:end="151:48"><name pos:start="151:32" pos:end="151:45">output_streams</name><index pos:start="151:46" pos:end="151:48">[<expr pos:start="151:47" pos:end="151:47"><name pos:start="151:47" pos:end="151:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="153:25" pos:end="169:25"><if pos:start="153:25" pos:end="169:25">if <condition pos:start="153:28" pos:end="153:39">(<expr pos:start="153:29" pos:end="153:38"><name pos:start="153:29" pos:end="153:38"><name pos:start="153:29" pos:end="153:31">ost</name><operator pos:start="153:32" pos:end="153:33">-&gt;</operator><name pos:start="153:34" pos:end="153:38">graph</name></name></expr>)</condition> <block pos:start="153:41" pos:end="169:25">{<block_content pos:start="155:29" pos:end="167:29">

                            <if_stmt pos:start="155:29" pos:end="167:29"><if pos:start="155:29" pos:end="163:29">if <condition pos:start="155:32" pos:end="155:41">(<expr pos:start="155:33" pos:end="155:40"><name pos:start="155:33" pos:end="155:36">time</name> <operator pos:start="155:38" pos:end="155:38">&lt;</operator> <literal type="number" pos:start="155:40" pos:end="155:40">0</literal></expr>)</condition> <block pos:start="155:43" pos:end="163:29">{<block_content pos:start="157:33" pos:end="161:109">

                                <expr_stmt pos:start="157:33" pos:end="159:106"><expr pos:start="157:33" pos:end="159:105"><name pos:start="157:33" pos:end="157:35">ret</name> <operator pos:start="157:37" pos:end="157:37">=</operator> <call pos:start="157:39" pos:end="159:105"><name pos:start="157:39" pos:end="157:65">avfilter_graph_send_command</name><argument_list pos:start="157:66" pos:end="159:105">(<argument pos:start="157:67" pos:end="157:76"><expr pos:start="157:67" pos:end="157:76"><name pos:start="157:67" pos:end="157:76"><name pos:start="157:67" pos:end="157:69">ost</name><operator pos:start="157:70" pos:end="157:71">-&gt;</operator><name pos:start="157:72" pos:end="157:76">graph</name></name></expr></argument>, <argument pos:start="157:79" pos:end="157:84"><expr pos:start="157:79" pos:end="157:84"><name pos:start="157:79" pos:end="157:84">target</name></expr></argument>, <argument pos:start="157:87" pos:end="157:93"><expr pos:start="157:87" pos:end="157:93"><name pos:start="157:87" pos:end="157:93">command</name></expr></argument>, <argument pos:start="157:96" pos:end="157:98"><expr pos:start="157:96" pos:end="157:98"><name pos:start="157:96" pos:end="157:98">arg</name></expr></argument>, <argument pos:start="157:101" pos:end="157:103"><expr pos:start="157:101" pos:end="157:103"><name pos:start="157:101" pos:end="157:103">buf</name></expr></argument>, <argument pos:start="157:106" pos:end="157:116"><expr pos:start="157:106" pos:end="157:116"><sizeof pos:start="157:106" pos:end="157:116">sizeof<argument_list pos:start="157:112" pos:end="157:116">(<argument pos:start="157:113" pos:end="157:115"><expr pos:start="157:113" pos:end="157:115"><name pos:start="157:113" pos:end="157:115">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                                                  <argument pos:start="159:67" pos:end="159:104"><expr pos:start="159:67" pos:end="159:104"><ternary pos:start="159:67" pos:end="159:104"><condition pos:start="159:67" pos:end="159:78"><expr pos:start="159:67" pos:end="159:76"><name pos:start="159:67" pos:end="159:69">key</name> <operator pos:start="159:71" pos:end="159:72">==</operator> <literal type="char" pos:start="159:74" pos:end="159:76">'c'</literal></expr> ?</condition><then pos:start="159:80" pos:end="159:100"> <expr pos:start="159:80" pos:end="159:100"><name pos:start="159:80" pos:end="159:100">AVFILTER_CMD_FLAG_ONE</name></expr> </then><else pos:start="159:102" pos:end="159:104">: <expr pos:start="159:104" pos:end="159:104"><literal type="number" pos:start="159:104" pos:end="159:104">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="161:33" pos:end="161:109"><expr pos:start="161:33" pos:end="161:108"><call pos:start="161:33" pos:end="161:108"><name pos:start="161:33" pos:end="161:39">fprintf</name><argument_list pos:start="161:40" pos:end="161:108">(<argument pos:start="161:41" pos:end="161:46"><expr pos:start="161:41" pos:end="161:46"><name pos:start="161:41" pos:end="161:46">stderr</name></expr></argument>, <argument pos:start="161:49" pos:end="161:94"><expr pos:start="161:49" pos:end="161:94"><literal type="string" pos:start="161:49" pos:end="161:94">"Command reply for stream %d: ret:%d res:%s\n"</literal></expr></argument>, <argument pos:start="161:97" pos:end="161:97"><expr pos:start="161:97" pos:end="161:97"><name pos:start="161:97" pos:end="161:97">i</name></expr></argument>, <argument pos:start="161:100" pos:end="161:102"><expr pos:start="161:100" pos:end="161:102"><name pos:start="161:100" pos:end="161:102">ret</name></expr></argument>, <argument pos:start="161:105" pos:end="161:107"><expr pos:start="161:105" pos:end="161:107"><name pos:start="161:105" pos:end="161:107">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="163:31" pos:end="167:29">else <block pos:start="163:36" pos:end="167:29">{<block_content pos:start="165:33" pos:end="165:110">

                                <expr_stmt pos:start="165:33" pos:end="165:110"><expr pos:start="165:33" pos:end="165:109"><name pos:start="165:33" pos:end="165:35">ret</name> <operator pos:start="165:37" pos:end="165:37">=</operator> <call pos:start="165:39" pos:end="165:109"><name pos:start="165:39" pos:end="165:66">avfilter_graph_queue_command</name><argument_list pos:start="165:67" pos:end="165:109">(<argument pos:start="165:68" pos:end="165:77"><expr pos:start="165:68" pos:end="165:77"><name pos:start="165:68" pos:end="165:77"><name pos:start="165:68" pos:end="165:70">ost</name><operator pos:start="165:71" pos:end="165:72">-&gt;</operator><name pos:start="165:73" pos:end="165:77">graph</name></name></expr></argument>, <argument pos:start="165:80" pos:end="165:85"><expr pos:start="165:80" pos:end="165:85"><name pos:start="165:80" pos:end="165:85">target</name></expr></argument>, <argument pos:start="165:88" pos:end="165:94"><expr pos:start="165:88" pos:end="165:94"><name pos:start="165:88" pos:end="165:94">command</name></expr></argument>, <argument pos:start="165:97" pos:end="165:99"><expr pos:start="165:97" pos:end="165:99"><name pos:start="165:97" pos:end="165:99">arg</name></expr></argument>, <argument pos:start="165:102" pos:end="165:102"><expr pos:start="165:102" pos:end="165:102"><literal type="number" pos:start="165:102" pos:end="165:102">0</literal></expr></argument>, <argument pos:start="165:105" pos:end="165:108"><expr pos:start="165:105" pos:end="165:108"><name pos:start="165:105" pos:end="165:108">time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="173:19" pos:end="181:17">else <block pos:start="173:24" pos:end="181:17">{<block_content pos:start="175:21" pos:end="179:69">

                    <expr_stmt pos:start="175:21" pos:end="179:69"><expr pos:start="175:21" pos:end="179:68"><call pos:start="175:21" pos:end="179:68"><name pos:start="175:21" pos:end="175:26">av_log</name><argument_list pos:start="175:27" pos:end="179:68">(<argument pos:start="175:28" pos:end="175:31"><expr pos:start="175:28" pos:end="175:31"><name pos:start="175:28" pos:end="175:31">NULL</name></expr></argument>, <argument pos:start="175:34" pos:end="175:45"><expr pos:start="175:34" pos:end="175:45"><name pos:start="175:34" pos:end="175:45">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="177:28" pos:end="179:59"><expr pos:start="177:28" pos:end="179:59"><literal type="string" pos:start="177:28" pos:end="177:78">"Parse error, at least 3 arguments were expected, "</literal>

                           <literal type="string" pos:start="179:28" pos:end="179:59">"only %d given in string '%s'\n"</literal></expr></argument>, <argument pos:start="179:62" pos:end="179:62"><expr pos:start="179:62" pos:end="179:62"><name pos:start="179:62" pos:end="179:62">n</name></expr></argument>, <argument pos:start="179:65" pos:end="179:67"><expr pos:start="179:65" pos:end="179:67"><name pos:start="179:65" pos:end="179:67">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="187:13" pos:end="225:13"><if pos:start="187:13" pos:end="225:13">if <condition pos:start="187:16" pos:end="187:41">(<expr pos:start="187:17" pos:end="187:40"><name pos:start="187:17" pos:end="187:19">key</name> <operator pos:start="187:21" pos:end="187:22">==</operator> <literal type="char" pos:start="187:24" pos:end="187:26">'d'</literal> <operator pos:start="187:28" pos:end="187:29">||</operator> <name pos:start="187:31" pos:end="187:33">key</name> <operator pos:start="187:35" pos:end="187:36">==</operator> <literal type="char" pos:start="187:38" pos:end="187:40">'D'</literal></expr>)</condition><block pos:start="187:42" pos:end="225:13">{<block_content pos:start="189:17" pos:end="223:52">

                <decl_stmt pos:start="189:17" pos:end="189:28"><decl pos:start="189:17" pos:end="189:27"><type pos:start="189:17" pos:end="189:19"><name pos:start="189:17" pos:end="189:19">int</name></type> <name pos:start="189:21" pos:end="189:25">debug</name><init pos:start="189:26" pos:end="189:27">=<expr pos:start="189:27" pos:end="189:27"><literal type="number" pos:start="189:27" pos:end="189:27">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="191:17" pos:end="205:70"><if pos:start="191:17" pos:end="201:17">if<condition pos:start="191:19" pos:end="191:30">(<expr pos:start="191:20" pos:end="191:29"><name pos:start="191:20" pos:end="191:22">key</name> <operator pos:start="191:24" pos:end="191:25">==</operator> <literal type="char" pos:start="191:27" pos:end="191:29">'D'</literal></expr>)</condition> <block pos:start="191:32" pos:end="201:17">{<block_content pos:start="193:21" pos:end="199:39">

                    <expr_stmt pos:start="193:21" pos:end="193:65"><expr pos:start="193:21" pos:end="193:64"><name pos:start="193:21" pos:end="193:25">debug</name> <operator pos:start="193:27" pos:end="193:27">=</operator> <name pos:start="193:29" pos:end="193:44"><name pos:start="193:29" pos:end="193:41">input_streams</name><index pos:start="193:42" pos:end="193:44">[<expr pos:start="193:43" pos:end="193:43"><literal type="number" pos:start="193:43" pos:end="193:43">0</literal></expr>]</index></name><operator pos:start="193:45" pos:end="193:45">.</operator><name pos:start="193:46" pos:end="193:61"><name pos:start="193:46" pos:end="193:47">st</name><operator pos:start="193:48" pos:end="193:49">-&gt;</operator><name pos:start="193:50" pos:end="193:54">codec</name><operator pos:start="193:55" pos:end="193:56">-&gt;</operator><name pos:start="193:57" pos:end="193:61">debug</name></name><operator pos:start="193:62" pos:end="193:63">&lt;&lt;</operator><literal type="number" pos:start="193:64" pos:end="193:64">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="195:21" pos:end="195:41"><if pos:start="195:21" pos:end="195:41">if<condition pos:start="195:23" pos:end="195:30">(<expr pos:start="195:24" pos:end="195:29"><operator pos:start="195:24" pos:end="195:24">!</operator><name pos:start="195:25" pos:end="195:29">debug</name></expr>)</condition><block type="pseudo" pos:start="195:32" pos:end="195:41"><block_content pos:start="195:32" pos:end="195:41"> <expr_stmt pos:start="195:32" pos:end="195:41"><expr pos:start="195:32" pos:end="195:40"><name pos:start="195:32" pos:end="195:36">debug</name> <operator pos:start="195:38" pos:end="195:38">=</operator> <literal type="number" pos:start="195:40" pos:end="195:40">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <while pos:start="197:21" pos:end="199:39">while<condition pos:start="197:26" pos:end="197:92">(<expr pos:start="197:27" pos:end="197:91"><name pos:start="197:27" pos:end="197:31">debug</name> <operator pos:start="197:33" pos:end="197:33">&amp;</operator> <operator pos:start="197:35" pos:end="197:35">(</operator><name pos:start="197:36" pos:end="197:53">FF_DEBUG_DCT_COEFF</name><operator pos:start="197:54" pos:end="197:54">|</operator><name pos:start="197:55" pos:end="197:69">FF_DEBUG_VIS_QP</name><operator pos:start="197:70" pos:end="197:70">|</operator><name pos:start="197:71" pos:end="197:90">FF_DEBUG_VIS_MB_TYPE</name><operator pos:start="197:91" pos:end="197:91">)</operator></expr>)</condition><block type="pseudo" pos:start="199:25" pos:end="199:39"><block_content pos:start="199:25" pos:end="199:39"> <comment type="line" pos:start="197:94" pos:end="197:124">//unsupported, would just crash</comment>

                        <expr_stmt pos:start="199:25" pos:end="199:39"><expr pos:start="199:25" pos:end="199:38"><name pos:start="199:25" pos:end="199:29">debug</name> <operator pos:start="199:31" pos:end="199:32">+=</operator> <name pos:start="199:34" pos:end="199:38">debug</name></expr>;</expr_stmt></block_content></block></while>

                </block_content>}</block></if><if type="elseif" pos:start="201:18" pos:end="205:70">else

                    if<condition pos:start="203:23" pos:end="203:46">(<expr pos:start="203:24" pos:end="203:45"><call pos:start="203:24" pos:end="203:42"><name pos:start="203:24" pos:end="203:28">scanf</name><argument_list pos:start="203:29" pos:end="203:42">(<argument pos:start="203:30" pos:end="203:33"><expr pos:start="203:30" pos:end="203:33"><literal type="string" pos:start="203:30" pos:end="203:33">"%d"</literal></expr></argument>, <argument pos:start="203:36" pos:end="203:41"><expr pos:start="203:36" pos:end="203:41"><operator pos:start="203:36" pos:end="203:36">&amp;</operator><name pos:start="203:37" pos:end="203:41">debug</name></expr></argument>)</argument_list></call><operator pos:start="203:43" pos:end="203:44">!=</operator><literal type="number" pos:start="203:45" pos:end="203:45">1</literal></expr>)</condition><block type="pseudo" pos:start="205:25" pos:end="205:70"><block_content pos:start="205:25" pos:end="205:70">

                        <expr_stmt pos:start="205:25" pos:end="205:70"><expr pos:start="205:25" pos:end="205:69"><call pos:start="205:25" pos:end="205:69"><name pos:start="205:25" pos:end="205:31">fprintf</name><argument_list pos:start="205:32" pos:end="205:69">(<argument pos:start="205:33" pos:end="205:38"><expr pos:start="205:33" pos:end="205:38"><name pos:start="205:33" pos:end="205:38">stderr</name></expr></argument>,<argument pos:start="205:40" pos:end="205:68"><expr pos:start="205:40" pos:end="205:68"><literal type="string" pos:start="205:40" pos:end="205:68">"error parsing debug value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <for pos:start="207:17" pos:end="211:17">for<control pos:start="207:20" pos:end="207:47">(<init pos:start="207:21" pos:end="207:24"><expr pos:start="207:21" pos:end="207:23"><name pos:start="207:21" pos:end="207:21">i</name><operator pos:start="207:22" pos:end="207:22">=</operator><literal type="number" pos:start="207:23" pos:end="207:23">0</literal></expr>;</init><condition pos:start="207:25" pos:end="207:43"><expr pos:start="207:25" pos:end="207:42"><name pos:start="207:25" pos:end="207:25">i</name><operator pos:start="207:26" pos:end="207:26">&lt;</operator><name pos:start="207:27" pos:end="207:42">nb_input_streams</name></expr>;</condition><incr pos:start="207:44" pos:end="207:46"><expr pos:start="207:44" pos:end="207:46"><name pos:start="207:44" pos:end="207:44">i</name><operator pos:start="207:45" pos:end="207:46">++</operator></expr></incr>)</control> <block pos:start="207:49" pos:end="211:17">{<block_content pos:start="209:21" pos:end="209:62">

                    <expr_stmt pos:start="209:21" pos:end="209:62"><expr pos:start="209:21" pos:end="209:61"><name pos:start="209:21" pos:end="209:36"><name pos:start="209:21" pos:end="209:33">input_streams</name><index pos:start="209:34" pos:end="209:36">[<expr pos:start="209:35" pos:end="209:35"><name pos:start="209:35" pos:end="209:35">i</name></expr>]</index></name><operator pos:start="209:37" pos:end="209:37">.</operator><name pos:start="209:38" pos:end="209:53"><name pos:start="209:38" pos:end="209:39">st</name><operator pos:start="209:40" pos:end="209:41">-&gt;</operator><name pos:start="209:42" pos:end="209:46">codec</name><operator pos:start="209:47" pos:end="209:48">-&gt;</operator><name pos:start="209:49" pos:end="209:53">debug</name></name> <operator pos:start="209:55" pos:end="209:55">=</operator> <name pos:start="209:57" pos:end="209:61">debug</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <for pos:start="213:17" pos:end="219:17">for<control pos:start="213:20" pos:end="213:48">(<init pos:start="213:21" pos:end="213:24"><expr pos:start="213:21" pos:end="213:23"><name pos:start="213:21" pos:end="213:21">i</name><operator pos:start="213:22" pos:end="213:22">=</operator><literal type="number" pos:start="213:23" pos:end="213:23">0</literal></expr>;</init><condition pos:start="213:25" pos:end="213:44"><expr pos:start="213:25" pos:end="213:43"><name pos:start="213:25" pos:end="213:25">i</name><operator pos:start="213:26" pos:end="213:26">&lt;</operator><name pos:start="213:27" pos:end="213:43">nb_output_streams</name></expr>;</condition><incr pos:start="213:45" pos:end="213:47"><expr pos:start="213:45" pos:end="213:47"><name pos:start="213:45" pos:end="213:45">i</name><operator pos:start="213:46" pos:end="213:47">++</operator></expr></incr>)</control> <block pos:start="213:50" pos:end="219:17">{<block_content pos:start="215:21" pos:end="217:50">

                    <expr_stmt pos:start="215:21" pos:end="215:45"><expr pos:start="215:21" pos:end="215:44"><name pos:start="215:21" pos:end="215:23">ost</name> <operator pos:start="215:25" pos:end="215:25">=</operator> <operator pos:start="215:27" pos:end="215:27">&amp;</operator><name pos:start="215:28" pos:end="215:44"><name pos:start="215:28" pos:end="215:41">output_streams</name><index pos:start="215:42" pos:end="215:44">[<expr pos:start="215:43" pos:end="215:43"><name pos:start="215:43" pos:end="215:43">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:50"><expr pos:start="217:21" pos:end="217:49"><name pos:start="217:21" pos:end="217:41"><name pos:start="217:21" pos:end="217:23">ost</name><operator pos:start="217:24" pos:end="217:25">-&gt;</operator><name pos:start="217:26" pos:end="217:27">st</name><operator pos:start="217:28" pos:end="217:29">-&gt;</operator><name pos:start="217:30" pos:end="217:34">codec</name><operator pos:start="217:35" pos:end="217:36">-&gt;</operator><name pos:start="217:37" pos:end="217:41">debug</name></name> <operator pos:start="217:43" pos:end="217:43">=</operator> <name pos:start="217:45" pos:end="217:49">debug</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="221:17" pos:end="221:57"><if pos:start="221:17" pos:end="221:57">if<condition pos:start="221:19" pos:end="221:25">(<expr pos:start="221:20" pos:end="221:24"><name pos:start="221:20" pos:end="221:24">debug</name></expr>)</condition><block type="pseudo" pos:start="221:27" pos:end="221:57"><block_content pos:start="221:27" pos:end="221:57"> <expr_stmt pos:start="221:27" pos:end="221:57"><expr pos:start="221:27" pos:end="221:56"><call pos:start="221:27" pos:end="221:56"><name pos:start="221:27" pos:end="221:42">av_log_set_level</name><argument_list pos:start="221:43" pos:end="221:56">(<argument pos:start="221:44" pos:end="221:55"><expr pos:start="221:44" pos:end="221:55"><name pos:start="221:44" pos:end="221:55">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:52"><expr pos:start="223:17" pos:end="223:51"><call pos:start="223:17" pos:end="223:51"><name pos:start="223:17" pos:end="223:23">fprintf</name><argument_list pos:start="223:24" pos:end="223:51">(<argument pos:start="223:25" pos:end="223:30"><expr pos:start="223:25" pos:end="223:30"><name pos:start="223:25" pos:end="223:30">stderr</name></expr></argument>,<argument pos:start="223:32" pos:end="223:43"><expr pos:start="223:32" pos:end="223:43"><literal type="string" pos:start="223:32" pos:end="223:43">"debug=%d\n"</literal></expr></argument>, <argument pos:start="223:46" pos:end="223:50"><expr pos:start="223:46" pos:end="223:50"><name pos:start="223:46" pos:end="223:50">debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="227:13" pos:end="249:13"><if pos:start="227:13" pos:end="249:13">if <condition pos:start="227:16" pos:end="227:27">(<expr pos:start="227:17" pos:end="227:26"><name pos:start="227:17" pos:end="227:19">key</name> <operator pos:start="227:21" pos:end="227:22">==</operator> <literal type="char" pos:start="227:24" pos:end="227:26">'?'</literal></expr>)</condition><block pos:start="227:28" pos:end="249:13">{<block_content pos:start="229:17" pos:end="247:18">

                <expr_stmt pos:start="229:17" pos:end="247:18"><expr pos:start="229:17" pos:end="247:17"><call pos:start="229:17" pos:end="247:17"><name pos:start="229:17" pos:end="229:23">fprintf</name><argument_list pos:start="229:24" pos:end="247:17">(<argument pos:start="229:25" pos:end="229:30"><expr pos:start="229:25" pos:end="229:30"><name pos:start="229:25" pos:end="229:30">stderr</name></expr></argument>, <argument pos:start="229:33" pos:end="245:60"><expr pos:start="229:33" pos:end="245:60"><literal type="string" pos:start="229:33" pos:end="229:51">"key    function\n"</literal>

                                <literal type="string" pos:start="231:33" pos:end="231:57">"?      show this help\n"</literal>

                                <literal type="string" pos:start="233:33" pos:end="233:61">"+      increase verbosity\n"</literal>

                                <literal type="string" pos:start="235:33" pos:end="235:61">"-      decrease verbosity\n"</literal>

                                <literal type="string" pos:start="237:33" pos:end="237:70">"c      Send command to filtergraph\n"</literal>

                                <literal type="string" pos:start="239:33" pos:end="239:78">"D      cycle through available debug modes\n"</literal>

                                <literal type="string" pos:start="241:33" pos:end="241:95">"h      dump packets/hex press to cycle through the 3 states\n"</literal>

                                <literal type="string" pos:start="243:33" pos:end="243:47">"q      quit\n"</literal>

                                <literal type="string" pos:start="245:33" pos:end="245:60">"s      Show QP histogram\n"</literal></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="255:9" pos:end="257:33">/* select the stream that we must read now by looking at the

           smallest output pts */</comment>

        <expr_stmt pos:start="259:9" pos:end="259:24"><expr pos:start="259:9" pos:end="259:23"><name pos:start="259:9" pos:end="259:18">file_index</name> <operator pos:start="259:20" pos:end="259:20">=</operator> <operator pos:start="259:22" pos:end="259:22">-</operator><literal type="number" pos:start="259:23" pos:end="259:23">1</literal></expr>;</expr_stmt>

        <for pos:start="261:9" pos:end="321:9">for <control pos:start="261:13" pos:end="261:47">(<init pos:start="261:14" pos:end="261:19"><expr pos:start="261:14" pos:end="261:18"><name pos:start="261:14" pos:end="261:14">i</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:42"><expr pos:start="261:21" pos:end="261:41"><name pos:start="261:21" pos:end="261:21">i</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <name pos:start="261:25" pos:end="261:41">nb_output_streams</name></expr>;</condition> <incr pos:start="261:44" pos:end="261:46"><expr pos:start="261:44" pos:end="261:46"><name pos:start="261:44" pos:end="261:44">i</name><operator pos:start="261:45" pos:end="261:46">++</operator></expr></incr>)</control> <block pos:start="261:49" pos:end="321:9">{<block_content pos:start="263:13" pos:end="319:13">

            <decl_stmt pos:start="263:13" pos:end="263:27"><decl pos:start="263:13" pos:end="263:26"><type pos:start="263:13" pos:end="263:24"><name pos:start="263:13" pos:end="263:22">OutputFile</name> <modifier pos:start="263:24" pos:end="263:24">*</modifier></type><name pos:start="263:25" pos:end="263:26">of</name></decl>;</decl_stmt>

            <decl_stmt pos:start="265:13" pos:end="265:25"><decl pos:start="265:13" pos:end="265:24"><type pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:19">int64_t</name></type> <name pos:start="265:21" pos:end="265:24">ipts</name></decl>;</decl_stmt>

            <decl_stmt pos:start="267:13" pos:end="267:25"><decl pos:start="267:13" pos:end="267:24"><type pos:start="267:13" pos:end="267:18"><name pos:start="267:13" pos:end="267:18">double</name></type>  <name pos:start="267:21" pos:end="267:24">opts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:37"><expr pos:start="269:13" pos:end="269:36"><name pos:start="269:13" pos:end="269:15">ost</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <operator pos:start="269:19" pos:end="269:19">&amp;</operator><name pos:start="269:20" pos:end="269:36"><name pos:start="269:20" pos:end="269:33">output_streams</name><index pos:start="269:34" pos:end="269:36">[<expr pos:start="269:35" pos:end="269:35"><name pos:start="269:35" pos:end="269:35">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:48"><expr pos:start="271:13" pos:end="271:47"><name pos:start="271:13" pos:end="271:14">of</name> <operator pos:start="271:16" pos:end="271:16">=</operator> <operator pos:start="271:18" pos:end="271:18">&amp;</operator><name pos:start="271:19" pos:end="271:47"><name pos:start="271:19" pos:end="271:30">output_files</name><index pos:start="271:31" pos:end="271:47">[<expr pos:start="271:32" pos:end="271:46"><name pos:start="271:32" pos:end="271:46"><name pos:start="271:32" pos:end="271:34">ost</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:46">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:51"><expr pos:start="273:13" pos:end="273:50"><name pos:start="273:13" pos:end="273:14">os</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <name pos:start="273:18" pos:end="273:46"><name pos:start="273:18" pos:end="273:29">output_files</name><index pos:start="273:30" pos:end="273:46">[<expr pos:start="273:31" pos:end="273:45"><name pos:start="273:31" pos:end="273:45"><name pos:start="273:31" pos:end="273:33">ost</name><operator pos:start="273:34" pos:end="273:35">-&gt;</operator><name pos:start="273:36" pos:end="273:45">file_index</name></name></expr>]</index></name><operator pos:start="273:47" pos:end="273:47">.</operator><name pos:start="273:48" pos:end="273:50">ctx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:52"><expr pos:start="275:13" pos:end="275:51"><name pos:start="275:13" pos:end="275:15">ist</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <operator pos:start="275:19" pos:end="275:19">&amp;</operator><name pos:start="275:20" pos:end="275:51"><name pos:start="275:20" pos:end="275:32">input_streams</name><index pos:start="275:33" pos:end="275:51">[<expr pos:start="275:34" pos:end="275:50"><name pos:start="275:34" pos:end="275:50"><name pos:start="275:34" pos:end="275:36">ost</name><operator pos:start="275:37" pos:end="275:38">-&gt;</operator><name pos:start="275:39" pos:end="275:50">source_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="277:13" pos:end="281:25"><if pos:start="277:13" pos:end="281:25">if <condition pos:start="277:16" pos:end="279:68">(<expr pos:start="277:17" pos:end="279:67"><name pos:start="277:17" pos:end="277:43"><name pos:start="277:17" pos:end="277:19">ost</name><operator pos:start="277:20" pos:end="277:21">-&gt;</operator><name pos:start="277:22" pos:end="277:43">is_past_recording_time</name></name> <operator pos:start="277:45" pos:end="277:46">||</operator> <name pos:start="277:48" pos:end="277:73"><name pos:start="277:48" pos:end="277:56">no_packet</name><index pos:start="277:57" pos:end="277:73">[<expr pos:start="277:58" pos:end="277:72"><name pos:start="277:58" pos:end="277:72"><name pos:start="277:58" pos:end="277:60">ist</name><operator pos:start="277:61" pos:end="277:62">-&gt;</operator><name pos:start="277:63" pos:end="277:72">file_index</name></name></expr>]</index></name> <operator pos:start="277:75" pos:end="277:76">||</operator>

                <operator pos:start="279:17" pos:end="279:17">(</operator><name pos:start="279:18" pos:end="279:23"><name pos:start="279:18" pos:end="279:19">os</name><operator pos:start="279:20" pos:end="279:21">-&gt;</operator><name pos:start="279:22" pos:end="279:23">pb</name></name> <operator pos:start="279:25" pos:end="279:26">&amp;&amp;</operator> <call pos:start="279:28" pos:end="279:44"><name pos:start="279:28" pos:end="279:36">avio_tell</name><argument_list pos:start="279:37" pos:end="279:44">(<argument pos:start="279:38" pos:end="279:43"><expr pos:start="279:38" pos:end="279:43"><name pos:start="279:38" pos:end="279:43"><name pos:start="279:38" pos:end="279:39">os</name><operator pos:start="279:40" pos:end="279:41">-&gt;</operator><name pos:start="279:42" pos:end="279:43">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="279:46" pos:end="279:47">&gt;=</operator> <name pos:start="279:49" pos:end="279:66"><name pos:start="279:49" pos:end="279:50">of</name><operator pos:start="279:51" pos:end="279:52">-&gt;</operator><name pos:start="279:53" pos:end="279:66">limit_filesize</name></name><operator pos:start="279:67" pos:end="279:67">)</operator></expr>)</condition><block type="pseudo" pos:start="281:17" pos:end="281:25"><block_content pos:start="281:17" pos:end="281:25">

                <continue pos:start="281:17" pos:end="281:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:65"><expr pos:start="283:13" pos:end="283:64"><name pos:start="283:13" pos:end="283:16">opts</name> <operator pos:start="283:18" pos:end="283:18">=</operator> <name pos:start="283:20" pos:end="283:35"><name pos:start="283:20" pos:end="283:22">ost</name><operator pos:start="283:23" pos:end="283:24">-&gt;</operator><name pos:start="283:25" pos:end="283:26">st</name><operator pos:start="283:27" pos:end="283:28">-&gt;</operator><name pos:start="283:29" pos:end="283:31">pts</name><operator pos:start="283:32" pos:end="283:32">.</operator><name pos:start="283:33" pos:end="283:35">val</name></name> <operator pos:start="283:37" pos:end="283:37">*</operator> <call pos:start="283:39" pos:end="283:64"><name pos:start="283:39" pos:end="283:44">av_q2d</name><argument_list pos:start="283:45" pos:end="283:64">(<argument pos:start="283:46" pos:end="283:63"><expr pos:start="283:46" pos:end="283:63"><name pos:start="283:46" pos:end="283:63"><name pos:start="283:46" pos:end="283:48">ost</name><operator pos:start="283:49" pos:end="283:50">-&gt;</operator><name pos:start="283:51" pos:end="283:52">st</name><operator pos:start="283:53" pos:end="283:54">-&gt;</operator><name pos:start="283:55" pos:end="283:63">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:28"><expr pos:start="285:13" pos:end="285:27"><name pos:start="285:13" pos:end="285:16">ipts</name> <operator pos:start="285:18" pos:end="285:18">=</operator> <name pos:start="285:20" pos:end="285:27"><name pos:start="285:20" pos:end="285:22">ist</name><operator pos:start="285:23" pos:end="285:24">-&gt;</operator><name pos:start="285:25" pos:end="285:27">pts</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="287:13" pos:end="307:13"><if pos:start="287:13" pos:end="307:13">if <condition pos:start="287:16" pos:end="287:58">(<expr pos:start="287:17" pos:end="287:57"><operator pos:start="287:17" pos:end="287:17">!</operator><name pos:start="287:18" pos:end="287:45"><name pos:start="287:18" pos:end="287:28">input_files</name><index pos:start="287:29" pos:end="287:45">[<expr pos:start="287:30" pos:end="287:44"><name pos:start="287:30" pos:end="287:44"><name pos:start="287:30" pos:end="287:32">ist</name><operator pos:start="287:33" pos:end="287:34">-&gt;</operator><name pos:start="287:35" pos:end="287:44">file_index</name></name></expr>]</index></name><operator pos:start="287:46" pos:end="287:46">.</operator><name pos:start="287:47" pos:end="287:57">eof_reached</name></expr>)</condition> <block pos:start="287:60" pos:end="307:13">{<block_content pos:start="289:17" pos:end="305:17">

                <if_stmt pos:start="289:17" pos:end="297:17"><if pos:start="289:17" pos:end="297:17">if <condition pos:start="289:20" pos:end="289:36">(<expr pos:start="289:21" pos:end="289:35"><name pos:start="289:21" pos:end="289:24">ipts</name> <operator pos:start="289:26" pos:end="289:26">&lt;</operator> <name pos:start="289:28" pos:end="289:35">ipts_min</name></expr>)</condition> <block pos:start="289:38" pos:end="297:17">{<block_content pos:start="291:21" pos:end="295:53">

                    <expr_stmt pos:start="291:21" pos:end="291:36"><expr pos:start="291:21" pos:end="291:35"><name pos:start="291:21" pos:end="291:28">ipts_min</name> <operator pos:start="291:30" pos:end="291:30">=</operator> <name pos:start="291:32" pos:end="291:35">ipts</name></expr>;</expr_stmt>

                    <if_stmt pos:start="293:21" pos:end="295:53"><if pos:start="293:21" pos:end="295:53">if <condition pos:start="293:24" pos:end="293:35">(<expr pos:start="293:25" pos:end="293:34"><name pos:start="293:25" pos:end="293:34">input_sync</name></expr>)</condition><block type="pseudo" pos:start="295:25" pos:end="295:53"><block_content pos:start="295:25" pos:end="295:53">

                        <expr_stmt pos:start="295:25" pos:end="295:53"><expr pos:start="295:25" pos:end="295:52"><name pos:start="295:25" pos:end="295:34">file_index</name> <operator pos:start="295:36" pos:end="295:36">=</operator> <name pos:start="295:38" pos:end="295:52"><name pos:start="295:38" pos:end="295:40">ist</name><operator pos:start="295:41" pos:end="295:42">-&gt;</operator><name pos:start="295:43" pos:end="295:52">file_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="299:17" pos:end="305:17"><if pos:start="299:17" pos:end="305:17">if <condition pos:start="299:20" pos:end="299:36">(<expr pos:start="299:21" pos:end="299:35"><name pos:start="299:21" pos:end="299:24">opts</name> <operator pos:start="299:26" pos:end="299:26">&lt;</operator> <name pos:start="299:28" pos:end="299:35">opts_min</name></expr>)</condition> <block pos:start="299:38" pos:end="305:17">{<block_content pos:start="301:21" pos:end="303:66">

                    <expr_stmt pos:start="301:21" pos:end="301:36"><expr pos:start="301:21" pos:end="301:35"><name pos:start="301:21" pos:end="301:28">opts_min</name> <operator pos:start="301:30" pos:end="301:30">=</operator> <name pos:start="301:32" pos:end="301:35">opts</name></expr>;</expr_stmt>

                    <if_stmt pos:start="303:21" pos:end="303:66"><if pos:start="303:21" pos:end="303:66">if <condition pos:start="303:24" pos:end="303:36">(<expr pos:start="303:25" pos:end="303:35"><operator pos:start="303:25" pos:end="303:25">!</operator><name pos:start="303:26" pos:end="303:35">input_sync</name></expr>)</condition><block type="pseudo" pos:start="303:38" pos:end="303:66"><block_content pos:start="303:38" pos:end="303:66"> <expr_stmt pos:start="303:38" pos:end="303:66"><expr pos:start="303:38" pos:end="303:65"><name pos:start="303:38" pos:end="303:47">file_index</name> <operator pos:start="303:49" pos:end="303:49">=</operator> <name pos:start="303:51" pos:end="303:65"><name pos:start="303:51" pos:end="303:53">ist</name><operator pos:start="303:54" pos:end="303:55">-&gt;</operator><name pos:start="303:56" pos:end="303:65">file_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="309:13" pos:end="319:13"><if pos:start="309:13" pos:end="319:13">if <condition pos:start="309:16" pos:end="309:53">(<expr pos:start="309:17" pos:end="309:52"><name pos:start="309:17" pos:end="309:33"><name pos:start="309:17" pos:end="309:19">ost</name><operator pos:start="309:20" pos:end="309:21">-&gt;</operator><name pos:start="309:22" pos:end="309:33">frame_number</name></name> <operator pos:start="309:35" pos:end="309:36">&gt;=</operator> <name pos:start="309:38" pos:end="309:52"><name pos:start="309:38" pos:end="309:40">ost</name><operator pos:start="309:41" pos:end="309:42">-&gt;</operator><name pos:start="309:43" pos:end="309:52">max_frames</name></name></expr>)</condition> <block pos:start="309:55" pos:end="319:13">{<block_content pos:start="311:17" pos:end="317:25">

                <decl_stmt pos:start="311:17" pos:end="311:22"><decl pos:start="311:17" pos:end="311:21"><type pos:start="311:17" pos:end="311:19"><name pos:start="311:17" pos:end="311:19">int</name></type> <name pos:start="311:21" pos:end="311:21">j</name></decl>;</decl_stmt>

                <for pos:start="313:17" pos:end="315:81">for <control pos:start="313:21" pos:end="313:57">(<init pos:start="313:22" pos:end="313:27"><expr pos:start="313:22" pos:end="313:26"><name pos:start="313:22" pos:end="313:22">j</name> <operator pos:start="313:24" pos:end="313:24">=</operator> <literal type="number" pos:start="313:26" pos:end="313:26">0</literal></expr>;</init> <condition pos:start="313:29" pos:end="313:52"><expr pos:start="313:29" pos:end="313:51"><name pos:start="313:29" pos:end="313:29">j</name> <operator pos:start="313:31" pos:end="313:31">&lt;</operator> <name pos:start="313:33" pos:end="313:51"><name pos:start="313:33" pos:end="313:34">of</name><operator pos:start="313:35" pos:end="313:36">-&gt;</operator><name pos:start="313:37" pos:end="313:39">ctx</name><operator pos:start="313:40" pos:end="313:41">-&gt;</operator><name pos:start="313:42" pos:end="313:51">nb_streams</name></name></expr>;</condition> <incr pos:start="313:54" pos:end="313:56"><expr pos:start="313:54" pos:end="313:56"><name pos:start="313:54" pos:end="313:54">j</name><operator pos:start="313:55" pos:end="313:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="315:21" pos:end="315:81"><block_content pos:start="315:21" pos:end="315:81">

                    <expr_stmt pos:start="315:21" pos:end="315:81"><expr pos:start="315:21" pos:end="315:80"><name pos:start="315:21" pos:end="315:53"><name pos:start="315:21" pos:end="315:34">output_streams</name><index pos:start="315:35" pos:end="315:53">[<expr pos:start="315:36" pos:end="315:52"><name pos:start="315:36" pos:end="315:48"><name pos:start="315:36" pos:end="315:37">of</name><operator pos:start="315:38" pos:end="315:39">-&gt;</operator><name pos:start="315:40" pos:end="315:48">ost_index</name></name> <operator pos:start="315:50" pos:end="315:50">+</operator> <name pos:start="315:52" pos:end="315:52">j</name></expr>]</index></name><operator pos:start="315:54" pos:end="315:54">.</operator><name pos:start="315:55" pos:end="315:76">is_past_recording_time</name> <operator pos:start="315:78" pos:end="315:78">=</operator> <literal type="number" pos:start="315:80" pos:end="315:80">1</literal></expr>;</expr_stmt></block_content></block></for>

                <continue pos:start="317:17" pos:end="317:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="323:9" pos:end="323:37">/* if none, if is finished */</comment>

        <if_stmt pos:start="325:9" pos:end="341:9"><if pos:start="325:9" pos:end="341:9">if <condition pos:start="325:12" pos:end="325:27">(<expr pos:start="325:13" pos:end="325:26"><name pos:start="325:13" pos:end="325:22">file_index</name> <operator pos:start="325:24" pos:end="325:24">&lt;</operator> <literal type="number" pos:start="325:26" pos:end="325:26">0</literal></expr>)</condition> <block pos:start="325:29" pos:end="341:9">{<block_content pos:start="327:13" pos:end="339:18">

            <if_stmt pos:start="327:13" pos:end="337:13"><if pos:start="327:13" pos:end="337:13">if <condition pos:start="327:16" pos:end="327:32">(<expr pos:start="327:17" pos:end="327:31"><name pos:start="327:17" pos:end="327:31">no_packet_count</name></expr>)</condition> <block pos:start="327:34" pos:end="337:13">{<block_content pos:start="329:17" pos:end="335:25">

                <expr_stmt pos:start="329:17" pos:end="329:36"><expr pos:start="329:17" pos:end="329:35"><name pos:start="329:17" pos:end="329:31">no_packet_count</name> <operator pos:start="329:33" pos:end="329:33">=</operator> <literal type="number" pos:start="329:35" pos:end="329:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:53"><expr pos:start="331:17" pos:end="331:52"><call pos:start="331:17" pos:end="331:52"><name pos:start="331:17" pos:end="331:22">memset</name><argument_list pos:start="331:23" pos:end="331:52">(<argument pos:start="331:24" pos:end="331:32"><expr pos:start="331:24" pos:end="331:32"><name pos:start="331:24" pos:end="331:32">no_packet</name></expr></argument>, <argument pos:start="331:35" pos:end="331:35"><expr pos:start="331:35" pos:end="331:35"><literal type="number" pos:start="331:35" pos:end="331:35">0</literal></expr></argument>, <argument pos:start="331:38" pos:end="331:51"><expr pos:start="331:38" pos:end="331:51"><name pos:start="331:38" pos:end="331:51">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:30"><expr pos:start="333:17" pos:end="333:29"><call pos:start="333:17" pos:end="333:29"><name pos:start="333:17" pos:end="333:22">usleep</name><argument_list pos:start="333:23" pos:end="333:29">(<argument pos:start="333:24" pos:end="333:28"><expr pos:start="333:24" pos:end="333:28"><literal type="number" pos:start="333:24" pos:end="333:28">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="335:17" pos:end="335:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="339:13" pos:end="339:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="345:9" pos:end="345:60">/* read a frame from it and output it in the fifo */</comment>

        <expr_stmt pos:start="347:9" pos:end="347:42"><expr pos:start="347:9" pos:end="347:41"><name pos:start="347:9" pos:end="347:10">is</name>  <operator pos:start="347:13" pos:end="347:13">=</operator> <name pos:start="347:15" pos:end="347:37"><name pos:start="347:15" pos:end="347:25">input_files</name><index pos:start="347:26" pos:end="347:37">[<expr pos:start="347:27" pos:end="347:36"><name pos:start="347:27" pos:end="347:36">file_index</name></expr>]</index></name><operator pos:start="347:38" pos:end="347:38">.</operator><name pos:start="347:39" pos:end="347:41">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:38"><expr pos:start="349:9" pos:end="349:37"><name pos:start="349:9" pos:end="349:11">ret</name> <operator pos:start="349:13" pos:end="349:13">=</operator> <call pos:start="349:15" pos:end="349:37"><name pos:start="349:15" pos:end="349:27">av_read_frame</name><argument_list pos:start="349:28" pos:end="349:37">(<argument pos:start="349:29" pos:end="349:30"><expr pos:start="349:29" pos:end="349:30"><name pos:start="349:29" pos:end="349:30">is</name></expr></argument>, <argument pos:start="349:33" pos:end="349:36"><expr pos:start="349:33" pos:end="349:36"><operator pos:start="349:33" pos:end="349:33">&amp;</operator><name pos:start="349:34" pos:end="349:36">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="351:9" pos:end="359:9"><if pos:start="351:9" pos:end="359:9">if <condition pos:start="351:12" pos:end="351:35">(<expr pos:start="351:13" pos:end="351:34"><name pos:start="351:13" pos:end="351:15">ret</name> <operator pos:start="351:17" pos:end="351:18">==</operator> <call pos:start="351:20" pos:end="351:34"><name pos:start="351:20" pos:end="351:26">AVERROR</name><argument_list pos:start="351:27" pos:end="351:34">(<argument pos:start="351:28" pos:end="351:33"><expr pos:start="351:28" pos:end="351:33"><name pos:start="351:28" pos:end="351:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="351:37" pos:end="359:9">{<block_content pos:start="353:13" pos:end="357:21">

            <expr_stmt pos:start="353:13" pos:end="353:38"><expr pos:start="353:13" pos:end="353:37"><name pos:start="353:13" pos:end="353:33"><name pos:start="353:13" pos:end="353:21">no_packet</name><index pos:start="353:22" pos:end="353:33">[<expr pos:start="353:23" pos:end="353:32"><name pos:start="353:23" pos:end="353:32">file_index</name></expr>]</index></name> <operator pos:start="353:35" pos:end="353:35">=</operator> <literal type="number" pos:start="353:37" pos:end="353:37">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:30"><expr pos:start="355:13" pos:end="355:29"><name pos:start="355:13" pos:end="355:27">no_packet_count</name><operator pos:start="355:28" pos:end="355:29">++</operator></expr>;</expr_stmt>

            <continue pos:start="357:13" pos:end="357:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="361:9" pos:end="373:9"><if pos:start="361:9" pos:end="373:9">if <condition pos:start="361:12" pos:end="361:20">(<expr pos:start="361:13" pos:end="361:19"><name pos:start="361:13" pos:end="361:15">ret</name> <operator pos:start="361:17" pos:end="361:17">&lt;</operator> <literal type="number" pos:start="361:19" pos:end="361:19">0</literal></expr>)</condition> <block pos:start="361:22" pos:end="373:9">{<block_content pos:start="363:13" pos:end="371:25">

            <expr_stmt pos:start="363:13" pos:end="363:52"><expr pos:start="363:13" pos:end="363:51"><name pos:start="363:13" pos:end="363:35"><name pos:start="363:13" pos:end="363:23">input_files</name><index pos:start="363:24" pos:end="363:35">[<expr pos:start="363:25" pos:end="363:34"><name pos:start="363:25" pos:end="363:34">file_index</name></expr>]</index></name><operator pos:start="363:36" pos:end="363:36">.</operator><name pos:start="363:37" pos:end="363:47">eof_reached</name> <operator pos:start="363:49" pos:end="363:49">=</operator> <literal type="number" pos:start="363:51" pos:end="363:51">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="365:13" pos:end="371:25"><if pos:start="365:13" pos:end="367:22">if <condition pos:start="365:16" pos:end="365:29">(<expr pos:start="365:17" pos:end="365:28"><name pos:start="365:17" pos:end="365:28">opt_shortest</name></expr>)</condition><block type="pseudo" pos:start="367:17" pos:end="367:22"><block_content pos:start="367:17" pos:end="367:22">

                <break pos:start="367:17" pos:end="367:22">break;</break></block_content></block></if>

            <else pos:start="369:13" pos:end="371:25">else<block type="pseudo" pos:start="371:17" pos:end="371:25"><block_content pos:start="371:17" pos:end="371:25">

                <continue pos:start="371:17" pos:end="371:25">continue;</continue></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="377:9" pos:end="377:28"><expr pos:start="377:9" pos:end="377:27"><name pos:start="377:9" pos:end="377:23">no_packet_count</name> <operator pos:start="377:25" pos:end="377:25">=</operator> <literal type="number" pos:start="377:27" pos:end="377:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:45"><expr pos:start="379:9" pos:end="379:44"><call pos:start="379:9" pos:end="379:44"><name pos:start="379:9" pos:end="379:14">memset</name><argument_list pos:start="379:15" pos:end="379:44">(<argument pos:start="379:16" pos:end="379:24"><expr pos:start="379:16" pos:end="379:24"><name pos:start="379:16" pos:end="379:24">no_packet</name></expr></argument>, <argument pos:start="379:27" pos:end="379:27"><expr pos:start="379:27" pos:end="379:27"><literal type="number" pos:start="379:27" pos:end="379:27">0</literal></expr></argument>, <argument pos:start="379:30" pos:end="379:43"><expr pos:start="379:30" pos:end="379:43"><name pos:start="379:30" pos:end="379:43">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="383:9" pos:end="389:9"><if pos:start="383:9" pos:end="389:9">if <condition pos:start="383:12" pos:end="383:24">(<expr pos:start="383:13" pos:end="383:23"><name pos:start="383:13" pos:end="383:23">do_pkt_dump</name></expr>)</condition> <block pos:start="383:26" pos:end="389:9">{<block_content pos:start="385:13" pos:end="387:60">

            <expr_stmt pos:start="385:13" pos:end="387:60"><expr pos:start="385:13" pos:end="387:59"><call pos:start="385:13" pos:end="387:59"><name pos:start="385:13" pos:end="385:28">av_pkt_dump_log2</name><argument_list pos:start="385:29" pos:end="387:59">(<argument pos:start="385:30" pos:end="385:33"><expr pos:start="385:30" pos:end="385:33"><name pos:start="385:30" pos:end="385:33">NULL</name></expr></argument>, <argument pos:start="385:36" pos:end="385:47"><expr pos:start="385:36" pos:end="385:47"><name pos:start="385:36" pos:end="385:47">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="385:50" pos:end="385:53"><expr pos:start="385:50" pos:end="385:53"><operator pos:start="385:50" pos:end="385:50">&amp;</operator><name pos:start="385:51" pos:end="385:53">pkt</name></expr></argument>, <argument pos:start="385:56" pos:end="385:66"><expr pos:start="385:56" pos:end="385:66"><name pos:start="385:56" pos:end="385:66">do_hex_dump</name></expr></argument>,

                             <argument pos:start="387:30" pos:end="387:58"><expr pos:start="387:30" pos:end="387:58"><name pos:start="387:30" pos:end="387:58"><name pos:start="387:30" pos:end="387:31">is</name><operator pos:start="387:32" pos:end="387:33">-&gt;</operator><name pos:start="387:34" pos:end="387:40">streams</name><index pos:start="387:41" pos:end="387:58">[<expr pos:start="387:42" pos:end="387:57"><name pos:start="387:42" pos:end="387:57"><name pos:start="387:42" pos:end="387:44">pkt</name><operator pos:start="387:45" pos:end="387:45">.</operator><name pos:start="387:46" pos:end="387:57">stream_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="391:9" pos:end="393:52">/* the following test is needed in case new streams appear

           dynamically in stream : we ignore them */</comment>

        <if_stmt pos:start="395:9" pos:end="397:32"><if pos:start="395:9" pos:end="397:32">if <condition pos:start="395:12" pos:end="395:67">(<expr pos:start="395:13" pos:end="395:66"><name pos:start="395:13" pos:end="395:28"><name pos:start="395:13" pos:end="395:15">pkt</name><operator pos:start="395:16" pos:end="395:16">.</operator><name pos:start="395:17" pos:end="395:28">stream_index</name></name> <operator pos:start="395:30" pos:end="395:31">&gt;=</operator> <name pos:start="395:33" pos:end="395:55"><name pos:start="395:33" pos:end="395:43">input_files</name><index pos:start="395:44" pos:end="395:55">[<expr pos:start="395:45" pos:end="395:54"><name pos:start="395:45" pos:end="395:54">file_index</name></expr>]</index></name><operator pos:start="395:56" pos:end="395:56">.</operator><name pos:start="395:57" pos:end="395:66">nb_streams</name></expr>)</condition><block type="pseudo" pos:start="397:13" pos:end="397:32"><block_content pos:start="397:13" pos:end="397:32">

            <goto pos:start="397:13" pos:end="397:32">goto <name pos:start="397:18" pos:end="397:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:73"><expr pos:start="399:9" pos:end="399:72"><name pos:start="399:9" pos:end="399:17">ist_index</name> <operator pos:start="399:19" pos:end="399:19">=</operator> <name pos:start="399:21" pos:end="399:43"><name pos:start="399:21" pos:end="399:31">input_files</name><index pos:start="399:32" pos:end="399:43">[<expr pos:start="399:33" pos:end="399:42"><name pos:start="399:33" pos:end="399:42">file_index</name></expr>]</index></name><operator pos:start="399:44" pos:end="399:44">.</operator><name pos:start="399:45" pos:end="399:53">ist_index</name> <operator pos:start="399:55" pos:end="399:55">+</operator> <name pos:start="399:57" pos:end="399:72"><name pos:start="399:57" pos:end="399:59">pkt</name><operator pos:start="399:60" pos:end="399:60">.</operator><name pos:start="399:61" pos:end="399:72">stream_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:40"><expr pos:start="401:9" pos:end="401:39"><name pos:start="401:9" pos:end="401:11">ist</name> <operator pos:start="401:13" pos:end="401:13">=</operator> <operator pos:start="401:15" pos:end="401:15">&amp;</operator><name pos:start="401:16" pos:end="401:39"><name pos:start="401:16" pos:end="401:28">input_streams</name><index pos:start="401:29" pos:end="401:39">[<expr pos:start="401:30" pos:end="401:38"><name pos:start="401:30" pos:end="401:38">ist_index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="403:9" pos:end="405:32"><if pos:start="403:9" pos:end="405:32">if <condition pos:start="403:12" pos:end="403:25">(<expr pos:start="403:13" pos:end="403:24"><name pos:start="403:13" pos:end="403:24"><name pos:start="403:13" pos:end="403:15">ist</name><operator pos:start="403:16" pos:end="403:17">-&gt;</operator><name pos:start="403:18" pos:end="403:24">discard</name></name></expr>)</condition><block type="pseudo" pos:start="405:13" pos:end="405:32"><block_content pos:start="405:13" pos:end="405:32">

            <goto pos:start="405:13" pos:end="405:32">goto <name pos:start="405:18" pos:end="405:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="409:9" pos:end="411:112"><if pos:start="409:9" pos:end="411:112">if <condition pos:start="409:12" pos:end="409:38">(<expr pos:start="409:13" pos:end="409:37"><name pos:start="409:13" pos:end="409:19"><name pos:start="409:13" pos:end="409:15">pkt</name><operator pos:start="409:16" pos:end="409:16">.</operator><name pos:start="409:17" pos:end="409:19">dts</name></name> <operator pos:start="409:21" pos:end="409:22">!=</operator> <name pos:start="409:24" pos:end="409:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="411:13" pos:end="411:112"><block_content pos:start="411:13" pos:end="411:112">

            <expr_stmt pos:start="411:13" pos:end="411:112"><expr pos:start="411:13" pos:end="411:111"><name pos:start="411:13" pos:end="411:19"><name pos:start="411:13" pos:end="411:15">pkt</name><operator pos:start="411:16" pos:end="411:16">.</operator><name pos:start="411:17" pos:end="411:19">dts</name></name> <operator pos:start="411:21" pos:end="411:22">+=</operator> <call pos:start="411:24" pos:end="411:111"><name pos:start="411:24" pos:end="411:35">av_rescale_q</name><argument_list pos:start="411:36" pos:end="411:111">(<argument pos:start="411:37" pos:end="411:74"><expr pos:start="411:37" pos:end="411:74"><name pos:start="411:37" pos:end="411:64"><name pos:start="411:37" pos:end="411:47">input_files</name><index pos:start="411:48" pos:end="411:64">[<expr pos:start="411:49" pos:end="411:63"><name pos:start="411:49" pos:end="411:63"><name pos:start="411:49" pos:end="411:51">ist</name><operator pos:start="411:52" pos:end="411:53">-&gt;</operator><name pos:start="411:54" pos:end="411:63">file_index</name></name></expr>]</index></name><operator pos:start="411:65" pos:end="411:65">.</operator><name pos:start="411:66" pos:end="411:74">ts_offset</name></expr></argument>, <argument pos:start="411:77" pos:end="411:90"><expr pos:start="411:77" pos:end="411:90"><name pos:start="411:77" pos:end="411:90">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="411:93" pos:end="411:110"><expr pos:start="411:93" pos:end="411:110"><name pos:start="411:93" pos:end="411:110"><name pos:start="411:93" pos:end="411:95">ist</name><operator pos:start="411:96" pos:end="411:97">-&gt;</operator><name pos:start="411:98" pos:end="411:99">st</name><operator pos:start="411:100" pos:end="411:101">-&gt;</operator><name pos:start="411:102" pos:end="411:110">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="413:9" pos:end="415:112"><if pos:start="413:9" pos:end="415:112">if <condition pos:start="413:12" pos:end="413:38">(<expr pos:start="413:13" pos:end="413:37"><name pos:start="413:13" pos:end="413:19"><name pos:start="413:13" pos:end="413:15">pkt</name><operator pos:start="413:16" pos:end="413:16">.</operator><name pos:start="413:17" pos:end="413:19">pts</name></name> <operator pos:start="413:21" pos:end="413:22">!=</operator> <name pos:start="413:24" pos:end="413:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="415:13" pos:end="415:112"><block_content pos:start="415:13" pos:end="415:112">

            <expr_stmt pos:start="415:13" pos:end="415:112"><expr pos:start="415:13" pos:end="415:111"><name pos:start="415:13" pos:end="415:19"><name pos:start="415:13" pos:end="415:15">pkt</name><operator pos:start="415:16" pos:end="415:16">.</operator><name pos:start="415:17" pos:end="415:19">pts</name></name> <operator pos:start="415:21" pos:end="415:22">+=</operator> <call pos:start="415:24" pos:end="415:111"><name pos:start="415:24" pos:end="415:35">av_rescale_q</name><argument_list pos:start="415:36" pos:end="415:111">(<argument pos:start="415:37" pos:end="415:74"><expr pos:start="415:37" pos:end="415:74"><name pos:start="415:37" pos:end="415:64"><name pos:start="415:37" pos:end="415:47">input_files</name><index pos:start="415:48" pos:end="415:64">[<expr pos:start="415:49" pos:end="415:63"><name pos:start="415:49" pos:end="415:63"><name pos:start="415:49" pos:end="415:51">ist</name><operator pos:start="415:52" pos:end="415:53">-&gt;</operator><name pos:start="415:54" pos:end="415:63">file_index</name></name></expr>]</index></name><operator pos:start="415:65" pos:end="415:65">.</operator><name pos:start="415:66" pos:end="415:74">ts_offset</name></expr></argument>, <argument pos:start="415:77" pos:end="415:90"><expr pos:start="415:77" pos:end="415:90"><name pos:start="415:77" pos:end="415:90">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="415:93" pos:end="415:110"><expr pos:start="415:93" pos:end="415:110"><name pos:start="415:93" pos:end="415:110"><name pos:start="415:93" pos:end="415:95">ist</name><operator pos:start="415:96" pos:end="415:97">-&gt;</operator><name pos:start="415:98" pos:end="415:99">st</name><operator pos:start="415:100" pos:end="415:101">-&gt;</operator><name pos:start="415:102" pos:end="415:110">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="419:9" pos:end="421:37"><if pos:start="419:9" pos:end="421:37">if <condition pos:start="419:12" pos:end="419:38">(<expr pos:start="419:13" pos:end="419:37"><name pos:start="419:13" pos:end="419:19"><name pos:start="419:13" pos:end="419:15">pkt</name><operator pos:start="419:16" pos:end="419:16">.</operator><name pos:start="419:17" pos:end="419:19">pts</name></name> <operator pos:start="419:21" pos:end="419:22">!=</operator> <name pos:start="419:24" pos:end="419:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="421:13" pos:end="421:37"><block_content pos:start="421:13" pos:end="421:37">

            <expr_stmt pos:start="421:13" pos:end="421:37"><expr pos:start="421:13" pos:end="421:36"><name pos:start="421:13" pos:end="421:19"><name pos:start="421:13" pos:end="421:15">pkt</name><operator pos:start="421:16" pos:end="421:16">.</operator><name pos:start="421:17" pos:end="421:19">pts</name></name> <operator pos:start="421:21" pos:end="421:22">*=</operator> <name pos:start="421:24" pos:end="421:36"><name pos:start="421:24" pos:end="421:26">ist</name><operator pos:start="421:27" pos:end="421:28">-&gt;</operator><name pos:start="421:29" pos:end="421:36">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="423:9" pos:end="425:37"><if pos:start="423:9" pos:end="425:37">if <condition pos:start="423:12" pos:end="423:38">(<expr pos:start="423:13" pos:end="423:37"><name pos:start="423:13" pos:end="423:19"><name pos:start="423:13" pos:end="423:15">pkt</name><operator pos:start="423:16" pos:end="423:16">.</operator><name pos:start="423:17" pos:end="423:19">dts</name></name> <operator pos:start="423:21" pos:end="423:22">!=</operator> <name pos:start="423:24" pos:end="423:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="425:13" pos:end="425:37"><block_content pos:start="425:13" pos:end="425:37">

            <expr_stmt pos:start="425:13" pos:end="425:37"><expr pos:start="425:13" pos:end="425:36"><name pos:start="425:13" pos:end="425:19"><name pos:start="425:13" pos:end="425:15">pkt</name><operator pos:start="425:16" pos:end="425:16">.</operator><name pos:start="425:17" pos:end="425:19">dts</name></name> <operator pos:start="425:21" pos:end="425:22">*=</operator> <name pos:start="425:24" pos:end="425:36"><name pos:start="425:24" pos:end="425:26">ist</name><operator pos:start="425:27" pos:end="425:28">-&gt;</operator><name pos:start="425:29" pos:end="425:36">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="line" pos:start="429:9" pos:end="429:86">//fprintf(stderr, "next:%"PRId64" dts:%"PRId64"/%"PRId64" off:%"PRId64" %d\n",</comment>

        <comment type="line" pos:start="431:9" pos:end="431:32">//        ist-&gt;next_dts,</comment>

        <comment type="line" pos:start="433:9" pos:end="433:126">//        ist-&gt;dts, av_rescale_q(pkt.dts, ist-&gt;st-&gt;time_base, AV_TIME_BASE_Q), input_files[ist-&gt;file_index].ts_offset,</comment>

        <comment type="line" pos:start="435:9" pos:end="435:46">//        ist-&gt;st-&gt;codec-&gt;codec_type);</comment>

        <if_stmt pos:start="437:9" pos:end="469:9"><if pos:start="437:9" pos:end="469:9">if <condition pos:start="437:12" pos:end="439:55">(<expr pos:start="437:13" pos:end="439:54"><name pos:start="437:13" pos:end="437:19"><name pos:start="437:13" pos:end="437:15">pkt</name><operator pos:start="437:16" pos:end="437:16">.</operator><name pos:start="437:17" pos:end="437:19">dts</name></name> <operator pos:start="437:21" pos:end="437:22">!=</operator> <name pos:start="437:24" pos:end="437:37">AV_NOPTS_VALUE</name> <operator pos:start="437:39" pos:end="437:40">&amp;&amp;</operator> <name pos:start="437:42" pos:end="437:54"><name pos:start="437:42" pos:end="437:44">ist</name><operator pos:start="437:45" pos:end="437:46">-&gt;</operator><name pos:start="437:47" pos:end="437:54">next_dts</name></name> <operator pos:start="437:56" pos:end="437:57">!=</operator> <name pos:start="437:59" pos:end="437:72">AV_NOPTS_VALUE</name>

            <operator pos:start="439:13" pos:end="439:14">&amp;&amp;</operator> <operator pos:start="439:16" pos:end="439:16">(</operator><name pos:start="439:17" pos:end="439:34"><name pos:start="439:17" pos:end="439:18">is</name><operator pos:start="439:19" pos:end="439:20">-&gt;</operator><name pos:start="439:21" pos:end="439:27">iformat</name><operator pos:start="439:28" pos:end="439:29">-&gt;</operator><name pos:start="439:30" pos:end="439:34">flags</name></name> <operator pos:start="439:36" pos:end="439:36">&amp;</operator> <name pos:start="439:38" pos:end="439:53">AVFMT_TS_DISCONT</name><operator pos:start="439:54" pos:end="439:54">)</operator></expr>)</condition> <block pos:start="439:57" pos:end="469:9">{<block_content pos:start="441:13" pos:end="467:13">

            <decl_stmt pos:start="441:13" pos:end="441:88"><decl pos:start="441:13" pos:end="441:87"><type pos:start="441:13" pos:end="441:19"><name pos:start="441:13" pos:end="441:19">int64_t</name></type> <name pos:start="441:21" pos:end="441:27">pkt_dts</name> <init pos:start="441:29" pos:end="441:87">= <expr pos:start="441:31" pos:end="441:87"><call pos:start="441:31" pos:end="441:87"><name pos:start="441:31" pos:end="441:42">av_rescale_q</name><argument_list pos:start="441:43" pos:end="441:87">(<argument pos:start="441:44" pos:end="441:50"><expr pos:start="441:44" pos:end="441:50"><name pos:start="441:44" pos:end="441:50"><name pos:start="441:44" pos:end="441:46">pkt</name><operator pos:start="441:47" pos:end="441:47">.</operator><name pos:start="441:48" pos:end="441:50">dts</name></name></expr></argument>, <argument pos:start="441:53" pos:end="441:70"><expr pos:start="441:53" pos:end="441:70"><name pos:start="441:53" pos:end="441:70"><name pos:start="441:53" pos:end="441:55">ist</name><operator pos:start="441:56" pos:end="441:57">-&gt;</operator><name pos:start="441:58" pos:end="441:59">st</name><operator pos:start="441:60" pos:end="441:61">-&gt;</operator><name pos:start="441:62" pos:end="441:70">time_base</name></name></expr></argument>, <argument pos:start="441:73" pos:end="441:86"><expr pos:start="441:73" pos:end="441:86"><name pos:start="441:73" pos:end="441:86">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="443:13" pos:end="443:54"><decl pos:start="443:13" pos:end="443:53"><type pos:start="443:13" pos:end="443:19"><name pos:start="443:13" pos:end="443:19">int64_t</name></type> <name pos:start="443:21" pos:end="443:25">delta</name>   <init pos:start="443:29" pos:end="443:53">= <expr pos:start="443:31" pos:end="443:53"><name pos:start="443:31" pos:end="443:37">pkt_dts</name> <operator pos:start="443:39" pos:end="443:39">-</operator> <name pos:start="443:41" pos:end="443:53"><name pos:start="443:41" pos:end="443:43">ist</name><operator pos:start="443:44" pos:end="443:45">-&gt;</operator><name pos:start="443:46" pos:end="443:53">next_dts</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="445:13" pos:end="467:13"><if pos:start="445:13" pos:end="467:13">if<condition pos:start="445:15" pos:end="451:47">(<expr pos:start="445:16" pos:end="451:46"><operator pos:start="445:16" pos:end="445:16">(</operator><name pos:start="445:17" pos:end="445:21">delta</name> <operator pos:start="445:23" pos:end="445:23">&lt;</operator> <operator pos:start="445:25" pos:end="445:25">-</operator><literal type="number" pos:start="445:26" pos:end="445:28">1LL</literal><operator pos:start="445:29" pos:end="445:29">*</operator><name pos:start="445:30" pos:end="445:48">dts_delta_threshold</name><operator pos:start="445:49" pos:end="445:49">*</operator><name pos:start="445:50" pos:end="445:61">AV_TIME_BASE</name> <operator pos:start="445:63" pos:end="445:64">||</operator>

                <operator pos:start="447:17" pos:end="447:17">(</operator><name pos:start="447:18" pos:end="447:22">delta</name> <operator pos:start="447:24" pos:end="447:24">&gt;</operator> <literal type="number" pos:start="447:26" pos:end="447:28">1LL</literal><operator pos:start="447:29" pos:end="447:29">*</operator><name pos:start="447:30" pos:end="447:48">dts_delta_threshold</name><operator pos:start="447:49" pos:end="447:49">*</operator><name pos:start="447:50" pos:end="447:61">AV_TIME_BASE</name> <operator pos:start="447:63" pos:end="447:64">&amp;&amp;</operator>

                 <name pos:start="449:18" pos:end="449:43"><name pos:start="449:18" pos:end="449:20">ist</name><operator pos:start="449:21" pos:end="449:22">-&gt;</operator><name pos:start="449:23" pos:end="449:24">st</name><operator pos:start="449:25" pos:end="449:26">-&gt;</operator><name pos:start="449:27" pos:end="449:31">codec</name><operator pos:start="449:32" pos:end="449:33">-&gt;</operator><name pos:start="449:34" pos:end="449:43">codec_type</name></name> <operator pos:start="449:45" pos:end="449:46">!=</operator> <name pos:start="449:48" pos:end="449:68">AVMEDIA_TYPE_SUBTITLE</name><operator pos:start="449:69" pos:end="449:69">)</operator> <operator pos:start="449:71" pos:end="449:72">||</operator>

                <name pos:start="451:17" pos:end="451:23">pkt_dts</name><operator pos:start="451:24" pos:end="451:24">+</operator><literal type="number" pos:start="451:25" pos:end="451:25">1</literal><operator pos:start="451:26" pos:end="451:26">&lt;</operator><name pos:start="451:27" pos:end="451:34"><name pos:start="451:27" pos:end="451:29">ist</name><operator pos:start="451:30" pos:end="451:31">-&gt;</operator><name pos:start="451:32" pos:end="451:34">pts</name></name><operator pos:start="451:35" pos:end="451:35">)</operator><operator pos:start="451:36" pos:end="451:37">&amp;&amp;</operator> <operator pos:start="451:39" pos:end="451:39">!</operator><name pos:start="451:40" pos:end="451:46">copy_ts</name></expr>)</condition><block pos:start="451:48" pos:end="467:13">{<block_content pos:start="453:17" pos:end="465:86">

                <expr_stmt pos:start="453:17" pos:end="453:64"><expr pos:start="453:17" pos:end="453:63"><name pos:start="453:17" pos:end="453:44"><name pos:start="453:17" pos:end="453:27">input_files</name><index pos:start="453:28" pos:end="453:44">[<expr pos:start="453:29" pos:end="453:43"><name pos:start="453:29" pos:end="453:43"><name pos:start="453:29" pos:end="453:31">ist</name><operator pos:start="453:32" pos:end="453:33">-&gt;</operator><name pos:start="453:34" pos:end="453:43">file_index</name></name></expr>]</index></name><operator pos:start="453:45" pos:end="453:45">.</operator><name pos:start="453:46" pos:end="453:54">ts_offset</name> <operator pos:start="453:56" pos:end="453:57">-=</operator> <name pos:start="453:59" pos:end="453:63">delta</name></expr>;</expr_stmt>

                <expr_stmt pos:start="455:17" pos:end="459:70"><expr pos:start="455:17" pos:end="459:69"><call pos:start="455:17" pos:end="459:69"><name pos:start="455:17" pos:end="455:22">av_log</name><argument_list pos:start="455:23" pos:end="459:69">(<argument pos:start="455:24" pos:end="455:27"><expr pos:start="455:24" pos:end="455:27"><name pos:start="455:24" pos:end="455:27">NULL</name></expr></argument>, <argument pos:start="455:30" pos:end="455:41"><expr pos:start="455:30" pos:end="455:41"><name pos:start="455:30" pos:end="455:41">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="457:24" pos:end="457:83"><expr pos:start="457:24" pos:end="457:83"><literal type="string" pos:start="457:24" pos:end="457:50">"timestamp discontinuity %"</literal><name pos:start="457:51" pos:end="457:56">PRId64</name><literal type="string" pos:start="457:57" pos:end="457:73">", new offset= %"</literal><name pos:start="457:74" pos:end="457:79">PRId64</name><literal type="string" pos:start="457:80" pos:end="457:83">"\n"</literal></expr></argument>,

                       <argument pos:start="459:24" pos:end="459:28"><expr pos:start="459:24" pos:end="459:28"><name pos:start="459:24" pos:end="459:28">delta</name></expr></argument>, <argument pos:start="459:31" pos:end="459:68"><expr pos:start="459:31" pos:end="459:68"><name pos:start="459:31" pos:end="459:58"><name pos:start="459:31" pos:end="459:41">input_files</name><index pos:start="459:42" pos:end="459:58">[<expr pos:start="459:43" pos:end="459:57"><name pos:start="459:43" pos:end="459:57"><name pos:start="459:43" pos:end="459:45">ist</name><operator pos:start="459:46" pos:end="459:47">-&gt;</operator><name pos:start="459:48" pos:end="459:57">file_index</name></name></expr>]</index></name><operator pos:start="459:59" pos:end="459:59">.</operator><name pos:start="459:60" pos:end="459:68">ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="461:17" pos:end="461:82"><expr pos:start="461:17" pos:end="461:81"><name pos:start="461:17" pos:end="461:23"><name pos:start="461:17" pos:end="461:19">pkt</name><operator pos:start="461:20" pos:end="461:20">.</operator><name pos:start="461:21" pos:end="461:23">dts</name></name><operator pos:start="461:24" pos:end="461:25">-=</operator> <call pos:start="461:27" pos:end="461:81"><name pos:start="461:27" pos:end="461:38">av_rescale_q</name><argument_list pos:start="461:39" pos:end="461:81">(<argument pos:start="461:40" pos:end="461:44"><expr pos:start="461:40" pos:end="461:44"><name pos:start="461:40" pos:end="461:44">delta</name></expr></argument>, <argument pos:start="461:47" pos:end="461:60"><expr pos:start="461:47" pos:end="461:60"><name pos:start="461:47" pos:end="461:60">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="461:63" pos:end="461:80"><expr pos:start="461:63" pos:end="461:80"><name pos:start="461:63" pos:end="461:80"><name pos:start="461:63" pos:end="461:65">ist</name><operator pos:start="461:66" pos:end="461:67">-&gt;</operator><name pos:start="461:68" pos:end="461:69">st</name><operator pos:start="461:70" pos:end="461:71">-&gt;</operator><name pos:start="461:72" pos:end="461:80">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="463:17" pos:end="465:86"><if pos:start="463:17" pos:end="465:86">if <condition pos:start="463:20" pos:end="463:46">(<expr pos:start="463:21" pos:end="463:45"><name pos:start="463:21" pos:end="463:27"><name pos:start="463:21" pos:end="463:23">pkt</name><operator pos:start="463:24" pos:end="463:24">.</operator><name pos:start="463:25" pos:end="463:27">pts</name></name> <operator pos:start="463:29" pos:end="463:30">!=</operator> <name pos:start="463:32" pos:end="463:45">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="465:21" pos:end="465:86"><block_content pos:start="465:21" pos:end="465:86">

                    <expr_stmt pos:start="465:21" pos:end="465:86"><expr pos:start="465:21" pos:end="465:85"><name pos:start="465:21" pos:end="465:27"><name pos:start="465:21" pos:end="465:23">pkt</name><operator pos:start="465:24" pos:end="465:24">.</operator><name pos:start="465:25" pos:end="465:27">pts</name></name><operator pos:start="465:28" pos:end="465:29">-=</operator> <call pos:start="465:31" pos:end="465:85"><name pos:start="465:31" pos:end="465:42">av_rescale_q</name><argument_list pos:start="465:43" pos:end="465:85">(<argument pos:start="465:44" pos:end="465:48"><expr pos:start="465:44" pos:end="465:48"><name pos:start="465:44" pos:end="465:48">delta</name></expr></argument>, <argument pos:start="465:51" pos:end="465:64"><expr pos:start="465:51" pos:end="465:64"><name pos:start="465:51" pos:end="465:64">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="465:67" pos:end="465:84"><expr pos:start="465:67" pos:end="465:84"><name pos:start="465:67" pos:end="465:84"><name pos:start="465:67" pos:end="465:69">ist</name><operator pos:start="465:70" pos:end="465:71">-&gt;</operator><name pos:start="465:72" pos:end="465:73">st</name><operator pos:start="465:74" pos:end="465:75">-&gt;</operator><name pos:start="465:76" pos:end="465:84">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="473:9" pos:end="473:94">// fprintf(stderr,"read #%d.%d size=%d\n", ist-&gt;file_index, ist-&gt;st-&gt;index, pkt.size);</comment>

        <if_stmt pos:start="475:9" pos:end="491:9"><if pos:start="475:9" pos:end="491:9">if <condition pos:start="475:12" pos:end="475:76">(<expr pos:start="475:13" pos:end="475:75"><call pos:start="475:13" pos:end="475:71"><name pos:start="475:13" pos:end="475:25">output_packet</name><argument_list pos:start="475:26" pos:end="475:71">(<argument pos:start="475:27" pos:end="475:29"><expr pos:start="475:27" pos:end="475:29"><name pos:start="475:27" pos:end="475:29">ist</name></expr></argument>, <argument pos:start="475:32" pos:end="475:45"><expr pos:start="475:32" pos:end="475:45"><name pos:start="475:32" pos:end="475:45">output_streams</name></expr></argument>, <argument pos:start="475:48" pos:end="475:64"><expr pos:start="475:48" pos:end="475:64"><name pos:start="475:48" pos:end="475:64">nb_output_streams</name></expr></argument>, <argument pos:start="475:67" pos:end="475:70"><expr pos:start="475:67" pos:end="475:70"><operator pos:start="475:67" pos:end="475:67">&amp;</operator><name pos:start="475:68" pos:end="475:70">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="475:73" pos:end="475:73">&lt;</operator> <literal type="number" pos:start="475:75" pos:end="475:75">0</literal></expr>)</condition> <block pos:start="475:78" pos:end="491:9">{<block_content pos:start="479:13" pos:end="489:21">



            <expr_stmt pos:start="479:13" pos:end="481:52"><expr pos:start="479:13" pos:end="481:51"><call pos:start="479:13" pos:end="481:51"><name pos:start="479:13" pos:end="479:18">av_log</name><argument_list pos:start="479:19" pos:end="481:51">(<argument pos:start="479:20" pos:end="479:23"><expr pos:start="479:20" pos:end="479:23"><name pos:start="479:20" pos:end="479:23">NULL</name></expr></argument>, <argument pos:start="479:26" pos:end="479:37"><expr pos:start="479:26" pos:end="479:37"><name pos:start="479:26" pos:end="479:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="479:40" pos:end="479:77"><expr pos:start="479:40" pos:end="479:77"><literal type="string" pos:start="479:40" pos:end="479:77">"Error while decoding stream #%d:%d\n"</literal></expr></argument>,

                   <argument pos:start="481:20" pos:end="481:34"><expr pos:start="481:20" pos:end="481:34"><name pos:start="481:20" pos:end="481:34"><name pos:start="481:20" pos:end="481:22">ist</name><operator pos:start="481:23" pos:end="481:24">-&gt;</operator><name pos:start="481:25" pos:end="481:34">file_index</name></name></expr></argument>, <argument pos:start="481:37" pos:end="481:50"><expr pos:start="481:37" pos:end="481:50"><name pos:start="481:37" pos:end="481:50"><name pos:start="481:37" pos:end="481:39">ist</name><operator pos:start="481:40" pos:end="481:41">-&gt;</operator><name pos:start="481:42" pos:end="481:43">st</name><operator pos:start="481:44" pos:end="481:45">-&gt;</operator><name pos:start="481:46" pos:end="481:50">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="483:13" pos:end="485:32"><if pos:start="483:13" pos:end="485:32">if <condition pos:start="483:16" pos:end="483:30">(<expr pos:start="483:17" pos:end="483:29"><name pos:start="483:17" pos:end="483:29">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="485:17" pos:end="485:32"><block_content pos:start="485:17" pos:end="485:32">

                <expr_stmt pos:start="485:17" pos:end="485:32"><expr pos:start="485:17" pos:end="485:31"><call pos:start="485:17" pos:end="485:31"><name pos:start="485:17" pos:end="485:28">exit_program</name><argument_list pos:start="485:29" pos:end="485:31">(<argument pos:start="485:30" pos:end="485:30"><expr pos:start="485:30" pos:end="485:30"><literal type="number" pos:start="485:30" pos:end="485:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:33"><expr pos:start="487:13" pos:end="487:32"><call pos:start="487:13" pos:end="487:32"><name pos:start="487:13" pos:end="487:26">av_free_packet</name><argument_list pos:start="487:27" pos:end="487:32">(<argument pos:start="487:28" pos:end="487:31"><expr pos:start="487:28" pos:end="487:31"><operator pos:start="487:28" pos:end="487:28">&amp;</operator><name pos:start="487:29" pos:end="487:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="489:13" pos:end="489:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



    <label pos:start="495:5" pos:end="495:19"><name pos:start="495:5" pos:end="495:18">discard_packet</name>:</label>

        <expr_stmt pos:start="497:9" pos:end="497:29"><expr pos:start="497:9" pos:end="497:28"><call pos:start="497:9" pos:end="497:28"><name pos:start="497:9" pos:end="497:22">av_free_packet</name><argument_list pos:start="497:23" pos:end="497:28">(<argument pos:start="497:24" pos:end="497:27"><expr pos:start="497:24" pos:end="497:27"><operator pos:start="497:24" pos:end="497:24">&amp;</operator><name pos:start="497:25" pos:end="497:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="501:9" pos:end="501:75">/* dump report by using the output first video and audio streams */</comment>

        <expr_stmt pos:start="503:9" pos:end="503:96"><expr pos:start="503:9" pos:end="503:95"><call pos:start="503:9" pos:end="503:95"><name pos:start="503:9" pos:end="503:20">print_report</name><argument_list pos:start="503:21" pos:end="503:95">(<argument pos:start="503:22" pos:end="503:33"><expr pos:start="503:22" pos:end="503:33"><name pos:start="503:22" pos:end="503:33">output_files</name></expr></argument>, <argument pos:start="503:36" pos:end="503:49"><expr pos:start="503:36" pos:end="503:49"><name pos:start="503:36" pos:end="503:49">output_streams</name></expr></argument>, <argument pos:start="503:52" pos:end="503:68"><expr pos:start="503:52" pos:end="503:68"><name pos:start="503:52" pos:end="503:68">nb_output_streams</name></expr></argument>, <argument pos:start="503:71" pos:end="503:71"><expr pos:start="503:71" pos:end="503:71"><literal type="number" pos:start="503:71" pos:end="503:71">0</literal></expr></argument>, <argument pos:start="503:74" pos:end="503:84"><expr pos:start="503:74" pos:end="503:84"><name pos:start="503:74" pos:end="503:84">timer_start</name></expr></argument>, <argument pos:start="503:87" pos:end="503:94"><expr pos:start="503:87" pos:end="503:94"><name pos:start="503:87" pos:end="503:94">cur_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="509:5" pos:end="509:65">/* at the end of stream, we must flush the decoder buffers */</comment>

    <for pos:start="511:5" pos:end="521:5">for <control pos:start="511:9" pos:end="511:42">(<init pos:start="511:10" pos:end="511:15"><expr pos:start="511:10" pos:end="511:14"><name pos:start="511:10" pos:end="511:10">i</name> <operator pos:start="511:12" pos:end="511:12">=</operator> <literal type="number" pos:start="511:14" pos:end="511:14">0</literal></expr>;</init> <condition pos:start="511:17" pos:end="511:37"><expr pos:start="511:17" pos:end="511:36"><name pos:start="511:17" pos:end="511:17">i</name> <operator pos:start="511:19" pos:end="511:19">&lt;</operator> <name pos:start="511:21" pos:end="511:36">nb_input_streams</name></expr>;</condition> <incr pos:start="511:39" pos:end="511:41"><expr pos:start="511:39" pos:end="511:41"><name pos:start="511:39" pos:end="511:39">i</name><operator pos:start="511:40" pos:end="511:41">++</operator></expr></incr>)</control> <block pos:start="511:44" pos:end="521:5">{<block_content pos:start="513:9" pos:end="519:9">

        <expr_stmt pos:start="513:9" pos:end="513:32"><expr pos:start="513:9" pos:end="513:31"><name pos:start="513:9" pos:end="513:11">ist</name> <operator pos:start="513:13" pos:end="513:13">=</operator> <operator pos:start="513:15" pos:end="513:15">&amp;</operator><name pos:start="513:16" pos:end="513:31"><name pos:start="513:16" pos:end="513:28">input_streams</name><index pos:start="513:29" pos:end="513:31">[<expr pos:start="513:30" pos:end="513:30"><name pos:start="513:30" pos:end="513:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="515:9" pos:end="519:9"><if pos:start="515:9" pos:end="519:9">if <condition pos:start="515:12" pos:end="515:33">(<expr pos:start="515:13" pos:end="515:32"><name pos:start="515:13" pos:end="515:32"><name pos:start="515:13" pos:end="515:15">ist</name><operator pos:start="515:16" pos:end="515:17">-&gt;</operator><name pos:start="515:18" pos:end="515:32">decoding_needed</name></name></expr>)</condition> <block pos:start="515:35" pos:end="519:9">{<block_content pos:start="517:13" pos:end="517:72">

            <expr_stmt pos:start="517:13" pos:end="517:72"><expr pos:start="517:13" pos:end="517:71"><call pos:start="517:13" pos:end="517:71"><name pos:start="517:13" pos:end="517:25">output_packet</name><argument_list pos:start="517:26" pos:end="517:71">(<argument pos:start="517:27" pos:end="517:29"><expr pos:start="517:27" pos:end="517:29"><name pos:start="517:27" pos:end="517:29">ist</name></expr></argument>, <argument pos:start="517:32" pos:end="517:45"><expr pos:start="517:32" pos:end="517:45"><name pos:start="517:32" pos:end="517:45">output_streams</name></expr></argument>, <argument pos:start="517:48" pos:end="517:64"><expr pos:start="517:48" pos:end="517:64"><name pos:start="517:48" pos:end="517:64">nb_output_streams</name></expr></argument>, <argument pos:start="517:67" pos:end="517:70"><expr pos:start="517:67" pos:end="517:70"><name pos:start="517:67" pos:end="517:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="523:5" pos:end="523:54"><expr pos:start="523:5" pos:end="523:53"><call pos:start="523:5" pos:end="523:53"><name pos:start="523:5" pos:end="523:18">flush_encoders</name><argument_list pos:start="523:19" pos:end="523:53">(<argument pos:start="523:20" pos:end="523:33"><expr pos:start="523:20" pos:end="523:33"><name pos:start="523:20" pos:end="523:33">output_streams</name></expr></argument>, <argument pos:start="523:36" pos:end="523:52"><expr pos:start="523:36" pos:end="523:52"><name pos:start="523:36" pos:end="523:52">nb_output_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="527:5" pos:end="527:16"><expr pos:start="527:5" pos:end="527:15"><call pos:start="527:5" pos:end="527:15"><name pos:start="527:5" pos:end="527:13">term_exit</name><argument_list pos:start="527:14" pos:end="527:15">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="531:5" pos:end="531:52">/* write the trailer if needed and close file */</comment>

    <for pos:start="533:5" pos:end="539:5">for <control pos:start="533:9" pos:end="533:41">(<init pos:start="533:10" pos:end="533:15"><expr pos:start="533:10" pos:end="533:14"><name pos:start="533:10" pos:end="533:10">i</name> <operator pos:start="533:12" pos:end="533:12">=</operator> <literal type="number" pos:start="533:14" pos:end="533:14">0</literal></expr>;</init> <condition pos:start="533:17" pos:end="533:36"><expr pos:start="533:17" pos:end="533:35"><name pos:start="533:17" pos:end="533:17">i</name> <operator pos:start="533:19" pos:end="533:19">&lt;</operator> <name pos:start="533:21" pos:end="533:35">nb_output_files</name></expr>;</condition> <incr pos:start="533:38" pos:end="533:40"><expr pos:start="533:38" pos:end="533:40"><name pos:start="533:38" pos:end="533:38">i</name><operator pos:start="533:39" pos:end="533:40">++</operator></expr></incr>)</control> <block pos:start="533:43" pos:end="539:5">{<block_content pos:start="535:9" pos:end="537:29">

        <expr_stmt pos:start="535:9" pos:end="535:33"><expr pos:start="535:9" pos:end="535:32"><name pos:start="535:9" pos:end="535:10">os</name> <operator pos:start="535:12" pos:end="535:12">=</operator> <name pos:start="535:14" pos:end="535:28"><name pos:start="535:14" pos:end="535:25">output_files</name><index pos:start="535:26" pos:end="535:28">[<expr pos:start="535:27" pos:end="535:27"><name pos:start="535:27" pos:end="535:27">i</name></expr>]</index></name><operator pos:start="535:29" pos:end="535:29">.</operator><name pos:start="535:30" pos:end="535:32">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="537:9" pos:end="537:29"><expr pos:start="537:9" pos:end="537:28"><call pos:start="537:9" pos:end="537:28"><name pos:start="537:9" pos:end="537:24">av_write_trailer</name><argument_list pos:start="537:25" pos:end="537:28">(<argument pos:start="537:26" pos:end="537:27"><expr pos:start="537:26" pos:end="537:27"><name pos:start="537:26" pos:end="537:27">os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="543:5" pos:end="543:64">/* dump report by using the first video and audio streams */</comment>

    <expr_stmt pos:start="545:5" pos:end="545:96"><expr pos:start="545:5" pos:end="545:95"><call pos:start="545:5" pos:end="545:95"><name pos:start="545:5" pos:end="545:16">print_report</name><argument_list pos:start="545:17" pos:end="545:95">(<argument pos:start="545:18" pos:end="545:29"><expr pos:start="545:18" pos:end="545:29"><name pos:start="545:18" pos:end="545:29">output_files</name></expr></argument>, <argument pos:start="545:32" pos:end="545:45"><expr pos:start="545:32" pos:end="545:45"><name pos:start="545:32" pos:end="545:45">output_streams</name></expr></argument>, <argument pos:start="545:48" pos:end="545:64"><expr pos:start="545:48" pos:end="545:64"><name pos:start="545:48" pos:end="545:64">nb_output_streams</name></expr></argument>, <argument pos:start="545:67" pos:end="545:67"><expr pos:start="545:67" pos:end="545:67"><literal type="number" pos:start="545:67" pos:end="545:67">1</literal></expr></argument>, <argument pos:start="545:70" pos:end="545:80"><expr pos:start="545:70" pos:end="545:80"><name pos:start="545:70" pos:end="545:80">timer_start</name></expr></argument>, <argument pos:start="545:83" pos:end="545:94"><expr pos:start="545:83" pos:end="545:94"><call pos:start="545:83" pos:end="545:94"><name pos:start="545:83" pos:end="545:92">av_gettime</name><argument_list pos:start="545:93" pos:end="545:94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="549:5" pos:end="549:28">/* close each encoder */</comment>

    <for pos:start="551:5" pos:end="569:5">for <control pos:start="551:9" pos:end="551:43">(<init pos:start="551:10" pos:end="551:15"><expr pos:start="551:10" pos:end="551:14"><name pos:start="551:10" pos:end="551:10">i</name> <operator pos:start="551:12" pos:end="551:12">=</operator> <literal type="number" pos:start="551:14" pos:end="551:14">0</literal></expr>;</init> <condition pos:start="551:17" pos:end="551:38"><expr pos:start="551:17" pos:end="551:37"><name pos:start="551:17" pos:end="551:17">i</name> <operator pos:start="551:19" pos:end="551:19">&lt;</operator> <name pos:start="551:21" pos:end="551:37">nb_output_streams</name></expr>;</condition> <incr pos:start="551:40" pos:end="551:42"><expr pos:start="551:40" pos:end="551:42"><name pos:start="551:40" pos:end="551:40">i</name><operator pos:start="551:41" pos:end="551:42">++</operator></expr></incr>)</control> <block pos:start="551:45" pos:end="569:5">{<block_content pos:start="553:9" pos:end="568:0">

        <expr_stmt pos:start="553:9" pos:end="553:33"><expr pos:start="553:9" pos:end="553:32"><name pos:start="553:9" pos:end="553:11">ost</name> <operator pos:start="553:13" pos:end="553:13">=</operator> <operator pos:start="553:15" pos:end="553:15">&amp;</operator><name pos:start="553:16" pos:end="553:32"><name pos:start="553:16" pos:end="553:29">output_streams</name><index pos:start="553:30" pos:end="553:32">[<expr pos:start="553:31" pos:end="553:31"><name pos:start="553:31" pos:end="553:31">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="555:9" pos:end="564:0"><if pos:start="555:9" pos:end="564:0">if <condition pos:start="555:12" pos:end="555:33">(<expr pos:start="555:13" pos:end="555:32"><name pos:start="555:13" pos:end="555:32"><name pos:start="555:13" pos:end="555:15">ost</name><operator pos:start="555:16" pos:end="555:17">-&gt;</operator><name pos:start="555:18" pos:end="555:32">encoding_needed</name></name></expr>)</condition> <block pos:start="555:35" pos:end="564:0">{<block_content pos:start="557:13" pos:end="559:42">

            <expr_stmt pos:start="557:13" pos:end="557:48"><expr pos:start="557:13" pos:end="557:47"><call pos:start="557:13" pos:end="557:47"><name pos:start="557:13" pos:end="557:20">av_freep</name><argument_list pos:start="557:21" pos:end="557:47">(<argument pos:start="557:22" pos:end="557:46"><expr pos:start="557:22" pos:end="557:46"><operator pos:start="557:22" pos:end="557:22">&amp;</operator><name pos:start="557:23" pos:end="557:46"><name pos:start="557:23" pos:end="557:25">ost</name><operator pos:start="557:26" pos:end="557:27">-&gt;</operator><name pos:start="557:28" pos:end="557:29">st</name><operator pos:start="557:30" pos:end="557:31">-&gt;</operator><name pos:start="557:32" pos:end="557:36">codec</name><operator pos:start="557:37" pos:end="557:38">-&gt;</operator><name pos:start="557:39" pos:end="557:46">stats_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="559:13" pos:end="559:42"><expr pos:start="559:13" pos:end="559:41"><call pos:start="559:13" pos:end="559:41"><name pos:start="559:13" pos:end="559:25">avcodec_close</name><argument_list pos:start="559:26" pos:end="559:41">(<argument pos:start="559:27" pos:end="559:40"><expr pos:start="559:27" pos:end="559:40"><name pos:start="559:27" pos:end="559:40"><name pos:start="559:27" pos:end="559:29">ost</name><operator pos:start="559:30" pos:end="559:31">-&gt;</operator><name pos:start="559:32" pos:end="559:33">st</name><operator pos:start="559:34" pos:end="559:35">-&gt;</operator><name pos:start="559:36" pos:end="559:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="563:1" pos:end="563:19">#<cpp:directive pos:start="563:2" pos:end="563:3">if</cpp:directive> <expr pos:start="563:5" pos:end="563:19"><name pos:start="563:5" pos:end="563:19">CONFIG_AVFILTER</name></expr></cpp:if>

        <expr_stmt pos:start="565:9" pos:end="568:0"><expr pos:start="565:9" pos:end="565:40"><call pos:start="565:9" pos:end="565:40"><name pos:start="565:9" pos:end="565:27">avfilter_graph_free</name><argument_list pos:start="565:28" pos:end="565:40">(<argument pos:start="565:29" pos:end="565:39"><expr pos:start="565:29" pos:end="565:39"><operator pos:start="565:29" pos:end="565:29">&amp;</operator><name pos:start="565:30" pos:end="565:39"><name pos:start="565:30" pos:end="565:32">ost</name><operator pos:start="565:33" pos:end="565:34">-&gt;</operator><name pos:start="565:35" pos:end="565:39">graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="567:1" pos:end="567:6">#<cpp:directive pos:start="567:2" pos:end="567:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>



    <comment type="block" pos:start="573:5" pos:end="573:28">/* close each decoder */</comment>

    <for pos:start="575:5" pos:end="585:5">for <control pos:start="575:9" pos:end="575:42">(<init pos:start="575:10" pos:end="575:15"><expr pos:start="575:10" pos:end="575:14"><name pos:start="575:10" pos:end="575:10">i</name> <operator pos:start="575:12" pos:end="575:12">=</operator> <literal type="number" pos:start="575:14" pos:end="575:14">0</literal></expr>;</init> <condition pos:start="575:17" pos:end="575:37"><expr pos:start="575:17" pos:end="575:36"><name pos:start="575:17" pos:end="575:17">i</name> <operator pos:start="575:19" pos:end="575:19">&lt;</operator> <name pos:start="575:21" pos:end="575:36">nb_input_streams</name></expr>;</condition> <incr pos:start="575:39" pos:end="575:41"><expr pos:start="575:39" pos:end="575:41"><name pos:start="575:39" pos:end="575:39">i</name><operator pos:start="575:40" pos:end="575:41">++</operator></expr></incr>)</control> <block pos:start="575:44" pos:end="585:5">{<block_content pos:start="577:9" pos:end="583:9">

        <expr_stmt pos:start="577:9" pos:end="577:32"><expr pos:start="577:9" pos:end="577:31"><name pos:start="577:9" pos:end="577:11">ist</name> <operator pos:start="577:13" pos:end="577:13">=</operator> <operator pos:start="577:15" pos:end="577:15">&amp;</operator><name pos:start="577:16" pos:end="577:31"><name pos:start="577:16" pos:end="577:28">input_streams</name><index pos:start="577:29" pos:end="577:31">[<expr pos:start="577:30" pos:end="577:30"><name pos:start="577:30" pos:end="577:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="579:9" pos:end="583:9"><if pos:start="579:9" pos:end="583:9">if <condition pos:start="579:12" pos:end="579:33">(<expr pos:start="579:13" pos:end="579:32"><name pos:start="579:13" pos:end="579:32"><name pos:start="579:13" pos:end="579:15">ist</name><operator pos:start="579:16" pos:end="579:17">-&gt;</operator><name pos:start="579:18" pos:end="579:32">decoding_needed</name></name></expr>)</condition> <block pos:start="579:35" pos:end="583:9">{<block_content pos:start="581:13" pos:end="581:42">

            <expr_stmt pos:start="581:13" pos:end="581:42"><expr pos:start="581:13" pos:end="581:41"><call pos:start="581:13" pos:end="581:41"><name pos:start="581:13" pos:end="581:25">avcodec_close</name><argument_list pos:start="581:26" pos:end="581:41">(<argument pos:start="581:27" pos:end="581:40"><expr pos:start="581:27" pos:end="581:40"><name pos:start="581:27" pos:end="581:40"><name pos:start="581:27" pos:end="581:29">ist</name><operator pos:start="581:30" pos:end="581:31">-&gt;</operator><name pos:start="581:32" pos:end="581:33">st</name><operator pos:start="581:34" pos:end="581:35">-&gt;</operator><name pos:start="581:36" pos:end="581:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="589:5" pos:end="589:20">/* finished ! */</comment>

    <expr_stmt pos:start="591:5" pos:end="591:12"><expr pos:start="591:5" pos:end="591:11"><name pos:start="591:5" pos:end="591:7">ret</name> <operator pos:start="591:9" pos:end="591:9">=</operator> <literal type="number" pos:start="591:11" pos:end="591:11">0</literal></expr>;</expr_stmt>



 <label pos:start="595:2" pos:end="595:6"><name pos:start="595:2" pos:end="595:5">fail</name>:</label>

    <expr_stmt pos:start="597:5" pos:end="597:25"><expr pos:start="597:5" pos:end="597:24"><call pos:start="597:5" pos:end="597:24"><name pos:start="597:5" pos:end="597:12">av_freep</name><argument_list pos:start="597:13" pos:end="597:24">(<argument pos:start="597:14" pos:end="597:23"><expr pos:start="597:14" pos:end="597:23"><operator pos:start="597:14" pos:end="597:14">&amp;</operator><name pos:start="597:15" pos:end="597:23">no_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="601:5" pos:end="643:5"><if pos:start="601:5" pos:end="643:5">if <condition pos:start="601:8" pos:end="601:23">(<expr pos:start="601:9" pos:end="601:22"><name pos:start="601:9" pos:end="601:22">output_streams</name></expr>)</condition> <block pos:start="601:25" pos:end="643:5">{<block_content pos:start="603:9" pos:end="641:9">

        <for pos:start="603:9" pos:end="641:9">for <control pos:start="603:13" pos:end="603:47">(<init pos:start="603:14" pos:end="603:19"><expr pos:start="603:14" pos:end="603:18"><name pos:start="603:14" pos:end="603:14">i</name> <operator pos:start="603:16" pos:end="603:16">=</operator> <literal type="number" pos:start="603:18" pos:end="603:18">0</literal></expr>;</init> <condition pos:start="603:21" pos:end="603:42"><expr pos:start="603:21" pos:end="603:41"><name pos:start="603:21" pos:end="603:21">i</name> <operator pos:start="603:23" pos:end="603:23">&lt;</operator> <name pos:start="603:25" pos:end="603:41">nb_output_streams</name></expr>;</condition> <incr pos:start="603:44" pos:end="603:46"><expr pos:start="603:44" pos:end="603:46"><name pos:start="603:44" pos:end="603:44">i</name><operator pos:start="603:45" pos:end="603:46">++</operator></expr></incr>)</control> <block pos:start="603:49" pos:end="641:9">{<block_content pos:start="605:13" pos:end="639:13">

            <expr_stmt pos:start="605:13" pos:end="605:37"><expr pos:start="605:13" pos:end="605:36"><name pos:start="605:13" pos:end="605:15">ost</name> <operator pos:start="605:17" pos:end="605:17">=</operator> <operator pos:start="605:19" pos:end="605:19">&amp;</operator><name pos:start="605:20" pos:end="605:36"><name pos:start="605:20" pos:end="605:33">output_streams</name><index pos:start="605:34" pos:end="605:36">[<expr pos:start="605:35" pos:end="605:35"><name pos:start="605:35" pos:end="605:35">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="607:13" pos:end="639:13"><if pos:start="607:13" pos:end="639:13">if <condition pos:start="607:16" pos:end="607:20">(<expr pos:start="607:17" pos:end="607:19"><name pos:start="607:17" pos:end="607:19">ost</name></expr>)</condition> <block pos:start="607:22" pos:end="639:13">{<block_content pos:start="609:17" pos:end="637:41">

                <if_stmt pos:start="609:17" pos:end="611:57"><if pos:start="609:17" pos:end="611:57">if <condition pos:start="609:20" pos:end="609:37">(<expr pos:start="609:21" pos:end="609:36"><name pos:start="609:21" pos:end="609:36"><name pos:start="609:21" pos:end="609:23">ost</name><operator pos:start="609:24" pos:end="609:25">-&gt;</operator><name pos:start="609:26" pos:end="609:36">stream_copy</name></name></expr>)</condition><block type="pseudo" pos:start="611:21" pos:end="611:57"><block_content pos:start="611:21" pos:end="611:57">

                    <expr_stmt pos:start="611:21" pos:end="611:57"><expr pos:start="611:21" pos:end="611:56"><call pos:start="611:21" pos:end="611:56"><name pos:start="611:21" pos:end="611:28">av_freep</name><argument_list pos:start="611:29" pos:end="611:56">(<argument pos:start="611:30" pos:end="611:55"><expr pos:start="611:30" pos:end="611:55"><operator pos:start="611:30" pos:end="611:30">&amp;</operator><name pos:start="611:31" pos:end="611:55"><name pos:start="611:31" pos:end="611:33">ost</name><operator pos:start="611:34" pos:end="611:35">-&gt;</operator><name pos:start="611:36" pos:end="611:37">st</name><operator pos:start="611:38" pos:end="611:39">-&gt;</operator><name pos:start="611:40" pos:end="611:44">codec</name><operator pos:start="611:45" pos:end="611:46">-&gt;</operator><name pos:start="611:47" pos:end="611:55">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="613:17" pos:end="619:17"><if pos:start="613:17" pos:end="619:17">if <condition pos:start="613:20" pos:end="613:33">(<expr pos:start="613:21" pos:end="613:32"><name pos:start="613:21" pos:end="613:32"><name pos:start="613:21" pos:end="613:23">ost</name><operator pos:start="613:24" pos:end="613:25">-&gt;</operator><name pos:start="613:26" pos:end="613:32">logfile</name></name></expr>)</condition> <block pos:start="613:35" pos:end="619:17">{<block_content pos:start="615:21" pos:end="617:40">

                    <expr_stmt pos:start="615:21" pos:end="615:41"><expr pos:start="615:21" pos:end="615:40"><call pos:start="615:21" pos:end="615:40"><name pos:start="615:21" pos:end="615:26">fclose</name><argument_list pos:start="615:27" pos:end="615:40">(<argument pos:start="615:28" pos:end="615:39"><expr pos:start="615:28" pos:end="615:39"><name pos:start="615:28" pos:end="615:39"><name pos:start="615:28" pos:end="615:30">ost</name><operator pos:start="615:31" pos:end="615:32">-&gt;</operator><name pos:start="615:33" pos:end="615:39">logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="617:21" pos:end="617:40"><expr pos:start="617:21" pos:end="617:39"><name pos:start="617:21" pos:end="617:32"><name pos:start="617:21" pos:end="617:23">ost</name><operator pos:start="617:24" pos:end="617:25">-&gt;</operator><name pos:start="617:26" pos:end="617:32">logfile</name></name> <operator pos:start="617:34" pos:end="617:34">=</operator> <name pos:start="617:36" pos:end="617:39">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="621:17" pos:end="621:40"><expr pos:start="621:17" pos:end="621:39"><call pos:start="621:17" pos:end="621:39"><name pos:start="621:17" pos:end="621:28">av_fifo_free</name><argument_list pos:start="621:29" pos:end="621:39">(<argument pos:start="621:30" pos:end="621:38"><expr pos:start="621:30" pos:end="621:38"><name pos:start="621:30" pos:end="621:38"><name pos:start="621:30" pos:end="621:32">ost</name><operator pos:start="621:33" pos:end="621:34">-&gt;</operator><name pos:start="621:35" pos:end="621:38">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="621:42" pos:end="623:75">/* works even if fifo is not

                                             initialized but set to zero */</comment>

                <expr_stmt pos:start="625:17" pos:end="625:59"><expr pos:start="625:17" pos:end="625:58"><call pos:start="625:17" pos:end="625:58"><name pos:start="625:17" pos:end="625:24">av_freep</name><argument_list pos:start="625:25" pos:end="625:58">(<argument pos:start="625:26" pos:end="625:57"><expr pos:start="625:26" pos:end="625:57"><operator pos:start="625:26" pos:end="625:26">&amp;</operator><name pos:start="625:27" pos:end="625:57"><name pos:start="625:27" pos:end="625:29">ost</name><operator pos:start="625:30" pos:end="625:31">-&gt;</operator><name pos:start="625:32" pos:end="625:33">st</name><operator pos:start="625:34" pos:end="625:35">-&gt;</operator><name pos:start="625:36" pos:end="625:40">codec</name><operator pos:start="625:41" pos:end="625:42">-&gt;</operator><name pos:start="625:43" pos:end="625:57">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="627:17" pos:end="627:53"><expr pos:start="627:17" pos:end="627:52"><call pos:start="627:17" pos:end="627:52"><name pos:start="627:17" pos:end="627:23">av_free</name><argument_list pos:start="627:24" pos:end="627:52">(<argument pos:start="627:25" pos:end="627:51"><expr pos:start="627:25" pos:end="627:51"><name pos:start="627:25" pos:end="627:51"><name pos:start="627:25" pos:end="627:27">ost</name><operator pos:start="627:28" pos:end="627:29">-&gt;</operator><name pos:start="627:30" pos:end="627:43">resample_frame</name><operator pos:start="627:44" pos:end="627:44">.</operator><name pos:start="627:45" pos:end="627:48">data</name><index pos:start="627:49" pos:end="627:51">[<expr pos:start="627:50" pos:end="627:50"><literal type="number" pos:start="627:50" pos:end="627:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="629:17" pos:end="629:44"><expr pos:start="629:17" pos:end="629:43"><call pos:start="629:17" pos:end="629:43"><name pos:start="629:17" pos:end="629:23">av_free</name><argument_list pos:start="629:24" pos:end="629:43">(<argument pos:start="629:25" pos:end="629:42"><expr pos:start="629:25" pos:end="629:42"><name pos:start="629:25" pos:end="629:42"><name pos:start="629:25" pos:end="629:27">ost</name><operator pos:start="629:28" pos:end="629:29">-&gt;</operator><name pos:start="629:30" pos:end="629:42">forced_kf_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="631:17" pos:end="633:59"><if pos:start="631:17" pos:end="633:59">if <condition pos:start="631:20" pos:end="631:40">(<expr pos:start="631:21" pos:end="631:39"><name pos:start="631:21" pos:end="631:39"><name pos:start="631:21" pos:end="631:23">ost</name><operator pos:start="631:24" pos:end="631:25">-&gt;</operator><name pos:start="631:26" pos:end="631:39">video_resample</name></name></expr>)</condition><block type="pseudo" pos:start="633:21" pos:end="633:59"><block_content pos:start="633:21" pos:end="633:59">

                    <expr_stmt pos:start="633:21" pos:end="633:59"><expr pos:start="633:21" pos:end="633:58"><call pos:start="633:21" pos:end="633:58"><name pos:start="633:21" pos:end="633:35">sws_freeContext</name><argument_list pos:start="633:36" pos:end="633:58">(<argument pos:start="633:37" pos:end="633:57"><expr pos:start="633:37" pos:end="633:57"><name pos:start="633:37" pos:end="633:57"><name pos:start="633:37" pos:end="633:39">ost</name><operator pos:start="633:40" pos:end="633:41">-&gt;</operator><name pos:start="633:42" pos:end="633:57">img_resample_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="635:17" pos:end="635:36"><expr pos:start="635:17" pos:end="635:35"><call pos:start="635:17" pos:end="635:35"><name pos:start="635:17" pos:end="635:24">swr_free</name><argument_list pos:start="635:25" pos:end="635:35">(<argument pos:start="635:26" pos:end="635:34"><expr pos:start="635:26" pos:end="635:34"><operator pos:start="635:26" pos:end="635:26">&amp;</operator><name pos:start="635:27" pos:end="635:34"><name pos:start="635:27" pos:end="635:29">ost</name><operator pos:start="635:30" pos:end="635:31">-&gt;</operator><name pos:start="635:32" pos:end="635:34">swr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="637:17" pos:end="637:41"><expr pos:start="637:17" pos:end="637:40"><call pos:start="637:17" pos:end="637:40"><name pos:start="637:17" pos:end="637:28">av_dict_free</name><argument_list pos:start="637:29" pos:end="637:40">(<argument pos:start="637:30" pos:end="637:39"><expr pos:start="637:30" pos:end="637:39"><operator pos:start="637:30" pos:end="637:30">&amp;</operator><name pos:start="637:31" pos:end="637:39"><name pos:start="637:31" pos:end="637:33">ost</name><operator pos:start="637:34" pos:end="637:35">-&gt;</operator><name pos:start="637:36" pos:end="637:39">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <return pos:start="645:5" pos:end="645:15">return <expr pos:start="645:12" pos:end="645:14"><name pos:start="645:12" pos:end="645:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
