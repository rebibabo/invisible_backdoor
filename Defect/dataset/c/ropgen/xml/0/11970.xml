<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11970.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">scan_mmco_reset</name><parameter_list pos:start="1:27" pos:end="1:70">(<parameter pos:start="1:28" pos:end="1:50"><decl pos:start="1:28" pos:end="1:50"><type pos:start="1:28" pos:end="1:50"><name pos:start="1:28" pos:end="1:47">AVCodecParserContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:69"><decl pos:start="1:53" pos:end="1:69"><type pos:start="1:53" pos:end="1:69"><name pos:start="1:53" pos:end="1:65">GetBitContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:23">H264PredWeightTable</name></type> <name pos:start="5:25" pos:end="5:27">pwt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:22">slice_type_nos</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">pict_type</name></name> <operator pos:start="7:39" pos:end="7:39">&amp;</operator> <literal type="number" pos:start="7:41" pos:end="7:41">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">H264ParseContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">p</name> <init pos:start="9:25" pos:end="9:38">= <expr pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:27">s</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:15">H264Context</name>      <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">h</name> <init pos:start="11:25" pos:end="11:31">= <expr pos:start="11:27" pos:end="11:31"><operator pos:start="11:27" pos:end="11:27">&amp;</operator><name pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:28">p</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:31">h</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">list_count</name></decl>, <decl pos:start="13:21" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:32"><name pos:start="13:21" pos:end="13:29">ref_count</name><index pos:start="13:30" pos:end="13:32">[<expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">2</literal></expr>]</index></name></decl>;</decl_stmt>





    <if_stmt pos:start="19:5" pos:end="21:26"><if pos:start="19:5" pos:end="21:26">if <condition pos:start="19:8" pos:end="19:41">(<expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:9">h</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">pps</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:40">redundant_pic_cnt_present</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:26"><block_content pos:start="21:9" pos:end="21:26">

        <expr_stmt pos:start="21:9" pos:end="21:26"><expr pos:start="21:9" pos:end="21:25"><call pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:21">get_ue_golomb</name><argument_list pos:start="21:22" pos:end="21:25">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="21:28" pos:end="21:49">// redundant_pic_count</comment>



    <if_stmt pos:start="25:5" pos:end="27:22"><if pos:start="25:5" pos:end="27:22">if <condition pos:start="25:8" pos:end="25:44">(<expr pos:start="25:9" pos:end="25:43"><name pos:start="25:9" pos:end="25:22">slice_type_nos</name> <operator pos:start="25:24" pos:end="25:25">==</operator> <name pos:start="25:27" pos:end="25:43">AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:22"><block_content pos:start="27:9" pos:end="27:22">

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:17">get_bits1</name><argument_list pos:start="27:18" pos:end="27:21">(<argument pos:start="27:19" pos:end="27:20"><expr pos:start="27:19" pos:end="27:20"><name pos:start="27:19" pos:end="27:20">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="27:24" pos:end="27:48">// direct_spatial_mv_pred</comment>



    <if_stmt pos:start="31:5" pos:end="35:35"><if pos:start="31:5" pos:end="35:35">if <condition pos:start="31:8" pos:end="33:74">(<expr pos:start="31:9" pos:end="33:73"><call pos:start="31:9" pos:end="33:69"><name pos:start="31:9" pos:end="31:31">ff_h264_parse_ref_count</name><argument_list pos:start="31:32" pos:end="33:69">(<argument pos:start="31:33" pos:end="31:43"><expr pos:start="31:33" pos:end="31:43"><operator pos:start="31:33" pos:end="31:33">&amp;</operator><name pos:start="31:34" pos:end="31:43">list_count</name></expr></argument>, <argument pos:start="31:46" pos:end="31:54"><expr pos:start="31:46" pos:end="31:54"><name pos:start="31:46" pos:end="31:54">ref_count</name></expr></argument>, <argument pos:start="31:57" pos:end="31:58"><expr pos:start="31:57" pos:end="31:58"><name pos:start="31:57" pos:end="31:58">gb</name></expr></argument>, <argument pos:start="31:61" pos:end="31:67"><expr pos:start="31:61" pos:end="31:67"><operator pos:start="31:61" pos:end="31:61">&amp;</operator><name pos:start="31:62" pos:end="31:67"><name pos:start="31:62" pos:end="31:62">h</name><operator pos:start="31:63" pos:end="31:64">-&gt;</operator><name pos:start="31:65" pos:end="31:67">pps</name></name></expr></argument>,

                                <argument pos:start="33:33" pos:end="33:46"><expr pos:start="33:33" pos:end="33:46"><name pos:start="33:33" pos:end="33:46">slice_type_nos</name></expr></argument>, <argument pos:start="33:49" pos:end="33:68"><expr pos:start="33:49" pos:end="33:68"><name pos:start="33:49" pos:end="33:68"><name pos:start="33:49" pos:end="33:49">h</name><operator pos:start="33:50" pos:end="33:51">-&gt;</operator><name pos:start="33:52" pos:end="33:68">picture_structure</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:71" pos:end="33:71">&lt;</operator> <literal type="number" pos:start="33:73" pos:end="33:73">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:35"><block_content pos:start="35:9" pos:end="35:35">

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="91:5"><if pos:start="39:5" pos:end="91:5">if <condition pos:start="39:8" pos:end="39:44">(<expr pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:22">slice_type_nos</name> <operator pos:start="39:24" pos:end="39:25">!=</operator> <name pos:start="39:27" pos:end="39:43">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="39:46" pos:end="91:5">{<block_content pos:start="41:9" pos:end="89:9">

        <decl_stmt pos:start="41:9" pos:end="41:17"><decl pos:start="41:9" pos:end="41:16"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:16">list</name></decl>;</decl_stmt>

        <for pos:start="43:9" pos:end="89:9">for <control pos:start="43:13" pos:end="43:49">(<init pos:start="43:14" pos:end="43:22"><expr pos:start="43:14" pos:end="43:21"><name pos:start="43:14" pos:end="43:17">list</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>;</init> <condition pos:start="43:24" pos:end="43:41"><expr pos:start="43:24" pos:end="43:40"><name pos:start="43:24" pos:end="43:27">list</name> <operator pos:start="43:29" pos:end="43:29">&lt;</operator> <name pos:start="43:31" pos:end="43:40">list_count</name></expr>;</condition> <incr pos:start="43:43" pos:end="43:48"><expr pos:start="43:43" pos:end="43:48"><name pos:start="43:43" pos:end="43:46">list</name><operator pos:start="43:47" pos:end="43:48">++</operator></expr></incr>)</control> <block pos:start="43:51" pos:end="89:9">{<block_content pos:start="45:13" pos:end="87:13">

            <if_stmt pos:start="45:13" pos:end="87:13"><if pos:start="45:13" pos:end="87:13">if <condition pos:start="45:16" pos:end="45:30">(<expr pos:start="45:17" pos:end="45:29"><call pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:25">get_bits1</name><argument_list pos:start="45:26" pos:end="45:29">(<argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:32" pos:end="87:13">{<block_content pos:start="47:17" pos:end="85:17">

                <decl_stmt pos:start="47:17" pos:end="47:26"><decl pos:start="47:17" pos:end="47:25"><type pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">int</name></type> <name pos:start="47:21" pos:end="47:25">index</name></decl>;</decl_stmt>

                <for pos:start="49:17" pos:end="85:17">for <control pos:start="49:21" pos:end="49:42">(<init pos:start="49:22" pos:end="49:31"><expr pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:26">index</name> <operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>;</init> <condition pos:start="49:33" pos:end="49:33">;</condition> <incr pos:start="49:35" pos:end="49:41"><expr pos:start="49:35" pos:end="49:41"><name pos:start="49:35" pos:end="49:39">index</name><operator pos:start="49:40" pos:end="49:41">++</operator></expr></incr>)</control> <block pos:start="49:44" pos:end="85:17">{<block_content pos:start="51:21" pos:end="83:21">

                    <decl_stmt pos:start="51:21" pos:end="51:83"><decl pos:start="51:21" pos:end="51:82"><type pos:start="51:21" pos:end="51:32"><name pos:start="51:21" pos:end="51:28">unsigned</name> <name pos:start="51:30" pos:end="51:32">int</name></type> <name pos:start="51:34" pos:end="51:59">reordering_of_pic_nums_idc</name> <init pos:start="51:61" pos:end="51:82">= <expr pos:start="51:63" pos:end="51:82"><call pos:start="51:63" pos:end="51:82"><name pos:start="51:63" pos:end="51:78">get_ue_golomb_31</name><argument_list pos:start="51:79" pos:end="51:82">(<argument pos:start="51:80" pos:end="51:81"><expr pos:start="51:80" pos:end="51:81"><name pos:start="51:80" pos:end="51:81">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="55:21" pos:end="71:30"><if pos:start="55:21" pos:end="57:42">if <condition pos:start="55:24" pos:end="55:55">(<expr pos:start="55:25" pos:end="55:54"><name pos:start="55:25" pos:end="55:50">reordering_of_pic_nums_idc</name> <operator pos:start="55:52" pos:end="55:52">&lt;</operator> <literal type="number" pos:start="55:54" pos:end="55:54">3</literal></expr>)</condition><block type="pseudo" pos:start="57:25" pos:end="57:42"><block_content pos:start="57:25" pos:end="57:42">

                        <expr_stmt pos:start="57:25" pos:end="57:42"><expr pos:start="57:25" pos:end="57:41"><call pos:start="57:25" pos:end="57:41"><name pos:start="57:25" pos:end="57:37">get_ue_golomb</name><argument_list pos:start="57:38" pos:end="57:41">(<argument pos:start="57:39" pos:end="57:40"><expr pos:start="57:39" pos:end="57:40"><name pos:start="57:39" pos:end="57:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="59:21" pos:end="69:21">else if <condition pos:start="59:29" pos:end="59:60">(<expr pos:start="59:30" pos:end="59:59"><name pos:start="59:30" pos:end="59:55">reordering_of_pic_nums_idc</name> <operator pos:start="59:57" pos:end="59:57">&gt;</operator> <literal type="number" pos:start="59:59" pos:end="59:59">3</literal></expr>)</condition> <block pos:start="59:62" pos:end="69:21">{<block_content pos:start="61:25" pos:end="67:51">

                        <expr_stmt pos:start="61:25" pos:end="65:59"><expr pos:start="61:25" pos:end="65:58"><call pos:start="61:25" pos:end="65:58"><name pos:start="61:25" pos:end="61:30">av_log</name><argument_list pos:start="61:31" pos:end="65:58">(<argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:32">h</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">avctx</name></name></expr></argument>, <argument pos:start="61:42" pos:end="61:53"><expr pos:start="61:42" pos:end="61:53"><name pos:start="61:42" pos:end="61:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="63:32" pos:end="63:72"><expr pos:start="63:32" pos:end="63:72"><literal type="string" pos:start="63:32" pos:end="63:72">"illegal reordering_of_pic_nums_idc %d\n"</literal></expr></argument>,

                               <argument pos:start="65:32" pos:end="65:57"><expr pos:start="65:32" pos:end="65:57"><name pos:start="65:32" pos:end="65:57">reordering_of_pic_nums_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="67:25" pos:end="67:51">return <expr pos:start="67:32" pos:end="67:50"><name pos:start="67:32" pos:end="67:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if> <else pos:start="69:23" pos:end="71:30">else<block type="pseudo" pos:start="71:25" pos:end="71:30"><block_content pos:start="71:25" pos:end="71:30">

                        <break pos:start="71:25" pos:end="71:30">break;</break></block_content></block></else></if_stmt>



                    <if_stmt pos:start="75:21" pos:end="83:21"><if pos:start="75:21" pos:end="83:21">if <condition pos:start="75:24" pos:end="75:49">(<expr pos:start="75:25" pos:end="75:48"><name pos:start="75:25" pos:end="75:29">index</name> <operator pos:start="75:31" pos:end="75:32">&gt;=</operator> <name pos:start="75:34" pos:end="75:48"><name pos:start="75:34" pos:end="75:42">ref_count</name><index pos:start="75:43" pos:end="75:48">[<expr pos:start="75:44" pos:end="75:47"><name pos:start="75:44" pos:end="75:47">list</name></expr>]</index></name></expr>)</condition> <block pos:start="75:51" pos:end="83:21">{<block_content pos:start="77:25" pos:end="81:51">

                        <expr_stmt pos:start="77:25" pos:end="79:71"><expr pos:start="77:25" pos:end="79:70"><call pos:start="77:25" pos:end="79:70"><name pos:start="77:25" pos:end="77:30">av_log</name><argument_list pos:start="77:31" pos:end="79:70">(<argument pos:start="77:32" pos:end="77:39"><expr pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:32">h</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:39">avctx</name></name></expr></argument>, <argument pos:start="77:42" pos:end="77:53"><expr pos:start="77:42" pos:end="77:53"><name pos:start="77:42" pos:end="77:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="79:32" pos:end="79:62"><expr pos:start="79:32" pos:end="79:62"><literal type="string" pos:start="79:32" pos:end="79:62">"reference count %d overflow\n"</literal></expr></argument>, <argument pos:start="79:65" pos:end="79:69"><expr pos:start="79:65" pos:end="79:69"><name pos:start="79:65" pos:end="79:69">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="81:25" pos:end="81:51">return <expr pos:start="81:32" pos:end="81:50"><name pos:start="81:32" pos:end="81:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="101:40"><if pos:start="95:5" pos:end="101:40">if <condition pos:start="95:8" pos:end="97:81">(<expr pos:start="95:9" pos:end="97:80"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:29"><name pos:start="95:10" pos:end="95:10">h</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:15">pps</name><operator pos:start="95:16" pos:end="95:16">.</operator><name pos:start="95:17" pos:end="95:29">weighted_pred</name></name> <operator pos:start="95:31" pos:end="95:32">&amp;&amp;</operator> <name pos:start="95:34" pos:end="95:47">slice_type_nos</name> <operator pos:start="95:49" pos:end="95:50">==</operator> <name pos:start="95:52" pos:end="95:68">AV_PICTURE_TYPE_P</name><operator pos:start="95:69" pos:end="95:69">)</operator> <operator pos:start="95:71" pos:end="95:72">||</operator>

        <operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:35"><name pos:start="97:10" pos:end="97:10">h</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:15">pps</name><operator pos:start="97:16" pos:end="97:16">.</operator><name pos:start="97:17" pos:end="97:35">weighted_bipred_idc</name></name> <operator pos:start="97:37" pos:end="97:38">==</operator> <literal type="number" pos:start="97:40" pos:end="97:40">1</literal> <operator pos:start="97:42" pos:end="97:43">&amp;&amp;</operator> <name pos:start="97:45" pos:end="97:58">slice_type_nos</name> <operator pos:start="97:60" pos:end="97:61">==</operator> <name pos:start="97:63" pos:end="97:79">AV_PICTURE_TYPE_B</name><operator pos:start="97:80" pos:end="97:80">)</operator></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="101:40"><block_content pos:start="99:9" pos:end="101:40">

        <expr_stmt pos:start="99:9" pos:end="101:40"><expr pos:start="99:9" pos:end="101:39"><call pos:start="99:9" pos:end="101:39"><name pos:start="99:9" pos:end="99:33">ff_h264_pred_weight_table</name><argument_list pos:start="99:34" pos:end="101:39">(<argument pos:start="99:35" pos:end="99:36"><expr pos:start="99:35" pos:end="99:36"><name pos:start="99:35" pos:end="99:36">gb</name></expr></argument>, <argument pos:start="99:39" pos:end="99:45"><expr pos:start="99:39" pos:end="99:45"><operator pos:start="99:39" pos:end="99:39">&amp;</operator><name pos:start="99:40" pos:end="99:45"><name pos:start="99:40" pos:end="99:40">h</name><operator pos:start="99:41" pos:end="99:42">-&gt;</operator><name pos:start="99:43" pos:end="99:45">sps</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:56"><expr pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:56">ref_count</name></expr></argument>, <argument pos:start="99:59" pos:end="99:72"><expr pos:start="99:59" pos:end="99:72"><name pos:start="99:59" pos:end="99:72">slice_type_nos</name></expr></argument>,

                                  <argument pos:start="101:35" pos:end="101:38"><expr pos:start="101:35" pos:end="101:38"><operator pos:start="101:35" pos:end="101:35">&amp;</operator><name pos:start="101:36" pos:end="101:38">pwt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="147:5"><if pos:start="105:5" pos:end="147:5">if <condition pos:start="105:8" pos:end="105:22">(<expr pos:start="105:9" pos:end="105:21"><call pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:17">get_bits1</name><argument_list pos:start="105:18" pos:end="105:21">(<argument pos:start="105:19" pos:end="105:20"><expr pos:start="105:19" pos:end="105:20"><name pos:start="105:19" pos:end="105:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:24" pos:end="147:5">{<block_content pos:start="107:9" pos:end="145:9"> <comment type="line" pos:start="105:26" pos:end="105:62">// adaptive_ref_pic_marking_mode_flag</comment>

        <decl_stmt pos:start="107:9" pos:end="107:14"><decl pos:start="107:9" pos:end="107:13"><type pos:start="107:9" pos:end="107:11"><name pos:start="107:9" pos:end="107:11">int</name></type> <name pos:start="107:13" pos:end="107:13">i</name></decl>;</decl_stmt>

        <for pos:start="109:9" pos:end="145:9">for <control pos:start="109:13" pos:end="109:44">(<init pos:start="109:14" pos:end="109:19"><expr pos:start="109:14" pos:end="109:18"><name pos:start="109:14" pos:end="109:14">i</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</init> <condition pos:start="109:21" pos:end="109:39"><expr pos:start="109:21" pos:end="109:38"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">&lt;</operator> <name pos:start="109:25" pos:end="109:38">MAX_MMCO_COUNT</name></expr>;</condition> <incr pos:start="109:41" pos:end="109:43"><expr pos:start="109:41" pos:end="109:43"><name pos:start="109:41" pos:end="109:41">i</name><operator pos:start="109:42" pos:end="109:43">++</operator></expr></incr>)</control> <block pos:start="109:46" pos:end="145:9">{<block_content pos:start="111:13" pos:end="143:37">

            <decl_stmt pos:start="111:13" pos:end="111:53"><decl pos:start="111:13" pos:end="111:52"><type pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:22">MMCOOpcode</name></type> <name pos:start="111:24" pos:end="111:29">opcode</name> <init pos:start="111:31" pos:end="111:52">= <expr pos:start="111:33" pos:end="111:52"><call pos:start="111:33" pos:end="111:52"><name pos:start="111:33" pos:end="111:48">get_ue_golomb_31</name><argument_list pos:start="111:49" pos:end="111:52">(<argument pos:start="111:50" pos:end="111:51"><expr pos:start="111:50" pos:end="111:51"><name pos:start="111:50" pos:end="111:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="113:13" pos:end="123:13"><if pos:start="113:13" pos:end="123:13">if <condition pos:start="113:16" pos:end="113:46">(<expr pos:start="113:17" pos:end="113:45"><name pos:start="113:17" pos:end="113:22">opcode</name> <operator pos:start="113:24" pos:end="113:24">&gt;</operator> <operator pos:start="113:26" pos:end="113:26">(</operator><name pos:start="113:27" pos:end="113:34">unsigned</name><operator pos:start="113:35" pos:end="113:35">)</operator> <name pos:start="113:37" pos:end="113:45">MMCO_LONG</name></expr>)</condition> <block pos:start="113:48" pos:end="123:13">{<block_content pos:start="115:17" pos:end="121:43">

                <expr_stmt pos:start="115:17" pos:end="119:31"><expr pos:start="115:17" pos:end="119:30"><call pos:start="115:17" pos:end="119:30"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="119:30">(<argument pos:start="115:24" pos:end="115:31"><expr pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:24">h</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:31">avctx</name></name></expr></argument>, <argument pos:start="115:34" pos:end="115:45"><expr pos:start="115:34" pos:end="115:45"><name pos:start="115:34" pos:end="115:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="117:24" pos:end="117:73"><expr pos:start="117:24" pos:end="117:73"><literal type="string" pos:start="117:24" pos:end="117:73">"illegal memory management control operation %d\n"</literal></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:29"><expr pos:start="119:24" pos:end="119:29"><name pos:start="119:24" pos:end="119:29">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="121:17" pos:end="121:43">return <expr pos:start="121:24" pos:end="121:42"><name pos:start="121:24" pos:end="121:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="125:13" pos:end="131:25"><if pos:start="125:13" pos:end="127:24">if <condition pos:start="125:16" pos:end="125:35">(<expr pos:start="125:17" pos:end="125:34"><name pos:start="125:17" pos:end="125:22">opcode</name> <operator pos:start="125:24" pos:end="125:25">==</operator> <name pos:start="125:27" pos:end="125:34">MMCO_END</name></expr>)</condition><block type="pseudo" pos:start="127:16" pos:end="127:24"><block_content pos:start="127:16" pos:end="127:24">

               <return pos:start="127:16" pos:end="127:24">return <expr pos:start="127:23" pos:end="127:23"><literal type="number" pos:start="127:23" pos:end="127:23">0</literal></expr>;</return></block_content></block></if>

            <if type="elseif" pos:start="129:13" pos:end="131:25">else if <condition pos:start="129:21" pos:end="129:42">(<expr pos:start="129:22" pos:end="129:41"><name pos:start="129:22" pos:end="129:27">opcode</name> <operator pos:start="129:29" pos:end="129:30">==</operator> <name pos:start="129:32" pos:end="129:41">MMCO_RESET</name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:25"><block_content pos:start="131:17" pos:end="131:25">

                <return pos:start="131:17" pos:end="131:25">return <expr pos:start="131:24" pos:end="131:24"><literal type="number" pos:start="131:24" pos:end="131:24">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="135:13" pos:end="137:34"><if pos:start="135:13" pos:end="137:34">if <condition pos:start="135:16" pos:end="135:73">(<expr pos:start="135:17" pos:end="135:72"><name pos:start="135:17" pos:end="135:22">opcode</name> <operator pos:start="135:24" pos:end="135:25">==</operator> <name pos:start="135:27" pos:end="135:43">MMCO_SHORT2UNUSED</name> <operator pos:start="135:45" pos:end="135:46">||</operator> <name pos:start="135:48" pos:end="135:53">opcode</name> <operator pos:start="135:55" pos:end="135:56">==</operator> <name pos:start="135:58" pos:end="135:72">MMCO_SHORT2LONG</name></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:34"><block_content pos:start="137:17" pos:end="137:34">

                <expr_stmt pos:start="137:17" pos:end="137:34"><expr pos:start="137:17" pos:end="137:33"><call pos:start="137:17" pos:end="137:33"><name pos:start="137:17" pos:end="137:29">get_ue_golomb</name><argument_list pos:start="137:30" pos:end="137:33">(<argument pos:start="137:31" pos:end="137:32"><expr pos:start="137:31" pos:end="137:32"><name pos:start="137:31" pos:end="137:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="139:13" pos:end="143:37"><if pos:start="139:13" pos:end="143:37">if <condition pos:start="139:16" pos:end="141:67">(<expr pos:start="139:17" pos:end="141:66"><name pos:start="139:17" pos:end="139:22">opcode</name> <operator pos:start="139:24" pos:end="139:25">==</operator> <name pos:start="139:27" pos:end="139:41">MMCO_SHORT2LONG</name> <operator pos:start="139:43" pos:end="139:44">||</operator> <name pos:start="139:46" pos:end="139:51">opcode</name> <operator pos:start="139:53" pos:end="139:54">==</operator> <name pos:start="139:56" pos:end="139:71">MMCO_LONG2UNUSED</name> <operator pos:start="139:73" pos:end="139:74">||</operator>

                <name pos:start="141:17" pos:end="141:22">opcode</name> <operator pos:start="141:24" pos:end="141:25">==</operator> <name pos:start="141:27" pos:end="141:35">MMCO_LONG</name> <operator pos:start="141:37" pos:end="141:38">||</operator> <name pos:start="141:40" pos:end="141:45">opcode</name> <operator pos:start="141:47" pos:end="141:48">==</operator> <name pos:start="141:50" pos:end="141:66">MMCO_SET_MAX_LONG</name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:37"><block_content pos:start="143:17" pos:end="143:37">

                <expr_stmt pos:start="143:17" pos:end="143:37"><expr pos:start="143:17" pos:end="143:36"><call pos:start="143:17" pos:end="143:36"><name pos:start="143:17" pos:end="143:32">get_ue_golomb_31</name><argument_list pos:start="143:33" pos:end="143:36">(<argument pos:start="143:34" pos:end="143:35"><expr pos:start="143:34" pos:end="143:35"><name pos:start="143:34" pos:end="143:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
