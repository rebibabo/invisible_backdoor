<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17451.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:38">aacPlus_encode_init</name><parameter_list pos:start="1:39" pos:end="1:61">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:53">AVCodecContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:23">aacPlusAudioContext</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:26">s</name> <init pos:start="5:28" pos:end="5:45">= <expr pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:34">avctx</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:29"><name pos:start="7:5" pos:end="7:27">aacplusEncConfiguration</name> <modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:40">aacplus_cfg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:28">/* number of channels */</comment>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:51">(<expr pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:13">avctx</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:23">channels</name></name> <operator pos:start="13:25" pos:end="13:25">&lt;</operator> <literal type="number" pos:start="13:27" pos:end="13:27">1</literal> <operator pos:start="13:29" pos:end="13:30">||</operator> <name pos:start="13:32" pos:end="13:46"><name pos:start="13:32" pos:end="13:36">avctx</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:46">channels</name></name> <operator pos:start="13:48" pos:end="13:48">&gt;</operator> <literal type="number" pos:start="13:50" pos:end="13:50">2</literal></expr>)</condition> <block pos:start="13:53" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:96"><expr pos:start="15:9" pos:end="15:95"><call pos:start="15:9" pos:end="15:95"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:95">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">avctx</name></expr></argument>, <argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:37" pos:end="15:77"><expr pos:start="15:37" pos:end="15:77"><literal type="string" pos:start="15:37" pos:end="15:77">"encoding %d channel(s) is not allowed\n"</literal></expr></argument>, <argument pos:start="15:80" pos:end="15:94"><expr pos:start="15:80" pos:end="15:94"><name pos:start="15:80" pos:end="15:94"><name pos:start="15:80" pos:end="15:84">avctx</name><operator pos:start="15:85" pos:end="15:86">-&gt;</operator><name pos:start="15:87" pos:end="15:94">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="25:80"><expr pos:start="23:5" pos:end="25:79"><name pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:21">aacplus_handle</name></name> <operator pos:start="23:23" pos:end="23:23">=</operator> <call pos:start="23:25" pos:end="25:79"><name pos:start="23:25" pos:end="23:38">aacplusEncOpen</name><argument_list pos:start="23:39" pos:end="25:79">(<argument pos:start="23:40" pos:end="23:57"><expr pos:start="23:40" pos:end="23:57"><name pos:start="23:40" pos:end="23:57"><name pos:start="23:40" pos:end="23:44">avctx</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:57">sample_rate</name></name></expr></argument>, <argument pos:start="23:60" pos:end="23:74"><expr pos:start="23:60" pos:end="23:74"><name pos:start="23:60" pos:end="23:74"><name pos:start="23:60" pos:end="23:64">avctx</name><operator pos:start="23:65" pos:end="23:66">-&gt;</operator><name pos:start="23:67" pos:end="23:74">channels</name></name></expr></argument>,

                                       <argument pos:start="25:40" pos:end="25:56"><expr pos:start="25:40" pos:end="25:56"><operator pos:start="25:40" pos:end="25:40">&amp;</operator><name pos:start="25:41" pos:end="25:56"><name pos:start="25:41" pos:end="25:41">s</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:56">samples_input</name></name></expr></argument>, <argument pos:start="25:59" pos:end="25:78"><expr pos:start="25:59" pos:end="25:78"><operator pos:start="25:59" pos:end="25:59">&amp;</operator><name pos:start="25:60" pos:end="25:78"><name pos:start="25:60" pos:end="25:60">s</name><operator pos:start="25:61" pos:end="25:62">-&gt;</operator><name pos:start="25:63" pos:end="25:78">max_output_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if<condition pos:start="27:7" pos:end="27:26">(<expr pos:start="27:8" pos:end="27:25"><operator pos:start="27:8" pos:end="27:8">!</operator><name pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:25">aacplus_handle</name></name></expr>)</condition> <block pos:start="27:28" pos:end="33:5">{<block_content pos:start="29:13" pos:end="31:22">

            <expr_stmt pos:start="29:13" pos:end="29:64"><expr pos:start="29:13" pos:end="29:63"><call pos:start="29:13" pos:end="29:63"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="29:63">(<argument pos:start="29:20" pos:end="29:24"><expr pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:24">avctx</name></expr></argument>, <argument pos:start="29:27" pos:end="29:38"><expr pos:start="29:27" pos:end="29:38"><name pos:start="29:27" pos:end="29:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:41" pos:end="29:62"><expr pos:start="29:41" pos:end="29:62"><literal type="string" pos:start="29:41" pos:end="29:62">"can't open encoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:31">/* check aacplus version */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:71"><expr pos:start="39:5" pos:end="39:70"><name pos:start="39:5" pos:end="39:15">aacplus_cfg</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:70"><name pos:start="39:19" pos:end="39:51">aacplusEncGetCurrentConfiguration</name><argument_list pos:start="39:52" pos:end="39:70">(<argument pos:start="39:53" pos:end="39:69"><expr pos:start="39:53" pos:end="39:69"><name pos:start="39:53" pos:end="39:69"><name pos:start="39:53" pos:end="39:53">s</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:69">aacplus_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:53">/* put the options in the configuration struct */</comment>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if<condition pos:start="45:7" pos:end="45:84">(<expr pos:start="45:8" pos:end="45:83"><name pos:start="45:8" pos:end="45:21"><name pos:start="45:8" pos:end="45:12">avctx</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:21">profile</name></name> <operator pos:start="45:23" pos:end="45:24">!=</operator> <name pos:start="45:26" pos:end="45:43">FF_PROFILE_AAC_LOW</name> <operator pos:start="45:45" pos:end="45:46">&amp;&amp;</operator> <name pos:start="45:48" pos:end="45:61"><name pos:start="45:48" pos:end="45:52">avctx</name><operator pos:start="45:53" pos:end="45:54">-&gt;</operator><name pos:start="45:55" pos:end="45:61">profile</name></name> <operator pos:start="45:63" pos:end="45:64">!=</operator> <name pos:start="45:66" pos:end="45:83">FF_PROFILE_UNKNOWN</name></expr>)</condition> <block pos:start="45:86" pos:end="53:5">{<block_content pos:start="47:13" pos:end="51:22">

            <expr_stmt pos:start="47:13" pos:end="47:104"><expr pos:start="47:13" pos:end="47:103"><call pos:start="47:13" pos:end="47:103"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:103">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="47:86"><expr pos:start="47:41" pos:end="47:86"><literal type="string" pos:start="47:41" pos:end="47:86">"invalid AAC profile: %d, only LC supported\n"</literal></expr></argument>, <argument pos:start="47:89" pos:end="47:102"><expr pos:start="47:89" pos:end="47:102"><name pos:start="47:89" pos:end="47:102"><name pos:start="47:89" pos:end="47:93">avctx</name><operator pos:start="47:94" pos:end="47:95">-&gt;</operator><name pos:start="47:96" pos:end="47:102">profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:47"><expr pos:start="49:13" pos:end="49:46"><call pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:27">aacplusEncClose</name><argument_list pos:start="49:28" pos:end="49:46">(<argument pos:start="49:29" pos:end="49:45"><expr pos:start="49:29" pos:end="49:45"><name pos:start="49:29" pos:end="49:45"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:45">aacplus_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:22">return <expr pos:start="51:20" pos:end="51:21"><operator pos:start="51:20" pos:end="51:20">-</operator><literal type="number" pos:start="51:21" pos:end="51:21">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:15">aacplus_cfg</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:24">bitRate</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:42"><name pos:start="57:28" pos:end="57:32">avctx</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:42">bit_rate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:15">aacplus_cfg</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:26">bandWidth</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:42"><name pos:start="59:30" pos:end="59:34">avctx</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:42">cutoff</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:75"><expr pos:start="61:5" pos:end="61:74"><name pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:15">aacplus_cfg</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:29">outputFormat</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <operator pos:start="61:33" pos:end="61:33">!</operator><operator pos:start="61:34" pos:end="61:34">(</operator><name pos:start="61:35" pos:end="61:46"><name pos:start="61:35" pos:end="61:39">avctx</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:46">flags</name></name> <operator pos:start="61:48" pos:end="61:48">&amp;</operator> <name pos:start="61:50" pos:end="61:73">CODEC_FLAG_GLOBAL_HEADER</name><operator pos:start="61:74" pos:end="61:74">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:114"><expr pos:start="63:5" pos:end="63:113"><name pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:15">aacplus_cfg</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:28">inputFormat</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <ternary pos:start="63:32" pos:end="63:113"><condition pos:start="63:32" pos:end="63:71"><expr pos:start="63:32" pos:end="63:69"><name pos:start="63:32" pos:end="63:48"><name pos:start="63:32" pos:end="63:36">avctx</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:48">sample_fmt</name></name> <operator pos:start="63:50" pos:end="63:51">==</operator> <name pos:start="63:53" pos:end="63:69">AV_SAMPLE_FMT_FLT</name></expr> ?</condition><then pos:start="63:73" pos:end="63:91"> <expr pos:start="63:73" pos:end="63:91"><name pos:start="63:73" pos:end="63:91">AACPLUS_INPUT_FLOAT</name></expr> </then><else pos:start="63:93" pos:end="63:113">: <expr pos:start="63:95" pos:end="63:113"><name pos:start="63:95" pos:end="63:113">AACPLUS_INPUT_16BIT</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:68">(<expr pos:start="65:9" pos:end="65:67"><operator pos:start="65:9" pos:end="65:9">!</operator><call pos:start="65:10" pos:end="65:67"><name pos:start="65:10" pos:end="65:35">aacplusEncSetConfiguration</name><argument_list pos:start="65:36" pos:end="65:67">(<argument pos:start="65:37" pos:end="65:53"><expr pos:start="65:37" pos:end="65:53"><name pos:start="65:37" pos:end="65:53"><name pos:start="65:37" pos:end="65:37">s</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:53">aacplus_handle</name></name></expr></argument>, <argument pos:start="65:56" pos:end="65:66"><expr pos:start="65:56" pos:end="65:66"><name pos:start="65:56" pos:end="65:66">aacplus_cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:70" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:18">

        <expr_stmt pos:start="67:9" pos:end="67:88"><expr pos:start="67:9" pos:end="67:87"><call pos:start="67:9" pos:end="67:87"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="67:87">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:37" pos:end="67:86"><expr pos:start="67:37" pos:end="67:86"><literal type="string" pos:start="67:37" pos:end="67:86">"libaacplus doesn't support this output format!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:59"><expr pos:start="75:5" pos:end="75:58"><name pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:9">avctx</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:21">frame_size</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:40"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:40">samples_input</name></name> <operator pos:start="75:42" pos:end="75:42">/</operator> <name pos:start="75:44" pos:end="75:58"><name pos:start="75:44" pos:end="75:48">avctx</name><operator pos:start="75:49" pos:end="75:50">-&gt;</operator><name pos:start="75:51" pos:end="75:58">channels</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:35">/* Set decoder specific info */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:30"><expr pos:start="81:5" pos:end="81:29"><name pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:9">avctx</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:25">extradata_size</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="107:5"><if pos:start="83:5" pos:end="107:5">if <condition pos:start="83:8" pos:end="83:48">(<expr pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:13">avctx</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:20">flags</name></name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:47">CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block pos:start="83:50" pos:end="107:5">{<block_content pos:start="87:9" pos:end="105:21">



        <decl_stmt pos:start="87:9" pos:end="87:37"><decl pos:start="87:9" pos:end="87:36"><type pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:16">unsigned</name> <name pos:start="87:18" pos:end="87:21">char</name> <modifier pos:start="87:23" pos:end="87:23">*</modifier></type><name pos:start="87:24" pos:end="87:29">buffer</name> <init pos:start="87:31" pos:end="87:36">= <expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:49"><decl pos:start="89:9" pos:end="89:48"><type pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:16">unsigned</name> <name pos:start="89:18" pos:end="89:21">long</name></type> <name pos:start="89:23" pos:end="89:48">decoder_specific_info_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if <condition pos:start="93:12" pos:end="95:77">(<expr pos:start="93:13" pos:end="95:76"><call pos:start="93:13" pos:end="95:71"><name pos:start="93:13" pos:end="93:44">aacplusEncGetDecoderSpecificInfo</name><argument_list pos:start="93:45" pos:end="95:71">(<argument pos:start="93:46" pos:end="93:62"><expr pos:start="93:46" pos:end="93:62"><name pos:start="93:46" pos:end="93:62"><name pos:start="93:46" pos:end="93:46">s</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:62">aacplus_handle</name></name></expr></argument>, <argument pos:start="93:65" pos:end="93:71"><expr pos:start="93:65" pos:end="93:71"><operator pos:start="93:65" pos:end="93:65">&amp;</operator><name pos:start="93:66" pos:end="93:71">buffer</name></expr></argument>,

                                           <argument pos:start="95:44" pos:end="95:70"><expr pos:start="95:44" pos:end="95:70"><operator pos:start="95:44" pos:end="95:44">&amp;</operator><name pos:start="95:45" pos:end="95:70">decoder_specific_info_size</name></expr></argument>)</argument_list></call> <operator pos:start="95:73" pos:end="95:74">==</operator> <literal type="number" pos:start="95:76" pos:end="95:76">1</literal></expr>)</condition> <block pos:start="95:79" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:68">

            <expr_stmt pos:start="97:13" pos:end="97:100"><expr pos:start="97:13" pos:end="97:99"><name pos:start="97:13" pos:end="97:28"><name pos:start="97:13" pos:end="97:17">avctx</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:28">extradata</name></name> <operator pos:start="97:30" pos:end="97:30">=</operator> <call pos:start="97:32" pos:end="97:99"><name pos:start="97:32" pos:end="97:40">av_malloc</name><argument_list pos:start="97:41" pos:end="97:99">(<argument pos:start="97:42" pos:end="97:98"><expr pos:start="97:42" pos:end="97:98"><name pos:start="97:42" pos:end="97:67">decoder_specific_info_size</name> <operator pos:start="97:69" pos:end="97:69">+</operator> <name pos:start="97:71" pos:end="97:98">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:63"><expr pos:start="99:13" pos:end="99:62"><name pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:17">avctx</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:33">extradata_size</name></name> <operator pos:start="99:35" pos:end="99:35">=</operator> <name pos:start="99:37" pos:end="99:62">decoder_specific_info_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:68"><expr pos:start="101:13" pos:end="101:67"><call pos:start="101:13" pos:end="101:67"><name pos:start="101:13" pos:end="101:18">memcpy</name><argument_list pos:start="101:19" pos:end="101:67">(<argument pos:start="101:20" pos:end="101:35"><expr pos:start="101:20" pos:end="101:35"><name pos:start="101:20" pos:end="101:35"><name pos:start="101:20" pos:end="101:24">avctx</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:35">extradata</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:43"><expr pos:start="101:38" pos:end="101:43"><name pos:start="101:38" pos:end="101:43">buffer</name></expr></argument>, <argument pos:start="101:46" pos:end="101:66"><expr pos:start="101:46" pos:end="101:66"><name pos:start="101:46" pos:end="101:66"><name pos:start="101:46" pos:end="101:50">avctx</name><operator pos:start="101:51" pos:end="101:52">-&gt;</operator><name pos:start="101:53" pos:end="101:66">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:21"><expr pos:start="105:9" pos:end="105:20"><call pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:12">free</name><argument_list pos:start="105:13" pos:end="105:20">(<argument pos:start="105:14" pos:end="105:19"><expr pos:start="105:14" pos:end="105:19"><name pos:start="105:14" pos:end="105:19">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
