<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11574.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:39">ff_mpeg4_decode_video_packet_header</name><parameter_list pos:start="1:40" pos:end="1:61">(<parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:55">Mpeg4DecContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MpegEncContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:31">= <expr pos:start="5:25" pos:end="5:31"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:28">ctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:31">m</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">mb_num_bits</name>      <init pos:start="9:26" pos:end="9:53">= <expr pos:start="9:28" pos:end="9:53"><call pos:start="9:28" pos:end="9:49"><name pos:start="9:28" pos:end="9:34">av_log2</name><argument_list pos:start="9:35" pos:end="9:49">(<argument pos:start="9:36" pos:end="9:48"><expr pos:start="9:36" pos:end="9:48"><name pos:start="9:36" pos:end="9:44"><name pos:start="9:36" pos:end="9:36">s</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:44">mb_num</name></name> <operator pos:start="9:46" pos:end="9:46">-</operator> <literal type="number" pos:start="9:48" pos:end="9:48">1</literal></expr></argument>)</argument_list></call> <operator pos:start="9:51" pos:end="9:51">+</operator> <literal type="number" pos:start="9:53" pos:end="9:53">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">header_extension</name> <init pos:start="11:26" pos:end="11:28">= <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr></init></decl>, <decl pos:start="11:31" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:31" pos:end="11:36">mb_num</name></decl>, <decl pos:start="11:39" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:39" pos:end="11:41">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:64">/* is there enough space left for a video packet + header */</comment>

    <if_stmt pos:start="17:5" pos:end="19:18"><if pos:start="17:5" pos:end="19:18">if <condition pos:start="17:8" pos:end="17:57">(<expr pos:start="17:9" pos:end="17:56"><call pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:22">get_bits_count</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:29"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="17:32" pos:end="17:32">&gt;</operator> <name pos:start="17:34" pos:end="17:51"><name pos:start="17:34" pos:end="17:34">s</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:38">gb</name><operator pos:start="17:39" pos:end="17:39">.</operator><name pos:start="17:40" pos:end="17:51">size_in_bits</name></name> <operator pos:start="17:53" pos:end="17:53">-</operator> <literal type="number" pos:start="17:55" pos:end="17:56">20</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:18"><block_content pos:start="19:9" pos:end="19:18">

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="23:5" pos:end="27:18">for <control pos:start="23:9" pos:end="23:34">(<init pos:start="23:10" pos:end="23:17"><expr pos:start="23:10" pos:end="23:16"><name pos:start="23:10" pos:end="23:12">len</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</init> <condition pos:start="23:19" pos:end="23:27"><expr pos:start="23:19" pos:end="23:26"><name pos:start="23:19" pos:end="23:21">len</name> <operator pos:start="23:23" pos:end="23:23">&lt;</operator> <literal type="number" pos:start="23:25" pos:end="23:26">32</literal></expr>;</condition> <incr pos:start="23:29" pos:end="23:33"><expr pos:start="23:29" pos:end="23:33"><name pos:start="23:29" pos:end="23:31">len</name><operator pos:start="23:32" pos:end="23:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="25:9" pos:end="27:18"><block_content pos:start="25:9" pos:end="27:18">

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if <condition pos:start="25:12" pos:end="25:30">(<expr pos:start="25:13" pos:end="25:29"><call pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:21">get_bits1</name><argument_list pos:start="25:22" pos:end="25:29">(<argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:24">s</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break></block_content></block></if></if_stmt></block_content></block></for>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:58">(<expr pos:start="31:9" pos:end="31:57"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:14">!=</operator> <call pos:start="31:16" pos:end="31:57"><name pos:start="31:16" pos:end="31:54">ff_mpeg4_get_video_packet_prefix_length</name><argument_list pos:start="31:55" pos:end="31:57">(<argument pos:start="31:56" pos:end="31:56"><expr pos:start="31:56" pos:end="31:56"><name pos:start="31:56" pos:end="31:56">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:60" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:73"><expr pos:start="33:9" pos:end="33:72"><call pos:start="33:9" pos:end="33:72"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:72">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">avctx</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:40" pos:end="33:71"><expr pos:start="33:40" pos:end="33:71"><literal type="string" pos:start="33:40" pos:end="33:71">"marker does not match f_code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:33">(<expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:11">ctx</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:18">shape</name></name> <operator pos:start="41:20" pos:end="41:21">!=</operator> <name pos:start="41:23" pos:end="41:32">RECT_SHAPE</name></expr>)</condition> <block pos:start="41:35" pos:end="47:5">{<block_content pos:start="43:9" pos:end="43:45">

        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:24">header_extension</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:44"><name pos:start="43:28" pos:end="43:36">get_bits1</name><argument_list pos:start="43:37" pos:end="43:44">(<argument pos:start="43:38" pos:end="43:43"><expr pos:start="43:38" pos:end="43:43"><operator pos:start="43:38" pos:end="43:38">&amp;</operator><name pos:start="43:39" pos:end="43:43"><name pos:start="43:39" pos:end="43:39">s</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="45:9" pos:end="45:32">// FIXME more stuff here</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:10">mb_num</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:42"><name pos:start="51:14" pos:end="51:21">get_bits</name><argument_list pos:start="51:22" pos:end="51:42">(<argument pos:start="51:23" pos:end="51:28"><expr pos:start="51:23" pos:end="51:28"><operator pos:start="51:23" pos:end="51:23">&amp;</operator><name pos:start="51:24" pos:end="51:28"><name pos:start="51:24" pos:end="51:24">s</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:28">gb</name></name></expr></argument>, <argument pos:start="51:31" pos:end="51:41"><expr pos:start="51:31" pos:end="51:41"><name pos:start="51:31" pos:end="51:41">mb_num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:28">(<expr pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:14">mb_num</name> <operator pos:start="53:16" pos:end="53:17">&gt;=</operator> <name pos:start="53:19" pos:end="53:27"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:27">mb_num</name></name></expr>)</condition> <block pos:start="53:30" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:18">

        <expr_stmt pos:start="55:9" pos:end="57:79"><expr pos:start="55:9" pos:end="57:78"><call pos:start="55:9" pos:end="57:78"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:78">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">avctx</name></name></expr></argument>, <argument pos:start="55:26" pos:end="55:37"><expr pos:start="55:26" pos:end="55:37"><name pos:start="55:26" pos:end="55:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="57:16" pos:end="57:58"><expr pos:start="57:16" pos:end="57:58"><literal type="string" pos:start="57:16" pos:end="57:58">"illegal mb_num in video packet (%d %d) \n"</literal></expr></argument>, <argument pos:start="57:61" pos:end="57:66"><expr pos:start="57:61" pos:end="57:66"><name pos:start="57:61" pos:end="57:66">mb_num</name></expr></argument>, <argument pos:start="57:69" pos:end="57:77"><expr pos:start="57:69" pos:end="57:77"><name pos:start="57:69" pos:end="57:77"><name pos:start="57:69" pos:end="57:69">s</name><operator pos:start="57:70" pos:end="57:71">-&gt;</operator><name pos:start="57:72" pos:end="57:77">mb_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:11">mb_x</name></name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:20">mb_num</name> <operator pos:start="65:22" pos:end="65:22">%</operator> <name pos:start="65:24" pos:end="65:34"><name pos:start="65:24" pos:end="65:24">s</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:34">mb_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:11"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:11">mb_y</name></name> <operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:20">mb_num</name> <operator pos:start="67:22" pos:end="67:22">/</operator> <name pos:start="67:24" pos:end="67:34"><name pos:start="67:24" pos:end="67:24">s</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:34">mb_width</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:37">(<expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:18">shape</name></name> <operator pos:start="71:20" pos:end="71:21">!=</operator> <name pos:start="71:23" pos:end="71:36">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="71:39" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:50">

        <decl_stmt pos:start="73:9" pos:end="73:58"><decl pos:start="73:9" pos:end="73:57"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:18">qscale</name> <init pos:start="73:20" pos:end="73:57">= <expr pos:start="73:22" pos:end="73:57"><call pos:start="73:22" pos:end="73:57"><name pos:start="73:22" pos:end="73:29">get_bits</name><argument_list pos:start="73:30" pos:end="73:57">(<argument pos:start="73:31" pos:end="73:36"><expr pos:start="73:31" pos:end="73:36"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:36"><name pos:start="73:32" pos:end="73:32">s</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:36">gb</name></name></expr></argument>, <argument pos:start="73:39" pos:end="73:56"><expr pos:start="73:39" pos:end="73:56"><name pos:start="73:39" pos:end="73:56"><name pos:start="73:39" pos:end="73:39">s</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:56">quant_precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="75:9" pos:end="77:50"><if pos:start="75:9" pos:end="77:50">if <condition pos:start="75:12" pos:end="75:19">(<expr pos:start="75:13" pos:end="75:18"><name pos:start="75:13" pos:end="75:18">qscale</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:50"><block_content pos:start="77:13" pos:end="77:50">

            <expr_stmt pos:start="77:13" pos:end="77:50"><expr pos:start="77:13" pos:end="77:49"><name pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:28">chroma_qscale</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <name pos:start="77:32" pos:end="77:40"><name pos:start="77:32" pos:end="77:32">s</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:40">qscale</name></name> <operator pos:start="77:42" pos:end="77:42">=</operator> <name pos:start="77:44" pos:end="77:49">qscale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="85:45"><if pos:start="83:5" pos:end="85:45">if <condition pos:start="83:8" pos:end="83:33">(<expr pos:start="83:9" pos:end="83:32"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:11">ctx</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:18">shape</name></name> <operator pos:start="83:20" pos:end="83:21">==</operator> <name pos:start="83:23" pos:end="83:32">RECT_SHAPE</name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:45"><block_content pos:start="85:9" pos:end="85:45">

        <expr_stmt pos:start="85:9" pos:end="85:45"><expr pos:start="85:9" pos:end="85:44"><name pos:start="85:9" pos:end="85:24">header_extension</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <call pos:start="85:28" pos:end="85:44"><name pos:start="85:28" pos:end="85:36">get_bits1</name><argument_list pos:start="85:37" pos:end="85:44">(<argument pos:start="85:38" pos:end="85:43"><expr pos:start="85:38" pos:end="85:43"><operator pos:start="85:38" pos:end="85:38">&amp;</operator><name pos:start="85:39" pos:end="85:43"><name pos:start="85:39" pos:end="85:39">s</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="165:5"><if pos:start="89:5" pos:end="165:5">if <condition pos:start="89:8" pos:end="89:25">(<expr pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:24">header_extension</name></expr>)</condition> <block pos:start="89:27" pos:end="165:5">{<block_content pos:start="91:9" pos:end="163:9">

        <decl_stmt pos:start="91:9" pos:end="91:26"><decl pos:start="91:9" pos:end="91:25"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:21">time_incr</name> <init pos:start="91:23" pos:end="91:25">= <expr pos:start="91:25" pos:end="91:25"><literal type="number" pos:start="91:25" pos:end="91:25">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="95:9" pos:end="97:24">while <condition pos:start="95:15" pos:end="95:38">(<expr pos:start="95:16" pos:end="95:37"><call pos:start="95:16" pos:end="95:32"><name pos:start="95:16" pos:end="95:24">get_bits1</name><argument_list pos:start="95:25" pos:end="95:32">(<argument pos:start="95:26" pos:end="95:31"><expr pos:start="95:26" pos:end="95:31"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:31"><name pos:start="95:27" pos:end="95:27">s</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:34" pos:end="95:35">!=</operator> <literal type="number" pos:start="95:37" pos:end="95:37">0</literal></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:24"><block_content pos:start="97:13" pos:end="97:24">

            <expr_stmt pos:start="97:13" pos:end="97:24"><expr pos:start="97:13" pos:end="97:23"><name pos:start="97:13" pos:end="97:21">time_incr</name><operator pos:start="97:22" pos:end="97:23">++</operator></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="101:9" pos:end="101:87"><expr pos:start="101:9" pos:end="101:86"><call pos:start="101:9" pos:end="101:86"><name pos:start="101:9" pos:end="101:20">check_marker</name><argument_list pos:start="101:21" pos:end="101:86">(<argument pos:start="101:22" pos:end="101:29"><expr pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:22">s</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:29">avctx</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:37"><expr pos:start="101:32" pos:end="101:37"><operator pos:start="101:32" pos:end="101:32">&amp;</operator><name pos:start="101:33" pos:end="101:37"><name pos:start="101:33" pos:end="101:33">s</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:37">gb</name></name></expr></argument>, <argument pos:start="101:40" pos:end="101:85"><expr pos:start="101:40" pos:end="101:85"><literal type="string" pos:start="101:40" pos:end="101:85">"before time_increment in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:52"><expr pos:start="103:9" pos:end="103:51"><call pos:start="103:9" pos:end="103:51"><name pos:start="103:9" pos:end="103:17">skip_bits</name><argument_list pos:start="103:18" pos:end="103:51">(<argument pos:start="103:19" pos:end="103:24"><expr pos:start="103:19" pos:end="103:24"><operator pos:start="103:19" pos:end="103:19">&amp;</operator><name pos:start="103:20" pos:end="103:24"><name pos:start="103:20" pos:end="103:20">s</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:24">gb</name></name></expr></argument>, <argument pos:start="103:27" pos:end="103:50"><expr pos:start="103:27" pos:end="103:50"><name pos:start="103:27" pos:end="103:50"><name pos:start="103:27" pos:end="103:29">ctx</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:50">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="103:59" pos:end="103:78">/* time_increment */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:88"><expr pos:start="105:9" pos:end="105:87"><call pos:start="105:9" pos:end="105:87"><name pos:start="105:9" pos:end="105:20">check_marker</name><argument_list pos:start="105:21" pos:end="105:87">(<argument pos:start="105:22" pos:end="105:29"><expr pos:start="105:22" pos:end="105:29"><name pos:start="105:22" pos:end="105:29"><name pos:start="105:22" pos:end="105:22">s</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:29">avctx</name></name></expr></argument>, <argument pos:start="105:32" pos:end="105:37"><expr pos:start="105:32" pos:end="105:37"><operator pos:start="105:32" pos:end="105:32">&amp;</operator><name pos:start="105:33" pos:end="105:37"><name pos:start="105:33" pos:end="105:33">s</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:37">gb</name></name></expr></argument>, <argument pos:start="105:40" pos:end="105:86"><expr pos:start="105:40" pos:end="105:86"><literal type="string" pos:start="105:40" pos:end="105:86">"before vop_coding_type in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:29"><expr pos:start="109:9" pos:end="109:28"><call pos:start="109:9" pos:end="109:28"><name pos:start="109:9" pos:end="109:17">skip_bits</name><argument_list pos:start="109:18" pos:end="109:28">(<argument pos:start="109:19" pos:end="109:24"><expr pos:start="109:19" pos:end="109:24"><operator pos:start="109:19" pos:end="109:19">&amp;</operator><name pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:20">s</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:24">gb</name></name></expr></argument>, <argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><literal type="number" pos:start="109:27" pos:end="109:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:31" pos:end="109:51">/* vop coding type */</comment>

        <comment type="line" pos:start="111:9" pos:end="111:36">// FIXME not rect stuff here</comment>



        <if_stmt pos:start="115:9" pos:end="163:9"><if pos:start="115:9" pos:end="163:9">if <condition pos:start="115:12" pos:end="115:41">(<expr pos:start="115:13" pos:end="115:40"><name pos:start="115:13" pos:end="115:22"><name pos:start="115:13" pos:end="115:15">ctx</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:22">shape</name></name> <operator pos:start="115:24" pos:end="115:25">!=</operator> <name pos:start="115:27" pos:end="115:40">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="115:43" pos:end="163:9">{<block_content pos:start="117:13" pos:end="161:13">

            <expr_stmt pos:start="117:13" pos:end="117:33"><expr pos:start="117:13" pos:end="117:32"><call pos:start="117:13" pos:end="117:32"><name pos:start="117:13" pos:end="117:21">skip_bits</name><argument_list pos:start="117:22" pos:end="117:32">(<argument pos:start="117:23" pos:end="117:28"><expr pos:start="117:23" pos:end="117:28"><operator pos:start="117:23" pos:end="117:23">&amp;</operator><name pos:start="117:24" pos:end="117:28"><name pos:start="117:24" pos:end="117:24">s</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:28">gb</name></name></expr></argument>, <argument pos:start="117:31" pos:end="117:31"><expr pos:start="117:31" pos:end="117:31"><literal type="number" pos:start="117:31" pos:end="117:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="117:35" pos:end="117:62">/* intra dc vlc threshold */</comment>

            <comment type="line" pos:start="119:13" pos:end="119:49">// FIXME don't just ignore everything</comment>

            <if_stmt pos:start="121:13" pos:end="131:13"><if pos:start="121:13" pos:end="131:13">if <condition pos:start="121:16" pos:end="123:52">(<expr pos:start="121:17" pos:end="123:51"><name pos:start="121:17" pos:end="121:28"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:28">pict_type</name></name> <operator pos:start="121:30" pos:end="121:31">==</operator> <name pos:start="121:33" pos:end="121:49">AV_PICTURE_TYPE_S</name> <operator pos:start="121:51" pos:end="121:52">&amp;&amp;</operator>

                <name pos:start="123:17" pos:end="123:37"><name pos:start="123:17" pos:end="123:19">ctx</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:37">vol_sprite_usage</name></name> <operator pos:start="123:39" pos:end="123:40">==</operator> <name pos:start="123:42" pos:end="123:51">GMC_SPRITE</name></expr>)</condition> <block pos:start="123:54" pos:end="131:13">{<block_content pos:start="125:17" pos:end="129:61">

                <if_stmt pos:start="125:17" pos:end="127:47"><if pos:start="125:17" pos:end="127:47">if <condition pos:start="125:20" pos:end="125:68">(<expr pos:start="125:21" pos:end="125:67"><call pos:start="125:21" pos:end="125:63"><name pos:start="125:21" pos:end="125:50">mpeg4_decode_sprite_trajectory</name><argument_list pos:start="125:51" pos:end="125:63">(<argument pos:start="125:52" pos:end="125:54"><expr pos:start="125:52" pos:end="125:54"><name pos:start="125:52" pos:end="125:54">ctx</name></expr></argument>, <argument pos:start="125:57" pos:end="125:62"><expr pos:start="125:57" pos:end="125:62"><operator pos:start="125:57" pos:end="125:57">&amp;</operator><name pos:start="125:58" pos:end="125:62"><name pos:start="125:58" pos:end="125:58">s</name><operator pos:start="125:59" pos:end="125:60">-&gt;</operator><name pos:start="125:61" pos:end="125:62">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:65" pos:end="125:65">&lt;</operator> <literal type="number" pos:start="125:67" pos:end="125:67">0</literal></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:47"><block_content pos:start="127:21" pos:end="127:47">

                    <return pos:start="127:21" pos:end="127:47">return <expr pos:start="127:28" pos:end="127:46"><name pos:start="127:28" pos:end="127:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:61"><expr pos:start="129:17" pos:end="129:60"><call pos:start="129:17" pos:end="129:60"><name pos:start="129:17" pos:end="129:22">av_log</name><argument_list pos:start="129:23" pos:end="129:60">(<argument pos:start="129:24" pos:end="129:31"><expr pos:start="129:24" pos:end="129:31"><name pos:start="129:24" pos:end="129:31"><name pos:start="129:24" pos:end="129:24">s</name><operator pos:start="129:25" pos:end="129:26">-&gt;</operator><name pos:start="129:27" pos:end="129:31">avctx</name></name></expr></argument>, <argument pos:start="129:34" pos:end="129:45"><expr pos:start="129:34" pos:end="129:45"><name pos:start="129:34" pos:end="129:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:48" pos:end="129:59"><expr pos:start="129:48" pos:end="129:59"><literal type="string" pos:start="129:48" pos:end="129:59">"untested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="135:13" pos:end="135:43">// FIXME reduced res stuff here</comment>



            <if_stmt pos:start="139:13" pos:end="149:13"><if pos:start="139:13" pos:end="149:13">if <condition pos:start="139:16" pos:end="139:50">(<expr pos:start="139:17" pos:end="139:49"><name pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:28">pict_type</name></name> <operator pos:start="139:30" pos:end="139:31">!=</operator> <name pos:start="139:33" pos:end="139:49">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="139:52" pos:end="149:13">{<block_content pos:start="141:17" pos:end="147:78">

                <decl_stmt pos:start="141:17" pos:end="141:49"><decl pos:start="141:17" pos:end="141:48"><type pos:start="141:17" pos:end="141:19"><name pos:start="141:17" pos:end="141:19">int</name></type> <name pos:start="141:21" pos:end="141:26">f_code</name> <init pos:start="141:28" pos:end="141:48">= <expr pos:start="141:30" pos:end="141:48"><call pos:start="141:30" pos:end="141:48"><name pos:start="141:30" pos:end="141:37">get_bits</name><argument_list pos:start="141:38" pos:end="141:48">(<argument pos:start="141:39" pos:end="141:44"><expr pos:start="141:39" pos:end="141:44"><operator pos:start="141:39" pos:end="141:39">&amp;</operator><name pos:start="141:40" pos:end="141:44"><name pos:start="141:40" pos:end="141:40">s</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:44">gb</name></name></expr></argument>, <argument pos:start="141:47" pos:end="141:47"><expr pos:start="141:47" pos:end="141:47"><literal type="number" pos:start="141:47" pos:end="141:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>       <comment type="block" pos:start="141:57" pos:end="141:71">/* fcode_for */</comment>

                <if_stmt pos:start="143:17" pos:end="147:78"><if pos:start="143:17" pos:end="147:78">if <condition pos:start="143:20" pos:end="143:32">(<expr pos:start="143:21" pos:end="143:31"><name pos:start="143:21" pos:end="143:26">f_code</name> <operator pos:start="143:28" pos:end="143:29">==</operator> <literal type="number" pos:start="143:31" pos:end="143:31">0</literal></expr>)</condition><block type="pseudo" pos:start="145:21" pos:end="147:78"><block_content pos:start="145:21" pos:end="147:78">

                    <expr_stmt pos:start="145:21" pos:end="147:78"><expr pos:start="145:21" pos:end="147:77"><call pos:start="145:21" pos:end="147:77"><name pos:start="145:21" pos:end="145:26">av_log</name><argument_list pos:start="145:27" pos:end="147:77">(<argument pos:start="145:28" pos:end="145:35"><expr pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:28">s</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:35">avctx</name></name></expr></argument>, <argument pos:start="145:38" pos:end="145:49"><expr pos:start="145:38" pos:end="145:49"><name pos:start="145:38" pos:end="145:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="147:28" pos:end="147:76"><expr pos:start="147:28" pos:end="147:76"><literal type="string" pos:start="147:28" pos:end="147:76">"Error, video packet header damaged (f_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="151:13" pos:end="161:13"><if pos:start="151:13" pos:end="161:13">if <condition pos:start="151:16" pos:end="151:50">(<expr pos:start="151:17" pos:end="151:49"><name pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:28">pict_type</name></name> <operator pos:start="151:30" pos:end="151:31">==</operator> <name pos:start="151:33" pos:end="151:49">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="151:52" pos:end="161:13">{<block_content pos:start="153:17" pos:end="159:78">

                <decl_stmt pos:start="153:17" pos:end="153:49"><decl pos:start="153:17" pos:end="153:48"><type pos:start="153:17" pos:end="153:19"><name pos:start="153:17" pos:end="153:19">int</name></type> <name pos:start="153:21" pos:end="153:26">b_code</name> <init pos:start="153:28" pos:end="153:48">= <expr pos:start="153:30" pos:end="153:48"><call pos:start="153:30" pos:end="153:48"><name pos:start="153:30" pos:end="153:37">get_bits</name><argument_list pos:start="153:38" pos:end="153:48">(<argument pos:start="153:39" pos:end="153:44"><expr pos:start="153:39" pos:end="153:44"><operator pos:start="153:39" pos:end="153:39">&amp;</operator><name pos:start="153:40" pos:end="153:44"><name pos:start="153:40" pos:end="153:40">s</name><operator pos:start="153:41" pos:end="153:42">-&gt;</operator><name pos:start="153:43" pos:end="153:44">gb</name></name></expr></argument>, <argument pos:start="153:47" pos:end="153:47"><expr pos:start="153:47" pos:end="153:47"><literal type="number" pos:start="153:47" pos:end="153:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="155:17" pos:end="159:78"><if pos:start="155:17" pos:end="159:78">if <condition pos:start="155:20" pos:end="155:32">(<expr pos:start="155:21" pos:end="155:31"><name pos:start="155:21" pos:end="155:26">b_code</name> <operator pos:start="155:28" pos:end="155:29">==</operator> <literal type="number" pos:start="155:31" pos:end="155:31">0</literal></expr>)</condition><block type="pseudo" pos:start="157:21" pos:end="159:78"><block_content pos:start="157:21" pos:end="159:78">

                    <expr_stmt pos:start="157:21" pos:end="159:78"><expr pos:start="157:21" pos:end="159:77"><call pos:start="157:21" pos:end="159:77"><name pos:start="157:21" pos:end="157:26">av_log</name><argument_list pos:start="157:27" pos:end="159:77">(<argument pos:start="157:28" pos:end="157:35"><expr pos:start="157:28" pos:end="157:35"><name pos:start="157:28" pos:end="157:35"><name pos:start="157:28" pos:end="157:28">s</name><operator pos:start="157:29" pos:end="157:30">-&gt;</operator><name pos:start="157:31" pos:end="157:35">avctx</name></name></expr></argument>, <argument pos:start="157:38" pos:end="157:49"><expr pos:start="157:38" pos:end="157:49"><name pos:start="157:38" pos:end="157:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="159:28" pos:end="159:76"><expr pos:start="159:28" pos:end="159:76"><literal type="string" pos:start="159:28" pos:end="159:76">"Error, video packet header damaged (b_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="167:5" pos:end="169:37"><if pos:start="167:5" pos:end="169:37">if <condition pos:start="167:8" pos:end="167:22">(<expr pos:start="167:9" pos:end="167:21"><name pos:start="167:9" pos:end="167:21"><name pos:start="167:9" pos:end="167:11">ctx</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:21">new_pred</name></name></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:37"><block_content pos:start="169:9" pos:end="169:37">

        <expr_stmt pos:start="169:9" pos:end="169:37"><expr pos:start="169:9" pos:end="169:36"><call pos:start="169:9" pos:end="169:36"><name pos:start="169:9" pos:end="169:23">decode_new_pred</name><argument_list pos:start="169:24" pos:end="169:36">(<argument pos:start="169:25" pos:end="169:27"><expr pos:start="169:25" pos:end="169:27"><name pos:start="169:25" pos:end="169:27">ctx</name></expr></argument>, <argument pos:start="169:30" pos:end="169:35"><expr pos:start="169:30" pos:end="169:35"><operator pos:start="169:30" pos:end="169:30">&amp;</operator><name pos:start="169:31" pos:end="169:35"><name pos:start="169:31" pos:end="169:31">s</name><operator pos:start="169:32" pos:end="169:33">-&gt;</operator><name pos:start="169:34" pos:end="169:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
