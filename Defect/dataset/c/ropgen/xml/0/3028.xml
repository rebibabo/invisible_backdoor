<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3028.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">set_blocksize</name><parameter_list pos:start="1:26" pos:end="3:57">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:32">Object</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">obj</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:49"><decl pos:start="1:40" pos:end="1:49"><type pos:start="1:40" pos:end="1:49"><name pos:start="1:40" pos:end="1:46">Visitor</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">v</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:63">opaque</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">name</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:56"><decl pos:start="3:45" pos:end="3:56"><type pos:start="3:45" pos:end="3:56"><name pos:start="3:45" pos:end="3:49">Error</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier><modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:17">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">dev</name> <init pos:start="7:22" pos:end="7:34">= <expr pos:start="7:24" pos:end="7:34"><call pos:start="7:24" pos:end="7:34"><name pos:start="7:24" pos:end="7:29">DEVICE</name><argument_list pos:start="7:30" pos:end="7:34">(<argument pos:start="7:31" pos:end="7:33"><expr pos:start="7:31" pos:end="7:33"><name pos:start="7:31" pos:end="7:33">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">Property</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">prop</name> <init pos:start="9:20" pos:end="9:27">= <expr pos:start="9:22" pos:end="9:27"><name pos:start="9:22" pos:end="9:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:18">value</name></decl>, <decl pos:start="11:21" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:12"><modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">ptr</name> <init pos:start="11:26" pos:end="11:55">= <expr pos:start="11:28" pos:end="11:55"><call pos:start="11:28" pos:end="11:55"><name pos:start="11:28" pos:end="11:44">qdev_get_prop_ptr</name><argument_list pos:start="11:45" pos:end="11:55">(<argument pos:start="11:46" pos:end="11:48"><expr pos:start="11:46" pos:end="11:48"><name pos:start="11:46" pos:end="11:48">dev</name></expr></argument>, <argument pos:start="11:51" pos:end="11:54"><expr pos:start="11:51" pos:end="11:54"><name pos:start="11:51" pos:end="11:54">prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:17"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">int64_t</name></type> <name pos:start="15:19" pos:end="15:21">min</name> <init pos:start="15:23" pos:end="15:27">= <expr pos:start="15:25" pos:end="15:27"><literal type="number" pos:start="15:25" pos:end="15:27">512</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:17"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">int64_t</name></type> <name pos:start="17:19" pos:end="17:21">max</name> <init pos:start="17:23" pos:end="17:29">= <expr pos:start="17:25" pos:end="17:29"><literal type="number" pos:start="17:25" pos:end="17:29">32768</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:11">dev</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:21">realized</name></name></expr>)</condition> <block pos:start="21:24" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:53"><expr pos:start="23:9" pos:end="23:52"><call pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:35">qdev_prop_set_after_realize</name><argument_list pos:start="23:36" pos:end="23:52">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">dev</name></expr></argument>, <argument pos:start="23:42" pos:end="23:45"><expr pos:start="23:42" pos:end="23:45"><name pos:start="23:42" pos:end="23:45">name</name></expr></argument>, <argument pos:start="23:48" pos:end="23:51"><expr pos:start="23:48" pos:end="23:51"><name pos:start="23:48" pos:end="23:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:51"><expr pos:start="31:5" pos:end="31:50"><call pos:start="31:5" pos:end="31:50"><name pos:start="31:5" pos:end="31:21">visit_type_uint16</name><argument_list pos:start="31:22" pos:end="31:50">(<argument pos:start="31:23" pos:end="31:23"><expr pos:start="31:23" pos:end="31:23"><name pos:start="31:23" pos:end="31:23">v</name></expr></argument>, <argument pos:start="31:26" pos:end="31:31"><expr pos:start="31:26" pos:end="31:31"><operator pos:start="31:26" pos:end="31:26">&amp;</operator><name pos:start="31:27" pos:end="31:31">value</name></expr></argument>, <argument pos:start="31:34" pos:end="31:37"><expr pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:37">name</name></expr></argument>, <argument pos:start="31:40" pos:end="31:49"><expr pos:start="31:40" pos:end="31:49"><operator pos:start="31:40" pos:end="31:40">&amp;</operator><name pos:start="31:41" pos:end="31:49">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:18">(<expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:17">local_err</name></expr>)</condition> <block pos:start="33:20" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:41"><expr pos:start="35:9" pos:end="35:40"><call pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:23">error_propagate</name><argument_list pos:start="35:24" pos:end="35:40">(<argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><name pos:start="35:25" pos:end="35:28">errp</name></expr></argument>, <argument pos:start="35:31" pos:end="35:39"><expr pos:start="35:31" pos:end="35:39"><name pos:start="35:31" pos:end="35:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:35">(<expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:13">value</name> <argument_list type="generic" pos:start="41:15" pos:end="41:30">&lt; <argument pos:start="41:17" pos:end="41:28"><expr pos:start="41:17" pos:end="41:28"><name pos:start="41:17" pos:end="41:19">min</name> <operator pos:start="41:21" pos:end="41:22">||</operator> <name pos:start="41:24" pos:end="41:28">value</name></expr></argument> &gt;</argument_list></name> <name pos:start="41:32" pos:end="41:34">max</name></expr>)</condition> <block pos:start="41:37" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:15">

        <expr_stmt pos:start="43:9" pos:end="45:63"><expr pos:start="43:9" pos:end="45:62"><call pos:start="43:9" pos:end="45:62"><name pos:start="43:9" pos:end="43:17">error_set</name><argument_list pos:start="43:18" pos:end="45:62">(<argument pos:start="43:19" pos:end="43:22"><expr pos:start="43:19" pos:end="43:22"><name pos:start="43:19" pos:end="43:22">errp</name></expr></argument>, <argument pos:start="43:25" pos:end="43:56"><expr pos:start="43:25" pos:end="43:56"><name pos:start="43:25" pos:end="43:56">QERR_PROPERTY_VALUE_OUT_OF_RANGE</name></expr></argument>,

                  <argument pos:start="45:19" pos:end="45:29"><expr pos:start="45:19" pos:end="45:29"><ternary pos:start="45:19" pos:end="45:29"><condition pos:start="45:19" pos:end="45:26"><expr pos:start="45:19" pos:end="45:25"><name pos:start="45:19" pos:end="45:25"><name pos:start="45:19" pos:end="45:21">dev</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:25">id</name></name></expr>?</condition><then/><else pos:start="45:27" pos:end="45:29">:<expr pos:start="45:28" pos:end="45:29"><literal type="string" pos:start="45:28" pos:end="45:29">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="45:32" pos:end="45:35"><expr pos:start="45:32" pos:end="45:35"><name pos:start="45:32" pos:end="45:35">name</name></expr></argument>, <argument pos:start="45:38" pos:end="45:51"><expr pos:start="45:38" pos:end="45:51"><operator pos:start="45:38" pos:end="45:38">(</operator><name pos:start="45:39" pos:end="45:45">int64_t</name><operator pos:start="45:46" pos:end="45:46">)</operator><name pos:start="45:47" pos:end="45:51">value</name></expr></argument>, <argument pos:start="45:54" pos:end="45:56"><expr pos:start="45:54" pos:end="45:56"><name pos:start="45:54" pos:end="45:56">min</name></expr></argument>, <argument pos:start="45:59" pos:end="45:61"><expr pos:start="45:59" pos:end="45:61"><name pos:start="45:59" pos:end="45:61">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:55">/* We rely on power-of-2 blocksizes for bitmasks */</comment>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:35">(<expr pos:start="55:9" pos:end="55:34"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:14">value</name> <operator pos:start="55:16" pos:end="55:16">&amp;</operator> <operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:23">value</name> <operator pos:start="55:25" pos:end="55:25">-</operator> <literal type="number" pos:start="55:27" pos:end="55:27">1</literal><operator pos:start="55:28" pos:end="55:28">)</operator><operator pos:start="55:29" pos:end="55:29">)</operator> <operator pos:start="55:31" pos:end="55:32">!=</operator> <literal type="number" pos:start="55:34" pos:end="55:34">0</literal></expr>)</condition> <block pos:start="55:37" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:15">

        <expr_stmt pos:start="57:9" pos:end="61:55"><expr pos:start="57:9" pos:end="61:54"><call pos:start="57:9" pos:end="61:54"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="61:54">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>,

                  <argument pos:start="59:19" pos:end="59:90"><expr pos:start="59:19" pos:end="59:90"><literal type="string" pos:start="59:19" pos:end="59:56">"Property %s.%s doesn't take value '%"</literal> <name pos:start="59:58" pos:end="59:63">PRId64</name> <literal type="string" pos:start="59:65" pos:end="59:90">"', it's not a power of 2"</literal></expr></argument>,

                  <argument pos:start="61:19" pos:end="61:31"><expr pos:start="61:19" pos:end="61:31"><ternary pos:start="61:19" pos:end="61:31"><condition pos:start="61:19" pos:end="61:27"><expr pos:start="61:19" pos:end="61:25"><name pos:start="61:19" pos:end="61:25"><name pos:start="61:19" pos:end="61:21">dev</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:25">id</name></name></expr> ?</condition><then/><else pos:start="61:28" pos:end="61:31">: <expr pos:start="61:30" pos:end="61:31"><literal type="string" pos:start="61:30" pos:end="61:31">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">name</name></expr></argument>, <argument pos:start="61:40" pos:end="61:53"><expr pos:start="61:40" pos:end="61:53"><operator pos:start="61:40" pos:end="61:40">(</operator><name pos:start="61:41" pos:end="61:47">int64_t</name><operator pos:start="61:48" pos:end="61:48">)</operator><name pos:start="61:49" pos:end="61:53">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:17"><expr pos:start="69:5" pos:end="69:16"><operator pos:start="69:5" pos:end="69:5">*</operator><name pos:start="69:6" pos:end="69:8">ptr</name> <operator pos:start="69:10" pos:end="69:10">=</operator> <name pos:start="69:12" pos:end="69:16">value</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
