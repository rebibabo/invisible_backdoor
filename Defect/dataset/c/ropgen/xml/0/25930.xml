<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25930.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:41">qed_aio_read_data</name><parameter_list pos:start="1:42" pos:end="3:70">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:63"><decl pos:start="1:57" pos:end="1:63"><type pos:start="1:57" pos:end="1:63"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:63">ret</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:57"><decl pos:start="3:43" pos:end="3:57"><type pos:start="3:43" pos:end="3:57"><name pos:start="3:43" pos:end="3:50">uint64_t</name></type> <name pos:start="3:52" pos:end="3:57">offset</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:69"><decl pos:start="3:60" pos:end="3:69"><type pos:start="3:60" pos:end="3:69"><name pos:start="3:60" pos:end="3:65">size_t</name></type> <name pos:start="3:67" pos:end="3:69">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:13">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QEDAIOCB</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">acb</name> <init pos:start="7:19" pos:end="7:26">= <expr pos:start="7:21" pos:end="7:26"><name pos:start="7:21" pos:end="7:26">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BDRVQEDState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:35">= <expr pos:start="9:23" pos:end="9:35"><call pos:start="9:23" pos:end="9:35"><name pos:start="9:23" pos:end="9:30">acb_to_s</name><argument_list pos:start="9:31" pos:end="9:35">(<argument pos:start="9:32" pos:end="9:34"><expr pos:start="9:32" pos:end="9:34"><name pos:start="9:32" pos:end="9:34">acb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name> <init pos:start="11:26" pos:end="11:34">= <expr pos:start="11:28" pos:end="11:34"><name pos:start="11:28" pos:end="11:34"><name pos:start="11:28" pos:end="11:30">acb</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:34">bs</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:36">/* Adjust offset into cluster */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:10">offset</name> <operator pos:start="17:12" pos:end="17:13">+=</operator> <call pos:start="17:15" pos:end="17:54"><name pos:start="17:15" pos:end="17:37">qed_offset_into_cluster</name><argument_list pos:start="17:38" pos:end="17:54">(<argument pos:start="17:39" pos:end="17:39"><expr pos:start="17:39" pos:end="17:39"><name pos:start="17:39" pos:end="17:39">s</name></expr></argument>, <argument pos:start="17:42" pos:end="17:53"><expr pos:start="17:42" pos:end="17:53"><name pos:start="17:42" pos:end="17:53"><name pos:start="17:42" pos:end="17:44">acb</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:53">cur_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:54"><expr pos:start="21:5" pos:end="21:53"><call pos:start="21:5" pos:end="21:53"><name pos:start="21:5" pos:end="21:27">trace_qed_aio_read_data</name><argument_list pos:start="21:28" pos:end="21:53">(<argument pos:start="21:29" pos:end="21:29"><expr pos:start="21:29" pos:end="21:29"><name pos:start="21:29" pos:end="21:29">s</name></expr></argument>, <argument pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:34"><name pos:start="21:32" pos:end="21:34">acb</name></expr></argument>, <argument pos:start="21:37" pos:end="21:39"><expr pos:start="21:37" pos:end="21:39"><name pos:start="21:37" pos:end="21:39">ret</name></expr></argument>, <argument pos:start="21:42" pos:end="21:47"><expr pos:start="21:42" pos:end="21:47"><name pos:start="21:42" pos:end="21:47">offset</name></expr></argument>, <argument pos:start="21:50" pos:end="21:52"><expr pos:start="21:50" pos:end="21:52"><name pos:start="21:50" pos:end="21:52">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:72"><expr pos:start="25:5" pos:end="25:71"><call pos:start="25:5" pos:end="25:71"><name pos:start="25:5" pos:end="25:21">qemu_iovec_concat</name><argument_list pos:start="25:22" pos:end="25:71">(<argument pos:start="25:23" pos:end="25:36"><expr pos:start="25:23" pos:end="25:36"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:36"><name pos:start="25:24" pos:end="25:26">acb</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:36">cur_qiov</name></name></expr></argument>, <argument pos:start="25:39" pos:end="25:47"><expr pos:start="25:39" pos:end="25:47"><name pos:start="25:39" pos:end="25:47"><name pos:start="25:39" pos:end="25:41">acb</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:47">qiov</name></name></expr></argument>, <argument pos:start="25:50" pos:end="25:65"><expr pos:start="25:50" pos:end="25:65"><name pos:start="25:50" pos:end="25:65"><name pos:start="25:50" pos:end="25:52">acb</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:65">qiov_offset</name></name></expr></argument>, <argument pos:start="25:68" pos:end="25:70"><expr pos:start="25:68" pos:end="25:70"><name pos:start="25:68" pos:end="25:70">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:52">/* Handle zero cluster and backing file reads */</comment>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <name pos:start="31:16" pos:end="31:31">QED_CLUSTER_ZERO</name></expr>)</condition> <block pos:start="31:34" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:68"><expr pos:start="33:9" pos:end="33:67"><call pos:start="33:9" pos:end="33:67"><name pos:start="33:9" pos:end="33:25">qemu_iovec_memset</name><argument_list pos:start="33:26" pos:end="33:67">(<argument pos:start="33:27" pos:end="33:40"><expr pos:start="33:27" pos:end="33:40"><operator pos:start="33:27" pos:end="33:27">&amp;</operator><name pos:start="33:28" pos:end="33:40"><name pos:start="33:28" pos:end="33:30">acb</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:40">cur_qiov</name></name></expr></argument>, <argument pos:start="33:43" pos:end="33:43"><expr pos:start="33:43" pos:end="33:43"><literal type="number" pos:start="33:43" pos:end="33:43">0</literal></expr></argument>, <argument pos:start="33:46" pos:end="33:46"><expr pos:start="33:46" pos:end="33:46"><literal type="number" pos:start="33:46" pos:end="33:46">0</literal></expr></argument>, <argument pos:start="33:49" pos:end="33:66"><expr pos:start="33:49" pos:end="33:66"><name pos:start="33:49" pos:end="33:66"><name pos:start="33:49" pos:end="33:51">acb</name><operator pos:start="33:52" pos:end="33:53">-&gt;</operator><name pos:start="33:54" pos:end="33:61">cur_qiov</name><operator pos:start="33:62" pos:end="33:62">.</operator><name pos:start="33:63" pos:end="33:66">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="37:7" pos:end="43:5">else if <condition pos:start="37:15" pos:end="37:40">(<expr pos:start="37:16" pos:end="37:39"><name pos:start="37:16" pos:end="37:18">ret</name> <operator pos:start="37:20" pos:end="37:21">!=</operator> <name pos:start="37:23" pos:end="37:39">QED_CLUSTER_FOUND</name></expr>)</condition> <block pos:start="37:42" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:57">

        <return pos:start="39:9" pos:end="41:57">return <expr pos:start="39:16" pos:end="41:56"><call pos:start="39:16" pos:end="41:56"><name pos:start="39:16" pos:end="39:36">qed_read_backing_file</name><argument_list pos:start="39:37" pos:end="41:56">(<argument pos:start="39:38" pos:end="39:38"><expr pos:start="39:38" pos:end="39:38"><name pos:start="39:38" pos:end="39:38">s</name></expr></argument>, <argument pos:start="39:41" pos:end="39:52"><expr pos:start="39:41" pos:end="39:52"><name pos:start="39:41" pos:end="39:52"><name pos:start="39:41" pos:end="39:43">acb</name><operator pos:start="39:44" pos:end="39:45">-&gt;</operator><name pos:start="39:46" pos:end="39:52">cur_pos</name></name></expr></argument>, <argument pos:start="39:55" pos:end="39:68"><expr pos:start="39:55" pos:end="39:68"><operator pos:start="39:55" pos:end="39:55">&amp;</operator><name pos:start="39:56" pos:end="39:68"><name pos:start="39:56" pos:end="39:58">acb</name><operator pos:start="39:59" pos:end="39:60">-&gt;</operator><name pos:start="39:61" pos:end="39:68">cur_qiov</name></name></expr></argument>,

                                     <argument pos:start="41:38" pos:end="41:55"><expr pos:start="41:38" pos:end="41:55"><operator pos:start="41:38" pos:end="41:38">&amp;</operator><name pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:41">acb</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:55">backing_qiov</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><call pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:16">BLKDBG_EVENT</name><argument_list pos:start="47:17" pos:end="47:43">(<argument pos:start="47:18" pos:end="47:25"><expr pos:start="47:18" pos:end="47:25"><name pos:start="47:18" pos:end="47:25"><name pos:start="47:18" pos:end="47:19">bs</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:25">file</name></name></expr></argument>, <argument pos:start="47:28" pos:end="47:42"><expr pos:start="47:28" pos:end="47:42"><name pos:start="47:28" pos:end="47:42">BLKDBG_READ_AIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:44"><expr pos:start="49:5" pos:end="51:43"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="51:43"><name pos:start="49:11" pos:end="49:24">bdrv_co_preadv</name><argument_list pos:start="49:25" pos:end="51:43">(<argument pos:start="49:26" pos:end="49:33"><expr pos:start="49:26" pos:end="49:33"><name pos:start="49:26" pos:end="49:33"><name pos:start="49:26" pos:end="49:27">bs</name><operator pos:start="49:28" pos:end="49:29">-&gt;</operator><name pos:start="49:30" pos:end="49:33">file</name></name></expr></argument>, <argument pos:start="49:36" pos:end="49:41"><expr pos:start="49:36" pos:end="49:41"><name pos:start="49:36" pos:end="49:41">offset</name></expr></argument>, <argument pos:start="49:44" pos:end="49:61"><expr pos:start="49:44" pos:end="49:61"><name pos:start="49:44" pos:end="49:61"><name pos:start="49:44" pos:end="49:46">acb</name><operator pos:start="49:47" pos:end="49:48">-&gt;</operator><name pos:start="49:49" pos:end="49:56">cur_qiov</name><operator pos:start="49:57" pos:end="49:57">.</operator><name pos:start="49:58" pos:end="49:61">size</name></name></expr></argument>,

                         <argument pos:start="51:26" pos:end="51:39"><expr pos:start="51:26" pos:end="51:39"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:39"><name pos:start="51:27" pos:end="51:29">acb</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:39">cur_qiov</name></name></expr></argument>, <argument pos:start="51:42" pos:end="51:42"><expr pos:start="51:42" pos:end="51:42"><literal type="number" pos:start="51:42" pos:end="51:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:19">

        <return pos:start="55:9" pos:end="55:19">return <expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
