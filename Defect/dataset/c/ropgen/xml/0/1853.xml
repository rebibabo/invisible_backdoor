<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1853.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:20">do_rt_sigreturn</name><parameter_list pos:start="1:21" pos:end="1:35">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:31"><name pos:start="1:22" pos:end="1:29">CPUState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:9" pos:end="75:17">

	<decl_stmt pos:start="5:9" pos:end="5:34"><decl pos:start="5:9" pos:end="5:33"><type pos:start="5:9" pos:end="5:28"><name pos:start="5:9" pos:end="5:26"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:26">rt_sigframe</name></name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:33">frame</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7:9" pos:end="7:26"><decl pos:start="7:9" pos:end="7:25"><type pos:start="7:9" pos:end="7:16"><name pos:start="7:9" pos:end="7:16">sigset_t</name></type> <name pos:start="7:18" pos:end="7:25">host_set</name></decl>;</decl_stmt>



	<comment type="block" pos:start="11:9" pos:end="19:11">/*

	 * Since we stacked the signal on a 64-bit boundary,

	 * then 'sp' should be word aligned here.  If it's

	 * not, then the user is trying to mess with us.

	 */</comment>

	<if_stmt pos:start="21:9" pos:end="23:30"><if pos:start="21:9" pos:end="23:30">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:15">env</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:21">regs</name><index pos:start="21:22" pos:end="21:25">[<expr pos:start="21:23" pos:end="21:24"><literal type="number" pos:start="21:23" pos:end="21:24">13</literal></expr>]</index></name> <operator pos:start="21:27" pos:end="21:27">&amp;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">7</literal></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:30"><block_content pos:start="23:17" pos:end="23:30">

		<goto pos:start="23:17" pos:end="23:30">goto <name pos:start="23:22" pos:end="23:29">badframe</name>;</goto></block_content></block></if></if_stmt>



	<expr_stmt pos:start="27:9" pos:end="38:0"><expr pos:start="27:9" pos:end="27:51"><name pos:start="27:9" pos:end="27:13">frame</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <operator pos:start="27:17" pos:end="27:17">(</operator>struct <name pos:start="27:25" pos:end="27:35">rt_sigframe</name> <operator pos:start="27:37" pos:end="27:37">*</operator><operator pos:start="27:38" pos:end="27:38">)</operator><name pos:start="27:39" pos:end="27:51"><name pos:start="27:39" pos:end="27:41">env</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:47">regs</name><index pos:start="27:48" pos:end="27:51">[<expr pos:start="27:49" pos:end="27:50"><literal type="number" pos:start="27:49" pos:end="27:50">13</literal></expr>]</index></name></expr>;</expr_stmt>



<cpp:if pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:3">if</cpp:directive> <expr pos:start="31:5" pos:end="31:5"><literal type="number" pos:start="31:5" pos:end="31:5">0</literal></expr></cpp:if>

	if (verify_area(VERIFY_READ, frame, sizeof (*frame)))

		goto badframe;

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="39:9" pos:end="39:65"><expr pos:start="39:9" pos:end="39:64"><call pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:29">target_to_host_sigset</name><argument_list pos:start="39:30" pos:end="39:64">(<argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><operator pos:start="39:31" pos:end="39:31">&amp;</operator><name pos:start="39:32" pos:end="39:39">host_set</name></expr></argument>, <argument pos:start="39:42" pos:end="39:63"><expr pos:start="39:42" pos:end="39:63"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:63"><name pos:start="39:43" pos:end="39:47">frame</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:51">uc</name><operator pos:start="39:52" pos:end="39:52">.</operator><name pos:start="39:53" pos:end="39:63">tuc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:50"><expr pos:start="41:9" pos:end="41:49"><call pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:19">sigprocmask</name><argument_list pos:start="41:20" pos:end="41:49">(<argument pos:start="41:21" pos:end="41:31"><expr pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="41:34" pos:end="41:42"><expr pos:start="41:34" pos:end="41:42"><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:42">host_set</name></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><name pos:start="41:45" pos:end="41:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="45:9" pos:end="47:30"><if pos:start="45:9" pos:end="47:30">if <condition pos:start="45:12" pos:end="45:61">(<expr pos:start="45:13" pos:end="45:60"><call pos:start="45:13" pos:end="45:60"><name pos:start="45:13" pos:end="45:30">restore_sigcontext</name><argument_list pos:start="45:31" pos:end="45:60">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">env</name></expr></argument>, <argument pos:start="45:37" pos:end="45:59"><expr pos:start="45:37" pos:end="45:59"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:59"><name pos:start="45:38" pos:end="45:42">frame</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:46">uc</name><operator pos:start="45:47" pos:end="45:47">.</operator><name pos:start="45:48" pos:end="45:59">tuc_mcontext</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:30"><block_content pos:start="47:17" pos:end="47:30">

		<goto pos:start="47:17" pos:end="47:30">goto <name pos:start="47:22" pos:end="47:29">badframe</name>;</goto></block_content></block></if></if_stmt>



	<if_stmt pos:start="51:9" pos:end="66:0"><if pos:start="51:9" pos:end="66:0">if <condition pos:start="51:12" pos:end="51:95">(<expr pos:start="51:13" pos:end="51:94"><call pos:start="51:13" pos:end="51:83"><name pos:start="51:13" pos:end="51:26">do_sigaltstack</name><argument_list pos:start="51:27" pos:end="51:83">(<argument pos:start="51:28" pos:end="51:52"><expr pos:start="51:28" pos:end="51:52"><call pos:start="51:28" pos:end="51:52"><name pos:start="51:28" pos:end="51:30">h2g</name><argument_list pos:start="51:31" pos:end="51:52">(<argument pos:start="51:32" pos:end="51:51"><expr pos:start="51:32" pos:end="51:51"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:51"><name pos:start="51:33" pos:end="51:37">frame</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:41">uc</name><operator pos:start="51:42" pos:end="51:42">.</operator><name pos:start="51:43" pos:end="51:51">tuc_stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">0</literal></expr></argument>, <argument pos:start="51:58" pos:end="51:82"><expr pos:start="51:58" pos:end="51:82"><call pos:start="51:58" pos:end="51:82"><name pos:start="51:58" pos:end="51:77">get_sp_from_cpustate</name><argument_list pos:start="51:78" pos:end="51:82">(<argument pos:start="51:79" pos:end="51:81"><expr pos:start="51:79" pos:end="51:81"><name pos:start="51:79" pos:end="51:81">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="51:85" pos:end="51:86">==</operator> <operator pos:start="51:88" pos:end="51:88">-</operator><name pos:start="51:89" pos:end="51:94">EFAULT</name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="66:0"><block_content pos:start="53:17" pos:end="66:0">

		<goto pos:start="53:17" pos:end="66:0">goto <name pos:start="53:22" pos:end="53:29">badframe</name>;</goto></block_content></block></if></if_stmt>



<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

	<comment type="block" pos:start="59:9" pos:end="59:51">/* Send SIGTRAP if we're single-stepping */</comment>

	if (ptrace_cancel_bpt(current))

		send_sig(SIGTRAP, current, 1);

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

	<return pos:start="67:9" pos:end="67:28">return <expr pos:start="67:16" pos:end="67:27"><name pos:start="67:16" pos:end="67:27"><name pos:start="67:16" pos:end="67:18">env</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:24">regs</name><index pos:start="67:25" pos:end="67:27">[<expr pos:start="67:26" pos:end="67:26"><literal type="number" pos:start="67:26" pos:end="67:26">0</literal></expr>]</index></name></expr>;</return>



<label pos:start="71:1" pos:end="71:9"><name pos:start="71:1" pos:end="71:8">badframe</name>:</label>

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><call pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:17">force_sig</name><argument_list pos:start="73:18" pos:end="73:42">(<argument pos:start="73:19" pos:end="73:25"><expr pos:start="73:19" pos:end="73:25"><name pos:start="73:19" pos:end="73:25">SIGSEGV</name></expr></argument> <comment type="block" pos:start="73:27" pos:end="73:41">/* , current */</comment>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="75:9" pos:end="75:17">return <expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
