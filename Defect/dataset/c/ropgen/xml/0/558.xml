<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/558.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_ld</name><parameter_list pos:start="1:28" pos:end="3:55">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">TCGReg</name></type> <name pos:start="1:51" pos:end="1:54">data</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:67"><decl pos:start="1:57" pos:end="1:67"><type pos:start="1:57" pos:end="1:67"><name pos:start="1:57" pos:end="1:62">TCGReg</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:39">TCGMemOpIdx</name></type> <name pos:start="3:41" pos:end="3:42">oi</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:54"><decl pos:start="3:45" pos:end="3:54"><type pos:start="3:45" pos:end="3:54"><name pos:start="3:45" pos:end="3:48">bool</name></type> <name pos:start="3:50" pos:end="3:54">is_64</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="160:0">

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">TCGMemOp</name></type> <name pos:start="7:14" pos:end="7:18">memop</name> <init pos:start="7:20" pos:end="7:34">= <expr pos:start="7:22" pos:end="7:34"><call pos:start="7:22" pos:end="7:34"><name pos:start="7:22" pos:end="7:30">get_memop</name><argument_list pos:start="7:31" pos:end="7:34">(<argument pos:start="7:32" pos:end="7:33"><expr pos:start="7:32" pos:end="7:33"><name pos:start="7:32" pos:end="7:33">oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="9:1" pos:end="9:21">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:17">memi</name> <init pos:start="11:19" pos:end="11:34">= <expr pos:start="11:21" pos:end="11:34"><call pos:start="11:21" pos:end="11:34"><name pos:start="11:21" pos:end="11:30">get_mmuidx</name><argument_list pos:start="11:31" pos:end="11:34">(<argument pos:start="11:32" pos:end="11:33"><expr pos:start="11:32" pos:end="11:33"><name pos:start="11:32" pos:end="11:33">oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">TCGReg</name></type> <name pos:start="13:12" pos:end="13:16">addrz</name></decl>, <decl pos:start="13:19" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:19" pos:end="13:23">param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">tcg_insn_unit</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:23">func</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">tcg_insn_unit</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:28">label_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:63"><expr pos:start="21:5" pos:end="23:62"><name pos:start="21:5" pos:end="21:9">addrz</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="23:62"><name pos:start="21:13" pos:end="21:28">tcg_out_tlb_load</name><argument_list pos:start="21:29" pos:end="23:62">(<argument pos:start="21:30" pos:end="21:30"><expr pos:start="21:30" pos:end="21:30"><name pos:start="21:30" pos:end="21:30">s</name></expr></argument>, <argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">addr</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">memi</name></expr></argument>, <argument pos:start="21:45" pos:end="21:59"><expr pos:start="21:45" pos:end="21:59"><name pos:start="21:45" pos:end="21:49">memop</name> <operator pos:start="21:51" pos:end="21:51">&amp;</operator> <name pos:start="21:53" pos:end="21:59">MO_SIZE</name></expr></argument>,

                             <argument pos:start="23:30" pos:end="23:61"><expr pos:start="23:30" pos:end="23:61"><call pos:start="23:30" pos:end="23:61"><name pos:start="23:30" pos:end="23:37">offsetof</name><argument_list pos:start="23:38" pos:end="23:61">(<argument pos:start="23:39" pos:end="23:49"><expr pos:start="23:39" pos:end="23:49"><name pos:start="23:39" pos:end="23:49">CPUTLBEntry</name></expr></argument>, <argument pos:start="23:52" pos:end="23:60"><expr pos:start="23:52" pos:end="23:60"><name pos:start="23:52" pos:end="23:60">addr_read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="31:34">/* The fast path is exactly one insn.  Thus we can perform the

       entire TLB Hit in the (annulled) delay slot of the branch

       over the TLB Miss case.  */</comment>



    <comment type="block" pos:start="35:5" pos:end="35:34">/* beq,a,pt %[xi]cc, label0 */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:13">label_ptr</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:27">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:71"><expr pos:start="39:5" pos:end="41:70"><call pos:start="39:5" pos:end="41:70"><name pos:start="39:5" pos:end="39:17">tcg_out_bpcc0</name><argument_list pos:start="39:18" pos:end="41:70">(<argument pos:start="39:19" pos:end="39:19"><expr pos:start="39:19" pos:end="39:19"><name pos:start="39:19" pos:end="39:19">s</name></expr></argument>, <argument pos:start="39:22" pos:end="39:27"><expr pos:start="39:22" pos:end="39:27"><name pos:start="39:22" pos:end="39:27">COND_E</name></expr></argument>, <argument pos:start="39:30" pos:end="41:66"><expr pos:start="39:30" pos:end="41:66"><name pos:start="39:30" pos:end="39:35">BPCC_A</name> <operator pos:start="39:37" pos:end="39:37">|</operator> <name pos:start="39:39" pos:end="39:45">BPCC_PT</name>

                  <operator pos:start="41:19" pos:end="41:19">|</operator> <operator pos:start="41:21" pos:end="41:21">(</operator><ternary pos:start="41:22" pos:end="41:65"><condition pos:start="41:22" pos:end="41:45"><expr pos:start="41:22" pos:end="41:43"><name pos:start="41:22" pos:end="41:37">TARGET_LONG_BITS</name> <operator pos:start="41:39" pos:end="41:40">==</operator> <literal type="number" pos:start="41:42" pos:end="41:43">64</literal></expr> ?</condition><then pos:start="41:47" pos:end="41:54"> <expr pos:start="41:47" pos:end="41:54"><name pos:start="41:47" pos:end="41:54">BPCC_XCC</name></expr> </then><else pos:start="41:56" pos:end="41:65">: <expr pos:start="41:58" pos:end="41:65"><name pos:start="41:58" pos:end="41:65">BPCC_ICC</name></expr></else></ternary><operator pos:start="41:66" pos:end="41:66">)</operator></expr></argument>, <argument pos:start="41:69" pos:end="41:69"><expr pos:start="41:69" pos:end="41:69"><literal type="number" pos:start="41:69" pos:end="41:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:20">/* delay slot */</comment>

    <expr_stmt pos:start="45:5" pos:end="47:64"><expr pos:start="45:5" pos:end="47:63"><call pos:start="45:5" pos:end="47:63"><name pos:start="45:5" pos:end="45:19">tcg_out_ldst_rr</name><argument_list pos:start="45:20" pos:end="47:63">(<argument pos:start="45:21" pos:end="45:21"><expr pos:start="45:21" pos:end="45:21"><name pos:start="45:21" pos:end="45:21">s</name></expr></argument>, <argument pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">data</name></expr></argument>, <argument pos:start="45:30" pos:end="45:34"><expr pos:start="45:30" pos:end="45:34"><name pos:start="45:30" pos:end="45:34">addrz</name></expr></argument>, <argument pos:start="45:37" pos:end="45:46"><expr pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:46">TCG_REG_O1</name></expr></argument>,

                    <argument pos:start="47:21" pos:end="47:62"><expr pos:start="47:21" pos:end="47:62"><name pos:start="47:21" pos:end="47:62"><name pos:start="47:21" pos:end="47:31">qemu_ld_opc</name><index pos:start="47:32" pos:end="47:62">[<expr pos:start="47:33" pos:end="47:61"><name pos:start="47:33" pos:end="47:37">memop</name> <operator pos:start="47:39" pos:end="47:39">&amp;</operator> <operator pos:start="47:41" pos:end="47:41">(</operator><name pos:start="47:42" pos:end="47:49">MO_BSWAP</name> <operator pos:start="47:51" pos:end="47:51">|</operator> <name pos:start="47:53" pos:end="47:60">MO_SSIZE</name><operator pos:start="47:61" pos:end="47:61">)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:20">/* TLB Miss.  */</comment>



    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:9">param</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:22">TCG_REG_O1</name></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:43">(<expr pos:start="57:9" pos:end="57:42"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:16">SPARC64</name> <operator pos:start="57:18" pos:end="57:19">&amp;&amp;</operator> <name pos:start="57:21" pos:end="57:36">TARGET_LONG_BITS</name> <operator pos:start="57:38" pos:end="57:39">==</operator> <literal type="number" pos:start="57:41" pos:end="57:42">64</literal></expr>)</condition> <block pos:start="57:45" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:16">

        <comment type="block" pos:start="59:9" pos:end="59:79">/* Skip the high-part; we'll perform the extract in the trampoline.  */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:13">param</name><operator pos:start="61:14" pos:end="61:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:48"><expr pos:start="65:5" pos:end="65:47"><call pos:start="65:5" pos:end="65:47"><name pos:start="65:5" pos:end="65:15">tcg_out_mov</name><argument_list pos:start="65:16" pos:end="65:47">(<argument pos:start="65:17" pos:end="65:17"><expr pos:start="65:17" pos:end="65:17"><name pos:start="65:17" pos:end="65:17">s</name></expr></argument>, <argument pos:start="65:20" pos:end="65:31"><expr pos:start="65:20" pos:end="65:31"><name pos:start="65:20" pos:end="65:31">TCG_TYPE_REG</name></expr></argument>, <argument pos:start="65:34" pos:end="65:40"><expr pos:start="65:34" pos:end="65:40"><name pos:start="65:34" pos:end="65:38">param</name><operator pos:start="65:39" pos:end="65:40">++</operator></expr></argument>, <argument pos:start="65:43" pos:end="65:46"><expr pos:start="65:43" pos:end="65:46"><name pos:start="65:43" pos:end="65:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="71:50">/* We use the helpers to extend SB and SW data, leaving the case

       of SL needing explicit extending below.  */</comment>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:36">(<expr pos:start="73:9" pos:end="73:35"><operator pos:start="73:9" pos:end="73:9">(</operator><name pos:start="73:10" pos:end="73:14">memop</name> <operator pos:start="73:16" pos:end="73:16">&amp;</operator> <name pos:start="73:18" pos:end="73:25">MO_SSIZE</name><operator pos:start="73:26" pos:end="73:26">)</operator> <operator pos:start="73:28" pos:end="73:29">==</operator> <name pos:start="73:31" pos:end="73:35">MO_SL</name></expr>)</condition> <block pos:start="73:38" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:64">

        <expr_stmt pos:start="75:9" pos:end="75:64"><expr pos:start="75:9" pos:end="75:63"><name pos:start="75:9" pos:end="75:12">func</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <name pos:start="75:16" pos:end="75:63"><name pos:start="75:16" pos:end="75:33">qemu_ld_trampoline</name><index pos:start="75:34" pos:end="75:63">[<expr pos:start="75:35" pos:end="75:62"><name pos:start="75:35" pos:end="75:39">memop</name> <operator pos:start="75:41" pos:end="75:41">&amp;</operator> <operator pos:start="75:43" pos:end="75:43">(</operator><name pos:start="75:44" pos:end="75:51">MO_BSWAP</name> <operator pos:start="75:53" pos:end="75:53">|</operator> <name pos:start="75:55" pos:end="75:61">MO_SIZE</name><operator pos:start="75:62" pos:end="75:62">)</operator></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="81:5">else <block pos:start="77:12" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:65">

        <expr_stmt pos:start="79:9" pos:end="79:65"><expr pos:start="79:9" pos:end="79:64"><name pos:start="79:9" pos:end="79:12">func</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:64"><name pos:start="79:16" pos:end="79:33">qemu_ld_trampoline</name><index pos:start="79:34" pos:end="79:64">[<expr pos:start="79:35" pos:end="79:63"><name pos:start="79:35" pos:end="79:39">memop</name> <operator pos:start="79:41" pos:end="79:41">&amp;</operator> <operator pos:start="79:43" pos:end="79:43">(</operator><name pos:start="79:44" pos:end="79:51">MO_BSWAP</name> <operator pos:start="79:53" pos:end="79:53">|</operator> <name pos:start="79:55" pos:end="79:62">MO_SSIZE</name><operator pos:start="79:63" pos:end="79:63">)</operator></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:25"><expr pos:start="83:5" pos:end="83:24"><call pos:start="83:5" pos:end="83:24"><name pos:start="83:5" pos:end="83:10">assert</name><argument_list pos:start="83:11" pos:end="83:24">(<argument pos:start="83:12" pos:end="83:23"><expr pos:start="83:12" pos:end="83:23"><name pos:start="83:12" pos:end="83:15">func</name> <operator pos:start="83:17" pos:end="83:18">!=</operator> <name pos:start="83:20" pos:end="83:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:34"><expr pos:start="85:5" pos:end="85:33"><call pos:start="85:5" pos:end="85:33"><name pos:start="85:5" pos:end="85:24">tcg_out_call_nodelay</name><argument_list pos:start="85:25" pos:end="85:33">(<argument pos:start="85:26" pos:end="85:26"><expr pos:start="85:26" pos:end="85:26"><name pos:start="85:26" pos:end="85:26">s</name></expr></argument>, <argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="87:5" pos:end="87:20">/* delay slot */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:45"><expr pos:start="89:5" pos:end="89:44"><call pos:start="89:5" pos:end="89:44"><name pos:start="89:5" pos:end="89:16">tcg_out_movi</name><argument_list pos:start="89:17" pos:end="89:44">(<argument pos:start="89:18" pos:end="89:18"><expr pos:start="89:18" pos:end="89:18"><name pos:start="89:18" pos:end="89:18">s</name></expr></argument>, <argument pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="89:35" pos:end="89:39"><expr pos:start="89:35" pos:end="89:39"><name pos:start="89:35" pos:end="89:39">param</name></expr></argument>, <argument pos:start="89:42" pos:end="89:43"><expr pos:start="89:42" pos:end="89:43"><name pos:start="89:42" pos:end="89:43">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="95:52">/* Recall that all of the helpers return 64-bit results.

       Which complicates things for sparcv8plus.  */</comment>

    <if_stmt pos:start="97:5" pos:end="137:5"><if pos:start="97:5" pos:end="111:5">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:15">SPARC64</name></expr>)</condition> <block pos:start="97:18" pos:end="111:5">{<block_content pos:start="101:9" pos:end="109:9">

        <comment type="block" pos:start="99:9" pos:end="99:78">/* We let the helper sign-extend SB and SW, but leave SL for here.  */</comment>

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:49">(<expr pos:start="101:13" pos:end="101:48"><name pos:start="101:13" pos:end="101:17">is_64</name> <operator pos:start="101:19" pos:end="101:20">&amp;&amp;</operator> <operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:27">memop</name> <operator pos:start="101:29" pos:end="101:29">&amp;</operator> <name pos:start="101:31" pos:end="101:38">MO_SSIZE</name><operator pos:start="101:39" pos:end="101:39">)</operator> <operator pos:start="101:41" pos:end="101:42">==</operator> <name pos:start="101:44" pos:end="101:48">MO_SL</name></expr>)</condition> <block pos:start="101:51" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:62">

            <expr_stmt pos:start="103:13" pos:end="103:62"><expr pos:start="103:13" pos:end="103:61"><call pos:start="103:13" pos:end="103:61"><name pos:start="103:13" pos:end="103:26">tcg_out_arithi</name><argument_list pos:start="103:27" pos:end="103:61">(<argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><name pos:start="103:28" pos:end="103:28">s</name></expr></argument>, <argument pos:start="103:31" pos:end="103:34"><expr pos:start="103:31" pos:end="103:34"><name pos:start="103:31" pos:end="103:34">data</name></expr></argument>, <argument pos:start="103:37" pos:end="103:46"><expr pos:start="103:37" pos:end="103:46"><name pos:start="103:37" pos:end="103:46">TCG_REG_O0</name></expr></argument>, <argument pos:start="103:49" pos:end="103:49"><expr pos:start="103:49" pos:end="103:49"><literal type="number" pos:start="103:49" pos:end="103:49">0</literal></expr></argument>, <argument pos:start="103:52" pos:end="103:60"><expr pos:start="103:52" pos:end="103:60"><name pos:start="103:52" pos:end="103:60">SHIFT_SRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="109:9">else <block pos:start="105:16" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:59">

            <expr_stmt pos:start="107:13" pos:end="107:59"><expr pos:start="107:13" pos:end="107:58"><call pos:start="107:13" pos:end="107:58"><name pos:start="107:13" pos:end="107:23">tcg_out_mov</name><argument_list pos:start="107:24" pos:end="107:58">(<argument pos:start="107:25" pos:end="107:25"><expr pos:start="107:25" pos:end="107:25"><name pos:start="107:25" pos:end="107:25">s</name></expr></argument>, <argument pos:start="107:28" pos:end="107:39"><expr pos:start="107:28" pos:end="107:39"><name pos:start="107:28" pos:end="107:39">TCG_TYPE_REG</name></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><name pos:start="107:42" pos:end="107:45">data</name></expr></argument>, <argument pos:start="107:48" pos:end="107:57"><expr pos:start="107:48" pos:end="107:57"><name pos:start="107:48" pos:end="107:57">TCG_REG_O0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="137:5">else <block pos:start="111:12" pos:end="137:5">{<block_content pos:start="113:9" pos:end="135:9">

        <if_stmt pos:start="113:9" pos:end="135:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:39">(<expr pos:start="113:13" pos:end="113:38"><operator pos:start="113:13" pos:end="113:13">(</operator><name pos:start="113:14" pos:end="113:18">memop</name> <operator pos:start="113:20" pos:end="113:20">&amp;</operator> <name pos:start="113:22" pos:end="113:28">MO_SIZE</name><operator pos:start="113:29" pos:end="113:29">)</operator> <operator pos:start="113:31" pos:end="113:32">==</operator> <name pos:start="113:34" pos:end="113:38">MO_64</name></expr>)</condition> <block pos:start="113:41" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:69">

            <expr_stmt pos:start="115:13" pos:end="115:70"><expr pos:start="115:13" pos:end="115:69"><call pos:start="115:13" pos:end="115:69"><name pos:start="115:13" pos:end="115:26">tcg_out_arithi</name><argument_list pos:start="115:27" pos:end="115:69">(<argument pos:start="115:28" pos:end="115:28"><expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">s</name></expr></argument>, <argument pos:start="115:31" pos:end="115:40"><expr pos:start="115:31" pos:end="115:40"><name pos:start="115:31" pos:end="115:40">TCG_REG_O0</name></expr></argument>, <argument pos:start="115:43" pos:end="115:52"><expr pos:start="115:43" pos:end="115:52"><name pos:start="115:43" pos:end="115:52">TCG_REG_O0</name></expr></argument>, <argument pos:start="115:55" pos:end="115:56"><expr pos:start="115:55" pos:end="115:56"><literal type="number" pos:start="115:55" pos:end="115:56">32</literal></expr></argument>, <argument pos:start="115:59" pos:end="115:68"><expr pos:start="115:59" pos:end="115:68"><name pos:start="115:59" pos:end="115:68">SHIFT_SLLX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:68"><expr pos:start="117:13" pos:end="117:67"><call pos:start="117:13" pos:end="117:67"><name pos:start="117:13" pos:end="117:26">tcg_out_arithi</name><argument_list pos:start="117:27" pos:end="117:67">(<argument pos:start="117:28" pos:end="117:28"><expr pos:start="117:28" pos:end="117:28"><name pos:start="117:28" pos:end="117:28">s</name></expr></argument>, <argument pos:start="117:31" pos:end="117:40"><expr pos:start="117:31" pos:end="117:40"><name pos:start="117:31" pos:end="117:40">TCG_REG_O1</name></expr></argument>, <argument pos:start="117:43" pos:end="117:52"><expr pos:start="117:43" pos:end="117:52"><name pos:start="117:43" pos:end="117:52">TCG_REG_O1</name></expr></argument>, <argument pos:start="117:55" pos:end="117:55"><expr pos:start="117:55" pos:end="117:55"><literal type="number" pos:start="117:55" pos:end="117:55">0</literal></expr></argument>, <argument pos:start="117:58" pos:end="117:66"><expr pos:start="117:58" pos:end="117:66"><name pos:start="117:58" pos:end="117:66">SHIFT_SRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:69"><expr pos:start="119:13" pos:end="119:68"><call pos:start="119:13" pos:end="119:68"><name pos:start="119:13" pos:end="119:25">tcg_out_arith</name><argument_list pos:start="119:26" pos:end="119:68">(<argument pos:start="119:27" pos:end="119:27"><expr pos:start="119:27" pos:end="119:27"><name pos:start="119:27" pos:end="119:27">s</name></expr></argument>, <argument pos:start="119:30" pos:end="119:33"><expr pos:start="119:30" pos:end="119:33"><name pos:start="119:30" pos:end="119:33">data</name></expr></argument>, <argument pos:start="119:36" pos:end="119:45"><expr pos:start="119:36" pos:end="119:45"><name pos:start="119:36" pos:end="119:45">TCG_REG_O0</name></expr></argument>, <argument pos:start="119:48" pos:end="119:57"><expr pos:start="119:48" pos:end="119:57"><name pos:start="119:48" pos:end="119:57">TCG_REG_O1</name></expr></argument>, <argument pos:start="119:60" pos:end="119:67"><expr pos:start="119:60" pos:end="119:67"><name pos:start="119:60" pos:end="119:67">ARITH_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="131:9">else if <condition pos:start="121:19" pos:end="121:25">(<expr pos:start="121:20" pos:end="121:24"><name pos:start="121:20" pos:end="121:24">is_64</name></expr>)</condition> <block pos:start="121:27" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:68">

            <comment type="block" pos:start="123:13" pos:end="125:63">/* Re-extend from 32-bit rather than reassembling when we

               know the high register must be an extension.  */</comment>

            <expr_stmt pos:start="127:13" pos:end="129:68"><expr pos:start="127:13" pos:end="129:67"><call pos:start="127:13" pos:end="129:67"><name pos:start="127:13" pos:end="127:26">tcg_out_arithi</name><argument_list pos:start="127:27" pos:end="129:67">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">s</name></expr></argument>, <argument pos:start="127:31" pos:end="127:34"><expr pos:start="127:31" pos:end="127:34"><name pos:start="127:31" pos:end="127:34">data</name></expr></argument>, <argument pos:start="127:37" pos:end="127:46"><expr pos:start="127:37" pos:end="127:46"><name pos:start="127:37" pos:end="127:46">TCG_REG_O1</name></expr></argument>, <argument pos:start="127:49" pos:end="127:49"><expr pos:start="127:49" pos:end="127:49"><literal type="number" pos:start="127:49" pos:end="127:49">0</literal></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:66"><expr pos:start="129:28" pos:end="129:66"><ternary pos:start="129:28" pos:end="129:66"><condition pos:start="129:28" pos:end="129:44"><expr pos:start="129:28" pos:end="129:42"><name pos:start="129:28" pos:end="129:32">memop</name> <operator pos:start="129:34" pos:end="129:34">&amp;</operator> <name pos:start="129:36" pos:end="129:42">MO_SIGN</name></expr> ?</condition><then pos:start="129:46" pos:end="129:54"> <expr pos:start="129:46" pos:end="129:54"><name pos:start="129:46" pos:end="129:54">SHIFT_SRA</name></expr> </then><else pos:start="129:56" pos:end="129:66">: <expr pos:start="129:58" pos:end="129:66"><name pos:start="129:58" pos:end="129:66">SHIFT_SRL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="131:11" pos:end="135:9">else <block pos:start="131:16" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:59">

            <expr_stmt pos:start="133:13" pos:end="133:59"><expr pos:start="133:13" pos:end="133:58"><call pos:start="133:13" pos:end="133:58"><name pos:start="133:13" pos:end="133:23">tcg_out_mov</name><argument_list pos:start="133:24" pos:end="133:58">(<argument pos:start="133:25" pos:end="133:25"><expr pos:start="133:25" pos:end="133:25"><name pos:start="133:25" pos:end="133:25">s</name></expr></argument>, <argument pos:start="133:28" pos:end="133:39"><expr pos:start="133:28" pos:end="133:39"><name pos:start="133:28" pos:end="133:39">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="133:42" pos:end="133:45"><expr pos:start="133:42" pos:end="133:45"><name pos:start="133:42" pos:end="133:45">data</name></expr></argument>, <argument pos:start="133:48" pos:end="133:57"><expr pos:start="133:48" pos:end="133:57"><name pos:start="133:48" pos:end="133:57">TCG_REG_O1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="144:0"><expr pos:start="141:5" pos:end="141:71"><operator pos:start="141:5" pos:end="141:5">*</operator><name pos:start="141:6" pos:end="141:14">label_ptr</name> <operator pos:start="141:16" pos:end="141:17">|=</operator> <call pos:start="141:19" pos:end="141:71"><name pos:start="141:19" pos:end="141:28">INSN_OFF19</name><argument_list pos:start="141:29" pos:end="141:71">(<argument pos:start="141:30" pos:end="141:70"><expr pos:start="141:30" pos:end="141:70"><call pos:start="141:30" pos:end="141:70"><name pos:start="141:30" pos:end="141:46">tcg_ptr_byte_diff</name><argument_list pos:start="141:47" pos:end="141:70">(<argument pos:start="141:48" pos:end="141:58"><expr pos:start="141:48" pos:end="141:58"><name pos:start="141:48" pos:end="141:58"><name pos:start="141:48" pos:end="141:48">s</name><operator pos:start="141:49" pos:end="141:50">-&gt;</operator><name pos:start="141:51" pos:end="141:58">code_ptr</name></name></expr></argument>, <argument pos:start="141:61" pos:end="141:69"><expr pos:start="141:61" pos:end="141:69"><name pos:start="141:61" pos:end="141:69">label_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="143:1" pos:end="143:5">#<cpp:directive pos:start="143:2" pos:end="143:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:42">(<expr pos:start="145:9" pos:end="145:41"><name pos:start="145:9" pos:end="145:15">SPARC64</name> <operator pos:start="145:17" pos:end="145:18">&amp;&amp;</operator> <name pos:start="145:20" pos:end="145:35">TARGET_LONG_BITS</name> <operator pos:start="145:37" pos:end="145:38">==</operator> <literal type="number" pos:start="145:40" pos:end="145:41">32</literal></expr>)</condition> <block pos:start="145:44" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:26">

        <expr_stmt pos:start="147:9" pos:end="147:58"><expr pos:start="147:9" pos:end="147:57"><call pos:start="147:9" pos:end="147:57"><name pos:start="147:9" pos:end="147:22">tcg_out_arithi</name><argument_list pos:start="147:23" pos:end="147:57">(<argument pos:start="147:24" pos:end="147:24"><expr pos:start="147:24" pos:end="147:24"><name pos:start="147:24" pos:end="147:24">s</name></expr></argument>, <argument pos:start="147:27" pos:end="147:36"><expr pos:start="147:27" pos:end="147:36"><name pos:start="147:27" pos:end="147:36">TCG_REG_T1</name></expr></argument>, <argument pos:start="147:39" pos:end="147:42"><expr pos:start="147:39" pos:end="147:42"><name pos:start="147:39" pos:end="147:42">addr</name></expr></argument>, <argument pos:start="147:45" pos:end="147:45"><expr pos:start="147:45" pos:end="147:45"><literal type="number" pos:start="147:45" pos:end="147:45">0</literal></expr></argument>, <argument pos:start="147:48" pos:end="147:56"><expr pos:start="147:48" pos:end="147:56"><name pos:start="147:48" pos:end="147:56">SHIFT_SRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:12">addr</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <name pos:start="149:16" pos:end="149:25">TCG_REG_T1</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="160:0"><expr pos:start="153:5" pos:end="157:63"><call pos:start="153:5" pos:end="157:63"><name pos:start="153:5" pos:end="153:19">tcg_out_ldst_rr</name><argument_list pos:start="153:20" pos:end="157:63">(<argument pos:start="153:21" pos:end="153:21"><expr pos:start="153:21" pos:end="153:21"><name pos:start="153:21" pos:end="153:21">s</name></expr></argument>, <argument pos:start="153:24" pos:end="153:27"><expr pos:start="153:24" pos:end="153:27"><name pos:start="153:24" pos:end="153:27">data</name></expr></argument>, <argument pos:start="153:30" pos:end="153:33"><expr pos:start="153:30" pos:end="153:33"><name pos:start="153:30" pos:end="153:33">addr</name></expr></argument>,

                    <argument pos:start="155:21" pos:end="155:66"><expr pos:start="155:21" pos:end="155:66"><operator pos:start="155:21" pos:end="155:21">(</operator><ternary pos:start="155:22" pos:end="155:65"><condition pos:start="155:22" pos:end="155:33"><expr pos:start="155:22" pos:end="155:31"><name pos:start="155:22" pos:end="155:31">guest_base</name></expr> ?</condition><then pos:start="155:35" pos:end="155:52"> <expr pos:start="155:35" pos:end="155:52"><name pos:start="155:35" pos:end="155:52">TCG_GUEST_BASE_REG</name></expr> </then><else pos:start="155:54" pos:end="155:65">: <expr pos:start="155:56" pos:end="155:65"><name pos:start="155:56" pos:end="155:65">TCG_REG_G0</name></expr></else></ternary><operator pos:start="155:66" pos:end="155:66">)</operator></expr></argument>,

                    <argument pos:start="157:21" pos:end="157:62"><expr pos:start="157:21" pos:end="157:62"><name pos:start="157:21" pos:end="157:62"><name pos:start="157:21" pos:end="157:31">qemu_ld_opc</name><index pos:start="157:32" pos:end="157:62">[<expr pos:start="157:33" pos:end="157:61"><name pos:start="157:33" pos:end="157:37">memop</name> <operator pos:start="157:39" pos:end="157:39">&amp;</operator> <operator pos:start="157:41" pos:end="157:41">(</operator><name pos:start="157:42" pos:end="157:49">MO_BSWAP</name> <operator pos:start="157:51" pos:end="157:51">|</operator> <name pos:start="157:53" pos:end="157:60">MO_SSIZE</name><operator pos:start="157:61" pos:end="157:61">)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="159:8" pos:end="159:27">/* CONFIG_SOFTMMU */</comment>

</block_content>}</block></function>
</unit>
