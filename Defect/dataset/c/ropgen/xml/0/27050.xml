<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27050.c" pos:tabs="8"><function pos:start="1:1" pos:end="897:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_mips16_opc</name> <parameter_list pos:start="1:30" pos:end="3:45">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:62"><decl pos:start="1:46" pos:end="1:62"><type pos:start="1:46" pos:end="1:62"><name pos:start="1:46" pos:end="1:57">DisasContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">ctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">is_branch</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="897:1">{<block_content pos:start="7:5" pos:end="895:19">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rx</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">ry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">op</name></decl>, <decl pos:start="11:13" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:19">cnvt_op</name></decl>, <decl pos:start="11:22" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:24">op1</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:27" pos:end="11:32">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">funct</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">n_bytes</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:6">op</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:21"><name pos:start="19:11" pos:end="19:13">ctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">opcode</name></name> <operator pos:start="19:23" pos:end="19:24">&gt;&gt;</operator> <literal type="number" pos:start="19:26" pos:end="19:27">11</literal><operator pos:start="19:28" pos:end="19:28">)</operator> <operator pos:start="19:30" pos:end="19:30">&amp;</operator> <literal type="number" pos:start="19:32" pos:end="19:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:6">sa</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:21"><name pos:start="21:11" pos:end="21:13">ctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">opcode</name></name> <operator pos:start="21:23" pos:end="21:24">&gt;&gt;</operator> <literal type="number" pos:start="21:26" pos:end="21:26">2</literal><operator pos:start="21:27" pos:end="21:27">)</operator> <operator pos:start="21:29" pos:end="21:29">&amp;</operator> <literal type="number" pos:start="21:31" pos:end="21:33">0x7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:6">sa</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <ternary pos:start="23:10" pos:end="23:25"><condition pos:start="23:10" pos:end="23:18"><expr pos:start="23:10" pos:end="23:16"><name pos:start="23:10" pos:end="23:11">sa</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr> ?</condition><then pos:start="23:20" pos:end="23:20"> <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">8</literal></expr> </then><else pos:start="23:22" pos:end="23:25">: <expr pos:start="23:24" pos:end="23:25"><name pos:start="23:24" pos:end="23:25">sa</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:6">rx</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:39"><name pos:start="25:10" pos:end="25:13">xlat</name><argument_list pos:start="25:14" pos:end="25:39">(<argument pos:start="25:15" pos:end="25:38"><expr pos:start="25:15" pos:end="25:38"><operator pos:start="25:15" pos:end="25:15">(</operator><name pos:start="25:16" pos:end="25:26"><name pos:start="25:16" pos:end="25:18">ctx</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:26">opcode</name></name> <operator pos:start="25:28" pos:end="25:29">&gt;&gt;</operator> <literal type="number" pos:start="25:31" pos:end="25:31">8</literal><operator pos:start="25:32" pos:end="25:32">)</operator> <operator pos:start="25:34" pos:end="25:34">&amp;</operator> <literal type="number" pos:start="25:36" pos:end="25:38">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:11">cnvt_op</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">(</operator><name pos:start="27:16" pos:end="27:26"><name pos:start="27:16" pos:end="27:18">ctx</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:26">opcode</name></name> <operator pos:start="27:28" pos:end="27:29">&gt;&gt;</operator> <literal type="number" pos:start="27:31" pos:end="27:31">5</literal><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:34">&amp;</operator> <literal type="number" pos:start="27:36" pos:end="27:38">0x7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:6">ry</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:39"><name pos:start="29:10" pos:end="29:13">xlat</name><argument_list pos:start="29:14" pos:end="29:39">(<argument pos:start="29:15" pos:end="29:38"><expr pos:start="29:15" pos:end="29:38"><operator pos:start="29:15" pos:end="29:15">(</operator><name pos:start="29:16" pos:end="29:26"><name pos:start="29:16" pos:end="29:18">ctx</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:26">opcode</name></name> <operator pos:start="29:28" pos:end="29:29">&gt;&gt;</operator> <literal type="number" pos:start="29:31" pos:end="29:31">5</literal><operator pos:start="29:32" pos:end="29:32">)</operator> <operator pos:start="29:34" pos:end="29:34">&amp;</operator> <literal type="number" pos:start="29:36" pos:end="29:38">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:7">op1</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <name pos:start="31:11" pos:end="31:16">offset</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:30"><name pos:start="31:20" pos:end="31:22">ctx</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:30">opcode</name></name> <operator pos:start="31:32" pos:end="31:32">&amp;</operator> <literal type="number" pos:start="31:34" pos:end="31:37">0x1f</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:11">n_bytes</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <literal type="number" pos:start="35:15" pos:end="35:15">2</literal></expr>;</expr_stmt>



    <switch pos:start="39:5" pos:end="891:5">switch <condition pos:start="39:12" pos:end="39:15">(<expr pos:start="39:13" pos:end="39:14"><name pos:start="39:13" pos:end="39:14">op</name></expr>)</condition> <block pos:start="39:17" pos:end="891:5">{<block_content pos:start="41:5" pos:end="889:14">

    <case pos:start="41:5" pos:end="41:25">case <expr pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:24">M16_OPC_ADDIUSP</name></expr>:</case>

        <block pos:start="43:9" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:60">

            <decl_stmt pos:start="45:13" pos:end="45:55"><decl pos:start="45:13" pos:end="45:54"><type pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:19">int16_t</name></type> <name pos:start="45:21" pos:end="45:23">imm</name> <init pos:start="45:25" pos:end="45:54">= <expr pos:start="45:27" pos:end="45:54"><operator pos:start="45:27" pos:end="45:27">(</operator><operator pos:start="45:28" pos:end="45:28">(</operator><name pos:start="45:29" pos:end="45:35">uint8_t</name><operator pos:start="45:36" pos:end="45:36">)</operator> <name pos:start="45:38" pos:end="45:48"><name pos:start="45:38" pos:end="45:40">ctx</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:48">opcode</name></name><operator pos:start="45:49" pos:end="45:49">)</operator> <operator pos:start="45:51" pos:end="45:52">&lt;&lt;</operator> <literal type="number" pos:start="45:54" pos:end="45:54">2</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="49:13" pos:end="49:60"><expr pos:start="49:13" pos:end="49:59"><call pos:start="49:13" pos:end="49:59"><name pos:start="49:13" pos:end="49:25">gen_arith_imm</name><argument_list pos:start="49:26" pos:end="49:59">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">env</name></expr></argument>, <argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">ctx</name></expr></argument>, <argument pos:start="49:37" pos:end="49:45"><expr pos:start="49:37" pos:end="49:45"><name pos:start="49:37" pos:end="49:45">OPC_ADDIU</name></expr></argument>, <argument pos:start="49:48" pos:end="49:49"><expr pos:start="49:48" pos:end="49:49"><name pos:start="49:48" pos:end="49:49">rx</name></expr></argument>, <argument pos:start="49:52" pos:end="49:53"><expr pos:start="49:52" pos:end="49:53"><literal type="number" pos:start="49:52" pos:end="49:53">29</literal></expr></argument>, <argument pos:start="49:56" pos:end="49:58"><expr pos:start="49:56" pos:end="49:58"><name pos:start="49:56" pos:end="49:58">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:25">case <expr pos:start="55:10" pos:end="55:24"><name pos:start="55:10" pos:end="55:24">M16_OPC_ADDIUPC</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:65"><expr pos:start="57:9" pos:end="57:64"><call pos:start="57:9" pos:end="57:64"><name pos:start="57:9" pos:end="57:19">gen_addiupc</name><argument_list pos:start="57:20" pos:end="57:64">(<argument pos:start="57:21" pos:end="57:23"><expr pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:23">ctx</name></expr></argument>, <argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">rx</name></expr></argument>, <argument pos:start="57:30" pos:end="57:57"><expr pos:start="57:30" pos:end="57:57"><operator pos:start="57:30" pos:end="57:30">(</operator><operator pos:start="57:31" pos:end="57:31">(</operator><name pos:start="57:32" pos:end="57:38">uint8_t</name><operator pos:start="57:39" pos:end="57:39">)</operator> <name pos:start="57:41" pos:end="57:51"><name pos:start="57:41" pos:end="57:43">ctx</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:51">opcode</name></name><operator pos:start="57:52" pos:end="57:52">)</operator> <operator pos:start="57:54" pos:end="57:55">&lt;&lt;</operator> <literal type="number" pos:start="57:57" pos:end="57:57">2</literal></expr></argument>, <argument pos:start="57:60" pos:end="57:60"><expr pos:start="57:60" pos:end="57:60"><literal type="number" pos:start="57:60" pos:end="57:60">0</literal></expr></argument>, <argument pos:start="57:63" pos:end="57:63"><expr pos:start="57:63" pos:end="57:63"><literal type="number" pos:start="57:63" pos:end="57:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:19">case <expr pos:start="61:10" pos:end="61:18"><name pos:start="61:10" pos:end="61:18">M16_OPC_B</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:14">offset</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:29"><name pos:start="63:19" pos:end="63:21">ctx</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:29">opcode</name></name> <operator pos:start="63:31" pos:end="63:31">&amp;</operator> <literal type="number" pos:start="63:33" pos:end="63:37">0x7ff</literal><operator pos:start="63:38" pos:end="63:38">)</operator> <operator pos:start="63:40" pos:end="63:41">&lt;&lt;</operator> <literal type="number" pos:start="63:43" pos:end="63:43">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:14">offset</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <operator pos:start="65:18" pos:end="65:18">(</operator><name pos:start="65:19" pos:end="65:25">int16_t</name><operator pos:start="65:26" pos:end="65:26">)</operator><operator pos:start="65:27" pos:end="65:27">(</operator><name pos:start="65:28" pos:end="65:33">offset</name> <operator pos:start="65:35" pos:end="65:36">&lt;&lt;</operator> <literal type="number" pos:start="65:38" pos:end="65:38">4</literal><operator pos:start="65:39" pos:end="65:39">)</operator> <operator pos:start="65:41" pos:end="65:42">&gt;&gt;</operator> <literal type="number" pos:start="65:44" pos:end="65:44">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:58"><expr pos:start="67:9" pos:end="67:57"><call pos:start="67:9" pos:end="67:57"><name pos:start="67:9" pos:end="67:26">gen_compute_branch</name><argument_list pos:start="67:27" pos:end="67:57">(<argument pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:30">ctx</name></expr></argument>, <argument pos:start="67:33" pos:end="67:39"><expr pos:start="67:33" pos:end="67:39"><name pos:start="67:33" pos:end="67:39">OPC_BEQ</name></expr></argument>, <argument pos:start="67:42" pos:end="67:42"><expr pos:start="67:42" pos:end="67:42"><literal type="number" pos:start="67:42" pos:end="67:42">2</literal></expr></argument>, <argument pos:start="67:45" pos:end="67:45"><expr pos:start="67:45" pos:end="67:45"><literal type="number" pos:start="67:45" pos:end="67:45">0</literal></expr></argument>, <argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><literal type="number" pos:start="67:48" pos:end="67:48">0</literal></expr></argument>, <argument pos:start="67:51" pos:end="67:56"><expr pos:start="67:51" pos:end="67:56"><name pos:start="67:51" pos:end="67:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="69:9" pos:end="69:68">/* No delay slot, so just process as a normal instruction */</comment>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:21">case <expr pos:start="73:10" pos:end="73:20"><name pos:start="73:10" pos:end="73:20">M16_OPC_JAL</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:14">offset</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:39"><name pos:start="75:18" pos:end="75:26">lduw_code</name><argument_list pos:start="75:27" pos:end="75:39">(<argument pos:start="75:28" pos:end="75:38"><expr pos:start="75:28" pos:end="75:38"><name pos:start="75:28" pos:end="75:34"><name pos:start="75:28" pos:end="75:30">ctx</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:34">pc</name></name> <operator pos:start="75:36" pos:end="75:36">+</operator> <literal type="number" pos:start="75:38" pos:end="75:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="81:33"><expr pos:start="77:9" pos:end="81:32"><name pos:start="77:9" pos:end="77:14">offset</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><operator pos:start="77:19" pos:end="77:19">(</operator><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:23">ctx</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:31">opcode</name></name> <operator pos:start="77:33" pos:end="77:33">&amp;</operator> <literal type="number" pos:start="77:35" pos:end="77:38">0x1f</literal><operator pos:start="77:39" pos:end="77:39">)</operator> <operator pos:start="77:41" pos:end="77:42">&lt;&lt;</operator> <literal type="number" pos:start="77:44" pos:end="77:45">21</literal><operator pos:start="77:46" pos:end="77:46">)</operator>

                  <operator pos:start="79:19" pos:end="79:19">|</operator> <operator pos:start="79:21" pos:end="79:21">(</operator><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:33"><name pos:start="79:23" pos:end="79:25">ctx</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:33">opcode</name></name> <operator pos:start="79:35" pos:end="79:36">&gt;&gt;</operator> <literal type="number" pos:start="79:38" pos:end="79:38">5</literal><operator pos:start="79:39" pos:end="79:39">)</operator> <operator pos:start="79:41" pos:end="79:41">&amp;</operator> <literal type="number" pos:start="79:43" pos:end="79:46">0x1f</literal><operator pos:start="79:47" pos:end="79:47">)</operator> <operator pos:start="79:49" pos:end="79:50">&lt;&lt;</operator> <literal type="number" pos:start="79:52" pos:end="79:53">16</literal>

                  <operator pos:start="81:19" pos:end="81:19">|</operator> <name pos:start="81:21" pos:end="81:26">offset</name><operator pos:start="81:27" pos:end="81:27">)</operator> <operator pos:start="81:29" pos:end="81:30">&lt;&lt;</operator> <literal type="number" pos:start="81:32" pos:end="81:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:62"><expr pos:start="83:9" pos:end="83:61"><name pos:start="83:9" pos:end="83:10">op</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <ternary pos:start="83:14" pos:end="83:61"><condition pos:start="83:14" pos:end="83:42"><expr pos:start="83:14" pos:end="83:40"><operator pos:start="83:14" pos:end="83:14">(</operator><operator pos:start="83:15" pos:end="83:15">(</operator><name pos:start="83:16" pos:end="83:26"><name pos:start="83:16" pos:end="83:18">ctx</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:26">opcode</name></name> <operator pos:start="83:28" pos:end="83:29">&gt;&gt;</operator> <literal type="number" pos:start="83:31" pos:end="83:32">10</literal><operator pos:start="83:33" pos:end="83:33">)</operator> <operator pos:start="83:35" pos:end="83:35">&amp;</operator> <literal type="number" pos:start="83:37" pos:end="83:39">0x1</literal><operator pos:start="83:40" pos:end="83:40">)</operator></expr> ?</condition><then pos:start="83:44" pos:end="83:51"> <expr pos:start="83:44" pos:end="83:51"><name pos:start="83:44" pos:end="83:51">OPC_JALX</name></expr> </then><else pos:start="83:53" pos:end="83:61">: <expr pos:start="83:55" pos:end="83:61"><name pos:start="83:55" pos:end="83:61">OPC_JAL</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:55"><expr pos:start="85:9" pos:end="85:54"><call pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:26">gen_compute_branch</name><argument_list pos:start="85:27" pos:end="85:54">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ctx</name></expr></argument>, <argument pos:start="85:33" pos:end="85:34"><expr pos:start="85:33" pos:end="85:34"><name pos:start="85:33" pos:end="85:34">op</name></expr></argument>, <argument pos:start="85:37" pos:end="85:37"><expr pos:start="85:37" pos:end="85:37"><literal type="number" pos:start="85:37" pos:end="85:37">4</literal></expr></argument>, <argument pos:start="85:40" pos:end="85:41"><expr pos:start="85:40" pos:end="85:41"><name pos:start="85:40" pos:end="85:41">rx</name></expr></argument>, <argument pos:start="85:44" pos:end="85:45"><expr pos:start="85:44" pos:end="85:45"><name pos:start="85:44" pos:end="85:45">ry</name></expr></argument>, <argument pos:start="85:48" pos:end="85:53"><expr pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:20"><expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:15">n_bytes</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <literal type="number" pos:start="87:19" pos:end="87:19">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><operator pos:start="89:9" pos:end="89:9">*</operator><name pos:start="89:10" pos:end="89:18">is_branch</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">1</literal></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:22">case <expr pos:start="93:10" pos:end="93:21"><name pos:start="93:10" pos:end="93:21">M16_OPC_BEQZ</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:79"><expr pos:start="95:9" pos:end="95:78"><call pos:start="95:9" pos:end="95:78"><name pos:start="95:9" pos:end="95:26">gen_compute_branch</name><argument_list pos:start="95:27" pos:end="95:78">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">ctx</name></expr></argument>, <argument pos:start="95:33" pos:end="95:39"><expr pos:start="95:33" pos:end="95:39"><name pos:start="95:33" pos:end="95:39">OPC_BEQ</name></expr></argument>, <argument pos:start="95:42" pos:end="95:42"><expr pos:start="95:42" pos:end="95:42"><literal type="number" pos:start="95:42" pos:end="95:42">2</literal></expr></argument>, <argument pos:start="95:45" pos:end="95:46"><expr pos:start="95:45" pos:end="95:46"><name pos:start="95:45" pos:end="95:46">rx</name></expr></argument>, <argument pos:start="95:49" pos:end="95:49"><expr pos:start="95:49" pos:end="95:49"><literal type="number" pos:start="95:49" pos:end="95:49">0</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:77"><expr pos:start="95:52" pos:end="95:77"><operator pos:start="95:52" pos:end="95:52">(</operator><operator pos:start="95:53" pos:end="95:53">(</operator><name pos:start="95:54" pos:end="95:59">int8_t</name><operator pos:start="95:60" pos:end="95:60">)</operator><name pos:start="95:61" pos:end="95:71"><name pos:start="95:61" pos:end="95:63">ctx</name><operator pos:start="95:64" pos:end="95:65">-&gt;</operator><name pos:start="95:66" pos:end="95:71">opcode</name></name><operator pos:start="95:72" pos:end="95:72">)</operator> <operator pos:start="95:74" pos:end="95:75">&lt;&lt;</operator> <literal type="number" pos:start="95:77" pos:end="95:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:68">/* No delay slot, so just process as a normal instruction */</comment>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:23">case <expr pos:start="101:10" pos:end="101:22"><name pos:start="101:10" pos:end="101:22">M16_OPC_BNEQZ</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:79"><expr pos:start="103:9" pos:end="103:78"><call pos:start="103:9" pos:end="103:78"><name pos:start="103:9" pos:end="103:26">gen_compute_branch</name><argument_list pos:start="103:27" pos:end="103:78">(<argument pos:start="103:28" pos:end="103:30"><expr pos:start="103:28" pos:end="103:30"><name pos:start="103:28" pos:end="103:30">ctx</name></expr></argument>, <argument pos:start="103:33" pos:end="103:39"><expr pos:start="103:33" pos:end="103:39"><name pos:start="103:33" pos:end="103:39">OPC_BNE</name></expr></argument>, <argument pos:start="103:42" pos:end="103:42"><expr pos:start="103:42" pos:end="103:42"><literal type="number" pos:start="103:42" pos:end="103:42">2</literal></expr></argument>, <argument pos:start="103:45" pos:end="103:46"><expr pos:start="103:45" pos:end="103:46"><name pos:start="103:45" pos:end="103:46">rx</name></expr></argument>, <argument pos:start="103:49" pos:end="103:49"><expr pos:start="103:49" pos:end="103:49"><literal type="number" pos:start="103:49" pos:end="103:49">0</literal></expr></argument>, <argument pos:start="103:52" pos:end="103:77"><expr pos:start="103:52" pos:end="103:77"><operator pos:start="103:52" pos:end="103:52">(</operator><operator pos:start="103:53" pos:end="103:53">(</operator><name pos:start="103:54" pos:end="103:59">int8_t</name><operator pos:start="103:60" pos:end="103:60">)</operator><name pos:start="103:61" pos:end="103:71"><name pos:start="103:61" pos:end="103:63">ctx</name><operator pos:start="103:64" pos:end="103:65">-&gt;</operator><name pos:start="103:66" pos:end="103:71">opcode</name></name><operator pos:start="103:72" pos:end="103:72">)</operator> <operator pos:start="103:74" pos:end="103:75">&lt;&lt;</operator> <literal type="number" pos:start="103:77" pos:end="103:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:68">/* No delay slot, so just process as a normal instruction */</comment>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:23">case <expr pos:start="109:10" pos:end="109:22"><name pos:start="109:10" pos:end="109:22">M16_OPC_SHIFT</name></expr>:</case>

        <switch pos:start="111:9" pos:end="147:9">switch <condition pos:start="111:16" pos:end="111:34">(<expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:27"><name pos:start="111:17" pos:end="111:19">ctx</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:27">opcode</name></name> <operator pos:start="111:29" pos:end="111:29">&amp;</operator> <literal type="number" pos:start="111:31" pos:end="111:33">0x3</literal></expr>)</condition> <block pos:start="111:36" pos:end="147:9">{<block_content pos:start="113:9" pos:end="145:18">

        <case pos:start="113:9" pos:end="113:17">case <expr pos:start="113:14" pos:end="113:16"><literal type="number" pos:start="113:14" pos:end="113:16">0x0</literal></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:57"><expr pos:start="115:13" pos:end="115:56"><call pos:start="115:13" pos:end="115:56"><name pos:start="115:13" pos:end="115:25">gen_shift_imm</name><argument_list pos:start="115:26" pos:end="115:56">(<argument pos:start="115:27" pos:end="115:29"><expr pos:start="115:27" pos:end="115:29"><name pos:start="115:27" pos:end="115:29">env</name></expr></argument>, <argument pos:start="115:32" pos:end="115:34"><expr pos:start="115:32" pos:end="115:34"><name pos:start="115:32" pos:end="115:34">ctx</name></expr></argument>, <argument pos:start="115:37" pos:end="115:43"><expr pos:start="115:37" pos:end="115:43"><name pos:start="115:37" pos:end="115:43">OPC_SLL</name></expr></argument>, <argument pos:start="115:46" pos:end="115:47"><expr pos:start="115:46" pos:end="115:47"><name pos:start="115:46" pos:end="115:47">rx</name></expr></argument>, <argument pos:start="115:50" pos:end="115:51"><expr pos:start="115:50" pos:end="115:51"><name pos:start="115:50" pos:end="115:51">ry</name></expr></argument>, <argument pos:start="115:54" pos:end="115:55"><expr pos:start="115:54" pos:end="115:55"><name pos:start="115:54" pos:end="115:55">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="122:0">case <expr pos:start="119:14" pos:end="119:16"><literal type="number" pos:start="119:14" pos:end="119:16">0x1</literal></expr>:</case>

<cpp:if pos:start="121:1" pos:end="121:26">#<cpp:directive pos:start="121:2" pos:end="121:3">if</cpp:directive> <expr pos:start="121:5" pos:end="121:26"><call pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:11">defined</name><argument_list pos:start="121:12" pos:end="121:26">(<argument pos:start="121:13" pos:end="121:25"><expr pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="123:13" pos:end="123:31"><expr pos:start="123:13" pos:end="123:30"><call pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:25">check_mips_64</name><argument_list pos:start="123:26" pos:end="123:30">(<argument pos:start="123:27" pos:end="123:29"><expr pos:start="123:27" pos:end="123:29"><name pos:start="123:27" pos:end="123:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="128:0"><expr pos:start="125:13" pos:end="125:57"><call pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:25">gen_shift_imm</name><argument_list pos:start="125:26" pos:end="125:57">(<argument pos:start="125:27" pos:end="125:29"><expr pos:start="125:27" pos:end="125:29"><name pos:start="125:27" pos:end="125:29">env</name></expr></argument>, <argument pos:start="125:32" pos:end="125:34"><expr pos:start="125:32" pos:end="125:34"><name pos:start="125:32" pos:end="125:34">ctx</name></expr></argument>, <argument pos:start="125:37" pos:end="125:44"><expr pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:44">OPC_DSLL</name></expr></argument>, <argument pos:start="125:47" pos:end="125:48"><expr pos:start="125:47" pos:end="125:48"><name pos:start="125:47" pos:end="125:48">rx</name></expr></argument>, <argument pos:start="125:51" pos:end="125:52"><expr pos:start="125:51" pos:end="125:52"><name pos:start="125:51" pos:end="125:52">ry</name></expr></argument>, <argument pos:start="125:55" pos:end="125:56"><expr pos:start="125:55" pos:end="125:56"><name pos:start="125:55" pos:end="125:56">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="127:1" pos:end="127:5">#<cpp:directive pos:start="127:2" pos:end="127:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="129:13" pos:end="132:0"><expr pos:start="129:13" pos:end="129:44"><call pos:start="129:13" pos:end="129:44"><name pos:start="129:13" pos:end="129:30">generate_exception</name><argument_list pos:start="129:31" pos:end="129:44">(<argument pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:34">ctx</name></expr></argument>, <argument pos:start="129:37" pos:end="129:43"><expr pos:start="129:37" pos:end="129:43"><name pos:start="129:37" pos:end="129:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:17">case <expr pos:start="135:14" pos:end="135:16"><literal type="number" pos:start="135:14" pos:end="135:16">0x2</literal></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:57"><expr pos:start="137:13" pos:end="137:56"><call pos:start="137:13" pos:end="137:56"><name pos:start="137:13" pos:end="137:25">gen_shift_imm</name><argument_list pos:start="137:26" pos:end="137:56">(<argument pos:start="137:27" pos:end="137:29"><expr pos:start="137:27" pos:end="137:29"><name pos:start="137:27" pos:end="137:29">env</name></expr></argument>, <argument pos:start="137:32" pos:end="137:34"><expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:34">ctx</name></expr></argument>, <argument pos:start="137:37" pos:end="137:43"><expr pos:start="137:37" pos:end="137:43"><name pos:start="137:37" pos:end="137:43">OPC_SRL</name></expr></argument>, <argument pos:start="137:46" pos:end="137:47"><expr pos:start="137:46" pos:end="137:47"><name pos:start="137:46" pos:end="137:47">rx</name></expr></argument>, <argument pos:start="137:50" pos:end="137:51"><expr pos:start="137:50" pos:end="137:51"><name pos:start="137:50" pos:end="137:51">ry</name></expr></argument>, <argument pos:start="137:54" pos:end="137:55"><expr pos:start="137:54" pos:end="137:55"><name pos:start="137:54" pos:end="137:55">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <case pos:start="141:9" pos:end="141:17">case <expr pos:start="141:14" pos:end="141:16"><literal type="number" pos:start="141:14" pos:end="141:16">0x3</literal></expr>:</case>

            <expr_stmt pos:start="143:13" pos:end="143:57"><expr pos:start="143:13" pos:end="143:56"><call pos:start="143:13" pos:end="143:56"><name pos:start="143:13" pos:end="143:25">gen_shift_imm</name><argument_list pos:start="143:26" pos:end="143:56">(<argument pos:start="143:27" pos:end="143:29"><expr pos:start="143:27" pos:end="143:29"><name pos:start="143:27" pos:end="143:29">env</name></expr></argument>, <argument pos:start="143:32" pos:end="143:34"><expr pos:start="143:32" pos:end="143:34"><name pos:start="143:32" pos:end="143:34">ctx</name></expr></argument>, <argument pos:start="143:37" pos:end="143:43"><expr pos:start="143:37" pos:end="143:43"><name pos:start="143:37" pos:end="143:43">OPC_SRA</name></expr></argument>, <argument pos:start="143:46" pos:end="143:47"><expr pos:start="143:46" pos:end="143:47"><name pos:start="143:46" pos:end="143:47">rx</name></expr></argument>, <argument pos:start="143:50" pos:end="143:51"><expr pos:start="143:50" pos:end="143:51"><name pos:start="143:50" pos:end="143:51">ry</name></expr></argument>, <argument pos:start="143:54" pos:end="143:55"><expr pos:start="143:54" pos:end="143:55"><name pos:start="143:54" pos:end="143:55">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="149:9" pos:end="152:0">break;</break>

<cpp:if pos:start="151:1" pos:end="151:26">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:26"><call pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:11">defined</name><argument_list pos:start="151:12" pos:end="151:26">(<argument pos:start="151:13" pos:end="151:25"><expr pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="153:5" pos:end="153:20">case <expr pos:start="153:10" pos:end="153:19"><name pos:start="153:10" pos:end="153:19">M16_OPC_LD</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="155:27"><expr pos:start="155:9" pos:end="155:26"><call pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:21">check_mips_64</name><argument_list pos:start="155:22" pos:end="155:26">(<argument pos:start="155:23" pos:end="155:25"><expr pos:start="155:23" pos:end="155:25"><name pos:start="155:23" pos:end="155:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:51"><expr pos:start="157:9" pos:end="157:50"><call pos:start="157:9" pos:end="157:50"><name pos:start="157:9" pos:end="157:16">gen_ldst</name><argument_list pos:start="157:17" pos:end="157:50">(<argument pos:start="157:18" pos:end="157:20"><expr pos:start="157:18" pos:end="157:20"><name pos:start="157:18" pos:end="157:20">ctx</name></expr></argument>, <argument pos:start="157:23" pos:end="157:28"><expr pos:start="157:23" pos:end="157:28"><name pos:start="157:23" pos:end="157:28">OPC_LD</name></expr></argument>, <argument pos:start="157:31" pos:end="157:32"><expr pos:start="157:31" pos:end="157:32"><name pos:start="157:31" pos:end="157:32">ry</name></expr></argument>, <argument pos:start="157:35" pos:end="157:36"><expr pos:start="157:35" pos:end="157:36"><name pos:start="157:35" pos:end="157:36">rx</name></expr></argument>, <argument pos:start="157:39" pos:end="157:49"><expr pos:start="157:39" pos:end="157:49"><name pos:start="157:39" pos:end="157:44">offset</name> <operator pos:start="157:46" pos:end="157:47">&lt;&lt;</operator> <literal type="number" pos:start="157:49" pos:end="157:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="162:0">break;</break>

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

    <case pos:start="163:5" pos:end="163:22">case <expr pos:start="163:10" pos:end="163:21"><name pos:start="163:10" pos:end="163:21">M16_OPC_RRIA</name></expr>:</case>

        <block pos:start="165:9" pos:end="191:9">{<block_content pos:start="167:13" pos:end="189:13">

            <decl_stmt pos:start="167:13" pos:end="167:66"><decl pos:start="167:13" pos:end="167:65"><type pos:start="167:13" pos:end="167:19"><name pos:start="167:13" pos:end="167:19">int16_t</name></type> <name pos:start="167:21" pos:end="167:23">imm</name> <init pos:start="167:25" pos:end="167:65">= <expr pos:start="167:27" pos:end="167:65"><operator pos:start="167:27" pos:end="167:27">(</operator><name pos:start="167:28" pos:end="167:33">int8_t</name><operator pos:start="167:34" pos:end="167:34">)</operator><operator pos:start="167:35" pos:end="167:35">(</operator><operator pos:start="167:36" pos:end="167:36">(</operator><name pos:start="167:37" pos:end="167:47"><name pos:start="167:37" pos:end="167:39">ctx</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:47">opcode</name></name> <operator pos:start="167:49" pos:end="167:49">&amp;</operator> <literal type="number" pos:start="167:51" pos:end="167:53">0xf</literal><operator pos:start="167:54" pos:end="167:54">)</operator> <operator pos:start="167:56" pos:end="167:57">&lt;&lt;</operator> <literal type="number" pos:start="167:59" pos:end="167:59">4</literal><operator pos:start="167:60" pos:end="167:60">)</operator> <operator pos:start="167:62" pos:end="167:63">&gt;&gt;</operator> <literal type="number" pos:start="167:65" pos:end="167:65">4</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="171:13" pos:end="189:13"><if pos:start="171:13" pos:end="185:13">if <condition pos:start="171:16" pos:end="171:39">(<expr pos:start="171:17" pos:end="171:38"><operator pos:start="171:17" pos:end="171:17">(</operator><name pos:start="171:18" pos:end="171:28"><name pos:start="171:18" pos:end="171:20">ctx</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:28">opcode</name></name> <operator pos:start="171:30" pos:end="171:31">&gt;&gt;</operator> <literal type="number" pos:start="171:33" pos:end="171:33">4</literal><operator pos:start="171:34" pos:end="171:34">)</operator> <operator pos:start="171:36" pos:end="171:36">&amp;</operator> <literal type="number" pos:start="171:38" pos:end="171:38">1</literal></expr>)</condition> <block pos:start="171:41" pos:end="185:13">{<block_content pos:start="175:17" pos:end="184:0">

<cpp:if pos:start="173:1" pos:end="173:26">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:26"><call pos:start="173:5" pos:end="173:26"><name pos:start="173:5" pos:end="173:11">defined</name><argument_list pos:start="173:12" pos:end="173:26">(<argument pos:start="173:13" pos:end="173:25"><expr pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <expr_stmt pos:start="175:17" pos:end="175:35"><expr pos:start="175:17" pos:end="175:34"><call pos:start="175:17" pos:end="175:34"><name pos:start="175:17" pos:end="175:29">check_mips_64</name><argument_list pos:start="175:30" pos:end="175:34">(<argument pos:start="175:31" pos:end="175:33"><expr pos:start="175:31" pos:end="175:33"><name pos:start="175:31" pos:end="175:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="180:0"><expr pos:start="177:17" pos:end="177:64"><call pos:start="177:17" pos:end="177:64"><name pos:start="177:17" pos:end="177:29">gen_arith_imm</name><argument_list pos:start="177:30" pos:end="177:64">(<argument pos:start="177:31" pos:end="177:33"><expr pos:start="177:31" pos:end="177:33"><name pos:start="177:31" pos:end="177:33">env</name></expr></argument>, <argument pos:start="177:36" pos:end="177:38"><expr pos:start="177:36" pos:end="177:38"><name pos:start="177:36" pos:end="177:38">ctx</name></expr></argument>, <argument pos:start="177:41" pos:end="177:50"><expr pos:start="177:41" pos:end="177:50"><name pos:start="177:41" pos:end="177:50">OPC_DADDIU</name></expr></argument>, <argument pos:start="177:53" pos:end="177:54"><expr pos:start="177:53" pos:end="177:54"><name pos:start="177:53" pos:end="177:54">ry</name></expr></argument>, <argument pos:start="177:57" pos:end="177:58"><expr pos:start="177:57" pos:end="177:58"><name pos:start="177:57" pos:end="177:58">rx</name></expr></argument>, <argument pos:start="177:61" pos:end="177:63"><expr pos:start="177:61" pos:end="177:63"><name pos:start="177:61" pos:end="177:63">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="179:1" pos:end="179:5">#<cpp:directive pos:start="179:2" pos:end="179:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="181:17" pos:end="184:0"><expr pos:start="181:17" pos:end="181:48"><call pos:start="181:17" pos:end="181:48"><name pos:start="181:17" pos:end="181:34">generate_exception</name><argument_list pos:start="181:35" pos:end="181:48">(<argument pos:start="181:36" pos:end="181:38"><expr pos:start="181:36" pos:end="181:38"><name pos:start="181:36" pos:end="181:38">ctx</name></expr></argument>, <argument pos:start="181:41" pos:end="181:47"><expr pos:start="181:41" pos:end="181:47"><name pos:start="181:41" pos:end="181:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="189:13">else <block pos:start="185:20" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:64">

                <expr_stmt pos:start="187:17" pos:end="187:64"><expr pos:start="187:17" pos:end="187:63"><call pos:start="187:17" pos:end="187:63"><name pos:start="187:17" pos:end="187:29">gen_arith_imm</name><argument_list pos:start="187:30" pos:end="187:63">(<argument pos:start="187:31" pos:end="187:33"><expr pos:start="187:31" pos:end="187:33"><name pos:start="187:31" pos:end="187:33">env</name></expr></argument>, <argument pos:start="187:36" pos:end="187:38"><expr pos:start="187:36" pos:end="187:38"><name pos:start="187:36" pos:end="187:38">ctx</name></expr></argument>, <argument pos:start="187:41" pos:end="187:49"><expr pos:start="187:41" pos:end="187:49"><name pos:start="187:41" pos:end="187:49">OPC_ADDIU</name></expr></argument>, <argument pos:start="187:52" pos:end="187:53"><expr pos:start="187:52" pos:end="187:53"><name pos:start="187:52" pos:end="187:53">ry</name></expr></argument>, <argument pos:start="187:56" pos:end="187:57"><expr pos:start="187:56" pos:end="187:57"><name pos:start="187:56" pos:end="187:57">rx</name></expr></argument>, <argument pos:start="187:60" pos:end="187:62"><expr pos:start="187:60" pos:end="187:62"><name pos:start="187:60" pos:end="187:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:24">case <expr pos:start="195:10" pos:end="195:23"><name pos:start="195:10" pos:end="195:23">M16_OPC_ADDIU8</name></expr>:</case>

        <block pos:start="197:9" pos:end="205:9">{<block_content pos:start="199:13" pos:end="203:60">

            <decl_stmt pos:start="199:13" pos:end="199:47"><decl pos:start="199:13" pos:end="199:46"><type pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:19">int16_t</name></type> <name pos:start="199:21" pos:end="199:23">imm</name> <init pos:start="199:25" pos:end="199:46">= <expr pos:start="199:27" pos:end="199:46"><operator pos:start="199:27" pos:end="199:27">(</operator><name pos:start="199:28" pos:end="199:33">int8_t</name><operator pos:start="199:34" pos:end="199:34">)</operator> <name pos:start="199:36" pos:end="199:46"><name pos:start="199:36" pos:end="199:38">ctx</name><operator pos:start="199:39" pos:end="199:40">-&gt;</operator><name pos:start="199:41" pos:end="199:46">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="203:13" pos:end="203:60"><expr pos:start="203:13" pos:end="203:59"><call pos:start="203:13" pos:end="203:59"><name pos:start="203:13" pos:end="203:25">gen_arith_imm</name><argument_list pos:start="203:26" pos:end="203:59">(<argument pos:start="203:27" pos:end="203:29"><expr pos:start="203:27" pos:end="203:29"><name pos:start="203:27" pos:end="203:29">env</name></expr></argument>, <argument pos:start="203:32" pos:end="203:34"><expr pos:start="203:32" pos:end="203:34"><name pos:start="203:32" pos:end="203:34">ctx</name></expr></argument>, <argument pos:start="203:37" pos:end="203:45"><expr pos:start="203:37" pos:end="203:45"><name pos:start="203:37" pos:end="203:45">OPC_ADDIU</name></expr></argument>, <argument pos:start="203:48" pos:end="203:49"><expr pos:start="203:48" pos:end="203:49"><name pos:start="203:48" pos:end="203:49">rx</name></expr></argument>, <argument pos:start="203:52" pos:end="203:53"><expr pos:start="203:52" pos:end="203:53"><name pos:start="203:52" pos:end="203:53">rx</name></expr></argument>, <argument pos:start="203:56" pos:end="203:58"><expr pos:start="203:56" pos:end="203:58"><name pos:start="203:56" pos:end="203:58">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:22">case <expr pos:start="209:10" pos:end="209:21"><name pos:start="209:10" pos:end="209:21">M16_OPC_SLTI</name></expr>:</case>

        <block pos:start="211:9" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:52">

            <decl_stmt pos:start="213:13" pos:end="213:48"><decl pos:start="213:13" pos:end="213:47"><type pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:19">int16_t</name></type> <name pos:start="213:21" pos:end="213:23">imm</name> <init pos:start="213:25" pos:end="213:47">= <expr pos:start="213:27" pos:end="213:47"><operator pos:start="213:27" pos:end="213:27">(</operator><name pos:start="213:28" pos:end="213:34">uint8_t</name><operator pos:start="213:35" pos:end="213:35">)</operator> <name pos:start="213:37" pos:end="213:47"><name pos:start="213:37" pos:end="213:39">ctx</name><operator pos:start="213:40" pos:end="213:41">-&gt;</operator><name pos:start="213:42" pos:end="213:47">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="217:13" pos:end="217:52"><expr pos:start="217:13" pos:end="217:51"><call pos:start="217:13" pos:end="217:51"><name pos:start="217:13" pos:end="217:23">gen_slt_imm</name><argument_list pos:start="217:24" pos:end="217:51">(<argument pos:start="217:25" pos:end="217:27"><expr pos:start="217:25" pos:end="217:27"><name pos:start="217:25" pos:end="217:27">env</name></expr></argument>, <argument pos:start="217:30" pos:end="217:37"><expr pos:start="217:30" pos:end="217:37"><name pos:start="217:30" pos:end="217:37">OPC_SLTI</name></expr></argument>, <argument pos:start="217:40" pos:end="217:41"><expr pos:start="217:40" pos:end="217:41"><literal type="number" pos:start="217:40" pos:end="217:41">24</literal></expr></argument>, <argument pos:start="217:44" pos:end="217:45"><expr pos:start="217:44" pos:end="217:45"><name pos:start="217:44" pos:end="217:45">rx</name></expr></argument>, <argument pos:start="217:48" pos:end="217:50"><expr pos:start="217:48" pos:end="217:50"><name pos:start="217:48" pos:end="217:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="221:9" pos:end="221:14">break;</break>

    <case pos:start="223:5" pos:end="223:23">case <expr pos:start="223:10" pos:end="223:22"><name pos:start="223:10" pos:end="223:22">M16_OPC_SLTIU</name></expr>:</case>

        <block pos:start="225:9" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:53">

            <decl_stmt pos:start="227:13" pos:end="227:48"><decl pos:start="227:13" pos:end="227:47"><type pos:start="227:13" pos:end="227:19"><name pos:start="227:13" pos:end="227:19">int16_t</name></type> <name pos:start="227:21" pos:end="227:23">imm</name> <init pos:start="227:25" pos:end="227:47">= <expr pos:start="227:27" pos:end="227:47"><operator pos:start="227:27" pos:end="227:27">(</operator><name pos:start="227:28" pos:end="227:34">uint8_t</name><operator pos:start="227:35" pos:end="227:35">)</operator> <name pos:start="227:37" pos:end="227:47"><name pos:start="227:37" pos:end="227:39">ctx</name><operator pos:start="227:40" pos:end="227:41">-&gt;</operator><name pos:start="227:42" pos:end="227:47">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="231:13" pos:end="231:53"><expr pos:start="231:13" pos:end="231:52"><call pos:start="231:13" pos:end="231:52"><name pos:start="231:13" pos:end="231:23">gen_slt_imm</name><argument_list pos:start="231:24" pos:end="231:52">(<argument pos:start="231:25" pos:end="231:27"><expr pos:start="231:25" pos:end="231:27"><name pos:start="231:25" pos:end="231:27">env</name></expr></argument>, <argument pos:start="231:30" pos:end="231:38"><expr pos:start="231:30" pos:end="231:38"><name pos:start="231:30" pos:end="231:38">OPC_SLTIU</name></expr></argument>, <argument pos:start="231:41" pos:end="231:42"><expr pos:start="231:41" pos:end="231:42"><literal type="number" pos:start="231:41" pos:end="231:42">24</literal></expr></argument>, <argument pos:start="231:45" pos:end="231:46"><expr pos:start="231:45" pos:end="231:46"><name pos:start="231:45" pos:end="231:46">rx</name></expr></argument>, <argument pos:start="231:49" pos:end="231:51"><expr pos:start="231:49" pos:end="231:51"><name pos:start="231:49" pos:end="231:51">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <case pos:start="237:5" pos:end="237:20">case <expr pos:start="237:10" pos:end="237:19"><name pos:start="237:10" pos:end="237:19">M16_OPC_I8</name></expr>:</case>

        <block pos:start="239:9" pos:end="357:9">{<block_content pos:start="241:13" pos:end="355:13">

            <decl_stmt pos:start="241:13" pos:end="241:22"><decl pos:start="241:13" pos:end="241:21"><type pos:start="241:13" pos:end="241:15"><name pos:start="241:13" pos:end="241:15">int</name></type> <name pos:start="241:17" pos:end="241:21">reg32</name></decl>;</decl_stmt>



            <expr_stmt pos:start="245:13" pos:end="245:45"><expr pos:start="245:13" pos:end="245:44"><name pos:start="245:13" pos:end="245:17">funct</name> <operator pos:start="245:19" pos:end="245:19">=</operator> <operator pos:start="245:21" pos:end="245:21">(</operator><name pos:start="245:22" pos:end="245:32"><name pos:start="245:22" pos:end="245:24">ctx</name><operator pos:start="245:25" pos:end="245:26">-&gt;</operator><name pos:start="245:27" pos:end="245:32">opcode</name></name> <operator pos:start="245:34" pos:end="245:35">&gt;&gt;</operator> <literal type="number" pos:start="245:37" pos:end="245:37">8</literal><operator pos:start="245:38" pos:end="245:38">)</operator> <operator pos:start="245:40" pos:end="245:40">&amp;</operator> <literal type="number" pos:start="245:42" pos:end="245:44">0x7</literal></expr>;</expr_stmt>

            <switch pos:start="247:13" pos:end="355:13">switch <condition pos:start="247:20" pos:end="247:26">(<expr pos:start="247:21" pos:end="247:25"><name pos:start="247:21" pos:end="247:25">funct</name></expr>)</condition> <block pos:start="247:28" pos:end="355:13">{<block_content pos:start="249:13" pos:end="353:22">

            <case pos:start="249:13" pos:end="249:26">case <expr pos:start="249:18" pos:end="249:25"><name pos:start="249:18" pos:end="249:25">I8_BTEQZ</name></expr>:</case>

                <expr_stmt pos:start="251:17" pos:end="253:63"><expr pos:start="251:17" pos:end="253:62"><call pos:start="251:17" pos:end="253:62"><name pos:start="251:17" pos:end="251:34">gen_compute_branch</name><argument_list pos:start="251:35" pos:end="253:62">(<argument pos:start="251:36" pos:end="251:38"><expr pos:start="251:36" pos:end="251:38"><name pos:start="251:36" pos:end="251:38">ctx</name></expr></argument>, <argument pos:start="251:41" pos:end="251:47"><expr pos:start="251:41" pos:end="251:47"><name pos:start="251:41" pos:end="251:47">OPC_BEQ</name></expr></argument>, <argument pos:start="251:50" pos:end="251:50"><expr pos:start="251:50" pos:end="251:50"><literal type="number" pos:start="251:50" pos:end="251:50">2</literal></expr></argument>, <argument pos:start="251:53" pos:end="251:54"><expr pos:start="251:53" pos:end="251:54"><literal type="number" pos:start="251:53" pos:end="251:54">24</literal></expr></argument>, <argument pos:start="251:57" pos:end="251:57"><expr pos:start="251:57" pos:end="251:57"><literal type="number" pos:start="251:57" pos:end="251:57">0</literal></expr></argument>,

                                   <argument pos:start="253:36" pos:end="253:61"><expr pos:start="253:36" pos:end="253:61"><operator pos:start="253:36" pos:end="253:36">(</operator><operator pos:start="253:37" pos:end="253:37">(</operator><name pos:start="253:38" pos:end="253:43">int8_t</name><operator pos:start="253:44" pos:end="253:44">)</operator><name pos:start="253:45" pos:end="253:55"><name pos:start="253:45" pos:end="253:47">ctx</name><operator pos:start="253:48" pos:end="253:49">-&gt;</operator><name pos:start="253:50" pos:end="253:55">opcode</name></name><operator pos:start="253:56" pos:end="253:56">)</operator> <operator pos:start="253:58" pos:end="253:59">&lt;&lt;</operator> <literal type="number" pos:start="253:61" pos:end="253:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            <case pos:start="257:13" pos:end="257:26">case <expr pos:start="257:18" pos:end="257:25"><name pos:start="257:18" pos:end="257:25">I8_BTNEZ</name></expr>:</case>

                <expr_stmt pos:start="259:17" pos:end="261:63"><expr pos:start="259:17" pos:end="261:62"><call pos:start="259:17" pos:end="261:62"><name pos:start="259:17" pos:end="259:34">gen_compute_branch</name><argument_list pos:start="259:35" pos:end="261:62">(<argument pos:start="259:36" pos:end="259:38"><expr pos:start="259:36" pos:end="259:38"><name pos:start="259:36" pos:end="259:38">ctx</name></expr></argument>, <argument pos:start="259:41" pos:end="259:47"><expr pos:start="259:41" pos:end="259:47"><name pos:start="259:41" pos:end="259:47">OPC_BNE</name></expr></argument>, <argument pos:start="259:50" pos:end="259:50"><expr pos:start="259:50" pos:end="259:50"><literal type="number" pos:start="259:50" pos:end="259:50">2</literal></expr></argument>, <argument pos:start="259:53" pos:end="259:54"><expr pos:start="259:53" pos:end="259:54"><literal type="number" pos:start="259:53" pos:end="259:54">24</literal></expr></argument>, <argument pos:start="259:57" pos:end="259:57"><expr pos:start="259:57" pos:end="259:57"><literal type="number" pos:start="259:57" pos:end="259:57">0</literal></expr></argument>,

                                   <argument pos:start="261:36" pos:end="261:61"><expr pos:start="261:36" pos:end="261:61"><operator pos:start="261:36" pos:end="261:36">(</operator><operator pos:start="261:37" pos:end="261:37">(</operator><name pos:start="261:38" pos:end="261:43">int8_t</name><operator pos:start="261:44" pos:end="261:44">)</operator><name pos:start="261:45" pos:end="261:55"><name pos:start="261:45" pos:end="261:47">ctx</name><operator pos:start="261:48" pos:end="261:49">-&gt;</operator><name pos:start="261:50" pos:end="261:55">opcode</name></name><operator pos:start="261:56" pos:end="261:56">)</operator> <operator pos:start="261:58" pos:end="261:59">&lt;&lt;</operator> <literal type="number" pos:start="261:61" pos:end="261:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="263:17" pos:end="263:22">break;</break>

            <case pos:start="265:13" pos:end="265:27">case <expr pos:start="265:18" pos:end="265:26"><name pos:start="265:18" pos:end="265:26">I8_SWRASP</name></expr>:</case>

                <expr_stmt pos:start="267:17" pos:end="267:73"><expr pos:start="267:17" pos:end="267:72"><call pos:start="267:17" pos:end="267:72"><name pos:start="267:17" pos:end="267:24">gen_ldst</name><argument_list pos:start="267:25" pos:end="267:72">(<argument pos:start="267:26" pos:end="267:28"><expr pos:start="267:26" pos:end="267:28"><name pos:start="267:26" pos:end="267:28">ctx</name></expr></argument>, <argument pos:start="267:31" pos:end="267:36"><expr pos:start="267:31" pos:end="267:36"><name pos:start="267:31" pos:end="267:36">OPC_SW</name></expr></argument>, <argument pos:start="267:39" pos:end="267:40"><expr pos:start="267:39" pos:end="267:40"><literal type="number" pos:start="267:39" pos:end="267:40">31</literal></expr></argument>, <argument pos:start="267:43" pos:end="267:44"><expr pos:start="267:43" pos:end="267:44"><literal type="number" pos:start="267:43" pos:end="267:44">29</literal></expr></argument>, <argument pos:start="267:47" pos:end="267:71"><expr pos:start="267:47" pos:end="267:71"><operator pos:start="267:47" pos:end="267:47">(</operator><name pos:start="267:48" pos:end="267:58"><name pos:start="267:48" pos:end="267:50">ctx</name><operator pos:start="267:51" pos:end="267:52">-&gt;</operator><name pos:start="267:53" pos:end="267:58">opcode</name></name> <operator pos:start="267:60" pos:end="267:60">&amp;</operator> <literal type="number" pos:start="267:62" pos:end="267:65">0xff</literal><operator pos:start="267:66" pos:end="267:66">)</operator> <operator pos:start="267:68" pos:end="267:69">&lt;&lt;</operator> <literal type="number" pos:start="267:71" pos:end="267:71">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="269:17" pos:end="269:22">break;</break>

            <case pos:start="271:13" pos:end="271:26">case <expr pos:start="271:18" pos:end="271:25"><name pos:start="271:18" pos:end="271:25">I8_ADJSP</name></expr>:</case>

                <expr_stmt pos:start="273:17" pos:end="275:58"><expr pos:start="273:17" pos:end="275:57"><call pos:start="273:17" pos:end="275:57"><name pos:start="273:17" pos:end="273:29">gen_arith_imm</name><argument_list pos:start="273:30" pos:end="275:57">(<argument pos:start="273:31" pos:end="273:33"><expr pos:start="273:31" pos:end="273:33"><name pos:start="273:31" pos:end="273:33">env</name></expr></argument>, <argument pos:start="273:36" pos:end="273:38"><expr pos:start="273:36" pos:end="273:38"><name pos:start="273:36" pos:end="273:38">ctx</name></expr></argument>, <argument pos:start="273:41" pos:end="273:49"><expr pos:start="273:41" pos:end="273:49"><name pos:start="273:41" pos:end="273:49">OPC_ADDIU</name></expr></argument>, <argument pos:start="273:52" pos:end="273:53"><expr pos:start="273:52" pos:end="273:53"><literal type="number" pos:start="273:52" pos:end="273:53">29</literal></expr></argument>, <argument pos:start="273:56" pos:end="273:57"><expr pos:start="273:56" pos:end="273:57"><literal type="number" pos:start="273:56" pos:end="273:57">29</literal></expr></argument>,

                              <argument pos:start="275:31" pos:end="275:56"><expr pos:start="275:31" pos:end="275:56"><operator pos:start="275:31" pos:end="275:31">(</operator><operator pos:start="275:32" pos:end="275:32">(</operator><name pos:start="275:33" pos:end="275:38">int8_t</name><operator pos:start="275:39" pos:end="275:39">)</operator><name pos:start="275:40" pos:end="275:50"><name pos:start="275:40" pos:end="275:42">ctx</name><operator pos:start="275:43" pos:end="275:44">-&gt;</operator><name pos:start="275:45" pos:end="275:50">opcode</name></name><operator pos:start="275:51" pos:end="275:51">)</operator> <operator pos:start="275:53" pos:end="275:54">&lt;&lt;</operator> <literal type="number" pos:start="275:56" pos:end="275:56">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="277:17" pos:end="277:22">break;</break>

            <case pos:start="279:13" pos:end="279:25">case <expr pos:start="279:18" pos:end="279:24"><name pos:start="279:18" pos:end="279:24">I8_SVRS</name></expr>:</case>

                <block pos:start="281:17" pos:end="319:17">{<block_content pos:start="283:21" pos:end="317:21">

                    <decl_stmt pos:start="283:21" pos:end="283:55"><decl pos:start="283:21" pos:end="283:54"><type pos:start="283:21" pos:end="283:23"><name pos:start="283:21" pos:end="283:23">int</name></type> <name pos:start="283:25" pos:end="283:29">do_ra</name> <init pos:start="283:31" pos:end="283:54">= <expr pos:start="283:33" pos:end="283:54"><name pos:start="283:33" pos:end="283:43"><name pos:start="283:33" pos:end="283:35">ctx</name><operator pos:start="283:36" pos:end="283:37">-&gt;</operator><name pos:start="283:38" pos:end="283:43">opcode</name></name> <operator pos:start="283:45" pos:end="283:45">&amp;</operator> <operator pos:start="283:47" pos:end="283:47">(</operator><literal type="number" pos:start="283:48" pos:end="283:48">1</literal> <operator pos:start="283:50" pos:end="283:51">&lt;&lt;</operator> <literal type="number" pos:start="283:53" pos:end="283:53">6</literal><operator pos:start="283:54" pos:end="283:54">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="285:21" pos:end="285:55"><decl pos:start="285:21" pos:end="285:54"><type pos:start="285:21" pos:end="285:23"><name pos:start="285:21" pos:end="285:23">int</name></type> <name pos:start="285:25" pos:end="285:29">do_s0</name> <init pos:start="285:31" pos:end="285:54">= <expr pos:start="285:33" pos:end="285:54"><name pos:start="285:33" pos:end="285:43"><name pos:start="285:33" pos:end="285:35">ctx</name><operator pos:start="285:36" pos:end="285:37">-&gt;</operator><name pos:start="285:38" pos:end="285:43">opcode</name></name> <operator pos:start="285:45" pos:end="285:45">&amp;</operator> <operator pos:start="285:47" pos:end="285:47">(</operator><literal type="number" pos:start="285:48" pos:end="285:48">1</literal> <operator pos:start="285:50" pos:end="285:51">&lt;&lt;</operator> <literal type="number" pos:start="285:53" pos:end="285:53">5</literal><operator pos:start="285:54" pos:end="285:54">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="287:21" pos:end="287:55"><decl pos:start="287:21" pos:end="287:54"><type pos:start="287:21" pos:end="287:23"><name pos:start="287:21" pos:end="287:23">int</name></type> <name pos:start="287:25" pos:end="287:29">do_s1</name> <init pos:start="287:31" pos:end="287:54">= <expr pos:start="287:33" pos:end="287:54"><name pos:start="287:33" pos:end="287:43"><name pos:start="287:33" pos:end="287:35">ctx</name><operator pos:start="287:36" pos:end="287:37">-&gt;</operator><name pos:start="287:38" pos:end="287:43">opcode</name></name> <operator pos:start="287:45" pos:end="287:45">&amp;</operator> <operator pos:start="287:47" pos:end="287:47">(</operator><literal type="number" pos:start="287:48" pos:end="287:48">1</literal> <operator pos:start="287:50" pos:end="287:51">&lt;&lt;</operator> <literal type="number" pos:start="287:53" pos:end="287:53">4</literal><operator pos:start="287:54" pos:end="287:54">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="289:21" pos:end="289:54"><decl pos:start="289:21" pos:end="289:53"><type pos:start="289:21" pos:end="289:23"><name pos:start="289:21" pos:end="289:23">int</name></type> <name pos:start="289:25" pos:end="289:33">framesize</name> <init pos:start="289:35" pos:end="289:53">= <expr pos:start="289:37" pos:end="289:53"><name pos:start="289:37" pos:end="289:47"><name pos:start="289:37" pos:end="289:39">ctx</name><operator pos:start="289:40" pos:end="289:41">-&gt;</operator><name pos:start="289:42" pos:end="289:47">opcode</name></name> <operator pos:start="289:49" pos:end="289:49">&amp;</operator> <literal type="number" pos:start="289:51" pos:end="289:53">0xf</literal></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="293:21" pos:end="301:21"><if pos:start="293:21" pos:end="297:21">if <condition pos:start="293:24" pos:end="293:39">(<expr pos:start="293:25" pos:end="293:38"><name pos:start="293:25" pos:end="293:33">framesize</name> <operator pos:start="293:35" pos:end="293:36">==</operator> <literal type="number" pos:start="293:38" pos:end="293:38">0</literal></expr>)</condition> <block pos:start="293:41" pos:end="297:21">{<block_content pos:start="295:25" pos:end="295:40">

                        <expr_stmt pos:start="295:25" pos:end="295:40"><expr pos:start="295:25" pos:end="295:39"><name pos:start="295:25" pos:end="295:33">framesize</name> <operator pos:start="295:35" pos:end="295:35">=</operator> <literal type="number" pos:start="295:37" pos:end="295:39">128</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="297:23" pos:end="301:21">else <block pos:start="297:28" pos:end="301:21">{<block_content pos:start="299:25" pos:end="299:51">

                        <expr_stmt pos:start="299:25" pos:end="299:51"><expr pos:start="299:25" pos:end="299:50"><name pos:start="299:25" pos:end="299:33">framesize</name> <operator pos:start="299:35" pos:end="299:35">=</operator> <name pos:start="299:37" pos:end="299:45">framesize</name> <operator pos:start="299:47" pos:end="299:48">&lt;&lt;</operator> <literal type="number" pos:start="299:50" pos:end="299:50">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <if_stmt pos:start="305:21" pos:end="317:21"><if pos:start="305:21" pos:end="311:21">if <condition pos:start="305:24" pos:end="305:47">(<expr pos:start="305:25" pos:end="305:46"><name pos:start="305:25" pos:end="305:35"><name pos:start="305:25" pos:end="305:27">ctx</name><operator pos:start="305:28" pos:end="305:29">-&gt;</operator><name pos:start="305:30" pos:end="305:35">opcode</name></name> <operator pos:start="305:37" pos:end="305:37">&amp;</operator> <operator pos:start="305:39" pos:end="305:39">(</operator><literal type="number" pos:start="305:40" pos:end="305:40">1</literal> <operator pos:start="305:42" pos:end="305:43">&lt;&lt;</operator> <literal type="number" pos:start="305:45" pos:end="305:45">7</literal><operator pos:start="305:46" pos:end="305:46">)</operator></expr>)</condition> <block pos:start="305:49" pos:end="311:21">{<block_content pos:start="307:25" pos:end="309:72">

                        <expr_stmt pos:start="307:25" pos:end="309:72"><expr pos:start="307:25" pos:end="309:71"><call pos:start="307:25" pos:end="309:71"><name pos:start="307:25" pos:end="307:39">gen_mips16_save</name><argument_list pos:start="307:40" pos:end="309:71">(<argument pos:start="307:41" pos:end="307:43"><expr pos:start="307:41" pos:end="307:43"><name pos:start="307:41" pos:end="307:43">ctx</name></expr></argument>, <argument pos:start="307:46" pos:end="307:46"><expr pos:start="307:46" pos:end="307:46"><literal type="number" pos:start="307:46" pos:end="307:46">0</literal></expr></argument>, <argument pos:start="307:49" pos:end="307:49"><expr pos:start="307:49" pos:end="307:49"><literal type="number" pos:start="307:49" pos:end="307:49">0</literal></expr></argument>,

                                        <argument pos:start="309:41" pos:end="309:45"><expr pos:start="309:41" pos:end="309:45"><name pos:start="309:41" pos:end="309:45">do_ra</name></expr></argument>, <argument pos:start="309:48" pos:end="309:52"><expr pos:start="309:48" pos:end="309:52"><name pos:start="309:48" pos:end="309:52">do_s0</name></expr></argument>, <argument pos:start="309:55" pos:end="309:59"><expr pos:start="309:55" pos:end="309:59"><name pos:start="309:55" pos:end="309:59">do_s1</name></expr></argument>, <argument pos:start="309:62" pos:end="309:70"><expr pos:start="309:62" pos:end="309:70"><name pos:start="309:62" pos:end="309:70">framesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="311:23" pos:end="317:21">else <block pos:start="311:28" pos:end="317:21">{<block_content pos:start="313:25" pos:end="315:75">

                        <expr_stmt pos:start="313:25" pos:end="315:75"><expr pos:start="313:25" pos:end="315:74"><call pos:start="313:25" pos:end="315:74"><name pos:start="313:25" pos:end="313:42">gen_mips16_restore</name><argument_list pos:start="313:43" pos:end="315:74">(<argument pos:start="313:44" pos:end="313:46"><expr pos:start="313:44" pos:end="313:46"><name pos:start="313:44" pos:end="313:46">ctx</name></expr></argument>, <argument pos:start="313:49" pos:end="313:49"><expr pos:start="313:49" pos:end="313:49"><literal type="number" pos:start="313:49" pos:end="313:49">0</literal></expr></argument>, <argument pos:start="313:52" pos:end="313:52"><expr pos:start="313:52" pos:end="313:52"><literal type="number" pos:start="313:52" pos:end="313:52">0</literal></expr></argument>,

                                           <argument pos:start="315:44" pos:end="315:48"><expr pos:start="315:44" pos:end="315:48"><name pos:start="315:44" pos:end="315:48">do_ra</name></expr></argument>, <argument pos:start="315:51" pos:end="315:55"><expr pos:start="315:51" pos:end="315:55"><name pos:start="315:51" pos:end="315:55">do_s0</name></expr></argument>, <argument pos:start="315:58" pos:end="315:62"><expr pos:start="315:58" pos:end="315:62"><name pos:start="315:58" pos:end="315:62">do_s1</name></expr></argument>, <argument pos:start="315:65" pos:end="315:73"><expr pos:start="315:65" pos:end="315:73"><name pos:start="315:65" pos:end="315:73">framesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="321:17" pos:end="321:22">break;</break>

            <case pos:start="323:13" pos:end="323:27">case <expr pos:start="323:18" pos:end="323:26"><name pos:start="323:18" pos:end="323:26">I8_MOV32R</name></expr>:</case>

                <block pos:start="325:17" pos:end="337:17">{<block_content pos:start="327:21" pos:end="335:64">

                    <decl_stmt pos:start="327:21" pos:end="327:53"><decl pos:start="327:21" pos:end="327:52"><type pos:start="327:21" pos:end="327:23"><name pos:start="327:21" pos:end="327:23">int</name></type> <name pos:start="327:25" pos:end="327:26">rz</name> <init pos:start="327:28" pos:end="327:52">= <expr pos:start="327:30" pos:end="327:52"><call pos:start="327:30" pos:end="327:52"><name pos:start="327:30" pos:end="327:33">xlat</name><argument_list pos:start="327:34" pos:end="327:52">(<argument pos:start="327:35" pos:end="327:51"><expr pos:start="327:35" pos:end="327:51"><name pos:start="327:35" pos:end="327:45"><name pos:start="327:35" pos:end="327:37">ctx</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:45">opcode</name></name> <operator pos:start="327:47" pos:end="327:47">&amp;</operator> <literal type="number" pos:start="327:49" pos:end="327:51">0x7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="331:21" pos:end="333:51"><expr pos:start="331:21" pos:end="333:50"><name pos:start="331:21" pos:end="331:25">reg32</name> <operator pos:start="331:27" pos:end="331:27">=</operator> <operator pos:start="331:29" pos:end="331:29">(</operator><operator pos:start="331:30" pos:end="331:30">(</operator><operator pos:start="331:31" pos:end="331:31">(</operator><name pos:start="331:32" pos:end="331:42"><name pos:start="331:32" pos:end="331:34">ctx</name><operator pos:start="331:35" pos:end="331:36">-&gt;</operator><name pos:start="331:37" pos:end="331:42">opcode</name></name> <operator pos:start="331:44" pos:end="331:45">&gt;&gt;</operator> <literal type="number" pos:start="331:47" pos:end="331:47">3</literal><operator pos:start="331:48" pos:end="331:48">)</operator> <operator pos:start="331:50" pos:end="331:50">&amp;</operator> <literal type="number" pos:start="331:52" pos:end="331:54">0x3</literal><operator pos:start="331:55" pos:end="331:55">)</operator> <operator pos:start="331:57" pos:end="331:58">&lt;&lt;</operator> <literal type="number" pos:start="331:60" pos:end="331:60">3</literal><operator pos:start="331:61" pos:end="331:61">)</operator> <operator pos:start="331:63" pos:end="331:63">|</operator>

                        <operator pos:start="333:25" pos:end="333:25">(</operator><operator pos:start="333:26" pos:end="333:26">(</operator><name pos:start="333:27" pos:end="333:37"><name pos:start="333:27" pos:end="333:29">ctx</name><operator pos:start="333:30" pos:end="333:31">-&gt;</operator><name pos:start="333:32" pos:end="333:37">opcode</name></name> <operator pos:start="333:39" pos:end="333:40">&gt;&gt;</operator> <literal type="number" pos:start="333:42" pos:end="333:42">5</literal><operator pos:start="333:43" pos:end="333:43">)</operator> <operator pos:start="333:45" pos:end="333:45">&amp;</operator> <literal type="number" pos:start="333:47" pos:end="333:49">0x7</literal><operator pos:start="333:50" pos:end="333:50">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:64"><expr pos:start="335:21" pos:end="335:63"><call pos:start="335:21" pos:end="335:63"><name pos:start="335:21" pos:end="335:29">gen_arith</name><argument_list pos:start="335:30" pos:end="335:63">(<argument pos:start="335:31" pos:end="335:33"><expr pos:start="335:31" pos:end="335:33"><name pos:start="335:31" pos:end="335:33">env</name></expr></argument>, <argument pos:start="335:36" pos:end="335:38"><expr pos:start="335:36" pos:end="335:38"><name pos:start="335:36" pos:end="335:38">ctx</name></expr></argument>, <argument pos:start="335:41" pos:end="335:48"><expr pos:start="335:41" pos:end="335:48"><name pos:start="335:41" pos:end="335:48">OPC_ADDU</name></expr></argument>, <argument pos:start="335:51" pos:end="335:55"><expr pos:start="335:51" pos:end="335:55"><name pos:start="335:51" pos:end="335:55">reg32</name></expr></argument>, <argument pos:start="335:58" pos:end="335:59"><expr pos:start="335:58" pos:end="335:59"><name pos:start="335:58" pos:end="335:59">rz</name></expr></argument>, <argument pos:start="335:62" pos:end="335:62"><expr pos:start="335:62" pos:end="335:62"><literal type="number" pos:start="335:62" pos:end="335:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="339:17" pos:end="339:22">break;</break>

            <case pos:start="341:13" pos:end="341:27">case <expr pos:start="341:18" pos:end="341:26"><name pos:start="341:18" pos:end="341:26">I8_MOVR32</name></expr>:</case>

                <expr_stmt pos:start="343:17" pos:end="343:43"><expr pos:start="343:17" pos:end="343:42"><name pos:start="343:17" pos:end="343:21">reg32</name> <operator pos:start="343:23" pos:end="343:23">=</operator> <name pos:start="343:25" pos:end="343:35"><name pos:start="343:25" pos:end="343:27">ctx</name><operator pos:start="343:28" pos:end="343:29">-&gt;</operator><name pos:start="343:30" pos:end="343:35">opcode</name></name> <operator pos:start="343:37" pos:end="343:37">&amp;</operator> <literal type="number" pos:start="343:39" pos:end="343:42">0x1f</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:60"><expr pos:start="345:17" pos:end="345:59"><call pos:start="345:17" pos:end="345:59"><name pos:start="345:17" pos:end="345:25">gen_arith</name><argument_list pos:start="345:26" pos:end="345:59">(<argument pos:start="345:27" pos:end="345:29"><expr pos:start="345:27" pos:end="345:29"><name pos:start="345:27" pos:end="345:29">env</name></expr></argument>, <argument pos:start="345:32" pos:end="345:34"><expr pos:start="345:32" pos:end="345:34"><name pos:start="345:32" pos:end="345:34">ctx</name></expr></argument>, <argument pos:start="345:37" pos:end="345:44"><expr pos:start="345:37" pos:end="345:44"><name pos:start="345:37" pos:end="345:44">OPC_ADDU</name></expr></argument>, <argument pos:start="345:47" pos:end="345:48"><expr pos:start="345:47" pos:end="345:48"><name pos:start="345:47" pos:end="345:48">ry</name></expr></argument>, <argument pos:start="345:51" pos:end="345:55"><expr pos:start="345:51" pos:end="345:55"><name pos:start="345:51" pos:end="345:55">reg32</name></expr></argument>, <argument pos:start="345:58" pos:end="345:58"><expr pos:start="345:58" pos:end="345:58"><literal type="number" pos:start="345:58" pos:end="345:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="347:17" pos:end="347:22">break;</break>

            <default pos:start="349:13" pos:end="349:20">default:</default>

                <expr_stmt pos:start="351:17" pos:end="351:49"><expr pos:start="351:17" pos:end="351:48"><call pos:start="351:17" pos:end="351:48"><name pos:start="351:17" pos:end="351:34">generate_exception</name><argument_list pos:start="351:35" pos:end="351:48">(<argument pos:start="351:36" pos:end="351:38"><expr pos:start="351:36" pos:end="351:38"><name pos:start="351:36" pos:end="351:38">ctx</name></expr></argument>, <argument pos:start="351:41" pos:end="351:47"><expr pos:start="351:41" pos:end="351:47"><name pos:start="351:41" pos:end="351:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="353:17" pos:end="353:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="359:9" pos:end="359:14">break;</break>

    <case pos:start="361:5" pos:end="361:20">case <expr pos:start="361:10" pos:end="361:19"><name pos:start="361:10" pos:end="361:19">M16_OPC_LI</name></expr>:</case>

        <block pos:start="363:9" pos:end="371:9">{<block_content pos:start="365:13" pos:end="369:59">

            <decl_stmt pos:start="365:13" pos:end="365:48"><decl pos:start="365:13" pos:end="365:47"><type pos:start="365:13" pos:end="365:19"><name pos:start="365:13" pos:end="365:19">int16_t</name></type> <name pos:start="365:21" pos:end="365:23">imm</name> <init pos:start="365:25" pos:end="365:47">= <expr pos:start="365:27" pos:end="365:47"><operator pos:start="365:27" pos:end="365:27">(</operator><name pos:start="365:28" pos:end="365:34">uint8_t</name><operator pos:start="365:35" pos:end="365:35">)</operator> <name pos:start="365:37" pos:end="365:47"><name pos:start="365:37" pos:end="365:39">ctx</name><operator pos:start="365:40" pos:end="365:41">-&gt;</operator><name pos:start="365:42" pos:end="365:47">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="369:13" pos:end="369:59"><expr pos:start="369:13" pos:end="369:58"><call pos:start="369:13" pos:end="369:58"><name pos:start="369:13" pos:end="369:25">gen_arith_imm</name><argument_list pos:start="369:26" pos:end="369:58">(<argument pos:start="369:27" pos:end="369:29"><expr pos:start="369:27" pos:end="369:29"><name pos:start="369:27" pos:end="369:29">env</name></expr></argument>, <argument pos:start="369:32" pos:end="369:34"><expr pos:start="369:32" pos:end="369:34"><name pos:start="369:32" pos:end="369:34">ctx</name></expr></argument>, <argument pos:start="369:37" pos:end="369:45"><expr pos:start="369:37" pos:end="369:45"><name pos:start="369:37" pos:end="369:45">OPC_ADDIU</name></expr></argument>, <argument pos:start="369:48" pos:end="369:49"><expr pos:start="369:48" pos:end="369:49"><name pos:start="369:48" pos:end="369:49">rx</name></expr></argument>, <argument pos:start="369:52" pos:end="369:52"><expr pos:start="369:52" pos:end="369:52"><literal type="number" pos:start="369:52" pos:end="369:52">0</literal></expr></argument>, <argument pos:start="369:55" pos:end="369:57"><expr pos:start="369:55" pos:end="369:57"><name pos:start="369:55" pos:end="369:57">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:22">case <expr pos:start="375:10" pos:end="375:21"><name pos:start="375:10" pos:end="375:21">M16_OPC_CMPI</name></expr>:</case>

        <block pos:start="377:9" pos:end="385:9">{<block_content pos:start="379:13" pos:end="383:54">

            <decl_stmt pos:start="379:13" pos:end="379:48"><decl pos:start="379:13" pos:end="379:47"><type pos:start="379:13" pos:end="379:19"><name pos:start="379:13" pos:end="379:19">int16_t</name></type> <name pos:start="379:21" pos:end="379:23">imm</name> <init pos:start="379:25" pos:end="379:47">= <expr pos:start="379:27" pos:end="379:47"><operator pos:start="379:27" pos:end="379:27">(</operator><name pos:start="379:28" pos:end="379:34">uint8_t</name><operator pos:start="379:35" pos:end="379:35">)</operator> <name pos:start="379:37" pos:end="379:47"><name pos:start="379:37" pos:end="379:39">ctx</name><operator pos:start="379:40" pos:end="379:41">-&gt;</operator><name pos:start="379:42" pos:end="379:47">opcode</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="383:13" pos:end="383:54"><expr pos:start="383:13" pos:end="383:53"><call pos:start="383:13" pos:end="383:53"><name pos:start="383:13" pos:end="383:25">gen_logic_imm</name><argument_list pos:start="383:26" pos:end="383:53">(<argument pos:start="383:27" pos:end="383:29"><expr pos:start="383:27" pos:end="383:29"><name pos:start="383:27" pos:end="383:29">env</name></expr></argument>, <argument pos:start="383:32" pos:end="383:39"><expr pos:start="383:32" pos:end="383:39"><name pos:start="383:32" pos:end="383:39">OPC_XORI</name></expr></argument>, <argument pos:start="383:42" pos:end="383:43"><expr pos:start="383:42" pos:end="383:43"><literal type="number" pos:start="383:42" pos:end="383:43">24</literal></expr></argument>, <argument pos:start="383:46" pos:end="383:47"><expr pos:start="383:46" pos:end="383:47"><name pos:start="383:46" pos:end="383:47">rx</name></expr></argument>, <argument pos:start="383:50" pos:end="383:52"><expr pos:start="383:50" pos:end="383:52"><name pos:start="383:50" pos:end="383:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="387:9" pos:end="390:0">break;</break>

<cpp:if pos:start="389:1" pos:end="389:26">#<cpp:directive pos:start="389:2" pos:end="389:3">if</cpp:directive> <expr pos:start="389:5" pos:end="389:26"><call pos:start="389:5" pos:end="389:26"><name pos:start="389:5" pos:end="389:11">defined</name><argument_list pos:start="389:12" pos:end="389:26">(<argument pos:start="389:13" pos:end="389:25"><expr pos:start="389:13" pos:end="389:25"><name pos:start="389:13" pos:end="389:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="391:5" pos:end="391:20">case <expr pos:start="391:10" pos:end="391:19"><name pos:start="391:10" pos:end="391:19">M16_OPC_SD</name></expr>:</case>

        <expr_stmt pos:start="393:9" pos:end="393:27"><expr pos:start="393:9" pos:end="393:26"><call pos:start="393:9" pos:end="393:26"><name pos:start="393:9" pos:end="393:21">check_mips_64</name><argument_list pos:start="393:22" pos:end="393:26">(<argument pos:start="393:23" pos:end="393:25"><expr pos:start="393:23" pos:end="393:25"><name pos:start="393:23" pos:end="393:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:51"><expr pos:start="395:9" pos:end="395:50"><call pos:start="395:9" pos:end="395:50"><name pos:start="395:9" pos:end="395:16">gen_ldst</name><argument_list pos:start="395:17" pos:end="395:50">(<argument pos:start="395:18" pos:end="395:20"><expr pos:start="395:18" pos:end="395:20"><name pos:start="395:18" pos:end="395:20">ctx</name></expr></argument>, <argument pos:start="395:23" pos:end="395:28"><expr pos:start="395:23" pos:end="395:28"><name pos:start="395:23" pos:end="395:28">OPC_SD</name></expr></argument>, <argument pos:start="395:31" pos:end="395:32"><expr pos:start="395:31" pos:end="395:32"><name pos:start="395:31" pos:end="395:32">ry</name></expr></argument>, <argument pos:start="395:35" pos:end="395:36"><expr pos:start="395:35" pos:end="395:36"><name pos:start="395:35" pos:end="395:36">rx</name></expr></argument>, <argument pos:start="395:39" pos:end="395:49"><expr pos:start="395:39" pos:end="395:49"><name pos:start="395:39" pos:end="395:44">offset</name> <operator pos:start="395:46" pos:end="395:47">&lt;&lt;</operator> <literal type="number" pos:start="395:49" pos:end="395:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="397:9" pos:end="400:0">break;</break>

<cpp:endif pos:start="399:1" pos:end="399:6">#<cpp:directive pos:start="399:2" pos:end="399:6">endif</cpp:directive></cpp:endif>

    <case pos:start="401:5" pos:end="401:20">case <expr pos:start="401:10" pos:end="401:19"><name pos:start="401:10" pos:end="401:19">M16_OPC_LB</name></expr>:</case>

        <expr_stmt pos:start="403:9" pos:end="403:46"><expr pos:start="403:9" pos:end="403:45"><call pos:start="403:9" pos:end="403:45"><name pos:start="403:9" pos:end="403:16">gen_ldst</name><argument_list pos:start="403:17" pos:end="403:45">(<argument pos:start="403:18" pos:end="403:20"><expr pos:start="403:18" pos:end="403:20"><name pos:start="403:18" pos:end="403:20">ctx</name></expr></argument>, <argument pos:start="403:23" pos:end="403:28"><expr pos:start="403:23" pos:end="403:28"><name pos:start="403:23" pos:end="403:28">OPC_LB</name></expr></argument>, <argument pos:start="403:31" pos:end="403:32"><expr pos:start="403:31" pos:end="403:32"><name pos:start="403:31" pos:end="403:32">ry</name></expr></argument>, <argument pos:start="403:35" pos:end="403:36"><expr pos:start="403:35" pos:end="403:36"><name pos:start="403:35" pos:end="403:36">rx</name></expr></argument>, <argument pos:start="403:39" pos:end="403:44"><expr pos:start="403:39" pos:end="403:44"><name pos:start="403:39" pos:end="403:44">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="405:9" pos:end="405:14">break;</break>

    <case pos:start="407:5" pos:end="407:20">case <expr pos:start="407:10" pos:end="407:19"><name pos:start="407:10" pos:end="407:19">M16_OPC_LH</name></expr>:</case>

        <expr_stmt pos:start="409:9" pos:end="409:51"><expr pos:start="409:9" pos:end="409:50"><call pos:start="409:9" pos:end="409:50"><name pos:start="409:9" pos:end="409:16">gen_ldst</name><argument_list pos:start="409:17" pos:end="409:50">(<argument pos:start="409:18" pos:end="409:20"><expr pos:start="409:18" pos:end="409:20"><name pos:start="409:18" pos:end="409:20">ctx</name></expr></argument>, <argument pos:start="409:23" pos:end="409:28"><expr pos:start="409:23" pos:end="409:28"><name pos:start="409:23" pos:end="409:28">OPC_LH</name></expr></argument>, <argument pos:start="409:31" pos:end="409:32"><expr pos:start="409:31" pos:end="409:32"><name pos:start="409:31" pos:end="409:32">ry</name></expr></argument>, <argument pos:start="409:35" pos:end="409:36"><expr pos:start="409:35" pos:end="409:36"><name pos:start="409:35" pos:end="409:36">rx</name></expr></argument>, <argument pos:start="409:39" pos:end="409:49"><expr pos:start="409:39" pos:end="409:49"><name pos:start="409:39" pos:end="409:44">offset</name> <operator pos:start="409:46" pos:end="409:47">&lt;&lt;</operator> <literal type="number" pos:start="409:49" pos:end="409:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="411:9" pos:end="411:14">break;</break>

    <case pos:start="413:5" pos:end="413:22">case <expr pos:start="413:10" pos:end="413:21"><name pos:start="413:10" pos:end="413:21">M16_OPC_LWSP</name></expr>:</case>

        <expr_stmt pos:start="415:9" pos:end="415:67"><expr pos:start="415:9" pos:end="415:66"><call pos:start="415:9" pos:end="415:66"><name pos:start="415:9" pos:end="415:16">gen_ldst</name><argument_list pos:start="415:17" pos:end="415:66">(<argument pos:start="415:18" pos:end="415:20"><expr pos:start="415:18" pos:end="415:20"><name pos:start="415:18" pos:end="415:20">ctx</name></expr></argument>, <argument pos:start="415:23" pos:end="415:28"><expr pos:start="415:23" pos:end="415:28"><name pos:start="415:23" pos:end="415:28">OPC_LW</name></expr></argument>, <argument pos:start="415:31" pos:end="415:32"><expr pos:start="415:31" pos:end="415:32"><name pos:start="415:31" pos:end="415:32">rx</name></expr></argument>, <argument pos:start="415:35" pos:end="415:36"><expr pos:start="415:35" pos:end="415:36"><literal type="number" pos:start="415:35" pos:end="415:36">29</literal></expr></argument>, <argument pos:start="415:39" pos:end="415:65"><expr pos:start="415:39" pos:end="415:65"><operator pos:start="415:39" pos:end="415:39">(</operator><operator pos:start="415:40" pos:end="415:40">(</operator><name pos:start="415:41" pos:end="415:47">uint8_t</name><operator pos:start="415:48" pos:end="415:48">)</operator><name pos:start="415:49" pos:end="415:59"><name pos:start="415:49" pos:end="415:51">ctx</name><operator pos:start="415:52" pos:end="415:53">-&gt;</operator><name pos:start="415:54" pos:end="415:59">opcode</name></name><operator pos:start="415:60" pos:end="415:60">)</operator> <operator pos:start="415:62" pos:end="415:63">&lt;&lt;</operator> <literal type="number" pos:start="415:65" pos:end="415:65">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="417:9" pos:end="417:14">break;</break>

    <case pos:start="419:5" pos:end="419:20">case <expr pos:start="419:10" pos:end="419:19"><name pos:start="419:10" pos:end="419:19">M16_OPC_LW</name></expr>:</case>

        <expr_stmt pos:start="421:9" pos:end="421:51"><expr pos:start="421:9" pos:end="421:50"><call pos:start="421:9" pos:end="421:50"><name pos:start="421:9" pos:end="421:16">gen_ldst</name><argument_list pos:start="421:17" pos:end="421:50">(<argument pos:start="421:18" pos:end="421:20"><expr pos:start="421:18" pos:end="421:20"><name pos:start="421:18" pos:end="421:20">ctx</name></expr></argument>, <argument pos:start="421:23" pos:end="421:28"><expr pos:start="421:23" pos:end="421:28"><name pos:start="421:23" pos:end="421:28">OPC_LW</name></expr></argument>, <argument pos:start="421:31" pos:end="421:32"><expr pos:start="421:31" pos:end="421:32"><name pos:start="421:31" pos:end="421:32">ry</name></expr></argument>, <argument pos:start="421:35" pos:end="421:36"><expr pos:start="421:35" pos:end="421:36"><name pos:start="421:35" pos:end="421:36">rx</name></expr></argument>, <argument pos:start="421:39" pos:end="421:49"><expr pos:start="421:39" pos:end="421:49"><name pos:start="421:39" pos:end="421:44">offset</name> <operator pos:start="421:46" pos:end="421:47">&lt;&lt;</operator> <literal type="number" pos:start="421:49" pos:end="421:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="423:9" pos:end="423:14">break;</break>

    <case pos:start="425:5" pos:end="425:21">case <expr pos:start="425:10" pos:end="425:20"><name pos:start="425:10" pos:end="425:20">M16_OPC_LBU</name></expr>:</case>

        <expr_stmt pos:start="427:9" pos:end="427:47"><expr pos:start="427:9" pos:end="427:46"><call pos:start="427:9" pos:end="427:46"><name pos:start="427:9" pos:end="427:16">gen_ldst</name><argument_list pos:start="427:17" pos:end="427:46">(<argument pos:start="427:18" pos:end="427:20"><expr pos:start="427:18" pos:end="427:20"><name pos:start="427:18" pos:end="427:20">ctx</name></expr></argument>, <argument pos:start="427:23" pos:end="427:29"><expr pos:start="427:23" pos:end="427:29"><name pos:start="427:23" pos:end="427:29">OPC_LBU</name></expr></argument>, <argument pos:start="427:32" pos:end="427:33"><expr pos:start="427:32" pos:end="427:33"><name pos:start="427:32" pos:end="427:33">ry</name></expr></argument>, <argument pos:start="427:36" pos:end="427:37"><expr pos:start="427:36" pos:end="427:37"><name pos:start="427:36" pos:end="427:37">rx</name></expr></argument>, <argument pos:start="427:40" pos:end="427:45"><expr pos:start="427:40" pos:end="427:45"><name pos:start="427:40" pos:end="427:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="429:9" pos:end="429:14">break;</break>

    <case pos:start="431:5" pos:end="431:21">case <expr pos:start="431:10" pos:end="431:20"><name pos:start="431:10" pos:end="431:20">M16_OPC_LHU</name></expr>:</case>

        <expr_stmt pos:start="433:9" pos:end="433:52"><expr pos:start="433:9" pos:end="433:51"><call pos:start="433:9" pos:end="433:51"><name pos:start="433:9" pos:end="433:16">gen_ldst</name><argument_list pos:start="433:17" pos:end="433:51">(<argument pos:start="433:18" pos:end="433:20"><expr pos:start="433:18" pos:end="433:20"><name pos:start="433:18" pos:end="433:20">ctx</name></expr></argument>, <argument pos:start="433:23" pos:end="433:29"><expr pos:start="433:23" pos:end="433:29"><name pos:start="433:23" pos:end="433:29">OPC_LHU</name></expr></argument>, <argument pos:start="433:32" pos:end="433:33"><expr pos:start="433:32" pos:end="433:33"><name pos:start="433:32" pos:end="433:33">ry</name></expr></argument>, <argument pos:start="433:36" pos:end="433:37"><expr pos:start="433:36" pos:end="433:37"><name pos:start="433:36" pos:end="433:37">rx</name></expr></argument>, <argument pos:start="433:40" pos:end="433:50"><expr pos:start="433:40" pos:end="433:50"><name pos:start="433:40" pos:end="433:45">offset</name> <operator pos:start="433:47" pos:end="433:48">&lt;&lt;</operator> <literal type="number" pos:start="433:50" pos:end="433:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="435:9" pos:end="435:14">break;</break>

    <case pos:start="437:5" pos:end="437:22">case <expr pos:start="437:10" pos:end="437:21"><name pos:start="437:10" pos:end="437:21">M16_OPC_LWPC</name></expr>:</case>

        <expr_stmt pos:start="439:9" pos:end="439:68"><expr pos:start="439:9" pos:end="439:67"><call pos:start="439:9" pos:end="439:67"><name pos:start="439:9" pos:end="439:16">gen_ldst</name><argument_list pos:start="439:17" pos:end="439:67">(<argument pos:start="439:18" pos:end="439:20"><expr pos:start="439:18" pos:end="439:20"><name pos:start="439:18" pos:end="439:20">ctx</name></expr></argument>, <argument pos:start="439:23" pos:end="439:30"><expr pos:start="439:23" pos:end="439:30"><name pos:start="439:23" pos:end="439:30">OPC_LWPC</name></expr></argument>, <argument pos:start="439:33" pos:end="439:34"><expr pos:start="439:33" pos:end="439:34"><name pos:start="439:33" pos:end="439:34">rx</name></expr></argument>, <argument pos:start="439:37" pos:end="439:37"><expr pos:start="439:37" pos:end="439:37"><literal type="number" pos:start="439:37" pos:end="439:37">0</literal></expr></argument>, <argument pos:start="439:40" pos:end="439:66"><expr pos:start="439:40" pos:end="439:66"><operator pos:start="439:40" pos:end="439:40">(</operator><operator pos:start="439:41" pos:end="439:41">(</operator><name pos:start="439:42" pos:end="439:48">uint8_t</name><operator pos:start="439:49" pos:end="439:49">)</operator><name pos:start="439:50" pos:end="439:60"><name pos:start="439:50" pos:end="439:52">ctx</name><operator pos:start="439:53" pos:end="439:54">-&gt;</operator><name pos:start="439:55" pos:end="439:60">opcode</name></name><operator pos:start="439:61" pos:end="439:61">)</operator> <operator pos:start="439:63" pos:end="439:64">&lt;&lt;</operator> <literal type="number" pos:start="439:66" pos:end="439:66">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="441:9" pos:end="444:0">break;</break>

<cpp:if pos:start="443:1" pos:end="443:27">#<cpp:directive pos:start="443:2" pos:end="443:3">if</cpp:directive> <expr pos:start="443:5" pos:end="443:27"><call pos:start="443:5" pos:end="443:27"><name pos:start="443:5" pos:end="443:11">defined</name> <argument_list pos:start="443:13" pos:end="443:27">(<argument pos:start="443:14" pos:end="443:26"><expr pos:start="443:14" pos:end="443:26"><name pos:start="443:14" pos:end="443:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="445:5" pos:end="445:21">case <expr pos:start="445:10" pos:end="445:20"><name pos:start="445:10" pos:end="445:20">M16_OPC_LWU</name></expr>:</case>

        <expr_stmt pos:start="447:9" pos:end="447:27"><expr pos:start="447:9" pos:end="447:26"><call pos:start="447:9" pos:end="447:26"><name pos:start="447:9" pos:end="447:21">check_mips_64</name><argument_list pos:start="447:22" pos:end="447:26">(<argument pos:start="447:23" pos:end="447:25"><expr pos:start="447:23" pos:end="447:25"><name pos:start="447:23" pos:end="447:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:52"><expr pos:start="449:9" pos:end="449:51"><call pos:start="449:9" pos:end="449:51"><name pos:start="449:9" pos:end="449:16">gen_ldst</name><argument_list pos:start="449:17" pos:end="449:51">(<argument pos:start="449:18" pos:end="449:20"><expr pos:start="449:18" pos:end="449:20"><name pos:start="449:18" pos:end="449:20">ctx</name></expr></argument>, <argument pos:start="449:23" pos:end="449:29"><expr pos:start="449:23" pos:end="449:29"><name pos:start="449:23" pos:end="449:29">OPC_LWU</name></expr></argument>, <argument pos:start="449:32" pos:end="449:33"><expr pos:start="449:32" pos:end="449:33"><name pos:start="449:32" pos:end="449:33">ry</name></expr></argument>, <argument pos:start="449:36" pos:end="449:37"><expr pos:start="449:36" pos:end="449:37"><name pos:start="449:36" pos:end="449:37">rx</name></expr></argument>, <argument pos:start="449:40" pos:end="449:50"><expr pos:start="449:40" pos:end="449:50"><name pos:start="449:40" pos:end="449:45">offset</name> <operator pos:start="449:47" pos:end="449:48">&lt;&lt;</operator> <literal type="number" pos:start="449:50" pos:end="449:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="451:9" pos:end="454:0">break;</break>

<cpp:endif pos:start="453:1" pos:end="453:6">#<cpp:directive pos:start="453:2" pos:end="453:6">endif</cpp:directive></cpp:endif>

    <case pos:start="455:5" pos:end="455:20">case <expr pos:start="455:10" pos:end="455:19"><name pos:start="455:10" pos:end="455:19">M16_OPC_SB</name></expr>:</case>

        <expr_stmt pos:start="457:9" pos:end="457:46"><expr pos:start="457:9" pos:end="457:45"><call pos:start="457:9" pos:end="457:45"><name pos:start="457:9" pos:end="457:16">gen_ldst</name><argument_list pos:start="457:17" pos:end="457:45">(<argument pos:start="457:18" pos:end="457:20"><expr pos:start="457:18" pos:end="457:20"><name pos:start="457:18" pos:end="457:20">ctx</name></expr></argument>, <argument pos:start="457:23" pos:end="457:28"><expr pos:start="457:23" pos:end="457:28"><name pos:start="457:23" pos:end="457:28">OPC_SB</name></expr></argument>, <argument pos:start="457:31" pos:end="457:32"><expr pos:start="457:31" pos:end="457:32"><name pos:start="457:31" pos:end="457:32">ry</name></expr></argument>, <argument pos:start="457:35" pos:end="457:36"><expr pos:start="457:35" pos:end="457:36"><name pos:start="457:35" pos:end="457:36">rx</name></expr></argument>, <argument pos:start="457:39" pos:end="457:44"><expr pos:start="457:39" pos:end="457:44"><name pos:start="457:39" pos:end="457:44">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="459:9" pos:end="459:14">break;</break>

    <case pos:start="461:5" pos:end="461:20">case <expr pos:start="461:10" pos:end="461:19"><name pos:start="461:10" pos:end="461:19">M16_OPC_SH</name></expr>:</case>

        <expr_stmt pos:start="463:9" pos:end="463:51"><expr pos:start="463:9" pos:end="463:50"><call pos:start="463:9" pos:end="463:50"><name pos:start="463:9" pos:end="463:16">gen_ldst</name><argument_list pos:start="463:17" pos:end="463:50">(<argument pos:start="463:18" pos:end="463:20"><expr pos:start="463:18" pos:end="463:20"><name pos:start="463:18" pos:end="463:20">ctx</name></expr></argument>, <argument pos:start="463:23" pos:end="463:28"><expr pos:start="463:23" pos:end="463:28"><name pos:start="463:23" pos:end="463:28">OPC_SH</name></expr></argument>, <argument pos:start="463:31" pos:end="463:32"><expr pos:start="463:31" pos:end="463:32"><name pos:start="463:31" pos:end="463:32">ry</name></expr></argument>, <argument pos:start="463:35" pos:end="463:36"><expr pos:start="463:35" pos:end="463:36"><name pos:start="463:35" pos:end="463:36">rx</name></expr></argument>, <argument pos:start="463:39" pos:end="463:49"><expr pos:start="463:39" pos:end="463:49"><name pos:start="463:39" pos:end="463:44">offset</name> <operator pos:start="463:46" pos:end="463:47">&lt;&lt;</operator> <literal type="number" pos:start="463:49" pos:end="463:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="465:9" pos:end="465:14">break;</break>

    <case pos:start="467:5" pos:end="467:22">case <expr pos:start="467:10" pos:end="467:21"><name pos:start="467:10" pos:end="467:21">M16_OPC_SWSP</name></expr>:</case>

        <expr_stmt pos:start="469:9" pos:end="469:67"><expr pos:start="469:9" pos:end="469:66"><call pos:start="469:9" pos:end="469:66"><name pos:start="469:9" pos:end="469:16">gen_ldst</name><argument_list pos:start="469:17" pos:end="469:66">(<argument pos:start="469:18" pos:end="469:20"><expr pos:start="469:18" pos:end="469:20"><name pos:start="469:18" pos:end="469:20">ctx</name></expr></argument>, <argument pos:start="469:23" pos:end="469:28"><expr pos:start="469:23" pos:end="469:28"><name pos:start="469:23" pos:end="469:28">OPC_SW</name></expr></argument>, <argument pos:start="469:31" pos:end="469:32"><expr pos:start="469:31" pos:end="469:32"><name pos:start="469:31" pos:end="469:32">rx</name></expr></argument>, <argument pos:start="469:35" pos:end="469:36"><expr pos:start="469:35" pos:end="469:36"><literal type="number" pos:start="469:35" pos:end="469:36">29</literal></expr></argument>, <argument pos:start="469:39" pos:end="469:65"><expr pos:start="469:39" pos:end="469:65"><operator pos:start="469:39" pos:end="469:39">(</operator><operator pos:start="469:40" pos:end="469:40">(</operator><name pos:start="469:41" pos:end="469:47">uint8_t</name><operator pos:start="469:48" pos:end="469:48">)</operator><name pos:start="469:49" pos:end="469:59"><name pos:start="469:49" pos:end="469:51">ctx</name><operator pos:start="469:52" pos:end="469:53">-&gt;</operator><name pos:start="469:54" pos:end="469:59">opcode</name></name><operator pos:start="469:60" pos:end="469:60">)</operator> <operator pos:start="469:62" pos:end="469:63">&lt;&lt;</operator> <literal type="number" pos:start="469:65" pos:end="469:65">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="471:9" pos:end="471:14">break;</break>

    <case pos:start="473:5" pos:end="473:20">case <expr pos:start="473:10" pos:end="473:19"><name pos:start="473:10" pos:end="473:19">M16_OPC_SW</name></expr>:</case>

        <expr_stmt pos:start="475:9" pos:end="475:51"><expr pos:start="475:9" pos:end="475:50"><call pos:start="475:9" pos:end="475:50"><name pos:start="475:9" pos:end="475:16">gen_ldst</name><argument_list pos:start="475:17" pos:end="475:50">(<argument pos:start="475:18" pos:end="475:20"><expr pos:start="475:18" pos:end="475:20"><name pos:start="475:18" pos:end="475:20">ctx</name></expr></argument>, <argument pos:start="475:23" pos:end="475:28"><expr pos:start="475:23" pos:end="475:28"><name pos:start="475:23" pos:end="475:28">OPC_SW</name></expr></argument>, <argument pos:start="475:31" pos:end="475:32"><expr pos:start="475:31" pos:end="475:32"><name pos:start="475:31" pos:end="475:32">ry</name></expr></argument>, <argument pos:start="475:35" pos:end="475:36"><expr pos:start="475:35" pos:end="475:36"><name pos:start="475:35" pos:end="475:36">rx</name></expr></argument>, <argument pos:start="475:39" pos:end="475:49"><expr pos:start="475:39" pos:end="475:49"><name pos:start="475:39" pos:end="475:44">offset</name> <operator pos:start="475:46" pos:end="475:47">&lt;&lt;</operator> <literal type="number" pos:start="475:49" pos:end="475:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="477:9" pos:end="477:14">break;</break>

    <case pos:start="479:5" pos:end="479:21">case <expr pos:start="479:10" pos:end="479:20"><name pos:start="479:10" pos:end="479:20">M16_OPC_RRR</name></expr>:</case>

        <block pos:start="481:9" pos:end="539:9">{<block_content pos:start="483:13" pos:end="537:13">

            <decl_stmt pos:start="483:13" pos:end="483:52"><decl pos:start="483:13" pos:end="483:51"><type pos:start="483:13" pos:end="483:15"><name pos:start="483:13" pos:end="483:15">int</name></type> <name pos:start="483:17" pos:end="483:18">rz</name> <init pos:start="483:20" pos:end="483:51">= <expr pos:start="483:22" pos:end="483:51"><call pos:start="483:22" pos:end="483:51"><name pos:start="483:22" pos:end="483:25">xlat</name><argument_list pos:start="483:26" pos:end="483:51">(<argument pos:start="483:27" pos:end="483:50"><expr pos:start="483:27" pos:end="483:50"><operator pos:start="483:27" pos:end="483:27">(</operator><name pos:start="483:28" pos:end="483:38"><name pos:start="483:28" pos:end="483:30">ctx</name><operator pos:start="483:31" pos:end="483:32">-&gt;</operator><name pos:start="483:33" pos:end="483:38">opcode</name></name> <operator pos:start="483:40" pos:end="483:41">&gt;&gt;</operator> <literal type="number" pos:start="483:43" pos:end="483:43">2</literal><operator pos:start="483:44" pos:end="483:44">)</operator> <operator pos:start="483:46" pos:end="483:46">&amp;</operator> <literal type="number" pos:start="483:48" pos:end="483:50">0x7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="485:13" pos:end="485:26"><decl pos:start="485:13" pos:end="485:25"><type pos:start="485:13" pos:end="485:15"><name pos:start="485:13" pos:end="485:15">int</name></type> <name pos:start="485:17" pos:end="485:25">mips32_op</name></decl>;</decl_stmt>



            <switch pos:start="489:13" pos:end="529:13">switch <condition pos:start="489:20" pos:end="489:38">(<expr pos:start="489:21" pos:end="489:37"><name pos:start="489:21" pos:end="489:31"><name pos:start="489:21" pos:end="489:23">ctx</name><operator pos:start="489:24" pos:end="489:25">-&gt;</operator><name pos:start="489:26" pos:end="489:31">opcode</name></name> <operator pos:start="489:33" pos:end="489:33">&amp;</operator> <literal type="number" pos:start="489:35" pos:end="489:37">0x3</literal></expr>)</condition> <block pos:start="489:40" pos:end="529:13">{<block_content pos:start="491:13" pos:end="527:26">

            <case pos:start="491:13" pos:end="491:26">case <expr pos:start="491:18" pos:end="491:25"><name pos:start="491:18" pos:end="491:25">RRR_ADDU</name></expr>:</case>

                <expr_stmt pos:start="493:17" pos:end="493:37"><expr pos:start="493:17" pos:end="493:36"><name pos:start="493:17" pos:end="493:25">mips32_op</name> <operator pos:start="493:27" pos:end="493:27">=</operator> <name pos:start="493:29" pos:end="493:36">OPC_ADDU</name></expr>;</expr_stmt>

                <break pos:start="495:17" pos:end="495:22">break;</break>

            <case pos:start="497:13" pos:end="497:26">case <expr pos:start="497:18" pos:end="497:25"><name pos:start="497:18" pos:end="497:25">RRR_SUBU</name></expr>:</case>

                <expr_stmt pos:start="499:17" pos:end="499:37"><expr pos:start="499:17" pos:end="499:36"><name pos:start="499:17" pos:end="499:25">mips32_op</name> <operator pos:start="499:27" pos:end="499:27">=</operator> <name pos:start="499:29" pos:end="499:36">OPC_SUBU</name></expr>;</expr_stmt>

                <break pos:start="501:17" pos:end="504:0">break;</break>

<cpp:if pos:start="503:1" pos:end="503:26">#<cpp:directive pos:start="503:2" pos:end="503:3">if</cpp:directive> <expr pos:start="503:5" pos:end="503:26"><call pos:start="503:5" pos:end="503:26"><name pos:start="503:5" pos:end="503:11">defined</name><argument_list pos:start="503:12" pos:end="503:26">(<argument pos:start="503:13" pos:end="503:25"><expr pos:start="503:13" pos:end="503:25"><name pos:start="503:13" pos:end="503:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <case pos:start="505:13" pos:end="505:27">case <expr pos:start="505:18" pos:end="505:26"><name pos:start="505:18" pos:end="505:26">RRR_DADDU</name></expr>:</case>

                <expr_stmt pos:start="507:17" pos:end="507:38"><expr pos:start="507:17" pos:end="507:37"><name pos:start="507:17" pos:end="507:25">mips32_op</name> <operator pos:start="507:27" pos:end="507:27">=</operator> <name pos:start="507:29" pos:end="507:37">OPC_DADDU</name></expr>;</expr_stmt>

                <expr_stmt pos:start="509:17" pos:end="509:35"><expr pos:start="509:17" pos:end="509:34"><call pos:start="509:17" pos:end="509:34"><name pos:start="509:17" pos:end="509:29">check_mips_64</name><argument_list pos:start="509:30" pos:end="509:34">(<argument pos:start="509:31" pos:end="509:33"><expr pos:start="509:31" pos:end="509:33"><name pos:start="509:31" pos:end="509:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="511:17" pos:end="511:22">break;</break>

            <case pos:start="513:13" pos:end="513:27">case <expr pos:start="513:18" pos:end="513:26"><name pos:start="513:18" pos:end="513:26">RRR_DSUBU</name></expr>:</case>

                <expr_stmt pos:start="515:17" pos:end="515:38"><expr pos:start="515:17" pos:end="515:37"><name pos:start="515:17" pos:end="515:25">mips32_op</name> <operator pos:start="515:27" pos:end="515:27">=</operator> <name pos:start="515:29" pos:end="515:37">OPC_DSUBU</name></expr>;</expr_stmt>

                <expr_stmt pos:start="517:17" pos:end="517:35"><expr pos:start="517:17" pos:end="517:34"><call pos:start="517:17" pos:end="517:34"><name pos:start="517:17" pos:end="517:29">check_mips_64</name><argument_list pos:start="517:30" pos:end="517:34">(<argument pos:start="517:31" pos:end="517:33"><expr pos:start="517:31" pos:end="517:33"><name pos:start="517:31" pos:end="517:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="519:17" pos:end="522:0">break;</break>

<cpp:endif pos:start="521:1" pos:end="521:6">#<cpp:directive pos:start="521:2" pos:end="521:6">endif</cpp:directive></cpp:endif>

            <default pos:start="523:13" pos:end="523:20">default:</default>

                <expr_stmt pos:start="525:17" pos:end="525:49"><expr pos:start="525:17" pos:end="525:48"><call pos:start="525:17" pos:end="525:48"><name pos:start="525:17" pos:end="525:34">generate_exception</name><argument_list pos:start="525:35" pos:end="525:48">(<argument pos:start="525:36" pos:end="525:38"><expr pos:start="525:36" pos:end="525:38"><name pos:start="525:36" pos:end="525:38">ctx</name></expr></argument>, <argument pos:start="525:41" pos:end="525:47"><expr pos:start="525:41" pos:end="525:47"><name pos:start="525:41" pos:end="525:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="527:17" pos:end="527:26">goto <name pos:start="527:22" pos:end="527:25">done</name>;</goto>

            </block_content>}</block></switch>



            <expr_stmt pos:start="533:13" pos:end="533:55"><expr pos:start="533:13" pos:end="533:54"><call pos:start="533:13" pos:end="533:54"><name pos:start="533:13" pos:end="533:21">gen_arith</name><argument_list pos:start="533:22" pos:end="533:54">(<argument pos:start="533:23" pos:end="533:25"><expr pos:start="533:23" pos:end="533:25"><name pos:start="533:23" pos:end="533:25">env</name></expr></argument>, <argument pos:start="533:28" pos:end="533:30"><expr pos:start="533:28" pos:end="533:30"><name pos:start="533:28" pos:end="533:30">ctx</name></expr></argument>, <argument pos:start="533:33" pos:end="533:41"><expr pos:start="533:33" pos:end="533:41"><name pos:start="533:33" pos:end="533:41">mips32_op</name></expr></argument>, <argument pos:start="533:44" pos:end="533:45"><expr pos:start="533:44" pos:end="533:45"><name pos:start="533:44" pos:end="533:45">rz</name></expr></argument>, <argument pos:start="533:48" pos:end="533:49"><expr pos:start="533:48" pos:end="533:49"><name pos:start="533:48" pos:end="533:49">rx</name></expr></argument>, <argument pos:start="533:52" pos:end="533:53"><expr pos:start="533:52" pos:end="533:53"><name pos:start="533:52" pos:end="533:53">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="535:9" pos:end="535:13"><name pos:start="535:9" pos:end="535:12">done</name>:</label>

            <empty_stmt pos:start="537:13" pos:end="537:13">;</empty_stmt>

        </block_content>}</block>

        <break pos:start="541:9" pos:end="541:14">break;</break>

    <case pos:start="543:5" pos:end="543:20">case <expr pos:start="543:10" pos:end="543:19"><name pos:start="543:10" pos:end="543:19">M16_OPC_RR</name></expr>:</case>

        <switch pos:start="545:9" pos:end="861:9">switch <condition pos:start="545:16" pos:end="545:20">(<expr pos:start="545:17" pos:end="545:19"><name pos:start="545:17" pos:end="545:19">op1</name></expr>)</condition> <block pos:start="545:22" pos:end="861:9">{<block_content pos:start="547:9" pos:end="859:18">

        <case pos:start="547:9" pos:end="547:19">case <expr pos:start="547:14" pos:end="547:18"><name pos:start="547:14" pos:end="547:18">RR_JR</name></expr>:</case>

            <block pos:start="549:13" pos:end="579:13">{<block_content pos:start="551:17" pos:end="577:17">

                <decl_stmt pos:start="551:17" pos:end="551:50"><decl pos:start="551:17" pos:end="551:49"><type pos:start="551:17" pos:end="551:19"><name pos:start="551:17" pos:end="551:19">int</name></type> <name pos:start="551:21" pos:end="551:22">nd</name> <init pos:start="551:24" pos:end="551:49">= <expr pos:start="551:26" pos:end="551:49"><operator pos:start="551:26" pos:end="551:26">(</operator><name pos:start="551:27" pos:end="551:37"><name pos:start="551:27" pos:end="551:29">ctx</name><operator pos:start="551:30" pos:end="551:31">-&gt;</operator><name pos:start="551:32" pos:end="551:37">opcode</name></name> <operator pos:start="551:39" pos:end="551:40">&gt;&gt;</operator> <literal type="number" pos:start="551:42" pos:end="551:42">7</literal><operator pos:start="551:43" pos:end="551:43">)</operator> <operator pos:start="551:45" pos:end="551:45">&amp;</operator> <literal type="number" pos:start="551:47" pos:end="551:49">0x1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="553:17" pos:end="553:52"><decl pos:start="553:17" pos:end="553:51"><type pos:start="553:17" pos:end="553:19"><name pos:start="553:17" pos:end="553:19">int</name></type> <name pos:start="553:21" pos:end="553:24">link</name> <init pos:start="553:26" pos:end="553:51">= <expr pos:start="553:28" pos:end="553:51"><operator pos:start="553:28" pos:end="553:28">(</operator><name pos:start="553:29" pos:end="553:39"><name pos:start="553:29" pos:end="553:31">ctx</name><operator pos:start="553:32" pos:end="553:33">-&gt;</operator><name pos:start="553:34" pos:end="553:39">opcode</name></name> <operator pos:start="553:41" pos:end="553:42">&gt;&gt;</operator> <literal type="number" pos:start="553:44" pos:end="553:44">6</literal><operator pos:start="553:45" pos:end="553:45">)</operator> <operator pos:start="553:47" pos:end="553:47">&amp;</operator> <literal type="number" pos:start="553:49" pos:end="553:51">0x1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="555:17" pos:end="555:50"><decl pos:start="555:17" pos:end="555:49"><type pos:start="555:17" pos:end="555:19"><name pos:start="555:17" pos:end="555:19">int</name></type> <name pos:start="555:21" pos:end="555:22">ra</name> <init pos:start="555:24" pos:end="555:49">= <expr pos:start="555:26" pos:end="555:49"><operator pos:start="555:26" pos:end="555:26">(</operator><name pos:start="555:27" pos:end="555:37"><name pos:start="555:27" pos:end="555:29">ctx</name><operator pos:start="555:30" pos:end="555:31">-&gt;</operator><name pos:start="555:32" pos:end="555:37">opcode</name></name> <operator pos:start="555:39" pos:end="555:40">&gt;&gt;</operator> <literal type="number" pos:start="555:42" pos:end="555:42">5</literal><operator pos:start="555:43" pos:end="555:43">)</operator> <operator pos:start="555:45" pos:end="555:45">&amp;</operator> <literal type="number" pos:start="555:47" pos:end="555:49">0x1</literal></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="559:17" pos:end="567:17"><if pos:start="559:17" pos:end="563:17">if <condition pos:start="559:20" pos:end="559:25">(<expr pos:start="559:21" pos:end="559:24"><name pos:start="559:21" pos:end="559:24">link</name></expr>)</condition> <block pos:start="559:27" pos:end="563:17">{<block_content pos:start="561:21" pos:end="561:51">

                    <expr_stmt pos:start="561:21" pos:end="561:51"><expr pos:start="561:21" pos:end="561:50"><name pos:start="561:21" pos:end="561:22">op</name> <operator pos:start="561:24" pos:end="561:24">=</operator> <ternary pos:start="561:26" pos:end="561:50"><condition pos:start="561:26" pos:end="561:29"><expr pos:start="561:26" pos:end="561:27"><name pos:start="561:26" pos:end="561:27">nd</name></expr> ?</condition><then pos:start="561:31" pos:end="561:39"> <expr pos:start="561:31" pos:end="561:39"><name pos:start="561:31" pos:end="561:39">OPC_JALRC</name></expr> </then><else pos:start="561:41" pos:end="561:50">: <expr pos:start="561:43" pos:end="561:50"><name pos:start="561:43" pos:end="561:50">OPC_JALR</name></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="563:19" pos:end="567:17">else <block pos:start="563:24" pos:end="567:17">{<block_content pos:start="565:21" pos:end="565:32">

                    <expr_stmt pos:start="565:21" pos:end="565:32"><expr pos:start="565:21" pos:end="565:31"><name pos:start="565:21" pos:end="565:22">op</name> <operator pos:start="565:24" pos:end="565:24">=</operator> <name pos:start="565:26" pos:end="565:31">OPC_JR</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="571:17" pos:end="571:68"><expr pos:start="571:17" pos:end="571:67"><call pos:start="571:17" pos:end="571:67"><name pos:start="571:17" pos:end="571:34">gen_compute_branch</name><argument_list pos:start="571:35" pos:end="571:67">(<argument pos:start="571:36" pos:end="571:38"><expr pos:start="571:36" pos:end="571:38"><name pos:start="571:36" pos:end="571:38">ctx</name></expr></argument>, <argument pos:start="571:41" pos:end="571:42"><expr pos:start="571:41" pos:end="571:42"><name pos:start="571:41" pos:end="571:42">op</name></expr></argument>, <argument pos:start="571:45" pos:end="571:45"><expr pos:start="571:45" pos:end="571:45"><literal type="number" pos:start="571:45" pos:end="571:45">2</literal></expr></argument>, <argument pos:start="571:48" pos:end="571:59"><expr pos:start="571:48" pos:end="571:59"><ternary pos:start="571:48" pos:end="571:59"><condition pos:start="571:48" pos:end="571:51"><expr pos:start="571:48" pos:end="571:49"><name pos:start="571:48" pos:end="571:49">ra</name></expr> ?</condition><then pos:start="571:53" pos:end="571:54"> <expr pos:start="571:53" pos:end="571:54"><literal type="number" pos:start="571:53" pos:end="571:54">31</literal></expr> </then><else pos:start="571:56" pos:end="571:59">: <expr pos:start="571:58" pos:end="571:59"><name pos:start="571:58" pos:end="571:59">rx</name></expr></else></ternary></expr></argument>, <argument pos:start="571:62" pos:end="571:63"><expr pos:start="571:62" pos:end="571:63"><literal type="number" pos:start="571:62" pos:end="571:63">31</literal></expr></argument>, <argument pos:start="571:66" pos:end="571:66"><expr pos:start="571:66" pos:end="571:66"><literal type="number" pos:start="571:66" pos:end="571:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="573:17" pos:end="577:17"><if pos:start="573:17" pos:end="577:17">if <condition pos:start="573:20" pos:end="573:24">(<expr pos:start="573:21" pos:end="573:23"><operator pos:start="573:21" pos:end="573:21">!</operator><name pos:start="573:22" pos:end="573:23">nd</name></expr>)</condition> <block pos:start="573:26" pos:end="577:17">{<block_content pos:start="575:21" pos:end="575:35">

                    <expr_stmt pos:start="575:21" pos:end="575:35"><expr pos:start="575:21" pos:end="575:34"><operator pos:start="575:21" pos:end="575:21">*</operator><name pos:start="575:22" pos:end="575:30">is_branch</name> <operator pos:start="575:32" pos:end="575:32">=</operator> <literal type="number" pos:start="575:34" pos:end="575:34">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="581:13" pos:end="581:18">break;</break>

        <case pos:start="583:9" pos:end="583:22">case <expr pos:start="583:14" pos:end="583:21"><name pos:start="583:14" pos:end="583:21">RR_SDBBP</name></expr>:</case>

            <comment type="block" pos:start="585:13" pos:end="589:15">/* XXX: not clear which exception should be raised

             *      when in debug mode...

             */</comment>

            <expr_stmt pos:start="591:13" pos:end="591:45"><expr pos:start="591:13" pos:end="591:44"><call pos:start="591:13" pos:end="591:44"><name pos:start="591:13" pos:end="591:22">check_insn</name><argument_list pos:start="591:23" pos:end="591:44">(<argument pos:start="591:24" pos:end="591:26"><expr pos:start="591:24" pos:end="591:26"><name pos:start="591:24" pos:end="591:26">env</name></expr></argument>, <argument pos:start="591:29" pos:end="591:31"><expr pos:start="591:29" pos:end="591:31"><name pos:start="591:29" pos:end="591:31">ctx</name></expr></argument>, <argument pos:start="591:34" pos:end="591:43"><expr pos:start="591:34" pos:end="591:43"><name pos:start="591:34" pos:end="591:43">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="593:13" pos:end="601:13"><if pos:start="593:13" pos:end="597:13">if <condition pos:start="593:16" pos:end="593:47">(<expr pos:start="593:17" pos:end="593:46"><operator pos:start="593:17" pos:end="593:17">!</operator><operator pos:start="593:18" pos:end="593:18">(</operator><name pos:start="593:19" pos:end="593:29"><name pos:start="593:19" pos:end="593:21">ctx</name><operator pos:start="593:22" pos:end="593:23">-&gt;</operator><name pos:start="593:24" pos:end="593:29">hflags</name></name> <operator pos:start="593:31" pos:end="593:31">&amp;</operator> <name pos:start="593:33" pos:end="593:45">MIPS_HFLAG_DM</name><operator pos:start="593:46" pos:end="593:46">)</operator></expr>)</condition> <block pos:start="593:49" pos:end="597:13">{<block_content pos:start="595:17" pos:end="595:50">

                <expr_stmt pos:start="595:17" pos:end="595:50"><expr pos:start="595:17" pos:end="595:49"><call pos:start="595:17" pos:end="595:49"><name pos:start="595:17" pos:end="595:34">generate_exception</name><argument_list pos:start="595:35" pos:end="595:49">(<argument pos:start="595:36" pos:end="595:38"><expr pos:start="595:36" pos:end="595:38"><name pos:start="595:36" pos:end="595:38">ctx</name></expr></argument>, <argument pos:start="595:41" pos:end="595:48"><expr pos:start="595:41" pos:end="595:48"><name pos:start="595:41" pos:end="595:48">EXCP_DBp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="597:15" pos:end="601:13">else <block pos:start="597:20" pos:end="601:13">{<block_content pos:start="599:17" pos:end="599:50">

                <expr_stmt pos:start="599:17" pos:end="599:50"><expr pos:start="599:17" pos:end="599:49"><call pos:start="599:17" pos:end="599:49"><name pos:start="599:17" pos:end="599:34">generate_exception</name><argument_list pos:start="599:35" pos:end="599:49">(<argument pos:start="599:36" pos:end="599:38"><expr pos:start="599:36" pos:end="599:38"><name pos:start="599:36" pos:end="599:38">ctx</name></expr></argument>, <argument pos:start="599:41" pos:end="599:48"><expr pos:start="599:41" pos:end="599:48"><name pos:start="599:41" pos:end="599:48">EXCP_DBp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="603:13" pos:end="603:18">break;</break>

        <case pos:start="605:9" pos:end="605:20">case <expr pos:start="605:14" pos:end="605:19"><name pos:start="605:14" pos:end="605:19">RR_SLT</name></expr>:</case>

            <expr_stmt pos:start="607:13" pos:end="607:46"><expr pos:start="607:13" pos:end="607:45"><call pos:start="607:13" pos:end="607:45"><name pos:start="607:13" pos:end="607:19">gen_slt</name><argument_list pos:start="607:20" pos:end="607:45">(<argument pos:start="607:21" pos:end="607:23"><expr pos:start="607:21" pos:end="607:23"><name pos:start="607:21" pos:end="607:23">env</name></expr></argument>, <argument pos:start="607:26" pos:end="607:32"><expr pos:start="607:26" pos:end="607:32"><name pos:start="607:26" pos:end="607:32">OPC_SLT</name></expr></argument>, <argument pos:start="607:35" pos:end="607:36"><expr pos:start="607:35" pos:end="607:36"><literal type="number" pos:start="607:35" pos:end="607:36">24</literal></expr></argument>, <argument pos:start="607:39" pos:end="607:40"><expr pos:start="607:39" pos:end="607:40"><name pos:start="607:39" pos:end="607:40">rx</name></expr></argument>, <argument pos:start="607:43" pos:end="607:44"><expr pos:start="607:43" pos:end="607:44"><name pos:start="607:43" pos:end="607:44">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="609:13" pos:end="609:18">break;</break>

        <case pos:start="611:9" pos:end="611:21">case <expr pos:start="611:14" pos:end="611:20"><name pos:start="611:14" pos:end="611:20">RR_SLTU</name></expr>:</case>

            <expr_stmt pos:start="613:13" pos:end="613:47"><expr pos:start="613:13" pos:end="613:46"><call pos:start="613:13" pos:end="613:46"><name pos:start="613:13" pos:end="613:19">gen_slt</name><argument_list pos:start="613:20" pos:end="613:46">(<argument pos:start="613:21" pos:end="613:23"><expr pos:start="613:21" pos:end="613:23"><name pos:start="613:21" pos:end="613:23">env</name></expr></argument>, <argument pos:start="613:26" pos:end="613:33"><expr pos:start="613:26" pos:end="613:33"><name pos:start="613:26" pos:end="613:33">OPC_SLTU</name></expr></argument>, <argument pos:start="613:36" pos:end="613:37"><expr pos:start="613:36" pos:end="613:37"><literal type="number" pos:start="613:36" pos:end="613:37">24</literal></expr></argument>, <argument pos:start="613:40" pos:end="613:41"><expr pos:start="613:40" pos:end="613:41"><name pos:start="613:40" pos:end="613:41">rx</name></expr></argument>, <argument pos:start="613:44" pos:end="613:45"><expr pos:start="613:44" pos:end="613:45"><name pos:start="613:44" pos:end="613:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="615:13" pos:end="615:18">break;</break>

        <case pos:start="617:9" pos:end="617:22">case <expr pos:start="617:14" pos:end="617:21"><name pos:start="617:14" pos:end="617:21">RR_BREAK</name></expr>:</case>

            <expr_stmt pos:start="619:13" pos:end="619:48"><expr pos:start="619:13" pos:end="619:47"><call pos:start="619:13" pos:end="619:47"><name pos:start="619:13" pos:end="619:30">generate_exception</name><argument_list pos:start="619:31" pos:end="619:47">(<argument pos:start="619:32" pos:end="619:34"><expr pos:start="619:32" pos:end="619:34"><name pos:start="619:32" pos:end="619:34">ctx</name></expr></argument>, <argument pos:start="619:37" pos:end="619:46"><expr pos:start="619:37" pos:end="619:46"><name pos:start="619:37" pos:end="619:46">EXCP_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="621:13" pos:end="621:18">break;</break>

        <case pos:start="623:9" pos:end="623:21">case <expr pos:start="623:14" pos:end="623:20"><name pos:start="623:14" pos:end="623:20">RR_SLLV</name></expr>:</case>

            <expr_stmt pos:start="625:13" pos:end="625:54"><expr pos:start="625:13" pos:end="625:53"><call pos:start="625:13" pos:end="625:53"><name pos:start="625:13" pos:end="625:21">gen_shift</name><argument_list pos:start="625:22" pos:end="625:53">(<argument pos:start="625:23" pos:end="625:25"><expr pos:start="625:23" pos:end="625:25"><name pos:start="625:23" pos:end="625:25">env</name></expr></argument>, <argument pos:start="625:28" pos:end="625:30"><expr pos:start="625:28" pos:end="625:30"><name pos:start="625:28" pos:end="625:30">ctx</name></expr></argument>, <argument pos:start="625:33" pos:end="625:40"><expr pos:start="625:33" pos:end="625:40"><name pos:start="625:33" pos:end="625:40">OPC_SLLV</name></expr></argument>, <argument pos:start="625:43" pos:end="625:44"><expr pos:start="625:43" pos:end="625:44"><name pos:start="625:43" pos:end="625:44">ry</name></expr></argument>, <argument pos:start="625:47" pos:end="625:48"><expr pos:start="625:47" pos:end="625:48"><name pos:start="625:47" pos:end="625:48">rx</name></expr></argument>, <argument pos:start="625:51" pos:end="625:52"><expr pos:start="625:51" pos:end="625:52"><name pos:start="625:51" pos:end="625:52">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="627:13" pos:end="627:18">break;</break>

        <case pos:start="629:9" pos:end="629:21">case <expr pos:start="629:14" pos:end="629:20"><name pos:start="629:14" pos:end="629:20">RR_SRLV</name></expr>:</case>

            <expr_stmt pos:start="631:13" pos:end="631:54"><expr pos:start="631:13" pos:end="631:53"><call pos:start="631:13" pos:end="631:53"><name pos:start="631:13" pos:end="631:21">gen_shift</name><argument_list pos:start="631:22" pos:end="631:53">(<argument pos:start="631:23" pos:end="631:25"><expr pos:start="631:23" pos:end="631:25"><name pos:start="631:23" pos:end="631:25">env</name></expr></argument>, <argument pos:start="631:28" pos:end="631:30"><expr pos:start="631:28" pos:end="631:30"><name pos:start="631:28" pos:end="631:30">ctx</name></expr></argument>, <argument pos:start="631:33" pos:end="631:40"><expr pos:start="631:33" pos:end="631:40"><name pos:start="631:33" pos:end="631:40">OPC_SRLV</name></expr></argument>, <argument pos:start="631:43" pos:end="631:44"><expr pos:start="631:43" pos:end="631:44"><name pos:start="631:43" pos:end="631:44">ry</name></expr></argument>, <argument pos:start="631:47" pos:end="631:48"><expr pos:start="631:47" pos:end="631:48"><name pos:start="631:47" pos:end="631:48">rx</name></expr></argument>, <argument pos:start="631:51" pos:end="631:52"><expr pos:start="631:51" pos:end="631:52"><name pos:start="631:51" pos:end="631:52">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="633:13" pos:end="633:18">break;</break>

        <case pos:start="635:9" pos:end="635:21">case <expr pos:start="635:14" pos:end="635:20"><name pos:start="635:14" pos:end="635:20">RR_SRAV</name></expr>:</case>

            <expr_stmt pos:start="637:13" pos:end="637:54"><expr pos:start="637:13" pos:end="637:53"><call pos:start="637:13" pos:end="637:53"><name pos:start="637:13" pos:end="637:21">gen_shift</name><argument_list pos:start="637:22" pos:end="637:53">(<argument pos:start="637:23" pos:end="637:25"><expr pos:start="637:23" pos:end="637:25"><name pos:start="637:23" pos:end="637:25">env</name></expr></argument>, <argument pos:start="637:28" pos:end="637:30"><expr pos:start="637:28" pos:end="637:30"><name pos:start="637:28" pos:end="637:30">ctx</name></expr></argument>, <argument pos:start="637:33" pos:end="637:40"><expr pos:start="637:33" pos:end="637:40"><name pos:start="637:33" pos:end="637:40">OPC_SRAV</name></expr></argument>, <argument pos:start="637:43" pos:end="637:44"><expr pos:start="637:43" pos:end="637:44"><name pos:start="637:43" pos:end="637:44">ry</name></expr></argument>, <argument pos:start="637:47" pos:end="637:48"><expr pos:start="637:47" pos:end="637:48"><name pos:start="637:47" pos:end="637:48">rx</name></expr></argument>, <argument pos:start="637:51" pos:end="637:52"><expr pos:start="637:51" pos:end="637:52"><name pos:start="637:51" pos:end="637:52">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="639:13" pos:end="642:0">break;</break>

<cpp:if pos:start="641:1" pos:end="641:27">#<cpp:directive pos:start="641:2" pos:end="641:3">if</cpp:directive> <expr pos:start="641:5" pos:end="641:27"><call pos:start="641:5" pos:end="641:27"><name pos:start="641:5" pos:end="641:11">defined</name> <argument_list pos:start="641:13" pos:end="641:27">(<argument pos:start="641:14" pos:end="641:26"><expr pos:start="641:14" pos:end="641:26"><name pos:start="641:14" pos:end="641:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="643:9" pos:end="643:21">case <expr pos:start="643:14" pos:end="643:20"><name pos:start="643:14" pos:end="643:20">RR_DSRL</name></expr>:</case>

            <expr_stmt pos:start="645:13" pos:end="645:31"><expr pos:start="645:13" pos:end="645:30"><call pos:start="645:13" pos:end="645:30"><name pos:start="645:13" pos:end="645:25">check_mips_64</name><argument_list pos:start="645:26" pos:end="645:30">(<argument pos:start="645:27" pos:end="645:29"><expr pos:start="645:27" pos:end="645:29"><name pos:start="645:27" pos:end="645:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="647:13" pos:end="647:58"><expr pos:start="647:13" pos:end="647:57"><call pos:start="647:13" pos:end="647:57"><name pos:start="647:13" pos:end="647:25">gen_shift_imm</name><argument_list pos:start="647:26" pos:end="647:57">(<argument pos:start="647:27" pos:end="647:29"><expr pos:start="647:27" pos:end="647:29"><name pos:start="647:27" pos:end="647:29">env</name></expr></argument>, <argument pos:start="647:32" pos:end="647:34"><expr pos:start="647:32" pos:end="647:34"><name pos:start="647:32" pos:end="647:34">ctx</name></expr></argument>, <argument pos:start="647:37" pos:end="647:44"><expr pos:start="647:37" pos:end="647:44"><name pos:start="647:37" pos:end="647:44">OPC_DSRL</name></expr></argument>, <argument pos:start="647:47" pos:end="647:48"><expr pos:start="647:47" pos:end="647:48"><name pos:start="647:47" pos:end="647:48">ry</name></expr></argument>, <argument pos:start="647:51" pos:end="647:52"><expr pos:start="647:51" pos:end="647:52"><name pos:start="647:51" pos:end="647:52">ry</name></expr></argument>, <argument pos:start="647:55" pos:end="647:56"><expr pos:start="647:55" pos:end="647:56"><name pos:start="647:55" pos:end="647:56">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="649:13" pos:end="652:0">break;</break>

<cpp:endif pos:start="651:1" pos:end="651:6">#<cpp:directive pos:start="651:2" pos:end="651:6">endif</cpp:directive></cpp:endif>

        <case pos:start="653:9" pos:end="653:20">case <expr pos:start="653:14" pos:end="653:19"><name pos:start="653:14" pos:end="653:19">RR_CMP</name></expr>:</case>

            <expr_stmt pos:start="655:13" pos:end="655:48"><expr pos:start="655:13" pos:end="655:47"><call pos:start="655:13" pos:end="655:47"><name pos:start="655:13" pos:end="655:21">gen_logic</name><argument_list pos:start="655:22" pos:end="655:47">(<argument pos:start="655:23" pos:end="655:25"><expr pos:start="655:23" pos:end="655:25"><name pos:start="655:23" pos:end="655:25">env</name></expr></argument>, <argument pos:start="655:28" pos:end="655:34"><expr pos:start="655:28" pos:end="655:34"><name pos:start="655:28" pos:end="655:34">OPC_XOR</name></expr></argument>, <argument pos:start="655:37" pos:end="655:38"><expr pos:start="655:37" pos:end="655:38"><literal type="number" pos:start="655:37" pos:end="655:38">24</literal></expr></argument>, <argument pos:start="655:41" pos:end="655:42"><expr pos:start="655:41" pos:end="655:42"><name pos:start="655:41" pos:end="655:42">rx</name></expr></argument>, <argument pos:start="655:45" pos:end="655:46"><expr pos:start="655:45" pos:end="655:46"><name pos:start="655:45" pos:end="655:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="657:13" pos:end="657:18">break;</break>

        <case pos:start="659:9" pos:end="659:20">case <expr pos:start="659:14" pos:end="659:19"><name pos:start="659:14" pos:end="659:19">RR_NEG</name></expr>:</case>

            <expr_stmt pos:start="661:13" pos:end="661:53"><expr pos:start="661:13" pos:end="661:52"><call pos:start="661:13" pos:end="661:52"><name pos:start="661:13" pos:end="661:21">gen_arith</name><argument_list pos:start="661:22" pos:end="661:52">(<argument pos:start="661:23" pos:end="661:25"><expr pos:start="661:23" pos:end="661:25"><name pos:start="661:23" pos:end="661:25">env</name></expr></argument>, <argument pos:start="661:28" pos:end="661:30"><expr pos:start="661:28" pos:end="661:30"><name pos:start="661:28" pos:end="661:30">ctx</name></expr></argument>, <argument pos:start="661:33" pos:end="661:40"><expr pos:start="661:33" pos:end="661:40"><name pos:start="661:33" pos:end="661:40">OPC_SUBU</name></expr></argument>, <argument pos:start="661:43" pos:end="661:44"><expr pos:start="661:43" pos:end="661:44"><name pos:start="661:43" pos:end="661:44">rx</name></expr></argument>, <argument pos:start="661:47" pos:end="661:47"><expr pos:start="661:47" pos:end="661:47"><literal type="number" pos:start="661:47" pos:end="661:47">0</literal></expr></argument>, <argument pos:start="661:50" pos:end="661:51"><expr pos:start="661:50" pos:end="661:51"><name pos:start="661:50" pos:end="661:51">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="663:13" pos:end="663:18">break;</break>

        <case pos:start="665:9" pos:end="665:20">case <expr pos:start="665:14" pos:end="665:19"><name pos:start="665:14" pos:end="665:19">RR_AND</name></expr>:</case>

            <expr_stmt pos:start="667:13" pos:end="667:48"><expr pos:start="667:13" pos:end="667:47"><call pos:start="667:13" pos:end="667:47"><name pos:start="667:13" pos:end="667:21">gen_logic</name><argument_list pos:start="667:22" pos:end="667:47">(<argument pos:start="667:23" pos:end="667:25"><expr pos:start="667:23" pos:end="667:25"><name pos:start="667:23" pos:end="667:25">env</name></expr></argument>, <argument pos:start="667:28" pos:end="667:34"><expr pos:start="667:28" pos:end="667:34"><name pos:start="667:28" pos:end="667:34">OPC_AND</name></expr></argument>, <argument pos:start="667:37" pos:end="667:38"><expr pos:start="667:37" pos:end="667:38"><name pos:start="667:37" pos:end="667:38">rx</name></expr></argument>, <argument pos:start="667:41" pos:end="667:42"><expr pos:start="667:41" pos:end="667:42"><name pos:start="667:41" pos:end="667:42">rx</name></expr></argument>, <argument pos:start="667:45" pos:end="667:46"><expr pos:start="667:45" pos:end="667:46"><name pos:start="667:45" pos:end="667:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="669:13" pos:end="669:18">break;</break>

        <case pos:start="671:9" pos:end="671:19">case <expr pos:start="671:14" pos:end="671:18"><name pos:start="671:14" pos:end="671:18">RR_OR</name></expr>:</case>

            <expr_stmt pos:start="673:13" pos:end="673:47"><expr pos:start="673:13" pos:end="673:46"><call pos:start="673:13" pos:end="673:46"><name pos:start="673:13" pos:end="673:21">gen_logic</name><argument_list pos:start="673:22" pos:end="673:46">(<argument pos:start="673:23" pos:end="673:25"><expr pos:start="673:23" pos:end="673:25"><name pos:start="673:23" pos:end="673:25">env</name></expr></argument>, <argument pos:start="673:28" pos:end="673:33"><expr pos:start="673:28" pos:end="673:33"><name pos:start="673:28" pos:end="673:33">OPC_OR</name></expr></argument>, <argument pos:start="673:36" pos:end="673:37"><expr pos:start="673:36" pos:end="673:37"><name pos:start="673:36" pos:end="673:37">rx</name></expr></argument>, <argument pos:start="673:40" pos:end="673:41"><expr pos:start="673:40" pos:end="673:41"><name pos:start="673:40" pos:end="673:41">rx</name></expr></argument>, <argument pos:start="673:44" pos:end="673:45"><expr pos:start="673:44" pos:end="673:45"><name pos:start="673:44" pos:end="673:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="675:13" pos:end="675:18">break;</break>

        <case pos:start="677:9" pos:end="677:20">case <expr pos:start="677:14" pos:end="677:19"><name pos:start="677:14" pos:end="677:19">RR_XOR</name></expr>:</case>

            <expr_stmt pos:start="679:13" pos:end="679:48"><expr pos:start="679:13" pos:end="679:47"><call pos:start="679:13" pos:end="679:47"><name pos:start="679:13" pos:end="679:21">gen_logic</name><argument_list pos:start="679:22" pos:end="679:47">(<argument pos:start="679:23" pos:end="679:25"><expr pos:start="679:23" pos:end="679:25"><name pos:start="679:23" pos:end="679:25">env</name></expr></argument>, <argument pos:start="679:28" pos:end="679:34"><expr pos:start="679:28" pos:end="679:34"><name pos:start="679:28" pos:end="679:34">OPC_XOR</name></expr></argument>, <argument pos:start="679:37" pos:end="679:38"><expr pos:start="679:37" pos:end="679:38"><name pos:start="679:37" pos:end="679:38">rx</name></expr></argument>, <argument pos:start="679:41" pos:end="679:42"><expr pos:start="679:41" pos:end="679:42"><name pos:start="679:41" pos:end="679:42">rx</name></expr></argument>, <argument pos:start="679:45" pos:end="679:46"><expr pos:start="679:45" pos:end="679:46"><name pos:start="679:45" pos:end="679:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="681:13" pos:end="681:18">break;</break>

        <case pos:start="683:9" pos:end="683:20">case <expr pos:start="683:14" pos:end="683:19"><name pos:start="683:14" pos:end="683:19">RR_NOT</name></expr>:</case>

            <expr_stmt pos:start="685:13" pos:end="685:47"><expr pos:start="685:13" pos:end="685:46"><call pos:start="685:13" pos:end="685:46"><name pos:start="685:13" pos:end="685:21">gen_logic</name><argument_list pos:start="685:22" pos:end="685:46">(<argument pos:start="685:23" pos:end="685:25"><expr pos:start="685:23" pos:end="685:25"><name pos:start="685:23" pos:end="685:25">env</name></expr></argument>, <argument pos:start="685:28" pos:end="685:34"><expr pos:start="685:28" pos:end="685:34"><name pos:start="685:28" pos:end="685:34">OPC_NOR</name></expr></argument>, <argument pos:start="685:37" pos:end="685:38"><expr pos:start="685:37" pos:end="685:38"><name pos:start="685:37" pos:end="685:38">rx</name></expr></argument>, <argument pos:start="685:41" pos:end="685:42"><expr pos:start="685:41" pos:end="685:42"><name pos:start="685:41" pos:end="685:42">ry</name></expr></argument>, <argument pos:start="685:45" pos:end="685:45"><expr pos:start="685:45" pos:end="685:45"><literal type="number" pos:start="685:45" pos:end="685:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="687:13" pos:end="687:18">break;</break>

        <case pos:start="689:9" pos:end="689:21">case <expr pos:start="689:14" pos:end="689:20"><name pos:start="689:14" pos:end="689:20">RR_MFHI</name></expr>:</case>

            <expr_stmt pos:start="691:13" pos:end="691:40"><expr pos:start="691:13" pos:end="691:39"><call pos:start="691:13" pos:end="691:39"><name pos:start="691:13" pos:end="691:20">gen_HILO</name><argument_list pos:start="691:21" pos:end="691:39">(<argument pos:start="691:22" pos:end="691:24"><expr pos:start="691:22" pos:end="691:24"><name pos:start="691:22" pos:end="691:24">ctx</name></expr></argument>, <argument pos:start="691:27" pos:end="691:34"><expr pos:start="691:27" pos:end="691:34"><name pos:start="691:27" pos:end="691:34">OPC_MFHI</name></expr></argument>, <argument pos:start="691:37" pos:end="691:38"><expr pos:start="691:37" pos:end="691:38"><name pos:start="691:37" pos:end="691:38">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="693:13" pos:end="693:18">break;</break>

        <case pos:start="695:9" pos:end="695:21">case <expr pos:start="695:14" pos:end="695:20"><name pos:start="695:14" pos:end="695:20">RR_CNVT</name></expr>:</case>

            <switch pos:start="697:13" pos:end="749:13">switch <condition pos:start="697:20" pos:end="697:28">(<expr pos:start="697:21" pos:end="697:27"><name pos:start="697:21" pos:end="697:27">cnvt_op</name></expr>)</condition> <block pos:start="697:30" pos:end="749:13">{<block_content pos:start="699:13" pos:end="747:22">

            <case pos:start="699:13" pos:end="699:32">case <expr pos:start="699:18" pos:end="699:31"><name pos:start="699:18" pos:end="699:31">RR_RY_CNVT_ZEB</name></expr>:</case>

                <expr_stmt pos:start="701:17" pos:end="701:59"><expr pos:start="701:17" pos:end="701:58"><call pos:start="701:17" pos:end="701:58"><name pos:start="701:17" pos:end="701:32">tcg_gen_ext8u_tl</name><argument_list pos:start="701:33" pos:end="701:58">(<argument pos:start="701:34" pos:end="701:44"><expr pos:start="701:34" pos:end="701:44"><name pos:start="701:34" pos:end="701:44"><name pos:start="701:34" pos:end="701:40">cpu_gpr</name><index pos:start="701:41" pos:end="701:44">[<expr pos:start="701:42" pos:end="701:43"><name pos:start="701:42" pos:end="701:43">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="701:47" pos:end="701:57"><expr pos:start="701:47" pos:end="701:57"><name pos:start="701:47" pos:end="701:57"><name pos:start="701:47" pos:end="701:53">cpu_gpr</name><index pos:start="701:54" pos:end="701:57">[<expr pos:start="701:55" pos:end="701:56"><name pos:start="701:55" pos:end="701:56">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="703:17" pos:end="703:22">break;</break>

            <case pos:start="705:13" pos:end="705:32">case <expr pos:start="705:18" pos:end="705:31"><name pos:start="705:18" pos:end="705:31">RR_RY_CNVT_ZEH</name></expr>:</case>

                <expr_stmt pos:start="707:17" pos:end="707:60"><expr pos:start="707:17" pos:end="707:59"><call pos:start="707:17" pos:end="707:59"><name pos:start="707:17" pos:end="707:33">tcg_gen_ext16u_tl</name><argument_list pos:start="707:34" pos:end="707:59">(<argument pos:start="707:35" pos:end="707:45"><expr pos:start="707:35" pos:end="707:45"><name pos:start="707:35" pos:end="707:45"><name pos:start="707:35" pos:end="707:41">cpu_gpr</name><index pos:start="707:42" pos:end="707:45">[<expr pos:start="707:43" pos:end="707:44"><name pos:start="707:43" pos:end="707:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="707:48" pos:end="707:58"><expr pos:start="707:48" pos:end="707:58"><name pos:start="707:48" pos:end="707:58"><name pos:start="707:48" pos:end="707:54">cpu_gpr</name><index pos:start="707:55" pos:end="707:58">[<expr pos:start="707:56" pos:end="707:57"><name pos:start="707:56" pos:end="707:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="709:17" pos:end="709:22">break;</break>

            <case pos:start="711:13" pos:end="711:32">case <expr pos:start="711:18" pos:end="711:31"><name pos:start="711:18" pos:end="711:31">RR_RY_CNVT_SEB</name></expr>:</case>

                <expr_stmt pos:start="713:17" pos:end="713:59"><expr pos:start="713:17" pos:end="713:58"><call pos:start="713:17" pos:end="713:58"><name pos:start="713:17" pos:end="713:32">tcg_gen_ext8s_tl</name><argument_list pos:start="713:33" pos:end="713:58">(<argument pos:start="713:34" pos:end="713:44"><expr pos:start="713:34" pos:end="713:44"><name pos:start="713:34" pos:end="713:44"><name pos:start="713:34" pos:end="713:40">cpu_gpr</name><index pos:start="713:41" pos:end="713:44">[<expr pos:start="713:42" pos:end="713:43"><name pos:start="713:42" pos:end="713:43">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="713:47" pos:end="713:57"><expr pos:start="713:47" pos:end="713:57"><name pos:start="713:47" pos:end="713:57"><name pos:start="713:47" pos:end="713:53">cpu_gpr</name><index pos:start="713:54" pos:end="713:57">[<expr pos:start="713:55" pos:end="713:56"><name pos:start="713:55" pos:end="713:56">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="715:17" pos:end="715:22">break;</break>

            <case pos:start="717:13" pos:end="717:32">case <expr pos:start="717:18" pos:end="717:31"><name pos:start="717:18" pos:end="717:31">RR_RY_CNVT_SEH</name></expr>:</case>

                <expr_stmt pos:start="719:17" pos:end="719:60"><expr pos:start="719:17" pos:end="719:59"><call pos:start="719:17" pos:end="719:59"><name pos:start="719:17" pos:end="719:33">tcg_gen_ext16s_tl</name><argument_list pos:start="719:34" pos:end="719:59">(<argument pos:start="719:35" pos:end="719:45"><expr pos:start="719:35" pos:end="719:45"><name pos:start="719:35" pos:end="719:45"><name pos:start="719:35" pos:end="719:41">cpu_gpr</name><index pos:start="719:42" pos:end="719:45">[<expr pos:start="719:43" pos:end="719:44"><name pos:start="719:43" pos:end="719:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="719:48" pos:end="719:58"><expr pos:start="719:48" pos:end="719:58"><name pos:start="719:48" pos:end="719:58"><name pos:start="719:48" pos:end="719:54">cpu_gpr</name><index pos:start="719:55" pos:end="719:58">[<expr pos:start="719:56" pos:end="719:57"><name pos:start="719:56" pos:end="719:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="721:17" pos:end="724:0">break;</break>

<cpp:if pos:start="723:1" pos:end="723:27">#<cpp:directive pos:start="723:2" pos:end="723:3">if</cpp:directive> <expr pos:start="723:5" pos:end="723:27"><call pos:start="723:5" pos:end="723:27"><name pos:start="723:5" pos:end="723:11">defined</name> <argument_list pos:start="723:13" pos:end="723:27">(<argument pos:start="723:14" pos:end="723:26"><expr pos:start="723:14" pos:end="723:26"><name pos:start="723:14" pos:end="723:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <case pos:start="725:13" pos:end="725:32">case <expr pos:start="725:18" pos:end="725:31"><name pos:start="725:18" pos:end="725:31">RR_RY_CNVT_ZEW</name></expr>:</case>

                <expr_stmt pos:start="727:17" pos:end="727:35"><expr pos:start="727:17" pos:end="727:34"><call pos:start="727:17" pos:end="727:34"><name pos:start="727:17" pos:end="727:29">check_mips_64</name><argument_list pos:start="727:30" pos:end="727:34">(<argument pos:start="727:31" pos:end="727:33"><expr pos:start="727:31" pos:end="727:33"><name pos:start="727:31" pos:end="727:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="729:17" pos:end="729:60"><expr pos:start="729:17" pos:end="729:59"><call pos:start="729:17" pos:end="729:59"><name pos:start="729:17" pos:end="729:33">tcg_gen_ext32u_tl</name><argument_list pos:start="729:34" pos:end="729:59">(<argument pos:start="729:35" pos:end="729:45"><expr pos:start="729:35" pos:end="729:45"><name pos:start="729:35" pos:end="729:45"><name pos:start="729:35" pos:end="729:41">cpu_gpr</name><index pos:start="729:42" pos:end="729:45">[<expr pos:start="729:43" pos:end="729:44"><name pos:start="729:43" pos:end="729:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="729:48" pos:end="729:58"><expr pos:start="729:48" pos:end="729:58"><name pos:start="729:48" pos:end="729:58"><name pos:start="729:48" pos:end="729:54">cpu_gpr</name><index pos:start="729:55" pos:end="729:58">[<expr pos:start="729:56" pos:end="729:57"><name pos:start="729:56" pos:end="729:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="731:17" pos:end="731:22">break;</break>

            <case pos:start="733:13" pos:end="733:32">case <expr pos:start="733:18" pos:end="733:31"><name pos:start="733:18" pos:end="733:31">RR_RY_CNVT_SEW</name></expr>:</case>

                <expr_stmt pos:start="735:17" pos:end="735:35"><expr pos:start="735:17" pos:end="735:34"><call pos:start="735:17" pos:end="735:34"><name pos:start="735:17" pos:end="735:29">check_mips_64</name><argument_list pos:start="735:30" pos:end="735:34">(<argument pos:start="735:31" pos:end="735:33"><expr pos:start="735:31" pos:end="735:33"><name pos:start="735:31" pos:end="735:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="737:17" pos:end="737:60"><expr pos:start="737:17" pos:end="737:59"><call pos:start="737:17" pos:end="737:59"><name pos:start="737:17" pos:end="737:33">tcg_gen_ext32s_tl</name><argument_list pos:start="737:34" pos:end="737:59">(<argument pos:start="737:35" pos:end="737:45"><expr pos:start="737:35" pos:end="737:45"><name pos:start="737:35" pos:end="737:45"><name pos:start="737:35" pos:end="737:41">cpu_gpr</name><index pos:start="737:42" pos:end="737:45">[<expr pos:start="737:43" pos:end="737:44"><name pos:start="737:43" pos:end="737:44">rx</name></expr>]</index></name></expr></argument>, <argument pos:start="737:48" pos:end="737:58"><expr pos:start="737:48" pos:end="737:58"><name pos:start="737:48" pos:end="737:58"><name pos:start="737:48" pos:end="737:54">cpu_gpr</name><index pos:start="737:55" pos:end="737:58">[<expr pos:start="737:56" pos:end="737:57"><name pos:start="737:56" pos:end="737:57">rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="739:17" pos:end="742:0">break;</break>

<cpp:endif pos:start="741:1" pos:end="741:6">#<cpp:directive pos:start="741:2" pos:end="741:6">endif</cpp:directive></cpp:endif>

            <default pos:start="743:13" pos:end="743:20">default:</default>

                <expr_stmt pos:start="745:17" pos:end="745:49"><expr pos:start="745:17" pos:end="745:48"><call pos:start="745:17" pos:end="745:48"><name pos:start="745:17" pos:end="745:34">generate_exception</name><argument_list pos:start="745:35" pos:end="745:48">(<argument pos:start="745:36" pos:end="745:38"><expr pos:start="745:36" pos:end="745:38"><name pos:start="745:36" pos:end="745:38">ctx</name></expr></argument>, <argument pos:start="745:41" pos:end="745:47"><expr pos:start="745:41" pos:end="745:47"><name pos:start="745:41" pos:end="745:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="747:17" pos:end="747:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="751:13" pos:end="751:18">break;</break>

        <case pos:start="753:9" pos:end="753:21">case <expr pos:start="753:14" pos:end="753:20"><name pos:start="753:14" pos:end="753:20">RR_MFLO</name></expr>:</case>

            <expr_stmt pos:start="755:13" pos:end="755:40"><expr pos:start="755:13" pos:end="755:39"><call pos:start="755:13" pos:end="755:39"><name pos:start="755:13" pos:end="755:20">gen_HILO</name><argument_list pos:start="755:21" pos:end="755:39">(<argument pos:start="755:22" pos:end="755:24"><expr pos:start="755:22" pos:end="755:24"><name pos:start="755:22" pos:end="755:24">ctx</name></expr></argument>, <argument pos:start="755:27" pos:end="755:34"><expr pos:start="755:27" pos:end="755:34"><name pos:start="755:27" pos:end="755:34">OPC_MFLO</name></expr></argument>, <argument pos:start="755:37" pos:end="755:38"><expr pos:start="755:37" pos:end="755:38"><name pos:start="755:37" pos:end="755:38">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="757:13" pos:end="760:0">break;</break>

<cpp:if pos:start="759:1" pos:end="759:27">#<cpp:directive pos:start="759:2" pos:end="759:3">if</cpp:directive> <expr pos:start="759:5" pos:end="759:27"><call pos:start="759:5" pos:end="759:27"><name pos:start="759:5" pos:end="759:11">defined</name> <argument_list pos:start="759:13" pos:end="759:27">(<argument pos:start="759:14" pos:end="759:26"><expr pos:start="759:14" pos:end="759:26"><name pos:start="759:14" pos:end="759:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="761:9" pos:end="761:21">case <expr pos:start="761:14" pos:end="761:20"><name pos:start="761:14" pos:end="761:20">RR_DSRA</name></expr>:</case>

            <expr_stmt pos:start="763:13" pos:end="763:31"><expr pos:start="763:13" pos:end="763:30"><call pos:start="763:13" pos:end="763:30"><name pos:start="763:13" pos:end="763:25">check_mips_64</name><argument_list pos:start="763:26" pos:end="763:30">(<argument pos:start="763:27" pos:end="763:29"><expr pos:start="763:27" pos:end="763:29"><name pos:start="763:27" pos:end="763:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="765:13" pos:end="765:58"><expr pos:start="765:13" pos:end="765:57"><call pos:start="765:13" pos:end="765:57"><name pos:start="765:13" pos:end="765:25">gen_shift_imm</name><argument_list pos:start="765:26" pos:end="765:57">(<argument pos:start="765:27" pos:end="765:29"><expr pos:start="765:27" pos:end="765:29"><name pos:start="765:27" pos:end="765:29">env</name></expr></argument>, <argument pos:start="765:32" pos:end="765:34"><expr pos:start="765:32" pos:end="765:34"><name pos:start="765:32" pos:end="765:34">ctx</name></expr></argument>, <argument pos:start="765:37" pos:end="765:44"><expr pos:start="765:37" pos:end="765:44"><name pos:start="765:37" pos:end="765:44">OPC_DSRA</name></expr></argument>, <argument pos:start="765:47" pos:end="765:48"><expr pos:start="765:47" pos:end="765:48"><name pos:start="765:47" pos:end="765:48">ry</name></expr></argument>, <argument pos:start="765:51" pos:end="765:52"><expr pos:start="765:51" pos:end="765:52"><name pos:start="765:51" pos:end="765:52">ry</name></expr></argument>, <argument pos:start="765:55" pos:end="765:56"><expr pos:start="765:55" pos:end="765:56"><name pos:start="765:55" pos:end="765:56">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="767:13" pos:end="767:18">break;</break>

        <case pos:start="769:9" pos:end="769:22">case <expr pos:start="769:14" pos:end="769:21"><name pos:start="769:14" pos:end="769:21">RR_DSLLV</name></expr>:</case>

            <expr_stmt pos:start="771:13" pos:end="771:31"><expr pos:start="771:13" pos:end="771:30"><call pos:start="771:13" pos:end="771:30"><name pos:start="771:13" pos:end="771:25">check_mips_64</name><argument_list pos:start="771:26" pos:end="771:30">(<argument pos:start="771:27" pos:end="771:29"><expr pos:start="771:27" pos:end="771:29"><name pos:start="771:27" pos:end="771:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:55"><expr pos:start="773:13" pos:end="773:54"><call pos:start="773:13" pos:end="773:54"><name pos:start="773:13" pos:end="773:21">gen_shift</name><argument_list pos:start="773:22" pos:end="773:54">(<argument pos:start="773:23" pos:end="773:25"><expr pos:start="773:23" pos:end="773:25"><name pos:start="773:23" pos:end="773:25">env</name></expr></argument>, <argument pos:start="773:28" pos:end="773:30"><expr pos:start="773:28" pos:end="773:30"><name pos:start="773:28" pos:end="773:30">ctx</name></expr></argument>, <argument pos:start="773:33" pos:end="773:41"><expr pos:start="773:33" pos:end="773:41"><name pos:start="773:33" pos:end="773:41">OPC_DSLLV</name></expr></argument>, <argument pos:start="773:44" pos:end="773:45"><expr pos:start="773:44" pos:end="773:45"><name pos:start="773:44" pos:end="773:45">ry</name></expr></argument>, <argument pos:start="773:48" pos:end="773:49"><expr pos:start="773:48" pos:end="773:49"><name pos:start="773:48" pos:end="773:49">rx</name></expr></argument>, <argument pos:start="773:52" pos:end="773:53"><expr pos:start="773:52" pos:end="773:53"><name pos:start="773:52" pos:end="773:53">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="775:13" pos:end="775:18">break;</break>

        <case pos:start="777:9" pos:end="777:22">case <expr pos:start="777:14" pos:end="777:21"><name pos:start="777:14" pos:end="777:21">RR_DSRLV</name></expr>:</case>

            <expr_stmt pos:start="779:13" pos:end="779:31"><expr pos:start="779:13" pos:end="779:30"><call pos:start="779:13" pos:end="779:30"><name pos:start="779:13" pos:end="779:25">check_mips_64</name><argument_list pos:start="779:26" pos:end="779:30">(<argument pos:start="779:27" pos:end="779:29"><expr pos:start="779:27" pos:end="779:29"><name pos:start="779:27" pos:end="779:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="781:13" pos:end="781:55"><expr pos:start="781:13" pos:end="781:54"><call pos:start="781:13" pos:end="781:54"><name pos:start="781:13" pos:end="781:21">gen_shift</name><argument_list pos:start="781:22" pos:end="781:54">(<argument pos:start="781:23" pos:end="781:25"><expr pos:start="781:23" pos:end="781:25"><name pos:start="781:23" pos:end="781:25">env</name></expr></argument>, <argument pos:start="781:28" pos:end="781:30"><expr pos:start="781:28" pos:end="781:30"><name pos:start="781:28" pos:end="781:30">ctx</name></expr></argument>, <argument pos:start="781:33" pos:end="781:41"><expr pos:start="781:33" pos:end="781:41"><name pos:start="781:33" pos:end="781:41">OPC_DSRLV</name></expr></argument>, <argument pos:start="781:44" pos:end="781:45"><expr pos:start="781:44" pos:end="781:45"><name pos:start="781:44" pos:end="781:45">ry</name></expr></argument>, <argument pos:start="781:48" pos:end="781:49"><expr pos:start="781:48" pos:end="781:49"><name pos:start="781:48" pos:end="781:49">rx</name></expr></argument>, <argument pos:start="781:52" pos:end="781:53"><expr pos:start="781:52" pos:end="781:53"><name pos:start="781:52" pos:end="781:53">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="783:13" pos:end="783:18">break;</break>

        <case pos:start="785:9" pos:end="785:22">case <expr pos:start="785:14" pos:end="785:21"><name pos:start="785:14" pos:end="785:21">RR_DSRAV</name></expr>:</case>

            <expr_stmt pos:start="787:13" pos:end="787:31"><expr pos:start="787:13" pos:end="787:30"><call pos:start="787:13" pos:end="787:30"><name pos:start="787:13" pos:end="787:25">check_mips_64</name><argument_list pos:start="787:26" pos:end="787:30">(<argument pos:start="787:27" pos:end="787:29"><expr pos:start="787:27" pos:end="787:29"><name pos:start="787:27" pos:end="787:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="789:13" pos:end="789:55"><expr pos:start="789:13" pos:end="789:54"><call pos:start="789:13" pos:end="789:54"><name pos:start="789:13" pos:end="789:21">gen_shift</name><argument_list pos:start="789:22" pos:end="789:54">(<argument pos:start="789:23" pos:end="789:25"><expr pos:start="789:23" pos:end="789:25"><name pos:start="789:23" pos:end="789:25">env</name></expr></argument>, <argument pos:start="789:28" pos:end="789:30"><expr pos:start="789:28" pos:end="789:30"><name pos:start="789:28" pos:end="789:30">ctx</name></expr></argument>, <argument pos:start="789:33" pos:end="789:41"><expr pos:start="789:33" pos:end="789:41"><name pos:start="789:33" pos:end="789:41">OPC_DSRAV</name></expr></argument>, <argument pos:start="789:44" pos:end="789:45"><expr pos:start="789:44" pos:end="789:45"><name pos:start="789:44" pos:end="789:45">ry</name></expr></argument>, <argument pos:start="789:48" pos:end="789:49"><expr pos:start="789:48" pos:end="789:49"><name pos:start="789:48" pos:end="789:49">rx</name></expr></argument>, <argument pos:start="789:52" pos:end="789:53"><expr pos:start="789:52" pos:end="789:53"><name pos:start="789:52" pos:end="789:53">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="791:13" pos:end="794:0">break;</break>

<cpp:endif pos:start="793:1" pos:end="793:6">#<cpp:directive pos:start="793:2" pos:end="793:6">endif</cpp:directive></cpp:endif>

        <case pos:start="795:9" pos:end="795:21">case <expr pos:start="795:14" pos:end="795:20"><name pos:start="795:14" pos:end="795:20">RR_MULT</name></expr>:</case>

            <expr_stmt pos:start="797:13" pos:end="797:46"><expr pos:start="797:13" pos:end="797:45"><call pos:start="797:13" pos:end="797:45"><name pos:start="797:13" pos:end="797:22">gen_muldiv</name><argument_list pos:start="797:23" pos:end="797:45">(<argument pos:start="797:24" pos:end="797:26"><expr pos:start="797:24" pos:end="797:26"><name pos:start="797:24" pos:end="797:26">ctx</name></expr></argument>, <argument pos:start="797:29" pos:end="797:36"><expr pos:start="797:29" pos:end="797:36"><name pos:start="797:29" pos:end="797:36">OPC_MULT</name></expr></argument>, <argument pos:start="797:39" pos:end="797:40"><expr pos:start="797:39" pos:end="797:40"><name pos:start="797:39" pos:end="797:40">rx</name></expr></argument>, <argument pos:start="797:43" pos:end="797:44"><expr pos:start="797:43" pos:end="797:44"><name pos:start="797:43" pos:end="797:44">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="799:13" pos:end="799:18">break;</break>

        <case pos:start="801:9" pos:end="801:22">case <expr pos:start="801:14" pos:end="801:21"><name pos:start="801:14" pos:end="801:21">RR_MULTU</name></expr>:</case>

            <expr_stmt pos:start="803:13" pos:end="803:47"><expr pos:start="803:13" pos:end="803:46"><call pos:start="803:13" pos:end="803:46"><name pos:start="803:13" pos:end="803:22">gen_muldiv</name><argument_list pos:start="803:23" pos:end="803:46">(<argument pos:start="803:24" pos:end="803:26"><expr pos:start="803:24" pos:end="803:26"><name pos:start="803:24" pos:end="803:26">ctx</name></expr></argument>, <argument pos:start="803:29" pos:end="803:37"><expr pos:start="803:29" pos:end="803:37"><name pos:start="803:29" pos:end="803:37">OPC_MULTU</name></expr></argument>, <argument pos:start="803:40" pos:end="803:41"><expr pos:start="803:40" pos:end="803:41"><name pos:start="803:40" pos:end="803:41">rx</name></expr></argument>, <argument pos:start="803:44" pos:end="803:45"><expr pos:start="803:44" pos:end="803:45"><name pos:start="803:44" pos:end="803:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="805:13" pos:end="805:18">break;</break>

        <case pos:start="807:9" pos:end="807:20">case <expr pos:start="807:14" pos:end="807:19"><name pos:start="807:14" pos:end="807:19">RR_DIV</name></expr>:</case>

            <expr_stmt pos:start="809:13" pos:end="809:45"><expr pos:start="809:13" pos:end="809:44"><call pos:start="809:13" pos:end="809:44"><name pos:start="809:13" pos:end="809:22">gen_muldiv</name><argument_list pos:start="809:23" pos:end="809:44">(<argument pos:start="809:24" pos:end="809:26"><expr pos:start="809:24" pos:end="809:26"><name pos:start="809:24" pos:end="809:26">ctx</name></expr></argument>, <argument pos:start="809:29" pos:end="809:35"><expr pos:start="809:29" pos:end="809:35"><name pos:start="809:29" pos:end="809:35">OPC_DIV</name></expr></argument>, <argument pos:start="809:38" pos:end="809:39"><expr pos:start="809:38" pos:end="809:39"><name pos:start="809:38" pos:end="809:39">rx</name></expr></argument>, <argument pos:start="809:42" pos:end="809:43"><expr pos:start="809:42" pos:end="809:43"><name pos:start="809:42" pos:end="809:43">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="811:13" pos:end="811:18">break;</break>

        <case pos:start="813:9" pos:end="813:21">case <expr pos:start="813:14" pos:end="813:20"><name pos:start="813:14" pos:end="813:20">RR_DIVU</name></expr>:</case>

            <expr_stmt pos:start="815:13" pos:end="815:46"><expr pos:start="815:13" pos:end="815:45"><call pos:start="815:13" pos:end="815:45"><name pos:start="815:13" pos:end="815:22">gen_muldiv</name><argument_list pos:start="815:23" pos:end="815:45">(<argument pos:start="815:24" pos:end="815:26"><expr pos:start="815:24" pos:end="815:26"><name pos:start="815:24" pos:end="815:26">ctx</name></expr></argument>, <argument pos:start="815:29" pos:end="815:36"><expr pos:start="815:29" pos:end="815:36"><name pos:start="815:29" pos:end="815:36">OPC_DIVU</name></expr></argument>, <argument pos:start="815:39" pos:end="815:40"><expr pos:start="815:39" pos:end="815:40"><name pos:start="815:39" pos:end="815:40">rx</name></expr></argument>, <argument pos:start="815:43" pos:end="815:44"><expr pos:start="815:43" pos:end="815:44"><name pos:start="815:43" pos:end="815:44">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="817:13" pos:end="820:0">break;</break>

<cpp:if pos:start="819:1" pos:end="819:27">#<cpp:directive pos:start="819:2" pos:end="819:3">if</cpp:directive> <expr pos:start="819:5" pos:end="819:27"><call pos:start="819:5" pos:end="819:27"><name pos:start="819:5" pos:end="819:11">defined</name> <argument_list pos:start="819:13" pos:end="819:27">(<argument pos:start="819:14" pos:end="819:26"><expr pos:start="819:14" pos:end="819:26"><name pos:start="819:14" pos:end="819:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="821:9" pos:end="821:22">case <expr pos:start="821:14" pos:end="821:21"><name pos:start="821:14" pos:end="821:21">RR_DMULT</name></expr>:</case>

            <expr_stmt pos:start="823:13" pos:end="823:31"><expr pos:start="823:13" pos:end="823:30"><call pos:start="823:13" pos:end="823:30"><name pos:start="823:13" pos:end="823:25">check_mips_64</name><argument_list pos:start="823:26" pos:end="823:30">(<argument pos:start="823:27" pos:end="823:29"><expr pos:start="823:27" pos:end="823:29"><name pos:start="823:27" pos:end="823:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="825:13" pos:end="825:47"><expr pos:start="825:13" pos:end="825:46"><call pos:start="825:13" pos:end="825:46"><name pos:start="825:13" pos:end="825:22">gen_muldiv</name><argument_list pos:start="825:23" pos:end="825:46">(<argument pos:start="825:24" pos:end="825:26"><expr pos:start="825:24" pos:end="825:26"><name pos:start="825:24" pos:end="825:26">ctx</name></expr></argument>, <argument pos:start="825:29" pos:end="825:37"><expr pos:start="825:29" pos:end="825:37"><name pos:start="825:29" pos:end="825:37">OPC_DMULT</name></expr></argument>, <argument pos:start="825:40" pos:end="825:41"><expr pos:start="825:40" pos:end="825:41"><name pos:start="825:40" pos:end="825:41">rx</name></expr></argument>, <argument pos:start="825:44" pos:end="825:45"><expr pos:start="825:44" pos:end="825:45"><name pos:start="825:44" pos:end="825:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="827:13" pos:end="827:18">break;</break>

        <case pos:start="829:9" pos:end="829:23">case <expr pos:start="829:14" pos:end="829:22"><name pos:start="829:14" pos:end="829:22">RR_DMULTU</name></expr>:</case>

            <expr_stmt pos:start="831:13" pos:end="831:31"><expr pos:start="831:13" pos:end="831:30"><call pos:start="831:13" pos:end="831:30"><name pos:start="831:13" pos:end="831:25">check_mips_64</name><argument_list pos:start="831:26" pos:end="831:30">(<argument pos:start="831:27" pos:end="831:29"><expr pos:start="831:27" pos:end="831:29"><name pos:start="831:27" pos:end="831:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="833:13" pos:end="833:48"><expr pos:start="833:13" pos:end="833:47"><call pos:start="833:13" pos:end="833:47"><name pos:start="833:13" pos:end="833:22">gen_muldiv</name><argument_list pos:start="833:23" pos:end="833:47">(<argument pos:start="833:24" pos:end="833:26"><expr pos:start="833:24" pos:end="833:26"><name pos:start="833:24" pos:end="833:26">ctx</name></expr></argument>, <argument pos:start="833:29" pos:end="833:38"><expr pos:start="833:29" pos:end="833:38"><name pos:start="833:29" pos:end="833:38">OPC_DMULTU</name></expr></argument>, <argument pos:start="833:41" pos:end="833:42"><expr pos:start="833:41" pos:end="833:42"><name pos:start="833:41" pos:end="833:42">rx</name></expr></argument>, <argument pos:start="833:45" pos:end="833:46"><expr pos:start="833:45" pos:end="833:46"><name pos:start="833:45" pos:end="833:46">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="835:13" pos:end="835:18">break;</break>

        <case pos:start="837:9" pos:end="837:21">case <expr pos:start="837:14" pos:end="837:20"><name pos:start="837:14" pos:end="837:20">RR_DDIV</name></expr>:</case>

            <expr_stmt pos:start="839:13" pos:end="839:31"><expr pos:start="839:13" pos:end="839:30"><call pos:start="839:13" pos:end="839:30"><name pos:start="839:13" pos:end="839:25">check_mips_64</name><argument_list pos:start="839:26" pos:end="839:30">(<argument pos:start="839:27" pos:end="839:29"><expr pos:start="839:27" pos:end="839:29"><name pos:start="839:27" pos:end="839:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="841:13" pos:end="841:46"><expr pos:start="841:13" pos:end="841:45"><call pos:start="841:13" pos:end="841:45"><name pos:start="841:13" pos:end="841:22">gen_muldiv</name><argument_list pos:start="841:23" pos:end="841:45">(<argument pos:start="841:24" pos:end="841:26"><expr pos:start="841:24" pos:end="841:26"><name pos:start="841:24" pos:end="841:26">ctx</name></expr></argument>, <argument pos:start="841:29" pos:end="841:36"><expr pos:start="841:29" pos:end="841:36"><name pos:start="841:29" pos:end="841:36">OPC_DDIV</name></expr></argument>, <argument pos:start="841:39" pos:end="841:40"><expr pos:start="841:39" pos:end="841:40"><name pos:start="841:39" pos:end="841:40">rx</name></expr></argument>, <argument pos:start="841:43" pos:end="841:44"><expr pos:start="841:43" pos:end="841:44"><name pos:start="841:43" pos:end="841:44">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="843:13" pos:end="843:18">break;</break>

        <case pos:start="845:9" pos:end="845:22">case <expr pos:start="845:14" pos:end="845:21"><name pos:start="845:14" pos:end="845:21">RR_DDIVU</name></expr>:</case>

            <expr_stmt pos:start="847:13" pos:end="847:31"><expr pos:start="847:13" pos:end="847:30"><call pos:start="847:13" pos:end="847:30"><name pos:start="847:13" pos:end="847:25">check_mips_64</name><argument_list pos:start="847:26" pos:end="847:30">(<argument pos:start="847:27" pos:end="847:29"><expr pos:start="847:27" pos:end="847:29"><name pos:start="847:27" pos:end="847:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="849:13" pos:end="849:47"><expr pos:start="849:13" pos:end="849:46"><call pos:start="849:13" pos:end="849:46"><name pos:start="849:13" pos:end="849:22">gen_muldiv</name><argument_list pos:start="849:23" pos:end="849:46">(<argument pos:start="849:24" pos:end="849:26"><expr pos:start="849:24" pos:end="849:26"><name pos:start="849:24" pos:end="849:26">ctx</name></expr></argument>, <argument pos:start="849:29" pos:end="849:37"><expr pos:start="849:29" pos:end="849:37"><name pos:start="849:29" pos:end="849:37">OPC_DDIVU</name></expr></argument>, <argument pos:start="849:40" pos:end="849:41"><expr pos:start="849:40" pos:end="849:41"><name pos:start="849:40" pos:end="849:41">rx</name></expr></argument>, <argument pos:start="849:44" pos:end="849:45"><expr pos:start="849:44" pos:end="849:45"><name pos:start="849:44" pos:end="849:45">ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="851:13" pos:end="854:0">break;</break>

<cpp:endif pos:start="853:1" pos:end="853:6">#<cpp:directive pos:start="853:2" pos:end="853:6">endif</cpp:directive></cpp:endif>

        <default pos:start="855:9" pos:end="855:16">default:</default>

            <expr_stmt pos:start="857:13" pos:end="857:45"><expr pos:start="857:13" pos:end="857:44"><call pos:start="857:13" pos:end="857:44"><name pos:start="857:13" pos:end="857:30">generate_exception</name><argument_list pos:start="857:31" pos:end="857:44">(<argument pos:start="857:32" pos:end="857:34"><expr pos:start="857:32" pos:end="857:34"><name pos:start="857:32" pos:end="857:34">ctx</name></expr></argument>, <argument pos:start="857:37" pos:end="857:43"><expr pos:start="857:37" pos:end="857:43"><name pos:start="857:37" pos:end="857:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="859:13" pos:end="859:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="863:9" pos:end="863:14">break;</break>

    <case pos:start="865:5" pos:end="865:24">case <expr pos:start="865:10" pos:end="865:23"><name pos:start="865:10" pos:end="865:23">M16_OPC_EXTEND</name></expr>:</case>

        <expr_stmt pos:start="867:9" pos:end="867:56"><expr pos:start="867:9" pos:end="867:55"><call pos:start="867:9" pos:end="867:55"><name pos:start="867:9" pos:end="867:34">decode_extended_mips16_opc</name><argument_list pos:start="867:35" pos:end="867:55">(<argument pos:start="867:36" pos:end="867:38"><expr pos:start="867:36" pos:end="867:38"><name pos:start="867:36" pos:end="867:38">env</name></expr></argument>, <argument pos:start="867:41" pos:end="867:43"><expr pos:start="867:41" pos:end="867:43"><name pos:start="867:41" pos:end="867:43">ctx</name></expr></argument>, <argument pos:start="867:46" pos:end="867:54"><expr pos:start="867:46" pos:end="867:54"><name pos:start="867:46" pos:end="867:54">is_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="869:9" pos:end="869:20"><expr pos:start="869:9" pos:end="869:19"><name pos:start="869:9" pos:end="869:15">n_bytes</name> <operator pos:start="869:17" pos:end="869:17">=</operator> <literal type="number" pos:start="869:19" pos:end="869:19">4</literal></expr>;</expr_stmt>

        <break pos:start="871:9" pos:end="874:0">break;</break>

<cpp:if pos:start="873:1" pos:end="873:26">#<cpp:directive pos:start="873:2" pos:end="873:3">if</cpp:directive> <expr pos:start="873:5" pos:end="873:26"><call pos:start="873:5" pos:end="873:26"><name pos:start="873:5" pos:end="873:11">defined</name><argument_list pos:start="873:12" pos:end="873:26">(<argument pos:start="873:13" pos:end="873:25"><expr pos:start="873:13" pos:end="873:25"><name pos:start="873:13" pos:end="873:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="875:5" pos:end="875:21">case <expr pos:start="875:10" pos:end="875:20"><name pos:start="875:10" pos:end="875:20">M16_OPC_I64</name></expr>:</case>

        <expr_stmt pos:start="877:9" pos:end="877:41"><expr pos:start="877:9" pos:end="877:40"><name pos:start="877:9" pos:end="877:13">funct</name> <operator pos:start="877:15" pos:end="877:15">=</operator> <operator pos:start="877:17" pos:end="877:17">(</operator><name pos:start="877:18" pos:end="877:28"><name pos:start="877:18" pos:end="877:20">ctx</name><operator pos:start="877:21" pos:end="877:22">-&gt;</operator><name pos:start="877:23" pos:end="877:28">opcode</name></name> <operator pos:start="877:30" pos:end="877:31">&gt;&gt;</operator> <literal type="number" pos:start="877:33" pos:end="877:33">8</literal><operator pos:start="877:34" pos:end="877:34">)</operator> <operator pos:start="877:36" pos:end="877:36">&amp;</operator> <literal type="number" pos:start="877:38" pos:end="877:40">0x7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="879:9" pos:end="879:58"><expr pos:start="879:9" pos:end="879:57"><call pos:start="879:9" pos:end="879:57"><name pos:start="879:9" pos:end="879:25">decode_i64_mips16</name><argument_list pos:start="879:26" pos:end="879:57">(<argument pos:start="879:27" pos:end="879:29"><expr pos:start="879:27" pos:end="879:29"><name pos:start="879:27" pos:end="879:29">env</name></expr></argument>, <argument pos:start="879:32" pos:end="879:34"><expr pos:start="879:32" pos:end="879:34"><name pos:start="879:32" pos:end="879:34">ctx</name></expr></argument>, <argument pos:start="879:37" pos:end="879:38"><expr pos:start="879:37" pos:end="879:38"><name pos:start="879:37" pos:end="879:38">ry</name></expr></argument>, <argument pos:start="879:41" pos:end="879:45"><expr pos:start="879:41" pos:end="879:45"><name pos:start="879:41" pos:end="879:45">funct</name></expr></argument>, <argument pos:start="879:48" pos:end="879:53"><expr pos:start="879:48" pos:end="879:53"><name pos:start="879:48" pos:end="879:53">offset</name></expr></argument>, <argument pos:start="879:56" pos:end="879:56"><expr pos:start="879:56" pos:end="879:56"><literal type="number" pos:start="879:56" pos:end="879:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="881:9" pos:end="884:0">break;</break>

<cpp:endif pos:start="883:1" pos:end="883:6">#<cpp:directive pos:start="883:2" pos:end="883:6">endif</cpp:directive></cpp:endif>

    <default pos:start="885:5" pos:end="885:12">default:</default>

        <expr_stmt pos:start="887:9" pos:end="887:41"><expr pos:start="887:9" pos:end="887:40"><call pos:start="887:9" pos:end="887:40"><name pos:start="887:9" pos:end="887:26">generate_exception</name><argument_list pos:start="887:27" pos:end="887:40">(<argument pos:start="887:28" pos:end="887:30"><expr pos:start="887:28" pos:end="887:30"><name pos:start="887:28" pos:end="887:30">ctx</name></expr></argument>, <argument pos:start="887:33" pos:end="887:39"><expr pos:start="887:33" pos:end="887:39"><name pos:start="887:33" pos:end="887:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="889:9" pos:end="889:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="895:5" pos:end="895:19">return <expr pos:start="895:12" pos:end="895:18"><name pos:start="895:12" pos:end="895:18">n_bytes</name></expr>;</return>

</block_content>}</block></function>
</unit>
