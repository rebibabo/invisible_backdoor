<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11013.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:10">build_srat</name><argument_list pos:start="1:11" pos:end="1:73">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>, <argument pos:start="1:48" pos:end="1:72">VirtGuestInfo *guest_info</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:62">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:37"><name pos:start="5:5" pos:end="5:35">AcpiSystemResourceAffinityTable</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:41">srat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:33">AcpiSratProcessorGiccAffinity</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:39">core</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">AcpiSratMemoryAffinity</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:35">numamem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:24">srat_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:21">mem_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:76"><decl pos:start="15:5" pos:end="15:75"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:22">cpu_node</name> <init pos:start="15:24" pos:end="15:75">= <expr pos:start="15:26" pos:end="15:75"><call pos:start="15:26" pos:end="15:75"><name pos:start="15:26" pos:end="15:34">g_malloc0</name><argument_list pos:start="15:35" pos:end="15:75">(<argument pos:start="15:36" pos:end="15:74"><expr pos:start="15:36" pos:end="15:74"><name pos:start="15:36" pos:end="15:55"><name pos:start="15:36" pos:end="15:45">guest_info</name><operator pos:start="15:46" pos:end="15:47">-&gt;</operator><name pos:start="15:48" pos:end="15:55">smp_cpus</name></name> <operator pos:start="15:57" pos:end="15:57">*</operator> <sizeof pos:start="15:59" pos:end="15:74">sizeof<argument_list pos:start="15:65" pos:end="15:74">(<argument pos:start="15:66" pos:end="15:73"><expr pos:start="15:66" pos:end="15:73"><name pos:start="15:66" pos:end="15:73">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="33:5">for <control pos:start="19:9" pos:end="19:46">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:41"><expr pos:start="19:17" pos:end="19:40"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:40"><name pos:start="19:21" pos:end="19:30">guest_info</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:40">smp_cpus</name></name></expr>;</condition> <incr pos:start="19:43" pos:end="19:45"><expr pos:start="19:43" pos:end="19:45"><name pos:start="19:43" pos:end="19:43">i</name><operator pos:start="19:44" pos:end="19:45">++</operator></expr></incr>)</control> <block pos:start="19:48" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:9">

        <for pos:start="21:9" pos:end="31:9">for <control pos:start="21:13" pos:end="21:43">(<init pos:start="21:14" pos:end="21:19"><expr pos:start="21:14" pos:end="21:18"><name pos:start="21:14" pos:end="21:14">j</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</init> <condition pos:start="21:21" pos:end="21:38"><expr pos:start="21:21" pos:end="21:37"><name pos:start="21:21" pos:end="21:21">j</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <name pos:start="21:25" pos:end="21:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="21:40" pos:end="21:42"><expr pos:start="21:40" pos:end="21:42"><name pos:start="21:40" pos:end="21:40">j</name><operator pos:start="21:41" pos:end="21:42">++</operator></expr></incr>)</control> <block pos:start="21:45" pos:end="31:9">{<block_content pos:start="23:13" pos:end="29:13">

            <if_stmt pos:start="23:13" pos:end="29:13"><if pos:start="23:13" pos:end="29:13">if <condition pos:start="23:16" pos:end="23:51">(<expr pos:start="23:17" pos:end="23:50"><call pos:start="23:17" pos:end="23:50"><name pos:start="23:17" pos:end="23:24">test_bit</name><argument_list pos:start="23:25" pos:end="23:50">(<argument pos:start="23:26" pos:end="23:26"><expr pos:start="23:26" pos:end="23:26"><name pos:start="23:26" pos:end="23:26">i</name></expr></argument>, <argument pos:start="23:29" pos:end="23:49"><expr pos:start="23:29" pos:end="23:49"><name pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:37">numa_info</name><index pos:start="23:38" pos:end="23:40">[<expr pos:start="23:39" pos:end="23:39"><name pos:start="23:39" pos:end="23:39">j</name></expr>]</index></name><operator pos:start="23:41" pos:end="23:41">.</operator><name pos:start="23:42" pos:end="23:49">node_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:53" pos:end="29:13">{<block_content pos:start="25:17" pos:end="27:22">

                <expr_stmt pos:start="25:17" pos:end="25:32"><expr pos:start="25:17" pos:end="25:31"><name pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:24">cpu_node</name><index pos:start="25:25" pos:end="25:27">[<expr pos:start="25:26" pos:end="25:26"><name pos:start="25:26" pos:end="25:26">i</name></expr>]</index></name> <operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:31">j</name></expr>;</expr_stmt>

                <break pos:start="27:17" pos:end="27:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:14">srat_start</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:32"><name pos:start="37:18" pos:end="37:27">table_data</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:32">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:53"><expr pos:start="39:5" pos:end="39:52"><name pos:start="39:5" pos:end="39:8">srat</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:52"><name pos:start="39:12" pos:end="39:25">acpi_data_push</name><argument_list pos:start="39:26" pos:end="39:52">(<argument pos:start="39:27" pos:end="39:36"><expr pos:start="39:27" pos:end="39:36"><name pos:start="39:27" pos:end="39:36">table_data</name></expr></argument>, <argument pos:start="39:39" pos:end="39:51"><expr pos:start="39:39" pos:end="39:51"><sizeof pos:start="39:39" pos:end="39:51">sizeof<argument_list pos:start="39:45" pos:end="39:51">(<argument pos:start="39:46" pos:end="39:50"><expr pos:start="39:46" pos:end="39:50"><operator pos:start="39:46" pos:end="39:46">*</operator><name pos:start="39:47" pos:end="39:50">srat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:8">srat</name><operator pos:start="41:9" pos:end="41:10">-&gt;</operator><name pos:start="41:11" pos:end="41:19">reserved1</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:36"><name pos:start="41:23" pos:end="41:33">cpu_to_le32</name><argument_list pos:start="41:34" pos:end="41:36">(<argument pos:start="41:35" pos:end="41:35"><expr pos:start="41:35" pos:end="41:35"><literal type="number" pos:start="41:35" pos:end="41:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="45:5" pos:end="59:5">for <control pos:start="45:9" pos:end="45:46">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:41"><expr pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:30">guest_info</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:40">smp_cpus</name></name></expr>;</condition> <incr pos:start="45:43" pos:end="45:45"><expr pos:start="45:43" pos:end="45:45"><operator pos:start="45:43" pos:end="45:44">++</operator><name pos:start="45:45" pos:end="45:45">i</name></expr></incr>)</control> <block pos:start="45:48" pos:end="59:5">{<block_content pos:start="47:9" pos:end="57:37">

        <expr_stmt pos:start="47:9" pos:end="47:57"><expr pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:12">core</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:56"><name pos:start="47:16" pos:end="47:29">acpi_data_push</name><argument_list pos:start="47:30" pos:end="47:56">(<argument pos:start="47:31" pos:end="47:40"><expr pos:start="47:31" pos:end="47:40"><name pos:start="47:31" pos:end="47:40">table_data</name></expr></argument>, <argument pos:start="47:43" pos:end="47:55"><expr pos:start="47:43" pos:end="47:55"><sizeof pos:start="47:43" pos:end="47:55">sizeof<argument_list pos:start="47:49" pos:end="47:55">(<argument pos:start="47:50" pos:end="47:54"><expr pos:start="47:50" pos:end="47:54"><operator pos:start="47:50" pos:end="47:50">*</operator><name pos:start="47:51" pos:end="47:54">core</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:12">core</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:18">type</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:45">ACPI_SRAT_PROCESSOR_GICC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:12">core</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:20">length</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <sizeof pos:start="51:24" pos:end="51:36">sizeof<argument_list pos:start="51:30" pos:end="51:36">(<argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><operator pos:start="51:31" pos:end="51:31">*</operator><name pos:start="51:32" pos:end="51:35">core</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:12">core</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:23">proximity</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <call pos:start="53:27" pos:end="53:50"><name pos:start="53:27" pos:end="53:37">cpu_to_le32</name><argument_list pos:start="53:38" pos:end="53:50">(<argument pos:start="53:39" pos:end="53:49"><expr pos:start="53:39" pos:end="53:49"><name pos:start="53:39" pos:end="53:49"><name pos:start="53:39" pos:end="53:46">cpu_node</name><index pos:start="53:47" pos:end="53:49">[<expr pos:start="53:48" pos:end="53:48"><name pos:start="53:48" pos:end="53:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:12">core</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:32">acpi_processor_uid</name></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <call pos:start="55:36" pos:end="55:49"><name pos:start="55:36" pos:end="55:46">cpu_to_le32</name><argument_list pos:start="55:47" pos:end="55:49">(<argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><name pos:start="55:48" pos:end="55:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:12">core</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:19">flags</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:36"><name pos:start="57:23" pos:end="57:33">cpu_to_le32</name><argument_list pos:start="57:34" pos:end="57:36">(<argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="61:5" pos:end="61:21"><expr pos:start="61:5" pos:end="61:20"><call pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:10">g_free</name><argument_list pos:start="61:11" pos:end="61:20">(<argument pos:start="61:12" pos:end="61:19"><expr pos:start="61:12" pos:end="61:19"><name pos:start="61:12" pos:end="61:19">cpu_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:12">mem_base</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:43"><name pos:start="65:16" pos:end="65:25">guest_info</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:33">memmap</name><index pos:start="65:34" pos:end="65:43">[<expr pos:start="65:35" pos:end="65:42"><name pos:start="65:35" pos:end="65:42">VIRT_MEM</name></expr>]</index></name><operator pos:start="65:44" pos:end="65:44">.</operator><name pos:start="65:45" pos:end="65:48">base</name></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="77:5">for <control pos:start="67:9" pos:end="67:39">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:34"><expr pos:start="67:17" pos:end="67:33"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><operator pos:start="67:36" pos:end="67:37">++</operator><name pos:start="67:38" pos:end="67:38">i</name></expr></incr>)</control> <block pos:start="67:41" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:42">

        <expr_stmt pos:start="69:9" pos:end="69:63"><expr pos:start="69:9" pos:end="69:62"><name pos:start="69:9" pos:end="69:15">numamem</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:62"><name pos:start="69:19" pos:end="69:32">acpi_data_push</name><argument_list pos:start="69:33" pos:end="69:62">(<argument pos:start="69:34" pos:end="69:43"><expr pos:start="69:34" pos:end="69:43"><name pos:start="69:34" pos:end="69:43">table_data</name></expr></argument>, <argument pos:start="69:46" pos:end="69:61"><expr pos:start="69:46" pos:end="69:61"><sizeof pos:start="69:46" pos:end="69:61">sizeof<argument_list pos:start="69:52" pos:end="69:61">(<argument pos:start="69:53" pos:end="69:60"><expr pos:start="69:53" pos:end="69:60"><operator pos:start="69:53" pos:end="69:53">*</operator><name pos:start="69:54" pos:end="69:60">numamem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:48"><expr pos:start="71:9" pos:end="73:47"><call pos:start="71:9" pos:end="73:47"><name pos:start="71:9" pos:end="71:25">build_srat_memory</name><argument_list pos:start="71:26" pos:end="73:47">(<argument pos:start="71:27" pos:end="71:33"><expr pos:start="71:27" pos:end="71:33"><name pos:start="71:27" pos:end="71:33">numamem</name></expr></argument>, <argument pos:start="71:36" pos:end="71:43"><expr pos:start="71:36" pos:end="71:43"><name pos:start="71:36" pos:end="71:43">mem_base</name></expr></argument>, <argument pos:start="71:46" pos:end="71:66"><expr pos:start="71:46" pos:end="71:66"><name pos:start="71:46" pos:end="71:57"><name pos:start="71:46" pos:end="71:54">numa_info</name><index pos:start="71:55" pos:end="71:57">[<expr pos:start="71:56" pos:end="71:56"><name pos:start="71:56" pos:end="71:56">i</name></expr>]</index></name><operator pos:start="71:58" pos:end="71:58">.</operator><name pos:start="71:59" pos:end="71:66">node_mem</name></expr></argument>, <argument pos:start="71:69" pos:end="71:69"><expr pos:start="71:69" pos:end="71:69"><name pos:start="71:69" pos:end="71:69">i</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:46"><expr pos:start="73:27" pos:end="73:46"><name pos:start="73:27" pos:end="73:46">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:16">mem_base</name> <operator pos:start="75:18" pos:end="75:19">+=</operator> <name pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:29">numa_info</name><index pos:start="75:30" pos:end="75:32">[<expr pos:start="75:31" pos:end="75:31"><name pos:start="75:31" pos:end="75:31">i</name></expr>]</index></name><operator pos:start="75:33" pos:end="75:33">.</operator><name pos:start="75:34" pos:end="75:41">node_mem</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="81:5" pos:end="85:62"><expr pos:start="81:5" pos:end="85:61"><call pos:start="81:5" pos:end="85:61"><name pos:start="81:5" pos:end="81:16">build_header</name><argument_list pos:start="81:17" pos:end="85:61">(<argument pos:start="81:18" pos:end="81:23"><expr pos:start="81:18" pos:end="81:23"><name pos:start="81:18" pos:end="81:23">linker</name></expr></argument>, <argument pos:start="81:26" pos:end="81:35"><expr pos:start="81:26" pos:end="81:35"><name pos:start="81:26" pos:end="81:35">table_data</name></expr></argument>,

                 <argument pos:start="83:18" pos:end="83:56"><expr pos:start="83:18" pos:end="83:56"><operator pos:start="83:18" pos:end="83:18">(</operator><name pos:start="83:19" pos:end="83:22">void</name> <operator pos:start="83:24" pos:end="83:24">*</operator><operator pos:start="83:25" pos:end="83:25">)</operator><operator pos:start="83:26" pos:end="83:26">(</operator><name pos:start="83:27" pos:end="83:42"><name pos:start="83:27" pos:end="83:36">table_data</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:42">data</name></name> <operator pos:start="83:44" pos:end="83:44">+</operator> <name pos:start="83:46" pos:end="83:55">srat_start</name><operator pos:start="83:56" pos:end="83:56">)</operator></expr></argument>, <argument pos:start="83:59" pos:end="83:64"><expr pos:start="83:59" pos:end="83:64"><literal type="string" pos:start="83:59" pos:end="83:64">"SRAT"</literal></expr></argument>,

                 <argument pos:start="85:18" pos:end="85:45"><expr pos:start="85:18" pos:end="85:45"><name pos:start="85:18" pos:end="85:32"><name pos:start="85:18" pos:end="85:27">table_data</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:32">len</name></name> <operator pos:start="85:34" pos:end="85:34">-</operator> <name pos:start="85:36" pos:end="85:45">srat_start</name></expr></argument>, <argument pos:start="85:48" pos:end="85:48"><expr pos:start="85:48" pos:end="85:48"><literal type="number" pos:start="85:48" pos:end="85:48">3</literal></expr></argument>, <argument pos:start="85:51" pos:end="85:54"><expr pos:start="85:51" pos:end="85:54"><name pos:start="85:51" pos:end="85:54">NULL</name></expr></argument>, <argument pos:start="85:57" pos:end="85:60"><expr pos:start="85:57" pos:end="85:60"><name pos:start="85:57" pos:end="85:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
