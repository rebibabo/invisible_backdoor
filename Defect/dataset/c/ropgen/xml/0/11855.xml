<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11855.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">ide_dev_initfn</name><parameter_list pos:start="1:26" pos:end="1:60">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:35">IDEDevice</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">dev</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:59"><decl pos:start="1:43" pos:end="1:59"><type pos:start="1:43" pos:end="1:59"><name pos:start="1:43" pos:end="1:54">IDEDriveKind</name></type> <name pos:start="1:56" pos:end="1:59">kind</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">IDEBus</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">bus</name> <init pos:start="5:17" pos:end="5:63">= <expr pos:start="5:19" pos:end="5:63"><call pos:start="5:19" pos:end="5:63"><name pos:start="5:19" pos:end="5:27">DO_UPCAST</name><argument_list pos:start="5:28" pos:end="5:63">(<argument pos:start="5:29" pos:end="5:34"><expr pos:start="5:29" pos:end="5:34"><name pos:start="5:29" pos:end="5:34">IDEBus</name></expr></argument>, <argument pos:start="5:37" pos:end="5:40"><expr pos:start="5:37" pos:end="5:40"><name pos:start="5:37" pos:end="5:40">qbus</name></expr></argument>, <argument pos:start="5:43" pos:end="5:62"><expr pos:start="5:43" pos:end="5:62"><name pos:start="5:43" pos:end="5:62"><name pos:start="5:43" pos:end="5:45">dev</name><operator pos:start="5:46" pos:end="5:47">-&gt;</operator><name pos:start="5:48" pos:end="5:51">qdev</name><operator pos:start="5:52" pos:end="5:52">.</operator><name pos:start="5:53" pos:end="5:62">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:38">= <expr pos:start="7:19" pos:end="7:38"><name pos:start="7:19" pos:end="7:26"><name pos:start="7:19" pos:end="7:21">bus</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:26">ifs</name></name> <operator pos:start="7:28" pos:end="7:28">+</operator> <name pos:start="7:30" pos:end="7:38"><name pos:start="7:30" pos:end="7:32">dev</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:38">unit</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">DriveInfo</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:20">dinfo</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:78">(<expr pos:start="15:9" pos:end="15:77"><name pos:start="15:9" pos:end="15:37"><name pos:start="15:9" pos:end="15:11">dev</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:17">conf</name><operator pos:start="15:18" pos:end="15:18">.</operator><name pos:start="15:19" pos:end="15:37">discard_granularity</name></name> <operator pos:start="15:39" pos:end="15:40">&amp;&amp;</operator> <name pos:start="15:42" pos:end="15:70"><name pos:start="15:42" pos:end="15:44">dev</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:50">conf</name><operator pos:start="15:51" pos:end="15:51">.</operator><name pos:start="15:52" pos:end="15:70">discard_granularity</name></name> <operator pos:start="15:72" pos:end="15:73">!=</operator> <literal type="number" pos:start="15:75" pos:end="15:77">512</literal></expr>)</condition> <block pos:start="15:80" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:64"><expr pos:start="17:9" pos:end="17:63"><call pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="17:63">(<argument pos:start="17:22" pos:end="17:62"><expr pos:start="17:22" pos:end="17:62"><literal type="string" pos:start="17:22" pos:end="17:62">"discard_granularity must be 512 for ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:10">serial</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:24"><name pos:start="25:14" pos:end="25:16">dev</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:24">serial</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:15">serial</name></expr>)</condition> <block pos:start="27:18" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:9">

        <comment type="block" pos:start="29:9" pos:end="29:73">/* try to fall back to value set with legacy -drive serial=... */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:52"><expr pos:start="31:9" pos:end="31:51"><name pos:start="31:9" pos:end="31:13">dinfo</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:51"><name pos:start="31:17" pos:end="31:37">drive_get_by_blockdev</name><argument_list pos:start="31:38" pos:end="31:51">(<argument pos:start="31:39" pos:end="31:50"><expr pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:41">dev</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:47">conf</name><operator pos:start="31:48" pos:end="31:48">.</operator><name pos:start="31:49" pos:end="31:50">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:27">(<expr pos:start="33:13" pos:end="33:26"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:26"><name pos:start="33:14" pos:end="33:18">dinfo</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:26">serial</name></name></expr>)</condition> <block pos:start="33:29" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:35">

            <expr_stmt pos:start="35:13" pos:end="35:35"><expr pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:18">serial</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:26">dinfo</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:34">serial</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:72">(<expr pos:start="43:9" pos:end="43:71"><call pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:22">ide_init_drive</name><argument_list pos:start="43:23" pos:end="43:67">(<argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><name pos:start="43:24" pos:end="43:24">s</name></expr></argument>, <argument pos:start="43:27" pos:end="43:38"><expr pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:29">dev</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:35">conf</name><operator pos:start="43:36" pos:end="43:36">.</operator><name pos:start="43:37" pos:end="43:38">bs</name></name></expr></argument>, <argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">kind</name></expr></argument>, <argument pos:start="43:47" pos:end="43:58"><expr pos:start="43:47" pos:end="43:58"><name pos:start="43:47" pos:end="43:58"><name pos:start="43:47" pos:end="43:49">dev</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:58">version</name></name></expr></argument>, <argument pos:start="43:61" pos:end="43:66"><expr pos:start="43:61" pos:end="43:66"><name pos:start="43:61" pos:end="43:66">serial</name></expr></argument>)</argument_list></call> <operator pos:start="43:69" pos:end="43:69">&lt;</operator> <literal type="number" pos:start="43:71" pos:end="43:71">0</literal></expr>)</condition> <block pos:start="43:74" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:22">(<expr pos:start="51:9" pos:end="51:21"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:21"><name pos:start="51:10" pos:end="51:12">dev</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:21">version</name></name></expr>)</condition> <block pos:start="51:24" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:44">

        <expr_stmt pos:start="53:9" pos:end="53:44"><expr pos:start="53:9" pos:end="53:43"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:11">dev</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:20">version</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <call pos:start="53:24" pos:end="53:43"><name pos:start="53:24" pos:end="53:31">g_strdup</name><argument_list pos:start="53:32" pos:end="53:43">(<argument pos:start="53:33" pos:end="53:42"><expr pos:start="53:33" pos:end="53:42"><name pos:start="53:33" pos:end="53:42"><name pos:start="53:33" pos:end="53:33">s</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:42">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:21">(<expr pos:start="57:9" pos:end="57:20"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:20"><name pos:start="57:10" pos:end="57:12">dev</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:20">serial</name></name></expr>)</condition> <block pos:start="57:23" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:52">

        <expr_stmt pos:start="59:9" pos:end="59:52"><expr pos:start="59:9" pos:end="59:51"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:11">dev</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:19">serial</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:51"><name pos:start="59:23" pos:end="59:30">g_strdup</name><argument_list pos:start="59:31" pos:end="59:51">(<argument pos:start="59:32" pos:end="59:50"><expr pos:start="59:32" pos:end="59:50"><name pos:start="59:32" pos:end="59:50"><name pos:start="59:32" pos:end="59:32">s</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:50">drive_serial_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="67:60"><expr pos:start="65:5" pos:end="67:59"><call pos:start="65:5" pos:end="67:59"><name pos:start="65:5" pos:end="65:24">add_boot_device_path</name><argument_list pos:start="65:25" pos:end="67:59">(<argument pos:start="65:26" pos:end="65:44"><expr pos:start="65:26" pos:end="65:44"><name pos:start="65:26" pos:end="65:44"><name pos:start="65:26" pos:end="65:28">dev</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:34">conf</name><operator pos:start="65:35" pos:end="65:35">.</operator><name pos:start="65:36" pos:end="65:44">bootindex</name></name></expr></argument>, <argument pos:start="65:47" pos:end="65:56"><expr pos:start="65:47" pos:end="65:56"><operator pos:start="65:47" pos:end="65:47">&amp;</operator><name pos:start="65:48" pos:end="65:56"><name pos:start="65:48" pos:end="65:50">dev</name><operator pos:start="65:51" pos:end="65:52">-&gt;</operator><name pos:start="65:53" pos:end="65:56">qdev</name></name></expr></argument>,

                         <argument pos:start="67:26" pos:end="67:58"><expr pos:start="67:26" pos:end="67:58"><ternary pos:start="67:26" pos:end="67:58"><condition pos:start="67:26" pos:end="67:36"><expr pos:start="67:26" pos:end="67:34"><name pos:start="67:26" pos:end="67:34"><name pos:start="67:26" pos:end="67:28">dev</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:34">unit</name></name></expr> ?</condition><then pos:start="67:38" pos:end="67:46"> <expr pos:start="67:38" pos:end="67:46"><literal type="string" pos:start="67:38" pos:end="67:46">"/disk@1"</literal></expr> </then><else pos:start="67:48" pos:end="67:58">: <expr pos:start="67:50" pos:end="67:58"><literal type="string" pos:start="67:50" pos:end="67:58">"/disk@0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
