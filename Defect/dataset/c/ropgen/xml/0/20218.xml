<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20218.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">scsi_block_realize</name><parameter_list pos:start="1:31" pos:end="1:61">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:41">SCSIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:33">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:58">= <expr pos:start="5:24" pos:end="5:58"><call pos:start="5:24" pos:end="5:58"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:58">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSIDiskState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>, <argument pos:start="5:55" pos:end="5:57"><expr pos:start="5:55" pos:end="5:57"><name pos:start="5:55" pos:end="5:57">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">sg_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:25">(<expr pos:start="13:9" pos:end="13:24"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:24"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:16">qdev</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:21">conf</name><operator pos:start="13:22" pos:end="13:22">.</operator><name pos:start="13:23" pos:end="13:24">bs</name></name></expr>)</condition> <block pos:start="13:27" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:51"><expr pos:start="15:9" pos:end="15:50"><call pos:start="15:9" pos:end="15:50"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:50">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">errp</name></expr></argument>, <argument pos:start="15:26" pos:end="15:49"><expr pos:start="15:26" pos:end="15:49"><literal type="string" pos:start="15:26" pos:end="15:49">"drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:74">/* check we are using a driver managing SG_IO (version 3 and after) */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:70"><expr pos:start="25:5" pos:end="25:69"><name pos:start="25:5" pos:end="25:6">rc</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:69"><name pos:start="25:10" pos:end="25:19">bdrv_ioctl</name><argument_list pos:start="25:20" pos:end="25:69">(<argument pos:start="25:21" pos:end="25:35"><expr pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">qdev</name><operator pos:start="25:28" pos:end="25:28">.</operator><name pos:start="25:29" pos:end="25:32">conf</name><operator pos:start="25:33" pos:end="25:33">.</operator><name pos:start="25:34" pos:end="25:35">bs</name></name></expr></argument>, <argument pos:start="25:38" pos:end="25:55"><expr pos:start="25:38" pos:end="25:55"><name pos:start="25:38" pos:end="25:55">SG_GET_VERSION_NUM</name></expr></argument>, <argument pos:start="25:58" pos:end="25:68"><expr pos:start="25:58" pos:end="25:68"><operator pos:start="25:58" pos:end="25:58">&amp;</operator><name pos:start="25:59" pos:end="25:68">sg_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">rc</name> <operator pos:start="27:12" pos:end="27:12">&lt;</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>)</condition> <block pos:start="27:17" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:15">

        <expr_stmt pos:start="29:9" pos:end="33:36"><expr pos:start="29:9" pos:end="33:35"><call pos:start="29:9" pos:end="33:35"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="33:35">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="31:45"><expr pos:start="29:26" pos:end="31:45"><literal type="string" pos:start="29:26" pos:end="29:65">"cannot get SG_IO version number: %s.  "</literal>

                     <literal type="string" pos:start="31:22" pos:end="31:45">"Is this a SCSI device?"</literal></expr></argument>,

                     <argument pos:start="33:22" pos:end="33:34"><expr pos:start="33:22" pos:end="33:34"><call pos:start="33:22" pos:end="33:34"><name pos:start="33:22" pos:end="33:29">strerror</name><argument_list pos:start="33:30" pos:end="33:34">(<argument pos:start="33:31" pos:end="33:33"><expr pos:start="33:31" pos:end="33:33"><operator pos:start="33:31" pos:end="33:31">-</operator><name pos:start="33:32" pos:end="33:33">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:27">(<expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:18">sg_version</name> <operator pos:start="39:20" pos:end="39:20">&lt;</operator> <literal type="number" pos:start="39:22" pos:end="39:26">30000</literal></expr>)</condition> <block pos:start="39:29" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:15">

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><call pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="41:58">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:57"><expr pos:start="41:26" pos:end="41:57"><literal type="string" pos:start="41:26" pos:end="41:57">"scsi generic interface too old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:43">/* get device type from INQUIRY data */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:6">rc</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:27"><name pos:start="51:10" pos:end="51:24">get_device_type</name><argument_list pos:start="51:25" pos:end="51:27">(<argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:10">rc</name> <operator pos:start="53:12" pos:end="53:12">&lt;</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>)</condition> <block pos:start="53:17" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:15">

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><call pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="55:42">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:41"><expr pos:start="55:26" pos:end="55:41"><literal type="string" pos:start="55:26" pos:end="55:41">"INQUIRY failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="69:7">/* Make a guess for the block size, we'll fix it when the guest sends.

     * READ CAPACITY.  If they don't, they likely would assume these sizes

     * anyway. (TODO: check in /sys).

     */</comment>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:62">(<expr pos:start="71:9" pos:end="71:61"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:15">qdev</name><operator pos:start="71:16" pos:end="71:16">.</operator><name pos:start="71:17" pos:end="71:20">type</name></name> <operator pos:start="71:22" pos:end="71:23">==</operator> <name pos:start="71:25" pos:end="71:32">TYPE_ROM</name> <operator pos:start="71:34" pos:end="71:35">||</operator> <name pos:start="71:37" pos:end="71:48"><name pos:start="71:37" pos:end="71:37">s</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:43">qdev</name><operator pos:start="71:44" pos:end="71:44">.</operator><name pos:start="71:45" pos:end="71:48">type</name></name> <operator pos:start="71:50" pos:end="71:51">==</operator> <name pos:start="71:53" pos:end="71:61">TYPE_WORM</name></expr>)</condition> <block pos:start="71:64" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:33">

        <expr_stmt pos:start="73:9" pos:end="73:33"><expr pos:start="73:9" pos:end="73:32"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:15">qdev</name><operator pos:start="73:16" pos:end="73:16">.</operator><name pos:start="73:17" pos:end="73:25">blocksize</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <literal type="number" pos:start="73:29" pos:end="73:32">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:32">

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:15">qdev</name><operator pos:start="77:16" pos:end="77:16">.</operator><name pos:start="77:17" pos:end="77:25">blocksize</name></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <literal type="number" pos:start="77:29" pos:end="77:31">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="87:7">/* Makes the scsi-block device not removable by using HMP and QMP eject

     * command.

     */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:58"><expr pos:start="89:5" pos:end="89:57"><name pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:15">features</name></name> <operator pos:start="89:17" pos:end="89:18">|=</operator> <operator pos:start="89:20" pos:end="89:20">(</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal> <operator pos:start="89:23" pos:end="89:24">&lt;&lt;</operator> <name pos:start="89:26" pos:end="89:56">SCSI_DISK_F_NO_REMOVABLE_DEVOPS</name><operator pos:start="89:57" pos:end="89:57">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:33"><expr pos:start="93:5" pos:end="93:32"><call pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:16">scsi_realize</name><argument_list pos:start="93:17" pos:end="93:32">(<argument pos:start="93:18" pos:end="93:25"><expr pos:start="93:18" pos:end="93:25"><operator pos:start="93:18" pos:end="93:18">&amp;</operator><name pos:start="93:19" pos:end="93:25"><name pos:start="93:19" pos:end="93:19">s</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:25">qdev</name></name></expr></argument>, <argument pos:start="93:28" pos:end="93:31"><expr pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:31">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
