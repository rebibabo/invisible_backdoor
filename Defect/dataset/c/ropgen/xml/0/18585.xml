<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18585.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_vp56_decode_frame</name><parameter_list pos:start="1:25" pos:end="3:41">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:74">got_frame</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:40"><decl pos:start="3:26" pos:end="3:40"><type pos:start="3:26" pos:end="3:40"><name pos:start="3:26" pos:end="3:33">AVPacket</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:40">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:23">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">VP56Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier><specifier pos:start="11:14" pos:end="11:18">const</specifier></type> <name pos:start="11:20" pos:end="11:20">p</name> <init pos:start="11:22" pos:end="11:52">= <expr pos:start="11:24" pos:end="11:52"><name pos:start="11:24" pos:end="11:52"><name pos:start="11:24" pos:end="11:24">s</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:32">frames</name><index pos:start="11:33" pos:end="11:52">[<expr pos:start="11:34" pos:end="11:51"><name pos:start="11:34" pos:end="11:51">VP56_FRAME_CURRENT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:26">remaining_buf_size</name> <init pos:start="13:28" pos:end="13:40">= <expr pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:34">avpkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">av_uninit</name><argument_list pos:start="15:18" pos:end="15:31">(<argument pos:start="15:19" pos:end="15:30"><expr pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:30">alpha_offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">res</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="35:5"><if pos:start="21:5" pos:end="35:5">if <condition pos:start="21:8" pos:end="21:21">(<expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">has_alpha</name></name></expr>)</condition> <block pos:start="21:23" pos:end="35:5">{<block_content pos:start="23:9" pos:end="33:22">

        <if_stmt pos:start="23:9" pos:end="25:22"><if pos:start="23:9" pos:end="25:22">if <condition pos:start="23:12" pos:end="23:35">(<expr pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:30">remaining_buf_size</name> <operator pos:start="23:32" pos:end="23:32">&lt;</operator> <literal type="number" pos:start="23:34" pos:end="23:34">3</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:22"><block_content pos:start="25:13" pos:end="25:22">

            <return pos:start="25:13" pos:end="25:22">return <expr pos:start="25:20" pos:end="25:21"><operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:20">alpha_offset</name> <operator pos:start="27:22" pos:end="27:22">=</operator> <call pos:start="27:24" pos:end="27:48"><name pos:start="27:24" pos:end="27:42">bytestream_get_be24</name><argument_list pos:start="27:43" pos:end="27:48">(<argument pos:start="27:44" pos:end="27:47"><expr pos:start="27:44" pos:end="27:47"><operator pos:start="27:44" pos:end="27:44">&amp;</operator><name pos:start="27:45" pos:end="27:47">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:26">remaining_buf_size</name> <operator pos:start="29:28" pos:end="29:29">-=</operator> <literal type="number" pos:start="29:31" pos:end="29:31">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:22"><if pos:start="31:9" pos:end="33:22">if <condition pos:start="31:12" pos:end="31:46">(<expr pos:start="31:13" pos:end="31:45"><name pos:start="31:13" pos:end="31:30">remaining_buf_size</name> <operator pos:start="31:32" pos:end="31:32">&lt;</operator> <name pos:start="31:34" pos:end="31:45">alpha_offset</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:22"><block_content pos:start="33:13" pos:end="33:22">

            <return pos:start="33:13" pos:end="33:22">return <expr pos:start="33:20" pos:end="33:21"><operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:7">res</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:53"><name pos:start="39:11" pos:end="39:25"><name pos:start="39:11" pos:end="39:11">s</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:25">parse_header</name></name><argument_list pos:start="39:26" pos:end="39:53">(<argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">s</name></expr></argument>, <argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">buf</name></expr></argument>, <argument pos:start="39:35" pos:end="39:52"><expr pos:start="39:35" pos:end="39:52"><name pos:start="39:35" pos:end="39:52">remaining_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:19"><if pos:start="41:5" pos:end="43:19">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">res</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:19"><block_content pos:start="43:9" pos:end="43:19">

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">res</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="59:5">if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:11">res</name> <operator pos:start="47:13" pos:end="47:14">==</operator> <name pos:start="47:16" pos:end="47:31">VP56_SIZE_CHANGE</name></expr>)</condition> <block pos:start="47:34" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <for pos:start="49:9" pos:end="57:9">for <control pos:start="49:13" pos:end="49:31">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:26"><expr pos:start="49:21" pos:end="49:25"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <literal type="number" pos:start="49:25" pos:end="49:25">4</literal></expr>;</condition> <incr pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:28">i</name><operator pos:start="49:29" pos:end="49:30">++</operator></expr></incr>)</control> <block pos:start="49:33" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:60">

            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:26">av_frame_unref</name><argument_list pos:start="51:27" pos:end="51:40">(<argument pos:start="51:28" pos:end="51:39"><expr pos:start="51:28" pos:end="51:39"><name pos:start="51:28" pos:end="51:39"><name pos:start="51:28" pos:end="51:28">s</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:36">frames</name><index pos:start="51:37" pos:end="51:39">[<expr pos:start="51:38" pos:end="51:38"><name pos:start="51:38" pos:end="51:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:60"><if pos:start="53:13" pos:end="55:60">if <condition pos:start="53:16" pos:end="53:33">(<expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:32">alpha_context</name></name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:60"><block_content pos:start="55:17" pos:end="55:60">

                <expr_stmt pos:start="55:17" pos:end="55:60"><expr pos:start="55:17" pos:end="55:59"><call pos:start="55:17" pos:end="55:59"><name pos:start="55:17" pos:end="55:30">av_frame_unref</name><argument_list pos:start="55:31" pos:end="55:59">(<argument pos:start="55:32" pos:end="55:58"><expr pos:start="55:32" pos:end="55:58"><name pos:start="55:32" pos:end="55:58"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:47">alpha_context</name><operator pos:start="55:48" pos:end="55:49">-&gt;</operator><name pos:start="55:50" pos:end="55:55">frames</name><index pos:start="55:56" pos:end="55:58">[<expr pos:start="55:57" pos:end="55:57"><name pos:start="55:57" pos:end="55:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="65:18"><if pos:start="63:5" pos:end="65:18">if <condition pos:start="63:8" pos:end="63:60">(<expr pos:start="63:9" pos:end="63:59"><call pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:21">ff_get_buffer</name><argument_list pos:start="63:22" pos:end="63:55">(<argument pos:start="63:23" pos:end="63:27"><expr pos:start="63:23" pos:end="63:27"><name pos:start="63:23" pos:end="63:27">avctx</name></expr></argument>, <argument pos:start="63:30" pos:end="63:30"><expr pos:start="63:30" pos:end="63:30"><name pos:start="63:30" pos:end="63:30">p</name></expr></argument>, <argument pos:start="63:33" pos:end="63:54"><expr pos:start="63:33" pos:end="63:54"><name pos:start="63:33" pos:end="63:54">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call> <operator pos:start="63:57" pos:end="63:57">&lt;</operator> <literal type="number" pos:start="63:59" pos:end="63:59">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:18"><block_content pos:start="65:9" pos:end="65:18">

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:21">(<expr pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:20">has_alpha</name></name></expr>)</condition> <block pos:start="69:23" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:70">

        <expr_stmt pos:start="71:9" pos:end="71:69"><expr pos:start="71:9" pos:end="71:68"><call pos:start="71:9" pos:end="71:68"><name pos:start="71:9" pos:end="71:22">av_frame_unref</name><argument_list pos:start="71:23" pos:end="71:68">(<argument pos:start="71:24" pos:end="71:67"><expr pos:start="71:24" pos:end="71:67"><name pos:start="71:24" pos:end="71:67"><name pos:start="71:24" pos:end="71:24">s</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:39">alpha_context</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:47">frames</name><index pos:start="71:48" pos:end="71:67">[<expr pos:start="71:49" pos:end="71:66"><name pos:start="71:49" pos:end="71:66">VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:70"><expr pos:start="73:9" pos:end="73:69"><call pos:start="73:9" pos:end="73:69"><name pos:start="73:9" pos:end="73:20">av_frame_ref</name><argument_list pos:start="73:21" pos:end="73:69">(<argument pos:start="73:22" pos:end="73:65"><expr pos:start="73:22" pos:end="73:65"><name pos:start="73:22" pos:end="73:65"><name pos:start="73:22" pos:end="73:22">s</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:37">alpha_context</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:45">frames</name><index pos:start="73:46" pos:end="73:65">[<expr pos:start="73:47" pos:end="73:64"><name pos:start="73:47" pos:end="73:64">VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>, <argument pos:start="73:68" pos:end="73:68"><expr pos:start="73:68" pos:end="73:68"><name pos:start="73:68" pos:end="73:68">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="89:5"><if pos:start="79:5" pos:end="89:5">if <condition pos:start="79:8" pos:end="79:32">(<expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:11">res</name> <operator pos:start="79:13" pos:end="79:14">==</operator> <name pos:start="79:16" pos:end="79:31">VP56_SIZE_CHANGE</name></expr>)</condition> <block pos:start="79:34" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:9">

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:33">(<expr pos:start="81:13" pos:end="81:32"><call pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:29">vp56_size_changed</name><argument_list pos:start="81:30" pos:end="81:32">(<argument pos:start="81:31" pos:end="81:31"><expr pos:start="81:31" pos:end="81:31"><name pos:start="81:31" pos:end="81:31">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:35" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:22">

            <expr_stmt pos:start="83:13" pos:end="83:30"><expr pos:start="83:13" pos:end="83:29"><call pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:26">av_frame_unref</name><argument_list pos:start="83:27" pos:end="83:29">(<argument pos:start="83:28" pos:end="83:28"><expr pos:start="83:28" pos:end="83:28"><name pos:start="83:28" pos:end="83:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="133:5"><if pos:start="93:5" pos:end="133:5">if <condition pos:start="93:8" pos:end="93:21">(<expr pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:20">has_alpha</name></name></expr>)</condition> <block pos:start="93:23" pos:end="133:5">{<block_content pos:start="95:9" pos:end="131:9">

        <decl_stmt pos:start="95:9" pos:end="95:33"><decl pos:start="95:9" pos:end="95:32"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:17">bak_w</name> <init pos:start="95:19" pos:end="95:32">= <expr pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:25">avctx</name><operator pos:start="95:26" pos:end="95:27">-&gt;</operator><name pos:start="95:28" pos:end="95:32">width</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:34"><decl pos:start="97:9" pos:end="97:33"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:17">bak_h</name> <init pos:start="97:19" pos:end="97:33">= <expr pos:start="97:21" pos:end="97:33"><name pos:start="97:21" pos:end="97:33"><name pos:start="97:21" pos:end="97:25">avctx</name><operator pos:start="97:26" pos:end="97:27">-&gt;</operator><name pos:start="97:28" pos:end="97:33">height</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:40"><decl pos:start="99:9" pos:end="99:39"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:18">bak_cw</name> <init pos:start="99:20" pos:end="99:39">= <expr pos:start="99:22" pos:end="99:39"><name pos:start="99:22" pos:end="99:39"><name pos:start="99:22" pos:end="99:26">avctx</name><operator pos:start="99:27" pos:end="99:28">-&gt;</operator><name pos:start="99:29" pos:end="99:39">coded_width</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:41"><decl pos:start="101:9" pos:end="101:40"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:18">bak_ch</name> <init pos:start="101:20" pos:end="101:40">= <expr pos:start="101:22" pos:end="101:40"><name pos:start="101:22" pos:end="101:40"><name pos:start="101:22" pos:end="101:26">avctx</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:40">coded_height</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:11">buf</name> <operator pos:start="103:13" pos:end="103:14">+=</operator> <name pos:start="103:16" pos:end="103:27">alpha_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:43"><expr pos:start="105:9" pos:end="105:42"><name pos:start="105:9" pos:end="105:26">remaining_buf_size</name> <operator pos:start="105:28" pos:end="105:29">-=</operator> <name pos:start="105:31" pos:end="105:42">alpha_offset</name></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:88"><expr pos:start="109:9" pos:end="109:87"><name pos:start="109:9" pos:end="109:11">res</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:87"><name pos:start="109:15" pos:end="109:44"><name pos:start="109:15" pos:end="109:15">s</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:30">alpha_context</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:44">parse_header</name></name><argument_list pos:start="109:45" pos:end="109:87">(<argument pos:start="109:46" pos:end="109:61"><expr pos:start="109:46" pos:end="109:61"><name pos:start="109:46" pos:end="109:61"><name pos:start="109:46" pos:end="109:46">s</name><operator pos:start="109:47" pos:end="109:48">-&gt;</operator><name pos:start="109:49" pos:end="109:61">alpha_context</name></name></expr></argument>, <argument pos:start="109:64" pos:end="109:66"><expr pos:start="109:64" pos:end="109:66"><name pos:start="109:64" pos:end="109:66">buf</name></expr></argument>, <argument pos:start="109:69" pos:end="109:86"><expr pos:start="109:69" pos:end="109:86"><name pos:start="109:69" pos:end="109:86">remaining_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="131:9"><if pos:start="111:9" pos:end="131:9">if <condition pos:start="111:12" pos:end="111:21">(<expr pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:15">res</name> <operator pos:start="111:17" pos:end="111:18">!=</operator> <literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>)</condition> <block pos:start="111:23" pos:end="131:9">{<block_content pos:start="113:13" pos:end="129:22">

            <if_stmt pos:start="113:13" pos:end="125:13"><if pos:start="113:13" pos:end="125:13">if<condition pos:start="113:15" pos:end="113:37">(<expr pos:start="113:16" pos:end="113:36"><name pos:start="113:16" pos:end="113:18">res</name><operator pos:start="113:19" pos:end="113:20">==</operator><name pos:start="113:21" pos:end="113:36">VP56_SIZE_CHANGE</name></expr>)</condition> <block pos:start="113:39" pos:end="125:13">{<block_content pos:start="115:17" pos:end="123:45">

                <expr_stmt pos:start="115:17" pos:end="115:71"><expr pos:start="115:17" pos:end="115:70"><call pos:start="115:17" pos:end="115:70"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:70">(<argument pos:start="115:24" pos:end="115:28"><expr pos:start="115:24" pos:end="115:28"><name pos:start="115:24" pos:end="115:28">avctx</name></expr></argument>, <argument pos:start="115:31" pos:end="115:42"><expr pos:start="115:31" pos:end="115:42"><name pos:start="115:31" pos:end="115:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:45" pos:end="115:69"><expr pos:start="115:45" pos:end="115:69"><literal type="string" pos:start="115:45" pos:end="115:69">"Alpha reconfiguration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:38"><expr pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:21">avctx</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:28">width</name></name>  <operator pos:start="117:31" pos:end="117:31">=</operator> <name pos:start="117:33" pos:end="117:37">bak_w</name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:38"><expr pos:start="119:17" pos:end="119:37"><name pos:start="119:17" pos:end="119:29"><name pos:start="119:17" pos:end="119:21">avctx</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:29">height</name></name> <operator pos:start="119:31" pos:end="119:31">=</operator> <name pos:start="119:33" pos:end="119:37">bak_h</name></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:45"><expr pos:start="121:17" pos:end="121:44"><name pos:start="121:17" pos:end="121:34"><name pos:start="121:17" pos:end="121:21">avctx</name><operator pos:start="121:22" pos:end="121:23">-&gt;</operator><name pos:start="121:24" pos:end="121:34">coded_width</name></name>  <operator pos:start="121:37" pos:end="121:37">=</operator> <name pos:start="121:39" pos:end="121:44">bak_cw</name></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:45"><expr pos:start="123:17" pos:end="123:44"><name pos:start="123:17" pos:end="123:35"><name pos:start="123:17" pos:end="123:21">avctx</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:35">coded_height</name></name> <operator pos:start="123:37" pos:end="123:37">=</operator> <name pos:start="123:39" pos:end="123:44">bak_ch</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:30"><expr pos:start="127:13" pos:end="127:29"><call pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:26">av_frame_unref</name><argument_list pos:start="127:27" pos:end="127:29">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="129:13" pos:end="129:22">return <expr pos:start="129:20" pos:end="129:21"><operator pos:start="129:20" pos:end="129:20">-</operator><literal type="number" pos:start="129:21" pos:end="129:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:71"><expr pos:start="137:5" pos:end="137:70"><call pos:start="137:5" pos:end="137:70"><name pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:9">avctx</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:19">execute2</name></name><argument_list pos:start="137:20" pos:end="137:70">(<argument pos:start="137:21" pos:end="137:25"><expr pos:start="137:21" pos:end="137:25"><name pos:start="137:21" pos:end="137:25">avctx</name></expr></argument>, <argument pos:start="137:28" pos:end="137:45"><expr pos:start="137:28" pos:end="137:45"><name pos:start="137:28" pos:end="137:45">ff_vp56_decode_mbs</name></expr></argument>, <argument pos:start="137:48" pos:end="137:48"><expr pos:start="137:48" pos:end="137:48"><literal type="number" pos:start="137:48" pos:end="137:48">0</literal></expr></argument>, <argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>, <argument pos:start="137:54" pos:end="137:69"><expr pos:start="137:54" pos:end="137:69"><name pos:start="137:54" pos:end="137:65"><name pos:start="137:54" pos:end="137:54">s</name><operator pos:start="137:55" pos:end="137:56">-&gt;</operator><name pos:start="137:57" pos:end="137:65">has_alpha</name></name> <operator pos:start="137:67" pos:end="137:67">+</operator> <literal type="number" pos:start="137:69" pos:end="137:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="141:5" pos:end="143:19"><if pos:start="141:5" pos:end="143:19">if <condition pos:start="141:8" pos:end="141:42">(<expr pos:start="141:9" pos:end="141:41"><operator pos:start="141:9" pos:end="141:9">(</operator><name pos:start="141:10" pos:end="141:12">res</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <call pos:start="141:16" pos:end="141:36"><name pos:start="141:16" pos:end="141:27">av_frame_ref</name><argument_list pos:start="141:28" pos:end="141:36">(<argument pos:start="141:29" pos:end="141:32"><expr pos:start="141:29" pos:end="141:32"><name pos:start="141:29" pos:end="141:32">data</name></expr></argument>, <argument pos:start="141:35" pos:end="141:35"><expr pos:start="141:35" pos:end="141:35"><name pos:start="141:35" pos:end="141:35">p</name></expr></argument>)</argument_list></call><operator pos:start="141:37" pos:end="141:37">)</operator> <operator pos:start="141:39" pos:end="141:39">&lt;</operator> <literal type="number" pos:start="141:41" pos:end="141:41">0</literal></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:19"><block_content pos:start="143:9" pos:end="143:19">

        <return pos:start="143:9" pos:end="143:19">return <expr pos:start="143:16" pos:end="143:18"><name pos:start="143:16" pos:end="143:18">res</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:19"><expr pos:start="145:5" pos:end="145:18"><operator pos:start="145:5" pos:end="145:5">*</operator><name pos:start="145:6" pos:end="145:14">got_frame</name> <operator pos:start="145:16" pos:end="145:16">=</operator> <literal type="number" pos:start="145:18" pos:end="145:18">1</literal></expr>;</expr_stmt>



    <return pos:start="149:5" pos:end="149:23">return <expr pos:start="149:12" pos:end="149:22"><name pos:start="149:12" pos:end="149:22"><name pos:start="149:12" pos:end="149:16">avpkt</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
