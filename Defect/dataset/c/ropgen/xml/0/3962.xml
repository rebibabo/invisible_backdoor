<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3962.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">aiff_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="217:1">{<block_content pos:start="5:5" pos:end="215:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">size</name></decl>, <decl pos:start="5:15" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:22">filesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:18">offset</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:20">version</name> <init pos:start="11:22" pos:end="11:38">= <expr pos:start="11:24" pos:end="11:38"><name pos:start="11:24" pos:end="11:38">AIFF_C_VERSION1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">AVIOContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">pb</name> <init pos:start="13:21" pos:end="13:27">= <expr pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">AVStream</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type> <name pos:start="15:16" pos:end="15:17">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">AIFFInputContext</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:26">aiff</name> <init pos:start="17:28" pos:end="17:41">= <expr pos:start="17:30" pos:end="17:41"><name pos:start="17:30" pos:end="17:41"><name pos:start="17:30" pos:end="17:30">s</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:41">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:27">/* check FORM header */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:12">filesize</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:32"><name pos:start="23:16" pos:end="23:22">get_tag</name><argument_list pos:start="23:23" pos:end="23:32">(<argument pos:start="23:24" pos:end="23:25"><expr pos:start="23:24" pos:end="23:25"><name pos:start="23:24" pos:end="23:25">pb</name></expr></argument>, <argument pos:start="23:28" pos:end="23:31"><expr pos:start="23:28" pos:end="23:31"><operator pos:start="23:28" pos:end="23:28">&amp;</operator><name pos:start="23:29" pos:end="23:31">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:35"><if pos:start="25:5" pos:end="27:35">if <condition pos:start="25:8" pos:end="25:57">(<expr pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:16">filesize</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal> <operator pos:start="25:22" pos:end="25:23">||</operator> <name pos:start="25:25" pos:end="25:27">tag</name> <operator pos:start="25:29" pos:end="25:30">!=</operator> <call pos:start="25:32" pos:end="25:56"><name pos:start="25:32" pos:end="25:36">MKTAG</name><argument_list pos:start="25:37" pos:end="25:56">(<argument pos:start="25:38" pos:end="25:40"><expr pos:start="25:38" pos:end="25:40"><literal type="char" pos:start="25:38" pos:end="25:40">'F'</literal></expr></argument>, <argument pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><literal type="char" pos:start="25:43" pos:end="25:45">'O'</literal></expr></argument>, <argument pos:start="25:48" pos:end="25:50"><expr pos:start="25:48" pos:end="25:50"><literal type="char" pos:start="25:48" pos:end="25:50">'R'</literal></expr></argument>, <argument pos:start="25:53" pos:end="25:55"><expr pos:start="25:53" pos:end="25:55"><literal type="char" pos:start="25:53" pos:end="25:55">'M'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:35"><block_content pos:start="27:9" pos:end="27:35">

        <return pos:start="27:9" pos:end="27:35">return <expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:24">/* AIFF data type */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:7">tag</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:23"><name pos:start="33:11" pos:end="33:19">avio_rl32</name><argument_list pos:start="33:20" pos:end="33:23">(<argument pos:start="33:21" pos:end="33:22"><expr pos:start="33:21" pos:end="33:22"><name pos:start="33:21" pos:end="33:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:35"><if pos:start="35:5" pos:end="37:23">if <condition pos:start="35:8" pos:end="35:41">(<expr pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:11">tag</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <call pos:start="35:16" pos:end="35:40"><name pos:start="35:16" pos:end="35:20">MKTAG</name><argument_list pos:start="35:21" pos:end="35:40">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><literal type="char" pos:start="35:22" pos:end="35:24">'A'</literal></expr></argument>, <argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><literal type="char" pos:start="35:27" pos:end="35:29">'I'</literal></expr></argument>, <argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><literal type="char" pos:start="35:32" pos:end="35:34">'F'</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><literal type="char" pos:start="35:37" pos:end="35:39">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:23"><block_content pos:start="37:9" pos:end="37:23">       <comment type="block" pos:start="35:49" pos:end="35:70">/* Got an AIFF file */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:15">version</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:22">AIFF</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="39:5" pos:end="41:35">else if <condition pos:start="39:13" pos:end="39:46">(<expr pos:start="39:14" pos:end="39:45"><name pos:start="39:14" pos:end="39:16">tag</name> <operator pos:start="39:18" pos:end="39:19">!=</operator> <call pos:start="39:21" pos:end="39:45"><name pos:start="39:21" pos:end="39:25">MKTAG</name><argument_list pos:start="39:26" pos:end="39:45">(<argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><literal type="char" pos:start="39:27" pos:end="39:29">'A'</literal></expr></argument>, <argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><literal type="char" pos:start="39:32" pos:end="39:34">'I'</literal></expr></argument>, <argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><literal type="char" pos:start="39:37" pos:end="39:39">'F'</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:44"><expr pos:start="39:42" pos:end="39:44"><literal type="char" pos:start="39:42" pos:end="39:44">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:35"><block_content pos:start="41:9" pos:end="41:35">  <comment type="block" pos:start="39:49" pos:end="39:73">/* An AIFF-C file then */</comment>

        <return pos:start="41:9" pos:end="41:35">return <expr pos:start="41:16" pos:end="41:34"><name pos:start="41:16" pos:end="41:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:18"><expr pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:12">filesize</name> <operator pos:start="45:14" pos:end="45:15">-=</operator> <literal type="number" pos:start="45:17" pos:end="45:17">4</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:6">st</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="49:37"><name pos:start="49:10" pos:end="49:28">avformat_new_stream</name><argument_list pos:start="49:29" pos:end="49:37">(<argument pos:start="49:30" pos:end="49:30"><expr pos:start="49:30" pos:end="49:30"><name pos:start="49:30" pos:end="49:30">s</name></expr></argument>, <argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="53:31"><if pos:start="51:5" pos:end="53:31">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:11">st</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:31"><block_content pos:start="53:9" pos:end="53:31">

        <return pos:start="53:9" pos:end="53:31">return <expr pos:start="53:16" pos:end="53:30"><call pos:start="53:16" pos:end="53:30"><name pos:start="53:16" pos:end="53:22">AVERROR</name><argument_list pos:start="53:23" pos:end="53:30">(<argument pos:start="53:24" pos:end="53:29"><expr pos:start="53:24" pos:end="53:29"><name pos:start="53:24" pos:end="53:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="57:5" pos:end="183:5">while <condition pos:start="57:11" pos:end="57:24">(<expr pos:start="57:12" pos:end="57:23"><name pos:start="57:12" pos:end="57:19">filesize</name> <operator pos:start="57:21" pos:end="57:21">&gt;</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition> <block pos:start="57:26" pos:end="183:5">{<block_content pos:start="61:9" pos:end="181:9">

        <comment type="block" pos:start="59:9" pos:end="59:36">/* parse different chunks */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:12">size</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:32"><name pos:start="61:16" pos:end="61:22">get_tag</name><argument_list pos:start="61:23" pos:end="61:32">(<argument pos:start="61:24" pos:end="61:25"><expr pos:start="61:24" pos:end="61:25"><name pos:start="61:24" pos:end="61:25">pb</name></expr></argument>, <argument pos:start="61:28" pos:end="61:31"><expr pos:start="61:28" pos:end="61:31"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:31">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:24"><if pos:start="63:9" pos:end="65:24">if <condition pos:start="63:12" pos:end="63:21">(<expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:16">size</name> <operator pos:start="63:18" pos:end="63:18">&lt;</operator> <literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:24"><block_content pos:start="65:13" pos:end="65:24">

            <return pos:start="65:13" pos:end="65:24">return <expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">size</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:29"><expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:16">filesize</name> <operator pos:start="69:18" pos:end="69:19">-=</operator> <name pos:start="69:21" pos:end="69:24">size</name> <operator pos:start="69:26" pos:end="69:26">+</operator> <literal type="number" pos:start="69:28" pos:end="69:28">8</literal></expr>;</expr_stmt>



        <switch pos:start="73:9" pos:end="169:9">switch <condition pos:start="73:16" pos:end="73:20">(<expr pos:start="73:17" pos:end="73:19"><name pos:start="73:17" pos:end="73:19">tag</name></expr>)</condition> <block pos:start="73:22" pos:end="169:9">{<block_content pos:start="75:9" pos:end="167:32">

        <case pos:start="75:9" pos:end="75:39">case <expr pos:start="75:14" pos:end="75:38"><call pos:start="75:14" pos:end="75:38"><name pos:start="75:14" pos:end="75:18">MKTAG</name><argument_list pos:start="75:19" pos:end="75:38">(<argument pos:start="75:20" pos:end="75:22"><expr pos:start="75:20" pos:end="75:22"><literal type="char" pos:start="75:20" pos:end="75:22">'C'</literal></expr></argument>, <argument pos:start="75:25" pos:end="75:27"><expr pos:start="75:25" pos:end="75:27"><literal type="char" pos:start="75:25" pos:end="75:27">'O'</literal></expr></argument>, <argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><literal type="char" pos:start="75:30" pos:end="75:32">'M'</literal></expr></argument>, <argument pos:start="75:35" pos:end="75:37"><expr pos:start="75:35" pos:end="75:37"><literal type="char" pos:start="75:35" pos:end="75:37">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="75:45" pos:end="75:62">/* Common chunk */</comment>

            <comment type="block" pos:start="77:13" pos:end="77:51">/* Then for the complete header info */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:62"><expr pos:start="79:13" pos:end="79:61"><name pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:14">st</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:25">nb_frames</name></name> <operator pos:start="79:27" pos:end="79:27">=</operator> <call pos:start="79:29" pos:end="79:61"><name pos:start="79:29" pos:end="79:43">get_aiff_header</name><argument_list pos:start="79:44" pos:end="79:61">(<argument pos:start="79:45" pos:end="79:45"><expr pos:start="79:45" pos:end="79:45"><name pos:start="79:45" pos:end="79:45">s</name></expr></argument>, <argument pos:start="79:48" pos:end="79:51"><expr pos:start="79:48" pos:end="79:51"><name pos:start="79:48" pos:end="79:51">size</name></expr></argument>, <argument pos:start="79:54" pos:end="79:60"><expr pos:start="79:54" pos:end="79:60"><name pos:start="79:54" pos:end="79:60">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="83:37"><if pos:start="81:13" pos:end="83:37">if <condition pos:start="81:16" pos:end="81:34">(<expr pos:start="81:17" pos:end="81:33"><name pos:start="81:17" pos:end="81:29"><name pos:start="81:17" pos:end="81:18">st</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:29">nb_frames</name></name> <operator pos:start="81:31" pos:end="81:31">&lt;</operator> <literal type="number" pos:start="81:33" pos:end="81:33">0</literal></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:37"><block_content pos:start="83:17" pos:end="83:37">

                <return pos:start="83:17" pos:end="83:37">return <expr pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:25">st</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:36">nb_frames</name></name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="85:13" pos:end="87:31"><if pos:start="85:13" pos:end="87:31">if <condition pos:start="85:16" pos:end="85:27">(<expr pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:22">offset</name> <operator pos:start="85:24" pos:end="85:24">&gt;</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:31"><block_content pos:start="87:17" pos:end="87:31"> <comment type="line" pos:start="85:29" pos:end="85:49">// COMM is after SSND</comment>

                <goto pos:start="87:17" pos:end="87:31">goto <name pos:start="87:22" pos:end="87:30">got_sound</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:39">case <expr pos:start="91:14" pos:end="91:38"><call pos:start="91:14" pos:end="91:38"><name pos:start="91:14" pos:end="91:18">MKTAG</name><argument_list pos:start="91:19" pos:end="91:38">(<argument pos:start="91:20" pos:end="91:22"><expr pos:start="91:20" pos:end="91:22"><literal type="char" pos:start="91:20" pos:end="91:22">'F'</literal></expr></argument>, <argument pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><literal type="char" pos:start="91:25" pos:end="91:27">'V'</literal></expr></argument>, <argument pos:start="91:30" pos:end="91:32"><expr pos:start="91:30" pos:end="91:32"><literal type="char" pos:start="91:30" pos:end="91:32">'E'</literal></expr></argument>, <argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><literal type="char" pos:start="91:35" pos:end="91:37">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="91:45" pos:end="91:63">/* Version chunk */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:19">version</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:35"><name pos:start="93:23" pos:end="93:31">avio_rb32</name><argument_list pos:start="93:32" pos:end="93:35">(<argument pos:start="93:33" pos:end="93:34"><expr pos:start="93:33" pos:end="93:34"><name pos:start="93:33" pos:end="93:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:39">case <expr pos:start="97:14" pos:end="97:38"><call pos:start="97:14" pos:end="97:38"><name pos:start="97:14" pos:end="97:18">MKTAG</name><argument_list pos:start="97:19" pos:end="97:38">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><literal type="char" pos:start="97:20" pos:end="97:22">'N'</literal></expr></argument>, <argument pos:start="97:25" pos:end="97:27"><expr pos:start="97:25" pos:end="97:27"><literal type="char" pos:start="97:25" pos:end="97:27">'A'</literal></expr></argument>, <argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><literal type="char" pos:start="97:30" pos:end="97:32">'M'</literal></expr></argument>, <argument pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><literal type="char" pos:start="97:35" pos:end="97:37">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="97:45" pos:end="97:67">/* Sample name chunk */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:43"><expr pos:start="99:13" pos:end="99:42"><call pos:start="99:13" pos:end="99:42"><name pos:start="99:13" pos:end="99:20">get_meta</name><argument_list pos:start="99:21" pos:end="99:42">(<argument pos:start="99:22" pos:end="99:22"><expr pos:start="99:22" pos:end="99:22"><name pos:start="99:22" pos:end="99:22">s</name></expr></argument>, <argument pos:start="99:25" pos:end="99:31"><expr pos:start="99:25" pos:end="99:31"><literal type="string" pos:start="99:25" pos:end="99:31">"title"</literal></expr></argument>    , <argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:39">case <expr pos:start="103:14" pos:end="103:38"><call pos:start="103:14" pos:end="103:38"><name pos:start="103:14" pos:end="103:18">MKTAG</name><argument_list pos:start="103:19" pos:end="103:38">(<argument pos:start="103:20" pos:end="103:22"><expr pos:start="103:20" pos:end="103:22"><literal type="char" pos:start="103:20" pos:end="103:22">'A'</literal></expr></argument>, <argument pos:start="103:25" pos:end="103:27"><expr pos:start="103:25" pos:end="103:27"><literal type="char" pos:start="103:25" pos:end="103:27">'U'</literal></expr></argument>, <argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><literal type="char" pos:start="103:30" pos:end="103:32">'T'</literal></expr></argument>, <argument pos:start="103:35" pos:end="103:37"><expr pos:start="103:35" pos:end="103:37"><literal type="char" pos:start="103:35" pos:end="103:37">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="103:45" pos:end="103:62">/* Author chunk */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:43"><expr pos:start="105:13" pos:end="105:42"><call pos:start="105:13" pos:end="105:42"><name pos:start="105:13" pos:end="105:20">get_meta</name><argument_list pos:start="105:21" pos:end="105:42">(<argument pos:start="105:22" pos:end="105:22"><expr pos:start="105:22" pos:end="105:22"><name pos:start="105:22" pos:end="105:22">s</name></expr></argument>, <argument pos:start="105:25" pos:end="105:32"><expr pos:start="105:25" pos:end="105:32"><literal type="string" pos:start="105:25" pos:end="105:32">"author"</literal></expr></argument>   , <argument pos:start="105:38" pos:end="105:41"><expr pos:start="105:38" pos:end="105:41"><name pos:start="105:38" pos:end="105:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:39">case <expr pos:start="109:14" pos:end="109:38"><call pos:start="109:14" pos:end="109:38"><name pos:start="109:14" pos:end="109:18">MKTAG</name><argument_list pos:start="109:19" pos:end="109:38">(<argument pos:start="109:20" pos:end="109:22"><expr pos:start="109:20" pos:end="109:22"><literal type="char" pos:start="109:20" pos:end="109:22">'('</literal></expr></argument>, <argument pos:start="109:25" pos:end="109:27"><expr pos:start="109:25" pos:end="109:27"><literal type="char" pos:start="109:25" pos:end="109:27">'c'</literal></expr></argument>, <argument pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><literal type="char" pos:start="109:30" pos:end="109:32">')'</literal></expr></argument>, <argument pos:start="109:35" pos:end="109:37"><expr pos:start="109:35" pos:end="109:37"><literal type="char" pos:start="109:35" pos:end="109:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="109:45" pos:end="109:65">/* Copyright chunk */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><call pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:20">get_meta</name><argument_list pos:start="111:21" pos:end="111:42">(<argument pos:start="111:22" pos:end="111:22"><expr pos:start="111:22" pos:end="111:22"><name pos:start="111:22" pos:end="111:22">s</name></expr></argument>, <argument pos:start="111:25" pos:end="111:35"><expr pos:start="111:25" pos:end="111:35"><literal type="string" pos:start="111:25" pos:end="111:35">"copyright"</literal></expr></argument>, <argument pos:start="111:38" pos:end="111:41"><expr pos:start="111:38" pos:end="111:41"><name pos:start="111:38" pos:end="111:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <case pos:start="115:9" pos:end="115:39">case <expr pos:start="115:14" pos:end="115:38"><call pos:start="115:14" pos:end="115:38"><name pos:start="115:14" pos:end="115:18">MKTAG</name><argument_list pos:start="115:19" pos:end="115:38">(<argument pos:start="115:20" pos:end="115:22"><expr pos:start="115:20" pos:end="115:22"><literal type="char" pos:start="115:20" pos:end="115:22">'A'</literal></expr></argument>, <argument pos:start="115:25" pos:end="115:27"><expr pos:start="115:25" pos:end="115:27"><literal type="char" pos:start="115:25" pos:end="115:27">'N'</literal></expr></argument>, <argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><literal type="char" pos:start="115:30" pos:end="115:32">'N'</literal></expr></argument>, <argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><literal type="char" pos:start="115:35" pos:end="115:37">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="115:45" pos:end="115:66">/* Annotation chunk */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:43"><expr pos:start="117:13" pos:end="117:42"><call pos:start="117:13" pos:end="117:42"><name pos:start="117:13" pos:end="117:20">get_meta</name><argument_list pos:start="117:21" pos:end="117:42">(<argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><name pos:start="117:22" pos:end="117:22">s</name></expr></argument>, <argument pos:start="117:25" pos:end="117:33"><expr pos:start="117:25" pos:end="117:33"><literal type="string" pos:start="117:25" pos:end="117:33">"comment"</literal></expr></argument>  , <argument pos:start="117:38" pos:end="117:41"><expr pos:start="117:38" pos:end="117:41"><name pos:start="117:38" pos:end="117:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:39">case <expr pos:start="121:14" pos:end="121:38"><call pos:start="121:14" pos:end="121:38"><name pos:start="121:14" pos:end="121:18">MKTAG</name><argument_list pos:start="121:19" pos:end="121:38">(<argument pos:start="121:20" pos:end="121:22"><expr pos:start="121:20" pos:end="121:22"><literal type="char" pos:start="121:20" pos:end="121:22">'S'</literal></expr></argument>, <argument pos:start="121:25" pos:end="121:27"><expr pos:start="121:25" pos:end="121:27"><literal type="char" pos:start="121:25" pos:end="121:27">'S'</literal></expr></argument>, <argument pos:start="121:30" pos:end="121:32"><expr pos:start="121:30" pos:end="121:32"><literal type="char" pos:start="121:30" pos:end="121:32">'N'</literal></expr></argument>, <argument pos:start="121:35" pos:end="121:37"><expr pos:start="121:35" pos:end="121:37"><literal type="char" pos:start="121:35" pos:end="121:37">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>     <comment type="block" pos:start="121:45" pos:end="121:69">/* Sampled sound chunk */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:50"><expr pos:start="123:13" pos:end="123:49"><name pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:16">aiff</name><operator pos:start="123:17" pos:end="123:18">-&gt;</operator><name pos:start="123:19" pos:end="123:26">data_end</name></name> <operator pos:start="123:28" pos:end="123:28">=</operator> <call pos:start="123:30" pos:end="123:42"><name pos:start="123:30" pos:end="123:38">avio_tell</name><argument_list pos:start="123:39" pos:end="123:42">(<argument pos:start="123:40" pos:end="123:41"><expr pos:start="123:40" pos:end="123:41"><name pos:start="123:40" pos:end="123:41">pb</name></expr></argument>)</argument_list></call> <operator pos:start="123:44" pos:end="123:44">+</operator> <name pos:start="123:46" pos:end="123:49">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:35"><expr pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:18">offset</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:34"><name pos:start="125:22" pos:end="125:30">avio_rb32</name><argument_list pos:start="125:31" pos:end="125:34">(<argument pos:start="125:32" pos:end="125:33"><expr pos:start="125:32" pos:end="125:33"><name pos:start="125:32" pos:end="125:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="125:42" pos:end="125:67">/* Offset of sound data */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:26"><expr pos:start="127:13" pos:end="127:25"><call pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:21">avio_rb32</name><argument_list pos:start="127:22" pos:end="127:25">(<argument pos:start="127:23" pos:end="127:24"><expr pos:start="127:23" pos:end="127:24"><name pos:start="127:23" pos:end="127:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block" pos:start="127:42" pos:end="127:70">/* BlockSize... don't care */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:36"><expr pos:start="129:13" pos:end="129:35"><name pos:start="129:13" pos:end="129:18">offset</name> <operator pos:start="129:20" pos:end="129:21">+=</operator> <call pos:start="129:23" pos:end="129:35"><name pos:start="129:23" pos:end="129:31">avio_tell</name><argument_list pos:start="129:32" pos:end="129:35">(<argument pos:start="129:33" pos:end="129:34"><expr pos:start="129:33" pos:end="129:34"><name pos:start="129:33" pos:end="129:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="129:41" pos:end="129:74">/* Compute absolute data offset */</comment>

            <if_stmt pos:start="131:13" pos:end="133:31"><if pos:start="131:13" pos:end="133:31">if <condition pos:start="131:16" pos:end="131:42">(<expr pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:18">st</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:28">codecpar</name><operator pos:start="131:29" pos:end="131:30">-&gt;</operator><name pos:start="131:31" pos:end="131:41">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="133:31"><block_content pos:start="133:17" pos:end="133:31">    <comment type="block" pos:start="131:47" pos:end="131:78">/* Assume COMM already parsed */</comment>

                <goto pos:start="133:17" pos:end="133:31">goto <name pos:start="133:22" pos:end="133:30">got_sound</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="135:13" pos:end="141:13"><if pos:start="135:13" pos:end="141:13">if <condition pos:start="135:16" pos:end="135:30">(<expr pos:start="135:17" pos:end="135:29"><operator pos:start="135:17" pos:end="135:17">!</operator><name pos:start="135:18" pos:end="135:29"><name pos:start="135:18" pos:end="135:19">pb</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:29">seekable</name></name></expr>)</condition> <block pos:start="135:32" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:26">

                <expr_stmt pos:start="137:17" pos:end="137:66"><expr pos:start="137:17" pos:end="137:65"><call pos:start="137:17" pos:end="137:65"><name pos:start="137:17" pos:end="137:22">av_log</name><argument_list pos:start="137:23" pos:end="137:65">(<argument pos:start="137:24" pos:end="137:24"><expr pos:start="137:24" pos:end="137:24"><name pos:start="137:24" pos:end="137:24">s</name></expr></argument>, <argument pos:start="137:27" pos:end="137:38"><expr pos:start="137:27" pos:end="137:38"><name pos:start="137:27" pos:end="137:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:41" pos:end="137:64"><expr pos:start="137:41" pos:end="137:64"><literal type="string" pos:start="137:41" pos:end="137:64">"file is not seekable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="139:17" pos:end="139:26">return <expr pos:start="139:24" pos:end="139:25"><operator pos:start="139:24" pos:end="139:24">-</operator><literal type="number" pos:start="139:25" pos:end="139:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:36"><expr pos:start="143:13" pos:end="143:35"><call pos:start="143:13" pos:end="143:35"><name pos:start="143:13" pos:end="143:21">avio_skip</name><argument_list pos:start="143:22" pos:end="143:35">(<argument pos:start="143:23" pos:end="143:24"><expr pos:start="143:23" pos:end="143:24"><name pos:start="143:23" pos:end="143:24">pb</name></expr></argument>, <argument pos:start="143:27" pos:end="143:34"><expr pos:start="143:27" pos:end="143:34"><name pos:start="143:27" pos:end="143:30">size</name> <operator pos:start="143:32" pos:end="143:32">-</operator> <literal type="number" pos:start="143:34" pos:end="143:34">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        <case pos:start="147:9" pos:end="147:39">case <expr pos:start="147:14" pos:end="147:38"><call pos:start="147:14" pos:end="147:38"><name pos:start="147:14" pos:end="147:18">MKTAG</name><argument_list pos:start="147:19" pos:end="147:38">(<argument pos:start="147:20" pos:end="147:22"><expr pos:start="147:20" pos:end="147:22"><literal type="char" pos:start="147:20" pos:end="147:22">'w'</literal></expr></argument>, <argument pos:start="147:25" pos:end="147:27"><expr pos:start="147:25" pos:end="147:27"><literal type="char" pos:start="147:25" pos:end="147:27">'a'</literal></expr></argument>, <argument pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><literal type="char" pos:start="147:30" pos:end="147:32">'v'</literal></expr></argument>, <argument pos:start="147:35" pos:end="147:37"><expr pos:start="147:35" pos:end="147:37"><literal type="char" pos:start="147:35" pos:end="147:37">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="149:13" pos:end="151:26"><if pos:start="149:13" pos:end="151:26">if <condition pos:start="149:16" pos:end="149:41">(<expr pos:start="149:17" pos:end="149:40"><operator pos:start="149:17" pos:end="149:17">(</operator><name pos:start="149:18" pos:end="149:25">uint64_t</name><operator pos:start="149:26" pos:end="149:26">)</operator><name pos:start="149:27" pos:end="149:30">size</name> <operator pos:start="149:32" pos:end="149:32">&gt;</operator> <operator pos:start="149:34" pos:end="149:34">(</operator><literal type="number" pos:start="149:35" pos:end="149:35">1</literal><operator pos:start="149:36" pos:end="149:37">&lt;&lt;</operator><literal type="number" pos:start="149:38" pos:end="149:39">30</literal><operator pos:start="149:40" pos:end="149:40">)</operator></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:26"><block_content pos:start="151:17" pos:end="151:26">

                <return pos:start="151:17" pos:end="151:26">return <expr pos:start="151:24" pos:end="151:25"><operator pos:start="151:24" pos:end="151:24">-</operator><literal type="number" pos:start="151:25" pos:end="151:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:86"><expr pos:start="153:13" pos:end="153:85"><name pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:14">st</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:24">codecpar</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:35">extradata</name></name> <operator pos:start="153:37" pos:end="153:37">=</operator> <call pos:start="153:39" pos:end="153:85"><name pos:start="153:39" pos:end="153:48">av_mallocz</name><argument_list pos:start="153:49" pos:end="153:85">(<argument pos:start="153:50" pos:end="153:84"><expr pos:start="153:50" pos:end="153:84"><name pos:start="153:50" pos:end="153:53">size</name> <operator pos:start="153:55" pos:end="153:55">+</operator> <name pos:start="153:57" pos:end="153:84">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="157:39"><if pos:start="155:13" pos:end="157:39">if <condition pos:start="155:16" pos:end="155:41">(<expr pos:start="155:17" pos:end="155:40"><operator pos:start="155:17" pos:end="155:17">!</operator><name pos:start="155:18" pos:end="155:40"><name pos:start="155:18" pos:end="155:19">st</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:29">codecpar</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:40">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:39"><block_content pos:start="157:17" pos:end="157:39">

                <return pos:start="157:17" pos:end="157:39">return <expr pos:start="157:24" pos:end="157:38"><call pos:start="157:24" pos:end="157:38"><name pos:start="157:24" pos:end="157:30">AVERROR</name><argument_list pos:start="157:31" pos:end="157:38">(<argument pos:start="157:32" pos:end="157:37"><expr pos:start="157:32" pos:end="157:37"><name pos:start="157:32" pos:end="157:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:48"><expr pos:start="159:13" pos:end="159:47"><name pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:14">st</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:24">codecpar</name><operator pos:start="159:25" pos:end="159:26">-&gt;</operator><name pos:start="159:27" pos:end="159:40">extradata_size</name></name> <operator pos:start="159:42" pos:end="159:42">=</operator> <name pos:start="159:44" pos:end="159:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:57"><expr pos:start="161:13" pos:end="161:56"><call pos:start="161:13" pos:end="161:56"><name pos:start="161:13" pos:end="161:21">avio_read</name><argument_list pos:start="161:22" pos:end="161:56">(<argument pos:start="161:23" pos:end="161:24"><expr pos:start="161:23" pos:end="161:24"><name pos:start="161:23" pos:end="161:24">pb</name></expr></argument>, <argument pos:start="161:27" pos:end="161:49"><expr pos:start="161:27" pos:end="161:49"><name pos:start="161:27" pos:end="161:49"><name pos:start="161:27" pos:end="161:28">st</name><operator pos:start="161:29" pos:end="161:30">-&gt;</operator><name pos:start="161:31" pos:end="161:38">codecpar</name><operator pos:start="161:39" pos:end="161:40">-&gt;</operator><name pos:start="161:41" pos:end="161:49">extradata</name></name></expr></argument>, <argument pos:start="161:52" pos:end="161:55"><expr pos:start="161:52" pos:end="161:55"><name pos:start="161:52" pos:end="161:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <default pos:start="165:9" pos:end="165:16">default:</default> <comment type="block" pos:start="165:18" pos:end="165:27">/* Jump */</comment>

            <expr_stmt pos:start="167:13" pos:end="167:32"><expr pos:start="167:13" pos:end="167:31"><call pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:21">avio_skip</name><argument_list pos:start="167:22" pos:end="167:31">(<argument pos:start="167:23" pos:end="167:24"><expr pos:start="167:23" pos:end="167:24"><name pos:start="167:23" pos:end="167:24">pb</name></expr></argument>, <argument pos:start="167:27" pos:end="167:30"><expr pos:start="167:27" pos:end="167:30"><name pos:start="167:27" pos:end="167:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <comment type="block" pos:start="173:9" pos:end="173:62">/* Skip required padding byte for odd-sized chunks. */</comment>

        <if_stmt pos:start="175:9" pos:end="181:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:21">(<expr pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:16">size</name> <operator pos:start="175:18" pos:end="175:18">&amp;</operator> <literal type="number" pos:start="175:20" pos:end="175:20">1</literal></expr>)</condition> <block pos:start="175:23" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:29">

            <expr_stmt pos:start="177:13" pos:end="177:23"><expr pos:start="177:13" pos:end="177:22"><name pos:start="177:13" pos:end="177:20">filesize</name><operator pos:start="177:21" pos:end="177:22">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:29"><expr pos:start="179:13" pos:end="179:28"><call pos:start="179:13" pos:end="179:28"><name pos:start="179:13" pos:end="179:21">avio_skip</name><argument_list pos:start="179:22" pos:end="179:28">(<argument pos:start="179:23" pos:end="179:24"><expr pos:start="179:23" pos:end="179:24"><name pos:start="179:23" pos:end="179:24">pb</name></expr></argument>, <argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><literal type="number" pos:start="179:27" pos:end="179:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



<label pos:start="187:1" pos:end="187:10"><name pos:start="187:1" pos:end="187:9">got_sound</name>:</label>

    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:35">(<expr pos:start="189:9" pos:end="189:34"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:34"><name pos:start="189:10" pos:end="189:11">st</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:21">codecpar</name><operator pos:start="189:22" pos:end="189:23">-&gt;</operator><name pos:start="189:24" pos:end="189:34">block_align</name></name></expr>)</condition> <block pos:start="189:37" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:18">

        <expr_stmt pos:start="191:9" pos:end="191:90"><expr pos:start="191:9" pos:end="191:89"><call pos:start="191:9" pos:end="191:89"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:89">(<argument pos:start="191:16" pos:end="191:16"><expr pos:start="191:16" pos:end="191:16"><name pos:start="191:16" pos:end="191:16">s</name></expr></argument>, <argument pos:start="191:19" pos:end="191:30"><expr pos:start="191:19" pos:end="191:30"><name pos:start="191:19" pos:end="191:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:33" pos:end="191:88"><expr pos:start="191:33" pos:end="191:88"><literal type="string" pos:start="191:33" pos:end="191:88">"could not find COMM tag or invalid block_align value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="193:9" pos:end="193:18">return <expr pos:start="193:16" pos:end="193:17"><operator pos:start="193:16" pos:end="193:16">-</operator><literal type="number" pos:start="193:17" pos:end="193:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:58">/* Now positioned, get the sound data start and end */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:62"><expr pos:start="201:5" pos:end="201:61"><call pos:start="201:5" pos:end="201:61"><name pos:start="201:5" pos:end="201:23">avpriv_set_pts_info</name><argument_list pos:start="201:24" pos:end="201:61">(<argument pos:start="201:25" pos:end="201:26"><expr pos:start="201:25" pos:end="201:26"><name pos:start="201:25" pos:end="201:26">st</name></expr></argument>, <argument pos:start="201:29" pos:end="201:30"><expr pos:start="201:29" pos:end="201:30"><literal type="number" pos:start="201:29" pos:end="201:30">64</literal></expr></argument>, <argument pos:start="201:33" pos:end="201:33"><expr pos:start="201:33" pos:end="201:33"><literal type="number" pos:start="201:33" pos:end="201:33">1</literal></expr></argument>, <argument pos:start="201:36" pos:end="201:60"><expr pos:start="201:36" pos:end="201:60"><name pos:start="201:36" pos:end="201:60"><name pos:start="201:36" pos:end="201:37">st</name><operator pos:start="201:38" pos:end="201:39">-&gt;</operator><name pos:start="201:40" pos:end="201:47">codecpar</name><operator pos:start="201:48" pos:end="201:49">-&gt;</operator><name pos:start="201:50" pos:end="201:60">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:23"><expr pos:start="203:5" pos:end="203:22"><name pos:start="203:5" pos:end="203:18"><name pos:start="203:5" pos:end="203:6">st</name><operator pos:start="203:7" pos:end="203:8">-&gt;</operator><name pos:start="203:9" pos:end="203:18">start_time</name></name> <operator pos:start="203:20" pos:end="203:20">=</operator> <literal type="number" pos:start="203:22" pos:end="203:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:56"><expr pos:start="205:5" pos:end="205:55"><name pos:start="205:5" pos:end="205:16"><name pos:start="205:5" pos:end="205:6">st</name><operator pos:start="205:7" pos:end="205:8">-&gt;</operator><name pos:start="205:9" pos:end="205:16">duration</name></name> <operator pos:start="205:18" pos:end="205:18">=</operator> <name pos:start="205:20" pos:end="205:32"><name pos:start="205:20" pos:end="205:21">st</name><operator pos:start="205:22" pos:end="205:23">-&gt;</operator><name pos:start="205:24" pos:end="205:32">nb_frames</name></name> <operator pos:start="205:34" pos:end="205:34">*</operator> <name pos:start="205:36" pos:end="205:55"><name pos:start="205:36" pos:end="205:39">aiff</name><operator pos:start="205:40" pos:end="205:41">-&gt;</operator><name pos:start="205:42" pos:end="205:55">block_duration</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:48">/* Position the stream at the first block */</comment>

    <expr_stmt pos:start="211:5" pos:end="211:36"><expr pos:start="211:5" pos:end="211:35"><call pos:start="211:5" pos:end="211:35"><name pos:start="211:5" pos:end="211:13">avio_seek</name><argument_list pos:start="211:14" pos:end="211:35">(<argument pos:start="211:15" pos:end="211:16"><expr pos:start="211:15" pos:end="211:16"><name pos:start="211:15" pos:end="211:16">pb</name></expr></argument>, <argument pos:start="211:19" pos:end="211:24"><expr pos:start="211:19" pos:end="211:24"><name pos:start="211:19" pos:end="211:24">offset</name></expr></argument>, <argument pos:start="211:27" pos:end="211:34"><expr pos:start="211:27" pos:end="211:34"><name pos:start="211:27" pos:end="211:34">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="215:5" pos:end="215:13">return <expr pos:start="215:12" pos:end="215:12"><literal type="number" pos:start="215:12" pos:end="215:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
