<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/94.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mp_decode_frame</name><parameter_list pos:start="1:27" pos:end="3:42">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:43">MPADecodeContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, 

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:32">short</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:41">samples</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:59">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:20">nb_frames</name></decl>, <decl pos:start="7:23" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:24">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">short</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:22">samples_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="15:57"><expr pos:start="13:5" pos:end="15:56"><call pos:start="13:5" pos:end="15:56"><name pos:start="13:5" pos:end="13:17">init_get_bits</name><argument_list pos:start="13:18" pos:end="15:56">(<argument pos:start="13:19" pos:end="13:24"><expr pos:start="13:19" pos:end="13:24"><operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:20">s</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:24">gb</name></name></expr></argument>, <argument pos:start="13:27" pos:end="13:48"><expr pos:start="13:27" pos:end="13:48"><name pos:start="13:27" pos:end="13:34"><name pos:start="13:27" pos:end="13:27">s</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:34">inbuf</name></name> <operator pos:start="13:36" pos:end="13:36">+</operator> <name pos:start="13:38" pos:end="13:48">HEADER_SIZE</name></expr></argument>, 

                  <argument pos:start="15:19" pos:end="15:55"><expr pos:start="15:19" pos:end="15:55"><name pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:19">s</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:30">inbuf_ptr</name></name> <operator pos:start="15:32" pos:end="15:32">-</operator> <name pos:start="15:34" pos:end="15:41"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:41">inbuf</name></name> <operator pos:start="15:43" pos:end="15:43">-</operator> <name pos:start="15:45" pos:end="15:55">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="19:5" pos:end="19:37">/* skip error protection field */</comment>

    <if_stmt pos:start="21:5" pos:end="23:29"><if pos:start="21:5" pos:end="23:29">if <condition pos:start="21:8" pos:end="21:28">(<expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:27">error_protection</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:29"><block_content pos:start="23:9" pos:end="23:29">

        <expr_stmt pos:start="23:9" pos:end="23:29"><expr pos:start="23:9" pos:end="23:28"><call pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:16">get_bits</name><argument_list pos:start="23:17" pos:end="23:28">(<argument pos:start="23:18" pos:end="23:23"><expr pos:start="23:18" pos:end="23:23"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:23"><name pos:start="23:19" pos:end="23:19">s</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:23">gb</name></name></expr></argument>, <argument pos:start="23:26" pos:end="23:27"><expr pos:start="23:26" pos:end="23:27"><literal type="number" pos:start="23:26" pos:end="23:27">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><call pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:11">dprintf</name><argument_list pos:start="27:12" pos:end="27:42">(<argument pos:start="27:13" pos:end="27:25"><expr pos:start="27:13" pos:end="27:25"><literal type="string" pos:start="27:13" pos:end="27:25">"frame %d:\n"</literal></expr></argument>, <argument pos:start="27:28" pos:end="27:41"><expr pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:41">frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="54:0">switch<condition pos:start="29:11" pos:end="29:20">(<expr pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:12">s</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:19">layer</name></name></expr>)</condition> <block pos:start="29:22" pos:end="54:0">{<block_content pos:start="31:5" pos:end="49:14">

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">1</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:17">nb_frames</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="33:39"><name pos:start="33:21" pos:end="33:36">mp_decode_layer1</name><argument_list pos:start="33:37" pos:end="33:39">(<argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><name pos:start="33:38" pos:end="33:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:11">case <expr pos:start="37:10" pos:end="37:10"><literal type="number" pos:start="37:10" pos:end="37:10">2</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:40"><expr pos:start="39:9" pos:end="39:39"><name pos:start="39:9" pos:end="39:17">nb_frames</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:39"><name pos:start="39:21" pos:end="39:36">mp_decode_layer2</name><argument_list pos:start="39:37" pos:end="39:39">(<argument pos:start="39:38" pos:end="39:38"><expr pos:start="39:38" pos:end="39:38"><name pos:start="39:38" pos:end="39:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">3</literal></expr>:</case>

    <default pos:start="45:5" pos:end="45:12">default:</default>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:17">nb_frames</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:39"><name pos:start="47:21" pos:end="47:36">mp_decode_layer3</name><argument_list pos:start="47:37" pos:end="47:39">(<argument pos:start="47:38" pos:end="47:38"><expr pos:start="47:38" pos:end="47:38"><name pos:start="47:38" pos:end="47:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    </block_content>}</block></switch>

<cpp:if pos:start="53:1" pos:end="53:18">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:18"><call pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:11">defined</name><argument_list pos:start="53:12" pos:end="53:18">(<argument pos:start="53:13" pos:end="53:17"><expr pos:start="53:13" pos:end="53:17"><name pos:start="53:13" pos:end="53:17">DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <for pos:start="55:5" pos:end="74:0">for<control pos:start="55:8" pos:end="55:28">(<init pos:start="55:9" pos:end="55:12"><expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:9">i</name><operator pos:start="55:10" pos:end="55:10">=</operator><literal type="number" pos:start="55:11" pos:end="55:11">0</literal></expr>;</init><condition pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:13">i</name><operator pos:start="55:14" pos:end="55:14">&lt;</operator><name pos:start="55:15" pos:end="55:23">nb_frames</name></expr>;</condition><incr pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:25">i</name><operator pos:start="55:26" pos:end="55:27">++</operator></expr></incr>)</control> <block pos:start="55:30" pos:end="74:0">{<block_content pos:start="57:9" pos:end="69:9">

        <for pos:start="57:9" pos:end="69:9">for<control pos:start="57:12" pos:end="57:40">(<init pos:start="57:13" pos:end="57:17"><expr pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:14">ch</name><operator pos:start="57:15" pos:end="57:15">=</operator><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</init><condition pos:start="57:18" pos:end="57:35"><expr pos:start="57:18" pos:end="57:34"><name pos:start="57:18" pos:end="57:19">ch</name><operator pos:start="57:20" pos:end="57:20">&lt;</operator><name pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:34">nb_channels</name></name></expr>;</condition><incr pos:start="57:36" pos:end="57:39"><expr pos:start="57:36" pos:end="57:39"><name pos:start="57:36" pos:end="57:37">ch</name><operator pos:start="57:38" pos:end="57:39">++</operator></expr></incr>)</control> <block pos:start="57:42" pos:end="69:9">{<block_content pos:start="59:13" pos:end="67:25">

            <decl_stmt pos:start="59:13" pos:end="59:18"><decl pos:start="59:13" pos:end="59:17"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:17">j</name></decl>;</decl_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:36"><expr pos:start="61:13" pos:end="61:35"><call pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:18">printf</name><argument_list pos:start="61:19" pos:end="61:35">(<argument pos:start="61:20" pos:end="61:27"><expr pos:start="61:20" pos:end="61:27"><literal type="string" pos:start="61:20" pos:end="61:27">"%d-%d:"</literal></expr></argument>, <argument pos:start="61:30" pos:end="61:30"><expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">i</name></expr></argument>, <argument pos:start="61:33" pos:end="61:34"><expr pos:start="61:33" pos:end="61:34"><name pos:start="61:33" pos:end="61:34">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="63:13" pos:end="65:77">for<control pos:start="63:16" pos:end="63:34">(<init pos:start="63:17" pos:end="63:20"><expr pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:17">j</name><operator pos:start="63:18" pos:end="63:18">=</operator><literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>;</init><condition pos:start="63:21" pos:end="63:30"><expr pos:start="63:21" pos:end="63:29"><name pos:start="63:21" pos:end="63:21">j</name><operator pos:start="63:22" pos:end="63:22">&lt;</operator><name pos:start="63:23" pos:end="63:29">SBLIMIT</name></expr>;</condition><incr pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:31">j</name><operator pos:start="63:32" pos:end="63:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:17" pos:end="65:77"><block_content pos:start="65:17" pos:end="65:77">

                <expr_stmt pos:start="65:17" pos:end="65:77"><expr pos:start="65:17" pos:end="65:76"><call pos:start="65:17" pos:end="65:76"><name pos:start="65:17" pos:end="65:22">printf</name><argument_list pos:start="65:23" pos:end="65:76">(<argument pos:start="65:24" pos:end="65:31"><expr pos:start="65:24" pos:end="65:31"><literal type="string" pos:start="65:24" pos:end="65:31">" %0.6f"</literal></expr></argument>, <argument pos:start="65:34" pos:end="65:75"><expr pos:start="65:34" pos:end="65:75"><operator pos:start="65:34" pos:end="65:34">(</operator><name pos:start="65:35" pos:end="65:40">double</name><operator pos:start="65:41" pos:end="65:41">)</operator><name pos:start="65:42" pos:end="65:64"><name pos:start="65:42" pos:end="65:42">s</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:54">sb_samples</name><index pos:start="65:55" pos:end="65:58">[<expr pos:start="65:56" pos:end="65:57"><name pos:start="65:56" pos:end="65:57">ch</name></expr>]</index><index pos:start="65:59" pos:end="65:61">[<expr pos:start="65:60" pos:end="65:60"><name pos:start="65:60" pos:end="65:60">i</name></expr>]</index><index pos:start="65:62" pos:end="65:64">[<expr pos:start="65:63" pos:end="65:63"><name pos:start="65:63" pos:end="65:63">j</name></expr>]</index></name> <operator pos:start="65:66" pos:end="65:66">/</operator> <name pos:start="65:68" pos:end="65:75">FRAC_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="67:13" pos:end="67:25"><expr pos:start="67:13" pos:end="67:24"><call pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:18">printf</name><argument_list pos:start="67:19" pos:end="67:24">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><literal type="string" pos:start="67:20" pos:end="67:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="75:5" pos:end="75:36">/* apply the synthesis filter */</comment>

    <for pos:start="77:5" pos:end="94:0">for<control pos:start="77:8" pos:end="77:36">(<init pos:start="77:9" pos:end="77:13"><expr pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:10">ch</name><operator pos:start="77:11" pos:end="77:11">=</operator><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</init><condition pos:start="77:14" pos:end="77:31"><expr pos:start="77:14" pos:end="77:30"><name pos:start="77:14" pos:end="77:15">ch</name><operator pos:start="77:16" pos:end="77:16">&lt;</operator><name pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:30">nb_channels</name></name></expr>;</condition><incr pos:start="77:32" pos:end="77:35"><expr pos:start="77:32" pos:end="77:35"><name pos:start="77:32" pos:end="77:33">ch</name><operator pos:start="77:34" pos:end="77:35">++</operator></expr></incr>)</control> <block pos:start="77:38" pos:end="94:0">{<block_content pos:start="79:9" pos:end="89:9">

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:19">samples_ptr</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:29">samples</name> <operator pos:start="79:31" pos:end="79:31">+</operator> <name pos:start="79:33" pos:end="79:34">ch</name></expr>;</expr_stmt>

        <for pos:start="81:9" pos:end="89:9">for<control pos:start="81:12" pos:end="81:32">(<init pos:start="81:13" pos:end="81:16"><expr pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:13">i</name><operator pos:start="81:14" pos:end="81:14">=</operator><literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>;</init><condition pos:start="81:17" pos:end="81:28"><expr pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:17">i</name><operator pos:start="81:18" pos:end="81:18">&lt;</operator><name pos:start="81:19" pos:end="81:27">nb_frames</name></expr>;</condition><incr pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:29">i</name><operator pos:start="81:30" pos:end="81:31">++</operator></expr></incr>)</control> <block pos:start="81:34" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:47">

            <expr_stmt pos:start="83:13" pos:end="85:47"><expr pos:start="83:13" pos:end="85:46"><call pos:start="83:13" pos:end="85:46"><name pos:start="83:13" pos:end="83:24">synth_filter</name><argument_list pos:start="83:25" pos:end="85:46">(<argument pos:start="83:26" pos:end="83:26"><expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">s</name></expr></argument>, <argument pos:start="83:29" pos:end="83:30"><expr pos:start="83:29" pos:end="83:30"><name pos:start="83:29" pos:end="83:30">ch</name></expr></argument>, <argument pos:start="83:33" pos:end="83:43"><expr pos:start="83:33" pos:end="83:43"><name pos:start="83:33" pos:end="83:43">samples_ptr</name></expr></argument>, <argument pos:start="83:46" pos:end="83:59"><expr pos:start="83:46" pos:end="83:59"><name pos:start="83:46" pos:end="83:59"><name pos:start="83:46" pos:end="83:46">s</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:59">nb_channels</name></name></expr></argument>,

                         <argument pos:start="85:26" pos:end="85:45"><expr pos:start="85:26" pos:end="85:45"><name pos:start="85:26" pos:end="85:45"><name pos:start="85:26" pos:end="85:26">s</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:38">sb_samples</name><index pos:start="85:39" pos:end="85:42">[<expr pos:start="85:40" pos:end="85:41"><name pos:start="85:40" pos:end="85:41">ch</name></expr>]</index><index pos:start="85:43" pos:end="85:45">[<expr pos:start="85:44" pos:end="85:44"><name pos:start="85:44" pos:end="85:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:47"><expr pos:start="87:13" pos:end="87:46"><name pos:start="87:13" pos:end="87:23">samples_ptr</name> <operator pos:start="87:25" pos:end="87:26">+=</operator> <literal type="number" pos:start="87:28" pos:end="87:29">32</literal> <operator pos:start="87:31" pos:end="87:31">*</operator> <name pos:start="87:33" pos:end="87:46"><name pos:start="87:33" pos:end="87:33">s</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:46">nb_channels</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

<cpp:ifdef pos:start="93:1" pos:end="93:12">#<cpp:directive pos:start="93:2" pos:end="93:6">ifdef</cpp:directive> <name pos:start="93:8" pos:end="93:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="95:5" pos:end="98:0"><expr pos:start="95:5" pos:end="95:20"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:18">frame_count</name></name><operator pos:start="95:19" pos:end="95:20">++</operator></expr>;</expr_stmt>        

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

    <return pos:start="99:5" pos:end="99:59">return <expr pos:start="99:12" pos:end="99:58"><name pos:start="99:12" pos:end="99:20">nb_frames</name> <operator pos:start="99:22" pos:end="99:22">*</operator> <literal type="number" pos:start="99:24" pos:end="99:25">32</literal> <operator pos:start="99:27" pos:end="99:27">*</operator> <sizeof pos:start="99:29" pos:end="99:41">sizeof<argument_list pos:start="99:35" pos:end="99:41">(<argument pos:start="99:36" pos:end="99:40"><expr pos:start="99:36" pos:end="99:40"><name pos:start="99:36" pos:end="99:40">short</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:43" pos:end="99:43">*</operator> <name pos:start="99:45" pos:end="99:58"><name pos:start="99:45" pos:end="99:45">s</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:58">nb_channels</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
