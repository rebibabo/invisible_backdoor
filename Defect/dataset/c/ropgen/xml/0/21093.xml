<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21093.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">CharDriverState</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:35">qemu_chr_open_opts</name><parameter_list pos:start="1:36" pos:end="3:76">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:44">QemuOpts</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">opts</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:75"><function_decl pos:start="3:37" pos:end="3:75"><type pos:start="3:37" pos:end="3:40"><name pos:start="3:37" pos:end="3:40">void</name></type> (<modifier pos:start="3:43" pos:end="3:43">*</modifier><name pos:start="3:44" pos:end="3:47">init</name>)<parameter_list pos:start="3:49" pos:end="3:75">(<parameter pos:start="3:50" pos:end="3:74"><decl pos:start="3:50" pos:end="3:74"><type pos:start="3:50" pos:end="3:74"><name pos:start="3:50" pos:end="3:71"><name pos:start="3:50" pos:end="3:55">struct</name> <name pos:start="3:57" pos:end="3:71">CharDriverState</name></name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:74">s</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:15">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">CharDriverState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><call pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:20">qemu_opts_id</name><argument_list pos:start="13:21" pos:end="13:26">(<argument pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">opts</name></expr></argument>)</argument_list></call> <operator pos:start="13:28" pos:end="13:29">==</operator> <name pos:start="13:31" pos:end="13:34">NULL</name></expr>)</condition> <block pos:start="13:37" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:20">

        <expr_stmt pos:start="15:9" pos:end="15:54"><expr pos:start="15:9" pos:end="15:53"><call pos:start="15:9" pos:end="15:53"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:53">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:52"><expr pos:start="15:25" pos:end="15:52"><literal type="string" pos:start="15:25" pos:end="15:52">"chardev: no id specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="23:5" pos:end="29:5">for <control pos:start="23:9" pos:end="23:51">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:46"><expr pos:start="23:17" pos:end="23:45"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <call pos:start="23:21" pos:end="23:45"><name pos:start="23:21" pos:end="23:30">ARRAY_SIZE</name><argument_list pos:start="23:31" pos:end="23:45">(<argument pos:start="23:32" pos:end="23:44"><expr pos:start="23:32" pos:end="23:44"><name pos:start="23:32" pos:end="23:44">backend_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="23:48" pos:end="23:50"><expr pos:start="23:48" pos:end="23:50"><name pos:start="23:48" pos:end="23:48">i</name><operator pos:start="23:49" pos:end="23:50">++</operator></expr></incr>)</control> <block pos:start="23:53" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if <condition pos:start="25:12" pos:end="25:78">(<expr pos:start="25:13" pos:end="25:77"><call pos:start="25:13" pos:end="25:72"><name pos:start="25:13" pos:end="25:18">strcmp</name><argument_list pos:start="25:19" pos:end="25:72">(<argument pos:start="25:20" pos:end="25:40"><expr pos:start="25:20" pos:end="25:40"><name pos:start="25:20" pos:end="25:35"><name pos:start="25:20" pos:end="25:32">backend_table</name><index pos:start="25:33" pos:end="25:35">[<expr pos:start="25:34" pos:end="25:34"><name pos:start="25:34" pos:end="25:34">i</name></expr>]</index></name><operator pos:start="25:36" pos:end="25:36">.</operator><name pos:start="25:37" pos:end="25:40">name</name></expr></argument>, <argument pos:start="25:43" pos:end="25:71"><expr pos:start="25:43" pos:end="25:71"><call pos:start="25:43" pos:end="25:71"><name pos:start="25:43" pos:end="25:54">qemu_opt_get</name><argument_list pos:start="25:55" pos:end="25:71">(<argument pos:start="25:56" pos:end="25:59"><expr pos:start="25:56" pos:end="25:59"><name pos:start="25:56" pos:end="25:59">opts</name></expr></argument>, <argument pos:start="25:62" pos:end="25:70"><expr pos:start="25:62" pos:end="25:70"><literal type="string" pos:start="25:62" pos:end="25:70">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="25:74" pos:end="25:75">==</operator> <literal type="number" pos:start="25:77" pos:end="25:77">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:9">i</name> <operator pos:start="31:11" pos:end="31:12">==</operator> <call pos:start="31:14" pos:end="31:38"><name pos:start="31:14" pos:end="31:23">ARRAY_SIZE</name><argument_list pos:start="31:24" pos:end="31:38">(<argument pos:start="31:25" pos:end="31:37"><expr pos:start="31:25" pos:end="31:37"><name pos:start="31:25" pos:end="31:37">backend_table</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:41" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:20">

        <expr_stmt pos:start="33:9" pos:end="35:47"><expr pos:start="33:9" pos:end="35:46"><call pos:start="33:9" pos:end="35:46"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="35:46">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:61"><expr pos:start="33:25" pos:end="33:61"><literal type="string" pos:start="33:25" pos:end="33:61">"chardev: backend \"%s\" not found\n"</literal></expr></argument>,

                <argument pos:start="35:17" pos:end="35:45"><expr pos:start="35:17" pos:end="35:45"><call pos:start="35:17" pos:end="35:45"><name pos:start="35:17" pos:end="35:28">qemu_opt_get</name><argument_list pos:start="35:29" pos:end="35:45">(<argument pos:start="35:30" pos:end="35:33"><expr pos:start="35:30" pos:end="35:33"><name pos:start="35:30" pos:end="35:33">opts</name></expr></argument>, <argument pos:start="35:36" pos:end="35:44"><expr pos:start="35:36" pos:end="35:44"><literal type="string" pos:start="35:36" pos:end="35:44">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:7">chr</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <name pos:start="43:11" pos:end="43:26"><name pos:start="43:11" pos:end="43:23">backend_table</name><index pos:start="43:24" pos:end="43:26">[<expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">i</name></expr>]</index></name><operator pos:start="43:27" pos:end="43:27">.</operator><call pos:start="43:28" pos:end="43:37"><name pos:start="43:28" pos:end="43:31">open</name><argument_list pos:start="43:32" pos:end="43:37">(<argument pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:36"><name pos:start="43:33" pos:end="43:36">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:13">(<expr pos:start="45:9" pos:end="45:12"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:12">chr</name></expr>)</condition> <block pos:start="45:15" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:20">

        <expr_stmt pos:start="47:9" pos:end="49:47"><expr pos:start="47:9" pos:end="49:46"><call pos:start="47:9" pos:end="49:46"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="49:46">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:66"><expr pos:start="47:25" pos:end="47:66"><literal type="string" pos:start="47:25" pos:end="47:66">"chardev: opening backend \"%s\" failed\n"</literal></expr></argument>,

                <argument pos:start="49:17" pos:end="49:45"><expr pos:start="49:17" pos:end="49:45"><call pos:start="49:17" pos:end="49:45"><name pos:start="49:17" pos:end="49:28">qemu_opt_get</name><argument_list pos:start="49:29" pos:end="49:45">(<argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">opts</name></expr></argument>, <argument pos:start="49:36" pos:end="49:44"><expr pos:start="49:36" pos:end="49:44"><literal type="string" pos:start="49:36" pos:end="49:44">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:20">return <expr pos:start="51:16" pos:end="51:19"><name pos:start="51:16" pos:end="51:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="59:67"><if pos:start="57:5" pos:end="59:67">if <condition pos:start="57:8" pos:end="57:23">(<expr pos:start="57:9" pos:end="57:22"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:22"><name pos:start="57:10" pos:end="57:12">chr</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:22">filename</name></name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:67"><block_content pos:start="59:9" pos:end="59:67">

        <expr_stmt pos:start="59:9" pos:end="59:67"><expr pos:start="59:9" pos:end="59:66"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">chr</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:21">filename</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:66"><name pos:start="59:25" pos:end="59:35">qemu_strdup</name><argument_list pos:start="59:36" pos:end="59:66">(<argument pos:start="59:37" pos:end="59:65"><expr pos:start="59:37" pos:end="59:65"><call pos:start="59:37" pos:end="59:65"><name pos:start="59:37" pos:end="59:48">qemu_opt_get</name><argument_list pos:start="59:49" pos:end="59:65">(<argument pos:start="59:50" pos:end="59:53"><expr pos:start="59:50" pos:end="59:53"><name pos:start="59:50" pos:end="59:53">opts</name></expr></argument>, <argument pos:start="59:56" pos:end="59:64"><expr pos:start="59:56" pos:end="59:64"><literal type="string" pos:start="59:56" pos:end="59:64">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:21"><expr pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:7">chr</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:13">init</name></name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:20">init</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:44"><expr pos:start="63:5" pos:end="63:43"><call pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:21">TAILQ_INSERT_TAIL</name><argument_list pos:start="63:22" pos:end="63:43">(<argument pos:start="63:23" pos:end="63:31"><expr pos:start="63:23" pos:end="63:31"><operator pos:start="63:23" pos:end="63:23">&amp;</operator><name pos:start="63:24" pos:end="63:31">chardevs</name></expr></argument>, <argument pos:start="63:34" pos:end="63:36"><expr pos:start="63:34" pos:end="63:36"><name pos:start="63:34" pos:end="63:36">chr</name></expr></argument>, <argument pos:start="63:39" pos:end="63:42"><expr pos:start="63:39" pos:end="63:42"><name pos:start="63:39" pos:end="63:42">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="83:5"><if pos:start="67:5" pos:end="83:5">if <condition pos:start="67:8" pos:end="67:42">(<expr pos:start="67:9" pos:end="67:41"><call pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:25">qemu_opt_get_bool</name><argument_list pos:start="67:26" pos:end="67:41">(<argument pos:start="67:27" pos:end="67:30"><expr pos:start="67:27" pos:end="67:30"><name pos:start="67:27" pos:end="67:30">opts</name></expr></argument>, <argument pos:start="67:33" pos:end="67:37"><expr pos:start="67:33" pos:end="67:37"><literal type="string" pos:start="67:33" pos:end="67:37">"mux"</literal></expr></argument>, <argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:44" pos:end="83:5">{<block_content pos:start="69:9" pos:end="81:48">

        <decl_stmt pos:start="69:9" pos:end="69:36"><decl pos:start="69:9" pos:end="69:35"><type pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:23">CharDriverState</name> <modifier pos:start="69:25" pos:end="69:25">*</modifier></type><name pos:start="69:26" pos:end="69:29">base</name> <init pos:start="69:31" pos:end="69:35">= <expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:35">chr</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:49"><decl pos:start="71:9" pos:end="71:48"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:15">len</name> <init pos:start="71:17" pos:end="71:48">= <expr pos:start="71:19" pos:end="71:48"><call pos:start="71:19" pos:end="71:44"><name pos:start="71:19" pos:end="71:24">strlen</name><argument_list pos:start="71:25" pos:end="71:44">(<argument pos:start="71:26" pos:end="71:43"><expr pos:start="71:26" pos:end="71:43"><call pos:start="71:26" pos:end="71:43"><name pos:start="71:26" pos:end="71:37">qemu_opts_id</name><argument_list pos:start="71:38" pos:end="71:43">(<argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><name pos:start="71:39" pos:end="71:42">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="71:46" pos:end="71:46">+</operator> <literal type="number" pos:start="71:48" pos:end="71:48">6</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:39"><expr pos:start="73:9" pos:end="73:38"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:12">base</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:19">label</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:38"><name pos:start="73:23" pos:end="73:33">qemu_malloc</name><argument_list pos:start="73:34" pos:end="73:38">(<argument pos:start="73:35" pos:end="73:37"><expr pos:start="73:35" pos:end="73:37"><name pos:start="73:35" pos:end="73:37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:66"><expr pos:start="75:9" pos:end="75:65"><call pos:start="75:9" pos:end="75:65"><name pos:start="75:9" pos:end="75:16">snprintf</name><argument_list pos:start="75:17" pos:end="75:65">(<argument pos:start="75:18" pos:end="75:28"><expr pos:start="75:18" pos:end="75:28"><name pos:start="75:18" pos:end="75:28"><name pos:start="75:18" pos:end="75:21">base</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:28">label</name></name></expr></argument>, <argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">len</name></expr></argument>, <argument pos:start="75:36" pos:end="75:44"><expr pos:start="75:36" pos:end="75:44"><literal type="string" pos:start="75:36" pos:end="75:44">"%s-base"</literal></expr></argument>, <argument pos:start="75:47" pos:end="75:64"><expr pos:start="75:47" pos:end="75:64"><call pos:start="75:47" pos:end="75:64"><name pos:start="75:47" pos:end="75:58">qemu_opts_id</name><argument_list pos:start="75:59" pos:end="75:64">(<argument pos:start="75:60" pos:end="75:63"><expr pos:start="75:60" pos:end="75:63"><name pos:start="75:60" pos:end="75:63">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:11">chr</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:37"><name pos:start="77:15" pos:end="77:31">qemu_chr_open_mux</name><argument_list pos:start="77:32" pos:end="77:37">(<argument pos:start="77:33" pos:end="77:36"><expr pos:start="77:33" pos:end="77:36"><name pos:start="77:33" pos:end="77:36">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:39"><expr pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:11">chr</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:21">filename</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:28">base</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:38">filename</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:48"><expr pos:start="81:9" pos:end="81:47"><call pos:start="81:9" pos:end="81:47"><name pos:start="81:9" pos:end="81:25">TAILQ_INSERT_TAIL</name><argument_list pos:start="81:26" pos:end="81:47">(<argument pos:start="81:27" pos:end="81:35"><expr pos:start="81:27" pos:end="81:35"><operator pos:start="81:27" pos:end="81:27">&amp;</operator><name pos:start="81:28" pos:end="81:35">chardevs</name></expr></argument>, <argument pos:start="81:38" pos:end="81:40"><expr pos:start="81:38" pos:end="81:40"><name pos:start="81:38" pos:end="81:40">chr</name></expr></argument>, <argument pos:start="81:43" pos:end="81:46"><expr pos:start="81:43" pos:end="81:46"><name pos:start="81:43" pos:end="81:46">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:14"><name pos:start="85:5" pos:end="85:7">chr</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:14">label</name></name> <operator pos:start="85:16" pos:end="85:16">=</operator> <call pos:start="85:18" pos:end="85:48"><name pos:start="85:18" pos:end="85:28">qemu_strdup</name><argument_list pos:start="85:29" pos:end="85:48">(<argument pos:start="85:30" pos:end="85:47"><expr pos:start="85:30" pos:end="85:47"><call pos:start="85:30" pos:end="85:47"><name pos:start="85:30" pos:end="85:41">qemu_opts_id</name><argument_list pos:start="85:42" pos:end="85:47">(<argument pos:start="85:43" pos:end="85:46"><expr pos:start="85:43" pos:end="85:46"><name pos:start="85:43" pos:end="85:46">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">chr</name></expr>;</return>

</block_content>}</block></function>
</unit>
