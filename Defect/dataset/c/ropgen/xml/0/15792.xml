<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15792.c" pos:tabs="8"><function pos:start="1:1" pos:end="3469:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">disas_xtensa_insn</name><parameter_list pos:start="1:30" pos:end="1:47">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">DisasContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="3469:1">{<block_content pos:start="181:5" pos:end="3468:0">

<cpp:define pos:start="5:1" pos:end="17:15">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:28"><name pos:start="5:9" pos:end="5:23">HAS_OPTION_BITS</name><parameter_list pos:start="5:24" pos:end="5:28">(<parameter pos:start="5:25" pos:end="5:27"><type pos:start="5:25" pos:end="5:27"><name pos:start="5:25" pos:end="5:27">opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="5:30" pos:end="17:15">do { \

        if (!option_bits_enabled(dc, opt)) { \

            qemu_log("Option is not enabled %s:%d\n", \

                    __FILE__, __LINE__); \

            goto invalid_opcode; \

        } \

    } while (0)</cpp:value></cpp:define>



<cpp:define pos:start="21:1" pos:end="21:63">#<cpp:directive pos:start="21:2" pos:end="21:7">define</cpp:directive> <cpp:macro pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:18">HAS_OPTION</name><parameter_list pos:start="21:19" pos:end="21:23">(<parameter pos:start="21:20" pos:end="21:22"><type pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="21:25" pos:end="21:63">HAS_OPTION_BITS(XTENSA_OPTION_BIT(opt))</cpp:value></cpp:define>



<cpp:define pos:start="25:1" pos:end="25:77">#<cpp:directive pos:start="25:2" pos:end="25:7">define</cpp:directive> <cpp:macro pos:start="25:9" pos:end="25:13"><name pos:start="25:9" pos:end="25:11">TBD</name><parameter_list pos:start="25:12" pos:end="25:13">()</parameter_list></cpp:macro> <cpp:value pos:start="25:15" pos:end="25:77">qemu_log("TBD(pc = %08x): %s:%d\n", dc-&gt;pc, __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:define pos:start="27:1" pos:end="35:15">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:16">RESERVED</name><parameter_list pos:start="27:17" pos:end="27:18">()</parameter_list></cpp:macro> <cpp:value pos:start="27:20" pos:end="35:15">do { \

        qemu_log("RESERVED(pc = %08x, %02x%02x%02x): %s:%d\n", \

                dc-&gt;pc, b0, b1, b2, __FILE__, __LINE__); \

        goto invalid_opcode; \

    } while (0)</cpp:value></cpp:define>





<cpp:ifdef pos:start="41:1" pos:end="41:29">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="43:1" pos:end="43:32">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">OP0</name></cpp:macro> <cpp:value pos:start="43:13" pos:end="43:32">(((b0) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="45:1" pos:end="45:32">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">OP1</name></cpp:macro> <cpp:value pos:start="45:13" pos:end="45:32">(((b2) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="47:1" pos:end="47:24">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">OP2</name></cpp:macro> <cpp:value pos:start="47:13" pos:end="47:24">((b2) &amp; 0xf)</cpp:value></cpp:define>

<cpp:define pos:start="49:1" pos:end="49:26">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:13"><name pos:start="49:9" pos:end="49:13">RRR_R</name></cpp:macro> <cpp:value pos:start="49:15" pos:end="49:26">((b1) &amp; 0xf)</cpp:value></cpp:define>

<cpp:define pos:start="51:1" pos:end="51:34">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:13">RRR_S</name></cpp:macro> <cpp:value pos:start="51:15" pos:end="51:34">(((b1) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="53:1" pos:end="53:26">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:13">RRR_T</name></cpp:macro> <cpp:value pos:start="53:15" pos:end="53:26">((b0) &amp; 0xf)</cpp:value></cpp:define>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="57:1" pos:end="57:26">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">OP0</name></cpp:macro> <cpp:value pos:start="57:13" pos:end="57:26">(((b0) &amp; 0xf))</cpp:value></cpp:define>

<cpp:define pos:start="59:1" pos:end="59:26">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">OP1</name></cpp:macro> <cpp:value pos:start="59:13" pos:end="59:26">(((b2) &amp; 0xf))</cpp:value></cpp:define>

<cpp:define pos:start="61:1" pos:end="61:32">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">OP2</name></cpp:macro> <cpp:value pos:start="61:13" pos:end="61:32">(((b2) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="63:1" pos:end="63:34">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:13"><name pos:start="63:9" pos:end="63:13">RRR_R</name></cpp:macro> <cpp:value pos:start="63:15" pos:end="63:34">(((b1) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="65:1" pos:end="65:28">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:13">RRR_S</name></cpp:macro> <cpp:value pos:start="65:15" pos:end="65:28">(((b1) &amp; 0xf))</cpp:value></cpp:define>

<cpp:define pos:start="67:1" pos:end="67:34">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:13">RRR_T</name></cpp:macro> <cpp:value pos:start="67:15" pos:end="67:34">(((b0) &amp; 0xf0) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="71:1" pos:end="71:34">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:13">RRR_X</name></cpp:macro> <cpp:value pos:start="71:15" pos:end="71:34">((RRR_R &amp; 0x4) &gt;&gt; 2)</cpp:value></cpp:define>

<cpp:define pos:start="73:1" pos:end="73:34">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13">RRR_Y</name></cpp:macro> <cpp:value pos:start="73:15" pos:end="73:34">((RRR_T &amp; 0x4) &gt;&gt; 2)</cpp:value></cpp:define>

<cpp:define pos:start="75:1" pos:end="75:27">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:13">RRR_W</name></cpp:macro> <cpp:value pos:start="75:15" pos:end="75:27">(RRR_R &amp; 0x3)</cpp:value></cpp:define>



<cpp:define pos:start="79:1" pos:end="79:20">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:14">RRRN_R</name></cpp:macro> <cpp:value pos:start="79:16" pos:end="79:20">RRR_R</cpp:value></cpp:define>

<cpp:define pos:start="81:1" pos:end="81:20">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:14">RRRN_S</name></cpp:macro> <cpp:value pos:start="81:16" pos:end="81:20">RRR_S</cpp:value></cpp:define>

<cpp:define pos:start="83:1" pos:end="83:20">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:14">RRRN_T</name></cpp:macro> <cpp:value pos:start="83:16" pos:end="83:20">RRR_T</cpp:value></cpp:define>



<cpp:define pos:start="87:1" pos:end="87:20">#<cpp:directive pos:start="87:2" pos:end="87:7">define</cpp:directive> <cpp:macro pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:14">RRI8_R</name></cpp:macro> <cpp:value pos:start="87:16" pos:end="87:20">RRR_R</cpp:value></cpp:define>

<cpp:define pos:start="89:1" pos:end="89:20">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:14">RRI8_S</name></cpp:macro> <cpp:value pos:start="89:16" pos:end="89:20">RRR_S</cpp:value></cpp:define>

<cpp:define pos:start="91:1" pos:end="91:20">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:14">RRI8_T</name></cpp:macro> <cpp:value pos:start="91:16" pos:end="91:20">RRR_T</cpp:value></cpp:define>

<cpp:define pos:start="93:1" pos:end="93:22">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:17">RRI8_IMM8</name></cpp:macro> <cpp:value pos:start="93:19" pos:end="93:22">(b2)</cpp:value></cpp:define>

<cpp:define pos:start="95:1" pos:end="95:67">#<cpp:directive pos:start="95:2" pos:end="95:7">define</cpp:directive> <cpp:macro pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:20">RRI8_IMM8_SE</name></cpp:macro> <cpp:value pos:start="95:22" pos:end="95:67">((((b2) &amp; 0x80) ? 0xffffff00 : 0) | RRI8_IMM8)</cpp:value></cpp:define>



<cpp:ifdef pos:start="99:1" pos:end="99:29">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="101:1" pos:end="101:39">#<cpp:directive pos:start="101:2" pos:end="101:7">define</cpp:directive> <cpp:macro pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:18">RI16_IMM16</name></cpp:macro> <cpp:value pos:start="101:20" pos:end="101:39">(((b1) &lt;&lt; 8) | (b2))</cpp:value></cpp:define>

<cpp:else pos:start="103:1" pos:end="103:5">#<cpp:directive pos:start="103:2" pos:end="103:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="105:1" pos:end="105:39">#<cpp:directive pos:start="105:2" pos:end="105:7">define</cpp:directive> <cpp:macro pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:18">RI16_IMM16</name></cpp:macro> <cpp:value pos:start="105:20" pos:end="105:39">(((b2) &lt;&lt; 8) | (b1))</cpp:value></cpp:define>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="111:1" pos:end="111:29">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="113:1" pos:end="113:34">#<cpp:directive pos:start="113:2" pos:end="113:7">define</cpp:directive> <cpp:macro pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:14">CALL_N</name></cpp:macro> <cpp:value pos:start="113:16" pos:end="113:34">(((b0) &amp; 0xc) &gt;&gt; 2)</cpp:value></cpp:define>

<cpp:define pos:start="115:1" pos:end="115:63">#<cpp:directive pos:start="115:2" pos:end="115:7">define</cpp:directive> <cpp:macro pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:19">CALL_OFFSET</name></cpp:macro> <cpp:value pos:start="115:21" pos:end="115:63">((((b0) &amp; 0x3) &lt;&lt; 16) | ((b1) &lt;&lt; 8) | (b2))</cpp:value></cpp:define>

<cpp:else pos:start="117:1" pos:end="117:5">#<cpp:directive pos:start="117:2" pos:end="117:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="119:1" pos:end="119:35">#<cpp:directive pos:start="119:2" pos:end="119:7">define</cpp:directive> <cpp:macro pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:14">CALL_N</name></cpp:macro> <cpp:value pos:start="119:16" pos:end="119:35">(((b0) &amp; 0x30) &gt;&gt; 4)</cpp:value></cpp:define>

<cpp:define pos:start="121:1" pos:end="121:71">#<cpp:directive pos:start="121:2" pos:end="121:7">define</cpp:directive> <cpp:macro pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:19">CALL_OFFSET</name></cpp:macro> <cpp:value pos:start="121:21" pos:end="121:71">((((b0) &amp; 0xc0) &gt;&gt; 6) | ((b1) &lt;&lt; 2) | ((b2) &lt;&lt; 10))</cpp:value></cpp:define>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="125:1" pos:end="127:62">#<cpp:directive pos:start="125:2" pos:end="125:7">define</cpp:directive> <cpp:macro pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:22">CALL_OFFSET_SE</name></cpp:macro> \

    <cpp:value pos:start="127:5" pos:end="127:62">(((CALL_OFFSET &amp; 0x20000) ? 0xfffc0000 : 0) | CALL_OFFSET)</cpp:value></cpp:define>



<cpp:define pos:start="131:1" pos:end="131:22">#<cpp:directive pos:start="131:2" pos:end="131:7">define</cpp:directive> <cpp:macro pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:15">CALLX_N</name></cpp:macro> <cpp:value pos:start="131:17" pos:end="131:22">CALL_N</cpp:value></cpp:define>

<cpp:ifdef pos:start="133:1" pos:end="133:29">#<cpp:directive pos:start="133:2" pos:end="133:6">ifdef</cpp:directive> <name pos:start="133:8" pos:end="133:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="135:1" pos:end="135:28">#<cpp:directive pos:start="135:2" pos:end="135:7">define</cpp:directive> <cpp:macro pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:15">CALLX_M</name></cpp:macro> <cpp:value pos:start="135:17" pos:end="135:28">((b0) &amp; 0x3)</cpp:value></cpp:define>

<cpp:else pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="139:1" pos:end="139:36">#<cpp:directive pos:start="139:2" pos:end="139:7">define</cpp:directive> <cpp:macro pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:15">CALLX_M</name></cpp:macro> <cpp:value pos:start="139:17" pos:end="139:36">(((b0) &amp; 0xc0) &gt;&gt; 6)</cpp:value></cpp:define>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="143:1" pos:end="143:21">#<cpp:directive pos:start="143:2" pos:end="143:7">define</cpp:directive> <cpp:macro pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:15">CALLX_S</name></cpp:macro> <cpp:value pos:start="143:17" pos:end="143:21">RRR_S</cpp:value></cpp:define>



<cpp:define pos:start="147:1" pos:end="147:23">#<cpp:directive pos:start="147:2" pos:end="147:7">define</cpp:directive> <cpp:macro pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:15">BRI12_M</name></cpp:macro> <cpp:value pos:start="147:17" pos:end="147:23">CALLX_M</cpp:value></cpp:define>

<cpp:define pos:start="149:1" pos:end="149:21">#<cpp:directive pos:start="149:2" pos:end="149:7">define</cpp:directive> <cpp:macro pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:15">BRI12_S</name></cpp:macro> <cpp:value pos:start="149:17" pos:end="149:21">RRR_S</cpp:value></cpp:define>

<cpp:ifdef pos:start="151:1" pos:end="151:29">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="153:1" pos:end="153:48">#<cpp:directive pos:start="153:2" pos:end="153:7">define</cpp:directive> <cpp:macro pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:19">BRI12_IMM12</name></cpp:macro> <cpp:value pos:start="153:21" pos:end="153:48">((((b1) &amp; 0xf) &lt;&lt; 8) | (b2))</cpp:value></cpp:define>

<cpp:else pos:start="155:1" pos:end="155:5">#<cpp:directive pos:start="155:2" pos:end="155:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="157:1" pos:end="157:56">#<cpp:directive pos:start="157:2" pos:end="157:7">define</cpp:directive> <cpp:macro pos:start="157:9" pos:end="157:19"><name pos:start="157:9" pos:end="157:19">BRI12_IMM12</name></cpp:macro> <cpp:value pos:start="157:21" pos:end="157:56">((((b1) &amp; 0xf0) &gt;&gt; 4) | ((b2) &lt;&lt; 4))</cpp:value></cpp:define>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="161:1" pos:end="161:79">#<cpp:directive pos:start="161:2" pos:end="161:7">define</cpp:directive> <cpp:macro pos:start="161:9" pos:end="161:22"><name pos:start="161:9" pos:end="161:22">BRI12_IMM12_SE</name></cpp:macro> <cpp:value pos:start="161:24" pos:end="161:79">(((BRI12_IMM12 &amp; 0x800) ? 0xfffff000 : 0) | BRI12_IMM12)</cpp:value></cpp:define>



<cpp:define pos:start="165:1" pos:end="165:22">#<cpp:directive pos:start="165:2" pos:end="165:7">define</cpp:directive> <cpp:macro pos:start="165:9" pos:end="165:14"><name pos:start="165:9" pos:end="165:14">BRI8_M</name></cpp:macro> <cpp:value pos:start="165:16" pos:end="165:22">BRI12_M</cpp:value></cpp:define>

<cpp:define pos:start="167:1" pos:end="167:21">#<cpp:directive pos:start="167:2" pos:end="167:7">define</cpp:directive> <cpp:macro pos:start="167:9" pos:end="167:14"><name pos:start="167:9" pos:end="167:14">BRI8_R</name></cpp:macro> <cpp:value pos:start="167:16" pos:end="167:21">RRI8_R</cpp:value></cpp:define>

<cpp:define pos:start="169:1" pos:end="169:21">#<cpp:directive pos:start="169:2" pos:end="169:7">define</cpp:directive> <cpp:macro pos:start="169:9" pos:end="169:14"><name pos:start="169:9" pos:end="169:14">BRI8_S</name></cpp:macro> <cpp:value pos:start="169:16" pos:end="169:21">RRI8_S</cpp:value></cpp:define>

<cpp:define pos:start="171:1" pos:end="171:27">#<cpp:directive pos:start="171:2" pos:end="171:7">define</cpp:directive> <cpp:macro pos:start="171:9" pos:end="171:17"><name pos:start="171:9" pos:end="171:17">BRI8_IMM8</name></cpp:macro> <cpp:value pos:start="171:19" pos:end="171:27">RRI8_IMM8</cpp:value></cpp:define>

<cpp:define pos:start="173:1" pos:end="173:33">#<cpp:directive pos:start="173:2" pos:end="173:7">define</cpp:directive> <cpp:macro pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:20">BRI8_IMM8_SE</name></cpp:macro> <cpp:value pos:start="173:22" pos:end="173:33">RRI8_IMM8_SE</cpp:value></cpp:define>



<cpp:define pos:start="177:1" pos:end="177:19">#<cpp:directive pos:start="177:2" pos:end="177:7">define</cpp:directive> <cpp:macro pos:start="177:9" pos:end="177:14"><name pos:start="177:9" pos:end="177:14">RSR_SR</name></cpp:macro> <cpp:value pos:start="177:16" pos:end="177:19">(b1)</cpp:value></cpp:define>



    <decl_stmt pos:start="181:5" pos:end="181:35"><decl pos:start="181:5" pos:end="181:34"><type pos:start="181:5" pos:end="181:11"><name pos:start="181:5" pos:end="181:11">uint8_t</name></type> <name pos:start="181:13" pos:end="181:14">b0</name> <init pos:start="181:16" pos:end="181:34">= <expr pos:start="181:18" pos:end="181:34"><call pos:start="181:18" pos:end="181:34"><name pos:start="181:18" pos:end="181:26">ldub_code</name><argument_list pos:start="181:27" pos:end="181:34">(<argument pos:start="181:28" pos:end="181:33"><expr pos:start="181:28" pos:end="181:33"><name pos:start="181:28" pos:end="181:33"><name pos:start="181:28" pos:end="181:29">dc</name><operator pos:start="181:30" pos:end="181:31">-&gt;</operator><name pos:start="181:32" pos:end="181:33">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="183:5" pos:end="183:39"><decl pos:start="183:5" pos:end="183:38"><type pos:start="183:5" pos:end="183:11"><name pos:start="183:5" pos:end="183:11">uint8_t</name></type> <name pos:start="183:13" pos:end="183:14">b1</name> <init pos:start="183:16" pos:end="183:38">= <expr pos:start="183:18" pos:end="183:38"><call pos:start="183:18" pos:end="183:38"><name pos:start="183:18" pos:end="183:26">ldub_code</name><argument_list pos:start="183:27" pos:end="183:38">(<argument pos:start="183:28" pos:end="183:37"><expr pos:start="183:28" pos:end="183:37"><name pos:start="183:28" pos:end="183:33"><name pos:start="183:28" pos:end="183:29">dc</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:33">pc</name></name> <operator pos:start="183:35" pos:end="183:35">+</operator> <literal type="number" pos:start="183:37" pos:end="183:37">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="185:5" pos:end="185:19"><decl pos:start="185:5" pos:end="185:18"><type pos:start="185:5" pos:end="185:11"><name pos:start="185:5" pos:end="185:11">uint8_t</name></type> <name pos:start="185:13" pos:end="185:14">b2</name> <init pos:start="185:16" pos:end="185:18">= <expr pos:start="185:18" pos:end="185:18"><literal type="number" pos:start="185:18" pos:end="185:18">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="189:5" pos:end="193:6"><decl pos:start="189:5" pos:end="193:5"><type pos:start="189:5" pos:end="189:25"><specifier pos:start="189:5" pos:end="189:10">static</specifier> <specifier pos:start="189:12" pos:end="189:16">const</specifier> <name pos:start="189:18" pos:end="189:25">uint32_t</name></type> <name pos:start="189:27" pos:end="189:35"><name pos:start="189:27" pos:end="189:33">B4CONST</name><index pos:start="189:34" pos:end="189:35">[]</index></name> <init pos:start="189:37" pos:end="193:5">= <expr pos:start="189:39" pos:end="193:5"><block pos:start="189:39" pos:end="193:5">{

        <expr pos:start="191:9" pos:end="191:18"><literal type="number" pos:start="191:9" pos:end="191:18">0xffffffff</literal></expr>, <expr pos:start="191:21" pos:end="191:21"><literal type="number" pos:start="191:21" pos:end="191:21">1</literal></expr>, <expr pos:start="191:24" pos:end="191:24"><literal type="number" pos:start="191:24" pos:end="191:24">2</literal></expr>, <expr pos:start="191:27" pos:end="191:27"><literal type="number" pos:start="191:27" pos:end="191:27">3</literal></expr>, <expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">4</literal></expr>, <expr pos:start="191:33" pos:end="191:33"><literal type="number" pos:start="191:33" pos:end="191:33">5</literal></expr>, <expr pos:start="191:36" pos:end="191:36"><literal type="number" pos:start="191:36" pos:end="191:36">6</literal></expr>, <expr pos:start="191:39" pos:end="191:39"><literal type="number" pos:start="191:39" pos:end="191:39">7</literal></expr>, <expr pos:start="191:42" pos:end="191:42"><literal type="number" pos:start="191:42" pos:end="191:42">8</literal></expr>, <expr pos:start="191:45" pos:end="191:46"><literal type="number" pos:start="191:45" pos:end="191:46">10</literal></expr>, <expr pos:start="191:49" pos:end="191:50"><literal type="number" pos:start="191:49" pos:end="191:50">12</literal></expr>, <expr pos:start="191:53" pos:end="191:54"><literal type="number" pos:start="191:53" pos:end="191:54">16</literal></expr>, <expr pos:start="191:57" pos:end="191:58"><literal type="number" pos:start="191:57" pos:end="191:58">32</literal></expr>, <expr pos:start="191:61" pos:end="191:62"><literal type="number" pos:start="191:61" pos:end="191:62">64</literal></expr>, <expr pos:start="191:65" pos:end="191:67"><literal type="number" pos:start="191:65" pos:end="191:67">128</literal></expr>, <expr pos:start="191:70" pos:end="191:72"><literal type="number" pos:start="191:70" pos:end="191:72">256</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="197:5" pos:end="201:6"><decl pos:start="197:5" pos:end="201:5"><type pos:start="197:5" pos:end="197:25"><specifier pos:start="197:5" pos:end="197:10">static</specifier> <specifier pos:start="197:12" pos:end="197:16">const</specifier> <name pos:start="197:18" pos:end="197:25">uint32_t</name></type> <name pos:start="197:27" pos:end="197:36"><name pos:start="197:27" pos:end="197:34">B4CONSTU</name><index pos:start="197:35" pos:end="197:36">[]</index></name> <init pos:start="197:38" pos:end="201:5">= <expr pos:start="197:40" pos:end="201:5"><block pos:start="197:40" pos:end="201:5">{

        <expr pos:start="199:9" pos:end="199:13"><literal type="number" pos:start="199:9" pos:end="199:13">32768</literal></expr>, <expr pos:start="199:16" pos:end="199:20"><literal type="number" pos:start="199:16" pos:end="199:20">65536</literal></expr>, <expr pos:start="199:23" pos:end="199:23"><literal type="number" pos:start="199:23" pos:end="199:23">2</literal></expr>, <expr pos:start="199:26" pos:end="199:26"><literal type="number" pos:start="199:26" pos:end="199:26">3</literal></expr>, <expr pos:start="199:29" pos:end="199:29"><literal type="number" pos:start="199:29" pos:end="199:29">4</literal></expr>, <expr pos:start="199:32" pos:end="199:32"><literal type="number" pos:start="199:32" pos:end="199:32">5</literal></expr>, <expr pos:start="199:35" pos:end="199:35"><literal type="number" pos:start="199:35" pos:end="199:35">6</literal></expr>, <expr pos:start="199:38" pos:end="199:38"><literal type="number" pos:start="199:38" pos:end="199:38">7</literal></expr>, <expr pos:start="199:41" pos:end="199:41"><literal type="number" pos:start="199:41" pos:end="199:41">8</literal></expr>, <expr pos:start="199:44" pos:end="199:45"><literal type="number" pos:start="199:44" pos:end="199:45">10</literal></expr>, <expr pos:start="199:48" pos:end="199:49"><literal type="number" pos:start="199:48" pos:end="199:49">12</literal></expr>, <expr pos:start="199:52" pos:end="199:53"><literal type="number" pos:start="199:52" pos:end="199:53">16</literal></expr>, <expr pos:start="199:56" pos:end="199:57"><literal type="number" pos:start="199:56" pos:end="199:57">32</literal></expr>, <expr pos:start="199:60" pos:end="199:61"><literal type="number" pos:start="199:60" pos:end="199:61">64</literal></expr>, <expr pos:start="199:64" pos:end="199:66"><literal type="number" pos:start="199:64" pos:end="199:66">128</literal></expr>, <expr pos:start="199:69" pos:end="199:71"><literal type="number" pos:start="199:69" pos:end="199:71">256</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="205:5" pos:end="217:5"><if pos:start="205:5" pos:end="211:5">if <condition pos:start="205:8" pos:end="205:17">(<expr pos:start="205:9" pos:end="205:16"><name pos:start="205:9" pos:end="205:11">OP0</name> <operator pos:start="205:13" pos:end="205:14">&gt;=</operator> <literal type="number" pos:start="205:16" pos:end="205:16">8</literal></expr>)</condition> <block pos:start="205:19" pos:end="211:5">{<block_content pos:start="207:9" pos:end="209:47">

        <expr_stmt pos:start="207:9" pos:end="207:33"><expr pos:start="207:9" pos:end="207:32"><name pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:10">dc</name><operator pos:start="207:11" pos:end="207:12">-&gt;</operator><name pos:start="207:13" pos:end="207:19">next_pc</name></name> <operator pos:start="207:21" pos:end="207:21">=</operator> <name pos:start="207:23" pos:end="207:28"><name pos:start="207:23" pos:end="207:24">dc</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:28">pc</name></name> <operator pos:start="207:30" pos:end="207:30">+</operator> <literal type="number" pos:start="207:32" pos:end="207:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:47"><expr pos:start="209:9" pos:end="209:46"><call pos:start="209:9" pos:end="209:46"><name pos:start="209:9" pos:end="209:18">HAS_OPTION</name><argument_list pos:start="209:19" pos:end="209:46">(<argument pos:start="209:20" pos:end="209:45"><expr pos:start="209:20" pos:end="209:45"><name pos:start="209:20" pos:end="209:45">XTENSA_OPTION_CODE_DENSITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="217:5">else <block pos:start="211:12" pos:end="217:5">{<block_content pos:start="213:9" pos:end="215:35">

        <expr_stmt pos:start="213:9" pos:end="213:33"><expr pos:start="213:9" pos:end="213:32"><name pos:start="213:9" pos:end="213:19"><name pos:start="213:9" pos:end="213:10">dc</name><operator pos:start="213:11" pos:end="213:12">-&gt;</operator><name pos:start="213:13" pos:end="213:19">next_pc</name></name> <operator pos:start="213:21" pos:end="213:21">=</operator> <name pos:start="213:23" pos:end="213:28"><name pos:start="213:23" pos:end="213:24">dc</name><operator pos:start="213:25" pos:end="213:26">-&gt;</operator><name pos:start="213:27" pos:end="213:28">pc</name></name> <operator pos:start="213:30" pos:end="213:30">+</operator> <literal type="number" pos:start="213:32" pos:end="213:32">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:35"><expr pos:start="215:9" pos:end="215:34"><name pos:start="215:9" pos:end="215:10">b2</name> <operator pos:start="215:12" pos:end="215:12">=</operator> <call pos:start="215:14" pos:end="215:34"><name pos:start="215:14" pos:end="215:22">ldub_code</name><argument_list pos:start="215:23" pos:end="215:34">(<argument pos:start="215:24" pos:end="215:33"><expr pos:start="215:24" pos:end="215:33"><name pos:start="215:24" pos:end="215:29"><name pos:start="215:24" pos:end="215:25">dc</name><operator pos:start="215:26" pos:end="215:27">-&gt;</operator><name pos:start="215:28" pos:end="215:29">pc</name></name> <operator pos:start="215:31" pos:end="215:31">+</operator> <literal type="number" pos:start="215:33" pos:end="215:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="221:5" pos:end="3447:5">switch <condition pos:start="221:12" pos:end="221:16">(<expr pos:start="221:13" pos:end="221:15"><name pos:start="221:13" pos:end="221:15">OP0</name></expr>)</condition> <block pos:start="221:18" pos:end="3447:5">{<block_content pos:start="223:5" pos:end="3445:14">

    <case pos:start="223:5" pos:end="223:11">case <expr pos:start="223:10" pos:end="223:10"><literal type="number" pos:start="223:10" pos:end="223:10">0</literal></expr>:</case> <comment type="block" pos:start="223:13" pos:end="223:20">/*QRST*/</comment>

        <switch pos:start="225:9" pos:end="2165:9">switch <condition pos:start="225:16" pos:end="225:20">(<expr pos:start="225:17" pos:end="225:19"><name pos:start="225:17" pos:end="225:19">OP1</name></expr>)</condition> <block pos:start="225:22" pos:end="2165:9">{<block_content pos:start="227:9" pos:end="2163:18">

        <case pos:start="227:9" pos:end="227:15">case <expr pos:start="227:14" pos:end="227:14"><literal type="number" pos:start="227:14" pos:end="227:14">0</literal></expr>:</case> <comment type="block" pos:start="227:17" pos:end="227:24">/*RST0*/</comment>

            <switch pos:start="229:13" pos:end="1181:13">switch <condition pos:start="229:20" pos:end="229:24">(<expr pos:start="229:21" pos:end="229:23"><name pos:start="229:21" pos:end="229:23">OP2</name></expr>)</condition> <block pos:start="229:26" pos:end="1181:13">{<block_content pos:start="231:13" pos:end="1179:22">

            <case pos:start="231:13" pos:end="231:19">case <expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">0</literal></expr>:</case> <comment type="block" pos:start="231:21" pos:end="231:27">/*ST0*/</comment>

                <if_stmt pos:start="233:17" pos:end="237:17"><if pos:start="233:17" pos:end="237:17">if <condition pos:start="233:20" pos:end="233:41">(<expr pos:start="233:21" pos:end="233:40"><operator pos:start="233:21" pos:end="233:21">(</operator><name pos:start="233:22" pos:end="233:26">RRR_R</name> <operator pos:start="233:28" pos:end="233:28">&amp;</operator> <literal type="number" pos:start="233:30" pos:end="233:32">0xc</literal><operator pos:start="233:33" pos:end="233:33">)</operator> <operator pos:start="233:35" pos:end="233:36">==</operator> <literal type="number" pos:start="233:38" pos:end="233:40">0x8</literal></expr>)</condition> <block pos:start="233:43" pos:end="237:17">{<block_content pos:start="235:21" pos:end="235:54">

                    <expr_stmt pos:start="235:21" pos:end="235:54"><expr pos:start="235:21" pos:end="235:53"><call pos:start="235:21" pos:end="235:53"><name pos:start="235:21" pos:end="235:30">HAS_OPTION</name><argument_list pos:start="235:31" pos:end="235:53">(<argument pos:start="235:32" pos:end="235:52"><expr pos:start="235:32" pos:end="235:52"><name pos:start="235:32" pos:end="235:52">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <switch pos:start="241:17" pos:end="775:17">switch <condition pos:start="241:24" pos:end="241:30">(<expr pos:start="241:25" pos:end="241:29"><name pos:start="241:25" pos:end="241:29">RRR_R</name></expr>)</condition> <block pos:start="241:32" pos:end="775:17">{<block_content pos:start="243:17" pos:end="771:26">

                <case pos:start="243:17" pos:end="243:23">case <expr pos:start="243:22" pos:end="243:22"><literal type="number" pos:start="243:22" pos:end="243:22">0</literal></expr>:</case> <comment type="block" pos:start="243:25" pos:end="243:32">/*SNM0*/</comment>

                    <switch pos:start="245:21" pos:end="367:21">switch <condition pos:start="245:28" pos:end="245:36">(<expr pos:start="245:29" pos:end="245:35"><name pos:start="245:29" pos:end="245:35">CALLX_M</name></expr>)</condition> <block pos:start="245:38" pos:end="367:21">{<block_content pos:start="247:21" pos:end="365:30">

                    <case pos:start="247:21" pos:end="247:27">case <expr pos:start="247:26" pos:end="247:26"><literal type="number" pos:start="247:26" pos:end="247:26">0</literal></expr>:</case> <comment type="block" pos:start="247:29" pos:end="247:35">/*ILL*/</comment>

                        <expr_stmt pos:start="249:25" pos:end="249:75"><expr pos:start="249:25" pos:end="249:74"><call pos:start="249:25" pos:end="249:74"><name pos:start="249:25" pos:end="249:43">gen_exception_cause</name><argument_list pos:start="249:44" pos:end="249:74">(<argument pos:start="249:45" pos:end="249:46"><expr pos:start="249:45" pos:end="249:46"><name pos:start="249:45" pos:end="249:46">dc</name></expr></argument>, <argument pos:start="249:49" pos:end="249:73"><expr pos:start="249:49" pos:end="249:73"><name pos:start="249:49" pos:end="249:73">ILLEGAL_INSTRUCTION_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="251:25" pos:end="251:30">break;</break>



                    <case pos:start="255:21" pos:end="255:27">case <expr pos:start="255:26" pos:end="255:26"><literal type="number" pos:start="255:26" pos:end="255:26">1</literal></expr>:</case> <comment type="block" pos:start="255:29" pos:end="255:40">/*reserved*/</comment>

                        <expr_stmt pos:start="257:25" pos:end="257:35"><expr pos:start="257:25" pos:end="257:34"><call pos:start="257:25" pos:end="257:34"><name pos:start="257:25" pos:end="257:32">RESERVED</name><argument_list pos:start="257:33" pos:end="257:34">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="259:25" pos:end="259:30">break;</break>



                    <case pos:start="263:21" pos:end="263:27">case <expr pos:start="263:26" pos:end="263:26"><literal type="number" pos:start="263:26" pos:end="263:26">2</literal></expr>:</case> <comment type="block" pos:start="263:29" pos:end="263:34">/*JR*/</comment>

                        <switch pos:start="265:25" pos:end="307:25">switch <condition pos:start="265:32" pos:end="265:40">(<expr pos:start="265:33" pos:end="265:39"><name pos:start="265:33" pos:end="265:39">CALLX_N</name></expr>)</condition> <block pos:start="265:42" pos:end="307:25">{<block_content pos:start="267:25" pos:end="305:34">

                        <case pos:start="267:25" pos:end="267:31">case <expr pos:start="267:30" pos:end="267:30"><literal type="number" pos:start="267:30" pos:end="267:30">0</literal></expr>:</case> <comment type="block" pos:start="267:33" pos:end="267:39">/*RET*/</comment>

                        <case pos:start="269:25" pos:end="269:31">case <expr pos:start="269:30" pos:end="269:30"><literal type="number" pos:start="269:30" pos:end="269:30">2</literal></expr>:</case> <comment type="block" pos:start="269:33" pos:end="269:38">/*JX*/</comment>

                            <expr_stmt pos:start="271:29" pos:end="271:59"><expr pos:start="271:29" pos:end="271:58"><call pos:start="271:29" pos:end="271:58"><name pos:start="271:29" pos:end="271:45">gen_window_check1</name><argument_list pos:start="271:46" pos:end="271:58">(<argument pos:start="271:47" pos:end="271:48"><expr pos:start="271:47" pos:end="271:48"><name pos:start="271:47" pos:end="271:48">dc</name></expr></argument>, <argument pos:start="271:51" pos:end="271:57"><expr pos:start="271:51" pos:end="271:57"><name pos:start="271:51" pos:end="271:57">CALLX_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="273:29" pos:end="273:57"><expr pos:start="273:29" pos:end="273:56"><call pos:start="273:29" pos:end="273:56"><name pos:start="273:29" pos:end="273:36">gen_jump</name><argument_list pos:start="273:37" pos:end="273:56">(<argument pos:start="273:38" pos:end="273:39"><expr pos:start="273:38" pos:end="273:39"><name pos:start="273:38" pos:end="273:39">dc</name></expr></argument>, <argument pos:start="273:42" pos:end="273:55"><expr pos:start="273:42" pos:end="273:55"><name pos:start="273:42" pos:end="273:55"><name pos:start="273:42" pos:end="273:46">cpu_R</name><index pos:start="273:47" pos:end="273:55">[<expr pos:start="273:48" pos:end="273:54"><name pos:start="273:48" pos:end="273:54">CALLX_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="275:29" pos:end="275:34">break;</break>



                        <case pos:start="279:25" pos:end="279:31">case <expr pos:start="279:30" pos:end="279:30"><literal type="number" pos:start="279:30" pos:end="279:30">1</literal></expr>:</case> <comment type="block" pos:start="279:33" pos:end="279:41">/*RETWw*/</comment>

                            <expr_stmt pos:start="281:29" pos:end="281:72"><expr pos:start="281:29" pos:end="281:71"><call pos:start="281:29" pos:end="281:71"><name pos:start="281:29" pos:end="281:38">HAS_OPTION</name><argument_list pos:start="281:39" pos:end="281:71">(<argument pos:start="281:40" pos:end="281:70"><expr pos:start="281:40" pos:end="281:70"><name pos:start="281:40" pos:end="281:70">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <block pos:start="283:29" pos:end="295:29">{<block_content pos:start="285:33" pos:end="293:51">

                                <decl_stmt pos:start="285:33" pos:end="285:69"><decl pos:start="285:33" pos:end="285:68"><type pos:start="285:33" pos:end="285:40"><name pos:start="285:33" pos:end="285:40">TCGv_i32</name></type> <name pos:start="285:42" pos:end="285:44">tmp</name> <init pos:start="285:46" pos:end="285:68">= <expr pos:start="285:48" pos:end="285:68"><call pos:start="285:48" pos:end="285:68"><name pos:start="285:48" pos:end="285:60">tcg_const_i32</name><argument_list pos:start="285:61" pos:end="285:68">(<argument pos:start="285:62" pos:end="285:67"><expr pos:start="285:62" pos:end="285:67"><name pos:start="285:62" pos:end="285:67"><name pos:start="285:62" pos:end="285:63">dc</name><operator pos:start="285:64" pos:end="285:65">-&gt;</operator><name pos:start="285:66" pos:end="285:67">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt pos:start="287:33" pos:end="287:55"><expr pos:start="287:33" pos:end="287:54"><call pos:start="287:33" pos:end="287:54"><name pos:start="287:33" pos:end="287:50">gen_advance_ccount</name><argument_list pos:start="287:51" pos:end="287:54">(<argument pos:start="287:52" pos:end="287:53"><expr pos:start="287:52" pos:end="287:53"><name pos:start="287:52" pos:end="287:53">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="289:33" pos:end="289:58"><expr pos:start="289:33" pos:end="289:57"><call pos:start="289:33" pos:end="289:57"><name pos:start="289:33" pos:end="289:47">gen_helper_retw</name><argument_list pos:start="289:48" pos:end="289:57">(<argument pos:start="289:49" pos:end="289:51"><expr pos:start="289:49" pos:end="289:51"><name pos:start="289:49" pos:end="289:51">tmp</name></expr></argument>, <argument pos:start="289:54" pos:end="289:56"><expr pos:start="289:54" pos:end="289:56"><name pos:start="289:54" pos:end="289:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="291:33" pos:end="291:50"><expr pos:start="291:33" pos:end="291:49"><call pos:start="291:33" pos:end="291:49"><name pos:start="291:33" pos:end="291:40">gen_jump</name><argument_list pos:start="291:41" pos:end="291:49">(<argument pos:start="291:42" pos:end="291:43"><expr pos:start="291:42" pos:end="291:43"><name pos:start="291:42" pos:end="291:43">dc</name></expr></argument>, <argument pos:start="291:46" pos:end="291:48"><expr pos:start="291:46" pos:end="291:48"><name pos:start="291:46" pos:end="291:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="293:33" pos:end="293:51"><expr pos:start="293:33" pos:end="293:50"><call pos:start="293:33" pos:end="293:50"><name pos:start="293:33" pos:end="293:45">tcg_temp_free</name><argument_list pos:start="293:46" pos:end="293:50">(<argument pos:start="293:47" pos:end="293:49"><expr pos:start="293:47" pos:end="293:49"><name pos:start="293:47" pos:end="293:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block>

                            <break pos:start="297:29" pos:end="297:34">break;</break>



                        <case pos:start="301:25" pos:end="301:31">case <expr pos:start="301:30" pos:end="301:30"><literal type="number" pos:start="301:30" pos:end="301:30">3</literal></expr>:</case> <comment type="block" pos:start="301:33" pos:end="301:44">/*reserved*/</comment>

                            <expr_stmt pos:start="303:29" pos:end="303:39"><expr pos:start="303:29" pos:end="303:38"><call pos:start="303:29" pos:end="303:38"><name pos:start="303:29" pos:end="303:36">RESERVED</name><argument_list pos:start="303:37" pos:end="303:38">()</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="305:29" pos:end="305:34">break;</break>

                        </block_content>}</block></switch>

                        <break pos:start="309:25" pos:end="309:30">break;</break>



                    <case pos:start="313:21" pos:end="313:27">case <expr pos:start="313:26" pos:end="313:26"><literal type="number" pos:start="313:26" pos:end="313:26">3</literal></expr>:</case> <comment type="block" pos:start="313:29" pos:end="313:37">/*CALLX*/</comment>

                        <expr_stmt pos:start="315:25" pos:end="315:69"><expr pos:start="315:25" pos:end="315:68"><call pos:start="315:25" pos:end="315:68"><name pos:start="315:25" pos:end="315:41">gen_window_check2</name><argument_list pos:start="315:42" pos:end="315:68">(<argument pos:start="315:43" pos:end="315:44"><expr pos:start="315:43" pos:end="315:44"><name pos:start="315:43" pos:end="315:44">dc</name></expr></argument>, <argument pos:start="315:47" pos:end="315:53"><expr pos:start="315:47" pos:end="315:53"><name pos:start="315:47" pos:end="315:53">CALLX_S</name></expr></argument>, <argument pos:start="315:56" pos:end="315:67"><expr pos:start="315:56" pos:end="315:67"><name pos:start="315:56" pos:end="315:62">CALLX_N</name> <operator pos:start="315:64" pos:end="315:65">&lt;&lt;</operator> <literal type="number" pos:start="315:67" pos:end="315:67">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="317:25" pos:end="363:25">switch <condition pos:start="317:32" pos:end="317:40">(<expr pos:start="317:33" pos:end="317:39"><name pos:start="317:33" pos:end="317:39">CALLX_N</name></expr>)</condition> <block pos:start="317:42" pos:end="363:25">{<block_content pos:start="319:25" pos:end="361:34">

                        <case pos:start="319:25" pos:end="319:31">case <expr pos:start="319:30" pos:end="319:30"><literal type="number" pos:start="319:30" pos:end="319:30">0</literal></expr>:</case> <comment type="block" pos:start="319:33" pos:end="319:42">/*CALLX0*/</comment>

                            <block pos:start="321:29" pos:end="333:29">{<block_content pos:start="323:33" pos:end="331:51">

                                <decl_stmt pos:start="323:33" pos:end="323:66"><decl pos:start="323:33" pos:end="323:65"><type pos:start="323:33" pos:end="323:40"><name pos:start="323:33" pos:end="323:40">TCGv_i32</name></type> <name pos:start="323:42" pos:end="323:44">tmp</name> <init pos:start="323:46" pos:end="323:65">= <expr pos:start="323:48" pos:end="323:65"><call pos:start="323:48" pos:end="323:65"><name pos:start="323:48" pos:end="323:63">tcg_temp_new_i32</name><argument_list pos:start="323:64" pos:end="323:65">()</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt pos:start="325:33" pos:end="325:69"><expr pos:start="325:33" pos:end="325:68"><call pos:start="325:33" pos:end="325:68"><name pos:start="325:33" pos:end="325:47">tcg_gen_mov_i32</name><argument_list pos:start="325:48" pos:end="325:68">(<argument pos:start="325:49" pos:end="325:51"><expr pos:start="325:49" pos:end="325:51"><name pos:start="325:49" pos:end="325:51">tmp</name></expr></argument>, <argument pos:start="325:54" pos:end="325:67"><expr pos:start="325:54" pos:end="325:67"><name pos:start="325:54" pos:end="325:67"><name pos:start="325:54" pos:end="325:58">cpu_R</name><index pos:start="325:59" pos:end="325:67">[<expr pos:start="325:60" pos:end="325:66"><name pos:start="325:60" pos:end="325:66">CALLX_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="327:33" pos:end="327:72"><expr pos:start="327:33" pos:end="327:71"><call pos:start="327:33" pos:end="327:71"><name pos:start="327:33" pos:end="327:48">tcg_gen_movi_i32</name><argument_list pos:start="327:49" pos:end="327:71">(<argument pos:start="327:50" pos:end="327:57"><expr pos:start="327:50" pos:end="327:57"><name pos:start="327:50" pos:end="327:57"><name pos:start="327:50" pos:end="327:54">cpu_R</name><index pos:start="327:55" pos:end="327:57">[<expr pos:start="327:56" pos:end="327:56"><literal type="number" pos:start="327:56" pos:end="327:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="327:60" pos:end="327:70"><expr pos:start="327:60" pos:end="327:70"><name pos:start="327:60" pos:end="327:70"><name pos:start="327:60" pos:end="327:61">dc</name><operator pos:start="327:62" pos:end="327:63">-&gt;</operator><name pos:start="327:64" pos:end="327:70">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="329:33" pos:end="329:50"><expr pos:start="329:33" pos:end="329:49"><call pos:start="329:33" pos:end="329:49"><name pos:start="329:33" pos:end="329:40">gen_jump</name><argument_list pos:start="329:41" pos:end="329:49">(<argument pos:start="329:42" pos:end="329:43"><expr pos:start="329:42" pos:end="329:43"><name pos:start="329:42" pos:end="329:43">dc</name></expr></argument>, <argument pos:start="329:46" pos:end="329:48"><expr pos:start="329:46" pos:end="329:48"><name pos:start="329:46" pos:end="329:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="331:33" pos:end="331:51"><expr pos:start="331:33" pos:end="331:50"><call pos:start="331:33" pos:end="331:50"><name pos:start="331:33" pos:end="331:45">tcg_temp_free</name><argument_list pos:start="331:46" pos:end="331:50">(<argument pos:start="331:47" pos:end="331:49"><expr pos:start="331:47" pos:end="331:49"><name pos:start="331:47" pos:end="331:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block>

                            <break pos:start="335:29" pos:end="335:34">break;</break>



                        <case pos:start="339:25" pos:end="339:31">case <expr pos:start="339:30" pos:end="339:30"><literal type="number" pos:start="339:30" pos:end="339:30">1</literal></expr>:</case> <comment type="block" pos:start="339:33" pos:end="339:43">/*CALLX4w*/</comment>

                        <case pos:start="341:25" pos:end="341:31">case <expr pos:start="341:30" pos:end="341:30"><literal type="number" pos:start="341:30" pos:end="341:30">2</literal></expr>:</case> <comment type="block" pos:start="341:33" pos:end="341:43">/*CALLX8w*/</comment>

                        <case pos:start="343:25" pos:end="343:31">case <expr pos:start="343:30" pos:end="343:30"><literal type="number" pos:start="343:30" pos:end="343:30">3</literal></expr>:</case> <comment type="block" pos:start="343:33" pos:end="343:44">/*CALLX12w*/</comment>

                            <expr_stmt pos:start="345:29" pos:end="345:72"><expr pos:start="345:29" pos:end="345:71"><call pos:start="345:29" pos:end="345:71"><name pos:start="345:29" pos:end="345:38">HAS_OPTION</name><argument_list pos:start="345:39" pos:end="345:71">(<argument pos:start="345:40" pos:end="345:70"><expr pos:start="345:40" pos:end="345:70"><name pos:start="345:40" pos:end="345:70">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <block pos:start="347:29" pos:end="359:29">{<block_content pos:start="349:33" pos:end="357:51">

                                <decl_stmt pos:start="349:33" pos:end="349:66"><decl pos:start="349:33" pos:end="349:65"><type pos:start="349:33" pos:end="349:40"><name pos:start="349:33" pos:end="349:40">TCGv_i32</name></type> <name pos:start="349:42" pos:end="349:44">tmp</name> <init pos:start="349:46" pos:end="349:65">= <expr pos:start="349:48" pos:end="349:65"><call pos:start="349:48" pos:end="349:65"><name pos:start="349:48" pos:end="349:63">tcg_temp_new_i32</name><argument_list pos:start="349:64" pos:end="349:65">()</argument_list></call></expr></init></decl>;</decl_stmt>



                                <expr_stmt pos:start="353:33" pos:end="353:69"><expr pos:start="353:33" pos:end="353:68"><call pos:start="353:33" pos:end="353:68"><name pos:start="353:33" pos:end="353:47">tcg_gen_mov_i32</name><argument_list pos:start="353:48" pos:end="353:68">(<argument pos:start="353:49" pos:end="353:51"><expr pos:start="353:49" pos:end="353:51"><name pos:start="353:49" pos:end="353:51">tmp</name></expr></argument>, <argument pos:start="353:54" pos:end="353:67"><expr pos:start="353:54" pos:end="353:67"><name pos:start="353:54" pos:end="353:67"><name pos:start="353:54" pos:end="353:58">cpu_R</name><index pos:start="353:59" pos:end="353:67">[<expr pos:start="353:60" pos:end="353:66"><name pos:start="353:60" pos:end="353:66">CALLX_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="355:33" pos:end="355:60"><expr pos:start="355:33" pos:end="355:59"><call pos:start="355:33" pos:end="355:59"><name pos:start="355:33" pos:end="355:41">gen_callw</name><argument_list pos:start="355:42" pos:end="355:59">(<argument pos:start="355:43" pos:end="355:44"><expr pos:start="355:43" pos:end="355:44"><name pos:start="355:43" pos:end="355:44">dc</name></expr></argument>, <argument pos:start="355:47" pos:end="355:53"><expr pos:start="355:47" pos:end="355:53"><name pos:start="355:47" pos:end="355:53">CALLX_N</name></expr></argument>, <argument pos:start="355:56" pos:end="355:58"><expr pos:start="355:56" pos:end="355:58"><name pos:start="355:56" pos:end="355:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="357:33" pos:end="357:51"><expr pos:start="357:33" pos:end="357:50"><call pos:start="357:33" pos:end="357:50"><name pos:start="357:33" pos:end="357:45">tcg_temp_free</name><argument_list pos:start="357:46" pos:end="357:50">(<argument pos:start="357:47" pos:end="357:49"><expr pos:start="357:47" pos:end="357:49"><name pos:start="357:47" pos:end="357:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block>

                            <break pos:start="361:29" pos:end="361:34">break;</break>

                        </block_content>}</block></switch>

                        <break pos:start="365:25" pos:end="365:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="369:21" pos:end="369:26">break;</break>



                <case pos:start="373:17" pos:end="373:23">case <expr pos:start="373:22" pos:end="373:22"><literal type="number" pos:start="373:22" pos:end="373:22">1</literal></expr>:</case> <comment type="block" pos:start="373:25" pos:end="373:34">/*MOVSPw*/</comment>

                    <expr_stmt pos:start="375:21" pos:end="375:64"><expr pos:start="375:21" pos:end="375:63"><call pos:start="375:21" pos:end="375:63"><name pos:start="375:21" pos:end="375:30">HAS_OPTION</name><argument_list pos:start="375:31" pos:end="375:63">(<argument pos:start="375:32" pos:end="375:62"><expr pos:start="375:32" pos:end="375:62"><name pos:start="375:32" pos:end="375:62">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="377:21" pos:end="377:56"><expr pos:start="377:21" pos:end="377:55"><call pos:start="377:21" pos:end="377:55"><name pos:start="377:21" pos:end="377:37">gen_window_check2</name><argument_list pos:start="377:38" pos:end="377:55">(<argument pos:start="377:39" pos:end="377:40"><expr pos:start="377:39" pos:end="377:40"><name pos:start="377:39" pos:end="377:40">dc</name></expr></argument>, <argument pos:start="377:43" pos:end="377:47"><expr pos:start="377:43" pos:end="377:47"><name pos:start="377:43" pos:end="377:47">RRR_T</name></expr></argument>, <argument pos:start="377:50" pos:end="377:54"><expr pos:start="377:50" pos:end="377:54"><name pos:start="377:50" pos:end="377:54">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="379:21" pos:end="391:21">{<block_content pos:start="381:25" pos:end="389:42">

                        <decl_stmt pos:start="381:25" pos:end="381:60"><decl pos:start="381:25" pos:end="381:59"><type pos:start="381:25" pos:end="381:32"><name pos:start="381:25" pos:end="381:32">TCGv_i32</name></type> <name pos:start="381:34" pos:end="381:35">pc</name> <init pos:start="381:37" pos:end="381:59">= <expr pos:start="381:39" pos:end="381:59"><call pos:start="381:39" pos:end="381:59"><name pos:start="381:39" pos:end="381:51">tcg_const_i32</name><argument_list pos:start="381:52" pos:end="381:59">(<argument pos:start="381:53" pos:end="381:58"><expr pos:start="381:53" pos:end="381:58"><name pos:start="381:53" pos:end="381:58"><name pos:start="381:53" pos:end="381:54">dc</name><operator pos:start="381:55" pos:end="381:56">-&gt;</operator><name pos:start="381:57" pos:end="381:58">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="383:25" pos:end="383:47"><expr pos:start="383:25" pos:end="383:46"><call pos:start="383:25" pos:end="383:46"><name pos:start="383:25" pos:end="383:42">gen_advance_ccount</name><argument_list pos:start="383:43" pos:end="383:46">(<argument pos:start="383:44" pos:end="383:45"><expr pos:start="383:44" pos:end="383:45"><name pos:start="383:44" pos:end="383:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="385:25" pos:end="385:45"><expr pos:start="385:25" pos:end="385:44"><call pos:start="385:25" pos:end="385:44"><name pos:start="385:25" pos:end="385:40">gen_helper_movsp</name><argument_list pos:start="385:41" pos:end="385:44">(<argument pos:start="385:42" pos:end="385:43"><expr pos:start="385:42" pos:end="385:43"><name pos:start="385:42" pos:end="385:43">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="387:25" pos:end="387:68"><expr pos:start="387:25" pos:end="387:67"><call pos:start="387:25" pos:end="387:67"><name pos:start="387:25" pos:end="387:39">tcg_gen_mov_i32</name><argument_list pos:start="387:40" pos:end="387:67">(<argument pos:start="387:41" pos:end="387:52"><expr pos:start="387:41" pos:end="387:52"><name pos:start="387:41" pos:end="387:52"><name pos:start="387:41" pos:end="387:45">cpu_R</name><index pos:start="387:46" pos:end="387:52">[<expr pos:start="387:47" pos:end="387:51"><name pos:start="387:47" pos:end="387:51">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="387:55" pos:end="387:66"><expr pos:start="387:55" pos:end="387:66"><name pos:start="387:55" pos:end="387:66"><name pos:start="387:55" pos:end="387:59">cpu_R</name><index pos:start="387:60" pos:end="387:66">[<expr pos:start="387:61" pos:end="387:65"><name pos:start="387:61" pos:end="387:65">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="389:25" pos:end="389:42"><expr pos:start="389:25" pos:end="389:41"><call pos:start="389:25" pos:end="389:41"><name pos:start="389:25" pos:end="389:37">tcg_temp_free</name><argument_list pos:start="389:38" pos:end="389:41">(<argument pos:start="389:39" pos:end="389:40"><expr pos:start="389:39" pos:end="389:40"><name pos:start="389:39" pos:end="389:40">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="393:21" pos:end="393:26">break;</break>



                <case pos:start="397:17" pos:end="397:23">case <expr pos:start="397:22" pos:end="397:22"><literal type="number" pos:start="397:22" pos:end="397:22">2</literal></expr>:</case> <comment type="block" pos:start="397:25" pos:end="397:32">/*SYNC*/</comment>

                    <switch pos:start="399:21" pos:end="457:21">switch <condition pos:start="399:28" pos:end="399:34">(<expr pos:start="399:29" pos:end="399:33"><name pos:start="399:29" pos:end="399:33">RRR_T</name></expr>)</condition> <block pos:start="399:36" pos:end="457:21">{<block_content pos:start="401:21" pos:end="455:30">

                    <case pos:start="401:21" pos:end="401:27">case <expr pos:start="401:26" pos:end="401:26"><literal type="number" pos:start="401:26" pos:end="401:26">0</literal></expr>:</case> <comment type="block" pos:start="401:29" pos:end="401:37">/*ISYNC*/</comment>

                        <break pos:start="403:25" pos:end="403:30">break;</break>



                    <case pos:start="407:21" pos:end="407:27">case <expr pos:start="407:26" pos:end="407:26"><literal type="number" pos:start="407:26" pos:end="407:26">1</literal></expr>:</case> <comment type="block" pos:start="407:29" pos:end="407:37">/*RSYNC*/</comment>

                        <break pos:start="409:25" pos:end="409:30">break;</break>



                    <case pos:start="413:21" pos:end="413:27">case <expr pos:start="413:26" pos:end="413:26"><literal type="number" pos:start="413:26" pos:end="413:26">2</literal></expr>:</case> <comment type="block" pos:start="413:29" pos:end="413:37">/*ESYNC*/</comment>

                        <break pos:start="415:25" pos:end="415:30">break;</break>



                    <case pos:start="419:21" pos:end="419:27">case <expr pos:start="419:26" pos:end="419:26"><literal type="number" pos:start="419:26" pos:end="419:26">3</literal></expr>:</case> <comment type="block" pos:start="419:29" pos:end="419:37">/*DSYNC*/</comment>

                        <break pos:start="421:25" pos:end="421:30">break;</break>



                    <case pos:start="425:21" pos:end="425:27">case <expr pos:start="425:26" pos:end="425:26"><literal type="number" pos:start="425:26" pos:end="425:26">8</literal></expr>:</case> <comment type="block" pos:start="425:29" pos:end="425:36">/*EXCW*/</comment>

                        <expr_stmt pos:start="427:25" pos:end="427:60"><expr pos:start="427:25" pos:end="427:59"><call pos:start="427:25" pos:end="427:59"><name pos:start="427:25" pos:end="427:34">HAS_OPTION</name><argument_list pos:start="427:35" pos:end="427:59">(<argument pos:start="427:36" pos:end="427:58"><expr pos:start="427:36" pos:end="427:58"><name pos:start="427:36" pos:end="427:58">XTENSA_OPTION_EXCEPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="429:25" pos:end="429:30">break;</break>



                    <case pos:start="433:21" pos:end="433:28">case <expr pos:start="433:26" pos:end="433:27"><literal type="number" pos:start="433:26" pos:end="433:27">12</literal></expr>:</case> <comment type="block" pos:start="433:30" pos:end="433:37">/*MEMW*/</comment>

                        <break pos:start="435:25" pos:end="435:30">break;</break>



                    <case pos:start="439:21" pos:end="439:28">case <expr pos:start="439:26" pos:end="439:27"><literal type="number" pos:start="439:26" pos:end="439:27">13</literal></expr>:</case> <comment type="block" pos:start="439:30" pos:end="439:37">/*EXTW*/</comment>

                        <break pos:start="441:25" pos:end="441:30">break;</break>



                    <case pos:start="445:21" pos:end="445:28">case <expr pos:start="445:26" pos:end="445:27"><literal type="number" pos:start="445:26" pos:end="445:27">15</literal></expr>:</case> <comment type="block" pos:start="445:30" pos:end="445:36">/*NOP*/</comment>

                        <break pos:start="447:25" pos:end="447:30">break;</break>



                    <default pos:start="451:21" pos:end="451:28">default:</default> <comment type="block" pos:start="451:30" pos:end="451:41">/*reserved*/</comment>

                        <expr_stmt pos:start="453:25" pos:end="453:35"><expr pos:start="453:25" pos:end="453:34"><call pos:start="453:25" pos:end="453:34"><name pos:start="453:25" pos:end="453:32">RESERVED</name><argument_list pos:start="453:33" pos:end="453:34">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="455:25" pos:end="455:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="459:21" pos:end="459:26">break;</break>



                <case pos:start="463:17" pos:end="463:23">case <expr pos:start="463:22" pos:end="463:22"><literal type="number" pos:start="463:22" pos:end="463:22">3</literal></expr>:</case> <comment type="block" pos:start="463:25" pos:end="463:33">/*RFEIx*/</comment>

                    <switch pos:start="465:21" pos:end="617:21">switch <condition pos:start="465:28" pos:end="465:34">(<expr pos:start="465:29" pos:end="465:33"><name pos:start="465:29" pos:end="465:33">RRR_T</name></expr>)</condition> <block pos:start="465:36" pos:end="617:21">{<block_content pos:start="467:21" pos:end="613:30">

                    <case pos:start="467:21" pos:end="467:27">case <expr pos:start="467:26" pos:end="467:26"><literal type="number" pos:start="467:26" pos:end="467:26">0</literal></expr>:</case> <comment type="block" pos:start="467:29" pos:end="467:37">/*RFETx*/</comment>

                        <expr_stmt pos:start="469:25" pos:end="469:60"><expr pos:start="469:25" pos:end="469:59"><call pos:start="469:25" pos:end="469:59"><name pos:start="469:25" pos:end="469:34">HAS_OPTION</name><argument_list pos:start="469:35" pos:end="469:59">(<argument pos:start="469:36" pos:end="469:58"><expr pos:start="469:36" pos:end="469:58"><name pos:start="469:36" pos:end="469:58">XTENSA_OPTION_EXCEPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="471:25" pos:end="567:25">switch <condition pos:start="471:32" pos:end="471:38">(<expr pos:start="471:33" pos:end="471:37"><name pos:start="471:33" pos:end="471:37">RRR_S</name></expr>)</condition> <block pos:start="471:40" pos:end="567:25">{<block_content pos:start="473:25" pos:end="565:34">

                        <case pos:start="473:25" pos:end="473:31">case <expr pos:start="473:30" pos:end="473:30"><literal type="number" pos:start="473:30" pos:end="473:30">0</literal></expr>:</case> <comment type="block" pos:start="473:33" pos:end="473:40">/*RFEx*/</comment>

                            <expr_stmt pos:start="475:29" pos:end="475:52"><expr pos:start="475:29" pos:end="475:51"><call pos:start="475:29" pos:end="475:51"><name pos:start="475:29" pos:end="475:47">gen_check_privilege</name><argument_list pos:start="475:48" pos:end="475:51">(<argument pos:start="475:49" pos:end="475:50"><expr pos:start="475:49" pos:end="475:50"><name pos:start="475:49" pos:end="475:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="477:29" pos:end="477:79"><expr pos:start="477:29" pos:end="477:78"><call pos:start="477:29" pos:end="477:78"><name pos:start="477:29" pos:end="477:44">tcg_gen_andi_i32</name><argument_list pos:start="477:45" pos:end="477:78">(<argument pos:start="477:46" pos:end="477:55"><expr pos:start="477:46" pos:end="477:55"><name pos:start="477:46" pos:end="477:55"><name pos:start="477:46" pos:end="477:51">cpu_SR</name><index pos:start="477:52" pos:end="477:55">[<expr pos:start="477:53" pos:end="477:54"><name pos:start="477:53" pos:end="477:54">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="477:58" pos:end="477:67"><expr pos:start="477:58" pos:end="477:67"><name pos:start="477:58" pos:end="477:67"><name pos:start="477:58" pos:end="477:63">cpu_SR</name><index pos:start="477:64" pos:end="477:67">[<expr pos:start="477:65" pos:end="477:66"><name pos:start="477:65" pos:end="477:66">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="477:70" pos:end="477:77"><expr pos:start="477:70" pos:end="477:77"><operator pos:start="477:70" pos:end="477:70">~</operator><name pos:start="477:71" pos:end="477:77">PS_EXCM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="479:29" pos:end="479:65"><expr pos:start="479:29" pos:end="479:64"><call pos:start="479:29" pos:end="479:64"><name pos:start="479:29" pos:end="479:55">gen_helper_check_interrupts</name><argument_list pos:start="479:56" pos:end="479:64">(<argument pos:start="479:57" pos:end="479:63"><expr pos:start="479:57" pos:end="479:63"><name pos:start="479:57" pos:end="479:63">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="481:29" pos:end="481:55"><expr pos:start="481:29" pos:end="481:54"><call pos:start="481:29" pos:end="481:54"><name pos:start="481:29" pos:end="481:36">gen_jump</name><argument_list pos:start="481:37" pos:end="481:54">(<argument pos:start="481:38" pos:end="481:39"><expr pos:start="481:38" pos:end="481:39"><name pos:start="481:38" pos:end="481:39">dc</name></expr></argument>, <argument pos:start="481:42" pos:end="481:53"><expr pos:start="481:42" pos:end="481:53"><name pos:start="481:42" pos:end="481:53"><name pos:start="481:42" pos:end="481:47">cpu_SR</name><index pos:start="481:48" pos:end="481:53">[<expr pos:start="481:49" pos:end="481:52"><name pos:start="481:49" pos:end="481:52">EPC1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="483:29" pos:end="483:34">break;</break>



                        <case pos:start="487:25" pos:end="487:31">case <expr pos:start="487:30" pos:end="487:30"><literal type="number" pos:start="487:30" pos:end="487:30">1</literal></expr>:</case> <comment type="block" pos:start="487:33" pos:end="487:41">/*RFUEx*/</comment>

                            <expr_stmt pos:start="489:29" pos:end="489:39"><expr pos:start="489:29" pos:end="489:38"><call pos:start="489:29" pos:end="489:38"><name pos:start="489:29" pos:end="489:36">RESERVED</name><argument_list pos:start="489:37" pos:end="489:38">()</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="491:29" pos:end="491:34">break;</break>



                        <case pos:start="495:25" pos:end="495:31">case <expr pos:start="495:30" pos:end="495:30"><literal type="number" pos:start="495:30" pos:end="495:30">2</literal></expr>:</case> <comment type="block" pos:start="495:33" pos:end="495:41">/*RFDEx*/</comment>

                            <expr_stmt pos:start="497:29" pos:end="497:52"><expr pos:start="497:29" pos:end="497:51"><call pos:start="497:29" pos:end="497:51"><name pos:start="497:29" pos:end="497:47">gen_check_privilege</name><argument_list pos:start="497:48" pos:end="497:51">(<argument pos:start="497:49" pos:end="497:50"><expr pos:start="497:49" pos:end="497:50"><name pos:start="497:49" pos:end="497:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="499:29" pos:end="501:70"><expr pos:start="499:29" pos:end="501:69"><call pos:start="499:29" pos:end="501:69"><name pos:start="499:29" pos:end="499:36">gen_jump</name><argument_list pos:start="499:37" pos:end="501:69">(<argument pos:start="499:38" pos:end="499:39"><expr pos:start="499:38" pos:end="499:39"><name pos:start="499:38" pos:end="499:39">dc</name></expr></argument>, <argument pos:start="499:42" pos:end="501:68"><expr pos:start="499:42" pos:end="501:68"><name pos:start="499:42" pos:end="501:68"><name pos:start="499:42" pos:end="499:47">cpu_SR</name><index pos:start="499:48" pos:end="501:68">[

                                    <expr pos:start="501:37" pos:end="501:67"><ternary pos:start="501:37" pos:end="501:67"><condition pos:start="501:37" pos:end="501:55"><expr pos:start="501:37" pos:end="501:53"><name pos:start="501:37" pos:end="501:53"><name pos:start="501:37" pos:end="501:38">dc</name><operator pos:start="501:39" pos:end="501:40">-&gt;</operator><name pos:start="501:41" pos:end="501:46">config</name><operator pos:start="501:47" pos:end="501:48">-&gt;</operator><name pos:start="501:49" pos:end="501:53">ndepc</name></name></expr> ?</condition><then pos:start="501:57" pos:end="501:60"> <expr pos:start="501:57" pos:end="501:60"><name pos:start="501:57" pos:end="501:60">DEPC</name></expr> </then><else pos:start="501:62" pos:end="501:67">: <expr pos:start="501:64" pos:end="501:67"><name pos:start="501:64" pos:end="501:67">EPC1</name></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="503:29" pos:end="503:34">break;</break>



                        <case pos:start="507:25" pos:end="507:31">case <expr pos:start="507:30" pos:end="507:30"><literal type="number" pos:start="507:30" pos:end="507:30">4</literal></expr>:</case> <comment type="block" pos:start="507:33" pos:end="507:41">/*RFWOw*/</comment>

                        <case pos:start="509:25" pos:end="509:31">case <expr pos:start="509:30" pos:end="509:30"><literal type="number" pos:start="509:30" pos:end="509:30">5</literal></expr>:</case> <comment type="block" pos:start="509:33" pos:end="509:41">/*RFWUw*/</comment>

                            <expr_stmt pos:start="511:29" pos:end="511:72"><expr pos:start="511:29" pos:end="511:71"><call pos:start="511:29" pos:end="511:71"><name pos:start="511:29" pos:end="511:38">HAS_OPTION</name><argument_list pos:start="511:39" pos:end="511:71">(<argument pos:start="511:40" pos:end="511:70"><expr pos:start="511:40" pos:end="511:70"><name pos:start="511:40" pos:end="511:70">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="513:29" pos:end="513:52"><expr pos:start="513:29" pos:end="513:51"><call pos:start="513:29" pos:end="513:51"><name pos:start="513:29" pos:end="513:47">gen_check_privilege</name><argument_list pos:start="513:48" pos:end="513:51">(<argument pos:start="513:49" pos:end="513:50"><expr pos:start="513:49" pos:end="513:50"><name pos:start="513:49" pos:end="513:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <block pos:start="515:29" pos:end="555:29">{<block_content pos:start="517:33" pos:end="553:51">

                                <decl_stmt pos:start="517:33" pos:end="517:64"><decl pos:start="517:33" pos:end="517:63"><type pos:start="517:33" pos:end="517:40"><name pos:start="517:33" pos:end="517:40">TCGv_i32</name></type> <name pos:start="517:42" pos:end="517:44">tmp</name> <init pos:start="517:46" pos:end="517:63">= <expr pos:start="517:48" pos:end="517:63"><call pos:start="517:48" pos:end="517:63"><name pos:start="517:48" pos:end="517:60">tcg_const_i32</name><argument_list pos:start="517:61" pos:end="517:63">(<argument pos:start="517:62" pos:end="517:62"><expr pos:start="517:62" pos:end="517:62"><literal type="number" pos:start="517:62" pos:end="517:62">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                                <expr_stmt pos:start="521:33" pos:end="523:74"><expr pos:start="521:33" pos:end="523:73"><call pos:start="521:33" pos:end="523:73"><name pos:start="521:33" pos:end="521:48">tcg_gen_andi_i32</name><argument_list pos:start="521:49" pos:end="523:73">(

                                        <argument pos:start="523:41" pos:end="523:50"><expr pos:start="523:41" pos:end="523:50"><name pos:start="523:41" pos:end="523:50"><name pos:start="523:41" pos:end="523:46">cpu_SR</name><index pos:start="523:47" pos:end="523:50">[<expr pos:start="523:48" pos:end="523:49"><name pos:start="523:48" pos:end="523:49">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="523:53" pos:end="523:62"><expr pos:start="523:53" pos:end="523:62"><name pos:start="523:53" pos:end="523:62"><name pos:start="523:53" pos:end="523:58">cpu_SR</name><index pos:start="523:59" pos:end="523:62">[<expr pos:start="523:60" pos:end="523:61"><name pos:start="523:60" pos:end="523:61">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="523:65" pos:end="523:72"><expr pos:start="523:65" pos:end="523:72"><operator pos:start="523:65" pos:end="523:65">~</operator><name pos:start="523:66" pos:end="523:72">PS_EXCM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="525:33" pos:end="525:79"><expr pos:start="525:33" pos:end="525:78"><call pos:start="525:33" pos:end="525:78"><name pos:start="525:33" pos:end="525:47">tcg_gen_shl_i32</name><argument_list pos:start="525:48" pos:end="525:78">(<argument pos:start="525:49" pos:end="525:51"><expr pos:start="525:49" pos:end="525:51"><name pos:start="525:49" pos:end="525:51">tmp</name></expr></argument>, <argument pos:start="525:54" pos:end="525:56"><expr pos:start="525:54" pos:end="525:56"><name pos:start="525:54" pos:end="525:56">tmp</name></expr></argument>, <argument pos:start="525:59" pos:end="525:77"><expr pos:start="525:59" pos:end="525:77"><name pos:start="525:59" pos:end="525:77"><name pos:start="525:59" pos:end="525:64">cpu_SR</name><index pos:start="525:65" pos:end="525:77">[<expr pos:start="525:66" pos:end="525:76"><name pos:start="525:66" pos:end="525:76">WINDOW_BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                                <if_stmt pos:start="529:33" pos:end="541:33"><if pos:start="529:33" pos:end="535:33">if <condition pos:start="529:36" pos:end="529:47">(<expr pos:start="529:37" pos:end="529:46"><name pos:start="529:37" pos:end="529:41">RRR_S</name> <operator pos:start="529:43" pos:end="529:44">==</operator> <literal type="number" pos:start="529:46" pos:end="529:46">4</literal></expr>)</condition> <block pos:start="529:49" pos:end="535:33">{<block_content pos:start="531:37" pos:end="533:71">

                                    <expr_stmt pos:start="531:37" pos:end="533:71"><expr pos:start="531:37" pos:end="533:70"><call pos:start="531:37" pos:end="533:70"><name pos:start="531:37" pos:end="531:52">tcg_gen_andc_i32</name><argument_list pos:start="531:53" pos:end="533:70">(<argument pos:start="531:54" pos:end="531:73"><expr pos:start="531:54" pos:end="531:73"><name pos:start="531:54" pos:end="531:73"><name pos:start="531:54" pos:end="531:59">cpu_SR</name><index pos:start="531:60" pos:end="531:73">[<expr pos:start="531:61" pos:end="531:72"><name pos:start="531:61" pos:end="531:72">WINDOW_START</name></expr>]</index></name></expr></argument>,

                                            <argument pos:start="533:45" pos:end="533:64"><expr pos:start="533:45" pos:end="533:64"><name pos:start="533:45" pos:end="533:64"><name pos:start="533:45" pos:end="533:50">cpu_SR</name><index pos:start="533:51" pos:end="533:64">[<expr pos:start="533:52" pos:end="533:63"><name pos:start="533:52" pos:end="533:63">WINDOW_START</name></expr>]</index></name></expr></argument>, <argument pos:start="533:67" pos:end="533:69"><expr pos:start="533:67" pos:end="533:69"><name pos:start="533:67" pos:end="533:69">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="535:35" pos:end="541:33">else <block pos:start="535:40" pos:end="541:33">{<block_content pos:start="537:37" pos:end="539:71">

                                    <expr_stmt pos:start="537:37" pos:end="539:71"><expr pos:start="537:37" pos:end="539:70"><call pos:start="537:37" pos:end="539:70"><name pos:start="537:37" pos:end="537:50">tcg_gen_or_i32</name><argument_list pos:start="537:51" pos:end="539:70">(<argument pos:start="537:52" pos:end="537:71"><expr pos:start="537:52" pos:end="537:71"><name pos:start="537:52" pos:end="537:71"><name pos:start="537:52" pos:end="537:57">cpu_SR</name><index pos:start="537:58" pos:end="537:71">[<expr pos:start="537:59" pos:end="537:70"><name pos:start="537:59" pos:end="537:70">WINDOW_START</name></expr>]</index></name></expr></argument>,

                                            <argument pos:start="539:45" pos:end="539:64"><expr pos:start="539:45" pos:end="539:64"><name pos:start="539:45" pos:end="539:64"><name pos:start="539:45" pos:end="539:50">cpu_SR</name><index pos:start="539:51" pos:end="539:64">[<expr pos:start="539:52" pos:end="539:63"><name pos:start="539:52" pos:end="539:63">WINDOW_START</name></expr>]</index></name></expr></argument>, <argument pos:start="539:67" pos:end="539:69"><expr pos:start="539:67" pos:end="539:69"><name pos:start="539:67" pos:end="539:69">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></else></if_stmt>



                                <expr_stmt pos:start="545:33" pos:end="545:57"><expr pos:start="545:33" pos:end="545:56"><call pos:start="545:33" pos:end="545:56"><name pos:start="545:33" pos:end="545:54">gen_helper_restore_owb</name><argument_list pos:start="545:55" pos:end="545:56">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="547:33" pos:end="547:69"><expr pos:start="547:33" pos:end="547:68"><call pos:start="547:33" pos:end="547:68"><name pos:start="547:33" pos:end="547:59">gen_helper_check_interrupts</name><argument_list pos:start="547:60" pos:end="547:68">(<argument pos:start="547:61" pos:end="547:67"><expr pos:start="547:61" pos:end="547:67"><name pos:start="547:61" pos:end="547:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="549:33" pos:end="549:59"><expr pos:start="549:33" pos:end="549:58"><call pos:start="549:33" pos:end="549:58"><name pos:start="549:33" pos:end="549:40">gen_jump</name><argument_list pos:start="549:41" pos:end="549:58">(<argument pos:start="549:42" pos:end="549:43"><expr pos:start="549:42" pos:end="549:43"><name pos:start="549:42" pos:end="549:43">dc</name></expr></argument>, <argument pos:start="549:46" pos:end="549:57"><expr pos:start="549:46" pos:end="549:57"><name pos:start="549:46" pos:end="549:57"><name pos:start="549:46" pos:end="549:51">cpu_SR</name><index pos:start="549:52" pos:end="549:57">[<expr pos:start="549:53" pos:end="549:56"><name pos:start="549:53" pos:end="549:56">EPC1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                                <expr_stmt pos:start="553:33" pos:end="553:51"><expr pos:start="553:33" pos:end="553:50"><call pos:start="553:33" pos:end="553:50"><name pos:start="553:33" pos:end="553:45">tcg_temp_free</name><argument_list pos:start="553:46" pos:end="553:50">(<argument pos:start="553:47" pos:end="553:49"><expr pos:start="553:47" pos:end="553:49"><name pos:start="553:47" pos:end="553:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block>

                            <break pos:start="557:29" pos:end="557:34">break;</break>



                        <default pos:start="561:25" pos:end="561:32">default:</default> <comment type="block" pos:start="561:34" pos:end="561:45">/*reserved*/</comment>

                            <expr_stmt pos:start="563:29" pos:end="563:39"><expr pos:start="563:29" pos:end="563:38"><call pos:start="563:29" pos:end="563:38"><name pos:start="563:29" pos:end="563:36">RESERVED</name><argument_list pos:start="563:37" pos:end="563:38">()</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="565:29" pos:end="565:34">break;</break>

                        </block_content>}</block></switch>

                        <break pos:start="569:25" pos:end="569:30">break;</break>



                    <case pos:start="573:21" pos:end="573:27">case <expr pos:start="573:26" pos:end="573:26"><literal type="number" pos:start="573:26" pos:end="573:26">1</literal></expr>:</case> <comment type="block" pos:start="573:29" pos:end="573:36">/*RFIx*/</comment>

                        <expr_stmt pos:start="575:25" pos:end="575:74"><expr pos:start="575:25" pos:end="575:73"><call pos:start="575:25" pos:end="575:73"><name pos:start="575:25" pos:end="575:34">HAS_OPTION</name><argument_list pos:start="575:35" pos:end="575:73">(<argument pos:start="575:36" pos:end="575:72"><expr pos:start="575:36" pos:end="575:72"><name pos:start="575:36" pos:end="575:72">XTENSA_OPTION_HIGH_PRIORITY_INTERRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="577:25" pos:end="595:25"><if pos:start="577:25" pos:end="589:25">if <condition pos:start="577:28" pos:end="577:70">(<expr pos:start="577:29" pos:end="577:69"><name pos:start="577:29" pos:end="577:33">RRR_S</name> <operator pos:start="577:35" pos:end="577:36">&gt;=</operator> <literal type="number" pos:start="577:38" pos:end="577:38">2</literal> <operator pos:start="577:40" pos:end="577:41">&amp;&amp;</operator> <name pos:start="577:43" pos:end="577:47">RRR_S</name> <operator pos:start="577:49" pos:end="577:50">&lt;=</operator> <name pos:start="577:52" pos:end="577:69"><name pos:start="577:52" pos:end="577:53">dc</name><operator pos:start="577:54" pos:end="577:55">-&gt;</operator><name pos:start="577:56" pos:end="577:61">config</name><operator pos:start="577:62" pos:end="577:63">-&gt;</operator><name pos:start="577:64" pos:end="577:69">nlevel</name></name></expr>)</condition> <block pos:start="577:72" pos:end="589:25">{<block_content pos:start="579:29" pos:end="587:67">

                            <expr_stmt pos:start="579:29" pos:end="579:52"><expr pos:start="579:29" pos:end="579:51"><call pos:start="579:29" pos:end="579:51"><name pos:start="579:29" pos:end="579:47">gen_check_privilege</name><argument_list pos:start="579:48" pos:end="579:51">(<argument pos:start="579:49" pos:end="579:50"><expr pos:start="579:49" pos:end="579:50"><name pos:start="579:49" pos:end="579:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="581:29" pos:end="583:62"><expr pos:start="581:29" pos:end="583:61"><call pos:start="581:29" pos:end="583:61"><name pos:start="581:29" pos:end="581:43">tcg_gen_mov_i32</name><argument_list pos:start="581:44" pos:end="583:61">(<argument pos:start="581:45" pos:end="581:54"><expr pos:start="581:45" pos:end="581:54"><name pos:start="581:45" pos:end="581:54"><name pos:start="581:45" pos:end="581:50">cpu_SR</name><index pos:start="581:51" pos:end="581:54">[<expr pos:start="581:52" pos:end="581:53"><name pos:start="581:52" pos:end="581:53">PS</name></expr>]</index></name></expr></argument>,

                                    <argument pos:start="583:37" pos:end="583:60"><expr pos:start="583:37" pos:end="583:60"><name pos:start="583:37" pos:end="583:60"><name pos:start="583:37" pos:end="583:42">cpu_SR</name><index pos:start="583:43" pos:end="583:60">[<expr pos:start="583:44" pos:end="583:59"><name pos:start="583:44" pos:end="583:47">EPS2</name> <operator pos:start="583:49" pos:end="583:49">+</operator> <name pos:start="583:51" pos:end="583:55">RRR_S</name> <operator pos:start="583:57" pos:end="583:57">-</operator> <literal type="number" pos:start="583:59" pos:end="583:59">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="585:29" pos:end="585:65"><expr pos:start="585:29" pos:end="585:64"><call pos:start="585:29" pos:end="585:64"><name pos:start="585:29" pos:end="585:55">gen_helper_check_interrupts</name><argument_list pos:start="585:56" pos:end="585:64">(<argument pos:start="585:57" pos:end="585:63"><expr pos:start="585:57" pos:end="585:63"><name pos:start="585:57" pos:end="585:63">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="587:29" pos:end="587:67"><expr pos:start="587:29" pos:end="587:66"><call pos:start="587:29" pos:end="587:66"><name pos:start="587:29" pos:end="587:36">gen_jump</name><argument_list pos:start="587:37" pos:end="587:66">(<argument pos:start="587:38" pos:end="587:39"><expr pos:start="587:38" pos:end="587:39"><name pos:start="587:38" pos:end="587:39">dc</name></expr></argument>, <argument pos:start="587:42" pos:end="587:65"><expr pos:start="587:42" pos:end="587:65"><name pos:start="587:42" pos:end="587:65"><name pos:start="587:42" pos:end="587:47">cpu_SR</name><index pos:start="587:48" pos:end="587:65">[<expr pos:start="587:49" pos:end="587:64"><name pos:start="587:49" pos:end="587:52">EPC1</name> <operator pos:start="587:54" pos:end="587:54">+</operator> <name pos:start="587:56" pos:end="587:60">RRR_S</name> <operator pos:start="587:62" pos:end="587:62">-</operator> <literal type="number" pos:start="587:64" pos:end="587:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="589:27" pos:end="595:25">else <block pos:start="589:32" pos:end="595:25">{<block_content pos:start="591:29" pos:end="593:79">

                            <expr_stmt pos:start="591:29" pos:end="591:67"><expr pos:start="591:29" pos:end="591:66"><call pos:start="591:29" pos:end="591:66"><name pos:start="591:29" pos:end="591:36">qemu_log</name><argument_list pos:start="591:37" pos:end="591:66">(<argument pos:start="591:38" pos:end="591:58"><expr pos:start="591:38" pos:end="591:58"><literal type="string" pos:start="591:38" pos:end="591:58">"RFI %d is illegal\n"</literal></expr></argument>, <argument pos:start="591:61" pos:end="591:65"><expr pos:start="591:61" pos:end="591:65"><name pos:start="591:61" pos:end="591:65">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="593:29" pos:end="593:79"><expr pos:start="593:29" pos:end="593:78"><call pos:start="593:29" pos:end="593:78"><name pos:start="593:29" pos:end="593:47">gen_exception_cause</name><argument_list pos:start="593:48" pos:end="593:78">(<argument pos:start="593:49" pos:end="593:50"><expr pos:start="593:49" pos:end="593:50"><name pos:start="593:49" pos:end="593:50">dc</name></expr></argument>, <argument pos:start="593:53" pos:end="593:77"><expr pos:start="593:53" pos:end="593:77"><name pos:start="593:53" pos:end="593:77">ILLEGAL_INSTRUCTION_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="597:25" pos:end="597:30">break;</break>



                    <case pos:start="601:21" pos:end="601:27">case <expr pos:start="601:26" pos:end="601:26"><literal type="number" pos:start="601:26" pos:end="601:26">2</literal></expr>:</case> <comment type="block" pos:start="601:29" pos:end="601:36">/*RFME*/</comment>

                        <expr_stmt pos:start="603:25" pos:end="603:30"><expr pos:start="603:25" pos:end="603:29"><call pos:start="603:25" pos:end="603:29"><name pos:start="603:25" pos:end="603:27">TBD</name><argument_list pos:start="603:28" pos:end="603:29">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="605:25" pos:end="605:30">break;</break>



                    <default pos:start="609:21" pos:end="609:28">default:</default> <comment type="block" pos:start="609:30" pos:end="609:41">/*reserved*/</comment>

                        <expr_stmt pos:start="611:25" pos:end="611:35"><expr pos:start="611:25" pos:end="611:34"><call pos:start="611:25" pos:end="611:34"><name pos:start="611:25" pos:end="611:32">RESERVED</name><argument_list pos:start="611:33" pos:end="611:34">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="613:25" pos:end="613:30">break;</break>



                    </block_content>}</block></switch>

                    <break pos:start="619:21" pos:end="619:26">break;</break>



                <case pos:start="623:17" pos:end="623:23">case <expr pos:start="623:22" pos:end="623:22"><literal type="number" pos:start="623:22" pos:end="623:22">4</literal></expr>:</case> <comment type="block" pos:start="623:25" pos:end="623:34">/*BREAKx*/</comment>

                    <expr_stmt pos:start="625:21" pos:end="625:52"><expr pos:start="625:21" pos:end="625:51"><call pos:start="625:21" pos:end="625:51"><name pos:start="625:21" pos:end="625:30">HAS_OPTION</name><argument_list pos:start="625:31" pos:end="625:51">(<argument pos:start="625:32" pos:end="625:50"><expr pos:start="625:32" pos:end="625:50"><name pos:start="625:32" pos:end="625:50">XTENSA_OPTION_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="627:21" pos:end="631:21"><if pos:start="627:21" pos:end="631:21">if <condition pos:start="627:24" pos:end="627:34">(<expr pos:start="627:25" pos:end="627:33"><name pos:start="627:25" pos:end="627:33"><name pos:start="627:25" pos:end="627:26">dc</name><operator pos:start="627:27" pos:end="627:28">-&gt;</operator><name pos:start="627:29" pos:end="627:33">debug</name></name></expr>)</condition> <block pos:start="627:36" pos:end="631:21">{<block_content pos:start="629:25" pos:end="629:63">

                        <expr_stmt pos:start="629:25" pos:end="629:63"><expr pos:start="629:25" pos:end="629:62"><call pos:start="629:25" pos:end="629:62"><name pos:start="629:25" pos:end="629:43">gen_debug_exception</name><argument_list pos:start="629:44" pos:end="629:62">(<argument pos:start="629:45" pos:end="629:46"><expr pos:start="629:45" pos:end="629:46"><name pos:start="629:45" pos:end="629:46">dc</name></expr></argument>, <argument pos:start="629:49" pos:end="629:61"><expr pos:start="629:49" pos:end="629:61"><name pos:start="629:49" pos:end="629:61">DEBUGCAUSE_BI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="633:21" pos:end="633:26">break;</break>



                <case pos:start="637:17" pos:end="637:23">case <expr pos:start="637:22" pos:end="637:22"><literal type="number" pos:start="637:22" pos:end="637:22">5</literal></expr>:</case> <comment type="block" pos:start="637:25" pos:end="637:36">/*SYSCALLx*/</comment>

                    <expr_stmt pos:start="639:21" pos:end="639:56"><expr pos:start="639:21" pos:end="639:55"><call pos:start="639:21" pos:end="639:55"><name pos:start="639:21" pos:end="639:30">HAS_OPTION</name><argument_list pos:start="639:31" pos:end="639:55">(<argument pos:start="639:32" pos:end="639:54"><expr pos:start="639:32" pos:end="639:54"><name pos:start="639:32" pos:end="639:54">XTENSA_OPTION_EXCEPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="641:21" pos:end="677:21">switch <condition pos:start="641:28" pos:end="641:34">(<expr pos:start="641:29" pos:end="641:33"><name pos:start="641:29" pos:end="641:33">RRR_S</name></expr>)</condition> <block pos:start="641:36" pos:end="677:21">{<block_content pos:start="643:21" pos:end="675:30">

                    <case pos:start="643:21" pos:end="643:27">case <expr pos:start="643:26" pos:end="643:26"><literal type="number" pos:start="643:26" pos:end="643:26">0</literal></expr>:</case> <comment type="block" pos:start="643:29" pos:end="643:40">/*SYSCALLx*/</comment>

                        <expr_stmt pos:start="645:25" pos:end="645:63"><expr pos:start="645:25" pos:end="645:62"><call pos:start="645:25" pos:end="645:62"><name pos:start="645:25" pos:end="645:43">gen_exception_cause</name><argument_list pos:start="645:44" pos:end="645:62">(<argument pos:start="645:45" pos:end="645:46"><expr pos:start="645:45" pos:end="645:46"><name pos:start="645:45" pos:end="645:46">dc</name></expr></argument>, <argument pos:start="645:49" pos:end="645:61"><expr pos:start="645:49" pos:end="645:61"><name pos:start="645:49" pos:end="645:61">SYSCALL_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="647:25" pos:end="647:30">break;</break>



                    <case pos:start="651:21" pos:end="651:27">case <expr pos:start="651:26" pos:end="651:26"><literal type="number" pos:start="651:26" pos:end="651:26">1</literal></expr>:</case> <comment type="block" pos:start="651:29" pos:end="651:39">/*SIMCALL*/</comment>

                        <if_stmt pos:start="653:25" pos:end="665:25"><if pos:start="653:25" pos:end="659:25">if <condition pos:start="653:28" pos:end="653:48">(<expr pos:start="653:29" pos:end="653:47"><name pos:start="653:29" pos:end="653:47">semihosting_enabled</name></expr>)</condition> <block pos:start="653:50" pos:end="659:25">{<block_content pos:start="655:29" pos:end="657:56">

                            <expr_stmt pos:start="655:29" pos:end="655:52"><expr pos:start="655:29" pos:end="655:51"><call pos:start="655:29" pos:end="655:51"><name pos:start="655:29" pos:end="655:47">gen_check_privilege</name><argument_list pos:start="655:48" pos:end="655:51">(<argument pos:start="655:49" pos:end="655:50"><expr pos:start="655:49" pos:end="655:50"><name pos:start="655:49" pos:end="655:50">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="657:29" pos:end="657:56"><expr pos:start="657:29" pos:end="657:55"><call pos:start="657:29" pos:end="657:55"><name pos:start="657:29" pos:end="657:46">gen_helper_simcall</name><argument_list pos:start="657:47" pos:end="657:55">(<argument pos:start="657:48" pos:end="657:54"><expr pos:start="657:48" pos:end="657:54"><name pos:start="657:48" pos:end="657:54">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="659:27" pos:end="665:25">else <block pos:start="659:32" pos:end="665:25">{<block_content pos:start="661:29" pos:end="663:79">

                            <expr_stmt pos:start="661:29" pos:end="661:78"><expr pos:start="661:29" pos:end="661:77"><call pos:start="661:29" pos:end="661:77"><name pos:start="661:29" pos:end="661:36">qemu_log</name><argument_list pos:start="661:37" pos:end="661:77">(<argument pos:start="661:38" pos:end="661:76"><expr pos:start="661:38" pos:end="661:76"><literal type="string" pos:start="661:38" pos:end="661:76">"SIMCALL but semihosting is disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="663:29" pos:end="663:79"><expr pos:start="663:29" pos:end="663:78"><call pos:start="663:29" pos:end="663:78"><name pos:start="663:29" pos:end="663:47">gen_exception_cause</name><argument_list pos:start="663:48" pos:end="663:78">(<argument pos:start="663:49" pos:end="663:50"><expr pos:start="663:49" pos:end="663:50"><name pos:start="663:49" pos:end="663:50">dc</name></expr></argument>, <argument pos:start="663:53" pos:end="663:77"><expr pos:start="663:53" pos:end="663:77"><name pos:start="663:53" pos:end="663:77">ILLEGAL_INSTRUCTION_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="667:25" pos:end="667:30">break;</break>



                    <default pos:start="671:21" pos:end="671:28">default:</default>

                        <expr_stmt pos:start="673:25" pos:end="673:35"><expr pos:start="673:25" pos:end="673:34"><call pos:start="673:25" pos:end="673:34"><name pos:start="673:25" pos:end="673:32">RESERVED</name><argument_list pos:start="673:33" pos:end="673:34">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="675:25" pos:end="675:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="679:21" pos:end="679:26">break;</break>



                <case pos:start="683:17" pos:end="683:23">case <expr pos:start="683:22" pos:end="683:22"><literal type="number" pos:start="683:22" pos:end="683:22">6</literal></expr>:</case> <comment type="block" pos:start="683:25" pos:end="683:33">/*RSILx*/</comment>

                    <expr_stmt pos:start="685:21" pos:end="685:56"><expr pos:start="685:21" pos:end="685:55"><call pos:start="685:21" pos:end="685:55"><name pos:start="685:21" pos:end="685:30">HAS_OPTION</name><argument_list pos:start="685:31" pos:end="685:55">(<argument pos:start="685:32" pos:end="685:54"><expr pos:start="685:32" pos:end="685:54"><name pos:start="685:32" pos:end="685:54">XTENSA_OPTION_INTERRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="687:21" pos:end="687:44"><expr pos:start="687:21" pos:end="687:43"><call pos:start="687:21" pos:end="687:43"><name pos:start="687:21" pos:end="687:39">gen_check_privilege</name><argument_list pos:start="687:40" pos:end="687:43">(<argument pos:start="687:41" pos:end="687:42"><expr pos:start="687:41" pos:end="687:42"><name pos:start="687:41" pos:end="687:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="689:21" pos:end="689:49"><expr pos:start="689:21" pos:end="689:48"><call pos:start="689:21" pos:end="689:48"><name pos:start="689:21" pos:end="689:37">gen_window_check1</name><argument_list pos:start="689:38" pos:end="689:48">(<argument pos:start="689:39" pos:end="689:40"><expr pos:start="689:39" pos:end="689:40"><name pos:start="689:39" pos:end="689:40">dc</name></expr></argument>, <argument pos:start="689:43" pos:end="689:47"><expr pos:start="689:43" pos:end="689:47"><name pos:start="689:43" pos:end="689:47">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="691:21" pos:end="691:62"><expr pos:start="691:21" pos:end="691:61"><call pos:start="691:21" pos:end="691:61"><name pos:start="691:21" pos:end="691:35">tcg_gen_mov_i32</name><argument_list pos:start="691:36" pos:end="691:61">(<argument pos:start="691:37" pos:end="691:48"><expr pos:start="691:37" pos:end="691:48"><name pos:start="691:37" pos:end="691:48"><name pos:start="691:37" pos:end="691:41">cpu_R</name><index pos:start="691:42" pos:end="691:48">[<expr pos:start="691:43" pos:end="691:47"><name pos:start="691:43" pos:end="691:47">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="691:51" pos:end="691:60"><expr pos:start="691:51" pos:end="691:60"><name pos:start="691:51" pos:end="691:60"><name pos:start="691:51" pos:end="691:56">cpu_SR</name><index pos:start="691:57" pos:end="691:60">[<expr pos:start="691:58" pos:end="691:59"><name pos:start="691:58" pos:end="691:59">PS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="693:21" pos:end="693:75"><expr pos:start="693:21" pos:end="693:74"><call pos:start="693:21" pos:end="693:74"><name pos:start="693:21" pos:end="693:36">tcg_gen_andi_i32</name><argument_list pos:start="693:37" pos:end="693:74">(<argument pos:start="693:38" pos:end="693:47"><expr pos:start="693:38" pos:end="693:47"><name pos:start="693:38" pos:end="693:47"><name pos:start="693:38" pos:end="693:43">cpu_SR</name><index pos:start="693:44" pos:end="693:47">[<expr pos:start="693:45" pos:end="693:46"><name pos:start="693:45" pos:end="693:46">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="693:50" pos:end="693:59"><expr pos:start="693:50" pos:end="693:59"><name pos:start="693:50" pos:end="693:59"><name pos:start="693:50" pos:end="693:55">cpu_SR</name><index pos:start="693:56" pos:end="693:59">[<expr pos:start="693:57" pos:end="693:58"><name pos:start="693:57" pos:end="693:58">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="693:62" pos:end="693:73"><expr pos:start="693:62" pos:end="693:73"><operator pos:start="693:62" pos:end="693:62">~</operator><name pos:start="693:63" pos:end="693:73">PS_INTLEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="695:21" pos:end="695:67"><expr pos:start="695:21" pos:end="695:66"><call pos:start="695:21" pos:end="695:66"><name pos:start="695:21" pos:end="695:35">tcg_gen_ori_i32</name><argument_list pos:start="695:36" pos:end="695:66">(<argument pos:start="695:37" pos:end="695:46"><expr pos:start="695:37" pos:end="695:46"><name pos:start="695:37" pos:end="695:46"><name pos:start="695:37" pos:end="695:42">cpu_SR</name><index pos:start="695:43" pos:end="695:46">[<expr pos:start="695:44" pos:end="695:45"><name pos:start="695:44" pos:end="695:45">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="695:49" pos:end="695:58"><expr pos:start="695:49" pos:end="695:58"><name pos:start="695:49" pos:end="695:58"><name pos:start="695:49" pos:end="695:54">cpu_SR</name><index pos:start="695:55" pos:end="695:58">[<expr pos:start="695:56" pos:end="695:57"><name pos:start="695:56" pos:end="695:57">PS</name></expr>]</index></name></expr></argument>, <argument pos:start="695:61" pos:end="695:65"><expr pos:start="695:61" pos:end="695:65"><name pos:start="695:61" pos:end="695:65">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="697:21" pos:end="697:57"><expr pos:start="697:21" pos:end="697:56"><call pos:start="697:21" pos:end="697:56"><name pos:start="697:21" pos:end="697:47">gen_helper_check_interrupts</name><argument_list pos:start="697:48" pos:end="697:56">(<argument pos:start="697:49" pos:end="697:55"><expr pos:start="697:49" pos:end="697:55"><name pos:start="697:49" pos:end="697:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="699:21" pos:end="699:52"><expr pos:start="699:21" pos:end="699:51"><call pos:start="699:21" pos:end="699:51"><name pos:start="699:21" pos:end="699:44">gen_jumpi_check_loop_end</name><argument_list pos:start="699:45" pos:end="699:51">(<argument pos:start="699:46" pos:end="699:47"><expr pos:start="699:46" pos:end="699:47"><name pos:start="699:46" pos:end="699:47">dc</name></expr></argument>, <argument pos:start="699:50" pos:end="699:50"><expr pos:start="699:50" pos:end="699:50"><literal type="number" pos:start="699:50" pos:end="699:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="701:21" pos:end="701:26">break;</break>



                <case pos:start="705:17" pos:end="705:23">case <expr pos:start="705:22" pos:end="705:22"><literal type="number" pos:start="705:22" pos:end="705:22">7</literal></expr>:</case> <comment type="block" pos:start="705:25" pos:end="705:34">/*WAITIx*/</comment>

                    <expr_stmt pos:start="707:21" pos:end="707:56"><expr pos:start="707:21" pos:end="707:55"><call pos:start="707:21" pos:end="707:55"><name pos:start="707:21" pos:end="707:30">HAS_OPTION</name><argument_list pos:start="707:31" pos:end="707:55">(<argument pos:start="707:32" pos:end="707:54"><expr pos:start="707:32" pos:end="707:54"><name pos:start="707:32" pos:end="707:54">XTENSA_OPTION_INTERRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="709:21" pos:end="709:44"><expr pos:start="709:21" pos:end="709:43"><call pos:start="709:21" pos:end="709:43"><name pos:start="709:21" pos:end="709:39">gen_check_privilege</name><argument_list pos:start="709:40" pos:end="709:43">(<argument pos:start="709:41" pos:end="709:42"><expr pos:start="709:41" pos:end="709:42"><name pos:start="709:41" pos:end="709:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="711:21" pos:end="711:41"><expr pos:start="711:21" pos:end="711:40"><call pos:start="711:21" pos:end="711:40"><name pos:start="711:21" pos:end="711:29">gen_waiti</name><argument_list pos:start="711:30" pos:end="711:40">(<argument pos:start="711:31" pos:end="711:32"><expr pos:start="711:31" pos:end="711:32"><name pos:start="711:31" pos:end="711:32">dc</name></expr></argument>, <argument pos:start="711:35" pos:end="711:39"><expr pos:start="711:35" pos:end="711:39"><name pos:start="711:35" pos:end="711:39">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="713:21" pos:end="713:26">break;</break>



                <case pos:start="717:17" pos:end="717:23">case <expr pos:start="717:22" pos:end="717:22"><literal type="number" pos:start="717:22" pos:end="717:22">8</literal></expr>:</case> <comment type="block" pos:start="717:25" pos:end="717:33">/*ANY4p*/</comment>

                <case pos:start="719:17" pos:end="719:23">case <expr pos:start="719:22" pos:end="719:22"><literal type="number" pos:start="719:22" pos:end="719:22">9</literal></expr>:</case> <comment type="block" pos:start="719:25" pos:end="719:33">/*ALL4p*/</comment>

                <case pos:start="721:17" pos:end="721:24">case <expr pos:start="721:22" pos:end="721:23"><literal type="number" pos:start="721:22" pos:end="721:23">10</literal></expr>:</case> <comment type="block" pos:start="721:26" pos:end="721:34">/*ANY8p*/</comment>

                <case pos:start="723:17" pos:end="723:24">case <expr pos:start="723:22" pos:end="723:23"><literal type="number" pos:start="723:22" pos:end="723:23">11</literal></expr>:</case> <comment type="block" pos:start="723:26" pos:end="723:34">/*ALL8p*/</comment>

                    <expr_stmt pos:start="725:21" pos:end="725:54"><expr pos:start="725:21" pos:end="725:53"><call pos:start="725:21" pos:end="725:53"><name pos:start="725:21" pos:end="725:30">HAS_OPTION</name><argument_list pos:start="725:31" pos:end="725:53">(<argument pos:start="725:32" pos:end="725:52"><expr pos:start="725:32" pos:end="725:52"><name pos:start="725:32" pos:end="725:52">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="727:21" pos:end="761:21">{<block_content pos:start="729:25" pos:end="759:43">

                        <decl_stmt pos:start="729:25" pos:end="729:67"><decl pos:start="729:25" pos:end="729:66"><type pos:start="729:25" pos:end="729:38"><specifier pos:start="729:25" pos:end="729:29">const</specifier> <name pos:start="729:31" pos:end="729:38">unsigned</name></type> <name pos:start="729:40" pos:end="729:44">shift</name> <init pos:start="729:46" pos:end="729:66">= <expr pos:start="729:48" pos:end="729:66"><ternary pos:start="729:48" pos:end="729:66"><condition pos:start="729:48" pos:end="729:60"><expr pos:start="729:48" pos:end="729:58"><operator pos:start="729:48" pos:end="729:48">(</operator><name pos:start="729:49" pos:end="729:53">RRR_R</name> <operator pos:start="729:55" pos:end="729:55">&amp;</operator> <literal type="number" pos:start="729:57" pos:end="729:57">2</literal><operator pos:start="729:58" pos:end="729:58">)</operator></expr> ?</condition><then pos:start="729:62" pos:end="729:62"> <expr pos:start="729:62" pos:end="729:62"><literal type="number" pos:start="729:62" pos:end="729:62">8</literal></expr> </then><else pos:start="729:64" pos:end="729:66">: <expr pos:start="729:66" pos:end="729:66"><literal type="number" pos:start="729:66" pos:end="729:66">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="731:25" pos:end="733:61"><decl pos:start="731:25" pos:end="733:60"><type pos:start="731:25" pos:end="731:32"><name pos:start="731:25" pos:end="731:32">TCGv_i32</name></type> <name pos:start="731:34" pos:end="731:37">mask</name> <init pos:start="731:39" pos:end="733:60">= <expr pos:start="731:41" pos:end="733:60"><call pos:start="731:41" pos:end="733:60"><name pos:start="731:41" pos:end="731:53">tcg_const_i32</name><argument_list pos:start="731:54" pos:end="733:60">(

                                <argument pos:start="733:33" pos:end="733:59"><expr pos:start="733:33" pos:end="733:59"><operator pos:start="733:33" pos:end="733:33">(</operator><operator pos:start="733:34" pos:end="733:34">(</operator><literal type="number" pos:start="733:35" pos:end="733:35">1</literal> <operator pos:start="733:37" pos:end="733:38">&lt;&lt;</operator> <name pos:start="733:40" pos:end="733:44">shift</name><operator pos:start="733:45" pos:end="733:45">)</operator> <operator pos:start="733:47" pos:end="733:47">-</operator> <literal type="number" pos:start="733:49" pos:end="733:49">1</literal><operator pos:start="733:50" pos:end="733:50">)</operator> <operator pos:start="733:52" pos:end="733:53">&lt;&lt;</operator> <name pos:start="733:55" pos:end="733:59">RRR_S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="735:25" pos:end="735:58"><decl pos:start="735:25" pos:end="735:57"><type pos:start="735:25" pos:end="735:32"><name pos:start="735:25" pos:end="735:32">TCGv_i32</name></type> <name pos:start="735:34" pos:end="735:36">tmp</name> <init pos:start="735:38" pos:end="735:57">= <expr pos:start="735:40" pos:end="735:57"><call pos:start="735:40" pos:end="735:57"><name pos:start="735:40" pos:end="735:55">tcg_temp_new_i32</name><argument_list pos:start="735:56" pos:end="735:57">()</argument_list></call></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="739:25" pos:end="739:63"><expr pos:start="739:25" pos:end="739:62"><call pos:start="739:25" pos:end="739:62"><name pos:start="739:25" pos:end="739:39">tcg_gen_and_i32</name><argument_list pos:start="739:40" pos:end="739:62">(<argument pos:start="739:41" pos:end="739:43"><expr pos:start="739:41" pos:end="739:43"><name pos:start="739:41" pos:end="739:43">tmp</name></expr></argument>, <argument pos:start="739:46" pos:end="739:55"><expr pos:start="739:46" pos:end="739:55"><name pos:start="739:46" pos:end="739:55"><name pos:start="739:46" pos:end="739:51">cpu_SR</name><index pos:start="739:52" pos:end="739:55">[<expr pos:start="739:53" pos:end="739:54"><name pos:start="739:53" pos:end="739:54">BR</name></expr>]</index></name></expr></argument>, <argument pos:start="739:58" pos:end="739:61"><expr pos:start="739:58" pos:end="739:61"><name pos:start="739:58" pos:end="739:61">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="741:25" pos:end="749:25"><if pos:start="741:25" pos:end="745:25">if <condition pos:start="741:28" pos:end="741:38">(<expr pos:start="741:29" pos:end="741:37"><name pos:start="741:29" pos:end="741:33">RRR_R</name> <operator pos:start="741:35" pos:end="741:35">&amp;</operator> <literal type="number" pos:start="741:37" pos:end="741:37">1</literal></expr>)</condition> <block pos:start="741:40" pos:end="745:25">{<block_content pos:start="743:29" pos:end="743:67"> <comment type="block" pos:start="741:42" pos:end="741:48">/*ALL*/</comment>

                            <expr_stmt pos:start="743:29" pos:end="743:67"><expr pos:start="743:29" pos:end="743:66"><call pos:start="743:29" pos:end="743:66"><name pos:start="743:29" pos:end="743:44">tcg_gen_addi_i32</name><argument_list pos:start="743:45" pos:end="743:66">(<argument pos:start="743:46" pos:end="743:48"><expr pos:start="743:46" pos:end="743:48"><name pos:start="743:46" pos:end="743:48">tmp</name></expr></argument>, <argument pos:start="743:51" pos:end="743:53"><expr pos:start="743:51" pos:end="743:53"><name pos:start="743:51" pos:end="743:53">tmp</name></expr></argument>, <argument pos:start="743:56" pos:end="743:65"><expr pos:start="743:56" pos:end="743:65"><literal type="number" pos:start="743:56" pos:end="743:56">1</literal> <operator pos:start="743:58" pos:end="743:59">&lt;&lt;</operator> <name pos:start="743:61" pos:end="743:65">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="745:27" pos:end="749:25">else <block pos:start="745:32" pos:end="749:25">{<block_content pos:start="747:29" pos:end="747:60"> <comment type="block" pos:start="745:34" pos:end="745:40">/*ANY*/</comment>

                            <expr_stmt pos:start="747:29" pos:end="747:60"><expr pos:start="747:29" pos:end="747:59"><call pos:start="747:29" pos:end="747:59"><name pos:start="747:29" pos:end="747:43">tcg_gen_add_i32</name><argument_list pos:start="747:44" pos:end="747:59">(<argument pos:start="747:45" pos:end="747:47"><expr pos:start="747:45" pos:end="747:47"><name pos:start="747:45" pos:end="747:47">tmp</name></expr></argument>, <argument pos:start="747:50" pos:end="747:52"><expr pos:start="747:50" pos:end="747:52"><name pos:start="747:50" pos:end="747:52">tmp</name></expr></argument>, <argument pos:start="747:55" pos:end="747:58"><expr pos:start="747:55" pos:end="747:58"><name pos:start="747:55" pos:end="747:58">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="751:25" pos:end="751:66"><expr pos:start="751:25" pos:end="751:65"><call pos:start="751:25" pos:end="751:65"><name pos:start="751:25" pos:end="751:40">tcg_gen_shri_i32</name><argument_list pos:start="751:41" pos:end="751:65">(<argument pos:start="751:42" pos:end="751:44"><expr pos:start="751:42" pos:end="751:44"><name pos:start="751:42" pos:end="751:44">tmp</name></expr></argument>, <argument pos:start="751:47" pos:end="751:49"><expr pos:start="751:47" pos:end="751:49"><name pos:start="751:47" pos:end="751:49">tmp</name></expr></argument>, <argument pos:start="751:52" pos:end="751:64"><expr pos:start="751:52" pos:end="751:64"><name pos:start="751:52" pos:end="751:56">RRR_S</name> <operator pos:start="751:58" pos:end="751:58">+</operator> <name pos:start="751:60" pos:end="751:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="753:25" pos:end="755:47"><expr pos:start="753:25" pos:end="755:46"><call pos:start="753:25" pos:end="755:46"><name pos:start="753:25" pos:end="753:43">tcg_gen_deposit_i32</name><argument_list pos:start="753:44" pos:end="755:46">(<argument pos:start="753:45" pos:end="753:54"><expr pos:start="753:45" pos:end="753:54"><name pos:start="753:45" pos:end="753:54"><name pos:start="753:45" pos:end="753:50">cpu_SR</name><index pos:start="753:51" pos:end="753:54">[<expr pos:start="753:52" pos:end="753:53"><name pos:start="753:52" pos:end="753:53">BR</name></expr>]</index></name></expr></argument>, <argument pos:start="753:57" pos:end="753:66"><expr pos:start="753:57" pos:end="753:66"><name pos:start="753:57" pos:end="753:66"><name pos:start="753:57" pos:end="753:62">cpu_SR</name><index pos:start="753:63" pos:end="753:66">[<expr pos:start="753:64" pos:end="753:65"><name pos:start="753:64" pos:end="753:65">BR</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="755:33" pos:end="755:35"><expr pos:start="755:33" pos:end="755:35"><name pos:start="755:33" pos:end="755:35">tmp</name></expr></argument>, <argument pos:start="755:38" pos:end="755:42"><expr pos:start="755:38" pos:end="755:42"><name pos:start="755:38" pos:end="755:42">RRR_T</name></expr></argument>, <argument pos:start="755:45" pos:end="755:45"><expr pos:start="755:45" pos:end="755:45"><literal type="number" pos:start="755:45" pos:end="755:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="757:25" pos:end="757:44"><expr pos:start="757:25" pos:end="757:43"><call pos:start="757:25" pos:end="757:43"><name pos:start="757:25" pos:end="757:37">tcg_temp_free</name><argument_list pos:start="757:38" pos:end="757:43">(<argument pos:start="757:39" pos:end="757:42"><expr pos:start="757:39" pos:end="757:42"><name pos:start="757:39" pos:end="757:42">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="759:25" pos:end="759:43"><expr pos:start="759:25" pos:end="759:42"><call pos:start="759:25" pos:end="759:42"><name pos:start="759:25" pos:end="759:37">tcg_temp_free</name><argument_list pos:start="759:38" pos:end="759:42">(<argument pos:start="759:39" pos:end="759:41"><expr pos:start="759:39" pos:end="759:41"><name pos:start="759:39" pos:end="759:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="763:21" pos:end="763:26">break;</break>



                <default pos:start="767:17" pos:end="767:24">default:</default> <comment type="block" pos:start="767:26" pos:end="767:37">/*reserved*/</comment>

                    <expr_stmt pos:start="769:21" pos:end="769:31"><expr pos:start="769:21" pos:end="769:30"><call pos:start="769:21" pos:end="769:30"><name pos:start="769:21" pos:end="769:28">RESERVED</name><argument_list pos:start="769:29" pos:end="769:30">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="771:21" pos:end="771:26">break;</break>



                </block_content>}</block></switch>

                <break pos:start="777:17" pos:end="777:22">break;</break>



            <case pos:start="781:13" pos:end="781:19">case <expr pos:start="781:18" pos:end="781:18"><literal type="number" pos:start="781:18" pos:end="781:18">1</literal></expr>:</case> <comment type="block" pos:start="781:21" pos:end="781:27">/*AND*/</comment>

                <expr_stmt pos:start="783:17" pos:end="783:59"><expr pos:start="783:17" pos:end="783:58"><call pos:start="783:17" pos:end="783:58"><name pos:start="783:17" pos:end="783:33">gen_window_check3</name><argument_list pos:start="783:34" pos:end="783:58">(<argument pos:start="783:35" pos:end="783:36"><expr pos:start="783:35" pos:end="783:36"><name pos:start="783:35" pos:end="783:36">dc</name></expr></argument>, <argument pos:start="783:39" pos:end="783:43"><expr pos:start="783:39" pos:end="783:43"><name pos:start="783:39" pos:end="783:43">RRR_R</name></expr></argument>, <argument pos:start="783:46" pos:end="783:50"><expr pos:start="783:46" pos:end="783:50"><name pos:start="783:46" pos:end="783:50">RRR_S</name></expr></argument>, <argument pos:start="783:53" pos:end="783:57"><expr pos:start="783:53" pos:end="783:57"><name pos:start="783:53" pos:end="783:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="785:17" pos:end="785:74"><expr pos:start="785:17" pos:end="785:73"><call pos:start="785:17" pos:end="785:73"><name pos:start="785:17" pos:end="785:31">tcg_gen_and_i32</name><argument_list pos:start="785:32" pos:end="785:73">(<argument pos:start="785:33" pos:end="785:44"><expr pos:start="785:33" pos:end="785:44"><name pos:start="785:33" pos:end="785:44"><name pos:start="785:33" pos:end="785:37">cpu_R</name><index pos:start="785:38" pos:end="785:44">[<expr pos:start="785:39" pos:end="785:43"><name pos:start="785:39" pos:end="785:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="785:47" pos:end="785:58"><expr pos:start="785:47" pos:end="785:58"><name pos:start="785:47" pos:end="785:58"><name pos:start="785:47" pos:end="785:51">cpu_R</name><index pos:start="785:52" pos:end="785:58">[<expr pos:start="785:53" pos:end="785:57"><name pos:start="785:53" pos:end="785:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="785:61" pos:end="785:72"><expr pos:start="785:61" pos:end="785:72"><name pos:start="785:61" pos:end="785:72"><name pos:start="785:61" pos:end="785:65">cpu_R</name><index pos:start="785:66" pos:end="785:72">[<expr pos:start="785:67" pos:end="785:71"><name pos:start="785:67" pos:end="785:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="787:17" pos:end="787:22">break;</break>



            <case pos:start="791:13" pos:end="791:19">case <expr pos:start="791:18" pos:end="791:18"><literal type="number" pos:start="791:18" pos:end="791:18">2</literal></expr>:</case> <comment type="block" pos:start="791:21" pos:end="791:26">/*OR*/</comment>

                <expr_stmt pos:start="793:17" pos:end="793:59"><expr pos:start="793:17" pos:end="793:58"><call pos:start="793:17" pos:end="793:58"><name pos:start="793:17" pos:end="793:33">gen_window_check3</name><argument_list pos:start="793:34" pos:end="793:58">(<argument pos:start="793:35" pos:end="793:36"><expr pos:start="793:35" pos:end="793:36"><name pos:start="793:35" pos:end="793:36">dc</name></expr></argument>, <argument pos:start="793:39" pos:end="793:43"><expr pos:start="793:39" pos:end="793:43"><name pos:start="793:39" pos:end="793:43">RRR_R</name></expr></argument>, <argument pos:start="793:46" pos:end="793:50"><expr pos:start="793:46" pos:end="793:50"><name pos:start="793:46" pos:end="793:50">RRR_S</name></expr></argument>, <argument pos:start="793:53" pos:end="793:57"><expr pos:start="793:53" pos:end="793:57"><name pos:start="793:53" pos:end="793:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:73"><expr pos:start="795:17" pos:end="795:72"><call pos:start="795:17" pos:end="795:72"><name pos:start="795:17" pos:end="795:30">tcg_gen_or_i32</name><argument_list pos:start="795:31" pos:end="795:72">(<argument pos:start="795:32" pos:end="795:43"><expr pos:start="795:32" pos:end="795:43"><name pos:start="795:32" pos:end="795:43"><name pos:start="795:32" pos:end="795:36">cpu_R</name><index pos:start="795:37" pos:end="795:43">[<expr pos:start="795:38" pos:end="795:42"><name pos:start="795:38" pos:end="795:42">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="795:46" pos:end="795:57"><expr pos:start="795:46" pos:end="795:57"><name pos:start="795:46" pos:end="795:57"><name pos:start="795:46" pos:end="795:50">cpu_R</name><index pos:start="795:51" pos:end="795:57">[<expr pos:start="795:52" pos:end="795:56"><name pos:start="795:52" pos:end="795:56">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="795:60" pos:end="795:71"><expr pos:start="795:60" pos:end="795:71"><name pos:start="795:60" pos:end="795:71"><name pos:start="795:60" pos:end="795:64">cpu_R</name><index pos:start="795:65" pos:end="795:71">[<expr pos:start="795:66" pos:end="795:70"><name pos:start="795:66" pos:end="795:70">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="797:17" pos:end="797:22">break;</break>



            <case pos:start="801:13" pos:end="801:19">case <expr pos:start="801:18" pos:end="801:18"><literal type="number" pos:start="801:18" pos:end="801:18">3</literal></expr>:</case> <comment type="block" pos:start="801:21" pos:end="801:27">/*XOR*/</comment>

                <expr_stmt pos:start="803:17" pos:end="803:59"><expr pos:start="803:17" pos:end="803:58"><call pos:start="803:17" pos:end="803:58"><name pos:start="803:17" pos:end="803:33">gen_window_check3</name><argument_list pos:start="803:34" pos:end="803:58">(<argument pos:start="803:35" pos:end="803:36"><expr pos:start="803:35" pos:end="803:36"><name pos:start="803:35" pos:end="803:36">dc</name></expr></argument>, <argument pos:start="803:39" pos:end="803:43"><expr pos:start="803:39" pos:end="803:43"><name pos:start="803:39" pos:end="803:43">RRR_R</name></expr></argument>, <argument pos:start="803:46" pos:end="803:50"><expr pos:start="803:46" pos:end="803:50"><name pos:start="803:46" pos:end="803:50">RRR_S</name></expr></argument>, <argument pos:start="803:53" pos:end="803:57"><expr pos:start="803:53" pos:end="803:57"><name pos:start="803:53" pos:end="803:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:74"><expr pos:start="805:17" pos:end="805:73"><call pos:start="805:17" pos:end="805:73"><name pos:start="805:17" pos:end="805:31">tcg_gen_xor_i32</name><argument_list pos:start="805:32" pos:end="805:73">(<argument pos:start="805:33" pos:end="805:44"><expr pos:start="805:33" pos:end="805:44"><name pos:start="805:33" pos:end="805:44"><name pos:start="805:33" pos:end="805:37">cpu_R</name><index pos:start="805:38" pos:end="805:44">[<expr pos:start="805:39" pos:end="805:43"><name pos:start="805:39" pos:end="805:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="805:47" pos:end="805:58"><expr pos:start="805:47" pos:end="805:58"><name pos:start="805:47" pos:end="805:58"><name pos:start="805:47" pos:end="805:51">cpu_R</name><index pos:start="805:52" pos:end="805:58">[<expr pos:start="805:53" pos:end="805:57"><name pos:start="805:53" pos:end="805:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="805:61" pos:end="805:72"><expr pos:start="805:61" pos:end="805:72"><name pos:start="805:61" pos:end="805:72"><name pos:start="805:61" pos:end="805:65">cpu_R</name><index pos:start="805:66" pos:end="805:72">[<expr pos:start="805:67" pos:end="805:71"><name pos:start="805:67" pos:end="805:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="807:17" pos:end="807:22">break;</break>



            <case pos:start="811:13" pos:end="811:19">case <expr pos:start="811:18" pos:end="811:18"><literal type="number" pos:start="811:18" pos:end="811:18">4</literal></expr>:</case> <comment type="block" pos:start="811:21" pos:end="811:27">/*ST1*/</comment>

                <switch pos:start="813:17" pos:end="963:17">switch <condition pos:start="813:24" pos:end="813:30">(<expr pos:start="813:25" pos:end="813:29"><name pos:start="813:25" pos:end="813:29">RRR_R</name></expr>)</condition> <block pos:start="813:32" pos:end="963:17">{<block_content pos:start="815:17" pos:end="961:26">

                <case pos:start="815:17" pos:end="815:23">case <expr pos:start="815:22" pos:end="815:22"><literal type="number" pos:start="815:22" pos:end="815:22">0</literal></expr>:</case> <comment type="block" pos:start="815:25" pos:end="815:31">/*SSR*/</comment>

                    <expr_stmt pos:start="817:21" pos:end="817:49"><expr pos:start="817:21" pos:end="817:48"><call pos:start="817:21" pos:end="817:48"><name pos:start="817:21" pos:end="817:37">gen_window_check1</name><argument_list pos:start="817:38" pos:end="817:48">(<argument pos:start="817:39" pos:end="817:40"><expr pos:start="817:39" pos:end="817:40"><name pos:start="817:39" pos:end="817:40">dc</name></expr></argument>, <argument pos:start="817:43" pos:end="817:47"><expr pos:start="817:43" pos:end="817:47"><name pos:start="817:43" pos:end="817:47">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="819:21" pos:end="819:58"><expr pos:start="819:21" pos:end="819:57"><call pos:start="819:21" pos:end="819:57"><name pos:start="819:21" pos:end="819:39">gen_right_shift_sar</name><argument_list pos:start="819:40" pos:end="819:57">(<argument pos:start="819:41" pos:end="819:42"><expr pos:start="819:41" pos:end="819:42"><name pos:start="819:41" pos:end="819:42">dc</name></expr></argument>, <argument pos:start="819:45" pos:end="819:56"><expr pos:start="819:45" pos:end="819:56"><name pos:start="819:45" pos:end="819:56"><name pos:start="819:45" pos:end="819:49">cpu_R</name><index pos:start="819:50" pos:end="819:56">[<expr pos:start="819:51" pos:end="819:55"><name pos:start="819:51" pos:end="819:55">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="821:21" pos:end="821:26">break;</break>



                <case pos:start="825:17" pos:end="825:23">case <expr pos:start="825:22" pos:end="825:22"><literal type="number" pos:start="825:22" pos:end="825:22">1</literal></expr>:</case> <comment type="block" pos:start="825:25" pos:end="825:31">/*SSL*/</comment>

                    <expr_stmt pos:start="827:21" pos:end="827:49"><expr pos:start="827:21" pos:end="827:48"><call pos:start="827:21" pos:end="827:48"><name pos:start="827:21" pos:end="827:37">gen_window_check1</name><argument_list pos:start="827:38" pos:end="827:48">(<argument pos:start="827:39" pos:end="827:40"><expr pos:start="827:39" pos:end="827:40"><name pos:start="827:39" pos:end="827:40">dc</name></expr></argument>, <argument pos:start="827:43" pos:end="827:47"><expr pos:start="827:43" pos:end="827:47"><name pos:start="827:43" pos:end="827:47">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="829:21" pos:end="829:57"><expr pos:start="829:21" pos:end="829:56"><call pos:start="829:21" pos:end="829:56"><name pos:start="829:21" pos:end="829:38">gen_left_shift_sar</name><argument_list pos:start="829:39" pos:end="829:56">(<argument pos:start="829:40" pos:end="829:41"><expr pos:start="829:40" pos:end="829:41"><name pos:start="829:40" pos:end="829:41">dc</name></expr></argument>, <argument pos:start="829:44" pos:end="829:55"><expr pos:start="829:44" pos:end="829:55"><name pos:start="829:44" pos:end="829:55"><name pos:start="829:44" pos:end="829:48">cpu_R</name><index pos:start="829:49" pos:end="829:55">[<expr pos:start="829:50" pos:end="829:54"><name pos:start="829:50" pos:end="829:54">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="831:21" pos:end="831:26">break;</break>



                <case pos:start="835:17" pos:end="835:23">case <expr pos:start="835:22" pos:end="835:22"><literal type="number" pos:start="835:22" pos:end="835:22">2</literal></expr>:</case> <comment type="block" pos:start="835:25" pos:end="835:33">/*SSA8L*/</comment>

                    <expr_stmt pos:start="837:21" pos:end="837:49"><expr pos:start="837:21" pos:end="837:48"><call pos:start="837:21" pos:end="837:48"><name pos:start="837:21" pos:end="837:37">gen_window_check1</name><argument_list pos:start="837:38" pos:end="837:48">(<argument pos:start="837:39" pos:end="837:40"><expr pos:start="837:39" pos:end="837:40"><name pos:start="837:39" pos:end="837:40">dc</name></expr></argument>, <argument pos:start="837:43" pos:end="837:47"><expr pos:start="837:43" pos:end="837:47"><name pos:start="837:43" pos:end="837:47">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="839:21" pos:end="849:21">{<block_content pos:start="841:25" pos:end="847:43">

                        <decl_stmt pos:start="841:25" pos:end="841:58"><decl pos:start="841:25" pos:end="841:57"><type pos:start="841:25" pos:end="841:32"><name pos:start="841:25" pos:end="841:32">TCGv_i32</name></type> <name pos:start="841:34" pos:end="841:36">tmp</name> <init pos:start="841:38" pos:end="841:57">= <expr pos:start="841:40" pos:end="841:57"><call pos:start="841:40" pos:end="841:57"><name pos:start="841:40" pos:end="841:55">tcg_temp_new_i32</name><argument_list pos:start="841:56" pos:end="841:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="843:25" pos:end="843:63"><expr pos:start="843:25" pos:end="843:62"><call pos:start="843:25" pos:end="843:62"><name pos:start="843:25" pos:end="843:40">tcg_gen_shli_i32</name><argument_list pos:start="843:41" pos:end="843:62">(<argument pos:start="843:42" pos:end="843:44"><expr pos:start="843:42" pos:end="843:44"><name pos:start="843:42" pos:end="843:44">tmp</name></expr></argument>, <argument pos:start="843:47" pos:end="843:58"><expr pos:start="843:47" pos:end="843:58"><name pos:start="843:47" pos:end="843:58"><name pos:start="843:47" pos:end="843:51">cpu_R</name><index pos:start="843:52" pos:end="843:58">[<expr pos:start="843:53" pos:end="843:57"><name pos:start="843:53" pos:end="843:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="843:61" pos:end="843:61"><expr pos:start="843:61" pos:end="843:61"><literal type="number" pos:start="843:61" pos:end="843:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="845:25" pos:end="845:53"><expr pos:start="845:25" pos:end="845:52"><call pos:start="845:25" pos:end="845:52"><name pos:start="845:25" pos:end="845:43">gen_right_shift_sar</name><argument_list pos:start="845:44" pos:end="845:52">(<argument pos:start="845:45" pos:end="845:46"><expr pos:start="845:45" pos:end="845:46"><name pos:start="845:45" pos:end="845:46">dc</name></expr></argument>, <argument pos:start="845:49" pos:end="845:51"><expr pos:start="845:49" pos:end="845:51"><name pos:start="845:49" pos:end="845:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="847:25" pos:end="847:43"><expr pos:start="847:25" pos:end="847:42"><call pos:start="847:25" pos:end="847:42"><name pos:start="847:25" pos:end="847:37">tcg_temp_free</name><argument_list pos:start="847:38" pos:end="847:42">(<argument pos:start="847:39" pos:end="847:41"><expr pos:start="847:39" pos:end="847:41"><name pos:start="847:39" pos:end="847:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="851:21" pos:end="851:26">break;</break>



                <case pos:start="855:17" pos:end="855:23">case <expr pos:start="855:22" pos:end="855:22"><literal type="number" pos:start="855:22" pos:end="855:22">3</literal></expr>:</case> <comment type="block" pos:start="855:25" pos:end="855:33">/*SSA8B*/</comment>

                    <expr_stmt pos:start="857:21" pos:end="857:49"><expr pos:start="857:21" pos:end="857:48"><call pos:start="857:21" pos:end="857:48"><name pos:start="857:21" pos:end="857:37">gen_window_check1</name><argument_list pos:start="857:38" pos:end="857:48">(<argument pos:start="857:39" pos:end="857:40"><expr pos:start="857:39" pos:end="857:40"><name pos:start="857:39" pos:end="857:40">dc</name></expr></argument>, <argument pos:start="857:43" pos:end="857:47"><expr pos:start="857:43" pos:end="857:47"><name pos:start="857:43" pos:end="857:47">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="859:21" pos:end="869:21">{<block_content pos:start="861:25" pos:end="867:43">

                        <decl_stmt pos:start="861:25" pos:end="861:58"><decl pos:start="861:25" pos:end="861:57"><type pos:start="861:25" pos:end="861:32"><name pos:start="861:25" pos:end="861:32">TCGv_i32</name></type> <name pos:start="861:34" pos:end="861:36">tmp</name> <init pos:start="861:38" pos:end="861:57">= <expr pos:start="861:40" pos:end="861:57"><call pos:start="861:40" pos:end="861:57"><name pos:start="861:40" pos:end="861:55">tcg_temp_new_i32</name><argument_list pos:start="861:56" pos:end="861:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="863:25" pos:end="863:63"><expr pos:start="863:25" pos:end="863:62"><call pos:start="863:25" pos:end="863:62"><name pos:start="863:25" pos:end="863:40">tcg_gen_shli_i32</name><argument_list pos:start="863:41" pos:end="863:62">(<argument pos:start="863:42" pos:end="863:44"><expr pos:start="863:42" pos:end="863:44"><name pos:start="863:42" pos:end="863:44">tmp</name></expr></argument>, <argument pos:start="863:47" pos:end="863:58"><expr pos:start="863:47" pos:end="863:58"><name pos:start="863:47" pos:end="863:58"><name pos:start="863:47" pos:end="863:51">cpu_R</name><index pos:start="863:52" pos:end="863:58">[<expr pos:start="863:53" pos:end="863:57"><name pos:start="863:53" pos:end="863:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="863:61" pos:end="863:61"><expr pos:start="863:61" pos:end="863:61"><literal type="number" pos:start="863:61" pos:end="863:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="865:25" pos:end="865:52"><expr pos:start="865:25" pos:end="865:51"><call pos:start="865:25" pos:end="865:51"><name pos:start="865:25" pos:end="865:42">gen_left_shift_sar</name><argument_list pos:start="865:43" pos:end="865:51">(<argument pos:start="865:44" pos:end="865:45"><expr pos:start="865:44" pos:end="865:45"><name pos:start="865:44" pos:end="865:45">dc</name></expr></argument>, <argument pos:start="865:48" pos:end="865:50"><expr pos:start="865:48" pos:end="865:50"><name pos:start="865:48" pos:end="865:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="867:25" pos:end="867:43"><expr pos:start="867:25" pos:end="867:42"><call pos:start="867:25" pos:end="867:42"><name pos:start="867:25" pos:end="867:37">tcg_temp_free</name><argument_list pos:start="867:38" pos:end="867:42">(<argument pos:start="867:39" pos:end="867:41"><expr pos:start="867:39" pos:end="867:41"><name pos:start="867:39" pos:end="867:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="871:21" pos:end="871:26">break;</break>



                <case pos:start="875:17" pos:end="875:23">case <expr pos:start="875:22" pos:end="875:22"><literal type="number" pos:start="875:22" pos:end="875:22">4</literal></expr>:</case> <comment type="block" pos:start="875:25" pos:end="875:32">/*SSAI*/</comment>

                    <block pos:start="877:21" pos:end="887:21">{<block_content pos:start="879:25" pos:end="885:43">

                        <decl_stmt pos:start="879:25" pos:end="881:60"><decl pos:start="879:25" pos:end="881:59"><type pos:start="879:25" pos:end="879:32"><name pos:start="879:25" pos:end="879:32">TCGv_i32</name></type> <name pos:start="879:34" pos:end="879:36">tmp</name> <init pos:start="879:38" pos:end="881:59">= <expr pos:start="879:40" pos:end="881:59"><call pos:start="879:40" pos:end="881:59"><name pos:start="879:40" pos:end="879:52">tcg_const_i32</name><argument_list pos:start="879:53" pos:end="881:59">(

                                <argument pos:start="881:33" pos:end="881:58"><expr pos:start="881:33" pos:end="881:58"><name pos:start="881:33" pos:end="881:37">RRR_S</name> <operator pos:start="881:39" pos:end="881:39">|</operator> <operator pos:start="881:41" pos:end="881:41">(</operator><operator pos:start="881:42" pos:end="881:42">(</operator><name pos:start="881:43" pos:end="881:47">RRR_T</name> <operator pos:start="881:49" pos:end="881:49">&amp;</operator> <literal type="number" pos:start="881:51" pos:end="881:51">1</literal><operator pos:start="881:52" pos:end="881:52">)</operator> <operator pos:start="881:54" pos:end="881:55">&lt;&lt;</operator> <literal type="number" pos:start="881:57" pos:end="881:57">4</literal><operator pos:start="881:58" pos:end="881:58">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="883:25" pos:end="883:53"><expr pos:start="883:25" pos:end="883:52"><call pos:start="883:25" pos:end="883:52"><name pos:start="883:25" pos:end="883:43">gen_right_shift_sar</name><argument_list pos:start="883:44" pos:end="883:52">(<argument pos:start="883:45" pos:end="883:46"><expr pos:start="883:45" pos:end="883:46"><name pos:start="883:45" pos:end="883:46">dc</name></expr></argument>, <argument pos:start="883:49" pos:end="883:51"><expr pos:start="883:49" pos:end="883:51"><name pos:start="883:49" pos:end="883:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="885:25" pos:end="885:43"><expr pos:start="885:25" pos:end="885:42"><call pos:start="885:25" pos:end="885:42"><name pos:start="885:25" pos:end="885:37">tcg_temp_free</name><argument_list pos:start="885:38" pos:end="885:42">(<argument pos:start="885:39" pos:end="885:41"><expr pos:start="885:39" pos:end="885:41"><name pos:start="885:39" pos:end="885:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="889:21" pos:end="889:26">break;</break>



                <case pos:start="893:17" pos:end="893:23">case <expr pos:start="893:22" pos:end="893:22"><literal type="number" pos:start="893:22" pos:end="893:22">6</literal></expr>:</case> <comment type="block" pos:start="893:25" pos:end="893:31">/*RER*/</comment>

                    <expr_stmt pos:start="895:21" pos:end="895:26"><expr pos:start="895:21" pos:end="895:25"><call pos:start="895:21" pos:end="895:25"><name pos:start="895:21" pos:end="895:23">TBD</name><argument_list pos:start="895:24" pos:end="895:25">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="897:21" pos:end="897:26">break;</break>



                <case pos:start="901:17" pos:end="901:23">case <expr pos:start="901:22" pos:end="901:22"><literal type="number" pos:start="901:22" pos:end="901:22">7</literal></expr>:</case> <comment type="block" pos:start="901:25" pos:end="901:31">/*WER*/</comment>

                    <expr_stmt pos:start="903:21" pos:end="903:26"><expr pos:start="903:21" pos:end="903:25"><call pos:start="903:21" pos:end="903:25"><name pos:start="903:21" pos:end="903:23">TBD</name><argument_list pos:start="903:24" pos:end="903:25">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="905:21" pos:end="905:26">break;</break>



                <case pos:start="909:17" pos:end="909:23">case <expr pos:start="909:22" pos:end="909:22"><literal type="number" pos:start="909:22" pos:end="909:22">8</literal></expr>:</case> <comment type="block" pos:start="909:25" pos:end="909:33">/*ROTWw*/</comment>

                    <expr_stmt pos:start="911:21" pos:end="911:64"><expr pos:start="911:21" pos:end="911:63"><call pos:start="911:21" pos:end="911:63"><name pos:start="911:21" pos:end="911:30">HAS_OPTION</name><argument_list pos:start="911:31" pos:end="911:63">(<argument pos:start="911:32" pos:end="911:62"><expr pos:start="911:32" pos:end="911:62"><name pos:start="911:32" pos:end="911:62">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="913:21" pos:end="913:44"><expr pos:start="913:21" pos:end="913:43"><call pos:start="913:21" pos:end="913:43"><name pos:start="913:21" pos:end="913:39">gen_check_privilege</name><argument_list pos:start="913:40" pos:end="913:43">(<argument pos:start="913:41" pos:end="913:42"><expr pos:start="913:41" pos:end="913:42"><name pos:start="913:41" pos:end="913:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="915:21" pos:end="927:21">{<block_content pos:start="917:25" pos:end="925:46">

                        <decl_stmt pos:start="917:25" pos:end="919:72"><decl pos:start="917:25" pos:end="919:71"><type pos:start="917:25" pos:end="917:32"><name pos:start="917:25" pos:end="917:32">TCGv_i32</name></type> <name pos:start="917:34" pos:end="917:36">tmp</name> <init pos:start="917:38" pos:end="919:71">= <expr pos:start="917:40" pos:end="919:71"><call pos:start="917:40" pos:end="919:71"><name pos:start="917:40" pos:end="917:52">tcg_const_i32</name><argument_list pos:start="917:53" pos:end="919:71">(

                                <argument pos:start="919:33" pos:end="919:70"><expr pos:start="919:33" pos:end="919:70"><name pos:start="919:33" pos:end="919:37">RRR_T</name> <operator pos:start="919:39" pos:end="919:39">|</operator> <operator pos:start="919:41" pos:end="919:41">(</operator><ternary pos:start="919:42" pos:end="919:69"><condition pos:start="919:42" pos:end="919:54"><expr pos:start="919:42" pos:end="919:52"><operator pos:start="919:42" pos:end="919:42">(</operator><name pos:start="919:43" pos:end="919:47">RRR_T</name> <operator pos:start="919:49" pos:end="919:49">&amp;</operator> <literal type="number" pos:start="919:51" pos:end="919:51">8</literal><operator pos:start="919:52" pos:end="919:52">)</operator></expr> ?</condition><then pos:start="919:56" pos:end="919:65"> <expr pos:start="919:56" pos:end="919:65"><literal type="number" pos:start="919:56" pos:end="919:65">0xfffffff0</literal></expr> </then><else pos:start="919:67" pos:end="919:69">: <expr pos:start="919:69" pos:end="919:69"><literal type="number" pos:start="919:69" pos:end="919:69">0</literal></expr></else></ternary><operator pos:start="919:70" pos:end="919:70">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="921:25" pos:end="921:45"><expr pos:start="921:25" pos:end="921:44"><call pos:start="921:25" pos:end="921:44"><name pos:start="921:25" pos:end="921:39">gen_helper_rotw</name><argument_list pos:start="921:40" pos:end="921:44">(<argument pos:start="921:41" pos:end="921:43"><expr pos:start="921:41" pos:end="921:43"><name pos:start="921:41" pos:end="921:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="923:25" pos:end="923:43"><expr pos:start="923:25" pos:end="923:42"><call pos:start="923:25" pos:end="923:42"><name pos:start="923:25" pos:end="923:37">tcg_temp_free</name><argument_list pos:start="923:38" pos:end="923:42">(<argument pos:start="923:39" pos:end="923:41"><expr pos:start="923:39" pos:end="923:41"><name pos:start="923:39" pos:end="923:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="925:25" pos:end="925:46"><expr pos:start="925:25" pos:end="925:45"><call pos:start="925:25" pos:end="925:45"><name pos:start="925:25" pos:end="925:41">reset_used_window</name><argument_list pos:start="925:42" pos:end="925:45">(<argument pos:start="925:43" pos:end="925:44"><expr pos:start="925:43" pos:end="925:44"><name pos:start="925:43" pos:end="925:44">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="929:21" pos:end="929:26">break;</break>



                <case pos:start="933:17" pos:end="933:24">case <expr pos:start="933:22" pos:end="933:23"><literal type="number" pos:start="933:22" pos:end="933:23">14</literal></expr>:</case> <comment type="block" pos:start="933:26" pos:end="933:33">/*NSAu*/</comment>

                    <expr_stmt pos:start="935:21" pos:end="935:58"><expr pos:start="935:21" pos:end="935:57"><call pos:start="935:21" pos:end="935:57"><name pos:start="935:21" pos:end="935:30">HAS_OPTION</name><argument_list pos:start="935:31" pos:end="935:57">(<argument pos:start="935:32" pos:end="935:56"><expr pos:start="935:32" pos:end="935:56"><name pos:start="935:32" pos:end="935:56">XTENSA_OPTION_MISC_OP_NSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="937:21" pos:end="937:56"><expr pos:start="937:21" pos:end="937:55"><call pos:start="937:21" pos:end="937:55"><name pos:start="937:21" pos:end="937:37">gen_window_check2</name><argument_list pos:start="937:38" pos:end="937:55">(<argument pos:start="937:39" pos:end="937:40"><expr pos:start="937:39" pos:end="937:40"><name pos:start="937:39" pos:end="937:40">dc</name></expr></argument>, <argument pos:start="937:43" pos:end="937:47"><expr pos:start="937:43" pos:end="937:47"><name pos:start="937:43" pos:end="937:47">RRR_S</name></expr></argument>, <argument pos:start="937:50" pos:end="937:54"><expr pos:start="937:50" pos:end="937:54"><name pos:start="937:50" pos:end="937:54">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="939:21" pos:end="939:63"><expr pos:start="939:21" pos:end="939:62"><call pos:start="939:21" pos:end="939:62"><name pos:start="939:21" pos:end="939:34">gen_helper_nsa</name><argument_list pos:start="939:35" pos:end="939:62">(<argument pos:start="939:36" pos:end="939:47"><expr pos:start="939:36" pos:end="939:47"><name pos:start="939:36" pos:end="939:47"><name pos:start="939:36" pos:end="939:40">cpu_R</name><index pos:start="939:41" pos:end="939:47">[<expr pos:start="939:42" pos:end="939:46"><name pos:start="939:42" pos:end="939:46">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="939:50" pos:end="939:61"><expr pos:start="939:50" pos:end="939:61"><name pos:start="939:50" pos:end="939:61"><name pos:start="939:50" pos:end="939:54">cpu_R</name><index pos:start="939:55" pos:end="939:61">[<expr pos:start="939:56" pos:end="939:60"><name pos:start="939:56" pos:end="939:60">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="941:21" pos:end="941:26">break;</break>



                <case pos:start="945:17" pos:end="945:24">case <expr pos:start="945:22" pos:end="945:23"><literal type="number" pos:start="945:22" pos:end="945:23">15</literal></expr>:</case> <comment type="block" pos:start="945:26" pos:end="945:34">/*NSAUu*/</comment>

                    <expr_stmt pos:start="947:21" pos:end="947:58"><expr pos:start="947:21" pos:end="947:57"><call pos:start="947:21" pos:end="947:57"><name pos:start="947:21" pos:end="947:30">HAS_OPTION</name><argument_list pos:start="947:31" pos:end="947:57">(<argument pos:start="947:32" pos:end="947:56"><expr pos:start="947:32" pos:end="947:56"><name pos:start="947:32" pos:end="947:56">XTENSA_OPTION_MISC_OP_NSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="949:21" pos:end="949:56"><expr pos:start="949:21" pos:end="949:55"><call pos:start="949:21" pos:end="949:55"><name pos:start="949:21" pos:end="949:37">gen_window_check2</name><argument_list pos:start="949:38" pos:end="949:55">(<argument pos:start="949:39" pos:end="949:40"><expr pos:start="949:39" pos:end="949:40"><name pos:start="949:39" pos:end="949:40">dc</name></expr></argument>, <argument pos:start="949:43" pos:end="949:47"><expr pos:start="949:43" pos:end="949:47"><name pos:start="949:43" pos:end="949:47">RRR_S</name></expr></argument>, <argument pos:start="949:50" pos:end="949:54"><expr pos:start="949:50" pos:end="949:54"><name pos:start="949:50" pos:end="949:54">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="951:21" pos:end="951:64"><expr pos:start="951:21" pos:end="951:63"><call pos:start="951:21" pos:end="951:63"><name pos:start="951:21" pos:end="951:35">gen_helper_nsau</name><argument_list pos:start="951:36" pos:end="951:63">(<argument pos:start="951:37" pos:end="951:48"><expr pos:start="951:37" pos:end="951:48"><name pos:start="951:37" pos:end="951:48"><name pos:start="951:37" pos:end="951:41">cpu_R</name><index pos:start="951:42" pos:end="951:48">[<expr pos:start="951:43" pos:end="951:47"><name pos:start="951:43" pos:end="951:47">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="951:51" pos:end="951:62"><expr pos:start="951:51" pos:end="951:62"><name pos:start="951:51" pos:end="951:62"><name pos:start="951:51" pos:end="951:55">cpu_R</name><index pos:start="951:56" pos:end="951:62">[<expr pos:start="951:57" pos:end="951:61"><name pos:start="951:57" pos:end="951:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="953:21" pos:end="953:26">break;</break>



                <default pos:start="957:17" pos:end="957:24">default:</default> <comment type="block" pos:start="957:26" pos:end="957:37">/*reserved*/</comment>

                    <expr_stmt pos:start="959:21" pos:end="959:31"><expr pos:start="959:21" pos:end="959:30"><call pos:start="959:21" pos:end="959:30"><name pos:start="959:21" pos:end="959:28">RESERVED</name><argument_list pos:start="959:29" pos:end="959:30">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="961:21" pos:end="961:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="965:17" pos:end="965:22">break;</break>



            <case pos:start="969:13" pos:end="969:19">case <expr pos:start="969:18" pos:end="969:18"><literal type="number" pos:start="969:18" pos:end="969:18">5</literal></expr>:</case> <comment type="block" pos:start="969:21" pos:end="969:27">/*TLB*/</comment>

                <expr_stmt pos:start="971:17" pos:end="977:77"><expr pos:start="971:17" pos:end="977:76"><call pos:start="971:17" pos:end="977:76"><name pos:start="971:17" pos:end="971:31">HAS_OPTION_BITS</name><argument_list pos:start="971:32" pos:end="977:76">(

                        <argument pos:start="973:25" pos:end="977:75"><expr pos:start="973:25" pos:end="977:75"><call pos:start="973:25" pos:end="973:60"><name pos:start="973:25" pos:end="973:41">XTENSA_OPTION_BIT</name><argument_list pos:start="973:42" pos:end="973:60">(<argument pos:start="973:43" pos:end="973:59"><expr pos:start="973:43" pos:end="973:59"><name pos:start="973:43" pos:end="973:59">XTENSA_OPTION_MMU</name></expr></argument>)</argument_list></call> <operator pos:start="973:62" pos:end="973:62">|</operator>

                        <call pos:start="975:25" pos:end="975:74"><name pos:start="975:25" pos:end="975:41">XTENSA_OPTION_BIT</name><argument_list pos:start="975:42" pos:end="975:74">(<argument pos:start="975:43" pos:end="975:73"><expr pos:start="975:43" pos:end="975:73"><name pos:start="975:43" pos:end="975:73">XTENSA_OPTION_REGION_PROTECTION</name></expr></argument>)</argument_list></call> <operator pos:start="975:76" pos:end="975:76">|</operator>

                        <call pos:start="977:25" pos:end="977:75"><name pos:start="977:25" pos:end="977:41">XTENSA_OPTION_BIT</name><argument_list pos:start="977:42" pos:end="977:75">(<argument pos:start="977:43" pos:end="977:74"><expr pos:start="977:43" pos:end="977:74"><name pos:start="977:43" pos:end="977:74">XTENSA_OPTION_REGION_TRANSLATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="979:17" pos:end="979:40"><expr pos:start="979:17" pos:end="979:39"><call pos:start="979:17" pos:end="979:39"><name pos:start="979:17" pos:end="979:35">gen_check_privilege</name><argument_list pos:start="979:36" pos:end="979:39">(<argument pos:start="979:37" pos:end="979:38"><expr pos:start="979:37" pos:end="979:38"><name pos:start="979:37" pos:end="979:38">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="981:17" pos:end="981:52"><expr pos:start="981:17" pos:end="981:51"><call pos:start="981:17" pos:end="981:51"><name pos:start="981:17" pos:end="981:33">gen_window_check2</name><argument_list pos:start="981:34" pos:end="981:51">(<argument pos:start="981:35" pos:end="981:36"><expr pos:start="981:35" pos:end="981:36"><name pos:start="981:35" pos:end="981:36">dc</name></expr></argument>, <argument pos:start="981:39" pos:end="981:43"><expr pos:start="981:39" pos:end="981:43"><name pos:start="981:39" pos:end="981:43">RRR_S</name></expr></argument>, <argument pos:start="981:46" pos:end="981:50"><expr pos:start="981:46" pos:end="981:50"><name pos:start="981:46" pos:end="981:50">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="983:17" pos:end="1053:17">{<block_content pos:start="985:21" pos:end="1051:40">

                    <decl_stmt pos:start="985:21" pos:end="985:68"><decl pos:start="985:21" pos:end="985:67"><type pos:start="985:21" pos:end="985:28"><name pos:start="985:21" pos:end="985:28">TCGv_i32</name></type> <name pos:start="985:30" pos:end="985:33">dtlb</name> <init pos:start="985:35" pos:end="985:67">= <expr pos:start="985:37" pos:end="985:67"><call pos:start="985:37" pos:end="985:67"><name pos:start="985:37" pos:end="985:49">tcg_const_i32</name><argument_list pos:start="985:50" pos:end="985:67">(<argument pos:start="985:51" pos:end="985:66"><expr pos:start="985:51" pos:end="985:66"><operator pos:start="985:51" pos:end="985:51">(</operator><name pos:start="985:52" pos:end="985:56">RRR_R</name> <operator pos:start="985:58" pos:end="985:58">&amp;</operator> <literal type="number" pos:start="985:60" pos:end="985:60">8</literal><operator pos:start="985:61" pos:end="985:61">)</operator> <operator pos:start="985:63" pos:end="985:64">!=</operator> <literal type="number" pos:start="985:66" pos:end="985:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <switch pos:start="989:21" pos:end="1049:21">switch <condition pos:start="989:28" pos:end="989:38">(<expr pos:start="989:29" pos:end="989:37"><name pos:start="989:29" pos:end="989:33">RRR_R</name> <operator pos:start="989:35" pos:end="989:35">&amp;</operator> <literal type="number" pos:start="989:37" pos:end="989:37">7</literal></expr>)</condition> <block pos:start="989:40" pos:end="1049:21">{<block_content pos:start="991:21" pos:end="1047:30">

                    <case pos:start="991:21" pos:end="991:27">case <expr pos:start="991:26" pos:end="991:26"><literal type="number" pos:start="991:26" pos:end="991:26">3</literal></expr>:</case> <comment type="block" pos:start="991:29" pos:end="991:38">/*RITLB0*/</comment> <comment type="block" pos:start="991:40" pos:end="991:49">/*RDTLB0*/</comment>

                        <expr_stmt pos:start="993:25" pos:end="993:75"><expr pos:start="993:25" pos:end="993:74"><call pos:start="993:25" pos:end="993:74"><name pos:start="993:25" pos:end="993:40">gen_helper_rtlb0</name><argument_list pos:start="993:41" pos:end="993:74">(<argument pos:start="993:42" pos:end="993:53"><expr pos:start="993:42" pos:end="993:53"><name pos:start="993:42" pos:end="993:53"><name pos:start="993:42" pos:end="993:46">cpu_R</name><index pos:start="993:47" pos:end="993:53">[<expr pos:start="993:48" pos:end="993:52"><name pos:start="993:48" pos:end="993:52">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="993:56" pos:end="993:67"><expr pos:start="993:56" pos:end="993:67"><name pos:start="993:56" pos:end="993:67"><name pos:start="993:56" pos:end="993:60">cpu_R</name><index pos:start="993:61" pos:end="993:67">[<expr pos:start="993:62" pos:end="993:66"><name pos:start="993:62" pos:end="993:66">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="993:70" pos:end="993:73"><expr pos:start="993:70" pos:end="993:73"><name pos:start="993:70" pos:end="993:73">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="995:25" pos:end="995:30">break;</break>



                    <case pos:start="999:21" pos:end="999:27">case <expr pos:start="999:26" pos:end="999:26"><literal type="number" pos:start="999:26" pos:end="999:26">4</literal></expr>:</case> <comment type="block" pos:start="999:29" pos:end="999:37">/*IITLB*/</comment> <comment type="block" pos:start="999:39" pos:end="999:47">/*IDTLB*/</comment>

                        <expr_stmt pos:start="1001:25" pos:end="1001:60"><expr pos:start="1001:25" pos:end="1001:59"><call pos:start="1001:25" pos:end="1001:59"><name pos:start="1001:25" pos:end="1001:39">gen_helper_itlb</name><argument_list pos:start="1001:40" pos:end="1001:59">(<argument pos:start="1001:41" pos:end="1001:52"><expr pos:start="1001:41" pos:end="1001:52"><name pos:start="1001:41" pos:end="1001:52"><name pos:start="1001:41" pos:end="1001:45">cpu_R</name><index pos:start="1001:46" pos:end="1001:52">[<expr pos:start="1001:47" pos:end="1001:51"><name pos:start="1001:47" pos:end="1001:51">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1001:55" pos:end="1001:58"><expr pos:start="1001:55" pos:end="1001:58"><name pos:start="1001:55" pos:end="1001:58">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="1003:25" pos:end="1003:74">/* This could change memory mapping, so exit tb */</comment>

                        <expr_stmt pos:start="1005:25" pos:end="1005:57"><expr pos:start="1005:25" pos:end="1005:56"><call pos:start="1005:25" pos:end="1005:56"><name pos:start="1005:25" pos:end="1005:48">gen_jumpi_check_loop_end</name><argument_list pos:start="1005:49" pos:end="1005:56">(<argument pos:start="1005:50" pos:end="1005:51"><expr pos:start="1005:50" pos:end="1005:51"><name pos:start="1005:50" pos:end="1005:51">dc</name></expr></argument>, <argument pos:start="1005:54" pos:end="1005:55"><expr pos:start="1005:54" pos:end="1005:55"><operator pos:start="1005:54" pos:end="1005:54">-</operator><literal type="number" pos:start="1005:55" pos:end="1005:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1007:25" pos:end="1007:30">break;</break>



                    <case pos:start="1011:21" pos:end="1011:27">case <expr pos:start="1011:26" pos:end="1011:26"><literal type="number" pos:start="1011:26" pos:end="1011:26">5</literal></expr>:</case> <comment type="block" pos:start="1011:29" pos:end="1011:37">/*PITLB*/</comment> <comment type="block" pos:start="1011:39" pos:end="1011:47">/*PDTLB*/</comment>

                        <expr_stmt pos:start="1013:25" pos:end="1013:57"><expr pos:start="1013:25" pos:end="1013:56"><call pos:start="1013:25" pos:end="1013:56"><name pos:start="1013:25" pos:end="1013:40">tcg_gen_movi_i32</name><argument_list pos:start="1013:41" pos:end="1013:56">(<argument pos:start="1013:42" pos:end="1013:47"><expr pos:start="1013:42" pos:end="1013:47"><name pos:start="1013:42" pos:end="1013:47">cpu_pc</name></expr></argument>, <argument pos:start="1013:50" pos:end="1013:55"><expr pos:start="1013:50" pos:end="1013:55"><name pos:start="1013:50" pos:end="1013:55"><name pos:start="1013:50" pos:end="1013:51">dc</name><operator pos:start="1013:52" pos:end="1013:53">-&gt;</operator><name pos:start="1013:54" pos:end="1013:55">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1015:25" pos:end="1015:74"><expr pos:start="1015:25" pos:end="1015:73"><call pos:start="1015:25" pos:end="1015:73"><name pos:start="1015:25" pos:end="1015:39">gen_helper_ptlb</name><argument_list pos:start="1015:40" pos:end="1015:73">(<argument pos:start="1015:41" pos:end="1015:52"><expr pos:start="1015:41" pos:end="1015:52"><name pos:start="1015:41" pos:end="1015:52"><name pos:start="1015:41" pos:end="1015:45">cpu_R</name><index pos:start="1015:46" pos:end="1015:52">[<expr pos:start="1015:47" pos:end="1015:51"><name pos:start="1015:47" pos:end="1015:51">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1015:55" pos:end="1015:66"><expr pos:start="1015:55" pos:end="1015:66"><name pos:start="1015:55" pos:end="1015:66"><name pos:start="1015:55" pos:end="1015:59">cpu_R</name><index pos:start="1015:60" pos:end="1015:66">[<expr pos:start="1015:61" pos:end="1015:65"><name pos:start="1015:61" pos:end="1015:65">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1015:69" pos:end="1015:72"><expr pos:start="1015:69" pos:end="1015:72"><name pos:start="1015:69" pos:end="1015:72">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1017:25" pos:end="1017:30">break;</break>



                    <case pos:start="1021:21" pos:end="1021:27">case <expr pos:start="1021:26" pos:end="1021:26"><literal type="number" pos:start="1021:26" pos:end="1021:26">6</literal></expr>:</case> <comment type="block" pos:start="1021:29" pos:end="1021:37">/*WITLB*/</comment> <comment type="block" pos:start="1021:39" pos:end="1021:47">/*WDTLB*/</comment>

                        <expr_stmt pos:start="1023:25" pos:end="1023:74"><expr pos:start="1023:25" pos:end="1023:73"><call pos:start="1023:25" pos:end="1023:73"><name pos:start="1023:25" pos:end="1023:39">gen_helper_wtlb</name><argument_list pos:start="1023:40" pos:end="1023:73">(<argument pos:start="1023:41" pos:end="1023:52"><expr pos:start="1023:41" pos:end="1023:52"><name pos:start="1023:41" pos:end="1023:52"><name pos:start="1023:41" pos:end="1023:45">cpu_R</name><index pos:start="1023:46" pos:end="1023:52">[<expr pos:start="1023:47" pos:end="1023:51"><name pos:start="1023:47" pos:end="1023:51">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1023:55" pos:end="1023:66"><expr pos:start="1023:55" pos:end="1023:66"><name pos:start="1023:55" pos:end="1023:66"><name pos:start="1023:55" pos:end="1023:59">cpu_R</name><index pos:start="1023:60" pos:end="1023:66">[<expr pos:start="1023:61" pos:end="1023:65"><name pos:start="1023:61" pos:end="1023:65">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1023:69" pos:end="1023:72"><expr pos:start="1023:69" pos:end="1023:72"><name pos:start="1023:69" pos:end="1023:72">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="1025:25" pos:end="1025:74">/* This could change memory mapping, so exit tb */</comment>

                        <expr_stmt pos:start="1027:25" pos:end="1027:57"><expr pos:start="1027:25" pos:end="1027:56"><call pos:start="1027:25" pos:end="1027:56"><name pos:start="1027:25" pos:end="1027:48">gen_jumpi_check_loop_end</name><argument_list pos:start="1027:49" pos:end="1027:56">(<argument pos:start="1027:50" pos:end="1027:51"><expr pos:start="1027:50" pos:end="1027:51"><name pos:start="1027:50" pos:end="1027:51">dc</name></expr></argument>, <argument pos:start="1027:54" pos:end="1027:55"><expr pos:start="1027:54" pos:end="1027:55"><operator pos:start="1027:54" pos:end="1027:54">-</operator><literal type="number" pos:start="1027:55" pos:end="1027:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1029:25" pos:end="1029:30">break;</break>



                    <case pos:start="1033:21" pos:end="1033:27">case <expr pos:start="1033:26" pos:end="1033:26"><literal type="number" pos:start="1033:26" pos:end="1033:26">7</literal></expr>:</case> <comment type="block" pos:start="1033:29" pos:end="1033:38">/*RITLB1*/</comment> <comment type="block" pos:start="1033:40" pos:end="1033:49">/*RDTLB1*/</comment>

                        <expr_stmt pos:start="1035:25" pos:end="1035:75"><expr pos:start="1035:25" pos:end="1035:74"><call pos:start="1035:25" pos:end="1035:74"><name pos:start="1035:25" pos:end="1035:40">gen_helper_rtlb1</name><argument_list pos:start="1035:41" pos:end="1035:74">(<argument pos:start="1035:42" pos:end="1035:53"><expr pos:start="1035:42" pos:end="1035:53"><name pos:start="1035:42" pos:end="1035:53"><name pos:start="1035:42" pos:end="1035:46">cpu_R</name><index pos:start="1035:47" pos:end="1035:53">[<expr pos:start="1035:48" pos:end="1035:52"><name pos:start="1035:48" pos:end="1035:52">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1035:56" pos:end="1035:67"><expr pos:start="1035:56" pos:end="1035:67"><name pos:start="1035:56" pos:end="1035:67"><name pos:start="1035:56" pos:end="1035:60">cpu_R</name><index pos:start="1035:61" pos:end="1035:67">[<expr pos:start="1035:62" pos:end="1035:66"><name pos:start="1035:62" pos:end="1035:66">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1035:70" pos:end="1035:73"><expr pos:start="1035:70" pos:end="1035:73"><name pos:start="1035:70" pos:end="1035:73">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1037:25" pos:end="1037:30">break;</break>



                    <default pos:start="1041:21" pos:end="1041:28">default:</default>

                        <expr_stmt pos:start="1043:25" pos:end="1043:44"><expr pos:start="1043:25" pos:end="1043:43"><call pos:start="1043:25" pos:end="1043:43"><name pos:start="1043:25" pos:end="1043:37">tcg_temp_free</name><argument_list pos:start="1043:38" pos:end="1043:43">(<argument pos:start="1043:39" pos:end="1043:42"><expr pos:start="1043:39" pos:end="1043:42"><name pos:start="1043:39" pos:end="1043:42">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1045:25" pos:end="1045:35"><expr pos:start="1045:25" pos:end="1045:34"><call pos:start="1045:25" pos:end="1045:34"><name pos:start="1045:25" pos:end="1045:32">RESERVED</name><argument_list pos:start="1045:33" pos:end="1045:34">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1047:25" pos:end="1047:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="1051:21" pos:end="1051:40"><expr pos:start="1051:21" pos:end="1051:39"><call pos:start="1051:21" pos:end="1051:39"><name pos:start="1051:21" pos:end="1051:33">tcg_temp_free</name><argument_list pos:start="1051:34" pos:end="1051:39">(<argument pos:start="1051:35" pos:end="1051:38"><expr pos:start="1051:35" pos:end="1051:38"><name pos:start="1051:35" pos:end="1051:38">dtlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1055:17" pos:end="1055:22">break;</break>



            <case pos:start="1059:13" pos:end="1059:19">case <expr pos:start="1059:18" pos:end="1059:18"><literal type="number" pos:start="1059:18" pos:end="1059:18">6</literal></expr>:</case> <comment type="block" pos:start="1059:21" pos:end="1059:27">/*RT0*/</comment>

                <expr_stmt pos:start="1061:17" pos:end="1061:52"><expr pos:start="1061:17" pos:end="1061:51"><call pos:start="1061:17" pos:end="1061:51"><name pos:start="1061:17" pos:end="1061:33">gen_window_check2</name><argument_list pos:start="1061:34" pos:end="1061:51">(<argument pos:start="1061:35" pos:end="1061:36"><expr pos:start="1061:35" pos:end="1061:36"><name pos:start="1061:35" pos:end="1061:36">dc</name></expr></argument>, <argument pos:start="1061:39" pos:end="1061:43"><expr pos:start="1061:39" pos:end="1061:43"><name pos:start="1061:39" pos:end="1061:43">RRR_R</name></expr></argument>, <argument pos:start="1061:46" pos:end="1061:50"><expr pos:start="1061:46" pos:end="1061:50"><name pos:start="1061:46" pos:end="1061:50">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="1063:17" pos:end="1101:17">switch <condition pos:start="1063:24" pos:end="1063:30">(<expr pos:start="1063:25" pos:end="1063:29"><name pos:start="1063:25" pos:end="1063:29">RRR_S</name></expr>)</condition> <block pos:start="1063:32" pos:end="1101:17">{<block_content pos:start="1065:17" pos:end="1099:26">

                <case pos:start="1065:17" pos:end="1065:23">case <expr pos:start="1065:22" pos:end="1065:22"><literal type="number" pos:start="1065:22" pos:end="1065:22">0</literal></expr>:</case> <comment type="block" pos:start="1065:25" pos:end="1065:31">/*NEG*/</comment>

                    <expr_stmt pos:start="1067:21" pos:end="1067:64"><expr pos:start="1067:21" pos:end="1067:63"><call pos:start="1067:21" pos:end="1067:63"><name pos:start="1067:21" pos:end="1067:35">tcg_gen_neg_i32</name><argument_list pos:start="1067:36" pos:end="1067:63">(<argument pos:start="1067:37" pos:end="1067:48"><expr pos:start="1067:37" pos:end="1067:48"><name pos:start="1067:37" pos:end="1067:48"><name pos:start="1067:37" pos:end="1067:41">cpu_R</name><index pos:start="1067:42" pos:end="1067:48">[<expr pos:start="1067:43" pos:end="1067:47"><name pos:start="1067:43" pos:end="1067:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1067:51" pos:end="1067:62"><expr pos:start="1067:51" pos:end="1067:62"><name pos:start="1067:51" pos:end="1067:62"><name pos:start="1067:51" pos:end="1067:55">cpu_R</name><index pos:start="1067:56" pos:end="1067:62">[<expr pos:start="1067:57" pos:end="1067:61"><name pos:start="1067:57" pos:end="1067:61">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1069:21" pos:end="1069:26">break;</break>



                <case pos:start="1073:17" pos:end="1073:23">case <expr pos:start="1073:22" pos:end="1073:22"><literal type="number" pos:start="1073:22" pos:end="1073:22">1</literal></expr>:</case> <comment type="block" pos:start="1073:25" pos:end="1073:31">/*ABS*/</comment>

                    <block pos:start="1075:21" pos:end="1089:21">{<block_content pos:start="1077:25" pos:end="1087:45">

                        <decl_stmt pos:start="1077:25" pos:end="1077:52"><decl pos:start="1077:25" pos:end="1077:51"><type pos:start="1077:25" pos:end="1077:27"><name pos:start="1077:25" pos:end="1077:27">int</name></type> <name pos:start="1077:29" pos:end="1077:33">label</name> <init pos:start="1077:35" pos:end="1077:51">= <expr pos:start="1077:37" pos:end="1077:51"><call pos:start="1077:37" pos:end="1077:51"><name pos:start="1077:37" pos:end="1077:49">gen_new_label</name><argument_list pos:start="1077:50" pos:end="1077:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="1079:25" pos:end="1079:68"><expr pos:start="1079:25" pos:end="1079:67"><call pos:start="1079:25" pos:end="1079:67"><name pos:start="1079:25" pos:end="1079:39">tcg_gen_mov_i32</name><argument_list pos:start="1079:40" pos:end="1079:67">(<argument pos:start="1079:41" pos:end="1079:52"><expr pos:start="1079:41" pos:end="1079:52"><name pos:start="1079:41" pos:end="1079:52"><name pos:start="1079:41" pos:end="1079:45">cpu_R</name><index pos:start="1079:46" pos:end="1079:52">[<expr pos:start="1079:47" pos:end="1079:51"><name pos:start="1079:47" pos:end="1079:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1079:55" pos:end="1079:66"><expr pos:start="1079:55" pos:end="1079:66"><name pos:start="1079:55" pos:end="1079:66"><name pos:start="1079:55" pos:end="1079:59">cpu_R</name><index pos:start="1079:60" pos:end="1079:66">[<expr pos:start="1079:61" pos:end="1079:65"><name pos:start="1079:61" pos:end="1079:65">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1081:25" pos:end="1083:69"><expr pos:start="1081:25" pos:end="1083:68"><call pos:start="1081:25" pos:end="1083:68"><name pos:start="1081:25" pos:end="1081:43">tcg_gen_brcondi_i32</name><argument_list pos:start="1081:44" pos:end="1083:68">(

                                <argument pos:start="1083:33" pos:end="1083:43"><expr pos:start="1083:33" pos:end="1083:43"><name pos:start="1083:33" pos:end="1083:43">TCG_COND_GE</name></expr></argument>, <argument pos:start="1083:46" pos:end="1083:57"><expr pos:start="1083:46" pos:end="1083:57"><name pos:start="1083:46" pos:end="1083:57"><name pos:start="1083:46" pos:end="1083:50">cpu_R</name><index pos:start="1083:51" pos:end="1083:57">[<expr pos:start="1083:52" pos:end="1083:56"><name pos:start="1083:52" pos:end="1083:56">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1083:60" pos:end="1083:60"><expr pos:start="1083:60" pos:end="1083:60"><literal type="number" pos:start="1083:60" pos:end="1083:60">0</literal></expr></argument>, <argument pos:start="1083:63" pos:end="1083:67"><expr pos:start="1083:63" pos:end="1083:67"><name pos:start="1083:63" pos:end="1083:67">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1085:25" pos:end="1085:68"><expr pos:start="1085:25" pos:end="1085:67"><call pos:start="1085:25" pos:end="1085:67"><name pos:start="1085:25" pos:end="1085:39">tcg_gen_neg_i32</name><argument_list pos:start="1085:40" pos:end="1085:67">(<argument pos:start="1085:41" pos:end="1085:52"><expr pos:start="1085:41" pos:end="1085:52"><name pos:start="1085:41" pos:end="1085:52"><name pos:start="1085:41" pos:end="1085:45">cpu_R</name><index pos:start="1085:46" pos:end="1085:52">[<expr pos:start="1085:47" pos:end="1085:51"><name pos:start="1085:47" pos:end="1085:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1085:55" pos:end="1085:66"><expr pos:start="1085:55" pos:end="1085:66"><name pos:start="1085:55" pos:end="1085:66"><name pos:start="1085:55" pos:end="1085:59">cpu_R</name><index pos:start="1085:60" pos:end="1085:66">[<expr pos:start="1085:61" pos:end="1085:65"><name pos:start="1085:61" pos:end="1085:65">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1087:25" pos:end="1087:45"><expr pos:start="1087:25" pos:end="1087:44"><call pos:start="1087:25" pos:end="1087:44"><name pos:start="1087:25" pos:end="1087:37">gen_set_label</name><argument_list pos:start="1087:38" pos:end="1087:44">(<argument pos:start="1087:39" pos:end="1087:43"><expr pos:start="1087:39" pos:end="1087:43"><name pos:start="1087:39" pos:end="1087:43">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="1091:21" pos:end="1091:26">break;</break>



                <default pos:start="1095:17" pos:end="1095:24">default:</default> <comment type="block" pos:start="1095:26" pos:end="1095:37">/*reserved*/</comment>

                    <expr_stmt pos:start="1097:21" pos:end="1097:31"><expr pos:start="1097:21" pos:end="1097:30"><call pos:start="1097:21" pos:end="1097:30"><name pos:start="1097:21" pos:end="1097:28">RESERVED</name><argument_list pos:start="1097:29" pos:end="1097:30">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1099:21" pos:end="1099:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="1103:17" pos:end="1103:22">break;</break>



            <case pos:start="1107:13" pos:end="1107:19">case <expr pos:start="1107:18" pos:end="1107:18"><literal type="number" pos:start="1107:18" pos:end="1107:18">7</literal></expr>:</case> <comment type="block" pos:start="1107:21" pos:end="1107:32">/*reserved*/</comment>

                <expr_stmt pos:start="1109:17" pos:end="1109:27"><expr pos:start="1109:17" pos:end="1109:26"><call pos:start="1109:17" pos:end="1109:26"><name pos:start="1109:17" pos:end="1109:24">RESERVED</name><argument_list pos:start="1109:25" pos:end="1109:26">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1111:17" pos:end="1111:22">break;</break>



            <case pos:start="1115:13" pos:end="1115:19">case <expr pos:start="1115:18" pos:end="1115:18"><literal type="number" pos:start="1115:18" pos:end="1115:18">8</literal></expr>:</case> <comment type="block" pos:start="1115:21" pos:end="1115:27">/*ADD*/</comment>

                <expr_stmt pos:start="1117:17" pos:end="1117:59"><expr pos:start="1117:17" pos:end="1117:58"><call pos:start="1117:17" pos:end="1117:58"><name pos:start="1117:17" pos:end="1117:33">gen_window_check3</name><argument_list pos:start="1117:34" pos:end="1117:58">(<argument pos:start="1117:35" pos:end="1117:36"><expr pos:start="1117:35" pos:end="1117:36"><name pos:start="1117:35" pos:end="1117:36">dc</name></expr></argument>, <argument pos:start="1117:39" pos:end="1117:43"><expr pos:start="1117:39" pos:end="1117:43"><name pos:start="1117:39" pos:end="1117:43">RRR_R</name></expr></argument>, <argument pos:start="1117:46" pos:end="1117:50"><expr pos:start="1117:46" pos:end="1117:50"><name pos:start="1117:46" pos:end="1117:50">RRR_S</name></expr></argument>, <argument pos:start="1117:53" pos:end="1117:57"><expr pos:start="1117:53" pos:end="1117:57"><name pos:start="1117:53" pos:end="1117:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1119:17" pos:end="1119:74"><expr pos:start="1119:17" pos:end="1119:73"><call pos:start="1119:17" pos:end="1119:73"><name pos:start="1119:17" pos:end="1119:31">tcg_gen_add_i32</name><argument_list pos:start="1119:32" pos:end="1119:73">(<argument pos:start="1119:33" pos:end="1119:44"><expr pos:start="1119:33" pos:end="1119:44"><name pos:start="1119:33" pos:end="1119:44"><name pos:start="1119:33" pos:end="1119:37">cpu_R</name><index pos:start="1119:38" pos:end="1119:44">[<expr pos:start="1119:39" pos:end="1119:43"><name pos:start="1119:39" pos:end="1119:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1119:47" pos:end="1119:58"><expr pos:start="1119:47" pos:end="1119:58"><name pos:start="1119:47" pos:end="1119:58"><name pos:start="1119:47" pos:end="1119:51">cpu_R</name><index pos:start="1119:52" pos:end="1119:58">[<expr pos:start="1119:53" pos:end="1119:57"><name pos:start="1119:53" pos:end="1119:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1119:61" pos:end="1119:72"><expr pos:start="1119:61" pos:end="1119:72"><name pos:start="1119:61" pos:end="1119:72"><name pos:start="1119:61" pos:end="1119:65">cpu_R</name><index pos:start="1119:66" pos:end="1119:72">[<expr pos:start="1119:67" pos:end="1119:71"><name pos:start="1119:67" pos:end="1119:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1121:17" pos:end="1121:22">break;</break>



            <case pos:start="1125:13" pos:end="1125:19">case <expr pos:start="1125:18" pos:end="1125:18"><literal type="number" pos:start="1125:18" pos:end="1125:18">9</literal></expr>:</case> <comment type="block" pos:start="1125:21" pos:end="1125:28">/*ADD**/</comment>

            <case pos:start="1127:13" pos:end="1127:20">case <expr pos:start="1127:18" pos:end="1127:19"><literal type="number" pos:start="1127:18" pos:end="1127:19">10</literal></expr>:</case>

            <case pos:start="1129:13" pos:end="1129:20">case <expr pos:start="1129:18" pos:end="1129:19"><literal type="number" pos:start="1129:18" pos:end="1129:19">11</literal></expr>:</case>

                <expr_stmt pos:start="1131:17" pos:end="1131:59"><expr pos:start="1131:17" pos:end="1131:58"><call pos:start="1131:17" pos:end="1131:58"><name pos:start="1131:17" pos:end="1131:33">gen_window_check3</name><argument_list pos:start="1131:34" pos:end="1131:58">(<argument pos:start="1131:35" pos:end="1131:36"><expr pos:start="1131:35" pos:end="1131:36"><name pos:start="1131:35" pos:end="1131:36">dc</name></expr></argument>, <argument pos:start="1131:39" pos:end="1131:43"><expr pos:start="1131:39" pos:end="1131:43"><name pos:start="1131:39" pos:end="1131:43">RRR_R</name></expr></argument>, <argument pos:start="1131:46" pos:end="1131:50"><expr pos:start="1131:46" pos:end="1131:50"><name pos:start="1131:46" pos:end="1131:50">RRR_S</name></expr></argument>, <argument pos:start="1131:53" pos:end="1131:57"><expr pos:start="1131:53" pos:end="1131:57"><name pos:start="1131:53" pos:end="1131:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1133:17" pos:end="1143:17">{<block_content pos:start="1135:21" pos:end="1141:39">

                    <decl_stmt pos:start="1135:21" pos:end="1135:54"><decl pos:start="1135:21" pos:end="1135:53"><type pos:start="1135:21" pos:end="1135:28"><name pos:start="1135:21" pos:end="1135:28">TCGv_i32</name></type> <name pos:start="1135:30" pos:end="1135:32">tmp</name> <init pos:start="1135:34" pos:end="1135:53">= <expr pos:start="1135:36" pos:end="1135:53"><call pos:start="1135:36" pos:end="1135:53"><name pos:start="1135:36" pos:end="1135:51">tcg_temp_new_i32</name><argument_list pos:start="1135:52" pos:end="1135:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1137:21" pos:end="1137:65"><expr pos:start="1137:21" pos:end="1137:64"><call pos:start="1137:21" pos:end="1137:64"><name pos:start="1137:21" pos:end="1137:36">tcg_gen_shli_i32</name><argument_list pos:start="1137:37" pos:end="1137:64">(<argument pos:start="1137:38" pos:end="1137:40"><expr pos:start="1137:38" pos:end="1137:40"><name pos:start="1137:38" pos:end="1137:40">tmp</name></expr></argument>, <argument pos:start="1137:43" pos:end="1137:54"><expr pos:start="1137:43" pos:end="1137:54"><name pos:start="1137:43" pos:end="1137:54"><name pos:start="1137:43" pos:end="1137:47">cpu_R</name><index pos:start="1137:48" pos:end="1137:54">[<expr pos:start="1137:49" pos:end="1137:53"><name pos:start="1137:49" pos:end="1137:53">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1137:57" pos:end="1137:63"><expr pos:start="1137:57" pos:end="1137:63"><name pos:start="1137:57" pos:end="1137:59">OP2</name> <operator pos:start="1137:61" pos:end="1137:61">-</operator> <literal type="number" pos:start="1137:63" pos:end="1137:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1139:21" pos:end="1139:69"><expr pos:start="1139:21" pos:end="1139:68"><call pos:start="1139:21" pos:end="1139:68"><name pos:start="1139:21" pos:end="1139:35">tcg_gen_add_i32</name><argument_list pos:start="1139:36" pos:end="1139:68">(<argument pos:start="1139:37" pos:end="1139:48"><expr pos:start="1139:37" pos:end="1139:48"><name pos:start="1139:37" pos:end="1139:48"><name pos:start="1139:37" pos:end="1139:41">cpu_R</name><index pos:start="1139:42" pos:end="1139:48">[<expr pos:start="1139:43" pos:end="1139:47"><name pos:start="1139:43" pos:end="1139:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1139:51" pos:end="1139:53"><expr pos:start="1139:51" pos:end="1139:53"><name pos:start="1139:51" pos:end="1139:53">tmp</name></expr></argument>, <argument pos:start="1139:56" pos:end="1139:67"><expr pos:start="1139:56" pos:end="1139:67"><name pos:start="1139:56" pos:end="1139:67"><name pos:start="1139:56" pos:end="1139:60">cpu_R</name><index pos:start="1139:61" pos:end="1139:67">[<expr pos:start="1139:62" pos:end="1139:66"><name pos:start="1139:62" pos:end="1139:66">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1141:21" pos:end="1141:39"><expr pos:start="1141:21" pos:end="1141:38"><call pos:start="1141:21" pos:end="1141:38"><name pos:start="1141:21" pos:end="1141:33">tcg_temp_free</name><argument_list pos:start="1141:34" pos:end="1141:38">(<argument pos:start="1141:35" pos:end="1141:37"><expr pos:start="1141:35" pos:end="1141:37"><name pos:start="1141:35" pos:end="1141:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1145:17" pos:end="1145:22">break;</break>



            <case pos:start="1149:13" pos:end="1149:20">case <expr pos:start="1149:18" pos:end="1149:19"><literal type="number" pos:start="1149:18" pos:end="1149:19">12</literal></expr>:</case> <comment type="block" pos:start="1149:22" pos:end="1149:28">/*SUB*/</comment>

                <expr_stmt pos:start="1151:17" pos:end="1151:59"><expr pos:start="1151:17" pos:end="1151:58"><call pos:start="1151:17" pos:end="1151:58"><name pos:start="1151:17" pos:end="1151:33">gen_window_check3</name><argument_list pos:start="1151:34" pos:end="1151:58">(<argument pos:start="1151:35" pos:end="1151:36"><expr pos:start="1151:35" pos:end="1151:36"><name pos:start="1151:35" pos:end="1151:36">dc</name></expr></argument>, <argument pos:start="1151:39" pos:end="1151:43"><expr pos:start="1151:39" pos:end="1151:43"><name pos:start="1151:39" pos:end="1151:43">RRR_R</name></expr></argument>, <argument pos:start="1151:46" pos:end="1151:50"><expr pos:start="1151:46" pos:end="1151:50"><name pos:start="1151:46" pos:end="1151:50">RRR_S</name></expr></argument>, <argument pos:start="1151:53" pos:end="1151:57"><expr pos:start="1151:53" pos:end="1151:57"><name pos:start="1151:53" pos:end="1151:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1153:17" pos:end="1153:74"><expr pos:start="1153:17" pos:end="1153:73"><call pos:start="1153:17" pos:end="1153:73"><name pos:start="1153:17" pos:end="1153:31">tcg_gen_sub_i32</name><argument_list pos:start="1153:32" pos:end="1153:73">(<argument pos:start="1153:33" pos:end="1153:44"><expr pos:start="1153:33" pos:end="1153:44"><name pos:start="1153:33" pos:end="1153:44"><name pos:start="1153:33" pos:end="1153:37">cpu_R</name><index pos:start="1153:38" pos:end="1153:44">[<expr pos:start="1153:39" pos:end="1153:43"><name pos:start="1153:39" pos:end="1153:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1153:47" pos:end="1153:58"><expr pos:start="1153:47" pos:end="1153:58"><name pos:start="1153:47" pos:end="1153:58"><name pos:start="1153:47" pos:end="1153:51">cpu_R</name><index pos:start="1153:52" pos:end="1153:58">[<expr pos:start="1153:53" pos:end="1153:57"><name pos:start="1153:53" pos:end="1153:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1153:61" pos:end="1153:72"><expr pos:start="1153:61" pos:end="1153:72"><name pos:start="1153:61" pos:end="1153:72"><name pos:start="1153:61" pos:end="1153:65">cpu_R</name><index pos:start="1153:66" pos:end="1153:72">[<expr pos:start="1153:67" pos:end="1153:71"><name pos:start="1153:67" pos:end="1153:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1155:17" pos:end="1155:22">break;</break>



            <case pos:start="1159:13" pos:end="1159:20">case <expr pos:start="1159:18" pos:end="1159:19"><literal type="number" pos:start="1159:18" pos:end="1159:19">13</literal></expr>:</case> <comment type="block" pos:start="1159:22" pos:end="1159:29">/*SUB**/</comment>

            <case pos:start="1161:13" pos:end="1161:20">case <expr pos:start="1161:18" pos:end="1161:19"><literal type="number" pos:start="1161:18" pos:end="1161:19">14</literal></expr>:</case>

            <case pos:start="1163:13" pos:end="1163:20">case <expr pos:start="1163:18" pos:end="1163:19"><literal type="number" pos:start="1163:18" pos:end="1163:19">15</literal></expr>:</case>

                <expr_stmt pos:start="1165:17" pos:end="1165:59"><expr pos:start="1165:17" pos:end="1165:58"><call pos:start="1165:17" pos:end="1165:58"><name pos:start="1165:17" pos:end="1165:33">gen_window_check3</name><argument_list pos:start="1165:34" pos:end="1165:58">(<argument pos:start="1165:35" pos:end="1165:36"><expr pos:start="1165:35" pos:end="1165:36"><name pos:start="1165:35" pos:end="1165:36">dc</name></expr></argument>, <argument pos:start="1165:39" pos:end="1165:43"><expr pos:start="1165:39" pos:end="1165:43"><name pos:start="1165:39" pos:end="1165:43">RRR_R</name></expr></argument>, <argument pos:start="1165:46" pos:end="1165:50"><expr pos:start="1165:46" pos:end="1165:50"><name pos:start="1165:46" pos:end="1165:50">RRR_S</name></expr></argument>, <argument pos:start="1165:53" pos:end="1165:57"><expr pos:start="1165:53" pos:end="1165:57"><name pos:start="1165:53" pos:end="1165:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1167:17" pos:end="1177:17">{<block_content pos:start="1169:21" pos:end="1175:39">

                    <decl_stmt pos:start="1169:21" pos:end="1169:54"><decl pos:start="1169:21" pos:end="1169:53"><type pos:start="1169:21" pos:end="1169:28"><name pos:start="1169:21" pos:end="1169:28">TCGv_i32</name></type> <name pos:start="1169:30" pos:end="1169:32">tmp</name> <init pos:start="1169:34" pos:end="1169:53">= <expr pos:start="1169:36" pos:end="1169:53"><call pos:start="1169:36" pos:end="1169:53"><name pos:start="1169:36" pos:end="1169:51">tcg_temp_new_i32</name><argument_list pos:start="1169:52" pos:end="1169:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1171:21" pos:end="1171:66"><expr pos:start="1171:21" pos:end="1171:65"><call pos:start="1171:21" pos:end="1171:65"><name pos:start="1171:21" pos:end="1171:36">tcg_gen_shli_i32</name><argument_list pos:start="1171:37" pos:end="1171:65">(<argument pos:start="1171:38" pos:end="1171:40"><expr pos:start="1171:38" pos:end="1171:40"><name pos:start="1171:38" pos:end="1171:40">tmp</name></expr></argument>, <argument pos:start="1171:43" pos:end="1171:54"><expr pos:start="1171:43" pos:end="1171:54"><name pos:start="1171:43" pos:end="1171:54"><name pos:start="1171:43" pos:end="1171:47">cpu_R</name><index pos:start="1171:48" pos:end="1171:54">[<expr pos:start="1171:49" pos:end="1171:53"><name pos:start="1171:49" pos:end="1171:53">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1171:57" pos:end="1171:64"><expr pos:start="1171:57" pos:end="1171:64"><name pos:start="1171:57" pos:end="1171:59">OP2</name> <operator pos:start="1171:61" pos:end="1171:61">-</operator> <literal type="number" pos:start="1171:63" pos:end="1171:64">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1173:21" pos:end="1173:69"><expr pos:start="1173:21" pos:end="1173:68"><call pos:start="1173:21" pos:end="1173:68"><name pos:start="1173:21" pos:end="1173:35">tcg_gen_sub_i32</name><argument_list pos:start="1173:36" pos:end="1173:68">(<argument pos:start="1173:37" pos:end="1173:48"><expr pos:start="1173:37" pos:end="1173:48"><name pos:start="1173:37" pos:end="1173:48"><name pos:start="1173:37" pos:end="1173:41">cpu_R</name><index pos:start="1173:42" pos:end="1173:48">[<expr pos:start="1173:43" pos:end="1173:47"><name pos:start="1173:43" pos:end="1173:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1173:51" pos:end="1173:53"><expr pos:start="1173:51" pos:end="1173:53"><name pos:start="1173:51" pos:end="1173:53">tmp</name></expr></argument>, <argument pos:start="1173:56" pos:end="1173:67"><expr pos:start="1173:56" pos:end="1173:67"><name pos:start="1173:56" pos:end="1173:67"><name pos:start="1173:56" pos:end="1173:60">cpu_R</name><index pos:start="1173:61" pos:end="1173:67">[<expr pos:start="1173:62" pos:end="1173:66"><name pos:start="1173:62" pos:end="1173:66">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1175:21" pos:end="1175:39"><expr pos:start="1175:21" pos:end="1175:38"><call pos:start="1175:21" pos:end="1175:38"><name pos:start="1175:21" pos:end="1175:33">tcg_temp_free</name><argument_list pos:start="1175:34" pos:end="1175:38">(<argument pos:start="1175:35" pos:end="1175:37"><expr pos:start="1175:35" pos:end="1175:37"><name pos:start="1175:35" pos:end="1175:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1179:17" pos:end="1179:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1183:13" pos:end="1183:18">break;</break>



        <case pos:start="1187:9" pos:end="1187:15">case <expr pos:start="1187:14" pos:end="1187:14"><literal type="number" pos:start="1187:14" pos:end="1187:14">1</literal></expr>:</case> <comment type="block" pos:start="1187:17" pos:end="1187:24">/*RST1*/</comment>

            <switch pos:start="1189:13" pos:end="1451:13">switch <condition pos:start="1189:20" pos:end="1189:24">(<expr pos:start="1189:21" pos:end="1189:23"><name pos:start="1189:21" pos:end="1189:23">OP2</name></expr>)</condition> <block pos:start="1189:26" pos:end="1451:13">{<block_content pos:start="1191:13" pos:end="1449:22">

            <case pos:start="1191:13" pos:end="1191:19">case <expr pos:start="1191:18" pos:end="1191:18"><literal type="number" pos:start="1191:18" pos:end="1191:18">0</literal></expr>:</case> <comment type="block" pos:start="1191:21" pos:end="1191:28">/*SLLI*/</comment>

            <case pos:start="1193:13" pos:end="1193:19">case <expr pos:start="1193:18" pos:end="1193:18"><literal type="number" pos:start="1193:18" pos:end="1193:18">1</literal></expr>:</case>

                <expr_stmt pos:start="1195:17" pos:end="1195:52"><expr pos:start="1195:17" pos:end="1195:51"><call pos:start="1195:17" pos:end="1195:51"><name pos:start="1195:17" pos:end="1195:33">gen_window_check2</name><argument_list pos:start="1195:34" pos:end="1195:51">(<argument pos:start="1195:35" pos:end="1195:36"><expr pos:start="1195:35" pos:end="1195:36"><name pos:start="1195:35" pos:end="1195:36">dc</name></expr></argument>, <argument pos:start="1195:39" pos:end="1195:43"><expr pos:start="1195:39" pos:end="1195:43"><name pos:start="1195:39" pos:end="1195:43">RRR_R</name></expr></argument>, <argument pos:start="1195:46" pos:end="1195:50"><expr pos:start="1195:46" pos:end="1195:50"><name pos:start="1195:46" pos:end="1195:50">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1197:17" pos:end="1199:57"><expr pos:start="1197:17" pos:end="1199:56"><call pos:start="1197:17" pos:end="1199:56"><name pos:start="1197:17" pos:end="1197:32">tcg_gen_shli_i32</name><argument_list pos:start="1197:33" pos:end="1199:56">(<argument pos:start="1197:34" pos:end="1197:45"><expr pos:start="1197:34" pos:end="1197:45"><name pos:start="1197:34" pos:end="1197:45"><name pos:start="1197:34" pos:end="1197:38">cpu_R</name><index pos:start="1197:39" pos:end="1197:45">[<expr pos:start="1197:40" pos:end="1197:44"><name pos:start="1197:40" pos:end="1197:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1197:48" pos:end="1197:59"><expr pos:start="1197:48" pos:end="1197:59"><name pos:start="1197:48" pos:end="1197:59"><name pos:start="1197:48" pos:end="1197:52">cpu_R</name><index pos:start="1197:53" pos:end="1197:59">[<expr pos:start="1197:54" pos:end="1197:58"><name pos:start="1197:54" pos:end="1197:58">RRR_S</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="1199:25" pos:end="1199:55"><expr pos:start="1199:25" pos:end="1199:55"><literal type="number" pos:start="1199:25" pos:end="1199:28">32</literal> <operator pos:start="1199:28" pos:end="1199:28">-</operator> <operator pos:start="1199:30" pos:end="1199:30">(</operator><name pos:start="1199:31" pos:end="1199:35">RRR_T</name> <operator pos:start="1199:37" pos:end="1199:37">|</operator> <operator pos:start="1199:39" pos:end="1199:39">(</operator><operator pos:start="1199:40" pos:end="1199:40">(</operator><name pos:start="1199:41" pos:end="1199:43">OP2</name> <operator pos:start="1199:45" pos:end="1199:45">&amp;</operator> <literal type="number" pos:start="1199:47" pos:end="1199:47">1</literal><operator pos:start="1199:48" pos:end="1199:48">)</operator> <operator pos:start="1199:50" pos:end="1199:51">&lt;&lt;</operator> <literal type="number" pos:start="1199:53" pos:end="1199:53">4</literal><operator pos:start="1199:54" pos:end="1199:54">)</operator><operator pos:start="1199:55" pos:end="1199:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1201:17" pos:end="1201:22">break;</break>



            <case pos:start="1205:13" pos:end="1205:19">case <expr pos:start="1205:18" pos:end="1205:18"><literal type="number" pos:start="1205:18" pos:end="1205:18">2</literal></expr>:</case> <comment type="block" pos:start="1205:21" pos:end="1205:28">/*SRAI*/</comment>

            <case pos:start="1207:13" pos:end="1207:19">case <expr pos:start="1207:18" pos:end="1207:18"><literal type="number" pos:start="1207:18" pos:end="1207:18">3</literal></expr>:</case>

                <expr_stmt pos:start="1209:17" pos:end="1209:52"><expr pos:start="1209:17" pos:end="1209:51"><call pos:start="1209:17" pos:end="1209:51"><name pos:start="1209:17" pos:end="1209:33">gen_window_check2</name><argument_list pos:start="1209:34" pos:end="1209:51">(<argument pos:start="1209:35" pos:end="1209:36"><expr pos:start="1209:35" pos:end="1209:36"><name pos:start="1209:35" pos:end="1209:36">dc</name></expr></argument>, <argument pos:start="1209:39" pos:end="1209:43"><expr pos:start="1209:39" pos:end="1209:43"><name pos:start="1209:39" pos:end="1209:43">RRR_R</name></expr></argument>, <argument pos:start="1209:46" pos:end="1209:50"><expr pos:start="1209:46" pos:end="1209:50"><name pos:start="1209:46" pos:end="1209:50">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1211:17" pos:end="1213:50"><expr pos:start="1211:17" pos:end="1213:49"><call pos:start="1211:17" pos:end="1213:49"><name pos:start="1211:17" pos:end="1211:32">tcg_gen_sari_i32</name><argument_list pos:start="1211:33" pos:end="1213:49">(<argument pos:start="1211:34" pos:end="1211:45"><expr pos:start="1211:34" pos:end="1211:45"><name pos:start="1211:34" pos:end="1211:45"><name pos:start="1211:34" pos:end="1211:38">cpu_R</name><index pos:start="1211:39" pos:end="1211:45">[<expr pos:start="1211:40" pos:end="1211:44"><name pos:start="1211:40" pos:end="1211:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1211:48" pos:end="1211:59"><expr pos:start="1211:48" pos:end="1211:59"><name pos:start="1211:48" pos:end="1211:59"><name pos:start="1211:48" pos:end="1211:52">cpu_R</name><index pos:start="1211:53" pos:end="1211:59">[<expr pos:start="1211:54" pos:end="1211:58"><name pos:start="1211:54" pos:end="1211:58">RRR_T</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="1213:25" pos:end="1213:48"><expr pos:start="1213:25" pos:end="1213:48"><name pos:start="1213:25" pos:end="1213:29">RRR_S</name> <operator pos:start="1213:31" pos:end="1213:31">|</operator> <operator pos:start="1213:33" pos:end="1213:33">(</operator><operator pos:start="1213:34" pos:end="1213:34">(</operator><name pos:start="1213:35" pos:end="1213:37">OP2</name> <operator pos:start="1213:39" pos:end="1213:39">&amp;</operator> <literal type="number" pos:start="1213:41" pos:end="1213:41">1</literal><operator pos:start="1213:42" pos:end="1213:42">)</operator> <operator pos:start="1213:44" pos:end="1213:45">&lt;&lt;</operator> <literal type="number" pos:start="1213:47" pos:end="1213:47">4</literal><operator pos:start="1213:48" pos:end="1213:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1215:17" pos:end="1215:22">break;</break>



            <case pos:start="1219:13" pos:end="1219:19">case <expr pos:start="1219:18" pos:end="1219:18"><literal type="number" pos:start="1219:18" pos:end="1219:18">4</literal></expr>:</case> <comment type="block" pos:start="1219:21" pos:end="1219:28">/*SRLI*/</comment>

                <expr_stmt pos:start="1221:17" pos:end="1221:52"><expr pos:start="1221:17" pos:end="1221:51"><call pos:start="1221:17" pos:end="1221:51"><name pos:start="1221:17" pos:end="1221:33">gen_window_check2</name><argument_list pos:start="1221:34" pos:end="1221:51">(<argument pos:start="1221:35" pos:end="1221:36"><expr pos:start="1221:35" pos:end="1221:36"><name pos:start="1221:35" pos:end="1221:36">dc</name></expr></argument>, <argument pos:start="1221:39" pos:end="1221:43"><expr pos:start="1221:39" pos:end="1221:43"><name pos:start="1221:39" pos:end="1221:43">RRR_R</name></expr></argument>, <argument pos:start="1221:46" pos:end="1221:50"><expr pos:start="1221:46" pos:end="1221:50"><name pos:start="1221:46" pos:end="1221:50">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1223:17" pos:end="1223:68"><expr pos:start="1223:17" pos:end="1223:67"><call pos:start="1223:17" pos:end="1223:67"><name pos:start="1223:17" pos:end="1223:32">tcg_gen_shri_i32</name><argument_list pos:start="1223:33" pos:end="1223:67">(<argument pos:start="1223:34" pos:end="1223:45"><expr pos:start="1223:34" pos:end="1223:45"><name pos:start="1223:34" pos:end="1223:45"><name pos:start="1223:34" pos:end="1223:38">cpu_R</name><index pos:start="1223:39" pos:end="1223:45">[<expr pos:start="1223:40" pos:end="1223:44"><name pos:start="1223:40" pos:end="1223:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1223:48" pos:end="1223:59"><expr pos:start="1223:48" pos:end="1223:59"><name pos:start="1223:48" pos:end="1223:59"><name pos:start="1223:48" pos:end="1223:52">cpu_R</name><index pos:start="1223:53" pos:end="1223:59">[<expr pos:start="1223:54" pos:end="1223:58"><name pos:start="1223:54" pos:end="1223:58">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1223:62" pos:end="1223:66"><expr pos:start="1223:62" pos:end="1223:66"><name pos:start="1223:62" pos:end="1223:66">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1225:17" pos:end="1225:22">break;</break>



            <case pos:start="1229:13" pos:end="1229:19">case <expr pos:start="1229:18" pos:end="1229:18"><literal type="number" pos:start="1229:18" pos:end="1229:18">6</literal></expr>:</case> <comment type="block" pos:start="1229:21" pos:end="1229:27">/*XSR*/</comment>

                <block pos:start="1231:17" pos:end="1257:17">{<block_content pos:start="1233:21" pos:end="1255:21">

                    <decl_stmt pos:start="1233:21" pos:end="1233:54"><decl pos:start="1233:21" pos:end="1233:53"><type pos:start="1233:21" pos:end="1233:28"><name pos:start="1233:21" pos:end="1233:28">TCGv_i32</name></type> <name pos:start="1233:30" pos:end="1233:32">tmp</name> <init pos:start="1233:34" pos:end="1233:53">= <expr pos:start="1233:36" pos:end="1233:53"><call pos:start="1233:36" pos:end="1233:53"><name pos:start="1233:36" pos:end="1233:51">tcg_temp_new_i32</name><argument_list pos:start="1233:52" pos:end="1233:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="1235:21" pos:end="1239:21"><if pos:start="1235:21" pos:end="1239:21">if <condition pos:start="1235:24" pos:end="1235:37">(<expr pos:start="1235:25" pos:end="1235:36"><name pos:start="1235:25" pos:end="1235:30">RSR_SR</name> <operator pos:start="1235:32" pos:end="1235:33">&gt;=</operator> <literal type="number" pos:start="1235:35" pos:end="1235:36">64</literal></expr>)</condition> <block pos:start="1235:39" pos:end="1239:21">{<block_content pos:start="1237:25" pos:end="1237:48">

                        <expr_stmt pos:start="1237:25" pos:end="1237:48"><expr pos:start="1237:25" pos:end="1237:47"><call pos:start="1237:25" pos:end="1237:47"><name pos:start="1237:25" pos:end="1237:43">gen_check_privilege</name><argument_list pos:start="1237:44" pos:end="1237:47">(<argument pos:start="1237:45" pos:end="1237:46"><expr pos:start="1237:45" pos:end="1237:46"><name pos:start="1237:45" pos:end="1237:46">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1241:21" pos:end="1241:49"><expr pos:start="1241:21" pos:end="1241:48"><call pos:start="1241:21" pos:end="1241:48"><name pos:start="1241:21" pos:end="1241:37">gen_window_check1</name><argument_list pos:start="1241:38" pos:end="1241:48">(<argument pos:start="1241:39" pos:end="1241:40"><expr pos:start="1241:39" pos:end="1241:40"><name pos:start="1241:39" pos:end="1241:40">dc</name></expr></argument>, <argument pos:start="1241:43" pos:end="1241:47"><expr pos:start="1241:43" pos:end="1241:47"><name pos:start="1241:43" pos:end="1241:47">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1243:21" pos:end="1243:55"><expr pos:start="1243:21" pos:end="1243:54"><call pos:start="1243:21" pos:end="1243:54"><name pos:start="1243:21" pos:end="1243:35">tcg_gen_mov_i32</name><argument_list pos:start="1243:36" pos:end="1243:54">(<argument pos:start="1243:37" pos:end="1243:39"><expr pos:start="1243:37" pos:end="1243:39"><name pos:start="1243:37" pos:end="1243:39">tmp</name></expr></argument>, <argument pos:start="1243:42" pos:end="1243:53"><expr pos:start="1243:42" pos:end="1243:53"><name pos:start="1243:42" pos:end="1243:53"><name pos:start="1243:42" pos:end="1243:46">cpu_R</name><index pos:start="1243:47" pos:end="1243:53">[<expr pos:start="1243:48" pos:end="1243:52"><name pos:start="1243:48" pos:end="1243:52">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1245:21" pos:end="1245:54"><expr pos:start="1245:21" pos:end="1245:53"><call pos:start="1245:21" pos:end="1245:53"><name pos:start="1245:21" pos:end="1245:27">gen_rsr</name><argument_list pos:start="1245:28" pos:end="1245:53">(<argument pos:start="1245:29" pos:end="1245:30"><expr pos:start="1245:29" pos:end="1245:30"><name pos:start="1245:29" pos:end="1245:30">dc</name></expr></argument>, <argument pos:start="1245:33" pos:end="1245:44"><expr pos:start="1245:33" pos:end="1245:44"><name pos:start="1245:33" pos:end="1245:44"><name pos:start="1245:33" pos:end="1245:37">cpu_R</name><index pos:start="1245:38" pos:end="1245:44">[<expr pos:start="1245:39" pos:end="1245:43"><name pos:start="1245:39" pos:end="1245:43">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1245:47" pos:end="1245:52"><expr pos:start="1245:47" pos:end="1245:52"><name pos:start="1245:47" pos:end="1245:52">RSR_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1247:21" pos:end="1247:45"><expr pos:start="1247:21" pos:end="1247:44"><call pos:start="1247:21" pos:end="1247:44"><name pos:start="1247:21" pos:end="1247:27">gen_wsr</name><argument_list pos:start="1247:28" pos:end="1247:44">(<argument pos:start="1247:29" pos:end="1247:30"><expr pos:start="1247:29" pos:end="1247:30"><name pos:start="1247:29" pos:end="1247:30">dc</name></expr></argument>, <argument pos:start="1247:33" pos:end="1247:38"><expr pos:start="1247:33" pos:end="1247:38"><name pos:start="1247:33" pos:end="1247:38">RSR_SR</name></expr></argument>, <argument pos:start="1247:41" pos:end="1247:43"><expr pos:start="1247:41" pos:end="1247:43"><name pos:start="1247:41" pos:end="1247:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1249:21" pos:end="1249:39"><expr pos:start="1249:21" pos:end="1249:38"><call pos:start="1249:21" pos:end="1249:38"><name pos:start="1249:21" pos:end="1249:33">tcg_temp_free</name><argument_list pos:start="1249:34" pos:end="1249:38">(<argument pos:start="1249:35" pos:end="1249:37"><expr pos:start="1249:35" pos:end="1249:37"><name pos:start="1249:35" pos:end="1249:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1251:21" pos:end="1255:21"><if pos:start="1251:21" pos:end="1255:21">if <condition pos:start="1251:24" pos:end="1251:43">(<expr pos:start="1251:25" pos:end="1251:42"><operator pos:start="1251:25" pos:end="1251:25">!</operator><name pos:start="1251:26" pos:end="1251:42"><name pos:start="1251:26" pos:end="1251:34">sregnames</name><index pos:start="1251:35" pos:end="1251:42">[<expr pos:start="1251:36" pos:end="1251:41"><name pos:start="1251:36" pos:end="1251:41">RSR_SR</name></expr>]</index></name></expr>)</condition> <block pos:start="1251:45" pos:end="1255:21">{<block_content pos:start="1253:25" pos:end="1253:30">

                        <expr_stmt pos:start="1253:25" pos:end="1253:30"><expr pos:start="1253:25" pos:end="1253:29"><call pos:start="1253:25" pos:end="1253:29"><name pos:start="1253:25" pos:end="1253:27">TBD</name><argument_list pos:start="1253:28" pos:end="1253:29">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="1259:17" pos:end="1290:0">break;</break>



                <comment type="block" pos:start="1263:17" pos:end="1269:19">/*

                 * Note: 64 bit ops are used here solely because SAR values

                 * have range 0..63

                 */</comment>

<cpp:define pos:start="1271:1" pos:end="1285:27">#<cpp:directive pos:start="1271:2" pos:end="1271:7">define</cpp:directive> <cpp:macro pos:start="1271:9" pos:end="1271:31"><name pos:start="1271:9" pos:end="1271:21">gen_shift_reg</name><parameter_list pos:start="1271:22" pos:end="1271:31">(<parameter pos:start="1271:23" pos:end="1271:25"><type pos:start="1271:23" pos:end="1271:25"><name pos:start="1271:23" pos:end="1271:25">cmd</name></type></parameter>, <parameter pos:start="1271:28" pos:end="1271:30"><type pos:start="1271:28" pos:end="1271:30"><name pos:start="1271:28" pos:end="1271:30">reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="1271:33" pos:end="1285:27">do { \

                    TCGv_i64 tmp = tcg_temp_new_i64(); \

                    tcg_gen_extu_i32_i64(tmp, reg); \

                    tcg_gen_##cmd##_i64(v, v, tmp); \

                    tcg_gen_trunc_i64_i32(cpu_R[RRR_R], v); \

                    tcg_temp_free_i64(v); \

                    tcg_temp_free_i64(tmp); \

                } while (0)</cpp:value></cpp:define>



<cpp:define pos:start="1289:1" pos:end="1289:54">#<cpp:directive pos:start="1289:2" pos:end="1289:7">define</cpp:directive> <cpp:macro pos:start="1289:9" pos:end="1289:22"><name pos:start="1289:9" pos:end="1289:17">gen_shift</name><parameter_list pos:start="1289:18" pos:end="1289:22">(<parameter pos:start="1289:19" pos:end="1289:21"><type pos:start="1289:19" pos:end="1289:21"><name pos:start="1289:19" pos:end="1289:21">cmd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="1289:24" pos:end="1289:54">gen_shift_reg(cmd, cpu_SR[SAR])</cpp:value></cpp:define>



            <case pos:start="1293:13" pos:end="1293:19">case <expr pos:start="1293:18" pos:end="1293:18"><literal type="number" pos:start="1293:18" pos:end="1293:18">8</literal></expr>:</case> <comment type="block" pos:start="1293:21" pos:end="1293:27">/*SRC*/</comment>

                <expr_stmt pos:start="1295:17" pos:end="1295:59"><expr pos:start="1295:17" pos:end="1295:58"><call pos:start="1295:17" pos:end="1295:58"><name pos:start="1295:17" pos:end="1295:33">gen_window_check3</name><argument_list pos:start="1295:34" pos:end="1295:58">(<argument pos:start="1295:35" pos:end="1295:36"><expr pos:start="1295:35" pos:end="1295:36"><name pos:start="1295:35" pos:end="1295:36">dc</name></expr></argument>, <argument pos:start="1295:39" pos:end="1295:43"><expr pos:start="1295:39" pos:end="1295:43"><name pos:start="1295:39" pos:end="1295:43">RRR_R</name></expr></argument>, <argument pos:start="1295:46" pos:end="1295:50"><expr pos:start="1295:46" pos:end="1295:50"><name pos:start="1295:46" pos:end="1295:50">RRR_S</name></expr></argument>, <argument pos:start="1295:53" pos:end="1295:57"><expr pos:start="1295:53" pos:end="1295:57"><name pos:start="1295:53" pos:end="1295:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1297:17" pos:end="1305:17">{<block_content pos:start="1299:21" pos:end="1303:35">

                    <decl_stmt pos:start="1299:21" pos:end="1299:52"><decl pos:start="1299:21" pos:end="1299:51"><type pos:start="1299:21" pos:end="1299:28"><name pos:start="1299:21" pos:end="1299:28">TCGv_i64</name></type> <name pos:start="1299:30" pos:end="1299:30">v</name> <init pos:start="1299:32" pos:end="1299:51">= <expr pos:start="1299:34" pos:end="1299:51"><call pos:start="1299:34" pos:end="1299:51"><name pos:start="1299:34" pos:end="1299:49">tcg_temp_new_i64</name><argument_list pos:start="1299:50" pos:end="1299:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1301:21" pos:end="1301:74"><expr pos:start="1301:21" pos:end="1301:73"><call pos:start="1301:21" pos:end="1301:73"><name pos:start="1301:21" pos:end="1301:42">tcg_gen_concat_i32_i64</name><argument_list pos:start="1301:43" pos:end="1301:73">(<argument pos:start="1301:44" pos:end="1301:44"><expr pos:start="1301:44" pos:end="1301:44"><name pos:start="1301:44" pos:end="1301:44">v</name></expr></argument>, <argument pos:start="1301:47" pos:end="1301:58"><expr pos:start="1301:47" pos:end="1301:58"><name pos:start="1301:47" pos:end="1301:58"><name pos:start="1301:47" pos:end="1301:51">cpu_R</name><index pos:start="1301:52" pos:end="1301:58">[<expr pos:start="1301:53" pos:end="1301:57"><name pos:start="1301:53" pos:end="1301:57">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1301:61" pos:end="1301:72"><expr pos:start="1301:61" pos:end="1301:72"><name pos:start="1301:61" pos:end="1301:72"><name pos:start="1301:61" pos:end="1301:65">cpu_R</name><index pos:start="1301:66" pos:end="1301:72">[<expr pos:start="1301:67" pos:end="1301:71"><name pos:start="1301:67" pos:end="1301:71">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1303:21" pos:end="1303:35"><expr pos:start="1303:21" pos:end="1303:34"><call pos:start="1303:21" pos:end="1303:34"><name pos:start="1303:21" pos:end="1303:29">gen_shift</name><argument_list pos:start="1303:30" pos:end="1303:34">(<argument pos:start="1303:31" pos:end="1303:33"><expr pos:start="1303:31" pos:end="1303:33"><name pos:start="1303:31" pos:end="1303:33">shr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1307:17" pos:end="1307:22">break;</break>



            <case pos:start="1311:13" pos:end="1311:19">case <expr pos:start="1311:18" pos:end="1311:18"><literal type="number" pos:start="1311:18" pos:end="1311:18">9</literal></expr>:</case> <comment type="block" pos:start="1311:21" pos:end="1311:27">/*SRL*/</comment>

                <expr_stmt pos:start="1313:17" pos:end="1313:52"><expr pos:start="1313:17" pos:end="1313:51"><call pos:start="1313:17" pos:end="1313:51"><name pos:start="1313:17" pos:end="1313:33">gen_window_check2</name><argument_list pos:start="1313:34" pos:end="1313:51">(<argument pos:start="1313:35" pos:end="1313:36"><expr pos:start="1313:35" pos:end="1313:36"><name pos:start="1313:35" pos:end="1313:36">dc</name></expr></argument>, <argument pos:start="1313:39" pos:end="1313:43"><expr pos:start="1313:39" pos:end="1313:43"><name pos:start="1313:39" pos:end="1313:43">RRR_R</name></expr></argument>, <argument pos:start="1313:46" pos:end="1313:50"><expr pos:start="1313:46" pos:end="1313:50"><name pos:start="1313:46" pos:end="1313:50">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1315:17" pos:end="1327:17"><if pos:start="1315:17" pos:end="1319:17">if <condition pos:start="1315:20" pos:end="1315:33">(<expr pos:start="1315:21" pos:end="1315:32"><name pos:start="1315:21" pos:end="1315:32"><name pos:start="1315:21" pos:end="1315:22">dc</name><operator pos:start="1315:23" pos:end="1315:24">-&gt;</operator><name pos:start="1315:25" pos:end="1315:32">sar_5bit</name></name></expr>)</condition> <block pos:start="1315:35" pos:end="1319:17">{<block_content pos:start="1317:21" pos:end="1317:77">

                    <expr_stmt pos:start="1317:21" pos:end="1317:77"><expr pos:start="1317:21" pos:end="1317:76"><call pos:start="1317:21" pos:end="1317:76"><name pos:start="1317:21" pos:end="1317:35">tcg_gen_shr_i32</name><argument_list pos:start="1317:36" pos:end="1317:76">(<argument pos:start="1317:37" pos:end="1317:48"><expr pos:start="1317:37" pos:end="1317:48"><name pos:start="1317:37" pos:end="1317:48"><name pos:start="1317:37" pos:end="1317:41">cpu_R</name><index pos:start="1317:42" pos:end="1317:48">[<expr pos:start="1317:43" pos:end="1317:47"><name pos:start="1317:43" pos:end="1317:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1317:51" pos:end="1317:62"><expr pos:start="1317:51" pos:end="1317:62"><name pos:start="1317:51" pos:end="1317:62"><name pos:start="1317:51" pos:end="1317:55">cpu_R</name><index pos:start="1317:56" pos:end="1317:62">[<expr pos:start="1317:57" pos:end="1317:61"><name pos:start="1317:57" pos:end="1317:61">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1317:65" pos:end="1317:75"><expr pos:start="1317:65" pos:end="1317:75"><name pos:start="1317:65" pos:end="1317:75"><name pos:start="1317:65" pos:end="1317:70">cpu_SR</name><index pos:start="1317:71" pos:end="1317:75">[<expr pos:start="1317:72" pos:end="1317:74"><name pos:start="1317:72" pos:end="1317:74">SAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1319:19" pos:end="1327:17">else <block pos:start="1319:24" pos:end="1327:17">{<block_content pos:start="1321:21" pos:end="1325:35">

                    <decl_stmt pos:start="1321:21" pos:end="1321:52"><decl pos:start="1321:21" pos:end="1321:51"><type pos:start="1321:21" pos:end="1321:28"><name pos:start="1321:21" pos:end="1321:28">TCGv_i64</name></type> <name pos:start="1321:30" pos:end="1321:30">v</name> <init pos:start="1321:32" pos:end="1321:51">= <expr pos:start="1321:34" pos:end="1321:51"><call pos:start="1321:34" pos:end="1321:51"><name pos:start="1321:34" pos:end="1321:49">tcg_temp_new_i64</name><argument_list pos:start="1321:50" pos:end="1321:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1323:21" pos:end="1323:58"><expr pos:start="1323:21" pos:end="1323:57"><call pos:start="1323:21" pos:end="1323:57"><name pos:start="1323:21" pos:end="1323:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="1323:41" pos:end="1323:57">(<argument pos:start="1323:42" pos:end="1323:42"><expr pos:start="1323:42" pos:end="1323:42"><name pos:start="1323:42" pos:end="1323:42">v</name></expr></argument>, <argument pos:start="1323:45" pos:end="1323:56"><expr pos:start="1323:45" pos:end="1323:56"><name pos:start="1323:45" pos:end="1323:56"><name pos:start="1323:45" pos:end="1323:49">cpu_R</name><index pos:start="1323:50" pos:end="1323:56">[<expr pos:start="1323:51" pos:end="1323:55"><name pos:start="1323:51" pos:end="1323:55">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1325:21" pos:end="1325:35"><expr pos:start="1325:21" pos:end="1325:34"><call pos:start="1325:21" pos:end="1325:34"><name pos:start="1325:21" pos:end="1325:29">gen_shift</name><argument_list pos:start="1325:30" pos:end="1325:34">(<argument pos:start="1325:31" pos:end="1325:33"><expr pos:start="1325:31" pos:end="1325:33"><name pos:start="1325:31" pos:end="1325:33">shr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1329:17" pos:end="1329:22">break;</break>



            <case pos:start="1333:13" pos:end="1333:20">case <expr pos:start="1333:18" pos:end="1333:19"><literal type="number" pos:start="1333:18" pos:end="1333:19">10</literal></expr>:</case> <comment type="block" pos:start="1333:22" pos:end="1333:28">/*SLL*/</comment>

                <expr_stmt pos:start="1335:17" pos:end="1335:52"><expr pos:start="1335:17" pos:end="1335:51"><call pos:start="1335:17" pos:end="1335:51"><name pos:start="1335:17" pos:end="1335:33">gen_window_check2</name><argument_list pos:start="1335:34" pos:end="1335:51">(<argument pos:start="1335:35" pos:end="1335:36"><expr pos:start="1335:35" pos:end="1335:36"><name pos:start="1335:35" pos:end="1335:36">dc</name></expr></argument>, <argument pos:start="1335:39" pos:end="1335:43"><expr pos:start="1335:39" pos:end="1335:43"><name pos:start="1335:39" pos:end="1335:43">RRR_R</name></expr></argument>, <argument pos:start="1335:46" pos:end="1335:50"><expr pos:start="1335:46" pos:end="1335:50"><name pos:start="1335:46" pos:end="1335:50">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1337:17" pos:end="1357:17"><if pos:start="1337:17" pos:end="1341:17">if <condition pos:start="1337:20" pos:end="1337:37">(<expr pos:start="1337:21" pos:end="1337:36"><name pos:start="1337:21" pos:end="1337:36"><name pos:start="1337:21" pos:end="1337:22">dc</name><operator pos:start="1337:23" pos:end="1337:24">-&gt;</operator><name pos:start="1337:25" pos:end="1337:36">sar_m32_5bit</name></name></expr>)</condition> <block pos:start="1337:39" pos:end="1341:17">{<block_content pos:start="1339:21" pos:end="1339:77">

                    <expr_stmt pos:start="1339:21" pos:end="1339:77"><expr pos:start="1339:21" pos:end="1339:76"><call pos:start="1339:21" pos:end="1339:76"><name pos:start="1339:21" pos:end="1339:35">tcg_gen_shl_i32</name><argument_list pos:start="1339:36" pos:end="1339:76">(<argument pos:start="1339:37" pos:end="1339:48"><expr pos:start="1339:37" pos:end="1339:48"><name pos:start="1339:37" pos:end="1339:48"><name pos:start="1339:37" pos:end="1339:41">cpu_R</name><index pos:start="1339:42" pos:end="1339:48">[<expr pos:start="1339:43" pos:end="1339:47"><name pos:start="1339:43" pos:end="1339:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1339:51" pos:end="1339:62"><expr pos:start="1339:51" pos:end="1339:62"><name pos:start="1339:51" pos:end="1339:62"><name pos:start="1339:51" pos:end="1339:55">cpu_R</name><index pos:start="1339:56" pos:end="1339:62">[<expr pos:start="1339:57" pos:end="1339:61"><name pos:start="1339:57" pos:end="1339:61">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1339:65" pos:end="1339:75"><expr pos:start="1339:65" pos:end="1339:75"><name pos:start="1339:65" pos:end="1339:75"><name pos:start="1339:65" pos:end="1339:66">dc</name><operator pos:start="1339:67" pos:end="1339:68">-&gt;</operator><name pos:start="1339:69" pos:end="1339:75">sar_m32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1341:19" pos:end="1357:17">else <block pos:start="1341:24" pos:end="1357:17">{<block_content pos:start="1343:21" pos:end="1355:37">

                    <decl_stmt pos:start="1343:21" pos:end="1343:52"><decl pos:start="1343:21" pos:end="1343:51"><type pos:start="1343:21" pos:end="1343:28"><name pos:start="1343:21" pos:end="1343:28">TCGv_i64</name></type> <name pos:start="1343:30" pos:end="1343:30">v</name> <init pos:start="1343:32" pos:end="1343:51">= <expr pos:start="1343:34" pos:end="1343:51"><call pos:start="1343:34" pos:end="1343:51"><name pos:start="1343:34" pos:end="1343:49">tcg_temp_new_i64</name><argument_list pos:start="1343:50" pos:end="1343:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1345:21" pos:end="1345:51"><decl pos:start="1345:21" pos:end="1345:50"><type pos:start="1345:21" pos:end="1345:28"><name pos:start="1345:21" pos:end="1345:28">TCGv_i32</name></type> <name pos:start="1345:30" pos:end="1345:30">s</name> <init pos:start="1345:32" pos:end="1345:50">= <expr pos:start="1345:34" pos:end="1345:50"><call pos:start="1345:34" pos:end="1345:50"><name pos:start="1345:34" pos:end="1345:46">tcg_const_i32</name><argument_list pos:start="1345:47" pos:end="1345:50">(<argument pos:start="1345:48" pos:end="1345:49"><expr pos:start="1345:48" pos:end="1345:49"><literal type="number" pos:start="1345:48" pos:end="1345:49">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1347:21" pos:end="1347:55"><expr pos:start="1347:21" pos:end="1347:54"><call pos:start="1347:21" pos:end="1347:54"><name pos:start="1347:21" pos:end="1347:35">tcg_gen_sub_i32</name><argument_list pos:start="1347:36" pos:end="1347:54">(<argument pos:start="1347:37" pos:end="1347:37"><expr pos:start="1347:37" pos:end="1347:37"><name pos:start="1347:37" pos:end="1347:37">s</name></expr></argument>, <argument pos:start="1347:40" pos:end="1347:40"><expr pos:start="1347:40" pos:end="1347:40"><name pos:start="1347:40" pos:end="1347:40">s</name></expr></argument>, <argument pos:start="1347:43" pos:end="1347:53"><expr pos:start="1347:43" pos:end="1347:53"><name pos:start="1347:43" pos:end="1347:53"><name pos:start="1347:43" pos:end="1347:48">cpu_SR</name><index pos:start="1347:49" pos:end="1347:53">[<expr pos:start="1347:50" pos:end="1347:52"><name pos:start="1347:50" pos:end="1347:52">SAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1349:21" pos:end="1349:49"><expr pos:start="1349:21" pos:end="1349:48"><call pos:start="1349:21" pos:end="1349:48"><name pos:start="1349:21" pos:end="1349:36">tcg_gen_andi_i32</name><argument_list pos:start="1349:37" pos:end="1349:48">(<argument pos:start="1349:38" pos:end="1349:38"><expr pos:start="1349:38" pos:end="1349:38"><name pos:start="1349:38" pos:end="1349:38">s</name></expr></argument>, <argument pos:start="1349:41" pos:end="1349:41"><expr pos:start="1349:41" pos:end="1349:41"><name pos:start="1349:41" pos:end="1349:41">s</name></expr></argument>, <argument pos:start="1349:44" pos:end="1349:47"><expr pos:start="1349:44" pos:end="1349:47"><literal type="number" pos:start="1349:44" pos:end="1349:47">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1351:21" pos:end="1351:58"><expr pos:start="1351:21" pos:end="1351:57"><call pos:start="1351:21" pos:end="1351:57"><name pos:start="1351:21" pos:end="1351:40">tcg_gen_extu_i32_i64</name><argument_list pos:start="1351:41" pos:end="1351:57">(<argument pos:start="1351:42" pos:end="1351:42"><expr pos:start="1351:42" pos:end="1351:42"><name pos:start="1351:42" pos:end="1351:42">v</name></expr></argument>, <argument pos:start="1351:45" pos:end="1351:56"><expr pos:start="1351:45" pos:end="1351:56"><name pos:start="1351:45" pos:end="1351:56"><name pos:start="1351:45" pos:end="1351:49">cpu_R</name><index pos:start="1351:50" pos:end="1351:56">[<expr pos:start="1351:51" pos:end="1351:55"><name pos:start="1351:51" pos:end="1351:55">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1353:21" pos:end="1353:42"><expr pos:start="1353:21" pos:end="1353:41"><call pos:start="1353:21" pos:end="1353:41"><name pos:start="1353:21" pos:end="1353:33">gen_shift_reg</name><argument_list pos:start="1353:34" pos:end="1353:41">(<argument pos:start="1353:35" pos:end="1353:37"><expr pos:start="1353:35" pos:end="1353:37"><name pos:start="1353:35" pos:end="1353:37">shl</name></expr></argument>, <argument pos:start="1353:40" pos:end="1353:40"><expr pos:start="1353:40" pos:end="1353:40"><name pos:start="1353:40" pos:end="1353:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1355:21" pos:end="1355:37"><expr pos:start="1355:21" pos:end="1355:36"><call pos:start="1355:21" pos:end="1355:36"><name pos:start="1355:21" pos:end="1355:33">tcg_temp_free</name><argument_list pos:start="1355:34" pos:end="1355:36">(<argument pos:start="1355:35" pos:end="1355:35"><expr pos:start="1355:35" pos:end="1355:35"><name pos:start="1355:35" pos:end="1355:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1359:17" pos:end="1359:22">break;</break>



            <case pos:start="1363:13" pos:end="1363:20">case <expr pos:start="1363:18" pos:end="1363:19"><literal type="number" pos:start="1363:18" pos:end="1363:19">11</literal></expr>:</case> <comment type="block" pos:start="1363:22" pos:end="1363:28">/*SRA*/</comment>

                <expr_stmt pos:start="1365:17" pos:end="1365:52"><expr pos:start="1365:17" pos:end="1365:51"><call pos:start="1365:17" pos:end="1365:51"><name pos:start="1365:17" pos:end="1365:33">gen_window_check2</name><argument_list pos:start="1365:34" pos:end="1365:51">(<argument pos:start="1365:35" pos:end="1365:36"><expr pos:start="1365:35" pos:end="1365:36"><name pos:start="1365:35" pos:end="1365:36">dc</name></expr></argument>, <argument pos:start="1365:39" pos:end="1365:43"><expr pos:start="1365:39" pos:end="1365:43"><name pos:start="1365:39" pos:end="1365:43">RRR_R</name></expr></argument>, <argument pos:start="1365:46" pos:end="1365:50"><expr pos:start="1365:46" pos:end="1365:50"><name pos:start="1365:46" pos:end="1365:50">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1367:17" pos:end="1379:17"><if pos:start="1367:17" pos:end="1371:17">if <condition pos:start="1367:20" pos:end="1367:33">(<expr pos:start="1367:21" pos:end="1367:32"><name pos:start="1367:21" pos:end="1367:32"><name pos:start="1367:21" pos:end="1367:22">dc</name><operator pos:start="1367:23" pos:end="1367:24">-&gt;</operator><name pos:start="1367:25" pos:end="1367:32">sar_5bit</name></name></expr>)</condition> <block pos:start="1367:35" pos:end="1371:17">{<block_content pos:start="1369:21" pos:end="1369:77">

                    <expr_stmt pos:start="1369:21" pos:end="1369:77"><expr pos:start="1369:21" pos:end="1369:76"><call pos:start="1369:21" pos:end="1369:76"><name pos:start="1369:21" pos:end="1369:35">tcg_gen_sar_i32</name><argument_list pos:start="1369:36" pos:end="1369:76">(<argument pos:start="1369:37" pos:end="1369:48"><expr pos:start="1369:37" pos:end="1369:48"><name pos:start="1369:37" pos:end="1369:48"><name pos:start="1369:37" pos:end="1369:41">cpu_R</name><index pos:start="1369:42" pos:end="1369:48">[<expr pos:start="1369:43" pos:end="1369:47"><name pos:start="1369:43" pos:end="1369:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1369:51" pos:end="1369:62"><expr pos:start="1369:51" pos:end="1369:62"><name pos:start="1369:51" pos:end="1369:62"><name pos:start="1369:51" pos:end="1369:55">cpu_R</name><index pos:start="1369:56" pos:end="1369:62">[<expr pos:start="1369:57" pos:end="1369:61"><name pos:start="1369:57" pos:end="1369:61">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1369:65" pos:end="1369:75"><expr pos:start="1369:65" pos:end="1369:75"><name pos:start="1369:65" pos:end="1369:75"><name pos:start="1369:65" pos:end="1369:70">cpu_SR</name><index pos:start="1369:71" pos:end="1369:75">[<expr pos:start="1369:72" pos:end="1369:74"><name pos:start="1369:72" pos:end="1369:74">SAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1371:19" pos:end="1379:17">else <block pos:start="1371:24" pos:end="1379:17">{<block_content pos:start="1373:21" pos:end="1377:35">

                    <decl_stmt pos:start="1373:21" pos:end="1373:52"><decl pos:start="1373:21" pos:end="1373:51"><type pos:start="1373:21" pos:end="1373:28"><name pos:start="1373:21" pos:end="1373:28">TCGv_i64</name></type> <name pos:start="1373:30" pos:end="1373:30">v</name> <init pos:start="1373:32" pos:end="1373:51">= <expr pos:start="1373:34" pos:end="1373:51"><call pos:start="1373:34" pos:end="1373:51"><name pos:start="1373:34" pos:end="1373:49">tcg_temp_new_i64</name><argument_list pos:start="1373:50" pos:end="1373:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1375:21" pos:end="1375:57"><expr pos:start="1375:21" pos:end="1375:56"><call pos:start="1375:21" pos:end="1375:56"><name pos:start="1375:21" pos:end="1375:39">tcg_gen_ext_i32_i64</name><argument_list pos:start="1375:40" pos:end="1375:56">(<argument pos:start="1375:41" pos:end="1375:41"><expr pos:start="1375:41" pos:end="1375:41"><name pos:start="1375:41" pos:end="1375:41">v</name></expr></argument>, <argument pos:start="1375:44" pos:end="1375:55"><expr pos:start="1375:44" pos:end="1375:55"><name pos:start="1375:44" pos:end="1375:55"><name pos:start="1375:44" pos:end="1375:48">cpu_R</name><index pos:start="1375:49" pos:end="1375:55">[<expr pos:start="1375:50" pos:end="1375:54"><name pos:start="1375:50" pos:end="1375:54">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1377:21" pos:end="1377:35"><expr pos:start="1377:21" pos:end="1377:34"><call pos:start="1377:21" pos:end="1377:34"><name pos:start="1377:21" pos:end="1377:29">gen_shift</name><argument_list pos:start="1377:30" pos:end="1377:34">(<argument pos:start="1377:31" pos:end="1377:33"><expr pos:start="1377:31" pos:end="1377:33"><name pos:start="1377:31" pos:end="1377:33">sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1381:17" pos:end="1386:0">break;</break>

<cpp:undef pos:start="1383:1" pos:end="1383:16">#<cpp:directive pos:start="1383:2" pos:end="1383:6">undef</cpp:directive> <name pos:start="1383:8" pos:end="1383:16">gen_shift</name></cpp:undef>

<cpp:undef pos:start="1385:1" pos:end="1385:20">#<cpp:directive pos:start="1385:2" pos:end="1385:6">undef</cpp:directive> <name pos:start="1385:8" pos:end="1385:20">gen_shift_reg</name></cpp:undef>



            <case pos:start="1389:13" pos:end="1389:20">case <expr pos:start="1389:18" pos:end="1389:19"><literal type="number" pos:start="1389:18" pos:end="1389:19">12</literal></expr>:</case> <comment type="block" pos:start="1389:22" pos:end="1389:31">/*MUL16U*/</comment>

                <expr_stmt pos:start="1391:17" pos:end="1391:54"><expr pos:start="1391:17" pos:end="1391:53"><call pos:start="1391:17" pos:end="1391:53"><name pos:start="1391:17" pos:end="1391:26">HAS_OPTION</name><argument_list pos:start="1391:27" pos:end="1391:53">(<argument pos:start="1391:28" pos:end="1391:52"><expr pos:start="1391:28" pos:end="1391:52"><name pos:start="1391:28" pos:end="1391:52">XTENSA_OPTION_16_BIT_IMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1393:17" pos:end="1393:59"><expr pos:start="1393:17" pos:end="1393:58"><call pos:start="1393:17" pos:end="1393:58"><name pos:start="1393:17" pos:end="1393:33">gen_window_check3</name><argument_list pos:start="1393:34" pos:end="1393:58">(<argument pos:start="1393:35" pos:end="1393:36"><expr pos:start="1393:35" pos:end="1393:36"><name pos:start="1393:35" pos:end="1393:36">dc</name></expr></argument>, <argument pos:start="1393:39" pos:end="1393:43"><expr pos:start="1393:39" pos:end="1393:43"><name pos:start="1393:39" pos:end="1393:43">RRR_R</name></expr></argument>, <argument pos:start="1393:46" pos:end="1393:50"><expr pos:start="1393:46" pos:end="1393:50"><name pos:start="1393:46" pos:end="1393:50">RRR_S</name></expr></argument>, <argument pos:start="1393:53" pos:end="1393:57"><expr pos:start="1393:53" pos:end="1393:57"><name pos:start="1393:53" pos:end="1393:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1395:17" pos:end="1411:17">{<block_content pos:start="1397:21" pos:end="1409:38">

                    <decl_stmt pos:start="1397:21" pos:end="1397:53"><decl pos:start="1397:21" pos:end="1397:52"><type pos:start="1397:21" pos:end="1397:28"><name pos:start="1397:21" pos:end="1397:28">TCGv_i32</name></type> <name pos:start="1397:30" pos:end="1397:31">v1</name> <init pos:start="1397:33" pos:end="1397:52">= <expr pos:start="1397:35" pos:end="1397:52"><call pos:start="1397:35" pos:end="1397:52"><name pos:start="1397:35" pos:end="1397:50">tcg_temp_new_i32</name><argument_list pos:start="1397:51" pos:end="1397:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1399:21" pos:end="1399:53"><decl pos:start="1399:21" pos:end="1399:52"><type pos:start="1399:21" pos:end="1399:28"><name pos:start="1399:21" pos:end="1399:28">TCGv_i32</name></type> <name pos:start="1399:30" pos:end="1399:31">v2</name> <init pos:start="1399:33" pos:end="1399:52">= <expr pos:start="1399:35" pos:end="1399:52"><call pos:start="1399:35" pos:end="1399:52"><name pos:start="1399:35" pos:end="1399:50">tcg_temp_new_i32</name><argument_list pos:start="1399:51" pos:end="1399:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1401:21" pos:end="1401:57"><expr pos:start="1401:21" pos:end="1401:56"><call pos:start="1401:21" pos:end="1401:56"><name pos:start="1401:21" pos:end="1401:38">tcg_gen_ext16u_i32</name><argument_list pos:start="1401:39" pos:end="1401:56">(<argument pos:start="1401:40" pos:end="1401:41"><expr pos:start="1401:40" pos:end="1401:41"><name pos:start="1401:40" pos:end="1401:41">v1</name></expr></argument>, <argument pos:start="1401:44" pos:end="1401:55"><expr pos:start="1401:44" pos:end="1401:55"><name pos:start="1401:44" pos:end="1401:55"><name pos:start="1401:44" pos:end="1401:48">cpu_R</name><index pos:start="1401:49" pos:end="1401:55">[<expr pos:start="1401:50" pos:end="1401:54"><name pos:start="1401:50" pos:end="1401:54">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1403:21" pos:end="1403:57"><expr pos:start="1403:21" pos:end="1403:56"><call pos:start="1403:21" pos:end="1403:56"><name pos:start="1403:21" pos:end="1403:38">tcg_gen_ext16u_i32</name><argument_list pos:start="1403:39" pos:end="1403:56">(<argument pos:start="1403:40" pos:end="1403:41"><expr pos:start="1403:40" pos:end="1403:41"><name pos:start="1403:40" pos:end="1403:41">v2</name></expr></argument>, <argument pos:start="1403:44" pos:end="1403:55"><expr pos:start="1403:44" pos:end="1403:55"><name pos:start="1403:44" pos:end="1403:55"><name pos:start="1403:44" pos:end="1403:48">cpu_R</name><index pos:start="1403:49" pos:end="1403:55">[<expr pos:start="1403:50" pos:end="1403:54"><name pos:start="1403:50" pos:end="1403:54">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1405:21" pos:end="1405:58"><expr pos:start="1405:21" pos:end="1405:57"><call pos:start="1405:21" pos:end="1405:57"><name pos:start="1405:21" pos:end="1405:35">tcg_gen_mul_i32</name><argument_list pos:start="1405:36" pos:end="1405:57">(<argument pos:start="1405:37" pos:end="1405:48"><expr pos:start="1405:37" pos:end="1405:48"><name pos:start="1405:37" pos:end="1405:48"><name pos:start="1405:37" pos:end="1405:41">cpu_R</name><index pos:start="1405:42" pos:end="1405:48">[<expr pos:start="1405:43" pos:end="1405:47"><name pos:start="1405:43" pos:end="1405:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1405:51" pos:end="1405:52"><expr pos:start="1405:51" pos:end="1405:52"><name pos:start="1405:51" pos:end="1405:52">v1</name></expr></argument>, <argument pos:start="1405:55" pos:end="1405:56"><expr pos:start="1405:55" pos:end="1405:56"><name pos:start="1405:55" pos:end="1405:56">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1407:21" pos:end="1407:38"><expr pos:start="1407:21" pos:end="1407:37"><call pos:start="1407:21" pos:end="1407:37"><name pos:start="1407:21" pos:end="1407:33">tcg_temp_free</name><argument_list pos:start="1407:34" pos:end="1407:37">(<argument pos:start="1407:35" pos:end="1407:36"><expr pos:start="1407:35" pos:end="1407:36"><name pos:start="1407:35" pos:end="1407:36">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1409:21" pos:end="1409:38"><expr pos:start="1409:21" pos:end="1409:37"><call pos:start="1409:21" pos:end="1409:37"><name pos:start="1409:21" pos:end="1409:33">tcg_temp_free</name><argument_list pos:start="1409:34" pos:end="1409:37">(<argument pos:start="1409:35" pos:end="1409:36"><expr pos:start="1409:35" pos:end="1409:36"><name pos:start="1409:35" pos:end="1409:36">v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1413:17" pos:end="1413:22">break;</break>



            <case pos:start="1417:13" pos:end="1417:20">case <expr pos:start="1417:18" pos:end="1417:19"><literal type="number" pos:start="1417:18" pos:end="1417:19">13</literal></expr>:</case> <comment type="block" pos:start="1417:22" pos:end="1417:31">/*MUL16S*/</comment>

                <expr_stmt pos:start="1419:17" pos:end="1419:54"><expr pos:start="1419:17" pos:end="1419:53"><call pos:start="1419:17" pos:end="1419:53"><name pos:start="1419:17" pos:end="1419:26">HAS_OPTION</name><argument_list pos:start="1419:27" pos:end="1419:53">(<argument pos:start="1419:28" pos:end="1419:52"><expr pos:start="1419:28" pos:end="1419:52"><name pos:start="1419:28" pos:end="1419:52">XTENSA_OPTION_16_BIT_IMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:59"><expr pos:start="1421:17" pos:end="1421:58"><call pos:start="1421:17" pos:end="1421:58"><name pos:start="1421:17" pos:end="1421:33">gen_window_check3</name><argument_list pos:start="1421:34" pos:end="1421:58">(<argument pos:start="1421:35" pos:end="1421:36"><expr pos:start="1421:35" pos:end="1421:36"><name pos:start="1421:35" pos:end="1421:36">dc</name></expr></argument>, <argument pos:start="1421:39" pos:end="1421:43"><expr pos:start="1421:39" pos:end="1421:43"><name pos:start="1421:39" pos:end="1421:43">RRR_R</name></expr></argument>, <argument pos:start="1421:46" pos:end="1421:50"><expr pos:start="1421:46" pos:end="1421:50"><name pos:start="1421:46" pos:end="1421:50">RRR_S</name></expr></argument>, <argument pos:start="1421:53" pos:end="1421:57"><expr pos:start="1421:53" pos:end="1421:57"><name pos:start="1421:53" pos:end="1421:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1423:17" pos:end="1439:17">{<block_content pos:start="1425:21" pos:end="1437:38">

                    <decl_stmt pos:start="1425:21" pos:end="1425:53"><decl pos:start="1425:21" pos:end="1425:52"><type pos:start="1425:21" pos:end="1425:28"><name pos:start="1425:21" pos:end="1425:28">TCGv_i32</name></type> <name pos:start="1425:30" pos:end="1425:31">v1</name> <init pos:start="1425:33" pos:end="1425:52">= <expr pos:start="1425:35" pos:end="1425:52"><call pos:start="1425:35" pos:end="1425:52"><name pos:start="1425:35" pos:end="1425:50">tcg_temp_new_i32</name><argument_list pos:start="1425:51" pos:end="1425:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1427:21" pos:end="1427:53"><decl pos:start="1427:21" pos:end="1427:52"><type pos:start="1427:21" pos:end="1427:28"><name pos:start="1427:21" pos:end="1427:28">TCGv_i32</name></type> <name pos:start="1427:30" pos:end="1427:31">v2</name> <init pos:start="1427:33" pos:end="1427:52">= <expr pos:start="1427:35" pos:end="1427:52"><call pos:start="1427:35" pos:end="1427:52"><name pos:start="1427:35" pos:end="1427:50">tcg_temp_new_i32</name><argument_list pos:start="1427:51" pos:end="1427:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1429:21" pos:end="1429:57"><expr pos:start="1429:21" pos:end="1429:56"><call pos:start="1429:21" pos:end="1429:56"><name pos:start="1429:21" pos:end="1429:38">tcg_gen_ext16s_i32</name><argument_list pos:start="1429:39" pos:end="1429:56">(<argument pos:start="1429:40" pos:end="1429:41"><expr pos:start="1429:40" pos:end="1429:41"><name pos:start="1429:40" pos:end="1429:41">v1</name></expr></argument>, <argument pos:start="1429:44" pos:end="1429:55"><expr pos:start="1429:44" pos:end="1429:55"><name pos:start="1429:44" pos:end="1429:55"><name pos:start="1429:44" pos:end="1429:48">cpu_R</name><index pos:start="1429:49" pos:end="1429:55">[<expr pos:start="1429:50" pos:end="1429:54"><name pos:start="1429:50" pos:end="1429:54">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1431:21" pos:end="1431:57"><expr pos:start="1431:21" pos:end="1431:56"><call pos:start="1431:21" pos:end="1431:56"><name pos:start="1431:21" pos:end="1431:38">tcg_gen_ext16s_i32</name><argument_list pos:start="1431:39" pos:end="1431:56">(<argument pos:start="1431:40" pos:end="1431:41"><expr pos:start="1431:40" pos:end="1431:41"><name pos:start="1431:40" pos:end="1431:41">v2</name></expr></argument>, <argument pos:start="1431:44" pos:end="1431:55"><expr pos:start="1431:44" pos:end="1431:55"><name pos:start="1431:44" pos:end="1431:55"><name pos:start="1431:44" pos:end="1431:48">cpu_R</name><index pos:start="1431:49" pos:end="1431:55">[<expr pos:start="1431:50" pos:end="1431:54"><name pos:start="1431:50" pos:end="1431:54">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1433:21" pos:end="1433:58"><expr pos:start="1433:21" pos:end="1433:57"><call pos:start="1433:21" pos:end="1433:57"><name pos:start="1433:21" pos:end="1433:35">tcg_gen_mul_i32</name><argument_list pos:start="1433:36" pos:end="1433:57">(<argument pos:start="1433:37" pos:end="1433:48"><expr pos:start="1433:37" pos:end="1433:48"><name pos:start="1433:37" pos:end="1433:48"><name pos:start="1433:37" pos:end="1433:41">cpu_R</name><index pos:start="1433:42" pos:end="1433:48">[<expr pos:start="1433:43" pos:end="1433:47"><name pos:start="1433:43" pos:end="1433:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1433:51" pos:end="1433:52"><expr pos:start="1433:51" pos:end="1433:52"><name pos:start="1433:51" pos:end="1433:52">v1</name></expr></argument>, <argument pos:start="1433:55" pos:end="1433:56"><expr pos:start="1433:55" pos:end="1433:56"><name pos:start="1433:55" pos:end="1433:56">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1435:21" pos:end="1435:38"><expr pos:start="1435:21" pos:end="1435:37"><call pos:start="1435:21" pos:end="1435:37"><name pos:start="1435:21" pos:end="1435:33">tcg_temp_free</name><argument_list pos:start="1435:34" pos:end="1435:37">(<argument pos:start="1435:35" pos:end="1435:36"><expr pos:start="1435:35" pos:end="1435:36"><name pos:start="1435:35" pos:end="1435:36">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1437:21" pos:end="1437:38"><expr pos:start="1437:21" pos:end="1437:37"><call pos:start="1437:21" pos:end="1437:37"><name pos:start="1437:21" pos:end="1437:33">tcg_temp_free</name><argument_list pos:start="1437:34" pos:end="1437:37">(<argument pos:start="1437:35" pos:end="1437:36"><expr pos:start="1437:35" pos:end="1437:36"><name pos:start="1437:35" pos:end="1437:36">v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1441:17" pos:end="1441:22">break;</break>



            <default pos:start="1445:13" pos:end="1445:20">default:</default> <comment type="block" pos:start="1445:22" pos:end="1445:33">/*reserved*/</comment>

                <expr_stmt pos:start="1447:17" pos:end="1447:27"><expr pos:start="1447:17" pos:end="1447:26"><call pos:start="1447:17" pos:end="1447:26"><name pos:start="1447:17" pos:end="1447:24">RESERVED</name><argument_list pos:start="1447:25" pos:end="1447:26">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1449:17" pos:end="1449:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1453:13" pos:end="1453:18">break;</break>



        <case pos:start="1457:9" pos:end="1457:15">case <expr pos:start="1457:14" pos:end="1457:14"><literal type="number" pos:start="1457:14" pos:end="1457:14">2</literal></expr>:</case> <comment type="block" pos:start="1457:17" pos:end="1457:24">/*RST2*/</comment>

            <if_stmt pos:start="1459:13" pos:end="1463:13"><if pos:start="1459:13" pos:end="1463:13">if <condition pos:start="1459:16" pos:end="1459:25">(<expr pos:start="1459:17" pos:end="1459:24"><name pos:start="1459:17" pos:end="1459:19">OP2</name> <operator pos:start="1459:21" pos:end="1459:22">&gt;=</operator> <literal type="number" pos:start="1459:24" pos:end="1459:24">8</literal></expr>)</condition> <block pos:start="1459:27" pos:end="1463:13">{<block_content pos:start="1461:17" pos:end="1461:59">

                <expr_stmt pos:start="1461:17" pos:end="1461:59"><expr pos:start="1461:17" pos:end="1461:58"><call pos:start="1461:17" pos:end="1461:58"><name pos:start="1461:17" pos:end="1461:33">gen_window_check3</name><argument_list pos:start="1461:34" pos:end="1461:58">(<argument pos:start="1461:35" pos:end="1461:36"><expr pos:start="1461:35" pos:end="1461:36"><name pos:start="1461:35" pos:end="1461:36">dc</name></expr></argument>, <argument pos:start="1461:39" pos:end="1461:43"><expr pos:start="1461:39" pos:end="1461:43"><name pos:start="1461:39" pos:end="1461:43">RRR_R</name></expr></argument>, <argument pos:start="1461:46" pos:end="1461:50"><expr pos:start="1461:46" pos:end="1461:50"><name pos:start="1461:46" pos:end="1461:50">RRR_S</name></expr></argument>, <argument pos:start="1461:53" pos:end="1461:57"><expr pos:start="1461:53" pos:end="1461:57"><name pos:start="1461:53" pos:end="1461:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="1467:13" pos:end="1479:13"><if pos:start="1467:13" pos:end="1479:13">if <condition pos:start="1467:16" pos:end="1467:26">(<expr pos:start="1467:17" pos:end="1467:25"><name pos:start="1467:17" pos:end="1467:19">OP2</name> <operator pos:start="1467:21" pos:end="1467:22">&gt;=</operator> <literal type="number" pos:start="1467:24" pos:end="1467:25">12</literal></expr>)</condition> <block pos:start="1467:28" pos:end="1479:13">{<block_content pos:start="1469:17" pos:end="1477:37">

                <expr_stmt pos:start="1469:17" pos:end="1469:54"><expr pos:start="1469:17" pos:end="1469:53"><call pos:start="1469:17" pos:end="1469:53"><name pos:start="1469:17" pos:end="1469:26">HAS_OPTION</name><argument_list pos:start="1469:27" pos:end="1469:53">(<argument pos:start="1469:28" pos:end="1469:52"><expr pos:start="1469:28" pos:end="1469:52"><name pos:start="1469:28" pos:end="1469:52">XTENSA_OPTION_32_BIT_IDIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt pos:start="1471:17" pos:end="1471:44"><decl pos:start="1471:17" pos:end="1471:43"><type pos:start="1471:17" pos:end="1471:19"><name pos:start="1471:17" pos:end="1471:19">int</name></type> <name pos:start="1471:21" pos:end="1471:25">label</name> <init pos:start="1471:27" pos:end="1471:43">= <expr pos:start="1471:29" pos:end="1471:43"><call pos:start="1471:29" pos:end="1471:43"><name pos:start="1471:29" pos:end="1471:41">gen_new_label</name><argument_list pos:start="1471:42" pos:end="1471:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1473:17" pos:end="1473:73"><expr pos:start="1473:17" pos:end="1473:72"><call pos:start="1473:17" pos:end="1473:72"><name pos:start="1473:17" pos:end="1473:35">tcg_gen_brcondi_i32</name><argument_list pos:start="1473:36" pos:end="1473:72">(<argument pos:start="1473:37" pos:end="1473:47"><expr pos:start="1473:37" pos:end="1473:47"><name pos:start="1473:37" pos:end="1473:47">TCG_COND_NE</name></expr></argument>, <argument pos:start="1473:50" pos:end="1473:61"><expr pos:start="1473:50" pos:end="1473:61"><name pos:start="1473:50" pos:end="1473:61"><name pos:start="1473:50" pos:end="1473:54">cpu_R</name><index pos:start="1473:55" pos:end="1473:61">[<expr pos:start="1473:56" pos:end="1473:60"><name pos:start="1473:56" pos:end="1473:60">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1473:64" pos:end="1473:64"><expr pos:start="1473:64" pos:end="1473:64"><literal type="number" pos:start="1473:64" pos:end="1473:64">0</literal></expr></argument>, <argument pos:start="1473:67" pos:end="1473:71"><expr pos:start="1473:67" pos:end="1473:71"><name pos:start="1473:67" pos:end="1473:71">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1475:17" pos:end="1475:70"><expr pos:start="1475:17" pos:end="1475:69"><call pos:start="1475:17" pos:end="1475:69"><name pos:start="1475:17" pos:end="1475:35">gen_exception_cause</name><argument_list pos:start="1475:36" pos:end="1475:69">(<argument pos:start="1475:37" pos:end="1475:38"><expr pos:start="1475:37" pos:end="1475:38"><name pos:start="1475:37" pos:end="1475:38">dc</name></expr></argument>, <argument pos:start="1475:41" pos:end="1475:68"><expr pos:start="1475:41" pos:end="1475:68"><name pos:start="1475:41" pos:end="1475:68">INTEGER_DIVIDE_BY_ZERO_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1477:17" pos:end="1477:37"><expr pos:start="1477:17" pos:end="1477:36"><call pos:start="1477:17" pos:end="1477:36"><name pos:start="1477:17" pos:end="1477:29">gen_set_label</name><argument_list pos:start="1477:30" pos:end="1477:36">(<argument pos:start="1477:31" pos:end="1477:35"><expr pos:start="1477:31" pos:end="1477:35"><name pos:start="1477:31" pos:end="1477:35">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="1483:13" pos:end="1689:13">switch <condition pos:start="1483:20" pos:end="1483:24">(<expr pos:start="1483:21" pos:end="1483:23"><name pos:start="1483:21" pos:end="1483:23">OP2</name></expr>)</condition> <block pos:start="1483:26" pos:end="1689:13">{<block_content pos:start="1513:13" pos:end="1687:22">

<cpp:define pos:start="1485:1" pos:end="1509:27">#<cpp:directive pos:start="1485:2" pos:end="1485:7">define</cpp:directive> <cpp:macro pos:start="1485:9" pos:end="1485:34"><name pos:start="1485:9" pos:end="1485:21">BOOLEAN_LOGIC</name><parameter_list pos:start="1485:22" pos:end="1485:34">(<parameter pos:start="1485:23" pos:end="1485:24"><type pos:start="1485:23" pos:end="1485:24"><name pos:start="1485:23" pos:end="1485:24">fn</name></type></parameter>, <parameter pos:start="1485:27" pos:end="1485:27"><type pos:start="1485:27" pos:end="1485:27"><name pos:start="1485:27" pos:end="1485:27">r</name></type></parameter>, <parameter pos:start="1485:30" pos:end="1485:30"><type pos:start="1485:30" pos:end="1485:30"><name pos:start="1485:30" pos:end="1485:30">s</name></type></parameter>, <parameter pos:start="1485:33" pos:end="1485:33"><type pos:start="1485:33" pos:end="1485:33"><name pos:start="1485:33" pos:end="1485:33">t</name></type></parameter>)</parameter_list></cpp:macro> \

                <cpp:value pos:start="1487:17" pos:end="1509:27">do { \

                    HAS_OPTION(XTENSA_OPTION_BOOLEAN); \

                    TCGv_i32 tmp1 = tcg_temp_new_i32(); \

                    TCGv_i32 tmp2 = tcg_temp_new_i32(); \

                    \

                    tcg_gen_shri_i32(tmp1, cpu_SR[BR], s); \

                    tcg_gen_shri_i32(tmp2, cpu_SR[BR], t); \

                    tcg_gen_##fn##_i32(tmp1, tmp1, tmp2); \

                    tcg_gen_deposit_i32(cpu_SR[BR], cpu_SR[BR], tmp1, r, 1); \

                    tcg_temp_free(tmp1); \

                    tcg_temp_free(tmp2); \

                } while (0)</cpp:value></cpp:define>



            <case pos:start="1513:13" pos:end="1513:19">case <expr pos:start="1513:18" pos:end="1513:18"><literal type="number" pos:start="1513:18" pos:end="1513:18">0</literal></expr>:</case> <comment type="block" pos:start="1513:21" pos:end="1513:29">/*ANDBp*/</comment>

                <expr_stmt pos:start="1515:17" pos:end="1515:56"><expr pos:start="1515:17" pos:end="1515:55"><call pos:start="1515:17" pos:end="1515:55"><name pos:start="1515:17" pos:end="1515:29">BOOLEAN_LOGIC</name><argument_list pos:start="1515:30" pos:end="1515:55">(<argument pos:start="1515:31" pos:end="1515:33"><expr pos:start="1515:31" pos:end="1515:33"><name pos:start="1515:31" pos:end="1515:33">and</name></expr></argument>, <argument pos:start="1515:36" pos:end="1515:40"><expr pos:start="1515:36" pos:end="1515:40"><name pos:start="1515:36" pos:end="1515:40">RRR_R</name></expr></argument>, <argument pos:start="1515:43" pos:end="1515:47"><expr pos:start="1515:43" pos:end="1515:47"><name pos:start="1515:43" pos:end="1515:47">RRR_S</name></expr></argument>, <argument pos:start="1515:50" pos:end="1515:54"><expr pos:start="1515:50" pos:end="1515:54"><name pos:start="1515:50" pos:end="1515:54">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1517:17" pos:end="1517:22">break;</break>



            <case pos:start="1521:13" pos:end="1521:19">case <expr pos:start="1521:18" pos:end="1521:18"><literal type="number" pos:start="1521:18" pos:end="1521:18">1</literal></expr>:</case> <comment type="block" pos:start="1521:21" pos:end="1521:30">/*ANDBCp*/</comment>

                <expr_stmt pos:start="1523:17" pos:end="1523:57"><expr pos:start="1523:17" pos:end="1523:56"><call pos:start="1523:17" pos:end="1523:56"><name pos:start="1523:17" pos:end="1523:29">BOOLEAN_LOGIC</name><argument_list pos:start="1523:30" pos:end="1523:56">(<argument pos:start="1523:31" pos:end="1523:34"><expr pos:start="1523:31" pos:end="1523:34"><name pos:start="1523:31" pos:end="1523:34">andc</name></expr></argument>, <argument pos:start="1523:37" pos:end="1523:41"><expr pos:start="1523:37" pos:end="1523:41"><name pos:start="1523:37" pos:end="1523:41">RRR_R</name></expr></argument>, <argument pos:start="1523:44" pos:end="1523:48"><expr pos:start="1523:44" pos:end="1523:48"><name pos:start="1523:44" pos:end="1523:48">RRR_S</name></expr></argument>, <argument pos:start="1523:51" pos:end="1523:55"><expr pos:start="1523:51" pos:end="1523:55"><name pos:start="1523:51" pos:end="1523:55">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1525:17" pos:end="1525:22">break;</break>



            <case pos:start="1529:13" pos:end="1529:19">case <expr pos:start="1529:18" pos:end="1529:18"><literal type="number" pos:start="1529:18" pos:end="1529:18">2</literal></expr>:</case> <comment type="block" pos:start="1529:21" pos:end="1529:28">/*ORBp*/</comment>

                <expr_stmt pos:start="1531:17" pos:end="1531:55"><expr pos:start="1531:17" pos:end="1531:54"><call pos:start="1531:17" pos:end="1531:54"><name pos:start="1531:17" pos:end="1531:29">BOOLEAN_LOGIC</name><argument_list pos:start="1531:30" pos:end="1531:54">(<argument pos:start="1531:31" pos:end="1531:32"><expr pos:start="1531:31" pos:end="1531:32"><name pos:start="1531:31" pos:end="1531:32">or</name></expr></argument>, <argument pos:start="1531:35" pos:end="1531:39"><expr pos:start="1531:35" pos:end="1531:39"><name pos:start="1531:35" pos:end="1531:39">RRR_R</name></expr></argument>, <argument pos:start="1531:42" pos:end="1531:46"><expr pos:start="1531:42" pos:end="1531:46"><name pos:start="1531:42" pos:end="1531:46">RRR_S</name></expr></argument>, <argument pos:start="1531:49" pos:end="1531:53"><expr pos:start="1531:49" pos:end="1531:53"><name pos:start="1531:49" pos:end="1531:53">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1533:17" pos:end="1533:22">break;</break>



            <case pos:start="1537:13" pos:end="1537:19">case <expr pos:start="1537:18" pos:end="1537:18"><literal type="number" pos:start="1537:18" pos:end="1537:18">3</literal></expr>:</case> <comment type="block" pos:start="1537:21" pos:end="1537:29">/*ORBCp*/</comment>

                <expr_stmt pos:start="1539:17" pos:end="1539:56"><expr pos:start="1539:17" pos:end="1539:55"><call pos:start="1539:17" pos:end="1539:55"><name pos:start="1539:17" pos:end="1539:29">BOOLEAN_LOGIC</name><argument_list pos:start="1539:30" pos:end="1539:55">(<argument pos:start="1539:31" pos:end="1539:33"><expr pos:start="1539:31" pos:end="1539:33"><name pos:start="1539:31" pos:end="1539:33">orc</name></expr></argument>, <argument pos:start="1539:36" pos:end="1539:40"><expr pos:start="1539:36" pos:end="1539:40"><name pos:start="1539:36" pos:end="1539:40">RRR_R</name></expr></argument>, <argument pos:start="1539:43" pos:end="1539:47"><expr pos:start="1539:43" pos:end="1539:47"><name pos:start="1539:43" pos:end="1539:47">RRR_S</name></expr></argument>, <argument pos:start="1539:50" pos:end="1539:54"><expr pos:start="1539:50" pos:end="1539:54"><name pos:start="1539:50" pos:end="1539:54">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1541:17" pos:end="1541:22">break;</break>



            <case pos:start="1545:13" pos:end="1545:19">case <expr pos:start="1545:18" pos:end="1545:18"><literal type="number" pos:start="1545:18" pos:end="1545:18">4</literal></expr>:</case> <comment type="block" pos:start="1545:21" pos:end="1545:29">/*XORBp*/</comment>

                <expr_stmt pos:start="1547:17" pos:end="1547:56"><expr pos:start="1547:17" pos:end="1547:55"><call pos:start="1547:17" pos:end="1547:55"><name pos:start="1547:17" pos:end="1547:29">BOOLEAN_LOGIC</name><argument_list pos:start="1547:30" pos:end="1547:55">(<argument pos:start="1547:31" pos:end="1547:33"><expr pos:start="1547:31" pos:end="1547:33"><name pos:start="1547:31" pos:end="1547:33">xor</name></expr></argument>, <argument pos:start="1547:36" pos:end="1547:40"><expr pos:start="1547:36" pos:end="1547:40"><name pos:start="1547:36" pos:end="1547:40">RRR_R</name></expr></argument>, <argument pos:start="1547:43" pos:end="1547:47"><expr pos:start="1547:43" pos:end="1547:47"><name pos:start="1547:43" pos:end="1547:47">RRR_S</name></expr></argument>, <argument pos:start="1547:50" pos:end="1547:54"><expr pos:start="1547:50" pos:end="1547:54"><name pos:start="1547:50" pos:end="1547:54">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1549:17" pos:end="1554:0">break;</break>



<cpp:undef pos:start="1553:1" pos:end="1553:20">#<cpp:directive pos:start="1553:2" pos:end="1553:6">undef</cpp:directive> <name pos:start="1553:8" pos:end="1553:20">BOOLEAN_LOGIC</name></cpp:undef>



            <case pos:start="1557:13" pos:end="1557:19">case <expr pos:start="1557:18" pos:end="1557:18"><literal type="number" pos:start="1557:18" pos:end="1557:18">8</literal></expr>:</case> <comment type="block" pos:start="1557:21" pos:end="1557:29">/*MULLi*/</comment>

                <expr_stmt pos:start="1559:17" pos:end="1559:54"><expr pos:start="1559:17" pos:end="1559:53"><call pos:start="1559:17" pos:end="1559:53"><name pos:start="1559:17" pos:end="1559:26">HAS_OPTION</name><argument_list pos:start="1559:27" pos:end="1559:53">(<argument pos:start="1559:28" pos:end="1559:52"><expr pos:start="1559:28" pos:end="1559:52"><name pos:start="1559:28" pos:end="1559:52">XTENSA_OPTION_32_BIT_IMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1561:17" pos:end="1561:74"><expr pos:start="1561:17" pos:end="1561:73"><call pos:start="1561:17" pos:end="1561:73"><name pos:start="1561:17" pos:end="1561:31">tcg_gen_mul_i32</name><argument_list pos:start="1561:32" pos:end="1561:73">(<argument pos:start="1561:33" pos:end="1561:44"><expr pos:start="1561:33" pos:end="1561:44"><name pos:start="1561:33" pos:end="1561:44"><name pos:start="1561:33" pos:end="1561:37">cpu_R</name><index pos:start="1561:38" pos:end="1561:44">[<expr pos:start="1561:39" pos:end="1561:43"><name pos:start="1561:39" pos:end="1561:43">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1561:47" pos:end="1561:58"><expr pos:start="1561:47" pos:end="1561:58"><name pos:start="1561:47" pos:end="1561:58"><name pos:start="1561:47" pos:end="1561:51">cpu_R</name><index pos:start="1561:52" pos:end="1561:58">[<expr pos:start="1561:53" pos:end="1561:57"><name pos:start="1561:53" pos:end="1561:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1561:61" pos:end="1561:72"><expr pos:start="1561:61" pos:end="1561:72"><name pos:start="1561:61" pos:end="1561:72"><name pos:start="1561:61" pos:end="1561:65">cpu_R</name><index pos:start="1561:66" pos:end="1561:72">[<expr pos:start="1561:67" pos:end="1561:71"><name pos:start="1561:67" pos:end="1561:71">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1563:17" pos:end="1563:22">break;</break>



            <case pos:start="1567:13" pos:end="1567:20">case <expr pos:start="1567:18" pos:end="1567:19"><literal type="number" pos:start="1567:18" pos:end="1567:19">10</literal></expr>:</case> <comment type="block" pos:start="1567:22" pos:end="1567:31">/*MULUHi*/</comment>

            <case pos:start="1569:13" pos:end="1569:20">case <expr pos:start="1569:18" pos:end="1569:19"><literal type="number" pos:start="1569:18" pos:end="1569:19">11</literal></expr>:</case> <comment type="block" pos:start="1569:22" pos:end="1569:31">/*MULSHi*/</comment>

                <expr_stmt pos:start="1571:17" pos:end="1571:59"><expr pos:start="1571:17" pos:end="1571:58"><call pos:start="1571:17" pos:end="1571:58"><name pos:start="1571:17" pos:end="1571:26">HAS_OPTION</name><argument_list pos:start="1571:27" pos:end="1571:58">(<argument pos:start="1571:28" pos:end="1571:57"><expr pos:start="1571:28" pos:end="1571:57"><name pos:start="1571:28" pos:end="1571:57">XTENSA_OPTION_32_BIT_IMUL_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1573:17" pos:end="1611:17">{<block_content pos:start="1575:21" pos:end="1609:41">

                    <decl_stmt pos:start="1575:21" pos:end="1575:52"><decl pos:start="1575:21" pos:end="1575:51"><type pos:start="1575:21" pos:end="1575:28"><name pos:start="1575:21" pos:end="1575:28">TCGv_i64</name></type> <name pos:start="1575:30" pos:end="1575:30">r</name> <init pos:start="1575:32" pos:end="1575:51">= <expr pos:start="1575:34" pos:end="1575:51"><call pos:start="1575:34" pos:end="1575:51"><name pos:start="1575:34" pos:end="1575:49">tcg_temp_new_i64</name><argument_list pos:start="1575:50" pos:end="1575:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1577:21" pos:end="1577:52"><decl pos:start="1577:21" pos:end="1577:51"><type pos:start="1577:21" pos:end="1577:28"><name pos:start="1577:21" pos:end="1577:28">TCGv_i64</name></type> <name pos:start="1577:30" pos:end="1577:30">s</name> <init pos:start="1577:32" pos:end="1577:51">= <expr pos:start="1577:34" pos:end="1577:51"><call pos:start="1577:34" pos:end="1577:51"><name pos:start="1577:34" pos:end="1577:49">tcg_temp_new_i64</name><argument_list pos:start="1577:50" pos:end="1577:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1579:21" pos:end="1579:52"><decl pos:start="1579:21" pos:end="1579:51"><type pos:start="1579:21" pos:end="1579:28"><name pos:start="1579:21" pos:end="1579:28">TCGv_i64</name></type> <name pos:start="1579:30" pos:end="1579:30">t</name> <init pos:start="1579:32" pos:end="1579:51">= <expr pos:start="1579:34" pos:end="1579:51"><call pos:start="1579:34" pos:end="1579:51"><name pos:start="1579:34" pos:end="1579:49">tcg_temp_new_i64</name><argument_list pos:start="1579:50" pos:end="1579:51">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="1583:21" pos:end="1595:21"><if pos:start="1583:21" pos:end="1589:21">if <condition pos:start="1583:24" pos:end="1583:34">(<expr pos:start="1583:25" pos:end="1583:33"><name pos:start="1583:25" pos:end="1583:27">OP2</name> <operator pos:start="1583:29" pos:end="1583:30">==</operator> <literal type="number" pos:start="1583:32" pos:end="1583:33">10</literal></expr>)</condition> <block pos:start="1583:36" pos:end="1589:21">{<block_content pos:start="1585:25" pos:end="1587:62">

                        <expr_stmt pos:start="1585:25" pos:end="1585:62"><expr pos:start="1585:25" pos:end="1585:61"><call pos:start="1585:25" pos:end="1585:61"><name pos:start="1585:25" pos:end="1585:44">tcg_gen_extu_i32_i64</name><argument_list pos:start="1585:45" pos:end="1585:61">(<argument pos:start="1585:46" pos:end="1585:46"><expr pos:start="1585:46" pos:end="1585:46"><name pos:start="1585:46" pos:end="1585:46">s</name></expr></argument>, <argument pos:start="1585:49" pos:end="1585:60"><expr pos:start="1585:49" pos:end="1585:60"><name pos:start="1585:49" pos:end="1585:60"><name pos:start="1585:49" pos:end="1585:53">cpu_R</name><index pos:start="1585:54" pos:end="1585:60">[<expr pos:start="1585:55" pos:end="1585:59"><name pos:start="1585:55" pos:end="1585:59">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1587:25" pos:end="1587:62"><expr pos:start="1587:25" pos:end="1587:61"><call pos:start="1587:25" pos:end="1587:61"><name pos:start="1587:25" pos:end="1587:44">tcg_gen_extu_i32_i64</name><argument_list pos:start="1587:45" pos:end="1587:61">(<argument pos:start="1587:46" pos:end="1587:46"><expr pos:start="1587:46" pos:end="1587:46"><name pos:start="1587:46" pos:end="1587:46">t</name></expr></argument>, <argument pos:start="1587:49" pos:end="1587:60"><expr pos:start="1587:49" pos:end="1587:60"><name pos:start="1587:49" pos:end="1587:60"><name pos:start="1587:49" pos:end="1587:53">cpu_R</name><index pos:start="1587:54" pos:end="1587:60">[<expr pos:start="1587:55" pos:end="1587:59"><name pos:start="1587:55" pos:end="1587:59">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1589:23" pos:end="1595:21">else <block pos:start="1589:28" pos:end="1595:21">{<block_content pos:start="1591:25" pos:end="1593:61">

                        <expr_stmt pos:start="1591:25" pos:end="1591:61"><expr pos:start="1591:25" pos:end="1591:60"><call pos:start="1591:25" pos:end="1591:60"><name pos:start="1591:25" pos:end="1591:43">tcg_gen_ext_i32_i64</name><argument_list pos:start="1591:44" pos:end="1591:60">(<argument pos:start="1591:45" pos:end="1591:45"><expr pos:start="1591:45" pos:end="1591:45"><name pos:start="1591:45" pos:end="1591:45">s</name></expr></argument>, <argument pos:start="1591:48" pos:end="1591:59"><expr pos:start="1591:48" pos:end="1591:59"><name pos:start="1591:48" pos:end="1591:59"><name pos:start="1591:48" pos:end="1591:52">cpu_R</name><index pos:start="1591:53" pos:end="1591:59">[<expr pos:start="1591:54" pos:end="1591:58"><name pos:start="1591:54" pos:end="1591:58">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1593:25" pos:end="1593:61"><expr pos:start="1593:25" pos:end="1593:60"><call pos:start="1593:25" pos:end="1593:60"><name pos:start="1593:25" pos:end="1593:43">tcg_gen_ext_i32_i64</name><argument_list pos:start="1593:44" pos:end="1593:60">(<argument pos:start="1593:45" pos:end="1593:45"><expr pos:start="1593:45" pos:end="1593:45"><name pos:start="1593:45" pos:end="1593:45">t</name></expr></argument>, <argument pos:start="1593:48" pos:end="1593:59"><expr pos:start="1593:48" pos:end="1593:59"><name pos:start="1593:48" pos:end="1593:59"><name pos:start="1593:48" pos:end="1593:52">cpu_R</name><index pos:start="1593:53" pos:end="1593:59">[<expr pos:start="1593:54" pos:end="1593:58"><name pos:start="1593:54" pos:end="1593:58">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1597:21" pos:end="1597:45"><expr pos:start="1597:21" pos:end="1597:44"><call pos:start="1597:21" pos:end="1597:44"><name pos:start="1597:21" pos:end="1597:35">tcg_gen_mul_i64</name><argument_list pos:start="1597:36" pos:end="1597:44">(<argument pos:start="1597:37" pos:end="1597:37"><expr pos:start="1597:37" pos:end="1597:37"><name pos:start="1597:37" pos:end="1597:37">r</name></expr></argument>, <argument pos:start="1597:40" pos:end="1597:40"><expr pos:start="1597:40" pos:end="1597:40"><name pos:start="1597:40" pos:end="1597:40">s</name></expr></argument>, <argument pos:start="1597:43" pos:end="1597:43"><expr pos:start="1597:43" pos:end="1597:43"><name pos:start="1597:43" pos:end="1597:43">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1599:21" pos:end="1599:47"><expr pos:start="1599:21" pos:end="1599:46"><call pos:start="1599:21" pos:end="1599:46"><name pos:start="1599:21" pos:end="1599:36">tcg_gen_shri_i64</name><argument_list pos:start="1599:37" pos:end="1599:46">(<argument pos:start="1599:38" pos:end="1599:38"><expr pos:start="1599:38" pos:end="1599:38"><name pos:start="1599:38" pos:end="1599:38">r</name></expr></argument>, <argument pos:start="1599:41" pos:end="1599:41"><expr pos:start="1599:41" pos:end="1599:41"><name pos:start="1599:41" pos:end="1599:41">r</name></expr></argument>, <argument pos:start="1599:44" pos:end="1599:45"><expr pos:start="1599:44" pos:end="1599:45"><literal type="number" pos:start="1599:44" pos:end="1599:45">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1601:21" pos:end="1601:59"><expr pos:start="1601:21" pos:end="1601:58"><call pos:start="1601:21" pos:end="1601:58"><name pos:start="1601:21" pos:end="1601:41">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1601:42" pos:end="1601:58">(<argument pos:start="1601:43" pos:end="1601:54"><expr pos:start="1601:43" pos:end="1601:54"><name pos:start="1601:43" pos:end="1601:54"><name pos:start="1601:43" pos:end="1601:47">cpu_R</name><index pos:start="1601:48" pos:end="1601:54">[<expr pos:start="1601:49" pos:end="1601:53"><name pos:start="1601:49" pos:end="1601:53">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1601:57" pos:end="1601:57"><expr pos:start="1601:57" pos:end="1601:57"><name pos:start="1601:57" pos:end="1601:57">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1605:21" pos:end="1605:41"><expr pos:start="1605:21" pos:end="1605:40"><call pos:start="1605:21" pos:end="1605:40"><name pos:start="1605:21" pos:end="1605:37">tcg_temp_free_i64</name><argument_list pos:start="1605:38" pos:end="1605:40">(<argument pos:start="1605:39" pos:end="1605:39"><expr pos:start="1605:39" pos:end="1605:39"><name pos:start="1605:39" pos:end="1605:39">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1607:21" pos:end="1607:41"><expr pos:start="1607:21" pos:end="1607:40"><call pos:start="1607:21" pos:end="1607:40"><name pos:start="1607:21" pos:end="1607:37">tcg_temp_free_i64</name><argument_list pos:start="1607:38" pos:end="1607:40">(<argument pos:start="1607:39" pos:end="1607:39"><expr pos:start="1607:39" pos:end="1607:39"><name pos:start="1607:39" pos:end="1607:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1609:21" pos:end="1609:41"><expr pos:start="1609:21" pos:end="1609:40"><call pos:start="1609:21" pos:end="1609:40"><name pos:start="1609:21" pos:end="1609:37">tcg_temp_free_i64</name><argument_list pos:start="1609:38" pos:end="1609:40">(<argument pos:start="1609:39" pos:end="1609:39"><expr pos:start="1609:39" pos:end="1609:39"><name pos:start="1609:39" pos:end="1609:39">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1613:17" pos:end="1613:22">break;</break>



            <case pos:start="1617:13" pos:end="1617:20">case <expr pos:start="1617:18" pos:end="1617:19"><literal type="number" pos:start="1617:18" pos:end="1617:19">12</literal></expr>:</case> <comment type="block" pos:start="1617:22" pos:end="1617:30">/*QUOUi*/</comment>

                <expr_stmt pos:start="1619:17" pos:end="1619:75"><expr pos:start="1619:17" pos:end="1619:74"><call pos:start="1619:17" pos:end="1619:74"><name pos:start="1619:17" pos:end="1619:32">tcg_gen_divu_i32</name><argument_list pos:start="1619:33" pos:end="1619:74">(<argument pos:start="1619:34" pos:end="1619:45"><expr pos:start="1619:34" pos:end="1619:45"><name pos:start="1619:34" pos:end="1619:45"><name pos:start="1619:34" pos:end="1619:38">cpu_R</name><index pos:start="1619:39" pos:end="1619:45">[<expr pos:start="1619:40" pos:end="1619:44"><name pos:start="1619:40" pos:end="1619:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1619:48" pos:end="1619:59"><expr pos:start="1619:48" pos:end="1619:59"><name pos:start="1619:48" pos:end="1619:59"><name pos:start="1619:48" pos:end="1619:52">cpu_R</name><index pos:start="1619:53" pos:end="1619:59">[<expr pos:start="1619:54" pos:end="1619:58"><name pos:start="1619:54" pos:end="1619:58">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1619:62" pos:end="1619:73"><expr pos:start="1619:62" pos:end="1619:73"><name pos:start="1619:62" pos:end="1619:73"><name pos:start="1619:62" pos:end="1619:66">cpu_R</name><index pos:start="1619:67" pos:end="1619:73">[<expr pos:start="1619:68" pos:end="1619:72"><name pos:start="1619:68" pos:end="1619:72">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1621:17" pos:end="1621:22">break;</break>



            <case pos:start="1625:13" pos:end="1625:20">case <expr pos:start="1625:18" pos:end="1625:19"><literal type="number" pos:start="1625:18" pos:end="1625:19">13</literal></expr>:</case> <comment type="block" pos:start="1625:22" pos:end="1625:30">/*QUOSi*/</comment>

            <case pos:start="1627:13" pos:end="1627:20">case <expr pos:start="1627:18" pos:end="1627:19"><literal type="number" pos:start="1627:18" pos:end="1627:19">15</literal></expr>:</case> <comment type="block" pos:start="1627:22" pos:end="1627:30">/*REMSi*/</comment>

                <block pos:start="1629:17" pos:end="1669:17">{<block_content pos:start="1631:21" pos:end="1667:42">

                    <decl_stmt pos:start="1631:21" pos:end="1631:49"><decl pos:start="1631:21" pos:end="1631:48"><type pos:start="1631:21" pos:end="1631:23"><name pos:start="1631:21" pos:end="1631:23">int</name></type> <name pos:start="1631:25" pos:end="1631:30">label1</name> <init pos:start="1631:32" pos:end="1631:48">= <expr pos:start="1631:34" pos:end="1631:48"><call pos:start="1631:34" pos:end="1631:48"><name pos:start="1631:34" pos:end="1631:46">gen_new_label</name><argument_list pos:start="1631:47" pos:end="1631:48">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1633:21" pos:end="1633:49"><decl pos:start="1633:21" pos:end="1633:48"><type pos:start="1633:21" pos:end="1633:23"><name pos:start="1633:21" pos:end="1633:23">int</name></type> <name pos:start="1633:25" pos:end="1633:30">label2</name> <init pos:start="1633:32" pos:end="1633:48">= <expr pos:start="1633:34" pos:end="1633:48"><call pos:start="1633:34" pos:end="1633:48"><name pos:start="1633:34" pos:end="1633:46">gen_new_label</name><argument_list pos:start="1633:47" pos:end="1633:48">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="1637:21" pos:end="1639:36"><expr pos:start="1637:21" pos:end="1639:35"><call pos:start="1637:21" pos:end="1639:35"><name pos:start="1637:21" pos:end="1637:39">tcg_gen_brcondi_i32</name><argument_list pos:start="1637:40" pos:end="1639:35">(<argument pos:start="1637:41" pos:end="1637:51"><expr pos:start="1637:41" pos:end="1637:51"><name pos:start="1637:41" pos:end="1637:51">TCG_COND_NE</name></expr></argument>, <argument pos:start="1637:54" pos:end="1637:65"><expr pos:start="1637:54" pos:end="1637:65"><name pos:start="1637:54" pos:end="1637:65"><name pos:start="1637:54" pos:end="1637:58">cpu_R</name><index pos:start="1637:59" pos:end="1637:65">[<expr pos:start="1637:60" pos:end="1637:64"><name pos:start="1637:60" pos:end="1637:64">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1637:68" pos:end="1637:77"><expr pos:start="1637:68" pos:end="1637:77"><literal type="number" pos:start="1637:68" pos:end="1637:77">0x80000000</literal></expr></argument>,

                            <argument pos:start="1639:29" pos:end="1639:34"><expr pos:start="1639:29" pos:end="1639:34"><name pos:start="1639:29" pos:end="1639:34">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1641:21" pos:end="1643:36"><expr pos:start="1641:21" pos:end="1643:35"><call pos:start="1641:21" pos:end="1643:35"><name pos:start="1641:21" pos:end="1641:39">tcg_gen_brcondi_i32</name><argument_list pos:start="1641:40" pos:end="1643:35">(<argument pos:start="1641:41" pos:end="1641:51"><expr pos:start="1641:41" pos:end="1641:51"><name pos:start="1641:41" pos:end="1641:51">TCG_COND_NE</name></expr></argument>, <argument pos:start="1641:54" pos:end="1641:65"><expr pos:start="1641:54" pos:end="1641:65"><name pos:start="1641:54" pos:end="1641:65"><name pos:start="1641:54" pos:end="1641:58">cpu_R</name><index pos:start="1641:59" pos:end="1641:65">[<expr pos:start="1641:60" pos:end="1641:64"><name pos:start="1641:60" pos:end="1641:64">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1641:68" pos:end="1641:77"><expr pos:start="1641:68" pos:end="1641:77"><literal type="number" pos:start="1641:68" pos:end="1641:77">0xffffffff</literal></expr></argument>,

                            <argument pos:start="1643:29" pos:end="1643:34"><expr pos:start="1643:29" pos:end="1643:34"><name pos:start="1643:29" pos:end="1643:34">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1645:21" pos:end="1647:56"><expr pos:start="1645:21" pos:end="1647:55"><call pos:start="1645:21" pos:end="1647:55"><name pos:start="1645:21" pos:end="1645:36">tcg_gen_movi_i32</name><argument_list pos:start="1645:37" pos:end="1647:55">(<argument pos:start="1645:38" pos:end="1645:49"><expr pos:start="1645:38" pos:end="1645:49"><name pos:start="1645:38" pos:end="1645:49"><name pos:start="1645:38" pos:end="1645:42">cpu_R</name><index pos:start="1645:43" pos:end="1645:49">[<expr pos:start="1645:44" pos:end="1645:48"><name pos:start="1645:44" pos:end="1645:48">RRR_R</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="1647:29" pos:end="1647:54"><expr pos:start="1647:29" pos:end="1647:54"><ternary pos:start="1647:29" pos:end="1647:54"><condition pos:start="1647:29" pos:end="1647:39"><expr pos:start="1647:29" pos:end="1647:37"><name pos:start="1647:29" pos:end="1647:31">OP2</name> <operator pos:start="1647:33" pos:end="1647:34">==</operator> <literal type="number" pos:start="1647:36" pos:end="1647:37">13</literal></expr> ?</condition><then pos:start="1647:41" pos:end="1647:50"> <expr pos:start="1647:41" pos:end="1647:50"><literal type="number" pos:start="1647:41" pos:end="1647:50">0x80000000</literal></expr> </then><else pos:start="1647:52" pos:end="1647:54">: <expr pos:start="1647:54" pos:end="1647:54"><literal type="number" pos:start="1647:54" pos:end="1647:54">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1649:21" pos:end="1649:39"><expr pos:start="1649:21" pos:end="1649:38"><call pos:start="1649:21" pos:end="1649:38"><name pos:start="1649:21" pos:end="1649:30">tcg_gen_br</name><argument_list pos:start="1649:31" pos:end="1649:38">(<argument pos:start="1649:32" pos:end="1649:37"><expr pos:start="1649:32" pos:end="1649:37"><name pos:start="1649:32" pos:end="1649:37">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1651:21" pos:end="1651:42"><expr pos:start="1651:21" pos:end="1651:41"><call pos:start="1651:21" pos:end="1651:41"><name pos:start="1651:21" pos:end="1651:33">gen_set_label</name><argument_list pos:start="1651:34" pos:end="1651:41">(<argument pos:start="1651:35" pos:end="1651:40"><expr pos:start="1651:35" pos:end="1651:40"><name pos:start="1651:35" pos:end="1651:40">label1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1653:21" pos:end="1665:21"><if pos:start="1653:21" pos:end="1659:21">if <condition pos:start="1653:24" pos:end="1653:34">(<expr pos:start="1653:25" pos:end="1653:33"><name pos:start="1653:25" pos:end="1653:27">OP2</name> <operator pos:start="1653:29" pos:end="1653:30">==</operator> <literal type="number" pos:start="1653:32" pos:end="1653:33">13</literal></expr>)</condition> <block pos:start="1653:36" pos:end="1659:21">{<block_content pos:start="1655:25" pos:end="1657:60">

                        <expr_stmt pos:start="1655:25" pos:end="1657:60"><expr pos:start="1655:25" pos:end="1657:59"><call pos:start="1655:25" pos:end="1657:59"><name pos:start="1655:25" pos:end="1655:39">tcg_gen_div_i32</name><argument_list pos:start="1655:40" pos:end="1657:59">(<argument pos:start="1655:41" pos:end="1655:52"><expr pos:start="1655:41" pos:end="1655:52"><name pos:start="1655:41" pos:end="1655:52"><name pos:start="1655:41" pos:end="1655:45">cpu_R</name><index pos:start="1655:46" pos:end="1655:52">[<expr pos:start="1655:47" pos:end="1655:51"><name pos:start="1655:47" pos:end="1655:51">RRR_R</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="1657:33" pos:end="1657:44"><expr pos:start="1657:33" pos:end="1657:44"><name pos:start="1657:33" pos:end="1657:44"><name pos:start="1657:33" pos:end="1657:37">cpu_R</name><index pos:start="1657:38" pos:end="1657:44">[<expr pos:start="1657:39" pos:end="1657:43"><name pos:start="1657:39" pos:end="1657:43">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1657:47" pos:end="1657:58"><expr pos:start="1657:47" pos:end="1657:58"><name pos:start="1657:47" pos:end="1657:58"><name pos:start="1657:47" pos:end="1657:51">cpu_R</name><index pos:start="1657:52" pos:end="1657:58">[<expr pos:start="1657:53" pos:end="1657:57"><name pos:start="1657:53" pos:end="1657:57">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1659:23" pos:end="1665:21">else <block pos:start="1659:28" pos:end="1665:21">{<block_content pos:start="1661:25" pos:end="1663:60">

                        <expr_stmt pos:start="1661:25" pos:end="1663:60"><expr pos:start="1661:25" pos:end="1663:59"><call pos:start="1661:25" pos:end="1663:59"><name pos:start="1661:25" pos:end="1661:39">tcg_gen_rem_i32</name><argument_list pos:start="1661:40" pos:end="1663:59">(<argument pos:start="1661:41" pos:end="1661:52"><expr pos:start="1661:41" pos:end="1661:52"><name pos:start="1661:41" pos:end="1661:52"><name pos:start="1661:41" pos:end="1661:45">cpu_R</name><index pos:start="1661:46" pos:end="1661:52">[<expr pos:start="1661:47" pos:end="1661:51"><name pos:start="1661:47" pos:end="1661:51">RRR_R</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="1663:33" pos:end="1663:44"><expr pos:start="1663:33" pos:end="1663:44"><name pos:start="1663:33" pos:end="1663:44"><name pos:start="1663:33" pos:end="1663:37">cpu_R</name><index pos:start="1663:38" pos:end="1663:44">[<expr pos:start="1663:39" pos:end="1663:43"><name pos:start="1663:39" pos:end="1663:43">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1663:47" pos:end="1663:58"><expr pos:start="1663:47" pos:end="1663:58"><name pos:start="1663:47" pos:end="1663:58"><name pos:start="1663:47" pos:end="1663:51">cpu_R</name><index pos:start="1663:52" pos:end="1663:58">[<expr pos:start="1663:53" pos:end="1663:57"><name pos:start="1663:53" pos:end="1663:57">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1667:21" pos:end="1667:42"><expr pos:start="1667:21" pos:end="1667:41"><call pos:start="1667:21" pos:end="1667:41"><name pos:start="1667:21" pos:end="1667:33">gen_set_label</name><argument_list pos:start="1667:34" pos:end="1667:41">(<argument pos:start="1667:35" pos:end="1667:40"><expr pos:start="1667:35" pos:end="1667:40"><name pos:start="1667:35" pos:end="1667:40">label2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1671:17" pos:end="1671:22">break;</break>



            <case pos:start="1675:13" pos:end="1675:20">case <expr pos:start="1675:18" pos:end="1675:19"><literal type="number" pos:start="1675:18" pos:end="1675:19">14</literal></expr>:</case> <comment type="block" pos:start="1675:22" pos:end="1675:30">/*REMUi*/</comment>

                <expr_stmt pos:start="1677:17" pos:end="1677:75"><expr pos:start="1677:17" pos:end="1677:74"><call pos:start="1677:17" pos:end="1677:74"><name pos:start="1677:17" pos:end="1677:32">tcg_gen_remu_i32</name><argument_list pos:start="1677:33" pos:end="1677:74">(<argument pos:start="1677:34" pos:end="1677:45"><expr pos:start="1677:34" pos:end="1677:45"><name pos:start="1677:34" pos:end="1677:45"><name pos:start="1677:34" pos:end="1677:38">cpu_R</name><index pos:start="1677:39" pos:end="1677:45">[<expr pos:start="1677:40" pos:end="1677:44"><name pos:start="1677:40" pos:end="1677:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1677:48" pos:end="1677:59"><expr pos:start="1677:48" pos:end="1677:59"><name pos:start="1677:48" pos:end="1677:59"><name pos:start="1677:48" pos:end="1677:52">cpu_R</name><index pos:start="1677:53" pos:end="1677:59">[<expr pos:start="1677:54" pos:end="1677:58"><name pos:start="1677:54" pos:end="1677:58">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1677:62" pos:end="1677:73"><expr pos:start="1677:62" pos:end="1677:73"><name pos:start="1677:62" pos:end="1677:73"><name pos:start="1677:62" pos:end="1677:66">cpu_R</name><index pos:start="1677:67" pos:end="1677:73">[<expr pos:start="1677:68" pos:end="1677:72"><name pos:start="1677:68" pos:end="1677:72">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1679:17" pos:end="1679:22">break;</break>



            <default pos:start="1683:13" pos:end="1683:20">default:</default> <comment type="block" pos:start="1683:22" pos:end="1683:33">/*reserved*/</comment>

                <expr_stmt pos:start="1685:17" pos:end="1685:27"><expr pos:start="1685:17" pos:end="1685:26"><call pos:start="1685:17" pos:end="1685:26"><name pos:start="1685:17" pos:end="1685:24">RESERVED</name><argument_list pos:start="1685:25" pos:end="1685:26">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1687:17" pos:end="1687:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1691:13" pos:end="1691:18">break;</break>



        <case pos:start="1695:9" pos:end="1695:15">case <expr pos:start="1695:14" pos:end="1695:14"><literal type="number" pos:start="1695:14" pos:end="1695:14">3</literal></expr>:</case> <comment type="block" pos:start="1695:17" pos:end="1695:24">/*RST3*/</comment>

            <switch pos:start="1697:13" pos:end="2013:13">switch <condition pos:start="1697:20" pos:end="1697:24">(<expr pos:start="1697:21" pos:end="1697:23"><name pos:start="1697:21" pos:end="1697:23">OP2</name></expr>)</condition> <block pos:start="1697:26" pos:end="2013:13">{<block_content pos:start="1699:13" pos:end="2009:22">

            <case pos:start="1699:13" pos:end="1699:19">case <expr pos:start="1699:18" pos:end="1699:18"><literal type="number" pos:start="1699:18" pos:end="1699:18">0</literal></expr>:</case> <comment type="block" pos:start="1699:21" pos:end="1699:27">/*RSR*/</comment>

                <if_stmt pos:start="1701:17" pos:end="1705:17"><if pos:start="1701:17" pos:end="1705:17">if <condition pos:start="1701:20" pos:end="1701:33">(<expr pos:start="1701:21" pos:end="1701:32"><name pos:start="1701:21" pos:end="1701:26">RSR_SR</name> <operator pos:start="1701:28" pos:end="1701:29">&gt;=</operator> <literal type="number" pos:start="1701:31" pos:end="1701:32">64</literal></expr>)</condition> <block pos:start="1701:35" pos:end="1705:17">{<block_content pos:start="1703:21" pos:end="1703:44">

                    <expr_stmt pos:start="1703:21" pos:end="1703:44"><expr pos:start="1703:21" pos:end="1703:43"><call pos:start="1703:21" pos:end="1703:43"><name pos:start="1703:21" pos:end="1703:39">gen_check_privilege</name><argument_list pos:start="1703:40" pos:end="1703:43">(<argument pos:start="1703:41" pos:end="1703:42"><expr pos:start="1703:41" pos:end="1703:42"><name pos:start="1703:41" pos:end="1703:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1707:17" pos:end="1707:45"><expr pos:start="1707:17" pos:end="1707:44"><call pos:start="1707:17" pos:end="1707:44"><name pos:start="1707:17" pos:end="1707:33">gen_window_check1</name><argument_list pos:start="1707:34" pos:end="1707:44">(<argument pos:start="1707:35" pos:end="1707:36"><expr pos:start="1707:35" pos:end="1707:36"><name pos:start="1707:35" pos:end="1707:36">dc</name></expr></argument>, <argument pos:start="1707:39" pos:end="1707:43"><expr pos:start="1707:39" pos:end="1707:43"><name pos:start="1707:39" pos:end="1707:43">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1709:17" pos:end="1709:50"><expr pos:start="1709:17" pos:end="1709:49"><call pos:start="1709:17" pos:end="1709:49"><name pos:start="1709:17" pos:end="1709:23">gen_rsr</name><argument_list pos:start="1709:24" pos:end="1709:49">(<argument pos:start="1709:25" pos:end="1709:26"><expr pos:start="1709:25" pos:end="1709:26"><name pos:start="1709:25" pos:end="1709:26">dc</name></expr></argument>, <argument pos:start="1709:29" pos:end="1709:40"><expr pos:start="1709:29" pos:end="1709:40"><name pos:start="1709:29" pos:end="1709:40"><name pos:start="1709:29" pos:end="1709:33">cpu_R</name><index pos:start="1709:34" pos:end="1709:40">[<expr pos:start="1709:35" pos:end="1709:39"><name pos:start="1709:35" pos:end="1709:39">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1709:43" pos:end="1709:48"><expr pos:start="1709:43" pos:end="1709:48"><name pos:start="1709:43" pos:end="1709:48">RSR_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1711:17" pos:end="1715:17"><if pos:start="1711:17" pos:end="1715:17">if <condition pos:start="1711:20" pos:end="1711:39">(<expr pos:start="1711:21" pos:end="1711:38"><operator pos:start="1711:21" pos:end="1711:21">!</operator><name pos:start="1711:22" pos:end="1711:38"><name pos:start="1711:22" pos:end="1711:30">sregnames</name><index pos:start="1711:31" pos:end="1711:38">[<expr pos:start="1711:32" pos:end="1711:37"><name pos:start="1711:32" pos:end="1711:37">RSR_SR</name></expr>]</index></name></expr>)</condition> <block pos:start="1711:41" pos:end="1715:17">{<block_content pos:start="1713:21" pos:end="1713:26">

                    <expr_stmt pos:start="1713:21" pos:end="1713:26"><expr pos:start="1713:21" pos:end="1713:25"><call pos:start="1713:21" pos:end="1713:25"><name pos:start="1713:21" pos:end="1713:23">TBD</name><argument_list pos:start="1713:24" pos:end="1713:25">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1717:17" pos:end="1717:22">break;</break>



            <case pos:start="1721:13" pos:end="1721:19">case <expr pos:start="1721:18" pos:end="1721:18"><literal type="number" pos:start="1721:18" pos:end="1721:18">1</literal></expr>:</case> <comment type="block" pos:start="1721:21" pos:end="1721:27">/*WSR*/</comment>

                <if_stmt pos:start="1723:17" pos:end="1727:17"><if pos:start="1723:17" pos:end="1727:17">if <condition pos:start="1723:20" pos:end="1723:33">(<expr pos:start="1723:21" pos:end="1723:32"><name pos:start="1723:21" pos:end="1723:26">RSR_SR</name> <operator pos:start="1723:28" pos:end="1723:29">&gt;=</operator> <literal type="number" pos:start="1723:31" pos:end="1723:32">64</literal></expr>)</condition> <block pos:start="1723:35" pos:end="1727:17">{<block_content pos:start="1725:21" pos:end="1725:44">

                    <expr_stmt pos:start="1725:21" pos:end="1725:44"><expr pos:start="1725:21" pos:end="1725:43"><call pos:start="1725:21" pos:end="1725:43"><name pos:start="1725:21" pos:end="1725:39">gen_check_privilege</name><argument_list pos:start="1725:40" pos:end="1725:43">(<argument pos:start="1725:41" pos:end="1725:42"><expr pos:start="1725:41" pos:end="1725:42"><name pos:start="1725:41" pos:end="1725:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1729:17" pos:end="1729:45"><expr pos:start="1729:17" pos:end="1729:44"><call pos:start="1729:17" pos:end="1729:44"><name pos:start="1729:17" pos:end="1729:33">gen_window_check1</name><argument_list pos:start="1729:34" pos:end="1729:44">(<argument pos:start="1729:35" pos:end="1729:36"><expr pos:start="1729:35" pos:end="1729:36"><name pos:start="1729:35" pos:end="1729:36">dc</name></expr></argument>, <argument pos:start="1729:39" pos:end="1729:43"><expr pos:start="1729:39" pos:end="1729:43"><name pos:start="1729:39" pos:end="1729:43">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1731:17" pos:end="1731:50"><expr pos:start="1731:17" pos:end="1731:49"><call pos:start="1731:17" pos:end="1731:49"><name pos:start="1731:17" pos:end="1731:23">gen_wsr</name><argument_list pos:start="1731:24" pos:end="1731:49">(<argument pos:start="1731:25" pos:end="1731:26"><expr pos:start="1731:25" pos:end="1731:26"><name pos:start="1731:25" pos:end="1731:26">dc</name></expr></argument>, <argument pos:start="1731:29" pos:end="1731:34"><expr pos:start="1731:29" pos:end="1731:34"><name pos:start="1731:29" pos:end="1731:34">RSR_SR</name></expr></argument>, <argument pos:start="1731:37" pos:end="1731:48"><expr pos:start="1731:37" pos:end="1731:48"><name pos:start="1731:37" pos:end="1731:48"><name pos:start="1731:37" pos:end="1731:41">cpu_R</name><index pos:start="1731:42" pos:end="1731:48">[<expr pos:start="1731:43" pos:end="1731:47"><name pos:start="1731:43" pos:end="1731:47">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1733:17" pos:end="1737:17"><if pos:start="1733:17" pos:end="1737:17">if <condition pos:start="1733:20" pos:end="1733:39">(<expr pos:start="1733:21" pos:end="1733:38"><operator pos:start="1733:21" pos:end="1733:21">!</operator><name pos:start="1733:22" pos:end="1733:38"><name pos:start="1733:22" pos:end="1733:30">sregnames</name><index pos:start="1733:31" pos:end="1733:38">[<expr pos:start="1733:32" pos:end="1733:37"><name pos:start="1733:32" pos:end="1733:37">RSR_SR</name></expr>]</index></name></expr>)</condition> <block pos:start="1733:41" pos:end="1737:17">{<block_content pos:start="1735:21" pos:end="1735:26">

                    <expr_stmt pos:start="1735:21" pos:end="1735:26"><expr pos:start="1735:21" pos:end="1735:25"><call pos:start="1735:21" pos:end="1735:25"><name pos:start="1735:21" pos:end="1735:23">TBD</name><argument_list pos:start="1735:24" pos:end="1735:25">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1739:17" pos:end="1739:22">break;</break>



            <case pos:start="1743:13" pos:end="1743:19">case <expr pos:start="1743:18" pos:end="1743:18"><literal type="number" pos:start="1743:18" pos:end="1743:18">2</literal></expr>:</case> <comment type="block" pos:start="1743:21" pos:end="1743:29">/*SEXTu*/</comment>

                <expr_stmt pos:start="1745:17" pos:end="1745:55"><expr pos:start="1745:17" pos:end="1745:54"><call pos:start="1745:17" pos:end="1745:54"><name pos:start="1745:17" pos:end="1745:26">HAS_OPTION</name><argument_list pos:start="1745:27" pos:end="1745:54">(<argument pos:start="1745:28" pos:end="1745:53"><expr pos:start="1745:28" pos:end="1745:53"><name pos:start="1745:28" pos:end="1745:53">XTENSA_OPTION_MISC_OP_SEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1747:17" pos:end="1747:52"><expr pos:start="1747:17" pos:end="1747:51"><call pos:start="1747:17" pos:end="1747:51"><name pos:start="1747:17" pos:end="1747:33">gen_window_check2</name><argument_list pos:start="1747:34" pos:end="1747:51">(<argument pos:start="1747:35" pos:end="1747:36"><expr pos:start="1747:35" pos:end="1747:36"><name pos:start="1747:35" pos:end="1747:36">dc</name></expr></argument>, <argument pos:start="1747:39" pos:end="1747:43"><expr pos:start="1747:39" pos:end="1747:43"><name pos:start="1747:39" pos:end="1747:43">RRR_R</name></expr></argument>, <argument pos:start="1747:46" pos:end="1747:50"><expr pos:start="1747:46" pos:end="1747:50"><name pos:start="1747:46" pos:end="1747:50">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1749:17" pos:end="1775:17">{<block_content pos:start="1751:21" pos:end="1773:21">

                    <decl_stmt pos:start="1751:21" pos:end="1751:43"><decl pos:start="1751:21" pos:end="1751:42"><type pos:start="1751:21" pos:end="1751:23"><name pos:start="1751:21" pos:end="1751:23">int</name></type> <name pos:start="1751:25" pos:end="1751:29">shift</name> <init pos:start="1751:31" pos:end="1751:42">= <expr pos:start="1751:33" pos:end="1751:42"><literal type="number" pos:start="1751:33" pos:end="1751:36">24</literal> <operator pos:start="1751:36" pos:end="1751:36">-</operator> <name pos:start="1751:38" pos:end="1751:42">RRR_T</name></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="1755:21" pos:end="1773:21"><if pos:start="1755:21" pos:end="1759:21">if <condition pos:start="1755:24" pos:end="1755:36">(<expr pos:start="1755:25" pos:end="1755:35"><name pos:start="1755:25" pos:end="1755:29">shift</name> <operator pos:start="1755:31" pos:end="1755:32">==</operator> <literal type="number" pos:start="1755:34" pos:end="1755:35">24</literal></expr>)</condition> <block pos:start="1755:38" pos:end="1759:21">{<block_content pos:start="1757:25" pos:end="1757:70">

                        <expr_stmt pos:start="1757:25" pos:end="1757:70"><expr pos:start="1757:25" pos:end="1757:69"><call pos:start="1757:25" pos:end="1757:69"><name pos:start="1757:25" pos:end="1757:41">tcg_gen_ext8s_i32</name><argument_list pos:start="1757:42" pos:end="1757:69">(<argument pos:start="1757:43" pos:end="1757:54"><expr pos:start="1757:43" pos:end="1757:54"><name pos:start="1757:43" pos:end="1757:54"><name pos:start="1757:43" pos:end="1757:47">cpu_R</name><index pos:start="1757:48" pos:end="1757:54">[<expr pos:start="1757:49" pos:end="1757:53"><name pos:start="1757:49" pos:end="1757:53">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1757:57" pos:end="1757:68"><expr pos:start="1757:57" pos:end="1757:68"><name pos:start="1757:57" pos:end="1757:68"><name pos:start="1757:57" pos:end="1757:61">cpu_R</name><index pos:start="1757:62" pos:end="1757:68">[<expr pos:start="1757:63" pos:end="1757:67"><name pos:start="1757:63" pos:end="1757:67">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="1759:23" pos:end="1763:21">else if <condition pos:start="1759:31" pos:end="1759:43">(<expr pos:start="1759:32" pos:end="1759:42"><name pos:start="1759:32" pos:end="1759:36">shift</name> <operator pos:start="1759:38" pos:end="1759:39">==</operator> <literal type="number" pos:start="1759:41" pos:end="1759:42">16</literal></expr>)</condition> <block pos:start="1759:45" pos:end="1763:21">{<block_content pos:start="1761:25" pos:end="1761:71">

                        <expr_stmt pos:start="1761:25" pos:end="1761:71"><expr pos:start="1761:25" pos:end="1761:70"><call pos:start="1761:25" pos:end="1761:70"><name pos:start="1761:25" pos:end="1761:42">tcg_gen_ext16s_i32</name><argument_list pos:start="1761:43" pos:end="1761:70">(<argument pos:start="1761:44" pos:end="1761:55"><expr pos:start="1761:44" pos:end="1761:55"><name pos:start="1761:44" pos:end="1761:55"><name pos:start="1761:44" pos:end="1761:48">cpu_R</name><index pos:start="1761:49" pos:end="1761:55">[<expr pos:start="1761:50" pos:end="1761:54"><name pos:start="1761:50" pos:end="1761:54">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1761:58" pos:end="1761:69"><expr pos:start="1761:58" pos:end="1761:69"><name pos:start="1761:58" pos:end="1761:69"><name pos:start="1761:58" pos:end="1761:62">cpu_R</name><index pos:start="1761:63" pos:end="1761:69">[<expr pos:start="1761:64" pos:end="1761:68"><name pos:start="1761:64" pos:end="1761:68">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1763:23" pos:end="1773:21">else <block pos:start="1763:28" pos:end="1773:21">{<block_content pos:start="1765:25" pos:end="1771:43">

                        <decl_stmt pos:start="1765:25" pos:end="1765:58"><decl pos:start="1765:25" pos:end="1765:57"><type pos:start="1765:25" pos:end="1765:32"><name pos:start="1765:25" pos:end="1765:32">TCGv_i32</name></type> <name pos:start="1765:34" pos:end="1765:36">tmp</name> <init pos:start="1765:38" pos:end="1765:57">= <expr pos:start="1765:40" pos:end="1765:57"><call pos:start="1765:40" pos:end="1765:57"><name pos:start="1765:40" pos:end="1765:55">tcg_temp_new_i32</name><argument_list pos:start="1765:56" pos:end="1765:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="1767:25" pos:end="1767:67"><expr pos:start="1767:25" pos:end="1767:66"><call pos:start="1767:25" pos:end="1767:66"><name pos:start="1767:25" pos:end="1767:40">tcg_gen_shli_i32</name><argument_list pos:start="1767:41" pos:end="1767:66">(<argument pos:start="1767:42" pos:end="1767:44"><expr pos:start="1767:42" pos:end="1767:44"><name pos:start="1767:42" pos:end="1767:44">tmp</name></expr></argument>, <argument pos:start="1767:47" pos:end="1767:58"><expr pos:start="1767:47" pos:end="1767:58"><name pos:start="1767:47" pos:end="1767:58"><name pos:start="1767:47" pos:end="1767:51">cpu_R</name><index pos:start="1767:52" pos:end="1767:58">[<expr pos:start="1767:53" pos:end="1767:57"><name pos:start="1767:53" pos:end="1767:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1767:61" pos:end="1767:65"><expr pos:start="1767:61" pos:end="1767:65"><name pos:start="1767:61" pos:end="1767:65">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1769:25" pos:end="1769:67"><expr pos:start="1769:25" pos:end="1769:66"><call pos:start="1769:25" pos:end="1769:66"><name pos:start="1769:25" pos:end="1769:40">tcg_gen_sari_i32</name><argument_list pos:start="1769:41" pos:end="1769:66">(<argument pos:start="1769:42" pos:end="1769:53"><expr pos:start="1769:42" pos:end="1769:53"><name pos:start="1769:42" pos:end="1769:53"><name pos:start="1769:42" pos:end="1769:46">cpu_R</name><index pos:start="1769:47" pos:end="1769:53">[<expr pos:start="1769:48" pos:end="1769:52"><name pos:start="1769:48" pos:end="1769:52">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1769:56" pos:end="1769:58"><expr pos:start="1769:56" pos:end="1769:58"><name pos:start="1769:56" pos:end="1769:58">tmp</name></expr></argument>, <argument pos:start="1769:61" pos:end="1769:65"><expr pos:start="1769:61" pos:end="1769:65"><name pos:start="1769:61" pos:end="1769:65">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1771:25" pos:end="1771:43"><expr pos:start="1771:25" pos:end="1771:42"><call pos:start="1771:25" pos:end="1771:42"><name pos:start="1771:25" pos:end="1771:37">tcg_temp_free</name><argument_list pos:start="1771:38" pos:end="1771:42">(<argument pos:start="1771:39" pos:end="1771:41"><expr pos:start="1771:39" pos:end="1771:41"><name pos:start="1771:39" pos:end="1771:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="1777:17" pos:end="1777:22">break;</break>



            <case pos:start="1781:13" pos:end="1781:19">case <expr pos:start="1781:18" pos:end="1781:18"><literal type="number" pos:start="1781:18" pos:end="1781:18">3</literal></expr>:</case> <comment type="block" pos:start="1781:21" pos:end="1781:31">/*CLAMPSu*/</comment>

                <expr_stmt pos:start="1783:17" pos:end="1783:57"><expr pos:start="1783:17" pos:end="1783:56"><call pos:start="1783:17" pos:end="1783:56"><name pos:start="1783:17" pos:end="1783:26">HAS_OPTION</name><argument_list pos:start="1783:27" pos:end="1783:56">(<argument pos:start="1783:28" pos:end="1783:55"><expr pos:start="1783:28" pos:end="1783:55"><name pos:start="1783:28" pos:end="1783:55">XTENSA_OPTION_MISC_OP_CLAMPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1785:17" pos:end="1785:52"><expr pos:start="1785:17" pos:end="1785:51"><call pos:start="1785:17" pos:end="1785:51"><name pos:start="1785:17" pos:end="1785:33">gen_window_check2</name><argument_list pos:start="1785:34" pos:end="1785:51">(<argument pos:start="1785:35" pos:end="1785:36"><expr pos:start="1785:35" pos:end="1785:36"><name pos:start="1785:35" pos:end="1785:36">dc</name></expr></argument>, <argument pos:start="1785:39" pos:end="1785:43"><expr pos:start="1785:39" pos:end="1785:43"><name pos:start="1785:39" pos:end="1785:43">RRR_R</name></expr></argument>, <argument pos:start="1785:46" pos:end="1785:50"><expr pos:start="1785:46" pos:end="1785:50"><name pos:start="1785:46" pos:end="1785:50">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1787:17" pos:end="1825:17">{<block_content pos:start="1789:21" pos:end="1823:40">

                    <decl_stmt pos:start="1789:21" pos:end="1789:55"><decl pos:start="1789:21" pos:end="1789:54"><type pos:start="1789:21" pos:end="1789:28"><name pos:start="1789:21" pos:end="1789:28">TCGv_i32</name></type> <name pos:start="1789:30" pos:end="1789:33">tmp1</name> <init pos:start="1789:35" pos:end="1789:54">= <expr pos:start="1789:37" pos:end="1789:54"><call pos:start="1789:37" pos:end="1789:54"><name pos:start="1789:37" pos:end="1789:52">tcg_temp_new_i32</name><argument_list pos:start="1789:53" pos:end="1789:54">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1791:21" pos:end="1791:55"><decl pos:start="1791:21" pos:end="1791:54"><type pos:start="1791:21" pos:end="1791:28"><name pos:start="1791:21" pos:end="1791:28">TCGv_i32</name></type> <name pos:start="1791:30" pos:end="1791:33">tmp2</name> <init pos:start="1791:35" pos:end="1791:54">= <expr pos:start="1791:37" pos:end="1791:54"><call pos:start="1791:37" pos:end="1791:54"><name pos:start="1791:37" pos:end="1791:52">tcg_temp_new_i32</name><argument_list pos:start="1791:53" pos:end="1791:54">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1793:21" pos:end="1793:48"><decl pos:start="1793:21" pos:end="1793:47"><type pos:start="1793:21" pos:end="1793:23"><name pos:start="1793:21" pos:end="1793:23">int</name></type> <name pos:start="1793:25" pos:end="1793:29">label</name> <init pos:start="1793:31" pos:end="1793:47">= <expr pos:start="1793:33" pos:end="1793:47"><call pos:start="1793:33" pos:end="1793:47"><name pos:start="1793:33" pos:end="1793:45">gen_new_label</name><argument_list pos:start="1793:46" pos:end="1793:47">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="1797:21" pos:end="1797:69"><expr pos:start="1797:21" pos:end="1797:68"><call pos:start="1797:21" pos:end="1797:68"><name pos:start="1797:21" pos:end="1797:36">tcg_gen_sari_i32</name><argument_list pos:start="1797:37" pos:end="1797:68">(<argument pos:start="1797:38" pos:end="1797:41"><expr pos:start="1797:38" pos:end="1797:41"><name pos:start="1797:38" pos:end="1797:41">tmp1</name></expr></argument>, <argument pos:start="1797:44" pos:end="1797:55"><expr pos:start="1797:44" pos:end="1797:55"><name pos:start="1797:44" pos:end="1797:55"><name pos:start="1797:44" pos:end="1797:48">cpu_R</name><index pos:start="1797:49" pos:end="1797:55">[<expr pos:start="1797:50" pos:end="1797:54"><name pos:start="1797:50" pos:end="1797:54">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1797:58" pos:end="1797:67"><expr pos:start="1797:58" pos:end="1797:67"><literal type="number" pos:start="1797:58" pos:end="1797:61">24</literal> <operator pos:start="1797:61" pos:end="1797:61">-</operator> <name pos:start="1797:63" pos:end="1797:67">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1799:21" pos:end="1799:62"><expr pos:start="1799:21" pos:end="1799:61"><call pos:start="1799:21" pos:end="1799:61"><name pos:start="1799:21" pos:end="1799:35">tcg_gen_xor_i32</name><argument_list pos:start="1799:36" pos:end="1799:61">(<argument pos:start="1799:37" pos:end="1799:40"><expr pos:start="1799:37" pos:end="1799:40"><name pos:start="1799:37" pos:end="1799:40">tmp2</name></expr></argument>, <argument pos:start="1799:43" pos:end="1799:46"><expr pos:start="1799:43" pos:end="1799:46"><name pos:start="1799:43" pos:end="1799:46">tmp1</name></expr></argument>, <argument pos:start="1799:49" pos:end="1799:60"><expr pos:start="1799:49" pos:end="1799:60"><name pos:start="1799:49" pos:end="1799:60"><name pos:start="1799:49" pos:end="1799:53">cpu_R</name><index pos:start="1799:54" pos:end="1799:60">[<expr pos:start="1799:55" pos:end="1799:59"><name pos:start="1799:55" pos:end="1799:59">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1801:21" pos:end="1801:76"><expr pos:start="1801:21" pos:end="1801:75"><call pos:start="1801:21" pos:end="1801:75"><name pos:start="1801:21" pos:end="1801:36">tcg_gen_andi_i32</name><argument_list pos:start="1801:37" pos:end="1801:75">(<argument pos:start="1801:38" pos:end="1801:41"><expr pos:start="1801:38" pos:end="1801:41"><name pos:start="1801:38" pos:end="1801:41">tmp2</name></expr></argument>, <argument pos:start="1801:44" pos:end="1801:47"><expr pos:start="1801:44" pos:end="1801:47"><name pos:start="1801:44" pos:end="1801:47">tmp2</name></expr></argument>, <argument pos:start="1801:50" pos:end="1801:74"><expr pos:start="1801:50" pos:end="1801:74"><literal type="number" pos:start="1801:50" pos:end="1801:59">0xffffffff</literal> <operator pos:start="1801:61" pos:end="1801:62">&lt;&lt;</operator> <operator pos:start="1801:64" pos:end="1801:64">(</operator><name pos:start="1801:65" pos:end="1801:69">RRR_T</name> <operator pos:start="1801:71" pos:end="1801:71">+</operator> <literal type="number" pos:start="1801:73" pos:end="1801:73">7</literal><operator pos:start="1801:74" pos:end="1801:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1803:21" pos:end="1803:64"><expr pos:start="1803:21" pos:end="1803:63"><call pos:start="1803:21" pos:end="1803:63"><name pos:start="1803:21" pos:end="1803:35">tcg_gen_mov_i32</name><argument_list pos:start="1803:36" pos:end="1803:63">(<argument pos:start="1803:37" pos:end="1803:48"><expr pos:start="1803:37" pos:end="1803:48"><name pos:start="1803:37" pos:end="1803:48"><name pos:start="1803:37" pos:end="1803:41">cpu_R</name><index pos:start="1803:42" pos:end="1803:48">[<expr pos:start="1803:43" pos:end="1803:47"><name pos:start="1803:43" pos:end="1803:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1803:51" pos:end="1803:62"><expr pos:start="1803:51" pos:end="1803:62"><name pos:start="1803:51" pos:end="1803:62"><name pos:start="1803:51" pos:end="1803:55">cpu_R</name><index pos:start="1803:56" pos:end="1803:62">[<expr pos:start="1803:57" pos:end="1803:61"><name pos:start="1803:57" pos:end="1803:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1805:21" pos:end="1805:69"><expr pos:start="1805:21" pos:end="1805:68"><call pos:start="1805:21" pos:end="1805:68"><name pos:start="1805:21" pos:end="1805:39">tcg_gen_brcondi_i32</name><argument_list pos:start="1805:40" pos:end="1805:68">(<argument pos:start="1805:41" pos:end="1805:51"><expr pos:start="1805:41" pos:end="1805:51"><name pos:start="1805:41" pos:end="1805:51">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1805:54" pos:end="1805:57"><expr pos:start="1805:54" pos:end="1805:57"><name pos:start="1805:54" pos:end="1805:57">tmp2</name></expr></argument>, <argument pos:start="1805:60" pos:end="1805:60"><expr pos:start="1805:60" pos:end="1805:60"><literal type="number" pos:start="1805:60" pos:end="1805:60">0</literal></expr></argument>, <argument pos:start="1805:63" pos:end="1805:67"><expr pos:start="1805:63" pos:end="1805:67"><name pos:start="1805:63" pos:end="1805:67">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1809:21" pos:end="1809:61"><expr pos:start="1809:21" pos:end="1809:60"><call pos:start="1809:21" pos:end="1809:60"><name pos:start="1809:21" pos:end="1809:36">tcg_gen_sari_i32</name><argument_list pos:start="1809:37" pos:end="1809:60">(<argument pos:start="1809:38" pos:end="1809:41"><expr pos:start="1809:38" pos:end="1809:41"><name pos:start="1809:38" pos:end="1809:41">tmp1</name></expr></argument>, <argument pos:start="1809:44" pos:end="1809:55"><expr pos:start="1809:44" pos:end="1809:55"><name pos:start="1809:44" pos:end="1809:55"><name pos:start="1809:44" pos:end="1809:48">cpu_R</name><index pos:start="1809:49" pos:end="1809:55">[<expr pos:start="1809:50" pos:end="1809:54"><name pos:start="1809:50" pos:end="1809:54">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1809:58" pos:end="1809:59"><expr pos:start="1809:58" pos:end="1809:59"><literal type="number" pos:start="1809:58" pos:end="1809:59">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1811:21" pos:end="1813:56"><expr pos:start="1811:21" pos:end="1813:55"><call pos:start="1811:21" pos:end="1813:55"><name pos:start="1811:21" pos:end="1811:36">tcg_gen_xori_i32</name><argument_list pos:start="1811:37" pos:end="1813:55">(<argument pos:start="1811:38" pos:end="1811:49"><expr pos:start="1811:38" pos:end="1811:49"><name pos:start="1811:38" pos:end="1811:49"><name pos:start="1811:38" pos:end="1811:42">cpu_R</name><index pos:start="1811:43" pos:end="1811:49">[<expr pos:start="1811:44" pos:end="1811:48"><name pos:start="1811:44" pos:end="1811:48">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1811:52" pos:end="1811:55"><expr pos:start="1811:52" pos:end="1811:55"><name pos:start="1811:52" pos:end="1811:55">tmp1</name></expr></argument>,

                            <argument pos:start="1813:29" pos:end="1813:54"><expr pos:start="1813:29" pos:end="1813:54"><literal type="number" pos:start="1813:29" pos:end="1813:38">0xffffffff</literal> <operator pos:start="1813:40" pos:end="1813:41">&gt;&gt;</operator> <operator pos:start="1813:43" pos:end="1813:43">(</operator><literal type="number" pos:start="1813:44" pos:end="1813:47">25</literal> <operator pos:start="1813:47" pos:end="1813:47">-</operator> <name pos:start="1813:49" pos:end="1813:53">RRR_T</name><operator pos:start="1813:54" pos:end="1813:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1817:21" pos:end="1817:41"><expr pos:start="1817:21" pos:end="1817:40"><call pos:start="1817:21" pos:end="1817:40"><name pos:start="1817:21" pos:end="1817:33">gen_set_label</name><argument_list pos:start="1817:34" pos:end="1817:40">(<argument pos:start="1817:35" pos:end="1817:39"><expr pos:start="1817:35" pos:end="1817:39"><name pos:start="1817:35" pos:end="1817:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1821:21" pos:end="1821:40"><expr pos:start="1821:21" pos:end="1821:39"><call pos:start="1821:21" pos:end="1821:39"><name pos:start="1821:21" pos:end="1821:33">tcg_temp_free</name><argument_list pos:start="1821:34" pos:end="1821:39">(<argument pos:start="1821:35" pos:end="1821:38"><expr pos:start="1821:35" pos:end="1821:38"><name pos:start="1821:35" pos:end="1821:38">tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1823:21" pos:end="1823:40"><expr pos:start="1823:21" pos:end="1823:39"><call pos:start="1823:21" pos:end="1823:39"><name pos:start="1823:21" pos:end="1823:33">tcg_temp_free</name><argument_list pos:start="1823:34" pos:end="1823:39">(<argument pos:start="1823:35" pos:end="1823:38"><expr pos:start="1823:35" pos:end="1823:38"><name pos:start="1823:35" pos:end="1823:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1827:17" pos:end="1827:22">break;</break>



            <case pos:start="1831:13" pos:end="1831:19">case <expr pos:start="1831:18" pos:end="1831:18"><literal type="number" pos:start="1831:18" pos:end="1831:18">4</literal></expr>:</case> <comment type="block" pos:start="1831:21" pos:end="1831:28">/*MINu*/</comment>

            <case pos:start="1833:13" pos:end="1833:19">case <expr pos:start="1833:18" pos:end="1833:18"><literal type="number" pos:start="1833:18" pos:end="1833:18">5</literal></expr>:</case> <comment type="block" pos:start="1833:21" pos:end="1833:28">/*MAXu*/</comment>

            <case pos:start="1835:13" pos:end="1835:19">case <expr pos:start="1835:18" pos:end="1835:18"><literal type="number" pos:start="1835:18" pos:end="1835:18">6</literal></expr>:</case> <comment type="block" pos:start="1835:21" pos:end="1835:29">/*MINUu*/</comment>

            <case pos:start="1837:13" pos:end="1837:19">case <expr pos:start="1837:18" pos:end="1837:18"><literal type="number" pos:start="1837:18" pos:end="1837:18">7</literal></expr>:</case> <comment type="block" pos:start="1837:21" pos:end="1837:29">/*MAXUu*/</comment>

                <expr_stmt pos:start="1839:17" pos:end="1839:57"><expr pos:start="1839:17" pos:end="1839:56"><call pos:start="1839:17" pos:end="1839:56"><name pos:start="1839:17" pos:end="1839:26">HAS_OPTION</name><argument_list pos:start="1839:27" pos:end="1839:56">(<argument pos:start="1839:28" pos:end="1839:55"><expr pos:start="1839:28" pos:end="1839:55"><name pos:start="1839:28" pos:end="1839:55">XTENSA_OPTION_MISC_OP_MINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1841:17" pos:end="1841:59"><expr pos:start="1841:17" pos:end="1841:58"><call pos:start="1841:17" pos:end="1841:58"><name pos:start="1841:17" pos:end="1841:33">gen_window_check3</name><argument_list pos:start="1841:34" pos:end="1841:58">(<argument pos:start="1841:35" pos:end="1841:36"><expr pos:start="1841:35" pos:end="1841:36"><name pos:start="1841:35" pos:end="1841:36">dc</name></expr></argument>, <argument pos:start="1841:39" pos:end="1841:43"><expr pos:start="1841:39" pos:end="1841:43"><name pos:start="1841:39" pos:end="1841:43">RRR_R</name></expr></argument>, <argument pos:start="1841:46" pos:end="1841:50"><expr pos:start="1841:46" pos:end="1841:50"><name pos:start="1841:46" pos:end="1841:50">RRR_S</name></expr></argument>, <argument pos:start="1841:53" pos:end="1841:57"><expr pos:start="1841:53" pos:end="1841:57"><name pos:start="1841:53" pos:end="1841:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1843:17" pos:end="1883:17">{<block_content pos:start="1845:21" pos:end="1881:41">

                    <decl_stmt pos:start="1845:21" pos:end="1855:22"><decl pos:start="1845:21" pos:end="1855:21"><type pos:start="1845:21" pos:end="1845:40"><specifier pos:start="1845:21" pos:end="1845:26">static</specifier> <specifier pos:start="1845:28" pos:end="1845:32">const</specifier> <name pos:start="1845:34" pos:end="1845:40">TCGCond</name></type> <name pos:start="1845:42" pos:end="1845:47"><name pos:start="1845:42" pos:end="1845:45">cond</name><index pos:start="1845:46" pos:end="1845:47">[]</index></name> <init pos:start="1845:49" pos:end="1855:21">= <expr pos:start="1845:51" pos:end="1855:21"><block pos:start="1845:51" pos:end="1855:21">{

                        <expr pos:start="1847:25" pos:end="1847:35"><name pos:start="1847:25" pos:end="1847:35">TCG_COND_LE</name></expr>,

                        <expr pos:start="1849:25" pos:end="1849:35"><name pos:start="1849:25" pos:end="1849:35">TCG_COND_GE</name></expr>,

                        <expr pos:start="1851:25" pos:end="1851:36"><name pos:start="1851:25" pos:end="1851:36">TCG_COND_LEU</name></expr>,

                        <expr pos:start="1853:25" pos:end="1853:36"><name pos:start="1853:25" pos:end="1853:36">TCG_COND_GEU</name></expr>

                    }</block></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1857:21" pos:end="1857:48"><decl pos:start="1857:21" pos:end="1857:47"><type pos:start="1857:21" pos:end="1857:23"><name pos:start="1857:21" pos:end="1857:23">int</name></type> <name pos:start="1857:25" pos:end="1857:29">label</name> <init pos:start="1857:31" pos:end="1857:47">= <expr pos:start="1857:33" pos:end="1857:47"><call pos:start="1857:33" pos:end="1857:47"><name pos:start="1857:33" pos:end="1857:45">gen_new_label</name><argument_list pos:start="1857:46" pos:end="1857:47">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="1861:21" pos:end="1879:21"><if pos:start="1861:21" pos:end="1871:21">if <condition pos:start="1861:24" pos:end="1861:39">(<expr pos:start="1861:25" pos:end="1861:38"><name pos:start="1861:25" pos:end="1861:29">RRR_R</name> <operator pos:start="1861:31" pos:end="1861:32">!=</operator> <name pos:start="1861:34" pos:end="1861:38">RRR_T</name></expr>)</condition> <block pos:start="1861:41" pos:end="1871:21">{<block_content pos:start="1863:25" pos:end="1869:68">

                        <expr_stmt pos:start="1863:25" pos:end="1863:68"><expr pos:start="1863:25" pos:end="1863:67"><call pos:start="1863:25" pos:end="1863:67"><name pos:start="1863:25" pos:end="1863:39">tcg_gen_mov_i32</name><argument_list pos:start="1863:40" pos:end="1863:67">(<argument pos:start="1863:41" pos:end="1863:52"><expr pos:start="1863:41" pos:end="1863:52"><name pos:start="1863:41" pos:end="1863:52"><name pos:start="1863:41" pos:end="1863:45">cpu_R</name><index pos:start="1863:46" pos:end="1863:52">[<expr pos:start="1863:47" pos:end="1863:51"><name pos:start="1863:47" pos:end="1863:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1863:55" pos:end="1863:66"><expr pos:start="1863:55" pos:end="1863:66"><name pos:start="1863:55" pos:end="1863:66"><name pos:start="1863:55" pos:end="1863:59">cpu_R</name><index pos:start="1863:60" pos:end="1863:66">[<expr pos:start="1863:61" pos:end="1863:65"><name pos:start="1863:61" pos:end="1863:65">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1865:25" pos:end="1867:67"><expr pos:start="1865:25" pos:end="1867:66"><call pos:start="1865:25" pos:end="1867:66"><name pos:start="1865:25" pos:end="1865:42">tcg_gen_brcond_i32</name><argument_list pos:start="1865:43" pos:end="1867:66">(<argument pos:start="1865:44" pos:end="1865:56"><expr pos:start="1865:44" pos:end="1865:56"><name pos:start="1865:44" pos:end="1865:56"><name pos:start="1865:44" pos:end="1865:47">cond</name><index pos:start="1865:48" pos:end="1865:56">[<expr pos:start="1865:49" pos:end="1865:55"><name pos:start="1865:49" pos:end="1865:51">OP2</name> <operator pos:start="1865:53" pos:end="1865:53">-</operator> <literal type="number" pos:start="1865:55" pos:end="1865:55">4</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="1867:33" pos:end="1867:44"><expr pos:start="1867:33" pos:end="1867:44"><name pos:start="1867:33" pos:end="1867:44"><name pos:start="1867:33" pos:end="1867:37">cpu_R</name><index pos:start="1867:38" pos:end="1867:44">[<expr pos:start="1867:39" pos:end="1867:43"><name pos:start="1867:39" pos:end="1867:43">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1867:47" pos:end="1867:58"><expr pos:start="1867:47" pos:end="1867:58"><name pos:start="1867:47" pos:end="1867:58"><name pos:start="1867:47" pos:end="1867:51">cpu_R</name><index pos:start="1867:52" pos:end="1867:58">[<expr pos:start="1867:53" pos:end="1867:57"><name pos:start="1867:53" pos:end="1867:57">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1867:61" pos:end="1867:65"><expr pos:start="1867:61" pos:end="1867:65"><name pos:start="1867:61" pos:end="1867:65">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1869:25" pos:end="1869:68"><expr pos:start="1869:25" pos:end="1869:67"><call pos:start="1869:25" pos:end="1869:67"><name pos:start="1869:25" pos:end="1869:39">tcg_gen_mov_i32</name><argument_list pos:start="1869:40" pos:end="1869:67">(<argument pos:start="1869:41" pos:end="1869:52"><expr pos:start="1869:41" pos:end="1869:52"><name pos:start="1869:41" pos:end="1869:52"><name pos:start="1869:41" pos:end="1869:45">cpu_R</name><index pos:start="1869:46" pos:end="1869:52">[<expr pos:start="1869:47" pos:end="1869:51"><name pos:start="1869:47" pos:end="1869:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1869:55" pos:end="1869:66"><expr pos:start="1869:55" pos:end="1869:66"><name pos:start="1869:55" pos:end="1869:66"><name pos:start="1869:55" pos:end="1869:59">cpu_R</name><index pos:start="1869:60" pos:end="1869:66">[<expr pos:start="1869:61" pos:end="1869:65"><name pos:start="1869:61" pos:end="1869:65">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1871:23" pos:end="1879:21">else <block pos:start="1871:28" pos:end="1879:21">{<block_content pos:start="1873:25" pos:end="1877:68">

                        <expr_stmt pos:start="1873:25" pos:end="1875:67"><expr pos:start="1873:25" pos:end="1875:66"><call pos:start="1873:25" pos:end="1875:66"><name pos:start="1873:25" pos:end="1873:42">tcg_gen_brcond_i32</name><argument_list pos:start="1873:43" pos:end="1875:66">(<argument pos:start="1873:44" pos:end="1873:56"><expr pos:start="1873:44" pos:end="1873:56"><name pos:start="1873:44" pos:end="1873:56"><name pos:start="1873:44" pos:end="1873:47">cond</name><index pos:start="1873:48" pos:end="1873:56">[<expr pos:start="1873:49" pos:end="1873:55"><name pos:start="1873:49" pos:end="1873:51">OP2</name> <operator pos:start="1873:53" pos:end="1873:53">-</operator> <literal type="number" pos:start="1873:55" pos:end="1873:55">4</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="1875:33" pos:end="1875:44"><expr pos:start="1875:33" pos:end="1875:44"><name pos:start="1875:33" pos:end="1875:44"><name pos:start="1875:33" pos:end="1875:37">cpu_R</name><index pos:start="1875:38" pos:end="1875:44">[<expr pos:start="1875:39" pos:end="1875:43"><name pos:start="1875:39" pos:end="1875:43">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1875:47" pos:end="1875:58"><expr pos:start="1875:47" pos:end="1875:58"><name pos:start="1875:47" pos:end="1875:58"><name pos:start="1875:47" pos:end="1875:51">cpu_R</name><index pos:start="1875:52" pos:end="1875:58">[<expr pos:start="1875:53" pos:end="1875:57"><name pos:start="1875:53" pos:end="1875:57">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="1875:61" pos:end="1875:65"><expr pos:start="1875:61" pos:end="1875:65"><name pos:start="1875:61" pos:end="1875:65">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1877:25" pos:end="1877:68"><expr pos:start="1877:25" pos:end="1877:67"><call pos:start="1877:25" pos:end="1877:67"><name pos:start="1877:25" pos:end="1877:39">tcg_gen_mov_i32</name><argument_list pos:start="1877:40" pos:end="1877:67">(<argument pos:start="1877:41" pos:end="1877:52"><expr pos:start="1877:41" pos:end="1877:52"><name pos:start="1877:41" pos:end="1877:52"><name pos:start="1877:41" pos:end="1877:45">cpu_R</name><index pos:start="1877:46" pos:end="1877:52">[<expr pos:start="1877:47" pos:end="1877:51"><name pos:start="1877:47" pos:end="1877:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1877:55" pos:end="1877:66"><expr pos:start="1877:55" pos:end="1877:66"><name pos:start="1877:55" pos:end="1877:66"><name pos:start="1877:55" pos:end="1877:59">cpu_R</name><index pos:start="1877:60" pos:end="1877:66">[<expr pos:start="1877:61" pos:end="1877:65"><name pos:start="1877:61" pos:end="1877:65">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1881:21" pos:end="1881:41"><expr pos:start="1881:21" pos:end="1881:40"><call pos:start="1881:21" pos:end="1881:40"><name pos:start="1881:21" pos:end="1881:33">gen_set_label</name><argument_list pos:start="1881:34" pos:end="1881:40">(<argument pos:start="1881:35" pos:end="1881:39"><expr pos:start="1881:35" pos:end="1881:39"><name pos:start="1881:35" pos:end="1881:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1885:17" pos:end="1885:22">break;</break>



            <case pos:start="1889:13" pos:end="1889:19">case <expr pos:start="1889:18" pos:end="1889:18"><literal type="number" pos:start="1889:18" pos:end="1889:18">8</literal></expr>:</case> <comment type="block" pos:start="1889:21" pos:end="1889:30">/*MOVEQZ*/</comment>

            <case pos:start="1891:13" pos:end="1891:19">case <expr pos:start="1891:18" pos:end="1891:18"><literal type="number" pos:start="1891:18" pos:end="1891:18">9</literal></expr>:</case> <comment type="block" pos:start="1891:21" pos:end="1891:30">/*MOVNEZ*/</comment>

            <case pos:start="1893:13" pos:end="1893:20">case <expr pos:start="1893:18" pos:end="1893:19"><literal type="number" pos:start="1893:18" pos:end="1893:19">10</literal></expr>:</case> <comment type="block" pos:start="1893:22" pos:end="1893:31">/*MOVLTZ*/</comment>

            <case pos:start="1895:13" pos:end="1895:20">case <expr pos:start="1895:18" pos:end="1895:19"><literal type="number" pos:start="1895:18" pos:end="1895:19">11</literal></expr>:</case> <comment type="block" pos:start="1895:22" pos:end="1895:31">/*MOVGEZ*/</comment>

                <expr_stmt pos:start="1897:17" pos:end="1897:59"><expr pos:start="1897:17" pos:end="1897:58"><call pos:start="1897:17" pos:end="1897:58"><name pos:start="1897:17" pos:end="1897:33">gen_window_check3</name><argument_list pos:start="1897:34" pos:end="1897:58">(<argument pos:start="1897:35" pos:end="1897:36"><expr pos:start="1897:35" pos:end="1897:36"><name pos:start="1897:35" pos:end="1897:36">dc</name></expr></argument>, <argument pos:start="1897:39" pos:end="1897:43"><expr pos:start="1897:39" pos:end="1897:43"><name pos:start="1897:39" pos:end="1897:43">RRR_R</name></expr></argument>, <argument pos:start="1897:46" pos:end="1897:50"><expr pos:start="1897:46" pos:end="1897:50"><name pos:start="1897:46" pos:end="1897:50">RRR_S</name></expr></argument>, <argument pos:start="1897:53" pos:end="1897:57"><expr pos:start="1897:53" pos:end="1897:57"><name pos:start="1897:53" pos:end="1897:57">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1899:17" pos:end="1921:17">{<block_content pos:start="1901:21" pos:end="1919:41">

                    <decl_stmt pos:start="1901:21" pos:end="1911:22"><decl pos:start="1901:21" pos:end="1911:21"><type pos:start="1901:21" pos:end="1901:40"><specifier pos:start="1901:21" pos:end="1901:26">static</specifier> <specifier pos:start="1901:28" pos:end="1901:32">const</specifier> <name pos:start="1901:34" pos:end="1901:40">TCGCond</name></type> <name pos:start="1901:42" pos:end="1901:47"><name pos:start="1901:42" pos:end="1901:45">cond</name><index pos:start="1901:46" pos:end="1901:47">[]</index></name> <init pos:start="1901:49" pos:end="1911:21">= <expr pos:start="1901:51" pos:end="1911:21"><block pos:start="1901:51" pos:end="1911:21">{

                        <expr pos:start="1903:25" pos:end="1903:35"><name pos:start="1903:25" pos:end="1903:35">TCG_COND_NE</name></expr>,

                        <expr pos:start="1905:25" pos:end="1905:35"><name pos:start="1905:25" pos:end="1905:35">TCG_COND_EQ</name></expr>,

                        <expr pos:start="1907:25" pos:end="1907:35"><name pos:start="1907:25" pos:end="1907:35">TCG_COND_GE</name></expr>,

                        <expr pos:start="1909:25" pos:end="1909:35"><name pos:start="1909:25" pos:end="1909:35">TCG_COND_LT</name></expr>

                    }</block></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1913:21" pos:end="1913:48"><decl pos:start="1913:21" pos:end="1913:47"><type pos:start="1913:21" pos:end="1913:23"><name pos:start="1913:21" pos:end="1913:23">int</name></type> <name pos:start="1913:25" pos:end="1913:29">label</name> <init pos:start="1913:31" pos:end="1913:47">= <expr pos:start="1913:33" pos:end="1913:47"><call pos:start="1913:33" pos:end="1913:47"><name pos:start="1913:33" pos:end="1913:45">gen_new_label</name><argument_list pos:start="1913:46" pos:end="1913:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="1915:21" pos:end="1915:79"><expr pos:start="1915:21" pos:end="1915:78"><call pos:start="1915:21" pos:end="1915:78"><name pos:start="1915:21" pos:end="1915:39">tcg_gen_brcondi_i32</name><argument_list pos:start="1915:40" pos:end="1915:78">(<argument pos:start="1915:41" pos:end="1915:53"><expr pos:start="1915:41" pos:end="1915:53"><name pos:start="1915:41" pos:end="1915:53"><name pos:start="1915:41" pos:end="1915:44">cond</name><index pos:start="1915:45" pos:end="1915:53">[<expr pos:start="1915:46" pos:end="1915:52"><name pos:start="1915:46" pos:end="1915:48">OP2</name> <operator pos:start="1915:50" pos:end="1915:50">-</operator> <literal type="number" pos:start="1915:52" pos:end="1915:52">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="1915:56" pos:end="1915:67"><expr pos:start="1915:56" pos:end="1915:67"><name pos:start="1915:56" pos:end="1915:67"><name pos:start="1915:56" pos:end="1915:60">cpu_R</name><index pos:start="1915:61" pos:end="1915:67">[<expr pos:start="1915:62" pos:end="1915:66"><name pos:start="1915:62" pos:end="1915:66">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="1915:70" pos:end="1915:70"><expr pos:start="1915:70" pos:end="1915:70"><literal type="number" pos:start="1915:70" pos:end="1915:70">0</literal></expr></argument>, <argument pos:start="1915:73" pos:end="1915:77"><expr pos:start="1915:73" pos:end="1915:77"><name pos:start="1915:73" pos:end="1915:77">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1917:21" pos:end="1917:64"><expr pos:start="1917:21" pos:end="1917:63"><call pos:start="1917:21" pos:end="1917:63"><name pos:start="1917:21" pos:end="1917:35">tcg_gen_mov_i32</name><argument_list pos:start="1917:36" pos:end="1917:63">(<argument pos:start="1917:37" pos:end="1917:48"><expr pos:start="1917:37" pos:end="1917:48"><name pos:start="1917:37" pos:end="1917:48"><name pos:start="1917:37" pos:end="1917:41">cpu_R</name><index pos:start="1917:42" pos:end="1917:48">[<expr pos:start="1917:43" pos:end="1917:47"><name pos:start="1917:43" pos:end="1917:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1917:51" pos:end="1917:62"><expr pos:start="1917:51" pos:end="1917:62"><name pos:start="1917:51" pos:end="1917:62"><name pos:start="1917:51" pos:end="1917:55">cpu_R</name><index pos:start="1917:56" pos:end="1917:62">[<expr pos:start="1917:57" pos:end="1917:61"><name pos:start="1917:57" pos:end="1917:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1919:21" pos:end="1919:41"><expr pos:start="1919:21" pos:end="1919:40"><call pos:start="1919:21" pos:end="1919:40"><name pos:start="1919:21" pos:end="1919:33">gen_set_label</name><argument_list pos:start="1919:34" pos:end="1919:40">(<argument pos:start="1919:35" pos:end="1919:39"><expr pos:start="1919:35" pos:end="1919:39"><name pos:start="1919:35" pos:end="1919:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1923:17" pos:end="1923:22">break;</break>



            <case pos:start="1927:13" pos:end="1927:20">case <expr pos:start="1927:18" pos:end="1927:19"><literal type="number" pos:start="1927:18" pos:end="1927:19">12</literal></expr>:</case> <comment type="block" pos:start="1927:22" pos:end="1927:30">/*MOVFp*/</comment>

            <case pos:start="1929:13" pos:end="1929:20">case <expr pos:start="1929:18" pos:end="1929:19"><literal type="number" pos:start="1929:18" pos:end="1929:19">13</literal></expr>:</case> <comment type="block" pos:start="1929:22" pos:end="1929:30">/*MOVTp*/</comment>

                <expr_stmt pos:start="1931:17" pos:end="1931:50"><expr pos:start="1931:17" pos:end="1931:49"><call pos:start="1931:17" pos:end="1931:49"><name pos:start="1931:17" pos:end="1931:26">HAS_OPTION</name><argument_list pos:start="1931:27" pos:end="1931:49">(<argument pos:start="1931:28" pos:end="1931:48"><expr pos:start="1931:28" pos:end="1931:48"><name pos:start="1931:28" pos:end="1931:48">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1933:17" pos:end="1933:52"><expr pos:start="1933:17" pos:end="1933:51"><call pos:start="1933:17" pos:end="1933:51"><name pos:start="1933:17" pos:end="1933:33">gen_window_check2</name><argument_list pos:start="1933:34" pos:end="1933:51">(<argument pos:start="1933:35" pos:end="1933:36"><expr pos:start="1933:35" pos:end="1933:36"><name pos:start="1933:35" pos:end="1933:36">dc</name></expr></argument>, <argument pos:start="1933:39" pos:end="1933:43"><expr pos:start="1933:39" pos:end="1933:43"><name pos:start="1933:39" pos:end="1933:43">RRR_R</name></expr></argument>, <argument pos:start="1933:46" pos:end="1933:50"><expr pos:start="1933:46" pos:end="1933:50"><name pos:start="1933:46" pos:end="1933:50">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1935:17" pos:end="1957:17">{<block_content pos:start="1937:21" pos:end="1955:39">

                    <decl_stmt pos:start="1937:21" pos:end="1937:48"><decl pos:start="1937:21" pos:end="1937:47"><type pos:start="1937:21" pos:end="1937:23"><name pos:start="1937:21" pos:end="1937:23">int</name></type> <name pos:start="1937:25" pos:end="1937:29">label</name> <init pos:start="1937:31" pos:end="1937:47">= <expr pos:start="1937:33" pos:end="1937:47"><call pos:start="1937:33" pos:end="1937:47"><name pos:start="1937:33" pos:end="1937:45">gen_new_label</name><argument_list pos:start="1937:46" pos:end="1937:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1939:21" pos:end="1939:54"><decl pos:start="1939:21" pos:end="1939:53"><type pos:start="1939:21" pos:end="1939:28"><name pos:start="1939:21" pos:end="1939:28">TCGv_i32</name></type> <name pos:start="1939:30" pos:end="1939:32">tmp</name> <init pos:start="1939:34" pos:end="1939:53">= <expr pos:start="1939:36" pos:end="1939:53"><call pos:start="1939:36" pos:end="1939:53"><name pos:start="1939:36" pos:end="1939:51">tcg_temp_new_i32</name><argument_list pos:start="1939:52" pos:end="1939:53">()</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="1943:21" pos:end="1943:66"><expr pos:start="1943:21" pos:end="1943:65"><call pos:start="1943:21" pos:end="1943:65"><name pos:start="1943:21" pos:end="1943:36">tcg_gen_andi_i32</name><argument_list pos:start="1943:37" pos:end="1943:65">(<argument pos:start="1943:38" pos:end="1943:40"><expr pos:start="1943:38" pos:end="1943:40"><name pos:start="1943:38" pos:end="1943:40">tmp</name></expr></argument>, <argument pos:start="1943:43" pos:end="1943:52"><expr pos:start="1943:43" pos:end="1943:52"><name pos:start="1943:43" pos:end="1943:52"><name pos:start="1943:43" pos:end="1943:48">cpu_SR</name><index pos:start="1943:49" pos:end="1943:52">[<expr pos:start="1943:50" pos:end="1943:51"><name pos:start="1943:50" pos:end="1943:51">BR</name></expr>]</index></name></expr></argument>, <argument pos:start="1943:55" pos:end="1943:64"><expr pos:start="1943:55" pos:end="1943:64"><literal type="number" pos:start="1943:55" pos:end="1943:55">1</literal> <operator pos:start="1943:57" pos:end="1943:58">&lt;&lt;</operator> <name pos:start="1943:60" pos:end="1943:64">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1945:21" pos:end="1949:43"><expr pos:start="1945:21" pos:end="1949:42"><call pos:start="1945:21" pos:end="1949:42"><name pos:start="1945:21" pos:end="1945:39">tcg_gen_brcondi_i32</name><argument_list pos:start="1945:40" pos:end="1949:42">(

                            <argument pos:start="1947:29" pos:end="1947:63"><expr pos:start="1947:29" pos:end="1947:63"><ternary pos:start="1947:29" pos:end="1947:63"><condition pos:start="1947:29" pos:end="1947:37"><expr pos:start="1947:29" pos:end="1947:35"><name pos:start="1947:29" pos:end="1947:31">OP2</name> <operator pos:start="1947:33" pos:end="1947:33">&amp;</operator> <literal type="number" pos:start="1947:35" pos:end="1947:35">1</literal></expr> ?</condition><then pos:start="1947:39" pos:end="1947:49"> <expr pos:start="1947:39" pos:end="1947:49"><name pos:start="1947:39" pos:end="1947:49">TCG_COND_EQ</name></expr> </then><else pos:start="1947:51" pos:end="1947:63">: <expr pos:start="1947:53" pos:end="1947:63"><name pos:start="1947:53" pos:end="1947:63">TCG_COND_NE</name></expr></else></ternary></expr></argument>,

                            <argument pos:start="1949:29" pos:end="1949:31"><expr pos:start="1949:29" pos:end="1949:31"><name pos:start="1949:29" pos:end="1949:31">tmp</name></expr></argument>, <argument pos:start="1949:34" pos:end="1949:34"><expr pos:start="1949:34" pos:end="1949:34"><literal type="number" pos:start="1949:34" pos:end="1949:34">0</literal></expr></argument>, <argument pos:start="1949:37" pos:end="1949:41"><expr pos:start="1949:37" pos:end="1949:41"><name pos:start="1949:37" pos:end="1949:41">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1951:21" pos:end="1951:64"><expr pos:start="1951:21" pos:end="1951:63"><call pos:start="1951:21" pos:end="1951:63"><name pos:start="1951:21" pos:end="1951:35">tcg_gen_mov_i32</name><argument_list pos:start="1951:36" pos:end="1951:63">(<argument pos:start="1951:37" pos:end="1951:48"><expr pos:start="1951:37" pos:end="1951:48"><name pos:start="1951:37" pos:end="1951:48"><name pos:start="1951:37" pos:end="1951:41">cpu_R</name><index pos:start="1951:42" pos:end="1951:48">[<expr pos:start="1951:43" pos:end="1951:47"><name pos:start="1951:43" pos:end="1951:47">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1951:51" pos:end="1951:62"><expr pos:start="1951:51" pos:end="1951:62"><name pos:start="1951:51" pos:end="1951:62"><name pos:start="1951:51" pos:end="1951:55">cpu_R</name><index pos:start="1951:56" pos:end="1951:62">[<expr pos:start="1951:57" pos:end="1951:61"><name pos:start="1951:57" pos:end="1951:61">RRR_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1953:21" pos:end="1953:41"><expr pos:start="1953:21" pos:end="1953:40"><call pos:start="1953:21" pos:end="1953:40"><name pos:start="1953:21" pos:end="1953:33">gen_set_label</name><argument_list pos:start="1953:34" pos:end="1953:40">(<argument pos:start="1953:35" pos:end="1953:39"><expr pos:start="1953:35" pos:end="1953:39"><name pos:start="1953:35" pos:end="1953:39">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1955:21" pos:end="1955:39"><expr pos:start="1955:21" pos:end="1955:38"><call pos:start="1955:21" pos:end="1955:38"><name pos:start="1955:21" pos:end="1955:33">tcg_temp_free</name><argument_list pos:start="1955:34" pos:end="1955:38">(<argument pos:start="1955:35" pos:end="1955:37"><expr pos:start="1955:35" pos:end="1955:37"><name pos:start="1955:35" pos:end="1955:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1959:17" pos:end="1959:22">break;</break>



            <case pos:start="1963:13" pos:end="1963:20">case <expr pos:start="1963:18" pos:end="1963:19"><literal type="number" pos:start="1963:18" pos:end="1963:19">14</literal></expr>:</case> <comment type="block" pos:start="1963:22" pos:end="1963:28">/*RUR*/</comment>

                <expr_stmt pos:start="1965:17" pos:end="1965:45"><expr pos:start="1965:17" pos:end="1965:44"><call pos:start="1965:17" pos:end="1965:44"><name pos:start="1965:17" pos:end="1965:33">gen_window_check1</name><argument_list pos:start="1965:34" pos:end="1965:44">(<argument pos:start="1965:35" pos:end="1965:36"><expr pos:start="1965:35" pos:end="1965:36"><name pos:start="1965:35" pos:end="1965:36">dc</name></expr></argument>, <argument pos:start="1965:39" pos:end="1965:43"><expr pos:start="1965:39" pos:end="1965:43"><name pos:start="1965:39" pos:end="1965:43">RRR_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1967:17" pos:end="1983:17">{<block_content pos:start="1969:21" pos:end="1981:21">

                    <decl_stmt pos:start="1969:21" pos:end="1969:50"><decl pos:start="1969:21" pos:end="1969:49"><type pos:start="1969:21" pos:end="1969:23"><name pos:start="1969:21" pos:end="1969:23">int</name></type> <name pos:start="1969:25" pos:end="1969:26">st</name> <init pos:start="1969:28" pos:end="1969:49">= <expr pos:start="1969:30" pos:end="1969:49"><operator pos:start="1969:30" pos:end="1969:30">(</operator><name pos:start="1969:31" pos:end="1969:35">RRR_S</name> <operator pos:start="1969:37" pos:end="1969:38">&lt;&lt;</operator> <literal type="number" pos:start="1969:40" pos:end="1969:40">4</literal><operator pos:start="1969:41" pos:end="1969:41">)</operator> <operator pos:start="1969:43" pos:end="1969:43">+</operator> <name pos:start="1969:45" pos:end="1969:49">RRR_T</name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="1971:21" pos:end="1981:21"><if pos:start="1971:21" pos:end="1975:21">if <condition pos:start="1971:24" pos:end="1971:38">(<expr pos:start="1971:25" pos:end="1971:37"><name pos:start="1971:25" pos:end="1971:37"><name pos:start="1971:25" pos:end="1971:33">uregnames</name><index pos:start="1971:34" pos:end="1971:37">[<expr pos:start="1971:35" pos:end="1971:36"><name pos:start="1971:35" pos:end="1971:36">st</name></expr>]</index></name></expr>)</condition> <block pos:start="1971:40" pos:end="1975:21">{<block_content pos:start="1973:25" pos:end="1973:66">

                        <expr_stmt pos:start="1973:25" pos:end="1973:66"><expr pos:start="1973:25" pos:end="1973:65"><call pos:start="1973:25" pos:end="1973:65"><name pos:start="1973:25" pos:end="1973:39">tcg_gen_mov_i32</name><argument_list pos:start="1973:40" pos:end="1973:65">(<argument pos:start="1973:41" pos:end="1973:52"><expr pos:start="1973:41" pos:end="1973:52"><name pos:start="1973:41" pos:end="1973:52"><name pos:start="1973:41" pos:end="1973:45">cpu_R</name><index pos:start="1973:46" pos:end="1973:52">[<expr pos:start="1973:47" pos:end="1973:51"><name pos:start="1973:47" pos:end="1973:51">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="1973:55" pos:end="1973:64"><expr pos:start="1973:55" pos:end="1973:64"><name pos:start="1973:55" pos:end="1973:64"><name pos:start="1973:55" pos:end="1973:60">cpu_UR</name><index pos:start="1973:61" pos:end="1973:64">[<expr pos:start="1973:62" pos:end="1973:63"><name pos:start="1973:62" pos:end="1973:63">st</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1975:23" pos:end="1981:21">else <block pos:start="1975:28" pos:end="1981:21">{<block_content pos:start="1977:25" pos:end="1979:30">

                        <expr_stmt pos:start="1977:25" pos:end="1977:65"><expr pos:start="1977:25" pos:end="1977:64"><call pos:start="1977:25" pos:end="1977:64"><name pos:start="1977:25" pos:end="1977:32">qemu_log</name><argument_list pos:start="1977:33" pos:end="1977:64">(<argument pos:start="1977:34" pos:end="1977:59"><expr pos:start="1977:34" pos:end="1977:59"><literal type="string" pos:start="1977:34" pos:end="1977:59">"RUR %d not implemented, "</literal></expr></argument>, <argument pos:start="1977:62" pos:end="1977:63"><expr pos:start="1977:62" pos:end="1977:63"><name pos:start="1977:62" pos:end="1977:63">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1979:25" pos:end="1979:30"><expr pos:start="1979:25" pos:end="1979:29"><call pos:start="1979:25" pos:end="1979:29"><name pos:start="1979:25" pos:end="1979:27">TBD</name><argument_list pos:start="1979:28" pos:end="1979:29">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="1985:17" pos:end="1985:22">break;</break>



            <case pos:start="1989:13" pos:end="1989:20">case <expr pos:start="1989:18" pos:end="1989:19"><literal type="number" pos:start="1989:18" pos:end="1989:19">15</literal></expr>:</case> <comment type="block" pos:start="1989:22" pos:end="1989:28">/*WUR*/</comment>

                <expr_stmt pos:start="1991:17" pos:end="1991:45"><expr pos:start="1991:17" pos:end="1991:44"><call pos:start="1991:17" pos:end="1991:44"><name pos:start="1991:17" pos:end="1991:33">gen_window_check1</name><argument_list pos:start="1991:34" pos:end="1991:44">(<argument pos:start="1991:35" pos:end="1991:36"><expr pos:start="1991:35" pos:end="1991:36"><name pos:start="1991:35" pos:end="1991:36">dc</name></expr></argument>, <argument pos:start="1991:39" pos:end="1991:43"><expr pos:start="1991:39" pos:end="1991:43"><name pos:start="1991:39" pos:end="1991:43">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1993:17" pos:end="2007:17">{<block_content pos:start="1995:21" pos:end="2005:21">

                    <if_stmt pos:start="1995:21" pos:end="2005:21"><if pos:start="1995:21" pos:end="1999:21">if <condition pos:start="1995:24" pos:end="1995:42">(<expr pos:start="1995:25" pos:end="1995:41"><name pos:start="1995:25" pos:end="1995:41"><name pos:start="1995:25" pos:end="1995:33">uregnames</name><index pos:start="1995:34" pos:end="1995:41">[<expr pos:start="1995:35" pos:end="1995:40"><name pos:start="1995:35" pos:end="1995:40">RSR_SR</name></expr>]</index></name></expr>)</condition> <block pos:start="1995:44" pos:end="1999:21">{<block_content pos:start="1997:25" pos:end="1997:70">

                        <expr_stmt pos:start="1997:25" pos:end="1997:70"><expr pos:start="1997:25" pos:end="1997:69"><call pos:start="1997:25" pos:end="1997:69"><name pos:start="1997:25" pos:end="1997:39">tcg_gen_mov_i32</name><argument_list pos:start="1997:40" pos:end="1997:69">(<argument pos:start="1997:41" pos:end="1997:54"><expr pos:start="1997:41" pos:end="1997:54"><name pos:start="1997:41" pos:end="1997:54"><name pos:start="1997:41" pos:end="1997:46">cpu_UR</name><index pos:start="1997:47" pos:end="1997:54">[<expr pos:start="1997:48" pos:end="1997:53"><name pos:start="1997:48" pos:end="1997:53">RSR_SR</name></expr>]</index></name></expr></argument>, <argument pos:start="1997:57" pos:end="1997:68"><expr pos:start="1997:57" pos:end="1997:68"><name pos:start="1997:57" pos:end="1997:68"><name pos:start="1997:57" pos:end="1997:61">cpu_R</name><index pos:start="1997:62" pos:end="1997:68">[<expr pos:start="1997:63" pos:end="1997:67"><name pos:start="1997:63" pos:end="1997:67">RRR_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1999:23" pos:end="2005:21">else <block pos:start="1999:28" pos:end="2005:21">{<block_content pos:start="2001:25" pos:end="2003:30">

                        <expr_stmt pos:start="2001:25" pos:end="2001:69"><expr pos:start="2001:25" pos:end="2001:68"><call pos:start="2001:25" pos:end="2001:68"><name pos:start="2001:25" pos:end="2001:32">qemu_log</name><argument_list pos:start="2001:33" pos:end="2001:68">(<argument pos:start="2001:34" pos:end="2001:59"><expr pos:start="2001:34" pos:end="2001:59"><literal type="string" pos:start="2001:34" pos:end="2001:59">"WUR %d not implemented, "</literal></expr></argument>, <argument pos:start="2001:62" pos:end="2001:67"><expr pos:start="2001:62" pos:end="2001:67"><name pos:start="2001:62" pos:end="2001:67">RSR_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2003:25" pos:end="2003:30"><expr pos:start="2003:25" pos:end="2003:29"><call pos:start="2003:25" pos:end="2003:29"><name pos:start="2003:25" pos:end="2003:27">TBD</name><argument_list pos:start="2003:28" pos:end="2003:29">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="2009:17" pos:end="2009:22">break;</break>



            </block_content>}</block></switch>

            <break pos:start="2015:13" pos:end="2015:18">break;</break>



        <case pos:start="2019:9" pos:end="2019:15">case <expr pos:start="2019:14" pos:end="2019:14"><literal type="number" pos:start="2019:14" pos:end="2019:14">4</literal></expr>:</case> <comment type="block" pos:start="2019:17" pos:end="2019:25">/*EXTUI*/</comment>

        <case pos:start="2021:9" pos:end="2021:15">case <expr pos:start="2021:14" pos:end="2021:14"><literal type="number" pos:start="2021:14" pos:end="2021:14">5</literal></expr>:</case>

            <expr_stmt pos:start="2023:13" pos:end="2023:48"><expr pos:start="2023:13" pos:end="2023:47"><call pos:start="2023:13" pos:end="2023:47"><name pos:start="2023:13" pos:end="2023:29">gen_window_check2</name><argument_list pos:start="2023:30" pos:end="2023:47">(<argument pos:start="2023:31" pos:end="2023:32"><expr pos:start="2023:31" pos:end="2023:32"><name pos:start="2023:31" pos:end="2023:32">dc</name></expr></argument>, <argument pos:start="2023:35" pos:end="2023:39"><expr pos:start="2023:35" pos:end="2023:39"><name pos:start="2023:35" pos:end="2023:39">RRR_R</name></expr></argument>, <argument pos:start="2023:42" pos:end="2023:46"><expr pos:start="2023:42" pos:end="2023:46"><name pos:start="2023:42" pos:end="2023:46">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="2025:13" pos:end="2041:13">{<block_content pos:start="2027:17" pos:end="2039:35">

                <decl_stmt pos:start="2027:17" pos:end="2027:50"><decl pos:start="2027:17" pos:end="2027:49"><type pos:start="2027:17" pos:end="2027:19"><name pos:start="2027:17" pos:end="2027:19">int</name></type> <name pos:start="2027:21" pos:end="2027:28">shiftimm</name> <init pos:start="2027:30" pos:end="2027:49">= <expr pos:start="2027:32" pos:end="2027:49"><name pos:start="2027:32" pos:end="2027:36">RRR_S</name> <operator pos:start="2027:38" pos:end="2027:38">|</operator> <operator pos:start="2027:40" pos:end="2027:40">(</operator><name pos:start="2027:41" pos:end="2027:43">OP1</name> <operator pos:start="2027:45" pos:end="2027:46">&lt;&lt;</operator> <literal type="number" pos:start="2027:48" pos:end="2027:48">4</literal><operator pos:start="2027:49" pos:end="2027:49">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="2029:17" pos:end="2029:51"><decl pos:start="2029:17" pos:end="2029:50"><type pos:start="2029:17" pos:end="2029:19"><name pos:start="2029:17" pos:end="2029:19">int</name></type> <name pos:start="2029:21" pos:end="2029:27">maskimm</name> <init pos:start="2029:29" pos:end="2029:50">= <expr pos:start="2029:31" pos:end="2029:50"><operator pos:start="2029:31" pos:end="2029:31">(</operator><literal type="number" pos:start="2029:32" pos:end="2029:32">1</literal> <operator pos:start="2029:34" pos:end="2029:35">&lt;&lt;</operator> <operator pos:start="2029:37" pos:end="2029:37">(</operator><name pos:start="2029:38" pos:end="2029:40">OP2</name> <operator pos:start="2029:42" pos:end="2029:42">+</operator> <literal type="number" pos:start="2029:44" pos:end="2029:44">1</literal><operator pos:start="2029:45" pos:end="2029:45">)</operator><operator pos:start="2029:46" pos:end="2029:46">)</operator> <operator pos:start="2029:48" pos:end="2029:48">-</operator> <literal type="number" pos:start="2029:50" pos:end="2029:50">1</literal></expr></init></decl>;</decl_stmt>



                <decl_stmt pos:start="2033:17" pos:end="2033:50"><decl pos:start="2033:17" pos:end="2033:49"><type pos:start="2033:17" pos:end="2033:24"><name pos:start="2033:17" pos:end="2033:24">TCGv_i32</name></type> <name pos:start="2033:26" pos:end="2033:28">tmp</name> <init pos:start="2033:30" pos:end="2033:49">= <expr pos:start="2033:32" pos:end="2033:49"><call pos:start="2033:32" pos:end="2033:49"><name pos:start="2033:32" pos:end="2033:47">tcg_temp_new_i32</name><argument_list pos:start="2033:48" pos:end="2033:49">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="2035:17" pos:end="2035:62"><expr pos:start="2035:17" pos:end="2035:61"><call pos:start="2035:17" pos:end="2035:61"><name pos:start="2035:17" pos:end="2035:32">tcg_gen_shri_i32</name><argument_list pos:start="2035:33" pos:end="2035:61">(<argument pos:start="2035:34" pos:end="2035:36"><expr pos:start="2035:34" pos:end="2035:36"><name pos:start="2035:34" pos:end="2035:36">tmp</name></expr></argument>, <argument pos:start="2035:39" pos:end="2035:50"><expr pos:start="2035:39" pos:end="2035:50"><name pos:start="2035:39" pos:end="2035:50"><name pos:start="2035:39" pos:end="2035:43">cpu_R</name><index pos:start="2035:44" pos:end="2035:50">[<expr pos:start="2035:45" pos:end="2035:49"><name pos:start="2035:45" pos:end="2035:49">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2035:53" pos:end="2035:60"><expr pos:start="2035:53" pos:end="2035:60"><name pos:start="2035:53" pos:end="2035:60">shiftimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2037:17" pos:end="2037:61"><expr pos:start="2037:17" pos:end="2037:60"><call pos:start="2037:17" pos:end="2037:60"><name pos:start="2037:17" pos:end="2037:32">tcg_gen_andi_i32</name><argument_list pos:start="2037:33" pos:end="2037:60">(<argument pos:start="2037:34" pos:end="2037:45"><expr pos:start="2037:34" pos:end="2037:45"><name pos:start="2037:34" pos:end="2037:45"><name pos:start="2037:34" pos:end="2037:38">cpu_R</name><index pos:start="2037:39" pos:end="2037:45">[<expr pos:start="2037:40" pos:end="2037:44"><name pos:start="2037:40" pos:end="2037:44">RRR_R</name></expr>]</index></name></expr></argument>, <argument pos:start="2037:48" pos:end="2037:50"><expr pos:start="2037:48" pos:end="2037:50"><name pos:start="2037:48" pos:end="2037:50">tmp</name></expr></argument>, <argument pos:start="2037:53" pos:end="2037:59"><expr pos:start="2037:53" pos:end="2037:59"><name pos:start="2037:53" pos:end="2037:59">maskimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2039:17" pos:end="2039:35"><expr pos:start="2039:17" pos:end="2039:34"><call pos:start="2039:17" pos:end="2039:34"><name pos:start="2039:17" pos:end="2039:29">tcg_temp_free</name><argument_list pos:start="2039:30" pos:end="2039:34">(<argument pos:start="2039:31" pos:end="2039:33"><expr pos:start="2039:31" pos:end="2039:33"><name pos:start="2039:31" pos:end="2039:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="2043:13" pos:end="2043:18">break;</break>



        <case pos:start="2047:9" pos:end="2047:15">case <expr pos:start="2047:14" pos:end="2047:14"><literal type="number" pos:start="2047:14" pos:end="2047:14">6</literal></expr>:</case> <comment type="block" pos:start="2047:17" pos:end="2047:25">/*CUST0*/</comment>

            <expr_stmt pos:start="2049:13" pos:end="2049:23"><expr pos:start="2049:13" pos:end="2049:22"><call pos:start="2049:13" pos:end="2049:22"><name pos:start="2049:13" pos:end="2049:20">RESERVED</name><argument_list pos:start="2049:21" pos:end="2049:22">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2051:13" pos:end="2051:18">break;</break>



        <case pos:start="2055:9" pos:end="2055:15">case <expr pos:start="2055:14" pos:end="2055:14"><literal type="number" pos:start="2055:14" pos:end="2055:14">7</literal></expr>:</case> <comment type="block" pos:start="2055:17" pos:end="2055:25">/*CUST1*/</comment>

            <expr_stmt pos:start="2057:13" pos:end="2057:23"><expr pos:start="2057:13" pos:end="2057:22"><call pos:start="2057:13" pos:end="2057:22"><name pos:start="2057:13" pos:end="2057:20">RESERVED</name><argument_list pos:start="2057:21" pos:end="2057:22">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2059:13" pos:end="2059:18">break;</break>



        <case pos:start="2063:9" pos:end="2063:15">case <expr pos:start="2063:14" pos:end="2063:14"><literal type="number" pos:start="2063:14" pos:end="2063:14">8</literal></expr>:</case> <comment type="block" pos:start="2063:17" pos:end="2063:25">/*LSCXp*/</comment>

            <expr_stmt pos:start="2065:13" pos:end="2065:50"><expr pos:start="2065:13" pos:end="2065:49"><call pos:start="2065:13" pos:end="2065:49"><name pos:start="2065:13" pos:end="2065:22">HAS_OPTION</name><argument_list pos:start="2065:23" pos:end="2065:49">(<argument pos:start="2065:24" pos:end="2065:48"><expr pos:start="2065:24" pos:end="2065:48"><name pos:start="2065:24" pos:end="2065:48">XTENSA_OPTION_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2067:13" pos:end="2067:18"><expr pos:start="2067:13" pos:end="2067:17"><call pos:start="2067:13" pos:end="2067:17"><name pos:start="2067:13" pos:end="2067:15">TBD</name><argument_list pos:start="2067:16" pos:end="2067:17">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2069:13" pos:end="2069:18">break;</break>



        <case pos:start="2073:9" pos:end="2073:15">case <expr pos:start="2073:14" pos:end="2073:14"><literal type="number" pos:start="2073:14" pos:end="2073:14">9</literal></expr>:</case> <comment type="block" pos:start="2073:17" pos:end="2073:24">/*LSC4*/</comment>

            <expr_stmt pos:start="2075:13" pos:end="2075:48"><expr pos:start="2075:13" pos:end="2075:47"><call pos:start="2075:13" pos:end="2075:47"><name pos:start="2075:13" pos:end="2075:29">gen_window_check2</name><argument_list pos:start="2075:30" pos:end="2075:47">(<argument pos:start="2075:31" pos:end="2075:32"><expr pos:start="2075:31" pos:end="2075:32"><name pos:start="2075:31" pos:end="2075:32">dc</name></expr></argument>, <argument pos:start="2075:35" pos:end="2075:39"><expr pos:start="2075:35" pos:end="2075:39"><name pos:start="2075:35" pos:end="2075:39">RRR_S</name></expr></argument>, <argument pos:start="2075:42" pos:end="2075:46"><expr pos:start="2075:42" pos:end="2075:46"><name pos:start="2075:42" pos:end="2075:46">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2077:13" pos:end="2133:13">switch <condition pos:start="2077:20" pos:end="2077:24">(<expr pos:start="2077:21" pos:end="2077:23"><name pos:start="2077:21" pos:end="2077:23">OP2</name></expr>)</condition> <block pos:start="2077:26" pos:end="2133:13">{<block_content pos:start="2079:13" pos:end="2131:22">

            <case pos:start="2079:13" pos:end="2079:19">case <expr pos:start="2079:18" pos:end="2079:18"><literal type="number" pos:start="2079:18" pos:end="2079:18">0</literal></expr>:</case> <comment type="block" pos:start="2079:21" pos:end="2079:28">/*L32E*/</comment>

                <expr_stmt pos:start="2081:17" pos:end="2081:60"><expr pos:start="2081:17" pos:end="2081:59"><call pos:start="2081:17" pos:end="2081:59"><name pos:start="2081:17" pos:end="2081:26">HAS_OPTION</name><argument_list pos:start="2081:27" pos:end="2081:59">(<argument pos:start="2081:28" pos:end="2081:58"><expr pos:start="2081:28" pos:end="2081:58"><name pos:start="2081:28" pos:end="2081:58">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2083:17" pos:end="2083:40"><expr pos:start="2083:17" pos:end="2083:39"><call pos:start="2083:17" pos:end="2083:39"><name pos:start="2083:17" pos:end="2083:35">gen_check_privilege</name><argument_list pos:start="2083:36" pos:end="2083:39">(<argument pos:start="2083:37" pos:end="2083:38"><expr pos:start="2083:37" pos:end="2083:38"><name pos:start="2083:37" pos:end="2083:38">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="2085:17" pos:end="2097:17">{<block_content pos:start="2087:21" pos:end="2095:40">

                    <decl_stmt pos:start="2087:21" pos:end="2087:55"><decl pos:start="2087:21" pos:end="2087:54"><type pos:start="2087:21" pos:end="2087:28"><name pos:start="2087:21" pos:end="2087:28">TCGv_i32</name></type> <name pos:start="2087:30" pos:end="2087:33">addr</name> <init pos:start="2087:35" pos:end="2087:54">= <expr pos:start="2087:37" pos:end="2087:54"><call pos:start="2087:37" pos:end="2087:54"><name pos:start="2087:37" pos:end="2087:52">tcg_temp_new_i32</name><argument_list pos:start="2087:53" pos:end="2087:54">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="2089:21" pos:end="2091:57"><expr pos:start="2089:21" pos:end="2091:56"><call pos:start="2089:21" pos:end="2091:56"><name pos:start="2089:21" pos:end="2089:36">tcg_gen_addi_i32</name><argument_list pos:start="2089:37" pos:end="2091:56">(<argument pos:start="2089:38" pos:end="2089:41"><expr pos:start="2089:38" pos:end="2089:41"><name pos:start="2089:38" pos:end="2089:41">addr</name></expr></argument>, <argument pos:start="2089:44" pos:end="2089:55"><expr pos:start="2089:44" pos:end="2089:55"><name pos:start="2089:44" pos:end="2089:55"><name pos:start="2089:44" pos:end="2089:48">cpu_R</name><index pos:start="2089:49" pos:end="2089:55">[<expr pos:start="2089:50" pos:end="2089:54"><name pos:start="2089:50" pos:end="2089:54">RRR_S</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="2091:29" pos:end="2091:55"><expr pos:start="2091:29" pos:end="2091:55"><operator pos:start="2091:29" pos:end="2091:29">(</operator><literal type="number" pos:start="2091:30" pos:end="2091:39">0xffffffc0</literal> <operator pos:start="2091:41" pos:end="2091:41">|</operator> <operator pos:start="2091:43" pos:end="2091:43">(</operator><name pos:start="2091:44" pos:end="2091:48">RRR_R</name> <operator pos:start="2091:50" pos:end="2091:51">&lt;&lt;</operator> <literal type="number" pos:start="2091:53" pos:end="2091:53">2</literal><operator pos:start="2091:54" pos:end="2091:54">)</operator><operator pos:start="2091:55" pos:end="2091:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2093:21" pos:end="2093:69"><expr pos:start="2093:21" pos:end="2093:68"><call pos:start="2093:21" pos:end="2093:68"><name pos:start="2093:21" pos:end="2093:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="2093:39" pos:end="2093:68">(<argument pos:start="2093:40" pos:end="2093:51"><expr pos:start="2093:40" pos:end="2093:51"><name pos:start="2093:40" pos:end="2093:51"><name pos:start="2093:40" pos:end="2093:44">cpu_R</name><index pos:start="2093:45" pos:end="2093:51">[<expr pos:start="2093:46" pos:end="2093:50"><name pos:start="2093:46" pos:end="2093:50">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2093:54" pos:end="2093:57"><expr pos:start="2093:54" pos:end="2093:57"><name pos:start="2093:54" pos:end="2093:57">addr</name></expr></argument>, <argument pos:start="2093:60" pos:end="2093:67"><expr pos:start="2093:60" pos:end="2093:67"><name pos:start="2093:60" pos:end="2093:67"><name pos:start="2093:60" pos:end="2093:61">dc</name><operator pos:start="2093:62" pos:end="2093:63">-&gt;</operator><name pos:start="2093:64" pos:end="2093:67">ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2095:21" pos:end="2095:40"><expr pos:start="2095:21" pos:end="2095:39"><call pos:start="2095:21" pos:end="2095:39"><name pos:start="2095:21" pos:end="2095:33">tcg_temp_free</name><argument_list pos:start="2095:34" pos:end="2095:39">(<argument pos:start="2095:35" pos:end="2095:38"><expr pos:start="2095:35" pos:end="2095:38"><name pos:start="2095:35" pos:end="2095:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="2099:17" pos:end="2099:22">break;</break>



            <case pos:start="2103:13" pos:end="2103:19">case <expr pos:start="2103:18" pos:end="2103:18"><literal type="number" pos:start="2103:18" pos:end="2103:18">4</literal></expr>:</case> <comment type="block" pos:start="2103:21" pos:end="2103:28">/*S32E*/</comment>

                <expr_stmt pos:start="2105:17" pos:end="2105:60"><expr pos:start="2105:17" pos:end="2105:59"><call pos:start="2105:17" pos:end="2105:59"><name pos:start="2105:17" pos:end="2105:26">HAS_OPTION</name><argument_list pos:start="2105:27" pos:end="2105:59">(<argument pos:start="2105:28" pos:end="2105:58"><expr pos:start="2105:28" pos:end="2105:58"><name pos:start="2105:28" pos:end="2105:58">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2107:17" pos:end="2107:40"><expr pos:start="2107:17" pos:end="2107:39"><call pos:start="2107:17" pos:end="2107:39"><name pos:start="2107:17" pos:end="2107:35">gen_check_privilege</name><argument_list pos:start="2107:36" pos:end="2107:39">(<argument pos:start="2107:37" pos:end="2107:38"><expr pos:start="2107:37" pos:end="2107:38"><name pos:start="2107:37" pos:end="2107:38">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="2109:17" pos:end="2121:17">{<block_content pos:start="2111:21" pos:end="2119:40">

                    <decl_stmt pos:start="2111:21" pos:end="2111:55"><decl pos:start="2111:21" pos:end="2111:54"><type pos:start="2111:21" pos:end="2111:28"><name pos:start="2111:21" pos:end="2111:28">TCGv_i32</name></type> <name pos:start="2111:30" pos:end="2111:33">addr</name> <init pos:start="2111:35" pos:end="2111:54">= <expr pos:start="2111:37" pos:end="2111:54"><call pos:start="2111:37" pos:end="2111:54"><name pos:start="2111:37" pos:end="2111:52">tcg_temp_new_i32</name><argument_list pos:start="2111:53" pos:end="2111:54">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="2113:21" pos:end="2115:57"><expr pos:start="2113:21" pos:end="2115:56"><call pos:start="2113:21" pos:end="2115:56"><name pos:start="2113:21" pos:end="2113:36">tcg_gen_addi_i32</name><argument_list pos:start="2113:37" pos:end="2115:56">(<argument pos:start="2113:38" pos:end="2113:41"><expr pos:start="2113:38" pos:end="2113:41"><name pos:start="2113:38" pos:end="2113:41">addr</name></expr></argument>, <argument pos:start="2113:44" pos:end="2113:55"><expr pos:start="2113:44" pos:end="2113:55"><name pos:start="2113:44" pos:end="2113:55"><name pos:start="2113:44" pos:end="2113:48">cpu_R</name><index pos:start="2113:49" pos:end="2113:55">[<expr pos:start="2113:50" pos:end="2113:54"><name pos:start="2113:50" pos:end="2113:54">RRR_S</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="2115:29" pos:end="2115:55"><expr pos:start="2115:29" pos:end="2115:55"><operator pos:start="2115:29" pos:end="2115:29">(</operator><literal type="number" pos:start="2115:30" pos:end="2115:39">0xffffffc0</literal> <operator pos:start="2115:41" pos:end="2115:41">|</operator> <operator pos:start="2115:43" pos:end="2115:43">(</operator><name pos:start="2115:44" pos:end="2115:48">RRR_R</name> <operator pos:start="2115:50" pos:end="2115:51">&lt;&lt;</operator> <literal type="number" pos:start="2115:53" pos:end="2115:53">2</literal><operator pos:start="2115:54" pos:end="2115:54">)</operator><operator pos:start="2115:55" pos:end="2115:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2117:21" pos:end="2117:68"><expr pos:start="2117:21" pos:end="2117:67"><call pos:start="2117:21" pos:end="2117:67"><name pos:start="2117:21" pos:end="2117:37">tcg_gen_qemu_st32</name><argument_list pos:start="2117:38" pos:end="2117:67">(<argument pos:start="2117:39" pos:end="2117:50"><expr pos:start="2117:39" pos:end="2117:50"><name pos:start="2117:39" pos:end="2117:50"><name pos:start="2117:39" pos:end="2117:43">cpu_R</name><index pos:start="2117:44" pos:end="2117:50">[<expr pos:start="2117:45" pos:end="2117:49"><name pos:start="2117:45" pos:end="2117:49">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2117:53" pos:end="2117:56"><expr pos:start="2117:53" pos:end="2117:56"><name pos:start="2117:53" pos:end="2117:56">addr</name></expr></argument>, <argument pos:start="2117:59" pos:end="2117:66"><expr pos:start="2117:59" pos:end="2117:66"><name pos:start="2117:59" pos:end="2117:66"><name pos:start="2117:59" pos:end="2117:60">dc</name><operator pos:start="2117:61" pos:end="2117:62">-&gt;</operator><name pos:start="2117:63" pos:end="2117:66">ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2119:21" pos:end="2119:40"><expr pos:start="2119:21" pos:end="2119:39"><call pos:start="2119:21" pos:end="2119:39"><name pos:start="2119:21" pos:end="2119:33">tcg_temp_free</name><argument_list pos:start="2119:34" pos:end="2119:39">(<argument pos:start="2119:35" pos:end="2119:38"><expr pos:start="2119:35" pos:end="2119:38"><name pos:start="2119:35" pos:end="2119:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="2123:17" pos:end="2123:22">break;</break>



            <default pos:start="2127:13" pos:end="2127:20">default:</default>

                <expr_stmt pos:start="2129:17" pos:end="2129:27"><expr pos:start="2129:17" pos:end="2129:26"><call pos:start="2129:17" pos:end="2129:26"><name pos:start="2129:17" pos:end="2129:24">RESERVED</name><argument_list pos:start="2129:25" pos:end="2129:26">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2131:17" pos:end="2131:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="2135:13" pos:end="2135:18">break;</break>



        <case pos:start="2139:9" pos:end="2139:16">case <expr pos:start="2139:14" pos:end="2139:15"><literal type="number" pos:start="2139:14" pos:end="2139:15">10</literal></expr>:</case> <comment type="block" pos:start="2139:18" pos:end="2139:24">/*FP0*/</comment>

            <expr_stmt pos:start="2141:13" pos:end="2141:53"><expr pos:start="2141:13" pos:end="2141:52"><call pos:start="2141:13" pos:end="2141:52"><name pos:start="2141:13" pos:end="2141:22">HAS_OPTION</name><argument_list pos:start="2141:23" pos:end="2141:52">(<argument pos:start="2141:24" pos:end="2141:51"><expr pos:start="2141:24" pos:end="2141:51"><name pos:start="2141:24" pos:end="2141:51">XTENSA_OPTION_FP_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2143:13" pos:end="2143:18"><expr pos:start="2143:13" pos:end="2143:17"><call pos:start="2143:13" pos:end="2143:17"><name pos:start="2143:13" pos:end="2143:15">TBD</name><argument_list pos:start="2143:16" pos:end="2143:17">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2145:13" pos:end="2145:18">break;</break>



        <case pos:start="2149:9" pos:end="2149:16">case <expr pos:start="2149:14" pos:end="2149:15"><literal type="number" pos:start="2149:14" pos:end="2149:15">11</literal></expr>:</case> <comment type="block" pos:start="2149:18" pos:end="2149:24">/*FP1*/</comment>

            <expr_stmt pos:start="2151:13" pos:end="2151:53"><expr pos:start="2151:13" pos:end="2151:52"><call pos:start="2151:13" pos:end="2151:52"><name pos:start="2151:13" pos:end="2151:22">HAS_OPTION</name><argument_list pos:start="2151:23" pos:end="2151:52">(<argument pos:start="2151:24" pos:end="2151:51"><expr pos:start="2151:24" pos:end="2151:51"><name pos:start="2151:24" pos:end="2151:51">XTENSA_OPTION_FP_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2153:13" pos:end="2153:18"><expr pos:start="2153:13" pos:end="2153:17"><call pos:start="2153:13" pos:end="2153:17"><name pos:start="2153:13" pos:end="2153:15">TBD</name><argument_list pos:start="2153:16" pos:end="2153:17">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2155:13" pos:end="2155:18">break;</break>



        <default pos:start="2159:9" pos:end="2159:16">default:</default> <comment type="block" pos:start="2159:18" pos:end="2159:29">/*reserved*/</comment>

            <expr_stmt pos:start="2161:13" pos:end="2161:23"><expr pos:start="2161:13" pos:end="2161:22"><call pos:start="2161:13" pos:end="2161:22"><name pos:start="2161:13" pos:end="2161:20">RESERVED</name><argument_list pos:start="2161:21" pos:end="2161:22">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2163:13" pos:end="2163:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="2167:9" pos:end="2167:14">break;</break>



    <case pos:start="2171:5" pos:end="2171:11">case <expr pos:start="2171:10" pos:end="2171:10"><literal type="number" pos:start="2171:10" pos:end="2171:10">1</literal></expr>:</case> <comment type="block" pos:start="2171:13" pos:end="2171:20">/*L32R*/</comment>

        <expr_stmt pos:start="2173:9" pos:end="2173:37"><expr pos:start="2173:9" pos:end="2173:36"><call pos:start="2173:9" pos:end="2173:36"><name pos:start="2173:9" pos:end="2173:25">gen_window_check1</name><argument_list pos:start="2173:26" pos:end="2173:36">(<argument pos:start="2173:27" pos:end="2173:28"><expr pos:start="2173:27" pos:end="2173:28"><name pos:start="2173:27" pos:end="2173:28">dc</name></expr></argument>, <argument pos:start="2173:31" pos:end="2173:35"><expr pos:start="2173:31" pos:end="2173:35"><name pos:start="2173:31" pos:end="2173:35">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="2175:9" pos:end="2197:9">{<block_content pos:start="2177:13" pos:end="2195:31">

            <decl_stmt pos:start="2177:13" pos:end="2183:54"><decl pos:start="2177:13" pos:end="2183:53"><type pos:start="2177:13" pos:end="2177:20"><name pos:start="2177:13" pos:end="2177:20">TCGv_i32</name></type> <name pos:start="2177:22" pos:end="2177:24">tmp</name> <init pos:start="2177:26" pos:end="2183:53">= <expr pos:start="2177:28" pos:end="2183:53"><call pos:start="2177:28" pos:end="2183:53"><name pos:start="2177:28" pos:end="2177:40">tcg_const_i32</name><argument_list pos:start="2177:41" pos:end="2183:53">(

                    <argument pos:start="2179:21" pos:end="2183:52"><expr pos:start="2179:21" pos:end="2183:52"><operator pos:start="2179:21" pos:end="2179:21">(</operator><ternary pos:start="2179:22" pos:end="2181:44"><condition pos:start="2179:22" pos:end="2179:62"><expr pos:start="2179:22" pos:end="2179:60"><operator pos:start="2179:22" pos:end="2179:22">(</operator><name pos:start="2179:23" pos:end="2179:35"><name pos:start="2179:23" pos:end="2179:24">dc</name><operator pos:start="2179:25" pos:end="2179:26">-&gt;</operator><name pos:start="2179:27" pos:end="2179:28">tb</name><operator pos:start="2179:29" pos:end="2179:30">-&gt;</operator><name pos:start="2179:31" pos:end="2179:35">flags</name></name> <operator pos:start="2179:37" pos:end="2179:37">&amp;</operator> <name pos:start="2179:39" pos:end="2179:59">XTENSA_TBFLAG_LITBASE</name><operator pos:start="2179:60" pos:end="2179:60">)</operator></expr> ?</condition><then pos:start="2181:22" pos:end="2181:22">

                     <expr pos:start="2181:22" pos:end="2181:22"><literal type="number" pos:start="2181:22" pos:end="2181:22">0</literal></expr> </then><else pos:start="2181:24" pos:end="2181:44">: <expr pos:start="2181:26" pos:end="2181:44"><operator pos:start="2181:26" pos:end="2181:26">(</operator><operator pos:start="2181:27" pos:end="2181:27">(</operator><name pos:start="2181:28" pos:end="2181:33"><name pos:start="2181:28" pos:end="2181:29">dc</name><operator pos:start="2181:30" pos:end="2181:31">-&gt;</operator><name pos:start="2181:32" pos:end="2181:33">pc</name></name> <operator pos:start="2181:35" pos:end="2181:35">+</operator> <literal type="number" pos:start="2181:37" pos:end="2181:37">3</literal><operator pos:start="2181:38" pos:end="2181:38">)</operator> <operator pos:start="2181:40" pos:end="2181:40">&amp;</operator> <operator pos:start="2181:42" pos:end="2181:42">~</operator><literal type="number" pos:start="2181:43" pos:end="2181:43">3</literal><operator pos:start="2181:44" pos:end="2181:44">)</operator></expr></else></ternary><operator pos:start="2181:45" pos:end="2181:45">)</operator> <operator pos:start="2181:47" pos:end="2181:47">+</operator>

                    <operator pos:start="2183:21" pos:end="2183:21">(</operator><literal type="number" pos:start="2183:22" pos:end="2183:31">0xfffc0000</literal> <operator pos:start="2183:33" pos:end="2183:33">|</operator> <operator pos:start="2183:35" pos:end="2183:35">(</operator><name pos:start="2183:36" pos:end="2183:45">RI16_IMM16</name> <operator pos:start="2183:47" pos:end="2183:48">&lt;&lt;</operator> <literal type="number" pos:start="2183:50" pos:end="2183:50">2</literal><operator pos:start="2183:51" pos:end="2183:51">)</operator><operator pos:start="2183:52" pos:end="2183:52">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="2187:13" pos:end="2191:13"><if pos:start="2187:13" pos:end="2191:13">if <condition pos:start="2187:16" pos:end="2187:54">(<expr pos:start="2187:17" pos:end="2187:53"><name pos:start="2187:17" pos:end="2187:29"><name pos:start="2187:17" pos:end="2187:18">dc</name><operator pos:start="2187:19" pos:end="2187:20">-&gt;</operator><name pos:start="2187:21" pos:end="2187:22">tb</name><operator pos:start="2187:23" pos:end="2187:24">-&gt;</operator><name pos:start="2187:25" pos:end="2187:29">flags</name></name> <operator pos:start="2187:31" pos:end="2187:31">&amp;</operator> <name pos:start="2187:33" pos:end="2187:53">XTENSA_TBFLAG_LITBASE</name></expr>)</condition> <block pos:start="2187:56" pos:end="2191:13">{<block_content pos:start="2189:17" pos:end="2189:55">

                <expr_stmt pos:start="2189:17" pos:end="2189:55"><expr pos:start="2189:17" pos:end="2189:54"><call pos:start="2189:17" pos:end="2189:54"><name pos:start="2189:17" pos:end="2189:31">tcg_gen_add_i32</name><argument_list pos:start="2189:32" pos:end="2189:54">(<argument pos:start="2189:33" pos:end="2189:35"><expr pos:start="2189:33" pos:end="2189:35"><name pos:start="2189:33" pos:end="2189:35">tmp</name></expr></argument>, <argument pos:start="2189:38" pos:end="2189:40"><expr pos:start="2189:38" pos:end="2189:40"><name pos:start="2189:38" pos:end="2189:40">tmp</name></expr></argument>, <argument pos:start="2189:43" pos:end="2189:53"><expr pos:start="2189:43" pos:end="2189:53"><name pos:start="2189:43" pos:end="2189:53"><name pos:start="2189:43" pos:end="2189:44">dc</name><operator pos:start="2189:45" pos:end="2189:46">-&gt;</operator><name pos:start="2189:47" pos:end="2189:53">litbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2193:13" pos:end="2193:61"><expr pos:start="2193:13" pos:end="2193:60"><call pos:start="2193:13" pos:end="2193:60"><name pos:start="2193:13" pos:end="2193:30">tcg_gen_qemu_ld32u</name><argument_list pos:start="2193:31" pos:end="2193:60">(<argument pos:start="2193:32" pos:end="2193:43"><expr pos:start="2193:32" pos:end="2193:43"><name pos:start="2193:32" pos:end="2193:43"><name pos:start="2193:32" pos:end="2193:36">cpu_R</name><index pos:start="2193:37" pos:end="2193:43">[<expr pos:start="2193:38" pos:end="2193:42"><name pos:start="2193:38" pos:end="2193:42">RRR_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2193:46" pos:end="2193:48"><expr pos:start="2193:46" pos:end="2193:48"><name pos:start="2193:46" pos:end="2193:48">tmp</name></expr></argument>, <argument pos:start="2193:51" pos:end="2193:59"><expr pos:start="2193:51" pos:end="2193:59"><name pos:start="2193:51" pos:end="2193:59"><name pos:start="2193:51" pos:end="2193:52">dc</name><operator pos:start="2193:53" pos:end="2193:54">-&gt;</operator><name pos:start="2193:55" pos:end="2193:59">cring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2195:13" pos:end="2195:31"><expr pos:start="2195:13" pos:end="2195:30"><call pos:start="2195:13" pos:end="2195:30"><name pos:start="2195:13" pos:end="2195:25">tcg_temp_free</name><argument_list pos:start="2195:26" pos:end="2195:30">(<argument pos:start="2195:27" pos:end="2195:29"><expr pos:start="2195:27" pos:end="2195:29"><name pos:start="2195:27" pos:end="2195:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2199:9" pos:end="2199:14">break;</break>



    <case pos:start="2203:5" pos:end="2224:0">case <expr pos:start="2203:10" pos:end="2203:10"><literal type="number" pos:start="2203:10" pos:end="2203:10">2</literal></expr>:</case> <comment type="block" pos:start="2203:13" pos:end="2203:20">/*LSAI*/</comment>

<cpp:define pos:start="2205:1" pos:end="2223:19">#<cpp:directive pos:start="2205:2" pos:end="2205:7">define</cpp:directive> <cpp:macro pos:start="2205:9" pos:end="2205:35"><name pos:start="2205:9" pos:end="2205:22">gen_load_store</name><parameter_list pos:start="2205:23" pos:end="2205:35">(<parameter pos:start="2205:24" pos:end="2205:27"><type pos:start="2205:24" pos:end="2205:27"><name pos:start="2205:24" pos:end="2205:27">type</name></type></parameter>, <parameter pos:start="2205:30" pos:end="2205:34"><type pos:start="2205:30" pos:end="2205:34"><name pos:start="2205:30" pos:end="2205:34">shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="2205:37" pos:end="2223:19">do { \

            TCGv_i32 addr = tcg_temp_new_i32(); \

            gen_window_check2(dc, RRI8_S, RRI8_T); \

            tcg_gen_addi_i32(addr, cpu_R[RRI8_S], RRI8_IMM8 &lt;&lt; shift); \

            if (shift) { \

                gen_load_store_alignment(dc, shift, addr, false); \

            } \

            tcg_gen_qemu_##type(cpu_R[RRI8_T], addr, dc-&gt;cring); \

            tcg_temp_free(addr); \

        } while (0)</cpp:value></cpp:define>



        <switch pos:start="2227:9" pos:end="2607:9">switch <condition pos:start="2227:16" pos:end="2227:23">(<expr pos:start="2227:17" pos:end="2227:22"><name pos:start="2227:17" pos:end="2227:22">RRI8_R</name></expr>)</condition> <block pos:start="2227:25" pos:end="2607:9">{<block_content pos:start="2229:9" pos:end="2605:18">

        <case pos:start="2229:9" pos:end="2229:15">case <expr pos:start="2229:14" pos:end="2229:14"><literal type="number" pos:start="2229:14" pos:end="2229:14">0</literal></expr>:</case> <comment type="block" pos:start="2229:17" pos:end="2229:24">/*L8UI*/</comment>

            <expr_stmt pos:start="2231:13" pos:end="2231:36"><expr pos:start="2231:13" pos:end="2231:35"><call pos:start="2231:13" pos:end="2231:35"><name pos:start="2231:13" pos:end="2231:26">gen_load_store</name><argument_list pos:start="2231:27" pos:end="2231:35">(<argument pos:start="2231:28" pos:end="2231:31"><expr pos:start="2231:28" pos:end="2231:31"><name pos:start="2231:28" pos:end="2231:31">ld8u</name></expr></argument>, <argument pos:start="2231:34" pos:end="2231:34"><expr pos:start="2231:34" pos:end="2231:34"><literal type="number" pos:start="2231:34" pos:end="2231:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2233:13" pos:end="2233:18">break;</break>



        <case pos:start="2237:9" pos:end="2237:15">case <expr pos:start="2237:14" pos:end="2237:14"><literal type="number" pos:start="2237:14" pos:end="2237:14">1</literal></expr>:</case> <comment type="block" pos:start="2237:17" pos:end="2237:25">/*L16UI*/</comment>

            <expr_stmt pos:start="2239:13" pos:end="2239:37"><expr pos:start="2239:13" pos:end="2239:36"><call pos:start="2239:13" pos:end="2239:36"><name pos:start="2239:13" pos:end="2239:26">gen_load_store</name><argument_list pos:start="2239:27" pos:end="2239:36">(<argument pos:start="2239:28" pos:end="2239:32"><expr pos:start="2239:28" pos:end="2239:32"><name pos:start="2239:28" pos:end="2239:32">ld16u</name></expr></argument>, <argument pos:start="2239:35" pos:end="2239:35"><expr pos:start="2239:35" pos:end="2239:35"><literal type="number" pos:start="2239:35" pos:end="2239:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2241:13" pos:end="2241:18">break;</break>



        <case pos:start="2245:9" pos:end="2245:15">case <expr pos:start="2245:14" pos:end="2245:14"><literal type="number" pos:start="2245:14" pos:end="2245:14">2</literal></expr>:</case> <comment type="block" pos:start="2245:17" pos:end="2245:24">/*L32I*/</comment>

            <expr_stmt pos:start="2247:13" pos:end="2247:37"><expr pos:start="2247:13" pos:end="2247:36"><call pos:start="2247:13" pos:end="2247:36"><name pos:start="2247:13" pos:end="2247:26">gen_load_store</name><argument_list pos:start="2247:27" pos:end="2247:36">(<argument pos:start="2247:28" pos:end="2247:32"><expr pos:start="2247:28" pos:end="2247:32"><name pos:start="2247:28" pos:end="2247:32">ld32u</name></expr></argument>, <argument pos:start="2247:35" pos:end="2247:35"><expr pos:start="2247:35" pos:end="2247:35"><literal type="number" pos:start="2247:35" pos:end="2247:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2249:13" pos:end="2249:18">break;</break>



        <case pos:start="2253:9" pos:end="2253:15">case <expr pos:start="2253:14" pos:end="2253:14"><literal type="number" pos:start="2253:14" pos:end="2253:14">4</literal></expr>:</case> <comment type="block" pos:start="2253:17" pos:end="2253:23">/*S8I*/</comment>

            <expr_stmt pos:start="2255:13" pos:end="2255:35"><expr pos:start="2255:13" pos:end="2255:34"><call pos:start="2255:13" pos:end="2255:34"><name pos:start="2255:13" pos:end="2255:26">gen_load_store</name><argument_list pos:start="2255:27" pos:end="2255:34">(<argument pos:start="2255:28" pos:end="2255:30"><expr pos:start="2255:28" pos:end="2255:30"><name pos:start="2255:28" pos:end="2255:30">st8</name></expr></argument>, <argument pos:start="2255:33" pos:end="2255:33"><expr pos:start="2255:33" pos:end="2255:33"><literal type="number" pos:start="2255:33" pos:end="2255:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2257:13" pos:end="2257:18">break;</break>



        <case pos:start="2261:9" pos:end="2261:15">case <expr pos:start="2261:14" pos:end="2261:14"><literal type="number" pos:start="2261:14" pos:end="2261:14">5</literal></expr>:</case> <comment type="block" pos:start="2261:17" pos:end="2261:24">/*S16I*/</comment>

            <expr_stmt pos:start="2263:13" pos:end="2263:36"><expr pos:start="2263:13" pos:end="2263:35"><call pos:start="2263:13" pos:end="2263:35"><name pos:start="2263:13" pos:end="2263:26">gen_load_store</name><argument_list pos:start="2263:27" pos:end="2263:35">(<argument pos:start="2263:28" pos:end="2263:31"><expr pos:start="2263:28" pos:end="2263:31"><name pos:start="2263:28" pos:end="2263:31">st16</name></expr></argument>, <argument pos:start="2263:34" pos:end="2263:34"><expr pos:start="2263:34" pos:end="2263:34"><literal type="number" pos:start="2263:34" pos:end="2263:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2265:13" pos:end="2265:18">break;</break>



        <case pos:start="2269:9" pos:end="2269:15">case <expr pos:start="2269:14" pos:end="2269:14"><literal type="number" pos:start="2269:14" pos:end="2269:14">6</literal></expr>:</case> <comment type="block" pos:start="2269:17" pos:end="2269:24">/*S32I*/</comment>

            <expr_stmt pos:start="2271:13" pos:end="2271:36"><expr pos:start="2271:13" pos:end="2271:35"><call pos:start="2271:13" pos:end="2271:35"><name pos:start="2271:13" pos:end="2271:26">gen_load_store</name><argument_list pos:start="2271:27" pos:end="2271:35">(<argument pos:start="2271:28" pos:end="2271:31"><expr pos:start="2271:28" pos:end="2271:31"><name pos:start="2271:28" pos:end="2271:31">st32</name></expr></argument>, <argument pos:start="2271:34" pos:end="2271:34"><expr pos:start="2271:34" pos:end="2271:34"><literal type="number" pos:start="2271:34" pos:end="2271:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2273:13" pos:end="2273:18">break;</break>



        <case pos:start="2277:9" pos:end="2277:15">case <expr pos:start="2277:14" pos:end="2277:14"><literal type="number" pos:start="2277:14" pos:end="2277:14">7</literal></expr>:</case> <comment type="block" pos:start="2277:17" pos:end="2277:26">/*CACHEc*/</comment>

            <if_stmt pos:start="2279:13" pos:end="2283:13"><if pos:start="2279:13" pos:end="2283:13">if <condition pos:start="2279:16" pos:end="2279:27">(<expr pos:start="2279:17" pos:end="2279:26"><name pos:start="2279:17" pos:end="2279:22">RRI8_T</name> <operator pos:start="2279:24" pos:end="2279:24">&lt;</operator> <literal type="number" pos:start="2279:26" pos:end="2279:26">8</literal></expr>)</condition> <block pos:start="2279:29" pos:end="2283:13">{<block_content pos:start="2281:17" pos:end="2281:49">

                <expr_stmt pos:start="2281:17" pos:end="2281:49"><expr pos:start="2281:17" pos:end="2281:48"><call pos:start="2281:17" pos:end="2281:48"><name pos:start="2281:17" pos:end="2281:26">HAS_OPTION</name><argument_list pos:start="2281:27" pos:end="2281:48">(<argument pos:start="2281:28" pos:end="2281:47"><expr pos:start="2281:28" pos:end="2281:47"><name pos:start="2281:28" pos:end="2281:47">XTENSA_OPTION_DCACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="2287:13" pos:end="2465:13">switch <condition pos:start="2287:20" pos:end="2287:27">(<expr pos:start="2287:21" pos:end="2287:26"><name pos:start="2287:21" pos:end="2287:26">RRI8_T</name></expr>)</condition> <block pos:start="2287:29" pos:end="2465:13">{<block_content pos:start="2289:13" pos:end="2463:22">

            <case pos:start="2289:13" pos:end="2289:19">case <expr pos:start="2289:18" pos:end="2289:18"><literal type="number" pos:start="2289:18" pos:end="2289:18">0</literal></expr>:</case> <comment type="block" pos:start="2289:21" pos:end="2289:29">/*DPFRc*/</comment>

                <break pos:start="2291:17" pos:end="2291:22">break;</break>



            <case pos:start="2295:13" pos:end="2295:19">case <expr pos:start="2295:18" pos:end="2295:18"><literal type="number" pos:start="2295:18" pos:end="2295:18">1</literal></expr>:</case> <comment type="block" pos:start="2295:21" pos:end="2295:29">/*DPFWc*/</comment>

                <break pos:start="2297:17" pos:end="2297:22">break;</break>



            <case pos:start="2301:13" pos:end="2301:19">case <expr pos:start="2301:18" pos:end="2301:18"><literal type="number" pos:start="2301:18" pos:end="2301:18">2</literal></expr>:</case> <comment type="block" pos:start="2301:21" pos:end="2301:30">/*DPFROc*/</comment>

                <break pos:start="2303:17" pos:end="2303:22">break;</break>



            <case pos:start="2307:13" pos:end="2307:19">case <expr pos:start="2307:18" pos:end="2307:18"><literal type="number" pos:start="2307:18" pos:end="2307:18">3</literal></expr>:</case> <comment type="block" pos:start="2307:21" pos:end="2307:30">/*DPFWOc*/</comment>

                <break pos:start="2309:17" pos:end="2309:22">break;</break>



            <case pos:start="2313:13" pos:end="2313:19">case <expr pos:start="2313:18" pos:end="2313:18"><literal type="number" pos:start="2313:18" pos:end="2313:18">4</literal></expr>:</case> <comment type="block" pos:start="2313:21" pos:end="2313:29">/*DHWBc*/</comment>

                <break pos:start="2315:17" pos:end="2315:22">break;</break>



            <case pos:start="2319:13" pos:end="2319:19">case <expr pos:start="2319:18" pos:end="2319:18"><literal type="number" pos:start="2319:18" pos:end="2319:18">5</literal></expr>:</case> <comment type="block" pos:start="2319:21" pos:end="2319:30">/*DHWBIc*/</comment>

                <break pos:start="2321:17" pos:end="2321:22">break;</break>



            <case pos:start="2325:13" pos:end="2325:19">case <expr pos:start="2325:18" pos:end="2325:18"><literal type="number" pos:start="2325:18" pos:end="2325:18">6</literal></expr>:</case> <comment type="block" pos:start="2325:21" pos:end="2325:28">/*DHIc*/</comment>

                <break pos:start="2327:17" pos:end="2327:22">break;</break>



            <case pos:start="2331:13" pos:end="2331:19">case <expr pos:start="2331:18" pos:end="2331:18"><literal type="number" pos:start="2331:18" pos:end="2331:18">7</literal></expr>:</case> <comment type="block" pos:start="2331:21" pos:end="2331:28">/*DIIc*/</comment>

                <break pos:start="2333:17" pos:end="2333:22">break;</break>



            <case pos:start="2337:13" pos:end="2337:19">case <expr pos:start="2337:18" pos:end="2337:18"><literal type="number" pos:start="2337:18" pos:end="2337:18">8</literal></expr>:</case> <comment type="block" pos:start="2337:21" pos:end="2337:28">/*DCEc*/</comment>

                <switch pos:start="2339:17" pos:end="2389:17">switch <condition pos:start="2339:24" pos:end="2339:28">(<expr pos:start="2339:25" pos:end="2339:27"><name pos:start="2339:25" pos:end="2339:27">OP1</name></expr>)</condition> <block pos:start="2339:30" pos:end="2389:17">{<block_content pos:start="2341:17" pos:end="2385:26">

                <case pos:start="2341:17" pos:end="2341:23">case <expr pos:start="2341:22" pos:end="2341:22"><literal type="number" pos:start="2341:22" pos:end="2341:22">0</literal></expr>:</case> <comment type="block" pos:start="2341:25" pos:end="2341:33">/*DPFLl*/</comment>

                    <expr_stmt pos:start="2343:21" pos:end="2343:64"><expr pos:start="2343:21" pos:end="2343:63"><call pos:start="2343:21" pos:end="2343:63"><name pos:start="2343:21" pos:end="2343:30">HAS_OPTION</name><argument_list pos:start="2343:31" pos:end="2343:63">(<argument pos:start="2343:32" pos:end="2343:62"><expr pos:start="2343:32" pos:end="2343:62"><name pos:start="2343:32" pos:end="2343:62">XTENSA_OPTION_DCACHE_INDEX_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2345:21" pos:end="2345:26">break;</break>



                <case pos:start="2349:17" pos:end="2349:23">case <expr pos:start="2349:22" pos:end="2349:22"><literal type="number" pos:start="2349:22" pos:end="2349:22">2</literal></expr>:</case> <comment type="block" pos:start="2349:25" pos:end="2349:32">/*DHUl*/</comment>

                    <expr_stmt pos:start="2351:21" pos:end="2351:64"><expr pos:start="2351:21" pos:end="2351:63"><call pos:start="2351:21" pos:end="2351:63"><name pos:start="2351:21" pos:end="2351:30">HAS_OPTION</name><argument_list pos:start="2351:31" pos:end="2351:63">(<argument pos:start="2351:32" pos:end="2351:62"><expr pos:start="2351:32" pos:end="2351:62"><name pos:start="2351:32" pos:end="2351:62">XTENSA_OPTION_DCACHE_INDEX_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2353:21" pos:end="2353:26">break;</break>



                <case pos:start="2357:17" pos:end="2357:23">case <expr pos:start="2357:22" pos:end="2357:22"><literal type="number" pos:start="2357:22" pos:end="2357:22">3</literal></expr>:</case> <comment type="block" pos:start="2357:25" pos:end="2357:32">/*DIUl*/</comment>

                    <expr_stmt pos:start="2359:21" pos:end="2359:64"><expr pos:start="2359:21" pos:end="2359:63"><call pos:start="2359:21" pos:end="2359:63"><name pos:start="2359:21" pos:end="2359:30">HAS_OPTION</name><argument_list pos:start="2359:31" pos:end="2359:63">(<argument pos:start="2359:32" pos:end="2359:62"><expr pos:start="2359:32" pos:end="2359:62"><name pos:start="2359:32" pos:end="2359:62">XTENSA_OPTION_DCACHE_INDEX_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2361:21" pos:end="2361:26">break;</break>



                <case pos:start="2365:17" pos:end="2365:23">case <expr pos:start="2365:22" pos:end="2365:22"><literal type="number" pos:start="2365:22" pos:end="2365:22">4</literal></expr>:</case> <comment type="block" pos:start="2365:25" pos:end="2365:33">/*DIWBc*/</comment>

                    <expr_stmt pos:start="2367:21" pos:end="2367:53"><expr pos:start="2367:21" pos:end="2367:52"><call pos:start="2367:21" pos:end="2367:52"><name pos:start="2367:21" pos:end="2367:30">HAS_OPTION</name><argument_list pos:start="2367:31" pos:end="2367:52">(<argument pos:start="2367:32" pos:end="2367:51"><expr pos:start="2367:32" pos:end="2367:51"><name pos:start="2367:32" pos:end="2367:51">XTENSA_OPTION_DCACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2369:21" pos:end="2369:26">break;</break>



                <case pos:start="2373:17" pos:end="2373:23">case <expr pos:start="2373:22" pos:end="2373:22"><literal type="number" pos:start="2373:22" pos:end="2373:22">5</literal></expr>:</case> <comment type="block" pos:start="2373:25" pos:end="2373:34">/*DIWBIc*/</comment>

                    <expr_stmt pos:start="2375:21" pos:end="2375:53"><expr pos:start="2375:21" pos:end="2375:52"><call pos:start="2375:21" pos:end="2375:52"><name pos:start="2375:21" pos:end="2375:30">HAS_OPTION</name><argument_list pos:start="2375:31" pos:end="2375:52">(<argument pos:start="2375:32" pos:end="2375:51"><expr pos:start="2375:32" pos:end="2375:51"><name pos:start="2375:32" pos:end="2375:51">XTENSA_OPTION_DCACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2377:21" pos:end="2377:26">break;</break>



                <default pos:start="2381:17" pos:end="2381:24">default:</default> <comment type="block" pos:start="2381:26" pos:end="2381:37">/*reserved*/</comment>

                    <expr_stmt pos:start="2383:21" pos:end="2383:31"><expr pos:start="2383:21" pos:end="2383:30"><call pos:start="2383:21" pos:end="2383:30"><name pos:start="2383:21" pos:end="2383:28">RESERVED</name><argument_list pos:start="2383:29" pos:end="2383:30">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2385:21" pos:end="2385:26">break;</break>



                </block_content>}</block></switch>

                <break pos:start="2391:17" pos:end="2391:22">break;</break>



            <case pos:start="2395:13" pos:end="2395:20">case <expr pos:start="2395:18" pos:end="2395:19"><literal type="number" pos:start="2395:18" pos:end="2395:19">12</literal></expr>:</case> <comment type="block" pos:start="2395:22" pos:end="2395:29">/*IPFc*/</comment>

                <expr_stmt pos:start="2397:17" pos:end="2397:49"><expr pos:start="2397:17" pos:end="2397:48"><call pos:start="2397:17" pos:end="2397:48"><name pos:start="2397:17" pos:end="2397:26">HAS_OPTION</name><argument_list pos:start="2397:27" pos:end="2397:48">(<argument pos:start="2397:28" pos:end="2397:47"><expr pos:start="2397:28" pos:end="2397:47"><name pos:start="2397:28" pos:end="2397:47">XTENSA_OPTION_ICACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2399:17" pos:end="2399:22">break;</break>



            <case pos:start="2403:13" pos:end="2403:20">case <expr pos:start="2403:18" pos:end="2403:19"><literal type="number" pos:start="2403:18" pos:end="2403:19">13</literal></expr>:</case> <comment type="block" pos:start="2403:22" pos:end="2403:29">/*ICEc*/</comment>

                <switch pos:start="2405:17" pos:end="2437:17">switch <condition pos:start="2405:24" pos:end="2405:28">(<expr pos:start="2405:25" pos:end="2405:27"><name pos:start="2405:25" pos:end="2405:27">OP1</name></expr>)</condition> <block pos:start="2405:30" pos:end="2437:17">{<block_content pos:start="2407:17" pos:end="2435:26">

                <case pos:start="2407:17" pos:end="2407:23">case <expr pos:start="2407:22" pos:end="2407:22"><literal type="number" pos:start="2407:22" pos:end="2407:22">0</literal></expr>:</case> <comment type="block" pos:start="2407:25" pos:end="2407:33">/*IPFLl*/</comment>

                    <expr_stmt pos:start="2409:21" pos:end="2409:64"><expr pos:start="2409:21" pos:end="2409:63"><call pos:start="2409:21" pos:end="2409:63"><name pos:start="2409:21" pos:end="2409:30">HAS_OPTION</name><argument_list pos:start="2409:31" pos:end="2409:63">(<argument pos:start="2409:32" pos:end="2409:62"><expr pos:start="2409:32" pos:end="2409:62"><name pos:start="2409:32" pos:end="2409:62">XTENSA_OPTION_ICACHE_INDEX_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2411:21" pos:end="2411:26">break;</break>



                <case pos:start="2415:17" pos:end="2415:23">case <expr pos:start="2415:22" pos:end="2415:22"><literal type="number" pos:start="2415:22" pos:end="2415:22">2</literal></expr>:</case> <comment type="block" pos:start="2415:25" pos:end="2415:32">/*IHUl*/</comment>

                    <expr_stmt pos:start="2417:21" pos:end="2417:64"><expr pos:start="2417:21" pos:end="2417:63"><call pos:start="2417:21" pos:end="2417:63"><name pos:start="2417:21" pos:end="2417:30">HAS_OPTION</name><argument_list pos:start="2417:31" pos:end="2417:63">(<argument pos:start="2417:32" pos:end="2417:62"><expr pos:start="2417:32" pos:end="2417:62"><name pos:start="2417:32" pos:end="2417:62">XTENSA_OPTION_ICACHE_INDEX_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2419:21" pos:end="2419:26">break;</break>



                <case pos:start="2423:17" pos:end="2423:23">case <expr pos:start="2423:22" pos:end="2423:22"><literal type="number" pos:start="2423:22" pos:end="2423:22">3</literal></expr>:</case> <comment type="block" pos:start="2423:25" pos:end="2423:32">/*IIUl*/</comment>

                    <expr_stmt pos:start="2425:21" pos:end="2425:64"><expr pos:start="2425:21" pos:end="2425:63"><call pos:start="2425:21" pos:end="2425:63"><name pos:start="2425:21" pos:end="2425:30">HAS_OPTION</name><argument_list pos:start="2425:31" pos:end="2425:63">(<argument pos:start="2425:32" pos:end="2425:62"><expr pos:start="2425:32" pos:end="2425:62"><name pos:start="2425:32" pos:end="2425:62">XTENSA_OPTION_ICACHE_INDEX_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2427:21" pos:end="2427:26">break;</break>



                <default pos:start="2431:17" pos:end="2431:24">default:</default> <comment type="block" pos:start="2431:26" pos:end="2431:37">/*reserved*/</comment>

                    <expr_stmt pos:start="2433:21" pos:end="2433:31"><expr pos:start="2433:21" pos:end="2433:30"><call pos:start="2433:21" pos:end="2433:30"><name pos:start="2433:21" pos:end="2433:28">RESERVED</name><argument_list pos:start="2433:29" pos:end="2433:30">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2435:21" pos:end="2435:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2439:17" pos:end="2439:22">break;</break>



            <case pos:start="2443:13" pos:end="2443:20">case <expr pos:start="2443:18" pos:end="2443:19"><literal type="number" pos:start="2443:18" pos:end="2443:19">14</literal></expr>:</case> <comment type="block" pos:start="2443:22" pos:end="2443:29">/*IHIc*/</comment>

                <expr_stmt pos:start="2445:17" pos:end="2445:49"><expr pos:start="2445:17" pos:end="2445:48"><call pos:start="2445:17" pos:end="2445:48"><name pos:start="2445:17" pos:end="2445:26">HAS_OPTION</name><argument_list pos:start="2445:27" pos:end="2445:48">(<argument pos:start="2445:28" pos:end="2445:47"><expr pos:start="2445:28" pos:end="2445:47"><name pos:start="2445:28" pos:end="2445:47">XTENSA_OPTION_ICACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2447:17" pos:end="2447:22">break;</break>



            <case pos:start="2451:13" pos:end="2451:20">case <expr pos:start="2451:18" pos:end="2451:19"><literal type="number" pos:start="2451:18" pos:end="2451:19">15</literal></expr>:</case> <comment type="block" pos:start="2451:22" pos:end="2451:29">/*IIIc*/</comment>

                <expr_stmt pos:start="2453:17" pos:end="2453:49"><expr pos:start="2453:17" pos:end="2453:48"><call pos:start="2453:17" pos:end="2453:48"><name pos:start="2453:17" pos:end="2453:26">HAS_OPTION</name><argument_list pos:start="2453:27" pos:end="2453:48">(<argument pos:start="2453:28" pos:end="2453:47"><expr pos:start="2453:28" pos:end="2453:47"><name pos:start="2453:28" pos:end="2453:47">XTENSA_OPTION_ICACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2455:17" pos:end="2455:22">break;</break>



            <default pos:start="2459:13" pos:end="2459:20">default:</default> <comment type="block" pos:start="2459:22" pos:end="2459:33">/*reserved*/</comment>

                <expr_stmt pos:start="2461:17" pos:end="2461:27"><expr pos:start="2461:17" pos:end="2461:26"><call pos:start="2461:17" pos:end="2461:26"><name pos:start="2461:17" pos:end="2461:24">RESERVED</name><argument_list pos:start="2461:25" pos:end="2461:26">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2463:17" pos:end="2463:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="2467:13" pos:end="2467:18">break;</break>



        <case pos:start="2471:9" pos:end="2471:15">case <expr pos:start="2471:14" pos:end="2471:14"><literal type="number" pos:start="2471:14" pos:end="2471:14">9</literal></expr>:</case> <comment type="block" pos:start="2471:17" pos:end="2471:25">/*L16SI*/</comment>

            <expr_stmt pos:start="2473:13" pos:end="2473:37"><expr pos:start="2473:13" pos:end="2473:36"><call pos:start="2473:13" pos:end="2473:36"><name pos:start="2473:13" pos:end="2473:26">gen_load_store</name><argument_list pos:start="2473:27" pos:end="2473:36">(<argument pos:start="2473:28" pos:end="2473:32"><expr pos:start="2473:28" pos:end="2473:32"><name pos:start="2473:28" pos:end="2473:32">ld16s</name></expr></argument>, <argument pos:start="2473:35" pos:end="2473:35"><expr pos:start="2473:35" pos:end="2473:35"><literal type="number" pos:start="2473:35" pos:end="2473:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2475:13" pos:end="2478:0">break;</break>

<cpp:undef pos:start="2477:1" pos:end="2477:21">#<cpp:directive pos:start="2477:2" pos:end="2477:6">undef</cpp:directive> <name pos:start="2477:8" pos:end="2477:21">gen_load_store</name></cpp:undef>



        <case pos:start="2481:9" pos:end="2481:16">case <expr pos:start="2481:14" pos:end="2481:15"><literal type="number" pos:start="2481:14" pos:end="2481:15">10</literal></expr>:</case> <comment type="block" pos:start="2481:18" pos:end="2481:25">/*MOVI*/</comment>

            <expr_stmt pos:start="2483:13" pos:end="2483:42"><expr pos:start="2483:13" pos:end="2483:41"><call pos:start="2483:13" pos:end="2483:41"><name pos:start="2483:13" pos:end="2483:29">gen_window_check1</name><argument_list pos:start="2483:30" pos:end="2483:41">(<argument pos:start="2483:31" pos:end="2483:32"><expr pos:start="2483:31" pos:end="2483:32"><name pos:start="2483:31" pos:end="2483:32">dc</name></expr></argument>, <argument pos:start="2483:35" pos:end="2483:40"><expr pos:start="2483:35" pos:end="2483:40"><name pos:start="2483:35" pos:end="2483:40">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2485:13" pos:end="2489:55"><expr pos:start="2485:13" pos:end="2489:54"><call pos:start="2485:13" pos:end="2489:54"><name pos:start="2485:13" pos:end="2485:28">tcg_gen_movi_i32</name><argument_list pos:start="2485:29" pos:end="2489:54">(<argument pos:start="2485:30" pos:end="2485:42"><expr pos:start="2485:30" pos:end="2485:42"><name pos:start="2485:30" pos:end="2485:42"><name pos:start="2485:30" pos:end="2485:34">cpu_R</name><index pos:start="2485:35" pos:end="2485:42">[<expr pos:start="2485:36" pos:end="2485:41"><name pos:start="2485:36" pos:end="2485:41">RRI8_T</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="2487:21" pos:end="2489:53"><expr pos:start="2487:21" pos:end="2489:53"><name pos:start="2487:21" pos:end="2487:29">RRI8_IMM8</name> <operator pos:start="2487:31" pos:end="2487:31">|</operator> <operator pos:start="2487:33" pos:end="2487:33">(</operator><name pos:start="2487:34" pos:end="2487:39">RRI8_S</name> <operator pos:start="2487:41" pos:end="2487:42">&lt;&lt;</operator> <literal type="number" pos:start="2487:44" pos:end="2487:44">8</literal><operator pos:start="2487:45" pos:end="2487:45">)</operator> <operator pos:start="2487:47" pos:end="2487:47">|</operator>

                    <operator pos:start="2489:21" pos:end="2489:21">(</operator><ternary pos:start="2489:22" pos:end="2489:52"><condition pos:start="2489:22" pos:end="2489:37"><expr pos:start="2489:22" pos:end="2489:35"><operator pos:start="2489:22" pos:end="2489:22">(</operator><name pos:start="2489:23" pos:end="2489:28">RRI8_S</name> <operator pos:start="2489:30" pos:end="2489:30">&amp;</operator> <literal type="number" pos:start="2489:32" pos:end="2489:34">0x8</literal><operator pos:start="2489:35" pos:end="2489:35">)</operator></expr> ?</condition><then pos:start="2489:39" pos:end="2489:48"> <expr pos:start="2489:39" pos:end="2489:48"><literal type="number" pos:start="2489:39" pos:end="2489:48">0xfffff000</literal></expr> </then><else pos:start="2489:50" pos:end="2489:52">: <expr pos:start="2489:52" pos:end="2489:52"><literal type="number" pos:start="2489:52" pos:end="2489:52">0</literal></expr></else></ternary><operator pos:start="2489:53" pos:end="2489:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2491:13" pos:end="2510:0">break;</break>



<cpp:define pos:start="2495:1" pos:end="2509:19">#<cpp:directive pos:start="2495:2" pos:end="2495:7">define</cpp:directive> <cpp:macro pos:start="2495:9" pos:end="2495:40"><name pos:start="2495:9" pos:end="2495:34">gen_load_store_no_hw_align</name><parameter_list pos:start="2495:35" pos:end="2495:40">(<parameter pos:start="2495:36" pos:end="2495:39"><type pos:start="2495:36" pos:end="2495:39"><name pos:start="2495:36" pos:end="2495:39">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="2495:42" pos:end="2509:19">do { \

            TCGv_i32 addr = tcg_temp_local_new_i32(); \

            gen_window_check2(dc, RRI8_S, RRI8_T); \

            tcg_gen_addi_i32(addr, cpu_R[RRI8_S], RRI8_IMM8 &lt;&lt; 2); \

            gen_load_store_alignment(dc, 2, addr, true); \

            tcg_gen_qemu_##type(cpu_R[RRI8_T], addr, dc-&gt;cring); \

            tcg_temp_free(addr); \

        } while (0)</cpp:value></cpp:define>



        <case pos:start="2513:9" pos:end="2513:16">case <expr pos:start="2513:14" pos:end="2513:15"><literal type="number" pos:start="2513:14" pos:end="2513:15">11</literal></expr>:</case> <comment type="block" pos:start="2513:18" pos:end="2513:27">/*L32AIy*/</comment>

            <expr_stmt pos:start="2515:13" pos:end="2515:49"><expr pos:start="2515:13" pos:end="2515:48"><call pos:start="2515:13" pos:end="2515:48"><name pos:start="2515:13" pos:end="2515:22">HAS_OPTION</name><argument_list pos:start="2515:23" pos:end="2515:48">(<argument pos:start="2515:24" pos:end="2515:47"><expr pos:start="2515:24" pos:end="2515:47"><name pos:start="2515:24" pos:end="2515:47">XTENSA_OPTION_MP_SYNCHRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2517:13" pos:end="2517:46"><expr pos:start="2517:13" pos:end="2517:45"><call pos:start="2517:13" pos:end="2517:45"><name pos:start="2517:13" pos:end="2517:38">gen_load_store_no_hw_align</name><argument_list pos:start="2517:39" pos:end="2517:45">(<argument pos:start="2517:40" pos:end="2517:44"><expr pos:start="2517:40" pos:end="2517:44"><name pos:start="2517:40" pos:end="2517:44">ld32u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="2517:48" pos:end="2517:64">/*TODO acquire?*/</comment>

            <break pos:start="2519:13" pos:end="2519:18">break;</break>



        <case pos:start="2523:9" pos:end="2523:16">case <expr pos:start="2523:14" pos:end="2523:15"><literal type="number" pos:start="2523:14" pos:end="2523:15">12</literal></expr>:</case> <comment type="block" pos:start="2523:18" pos:end="2523:25">/*ADDI*/</comment>

            <expr_stmt pos:start="2525:13" pos:end="2525:50"><expr pos:start="2525:13" pos:end="2525:49"><call pos:start="2525:13" pos:end="2525:49"><name pos:start="2525:13" pos:end="2525:29">gen_window_check2</name><argument_list pos:start="2525:30" pos:end="2525:49">(<argument pos:start="2525:31" pos:end="2525:32"><expr pos:start="2525:31" pos:end="2525:32"><name pos:start="2525:31" pos:end="2525:32">dc</name></expr></argument>, <argument pos:start="2525:35" pos:end="2525:40"><expr pos:start="2525:35" pos:end="2525:40"><name pos:start="2525:35" pos:end="2525:40">RRI8_S</name></expr></argument>, <argument pos:start="2525:43" pos:end="2525:48"><expr pos:start="2525:43" pos:end="2525:48"><name pos:start="2525:43" pos:end="2525:48">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2527:13" pos:end="2527:73"><expr pos:start="2527:13" pos:end="2527:72"><call pos:start="2527:13" pos:end="2527:72"><name pos:start="2527:13" pos:end="2527:28">tcg_gen_addi_i32</name><argument_list pos:start="2527:29" pos:end="2527:72">(<argument pos:start="2527:30" pos:end="2527:42"><expr pos:start="2527:30" pos:end="2527:42"><name pos:start="2527:30" pos:end="2527:42"><name pos:start="2527:30" pos:end="2527:34">cpu_R</name><index pos:start="2527:35" pos:end="2527:42">[<expr pos:start="2527:36" pos:end="2527:41"><name pos:start="2527:36" pos:end="2527:41">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2527:45" pos:end="2527:57"><expr pos:start="2527:45" pos:end="2527:57"><name pos:start="2527:45" pos:end="2527:57"><name pos:start="2527:45" pos:end="2527:49">cpu_R</name><index pos:start="2527:50" pos:end="2527:57">[<expr pos:start="2527:51" pos:end="2527:56"><name pos:start="2527:51" pos:end="2527:56">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2527:60" pos:end="2527:71"><expr pos:start="2527:60" pos:end="2527:71"><name pos:start="2527:60" pos:end="2527:71">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2529:13" pos:end="2529:18">break;</break>



        <case pos:start="2533:9" pos:end="2533:16">case <expr pos:start="2533:14" pos:end="2533:15"><literal type="number" pos:start="2533:14" pos:end="2533:15">13</literal></expr>:</case> <comment type="block" pos:start="2533:18" pos:end="2533:26">/*ADDMI*/</comment>

            <expr_stmt pos:start="2535:13" pos:end="2535:50"><expr pos:start="2535:13" pos:end="2535:49"><call pos:start="2535:13" pos:end="2535:49"><name pos:start="2535:13" pos:end="2535:29">gen_window_check2</name><argument_list pos:start="2535:30" pos:end="2535:49">(<argument pos:start="2535:31" pos:end="2535:32"><expr pos:start="2535:31" pos:end="2535:32"><name pos:start="2535:31" pos:end="2535:32">dc</name></expr></argument>, <argument pos:start="2535:35" pos:end="2535:40"><expr pos:start="2535:35" pos:end="2535:40"><name pos:start="2535:35" pos:end="2535:40">RRI8_S</name></expr></argument>, <argument pos:start="2535:43" pos:end="2535:48"><expr pos:start="2535:43" pos:end="2535:48"><name pos:start="2535:43" pos:end="2535:48">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2537:13" pos:end="2537:78"><expr pos:start="2537:13" pos:end="2537:77"><call pos:start="2537:13" pos:end="2537:77"><name pos:start="2537:13" pos:end="2537:28">tcg_gen_addi_i32</name><argument_list pos:start="2537:29" pos:end="2537:77">(<argument pos:start="2537:30" pos:end="2537:42"><expr pos:start="2537:30" pos:end="2537:42"><name pos:start="2537:30" pos:end="2537:42"><name pos:start="2537:30" pos:end="2537:34">cpu_R</name><index pos:start="2537:35" pos:end="2537:42">[<expr pos:start="2537:36" pos:end="2537:41"><name pos:start="2537:36" pos:end="2537:41">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2537:45" pos:end="2537:57"><expr pos:start="2537:45" pos:end="2537:57"><name pos:start="2537:45" pos:end="2537:57"><name pos:start="2537:45" pos:end="2537:49">cpu_R</name><index pos:start="2537:50" pos:end="2537:57">[<expr pos:start="2537:51" pos:end="2537:56"><name pos:start="2537:51" pos:end="2537:56">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2537:60" pos:end="2537:76"><expr pos:start="2537:60" pos:end="2537:76"><name pos:start="2537:60" pos:end="2537:71">RRI8_IMM8_SE</name> <operator pos:start="2537:73" pos:end="2537:74">&lt;&lt;</operator> <literal type="number" pos:start="2537:76" pos:end="2537:76">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2539:13" pos:end="2539:18">break;</break>



        <case pos:start="2543:9" pos:end="2543:16">case <expr pos:start="2543:14" pos:end="2543:15"><literal type="number" pos:start="2543:14" pos:end="2543:15">14</literal></expr>:</case> <comment type="block" pos:start="2543:18" pos:end="2543:28">/*S32C1Iy*/</comment>

            <expr_stmt pos:start="2545:13" pos:end="2545:56"><expr pos:start="2545:13" pos:end="2545:55"><call pos:start="2545:13" pos:end="2545:55"><name pos:start="2545:13" pos:end="2545:22">HAS_OPTION</name><argument_list pos:start="2545:23" pos:end="2545:55">(<argument pos:start="2545:24" pos:end="2545:54"><expr pos:start="2545:24" pos:end="2545:54"><name pos:start="2545:24" pos:end="2545:54">XTENSA_OPTION_CONDITIONAL_STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2547:13" pos:end="2547:50"><expr pos:start="2547:13" pos:end="2547:49"><call pos:start="2547:13" pos:end="2547:49"><name pos:start="2547:13" pos:end="2547:29">gen_window_check2</name><argument_list pos:start="2547:30" pos:end="2547:49">(<argument pos:start="2547:31" pos:end="2547:32"><expr pos:start="2547:31" pos:end="2547:32"><name pos:start="2547:31" pos:end="2547:32">dc</name></expr></argument>, <argument pos:start="2547:35" pos:end="2547:40"><expr pos:start="2547:35" pos:end="2547:40"><name pos:start="2547:35" pos:end="2547:40">RRI8_S</name></expr></argument>, <argument pos:start="2547:43" pos:end="2547:48"><expr pos:start="2547:43" pos:end="2547:48"><name pos:start="2547:43" pos:end="2547:48">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="2549:13" pos:end="2583:13">{<block_content pos:start="2551:17" pos:end="2581:35">

                <decl_stmt pos:start="2551:17" pos:end="2551:44"><decl pos:start="2551:17" pos:end="2551:43"><type pos:start="2551:17" pos:end="2551:19"><name pos:start="2551:17" pos:end="2551:19">int</name></type> <name pos:start="2551:21" pos:end="2551:25">label</name> <init pos:start="2551:27" pos:end="2551:43">= <expr pos:start="2551:29" pos:end="2551:43"><call pos:start="2551:29" pos:end="2551:43"><name pos:start="2551:29" pos:end="2551:41">gen_new_label</name><argument_list pos:start="2551:42" pos:end="2551:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="2553:17" pos:end="2553:56"><decl pos:start="2553:17" pos:end="2553:55"><type pos:start="2553:17" pos:end="2553:24"><name pos:start="2553:17" pos:end="2553:24">TCGv_i32</name></type> <name pos:start="2553:26" pos:end="2553:28">tmp</name> <init pos:start="2553:30" pos:end="2553:55">= <expr pos:start="2553:32" pos:end="2553:55"><call pos:start="2553:32" pos:end="2553:55"><name pos:start="2553:32" pos:end="2553:53">tcg_temp_local_new_i32</name><argument_list pos:start="2553:54" pos:end="2553:55">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="2555:17" pos:end="2555:57"><decl pos:start="2555:17" pos:end="2555:56"><type pos:start="2555:17" pos:end="2555:24"><name pos:start="2555:17" pos:end="2555:24">TCGv_i32</name></type> <name pos:start="2555:26" pos:end="2555:29">addr</name> <init pos:start="2555:31" pos:end="2555:56">= <expr pos:start="2555:33" pos:end="2555:56"><call pos:start="2555:33" pos:end="2555:56"><name pos:start="2555:33" pos:end="2555:54">tcg_temp_local_new_i32</name><argument_list pos:start="2555:55" pos:end="2555:56">()</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="2559:17" pos:end="2559:52"><expr pos:start="2559:17" pos:end="2559:51"><call pos:start="2559:17" pos:end="2559:51"><name pos:start="2559:17" pos:end="2559:31">tcg_gen_mov_i32</name><argument_list pos:start="2559:32" pos:end="2559:51">(<argument pos:start="2559:33" pos:end="2559:35"><expr pos:start="2559:33" pos:end="2559:35"><name pos:start="2559:33" pos:end="2559:35">tmp</name></expr></argument>, <argument pos:start="2559:38" pos:end="2559:50"><expr pos:start="2559:38" pos:end="2559:50"><name pos:start="2559:38" pos:end="2559:50"><name pos:start="2559:38" pos:end="2559:42">cpu_R</name><index pos:start="2559:43" pos:end="2559:50">[<expr pos:start="2559:44" pos:end="2559:49"><name pos:start="2559:44" pos:end="2559:49">RRI8_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2561:17" pos:end="2561:70"><expr pos:start="2561:17" pos:end="2561:69"><call pos:start="2561:17" pos:end="2561:69"><name pos:start="2561:17" pos:end="2561:32">tcg_gen_addi_i32</name><argument_list pos:start="2561:33" pos:end="2561:69">(<argument pos:start="2561:34" pos:end="2561:37"><expr pos:start="2561:34" pos:end="2561:37"><name pos:start="2561:34" pos:end="2561:37">addr</name></expr></argument>, <argument pos:start="2561:40" pos:end="2561:52"><expr pos:start="2561:40" pos:end="2561:52"><name pos:start="2561:40" pos:end="2561:52"><name pos:start="2561:40" pos:end="2561:44">cpu_R</name><index pos:start="2561:45" pos:end="2561:52">[<expr pos:start="2561:46" pos:end="2561:51"><name pos:start="2561:46" pos:end="2561:51">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2561:55" pos:end="2561:68"><expr pos:start="2561:55" pos:end="2561:68"><name pos:start="2561:55" pos:end="2561:63">RRI8_IMM8</name> <operator pos:start="2561:65" pos:end="2561:66">&lt;&lt;</operator> <literal type="number" pos:start="2561:68" pos:end="2561:68">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2563:17" pos:end="2563:60"><expr pos:start="2563:17" pos:end="2563:59"><call pos:start="2563:17" pos:end="2563:59"><name pos:start="2563:17" pos:end="2563:40">gen_load_store_alignment</name><argument_list pos:start="2563:41" pos:end="2563:59">(<argument pos:start="2563:42" pos:end="2563:43"><expr pos:start="2563:42" pos:end="2563:43"><name pos:start="2563:42" pos:end="2563:43">dc</name></expr></argument>, <argument pos:start="2563:46" pos:end="2563:46"><expr pos:start="2563:46" pos:end="2563:46"><literal type="number" pos:start="2563:46" pos:end="2563:46">2</literal></expr></argument>, <argument pos:start="2563:49" pos:end="2563:52"><expr pos:start="2563:49" pos:end="2563:52"><name pos:start="2563:49" pos:end="2563:52">addr</name></expr></argument>, <argument pos:start="2563:55" pos:end="2563:58"><expr pos:start="2563:55" pos:end="2563:58"><name pos:start="2563:55" pos:end="2563:58">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2565:17" pos:end="2565:67"><expr pos:start="2565:17" pos:end="2565:66"><call pos:start="2565:17" pos:end="2565:66"><name pos:start="2565:17" pos:end="2565:34">tcg_gen_qemu_ld32u</name><argument_list pos:start="2565:35" pos:end="2565:66">(<argument pos:start="2565:36" pos:end="2565:48"><expr pos:start="2565:36" pos:end="2565:48"><name pos:start="2565:36" pos:end="2565:48"><name pos:start="2565:36" pos:end="2565:40">cpu_R</name><index pos:start="2565:41" pos:end="2565:48">[<expr pos:start="2565:42" pos:end="2565:47"><name pos:start="2565:42" pos:end="2565:47">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="2565:51" pos:end="2565:54"><expr pos:start="2565:51" pos:end="2565:54"><name pos:start="2565:51" pos:end="2565:54">addr</name></expr></argument>, <argument pos:start="2565:57" pos:end="2565:65"><expr pos:start="2565:57" pos:end="2565:65"><name pos:start="2565:57" pos:end="2565:65"><name pos:start="2565:57" pos:end="2565:58">dc</name><operator pos:start="2565:59" pos:end="2565:60">-&gt;</operator><name pos:start="2565:61" pos:end="2565:65">cring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2567:17" pos:end="2569:50"><expr pos:start="2567:17" pos:end="2569:49"><call pos:start="2567:17" pos:end="2569:49"><name pos:start="2567:17" pos:end="2567:34">tcg_gen_brcond_i32</name><argument_list pos:start="2567:35" pos:end="2569:49">(<argument pos:start="2567:36" pos:end="2567:46"><expr pos:start="2567:36" pos:end="2567:46"><name pos:start="2567:36" pos:end="2567:46">TCG_COND_NE</name></expr></argument>, <argument pos:start="2567:49" pos:end="2567:61"><expr pos:start="2567:49" pos:end="2567:61"><name pos:start="2567:49" pos:end="2567:61"><name pos:start="2567:49" pos:end="2567:53">cpu_R</name><index pos:start="2567:54" pos:end="2567:61">[<expr pos:start="2567:55" pos:end="2567:60"><name pos:start="2567:55" pos:end="2567:60">RRI8_T</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="2569:25" pos:end="2569:41"><expr pos:start="2569:25" pos:end="2569:41"><name pos:start="2569:25" pos:end="2569:41"><name pos:start="2569:25" pos:end="2569:30">cpu_SR</name><index pos:start="2569:31" pos:end="2569:41">[<expr pos:start="2569:32" pos:end="2569:40"><name pos:start="2569:32" pos:end="2569:40">SCOMPARE1</name></expr>]</index></name></expr></argument>, <argument pos:start="2569:44" pos:end="2569:48"><expr pos:start="2569:44" pos:end="2569:48"><name pos:start="2569:44" pos:end="2569:48">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="2573:17" pos:end="2573:56"><expr pos:start="2573:17" pos:end="2573:55"><call pos:start="2573:17" pos:end="2573:55"><name pos:start="2573:17" pos:end="2573:33">tcg_gen_qemu_st32</name><argument_list pos:start="2573:34" pos:end="2573:55">(<argument pos:start="2573:35" pos:end="2573:37"><expr pos:start="2573:35" pos:end="2573:37"><name pos:start="2573:35" pos:end="2573:37">tmp</name></expr></argument>, <argument pos:start="2573:40" pos:end="2573:43"><expr pos:start="2573:40" pos:end="2573:43"><name pos:start="2573:40" pos:end="2573:43">addr</name></expr></argument>, <argument pos:start="2573:46" pos:end="2573:54"><expr pos:start="2573:46" pos:end="2573:54"><name pos:start="2573:46" pos:end="2573:54"><name pos:start="2573:46" pos:end="2573:47">dc</name><operator pos:start="2573:48" pos:end="2573:49">-&gt;</operator><name pos:start="2573:50" pos:end="2573:54">cring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="2577:17" pos:end="2577:37"><expr pos:start="2577:17" pos:end="2577:36"><call pos:start="2577:17" pos:end="2577:36"><name pos:start="2577:17" pos:end="2577:29">gen_set_label</name><argument_list pos:start="2577:30" pos:end="2577:36">(<argument pos:start="2577:31" pos:end="2577:35"><expr pos:start="2577:31" pos:end="2577:35"><name pos:start="2577:31" pos:end="2577:35">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2579:17" pos:end="2579:36"><expr pos:start="2579:17" pos:end="2579:35"><call pos:start="2579:17" pos:end="2579:35"><name pos:start="2579:17" pos:end="2579:29">tcg_temp_free</name><argument_list pos:start="2579:30" pos:end="2579:35">(<argument pos:start="2579:31" pos:end="2579:34"><expr pos:start="2579:31" pos:end="2579:34"><name pos:start="2579:31" pos:end="2579:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2581:17" pos:end="2581:35"><expr pos:start="2581:17" pos:end="2581:34"><call pos:start="2581:17" pos:end="2581:34"><name pos:start="2581:17" pos:end="2581:29">tcg_temp_free</name><argument_list pos:start="2581:30" pos:end="2581:34">(<argument pos:start="2581:31" pos:end="2581:33"><expr pos:start="2581:31" pos:end="2581:33"><name pos:start="2581:31" pos:end="2581:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="2585:13" pos:end="2585:18">break;</break>



        <case pos:start="2589:9" pos:end="2589:16">case <expr pos:start="2589:14" pos:end="2589:15"><literal type="number" pos:start="2589:14" pos:end="2589:15">15</literal></expr>:</case> <comment type="block" pos:start="2589:18" pos:end="2589:27">/*S32RIy*/</comment>

            <expr_stmt pos:start="2591:13" pos:end="2591:49"><expr pos:start="2591:13" pos:end="2591:48"><call pos:start="2591:13" pos:end="2591:48"><name pos:start="2591:13" pos:end="2591:22">HAS_OPTION</name><argument_list pos:start="2591:23" pos:end="2591:48">(<argument pos:start="2591:24" pos:end="2591:47"><expr pos:start="2591:24" pos:end="2591:47"><name pos:start="2591:24" pos:end="2591:47">XTENSA_OPTION_MP_SYNCHRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2593:13" pos:end="2593:45"><expr pos:start="2593:13" pos:end="2593:44"><call pos:start="2593:13" pos:end="2593:44"><name pos:start="2593:13" pos:end="2593:38">gen_load_store_no_hw_align</name><argument_list pos:start="2593:39" pos:end="2593:44">(<argument pos:start="2593:40" pos:end="2593:43"><expr pos:start="2593:40" pos:end="2593:43"><name pos:start="2593:40" pos:end="2593:43">st32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="2593:47" pos:end="2593:63">/*TODO release?*/</comment>

            <break pos:start="2595:13" pos:end="2598:0">break;</break>

<cpp:undef pos:start="2597:1" pos:end="2597:33">#<cpp:directive pos:start="2597:2" pos:end="2597:6">undef</cpp:directive> <name pos:start="2597:8" pos:end="2597:33">gen_load_store_no_hw_align</name></cpp:undef>



        <default pos:start="2601:9" pos:end="2601:16">default:</default> <comment type="block" pos:start="2601:18" pos:end="2601:29">/*reserved*/</comment>

            <expr_stmt pos:start="2603:13" pos:end="2603:23"><expr pos:start="2603:13" pos:end="2603:22"><call pos:start="2603:13" pos:end="2603:22"><name pos:start="2603:13" pos:end="2603:20">RESERVED</name><argument_list pos:start="2603:21" pos:end="2603:22">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2605:13" pos:end="2605:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="2609:9" pos:end="2609:14">break;</break>



    <case pos:start="2613:5" pos:end="2613:11">case <expr pos:start="2613:10" pos:end="2613:10"><literal type="number" pos:start="2613:10" pos:end="2613:10">3</literal></expr>:</case> <comment type="block" pos:start="2613:13" pos:end="2613:21">/*LSCIp*/</comment>

        <expr_stmt pos:start="2615:9" pos:end="2615:46"><expr pos:start="2615:9" pos:end="2615:45"><call pos:start="2615:9" pos:end="2615:45"><name pos:start="2615:9" pos:end="2615:18">HAS_OPTION</name><argument_list pos:start="2615:19" pos:end="2615:45">(<argument pos:start="2615:20" pos:end="2615:44"><expr pos:start="2615:20" pos:end="2615:44"><name pos:start="2615:20" pos:end="2615:44">XTENSA_OPTION_COPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2617:9" pos:end="2617:14"><expr pos:start="2617:9" pos:end="2617:13"><call pos:start="2617:9" pos:end="2617:13"><name pos:start="2617:9" pos:end="2617:11">TBD</name><argument_list pos:start="2617:12" pos:end="2617:13">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2619:9" pos:end="2619:14">break;</break>



    <case pos:start="2623:5" pos:end="2623:11">case <expr pos:start="2623:10" pos:end="2623:10"><literal type="number" pos:start="2623:10" pos:end="2623:10">4</literal></expr>:</case> <comment type="block" pos:start="2623:13" pos:end="2623:22">/*MAC16d*/</comment>

        <expr_stmt pos:start="2625:9" pos:end="2625:40"><expr pos:start="2625:9" pos:end="2625:39"><call pos:start="2625:9" pos:end="2625:39"><name pos:start="2625:9" pos:end="2625:18">HAS_OPTION</name><argument_list pos:start="2625:19" pos:end="2625:39">(<argument pos:start="2625:20" pos:end="2625:38"><expr pos:start="2625:20" pos:end="2625:38"><name pos:start="2625:20" pos:end="2625:38">XTENSA_OPTION_MAC16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="2627:9" pos:end="2839:9">{<block_content pos:start="2629:13" pos:end="2837:13">

            <enum pos:start="2629:13" pos:end="2641:29">enum <block pos:start="2629:18" pos:end="2641:13">{

                <decl pos:start="2631:17" pos:end="2631:32"><name pos:start="2631:17" pos:end="2631:26">MAC16_UMUL</name> <init pos:start="2631:28" pos:end="2631:32">= <expr pos:start="2631:30" pos:end="2631:32"><literal type="number" pos:start="2631:30" pos:end="2631:32">0x0</literal></expr></init></decl>,

                <decl pos:start="2633:17" pos:end="2633:32"><name pos:start="2633:17" pos:end="2633:25">MAC16_MUL</name>  <init pos:start="2633:28" pos:end="2633:32">= <expr pos:start="2633:30" pos:end="2633:32"><literal type="number" pos:start="2633:30" pos:end="2633:32">0x4</literal></expr></init></decl>,

                <decl pos:start="2635:17" pos:end="2635:32"><name pos:start="2635:17" pos:end="2635:26">MAC16_MULA</name> <init pos:start="2635:28" pos:end="2635:32">= <expr pos:start="2635:30" pos:end="2635:32"><literal type="number" pos:start="2635:30" pos:end="2635:32">0x8</literal></expr></init></decl>,

                <decl pos:start="2637:17" pos:end="2637:32"><name pos:start="2637:17" pos:end="2637:26">MAC16_MULS</name> <init pos:start="2637:28" pos:end="2637:32">= <expr pos:start="2637:30" pos:end="2637:32"><literal type="number" pos:start="2637:30" pos:end="2637:32">0xc</literal></expr></init></decl>,

                <decl pos:start="2639:17" pos:end="2639:32"><name pos:start="2639:17" pos:end="2639:26">MAC16_NONE</name> <init pos:start="2639:28" pos:end="2639:32">= <expr pos:start="2639:30" pos:end="2639:32"><literal type="number" pos:start="2639:30" pos:end="2639:32">0xf</literal></expr></init></decl>,

            }</block> <decl pos:start="2641:15" pos:end="2641:28"><name pos:start="2641:15" pos:end="2641:16">op</name> <init pos:start="2641:18" pos:end="2641:28">= <expr pos:start="2641:20" pos:end="2641:28"><name pos:start="2641:20" pos:end="2641:22">OP1</name> <operator pos:start="2641:24" pos:end="2641:24">&amp;</operator> <literal type="number" pos:start="2641:26" pos:end="2641:28">0xc</literal></expr></init></decl>;</enum>

            <decl_stmt pos:start="2643:13" pos:end="2643:45"><decl pos:start="2643:13" pos:end="2643:44"><type pos:start="2643:13" pos:end="2643:16"><name pos:start="2643:13" pos:end="2643:16">bool</name></type> <name pos:start="2643:18" pos:end="2643:25">is_m1_sr</name> <init pos:start="2643:27" pos:end="2643:44">= <expr pos:start="2643:29" pos:end="2643:44"><operator pos:start="2643:29" pos:end="2643:29">(</operator><name pos:start="2643:30" pos:end="2643:32">OP2</name> <operator pos:start="2643:34" pos:end="2643:34">&amp;</operator> <literal type="number" pos:start="2643:36" pos:end="2643:38">0x3</literal><operator pos:start="2643:39" pos:end="2643:39">)</operator> <operator pos:start="2643:41" pos:end="2643:42">==</operator> <literal type="number" pos:start="2643:44" pos:end="2643:44">2</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2645:13" pos:end="2645:45"><decl pos:start="2645:13" pos:end="2645:44"><type pos:start="2645:13" pos:end="2645:16"><name pos:start="2645:13" pos:end="2645:16">bool</name></type> <name pos:start="2645:18" pos:end="2645:25">is_m2_sr</name> <init pos:start="2645:27" pos:end="2645:44">= <expr pos:start="2645:29" pos:end="2645:44"><operator pos:start="2645:29" pos:end="2645:29">(</operator><name pos:start="2645:30" pos:end="2645:32">OP2</name> <operator pos:start="2645:34" pos:end="2645:34">&amp;</operator> <literal type="number" pos:start="2645:36" pos:end="2645:38">0xc</literal><operator pos:start="2645:39" pos:end="2645:39">)</operator> <operator pos:start="2645:41" pos:end="2645:42">==</operator> <literal type="number" pos:start="2645:44" pos:end="2645:44">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2647:13" pos:end="2647:35"><decl pos:start="2647:13" pos:end="2647:34"><type pos:start="2647:13" pos:end="2647:20"><name pos:start="2647:13" pos:end="2647:20">uint32_t</name></type> <name pos:start="2647:22" pos:end="2647:30">ld_offset</name> <init pos:start="2647:32" pos:end="2647:34">= <expr pos:start="2647:34" pos:end="2647:34"><literal type="number" pos:start="2647:34" pos:end="2647:34">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="2651:13" pos:end="2655:13"><if pos:start="2651:13" pos:end="2655:13">if <condition pos:start="2651:16" pos:end="2651:24">(<expr pos:start="2651:17" pos:end="2651:23"><name pos:start="2651:17" pos:end="2651:19">OP2</name> <operator pos:start="2651:21" pos:end="2651:21">&gt;</operator> <literal type="number" pos:start="2651:23" pos:end="2651:23">9</literal></expr>)</condition> <block pos:start="2651:26" pos:end="2655:13">{<block_content pos:start="2653:17" pos:end="2653:27">

                <expr_stmt pos:start="2653:17" pos:end="2653:27"><expr pos:start="2653:17" pos:end="2653:26"><call pos:start="2653:17" pos:end="2653:26"><name pos:start="2653:17" pos:end="2653:24">RESERVED</name><argument_list pos:start="2653:25" pos:end="2653:26">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="2659:13" pos:end="2701:13">switch <condition pos:start="2659:20" pos:end="2659:28">(<expr pos:start="2659:21" pos:end="2659:27"><name pos:start="2659:21" pos:end="2659:23">OP2</name> <operator pos:start="2659:25" pos:end="2659:25">&amp;</operator> <literal type="number" pos:start="2659:27" pos:end="2659:27">2</literal></expr>)</condition> <block pos:start="2659:30" pos:end="2701:13">{<block_content pos:start="2661:13" pos:end="2699:22">

            <case pos:start="2661:13" pos:end="2661:19">case <expr pos:start="2661:18" pos:end="2661:18"><literal type="number" pos:start="2661:18" pos:end="2661:18">0</literal></expr>:</case> <comment type="block" pos:start="2661:21" pos:end="2661:35">/*MACI?/MACC?*/</comment>

                <expr_stmt pos:start="2663:17" pos:end="2663:32"><expr pos:start="2663:17" pos:end="2663:31"><name pos:start="2663:17" pos:end="2663:24">is_m1_sr</name> <operator pos:start="2663:26" pos:end="2663:26">=</operator> <name pos:start="2663:28" pos:end="2663:31">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2665:17" pos:end="2665:47"><expr pos:start="2665:17" pos:end="2665:46"><name pos:start="2665:17" pos:end="2665:25">ld_offset</name> <operator pos:start="2665:27" pos:end="2665:27">=</operator> <ternary pos:start="2665:29" pos:end="2665:46"><condition pos:start="2665:29" pos:end="2665:39"><expr pos:start="2665:29" pos:end="2665:37"><operator pos:start="2665:29" pos:end="2665:29">(</operator><name pos:start="2665:30" pos:end="2665:32">OP2</name> <operator pos:start="2665:34" pos:end="2665:34">&amp;</operator> <literal type="number" pos:start="2665:36" pos:end="2665:36">1</literal><operator pos:start="2665:37" pos:end="2665:37">)</operator></expr> ?</condition><then pos:start="2665:41" pos:end="2665:42"> <expr pos:start="2665:41" pos:end="2665:42"><operator pos:start="2665:41" pos:end="2665:41">-</operator><literal type="number" pos:start="2665:42" pos:end="2665:42">4</literal></expr> </then><else pos:start="2665:44" pos:end="2665:46">: <expr pos:start="2665:46" pos:end="2665:46"><literal type="number" pos:start="2665:46" pos:end="2665:46">4</literal></expr></else></ternary></expr>;</expr_stmt>



                <if_stmt pos:start="2669:17" pos:end="2685:17"><if pos:start="2669:17" pos:end="2681:17">if <condition pos:start="2669:20" pos:end="2669:29">(<expr pos:start="2669:21" pos:end="2669:28"><name pos:start="2669:21" pos:end="2669:23">OP2</name> <operator pos:start="2669:25" pos:end="2669:26">&gt;=</operator> <literal type="number" pos:start="2669:28" pos:end="2669:28">8</literal></expr>)</condition> <block pos:start="2669:31" pos:end="2681:17">{<block_content pos:start="2671:21" pos:end="2679:21"> <comment type="block" pos:start="2669:33" pos:end="2669:45">/*MACI/MACC*/</comment>

                    <if_stmt pos:start="2671:21" pos:end="2679:21"><if pos:start="2671:21" pos:end="2675:21">if <condition pos:start="2671:24" pos:end="2671:33">(<expr pos:start="2671:25" pos:end="2671:32"><name pos:start="2671:25" pos:end="2671:27">OP1</name> <operator pos:start="2671:29" pos:end="2671:30">==</operator> <literal type="number" pos:start="2671:32" pos:end="2671:32">0</literal></expr>)</condition> <block pos:start="2671:35" pos:end="2675:21">{<block_content pos:start="2673:25" pos:end="2673:40"> <comment type="block" pos:start="2671:37" pos:end="2671:51">/*LDINC/LDDEC*/</comment>

                        <expr_stmt pos:start="2673:25" pos:end="2673:40"><expr pos:start="2673:25" pos:end="2673:39"><name pos:start="2673:25" pos:end="2673:26">op</name> <operator pos:start="2673:28" pos:end="2673:28">=</operator> <name pos:start="2673:30" pos:end="2673:39">MAC16_NONE</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2675:23" pos:end="2679:21">else <block pos:start="2675:28" pos:end="2679:21">{<block_content pos:start="2677:25" pos:end="2677:35">

                        <expr_stmt pos:start="2677:25" pos:end="2677:35"><expr pos:start="2677:25" pos:end="2677:34"><call pos:start="2677:25" pos:end="2677:34"><name pos:start="2677:25" pos:end="2677:32">RESERVED</name><argument_list pos:start="2677:33" pos:end="2677:34">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2681:19" pos:end="2685:17">else if <condition pos:start="2681:27" pos:end="2681:44">(<expr pos:start="2681:28" pos:end="2681:43"><name pos:start="2681:28" pos:end="2681:29">op</name> <operator pos:start="2681:31" pos:end="2681:32">!=</operator> <name pos:start="2681:34" pos:end="2681:43">MAC16_MULA</name></expr>)</condition> <block pos:start="2681:46" pos:end="2685:17">{<block_content pos:start="2683:21" pos:end="2683:31"> <comment type="block" pos:start="2681:48" pos:end="2681:71">/*MULA.*.*.LDINC/LDDEC*/</comment>

                    <expr_stmt pos:start="2683:21" pos:end="2683:31"><expr pos:start="2683:21" pos:end="2683:30"><call pos:start="2683:21" pos:end="2683:30"><name pos:start="2683:21" pos:end="2683:28">RESERVED</name><argument_list pos:start="2683:29" pos:end="2683:30">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="2687:17" pos:end="2687:22">break;</break>



            <case pos:start="2691:13" pos:end="2691:19">case <expr pos:start="2691:18" pos:end="2691:18"><literal type="number" pos:start="2691:18" pos:end="2691:18">2</literal></expr>:</case> <comment type="block" pos:start="2691:21" pos:end="2691:35">/*MACD?/MACA?*/</comment>

                <if_stmt pos:start="2693:17" pos:end="2697:17"><if pos:start="2693:17" pos:end="2697:17">if <condition pos:start="2693:20" pos:end="2693:49">(<expr pos:start="2693:21" pos:end="2693:48"><name pos:start="2693:21" pos:end="2693:22">op</name> <operator pos:start="2693:24" pos:end="2693:25">==</operator> <name pos:start="2693:27" pos:end="2693:36">MAC16_UMUL</name> <operator pos:start="2693:38" pos:end="2693:39">&amp;&amp;</operator> <name pos:start="2693:41" pos:end="2693:43">OP2</name> <operator pos:start="2693:45" pos:end="2693:46">!=</operator> <literal type="number" pos:start="2693:48" pos:end="2693:48">7</literal></expr>)</condition> <block pos:start="2693:51" pos:end="2697:17">{<block_content pos:start="2695:21" pos:end="2695:31"> <comment type="block" pos:start="2693:53" pos:end="2693:74">/*UMUL only in MACAA*/</comment>

                    <expr_stmt pos:start="2695:21" pos:end="2695:31"><expr pos:start="2695:21" pos:end="2695:30"><call pos:start="2695:21" pos:end="2695:30"><name pos:start="2695:21" pos:end="2695:28">RESERVED</name><argument_list pos:start="2695:29" pos:end="2695:30">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="2699:17" pos:end="2699:22">break;</break>

            </block_content>}</block></switch>



            <if_stmt pos:start="2705:13" pos:end="2719:13"><if pos:start="2705:13" pos:end="2719:13">if <condition pos:start="2705:16" pos:end="2705:33">(<expr pos:start="2705:17" pos:end="2705:32"><name pos:start="2705:17" pos:end="2705:18">op</name> <operator pos:start="2705:20" pos:end="2705:21">!=</operator> <name pos:start="2705:23" pos:end="2705:32">MAC16_NONE</name></expr>)</condition> <block pos:start="2705:35" pos:end="2719:13">{<block_content pos:start="2707:17" pos:end="2717:17">

                <if_stmt pos:start="2707:17" pos:end="2711:17"><if pos:start="2707:17" pos:end="2711:17">if <condition pos:start="2707:20" pos:end="2707:30">(<expr pos:start="2707:21" pos:end="2707:29"><operator pos:start="2707:21" pos:end="2707:21">!</operator><name pos:start="2707:22" pos:end="2707:29">is_m1_sr</name></expr>)</condition> <block pos:start="2707:32" pos:end="2711:17">{<block_content pos:start="2709:21" pos:end="2709:49">

                    <expr_stmt pos:start="2709:21" pos:end="2709:49"><expr pos:start="2709:21" pos:end="2709:48"><call pos:start="2709:21" pos:end="2709:48"><name pos:start="2709:21" pos:end="2709:37">gen_window_check1</name><argument_list pos:start="2709:38" pos:end="2709:48">(<argument pos:start="2709:39" pos:end="2709:40"><expr pos:start="2709:39" pos:end="2709:40"><name pos:start="2709:39" pos:end="2709:40">dc</name></expr></argument>, <argument pos:start="2709:43" pos:end="2709:47"><expr pos:start="2709:43" pos:end="2709:47"><name pos:start="2709:43" pos:end="2709:47">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2713:17" pos:end="2717:17"><if pos:start="2713:17" pos:end="2717:17">if <condition pos:start="2713:20" pos:end="2713:30">(<expr pos:start="2713:21" pos:end="2713:29"><operator pos:start="2713:21" pos:end="2713:21">!</operator><name pos:start="2713:22" pos:end="2713:29">is_m2_sr</name></expr>)</condition> <block pos:start="2713:32" pos:end="2717:17">{<block_content pos:start="2715:21" pos:end="2715:49">

                    <expr_stmt pos:start="2715:21" pos:end="2715:49"><expr pos:start="2715:21" pos:end="2715:48"><call pos:start="2715:21" pos:end="2715:48"><name pos:start="2715:21" pos:end="2715:37">gen_window_check1</name><argument_list pos:start="2715:38" pos:end="2715:48">(<argument pos:start="2715:39" pos:end="2715:40"><expr pos:start="2715:39" pos:end="2715:40"><name pos:start="2715:39" pos:end="2715:40">dc</name></expr></argument>, <argument pos:start="2715:43" pos:end="2715:47"><expr pos:start="2715:43" pos:end="2715:47"><name pos:start="2715:43" pos:end="2715:47">RRR_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <block pos:start="2723:13" pos:end="2837:13">{<block_content pos:start="2725:17" pos:end="2835:37">

                <decl_stmt pos:start="2725:17" pos:end="2725:52"><decl pos:start="2725:17" pos:end="2725:51"><type pos:start="2725:17" pos:end="2725:24"><name pos:start="2725:17" pos:end="2725:24">TCGv_i32</name></type> <name pos:start="2725:26" pos:end="2725:30">vaddr</name> <init pos:start="2725:32" pos:end="2725:51">= <expr pos:start="2725:34" pos:end="2725:51"><call pos:start="2725:34" pos:end="2725:51"><name pos:start="2725:34" pos:end="2725:49">tcg_temp_new_i32</name><argument_list pos:start="2725:50" pos:end="2725:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="2727:17" pos:end="2727:52"><decl pos:start="2727:17" pos:end="2727:51"><type pos:start="2727:17" pos:end="2727:24"><name pos:start="2727:17" pos:end="2727:24">TCGv_i32</name></type> <name pos:start="2727:26" pos:end="2727:30">mem32</name> <init pos:start="2727:32" pos:end="2727:51">= <expr pos:start="2727:34" pos:end="2727:51"><call pos:start="2727:34" pos:end="2727:51"><name pos:start="2727:34" pos:end="2727:49">tcg_temp_new_i32</name><argument_list pos:start="2727:50" pos:end="2727:51">()</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="2731:17" pos:end="2741:17"><if pos:start="2731:17" pos:end="2741:17">if <condition pos:start="2731:20" pos:end="2731:30">(<expr pos:start="2731:21" pos:end="2731:29"><name pos:start="2731:21" pos:end="2731:29">ld_offset</name></expr>)</condition> <block pos:start="2731:32" pos:end="2741:17">{<block_content pos:start="2733:21" pos:end="2739:64">

                    <expr_stmt pos:start="2733:21" pos:end="2733:49"><expr pos:start="2733:21" pos:end="2733:48"><call pos:start="2733:21" pos:end="2733:48"><name pos:start="2733:21" pos:end="2733:37">gen_window_check1</name><argument_list pos:start="2733:38" pos:end="2733:48">(<argument pos:start="2733:39" pos:end="2733:40"><expr pos:start="2733:39" pos:end="2733:40"><name pos:start="2733:39" pos:end="2733:40">dc</name></expr></argument>, <argument pos:start="2733:43" pos:end="2733:47"><expr pos:start="2733:43" pos:end="2733:47"><name pos:start="2733:43" pos:end="2733:47">RRR_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2735:21" pos:end="2735:69"><expr pos:start="2735:21" pos:end="2735:68"><call pos:start="2735:21" pos:end="2735:68"><name pos:start="2735:21" pos:end="2735:36">tcg_gen_addi_i32</name><argument_list pos:start="2735:37" pos:end="2735:68">(<argument pos:start="2735:38" pos:end="2735:42"><expr pos:start="2735:38" pos:end="2735:42"><name pos:start="2735:38" pos:end="2735:42">vaddr</name></expr></argument>, <argument pos:start="2735:45" pos:end="2735:56"><expr pos:start="2735:45" pos:end="2735:56"><name pos:start="2735:45" pos:end="2735:56"><name pos:start="2735:45" pos:end="2735:49">cpu_R</name><index pos:start="2735:50" pos:end="2735:56">[<expr pos:start="2735:51" pos:end="2735:55"><name pos:start="2735:51" pos:end="2735:55">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2735:59" pos:end="2735:67"><expr pos:start="2735:59" pos:end="2735:67"><name pos:start="2735:59" pos:end="2735:67">ld_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2737:21" pos:end="2737:66"><expr pos:start="2737:21" pos:end="2737:65"><call pos:start="2737:21" pos:end="2737:65"><name pos:start="2737:21" pos:end="2737:44">gen_load_store_alignment</name><argument_list pos:start="2737:45" pos:end="2737:65">(<argument pos:start="2737:46" pos:end="2737:47"><expr pos:start="2737:46" pos:end="2737:47"><name pos:start="2737:46" pos:end="2737:47">dc</name></expr></argument>, <argument pos:start="2737:50" pos:end="2737:50"><expr pos:start="2737:50" pos:end="2737:50"><literal type="number" pos:start="2737:50" pos:end="2737:50">2</literal></expr></argument>, <argument pos:start="2737:53" pos:end="2737:57"><expr pos:start="2737:53" pos:end="2737:57"><name pos:start="2737:53" pos:end="2737:57">vaddr</name></expr></argument>, <argument pos:start="2737:60" pos:end="2737:64"><expr pos:start="2737:60" pos:end="2737:64"><name pos:start="2737:60" pos:end="2737:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2739:21" pos:end="2739:64"><expr pos:start="2739:21" pos:end="2739:63"><call pos:start="2739:21" pos:end="2739:63"><name pos:start="2739:21" pos:end="2739:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="2739:39" pos:end="2739:63">(<argument pos:start="2739:40" pos:end="2739:44"><expr pos:start="2739:40" pos:end="2739:44"><name pos:start="2739:40" pos:end="2739:44">mem32</name></expr></argument>, <argument pos:start="2739:47" pos:end="2739:51"><expr pos:start="2739:47" pos:end="2739:51"><name pos:start="2739:47" pos:end="2739:51">vaddr</name></expr></argument>, <argument pos:start="2739:54" pos:end="2739:62"><expr pos:start="2739:54" pos:end="2739:62"><name pos:start="2739:54" pos:end="2739:62"><name pos:start="2739:54" pos:end="2739:55">dc</name><operator pos:start="2739:56" pos:end="2739:57">-&gt;</operator><name pos:start="2739:58" pos:end="2739:62">cring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2743:17" pos:end="2823:17"><if pos:start="2743:17" pos:end="2823:17">if <condition pos:start="2743:20" pos:end="2743:37">(<expr pos:start="2743:21" pos:end="2743:36"><name pos:start="2743:21" pos:end="2743:22">op</name> <operator pos:start="2743:24" pos:end="2743:25">!=</operator> <name pos:start="2743:27" pos:end="2743:36">MAC16_NONE</name></expr>)</condition> <block pos:start="2743:39" pos:end="2823:17">{<block_content pos:start="2745:21" pos:end="2821:38">

                    <decl_stmt pos:start="2745:21" pos:end="2749:55"><decl pos:start="2745:21" pos:end="2749:54"><type pos:start="2745:21" pos:end="2745:28"><name pos:start="2745:21" pos:end="2745:28">TCGv_i32</name></type> <name pos:start="2745:30" pos:end="2745:31">m1</name> <init pos:start="2745:33" pos:end="2749:54">= <expr pos:start="2745:35" pos:end="2749:54"><call pos:start="2745:35" pos:end="2749:54"><name pos:start="2745:35" pos:end="2745:45">gen_mac16_m</name><argument_list pos:start="2745:46" pos:end="2749:54">(

                            <argument pos:start="2747:29" pos:end="2747:72"><expr pos:start="2747:29" pos:end="2747:72"><ternary pos:start="2747:29" pos:end="2747:72"><condition pos:start="2747:29" pos:end="2747:38"><expr pos:start="2747:29" pos:end="2747:36"><name pos:start="2747:29" pos:end="2747:36">is_m1_sr</name></expr> ?</condition><then pos:start="2747:40" pos:end="2747:57"> <expr pos:start="2747:40" pos:end="2747:57"><name pos:start="2747:40" pos:end="2747:57"><name pos:start="2747:40" pos:end="2747:45">cpu_SR</name><index pos:start="2747:46" pos:end="2747:57">[<expr pos:start="2747:47" pos:end="2747:56"><name pos:start="2747:47" pos:end="2747:48">MR</name> <operator pos:start="2747:50" pos:end="2747:50">+</operator> <name pos:start="2747:52" pos:end="2747:56">RRR_X</name></expr>]</index></name></expr> </then><else pos:start="2747:59" pos:end="2747:72">: <expr pos:start="2747:61" pos:end="2747:72"><name pos:start="2747:61" pos:end="2747:72"><name pos:start="2747:61" pos:end="2747:65">cpu_R</name><index pos:start="2747:66" pos:end="2747:72">[<expr pos:start="2747:67" pos:end="2747:71"><name pos:start="2747:67" pos:end="2747:71">RRR_S</name></expr>]</index></name></expr></else></ternary></expr></argument>,

                            <argument pos:start="2749:29" pos:end="2749:35"><expr pos:start="2749:29" pos:end="2749:35"><name pos:start="2749:29" pos:end="2749:31">OP1</name> <operator pos:start="2749:33" pos:end="2749:33">&amp;</operator> <literal type="number" pos:start="2749:35" pos:end="2749:35">1</literal></expr></argument>, <argument pos:start="2749:38" pos:end="2749:53"><expr pos:start="2749:38" pos:end="2749:53"><name pos:start="2749:38" pos:end="2749:39">op</name> <operator pos:start="2749:41" pos:end="2749:42">==</operator> <name pos:start="2749:44" pos:end="2749:53">MAC16_UMUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="2751:21" pos:end="2755:55"><decl pos:start="2751:21" pos:end="2755:54"><type pos:start="2751:21" pos:end="2751:28"><name pos:start="2751:21" pos:end="2751:28">TCGv_i32</name></type> <name pos:start="2751:30" pos:end="2751:31">m2</name> <init pos:start="2751:33" pos:end="2755:54">= <expr pos:start="2751:35" pos:end="2755:54"><call pos:start="2751:35" pos:end="2755:54"><name pos:start="2751:35" pos:end="2751:45">gen_mac16_m</name><argument_list pos:start="2751:46" pos:end="2755:54">(

                            <argument pos:start="2753:29" pos:end="2753:76"><expr pos:start="2753:29" pos:end="2753:76"><ternary pos:start="2753:29" pos:end="2753:76"><condition pos:start="2753:29" pos:end="2753:38"><expr pos:start="2753:29" pos:end="2753:36"><name pos:start="2753:29" pos:end="2753:36">is_m2_sr</name></expr> ?</condition><then pos:start="2753:40" pos:end="2753:61"> <expr pos:start="2753:40" pos:end="2753:61"><name pos:start="2753:40" pos:end="2753:61"><name pos:start="2753:40" pos:end="2753:45">cpu_SR</name><index pos:start="2753:46" pos:end="2753:61">[<expr pos:start="2753:47" pos:end="2753:60"><name pos:start="2753:47" pos:end="2753:48">MR</name> <operator pos:start="2753:50" pos:end="2753:50">+</operator> <literal type="number" pos:start="2753:52" pos:end="2753:54">2</literal> <operator pos:start="2753:54" pos:end="2753:54">+</operator> <name pos:start="2753:56" pos:end="2753:60">RRR_Y</name></expr>]</index></name></expr> </then><else pos:start="2753:63" pos:end="2753:76">: <expr pos:start="2753:65" pos:end="2753:76"><name pos:start="2753:65" pos:end="2753:76"><name pos:start="2753:65" pos:end="2753:69">cpu_R</name><index pos:start="2753:70" pos:end="2753:76">[<expr pos:start="2753:71" pos:end="2753:75"><name pos:start="2753:71" pos:end="2753:75">RRR_T</name></expr>]</index></name></expr></else></ternary></expr></argument>,

                            <argument pos:start="2755:29" pos:end="2755:35"><expr pos:start="2755:29" pos:end="2755:35"><name pos:start="2755:29" pos:end="2755:31">OP1</name> <operator pos:start="2755:33" pos:end="2755:33">&amp;</operator> <literal type="number" pos:start="2755:35" pos:end="2755:35">2</literal></expr></argument>, <argument pos:start="2755:38" pos:end="2755:53"><expr pos:start="2755:38" pos:end="2755:53"><name pos:start="2755:38" pos:end="2755:39">op</name> <operator pos:start="2755:41" pos:end="2755:42">==</operator> <name pos:start="2755:44" pos:end="2755:53">MAC16_UMUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="2759:21" pos:end="2817:21"><if pos:start="2759:21" pos:end="2773:21">if <condition pos:start="2759:24" pos:end="2759:60">(<expr pos:start="2759:25" pos:end="2759:59"><name pos:start="2759:25" pos:end="2759:26">op</name> <operator pos:start="2759:28" pos:end="2759:29">==</operator> <name pos:start="2759:31" pos:end="2759:39">MAC16_MUL</name> <operator pos:start="2759:41" pos:end="2759:42">||</operator> <name pos:start="2759:44" pos:end="2759:45">op</name> <operator pos:start="2759:47" pos:end="2759:48">==</operator> <name pos:start="2759:50" pos:end="2759:59">MAC16_UMUL</name></expr>)</condition> <block pos:start="2759:62" pos:end="2773:21">{<block_content pos:start="2761:25" pos:end="2771:25">

                        <expr_stmt pos:start="2761:25" pos:end="2761:63"><expr pos:start="2761:25" pos:end="2761:62"><call pos:start="2761:25" pos:end="2761:62"><name pos:start="2761:25" pos:end="2761:39">tcg_gen_mul_i32</name><argument_list pos:start="2761:40" pos:end="2761:62">(<argument pos:start="2761:41" pos:end="2761:53"><expr pos:start="2761:41" pos:end="2761:53"><name pos:start="2761:41" pos:end="2761:53"><name pos:start="2761:41" pos:end="2761:46">cpu_SR</name><index pos:start="2761:47" pos:end="2761:53">[<expr pos:start="2761:48" pos:end="2761:52"><name pos:start="2761:48" pos:end="2761:52">ACCLO</name></expr>]</index></name></expr></argument>, <argument pos:start="2761:56" pos:end="2761:57"><expr pos:start="2761:56" pos:end="2761:57"><name pos:start="2761:56" pos:end="2761:57">m1</name></expr></argument>, <argument pos:start="2761:60" pos:end="2761:61"><expr pos:start="2761:60" pos:end="2761:61"><name pos:start="2761:60" pos:end="2761:61">m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2763:25" pos:end="2771:25"><if pos:start="2763:25" pos:end="2767:25">if <condition pos:start="2763:28" pos:end="2763:45">(<expr pos:start="2763:29" pos:end="2763:44"><name pos:start="2763:29" pos:end="2763:30">op</name> <operator pos:start="2763:32" pos:end="2763:33">==</operator> <name pos:start="2763:35" pos:end="2763:44">MAC16_UMUL</name></expr>)</condition> <block pos:start="2763:47" pos:end="2767:25">{<block_content pos:start="2765:29" pos:end="2765:63">

                            <expr_stmt pos:start="2765:29" pos:end="2765:63"><expr pos:start="2765:29" pos:end="2765:62"><call pos:start="2765:29" pos:end="2765:62"><name pos:start="2765:29" pos:end="2765:44">tcg_gen_movi_i32</name><argument_list pos:start="2765:45" pos:end="2765:62">(<argument pos:start="2765:46" pos:end="2765:58"><expr pos:start="2765:46" pos:end="2765:58"><name pos:start="2765:46" pos:end="2765:58"><name pos:start="2765:46" pos:end="2765:51">cpu_SR</name><index pos:start="2765:52" pos:end="2765:58">[<expr pos:start="2765:53" pos:end="2765:57"><name pos:start="2765:53" pos:end="2765:57">ACCHI</name></expr>]</index></name></expr></argument>, <argument pos:start="2765:61" pos:end="2765:61"><expr pos:start="2765:61" pos:end="2765:61"><literal type="number" pos:start="2765:61" pos:end="2765:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2767:27" pos:end="2771:25">else <block pos:start="2767:32" pos:end="2771:25">{<block_content pos:start="2769:29" pos:end="2769:79">

                            <expr_stmt pos:start="2769:29" pos:end="2769:79"><expr pos:start="2769:29" pos:end="2769:78"><call pos:start="2769:29" pos:end="2769:78"><name pos:start="2769:29" pos:end="2769:44">tcg_gen_sari_i32</name><argument_list pos:start="2769:45" pos:end="2769:78">(<argument pos:start="2769:46" pos:end="2769:58"><expr pos:start="2769:46" pos:end="2769:58"><name pos:start="2769:46" pos:end="2769:58"><name pos:start="2769:46" pos:end="2769:51">cpu_SR</name><index pos:start="2769:52" pos:end="2769:58">[<expr pos:start="2769:53" pos:end="2769:57"><name pos:start="2769:53" pos:end="2769:57">ACCHI</name></expr>]</index></name></expr></argument>, <argument pos:start="2769:61" pos:end="2769:73"><expr pos:start="2769:61" pos:end="2769:73"><name pos:start="2769:61" pos:end="2769:73"><name pos:start="2769:61" pos:end="2769:66">cpu_SR</name><index pos:start="2769:67" pos:end="2769:73">[<expr pos:start="2769:68" pos:end="2769:72"><name pos:start="2769:68" pos:end="2769:72">ACCLO</name></expr>]</index></name></expr></argument>, <argument pos:start="2769:76" pos:end="2769:77"><expr pos:start="2769:76" pos:end="2769:77"><literal type="number" pos:start="2769:76" pos:end="2769:77">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2773:23" pos:end="2817:21">else <block pos:start="2773:28" pos:end="2817:21">{<block_content pos:start="2775:25" pos:end="2815:47">

                        <decl_stmt pos:start="2775:25" pos:end="2775:58"><decl pos:start="2775:25" pos:end="2775:57"><type pos:start="2775:25" pos:end="2775:32"><name pos:start="2775:25" pos:end="2775:32">TCGv_i32</name></type> <name pos:start="2775:34" pos:end="2775:36">res</name> <init pos:start="2775:38" pos:end="2775:57">= <expr pos:start="2775:40" pos:end="2775:57"><call pos:start="2775:40" pos:end="2775:57"><name pos:start="2775:40" pos:end="2775:55">tcg_temp_new_i32</name><argument_list pos:start="2775:56" pos:end="2775:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="2777:25" pos:end="2777:60"><decl pos:start="2777:25" pos:end="2777:59"><type pos:start="2777:25" pos:end="2777:32"><name pos:start="2777:25" pos:end="2777:32">TCGv_i64</name></type> <name pos:start="2777:34" pos:end="2777:38">res64</name> <init pos:start="2777:40" pos:end="2777:59">= <expr pos:start="2777:42" pos:end="2777:59"><call pos:start="2777:42" pos:end="2777:59"><name pos:start="2777:42" pos:end="2777:57">tcg_temp_new_i64</name><argument_list pos:start="2777:58" pos:end="2777:59">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="2779:25" pos:end="2779:58"><decl pos:start="2779:25" pos:end="2779:57"><type pos:start="2779:25" pos:end="2779:32"><name pos:start="2779:25" pos:end="2779:32">TCGv_i64</name></type> <name pos:start="2779:34" pos:end="2779:36">tmp</name> <init pos:start="2779:38" pos:end="2779:57">= <expr pos:start="2779:40" pos:end="2779:57"><call pos:start="2779:40" pos:end="2779:57"><name pos:start="2779:40" pos:end="2779:55">tcg_temp_new_i64</name><argument_list pos:start="2779:56" pos:end="2779:57">()</argument_list></call></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="2783:25" pos:end="2783:53"><expr pos:start="2783:25" pos:end="2783:52"><call pos:start="2783:25" pos:end="2783:52"><name pos:start="2783:25" pos:end="2783:39">tcg_gen_mul_i32</name><argument_list pos:start="2783:40" pos:end="2783:52">(<argument pos:start="2783:41" pos:end="2783:43"><expr pos:start="2783:41" pos:end="2783:43"><name pos:start="2783:41" pos:end="2783:43">res</name></expr></argument>, <argument pos:start="2783:46" pos:end="2783:47"><expr pos:start="2783:46" pos:end="2783:47"><name pos:start="2783:46" pos:end="2783:47">m1</name></expr></argument>, <argument pos:start="2783:50" pos:end="2783:51"><expr pos:start="2783:50" pos:end="2783:51"><name pos:start="2783:50" pos:end="2783:51">m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2785:25" pos:end="2785:56"><expr pos:start="2785:25" pos:end="2785:55"><call pos:start="2785:25" pos:end="2785:55"><name pos:start="2785:25" pos:end="2785:43">tcg_gen_ext_i32_i64</name><argument_list pos:start="2785:44" pos:end="2785:55">(<argument pos:start="2785:45" pos:end="2785:49"><expr pos:start="2785:45" pos:end="2785:49"><name pos:start="2785:45" pos:end="2785:49">res64</name></expr></argument>, <argument pos:start="2785:52" pos:end="2785:54"><expr pos:start="2785:52" pos:end="2785:54"><name pos:start="2785:52" pos:end="2785:54">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2787:25" pos:end="2789:62"><expr pos:start="2787:25" pos:end="2789:61"><call pos:start="2787:25" pos:end="2789:61"><name pos:start="2787:25" pos:end="2787:46">tcg_gen_concat_i32_i64</name><argument_list pos:start="2787:47" pos:end="2789:61">(<argument pos:start="2787:48" pos:end="2787:50"><expr pos:start="2787:48" pos:end="2787:50"><name pos:start="2787:48" pos:end="2787:50">tmp</name></expr></argument>,

                                <argument pos:start="2789:33" pos:end="2789:45"><expr pos:start="2789:33" pos:end="2789:45"><name pos:start="2789:33" pos:end="2789:45"><name pos:start="2789:33" pos:end="2789:38">cpu_SR</name><index pos:start="2789:39" pos:end="2789:45">[<expr pos:start="2789:40" pos:end="2789:44"><name pos:start="2789:40" pos:end="2789:44">ACCLO</name></expr>]</index></name></expr></argument>, <argument pos:start="2789:48" pos:end="2789:60"><expr pos:start="2789:48" pos:end="2789:60"><name pos:start="2789:48" pos:end="2789:60"><name pos:start="2789:48" pos:end="2789:53">cpu_SR</name><index pos:start="2789:54" pos:end="2789:60">[<expr pos:start="2789:55" pos:end="2789:59"><name pos:start="2789:55" pos:end="2789:59">ACCHI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2791:25" pos:end="2799:25"><if pos:start="2791:25" pos:end="2795:25">if <condition pos:start="2791:28" pos:end="2791:45">(<expr pos:start="2791:29" pos:end="2791:44"><name pos:start="2791:29" pos:end="2791:30">op</name> <operator pos:start="2791:32" pos:end="2791:33">==</operator> <name pos:start="2791:35" pos:end="2791:44">MAC16_MULA</name></expr>)</condition> <block pos:start="2791:47" pos:end="2795:25">{<block_content pos:start="2793:29" pos:end="2793:61">

                            <expr_stmt pos:start="2793:29" pos:end="2793:61"><expr pos:start="2793:29" pos:end="2793:60"><call pos:start="2793:29" pos:end="2793:60"><name pos:start="2793:29" pos:end="2793:43">tcg_gen_add_i64</name><argument_list pos:start="2793:44" pos:end="2793:60">(<argument pos:start="2793:45" pos:end="2793:47"><expr pos:start="2793:45" pos:end="2793:47"><name pos:start="2793:45" pos:end="2793:47">tmp</name></expr></argument>, <argument pos:start="2793:50" pos:end="2793:52"><expr pos:start="2793:50" pos:end="2793:52"><name pos:start="2793:50" pos:end="2793:52">tmp</name></expr></argument>, <argument pos:start="2793:55" pos:end="2793:59"><expr pos:start="2793:55" pos:end="2793:59"><name pos:start="2793:55" pos:end="2793:59">res64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2795:27" pos:end="2799:25">else <block pos:start="2795:32" pos:end="2799:25">{<block_content pos:start="2797:29" pos:end="2797:61">

                            <expr_stmt pos:start="2797:29" pos:end="2797:61"><expr pos:start="2797:29" pos:end="2797:60"><call pos:start="2797:29" pos:end="2797:60"><name pos:start="2797:29" pos:end="2797:43">tcg_gen_sub_i64</name><argument_list pos:start="2797:44" pos:end="2797:60">(<argument pos:start="2797:45" pos:end="2797:47"><expr pos:start="2797:45" pos:end="2797:47"><name pos:start="2797:45" pos:end="2797:47">tmp</name></expr></argument>, <argument pos:start="2797:50" pos:end="2797:52"><expr pos:start="2797:50" pos:end="2797:52"><name pos:start="2797:50" pos:end="2797:52">tmp</name></expr></argument>, <argument pos:start="2797:55" pos:end="2797:59"><expr pos:start="2797:55" pos:end="2797:59"><name pos:start="2797:55" pos:end="2797:59">res64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2801:25" pos:end="2801:66"><expr pos:start="2801:25" pos:end="2801:65"><call pos:start="2801:25" pos:end="2801:65"><name pos:start="2801:25" pos:end="2801:45">tcg_gen_trunc_i64_i32</name><argument_list pos:start="2801:46" pos:end="2801:65">(<argument pos:start="2801:47" pos:end="2801:59"><expr pos:start="2801:47" pos:end="2801:59"><name pos:start="2801:47" pos:end="2801:59"><name pos:start="2801:47" pos:end="2801:52">cpu_SR</name><index pos:start="2801:53" pos:end="2801:59">[<expr pos:start="2801:54" pos:end="2801:58"><name pos:start="2801:54" pos:end="2801:58">ACCLO</name></expr>]</index></name></expr></argument>, <argument pos:start="2801:62" pos:end="2801:64"><expr pos:start="2801:62" pos:end="2801:64"><name pos:start="2801:62" pos:end="2801:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2803:25" pos:end="2803:55"><expr pos:start="2803:25" pos:end="2803:54"><call pos:start="2803:25" pos:end="2803:54"><name pos:start="2803:25" pos:end="2803:40">tcg_gen_shri_i64</name><argument_list pos:start="2803:41" pos:end="2803:54">(<argument pos:start="2803:42" pos:end="2803:44"><expr pos:start="2803:42" pos:end="2803:44"><name pos:start="2803:42" pos:end="2803:44">tmp</name></expr></argument>, <argument pos:start="2803:47" pos:end="2803:49"><expr pos:start="2803:47" pos:end="2803:49"><name pos:start="2803:47" pos:end="2803:49">tmp</name></expr></argument>, <argument pos:start="2803:52" pos:end="2803:53"><expr pos:start="2803:52" pos:end="2803:53"><literal type="number" pos:start="2803:52" pos:end="2803:53">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2805:25" pos:end="2805:66"><expr pos:start="2805:25" pos:end="2805:65"><call pos:start="2805:25" pos:end="2805:65"><name pos:start="2805:25" pos:end="2805:45">tcg_gen_trunc_i64_i32</name><argument_list pos:start="2805:46" pos:end="2805:65">(<argument pos:start="2805:47" pos:end="2805:59"><expr pos:start="2805:47" pos:end="2805:59"><name pos:start="2805:47" pos:end="2805:59"><name pos:start="2805:47" pos:end="2805:52">cpu_SR</name><index pos:start="2805:53" pos:end="2805:59">[<expr pos:start="2805:54" pos:end="2805:58"><name pos:start="2805:54" pos:end="2805:58">ACCHI</name></expr>]</index></name></expr></argument>, <argument pos:start="2805:62" pos:end="2805:64"><expr pos:start="2805:62" pos:end="2805:64"><name pos:start="2805:62" pos:end="2805:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2807:25" pos:end="2807:72"><expr pos:start="2807:25" pos:end="2807:71"><call pos:start="2807:25" pos:end="2807:71"><name pos:start="2807:25" pos:end="2807:41">tcg_gen_ext8s_i32</name><argument_list pos:start="2807:42" pos:end="2807:71">(<argument pos:start="2807:43" pos:end="2807:55"><expr pos:start="2807:43" pos:end="2807:55"><name pos:start="2807:43" pos:end="2807:55"><name pos:start="2807:43" pos:end="2807:48">cpu_SR</name><index pos:start="2807:49" pos:end="2807:55">[<expr pos:start="2807:50" pos:end="2807:54"><name pos:start="2807:50" pos:end="2807:54">ACCHI</name></expr>]</index></name></expr></argument>, <argument pos:start="2807:58" pos:end="2807:70"><expr pos:start="2807:58" pos:end="2807:70"><name pos:start="2807:58" pos:end="2807:70"><name pos:start="2807:58" pos:end="2807:63">cpu_SR</name><index pos:start="2807:64" pos:end="2807:70">[<expr pos:start="2807:65" pos:end="2807:69"><name pos:start="2807:65" pos:end="2807:69">ACCHI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="2811:25" pos:end="2811:43"><expr pos:start="2811:25" pos:end="2811:42"><call pos:start="2811:25" pos:end="2811:42"><name pos:start="2811:25" pos:end="2811:37">tcg_temp_free</name><argument_list pos:start="2811:38" pos:end="2811:42">(<argument pos:start="2811:39" pos:end="2811:41"><expr pos:start="2811:39" pos:end="2811:41"><name pos:start="2811:39" pos:end="2811:41">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2813:25" pos:end="2813:49"><expr pos:start="2813:25" pos:end="2813:48"><call pos:start="2813:25" pos:end="2813:48"><name pos:start="2813:25" pos:end="2813:41">tcg_temp_free_i64</name><argument_list pos:start="2813:42" pos:end="2813:48">(<argument pos:start="2813:43" pos:end="2813:47"><expr pos:start="2813:43" pos:end="2813:47"><name pos:start="2813:43" pos:end="2813:47">res64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2815:25" pos:end="2815:47"><expr pos:start="2815:25" pos:end="2815:46"><call pos:start="2815:25" pos:end="2815:46"><name pos:start="2815:25" pos:end="2815:41">tcg_temp_free_i64</name><argument_list pos:start="2815:42" pos:end="2815:46">(<argument pos:start="2815:43" pos:end="2815:45"><expr pos:start="2815:43" pos:end="2815:45"><name pos:start="2815:43" pos:end="2815:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2819:21" pos:end="2819:38"><expr pos:start="2819:21" pos:end="2819:37"><call pos:start="2819:21" pos:end="2819:37"><name pos:start="2819:21" pos:end="2819:33">tcg_temp_free</name><argument_list pos:start="2819:34" pos:end="2819:37">(<argument pos:start="2819:35" pos:end="2819:36"><expr pos:start="2819:35" pos:end="2819:36"><name pos:start="2819:35" pos:end="2819:36">m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2821:21" pos:end="2821:38"><expr pos:start="2821:21" pos:end="2821:37"><call pos:start="2821:21" pos:end="2821:37"><name pos:start="2821:21" pos:end="2821:33">tcg_temp_free</name><argument_list pos:start="2821:34" pos:end="2821:37">(<argument pos:start="2821:35" pos:end="2821:36"><expr pos:start="2821:35" pos:end="2821:36"><name pos:start="2821:35" pos:end="2821:36">m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2825:17" pos:end="2831:17"><if pos:start="2825:17" pos:end="2831:17">if <condition pos:start="2825:20" pos:end="2825:30">(<expr pos:start="2825:21" pos:end="2825:29"><name pos:start="2825:21" pos:end="2825:29">ld_offset</name></expr>)</condition> <block pos:start="2825:32" pos:end="2831:17">{<block_content pos:start="2827:21" pos:end="2829:63">

                    <expr_stmt pos:start="2827:21" pos:end="2827:57"><expr pos:start="2827:21" pos:end="2827:56"><call pos:start="2827:21" pos:end="2827:56"><name pos:start="2827:21" pos:end="2827:35">tcg_gen_mov_i32</name><argument_list pos:start="2827:36" pos:end="2827:56">(<argument pos:start="2827:37" pos:end="2827:48"><expr pos:start="2827:37" pos:end="2827:48"><name pos:start="2827:37" pos:end="2827:48"><name pos:start="2827:37" pos:end="2827:41">cpu_R</name><index pos:start="2827:42" pos:end="2827:48">[<expr pos:start="2827:43" pos:end="2827:47"><name pos:start="2827:43" pos:end="2827:47">RRR_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2827:51" pos:end="2827:55"><expr pos:start="2827:51" pos:end="2827:55"><name pos:start="2827:51" pos:end="2827:55">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2829:21" pos:end="2829:63"><expr pos:start="2829:21" pos:end="2829:62"><call pos:start="2829:21" pos:end="2829:62"><name pos:start="2829:21" pos:end="2829:35">tcg_gen_mov_i32</name><argument_list pos:start="2829:36" pos:end="2829:62">(<argument pos:start="2829:37" pos:end="2829:54"><expr pos:start="2829:37" pos:end="2829:54"><name pos:start="2829:37" pos:end="2829:54"><name pos:start="2829:37" pos:end="2829:42">cpu_SR</name><index pos:start="2829:43" pos:end="2829:54">[<expr pos:start="2829:44" pos:end="2829:53"><name pos:start="2829:44" pos:end="2829:45">MR</name> <operator pos:start="2829:47" pos:end="2829:47">+</operator> <name pos:start="2829:49" pos:end="2829:53">RRR_W</name></expr>]</index></name></expr></argument>, <argument pos:start="2829:57" pos:end="2829:61"><expr pos:start="2829:57" pos:end="2829:61"><name pos:start="2829:57" pos:end="2829:61">mem32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2833:17" pos:end="2833:37"><expr pos:start="2833:17" pos:end="2833:36"><call pos:start="2833:17" pos:end="2833:36"><name pos:start="2833:17" pos:end="2833:29">tcg_temp_free</name><argument_list pos:start="2833:30" pos:end="2833:36">(<argument pos:start="2833:31" pos:end="2833:35"><expr pos:start="2833:31" pos:end="2833:35"><name pos:start="2833:31" pos:end="2833:35">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2835:17" pos:end="2835:37"><expr pos:start="2835:17" pos:end="2835:36"><call pos:start="2835:17" pos:end="2835:36"><name pos:start="2835:17" pos:end="2835:29">tcg_temp_free</name><argument_list pos:start="2835:30" pos:end="2835:36">(<argument pos:start="2835:31" pos:end="2835:35"><expr pos:start="2835:31" pos:end="2835:35"><name pos:start="2835:31" pos:end="2835:35">mem32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

        </block_content>}</block>

        <break pos:start="2841:9" pos:end="2841:14">break;</break>



    <case pos:start="2845:5" pos:end="2845:11">case <expr pos:start="2845:10" pos:end="2845:10"><literal type="number" pos:start="2845:10" pos:end="2845:10">5</literal></expr>:</case> <comment type="block" pos:start="2845:13" pos:end="2845:21">/*CALLN*/</comment>

        <switch pos:start="2847:9" pos:end="2875:9">switch <condition pos:start="2847:16" pos:end="2847:23">(<expr pos:start="2847:17" pos:end="2847:22"><name pos:start="2847:17" pos:end="2847:22">CALL_N</name></expr>)</condition> <block pos:start="2847:25" pos:end="2875:9">{<block_content pos:start="2849:9" pos:end="2873:18">

        <case pos:start="2849:9" pos:end="2849:15">case <expr pos:start="2849:14" pos:end="2849:14"><literal type="number" pos:start="2849:14" pos:end="2849:14">0</literal></expr>:</case> <comment type="block" pos:start="2849:17" pos:end="2849:25">/*CALL0*/</comment>

            <expr_stmt pos:start="2851:13" pos:end="2851:52"><expr pos:start="2851:13" pos:end="2851:51"><call pos:start="2851:13" pos:end="2851:51"><name pos:start="2851:13" pos:end="2851:28">tcg_gen_movi_i32</name><argument_list pos:start="2851:29" pos:end="2851:51">(<argument pos:start="2851:30" pos:end="2851:37"><expr pos:start="2851:30" pos:end="2851:37"><name pos:start="2851:30" pos:end="2851:37"><name pos:start="2851:30" pos:end="2851:34">cpu_R</name><index pos:start="2851:35" pos:end="2851:37">[<expr pos:start="2851:36" pos:end="2851:36"><literal type="number" pos:start="2851:36" pos:end="2851:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2851:40" pos:end="2851:50"><expr pos:start="2851:40" pos:end="2851:50"><name pos:start="2851:40" pos:end="2851:50"><name pos:start="2851:40" pos:end="2851:41">dc</name><operator pos:start="2851:42" pos:end="2851:43">-&gt;</operator><name pos:start="2851:44" pos:end="2851:50">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2853:13" pos:end="2853:72"><expr pos:start="2853:13" pos:end="2853:71"><call pos:start="2853:13" pos:end="2853:71"><name pos:start="2853:13" pos:end="2853:21">gen_jumpi</name><argument_list pos:start="2853:22" pos:end="2853:71">(<argument pos:start="2853:23" pos:end="2853:24"><expr pos:start="2853:23" pos:end="2853:24"><name pos:start="2853:23" pos:end="2853:24">dc</name></expr></argument>, <argument pos:start="2853:27" pos:end="2853:67"><expr pos:start="2853:27" pos:end="2853:67"><operator pos:start="2853:27" pos:end="2853:27">(</operator><name pos:start="2853:28" pos:end="2853:33"><name pos:start="2853:28" pos:end="2853:29">dc</name><operator pos:start="2853:30" pos:end="2853:31">-&gt;</operator><name pos:start="2853:32" pos:end="2853:33">pc</name></name> <operator pos:start="2853:35" pos:end="2853:35">&amp;</operator> <operator pos:start="2853:37" pos:end="2853:37">~</operator><literal type="number" pos:start="2853:38" pos:end="2853:38">3</literal><operator pos:start="2853:39" pos:end="2853:39">)</operator> <operator pos:start="2853:41" pos:end="2853:41">+</operator> <operator pos:start="2853:43" pos:end="2853:43">(</operator><name pos:start="2853:44" pos:end="2853:57">CALL_OFFSET_SE</name> <operator pos:start="2853:59" pos:end="2853:60">&lt;&lt;</operator> <literal type="number" pos:start="2853:62" pos:end="2853:62">2</literal><operator pos:start="2853:63" pos:end="2853:63">)</operator> <operator pos:start="2853:65" pos:end="2853:65">+</operator> <literal type="number" pos:start="2853:67" pos:end="2853:67">4</literal></expr></argument>, <argument pos:start="2853:70" pos:end="2853:70"><expr pos:start="2853:70" pos:end="2853:70"><literal type="number" pos:start="2853:70" pos:end="2853:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2855:13" pos:end="2855:18">break;</break>



        <case pos:start="2859:9" pos:end="2859:15">case <expr pos:start="2859:14" pos:end="2859:14"><literal type="number" pos:start="2859:14" pos:end="2859:14">1</literal></expr>:</case> <comment type="block" pos:start="2859:17" pos:end="2859:26">/*CALL4w*/</comment>

        <case pos:start="2861:9" pos:end="2861:15">case <expr pos:start="2861:14" pos:end="2861:14"><literal type="number" pos:start="2861:14" pos:end="2861:14">2</literal></expr>:</case> <comment type="block" pos:start="2861:17" pos:end="2861:26">/*CALL8w*/</comment>

        <case pos:start="2863:9" pos:end="2863:15">case <expr pos:start="2863:14" pos:end="2863:14"><literal type="number" pos:start="2863:14" pos:end="2863:14">3</literal></expr>:</case> <comment type="block" pos:start="2863:17" pos:end="2863:27">/*CALL12w*/</comment>

            <expr_stmt pos:start="2865:13" pos:end="2865:56"><expr pos:start="2865:13" pos:end="2865:55"><call pos:start="2865:13" pos:end="2865:55"><name pos:start="2865:13" pos:end="2865:22">HAS_OPTION</name><argument_list pos:start="2865:23" pos:end="2865:55">(<argument pos:start="2865:24" pos:end="2865:54"><expr pos:start="2865:24" pos:end="2865:54"><name pos:start="2865:24" pos:end="2865:54">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2867:13" pos:end="2867:47"><expr pos:start="2867:13" pos:end="2867:46"><call pos:start="2867:13" pos:end="2867:46"><name pos:start="2867:13" pos:end="2867:29">gen_window_check1</name><argument_list pos:start="2867:30" pos:end="2867:46">(<argument pos:start="2867:31" pos:end="2867:32"><expr pos:start="2867:31" pos:end="2867:32"><name pos:start="2867:31" pos:end="2867:32">dc</name></expr></argument>, <argument pos:start="2867:35" pos:end="2867:45"><expr pos:start="2867:35" pos:end="2867:45"><name pos:start="2867:35" pos:end="2867:40">CALL_N</name> <operator pos:start="2867:42" pos:end="2867:43">&lt;&lt;</operator> <literal type="number" pos:start="2867:45" pos:end="2867:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2869:13" pos:end="2871:66"><expr pos:start="2869:13" pos:end="2871:65"><call pos:start="2869:13" pos:end="2871:65"><name pos:start="2869:13" pos:end="2869:22">gen_callwi</name><argument_list pos:start="2869:23" pos:end="2871:65">(<argument pos:start="2869:24" pos:end="2869:25"><expr pos:start="2869:24" pos:end="2869:25"><name pos:start="2869:24" pos:end="2869:25">dc</name></expr></argument>, <argument pos:start="2869:28" pos:end="2869:33"><expr pos:start="2869:28" pos:end="2869:33"><name pos:start="2869:28" pos:end="2869:33">CALL_N</name></expr></argument>,

                    <argument pos:start="2871:21" pos:end="2871:61"><expr pos:start="2871:21" pos:end="2871:61"><operator pos:start="2871:21" pos:end="2871:21">(</operator><name pos:start="2871:22" pos:end="2871:27"><name pos:start="2871:22" pos:end="2871:23">dc</name><operator pos:start="2871:24" pos:end="2871:25">-&gt;</operator><name pos:start="2871:26" pos:end="2871:27">pc</name></name> <operator pos:start="2871:29" pos:end="2871:29">&amp;</operator> <operator pos:start="2871:31" pos:end="2871:31">~</operator><literal type="number" pos:start="2871:32" pos:end="2871:32">3</literal><operator pos:start="2871:33" pos:end="2871:33">)</operator> <operator pos:start="2871:35" pos:end="2871:35">+</operator> <operator pos:start="2871:37" pos:end="2871:37">(</operator><name pos:start="2871:38" pos:end="2871:51">CALL_OFFSET_SE</name> <operator pos:start="2871:53" pos:end="2871:54">&lt;&lt;</operator> <literal type="number" pos:start="2871:56" pos:end="2871:56">2</literal><operator pos:start="2871:57" pos:end="2871:57">)</operator> <operator pos:start="2871:59" pos:end="2871:59">+</operator> <literal type="number" pos:start="2871:61" pos:end="2871:61">4</literal></expr></argument>, <argument pos:start="2871:64" pos:end="2871:64"><expr pos:start="2871:64" pos:end="2871:64"><literal type="number" pos:start="2871:64" pos:end="2871:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2873:13" pos:end="2873:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="2877:9" pos:end="2877:14">break;</break>



    <case pos:start="2881:5" pos:end="2881:11">case <expr pos:start="2881:10" pos:end="2881:10"><literal type="number" pos:start="2881:10" pos:end="2881:10">6</literal></expr>:</case> <comment type="block" pos:start="2881:13" pos:end="2881:18">/*SI*/</comment>

        <switch pos:start="2883:9" pos:end="3103:9">switch <condition pos:start="2883:16" pos:end="2883:23">(<expr pos:start="2883:17" pos:end="2883:22"><name pos:start="2883:17" pos:end="2883:22">CALL_N</name></expr>)</condition> <block pos:start="2883:25" pos:end="3103:9">{<block_content pos:start="2885:9" pos:end="3099:18">

        <case pos:start="2885:9" pos:end="2885:15">case <expr pos:start="2885:14" pos:end="2885:14"><literal type="number" pos:start="2885:14" pos:end="2885:14">0</literal></expr>:</case> <comment type="block" pos:start="2885:17" pos:end="2885:21">/*J*/</comment>

            <expr_stmt pos:start="2887:13" pos:end="2887:58"><expr pos:start="2887:13" pos:end="2887:57"><call pos:start="2887:13" pos:end="2887:57"><name pos:start="2887:13" pos:end="2887:21">gen_jumpi</name><argument_list pos:start="2887:22" pos:end="2887:57">(<argument pos:start="2887:23" pos:end="2887:24"><expr pos:start="2887:23" pos:end="2887:24"><name pos:start="2887:23" pos:end="2887:24">dc</name></expr></argument>, <argument pos:start="2887:27" pos:end="2887:53"><expr pos:start="2887:27" pos:end="2887:53"><name pos:start="2887:27" pos:end="2887:32"><name pos:start="2887:27" pos:end="2887:28">dc</name><operator pos:start="2887:29" pos:end="2887:30">-&gt;</operator><name pos:start="2887:31" pos:end="2887:32">pc</name></name> <operator pos:start="2887:34" pos:end="2887:34">+</operator> <literal type="number" pos:start="2887:36" pos:end="2887:38">4</literal> <operator pos:start="2887:38" pos:end="2887:38">+</operator> <name pos:start="2887:40" pos:end="2887:53">CALL_OFFSET_SE</name></expr></argument>, <argument pos:start="2887:56" pos:end="2887:56"><expr pos:start="2887:56" pos:end="2887:56"><literal type="number" pos:start="2887:56" pos:end="2887:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2889:13" pos:end="2889:18">break;</break>



        <case pos:start="2893:9" pos:end="2893:15">case <expr pos:start="2893:14" pos:end="2893:14"><literal type="number" pos:start="2893:14" pos:end="2893:14">1</literal></expr>:</case> <comment type="block" pos:start="2893:17" pos:end="2893:22">/*BZ*/</comment>

            <expr_stmt pos:start="2895:13" pos:end="2895:43"><expr pos:start="2895:13" pos:end="2895:42"><call pos:start="2895:13" pos:end="2895:42"><name pos:start="2895:13" pos:end="2895:29">gen_window_check1</name><argument_list pos:start="2895:30" pos:end="2895:42">(<argument pos:start="2895:31" pos:end="2895:32"><expr pos:start="2895:31" pos:end="2895:32"><name pos:start="2895:31" pos:end="2895:32">dc</name></expr></argument>, <argument pos:start="2895:35" pos:end="2895:41"><expr pos:start="2895:35" pos:end="2895:41"><name pos:start="2895:35" pos:end="2895:41">BRI12_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="2897:13" pos:end="2917:13">{<block_content pos:start="2899:17" pos:end="2915:44">

                <decl_stmt pos:start="2899:17" pos:end="2909:18"><decl pos:start="2899:17" pos:end="2909:17"><type pos:start="2899:17" pos:end="2899:36"><specifier pos:start="2899:17" pos:end="2899:22">static</specifier> <specifier pos:start="2899:24" pos:end="2899:28">const</specifier> <name pos:start="2899:30" pos:end="2899:36">TCGCond</name></type> <name pos:start="2899:38" pos:end="2899:43"><name pos:start="2899:38" pos:end="2899:41">cond</name><index pos:start="2899:42" pos:end="2899:43">[]</index></name> <init pos:start="2899:45" pos:end="2909:17">= <expr pos:start="2899:47" pos:end="2909:17"><block pos:start="2899:47" pos:end="2909:17">{

                    <expr pos:start="2901:21" pos:end="2901:31"><name pos:start="2901:21" pos:end="2901:31">TCG_COND_EQ</name></expr>, <comment type="block" pos:start="2901:34" pos:end="2901:41">/*BEQZ*/</comment>

                    <expr pos:start="2903:21" pos:end="2903:31"><name pos:start="2903:21" pos:end="2903:31">TCG_COND_NE</name></expr>, <comment type="block" pos:start="2903:34" pos:end="2903:41">/*BNEZ*/</comment>

                    <expr pos:start="2905:21" pos:end="2905:31"><name pos:start="2905:21" pos:end="2905:31">TCG_COND_LT</name></expr>, <comment type="block" pos:start="2905:34" pos:end="2905:41">/*BLTZ*/</comment>

                    <expr pos:start="2907:21" pos:end="2907:31"><name pos:start="2907:21" pos:end="2907:31">TCG_COND_GE</name></expr>, <comment type="block" pos:start="2907:34" pos:end="2907:41">/*BGEZ*/</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="2913:17" pos:end="2915:44"><expr pos:start="2913:17" pos:end="2915:43"><call pos:start="2913:17" pos:end="2915:43"><name pos:start="2913:17" pos:end="2913:27">gen_brcondi</name><argument_list pos:start="2913:28" pos:end="2915:43">(<argument pos:start="2913:29" pos:end="2913:30"><expr pos:start="2913:29" pos:end="2913:30"><name pos:start="2913:29" pos:end="2913:30">dc</name></expr></argument>, <argument pos:start="2913:33" pos:end="2913:49"><expr pos:start="2913:33" pos:end="2913:49"><name pos:start="2913:33" pos:end="2913:49"><name pos:start="2913:33" pos:end="2913:36">cond</name><index pos:start="2913:37" pos:end="2913:49">[<expr pos:start="2913:38" pos:end="2913:48"><name pos:start="2913:38" pos:end="2913:44">BRI12_M</name> <operator pos:start="2913:46" pos:end="2913:46">&amp;</operator> <literal type="number" pos:start="2913:48" pos:end="2913:48">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="2913:52" pos:end="2913:65"><expr pos:start="2913:52" pos:end="2913:65"><name pos:start="2913:52" pos:end="2913:65"><name pos:start="2913:52" pos:end="2913:56">cpu_R</name><index pos:start="2913:57" pos:end="2913:65">[<expr pos:start="2913:58" pos:end="2913:64"><name pos:start="2913:58" pos:end="2913:64">BRI12_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2913:68" pos:end="2913:68"><expr pos:start="2913:68" pos:end="2913:68"><literal type="number" pos:start="2913:68" pos:end="2913:68">0</literal></expr></argument>,

                        <argument pos:start="2915:25" pos:end="2915:42"><expr pos:start="2915:25" pos:end="2915:42"><literal type="number" pos:start="2915:25" pos:end="2915:27">4</literal> <operator pos:start="2915:27" pos:end="2915:27">+</operator> <name pos:start="2915:29" pos:end="2915:42">BRI12_IMM12_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="2919:13" pos:end="2919:18">break;</break>



        <case pos:start="2923:9" pos:end="2923:15">case <expr pos:start="2923:14" pos:end="2923:14"><literal type="number" pos:start="2923:14" pos:end="2923:14">2</literal></expr>:</case> <comment type="block" pos:start="2923:17" pos:end="2923:23">/*BI0*/</comment>

            <expr_stmt pos:start="2925:13" pos:end="2925:42"><expr pos:start="2925:13" pos:end="2925:41"><call pos:start="2925:13" pos:end="2925:41"><name pos:start="2925:13" pos:end="2925:29">gen_window_check1</name><argument_list pos:start="2925:30" pos:end="2925:41">(<argument pos:start="2925:31" pos:end="2925:32"><expr pos:start="2925:31" pos:end="2925:32"><name pos:start="2925:31" pos:end="2925:32">dc</name></expr></argument>, <argument pos:start="2925:35" pos:end="2925:40"><expr pos:start="2925:35" pos:end="2925:40"><name pos:start="2925:35" pos:end="2925:40">BRI8_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="2927:13" pos:end="2947:13">{<block_content pos:start="2929:17" pos:end="2945:74">

                <decl_stmt pos:start="2929:17" pos:end="2939:18"><decl pos:start="2929:17" pos:end="2939:17"><type pos:start="2929:17" pos:end="2929:36"><specifier pos:start="2929:17" pos:end="2929:22">static</specifier> <specifier pos:start="2929:24" pos:end="2929:28">const</specifier> <name pos:start="2929:30" pos:end="2929:36">TCGCond</name></type> <name pos:start="2929:38" pos:end="2929:43"><name pos:start="2929:38" pos:end="2929:41">cond</name><index pos:start="2929:42" pos:end="2929:43">[]</index></name> <init pos:start="2929:45" pos:end="2939:17">= <expr pos:start="2929:47" pos:end="2939:17"><block pos:start="2929:47" pos:end="2939:17">{

                    <expr pos:start="2931:21" pos:end="2931:31"><name pos:start="2931:21" pos:end="2931:31">TCG_COND_EQ</name></expr>, <comment type="block" pos:start="2931:34" pos:end="2931:41">/*BEQI*/</comment>

                    <expr pos:start="2933:21" pos:end="2933:31"><name pos:start="2933:21" pos:end="2933:31">TCG_COND_NE</name></expr>, <comment type="block" pos:start="2933:34" pos:end="2933:41">/*BNEI*/</comment>

                    <expr pos:start="2935:21" pos:end="2935:31"><name pos:start="2935:21" pos:end="2935:31">TCG_COND_LT</name></expr>, <comment type="block" pos:start="2935:34" pos:end="2935:41">/*BLTI*/</comment>

                    <expr pos:start="2937:21" pos:end="2937:31"><name pos:start="2937:21" pos:end="2937:31">TCG_COND_GE</name></expr>, <comment type="block" pos:start="2937:34" pos:end="2937:41">/*BGEI*/</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="2943:17" pos:end="2945:74"><expr pos:start="2943:17" pos:end="2945:73"><call pos:start="2943:17" pos:end="2945:73"><name pos:start="2943:17" pos:end="2943:27">gen_brcondi</name><argument_list pos:start="2943:28" pos:end="2945:73">(<argument pos:start="2943:29" pos:end="2943:30"><expr pos:start="2943:29" pos:end="2943:30"><name pos:start="2943:29" pos:end="2943:30">dc</name></expr></argument>, <argument pos:start="2943:33" pos:end="2943:48"><expr pos:start="2943:33" pos:end="2943:48"><name pos:start="2943:33" pos:end="2943:48"><name pos:start="2943:33" pos:end="2943:36">cond</name><index pos:start="2943:37" pos:end="2943:48">[<expr pos:start="2943:38" pos:end="2943:47"><name pos:start="2943:38" pos:end="2943:43">BRI8_M</name> <operator pos:start="2943:45" pos:end="2943:45">&amp;</operator> <literal type="number" pos:start="2943:47" pos:end="2943:47">3</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="2945:25" pos:end="2945:37"><expr pos:start="2945:25" pos:end="2945:37"><name pos:start="2945:25" pos:end="2945:37"><name pos:start="2945:25" pos:end="2945:29">cpu_R</name><index pos:start="2945:30" pos:end="2945:37">[<expr pos:start="2945:31" pos:end="2945:36"><name pos:start="2945:31" pos:end="2945:36">BRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="2945:40" pos:end="2945:54"><expr pos:start="2945:40" pos:end="2945:54"><name pos:start="2945:40" pos:end="2945:54"><name pos:start="2945:40" pos:end="2945:46">B4CONST</name><index pos:start="2945:47" pos:end="2945:54">[<expr pos:start="2945:48" pos:end="2945:53"><name pos:start="2945:48" pos:end="2945:53">BRI8_R</name></expr>]</index></name></expr></argument>, <argument pos:start="2945:57" pos:end="2945:72"><expr pos:start="2945:57" pos:end="2945:72"><literal type="number" pos:start="2945:57" pos:end="2945:59">4</literal> <operator pos:start="2945:59" pos:end="2945:59">+</operator> <name pos:start="2945:61" pos:end="2945:72">BRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="2949:13" pos:end="2949:18">break;</break>



        <case pos:start="2953:9" pos:end="2953:15">case <expr pos:start="2953:14" pos:end="2953:14"><literal type="number" pos:start="2953:14" pos:end="2953:14">3</literal></expr>:</case> <comment type="block" pos:start="2953:17" pos:end="2953:23">/*BI1*/</comment>

            <switch pos:start="2955:13" pos:end="3097:13">switch <condition pos:start="2955:20" pos:end="2955:27">(<expr pos:start="2955:21" pos:end="2955:26"><name pos:start="2955:21" pos:end="2955:26">BRI8_M</name></expr>)</condition> <block pos:start="2955:29" pos:end="3097:13">{<block_content pos:start="2957:13" pos:end="3095:22">

            <case pos:start="2957:13" pos:end="2957:19">case <expr pos:start="2957:18" pos:end="2957:18"><literal type="number" pos:start="2957:18" pos:end="2957:18">0</literal></expr>:</case> <comment type="block" pos:start="2957:21" pos:end="2957:30">/*ENTRYw*/</comment>

                <expr_stmt pos:start="2959:17" pos:end="2959:60"><expr pos:start="2959:17" pos:end="2959:59"><call pos:start="2959:17" pos:end="2959:59"><name pos:start="2959:17" pos:end="2959:26">HAS_OPTION</name><argument_list pos:start="2959:27" pos:end="2959:59">(<argument pos:start="2959:28" pos:end="2959:58"><expr pos:start="2959:28" pos:end="2959:58"><name pos:start="2959:28" pos:end="2959:58">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="2961:17" pos:end="2981:17">{<block_content pos:start="2963:21" pos:end="2979:42">

                    <decl_stmt pos:start="2963:21" pos:end="2963:56"><decl pos:start="2963:21" pos:end="2963:55"><type pos:start="2963:21" pos:end="2963:28"><name pos:start="2963:21" pos:end="2963:28">TCGv_i32</name></type> <name pos:start="2963:30" pos:end="2963:31">pc</name> <init pos:start="2963:33" pos:end="2963:55">= <expr pos:start="2963:35" pos:end="2963:55"><call pos:start="2963:35" pos:end="2963:55"><name pos:start="2963:35" pos:end="2963:47">tcg_const_i32</name><argument_list pos:start="2963:48" pos:end="2963:55">(<argument pos:start="2963:49" pos:end="2963:54"><expr pos:start="2963:49" pos:end="2963:54"><name pos:start="2963:49" pos:end="2963:54"><name pos:start="2963:49" pos:end="2963:50">dc</name><operator pos:start="2963:51" pos:end="2963:52">-&gt;</operator><name pos:start="2963:53" pos:end="2963:54">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="2965:21" pos:end="2965:56"><decl pos:start="2965:21" pos:end="2965:55"><type pos:start="2965:21" pos:end="2965:28"><name pos:start="2965:21" pos:end="2965:28">TCGv_i32</name></type> <name pos:start="2965:30" pos:end="2965:30">s</name> <init pos:start="2965:32" pos:end="2965:55">= <expr pos:start="2965:34" pos:end="2965:55"><call pos:start="2965:34" pos:end="2965:55"><name pos:start="2965:34" pos:end="2965:46">tcg_const_i32</name><argument_list pos:start="2965:47" pos:end="2965:55">(<argument pos:start="2965:48" pos:end="2965:54"><expr pos:start="2965:48" pos:end="2965:54"><name pos:start="2965:48" pos:end="2965:54">BRI12_S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="2967:21" pos:end="2967:62"><decl pos:start="2967:21" pos:end="2967:61"><type pos:start="2967:21" pos:end="2967:28"><name pos:start="2967:21" pos:end="2967:28">TCGv_i32</name></type> <name pos:start="2967:30" pos:end="2967:32">imm</name> <init pos:start="2967:34" pos:end="2967:61">= <expr pos:start="2967:36" pos:end="2967:61"><call pos:start="2967:36" pos:end="2967:61"><name pos:start="2967:36" pos:end="2967:48">tcg_const_i32</name><argument_list pos:start="2967:49" pos:end="2967:61">(<argument pos:start="2967:50" pos:end="2967:60"><expr pos:start="2967:50" pos:end="2967:60"><name pos:start="2967:50" pos:end="2967:60">BRI12_IMM12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="2969:21" pos:end="2969:43"><expr pos:start="2969:21" pos:end="2969:42"><call pos:start="2969:21" pos:end="2969:42"><name pos:start="2969:21" pos:end="2969:38">gen_advance_ccount</name><argument_list pos:start="2969:39" pos:end="2969:42">(<argument pos:start="2969:40" pos:end="2969:41"><expr pos:start="2969:40" pos:end="2969:41"><name pos:start="2969:40" pos:end="2969:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2971:21" pos:end="2971:49"><expr pos:start="2971:21" pos:end="2971:48"><call pos:start="2971:21" pos:end="2971:48"><name pos:start="2971:21" pos:end="2971:36">gen_helper_entry</name><argument_list pos:start="2971:37" pos:end="2971:48">(<argument pos:start="2971:38" pos:end="2971:39"><expr pos:start="2971:38" pos:end="2971:39"><name pos:start="2971:38" pos:end="2971:39">pc</name></expr></argument>, <argument pos:start="2971:42" pos:end="2971:42"><expr pos:start="2971:42" pos:end="2971:42"><name pos:start="2971:42" pos:end="2971:42">s</name></expr></argument>, <argument pos:start="2971:45" pos:end="2971:47"><expr pos:start="2971:45" pos:end="2971:47"><name pos:start="2971:45" pos:end="2971:47">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2973:21" pos:end="2973:39"><expr pos:start="2973:21" pos:end="2973:38"><call pos:start="2973:21" pos:end="2973:38"><name pos:start="2973:21" pos:end="2973:33">tcg_temp_free</name><argument_list pos:start="2973:34" pos:end="2973:38">(<argument pos:start="2973:35" pos:end="2973:37"><expr pos:start="2973:35" pos:end="2973:37"><name pos:start="2973:35" pos:end="2973:37">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2975:21" pos:end="2975:37"><expr pos:start="2975:21" pos:end="2975:36"><call pos:start="2975:21" pos:end="2975:36"><name pos:start="2975:21" pos:end="2975:33">tcg_temp_free</name><argument_list pos:start="2975:34" pos:end="2975:36">(<argument pos:start="2975:35" pos:end="2975:35"><expr pos:start="2975:35" pos:end="2975:35"><name pos:start="2975:35" pos:end="2975:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2977:21" pos:end="2977:38"><expr pos:start="2977:21" pos:end="2977:37"><call pos:start="2977:21" pos:end="2977:37"><name pos:start="2977:21" pos:end="2977:33">tcg_temp_free</name><argument_list pos:start="2977:34" pos:end="2977:37">(<argument pos:start="2977:35" pos:end="2977:36"><expr pos:start="2977:35" pos:end="2977:36"><name pos:start="2977:35" pos:end="2977:36">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2979:21" pos:end="2979:42"><expr pos:start="2979:21" pos:end="2979:41"><call pos:start="2979:21" pos:end="2979:41"><name pos:start="2979:21" pos:end="2979:37">reset_used_window</name><argument_list pos:start="2979:38" pos:end="2979:41">(<argument pos:start="2979:39" pos:end="2979:40"><expr pos:start="2979:39" pos:end="2979:40"><name pos:start="2979:39" pos:end="2979:40">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="2983:17" pos:end="2983:22">break;</break>



            <case pos:start="2987:13" pos:end="2987:19">case <expr pos:start="2987:18" pos:end="2987:18"><literal type="number" pos:start="2987:18" pos:end="2987:18">1</literal></expr>:</case> <comment type="block" pos:start="2987:21" pos:end="2987:26">/*B1*/</comment>

                <switch pos:start="2989:17" pos:end="3079:17">switch <condition pos:start="2989:24" pos:end="2989:31">(<expr pos:start="2989:25" pos:end="2989:30"><name pos:start="2989:25" pos:end="2989:30">BRI8_R</name></expr>)</condition> <block pos:start="2989:33" pos:end="3079:17">{<block_content pos:start="2991:17" pos:end="3075:26">

                <case pos:start="2991:17" pos:end="2991:23">case <expr pos:start="2991:22" pos:end="2991:22"><literal type="number" pos:start="2991:22" pos:end="2991:22">0</literal></expr>:</case> <comment type="block" pos:start="2991:25" pos:end="2991:31">/*BFp*/</comment>

                <case pos:start="2993:17" pos:end="2993:23">case <expr pos:start="2993:22" pos:end="2993:22"><literal type="number" pos:start="2993:22" pos:end="2993:22">1</literal></expr>:</case> <comment type="block" pos:start="2993:25" pos:end="2993:31">/*BTp*/</comment>

                    <expr_stmt pos:start="2995:21" pos:end="2995:54"><expr pos:start="2995:21" pos:end="2995:53"><call pos:start="2995:21" pos:end="2995:53"><name pos:start="2995:21" pos:end="2995:30">HAS_OPTION</name><argument_list pos:start="2995:31" pos:end="2995:53">(<argument pos:start="2995:32" pos:end="2995:52"><expr pos:start="2995:32" pos:end="2995:52"><name pos:start="2995:32" pos:end="2995:52">XTENSA_OPTION_BOOLEAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="2997:21" pos:end="3011:21">{<block_content pos:start="2999:25" pos:end="3009:43">

                        <decl_stmt pos:start="2999:25" pos:end="2999:58"><decl pos:start="2999:25" pos:end="2999:57"><type pos:start="2999:25" pos:end="2999:32"><name pos:start="2999:25" pos:end="2999:32">TCGv_i32</name></type> <name pos:start="2999:34" pos:end="2999:36">tmp</name> <init pos:start="2999:38" pos:end="2999:57">= <expr pos:start="2999:40" pos:end="2999:57"><call pos:start="2999:40" pos:end="2999:57"><name pos:start="2999:40" pos:end="2999:55">tcg_temp_new_i32</name><argument_list pos:start="2999:56" pos:end="2999:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="3001:25" pos:end="3001:71"><expr pos:start="3001:25" pos:end="3001:70"><call pos:start="3001:25" pos:end="3001:70"><name pos:start="3001:25" pos:end="3001:40">tcg_gen_andi_i32</name><argument_list pos:start="3001:41" pos:end="3001:70">(<argument pos:start="3001:42" pos:end="3001:44"><expr pos:start="3001:42" pos:end="3001:44"><name pos:start="3001:42" pos:end="3001:44">tmp</name></expr></argument>, <argument pos:start="3001:47" pos:end="3001:56"><expr pos:start="3001:47" pos:end="3001:56"><name pos:start="3001:47" pos:end="3001:56"><name pos:start="3001:47" pos:end="3001:52">cpu_SR</name><index pos:start="3001:53" pos:end="3001:56">[<expr pos:start="3001:54" pos:end="3001:55"><name pos:start="3001:54" pos:end="3001:55">BR</name></expr>]</index></name></expr></argument>, <argument pos:start="3001:59" pos:end="3001:69"><expr pos:start="3001:59" pos:end="3001:69"><literal type="number" pos:start="3001:59" pos:end="3001:59">1</literal> <operator pos:start="3001:61" pos:end="3001:62">&lt;&lt;</operator> <name pos:start="3001:64" pos:end="3001:69">RRI8_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3003:25" pos:end="3007:58"><expr pos:start="3003:25" pos:end="3007:57"><call pos:start="3003:25" pos:end="3007:57"><name pos:start="3003:25" pos:end="3003:35">gen_brcondi</name><argument_list pos:start="3003:36" pos:end="3007:57">(<argument pos:start="3003:37" pos:end="3003:38"><expr pos:start="3003:37" pos:end="3003:38"><name pos:start="3003:37" pos:end="3003:38">dc</name></expr></argument>,

                                <argument pos:start="3005:33" pos:end="3005:71"><expr pos:start="3005:33" pos:end="3005:71"><ternary pos:start="3005:33" pos:end="3005:71"><condition pos:start="3005:33" pos:end="3005:45"><expr pos:start="3005:33" pos:end="3005:43"><name pos:start="3005:33" pos:end="3005:38">BRI8_R</name> <operator pos:start="3005:40" pos:end="3005:41">==</operator> <literal type="number" pos:start="3005:43" pos:end="3005:43">1</literal></expr> ?</condition><then pos:start="3005:47" pos:end="3005:57"> <expr pos:start="3005:47" pos:end="3005:57"><name pos:start="3005:47" pos:end="3005:57">TCG_COND_NE</name></expr> </then><else pos:start="3005:59" pos:end="3005:71">: <expr pos:start="3005:61" pos:end="3005:71"><name pos:start="3005:61" pos:end="3005:71">TCG_COND_EQ</name></expr></else></ternary></expr></argument>,

                                <argument pos:start="3007:33" pos:end="3007:35"><expr pos:start="3007:33" pos:end="3007:35"><name pos:start="3007:33" pos:end="3007:35">tmp</name></expr></argument>, <argument pos:start="3007:38" pos:end="3007:38"><expr pos:start="3007:38" pos:end="3007:38"><literal type="number" pos:start="3007:38" pos:end="3007:38">0</literal></expr></argument>, <argument pos:start="3007:41" pos:end="3007:56"><expr pos:start="3007:41" pos:end="3007:56"><literal type="number" pos:start="3007:41" pos:end="3007:43">4</literal> <operator pos:start="3007:43" pos:end="3007:43">+</operator> <name pos:start="3007:45" pos:end="3007:56">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3009:25" pos:end="3009:43"><expr pos:start="3009:25" pos:end="3009:42"><call pos:start="3009:25" pos:end="3009:42"><name pos:start="3009:25" pos:end="3009:37">tcg_temp_free</name><argument_list pos:start="3009:38" pos:end="3009:42">(<argument pos:start="3009:39" pos:end="3009:41"><expr pos:start="3009:39" pos:end="3009:41"><name pos:start="3009:39" pos:end="3009:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="3013:21" pos:end="3013:26">break;</break>



                <case pos:start="3017:17" pos:end="3017:23">case <expr pos:start="3017:22" pos:end="3017:22"><literal type="number" pos:start="3017:22" pos:end="3017:22">8</literal></expr>:</case> <comment type="block" pos:start="3017:25" pos:end="3017:32">/*LOOP*/</comment>

                <case pos:start="3019:17" pos:end="3019:23">case <expr pos:start="3019:22" pos:end="3019:22"><literal type="number" pos:start="3019:22" pos:end="3019:22">9</literal></expr>:</case> <comment type="block" pos:start="3019:25" pos:end="3019:35">/*LOOPNEZ*/</comment>

                <case pos:start="3021:17" pos:end="3021:24">case <expr pos:start="3021:22" pos:end="3021:23"><literal type="number" pos:start="3021:22" pos:end="3021:23">10</literal></expr>:</case> <comment type="block" pos:start="3021:26" pos:end="3021:36">/*LOOPGTZ*/</comment>

                    <expr_stmt pos:start="3023:21" pos:end="3023:51"><expr pos:start="3023:21" pos:end="3023:50"><call pos:start="3023:21" pos:end="3023:50"><name pos:start="3023:21" pos:end="3023:30">HAS_OPTION</name><argument_list pos:start="3023:31" pos:end="3023:50">(<argument pos:start="3023:32" pos:end="3023:49"><expr pos:start="3023:32" pos:end="3023:49"><name pos:start="3023:32" pos:end="3023:49">XTENSA_OPTION_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3025:21" pos:end="3025:50"><expr pos:start="3025:21" pos:end="3025:49"><call pos:start="3025:21" pos:end="3025:49"><name pos:start="3025:21" pos:end="3025:37">gen_window_check1</name><argument_list pos:start="3025:38" pos:end="3025:49">(<argument pos:start="3025:39" pos:end="3025:40"><expr pos:start="3025:39" pos:end="3025:40"><name pos:start="3025:39" pos:end="3025:40">dc</name></expr></argument>, <argument pos:start="3025:43" pos:end="3025:48"><expr pos:start="3025:43" pos:end="3025:48"><name pos:start="3025:43" pos:end="3025:48">RRI8_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <block pos:start="3027:21" pos:end="3065:21">{<block_content pos:start="3029:25" pos:end="3063:54">

                        <decl_stmt pos:start="3029:25" pos:end="3029:63"><decl pos:start="3029:25" pos:end="3029:62"><type pos:start="3029:25" pos:end="3029:32"><name pos:start="3029:25" pos:end="3029:32">uint32_t</name></type> <name pos:start="3029:34" pos:end="3029:37">lend</name> <init pos:start="3029:39" pos:end="3029:62">= <expr pos:start="3029:41" pos:end="3029:62"><name pos:start="3029:41" pos:end="3029:46"><name pos:start="3029:41" pos:end="3029:42">dc</name><operator pos:start="3029:43" pos:end="3029:44">-&gt;</operator><name pos:start="3029:45" pos:end="3029:46">pc</name></name> <operator pos:start="3029:48" pos:end="3029:48">+</operator> <name pos:start="3029:50" pos:end="3029:58">RRI8_IMM8</name> <operator pos:start="3029:60" pos:end="3029:60">+</operator> <literal type="number" pos:start="3029:62" pos:end="3029:62">4</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="3031:25" pos:end="3031:59"><decl pos:start="3031:25" pos:end="3031:58"><type pos:start="3031:25" pos:end="3031:32"><name pos:start="3031:25" pos:end="3031:32">TCGv_i32</name></type> <name pos:start="3031:34" pos:end="3031:36">tmp</name> <init pos:start="3031:38" pos:end="3031:58">= <expr pos:start="3031:40" pos:end="3031:58"><call pos:start="3031:40" pos:end="3031:58"><name pos:start="3031:40" pos:end="3031:52">tcg_const_i32</name><argument_list pos:start="3031:53" pos:end="3031:58">(<argument pos:start="3031:54" pos:end="3031:57"><expr pos:start="3031:54" pos:end="3031:57"><name pos:start="3031:54" pos:end="3031:57">lend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="3035:25" pos:end="3035:75"><expr pos:start="3035:25" pos:end="3035:74"><call pos:start="3035:25" pos:end="3035:74"><name pos:start="3035:25" pos:end="3035:40">tcg_gen_subi_i32</name><argument_list pos:start="3035:41" pos:end="3035:74">(<argument pos:start="3035:42" pos:end="3035:55"><expr pos:start="3035:42" pos:end="3035:55"><name pos:start="3035:42" pos:end="3035:55"><name pos:start="3035:42" pos:end="3035:47">cpu_SR</name><index pos:start="3035:48" pos:end="3035:55">[<expr pos:start="3035:49" pos:end="3035:54"><name pos:start="3035:49" pos:end="3035:54">LCOUNT</name></expr>]</index></name></expr></argument>, <argument pos:start="3035:58" pos:end="3035:70"><expr pos:start="3035:58" pos:end="3035:70"><name pos:start="3035:58" pos:end="3035:70"><name pos:start="3035:58" pos:end="3035:62">cpu_R</name><index pos:start="3035:63" pos:end="3035:70">[<expr pos:start="3035:64" pos:end="3035:69"><name pos:start="3035:64" pos:end="3035:69">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3035:73" pos:end="3035:73"><expr pos:start="3035:73" pos:end="3035:73"><literal type="number" pos:start="3035:73" pos:end="3035:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3037:25" pos:end="3037:68"><expr pos:start="3037:25" pos:end="3037:67"><call pos:start="3037:25" pos:end="3037:67"><name pos:start="3037:25" pos:end="3037:40">tcg_gen_movi_i32</name><argument_list pos:start="3037:41" pos:end="3037:67">(<argument pos:start="3037:42" pos:end="3037:53"><expr pos:start="3037:42" pos:end="3037:53"><name pos:start="3037:42" pos:end="3037:53"><name pos:start="3037:42" pos:end="3037:47">cpu_SR</name><index pos:start="3037:48" pos:end="3037:53">[<expr pos:start="3037:49" pos:end="3037:52"><name pos:start="3037:49" pos:end="3037:52">LBEG</name></expr>]</index></name></expr></argument>, <argument pos:start="3037:56" pos:end="3037:66"><expr pos:start="3037:56" pos:end="3037:66"><name pos:start="3037:56" pos:end="3037:66"><name pos:start="3037:56" pos:end="3037:57">dc</name><operator pos:start="3037:58" pos:end="3037:59">-&gt;</operator><name pos:start="3037:60" pos:end="3037:66">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3039:25" pos:end="3039:52"><expr pos:start="3039:25" pos:end="3039:51"><call pos:start="3039:25" pos:end="3039:51"><name pos:start="3039:25" pos:end="3039:36">gen_wsr_lend</name><argument_list pos:start="3039:37" pos:end="3039:51">(<argument pos:start="3039:38" pos:end="3039:39"><expr pos:start="3039:38" pos:end="3039:39"><name pos:start="3039:38" pos:end="3039:39">dc</name></expr></argument>, <argument pos:start="3039:42" pos:end="3039:45"><expr pos:start="3039:42" pos:end="3039:45"><name pos:start="3039:42" pos:end="3039:45">LEND</name></expr></argument>, <argument pos:start="3039:48" pos:end="3039:50"><expr pos:start="3039:48" pos:end="3039:50"><name pos:start="3039:48" pos:end="3039:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3041:25" pos:end="3041:43"><expr pos:start="3041:25" pos:end="3041:42"><call pos:start="3041:25" pos:end="3041:42"><name pos:start="3041:25" pos:end="3041:37">tcg_temp_free</name><argument_list pos:start="3041:38" pos:end="3041:42">(<argument pos:start="3041:39" pos:end="3041:41"><expr pos:start="3041:39" pos:end="3041:41"><name pos:start="3041:39" pos:end="3041:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="3045:25" pos:end="3059:25"><if pos:start="3045:25" pos:end="3059:25">if <condition pos:start="3045:28" pos:end="3045:39">(<expr pos:start="3045:29" pos:end="3045:38"><name pos:start="3045:29" pos:end="3045:34">BRI8_R</name> <operator pos:start="3045:36" pos:end="3045:36">&gt;</operator> <literal type="number" pos:start="3045:38" pos:end="3045:38">8</literal></expr>)</condition> <block pos:start="3045:41" pos:end="3059:25">{<block_content pos:start="3047:29" pos:end="3057:49">

                            <decl_stmt pos:start="3047:29" pos:end="3047:56"><decl pos:start="3047:29" pos:end="3047:55"><type pos:start="3047:29" pos:end="3047:31"><name pos:start="3047:29" pos:end="3047:31">int</name></type> <name pos:start="3047:33" pos:end="3047:37">label</name> <init pos:start="3047:39" pos:end="3047:55">= <expr pos:start="3047:41" pos:end="3047:55"><call pos:start="3047:41" pos:end="3047:55"><name pos:start="3047:41" pos:end="3047:53">gen_new_label</name><argument_list pos:start="3047:54" pos:end="3047:55">()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="3049:29" pos:end="3053:61"><expr pos:start="3049:29" pos:end="3053:60"><call pos:start="3049:29" pos:end="3053:60"><name pos:start="3049:29" pos:end="3049:47">tcg_gen_brcondi_i32</name><argument_list pos:start="3049:48" pos:end="3053:60">(

                                    <argument pos:start="3051:37" pos:end="3051:75"><expr pos:start="3051:37" pos:end="3051:75"><ternary pos:start="3051:37" pos:end="3051:75"><condition pos:start="3051:37" pos:end="3051:49"><expr pos:start="3051:37" pos:end="3051:47"><name pos:start="3051:37" pos:end="3051:42">BRI8_R</name> <operator pos:start="3051:44" pos:end="3051:45">==</operator> <literal type="number" pos:start="3051:47" pos:end="3051:47">9</literal></expr> ?</condition><then pos:start="3051:51" pos:end="3051:61"> <expr pos:start="3051:51" pos:end="3051:61"><name pos:start="3051:51" pos:end="3051:61">TCG_COND_NE</name></expr> </then><else pos:start="3051:63" pos:end="3051:75">: <expr pos:start="3051:65" pos:end="3051:75"><name pos:start="3051:65" pos:end="3051:75">TCG_COND_GT</name></expr></else></ternary></expr></argument>,

                                    <argument pos:start="3053:37" pos:end="3053:49"><expr pos:start="3053:37" pos:end="3053:49"><name pos:start="3053:37" pos:end="3053:49"><name pos:start="3053:37" pos:end="3053:41">cpu_R</name><index pos:start="3053:42" pos:end="3053:49">[<expr pos:start="3053:43" pos:end="3053:48"><name pos:start="3053:43" pos:end="3053:48">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3053:52" pos:end="3053:52"><expr pos:start="3053:52" pos:end="3053:52"><literal type="number" pos:start="3053:52" pos:end="3053:52">0</literal></expr></argument>, <argument pos:start="3053:55" pos:end="3053:59"><expr pos:start="3053:55" pos:end="3053:59"><name pos:start="3053:55" pos:end="3053:59">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3055:29" pos:end="3055:51"><expr pos:start="3055:29" pos:end="3055:50"><call pos:start="3055:29" pos:end="3055:50"><name pos:start="3055:29" pos:end="3055:37">gen_jumpi</name><argument_list pos:start="3055:38" pos:end="3055:50">(<argument pos:start="3055:39" pos:end="3055:40"><expr pos:start="3055:39" pos:end="3055:40"><name pos:start="3055:39" pos:end="3055:40">dc</name></expr></argument>, <argument pos:start="3055:43" pos:end="3055:46"><expr pos:start="3055:43" pos:end="3055:46"><name pos:start="3055:43" pos:end="3055:46">lend</name></expr></argument>, <argument pos:start="3055:49" pos:end="3055:49"><expr pos:start="3055:49" pos:end="3055:49"><literal type="number" pos:start="3055:49" pos:end="3055:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3057:29" pos:end="3057:49"><expr pos:start="3057:29" pos:end="3057:48"><call pos:start="3057:29" pos:end="3057:48"><name pos:start="3057:29" pos:end="3057:41">gen_set_label</name><argument_list pos:start="3057:42" pos:end="3057:48">(<argument pos:start="3057:43" pos:end="3057:47"><expr pos:start="3057:43" pos:end="3057:47"><name pos:start="3057:43" pos:end="3057:47">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>



                        <expr_stmt pos:start="3063:25" pos:end="3063:54"><expr pos:start="3063:25" pos:end="3063:53"><call pos:start="3063:25" pos:end="3063:53"><name pos:start="3063:25" pos:end="3063:33">gen_jumpi</name><argument_list pos:start="3063:34" pos:end="3063:53">(<argument pos:start="3063:35" pos:end="3063:36"><expr pos:start="3063:35" pos:end="3063:36"><name pos:start="3063:35" pos:end="3063:36">dc</name></expr></argument>, <argument pos:start="3063:39" pos:end="3063:49"><expr pos:start="3063:39" pos:end="3063:49"><name pos:start="3063:39" pos:end="3063:49"><name pos:start="3063:39" pos:end="3063:40">dc</name><operator pos:start="3063:41" pos:end="3063:42">-&gt;</operator><name pos:start="3063:43" pos:end="3063:49">next_pc</name></name></expr></argument>, <argument pos:start="3063:52" pos:end="3063:52"><expr pos:start="3063:52" pos:end="3063:52"><literal type="number" pos:start="3063:52" pos:end="3063:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="3067:21" pos:end="3067:26">break;</break>



                <default pos:start="3071:17" pos:end="3071:24">default:</default> <comment type="block" pos:start="3071:26" pos:end="3071:37">/*reserved*/</comment>

                    <expr_stmt pos:start="3073:21" pos:end="3073:31"><expr pos:start="3073:21" pos:end="3073:30"><call pos:start="3073:21" pos:end="3073:30"><name pos:start="3073:21" pos:end="3073:28">RESERVED</name><argument_list pos:start="3073:29" pos:end="3073:30">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3075:21" pos:end="3075:26">break;</break>



                </block_content>}</block></switch>

                <break pos:start="3081:17" pos:end="3081:22">break;</break>



            <case pos:start="3085:13" pos:end="3085:19">case <expr pos:start="3085:18" pos:end="3085:18"><literal type="number" pos:start="3085:18" pos:end="3085:18">2</literal></expr>:</case> <comment type="block" pos:start="3085:21" pos:end="3085:29">/*BLTUI*/</comment>

            <case pos:start="3087:13" pos:end="3087:19">case <expr pos:start="3087:18" pos:end="3087:18"><literal type="number" pos:start="3087:18" pos:end="3087:18">3</literal></expr>:</case> <comment type="block" pos:start="3087:21" pos:end="3087:29">/*BGEUI*/</comment>

                <expr_stmt pos:start="3089:17" pos:end="3089:46"><expr pos:start="3089:17" pos:end="3089:45"><call pos:start="3089:17" pos:end="3089:45"><name pos:start="3089:17" pos:end="3089:33">gen_window_check1</name><argument_list pos:start="3089:34" pos:end="3089:45">(<argument pos:start="3089:35" pos:end="3089:36"><expr pos:start="3089:35" pos:end="3089:36"><name pos:start="3089:35" pos:end="3089:36">dc</name></expr></argument>, <argument pos:start="3089:39" pos:end="3089:44"><expr pos:start="3089:39" pos:end="3089:44"><name pos:start="3089:39" pos:end="3089:44">BRI8_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3091:17" pos:end="3093:75"><expr pos:start="3091:17" pos:end="3093:74"><call pos:start="3091:17" pos:end="3093:74"><name pos:start="3091:17" pos:end="3091:27">gen_brcondi</name><argument_list pos:start="3091:28" pos:end="3093:74">(<argument pos:start="3091:29" pos:end="3091:30"><expr pos:start="3091:29" pos:end="3091:30"><name pos:start="3091:29" pos:end="3091:30">dc</name></expr></argument>, <argument pos:start="3091:33" pos:end="3091:73"><expr pos:start="3091:33" pos:end="3091:73"><ternary pos:start="3091:33" pos:end="3091:73"><condition pos:start="3091:33" pos:end="3091:45"><expr pos:start="3091:33" pos:end="3091:43"><name pos:start="3091:33" pos:end="3091:38">BRI8_M</name> <operator pos:start="3091:40" pos:end="3091:41">==</operator> <literal type="number" pos:start="3091:43" pos:end="3091:43">2</literal></expr> ?</condition><then pos:start="3091:47" pos:end="3091:58"> <expr pos:start="3091:47" pos:end="3091:58"><name pos:start="3091:47" pos:end="3091:58">TCG_COND_LTU</name></expr> </then><else pos:start="3091:60" pos:end="3091:73">: <expr pos:start="3091:62" pos:end="3091:73"><name pos:start="3091:62" pos:end="3091:73">TCG_COND_GEU</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="3093:25" pos:end="3093:37"><expr pos:start="3093:25" pos:end="3093:37"><name pos:start="3093:25" pos:end="3093:37"><name pos:start="3093:25" pos:end="3093:29">cpu_R</name><index pos:start="3093:30" pos:end="3093:37">[<expr pos:start="3093:31" pos:end="3093:36"><name pos:start="3093:31" pos:end="3093:36">BRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3093:40" pos:end="3093:55"><expr pos:start="3093:40" pos:end="3093:55"><name pos:start="3093:40" pos:end="3093:55"><name pos:start="3093:40" pos:end="3093:47">B4CONSTU</name><index pos:start="3093:48" pos:end="3093:55">[<expr pos:start="3093:49" pos:end="3093:54"><name pos:start="3093:49" pos:end="3093:54">BRI8_R</name></expr>]</index></name></expr></argument>, <argument pos:start="3093:58" pos:end="3093:73"><expr pos:start="3093:58" pos:end="3093:73"><literal type="number" pos:start="3093:58" pos:end="3093:60">4</literal> <operator pos:start="3093:60" pos:end="3093:60">+</operator> <name pos:start="3093:62" pos:end="3093:73">BRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3095:17" pos:end="3095:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="3099:13" pos:end="3099:18">break;</break>



        </block_content>}</block></switch>

        <break pos:start="3105:9" pos:end="3105:14">break;</break>



    <case pos:start="3109:5" pos:end="3109:11">case <expr pos:start="3109:10" pos:end="3109:10"><literal type="number" pos:start="3109:10" pos:end="3109:10">7</literal></expr>:</case> <comment type="block" pos:start="3109:13" pos:end="3109:17">/*B*/</comment>

        <block pos:start="3111:9" pos:end="3251:9">{<block_content pos:start="3113:13" pos:end="3249:13">

            <decl_stmt pos:start="3113:13" pos:end="3113:69"><decl pos:start="3113:13" pos:end="3113:68"><type pos:start="3113:13" pos:end="3113:19"><name pos:start="3113:13" pos:end="3113:19">TCGCond</name></type> <name pos:start="3113:21" pos:end="3113:25">eq_ne</name> <init pos:start="3113:27" pos:end="3113:68">= <expr pos:start="3113:29" pos:end="3113:68"><ternary pos:start="3113:29" pos:end="3113:68"><condition pos:start="3113:29" pos:end="3113:42"><expr pos:start="3113:29" pos:end="3113:40"><operator pos:start="3113:29" pos:end="3113:29">(</operator><name pos:start="3113:30" pos:end="3113:35">RRI8_R</name> <operator pos:start="3113:37" pos:end="3113:37">&amp;</operator> <literal type="number" pos:start="3113:39" pos:end="3113:39">8</literal><operator pos:start="3113:40" pos:end="3113:40">)</operator></expr> ?</condition><then pos:start="3113:44" pos:end="3113:54"> <expr pos:start="3113:44" pos:end="3113:54"><name pos:start="3113:44" pos:end="3113:54">TCG_COND_NE</name></expr> </then><else pos:start="3113:56" pos:end="3113:68">: <expr pos:start="3113:58" pos:end="3113:68"><name pos:start="3113:58" pos:end="3113:68">TCG_COND_EQ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <switch pos:start="3117:13" pos:end="3249:13">switch <condition pos:start="3117:20" pos:end="3117:31">(<expr pos:start="3117:21" pos:end="3117:30"><name pos:start="3117:21" pos:end="3117:26">RRI8_R</name> <operator pos:start="3117:28" pos:end="3117:28">&amp;</operator> <literal type="number" pos:start="3117:30" pos:end="3117:30">7</literal></expr>)</condition> <block pos:start="3117:33" pos:end="3249:13">{<block_content pos:start="3119:13" pos:end="3245:22">

            <case pos:start="3119:13" pos:end="3119:19">case <expr pos:start="3119:18" pos:end="3119:18"><literal type="number" pos:start="3119:18" pos:end="3119:18">0</literal></expr>:</case> <comment type="block" pos:start="3119:21" pos:end="3119:29">/*BNONE*/</comment> <comment type="block" pos:start="3119:31" pos:end="3119:38">/*BANY*/</comment>

                <expr_stmt pos:start="3121:17" pos:end="3121:54"><expr pos:start="3121:17" pos:end="3121:53"><call pos:start="3121:17" pos:end="3121:53"><name pos:start="3121:17" pos:end="3121:33">gen_window_check2</name><argument_list pos:start="3121:34" pos:end="3121:53">(<argument pos:start="3121:35" pos:end="3121:36"><expr pos:start="3121:35" pos:end="3121:36"><name pos:start="3121:35" pos:end="3121:36">dc</name></expr></argument>, <argument pos:start="3121:39" pos:end="3121:44"><expr pos:start="3121:39" pos:end="3121:44"><name pos:start="3121:39" pos:end="3121:44">RRI8_S</name></expr></argument>, <argument pos:start="3121:47" pos:end="3121:52"><expr pos:start="3121:47" pos:end="3121:52"><name pos:start="3121:47" pos:end="3121:52">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="3123:17" pos:end="3133:17">{<block_content pos:start="3125:21" pos:end="3131:39">

                    <decl_stmt pos:start="3125:21" pos:end="3125:54"><decl pos:start="3125:21" pos:end="3125:53"><type pos:start="3125:21" pos:end="3125:28"><name pos:start="3125:21" pos:end="3125:28">TCGv_i32</name></type> <name pos:start="3125:30" pos:end="3125:32">tmp</name> <init pos:start="3125:34" pos:end="3125:53">= <expr pos:start="3125:36" pos:end="3125:53"><call pos:start="3125:36" pos:end="3125:53"><name pos:start="3125:36" pos:end="3125:51">tcg_temp_new_i32</name><argument_list pos:start="3125:52" pos:end="3125:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3127:21" pos:end="3127:71"><expr pos:start="3127:21" pos:end="3127:70"><call pos:start="3127:21" pos:end="3127:70"><name pos:start="3127:21" pos:end="3127:35">tcg_gen_and_i32</name><argument_list pos:start="3127:36" pos:end="3127:70">(<argument pos:start="3127:37" pos:end="3127:39"><expr pos:start="3127:37" pos:end="3127:39"><name pos:start="3127:37" pos:end="3127:39">tmp</name></expr></argument>, <argument pos:start="3127:42" pos:end="3127:54"><expr pos:start="3127:42" pos:end="3127:54"><name pos:start="3127:42" pos:end="3127:54"><name pos:start="3127:42" pos:end="3127:46">cpu_R</name><index pos:start="3127:47" pos:end="3127:54">[<expr pos:start="3127:48" pos:end="3127:53"><name pos:start="3127:48" pos:end="3127:53">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3127:57" pos:end="3127:69"><expr pos:start="3127:57" pos:end="3127:69"><name pos:start="3127:57" pos:end="3127:69"><name pos:start="3127:57" pos:end="3127:61">cpu_R</name><index pos:start="3127:62" pos:end="3127:69">[<expr pos:start="3127:63" pos:end="3127:68"><name pos:start="3127:63" pos:end="3127:68">RRI8_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3129:21" pos:end="3129:69"><expr pos:start="3129:21" pos:end="3129:68"><call pos:start="3129:21" pos:end="3129:68"><name pos:start="3129:21" pos:end="3129:31">gen_brcondi</name><argument_list pos:start="3129:32" pos:end="3129:68">(<argument pos:start="3129:33" pos:end="3129:34"><expr pos:start="3129:33" pos:end="3129:34"><name pos:start="3129:33" pos:end="3129:34">dc</name></expr></argument>, <argument pos:start="3129:37" pos:end="3129:41"><expr pos:start="3129:37" pos:end="3129:41"><name pos:start="3129:37" pos:end="3129:41">eq_ne</name></expr></argument>, <argument pos:start="3129:44" pos:end="3129:46"><expr pos:start="3129:44" pos:end="3129:46"><name pos:start="3129:44" pos:end="3129:46">tmp</name></expr></argument>, <argument pos:start="3129:49" pos:end="3129:49"><expr pos:start="3129:49" pos:end="3129:49"><literal type="number" pos:start="3129:49" pos:end="3129:49">0</literal></expr></argument>, <argument pos:start="3129:52" pos:end="3129:67"><expr pos:start="3129:52" pos:end="3129:67"><literal type="number" pos:start="3129:52" pos:end="3129:54">4</literal> <operator pos:start="3129:54" pos:end="3129:54">+</operator> <name pos:start="3129:56" pos:end="3129:67">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3131:21" pos:end="3131:39"><expr pos:start="3131:21" pos:end="3131:38"><call pos:start="3131:21" pos:end="3131:38"><name pos:start="3131:21" pos:end="3131:33">tcg_temp_free</name><argument_list pos:start="3131:34" pos:end="3131:38">(<argument pos:start="3131:35" pos:end="3131:37"><expr pos:start="3131:35" pos:end="3131:37"><name pos:start="3131:35" pos:end="3131:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3135:17" pos:end="3135:22">break;</break>



            <case pos:start="3139:13" pos:end="3139:19">case <expr pos:start="3139:18" pos:end="3139:18"><literal type="number" pos:start="3139:18" pos:end="3139:18">1</literal></expr>:</case> <comment type="block" pos:start="3139:21" pos:end="3139:27">/*BEQ*/</comment> <comment type="block" pos:start="3139:29" pos:end="3139:35">/*BNE*/</comment>

            <case pos:start="3141:13" pos:end="3141:19">case <expr pos:start="3141:18" pos:end="3141:18"><literal type="number" pos:start="3141:18" pos:end="3141:18">2</literal></expr>:</case> <comment type="block" pos:start="3141:21" pos:end="3141:27">/*BLT*/</comment> <comment type="block" pos:start="3141:29" pos:end="3141:35">/*BGE*/</comment>

            <case pos:start="3143:13" pos:end="3143:19">case <expr pos:start="3143:18" pos:end="3143:18"><literal type="number" pos:start="3143:18" pos:end="3143:18">3</literal></expr>:</case> <comment type="block" pos:start="3143:21" pos:end="3143:28">/*BLTU*/</comment> <comment type="block" pos:start="3143:30" pos:end="3143:37">/*BGEU*/</comment>

                <expr_stmt pos:start="3145:17" pos:end="3145:54"><expr pos:start="3145:17" pos:end="3145:53"><call pos:start="3145:17" pos:end="3145:53"><name pos:start="3145:17" pos:end="3145:33">gen_window_check2</name><argument_list pos:start="3145:34" pos:end="3145:53">(<argument pos:start="3145:35" pos:end="3145:36"><expr pos:start="3145:35" pos:end="3145:36"><name pos:start="3145:35" pos:end="3145:36">dc</name></expr></argument>, <argument pos:start="3145:39" pos:end="3145:44"><expr pos:start="3145:39" pos:end="3145:44"><name pos:start="3145:39" pos:end="3145:44">RRI8_S</name></expr></argument>, <argument pos:start="3145:47" pos:end="3145:52"><expr pos:start="3145:47" pos:end="3145:52"><name pos:start="3145:47" pos:end="3145:52">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="3147:17" pos:end="3169:17">{<block_content pos:start="3149:21" pos:end="3167:46">

                    <decl_stmt pos:start="3149:21" pos:end="3163:22"><decl pos:start="3149:21" pos:end="3163:21"><type pos:start="3149:21" pos:end="3149:40"><specifier pos:start="3149:21" pos:end="3149:26">static</specifier> <specifier pos:start="3149:28" pos:end="3149:32">const</specifier> <name pos:start="3149:34" pos:end="3149:40">TCGCond</name></type> <name pos:start="3149:42" pos:end="3149:47"><name pos:start="3149:42" pos:end="3149:45">cond</name><index pos:start="3149:46" pos:end="3149:47">[]</index></name> <init pos:start="3149:49" pos:end="3163:21">= <expr pos:start="3149:51" pos:end="3163:21"><block pos:start="3149:51" pos:end="3163:21">{

                        <expr pos:start="3151:25" pos:end="3151:41"><index pos:start="3151:25" pos:end="3151:27">[<expr pos:start="3151:26" pos:end="3151:26"><literal type="number" pos:start="3151:26" pos:end="3151:26">1</literal></expr>]</index> <operator pos:start="3151:29" pos:end="3151:29">=</operator> <name pos:start="3151:31" pos:end="3151:41">TCG_COND_EQ</name></expr>,

                        <expr pos:start="3153:25" pos:end="3153:41"><index pos:start="3153:25" pos:end="3153:27">[<expr pos:start="3153:26" pos:end="3153:26"><literal type="number" pos:start="3153:26" pos:end="3153:26">2</literal></expr>]</index> <operator pos:start="3153:29" pos:end="3153:29">=</operator> <name pos:start="3153:31" pos:end="3153:41">TCG_COND_LT</name></expr>,

                        <expr pos:start="3155:25" pos:end="3155:42"><index pos:start="3155:25" pos:end="3155:27">[<expr pos:start="3155:26" pos:end="3155:26"><literal type="number" pos:start="3155:26" pos:end="3155:26">3</literal></expr>]</index> <operator pos:start="3155:29" pos:end="3155:29">=</operator> <name pos:start="3155:31" pos:end="3155:42">TCG_COND_LTU</name></expr>,

                        <expr pos:start="3157:25" pos:end="3157:41"><index pos:start="3157:25" pos:end="3157:27">[<expr pos:start="3157:26" pos:end="3157:26"><literal type="number" pos:start="3157:26" pos:end="3157:26">9</literal></expr>]</index> <operator pos:start="3157:29" pos:end="3157:29">=</operator> <name pos:start="3157:31" pos:end="3157:41">TCG_COND_NE</name></expr>,

                        <expr pos:start="3159:25" pos:end="3159:42"><index pos:start="3159:25" pos:end="3159:28">[<expr pos:start="3159:26" pos:end="3159:27"><literal type="number" pos:start="3159:26" pos:end="3159:27">10</literal></expr>]</index> <operator pos:start="3159:30" pos:end="3159:30">=</operator> <name pos:start="3159:32" pos:end="3159:42">TCG_COND_GE</name></expr>,

                        <expr pos:start="3161:25" pos:end="3161:43"><index pos:start="3161:25" pos:end="3161:28">[<expr pos:start="3161:26" pos:end="3161:27"><literal type="number" pos:start="3161:26" pos:end="3161:27">11</literal></expr>]</index> <operator pos:start="3161:30" pos:end="3161:30">=</operator> <name pos:start="3161:32" pos:end="3161:43">TCG_COND_GEU</name></expr>,

                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3165:21" pos:end="3167:46"><expr pos:start="3165:21" pos:end="3167:45"><call pos:start="3165:21" pos:end="3167:45"><name pos:start="3165:21" pos:end="3165:30">gen_brcond</name><argument_list pos:start="3165:31" pos:end="3167:45">(<argument pos:start="3165:32" pos:end="3165:33"><expr pos:start="3165:32" pos:end="3165:33"><name pos:start="3165:32" pos:end="3165:33">dc</name></expr></argument>, <argument pos:start="3165:36" pos:end="3165:47"><expr pos:start="3165:36" pos:end="3165:47"><name pos:start="3165:36" pos:end="3165:47"><name pos:start="3165:36" pos:end="3165:39">cond</name><index pos:start="3165:40" pos:end="3165:47">[<expr pos:start="3165:41" pos:end="3165:46"><name pos:start="3165:41" pos:end="3165:46">RRI8_R</name></expr>]</index></name></expr></argument>, <argument pos:start="3165:50" pos:end="3165:62"><expr pos:start="3165:50" pos:end="3165:62"><name pos:start="3165:50" pos:end="3165:62"><name pos:start="3165:50" pos:end="3165:54">cpu_R</name><index pos:start="3165:55" pos:end="3165:62">[<expr pos:start="3165:56" pos:end="3165:61"><name pos:start="3165:56" pos:end="3165:61">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3165:65" pos:end="3165:77"><expr pos:start="3165:65" pos:end="3165:77"><name pos:start="3165:65" pos:end="3165:77"><name pos:start="3165:65" pos:end="3165:69">cpu_R</name><index pos:start="3165:70" pos:end="3165:77">[<expr pos:start="3165:71" pos:end="3165:76"><name pos:start="3165:71" pos:end="3165:76">RRI8_T</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="3167:29" pos:end="3167:44"><expr pos:start="3167:29" pos:end="3167:44"><literal type="number" pos:start="3167:29" pos:end="3167:31">4</literal> <operator pos:start="3167:31" pos:end="3167:31">+</operator> <name pos:start="3167:33" pos:end="3167:44">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3171:17" pos:end="3171:22">break;</break>



            <case pos:start="3175:13" pos:end="3175:19">case <expr pos:start="3175:18" pos:end="3175:18"><literal type="number" pos:start="3175:18" pos:end="3175:18">4</literal></expr>:</case> <comment type="block" pos:start="3175:21" pos:end="3175:28">/*BALL*/</comment> <comment type="block" pos:start="3175:30" pos:end="3175:38">/*BNALL*/</comment>

                <expr_stmt pos:start="3177:17" pos:end="3177:54"><expr pos:start="3177:17" pos:end="3177:53"><call pos:start="3177:17" pos:end="3177:53"><name pos:start="3177:17" pos:end="3177:33">gen_window_check2</name><argument_list pos:start="3177:34" pos:end="3177:53">(<argument pos:start="3177:35" pos:end="3177:36"><expr pos:start="3177:35" pos:end="3177:36"><name pos:start="3177:35" pos:end="3177:36">dc</name></expr></argument>, <argument pos:start="3177:39" pos:end="3177:44"><expr pos:start="3177:39" pos:end="3177:44"><name pos:start="3177:39" pos:end="3177:44">RRI8_S</name></expr></argument>, <argument pos:start="3177:47" pos:end="3177:52"><expr pos:start="3177:47" pos:end="3177:52"><name pos:start="3177:47" pos:end="3177:52">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="3179:17" pos:end="3191:17">{<block_content pos:start="3181:21" pos:end="3189:39">

                    <decl_stmt pos:start="3181:21" pos:end="3181:54"><decl pos:start="3181:21" pos:end="3181:53"><type pos:start="3181:21" pos:end="3181:28"><name pos:start="3181:21" pos:end="3181:28">TCGv_i32</name></type> <name pos:start="3181:30" pos:end="3181:32">tmp</name> <init pos:start="3181:34" pos:end="3181:53">= <expr pos:start="3181:36" pos:end="3181:53"><call pos:start="3181:36" pos:end="3181:53"><name pos:start="3181:36" pos:end="3181:51">tcg_temp_new_i32</name><argument_list pos:start="3181:52" pos:end="3181:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3183:21" pos:end="3183:71"><expr pos:start="3183:21" pos:end="3183:70"><call pos:start="3183:21" pos:end="3183:70"><name pos:start="3183:21" pos:end="3183:35">tcg_gen_and_i32</name><argument_list pos:start="3183:36" pos:end="3183:70">(<argument pos:start="3183:37" pos:end="3183:39"><expr pos:start="3183:37" pos:end="3183:39"><name pos:start="3183:37" pos:end="3183:39">tmp</name></expr></argument>, <argument pos:start="3183:42" pos:end="3183:54"><expr pos:start="3183:42" pos:end="3183:54"><name pos:start="3183:42" pos:end="3183:54"><name pos:start="3183:42" pos:end="3183:46">cpu_R</name><index pos:start="3183:47" pos:end="3183:54">[<expr pos:start="3183:48" pos:end="3183:53"><name pos:start="3183:48" pos:end="3183:53">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3183:57" pos:end="3183:69"><expr pos:start="3183:57" pos:end="3183:69"><name pos:start="3183:57" pos:end="3183:69"><name pos:start="3183:57" pos:end="3183:61">cpu_R</name><index pos:start="3183:62" pos:end="3183:69">[<expr pos:start="3183:63" pos:end="3183:68"><name pos:start="3183:63" pos:end="3183:68">RRI8_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3185:21" pos:end="3187:46"><expr pos:start="3185:21" pos:end="3187:45"><call pos:start="3185:21" pos:end="3187:45"><name pos:start="3185:21" pos:end="3185:30">gen_brcond</name><argument_list pos:start="3185:31" pos:end="3187:45">(<argument pos:start="3185:32" pos:end="3185:33"><expr pos:start="3185:32" pos:end="3185:33"><name pos:start="3185:32" pos:end="3185:33">dc</name></expr></argument>, <argument pos:start="3185:36" pos:end="3185:40"><expr pos:start="3185:36" pos:end="3185:40"><name pos:start="3185:36" pos:end="3185:40">eq_ne</name></expr></argument>, <argument pos:start="3185:43" pos:end="3185:45"><expr pos:start="3185:43" pos:end="3185:45"><name pos:start="3185:43" pos:end="3185:45">tmp</name></expr></argument>, <argument pos:start="3185:48" pos:end="3185:60"><expr pos:start="3185:48" pos:end="3185:60"><name pos:start="3185:48" pos:end="3185:60"><name pos:start="3185:48" pos:end="3185:52">cpu_R</name><index pos:start="3185:53" pos:end="3185:60">[<expr pos:start="3185:54" pos:end="3185:59"><name pos:start="3185:54" pos:end="3185:59">RRI8_T</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="3187:29" pos:end="3187:44"><expr pos:start="3187:29" pos:end="3187:44"><literal type="number" pos:start="3187:29" pos:end="3187:31">4</literal> <operator pos:start="3187:31" pos:end="3187:31">+</operator> <name pos:start="3187:33" pos:end="3187:44">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3189:21" pos:end="3189:39"><expr pos:start="3189:21" pos:end="3189:38"><call pos:start="3189:21" pos:end="3189:38"><name pos:start="3189:21" pos:end="3189:33">tcg_temp_free</name><argument_list pos:start="3189:34" pos:end="3189:38">(<argument pos:start="3189:35" pos:end="3189:37"><expr pos:start="3189:35" pos:end="3189:37"><name pos:start="3189:35" pos:end="3189:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3193:17" pos:end="3193:22">break;</break>



            <case pos:start="3197:13" pos:end="3197:19">case <expr pos:start="3197:18" pos:end="3197:18"><literal type="number" pos:start="3197:18" pos:end="3197:18">5</literal></expr>:</case> <comment type="block" pos:start="3197:21" pos:end="3197:27">/*BBC*/</comment> <comment type="block" pos:start="3197:29" pos:end="3197:35">/*BBS*/</comment>

                <expr_stmt pos:start="3199:17" pos:end="3199:54"><expr pos:start="3199:17" pos:end="3199:53"><call pos:start="3199:17" pos:end="3199:53"><name pos:start="3199:17" pos:end="3199:33">gen_window_check2</name><argument_list pos:start="3199:34" pos:end="3199:53">(<argument pos:start="3199:35" pos:end="3199:36"><expr pos:start="3199:35" pos:end="3199:36"><name pos:start="3199:35" pos:end="3199:36">dc</name></expr></argument>, <argument pos:start="3199:39" pos:end="3199:44"><expr pos:start="3199:39" pos:end="3199:44"><name pos:start="3199:39" pos:end="3199:44">RRI8_S</name></expr></argument>, <argument pos:start="3199:47" pos:end="3199:52"><expr pos:start="3199:47" pos:end="3199:52"><name pos:start="3199:47" pos:end="3199:52">RRI8_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="3201:17" pos:end="3219:17">{<block_content pos:start="3203:21" pos:end="3217:39">

                    <decl_stmt pos:start="3203:21" pos:end="3203:52"><decl pos:start="3203:21" pos:end="3203:51"><type pos:start="3203:21" pos:end="3203:28"><name pos:start="3203:21" pos:end="3203:28">TCGv_i32</name></type> <name pos:start="3203:30" pos:end="3203:32">bit</name> <init pos:start="3203:34" pos:end="3203:51">= <expr pos:start="3203:36" pos:end="3203:51"><call pos:start="3203:36" pos:end="3203:51"><name pos:start="3203:36" pos:end="3203:48">tcg_const_i32</name><argument_list pos:start="3203:49" pos:end="3203:51">(<argument pos:start="3203:50" pos:end="3203:50"><expr pos:start="3203:50" pos:end="3203:50"><literal type="number" pos:start="3203:50" pos:end="3203:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="3205:21" pos:end="3205:54"><decl pos:start="3205:21" pos:end="3205:53"><type pos:start="3205:21" pos:end="3205:28"><name pos:start="3205:21" pos:end="3205:28">TCGv_i32</name></type> <name pos:start="3205:30" pos:end="3205:32">tmp</name> <init pos:start="3205:34" pos:end="3205:53">= <expr pos:start="3205:36" pos:end="3205:53"><call pos:start="3205:36" pos:end="3205:53"><name pos:start="3205:36" pos:end="3205:51">tcg_temp_new_i32</name><argument_list pos:start="3205:52" pos:end="3205:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3207:21" pos:end="3207:63"><expr pos:start="3207:21" pos:end="3207:62"><call pos:start="3207:21" pos:end="3207:62"><name pos:start="3207:21" pos:end="3207:36">tcg_gen_andi_i32</name><argument_list pos:start="3207:37" pos:end="3207:62">(<argument pos:start="3207:38" pos:end="3207:40"><expr pos:start="3207:38" pos:end="3207:40"><name pos:start="3207:38" pos:end="3207:40">tmp</name></expr></argument>, <argument pos:start="3207:43" pos:end="3207:55"><expr pos:start="3207:43" pos:end="3207:55"><name pos:start="3207:43" pos:end="3207:55"><name pos:start="3207:43" pos:end="3207:47">cpu_R</name><index pos:start="3207:48" pos:end="3207:55">[<expr pos:start="3207:49" pos:end="3207:54"><name pos:start="3207:49" pos:end="3207:54">RRI8_T</name></expr>]</index></name></expr></argument>, <argument pos:start="3207:58" pos:end="3207:61"><expr pos:start="3207:58" pos:end="3207:61"><literal type="number" pos:start="3207:58" pos:end="3207:61">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3209:21" pos:end="3209:51"><expr pos:start="3209:21" pos:end="3209:50"><call pos:start="3209:21" pos:end="3209:50"><name pos:start="3209:21" pos:end="3209:35">tcg_gen_shl_i32</name><argument_list pos:start="3209:36" pos:end="3209:50">(<argument pos:start="3209:37" pos:end="3209:39"><expr pos:start="3209:37" pos:end="3209:39"><name pos:start="3209:37" pos:end="3209:39">bit</name></expr></argument>, <argument pos:start="3209:42" pos:end="3209:44"><expr pos:start="3209:42" pos:end="3209:44"><name pos:start="3209:42" pos:end="3209:44">bit</name></expr></argument>, <argument pos:start="3209:47" pos:end="3209:49"><expr pos:start="3209:47" pos:end="3209:49"><name pos:start="3209:47" pos:end="3209:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3211:21" pos:end="3211:61"><expr pos:start="3211:21" pos:end="3211:60"><call pos:start="3211:21" pos:end="3211:60"><name pos:start="3211:21" pos:end="3211:35">tcg_gen_and_i32</name><argument_list pos:start="3211:36" pos:end="3211:60">(<argument pos:start="3211:37" pos:end="3211:39"><expr pos:start="3211:37" pos:end="3211:39"><name pos:start="3211:37" pos:end="3211:39">tmp</name></expr></argument>, <argument pos:start="3211:42" pos:end="3211:54"><expr pos:start="3211:42" pos:end="3211:54"><name pos:start="3211:42" pos:end="3211:54"><name pos:start="3211:42" pos:end="3211:46">cpu_R</name><index pos:start="3211:47" pos:end="3211:54">[<expr pos:start="3211:48" pos:end="3211:53"><name pos:start="3211:48" pos:end="3211:53">RRI8_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3211:57" pos:end="3211:59"><expr pos:start="3211:57" pos:end="3211:59"><name pos:start="3211:57" pos:end="3211:59">bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3213:21" pos:end="3213:69"><expr pos:start="3213:21" pos:end="3213:68"><call pos:start="3213:21" pos:end="3213:68"><name pos:start="3213:21" pos:end="3213:31">gen_brcondi</name><argument_list pos:start="3213:32" pos:end="3213:68">(<argument pos:start="3213:33" pos:end="3213:34"><expr pos:start="3213:33" pos:end="3213:34"><name pos:start="3213:33" pos:end="3213:34">dc</name></expr></argument>, <argument pos:start="3213:37" pos:end="3213:41"><expr pos:start="3213:37" pos:end="3213:41"><name pos:start="3213:37" pos:end="3213:41">eq_ne</name></expr></argument>, <argument pos:start="3213:44" pos:end="3213:46"><expr pos:start="3213:44" pos:end="3213:46"><name pos:start="3213:44" pos:end="3213:46">tmp</name></expr></argument>, <argument pos:start="3213:49" pos:end="3213:49"><expr pos:start="3213:49" pos:end="3213:49"><literal type="number" pos:start="3213:49" pos:end="3213:49">0</literal></expr></argument>, <argument pos:start="3213:52" pos:end="3213:67"><expr pos:start="3213:52" pos:end="3213:67"><literal type="number" pos:start="3213:52" pos:end="3213:54">4</literal> <operator pos:start="3213:54" pos:end="3213:54">+</operator> <name pos:start="3213:56" pos:end="3213:67">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3215:21" pos:end="3215:39"><expr pos:start="3215:21" pos:end="3215:38"><call pos:start="3215:21" pos:end="3215:38"><name pos:start="3215:21" pos:end="3215:33">tcg_temp_free</name><argument_list pos:start="3215:34" pos:end="3215:38">(<argument pos:start="3215:35" pos:end="3215:37"><expr pos:start="3215:35" pos:end="3215:37"><name pos:start="3215:35" pos:end="3215:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3217:21" pos:end="3217:39"><expr pos:start="3217:21" pos:end="3217:38"><call pos:start="3217:21" pos:end="3217:38"><name pos:start="3217:21" pos:end="3217:33">tcg_temp_free</name><argument_list pos:start="3217:34" pos:end="3217:38">(<argument pos:start="3217:35" pos:end="3217:37"><expr pos:start="3217:35" pos:end="3217:37"><name pos:start="3217:35" pos:end="3217:37">bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3221:17" pos:end="3221:22">break;</break>



            <case pos:start="3225:13" pos:end="3225:19">case <expr pos:start="3225:18" pos:end="3225:18"><literal type="number" pos:start="3225:18" pos:end="3225:18">6</literal></expr>:</case> <comment type="block" pos:start="3225:21" pos:end="3225:28">/*BBCI*/</comment> <comment type="block" pos:start="3225:30" pos:end="3225:37">/*BBSI*/</comment>

            <case pos:start="3227:13" pos:end="3227:19">case <expr pos:start="3227:18" pos:end="3227:18"><literal type="number" pos:start="3227:18" pos:end="3227:18">7</literal></expr>:</case>

                <expr_stmt pos:start="3229:17" pos:end="3229:46"><expr pos:start="3229:17" pos:end="3229:45"><call pos:start="3229:17" pos:end="3229:45"><name pos:start="3229:17" pos:end="3229:33">gen_window_check1</name><argument_list pos:start="3229:34" pos:end="3229:45">(<argument pos:start="3229:35" pos:end="3229:36"><expr pos:start="3229:35" pos:end="3229:36"><name pos:start="3229:35" pos:end="3229:36">dc</name></expr></argument>, <argument pos:start="3229:39" pos:end="3229:44"><expr pos:start="3229:39" pos:end="3229:44"><name pos:start="3229:39" pos:end="3229:44">RRI8_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="3231:17" pos:end="3243:17">{<block_content pos:start="3233:21" pos:end="3241:39">

                    <decl_stmt pos:start="3233:21" pos:end="3233:54"><decl pos:start="3233:21" pos:end="3233:53"><type pos:start="3233:21" pos:end="3233:28"><name pos:start="3233:21" pos:end="3233:28">TCGv_i32</name></type> <name pos:start="3233:30" pos:end="3233:32">tmp</name> <init pos:start="3233:34" pos:end="3233:53">= <expr pos:start="3233:36" pos:end="3233:53"><call pos:start="3233:36" pos:end="3233:53"><name pos:start="3233:36" pos:end="3233:51">tcg_temp_new_i32</name><argument_list pos:start="3233:52" pos:end="3233:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3235:21" pos:end="3237:65"><expr pos:start="3235:21" pos:end="3237:64"><call pos:start="3235:21" pos:end="3237:64"><name pos:start="3235:21" pos:end="3235:36">tcg_gen_andi_i32</name><argument_list pos:start="3235:37" pos:end="3237:64">(<argument pos:start="3235:38" pos:end="3235:40"><expr pos:start="3235:38" pos:end="3235:40"><name pos:start="3235:38" pos:end="3235:40">tmp</name></expr></argument>, <argument pos:start="3235:43" pos:end="3235:55"><expr pos:start="3235:43" pos:end="3235:55"><name pos:start="3235:43" pos:end="3235:55"><name pos:start="3235:43" pos:end="3235:47">cpu_R</name><index pos:start="3235:48" pos:end="3235:55">[<expr pos:start="3235:49" pos:end="3235:54"><name pos:start="3235:49" pos:end="3235:54">RRI8_S</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="3237:29" pos:end="3237:63"><expr pos:start="3237:29" pos:end="3237:63"><literal type="number" pos:start="3237:29" pos:end="3237:29">1</literal> <operator pos:start="3237:31" pos:end="3237:32">&lt;&lt;</operator> <operator pos:start="3237:34" pos:end="3237:34">(</operator><operator pos:start="3237:35" pos:end="3237:35">(</operator><operator pos:start="3237:36" pos:end="3237:36">(</operator><name pos:start="3237:37" pos:end="3237:42">RRI8_R</name> <operator pos:start="3237:44" pos:end="3237:44">&amp;</operator> <literal type="number" pos:start="3237:46" pos:end="3237:46">1</literal><operator pos:start="3237:47" pos:end="3237:47">)</operator> <operator pos:start="3237:49" pos:end="3237:50">&lt;&lt;</operator> <literal type="number" pos:start="3237:52" pos:end="3237:52">4</literal><operator pos:start="3237:53" pos:end="3237:53">)</operator> <operator pos:start="3237:55" pos:end="3237:55">|</operator> <name pos:start="3237:57" pos:end="3237:62">RRI8_T</name><operator pos:start="3237:63" pos:end="3237:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3239:21" pos:end="3239:69"><expr pos:start="3239:21" pos:end="3239:68"><call pos:start="3239:21" pos:end="3239:68"><name pos:start="3239:21" pos:end="3239:31">gen_brcondi</name><argument_list pos:start="3239:32" pos:end="3239:68">(<argument pos:start="3239:33" pos:end="3239:34"><expr pos:start="3239:33" pos:end="3239:34"><name pos:start="3239:33" pos:end="3239:34">dc</name></expr></argument>, <argument pos:start="3239:37" pos:end="3239:41"><expr pos:start="3239:37" pos:end="3239:41"><name pos:start="3239:37" pos:end="3239:41">eq_ne</name></expr></argument>, <argument pos:start="3239:44" pos:end="3239:46"><expr pos:start="3239:44" pos:end="3239:46"><name pos:start="3239:44" pos:end="3239:46">tmp</name></expr></argument>, <argument pos:start="3239:49" pos:end="3239:49"><expr pos:start="3239:49" pos:end="3239:49"><literal type="number" pos:start="3239:49" pos:end="3239:49">0</literal></expr></argument>, <argument pos:start="3239:52" pos:end="3239:67"><expr pos:start="3239:52" pos:end="3239:67"><literal type="number" pos:start="3239:52" pos:end="3239:54">4</literal> <operator pos:start="3239:54" pos:end="3239:54">+</operator> <name pos:start="3239:56" pos:end="3239:67">RRI8_IMM8_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3241:21" pos:end="3241:39"><expr pos:start="3241:21" pos:end="3241:38"><call pos:start="3241:21" pos:end="3241:38"><name pos:start="3241:21" pos:end="3241:33">tcg_temp_free</name><argument_list pos:start="3241:34" pos:end="3241:38">(<argument pos:start="3241:35" pos:end="3241:37"><expr pos:start="3241:35" pos:end="3241:37"><name pos:start="3241:35" pos:end="3241:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3245:17" pos:end="3245:22">break;</break>



            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="3253:9" pos:end="3272:0">break;</break>



<cpp:define pos:start="3257:1" pos:end="3271:19">#<cpp:directive pos:start="3257:2" pos:end="3257:7">define</cpp:directive> <cpp:macro pos:start="3257:9" pos:end="3257:35"><name pos:start="3257:9" pos:end="3257:29">gen_narrow_load_store</name><parameter_list pos:start="3257:30" pos:end="3257:35">(<parameter pos:start="3257:31" pos:end="3257:34"><type pos:start="3257:31" pos:end="3257:34"><name pos:start="3257:31" pos:end="3257:34">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="3257:37" pos:end="3271:19">do { \

            TCGv_i32 addr = tcg_temp_new_i32(); \

            gen_window_check2(dc, RRRN_S, RRRN_T); \

            tcg_gen_addi_i32(addr, cpu_R[RRRN_S], RRRN_R &lt;&lt; 2); \

            gen_load_store_alignment(dc, 2, addr, false); \

            tcg_gen_qemu_##type(cpu_R[RRRN_T], addr, dc-&gt;cring); \

            tcg_temp_free(addr); \

        } while (0)</cpp:value></cpp:define>



    <case pos:start="3275:5" pos:end="3275:11">case <expr pos:start="3275:10" pos:end="3275:10"><literal type="number" pos:start="3275:10" pos:end="3275:10">8</literal></expr>:</case> <comment type="block" pos:start="3275:13" pos:end="3275:23">/*L32I.Nn*/</comment>

        <expr_stmt pos:start="3277:9" pos:end="3277:37"><expr pos:start="3277:9" pos:end="3277:36"><call pos:start="3277:9" pos:end="3277:36"><name pos:start="3277:9" pos:end="3277:29">gen_narrow_load_store</name><argument_list pos:start="3277:30" pos:end="3277:36">(<argument pos:start="3277:31" pos:end="3277:35"><expr pos:start="3277:31" pos:end="3277:35"><name pos:start="3277:31" pos:end="3277:35">ld32u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3279:9" pos:end="3279:14">break;</break>



    <case pos:start="3283:5" pos:end="3283:11">case <expr pos:start="3283:10" pos:end="3283:10"><literal type="number" pos:start="3283:10" pos:end="3283:10">9</literal></expr>:</case> <comment type="block" pos:start="3283:13" pos:end="3283:23">/*S32I.Nn*/</comment>

        <expr_stmt pos:start="3285:9" pos:end="3285:36"><expr pos:start="3285:9" pos:end="3285:35"><call pos:start="3285:9" pos:end="3285:35"><name pos:start="3285:9" pos:end="3285:29">gen_narrow_load_store</name><argument_list pos:start="3285:30" pos:end="3285:35">(<argument pos:start="3285:31" pos:end="3285:34"><expr pos:start="3285:31" pos:end="3285:34"><name pos:start="3285:31" pos:end="3285:34">st32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3287:9" pos:end="3290:0">break;</break>

<cpp:undef pos:start="3289:1" pos:end="3289:28">#<cpp:directive pos:start="3289:2" pos:end="3289:6">undef</cpp:directive> <name pos:start="3289:8" pos:end="3289:28">gen_narrow_load_store</name></cpp:undef>



    <case pos:start="3293:5" pos:end="3293:12">case <expr pos:start="3293:10" pos:end="3293:11"><literal type="number" pos:start="3293:10" pos:end="3293:11">10</literal></expr>:</case> <comment type="block" pos:start="3293:14" pos:end="3293:23">/*ADD.Nn*/</comment>

        <expr_stmt pos:start="3295:9" pos:end="3295:54"><expr pos:start="3295:9" pos:end="3295:53"><call pos:start="3295:9" pos:end="3295:53"><name pos:start="3295:9" pos:end="3295:25">gen_window_check3</name><argument_list pos:start="3295:26" pos:end="3295:53">(<argument pos:start="3295:27" pos:end="3295:28"><expr pos:start="3295:27" pos:end="3295:28"><name pos:start="3295:27" pos:end="3295:28">dc</name></expr></argument>, <argument pos:start="3295:31" pos:end="3295:36"><expr pos:start="3295:31" pos:end="3295:36"><name pos:start="3295:31" pos:end="3295:36">RRRN_R</name></expr></argument>, <argument pos:start="3295:39" pos:end="3295:44"><expr pos:start="3295:39" pos:end="3295:44"><name pos:start="3295:39" pos:end="3295:44">RRRN_S</name></expr></argument>, <argument pos:start="3295:47" pos:end="3295:52"><expr pos:start="3295:47" pos:end="3295:52"><name pos:start="3295:47" pos:end="3295:52">RRRN_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3297:9" pos:end="3297:69"><expr pos:start="3297:9" pos:end="3297:68"><call pos:start="3297:9" pos:end="3297:68"><name pos:start="3297:9" pos:end="3297:23">tcg_gen_add_i32</name><argument_list pos:start="3297:24" pos:end="3297:68">(<argument pos:start="3297:25" pos:end="3297:37"><expr pos:start="3297:25" pos:end="3297:37"><name pos:start="3297:25" pos:end="3297:37"><name pos:start="3297:25" pos:end="3297:29">cpu_R</name><index pos:start="3297:30" pos:end="3297:37">[<expr pos:start="3297:31" pos:end="3297:36"><name pos:start="3297:31" pos:end="3297:36">RRRN_R</name></expr>]</index></name></expr></argument>, <argument pos:start="3297:40" pos:end="3297:52"><expr pos:start="3297:40" pos:end="3297:52"><name pos:start="3297:40" pos:end="3297:52"><name pos:start="3297:40" pos:end="3297:44">cpu_R</name><index pos:start="3297:45" pos:end="3297:52">[<expr pos:start="3297:46" pos:end="3297:51"><name pos:start="3297:46" pos:end="3297:51">RRRN_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3297:55" pos:end="3297:67"><expr pos:start="3297:55" pos:end="3297:67"><name pos:start="3297:55" pos:end="3297:67"><name pos:start="3297:55" pos:end="3297:59">cpu_R</name><index pos:start="3297:60" pos:end="3297:67">[<expr pos:start="3297:61" pos:end="3297:66"><name pos:start="3297:61" pos:end="3297:66">RRRN_T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3299:9" pos:end="3299:14">break;</break>



    <case pos:start="3303:5" pos:end="3303:12">case <expr pos:start="3303:10" pos:end="3303:11"><literal type="number" pos:start="3303:10" pos:end="3303:11">11</literal></expr>:</case> <comment type="block" pos:start="3303:14" pos:end="3303:24">/*ADDI.Nn*/</comment>

        <expr_stmt pos:start="3305:9" pos:end="3305:46"><expr pos:start="3305:9" pos:end="3305:45"><call pos:start="3305:9" pos:end="3305:45"><name pos:start="3305:9" pos:end="3305:25">gen_window_check2</name><argument_list pos:start="3305:26" pos:end="3305:45">(<argument pos:start="3305:27" pos:end="3305:28"><expr pos:start="3305:27" pos:end="3305:28"><name pos:start="3305:27" pos:end="3305:28">dc</name></expr></argument>, <argument pos:start="3305:31" pos:end="3305:36"><expr pos:start="3305:31" pos:end="3305:36"><name pos:start="3305:31" pos:end="3305:36">RRRN_R</name></expr></argument>, <argument pos:start="3305:39" pos:end="3305:44"><expr pos:start="3305:39" pos:end="3305:44"><name pos:start="3305:39" pos:end="3305:44">RRRN_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3307:9" pos:end="3307:77"><expr pos:start="3307:9" pos:end="3307:76"><call pos:start="3307:9" pos:end="3307:76"><name pos:start="3307:9" pos:end="3307:24">tcg_gen_addi_i32</name><argument_list pos:start="3307:25" pos:end="3307:76">(<argument pos:start="3307:26" pos:end="3307:38"><expr pos:start="3307:26" pos:end="3307:38"><name pos:start="3307:26" pos:end="3307:38"><name pos:start="3307:26" pos:end="3307:30">cpu_R</name><index pos:start="3307:31" pos:end="3307:38">[<expr pos:start="3307:32" pos:end="3307:37"><name pos:start="3307:32" pos:end="3307:37">RRRN_R</name></expr>]</index></name></expr></argument>, <argument pos:start="3307:41" pos:end="3307:53"><expr pos:start="3307:41" pos:end="3307:53"><name pos:start="3307:41" pos:end="3307:53"><name pos:start="3307:41" pos:end="3307:45">cpu_R</name><index pos:start="3307:46" pos:end="3307:53">[<expr pos:start="3307:47" pos:end="3307:52"><name pos:start="3307:47" pos:end="3307:52">RRRN_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3307:56" pos:end="3307:75"><expr pos:start="3307:56" pos:end="3307:75"><ternary pos:start="3307:56" pos:end="3307:75"><condition pos:start="3307:56" pos:end="3307:63"><expr pos:start="3307:56" pos:end="3307:61"><name pos:start="3307:56" pos:end="3307:61">RRRN_T</name></expr> ?</condition><then pos:start="3307:65" pos:end="3307:70"> <expr pos:start="3307:65" pos:end="3307:70"><name pos:start="3307:65" pos:end="3307:70">RRRN_T</name></expr> </then><else pos:start="3307:72" pos:end="3307:75">: <expr pos:start="3307:74" pos:end="3307:75"><operator pos:start="3307:74" pos:end="3307:74">-</operator><literal type="number" pos:start="3307:75" pos:end="3307:75">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3309:9" pos:end="3309:14">break;</break>



    <case pos:start="3313:5" pos:end="3313:12">case <expr pos:start="3313:10" pos:end="3313:11"><literal type="number" pos:start="3313:10" pos:end="3313:11">12</literal></expr>:</case> <comment type="block" pos:start="3313:14" pos:end="3313:21">/*ST2n*/</comment>

        <expr_stmt pos:start="3315:9" pos:end="3315:38"><expr pos:start="3315:9" pos:end="3315:37"><call pos:start="3315:9" pos:end="3315:37"><name pos:start="3315:9" pos:end="3315:25">gen_window_check1</name><argument_list pos:start="3315:26" pos:end="3315:37">(<argument pos:start="3315:27" pos:end="3315:28"><expr pos:start="3315:27" pos:end="3315:28"><name pos:start="3315:27" pos:end="3315:28">dc</name></expr></argument>, <argument pos:start="3315:31" pos:end="3315:36"><expr pos:start="3315:31" pos:end="3315:36"><name pos:start="3315:31" pos:end="3315:36">RRRN_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3317:9" pos:end="3335:9"><if pos:start="3317:9" pos:end="3325:9">if <condition pos:start="3317:12" pos:end="3317:23">(<expr pos:start="3317:13" pos:end="3317:22"><name pos:start="3317:13" pos:end="3317:18">RRRN_T</name> <operator pos:start="3317:20" pos:end="3317:20">&lt;</operator> <literal type="number" pos:start="3317:22" pos:end="3317:22">8</literal></expr>)</condition> <block pos:start="3317:25" pos:end="3325:9">{<block_content pos:start="3319:13" pos:end="3323:58"> <comment type="block" pos:start="3317:27" pos:end="3317:37">/*MOVI.Nn*/</comment>

            <expr_stmt pos:start="3319:13" pos:end="3323:58"><expr pos:start="3319:13" pos:end="3323:57"><call pos:start="3319:13" pos:end="3323:57"><name pos:start="3319:13" pos:end="3319:28">tcg_gen_movi_i32</name><argument_list pos:start="3319:29" pos:end="3323:57">(<argument pos:start="3319:30" pos:end="3319:42"><expr pos:start="3319:30" pos:end="3319:42"><name pos:start="3319:30" pos:end="3319:42"><name pos:start="3319:30" pos:end="3319:34">cpu_R</name><index pos:start="3319:35" pos:end="3319:42">[<expr pos:start="3319:36" pos:end="3319:41"><name pos:start="3319:36" pos:end="3319:41">RRRN_S</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="3321:21" pos:end="3323:56"><expr pos:start="3321:21" pos:end="3323:56"><name pos:start="3321:21" pos:end="3321:26">RRRN_R</name> <operator pos:start="3321:28" pos:end="3321:28">|</operator> <operator pos:start="3321:30" pos:end="3321:30">(</operator><name pos:start="3321:31" pos:end="3321:36">RRRN_T</name> <operator pos:start="3321:38" pos:end="3321:39">&lt;&lt;</operator> <literal type="number" pos:start="3321:41" pos:end="3321:41">4</literal><operator pos:start="3321:42" pos:end="3321:42">)</operator> <operator pos:start="3321:44" pos:end="3321:44">|</operator>

                    <operator pos:start="3323:21" pos:end="3323:21">(</operator><ternary pos:start="3323:22" pos:end="3323:55"><condition pos:start="3323:22" pos:end="3323:40"><expr pos:start="3323:22" pos:end="3323:38"><operator pos:start="3323:22" pos:end="3323:22">(</operator><name pos:start="3323:23" pos:end="3323:28">RRRN_T</name> <operator pos:start="3323:30" pos:end="3323:30">&amp;</operator> <literal type="number" pos:start="3323:32" pos:end="3323:32">6</literal><operator pos:start="3323:33" pos:end="3323:33">)</operator> <operator pos:start="3323:35" pos:end="3323:36">==</operator> <literal type="number" pos:start="3323:38" pos:end="3323:38">6</literal></expr> ?</condition><then pos:start="3323:42" pos:end="3323:51"> <expr pos:start="3323:42" pos:end="3323:51"><literal type="number" pos:start="3323:42" pos:end="3323:51">0xffffff80</literal></expr> </then><else pos:start="3323:53" pos:end="3323:55">: <expr pos:start="3323:55" pos:end="3323:55"><literal type="number" pos:start="3323:55" pos:end="3323:55">0</literal></expr></else></ternary><operator pos:start="3323:56" pos:end="3323:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3325:11" pos:end="3335:9">else <block pos:start="3325:16" pos:end="3335:9">{<block_content pos:start="3327:13" pos:end="3333:56"> <comment type="block" pos:start="3325:18" pos:end="3325:28">/*BEQZ.Nn*/</comment> <comment type="block" pos:start="3325:30" pos:end="3325:40">/*BNEZ.Nn*/</comment>

            <decl_stmt pos:start="3327:13" pos:end="3327:69"><decl pos:start="3327:13" pos:end="3327:68"><type pos:start="3327:13" pos:end="3327:19"><name pos:start="3327:13" pos:end="3327:19">TCGCond</name></type> <name pos:start="3327:21" pos:end="3327:25">eq_ne</name> <init pos:start="3327:27" pos:end="3327:68">= <expr pos:start="3327:29" pos:end="3327:68"><ternary pos:start="3327:29" pos:end="3327:68"><condition pos:start="3327:29" pos:end="3327:42"><expr pos:start="3327:29" pos:end="3327:40"><operator pos:start="3327:29" pos:end="3327:29">(</operator><name pos:start="3327:30" pos:end="3327:35">RRRN_T</name> <operator pos:start="3327:37" pos:end="3327:37">&amp;</operator> <literal type="number" pos:start="3327:39" pos:end="3327:39">4</literal><operator pos:start="3327:40" pos:end="3327:40">)</operator></expr> ?</condition><then pos:start="3327:44" pos:end="3327:54"> <expr pos:start="3327:44" pos:end="3327:54"><name pos:start="3327:44" pos:end="3327:54">TCG_COND_NE</name></expr> </then><else pos:start="3327:56" pos:end="3327:68">: <expr pos:start="3327:58" pos:end="3327:68"><name pos:start="3327:58" pos:end="3327:68">TCG_COND_EQ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="3331:13" pos:end="3333:56"><expr pos:start="3331:13" pos:end="3333:55"><call pos:start="3331:13" pos:end="3333:55"><name pos:start="3331:13" pos:end="3331:23">gen_brcondi</name><argument_list pos:start="3331:24" pos:end="3333:55">(<argument pos:start="3331:25" pos:end="3331:26"><expr pos:start="3331:25" pos:end="3331:26"><name pos:start="3331:25" pos:end="3331:26">dc</name></expr></argument>, <argument pos:start="3331:29" pos:end="3331:33"><expr pos:start="3331:29" pos:end="3331:33"><name pos:start="3331:29" pos:end="3331:33">eq_ne</name></expr></argument>, <argument pos:start="3331:36" pos:end="3331:48"><expr pos:start="3331:36" pos:end="3331:48"><name pos:start="3331:36" pos:end="3331:48"><name pos:start="3331:36" pos:end="3331:40">cpu_R</name><index pos:start="3331:41" pos:end="3331:48">[<expr pos:start="3331:42" pos:end="3331:47"><name pos:start="3331:42" pos:end="3331:47">RRRN_S</name></expr>]</index></name></expr></argument>, <argument pos:start="3331:51" pos:end="3331:51"><expr pos:start="3331:51" pos:end="3331:51"><literal type="number" pos:start="3331:51" pos:end="3331:51">0</literal></expr></argument>,

                    <argument pos:start="3333:21" pos:end="3333:54"><expr pos:start="3333:21" pos:end="3333:54"><literal type="number" pos:start="3333:21" pos:end="3333:23">4</literal> <operator pos:start="3333:23" pos:end="3333:23">+</operator> <operator pos:start="3333:25" pos:end="3333:25">(</operator><name pos:start="3333:26" pos:end="3333:31">RRRN_R</name> <operator pos:start="3333:33" pos:end="3333:33">|</operator> <operator pos:start="3333:35" pos:end="3333:35">(</operator><operator pos:start="3333:36" pos:end="3333:36">(</operator><name pos:start="3333:37" pos:end="3333:42">RRRN_T</name> <operator pos:start="3333:44" pos:end="3333:44">&amp;</operator> <literal type="number" pos:start="3333:46" pos:end="3333:46">3</literal><operator pos:start="3333:47" pos:end="3333:47">)</operator> <operator pos:start="3333:49" pos:end="3333:50">&lt;&lt;</operator> <literal type="number" pos:start="3333:52" pos:end="3333:52">4</literal><operator pos:start="3333:53" pos:end="3333:53">)</operator><operator pos:start="3333:54" pos:end="3333:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3337:9" pos:end="3337:14">break;</break>



    <case pos:start="3341:5" pos:end="3341:12">case <expr pos:start="3341:10" pos:end="3341:11"><literal type="number" pos:start="3341:10" pos:end="3341:11">13</literal></expr>:</case> <comment type="block" pos:start="3341:14" pos:end="3341:21">/*ST3n*/</comment>

        <switch pos:start="3343:9" pos:end="3435:9">switch <condition pos:start="3343:16" pos:end="3343:23">(<expr pos:start="3343:17" pos:end="3343:22"><name pos:start="3343:17" pos:end="3343:22">RRRN_R</name></expr>)</condition> <block pos:start="3343:25" pos:end="3435:9">{<block_content pos:start="3345:9" pos:end="3433:18">

        <case pos:start="3345:9" pos:end="3345:15">case <expr pos:start="3345:14" pos:end="3345:14"><literal type="number" pos:start="3345:14" pos:end="3345:14">0</literal></expr>:</case> <comment type="block" pos:start="3345:17" pos:end="3345:26">/*MOV.Nn*/</comment>

            <expr_stmt pos:start="3347:13" pos:end="3347:50"><expr pos:start="3347:13" pos:end="3347:49"><call pos:start="3347:13" pos:end="3347:49"><name pos:start="3347:13" pos:end="3347:29">gen_window_check2</name><argument_list pos:start="3347:30" pos:end="3347:49">(<argument pos:start="3347:31" pos:end="3347:32"><expr pos:start="3347:31" pos:end="3347:32"><name pos:start="3347:31" pos:end="3347:32">dc</name></expr></argument>, <argument pos:start="3347:35" pos:end="3347:40"><expr pos:start="3347:35" pos:end="3347:40"><name pos:start="3347:35" pos:end="3347:40">RRRN_S</name></expr></argument>, <argument pos:start="3347:43" pos:end="3347:48"><expr pos:start="3347:43" pos:end="3347:48"><name pos:start="3347:43" pos:end="3347:48">RRRN_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3349:13" pos:end="3349:58"><expr pos:start="3349:13" pos:end="3349:57"><call pos:start="3349:13" pos:end="3349:57"><name pos:start="3349:13" pos:end="3349:27">tcg_gen_mov_i32</name><argument_list pos:start="3349:28" pos:end="3349:57">(<argument pos:start="3349:29" pos:end="3349:41"><expr pos:start="3349:29" pos:end="3349:41"><name pos:start="3349:29" pos:end="3349:41"><name pos:start="3349:29" pos:end="3349:33">cpu_R</name><index pos:start="3349:34" pos:end="3349:41">[<expr pos:start="3349:35" pos:end="3349:40"><name pos:start="3349:35" pos:end="3349:40">RRRN_T</name></expr>]</index></name></expr></argument>, <argument pos:start="3349:44" pos:end="3349:56"><expr pos:start="3349:44" pos:end="3349:56"><name pos:start="3349:44" pos:end="3349:56"><name pos:start="3349:44" pos:end="3349:48">cpu_R</name><index pos:start="3349:49" pos:end="3349:56">[<expr pos:start="3349:50" pos:end="3349:55"><name pos:start="3349:50" pos:end="3349:55">RRRN_S</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="3351:13" pos:end="3351:18">break;</break>



        <case pos:start="3355:9" pos:end="3355:16">case <expr pos:start="3355:14" pos:end="3355:15"><literal type="number" pos:start="3355:14" pos:end="3355:15">15</literal></expr>:</case> <comment type="block" pos:start="3355:18" pos:end="3355:23">/*S3*/</comment>

            <switch pos:start="3357:13" pos:end="3423:13">switch <condition pos:start="3357:20" pos:end="3357:27">(<expr pos:start="3357:21" pos:end="3357:26"><name pos:start="3357:21" pos:end="3357:26">RRRN_T</name></expr>)</condition> <block pos:start="3357:29" pos:end="3423:13">{<block_content pos:start="3359:13" pos:end="3421:22">

            <case pos:start="3359:13" pos:end="3359:19">case <expr pos:start="3359:18" pos:end="3359:18"><literal type="number" pos:start="3359:18" pos:end="3359:18">0</literal></expr>:</case> <comment type="block" pos:start="3359:21" pos:end="3359:30">/*RET.Nn*/</comment>

                <expr_stmt pos:start="3361:17" pos:end="3361:39"><expr pos:start="3361:17" pos:end="3361:38"><call pos:start="3361:17" pos:end="3361:38"><name pos:start="3361:17" pos:end="3361:24">gen_jump</name><argument_list pos:start="3361:25" pos:end="3361:38">(<argument pos:start="3361:26" pos:end="3361:27"><expr pos:start="3361:26" pos:end="3361:27"><name pos:start="3361:26" pos:end="3361:27">dc</name></expr></argument>, <argument pos:start="3361:30" pos:end="3361:37"><expr pos:start="3361:30" pos:end="3361:37"><name pos:start="3361:30" pos:end="3361:37"><name pos:start="3361:30" pos:end="3361:34">cpu_R</name><index pos:start="3361:35" pos:end="3361:37">[<expr pos:start="3361:36" pos:end="3361:36"><literal type="number" pos:start="3361:36" pos:end="3361:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3363:17" pos:end="3363:22">break;</break>



            <case pos:start="3367:13" pos:end="3367:19">case <expr pos:start="3367:18" pos:end="3367:18"><literal type="number" pos:start="3367:18" pos:end="3367:18">1</literal></expr>:</case> <comment type="block" pos:start="3367:21" pos:end="3367:31">/*RETW.Nn*/</comment>

                <expr_stmt pos:start="3369:17" pos:end="3369:60"><expr pos:start="3369:17" pos:end="3369:59"><call pos:start="3369:17" pos:end="3369:59"><name pos:start="3369:17" pos:end="3369:26">HAS_OPTION</name><argument_list pos:start="3369:27" pos:end="3369:59">(<argument pos:start="3369:28" pos:end="3369:58"><expr pos:start="3369:28" pos:end="3369:58"><name pos:start="3369:28" pos:end="3369:58">XTENSA_OPTION_WINDOWED_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="3371:17" pos:end="3383:17">{<block_content pos:start="3373:21" pos:end="3381:39">

                    <decl_stmt pos:start="3373:21" pos:end="3373:57"><decl pos:start="3373:21" pos:end="3373:56"><type pos:start="3373:21" pos:end="3373:28"><name pos:start="3373:21" pos:end="3373:28">TCGv_i32</name></type> <name pos:start="3373:30" pos:end="3373:32">tmp</name> <init pos:start="3373:34" pos:end="3373:56">= <expr pos:start="3373:36" pos:end="3373:56"><call pos:start="3373:36" pos:end="3373:56"><name pos:start="3373:36" pos:end="3373:48">tcg_const_i32</name><argument_list pos:start="3373:49" pos:end="3373:56">(<argument pos:start="3373:50" pos:end="3373:55"><expr pos:start="3373:50" pos:end="3373:55"><name pos:start="3373:50" pos:end="3373:55"><name pos:start="3373:50" pos:end="3373:51">dc</name><operator pos:start="3373:52" pos:end="3373:53">-&gt;</operator><name pos:start="3373:54" pos:end="3373:55">pc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="3375:21" pos:end="3375:43"><expr pos:start="3375:21" pos:end="3375:42"><call pos:start="3375:21" pos:end="3375:42"><name pos:start="3375:21" pos:end="3375:38">gen_advance_ccount</name><argument_list pos:start="3375:39" pos:end="3375:42">(<argument pos:start="3375:40" pos:end="3375:41"><expr pos:start="3375:40" pos:end="3375:41"><name pos:start="3375:40" pos:end="3375:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3377:21" pos:end="3377:46"><expr pos:start="3377:21" pos:end="3377:45"><call pos:start="3377:21" pos:end="3377:45"><name pos:start="3377:21" pos:end="3377:35">gen_helper_retw</name><argument_list pos:start="3377:36" pos:end="3377:45">(<argument pos:start="3377:37" pos:end="3377:39"><expr pos:start="3377:37" pos:end="3377:39"><name pos:start="3377:37" pos:end="3377:39">tmp</name></expr></argument>, <argument pos:start="3377:42" pos:end="3377:44"><expr pos:start="3377:42" pos:end="3377:44"><name pos:start="3377:42" pos:end="3377:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3379:21" pos:end="3379:38"><expr pos:start="3379:21" pos:end="3379:37"><call pos:start="3379:21" pos:end="3379:37"><name pos:start="3379:21" pos:end="3379:28">gen_jump</name><argument_list pos:start="3379:29" pos:end="3379:37">(<argument pos:start="3379:30" pos:end="3379:31"><expr pos:start="3379:30" pos:end="3379:31"><name pos:start="3379:30" pos:end="3379:31">dc</name></expr></argument>, <argument pos:start="3379:34" pos:end="3379:36"><expr pos:start="3379:34" pos:end="3379:36"><name pos:start="3379:34" pos:end="3379:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3381:21" pos:end="3381:39"><expr pos:start="3381:21" pos:end="3381:38"><call pos:start="3381:21" pos:end="3381:38"><name pos:start="3381:21" pos:end="3381:33">tcg_temp_free</name><argument_list pos:start="3381:34" pos:end="3381:38">(<argument pos:start="3381:35" pos:end="3381:37"><expr pos:start="3381:35" pos:end="3381:37"><name pos:start="3381:35" pos:end="3381:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="3385:17" pos:end="3385:22">break;</break>



            <case pos:start="3389:13" pos:end="3389:19">case <expr pos:start="3389:18" pos:end="3389:18"><literal type="number" pos:start="3389:18" pos:end="3389:18">2</literal></expr>:</case> <comment type="block" pos:start="3389:21" pos:end="3389:32">/*BREAK.Nn*/</comment>

                <expr_stmt pos:start="3391:17" pos:end="3391:48"><expr pos:start="3391:17" pos:end="3391:47"><call pos:start="3391:17" pos:end="3391:47"><name pos:start="3391:17" pos:end="3391:26">HAS_OPTION</name><argument_list pos:start="3391:27" pos:end="3391:47">(<argument pos:start="3391:28" pos:end="3391:46"><expr pos:start="3391:28" pos:end="3391:46"><name pos:start="3391:28" pos:end="3391:46">XTENSA_OPTION_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3393:17" pos:end="3397:17"><if pos:start="3393:17" pos:end="3397:17">if <condition pos:start="3393:20" pos:end="3393:30">(<expr pos:start="3393:21" pos:end="3393:29"><name pos:start="3393:21" pos:end="3393:29"><name pos:start="3393:21" pos:end="3393:22">dc</name><operator pos:start="3393:23" pos:end="3393:24">-&gt;</operator><name pos:start="3393:25" pos:end="3393:29">debug</name></name></expr>)</condition> <block pos:start="3393:32" pos:end="3397:17">{<block_content pos:start="3395:21" pos:end="3395:59">

                    <expr_stmt pos:start="3395:21" pos:end="3395:59"><expr pos:start="3395:21" pos:end="3395:58"><call pos:start="3395:21" pos:end="3395:58"><name pos:start="3395:21" pos:end="3395:39">gen_debug_exception</name><argument_list pos:start="3395:40" pos:end="3395:58">(<argument pos:start="3395:41" pos:end="3395:42"><expr pos:start="3395:41" pos:end="3395:42"><name pos:start="3395:41" pos:end="3395:42">dc</name></expr></argument>, <argument pos:start="3395:45" pos:end="3395:57"><expr pos:start="3395:45" pos:end="3395:57"><name pos:start="3395:45" pos:end="3395:57">DEBUGCAUSE_BN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="3399:17" pos:end="3399:22">break;</break>



            <case pos:start="3403:13" pos:end="3403:19">case <expr pos:start="3403:18" pos:end="3403:18"><literal type="number" pos:start="3403:18" pos:end="3403:18">3</literal></expr>:</case> <comment type="block" pos:start="3403:21" pos:end="3403:30">/*NOP.Nn*/</comment>

                <break pos:start="3405:17" pos:end="3405:22">break;</break>



            <case pos:start="3409:13" pos:end="3409:19">case <expr pos:start="3409:18" pos:end="3409:18"><literal type="number" pos:start="3409:18" pos:end="3409:18">6</literal></expr>:</case> <comment type="block" pos:start="3409:21" pos:end="3409:30">/*ILL.Nn*/</comment>

                <expr_stmt pos:start="3411:17" pos:end="3411:67"><expr pos:start="3411:17" pos:end="3411:66"><call pos:start="3411:17" pos:end="3411:66"><name pos:start="3411:17" pos:end="3411:35">gen_exception_cause</name><argument_list pos:start="3411:36" pos:end="3411:66">(<argument pos:start="3411:37" pos:end="3411:38"><expr pos:start="3411:37" pos:end="3411:38"><name pos:start="3411:37" pos:end="3411:38">dc</name></expr></argument>, <argument pos:start="3411:41" pos:end="3411:65"><expr pos:start="3411:41" pos:end="3411:65"><name pos:start="3411:41" pos:end="3411:65">ILLEGAL_INSTRUCTION_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3413:17" pos:end="3413:22">break;</break>



            <default pos:start="3417:13" pos:end="3417:20">default:</default> <comment type="block" pos:start="3417:22" pos:end="3417:33">/*reserved*/</comment>

                <expr_stmt pos:start="3419:17" pos:end="3419:27"><expr pos:start="3419:17" pos:end="3419:26"><call pos:start="3419:17" pos:end="3419:26"><name pos:start="3419:17" pos:end="3419:24">RESERVED</name><argument_list pos:start="3419:25" pos:end="3419:26">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="3421:17" pos:end="3421:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="3425:13" pos:end="3425:18">break;</break>



        <default pos:start="3429:9" pos:end="3429:16">default:</default> <comment type="block" pos:start="3429:18" pos:end="3429:29">/*reserved*/</comment>

            <expr_stmt pos:start="3431:13" pos:end="3431:23"><expr pos:start="3431:13" pos:end="3431:22"><call pos:start="3431:13" pos:end="3431:22"><name pos:start="3431:13" pos:end="3431:20">RESERVED</name><argument_list pos:start="3431:21" pos:end="3431:22">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="3433:13" pos:end="3433:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="3437:9" pos:end="3437:14">break;</break>



    <default pos:start="3441:5" pos:end="3441:12">default:</default> <comment type="block" pos:start="3441:14" pos:end="3441:25">/*reserved*/</comment>

        <expr_stmt pos:start="3443:9" pos:end="3443:19"><expr pos:start="3443:9" pos:end="3443:18"><call pos:start="3443:9" pos:end="3443:18"><name pos:start="3443:9" pos:end="3443:16">RESERVED</name><argument_list pos:start="3443:17" pos:end="3443:18">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3445:9" pos:end="3445:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="3451:5" pos:end="3451:30"><expr pos:start="3451:5" pos:end="3451:29"><call pos:start="3451:5" pos:end="3451:29"><name pos:start="3451:5" pos:end="3451:22">gen_check_loop_end</name><argument_list pos:start="3451:23" pos:end="3451:29">(<argument pos:start="3451:24" pos:end="3451:25"><expr pos:start="3451:24" pos:end="3451:25"><name pos:start="3451:24" pos:end="3451:25">dc</name></expr></argument>, <argument pos:start="3451:28" pos:end="3451:28"><expr pos:start="3451:28" pos:end="3451:28"><literal type="number" pos:start="3451:28" pos:end="3451:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3453:5" pos:end="3453:25"><expr pos:start="3453:5" pos:end="3453:24"><name pos:start="3453:5" pos:end="3453:10"><name pos:start="3453:5" pos:end="3453:6">dc</name><operator pos:start="3453:7" pos:end="3453:8">-&gt;</operator><name pos:start="3453:9" pos:end="3453:10">pc</name></name> <operator pos:start="3453:12" pos:end="3453:12">=</operator> <name pos:start="3453:14" pos:end="3453:24"><name pos:start="3453:14" pos:end="3453:15">dc</name><operator pos:start="3453:16" pos:end="3453:17">-&gt;</operator><name pos:start="3453:18" pos:end="3453:24">next_pc</name></name></expr>;</expr_stmt>



    <return pos:start="3457:5" pos:end="3457:11">return;</return>



<label pos:start="3461:1" pos:end="3461:15"><name pos:start="3461:1" pos:end="3461:14">invalid_opcode</name>:</label>

    <expr_stmt pos:start="3463:5" pos:end="3463:45"><expr pos:start="3463:5" pos:end="3463:44"><call pos:start="3463:5" pos:end="3463:44"><name pos:start="3463:5" pos:end="3463:12">qemu_log</name><argument_list pos:start="3463:13" pos:end="3463:44">(<argument pos:start="3463:14" pos:end="3463:35"><expr pos:start="3463:14" pos:end="3463:35"><literal type="string" pos:start="3463:14" pos:end="3463:35">"INVALID(pc = %08x)\n"</literal></expr></argument>, <argument pos:start="3463:38" pos:end="3463:43"><expr pos:start="3463:38" pos:end="3463:43"><name pos:start="3463:38" pos:end="3463:43"><name pos:start="3463:38" pos:end="3463:39">dc</name><operator pos:start="3463:40" pos:end="3463:41">-&gt;</operator><name pos:start="3463:42" pos:end="3463:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="3465:5" pos:end="3468:0"><expr pos:start="3465:5" pos:end="3465:54"><call pos:start="3465:5" pos:end="3465:54"><name pos:start="3465:5" pos:end="3465:23">gen_exception_cause</name><argument_list pos:start="3465:24" pos:end="3465:54">(<argument pos:start="3465:25" pos:end="3465:26"><expr pos:start="3465:25" pos:end="3465:26"><name pos:start="3465:25" pos:end="3465:26">dc</name></expr></argument>, <argument pos:start="3465:29" pos:end="3465:53"><expr pos:start="3465:29" pos:end="3465:53"><name pos:start="3465:29" pos:end="3465:53">ILLEGAL_INSTRUCTION_CAUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef pos:start="3467:1" pos:end="3467:17">#<cpp:directive pos:start="3467:2" pos:end="3467:6">undef</cpp:directive> <name pos:start="3467:8" pos:end="3467:17">HAS_OPTION</name></cpp:undef>

</block_content>}</block></function>
</unit>
