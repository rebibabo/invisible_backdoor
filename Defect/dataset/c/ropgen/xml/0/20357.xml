<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20357.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">ahci_test_identify</name><parameter_list pos:start="1:31" pos:end="1:48">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:41">AHCIQState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">ahci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="303:1">{<block_content pos:start="5:5" pos:end="301:16">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">RegD2HFIS</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">d2h</name> <init pos:start="5:20" pos:end="5:36">= <expr pos:start="5:22" pos:end="5:36"><call pos:start="5:22" pos:end="5:36"><name pos:start="5:22" pos:end="5:30">g_malloc0</name><argument_list pos:start="5:31" pos:end="5:36">(<argument pos:start="5:32" pos:end="5:35"><expr pos:start="5:32" pos:end="5:35"><literal type="number" pos:start="5:32" pos:end="5:35">0x20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">RegD2HFIS</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">pio</name> <init pos:start="7:20" pos:end="7:36">= <expr pos:start="7:22" pos:end="7:36"><call pos:start="7:22" pos:end="7:36"><name pos:start="7:22" pos:end="7:30">g_malloc0</name><argument_list pos:start="7:31" pos:end="7:36">(<argument pos:start="7:32" pos:end="7:35"><expr pos:start="7:32" pos:end="7:35"><literal type="number" pos:start="7:32" pos:end="7:35">0x20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">RegH2DFIS</name></type> <name pos:start="9:15" pos:end="9:17">fis</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:21">AHCICommandHeader</name></type> <name pos:start="11:23" pos:end="11:25">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">PRD</name></type> <name pos:start="13:9" pos:end="13:11">prd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:16">reg</name></decl>, <decl pos:start="15:19" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:19" pos:end="15:26">data_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint16_t</name></type> <name pos:start="17:14" pos:end="17:22"><name pos:start="17:14" pos:end="17:17">buff</name><index pos:start="17:18" pos:end="17:22">[<expr pos:start="17:19" pos:end="17:21"><literal type="number" pos:start="17:19" pos:end="17:21">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">unsigned</name></type> <name pos:start="19:14" pos:end="19:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:15"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:14">cx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:18">table</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:27"><expr pos:start="29:5" pos:end="29:26"><call pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:26">(<argument pos:start="29:14" pos:end="29:25"><expr pos:start="29:14" pos:end="29:25"><name pos:start="29:14" pos:end="29:17">ahci</name> <operator pos:start="29:19" pos:end="29:20">!=</operator> <name pos:start="29:22" pos:end="29:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="57:7">/* We need to:

     * (1) Create a Command Table Buffer and update the Command List Slot #0

     *     to point to this buffer.

     * (2) Construct an FIS host-to-device command structure, and write it to

     *     the top of the command table buffer.

     * (3) Create a data buffer for the IDENTIFY response to be sent to

     * (4) Create a Physical Region Descriptor that points to the data buffer,

     *     and write it to the bottom (offset 0x80) of the command table.

     * (5) Now, PxCLB points to the command list, command 0 points to

     *     our table, and our table contains an FIS instruction and a

     *     PRD that points to our rx buffer.

     * (6) We inform the HBA via PxCI that there is a command ready in slot #0.

     */</comment>



    <comment type="block" pos:start="61:5" pos:end="61:53">/* Pick the first implemented and running port */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:31"><expr pos:start="63:5" pos:end="63:30"><name pos:start="63:5" pos:end="63:5">i</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <call pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:24">ahci_port_select</name><argument_list pos:start="63:25" pos:end="63:30">(<argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><name pos:start="63:26" pos:end="63:29">ahci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:51"><expr pos:start="65:5" pos:end="65:50"><call pos:start="65:5" pos:end="65:50"><name pos:start="65:5" pos:end="65:18">g_test_message</name><argument_list pos:start="65:19" pos:end="65:50">(<argument pos:start="65:20" pos:end="65:46"><expr pos:start="65:20" pos:end="65:46"><literal type="string" pos:start="65:20" pos:end="65:46">"Selected port %u for test"</literal></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><name pos:start="65:49" pos:end="65:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:68">/* Clear out the FIS Receive area and any pending interrupts. */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><call pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:19">ahci_port_clear</name><argument_list pos:start="71:20" pos:end="71:28">(<argument pos:start="71:21" pos:end="71:24"><expr pos:start="71:21" pos:end="71:24"><name pos:start="71:21" pos:end="71:24">ahci</name></expr></argument>, <argument pos:start="71:27" pos:end="71:27"><expr pos:start="71:27" pos:end="71:27"><name pos:start="71:27" pos:end="71:27">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:80">/* Create a Command Table buffer. 0x80 is the smallest with a PRDTL of 0. */</comment>

    <comment type="block" pos:start="77:5" pos:end="77:80">/* We need at least one PRD, so round up to the nearest 0x80 multiple.    */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:9">table</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:44"><name pos:start="79:13" pos:end="79:22">ahci_alloc</name><argument_list pos:start="79:23" pos:end="79:44">(<argument pos:start="79:24" pos:end="79:27"><expr pos:start="79:24" pos:end="79:27"><name pos:start="79:24" pos:end="79:27">ahci</name></expr></argument>, <argument pos:start="79:30" pos:end="79:43"><expr pos:start="79:30" pos:end="79:43"><call pos:start="79:30" pos:end="79:43"><name pos:start="79:30" pos:end="79:40">CMD_TBL_SIZ</name><argument_list pos:start="79:41" pos:end="79:43">(<argument pos:start="79:42" pos:end="79:42"><expr pos:start="79:42" pos:end="79:42"><literal type="number" pos:start="79:42" pos:end="79:42">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:20"><expr pos:start="81:5" pos:end="81:19"><call pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:12">g_assert</name><argument_list pos:start="81:13" pos:end="81:19">(<argument pos:start="81:14" pos:end="81:18"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:18">table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:34"><expr pos:start="83:5" pos:end="83:33"><call pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:20">ASSERT_BIT_CLEAR</name><argument_list pos:start="83:21" pos:end="83:33">(<argument pos:start="83:22" pos:end="83:26"><expr pos:start="83:22" pos:end="83:26"><name pos:start="83:22" pos:end="83:26">table</name></expr></argument>, <argument pos:start="83:29" pos:end="83:32"><expr pos:start="83:29" pos:end="83:32"><literal type="number" pos:start="83:29" pos:end="83:32">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:75">/* Create a data buffer ... where we will dump the IDENTIFY data to. */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:12">data_ptr</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:36"><name pos:start="89:16" pos:end="89:25">ahci_alloc</name><argument_list pos:start="89:26" pos:end="89:36">(<argument pos:start="89:27" pos:end="89:30"><expr pos:start="89:27" pos:end="89:30"><name pos:start="89:27" pos:end="89:30">ahci</name></expr></argument>, <argument pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><literal type="number" pos:start="89:33" pos:end="89:35">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:23"><expr pos:start="91:5" pos:end="91:22"><call pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:12">g_assert</name><argument_list pos:start="91:13" pos:end="91:22">(<argument pos:start="91:14" pos:end="91:21"><expr pos:start="91:14" pos:end="91:21"><name pos:start="91:14" pos:end="91:21">data_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:44">/* pick a command slot (should be 0!) */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:32"><expr pos:start="97:5" pos:end="97:31"><name pos:start="97:5" pos:end="97:6">cx</name> <operator pos:start="97:8" pos:end="97:8">=</operator> <call pos:start="97:10" pos:end="97:31"><name pos:start="97:10" pos:end="97:22">ahci_pick_cmd</name><argument_list pos:start="97:23" pos:end="97:31">(<argument pos:start="97:24" pos:end="97:27"><expr pos:start="97:24" pos:end="97:27"><name pos:start="97:24" pos:end="97:27">ahci</name></expr></argument>, <argument pos:start="97:30" pos:end="97:30"><expr pos:start="97:30" pos:end="97:30"><name pos:start="97:30" pos:end="97:30">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:79">/* Construct our Command Header (set_command_header handles endianness.) */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:36"><expr pos:start="103:5" pos:end="103:35"><call pos:start="103:5" pos:end="103:35"><name pos:start="103:5" pos:end="103:10">memset</name><argument_list pos:start="103:11" pos:end="103:35">(<argument pos:start="103:12" pos:end="103:15"><expr pos:start="103:12" pos:end="103:15"><operator pos:start="103:12" pos:end="103:12">&amp;</operator><name pos:start="103:13" pos:end="103:15">cmd</name></expr></argument>, <argument pos:start="103:18" pos:end="103:21"><expr pos:start="103:18" pos:end="103:21"><literal type="number" pos:start="103:18" pos:end="103:21">0x00</literal></expr></argument>, <argument pos:start="103:24" pos:end="103:34"><expr pos:start="103:24" pos:end="103:34"><sizeof pos:start="103:24" pos:end="103:34">sizeof<argument_list pos:start="103:30" pos:end="103:34">(<argument pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:33">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:18"><expr pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:13"><name pos:start="105:5" pos:end="105:7">cmd</name><operator pos:start="105:8" pos:end="105:8">.</operator><name pos:start="105:9" pos:end="105:13">flags</name></name> <operator pos:start="105:15" pos:end="105:15">=</operator> <literal type="number" pos:start="105:17" pos:end="105:17">5</literal></expr>;</expr_stmt>      <comment type="block" pos:start="105:25" pos:end="105:64">/* reg_h2d_fis is 5 double-words long */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:23"><expr pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:13"><name pos:start="107:5" pos:end="107:7">cmd</name><operator pos:start="107:8" pos:end="107:8">.</operator><name pos:start="107:9" pos:end="107:13">flags</name></name> <operator pos:start="107:15" pos:end="107:16">|=</operator> <literal type="number" pos:start="107:18" pos:end="107:22">0x400</literal></expr>;</expr_stmt> <comment type="block" pos:start="107:25" pos:end="107:59">/* clear PxTFD.STS.BSY when done */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:18"><expr pos:start="109:5" pos:end="109:17"><name pos:start="109:5" pos:end="109:13"><name pos:start="109:5" pos:end="109:7">cmd</name><operator pos:start="109:8" pos:end="109:8">.</operator><name pos:start="109:9" pos:end="109:13">prdtl</name></name> <operator pos:start="109:15" pos:end="109:15">=</operator> <literal type="number" pos:start="109:17" pos:end="109:17">1</literal></expr>;</expr_stmt>      <comment type="block" pos:start="109:25" pos:end="109:50">/* One PRD table entry. */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:18"><expr pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:13"><name pos:start="111:5" pos:end="111:7">cmd</name><operator pos:start="111:8" pos:end="111:8">.</operator><name pos:start="111:9" pos:end="111:13">prdbc</name></name> <operator pos:start="111:15" pos:end="111:15">=</operator> <literal type="number" pos:start="111:17" pos:end="111:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:21"><expr pos:start="113:5" pos:end="113:20"><name pos:start="113:5" pos:end="113:12"><name pos:start="113:5" pos:end="113:7">cmd</name><operator pos:start="113:8" pos:end="113:8">.</operator><name pos:start="113:9" pos:end="113:12">ctba</name></name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:20">table</name></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:58">/* Construct our PRD, noting that DBC is 0-indexed. */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:36"><expr pos:start="119:5" pos:end="119:35"><name pos:start="119:5" pos:end="119:11"><name pos:start="119:5" pos:end="119:7">prd</name><operator pos:start="119:8" pos:end="119:8">.</operator><name pos:start="119:9" pos:end="119:11">dba</name></name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:35"><name pos:start="119:15" pos:end="119:25">cpu_to_le64</name><argument_list pos:start="119:26" pos:end="119:35">(<argument pos:start="119:27" pos:end="119:34"><expr pos:start="119:27" pos:end="119:34"><name pos:start="119:27" pos:end="119:34">data_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:16"><expr pos:start="121:5" pos:end="121:15"><name pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:7">prd</name><operator pos:start="121:8" pos:end="121:8">.</operator><name pos:start="121:9" pos:end="121:11">res</name></name> <operator pos:start="121:13" pos:end="121:13">=</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="123:5" pos:end="123:44">/* 511+1 bytes, request DPS interrupt */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:44"><expr pos:start="125:5" pos:end="125:43"><name pos:start="125:5" pos:end="125:11"><name pos:start="125:5" pos:end="125:7">prd</name><operator pos:start="125:8" pos:end="125:8">.</operator><name pos:start="125:9" pos:end="125:11">dbc</name></name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:43"><name pos:start="125:15" pos:end="125:25">cpu_to_le32</name><argument_list pos:start="125:26" pos:end="125:43">(<argument pos:start="125:27" pos:end="125:42"><expr pos:start="125:27" pos:end="125:42"><literal type="number" pos:start="125:27" pos:end="125:29">511</literal> <operator pos:start="125:31" pos:end="125:31">|</operator> <literal type="number" pos:start="125:33" pos:end="125:42">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:72">/* Construct our Command FIS, Based on http://wiki.osdev.org/AHCI */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:36"><expr pos:start="131:5" pos:end="131:35"><call pos:start="131:5" pos:end="131:35"><name pos:start="131:5" pos:end="131:10">memset</name><argument_list pos:start="131:11" pos:end="131:35">(<argument pos:start="131:12" pos:end="131:15"><expr pos:start="131:12" pos:end="131:15"><operator pos:start="131:12" pos:end="131:12">&amp;</operator><name pos:start="131:13" pos:end="131:15">fis</name></expr></argument>, <argument pos:start="131:18" pos:end="131:21"><expr pos:start="131:18" pos:end="131:21"><literal type="number" pos:start="131:18" pos:end="131:21">0x00</literal></expr></argument>, <argument pos:start="131:24" pos:end="131:34"><expr pos:start="131:24" pos:end="131:34"><sizeof pos:start="131:24" pos:end="131:34">sizeof<argument_list pos:start="131:30" pos:end="131:34">(<argument pos:start="131:31" pos:end="131:33"><expr pos:start="131:31" pos:end="131:33"><name pos:start="131:31" pos:end="131:33">fis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:24"><expr pos:start="133:5" pos:end="133:23"><name pos:start="133:5" pos:end="133:16"><name pos:start="133:5" pos:end="133:7">fis</name><operator pos:start="133:8" pos:end="133:8">.</operator><name pos:start="133:9" pos:end="133:16">fis_type</name></name> <operator pos:start="133:18" pos:end="133:18">=</operator> <literal type="number" pos:start="133:20" pos:end="133:23">0x27</literal></expr>;</expr_stmt> <comment type="block" pos:start="133:26" pos:end="133:58">/* Register Host-to-Device FIS */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:23"><expr pos:start="135:5" pos:end="135:22"><name pos:start="135:5" pos:end="135:15"><name pos:start="135:5" pos:end="135:7">fis</name><operator pos:start="135:8" pos:end="135:8">.</operator><name pos:start="135:9" pos:end="135:15">command</name></name> <operator pos:start="135:17" pos:end="135:17">=</operator> <literal type="number" pos:start="135:19" pos:end="135:22">0xEC</literal></expr>;</expr_stmt>  <comment type="block" pos:start="135:26" pos:end="135:39">/* IDENTIFY */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:14"><name pos:start="137:5" pos:end="137:7">fis</name><operator pos:start="137:8" pos:end="137:8">.</operator><name pos:start="137:9" pos:end="137:14">device</name></name> <operator pos:start="137:16" pos:end="137:16">=</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:21"><expr pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:13"><name pos:start="139:5" pos:end="139:7">fis</name><operator pos:start="139:8" pos:end="139:8">.</operator><name pos:start="139:9" pos:end="139:13">flags</name></name> <operator pos:start="139:15" pos:end="139:15">=</operator> <literal type="number" pos:start="139:17" pos:end="139:20">0x80</literal></expr>;</expr_stmt>    <comment type="block" pos:start="139:26" pos:end="139:61">/* Indicate this is a command FIS */</comment>



    <comment type="block" pos:start="143:5" pos:end="143:74">/* We've committed nothing yet, no interrupts should be posted yet. */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:62"><expr pos:start="145:5" pos:end="145:61"><call pos:start="145:5" pos:end="145:61"><name pos:start="145:5" pos:end="145:19">g_assert_cmphex</name><argument_list pos:start="145:20" pos:end="145:61">(<argument pos:start="145:21" pos:end="145:53"><expr pos:start="145:21" pos:end="145:53"><call pos:start="145:21" pos:end="145:53"><name pos:start="145:21" pos:end="145:32">ahci_px_rreg</name><argument_list pos:start="145:33" pos:end="145:53">(<argument pos:start="145:34" pos:end="145:37"><expr pos:start="145:34" pos:end="145:37"><name pos:start="145:34" pos:end="145:37">ahci</name></expr></argument>, <argument pos:start="145:40" pos:end="145:40"><expr pos:start="145:40" pos:end="145:40"><name pos:start="145:40" pos:end="145:40">i</name></expr></argument>, <argument pos:start="145:43" pos:end="145:52"><expr pos:start="145:43" pos:end="145:52"><name pos:start="145:43" pos:end="145:52">AHCI_PX_IS</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:56" pos:end="145:57"><expr pos:start="145:56" pos:end="145:57"><operator pos:start="145:56" pos:end="145:57">==</operator></expr></argument>, <argument pos:start="145:60" pos:end="145:60"><expr pos:start="145:60" pos:end="145:60"><literal type="number" pos:start="145:60" pos:end="145:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:53">/* Commit the Command FIS to the Command Table */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:39"><expr pos:start="151:5" pos:end="151:38"><call pos:start="151:5" pos:end="151:38"><name pos:start="151:5" pos:end="151:12">memwrite</name><argument_list pos:start="151:13" pos:end="151:38">(<argument pos:start="151:14" pos:end="151:18"><expr pos:start="151:14" pos:end="151:18"><name pos:start="151:14" pos:end="151:18">table</name></expr></argument>, <argument pos:start="151:21" pos:end="151:24"><expr pos:start="151:21" pos:end="151:24"><operator pos:start="151:21" pos:end="151:21">&amp;</operator><name pos:start="151:22" pos:end="151:24">fis</name></expr></argument>, <argument pos:start="151:27" pos:end="151:37"><expr pos:start="151:27" pos:end="151:37"><sizeof pos:start="151:27" pos:end="151:37">sizeof<argument_list pos:start="151:33" pos:end="151:37">(<argument pos:start="151:34" pos:end="151:36"><expr pos:start="151:34" pos:end="151:36"><name pos:start="151:34" pos:end="151:36">fis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:51">/* Commit the PRD entry to the Command Table */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:46"><expr pos:start="157:5" pos:end="157:45"><call pos:start="157:5" pos:end="157:45"><name pos:start="157:5" pos:end="157:12">memwrite</name><argument_list pos:start="157:13" pos:end="157:45">(<argument pos:start="157:14" pos:end="157:25"><expr pos:start="157:14" pos:end="157:25"><name pos:start="157:14" pos:end="157:18">table</name> <operator pos:start="157:20" pos:end="157:20">+</operator> <literal type="number" pos:start="157:22" pos:end="157:25">0x80</literal></expr></argument>, <argument pos:start="157:28" pos:end="157:31"><expr pos:start="157:28" pos:end="157:31"><operator pos:start="157:28" pos:end="157:28">&amp;</operator><name pos:start="157:29" pos:end="157:31">prd</name></expr></argument>, <argument pos:start="157:34" pos:end="157:44"><expr pos:start="157:34" pos:end="157:44"><sizeof pos:start="157:34" pos:end="157:44">sizeof<argument_list pos:start="157:40" pos:end="157:44">(<argument pos:start="157:41" pos:end="157:43"><expr pos:start="157:41" pos:end="157:43"><name pos:start="157:41" pos:end="157:43">prd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:80">/* Commit Command #cx, pointing to the Table, to the Command List Buffer. */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:47"><expr pos:start="163:5" pos:end="163:46"><call pos:start="163:5" pos:end="163:46"><name pos:start="163:5" pos:end="163:27">ahci_set_command_header</name><argument_list pos:start="163:28" pos:end="163:46">(<argument pos:start="163:29" pos:end="163:32"><expr pos:start="163:29" pos:end="163:32"><name pos:start="163:29" pos:end="163:32">ahci</name></expr></argument>, <argument pos:start="163:35" pos:end="163:35"><expr pos:start="163:35" pos:end="163:35"><name pos:start="163:35" pos:end="163:35">i</name></expr></argument>, <argument pos:start="163:38" pos:end="163:39"><expr pos:start="163:38" pos:end="163:39"><name pos:start="163:38" pos:end="163:39">cx</name></expr></argument>, <argument pos:start="163:42" pos:end="163:45"><expr pos:start="163:42" pos:end="163:45"><operator pos:start="163:42" pos:end="163:42">&amp;</operator><name pos:start="163:43" pos:end="163:45">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="169:69">/* Everything is in place, but we haven't given the go-ahead yet,

     * so we should find that there are no pending interrupts yet. */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:62"><expr pos:start="171:5" pos:end="171:61"><call pos:start="171:5" pos:end="171:61"><name pos:start="171:5" pos:end="171:19">g_assert_cmphex</name><argument_list pos:start="171:20" pos:end="171:61">(<argument pos:start="171:21" pos:end="171:53"><expr pos:start="171:21" pos:end="171:53"><call pos:start="171:21" pos:end="171:53"><name pos:start="171:21" pos:end="171:32">ahci_px_rreg</name><argument_list pos:start="171:33" pos:end="171:53">(<argument pos:start="171:34" pos:end="171:37"><expr pos:start="171:34" pos:end="171:37"><name pos:start="171:34" pos:end="171:37">ahci</name></expr></argument>, <argument pos:start="171:40" pos:end="171:40"><expr pos:start="171:40" pos:end="171:40"><name pos:start="171:40" pos:end="171:40">i</name></expr></argument>, <argument pos:start="171:43" pos:end="171:52"><expr pos:start="171:43" pos:end="171:52"><name pos:start="171:43" pos:end="171:52">AHCI_PX_IS</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:56" pos:end="171:57"><expr pos:start="171:56" pos:end="171:57"><operator pos:start="171:56" pos:end="171:57">==</operator></expr></argument>, <argument pos:start="171:60" pos:end="171:60"><expr pos:start="171:60" pos:end="171:60"><literal type="number" pos:start="171:60" pos:end="171:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:36">/* Issue Command #cx via PxCI */</comment>

    <expr_stmt pos:start="177:5" pos:end="177:49"><expr pos:start="177:5" pos:end="177:48"><call pos:start="177:5" pos:end="177:48"><name pos:start="177:5" pos:end="177:16">ahci_px_wreg</name><argument_list pos:start="177:17" pos:end="177:48">(<argument pos:start="177:18" pos:end="177:21"><expr pos:start="177:18" pos:end="177:21"><name pos:start="177:18" pos:end="177:21">ahci</name></expr></argument>, <argument pos:start="177:24" pos:end="177:24"><expr pos:start="177:24" pos:end="177:24"><name pos:start="177:24" pos:end="177:24">i</name></expr></argument>, <argument pos:start="177:27" pos:end="177:36"><expr pos:start="177:27" pos:end="177:36"><name pos:start="177:27" pos:end="177:36">AHCI_PX_CI</name></expr></argument>, <argument pos:start="177:39" pos:end="177:47"><expr pos:start="177:39" pos:end="177:47"><operator pos:start="177:39" pos:end="177:39">(</operator><literal type="number" pos:start="177:40" pos:end="177:40">1</literal> <operator pos:start="177:42" pos:end="177:43">&lt;&lt;</operator> <name pos:start="177:45" pos:end="177:46">cx</name><operator pos:start="177:47" pos:end="177:47">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="179:5" pos:end="183:5">while <condition pos:start="179:11" pos:end="179:75">(<expr pos:start="179:12" pos:end="179:74"><call pos:start="179:12" pos:end="179:74"><name pos:start="179:12" pos:end="179:17">BITSET</name><argument_list pos:start="179:18" pos:end="179:74">(<argument pos:start="179:19" pos:end="179:52"><expr pos:start="179:19" pos:end="179:52"><call pos:start="179:19" pos:end="179:52"><name pos:start="179:19" pos:end="179:30">ahci_px_rreg</name><argument_list pos:start="179:31" pos:end="179:52">(<argument pos:start="179:32" pos:end="179:35"><expr pos:start="179:32" pos:end="179:35"><name pos:start="179:32" pos:end="179:35">ahci</name></expr></argument>, <argument pos:start="179:38" pos:end="179:38"><expr pos:start="179:38" pos:end="179:38"><name pos:start="179:38" pos:end="179:38">i</name></expr></argument>, <argument pos:start="179:41" pos:end="179:51"><expr pos:start="179:41" pos:end="179:51"><name pos:start="179:41" pos:end="179:51">AHCI_PX_TFD</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:55" pos:end="179:73"><expr pos:start="179:55" pos:end="179:73"><name pos:start="179:55" pos:end="179:73">AHCI_PX_TFD_STS_BSY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:77" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:19">

        <expr_stmt pos:start="181:9" pos:end="181:19"><expr pos:start="181:9" pos:end="181:18"><call pos:start="181:9" pos:end="181:18"><name pos:start="181:9" pos:end="181:14">usleep</name><argument_list pos:start="181:15" pos:end="181:18">(<argument pos:start="181:16" pos:end="181:17"><expr pos:start="181:16" pos:end="181:17"><literal type="number" pos:start="181:16" pos:end="181:17">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="187:5" pos:end="187:39">/* Check for expected interrupts */</comment>

    <expr_stmt pos:start="189:5" pos:end="189:44"><expr pos:start="189:5" pos:end="189:43"><name pos:start="189:5" pos:end="189:7">reg</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <call pos:start="189:11" pos:end="189:43"><name pos:start="189:11" pos:end="189:22">ahci_px_rreg</name><argument_list pos:start="189:23" pos:end="189:43">(<argument pos:start="189:24" pos:end="189:27"><expr pos:start="189:24" pos:end="189:27"><name pos:start="189:24" pos:end="189:27">ahci</name></expr></argument>, <argument pos:start="189:30" pos:end="189:30"><expr pos:start="189:30" pos:end="189:30"><name pos:start="189:30" pos:end="189:30">i</name></expr></argument>, <argument pos:start="189:33" pos:end="189:42"><expr pos:start="189:33" pos:end="189:42"><name pos:start="189:33" pos:end="189:42">AHCI_PX_IS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:41"><expr pos:start="191:5" pos:end="191:40"><call pos:start="191:5" pos:end="191:40"><name pos:start="191:5" pos:end="191:18">ASSERT_BIT_SET</name><argument_list pos:start="191:19" pos:end="191:40">(<argument pos:start="191:20" pos:end="191:22"><expr pos:start="191:20" pos:end="191:22"><name pos:start="191:20" pos:end="191:22">reg</name></expr></argument>, <argument pos:start="191:25" pos:end="191:39"><expr pos:start="191:25" pos:end="191:39"><name pos:start="191:25" pos:end="191:39">AHCI_PX_IS_DHRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:40"><expr pos:start="193:5" pos:end="193:39"><call pos:start="193:5" pos:end="193:39"><name pos:start="193:5" pos:end="193:18">ASSERT_BIT_SET</name><argument_list pos:start="193:19" pos:end="193:39">(<argument pos:start="193:20" pos:end="193:22"><expr pos:start="193:20" pos:end="193:22"><name pos:start="193:20" pos:end="193:22">reg</name></expr></argument>, <argument pos:start="193:25" pos:end="193:38"><expr pos:start="193:25" pos:end="193:38"><name pos:start="193:25" pos:end="193:38">AHCI_PX_IS_PSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="195:5" pos:end="195:50">/* BUG: we expect AHCI_PX_IS_DPS to be set. */</comment>

    <expr_stmt pos:start="197:5" pos:end="197:42"><expr pos:start="197:5" pos:end="197:41"><call pos:start="197:5" pos:end="197:41"><name pos:start="197:5" pos:end="197:20">ASSERT_BIT_CLEAR</name><argument_list pos:start="197:21" pos:end="197:41">(<argument pos:start="197:22" pos:end="197:24"><expr pos:start="197:22" pos:end="197:24"><name pos:start="197:22" pos:end="197:24">reg</name></expr></argument>, <argument pos:start="197:27" pos:end="197:40"><expr pos:start="197:27" pos:end="197:40"><name pos:start="197:27" pos:end="197:40">AHCI_PX_IS_DPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:74">/* Clear expected interrupts and assert all interrupts now cleared. */</comment>

    <expr_stmt pos:start="203:5" pos:end="205:68"><expr pos:start="203:5" pos:end="205:67"><call pos:start="203:5" pos:end="205:67"><name pos:start="203:5" pos:end="203:16">ahci_px_wreg</name><argument_list pos:start="203:17" pos:end="205:67">(<argument pos:start="203:18" pos:end="203:21"><expr pos:start="203:18" pos:end="203:21"><name pos:start="203:18" pos:end="203:21">ahci</name></expr></argument>, <argument pos:start="203:24" pos:end="203:24"><expr pos:start="203:24" pos:end="203:24"><name pos:start="203:24" pos:end="203:24">i</name></expr></argument>, <argument pos:start="203:27" pos:end="203:36"><expr pos:start="203:27" pos:end="203:36"><name pos:start="203:27" pos:end="203:36">AHCI_PX_IS</name></expr></argument>,

                 <argument pos:start="205:18" pos:end="205:66"><expr pos:start="205:18" pos:end="205:66"><name pos:start="205:18" pos:end="205:32">AHCI_PX_IS_DHRS</name> <operator pos:start="205:34" pos:end="205:34">|</operator> <name pos:start="205:36" pos:end="205:49">AHCI_PX_IS_PSS</name> <operator pos:start="205:51" pos:end="205:51">|</operator> <name pos:start="205:53" pos:end="205:66">AHCI_PX_IS_DPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:62"><expr pos:start="207:5" pos:end="207:61"><call pos:start="207:5" pos:end="207:61"><name pos:start="207:5" pos:end="207:19">g_assert_cmphex</name><argument_list pos:start="207:20" pos:end="207:61">(<argument pos:start="207:21" pos:end="207:53"><expr pos:start="207:21" pos:end="207:53"><call pos:start="207:21" pos:end="207:53"><name pos:start="207:21" pos:end="207:32">ahci_px_rreg</name><argument_list pos:start="207:33" pos:end="207:53">(<argument pos:start="207:34" pos:end="207:37"><expr pos:start="207:34" pos:end="207:37"><name pos:start="207:34" pos:end="207:37">ahci</name></expr></argument>, <argument pos:start="207:40" pos:end="207:40"><expr pos:start="207:40" pos:end="207:40"><name pos:start="207:40" pos:end="207:40">i</name></expr></argument>, <argument pos:start="207:43" pos:end="207:52"><expr pos:start="207:43" pos:end="207:52"><name pos:start="207:43" pos:end="207:52">AHCI_PX_IS</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="207:56" pos:end="207:57"><expr pos:start="207:56" pos:end="207:57"><operator pos:start="207:56" pos:end="207:57">==</operator></expr></argument>, <argument pos:start="207:60" pos:end="207:60"><expr pos:start="207:60" pos:end="207:60"><literal type="number" pos:start="207:60" pos:end="207:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:27">/* Check for errors. */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:46"><expr pos:start="213:5" pos:end="213:45"><name pos:start="213:5" pos:end="213:7">reg</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:45"><name pos:start="213:11" pos:end="213:22">ahci_px_rreg</name><argument_list pos:start="213:23" pos:end="213:45">(<argument pos:start="213:24" pos:end="213:27"><expr pos:start="213:24" pos:end="213:27"><name pos:start="213:24" pos:end="213:27">ahci</name></expr></argument>, <argument pos:start="213:30" pos:end="213:30"><expr pos:start="213:30" pos:end="213:30"><name pos:start="213:30" pos:end="213:30">i</name></expr></argument>, <argument pos:start="213:33" pos:end="213:44"><expr pos:start="213:33" pos:end="213:44"><name pos:start="213:33" pos:end="213:44">AHCI_PX_SERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:32"><expr pos:start="215:5" pos:end="215:31"><call pos:start="215:5" pos:end="215:31"><name pos:start="215:5" pos:end="215:19">g_assert_cmphex</name><argument_list pos:start="215:20" pos:end="215:31">(<argument pos:start="215:21" pos:end="215:23"><expr pos:start="215:21" pos:end="215:23"><name pos:start="215:21" pos:end="215:23">reg</name></expr></argument>, <argument pos:start="215:26" pos:end="215:27"><expr pos:start="215:26" pos:end="215:27"><operator pos:start="215:26" pos:end="215:27">==</operator></expr></argument>, <argument pos:start="215:30" pos:end="215:30"><expr pos:start="215:30" pos:end="215:30"><literal type="number" pos:start="215:30" pos:end="215:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:45"><expr pos:start="217:5" pos:end="217:44"><name pos:start="217:5" pos:end="217:7">reg</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:44"><name pos:start="217:11" pos:end="217:22">ahci_px_rreg</name><argument_list pos:start="217:23" pos:end="217:44">(<argument pos:start="217:24" pos:end="217:27"><expr pos:start="217:24" pos:end="217:27"><name pos:start="217:24" pos:end="217:27">ahci</name></expr></argument>, <argument pos:start="217:30" pos:end="217:30"><expr pos:start="217:30" pos:end="217:30"><name pos:start="217:30" pos:end="217:30">i</name></expr></argument>, <argument pos:start="217:33" pos:end="217:43"><expr pos:start="217:33" pos:end="217:43"><name pos:start="217:33" pos:end="217:43">AHCI_PX_TFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:47"><expr pos:start="219:5" pos:end="219:46"><call pos:start="219:5" pos:end="219:46"><name pos:start="219:5" pos:end="219:20">ASSERT_BIT_CLEAR</name><argument_list pos:start="219:21" pos:end="219:46">(<argument pos:start="219:22" pos:end="219:24"><expr pos:start="219:22" pos:end="219:24"><name pos:start="219:22" pos:end="219:24">reg</name></expr></argument>, <argument pos:start="219:27" pos:end="219:45"><expr pos:start="219:27" pos:end="219:45"><name pos:start="219:27" pos:end="219:45">AHCI_PX_TFD_STS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:43"><expr pos:start="221:5" pos:end="221:42"><call pos:start="221:5" pos:end="221:42"><name pos:start="221:5" pos:end="221:20">ASSERT_BIT_CLEAR</name><argument_list pos:start="221:21" pos:end="221:42">(<argument pos:start="221:22" pos:end="221:24"><expr pos:start="221:22" pos:end="221:24"><name pos:start="221:22" pos:end="221:24">reg</name></expr></argument>, <argument pos:start="221:27" pos:end="221:41"><expr pos:start="221:27" pos:end="221:41"><name pos:start="221:27" pos:end="221:41">AHCI_PX_TFD_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:60">/* Investigate the CMD, assert that we read 512 bytes */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:47"><expr pos:start="227:5" pos:end="227:46"><call pos:start="227:5" pos:end="227:46"><name pos:start="227:5" pos:end="227:27">ahci_get_command_header</name><argument_list pos:start="227:28" pos:end="227:46">(<argument pos:start="227:29" pos:end="227:32"><expr pos:start="227:29" pos:end="227:32"><name pos:start="227:29" pos:end="227:32">ahci</name></expr></argument>, <argument pos:start="227:35" pos:end="227:35"><expr pos:start="227:35" pos:end="227:35"><name pos:start="227:35" pos:end="227:35">i</name></expr></argument>, <argument pos:start="227:38" pos:end="227:39"><expr pos:start="227:38" pos:end="227:39"><name pos:start="227:38" pos:end="227:39">cx</name></expr></argument>, <argument pos:start="227:42" pos:end="227:45"><expr pos:start="227:42" pos:end="227:45"><operator pos:start="227:42" pos:end="227:42">&amp;</operator><name pos:start="227:43" pos:end="227:45">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:40"><expr pos:start="229:5" pos:end="229:39"><call pos:start="229:5" pos:end="229:39"><name pos:start="229:5" pos:end="229:19">g_assert_cmphex</name><argument_list pos:start="229:20" pos:end="229:39">(<argument pos:start="229:21" pos:end="229:23"><expr pos:start="229:21" pos:end="229:23"><literal type="number" pos:start="229:21" pos:end="229:23">512</literal></expr></argument>, <argument pos:start="229:26" pos:end="229:27"><expr pos:start="229:26" pos:end="229:27"><operator pos:start="229:26" pos:end="229:27">==</operator></expr></argument>, <argument pos:start="229:30" pos:end="229:38"><expr pos:start="229:30" pos:end="229:38"><name pos:start="229:30" pos:end="229:38"><name pos:start="229:30" pos:end="229:32">cmd</name><operator pos:start="229:33" pos:end="229:33">.</operator><name pos:start="229:34" pos:end="229:38">prdbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="233:5" pos:end="233:35">/* Investigate FIS responses */</comment>

    <expr_stmt pos:start="235:5" pos:end="235:48"><expr pos:start="235:5" pos:end="235:47"><call pos:start="235:5" pos:end="235:47"><name pos:start="235:5" pos:end="235:11">memread</name><argument_list pos:start="235:12" pos:end="235:47">(<argument pos:start="235:13" pos:end="235:35"><expr pos:start="235:13" pos:end="235:35"><name pos:start="235:13" pos:end="235:25"><name pos:start="235:13" pos:end="235:16">ahci</name><operator pos:start="235:17" pos:end="235:18">-&gt;</operator><name pos:start="235:19" pos:end="235:22">port</name><index pos:start="235:23" pos:end="235:25">[<expr pos:start="235:24" pos:end="235:24"><name pos:start="235:24" pos:end="235:24">i</name></expr>]</index></name><operator pos:start="235:26" pos:end="235:26">.</operator><name pos:start="235:27" pos:end="235:28">fb</name> <operator pos:start="235:30" pos:end="235:30">+</operator> <literal type="number" pos:start="235:32" pos:end="235:35">0x20</literal></expr></argument>, <argument pos:start="235:38" pos:end="235:40"><expr pos:start="235:38" pos:end="235:40"><name pos:start="235:38" pos:end="235:40">pio</name></expr></argument>, <argument pos:start="235:43" pos:end="235:46"><expr pos:start="235:43" pos:end="235:46"><literal type="number" pos:start="235:43" pos:end="235:46">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:48"><expr pos:start="237:5" pos:end="237:47"><call pos:start="237:5" pos:end="237:47"><name pos:start="237:5" pos:end="237:11">memread</name><argument_list pos:start="237:12" pos:end="237:47">(<argument pos:start="237:13" pos:end="237:35"><expr pos:start="237:13" pos:end="237:35"><name pos:start="237:13" pos:end="237:25"><name pos:start="237:13" pos:end="237:16">ahci</name><operator pos:start="237:17" pos:end="237:18">-&gt;</operator><name pos:start="237:19" pos:end="237:22">port</name><index pos:start="237:23" pos:end="237:25">[<expr pos:start="237:24" pos:end="237:24"><name pos:start="237:24" pos:end="237:24">i</name></expr>]</index></name><operator pos:start="237:26" pos:end="237:26">.</operator><name pos:start="237:27" pos:end="237:28">fb</name> <operator pos:start="237:30" pos:end="237:30">+</operator> <literal type="number" pos:start="237:32" pos:end="237:35">0x40</literal></expr></argument>, <argument pos:start="237:38" pos:end="237:40"><expr pos:start="237:38" pos:end="237:40"><name pos:start="237:38" pos:end="237:40">d2h</name></expr></argument>, <argument pos:start="237:43" pos:end="237:46"><expr pos:start="237:43" pos:end="237:46"><literal type="number" pos:start="237:43" pos:end="237:46">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:45"><expr pos:start="239:5" pos:end="239:44"><call pos:start="239:5" pos:end="239:44"><name pos:start="239:5" pos:end="239:19">g_assert_cmphex</name><argument_list pos:start="239:20" pos:end="239:44">(<argument pos:start="239:21" pos:end="239:33"><expr pos:start="239:21" pos:end="239:33"><name pos:start="239:21" pos:end="239:33"><name pos:start="239:21" pos:end="239:23">pio</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:33">fis_type</name></name></expr></argument>, <argument pos:start="239:36" pos:end="239:37"><expr pos:start="239:36" pos:end="239:37"><operator pos:start="239:36" pos:end="239:37">==</operator></expr></argument>, <argument pos:start="239:40" pos:end="239:43"><expr pos:start="239:40" pos:end="239:43"><literal type="number" pos:start="239:40" pos:end="239:43">0x5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:45"><expr pos:start="241:5" pos:end="241:44"><call pos:start="241:5" pos:end="241:44"><name pos:start="241:5" pos:end="241:19">g_assert_cmphex</name><argument_list pos:start="241:20" pos:end="241:44">(<argument pos:start="241:21" pos:end="241:33"><expr pos:start="241:21" pos:end="241:33"><name pos:start="241:21" pos:end="241:33"><name pos:start="241:21" pos:end="241:23">d2h</name><operator pos:start="241:24" pos:end="241:25">-&gt;</operator><name pos:start="241:26" pos:end="241:33">fis_type</name></name></expr></argument>, <argument pos:start="241:36" pos:end="241:37"><expr pos:start="241:36" pos:end="241:37"><operator pos:start="241:36" pos:end="241:37">==</operator></expr></argument>, <argument pos:start="241:40" pos:end="241:43"><expr pos:start="241:40" pos:end="241:43"><literal type="number" pos:start="241:40" pos:end="241:43">0x34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:48"><expr pos:start="243:5" pos:end="243:47"><call pos:start="243:5" pos:end="243:47"><name pos:start="243:5" pos:end="243:19">g_assert_cmphex</name><argument_list pos:start="243:20" pos:end="243:47">(<argument pos:start="243:21" pos:end="243:30"><expr pos:start="243:21" pos:end="243:30"><name pos:start="243:21" pos:end="243:30"><name pos:start="243:21" pos:end="243:23">pio</name><operator pos:start="243:24" pos:end="243:25">-&gt;</operator><name pos:start="243:26" pos:end="243:30">flags</name></name></expr></argument>, <argument pos:start="243:33" pos:end="243:34"><expr pos:start="243:33" pos:end="243:34"><operator pos:start="243:33" pos:end="243:34">==</operator></expr></argument>, <argument pos:start="243:37" pos:end="243:46"><expr pos:start="243:37" pos:end="243:46"><name pos:start="243:37" pos:end="243:46"><name pos:start="243:37" pos:end="243:39">d2h</name><operator pos:start="243:40" pos:end="243:41">-&gt;</operator><name pos:start="243:42" pos:end="243:46">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:50"><expr pos:start="245:5" pos:end="245:49"><call pos:start="245:5" pos:end="245:49"><name pos:start="245:5" pos:end="245:19">g_assert_cmphex</name><argument_list pos:start="245:20" pos:end="245:49">(<argument pos:start="245:21" pos:end="245:31"><expr pos:start="245:21" pos:end="245:31"><name pos:start="245:21" pos:end="245:31"><name pos:start="245:21" pos:end="245:23">pio</name><operator pos:start="245:24" pos:end="245:25">-&gt;</operator><name pos:start="245:26" pos:end="245:31">status</name></name></expr></argument>, <argument pos:start="245:34" pos:end="245:35"><expr pos:start="245:34" pos:end="245:35"><operator pos:start="245:34" pos:end="245:35">==</operator></expr></argument>, <argument pos:start="245:38" pos:end="245:48"><expr pos:start="245:38" pos:end="245:48"><name pos:start="245:38" pos:end="245:48"><name pos:start="245:38" pos:end="245:40">d2h</name><operator pos:start="245:41" pos:end="245:42">-&gt;</operator><name pos:start="245:43" pos:end="245:48">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:48"><expr pos:start="247:5" pos:end="247:47"><call pos:start="247:5" pos:end="247:47"><name pos:start="247:5" pos:end="247:19">g_assert_cmphex</name><argument_list pos:start="247:20" pos:end="247:47">(<argument pos:start="247:21" pos:end="247:30"><expr pos:start="247:21" pos:end="247:30"><name pos:start="247:21" pos:end="247:30"><name pos:start="247:21" pos:end="247:23">pio</name><operator pos:start="247:24" pos:end="247:25">-&gt;</operator><name pos:start="247:26" pos:end="247:30">error</name></name></expr></argument>, <argument pos:start="247:33" pos:end="247:34"><expr pos:start="247:33" pos:end="247:34"><operator pos:start="247:33" pos:end="247:34">==</operator></expr></argument>, <argument pos:start="247:37" pos:end="247:46"><expr pos:start="247:37" pos:end="247:46"><name pos:start="247:37" pos:end="247:46"><name pos:start="247:37" pos:end="247:39">d2h</name><operator pos:start="247:40" pos:end="247:41">-&gt;</operator><name pos:start="247:42" pos:end="247:46">error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:45"><expr pos:start="251:5" pos:end="251:44"><name pos:start="251:5" pos:end="251:7">reg</name> <operator pos:start="251:9" pos:end="251:9">=</operator> <call pos:start="251:11" pos:end="251:44"><name pos:start="251:11" pos:end="251:22">ahci_px_rreg</name><argument_list pos:start="251:23" pos:end="251:44">(<argument pos:start="251:24" pos:end="251:27"><expr pos:start="251:24" pos:end="251:27"><name pos:start="251:24" pos:end="251:27">ahci</name></expr></argument>, <argument pos:start="251:30" pos:end="251:30"><expr pos:start="251:30" pos:end="251:30"><name pos:start="251:30" pos:end="251:30">i</name></expr></argument>, <argument pos:start="251:33" pos:end="251:43"><expr pos:start="251:33" pos:end="251:43"><name pos:start="251:33" pos:end="251:43">AHCI_PX_TFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:61"><expr pos:start="253:5" pos:end="253:60"><call pos:start="253:5" pos:end="253:60"><name pos:start="253:5" pos:end="253:19">g_assert_cmphex</name><argument_list pos:start="253:20" pos:end="253:60">(<argument pos:start="253:21" pos:end="253:43"><expr pos:start="253:21" pos:end="253:43"><operator pos:start="253:21" pos:end="253:21">(</operator><name pos:start="253:22" pos:end="253:24">reg</name> <operator pos:start="253:26" pos:end="253:26">&amp;</operator> <name pos:start="253:28" pos:end="253:42">AHCI_PX_TFD_ERR</name><operator pos:start="253:43" pos:end="253:43">)</operator></expr></argument>, <argument pos:start="253:46" pos:end="253:47"><expr pos:start="253:46" pos:end="253:47"><operator pos:start="253:46" pos:end="253:47">==</operator></expr></argument>, <argument pos:start="253:50" pos:end="253:59"><expr pos:start="253:50" pos:end="253:59"><name pos:start="253:50" pos:end="253:59"><name pos:start="253:50" pos:end="253:52">pio</name><operator pos:start="253:53" pos:end="253:54">-&gt;</operator><name pos:start="253:55" pos:end="253:59">error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:62"><expr pos:start="255:5" pos:end="255:61"><call pos:start="255:5" pos:end="255:61"><name pos:start="255:5" pos:end="255:19">g_assert_cmphex</name><argument_list pos:start="255:20" pos:end="255:61">(<argument pos:start="255:21" pos:end="255:43"><expr pos:start="255:21" pos:end="255:43"><operator pos:start="255:21" pos:end="255:21">(</operator><name pos:start="255:22" pos:end="255:24">reg</name> <operator pos:start="255:26" pos:end="255:26">&amp;</operator> <name pos:start="255:28" pos:end="255:42">AHCI_PX_TFD_STS</name><operator pos:start="255:43" pos:end="255:43">)</operator></expr></argument>, <argument pos:start="255:46" pos:end="255:47"><expr pos:start="255:46" pos:end="255:47"><operator pos:start="255:46" pos:end="255:47">==</operator></expr></argument>, <argument pos:start="255:50" pos:end="255:60"><expr pos:start="255:50" pos:end="255:60"><name pos:start="255:50" pos:end="255:60"><name pos:start="255:50" pos:end="255:52">pio</name><operator pos:start="255:53" pos:end="255:54">-&gt;</operator><name pos:start="255:55" pos:end="255:60">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="257:5" pos:end="261:73">/* The PIO Setup FIS contains a "bytes read" field, which is a

     * 16-bit value. The Physical Region Descriptor Byte Count is

     * 32-bit, but for small transfers using one PRD, it should match. */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:59"><expr pos:start="263:5" pos:end="263:58"><call pos:start="263:5" pos:end="263:58"><name pos:start="263:5" pos:end="263:19">g_assert_cmphex</name><argument_list pos:start="263:20" pos:end="263:58">(<argument pos:start="263:21" pos:end="263:42"><expr pos:start="263:21" pos:end="263:42"><call pos:start="263:21" pos:end="263:42"><name pos:start="263:21" pos:end="263:31">le16_to_cpu</name><argument_list pos:start="263:32" pos:end="263:42">(<argument pos:start="263:33" pos:end="263:41"><expr pos:start="263:33" pos:end="263:41"><name pos:start="263:33" pos:end="263:41"><name pos:start="263:33" pos:end="263:35">pio</name><operator pos:start="263:36" pos:end="263:37">-&gt;</operator><name pos:start="263:38" pos:end="263:41">res4</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="263:45" pos:end="263:46"><expr pos:start="263:45" pos:end="263:46"><operator pos:start="263:45" pos:end="263:46">==</operator></expr></argument>, <argument pos:start="263:49" pos:end="263:57"><expr pos:start="263:49" pos:end="263:57"><name pos:start="263:49" pos:end="263:57"><name pos:start="263:49" pos:end="263:51">cmd</name><operator pos:start="263:52" pos:end="263:52">.</operator><name pos:start="263:53" pos:end="263:57">prdbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:70">/* Last, but not least: Investigate the IDENTIFY response data. */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:34"><expr pos:start="269:5" pos:end="269:33"><call pos:start="269:5" pos:end="269:33"><name pos:start="269:5" pos:end="269:11">memread</name><argument_list pos:start="269:12" pos:end="269:33">(<argument pos:start="269:13" pos:end="269:20"><expr pos:start="269:13" pos:end="269:20"><name pos:start="269:13" pos:end="269:20">data_ptr</name></expr></argument>, <argument pos:start="269:23" pos:end="269:27"><expr pos:start="269:23" pos:end="269:27"><operator pos:start="269:23" pos:end="269:23">&amp;</operator><name pos:start="269:24" pos:end="269:27">buff</name></expr></argument>, <argument pos:start="269:30" pos:end="269:32"><expr pos:start="269:30" pos:end="269:32"><literal type="number" pos:start="269:30" pos:end="269:32">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="273:5" pos:end="273:51">/* Check serial number/version in the buffer */</comment>

    <comment type="block" pos:start="275:5" pos:end="281:74">/* NB: IDENTIFY strings are packed in 16bit little endian chunks.

     * Since we copy byte-for-byte in ahci-test, on both LE and BE, we need to

     * unchunk this data. By contrast, ide-test copies 2 bytes at a time, and

     * as a consequence, only needs to unchunk the data on LE machines. */</comment>

    <expr_stmt pos:start="283:5" pos:end="283:34"><expr pos:start="283:5" pos:end="283:33"><call pos:start="283:5" pos:end="283:33"><name pos:start="283:5" pos:end="283:18">string_bswap16</name><argument_list pos:start="283:19" pos:end="283:33">(<argument pos:start="283:20" pos:end="283:28"><expr pos:start="283:20" pos:end="283:28"><operator pos:start="283:20" pos:end="283:20">&amp;</operator><name pos:start="283:21" pos:end="283:28"><name pos:start="283:21" pos:end="283:24">buff</name><index pos:start="283:25" pos:end="283:28">[<expr pos:start="283:26" pos:end="283:27"><literal type="number" pos:start="283:26" pos:end="283:27">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:31" pos:end="283:32"><expr pos:start="283:31" pos:end="283:32"><literal type="number" pos:start="283:31" pos:end="283:32">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:55"><expr pos:start="285:5" pos:end="285:54"><name pos:start="285:5" pos:end="285:6">rc</name> <operator pos:start="285:8" pos:end="285:8">=</operator> <call pos:start="285:10" pos:end="285:54"><name pos:start="285:10" pos:end="285:15">memcmp</name><argument_list pos:start="285:16" pos:end="285:54">(<argument pos:start="285:17" pos:end="285:25"><expr pos:start="285:17" pos:end="285:25"><operator pos:start="285:17" pos:end="285:17">&amp;</operator><name pos:start="285:18" pos:end="285:25"><name pos:start="285:18" pos:end="285:21">buff</name><index pos:start="285:22" pos:end="285:25">[<expr pos:start="285:23" pos:end="285:24"><literal type="number" pos:start="285:23" pos:end="285:24">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="285:28" pos:end="285:49"><expr pos:start="285:28" pos:end="285:49"><literal type="string" pos:start="285:28" pos:end="285:49">"testdisk            "</literal></expr></argument>, <argument pos:start="285:52" pos:end="285:53"><expr pos:start="285:52" pos:end="285:53"><literal type="number" pos:start="285:52" pos:end="285:53">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:31"><expr pos:start="287:5" pos:end="287:30"><call pos:start="287:5" pos:end="287:30"><name pos:start="287:5" pos:end="287:19">g_assert_cmphex</name><argument_list pos:start="287:20" pos:end="287:30">(<argument pos:start="287:21" pos:end="287:22"><expr pos:start="287:21" pos:end="287:22"><name pos:start="287:21" pos:end="287:22">rc</name></expr></argument>, <argument pos:start="287:25" pos:end="287:26"><expr pos:start="287:25" pos:end="287:26"><operator pos:start="287:25" pos:end="287:26">==</operator></expr></argument>, <argument pos:start="287:29" pos:end="287:29"><expr pos:start="287:29" pos:end="287:29"><literal type="number" pos:start="287:29" pos:end="287:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="291:5" pos:end="291:33"><expr pos:start="291:5" pos:end="291:32"><call pos:start="291:5" pos:end="291:32"><name pos:start="291:5" pos:end="291:18">string_bswap16</name><argument_list pos:start="291:19" pos:end="291:32">(<argument pos:start="291:20" pos:end="291:28"><expr pos:start="291:20" pos:end="291:28"><operator pos:start="291:20" pos:end="291:20">&amp;</operator><name pos:start="291:21" pos:end="291:28"><name pos:start="291:21" pos:end="291:24">buff</name><index pos:start="291:25" pos:end="291:28">[<expr pos:start="291:26" pos:end="291:27"><literal type="number" pos:start="291:26" pos:end="291:27">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="291:31" pos:end="291:31"><expr pos:start="291:31" pos:end="291:31"><literal type="number" pos:start="291:31" pos:end="291:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:42"><expr pos:start="293:5" pos:end="293:41"><name pos:start="293:5" pos:end="293:6">rc</name> <operator pos:start="293:8" pos:end="293:8">=</operator> <call pos:start="293:10" pos:end="293:41"><name pos:start="293:10" pos:end="293:15">memcmp</name><argument_list pos:start="293:16" pos:end="293:41">(<argument pos:start="293:17" pos:end="293:25"><expr pos:start="293:17" pos:end="293:25"><operator pos:start="293:17" pos:end="293:17">&amp;</operator><name pos:start="293:18" pos:end="293:25"><name pos:start="293:18" pos:end="293:21">buff</name><index pos:start="293:22" pos:end="293:25">[<expr pos:start="293:23" pos:end="293:24"><literal type="number" pos:start="293:23" pos:end="293:24">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="293:28" pos:end="293:37"><expr pos:start="293:28" pos:end="293:37"><literal type="string" pos:start="293:28" pos:end="293:37">"version "</literal></expr></argument>, <argument pos:start="293:40" pos:end="293:40"><expr pos:start="293:40" pos:end="293:40"><literal type="number" pos:start="293:40" pos:end="293:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:31"><expr pos:start="295:5" pos:end="295:30"><call pos:start="295:5" pos:end="295:30"><name pos:start="295:5" pos:end="295:19">g_assert_cmphex</name><argument_list pos:start="295:20" pos:end="295:30">(<argument pos:start="295:21" pos:end="295:22"><expr pos:start="295:21" pos:end="295:22"><name pos:start="295:21" pos:end="295:22">rc</name></expr></argument>, <argument pos:start="295:25" pos:end="295:26"><expr pos:start="295:25" pos:end="295:26"><operator pos:start="295:25" pos:end="295:26">==</operator></expr></argument>, <argument pos:start="295:29" pos:end="295:29"><expr pos:start="295:29" pos:end="295:29"><literal type="number" pos:start="295:29" pos:end="295:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:16"><expr pos:start="299:5" pos:end="299:15"><call pos:start="299:5" pos:end="299:15"><name pos:start="299:5" pos:end="299:10">g_free</name><argument_list pos:start="299:11" pos:end="299:15">(<argument pos:start="299:12" pos:end="299:14"><expr pos:start="299:12" pos:end="299:14"><name pos:start="299:12" pos:end="299:14">d2h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:16"><expr pos:start="301:5" pos:end="301:15"><call pos:start="301:5" pos:end="301:15"><name pos:start="301:5" pos:end="301:10">g_free</name><argument_list pos:start="301:11" pos:end="301:15">(<argument pos:start="301:12" pos:end="301:14"><expr pos:start="301:12" pos:end="301:14"><name pos:start="301:12" pos:end="301:14">pio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
