<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11179.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_resize</name><parameter_list pos:start="1:22" pos:end="5:49">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:26">bool</name></type> <name pos:start="1:28" pos:end="1:37">has_device</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:57">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:40"><decl pos:start="3:23" pos:end="3:40"><type pos:start="3:23" pos:end="3:40"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:40">has_node_name</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:63"><decl pos:start="3:43" pos:end="3:63"><type pos:start="3:43" pos:end="3:63"><specifier pos:start="3:43" pos:end="3:47">const</specifier> <name pos:start="3:49" pos:end="3:52">char</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:63">node_name</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:34"><decl pos:start="5:23" pos:end="5:34"><type pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:29">int64_t</name></type> <name pos:start="5:31" pos:end="5:34">size</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:48"><decl pos:start="5:37" pos:end="5:48"><type pos:start="5:37" pos:end="5:48"><name pos:start="5:37" pos:end="5:41">Error</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier><modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="123:1">{<block_content pos:start="9:5" pos:end="121:37">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">AioContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="23:36"><expr pos:start="19:5" pos:end="23:35"><name pos:start="19:5" pos:end="19:6">bs</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="23:35"><name pos:start="19:10" pos:end="19:23">bdrv_lookup_bs</name><argument_list pos:start="19:24" pos:end="23:35">(<argument pos:start="19:25" pos:end="19:50"><expr pos:start="19:25" pos:end="19:50"><ternary pos:start="19:25" pos:end="19:50"><condition pos:start="19:25" pos:end="19:36"><expr pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:34">has_device</name></expr> ?</condition><then pos:start="19:38" pos:end="19:43"> <expr pos:start="19:38" pos:end="19:43"><name pos:start="19:38" pos:end="19:43">device</name></expr> </then><else pos:start="19:45" pos:end="19:50">: <expr pos:start="19:47" pos:end="19:50"><name pos:start="19:47" pos:end="19:50">NULL</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="21:25" pos:end="21:56"><expr pos:start="21:25" pos:end="21:56"><ternary pos:start="21:25" pos:end="21:56"><condition pos:start="21:25" pos:end="21:39"><expr pos:start="21:25" pos:end="21:37"><name pos:start="21:25" pos:end="21:37">has_node_name</name></expr> ?</condition><then pos:start="21:41" pos:end="21:49"> <expr pos:start="21:41" pos:end="21:49"><name pos:start="21:41" pos:end="21:49">node_name</name></expr> </then><else pos:start="21:51" pos:end="21:56">: <expr pos:start="21:53" pos:end="21:56"><name pos:start="21:53" pos:end="21:56">NULL</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="23:25" pos:end="23:34"><expr pos:start="23:25" pos:end="23:34"><operator pos:start="23:25" pos:end="23:25">&amp;</operator><name pos:start="23:26" pos:end="23:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:17">local_err</name></expr>)</condition> <block pos:start="25:20" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><call pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:23">error_propagate</name><argument_list pos:start="27:24" pos:end="27:40">(<argument pos:start="27:25" pos:end="27:28"><expr pos:start="27:25" pos:end="27:28"><name pos:start="27:25" pos:end="27:28">errp</name></expr></argument>, <argument pos:start="27:31" pos:end="27:39"><expr pos:start="27:31" pos:end="27:39"><name pos:start="27:31" pos:end="27:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:15">aio_context</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:38">bdrv_get_aio_context</name><argument_list pos:start="35:39" pos:end="35:42">(<argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><name pos:start="35:40" pos:end="35:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><call pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:23">aio_context_acquire</name><argument_list pos:start="37:24" pos:end="37:36">(<argument pos:start="37:25" pos:end="37:35"><expr pos:start="37:25" pos:end="37:35"><name pos:start="37:25" pos:end="37:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:38">(<expr pos:start="41:9" pos:end="41:37"><operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:37"><name pos:start="41:10" pos:end="41:33">bdrv_is_first_non_filter</name><argument_list pos:start="41:34" pos:end="41:37">(<argument pos:start="41:35" pos:end="41:36"><expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:40" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:58"><expr pos:start="43:9" pos:end="43:57"><call pos:start="43:9" pos:end="43:57"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:57">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:46"><expr pos:start="43:26" pos:end="43:46"><name pos:start="43:26" pos:end="43:46">QERR_FEATURE_DISABLED</name></expr></argument>, <argument pos:start="43:49" pos:end="43:56"><expr pos:start="43:49" pos:end="43:56"><literal type="string" pos:start="43:49" pos:end="43:56">"resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:17">(<expr pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:14">&lt;</operator> <literal type="number" pos:start="51:16" pos:end="51:16">0</literal></expr>)</condition> <block pos:start="51:19" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:17">

        <expr_stmt pos:start="53:9" pos:end="53:76"><expr pos:start="53:9" pos:end="53:75"><call pos:start="53:9" pos:end="53:75"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="53:75">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="53:53"><expr pos:start="53:26" pos:end="53:53"><name pos:start="53:26" pos:end="53:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="53:56" pos:end="53:61"><expr pos:start="53:56" pos:end="53:61"><literal type="string" pos:start="53:56" pos:end="53:61">"size"</literal></expr></argument>, <argument pos:start="53:64" pos:end="53:74"><expr pos:start="53:64" pos:end="53:74"><literal type="string" pos:start="53:64" pos:end="53:74">"a &gt;0 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:17">goto <name pos:start="55:14" pos:end="55:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:59">(<expr pos:start="61:9" pos:end="61:58"><call pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:26">bdrv_op_is_blocked</name><argument_list pos:start="61:27" pos:end="61:58">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">bs</name></expr></argument>, <argument pos:start="61:32" pos:end="61:51"><expr pos:start="61:32" pos:end="61:51"><name pos:start="61:32" pos:end="61:51">BLOCK_OP_TYPE_RESIZE</name></expr></argument>, <argument pos:start="61:54" pos:end="61:57"><expr pos:start="61:54" pos:end="61:57"><name pos:start="61:54" pos:end="61:57">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:61" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:17">

        <expr_stmt pos:start="63:9" pos:end="63:53"><expr pos:start="63:9" pos:end="63:52"><call pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:18">error_setg</name><argument_list pos:start="63:19" pos:end="63:52">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">errp</name></expr></argument>, <argument pos:start="63:26" pos:end="63:43"><expr pos:start="63:26" pos:end="63:43"><name pos:start="63:26" pos:end="63:43">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="63:46" pos:end="63:51"><expr pos:start="63:46" pos:end="63:51"><name pos:start="63:46" pos:end="63:51">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:70">/* complete all in-flight operations before resizing the device */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:21"><expr pos:start="73:5" pos:end="73:20"><call pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:18">bdrv_drain_all</name><argument_list pos:start="73:19" pos:end="73:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:7">ret</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:33"><name pos:start="77:11" pos:end="77:23">bdrv_truncate</name><argument_list pos:start="77:24" pos:end="77:33">(<argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><name pos:start="77:25" pos:end="77:26">bs</name></expr></argument>, <argument pos:start="77:29" pos:end="77:32"><expr pos:start="77:29" pos:end="77:32"><name pos:start="77:29" pos:end="77:32">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="79:5" pos:end="115:5">switch <condition pos:start="79:12" pos:end="79:16">(<expr pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">ret</name></expr>)</condition> <block pos:start="79:18" pos:end="115:5">{<block_content pos:start="81:5" pos:end="113:14">

    <case pos:start="81:5" pos:end="81:11">case <expr pos:start="81:10" pos:end="81:10"><literal type="number" pos:start="81:10" pos:end="81:10">0</literal></expr>:</case>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:20">case <expr pos:start="85:10" pos:end="85:19"><operator pos:start="85:10" pos:end="85:10">-</operator><name pos:start="85:11" pos:end="85:19">ENOMEDIUM</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:60"><expr pos:start="87:9" pos:end="87:59"><call pos:start="87:9" pos:end="87:59"><name pos:start="87:9" pos:end="87:18">error_setg</name><argument_list pos:start="87:19" pos:end="87:59">(<argument pos:start="87:20" pos:end="87:23"><expr pos:start="87:20" pos:end="87:23"><name pos:start="87:20" pos:end="87:23">errp</name></expr></argument>, <argument pos:start="87:26" pos:end="87:50"><expr pos:start="87:26" pos:end="87:50"><name pos:start="87:26" pos:end="87:50">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="87:53" pos:end="87:58"><expr pos:start="87:53" pos:end="87:58"><name pos:start="87:53" pos:end="87:58">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:18">case <expr pos:start="91:10" pos:end="91:17"><operator pos:start="91:10" pos:end="91:10">-</operator><name pos:start="91:11" pos:end="91:17">ENOTSUP</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><call pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="93:42">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:41"><expr pos:start="93:26" pos:end="93:41"><name pos:start="93:26" pos:end="93:41">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:17">case <expr pos:start="97:10" pos:end="97:16"><operator pos:start="97:10" pos:end="97:10">-</operator><name pos:start="97:11" pos:end="97:16">EACCES</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:61"><expr pos:start="99:9" pos:end="99:60"><call pos:start="99:9" pos:end="99:60"><name pos:start="99:9" pos:end="99:18">error_setg</name><argument_list pos:start="99:19" pos:end="99:60">(<argument pos:start="99:20" pos:end="99:23"><expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">errp</name></expr></argument>, <argument pos:start="99:26" pos:end="99:51"><expr pos:start="99:26" pos:end="99:51"><literal type="string" pos:start="99:26" pos:end="99:51">"Device '%s' is read only"</literal></expr></argument>, <argument pos:start="99:54" pos:end="99:59"><expr pos:start="99:54" pos:end="99:59"><name pos:start="99:54" pos:end="99:59">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:16">case <expr pos:start="103:10" pos:end="103:15"><operator pos:start="103:10" pos:end="103:10">-</operator><name pos:start="103:11" pos:end="103:15">EBUSY</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><call pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:18">error_setg</name><argument_list pos:start="105:19" pos:end="105:52">(<argument pos:start="105:20" pos:end="105:23"><expr pos:start="105:20" pos:end="105:23"><name pos:start="105:20" pos:end="105:23">errp</name></expr></argument>, <argument pos:start="105:26" pos:end="105:43"><expr pos:start="105:26" pos:end="105:43"><name pos:start="105:26" pos:end="105:43">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="105:46" pos:end="105:51"><expr pos:start="105:46" pos:end="105:51"><name pos:start="105:46" pos:end="105:51">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <default pos:start="109:5" pos:end="109:12">default:</default>

        <expr_stmt pos:start="111:9" pos:end="111:57"><expr pos:start="111:9" pos:end="111:56"><call pos:start="111:9" pos:end="111:56"><name pos:start="111:9" pos:end="111:24">error_setg_errno</name><argument_list pos:start="111:25" pos:end="111:56">(<argument pos:start="111:26" pos:end="111:29"><expr pos:start="111:26" pos:end="111:29"><name pos:start="111:26" pos:end="111:29">errp</name></expr></argument>, <argument pos:start="111:32" pos:end="111:35"><expr pos:start="111:32" pos:end="111:35"><operator pos:start="111:32" pos:end="111:32">-</operator><name pos:start="111:33" pos:end="111:35">ret</name></expr></argument>, <argument pos:start="111:38" pos:end="111:55"><expr pos:start="111:38" pos:end="111:55"><literal type="string" pos:start="111:38" pos:end="111:55">"Could not resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="119:1" pos:end="119:4"><name pos:start="119:1" pos:end="119:3">out</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:37"><expr pos:start="121:5" pos:end="121:36"><call pos:start="121:5" pos:end="121:36"><name pos:start="121:5" pos:end="121:23">aio_context_release</name><argument_list pos:start="121:24" pos:end="121:36">(<argument pos:start="121:25" pos:end="121:35"><expr pos:start="121:25" pos:end="121:35"><name pos:start="121:25" pos:end="121:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
