<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20538.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">ra288_decode_frame</name><parameter_list pos:start="1:30" pos:end="5:43">(<parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:52"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type> <name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">data_size</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:65"><decl pos:start="3:47" pos:end="3:65"><type pos:start="3:47" pos:end="3:65"><specifier pos:start="3:47" pos:end="3:51">const</specifier> <name pos:start="3:53" pos:end="3:59">uint8_t</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type> <name pos:start="3:63" pos:end="3:65">buf</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:42">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="67:1">{<block_content pos:start="9:5" pos:end="65:30">

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">int16_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">out</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">RA288Context</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:23">ractx</name> <init pos:start="13:25" pos:end="13:42">= <expr pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:31">avctx</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:38">(<expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:16">buf_size</name> <operator pos:start="19:18" pos:end="19:18">&lt;</operator> <name pos:start="19:20" pos:end="19:37"><name pos:start="19:20" pos:end="19:24">avctx</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:37">block_align</name></name></expr>)</condition> <block pos:start="19:40" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:17">

        <expr_stmt pos:start="21:9" pos:end="25:45"><expr pos:start="21:9" pos:end="25:44"><call pos:start="21:9" pos:end="25:44"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="25:44">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="23:16" pos:end="23:59"><expr pos:start="23:16" pos:end="23:59"><literal type="string" pos:start="23:16" pos:end="23:59">"Error! Input buffer is too small [%d&lt;%d]\n"</literal></expr></argument>,

               <argument pos:start="25:16" pos:end="25:23"><expr pos:start="25:16" pos:end="25:23"><name pos:start="25:16" pos:end="25:23">buf_size</name></expr></argument>, <argument pos:start="25:26" pos:end="25:43"><expr pos:start="25:26" pos:end="25:43"><name pos:start="25:26" pos:end="25:43"><name pos:start="25:26" pos:end="25:30">avctx</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:43">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><call pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:17">init_get_bits</name><argument_list pos:start="33:18" pos:end="33:51">(<argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:21">gb</name></expr></argument>, <argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">buf</name></expr></argument>, <argument pos:start="33:29" pos:end="33:50"><expr pos:start="33:29" pos:end="33:50"><name pos:start="33:29" pos:end="33:46"><name pos:start="33:29" pos:end="33:33">avctx</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:46">block_align</name></name> <operator pos:start="33:48" pos:end="33:48">*</operator> <literal type="number" pos:start="33:50" pos:end="33:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="37:5" pos:end="59:5">for <control pos:start="37:9" pos:end="37:26">(<init pos:start="37:10" pos:end="37:13"><expr pos:start="37:10" pos:end="37:12"><name pos:start="37:10" pos:end="37:10">i</name><operator pos:start="37:11" pos:end="37:11">=</operator><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</init> <condition pos:start="37:15" pos:end="37:21"><expr pos:start="37:15" pos:end="37:20"><name pos:start="37:15" pos:end="37:15">i</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:20">32</literal></expr>;</condition> <incr pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><name pos:start="37:23" pos:end="37:23">i</name><operator pos:start="37:24" pos:end="37:25">++</operator></expr></incr>)</control> <block pos:start="37:28" pos:end="59:5">{<block_content pos:start="39:9" pos:end="57:35">

        <decl_stmt pos:start="39:9" pos:end="39:48"><decl pos:start="39:9" pos:end="39:47"><type pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:13">float</name></type> <name pos:start="39:15" pos:end="39:18">gain</name> <init pos:start="39:20" pos:end="39:47">= <expr pos:start="39:22" pos:end="39:47"><name pos:start="39:22" pos:end="39:47"><name pos:start="39:22" pos:end="39:29">amptable</name><index pos:start="39:30" pos:end="39:47">[<expr pos:start="39:31" pos:end="39:46"><call pos:start="39:31" pos:end="39:46"><name pos:start="39:31" pos:end="39:38">get_bits</name><argument_list pos:start="39:39" pos:end="39:46">(<argument pos:start="39:40" pos:end="39:42"><expr pos:start="39:40" pos:end="39:42"><operator pos:start="39:40" pos:end="39:40">&amp;</operator><name pos:start="39:41" pos:end="39:42">gb</name></expr></argument>, <argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><literal type="number" pos:start="39:45" pos:end="39:45">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:47"><decl pos:start="41:9" pos:end="41:46"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:19">cb_coef</name> <init pos:start="41:21" pos:end="41:46">= <expr pos:start="41:23" pos:end="41:46"><call pos:start="41:23" pos:end="41:46"><name pos:start="41:23" pos:end="41:30">get_bits</name><argument_list pos:start="41:31" pos:end="41:46">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:34">gb</name></expr></argument>, <argument pos:start="41:37" pos:end="41:45"><expr pos:start="41:37" pos:end="41:45"><literal type="number" pos:start="41:37" pos:end="41:39">6</literal> <operator pos:start="41:39" pos:end="41:39">+</operator> <operator pos:start="41:41" pos:end="41:41">(</operator><name pos:start="41:42" pos:end="41:42">i</name><operator pos:start="41:43" pos:end="41:43">&amp;</operator><literal type="number" pos:start="41:44" pos:end="41:44">1</literal><operator pos:start="41:45" pos:end="41:45">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><call pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:14">decode</name><argument_list pos:start="45:15" pos:end="45:36">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">ractx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:26"><expr pos:start="45:23" pos:end="45:26"><name pos:start="45:23" pos:end="45:26">gain</name></expr></argument>, <argument pos:start="45:29" pos:end="45:35"><expr pos:start="45:29" pos:end="45:35"><name pos:start="45:29" pos:end="45:35">cb_coef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="49:9" pos:end="51:50">for <control pos:start="49:13" pos:end="49:29">(<init pos:start="49:14" pos:end="49:17"><expr pos:start="49:14" pos:end="49:16"><name pos:start="49:14" pos:end="49:14">j</name><operator pos:start="49:15" pos:end="49:15">=</operator><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</init> <condition pos:start="49:19" pos:end="49:24"><expr pos:start="49:19" pos:end="49:23"><name pos:start="49:19" pos:end="49:19">j</name> <operator pos:start="49:21" pos:end="49:21">&lt;</operator> <literal type="number" pos:start="49:23" pos:end="49:23">5</literal></expr>;</condition> <incr pos:start="49:26" pos:end="49:28"><expr pos:start="49:26" pos:end="49:28"><name pos:start="49:26" pos:end="49:26">j</name><operator pos:start="49:27" pos:end="49:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:13" pos:end="51:50"><block_content pos:start="51:13" pos:end="51:50">

            <expr_stmt pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:49"><operator pos:start="51:13" pos:end="51:13">*</operator><operator pos:start="51:14" pos:end="51:14">(</operator><name pos:start="51:15" pos:end="51:17">out</name><operator pos:start="51:18" pos:end="51:19">++</operator><operator pos:start="51:20" pos:end="51:20">)</operator> <operator pos:start="51:22" pos:end="51:22">=</operator> <literal type="number" pos:start="51:24" pos:end="51:24">8</literal> <operator pos:start="51:26" pos:end="51:26">*</operator> <name pos:start="51:28" pos:end="51:49"><name pos:start="51:28" pos:end="51:32">ractx</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:42">sp_block</name><index pos:start="51:43" pos:end="51:49">[<expr pos:start="51:44" pos:end="51:48"><literal type="number" pos:start="51:44" pos:end="51:46">4</literal> <operator pos:start="51:46" pos:end="51:46">-</operator> <name pos:start="51:48" pos:end="51:48">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="55:9" pos:end="57:35"><if pos:start="55:9" pos:end="57:35">if <condition pos:start="55:12" pos:end="55:25">(<expr pos:start="55:13" pos:end="55:24"><operator pos:start="55:13" pos:end="55:13">(</operator><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">&amp;</operator> <literal type="number" pos:start="55:18" pos:end="55:18">7</literal><operator pos:start="55:19" pos:end="55:19">)</operator> <operator pos:start="55:21" pos:end="55:22">==</operator> <literal type="number" pos:start="55:24" pos:end="55:24">3</literal></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:35"><block_content pos:start="57:13" pos:end="57:35">

            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><call pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:27">backward_filter</name><argument_list pos:start="57:28" pos:end="57:34">(<argument pos:start="57:29" pos:end="57:33"><expr pos:start="57:29" pos:end="57:33"><name pos:start="57:29" pos:end="57:33">ractx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="63:5" pos:end="63:44"><expr pos:start="63:5" pos:end="63:43"><operator pos:start="63:5" pos:end="63:5">*</operator><name pos:start="63:6" pos:end="63:14">data_size</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:22">char</name> <operator pos:start="63:24" pos:end="63:24">*</operator><operator pos:start="63:25" pos:end="63:25">)</operator><name pos:start="63:26" pos:end="63:28">out</name> <operator pos:start="63:30" pos:end="63:30">-</operator> <operator pos:start="63:32" pos:end="63:32">(</operator><name pos:start="63:33" pos:end="63:36">char</name> <operator pos:start="63:38" pos:end="63:38">*</operator><operator pos:start="63:39" pos:end="63:39">)</operator><name pos:start="63:40" pos:end="63:43">data</name></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:30">return <expr pos:start="65:12" pos:end="65:29"><name pos:start="65:12" pos:end="65:29"><name pos:start="65:12" pos:end="65:16">avctx</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:29">block_align</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
