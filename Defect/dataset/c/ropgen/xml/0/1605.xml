<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1605.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:26">rcu_q_updater</name><parameter_list pos:start="1:27" pos:end="1:37">(<parameter pos:start="1:28" pos:end="1:36"><decl pos:start="1:28" pos:end="1:36"><type pos:start="1:28" pos:end="1:33"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:16">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">j</name></decl>, <decl pos:start="5:12" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:20">target_el</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:8">long</name> <name pos:start="7:10" pos:end="7:13">long</name></type> <name pos:start="7:15" pos:end="7:29">n_updates_local</name> <init pos:start="7:31" pos:end="7:33">= <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:8">long</name> <name pos:start="9:10" pos:end="9:13">long</name></type> <name pos:start="9:15" pos:end="9:29">n_removed_local</name> <init pos:start="9:31" pos:end="9:33">= <expr pos:start="9:33" pos:end="9:33"><literal type="number" pos:start="9:33" pos:end="9:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:23">list_element</name></name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:27">el</name></decl>, <decl pos:start="11:30" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:25"><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:37">prev_el</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><operator pos:start="15:5" pos:end="15:5">*</operator><operator pos:start="15:6" pos:end="15:6">(</operator>struct <name pos:start="15:14" pos:end="15:28">rcu_reader_data</name> <operator pos:start="15:30" pos:end="15:30">*</operator><operator pos:start="15:31" pos:end="15:31">*</operator><operator pos:start="15:32" pos:end="15:32">)</operator><name pos:start="15:33" pos:end="15:35">arg</name> <operator pos:start="15:37" pos:end="15:37">=</operator> <operator pos:start="15:39" pos:end="15:39">&amp;</operator><name pos:start="15:40" pos:end="15:49">rcu_reader</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><call pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:14">atomic_inc</name><argument_list pos:start="17:15" pos:end="17:32">(<argument pos:start="17:16" pos:end="17:31"><expr pos:start="17:16" pos:end="17:31"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:31">nthreadsrunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="23:5">while <condition pos:start="19:11" pos:end="19:33">(<expr pos:start="19:12" pos:end="19:32"><name pos:start="19:12" pos:end="19:17">goflag</name> <operator pos:start="19:19" pos:end="19:20">==</operator> <name pos:start="19:22" pos:end="19:32">GOFLAG_INIT</name></expr>)</condition> <block pos:start="19:35" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><call pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:16">g_usleep</name><argument_list pos:start="21:17" pos:end="21:22">(<argument pos:start="21:18" pos:end="21:21"><expr pos:start="21:18" pos:end="21:21"><literal type="number" pos:start="21:18" pos:end="21:21">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <while pos:start="27:5" pos:end="91:5">while <condition pos:start="27:11" pos:end="27:32">(<expr pos:start="27:12" pos:end="27:31"><name pos:start="27:12" pos:end="27:17">goflag</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:31">GOFLAG_RUN</name></expr>)</condition> <block pos:start="27:34" pos:end="91:5">{<block_content pos:start="29:9" pos:end="89:26">

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:17">target_el</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <call pos:start="29:21" pos:end="29:47"><name pos:start="29:21" pos:end="29:36">select_random_el</name><argument_list pos:start="29:37" pos:end="29:47">(<argument pos:start="29:38" pos:end="29:46"><expr pos:start="29:38" pos:end="29:46"><name pos:start="29:38" pos:end="29:46">RCU_Q_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:14"><expr pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:9">j</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="33:9" pos:end="33:67">/* FOREACH_RCU could work here but let's use both macros */</comment>

        <macro pos:start="35:9" pos:end="35:64"><name pos:start="35:9" pos:end="35:30">QLIST_FOREACH_SAFE_RCU</name><argument_list pos:start="35:31" pos:end="35:64">(<argument pos:start="35:32" pos:end="35:38">prev_el</argument>, <argument pos:start="35:41" pos:end="35:52">&amp;Q_list_head</argument>, <argument pos:start="35:55" pos:end="35:59">entry</argument>, <argument pos:start="35:62" pos:end="35:63">el</argument>)</argument_list></macro> <block pos:start="35:66" pos:end="53:9">{<block_content pos:start="37:13" pos:end="51:13">

            <expr_stmt pos:start="37:13" pos:end="37:16"><expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:13">j</name><operator pos:start="37:14" pos:end="37:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="51:13"><if pos:start="39:13" pos:end="51:13">if <condition pos:start="39:16" pos:end="39:31">(<expr pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:25">target_el</name> <operator pos:start="39:27" pos:end="39:28">==</operator> <name pos:start="39:30" pos:end="39:30">j</name></expr>)</condition> <block pos:start="39:33" pos:end="51:13">{<block_content pos:start="41:17" pos:end="49:22">

                <expr_stmt pos:start="41:17" pos:end="41:49"><expr pos:start="41:17" pos:end="41:48"><call pos:start="41:17" pos:end="41:48"><name pos:start="41:17" pos:end="41:32">QLIST_REMOVE_RCU</name><argument_list pos:start="41:33" pos:end="41:48">(<argument pos:start="41:34" pos:end="41:40"><expr pos:start="41:34" pos:end="41:40"><name pos:start="41:34" pos:end="41:40">prev_el</name></expr></argument>, <argument pos:start="41:43" pos:end="41:47"><expr pos:start="41:43" pos:end="41:47"><name pos:start="41:43" pos:end="41:47">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="43:17" pos:end="43:64">/* may be more than one updater in the future */</comment>

                <expr_stmt pos:start="45:17" pos:end="45:58"><expr pos:start="45:17" pos:end="45:57"><call pos:start="45:17" pos:end="45:57"><name pos:start="45:17" pos:end="45:25">call_rcu1</name><argument_list pos:start="45:26" pos:end="45:57">(<argument pos:start="45:27" pos:end="45:39"><expr pos:start="45:27" pos:end="45:39"><operator pos:start="45:27" pos:end="45:27">&amp;</operator><name pos:start="45:28" pos:end="45:39"><name pos:start="45:28" pos:end="45:34">prev_el</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:39">rcu</name></name></expr></argument>, <argument pos:start="45:42" pos:end="45:56"><expr pos:start="45:42" pos:end="45:56"><name pos:start="45:42" pos:end="45:56">reclaim_list_el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:34"><expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:31">n_removed_local</name><operator pos:start="47:32" pos:end="47:33">++</operator></expr>;</expr_stmt>

                <break pos:start="49:17" pos:end="49:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:34">(<expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:18">goflag</name> <operator pos:start="55:20" pos:end="55:21">==</operator> <name pos:start="55:23" pos:end="55:33">GOFLAG_STOP</name></expr>)</condition> <block pos:start="55:36" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:18">

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:17">target_el</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:47"><name pos:start="61:21" pos:end="61:36">select_random_el</name><argument_list pos:start="61:37" pos:end="61:47">(<argument pos:start="61:38" pos:end="61:46"><expr pos:start="61:38" pos:end="61:46"><name pos:start="61:38" pos:end="61:46">RCU_Q_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:14"><expr pos:start="63:9" pos:end="63:13"><name pos:start="63:9" pos:end="63:9">j</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <literal type="number" pos:start="63:13" pos:end="63:13">0</literal></expr>;</expr_stmt>

        <macro pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:25">QLIST_FOREACH_RCU</name><argument_list pos:start="65:26" pos:end="65:50">(<argument pos:start="65:27" pos:end="65:28">el</argument>, <argument pos:start="65:31" pos:end="65:42">&amp;Q_list_head</argument>, <argument pos:start="65:45" pos:end="65:49">entry</argument>)</argument_list></macro> <block pos:start="65:52" pos:end="83:9">{<block_content pos:start="67:13" pos:end="81:13">

            <expr_stmt pos:start="67:13" pos:end="67:16"><expr pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:13">j</name><operator pos:start="67:14" pos:end="67:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="81:13"><if pos:start="69:13" pos:end="81:13">if <condition pos:start="69:16" pos:end="69:31">(<expr pos:start="69:17" pos:end="69:30"><name pos:start="69:17" pos:end="69:25">target_el</name> <operator pos:start="69:27" pos:end="69:28">==</operator> <name pos:start="69:30" pos:end="69:30">j</name></expr>)</condition> <block pos:start="69:33" pos:end="81:13">{<block_content pos:start="71:17" pos:end="79:22">

                <expr_stmt pos:start="71:17" pos:end="71:56"><expr pos:start="71:17" pos:end="71:55"><name pos:start="71:17" pos:end="71:23">prev_el</name> <operator pos:start="71:25" pos:end="71:25">=</operator> <call pos:start="71:27" pos:end="71:55"><name pos:start="71:27" pos:end="71:31">g_new</name><argument_list pos:start="71:32" pos:end="71:55">(<argument pos:start="71:33" pos:end="71:51"><expr pos:start="71:33" pos:end="71:51">struct <name pos:start="71:40" pos:end="71:51">list_element</name></expr></argument>, <argument pos:start="71:54" pos:end="71:54"><expr pos:start="71:54" pos:end="71:54"><literal type="number" pos:start="71:54" pos:end="71:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:40"><expr pos:start="73:17" pos:end="73:39"><call pos:start="73:17" pos:end="73:39"><name pos:start="73:17" pos:end="73:26">atomic_add</name><argument_list pos:start="73:27" pos:end="73:39">(<argument pos:start="73:28" pos:end="73:35"><expr pos:start="73:28" pos:end="73:35"><operator pos:start="73:28" pos:end="73:28">&amp;</operator><name pos:start="73:29" pos:end="73:35">n_nodes</name></expr></argument>, <argument pos:start="73:38" pos:end="73:38"><expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:53"><expr pos:start="75:17" pos:end="75:52"><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:23">prev_el</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:28">val</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <call pos:start="75:32" pos:end="75:52"><name pos:start="75:32" pos:end="75:42">atomic_read</name><argument_list pos:start="75:43" pos:end="75:52">(<argument pos:start="75:44" pos:end="75:51"><expr pos:start="75:44" pos:end="75:51"><operator pos:start="75:44" pos:end="75:44">&amp;</operator><name pos:start="75:45" pos:end="75:51">n_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:60"><expr pos:start="77:17" pos:end="77:59"><call pos:start="77:17" pos:end="77:59"><name pos:start="77:17" pos:end="77:39">QLIST_INSERT_BEFORE_RCU</name><argument_list pos:start="77:40" pos:end="77:59">(<argument pos:start="77:41" pos:end="77:42"><expr pos:start="77:41" pos:end="77:42"><name pos:start="77:41" pos:end="77:42">el</name></expr></argument>, <argument pos:start="77:45" pos:end="77:51"><expr pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:51">prev_el</name></expr></argument>, <argument pos:start="77:54" pos:end="77:58"><expr pos:start="77:54" pos:end="77:58"><name pos:start="77:54" pos:end="77:58">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <expr_stmt pos:start="87:9" pos:end="87:29"><expr pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:23">n_updates_local</name> <operator pos:start="87:25" pos:end="87:26">+=</operator> <literal type="number" pos:start="87:28" pos:end="87:28">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><call pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:23">synchronize_rcu</name><argument_list pos:start="89:24" pos:end="89:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="93:5" pos:end="93:22"><expr pos:start="93:5" pos:end="93:21"><call pos:start="93:5" pos:end="93:21"><name pos:start="93:5" pos:end="93:19">synchronize_rcu</name><argument_list pos:start="93:20" pos:end="93:21">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:44"><expr pos:start="95:5" pos:end="95:43"><call pos:start="95:5" pos:end="95:43"><name pos:start="95:5" pos:end="95:14">atomic_add</name><argument_list pos:start="95:15" pos:end="95:43">(<argument pos:start="95:16" pos:end="95:25"><expr pos:start="95:16" pos:end="95:25"><operator pos:start="95:16" pos:end="95:16">&amp;</operator><name pos:start="95:17" pos:end="95:25">n_updates</name></expr></argument>, <argument pos:start="95:28" pos:end="95:42"><expr pos:start="95:28" pos:end="95:42"><name pos:start="95:28" pos:end="95:42">n_updates_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:50"><expr pos:start="97:5" pos:end="97:49"><call pos:start="97:5" pos:end="97:49"><name pos:start="97:5" pos:end="97:14">atomic_add</name><argument_list pos:start="97:15" pos:end="97:49">(<argument pos:start="97:16" pos:end="97:31"><expr pos:start="97:16" pos:end="97:31"><operator pos:start="97:16" pos:end="97:16">&amp;</operator><name pos:start="97:17" pos:end="97:31">n_nodes_removed</name></expr></argument>, <argument pos:start="97:34" pos:end="97:48"><expr pos:start="97:34" pos:end="97:48"><name pos:start="97:34" pos:end="97:48">n_removed_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:16">return <expr pos:start="99:12" pos:end="99:15"><name pos:start="99:12" pos:end="99:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
