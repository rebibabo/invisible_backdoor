<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10085.c" pos:tabs="8"><function pos:start="1:1" pos:end="299:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">usb_msd_handle_data</name><parameter_list pos:start="1:32" pos:end="1:61">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:41">USBDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:57">USBPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="299:1">{<block_content pos:start="5:5" pos:end="297:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MSDState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:33">= <expr pos:start="5:19" pos:end="5:33"><operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:27">MSDState</name> <operator pos:start="5:29" pos:end="5:29">*</operator><operator pos:start="5:30" pos:end="5:30">)</operator><name pos:start="5:31" pos:end="5:33">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">usb_msd_cbw</name></name></type> <name pos:start="9:24" pos:end="9:26">cbw</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:17">devep</name> <init pos:start="11:19" pos:end="11:29">= <expr pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:21">p</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:25">ep</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:29">nr</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="297:5">switch <condition pos:start="15:12" pos:end="15:19">(<expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:13">p</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">pid</name></name></expr>)</condition> <block pos:start="15:21" pos:end="297:5">{<block_content pos:start="17:5" pos:end="295:14">

    <case pos:start="17:5" pos:end="17:23">case <expr pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:22">USB_TOKEN_OUT</name></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="21:22"><if pos:start="19:9" pos:end="21:22">if <condition pos:start="19:12" pos:end="19:23">(<expr pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:17">devep</name> <operator pos:start="19:19" pos:end="19:20">!=</operator> <literal type="number" pos:start="19:22" pos:end="19:22">2</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:22"><block_content pos:start="21:13" pos:end="21:22">

            <goto pos:start="21:13" pos:end="21:22">goto <name pos:start="21:18" pos:end="21:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <switch pos:start="25:9" pos:end="163:9">switch <condition pos:start="25:16" pos:end="25:24">(<expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:23">mode</name></name></expr>)</condition> <block pos:start="25:26" pos:end="163:9">{<block_content pos:start="27:9" pos:end="161:22">

        <case pos:start="27:9" pos:end="27:26">case <expr pos:start="27:14" pos:end="27:25"><name pos:start="27:14" pos:end="27:25">USB_MSDM_CBW</name></expr>:</case>

            <if_stmt pos:start="29:13" pos:end="35:13"><if pos:start="29:13" pos:end="35:13">if <condition pos:start="29:16" pos:end="29:34">(<expr pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:17">p</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:22">iov</name><operator pos:start="29:23" pos:end="29:23">.</operator><name pos:start="29:24" pos:end="29:27">size</name></name> <operator pos:start="29:29" pos:end="29:30">!=</operator> <literal type="number" pos:start="29:32" pos:end="29:33">31</literal></expr>)</condition> <block pos:start="29:36" pos:end="35:13">{<block_content pos:start="31:17" pos:end="33:26">

                <expr_stmt pos:start="31:17" pos:end="31:57"><expr pos:start="31:17" pos:end="31:56"><call pos:start="31:17" pos:end="31:56"><name pos:start="31:17" pos:end="31:23">fprintf</name><argument_list pos:start="31:24" pos:end="31:56">(<argument pos:start="31:25" pos:end="31:30"><expr pos:start="31:25" pos:end="31:30"><name pos:start="31:25" pos:end="31:30">stderr</name></expr></argument>, <argument pos:start="31:33" pos:end="31:55"><expr pos:start="31:33" pos:end="31:55"><literal type="string" pos:start="31:33" pos:end="31:55">"usb-msd: Bad CBW size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="33:17" pos:end="33:26">goto <name pos:start="33:22" pos:end="33:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:41"><expr pos:start="37:13" pos:end="37:40"><call pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:27">usb_packet_copy</name><argument_list pos:start="37:28" pos:end="37:40">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">p</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:35">cbw</name></expr></argument>, <argument pos:start="37:38" pos:end="37:39"><expr pos:start="37:38" pos:end="37:39"><literal type="number" pos:start="37:38" pos:end="37:39">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="47:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="39:51">(<expr pos:start="39:17" pos:end="39:50"><call pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:27">le32_to_cpu</name><argument_list pos:start="39:28" pos:end="39:36">(<argument pos:start="39:29" pos:end="39:35"><expr pos:start="39:29" pos:end="39:35"><name pos:start="39:29" pos:end="39:35"><name pos:start="39:29" pos:end="39:31">cbw</name><operator pos:start="39:32" pos:end="39:32">.</operator><name pos:start="39:33" pos:end="39:35">sig</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:38" pos:end="39:39">!=</operator> <literal type="number" pos:start="39:41" pos:end="39:50">0x43425355</literal></expr>)</condition> <block pos:start="39:53" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:26">

                <expr_stmt pos:start="41:17" pos:end="43:46"><expr pos:start="41:17" pos:end="43:45"><call pos:start="41:17" pos:end="43:45"><name pos:start="41:17" pos:end="41:23">fprintf</name><argument_list pos:start="41:24" pos:end="43:45">(<argument pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:30">stderr</name></expr></argument>, <argument pos:start="41:33" pos:end="41:63"><expr pos:start="41:33" pos:end="41:63"><literal type="string" pos:start="41:33" pos:end="41:63">"usb-msd: Bad signature %08x\n"</literal></expr></argument>,

                        <argument pos:start="43:25" pos:end="43:44"><expr pos:start="43:25" pos:end="43:44"><call pos:start="43:25" pos:end="43:44"><name pos:start="43:25" pos:end="43:35">le32_to_cpu</name><argument_list pos:start="43:36" pos:end="43:44">(<argument pos:start="43:37" pos:end="43:43"><expr pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:39">cbw</name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:43">sig</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="45:17" pos:end="45:26">goto <name pos:start="45:22" pos:end="45:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:52"><expr pos:start="49:13" pos:end="49:51"><call pos:start="49:13" pos:end="49:51"><name pos:start="49:13" pos:end="49:19">DPRINTF</name><argument_list pos:start="49:20" pos:end="49:51">(<argument pos:start="49:21" pos:end="49:41"><expr pos:start="49:21" pos:end="49:41"><literal type="string" pos:start="49:21" pos:end="49:41">"Command on LUN %d\n"</literal></expr></argument>, <argument pos:start="49:44" pos:end="49:50"><expr pos:start="49:44" pos:end="49:50"><name pos:start="49:44" pos:end="49:50"><name pos:start="49:44" pos:end="49:46">cbw</name><operator pos:start="49:47" pos:end="49:47">.</operator><name pos:start="49:48" pos:end="49:50">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:29">(<expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:19">cbw</name><operator pos:start="51:20" pos:end="51:20">.</operator><name pos:start="51:21" pos:end="51:23">lun</name></name> <operator pos:start="51:25" pos:end="51:26">!=</operator> <literal type="number" pos:start="51:28" pos:end="51:28">0</literal></expr>)</condition> <block pos:start="51:31" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:26">

                <expr_stmt pos:start="53:17" pos:end="53:66"><expr pos:start="53:17" pos:end="53:65"><call pos:start="53:17" pos:end="53:65"><name pos:start="53:17" pos:end="53:23">fprintf</name><argument_list pos:start="53:24" pos:end="53:65">(<argument pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:30">stderr</name></expr></argument>, <argument pos:start="53:33" pos:end="53:55"><expr pos:start="53:33" pos:end="53:55"><literal type="string" pos:start="53:33" pos:end="53:55">"usb-msd: Bad LUN %d\n"</literal></expr></argument>, <argument pos:start="53:58" pos:end="53:64"><expr pos:start="53:58" pos:end="53:64"><name pos:start="53:58" pos:end="53:64"><name pos:start="53:58" pos:end="53:60">cbw</name><operator pos:start="53:61" pos:end="53:61">.</operator><name pos:start="53:62" pos:end="53:64">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="55:17" pos:end="55:26">goto <name pos:start="55:22" pos:end="55:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:15">tag</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:38"><name pos:start="59:19" pos:end="59:29">le32_to_cpu</name><argument_list pos:start="59:30" pos:end="59:38">(<argument pos:start="59:31" pos:end="59:37"><expr pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:33">cbw</name><operator pos:start="59:34" pos:end="59:34">.</operator><name pos:start="59:35" pos:end="59:37">tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:52"><expr pos:start="61:13" pos:end="61:51"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">data_len</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:51"><name pos:start="61:27" pos:end="61:37">le32_to_cpu</name><argument_list pos:start="61:38" pos:end="61:51">(<argument pos:start="61:39" pos:end="61:50"><expr pos:start="61:39" pos:end="61:50"><name pos:start="61:39" pos:end="61:50"><name pos:start="61:39" pos:end="61:41">cbw</name><operator pos:start="61:42" pos:end="61:42">.</operator><name pos:start="61:43" pos:end="61:50">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="75:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:33">(<expr pos:start="63:17" pos:end="63:32"><name pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:27">data_len</name></name> <operator pos:start="63:29" pos:end="63:30">==</operator> <literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>)</condition> <block pos:start="63:35" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:39">

                <expr_stmt pos:start="65:17" pos:end="65:39"><expr pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:23">mode</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:38">USB_MSDM_CSW</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="67:15" pos:end="71:13">else if <condition pos:start="67:23" pos:end="67:40">(<expr pos:start="67:24" pos:end="67:39"><name pos:start="67:24" pos:end="67:32"><name pos:start="67:24" pos:end="67:26">cbw</name><operator pos:start="67:27" pos:end="67:27">.</operator><name pos:start="67:28" pos:end="67:32">flags</name></name> <operator pos:start="67:34" pos:end="67:34">&amp;</operator> <literal type="number" pos:start="67:36" pos:end="67:39">0x80</literal></expr>)</condition> <block pos:start="67:42" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:42">

                <expr_stmt pos:start="69:17" pos:end="69:42"><expr pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:23">mode</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:41">USB_MSDM_DATAIN</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="75:13">else <block pos:start="71:20" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:43">

                <expr_stmt pos:start="73:17" pos:end="73:43"><expr pos:start="73:17" pos:end="73:42"><name pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:23">mode</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:42">USB_MSDM_DATAOUT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="79:62"><expr pos:start="77:13" pos:end="79:61"><call pos:start="77:13" pos:end="79:61"><name pos:start="77:13" pos:end="77:19">DPRINTF</name><argument_list pos:start="77:20" pos:end="79:61">(<argument pos:start="77:21" pos:end="77:66"><expr pos:start="77:21" pos:end="77:66"><literal type="string" pos:start="77:21" pos:end="77:66">"Command tag 0x%x flags %08x len %d data %d\n"</literal></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:23"><expr pos:start="79:21" pos:end="79:23"><name pos:start="79:21" pos:end="79:23">tag</name></expr></argument>, <argument pos:start="79:26" pos:end="79:34"><expr pos:start="79:26" pos:end="79:34"><name pos:start="79:26" pos:end="79:34"><name pos:start="79:26" pos:end="79:28">cbw</name><operator pos:start="79:29" pos:end="79:29">.</operator><name pos:start="79:30" pos:end="79:34">flags</name></name></expr></argument>, <argument pos:start="79:37" pos:end="79:47"><expr pos:start="79:37" pos:end="79:47"><name pos:start="79:37" pos:end="79:47"><name pos:start="79:37" pos:end="79:39">cbw</name><operator pos:start="79:40" pos:end="79:40">.</operator><name pos:start="79:41" pos:end="79:47">cmd_len</name></name></expr></argument>, <argument pos:start="79:50" pos:end="79:60"><expr pos:start="79:50" pos:end="79:60"><name pos:start="79:50" pos:end="79:60"><name pos:start="79:50" pos:end="79:50">s</name><operator pos:start="79:51" pos:end="79:52">-&gt;</operator><name pos:start="79:53" pos:end="79:60">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:53"><expr pos:start="81:13" pos:end="81:52"><call pos:start="81:13" pos:end="81:52"><name pos:start="81:13" pos:end="81:18">assert</name><argument_list pos:start="81:19" pos:end="81:52">(<argument pos:start="81:20" pos:end="81:51"><expr pos:start="81:20" pos:end="81:51"><call pos:start="81:20" pos:end="81:46"><name pos:start="81:20" pos:end="81:30">le32_to_cpu</name><argument_list pos:start="81:31" pos:end="81:46">(<argument pos:start="81:32" pos:end="81:45"><expr pos:start="81:32" pos:end="81:45"><name pos:start="81:32" pos:end="81:45"><name pos:start="81:32" pos:end="81:32">s</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:37">csw</name><operator pos:start="81:38" pos:end="81:38">.</operator><name pos:start="81:39" pos:end="81:45">residue</name></name></expr></argument>)</argument_list></call> <operator pos:start="81:48" pos:end="81:49">==</operator> <literal type="number" pos:start="81:51" pos:end="81:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:28"><expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">scsi_len</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="88:0"><expr pos:start="85:13" pos:end="85:69"><name pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:18">req</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:69"><name pos:start="85:22" pos:end="85:33">scsi_req_new</name><argument_list pos:start="85:34" pos:end="85:69">(<argument pos:start="85:35" pos:end="85:45"><expr pos:start="85:35" pos:end="85:45"><name pos:start="85:35" pos:end="85:45"><name pos:start="85:35" pos:end="85:35">s</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:45">scsi_dev</name></name></expr></argument>, <argument pos:start="85:48" pos:end="85:50"><expr pos:start="85:48" pos:end="85:50"><name pos:start="85:48" pos:end="85:50">tag</name></expr></argument>, <argument pos:start="85:53" pos:end="85:53"><expr pos:start="85:53" pos:end="85:53"><literal type="number" pos:start="85:53" pos:end="85:53">0</literal></expr></argument>, <argument pos:start="85:56" pos:end="85:62"><expr pos:start="85:56" pos:end="85:62"><name pos:start="85:56" pos:end="85:62"><name pos:start="85:56" pos:end="85:58">cbw</name><operator pos:start="85:59" pos:end="85:59">.</operator><name pos:start="85:60" pos:end="85:62">cmd</name></name></expr></argument>, <argument pos:start="85:65" pos:end="85:68"><expr pos:start="85:65" pos:end="85:68"><name pos:start="85:65" pos:end="85:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="87:1" pos:end="87:16">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:16">DEBUG_MSD</name></cpp:ifdef>

            <expr_stmt pos:start="89:13" pos:end="92:0"><expr pos:start="89:13" pos:end="89:34"><call pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:26">scsi_req_print</name><argument_list pos:start="89:27" pos:end="89:34">(<argument pos:start="89:28" pos:end="89:33"><expr pos:start="89:28" pos:end="89:33"><name pos:start="89:28" pos:end="89:33"><name pos:start="89:28" pos:end="89:28">s</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:33">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="93:13" pos:end="93:37"><expr pos:start="93:13" pos:end="93:36"><call pos:start="93:13" pos:end="93:36"><name pos:start="93:13" pos:end="93:28">scsi_req_enqueue</name><argument_list pos:start="93:29" pos:end="93:36">(<argument pos:start="93:30" pos:end="93:35"><expr pos:start="93:30" pos:end="93:35"><name pos:start="93:30" pos:end="93:35"><name pos:start="93:30" pos:end="93:30">s</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:35">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="99:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:61">(<expr pos:start="95:17" pos:end="95:60"><name pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:22">req</name></name> <operator pos:start="95:24" pos:end="95:25">&amp;&amp;</operator> <name pos:start="95:27" pos:end="95:42"><name pos:start="95:27" pos:end="95:27">s</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:32">req</name><operator pos:start="95:33" pos:end="95:34">-&gt;</operator><name pos:start="95:35" pos:end="95:37">cmd</name><operator pos:start="95:38" pos:end="95:38">.</operator><name pos:start="95:39" pos:end="95:42">xfer</name></name> <operator pos:start="95:44" pos:end="95:45">!=</operator> <name pos:start="95:47" pos:end="95:60">SCSI_XFER_NONE</name></expr>)</condition> <block pos:start="95:63" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:42">

                <expr_stmt pos:start="97:17" pos:end="97:42"><expr pos:start="97:17" pos:end="97:41"><call pos:start="97:17" pos:end="97:41"><name pos:start="97:17" pos:end="97:33">scsi_req_continue</name><argument_list pos:start="97:34" pos:end="97:41">(<argument pos:start="97:35" pos:end="97:40"><expr pos:start="97:35" pos:end="97:40"><name pos:start="97:35" pos:end="97:40"><name pos:start="97:35" pos:end="97:35">s</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:40">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>



        <case pos:start="105:9" pos:end="105:30">case <expr pos:start="105:14" pos:end="105:29"><name pos:start="105:14" pos:end="105:29">USB_MSDM_DATAOUT</name></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:67"><expr pos:start="107:13" pos:end="107:66"><call pos:start="107:13" pos:end="107:66"><name pos:start="107:13" pos:end="107:19">DPRINTF</name><argument_list pos:start="107:20" pos:end="107:66">(<argument pos:start="107:21" pos:end="107:39"><expr pos:start="107:21" pos:end="107:39"><literal type="string" pos:start="107:21" pos:end="107:39">"Data out %zd/%d\n"</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:52"><expr pos:start="107:42" pos:end="107:52"><name pos:start="107:42" pos:end="107:52"><name pos:start="107:42" pos:end="107:42">p</name><operator pos:start="107:43" pos:end="107:44">-&gt;</operator><name pos:start="107:45" pos:end="107:47">iov</name><operator pos:start="107:48" pos:end="107:48">.</operator><name pos:start="107:49" pos:end="107:52">size</name></name></expr></argument>, <argument pos:start="107:55" pos:end="107:65"><expr pos:start="107:55" pos:end="107:65"><name pos:start="107:55" pos:end="107:65"><name pos:start="107:55" pos:end="107:55">s</name><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:65">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="113:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:42">(<expr pos:start="109:17" pos:end="109:41"><name pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:17">p</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:22">iov</name><operator pos:start="109:23" pos:end="109:23">.</operator><name pos:start="109:24" pos:end="109:27">size</name></name> <operator pos:start="109:29" pos:end="109:29">&gt;</operator> <name pos:start="109:31" pos:end="109:41"><name pos:start="109:31" pos:end="109:31">s</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:41">data_len</name></name></expr>)</condition> <block pos:start="109:44" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:26">

                <goto pos:start="111:17" pos:end="111:26">goto <name pos:start="111:22" pos:end="111:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:28">(<expr pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:27">scsi_len</name></name></expr>)</condition> <block pos:start="117:30" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:40">

                <expr_stmt pos:start="119:17" pos:end="119:40"><expr pos:start="119:17" pos:end="119:39"><call pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:33">usb_msd_copy_data</name><argument_list pos:start="119:34" pos:end="119:39">(<argument pos:start="119:35" pos:end="119:35"><expr pos:start="119:35" pos:end="119:35"><name pos:start="119:35" pos:end="119:35">s</name></expr></argument>, <argument pos:start="119:38" pos:end="119:38"><expr pos:start="119:38" pos:end="119:38"><name pos:start="119:38" pos:end="119:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="123:13" pos:end="141:13"><if pos:start="123:13" pos:end="141:13">if <condition pos:start="123:16" pos:end="123:44">(<expr pos:start="123:17" pos:end="123:43"><call pos:start="123:17" pos:end="123:43"><name pos:start="123:17" pos:end="123:27">le32_to_cpu</name><argument_list pos:start="123:28" pos:end="123:43">(<argument pos:start="123:29" pos:end="123:42"><expr pos:start="123:29" pos:end="123:42"><name pos:start="123:29" pos:end="123:42"><name pos:start="123:29" pos:end="123:29">s</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:34">csw</name><operator pos:start="123:35" pos:end="123:35">.</operator><name pos:start="123:36" pos:end="123:42">residue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:46" pos:end="141:13">{<block_content pos:start="125:17" pos:end="139:17">

                <decl_stmt pos:start="125:17" pos:end="125:57"><decl pos:start="125:17" pos:end="125:56"><type pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">int</name></type> <name pos:start="125:21" pos:end="125:23">len</name> <init pos:start="125:25" pos:end="125:56">= <expr pos:start="125:27" pos:end="125:56"><name pos:start="125:27" pos:end="125:37"><name pos:start="125:27" pos:end="125:27">p</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:32">iov</name><operator pos:start="125:33" pos:end="125:33">.</operator><name pos:start="125:34" pos:end="125:37">size</name></name> <operator pos:start="125:39" pos:end="125:39">-</operator> <name pos:start="125:41" pos:end="125:56"><name pos:start="125:41" pos:end="125:41">p</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:56">actual_length</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="127:17" pos:end="139:17"><if pos:start="127:17" pos:end="139:17">if <condition pos:start="127:20" pos:end="127:24">(<expr pos:start="127:21" pos:end="127:23"><name pos:start="127:21" pos:end="127:23">len</name></expr>)</condition> <block pos:start="127:26" pos:end="139:17">{<block_content pos:start="129:21" pos:end="137:21">

                    <expr_stmt pos:start="129:21" pos:end="129:44"><expr pos:start="129:21" pos:end="129:43"><call pos:start="129:21" pos:end="129:43"><name pos:start="129:21" pos:end="129:35">usb_packet_skip</name><argument_list pos:start="129:36" pos:end="129:43">(<argument pos:start="129:37" pos:end="129:37"><expr pos:start="129:37" pos:end="129:37"><name pos:start="129:37" pos:end="129:37">p</name></expr></argument>, <argument pos:start="129:40" pos:end="129:42"><expr pos:start="129:40" pos:end="129:42"><name pos:start="129:40" pos:end="129:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="131:21" pos:end="131:39"><expr pos:start="131:21" pos:end="131:38"><name pos:start="131:21" pos:end="131:31"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:31">data_len</name></name> <operator pos:start="131:33" pos:end="131:34">-=</operator> <name pos:start="131:36" pos:end="131:38">len</name></expr>;</expr_stmt>

                    <if_stmt pos:start="133:21" pos:end="137:21"><if pos:start="133:21" pos:end="137:21">if <condition pos:start="133:24" pos:end="133:41">(<expr pos:start="133:25" pos:end="133:40"><name pos:start="133:25" pos:end="133:35"><name pos:start="133:25" pos:end="133:25">s</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:35">data_len</name></name> <operator pos:start="133:37" pos:end="133:38">==</operator> <literal type="number" pos:start="133:40" pos:end="133:40">0</literal></expr>)</condition> <block pos:start="133:43" pos:end="137:21">{<block_content pos:start="135:25" pos:end="135:47">

                        <expr_stmt pos:start="135:25" pos:end="135:47"><expr pos:start="135:25" pos:end="135:46"><name pos:start="135:25" pos:end="135:31"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:31">mode</name></name> <operator pos:start="135:33" pos:end="135:33">=</operator> <name pos:start="135:35" pos:end="135:46">USB_MSDM_CSW</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="143:13" pos:end="151:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:47">(<expr pos:start="143:17" pos:end="143:46"><name pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:17">p</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:32">actual_length</name></name> <operator pos:start="143:34" pos:end="143:34">&lt;</operator> <name pos:start="143:36" pos:end="143:46"><name pos:start="143:36" pos:end="143:36">p</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:41">iov</name><operator pos:start="143:42" pos:end="143:42">.</operator><name pos:start="143:43" pos:end="143:46">size</name></name></expr>)</condition> <block pos:start="143:49" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:42">

                <expr_stmt pos:start="145:17" pos:end="145:68"><expr pos:start="145:17" pos:end="145:67"><call pos:start="145:17" pos:end="145:67"><name pos:start="145:17" pos:end="145:23">DPRINTF</name><argument_list pos:start="145:24" pos:end="145:67">(<argument pos:start="145:25" pos:end="145:63"><expr pos:start="145:25" pos:end="145:63"><literal type="string" pos:start="145:25" pos:end="145:63">"Deferring packet %p [wait data-out]\n"</literal></expr></argument>, <argument pos:start="145:66" pos:end="145:66"><expr pos:start="145:66" pos:end="145:66"><name pos:start="145:66" pos:end="145:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:30"><expr pos:start="147:17" pos:end="147:29"><name pos:start="147:17" pos:end="147:25"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:25">packet</name></name> <operator pos:start="147:27" pos:end="147:27">=</operator> <name pos:start="147:29" pos:end="147:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:42"><expr pos:start="149:17" pos:end="149:41"><name pos:start="149:17" pos:end="149:25"><name pos:start="149:17" pos:end="149:17">p</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:25">status</name></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <name pos:start="149:29" pos:end="149:41">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>



        <default pos:start="157:9" pos:end="157:16">default:</default>

            <expr_stmt pos:start="159:13" pos:end="159:65"><expr pos:start="159:13" pos:end="159:64"><call pos:start="159:13" pos:end="159:64"><name pos:start="159:13" pos:end="159:19">DPRINTF</name><argument_list pos:start="159:20" pos:end="159:64">(<argument pos:start="159:21" pos:end="159:50"><expr pos:start="159:21" pos:end="159:50"><literal type="string" pos:start="159:21" pos:end="159:50">"Unexpected write (len %zd)\n"</literal></expr></argument>, <argument pos:start="159:53" pos:end="159:63"><expr pos:start="159:53" pos:end="159:63"><name pos:start="159:53" pos:end="159:63"><name pos:start="159:53" pos:end="159:53">p</name><operator pos:start="159:54" pos:end="159:55">-&gt;</operator><name pos:start="159:56" pos:end="159:58">iov</name><operator pos:start="159:59" pos:end="159:59">.</operator><name pos:start="159:60" pos:end="159:63">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="161:13" pos:end="161:22">goto <name pos:start="161:18" pos:end="161:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="165:9" pos:end="165:14">break;</break>



    <case pos:start="169:5" pos:end="169:22">case <expr pos:start="169:10" pos:end="169:21"><name pos:start="169:10" pos:end="169:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="171:9" pos:end="173:22"><if pos:start="171:9" pos:end="173:22">if <condition pos:start="171:12" pos:end="171:23">(<expr pos:start="171:13" pos:end="171:22"><name pos:start="171:13" pos:end="171:17">devep</name> <operator pos:start="171:19" pos:end="171:20">!=</operator> <literal type="number" pos:start="171:22" pos:end="171:22">1</literal></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:22"><block_content pos:start="173:13" pos:end="173:22">

            <goto pos:start="173:13" pos:end="173:22">goto <name pos:start="173:18" pos:end="173:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <switch pos:start="177:9" pos:end="281:9">switch <condition pos:start="177:16" pos:end="177:24">(<expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:17">s</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:23">mode</name></name></expr>)</condition> <block pos:start="177:26" pos:end="281:9">{<block_content pos:start="179:9" pos:end="279:22">

        <case pos:start="179:9" pos:end="179:30">case <expr pos:start="179:14" pos:end="179:29"><name pos:start="179:14" pos:end="179:29">USB_MSDM_DATAOUT</name></expr>:</case>

            <if_stmt pos:start="181:13" pos:end="185:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:53">(<expr pos:start="181:17" pos:end="181:52"><name pos:start="181:17" pos:end="181:27"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:27">data_len</name></name> <operator pos:start="181:29" pos:end="181:30">!=</operator> <literal type="number" pos:start="181:32" pos:end="181:32">0</literal> <operator pos:start="181:34" pos:end="181:35">||</operator> <name pos:start="181:37" pos:end="181:47"><name pos:start="181:37" pos:end="181:37">p</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:42">iov</name><operator pos:start="181:43" pos:end="181:43">.</operator><name pos:start="181:44" pos:end="181:47">size</name></name> <operator pos:start="181:49" pos:end="181:49">&lt;</operator> <literal type="number" pos:start="181:51" pos:end="181:52">13</literal></expr>)</condition> <block pos:start="181:55" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:26">

                <goto pos:start="183:17" pos:end="183:26">goto <name pos:start="183:22" pos:end="183:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="187:13" pos:end="187:54">/* Waiting for SCSI write to complete.  */</comment>

            <expr_stmt pos:start="189:13" pos:end="189:26"><expr pos:start="189:13" pos:end="189:25"><name pos:start="189:13" pos:end="189:21"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:21">packet</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:25">p</name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:38"><expr pos:start="191:13" pos:end="191:37"><name pos:start="191:13" pos:end="191:21"><name pos:start="191:13" pos:end="191:13">p</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:21">status</name></name> <operator pos:start="191:23" pos:end="191:23">=</operator> <name pos:start="191:25" pos:end="191:37">USB_RET_ASYNC</name></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>



        <case pos:start="197:9" pos:end="197:26">case <expr pos:start="197:14" pos:end="197:25"><name pos:start="197:14" pos:end="197:25">USB_MSDM_CSW</name></expr>:</case>

            <if_stmt pos:start="199:13" pos:end="203:13"><if pos:start="199:13" pos:end="203:13">if <condition pos:start="199:16" pos:end="199:33">(<expr pos:start="199:17" pos:end="199:32"><name pos:start="199:17" pos:end="199:27"><name pos:start="199:17" pos:end="199:17">p</name><operator pos:start="199:18" pos:end="199:19">-&gt;</operator><name pos:start="199:20" pos:end="199:22">iov</name><operator pos:start="199:23" pos:end="199:23">.</operator><name pos:start="199:24" pos:end="199:27">size</name></name> <operator pos:start="199:29" pos:end="199:29">&lt;</operator> <literal type="number" pos:start="199:31" pos:end="199:32">13</literal></expr>)</condition> <block pos:start="199:35" pos:end="203:13">{<block_content pos:start="201:17" pos:end="201:26">

                <goto pos:start="201:17" pos:end="201:26">goto <name pos:start="201:22" pos:end="201:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="207:13" pos:end="223:13"><if pos:start="207:13" pos:end="217:13">if <condition pos:start="207:16" pos:end="207:23">(<expr pos:start="207:17" pos:end="207:22"><name pos:start="207:17" pos:end="207:22"><name pos:start="207:17" pos:end="207:17">s</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:22">req</name></name></expr>)</condition> <block pos:start="207:25" pos:end="217:13">{<block_content pos:start="211:17" pos:end="215:42">

                <comment type="block" pos:start="209:17" pos:end="209:37">/* still in flight */</comment>

                <expr_stmt pos:start="211:17" pos:end="211:66"><expr pos:start="211:17" pos:end="211:65"><call pos:start="211:17" pos:end="211:65"><name pos:start="211:17" pos:end="211:23">DPRINTF</name><argument_list pos:start="211:24" pos:end="211:65">(<argument pos:start="211:25" pos:end="211:61"><expr pos:start="211:25" pos:end="211:61"><literal type="string" pos:start="211:25" pos:end="211:61">"Deferring packet %p [wait status]\n"</literal></expr></argument>, <argument pos:start="211:64" pos:end="211:64"><expr pos:start="211:64" pos:end="211:64"><name pos:start="211:64" pos:end="211:64">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:30"><expr pos:start="213:17" pos:end="213:29"><name pos:start="213:17" pos:end="213:25"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:25">packet</name></name> <operator pos:start="213:27" pos:end="213:27">=</operator> <name pos:start="213:29" pos:end="213:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:42"><expr pos:start="215:17" pos:end="215:41"><name pos:start="215:17" pos:end="215:25"><name pos:start="215:17" pos:end="215:17">p</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:25">status</name></name> <operator pos:start="215:27" pos:end="215:27">=</operator> <name pos:start="215:29" pos:end="215:41">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="217:15" pos:end="223:13">else <block pos:start="217:20" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:39">

                <expr_stmt pos:start="219:17" pos:end="219:42"><expr pos:start="219:17" pos:end="219:41"><call pos:start="219:17" pos:end="219:41"><name pos:start="219:17" pos:end="219:35">usb_msd_send_status</name><argument_list pos:start="219:36" pos:end="219:41">(<argument pos:start="219:37" pos:end="219:37"><expr pos:start="219:37" pos:end="219:37"><name pos:start="219:37" pos:end="219:37">s</name></expr></argument>, <argument pos:start="219:40" pos:end="219:40"><expr pos:start="219:40" pos:end="219:40"><name pos:start="219:40" pos:end="219:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:39"><expr pos:start="221:17" pos:end="221:38"><name pos:start="221:17" pos:end="221:23"><name pos:start="221:17" pos:end="221:17">s</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:23">mode</name></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <name pos:start="221:27" pos:end="221:38">USB_MSDM_CBW</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>



        <case pos:start="229:9" pos:end="229:29">case <expr pos:start="229:14" pos:end="229:28"><name pos:start="229:14" pos:end="229:28">USB_MSDM_DATAIN</name></expr>:</case>

            <expr_stmt pos:start="231:13" pos:end="233:59"><expr pos:start="231:13" pos:end="233:58"><call pos:start="231:13" pos:end="233:58"><name pos:start="231:13" pos:end="231:19">DPRINTF</name><argument_list pos:start="231:20" pos:end="233:58">(<argument pos:start="231:21" pos:end="231:51"><expr pos:start="231:21" pos:end="231:51"><literal type="string" pos:start="231:21" pos:end="231:51">"Data in %zd/%d, scsi_len %d\n"</literal></expr></argument>,

                    <argument pos:start="233:21" pos:end="233:31"><expr pos:start="233:21" pos:end="233:31"><name pos:start="233:21" pos:end="233:31"><name pos:start="233:21" pos:end="233:21">p</name><operator pos:start="233:22" pos:end="233:23">-&gt;</operator><name pos:start="233:24" pos:end="233:26">iov</name><operator pos:start="233:27" pos:end="233:27">.</operator><name pos:start="233:28" pos:end="233:31">size</name></name></expr></argument>, <argument pos:start="233:34" pos:end="233:44"><expr pos:start="233:34" pos:end="233:44"><name pos:start="233:34" pos:end="233:44"><name pos:start="233:34" pos:end="233:34">s</name><operator pos:start="233:35" pos:end="233:36">-&gt;</operator><name pos:start="233:37" pos:end="233:44">data_len</name></name></expr></argument>, <argument pos:start="233:47" pos:end="233:57"><expr pos:start="233:47" pos:end="233:57"><name pos:start="233:47" pos:end="233:57"><name pos:start="233:47" pos:end="233:47">s</name><operator pos:start="233:48" pos:end="233:49">-&gt;</operator><name pos:start="233:50" pos:end="233:57">scsi_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="239:13"><if pos:start="235:13" pos:end="239:13">if <condition pos:start="235:16" pos:end="235:28">(<expr pos:start="235:17" pos:end="235:27"><name pos:start="235:17" pos:end="235:27"><name pos:start="235:17" pos:end="235:17">s</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:27">scsi_len</name></name></expr>)</condition> <block pos:start="235:30" pos:end="239:13">{<block_content pos:start="237:17" pos:end="237:40">

                <expr_stmt pos:start="237:17" pos:end="237:40"><expr pos:start="237:17" pos:end="237:39"><call pos:start="237:17" pos:end="237:39"><name pos:start="237:17" pos:end="237:33">usb_msd_copy_data</name><argument_list pos:start="237:34" pos:end="237:39">(<argument pos:start="237:35" pos:end="237:35"><expr pos:start="237:35" pos:end="237:35"><name pos:start="237:35" pos:end="237:35">s</name></expr></argument>, <argument pos:start="237:38" pos:end="237:38"><expr pos:start="237:38" pos:end="237:38"><name pos:start="237:38" pos:end="237:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="241:13" pos:end="259:13"><if pos:start="241:13" pos:end="259:13">if <condition pos:start="241:16" pos:end="241:44">(<expr pos:start="241:17" pos:end="241:43"><call pos:start="241:17" pos:end="241:43"><name pos:start="241:17" pos:end="241:27">le32_to_cpu</name><argument_list pos:start="241:28" pos:end="241:43">(<argument pos:start="241:29" pos:end="241:42"><expr pos:start="241:29" pos:end="241:42"><name pos:start="241:29" pos:end="241:42"><name pos:start="241:29" pos:end="241:29">s</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:34">csw</name><operator pos:start="241:35" pos:end="241:35">.</operator><name pos:start="241:36" pos:end="241:42">residue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:46" pos:end="259:13">{<block_content pos:start="243:17" pos:end="257:17">

                <decl_stmt pos:start="243:17" pos:end="243:57"><decl pos:start="243:17" pos:end="243:56"><type pos:start="243:17" pos:end="243:19"><name pos:start="243:17" pos:end="243:19">int</name></type> <name pos:start="243:21" pos:end="243:23">len</name> <init pos:start="243:25" pos:end="243:56">= <expr pos:start="243:27" pos:end="243:56"><name pos:start="243:27" pos:end="243:37"><name pos:start="243:27" pos:end="243:27">p</name><operator pos:start="243:28" pos:end="243:29">-&gt;</operator><name pos:start="243:30" pos:end="243:32">iov</name><operator pos:start="243:33" pos:end="243:33">.</operator><name pos:start="243:34" pos:end="243:37">size</name></name> <operator pos:start="243:39" pos:end="243:39">-</operator> <name pos:start="243:41" pos:end="243:56"><name pos:start="243:41" pos:end="243:41">p</name><operator pos:start="243:42" pos:end="243:43">-&gt;</operator><name pos:start="243:44" pos:end="243:56">actual_length</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="245:17" pos:end="257:17"><if pos:start="245:17" pos:end="257:17">if <condition pos:start="245:20" pos:end="245:24">(<expr pos:start="245:21" pos:end="245:23"><name pos:start="245:21" pos:end="245:23">len</name></expr>)</condition> <block pos:start="245:26" pos:end="257:17">{<block_content pos:start="247:21" pos:end="255:21">

                    <expr_stmt pos:start="247:21" pos:end="247:44"><expr pos:start="247:21" pos:end="247:43"><call pos:start="247:21" pos:end="247:43"><name pos:start="247:21" pos:end="247:35">usb_packet_skip</name><argument_list pos:start="247:36" pos:end="247:43">(<argument pos:start="247:37" pos:end="247:37"><expr pos:start="247:37" pos:end="247:37"><name pos:start="247:37" pos:end="247:37">p</name></expr></argument>, <argument pos:start="247:40" pos:end="247:42"><expr pos:start="247:40" pos:end="247:42"><name pos:start="247:40" pos:end="247:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="249:21" pos:end="249:39"><expr pos:start="249:21" pos:end="249:38"><name pos:start="249:21" pos:end="249:31"><name pos:start="249:21" pos:end="249:21">s</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:31">data_len</name></name> <operator pos:start="249:33" pos:end="249:34">-=</operator> <name pos:start="249:36" pos:end="249:38">len</name></expr>;</expr_stmt>

                    <if_stmt pos:start="251:21" pos:end="255:21"><if pos:start="251:21" pos:end="255:21">if <condition pos:start="251:24" pos:end="251:41">(<expr pos:start="251:25" pos:end="251:40"><name pos:start="251:25" pos:end="251:35"><name pos:start="251:25" pos:end="251:25">s</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:35">data_len</name></name> <operator pos:start="251:37" pos:end="251:38">==</operator> <literal type="number" pos:start="251:40" pos:end="251:40">0</literal></expr>)</condition> <block pos:start="251:43" pos:end="255:21">{<block_content pos:start="253:25" pos:end="253:47">

                        <expr_stmt pos:start="253:25" pos:end="253:47"><expr pos:start="253:25" pos:end="253:46"><name pos:start="253:25" pos:end="253:31"><name pos:start="253:25" pos:end="253:25">s</name><operator pos:start="253:26" pos:end="253:27">-&gt;</operator><name pos:start="253:28" pos:end="253:31">mode</name></name> <operator pos:start="253:33" pos:end="253:33">=</operator> <name pos:start="253:35" pos:end="253:46">USB_MSDM_CSW</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="261:13" pos:end="269:13"><if pos:start="261:13" pos:end="269:13">if <condition pos:start="261:16" pos:end="261:47">(<expr pos:start="261:17" pos:end="261:46"><name pos:start="261:17" pos:end="261:32"><name pos:start="261:17" pos:end="261:17">p</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:32">actual_length</name></name> <operator pos:start="261:34" pos:end="261:34">&lt;</operator> <name pos:start="261:36" pos:end="261:46"><name pos:start="261:36" pos:end="261:36">p</name><operator pos:start="261:37" pos:end="261:38">-&gt;</operator><name pos:start="261:39" pos:end="261:41">iov</name><operator pos:start="261:42" pos:end="261:42">.</operator><name pos:start="261:43" pos:end="261:46">size</name></name></expr>)</condition> <block pos:start="261:49" pos:end="269:13">{<block_content pos:start="263:17" pos:end="267:42">

                <expr_stmt pos:start="263:17" pos:end="263:67"><expr pos:start="263:17" pos:end="263:66"><call pos:start="263:17" pos:end="263:66"><name pos:start="263:17" pos:end="263:23">DPRINTF</name><argument_list pos:start="263:24" pos:end="263:66">(<argument pos:start="263:25" pos:end="263:62"><expr pos:start="263:25" pos:end="263:62"><literal type="string" pos:start="263:25" pos:end="263:62">"Deferring packet %p [wait data-in]\n"</literal></expr></argument>, <argument pos:start="263:65" pos:end="263:65"><expr pos:start="263:65" pos:end="263:65"><name pos:start="263:65" pos:end="263:65">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:30"><expr pos:start="265:17" pos:end="265:29"><name pos:start="265:17" pos:end="265:25"><name pos:start="265:17" pos:end="265:17">s</name><operator pos:start="265:18" pos:end="265:19">-&gt;</operator><name pos:start="265:20" pos:end="265:25">packet</name></name> <operator pos:start="265:27" pos:end="265:27">=</operator> <name pos:start="265:29" pos:end="265:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:42"><expr pos:start="267:17" pos:end="267:41"><name pos:start="267:17" pos:end="267:25"><name pos:start="267:17" pos:end="267:17">p</name><operator pos:start="267:18" pos:end="267:19">-&gt;</operator><name pos:start="267:20" pos:end="267:25">status</name></name> <operator pos:start="267:27" pos:end="267:27">=</operator> <name pos:start="267:29" pos:end="267:41">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>



        <default pos:start="275:9" pos:end="275:16">default:</default>

            <expr_stmt pos:start="277:13" pos:end="277:64"><expr pos:start="277:13" pos:end="277:63"><call pos:start="277:13" pos:end="277:63"><name pos:start="277:13" pos:end="277:19">DPRINTF</name><argument_list pos:start="277:20" pos:end="277:63">(<argument pos:start="277:21" pos:end="277:49"><expr pos:start="277:21" pos:end="277:49"><literal type="string" pos:start="277:21" pos:end="277:49">"Unexpected read (len %zd)\n"</literal></expr></argument>, <argument pos:start="277:52" pos:end="277:62"><expr pos:start="277:52" pos:end="277:62"><name pos:start="277:52" pos:end="277:62"><name pos:start="277:52" pos:end="277:52">p</name><operator pos:start="277:53" pos:end="277:54">-&gt;</operator><name pos:start="277:55" pos:end="277:57">iov</name><operator pos:start="277:58" pos:end="277:58">.</operator><name pos:start="277:59" pos:end="277:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="279:13" pos:end="279:22">goto <name pos:start="279:18" pos:end="279:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="283:9" pos:end="283:14">break;</break>



    <default pos:start="287:5" pos:end="287:12">default:</default>

        <expr_stmt pos:start="289:9" pos:end="289:31"><expr pos:start="289:9" pos:end="289:30"><call pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:15">DPRINTF</name><argument_list pos:start="289:16" pos:end="289:30">(<argument pos:start="289:17" pos:end="289:29"><expr pos:start="289:17" pos:end="289:29"><literal type="string" pos:start="289:17" pos:end="289:29">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="291:5" pos:end="291:9"><name pos:start="291:5" pos:end="291:8">fail</name>:</label>

        <expr_stmt pos:start="293:9" pos:end="293:34"><expr pos:start="293:9" pos:end="293:33"><name pos:start="293:9" pos:end="293:17"><name pos:start="293:9" pos:end="293:9">p</name><operator pos:start="293:10" pos:end="293:11">-&gt;</operator><name pos:start="293:12" pos:end="293:17">status</name></name> <operator pos:start="293:19" pos:end="293:19">=</operator> <name pos:start="293:21" pos:end="293:33">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
