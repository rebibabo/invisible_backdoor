<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5662.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">vfio_enable_intx_kvm</name><parameter_list pos:start="1:33" pos:end="1:50">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:43">VFIODevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">vdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="154:0">

<cpp:ifdef pos:start="5:1" pos:end="5:17">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:17">CONFIG_KVM</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="15:6"><decl pos:start="7:5" pos:end="15:5"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">kvm_irqfd</name></name></type> <name pos:start="7:22" pos:end="7:26">irqfd</name> <init pos:start="7:28" pos:end="15:5">= <expr pos:start="7:30" pos:end="15:5"><block pos:start="7:30" pos:end="15:5">{

        <expr pos:start="9:9" pos:end="9:58"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:11">fd</name> <operator pos:start="9:13" pos:end="9:13">=</operator> <call pos:start="9:15" pos:end="9:58"><name pos:start="9:15" pos:end="9:35">event_notifier_get_fd</name><argument_list pos:start="9:36" pos:end="9:58">(<argument pos:start="9:37" pos:end="9:57"><expr pos:start="9:37" pos:end="9:57"><operator pos:start="9:37" pos:end="9:37">&amp;</operator><name pos:start="9:38" pos:end="9:57"><name pos:start="9:38" pos:end="9:41">vdev</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:47">intx</name><operator pos:start="9:48" pos:end="9:48">.</operator><name pos:start="9:49" pos:end="9:57">interrupt</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="11:9" pos:end="11:35"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:12">gsi</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:35"><name pos:start="11:16" pos:end="11:19">vdev</name><operator pos:start="11:20" pos:end="11:21">-&gt;</operator><name pos:start="11:22" pos:end="11:25">intx</name><operator pos:start="11:26" pos:end="11:26">.</operator><name pos:start="11:27" pos:end="11:31">route</name><operator pos:start="11:32" pos:end="11:32">.</operator><name pos:start="11:33" pos:end="11:35">irq</name></name></expr>,

        <expr pos:start="13:9" pos:end="13:40"><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:14">flags</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:40">KVM_IRQFD_FLAG_RESAMPLE</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:23">vfio_irq_set</name></name> <modifier pos:start="17:25" pos:end="17:25">*</modifier></type><name pos:start="17:26" pos:end="17:32">irq_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:18"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:18">argsz</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">int32_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">pfd</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="29:64">(<expr pos:start="25:9" pos:end="29:63"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:29"><name pos:start="25:10" pos:end="25:27">kvm_irqfds_enabled</name><argument_list pos:start="25:28" pos:end="25:29">()</argument_list></call> <operator pos:start="25:31" pos:end="25:32">||</operator>

        <name pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:12">vdev</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:18">intx</name><operator pos:start="27:19" pos:end="27:19">.</operator><name pos:start="27:20" pos:end="27:24">route</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:29">mode</name></name> <operator pos:start="27:31" pos:end="27:32">!=</operator> <name pos:start="27:34" pos:end="27:49">PCI_INTX_ENABLED</name> <operator pos:start="27:51" pos:end="27:52">||</operator>

        <operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:63"><name pos:start="29:10" pos:end="29:28">kvm_check_extension</name><argument_list pos:start="29:29" pos:end="29:63">(<argument pos:start="29:30" pos:end="29:38"><expr pos:start="29:30" pos:end="29:38"><name pos:start="29:30" pos:end="29:38">kvm_state</name></expr></argument>, <argument pos:start="29:41" pos:end="29:62"><expr pos:start="29:41" pos:end="29:62"><name pos:start="29:41" pos:end="29:62">KVM_CAP_IRQFD_RESAMPLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:66" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:40">/* Get to a known interrupt state */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:52"><expr pos:start="39:5" pos:end="39:51"><call pos:start="39:5" pos:end="39:51"><name pos:start="39:5" pos:end="39:23">qemu_set_fd_handler</name><argument_list pos:start="39:24" pos:end="39:51">(<argument pos:start="39:25" pos:end="39:32"><expr pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:29">irqfd</name><operator pos:start="39:30" pos:end="39:30">.</operator><name pos:start="39:31" pos:end="39:32">fd</name></name></expr></argument>, <argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">NULL</name></expr></argument>, <argument pos:start="39:41" pos:end="39:44"><expr pos:start="39:41" pos:end="39:44"><name pos:start="39:41" pos:end="39:44">NULL</name></expr></argument>, <argument pos:start="39:47" pos:end="39:50"><expr pos:start="39:47" pos:end="39:50"><name pos:start="39:47" pos:end="39:50">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><call pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:18">vfio_mask_intx</name><argument_list pos:start="41:19" pos:end="41:24">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:8">vdev</name><operator pos:start="43:9" pos:end="43:10">-&gt;</operator><name pos:start="43:11" pos:end="43:14">intx</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:22">pending</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:30">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:52"><expr pos:start="45:5" pos:end="45:51"><call pos:start="45:5" pos:end="45:51"><name pos:start="45:5" pos:end="45:16">qemu_set_irq</name><argument_list pos:start="45:17" pos:end="45:51">(<argument pos:start="45:18" pos:end="45:47"><expr pos:start="45:18" pos:end="45:47"><name pos:start="45:18" pos:end="45:47"><name pos:start="45:18" pos:end="45:21">vdev</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:27">pdev</name><operator pos:start="45:28" pos:end="45:28">.</operator><name pos:start="45:29" pos:end="45:31">irq</name><index pos:start="45:32" pos:end="45:47">[<expr pos:start="45:33" pos:end="45:46"><name pos:start="45:33" pos:end="45:46"><name pos:start="45:33" pos:end="45:36">vdev</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:42">intx</name><operator pos:start="45:43" pos:end="45:43">.</operator><name pos:start="45:44" pos:end="45:46">pin</name></name></expr>]</index></name></expr></argument>, <argument pos:start="45:50" pos:end="45:50"><expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:44">/* Get an eventfd for resample/unmask */</comment>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:51">(<expr pos:start="51:9" pos:end="51:50"><call pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:27">event_notifier_init</name><argument_list pos:start="51:28" pos:end="51:50">(<argument pos:start="51:29" pos:end="51:46"><expr pos:start="51:29" pos:end="51:46"><operator pos:start="51:29" pos:end="51:29">&amp;</operator><name pos:start="51:30" pos:end="51:46"><name pos:start="51:30" pos:end="51:33">vdev</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:39">intx</name><operator pos:start="51:40" pos:end="51:40">.</operator><name pos:start="51:41" pos:end="51:46">unmask</name></name></expr></argument>, <argument pos:start="51:49" pos:end="51:49"><expr pos:start="51:49" pos:end="51:49"><literal type="number" pos:start="51:49" pos:end="51:49">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:53" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:68"><expr pos:start="53:9" pos:end="53:67"><call pos:start="53:9" pos:end="53:67"><name pos:start="53:9" pos:end="53:20">error_report</name><argument_list pos:start="53:21" pos:end="53:67">(<argument pos:start="53:22" pos:end="53:66"><expr pos:start="53:22" pos:end="53:66"><literal type="string" pos:start="53:22" pos:end="53:66">"vfio: Error: event_notifier_init failed eoi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:46">/* KVM triggers it, VFIO listens for it */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:65"><expr pos:start="63:5" pos:end="63:64"><name pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:9">irqfd</name><operator pos:start="63:10" pos:end="63:10">.</operator><name pos:start="63:11" pos:end="63:20">resamplefd</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <call pos:start="63:24" pos:end="63:64"><name pos:start="63:24" pos:end="63:44">event_notifier_get_fd</name><argument_list pos:start="63:45" pos:end="63:64">(<argument pos:start="63:46" pos:end="63:63"><expr pos:start="63:46" pos:end="63:63"><operator pos:start="63:46" pos:end="63:46">&amp;</operator><name pos:start="63:47" pos:end="63:63"><name pos:start="63:47" pos:end="63:50">vdev</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:56">intx</name><operator pos:start="63:57" pos:end="63:57">.</operator><name pos:start="63:58" pos:end="63:63">unmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:51">(<expr pos:start="67:9" pos:end="67:50"><call pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:20">kvm_vm_ioctl</name><argument_list pos:start="67:21" pos:end="67:50">(<argument pos:start="67:22" pos:end="67:30"><expr pos:start="67:22" pos:end="67:30"><name pos:start="67:22" pos:end="67:30">kvm_state</name></expr></argument>, <argument pos:start="67:33" pos:end="67:41"><expr pos:start="67:33" pos:end="67:41"><name pos:start="67:33" pos:end="67:41">KVM_IRQFD</name></expr></argument>, <argument pos:start="67:44" pos:end="67:49"><expr pos:start="67:44" pos:end="67:49"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:49">irqfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:53" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:24">

        <expr_stmt pos:start="69:9" pos:end="69:72"><expr pos:start="69:9" pos:end="69:71"><call pos:start="69:9" pos:end="69:71"><name pos:start="69:9" pos:end="69:20">error_report</name><argument_list pos:start="69:21" pos:end="69:71">(<argument pos:start="69:22" pos:end="69:70"><expr pos:start="69:22" pos:end="69:70"><literal type="string" pos:start="69:22" pos:end="69:70">"vfio: Error: Failed to setup resample irqfd: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:24">goto <name pos:start="71:14" pos:end="71:23">fail_irqfd</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:44"><expr pos:start="77:5" pos:end="77:43"><name pos:start="77:5" pos:end="77:9">argsz</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <sizeof pos:start="77:13" pos:end="77:28">sizeof<argument_list pos:start="77:19" pos:end="77:28">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><operator pos:start="77:20" pos:end="77:20">*</operator><name pos:start="77:21" pos:end="77:27">irq_set</name></expr></argument>)</argument_list></sizeof> <operator pos:start="77:30" pos:end="77:30">+</operator> <sizeof pos:start="77:32" pos:end="77:43">sizeof<argument_list pos:start="77:38" pos:end="77:43">(<argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><operator pos:start="77:39" pos:end="77:39">*</operator><name pos:start="77:40" pos:end="77:42">pfd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:11">irq_set</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:30"><name pos:start="81:15" pos:end="81:23">g_malloc0</name><argument_list pos:start="81:24" pos:end="81:30">(<argument pos:start="81:25" pos:end="81:29"><expr pos:start="81:25" pos:end="81:29"><name pos:start="81:25" pos:end="81:29">argsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:18"><name pos:start="83:5" pos:end="83:11">irq_set</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:18">argsz</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:26">argsz</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:76"><expr pos:start="85:5" pos:end="85:75"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:11">irq_set</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:18">flags</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:46">VFIO_IRQ_SET_DATA_EVENTFD</name> <operator pos:start="85:48" pos:end="85:48">|</operator> <name pos:start="85:50" pos:end="85:75">VFIO_IRQ_SET_ACTION_UNMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:11">irq_set</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:18">index</name></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <name pos:start="87:22" pos:end="87:44">VFIO_PCI_INTX_IRQ_INDEX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:23"><expr pos:start="89:5" pos:end="89:22"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:11">irq_set</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:18">start</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:23"><expr pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:11">irq_set</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:18">count</name></name> <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:36"><expr pos:start="93:5" pos:end="93:35"><name pos:start="93:5" pos:end="93:7">pfd</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <operator pos:start="93:11" pos:end="93:11">(</operator><name pos:start="93:12" pos:end="93:18">int32_t</name> <operator pos:start="93:20" pos:end="93:20">*</operator><operator pos:start="93:21" pos:end="93:21">)</operator><operator pos:start="93:22" pos:end="93:22">&amp;</operator><name pos:start="93:23" pos:end="93:35"><name pos:start="93:23" pos:end="93:29">irq_set</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:35">data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:8">pfd</name> <operator pos:start="97:10" pos:end="97:10">=</operator> <name pos:start="97:12" pos:end="97:27"><name pos:start="97:12" pos:end="97:16">irqfd</name><operator pos:start="97:17" pos:end="97:17">.</operator><name pos:start="97:18" pos:end="97:27">resamplefd</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:57"><expr pos:start="101:5" pos:end="101:56"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:56"><name pos:start="101:11" pos:end="101:15">ioctl</name><argument_list pos:start="101:16" pos:end="101:56">(<argument pos:start="101:17" pos:end="101:24"><expr pos:start="101:17" pos:end="101:24"><name pos:start="101:17" pos:end="101:24"><name pos:start="101:17" pos:end="101:20">vdev</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:24">fd</name></name></expr></argument>, <argument pos:start="101:27" pos:end="101:46"><expr pos:start="101:27" pos:end="101:46"><name pos:start="101:27" pos:end="101:46">VFIO_DEVICE_SET_IRQS</name></expr></argument>, <argument pos:start="101:49" pos:end="101:55"><expr pos:start="101:49" pos:end="101:55"><name pos:start="101:49" pos:end="101:55">irq_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:20"><expr pos:start="103:5" pos:end="103:19"><call pos:start="103:5" pos:end="103:19"><name pos:start="103:5" pos:end="103:10">g_free</name><argument_list pos:start="103:11" pos:end="103:19">(<argument pos:start="103:12" pos:end="103:18"><expr pos:start="103:12" pos:end="103:18"><name pos:start="103:12" pos:end="103:18">irq_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:12">(<expr pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">ret</name></expr>)</condition> <block pos:start="105:14" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:23">

        <expr_stmt pos:start="107:9" pos:end="107:72"><expr pos:start="107:9" pos:end="107:71"><call pos:start="107:9" pos:end="107:71"><name pos:start="107:9" pos:end="107:20">error_report</name><argument_list pos:start="107:21" pos:end="107:71">(<argument pos:start="107:22" pos:end="107:70"><expr pos:start="107:22" pos:end="107:70"><literal type="string" pos:start="107:22" pos:end="107:70">"vfio: Error: Failed to setup INTx unmask fd: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:23">goto <name pos:start="109:14" pos:end="109:22">fail_vfio</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:20">/* Let'em rip */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:27"><expr pos:start="117:5" pos:end="117:26"><call pos:start="117:5" pos:end="117:26"><name pos:start="117:5" pos:end="117:20">vfio_unmask_intx</name><argument_list pos:start="117:21" pos:end="117:26">(<argument pos:start="117:22" pos:end="117:25"><expr pos:start="117:22" pos:end="117:25"><name pos:start="117:22" pos:end="117:25">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:32"><expr pos:start="121:5" pos:end="121:31"><name pos:start="121:5" pos:end="121:24"><name pos:start="121:5" pos:end="121:8">vdev</name><operator pos:start="121:9" pos:end="121:10">-&gt;</operator><name pos:start="121:11" pos:end="121:14">intx</name><operator pos:start="121:15" pos:end="121:15">.</operator><name pos:start="121:16" pos:end="121:24">kvm_accel</name></name> <operator pos:start="121:26" pos:end="121:26">=</operator> <name pos:start="121:28" pos:end="121:31">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="129:50"><expr pos:start="125:5" pos:end="129:49"><call pos:start="125:5" pos:end="129:49"><name pos:start="125:5" pos:end="125:11">DPRINTF</name><argument_list pos:start="125:12" pos:end="129:49">(<argument pos:start="125:13" pos:end="125:60"><expr pos:start="125:13" pos:end="125:60"><literal type="string" pos:start="125:13" pos:end="125:60">"%s(%04x:%02x:%02x.%x) KVM INTx accel enabled\n"</literal></expr></argument>,

            <argument pos:start="127:13" pos:end="127:20"><expr pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:20">__func__</name></expr></argument>, <argument pos:start="127:23" pos:end="127:39"><expr pos:start="127:23" pos:end="127:39"><name pos:start="127:23" pos:end="127:39"><name pos:start="127:23" pos:end="127:26">vdev</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:32">host</name><operator pos:start="127:33" pos:end="127:33">.</operator><name pos:start="127:34" pos:end="127:39">domain</name></name></expr></argument>, <argument pos:start="127:42" pos:end="127:55"><expr pos:start="127:42" pos:end="127:55"><name pos:start="127:42" pos:end="127:55"><name pos:start="127:42" pos:end="127:45">vdev</name><operator pos:start="127:46" pos:end="127:47">-&gt;</operator><name pos:start="127:48" pos:end="127:51">host</name><operator pos:start="127:52" pos:end="127:52">.</operator><name pos:start="127:53" pos:end="127:55">bus</name></name></expr></argument>,

            <argument pos:start="129:13" pos:end="129:27"><expr pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:16">vdev</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:22">host</name><operator pos:start="129:23" pos:end="129:23">.</operator><name pos:start="129:24" pos:end="129:27">slot</name></name></expr></argument>, <argument pos:start="129:30" pos:end="129:48"><expr pos:start="129:30" pos:end="129:48"><name pos:start="129:30" pos:end="129:48"><name pos:start="129:30" pos:end="129:33">vdev</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:39">host</name><operator pos:start="129:40" pos:end="129:40">.</operator><name pos:start="129:41" pos:end="129:48">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="133:5" pos:end="133:11">return;</return>



<label pos:start="137:1" pos:end="137:10"><name pos:start="137:1" pos:end="137:9">fail_vfio</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:42"><expr pos:start="139:5" pos:end="139:41"><name pos:start="139:5" pos:end="139:15"><name pos:start="139:5" pos:end="139:9">irqfd</name><operator pos:start="139:10" pos:end="139:10">.</operator><name pos:start="139:11" pos:end="139:15">flags</name></name> <operator pos:start="139:17" pos:end="139:17">=</operator> <name pos:start="139:19" pos:end="139:41">KVM_IRQFD_FLAG_DEASSIGN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:47"><expr pos:start="141:5" pos:end="141:46"><call pos:start="141:5" pos:end="141:46"><name pos:start="141:5" pos:end="141:16">kvm_vm_ioctl</name><argument_list pos:start="141:17" pos:end="141:46">(<argument pos:start="141:18" pos:end="141:26"><expr pos:start="141:18" pos:end="141:26"><name pos:start="141:18" pos:end="141:26">kvm_state</name></expr></argument>, <argument pos:start="141:29" pos:end="141:37"><expr pos:start="141:29" pos:end="141:37"><name pos:start="141:29" pos:end="141:37">KVM_IRQFD</name></expr></argument>, <argument pos:start="141:40" pos:end="141:45"><expr pos:start="141:40" pos:end="141:45"><operator pos:start="141:40" pos:end="141:40">&amp;</operator><name pos:start="141:41" pos:end="141:45">irqfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="143:1" pos:end="143:11"><name pos:start="143:1" pos:end="143:10">fail_irqfd</name>:</label>

    <expr_stmt pos:start="145:5" pos:end="145:47"><expr pos:start="145:5" pos:end="145:46"><call pos:start="145:5" pos:end="145:46"><name pos:start="145:5" pos:end="145:26">event_notifier_cleanup</name><argument_list pos:start="145:27" pos:end="145:46">(<argument pos:start="145:28" pos:end="145:45"><expr pos:start="145:28" pos:end="145:45"><operator pos:start="145:28" pos:end="145:28">&amp;</operator><name pos:start="145:29" pos:end="145:45"><name pos:start="145:29" pos:end="145:32">vdev</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:38">intx</name><operator pos:start="145:39" pos:end="145:39">.</operator><name pos:start="145:40" pos:end="145:45">unmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="147:1" pos:end="147:5"><name pos:start="147:1" pos:end="147:4">fail</name>:</label>

    <expr_stmt pos:start="149:5" pos:end="149:67"><expr pos:start="149:5" pos:end="149:66"><call pos:start="149:5" pos:end="149:66"><name pos:start="149:5" pos:end="149:23">qemu_set_fd_handler</name><argument_list pos:start="149:24" pos:end="149:66">(<argument pos:start="149:25" pos:end="149:32"><expr pos:start="149:25" pos:end="149:32"><name pos:start="149:25" pos:end="149:32"><name pos:start="149:25" pos:end="149:29">irqfd</name><operator pos:start="149:30" pos:end="149:30">.</operator><name pos:start="149:31" pos:end="149:32">fd</name></name></expr></argument>, <argument pos:start="149:35" pos:end="149:53"><expr pos:start="149:35" pos:end="149:53"><name pos:start="149:35" pos:end="149:53">vfio_intx_interrupt</name></expr></argument>, <argument pos:start="149:56" pos:end="149:59"><expr pos:start="149:56" pos:end="149:59"><name pos:start="149:56" pos:end="149:59">NULL</name></expr></argument>, <argument pos:start="149:62" pos:end="149:65"><expr pos:start="149:62" pos:end="149:65"><name pos:start="149:62" pos:end="149:65">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="154:0"><expr pos:start="151:5" pos:end="151:26"><call pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:20">vfio_unmask_intx</name><argument_list pos:start="151:21" pos:end="151:26">(<argument pos:start="151:22" pos:end="151:25"><expr pos:start="151:22" pos:end="151:25"><name pos:start="151:22" pos:end="151:25">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
