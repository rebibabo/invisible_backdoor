<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20679.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">parse_read_intervals</name><parameter_list pos:start="1:32" pos:end="1:59">(<parameter pos:start="1:33" pos:end="1:58"><decl pos:start="1:33" pos:end="1:58"><type pos:start="1:33" pos:end="1:44"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:58">intervals_spec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:15">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">n</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:17">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name></decl>, <decl pos:start="7:14" pos:end="7:46"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">spec</name> <init pos:start="7:20" pos:end="7:46">= <expr pos:start="7:22" pos:end="7:46"><call pos:start="7:22" pos:end="7:46"><name pos:start="7:22" pos:end="7:30">av_strdup</name><argument_list pos:start="7:31" pos:end="7:46">(<argument pos:start="7:32" pos:end="7:45"><expr pos:start="7:32" pos:end="7:45"><name pos:start="7:32" pos:end="7:45">intervals_spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="11:31"><if pos:start="9:5" pos:end="11:31">if <condition pos:start="9:8" pos:end="9:14">(<expr pos:start="9:9" pos:end="9:13"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:13">spec</name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:31"><block_content pos:start="11:9" pos:end="11:31">

        <return pos:start="11:9" pos:end="11:31">return <expr pos:start="11:16" pos:end="11:30"><call pos:start="11:16" pos:end="11:30"><name pos:start="11:16" pos:end="11:22">AVERROR</name><argument_list pos:start="11:23" pos:end="11:30">(<argument pos:start="11:24" pos:end="11:29"><expr pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:57">/* preparse specification, get number of intervals */</comment>

    <for pos:start="17:5" pos:end="21:16">for <control pos:start="17:9" pos:end="17:34">(<init pos:start="17:10" pos:end="17:25"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">n</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr><operator pos:start="17:15" pos:end="17:15">,</operator> <expr pos:start="17:17" pos:end="17:24"><name pos:start="17:17" pos:end="17:17">p</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:24">spec</name></expr>;</init> <condition pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:28"><operator pos:start="17:27" pos:end="17:27">*</operator><name pos:start="17:28" pos:end="17:28">p</name></expr>;</condition> <incr pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:31">p</name><operator pos:start="17:32" pos:end="17:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="19:9" pos:end="21:16"><block_content pos:start="19:9" pos:end="21:16">

        <if_stmt pos:start="19:9" pos:end="21:16"><if pos:start="19:9" pos:end="21:16">if <condition pos:start="19:12" pos:end="19:22">(<expr pos:start="19:13" pos:end="19:21"><operator pos:start="19:13" pos:end="19:13">*</operator><name pos:start="19:14" pos:end="19:14">p</name> <operator pos:start="19:16" pos:end="19:17">==</operator> <literal type="char" pos:start="19:19" pos:end="19:21">','</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:16"><block_content pos:start="21:13" pos:end="21:16">

            <expr_stmt pos:start="21:13" pos:end="21:16"><expr pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:13">n</name><operator pos:start="21:14" pos:end="21:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt pos:start="23:5" pos:end="23:8"><expr pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:5">n</name><operator pos:start="23:6" pos:end="23:7">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:18">read_intervals</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <call pos:start="27:22" pos:end="27:59"><name pos:start="27:22" pos:end="27:30">av_malloc</name><argument_list pos:start="27:31" pos:end="27:59">(<argument pos:start="27:32" pos:end="27:58"><expr pos:start="27:32" pos:end="27:58"><name pos:start="27:32" pos:end="27:32">n</name> <operator pos:start="27:34" pos:end="27:34">*</operator> <sizeof pos:start="27:36" pos:end="27:58">sizeof<argument_list pos:start="27:42" pos:end="27:58">(<argument pos:start="27:43" pos:end="27:57"><expr pos:start="27:43" pos:end="27:57"><operator pos:start="27:43" pos:end="27:43">*</operator><name pos:start="27:44" pos:end="27:57">read_intervals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:24">(<expr pos:start="29:9" pos:end="29:23"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:23">read_intervals</name></expr>)</condition> <block pos:start="29:26" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:17">

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:29"><name pos:start="31:15" pos:end="31:21">AVERROR</name><argument_list pos:start="31:22" pos:end="31:29">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><name pos:start="31:23" pos:end="31:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:17">goto <name pos:start="33:14" pos:end="33:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:21">read_intervals_nb</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:25">n</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:25">/* parse intervals */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:13"><expr pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:5">p</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <name pos:start="43:9" pos:end="43:12">spec</name></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="77:5">for <control pos:start="45:9" pos:end="45:27">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:21">n</name></expr>;</condition> <incr pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:24">i</name><operator pos:start="45:25" pos:end="45:26">++</operator></expr></incr>)</control> <block pos:start="45:29" pos:end="77:5">{<block_content pos:start="47:9" pos:end="75:43">

        <decl_stmt pos:start="47:9" pos:end="47:36"><decl pos:start="47:9" pos:end="47:35"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:12">char</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:18">next</name> <init pos:start="47:20" pos:end="47:35">= <expr pos:start="47:22" pos:end="47:35"><call pos:start="47:22" pos:end="47:35"><name pos:start="47:22" pos:end="47:27">strchr</name><argument_list pos:start="47:28" pos:end="47:35">(<argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><name pos:start="47:29" pos:end="47:29">p</name></expr></argument>, <argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><literal type="char" pos:start="47:32" pos:end="47:34">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="51:24"><if pos:start="49:9" pos:end="51:24">if <condition pos:start="49:12" pos:end="49:17">(<expr pos:start="49:13" pos:end="49:16"><name pos:start="49:13" pos:end="49:16">next</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:24"><block_content pos:start="51:13" pos:end="51:24">

            <expr_stmt pos:start="51:13" pos:end="51:24"><expr pos:start="51:13" pos:end="51:23"><operator pos:start="51:13" pos:end="51:13">*</operator><name pos:start="51:14" pos:end="51:17">next</name><operator pos:start="51:18" pos:end="51:19">++</operator> <operator pos:start="51:21" pos:end="51:21">=</operator> <literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:22">read_intervals</name><index pos:start="55:23" pos:end="55:25">[<expr pos:start="55:24" pos:end="55:24"><name pos:start="55:24" pos:end="55:24">i</name></expr>]</index></name><operator pos:start="55:26" pos:end="55:26">.</operator><name pos:start="55:27" pos:end="55:28">id</name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:32">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:57"><expr pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:56"><name pos:start="57:15" pos:end="57:33">parse_read_interval</name><argument_list pos:start="57:34" pos:end="57:56">(<argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><name pos:start="57:35" pos:end="57:35">p</name></expr></argument>, <argument pos:start="57:38" pos:end="57:55"><expr pos:start="57:38" pos:end="57:55"><operator pos:start="57:38" pos:end="57:38">&amp;</operator><name pos:start="57:39" pos:end="57:55"><name pos:start="57:39" pos:end="57:52">read_intervals</name><index pos:start="57:53" pos:end="57:55">[<expr pos:start="57:54" pos:end="57:54"><name pos:start="57:54" pos:end="57:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:20">(<expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>)</condition> <block pos:start="59:22" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:21">

            <expr_stmt pos:start="61:13" pos:end="63:25"><expr pos:start="61:13" pos:end="63:24"><call pos:start="61:13" pos:end="63:24"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="63:24">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">NULL</name></expr></argument>, <argument pos:start="61:26" pos:end="61:37"><expr pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:40" pos:end="61:79"><expr pos:start="61:40" pos:end="61:79"><literal type="string" pos:start="61:40" pos:end="61:79">"Error parsing read interval #%d '%s'\n"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">i</name></expr></argument>, <argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:21">goto <name pos:start="65:18" pos:end="65:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><call pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:60">(<argument pos:start="69:16" pos:end="69:19"><expr pos:start="69:16" pos:end="69:19"><name pos:start="69:16" pos:end="69:19">NULL</name></expr></argument>, <argument pos:start="69:22" pos:end="69:35"><expr pos:start="69:22" pos:end="69:35"><name pos:start="69:22" pos:end="69:35">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="69:38" pos:end="69:59"><expr pos:start="69:38" pos:end="69:59"><literal type="string" pos:start="69:38" pos:end="69:59">"Parsed log interval "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><call pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:25">log_read_interval</name><argument_list pos:start="71:26" pos:end="71:67">(<argument pos:start="71:27" pos:end="71:44"><expr pos:start="71:27" pos:end="71:44"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:44"><name pos:start="71:28" pos:end="71:41">read_intervals</name><index pos:start="71:42" pos:end="71:44">[<expr pos:start="71:43" pos:end="71:43"><name pos:start="71:43" pos:end="71:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="71:47" pos:end="71:50"><expr pos:start="71:47" pos:end="71:50"><name pos:start="71:47" pos:end="71:50">NULL</name></expr></argument>, <argument pos:start="71:53" pos:end="71:66"><expr pos:start="71:53" pos:end="71:66"><name pos:start="71:53" pos:end="71:66">AV_LOG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:17"><expr pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:9">p</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:16">next</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:43"><expr pos:start="75:9" pos:end="75:42"><call pos:start="75:9" pos:end="75:42"><name pos:start="75:9" pos:end="75:18">av_assert0</name><argument_list pos:start="75:19" pos:end="75:42">(<argument pos:start="75:20" pos:end="75:41"><expr pos:start="75:20" pos:end="75:41"><name pos:start="75:20" pos:end="75:20">i</name> <operator pos:start="75:22" pos:end="75:23">&lt;=</operator> <name pos:start="75:25" pos:end="75:41">read_intervals_nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><call pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:14">av_assert0</name><argument_list pos:start="79:15" pos:end="79:38">(<argument pos:start="79:16" pos:end="79:37"><expr pos:start="79:16" pos:end="79:37"><name pos:start="79:16" pos:end="79:16">i</name> <operator pos:start="79:18" pos:end="79:19">==</operator> <name pos:start="79:21" pos:end="79:37">read_intervals_nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="83:1" pos:end="83:4"><name pos:start="83:1" pos:end="83:3">end</name>:</label>

    <expr_stmt pos:start="85:5" pos:end="85:18"><expr pos:start="85:5" pos:end="85:17"><call pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:11">av_free</name><argument_list pos:start="85:12" pos:end="85:17">(<argument pos:start="85:13" pos:end="85:16"><expr pos:start="85:13" pos:end="85:16"><name pos:start="85:13" pos:end="85:16">spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
