<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25507.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">commit_active_start</name><parameter_list pos:start="1:25" pos:end="9:52">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">job_id</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:47"><decl pos:start="3:26" pos:end="3:47"><type pos:start="3:26" pos:end="3:47"><name pos:start="3:26" pos:end="3:41">BlockDriverState</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">base</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:62"><decl pos:start="3:50" pos:end="3:62"><type pos:start="3:50" pos:end="3:62"><name pos:start="3:50" pos:end="3:56">int64_t</name></type> <name pos:start="3:58" pos:end="3:62">speed</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:49"><decl pos:start="5:26" pos:end="5:49"><type pos:start="5:26" pos:end="5:49"><name pos:start="5:26" pos:end="5:40">BlockdevOnError</name></type> <name pos:start="5:42" pos:end="5:49">on_error</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:48"><decl pos:start="7:26" pos:end="7:48"><type pos:start="7:26" pos:end="7:48"><name pos:start="7:26" pos:end="7:44">BlockCompletionFunc</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:48">cb</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:37"><decl pos:start="9:26" pos:end="9:37"><type pos:start="9:26" pos:end="9:37"><name pos:start="9:26" pos:end="9:29">void</name> <modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:37">opaque</name></decl></parameter>, <parameter pos:start="9:40" pos:end="9:51"><decl pos:start="9:40" pos:end="9:51"><type pos:start="9:40" pos:end="9:51"><name pos:start="9:40" pos:end="9:44">Error</name> <modifier pos:start="9:46" pos:end="9:46">*</modifier><modifier pos:start="9:47" pos:end="9:47">*</modifier></type><name pos:start="9:48" pos:end="9:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="117:1">{<block_content pos:start="13:5" pos:end="115:11">

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">length</name></decl>, <decl pos:start="13:21" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:21" pos:end="13:31">base_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:23">orig_base_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:19">orig_base_flags</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:42"><name pos:start="23:23" pos:end="23:36">bdrv_get_flags</name><argument_list pos:start="23:37" pos:end="23:42">(<argument pos:start="23:38" pos:end="23:41"><expr pos:start="23:38" pos:end="23:41"><name pos:start="23:38" pos:end="23:41">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:48">(<expr pos:start="27:9" pos:end="27:47"><call pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:19">bdrv_reopen</name><argument_list pos:start="27:20" pos:end="27:47">(<argument pos:start="27:21" pos:end="27:24"><expr pos:start="27:21" pos:end="27:24"><name pos:start="27:21" pos:end="27:24">base</name></expr></argument>, <argument pos:start="27:27" pos:end="27:40"><expr pos:start="27:27" pos:end="27:40"><name pos:start="27:27" pos:end="27:40"><name pos:start="27:27" pos:end="27:28">bs</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:40">open_flags</name></name></expr></argument>, <argument pos:start="27:43" pos:end="27:46"><expr pos:start="27:43" pos:end="27:46"><name pos:start="27:43" pos:end="27:46">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:50" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:10">length</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:31"><name pos:start="35:14" pos:end="35:27">bdrv_getlength</name><argument_list pos:start="35:28" pos:end="35:31">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><name pos:start="35:29" pos:end="35:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:14">length</name> <operator pos:start="37:16" pos:end="37:16">&lt;</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>)</condition> <block pos:start="37:21" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:33">

        <expr_stmt pos:start="39:9" pos:end="41:75"><expr pos:start="39:9" pos:end="41:74"><call pos:start="39:9" pos:end="41:74"><name pos:start="39:9" pos:end="39:24">error_setg_errno</name><argument_list pos:start="39:25" pos:end="41:74">(<argument pos:start="39:26" pos:end="39:29"><expr pos:start="39:26" pos:end="39:29"><name pos:start="39:26" pos:end="39:29">errp</name></expr></argument>, <argument pos:start="39:32" pos:end="39:38"><expr pos:start="39:32" pos:end="39:38"><operator pos:start="39:32" pos:end="39:32">-</operator><name pos:start="39:33" pos:end="39:38">length</name></expr></argument>,

                         <argument pos:start="41:26" pos:end="41:59"><expr pos:start="41:26" pos:end="41:59"><literal type="string" pos:start="41:26" pos:end="41:59">"Unable to determine length of %s"</literal></expr></argument>, <argument pos:start="41:62" pos:end="41:73"><expr pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:63">bs</name><operator pos:start="41:64" pos:end="41:65">-&gt;</operator><name pos:start="41:66" pos:end="41:73">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:33">goto <name pos:start="43:14" pos:end="43:32">error_restore_flags</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:15">base_length</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:38"><name pos:start="49:19" pos:end="49:32">bdrv_getlength</name><argument_list pos:start="49:33" pos:end="49:38">(<argument pos:start="49:34" pos:end="49:37"><expr pos:start="49:34" pos:end="49:37"><name pos:start="49:34" pos:end="49:37">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:24">(<expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:19">base_length</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>)</condition> <block pos:start="51:26" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:33">

        <expr_stmt pos:start="53:9" pos:end="55:77"><expr pos:start="53:9" pos:end="55:76"><call pos:start="53:9" pos:end="55:76"><name pos:start="53:9" pos:end="53:24">error_setg_errno</name><argument_list pos:start="53:25" pos:end="55:76">(<argument pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">errp</name></expr></argument>, <argument pos:start="53:32" pos:end="53:43"><expr pos:start="53:32" pos:end="53:43"><operator pos:start="53:32" pos:end="53:32">-</operator><name pos:start="53:33" pos:end="53:43">base_length</name></expr></argument>,

                         <argument pos:start="55:26" pos:end="55:59"><expr pos:start="55:26" pos:end="55:59"><literal type="string" pos:start="55:26" pos:end="55:59">"Unable to determine length of %s"</literal></expr></argument>, <argument pos:start="55:62" pos:end="55:75"><expr pos:start="55:62" pos:end="55:75"><name pos:start="55:62" pos:end="55:75"><name pos:start="55:62" pos:end="55:65">base</name><operator pos:start="55:66" pos:end="55:67">-&gt;</operator><name pos:start="55:68" pos:end="55:75">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:33">goto <name pos:start="57:14" pos:end="57:32">error_restore_flags</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="81:5"><if pos:start="63:5" pos:end="81:5">if <condition pos:start="63:8" pos:end="63:29">(<expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:14">length</name> <operator pos:start="63:16" pos:end="63:16">&gt;</operator> <name pos:start="63:18" pos:end="63:28">base_length</name></expr>)</condition> <block pos:start="63:31" pos:end="81:5">{<block_content pos:start="65:9" pos:end="79:9">

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:41"><name pos:start="65:15" pos:end="65:27">bdrv_truncate</name><argument_list pos:start="65:28" pos:end="65:41">(<argument pos:start="65:29" pos:end="65:32"><expr pos:start="65:29" pos:end="65:32"><name pos:start="65:29" pos:end="65:32">base</name></expr></argument>, <argument pos:start="65:35" pos:end="65:40"><expr pos:start="65:35" pos:end="65:40"><name pos:start="65:35" pos:end="65:40">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="79:9"><if pos:start="67:9" pos:end="79:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>)</condition> <block pos:start="67:22" pos:end="79:9">{<block_content pos:start="69:13" pos:end="77:37">

            <expr_stmt pos:start="69:13" pos:end="75:59"><expr pos:start="69:13" pos:end="75:58"><call pos:start="69:13" pos:end="75:58"><name pos:start="69:13" pos:end="69:28">error_setg_errno</name><argument_list pos:start="69:29" pos:end="75:58">(<argument pos:start="69:30" pos:end="69:33"><expr pos:start="69:30" pos:end="69:33"><name pos:start="69:30" pos:end="69:33">errp</name></expr></argument>, <argument pos:start="69:36" pos:end="69:39"><expr pos:start="69:36" pos:end="69:39"><operator pos:start="69:36" pos:end="69:36">-</operator><name pos:start="69:37" pos:end="69:39">ret</name></expr></argument>,

                            <argument pos:start="71:29" pos:end="73:58"><expr pos:start="71:29" pos:end="73:58"><literal type="string" pos:start="71:29" pos:end="71:77">"Top image %s is larger than base image %s, and "</literal>

                             <literal type="string" pos:start="73:30" pos:end="73:58">"resize of base image failed"</literal></expr></argument>,

                             <argument pos:start="75:30" pos:end="75:41"><expr pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:31">bs</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:41">filename</name></name></expr></argument>, <argument pos:start="75:44" pos:end="75:57"><expr pos:start="75:44" pos:end="75:57"><name pos:start="75:44" pos:end="75:57"><name pos:start="75:44" pos:end="75:47">base</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:57">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:37">goto <name pos:start="77:18" pos:end="77:36">error_restore_flags</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="91:61"><expr pos:start="85:5" pos:end="91:60"><call pos:start="85:5" pos:end="91:60"><name pos:start="85:5" pos:end="85:20">mirror_start_job</name><argument_list pos:start="85:21" pos:end="91:60">(<argument pos:start="85:22" pos:end="85:27"><expr pos:start="85:22" pos:end="85:27"><name pos:start="85:22" pos:end="85:27">job_id</name></expr></argument>, <argument pos:start="85:30" pos:end="85:31"><expr pos:start="85:30" pos:end="85:31"><name pos:start="85:30" pos:end="85:31">bs</name></expr></argument>, <argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">base</name></expr></argument>, <argument pos:start="85:40" pos:end="85:43"><expr pos:start="85:40" pos:end="85:43"><name pos:start="85:40" pos:end="85:43">NULL</name></expr></argument>, <argument pos:start="85:46" pos:end="85:50"><expr pos:start="85:46" pos:end="85:50"><name pos:start="85:46" pos:end="85:50">speed</name></expr></argument>, <argument pos:start="85:53" pos:end="85:53"><expr pos:start="85:53" pos:end="85:53"><literal type="number" pos:start="85:53" pos:end="85:53">0</literal></expr></argument>, <argument pos:start="85:56" pos:end="85:56"><expr pos:start="85:56" pos:end="85:56"><literal type="number" pos:start="85:56" pos:end="85:56">0</literal></expr></argument>,

                     <argument pos:start="87:22" pos:end="87:47"><expr pos:start="87:22" pos:end="87:47"><name pos:start="87:22" pos:end="87:47">MIRROR_LEAVE_BACKING_CHAIN</name></expr></argument>,

                     <argument pos:start="89:22" pos:end="89:29"><expr pos:start="89:22" pos:end="89:29"><name pos:start="89:22" pos:end="89:29">on_error</name></expr></argument>, <argument pos:start="89:32" pos:end="89:39"><expr pos:start="89:32" pos:end="89:39"><name pos:start="89:32" pos:end="89:39">on_error</name></expr></argument>, <argument pos:start="89:42" pos:end="89:46"><expr pos:start="89:42" pos:end="89:46"><name pos:start="89:42" pos:end="89:46">false</name></expr></argument>, <argument pos:start="89:49" pos:end="89:50"><expr pos:start="89:49" pos:end="89:50"><name pos:start="89:49" pos:end="89:50">cb</name></expr></argument>, <argument pos:start="89:53" pos:end="89:58"><expr pos:start="89:53" pos:end="89:58"><name pos:start="89:53" pos:end="89:58">opaque</name></expr></argument>, <argument pos:start="89:61" pos:end="89:70"><expr pos:start="89:61" pos:end="89:70"><operator pos:start="89:61" pos:end="89:61">&amp;</operator><name pos:start="89:62" pos:end="89:70">local_err</name></expr></argument>,

                     <argument pos:start="91:22" pos:end="91:46"><expr pos:start="91:22" pos:end="91:46"><operator pos:start="91:22" pos:end="91:22">&amp;</operator><name pos:start="91:23" pos:end="91:46">commit_active_job_driver</name></expr></argument>, <argument pos:start="91:49" pos:end="91:53"><expr pos:start="91:49" pos:end="91:53"><name pos:start="91:49" pos:end="91:53">false</name></expr></argument>, <argument pos:start="91:56" pos:end="91:59"><expr pos:start="91:56" pos:end="91:59"><name pos:start="91:56" pos:end="91:59">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:18">(<expr pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:17">local_err</name></expr>)</condition> <block pos:start="93:20" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:33">

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><call pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:23">error_propagate</name><argument_list pos:start="95:24" pos:end="95:40">(<argument pos:start="95:25" pos:end="95:28"><expr pos:start="95:25" pos:end="95:28"><name pos:start="95:25" pos:end="95:28">errp</name></expr></argument>, <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:33">goto <name pos:start="97:14" pos:end="97:32">error_restore_flags</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:11">return;</return>



<label pos:start="107:1" pos:end="107:20"><name pos:start="107:1" pos:end="107:19">error_restore_flags</name>:</label>

    <comment type="block" pos:start="109:5" pos:end="111:28">/* ignore error and errp for bdrv_reopen, because we want to propagate

     * the original error */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:45"><expr pos:start="113:5" pos:end="113:44"><call pos:start="113:5" pos:end="113:44"><name pos:start="113:5" pos:end="113:15">bdrv_reopen</name><argument_list pos:start="113:16" pos:end="113:44">(<argument pos:start="113:17" pos:end="113:20"><expr pos:start="113:17" pos:end="113:20"><name pos:start="113:17" pos:end="113:20">base</name></expr></argument>, <argument pos:start="113:23" pos:end="113:37"><expr pos:start="113:23" pos:end="113:37"><name pos:start="113:23" pos:end="113:37">orig_base_flags</name></expr></argument>, <argument pos:start="113:40" pos:end="113:43"><expr pos:start="113:40" pos:end="113:43"><name pos:start="113:40" pos:end="113:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:11">return;</return>

</block_content>}</block></function>
</unit>
