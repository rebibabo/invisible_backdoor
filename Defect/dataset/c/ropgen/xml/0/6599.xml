<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6599.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">preallocate</name><parameter_list pos:start="1:23" pos:end="1:44">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:39">BlockDriverState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:43">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:13">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:23">nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:24">host_offset</name> <init pos:start="9:26" pos:end="9:28">= <expr pos:start="9:28" pos:end="9:28"><literal type="number" pos:start="9:28" pos:end="9:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">QCowL2Meta</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">meta</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:14">nb_sectors</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:35"><name pos:start="19:18" pos:end="19:31">bdrv_getlength</name><argument_list pos:start="19:32" pos:end="19:35">(<argument pos:start="19:33" pos:end="19:34"><expr pos:start="19:33" pos:end="19:34"><name pos:start="19:33" pos:end="19:34">bs</name></expr></argument>)</argument_list></call> <operator pos:start="19:37" pos:end="19:38">&gt;&gt;</operator> <literal type="number" pos:start="19:40" pos:end="19:40">9</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:10">offset</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="75:5">while <condition pos:start="25:11" pos:end="25:22">(<expr pos:start="25:12" pos:end="25:21"><name pos:start="25:12" pos:end="25:21">nb_sectors</name></expr>)</condition> <block pos:start="25:24" pos:end="75:5">{<block_content pos:start="27:9" pos:end="73:27">

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:11">num</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:43"><name pos:start="27:15" pos:end="27:17">MIN</name><argument_list pos:start="27:18" pos:end="27:43">(<argument pos:start="27:19" pos:end="27:28"><expr pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:28">nb_sectors</name></expr></argument>, <argument pos:start="27:31" pos:end="27:42"><expr pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:37">INT_MAX</name> <operator pos:start="27:39" pos:end="27:40">&gt;&gt;</operator> <literal type="number" pos:start="27:42" pos:end="27:42">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="31:62"><expr pos:start="29:9" pos:end="31:61"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="31:61"><name pos:start="29:15" pos:end="29:40">qcow2_alloc_cluster_offset</name><argument_list pos:start="29:41" pos:end="31:61">(<argument pos:start="29:42" pos:end="29:43"><expr pos:start="29:42" pos:end="29:43"><name pos:start="29:42" pos:end="29:43">bs</name></expr></argument>, <argument pos:start="29:46" pos:end="29:51"><expr pos:start="29:46" pos:end="29:51"><name pos:start="29:46" pos:end="29:51">offset</name></expr></argument>, <argument pos:start="29:54" pos:end="29:57"><expr pos:start="29:54" pos:end="29:57"><operator pos:start="29:54" pos:end="29:54">&amp;</operator><name pos:start="29:55" pos:end="29:57">num</name></expr></argument>,

                                         <argument pos:start="31:42" pos:end="31:53"><expr pos:start="31:42" pos:end="31:53"><operator pos:start="31:42" pos:end="31:42">&amp;</operator><name pos:start="31:43" pos:end="31:53">host_offset</name></expr></argument>, <argument pos:start="31:56" pos:end="31:60"><expr pos:start="31:56" pos:end="31:60"><operator pos:start="31:56" pos:end="31:56">&amp;</operator><name pos:start="31:57" pos:end="31:60">meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">&lt;</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:23">

            <return pos:start="35:13" pos:end="35:23">return <expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:52"><expr pos:start="41:9" pos:end="41:51"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:51"><name pos:start="41:15" pos:end="41:41">qcow2_alloc_cluster_link_l2</name><argument_list pos:start="41:42" pos:end="41:51">(<argument pos:start="41:43" pos:end="41:44"><expr pos:start="41:43" pos:end="41:44"><name pos:start="41:43" pos:end="41:44">bs</name></expr></argument>, <argument pos:start="41:47" pos:end="41:50"><expr pos:start="41:47" pos:end="41:50"><name pos:start="41:47" pos:end="41:50">meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:23">

            <expr_stmt pos:start="45:13" pos:end="47:57"><expr pos:start="45:13" pos:end="47:56"><call pos:start="45:13" pos:end="47:56"><name pos:start="45:13" pos:end="45:35">qcow2_free_any_clusters</name><argument_list pos:start="45:36" pos:end="47:56">(<argument pos:start="45:37" pos:end="45:38"><expr pos:start="45:37" pos:end="45:38"><name pos:start="45:37" pos:end="45:38">bs</name></expr></argument>, <argument pos:start="45:41" pos:end="45:58"><expr pos:start="45:41" pos:end="45:58"><name pos:start="45:41" pos:end="45:58"><name pos:start="45:41" pos:end="45:44">meta</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:58">alloc_offset</name></name></expr></argument>, <argument pos:start="45:61" pos:end="45:77"><expr pos:start="45:61" pos:end="45:77"><name pos:start="45:61" pos:end="45:77"><name pos:start="45:61" pos:end="45:64">meta</name><operator pos:start="45:65" pos:end="45:66">-&gt;</operator><name pos:start="45:67" pos:end="45:77">nb_clusters</name></name></expr></argument>,

                                    <argument pos:start="47:37" pos:end="47:55"><expr pos:start="47:37" pos:end="47:55"><name pos:start="47:37" pos:end="47:55">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:23">return <expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="55:9" pos:end="57:49">/* There are no dependent requests, but we need to remove our request

         * from the list of in-flight requests */</comment>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:16">meta</name> <operator pos:start="59:18" pos:end="59:19">!=</operator> <name pos:start="59:21" pos:end="59:24">NULL</name></expr>)</condition> <block pos:start="59:27" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:47">

            <expr_stmt pos:start="61:13" pos:end="61:47"><expr pos:start="61:13" pos:end="61:46"><call pos:start="61:13" pos:end="61:46"><name pos:start="61:13" pos:end="61:24">QLIST_REMOVE</name><argument_list pos:start="61:25" pos:end="61:46">(<argument pos:start="61:26" pos:end="61:29"><expr pos:start="61:26" pos:end="61:29"><name pos:start="61:26" pos:end="61:29">meta</name></expr></argument>, <argument pos:start="61:32" pos:end="61:45"><expr pos:start="61:32" pos:end="61:45"><name pos:start="61:32" pos:end="61:45">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:48">/* TODO Preallocate data if requested */</comment>



        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:18">nb_sectors</name> <operator pos:start="71:20" pos:end="71:21">-=</operator> <name pos:start="71:23" pos:end="71:25">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:14">offset</name> <operator pos:start="73:16" pos:end="73:17">+=</operator> <name pos:start="73:19" pos:end="73:21">num</name> <operator pos:start="73:23" pos:end="73:24">&lt;&lt;</operator> <literal type="number" pos:start="73:26" pos:end="73:26">9</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="79:5" pos:end="87:7">/*

     * It is expected that the image file is large enough to actually contain

     * all of the allocated clusters (otherwise we get failing reads after

     * EOF). Extend the image to the last allocated sector.

     */</comment>

    <if_stmt pos:start="89:5" pos:end="103:5"><if pos:start="89:5" pos:end="103:5">if <condition pos:start="89:8" pos:end="89:25">(<expr pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:19">host_offset</name> <operator pos:start="89:21" pos:end="89:22">!=</operator> <literal type="number" pos:start="89:24" pos:end="89:24">0</literal></expr>)</condition> <block pos:start="89:27" pos:end="103:5">{<block_content pos:start="91:9" pos:end="101:9">

        <decl_stmt pos:start="91:9" pos:end="91:25"><decl pos:start="91:9" pos:end="91:24"><type pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:15">uint8_t</name></type> <name pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:19">buf</name><index pos:start="91:20" pos:end="91:24">[<expr pos:start="91:21" pos:end="91:23"><literal type="number" pos:start="91:21" pos:end="91:23">512</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><call pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:14">memset</name><argument_list pos:start="93:15" pos:end="93:27">(<argument pos:start="93:16" pos:end="93:18"><expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">buf</name></expr></argument>, <argument pos:start="93:21" pos:end="93:21"><expr pos:start="93:21" pos:end="93:21"><literal type="number" pos:start="93:21" pos:end="93:21">0</literal></expr></argument>, <argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><literal type="number" pos:start="93:24" pos:end="93:26">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:73"><expr pos:start="95:9" pos:end="95:72"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:72"><name pos:start="95:15" pos:end="95:24">bdrv_write</name><argument_list pos:start="95:25" pos:end="95:72">(<argument pos:start="95:26" pos:end="95:33"><expr pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:27">bs</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:33">file</name></name></expr></argument>, <argument pos:start="95:36" pos:end="95:63"><expr pos:start="95:36" pos:end="95:63"><operator pos:start="95:36" pos:end="95:36">(</operator><name pos:start="95:37" pos:end="95:47">host_offset</name> <operator pos:start="95:49" pos:end="95:50">&gt;&gt;</operator> <literal type="number" pos:start="95:52" pos:end="95:52">9</literal><operator pos:start="95:53" pos:end="95:53">)</operator> <operator pos:start="95:55" pos:end="95:55">+</operator> <name pos:start="95:57" pos:end="95:59">num</name> <operator pos:start="95:61" pos:end="95:61">-</operator> <literal type="number" pos:start="95:63" pos:end="95:63">1</literal></expr></argument>, <argument pos:start="95:66" pos:end="95:68"><expr pos:start="95:66" pos:end="95:68"><name pos:start="95:66" pos:end="95:68">buf</name></expr></argument>, <argument pos:start="95:71" pos:end="95:71"><expr pos:start="95:71" pos:end="95:71"><literal type="number" pos:start="95:71" pos:end="95:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:20">(<expr pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">&lt;</operator> <literal type="number" pos:start="97:19" pos:end="97:19">0</literal></expr>)</condition> <block pos:start="97:22" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:23">

            <return pos:start="99:13" pos:end="99:23">return <expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
