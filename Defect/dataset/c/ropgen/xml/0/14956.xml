<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14956.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vmdk_open_vmdk4</name><parameter_list pos:start="1:27" pos:end="5:37">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><name pos:start="3:28" pos:end="3:43">BlockDriverState</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">file</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:36"><decl pos:start="5:28" pos:end="5:36"><type pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:30">int</name></type> <name pos:start="5:32" pos:end="5:36">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="213:1">{<block_content pos:start="9:5" pos:end="211:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">l1_size</name></decl>, <decl pos:start="13:23" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:23" pos:end="13:38">l1_entry_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">VMDK4Header</name></type> <name pos:start="15:17" pos:end="15:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">VmdkExtent</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">extent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:28">l1_backup_offset</name> <init pos:start="19:30" pos:end="19:32">= <expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:67"><expr pos:start="23:5" pos:end="23:66"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:66"><name pos:start="23:11" pos:end="23:20">bdrv_pread</name><argument_list pos:start="23:21" pos:end="23:66">(<argument pos:start="23:22" pos:end="23:25"><expr pos:start="23:22" pos:end="23:25"><name pos:start="23:22" pos:end="23:25">file</name></expr></argument>, <argument pos:start="23:28" pos:end="23:40"><expr pos:start="23:28" pos:end="23:40"><sizeof pos:start="23:28" pos:end="23:40">sizeof<argument_list pos:start="23:34" pos:end="23:40">(<argument pos:start="23:35" pos:end="23:39"><expr pos:start="23:35" pos:end="23:39"><name pos:start="23:35" pos:end="23:39">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:43" pos:end="23:49"><expr pos:start="23:43" pos:end="23:49"><operator pos:start="23:43" pos:end="23:43">&amp;</operator><name pos:start="23:44" pos:end="23:49">header</name></expr></argument>, <argument pos:start="23:52" pos:end="23:65"><expr pos:start="23:52" pos:end="23:65"><sizeof pos:start="23:52" pos:end="23:65">sizeof<argument_list pos:start="23:58" pos:end="23:65">(<argument pos:start="23:59" pos:end="23:64"><expr pos:start="23:59" pos:end="23:64"><name pos:start="23:59" pos:end="23:64">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:29">(<expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:14">header</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:23">capacity</name></name> <operator pos:start="31:25" pos:end="31:26">==</operator> <literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr>)</condition> <block pos:start="31:31" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:9">

        <decl_stmt pos:start="33:9" pos:end="33:63"><decl pos:start="33:9" pos:end="33:62"><type pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">uint64_t</name></type> <name pos:start="33:18" pos:end="33:28">desc_offset</name> <init pos:start="33:30" pos:end="33:62">= <expr pos:start="33:32" pos:end="33:62"><call pos:start="33:32" pos:end="33:62"><name pos:start="33:32" pos:end="33:42">le64_to_cpu</name><argument_list pos:start="33:43" pos:end="33:62">(<argument pos:start="33:44" pos:end="33:61"><expr pos:start="33:44" pos:end="33:61"><name pos:start="33:44" pos:end="33:61"><name pos:start="33:44" pos:end="33:49">header</name><operator pos:start="33:50" pos:end="33:50">.</operator><name pos:start="33:51" pos:end="33:61">desc_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:24">(<expr pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:23">desc_offset</name></expr>)</condition> <block pos:start="35:26" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:68">

            <return pos:start="37:13" pos:end="37:68">return <expr pos:start="37:20" pos:end="37:67"><call pos:start="37:20" pos:end="37:67"><name pos:start="37:20" pos:end="37:38">vmdk_open_desc_file</name><argument_list pos:start="37:39" pos:end="37:67">(<argument pos:start="37:40" pos:end="37:41"><expr pos:start="37:40" pos:end="37:41"><name pos:start="37:40" pos:end="37:41">bs</name></expr></argument>, <argument pos:start="37:44" pos:end="37:48"><expr pos:start="37:44" pos:end="37:48"><name pos:start="37:44" pos:end="37:48">flags</name></expr></argument>, <argument pos:start="37:51" pos:end="37:66"><expr pos:start="37:51" pos:end="37:66"><name pos:start="37:51" pos:end="37:61">desc_offset</name> <operator pos:start="37:63" pos:end="37:64">&lt;&lt;</operator> <literal type="number" pos:start="37:66" pos:end="37:66">9</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="135:5"><if pos:start="45:5" pos:end="135:5">if <condition pos:start="45:8" pos:end="45:57">(<expr pos:start="45:9" pos:end="45:56"><call pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:19">le64_to_cpu</name><argument_list pos:start="45:20" pos:end="45:37">(<argument pos:start="45:21" pos:end="45:36"><expr pos:start="45:21" pos:end="45:36"><name pos:start="45:21" pos:end="45:36"><name pos:start="45:21" pos:end="45:26">header</name><operator pos:start="45:27" pos:end="45:27">.</operator><name pos:start="45:28" pos:end="45:36">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="45:39" pos:end="45:40">==</operator> <name pos:start="45:42" pos:end="45:56">VMDK4_GD_AT_END</name></expr>)</condition> <block pos:start="45:59" pos:end="135:5">{<block_content pos:start="57:9" pos:end="133:31">

        <comment type="block" pos:start="47:9" pos:end="55:11">/*

         * The footer takes precedence over the header, so read it in. The

         * footer starts at offset -1024 from the end: One sector for the

         * footer, and another one for the end-of-stream marker.

         */</comment>

        <struct pos:start="57:9" pos:end="93:29">struct <block pos:start="57:16" pos:end="93:9">{

            <struct pos:start="59:13" pos:end="69:40">struct <block pos:start="59:20" pos:end="69:13">{

                <decl_stmt pos:start="61:17" pos:end="61:29"><decl pos:start="61:17" pos:end="61:28"><type pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:24">uint64_t</name></type> <name pos:start="61:26" pos:end="61:28">val</name></decl>;</decl_stmt>

                <decl_stmt pos:start="63:17" pos:end="63:30"><decl pos:start="63:17" pos:end="63:29"><type pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:24">uint32_t</name></type> <name pos:start="63:26" pos:end="63:29">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="65:17" pos:end="65:30"><decl pos:start="65:17" pos:end="65:29"><type pos:start="65:17" pos:end="65:24"><name pos:start="65:17" pos:end="65:24">uint32_t</name></type> <name pos:start="65:26" pos:end="65:29">type</name></decl>;</decl_stmt>

                <decl_stmt pos:start="67:17" pos:end="67:38"><decl pos:start="67:17" pos:end="67:37"><type pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:23">uint8_t</name></type> <name pos:start="67:25" pos:end="67:37"><name pos:start="67:25" pos:end="67:27">pad</name><index pos:start="67:28" pos:end="67:37">[<expr pos:start="67:29" pos:end="67:36"><literal type="number" pos:start="67:29" pos:end="67:31">512</literal> <operator pos:start="67:33" pos:end="67:33">-</operator> <literal type="number" pos:start="67:35" pos:end="67:36">16</literal></expr>]</index></name></decl>;</decl_stmt>

            }</block> <decl pos:start="69:15" pos:end="69:39"><name pos:start="69:15" pos:end="69:25">QEMU_PACKED</name> <name pos:start="69:27" pos:end="69:39">footer_marker</name></decl>;</struct>



            <decl_stmt pos:start="73:13" pos:end="73:27"><decl pos:start="73:13" pos:end="73:26"><type pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:20">uint32_t</name></type> <name pos:start="73:22" pos:end="73:26">magic</name></decl>;</decl_stmt>

            <decl_stmt pos:start="75:13" pos:end="75:31"><decl pos:start="75:13" pos:end="75:30"><type pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:23">VMDK4Header</name></type> <name pos:start="75:25" pos:end="75:30">header</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:55"><decl pos:start="77:13" pos:end="77:54"><type pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:19">uint8_t</name></type> <name pos:start="77:21" pos:end="77:54"><name pos:start="77:21" pos:end="77:23">pad</name><index pos:start="77:24" pos:end="77:54">[<expr pos:start="77:25" pos:end="77:53"><literal type="number" pos:start="77:25" pos:end="77:29">512</literal> <operator pos:start="77:29" pos:end="77:29">-</operator> <literal type="number" pos:start="77:31" pos:end="77:33">4</literal> <operator pos:start="77:33" pos:end="77:33">-</operator> <sizeof pos:start="77:35" pos:end="77:53">sizeof<argument_list pos:start="77:41" pos:end="77:53">(<argument pos:start="77:42" pos:end="77:52"><expr pos:start="77:42" pos:end="77:52"><name pos:start="77:42" pos:end="77:52">VMDK4Header</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>



            <struct pos:start="81:13" pos:end="91:37">struct <block pos:start="81:20" pos:end="91:13">{

                <decl_stmt pos:start="83:17" pos:end="83:29"><decl pos:start="83:17" pos:end="83:28"><type pos:start="83:17" pos:end="83:24"><name pos:start="83:17" pos:end="83:24">uint64_t</name></type> <name pos:start="83:26" pos:end="83:28">val</name></decl>;</decl_stmt>

                <decl_stmt pos:start="85:17" pos:end="85:30"><decl pos:start="85:17" pos:end="85:29"><type pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:24">uint32_t</name></type> <name pos:start="85:26" pos:end="85:29">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="87:17" pos:end="87:30"><decl pos:start="87:17" pos:end="87:29"><type pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:24">uint32_t</name></type> <name pos:start="87:26" pos:end="87:29">type</name></decl>;</decl_stmt>

                <decl_stmt pos:start="89:17" pos:end="89:38"><decl pos:start="89:17" pos:end="89:37"><type pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:23">uint8_t</name></type> <name pos:start="89:25" pos:end="89:37"><name pos:start="89:25" pos:end="89:27">pad</name><index pos:start="89:28" pos:end="89:37">[<expr pos:start="89:29" pos:end="89:36"><literal type="number" pos:start="89:29" pos:end="89:31">512</literal> <operator pos:start="89:33" pos:end="89:33">-</operator> <literal type="number" pos:start="89:35" pos:end="89:36">16</literal></expr>]</index></name></decl>;</decl_stmt>

            }</block> <decl pos:start="91:15" pos:end="91:36"><name pos:start="91:15" pos:end="91:25">QEMU_PACKED</name> <name pos:start="91:27" pos:end="91:36">eos_marker</name></decl>;</struct>

        }</block> <decl pos:start="93:11" pos:end="93:28"><name pos:start="93:11" pos:end="93:21">QEMU_PACKED</name> <name pos:start="93:23" pos:end="93:28">footer</name></decl>;</struct>



        <expr_stmt pos:start="97:9" pos:end="101:37"><expr pos:start="97:9" pos:end="101:36"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="101:36"><name pos:start="97:15" pos:end="97:24">bdrv_pread</name><argument_list pos:start="97:25" pos:end="101:36">(<argument pos:start="97:26" pos:end="97:29"><expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">file</name></expr></argument>,

            <argument pos:start="99:13" pos:end="99:48"><expr pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:35"><name pos:start="99:13" pos:end="99:14">bs</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:20">file</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:35">total_sectors</name></name> <operator pos:start="99:37" pos:end="99:37">*</operator> <literal type="number" pos:start="99:39" pos:end="99:43">512</literal> <operator pos:start="99:43" pos:end="99:43">-</operator> <literal type="number" pos:start="99:45" pos:end="99:48">1536</literal></expr></argument>,

            <argument pos:start="101:13" pos:end="101:19"><expr pos:start="101:13" pos:end="101:19"><operator pos:start="101:13" pos:end="101:13">&amp;</operator><name pos:start="101:14" pos:end="101:19">footer</name></expr></argument>, <argument pos:start="101:22" pos:end="101:35"><expr pos:start="101:22" pos:end="101:35"><sizeof pos:start="101:22" pos:end="101:35">sizeof<argument_list pos:start="101:28" pos:end="101:35">(<argument pos:start="101:29" pos:end="101:34"><expr pos:start="101:29" pos:end="101:34"><name pos:start="101:29" pos:end="101:34">footer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:23">

            <return pos:start="105:13" pos:end="105:23">return <expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:47">/* Some sanity checks for the footer */</comment>

        <if_stmt pos:start="113:9" pos:end="129:9"><if pos:start="113:9" pos:end="129:9">if <condition pos:start="113:12" pos:end="123:72">(<expr pos:start="113:13" pos:end="123:71"><call pos:start="113:13" pos:end="113:37"><name pos:start="113:13" pos:end="113:23">be32_to_cpu</name><argument_list pos:start="113:24" pos:end="113:37">(<argument pos:start="113:25" pos:end="113:36"><expr pos:start="113:25" pos:end="113:36"><name pos:start="113:25" pos:end="113:36"><name pos:start="113:25" pos:end="113:30">footer</name><operator pos:start="113:31" pos:end="113:31">.</operator><name pos:start="113:32" pos:end="113:36">magic</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:39" pos:end="113:40">!=</operator> <name pos:start="113:42" pos:end="113:52">VMDK4_MAGIC</name> <operator pos:start="113:54" pos:end="113:55">||</operator>

            <call pos:start="115:13" pos:end="115:50"><name pos:start="115:13" pos:end="115:23">le32_to_cpu</name><argument_list pos:start="115:24" pos:end="115:50">(<argument pos:start="115:25" pos:end="115:49"><expr pos:start="115:25" pos:end="115:49"><name pos:start="115:25" pos:end="115:49"><name pos:start="115:25" pos:end="115:30">footer</name><operator pos:start="115:31" pos:end="115:31">.</operator><name pos:start="115:32" pos:end="115:44">footer_marker</name><operator pos:start="115:45" pos:end="115:45">.</operator><name pos:start="115:46" pos:end="115:49">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:52" pos:end="115:53">!=</operator> <literal type="number" pos:start="115:55" pos:end="115:55">0</literal>  <operator pos:start="115:58" pos:end="115:59">||</operator>

            <call pos:start="117:13" pos:end="117:50"><name pos:start="117:13" pos:end="117:23">le32_to_cpu</name><argument_list pos:start="117:24" pos:end="117:50">(<argument pos:start="117:25" pos:end="117:49"><expr pos:start="117:25" pos:end="117:49"><name pos:start="117:25" pos:end="117:49"><name pos:start="117:25" pos:end="117:30">footer</name><operator pos:start="117:31" pos:end="117:31">.</operator><name pos:start="117:32" pos:end="117:44">footer_marker</name><operator pos:start="117:45" pos:end="117:45">.</operator><name pos:start="117:46" pos:end="117:49">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="117:52" pos:end="117:53">!=</operator> <name pos:start="117:55" pos:end="117:67">MARKER_FOOTER</name> <operator pos:start="117:69" pos:end="117:70">||</operator>

            <call pos:start="119:13" pos:end="119:46"><name pos:start="119:13" pos:end="119:23">le64_to_cpu</name><argument_list pos:start="119:24" pos:end="119:46">(<argument pos:start="119:25" pos:end="119:45"><expr pos:start="119:25" pos:end="119:45"><name pos:start="119:25" pos:end="119:45"><name pos:start="119:25" pos:end="119:30">footer</name><operator pos:start="119:31" pos:end="119:31">.</operator><name pos:start="119:32" pos:end="119:41">eos_marker</name><operator pos:start="119:42" pos:end="119:42">.</operator><name pos:start="119:43" pos:end="119:45">val</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:48" pos:end="119:49">!=</operator> <literal type="number" pos:start="119:51" pos:end="119:51">0</literal>  <operator pos:start="119:54" pos:end="119:55">||</operator>

            <call pos:start="121:13" pos:end="121:47"><name pos:start="121:13" pos:end="121:23">le32_to_cpu</name><argument_list pos:start="121:24" pos:end="121:47">(<argument pos:start="121:25" pos:end="121:46"><expr pos:start="121:25" pos:end="121:46"><name pos:start="121:25" pos:end="121:46"><name pos:start="121:25" pos:end="121:30">footer</name><operator pos:start="121:31" pos:end="121:31">.</operator><name pos:start="121:32" pos:end="121:41">eos_marker</name><operator pos:start="121:42" pos:end="121:42">.</operator><name pos:start="121:43" pos:end="121:46">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="121:49" pos:end="121:50">!=</operator> <literal type="number" pos:start="121:52" pos:end="121:52">0</literal>  <operator pos:start="121:55" pos:end="121:56">||</operator>

            <call pos:start="123:13" pos:end="123:47"><name pos:start="123:13" pos:end="123:23">le32_to_cpu</name><argument_list pos:start="123:24" pos:end="123:47">(<argument pos:start="123:25" pos:end="123:46"><expr pos:start="123:25" pos:end="123:46"><name pos:start="123:25" pos:end="123:46"><name pos:start="123:25" pos:end="123:30">footer</name><operator pos:start="123:31" pos:end="123:31">.</operator><name pos:start="123:32" pos:end="123:41">eos_marker</name><operator pos:start="123:42" pos:end="123:42">.</operator><name pos:start="123:43" pos:end="123:46">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="123:49" pos:end="123:50">!=</operator> <name pos:start="123:52" pos:end="123:71">MARKER_END_OF_STREAM</name></expr>)</condition>

        <block pos:start="125:9" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:27">

            <return pos:start="127:13" pos:end="127:27">return <expr pos:start="127:20" pos:end="127:26"><operator pos:start="127:20" pos:end="127:20">-</operator><name pos:start="127:21" pos:end="127:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:14">header</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:30"><name pos:start="133:18" pos:end="133:23">footer</name><operator pos:start="133:24" pos:end="133:24">.</operator><name pos:start="133:25" pos:end="133:30">header</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="153:5"><if pos:start="139:5" pos:end="153:5">if <condition pos:start="139:8" pos:end="139:41">(<expr pos:start="139:9" pos:end="139:40"><call pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:19">le32_to_cpu</name><argument_list pos:start="139:20" pos:end="139:35">(<argument pos:start="139:21" pos:end="139:34"><expr pos:start="139:21" pos:end="139:34"><name pos:start="139:21" pos:end="139:34"><name pos:start="139:21" pos:end="139:26">header</name><operator pos:start="139:27" pos:end="139:27">.</operator><name pos:start="139:28" pos:end="139:34">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="139:37" pos:end="139:38">&gt;=</operator> <literal type="number" pos:start="139:40" pos:end="139:40">3</literal></expr>)</condition> <block pos:start="139:43" pos:end="153:5">{<block_content pos:start="141:9" pos:end="151:24">

        <decl_stmt pos:start="141:9" pos:end="141:21"><decl pos:start="141:9" pos:end="141:20"><type pos:start="141:9" pos:end="141:12"><name pos:start="141:9" pos:end="141:12">char</name></type> <name pos:start="141:14" pos:end="141:20"><name pos:start="141:14" pos:end="141:16">buf</name><index pos:start="141:17" pos:end="141:20">[<expr pos:start="141:18" pos:end="141:19"><literal type="number" pos:start="141:18" pos:end="141:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="143:9" pos:end="145:46"><expr pos:start="143:9" pos:end="145:45"><call pos:start="143:9" pos:end="145:45"><name pos:start="143:9" pos:end="143:16">snprintf</name><argument_list pos:start="143:17" pos:end="145:45">(<argument pos:start="143:18" pos:end="143:20"><expr pos:start="143:18" pos:end="143:20"><name pos:start="143:18" pos:end="143:20">buf</name></expr></argument>, <argument pos:start="143:23" pos:end="143:33"><expr pos:start="143:23" pos:end="143:33"><sizeof pos:start="143:23" pos:end="143:33">sizeof<argument_list pos:start="143:29" pos:end="143:33">(<argument pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><name pos:start="143:30" pos:end="143:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="143:36" pos:end="143:52"><expr pos:start="143:36" pos:end="143:52"><literal type="string" pos:start="143:36" pos:end="143:52">"VMDK version %d"</literal></expr></argument>,

                 <argument pos:start="145:18" pos:end="145:44"><expr pos:start="145:18" pos:end="145:44"><call pos:start="145:18" pos:end="145:44"><name pos:start="145:18" pos:end="145:28">le32_to_cpu</name><argument_list pos:start="145:29" pos:end="145:44">(<argument pos:start="145:30" pos:end="145:43"><expr pos:start="145:30" pos:end="145:43"><name pos:start="145:30" pos:end="145:43"><name pos:start="145:30" pos:end="145:35">header</name><operator pos:start="145:36" pos:end="145:36">.</operator><name pos:start="145:37" pos:end="145:43">version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="149:46"><expr pos:start="147:9" pos:end="149:45"><call pos:start="147:9" pos:end="149:45"><name pos:start="147:9" pos:end="147:21">qerror_report</name><argument_list pos:start="147:22" pos:end="149:45">(<argument pos:start="147:23" pos:end="147:55"><expr pos:start="147:23" pos:end="147:55"><name pos:start="147:23" pos:end="147:55">QERR_UNKNOWN_BLOCK_FORMAT_FEATURE</name></expr></argument>,

                <argument pos:start="149:17" pos:end="149:31"><expr pos:start="149:17" pos:end="149:31"><name pos:start="149:17" pos:end="149:31"><name pos:start="149:17" pos:end="149:18">bs</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:31">device_name</name></name></expr></argument>, <argument pos:start="149:34" pos:end="149:39"><expr pos:start="149:34" pos:end="149:39"><literal type="string" pos:start="149:34" pos:end="149:39">"vmdk"</literal></expr></argument>, <argument pos:start="149:42" pos:end="149:44"><expr pos:start="149:42" pos:end="149:44"><name pos:start="149:42" pos:end="149:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:24">return <expr pos:start="151:16" pos:end="151:23"><operator pos:start="151:16" pos:end="151:16">-</operator><name pos:start="151:17" pos:end="151:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="159:58"><expr pos:start="157:5" pos:end="159:57"><name pos:start="157:5" pos:end="157:20">l1_entry_sectors</name> <operator pos:start="157:22" pos:end="157:22">=</operator> <call pos:start="157:24" pos:end="157:59"><name pos:start="157:24" pos:end="157:34">le32_to_cpu</name><argument_list pos:start="157:35" pos:end="157:59">(<argument pos:start="157:36" pos:end="157:58"><expr pos:start="157:36" pos:end="157:58"><name pos:start="157:36" pos:end="157:58"><name pos:start="157:36" pos:end="157:41">header</name><operator pos:start="157:42" pos:end="157:42">.</operator><name pos:start="157:43" pos:end="157:58">num_gtes_per_gte</name></name></expr></argument>)</argument_list></call>

                        <operator pos:start="159:25" pos:end="159:25">*</operator> <call pos:start="159:27" pos:end="159:57"><name pos:start="159:27" pos:end="159:37">le64_to_cpu</name><argument_list pos:start="159:38" pos:end="159:57">(<argument pos:start="159:39" pos:end="159:56"><expr pos:start="159:39" pos:end="159:56"><name pos:start="159:39" pos:end="159:56"><name pos:start="159:39" pos:end="159:44">header</name><operator pos:start="159:45" pos:end="159:45">.</operator><name pos:start="159:46" pos:end="159:56">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:30">(<expr pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:24">l1_entry_sectors</name> <operator pos:start="161:26" pos:end="161:27">==</operator> <literal type="number" pos:start="161:29" pos:end="161:29">0</literal></expr>)</condition> <block pos:start="161:32" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:23">

        <return pos:start="163:9" pos:end="163:23">return <expr pos:start="163:16" pos:end="163:22"><operator pos:start="163:16" pos:end="163:16">-</operator><name pos:start="163:17" pos:end="163:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="169:35"><expr pos:start="167:5" pos:end="169:34"><name pos:start="167:5" pos:end="167:11">l1_size</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <operator pos:start="167:15" pos:end="167:15">(</operator><call pos:start="167:16" pos:end="167:43"><name pos:start="167:16" pos:end="167:26">le64_to_cpu</name><argument_list pos:start="167:27" pos:end="167:43">(<argument pos:start="167:28" pos:end="167:42"><expr pos:start="167:28" pos:end="167:42"><name pos:start="167:28" pos:end="167:42"><name pos:start="167:28" pos:end="167:33">header</name><operator pos:start="167:34" pos:end="167:34">.</operator><name pos:start="167:35" pos:end="167:42">capacity</name></name></expr></argument>)</argument_list></call> <operator pos:start="167:45" pos:end="167:45">+</operator> <name pos:start="167:47" pos:end="167:62">l1_entry_sectors</name> <operator pos:start="167:64" pos:end="167:64">-</operator> <literal type="number" pos:start="167:66" pos:end="167:66">1</literal><operator pos:start="167:67" pos:end="167:67">)</operator>

                <operator pos:start="169:17" pos:end="169:17">/</operator> <name pos:start="169:19" pos:end="169:34">l1_entry_sectors</name></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="175:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:51">(<expr pos:start="171:9" pos:end="171:50"><call pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:19">le32_to_cpu</name><argument_list pos:start="171:20" pos:end="171:33">(<argument pos:start="171:21" pos:end="171:32"><expr pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:26">header</name><operator pos:start="171:27" pos:end="171:27">.</operator><name pos:start="171:28" pos:end="171:32">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:35" pos:end="171:35">&amp;</operator> <name pos:start="171:37" pos:end="171:50">VMDK4_FLAG_RGD</name></expr>)</condition> <block pos:start="171:53" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:63">

        <expr_stmt pos:start="173:9" pos:end="173:63"><expr pos:start="173:9" pos:end="173:62"><name pos:start="173:9" pos:end="173:24">l1_backup_offset</name> <operator pos:start="173:26" pos:end="173:26">=</operator> <call pos:start="173:28" pos:end="173:57"><name pos:start="173:28" pos:end="173:38">le64_to_cpu</name><argument_list pos:start="173:39" pos:end="173:57">(<argument pos:start="173:40" pos:end="173:56"><expr pos:start="173:40" pos:end="173:56"><name pos:start="173:40" pos:end="173:56"><name pos:start="173:40" pos:end="173:45">header</name><operator pos:start="173:46" pos:end="173:46">.</operator><name pos:start="173:47" pos:end="173:56">rgd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="173:59" pos:end="173:60">&lt;&lt;</operator> <literal type="number" pos:start="173:62" pos:end="173:62">9</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="189:59"><expr pos:start="177:5" pos:end="189:58"><name pos:start="177:5" pos:end="177:10">extent</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <call pos:start="177:14" pos:end="189:58"><name pos:start="177:14" pos:end="177:28">vmdk_add_extent</name><argument_list pos:start="177:29" pos:end="189:58">(<argument pos:start="177:30" pos:end="177:31"><expr pos:start="177:30" pos:end="177:31"><name pos:start="177:30" pos:end="177:31">bs</name></expr></argument>, <argument pos:start="177:34" pos:end="177:37"><expr pos:start="177:34" pos:end="177:37"><name pos:start="177:34" pos:end="177:37">file</name></expr></argument>, <argument pos:start="177:40" pos:end="177:44"><expr pos:start="177:40" pos:end="177:44"><name pos:start="177:40" pos:end="177:44">false</name></expr></argument>,

                          <argument pos:start="179:27" pos:end="179:54"><expr pos:start="179:27" pos:end="179:54"><call pos:start="179:27" pos:end="179:54"><name pos:start="179:27" pos:end="179:37">le64_to_cpu</name><argument_list pos:start="179:38" pos:end="179:54">(<argument pos:start="179:39" pos:end="179:53"><expr pos:start="179:39" pos:end="179:53"><name pos:start="179:39" pos:end="179:53"><name pos:start="179:39" pos:end="179:44">header</name><operator pos:start="179:45" pos:end="179:45">.</operator><name pos:start="179:46" pos:end="179:53">capacity</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="181:27" pos:end="181:60"><expr pos:start="181:27" pos:end="181:60"><call pos:start="181:27" pos:end="181:55"><name pos:start="181:27" pos:end="181:37">le64_to_cpu</name><argument_list pos:start="181:38" pos:end="181:55">(<argument pos:start="181:39" pos:end="181:54"><expr pos:start="181:39" pos:end="181:54"><name pos:start="181:39" pos:end="181:54"><name pos:start="181:39" pos:end="181:44">header</name><operator pos:start="181:45" pos:end="181:45">.</operator><name pos:start="181:46" pos:end="181:54">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="181:57" pos:end="181:58">&lt;&lt;</operator> <literal type="number" pos:start="181:60" pos:end="181:60">9</literal></expr></argument>,

                          <argument pos:start="183:27" pos:end="183:42"><expr pos:start="183:27" pos:end="183:42"><name pos:start="183:27" pos:end="183:42">l1_backup_offset</name></expr></argument>,

                          <argument pos:start="185:27" pos:end="185:33"><expr pos:start="185:27" pos:end="185:33"><name pos:start="185:27" pos:end="185:33">l1_size</name></expr></argument>,

                          <argument pos:start="187:27" pos:end="187:62"><expr pos:start="187:27" pos:end="187:62"><call pos:start="187:27" pos:end="187:62"><name pos:start="187:27" pos:end="187:37">le32_to_cpu</name><argument_list pos:start="187:38" pos:end="187:62">(<argument pos:start="187:39" pos:end="187:61"><expr pos:start="187:39" pos:end="187:61"><name pos:start="187:39" pos:end="187:61"><name pos:start="187:39" pos:end="187:44">header</name><operator pos:start="187:45" pos:end="187:45">.</operator><name pos:start="187:46" pos:end="187:61">num_gtes_per_gte</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="189:27" pos:end="189:57"><expr pos:start="189:27" pos:end="189:57"><call pos:start="189:27" pos:end="189:57"><name pos:start="189:27" pos:end="189:37">le64_to_cpu</name><argument_list pos:start="189:38" pos:end="189:57">(<argument pos:start="189:39" pos:end="189:56"><expr pos:start="189:39" pos:end="189:56"><name pos:start="189:39" pos:end="189:56"><name pos:start="189:39" pos:end="189:44">header</name><operator pos:start="189:45" pos:end="189:45">.</operator><name pos:start="189:46" pos:end="189:56">granularity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="193:75"><expr pos:start="191:5" pos:end="193:74"><name pos:start="191:5" pos:end="191:22"><name pos:start="191:5" pos:end="191:10">extent</name><operator pos:start="191:11" pos:end="191:12">-&gt;</operator><name pos:start="191:13" pos:end="191:22">compressed</name></name> <operator pos:start="191:24" pos:end="191:24">=</operator>

        <call pos:start="193:9" pos:end="193:45"><name pos:start="193:9" pos:end="193:19">le16_to_cpu</name><argument_list pos:start="193:20" pos:end="193:45">(<argument pos:start="193:21" pos:end="193:44"><expr pos:start="193:21" pos:end="193:44"><name pos:start="193:21" pos:end="193:44"><name pos:start="193:21" pos:end="193:26">header</name><operator pos:start="193:27" pos:end="193:27">.</operator><name pos:start="193:28" pos:end="193:44">compressAlgorithm</name></name></expr></argument>)</argument_list></call> <operator pos:start="193:47" pos:end="193:48">==</operator> <name pos:start="193:50" pos:end="193:74">VMDK4_COMPRESSION_DEFLATE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:71"><expr pos:start="195:5" pos:end="195:70"><name pos:start="195:5" pos:end="195:22"><name pos:start="195:5" pos:end="195:10">extent</name><operator pos:start="195:11" pos:end="195:12">-&gt;</operator><name pos:start="195:13" pos:end="195:22">has_marker</name></name> <operator pos:start="195:24" pos:end="195:24">=</operator> <call pos:start="195:26" pos:end="195:50"><name pos:start="195:26" pos:end="195:36">le32_to_cpu</name><argument_list pos:start="195:37" pos:end="195:50">(<argument pos:start="195:38" pos:end="195:49"><expr pos:start="195:38" pos:end="195:49"><name pos:start="195:38" pos:end="195:49"><name pos:start="195:38" pos:end="195:43">header</name><operator pos:start="195:44" pos:end="195:44">.</operator><name pos:start="195:45" pos:end="195:49">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="195:52" pos:end="195:52">&amp;</operator> <name pos:start="195:54" pos:end="195:70">VMDK4_FLAG_MARKER</name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:50"><expr pos:start="197:5" pos:end="197:49"><name pos:start="197:5" pos:end="197:19"><name pos:start="197:5" pos:end="197:10">extent</name><operator pos:start="197:11" pos:end="197:12">-&gt;</operator><name pos:start="197:13" pos:end="197:19">version</name></name> <operator pos:start="197:21" pos:end="197:21">=</operator> <call pos:start="197:23" pos:end="197:49"><name pos:start="197:23" pos:end="197:33">le32_to_cpu</name><argument_list pos:start="197:34" pos:end="197:49">(<argument pos:start="197:35" pos:end="197:48"><expr pos:start="197:35" pos:end="197:48"><name pos:start="197:35" pos:end="197:48"><name pos:start="197:35" pos:end="197:40">header</name><operator pos:start="197:41" pos:end="197:41">.</operator><name pos:start="197:42" pos:end="197:48">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:79"><expr pos:start="199:5" pos:end="199:78"><name pos:start="199:5" pos:end="199:26"><name pos:start="199:5" pos:end="199:10">extent</name><operator pos:start="199:11" pos:end="199:12">-&gt;</operator><name pos:start="199:13" pos:end="199:26">has_zero_grain</name></name> <operator pos:start="199:28" pos:end="199:28">=</operator> <call pos:start="199:30" pos:end="199:54"><name pos:start="199:30" pos:end="199:40">le32_to_cpu</name><argument_list pos:start="199:41" pos:end="199:54">(<argument pos:start="199:42" pos:end="199:53"><expr pos:start="199:42" pos:end="199:53"><name pos:start="199:42" pos:end="199:53"><name pos:start="199:42" pos:end="199:47">header</name><operator pos:start="199:48" pos:end="199:48">.</operator><name pos:start="199:49" pos:end="199:53">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="199:56" pos:end="199:56">&amp;</operator> <name pos:start="199:58" pos:end="199:78">VMDK4_FLAG_ZERO_GRAIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:39"><expr pos:start="201:5" pos:end="201:38"><name pos:start="201:5" pos:end="201:7">ret</name> <operator pos:start="201:9" pos:end="201:9">=</operator> <call pos:start="201:11" pos:end="201:38"><name pos:start="201:11" pos:end="201:26">vmdk_init_tables</name><argument_list pos:start="201:27" pos:end="201:38">(<argument pos:start="201:28" pos:end="201:29"><expr pos:start="201:28" pos:end="201:29"><name pos:start="201:28" pos:end="201:29">bs</name></expr></argument>, <argument pos:start="201:32" pos:end="201:37"><expr pos:start="201:32" pos:end="201:37"><name pos:start="201:32" pos:end="201:37">extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="209:5"><if pos:start="203:5" pos:end="209:5">if <condition pos:start="203:8" pos:end="203:12">(<expr pos:start="203:9" pos:end="203:11"><name pos:start="203:9" pos:end="203:11">ret</name></expr>)</condition> <block pos:start="203:14" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:34">

        <comment type="block" pos:start="205:9" pos:end="205:54">/* free extent allocated by vmdk_add_extent */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:34"><expr pos:start="207:9" pos:end="207:33"><call pos:start="207:9" pos:end="207:33"><name pos:start="207:9" pos:end="207:29">vmdk_free_last_extent</name><argument_list pos:start="207:30" pos:end="207:33">(<argument pos:start="207:31" pos:end="207:32"><expr pos:start="207:31" pos:end="207:32"><name pos:start="207:31" pos:end="207:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="211:5" pos:end="211:15">return <expr pos:start="211:12" pos:end="211:14"><name pos:start="211:12" pos:end="211:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
