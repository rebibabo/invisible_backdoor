<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13799.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:16">srst</name>)<parameter_list pos:start="1:18" pos:end="1:63">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><name pos:start="1:19" pos:end="1:31">CPUS390XState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:49">r1</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:62">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:36">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">uintptr_t</name></type> <name pos:start="5:15" pos:end="5:16">ra</name> <init pos:start="5:18" pos:end="5:26">= <expr pos:start="5:20" pos:end="5:26"><call pos:start="5:20" pos:end="5:26"><name pos:start="5:20" pos:end="5:24">GETPC</name><argument_list pos:start="5:25" pos:end="5:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">end</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:21">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:13">v</name></decl>, <decl pos:start="11:16" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:16" pos:end="11:16">c</name> <init pos:start="11:18" pos:end="11:31">= <expr pos:start="11:20" pos:end="11:31"><name pos:start="11:20" pos:end="11:31"><name pos:start="11:20" pos:end="11:22">env</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:28">regs</name><index pos:start="11:29" pos:end="11:31">[<expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:41">/* Bits 32-55 must contain all 0.  */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:11">env</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:17">regs</name><index pos:start="17:18" pos:end="17:20">[<expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>]</index></name> <operator pos:start="17:22" pos:end="17:22">&amp;</operator> <literal type="number" pos:start="17:24" pos:end="17:34">0xffffff00u</literal></expr>)</condition> <block pos:start="17:37" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:53">

        <expr_stmt pos:start="19:9" pos:end="19:48"><expr pos:start="19:9" pos:end="19:47"><call pos:start="19:9" pos:end="19:47"><name pos:start="19:9" pos:end="19:25">cpu_restore_state</name><argument_list pos:start="19:26" pos:end="19:47">(<argument pos:start="19:27" pos:end="19:42"><expr pos:start="19:27" pos:end="19:42"><call pos:start="19:27" pos:end="19:42"><name pos:start="19:27" pos:end="19:37">ENV_GET_CPU</name><argument_list pos:start="19:38" pos:end="19:42">(<argument pos:start="19:39" pos:end="19:41"><expr pos:start="19:39" pos:end="19:41"><name pos:start="19:39" pos:end="19:41">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:45" pos:end="19:46"><expr pos:start="19:45" pos:end="19:46"><name pos:start="19:45" pos:end="19:46">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><call pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:25">program_interrupt</name><argument_list pos:start="21:26" pos:end="21:52">(<argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><name pos:start="21:27" pos:end="21:29">env</name></expr></argument>, <argument pos:start="21:32" pos:end="21:48"><expr pos:start="21:32" pos:end="21:48"><name pos:start="21:32" pos:end="21:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="21:51" pos:end="21:51"><expr pos:start="21:51" pos:end="21:51"><literal type="number" pos:start="21:51" pos:end="21:51">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:7">str</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:30"><name pos:start="27:11" pos:end="27:21">get_address</name><argument_list pos:start="27:22" pos:end="27:30">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">env</name></expr></argument>, <argument pos:start="27:28" pos:end="27:29"><expr pos:start="27:28" pos:end="27:29"><name pos:start="27:28" pos:end="27:29">r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:7">end</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:30"><name pos:start="29:11" pos:end="29:21">get_address</name><argument_list pos:start="29:22" pos:end="29:30">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">env</name></expr></argument>, <argument pos:start="29:28" pos:end="29:29"><expr pos:start="29:28" pos:end="29:29"><name pos:start="29:28" pos:end="29:29">r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="35:73">/* Lest we fail to service interrupts in a timely manner, limit the

       amount of work we're willing to do.  For now, let's cap at 8k.  */</comment>

    <for pos:start="37:5" pos:end="63:5">for <control pos:start="37:9" pos:end="37:38">(<init pos:start="37:10" pos:end="37:17"><expr pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:12">len</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</init> <condition pos:start="37:19" pos:end="37:31"><expr pos:start="37:19" pos:end="37:30"><name pos:start="37:19" pos:end="37:21">len</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <literal type="number" pos:start="37:25" pos:end="37:30">0x2000</literal></expr>;</condition> <incr pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><operator pos:start="37:33" pos:end="37:34">++</operator><name pos:start="37:35" pos:end="37:37">len</name></expr></incr>)</control> <block pos:start="37:40" pos:end="63:5">{<block_content pos:start="39:9" pos:end="61:9">

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:29">(<expr pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:15">str</name> <operator pos:start="39:17" pos:end="39:17">+</operator> <name pos:start="39:19" pos:end="39:21">len</name> <operator pos:start="39:23" pos:end="39:24">==</operator> <name pos:start="39:26" pos:end="39:28">end</name></expr>)</condition> <block pos:start="39:31" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:19">

            <comment type="block" pos:start="41:13" pos:end="41:64">/* Character not found.  R1 &amp; R2 are unmodified.  */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:15">env</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:22">cc_op</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">2</literal></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:9">v</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:48"><name pos:start="49:13" pos:end="49:28">cpu_ldub_data_ra</name><argument_list pos:start="49:29" pos:end="49:48">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">env</name></expr></argument>, <argument pos:start="49:35" pos:end="49:43"><expr pos:start="49:35" pos:end="49:43"><name pos:start="49:35" pos:end="49:37">str</name> <operator pos:start="49:39" pos:end="49:39">+</operator> <name pos:start="49:41" pos:end="49:43">len</name></expr></argument>, <argument pos:start="49:46" pos:end="49:47"><expr pos:start="49:46" pos:end="49:47"><name pos:start="49:46" pos:end="49:47">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="61:9"><if pos:start="51:9" pos:end="61:9">if <condition pos:start="51:12" pos:end="51:19">(<expr pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:13">v</name> <operator pos:start="51:15" pos:end="51:16">==</operator> <name pos:start="51:18" pos:end="51:18">c</name></expr>)</condition> <block pos:start="51:21" pos:end="61:9">{<block_content pos:start="55:13" pos:end="59:19">

            <comment type="block" pos:start="53:13" pos:end="53:78">/* Character found.  Set R1 to the location; R2 is unmodified.  */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:15">env</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:22">cc_op</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <literal type="number" pos:start="55:26" pos:end="55:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:44"><expr pos:start="57:13" pos:end="57:43"><call pos:start="57:13" pos:end="57:43"><name pos:start="57:13" pos:end="57:23">set_address</name><argument_list pos:start="57:24" pos:end="57:43">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">env</name></expr></argument>, <argument pos:start="57:30" pos:end="57:31"><expr pos:start="57:30" pos:end="57:31"><name pos:start="57:30" pos:end="57:31">r1</name></expr></argument>, <argument pos:start="57:34" pos:end="57:42"><expr pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:36">str</name> <operator pos:start="57:38" pos:end="57:38">+</operator> <name pos:start="57:40" pos:end="57:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="67:5" pos:end="67:79">/* CPU-determined bytes processed.  Advance R2 to next byte to process.  */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:19"><expr pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:7">env</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:14">cc_op</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><call pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:15">set_address</name><argument_list pos:start="71:16" pos:end="71:35">(<argument pos:start="71:17" pos:end="71:19"><expr pos:start="71:17" pos:end="71:19"><name pos:start="71:17" pos:end="71:19">env</name></expr></argument>, <argument pos:start="71:22" pos:end="71:23"><expr pos:start="71:22" pos:end="71:23"><name pos:start="71:22" pos:end="71:23">r2</name></expr></argument>, <argument pos:start="71:26" pos:end="71:34"><expr pos:start="71:26" pos:end="71:34"><name pos:start="71:26" pos:end="71:28">str</name> <operator pos:start="71:30" pos:end="71:30">+</operator> <name pos:start="71:32" pos:end="71:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
