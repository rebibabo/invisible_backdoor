<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1505.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">spapr_cpu_core_realize</name><parameter_list pos:start="1:35" pos:end="1:66">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:46">DeviceState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dev</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:58">Error</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="11:5" pos:end="145:37">

    <comment type="block" pos:start="5:5" pos:end="9:7">/* We don't use SPAPR_MACHINE() in order to exit gracefully if the user

     * tries to add a sPAPR CPU core to a non-pseries machine.

     */</comment>

    <decl_stmt pos:start="11:5" pos:end="15:70"><decl pos:start="11:5" pos:end="15:69"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">sPAPRMachineState</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:28">spapr</name> <init pos:start="11:30" pos:end="15:69">=

        <expr pos:start="13:9" pos:end="15:69"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:26">sPAPRMachineState</name> <operator pos:start="13:28" pos:end="13:28">*</operator><operator pos:start="13:29" pos:end="13:29">)</operator> <call pos:start="13:31" pos:end="15:69"><name pos:start="13:31" pos:end="13:49">object_dynamic_cast</name><argument_list pos:start="13:50" pos:end="15:69">(<argument pos:start="13:51" pos:end="13:68"><expr pos:start="13:51" pos:end="13:68"><call pos:start="13:51" pos:end="13:68"><name pos:start="13:51" pos:end="13:66">qdev_get_machine</name><argument_list pos:start="13:67" pos:end="13:68">()</argument_list></call></expr></argument>,

                                                  <argument pos:start="15:51" pos:end="15:68"><expr pos:start="15:51" pos:end="15:68"><name pos:start="15:51" pos:end="15:68">TYPE_SPAPR_MACHINE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:51"><decl pos:start="17:5" pos:end="17:50"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">sPAPRCPUCore</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:20">sc</name> <init pos:start="17:22" pos:end="17:50">= <expr pos:start="17:24" pos:end="17:50"><call pos:start="17:24" pos:end="17:50"><name pos:start="17:24" pos:end="17:37">SPAPR_CPU_CORE</name><argument_list pos:start="17:38" pos:end="17:50">(<argument pos:start="17:39" pos:end="17:49"><expr pos:start="17:39" pos:end="17:49"><call pos:start="17:39" pos:end="17:49"><name pos:start="17:39" pos:end="17:44">OBJECT</name><argument_list pos:start="17:45" pos:end="17:49">(<argument pos:start="17:46" pos:end="17:48"><expr pos:start="17:46" pos:end="17:48"><name pos:start="17:46" pos:end="17:48">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:67"><decl pos:start="19:5" pos:end="19:66"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">sPAPRCPUCoreClass</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:26">scc</name> <init pos:start="19:28" pos:end="19:66">= <expr pos:start="19:30" pos:end="19:66"><call pos:start="19:30" pos:end="19:66"><name pos:start="19:30" pos:end="19:53">SPAPR_CPU_CORE_GET_CLASS</name><argument_list pos:start="19:54" pos:end="19:66">(<argument pos:start="19:55" pos:end="19:65"><expr pos:start="19:55" pos:end="19:65"><call pos:start="19:55" pos:end="19:65"><name pos:start="19:55" pos:end="19:60">OBJECT</name><argument_list pos:start="19:61" pos:end="19:65">(<argument pos:start="19:62" pos:end="19:64"><expr pos:start="19:62" pos:end="19:64"><name pos:start="19:62" pos:end="19:64">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">CPUCore</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:15">cc</name> <init pos:start="21:17" pos:end="21:39">= <expr pos:start="21:19" pos:end="21:39"><call pos:start="21:19" pos:end="21:39"><name pos:start="21:19" pos:end="21:26">CPU_CORE</name><argument_list pos:start="21:27" pos:end="21:39">(<argument pos:start="21:28" pos:end="21:38"><expr pos:start="21:28" pos:end="21:38"><call pos:start="21:28" pos:end="21:38"><name pos:start="21:28" pos:end="21:33">OBJECT</name><argument_list pos:start="21:34" pos:end="21:38">(<argument pos:start="21:35" pos:end="21:37"><expr pos:start="21:35" pos:end="21:37"><name pos:start="21:35" pos:end="21:37">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:15">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">Error</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:20">local_err</name> <init pos:start="25:22" pos:end="25:27">= <expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:14"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:8">void</name> <modifier pos:start="27:10" pos:end="27:10">*</modifier></type><name pos:start="27:11" pos:end="27:13">obj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:13"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>, <decl pos:start="29:12" pos:end="29:12"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:12">j</name></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:15">(<expr pos:start="33:9" pos:end="33:14"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:14">spapr</name></expr>)</condition> <block pos:start="33:17" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><call pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:72">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:71"><expr pos:start="35:26" pos:end="35:71"><name pos:start="35:26" pos:end="35:44">TYPE_SPAPR_CPU_CORE</name> <literal type="string" pos:start="35:46" pos:end="35:71">" needs a pseries machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:56"><expr pos:start="43:5" pos:end="43:55"><name pos:start="43:5" pos:end="43:8">size</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <call pos:start="43:12" pos:end="43:55"><name pos:start="43:12" pos:end="43:40">object_type_get_instance_size</name><argument_list pos:start="43:41" pos:end="43:55">(<argument pos:start="43:42" pos:end="43:54"><expr pos:start="43:42" pos:end="43:54"><name pos:start="43:42" pos:end="43:54"><name pos:start="43:42" pos:end="43:44">scc</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:54">cpu_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:51"><expr pos:start="45:5" pos:end="45:50"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:6">sc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:15">threads</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:50"><name pos:start="45:19" pos:end="45:27">g_malloc0</name><argument_list pos:start="45:28" pos:end="45:50">(<argument pos:start="45:29" pos:end="45:49"><expr pos:start="45:29" pos:end="45:49"><name pos:start="45:29" pos:end="45:32">size</name> <operator pos:start="45:34" pos:end="45:34">*</operator> <name pos:start="45:36" pos:end="45:49"><name pos:start="45:36" pos:end="45:37">cc</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:49">nr_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="109:5">for <control pos:start="47:9" pos:end="47:40">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:35"><expr pos:start="47:17" pos:end="47:34"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <name pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:22">cc</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:34">nr_threads</name></name></expr>;</condition> <incr pos:start="47:37" pos:end="47:39"><expr pos:start="47:37" pos:end="47:39"><name pos:start="47:37" pos:end="47:37">i</name><operator pos:start="47:38" pos:end="47:39">++</operator></expr></incr>)</control> <block pos:start="47:42" pos:end="109:5">{<block_content pos:start="49:9" pos:end="107:26">

        <decl_stmt pos:start="49:9" pos:end="49:20"><decl pos:start="49:9" pos:end="49:19"><type pos:start="49:9" pos:end="49:12"><name pos:start="49:9" pos:end="49:12">char</name></type> <name pos:start="49:14" pos:end="49:19"><name pos:start="49:14" pos:end="49:15">id</name><index pos:start="49:16" pos:end="49:19">[<expr pos:start="49:17" pos:end="49:18"><literal type="number" pos:start="49:17" pos:end="49:18">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:21"><decl pos:start="51:9" pos:end="51:20"><type pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:16">CPUState</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:20">cs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:24"><decl pos:start="53:9" pos:end="53:23"><type pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:18">PowerPCCPU</name> <modifier pos:start="53:20" pos:end="53:20">*</modifier></type><name pos:start="53:21" pos:end="53:23">cpu</name></decl>;</decl_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:11">obj</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:25"><name pos:start="57:15" pos:end="57:16">sc</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:25">threads</name></name> <operator pos:start="57:27" pos:end="57:27">+</operator> <name pos:start="57:29" pos:end="57:29">i</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <name pos:start="57:33" pos:end="57:36">size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:52"><expr pos:start="61:9" pos:end="61:51"><call pos:start="61:9" pos:end="61:51"><name pos:start="61:9" pos:end="61:25">object_initialize</name><argument_list pos:start="61:26" pos:end="61:51">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">obj</name></expr></argument>, <argument pos:start="61:32" pos:end="61:35"><expr pos:start="61:32" pos:end="61:35"><name pos:start="61:32" pos:end="61:35">size</name></expr></argument>, <argument pos:start="61:38" pos:end="61:50"><expr pos:start="61:38" pos:end="61:50"><name pos:start="61:38" pos:end="61:50"><name pos:start="61:38" pos:end="61:40">scc</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:50">cpu_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:10">cs</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:21"><name pos:start="63:14" pos:end="63:16">CPU</name><argument_list pos:start="63:17" pos:end="63:21">(<argument pos:start="63:18" pos:end="63:20"><expr pos:start="63:18" pos:end="63:20"><name pos:start="63:18" pos:end="63:20">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:11">cpu</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:29"><name pos:start="65:15" pos:end="65:25">POWERPC_CPU</name><argument_list pos:start="65:26" pos:end="65:29">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:10">cs</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:21">cpu_index</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:35"><name pos:start="67:25" pos:end="67:26">cc</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:35">core_id</name></name> <operator pos:start="67:37" pos:end="67:37">+</operator> <name pos:start="67:39" pos:end="67:39">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:69"><expr pos:start="69:9" pos:end="69:68"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:11">cpu</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:20">vcpu_id</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <operator pos:start="69:24" pos:end="69:24">(</operator><name pos:start="69:25" pos:end="69:35"><name pos:start="69:25" pos:end="69:26">cc</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:35">core_id</name></name> <operator pos:start="69:37" pos:end="69:37">*</operator> <name pos:start="69:39" pos:end="69:49"><name pos:start="69:39" pos:end="69:43">spapr</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:49">vsmt</name></name> <operator pos:start="69:51" pos:end="69:51">/</operator> <name pos:start="69:53" pos:end="69:63">smp_threads</name><operator pos:start="69:64" pos:end="69:64">)</operator> <operator pos:start="69:66" pos:end="69:66">+</operator> <name pos:start="69:68" pos:end="69:68">i</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="85:9"><if pos:start="71:9" pos:end="85:9">if <condition pos:start="71:12" pos:end="71:65">(<expr pos:start="71:13" pos:end="71:64"><call pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:23">kvm_enabled</name><argument_list pos:start="71:24" pos:end="71:25">()</argument_list></call> <operator pos:start="71:27" pos:end="71:28">&amp;&amp;</operator> <operator pos:start="71:30" pos:end="71:30">!</operator><call pos:start="71:31" pos:end="71:64"><name pos:start="71:31" pos:end="71:50">kvm_vcpu_id_is_valid</name><argument_list pos:start="71:51" pos:end="71:64">(<argument pos:start="71:52" pos:end="71:63"><expr pos:start="71:52" pos:end="71:63"><name pos:start="71:52" pos:end="71:63"><name pos:start="71:52" pos:end="71:54">cpu</name><operator pos:start="71:55" pos:end="71:56">-&gt;</operator><name pos:start="71:57" pos:end="71:63">vcpu_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:67" pos:end="85:9">{<block_content pos:start="73:13" pos:end="83:21">

            <expr_stmt pos:start="73:13" pos:end="75:37"><expr pos:start="73:13" pos:end="75:36"><call pos:start="73:13" pos:end="75:36"><name pos:start="73:13" pos:end="73:22">error_setg</name><argument_list pos:start="73:23" pos:end="75:36">(<argument pos:start="73:24" pos:end="73:33"><expr pos:start="73:24" pos:end="73:33"><operator pos:start="73:24" pos:end="73:24">&amp;</operator><name pos:start="73:25" pos:end="73:33">local_err</name></expr></argument>, <argument pos:start="73:36" pos:end="73:71"><expr pos:start="73:36" pos:end="73:71"><literal type="string" pos:start="73:36" pos:end="73:71">"Can't create CPU with id %d in KVM"</literal></expr></argument>,

                       <argument pos:start="75:24" pos:end="75:35"><expr pos:start="75:24" pos:end="75:35"><name pos:start="75:24" pos:end="75:35"><name pos:start="75:24" pos:end="75:26">cpu</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:35">vcpu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="81:72"><expr pos:start="77:13" pos:end="81:71"><call pos:start="77:13" pos:end="81:71"><name pos:start="77:13" pos:end="77:29">error_append_hint</name><argument_list pos:start="77:30" pos:end="81:71">(<argument pos:start="77:31" pos:end="77:40"><expr pos:start="77:31" pos:end="77:40"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:40">local_err</name></expr></argument>, <argument pos:start="77:43" pos:end="79:80"><expr pos:start="77:43" pos:end="79:80"><literal type="string" pos:start="77:43" pos:end="77:76">"Adjust the number of cpus to %d "</literal>

                              <literal type="string" pos:start="79:31" pos:end="79:80">"or try to raise the number of threads per core\n"</literal></expr></argument>,

                              <argument pos:start="81:31" pos:end="81:70"><expr pos:start="81:31" pos:end="81:70"><name pos:start="81:31" pos:end="81:42"><name pos:start="81:31" pos:end="81:33">cpu</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:42">vcpu_id</name></name> <operator pos:start="81:44" pos:end="81:44">*</operator> <name pos:start="81:46" pos:end="81:56">smp_threads</name> <operator pos:start="81:58" pos:end="81:58">/</operator> <name pos:start="81:60" pos:end="81:70"><name pos:start="81:60" pos:end="81:64">spapr</name><operator pos:start="81:65" pos:end="81:66">-&gt;</operator><name pos:start="81:67" pos:end="81:70">vsmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:21">goto <name pos:start="83:18" pos:end="83:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>





        <comment type="block" pos:start="91:9" pos:end="91:61">/* Set NUMA node for the threads belonged to core  */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:35"><expr pos:start="93:9" pos:end="93:34"><name pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:11">cpu</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:20">node_id</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <name pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:25">sc</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:34">node_id</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:50"><expr pos:start="97:9" pos:end="97:49"><call pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:16">snprintf</name><argument_list pos:start="97:17" pos:end="97:49">(<argument pos:start="97:18" pos:end="97:19"><expr pos:start="97:18" pos:end="97:19"><name pos:start="97:18" pos:end="97:19">id</name></expr></argument>, <argument pos:start="97:22" pos:end="97:31"><expr pos:start="97:22" pos:end="97:31"><sizeof pos:start="97:22" pos:end="97:31">sizeof<argument_list pos:start="97:28" pos:end="97:31">(<argument pos:start="97:29" pos:end="97:30"><expr pos:start="97:29" pos:end="97:30"><name pos:start="97:29" pos:end="97:30">id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="97:34" pos:end="97:45"><expr pos:start="97:34" pos:end="97:45"><literal type="string" pos:start="97:34" pos:end="97:45">"thread[%d]"</literal></expr></argument>, <argument pos:start="97:48" pos:end="97:48"><expr pos:start="97:48" pos:end="97:48"><name pos:start="97:48" pos:end="97:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:67"><expr pos:start="99:9" pos:end="99:66"><call pos:start="99:9" pos:end="99:66"><name pos:start="99:9" pos:end="99:33">object_property_add_child</name><argument_list pos:start="99:34" pos:end="99:66">(<argument pos:start="99:35" pos:end="99:44"><expr pos:start="99:35" pos:end="99:44"><call pos:start="99:35" pos:end="99:44"><name pos:start="99:35" pos:end="99:40">OBJECT</name><argument_list pos:start="99:41" pos:end="99:44">(<argument pos:start="99:42" pos:end="99:43"><expr pos:start="99:42" pos:end="99:43"><name pos:start="99:42" pos:end="99:43">sc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:47" pos:end="99:48"><expr pos:start="99:47" pos:end="99:48"><name pos:start="99:47" pos:end="99:48">id</name></expr></argument>, <argument pos:start="99:51" pos:end="99:53"><expr pos:start="99:51" pos:end="99:53"><name pos:start="99:51" pos:end="99:53">obj</name></expr></argument>, <argument pos:start="99:56" pos:end="99:65"><expr pos:start="99:56" pos:end="99:65"><operator pos:start="99:56" pos:end="99:56">&amp;</operator><name pos:start="99:57" pos:end="99:65">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:22">(<expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:21">local_err</name></expr>)</condition> <block pos:start="101:24" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:21">

            <goto pos:start="103:13" pos:end="103:21">goto <name pos:start="103:18" pos:end="103:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:26"><expr pos:start="107:9" pos:end="107:25"><call pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:20">object_unref</name><argument_list pos:start="107:21" pos:end="107:25">(<argument pos:start="107:22" pos:end="107:24"><expr pos:start="107:22" pos:end="107:24"><name pos:start="107:22" pos:end="107:24">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="113:5" pos:end="127:5">for <control pos:start="113:9" pos:end="113:40">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">j</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:35"><expr pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:17">j</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <name pos:start="113:21" pos:end="113:34"><name pos:start="113:21" pos:end="113:22">cc</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:34">nr_threads</name></name></expr>;</condition> <incr pos:start="113:37" pos:end="113:39"><expr pos:start="113:37" pos:end="113:39"><name pos:start="113:37" pos:end="113:37">j</name><operator pos:start="113:38" pos:end="113:39">++</operator></expr></incr>)</control> <block pos:start="113:42" pos:end="127:5">{<block_content pos:start="115:9" pos:end="125:9">

        <expr_stmt pos:start="115:9" pos:end="115:37"><expr pos:start="115:9" pos:end="115:36"><name pos:start="115:9" pos:end="115:11">obj</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:25"><name pos:start="115:15" pos:end="115:16">sc</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:25">threads</name></name> <operator pos:start="115:27" pos:end="115:27">+</operator> <name pos:start="115:29" pos:end="115:29">j</name> <operator pos:start="115:31" pos:end="115:31">*</operator> <name pos:start="115:33" pos:end="115:36">size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:61"><expr pos:start="119:9" pos:end="119:60"><call pos:start="119:9" pos:end="119:60"><name pos:start="119:9" pos:end="119:36">spapr_cpu_core_realize_child</name><argument_list pos:start="119:37" pos:end="119:60">(<argument pos:start="119:38" pos:end="119:40"><expr pos:start="119:38" pos:end="119:40"><name pos:start="119:38" pos:end="119:40">obj</name></expr></argument>, <argument pos:start="119:43" pos:end="119:47"><expr pos:start="119:43" pos:end="119:47"><name pos:start="119:43" pos:end="119:47">spapr</name></expr></argument>, <argument pos:start="119:50" pos:end="119:59"><expr pos:start="119:50" pos:end="119:59"><operator pos:start="119:50" pos:end="119:50">&amp;</operator><name pos:start="119:51" pos:end="119:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:22">(<expr pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:21">local_err</name></expr>)</condition> <block pos:start="121:24" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:21">

            <goto pos:start="123:13" pos:end="123:21">goto <name pos:start="123:18" pos:end="123:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="129:5" pos:end="129:11">return;</return>



<label pos:start="133:1" pos:end="133:4"><name pos:start="133:1" pos:end="133:3">err</name>:</label>

    <while pos:start="135:5" pos:end="141:5">while <condition pos:start="135:11" pos:end="135:20">(<expr pos:start="135:12" pos:end="135:19"><operator pos:start="135:12" pos:end="135:13">--</operator><name pos:start="135:14" pos:end="135:14">i</name> <operator pos:start="135:16" pos:end="135:17">&gt;=</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>)</condition> <block pos:start="135:22" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:29">

        <expr_stmt pos:start="137:9" pos:end="137:37"><expr pos:start="137:9" pos:end="137:36"><name pos:start="137:9" pos:end="137:11">obj</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <name pos:start="137:15" pos:end="137:25"><name pos:start="137:15" pos:end="137:16">sc</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:25">threads</name></name> <operator pos:start="137:27" pos:end="137:27">+</operator> <name pos:start="137:29" pos:end="137:29">i</name> <operator pos:start="137:31" pos:end="137:31">*</operator> <name pos:start="137:33" pos:end="137:36">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:29"><expr pos:start="139:9" pos:end="139:28"><call pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:23">object_unparent</name><argument_list pos:start="139:24" pos:end="139:28">(<argument pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:27">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="143:5" pos:end="143:24"><expr pos:start="143:5" pos:end="143:23"><call pos:start="143:5" pos:end="143:23"><name pos:start="143:5" pos:end="143:10">g_free</name><argument_list pos:start="143:11" pos:end="143:23">(<argument pos:start="143:12" pos:end="143:22"><expr pos:start="143:12" pos:end="143:22"><name pos:start="143:12" pos:end="143:22"><name pos:start="143:12" pos:end="143:13">sc</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:22">threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:37"><expr pos:start="145:5" pos:end="145:36"><call pos:start="145:5" pos:end="145:36"><name pos:start="145:5" pos:end="145:19">error_propagate</name><argument_list pos:start="145:20" pos:end="145:36">(<argument pos:start="145:21" pos:end="145:24"><expr pos:start="145:21" pos:end="145:24"><name pos:start="145:21" pos:end="145:24">errp</name></expr></argument>, <argument pos:start="145:27" pos:end="145:35"><expr pos:start="145:27" pos:end="145:35"><name pos:start="145:27" pos:end="145:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
