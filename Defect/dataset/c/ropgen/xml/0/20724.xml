<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20724.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:36">adpcm_encode_init</name><parameter_list pos:start="1:37" pos:end="1:59">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:14">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">ADPCMEncodeContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:25">s</name> <init pos:start="5:27" pos:end="5:44">= <expr pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:33">avctx</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:22">extradata</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="13:18"><if pos:start="11:5" pos:end="13:18">if <condition pos:start="11:8" pos:end="11:28">(<expr pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:23">channels</name></name> <operator pos:start="11:25" pos:end="11:25">&gt;</operator> <literal type="number" pos:start="11:27" pos:end="11:27">2</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:18"><block_content pos:start="13:9" pos:end="13:18">

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="13:20" pos:end="13:47">/* only stereo or mono =) */</comment>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:57">(<expr pos:start="17:9" pos:end="17:56"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:22">trellis</name></name> <operator pos:start="17:24" pos:end="17:25">&amp;&amp;</operator> <operator pos:start="17:27" pos:end="17:27">(</operator><name pos:start="17:28" pos:end="17:35">unsigned</name><operator pos:start="17:36" pos:end="17:36">)</operator><name pos:start="17:37" pos:end="17:50"><name pos:start="17:37" pos:end="17:41">avctx</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:50">trellis</name></name> <operator pos:start="17:52" pos:end="17:52">&gt;</operator> <literal type="number" pos:start="17:54" pos:end="17:56">16U</literal></expr>)</condition> <block pos:start="17:59" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:62"><expr pos:start="19:9" pos:end="19:61"><call pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:61">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:60"><expr pos:start="19:37" pos:end="19:60"><literal type="string" pos:start="19:37" pos:end="19:60">"invalid trellis size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="49:5"><if pos:start="27:5" pos:end="49:5">if <condition pos:start="27:8" pos:end="27:23">(<expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:22">trellis</name></name></expr>)</condition> <block pos:start="27:25" pos:end="49:5">{<block_content pos:start="29:9" pos:end="47:66">

        <decl_stmt pos:start="29:9" pos:end="29:44"><decl pos:start="29:9" pos:end="29:43"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:20">frontier</name>  <init pos:start="29:23" pos:end="29:43">= <expr pos:start="29:25" pos:end="29:43"><literal type="number" pos:start="29:25" pos:end="29:25">1</literal> <operator pos:start="29:27" pos:end="29:28">&lt;&lt;</operator> <name pos:start="29:30" pos:end="29:43"><name pos:start="29:30" pos:end="29:34">avctx</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:43">trellis</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:52"><decl pos:start="31:9" pos:end="31:51"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:21">max_paths</name> <init pos:start="31:23" pos:end="31:51">=  <expr pos:start="31:26" pos:end="31:51"><name pos:start="31:26" pos:end="31:33">frontier</name> <operator pos:start="31:35" pos:end="31:35">*</operator> <name pos:start="31:37" pos:end="31:51">FREEZE_INTERVAL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="33:9" pos:end="35:63"><expr pos:start="33:9" pos:end="35:62"><call pos:start="33:9" pos:end="35:62"><name pos:start="33:9" pos:end="33:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="33:25" pos:end="35:62">(<argument pos:start="33:26" pos:end="33:30"><expr pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:30">avctx</name></expr></argument>, <argument pos:start="33:33" pos:end="33:40"><expr pos:start="33:33" pos:end="33:40"><name pos:start="33:33" pos:end="33:40"><name pos:start="33:33" pos:end="33:33">s</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:40">paths</name></name></expr></argument>,

                         <argument pos:start="35:26" pos:end="35:54"><expr pos:start="35:26" pos:end="35:54"><name pos:start="35:26" pos:end="35:34">max_paths</name> <operator pos:start="35:36" pos:end="35:36">*</operator> <sizeof pos:start="35:38" pos:end="35:54">sizeof<argument_list pos:start="35:44" pos:end="35:54">(<argument pos:start="35:45" pos:end="35:53"><expr pos:start="35:45" pos:end="35:53"><operator pos:start="35:45" pos:end="35:45">*</operator><name pos:start="35:46" pos:end="35:53"><name pos:start="35:46" pos:end="35:46">s</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:53">paths</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:57" pos:end="35:61"><expr pos:start="35:57" pos:end="35:61"><name pos:start="35:57" pos:end="35:61">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:70"><expr pos:start="37:9" pos:end="39:69"><call pos:start="37:9" pos:end="39:69"><name pos:start="37:9" pos:end="37:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="37:25" pos:end="39:69">(<argument pos:start="37:26" pos:end="37:30"><expr pos:start="37:26" pos:end="37:30"><name pos:start="37:26" pos:end="37:30">avctx</name></expr></argument>, <argument pos:start="37:33" pos:end="37:43"><expr pos:start="37:33" pos:end="37:43"><name pos:start="37:33" pos:end="37:43"><name pos:start="37:33" pos:end="37:33">s</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:43">node_buf</name></name></expr></argument>,

                         <argument pos:start="39:26" pos:end="39:60"><expr pos:start="39:26" pos:end="39:60"><literal type="number" pos:start="39:26" pos:end="39:26">2</literal> <operator pos:start="39:28" pos:end="39:28">*</operator> <name pos:start="39:30" pos:end="39:37">frontier</name> <operator pos:start="39:39" pos:end="39:39">*</operator> <sizeof pos:start="39:41" pos:end="39:60">sizeof<argument_list pos:start="39:47" pos:end="39:60">(<argument pos:start="39:48" pos:end="39:59"><expr pos:start="39:48" pos:end="39:59"><operator pos:start="39:48" pos:end="39:48">*</operator><name pos:start="39:49" pos:end="39:59"><name pos:start="39:49" pos:end="39:49">s</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:59">node_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,  <argument pos:start="39:64" pos:end="39:68"><expr pos:start="39:64" pos:end="39:68"><name pos:start="39:64" pos:end="39:68">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="43:70"><expr pos:start="41:9" pos:end="43:69"><call pos:start="41:9" pos:end="43:69"><name pos:start="41:9" pos:end="41:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="41:25" pos:end="43:69">(<argument pos:start="41:26" pos:end="41:30"><expr pos:start="41:26" pos:end="41:30"><name pos:start="41:26" pos:end="41:30">avctx</name></expr></argument>, <argument pos:start="41:33" pos:end="41:44"><expr pos:start="41:33" pos:end="41:44"><name pos:start="41:33" pos:end="41:44"><name pos:start="41:33" pos:end="41:33">s</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:44">nodep_buf</name></name></expr></argument>,

                         <argument pos:start="43:26" pos:end="43:61"><expr pos:start="43:26" pos:end="43:61"><literal type="number" pos:start="43:26" pos:end="43:26">2</literal> <operator pos:start="43:28" pos:end="43:28">*</operator> <name pos:start="43:30" pos:end="43:37">frontier</name> <operator pos:start="43:39" pos:end="43:39">*</operator> <sizeof pos:start="43:41" pos:end="43:61">sizeof<argument_list pos:start="43:47" pos:end="43:61">(<argument pos:start="43:48" pos:end="43:60"><expr pos:start="43:48" pos:end="43:60"><operator pos:start="43:48" pos:end="43:48">*</operator><name pos:start="43:49" pos:end="43:60"><name pos:start="43:49" pos:end="43:49">s</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:60">nodep_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="43:64" pos:end="43:68"><expr pos:start="43:64" pos:end="43:68"><name pos:start="43:64" pos:end="43:68">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:66"><expr pos:start="45:9" pos:end="47:65"><call pos:start="45:9" pos:end="47:65"><name pos:start="45:9" pos:end="45:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="45:25" pos:end="47:65">(<argument pos:start="45:26" pos:end="45:30"><expr pos:start="45:26" pos:end="45:30"><name pos:start="45:26" pos:end="45:30">avctx</name></expr></argument>, <argument pos:start="45:33" pos:end="45:47"><expr pos:start="45:33" pos:end="45:47"><name pos:start="45:33" pos:end="45:47"><name pos:start="45:33" pos:end="45:33">s</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:47">trellis_hash</name></name></expr></argument>,

                         <argument pos:start="47:26" pos:end="47:57"><expr pos:start="47:26" pos:end="47:57"><literal type="number" pos:start="47:26" pos:end="47:30">65536</literal> <operator pos:start="47:32" pos:end="47:32">*</operator> <sizeof pos:start="47:34" pos:end="47:57">sizeof<argument_list pos:start="47:40" pos:end="47:57">(<argument pos:start="47:41" pos:end="47:56"><expr pos:start="47:41" pos:end="47:56"><operator pos:start="47:41" pos:end="47:41">*</operator><name pos:start="47:42" pos:end="47:56"><name pos:start="47:42" pos:end="47:42">s</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:56">trellis_hash</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:60" pos:end="47:64"><expr pos:start="47:60" pos:end="47:64"><name pos:start="47:60" pos:end="47:64">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:76"><expr pos:start="53:5" pos:end="53:75"><name pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:9">avctx</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:32">bits_per_coded_sample</name></name> <operator pos:start="53:34" pos:end="53:34">=</operator> <call pos:start="53:36" pos:end="53:75"><name pos:start="53:36" pos:end="53:57">av_get_bits_per_sample</name><argument_list pos:start="53:58" pos:end="53:75">(<argument pos:start="53:59" pos:end="53:74"><expr pos:start="53:59" pos:end="53:74"><name pos:start="53:59" pos:end="53:74"><name pos:start="53:59" pos:end="53:63">avctx</name><operator pos:start="53:64" pos:end="53:65">-&gt;</operator><name pos:start="53:66" pos:end="53:70">codec</name><operator pos:start="53:71" pos:end="53:72">-&gt;</operator><name pos:start="53:73" pos:end="53:74">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="57:5" pos:end="153:5">switch <condition pos:start="57:12" pos:end="57:29">(<expr pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:17">avctx</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:24">codec</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:28">id</name></name></expr>)</condition> <block pos:start="57:31" pos:end="153:5">{<block_content pos:start="59:5" pos:end="151:19">

    <case pos:start="59:5" pos:end="59:32">case <expr pos:start="59:10" pos:end="59:31"><name pos:start="59:10" pos:end="59:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <comment type="block" pos:start="61:9" pos:end="63:54">/* each 16 bits sample gives one nibble

           and we have 4 bytes per channel overhead */</comment>

        <expr_stmt pos:start="65:9" pos:end="67:54"><expr pos:start="65:9" pos:end="67:53"><name pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:13">avctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:25">frame_size</name></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:36">BLKSIZE</name> <operator pos:start="65:38" pos:end="65:38">-</operator> <literal type="number" pos:start="65:40" pos:end="65:40">4</literal> <operator pos:start="65:42" pos:end="65:42">*</operator> <name pos:start="65:44" pos:end="65:58"><name pos:start="65:44" pos:end="65:48">avctx</name><operator pos:start="65:49" pos:end="65:50">-&gt;</operator><name pos:start="65:51" pos:end="65:58">channels</name></name><operator pos:start="65:59" pos:end="65:59">)</operator> <operator pos:start="65:61" pos:end="65:61">*</operator> <literal type="number" pos:start="65:63" pos:end="65:63">8</literal> <operator pos:start="65:65" pos:end="65:65">/</operator>

                            <operator pos:start="67:29" pos:end="67:29">(</operator><literal type="number" pos:start="67:30" pos:end="67:30">4</literal> <operator pos:start="67:32" pos:end="67:32">*</operator> <name pos:start="67:34" pos:end="67:48"><name pos:start="67:34" pos:end="67:38">avctx</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:48">channels</name></name><operator pos:start="67:49" pos:end="67:49">)</operator> <operator pos:start="67:51" pos:end="67:51">+</operator> <literal type="number" pos:start="67:53" pos:end="67:53">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="69:9" pos:end="71:44">/* seems frame_size isn't taken into account...

           have to buffer the samples :-( */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:26">block_align</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <name pos:start="73:30" pos:end="73:36">BLKSIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:36">bits_per_coded_sample</name></name> <operator pos:start="75:38" pos:end="75:38">=</operator> <literal type="number" pos:start="75:40" pos:end="75:40">4</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:31">case <expr pos:start="79:10" pos:end="79:30"><name pos:start="79:10" pos:end="79:30">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:25">frame_size</name></name>  <operator pos:start="81:28" pos:end="81:28">=</operator> <literal type="number" pos:start="81:30" pos:end="81:31">64</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:50"><expr pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:13">avctx</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:26">block_align</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <literal type="number" pos:start="83:30" pos:end="83:31">34</literal> <operator pos:start="83:33" pos:end="83:33">*</operator> <name pos:start="83:35" pos:end="83:49"><name pos:start="83:35" pos:end="83:39">avctx</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:49">channels</name></name></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:27">case <expr pos:start="87:10" pos:end="87:26"><name pos:start="87:10" pos:end="87:26">CODEC_ID_ADPCM_MS</name></expr>:</case>

        <comment type="block" pos:start="89:9" pos:end="91:54">/* each 16 bits sample gives one nibble

           and we have 7 bytes per channel overhead */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:86"><expr pos:start="93:9" pos:end="93:85"><name pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:13">avctx</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:25">frame_size</name></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <operator pos:start="93:29" pos:end="93:29">(</operator><name pos:start="93:30" pos:end="93:36">BLKSIZE</name> <operator pos:start="93:38" pos:end="93:38">-</operator> <literal type="number" pos:start="93:40" pos:end="93:40">7</literal> <operator pos:start="93:42" pos:end="93:42">*</operator> <name pos:start="93:44" pos:end="93:58"><name pos:start="93:44" pos:end="93:48">avctx</name><operator pos:start="93:49" pos:end="93:50">-&gt;</operator><name pos:start="93:51" pos:end="93:58">channels</name></name><operator pos:start="93:59" pos:end="93:59">)</operator> <operator pos:start="93:61" pos:end="93:61">*</operator> <literal type="number" pos:start="93:63" pos:end="93:63">2</literal> <operator pos:start="93:65" pos:end="93:65">/</operator> <name pos:start="93:67" pos:end="93:81"><name pos:start="93:67" pos:end="93:71">avctx</name><operator pos:start="93:72" pos:end="93:73">-&gt;</operator><name pos:start="93:74" pos:end="93:81">channels</name></name> <operator pos:start="93:83" pos:end="93:83">+</operator> <literal type="number" pos:start="93:85" pos:end="93:85">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:37"><expr pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:13">avctx</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:26">block_align</name></name> <operator pos:start="95:28" pos:end="95:28">=</operator> <name pos:start="95:30" pos:end="95:36">BLKSIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:13">avctx</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:36">bits_per_coded_sample</name></name> <operator pos:start="97:38" pos:end="97:38">=</operator> <literal type="number" pos:start="97:40" pos:end="97:40">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:35"><expr pos:start="99:9" pos:end="99:34"><name pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:13">avctx</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:29">extradata_size</name></name> <operator pos:start="99:31" pos:end="99:31">=</operator> <literal type="number" pos:start="99:33" pos:end="99:34">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:72"><expr pos:start="101:9" pos:end="101:71"><name pos:start="101:9" pos:end="101:17">extradata</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:36"><name pos:start="101:21" pos:end="101:25">avctx</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:36">extradata</name></name> <operator pos:start="101:38" pos:end="101:38">=</operator> <call pos:start="101:40" pos:end="101:71"><name pos:start="101:40" pos:end="101:48">av_malloc</name><argument_list pos:start="101:49" pos:end="101:71">(<argument pos:start="101:50" pos:end="101:70"><expr pos:start="101:50" pos:end="101:70"><name pos:start="101:50" pos:end="101:70"><name pos:start="101:50" pos:end="101:54">avctx</name><operator pos:start="101:55" pos:end="101:56">-&gt;</operator><name pos:start="101:57" pos:end="101:70">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:35"><if pos:start="103:9" pos:end="105:35">if <condition pos:start="103:12" pos:end="103:23">(<expr pos:start="103:13" pos:end="103:22"><operator pos:start="103:13" pos:end="103:13">!</operator><name pos:start="103:14" pos:end="103:22">extradata</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:35"><block_content pos:start="105:13" pos:end="105:35">

            <return pos:start="105:13" pos:end="105:35">return <expr pos:start="105:20" pos:end="105:34"><call pos:start="105:20" pos:end="105:34"><name pos:start="105:20" pos:end="105:26">AVERROR</name><argument_list pos:start="105:27" pos:end="105:34">(<argument pos:start="105:28" pos:end="105:33"><expr pos:start="105:28" pos:end="105:33"><name pos:start="105:28" pos:end="105:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><call pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:27">bytestream_put_le16</name><argument_list pos:start="107:28" pos:end="107:58">(<argument pos:start="107:29" pos:end="107:38"><expr pos:start="107:29" pos:end="107:38"><operator pos:start="107:29" pos:end="107:29">&amp;</operator><name pos:start="107:30" pos:end="107:38">extradata</name></expr></argument>, <argument pos:start="107:41" pos:end="107:57"><expr pos:start="107:41" pos:end="107:57"><name pos:start="107:41" pos:end="107:57"><name pos:start="107:41" pos:end="107:45">avctx</name><operator pos:start="107:46" pos:end="107:47">-&gt;</operator><name pos:start="107:48" pos:end="107:57">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:43"><expr pos:start="109:9" pos:end="109:42"><call pos:start="109:9" pos:end="109:42"><name pos:start="109:9" pos:end="109:27">bytestream_put_le16</name><argument_list pos:start="109:28" pos:end="109:42">(<argument pos:start="109:29" pos:end="109:38"><expr pos:start="109:29" pos:end="109:38"><operator pos:start="109:29" pos:end="109:29">&amp;</operator><name pos:start="109:30" pos:end="109:38">extradata</name></expr></argument>, <argument pos:start="109:41" pos:end="109:41"><expr pos:start="109:41" pos:end="109:41"><literal type="number" pos:start="109:41" pos:end="109:41">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:45" pos:end="109:58">/* wNumCoef */</comment>

        <for pos:start="111:9" pos:end="117:9">for <control pos:start="111:13" pos:end="111:31">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:26"><expr pos:start="111:21" pos:end="111:25"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <literal type="number" pos:start="111:25" pos:end="111:25">7</literal></expr>;</condition> <incr pos:start="111:28" pos:end="111:30"><expr pos:start="111:28" pos:end="111:30"><name pos:start="111:28" pos:end="111:28">i</name><operator pos:start="111:29" pos:end="111:30">++</operator></expr></incr>)</control> <block pos:start="111:33" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:73">

            <expr_stmt pos:start="113:13" pos:end="113:73"><expr pos:start="113:13" pos:end="113:72"><call pos:start="113:13" pos:end="113:72"><name pos:start="113:13" pos:end="113:31">bytestream_put_le16</name><argument_list pos:start="113:32" pos:end="113:72">(<argument pos:start="113:33" pos:end="113:42"><expr pos:start="113:33" pos:end="113:42"><operator pos:start="113:33" pos:end="113:33">&amp;</operator><name pos:start="113:34" pos:end="113:42">extradata</name></expr></argument>, <argument pos:start="113:45" pos:end="113:71"><expr pos:start="113:45" pos:end="113:71"><name pos:start="113:45" pos:end="113:67"><name pos:start="113:45" pos:end="113:64">ff_adpcm_AdaptCoeff1</name><index pos:start="113:65" pos:end="113:67">[<expr pos:start="113:66" pos:end="113:66"><name pos:start="113:66" pos:end="113:66">i</name></expr>]</index></name> <operator pos:start="113:69" pos:end="113:69">*</operator> <literal type="number" pos:start="113:71" pos:end="113:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:73"><expr pos:start="115:13" pos:end="115:72"><call pos:start="115:13" pos:end="115:72"><name pos:start="115:13" pos:end="115:31">bytestream_put_le16</name><argument_list pos:start="115:32" pos:end="115:72">(<argument pos:start="115:33" pos:end="115:42"><expr pos:start="115:33" pos:end="115:42"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:42">extradata</name></expr></argument>, <argument pos:start="115:45" pos:end="115:71"><expr pos:start="115:45" pos:end="115:71"><name pos:start="115:45" pos:end="115:67"><name pos:start="115:45" pos:end="115:64">ff_adpcm_AdaptCoeff2</name><index pos:start="115:65" pos:end="115:67">[<expr pos:start="115:66" pos:end="115:66"><name pos:start="115:66" pos:end="115:66">i</name></expr>]</index></name> <operator pos:start="115:69" pos:end="115:69">*</operator> <literal type="number" pos:start="115:71" pos:end="115:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:31">case <expr pos:start="121:10" pos:end="121:30"><name pos:start="121:10" pos:end="121:30">CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:55"><expr pos:start="123:9" pos:end="123:54"><name pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:13">avctx</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:25">frame_size</name></name>  <operator pos:start="123:28" pos:end="123:28">=</operator> <name pos:start="123:30" pos:end="123:36">BLKSIZE</name> <operator pos:start="123:38" pos:end="123:38">*</operator> <name pos:start="123:40" pos:end="123:54"><name pos:start="123:40" pos:end="123:44">avctx</name><operator pos:start="123:45" pos:end="123:46">-&gt;</operator><name pos:start="123:47" pos:end="123:54">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:37"><expr pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:13">avctx</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:26">block_align</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:36">BLKSIZE</name></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:28">case <expr pos:start="129:10" pos:end="129:27"><name pos:start="129:10" pos:end="129:27">CODEC_ID_ADPCM_SWF</name></expr>:</case>

        <if_stmt pos:start="131:9" pos:end="143:9"><if pos:start="131:9" pos:end="143:9">if <condition pos:start="131:12" pos:end="135:40">(<expr pos:start="131:13" pos:end="135:39"><name pos:start="131:13" pos:end="131:30"><name pos:start="131:13" pos:end="131:17">avctx</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:30">sample_rate</name></name> <operator pos:start="131:32" pos:end="131:33">!=</operator> <literal type="number" pos:start="131:35" pos:end="131:39">11025</literal> <operator pos:start="131:41" pos:end="131:42">&amp;&amp;</operator>

            <name pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:17">avctx</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:30">sample_rate</name></name> <operator pos:start="133:32" pos:end="133:33">!=</operator> <literal type="number" pos:start="133:35" pos:end="133:39">22050</literal> <operator pos:start="133:41" pos:end="133:42">&amp;&amp;</operator>

            <name pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:17">avctx</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:30">sample_rate</name></name> <operator pos:start="135:32" pos:end="135:33">!=</operator> <literal type="number" pos:start="135:35" pos:end="135:39">44100</literal></expr>)</condition> <block pos:start="135:42" pos:end="143:9">{<block_content pos:start="137:13" pos:end="141:23">

            <expr_stmt pos:start="137:13" pos:end="139:39"><expr pos:start="137:13" pos:end="139:38"><call pos:start="137:13" pos:end="139:38"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="139:38">(<argument pos:start="137:20" pos:end="137:24"><expr pos:start="137:20" pos:end="137:24"><name pos:start="137:20" pos:end="137:24">avctx</name></expr></argument>, <argument pos:start="137:27" pos:end="137:38"><expr pos:start="137:27" pos:end="137:38"><name pos:start="137:27" pos:end="137:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:41" pos:end="139:37"><expr pos:start="137:41" pos:end="139:37"><literal type="string" pos:start="137:41" pos:end="137:69">"Sample rate must be 11025, "</literal>

                   <literal type="string" pos:start="139:20" pos:end="139:37">"22050 or 44100\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="141:13" pos:end="141:23">goto <name pos:start="141:18" pos:end="141:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:63"><expr pos:start="145:9" pos:end="145:62"><name pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:13">avctx</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:25">frame_size</name></name> <operator pos:start="145:27" pos:end="145:27">=</operator> <literal type="number" pos:start="145:29" pos:end="145:31">512</literal> <operator pos:start="145:33" pos:end="145:33">*</operator> <operator pos:start="145:35" pos:end="145:35">(</operator><name pos:start="145:36" pos:end="145:53"><name pos:start="145:36" pos:end="145:40">avctx</name><operator pos:start="145:41" pos:end="145:42">-&gt;</operator><name pos:start="145:43" pos:end="145:53">sample_rate</name></name> <operator pos:start="145:55" pos:end="145:55">/</operator> <literal type="number" pos:start="145:57" pos:end="145:61">11025</literal><operator pos:start="145:62" pos:end="145:62">)</operator></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <default pos:start="149:5" pos:end="149:12">default:</default>

        <goto pos:start="151:9" pos:end="151:19">goto <name pos:start="151:14" pos:end="151:18">error</name>;</goto>

    </block_content>}</block></switch>



    <expr_stmt pos:start="157:5" pos:end="157:47"><expr pos:start="157:5" pos:end="157:46"><name pos:start="157:5" pos:end="157:22"><name pos:start="157:5" pos:end="157:9">avctx</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:22">coded_frame</name></name> <operator pos:start="157:24" pos:end="157:24">=</operator> <call pos:start="157:26" pos:end="157:46"><name pos:start="157:26" pos:end="157:44">avcodec_alloc_frame</name><argument_list pos:start="157:45" pos:end="157:46">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:37"><expr pos:start="159:5" pos:end="159:36"><name pos:start="159:5" pos:end="159:33"><name pos:start="159:5" pos:end="159:9">avctx</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:22">coded_frame</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:33">key_frame</name></name><operator pos:start="159:34" pos:end="159:34">=</operator> <literal type="number" pos:start="159:36" pos:end="159:36">1</literal></expr>;</expr_stmt>



    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>

<label pos:start="165:1" pos:end="165:6"><name pos:start="165:1" pos:end="165:5">error</name>:</label>

    <expr_stmt pos:start="167:5" pos:end="167:24"><expr pos:start="167:5" pos:end="167:23"><call pos:start="167:5" pos:end="167:23"><name pos:start="167:5" pos:end="167:12">av_freep</name><argument_list pos:start="167:13" pos:end="167:23">(<argument pos:start="167:14" pos:end="167:22"><expr pos:start="167:14" pos:end="167:22"><operator pos:start="167:14" pos:end="167:14">&amp;</operator><name pos:start="167:15" pos:end="167:22"><name pos:start="167:15" pos:end="167:15">s</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:22">paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:27"><expr pos:start="169:5" pos:end="169:26"><call pos:start="169:5" pos:end="169:26"><name pos:start="169:5" pos:end="169:12">av_freep</name><argument_list pos:start="169:13" pos:end="169:26">(<argument pos:start="169:14" pos:end="169:25"><expr pos:start="169:14" pos:end="169:25"><operator pos:start="169:14" pos:end="169:14">&amp;</operator><name pos:start="169:15" pos:end="169:25"><name pos:start="169:15" pos:end="169:15">s</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:25">node_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:28"><expr pos:start="171:5" pos:end="171:27"><call pos:start="171:5" pos:end="171:27"><name pos:start="171:5" pos:end="171:12">av_freep</name><argument_list pos:start="171:13" pos:end="171:27">(<argument pos:start="171:14" pos:end="171:26"><expr pos:start="171:14" pos:end="171:26"><operator pos:start="171:14" pos:end="171:14">&amp;</operator><name pos:start="171:15" pos:end="171:26"><name pos:start="171:15" pos:end="171:15">s</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:26">nodep_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:31"><expr pos:start="173:5" pos:end="173:30"><call pos:start="173:5" pos:end="173:30"><name pos:start="173:5" pos:end="173:12">av_freep</name><argument_list pos:start="173:13" pos:end="173:30">(<argument pos:start="173:14" pos:end="173:29"><expr pos:start="173:14" pos:end="173:29"><operator pos:start="173:14" pos:end="173:14">&amp;</operator><name pos:start="173:15" pos:end="173:29"><name pos:start="173:15" pos:end="173:15">s</name><operator pos:start="173:16" pos:end="173:17">-&gt;</operator><name pos:start="173:18" pos:end="173:29">trellis_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:14">return <expr pos:start="175:12" pos:end="175:13"><operator pos:start="175:12" pos:end="175:12">-</operator><literal type="number" pos:start="175:13" pos:end="175:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
