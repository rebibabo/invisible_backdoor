<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21550.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qemu_init_main_loop</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:23"><expr pos:start="9:5" pos:end="9:22"><call pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">qemu_init_sigbus</name><argument_list pos:start="9:21" pos:end="9:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:28"><name pos:start="13:11" pos:end="13:26">qemu_signal_init</name><argument_list pos:start="13:27" pos:end="13:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">ret</name></expr>)</condition> <block pos:start="15:14" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:67">/* Note eventfd must be drained before signalfd handlers run */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:28"><expr pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:27"><name pos:start="25:11" pos:end="25:25">qemu_event_init</name><argument_list pos:start="25:26" pos:end="25:27">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">ret</name></expr>)</condition> <block pos:start="27:14" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:18">qemu_cond_init</name><argument_list pos:start="35:19" pos:end="35:34">(<argument pos:start="35:20" pos:end="35:33"><expr pos:start="35:20" pos:end="35:33"><operator pos:start="35:20" pos:end="35:20">&amp;</operator><name pos:start="35:21" pos:end="35:33">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><call pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:18">qemu_cond_init</name><argument_list pos:start="37:19" pos:end="37:37">(<argument pos:start="37:20" pos:end="37:36"><expr pos:start="37:20" pos:end="37:36"><operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:36">qemu_system_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><call pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:18">qemu_cond_init</name><argument_list pos:start="39:19" pos:end="39:36">(<argument pos:start="39:20" pos:end="39:35"><expr pos:start="39:20" pos:end="39:35"><operator pos:start="39:20" pos:end="39:20">&amp;</operator><name pos:start="39:21" pos:end="39:35">qemu_pause_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><call pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:18">qemu_cond_init</name><argument_list pos:start="41:19" pos:end="41:35">(<argument pos:start="41:20" pos:end="41:34"><expr pos:start="41:20" pos:end="41:34"><operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:34">qemu_work_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><call pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:18">qemu_cond_init</name><argument_list pos:start="43:19" pos:end="43:43">(<argument pos:start="43:20" pos:end="43:42"><expr pos:start="43:20" pos:end="43:42"><operator pos:start="43:20" pos:end="43:20">&amp;</operator><name pos:start="43:21" pos:end="43:42">qemu_io_proceeded_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><call pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:19">qemu_mutex_init</name><argument_list pos:start="45:20" pos:end="45:39">(<argument pos:start="45:21" pos:end="45:38"><expr pos:start="45:21" pos:end="45:38"><operator pos:start="45:21" pos:end="45:21">&amp;</operator><name pos:start="45:22" pos:end="45:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><call pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:19">qemu_mutex_lock</name><argument_list pos:start="47:20" pos:end="47:39">(<argument pos:start="47:21" pos:end="47:38"><expr pos:start="47:21" pos:end="47:38"><operator pos:start="47:21" pos:end="47:21">&amp;</operator><name pos:start="47:22" pos:end="47:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:37"><expr pos:start="51:5" pos:end="51:36"><call pos:start="51:5" pos:end="51:36"><name pos:start="51:5" pos:end="51:24">qemu_thread_get_self</name><argument_list pos:start="51:25" pos:end="51:36">(<argument pos:start="51:26" pos:end="51:35"><expr pos:start="51:26" pos:end="51:35"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:35">io_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
