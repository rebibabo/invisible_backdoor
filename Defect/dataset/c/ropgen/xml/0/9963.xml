<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9963.c" pos:tabs="8"><function pos:start="1:1" pos:end="275:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">cpu_x86_gen_code</name><parameter_list pos:start="1:21" pos:end="5:69">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:28">uint8_t</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:42">gen_code_buf</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:61">max_code_size</name></decl></parameter>, 

                     <parameter pos:start="3:22" pos:end="3:43"><decl pos:start="3:22" pos:end="3:43"><type pos:start="3:22" pos:end="3:43"><name pos:start="3:22" pos:end="3:24">int</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:43">gen_code_size_ptr</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:38"><decl pos:start="5:22" pos:end="5:38"><type pos:start="5:22" pos:end="5:38"><name pos:start="5:22" pos:end="5:28">uint8_t</name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:38">pc_start</name></decl></parameter>,  <parameter pos:start="5:42" pos:end="5:57"><decl pos:start="5:42" pos:end="5:57"><type pos:start="5:42" pos:end="5:57"><name pos:start="5:42" pos:end="5:48">uint8_t</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:57">cs_base</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:68"><decl pos:start="5:60" pos:end="5:68"><type pos:start="5:60" pos:end="5:68"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:68">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="275:1">{<block_content pos:start="9:5" pos:end="273:13">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">dc1</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">dc</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:19">pc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint16_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:21">gen_code_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">long</name></type> <name pos:start="17:10" pos:end="17:12">ret</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="19:1" pos:end="19:18">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:18">DEBUG_DISAS</name></cpp:ifdef>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:27">disassemble_info</name></name></type> <name pos:start="21:29" pos:end="21:39">disasm_info</name></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    

    <comment type="block" pos:start="27:5" pos:end="27:36">/* generate intermediate code */</comment>



    <expr_stmt pos:start="31:5" pos:end="31:54"><expr pos:start="31:5" pos:end="31:53"><name pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:6">dc</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:14">code32</name></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:23">flags</name> <operator pos:start="31:25" pos:end="31:26">&gt;&gt;</operator> <name pos:start="31:28" pos:end="31:48">GEN_FLAG_CODE32_SHIFT</name><operator pos:start="31:49" pos:end="31:49">)</operator> <operator pos:start="31:51" pos:end="31:51">&amp;</operator> <literal type="number" pos:start="31:53" pos:end="31:53">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:12">ss32</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">(</operator><name pos:start="33:17" pos:end="33:21">flags</name> <operator pos:start="33:23" pos:end="33:24">&gt;&gt;</operator> <name pos:start="33:26" pos:end="33:44">GEN_FLAG_SS32_SHIFT</name><operator pos:start="33:45" pos:end="33:45">)</operator> <operator pos:start="33:47" pos:end="33:47">&amp;</operator> <literal type="number" pos:start="33:49" pos:end="33:49">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:14">addseg</name></name> <operator pos:start="35:16" pos:end="35:16">=</operator> <operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:23">flags</name> <operator pos:start="35:25" pos:end="35:26">&gt;&gt;</operator> <name pos:start="35:28" pos:end="35:48">GEN_FLAG_ADDSEG_SHIFT</name><operator pos:start="35:49" pos:end="35:49">)</operator> <operator pos:start="35:51" pos:end="35:51">&amp;</operator> <literal type="number" pos:start="35:53" pos:end="35:53">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:12">f_st</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:21">flags</name> <operator pos:start="37:23" pos:end="37:24">&gt;&gt;</operator> <name pos:start="37:26" pos:end="37:42">GEN_FLAG_ST_SHIFT</name><operator pos:start="37:43" pos:end="37:43">)</operator> <operator pos:start="37:45" pos:end="37:45">&amp;</operator> <literal type="number" pos:start="37:47" pos:end="37:47">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:13">cc_op</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:15">cs_base</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:25">cs_base</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:15">gen_opc_ptr</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:29">gen_opc_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:15">gen_opc_end</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:29">gen_opc_buf</name> <operator pos:start="47:31" pos:end="47:31">+</operator> <name pos:start="47:33" pos:end="47:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:19">gen_opparam_ptr</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:37">gen_opparam_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:19"><expr pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:14">is_jmp</name></name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:10">pc_ptr</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:21">pc_start</name></expr>;</expr_stmt>

    <do pos:start="57:5" pos:end="81:55">do <block pos:start="57:8" pos:end="81:5">{<block_content pos:start="59:9" pos:end="79:29">

        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:36"><name pos:start="59:15" pos:end="59:24">disas_insn</name><argument_list pos:start="59:25" pos:end="59:36">(<argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><name pos:start="59:26" pos:end="59:27">dc</name></expr></argument>, <argument pos:start="59:30" pos:end="59:35"><expr pos:start="59:30" pos:end="59:35"><name pos:start="59:30" pos:end="59:35">pc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="77:9"><if pos:start="61:9" pos:end="77:9">if <condition pos:start="61:12" pos:end="61:22">(<expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:18">==</operator> <operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>)</condition> <block pos:start="61:24" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:22">

            <comment type="block" pos:start="63:13" pos:end="67:52">/* we trigger an illegal instruction operation only if it

               is the first instruction. Otherwise, we simply stop

               generating the code just before it */</comment>

            <if_stmt pos:start="69:13" pos:end="75:22"><if pos:start="69:13" pos:end="71:26">if <condition pos:start="69:16" pos:end="69:35">(<expr pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:22">pc_ptr</name> <operator pos:start="69:24" pos:end="69:25">==</operator> <name pos:start="69:27" pos:end="69:34">pc_start</name></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:26"><block_content pos:start="71:17" pos:end="71:26">

                <return pos:start="71:17" pos:end="71:26">return <expr pos:start="71:24" pos:end="71:25"><operator pos:start="71:24" pos:end="71:24">-</operator><literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr>;</return></block_content></block></if>

            <else pos:start="73:13" pos:end="75:22">else<block type="pseudo" pos:start="75:17" pos:end="75:22"><block_content pos:start="75:17" pos:end="75:22">

                <break pos:start="75:17" pos:end="75:22">break;</break></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:29"><expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:14">pc_ptr</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <operator pos:start="79:18" pos:end="79:18">(</operator><name pos:start="79:19" pos:end="79:22">void</name> <operator pos:start="79:24" pos:end="79:24">*</operator><operator pos:start="79:25" pos:end="79:25">)</operator><name pos:start="79:26" pos:end="79:28">ret</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="81:13" pos:end="81:54">(<expr pos:start="81:14" pos:end="81:53"><operator pos:start="81:14" pos:end="81:14">!</operator><name pos:start="81:15" pos:end="81:24"><name pos:start="81:15" pos:end="81:16">dc</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:24">is_jmp</name></name> <operator pos:start="81:26" pos:end="81:27">&amp;&amp;</operator> <name pos:start="81:29" pos:end="81:39">gen_opc_ptr</name> <operator pos:start="81:41" pos:end="81:41">&lt;</operator> <name pos:start="81:43" pos:end="81:53">gen_opc_end</name></expr>)</condition>;</do>

    <comment type="block" pos:start="83:5" pos:end="83:66">/* we must store the eflags state if it is not already done */</comment>

    <if_stmt pos:start="85:5" pos:end="87:36"><if pos:start="85:5" pos:end="87:36">if <condition pos:start="85:8" pos:end="85:35">(<expr pos:start="85:9" pos:end="85:34"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:10">dc</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:17">cc_op</name></name> <operator pos:start="85:19" pos:end="85:20">!=</operator> <name pos:start="85:22" pos:end="85:34">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:36"><block_content pos:start="87:9" pos:end="87:36">

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><call pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:24">gen_op_set_cc_op</name><argument_list pos:start="87:25" pos:end="87:35">(<argument pos:start="87:26" pos:end="87:34"><expr pos:start="87:26" pos:end="87:34"><name pos:start="87:26" pos:end="87:34"><name pos:start="87:26" pos:end="87:27">dc</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:34">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:24">(<expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:10">dc</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:18">is_jmp</name></name> <operator pos:start="89:20" pos:end="89:21">!=</operator> <literal type="number" pos:start="89:23" pos:end="89:23">1</literal></expr>)</condition> <block pos:start="89:26" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:56">

        <comment type="block" pos:start="91:9" pos:end="91:66">/* we add an additionnal jmp to update the simulated PC */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:56"><expr pos:start="93:9" pos:end="93:55"><call pos:start="93:9" pos:end="93:55"><name pos:start="93:9" pos:end="93:21">gen_op_jmp_im</name><argument_list pos:start="93:22" pos:end="93:55">(<argument pos:start="93:23" pos:end="93:54"><expr pos:start="93:23" pos:end="93:54"><name pos:start="93:23" pos:end="93:25">ret</name> <operator pos:start="93:27" pos:end="93:27">-</operator> <operator pos:start="93:29" pos:end="93:29">(</operator><name pos:start="93:30" pos:end="93:37">unsigned</name> <name pos:start="93:39" pos:end="93:42">long</name><operator pos:start="93:43" pos:end="93:43">)</operator><name pos:start="93:44" pos:end="93:54"><name pos:start="93:44" pos:end="93:45">dc</name><operator pos:start="93:46" pos:end="93:47">-&gt;</operator><name pos:start="93:48" pos:end="93:54">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="104:0"><expr pos:start="97:5" pos:end="97:31"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:16">gen_opc_ptr</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:31">INDEX_op_end</name></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:36">/* optimize flag computations */</comment>

<cpp:ifdef pos:start="103:1" pos:end="103:18">#<cpp:directive pos:start="103:2" pos:end="103:6">ifdef</cpp:directive> <name pos:start="103:8" pos:end="103:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="105:5" pos:end="172:0"><if pos:start="105:5" pos:end="172:0">if <condition pos:start="105:8" pos:end="105:17">(<expr pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:16">loglevel</name></expr>)</condition> <block pos:start="105:19" pos:end="172:0">{<block_content pos:start="107:9" pos:end="167:31">

        <decl_stmt pos:start="107:9" pos:end="107:20"><decl pos:start="107:9" pos:end="107:19"><type pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:15">uint8_t</name> <modifier pos:start="107:17" pos:end="107:17">*</modifier></type><name pos:start="107:18" pos:end="107:19">pc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:18"><decl pos:start="109:9" pos:end="109:17"><type pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">int</name></type> <name pos:start="109:13" pos:end="109:17">count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="113:9" pos:end="124:0"><expr pos:start="113:9" pos:end="113:60"><call pos:start="113:9" pos:end="113:60"><name pos:start="113:9" pos:end="113:29">INIT_DISASSEMBLE_INFO</name><argument_list pos:start="113:30" pos:end="113:60">(<argument pos:start="113:31" pos:end="113:41"><expr pos:start="113:31" pos:end="113:41"><name pos:start="113:31" pos:end="113:41">disasm_info</name></expr></argument>, <argument pos:start="113:44" pos:end="113:50"><expr pos:start="113:44" pos:end="113:50"><name pos:start="113:44" pos:end="113:50">logfile</name></expr></argument>, <argument pos:start="113:53" pos:end="113:59"><expr pos:start="113:53" pos:end="113:59"><name pos:start="113:53" pos:end="113:59">fprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="115:1" pos:end="115:5">#<cpp:directive pos:start="115:2" pos:end="115:3">if</cpp:directive> <expr pos:start="115:5" pos:end="115:5"><literal type="number" pos:start="115:5" pos:end="115:5">0</literal></expr></cpp:if>        

        disasm_info.flavour = bfd_get_flavour (abfd);

        disasm_info.arch = bfd_get_arch (abfd);

        disasm_info.mach = bfd_get_mach (abfd);

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="125:9" pos:end="125:47"><expr pos:start="125:9" pos:end="125:46"><name pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:19">disasm_info</name><operator pos:start="125:20" pos:end="125:20">.</operator><name pos:start="125:21" pos:end="125:26">endian</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:46">BFD_ENDIAN_LITTLE</name></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:51"><if pos:start="127:9" pos:end="129:50">if <condition pos:start="127:12" pos:end="127:23">(<expr pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:14">dc</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:22">code32</name></name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:50"><block_content pos:start="129:13" pos:end="129:50">

            <expr_stmt pos:start="129:13" pos:end="129:50"><expr pos:start="129:13" pos:end="129:49"><name pos:start="129:13" pos:end="129:28"><name pos:start="129:13" pos:end="129:23">disasm_info</name><operator pos:start="129:24" pos:end="129:24">.</operator><name pos:start="129:25" pos:end="129:28">mach</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <name pos:start="129:32" pos:end="129:49">bfd_mach_i386_i386</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="131:9" pos:end="133:51">else<block type="pseudo" pos:start="133:13" pos:end="133:51"><block_content pos:start="133:13" pos:end="133:51">

            <expr_stmt pos:start="133:13" pos:end="133:51"><expr pos:start="133:13" pos:end="133:50"><name pos:start="133:13" pos:end="133:28"><name pos:start="133:13" pos:end="133:23">disasm_info</name><operator pos:start="133:24" pos:end="133:24">.</operator><name pos:start="133:25" pos:end="133:28">mach</name></name> <operator pos:start="133:30" pos:end="133:30">=</operator> <name pos:start="133:32" pos:end="133:50">bfd_mach_i386_i8086</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:47"><expr pos:start="135:9" pos:end="135:46"><call pos:start="135:9" pos:end="135:46"><name pos:start="135:9" pos:end="135:15">fprintf</name><argument_list pos:start="135:16" pos:end="135:46">(<argument pos:start="135:17" pos:end="135:23"><expr pos:start="135:17" pos:end="135:23"><name pos:start="135:17" pos:end="135:23">logfile</name></expr></argument>, <argument pos:start="135:26" pos:end="135:45"><expr pos:start="135:26" pos:end="135:45"><literal type="string" pos:start="135:26" pos:end="135:45">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><call pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:15">fprintf</name><argument_list pos:start="137:16" pos:end="137:33">(<argument pos:start="137:17" pos:end="137:23"><expr pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:23">logfile</name></expr></argument>, <argument pos:start="137:26" pos:end="137:32"><expr pos:start="137:26" pos:end="137:32"><literal type="string" pos:start="137:26" pos:end="137:32">"IN:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:38"><expr pos:start="139:9" pos:end="139:37"><name pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:19">disasm_info</name><operator pos:start="139:20" pos:end="139:20">.</operator><name pos:start="139:21" pos:end="139:26">buffer</name></name> <operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:37">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:57"><expr pos:start="141:9" pos:end="141:56"><name pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:19">disasm_info</name><operator pos:start="141:20" pos:end="141:20">.</operator><name pos:start="141:21" pos:end="141:30">buffer_vma</name></name> <operator pos:start="141:32" pos:end="141:32">=</operator> <operator pos:start="141:34" pos:end="141:34">(</operator><name pos:start="141:35" pos:end="141:42">unsigned</name> <name pos:start="141:44" pos:end="141:47">long</name><operator pos:start="141:48" pos:end="141:48">)</operator><name pos:start="141:49" pos:end="141:56">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:54"><expr pos:start="143:9" pos:end="143:53"><name pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:19">disasm_info</name><operator pos:start="143:20" pos:end="143:20">.</operator><name pos:start="143:21" pos:end="143:33">buffer_length</name></name> <operator pos:start="143:35" pos:end="143:35">=</operator> <name pos:start="143:37" pos:end="143:42">pc_ptr</name> <operator pos:start="143:44" pos:end="143:44">-</operator> <name pos:start="143:46" pos:end="143:53">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:22"><expr pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:10">pc</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <name pos:start="145:14" pos:end="145:21">pc_start</name></expr>;</expr_stmt>

        <while pos:start="147:9" pos:end="157:9">while <condition pos:start="147:15" pos:end="147:27">(<expr pos:start="147:16" pos:end="147:26"><name pos:start="147:16" pos:end="147:17">pc</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <name pos:start="147:21" pos:end="147:26">pc_ptr</name></expr>)</condition> <block pos:start="147:29" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:24">

            <expr_stmt pos:start="149:13" pos:end="149:53"><expr pos:start="149:13" pos:end="149:52"><call pos:start="149:13" pos:end="149:52"><name pos:start="149:13" pos:end="149:19">fprintf</name><argument_list pos:start="149:20" pos:end="149:52">(<argument pos:start="149:21" pos:end="149:27"><expr pos:start="149:21" pos:end="149:27"><name pos:start="149:21" pos:end="149:27">logfile</name></expr></argument>, <argument pos:start="149:30" pos:end="149:41"><expr pos:start="149:30" pos:end="149:41"><literal type="string" pos:start="149:30" pos:end="149:41">"0x%08lx:  "</literal></expr></argument>, <argument pos:start="149:44" pos:end="149:51"><expr pos:start="149:44" pos:end="149:51"><operator pos:start="149:44" pos:end="149:44">(</operator><name pos:start="149:45" pos:end="149:48">long</name><operator pos:start="149:49" pos:end="149:49">)</operator><name pos:start="149:50" pos:end="149:51">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:69"><expr pos:start="151:13" pos:end="151:68"><name pos:start="151:13" pos:end="151:17">count</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <call pos:start="151:21" pos:end="151:68"><name pos:start="151:21" pos:end="151:35">print_insn_i386</name><argument_list pos:start="151:36" pos:end="151:68">(<argument pos:start="151:37" pos:end="151:53"><expr pos:start="151:37" pos:end="151:53"><operator pos:start="151:37" pos:end="151:37">(</operator><name pos:start="151:38" pos:end="151:45">unsigned</name> <name pos:start="151:47" pos:end="151:50">long</name><operator pos:start="151:51" pos:end="151:51">)</operator><name pos:start="151:52" pos:end="151:53">pc</name></expr></argument>, <argument pos:start="151:56" pos:end="151:67"><expr pos:start="151:56" pos:end="151:67"><operator pos:start="151:56" pos:end="151:56">&amp;</operator><name pos:start="151:57" pos:end="151:67">disasm_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:35"><expr pos:start="153:13" pos:end="153:34"><call pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:19">fprintf</name><argument_list pos:start="153:20" pos:end="153:34">(<argument pos:start="153:21" pos:end="153:27"><expr pos:start="153:21" pos:end="153:27"><name pos:start="153:21" pos:end="153:27">logfile</name></expr></argument>, <argument pos:start="153:30" pos:end="153:33"><expr pos:start="153:30" pos:end="153:33"><literal type="string" pos:start="153:30" pos:end="153:33">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:24"><expr pos:start="155:13" pos:end="155:23"><name pos:start="155:13" pos:end="155:14">pc</name> <operator pos:start="155:16" pos:end="155:17">+=</operator> <name pos:start="155:19" pos:end="155:23">count</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="159:9" pos:end="159:31"><expr pos:start="159:9" pos:end="159:30"><call pos:start="159:9" pos:end="159:30"><name pos:start="159:9" pos:end="159:15">fprintf</name><argument_list pos:start="159:16" pos:end="159:30">(<argument pos:start="159:17" pos:end="159:23"><expr pos:start="159:17" pos:end="159:23"><name pos:start="159:17" pos:end="159:23">logfile</name></expr></argument>, <argument pos:start="159:26" pos:end="159:29"><expr pos:start="159:26" pos:end="159:29"><literal type="string" pos:start="159:26" pos:end="159:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <expr_stmt pos:start="163:9" pos:end="163:34"><expr pos:start="163:9" pos:end="163:33"><call pos:start="163:9" pos:end="163:33"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:33">(<argument pos:start="163:17" pos:end="163:23"><expr pos:start="163:17" pos:end="163:23"><name pos:start="163:17" pos:end="163:23">logfile</name></expr></argument>, <argument pos:start="163:26" pos:end="163:32"><expr pos:start="163:26" pos:end="163:32"><literal type="string" pos:start="163:26" pos:end="163:32">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:30"><expr pos:start="165:9" pos:end="165:29"><call pos:start="165:9" pos:end="165:29"><name pos:start="165:9" pos:end="165:16">dump_ops</name><argument_list pos:start="165:17" pos:end="165:29">(<argument pos:start="165:18" pos:end="165:28"><expr pos:start="165:18" pos:end="165:28"><name pos:start="165:18" pos:end="165:28">gen_opc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:31"><expr pos:start="167:9" pos:end="167:30"><call pos:start="167:9" pos:end="167:30"><name pos:start="167:9" pos:end="167:15">fprintf</name><argument_list pos:start="167:16" pos:end="167:30">(<argument pos:start="167:17" pos:end="167:23"><expr pos:start="167:17" pos:end="167:23"><name pos:start="167:17" pos:end="167:23">logfile</name></expr></argument>, <argument pos:start="167:26" pos:end="167:29"><expr pos:start="167:26" pos:end="167:29"><literal type="string" pos:start="167:26" pos:end="167:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="171:1" pos:end="171:6">#<cpp:directive pos:start="171:2" pos:end="171:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="175:5" pos:end="175:36">/* optimize flag computations */</comment>

    <expr_stmt pos:start="177:5" pos:end="182:0"><expr pos:start="177:5" pos:end="177:58"><call pos:start="177:5" pos:end="177:58"><name pos:start="177:5" pos:end="177:18">optimize_flags</name><argument_list pos:start="177:19" pos:end="177:58">(<argument pos:start="177:20" pos:end="177:30"><expr pos:start="177:20" pos:end="177:30"><name pos:start="177:20" pos:end="177:30">gen_opc_buf</name></expr></argument>, <argument pos:start="177:33" pos:end="177:57"><expr pos:start="177:33" pos:end="177:57"><name pos:start="177:33" pos:end="177:43">gen_opc_ptr</name> <operator pos:start="177:45" pos:end="177:45">-</operator> <name pos:start="177:47" pos:end="177:57">gen_opc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="181:1" pos:end="181:18">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="183:5" pos:end="194:0"><if pos:start="183:5" pos:end="194:0">if <condition pos:start="183:8" pos:end="183:17">(<expr pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:16">loglevel</name></expr>)</condition> <block pos:start="183:19" pos:end="194:0">{<block_content pos:start="185:9" pos:end="189:31">

        <expr_stmt pos:start="185:9" pos:end="185:47"><expr pos:start="185:9" pos:end="185:46"><call pos:start="185:9" pos:end="185:46"><name pos:start="185:9" pos:end="185:15">fprintf</name><argument_list pos:start="185:16" pos:end="185:46">(<argument pos:start="185:17" pos:end="185:23"><expr pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:23">logfile</name></expr></argument>, <argument pos:start="185:26" pos:end="185:45"><expr pos:start="185:26" pos:end="185:45"><literal type="string" pos:start="185:26" pos:end="185:45">"AFTER FLAGS OPT:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:30"><expr pos:start="187:9" pos:end="187:29"><call pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:16">dump_ops</name><argument_list pos:start="187:17" pos:end="187:29">(<argument pos:start="187:18" pos:end="187:28"><expr pos:start="187:18" pos:end="187:28"><name pos:start="187:18" pos:end="187:28">gen_opc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:31"><expr pos:start="189:9" pos:end="189:30"><call pos:start="189:9" pos:end="189:30"><name pos:start="189:9" pos:end="189:15">fprintf</name><argument_list pos:start="189:16" pos:end="189:30">(<argument pos:start="189:17" pos:end="189:23"><expr pos:start="189:17" pos:end="189:23"><name pos:start="189:17" pos:end="189:23">logfile</name></expr></argument>, <argument pos:start="189:26" pos:end="189:29"><expr pos:start="189:26" pos:end="189:29"><literal type="string" pos:start="189:26" pos:end="189:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="197:5" pos:end="197:31">/* generate machine code */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:76"><expr pos:start="199:5" pos:end="199:75"><name pos:start="199:5" pos:end="199:17">gen_code_size</name> <operator pos:start="199:19" pos:end="199:19">=</operator> <call pos:start="199:21" pos:end="199:75"><name pos:start="199:21" pos:end="199:31">dyngen_code</name><argument_list pos:start="199:32" pos:end="199:75">(<argument pos:start="199:33" pos:end="199:44"><expr pos:start="199:33" pos:end="199:44"><name pos:start="199:33" pos:end="199:44">gen_code_buf</name></expr></argument>, <argument pos:start="199:47" pos:end="199:57"><expr pos:start="199:47" pos:end="199:57"><name pos:start="199:47" pos:end="199:57">gen_opc_buf</name></expr></argument>, <argument pos:start="199:60" pos:end="199:74"><expr pos:start="199:60" pos:end="199:74"><name pos:start="199:60" pos:end="199:74">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:99"><expr pos:start="201:5" pos:end="201:98"><call pos:start="201:5" pos:end="201:98"><name pos:start="201:5" pos:end="201:22">flush_icache_range</name><argument_list pos:start="201:23" pos:end="201:98">(<argument pos:start="201:24" pos:end="201:50"><expr pos:start="201:24" pos:end="201:50"><operator pos:start="201:24" pos:end="201:24">(</operator><name pos:start="201:25" pos:end="201:32">unsigned</name> <name pos:start="201:34" pos:end="201:37">long</name><operator pos:start="201:38" pos:end="201:38">)</operator><name pos:start="201:39" pos:end="201:50">gen_code_buf</name></expr></argument>, <argument pos:start="201:53" pos:end="201:97"><expr pos:start="201:53" pos:end="201:97"><operator pos:start="201:53" pos:end="201:53">(</operator><name pos:start="201:54" pos:end="201:61">unsigned</name> <name pos:start="201:63" pos:end="201:66">long</name><operator pos:start="201:67" pos:end="201:67">)</operator><operator pos:start="201:68" pos:end="201:68">(</operator><name pos:start="201:69" pos:end="201:80">gen_code_buf</name> <operator pos:start="201:82" pos:end="201:82">+</operator> <name pos:start="201:84" pos:end="201:96">gen_code_size</name><operator pos:start="201:97" pos:end="201:97">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="208:0"><expr pos:start="203:5" pos:end="203:38"><operator pos:start="203:5" pos:end="203:5">*</operator><name pos:start="203:6" pos:end="203:22">gen_code_size_ptr</name> <operator pos:start="203:24" pos:end="203:24">=</operator> <name pos:start="203:26" pos:end="203:38">gen_code_size</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="207:1" pos:end="207:18">#<cpp:directive pos:start="207:2" pos:end="207:6">ifdef</cpp:directive> <name pos:start="207:8" pos:end="207:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="209:5" pos:end="272:0"><if pos:start="209:5" pos:end="272:0">if <condition pos:start="209:8" pos:end="209:17">(<expr pos:start="209:9" pos:end="209:16"><name pos:start="209:9" pos:end="209:16">loglevel</name></expr>)</condition> <block pos:start="209:19" pos:end="272:0">{<block_content pos:start="211:9" pos:end="267:24">

        <decl_stmt pos:start="211:9" pos:end="211:20"><decl pos:start="211:9" pos:end="211:19"><type pos:start="211:9" pos:end="211:17"><name pos:start="211:9" pos:end="211:15">uint8_t</name> <modifier pos:start="211:17" pos:end="211:17">*</modifier></type><name pos:start="211:18" pos:end="211:19">pc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:18"><decl pos:start="213:9" pos:end="213:17"><type pos:start="213:9" pos:end="213:11"><name pos:start="213:9" pos:end="213:11">int</name></type> <name pos:start="213:13" pos:end="213:17">count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="217:9" pos:end="230:0"><expr pos:start="217:9" pos:end="217:60"><call pos:start="217:9" pos:end="217:60"><name pos:start="217:9" pos:end="217:29">INIT_DISASSEMBLE_INFO</name><argument_list pos:start="217:30" pos:end="217:60">(<argument pos:start="217:31" pos:end="217:41"><expr pos:start="217:31" pos:end="217:41"><name pos:start="217:31" pos:end="217:41">disasm_info</name></expr></argument>, <argument pos:start="217:44" pos:end="217:50"><expr pos:start="217:44" pos:end="217:50"><name pos:start="217:44" pos:end="217:50">logfile</name></expr></argument>, <argument pos:start="217:53" pos:end="217:59"><expr pos:start="217:53" pos:end="217:59"><name pos:start="217:53" pos:end="217:59">fprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="219:1" pos:end="219:5">#<cpp:directive pos:start="219:2" pos:end="219:3">if</cpp:directive> <expr pos:start="219:5" pos:end="219:5"><literal type="number" pos:start="219:5" pos:end="219:5">0</literal></expr></cpp:if>        

        disasm_info.flavour = bfd_get_flavour (abfd);

        disasm_info.arch = bfd_get_arch (abfd);

        disasm_info.mach = bfd_get_mach (abfd);

<cpp:endif pos:start="227:1" pos:end="227:6">#<cpp:directive pos:start="227:2" pos:end="227:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="229:1" pos:end="229:22">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:22">WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="231:9" pos:end="234:0"><expr pos:start="231:9" pos:end="231:43"><name pos:start="231:9" pos:end="231:26"><name pos:start="231:9" pos:end="231:19">disasm_info</name><operator pos:start="231:20" pos:end="231:20">.</operator><name pos:start="231:21" pos:end="231:26">endian</name></name> <operator pos:start="231:28" pos:end="231:28">=</operator> <name pos:start="231:30" pos:end="231:43">BFD_ENDIAN_BIG</name></expr>;</expr_stmt>

<cpp:else pos:start="233:1" pos:end="233:5">#<cpp:directive pos:start="233:2" pos:end="233:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="235:9" pos:end="238:0"><expr pos:start="235:9" pos:end="235:46"><name pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:19">disasm_info</name><operator pos:start="235:20" pos:end="235:20">.</operator><name pos:start="235:21" pos:end="235:26">endian</name></name> <operator pos:start="235:28" pos:end="235:28">=</operator> <name pos:start="235:30" pos:end="235:46">BFD_ENDIAN_LITTLE</name></expr>;</expr_stmt>

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>        

        <expr_stmt pos:start="239:9" pos:end="239:46"><expr pos:start="239:9" pos:end="239:45"><name pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:19">disasm_info</name><operator pos:start="239:20" pos:end="239:20">.</operator><name pos:start="239:21" pos:end="239:24">mach</name></name> <operator pos:start="239:26" pos:end="239:26">=</operator> <name pos:start="239:28" pos:end="239:45">bfd_mach_i386_i386</name></expr>;</expr_stmt>



        <expr_stmt pos:start="243:9" pos:end="243:26"><expr pos:start="243:9" pos:end="243:25"><name pos:start="243:9" pos:end="243:10">pc</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <name pos:start="243:14" pos:end="243:25">gen_code_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:32"><expr pos:start="245:9" pos:end="245:31"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:19">disasm_info</name><operator pos:start="245:20" pos:end="245:20">.</operator><name pos:start="245:21" pos:end="245:26">buffer</name></name> <operator pos:start="245:28" pos:end="245:28">=</operator> <name pos:start="245:30" pos:end="245:31">pc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:51"><expr pos:start="247:9" pos:end="247:50"><name pos:start="247:9" pos:end="247:30"><name pos:start="247:9" pos:end="247:19">disasm_info</name><operator pos:start="247:20" pos:end="247:20">.</operator><name pos:start="247:21" pos:end="247:30">buffer_vma</name></name> <operator pos:start="247:32" pos:end="247:32">=</operator> <operator pos:start="247:34" pos:end="247:34">(</operator><name pos:start="247:35" pos:end="247:42">unsigned</name> <name pos:start="247:44" pos:end="247:47">long</name><operator pos:start="247:48" pos:end="247:48">)</operator><name pos:start="247:49" pos:end="247:50">pc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:55"><expr pos:start="249:9" pos:end="249:54"><name pos:start="249:9" pos:end="249:33"><name pos:start="249:9" pos:end="249:19">disasm_info</name><operator pos:start="249:20" pos:end="249:20">.</operator><name pos:start="249:21" pos:end="249:33">buffer_length</name></name> <operator pos:start="249:35" pos:end="249:35">=</operator> <operator pos:start="249:37" pos:end="249:37">*</operator><name pos:start="249:38" pos:end="249:54">gen_code_size_ptr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:65"><expr pos:start="251:9" pos:end="251:64"><call pos:start="251:9" pos:end="251:64"><name pos:start="251:9" pos:end="251:15">fprintf</name><argument_list pos:start="251:16" pos:end="251:64">(<argument pos:start="251:17" pos:end="251:23"><expr pos:start="251:17" pos:end="251:23"><name pos:start="251:17" pos:end="251:23">logfile</name></expr></argument>, <argument pos:start="251:26" pos:end="251:43"><expr pos:start="251:26" pos:end="251:43"><literal type="string" pos:start="251:26" pos:end="251:43">"OUT: [size=%d]\n"</literal></expr></argument>, <argument pos:start="251:46" pos:end="251:63"><expr pos:start="251:46" pos:end="251:63"><operator pos:start="251:46" pos:end="251:46">*</operator><name pos:start="251:47" pos:end="251:63">gen_code_size_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="253:9" pos:end="263:9">while <condition pos:start="253:15" pos:end="253:54">(<expr pos:start="253:16" pos:end="253:53"><name pos:start="253:16" pos:end="253:17">pc</name> <operator pos:start="253:19" pos:end="253:19">&lt;</operator> <name pos:start="253:21" pos:end="253:32">gen_code_buf</name> <operator pos:start="253:34" pos:end="253:34">+</operator> <operator pos:start="253:36" pos:end="253:36">*</operator><name pos:start="253:37" pos:end="253:53">gen_code_size_ptr</name></expr>)</condition> <block pos:start="253:56" pos:end="263:9">{<block_content pos:start="255:13" pos:end="261:24">

            <expr_stmt pos:start="255:13" pos:end="255:53"><expr pos:start="255:13" pos:end="255:52"><call pos:start="255:13" pos:end="255:52"><name pos:start="255:13" pos:end="255:19">fprintf</name><argument_list pos:start="255:20" pos:end="255:52">(<argument pos:start="255:21" pos:end="255:27"><expr pos:start="255:21" pos:end="255:27"><name pos:start="255:21" pos:end="255:27">logfile</name></expr></argument>, <argument pos:start="255:30" pos:end="255:41"><expr pos:start="255:30" pos:end="255:41"><literal type="string" pos:start="255:30" pos:end="255:41">"0x%08lx:  "</literal></expr></argument>, <argument pos:start="255:44" pos:end="255:51"><expr pos:start="255:44" pos:end="255:51"><operator pos:start="255:44" pos:end="255:44">(</operator><name pos:start="255:45" pos:end="255:48">long</name><operator pos:start="255:49" pos:end="255:49">)</operator><name pos:start="255:50" pos:end="255:51">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:69"><expr pos:start="257:13" pos:end="257:68"><name pos:start="257:13" pos:end="257:17">count</name> <operator pos:start="257:19" pos:end="257:19">=</operator> <call pos:start="257:21" pos:end="257:68"><name pos:start="257:21" pos:end="257:35">print_insn_i386</name><argument_list pos:start="257:36" pos:end="257:68">(<argument pos:start="257:37" pos:end="257:53"><expr pos:start="257:37" pos:end="257:53"><operator pos:start="257:37" pos:end="257:37">(</operator><name pos:start="257:38" pos:end="257:45">unsigned</name> <name pos:start="257:47" pos:end="257:50">long</name><operator pos:start="257:51" pos:end="257:51">)</operator><name pos:start="257:52" pos:end="257:53">pc</name></expr></argument>, <argument pos:start="257:56" pos:end="257:67"><expr pos:start="257:56" pos:end="257:67"><operator pos:start="257:56" pos:end="257:56">&amp;</operator><name pos:start="257:57" pos:end="257:67">disasm_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:35"><expr pos:start="259:13" pos:end="259:34"><call pos:start="259:13" pos:end="259:34"><name pos:start="259:13" pos:end="259:19">fprintf</name><argument_list pos:start="259:20" pos:end="259:34">(<argument pos:start="259:21" pos:end="259:27"><expr pos:start="259:21" pos:end="259:27"><name pos:start="259:21" pos:end="259:27">logfile</name></expr></argument>, <argument pos:start="259:30" pos:end="259:33"><expr pos:start="259:30" pos:end="259:33"><literal type="string" pos:start="259:30" pos:end="259:33">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:24"><expr pos:start="261:13" pos:end="261:23"><name pos:start="261:13" pos:end="261:14">pc</name> <operator pos:start="261:16" pos:end="261:17">+=</operator> <name pos:start="261:19" pos:end="261:23">count</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="265:9" pos:end="265:31"><expr pos:start="265:9" pos:end="265:30"><call pos:start="265:9" pos:end="265:30"><name pos:start="265:9" pos:end="265:15">fprintf</name><argument_list pos:start="265:16" pos:end="265:30">(<argument pos:start="265:17" pos:end="265:23"><expr pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:23">logfile</name></expr></argument>, <argument pos:start="265:26" pos:end="265:29"><expr pos:start="265:26" pos:end="265:29"><literal type="string" pos:start="265:26" pos:end="265:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:24"><expr pos:start="267:9" pos:end="267:23"><call pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:14">fflush</name><argument_list pos:start="267:15" pos:end="267:23">(<argument pos:start="267:16" pos:end="267:22"><expr pos:start="267:16" pos:end="267:22"><name pos:start="267:16" pos:end="267:22">logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="271:1" pos:end="271:6">#<cpp:directive pos:start="271:2" pos:end="271:6">endif</cpp:directive></cpp:endif>

    <return pos:start="273:5" pos:end="273:13">return <expr pos:start="273:12" pos:end="273:12"><literal type="number" pos:start="273:12" pos:end="273:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
