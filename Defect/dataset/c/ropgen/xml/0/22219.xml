<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22219.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">megasas_init_firmware</name><parameter_list pos:start="1:33" pos:end="1:66">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">MegasasState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:60">MegasasCmd</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">cmd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:15">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">pa_hi</name></decl>, <decl pos:start="5:21" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:21" pos:end="5:25">pa_lo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:28">iq_pa</name></decl>, <decl pos:start="7:31" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:31" pos:end="7:40">initq_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:25">mfi_init_qinfo</name></name> <modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:32">initq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:25">= <expr pos:start="13:15" pos:end="13:25"><name pos:start="13:15" pos:end="13:25">MFI_STAT_OK</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:60"><expr pos:start="17:5" pos:end="17:59"><name pos:start="17:5" pos:end="17:9">pa_lo</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:59"><name pos:start="17:13" pos:end="17:23">le32_to_cpu</name><argument_list pos:start="17:24" pos:end="17:59">(<argument pos:start="17:25" pos:end="17:58"><expr pos:start="17:25" pos:end="17:58"><name pos:start="17:25" pos:end="17:58"><name pos:start="17:25" pos:end="17:27">cmd</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:34">frame</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:40">init</name><operator pos:start="17:41" pos:end="17:41">.</operator><name pos:start="17:42" pos:end="17:58">qinfo_new_addr_lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:60"><expr pos:start="19:5" pos:end="19:59"><name pos:start="19:5" pos:end="19:9">pa_hi</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:59"><name pos:start="19:13" pos:end="19:23">le32_to_cpu</name><argument_list pos:start="19:24" pos:end="19:59">(<argument pos:start="19:25" pos:end="19:58"><expr pos:start="19:25" pos:end="19:58"><name pos:start="19:25" pos:end="19:58"><name pos:start="19:25" pos:end="19:27">cmd</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:34">frame</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:40">init</name><operator pos:start="19:41" pos:end="19:41">.</operator><name pos:start="19:42" pos:end="19:58">qinfo_new_addr_hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:9">iq_pa</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <operator pos:start="21:13" pos:end="21:13">(</operator><operator pos:start="21:14" pos:end="21:14">(</operator><operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:23">uint64_t</name><operator pos:start="21:24" pos:end="21:24">)</operator> <name pos:start="21:26" pos:end="21:30">pa_hi</name> <operator pos:start="21:32" pos:end="21:33">&lt;&lt;</operator> <literal type="number" pos:start="21:35" pos:end="21:36">32</literal><operator pos:start="21:37" pos:end="21:37">)</operator> <operator pos:start="21:39" pos:end="21:39">|</operator> <name pos:start="21:41" pos:end="21:45">pa_lo</name><operator pos:start="21:46" pos:end="21:46">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:49"><expr pos:start="23:5" pos:end="23:48"><call pos:start="23:5" pos:end="23:48"><name pos:start="23:5" pos:end="23:31">trace_megasas_init_firmware</name><argument_list pos:start="23:32" pos:end="23:48">(<argument pos:start="23:33" pos:end="23:47"><expr pos:start="23:33" pos:end="23:47"><operator pos:start="23:33" pos:end="23:33">(</operator><name pos:start="23:34" pos:end="23:41">uint64_t</name><operator pos:start="23:42" pos:end="23:42">)</operator><name pos:start="23:43" pos:end="23:47">iq_pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:14">initq_size</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <sizeof pos:start="25:18" pos:end="25:31">sizeof<argument_list pos:start="25:24" pos:end="25:31">(<argument pos:start="25:25" pos:end="25:30"><expr pos:start="25:25" pos:end="25:30"><operator pos:start="25:25" pos:end="25:25">*</operator><name pos:start="25:26" pos:end="25:30">initq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:59"><expr pos:start="27:5" pos:end="27:58"><name pos:start="27:5" pos:end="27:9">initq</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:58"><name pos:start="27:13" pos:end="27:35">cpu_physical_memory_map</name><argument_list pos:start="27:36" pos:end="27:58">(<argument pos:start="27:37" pos:end="27:41"><expr pos:start="27:37" pos:end="27:41"><name pos:start="27:37" pos:end="27:41">iq_pa</name></expr></argument>, <argument pos:start="27:44" pos:end="27:54"><expr pos:start="27:44" pos:end="27:54"><operator pos:start="27:44" pos:end="27:44">&amp;</operator><name pos:start="27:45" pos:end="27:54">initq_size</name></expr></argument>, <argument pos:start="27:57" pos:end="27:57"><expr pos:start="27:57" pos:end="27:57"><literal type="number" pos:start="27:57" pos:end="27:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:47">(<expr pos:start="29:9" pos:end="29:46"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:14">initq</name> <operator pos:start="29:16" pos:end="29:17">||</operator> <name pos:start="29:19" pos:end="29:28">initq_size</name> <operator pos:start="29:30" pos:end="29:31">!=</operator> <sizeof pos:start="29:33" pos:end="29:46">sizeof<argument_list pos:start="29:39" pos:end="29:46">(<argument pos:start="29:40" pos:end="29:45"><expr pos:start="29:40" pos:end="29:45"><operator pos:start="29:40" pos:end="29:40">*</operator><name pos:start="29:41" pos:end="29:45">initq</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="29:49" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:17">

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><call pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:38">trace_megasas_initq_map_failed</name><argument_list pos:start="31:39" pos:end="31:50">(<argument pos:start="31:40" pos:end="31:49"><expr pos:start="31:40" pos:end="31:49"><name pos:start="31:40" pos:end="31:49"><name pos:start="31:40" pos:end="31:42">cmd</name><operator pos:start="31:43" pos:end="31:44">-&gt;</operator><name pos:start="31:45" pos:end="31:49">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:22">event_count</name></name><operator pos:start="33:23" pos:end="33:24">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:43">MFI_STAT_MEMORY_NOT_AVAILABLE</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:65"><expr pos:start="41:5" pos:end="41:64"><name pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:22">reply_queue_len</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:55"><name pos:start="41:26" pos:end="41:36">le32_to_cpu</name><argument_list pos:start="41:37" pos:end="41:55">(<argument pos:start="41:38" pos:end="41:54"><expr pos:start="41:38" pos:end="41:54"><name pos:start="41:38" pos:end="41:54"><name pos:start="41:38" pos:end="41:42">initq</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:54">rq_entries</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:57" pos:end="41:57">&amp;</operator> <literal type="number" pos:start="41:59" pos:end="41:64">0xFFFF</literal></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:40">(<expr pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:26">reply_queue_len</name></name> <operator pos:start="43:28" pos:end="43:28">&gt;</operator> <name pos:start="43:30" pos:end="43:39"><name pos:start="43:30" pos:end="43:30">s</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:39">fw_cmds</name></name></expr>)</condition> <block pos:start="43:42" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:17">

        <expr_stmt pos:start="45:9" pos:end="45:69"><expr pos:start="45:9" pos:end="45:68"><call pos:start="45:9" pos:end="45:68"><name pos:start="45:9" pos:end="45:36">trace_megasas_initq_mismatch</name><argument_list pos:start="45:37" pos:end="45:68">(<argument pos:start="45:38" pos:end="45:55"><expr pos:start="45:38" pos:end="45:55"><name pos:start="45:38" pos:end="45:55"><name pos:start="45:38" pos:end="45:38">s</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:55">reply_queue_len</name></name></expr></argument>, <argument pos:start="45:58" pos:end="45:67"><expr pos:start="45:58" pos:end="45:67"><name pos:start="45:58" pos:end="45:67"><name pos:start="45:58" pos:end="45:58">s</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:67">fw_cmds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:22">event_count</name></name><operator pos:start="47:23" pos:end="47:24">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:40">MFI_STAT_INVALID_PARAMETER</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:9">pa_lo</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:23">le32_to_cpu</name><argument_list pos:start="55:24" pos:end="55:42">(<argument pos:start="55:25" pos:end="55:41"><expr pos:start="55:25" pos:end="55:41"><name pos:start="55:25" pos:end="55:41"><name pos:start="55:25" pos:end="55:29">initq</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:41">rq_addr_lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:9">pa_hi</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:42"><name pos:start="57:13" pos:end="57:23">le32_to_cpu</name><argument_list pos:start="57:24" pos:end="57:42">(<argument pos:start="57:25" pos:end="57:41"><expr pos:start="57:25" pos:end="57:41"><name pos:start="57:25" pos:end="57:41"><name pos:start="57:25" pos:end="57:29">initq</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:41">rq_addr_hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:57"><expr pos:start="59:5" pos:end="59:56"><name pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:21">reply_queue_pa</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <operator pos:start="59:25" pos:end="59:25">(</operator><operator pos:start="59:26" pos:end="59:26">(</operator><name pos:start="59:27" pos:end="59:34">uint64_t</name><operator pos:start="59:35" pos:end="59:35">)</operator> <name pos:start="59:37" pos:end="59:41">pa_hi</name> <operator pos:start="59:43" pos:end="59:44">&lt;&lt;</operator> <literal type="number" pos:start="59:46" pos:end="59:47">32</literal><operator pos:start="59:48" pos:end="59:48">)</operator> <operator pos:start="59:50" pos:end="59:50">|</operator> <name pos:start="59:52" pos:end="59:56">pa_lo</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:43"><expr pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:9">pa_lo</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <call pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:23">le32_to_cpu</name><argument_list pos:start="61:24" pos:end="61:42">(<argument pos:start="61:25" pos:end="61:41"><expr pos:start="61:25" pos:end="61:41"><name pos:start="61:25" pos:end="61:41"><name pos:start="61:25" pos:end="61:29">initq</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:41">ci_addr_lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:9">pa_hi</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:42"><name pos:start="63:13" pos:end="63:23">le32_to_cpu</name><argument_list pos:start="63:24" pos:end="63:42">(<argument pos:start="63:25" pos:end="63:41"><expr pos:start="63:25" pos:end="63:41"><name pos:start="63:25" pos:end="63:41"><name pos:start="63:25" pos:end="63:29">initq</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:41">ci_addr_hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:54"><expr pos:start="65:5" pos:end="65:53"><name pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:18">consumer_pa</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <operator pos:start="65:22" pos:end="65:22">(</operator><operator pos:start="65:23" pos:end="65:23">(</operator><name pos:start="65:24" pos:end="65:31">uint64_t</name><operator pos:start="65:32" pos:end="65:32">)</operator> <name pos:start="65:34" pos:end="65:38">pa_hi</name> <operator pos:start="65:40" pos:end="65:41">&lt;&lt;</operator> <literal type="number" pos:start="65:43" pos:end="65:44">32</literal><operator pos:start="65:45" pos:end="65:45">)</operator> <operator pos:start="65:47" pos:end="65:47">|</operator> <name pos:start="65:49" pos:end="65:53">pa_lo</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:9">pa_lo</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:42"><name pos:start="67:13" pos:end="67:23">le32_to_cpu</name><argument_list pos:start="67:24" pos:end="67:42">(<argument pos:start="67:25" pos:end="67:41"><expr pos:start="67:25" pos:end="67:41"><name pos:start="67:25" pos:end="67:41"><name pos:start="67:25" pos:end="67:29">initq</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:41">pi_addr_lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:9">pa_hi</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:23">le32_to_cpu</name><argument_list pos:start="69:24" pos:end="69:42">(<argument pos:start="69:25" pos:end="69:41"><expr pos:start="69:25" pos:end="69:41"><name pos:start="69:25" pos:end="69:41"><name pos:start="69:25" pos:end="69:29">initq</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:41">pi_addr_hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:54"><expr pos:start="71:5" pos:end="71:53"><name pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:18">producer_pa</name></name> <operator pos:start="71:20" pos:end="71:20">=</operator> <operator pos:start="71:22" pos:end="71:22">(</operator><operator pos:start="71:23" pos:end="71:23">(</operator><name pos:start="71:24" pos:end="71:31">uint64_t</name><operator pos:start="71:32" pos:end="71:32">)</operator> <name pos:start="71:34" pos:end="71:38">pa_hi</name> <operator pos:start="71:40" pos:end="71:41">&lt;&lt;</operator> <literal type="number" pos:start="71:43" pos:end="71:44">32</literal><operator pos:start="71:45" pos:end="71:45">)</operator> <operator pos:start="71:47" pos:end="71:47">|</operator> <name pos:start="71:49" pos:end="71:53">pa_lo</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:54"><expr pos:start="73:5" pos:end="73:53"><name pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:23">reply_queue_head</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <call pos:start="73:27" pos:end="73:53"><name pos:start="73:27" pos:end="73:37">ldl_le_phys</name><argument_list pos:start="73:38" pos:end="73:53">(<argument pos:start="73:39" pos:end="73:52"><expr pos:start="73:39" pos:end="73:52"><name pos:start="73:39" pos:end="73:52"><name pos:start="73:39" pos:end="73:39">s</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:52">producer_pa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:54"><expr pos:start="75:5" pos:end="75:53"><name pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:23">reply_queue_tail</name></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:53"><name pos:start="75:27" pos:end="75:37">ldl_le_phys</name><argument_list pos:start="75:38" pos:end="75:53">(<argument pos:start="75:39" pos:end="75:52"><expr pos:start="75:39" pos:end="75:52"><name pos:start="75:39" pos:end="75:52"><name pos:start="75:39" pos:end="75:39">s</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:52">consumer_pa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:38"><expr pos:start="77:5" pos:end="77:37"><name pos:start="77:5" pos:end="77:9">flags</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:37"><name pos:start="77:13" pos:end="77:23">le32_to_cpu</name><argument_list pos:start="77:24" pos:end="77:37">(<argument pos:start="77:25" pos:end="77:36"><expr pos:start="77:25" pos:end="77:36"><name pos:start="77:25" pos:end="77:36"><name pos:start="77:25" pos:end="77:29">initq</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:36">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:41">(<expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:13">flags</name> <operator pos:start="79:15" pos:end="79:15">&amp;</operator> <name pos:start="79:17" pos:end="79:40">MFI_QUEUE_FLAG_CONTEXT64</name></expr>)</condition> <block pos:start="79:43" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:45">

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:16">flags</name></name> <operator pos:start="81:18" pos:end="81:19">|=</operator> <name pos:start="81:21" pos:end="81:44">MEGASAS_MASK_USE_QUEUE64</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="89:57"><expr pos:start="85:5" pos:end="89:56"><call pos:start="85:5" pos:end="89:56"><name pos:start="85:5" pos:end="85:28">trace_megasas_init_queue</name><argument_list pos:start="85:29" pos:end="89:56">(<argument pos:start="85:30" pos:end="85:61"><expr pos:start="85:30" pos:end="85:61"><operator pos:start="85:30" pos:end="85:30">(</operator><name pos:start="85:31" pos:end="85:38">unsigned</name> <name pos:start="85:40" pos:end="85:43">long</name><operator pos:start="85:44" pos:end="85:44">)</operator><name pos:start="85:45" pos:end="85:61"><name pos:start="85:45" pos:end="85:45">s</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:61">reply_queue_pa</name></name></expr></argument>,

                             <argument pos:start="87:30" pos:end="87:47"><expr pos:start="87:30" pos:end="87:47"><name pos:start="87:30" pos:end="87:47"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:47">reply_queue_len</name></name></expr></argument>, <argument pos:start="87:50" pos:end="87:68"><expr pos:start="87:50" pos:end="87:68"><name pos:start="87:50" pos:end="87:68"><name pos:start="87:50" pos:end="87:50">s</name><operator pos:start="87:51" pos:end="87:52">-&gt;</operator><name pos:start="87:53" pos:end="87:68">reply_queue_head</name></name></expr></argument>,

                             <argument pos:start="89:30" pos:end="89:48"><expr pos:start="89:30" pos:end="89:48"><name pos:start="89:30" pos:end="89:48"><name pos:start="89:30" pos:end="89:30">s</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:48">reply_queue_tail</name></name></expr></argument>, <argument pos:start="89:51" pos:end="89:55"><expr pos:start="89:51" pos:end="89:55"><name pos:start="89:51" pos:end="89:55">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><call pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:24">megasas_reset_frames</name><argument_list pos:start="91:25" pos:end="91:27">(<argument pos:start="91:26" pos:end="91:26"><expr pos:start="91:26" pos:end="91:26"><name pos:start="91:26" pos:end="91:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:42"><expr pos:start="93:5" pos:end="93:41"><name pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:15">fw_state</name></name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:41">MFI_FWSTATE_OPERATIONAL</name></expr>;</expr_stmt>

<label pos:start="95:1" pos:end="95:4"><name pos:start="95:1" pos:end="95:3">out</name>:</label>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:14">(<expr pos:start="97:9" pos:end="97:13"><name pos:start="97:9" pos:end="97:13">initq</name></expr>)</condition> <block pos:start="97:16" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:59">

        <expr_stmt pos:start="99:9" pos:end="99:59"><expr pos:start="99:9" pos:end="99:58"><call pos:start="99:9" pos:end="99:58"><name pos:start="99:9" pos:end="99:33">cpu_physical_memory_unmap</name><argument_list pos:start="99:34" pos:end="99:58">(<argument pos:start="99:35" pos:end="99:39"><expr pos:start="99:35" pos:end="99:39"><name pos:start="99:35" pos:end="99:39">initq</name></expr></argument>, <argument pos:start="99:42" pos:end="99:51"><expr pos:start="99:42" pos:end="99:51"><name pos:start="99:42" pos:end="99:51">initq_size</name></expr></argument>, <argument pos:start="99:54" pos:end="99:54"><expr pos:start="99:54" pos:end="99:54"><literal type="number" pos:start="99:54" pos:end="99:54">0</literal></expr></argument>, <argument pos:start="99:57" pos:end="99:57"><expr pos:start="99:57" pos:end="99:57"><literal type="number" pos:start="99:57" pos:end="99:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="103:5" pos:end="103:15">return <expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
