<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1927.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">armv7m_nvic_realize</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:43">DeviceState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:57">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">NVICState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:28">= <expr pos:start="5:20" pos:end="5:28"><call pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:23">NVIC</name><argument_list pos:start="5:24" pos:end="5:28">(<argument pos:start="5:25" pos:end="5:27"><expr pos:start="5:25" pos:end="5:27"><name pos:start="5:25" pos:end="5:27">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SysBusDevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:29">systick_sbd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:10">cpu</name></name> <operator pos:start="13:12" pos:end="13:12">=</operator> <call pos:start="13:14" pos:end="13:37"><name pos:start="13:14" pos:end="13:20">ARM_CPU</name><argument_list pos:start="13:21" pos:end="13:37">(<argument pos:start="13:22" pos:end="13:36"><expr pos:start="13:22" pos:end="13:36"><call pos:start="13:22" pos:end="13:36"><name pos:start="13:22" pos:end="13:33">qemu_get_cpu</name><argument_list pos:start="13:34" pos:end="13:36">(<argument pos:start="13:35" pos:end="13:35"><expr pos:start="13:35" pos:end="13:35"><literal type="number" pos:start="13:35" pos:end="13:35">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:19"><expr pos:start="15:5" pos:end="15:18"><call pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:18">(<argument pos:start="15:12" pos:end="15:17"><expr pos:start="15:12" pos:end="15:17"><name pos:start="15:12" pos:end="15:17"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:17">cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:34">(<expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">num_irq</name></name> <operator pos:start="19:20" pos:end="19:20">&gt;</operator> <name pos:start="19:22" pos:end="19:33">NVIC_MAX_IRQ</name></expr>)</condition> <block pos:start="19:36" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:72"><expr pos:start="21:9" pos:end="21:71"><call pos:start="21:9" pos:end="21:71"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:71">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:58"><expr pos:start="21:26" pos:end="21:58"><literal type="string" pos:start="21:26" pos:end="21:58">"num-irq %d exceeds NVIC maximum"</literal></expr></argument>, <argument pos:start="21:61" pos:end="21:70"><expr pos:start="21:61" pos:end="21:70"><name pos:start="21:61" pos:end="21:70"><name pos:start="21:61" pos:end="21:61">s</name><operator pos:start="21:62" pos:end="21:63">-&gt;</operator><name pos:start="21:64" pos:end="21:70">num_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><call pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:21">qdev_init_gpio_in</name><argument_list pos:start="29:22" pos:end="29:53">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">dev</name></expr></argument>, <argument pos:start="29:28" pos:end="29:40"><expr pos:start="29:28" pos:end="29:40"><name pos:start="29:28" pos:end="29:40">set_irq_level</name></expr></argument>, <argument pos:start="29:43" pos:end="29:52"><expr pos:start="29:43" pos:end="29:52"><name pos:start="29:43" pos:end="29:52"><name pos:start="29:43" pos:end="29:43">s</name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:52">num_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:54">/* include space for internal exception vectors */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:14">num_irq</name></name> <operator pos:start="35:16" pos:end="35:17">+=</operator> <name pos:start="35:19" pos:end="35:32">NVIC_FIRST_IRQ</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:74"><expr pos:start="39:5" pos:end="39:73"><call pos:start="39:5" pos:end="39:73"><name pos:start="39:5" pos:end="39:28">object_property_set_bool</name><argument_list pos:start="39:29" pos:end="39:73">(<argument pos:start="39:30" pos:end="39:48"><expr pos:start="39:30" pos:end="39:48"><call pos:start="39:30" pos:end="39:48"><name pos:start="39:30" pos:end="39:35">OBJECT</name><argument_list pos:start="39:36" pos:end="39:48">(<argument pos:start="39:37" pos:end="39:47"><expr pos:start="39:37" pos:end="39:47"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:47"><name pos:start="39:38" pos:end="39:38">s</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:47">systick</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:51" pos:end="39:54"><expr pos:start="39:51" pos:end="39:54"><name pos:start="39:51" pos:end="39:54">true</name></expr></argument>, <argument pos:start="39:57" pos:end="39:66"><expr pos:start="39:57" pos:end="39:66"><literal type="string" pos:start="39:57" pos:end="39:66">"realized"</literal></expr></argument>, <argument pos:start="39:69" pos:end="39:72"><expr pos:start="39:69" pos:end="39:72"><operator pos:start="39:69" pos:end="39:69">&amp;</operator><name pos:start="39:70" pos:end="39:72">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:11">err</name> <operator pos:start="41:13" pos:end="41:14">!=</operator> <name pos:start="41:16" pos:end="41:19">NULL</name></expr>)</condition> <block pos:start="41:22" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><call pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:23">error_propagate</name><argument_list pos:start="43:24" pos:end="43:34">(<argument pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:28"><name pos:start="43:25" pos:end="43:28">errp</name></expr></argument>, <argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:46"><expr pos:start="49:5" pos:end="49:45"><name pos:start="49:5" pos:end="49:15">systick_sbd</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:45"><name pos:start="49:19" pos:end="49:32">SYS_BUS_DEVICE</name><argument_list pos:start="49:33" pos:end="49:45">(<argument pos:start="49:34" pos:end="49:44"><expr pos:start="49:34" pos:end="49:44"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:44"><name pos:start="49:35" pos:end="49:35">s</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:44">systick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:74"><expr pos:start="51:5" pos:end="53:73"><call pos:start="51:5" pos:end="53:73"><name pos:start="51:5" pos:end="51:22">sysbus_connect_irq</name><argument_list pos:start="51:23" pos:end="53:73">(<argument pos:start="51:24" pos:end="51:34"><expr pos:start="51:24" pos:end="51:34"><name pos:start="51:24" pos:end="51:34">systick_sbd</name></expr></argument>, <argument pos:start="51:37" pos:end="51:37"><expr pos:start="51:37" pos:end="51:37"><literal type="number" pos:start="51:37" pos:end="51:37">0</literal></expr></argument>,

                       <argument pos:start="53:24" pos:end="53:72"><expr pos:start="53:24" pos:end="53:72"><call pos:start="53:24" pos:end="53:72"><name pos:start="53:24" pos:end="53:45">qdev_get_gpio_in_named</name><argument_list pos:start="53:46" pos:end="53:72">(<argument pos:start="53:47" pos:end="53:49"><expr pos:start="53:47" pos:end="53:49"><name pos:start="53:47" pos:end="53:49">dev</name></expr></argument>, <argument pos:start="53:52" pos:end="53:68"><expr pos:start="53:52" pos:end="53:68"><literal type="string" pos:start="53:52" pos:end="53:68">"systick-trigger"</literal></expr></argument>, <argument pos:start="53:71" pos:end="53:71"><expr pos:start="53:71" pos:end="53:71"><literal type="number" pos:start="53:71" pos:end="53:71">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="75:7">/* The NVIC and System Control Space (SCS) starts at 0xe000e000

     * and looks like this:

     *  0x004 - ICTR

     *  0x010 - 0xff - systick

     *  0x100..0x7ec - NVIC

     *  0x7f0..0xcff - Reserved

     *  0xd00..0xd3c - SCS registers

     *  0xd40..0xeff - Reserved or Not implemented

     *  0xf00 - STIR

     */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:65"><expr pos:start="77:5" pos:end="77:64"><call pos:start="77:5" pos:end="77:64"><name pos:start="77:5" pos:end="77:22">memory_region_init</name><argument_list pos:start="77:23" pos:end="77:64">(<argument pos:start="77:24" pos:end="77:36"><expr pos:start="77:24" pos:end="77:36"><operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:36"><name pos:start="77:25" pos:end="77:25">s</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:36">container</name></name></expr></argument>, <argument pos:start="77:39" pos:end="77:47"><expr pos:start="77:39" pos:end="77:47"><call pos:start="77:39" pos:end="77:47"><name pos:start="77:39" pos:end="77:44">OBJECT</name><argument_list pos:start="77:45" pos:end="77:47">(<argument pos:start="77:46" pos:end="77:46"><expr pos:start="77:46" pos:end="77:46"><name pos:start="77:46" pos:end="77:46">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:50" pos:end="77:55"><expr pos:start="77:50" pos:end="77:55"><literal type="string" pos:start="77:50" pos:end="77:55">"nvic"</literal></expr></argument>, <argument pos:start="77:58" pos:end="77:63"><expr pos:start="77:58" pos:end="77:63"><literal type="number" pos:start="77:58" pos:end="77:63">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="79:5" pos:end="83:7">/* The system register region goes at the bottom of the priority

     * stack as it covers the whole page.

     */</comment>

    <expr_stmt pos:start="85:5" pos:end="87:50"><expr pos:start="85:5" pos:end="87:49"><call pos:start="85:5" pos:end="87:49"><name pos:start="85:5" pos:end="85:25">memory_region_init_io</name><argument_list pos:start="85:26" pos:end="87:49">(<argument pos:start="85:27" pos:end="85:39"><expr pos:start="85:27" pos:end="85:39"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:39"><name pos:start="85:28" pos:end="85:28">s</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:39">sysregmem</name></name></expr></argument>, <argument pos:start="85:42" pos:end="85:50"><expr pos:start="85:42" pos:end="85:50"><call pos:start="85:42" pos:end="85:50"><name pos:start="85:42" pos:end="85:47">OBJECT</name><argument_list pos:start="85:48" pos:end="85:50">(<argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><name pos:start="85:49" pos:end="85:49">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:53" pos:end="85:68"><expr pos:start="85:53" pos:end="85:68"><operator pos:start="85:53" pos:end="85:53">&amp;</operator><name pos:start="85:54" pos:end="85:68">nvic_sysreg_ops</name></expr></argument>, <argument pos:start="85:71" pos:end="85:71"><expr pos:start="85:71" pos:end="85:71"><name pos:start="85:71" pos:end="85:71">s</name></expr></argument>,

                          <argument pos:start="87:27" pos:end="87:40"><expr pos:start="87:27" pos:end="87:40"><literal type="string" pos:start="87:27" pos:end="87:40">"nvic_sysregs"</literal></expr></argument>, <argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><literal type="number" pos:start="87:43" pos:end="87:48">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:65"><expr pos:start="89:5" pos:end="89:64"><call pos:start="89:5" pos:end="89:64"><name pos:start="89:5" pos:end="89:31">memory_region_add_subregion</name><argument_list pos:start="89:32" pos:end="89:64">(<argument pos:start="89:33" pos:end="89:45"><expr pos:start="89:33" pos:end="89:45"><operator pos:start="89:33" pos:end="89:33">&amp;</operator><name pos:start="89:34" pos:end="89:45"><name pos:start="89:34" pos:end="89:34">s</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:45">container</name></name></expr></argument>, <argument pos:start="89:48" pos:end="89:48"><expr pos:start="89:48" pos:end="89:48"><literal type="number" pos:start="89:48" pos:end="89:48">0</literal></expr></argument>, <argument pos:start="89:51" pos:end="89:63"><expr pos:start="89:51" pos:end="89:63"><operator pos:start="89:51" pos:end="89:51">&amp;</operator><name pos:start="89:52" pos:end="89:63"><name pos:start="89:52" pos:end="89:52">s</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:63">sysregmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="95:43"><expr pos:start="91:5" pos:end="95:42"><call pos:start="91:5" pos:end="95:42"><name pos:start="91:5" pos:end="91:39">memory_region_add_subregion_overlap</name><argument_list pos:start="91:40" pos:end="95:42">(<argument pos:start="91:41" pos:end="91:53"><expr pos:start="91:41" pos:end="91:53"><operator pos:start="91:41" pos:end="91:41">&amp;</operator><name pos:start="91:42" pos:end="91:53"><name pos:start="91:42" pos:end="91:42">s</name><operator pos:start="91:43" pos:end="91:44">-&gt;</operator><name pos:start="91:45" pos:end="91:53">container</name></name></expr></argument>, <argument pos:start="91:56" pos:end="91:59"><expr pos:start="91:56" pos:end="91:59"><literal type="number" pos:start="91:56" pos:end="91:59">0x10</literal></expr></argument>,

                                        <argument pos:start="93:41" pos:end="93:78"><expr pos:start="93:41" pos:end="93:78"><call pos:start="93:41" pos:end="93:78"><name pos:start="93:41" pos:end="93:62">sysbus_mmio_get_region</name><argument_list pos:start="93:63" pos:end="93:78">(<argument pos:start="93:64" pos:end="93:74"><expr pos:start="93:64" pos:end="93:74"><name pos:start="93:64" pos:end="93:74">systick_sbd</name></expr></argument>, <argument pos:start="93:77" pos:end="93:77"><expr pos:start="93:77" pos:end="93:77"><literal type="number" pos:start="93:77" pos:end="93:77">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="95:41" pos:end="95:41"><expr pos:start="95:41" pos:end="95:41"><literal type="number" pos:start="95:41" pos:end="95:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:57"><expr pos:start="99:5" pos:end="99:56"><call pos:start="99:5" pos:end="99:56"><name pos:start="99:5" pos:end="99:20">sysbus_init_mmio</name><argument_list pos:start="99:21" pos:end="99:56">(<argument pos:start="99:22" pos:end="99:40"><expr pos:start="99:22" pos:end="99:40"><call pos:start="99:22" pos:end="99:40"><name pos:start="99:22" pos:end="99:35">SYS_BUS_DEVICE</name><argument_list pos:start="99:36" pos:end="99:40">(<argument pos:start="99:37" pos:end="99:39"><expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:39">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:43" pos:end="99:55"><expr pos:start="99:43" pos:end="99:55"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:55"><name pos:start="99:44" pos:end="99:44">s</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:55">container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
