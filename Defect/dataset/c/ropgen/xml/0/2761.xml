<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2761.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">protocol_client_init</name><parameter_list pos:start="1:32" pos:end="1:72">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:40">VncState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">vs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:71"><decl pos:start="1:62" pos:end="1:71"><type pos:start="1:62" pos:end="1:71"><name pos:start="1:62" pos:end="1:67">size_t</name></type> <name pos:start="1:69" pos:end="1:71">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:18"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:18">[<expr pos:start="5:14" pos:end="5:17"><literal type="number" pos:start="5:14" pos:end="5:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">VncShareMode</name></type> <name pos:start="7:18" pos:end="7:21">mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:70"><expr pos:start="13:5" pos:end="13:69"><name pos:start="13:5" pos:end="13:8">mode</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <ternary pos:start="13:12" pos:end="13:69"><condition pos:start="13:12" pos:end="13:20"><expr pos:start="13:12" pos:end="13:18"><name pos:start="13:12" pos:end="13:18"><name pos:start="13:12" pos:end="13:15">data</name><index pos:start="13:16" pos:end="13:18">[<expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr>]</index></name></expr> ?</condition><then pos:start="13:22" pos:end="13:42"> <expr pos:start="13:22" pos:end="13:42"><name pos:start="13:22" pos:end="13:42">VNC_SHARE_MODE_SHARED</name></expr> </then><else pos:start="13:44" pos:end="13:69">: <expr pos:start="13:46" pos:end="13:69"><name pos:start="13:46" pos:end="13:69">VNC_SHARE_MODE_EXCLUSIVE</name></expr></else></ternary></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="123:5">switch <condition pos:start="15:12" pos:end="15:33">(<expr pos:start="15:13" pos:end="15:32"><name pos:start="15:13" pos:end="15:32"><name pos:start="15:13" pos:end="15:14">vs</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:18">vd</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:32">share_policy</name></name></expr>)</condition> <block pos:start="15:35" pos:end="123:5">{<block_content pos:start="17:5" pos:end="121:14">

    <case pos:start="17:5" pos:end="17:33">case <expr pos:start="17:10" pos:end="17:32"><name pos:start="17:10" pos:end="17:32">VNC_SHARE_POLICY_IGNORE</name></expr>:</case>

        <comment type="block" pos:start="19:9" pos:end="31:11">/*

         * Ignore the shared flag.  Nothing to do here.

         *

         * Doesn't conform to the rfb spec but is traditional qemu

         * behavior, thus left here as option for compatibility

         * reasons.

         */</comment>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:42">case <expr pos:start="35:10" pos:end="35:41"><name pos:start="35:10" pos:end="35:41">VNC_SHARE_POLICY_ALLOW_EXCLUSIVE</name></expr>:</case>

        <comment type="block" pos:start="37:9" pos:end="53:11">/*

         * Policy: Allow clients ask for exclusive access.

         *

         * Implementation: When a client asks for exclusive access,

         * disconnect all others. Shared connects are allowed as long

         * as no exclusive connection exists.

         *

         * This is how the rfb spec suggests to handle the shared flag.

         */</comment>

        <if_stmt pos:start="55:9" pos:end="79:9"><if pos:start="55:9" pos:end="79:9">if <condition pos:start="55:12" pos:end="55:45">(<expr pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:16">mode</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <name pos:start="55:21" pos:end="55:44">VNC_SHARE_MODE_EXCLUSIVE</name></expr>)</condition> <block pos:start="55:47" pos:end="79:9">{<block_content pos:start="57:13" pos:end="77:13">

            <decl_stmt pos:start="57:13" pos:end="57:29"><decl pos:start="57:13" pos:end="57:28"><type pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:20">VncState</name> <modifier pos:start="57:22" pos:end="57:22">*</modifier></type><name pos:start="57:23" pos:end="57:28">client</name></decl>;</decl_stmt>

            <macro pos:start="59:13" pos:end="59:58"><name pos:start="59:13" pos:end="59:26">QTAILQ_FOREACH</name><argument_list pos:start="59:27" pos:end="59:58">(<argument pos:start="59:28" pos:end="59:33">client</argument>, <argument pos:start="59:36" pos:end="59:51">&amp;vs-&gt;vd-&gt;clients</argument>, <argument pos:start="59:54" pos:end="59:57">next</argument>)</argument_list></macro> <block pos:start="59:60" pos:end="77:13">{<block_content pos:start="61:17" pos:end="75:45">

                <if_stmt pos:start="61:17" pos:end="65:17"><if pos:start="61:17" pos:end="65:17">if <condition pos:start="61:20" pos:end="61:33">(<expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:22">vs</name> <operator pos:start="61:24" pos:end="61:25">==</operator> <name pos:start="61:27" pos:end="61:32">client</name></expr>)</condition> <block pos:start="61:35" pos:end="65:17">{<block_content pos:start="63:21" pos:end="63:29">

                    <continue pos:start="63:21" pos:end="63:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="67:17" pos:end="73:17"><if pos:start="67:17" pos:end="73:17">if <condition pos:start="67:20" pos:end="69:64">(<expr pos:start="67:21" pos:end="69:63"><name pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:26">client</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:38">share_mode</name></name> <operator pos:start="67:40" pos:end="67:41">!=</operator> <name pos:start="67:43" pos:end="67:66">VNC_SHARE_MODE_EXCLUSIVE</name> <operator pos:start="67:68" pos:end="67:69">&amp;&amp;</operator>

                    <name pos:start="69:21" pos:end="69:38"><name pos:start="69:21" pos:end="69:26">client</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:38">share_mode</name></name> <operator pos:start="69:40" pos:end="69:41">!=</operator> <name pos:start="69:43" pos:end="69:63">VNC_SHARE_MODE_SHARED</name></expr>)</condition> <block pos:start="69:66" pos:end="73:17">{<block_content pos:start="71:21" pos:end="71:29">

                    <continue pos:start="71:21" pos:end="71:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:45"><expr pos:start="75:17" pos:end="75:44"><call pos:start="75:17" pos:end="75:44"><name pos:start="75:17" pos:end="75:36">vnc_disconnect_start</name><argument_list pos:start="75:37" pos:end="75:44">(<argument pos:start="75:38" pos:end="75:43"><expr pos:start="75:38" pos:end="75:43"><name pos:start="75:38" pos:end="75:43">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:42">(<expr pos:start="81:13" pos:end="81:41"><name pos:start="81:13" pos:end="81:16">mode</name> <operator pos:start="81:18" pos:end="81:19">==</operator> <name pos:start="81:21" pos:end="81:41">VNC_SHARE_MODE_SHARED</name></expr>)</condition> <block pos:start="81:44" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:13">

            <if_stmt pos:start="83:13" pos:end="89:13"><if pos:start="83:13" pos:end="89:13">if <condition pos:start="83:16" pos:end="83:42">(<expr pos:start="83:17" pos:end="83:41"><name pos:start="83:17" pos:end="83:37"><name pos:start="83:17" pos:end="83:18">vs</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:22">vd</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:37">num_exclusive</name></name> <operator pos:start="83:39" pos:end="83:39">&gt;</operator> <literal type="number" pos:start="83:41" pos:end="83:41">0</literal></expr>)</condition> <block pos:start="83:44" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:25">

                <expr_stmt pos:start="85:17" pos:end="85:41"><expr pos:start="85:17" pos:end="85:40"><call pos:start="85:17" pos:end="85:40"><name pos:start="85:17" pos:end="85:36">vnc_disconnect_start</name><argument_list pos:start="85:37" pos:end="85:40">(<argument pos:start="85:38" pos:end="85:39"><expr pos:start="85:38" pos:end="85:39"><name pos:start="85:38" pos:end="85:39">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:25">return <expr pos:start="87:24" pos:end="87:24"><literal type="number" pos:start="87:24" pos:end="87:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:39">case <expr pos:start="95:10" pos:end="95:38"><name pos:start="95:10" pos:end="95:38">VNC_SHARE_POLICY_FORCE_SHARED</name></expr>:</case>

        <comment type="block" pos:start="97:9" pos:end="111:11">/*

         * Policy: Shared connects only.

         * Implementation: Disallow clients asking for exclusive access.

         *

         * Useful for shared desktop sessions where you don't want

         * someone forgetting to say -shared when running the vnc

         * client disconnect everybody else.

         */</comment>

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:45">(<expr pos:start="113:13" pos:end="113:44"><name pos:start="113:13" pos:end="113:16">mode</name> <operator pos:start="113:18" pos:end="113:19">==</operator> <name pos:start="113:21" pos:end="113:44">VNC_SHARE_MODE_EXCLUSIVE</name></expr>)</condition> <block pos:start="113:47" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:21">

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><call pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:32">vnc_disconnect_start</name><argument_list pos:start="115:33" pos:end="115:36">(<argument pos:start="115:34" pos:end="115:35"><expr pos:start="115:34" pos:end="115:35"><name pos:start="115:34" pos:end="115:35">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="117:13" pos:end="117:21">return <expr pos:start="117:20" pos:end="117:20"><literal type="number" pos:start="117:20" pos:end="117:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="125:5" pos:end="125:33"><expr pos:start="125:5" pos:end="125:32"><call pos:start="125:5" pos:end="125:32"><name pos:start="125:5" pos:end="125:22">vnc_set_share_mode</name><argument_list pos:start="125:23" pos:end="125:32">(<argument pos:start="125:24" pos:end="125:25"><expr pos:start="125:24" pos:end="125:25"><name pos:start="125:24" pos:end="125:25">vs</name></expr></argument>, <argument pos:start="125:28" pos:end="125:31"><expr pos:start="125:28" pos:end="125:31"><name pos:start="125:28" pos:end="125:31">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:55">(<expr pos:start="129:9" pos:end="129:54"><name pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:10">vs</name><operator pos:start="129:11" pos:end="129:12">-&gt;</operator><name pos:start="129:13" pos:end="129:14">vd</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:26">num_shared</name></name> <operator pos:start="129:28" pos:end="129:28">&gt;</operator> <name pos:start="129:30" pos:end="129:54"><name pos:start="129:30" pos:end="129:31">vs</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:35">vd</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:54">connections_limit</name></name></expr>)</condition> <block pos:start="129:57" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:17">

        <expr_stmt pos:start="131:9" pos:end="131:33"><expr pos:start="131:9" pos:end="131:32"><call pos:start="131:9" pos:end="131:32"><name pos:start="131:9" pos:end="131:28">vnc_disconnect_start</name><argument_list pos:start="131:29" pos:end="131:32">(<argument pos:start="131:30" pos:end="131:31"><expr pos:start="131:30" pos:end="131:31"><name pos:start="131:30" pos:end="131:31">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:17">return <expr pos:start="133:16" pos:end="133:16"><literal type="number" pos:start="133:16" pos:end="133:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:62"><expr pos:start="139:5" pos:end="139:61"><name pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:6">vs</name><operator pos:start="139:7" pos:end="139:8">-&gt;</operator><name pos:start="139:9" pos:end="139:20">client_width</name></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <call pos:start="139:24" pos:end="139:61"><name pos:start="139:24" pos:end="139:45">pixman_image_get_width</name><argument_list pos:start="139:46" pos:end="139:61">(<argument pos:start="139:47" pos:end="139:60"><expr pos:start="139:47" pos:end="139:60"><name pos:start="139:47" pos:end="139:60"><name pos:start="139:47" pos:end="139:48">vs</name><operator pos:start="139:49" pos:end="139:50">-&gt;</operator><name pos:start="139:51" pos:end="139:52">vd</name><operator pos:start="139:53" pos:end="139:54">-&gt;</operator><name pos:start="139:55" pos:end="139:60">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:64"><expr pos:start="141:5" pos:end="141:63"><name pos:start="141:5" pos:end="141:21"><name pos:start="141:5" pos:end="141:6">vs</name><operator pos:start="141:7" pos:end="141:8">-&gt;</operator><name pos:start="141:9" pos:end="141:21">client_height</name></name> <operator pos:start="141:23" pos:end="141:23">=</operator> <call pos:start="141:25" pos:end="141:63"><name pos:start="141:25" pos:end="141:47">pixman_image_get_height</name><argument_list pos:start="141:48" pos:end="141:63">(<argument pos:start="141:49" pos:end="141:62"><expr pos:start="141:49" pos:end="141:62"><name pos:start="141:49" pos:end="141:62"><name pos:start="141:49" pos:end="141:50">vs</name><operator pos:start="141:51" pos:end="141:52">-&gt;</operator><name pos:start="141:53" pos:end="141:54">vd</name><operator pos:start="141:55" pos:end="141:56">-&gt;</operator><name pos:start="141:57" pos:end="141:62">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:40"><expr pos:start="143:5" pos:end="143:39"><call pos:start="143:5" pos:end="143:39"><name pos:start="143:5" pos:end="143:17">vnc_write_u16</name><argument_list pos:start="143:18" pos:end="143:39">(<argument pos:start="143:19" pos:end="143:20"><expr pos:start="143:19" pos:end="143:20"><name pos:start="143:19" pos:end="143:20">vs</name></expr></argument>, <argument pos:start="143:23" pos:end="143:38"><expr pos:start="143:23" pos:end="143:38"><name pos:start="143:23" pos:end="143:38"><name pos:start="143:23" pos:end="143:24">vs</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:38">client_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:41"><expr pos:start="145:5" pos:end="145:40"><call pos:start="145:5" pos:end="145:40"><name pos:start="145:5" pos:end="145:17">vnc_write_u16</name><argument_list pos:start="145:18" pos:end="145:40">(<argument pos:start="145:19" pos:end="145:20"><expr pos:start="145:19" pos:end="145:20"><name pos:start="145:19" pos:end="145:20">vs</name></expr></argument>, <argument pos:start="145:23" pos:end="145:39"><expr pos:start="145:23" pos:end="145:39"><name pos:start="145:23" pos:end="145:39"><name pos:start="145:23" pos:end="145:24">vs</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:39">client_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:29"><expr pos:start="149:5" pos:end="149:28"><call pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:24">pixel_format_message</name><argument_list pos:start="149:25" pos:end="149:28">(<argument pos:start="149:26" pos:end="149:27"><expr pos:start="149:26" pos:end="149:27"><name pos:start="149:26" pos:end="149:27">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="159:50"><if pos:start="153:5" pos:end="155:66">if <condition pos:start="153:8" pos:end="153:18">(<expr pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:17">qemu_name</name></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="155:66"><block_content pos:start="155:9" pos:end="155:66">

        <expr_stmt pos:start="155:9" pos:end="155:66"><expr pos:start="155:9" pos:end="155:65"><name pos:start="155:9" pos:end="155:12">size</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <call pos:start="155:16" pos:end="155:65"><name pos:start="155:16" pos:end="155:23">snprintf</name><argument_list pos:start="155:24" pos:end="155:65">(<argument pos:start="155:25" pos:end="155:27"><expr pos:start="155:25" pos:end="155:27"><name pos:start="155:25" pos:end="155:27">buf</name></expr></argument>, <argument pos:start="155:30" pos:end="155:40"><expr pos:start="155:30" pos:end="155:40"><sizeof pos:start="155:30" pos:end="155:40">sizeof<argument_list pos:start="155:36" pos:end="155:40">(<argument pos:start="155:37" pos:end="155:39"><expr pos:start="155:37" pos:end="155:39"><name pos:start="155:37" pos:end="155:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="155:43" pos:end="155:53"><expr pos:start="155:43" pos:end="155:53"><literal type="string" pos:start="155:43" pos:end="155:53">"QEMU (%s)"</literal></expr></argument>, <argument pos:start="155:56" pos:end="155:64"><expr pos:start="155:56" pos:end="155:64"><name pos:start="155:56" pos:end="155:64">qemu_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="157:5" pos:end="159:50">else<block type="pseudo" pos:start="159:9" pos:end="159:50"><block_content pos:start="159:9" pos:end="159:50">

        <expr_stmt pos:start="159:9" pos:end="159:50"><expr pos:start="159:9" pos:end="159:49"><name pos:start="159:9" pos:end="159:12">size</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <call pos:start="159:16" pos:end="159:49"><name pos:start="159:16" pos:end="159:23">snprintf</name><argument_list pos:start="159:24" pos:end="159:49">(<argument pos:start="159:25" pos:end="159:27"><expr pos:start="159:25" pos:end="159:27"><name pos:start="159:25" pos:end="159:27">buf</name></expr></argument>, <argument pos:start="159:30" pos:end="159:40"><expr pos:start="159:30" pos:end="159:40"><sizeof pos:start="159:30" pos:end="159:40">sizeof<argument_list pos:start="159:36" pos:end="159:40">(<argument pos:start="159:37" pos:end="159:39"><expr pos:start="159:37" pos:end="159:39"><name pos:start="159:37" pos:end="159:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="159:43" pos:end="159:48"><expr pos:start="159:43" pos:end="159:48"><literal type="string" pos:start="159:43" pos:end="159:48">"QEMU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:28"><expr pos:start="163:5" pos:end="163:27"><call pos:start="163:5" pos:end="163:27"><name pos:start="163:5" pos:end="163:17">vnc_write_u32</name><argument_list pos:start="163:18" pos:end="163:27">(<argument pos:start="163:19" pos:end="163:20"><expr pos:start="163:19" pos:end="163:20"><name pos:start="163:19" pos:end="163:20">vs</name></expr></argument>, <argument pos:start="163:23" pos:end="163:26"><expr pos:start="163:23" pos:end="163:26"><name pos:start="163:23" pos:end="163:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:29"><expr pos:start="165:5" pos:end="165:28"><call pos:start="165:5" pos:end="165:28"><name pos:start="165:5" pos:end="165:13">vnc_write</name><argument_list pos:start="165:14" pos:end="165:28">(<argument pos:start="165:15" pos:end="165:16"><expr pos:start="165:15" pos:end="165:16"><name pos:start="165:15" pos:end="165:16">vs</name></expr></argument>, <argument pos:start="165:19" pos:end="165:21"><expr pos:start="165:19" pos:end="165:21"><name pos:start="165:19" pos:end="165:21">buf</name></expr></argument>, <argument pos:start="165:24" pos:end="165:27"><expr pos:start="165:24" pos:end="165:27"><name pos:start="165:24" pos:end="165:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:18"><expr pos:start="167:5" pos:end="167:17"><call pos:start="167:5" pos:end="167:17"><name pos:start="167:5" pos:end="167:13">vnc_flush</name><argument_list pos:start="167:14" pos:end="167:17">(<argument pos:start="167:15" pos:end="167:16"><expr pos:start="167:15" pos:end="167:16"><name pos:start="167:15" pos:end="167:16">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:30"><expr pos:start="171:5" pos:end="171:29"><call pos:start="171:5" pos:end="171:29"><name pos:start="171:5" pos:end="171:25">vnc_client_cache_auth</name><argument_list pos:start="171:26" pos:end="171:29">(<argument pos:start="171:27" pos:end="171:28"><expr pos:start="171:27" pos:end="171:28"><name pos:start="171:27" pos:end="171:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:50"><expr pos:start="173:5" pos:end="173:49"><call pos:start="173:5" pos:end="173:49"><name pos:start="173:5" pos:end="173:17">vnc_qmp_event</name><argument_list pos:start="173:18" pos:end="173:49">(<argument pos:start="173:19" pos:end="173:20"><expr pos:start="173:19" pos:end="173:20"><name pos:start="173:19" pos:end="173:20">vs</name></expr></argument>, <argument pos:start="173:23" pos:end="173:48"><expr pos:start="173:23" pos:end="173:48"><name pos:start="173:23" pos:end="173:48">QAPI_EVENT_VNC_INITIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:46"><expr pos:start="177:5" pos:end="177:45"><call pos:start="177:5" pos:end="177:45"><name pos:start="177:5" pos:end="177:17">vnc_read_when</name><argument_list pos:start="177:18" pos:end="177:45">(<argument pos:start="177:19" pos:end="177:20"><expr pos:start="177:19" pos:end="177:20"><name pos:start="177:19" pos:end="177:20">vs</name></expr></argument>, <argument pos:start="177:23" pos:end="177:41"><expr pos:start="177:23" pos:end="177:41"><name pos:start="177:23" pos:end="177:41">protocol_client_msg</name></expr></argument>, <argument pos:start="177:44" pos:end="177:44"><expr pos:start="177:44" pos:end="177:44"><literal type="number" pos:start="177:44" pos:end="177:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="181:5" pos:end="181:13">return <expr pos:start="181:12" pos:end="181:12"><literal type="number" pos:start="181:12" pos:end="181:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
