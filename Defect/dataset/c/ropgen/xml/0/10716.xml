<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10716.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">qcow2_alloc_cluster_offset</name><parameter_list pos:start="1:31" pos:end="3:52">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:15"><decl pos:start="3:5" pos:end="3:15"><type pos:start="3:5" pos:end="3:15"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:15">n_start</name></decl></parameter>, <parameter pos:start="3:18" pos:end="3:26"><decl pos:start="3:18" pos:end="3:26"><type pos:start="3:18" pos:end="3:26"><name pos:start="3:18" pos:end="3:20">int</name></type> <name pos:start="3:22" pos:end="3:26">n_end</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">num</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:48">QCowL2Meta</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:51">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="267:1">{<block_content pos:start="7:5" pos:end="265:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">l2_index</name></decl>, <decl pos:start="9:19" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:21">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:22">l2_offset</name></decl>, <decl pos:start="11:25" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:12"><modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:33">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:26">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:28">nb_clusters</name></decl>, <decl pos:start="15:31" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:31" pos:end="15:31">i</name> <init pos:start="15:33" pos:end="15:35">= <expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">QCowL2Meta</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:25">old_alloc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:74"><expr pos:start="21:5" pos:end="21:73"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:73"><name pos:start="21:11" pos:end="21:27">get_cluster_table</name><argument_list pos:start="21:28" pos:end="21:73">(<argument pos:start="21:29" pos:end="21:30"><expr pos:start="21:29" pos:end="21:30"><name pos:start="21:29" pos:end="21:30">bs</name></expr></argument>, <argument pos:start="21:33" pos:end="21:38"><expr pos:start="21:33" pos:end="21:38"><name pos:start="21:33" pos:end="21:38">offset</name></expr></argument>, <argument pos:start="21:41" pos:end="21:49"><expr pos:start="21:41" pos:end="21:49"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:49">l2_table</name></expr></argument>, <argument pos:start="21:52" pos:end="21:61"><expr pos:start="21:52" pos:end="21:61"><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:61">l2_offset</name></expr></argument>, <argument pos:start="21:64" pos:end="21:72"><expr pos:start="21:64" pos:end="21:72"><operator pos:start="21:64" pos:end="21:64">&amp;</operator><name pos:start="21:65" pos:end="21:72">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:19">

        <return pos:start="25:9" pos:end="25:19">return <expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<label pos:start="31:1" pos:end="31:6"><name pos:start="31:1" pos:end="31:5">again</name>:</label>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:15">nb_clusters</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:49"><name pos:start="33:19" pos:end="33:34">size_to_clusters</name><argument_list pos:start="33:35" pos:end="33:49">(<argument pos:start="33:36" pos:end="33:36"><expr pos:start="33:36" pos:end="33:36"><name pos:start="33:36" pos:end="33:36">s</name></expr></argument>, <argument pos:start="33:39" pos:end="33:48"><expr pos:start="33:39" pos:end="33:48"><name pos:start="33:39" pos:end="33:43">n_end</name> <operator pos:start="33:45" pos:end="33:46">&lt;&lt;</operator> <literal type="number" pos:start="33:48" pos:end="33:48">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:58"><expr pos:start="37:5" pos:end="37:57"><name pos:start="37:5" pos:end="37:15">nb_clusters</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:57"><name pos:start="37:19" pos:end="37:21">MIN</name><argument_list pos:start="37:22" pos:end="37:57">(<argument pos:start="37:23" pos:end="37:33"><expr pos:start="37:23" pos:end="37:33"><name pos:start="37:23" pos:end="37:33">nb_clusters</name></expr></argument>, <argument pos:start="37:36" pos:end="37:56"><expr pos:start="37:36" pos:end="37:56"><name pos:start="37:36" pos:end="37:45"><name pos:start="37:36" pos:end="37:36">s</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:45">l2_size</name></name> <operator pos:start="37:47" pos:end="37:47">-</operator> <name pos:start="37:49" pos:end="37:56">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:53"><expr pos:start="41:5" pos:end="41:52"><name pos:start="41:5" pos:end="41:18">cluster_offset</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:52"><name pos:start="41:22" pos:end="41:32">be64_to_cpu</name><argument_list pos:start="41:33" pos:end="41:52">(<argument pos:start="41:34" pos:end="41:51"><expr pos:start="41:34" pos:end="41:51"><name pos:start="41:34" pos:end="41:51"><name pos:start="41:34" pos:end="41:41">l2_table</name><index pos:start="41:42" pos:end="41:51">[<expr pos:start="41:43" pos:end="41:50"><name pos:start="41:43" pos:end="41:50">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:48">/* We keep all QCOW_OFLAG_COPIED clusters */</comment>



    <if_stmt pos:start="49:5" pos:end="65:5"><if pos:start="49:5" pos:end="65:5">if <condition pos:start="49:8" pos:end="49:43">(<expr pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:22">cluster_offset</name> <operator pos:start="49:24" pos:end="49:24">&amp;</operator> <name pos:start="49:26" pos:end="49:42">QCOW_OFLAG_COPIED</name></expr>)</condition> <block pos:start="49:45" pos:end="65:5">{<block_content pos:start="51:9" pos:end="63:17">

        <expr_stmt pos:start="51:9" pos:end="53:43"><expr pos:start="51:9" pos:end="53:42"><name pos:start="51:9" pos:end="51:19">nb_clusters</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="53:42"><name pos:start="51:23" pos:end="51:47">count_contiguous_clusters</name><argument_list pos:start="51:48" pos:end="53:42">(<argument pos:start="51:49" pos:end="51:59"><expr pos:start="51:49" pos:end="51:59"><name pos:start="51:49" pos:end="51:59">nb_clusters</name></expr></argument>, <argument pos:start="51:62" pos:end="51:76"><expr pos:start="51:62" pos:end="51:76"><name pos:start="51:62" pos:end="51:76"><name pos:start="51:62" pos:end="51:62">s</name><operator pos:start="51:63" pos:end="51:64">-&gt;</operator><name pos:start="51:65" pos:end="51:76">cluster_size</name></name></expr></argument>,

                <argument pos:start="53:17" pos:end="53:35"><expr pos:start="53:17" pos:end="53:35"><operator pos:start="53:17" pos:end="53:17">&amp;</operator><name pos:start="53:18" pos:end="53:35"><name pos:start="53:18" pos:end="53:25">l2_table</name><index pos:start="53:26" pos:end="53:35">[<expr pos:start="53:27" pos:end="53:34"><name pos:start="53:27" pos:end="53:34">l2_index</name></expr>]</index></name></expr></argument>, <argument pos:start="53:38" pos:end="53:38"><expr pos:start="53:38" pos:end="53:38"><literal type="number" pos:start="53:38" pos:end="53:38">0</literal></expr></argument>, <argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:22">cluster_offset</name> <operator pos:start="57:24" pos:end="57:25">&amp;=</operator> <operator pos:start="57:27" pos:end="57:27">~</operator><name pos:start="57:28" pos:end="57:44">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:9">m</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:22">nb_clusters</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <literal type="number" pos:start="59:26" pos:end="59:26">0</literal></expr>;</expr_stmt>



        <goto pos:start="63:9" pos:end="63:17">goto <name pos:start="63:14" pos:end="63:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:70">/* for the moment, multiple compressed clusters are not managed */</comment>



    <if_stmt pos:start="73:5" pos:end="75:24"><if pos:start="73:5" pos:end="75:24">if <condition pos:start="73:8" pos:end="73:47">(<expr pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:22">cluster_offset</name> <operator pos:start="73:24" pos:end="73:24">&amp;</operator> <name pos:start="73:26" pos:end="73:46">QCOW_OFLAG_COMPRESSED</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:24"><block_content pos:start="75:9" pos:end="75:24">

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:19">nb_clusters</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <literal type="number" pos:start="75:23" pos:end="75:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:39">/* how many available clusters ? */</comment>



    <while pos:start="83:5" pos:end="119:5">while <condition pos:start="83:11" pos:end="83:27">(<expr pos:start="83:12" pos:end="83:26"><name pos:start="83:12" pos:end="83:12">i</name> <operator pos:start="83:14" pos:end="83:14">&lt;</operator> <name pos:start="83:16" pos:end="83:26">nb_clusters</name></expr>)</condition> <block pos:start="83:29" pos:end="119:5">{<block_content pos:start="85:9" pos:end="117:18">

        <expr_stmt pos:start="85:9" pos:end="87:43"><expr pos:start="85:9" pos:end="87:42"><name pos:start="85:9" pos:end="85:9">i</name> <operator pos:start="85:11" pos:end="85:12">+=</operator> <call pos:start="85:14" pos:end="87:42"><name pos:start="85:14" pos:end="85:38">count_contiguous_clusters</name><argument_list pos:start="85:39" pos:end="87:42">(<argument pos:start="85:40" pos:end="85:54"><expr pos:start="85:40" pos:end="85:54"><name pos:start="85:40" pos:end="85:50">nb_clusters</name> <operator pos:start="85:52" pos:end="85:52">-</operator> <name pos:start="85:54" pos:end="85:54">i</name></expr></argument>, <argument pos:start="85:57" pos:end="85:71"><expr pos:start="85:57" pos:end="85:71"><name pos:start="85:57" pos:end="85:71"><name pos:start="85:57" pos:end="85:57">s</name><operator pos:start="85:58" pos:end="85:59">-&gt;</operator><name pos:start="85:60" pos:end="85:71">cluster_size</name></name></expr></argument>,

                <argument pos:start="87:17" pos:end="87:35"><expr pos:start="87:17" pos:end="87:35"><operator pos:start="87:17" pos:end="87:17">&amp;</operator><name pos:start="87:18" pos:end="87:35"><name pos:start="87:18" pos:end="87:25">l2_table</name><index pos:start="87:26" pos:end="87:35">[<expr pos:start="87:27" pos:end="87:34"><name pos:start="87:27" pos:end="87:34">l2_index</name></expr>]</index></name></expr></argument>, <argument pos:start="87:38" pos:end="87:38"><expr pos:start="87:38" pos:end="87:38"><name pos:start="87:38" pos:end="87:38">i</name></expr></argument>, <argument pos:start="87:41" pos:end="87:41"><expr pos:start="87:41" pos:end="87:41"><literal type="number" pos:start="87:41" pos:end="87:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:70">(<expr pos:start="89:13" pos:end="89:69"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:14">i</name> <operator pos:start="89:16" pos:end="89:17">&gt;=</operator> <name pos:start="89:19" pos:end="89:29">nb_clusters</name><operator pos:start="89:30" pos:end="89:30">)</operator> <operator pos:start="89:32" pos:end="89:33">||</operator> <call pos:start="89:35" pos:end="89:69"><name pos:start="89:35" pos:end="89:45">be64_to_cpu</name><argument_list pos:start="89:46" pos:end="89:69">(<argument pos:start="89:47" pos:end="89:68"><expr pos:start="89:47" pos:end="89:68"><name pos:start="89:47" pos:end="89:68"><name pos:start="89:47" pos:end="89:54">l2_table</name><index pos:start="89:55" pos:end="89:68">[<expr pos:start="89:56" pos:end="89:67"><name pos:start="89:56" pos:end="89:63">l2_index</name> <operator pos:start="89:65" pos:end="89:65">+</operator> <name pos:start="89:67" pos:end="89:67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:72" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:18">

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="99:41"><expr pos:start="97:9" pos:end="99:40"><name pos:start="97:9" pos:end="97:9">i</name> <operator pos:start="97:11" pos:end="97:12">+=</operator> <call pos:start="97:14" pos:end="99:40"><name pos:start="97:14" pos:end="97:43">count_contiguous_free_clusters</name><argument_list pos:start="97:44" pos:end="99:40">(<argument pos:start="97:45" pos:end="97:59"><expr pos:start="97:45" pos:end="97:59"><name pos:start="97:45" pos:end="97:55">nb_clusters</name> <operator pos:start="97:57" pos:end="97:57">-</operator> <name pos:start="97:59" pos:end="97:59">i</name></expr></argument>,

                <argument pos:start="99:17" pos:end="99:39"><expr pos:start="99:17" pos:end="99:39"><operator pos:start="99:17" pos:end="99:17">&amp;</operator><name pos:start="99:18" pos:end="99:39"><name pos:start="99:18" pos:end="99:25">l2_table</name><index pos:start="99:26" pos:end="99:39">[<expr pos:start="99:27" pos:end="99:38"><name pos:start="99:27" pos:end="99:34">l2_index</name> <operator pos:start="99:36" pos:end="99:36">+</operator> <name pos:start="99:38" pos:end="99:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:29">(<expr pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:13">i</name> <operator pos:start="101:15" pos:end="101:16">&gt;=</operator> <name pos:start="101:18" pos:end="101:28">nb_clusters</name></expr>)</condition> <block pos:start="101:31" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:18">

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:61"><expr pos:start="109:9" pos:end="109:60"><name pos:start="109:9" pos:end="109:22">cluster_offset</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <call pos:start="109:26" pos:end="109:60"><name pos:start="109:26" pos:end="109:36">be64_to_cpu</name><argument_list pos:start="109:37" pos:end="109:60">(<argument pos:start="109:38" pos:end="109:59"><expr pos:start="109:38" pos:end="109:59"><name pos:start="109:38" pos:end="109:59"><name pos:start="109:38" pos:end="109:45">l2_table</name><index pos:start="109:46" pos:end="109:59">[<expr pos:start="109:47" pos:end="109:58"><name pos:start="109:47" pos:end="109:54">l2_index</name> <operator pos:start="109:56" pos:end="109:56">+</operator> <name pos:start="109:58" pos:end="109:58">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="117:18"><if pos:start="113:9" pos:end="117:18">if <condition pos:start="113:12" pos:end="115:57">(<expr pos:start="113:13" pos:end="115:56"><operator pos:start="113:13" pos:end="113:13">(</operator><name pos:start="113:14" pos:end="113:27">cluster_offset</name> <operator pos:start="113:29" pos:end="113:29">&amp;</operator> <name pos:start="113:31" pos:end="113:47">QCOW_OFLAG_COPIED</name><operator pos:start="113:48" pos:end="113:48">)</operator> <operator pos:start="113:50" pos:end="113:51">||</operator>

                <operator pos:start="115:17" pos:end="115:17">(</operator><name pos:start="115:18" pos:end="115:31">cluster_offset</name> <operator pos:start="115:33" pos:end="115:33">&amp;</operator> <name pos:start="115:35" pos:end="115:55">QCOW_OFLAG_COMPRESSED</name><operator pos:start="115:56" pos:end="115:56">)</operator></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:18"><block_content pos:start="117:13" pos:end="117:18">

            <break pos:start="117:13" pos:end="117:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="121:5" pos:end="121:29"><expr pos:start="121:5" pos:end="121:28"><call pos:start="121:5" pos:end="121:28"><name pos:start="121:5" pos:end="121:10">assert</name><argument_list pos:start="121:11" pos:end="121:28">(<argument pos:start="121:12" pos:end="121:27"><expr pos:start="121:12" pos:end="121:27"><name pos:start="121:12" pos:end="121:12">i</name> <operator pos:start="121:14" pos:end="121:15">&lt;=</operator> <name pos:start="121:17" pos:end="121:27">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:20"><expr pos:start="123:5" pos:end="123:19"><name pos:start="123:5" pos:end="123:15">nb_clusters</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <name pos:start="123:19" pos:end="123:19">i</name></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="135:7">/*

     * Check if there already is an AIO write request in flight which allocates

     * the same cluster. In this case we need to wait until the previous

     * request has completed and updated the L2 table accordingly.

     */</comment>

    <macro pos:start="137:5" pos:end="137:64"><name pos:start="137:5" pos:end="137:17">QLIST_FOREACH</name><argument_list pos:start="137:18" pos:end="137:64">(<argument pos:start="137:19" pos:end="137:27">old_alloc</argument>, <argument pos:start="137:30" pos:end="137:47">&amp;s-&gt;cluster_allocs</argument>, <argument pos:start="137:50" pos:end="137:63">next_in_flight</argument>)</argument_list></macro> <block pos:start="137:66" pos:end="189:5">{<block_content pos:start="141:9" pos:end="187:9">



        <decl_stmt pos:start="141:9" pos:end="141:69"><decl pos:start="141:9" pos:end="141:68"><type pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:16">uint64_t</name></type> <name pos:start="141:18" pos:end="141:27">end_offset</name> <init pos:start="141:29" pos:end="141:68">= <expr pos:start="141:31" pos:end="141:68"><name pos:start="141:31" pos:end="141:36">offset</name> <operator pos:start="141:38" pos:end="141:38">+</operator> <name pos:start="141:40" pos:end="141:50">nb_clusters</name> <operator pos:start="141:52" pos:end="141:52">*</operator> <name pos:start="141:54" pos:end="141:68"><name pos:start="141:54" pos:end="141:54">s</name><operator pos:start="141:55" pos:end="141:56">-&gt;</operator><name pos:start="141:57" pos:end="141:68">cluster_size</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:48"><decl pos:start="143:9" pos:end="143:47"><type pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:16">uint64_t</name></type> <name pos:start="143:18" pos:end="143:27">old_offset</name> <init pos:start="143:29" pos:end="143:47">= <expr pos:start="143:31" pos:end="143:47"><name pos:start="143:31" pos:end="143:47"><name pos:start="143:31" pos:end="143:39">old_alloc</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:47">offset</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="147:53"><decl pos:start="145:9" pos:end="147:52"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint64_t</name></type> <name pos:start="145:18" pos:end="145:31">old_end_offset</name> <init pos:start="145:33" pos:end="147:52">= <expr pos:start="145:35" pos:end="147:52"><name pos:start="145:35" pos:end="145:51"><name pos:start="145:35" pos:end="145:43">old_alloc</name><operator pos:start="145:44" pos:end="145:45">-&gt;</operator><name pos:start="145:46" pos:end="145:51">offset</name></name> <operator pos:start="145:53" pos:end="145:53">+</operator>

            <name pos:start="147:13" pos:end="147:34"><name pos:start="147:13" pos:end="147:21">old_alloc</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:34">nb_clusters</name></name> <operator pos:start="147:36" pos:end="147:36">*</operator> <name pos:start="147:38" pos:end="147:52"><name pos:start="147:38" pos:end="147:38">s</name><operator pos:start="147:39" pos:end="147:40">-&gt;</operator><name pos:start="147:41" pos:end="147:52">cluster_size</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="151:9" pos:end="187:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:63">(<expr pos:start="151:13" pos:end="151:62"><name pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:22">end_offset</name> <argument_list type="generic" pos:start="151:24" pos:end="151:47">&lt; <argument pos:start="151:26" pos:end="151:45"><expr pos:start="151:26" pos:end="151:45"><name pos:start="151:26" pos:end="151:35">old_offset</name> <operator pos:start="151:37" pos:end="151:38">||</operator> <name pos:start="151:40" pos:end="151:45">offset</name></expr></argument> &gt;</argument_list></name> <name pos:start="151:49" pos:end="151:62">old_end_offset</name></expr>)</condition> <block pos:start="151:65" pos:end="155:9">{<block_content>

            <comment type="block" pos:start="153:13" pos:end="153:33">/* No intersection */</comment>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="187:9">else <block pos:start="155:16" pos:end="187:9">{<block_content pos:start="157:13" pos:end="185:13">

            <if_stmt pos:start="157:13" pos:end="167:13"><if pos:start="157:13" pos:end="163:13">if <condition pos:start="157:16" pos:end="157:36">(<expr pos:start="157:17" pos:end="157:35"><name pos:start="157:17" pos:end="157:22">offset</name> <operator pos:start="157:24" pos:end="157:24">&lt;</operator> <name pos:start="157:26" pos:end="157:35">old_offset</name></expr>)</condition> <block pos:start="157:38" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:71">

                <comment type="block" pos:start="159:17" pos:end="159:63">/* Stop at the start of a running allocation */</comment>

                <expr_stmt pos:start="161:17" pos:end="161:71"><expr pos:start="161:17" pos:end="161:70"><name pos:start="161:17" pos:end="161:27">nb_clusters</name> <operator pos:start="161:29" pos:end="161:29">=</operator> <operator pos:start="161:31" pos:end="161:31">(</operator><name pos:start="161:32" pos:end="161:41">old_offset</name> <operator pos:start="161:43" pos:end="161:43">-</operator> <name pos:start="161:45" pos:end="161:50">offset</name><operator pos:start="161:51" pos:end="161:51">)</operator> <operator pos:start="161:53" pos:end="161:54">&gt;&gt;</operator> <name pos:start="161:56" pos:end="161:70"><name pos:start="161:56" pos:end="161:56">s</name><operator pos:start="161:57" pos:end="161:58">-&gt;</operator><name pos:start="161:59" pos:end="161:70">cluster_bits</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="167:13">else <block pos:start="163:20" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:32">

                <expr_stmt pos:start="165:17" pos:end="165:32"><expr pos:start="165:17" pos:end="165:31"><name pos:start="165:17" pos:end="165:27">nb_clusters</name> <operator pos:start="165:29" pos:end="165:29">=</operator> <literal type="number" pos:start="165:31" pos:end="165:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="171:13" pos:end="185:13"><if pos:start="171:13" pos:end="185:13">if <condition pos:start="171:16" pos:end="171:33">(<expr pos:start="171:17" pos:end="171:32"><name pos:start="171:17" pos:end="171:27">nb_clusters</name> <operator pos:start="171:29" pos:end="171:30">==</operator> <literal type="number" pos:start="171:32" pos:end="171:32">0</literal></expr>)</condition> <block pos:start="171:35" pos:end="185:13">{<block_content pos:start="177:17" pos:end="183:27">

                <comment type="block" pos:start="173:17" pos:end="175:67">/* Wait for the dependency to complete. We need to recheck

                 * the free/allocated clusters when we continue. */</comment>

                <expr_stmt pos:start="177:17" pos:end="177:47"><expr pos:start="177:17" pos:end="177:46"><call pos:start="177:17" pos:end="177:46"><name pos:start="177:17" pos:end="177:36">qemu_co_mutex_unlock</name><argument_list pos:start="177:37" pos:end="177:46">(<argument pos:start="177:38" pos:end="177:45"><expr pos:start="177:38" pos:end="177:45"><operator pos:start="177:38" pos:end="177:38">&amp;</operator><name pos:start="177:39" pos:end="177:45"><name pos:start="177:39" pos:end="177:39">s</name><operator pos:start="177:40" pos:end="177:41">-&gt;</operator><name pos:start="177:42" pos:end="177:45">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:67"><expr pos:start="179:17" pos:end="179:66"><call pos:start="179:17" pos:end="179:66"><name pos:start="179:17" pos:end="179:34">qemu_co_queue_wait</name><argument_list pos:start="179:35" pos:end="179:66">(<argument pos:start="179:36" pos:end="179:65"><expr pos:start="179:36" pos:end="179:65"><operator pos:start="179:36" pos:end="179:36">&amp;</operator><name pos:start="179:37" pos:end="179:65"><name pos:start="179:37" pos:end="179:45">old_alloc</name><operator pos:start="179:46" pos:end="179:47">-&gt;</operator><name pos:start="179:48" pos:end="179:65">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:45"><expr pos:start="181:17" pos:end="181:44"><call pos:start="181:17" pos:end="181:44"><name pos:start="181:17" pos:end="181:34">qemu_co_mutex_lock</name><argument_list pos:start="181:35" pos:end="181:44">(<argument pos:start="181:36" pos:end="181:43"><expr pos:start="181:36" pos:end="181:43"><operator pos:start="181:36" pos:end="181:36">&amp;</operator><name pos:start="181:37" pos:end="181:43"><name pos:start="181:37" pos:end="181:37">s</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:43">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="183:17" pos:end="183:27">goto <name pos:start="183:22" pos:end="183:26">again</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>



    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:21">(<expr pos:start="193:9" pos:end="193:20"><operator pos:start="193:9" pos:end="193:9">!</operator><name pos:start="193:10" pos:end="193:20">nb_clusters</name></expr>)</condition> <block pos:start="193:23" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:16">

        <expr_stmt pos:start="195:9" pos:end="195:16"><expr pos:start="195:9" pos:end="195:15"><call pos:start="195:9" pos:end="195:15"><name pos:start="195:9" pos:end="195:13">abort</name><argument_list pos:start="195:14" pos:end="195:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:61"><expr pos:start="201:5" pos:end="201:60"><call pos:start="201:5" pos:end="201:60"><name pos:start="201:5" pos:end="201:21">QLIST_INSERT_HEAD</name><argument_list pos:start="201:22" pos:end="201:60">(<argument pos:start="201:23" pos:end="201:40"><expr pos:start="201:23" pos:end="201:40"><operator pos:start="201:23" pos:end="201:23">&amp;</operator><name pos:start="201:24" pos:end="201:40"><name pos:start="201:24" pos:end="201:24">s</name><operator pos:start="201:25" pos:end="201:26">-&gt;</operator><name pos:start="201:27" pos:end="201:40">cluster_allocs</name></name></expr></argument>, <argument pos:start="201:43" pos:end="201:43"><expr pos:start="201:43" pos:end="201:43"><name pos:start="201:43" pos:end="201:43">m</name></expr></argument>, <argument pos:start="201:46" pos:end="201:59"><expr pos:start="201:46" pos:end="201:59"><name pos:start="201:46" pos:end="201:59">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:32">/* allocate a new cluster */</comment>



    <expr_stmt pos:start="209:5" pos:end="209:77"><expr pos:start="209:5" pos:end="209:76"><name pos:start="209:5" pos:end="209:18">cluster_offset</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <call pos:start="209:22" pos:end="209:76"><name pos:start="209:22" pos:end="209:41">qcow2_alloc_clusters</name><argument_list pos:start="209:42" pos:end="209:76">(<argument pos:start="209:43" pos:end="209:44"><expr pos:start="209:43" pos:end="209:44"><name pos:start="209:43" pos:end="209:44">bs</name></expr></argument>, <argument pos:start="209:47" pos:end="209:75"><expr pos:start="209:47" pos:end="209:75"><name pos:start="209:47" pos:end="209:57">nb_clusters</name> <operator pos:start="209:59" pos:end="209:59">*</operator> <name pos:start="209:61" pos:end="209:75"><name pos:start="209:61" pos:end="209:61">s</name><operator pos:start="209:62" pos:end="209:63">-&gt;</operator><name pos:start="209:64" pos:end="209:75">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="217:5"><if pos:start="211:5" pos:end="217:5">if <condition pos:start="211:8" pos:end="211:27">(<expr pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:22">cluster_offset</name> <operator pos:start="211:24" pos:end="211:24">&lt;</operator> <literal type="number" pos:start="211:26" pos:end="211:26">0</literal></expr>)</condition> <block pos:start="211:29" pos:end="217:5">{<block_content pos:start="213:9" pos:end="215:18">

        <expr_stmt pos:start="213:9" pos:end="213:29"><expr pos:start="213:9" pos:end="213:28"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <name pos:start="213:15" pos:end="213:28">cluster_offset</name></expr>;</expr_stmt>

        <goto pos:start="215:9" pos:end="215:18">goto <name pos:start="215:14" pos:end="215:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="221:47">/* save info needed for meta data update */</comment>

    <expr_stmt pos:start="223:5" pos:end="223:23"><expr pos:start="223:5" pos:end="223:22"><name pos:start="223:5" pos:end="223:13"><name pos:start="223:5" pos:end="223:5">m</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:13">offset</name></name> <operator pos:start="223:15" pos:end="223:15">=</operator> <name pos:start="223:17" pos:end="223:22">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:25"><expr pos:start="225:5" pos:end="225:24"><name pos:start="225:5" pos:end="225:14"><name pos:start="225:5" pos:end="225:5">m</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:14">n_start</name></name> <operator pos:start="225:16" pos:end="225:16">=</operator> <name pos:start="225:18" pos:end="225:24">n_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:33"><expr pos:start="227:5" pos:end="227:32"><name pos:start="227:5" pos:end="227:18"><name pos:start="227:5" pos:end="227:5">m</name><operator pos:start="227:6" pos:end="227:7">-&gt;</operator><name pos:start="227:8" pos:end="227:18">nb_clusters</name></name> <operator pos:start="227:20" pos:end="227:20">=</operator> <name pos:start="227:22" pos:end="227:32">nb_clusters</name></expr>;</expr_stmt>



<label pos:start="231:1" pos:end="231:4"><name pos:start="231:1" pos:end="231:3">out</name>:</label>

    <expr_stmt pos:start="233:5" pos:end="233:69"><expr pos:start="233:5" pos:end="233:68"><name pos:start="233:5" pos:end="233:7">ret</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:68"><name pos:start="233:11" pos:end="233:25">qcow2_cache_put</name><argument_list pos:start="233:26" pos:end="233:68">(<argument pos:start="233:27" pos:end="233:28"><expr pos:start="233:27" pos:end="233:28"><name pos:start="233:27" pos:end="233:28">bs</name></expr></argument>, <argument pos:start="233:31" pos:end="233:47"><expr pos:start="233:31" pos:end="233:47"><name pos:start="233:31" pos:end="233:47"><name pos:start="233:31" pos:end="233:31">s</name><operator pos:start="233:32" pos:end="233:33">-&gt;</operator><name pos:start="233:34" pos:end="233:47">l2_table_cache</name></name></expr></argument>, <argument pos:start="233:50" pos:end="233:67"><expr pos:start="233:50" pos:end="233:67"><operator pos:start="233:50" pos:end="233:50">(</operator><name pos:start="233:51" pos:end="233:54">void</name><operator pos:start="233:55" pos:end="233:55">*</operator><operator pos:start="233:56" pos:end="233:56">*</operator><operator pos:start="233:57" pos:end="233:57">)</operator> <operator pos:start="233:59" pos:end="233:59">&amp;</operator><name pos:start="233:60" pos:end="233:67">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="239:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:16">(<expr pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">&lt;</operator> <literal type="number" pos:start="235:15" pos:end="235:15">0</literal></expr>)</condition> <block pos:start="235:18" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:22">

        <goto pos:start="237:9" pos:end="237:22">goto <name pos:start="237:14" pos:end="237:21">fail_put</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:71"><expr pos:start="243:5" pos:end="243:70"><name pos:start="243:5" pos:end="243:19"><name pos:start="243:5" pos:end="243:5">m</name><operator pos:start="243:6" pos:end="243:7">-&gt;</operator><name pos:start="243:8" pos:end="243:19">nb_available</name></name> <operator pos:start="243:21" pos:end="243:21">=</operator> <call pos:start="243:23" pos:end="243:70"><name pos:start="243:23" pos:end="243:25">MIN</name><argument_list pos:start="243:26" pos:end="243:70">(<argument pos:start="243:27" pos:end="243:62"><expr pos:start="243:27" pos:end="243:62"><name pos:start="243:27" pos:end="243:37">nb_clusters</name> <operator pos:start="243:39" pos:end="243:40">&lt;&lt;</operator> <operator pos:start="243:42" pos:end="243:42">(</operator><name pos:start="243:43" pos:end="243:57"><name pos:start="243:43" pos:end="243:43">s</name><operator pos:start="243:44" pos:end="243:45">-&gt;</operator><name pos:start="243:46" pos:end="243:57">cluster_bits</name></name> <operator pos:start="243:59" pos:end="243:59">-</operator> <literal type="number" pos:start="243:61" pos:end="243:61">9</literal><operator pos:start="243:62" pos:end="243:62">)</operator></expr></argument>, <argument pos:start="243:65" pos:end="243:69"><expr pos:start="243:65" pos:end="243:69"><name pos:start="243:65" pos:end="243:69">n_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:39"><expr pos:start="245:5" pos:end="245:38"><name pos:start="245:5" pos:end="245:21"><name pos:start="245:5" pos:end="245:5">m</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:21">cluster_offset</name></name> <operator pos:start="245:23" pos:end="245:23">=</operator> <name pos:start="245:25" pos:end="245:38">cluster_offset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:37"><expr pos:start="249:5" pos:end="249:36"><operator pos:start="249:5" pos:end="249:5">*</operator><name pos:start="249:6" pos:end="249:8">num</name> <operator pos:start="249:10" pos:end="249:10">=</operator> <name pos:start="249:12" pos:end="249:26"><name pos:start="249:12" pos:end="249:12">m</name><operator pos:start="249:13" pos:end="249:14">-&gt;</operator><name pos:start="249:15" pos:end="249:26">nb_available</name></name> <operator pos:start="249:28" pos:end="249:28">-</operator> <name pos:start="249:30" pos:end="249:36">n_start</name></expr>;</expr_stmt>



    <return pos:start="253:5" pos:end="253:13">return <expr pos:start="253:12" pos:end="253:12"><literal type="number" pos:start="253:12" pos:end="253:12">0</literal></expr>;</return>



<label pos:start="257:1" pos:end="257:5"><name pos:start="257:1" pos:end="257:4">fail</name>:</label>

    <expr_stmt pos:start="259:5" pos:end="259:63"><expr pos:start="259:5" pos:end="259:62"><call pos:start="259:5" pos:end="259:62"><name pos:start="259:5" pos:end="259:19">qcow2_cache_put</name><argument_list pos:start="259:20" pos:end="259:62">(<argument pos:start="259:21" pos:end="259:22"><expr pos:start="259:21" pos:end="259:22"><name pos:start="259:21" pos:end="259:22">bs</name></expr></argument>, <argument pos:start="259:25" pos:end="259:41"><expr pos:start="259:25" pos:end="259:41"><name pos:start="259:25" pos:end="259:41"><name pos:start="259:25" pos:end="259:25">s</name><operator pos:start="259:26" pos:end="259:27">-&gt;</operator><name pos:start="259:28" pos:end="259:41">l2_table_cache</name></name></expr></argument>, <argument pos:start="259:44" pos:end="259:61"><expr pos:start="259:44" pos:end="259:61"><operator pos:start="259:44" pos:end="259:44">(</operator><name pos:start="259:45" pos:end="259:48">void</name><operator pos:start="259:49" pos:end="259:49">*</operator><operator pos:start="259:50" pos:end="259:50">*</operator><operator pos:start="259:51" pos:end="259:51">)</operator> <operator pos:start="259:53" pos:end="259:53">&amp;</operator><name pos:start="259:54" pos:end="259:61">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="261:1" pos:end="261:9"><name pos:start="261:1" pos:end="261:8">fail_put</name>:</label>

    <expr_stmt pos:start="263:5" pos:end="263:36"><expr pos:start="263:5" pos:end="263:35"><call pos:start="263:5" pos:end="263:35"><name pos:start="263:5" pos:end="263:16">QLIST_REMOVE</name><argument_list pos:start="263:17" pos:end="263:35">(<argument pos:start="263:18" pos:end="263:18"><expr pos:start="263:18" pos:end="263:18"><name pos:start="263:18" pos:end="263:18">m</name></expr></argument>, <argument pos:start="263:21" pos:end="263:34"><expr pos:start="263:21" pos:end="263:34"><name pos:start="263:21" pos:end="263:34">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="265:5" pos:end="265:15">return <expr pos:start="265:12" pos:end="265:14"><name pos:start="265:12" pos:end="265:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
