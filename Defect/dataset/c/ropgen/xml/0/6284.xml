<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6284.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">xen_pt_msixctrl_reg_write</name><parameter_list pos:start="1:37" pos:end="5:77">(<parameter pos:start="1:38" pos:end="1:62"><decl pos:start="1:38" pos:end="1:62"><type pos:start="1:38" pos:end="1:62"><name pos:start="1:38" pos:end="1:59">XenPCIPassthroughState</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:56"><decl pos:start="3:38" pos:end="3:56"><type pos:start="3:38" pos:end="3:56"><name pos:start="3:38" pos:end="3:45">XenPTReg</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">cfg_entry</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:71"><decl pos:start="3:59" pos:end="3:71"><type pos:start="3:59" pos:end="3:71"><name pos:start="3:59" pos:end="3:66">uint16_t</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:71">val</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:55"><decl pos:start="5:38" pos:end="5:55"><type pos:start="5:38" pos:end="5:55"><name pos:start="5:38" pos:end="5:45">uint16_t</name></type> <name pos:start="5:47" pos:end="5:55">dev_value</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:76"><decl pos:start="5:58" pos:end="5:76"><type pos:start="5:58" pos:end="5:76"><name pos:start="5:58" pos:end="5:65">uint16_t</name></type> <name pos:start="5:67" pos:end="5:76">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="65:1">{<block_content pos:start="9:5" pos:end="63:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:26">writable_mask</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:73"><decl pos:start="13:5" pos:end="13:72"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:29">throughable_mask</name> <init pos:start="13:31" pos:end="13:72">= <expr pos:start="13:33" pos:end="13:72"><call pos:start="13:33" pos:end="13:72"><name pos:start="13:33" pos:end="13:52">get_throughable_mask</name><argument_list pos:start="13:53" pos:end="13:72">(<argument pos:start="13:54" pos:end="13:54"><expr pos:start="13:54" pos:end="13:54"><name pos:start="13:54" pos:end="13:54">s</name></expr></argument>, <argument pos:start="13:57" pos:end="13:59"><expr pos:start="13:57" pos:end="13:59"><name pos:start="13:57" pos:end="13:59">reg</name></expr></argument>, <argument pos:start="13:62" pos:end="13:71"><expr pos:start="13:62" pos:end="13:71"><name pos:start="13:62" pos:end="13:71">valid_mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:30">debug_msix_enabled_old</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:63"><expr pos:start="21:5" pos:end="21:62"><name pos:start="21:5" pos:end="21:17">writable_mask</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:33"><name pos:start="21:21" pos:end="21:23">reg</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:33">emu_mask</name></name> <operator pos:start="21:35" pos:end="21:35">&amp;</operator> <operator pos:start="21:37" pos:end="21:37">~</operator><name pos:start="21:38" pos:end="21:49"><name pos:start="21:38" pos:end="21:40">reg</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:49">ro_mask</name></name> <operator pos:start="21:51" pos:end="21:51">&amp;</operator> <name pos:start="21:53" pos:end="21:62">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:79"><expr pos:start="23:5" pos:end="23:78"><name pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:13">cfg_entry</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:19">data</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:78"><name pos:start="23:23" pos:end="23:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="23:41" pos:end="23:78">(<argument pos:start="23:42" pos:end="23:45"><expr pos:start="23:42" pos:end="23:45"><operator pos:start="23:42" pos:end="23:42">*</operator><name pos:start="23:43" pos:end="23:45">val</name></expr></argument>, <argument pos:start="23:48" pos:end="23:62"><expr pos:start="23:48" pos:end="23:62"><name pos:start="23:48" pos:end="23:62"><name pos:start="23:48" pos:end="23:56">cfg_entry</name><operator pos:start="23:57" pos:end="23:58">-&gt;</operator><name pos:start="23:59" pos:end="23:62">data</name></name></expr></argument>, <argument pos:start="23:65" pos:end="23:77"><expr pos:start="23:65" pos:end="23:77"><name pos:start="23:65" pos:end="23:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:65"><expr pos:start="29:5" pos:end="29:64"><operator pos:start="29:5" pos:end="29:5">*</operator><name pos:start="29:6" pos:end="29:8">val</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:64"><name pos:start="29:12" pos:end="29:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="29:30" pos:end="29:64">(<argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><operator pos:start="29:31" pos:end="29:31">*</operator><name pos:start="29:32" pos:end="29:34">val</name></expr></argument>, <argument pos:start="29:37" pos:end="29:45"><expr pos:start="29:37" pos:end="29:45"><name pos:start="29:37" pos:end="29:45">dev_value</name></expr></argument>, <argument pos:start="29:48" pos:end="29:63"><expr pos:start="29:48" pos:end="29:63"><name pos:start="29:48" pos:end="29:63">throughable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:22">/* update MSI-X */</comment>

    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="37:44">(<expr pos:start="35:9" pos:end="37:43"><operator pos:start="35:9" pos:end="35:9">(</operator><operator pos:start="35:10" pos:end="35:10">*</operator><name pos:start="35:11" pos:end="35:13">val</name> <operator pos:start="35:15" pos:end="35:15">&amp;</operator> <name pos:start="35:17" pos:end="35:37">PCI_MSIX_FLAGS_ENABLE</name><operator pos:start="35:38" pos:end="35:38">)</operator>

        <operator pos:start="37:9" pos:end="37:10">&amp;&amp;</operator> <operator pos:start="37:12" pos:end="37:12">!</operator><operator pos:start="37:13" pos:end="37:13">(</operator><operator pos:start="37:14" pos:end="37:14">*</operator><name pos:start="37:15" pos:end="37:17">val</name> <operator pos:start="37:19" pos:end="37:19">&amp;</operator> <name pos:start="37:21" pos:end="37:42">PCI_MSIX_FLAGS_MASKALL</name><operator pos:start="37:43" pos:end="37:43">)</operator></expr>)</condition> <block pos:start="37:46" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:30">

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><call pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:26">xen_pt_msix_update</name><argument_list pos:start="39:27" pos:end="39:29">(<argument pos:start="39:28" pos:end="39:28"><expr pos:start="39:28" pos:end="39:28"><name pos:start="39:28" pos:end="39:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="45:5">else if <condition pos:start="41:15" pos:end="41:67">(<expr pos:start="41:16" pos:end="41:66"><operator pos:start="41:16" pos:end="41:16">!</operator><operator pos:start="41:17" pos:end="41:17">(</operator><operator pos:start="41:18" pos:end="41:18">*</operator><name pos:start="41:19" pos:end="41:21">val</name> <operator pos:start="41:23" pos:end="41:23">&amp;</operator> <name pos:start="41:25" pos:end="41:45">PCI_MSIX_FLAGS_ENABLE</name><operator pos:start="41:46" pos:end="41:46">)</operator> <operator pos:start="41:48" pos:end="41:49">&amp;&amp;</operator> <name pos:start="41:51" pos:end="41:66"><name pos:start="41:51" pos:end="41:51">s</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:57">msix</name><operator pos:start="41:58" pos:end="41:59">-&gt;</operator><name pos:start="41:60" pos:end="41:66">enabled</name></name></expr>)</condition> <block pos:start="41:69" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:31">

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><call pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:27">xen_pt_msix_disable</name><argument_list pos:start="43:28" pos:end="43:30">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><name pos:start="43:29" pos:end="43:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:46"><expr pos:start="49:5" pos:end="49:45"><name pos:start="49:5" pos:end="49:26">debug_msix_enabled_old</name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:45"><name pos:start="49:30" pos:end="49:30">s</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:36">msix</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:45">enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:56"><expr pos:start="51:5" pos:end="51:55"><name pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:11">msix</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:20">enabled</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <operator pos:start="51:24" pos:end="51:24">!</operator><operator pos:start="51:25" pos:end="51:25">!</operator><operator pos:start="51:26" pos:end="51:26">(</operator><operator pos:start="51:27" pos:end="51:27">*</operator><name pos:start="51:28" pos:end="51:30">val</name> <operator pos:start="51:32" pos:end="51:32">&amp;</operator> <name pos:start="51:34" pos:end="51:54">PCI_MSIX_FLAGS_ENABLE</name><operator pos:start="51:55" pos:end="51:55">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:51">(<expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:15">msix</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:24">enabled</name></name> <operator pos:start="53:26" pos:end="53:27">!=</operator> <name pos:start="53:29" pos:end="53:50">debug_msix_enabled_old</name></expr>)</condition> <block pos:start="53:53" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:60">

        <expr_stmt pos:start="55:9" pos:end="57:60"><expr pos:start="55:9" pos:end="57:59"><call pos:start="55:9" pos:end="57:59"><name pos:start="55:9" pos:end="55:18">XEN_PT_LOG</name><argument_list pos:start="55:19" pos:end="57:59">(<argument pos:start="55:20" pos:end="55:26"><expr pos:start="55:20" pos:end="55:26"><operator pos:start="55:20" pos:end="55:20">&amp;</operator><name pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:26">dev</name></name></expr></argument>, <argument pos:start="55:29" pos:end="55:40"><expr pos:start="55:29" pos:end="55:40"><literal type="string" pos:start="55:29" pos:end="55:40">"%s MSI-X\n"</literal></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:58"><expr pos:start="57:20" pos:end="57:58"><ternary pos:start="57:20" pos:end="57:58"><condition pos:start="57:20" pos:end="57:37"><expr pos:start="57:20" pos:end="57:35"><name pos:start="57:20" pos:end="57:35"><name pos:start="57:20" pos:end="57:20">s</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:26">msix</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:35">enabled</name></name></expr> ?</condition><then pos:start="57:39" pos:end="57:46"> <expr pos:start="57:39" pos:end="57:46"><literal type="string" pos:start="57:39" pos:end="57:46">"enable"</literal></expr> </then><else pos:start="57:48" pos:end="57:58">: <expr pos:start="57:50" pos:end="57:58"><literal type="string" pos:start="57:50" pos:end="57:58">"disable"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
