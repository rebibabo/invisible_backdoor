<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5705.c" pos:tabs="8"><function pos:start="1:1" pos:end="779:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_do_open</name><parameter_list pos:start="1:25" pos:end="3:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:52">QDict</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:61">options</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:30">Error</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier><modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="779:1">{<block_content pos:start="7:5" pos:end="777:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:20">len</name></decl>, <decl pos:start="9:23" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:23" pos:end="9:23">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">QCowHeader</name></type> <name pos:start="13:16" pos:end="13:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:20">ext_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:30">l1_vm_state_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:59"><expr pos:start="23:5" pos:end="23:58"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:58"><name pos:start="23:11" pos:end="23:20">bdrv_pread</name><argument_list pos:start="23:21" pos:end="23:58">(<argument pos:start="23:22" pos:end="23:29"><expr pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:23">bs</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:29">file</name></name></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:41"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:41">header</name></expr></argument>, <argument pos:start="23:44" pos:end="23:57"><expr pos:start="23:44" pos:end="23:57"><sizeof pos:start="23:44" pos:end="23:57">sizeof<argument_list pos:start="23:50" pos:end="23:57">(<argument pos:start="23:51" pos:end="23:56"><expr pos:start="23:51" pos:end="23:56"><name pos:start="23:51" pos:end="23:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:68"><expr pos:start="27:9" pos:end="27:67"><call pos:start="27:9" pos:end="27:67"><name pos:start="27:9" pos:end="27:24">error_setg_errno</name><argument_list pos:start="27:25" pos:end="27:67">(<argument pos:start="27:26" pos:end="27:29"><expr pos:start="27:26" pos:end="27:29"><name pos:start="27:26" pos:end="27:29">errp</name></expr></argument>, <argument pos:start="27:32" pos:end="27:35"><expr pos:start="27:32" pos:end="27:35"><operator pos:start="27:32" pos:end="27:32">-</operator><name pos:start="27:33" pos:end="27:35">ret</name></expr></argument>, <argument pos:start="27:38" pos:end="27:66"><expr pos:start="27:38" pos:end="27:66"><literal type="string" pos:start="27:38" pos:end="27:66">"Could not read qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><call pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:16">be32_to_cpus</name><argument_list pos:start="33:17" pos:end="33:31">(<argument pos:start="33:18" pos:end="33:30"><expr pos:start="33:18" pos:end="33:30"><operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:30"><name pos:start="33:19" pos:end="33:24">header</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:16">be32_to_cpus</name><argument_list pos:start="35:17" pos:end="35:33">(<argument pos:start="35:18" pos:end="35:32"><expr pos:start="35:18" pos:end="35:32"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:32"><name pos:start="35:19" pos:end="35:24">header</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><call pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:16">be64_to_cpus</name><argument_list pos:start="37:17" pos:end="37:45">(<argument pos:start="37:18" pos:end="37:44"><expr pos:start="37:18" pos:end="37:44"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:44"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><call pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:43">(<argument pos:start="39:18" pos:end="39:42"><expr pos:start="39:18" pos:end="39:42"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:42"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><call pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:16">be64_to_cpus</name><argument_list pos:start="41:17" pos:end="41:30">(<argument pos:start="41:18" pos:end="41:29"><expr pos:start="41:18" pos:end="41:29"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:29"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><call pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:16">be32_to_cpus</name><argument_list pos:start="43:17" pos:end="43:38">(<argument pos:start="43:18" pos:end="43:37"><expr pos:start="43:18" pos:end="43:37"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:37"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:39"><expr pos:start="45:5" pos:end="45:38"><call pos:start="45:5" pos:end="45:38"><name pos:start="45:5" pos:end="45:16">be32_to_cpus</name><argument_list pos:start="45:17" pos:end="45:38">(<argument pos:start="45:18" pos:end="45:37"><expr pos:start="45:18" pos:end="45:37"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:37"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><call pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:16">be64_to_cpus</name><argument_list pos:start="47:17" pos:end="47:41">(<argument pos:start="47:18" pos:end="47:40"><expr pos:start="47:18" pos:end="47:40"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:40"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><call pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:16">be32_to_cpus</name><argument_list pos:start="49:17" pos:end="49:33">(<argument pos:start="49:18" pos:end="49:32"><expr pos:start="49:18" pos:end="49:32"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:32"><name pos:start="49:19" pos:end="49:24">header</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><call pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:16">be64_to_cpus</name><argument_list pos:start="51:17" pos:end="51:47">(<argument pos:start="51:18" pos:end="51:46"><expr pos:start="51:18" pos:end="51:46"><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:46"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><call pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:16">be32_to_cpus</name><argument_list pos:start="53:17" pos:end="53:49">(<argument pos:start="53:18" pos:end="53:48"><expr pos:start="53:18" pos:end="53:48"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:48"><name pos:start="53:19" pos:end="53:24">header</name><operator pos:start="53:25" pos:end="53:25">.</operator><name pos:start="53:26" pos:end="53:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><call pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:16">be64_to_cpus</name><argument_list pos:start="55:17" pos:end="55:42">(<argument pos:start="55:18" pos:end="55:41"><expr pos:start="55:18" pos:end="55:41"><operator pos:start="55:18" pos:end="55:18">&amp;</operator><name pos:start="55:19" pos:end="55:41"><name pos:start="55:19" pos:end="55:24">header</name><operator pos:start="55:25" pos:end="55:25">.</operator><name pos:start="55:26" pos:end="55:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:39"><expr pos:start="57:5" pos:end="57:38"><call pos:start="57:5" pos:end="57:38"><name pos:start="57:5" pos:end="57:16">be32_to_cpus</name><argument_list pos:start="57:17" pos:end="57:38">(<argument pos:start="57:18" pos:end="57:37"><expr pos:start="57:18" pos:end="57:37"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:37"><name pos:start="57:19" pos:end="57:24">header</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:35">(<expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:14">header</name><operator pos:start="61:15" pos:end="61:15">.</operator><name pos:start="61:16" pos:end="61:20">magic</name></name> <operator pos:start="61:22" pos:end="61:23">!=</operator> <name pos:start="61:25" pos:end="61:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="61:37" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:18">

        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><call pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:18">error_setg</name><argument_list pos:start="63:19" pos:end="63:56">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">errp</name></expr></argument>, <argument pos:start="63:26" pos:end="63:55"><expr pos:start="63:26" pos:end="63:55"><literal type="string" pos:start="63:26" pos:end="63:55">"Image is not in qcow2 format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:49">(<expr pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:14">header</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:22">version</name></name> <operator pos:start="71:24" pos:end="71:24">&lt;</operator> <literal type="number" pos:start="71:26" pos:end="71:26">2</literal> <operator pos:start="71:28" pos:end="71:29">||</operator> <name pos:start="71:31" pos:end="71:44"><name pos:start="71:31" pos:end="71:36">header</name><operator pos:start="71:37" pos:end="71:37">.</operator><name pos:start="71:38" pos:end="71:44">version</name></name> <operator pos:start="71:46" pos:end="71:46">&gt;</operator> <literal type="number" pos:start="71:48" pos:end="71:48">3</literal></expr>)</condition> <block pos:start="71:51" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:18">

        <expr_stmt pos:start="73:9" pos:end="73:79"><expr pos:start="73:9" pos:end="73:78"><call pos:start="73:9" pos:end="73:78"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="73:78">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:61"><expr pos:start="73:26" pos:end="73:61"><literal type="string" pos:start="73:26" pos:end="73:54">"Unsupported qcow2 version %"</literal> <name pos:start="73:56" pos:end="73:61">PRIu32</name></expr></argument>, <argument pos:start="73:64" pos:end="73:77"><expr pos:start="73:64" pos:end="73:77"><name pos:start="73:64" pos:end="73:77"><name pos:start="73:64" pos:end="73:69">header</name><operator pos:start="73:70" pos:end="73:70">.</operator><name pos:start="73:71" pos:end="73:77">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:23"><expr pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">-</operator><name pos:start="75:16" pos:end="75:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:19">qcow_version</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:36"><name pos:start="83:23" pos:end="83:28">header</name><operator pos:start="83:29" pos:end="83:29">.</operator><name pos:start="83:30" pos:end="83:36">version</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:33">/* Initialise cluster size */</comment>

    <if_stmt pos:start="89:5" pos:end="101:5"><if pos:start="89:5" pos:end="101:5">if <condition pos:start="89:8" pos:end="91:47">(<expr pos:start="89:9" pos:end="91:46"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:14">header</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:27">cluster_bits</name></name> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <name pos:start="89:31" pos:end="89:46">MIN_CLUSTER_BITS</name> <operator pos:start="89:48" pos:end="89:49">||</operator>

        <name pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:14">header</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:27">cluster_bits</name></name> <operator pos:start="91:29" pos:end="91:29">&gt;</operator> <name pos:start="91:31" pos:end="91:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="91:49" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:18">

        <expr_stmt pos:start="93:9" pos:end="95:40"><expr pos:start="93:9" pos:end="95:39"><call pos:start="93:9" pos:end="95:39"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="95:39">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:63"><expr pos:start="93:26" pos:end="93:63"><literal type="string" pos:start="93:26" pos:end="93:56">"Unsupported cluster size: 2^%"</literal> <name pos:start="93:58" pos:end="93:63">PRIu32</name></expr></argument>,

                   <argument pos:start="95:20" pos:end="95:38"><expr pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:25">header</name><operator pos:start="95:26" pos:end="95:26">.</operator><name pos:start="95:27" pos:end="95:38">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <operator pos:start="97:15" pos:end="97:15">-</operator><name pos:start="97:16" pos:end="97:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:19"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:19">cluster_bits</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:41"><name pos:start="105:23" pos:end="105:28">header</name><operator pos:start="105:29" pos:end="105:29">.</operator><name pos:start="105:30" pos:end="105:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:19"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:19">cluster_size</name></name> <operator pos:start="107:21" pos:end="107:21">=</operator> <literal type="number" pos:start="107:23" pos:end="107:23">1</literal> <operator pos:start="107:25" pos:end="107:26">&lt;&lt;</operator> <name pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:28">s</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:52"><expr pos:start="109:5" pos:end="109:51"><name pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:22">cluster_sectors</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">1</literal> <operator pos:start="109:28" pos:end="109:29">&lt;&lt;</operator> <operator pos:start="109:31" pos:end="109:31">(</operator><name pos:start="109:32" pos:end="109:46"><name pos:start="109:32" pos:end="109:32">s</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:46">cluster_bits</name></name> <operator pos:start="109:48" pos:end="109:48">-</operator> <literal type="number" pos:start="109:50" pos:end="109:50">9</literal><operator pos:start="109:51" pos:end="109:51">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:44">/* Initialise version 3 header fields */</comment>

    <if_stmt pos:start="115:5" pos:end="151:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:28">(<expr pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:14">header</name><operator pos:start="115:15" pos:end="115:15">.</operator><name pos:start="115:16" pos:end="115:22">version</name></name> <operator pos:start="115:24" pos:end="115:25">==</operator> <literal type="number" pos:start="115:27" pos:end="115:27">2</literal></expr>)</condition> <block pos:start="115:30" pos:end="127:5">{<block_content pos:start="117:9" pos:end="125:45">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:14">header</name><operator pos:start="117:15" pos:end="117:15">.</operator><name pos:start="117:16" pos:end="117:36">incompatible_features</name></name>    <operator pos:start="117:41" pos:end="117:41">=</operator> <literal type="number" pos:start="117:43" pos:end="117:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:14">header</name><operator pos:start="119:15" pos:end="119:15">.</operator><name pos:start="119:16" pos:end="119:34">compatible_features</name></name>      <operator pos:start="119:41" pos:end="119:41">=</operator> <literal type="number" pos:start="119:43" pos:end="119:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:44"><expr pos:start="121:9" pos:end="121:43"><name pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:14">header</name><operator pos:start="121:15" pos:end="121:15">.</operator><name pos:start="121:16" pos:end="121:33">autoclear_features</name></name>       <operator pos:start="121:41" pos:end="121:41">=</operator> <literal type="number" pos:start="121:43" pos:end="121:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:44"><expr pos:start="123:9" pos:end="123:43"><name pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:14">header</name><operator pos:start="123:15" pos:end="123:15">.</operator><name pos:start="123:16" pos:end="123:29">refcount_order</name></name>           <operator pos:start="123:41" pos:end="123:41">=</operator> <literal type="number" pos:start="123:43" pos:end="123:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:45"><expr pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:14">header</name><operator pos:start="125:15" pos:end="125:15">.</operator><name pos:start="125:16" pos:end="125:28">header_length</name></name>            <operator pos:start="125:41" pos:end="125:41">=</operator> <literal type="number" pos:start="125:43" pos:end="125:44">72</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="151:5">else <block pos:start="127:12" pos:end="151:5">{<block_content pos:start="129:9" pos:end="149:9">

        <expr_stmt pos:start="129:9" pos:end="129:52"><expr pos:start="129:9" pos:end="129:51"><call pos:start="129:9" pos:end="129:51"><name pos:start="129:9" pos:end="129:20">be64_to_cpus</name><argument_list pos:start="129:21" pos:end="129:51">(<argument pos:start="129:22" pos:end="129:50"><expr pos:start="129:22" pos:end="129:50"><operator pos:start="129:22" pos:end="129:22">&amp;</operator><name pos:start="129:23" pos:end="129:50"><name pos:start="129:23" pos:end="129:28">header</name><operator pos:start="129:29" pos:end="129:29">.</operator><name pos:start="129:30" pos:end="129:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:50"><expr pos:start="131:9" pos:end="131:49"><call pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:20">be64_to_cpus</name><argument_list pos:start="131:21" pos:end="131:49">(<argument pos:start="131:22" pos:end="131:48"><expr pos:start="131:22" pos:end="131:48"><operator pos:start="131:22" pos:end="131:22">&amp;</operator><name pos:start="131:23" pos:end="131:48"><name pos:start="131:23" pos:end="131:28">header</name><operator pos:start="131:29" pos:end="131:29">.</operator><name pos:start="131:30" pos:end="131:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:49"><expr pos:start="133:9" pos:end="133:48"><call pos:start="133:9" pos:end="133:48"><name pos:start="133:9" pos:end="133:20">be64_to_cpus</name><argument_list pos:start="133:21" pos:end="133:48">(<argument pos:start="133:22" pos:end="133:47"><expr pos:start="133:22" pos:end="133:47"><operator pos:start="133:22" pos:end="133:22">&amp;</operator><name pos:start="133:23" pos:end="133:47"><name pos:start="133:23" pos:end="133:28">header</name><operator pos:start="133:29" pos:end="133:29">.</operator><name pos:start="133:30" pos:end="133:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><call pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:20">be32_to_cpus</name><argument_list pos:start="135:21" pos:end="135:44">(<argument pos:start="135:22" pos:end="135:43"><expr pos:start="135:22" pos:end="135:43"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:43"><name pos:start="135:23" pos:end="135:28">header</name><operator pos:start="135:29" pos:end="135:29">.</operator><name pos:start="135:30" pos:end="135:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:44"><expr pos:start="137:9" pos:end="137:43"><call pos:start="137:9" pos:end="137:43"><name pos:start="137:9" pos:end="137:20">be32_to_cpus</name><argument_list pos:start="137:21" pos:end="137:43">(<argument pos:start="137:22" pos:end="137:42"><expr pos:start="137:22" pos:end="137:42"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:42"><name pos:start="137:23" pos:end="137:28">header</name><operator pos:start="137:29" pos:end="137:29">.</operator><name pos:start="137:30" pos:end="137:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="141:9" pos:end="149:9"><if pos:start="141:9" pos:end="149:9">if <condition pos:start="141:12" pos:end="141:39">(<expr pos:start="141:13" pos:end="141:38"><name pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:18">header</name><operator pos:start="141:19" pos:end="141:19">.</operator><name pos:start="141:20" pos:end="141:32">header_length</name></name> <operator pos:start="141:34" pos:end="141:34">&lt;</operator> <literal type="number" pos:start="141:36" pos:end="141:38">104</literal></expr>)</condition> <block pos:start="141:41" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:22">

            <expr_stmt pos:start="143:13" pos:end="143:55"><expr pos:start="143:13" pos:end="143:54"><call pos:start="143:13" pos:end="143:54"><name pos:start="143:13" pos:end="143:22">error_setg</name><argument_list pos:start="143:23" pos:end="143:54">(<argument pos:start="143:24" pos:end="143:27"><expr pos:start="143:24" pos:end="143:27"><name pos:start="143:24" pos:end="143:27">errp</name></expr></argument>, <argument pos:start="143:30" pos:end="143:53"><expr pos:start="143:30" pos:end="143:53"><literal type="string" pos:start="143:30" pos:end="143:53">"qcow2 header too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:26"><expr pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <operator pos:start="145:19" pos:end="145:19">-</operator><name pos:start="145:20" pos:end="145:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="147:13" pos:end="147:22">goto <name pos:start="147:18" pos:end="147:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="155:5" pos:end="163:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:47">(<expr pos:start="155:9" pos:end="155:46"><name pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:14">header</name><operator pos:start="155:15" pos:end="155:15">.</operator><name pos:start="155:16" pos:end="155:28">header_length</name></name> <operator pos:start="155:30" pos:end="155:30">&gt;</operator> <name pos:start="155:32" pos:end="155:46"><name pos:start="155:32" pos:end="155:32">s</name><operator pos:start="155:33" pos:end="155:34">-&gt;</operator><name pos:start="155:35" pos:end="155:46">cluster_size</name></name></expr>)</condition> <block pos:start="155:49" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:18">

        <expr_stmt pos:start="157:9" pos:end="157:62"><expr pos:start="157:9" pos:end="157:61"><call pos:start="157:9" pos:end="157:61"><name pos:start="157:9" pos:end="157:18">error_setg</name><argument_list pos:start="157:19" pos:end="157:61">(<argument pos:start="157:20" pos:end="157:23"><expr pos:start="157:20" pos:end="157:23"><name pos:start="157:20" pos:end="157:23">errp</name></expr></argument>, <argument pos:start="157:26" pos:end="157:60"><expr pos:start="157:26" pos:end="157:60"><literal type="string" pos:start="157:26" pos:end="157:60">"qcow2 header exceeds cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:22"><expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <operator pos:start="159:15" pos:end="159:15">-</operator><name pos:start="159:16" pos:end="159:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:18">goto <name pos:start="161:14" pos:end="161:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="187:5"><if pos:start="167:5" pos:end="187:5">if <condition pos:start="167:8" pos:end="167:46">(<expr pos:start="167:9" pos:end="167:45"><name pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:14">header</name><operator pos:start="167:15" pos:end="167:15">.</operator><name pos:start="167:16" pos:end="167:28">header_length</name></name> <operator pos:start="167:30" pos:end="167:30">&gt;</operator> <sizeof pos:start="167:32" pos:end="167:45">sizeof<argument_list pos:start="167:38" pos:end="167:45">(<argument pos:start="167:39" pos:end="167:44"><expr pos:start="167:39" pos:end="167:44"><name pos:start="167:39" pos:end="167:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="167:48" pos:end="187:5">{<block_content pos:start="169:9" pos:end="185:9">

        <expr_stmt pos:start="169:9" pos:end="169:78"><expr pos:start="169:9" pos:end="169:77"><name pos:start="169:9" pos:end="169:37"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:37">unknown_header_fields_size</name></name> <operator pos:start="169:39" pos:end="169:39">=</operator> <name pos:start="169:41" pos:end="169:60"><name pos:start="169:41" pos:end="169:46">header</name><operator pos:start="169:47" pos:end="169:47">.</operator><name pos:start="169:48" pos:end="169:60">header_length</name></name> <operator pos:start="169:62" pos:end="169:62">-</operator> <sizeof pos:start="169:64" pos:end="169:77">sizeof<argument_list pos:start="169:70" pos:end="169:77">(<argument pos:start="169:71" pos:end="169:76"><expr pos:start="169:71" pos:end="169:76"><name pos:start="169:71" pos:end="169:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:75"><expr pos:start="171:9" pos:end="171:74"><name pos:start="171:9" pos:end="171:32"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:32">unknown_header_fields</name></name> <operator pos:start="171:34" pos:end="171:34">=</operator> <call pos:start="171:36" pos:end="171:74"><name pos:start="171:36" pos:end="171:43">g_malloc</name><argument_list pos:start="171:44" pos:end="171:74">(<argument pos:start="171:45" pos:end="171:73"><expr pos:start="171:45" pos:end="171:73"><name pos:start="171:45" pos:end="171:73"><name pos:start="171:45" pos:end="171:45">s</name><operator pos:start="171:46" pos:end="171:47">-&gt;</operator><name pos:start="171:48" pos:end="171:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="175:56"><expr pos:start="173:9" pos:end="175:55"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="175:55"><name pos:start="173:15" pos:end="173:24">bdrv_pread</name><argument_list pos:start="173:25" pos:end="175:55">(<argument pos:start="173:26" pos:end="173:33"><expr pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:27">bs</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:33">file</name></name></expr></argument>, <argument pos:start="173:36" pos:end="173:49"><expr pos:start="173:36" pos:end="173:49"><sizeof pos:start="173:36" pos:end="173:49">sizeof<argument_list pos:start="173:42" pos:end="173:49">(<argument pos:start="173:43" pos:end="173:48"><expr pos:start="173:43" pos:end="173:48"><name pos:start="173:43" pos:end="173:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="173:52" pos:end="173:75"><expr pos:start="173:52" pos:end="173:75"><name pos:start="173:52" pos:end="173:75"><name pos:start="173:52" pos:end="173:52">s</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:75">unknown_header_fields</name></name></expr></argument>,

                         <argument pos:start="175:26" pos:end="175:54"><expr pos:start="175:26" pos:end="175:54"><name pos:start="175:26" pos:end="175:54"><name pos:start="175:26" pos:end="175:26">s</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="185:9"><if pos:start="177:9" pos:end="185:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition> <block pos:start="177:22" pos:end="185:9">{<block_content pos:start="179:13" pos:end="183:22">

            <expr_stmt pos:start="179:13" pos:end="181:39"><expr pos:start="179:13" pos:end="181:38"><call pos:start="179:13" pos:end="181:38"><name pos:start="179:13" pos:end="179:28">error_setg_errno</name><argument_list pos:start="179:29" pos:end="181:38">(<argument pos:start="179:30" pos:end="179:33"><expr pos:start="179:30" pos:end="179:33"><name pos:start="179:30" pos:end="179:33">errp</name></expr></argument>, <argument pos:start="179:36" pos:end="179:39"><expr pos:start="179:36" pos:end="179:39"><operator pos:start="179:36" pos:end="179:36">-</operator><name pos:start="179:37" pos:end="179:39">ret</name></expr></argument>, <argument pos:start="179:42" pos:end="181:37"><expr pos:start="179:42" pos:end="181:37"><literal type="string" pos:start="179:42" pos:end="179:79">"Could not read unknown qcow2 header "</literal>

                             <literal type="string" pos:start="181:30" pos:end="181:37">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:22">goto <name pos:start="183:18" pos:end="183:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="199:5"><if pos:start="191:5" pos:end="199:5">if <condition pos:start="191:8" pos:end="191:53">(<expr pos:start="191:9" pos:end="191:52"><name pos:start="191:9" pos:end="191:34"><name pos:start="191:9" pos:end="191:14">header</name><operator pos:start="191:15" pos:end="191:15">.</operator><name pos:start="191:16" pos:end="191:34">backing_file_offset</name></name> <operator pos:start="191:36" pos:end="191:36">&gt;</operator> <name pos:start="191:38" pos:end="191:52"><name pos:start="191:38" pos:end="191:38">s</name><operator pos:start="191:39" pos:end="191:40">-&gt;</operator><name pos:start="191:41" pos:end="191:52">cluster_size</name></name></expr>)</condition> <block pos:start="191:55" pos:end="199:5">{<block_content pos:start="193:9" pos:end="197:18">

        <expr_stmt pos:start="193:9" pos:end="193:56"><expr pos:start="193:9" pos:end="193:55"><call pos:start="193:9" pos:end="193:55"><name pos:start="193:9" pos:end="193:18">error_setg</name><argument_list pos:start="193:19" pos:end="193:55">(<argument pos:start="193:20" pos:end="193:23"><expr pos:start="193:20" pos:end="193:23"><name pos:start="193:20" pos:end="193:23">errp</name></expr></argument>, <argument pos:start="193:26" pos:end="193:54"><expr pos:start="193:26" pos:end="193:54"><literal type="string" pos:start="193:26" pos:end="193:54">"Invalid backing file offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:22"><expr pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <operator pos:start="195:15" pos:end="195:15">-</operator><name pos:start="195:16" pos:end="195:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:18">goto <name pos:start="197:14" pos:end="197:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="211:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:35">(<expr pos:start="203:9" pos:end="203:34"><name pos:start="203:9" pos:end="203:34"><name pos:start="203:9" pos:end="203:14">header</name><operator pos:start="203:15" pos:end="203:15">.</operator><name pos:start="203:16" pos:end="203:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="203:37" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:45">

        <expr_stmt pos:start="205:9" pos:end="205:45"><expr pos:start="205:9" pos:end="205:44"><name pos:start="205:9" pos:end="205:15">ext_end</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <name pos:start="205:19" pos:end="205:44"><name pos:start="205:19" pos:end="205:24">header</name><operator pos:start="205:25" pos:end="205:25">.</operator><name pos:start="205:26" pos:end="205:44">backing_file_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="207:7" pos:end="211:5">else <block pos:start="207:12" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:43">

        <expr_stmt pos:start="209:9" pos:end="209:43"><expr pos:start="209:9" pos:end="209:42"><name pos:start="209:9" pos:end="209:15">ext_end</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <literal type="number" pos:start="209:19" pos:end="209:19">1</literal> <operator pos:start="209:21" pos:end="209:22">&lt;&lt;</operator> <name pos:start="209:24" pos:end="209:42"><name pos:start="209:24" pos:end="209:29">header</name><operator pos:start="209:30" pos:end="209:30">.</operator><name pos:start="209:31" pos:end="209:42">cluster_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:29">/* Handle feature bits */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:63"><expr pos:start="217:5" pos:end="217:62"><name pos:start="217:5" pos:end="217:28"><name pos:start="217:5" pos:end="217:5">s</name><operator pos:start="217:6" pos:end="217:7">-&gt;</operator><name pos:start="217:8" pos:end="217:28">incompatible_features</name></name>    <operator pos:start="217:33" pos:end="217:33">=</operator> <name pos:start="217:35" pos:end="217:62"><name pos:start="217:35" pos:end="217:40">header</name><operator pos:start="217:41" pos:end="217:41">.</operator><name pos:start="217:42" pos:end="217:62">incompatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:61"><expr pos:start="219:5" pos:end="219:60"><name pos:start="219:5" pos:end="219:26"><name pos:start="219:5" pos:end="219:5">s</name><operator pos:start="219:6" pos:end="219:7">-&gt;</operator><name pos:start="219:8" pos:end="219:26">compatible_features</name></name>      <operator pos:start="219:33" pos:end="219:33">=</operator> <name pos:start="219:35" pos:end="219:60"><name pos:start="219:35" pos:end="219:40">header</name><operator pos:start="219:41" pos:end="219:41">.</operator><name pos:start="219:42" pos:end="219:60">compatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:60"><expr pos:start="221:5" pos:end="221:59"><name pos:start="221:5" pos:end="221:25"><name pos:start="221:5" pos:end="221:5">s</name><operator pos:start="221:6" pos:end="221:7">-&gt;</operator><name pos:start="221:8" pos:end="221:25">autoclear_features</name></name>       <operator pos:start="221:33" pos:end="221:33">=</operator> <name pos:start="221:35" pos:end="221:59"><name pos:start="221:35" pos:end="221:40">header</name><operator pos:start="221:41" pos:end="221:41">.</operator><name pos:start="221:42" pos:end="221:59">autoclear_features</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="225:5" pos:end="245:5"><if pos:start="225:5" pos:end="245:5">if <condition pos:start="225:8" pos:end="225:56">(<expr pos:start="225:9" pos:end="225:55"><name pos:start="225:9" pos:end="225:32"><name pos:start="225:9" pos:end="225:9">s</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:32">incompatible_features</name></name> <operator pos:start="225:34" pos:end="225:34">&amp;</operator> <operator pos:start="225:36" pos:end="225:36">~</operator><name pos:start="225:37" pos:end="225:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="225:58" pos:end="245:5">{<block_content pos:start="227:9" pos:end="243:18">

        <decl_stmt pos:start="227:9" pos:end="227:35"><decl pos:start="227:9" pos:end="227:34"><type pos:start="227:9" pos:end="227:14"><name pos:start="227:9" pos:end="227:12">void</name> <modifier pos:start="227:14" pos:end="227:14">*</modifier></type><name pos:start="227:15" pos:end="227:27">feature_table</name> <init pos:start="227:29" pos:end="227:34">= <expr pos:start="227:31" pos:end="227:34"><name pos:start="227:31" pos:end="227:34">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="229:9" pos:end="231:52"><expr pos:start="229:9" pos:end="231:51"><call pos:start="229:9" pos:end="231:51"><name pos:start="229:9" pos:end="229:29">qcow2_read_extensions</name><argument_list pos:start="229:30" pos:end="231:51">(<argument pos:start="229:31" pos:end="229:32"><expr pos:start="229:31" pos:end="229:32"><name pos:start="229:31" pos:end="229:32">bs</name></expr></argument>, <argument pos:start="229:35" pos:end="229:54"><expr pos:start="229:35" pos:end="229:54"><name pos:start="229:35" pos:end="229:54"><name pos:start="229:35" pos:end="229:40">header</name><operator pos:start="229:41" pos:end="229:41">.</operator><name pos:start="229:42" pos:end="229:54">header_length</name></name></expr></argument>, <argument pos:start="229:57" pos:end="229:63"><expr pos:start="229:57" pos:end="229:63"><name pos:start="229:57" pos:end="229:63">ext_end</name></expr></argument>,

                              <argument pos:start="231:31" pos:end="231:44"><expr pos:start="231:31" pos:end="231:44"><operator pos:start="231:31" pos:end="231:31">&amp;</operator><name pos:start="231:32" pos:end="231:44">feature_table</name></expr></argument>, <argument pos:start="231:47" pos:end="231:50"><expr pos:start="231:47" pos:end="231:50"><name pos:start="231:47" pos:end="231:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="237:57"><expr pos:start="233:9" pos:end="237:56"><call pos:start="233:9" pos:end="237:56"><name pos:start="233:9" pos:end="233:34">report_unsupported_feature</name><argument_list pos:start="233:35" pos:end="237:56">(<argument pos:start="233:36" pos:end="233:39"><expr pos:start="233:36" pos:end="233:39"><name pos:start="233:36" pos:end="233:39">errp</name></expr></argument>, <argument pos:start="233:42" pos:end="233:54"><expr pos:start="233:42" pos:end="233:54"><name pos:start="233:42" pos:end="233:54">feature_table</name></expr></argument>,

                                   <argument pos:start="235:36" pos:end="237:55"><expr pos:start="235:36" pos:end="237:55"><name pos:start="235:36" pos:end="235:59"><name pos:start="235:36" pos:end="235:36">s</name><operator pos:start="235:37" pos:end="235:38">-&gt;</operator><name pos:start="235:39" pos:end="235:59">incompatible_features</name></name> <operator pos:start="235:61" pos:end="235:61">&amp;</operator>

                                   <operator pos:start="237:36" pos:end="237:36">~</operator><name pos:start="237:37" pos:end="237:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:23"><expr pos:start="239:9" pos:end="239:22"><name pos:start="239:9" pos:end="239:11">ret</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <operator pos:start="239:15" pos:end="239:15">-</operator><name pos:start="239:16" pos:end="239:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:30"><expr pos:start="241:9" pos:end="241:29"><call pos:start="241:9" pos:end="241:29"><name pos:start="241:9" pos:end="241:14">g_free</name><argument_list pos:start="241:15" pos:end="241:29">(<argument pos:start="241:16" pos:end="241:28"><expr pos:start="241:16" pos:end="241:28"><name pos:start="241:16" pos:end="241:28">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="243:9" pos:end="243:18">goto <name pos:start="243:14" pos:end="243:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="249:5" pos:end="267:5"><if pos:start="249:5" pos:end="267:5">if <condition pos:start="249:8" pos:end="249:58">(<expr pos:start="249:9" pos:end="249:57"><name pos:start="249:9" pos:end="249:32"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:32">incompatible_features</name></name> <operator pos:start="249:34" pos:end="249:34">&amp;</operator> <name pos:start="249:36" pos:end="249:57">QCOW2_INCOMPAT_CORRUPT</name></expr>)</condition> <block pos:start="249:60" pos:end="267:5">{<block_content pos:start="255:9" pos:end="265:9">

        <comment type="block" pos:start="251:9" pos:end="253:11">/* Corrupt images may not be written to unless they are being repaired

         */</comment>

        <if_stmt pos:start="255:9" pos:end="265:9"><if pos:start="255:9" pos:end="265:9">if <condition pos:start="255:12" pos:end="255:61">(<expr pos:start="255:13" pos:end="255:60"><operator pos:start="255:13" pos:end="255:13">(</operator><name pos:start="255:14" pos:end="255:18">flags</name> <operator pos:start="255:20" pos:end="255:20">&amp;</operator> <name pos:start="255:22" pos:end="255:32">BDRV_O_RDWR</name><operator pos:start="255:33" pos:end="255:33">)</operator> <operator pos:start="255:35" pos:end="255:36">&amp;&amp;</operator> <operator pos:start="255:38" pos:end="255:38">!</operator><operator pos:start="255:39" pos:end="255:39">(</operator><name pos:start="255:40" pos:end="255:44">flags</name> <operator pos:start="255:46" pos:end="255:46">&amp;</operator> <name pos:start="255:48" pos:end="255:59">BDRV_O_CHECK</name><operator pos:start="255:60" pos:end="255:60">)</operator></expr>)</condition> <block pos:start="255:63" pos:end="265:9">{<block_content pos:start="257:13" pos:end="263:22">

            <expr_stmt pos:start="257:13" pos:end="259:37"><expr pos:start="257:13" pos:end="259:36"><call pos:start="257:13" pos:end="259:36"><name pos:start="257:13" pos:end="257:22">error_setg</name><argument_list pos:start="257:23" pos:end="259:36">(<argument pos:start="257:24" pos:end="257:27"><expr pos:start="257:24" pos:end="257:27"><name pos:start="257:24" pos:end="257:27">errp</name></expr></argument>, <argument pos:start="257:30" pos:end="259:35"><expr pos:start="257:30" pos:end="259:35"><literal type="string" pos:start="257:30" pos:end="257:73">"qcow2: Image is corrupt; cannot be opened "</literal>

                       <literal type="string" pos:start="259:24" pos:end="259:35">"read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:26"><expr pos:start="261:13" pos:end="261:25"><name pos:start="261:13" pos:end="261:15">ret</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <operator pos:start="261:19" pos:end="261:19">-</operator><name pos:start="261:20" pos:end="261:25">EACCES</name></expr>;</expr_stmt>

            <goto pos:start="263:13" pos:end="263:22">goto <name pos:start="263:18" pos:end="263:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="271:5" pos:end="271:49">/* Check support for various header values */</comment>

    <if_stmt pos:start="273:5" pos:end="283:5"><if pos:start="273:5" pos:end="283:5">if <condition pos:start="273:8" pos:end="273:34">(<expr pos:start="273:9" pos:end="273:33"><name pos:start="273:9" pos:end="273:29"><name pos:start="273:9" pos:end="273:14">header</name><operator pos:start="273:15" pos:end="273:15">.</operator><name pos:start="273:16" pos:end="273:29">refcount_order</name></name> <operator pos:start="273:31" pos:end="273:31">&gt;</operator> <literal type="number" pos:start="273:33" pos:end="273:33">6</literal></expr>)</condition> <block pos:start="273:36" pos:end="283:5">{<block_content pos:start="275:9" pos:end="281:18">

        <expr_stmt pos:start="275:9" pos:end="277:37"><expr pos:start="275:9" pos:end="277:36"><call pos:start="275:9" pos:end="277:36"><name pos:start="275:9" pos:end="275:18">error_setg</name><argument_list pos:start="275:19" pos:end="277:36">(<argument pos:start="275:20" pos:end="275:23"><expr pos:start="275:20" pos:end="275:23"><name pos:start="275:20" pos:end="275:23">errp</name></expr></argument>, <argument pos:start="275:26" pos:end="277:35"><expr pos:start="275:26" pos:end="277:35"><literal type="string" pos:start="275:26" pos:end="275:74">"Reference count entry width too large; may not "</literal>

                   <literal type="string" pos:start="277:20" pos:end="277:35">"exceed 64 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:22"><expr pos:start="279:9" pos:end="279:21"><name pos:start="279:9" pos:end="279:11">ret</name> <operator pos:start="279:13" pos:end="279:13">=</operator> <operator pos:start="279:15" pos:end="279:15">-</operator><name pos:start="279:16" pos:end="279:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="281:9" pos:end="281:18">goto <name pos:start="281:14" pos:end="281:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:46"><expr pos:start="285:5" pos:end="285:45"><name pos:start="285:5" pos:end="285:21"><name pos:start="285:5" pos:end="285:5">s</name><operator pos:start="285:6" pos:end="285:7">-&gt;</operator><name pos:start="285:8" pos:end="285:21">refcount_order</name></name> <operator pos:start="285:23" pos:end="285:23">=</operator> <name pos:start="285:25" pos:end="285:45"><name pos:start="285:25" pos:end="285:30">header</name><operator pos:start="285:31" pos:end="285:31">.</operator><name pos:start="285:32" pos:end="285:45">refcount_order</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:46"><expr pos:start="287:5" pos:end="287:45"><name pos:start="287:5" pos:end="287:20"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:20">refcount_bits</name></name> <operator pos:start="287:22" pos:end="287:22">=</operator> <literal type="number" pos:start="287:24" pos:end="287:24">1</literal> <operator pos:start="287:26" pos:end="287:27">&lt;&lt;</operator> <name pos:start="287:29" pos:end="287:45"><name pos:start="287:29" pos:end="287:29">s</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:45">refcount_order</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:60"><expr pos:start="289:5" pos:end="289:59"><name pos:start="289:5" pos:end="289:19"><name pos:start="289:5" pos:end="289:5">s</name><operator pos:start="289:6" pos:end="289:7">-&gt;</operator><name pos:start="289:8" pos:end="289:19">refcount_max</name></name> <operator pos:start="289:21" pos:end="289:21">=</operator> <call pos:start="289:23" pos:end="289:33"><name pos:start="289:23" pos:end="289:30">UINT64_C</name><argument_list pos:start="289:31" pos:end="289:33">(<argument pos:start="289:32" pos:end="289:32"><expr pos:start="289:32" pos:end="289:32"><literal type="number" pos:start="289:32" pos:end="289:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="289:35" pos:end="289:36">&lt;&lt;</operator> <operator pos:start="289:38" pos:end="289:38">(</operator><name pos:start="289:39" pos:end="289:54"><name pos:start="289:39" pos:end="289:39">s</name><operator pos:start="289:40" pos:end="289:41">-&gt;</operator><name pos:start="289:42" pos:end="289:54">refcount_bits</name></name> <operator pos:start="289:56" pos:end="289:56">-</operator> <literal type="number" pos:start="289:58" pos:end="289:58">1</literal><operator pos:start="289:59" pos:end="289:59">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:43"><expr pos:start="291:5" pos:end="291:42"><name pos:start="291:5" pos:end="291:19"><name pos:start="291:5" pos:end="291:5">s</name><operator pos:start="291:6" pos:end="291:7">-&gt;</operator><name pos:start="291:8" pos:end="291:19">refcount_max</name></name> <operator pos:start="291:21" pos:end="291:22">+=</operator> <name pos:start="291:24" pos:end="291:38"><name pos:start="291:24" pos:end="291:24">s</name><operator pos:start="291:25" pos:end="291:26">-&gt;</operator><name pos:start="291:27" pos:end="291:38">refcount_max</name></name> <operator pos:start="291:40" pos:end="291:40">-</operator> <literal type="number" pos:start="291:42" pos:end="291:42">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="295:5" pos:end="305:5"><if pos:start="295:5" pos:end="305:5">if <condition pos:start="295:8" pos:end="295:45">(<expr pos:start="295:9" pos:end="295:44"><name pos:start="295:9" pos:end="295:27"><name pos:start="295:9" pos:end="295:14">header</name><operator pos:start="295:15" pos:end="295:15">.</operator><name pos:start="295:16" pos:end="295:27">crypt_method</name></name> <operator pos:start="295:29" pos:end="295:29">&gt;</operator> <name pos:start="295:31" pos:end="295:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="295:47" pos:end="305:5">{<block_content pos:start="297:9" pos:end="303:18">

        <expr_stmt pos:start="297:9" pos:end="299:40"><expr pos:start="297:9" pos:end="299:39"><call pos:start="297:9" pos:end="299:39"><name pos:start="297:9" pos:end="297:18">error_setg</name><argument_list pos:start="297:19" pos:end="299:39">(<argument pos:start="297:20" pos:end="297:23"><expr pos:start="297:20" pos:end="297:23"><name pos:start="297:20" pos:end="297:23">errp</name></expr></argument>, <argument pos:start="297:26" pos:end="297:66"><expr pos:start="297:26" pos:end="297:66"><literal type="string" pos:start="297:26" pos:end="297:59">"Unsupported encryption method: %"</literal> <name pos:start="297:61" pos:end="297:66">PRIu32</name></expr></argument>,

                   <argument pos:start="299:20" pos:end="299:38"><expr pos:start="299:20" pos:end="299:38"><name pos:start="299:20" pos:end="299:38"><name pos:start="299:20" pos:end="299:25">header</name><operator pos:start="299:26" pos:end="299:26">.</operator><name pos:start="299:27" pos:end="299:38">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:22"><expr pos:start="301:9" pos:end="301:21"><name pos:start="301:9" pos:end="301:11">ret</name> <operator pos:start="301:13" pos:end="301:13">=</operator> <operator pos:start="301:15" pos:end="301:15">-</operator><name pos:start="301:16" pos:end="301:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="303:9" pos:end="303:18">goto <name pos:start="303:14" pos:end="303:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="307:5" pos:end="317:5"><if pos:start="307:5" pos:end="317:5">if <condition pos:start="307:8" pos:end="309:58">(<expr pos:start="307:9" pos:end="309:57"><operator pos:start="307:9" pos:end="307:9">!</operator><call pos:start="307:10" pos:end="309:57"><name pos:start="307:10" pos:end="307:32">qcrypto_cipher_supports</name><argument_list pos:start="307:33" pos:end="309:57">(<argument pos:start="307:34" pos:end="307:59"><expr pos:start="307:34" pos:end="307:59"><name pos:start="307:34" pos:end="307:59">QCRYPTO_CIPHER_ALG_AES_128</name></expr></argument>,

                                 <argument pos:start="309:34" pos:end="309:56"><expr pos:start="309:34" pos:end="309:56"><name pos:start="309:34" pos:end="309:56">QCRYPTO_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="309:60" pos:end="317:5">{<block_content pos:start="311:9" pos:end="315:18">

        <expr_stmt pos:start="311:9" pos:end="311:53"><expr pos:start="311:9" pos:end="311:52"><call pos:start="311:9" pos:end="311:52"><name pos:start="311:9" pos:end="311:18">error_setg</name><argument_list pos:start="311:19" pos:end="311:52">(<argument pos:start="311:20" pos:end="311:23"><expr pos:start="311:20" pos:end="311:23"><name pos:start="311:20" pos:end="311:23">errp</name></expr></argument>, <argument pos:start="311:26" pos:end="311:51"><expr pos:start="311:26" pos:end="311:51"><literal type="string" pos:start="311:26" pos:end="311:51">"AES cipher not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:22"><expr pos:start="313:9" pos:end="313:21"><name pos:start="313:9" pos:end="313:11">ret</name> <operator pos:start="313:13" pos:end="313:13">=</operator> <operator pos:start="313:15" pos:end="313:15">-</operator><name pos:start="313:16" pos:end="313:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="315:9" pos:end="315:18">goto <name pos:start="315:14" pos:end="315:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:49"><expr pos:start="319:5" pos:end="319:48"><name pos:start="319:5" pos:end="319:26"><name pos:start="319:5" pos:end="319:5">s</name><operator pos:start="319:6" pos:end="319:7">-&gt;</operator><name pos:start="319:8" pos:end="319:26">crypt_method_header</name></name> <operator pos:start="319:28" pos:end="319:28">=</operator> <name pos:start="319:30" pos:end="319:48"><name pos:start="319:30" pos:end="319:35">header</name><operator pos:start="319:36" pos:end="319:36">.</operator><name pos:start="319:37" pos:end="319:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="321:5" pos:end="353:5"><if pos:start="321:5" pos:end="353:5">if <condition pos:start="321:8" pos:end="321:31">(<expr pos:start="321:9" pos:end="321:30"><name pos:start="321:9" pos:end="321:30"><name pos:start="321:9" pos:end="321:9">s</name><operator pos:start="321:10" pos:end="321:11">-&gt;</operator><name pos:start="321:12" pos:end="321:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="321:33" pos:end="353:5">{<block_content pos:start="323:9" pos:end="351:29">

        <if_stmt pos:start="323:9" pos:end="347:9"><if pos:start="323:9" pos:end="347:9">if <condition pos:start="323:12" pos:end="325:53">(<expr pos:start="323:13" pos:end="325:52"><call pos:start="323:13" pos:end="323:33"><name pos:start="323:13" pos:end="323:31">bdrv_uses_whitelist</name><argument_list pos:start="323:32" pos:end="323:33">()</argument_list></call> <operator pos:start="323:35" pos:end="323:36">&amp;&amp;</operator>

            <name pos:start="325:13" pos:end="325:34"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:34">crypt_method_header</name></name> <operator pos:start="325:36" pos:end="325:37">==</operator> <name pos:start="325:39" pos:end="325:52">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="325:55" pos:end="347:9">{<block_content pos:start="327:13" pos:end="345:22">

            <expr_stmt pos:start="327:13" pos:end="331:56"><expr pos:start="327:13" pos:end="331:55"><call pos:start="327:13" pos:end="331:55"><name pos:start="327:13" pos:end="327:22">error_setg</name><argument_list pos:start="327:23" pos:end="331:55">(<argument pos:start="327:24" pos:end="327:27"><expr pos:start="327:24" pos:end="327:27"><name pos:start="327:24" pos:end="327:27">errp</name></expr></argument>,

                       <argument pos:start="329:24" pos:end="331:54"><expr pos:start="329:24" pos:end="331:54"><literal type="string" pos:start="329:24" pos:end="329:76">"Use of AES-CBC encrypted qcow2 images is no longer "</literal>

                       <literal type="string" pos:start="331:24" pos:end="331:54">"supported in system emulators"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="341:51"><expr pos:start="333:13" pos:end="341:50"><call pos:start="333:13" pos:end="341:50"><name pos:start="333:13" pos:end="333:29">error_append_hint</name><argument_list pos:start="333:30" pos:end="341:50">(<argument pos:start="333:31" pos:end="333:34"><expr pos:start="333:31" pos:end="333:34"><name pos:start="333:31" pos:end="333:34">errp</name></expr></argument>,

                              <argument pos:start="335:31" pos:end="341:49"><expr pos:start="335:31" pos:end="341:49"><literal type="string" pos:start="335:31" pos:end="335:79">"You can use 'qemu-img convert' to convert your "</literal>

                              <literal type="string" pos:start="337:31" pos:end="337:79">"image to an alternative supported format, such "</literal>

                              <literal type="string" pos:start="339:31" pos:end="339:75">"as unencrypted qcow2, or raw with the LUKS "</literal>

                              <literal type="string" pos:start="341:31" pos:end="341:49">"format instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:26"><expr pos:start="343:13" pos:end="343:25"><name pos:start="343:13" pos:end="343:15">ret</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <operator pos:start="343:19" pos:end="343:19">-</operator><name pos:start="343:20" pos:end="343:25">ENOSYS</name></expr>;</expr_stmt>

            <goto pos:start="345:13" pos:end="345:22">goto <name pos:start="345:18" pos:end="345:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="351:9" pos:end="351:29"><expr pos:start="351:9" pos:end="351:28"><name pos:start="351:9" pos:end="351:21"><name pos:start="351:9" pos:end="351:10">bs</name><operator pos:start="351:11" pos:end="351:12">-&gt;</operator><name pos:start="351:13" pos:end="351:21">encrypted</name></name> <operator pos:start="351:23" pos:end="351:23">=</operator> <name pos:start="351:25" pos:end="351:28">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="357:5" pos:end="357:37"><expr pos:start="357:5" pos:end="357:36"><name pos:start="357:5" pos:end="357:14"><name pos:start="357:5" pos:end="357:5">s</name><operator pos:start="357:6" pos:end="357:7">-&gt;</operator><name pos:start="357:8" pos:end="357:14">l2_bits</name></name> <operator pos:start="357:16" pos:end="357:16">=</operator> <name pos:start="357:18" pos:end="357:32"><name pos:start="357:18" pos:end="357:18">s</name><operator pos:start="357:19" pos:end="357:20">-&gt;</operator><name pos:start="357:21" pos:end="357:32">cluster_bits</name></name> <operator pos:start="357:34" pos:end="357:34">-</operator> <literal type="number" pos:start="357:36" pos:end="357:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="357:39" pos:end="357:68">/* L2 is always one cluster */</comment>

    <expr_stmt pos:start="359:5" pos:end="359:33"><expr pos:start="359:5" pos:end="359:32"><name pos:start="359:5" pos:end="359:14"><name pos:start="359:5" pos:end="359:5">s</name><operator pos:start="359:6" pos:end="359:7">-&gt;</operator><name pos:start="359:8" pos:end="359:14">l2_size</name></name> <operator pos:start="359:16" pos:end="359:16">=</operator> <literal type="number" pos:start="359:18" pos:end="359:18">1</literal> <operator pos:start="359:20" pos:end="359:21">&lt;&lt;</operator> <name pos:start="359:23" pos:end="359:32"><name pos:start="359:23" pos:end="359:23">s</name><operator pos:start="359:24" pos:end="359:25">-&gt;</operator><name pos:start="359:26" pos:end="359:32">l2_bits</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="361:5" pos:end="361:66">/* 2^(s-&gt;refcount_order - 3) is the refcount width in bytes */</comment>

    <expr_stmt pos:start="363:5" pos:end="363:71"><expr pos:start="363:5" pos:end="363:70"><name pos:start="363:5" pos:end="363:26"><name pos:start="363:5" pos:end="363:5">s</name><operator pos:start="363:6" pos:end="363:7">-&gt;</operator><name pos:start="363:8" pos:end="363:26">refcount_block_bits</name></name> <operator pos:start="363:28" pos:end="363:28">=</operator> <name pos:start="363:30" pos:end="363:44"><name pos:start="363:30" pos:end="363:30">s</name><operator pos:start="363:31" pos:end="363:32">-&gt;</operator><name pos:start="363:33" pos:end="363:44">cluster_bits</name></name> <operator pos:start="363:46" pos:end="363:46">-</operator> <operator pos:start="363:48" pos:end="363:48">(</operator><name pos:start="363:49" pos:end="363:65"><name pos:start="363:49" pos:end="363:49">s</name><operator pos:start="363:50" pos:end="363:51">-&gt;</operator><name pos:start="363:52" pos:end="363:65">refcount_order</name></name> <operator pos:start="363:67" pos:end="363:67">-</operator> <literal type="number" pos:start="363:69" pos:end="363:69">3</literal><operator pos:start="363:70" pos:end="363:70">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:57"><expr pos:start="365:5" pos:end="365:56"><name pos:start="365:5" pos:end="365:26"><name pos:start="365:5" pos:end="365:5">s</name><operator pos:start="365:6" pos:end="365:7">-&gt;</operator><name pos:start="365:8" pos:end="365:26">refcount_block_size</name></name> <operator pos:start="365:28" pos:end="365:28">=</operator> <literal type="number" pos:start="365:30" pos:end="365:30">1</literal> <operator pos:start="365:32" pos:end="365:33">&lt;&lt;</operator> <name pos:start="365:35" pos:end="365:56"><name pos:start="365:35" pos:end="365:35">s</name><operator pos:start="365:36" pos:end="365:37">-&gt;</operator><name pos:start="365:38" pos:end="365:56">refcount_block_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:42"><expr pos:start="367:5" pos:end="367:41"><name pos:start="367:5" pos:end="367:21"><name pos:start="367:5" pos:end="367:6">bs</name><operator pos:start="367:7" pos:end="367:8">-&gt;</operator><name pos:start="367:9" pos:end="367:21">total_sectors</name></name> <operator pos:start="367:23" pos:end="367:23">=</operator> <name pos:start="367:25" pos:end="367:35"><name pos:start="367:25" pos:end="367:30">header</name><operator pos:start="367:31" pos:end="367:31">.</operator><name pos:start="367:32" pos:end="367:35">size</name></name> <operator pos:start="367:37" pos:end="367:37">/</operator> <literal type="number" pos:start="367:39" pos:end="367:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:50"><expr pos:start="369:5" pos:end="369:49"><name pos:start="369:5" pos:end="369:18"><name pos:start="369:5" pos:end="369:5">s</name><operator pos:start="369:6" pos:end="369:7">-&gt;</operator><name pos:start="369:8" pos:end="369:18">csize_shift</name></name> <operator pos:start="369:20" pos:end="369:20">=</operator> <operator pos:start="369:22" pos:end="369:22">(</operator><literal type="number" pos:start="369:23" pos:end="369:26">62</literal> <operator pos:start="369:26" pos:end="369:26">-</operator> <operator pos:start="369:28" pos:end="369:28">(</operator><name pos:start="369:29" pos:end="369:43"><name pos:start="369:29" pos:end="369:29">s</name><operator pos:start="369:30" pos:end="369:31">-&gt;</operator><name pos:start="369:32" pos:end="369:43">cluster_bits</name></name> <operator pos:start="369:45" pos:end="369:45">-</operator> <literal type="number" pos:start="369:47" pos:end="369:47">8</literal><operator pos:start="369:48" pos:end="369:48">)</operator><operator pos:start="369:49" pos:end="369:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:53"><expr pos:start="371:5" pos:end="371:52"><name pos:start="371:5" pos:end="371:17"><name pos:start="371:5" pos:end="371:5">s</name><operator pos:start="371:6" pos:end="371:7">-&gt;</operator><name pos:start="371:8" pos:end="371:17">csize_mask</name></name> <operator pos:start="371:19" pos:end="371:19">=</operator> <operator pos:start="371:21" pos:end="371:21">(</operator><literal type="number" pos:start="371:22" pos:end="371:22">1</literal> <operator pos:start="371:24" pos:end="371:25">&lt;&lt;</operator> <operator pos:start="371:27" pos:end="371:27">(</operator><name pos:start="371:28" pos:end="371:42"><name pos:start="371:28" pos:end="371:28">s</name><operator pos:start="371:29" pos:end="371:30">-&gt;</operator><name pos:start="371:31" pos:end="371:42">cluster_bits</name></name> <operator pos:start="371:44" pos:end="371:44">-</operator> <literal type="number" pos:start="371:46" pos:end="371:46">8</literal><operator pos:start="371:47" pos:end="371:47">)</operator><operator pos:start="371:48" pos:end="371:48">)</operator> <operator pos:start="371:50" pos:end="371:50">-</operator> <literal type="number" pos:start="371:52" pos:end="371:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:57"><expr pos:start="373:5" pos:end="373:56"><name pos:start="373:5" pos:end="373:26"><name pos:start="373:5" pos:end="373:5">s</name><operator pos:start="373:6" pos:end="373:7">-&gt;</operator><name pos:start="373:8" pos:end="373:26">cluster_offset_mask</name></name> <operator pos:start="373:28" pos:end="373:28">=</operator> <operator pos:start="373:30" pos:end="373:30">(</operator><literal type="number" pos:start="373:31" pos:end="373:33">1LL</literal> <operator pos:start="373:35" pos:end="373:36">&lt;&lt;</operator> <name pos:start="373:38" pos:end="373:51"><name pos:start="373:38" pos:end="373:38">s</name><operator pos:start="373:39" pos:end="373:40">-&gt;</operator><name pos:start="373:41" pos:end="373:51">csize_shift</name></name><operator pos:start="373:52" pos:end="373:52">)</operator> <operator pos:start="373:54" pos:end="373:54">-</operator> <literal type="number" pos:start="373:56" pos:end="373:56">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="377:5" pos:end="377:60"><expr pos:start="377:5" pos:end="377:59"><name pos:start="377:5" pos:end="377:28"><name pos:start="377:5" pos:end="377:5">s</name><operator pos:start="377:6" pos:end="377:7">-&gt;</operator><name pos:start="377:8" pos:end="377:28">refcount_table_offset</name></name> <operator pos:start="377:30" pos:end="377:30">=</operator> <name pos:start="377:32" pos:end="377:59"><name pos:start="377:32" pos:end="377:37">header</name><operator pos:start="377:38" pos:end="377:38">.</operator><name pos:start="377:39" pos:end="377:59">refcount_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="381:64"><expr pos:start="379:5" pos:end="381:63"><name pos:start="379:5" pos:end="379:26"><name pos:start="379:5" pos:end="379:5">s</name><operator pos:start="379:6" pos:end="379:7">-&gt;</operator><name pos:start="379:8" pos:end="379:26">refcount_table_size</name></name> <operator pos:start="379:28" pos:end="379:28">=</operator>

        <name pos:start="381:9" pos:end="381:38"><name pos:start="381:9" pos:end="381:14">header</name><operator pos:start="381:15" pos:end="381:15">.</operator><name pos:start="381:16" pos:end="381:38">refcount_table_clusters</name></name> <operator pos:start="381:40" pos:end="381:41">&lt;&lt;</operator> <operator pos:start="381:43" pos:end="381:43">(</operator><name pos:start="381:44" pos:end="381:58"><name pos:start="381:44" pos:end="381:44">s</name><operator pos:start="381:45" pos:end="381:46">-&gt;</operator><name pos:start="381:47" pos:end="381:58">cluster_bits</name></name> <operator pos:start="381:60" pos:end="381:60">-</operator> <literal type="number" pos:start="381:62" pos:end="381:62">3</literal><operator pos:start="381:63" pos:end="381:63">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="385:5" pos:end="393:5"><if pos:start="385:5" pos:end="393:5">if <condition pos:start="385:8" pos:end="385:72">(<expr pos:start="385:9" pos:end="385:71"><name pos:start="385:9" pos:end="385:38"><name pos:start="385:9" pos:end="385:14">header</name><operator pos:start="385:15" pos:end="385:15">.</operator><name pos:start="385:16" pos:end="385:38">refcount_table_clusters</name></name> <operator pos:start="385:40" pos:end="385:40">&gt;</operator> <call pos:start="385:42" pos:end="385:71"><name pos:start="385:42" pos:end="385:68">qcow2_max_refcount_clusters</name><argument_list pos:start="385:69" pos:end="385:71">(<argument pos:start="385:70" pos:end="385:70"><expr pos:start="385:70" pos:end="385:70"><name pos:start="385:70" pos:end="385:70">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="385:74" pos:end="393:5">{<block_content pos:start="387:9" pos:end="391:18">

        <expr_stmt pos:start="387:9" pos:end="387:60"><expr pos:start="387:9" pos:end="387:59"><call pos:start="387:9" pos:end="387:59"><name pos:start="387:9" pos:end="387:18">error_setg</name><argument_list pos:start="387:19" pos:end="387:59">(<argument pos:start="387:20" pos:end="387:23"><expr pos:start="387:20" pos:end="387:23"><name pos:start="387:20" pos:end="387:23">errp</name></expr></argument>, <argument pos:start="387:26" pos:end="387:58"><expr pos:start="387:26" pos:end="387:58"><literal type="string" pos:start="387:26" pos:end="387:58">"Reference count table too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:22"><expr pos:start="389:9" pos:end="389:21"><name pos:start="389:9" pos:end="389:11">ret</name> <operator pos:start="389:13" pos:end="389:13">=</operator> <operator pos:start="389:15" pos:end="389:15">-</operator><name pos:start="389:16" pos:end="389:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="391:9" pos:end="391:18">goto <name pos:start="391:14" pos:end="391:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="397:5" pos:end="399:74"><expr pos:start="397:5" pos:end="399:73"><name pos:start="397:5" pos:end="397:7">ret</name> <operator pos:start="397:9" pos:end="397:9">=</operator> <call pos:start="397:11" pos:end="399:73"><name pos:start="397:11" pos:end="397:31">validate_table_offset</name><argument_list pos:start="397:32" pos:end="399:73">(<argument pos:start="397:33" pos:end="397:34"><expr pos:start="397:33" pos:end="397:34"><name pos:start="397:33" pos:end="397:34">bs</name></expr></argument>, <argument pos:start="397:37" pos:end="397:60"><expr pos:start="397:37" pos:end="397:60"><name pos:start="397:37" pos:end="397:60"><name pos:start="397:37" pos:end="397:37">s</name><operator pos:start="397:38" pos:end="397:39">-&gt;</operator><name pos:start="397:40" pos:end="397:60">refcount_table_offset</name></name></expr></argument>,

                                <argument pos:start="399:33" pos:end="399:54"><expr pos:start="399:33" pos:end="399:54"><name pos:start="399:33" pos:end="399:54"><name pos:start="399:33" pos:end="399:33">s</name><operator pos:start="399:34" pos:end="399:35">-&gt;</operator><name pos:start="399:36" pos:end="399:54">refcount_table_size</name></name></expr></argument>, <argument pos:start="399:57" pos:end="399:72"><expr pos:start="399:57" pos:end="399:72"><sizeof pos:start="399:57" pos:end="399:72">sizeof<argument_list pos:start="399:63" pos:end="399:72">(<argument pos:start="399:64" pos:end="399:71"><expr pos:start="399:64" pos:end="399:71"><name pos:start="399:64" pos:end="399:71">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="401:5" pos:end="407:5"><if pos:start="401:5" pos:end="407:5">if <condition pos:start="401:8" pos:end="401:16">(<expr pos:start="401:9" pos:end="401:15"><name pos:start="401:9" pos:end="401:11">ret</name> <operator pos:start="401:13" pos:end="401:13">&lt;</operator> <literal type="number" pos:start="401:15" pos:end="401:15">0</literal></expr>)</condition> <block pos:start="401:18" pos:end="407:5">{<block_content pos:start="403:9" pos:end="405:18">

        <expr_stmt pos:start="403:9" pos:end="403:65"><expr pos:start="403:9" pos:end="403:64"><call pos:start="403:9" pos:end="403:64"><name pos:start="403:9" pos:end="403:18">error_setg</name><argument_list pos:start="403:19" pos:end="403:64">(<argument pos:start="403:20" pos:end="403:23"><expr pos:start="403:20" pos:end="403:23"><name pos:start="403:20" pos:end="403:23">errp</name></expr></argument>, <argument pos:start="403:26" pos:end="403:63"><expr pos:start="403:26" pos:end="403:63"><literal type="string" pos:start="403:26" pos:end="403:63">"Invalid reference count table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="405:9" pos:end="405:18">goto <name pos:start="405:14" pos:end="405:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="411:5" pos:end="411:38">/* Snapshot table offset/length */</comment>

    <if_stmt pos:start="413:5" pos:end="421:5"><if pos:start="413:5" pos:end="421:5">if <condition pos:start="413:8" pos:end="413:49">(<expr pos:start="413:9" pos:end="413:48"><name pos:start="413:9" pos:end="413:27"><name pos:start="413:9" pos:end="413:14">header</name><operator pos:start="413:15" pos:end="413:15">.</operator><name pos:start="413:16" pos:end="413:27">nb_snapshots</name></name> <operator pos:start="413:29" pos:end="413:29">&gt;</operator> <name pos:start="413:31" pos:end="413:48">QCOW_MAX_SNAPSHOTS</name></expr>)</condition> <block pos:start="413:51" pos:end="421:5">{<block_content pos:start="415:9" pos:end="419:18">

        <expr_stmt pos:start="415:9" pos:end="415:47"><expr pos:start="415:9" pos:end="415:46"><call pos:start="415:9" pos:end="415:46"><name pos:start="415:9" pos:end="415:18">error_setg</name><argument_list pos:start="415:19" pos:end="415:46">(<argument pos:start="415:20" pos:end="415:23"><expr pos:start="415:20" pos:end="415:23"><name pos:start="415:20" pos:end="415:23">errp</name></expr></argument>, <argument pos:start="415:26" pos:end="415:45"><expr pos:start="415:26" pos:end="415:45"><literal type="string" pos:start="415:26" pos:end="415:45">"Too many snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:22"><expr pos:start="417:9" pos:end="417:21"><name pos:start="417:9" pos:end="417:11">ret</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <operator pos:start="417:15" pos:end="417:15">-</operator><name pos:start="417:16" pos:end="417:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="419:9" pos:end="419:18">goto <name pos:start="419:14" pos:end="419:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="425:5" pos:end="429:60"><expr pos:start="425:5" pos:end="429:59"><name pos:start="425:5" pos:end="425:7">ret</name> <operator pos:start="425:9" pos:end="425:9">=</operator> <call pos:start="425:11" pos:end="429:59"><name pos:start="425:11" pos:end="425:31">validate_table_offset</name><argument_list pos:start="425:32" pos:end="429:59">(<argument pos:start="425:33" pos:end="425:34"><expr pos:start="425:33" pos:end="425:34"><name pos:start="425:33" pos:end="425:34">bs</name></expr></argument>, <argument pos:start="425:37" pos:end="425:59"><expr pos:start="425:37" pos:end="425:59"><name pos:start="425:37" pos:end="425:59"><name pos:start="425:37" pos:end="425:42">header</name><operator pos:start="425:43" pos:end="425:43">.</operator><name pos:start="425:44" pos:end="425:59">snapshots_offset</name></name></expr></argument>,

                                <argument pos:start="427:33" pos:end="427:51"><expr pos:start="427:33" pos:end="427:51"><name pos:start="427:33" pos:end="427:51"><name pos:start="427:33" pos:end="427:38">header</name><operator pos:start="427:39" pos:end="427:39">.</operator><name pos:start="427:40" pos:end="427:51">nb_snapshots</name></name></expr></argument>,

                                <argument pos:start="429:33" pos:end="429:58"><expr pos:start="429:33" pos:end="429:58"><sizeof pos:start="429:33" pos:end="429:58">sizeof<argument_list pos:start="429:39" pos:end="429:58">(<argument pos:start="429:40" pos:end="429:57"><expr pos:start="429:40" pos:end="429:57"><name pos:start="429:40" pos:end="429:57">QCowSnapshotHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="431:5" pos:end="437:5"><if pos:start="431:5" pos:end="437:5">if <condition pos:start="431:8" pos:end="431:16">(<expr pos:start="431:9" pos:end="431:15"><name pos:start="431:9" pos:end="431:11">ret</name> <operator pos:start="431:13" pos:end="431:13">&lt;</operator> <literal type="number" pos:start="431:15" pos:end="431:15">0</literal></expr>)</condition> <block pos:start="431:18" pos:end="437:5">{<block_content pos:start="433:9" pos:end="435:18">

        <expr_stmt pos:start="433:9" pos:end="433:58"><expr pos:start="433:9" pos:end="433:57"><call pos:start="433:9" pos:end="433:57"><name pos:start="433:9" pos:end="433:18">error_setg</name><argument_list pos:start="433:19" pos:end="433:57">(<argument pos:start="433:20" pos:end="433:23"><expr pos:start="433:20" pos:end="433:23"><name pos:start="433:20" pos:end="433:23">errp</name></expr></argument>, <argument pos:start="433:26" pos:end="433:56"><expr pos:start="433:26" pos:end="433:56"><literal type="string" pos:start="433:26" pos:end="433:56">"Invalid snapshot table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="435:9" pos:end="435:18">goto <name pos:start="435:14" pos:end="435:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="441:5" pos:end="441:32">/* read the level 1 table */</comment>

    <if_stmt pos:start="443:5" pos:end="451:5"><if pos:start="443:5" pos:end="451:5">if <condition pos:start="443:8" pos:end="443:61">(<expr pos:start="443:9" pos:end="443:60"><name pos:start="443:9" pos:end="443:22"><name pos:start="443:9" pos:end="443:14">header</name><operator pos:start="443:15" pos:end="443:15">.</operator><name pos:start="443:16" pos:end="443:22">l1_size</name></name> <operator pos:start="443:24" pos:end="443:24">&gt;</operator> <name pos:start="443:26" pos:end="443:41">QCOW_MAX_L1_SIZE</name> <operator pos:start="443:43" pos:end="443:43">/</operator> <sizeof pos:start="443:45" pos:end="443:60">sizeof<argument_list pos:start="443:51" pos:end="443:60">(<argument pos:start="443:52" pos:end="443:59"><expr pos:start="443:52" pos:end="443:59"><name pos:start="443:52" pos:end="443:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="443:63" pos:end="451:5">{<block_content pos:start="445:9" pos:end="449:18">

        <expr_stmt pos:start="445:9" pos:end="445:54"><expr pos:start="445:9" pos:end="445:53"><call pos:start="445:9" pos:end="445:53"><name pos:start="445:9" pos:end="445:18">error_setg</name><argument_list pos:start="445:19" pos:end="445:53">(<argument pos:start="445:20" pos:end="445:23"><expr pos:start="445:20" pos:end="445:23"><name pos:start="445:20" pos:end="445:23">errp</name></expr></argument>, <argument pos:start="445:26" pos:end="445:52"><expr pos:start="445:26" pos:end="445:52"><literal type="string" pos:start="445:26" pos:end="445:52">"Active L1 table too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="447:9" pos:end="447:21"><expr pos:start="447:9" pos:end="447:20"><name pos:start="447:9" pos:end="447:11">ret</name> <operator pos:start="447:13" pos:end="447:13">=</operator> <operator pos:start="447:15" pos:end="447:15">-</operator><name pos:start="447:16" pos:end="447:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="449:9" pos:end="449:18">goto <name pos:start="449:14" pos:end="449:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="453:5" pos:end="453:32"><expr pos:start="453:5" pos:end="453:31"><name pos:start="453:5" pos:end="453:14"><name pos:start="453:5" pos:end="453:5">s</name><operator pos:start="453:6" pos:end="453:7">-&gt;</operator><name pos:start="453:8" pos:end="453:14">l1_size</name></name> <operator pos:start="453:16" pos:end="453:16">=</operator> <name pos:start="453:18" pos:end="453:31"><name pos:start="453:18" pos:end="453:23">header</name><operator pos:start="453:24" pos:end="453:24">.</operator><name pos:start="453:25" pos:end="453:31">l1_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="457:5" pos:end="457:51"><expr pos:start="457:5" pos:end="457:50"><name pos:start="457:5" pos:end="457:21">l1_vm_state_index</name> <operator pos:start="457:23" pos:end="457:23">=</operator> <call pos:start="457:25" pos:end="457:50"><name pos:start="457:25" pos:end="457:34">size_to_l1</name><argument_list pos:start="457:35" pos:end="457:50">(<argument pos:start="457:36" pos:end="457:36"><expr pos:start="457:36" pos:end="457:36"><name pos:start="457:36" pos:end="457:36">s</name></expr></argument>, <argument pos:start="457:39" pos:end="457:49"><expr pos:start="457:39" pos:end="457:49"><name pos:start="457:39" pos:end="457:49"><name pos:start="457:39" pos:end="457:44">header</name><operator pos:start="457:45" pos:end="457:45">.</operator><name pos:start="457:46" pos:end="457:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="459:5" pos:end="467:5"><if pos:start="459:5" pos:end="467:5">if <condition pos:start="459:8" pos:end="459:36">(<expr pos:start="459:9" pos:end="459:35"><name pos:start="459:9" pos:end="459:25">l1_vm_state_index</name> <operator pos:start="459:27" pos:end="459:27">&gt;</operator> <name pos:start="459:29" pos:end="459:35">INT_MAX</name></expr>)</condition> <block pos:start="459:38" pos:end="467:5">{<block_content pos:start="461:9" pos:end="465:18">

        <expr_stmt pos:start="461:9" pos:end="461:45"><expr pos:start="461:9" pos:end="461:44"><call pos:start="461:9" pos:end="461:44"><name pos:start="461:9" pos:end="461:18">error_setg</name><argument_list pos:start="461:19" pos:end="461:44">(<argument pos:start="461:20" pos:end="461:23"><expr pos:start="461:20" pos:end="461:23"><name pos:start="461:20" pos:end="461:23">errp</name></expr></argument>, <argument pos:start="461:26" pos:end="461:43"><expr pos:start="461:26" pos:end="461:43"><literal type="string" pos:start="461:26" pos:end="461:43">"Image is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:21"><expr pos:start="463:9" pos:end="463:20"><name pos:start="463:9" pos:end="463:11">ret</name> <operator pos:start="463:13" pos:end="463:13">=</operator> <operator pos:start="463:15" pos:end="463:15">-</operator><name pos:start="463:16" pos:end="463:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="465:9" pos:end="465:18">goto <name pos:start="465:14" pos:end="465:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="469:5" pos:end="469:45"><expr pos:start="469:5" pos:end="469:44"><name pos:start="469:5" pos:end="469:24"><name pos:start="469:5" pos:end="469:5">s</name><operator pos:start="469:6" pos:end="469:7">-&gt;</operator><name pos:start="469:8" pos:end="469:24">l1_vm_state_index</name></name> <operator pos:start="469:26" pos:end="469:26">=</operator> <name pos:start="469:28" pos:end="469:44">l1_vm_state_index</name></expr>;</expr_stmt>



    <comment type="block" pos:start="473:5" pos:end="475:27">/* the L1 table must contain at least enough entries to put

       header.size bytes */</comment>

    <if_stmt pos:start="477:5" pos:end="485:5"><if pos:start="477:5" pos:end="485:5">if <condition pos:start="477:8" pos:end="477:42">(<expr pos:start="477:9" pos:end="477:41"><name pos:start="477:9" pos:end="477:18"><name pos:start="477:9" pos:end="477:9">s</name><operator pos:start="477:10" pos:end="477:11">-&gt;</operator><name pos:start="477:12" pos:end="477:18">l1_size</name></name> <operator pos:start="477:20" pos:end="477:20">&lt;</operator> <name pos:start="477:22" pos:end="477:41"><name pos:start="477:22" pos:end="477:22">s</name><operator pos:start="477:23" pos:end="477:24">-&gt;</operator><name pos:start="477:25" pos:end="477:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="477:44" pos:end="485:5">{<block_content pos:start="479:9" pos:end="483:18">

        <expr_stmt pos:start="479:9" pos:end="479:50"><expr pos:start="479:9" pos:end="479:49"><call pos:start="479:9" pos:end="479:49"><name pos:start="479:9" pos:end="479:18">error_setg</name><argument_list pos:start="479:19" pos:end="479:49">(<argument pos:start="479:20" pos:end="479:23"><expr pos:start="479:20" pos:end="479:23"><name pos:start="479:20" pos:end="479:23">errp</name></expr></argument>, <argument pos:start="479:26" pos:end="479:48"><expr pos:start="479:26" pos:end="479:48"><literal type="string" pos:start="479:26" pos:end="479:48">"L1 table is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:22"><expr pos:start="481:9" pos:end="481:21"><name pos:start="481:9" pos:end="481:11">ret</name> <operator pos:start="481:13" pos:end="481:13">=</operator> <operator pos:start="481:15" pos:end="481:15">-</operator><name pos:start="481:16" pos:end="481:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="483:9" pos:end="483:18">goto <name pos:start="483:14" pos:end="483:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="489:5" pos:end="491:66"><expr pos:start="489:5" pos:end="491:65"><name pos:start="489:5" pos:end="489:7">ret</name> <operator pos:start="489:9" pos:end="489:9">=</operator> <call pos:start="489:11" pos:end="491:65"><name pos:start="489:11" pos:end="489:31">validate_table_offset</name><argument_list pos:start="489:32" pos:end="491:65">(<argument pos:start="489:33" pos:end="489:34"><expr pos:start="489:33" pos:end="489:34"><name pos:start="489:33" pos:end="489:34">bs</name></expr></argument>, <argument pos:start="489:37" pos:end="489:58"><expr pos:start="489:37" pos:end="489:58"><name pos:start="489:37" pos:end="489:58"><name pos:start="489:37" pos:end="489:42">header</name><operator pos:start="489:43" pos:end="489:43">.</operator><name pos:start="489:44" pos:end="489:58">l1_table_offset</name></name></expr></argument>,

                                <argument pos:start="491:33" pos:end="491:46"><expr pos:start="491:33" pos:end="491:46"><name pos:start="491:33" pos:end="491:46"><name pos:start="491:33" pos:end="491:38">header</name><operator pos:start="491:39" pos:end="491:39">.</operator><name pos:start="491:40" pos:end="491:46">l1_size</name></name></expr></argument>, <argument pos:start="491:49" pos:end="491:64"><expr pos:start="491:49" pos:end="491:64"><sizeof pos:start="491:49" pos:end="491:64">sizeof<argument_list pos:start="491:55" pos:end="491:64">(<argument pos:start="491:56" pos:end="491:63"><expr pos:start="491:56" pos:end="491:63"><name pos:start="491:56" pos:end="491:63">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="493:5" pos:end="499:5"><if pos:start="493:5" pos:end="499:5">if <condition pos:start="493:8" pos:end="493:16">(<expr pos:start="493:9" pos:end="493:15"><name pos:start="493:9" pos:end="493:11">ret</name> <operator pos:start="493:13" pos:end="493:13">&lt;</operator> <literal type="number" pos:start="493:15" pos:end="493:15">0</literal></expr>)</condition> <block pos:start="493:18" pos:end="499:5">{<block_content pos:start="495:9" pos:end="497:18">

        <expr_stmt pos:start="495:9" pos:end="495:52"><expr pos:start="495:9" pos:end="495:51"><call pos:start="495:9" pos:end="495:51"><name pos:start="495:9" pos:end="495:18">error_setg</name><argument_list pos:start="495:19" pos:end="495:51">(<argument pos:start="495:20" pos:end="495:23"><expr pos:start="495:20" pos:end="495:23"><name pos:start="495:20" pos:end="495:23">errp</name></expr></argument>, <argument pos:start="495:26" pos:end="495:50"><expr pos:start="495:26" pos:end="495:50"><literal type="string" pos:start="495:26" pos:end="495:50">"Invalid L1 table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="497:9" pos:end="497:18">goto <name pos:start="497:14" pos:end="497:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:48"><expr pos:start="501:5" pos:end="501:47"><name pos:start="501:5" pos:end="501:22"><name pos:start="501:5" pos:end="501:5">s</name><operator pos:start="501:6" pos:end="501:7">-&gt;</operator><name pos:start="501:8" pos:end="501:22">l1_table_offset</name></name> <operator pos:start="501:24" pos:end="501:24">=</operator> <name pos:start="501:26" pos:end="501:47"><name pos:start="501:26" pos:end="501:31">header</name><operator pos:start="501:32" pos:end="501:32">.</operator><name pos:start="501:33" pos:end="501:47">l1_table_offset</name></name></expr>;</expr_stmt>





    <if_stmt pos:start="507:5" pos:end="541:5"><if pos:start="507:5" pos:end="541:5">if <condition pos:start="507:8" pos:end="507:23">(<expr pos:start="507:9" pos:end="507:22"><name pos:start="507:9" pos:end="507:18"><name pos:start="507:9" pos:end="507:9">s</name><operator pos:start="507:10" pos:end="507:11">-&gt;</operator><name pos:start="507:12" pos:end="507:18">l1_size</name></name> <operator pos:start="507:20" pos:end="507:20">&gt;</operator> <literal type="number" pos:start="507:22" pos:end="507:22">0</literal></expr>)</condition> <block pos:start="507:25" pos:end="541:5">{<block_content pos:start="509:9" pos:end="539:9">

        <expr_stmt pos:start="509:9" pos:end="511:62"><expr pos:start="509:9" pos:end="511:61"><name pos:start="509:9" pos:end="509:19"><name pos:start="509:9" pos:end="509:9">s</name><operator pos:start="509:10" pos:end="509:11">-&gt;</operator><name pos:start="509:12" pos:end="509:19">l1_table</name></name> <operator pos:start="509:21" pos:end="509:21">=</operator> <call pos:start="509:23" pos:end="511:61"><name pos:start="509:23" pos:end="509:41">qemu_try_blockalign</name><argument_list pos:start="509:42" pos:end="511:61">(<argument pos:start="509:43" pos:end="509:54"><expr pos:start="509:43" pos:end="509:54"><name pos:start="509:43" pos:end="509:54"><name pos:start="509:43" pos:end="509:44">bs</name><operator pos:start="509:45" pos:end="509:46">-&gt;</operator><name pos:start="509:47" pos:end="509:50">file</name><operator pos:start="509:51" pos:end="509:52">-&gt;</operator><name pos:start="509:53" pos:end="509:54">bs</name></name></expr></argument>,

            <argument pos:start="511:13" pos:end="511:60"><expr pos:start="511:13" pos:end="511:60"><call pos:start="511:13" pos:end="511:60"><name pos:start="511:13" pos:end="511:24">align_offset</name><argument_list pos:start="511:25" pos:end="511:60">(<argument pos:start="511:26" pos:end="511:54"><expr pos:start="511:26" pos:end="511:54"><name pos:start="511:26" pos:end="511:35"><name pos:start="511:26" pos:end="511:26">s</name><operator pos:start="511:27" pos:end="511:28">-&gt;</operator><name pos:start="511:29" pos:end="511:35">l1_size</name></name> <operator pos:start="511:37" pos:end="511:37">*</operator> <sizeof pos:start="511:39" pos:end="511:54">sizeof<argument_list pos:start="511:45" pos:end="511:54">(<argument pos:start="511:46" pos:end="511:53"><expr pos:start="511:46" pos:end="511:53"><name pos:start="511:46" pos:end="511:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="511:57" pos:end="511:59"><expr pos:start="511:57" pos:end="511:59"><literal type="number" pos:start="511:57" pos:end="511:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="513:9" pos:end="521:9"><if pos:start="513:9" pos:end="521:9">if <condition pos:start="513:12" pos:end="513:32">(<expr pos:start="513:13" pos:end="513:31"><name pos:start="513:13" pos:end="513:23"><name pos:start="513:13" pos:end="513:13">s</name><operator pos:start="513:14" pos:end="513:15">-&gt;</operator><name pos:start="513:16" pos:end="513:23">l1_table</name></name> <operator pos:start="513:25" pos:end="513:26">==</operator> <name pos:start="513:28" pos:end="513:31">NULL</name></expr>)</condition> <block pos:start="513:34" pos:end="521:9">{<block_content pos:start="515:13" pos:end="519:22">

            <expr_stmt pos:start="515:13" pos:end="515:60"><expr pos:start="515:13" pos:end="515:59"><call pos:start="515:13" pos:end="515:59"><name pos:start="515:13" pos:end="515:22">error_setg</name><argument_list pos:start="515:23" pos:end="515:59">(<argument pos:start="515:24" pos:end="515:27"><expr pos:start="515:24" pos:end="515:27"><name pos:start="515:24" pos:end="515:27">errp</name></expr></argument>, <argument pos:start="515:30" pos:end="515:58"><expr pos:start="515:30" pos:end="515:58"><literal type="string" pos:start="515:30" pos:end="515:58">"Could not allocate L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:26"><expr pos:start="517:13" pos:end="517:25"><name pos:start="517:13" pos:end="517:15">ret</name> <operator pos:start="517:17" pos:end="517:17">=</operator> <operator pos:start="517:19" pos:end="517:19">-</operator><name pos:start="517:20" pos:end="517:25">ENOMEM</name></expr>;</expr_stmt>

            <goto pos:start="519:13" pos:end="519:22">goto <name pos:start="519:18" pos:end="519:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="523:9" pos:end="525:56"><expr pos:start="523:9" pos:end="525:55"><name pos:start="523:9" pos:end="523:11">ret</name> <operator pos:start="523:13" pos:end="523:13">=</operator> <call pos:start="523:15" pos:end="525:55"><name pos:start="523:15" pos:end="523:24">bdrv_pread</name><argument_list pos:start="523:25" pos:end="525:55">(<argument pos:start="523:26" pos:end="523:33"><expr pos:start="523:26" pos:end="523:33"><name pos:start="523:26" pos:end="523:33"><name pos:start="523:26" pos:end="523:27">bs</name><operator pos:start="523:28" pos:end="523:29">-&gt;</operator><name pos:start="523:30" pos:end="523:33">file</name></name></expr></argument>, <argument pos:start="523:36" pos:end="523:53"><expr pos:start="523:36" pos:end="523:53"><name pos:start="523:36" pos:end="523:53"><name pos:start="523:36" pos:end="523:36">s</name><operator pos:start="523:37" pos:end="523:38">-&gt;</operator><name pos:start="523:39" pos:end="523:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="523:56" pos:end="523:66"><expr pos:start="523:56" pos:end="523:66"><name pos:start="523:56" pos:end="523:66"><name pos:start="523:56" pos:end="523:56">s</name><operator pos:start="523:57" pos:end="523:58">-&gt;</operator><name pos:start="523:59" pos:end="523:66">l1_table</name></name></expr></argument>,

                         <argument pos:start="525:26" pos:end="525:54"><expr pos:start="525:26" pos:end="525:54"><name pos:start="525:26" pos:end="525:35"><name pos:start="525:26" pos:end="525:26">s</name><operator pos:start="525:27" pos:end="525:28">-&gt;</operator><name pos:start="525:29" pos:end="525:35">l1_size</name></name> <operator pos:start="525:37" pos:end="525:37">*</operator> <sizeof pos:start="525:39" pos:end="525:54">sizeof<argument_list pos:start="525:45" pos:end="525:54">(<argument pos:start="525:46" pos:end="525:53"><expr pos:start="525:46" pos:end="525:53"><name pos:start="525:46" pos:end="525:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="527:9" pos:end="533:9"><if pos:start="527:9" pos:end="533:9">if <condition pos:start="527:12" pos:end="527:20">(<expr pos:start="527:13" pos:end="527:19"><name pos:start="527:13" pos:end="527:15">ret</name> <operator pos:start="527:17" pos:end="527:17">&lt;</operator> <literal type="number" pos:start="527:19" pos:end="527:19">0</literal></expr>)</condition> <block pos:start="527:22" pos:end="533:9">{<block_content pos:start="529:13" pos:end="531:22">

            <expr_stmt pos:start="529:13" pos:end="529:68"><expr pos:start="529:13" pos:end="529:67"><call pos:start="529:13" pos:end="529:67"><name pos:start="529:13" pos:end="529:28">error_setg_errno</name><argument_list pos:start="529:29" pos:end="529:67">(<argument pos:start="529:30" pos:end="529:33"><expr pos:start="529:30" pos:end="529:33"><name pos:start="529:30" pos:end="529:33">errp</name></expr></argument>, <argument pos:start="529:36" pos:end="529:39"><expr pos:start="529:36" pos:end="529:39"><operator pos:start="529:36" pos:end="529:36">-</operator><name pos:start="529:37" pos:end="529:39">ret</name></expr></argument>, <argument pos:start="529:42" pos:end="529:66"><expr pos:start="529:42" pos:end="529:66"><literal type="string" pos:start="529:42" pos:end="529:66">"Could not read L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="531:13" pos:end="531:22">goto <name pos:start="531:18" pos:end="531:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="535:9" pos:end="539:9">for<control pos:start="535:12" pos:end="535:38">(<init pos:start="535:13" pos:end="535:18"><expr pos:start="535:13" pos:end="535:17"><name pos:start="535:13" pos:end="535:13">i</name> <operator pos:start="535:15" pos:end="535:15">=</operator> <literal type="number" pos:start="535:17" pos:end="535:17">0</literal></expr>;</init><condition pos:start="535:19" pos:end="535:33"><expr pos:start="535:19" pos:end="535:32"><name pos:start="535:19" pos:end="535:19">i</name> <operator pos:start="535:21" pos:end="535:21">&lt;</operator> <name pos:start="535:23" pos:end="535:32"><name pos:start="535:23" pos:end="535:23">s</name><operator pos:start="535:24" pos:end="535:25">-&gt;</operator><name pos:start="535:26" pos:end="535:32">l1_size</name></name></expr>;</condition> <incr pos:start="535:35" pos:end="535:37"><expr pos:start="535:35" pos:end="535:37"><name pos:start="535:35" pos:end="535:35">i</name><operator pos:start="535:36" pos:end="535:37">++</operator></expr></incr>)</control> <block pos:start="535:40" pos:end="539:9">{<block_content pos:start="537:13" pos:end="537:42">

            <expr_stmt pos:start="537:13" pos:end="537:42"><expr pos:start="537:13" pos:end="537:41"><call pos:start="537:13" pos:end="537:41"><name pos:start="537:13" pos:end="537:24">be64_to_cpus</name><argument_list pos:start="537:25" pos:end="537:41">(<argument pos:start="537:26" pos:end="537:40"><expr pos:start="537:26" pos:end="537:40"><operator pos:start="537:26" pos:end="537:26">&amp;</operator><name pos:start="537:27" pos:end="537:40"><name pos:start="537:27" pos:end="537:27">s</name><operator pos:start="537:28" pos:end="537:29">-&gt;</operator><name pos:start="537:30" pos:end="537:37">l1_table</name><index pos:start="537:38" pos:end="537:40">[<expr pos:start="537:39" pos:end="537:39"><name pos:start="537:39" pos:end="537:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="545:5" pos:end="545:39">/* Parse driver-specific options */</comment>

    <expr_stmt pos:start="547:5" pos:end="547:57"><expr pos:start="547:5" pos:end="547:56"><name pos:start="547:5" pos:end="547:7">ret</name> <operator pos:start="547:9" pos:end="547:9">=</operator> <call pos:start="547:11" pos:end="547:56"><name pos:start="547:11" pos:end="547:30">qcow2_update_options</name><argument_list pos:start="547:31" pos:end="547:56">(<argument pos:start="547:32" pos:end="547:33"><expr pos:start="547:32" pos:end="547:33"><name pos:start="547:32" pos:end="547:33">bs</name></expr></argument>, <argument pos:start="547:36" pos:end="547:42"><expr pos:start="547:36" pos:end="547:42"><name pos:start="547:36" pos:end="547:42">options</name></expr></argument>, <argument pos:start="547:45" pos:end="547:49"><expr pos:start="547:45" pos:end="547:49"><name pos:start="547:45" pos:end="547:49">flags</name></expr></argument>, <argument pos:start="547:52" pos:end="547:55"><expr pos:start="547:52" pos:end="547:55"><name pos:start="547:52" pos:end="547:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="549:5" pos:end="553:5"><if pos:start="549:5" pos:end="553:5">if <condition pos:start="549:8" pos:end="549:16">(<expr pos:start="549:9" pos:end="549:15"><name pos:start="549:9" pos:end="549:11">ret</name> <operator pos:start="549:13" pos:end="549:13">&lt;</operator> <literal type="number" pos:start="549:15" pos:end="549:15">0</literal></expr>)</condition> <block pos:start="549:18" pos:end="553:5">{<block_content pos:start="551:9" pos:end="551:18">

        <goto pos:start="551:9" pos:end="551:18">goto <name pos:start="551:14" pos:end="551:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="557:5" pos:end="557:49"><expr pos:start="557:5" pos:end="557:48"><name pos:start="557:5" pos:end="557:20"><name pos:start="557:5" pos:end="557:5">s</name><operator pos:start="557:6" pos:end="557:7">-&gt;</operator><name pos:start="557:8" pos:end="557:20">cluster_cache</name></name> <operator pos:start="557:22" pos:end="557:22">=</operator> <call pos:start="557:24" pos:end="557:48"><name pos:start="557:24" pos:end="557:31">g_malloc</name><argument_list pos:start="557:32" pos:end="557:48">(<argument pos:start="557:33" pos:end="557:47"><expr pos:start="557:33" pos:end="557:47"><name pos:start="557:33" pos:end="557:47"><name pos:start="557:33" pos:end="557:33">s</name><operator pos:start="557:34" pos:end="557:35">-&gt;</operator><name pos:start="557:36" pos:end="557:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="559:5" pos:end="559:57">/* one more sector for decompressed data alignment */</comment>

    <expr_stmt pos:start="561:5" pos:end="563:77"><expr pos:start="561:5" pos:end="563:76"><name pos:start="561:5" pos:end="561:19"><name pos:start="561:5" pos:end="561:5">s</name><operator pos:start="561:6" pos:end="561:7">-&gt;</operator><name pos:start="561:8" pos:end="561:19">cluster_data</name></name> <operator pos:start="561:21" pos:end="561:21">=</operator> <call pos:start="561:23" pos:end="563:76"><name pos:start="561:23" pos:end="561:41">qemu_try_blockalign</name><argument_list pos:start="561:42" pos:end="563:76">(<argument pos:start="561:43" pos:end="561:54"><expr pos:start="561:43" pos:end="561:54"><name pos:start="561:43" pos:end="561:54"><name pos:start="561:43" pos:end="561:44">bs</name><operator pos:start="561:45" pos:end="561:46">-&gt;</operator><name pos:start="561:47" pos:end="561:50">file</name><operator pos:start="561:51" pos:end="561:52">-&gt;</operator><name pos:start="561:53" pos:end="561:54">bs</name></name></expr></argument>, <argument pos:start="561:57" pos:end="563:75"><expr pos:start="561:57" pos:end="563:75"><name pos:start="561:57" pos:end="561:79">QCOW_MAX_CRYPT_CLUSTERS</name>

                                                    <operator pos:start="563:53" pos:end="563:53">*</operator> <name pos:start="563:55" pos:end="563:69"><name pos:start="563:55" pos:end="563:55">s</name><operator pos:start="563:56" pos:end="563:57">-&gt;</operator><name pos:start="563:58" pos:end="563:69">cluster_size</name></name> <operator pos:start="563:71" pos:end="563:71">+</operator> <literal type="number" pos:start="563:73" pos:end="563:75">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="565:5" pos:end="573:5"><if pos:start="565:5" pos:end="573:5">if <condition pos:start="565:8" pos:end="565:32">(<expr pos:start="565:9" pos:end="565:31"><name pos:start="565:9" pos:end="565:23"><name pos:start="565:9" pos:end="565:9">s</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:23">cluster_data</name></name> <operator pos:start="565:25" pos:end="565:26">==</operator> <name pos:start="565:28" pos:end="565:31">NULL</name></expr>)</condition> <block pos:start="565:34" pos:end="573:5">{<block_content pos:start="567:9" pos:end="571:18">

        <expr_stmt pos:start="567:9" pos:end="567:72"><expr pos:start="567:9" pos:end="567:71"><call pos:start="567:9" pos:end="567:71"><name pos:start="567:9" pos:end="567:18">error_setg</name><argument_list pos:start="567:19" pos:end="567:71">(<argument pos:start="567:20" pos:end="567:23"><expr pos:start="567:20" pos:end="567:23"><name pos:start="567:20" pos:end="567:23">errp</name></expr></argument>, <argument pos:start="567:26" pos:end="567:70"><expr pos:start="567:26" pos:end="567:70"><literal type="string" pos:start="567:26" pos:end="567:70">"Could not allocate temporary cluster buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="569:9" pos:end="569:22"><expr pos:start="569:9" pos:end="569:21"><name pos:start="569:9" pos:end="569:11">ret</name> <operator pos:start="569:13" pos:end="569:13">=</operator> <operator pos:start="569:15" pos:end="569:15">-</operator><name pos:start="569:16" pos:end="569:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="571:9" pos:end="571:18">goto <name pos:start="571:14" pos:end="571:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="577:5" pos:end="577:33"><expr pos:start="577:5" pos:end="577:32"><name pos:start="577:5" pos:end="577:27"><name pos:start="577:5" pos:end="577:5">s</name><operator pos:start="577:6" pos:end="577:7">-&gt;</operator><name pos:start="577:8" pos:end="577:27">cluster_cache_offset</name></name> <operator pos:start="577:29" pos:end="577:29">=</operator> <operator pos:start="577:31" pos:end="577:31">-</operator><literal type="number" pos:start="577:32" pos:end="577:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="579:5" pos:end="579:21"><expr pos:start="579:5" pos:end="579:20"><name pos:start="579:5" pos:end="579:12"><name pos:start="579:5" pos:end="579:5">s</name><operator pos:start="579:6" pos:end="579:7">-&gt;</operator><name pos:start="579:8" pos:end="579:12">flags</name></name> <operator pos:start="579:14" pos:end="579:14">=</operator> <name pos:start="579:16" pos:end="579:20">flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="583:5" pos:end="583:34"><expr pos:start="583:5" pos:end="583:33"><name pos:start="583:5" pos:end="583:7">ret</name> <operator pos:start="583:9" pos:end="583:9">=</operator> <call pos:start="583:11" pos:end="583:33"><name pos:start="583:11" pos:end="583:29">qcow2_refcount_init</name><argument_list pos:start="583:30" pos:end="583:33">(<argument pos:start="583:31" pos:end="583:32"><expr pos:start="583:31" pos:end="583:32"><name pos:start="583:31" pos:end="583:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="585:5" pos:end="591:5"><if pos:start="585:5" pos:end="591:5">if <condition pos:start="585:8" pos:end="585:17">(<expr pos:start="585:9" pos:end="585:16"><name pos:start="585:9" pos:end="585:11">ret</name> <operator pos:start="585:13" pos:end="585:14">!=</operator> <literal type="number" pos:start="585:16" pos:end="585:16">0</literal></expr>)</condition> <block pos:start="585:19" pos:end="591:5">{<block_content pos:start="587:9" pos:end="589:18">

        <expr_stmt pos:start="587:9" pos:end="587:79"><expr pos:start="587:9" pos:end="587:78"><call pos:start="587:9" pos:end="587:78"><name pos:start="587:9" pos:end="587:24">error_setg_errno</name><argument_list pos:start="587:25" pos:end="587:78">(<argument pos:start="587:26" pos:end="587:29"><expr pos:start="587:26" pos:end="587:29"><name pos:start="587:26" pos:end="587:29">errp</name></expr></argument>, <argument pos:start="587:32" pos:end="587:35"><expr pos:start="587:32" pos:end="587:35"><operator pos:start="587:32" pos:end="587:32">-</operator><name pos:start="587:33" pos:end="587:35">ret</name></expr></argument>, <argument pos:start="587:38" pos:end="587:77"><expr pos:start="587:38" pos:end="587:77"><literal type="string" pos:start="587:38" pos:end="587:77">"Could not initialize refcount handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="589:9" pos:end="589:18">goto <name pos:start="589:14" pos:end="589:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="595:5" pos:end="595:35"><expr pos:start="595:5" pos:end="595:34"><call pos:start="595:5" pos:end="595:34"><name pos:start="595:5" pos:end="595:14">QLIST_INIT</name><argument_list pos:start="595:15" pos:end="595:34">(<argument pos:start="595:16" pos:end="595:33"><expr pos:start="595:16" pos:end="595:33"><operator pos:start="595:16" pos:end="595:16">&amp;</operator><name pos:start="595:17" pos:end="595:33"><name pos:start="595:17" pos:end="595:17">s</name><operator pos:start="595:18" pos:end="595:19">-&gt;</operator><name pos:start="595:20" pos:end="595:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="597:5" pos:end="597:30"><expr pos:start="597:5" pos:end="597:29"><call pos:start="597:5" pos:end="597:29"><name pos:start="597:5" pos:end="597:15">QTAILQ_INIT</name><argument_list pos:start="597:16" pos:end="597:29">(<argument pos:start="597:17" pos:end="597:28"><expr pos:start="597:17" pos:end="597:28"><operator pos:start="597:17" pos:end="597:17">&amp;</operator><name pos:start="597:18" pos:end="597:28"><name pos:start="597:18" pos:end="597:18">s</name><operator pos:start="597:19" pos:end="597:20">-&gt;</operator><name pos:start="597:21" pos:end="597:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="601:5" pos:end="601:31">/* read qcow2 extensions */</comment>

    <if_stmt pos:start="603:5" pos:end="613:5"><if pos:start="603:5" pos:end="613:5">if <condition pos:start="603:8" pos:end="605:20">(<expr pos:start="603:9" pos:end="605:19"><call pos:start="603:9" pos:end="605:19"><name pos:start="603:9" pos:end="603:29">qcow2_read_extensions</name><argument_list pos:start="603:30" pos:end="605:19">(<argument pos:start="603:31" pos:end="603:32"><expr pos:start="603:31" pos:end="603:32"><name pos:start="603:31" pos:end="603:32">bs</name></expr></argument>, <argument pos:start="603:35" pos:end="603:54"><expr pos:start="603:35" pos:end="603:54"><name pos:start="603:35" pos:end="603:54"><name pos:start="603:35" pos:end="603:40">header</name><operator pos:start="603:41" pos:end="603:41">.</operator><name pos:start="603:42" pos:end="603:54">header_length</name></name></expr></argument>, <argument pos:start="603:57" pos:end="603:63"><expr pos:start="603:57" pos:end="603:63"><name pos:start="603:57" pos:end="603:63">ext_end</name></expr></argument>, <argument pos:start="603:66" pos:end="603:69"><expr pos:start="603:66" pos:end="603:69"><name pos:start="603:66" pos:end="603:69">NULL</name></expr></argument>,

        <argument pos:start="605:9" pos:end="605:18"><expr pos:start="605:9" pos:end="605:18"><operator pos:start="605:9" pos:end="605:9">&amp;</operator><name pos:start="605:10" pos:end="605:18">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="605:22" pos:end="613:5">{<block_content pos:start="607:9" pos:end="611:18">

        <expr_stmt pos:start="607:9" pos:end="607:41"><expr pos:start="607:9" pos:end="607:40"><call pos:start="607:9" pos:end="607:40"><name pos:start="607:9" pos:end="607:23">error_propagate</name><argument_list pos:start="607:24" pos:end="607:40">(<argument pos:start="607:25" pos:end="607:28"><expr pos:start="607:25" pos:end="607:28"><name pos:start="607:25" pos:end="607:28">errp</name></expr></argument>, <argument pos:start="607:31" pos:end="607:39"><expr pos:start="607:31" pos:end="607:39"><name pos:start="607:31" pos:end="607:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:22"><expr pos:start="609:9" pos:end="609:21"><name pos:start="609:9" pos:end="609:11">ret</name> <operator pos:start="609:13" pos:end="609:13">=</operator> <operator pos:start="609:15" pos:end="609:15">-</operator><name pos:start="609:16" pos:end="609:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="611:9" pos:end="611:18">goto <name pos:start="611:14" pos:end="611:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="617:5" pos:end="617:36">/* read the backing file name */</comment>

    <if_stmt pos:start="619:5" pos:end="651:5"><if pos:start="619:5" pos:end="651:5">if <condition pos:start="619:8" pos:end="619:40">(<expr pos:start="619:9" pos:end="619:39"><name pos:start="619:9" pos:end="619:34"><name pos:start="619:9" pos:end="619:14">header</name><operator pos:start="619:15" pos:end="619:15">.</operator><name pos:start="619:16" pos:end="619:34">backing_file_offset</name></name> <operator pos:start="619:36" pos:end="619:37">!=</operator> <literal type="number" pos:start="619:39" pos:end="619:39">0</literal></expr>)</condition> <block pos:start="619:42" pos:end="651:5">{<block_content pos:start="621:9" pos:end="649:59">

        <expr_stmt pos:start="621:9" pos:end="621:39"><expr pos:start="621:9" pos:end="621:38"><name pos:start="621:9" pos:end="621:11">len</name> <operator pos:start="621:13" pos:end="621:13">=</operator> <name pos:start="621:15" pos:end="621:38"><name pos:start="621:15" pos:end="621:20">header</name><operator pos:start="621:21" pos:end="621:21">.</operator><name pos:start="621:22" pos:end="621:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="623:9" pos:end="633:9"><if pos:start="623:9" pos:end="633:9">if <condition pos:start="623:12" pos:end="625:44">(<expr pos:start="623:13" pos:end="625:43"><name pos:start="623:13" pos:end="623:15">len</name> <operator pos:start="623:17" pos:end="623:17">&gt;</operator> <call pos:start="623:19" pos:end="623:73"><name pos:start="623:19" pos:end="623:21">MIN</name><argument_list pos:start="623:22" pos:end="623:73">(<argument pos:start="623:23" pos:end="623:26"><expr pos:start="623:23" pos:end="623:26"><literal type="number" pos:start="623:23" pos:end="623:26">1023</literal></expr></argument>, <argument pos:start="623:29" pos:end="623:72"><expr pos:start="623:29" pos:end="623:72"><name pos:start="623:29" pos:end="623:43"><name pos:start="623:29" pos:end="623:29">s</name><operator pos:start="623:30" pos:end="623:31">-&gt;</operator><name pos:start="623:32" pos:end="623:43">cluster_size</name></name> <operator pos:start="623:45" pos:end="623:45">-</operator> <name pos:start="623:47" pos:end="623:72"><name pos:start="623:47" pos:end="623:52">header</name><operator pos:start="623:53" pos:end="623:53">.</operator><name pos:start="623:54" pos:end="623:72">backing_file_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="623:75" pos:end="623:76">||</operator>

            <name pos:start="625:13" pos:end="625:15">len</name> <operator pos:start="625:17" pos:end="625:18">&gt;=</operator> <sizeof pos:start="625:20" pos:end="625:43">sizeof<argument_list pos:start="625:26" pos:end="625:43">(<argument pos:start="625:27" pos:end="625:42"><expr pos:start="625:27" pos:end="625:42"><name pos:start="625:27" pos:end="625:42"><name pos:start="625:27" pos:end="625:28">bs</name><operator pos:start="625:29" pos:end="625:30">-&gt;</operator><name pos:start="625:31" pos:end="625:42">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="625:46" pos:end="633:9">{<block_content pos:start="627:13" pos:end="631:22">

            <expr_stmt pos:start="627:13" pos:end="627:59"><expr pos:start="627:13" pos:end="627:58"><call pos:start="627:13" pos:end="627:58"><name pos:start="627:13" pos:end="627:22">error_setg</name><argument_list pos:start="627:23" pos:end="627:58">(<argument pos:start="627:24" pos:end="627:27"><expr pos:start="627:24" pos:end="627:27"><name pos:start="627:24" pos:end="627:27">errp</name></expr></argument>, <argument pos:start="627:30" pos:end="627:57"><expr pos:start="627:30" pos:end="627:57"><literal type="string" pos:start="627:30" pos:end="627:57">"Backing file name too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="629:13" pos:end="629:26"><expr pos:start="629:13" pos:end="629:25"><name pos:start="629:13" pos:end="629:15">ret</name> <operator pos:start="629:17" pos:end="629:17">=</operator> <operator pos:start="629:19" pos:end="629:19">-</operator><name pos:start="629:20" pos:end="629:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="631:13" pos:end="631:22">goto <name pos:start="631:18" pos:end="631:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="635:9" pos:end="637:48"><expr pos:start="635:9" pos:end="637:47"><name pos:start="635:9" pos:end="635:11">ret</name> <operator pos:start="635:13" pos:end="635:13">=</operator> <call pos:start="635:15" pos:end="637:47"><name pos:start="635:15" pos:end="635:24">bdrv_pread</name><argument_list pos:start="635:25" pos:end="637:47">(<argument pos:start="635:26" pos:end="635:33"><expr pos:start="635:26" pos:end="635:33"><name pos:start="635:26" pos:end="635:33"><name pos:start="635:26" pos:end="635:27">bs</name><operator pos:start="635:28" pos:end="635:29">-&gt;</operator><name pos:start="635:30" pos:end="635:33">file</name></name></expr></argument>, <argument pos:start="635:36" pos:end="635:61"><expr pos:start="635:36" pos:end="635:61"><name pos:start="635:36" pos:end="635:61"><name pos:start="635:36" pos:end="635:41">header</name><operator pos:start="635:42" pos:end="635:42">.</operator><name pos:start="635:43" pos:end="635:61">backing_file_offset</name></name></expr></argument>,

                         <argument pos:start="637:26" pos:end="637:41"><expr pos:start="637:26" pos:end="637:41"><name pos:start="637:26" pos:end="637:41"><name pos:start="637:26" pos:end="637:27">bs</name><operator pos:start="637:28" pos:end="637:29">-&gt;</operator><name pos:start="637:30" pos:end="637:41">backing_file</name></name></expr></argument>, <argument pos:start="637:44" pos:end="637:46"><expr pos:start="637:44" pos:end="637:46"><name pos:start="637:44" pos:end="637:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="639:9" pos:end="645:9"><if pos:start="639:9" pos:end="645:9">if <condition pos:start="639:12" pos:end="639:20">(<expr pos:start="639:13" pos:end="639:19"><name pos:start="639:13" pos:end="639:15">ret</name> <operator pos:start="639:17" pos:end="639:17">&lt;</operator> <literal type="number" pos:start="639:19" pos:end="639:19">0</literal></expr>)</condition> <block pos:start="639:22" pos:end="645:9">{<block_content pos:start="641:13" pos:end="643:22">

            <expr_stmt pos:start="641:13" pos:end="641:77"><expr pos:start="641:13" pos:end="641:76"><call pos:start="641:13" pos:end="641:76"><name pos:start="641:13" pos:end="641:28">error_setg_errno</name><argument_list pos:start="641:29" pos:end="641:76">(<argument pos:start="641:30" pos:end="641:33"><expr pos:start="641:30" pos:end="641:33"><name pos:start="641:30" pos:end="641:33">errp</name></expr></argument>, <argument pos:start="641:36" pos:end="641:39"><expr pos:start="641:36" pos:end="641:39"><operator pos:start="641:36" pos:end="641:36">-</operator><name pos:start="641:37" pos:end="641:39">ret</name></expr></argument>, <argument pos:start="641:42" pos:end="641:75"><expr pos:start="641:42" pos:end="641:75"><literal type="string" pos:start="641:42" pos:end="641:75">"Could not read backing file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="643:13" pos:end="643:22">goto <name pos:start="643:18" pos:end="643:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="647:9" pos:end="647:37"><expr pos:start="647:9" pos:end="647:36"><name pos:start="647:9" pos:end="647:29"><name pos:start="647:9" pos:end="647:10">bs</name><operator pos:start="647:11" pos:end="647:12">-&gt;</operator><name pos:start="647:13" pos:end="647:24">backing_file</name><index pos:start="647:25" pos:end="647:29">[<expr pos:start="647:26" pos:end="647:28"><name pos:start="647:26" pos:end="647:28">len</name></expr>]</index></name> <operator pos:start="647:31" pos:end="647:31">=</operator> <literal type="char" pos:start="647:33" pos:end="647:36">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="649:9" pos:end="649:59"><expr pos:start="649:9" pos:end="649:58"><name pos:start="649:9" pos:end="649:29"><name pos:start="649:9" pos:end="649:9">s</name><operator pos:start="649:10" pos:end="649:11">-&gt;</operator><name pos:start="649:12" pos:end="649:29">image_backing_file</name></name> <operator pos:start="649:31" pos:end="649:31">=</operator> <call pos:start="649:33" pos:end="649:58"><name pos:start="649:33" pos:end="649:40">g_strdup</name><argument_list pos:start="649:41" pos:end="649:58">(<argument pos:start="649:42" pos:end="649:57"><expr pos:start="649:42" pos:end="649:57"><name pos:start="649:42" pos:end="649:57"><name pos:start="649:42" pos:end="649:43">bs</name><operator pos:start="649:44" pos:end="649:45">-&gt;</operator><name pos:start="649:46" pos:end="649:57">backing_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="655:5" pos:end="655:28">/* Internal snapshots */</comment>

    <expr_stmt pos:start="657:5" pos:end="657:50"><expr pos:start="657:5" pos:end="657:49"><name pos:start="657:5" pos:end="657:23"><name pos:start="657:5" pos:end="657:5">s</name><operator pos:start="657:6" pos:end="657:7">-&gt;</operator><name pos:start="657:8" pos:end="657:23">snapshots_offset</name></name> <operator pos:start="657:25" pos:end="657:25">=</operator> <name pos:start="657:27" pos:end="657:49"><name pos:start="657:27" pos:end="657:32">header</name><operator pos:start="657:33" pos:end="657:33">.</operator><name pos:start="657:34" pos:end="657:49">snapshots_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="659:5" pos:end="659:42"><expr pos:start="659:5" pos:end="659:41"><name pos:start="659:5" pos:end="659:19"><name pos:start="659:5" pos:end="659:5">s</name><operator pos:start="659:6" pos:end="659:7">-&gt;</operator><name pos:start="659:8" pos:end="659:19">nb_snapshots</name></name> <operator pos:start="659:21" pos:end="659:21">=</operator> <name pos:start="659:23" pos:end="659:41"><name pos:start="659:23" pos:end="659:28">header</name><operator pos:start="659:29" pos:end="659:29">.</operator><name pos:start="659:30" pos:end="659:41">nb_snapshots</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="663:5" pos:end="663:35"><expr pos:start="663:5" pos:end="663:34"><name pos:start="663:5" pos:end="663:7">ret</name> <operator pos:start="663:9" pos:end="663:9">=</operator> <call pos:start="663:11" pos:end="663:34"><name pos:start="663:11" pos:end="663:30">qcow2_read_snapshots</name><argument_list pos:start="663:31" pos:end="663:34">(<argument pos:start="663:32" pos:end="663:33"><expr pos:start="663:32" pos:end="663:33"><name pos:start="663:32" pos:end="663:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="665:5" pos:end="671:5"><if pos:start="665:5" pos:end="671:5">if <condition pos:start="665:8" pos:end="665:16">(<expr pos:start="665:9" pos:end="665:15"><name pos:start="665:9" pos:end="665:11">ret</name> <operator pos:start="665:13" pos:end="665:13">&lt;</operator> <literal type="number" pos:start="665:15" pos:end="665:15">0</literal></expr>)</condition> <block pos:start="665:18" pos:end="671:5">{<block_content pos:start="667:9" pos:end="669:18">

        <expr_stmt pos:start="667:9" pos:end="667:65"><expr pos:start="667:9" pos:end="667:64"><call pos:start="667:9" pos:end="667:64"><name pos:start="667:9" pos:end="667:24">error_setg_errno</name><argument_list pos:start="667:25" pos:end="667:64">(<argument pos:start="667:26" pos:end="667:29"><expr pos:start="667:26" pos:end="667:29"><name pos:start="667:26" pos:end="667:29">errp</name></expr></argument>, <argument pos:start="667:32" pos:end="667:35"><expr pos:start="667:32" pos:end="667:35"><operator pos:start="667:32" pos:end="667:32">-</operator><name pos:start="667:33" pos:end="667:35">ret</name></expr></argument>, <argument pos:start="667:38" pos:end="667:63"><expr pos:start="667:38" pos:end="667:63"><literal type="string" pos:start="667:38" pos:end="667:63">"Could not read snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="669:9" pos:end="669:18">goto <name pos:start="669:14" pos:end="669:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="675:5" pos:end="675:46">/* Clear unknown autoclear feature bits */</comment>

    <if_stmt pos:start="677:5" pos:end="691:5"><if pos:start="677:5" pos:end="691:5">if <condition pos:start="677:8" pos:end="677:78">(<expr pos:start="677:9" pos:end="677:77"><operator pos:start="677:9" pos:end="677:9">!</operator><name pos:start="677:10" pos:end="677:22"><name pos:start="677:10" pos:end="677:11">bs</name><operator pos:start="677:12" pos:end="677:13">-&gt;</operator><name pos:start="677:14" pos:end="677:22">read_only</name></name> <operator pos:start="677:24" pos:end="677:25">&amp;&amp;</operator> <operator pos:start="677:27" pos:end="677:27">!</operator><operator pos:start="677:28" pos:end="677:28">(</operator><name pos:start="677:29" pos:end="677:33">flags</name> <operator pos:start="677:35" pos:end="677:35">&amp;</operator> <name pos:start="677:37" pos:end="677:51">BDRV_O_INACTIVE</name><operator pos:start="677:52" pos:end="677:52">)</operator> <operator pos:start="677:54" pos:end="677:55">&amp;&amp;</operator> <name pos:start="677:57" pos:end="677:77"><name pos:start="677:57" pos:end="677:57">s</name><operator pos:start="677:58" pos:end="677:59">-&gt;</operator><name pos:start="677:60" pos:end="677:77">autoclear_features</name></name></expr>)</condition> <block pos:start="677:80" pos:end="691:5">{<block_content pos:start="679:9" pos:end="689:9">

        <expr_stmt pos:start="679:9" pos:end="679:34"><expr pos:start="679:9" pos:end="679:33"><name pos:start="679:9" pos:end="679:29"><name pos:start="679:9" pos:end="679:9">s</name><operator pos:start="679:10" pos:end="679:11">-&gt;</operator><name pos:start="679:12" pos:end="679:29">autoclear_features</name></name> <operator pos:start="679:31" pos:end="679:31">=</operator> <literal type="number" pos:start="679:33" pos:end="679:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="681:9" pos:end="681:38"><expr pos:start="681:9" pos:end="681:37"><name pos:start="681:9" pos:end="681:11">ret</name> <operator pos:start="681:13" pos:end="681:13">=</operator> <call pos:start="681:15" pos:end="681:37"><name pos:start="681:15" pos:end="681:33">qcow2_update_header</name><argument_list pos:start="681:34" pos:end="681:37">(<argument pos:start="681:35" pos:end="681:36"><expr pos:start="681:35" pos:end="681:36"><name pos:start="681:35" pos:end="681:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="683:9" pos:end="689:9"><if pos:start="683:9" pos:end="689:9">if <condition pos:start="683:12" pos:end="683:20">(<expr pos:start="683:13" pos:end="683:19"><name pos:start="683:13" pos:end="683:15">ret</name> <operator pos:start="683:17" pos:end="683:17">&lt;</operator> <literal type="number" pos:start="683:19" pos:end="683:19">0</literal></expr>)</condition> <block pos:start="683:22" pos:end="689:9">{<block_content pos:start="685:13" pos:end="687:22">

            <expr_stmt pos:start="685:13" pos:end="685:74"><expr pos:start="685:13" pos:end="685:73"><call pos:start="685:13" pos:end="685:73"><name pos:start="685:13" pos:end="685:28">error_setg_errno</name><argument_list pos:start="685:29" pos:end="685:73">(<argument pos:start="685:30" pos:end="685:33"><expr pos:start="685:30" pos:end="685:33"><name pos:start="685:30" pos:end="685:33">errp</name></expr></argument>, <argument pos:start="685:36" pos:end="685:39"><expr pos:start="685:36" pos:end="685:39"><operator pos:start="685:36" pos:end="685:36">-</operator><name pos:start="685:37" pos:end="685:39">ret</name></expr></argument>, <argument pos:start="685:42" pos:end="685:72"><expr pos:start="685:42" pos:end="685:72"><literal type="string" pos:start="685:42" pos:end="685:72">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="687:13" pos:end="687:22">goto <name pos:start="687:18" pos:end="687:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="695:5" pos:end="695:26">/* Initialise locks */</comment>

    <expr_stmt pos:start="697:5" pos:end="697:33"><expr pos:start="697:5" pos:end="697:32"><call pos:start="697:5" pos:end="697:32"><name pos:start="697:5" pos:end="697:22">qemu_co_mutex_init</name><argument_list pos:start="697:23" pos:end="697:32">(<argument pos:start="697:24" pos:end="697:31"><expr pos:start="697:24" pos:end="697:31"><operator pos:start="697:24" pos:end="697:24">&amp;</operator><name pos:start="697:25" pos:end="697:31"><name pos:start="697:25" pos:end="697:25">s</name><operator pos:start="697:26" pos:end="697:27">-&gt;</operator><name pos:start="697:28" pos:end="697:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="699:5" pos:end="699:50"><expr pos:start="699:5" pos:end="699:49"><name pos:start="699:5" pos:end="699:28"><name pos:start="699:5" pos:end="699:6">bs</name><operator pos:start="699:7" pos:end="699:8">-&gt;</operator><name pos:start="699:9" pos:end="699:28">supported_zero_flags</name></name> <operator pos:start="699:30" pos:end="699:30">=</operator> <name pos:start="699:32" pos:end="699:49">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>



    <comment type="block" pos:start="703:5" pos:end="703:31">/* Repair image if dirty */</comment>

    <if_stmt pos:start="705:5" pos:end="728:0"><if pos:start="705:5" pos:end="728:0">if <condition pos:start="705:8" pos:end="707:58">(<expr pos:start="705:9" pos:end="707:57"><operator pos:start="705:9" pos:end="705:9">!</operator><operator pos:start="705:10" pos:end="705:10">(</operator><name pos:start="705:11" pos:end="705:15">flags</name> <operator pos:start="705:17" pos:end="705:17">&amp;</operator> <operator pos:start="705:19" pos:end="705:19">(</operator><name pos:start="705:20" pos:end="705:31">BDRV_O_CHECK</name> <operator pos:start="705:33" pos:end="705:33">|</operator> <name pos:start="705:35" pos:end="705:49">BDRV_O_INACTIVE</name><operator pos:start="705:50" pos:end="705:50">)</operator><operator pos:start="705:51" pos:end="705:51">)</operator> <operator pos:start="705:53" pos:end="705:54">&amp;&amp;</operator> <operator pos:start="705:56" pos:end="705:56">!</operator><name pos:start="705:57" pos:end="705:69"><name pos:start="705:57" pos:end="705:58">bs</name><operator pos:start="705:59" pos:end="705:60">-&gt;</operator><name pos:start="705:61" pos:end="705:69">read_only</name></name> <operator pos:start="705:71" pos:end="705:72">&amp;&amp;</operator>

        <operator pos:start="707:9" pos:end="707:9">(</operator><name pos:start="707:10" pos:end="707:33"><name pos:start="707:10" pos:end="707:10">s</name><operator pos:start="707:11" pos:end="707:12">-&gt;</operator><name pos:start="707:13" pos:end="707:33">incompatible_features</name></name> <operator pos:start="707:35" pos:end="707:35">&amp;</operator> <name pos:start="707:37" pos:end="707:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="707:57" pos:end="707:57">)</operator></expr>)</condition> <block pos:start="707:60" pos:end="728:0">{<block_content pos:start="709:9" pos:end="721:9">

        <decl_stmt pos:start="709:9" pos:end="709:37"><decl pos:start="709:9" pos:end="709:36"><type pos:start="709:9" pos:end="709:23"><name pos:start="709:9" pos:end="709:23">BdrvCheckResult</name></type> <name pos:start="709:25" pos:end="709:30">result</name> <init pos:start="709:32" pos:end="709:36">= <expr pos:start="709:34" pos:end="709:36"><block pos:start="709:34" pos:end="709:36">{<expr pos:start="709:35" pos:end="709:35"><literal type="number" pos:start="709:35" pos:end="709:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="713:9" pos:end="713:73"><expr pos:start="713:9" pos:end="713:72"><name pos:start="713:9" pos:end="713:11">ret</name> <operator pos:start="713:13" pos:end="713:13">=</operator> <call pos:start="713:15" pos:end="713:72"><name pos:start="713:15" pos:end="713:25">qcow2_check</name><argument_list pos:start="713:26" pos:end="713:72">(<argument pos:start="713:27" pos:end="713:28"><expr pos:start="713:27" pos:end="713:28"><name pos:start="713:27" pos:end="713:28">bs</name></expr></argument>, <argument pos:start="713:31" pos:end="713:37"><expr pos:start="713:31" pos:end="713:37"><operator pos:start="713:31" pos:end="713:31">&amp;</operator><name pos:start="713:32" pos:end="713:37">result</name></expr></argument>, <argument pos:start="713:40" pos:end="713:71"><expr pos:start="713:40" pos:end="713:71"><name pos:start="713:40" pos:end="713:54">BDRV_FIX_ERRORS</name> <operator pos:start="713:56" pos:end="713:56">|</operator> <name pos:start="713:58" pos:end="713:71">BDRV_FIX_LEAKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="715:9" pos:end="721:9"><if pos:start="715:9" pos:end="721:9">if <condition pos:start="715:12" pos:end="715:20">(<expr pos:start="715:13" pos:end="715:19"><name pos:start="715:13" pos:end="715:15">ret</name> <operator pos:start="715:17" pos:end="715:17">&lt;</operator> <literal type="number" pos:start="715:19" pos:end="715:19">0</literal></expr>)</condition> <block pos:start="715:22" pos:end="721:9">{<block_content pos:start="717:13" pos:end="719:22">

            <expr_stmt pos:start="717:13" pos:end="717:73"><expr pos:start="717:13" pos:end="717:72"><call pos:start="717:13" pos:end="717:72"><name pos:start="717:13" pos:end="717:28">error_setg_errno</name><argument_list pos:start="717:29" pos:end="717:72">(<argument pos:start="717:30" pos:end="717:33"><expr pos:start="717:30" pos:end="717:33"><name pos:start="717:30" pos:end="717:33">errp</name></expr></argument>, <argument pos:start="717:36" pos:end="717:39"><expr pos:start="717:36" pos:end="717:39"><operator pos:start="717:36" pos:end="717:36">-</operator><name pos:start="717:37" pos:end="717:39">ret</name></expr></argument>, <argument pos:start="717:42" pos:end="717:71"><expr pos:start="717:42" pos:end="717:71"><literal type="string" pos:start="717:42" pos:end="717:71">"Could not repair dirty image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="719:13" pos:end="719:22">goto <name pos:start="719:18" pos:end="719:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="727:1" pos:end="727:18">#<cpp:directive pos:start="727:2" pos:end="727:6">ifdef</cpp:directive> <name pos:start="727:8" pos:end="727:18">DEBUG_ALLOC</name></cpp:ifdef>

    <block pos:start="729:5" pos:end="738:0">{<block_content pos:start="731:9" pos:end="733:46">

        <decl_stmt pos:start="731:9" pos:end="731:37"><decl pos:start="731:9" pos:end="731:36"><type pos:start="731:9" pos:end="731:23"><name pos:start="731:9" pos:end="731:23">BdrvCheckResult</name></type> <name pos:start="731:25" pos:end="731:30">result</name> <init pos:start="731:32" pos:end="731:36">= <expr pos:start="731:34" pos:end="731:36"><block pos:start="731:34" pos:end="731:36">{<expr pos:start="731:35" pos:end="731:35"><literal type="number" pos:start="731:35" pos:end="731:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="733:9" pos:end="733:46"><expr pos:start="733:9" pos:end="733:45"><call pos:start="733:9" pos:end="733:45"><name pos:start="733:9" pos:end="733:29">qcow2_check_refcounts</name><argument_list pos:start="733:30" pos:end="733:45">(<argument pos:start="733:31" pos:end="733:32"><expr pos:start="733:31" pos:end="733:32"><name pos:start="733:31" pos:end="733:32">bs</name></expr></argument>, <argument pos:start="733:35" pos:end="733:41"><expr pos:start="733:35" pos:end="733:41"><operator pos:start="733:35" pos:end="733:35">&amp;</operator><name pos:start="733:36" pos:end="733:41">result</name></expr></argument>, <argument pos:start="733:44" pos:end="733:44"><expr pos:start="733:44" pos:end="733:44"><literal type="number" pos:start="733:44" pos:end="733:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="737:1" pos:end="737:6">#<cpp:directive pos:start="737:2" pos:end="737:6">endif</cpp:directive></cpp:endif>

    <return pos:start="739:5" pos:end="739:15">return <expr pos:start="739:12" pos:end="739:14"><name pos:start="739:12" pos:end="739:14">ret</name></expr>;</return>



 <label pos:start="743:2" pos:end="743:6"><name pos:start="743:2" pos:end="743:5">fail</name>:</label>

    <expr_stmt pos:start="745:5" pos:end="745:37"><expr pos:start="745:5" pos:end="745:36"><call pos:start="745:5" pos:end="745:36"><name pos:start="745:5" pos:end="745:10">g_free</name><argument_list pos:start="745:11" pos:end="745:36">(<argument pos:start="745:12" pos:end="745:35"><expr pos:start="745:12" pos:end="745:35"><name pos:start="745:12" pos:end="745:35"><name pos:start="745:12" pos:end="745:12">s</name><operator pos:start="745:13" pos:end="745:14">-&gt;</operator><name pos:start="745:15" pos:end="745:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="747:5" pos:end="747:35"><expr pos:start="747:5" pos:end="747:34"><call pos:start="747:5" pos:end="747:34"><name pos:start="747:5" pos:end="747:30">cleanup_unknown_header_ext</name><argument_list pos:start="747:31" pos:end="747:34">(<argument pos:start="747:32" pos:end="747:33"><expr pos:start="747:32" pos:end="747:33"><name pos:start="747:32" pos:end="747:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="749:5" pos:end="749:29"><expr pos:start="749:5" pos:end="749:28"><call pos:start="749:5" pos:end="749:28"><name pos:start="749:5" pos:end="749:24">qcow2_free_snapshots</name><argument_list pos:start="749:25" pos:end="749:28">(<argument pos:start="749:26" pos:end="749:27"><expr pos:start="749:26" pos:end="749:27"><name pos:start="749:26" pos:end="749:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="751:5" pos:end="751:29"><expr pos:start="751:5" pos:end="751:28"><call pos:start="751:5" pos:end="751:28"><name pos:start="751:5" pos:end="751:24">qcow2_refcount_close</name><argument_list pos:start="751:25" pos:end="751:28">(<argument pos:start="751:26" pos:end="751:27"><expr pos:start="751:26" pos:end="751:27"><name pos:start="751:26" pos:end="751:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="753:5" pos:end="753:28"><expr pos:start="753:5" pos:end="753:27"><call pos:start="753:5" pos:end="753:27"><name pos:start="753:5" pos:end="753:14">qemu_vfree</name><argument_list pos:start="753:15" pos:end="753:27">(<argument pos:start="753:16" pos:end="753:26"><expr pos:start="753:16" pos:end="753:26"><name pos:start="753:16" pos:end="753:26"><name pos:start="753:16" pos:end="753:16">s</name><operator pos:start="753:17" pos:end="753:18">-&gt;</operator><name pos:start="753:19" pos:end="753:26">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="755:5" pos:end="755:66">/* else pre-write overlap checks in cache_destroy may crash */</comment>

    <expr_stmt pos:start="757:5" pos:end="757:23"><expr pos:start="757:5" pos:end="757:22"><name pos:start="757:5" pos:end="757:15"><name pos:start="757:5" pos:end="757:5">s</name><operator pos:start="757:6" pos:end="757:7">-&gt;</operator><name pos:start="757:8" pos:end="757:15">l1_table</name></name> <operator pos:start="757:17" pos:end="757:17">=</operator> <name pos:start="757:19" pos:end="757:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="759:5" pos:end="759:30"><expr pos:start="759:5" pos:end="759:29"><call pos:start="759:5" pos:end="759:29"><name pos:start="759:5" pos:end="759:25">cache_clean_timer_del</name><argument_list pos:start="759:26" pos:end="759:29">(<argument pos:start="759:27" pos:end="759:28"><expr pos:start="759:27" pos:end="759:28"><name pos:start="759:27" pos:end="759:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="761:5" pos:end="765:5"><if pos:start="761:5" pos:end="765:5">if <condition pos:start="761:8" pos:end="761:26">(<expr pos:start="761:9" pos:end="761:25"><name pos:start="761:9" pos:end="761:25"><name pos:start="761:9" pos:end="761:9">s</name><operator pos:start="761:10" pos:end="761:11">-&gt;</operator><name pos:start="761:12" pos:end="761:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="761:28" pos:end="765:5">{<block_content pos:start="763:9" pos:end="763:51">

        <expr_stmt pos:start="763:9" pos:end="763:51"><expr pos:start="763:9" pos:end="763:50"><call pos:start="763:9" pos:end="763:50"><name pos:start="763:9" pos:end="763:27">qcow2_cache_destroy</name><argument_list pos:start="763:28" pos:end="763:50">(<argument pos:start="763:29" pos:end="763:30"><expr pos:start="763:29" pos:end="763:30"><name pos:start="763:29" pos:end="763:30">bs</name></expr></argument>, <argument pos:start="763:33" pos:end="763:49"><expr pos:start="763:33" pos:end="763:49"><name pos:start="763:33" pos:end="763:49"><name pos:start="763:33" pos:end="763:33">s</name><operator pos:start="763:34" pos:end="763:35">-&gt;</operator><name pos:start="763:36" pos:end="763:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="767:5" pos:end="771:5"><if pos:start="767:5" pos:end="771:5">if <condition pos:start="767:8" pos:end="767:32">(<expr pos:start="767:9" pos:end="767:31"><name pos:start="767:9" pos:end="767:31"><name pos:start="767:9" pos:end="767:9">s</name><operator pos:start="767:10" pos:end="767:11">-&gt;</operator><name pos:start="767:12" pos:end="767:31">refcount_block_cache</name></name></expr>)</condition> <block pos:start="767:34" pos:end="771:5">{<block_content pos:start="769:9" pos:end="769:57">

        <expr_stmt pos:start="769:9" pos:end="769:57"><expr pos:start="769:9" pos:end="769:56"><call pos:start="769:9" pos:end="769:56"><name pos:start="769:9" pos:end="769:27">qcow2_cache_destroy</name><argument_list pos:start="769:28" pos:end="769:56">(<argument pos:start="769:29" pos:end="769:30"><expr pos:start="769:29" pos:end="769:30"><name pos:start="769:29" pos:end="769:30">bs</name></expr></argument>, <argument pos:start="769:33" pos:end="769:55"><expr pos:start="769:33" pos:end="769:55"><name pos:start="769:33" pos:end="769:55"><name pos:start="769:33" pos:end="769:33">s</name><operator pos:start="769:34" pos:end="769:35">-&gt;</operator><name pos:start="769:36" pos:end="769:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="773:5" pos:end="773:29"><expr pos:start="773:5" pos:end="773:28"><call pos:start="773:5" pos:end="773:28"><name pos:start="773:5" pos:end="773:10">g_free</name><argument_list pos:start="773:11" pos:end="773:28">(<argument pos:start="773:12" pos:end="773:27"><expr pos:start="773:12" pos:end="773:27"><name pos:start="773:12" pos:end="773:27"><name pos:start="773:12" pos:end="773:12">s</name><operator pos:start="773:13" pos:end="773:14">-&gt;</operator><name pos:start="773:15" pos:end="773:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="775:5" pos:end="775:32"><expr pos:start="775:5" pos:end="775:31"><call pos:start="775:5" pos:end="775:31"><name pos:start="775:5" pos:end="775:14">qemu_vfree</name><argument_list pos:start="775:15" pos:end="775:31">(<argument pos:start="775:16" pos:end="775:30"><expr pos:start="775:16" pos:end="775:30"><name pos:start="775:16" pos:end="775:30"><name pos:start="775:16" pos:end="775:16">s</name><operator pos:start="775:17" pos:end="775:18">-&gt;</operator><name pos:start="775:19" pos:end="775:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="777:5" pos:end="777:15">return <expr pos:start="777:12" pos:end="777:14"><name pos:start="777:12" pos:end="777:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
