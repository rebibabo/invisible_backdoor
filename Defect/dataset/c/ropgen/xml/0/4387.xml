<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4387.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">qmp_change_backing_file</name><parameter_list pos:start="1:29" pos:end="7:42">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">device</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:56"><decl pos:start="3:30" pos:end="3:56"><type pos:start="3:30" pos:end="3:56"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:56">image_node_name</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:53"><decl pos:start="5:30" pos:end="5:53"><type pos:start="5:30" pos:end="5:53"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:53">backing_file</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:41"><decl pos:start="7:30" pos:end="7:41"><type pos:start="7:30" pos:end="7:41"><name pos:start="7:30" pos:end="7:34">Error</name> <modifier pos:start="7:36" pos:end="7:36">*</modifier><modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="183:1">{<block_content pos:start="11:5" pos:end="181:37">

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">BlockBackend</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:24">bs</name> <init pos:start="13:26" pos:end="13:31">= <expr pos:start="13:28" pos:end="13:31"><name pos:start="13:28" pos:end="13:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">AioContext</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:30">image_bs</name> <init pos:start="17:32" pos:end="17:37">= <expr pos:start="17:34" pos:end="17:37"><name pos:start="17:34" pos:end="17:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:11">ro</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">open_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:7">blk</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:29"><name pos:start="29:11" pos:end="29:21">blk_by_name</name><argument_list pos:start="29:22" pos:end="29:29">(<argument pos:start="29:23" pos:end="29:28"><expr pos:start="29:23" pos:end="29:28"><name pos:start="29:23" pos:end="29:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">blk</name></expr>)</condition> <block pos:start="31:15" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:15">

        <expr_stmt pos:start="33:9" pos:end="35:51"><expr pos:start="33:9" pos:end="35:50"><call pos:start="33:9" pos:end="35:50"><name pos:start="33:9" pos:end="33:17">error_set</name><argument_list pos:start="33:18" pos:end="35:50">(<argument pos:start="33:19" pos:end="33:22"><expr pos:start="33:19" pos:end="33:22"><name pos:start="33:19" pos:end="33:22">errp</name></expr></argument>, <argument pos:start="33:25" pos:end="33:52"><expr pos:start="33:25" pos:end="33:52"><name pos:start="33:25" pos:end="33:52">ERROR_CLASS_DEVICE_NOT_FOUND</name></expr></argument>,

                  <argument pos:start="35:19" pos:end="35:41"><expr pos:start="35:19" pos:end="35:41"><literal type="string" pos:start="35:19" pos:end="35:41">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="35:44" pos:end="35:49"><expr pos:start="35:44" pos:end="35:49"><name pos:start="35:44" pos:end="35:49">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:15">aio_context</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:42"><name pos:start="43:19" pos:end="43:37">blk_get_aio_context</name><argument_list pos:start="43:38" pos:end="43:42">(<argument pos:start="43:39" pos:end="43:41"><expr pos:start="43:39" pos:end="43:41"><name pos:start="43:39" pos:end="43:41">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><call pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:23">aio_context_acquire</name><argument_list pos:start="45:24" pos:end="45:36">(<argument pos:start="45:25" pos:end="45:35"><expr pos:start="45:25" pos:end="45:35"><name pos:start="45:25" pos:end="45:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:31">(<expr pos:start="49:9" pos:end="49:30"><operator pos:start="49:9" pos:end="49:9">!</operator><call pos:start="49:10" pos:end="49:30"><name pos:start="49:10" pos:end="49:25">blk_is_available</name><argument_list pos:start="49:26" pos:end="49:30">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:33" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:17">

        <expr_stmt pos:start="51:9" pos:end="51:62"><expr pos:start="51:9" pos:end="51:61"><call pos:start="51:9" pos:end="51:61"><name pos:start="51:9" pos:end="51:18">error_setg</name><argument_list pos:start="51:19" pos:end="51:61">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">errp</name></expr></argument>, <argument pos:start="51:26" pos:end="51:52"><expr pos:start="51:26" pos:end="51:52"><literal type="string" pos:start="51:26" pos:end="51:52">"Device '%s' has no medium"</literal></expr></argument>, <argument pos:start="51:55" pos:end="51:60"><expr pos:start="51:55" pos:end="51:60"><name pos:start="51:55" pos:end="51:60">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:21"><expr pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:6">bs</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:20"><name pos:start="57:10" pos:end="57:15">blk_bs</name><argument_list pos:start="57:16" pos:end="57:20">(<argument pos:start="57:17" pos:end="57:19"><expr pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:65"><expr pos:start="61:5" pos:end="61:64"><name pos:start="61:5" pos:end="61:12">image_bs</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:64"><name pos:start="61:16" pos:end="61:29">bdrv_lookup_bs</name><argument_list pos:start="61:30" pos:end="61:64">(<argument pos:start="61:31" pos:end="61:34"><expr pos:start="61:31" pos:end="61:34"><name pos:start="61:31" pos:end="61:34">NULL</name></expr></argument>, <argument pos:start="61:37" pos:end="61:51"><expr pos:start="61:37" pos:end="61:51"><name pos:start="61:37" pos:end="61:51">image_node_name</name></expr></argument>, <argument pos:start="61:54" pos:end="61:63"><expr pos:start="61:54" pos:end="61:63"><operator pos:start="61:54" pos:end="61:54">&amp;</operator><name pos:start="61:55" pos:end="61:63">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:18">(<expr pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:17">local_err</name></expr>)</condition> <block pos:start="63:20" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:17">

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><call pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:23">error_propagate</name><argument_list pos:start="65:24" pos:end="65:40">(<argument pos:start="65:25" pos:end="65:28"><expr pos:start="65:25" pos:end="65:28"><name pos:start="65:25" pos:end="65:28">errp</name></expr></argument>, <argument pos:start="65:31" pos:end="65:39"><expr pos:start="65:31" pos:end="65:39"><name pos:start="65:31" pos:end="65:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:18">(<expr pos:start="73:9" pos:end="73:17"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:17">image_bs</name></expr>)</condition> <block pos:start="73:20" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:17">

        <expr_stmt pos:start="75:9" pos:end="75:49"><expr pos:start="75:9" pos:end="75:48"><call pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="75:48">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="75:47"><expr pos:start="75:26" pos:end="75:47"><literal type="string" pos:start="75:26" pos:end="75:47">"image file not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:17">goto <name pos:start="77:14" pos:end="77:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:45">(<expr pos:start="83:9" pos:end="83:44"><call pos:start="83:9" pos:end="83:32"><name pos:start="83:9" pos:end="83:22">bdrv_find_base</name><argument_list pos:start="83:23" pos:end="83:32">(<argument pos:start="83:24" pos:end="83:31"><expr pos:start="83:24" pos:end="83:31"><name pos:start="83:24" pos:end="83:31">image_bs</name></expr></argument>)</argument_list></call> <operator pos:start="83:34" pos:end="83:35">==</operator> <name pos:start="83:37" pos:end="83:44">image_bs</name></expr>)</condition> <block pos:start="83:47" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:17">

        <expr_stmt pos:start="85:9" pos:end="87:51"><expr pos:start="85:9" pos:end="87:50"><call pos:start="85:9" pos:end="87:50"><name pos:start="85:9" pos:end="85:18">error_setg</name><argument_list pos:start="85:19" pos:end="87:50">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">errp</name></expr></argument>, <argument pos:start="85:26" pos:end="87:49"><expr pos:start="85:26" pos:end="87:49"><literal type="string" pos:start="85:26" pos:end="85:72">"not allowing backing file change on an image "</literal>

                         <literal type="string" pos:start="87:26" pos:end="87:49">"without a backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:17">goto <name pos:start="89:14" pos:end="89:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="97:70">/* even though we are not necessarily operating on bs, we need it to

     * determine if block ops are currently prohibited on the chain */</comment>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:59">(<expr pos:start="99:9" pos:end="99:58"><call pos:start="99:9" pos:end="99:58"><name pos:start="99:9" pos:end="99:26">bdrv_op_is_blocked</name><argument_list pos:start="99:27" pos:end="99:58">(<argument pos:start="99:28" pos:end="99:29"><expr pos:start="99:28" pos:end="99:29"><name pos:start="99:28" pos:end="99:29">bs</name></expr></argument>, <argument pos:start="99:32" pos:end="99:51"><expr pos:start="99:32" pos:end="99:51"><name pos:start="99:32" pos:end="99:51">BLOCK_OP_TYPE_CHANGE</name></expr></argument>, <argument pos:start="99:54" pos:end="99:57"><expr pos:start="99:54" pos:end="99:57"><name pos:start="99:54" pos:end="99:57">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:61" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:17">

        <goto pos:start="101:9" pos:end="101:17">goto <name pos:start="101:14" pos:end="101:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:28">/* final sanity check */</comment>

    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:43">(<expr pos:start="109:9" pos:end="109:42"><operator pos:start="109:9" pos:end="109:9">!</operator><call pos:start="109:10" pos:end="109:42"><name pos:start="109:10" pos:end="109:28">bdrv_chain_contains</name><argument_list pos:start="109:29" pos:end="109:42">(<argument pos:start="109:30" pos:end="109:31"><expr pos:start="109:30" pos:end="109:31"><name pos:start="109:30" pos:end="109:31">bs</name></expr></argument>, <argument pos:start="109:34" pos:end="109:41"><expr pos:start="109:34" pos:end="109:41"><name pos:start="109:34" pos:end="109:41">image_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:45" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:17">

        <expr_stmt pos:start="111:9" pos:end="113:27"><expr pos:start="111:9" pos:end="113:26"><call pos:start="111:9" pos:end="113:26"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="113:26">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:72"><expr pos:start="111:26" pos:end="111:72"><literal type="string" pos:start="111:26" pos:end="111:72">"'%s' and image file are not in the same chain"</literal></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:25"><expr pos:start="113:20" pos:end="113:25"><name pos:start="113:20" pos:end="113:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:17">goto <name pos:start="115:14" pos:end="115:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:40">/* if not r/w, reopen to make r/w */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:38"><expr pos:start="123:5" pos:end="123:37"><name pos:start="123:5" pos:end="123:14">open_flags</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <name pos:start="123:18" pos:end="123:37"><name pos:start="123:18" pos:end="123:25">image_bs</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:37">open_flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:37"><expr pos:start="125:5" pos:end="125:36"><name pos:start="125:5" pos:end="125:6">ro</name> <operator pos:start="125:8" pos:end="125:8">=</operator> <call pos:start="125:10" pos:end="125:36"><name pos:start="125:10" pos:end="125:26">bdrv_is_read_only</name><argument_list pos:start="125:27" pos:end="125:36">(<argument pos:start="125:28" pos:end="125:35"><expr pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:35">image_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="141:5"><if pos:start="129:5" pos:end="141:5">if <condition pos:start="129:8" pos:end="129:11">(<expr pos:start="129:9" pos:end="129:10"><name pos:start="129:9" pos:end="129:10">ro</name></expr>)</condition> <block pos:start="129:13" pos:end="141:5">{<block_content pos:start="131:9" pos:end="139:9">

        <expr_stmt pos:start="131:9" pos:end="131:68"><expr pos:start="131:9" pos:end="131:67"><call pos:start="131:9" pos:end="131:67"><name pos:start="131:9" pos:end="131:19">bdrv_reopen</name><argument_list pos:start="131:20" pos:end="131:67">(<argument pos:start="131:21" pos:end="131:28"><expr pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:28">image_bs</name></expr></argument>, <argument pos:start="131:31" pos:end="131:54"><expr pos:start="131:31" pos:end="131:54"><name pos:start="131:31" pos:end="131:40">open_flags</name> <operator pos:start="131:42" pos:end="131:42">|</operator> <name pos:start="131:44" pos:end="131:54">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="131:57" pos:end="131:66"><expr pos:start="131:57" pos:end="131:66"><operator pos:start="131:57" pos:end="131:57">&amp;</operator><name pos:start="131:58" pos:end="131:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:22">(<expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:21">local_err</name></expr>)</condition> <block pos:start="133:24" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:21">

            <expr_stmt pos:start="135:13" pos:end="135:45"><expr pos:start="135:13" pos:end="135:44"><call pos:start="135:13" pos:end="135:44"><name pos:start="135:13" pos:end="135:27">error_propagate</name><argument_list pos:start="135:28" pos:end="135:44">(<argument pos:start="135:29" pos:end="135:32"><expr pos:start="135:29" pos:end="135:32"><name pos:start="135:29" pos:end="135:32">errp</name></expr></argument>, <argument pos:start="135:35" pos:end="135:43"><expr pos:start="135:35" pos:end="135:43"><name pos:start="135:35" pos:end="135:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="137:13" pos:end="137:21">goto <name pos:start="137:18" pos:end="137:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="147:80"><expr pos:start="145:5" pos:end="147:79"><name pos:start="145:5" pos:end="145:7">ret</name> <operator pos:start="145:9" pos:end="145:9">=</operator> <call pos:start="145:11" pos:end="147:79"><name pos:start="145:11" pos:end="145:34">bdrv_change_backing_file</name><argument_list pos:start="145:35" pos:end="147:79">(<argument pos:start="145:36" pos:end="145:43"><expr pos:start="145:36" pos:end="145:43"><name pos:start="145:36" pos:end="145:43">image_bs</name></expr></argument>, <argument pos:start="145:46" pos:end="145:57"><expr pos:start="145:46" pos:end="145:57"><name pos:start="145:46" pos:end="145:57">backing_file</name></expr></argument>,

                               <argument pos:start="147:32" pos:end="147:78"><expr pos:start="147:32" pos:end="147:78"><ternary pos:start="147:32" pos:end="147:78"><condition pos:start="147:32" pos:end="147:46"><expr pos:start="147:32" pos:end="147:44"><name pos:start="147:32" pos:end="147:44"><name pos:start="147:32" pos:end="147:39">image_bs</name><operator pos:start="147:40" pos:end="147:41">-&gt;</operator><name pos:start="147:42" pos:end="147:44">drv</name></name></expr> ?</condition><then pos:start="147:48" pos:end="147:73"> <expr pos:start="147:48" pos:end="147:73"><name pos:start="147:48" pos:end="147:73"><name pos:start="147:48" pos:end="147:55">image_bs</name><operator pos:start="147:56" pos:end="147:57">-&gt;</operator><name pos:start="147:58" pos:end="147:60">drv</name><operator pos:start="147:61" pos:end="147:62">-&gt;</operator><name pos:start="147:63" pos:end="147:73">format_name</name></name></expr> </then><else pos:start="147:75" pos:end="147:78">: <expr pos:start="147:77" pos:end="147:78"><literal type="string" pos:start="147:77" pos:end="147:78">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="151:5" pos:end="161:5"><if pos:start="151:5" pos:end="161:5">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">&lt;</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>)</condition> <block pos:start="151:18" pos:end="161:5">{<block_content pos:start="153:9" pos:end="155:39">

        <expr_stmt pos:start="153:9" pos:end="155:39"><expr pos:start="153:9" pos:end="155:38"><call pos:start="153:9" pos:end="155:38"><name pos:start="153:9" pos:end="153:24">error_setg_errno</name><argument_list pos:start="153:25" pos:end="155:38">(<argument pos:start="153:26" pos:end="153:29"><expr pos:start="153:26" pos:end="153:29"><name pos:start="153:26" pos:end="153:29">errp</name></expr></argument>, <argument pos:start="153:32" pos:end="153:35"><expr pos:start="153:32" pos:end="153:35"><operator pos:start="153:32" pos:end="153:32">-</operator><name pos:start="153:33" pos:end="153:35">ret</name></expr></argument>, <argument pos:start="153:38" pos:end="153:76"><expr pos:start="153:38" pos:end="153:76"><literal type="string" pos:start="153:38" pos:end="153:76">"Could not change backing file to '%s'"</literal></expr></argument>,

                         <argument pos:start="155:26" pos:end="155:37"><expr pos:start="155:26" pos:end="155:37"><name pos:start="155:26" pos:end="155:37">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="157:9" pos:end="159:25">/* don't exit here, so we can try to restore open flags if

         * appropriate */</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="175:5"><if pos:start="165:5" pos:end="175:5">if <condition pos:start="165:8" pos:end="165:11">(<expr pos:start="165:9" pos:end="165:10"><name pos:start="165:9" pos:end="165:10">ro</name></expr>)</condition> <block pos:start="165:13" pos:end="175:5">{<block_content pos:start="167:9" pos:end="173:9">

        <expr_stmt pos:start="167:9" pos:end="167:54"><expr pos:start="167:9" pos:end="167:53"><call pos:start="167:9" pos:end="167:53"><name pos:start="167:9" pos:end="167:19">bdrv_reopen</name><argument_list pos:start="167:20" pos:end="167:53">(<argument pos:start="167:21" pos:end="167:28"><expr pos:start="167:21" pos:end="167:28"><name pos:start="167:21" pos:end="167:28">image_bs</name></expr></argument>, <argument pos:start="167:31" pos:end="167:40"><expr pos:start="167:31" pos:end="167:40"><name pos:start="167:31" pos:end="167:40">open_flags</name></expr></argument>, <argument pos:start="167:43" pos:end="167:52"><expr pos:start="167:43" pos:end="167:52"><operator pos:start="167:43" pos:end="167:43">&amp;</operator><name pos:start="167:44" pos:end="167:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:22">(<expr pos:start="169:13" pos:end="169:21"><name pos:start="169:13" pos:end="169:21">local_err</name></expr>)</condition> <block pos:start="169:24" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:45">

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><call pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:27">error_propagate</name><argument_list pos:start="171:28" pos:end="171:44">(<argument pos:start="171:29" pos:end="171:32"><expr pos:start="171:29" pos:end="171:32"><name pos:start="171:29" pos:end="171:32">errp</name></expr></argument>, <argument pos:start="171:35" pos:end="171:43"><expr pos:start="171:35" pos:end="171:43"><name pos:start="171:35" pos:end="171:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="171:47" pos:end="171:76">/* will preserve prior errp */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="179:1" pos:end="179:4"><name pos:start="179:1" pos:end="179:3">out</name>:</label>

    <expr_stmt pos:start="181:5" pos:end="181:37"><expr pos:start="181:5" pos:end="181:36"><call pos:start="181:5" pos:end="181:36"><name pos:start="181:5" pos:end="181:23">aio_context_release</name><argument_list pos:start="181:24" pos:end="181:36">(<argument pos:start="181:25" pos:end="181:35"><expr pos:start="181:25" pos:end="181:35"><name pos:start="181:25" pos:end="181:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
