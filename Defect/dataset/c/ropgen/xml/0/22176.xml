<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22176.c" pos:tabs="8"><function pos:start="1:1" pos:end="275:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">vfio_listener_region_add</name><parameter_list pos:start="1:37" pos:end="3:66">(<parameter pos:start="1:38" pos:end="1:61"><decl pos:start="1:38" pos:end="1:61"><type pos:start="1:38" pos:end="1:61"><name pos:start="1:38" pos:end="1:51">MemoryListener</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">listener</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:65"><decl pos:start="3:38" pos:end="3:65"><type pos:start="3:38" pos:end="3:65"><name pos:start="3:38" pos:end="3:56">MemoryRegionSection</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">section</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="275:1">{<block_content pos:start="7:5" pos:end="273:5">

    <decl_stmt pos:start="7:5" pos:end="7:79"><decl pos:start="7:5" pos:end="7:78"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOContainer</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">container</name> <init pos:start="7:30" pos:end="7:78">= <expr pos:start="7:32" pos:end="7:78"><call pos:start="7:32" pos:end="7:78"><name pos:start="7:32" pos:end="7:43">container_of</name><argument_list pos:start="7:44" pos:end="7:78">(<argument pos:start="7:45" pos:end="7:52"><expr pos:start="7:45" pos:end="7:52"><name pos:start="7:45" pos:end="7:52">listener</name></expr></argument>, <argument pos:start="7:55" pos:end="7:67"><expr pos:start="7:55" pos:end="7:67"><name pos:start="7:55" pos:end="7:67">VFIOContainer</name></expr></argument>, <argument pos:start="7:70" pos:end="7:77"><expr pos:start="7:70" pos:end="7:77"><name pos:start="7:70" pos:end="7:77">listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:15">iova</name></decl>, <decl pos:start="9:18" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:18" pos:end="9:20">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">Int128</name></type> <name pos:start="11:12" pos:end="11:16">llend</name></decl>, <decl pos:start="11:19" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:19" pos:end="11:24">llsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:15">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21">VFIOHostDMAWindow</name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:30">hostwin</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:22">hostwin_found</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:47">(<expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:37">vfio_listener_skipped_section</name><argument_list pos:start="23:38" pos:end="23:46">(<argument pos:start="23:39" pos:end="23:45"><expr pos:start="23:39" pos:end="23:45"><name pos:start="23:39" pos:end="23:45">section</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:49" pos:end="35:5">{<block_content pos:start="25:9" pos:end="33:15">

        <expr_stmt pos:start="25:9" pos:end="31:71"><expr pos:start="25:9" pos:end="31:70"><call pos:start="25:9" pos:end="31:70"><name pos:start="25:9" pos:end="25:43">trace_vfio_listener_region_add_skip</name><argument_list pos:start="25:44" pos:end="31:70">(

                <argument pos:start="27:17" pos:end="27:52"><expr pos:start="27:17" pos:end="27:52"><name pos:start="27:17" pos:end="27:52"><name pos:start="27:17" pos:end="27:23">section</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:52">offset_within_address_space</name></name></expr></argument>,

                <argument pos:start="29:17" pos:end="31:69"><expr pos:start="29:17" pos:end="31:69"><name pos:start="29:17" pos:end="29:52"><name pos:start="29:17" pos:end="29:23">section</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:52">offset_within_address_space</name></name> <operator pos:start="29:54" pos:end="29:54">+</operator>

                <call pos:start="31:17" pos:end="31:69"><name pos:start="31:17" pos:end="31:28">int128_get64</name><argument_list pos:start="31:29" pos:end="31:69">(<argument pos:start="31:30" pos:end="31:68"><expr pos:start="31:30" pos:end="31:68"><call pos:start="31:30" pos:end="31:68"><name pos:start="31:30" pos:end="31:39">int128_sub</name><argument_list pos:start="31:40" pos:end="31:68">(<argument pos:start="31:41" pos:end="31:53"><expr pos:start="31:41" pos:end="31:53"><name pos:start="31:41" pos:end="31:53"><name pos:start="31:41" pos:end="31:47">section</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:53">size</name></name></expr></argument>, <argument pos:start="31:56" pos:end="31:67"><expr pos:start="31:56" pos:end="31:67"><call pos:start="31:56" pos:end="31:67"><name pos:start="31:56" pos:end="31:65">int128_one</name><argument_list pos:start="31:66" pos:end="31:67">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="41:70">(<expr pos:start="39:9" pos:end="41:69"><call pos:start="39:9" pos:end="41:69"><name pos:start="39:9" pos:end="39:16">unlikely</name><argument_list pos:start="39:17" pos:end="41:69">(<argument pos:start="39:18" pos:end="41:68"><expr pos:start="39:18" pos:end="41:68"><operator pos:start="39:18" pos:end="39:18">(</operator><name pos:start="39:19" pos:end="39:54"><name pos:start="39:19" pos:end="39:25">section</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:54">offset_within_address_space</name></name> <operator pos:start="39:56" pos:end="39:56">&amp;</operator> <operator pos:start="39:58" pos:end="39:58">~</operator><name pos:start="39:59" pos:end="39:74">TARGET_PAGE_MASK</name><operator pos:start="39:75" pos:end="39:75">)</operator> <operator pos:start="39:77" pos:end="39:78">!=</operator>

                 <operator pos:start="41:18" pos:end="41:18">(</operator><name pos:start="41:19" pos:end="41:47"><name pos:start="41:19" pos:end="41:25">section</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:47">offset_within_region</name></name> <operator pos:start="41:49" pos:end="41:49">&amp;</operator> <operator pos:start="41:51" pos:end="41:51">~</operator><name pos:start="41:52" pos:end="41:67">TARGET_PAGE_MASK</name><operator pos:start="41:68" pos:end="41:68">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:72" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:63"><expr pos:start="43:9" pos:end="43:62"><call pos:start="43:9" pos:end="43:62"><name pos:start="43:9" pos:end="43:20">error_report</name><argument_list pos:start="43:21" pos:end="43:62">(<argument pos:start="43:22" pos:end="43:51"><expr pos:start="43:22" pos:end="43:51"><literal type="string" pos:start="43:22" pos:end="43:51">"%s received unaligned region"</literal></expr></argument>, <argument pos:start="43:54" pos:end="43:61"><expr pos:start="43:54" pos:end="43:61"><name pos:start="43:54" pos:end="43:61">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:8">iova</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:66"><name pos:start="51:12" pos:end="51:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="51:29" pos:end="51:66">(<argument pos:start="51:30" pos:end="51:65"><expr pos:start="51:30" pos:end="51:65"><name pos:start="51:30" pos:end="51:65"><name pos:start="51:30" pos:end="51:36">section</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:65">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:64"><expr pos:start="53:5" pos:end="53:63"><name pos:start="53:5" pos:end="53:9">llend</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:63"><name pos:start="53:13" pos:end="53:25">int128_make64</name><argument_list pos:start="53:26" pos:end="53:63">(<argument pos:start="53:27" pos:end="53:62"><expr pos:start="53:27" pos:end="53:62"><name pos:start="53:27" pos:end="53:62"><name pos:start="53:27" pos:end="53:33">section</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:62">offset_within_address_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:9">llend</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:22">int128_add</name><argument_list pos:start="55:23" pos:end="55:44">(<argument pos:start="55:24" pos:end="55:28"><expr pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:28">llend</name></expr></argument>, <argument pos:start="55:31" pos:end="55:43"><expr pos:start="55:31" pos:end="55:43"><name pos:start="55:31" pos:end="55:43"><name pos:start="55:31" pos:end="55:37">section</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:63"><expr pos:start="57:5" pos:end="57:62"><name pos:start="57:5" pos:end="57:9">llend</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:62"><name pos:start="57:13" pos:end="57:22">int128_and</name><argument_list pos:start="57:23" pos:end="57:62">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">llend</name></expr></argument>, <argument pos:start="57:31" pos:end="57:61"><expr pos:start="57:31" pos:end="57:61"><call pos:start="57:31" pos:end="57:61"><name pos:start="57:31" pos:end="57:43">int128_exts64</name><argument_list pos:start="57:44" pos:end="57:61">(<argument pos:start="57:45" pos:end="57:60"><expr pos:start="57:45" pos:end="57:60"><name pos:start="57:45" pos:end="57:60">TARGET_PAGE_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:46">(<expr pos:start="61:9" pos:end="61:45"><call pos:start="61:9" pos:end="61:45"><name pos:start="61:9" pos:end="61:17">int128_ge</name><argument_list pos:start="61:18" pos:end="61:45">(<argument pos:start="61:19" pos:end="61:37"><expr pos:start="61:19" pos:end="61:37"><call pos:start="61:19" pos:end="61:37"><name pos:start="61:19" pos:end="61:31">int128_make64</name><argument_list pos:start="61:32" pos:end="61:37">(<argument pos:start="61:33" pos:end="61:36"><expr pos:start="61:33" pos:end="61:36"><name pos:start="61:33" pos:end="61:36">iova</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:40" pos:end="61:44"><expr pos:start="61:40" pos:end="61:44"><name pos:start="61:40" pos:end="61:44">llend</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:48" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:15">

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:56"><expr pos:start="67:5" pos:end="67:55"><name pos:start="67:5" pos:end="67:7">end</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:55"><name pos:start="67:11" pos:end="67:22">int128_get64</name><argument_list pos:start="67:23" pos:end="67:55">(<argument pos:start="67:24" pos:end="67:54"><expr pos:start="67:24" pos:end="67:54"><call pos:start="67:24" pos:end="67:54"><name pos:start="67:24" pos:end="67:33">int128_sub</name><argument_list pos:start="67:34" pos:end="67:54">(<argument pos:start="67:35" pos:end="67:39"><expr pos:start="67:35" pos:end="67:39"><name pos:start="67:35" pos:end="67:39">llend</name></expr></argument>, <argument pos:start="67:42" pos:end="67:53"><expr pos:start="67:42" pos:end="67:53"><call pos:start="67:42" pos:end="67:53"><name pos:start="67:42" pos:end="67:51">int128_one</name><argument_list pos:start="67:52" pos:end="67:53">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="117:5"><if pos:start="71:5" pos:end="117:5">if <condition pos:start="71:8" pos:end="71:57">(<expr pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:17">container</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:29">iommu_type</name></name> <operator pos:start="71:31" pos:end="71:32">==</operator> <name pos:start="71:34" pos:end="71:56">VFIO_SPAPR_TCE_v2_IOMMU</name></expr>)</condition> <block pos:start="71:59" pos:end="117:5">{<block_content pos:start="73:9" pos:end="115:67">

        <decl_stmt pos:start="73:9" pos:end="73:35"><decl pos:start="73:9" pos:end="73:34"><type pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:25">VFIOHostDMAWindow</name> <modifier pos:start="73:27" pos:end="73:27">*</modifier></type><name pos:start="73:28" pos:end="73:34">hostwin</name></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:26"><decl pos:start="75:9" pos:end="75:25"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:14">hwaddr</name></type> <name pos:start="75:16" pos:end="75:21">pgsize</name> <init pos:start="75:23" pos:end="75:25">= <expr pos:start="75:25" pos:end="75:25"><literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="79:9" pos:end="79:76">/* For now intersections are not allowed, we may relax this later */</comment>

        <macro pos:start="81:9" pos:end="81:70"><name pos:start="81:9" pos:end="81:21">QLIST_FOREACH</name><argument_list pos:start="81:22" pos:end="81:70">(<argument pos:start="81:23" pos:end="81:29">hostwin</argument>, <argument pos:start="81:32" pos:end="81:55">&amp;container-&gt;hostwin_list</argument>, <argument pos:start="81:58" pos:end="81:69">hostwin_next</argument>)</argument_list></macro> <block pos:start="81:72" pos:end="97:9">{<block_content pos:start="83:13" pos:end="95:13">

            <if_stmt pos:start="83:13" pos:end="95:13"><if pos:start="83:13" pos:end="95:13">if <condition pos:start="83:16" pos:end="89:60">(<expr pos:start="83:17" pos:end="89:59"><call pos:start="83:17" pos:end="89:59"><name pos:start="83:17" pos:end="83:30">ranges_overlap</name><argument_list pos:start="83:31" pos:end="89:59">(<argument pos:start="83:32" pos:end="83:48"><expr pos:start="83:32" pos:end="83:48"><name pos:start="83:32" pos:end="83:48"><name pos:start="83:32" pos:end="83:38">hostwin</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:48">min_iova</name></name></expr></argument>,

                               <argument pos:start="85:32" pos:end="85:72"><expr pos:start="85:32" pos:end="85:72"><name pos:start="85:32" pos:end="85:48"><name pos:start="85:32" pos:end="85:38">hostwin</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:48">max_iova</name></name> <operator pos:start="85:50" pos:end="85:50">-</operator> <name pos:start="85:52" pos:end="85:68"><name pos:start="85:52" pos:end="85:58">hostwin</name><operator pos:start="85:59" pos:end="85:60">-&gt;</operator><name pos:start="85:61" pos:end="85:68">min_iova</name></name> <operator pos:start="85:70" pos:end="85:70">+</operator> <literal type="number" pos:start="85:72" pos:end="85:72">1</literal></expr></argument>,

                               <argument pos:start="87:32" pos:end="87:67"><expr pos:start="87:32" pos:end="87:67"><name pos:start="87:32" pos:end="87:67"><name pos:start="87:32" pos:end="87:38">section</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:67">offset_within_address_space</name></name></expr></argument>,

                               <argument pos:start="89:32" pos:end="89:58"><expr pos:start="89:32" pos:end="89:58"><call pos:start="89:32" pos:end="89:58"><name pos:start="89:32" pos:end="89:43">int128_get64</name><argument_list pos:start="89:44" pos:end="89:58">(<argument pos:start="89:45" pos:end="89:57"><expr pos:start="89:45" pos:end="89:57"><name pos:start="89:45" pos:end="89:57"><name pos:start="89:45" pos:end="89:51">section</name><operator pos:start="89:52" pos:end="89:53">-&gt;</operator><name pos:start="89:54" pos:end="89:57">size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:62" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:26">

                <expr_stmt pos:start="91:17" pos:end="91:25"><expr pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:19">ret</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <operator pos:start="91:23" pos:end="91:23">-</operator><literal type="number" pos:start="91:24" pos:end="91:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="93:17" pos:end="93:26">goto <name pos:start="93:22" pos:end="93:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <expr_stmt pos:start="101:9" pos:end="101:68"><expr pos:start="101:9" pos:end="101:67"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:67"><name pos:start="101:15" pos:end="101:38">vfio_spapr_create_window</name><argument_list pos:start="101:39" pos:end="101:67">(<argument pos:start="101:40" pos:end="101:48"><expr pos:start="101:40" pos:end="101:48"><name pos:start="101:40" pos:end="101:48">container</name></expr></argument>, <argument pos:start="101:51" pos:end="101:57"><expr pos:start="101:51" pos:end="101:57"><name pos:start="101:51" pos:end="101:57">section</name></expr></argument>, <argument pos:start="101:60" pos:end="101:66"><expr pos:start="101:60" pos:end="101:66"><operator pos:start="101:60" pos:end="101:60">&amp;</operator><name pos:start="101:61" pos:end="101:66">pgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:16">(<expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">ret</name></expr>)</condition> <block pos:start="103:18" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:22">

            <goto pos:start="105:13" pos:end="105:22">goto <name pos:start="105:18" pos:end="105:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="115:67"><expr pos:start="111:9" pos:end="115:66"><call pos:start="111:9" pos:end="115:66"><name pos:start="111:9" pos:end="111:25">vfio_host_win_add</name><argument_list pos:start="111:26" pos:end="115:66">(<argument pos:start="111:27" pos:end="111:35"><expr pos:start="111:27" pos:end="111:35"><name pos:start="111:27" pos:end="111:35">container</name></expr></argument>, <argument pos:start="111:38" pos:end="111:73"><expr pos:start="111:38" pos:end="111:73"><name pos:start="111:38" pos:end="111:73"><name pos:start="111:38" pos:end="111:44">section</name><operator pos:start="111:45" pos:end="111:46">-&gt;</operator><name pos:start="111:47" pos:end="111:73">offset_within_address_space</name></name></expr></argument>,

                          <argument pos:start="113:27" pos:end="115:57"><expr pos:start="113:27" pos:end="115:57"><name pos:start="113:27" pos:end="113:62"><name pos:start="113:27" pos:end="113:33">section</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:62">offset_within_address_space</name></name> <operator pos:start="113:64" pos:end="113:64">+</operator>

                          <call pos:start="115:27" pos:end="115:53"><name pos:start="115:27" pos:end="115:38">int128_get64</name><argument_list pos:start="115:39" pos:end="115:53">(<argument pos:start="115:40" pos:end="115:52"><expr pos:start="115:40" pos:end="115:52"><name pos:start="115:40" pos:end="115:52"><name pos:start="115:40" pos:end="115:46">section</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:52">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:55" pos:end="115:55">-</operator> <literal type="number" pos:start="115:57" pos:end="115:57">1</literal></expr></argument>, <argument pos:start="115:60" pos:end="115:65"><expr pos:start="115:60" pos:end="115:65"><name pos:start="115:60" pos:end="115:65">pgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:26"><expr pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:17">hostwin_found</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:25">false</name></expr>;</expr_stmt>

    <macro pos:start="123:5" pos:end="123:66"><name pos:start="123:5" pos:end="123:17">QLIST_FOREACH</name><argument_list pos:start="123:18" pos:end="123:66">(<argument pos:start="123:19" pos:end="123:25">hostwin</argument>, <argument pos:start="123:28" pos:end="123:51">&amp;container-&gt;hostwin_list</argument>, <argument pos:start="123:54" pos:end="123:65">hostwin_next</argument>)</argument_list></macro> <block pos:start="123:68" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:9">

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:66">(<expr pos:start="125:13" pos:end="125:65"><name pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:19">hostwin</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:29">min_iova</name></name> <operator pos:start="125:31" pos:end="125:32">&lt;=</operator> <name pos:start="125:34" pos:end="125:37">iova</name> <operator pos:start="125:39" pos:end="125:40">&amp;&amp;</operator> <name pos:start="125:42" pos:end="125:44">end</name> <operator pos:start="125:46" pos:end="125:47">&lt;=</operator> <name pos:start="125:49" pos:end="125:65"><name pos:start="125:49" pos:end="125:55">hostwin</name><operator pos:start="125:56" pos:end="125:57">-&gt;</operator><name pos:start="125:58" pos:end="125:65">max_iova</name></name></expr>)</condition> <block pos:start="125:68" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:18">

            <expr_stmt pos:start="127:13" pos:end="127:33"><expr pos:start="127:13" pos:end="127:32"><name pos:start="127:13" pos:end="127:25">hostwin_found</name> <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:32">true</name></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <if_stmt pos:start="137:5" pos:end="149:5"><if pos:start="137:5" pos:end="149:5">if <condition pos:start="137:8" pos:end="137:23">(<expr pos:start="137:9" pos:end="137:22"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:22">hostwin_found</name></expr>)</condition> <block pos:start="137:25" pos:end="149:5">{<block_content pos:start="139:9" pos:end="147:18">

        <expr_stmt pos:start="139:9" pos:end="143:43"><expr pos:start="139:9" pos:end="143:42"><call pos:start="139:9" pos:end="143:42"><name pos:start="139:9" pos:end="139:20">error_report</name><argument_list pos:start="139:21" pos:end="143:42">(<argument pos:start="139:22" pos:end="141:56"><expr pos:start="139:22" pos:end="141:56"><literal type="string" pos:start="139:22" pos:end="139:75">"vfio: IOMMU container %p can't map guest IOVA region"</literal>

                     <literal type="string" pos:start="141:22" pos:end="141:27">" 0x%"</literal><name pos:start="141:28" pos:end="141:38">HWADDR_PRIx</name><literal type="string" pos:start="141:39" pos:end="141:45">"..0x%"</literal><name pos:start="141:46" pos:end="141:56">HWADDR_PRIx</name></expr></argument>,

                     <argument pos:start="143:22" pos:end="143:30"><expr pos:start="143:22" pos:end="143:30"><name pos:start="143:22" pos:end="143:30">container</name></expr></argument>, <argument pos:start="143:33" pos:end="143:36"><expr pos:start="143:33" pos:end="143:36"><name pos:start="143:33" pos:end="143:36">iova</name></expr></argument>, <argument pos:start="143:39" pos:end="143:41"><expr pos:start="143:39" pos:end="143:41"><name pos:start="143:39" pos:end="143:41">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:22"><expr pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <operator pos:start="145:15" pos:end="145:15">-</operator><name pos:start="145:16" pos:end="145:21">EFAULT</name></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:18">goto <name pos:start="147:14" pos:end="147:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:35"><expr pos:start="153:5" pos:end="153:34"><call pos:start="153:5" pos:end="153:34"><name pos:start="153:5" pos:end="153:21">memory_region_ref</name><argument_list pos:start="153:22" pos:end="153:34">(<argument pos:start="153:23" pos:end="153:33"><expr pos:start="153:23" pos:end="153:33"><name pos:start="153:23" pos:end="153:33"><name pos:start="153:23" pos:end="153:29">section</name><operator pos:start="153:30" pos:end="153:31">-&gt;</operator><name pos:start="153:32" pos:end="153:33">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="203:5"><if pos:start="157:5" pos:end="203:5">if <condition pos:start="157:8" pos:end="157:44">(<expr pos:start="157:9" pos:end="157:43"><call pos:start="157:9" pos:end="157:43"><name pos:start="157:9" pos:end="157:30">memory_region_is_iommu</name><argument_list pos:start="157:31" pos:end="157:43">(<argument pos:start="157:32" pos:end="157:42"><expr pos:start="157:32" pos:end="157:42"><name pos:start="157:32" pos:end="157:42"><name pos:start="157:32" pos:end="157:38">section</name><operator pos:start="157:39" pos:end="157:40">-&gt;</operator><name pos:start="157:41" pos:end="157:42">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:46" pos:end="203:5">{<block_content pos:start="159:9" pos:end="201:15">

        <decl_stmt pos:start="159:9" pos:end="159:31"><decl pos:start="159:9" pos:end="159:30"><type pos:start="159:9" pos:end="159:24"><name pos:start="159:9" pos:end="159:22">VFIOGuestIOMMU</name> <modifier pos:start="159:24" pos:end="159:24">*</modifier></type><name pos:start="159:25" pos:end="159:30">giommu</name></decl>;</decl_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:56"><expr pos:start="163:9" pos:end="163:55"><call pos:start="163:9" pos:end="163:55"><name pos:start="163:9" pos:end="163:44">trace_vfio_listener_region_add_iommu</name><argument_list pos:start="163:45" pos:end="163:55">(<argument pos:start="163:46" pos:end="163:49"><expr pos:start="163:46" pos:end="163:49"><name pos:start="163:46" pos:end="163:49">iova</name></expr></argument>, <argument pos:start="163:52" pos:end="163:54"><expr pos:start="163:52" pos:end="163:54"><name pos:start="163:52" pos:end="163:54">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="165:9" pos:end="175:11">/*

         * FIXME: For VFIO iommu types which have KVM acceleration to

         * avoid bouncing all map/unmaps through qemu this way, this

         * would be the right place to wire that up (tell the KVM

         * device emulation the VFIO iommu handles to use).

         */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:44"><expr pos:start="177:9" pos:end="177:43"><name pos:start="177:9" pos:end="177:14">giommu</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <call pos:start="177:18" pos:end="177:43"><name pos:start="177:18" pos:end="177:26">g_malloc0</name><argument_list pos:start="177:27" pos:end="177:43">(<argument pos:start="177:28" pos:end="177:42"><expr pos:start="177:28" pos:end="177:42"><sizeof pos:start="177:28" pos:end="177:42">sizeof<argument_list pos:start="177:34" pos:end="177:42">(<argument pos:start="177:35" pos:end="177:41"><expr pos:start="177:35" pos:end="177:41"><operator pos:start="177:35" pos:end="177:35">*</operator><name pos:start="177:36" pos:end="177:41">giommu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:36"><expr pos:start="179:9" pos:end="179:35"><name pos:start="179:9" pos:end="179:21"><name pos:start="179:9" pos:end="179:14">giommu</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:21">iommu</name></name> <operator pos:start="179:23" pos:end="179:23">=</operator> <name pos:start="179:25" pos:end="179:35"><name pos:start="179:25" pos:end="179:31">section</name><operator pos:start="179:32" pos:end="179:33">-&gt;</operator><name pos:start="179:34" pos:end="179:35">mr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="183:61"><expr pos:start="181:9" pos:end="183:60"><name pos:start="181:9" pos:end="181:28"><name pos:start="181:9" pos:end="181:14">giommu</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:28">iommu_offset</name></name> <operator pos:start="181:30" pos:end="181:30">=</operator> <name pos:start="181:32" pos:end="181:67"><name pos:start="181:32" pos:end="181:38">section</name><operator pos:start="181:39" pos:end="181:40">-&gt;</operator><name pos:start="181:41" pos:end="181:67">offset_within_address_space</name></name> <operator pos:start="181:69" pos:end="181:69">-</operator>

                               <name pos:start="183:32" pos:end="183:60"><name pos:start="183:32" pos:end="183:38">section</name><operator pos:start="183:39" pos:end="183:40">-&gt;</operator><name pos:start="183:41" pos:end="183:60">offset_within_region</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:38"><expr pos:start="185:9" pos:end="185:37"><name pos:start="185:9" pos:end="185:25"><name pos:start="185:9" pos:end="185:14">giommu</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:25">container</name></name> <operator pos:start="185:27" pos:end="185:27">=</operator> <name pos:start="185:29" pos:end="185:37">container</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:49"><expr pos:start="187:9" pos:end="187:48"><name pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:14">giommu</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:17">n</name><operator pos:start="187:18" pos:end="187:18">.</operator><name pos:start="187:19" pos:end="187:24">notify</name></name> <operator pos:start="187:26" pos:end="187:26">=</operator> <name pos:start="187:28" pos:end="187:48">vfio_iommu_map_notify</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:54"><expr pos:start="189:9" pos:end="189:53"><name pos:start="189:9" pos:end="189:32"><name pos:start="189:9" pos:end="189:14">giommu</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:17">n</name><operator pos:start="189:18" pos:end="189:18">.</operator><name pos:start="189:19" pos:end="189:32">notifier_flags</name></name> <operator pos:start="189:34" pos:end="189:34">=</operator> <name pos:start="189:36" pos:end="189:53">IOMMU_NOTIFIER_ALL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:72"><expr pos:start="191:9" pos:end="191:71"><call pos:start="191:9" pos:end="191:71"><name pos:start="191:9" pos:end="191:25">QLIST_INSERT_HEAD</name><argument_list pos:start="191:26" pos:end="191:71">(<argument pos:start="191:27" pos:end="191:49"><expr pos:start="191:27" pos:end="191:49"><operator pos:start="191:27" pos:end="191:27">&amp;</operator><name pos:start="191:28" pos:end="191:49"><name pos:start="191:28" pos:end="191:36">container</name><operator pos:start="191:37" pos:end="191:38">-&gt;</operator><name pos:start="191:39" pos:end="191:49">giommu_list</name></name></expr></argument>, <argument pos:start="191:52" pos:end="191:57"><expr pos:start="191:52" pos:end="191:57"><name pos:start="191:52" pos:end="191:57">giommu</name></expr></argument>, <argument pos:start="191:60" pos:end="191:70"><expr pos:start="191:60" pos:end="191:70"><name pos:start="191:60" pos:end="191:70">giommu_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:73"><expr pos:start="195:9" pos:end="195:72"><call pos:start="195:9" pos:end="195:72"><name pos:start="195:9" pos:end="195:45">memory_region_register_iommu_notifier</name><argument_list pos:start="195:46" pos:end="195:72">(<argument pos:start="195:47" pos:end="195:59"><expr pos:start="195:47" pos:end="195:59"><name pos:start="195:47" pos:end="195:59"><name pos:start="195:47" pos:end="195:52">giommu</name><operator pos:start="195:53" pos:end="195:54">-&gt;</operator><name pos:start="195:55" pos:end="195:59">iommu</name></name></expr></argument>, <argument pos:start="195:62" pos:end="195:71"><expr pos:start="195:62" pos:end="195:71"><operator pos:start="195:62" pos:end="195:62">&amp;</operator><name pos:start="195:63" pos:end="195:71"><name pos:start="195:63" pos:end="195:68">giommu</name><operator pos:start="195:69" pos:end="195:70">-&gt;</operator><name pos:start="195:71" pos:end="195:71">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:69"><expr pos:start="197:9" pos:end="197:68"><call pos:start="197:9" pos:end="197:68"><name pos:start="197:9" pos:end="197:34">memory_region_iommu_replay</name><argument_list pos:start="197:35" pos:end="197:68">(<argument pos:start="197:36" pos:end="197:48"><expr pos:start="197:36" pos:end="197:48"><name pos:start="197:36" pos:end="197:48"><name pos:start="197:36" pos:end="197:41">giommu</name><operator pos:start="197:42" pos:end="197:43">-&gt;</operator><name pos:start="197:44" pos:end="197:48">iommu</name></name></expr></argument>, <argument pos:start="197:51" pos:end="197:60"><expr pos:start="197:51" pos:end="197:60"><operator pos:start="197:51" pos:end="197:51">&amp;</operator><name pos:start="197:52" pos:end="197:60"><name pos:start="197:52" pos:end="197:57">giommu</name><operator pos:start="197:58" pos:end="197:59">-&gt;</operator><name pos:start="197:60" pos:end="197:60">n</name></name></expr></argument>, <argument pos:start="197:63" pos:end="197:67"><expr pos:start="197:63" pos:end="197:67"><name pos:start="197:63" pos:end="197:67">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="201:9" pos:end="201:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:69">/* Here we assume that memory_region_is_ram(section-&gt;mr)==true */</comment>



    <expr_stmt pos:start="211:5" pos:end="215:58"><expr pos:start="211:5" pos:end="215:57"><name pos:start="211:5" pos:end="211:9">vaddr</name> <operator pos:start="211:11" pos:end="211:11">=</operator> <call pos:start="211:13" pos:end="211:50"><name pos:start="211:13" pos:end="211:37">memory_region_get_ram_ptr</name><argument_list pos:start="211:38" pos:end="211:50">(<argument pos:start="211:39" pos:end="211:49"><expr pos:start="211:39" pos:end="211:49"><name pos:start="211:39" pos:end="211:49"><name pos:start="211:39" pos:end="211:45">section</name><operator pos:start="211:46" pos:end="211:47">-&gt;</operator><name pos:start="211:48" pos:end="211:49">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="211:52" pos:end="211:52">+</operator>

            <name pos:start="213:13" pos:end="213:41"><name pos:start="213:13" pos:end="213:19">section</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:41">offset_within_region</name></name> <operator pos:start="213:43" pos:end="213:43">+</operator>

            <operator pos:start="215:13" pos:end="215:13">(</operator><name pos:start="215:14" pos:end="215:17">iova</name> <operator pos:start="215:19" pos:end="215:19">-</operator> <name pos:start="215:21" pos:end="215:56"><name pos:start="215:21" pos:end="215:27">section</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:56">offset_within_address_space</name></name><operator pos:start="215:57" pos:end="215:57">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:57"><expr pos:start="219:5" pos:end="219:56"><call pos:start="219:5" pos:end="219:56"><name pos:start="219:5" pos:end="219:38">trace_vfio_listener_region_add_ram</name><argument_list pos:start="219:39" pos:end="219:56">(<argument pos:start="219:40" pos:end="219:43"><expr pos:start="219:40" pos:end="219:43"><name pos:start="219:40" pos:end="219:43">iova</name></expr></argument>, <argument pos:start="219:46" pos:end="219:48"><expr pos:start="219:46" pos:end="219:48"><name pos:start="219:46" pos:end="219:48">end</name></expr></argument>, <argument pos:start="219:51" pos:end="219:55"><expr pos:start="219:51" pos:end="219:55"><name pos:start="219:51" pos:end="219:55">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:52"><expr pos:start="223:5" pos:end="223:51"><name pos:start="223:5" pos:end="223:10">llsize</name> <operator pos:start="223:12" pos:end="223:12">=</operator> <call pos:start="223:14" pos:end="223:51"><name pos:start="223:14" pos:end="223:23">int128_sub</name><argument_list pos:start="223:24" pos:end="223:51">(<argument pos:start="223:25" pos:end="223:29"><expr pos:start="223:25" pos:end="223:29"><name pos:start="223:25" pos:end="223:29">llend</name></expr></argument>, <argument pos:start="223:32" pos:end="223:50"><expr pos:start="223:32" pos:end="223:50"><call pos:start="223:32" pos:end="223:50"><name pos:start="223:32" pos:end="223:44">int128_make64</name><argument_list pos:start="223:45" pos:end="223:50">(<argument pos:start="223:46" pos:end="223:49"><expr pos:start="223:46" pos:end="223:49"><name pos:start="223:46" pos:end="223:49">iova</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="227:5" pos:end="229:49"><expr pos:start="227:5" pos:end="229:48"><name pos:start="227:5" pos:end="227:7">ret</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="229:48"><name pos:start="227:11" pos:end="227:22">vfio_dma_map</name><argument_list pos:start="227:23" pos:end="229:48">(<argument pos:start="227:24" pos:end="227:32"><expr pos:start="227:24" pos:end="227:32"><name pos:start="227:24" pos:end="227:32">container</name></expr></argument>, <argument pos:start="227:35" pos:end="227:38"><expr pos:start="227:35" pos:end="227:38"><name pos:start="227:35" pos:end="227:38">iova</name></expr></argument>, <argument pos:start="227:41" pos:end="227:60"><expr pos:start="227:41" pos:end="227:60"><call pos:start="227:41" pos:end="227:60"><name pos:start="227:41" pos:end="227:52">int128_get64</name><argument_list pos:start="227:53" pos:end="227:60">(<argument pos:start="227:54" pos:end="227:59"><expr pos:start="227:54" pos:end="227:59"><name pos:start="227:54" pos:end="227:59">llsize</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="229:24" pos:end="229:28"><expr pos:start="229:24" pos:end="229:28"><name pos:start="229:24" pos:end="229:28">vaddr</name></expr></argument>, <argument pos:start="229:31" pos:end="229:47"><expr pos:start="229:31" pos:end="229:47"><name pos:start="229:31" pos:end="229:47"><name pos:start="229:31" pos:end="229:37">section</name><operator pos:start="229:38" pos:end="229:39">-&gt;</operator><name pos:start="229:40" pos:end="229:47">readonly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="241:5"><if pos:start="231:5" pos:end="241:5">if <condition pos:start="231:8" pos:end="231:12">(<expr pos:start="231:9" pos:end="231:11"><name pos:start="231:9" pos:end="231:11">ret</name></expr>)</condition> <block pos:start="231:14" pos:end="241:5">{<block_content pos:start="233:9" pos:end="239:18">

        <expr_stmt pos:start="233:9" pos:end="237:72"><expr pos:start="233:9" pos:end="237:71"><call pos:start="233:9" pos:end="237:71"><name pos:start="233:9" pos:end="233:20">error_report</name><argument_list pos:start="233:21" pos:end="237:71">(<argument pos:start="233:22" pos:end="235:54"><expr pos:start="233:22" pos:end="235:54"><literal type="string" pos:start="233:22" pos:end="233:43">"vfio_dma_map(%p, 0x%"</literal><name pos:start="233:44" pos:end="233:54">HWADDR_PRIx</name><literal type="string" pos:start="233:55" pos:end="233:58">", "</literal>

                     <literal type="string" pos:start="235:22" pos:end="235:26">"0x%"</literal><name pos:start="235:27" pos:end="235:37">HWADDR_PRIx</name><literal type="string" pos:start="235:38" pos:end="235:54">", %p) = %d (%m)"</literal></expr></argument>,

                     <argument pos:start="237:22" pos:end="237:30"><expr pos:start="237:22" pos:end="237:30"><name pos:start="237:22" pos:end="237:30">container</name></expr></argument>, <argument pos:start="237:33" pos:end="237:36"><expr pos:start="237:33" pos:end="237:36"><name pos:start="237:33" pos:end="237:36">iova</name></expr></argument>, <argument pos:start="237:39" pos:end="237:58"><expr pos:start="237:39" pos:end="237:58"><call pos:start="237:39" pos:end="237:58"><name pos:start="237:39" pos:end="237:50">int128_get64</name><argument_list pos:start="237:51" pos:end="237:58">(<argument pos:start="237:52" pos:end="237:57"><expr pos:start="237:52" pos:end="237:57"><name pos:start="237:52" pos:end="237:57">llsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="237:61" pos:end="237:65"><expr pos:start="237:61" pos:end="237:65"><name pos:start="237:61" pos:end="237:65">vaddr</name></expr></argument>, <argument pos:start="237:68" pos:end="237:70"><expr pos:start="237:68" pos:end="237:70"><name pos:start="237:68" pos:end="237:70">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="239:9" pos:end="239:18">goto <name pos:start="239:14" pos:end="239:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="245:5" pos:end="245:11">return;</return>



<label pos:start="249:1" pos:end="249:5"><name pos:start="249:1" pos:end="249:4">fail</name>:</label>

    <comment type="block" pos:start="251:5" pos:end="259:7">/*

     * On the initfn path, store the first error in the container so we

     * can gracefully fail.  Runtime, there's not much we can do other

     * than throw a hardware error.

     */</comment>

    <if_stmt pos:start="261:5" pos:end="273:5"><if pos:start="261:5" pos:end="269:5">if <condition pos:start="261:8" pos:end="261:32">(<expr pos:start="261:9" pos:end="261:31"><operator pos:start="261:9" pos:end="261:9">!</operator><name pos:start="261:10" pos:end="261:31"><name pos:start="261:10" pos:end="261:18">container</name><operator pos:start="261:19" pos:end="261:20">-&gt;</operator><name pos:start="261:21" pos:end="261:31">initialized</name></name></expr>)</condition> <block pos:start="261:34" pos:end="269:5">{<block_content pos:start="263:9" pos:end="267:9">

        <if_stmt pos:start="263:9" pos:end="267:9"><if pos:start="263:9" pos:end="267:9">if <condition pos:start="263:12" pos:end="263:30">(<expr pos:start="263:13" pos:end="263:29"><operator pos:start="263:13" pos:end="263:13">!</operator><name pos:start="263:14" pos:end="263:29"><name pos:start="263:14" pos:end="263:22">container</name><operator pos:start="263:23" pos:end="263:24">-&gt;</operator><name pos:start="263:25" pos:end="263:29">error</name></name></expr>)</condition> <block pos:start="263:32" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:35">

            <expr_stmt pos:start="265:13" pos:end="265:35"><expr pos:start="265:13" pos:end="265:34"><name pos:start="265:13" pos:end="265:28"><name pos:start="265:13" pos:end="265:21">container</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:28">error</name></name> <operator pos:start="265:30" pos:end="265:30">=</operator> <name pos:start="265:32" pos:end="265:34">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="269:7" pos:end="273:5">else <block pos:start="269:12" pos:end="273:5">{<block_content pos:start="271:9" pos:end="271:65">

        <expr_stmt pos:start="271:9" pos:end="271:65"><expr pos:start="271:9" pos:end="271:64"><call pos:start="271:9" pos:end="271:64"><name pos:start="271:9" pos:end="271:16">hw_error</name><argument_list pos:start="271:17" pos:end="271:64">(<argument pos:start="271:18" pos:end="271:63"><expr pos:start="271:18" pos:end="271:63"><literal type="string" pos:start="271:18" pos:end="271:63">"vfio: DMA mapping failed, unable to continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
