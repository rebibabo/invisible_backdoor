<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11759.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">slavio_serial_mem_writeb</name><parameter_list pos:start="1:37" pos:end="1:89">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:41">void</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">opaque</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:74"><decl pos:start="1:52" pos:end="1:74"><type pos:start="1:52" pos:end="1:74"><name pos:start="1:52" pos:end="1:69">target_phys_addr_t</name></type> <name pos:start="1:71" pos:end="1:74">addr</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:88"><decl pos:start="1:77" pos:end="1:88"><type pos:start="1:77" pos:end="1:88"><name pos:start="1:77" pos:end="1:84">uint32_t</name></type> <name pos:start="1:86" pos:end="1:88">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SerialState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">ser</name> <init pos:start="5:22" pos:end="5:29">= <expr pos:start="5:24" pos:end="5:29"><name pos:start="5:24" pos:end="5:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">ChannelState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">saddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">newreg</name></decl>, <decl pos:start="11:17" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:23">channel</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:7">val</name> <operator pos:start="15:9" pos:end="15:10">&amp;=</operator> <literal type="number" pos:start="15:12" pos:end="15:15">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:9">saddr</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:17">addr</name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">3</literal><operator pos:start="17:22" pos:end="17:22">)</operator> <operator pos:start="17:24" pos:end="17:25">&gt;&gt;</operator> <literal type="number" pos:start="17:27" pos:end="17:27">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:11">channel</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <operator pos:start="19:15" pos:end="19:15">(</operator><name pos:start="19:16" pos:end="19:19">addr</name> <operator pos:start="19:21" pos:end="19:21">&amp;</operator> <name pos:start="19:23" pos:end="19:36">SERIAL_MAXADDR</name><operator pos:start="19:37" pos:end="19:37">)</operator> <operator pos:start="19:39" pos:end="19:40">&gt;&gt;</operator> <literal type="number" pos:start="19:42" pos:end="19:42">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:5">s</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <operator pos:start="21:9" pos:end="21:9">&amp;</operator><name pos:start="21:10" pos:end="21:26"><name pos:start="21:10" pos:end="21:12">ser</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:17">chn</name><index pos:start="21:18" pos:end="21:26">[<expr pos:start="21:19" pos:end="21:25"><name pos:start="21:19" pos:end="21:25">channel</name></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="23:5" pos:end="179:5">switch <condition pos:start="23:12" pos:end="23:18">(<expr pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:17">saddr</name></expr>)</condition> <block pos:start="23:20" pos:end="179:5">{<block_content pos:start="25:5" pos:end="177:14">

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">0</literal></expr>:</case>

	<expr_stmt pos:start="27:9" pos:end="27:89"><expr pos:start="27:9" pos:end="27:88"><call pos:start="27:9" pos:end="27:88"><name pos:start="27:9" pos:end="27:19">SER_DPRINTF</name><argument_list pos:start="27:20" pos:end="27:88">(<argument pos:start="27:21" pos:end="27:57"><expr pos:start="27:21" pos:end="27:57"><literal type="string" pos:start="27:21" pos:end="27:57">"Write channel %c, reg[%d] = %2.2x\n"</literal></expr></argument>, <argument pos:start="27:60" pos:end="27:67"><expr pos:start="27:60" pos:end="27:67"><call pos:start="27:60" pos:end="27:67"><name pos:start="27:60" pos:end="27:64">CHN_C</name><argument_list pos:start="27:65" pos:end="27:67">(<argument pos:start="27:66" pos:end="27:66"><expr pos:start="27:66" pos:end="27:66"><name pos:start="27:66" pos:end="27:66">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:70" pos:end="27:75"><expr pos:start="27:70" pos:end="27:75"><name pos:start="27:70" pos:end="27:75"><name pos:start="27:70" pos:end="27:70">s</name><operator pos:start="27:71" pos:end="27:72">-&gt;</operator><name pos:start="27:73" pos:end="27:75">reg</name></name></expr></argument>, <argument pos:start="27:78" pos:end="27:87"><expr pos:start="27:78" pos:end="27:87"><name pos:start="27:78" pos:end="27:80">val</name> <operator pos:start="27:82" pos:end="27:82">&amp;</operator> <literal type="number" pos:start="27:84" pos:end="27:87">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="29:9" pos:end="29:19"><expr pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:14">newreg</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</expr_stmt>

	<switch pos:start="31:9" pos:end="135:9">switch <condition pos:start="31:16" pos:end="31:23">(<expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:22">reg</name></name></expr>)</condition> <block pos:start="31:25" pos:end="135:9">{<block_content pos:start="33:9" pos:end="133:18">

	<case pos:start="33:9" pos:end="33:15">case <expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>:</case>

	    <expr_stmt pos:start="35:13" pos:end="35:29"><expr pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:18">newreg</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:24">val</name> <operator pos:start="35:26" pos:end="35:26">&amp;</operator> <literal type="number" pos:start="35:28" pos:end="35:28">7</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:18">&amp;=</operator> <literal type="number" pos:start="37:20" pos:end="37:23">0x38</literal></expr>;</expr_stmt>

	    <switch pos:start="39:13" pos:end="69:13">switch <condition pos:start="39:20" pos:end="39:24">(<expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">val</name></expr>)</condition> <block pos:start="39:26" pos:end="69:13">{<block_content pos:start="41:13" pos:end="67:22">

	    <case pos:start="41:13" pos:end="41:19">case <expr pos:start="41:18" pos:end="41:18"><literal type="number" pos:start="41:18" pos:end="41:18">8</literal></expr>:</case>

		<expr_stmt pos:start="43:17" pos:end="43:30"><expr pos:start="43:17" pos:end="43:29"><name pos:start="43:17" pos:end="43:22">newreg</name> <operator pos:start="43:24" pos:end="43:25">|=</operator> <literal type="number" pos:start="43:27" pos:end="43:29">0x8</literal></expr>;</expr_stmt>

		<break pos:start="45:17" pos:end="45:22">break;</break>

	    <case pos:start="47:13" pos:end="47:22">case <expr pos:start="47:18" pos:end="47:21"><literal type="number" pos:start="47:18" pos:end="47:21">0x28</literal></expr>:</case>

                <expr_stmt pos:start="49:17" pos:end="49:29"><expr pos:start="49:17" pos:end="49:28"><call pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:25">clr_txint</name><argument_list pos:start="49:26" pos:end="49:28">(<argument pos:start="49:27" pos:end="49:27"><expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="51:17" pos:end="51:22">break;</break>

	    <case pos:start="53:13" pos:end="53:22">case <expr pos:start="53:18" pos:end="53:21"><literal type="number" pos:start="53:18" pos:end="53:21">0x38</literal></expr>:</case>

                <if_stmt pos:start="55:17" pos:end="61:33"><if pos:start="55:17" pos:end="57:33">if <condition pos:start="55:20" pos:end="55:39">(<expr pos:start="55:21" pos:end="55:38"><name pos:start="55:21" pos:end="55:38"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:38">rxint_under_svc</name></name></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="57:33"><block_content pos:start="57:21" pos:end="57:33">

                    <expr_stmt pos:start="57:21" pos:end="57:33"><expr pos:start="57:21" pos:end="57:32"><call pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:29">clr_rxint</name><argument_list pos:start="57:30" pos:end="57:32">(<argument pos:start="57:31" pos:end="57:31"><expr pos:start="57:31" pos:end="57:31"><name pos:start="57:31" pos:end="57:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="59:17" pos:end="61:33">else if <condition pos:start="59:25" pos:end="59:44">(<expr pos:start="59:26" pos:end="59:43"><name pos:start="59:26" pos:end="59:43"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:43">txint_under_svc</name></name></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="61:33"><block_content pos:start="61:21" pos:end="61:33">

                    <expr_stmt pos:start="61:21" pos:end="61:33"><expr pos:start="61:21" pos:end="61:32"><call pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:29">clr_txint</name><argument_list pos:start="61:30" pos:end="61:32">(<argument pos:start="61:31" pos:end="61:31"><expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<break pos:start="63:17" pos:end="63:22">break;</break>

	    <default pos:start="65:13" pos:end="65:20">default:</default>

		<break pos:start="67:17" pos:end="67:22">break;</break>

	    </block_content>}</block></switch>

	    <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:21">case <expr pos:start="73:14" pos:end="73:20"><literal type="number" pos:start="73:14" pos:end="73:14">1</literal> <operator pos:start="73:16" pos:end="73:18">...</operator> <literal type="number" pos:start="73:20" pos:end="73:20">3</literal></expr>:</case>

        <case pos:start="75:9" pos:end="75:21">case <expr pos:start="75:14" pos:end="75:20"><literal type="number" pos:start="75:14" pos:end="75:14">6</literal> <operator pos:start="75:16" pos:end="75:18">...</operator> <literal type="number" pos:start="75:20" pos:end="75:20">8</literal></expr>:</case>

        <case pos:start="77:9" pos:end="77:23">case <expr pos:start="77:14" pos:end="77:22"><literal type="number" pos:start="77:14" pos:end="77:15">10</literal> <operator pos:start="77:17" pos:end="77:19">...</operator> <literal type="number" pos:start="77:21" pos:end="77:22">11</literal></expr>:</case>

        <case pos:start="79:9" pos:end="79:23">case <expr pos:start="79:14" pos:end="79:22"><literal type="number" pos:start="79:14" pos:end="79:15">14</literal> <operator pos:start="79:17" pos:end="79:19">...</operator> <literal type="number" pos:start="79:21" pos:end="79:22">15</literal></expr>:</case>

	    <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:20">wregs</name><index pos:start="81:21" pos:end="81:28">[<expr pos:start="81:22" pos:end="81:27"><name pos:start="81:22" pos:end="81:27"><name pos:start="81:22" pos:end="81:22">s</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:27">reg</name></name></expr>]</index></name> <operator pos:start="81:30" pos:end="81:30">=</operator> <name pos:start="81:32" pos:end="81:34">val</name></expr>;</expr_stmt>

	    <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:15">case <expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">4</literal></expr>:</case>

        <case pos:start="87:9" pos:end="87:15">case <expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">5</literal></expr>:</case>

        <case pos:start="89:9" pos:end="89:16">case <expr pos:start="89:14" pos:end="89:15"><literal type="number" pos:start="89:14" pos:end="89:15">12</literal></expr>:</case>

        <case pos:start="91:9" pos:end="91:16">case <expr pos:start="91:14" pos:end="91:15"><literal type="number" pos:start="91:14" pos:end="91:15">13</literal></expr>:</case>

	    <expr_stmt pos:start="93:13" pos:end="93:35"><expr pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:20">wregs</name><index pos:start="93:21" pos:end="93:28">[<expr pos:start="93:22" pos:end="93:27"><name pos:start="93:22" pos:end="93:27"><name pos:start="93:22" pos:end="93:22">s</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:27">reg</name></name></expr>]</index></name> <operator pos:start="93:30" pos:end="93:30">=</operator> <name pos:start="93:32" pos:end="93:34">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:47"><expr pos:start="95:13" pos:end="95:46"><call pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:43">slavio_serial_update_parameters</name><argument_list pos:start="95:44" pos:end="95:46">(<argument pos:start="95:45" pos:end="95:45"><expr pos:start="95:45" pos:end="95:45"><name pos:start="95:45" pos:end="95:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="97:13" pos:end="97:18">break;</break>

	<case pos:start="99:9" pos:end="99:15">case <expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">9</literal></expr>:</case>

	    <switch pos:start="101:13" pos:end="127:13">switch <condition pos:start="101:20" pos:end="101:31">(<expr pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:23">val</name> <operator pos:start="101:25" pos:end="101:25">&amp;</operator> <literal type="number" pos:start="101:27" pos:end="101:30">0xc0</literal></expr>)</condition> <block pos:start="101:33" pos:end="127:13">{<block_content pos:start="103:13" pos:end="125:23">

	    <case pos:start="103:13" pos:end="103:19">case <expr pos:start="103:18" pos:end="103:18"><literal type="number" pos:start="103:18" pos:end="103:18">0</literal></expr>:</case>

	    <default pos:start="105:13" pos:end="105:20">default:</default>

		<break pos:start="107:17" pos:end="107:22">break;</break>

	    <case pos:start="109:13" pos:end="109:22">case <expr pos:start="109:18" pos:end="109:21"><literal type="number" pos:start="109:18" pos:end="109:21">0x40</literal></expr>:</case>

		<expr_stmt pos:start="111:17" pos:end="111:54"><expr pos:start="111:17" pos:end="111:53"><call pos:start="111:17" pos:end="111:53"><name pos:start="111:17" pos:end="111:39">slavio_serial_reset_chn</name><argument_list pos:start="111:40" pos:end="111:53">(<argument pos:start="111:41" pos:end="111:52"><expr pos:start="111:41" pos:end="111:52"><operator pos:start="111:41" pos:end="111:41">&amp;</operator><name pos:start="111:42" pos:end="111:52"><name pos:start="111:42" pos:end="111:44">ser</name><operator pos:start="111:45" pos:end="111:46">-&gt;</operator><name pos:start="111:47" pos:end="111:49">chn</name><index pos:start="111:50" pos:end="111:52">[<expr pos:start="111:51" pos:end="111:51"><literal type="number" pos:start="111:51" pos:end="111:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="113:17" pos:end="113:23">return;</return>

	    <case pos:start="115:13" pos:end="115:22">case <expr pos:start="115:18" pos:end="115:21"><literal type="number" pos:start="115:18" pos:end="115:21">0x80</literal></expr>:</case>

		<expr_stmt pos:start="117:17" pos:end="117:54"><expr pos:start="117:17" pos:end="117:53"><call pos:start="117:17" pos:end="117:53"><name pos:start="117:17" pos:end="117:39">slavio_serial_reset_chn</name><argument_list pos:start="117:40" pos:end="117:53">(<argument pos:start="117:41" pos:end="117:52"><expr pos:start="117:41" pos:end="117:52"><operator pos:start="117:41" pos:end="117:41">&amp;</operator><name pos:start="117:42" pos:end="117:52"><name pos:start="117:42" pos:end="117:44">ser</name><operator pos:start="117:45" pos:end="117:46">-&gt;</operator><name pos:start="117:47" pos:end="117:49">chn</name><index pos:start="117:50" pos:end="117:52">[<expr pos:start="117:51" pos:end="117:51"><literal type="number" pos:start="117:51" pos:end="117:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="119:17" pos:end="119:23">return;</return>

	    <case pos:start="121:13" pos:end="121:22">case <expr pos:start="121:18" pos:end="121:21"><literal type="number" pos:start="121:18" pos:end="121:21">0xc0</literal></expr>:</case>

		<expr_stmt pos:start="123:17" pos:end="123:41"><expr pos:start="123:17" pos:end="123:40"><call pos:start="123:17" pos:end="123:40"><name pos:start="123:17" pos:end="123:35">slavio_serial_reset</name><argument_list pos:start="123:36" pos:end="123:40">(<argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:39">ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="125:17" pos:end="125:23">return;</return>

	    </block_content>}</block></switch>

	    <break pos:start="129:13" pos:end="129:18">break;</break>

	<default pos:start="131:9" pos:end="131:16">default:</default>

	    <break pos:start="133:13" pos:end="133:18">break;</break>

	</block_content>}</block></switch>

	<if_stmt pos:start="137:9" pos:end="143:23"><if pos:start="137:9" pos:end="139:28">if <condition pos:start="137:12" pos:end="137:24">(<expr pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:18"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:18">reg</name></name> <operator pos:start="137:20" pos:end="137:21">==</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:28"><block_content pos:start="139:13" pos:end="139:28">

	    <expr_stmt pos:start="139:13" pos:end="139:28"><expr pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:18">reg</name></name> <operator pos:start="139:20" pos:end="139:20">=</operator> <name pos:start="139:22" pos:end="139:27">newreg</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="141:9" pos:end="143:23">else<block type="pseudo" pos:start="143:13" pos:end="143:23"><block_content pos:start="143:13" pos:end="143:23">

	    <expr_stmt pos:start="143:13" pos:end="143:23"><expr pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:18"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:18">reg</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:11">case <expr pos:start="147:10" pos:end="147:10"><literal type="number" pos:start="147:10" pos:end="147:10">1</literal></expr>:</case>

	<expr_stmt pos:start="149:9" pos:end="149:64"><expr pos:start="149:9" pos:end="149:63"><call pos:start="149:9" pos:end="149:63"><name pos:start="149:9" pos:end="149:19">SER_DPRINTF</name><argument_list pos:start="149:20" pos:end="149:63">(<argument pos:start="149:21" pos:end="149:47"><expr pos:start="149:21" pos:end="149:47"><literal type="string" pos:start="149:21" pos:end="149:47">"Write channel %c, ch %d\n"</literal></expr></argument>, <argument pos:start="149:50" pos:end="149:57"><expr pos:start="149:50" pos:end="149:57"><call pos:start="149:50" pos:end="149:57"><name pos:start="149:50" pos:end="149:54">CHN_C</name><argument_list pos:start="149:55" pos:end="149:57">(<argument pos:start="149:56" pos:end="149:56"><expr pos:start="149:56" pos:end="149:56"><name pos:start="149:56" pos:end="149:56">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:60" pos:end="149:62"><expr pos:start="149:60" pos:end="149:62"><name pos:start="149:60" pos:end="149:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="151:9" pos:end="171:9"><if pos:start="151:9" pos:end="171:9">if <condition pos:start="151:12" pos:end="151:28">(<expr pos:start="151:13" pos:end="151:27"><name pos:start="151:13" pos:end="151:23"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:20">wregs</name><index pos:start="151:21" pos:end="151:23">[<expr pos:start="151:22" pos:end="151:22"><literal type="number" pos:start="151:22" pos:end="151:22">5</literal></expr>]</index></name> <operator pos:start="151:25" pos:end="151:25">&amp;</operator> <literal type="number" pos:start="151:27" pos:end="151:27">8</literal></expr>)</condition> <block pos:start="151:30" pos:end="171:9">{<block_content pos:start="153:13" pos:end="169:25"> <comment type="line" pos:start="151:32" pos:end="151:44">// tx enabled</comment>

	    <expr_stmt pos:start="153:13" pos:end="153:24"><expr pos:start="153:13" pos:end="153:23"><name pos:start="153:13" pos:end="153:17"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:17">tx</name></name> <operator pos:start="153:19" pos:end="153:19">=</operator> <name pos:start="153:21" pos:end="153:23">val</name></expr>;</expr_stmt>

	    <if_stmt pos:start="155:13" pos:end="163:13"><if pos:start="155:13" pos:end="157:50">if <condition pos:start="155:16" pos:end="155:23">(<expr pos:start="155:17" pos:end="155:22"><name pos:start="155:17" pos:end="155:22"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:22">chr</name></name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:50"><block_content pos:start="157:17" pos:end="157:50">

		<expr_stmt pos:start="157:17" pos:end="157:50"><expr pos:start="157:17" pos:end="157:49"><call pos:start="157:17" pos:end="157:49"><name pos:start="157:17" pos:end="157:30">qemu_chr_write</name><argument_list pos:start="157:31" pos:end="157:49">(<argument pos:start="157:32" pos:end="157:37"><expr pos:start="157:32" pos:end="157:37"><name pos:start="157:32" pos:end="157:37"><name pos:start="157:32" pos:end="157:32">s</name><operator pos:start="157:33" pos:end="157:34">-&gt;</operator><name pos:start="157:35" pos:end="157:37">chr</name></name></expr></argument>, <argument pos:start="157:40" pos:end="157:45"><expr pos:start="157:40" pos:end="157:45"><operator pos:start="157:40" pos:end="157:40">&amp;</operator><name pos:start="157:41" pos:end="157:45"><name pos:start="157:41" pos:end="157:41">s</name><operator pos:start="157:42" pos:end="157:43">-&gt;</operator><name pos:start="157:44" pos:end="157:45">tx</name></name></expr></argument>, <argument pos:start="157:48" pos:end="157:48"><expr pos:start="157:48" pos:end="157:48"><literal type="number" pos:start="157:48" pos:end="157:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	    <if type="elseif" pos:start="159:13" pos:end="163:13">else if <condition pos:start="159:21" pos:end="159:36">(<expr pos:start="159:22" pos:end="159:35"><name pos:start="159:22" pos:end="159:28"><name pos:start="159:22" pos:end="159:22">s</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:28">type</name></name> <operator pos:start="159:30" pos:end="159:31">==</operator> <name pos:start="159:33" pos:end="159:35">kbd</name></expr>)</condition> <block pos:start="159:38" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:43">

		<expr_stmt pos:start="161:17" pos:end="161:43"><expr pos:start="161:17" pos:end="161:42"><call pos:start="161:17" pos:end="161:42"><name pos:start="161:17" pos:end="161:34">handle_kbd_command</name><argument_list pos:start="161:35" pos:end="161:42">(<argument pos:start="161:36" pos:end="161:36"><expr pos:start="161:36" pos:end="161:36"><name pos:start="161:36" pos:end="161:36">s</name></expr></argument>, <argument pos:start="161:39" pos:end="161:41"><expr pos:start="161:39" pos:end="161:41"><name pos:start="161:39" pos:end="161:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="165:13" pos:end="165:29"><expr pos:start="165:13" pos:end="165:28"><name pos:start="165:13" pos:end="165:23"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:20">rregs</name><index pos:start="165:21" pos:end="165:23">[<expr pos:start="165:22" pos:end="165:22"><literal type="number" pos:start="165:22" pos:end="165:22">0</literal></expr>]</index></name> <operator pos:start="165:25" pos:end="165:26">|=</operator> <literal type="number" pos:start="165:28" pos:end="165:28">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="165:31" pos:end="165:48">// Tx buffer empty</comment>

	    <expr_stmt pos:start="167:13" pos:end="167:29"><expr pos:start="167:13" pos:end="167:28"><name pos:start="167:13" pos:end="167:23"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:20">rregs</name><index pos:start="167:21" pos:end="167:23">[<expr pos:start="167:22" pos:end="167:22"><literal type="number" pos:start="167:22" pos:end="167:22">1</literal></expr>]</index></name> <operator pos:start="167:25" pos:end="167:26">|=</operator> <literal type="number" pos:start="167:28" pos:end="167:28">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="167:31" pos:end="167:41">// All sent</comment>

            <expr_stmt pos:start="169:13" pos:end="169:25"><expr pos:start="169:13" pos:end="169:24"><call pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:21">set_txint</name><argument_list pos:start="169:22" pos:end="169:24">(<argument pos:start="169:23" pos:end="169:23"><expr pos:start="169:23" pos:end="169:23"><name pos:start="169:23" pos:end="169:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<break pos:start="173:9" pos:end="173:14">break;</break>

    <default pos:start="175:5" pos:end="175:12">default:</default>

	<break pos:start="177:9" pos:end="177:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
