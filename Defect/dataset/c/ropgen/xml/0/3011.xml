<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3011.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">gdbserver_start</name><parameter_list pos:start="1:20" pos:end="1:37">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:32"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:30">char</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">port</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GDBState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:31"><name pos:start="7:10" pos:end="7:26">gdbstub_port_name</name><index pos:start="7:27" pos:end="7:31">[<expr pos:start="7:28" pos:end="7:30"><literal type="number" pos:start="7:28" pos:end="7:30">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">port_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">CharDriverState</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:24">chr</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:16"><if pos:start="17:5" pos:end="19:16">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:13">port</name> <operator pos:start="17:15" pos:end="17:16">||</operator> <operator pos:start="17:18" pos:end="17:18">!</operator><operator pos:start="17:19" pos:end="17:19">*</operator><name pos:start="17:20" pos:end="17:23">port</name></expr>)</condition><block type="pseudo" pos:start="19:7" pos:end="19:16"><block_content pos:start="19:7" pos:end="19:16">

      <return pos:start="19:7" pos:end="19:16">return <expr pos:start="19:14" pos:end="19:15"><operator pos:start="19:14" pos:end="19:14">-</operator><literal type="number" pos:start="19:15" pos:end="19:15">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:12">port_num</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:35"><name pos:start="23:16" pos:end="23:21">strtol</name><argument_list pos:start="23:22" pos:end="23:35">(<argument pos:start="23:23" pos:end="23:26"><expr pos:start="23:23" pos:end="23:26"><name pos:start="23:23" pos:end="23:26">port</name></expr></argument>, <argument pos:start="23:29" pos:end="23:30"><expr pos:start="23:29" pos:end="23:30"><operator pos:start="23:29" pos:end="23:29">&amp;</operator><name pos:start="23:30" pos:end="23:30">p</name></expr></argument>, <argument pos:start="23:33" pos:end="23:34"><expr pos:start="23:33" pos:end="23:34"><literal type="number" pos:start="23:33" pos:end="23:34">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><operator pos:start="25:9" pos:end="25:9">*</operator><name pos:start="25:10" pos:end="25:10">p</name> <operator pos:start="25:12" pos:end="25:13">==</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:33">

        <comment type="block" pos:start="27:9" pos:end="27:63">/* A numeric value is interpreted as a port number.  */</comment>

        <expr_stmt pos:start="29:9" pos:end="31:60"><expr pos:start="29:9" pos:end="31:59"><call pos:start="29:9" pos:end="31:59"><name pos:start="29:9" pos:end="29:16">snprintf</name><argument_list pos:start="29:17" pos:end="31:59">(<argument pos:start="29:18" pos:end="29:34"><expr pos:start="29:18" pos:end="29:34"><name pos:start="29:18" pos:end="29:34">gdbstub_port_name</name></expr></argument>, <argument pos:start="29:37" pos:end="29:61"><expr pos:start="29:37" pos:end="29:61"><sizeof pos:start="29:37" pos:end="29:61">sizeof<argument_list pos:start="29:43" pos:end="29:61">(<argument pos:start="29:44" pos:end="29:60"><expr pos:start="29:44" pos:end="29:60"><name pos:start="29:44" pos:end="29:60">gdbstub_port_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="31:18" pos:end="31:48"><expr pos:start="31:18" pos:end="31:48"><literal type="string" pos:start="31:18" pos:end="31:48">"tcp::%d,nowait,nodelay,server"</literal></expr></argument>, <argument pos:start="31:51" pos:end="31:58"><expr pos:start="31:51" pos:end="31:58"><name pos:start="31:51" pos:end="31:58">port_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:12">port</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:32">gdbstub_port_name</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:7">chr</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:36"><name pos:start="39:11" pos:end="39:23">qemu_chr_open</name><argument_list pos:start="39:24" pos:end="39:36">(<argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><literal type="string" pos:start="39:25" pos:end="39:29">"gdb"</literal></expr></argument>, <argument pos:start="39:32" pos:end="39:35"><expr pos:start="39:32" pos:end="39:35"><name pos:start="39:32" pos:end="39:35">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:18"><if pos:start="41:5" pos:end="43:18">if <condition pos:start="41:8" pos:end="41:13">(<expr pos:start="41:9" pos:end="41:12"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:12">chr</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:18"><block_content pos:start="43:9" pos:end="43:18">

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:5">s</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <call pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:20">qemu_mallocz</name><argument_list pos:start="47:21" pos:end="47:38">(<argument pos:start="47:22" pos:end="47:37"><expr pos:start="47:22" pos:end="47:37"><sizeof pos:start="47:22" pos:end="47:37">sizeof<argument_list pos:start="47:28" pos:end="47:37">(<argument pos:start="47:29" pos:end="47:36"><expr pos:start="47:29" pos:end="47:36"><name pos:start="47:29" pos:end="47:36">GDBState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:11">(<expr pos:start="49:9" pos:end="49:10"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:10">s</name></expr>)</condition> <block pos:start="49:13" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:18">

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:10">env</name></name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:22">first_cpu</name></expr>;</expr_stmt> <comment type="block" pos:start="55:25" pos:end="55:54">/* XXX: allow to change CPU */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:10">chr</name></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:16">chr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:44"><expr pos:start="59:5" pos:end="61:43"><call pos:start="59:5" pos:end="61:43"><name pos:start="59:5" pos:end="59:25">qemu_chr_add_handlers</name><argument_list pos:start="59:26" pos:end="61:43">(<argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><name pos:start="59:27" pos:end="59:29">chr</name></expr></argument>, <argument pos:start="59:32" pos:end="59:50"><expr pos:start="59:32" pos:end="59:50"><name pos:start="59:32" pos:end="59:50">gdb_chr_can_receive</name></expr></argument>, <argument pos:start="59:53" pos:end="59:67"><expr pos:start="59:53" pos:end="59:67"><name pos:start="59:53" pos:end="59:67">gdb_chr_receive</name></expr></argument>,

                          <argument pos:start="61:27" pos:end="61:39"><expr pos:start="61:27" pos:end="61:39"><name pos:start="61:27" pos:end="61:39">gdb_chr_event</name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><name pos:start="61:42" pos:end="61:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:48"><expr pos:start="63:5" pos:end="63:47"><call pos:start="63:5" pos:end="63:47"><name pos:start="63:5" pos:end="63:28">qemu_add_vm_stop_handler</name><argument_list pos:start="63:29" pos:end="63:47">(<argument pos:start="63:30" pos:end="63:43"><expr pos:start="63:30" pos:end="63:43"><name pos:start="63:30" pos:end="63:43">gdb_vm_stopped</name></expr></argument>, <argument pos:start="63:46" pos:end="63:46"><expr pos:start="63:46" pos:end="63:46"><name pos:start="63:46" pos:end="63:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
