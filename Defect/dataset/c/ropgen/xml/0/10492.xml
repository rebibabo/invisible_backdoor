<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10492.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">virtio_ioport_write</name><parameter_list pos:start="1:32" pos:end="1:74">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:59">addr</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:69">uint32_t</name></type> <name pos:start="1:71" pos:end="1:73">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VirtIOPCIProxy</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">proxy</name> <init pos:start="5:27" pos:end="5:34">= <expr pos:start="5:29" pos:end="5:34"><name pos:start="5:29" pos:end="5:34">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">VirtIODevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">vdev</name> <init pos:start="7:24" pos:end="7:59">= <expr pos:start="7:26" pos:end="7:59"><call pos:start="7:26" pos:end="7:59"><name pos:start="7:26" pos:end="7:46">virtio_bus_get_device</name><argument_list pos:start="7:47" pos:end="7:59">(<argument pos:start="7:48" pos:end="7:58"><expr pos:start="7:48" pos:end="7:58"><operator pos:start="7:48" pos:end="7:48">&amp;</operator><name pos:start="7:49" pos:end="7:58"><name pos:start="7:49" pos:end="7:53">proxy</name><operator pos:start="7:54" pos:end="7:55">-&gt;</operator><name pos:start="7:56" pos:end="7:58">bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:13">pa</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="173:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="173:5">{<block_content pos:start="15:5" pos:end="171:14">

    <case pos:start="15:5" pos:end="15:35">case <expr pos:start="15:10" pos:end="15:34"><name pos:start="15:10" pos:end="15:34">VIRTIO_PCI_GUEST_FEATURES</name></expr>:</case>

        <comment type="block" pos:start="17:9" pos:end="17:76">/* Guest does not negotiate properly?  We have to assume nothing. */</comment>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:46">(<expr pos:start="19:13" pos:end="19:45"><name pos:start="19:13" pos:end="19:15">val</name> <operator pos:start="19:17" pos:end="19:17">&amp;</operator> <operator pos:start="19:19" pos:end="19:19">(</operator><literal type="number" pos:start="19:20" pos:end="19:20">1</literal> <operator pos:start="19:22" pos:end="19:23">&lt;&lt;</operator> <name pos:start="19:25" pos:end="19:44">VIRTIO_F_BAD_FEATURE</name><operator pos:start="19:45" pos:end="19:45">)</operator></expr>)</condition> <block pos:start="19:48" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:64">

            <expr_stmt pos:start="21:13" pos:end="21:64"><expr pos:start="21:13" pos:end="21:63"><name pos:start="21:13" pos:end="21:15">val</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:63"><name pos:start="21:19" pos:end="21:50">virtio_bus_get_vdev_bad_features</name><argument_list pos:start="21:51" pos:end="21:63">(<argument pos:start="21:52" pos:end="21:62"><expr pos:start="21:52" pos:end="21:62"><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:62"><name pos:start="21:53" pos:end="21:57">proxy</name><operator pos:start="21:58" pos:end="21:59">-&gt;</operator><name pos:start="21:60" pos:end="21:62">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><call pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:27">virtio_set_features</name><argument_list pos:start="25:28" pos:end="25:38">(<argument pos:start="25:29" pos:end="25:32"><expr pos:start="25:29" pos:end="25:32"><name pos:start="25:29" pos:end="25:32">vdev</name></expr></argument>, <argument pos:start="25:35" pos:end="25:37"><expr pos:start="25:35" pos:end="25:37"><name pos:start="25:35" pos:end="25:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:30">case <expr pos:start="29:10" pos:end="29:29"><name pos:start="29:10" pos:end="29:29">VIRTIO_PCI_QUEUE_PFN</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:10">pa</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:20">hwaddr</name><operator pos:start="31:21" pos:end="31:21">)</operator><name pos:start="31:22" pos:end="31:24">val</name> <operator pos:start="31:26" pos:end="31:27">&lt;&lt;</operator> <name pos:start="31:29" pos:end="31:55">VIRTIO_PCI_QUEUE_ADDR_SHIFT</name></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="45:61"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:14">pa</name> <operator pos:start="33:16" pos:end="33:17">==</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>)</condition> <block pos:start="33:22" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:52">

            <expr_stmt pos:start="35:13" pos:end="35:45"><expr pos:start="35:13" pos:end="35:44"><call pos:start="35:13" pos:end="35:44"><name pos:start="35:13" pos:end="35:37">virtio_pci_stop_ioeventfd</name><argument_list pos:start="35:38" pos:end="35:44">(<argument pos:start="35:39" pos:end="35:43"><expr pos:start="35:39" pos:end="35:43"><name pos:start="35:39" pos:end="35:43">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><call pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:24">virtio_reset</name><argument_list pos:start="37:25" pos:end="37:30">(<argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:52"><expr pos:start="39:13" pos:end="39:51"><call pos:start="39:13" pos:end="39:51"><name pos:start="39:13" pos:end="39:34">msix_unuse_all_vectors</name><argument_list pos:start="39:35" pos:end="39:51">(<argument pos:start="39:36" pos:end="39:50"><expr pos:start="39:36" pos:end="39:50"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:50"><name pos:start="39:37" pos:end="39:41">proxy</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:50">pci_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="43:9" pos:end="45:61">else<block type="pseudo" pos:start="45:13" pos:end="45:61"><block_content pos:start="45:13" pos:end="45:61">

            <expr_stmt pos:start="45:13" pos:end="45:61"><expr pos:start="45:13" pos:end="45:60"><call pos:start="45:13" pos:end="45:60"><name pos:start="45:13" pos:end="45:33">virtio_queue_set_addr</name><argument_list pos:start="45:34" pos:end="45:60">(<argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><name pos:start="45:35" pos:end="45:38">vdev</name></expr></argument>, <argument pos:start="45:41" pos:end="45:55"><expr pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:44">vdev</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:55">queue_sel</name></name></expr></argument>, <argument pos:start="45:58" pos:end="45:59"><expr pos:start="45:58" pos:end="45:59"><name pos:start="45:58" pos:end="45:59">pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:30">case <expr pos:start="49:10" pos:end="49:29"><name pos:start="49:10" pos:end="49:29">VIRTIO_PCI_QUEUE_SEL</name></expr>:</case>

        <if_stmt pos:start="51:9" pos:end="53:34"><if pos:start="51:9" pos:end="53:34">if <condition pos:start="51:12" pos:end="51:39">(<expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:15">val</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <name pos:start="51:19" pos:end="51:38">VIRTIO_PCI_QUEUE_MAX</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:34"><block_content pos:start="53:13" pos:end="53:34">

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:16">vdev</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:27">queue_sel</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <name pos:start="53:31" pos:end="53:33">val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:33">case <expr pos:start="57:10" pos:end="57:32"><name pos:start="57:10" pos:end="57:32">VIRTIO_PCI_QUEUE_NOTIFY</name></expr>:</case>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:39">(<expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:15">val</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <name pos:start="59:19" pos:end="59:38">VIRTIO_PCI_QUEUE_MAX</name></expr>)</condition> <block pos:start="59:41" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:43">

            <expr_stmt pos:start="61:13" pos:end="61:43"><expr pos:start="61:13" pos:end="61:42"><call pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:31">virtio_queue_notify</name><argument_list pos:start="61:32" pos:end="61:42">(<argument pos:start="61:33" pos:end="61:36"><expr pos:start="61:33" pos:end="61:36"><name pos:start="61:33" pos:end="61:36">vdev</name></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:27">case <expr pos:start="67:10" pos:end="67:26"><name pos:start="67:10" pos:end="67:26">VIRTIO_PCI_STATUS</name></expr>:</case>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:47">(<expr pos:start="69:13" pos:end="69:46"><operator pos:start="69:13" pos:end="69:13">!</operator><operator pos:start="69:14" pos:end="69:14">(</operator><name pos:start="69:15" pos:end="69:17">val</name> <operator pos:start="69:19" pos:end="69:19">&amp;</operator> <name pos:start="69:21" pos:end="69:45">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="69:46" pos:end="69:46">)</operator></expr>)</condition> <block pos:start="69:49" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:45">

            <expr_stmt pos:start="71:13" pos:end="71:45"><expr pos:start="71:13" pos:end="71:44"><call pos:start="71:13" pos:end="71:44"><name pos:start="71:13" pos:end="71:37">virtio_pci_stop_ioeventfd</name><argument_list pos:start="71:38" pos:end="71:44">(<argument pos:start="71:39" pos:end="71:43"><expr pos:start="71:39" pos:end="71:43"><name pos:start="71:39" pos:end="71:43">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><call pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:25">virtio_set_status</name><argument_list pos:start="77:26" pos:end="77:43">(<argument pos:start="77:27" pos:end="77:30"><expr pos:start="77:27" pos:end="77:30"><name pos:start="77:27" pos:end="77:30">vdev</name></expr></argument>, <argument pos:start="77:33" pos:end="77:42"><expr pos:start="77:33" pos:end="77:42"><name pos:start="77:33" pos:end="77:35">val</name> <operator pos:start="77:37" pos:end="77:37">&amp;</operator> <literal type="number" pos:start="77:39" pos:end="77:42">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:44">(<expr pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:15">val</name> <operator pos:start="81:17" pos:end="81:17">&amp;</operator> <name pos:start="81:19" pos:end="81:43">VIRTIO_CONFIG_S_DRIVER_OK</name></expr>)</condition> <block pos:start="81:46" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:46">

            <expr_stmt pos:start="83:13" pos:end="83:46"><expr pos:start="83:13" pos:end="83:45"><call pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:38">virtio_pci_start_ioeventfd</name><argument_list pos:start="83:39" pos:end="83:45">(<argument pos:start="83:40" pos:end="83:44"><expr pos:start="83:40" pos:end="83:44"><name pos:start="83:40" pos:end="83:44">proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:30">(<expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:16">vdev</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:24">status</name></name> <operator pos:start="89:26" pos:end="89:27">==</operator> <literal type="number" pos:start="89:29" pos:end="89:29">0</literal></expr>)</condition> <block pos:start="89:32" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:52">

            <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><call pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:24">virtio_reset</name><argument_list pos:start="91:25" pos:end="91:30">(<argument pos:start="91:26" pos:end="91:29"><expr pos:start="91:26" pos:end="91:29"><name pos:start="91:26" pos:end="91:29">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:52"><expr pos:start="93:13" pos:end="93:51"><call pos:start="93:13" pos:end="93:51"><name pos:start="93:13" pos:end="93:34">msix_unuse_all_vectors</name><argument_list pos:start="93:35" pos:end="93:51">(<argument pos:start="93:36" pos:end="93:50"><expr pos:start="93:36" pos:end="93:50"><operator pos:start="93:36" pos:end="93:36">&amp;</operator><name pos:start="93:37" pos:end="93:50"><name pos:start="93:37" pos:end="93:41">proxy</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:50">pci_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="99:9" pos:end="105:55">/* Linux before 2.6.34 drives the device without enabling

           the PCI device bus master bit. Enable it automatically

           for the guest. This is a PCI spec violation but so is

           initiating DMA with bus master bit clear. */</comment>

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:74">(<expr pos:start="107:13" pos:end="107:73"><name pos:start="107:13" pos:end="107:15">val</name> <operator pos:start="107:17" pos:end="107:18">==</operator> <operator pos:start="107:20" pos:end="107:20">(</operator><name pos:start="107:21" pos:end="107:47">VIRTIO_CONFIG_S_ACKNOWLEDGE</name> <operator pos:start="107:49" pos:end="107:49">|</operator> <name pos:start="107:51" pos:end="107:72">VIRTIO_CONFIG_S_DRIVER</name><operator pos:start="107:73" pos:end="107:73">)</operator></expr>)</condition> <block pos:start="107:76" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:60">

            <expr_stmt pos:start="109:13" pos:end="113:60"><expr pos:start="109:13" pos:end="113:59"><call pos:start="109:13" pos:end="113:59"><name pos:start="109:13" pos:end="109:36">pci_default_write_config</name><argument_list pos:start="109:37" pos:end="113:59">(<argument pos:start="109:38" pos:end="109:52"><expr pos:start="109:38" pos:end="109:52"><operator pos:start="109:38" pos:end="109:38">&amp;</operator><name pos:start="109:39" pos:end="109:52"><name pos:start="109:39" pos:end="109:43">proxy</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:52">pci_dev</name></name></expr></argument>, <argument pos:start="109:55" pos:end="109:65"><expr pos:start="109:55" pos:end="109:65"><name pos:start="109:55" pos:end="109:65">PCI_COMMAND</name></expr></argument>,

                                     <argument pos:start="111:38" pos:end="113:55"><expr pos:start="111:38" pos:end="113:55"><name pos:start="111:38" pos:end="111:71"><name pos:start="111:38" pos:end="111:42">proxy</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:51">pci_dev</name><operator pos:start="111:52" pos:end="111:52">.</operator><name pos:start="111:53" pos:end="111:58">config</name><index pos:start="111:59" pos:end="111:71">[<expr pos:start="111:60" pos:end="111:70"><name pos:start="111:60" pos:end="111:70">PCI_COMMAND</name></expr>]</index></name> <operator pos:start="111:73" pos:end="111:73">|</operator>

                                     <name pos:start="113:38" pos:end="113:55">PCI_COMMAND_MASTER</name></expr></argument>, <argument pos:start="113:58" pos:end="113:58"><expr pos:start="113:58" pos:end="113:58"><literal type="number" pos:start="113:58" pos:end="113:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="119:9" pos:end="123:33">/* Linux before 2.6.34 sets the device as OK without enabling

           the PCI device bus master bit. In this case we need to disable

           some safety checks. */</comment>

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="127:71">(<expr pos:start="125:13" pos:end="127:70"><operator pos:start="125:13" pos:end="125:13">(</operator><name pos:start="125:14" pos:end="125:16">val</name> <operator pos:start="125:18" pos:end="125:18">&amp;</operator> <name pos:start="125:20" pos:end="125:44">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="125:45" pos:end="125:45">)</operator> <operator pos:start="125:47" pos:end="125:48">&amp;&amp;</operator>

            <operator pos:start="127:13" pos:end="127:13">!</operator><operator pos:start="127:14" pos:end="127:14">(</operator><name pos:start="127:15" pos:end="127:48"><name pos:start="127:15" pos:end="127:19">proxy</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:28">pci_dev</name><operator pos:start="127:29" pos:end="127:29">.</operator><name pos:start="127:30" pos:end="127:35">config</name><index pos:start="127:36" pos:end="127:48">[<expr pos:start="127:37" pos:end="127:47"><name pos:start="127:37" pos:end="127:47">PCI_COMMAND</name></expr>]</index></name> <operator pos:start="127:50" pos:end="127:50">&amp;</operator> <name pos:start="127:52" pos:end="127:69">PCI_COMMAND_MASTER</name><operator pos:start="127:70" pos:end="127:70">)</operator></expr>)</condition> <block pos:start="127:73" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:59">

            <expr_stmt pos:start="129:13" pos:end="129:59"><expr pos:start="129:13" pos:end="129:58"><name pos:start="129:13" pos:end="129:24"><name pos:start="129:13" pos:end="129:17">proxy</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:24">flags</name></name> <operator pos:start="129:26" pos:end="129:27">|=</operator> <name pos:start="129:29" pos:end="129:58">VIRTIO_PCI_FLAG_BUS_MASTER_BUG</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:34">case <expr pos:start="135:10" pos:end="135:33"><name pos:start="135:10" pos:end="135:33">VIRTIO_MSI_CONFIG_VECTOR</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:64"><expr pos:start="137:9" pos:end="137:63"><call pos:start="137:9" pos:end="137:63"><name pos:start="137:9" pos:end="137:25">msix_vector_unuse</name><argument_list pos:start="137:26" pos:end="137:63">(<argument pos:start="137:27" pos:end="137:41"><expr pos:start="137:27" pos:end="137:41"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:41"><name pos:start="137:28" pos:end="137:32">proxy</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:41">pci_dev</name></name></expr></argument>, <argument pos:start="137:44" pos:end="137:62"><expr pos:start="137:44" pos:end="137:62"><name pos:start="137:44" pos:end="137:62"><name pos:start="137:44" pos:end="137:47">vdev</name><operator pos:start="137:48" pos:end="137:49">-&gt;</operator><name pos:start="137:50" pos:end="137:62">config_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="139:9" pos:end="139:73">/* Make it possible for guest to discover an error took place. */</comment>

        <if_stmt pos:start="141:9" pos:end="143:35"><if pos:start="141:9" pos:end="143:35">if <condition pos:start="141:12" pos:end="141:54">(<expr pos:start="141:13" pos:end="141:53"><call pos:start="141:13" pos:end="141:49"><name pos:start="141:13" pos:end="141:27">msix_vector_use</name><argument_list pos:start="141:28" pos:end="141:49">(<argument pos:start="141:29" pos:end="141:43"><expr pos:start="141:29" pos:end="141:43"><operator pos:start="141:29" pos:end="141:29">&amp;</operator><name pos:start="141:30" pos:end="141:43"><name pos:start="141:30" pos:end="141:34">proxy</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:43">pci_dev</name></name></expr></argument>, <argument pos:start="141:46" pos:end="141:48"><expr pos:start="141:46" pos:end="141:48"><name pos:start="141:46" pos:end="141:48">val</name></expr></argument>)</argument_list></call> <operator pos:start="141:51" pos:end="141:51">&lt;</operator> <literal type="number" pos:start="141:53" pos:end="141:53">0</literal></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:35"><block_content pos:start="143:13" pos:end="143:35">

            <expr_stmt pos:start="143:13" pos:end="143:35"><expr pos:start="143:13" pos:end="143:34"><name pos:start="143:13" pos:end="143:15">val</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:34">VIRTIO_NO_VECTOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:34"><expr pos:start="145:9" pos:end="145:33"><name pos:start="145:9" pos:end="145:27"><name pos:start="145:9" pos:end="145:12">vdev</name><operator pos:start="145:13" pos:end="145:14">-&gt;</operator><name pos:start="145:15" pos:end="145:27">config_vector</name></name> <operator pos:start="145:29" pos:end="145:29">=</operator> <name pos:start="145:31" pos:end="145:33">val</name></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:33">case <expr pos:start="149:10" pos:end="149:32"><name pos:start="149:10" pos:end="149:32">VIRTIO_MSI_QUEUE_VECTOR</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="153:70"><expr pos:start="151:9" pos:end="153:69"><call pos:start="151:9" pos:end="153:69"><name pos:start="151:9" pos:end="151:25">msix_vector_unuse</name><argument_list pos:start="151:26" pos:end="153:69">(<argument pos:start="151:27" pos:end="151:41"><expr pos:start="151:27" pos:end="151:41"><operator pos:start="151:27" pos:end="151:27">&amp;</operator><name pos:start="151:28" pos:end="151:41"><name pos:start="151:28" pos:end="151:32">proxy</name><operator pos:start="151:33" pos:end="151:34">-&gt;</operator><name pos:start="151:35" pos:end="151:41">pci_dev</name></name></expr></argument>,

                          <argument pos:start="153:27" pos:end="153:68"><expr pos:start="153:27" pos:end="153:68"><call pos:start="153:27" pos:end="153:68"><name pos:start="153:27" pos:end="153:45">virtio_queue_vector</name><argument_list pos:start="153:46" pos:end="153:68">(<argument pos:start="153:47" pos:end="153:50"><expr pos:start="153:47" pos:end="153:50"><name pos:start="153:47" pos:end="153:50">vdev</name></expr></argument>, <argument pos:start="153:53" pos:end="153:67"><expr pos:start="153:53" pos:end="153:67"><name pos:start="153:53" pos:end="153:67"><name pos:start="153:53" pos:end="153:56">vdev</name><operator pos:start="153:57" pos:end="153:58">-&gt;</operator><name pos:start="153:59" pos:end="153:67">queue_sel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="155:9" pos:end="155:73">/* Make it possible for guest to discover an error took place. */</comment>

        <if_stmt pos:start="157:9" pos:end="159:35"><if pos:start="157:9" pos:end="159:35">if <condition pos:start="157:12" pos:end="157:54">(<expr pos:start="157:13" pos:end="157:53"><call pos:start="157:13" pos:end="157:49"><name pos:start="157:13" pos:end="157:27">msix_vector_use</name><argument_list pos:start="157:28" pos:end="157:49">(<argument pos:start="157:29" pos:end="157:43"><expr pos:start="157:29" pos:end="157:43"><operator pos:start="157:29" pos:end="157:29">&amp;</operator><name pos:start="157:30" pos:end="157:43"><name pos:start="157:30" pos:end="157:34">proxy</name><operator pos:start="157:35" pos:end="157:36">-&gt;</operator><name pos:start="157:37" pos:end="157:43">pci_dev</name></name></expr></argument>, <argument pos:start="157:46" pos:end="157:48"><expr pos:start="157:46" pos:end="157:48"><name pos:start="157:46" pos:end="157:48">val</name></expr></argument>)</argument_list></call> <operator pos:start="157:51" pos:end="157:51">&lt;</operator> <literal type="number" pos:start="157:53" pos:end="157:53">0</literal></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:35"><block_content pos:start="159:13" pos:end="159:35">

            <expr_stmt pos:start="159:13" pos:end="159:35"><expr pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:15">val</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:34">VIRTIO_NO_VECTOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:60"><expr pos:start="161:9" pos:end="161:59"><call pos:start="161:9" pos:end="161:59"><name pos:start="161:9" pos:end="161:31">virtio_queue_set_vector</name><argument_list pos:start="161:32" pos:end="161:59">(<argument pos:start="161:33" pos:end="161:36"><expr pos:start="161:33" pos:end="161:36"><name pos:start="161:33" pos:end="161:36">vdev</name></expr></argument>, <argument pos:start="161:39" pos:end="161:53"><expr pos:start="161:39" pos:end="161:53"><name pos:start="161:39" pos:end="161:53"><name pos:start="161:39" pos:end="161:42">vdev</name><operator pos:start="161:43" pos:end="161:44">-&gt;</operator><name pos:start="161:45" pos:end="161:53">queue_sel</name></name></expr></argument>, <argument pos:start="161:56" pos:end="161:58"><expr pos:start="161:56" pos:end="161:58"><name pos:start="161:56" pos:end="161:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <default pos:start="165:5" pos:end="165:12">default:</default>

        <expr_stmt pos:start="167:9" pos:end="169:42"><expr pos:start="167:9" pos:end="169:41"><call pos:start="167:9" pos:end="169:41"><name pos:start="167:9" pos:end="167:20">error_report</name><argument_list pos:start="167:21" pos:end="169:41">(<argument pos:start="167:22" pos:end="167:61"><expr pos:start="167:22" pos:end="167:61"><literal type="string" pos:start="167:22" pos:end="167:61">"%s: unexpected address 0x%x value 0x%x"</literal></expr></argument>,

                     <argument pos:start="169:22" pos:end="169:29"><expr pos:start="169:22" pos:end="169:29"><name pos:start="169:22" pos:end="169:29">__func__</name></expr></argument>, <argument pos:start="169:32" pos:end="169:35"><expr pos:start="169:32" pos:end="169:35"><name pos:start="169:32" pos:end="169:35">addr</name></expr></argument>, <argument pos:start="169:38" pos:end="169:40"><expr pos:start="169:38" pos:end="169:40"><name pos:start="169:38" pos:end="169:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
