<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4619.c" pos:tabs="8"><function pos:start="1:1" pos:end="353:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">usb_net_handle_control</name><parameter_list pos:start="1:34" pos:end="3:53">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:43">USBDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">request</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">value</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:25"><decl pos:start="3:17" pos:end="3:25"><type pos:start="3:17" pos:end="3:25"><name pos:start="3:17" pos:end="3:19">int</name></type> <name pos:start="3:21" pos:end="3:25">index</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:37"><decl pos:start="3:28" pos:end="3:37"><type pos:start="3:28" pos:end="3:37"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:37">length</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:52"><decl pos:start="3:40" pos:end="3:52"><type pos:start="3:40" pos:end="3:52"><name pos:start="3:40" pos:end="3:46">uint8_t</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:52">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="353:1">{<block_content pos:start="7:5" pos:end="351:15">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">USBNetState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:40">= <expr pos:start="7:22" pos:end="7:40"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:33">USBNetState</name> <operator pos:start="7:35" pos:end="7:35">*</operator><operator pos:start="7:36" pos:end="7:36">)</operator> <name pos:start="7:38" pos:end="7:40">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="349:5">switch<condition pos:start="13:11" pos:end="13:19">(<expr pos:start="13:12" pos:end="13:18"><name pos:start="13:12" pos:end="13:18">request</name></expr>)</condition> <block pos:start="13:21" pos:end="349:5">{<block_content pos:start="15:5" pos:end="347:14">

    <case pos:start="15:5" pos:end="15:44">case <expr pos:start="15:10" pos:end="15:43"><name pos:start="15:10" pos:end="15:22">DeviceRequest</name> <operator pos:start="15:24" pos:end="15:24">|</operator> <name pos:start="15:26" pos:end="15:43">USB_REQ_GET_STATUS</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="19:65"><expr pos:start="17:9" pos:end="19:64"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:12">data</name><index pos:start="17:13" pos:end="17:15">[<expr pos:start="17:14" pos:end="17:14"><literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>]</index></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <operator pos:start="17:19" pos:end="17:19">(</operator><literal type="number" pos:start="17:20" pos:end="17:20">1</literal> <operator pos:start="17:22" pos:end="17:23">&lt;&lt;</operator> <name pos:start="17:25" pos:end="17:47">USB_DEVICE_SELF_POWERED</name><operator pos:start="17:48" pos:end="17:48">)</operator> <operator pos:start="17:50" pos:end="17:50">|</operator>

                <operator pos:start="19:17" pos:end="19:17">(</operator><name pos:start="19:18" pos:end="19:35"><name pos:start="19:18" pos:end="19:20">dev</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:35">remote_wakeup</name></name> <operator pos:start="19:37" pos:end="19:38">&lt;&lt;</operator> <name pos:start="19:40" pos:end="19:63">USB_DEVICE_REMOTE_WAKEUP</name><operator pos:start="19:64" pos:end="19:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:12">data</name><index pos:start="21:13" pos:end="21:15">[<expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>]</index></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <literal type="number" pos:start="21:19" pos:end="21:22">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <literal type="number" pos:start="23:15" pos:end="23:15">2</literal></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>



    <case pos:start="29:5" pos:end="29:50">case <expr pos:start="29:10" pos:end="29:49"><name pos:start="29:10" pos:end="29:25">DeviceOutRequest</name> <operator pos:start="29:27" pos:end="29:27">|</operator> <name pos:start="29:29" pos:end="29:49">USB_REQ_CLEAR_FEATURE</name></expr>:</case>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:46">(<expr pos:start="31:13" pos:end="31:45"><name pos:start="31:13" pos:end="31:17">value</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <name pos:start="31:22" pos:end="31:45">USB_DEVICE_REMOTE_WAKEUP</name></expr>)</condition> <block pos:start="31:48" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:35">

            <expr_stmt pos:start="33:13" pos:end="33:35"><expr pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:15">dev</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:30">remote_wakeup</name></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="39:9">else <block pos:start="35:16" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:22">

            <goto pos:start="37:13" pos:end="37:22">goto <name pos:start="37:18" pos:end="37:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:48">case <expr pos:start="47:10" pos:end="47:47"><name pos:start="47:10" pos:end="47:25">DeviceOutRequest</name> <operator pos:start="47:27" pos:end="47:27">|</operator> <name pos:start="47:29" pos:end="47:47">USB_REQ_SET_FEATURE</name></expr>:</case>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:46">(<expr pos:start="49:13" pos:end="49:45"><name pos:start="49:13" pos:end="49:17">value</name> <operator pos:start="49:19" pos:end="49:20">==</operator> <name pos:start="49:22" pos:end="49:45">USB_DEVICE_REMOTE_WAKEUP</name></expr>)</condition> <block pos:start="49:48" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:35">

            <expr_stmt pos:start="51:13" pos:end="51:35"><expr pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:15">dev</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:30">remote_wakeup</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <literal type="number" pos:start="51:34" pos:end="51:34">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="57:9">else <block pos:start="53:16" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:22">

            <goto pos:start="55:13" pos:end="55:22">goto <name pos:start="55:18" pos:end="55:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>



    <case pos:start="65:5" pos:end="65:48">case <expr pos:start="65:10" pos:end="65:47"><name pos:start="65:10" pos:end="65:25">DeviceOutRequest</name> <operator pos:start="65:27" pos:end="65:27">|</operator> <name pos:start="65:29" pos:end="65:47">USB_REQ_SET_ADDRESS</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:11">dev</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:17">addr</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:25">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>



    <case pos:start="75:5" pos:end="75:70">case <expr pos:start="75:10" pos:end="75:69"><name pos:start="75:10" pos:end="75:33">ClassInterfaceOutRequest</name> <operator pos:start="75:35" pos:end="75:35">|</operator> <name pos:start="75:37" pos:end="75:69">USB_CDC_SEND_ENCAPSULATED_COMMAND</name></expr>:</case>

        <if_stmt pos:start="77:9" pos:end="82:0"><if pos:start="77:9" pos:end="82:0">if <condition pos:start="77:12" pos:end="77:45">(<expr pos:start="77:13" pos:end="77:44"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:21"><name pos:start="77:14" pos:end="77:14">s</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:21">rndis</name></name> <operator pos:start="77:23" pos:end="77:24">||</operator> <name pos:start="77:26" pos:end="77:30">value</name> <operator pos:start="77:32" pos:end="77:33">||</operator> <name pos:start="77:35" pos:end="77:39">index</name> <operator pos:start="77:41" pos:end="77:42">!=</operator> <literal type="number" pos:start="77:44" pos:end="77:44">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="82:0"><block_content pos:start="79:13" pos:end="82:0">

            <goto pos:start="79:13" pos:end="82:0">goto <name pos:start="79:18" pos:end="79:21">fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="81:1" pos:end="81:20">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:20">TRAFFIC_DEBUG</name></cpp:ifdef>

        <block pos:start="83:9" pos:end="104:0">{<block_content pos:start="85:13" pos:end="99:36">

            <decl_stmt pos:start="85:13" pos:end="85:27"><decl pos:start="85:13" pos:end="85:26"><type pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:20">unsigned</name> <name pos:start="85:22" pos:end="85:24">int</name></type> <name pos:start="85:26" pos:end="85:26">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:58"><expr pos:start="87:13" pos:end="87:57"><call pos:start="87:13" pos:end="87:57"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:57">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:56"><expr pos:start="87:29" pos:end="87:56"><literal type="string" pos:start="87:29" pos:end="87:56">"SEND_ENCAPSULATED_COMMAND:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="89:13" pos:end="97:13">for <control pos:start="89:17" pos:end="89:40">(<init pos:start="89:18" pos:end="89:23"><expr pos:start="89:18" pos:end="89:22"><name pos:start="89:18" pos:end="89:18">i</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>;</init> <condition pos:start="89:25" pos:end="89:35"><expr pos:start="89:25" pos:end="89:34"><name pos:start="89:25" pos:end="89:25">i</name> <operator pos:start="89:27" pos:end="89:27">&lt;</operator> <name pos:start="89:29" pos:end="89:34">length</name></expr>;</condition> <incr pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:37">i</name><operator pos:start="89:38" pos:end="89:39">++</operator></expr></incr>)</control> <block pos:start="89:42" pos:end="97:13">{<block_content pos:start="91:17" pos:end="95:50">

                <if_stmt pos:start="91:17" pos:end="93:50"><if pos:start="91:17" pos:end="93:50">if <condition pos:start="91:20" pos:end="91:30">(<expr pos:start="91:21" pos:end="91:29"><operator pos:start="91:21" pos:end="91:21">!</operator><operator pos:start="91:22" pos:end="91:22">(</operator><name pos:start="91:23" pos:end="91:23">i</name> <operator pos:start="91:25" pos:end="91:25">&amp;</operator> <literal type="number" pos:start="91:27" pos:end="91:28">15</literal><operator pos:start="91:29" pos:end="91:29">)</operator></expr>)</condition><block type="pseudo" pos:start="93:21" pos:end="93:50"><block_content pos:start="93:21" pos:end="93:50">

                    <expr_stmt pos:start="93:21" pos:end="93:50"><expr pos:start="93:21" pos:end="93:49"><call pos:start="93:21" pos:end="93:49"><name pos:start="93:21" pos:end="93:27">fprintf</name><argument_list pos:start="93:28" pos:end="93:49">(<argument pos:start="93:29" pos:end="93:34"><expr pos:start="93:29" pos:end="93:34"><name pos:start="93:29" pos:end="93:34">stderr</name></expr></argument>, <argument pos:start="93:37" pos:end="93:45"><expr pos:start="93:37" pos:end="93:45"><literal type="string" pos:start="93:37" pos:end="93:45">"\n%04x:"</literal></expr></argument>, <argument pos:start="93:48" pos:end="93:48"><expr pos:start="93:48" pos:end="93:48"><name pos:start="93:48" pos:end="93:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:50"><expr pos:start="95:17" pos:end="95:49"><call pos:start="95:17" pos:end="95:49"><name pos:start="95:17" pos:end="95:23">fprintf</name><argument_list pos:start="95:24" pos:end="95:49">(<argument pos:start="95:25" pos:end="95:30"><expr pos:start="95:25" pos:end="95:30"><name pos:start="95:25" pos:end="95:30">stderr</name></expr></argument>, <argument pos:start="95:33" pos:end="95:39"><expr pos:start="95:33" pos:end="95:39"><literal type="string" pos:start="95:33" pos:end="95:39">" %02x"</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:48"><expr pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:45">data</name><index pos:start="95:46" pos:end="95:48">[<expr pos:start="95:47" pos:end="95:47"><name pos:start="95:47" pos:end="95:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="99:13" pos:end="99:36"><expr pos:start="99:13" pos:end="99:35"><call pos:start="99:13" pos:end="99:35"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:35">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:34"><expr pos:start="99:29" pos:end="99:34"><literal type="string" pos:start="99:29" pos:end="99:34">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="105:9" pos:end="105:43"><expr pos:start="105:9" pos:end="105:42"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:42"><name pos:start="105:15" pos:end="105:25">rndis_parse</name><argument_list pos:start="105:26" pos:end="105:42">(<argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><name pos:start="105:27" pos:end="105:27">s</name></expr></argument>, <argument pos:start="105:30" pos:end="105:33"><expr pos:start="105:30" pos:end="105:33"><name pos:start="105:30" pos:end="105:33">data</name></expr></argument>, <argument pos:start="105:36" pos:end="105:41"><expr pos:start="105:36" pos:end="105:41"><name pos:start="105:36" pos:end="105:41">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>



    <case pos:start="111:5" pos:end="111:67">case <expr pos:start="111:10" pos:end="111:66"><name pos:start="111:10" pos:end="111:30">ClassInterfaceRequest</name> <operator pos:start="111:32" pos:end="111:32">|</operator> <name pos:start="111:34" pos:end="111:66">USB_CDC_GET_ENCAPSULATED_RESPONSE</name></expr>:</case>

        <if_stmt pos:start="113:9" pos:end="115:22"><if pos:start="113:9" pos:end="115:22">if <condition pos:start="113:12" pos:end="113:45">(<expr pos:start="113:13" pos:end="113:44"><operator pos:start="113:13" pos:end="113:13">!</operator><name pos:start="113:14" pos:end="113:21"><name pos:start="113:14" pos:end="113:14">s</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:21">rndis</name></name> <operator pos:start="113:23" pos:end="113:24">||</operator> <name pos:start="113:26" pos:end="113:30">value</name> <operator pos:start="113:32" pos:end="113:33">||</operator> <name pos:start="113:35" pos:end="113:39">index</name> <operator pos:start="113:41" pos:end="113:42">!=</operator> <literal type="number" pos:start="113:44" pos:end="113:44">0</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:22"><block_content pos:start="115:13" pos:end="115:22">

            <goto pos:start="115:13" pos:end="115:22">goto <name pos:start="115:18" pos:end="115:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:42"><expr pos:start="117:9" pos:end="117:41"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:41"><name pos:start="117:15" pos:end="117:32">rndis_get_response</name><argument_list pos:start="117:33" pos:end="117:41">(<argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><name pos:start="117:34" pos:end="117:34">s</name></expr></argument>, <argument pos:start="117:37" pos:end="117:40"><expr pos:start="117:37" pos:end="117:40"><name pos:start="117:37" pos:end="117:40">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="128:0"><if pos:start="119:9" pos:end="128:0">if <condition pos:start="119:12" pos:end="119:17">(<expr pos:start="119:13" pos:end="119:16"><operator pos:start="119:13" pos:end="119:13">!</operator><name pos:start="119:14" pos:end="119:16">ret</name></expr>)</condition> <block pos:start="119:19" pos:end="128:0">{<block_content pos:start="121:13" pos:end="123:20">

            <expr_stmt pos:start="121:13" pos:end="121:24"><expr pos:start="121:13" pos:end="121:23"><name pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:16">data</name><index pos:start="121:17" pos:end="121:19">[<expr pos:start="121:18" pos:end="121:18"><literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>]</index></name> <operator pos:start="121:21" pos:end="121:21">=</operator> <literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:20"><expr pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <literal type="number" pos:start="123:19" pos:end="123:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="127:1" pos:end="127:20">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:20">TRAFFIC_DEBUG</name></cpp:ifdef>

        <block pos:start="129:9" pos:end="150:0">{<block_content pos:start="131:13" pos:end="145:36">

            <decl_stmt pos:start="131:13" pos:end="131:27"><decl pos:start="131:13" pos:end="131:26"><type pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:20">unsigned</name> <name pos:start="131:22" pos:end="131:24">int</name></type> <name pos:start="131:26" pos:end="131:26">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:58"><expr pos:start="133:13" pos:end="133:57"><call pos:start="133:13" pos:end="133:57"><name pos:start="133:13" pos:end="133:19">fprintf</name><argument_list pos:start="133:20" pos:end="133:57">(<argument pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:26">stderr</name></expr></argument>, <argument pos:start="133:29" pos:end="133:56"><expr pos:start="133:29" pos:end="133:56"><literal type="string" pos:start="133:29" pos:end="133:56">"GET_ENCAPSULATED_RESPONSE:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="135:13" pos:end="143:13">for <control pos:start="135:17" pos:end="135:37">(<init pos:start="135:18" pos:end="135:23"><expr pos:start="135:18" pos:end="135:22"><name pos:start="135:18" pos:end="135:18">i</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <literal type="number" pos:start="135:22" pos:end="135:22">0</literal></expr>;</init> <condition pos:start="135:25" pos:end="135:32"><expr pos:start="135:25" pos:end="135:31"><name pos:start="135:25" pos:end="135:25">i</name> <operator pos:start="135:27" pos:end="135:27">&lt;</operator> <name pos:start="135:29" pos:end="135:31">ret</name></expr>;</condition> <incr pos:start="135:34" pos:end="135:36"><expr pos:start="135:34" pos:end="135:36"><name pos:start="135:34" pos:end="135:34">i</name><operator pos:start="135:35" pos:end="135:36">++</operator></expr></incr>)</control> <block pos:start="135:39" pos:end="143:13">{<block_content pos:start="137:17" pos:end="141:50">

                <if_stmt pos:start="137:17" pos:end="139:50"><if pos:start="137:17" pos:end="139:50">if <condition pos:start="137:20" pos:end="137:30">(<expr pos:start="137:21" pos:end="137:29"><operator pos:start="137:21" pos:end="137:21">!</operator><operator pos:start="137:22" pos:end="137:22">(</operator><name pos:start="137:23" pos:end="137:23">i</name> <operator pos:start="137:25" pos:end="137:25">&amp;</operator> <literal type="number" pos:start="137:27" pos:end="137:28">15</literal><operator pos:start="137:29" pos:end="137:29">)</operator></expr>)</condition><block type="pseudo" pos:start="139:21" pos:end="139:50"><block_content pos:start="139:21" pos:end="139:50">

                    <expr_stmt pos:start="139:21" pos:end="139:50"><expr pos:start="139:21" pos:end="139:49"><call pos:start="139:21" pos:end="139:49"><name pos:start="139:21" pos:end="139:27">fprintf</name><argument_list pos:start="139:28" pos:end="139:49">(<argument pos:start="139:29" pos:end="139:34"><expr pos:start="139:29" pos:end="139:34"><name pos:start="139:29" pos:end="139:34">stderr</name></expr></argument>, <argument pos:start="139:37" pos:end="139:45"><expr pos:start="139:37" pos:end="139:45"><literal type="string" pos:start="139:37" pos:end="139:45">"\n%04x:"</literal></expr></argument>, <argument pos:start="139:48" pos:end="139:48"><expr pos:start="139:48" pos:end="139:48"><name pos:start="139:48" pos:end="139:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:50"><expr pos:start="141:17" pos:end="141:49"><call pos:start="141:17" pos:end="141:49"><name pos:start="141:17" pos:end="141:23">fprintf</name><argument_list pos:start="141:24" pos:end="141:49">(<argument pos:start="141:25" pos:end="141:30"><expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:30">stderr</name></expr></argument>, <argument pos:start="141:33" pos:end="141:39"><expr pos:start="141:33" pos:end="141:39"><literal type="string" pos:start="141:33" pos:end="141:39">" %02x"</literal></expr></argument>, <argument pos:start="141:42" pos:end="141:48"><expr pos:start="141:42" pos:end="141:48"><name pos:start="141:42" pos:end="141:48"><name pos:start="141:42" pos:end="141:45">data</name><index pos:start="141:46" pos:end="141:48">[<expr pos:start="141:47" pos:end="141:47"><name pos:start="141:47" pos:end="141:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="145:13" pos:end="145:36"><expr pos:start="145:13" pos:end="145:35"><call pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:19">fprintf</name><argument_list pos:start="145:20" pos:end="145:35">(<argument pos:start="145:21" pos:end="145:26"><expr pos:start="145:21" pos:end="145:26"><name pos:start="145:21" pos:end="145:26">stderr</name></expr></argument>, <argument pos:start="145:29" pos:end="145:34"><expr pos:start="145:29" pos:end="145:34"><literal type="string" pos:start="145:29" pos:end="145:34">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:48">case <expr pos:start="155:10" pos:end="155:47"><name pos:start="155:10" pos:end="155:22">DeviceRequest</name> <operator pos:start="155:24" pos:end="155:24">|</operator> <name pos:start="155:26" pos:end="155:47">USB_REQ_GET_DESCRIPTOR</name></expr>:</case>

        <switch pos:start="157:9" pos:end="265:9">switch<condition pos:start="157:15" pos:end="157:26">(<expr pos:start="157:16" pos:end="157:25"><name pos:start="157:16" pos:end="157:20">value</name> <operator pos:start="157:22" pos:end="157:23">&gt;&gt;</operator> <literal type="number" pos:start="157:25" pos:end="157:25">8</literal></expr>)</condition> <block pos:start="157:28" pos:end="265:9">{<block_content pos:start="159:9" pos:end="263:22">

        <case pos:start="159:9" pos:end="159:27">case <expr pos:start="159:14" pos:end="159:26"><name pos:start="159:14" pos:end="159:26">USB_DT_DEVICE</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:50"><expr pos:start="161:13" pos:end="161:49"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <sizeof pos:start="161:19" pos:end="161:49">sizeof<argument_list pos:start="161:25" pos:end="161:49">(<argument pos:start="161:26" pos:end="161:48"><expr pos:start="161:26" pos:end="161:48"><name pos:start="161:26" pos:end="161:48">qemu_net_dev_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:55"><expr pos:start="163:13" pos:end="163:54"><call pos:start="163:13" pos:end="163:54"><name pos:start="163:13" pos:end="163:18">memcpy</name><argument_list pos:start="163:19" pos:end="163:54">(<argument pos:start="163:20" pos:end="163:23"><expr pos:start="163:20" pos:end="163:23"><name pos:start="163:20" pos:end="163:23">data</name></expr></argument>, <argument pos:start="163:26" pos:end="163:48"><expr pos:start="163:26" pos:end="163:48"><name pos:start="163:26" pos:end="163:48">qemu_net_dev_descriptor</name></expr></argument>, <argument pos:start="163:51" pos:end="163:53"><expr pos:start="163:51" pos:end="163:53"><name pos:start="163:51" pos:end="163:53">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>



        <case pos:start="169:9" pos:end="169:27">case <expr pos:start="169:14" pos:end="169:26"><name pos:start="169:14" pos:end="169:26">USB_DT_CONFIG</name></expr>:</case>

            <switch pos:start="171:13" pos:end="197:13">switch <condition pos:start="171:20" pos:end="171:33">(<expr pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:25">value</name> <operator pos:start="171:27" pos:end="171:27">&amp;</operator> <literal type="number" pos:start="171:29" pos:end="171:32">0xff</literal></expr>)</condition> <block pos:start="171:35" pos:end="197:13">{<block_content pos:start="173:13" pos:end="195:26">

            <case pos:start="173:13" pos:end="173:19">case <expr pos:start="173:18" pos:end="173:18"><literal type="number" pos:start="173:18" pos:end="173:18">0</literal></expr>:</case>

                <expr_stmt pos:start="175:17" pos:end="175:63"><expr pos:start="175:17" pos:end="175:62"><name pos:start="175:17" pos:end="175:19">ret</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <sizeof pos:start="175:23" pos:end="175:62">sizeof<argument_list pos:start="175:29" pos:end="175:62">(<argument pos:start="175:30" pos:end="175:61"><expr pos:start="175:30" pos:end="175:61"><name pos:start="175:30" pos:end="175:61">qemu_net_rndis_config_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:68"><expr pos:start="177:17" pos:end="177:67"><call pos:start="177:17" pos:end="177:67"><name pos:start="177:17" pos:end="177:22">memcpy</name><argument_list pos:start="177:23" pos:end="177:67">(<argument pos:start="177:24" pos:end="177:27"><expr pos:start="177:24" pos:end="177:27"><name pos:start="177:24" pos:end="177:27">data</name></expr></argument>, <argument pos:start="177:30" pos:end="177:61"><expr pos:start="177:30" pos:end="177:61"><name pos:start="177:30" pos:end="177:61">qemu_net_rndis_config_descriptor</name></expr></argument>, <argument pos:start="177:64" pos:end="177:66"><expr pos:start="177:64" pos:end="177:66"><name pos:start="177:64" pos:end="177:66">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="179:17" pos:end="179:22">break;</break>



            <case pos:start="183:13" pos:end="183:19">case <expr pos:start="183:18" pos:end="183:18"><literal type="number" pos:start="183:18" pos:end="183:18">1</literal></expr>:</case>

                <expr_stmt pos:start="185:17" pos:end="185:61"><expr pos:start="185:17" pos:end="185:60"><name pos:start="185:17" pos:end="185:19">ret</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <sizeof pos:start="185:23" pos:end="185:60">sizeof<argument_list pos:start="185:29" pos:end="185:60">(<argument pos:start="185:30" pos:end="185:59"><expr pos:start="185:30" pos:end="185:59"><name pos:start="185:30" pos:end="185:59">qemu_net_cdc_config_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:66"><expr pos:start="187:17" pos:end="187:65"><call pos:start="187:17" pos:end="187:65"><name pos:start="187:17" pos:end="187:22">memcpy</name><argument_list pos:start="187:23" pos:end="187:65">(<argument pos:start="187:24" pos:end="187:27"><expr pos:start="187:24" pos:end="187:27"><name pos:start="187:24" pos:end="187:27">data</name></expr></argument>, <argument pos:start="187:30" pos:end="187:59"><expr pos:start="187:30" pos:end="187:59"><name pos:start="187:30" pos:end="187:59">qemu_net_cdc_config_descriptor</name></expr></argument>, <argument pos:start="187:62" pos:end="187:64"><expr pos:start="187:62" pos:end="187:64"><name pos:start="187:62" pos:end="187:64">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="189:17" pos:end="189:22">break;</break>



            <default pos:start="193:13" pos:end="193:20">default:</default>

                <goto pos:start="195:17" pos:end="195:26">goto <name pos:start="195:22" pos:end="195:25">fail</name>;</goto>

            </block_content>}</block></switch>



            <expr_stmt pos:start="201:13" pos:end="201:33"><expr pos:start="201:13" pos:end="201:32"><name pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:16">data</name><index pos:start="201:17" pos:end="201:19">[<expr pos:start="201:18" pos:end="201:18"><literal type="number" pos:start="201:18" pos:end="201:18">2</literal></expr>]</index></name> <operator pos:start="201:21" pos:end="201:21">=</operator> <name pos:start="201:23" pos:end="201:25">ret</name> <operator pos:start="201:27" pos:end="201:27">&amp;</operator> <literal type="number" pos:start="201:29" pos:end="201:32">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:31"><expr pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:19"><name pos:start="203:13" pos:end="203:16">data</name><index pos:start="203:17" pos:end="203:19">[<expr pos:start="203:18" pos:end="203:18"><literal type="number" pos:start="203:18" pos:end="203:18">3</literal></expr>]</index></name> <operator pos:start="203:21" pos:end="203:21">=</operator> <name pos:start="203:23" pos:end="203:25">ret</name> <operator pos:start="203:27" pos:end="203:28">&gt;&gt;</operator> <literal type="number" pos:start="203:30" pos:end="203:30">8</literal></expr>;</expr_stmt>

            <break pos:start="205:13" pos:end="205:18">break;</break>



        <case pos:start="209:9" pos:end="209:27">case <expr pos:start="209:14" pos:end="209:26"><name pos:start="209:14" pos:end="209:26">USB_DT_STRING</name></expr>:</case>

            <switch pos:start="211:13" pos:end="255:13">switch <condition pos:start="211:20" pos:end="211:33">(<expr pos:start="211:21" pos:end="211:32"><name pos:start="211:21" pos:end="211:25">value</name> <operator pos:start="211:27" pos:end="211:27">&amp;</operator> <literal type="number" pos:start="211:29" pos:end="211:32">0xff</literal></expr>)</condition> <block pos:start="211:35" pos:end="255:13">{<block_content pos:start="213:13" pos:end="253:26">

            <case pos:start="213:13" pos:end="213:19">case <expr pos:start="213:18" pos:end="213:18"><literal type="number" pos:start="213:18" pos:end="213:18">0</literal></expr>:</case>

                <comment type="block" pos:start="215:17" pos:end="215:34">/* language ids */</comment>

                <expr_stmt pos:start="217:17" pos:end="217:28"><expr pos:start="217:17" pos:end="217:27"><name pos:start="217:17" pos:end="217:23"><name pos:start="217:17" pos:end="217:20">data</name><index pos:start="217:21" pos:end="217:23">[<expr pos:start="217:22" pos:end="217:22"><literal type="number" pos:start="217:22" pos:end="217:22">0</literal></expr>]</index></name> <operator pos:start="217:25" pos:end="217:25">=</operator> <literal type="number" pos:start="217:27" pos:end="217:27">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:28"><expr pos:start="219:17" pos:end="219:27"><name pos:start="219:17" pos:end="219:23"><name pos:start="219:17" pos:end="219:20">data</name><index pos:start="219:21" pos:end="219:23">[<expr pos:start="219:22" pos:end="219:22"><literal type="number" pos:start="219:22" pos:end="219:22">1</literal></expr>]</index></name> <operator pos:start="219:25" pos:end="219:25">=</operator> <literal type="number" pos:start="219:27" pos:end="219:27">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:31"><expr pos:start="221:17" pos:end="221:30"><name pos:start="221:17" pos:end="221:23"><name pos:start="221:17" pos:end="221:20">data</name><index pos:start="221:21" pos:end="221:23">[<expr pos:start="221:22" pos:end="221:22"><literal type="number" pos:start="221:22" pos:end="221:22">2</literal></expr>]</index></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <literal type="number" pos:start="221:27" pos:end="221:30">0x09</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:31"><expr pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:23"><name pos:start="223:17" pos:end="223:20">data</name><index pos:start="223:21" pos:end="223:23">[<expr pos:start="223:22" pos:end="223:22"><literal type="number" pos:start="223:22" pos:end="223:22">3</literal></expr>]</index></name> <operator pos:start="223:25" pos:end="223:25">=</operator> <literal type="number" pos:start="223:27" pos:end="223:30">0x04</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:24"><expr pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:19">ret</name> <operator pos:start="225:21" pos:end="225:21">=</operator> <literal type="number" pos:start="225:23" pos:end="225:23">4</literal></expr>;</expr_stmt>

                <break pos:start="227:17" pos:end="227:22">break;</break>



            <case pos:start="231:13" pos:end="231:32">case <expr pos:start="231:18" pos:end="231:31"><name pos:start="231:18" pos:end="231:31">STRING_ETHADDR</name></expr>:</case>

                <expr_stmt pos:start="233:17" pos:end="233:61"><expr pos:start="233:17" pos:end="233:60"><name pos:start="233:17" pos:end="233:19">ret</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <call pos:start="233:23" pos:end="233:60"><name pos:start="233:23" pos:end="233:36">set_usb_string</name><argument_list pos:start="233:37" pos:end="233:60">(<argument pos:start="233:38" pos:end="233:41"><expr pos:start="233:38" pos:end="233:41"><name pos:start="233:38" pos:end="233:41">data</name></expr></argument>, <argument pos:start="233:44" pos:end="233:59"><expr pos:start="233:44" pos:end="233:59"><name pos:start="233:44" pos:end="233:59"><name pos:start="233:44" pos:end="233:44">s</name><operator pos:start="233:45" pos:end="233:46">-&gt;</operator><name pos:start="233:47" pos:end="233:59">usbstring_mac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="235:17" pos:end="235:22">break;</break>



            <default pos:start="239:13" pos:end="239:20">default:</default>

                <if_stmt pos:start="241:17" pos:end="249:17"><if pos:start="241:17" pos:end="249:17">if <condition pos:start="241:20" pos:end="241:54">(<expr pos:start="241:21" pos:end="241:53"><name pos:start="241:21" pos:end="241:53"><name pos:start="241:21" pos:end="241:39">usb_net_stringtable</name><index pos:start="241:40" pos:end="241:53">[<expr pos:start="241:41" pos:end="241:52"><name pos:start="241:41" pos:end="241:45">value</name> <operator pos:start="241:47" pos:end="241:47">&amp;</operator> <literal type="number" pos:start="241:49" pos:end="241:52">0xff</literal></expr>]</index></name></expr>)</condition> <block pos:start="241:56" pos:end="249:17">{<block_content pos:start="243:21" pos:end="247:26">

                    <expr_stmt pos:start="243:21" pos:end="245:71"><expr pos:start="243:21" pos:end="245:70"><name pos:start="243:21" pos:end="243:23">ret</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <call pos:start="243:27" pos:end="245:70"><name pos:start="243:27" pos:end="243:40">set_usb_string</name><argument_list pos:start="243:41" pos:end="245:70">(<argument pos:start="243:42" pos:end="243:45"><expr pos:start="243:42" pos:end="243:45"><name pos:start="243:42" pos:end="243:45">data</name></expr></argument>,

                                    <argument pos:start="245:37" pos:end="245:69"><expr pos:start="245:37" pos:end="245:69"><name pos:start="245:37" pos:end="245:69"><name pos:start="245:37" pos:end="245:55">usb_net_stringtable</name><index pos:start="245:56" pos:end="245:69">[<expr pos:start="245:57" pos:end="245:68"><name pos:start="245:57" pos:end="245:61">value</name> <operator pos:start="245:63" pos:end="245:63">&amp;</operator> <literal type="number" pos:start="245:65" pos:end="245:68">0xff</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="247:21" pos:end="247:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <goto pos:start="253:17" pos:end="253:26">goto <name pos:start="253:22" pos:end="253:25">fail</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="257:13" pos:end="257:18">break;</break>



        <default pos:start="261:9" pos:end="261:16">default:</default>

            <goto pos:start="263:13" pos:end="263:22">goto <name pos:start="263:18" pos:end="263:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="267:9" pos:end="267:14">break;</break>



    <case pos:start="271:5" pos:end="271:51">case <expr pos:start="271:10" pos:end="271:50"><name pos:start="271:10" pos:end="271:22">DeviceRequest</name> <operator pos:start="271:24" pos:end="271:24">|</operator> <name pos:start="271:26" pos:end="271:50">USB_REQ_GET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="273:9" pos:end="273:71"><expr pos:start="273:9" pos:end="273:70"><name pos:start="273:9" pos:end="273:15"><name pos:start="273:9" pos:end="273:12">data</name><index pos:start="273:13" pos:end="273:15">[<expr pos:start="273:14" pos:end="273:14"><literal type="number" pos:start="273:14" pos:end="273:14">0</literal></expr>]</index></name> <operator pos:start="273:17" pos:end="273:17">=</operator> <ternary pos:start="273:19" pos:end="273:70"><condition pos:start="273:19" pos:end="273:28"><expr pos:start="273:19" pos:end="273:26"><name pos:start="273:19" pos:end="273:26"><name pos:start="273:19" pos:end="273:19">s</name><operator pos:start="273:20" pos:end="273:21">-&gt;</operator><name pos:start="273:22" pos:end="273:26">rndis</name></name></expr> ?</condition><then pos:start="273:30" pos:end="273:51"> <expr pos:start="273:30" pos:end="273:51"><name pos:start="273:30" pos:end="273:51">DEV_RNDIS_CONFIG_VALUE</name></expr> </then><else pos:start="273:53" pos:end="273:70">: <expr pos:start="273:55" pos:end="273:70"><name pos:start="273:55" pos:end="273:70">DEV_CONFIG_VALUE</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:16"><expr pos:start="275:9" pos:end="275:15"><name pos:start="275:9" pos:end="275:11">ret</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <literal type="number" pos:start="275:15" pos:end="275:15">1</literal></expr>;</expr_stmt>

        <break pos:start="277:9" pos:end="277:14">break;</break>



    <case pos:start="281:5" pos:end="281:54">case <expr pos:start="281:10" pos:end="281:53"><name pos:start="281:10" pos:end="281:25">DeviceOutRequest</name> <operator pos:start="281:27" pos:end="281:27">|</operator> <name pos:start="281:29" pos:end="281:53">USB_REQ_SET_CONFIGURATION</name></expr>:</case>

        <switch pos:start="283:9" pos:end="305:9">switch <condition pos:start="283:16" pos:end="283:29">(<expr pos:start="283:17" pos:end="283:28"><name pos:start="283:17" pos:end="283:21">value</name> <operator pos:start="283:23" pos:end="283:23">&amp;</operator> <literal type="number" pos:start="283:25" pos:end="283:28">0xff</literal></expr>)</condition> <block pos:start="283:31" pos:end="305:9">{<block_content pos:start="285:9" pos:end="303:22">

        <case pos:start="285:9" pos:end="285:30">case <expr pos:start="285:14" pos:end="285:29"><name pos:start="285:14" pos:end="285:29">DEV_CONFIG_VALUE</name></expr>:</case>

            <expr_stmt pos:start="287:13" pos:end="287:25"><expr pos:start="287:13" pos:end="287:24"><name pos:start="287:13" pos:end="287:20"><name pos:start="287:13" pos:end="287:13">s</name><operator pos:start="287:14" pos:end="287:15">-&gt;</operator><name pos:start="287:16" pos:end="287:20">rndis</name></name> <operator pos:start="287:22" pos:end="287:22">=</operator> <literal type="number" pos:start="287:24" pos:end="287:24">0</literal></expr>;</expr_stmt>

            <break pos:start="289:13" pos:end="289:18">break;</break>



        <case pos:start="293:9" pos:end="293:36">case <expr pos:start="293:14" pos:end="293:35"><name pos:start="293:14" pos:end="293:35">DEV_RNDIS_CONFIG_VALUE</name></expr>:</case>

            <expr_stmt pos:start="295:13" pos:end="295:25"><expr pos:start="295:13" pos:end="295:24"><name pos:start="295:13" pos:end="295:20"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:20">rndis</name></name> <operator pos:start="295:22" pos:end="295:22">=</operator> <literal type="number" pos:start="295:24" pos:end="295:24">1</literal></expr>;</expr_stmt>

            <break pos:start="297:13" pos:end="297:18">break;</break>



        <default pos:start="301:9" pos:end="301:16">default:</default>

            <goto pos:start="303:13" pos:end="303:22">goto <name pos:start="303:18" pos:end="303:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <expr_stmt pos:start="307:9" pos:end="307:16"><expr pos:start="307:9" pos:end="307:15"><name pos:start="307:9" pos:end="307:11">ret</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <literal type="number" pos:start="307:15" pos:end="307:15">0</literal></expr>;</expr_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>



    <case pos:start="313:5" pos:end="313:47">case <expr pos:start="313:10" pos:end="313:46"><name pos:start="313:10" pos:end="313:22">DeviceRequest</name> <operator pos:start="313:24" pos:end="313:24">|</operator> <name pos:start="313:26" pos:end="313:46">USB_REQ_GET_INTERFACE</name></expr>:</case>

    <case pos:start="315:5" pos:end="315:50">case <expr pos:start="315:10" pos:end="315:49"><name pos:start="315:10" pos:end="315:25">InterfaceRequest</name> <operator pos:start="315:27" pos:end="315:27">|</operator> <name pos:start="315:29" pos:end="315:49">USB_REQ_GET_INTERFACE</name></expr>:</case>

        <expr_stmt pos:start="317:9" pos:end="317:20"><expr pos:start="317:9" pos:end="317:19"><name pos:start="317:9" pos:end="317:15"><name pos:start="317:9" pos:end="317:12">data</name><index pos:start="317:13" pos:end="317:15">[<expr pos:start="317:14" pos:end="317:14"><literal type="number" pos:start="317:14" pos:end="317:14">0</literal></expr>]</index></name> <operator pos:start="317:17" pos:end="317:17">=</operator> <literal type="number" pos:start="317:19" pos:end="317:19">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:16"><expr pos:start="319:9" pos:end="319:15"><name pos:start="319:9" pos:end="319:11">ret</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <literal type="number" pos:start="319:15" pos:end="319:15">1</literal></expr>;</expr_stmt>

        <break pos:start="321:9" pos:end="321:14">break;</break>



    <case pos:start="325:5" pos:end="325:50">case <expr pos:start="325:10" pos:end="325:49"><name pos:start="325:10" pos:end="325:25">DeviceOutRequest</name> <operator pos:start="325:27" pos:end="325:27">|</operator> <name pos:start="325:29" pos:end="325:49">USB_REQ_SET_INTERFACE</name></expr>:</case>

    <case pos:start="327:5" pos:end="327:53">case <expr pos:start="327:10" pos:end="327:52"><name pos:start="327:10" pos:end="327:28">InterfaceOutRequest</name> <operator pos:start="327:30" pos:end="327:30">|</operator> <name pos:start="327:32" pos:end="327:52">USB_REQ_SET_INTERFACE</name></expr>:</case>

        <expr_stmt pos:start="329:9" pos:end="329:16"><expr pos:start="329:9" pos:end="329:15"><name pos:start="329:9" pos:end="329:11">ret</name> <operator pos:start="329:13" pos:end="329:13">=</operator> <literal type="number" pos:start="329:15" pos:end="329:15">0</literal></expr>;</expr_stmt>

        <break pos:start="331:9" pos:end="331:14">break;</break>



    <default pos:start="335:5" pos:end="335:12">default:</default>

    <label pos:start="337:5" pos:end="337:9"><name pos:start="337:5" pos:end="337:8">fail</name>:</label>

        <expr_stmt pos:start="339:9" pos:end="343:55"><expr pos:start="339:9" pos:end="343:54"><call pos:start="339:9" pos:end="343:54"><name pos:start="339:9" pos:end="339:15">fprintf</name><argument_list pos:start="339:16" pos:end="343:54">(<argument pos:start="339:17" pos:end="339:22"><expr pos:start="339:17" pos:end="339:22"><name pos:start="339:17" pos:end="339:22">stderr</name></expr></argument>, <argument pos:start="339:25" pos:end="341:74"><expr pos:start="339:25" pos:end="341:74"><literal type="string" pos:start="339:25" pos:end="339:62">"usbnet: failed control transaction: "</literal>

                        <literal type="string" pos:start="341:25" pos:end="341:74">"request 0x%x value 0x%x index 0x%x length 0x%x\n"</literal></expr></argument>,

                        <argument pos:start="343:25" pos:end="343:31"><expr pos:start="343:25" pos:end="343:31"><name pos:start="343:25" pos:end="343:31">request</name></expr></argument>, <argument pos:start="343:34" pos:end="343:38"><expr pos:start="343:34" pos:end="343:38"><name pos:start="343:34" pos:end="343:38">value</name></expr></argument>, <argument pos:start="343:41" pos:end="343:45"><expr pos:start="343:41" pos:end="343:45"><name pos:start="343:41" pos:end="343:45">index</name></expr></argument>, <argument pos:start="343:48" pos:end="343:53"><expr pos:start="343:48" pos:end="343:53"><name pos:start="343:48" pos:end="343:53">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:28"><expr pos:start="345:9" pos:end="345:27"><name pos:start="345:9" pos:end="345:11">ret</name> <operator pos:start="345:13" pos:end="345:13">=</operator> <name pos:start="345:15" pos:end="345:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="347:9" pos:end="347:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="351:5" pos:end="351:15">return <expr pos:start="351:12" pos:end="351:14"><name pos:start="351:12" pos:end="351:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
