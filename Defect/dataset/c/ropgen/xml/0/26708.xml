<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26708.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">vdi_open</name><parameter_list pos:start="1:20" pos:end="1:52">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:51"><decl pos:start="1:43" pos:end="1:51"><type pos:start="1:43" pos:end="1:51"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:51">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVVdiState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">VdiHeader</name></type> <name pos:start="7:15" pos:end="7:20">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:20">bmap_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><call pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">logout</name><argument_list pos:start="15:11" pos:end="15:16">(<argument pos:start="15:12" pos:end="15:15"><expr pos:start="15:12" pos:end="15:15"><literal type="string" pos:start="15:12" pos:end="15:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:56"><expr pos:start="19:5" pos:end="19:55"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:55"><name pos:start="19:11" pos:end="19:19">bdrv_read</name><argument_list pos:start="19:20" pos:end="19:55">(<argument pos:start="19:21" pos:end="19:28"><expr pos:start="19:21" pos:end="19:28"><name pos:start="19:21" pos:end="19:28"><name pos:start="19:21" pos:end="19:22">bs</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:28">file</name></name></expr></argument>, <argument pos:start="19:31" pos:end="19:31"><expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr></argument>, <argument pos:start="19:34" pos:end="19:51"><expr pos:start="19:34" pos:end="19:51"><operator pos:start="19:34" pos:end="19:34">(</operator><name pos:start="19:35" pos:end="19:41">uint8_t</name> <operator pos:start="19:43" pos:end="19:43">*</operator><operator pos:start="19:44" pos:end="19:44">)</operator><operator pos:start="19:45" pos:end="19:45">&amp;</operator><name pos:start="19:46" pos:end="19:51">header</name></expr></argument>, <argument pos:start="19:54" pos:end="19:54"><expr pos:start="19:54" pos:end="19:54"><literal type="number" pos:start="19:54" pos:end="19:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:18">

        <goto pos:start="23:9" pos:end="23:18">goto <name pos:start="23:14" pos:end="23:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:30"><call pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:21">vdi_header_to_cpu</name><argument_list pos:start="29:22" pos:end="29:30">(<argument pos:start="29:23" pos:end="29:29"><expr pos:start="29:23" pos:end="29:29"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:29">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="31:1" pos:end="31:29">#<cpp:directive pos:start="31:2" pos:end="31:3">if</cpp:directive> <expr pos:start="31:5" pos:end="31:29"><call pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:11">defined</name><argument_list pos:start="31:12" pos:end="31:29">(<argument pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:28">CONFIG_VDI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:20">vdi_header_print</name><argument_list pos:start="33:21" pos:end="33:29">(<argument pos:start="33:22" pos:end="33:28"><expr pos:start="33:22" pos:end="33:28"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="39:5" pos:end="53:5"><if pos:start="39:5" pos:end="53:5">if <condition pos:start="39:8" pos:end="39:44">(<expr pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:14">header</name><operator pos:start="39:15" pos:end="39:15">.</operator><name pos:start="39:16" pos:end="39:24">disk_size</name></name> <operator pos:start="39:26" pos:end="39:26">%</operator> <name pos:start="39:28" pos:end="39:38">SECTOR_SIZE</name> <operator pos:start="39:40" pos:end="39:41">!=</operator> <literal type="number" pos:start="39:43" pos:end="39:43">0</literal></expr>)</condition> <block pos:start="39:46" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:47">

        <comment type="block" pos:start="41:9" pos:end="45:26">/* 'VBoxManage convertfromraw' can create images with odd disk sizes.

           We accept them but round the disk size to the next multiple of

           SECTOR_SIZE. */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:76"><expr pos:start="47:9" pos:end="47:75"><call pos:start="47:9" pos:end="47:75"><name pos:start="47:9" pos:end="47:14">logout</name><argument_list pos:start="47:15" pos:end="47:75">(<argument pos:start="47:16" pos:end="47:56"><expr pos:start="47:16" pos:end="47:56"><literal type="string" pos:start="47:16" pos:end="47:32">"odd disk size %"</literal> <name pos:start="47:34" pos:end="47:39">PRIu64</name> <literal type="string" pos:start="47:41" pos:end="47:56">" B, round up\n"</literal></expr></argument>, <argument pos:start="47:59" pos:end="47:74"><expr pos:start="47:59" pos:end="47:74"><name pos:start="47:59" pos:end="47:74"><name pos:start="47:59" pos:end="47:64">header</name><operator pos:start="47:65" pos:end="47:65">.</operator><name pos:start="47:66" pos:end="47:74">disk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:14">header</name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:24">disk_size</name></name> <operator pos:start="49:26" pos:end="49:27">+=</operator> <name pos:start="49:29" pos:end="49:39">SECTOR_SIZE</name> <operator pos:start="49:41" pos:end="49:41">-</operator> <literal type="number" pos:start="49:43" pos:end="49:43">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:14">header</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:24">disk_size</name></name> <operator pos:start="51:26" pos:end="51:27">&amp;=</operator> <operator pos:start="51:29" pos:end="51:29">~</operator><operator pos:start="51:30" pos:end="51:30">(</operator><name pos:start="51:31" pos:end="51:41">SECTOR_SIZE</name> <operator pos:start="51:43" pos:end="51:43">-</operator> <literal type="number" pos:start="51:45" pos:end="51:45">1</literal><operator pos:start="51:46" pos:end="51:46">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="129:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:42">(<expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:14">header</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:22">version</name></name> <operator pos:start="57:24" pos:end="57:25">!=</operator> <name pos:start="57:27" pos:end="57:41">VDI_VERSION_1_1</name></expr>)</condition> <block pos:start="57:44" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:18">

        <expr_stmt pos:start="59:9" pos:end="61:62"><expr pos:start="59:9" pos:end="61:61"><call pos:start="59:9" pos:end="61:61"><name pos:start="59:9" pos:end="59:14">logout</name><argument_list pos:start="59:15" pos:end="61:61">(<argument pos:start="59:16" pos:end="59:44"><expr pos:start="59:16" pos:end="59:44"><literal type="string" pos:start="59:16" pos:end="59:44">"unsupported version %u.%u\n"</literal></expr></argument>,

               <argument pos:start="61:16" pos:end="61:35"><expr pos:start="61:16" pos:end="61:35"><name pos:start="61:16" pos:end="61:29"><name pos:start="61:16" pos:end="61:21">header</name><operator pos:start="61:22" pos:end="61:22">.</operator><name pos:start="61:23" pos:end="61:29">version</name></name> <operator pos:start="61:31" pos:end="61:32">&gt;&gt;</operator> <literal type="number" pos:start="61:34" pos:end="61:35">16</literal></expr></argument>, <argument pos:start="61:38" pos:end="61:60"><expr pos:start="61:38" pos:end="61:60"><name pos:start="61:38" pos:end="61:51"><name pos:start="61:38" pos:end="61:43">header</name><operator pos:start="61:44" pos:end="61:44">.</operator><name pos:start="61:45" pos:end="61:51">version</name></name> <operator pos:start="61:53" pos:end="61:53">&amp;</operator> <literal type="number" pos:start="61:55" pos:end="61:60">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="77:5">else if <condition pos:start="67:15" pos:end="67:53">(<expr pos:start="67:16" pos:end="67:52"><name pos:start="67:16" pos:end="67:33"><name pos:start="67:16" pos:end="67:21">header</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:33">offset_bmap</name></name> <operator pos:start="67:35" pos:end="67:35">%</operator> <name pos:start="67:37" pos:end="67:47">SECTOR_SIZE</name> <operator pos:start="67:49" pos:end="67:50">!=</operator> <literal type="number" pos:start="67:52" pos:end="67:52">0</literal></expr>)</condition> <block pos:start="67:55" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:18">

        <comment type="block" pos:start="69:9" pos:end="69:74">/* We only support block maps which start on a sector boundary. */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:76"><expr pos:start="71:9" pos:end="71:75"><call pos:start="71:9" pos:end="71:75"><name pos:start="71:9" pos:end="71:14">logout</name><argument_list pos:start="71:15" pos:end="71:75">(<argument pos:start="71:16" pos:end="71:54"><expr pos:start="71:16" pos:end="71:54"><literal type="string" pos:start="71:16" pos:end="71:54">"unsupported block map offset 0x%x B\n"</literal></expr></argument>, <argument pos:start="71:57" pos:end="71:74"><expr pos:start="71:57" pos:end="71:74"><name pos:start="71:57" pos:end="71:74"><name pos:start="71:57" pos:end="71:62">header</name><operator pos:start="71:63" pos:end="71:63">.</operator><name pos:start="71:64" pos:end="71:74">offset_bmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">-</operator><name pos:start="73:16" pos:end="73:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:18">goto <name pos:start="75:14" pos:end="75:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="87:5">else if <condition pos:start="77:15" pos:end="77:53">(<expr pos:start="77:16" pos:end="77:52"><name pos:start="77:16" pos:end="77:33"><name pos:start="77:16" pos:end="77:21">header</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:33">offset_data</name></name> <operator pos:start="77:35" pos:end="77:35">%</operator> <name pos:start="77:37" pos:end="77:47">SECTOR_SIZE</name> <operator pos:start="77:49" pos:end="77:50">!=</operator> <literal type="number" pos:start="77:52" pos:end="77:52">0</literal></expr>)</condition> <block pos:start="77:55" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:18">

        <comment type="block" pos:start="79:9" pos:end="79:75">/* We only support data blocks which start on a sector boundary. */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:71"><expr pos:start="81:9" pos:end="81:70"><call pos:start="81:9" pos:end="81:70"><name pos:start="81:9" pos:end="81:14">logout</name><argument_list pos:start="81:15" pos:end="81:70">(<argument pos:start="81:16" pos:end="81:49"><expr pos:start="81:16" pos:end="81:49"><literal type="string" pos:start="81:16" pos:end="81:49">"unsupported data offset 0x%x B\n"</literal></expr></argument>, <argument pos:start="81:52" pos:end="81:69"><expr pos:start="81:52" pos:end="81:69"><name pos:start="81:52" pos:end="81:69"><name pos:start="81:52" pos:end="81:57">header</name><operator pos:start="81:58" pos:end="81:58">.</operator><name pos:start="81:59" pos:end="81:69">offset_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:23"><expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="95:5">else if <condition pos:start="87:15" pos:end="87:49">(<expr pos:start="87:16" pos:end="87:48"><name pos:start="87:16" pos:end="87:33"><name pos:start="87:16" pos:end="87:21">header</name><operator pos:start="87:22" pos:end="87:22">.</operator><name pos:start="87:23" pos:end="87:33">sector_size</name></name> <operator pos:start="87:35" pos:end="87:36">!=</operator> <name pos:start="87:38" pos:end="87:48">SECTOR_SIZE</name></expr>)</condition> <block pos:start="87:51" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:18">

        <expr_stmt pos:start="89:9" pos:end="89:69"><expr pos:start="89:9" pos:end="89:68"><call pos:start="89:9" pos:end="89:68"><name pos:start="89:9" pos:end="89:14">logout</name><argument_list pos:start="89:15" pos:end="89:68">(<argument pos:start="89:16" pos:end="89:47"><expr pos:start="89:16" pos:end="89:47"><literal type="string" pos:start="89:16" pos:end="89:47">"unsupported sector size %u B\n"</literal></expr></argument>, <argument pos:start="89:50" pos:end="89:67"><expr pos:start="89:50" pos:end="89:67"><name pos:start="89:50" pos:end="89:67"><name pos:start="89:50" pos:end="89:55">header</name><operator pos:start="89:56" pos:end="89:56">.</operator><name pos:start="89:57" pos:end="89:67">sector_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:23"><expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <operator pos:start="91:15" pos:end="91:15">-</operator><name pos:start="91:16" pos:end="91:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:18">goto <name pos:start="93:14" pos:end="93:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="103:5">else if <condition pos:start="95:15" pos:end="95:44">(<expr pos:start="95:16" pos:end="95:43"><name pos:start="95:16" pos:end="95:32"><name pos:start="95:16" pos:end="95:21">header</name><operator pos:start="95:22" pos:end="95:22">.</operator><name pos:start="95:23" pos:end="95:32">block_size</name></name> <operator pos:start="95:34" pos:end="95:35">!=</operator> <literal type="number" pos:start="95:37" pos:end="95:37">1</literal> <operator pos:start="95:39" pos:end="95:39">*</operator> <name pos:start="95:41" pos:end="95:43">MiB</name></expr>)</condition> <block pos:start="95:46" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:18">

        <expr_stmt pos:start="97:9" pos:end="97:67"><expr pos:start="97:9" pos:end="97:66"><call pos:start="97:9" pos:end="97:66"><name pos:start="97:9" pos:end="97:14">logout</name><argument_list pos:start="97:15" pos:end="97:66">(<argument pos:start="97:16" pos:end="97:46"><expr pos:start="97:16" pos:end="97:46"><literal type="string" pos:start="97:16" pos:end="97:46">"unsupported block size %u B\n"</literal></expr></argument>, <argument pos:start="97:49" pos:end="97:65"><expr pos:start="97:49" pos:end="97:65"><name pos:start="97:49" pos:end="97:65"><name pos:start="97:49" pos:end="97:54">header</name><operator pos:start="97:55" pos:end="97:55">.</operator><name pos:start="97:56" pos:end="97:65">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:23"><expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <operator pos:start="99:15" pos:end="99:15">-</operator><name pos:start="99:16" pos:end="99:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="103:7" pos:end="113:5">else if <condition pos:start="103:15" pos:end="105:68">(<expr pos:start="103:16" pos:end="105:67"><name pos:start="103:16" pos:end="103:31"><name pos:start="103:16" pos:end="103:21">header</name><operator pos:start="103:22" pos:end="103:22">.</operator><name pos:start="103:23" pos:end="103:31">disk_size</name></name> <operator pos:start="103:33" pos:end="103:33">&gt;</operator>

               <operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:24">uint64_t</name><operator pos:start="105:25" pos:end="105:25">)</operator><name pos:start="105:26" pos:end="105:47"><name pos:start="105:26" pos:end="105:31">header</name><operator pos:start="105:32" pos:end="105:32">.</operator><name pos:start="105:33" pos:end="105:47">blocks_in_image</name></name> <operator pos:start="105:49" pos:end="105:49">*</operator> <name pos:start="105:51" pos:end="105:67"><name pos:start="105:51" pos:end="105:56">header</name><operator pos:start="105:57" pos:end="105:57">.</operator><name pos:start="105:58" pos:end="105:67">block_size</name></name></expr>)</condition> <block pos:start="105:70" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:18">

        <expr_stmt pos:start="107:9" pos:end="107:74"><expr pos:start="107:9" pos:end="107:73"><call pos:start="107:9" pos:end="107:73"><name pos:start="107:9" pos:end="107:14">logout</name><argument_list pos:start="107:15" pos:end="107:73">(<argument pos:start="107:16" pos:end="107:54"><expr pos:start="107:16" pos:end="107:54"><literal type="string" pos:start="107:16" pos:end="107:40">"unsupported disk size %"</literal> <name pos:start="107:42" pos:end="107:47">PRIu64</name> <literal type="string" pos:start="107:49" pos:end="107:54">" B\n"</literal></expr></argument>, <argument pos:start="107:57" pos:end="107:72"><expr pos:start="107:57" pos:end="107:72"><name pos:start="107:57" pos:end="107:72"><name pos:start="107:57" pos:end="107:62">header</name><operator pos:start="107:63" pos:end="107:63">.</operator><name pos:start="107:64" pos:end="107:72">disk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:23"><expr pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">-</operator><name pos:start="109:16" pos:end="109:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:18">goto <name pos:start="111:14" pos:end="111:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="113:7" pos:end="121:5">else if <condition pos:start="113:15" pos:end="113:47">(<expr pos:start="113:16" pos:end="113:46"><operator pos:start="113:16" pos:end="113:16">!</operator><call pos:start="113:17" pos:end="113:46"><name pos:start="113:17" pos:end="113:28">uuid_is_null</name><argument_list pos:start="113:29" pos:end="113:46">(<argument pos:start="113:30" pos:end="113:45"><expr pos:start="113:30" pos:end="113:45"><name pos:start="113:30" pos:end="113:45"><name pos:start="113:30" pos:end="113:35">header</name><operator pos:start="113:36" pos:end="113:36">.</operator><name pos:start="113:37" pos:end="113:45">uuid_link</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:49" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:18">

        <expr_stmt pos:start="115:9" pos:end="115:48"><expr pos:start="115:9" pos:end="115:47"><call pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:14">logout</name><argument_list pos:start="115:15" pos:end="115:47">(<argument pos:start="115:16" pos:end="115:46"><expr pos:start="115:16" pos:end="115:46"><literal type="string" pos:start="115:16" pos:end="115:46">"link uuid != 0, unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:23"><expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <operator pos:start="117:15" pos:end="117:15">-</operator><name pos:start="117:16" pos:end="117:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="129:5">else if <condition pos:start="121:15" pos:end="121:49">(<expr pos:start="121:16" pos:end="121:48"><operator pos:start="121:16" pos:end="121:16">!</operator><call pos:start="121:17" pos:end="121:48"><name pos:start="121:17" pos:end="121:28">uuid_is_null</name><argument_list pos:start="121:29" pos:end="121:48">(<argument pos:start="121:30" pos:end="121:47"><expr pos:start="121:30" pos:end="121:47"><name pos:start="121:30" pos:end="121:47"><name pos:start="121:30" pos:end="121:35">header</name><operator pos:start="121:36" pos:end="121:36">.</operator><name pos:start="121:37" pos:end="121:47">uuid_parent</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:51" pos:end="129:5">{<block_content pos:start="123:9" pos:end="127:18">

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><call pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:14">logout</name><argument_list pos:start="123:15" pos:end="123:49">(<argument pos:start="123:16" pos:end="123:48"><expr pos:start="123:16" pos:end="123:48"><literal type="string" pos:start="123:16" pos:end="123:48">"parent uuid != 0, unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:23"><expr pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <operator pos:start="125:15" pos:end="125:15">-</operator><name pos:start="125:16" pos:end="125:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="127:9" pos:end="127:18">goto <name pos:start="127:14" pos:end="127:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:55"><expr pos:start="133:5" pos:end="133:54"><name pos:start="133:5" pos:end="133:21"><name pos:start="133:5" pos:end="133:6">bs</name><operator pos:start="133:7" pos:end="133:8">-&gt;</operator><name pos:start="133:9" pos:end="133:21">total_sectors</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:40"><name pos:start="133:25" pos:end="133:30">header</name><operator pos:start="133:31" pos:end="133:31">.</operator><name pos:start="133:32" pos:end="133:40">disk_size</name></name> <operator pos:start="133:42" pos:end="133:42">/</operator> <name pos:start="133:44" pos:end="133:54">SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:38"><expr pos:start="137:5" pos:end="137:37"><name pos:start="137:5" pos:end="137:17"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:17">block_size</name></name> <operator pos:start="137:19" pos:end="137:19">=</operator> <name pos:start="137:21" pos:end="137:37"><name pos:start="137:21" pos:end="137:26">header</name><operator pos:start="137:27" pos:end="137:27">.</operator><name pos:start="137:28" pos:end="137:37">block_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:55"><expr pos:start="139:5" pos:end="139:54"><name pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:20">block_sectors</name></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:40"><name pos:start="139:24" pos:end="139:29">header</name><operator pos:start="139:30" pos:end="139:30">.</operator><name pos:start="139:31" pos:end="139:40">block_size</name></name> <operator pos:start="139:42" pos:end="139:42">/</operator> <name pos:start="139:44" pos:end="139:54">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:54"><expr pos:start="141:5" pos:end="141:53"><name pos:start="141:5" pos:end="141:18"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:18">bmap_sector</name></name> <operator pos:start="141:20" pos:end="141:20">=</operator> <name pos:start="141:22" pos:end="141:39"><name pos:start="141:22" pos:end="141:27">header</name><operator pos:start="141:28" pos:end="141:28">.</operator><name pos:start="141:29" pos:end="141:39">offset_bmap</name></name> <operator pos:start="141:41" pos:end="141:41">/</operator> <name pos:start="141:43" pos:end="141:53">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:23"><expr pos:start="143:5" pos:end="143:22"><name pos:start="143:5" pos:end="143:13"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:13">header</name></name> <operator pos:start="143:15" pos:end="143:15">=</operator> <name pos:start="143:17" pos:end="143:22">header</name></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:58"><expr pos:start="147:5" pos:end="147:57"><name pos:start="147:5" pos:end="147:13">bmap_size</name> <operator pos:start="147:15" pos:end="147:15">=</operator> <name pos:start="147:17" pos:end="147:38"><name pos:start="147:17" pos:end="147:22">header</name><operator pos:start="147:23" pos:end="147:23">.</operator><name pos:start="147:24" pos:end="147:38">blocks_in_image</name></name> <operator pos:start="147:40" pos:end="147:40">*</operator> <sizeof pos:start="147:42" pos:end="147:57">sizeof<argument_list pos:start="147:48" pos:end="147:57">(<argument pos:start="147:49" pos:end="147:56"><expr pos:start="147:49" pos:end="147:56"><name pos:start="147:49" pos:end="147:56">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:60"><expr pos:start="149:5" pos:end="149:59"><name pos:start="149:5" pos:end="149:13">bmap_size</name> <operator pos:start="149:15" pos:end="149:15">=</operator> <operator pos:start="149:17" pos:end="149:17">(</operator><name pos:start="149:18" pos:end="149:26">bmap_size</name> <operator pos:start="149:28" pos:end="149:28">+</operator> <name pos:start="149:30" pos:end="149:40">SECTOR_SIZE</name> <operator pos:start="149:42" pos:end="149:42">-</operator> <literal type="number" pos:start="149:44" pos:end="149:44">1</literal><operator pos:start="149:45" pos:end="149:45">)</operator> <operator pos:start="149:47" pos:end="149:47">/</operator> <name pos:start="149:49" pos:end="149:59">SECTOR_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:22">(<expr pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:17">bmap_size</name> <operator pos:start="151:19" pos:end="151:19">&gt;</operator> <literal type="number" pos:start="151:21" pos:end="151:21">0</literal></expr>)</condition> <block pos:start="151:24" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:52">

        <expr_stmt pos:start="153:9" pos:end="153:52"><expr pos:start="153:9" pos:end="153:51"><name pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:15">bmap</name></name> <operator pos:start="153:17" pos:end="153:17">=</operator> <call pos:start="153:19" pos:end="153:51"><name pos:start="153:19" pos:end="153:26">g_malloc</name><argument_list pos:start="153:27" pos:end="153:51">(<argument pos:start="153:28" pos:end="153:50"><expr pos:start="153:28" pos:end="153:50"><name pos:start="153:28" pos:end="153:36">bmap_size</name> <operator pos:start="153:38" pos:end="153:38">*</operator> <name pos:start="153:40" pos:end="153:50">SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:77"><expr pos:start="157:5" pos:end="157:76"><name pos:start="157:5" pos:end="157:7">ret</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <call pos:start="157:11" pos:end="157:76"><name pos:start="157:11" pos:end="157:19">bdrv_read</name><argument_list pos:start="157:20" pos:end="157:76">(<argument pos:start="157:21" pos:end="157:28"><expr pos:start="157:21" pos:end="157:28"><name pos:start="157:21" pos:end="157:28"><name pos:start="157:21" pos:end="157:22">bs</name><operator pos:start="157:23" pos:end="157:24">-&gt;</operator><name pos:start="157:25" pos:end="157:28">file</name></name></expr></argument>, <argument pos:start="157:31" pos:end="157:44"><expr pos:start="157:31" pos:end="157:44"><name pos:start="157:31" pos:end="157:44"><name pos:start="157:31" pos:end="157:31">s</name><operator pos:start="157:32" pos:end="157:33">-&gt;</operator><name pos:start="157:34" pos:end="157:44">bmap_sector</name></name></expr></argument>, <argument pos:start="157:47" pos:end="157:64"><expr pos:start="157:47" pos:end="157:64"><operator pos:start="157:47" pos:end="157:47">(</operator><name pos:start="157:48" pos:end="157:54">uint8_t</name> <operator pos:start="157:56" pos:end="157:56">*</operator><operator pos:start="157:57" pos:end="157:57">)</operator><name pos:start="157:58" pos:end="157:64"><name pos:start="157:58" pos:end="157:58">s</name><operator pos:start="157:59" pos:end="157:60">-&gt;</operator><name pos:start="157:61" pos:end="157:64">bmap</name></name></expr></argument>, <argument pos:start="157:67" pos:end="157:75"><expr pos:start="157:67" pos:end="157:75"><name pos:start="157:67" pos:end="157:75">bmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:16">(<expr pos:start="159:9" pos:end="159:15"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">&lt;</operator> <literal type="number" pos:start="159:15" pos:end="159:15">0</literal></expr>)</condition> <block pos:start="159:18" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:28">

        <goto pos:start="161:9" pos:end="161:28">goto <name pos:start="161:14" pos:end="161:27">fail_free_bmap</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:52">/* Disable migration when vdi images are used */</comment>

    <expr_stmt pos:start="169:5" pos:end="173:56"><expr pos:start="169:5" pos:end="173:55"><call pos:start="169:5" pos:end="173:55"><name pos:start="169:5" pos:end="169:13">error_set</name><argument_list pos:start="169:14" pos:end="173:55">(<argument pos:start="169:15" pos:end="169:35"><expr pos:start="169:15" pos:end="169:35"><operator pos:start="169:15" pos:end="169:15">&amp;</operator><name pos:start="169:16" pos:end="169:35"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:35">migration_blocker</name></name></expr></argument>,

              <argument pos:start="171:15" pos:end="171:53"><expr pos:start="171:15" pos:end="171:53"><name pos:start="171:15" pos:end="171:53">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

              <argument pos:start="173:15" pos:end="173:19"><expr pos:start="173:15" pos:end="173:19"><literal type="string" pos:start="173:15" pos:end="173:19">"vdi"</literal></expr></argument>, <argument pos:start="173:22" pos:end="173:36"><expr pos:start="173:22" pos:end="173:36"><name pos:start="173:22" pos:end="173:36"><name pos:start="173:22" pos:end="173:23">bs</name><operator pos:start="173:24" pos:end="173:25">-&gt;</operator><name pos:start="173:26" pos:end="173:36">device_name</name></name></expr></argument>, <argument pos:start="173:39" pos:end="173:54"><expr pos:start="173:39" pos:end="173:54"><literal type="string" pos:start="173:39" pos:end="173:54">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:46"><expr pos:start="175:5" pos:end="175:45"><call pos:start="175:5" pos:end="175:45"><name pos:start="175:5" pos:end="175:23">migrate_add_blocker</name><argument_list pos:start="175:24" pos:end="175:45">(<argument pos:start="175:25" pos:end="175:44"><expr pos:start="175:25" pos:end="175:44"><name pos:start="175:25" pos:end="175:44"><name pos:start="175:25" pos:end="175:25">s</name><operator pos:start="175:26" pos:end="175:27">-&gt;</operator><name pos:start="175:28" pos:end="175:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="179:5" pos:end="179:13">return <expr pos:start="179:12" pos:end="179:12"><literal type="number" pos:start="179:12" pos:end="179:12">0</literal></expr>;</return>



 <label pos:start="183:2" pos:end="183:16"><name pos:start="183:2" pos:end="183:15">fail_free_bmap</name>:</label>

    <expr_stmt pos:start="185:5" pos:end="185:20"><expr pos:start="185:5" pos:end="185:19"><call pos:start="185:5" pos:end="185:19"><name pos:start="185:5" pos:end="185:10">g_free</name><argument_list pos:start="185:11" pos:end="185:19">(<argument pos:start="185:12" pos:end="185:18"><expr pos:start="185:12" pos:end="185:18"><name pos:start="185:12" pos:end="185:18"><name pos:start="185:12" pos:end="185:12">s</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:18">bmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



 <label pos:start="189:2" pos:end="189:6"><name pos:start="189:2" pos:end="189:5">fail</name>:</label>

    <return pos:start="191:5" pos:end="191:15">return <expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
