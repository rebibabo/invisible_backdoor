<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5689.c" pos:tabs="8"><function pos:start="1:1" pos:end="1487:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">disas_vfp_insn</name><parameter_list pos:start="1:26" pos:end="1:73">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type> <name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:57"><decl pos:start="1:43" pos:end="1:57"><type pos:start="1:43" pos:end="1:57"><name pos:start="1:43" pos:end="1:54">DisasContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:72"><decl pos:start="1:60" pos:end="1:72"><type pos:start="1:60" pos:end="1:72"><name pos:start="1:60" pos:end="1:67">uint32_t</name></type> <name pos:start="1:69" pos:end="1:72">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1487:1">{<block_content pos:start="5:5" pos:end="1485:13">

    <decl_stmt pos:start="5:5" pos:end="5:71"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">rd</name></decl>, <decl pos:start="5:18" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:18" pos:end="5:19">rn</name></decl>, <decl pos:start="5:22" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:22" pos:end="5:23">rm</name></decl>, <decl pos:start="5:26" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:26" pos:end="5:27">op</name></decl>, <decl pos:start="5:30" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:30" pos:end="5:30">i</name></decl>, <decl pos:start="5:33" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:33" pos:end="5:33">n</name></decl>, <decl pos:start="5:36" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:36" pos:end="5:41">offset</name></decl>, <decl pos:start="5:44" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:44" pos:end="5:50">delta_d</name></decl>, <decl pos:start="5:53" pos:end="5:59"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:53" pos:end="5:59">delta_m</name></decl>, <decl pos:start="5:62" pos:end="5:70"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:62" pos:end="5:70">bank_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">dp</name></decl>, <decl pos:start="7:13" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:18">veclen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:13">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:12">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">TCGv</name></type> <name pos:start="13:10" pos:end="13:13">tmp2</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:42"><name pos:start="17:10" pos:end="17:20">arm_feature</name><argument_list pos:start="17:21" pos:end="17:42">(<argument pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><name pos:start="17:22" pos:end="17:24">env</name></expr></argument>, <argument pos:start="17:27" pos:end="17:41"><expr pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:41">ARM_FEATURE_VFP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:23"><name pos:start="23:10" pos:end="23:10">s</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:23">vfp_enabled</name></name></expr>)</condition> <block pos:start="23:26" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:21">

        <comment type="block" pos:start="25:9" pos:end="25:77">/* VFP disabled.  Only allow fmxr/fmrx to/from some control regs.  */</comment>

        <if_stmt pos:start="27:9" pos:end="29:21"><if pos:start="27:9" pos:end="29:21">if <condition pos:start="27:12" pos:end="27:46">(<expr pos:start="27:13" pos:end="27:45"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:17">insn</name> <operator pos:start="27:19" pos:end="27:19">&amp;</operator> <literal type="number" pos:start="27:21" pos:end="27:30">0x0fe00fff</literal><operator pos:start="27:31" pos:end="27:31">)</operator> <operator pos:start="27:33" pos:end="27:34">!=</operator> <literal type="number" pos:start="27:36" pos:end="27:45">0x0ee00a10</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:21"><block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:10">rn</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:18">insn</name> <operator pos:start="31:20" pos:end="31:21">&gt;&gt;</operator> <literal type="number" pos:start="31:23" pos:end="31:24">16</literal><operator pos:start="31:25" pos:end="31:25">)</operator> <operator pos:start="31:27" pos:end="31:27">&amp;</operator> <literal type="number" pos:start="31:29" pos:end="31:31">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:21"><if pos:start="33:9" pos:end="37:21">if <condition pos:start="33:12" pos:end="35:58">(<expr pos:start="33:13" pos:end="35:57"><name pos:start="33:13" pos:end="33:14">rn</name> <operator pos:start="33:16" pos:end="33:17">!=</operator> <name pos:start="33:19" pos:end="33:31">ARM_VFP_FPSID</name> <operator pos:start="33:33" pos:end="33:34">&amp;&amp;</operator> <name pos:start="33:36" pos:end="33:37">rn</name> <operator pos:start="33:39" pos:end="33:40">!=</operator> <name pos:start="33:42" pos:end="33:54">ARM_VFP_FPEXC</name>

            <operator pos:start="35:13" pos:end="35:14">&amp;&amp;</operator> <name pos:start="35:16" pos:end="35:17">rn</name> <operator pos:start="35:19" pos:end="35:20">!=</operator> <name pos:start="35:22" pos:end="35:34">ARM_VFP_MVFR1</name> <operator pos:start="35:36" pos:end="35:37">&amp;&amp;</operator> <name pos:start="35:39" pos:end="35:40">rn</name> <operator pos:start="35:42" pos:end="35:43">!=</operator> <name pos:start="35:45" pos:end="35:57">ARM_VFP_MVFR0</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <return pos:start="37:13" pos:end="37:21">return <expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:35"><expr pos:start="41:5" pos:end="41:34"><name pos:start="41:5" pos:end="41:6">dp</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <operator pos:start="41:10" pos:end="41:10">(</operator><operator pos:start="41:11" pos:end="41:11">(</operator><name pos:start="41:12" pos:end="41:15">insn</name> <operator pos:start="41:17" pos:end="41:17">&amp;</operator> <literal type="number" pos:start="41:19" pos:end="41:23">0xf00</literal><operator pos:start="41:24" pos:end="41:24">)</operator> <operator pos:start="41:26" pos:end="41:27">==</operator> <literal type="number" pos:start="41:29" pos:end="41:33">0xb00</literal><operator pos:start="41:34" pos:end="41:34">)</operator></expr>;</expr_stmt>

    <switch pos:start="43:5" pos:end="1483:5">switch <condition pos:start="43:12" pos:end="43:31">(<expr pos:start="43:13" pos:end="43:30"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:17">insn</name> <operator pos:start="43:19" pos:end="43:20">&gt;&gt;</operator> <literal type="number" pos:start="43:22" pos:end="43:23">24</literal><operator pos:start="43:24" pos:end="43:24">)</operator> <operator pos:start="43:26" pos:end="43:26">&amp;</operator> <literal type="number" pos:start="43:28" pos:end="43:30">0xf</literal></expr>)</condition> <block pos:start="43:33" pos:end="1483:5">{<block_content pos:start="45:5" pos:end="1481:17">

    <case pos:start="45:5" pos:end="45:13">case <expr pos:start="45:10" pos:end="45:12"><literal type="number" pos:start="45:10" pos:end="45:12">0xe</literal></expr>:</case>

        <if_stmt pos:start="47:9" pos:end="1189:9"><if pos:start="47:9" pos:end="433:9">if <condition pos:start="47:12" pos:end="47:28">(<expr pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:16">insn</name> <operator pos:start="47:18" pos:end="47:18">&amp;</operator> <operator pos:start="47:20" pos:end="47:20">(</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal> <operator pos:start="47:23" pos:end="47:24">&lt;&lt;</operator> <literal type="number" pos:start="47:26" pos:end="47:26">4</literal><operator pos:start="47:27" pos:end="47:27">)</operator></expr>)</condition> <block pos:start="47:30" pos:end="433:9">{<block_content pos:start="51:13" pos:end="431:13">

            <comment type="block" pos:start="49:13" pos:end="49:42">/* single register transfer */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:14">rd</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:22">insn</name> <operator pos:start="51:24" pos:end="51:25">&gt;&gt;</operator> <literal type="number" pos:start="51:27" pos:end="51:28">12</literal><operator pos:start="51:29" pos:end="51:29">)</operator> <operator pos:start="51:31" pos:end="51:31">&amp;</operator> <literal type="number" pos:start="51:33" pos:end="51:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="431:13"><if pos:start="53:13" pos:end="229:13">if <condition pos:start="53:16" pos:end="53:19">(<expr pos:start="53:17" pos:end="53:18"><name pos:start="53:17" pos:end="53:18">dp</name></expr>)</condition> <block pos:start="53:21" pos:end="229:13">{<block_content pos:start="55:17" pos:end="227:17">

                <decl_stmt pos:start="55:17" pos:end="55:25"><decl pos:start="55:17" pos:end="55:24"><type pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">int</name></type> <name pos:start="55:21" pos:end="55:24">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="57:17" pos:end="57:25"><decl pos:start="57:17" pos:end="57:24"><type pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">int</name></type> <name pos:start="57:21" pos:end="57:24">pass</name></decl>;</decl_stmt>



                <expr_stmt pos:start="61:17" pos:end="61:37"><expr pos:start="61:17" pos:end="61:36"><call pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:26">VFP_DREG_N</name><argument_list pos:start="61:27" pos:end="61:36">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">rn</name></expr></argument>, <argument pos:start="61:32" pos:end="61:35"><expr pos:start="61:32" pos:end="61:35"><name pos:start="61:32" pos:end="61:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="65:29"><if pos:start="63:17" pos:end="65:29">if <condition pos:start="63:20" pos:end="63:31">(<expr pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:24">insn</name> <operator pos:start="63:26" pos:end="63:26">&amp;</operator> <literal type="number" pos:start="63:28" pos:end="63:30">0xf</literal></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:29"><block_content pos:start="65:21" pos:end="65:29">

                    <return pos:start="65:21" pos:end="65:29">return <expr pos:start="65:28" pos:end="65:28"><literal type="number" pos:start="65:28" pos:end="65:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="67:17" pos:end="71:29"><if pos:start="67:17" pos:end="71:29">if <condition pos:start="67:20" pos:end="69:59">(<expr pos:start="67:21" pos:end="69:58"><name pos:start="67:21" pos:end="67:24">insn</name> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <literal type="number" pos:start="67:28" pos:end="67:37">0x00c00060</literal>

                    <operator pos:start="69:21" pos:end="69:22">&amp;&amp;</operator> <operator pos:start="69:24" pos:end="69:24">!</operator><call pos:start="69:25" pos:end="69:58"><name pos:start="69:25" pos:end="69:35">arm_feature</name><argument_list pos:start="69:36" pos:end="69:58">(<argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">env</name></expr></argument>, <argument pos:start="69:42" pos:end="69:57"><expr pos:start="69:42" pos:end="69:57"><name pos:start="69:42" pos:end="69:57">ARM_FEATURE_NEON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:21" pos:end="71:29"><block_content pos:start="71:21" pos:end="71:29">

                    <return pos:start="71:21" pos:end="71:29">return <expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="75:17" pos:end="75:40"><expr pos:start="75:17" pos:end="75:39"><name pos:start="75:17" pos:end="75:20">pass</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <operator pos:start="75:24" pos:end="75:24">(</operator><name pos:start="75:25" pos:end="75:28">insn</name> <operator pos:start="75:30" pos:end="75:31">&gt;&gt;</operator> <literal type="number" pos:start="75:33" pos:end="75:34">21</literal><operator pos:start="75:35" pos:end="75:35">)</operator> <operator pos:start="75:37" pos:end="75:37">&amp;</operator> <literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="77:17" pos:end="95:17"><if pos:start="77:17" pos:end="83:17">if <condition pos:start="77:20" pos:end="77:37">(<expr pos:start="77:21" pos:end="77:36"><name pos:start="77:21" pos:end="77:24">insn</name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><literal type="number" pos:start="77:29" pos:end="77:29">1</literal> <operator pos:start="77:31" pos:end="77:32">&lt;&lt;</operator> <literal type="number" pos:start="77:34" pos:end="77:35">22</literal><operator pos:start="77:36" pos:end="77:36">)</operator></expr>)</condition> <block pos:start="77:39" pos:end="83:17">{<block_content pos:start="79:21" pos:end="81:51">

                    <expr_stmt pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:24">size</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:51"><expr pos:start="81:21" pos:end="81:50"><name pos:start="81:21" pos:end="81:26">offset</name> <operator pos:start="81:28" pos:end="81:28">=</operator> <operator pos:start="81:30" pos:end="81:30">(</operator><operator pos:start="81:31" pos:end="81:31">(</operator><name pos:start="81:32" pos:end="81:35">insn</name> <operator pos:start="81:37" pos:end="81:38">&gt;&gt;</operator> <literal type="number" pos:start="81:40" pos:end="81:40">5</literal><operator pos:start="81:41" pos:end="81:41">)</operator> <operator pos:start="81:43" pos:end="81:43">&amp;</operator> <literal type="number" pos:start="81:45" pos:end="81:45">3</literal><operator pos:start="81:46" pos:end="81:46">)</operator> <operator pos:start="81:48" pos:end="81:48">*</operator> <literal type="number" pos:start="81:50" pos:end="81:50">8</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="83:19" pos:end="89:17">else if <condition pos:start="83:27" pos:end="83:43">(<expr pos:start="83:28" pos:end="83:42"><name pos:start="83:28" pos:end="83:31">insn</name> <operator pos:start="83:33" pos:end="83:33">&amp;</operator> <operator pos:start="83:35" pos:end="83:35">(</operator><literal type="number" pos:start="83:36" pos:end="83:36">1</literal> <operator pos:start="83:38" pos:end="83:39">&lt;&lt;</operator> <literal type="number" pos:start="83:41" pos:end="83:41">5</literal><operator pos:start="83:42" pos:end="83:42">)</operator></expr>)</condition> <block pos:start="83:45" pos:end="89:17">{<block_content pos:start="85:21" pos:end="87:56">

                    <expr_stmt pos:start="85:21" pos:end="85:29"><expr pos:start="85:21" pos:end="85:28"><name pos:start="85:21" pos:end="85:24">size</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:56"><expr pos:start="87:21" pos:end="87:55"><name pos:start="87:21" pos:end="87:26">offset</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <ternary pos:start="87:30" pos:end="87:55"><condition pos:start="87:30" pos:end="87:48"><expr pos:start="87:30" pos:end="87:46"><operator pos:start="87:30" pos:end="87:30">(</operator><name pos:start="87:31" pos:end="87:34">insn</name> <operator pos:start="87:36" pos:end="87:36">&amp;</operator> <operator pos:start="87:38" pos:end="87:38">(</operator><literal type="number" pos:start="87:39" pos:end="87:39">1</literal> <operator pos:start="87:41" pos:end="87:42">&lt;&lt;</operator> <literal type="number" pos:start="87:44" pos:end="87:44">6</literal><operator pos:start="87:45" pos:end="87:45">)</operator><operator pos:start="87:46" pos:end="87:46">)</operator></expr> ?</condition><then pos:start="87:50" pos:end="87:51"> <expr pos:start="87:50" pos:end="87:51"><literal type="number" pos:start="87:50" pos:end="87:51">16</literal></expr> </then><else pos:start="87:53" pos:end="87:55">: <expr pos:start="87:55" pos:end="87:55"><literal type="number" pos:start="87:55" pos:end="87:55">0</literal></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="89:19" pos:end="95:17">else <block pos:start="89:24" pos:end="95:17">{<block_content pos:start="91:21" pos:end="93:31">

                    <expr_stmt pos:start="91:21" pos:end="91:29"><expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:24">size</name> <operator pos:start="91:26" pos:end="91:26">=</operator> <literal type="number" pos:start="91:28" pos:end="91:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:31"><expr pos:start="93:21" pos:end="93:30"><name pos:start="93:21" pos:end="93:26">offset</name> <operator pos:start="93:28" pos:end="93:28">=</operator> <literal type="number" pos:start="93:30" pos:end="93:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="97:17" pos:end="227:17"><if pos:start="97:17" pos:end="159:17">if <condition pos:start="97:20" pos:end="97:41">(<expr pos:start="97:21" pos:end="97:40"><name pos:start="97:21" pos:end="97:24">insn</name> <operator pos:start="97:26" pos:end="97:26">&amp;</operator> <name pos:start="97:28" pos:end="97:40">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="97:43" pos:end="159:17">{<block_content pos:start="101:21" pos:end="157:42">

                    <comment type="block" pos:start="99:21" pos:end="99:34">/* vfp-&gt;arm */</comment>

                    <expr_stmt pos:start="101:21" pos:end="101:50"><expr pos:start="101:21" pos:end="101:49"><name pos:start="101:21" pos:end="101:23">tmp</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <call pos:start="101:27" pos:end="101:49"><name pos:start="101:27" pos:end="101:39">neon_load_reg</name><argument_list pos:start="101:40" pos:end="101:49">(<argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">rn</name></expr></argument>, <argument pos:start="101:45" pos:end="101:48"><expr pos:start="101:45" pos:end="101:48"><name pos:start="101:45" pos:end="101:48">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="103:21" pos:end="155:21">switch <condition pos:start="103:28" pos:end="103:33">(<expr pos:start="103:29" pos:end="103:32"><name pos:start="103:29" pos:end="103:32">size</name></expr>)</condition> <block pos:start="103:35" pos:end="155:21">{<block_content pos:start="105:21" pos:end="153:30">

                    <case pos:start="105:21" pos:end="105:27">case <expr pos:start="105:26" pos:end="105:26"><literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>:</case>

                        <if_stmt pos:start="107:25" pos:end="109:63"><if pos:start="107:25" pos:end="109:63">if <condition pos:start="107:28" pos:end="107:35">(<expr pos:start="107:29" pos:end="107:34"><name pos:start="107:29" pos:end="107:34">offset</name></expr>)</condition><block type="pseudo" pos:start="109:29" pos:end="109:63"><block_content pos:start="109:29" pos:end="109:63">

                            <expr_stmt pos:start="109:29" pos:end="109:63"><expr pos:start="109:29" pos:end="109:62"><call pos:start="109:29" pos:end="109:62"><name pos:start="109:29" pos:end="109:44">tcg_gen_shri_i32</name><argument_list pos:start="109:45" pos:end="109:62">(<argument pos:start="109:46" pos:end="109:48"><expr pos:start="109:46" pos:end="109:48"><name pos:start="109:46" pos:end="109:48">tmp</name></expr></argument>, <argument pos:start="109:51" pos:end="109:53"><expr pos:start="109:51" pos:end="109:53"><name pos:start="109:51" pos:end="109:53">tmp</name></expr></argument>, <argument pos:start="109:56" pos:end="109:61"><expr pos:start="109:56" pos:end="109:61"><name pos:start="109:56" pos:end="109:61">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt pos:start="111:25" pos:end="117:42"><if pos:start="111:25" pos:end="113:42">if <condition pos:start="111:28" pos:end="111:45">(<expr pos:start="111:29" pos:end="111:44"><name pos:start="111:29" pos:end="111:32">insn</name> <operator pos:start="111:34" pos:end="111:34">&amp;</operator> <operator pos:start="111:36" pos:end="111:36">(</operator><literal type="number" pos:start="111:37" pos:end="111:37">1</literal> <operator pos:start="111:39" pos:end="111:40">&lt;&lt;</operator> <literal type="number" pos:start="111:42" pos:end="111:43">23</literal><operator pos:start="111:44" pos:end="111:44">)</operator></expr>)</condition><block type="pseudo" pos:start="113:29" pos:end="113:42"><block_content pos:start="113:29" pos:end="113:42">

                            <expr_stmt pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:41"><call pos:start="113:29" pos:end="113:41"><name pos:start="113:29" pos:end="113:36">gen_uxtb</name><argument_list pos:start="113:37" pos:end="113:41">(<argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="115:25" pos:end="117:42">else<block type="pseudo" pos:start="117:29" pos:end="117:42"><block_content pos:start="117:29" pos:end="117:42">

                            <expr_stmt pos:start="117:29" pos:end="117:42"><expr pos:start="117:29" pos:end="117:41"><call pos:start="117:29" pos:end="117:41"><name pos:start="117:29" pos:end="117:36">gen_sxtb</name><argument_list pos:start="117:37" pos:end="117:41">(<argument pos:start="117:38" pos:end="117:40"><expr pos:start="117:38" pos:end="117:40"><name pos:start="117:38" pos:end="117:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <break pos:start="119:25" pos:end="119:30">break;</break>

                    <case pos:start="121:21" pos:end="121:27">case <expr pos:start="121:26" pos:end="121:26"><literal type="number" pos:start="121:26" pos:end="121:26">1</literal></expr>:</case>

                        <if_stmt pos:start="123:25" pos:end="147:25"><if pos:start="123:25" pos:end="135:25">if <condition pos:start="123:28" pos:end="123:45">(<expr pos:start="123:29" pos:end="123:44"><name pos:start="123:29" pos:end="123:32">insn</name> <operator pos:start="123:34" pos:end="123:34">&amp;</operator> <operator pos:start="123:36" pos:end="123:36">(</operator><literal type="number" pos:start="123:37" pos:end="123:37">1</literal> <operator pos:start="123:39" pos:end="123:40">&lt;&lt;</operator> <literal type="number" pos:start="123:42" pos:end="123:43">23</literal><operator pos:start="123:44" pos:end="123:44">)</operator></expr>)</condition> <block pos:start="123:47" pos:end="135:25">{<block_content pos:start="125:29" pos:end="133:29">

                            <if_stmt pos:start="125:29" pos:end="133:29"><if pos:start="125:29" pos:end="129:29">if <condition pos:start="125:32" pos:end="125:39">(<expr pos:start="125:33" pos:end="125:38"><name pos:start="125:33" pos:end="125:38">offset</name></expr>)</condition> <block pos:start="125:41" pos:end="129:29">{<block_content pos:start="127:33" pos:end="127:63">

                                <expr_stmt pos:start="127:33" pos:end="127:63"><expr pos:start="127:33" pos:end="127:62"><call pos:start="127:33" pos:end="127:62"><name pos:start="127:33" pos:end="127:48">tcg_gen_shri_i32</name><argument_list pos:start="127:49" pos:end="127:62">(<argument pos:start="127:50" pos:end="127:52"><expr pos:start="127:50" pos:end="127:52"><name pos:start="127:50" pos:end="127:52">tmp</name></expr></argument>, <argument pos:start="127:55" pos:end="127:57"><expr pos:start="127:55" pos:end="127:57"><name pos:start="127:55" pos:end="127:57">tmp</name></expr></argument>, <argument pos:start="127:60" pos:end="127:61"><expr pos:start="127:60" pos:end="127:61"><literal type="number" pos:start="127:60" pos:end="127:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="129:31" pos:end="133:29">else <block pos:start="129:36" pos:end="133:29">{<block_content pos:start="131:33" pos:end="131:46">

                                <expr_stmt pos:start="131:33" pos:end="131:46"><expr pos:start="131:33" pos:end="131:45"><call pos:start="131:33" pos:end="131:45"><name pos:start="131:33" pos:end="131:40">gen_uxth</name><argument_list pos:start="131:41" pos:end="131:45">(<argument pos:start="131:42" pos:end="131:44"><expr pos:start="131:42" pos:end="131:44"><name pos:start="131:42" pos:end="131:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="135:27" pos:end="147:25">else <block pos:start="135:32" pos:end="147:25">{<block_content pos:start="137:29" pos:end="145:29">

                            <if_stmt pos:start="137:29" pos:end="145:29"><if pos:start="137:29" pos:end="141:29">if <condition pos:start="137:32" pos:end="137:39">(<expr pos:start="137:33" pos:end="137:38"><name pos:start="137:33" pos:end="137:38">offset</name></expr>)</condition> <block pos:start="137:41" pos:end="141:29">{<block_content pos:start="139:33" pos:end="139:63">

                                <expr_stmt pos:start="139:33" pos:end="139:63"><expr pos:start="139:33" pos:end="139:62"><call pos:start="139:33" pos:end="139:62"><name pos:start="139:33" pos:end="139:48">tcg_gen_sari_i32</name><argument_list pos:start="139:49" pos:end="139:62">(<argument pos:start="139:50" pos:end="139:52"><expr pos:start="139:50" pos:end="139:52"><name pos:start="139:50" pos:end="139:52">tmp</name></expr></argument>, <argument pos:start="139:55" pos:end="139:57"><expr pos:start="139:55" pos:end="139:57"><name pos:start="139:55" pos:end="139:57">tmp</name></expr></argument>, <argument pos:start="139:60" pos:end="139:61"><expr pos:start="139:60" pos:end="139:61"><literal type="number" pos:start="139:60" pos:end="139:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="141:31" pos:end="145:29">else <block pos:start="141:36" pos:end="145:29">{<block_content pos:start="143:33" pos:end="143:46">

                                <expr_stmt pos:start="143:33" pos:end="143:46"><expr pos:start="143:33" pos:end="143:45"><call pos:start="143:33" pos:end="143:45"><name pos:start="143:33" pos:end="143:40">gen_sxth</name><argument_list pos:start="143:41" pos:end="143:45">(<argument pos:start="143:42" pos:end="143:44"><expr pos:start="143:42" pos:end="143:44"><name pos:start="143:42" pos:end="143:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="149:25" pos:end="149:30">break;</break>

                    <case pos:start="151:21" pos:end="151:27">case <expr pos:start="151:26" pos:end="151:26"><literal type="number" pos:start="151:26" pos:end="151:26">2</literal></expr>:</case>

                        <break pos:start="153:25" pos:end="153:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="157:21" pos:end="157:42"><expr pos:start="157:21" pos:end="157:41"><call pos:start="157:21" pos:end="157:41"><name pos:start="157:21" pos:end="157:29">store_reg</name><argument_list pos:start="157:30" pos:end="157:41">(<argument pos:start="157:31" pos:end="157:31"><expr pos:start="157:31" pos:end="157:31"><name pos:start="157:31" pos:end="157:31">s</name></expr></argument>, <argument pos:start="157:34" pos:end="157:35"><expr pos:start="157:34" pos:end="157:35"><name pos:start="157:34" pos:end="157:35">rd</name></expr></argument>, <argument pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="159:19" pos:end="227:17">else <block pos:start="159:24" pos:end="227:17">{<block_content pos:start="163:21" pos:end="225:21">

                    <comment type="block" pos:start="161:21" pos:end="161:34">/* arm-&gt;vfp */</comment>

                    <expr_stmt pos:start="163:21" pos:end="163:42"><expr pos:start="163:21" pos:end="163:41"><name pos:start="163:21" pos:end="163:23">tmp</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <call pos:start="163:27" pos:end="163:41"><name pos:start="163:27" pos:end="163:34">load_reg</name><argument_list pos:start="163:35" pos:end="163:41">(<argument pos:start="163:36" pos:end="163:36"><expr pos:start="163:36" pos:end="163:36"><name pos:start="163:36" pos:end="163:36">s</name></expr></argument>, <argument pos:start="163:39" pos:end="163:40"><expr pos:start="163:39" pos:end="163:40"><name pos:start="163:39" pos:end="163:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="165:21" pos:end="225:21"><if pos:start="165:21" pos:end="191:21">if <condition pos:start="165:24" pos:end="165:41">(<expr pos:start="165:25" pos:end="165:40"><name pos:start="165:25" pos:end="165:28">insn</name> <operator pos:start="165:30" pos:end="165:30">&amp;</operator> <operator pos:start="165:32" pos:end="165:32">(</operator><literal type="number" pos:start="165:33" pos:end="165:33">1</literal> <operator pos:start="165:35" pos:end="165:36">&lt;&lt;</operator> <literal type="number" pos:start="165:38" pos:end="165:39">23</literal><operator pos:start="165:40" pos:end="165:40">)</operator></expr>)</condition> <block pos:start="165:43" pos:end="191:21">{<block_content pos:start="169:25" pos:end="189:51">

                        <comment type="block" pos:start="167:25" pos:end="167:34">/* VDUP */</comment>

                        <if_stmt pos:start="169:25" pos:end="177:25"><if pos:start="169:25" pos:end="173:25">if <condition pos:start="169:28" pos:end="169:38">(<expr pos:start="169:29" pos:end="169:37"><name pos:start="169:29" pos:end="169:32">size</name> <operator pos:start="169:34" pos:end="169:35">==</operator> <literal type="number" pos:start="169:37" pos:end="169:37">0</literal></expr>)</condition> <block pos:start="169:40" pos:end="173:25">{<block_content pos:start="171:29" pos:end="171:52">

                            <expr_stmt pos:start="171:29" pos:end="171:52"><expr pos:start="171:29" pos:end="171:51"><call pos:start="171:29" pos:end="171:51"><name pos:start="171:29" pos:end="171:43">gen_neon_dup_u8</name><argument_list pos:start="171:44" pos:end="171:51">(<argument pos:start="171:45" pos:end="171:47"><expr pos:start="171:45" pos:end="171:47"><name pos:start="171:45" pos:end="171:47">tmp</name></expr></argument>, <argument pos:start="171:50" pos:end="171:50"><expr pos:start="171:50" pos:end="171:50"><literal type="number" pos:start="171:50" pos:end="171:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="173:27" pos:end="177:25">else if <condition pos:start="173:35" pos:end="173:45">(<expr pos:start="173:36" pos:end="173:44"><name pos:start="173:36" pos:end="173:39">size</name> <operator pos:start="173:41" pos:end="173:42">==</operator> <literal type="number" pos:start="173:44" pos:end="173:44">1</literal></expr>)</condition> <block pos:start="173:47" pos:end="177:25">{<block_content pos:start="175:29" pos:end="175:52">

                            <expr_stmt pos:start="175:29" pos:end="175:52"><expr pos:start="175:29" pos:end="175:51"><call pos:start="175:29" pos:end="175:51"><name pos:start="175:29" pos:end="175:46">gen_neon_dup_low16</name><argument_list pos:start="175:47" pos:end="175:51">(<argument pos:start="175:48" pos:end="175:50"><expr pos:start="175:48" pos:end="175:50"><name pos:start="175:48" pos:end="175:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <for pos:start="179:25" pos:end="187:25">for <control pos:start="179:29" pos:end="179:55">(<init pos:start="179:30" pos:end="179:35"><expr pos:start="179:30" pos:end="179:34"><name pos:start="179:30" pos:end="179:30">n</name> <operator pos:start="179:32" pos:end="179:32">=</operator> <literal type="number" pos:start="179:34" pos:end="179:34">0</literal></expr>;</init> <condition pos:start="179:37" pos:end="179:50"><expr pos:start="179:37" pos:end="179:49"><name pos:start="179:37" pos:end="179:37">n</name> <operator pos:start="179:39" pos:end="179:40">&lt;=</operator> <name pos:start="179:42" pos:end="179:45">pass</name> <operator pos:start="179:47" pos:end="179:47">*</operator> <literal type="number" pos:start="179:49" pos:end="179:49">2</literal></expr>;</condition> <incr pos:start="179:52" pos:end="179:54"><expr pos:start="179:52" pos:end="179:54"><name pos:start="179:52" pos:end="179:52">n</name><operator pos:start="179:53" pos:end="179:54">++</operator></expr></incr>)</control> <block pos:start="179:57" pos:end="187:25">{<block_content pos:start="181:29" pos:end="185:56">

                            <expr_stmt pos:start="181:29" pos:end="181:54"><expr pos:start="181:29" pos:end="181:53"><name pos:start="181:29" pos:end="181:32">tmp2</name> <operator pos:start="181:34" pos:end="181:34">=</operator> <call pos:start="181:36" pos:end="181:53"><name pos:start="181:36" pos:end="181:51">tcg_temp_new_i32</name><argument_list pos:start="181:52" pos:end="181:53">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="183:29" pos:end="183:55"><expr pos:start="183:29" pos:end="183:54"><call pos:start="183:29" pos:end="183:54"><name pos:start="183:29" pos:end="183:43">tcg_gen_mov_i32</name><argument_list pos:start="183:44" pos:end="183:54">(<argument pos:start="183:45" pos:end="183:48"><expr pos:start="183:45" pos:end="183:48"><name pos:start="183:45" pos:end="183:48">tmp2</name></expr></argument>, <argument pos:start="183:51" pos:end="183:53"><expr pos:start="183:51" pos:end="183:53"><name pos:start="183:51" pos:end="183:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="185:29" pos:end="185:56"><expr pos:start="185:29" pos:end="185:55"><call pos:start="185:29" pos:end="185:55"><name pos:start="185:29" pos:end="185:42">neon_store_reg</name><argument_list pos:start="185:43" pos:end="185:55">(<argument pos:start="185:44" pos:end="185:45"><expr pos:start="185:44" pos:end="185:45"><name pos:start="185:44" pos:end="185:45">rn</name></expr></argument>, <argument pos:start="185:48" pos:end="185:48"><expr pos:start="185:48" pos:end="185:48"><name pos:start="185:48" pos:end="185:48">n</name></expr></argument>, <argument pos:start="185:51" pos:end="185:54"><expr pos:start="185:51" pos:end="185:54"><name pos:start="185:51" pos:end="185:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="189:25" pos:end="189:51"><expr pos:start="189:25" pos:end="189:50"><call pos:start="189:25" pos:end="189:50"><name pos:start="189:25" pos:end="189:38">neon_store_reg</name><argument_list pos:start="189:39" pos:end="189:50">(<argument pos:start="189:40" pos:end="189:41"><expr pos:start="189:40" pos:end="189:41"><name pos:start="189:40" pos:end="189:41">rn</name></expr></argument>, <argument pos:start="189:44" pos:end="189:44"><expr pos:start="189:44" pos:end="189:44"><name pos:start="189:44" pos:end="189:44">n</name></expr></argument>, <argument pos:start="189:47" pos:end="189:49"><expr pos:start="189:47" pos:end="189:49"><name pos:start="189:47" pos:end="189:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="191:23" pos:end="225:21">else <block pos:start="191:28" pos:end="225:21">{<block_content pos:start="195:25" pos:end="223:54">

                        <comment type="block" pos:start="193:25" pos:end="193:34">/* VMOV */</comment>

                        <switch pos:start="195:25" pos:end="221:25">switch <condition pos:start="195:32" pos:end="195:37">(<expr pos:start="195:33" pos:end="195:36"><name pos:start="195:33" pos:end="195:36">size</name></expr>)</condition> <block pos:start="195:39" pos:end="221:25">{<block_content pos:start="197:25" pos:end="219:34">

                        <case pos:start="197:25" pos:end="197:31">case <expr pos:start="197:30" pos:end="197:30"><literal type="number" pos:start="197:30" pos:end="197:30">0</literal></expr>:</case>

                            <expr_stmt pos:start="199:29" pos:end="199:59"><expr pos:start="199:29" pos:end="199:58"><name pos:start="199:29" pos:end="199:32">tmp2</name> <operator pos:start="199:34" pos:end="199:34">=</operator> <call pos:start="199:36" pos:end="199:58"><name pos:start="199:36" pos:end="199:48">neon_load_reg</name><argument_list pos:start="199:49" pos:end="199:58">(<argument pos:start="199:50" pos:end="199:51"><expr pos:start="199:50" pos:end="199:51"><name pos:start="199:50" pos:end="199:51">rn</name></expr></argument>, <argument pos:start="199:54" pos:end="199:57"><expr pos:start="199:54" pos:end="199:57"><name pos:start="199:54" pos:end="199:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="201:29" pos:end="201:66"><expr pos:start="201:29" pos:end="201:65"><call pos:start="201:29" pos:end="201:65"><name pos:start="201:29" pos:end="201:35">gen_bfi</name><argument_list pos:start="201:36" pos:end="201:65">(<argument pos:start="201:37" pos:end="201:39"><expr pos:start="201:37" pos:end="201:39"><name pos:start="201:37" pos:end="201:39">tmp</name></expr></argument>, <argument pos:start="201:42" pos:end="201:45"><expr pos:start="201:42" pos:end="201:45"><name pos:start="201:42" pos:end="201:45">tmp2</name></expr></argument>, <argument pos:start="201:48" pos:end="201:50"><expr pos:start="201:48" pos:end="201:50"><name pos:start="201:48" pos:end="201:50">tmp</name></expr></argument>, <argument pos:start="201:53" pos:end="201:58"><expr pos:start="201:53" pos:end="201:58"><name pos:start="201:53" pos:end="201:58">offset</name></expr></argument>, <argument pos:start="201:61" pos:end="201:64"><expr pos:start="201:61" pos:end="201:64"><literal type="number" pos:start="201:61" pos:end="201:64">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="203:29" pos:end="203:52"><expr pos:start="203:29" pos:end="203:51"><call pos:start="203:29" pos:end="203:51"><name pos:start="203:29" pos:end="203:45">tcg_temp_free_i32</name><argument_list pos:start="203:46" pos:end="203:51">(<argument pos:start="203:47" pos:end="203:50"><expr pos:start="203:47" pos:end="203:50"><name pos:start="203:47" pos:end="203:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="205:29" pos:end="205:34">break;</break>

                        <case pos:start="207:25" pos:end="207:31">case <expr pos:start="207:30" pos:end="207:30"><literal type="number" pos:start="207:30" pos:end="207:30">1</literal></expr>:</case>

                            <expr_stmt pos:start="209:29" pos:end="209:59"><expr pos:start="209:29" pos:end="209:58"><name pos:start="209:29" pos:end="209:32">tmp2</name> <operator pos:start="209:34" pos:end="209:34">=</operator> <call pos:start="209:36" pos:end="209:58"><name pos:start="209:36" pos:end="209:48">neon_load_reg</name><argument_list pos:start="209:49" pos:end="209:58">(<argument pos:start="209:50" pos:end="209:51"><expr pos:start="209:50" pos:end="209:51"><name pos:start="209:50" pos:end="209:51">rn</name></expr></argument>, <argument pos:start="209:54" pos:end="209:57"><expr pos:start="209:54" pos:end="209:57"><name pos:start="209:54" pos:end="209:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="211:29" pos:end="211:68"><expr pos:start="211:29" pos:end="211:67"><call pos:start="211:29" pos:end="211:67"><name pos:start="211:29" pos:end="211:35">gen_bfi</name><argument_list pos:start="211:36" pos:end="211:67">(<argument pos:start="211:37" pos:end="211:39"><expr pos:start="211:37" pos:end="211:39"><name pos:start="211:37" pos:end="211:39">tmp</name></expr></argument>, <argument pos:start="211:42" pos:end="211:45"><expr pos:start="211:42" pos:end="211:45"><name pos:start="211:42" pos:end="211:45">tmp2</name></expr></argument>, <argument pos:start="211:48" pos:end="211:50"><expr pos:start="211:48" pos:end="211:50"><name pos:start="211:48" pos:end="211:50">tmp</name></expr></argument>, <argument pos:start="211:53" pos:end="211:58"><expr pos:start="211:53" pos:end="211:58"><name pos:start="211:53" pos:end="211:58">offset</name></expr></argument>, <argument pos:start="211:61" pos:end="211:66"><expr pos:start="211:61" pos:end="211:66"><literal type="number" pos:start="211:61" pos:end="211:66">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="213:29" pos:end="213:52"><expr pos:start="213:29" pos:end="213:51"><call pos:start="213:29" pos:end="213:51"><name pos:start="213:29" pos:end="213:45">tcg_temp_free_i32</name><argument_list pos:start="213:46" pos:end="213:51">(<argument pos:start="213:47" pos:end="213:50"><expr pos:start="213:47" pos:end="213:50"><name pos:start="213:47" pos:end="213:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="215:29" pos:end="215:34">break;</break>

                        <case pos:start="217:25" pos:end="217:31">case <expr pos:start="217:30" pos:end="217:30"><literal type="number" pos:start="217:30" pos:end="217:30">2</literal></expr>:</case>

                            <break pos:start="219:29" pos:end="219:34">break;</break>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="223:25" pos:end="223:54"><expr pos:start="223:25" pos:end="223:53"><call pos:start="223:25" pos:end="223:53"><name pos:start="223:25" pos:end="223:38">neon_store_reg</name><argument_list pos:start="223:39" pos:end="223:53">(<argument pos:start="223:40" pos:end="223:41"><expr pos:start="223:40" pos:end="223:41"><name pos:start="223:40" pos:end="223:41">rn</name></expr></argument>, <argument pos:start="223:44" pos:end="223:47"><expr pos:start="223:44" pos:end="223:47"><name pos:start="223:44" pos:end="223:47">pass</name></expr></argument>, <argument pos:start="223:50" pos:end="223:52"><expr pos:start="223:50" pos:end="223:52"><name pos:start="223:50" pos:end="223:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="229:15" pos:end="431:13">else <block pos:start="229:20" pos:end="431:13">{<block_content pos:start="231:17" pos:end="429:17"> <comment type="block" pos:start="229:22" pos:end="229:30">/* !dp */</comment>

                <if_stmt pos:start="231:17" pos:end="233:29"><if pos:start="231:17" pos:end="233:29">if <condition pos:start="231:20" pos:end="231:42">(<expr pos:start="231:21" pos:end="231:41"><operator pos:start="231:21" pos:end="231:21">(</operator><name pos:start="231:22" pos:end="231:25">insn</name> <operator pos:start="231:27" pos:end="231:27">&amp;</operator> <literal type="number" pos:start="231:29" pos:end="231:32">0x6f</literal><operator pos:start="231:33" pos:end="231:33">)</operator> <operator pos:start="231:35" pos:end="231:36">!=</operator> <literal type="number" pos:start="231:38" pos:end="231:41">0x00</literal></expr>)</condition><block type="pseudo" pos:start="233:21" pos:end="233:29"><block_content pos:start="233:21" pos:end="233:29">

                    <return pos:start="233:21" pos:end="233:29">return <expr pos:start="233:28" pos:end="233:28"><literal type="number" pos:start="233:28" pos:end="233:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:38"><expr pos:start="235:17" pos:end="235:37"><name pos:start="235:17" pos:end="235:18">rn</name> <operator pos:start="235:20" pos:end="235:20">=</operator> <call pos:start="235:22" pos:end="235:37"><name pos:start="235:22" pos:end="235:31">VFP_SREG_N</name><argument_list pos:start="235:32" pos:end="235:37">(<argument pos:start="235:33" pos:end="235:36"><expr pos:start="235:33" pos:end="235:36"><name pos:start="235:33" pos:end="235:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="237:17" pos:end="429:17"><if pos:start="237:17" pos:end="355:17">if <condition pos:start="237:20" pos:end="237:41">(<expr pos:start="237:21" pos:end="237:40"><name pos:start="237:21" pos:end="237:24">insn</name> <operator pos:start="237:26" pos:end="237:26">&amp;</operator> <name pos:start="237:28" pos:end="237:40">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="237:43" pos:end="355:17">{<block_content pos:start="241:21" pos:end="353:21">

                    <comment type="block" pos:start="239:21" pos:end="239:34">/* vfp-&gt;arm */</comment>

                    <if_stmt pos:start="241:21" pos:end="339:21"><if pos:start="241:21" pos:end="333:21">if <condition pos:start="241:24" pos:end="241:41">(<expr pos:start="241:25" pos:end="241:40"><name pos:start="241:25" pos:end="241:28">insn</name> <operator pos:start="241:30" pos:end="241:30">&amp;</operator> <operator pos:start="241:32" pos:end="241:32">(</operator><literal type="number" pos:start="241:33" pos:end="241:33">1</literal> <operator pos:start="241:35" pos:end="241:36">&lt;&lt;</operator> <literal type="number" pos:start="241:38" pos:end="241:39">21</literal><operator pos:start="241:40" pos:end="241:40">)</operator></expr>)</condition> <block pos:start="241:43" pos:end="333:21">{<block_content pos:start="245:25" pos:end="331:25">

                        <comment type="block" pos:start="243:25" pos:end="243:45">/* system register */</comment>

                        <expr_stmt pos:start="245:25" pos:end="245:33"><expr pos:start="245:25" pos:end="245:32"><name pos:start="245:25" pos:end="245:26">rn</name> <operator pos:start="245:28" pos:end="245:30">&gt;&gt;=</operator> <literal type="number" pos:start="245:32" pos:end="245:32">1</literal></expr>;</expr_stmt>



                        <switch pos:start="249:25" pos:end="331:25">switch <condition pos:start="249:32" pos:end="249:35">(<expr pos:start="249:33" pos:end="249:34"><name pos:start="249:33" pos:end="249:34">rn</name></expr>)</condition> <block pos:start="249:37" pos:end="331:25">{<block_content pos:start="251:25" pos:end="329:37">

                        <case pos:start="251:25" pos:end="251:43">case <expr pos:start="251:30" pos:end="251:42"><name pos:start="251:30" pos:end="251:42">ARM_VFP_FPSID</name></expr>:</case>

                            <comment type="block" pos:start="253:29" pos:end="257:44">/* VFP2 allows access to FSID from userspace.

                               VFP3 restricts all id registers to privileged

                               accesses.  */</comment>

                            <if_stmt pos:start="259:29" pos:end="263:41"><if pos:start="259:29" pos:end="263:41">if <condition pos:start="259:32" pos:end="261:70">(<expr pos:start="259:33" pos:end="261:69"><call pos:start="259:33" pos:end="259:42"><name pos:start="259:33" pos:end="259:39">IS_USER</name><argument_list pos:start="259:40" pos:end="259:42">(<argument pos:start="259:41" pos:end="259:41"><expr pos:start="259:41" pos:end="259:41"><name pos:start="259:41" pos:end="259:41">s</name></expr></argument>)</argument_list></call>

                                <operator pos:start="261:33" pos:end="261:34">&amp;&amp;</operator> <call pos:start="261:36" pos:end="261:69"><name pos:start="261:36" pos:end="261:46">arm_feature</name><argument_list pos:start="261:47" pos:end="261:69">(<argument pos:start="261:48" pos:end="261:50"><expr pos:start="261:48" pos:end="261:50"><name pos:start="261:48" pos:end="261:50">env</name></expr></argument>, <argument pos:start="261:53" pos:end="261:68"><expr pos:start="261:53" pos:end="261:68"><name pos:start="261:53" pos:end="261:68">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="263:33" pos:end="263:41"><block_content pos:start="263:33" pos:end="263:41">

                                <return pos:start="263:33" pos:end="263:41">return <expr pos:start="263:40" pos:end="263:40"><literal type="number" pos:start="263:40" pos:end="263:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="265:29" pos:end="265:64"><expr pos:start="265:29" pos:end="265:63"><name pos:start="265:29" pos:end="265:31">tmp</name> <operator pos:start="265:33" pos:end="265:33">=</operator> <call pos:start="265:35" pos:end="265:63"><name pos:start="265:35" pos:end="265:48">load_cpu_field</name><argument_list pos:start="265:49" pos:end="265:63">(<argument pos:start="265:50" pos:end="265:62"><expr pos:start="265:50" pos:end="265:62"><name pos:start="265:50" pos:end="265:62"><name pos:start="265:50" pos:end="265:52">vfp</name><operator pos:start="265:53" pos:end="265:53">.</operator><name pos:start="265:54" pos:end="265:58">xregs</name><index pos:start="265:59" pos:end="265:62">[<expr pos:start="265:60" pos:end="265:61"><name pos:start="265:60" pos:end="265:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="267:29" pos:end="267:34">break;</break>

                        <case pos:start="269:25" pos:end="269:43">case <expr pos:start="269:30" pos:end="269:42"><name pos:start="269:30" pos:end="269:42">ARM_VFP_FPEXC</name></expr>:</case>

                            <if_stmt pos:start="271:29" pos:end="273:41"><if pos:start="271:29" pos:end="273:41">if <condition pos:start="271:32" pos:end="271:43">(<expr pos:start="271:33" pos:end="271:42"><call pos:start="271:33" pos:end="271:42"><name pos:start="271:33" pos:end="271:39">IS_USER</name><argument_list pos:start="271:40" pos:end="271:42">(<argument pos:start="271:41" pos:end="271:41"><expr pos:start="271:41" pos:end="271:41"><name pos:start="271:41" pos:end="271:41">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="273:33" pos:end="273:41"><block_content pos:start="273:33" pos:end="273:41">

                                <return pos:start="273:33" pos:end="273:41">return <expr pos:start="273:40" pos:end="273:40"><literal type="number" pos:start="273:40" pos:end="273:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="275:29" pos:end="275:64"><expr pos:start="275:29" pos:end="275:63"><name pos:start="275:29" pos:end="275:31">tmp</name> <operator pos:start="275:33" pos:end="275:33">=</operator> <call pos:start="275:35" pos:end="275:63"><name pos:start="275:35" pos:end="275:48">load_cpu_field</name><argument_list pos:start="275:49" pos:end="275:63">(<argument pos:start="275:50" pos:end="275:62"><expr pos:start="275:50" pos:end="275:62"><name pos:start="275:50" pos:end="275:62"><name pos:start="275:50" pos:end="275:52">vfp</name><operator pos:start="275:53" pos:end="275:53">.</operator><name pos:start="275:54" pos:end="275:58">xregs</name><index pos:start="275:59" pos:end="275:62">[<expr pos:start="275:60" pos:end="275:61"><name pos:start="275:60" pos:end="275:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="277:29" pos:end="277:34">break;</break>

                        <case pos:start="279:25" pos:end="279:44">case <expr pos:start="279:30" pos:end="279:43"><name pos:start="279:30" pos:end="279:43">ARM_VFP_FPINST</name></expr>:</case>

                        <case pos:start="281:25" pos:end="281:45">case <expr pos:start="281:30" pos:end="281:44"><name pos:start="281:30" pos:end="281:44">ARM_VFP_FPINST2</name></expr>:</case>

                            <comment type="block" pos:start="283:29" pos:end="283:55">/* Not present in VFP3.  */</comment>

                            <if_stmt pos:start="285:29" pos:end="289:41"><if pos:start="285:29" pos:end="289:41">if <condition pos:start="285:32" pos:end="287:70">(<expr pos:start="285:33" pos:end="287:69"><call pos:start="285:33" pos:end="285:42"><name pos:start="285:33" pos:end="285:39">IS_USER</name><argument_list pos:start="285:40" pos:end="285:42">(<argument pos:start="285:41" pos:end="285:41"><expr pos:start="285:41" pos:end="285:41"><name pos:start="285:41" pos:end="285:41">s</name></expr></argument>)</argument_list></call>

                                <operator pos:start="287:33" pos:end="287:34">||</operator> <call pos:start="287:36" pos:end="287:69"><name pos:start="287:36" pos:end="287:46">arm_feature</name><argument_list pos:start="287:47" pos:end="287:69">(<argument pos:start="287:48" pos:end="287:50"><expr pos:start="287:48" pos:end="287:50"><name pos:start="287:48" pos:end="287:50">env</name></expr></argument>, <argument pos:start="287:53" pos:end="287:68"><expr pos:start="287:53" pos:end="287:68"><name pos:start="287:53" pos:end="287:68">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="289:33" pos:end="289:41"><block_content pos:start="289:33" pos:end="289:41">

                                <return pos:start="289:33" pos:end="289:41">return <expr pos:start="289:40" pos:end="289:40"><literal type="number" pos:start="289:40" pos:end="289:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="291:29" pos:end="291:64"><expr pos:start="291:29" pos:end="291:63"><name pos:start="291:29" pos:end="291:31">tmp</name> <operator pos:start="291:33" pos:end="291:33">=</operator> <call pos:start="291:35" pos:end="291:63"><name pos:start="291:35" pos:end="291:48">load_cpu_field</name><argument_list pos:start="291:49" pos:end="291:63">(<argument pos:start="291:50" pos:end="291:62"><expr pos:start="291:50" pos:end="291:62"><name pos:start="291:50" pos:end="291:62"><name pos:start="291:50" pos:end="291:52">vfp</name><operator pos:start="291:53" pos:end="291:53">.</operator><name pos:start="291:54" pos:end="291:58">xregs</name><index pos:start="291:59" pos:end="291:62">[<expr pos:start="291:60" pos:end="291:61"><name pos:start="291:60" pos:end="291:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="293:29" pos:end="293:34">break;</break>

                        <case pos:start="295:25" pos:end="295:43">case <expr pos:start="295:30" pos:end="295:42"><name pos:start="295:30" pos:end="295:42">ARM_VFP_FPSCR</name></expr>:</case>

                            <if_stmt pos:start="297:29" pos:end="309:29"><if pos:start="297:29" pos:end="303:29">if <condition pos:start="297:32" pos:end="297:41">(<expr pos:start="297:33" pos:end="297:40"><name pos:start="297:33" pos:end="297:34">rd</name> <operator pos:start="297:36" pos:end="297:37">==</operator> <literal type="number" pos:start="297:39" pos:end="297:40">15</literal></expr>)</condition> <block pos:start="297:43" pos:end="303:29">{<block_content pos:start="299:33" pos:end="301:71">

                                <expr_stmt pos:start="299:33" pos:end="299:79"><expr pos:start="299:33" pos:end="299:78"><name pos:start="299:33" pos:end="299:35">tmp</name> <operator pos:start="299:37" pos:end="299:37">=</operator> <call pos:start="299:39" pos:end="299:78"><name pos:start="299:39" pos:end="299:52">load_cpu_field</name><argument_list pos:start="299:53" pos:end="299:78">(<argument pos:start="299:54" pos:end="299:77"><expr pos:start="299:54" pos:end="299:77"><name pos:start="299:54" pos:end="299:77"><name pos:start="299:54" pos:end="299:56">vfp</name><operator pos:start="299:57" pos:end="299:57">.</operator><name pos:start="299:58" pos:end="299:62">xregs</name><index pos:start="299:63" pos:end="299:77">[<expr pos:start="299:64" pos:end="299:76"><name pos:start="299:64" pos:end="299:76">ARM_VFP_FPSCR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="301:33" pos:end="301:71"><expr pos:start="301:33" pos:end="301:70"><call pos:start="301:33" pos:end="301:70"><name pos:start="301:33" pos:end="301:48">tcg_gen_andi_i32</name><argument_list pos:start="301:49" pos:end="301:70">(<argument pos:start="301:50" pos:end="301:52"><expr pos:start="301:50" pos:end="301:52"><name pos:start="301:50" pos:end="301:52">tmp</name></expr></argument>, <argument pos:start="301:55" pos:end="301:57"><expr pos:start="301:55" pos:end="301:57"><name pos:start="301:55" pos:end="301:57">tmp</name></expr></argument>, <argument pos:start="301:60" pos:end="301:69"><expr pos:start="301:60" pos:end="301:69"><literal type="number" pos:start="301:60" pos:end="301:69">0xf0000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="303:31" pos:end="309:29">else <block pos:start="303:36" pos:end="309:29">{<block_content pos:start="305:33" pos:end="307:71">

                                <expr_stmt pos:start="305:33" pos:end="305:57"><expr pos:start="305:33" pos:end="305:56"><name pos:start="305:33" pos:end="305:35">tmp</name> <operator pos:start="305:37" pos:end="305:37">=</operator> <call pos:start="305:39" pos:end="305:56"><name pos:start="305:39" pos:end="305:54">tcg_temp_new_i32</name><argument_list pos:start="305:55" pos:end="305:56">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="307:33" pos:end="307:71"><expr pos:start="307:33" pos:end="307:70"><call pos:start="307:33" pos:end="307:70"><name pos:start="307:33" pos:end="307:56">gen_helper_vfp_get_fpscr</name><argument_list pos:start="307:57" pos:end="307:70">(<argument pos:start="307:58" pos:end="307:60"><expr pos:start="307:58" pos:end="307:60"><name pos:start="307:58" pos:end="307:60">tmp</name></expr></argument>, <argument pos:start="307:63" pos:end="307:69"><expr pos:start="307:63" pos:end="307:69"><name pos:start="307:63" pos:end="307:69">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <break pos:start="311:29" pos:end="311:34">break;</break>

                        <case pos:start="313:25" pos:end="313:43">case <expr pos:start="313:30" pos:end="313:42"><name pos:start="313:30" pos:end="313:42">ARM_VFP_MVFR0</name></expr>:</case>

                        <case pos:start="315:25" pos:end="315:43">case <expr pos:start="315:30" pos:end="315:42"><name pos:start="315:30" pos:end="315:42">ARM_VFP_MVFR1</name></expr>:</case>

                            <if_stmt pos:start="317:29" pos:end="321:41"><if pos:start="317:29" pos:end="321:41">if <condition pos:start="317:32" pos:end="319:71">(<expr pos:start="317:33" pos:end="319:70"><call pos:start="317:33" pos:end="317:42"><name pos:start="317:33" pos:end="317:39">IS_USER</name><argument_list pos:start="317:40" pos:end="317:42">(<argument pos:start="317:41" pos:end="317:41"><expr pos:start="317:41" pos:end="317:41"><name pos:start="317:41" pos:end="317:41">s</name></expr></argument>)</argument_list></call>

                                <operator pos:start="319:33" pos:end="319:34">||</operator> <operator pos:start="319:36" pos:end="319:36">!</operator><call pos:start="319:37" pos:end="319:70"><name pos:start="319:37" pos:end="319:47">arm_feature</name><argument_list pos:start="319:48" pos:end="319:70">(<argument pos:start="319:49" pos:end="319:51"><expr pos:start="319:49" pos:end="319:51"><name pos:start="319:49" pos:end="319:51">env</name></expr></argument>, <argument pos:start="319:54" pos:end="319:69"><expr pos:start="319:54" pos:end="319:69"><name pos:start="319:54" pos:end="319:69">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="321:33" pos:end="321:41"><block_content pos:start="321:33" pos:end="321:41">

                                <return pos:start="321:33" pos:end="321:41">return <expr pos:start="321:40" pos:end="321:40"><literal type="number" pos:start="321:40" pos:end="321:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="323:29" pos:end="323:64"><expr pos:start="323:29" pos:end="323:63"><name pos:start="323:29" pos:end="323:31">tmp</name> <operator pos:start="323:33" pos:end="323:33">=</operator> <call pos:start="323:35" pos:end="323:63"><name pos:start="323:35" pos:end="323:48">load_cpu_field</name><argument_list pos:start="323:49" pos:end="323:63">(<argument pos:start="323:50" pos:end="323:62"><expr pos:start="323:50" pos:end="323:62"><name pos:start="323:50" pos:end="323:62"><name pos:start="323:50" pos:end="323:52">vfp</name><operator pos:start="323:53" pos:end="323:53">.</operator><name pos:start="323:54" pos:end="323:58">xregs</name><index pos:start="323:59" pos:end="323:62">[<expr pos:start="323:60" pos:end="323:61"><name pos:start="323:60" pos:end="323:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="325:29" pos:end="325:34">break;</break>

                        <default pos:start="327:25" pos:end="327:32">default:</default>

                            <return pos:start="329:29" pos:end="329:37">return <expr pos:start="329:36" pos:end="329:36"><literal type="number" pos:start="329:36" pos:end="329:36">1</literal></expr>;</return>

                        </block_content>}</block></switch>

                    </block_content>}</block></if> <else pos:start="333:23" pos:end="339:21">else <block pos:start="333:28" pos:end="339:21">{<block_content pos:start="335:25" pos:end="337:44">

                        <expr_stmt pos:start="335:25" pos:end="335:47"><expr pos:start="335:25" pos:end="335:46"><call pos:start="335:25" pos:end="335:46"><name pos:start="335:25" pos:end="335:39">gen_mov_F0_vreg</name><argument_list pos:start="335:40" pos:end="335:46">(<argument pos:start="335:41" pos:end="335:41"><expr pos:start="335:41" pos:end="335:41"><literal type="number" pos:start="335:41" pos:end="335:41">0</literal></expr></argument>, <argument pos:start="335:44" pos:end="335:45"><expr pos:start="335:44" pos:end="335:45"><name pos:start="335:44" pos:end="335:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="337:25" pos:end="337:44"><expr pos:start="337:25" pos:end="337:43"><name pos:start="337:25" pos:end="337:27">tmp</name> <operator pos:start="337:29" pos:end="337:29">=</operator> <call pos:start="337:31" pos:end="337:43"><name pos:start="337:31" pos:end="337:41">gen_vfp_mrs</name><argument_list pos:start="337:42" pos:end="337:43">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="341:21" pos:end="353:21"><if pos:start="341:21" pos:end="349:21">if <condition pos:start="341:24" pos:end="341:33">(<expr pos:start="341:25" pos:end="341:32"><name pos:start="341:25" pos:end="341:26">rd</name> <operator pos:start="341:28" pos:end="341:29">==</operator> <literal type="number" pos:start="341:31" pos:end="341:32">15</literal></expr>)</condition> <block pos:start="341:35" pos:end="349:21">{<block_content pos:start="345:25" pos:end="347:47">

                        <comment type="block" pos:start="343:25" pos:end="343:63">/* Set the 4 flag bits in the CPSR.  */</comment>

                        <expr_stmt pos:start="345:25" pos:end="345:42"><expr pos:start="345:25" pos:end="345:41"><call pos:start="345:25" pos:end="345:41"><name pos:start="345:25" pos:end="345:36">gen_set_nzcv</name><argument_list pos:start="345:37" pos:end="345:41">(<argument pos:start="345:38" pos:end="345:40"><expr pos:start="345:38" pos:end="345:40"><name pos:start="345:38" pos:end="345:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="347:25" pos:end="347:47"><expr pos:start="347:25" pos:end="347:46"><call pos:start="347:25" pos:end="347:46"><name pos:start="347:25" pos:end="347:41">tcg_temp_free_i32</name><argument_list pos:start="347:42" pos:end="347:46">(<argument pos:start="347:43" pos:end="347:45"><expr pos:start="347:43" pos:end="347:45"><name pos:start="347:43" pos:end="347:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="349:23" pos:end="353:21">else <block pos:start="349:28" pos:end="353:21">{<block_content pos:start="351:25" pos:end="351:46">

                        <expr_stmt pos:start="351:25" pos:end="351:46"><expr pos:start="351:25" pos:end="351:45"><call pos:start="351:25" pos:end="351:45"><name pos:start="351:25" pos:end="351:33">store_reg</name><argument_list pos:start="351:34" pos:end="351:45">(<argument pos:start="351:35" pos:end="351:35"><expr pos:start="351:35" pos:end="351:35"><name pos:start="351:35" pos:end="351:35">s</name></expr></argument>, <argument pos:start="351:38" pos:end="351:39"><expr pos:start="351:38" pos:end="351:39"><name pos:start="351:38" pos:end="351:39">rd</name></expr></argument>, <argument pos:start="351:42" pos:end="351:44"><expr pos:start="351:42" pos:end="351:44"><name pos:start="351:42" pos:end="351:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="355:19" pos:end="429:17">else <block pos:start="355:24" pos:end="429:17">{<block_content pos:start="359:21" pos:end="427:21">

                    <comment type="block" pos:start="357:21" pos:end="357:34">/* arm-&gt;vfp */</comment>

                    <expr_stmt pos:start="359:21" pos:end="359:42"><expr pos:start="359:21" pos:end="359:41"><name pos:start="359:21" pos:end="359:23">tmp</name> <operator pos:start="359:25" pos:end="359:25">=</operator> <call pos:start="359:27" pos:end="359:41"><name pos:start="359:27" pos:end="359:34">load_reg</name><argument_list pos:start="359:35" pos:end="359:41">(<argument pos:start="359:36" pos:end="359:36"><expr pos:start="359:36" pos:end="359:36"><name pos:start="359:36" pos:end="359:36">s</name></expr></argument>, <argument pos:start="359:39" pos:end="359:40"><expr pos:start="359:39" pos:end="359:40"><name pos:start="359:39" pos:end="359:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="361:21" pos:end="427:21"><if pos:start="361:21" pos:end="421:21">if <condition pos:start="361:24" pos:end="361:41">(<expr pos:start="361:25" pos:end="361:40"><name pos:start="361:25" pos:end="361:28">insn</name> <operator pos:start="361:30" pos:end="361:30">&amp;</operator> <operator pos:start="361:32" pos:end="361:32">(</operator><literal type="number" pos:start="361:33" pos:end="361:33">1</literal> <operator pos:start="361:35" pos:end="361:36">&lt;&lt;</operator> <literal type="number" pos:start="361:38" pos:end="361:39">21</literal><operator pos:start="361:40" pos:end="361:40">)</operator></expr>)</condition> <block pos:start="361:43" pos:end="421:21">{<block_content pos:start="363:25" pos:end="419:25">

                        <expr_stmt pos:start="363:25" pos:end="363:33"><expr pos:start="363:25" pos:end="363:32"><name pos:start="363:25" pos:end="363:26">rn</name> <operator pos:start="363:28" pos:end="363:30">&gt;&gt;=</operator> <literal type="number" pos:start="363:32" pos:end="363:32">1</literal></expr>;</expr_stmt>

                        <comment type="block" pos:start="365:25" pos:end="365:45">/* system register */</comment>

                        <switch pos:start="367:25" pos:end="419:25">switch <condition pos:start="367:32" pos:end="367:35">(<expr pos:start="367:33" pos:end="367:34"><name pos:start="367:33" pos:end="367:34">rn</name></expr>)</condition> <block pos:start="367:37" pos:end="419:25">{<block_content pos:start="369:25" pos:end="417:37">

                        <case pos:start="369:25" pos:end="369:43">case <expr pos:start="369:30" pos:end="369:42"><name pos:start="369:30" pos:end="369:42">ARM_VFP_FPSID</name></expr>:</case>

                        <case pos:start="371:25" pos:end="371:43">case <expr pos:start="371:30" pos:end="371:42"><name pos:start="371:30" pos:end="371:42">ARM_VFP_MVFR0</name></expr>:</case>

                        <case pos:start="373:25" pos:end="373:43">case <expr pos:start="373:30" pos:end="373:42"><name pos:start="373:30" pos:end="373:42">ARM_VFP_MVFR1</name></expr>:</case>

                            <comment type="block" pos:start="375:29" pos:end="375:54">/* Writes are ignored.  */</comment>

                            <break pos:start="377:29" pos:end="377:34">break;</break>

                        <case pos:start="379:25" pos:end="379:43">case <expr pos:start="379:30" pos:end="379:42"><name pos:start="379:30" pos:end="379:42">ARM_VFP_FPSCR</name></expr>:</case>

                            <expr_stmt pos:start="381:29" pos:end="381:67"><expr pos:start="381:29" pos:end="381:66"><call pos:start="381:29" pos:end="381:66"><name pos:start="381:29" pos:end="381:52">gen_helper_vfp_set_fpscr</name><argument_list pos:start="381:53" pos:end="381:66">(<argument pos:start="381:54" pos:end="381:60"><expr pos:start="381:54" pos:end="381:60"><name pos:start="381:54" pos:end="381:60">cpu_env</name></expr></argument>, <argument pos:start="381:63" pos:end="381:65"><expr pos:start="381:63" pos:end="381:65"><name pos:start="381:63" pos:end="381:65">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="383:29" pos:end="383:51"><expr pos:start="383:29" pos:end="383:50"><call pos:start="383:29" pos:end="383:50"><name pos:start="383:29" pos:end="383:45">tcg_temp_free_i32</name><argument_list pos:start="383:46" pos:end="383:50">(<argument pos:start="383:47" pos:end="383:49"><expr pos:start="383:47" pos:end="383:49"><name pos:start="383:47" pos:end="383:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="385:29" pos:end="385:45"><expr pos:start="385:29" pos:end="385:44"><call pos:start="385:29" pos:end="385:44"><name pos:start="385:29" pos:end="385:41">gen_lookup_tb</name><argument_list pos:start="385:42" pos:end="385:44">(<argument pos:start="385:43" pos:end="385:43"><expr pos:start="385:43" pos:end="385:43"><name pos:start="385:43" pos:end="385:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="387:29" pos:end="387:34">break;</break>

                        <case pos:start="389:25" pos:end="389:43">case <expr pos:start="389:30" pos:end="389:42"><name pos:start="389:30" pos:end="389:42">ARM_VFP_FPEXC</name></expr>:</case>

                            <if_stmt pos:start="391:29" pos:end="393:41"><if pos:start="391:29" pos:end="393:41">if <condition pos:start="391:32" pos:end="391:43">(<expr pos:start="391:33" pos:end="391:42"><call pos:start="391:33" pos:end="391:42"><name pos:start="391:33" pos:end="391:39">IS_USER</name><argument_list pos:start="391:40" pos:end="391:42">(<argument pos:start="391:41" pos:end="391:41"><expr pos:start="391:41" pos:end="391:41"><name pos:start="391:41" pos:end="391:41">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="393:33" pos:end="393:41"><block_content pos:start="393:33" pos:end="393:41">

                                <return pos:start="393:33" pos:end="393:41">return <expr pos:start="393:40" pos:end="393:40"><literal type="number" pos:start="393:40" pos:end="393:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <comment type="block" pos:start="395:29" pos:end="397:63">/* TODO: VFP subarchitecture support.

                             * For now, keep the EN bit only */</comment>

                            <expr_stmt pos:start="399:29" pos:end="399:64"><expr pos:start="399:29" pos:end="399:63"><call pos:start="399:29" pos:end="399:63"><name pos:start="399:29" pos:end="399:44">tcg_gen_andi_i32</name><argument_list pos:start="399:45" pos:end="399:63">(<argument pos:start="399:46" pos:end="399:48"><expr pos:start="399:46" pos:end="399:48"><name pos:start="399:46" pos:end="399:48">tmp</name></expr></argument>, <argument pos:start="399:51" pos:end="399:53"><expr pos:start="399:51" pos:end="399:53"><name pos:start="399:51" pos:end="399:53">tmp</name></expr></argument>, <argument pos:start="399:56" pos:end="399:62"><expr pos:start="399:56" pos:end="399:62"><literal type="number" pos:start="399:56" pos:end="399:56">1</literal> <operator pos:start="399:58" pos:end="399:59">&lt;&lt;</operator> <literal type="number" pos:start="399:61" pos:end="399:62">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="401:29" pos:end="401:64"><expr pos:start="401:29" pos:end="401:63"><call pos:start="401:29" pos:end="401:63"><name pos:start="401:29" pos:end="401:43">store_cpu_field</name><argument_list pos:start="401:44" pos:end="401:63">(<argument pos:start="401:45" pos:end="401:47"><expr pos:start="401:45" pos:end="401:47"><name pos:start="401:45" pos:end="401:47">tmp</name></expr></argument>, <argument pos:start="401:50" pos:end="401:62"><expr pos:start="401:50" pos:end="401:62"><name pos:start="401:50" pos:end="401:62"><name pos:start="401:50" pos:end="401:52">vfp</name><operator pos:start="401:53" pos:end="401:53">.</operator><name pos:start="401:54" pos:end="401:58">xregs</name><index pos:start="401:59" pos:end="401:62">[<expr pos:start="401:60" pos:end="401:61"><name pos:start="401:60" pos:end="401:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="403:29" pos:end="403:45"><expr pos:start="403:29" pos:end="403:44"><call pos:start="403:29" pos:end="403:44"><name pos:start="403:29" pos:end="403:41">gen_lookup_tb</name><argument_list pos:start="403:42" pos:end="403:44">(<argument pos:start="403:43" pos:end="403:43"><expr pos:start="403:43" pos:end="403:43"><name pos:start="403:43" pos:end="403:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="405:29" pos:end="405:34">break;</break>

                        <case pos:start="407:25" pos:end="407:44">case <expr pos:start="407:30" pos:end="407:43"><name pos:start="407:30" pos:end="407:43">ARM_VFP_FPINST</name></expr>:</case>

                        <case pos:start="409:25" pos:end="409:45">case <expr pos:start="409:30" pos:end="409:44"><name pos:start="409:30" pos:end="409:44">ARM_VFP_FPINST2</name></expr>:</case>

                            <expr_stmt pos:start="411:29" pos:end="411:64"><expr pos:start="411:29" pos:end="411:63"><call pos:start="411:29" pos:end="411:63"><name pos:start="411:29" pos:end="411:43">store_cpu_field</name><argument_list pos:start="411:44" pos:end="411:63">(<argument pos:start="411:45" pos:end="411:47"><expr pos:start="411:45" pos:end="411:47"><name pos:start="411:45" pos:end="411:47">tmp</name></expr></argument>, <argument pos:start="411:50" pos:end="411:62"><expr pos:start="411:50" pos:end="411:62"><name pos:start="411:50" pos:end="411:62"><name pos:start="411:50" pos:end="411:52">vfp</name><operator pos:start="411:53" pos:end="411:53">.</operator><name pos:start="411:54" pos:end="411:58">xregs</name><index pos:start="411:59" pos:end="411:62">[<expr pos:start="411:60" pos:end="411:61"><name pos:start="411:60" pos:end="411:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="413:29" pos:end="413:34">break;</break>

                        <default pos:start="415:25" pos:end="415:32">default:</default>

                            <return pos:start="417:29" pos:end="417:37">return <expr pos:start="417:36" pos:end="417:36"><literal type="number" pos:start="417:36" pos:end="417:36">1</literal></expr>;</return>

                        </block_content>}</block></switch>

                    </block_content>}</block></if> <else pos:start="421:23" pos:end="427:21">else <block pos:start="421:28" pos:end="427:21">{<block_content pos:start="423:25" pos:end="425:47">

                        <expr_stmt pos:start="423:25" pos:end="423:41"><expr pos:start="423:25" pos:end="423:40"><call pos:start="423:25" pos:end="423:40"><name pos:start="423:25" pos:end="423:35">gen_vfp_msr</name><argument_list pos:start="423:36" pos:end="423:40">(<argument pos:start="423:37" pos:end="423:39"><expr pos:start="423:37" pos:end="423:39"><name pos:start="423:37" pos:end="423:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="425:25" pos:end="425:47"><expr pos:start="425:25" pos:end="425:46"><call pos:start="425:25" pos:end="425:46"><name pos:start="425:25" pos:end="425:39">gen_mov_vreg_F0</name><argument_list pos:start="425:40" pos:end="425:46">(<argument pos:start="425:41" pos:end="425:41"><expr pos:start="425:41" pos:end="425:41"><literal type="number" pos:start="425:41" pos:end="425:41">0</literal></expr></argument>, <argument pos:start="425:44" pos:end="425:45"><expr pos:start="425:44" pos:end="425:45"><name pos:start="425:44" pos:end="425:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="433:11" pos:end="1189:9">else <block pos:start="433:16" pos:end="1189:9">{<block_content pos:start="439:13" pos:end="1187:13">

            <comment type="block" pos:start="435:13" pos:end="435:33">/* data processing */</comment>

            <comment type="block" pos:start="437:13" pos:end="437:58">/* The opcode is in bits 23, 21, 20 and 6.  */</comment>

            <expr_stmt pos:start="439:13" pos:end="439:77"><expr pos:start="439:13" pos:end="439:76"><name pos:start="439:13" pos:end="439:14">op</name> <operator pos:start="439:16" pos:end="439:16">=</operator> <operator pos:start="439:18" pos:end="439:18">(</operator><operator pos:start="439:19" pos:end="439:19">(</operator><name pos:start="439:20" pos:end="439:23">insn</name> <operator pos:start="439:25" pos:end="439:26">&gt;&gt;</operator> <literal type="number" pos:start="439:28" pos:end="439:29">20</literal><operator pos:start="439:30" pos:end="439:30">)</operator> <operator pos:start="439:32" pos:end="439:32">&amp;</operator> <literal type="number" pos:start="439:34" pos:end="439:34">8</literal><operator pos:start="439:35" pos:end="439:35">)</operator> <operator pos:start="439:37" pos:end="439:37">|</operator> <operator pos:start="439:39" pos:end="439:39">(</operator><operator pos:start="439:40" pos:end="439:40">(</operator><name pos:start="439:41" pos:end="439:44">insn</name> <operator pos:start="439:46" pos:end="439:47">&gt;&gt;</operator> <literal type="number" pos:start="439:49" pos:end="439:50">19</literal><operator pos:start="439:51" pos:end="439:51">)</operator> <operator pos:start="439:53" pos:end="439:53">&amp;</operator> <literal type="number" pos:start="439:55" pos:end="439:55">6</literal><operator pos:start="439:56" pos:end="439:56">)</operator> <operator pos:start="439:58" pos:end="439:58">|</operator> <operator pos:start="439:60" pos:end="439:60">(</operator><operator pos:start="439:61" pos:end="439:61">(</operator><name pos:start="439:62" pos:end="439:65">insn</name> <operator pos:start="439:67" pos:end="439:68">&gt;&gt;</operator> <literal type="number" pos:start="439:70" pos:end="439:70">6</literal><operator pos:start="439:71" pos:end="439:71">)</operator> <operator pos:start="439:73" pos:end="439:73">&amp;</operator> <literal type="number" pos:start="439:75" pos:end="439:75">1</literal><operator pos:start="439:76" pos:end="439:76">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="441:13" pos:end="513:13"><if pos:start="441:13" pos:end="489:13">if <condition pos:start="441:16" pos:end="441:19">(<expr pos:start="441:17" pos:end="441:18"><name pos:start="441:17" pos:end="441:18">dp</name></expr>)</condition> <block pos:start="441:21" pos:end="489:13">{<block_content pos:start="443:17" pos:end="487:17">

                <if_stmt pos:start="443:17" pos:end="455:17"><if pos:start="443:17" pos:end="449:17">if <condition pos:start="443:20" pos:end="443:29">(<expr pos:start="443:21" pos:end="443:28"><name pos:start="443:21" pos:end="443:22">op</name> <operator pos:start="443:24" pos:end="443:25">==</operator> <literal type="number" pos:start="443:27" pos:end="443:28">15</literal></expr>)</condition> <block pos:start="443:31" pos:end="449:17">{<block_content pos:start="447:21" pos:end="447:67">

                    <comment type="block" pos:start="445:21" pos:end="445:38">/* rn is opcode */</comment>

                    <expr_stmt pos:start="447:21" pos:end="447:67"><expr pos:start="447:21" pos:end="447:66"><name pos:start="447:21" pos:end="447:22">rn</name> <operator pos:start="447:24" pos:end="447:24">=</operator> <operator pos:start="447:26" pos:end="447:26">(</operator><operator pos:start="447:27" pos:end="447:27">(</operator><name pos:start="447:28" pos:end="447:31">insn</name> <operator pos:start="447:33" pos:end="447:34">&gt;&gt;</operator> <literal type="number" pos:start="447:36" pos:end="447:37">15</literal><operator pos:start="447:38" pos:end="447:38">)</operator> <operator pos:start="447:40" pos:end="447:40">&amp;</operator> <literal type="number" pos:start="447:42" pos:end="447:45">0x1e</literal><operator pos:start="447:46" pos:end="447:46">)</operator> <operator pos:start="447:48" pos:end="447:48">|</operator> <operator pos:start="447:50" pos:end="447:50">(</operator><operator pos:start="447:51" pos:end="447:51">(</operator><name pos:start="447:52" pos:end="447:55">insn</name> <operator pos:start="447:57" pos:end="447:58">&gt;&gt;</operator> <literal type="number" pos:start="447:60" pos:end="447:60">7</literal><operator pos:start="447:61" pos:end="447:61">)</operator> <operator pos:start="447:63" pos:end="447:63">&amp;</operator> <literal type="number" pos:start="447:65" pos:end="447:65">1</literal><operator pos:start="447:66" pos:end="447:66">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="449:19" pos:end="455:17">else <block pos:start="449:24" pos:end="455:17">{<block_content pos:start="453:21" pos:end="453:41">

                    <comment type="block" pos:start="451:21" pos:end="451:47">/* rn is register number */</comment>

                    <expr_stmt pos:start="453:21" pos:end="453:41"><expr pos:start="453:21" pos:end="453:40"><call pos:start="453:21" pos:end="453:40"><name pos:start="453:21" pos:end="453:30">VFP_DREG_N</name><argument_list pos:start="453:31" pos:end="453:40">(<argument pos:start="453:32" pos:end="453:33"><expr pos:start="453:32" pos:end="453:33"><name pos:start="453:32" pos:end="453:33">rn</name></expr></argument>, <argument pos:start="453:36" pos:end="453:39"><expr pos:start="453:36" pos:end="453:39"><name pos:start="453:36" pos:end="453:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="459:17" pos:end="469:17"><if pos:start="459:17" pos:end="465:17">if <condition pos:start="459:20" pos:end="459:68">(<expr pos:start="459:21" pos:end="459:67"><name pos:start="459:21" pos:end="459:22">op</name> <operator pos:start="459:24" pos:end="459:25">==</operator> <literal type="number" pos:start="459:27" pos:end="459:28">15</literal> <operator pos:start="459:30" pos:end="459:31">&amp;&amp;</operator> <operator pos:start="459:33" pos:end="459:33">(</operator><name pos:start="459:34" pos:end="459:35">rn</name> <operator pos:start="459:37" pos:end="459:38">==</operator> <literal type="number" pos:start="459:40" pos:end="459:41">15</literal> <operator pos:start="459:43" pos:end="459:44">||</operator> <operator pos:start="459:46" pos:end="459:46">(</operator><operator pos:start="459:47" pos:end="459:47">(</operator><name pos:start="459:48" pos:end="459:49">rn</name> <operator pos:start="459:51" pos:end="459:51">&amp;</operator> <literal type="number" pos:start="459:53" pos:end="459:56">0x1c</literal><operator pos:start="459:57" pos:end="459:57">)</operator> <operator pos:start="459:59" pos:end="459:60">==</operator> <literal type="number" pos:start="459:62" pos:end="459:65">0x18</literal><operator pos:start="459:66" pos:end="459:66">)</operator><operator pos:start="459:67" pos:end="459:67">)</operator></expr>)</condition> <block pos:start="459:70" pos:end="465:17">{<block_content pos:start="463:21" pos:end="463:42">

                    <comment type="block" pos:start="461:21" pos:end="461:67">/* Integer or single precision destination.  */</comment>

                    <expr_stmt pos:start="463:21" pos:end="463:42"><expr pos:start="463:21" pos:end="463:41"><name pos:start="463:21" pos:end="463:22">rd</name> <operator pos:start="463:24" pos:end="463:24">=</operator> <call pos:start="463:26" pos:end="463:41"><name pos:start="463:26" pos:end="463:35">VFP_SREG_D</name><argument_list pos:start="463:36" pos:end="463:41">(<argument pos:start="463:37" pos:end="463:40"><expr pos:start="463:37" pos:end="463:40"><name pos:start="463:37" pos:end="463:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="465:19" pos:end="469:17">else <block pos:start="465:24" pos:end="469:17">{<block_content pos:start="467:21" pos:end="467:41">

                    <expr_stmt pos:start="467:21" pos:end="467:41"><expr pos:start="467:21" pos:end="467:40"><call pos:start="467:21" pos:end="467:40"><name pos:start="467:21" pos:end="467:30">VFP_DREG_D</name><argument_list pos:start="467:31" pos:end="467:40">(<argument pos:start="467:32" pos:end="467:33"><expr pos:start="467:32" pos:end="467:33"><name pos:start="467:32" pos:end="467:33">rd</name></expr></argument>, <argument pos:start="467:36" pos:end="467:39"><expr pos:start="467:36" pos:end="467:39"><name pos:start="467:36" pos:end="467:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="471:17" pos:end="487:17"><if pos:start="471:17" pos:end="483:17">if <condition pos:start="471:20" pos:end="473:69">(<expr pos:start="471:21" pos:end="473:68"><name pos:start="471:21" pos:end="471:22">op</name> <operator pos:start="471:24" pos:end="471:25">==</operator> <literal type="number" pos:start="471:27" pos:end="471:28">15</literal> <operator pos:start="471:30" pos:end="471:31">&amp;&amp;</operator>

                    <operator pos:start="473:21" pos:end="473:21">(</operator><operator pos:start="473:22" pos:end="473:22">(</operator><operator pos:start="473:23" pos:end="473:23">(</operator><name pos:start="473:24" pos:end="473:25">rn</name> <operator pos:start="473:27" pos:end="473:27">&amp;</operator> <literal type="number" pos:start="473:29" pos:end="473:32">0x1c</literal><operator pos:start="473:33" pos:end="473:33">)</operator> <operator pos:start="473:35" pos:end="473:36">==</operator> <literal type="number" pos:start="473:38" pos:end="473:41">0x10</literal><operator pos:start="473:42" pos:end="473:42">)</operator> <operator pos:start="473:44" pos:end="473:45">||</operator> <operator pos:start="473:47" pos:end="473:47">(</operator><operator pos:start="473:48" pos:end="473:48">(</operator><name pos:start="473:49" pos:end="473:50">rn</name> <operator pos:start="473:52" pos:end="473:52">&amp;</operator> <literal type="number" pos:start="473:54" pos:end="473:57">0x14</literal><operator pos:start="473:58" pos:end="473:58">)</operator> <operator pos:start="473:60" pos:end="473:61">==</operator> <literal type="number" pos:start="473:63" pos:end="473:66">0x14</literal><operator pos:start="473:67" pos:end="473:67">)</operator><operator pos:start="473:68" pos:end="473:68">)</operator></expr>)</condition> <block pos:start="473:71" pos:end="483:17">{<block_content pos:start="481:21" pos:end="481:42">

                    <comment type="block" pos:start="475:21" pos:end="479:23">/* VCVT from int is always from S reg regardless of dp bit.

                     * VCVT with immediate frac_bits has same format as SREG_M

                     */</comment>

                    <expr_stmt pos:start="481:21" pos:end="481:42"><expr pos:start="481:21" pos:end="481:41"><name pos:start="481:21" pos:end="481:22">rm</name> <operator pos:start="481:24" pos:end="481:24">=</operator> <call pos:start="481:26" pos:end="481:41"><name pos:start="481:26" pos:end="481:35">VFP_SREG_M</name><argument_list pos:start="481:36" pos:end="481:41">(<argument pos:start="481:37" pos:end="481:40"><expr pos:start="481:37" pos:end="481:40"><name pos:start="481:37" pos:end="481:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="483:19" pos:end="487:17">else <block pos:start="483:24" pos:end="487:17">{<block_content pos:start="485:21" pos:end="485:41">

                    <expr_stmt pos:start="485:21" pos:end="485:41"><expr pos:start="485:21" pos:end="485:40"><call pos:start="485:21" pos:end="485:40"><name pos:start="485:21" pos:end="485:30">VFP_DREG_M</name><argument_list pos:start="485:31" pos:end="485:40">(<argument pos:start="485:32" pos:end="485:33"><expr pos:start="485:32" pos:end="485:33"><name pos:start="485:32" pos:end="485:33">rm</name></expr></argument>, <argument pos:start="485:36" pos:end="485:39"><expr pos:start="485:36" pos:end="485:39"><name pos:start="485:36" pos:end="485:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="489:15" pos:end="513:13">else <block pos:start="489:20" pos:end="513:13">{<block_content pos:start="491:17" pos:end="511:38">

                <expr_stmt pos:start="491:17" pos:end="491:38"><expr pos:start="491:17" pos:end="491:37"><name pos:start="491:17" pos:end="491:18">rn</name> <operator pos:start="491:20" pos:end="491:20">=</operator> <call pos:start="491:22" pos:end="491:37"><name pos:start="491:22" pos:end="491:31">VFP_SREG_N</name><argument_list pos:start="491:32" pos:end="491:37">(<argument pos:start="491:33" pos:end="491:36"><expr pos:start="491:33" pos:end="491:36"><name pos:start="491:33" pos:end="491:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="493:17" pos:end="503:17"><if pos:start="493:17" pos:end="499:17">if <condition pos:start="493:20" pos:end="493:41">(<expr pos:start="493:21" pos:end="493:40"><name pos:start="493:21" pos:end="493:22">op</name> <operator pos:start="493:24" pos:end="493:25">==</operator> <literal type="number" pos:start="493:27" pos:end="493:28">15</literal> <operator pos:start="493:30" pos:end="493:31">&amp;&amp;</operator> <name pos:start="493:33" pos:end="493:34">rn</name> <operator pos:start="493:36" pos:end="493:37">==</operator> <literal type="number" pos:start="493:39" pos:end="493:40">15</literal></expr>)</condition> <block pos:start="493:43" pos:end="499:17">{<block_content pos:start="497:21" pos:end="497:41">

                    <comment type="block" pos:start="495:21" pos:end="495:56">/* Double precision destination.  */</comment>

                    <expr_stmt pos:start="497:21" pos:end="497:41"><expr pos:start="497:21" pos:end="497:40"><call pos:start="497:21" pos:end="497:40"><name pos:start="497:21" pos:end="497:30">VFP_DREG_D</name><argument_list pos:start="497:31" pos:end="497:40">(<argument pos:start="497:32" pos:end="497:33"><expr pos:start="497:32" pos:end="497:33"><name pos:start="497:32" pos:end="497:33">rd</name></expr></argument>, <argument pos:start="497:36" pos:end="497:39"><expr pos:start="497:36" pos:end="497:39"><name pos:start="497:36" pos:end="497:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="499:19" pos:end="503:17">else <block pos:start="499:24" pos:end="503:17">{<block_content pos:start="501:21" pos:end="501:42">

                    <expr_stmt pos:start="501:21" pos:end="501:42"><expr pos:start="501:21" pos:end="501:41"><name pos:start="501:21" pos:end="501:22">rd</name> <operator pos:start="501:24" pos:end="501:24">=</operator> <call pos:start="501:26" pos:end="501:41"><name pos:start="501:26" pos:end="501:35">VFP_SREG_D</name><argument_list pos:start="501:36" pos:end="501:41">(<argument pos:start="501:37" pos:end="501:40"><expr pos:start="501:37" pos:end="501:40"><name pos:start="501:37" pos:end="501:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <comment type="block" pos:start="505:17" pos:end="509:19">/* NB that we implicitly rely on the encoding for the frac_bits

                 * in VCVT of fixed to float being the same as that of an SREG_M

                 */</comment>

                <expr_stmt pos:start="511:17" pos:end="511:38"><expr pos:start="511:17" pos:end="511:37"><name pos:start="511:17" pos:end="511:18">rm</name> <operator pos:start="511:20" pos:end="511:20">=</operator> <call pos:start="511:22" pos:end="511:37"><name pos:start="511:22" pos:end="511:31">VFP_SREG_M</name><argument_list pos:start="511:32" pos:end="511:37">(<argument pos:start="511:33" pos:end="511:36"><expr pos:start="511:33" pos:end="511:36"><name pos:start="511:33" pos:end="511:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="517:13" pos:end="517:32"><expr pos:start="517:13" pos:end="517:31"><name pos:start="517:13" pos:end="517:18">veclen</name> <operator pos:start="517:20" pos:end="517:20">=</operator> <name pos:start="517:22" pos:end="517:31"><name pos:start="517:22" pos:end="517:22">s</name><operator pos:start="517:23" pos:end="517:24">-&gt;</operator><name pos:start="517:25" pos:end="517:31">vec_len</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="519:13" pos:end="521:27"><if pos:start="519:13" pos:end="521:27">if <condition pos:start="519:16" pos:end="519:35">(<expr pos:start="519:17" pos:end="519:34"><name pos:start="519:17" pos:end="519:18">op</name> <operator pos:start="519:20" pos:end="519:21">==</operator> <literal type="number" pos:start="519:23" pos:end="519:24">15</literal> <operator pos:start="519:26" pos:end="519:27">&amp;&amp;</operator> <name pos:start="519:29" pos:end="519:30">rn</name> <operator pos:start="519:32" pos:end="519:32">&gt;</operator> <literal type="number" pos:start="519:34" pos:end="519:34">3</literal></expr>)</condition><block type="pseudo" pos:start="521:17" pos:end="521:27"><block_content pos:start="521:17" pos:end="521:27">

                <expr_stmt pos:start="521:17" pos:end="521:27"><expr pos:start="521:17" pos:end="521:26"><name pos:start="521:17" pos:end="521:22">veclen</name> <operator pos:start="521:24" pos:end="521:24">=</operator> <literal type="number" pos:start="521:26" pos:end="521:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="525:13" pos:end="525:45">/* Shut up compiler warnings.  */</comment>

            <expr_stmt pos:start="527:13" pos:end="527:24"><expr pos:start="527:13" pos:end="527:23"><name pos:start="527:13" pos:end="527:19">delta_m</name> <operator pos:start="527:21" pos:end="527:21">=</operator> <literal type="number" pos:start="527:23" pos:end="527:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="529:13" pos:end="529:24"><expr pos:start="529:13" pos:end="529:23"><name pos:start="529:13" pos:end="529:19">delta_d</name> <operator pos:start="529:21" pos:end="529:21">=</operator> <literal type="number" pos:start="529:23" pos:end="529:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:26"><expr pos:start="531:13" pos:end="531:25"><name pos:start="531:13" pos:end="531:21">bank_mask</name> <operator pos:start="531:23" pos:end="531:23">=</operator> <literal type="number" pos:start="531:25" pos:end="531:25">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="535:13" pos:end="583:13"><if pos:start="535:13" pos:end="583:13">if <condition pos:start="535:16" pos:end="535:27">(<expr pos:start="535:17" pos:end="535:26"><name pos:start="535:17" pos:end="535:22">veclen</name> <operator pos:start="535:24" pos:end="535:24">&gt;</operator> <literal type="number" pos:start="535:26" pos:end="535:26">0</literal></expr>)</condition> <block pos:start="535:29" pos:end="583:13">{<block_content pos:start="537:17" pos:end="581:17">

                <if_stmt pos:start="537:17" pos:end="543:37"><if pos:start="537:17" pos:end="539:36">if <condition pos:start="537:20" pos:end="537:23">(<expr pos:start="537:21" pos:end="537:22"><name pos:start="537:21" pos:end="537:22">dp</name></expr>)</condition><block type="pseudo" pos:start="539:21" pos:end="539:36"><block_content pos:start="539:21" pos:end="539:36">

                    <expr_stmt pos:start="539:21" pos:end="539:36"><expr pos:start="539:21" pos:end="539:35"><name pos:start="539:21" pos:end="539:29">bank_mask</name> <operator pos:start="539:31" pos:end="539:31">=</operator> <literal type="number" pos:start="539:33" pos:end="539:35">0xc</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="541:17" pos:end="543:37">else<block type="pseudo" pos:start="543:21" pos:end="543:37"><block_content pos:start="543:21" pos:end="543:37">

                    <expr_stmt pos:start="543:21" pos:end="543:37"><expr pos:start="543:21" pos:end="543:36"><name pos:start="543:21" pos:end="543:29">bank_mask</name> <operator pos:start="543:31" pos:end="543:31">=</operator> <literal type="number" pos:start="543:33" pos:end="543:36">0x18</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <comment type="block" pos:start="547:17" pos:end="547:72">/* Figure out what type of vector operation this is.  */</comment>

                <if_stmt pos:start="549:17" pos:end="581:17"><if pos:start="549:17" pos:end="555:17">if <condition pos:start="549:20" pos:end="549:42">(<expr pos:start="549:21" pos:end="549:41"><operator pos:start="549:21" pos:end="549:21">(</operator><name pos:start="549:22" pos:end="549:23">rd</name> <operator pos:start="549:25" pos:end="549:25">&amp;</operator> <name pos:start="549:27" pos:end="549:35">bank_mask</name><operator pos:start="549:36" pos:end="549:36">)</operator> <operator pos:start="549:38" pos:end="549:39">==</operator> <literal type="number" pos:start="549:41" pos:end="549:41">0</literal></expr>)</condition> <block pos:start="549:44" pos:end="555:17">{<block_content pos:start="553:21" pos:end="553:31">

                    <comment type="block" pos:start="551:21" pos:end="551:32">/* scalar */</comment>

                    <expr_stmt pos:start="553:21" pos:end="553:31"><expr pos:start="553:21" pos:end="553:30"><name pos:start="553:21" pos:end="553:26">veclen</name> <operator pos:start="553:28" pos:end="553:28">=</operator> <literal type="number" pos:start="553:30" pos:end="553:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="555:19" pos:end="581:17">else <block pos:start="555:24" pos:end="581:17">{<block_content pos:start="557:21" pos:end="579:21">

                    <if_stmt pos:start="557:21" pos:end="563:52"><if pos:start="557:21" pos:end="559:59">if <condition pos:start="557:24" pos:end="557:27">(<expr pos:start="557:25" pos:end="557:26"><name pos:start="557:25" pos:end="557:26">dp</name></expr>)</condition><block type="pseudo" pos:start="559:25" pos:end="559:59"><block_content pos:start="559:25" pos:end="559:59">

                        <expr_stmt pos:start="559:25" pos:end="559:59"><expr pos:start="559:25" pos:end="559:58"><name pos:start="559:25" pos:end="559:31">delta_d</name> <operator pos:start="559:33" pos:end="559:33">=</operator> <operator pos:start="559:35" pos:end="559:35">(</operator><name pos:start="559:36" pos:end="559:48"><name pos:start="559:36" pos:end="559:36">s</name><operator pos:start="559:37" pos:end="559:38">-&gt;</operator><name pos:start="559:39" pos:end="559:48">vec_stride</name></name> <operator pos:start="559:50" pos:end="559:51">&gt;&gt;</operator> <literal type="number" pos:start="559:53" pos:end="559:53">1</literal><operator pos:start="559:54" pos:end="559:54">)</operator> <operator pos:start="559:56" pos:end="559:56">+</operator> <literal type="number" pos:start="559:58" pos:end="559:58">1</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="561:21" pos:end="563:52">else<block type="pseudo" pos:start="563:25" pos:end="563:52"><block_content pos:start="563:25" pos:end="563:52">

                        <expr_stmt pos:start="563:25" pos:end="563:52"><expr pos:start="563:25" pos:end="563:51"><name pos:start="563:25" pos:end="563:31">delta_d</name> <operator pos:start="563:33" pos:end="563:33">=</operator> <name pos:start="563:35" pos:end="563:47"><name pos:start="563:35" pos:end="563:35">s</name><operator pos:start="563:36" pos:end="563:37">-&gt;</operator><name pos:start="563:38" pos:end="563:47">vec_stride</name></name> <operator pos:start="563:49" pos:end="563:49">+</operator> <literal type="number" pos:start="563:51" pos:end="563:51">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <if_stmt pos:start="567:21" pos:end="579:21"><if pos:start="567:21" pos:end="573:21">if <condition pos:start="567:24" pos:end="567:46">(<expr pos:start="567:25" pos:end="567:45"><operator pos:start="567:25" pos:end="567:25">(</operator><name pos:start="567:26" pos:end="567:27">rm</name> <operator pos:start="567:29" pos:end="567:29">&amp;</operator> <name pos:start="567:31" pos:end="567:39">bank_mask</name><operator pos:start="567:40" pos:end="567:40">)</operator> <operator pos:start="567:42" pos:end="567:43">==</operator> <literal type="number" pos:start="567:45" pos:end="567:45">0</literal></expr>)</condition> <block pos:start="567:48" pos:end="573:21">{<block_content pos:start="571:25" pos:end="571:36">

                        <comment type="block" pos:start="569:25" pos:end="569:49">/* mixed scalar/vector */</comment>

                        <expr_stmt pos:start="571:25" pos:end="571:36"><expr pos:start="571:25" pos:end="571:35"><name pos:start="571:25" pos:end="571:31">delta_m</name> <operator pos:start="571:33" pos:end="571:33">=</operator> <literal type="number" pos:start="571:35" pos:end="571:35">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="573:23" pos:end="579:21">else <block pos:start="573:28" pos:end="579:21">{<block_content pos:start="577:25" pos:end="577:42">

                        <comment type="block" pos:start="575:25" pos:end="575:36">/* vector */</comment>

                        <expr_stmt pos:start="577:25" pos:end="577:42"><expr pos:start="577:25" pos:end="577:41"><name pos:start="577:25" pos:end="577:31">delta_m</name> <operator pos:start="577:33" pos:end="577:33">=</operator> <name pos:start="577:35" pos:end="577:41">delta_d</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="587:13" pos:end="587:45">/* Load the initial operands.  */</comment>

            <if_stmt pos:start="589:13" pos:end="667:13"><if pos:start="589:13" pos:end="659:13">if <condition pos:start="589:16" pos:end="589:25">(<expr pos:start="589:17" pos:end="589:24"><name pos:start="589:17" pos:end="589:18">op</name> <operator pos:start="589:20" pos:end="589:21">==</operator> <literal type="number" pos:start="589:23" pos:end="589:24">15</literal></expr>)</condition> <block pos:start="589:27" pos:end="659:13">{<block_content pos:start="591:17" pos:end="657:17">

                <switch pos:start="591:17" pos:end="657:17">switch <condition pos:start="591:24" pos:end="591:27">(<expr pos:start="591:25" pos:end="591:26"><name pos:start="591:25" pos:end="591:26">rn</name></expr>)</condition> <block pos:start="591:29" pos:end="657:17">{<block_content pos:start="593:17" pos:end="655:26">

                <case pos:start="593:17" pos:end="593:24">case <expr pos:start="593:22" pos:end="593:23"><literal type="number" pos:start="593:22" pos:end="593:23">16</literal></expr>:</case>

                <case pos:start="595:17" pos:end="595:24">case <expr pos:start="595:22" pos:end="595:23"><literal type="number" pos:start="595:22" pos:end="595:23">17</literal></expr>:</case>

                    <comment type="block" pos:start="597:21" pos:end="597:40">/* Integer source */</comment>

                    <expr_stmt pos:start="599:21" pos:end="599:43"><expr pos:start="599:21" pos:end="599:42"><call pos:start="599:21" pos:end="599:42"><name pos:start="599:21" pos:end="599:35">gen_mov_F0_vreg</name><argument_list pos:start="599:36" pos:end="599:42">(<argument pos:start="599:37" pos:end="599:37"><expr pos:start="599:37" pos:end="599:37"><literal type="number" pos:start="599:37" pos:end="599:37">0</literal></expr></argument>, <argument pos:start="599:40" pos:end="599:41"><expr pos:start="599:40" pos:end="599:41"><name pos:start="599:40" pos:end="599:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="601:21" pos:end="601:26">break;</break>

                <case pos:start="603:17" pos:end="603:23">case <expr pos:start="603:22" pos:end="603:22"><literal type="number" pos:start="603:22" pos:end="603:22">8</literal></expr>:</case>

                <case pos:start="605:17" pos:end="605:23">case <expr pos:start="605:22" pos:end="605:22"><literal type="number" pos:start="605:22" pos:end="605:22">9</literal></expr>:</case>

                    <comment type="block" pos:start="607:21" pos:end="607:33">/* Compare */</comment>

                    <expr_stmt pos:start="609:21" pos:end="609:44"><expr pos:start="609:21" pos:end="609:43"><call pos:start="609:21" pos:end="609:43"><name pos:start="609:21" pos:end="609:35">gen_mov_F0_vreg</name><argument_list pos:start="609:36" pos:end="609:43">(<argument pos:start="609:37" pos:end="609:38"><expr pos:start="609:37" pos:end="609:38"><name pos:start="609:37" pos:end="609:38">dp</name></expr></argument>, <argument pos:start="609:41" pos:end="609:42"><expr pos:start="609:41" pos:end="609:42"><name pos:start="609:41" pos:end="609:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="611:21" pos:end="611:44"><expr pos:start="611:21" pos:end="611:43"><call pos:start="611:21" pos:end="611:43"><name pos:start="611:21" pos:end="611:35">gen_mov_F1_vreg</name><argument_list pos:start="611:36" pos:end="611:43">(<argument pos:start="611:37" pos:end="611:38"><expr pos:start="611:37" pos:end="611:38"><name pos:start="611:37" pos:end="611:38">dp</name></expr></argument>, <argument pos:start="611:41" pos:end="611:42"><expr pos:start="611:41" pos:end="611:42"><name pos:start="611:41" pos:end="611:42">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="613:21" pos:end="613:26">break;</break>

                <case pos:start="615:17" pos:end="615:24">case <expr pos:start="615:22" pos:end="615:23"><literal type="number" pos:start="615:22" pos:end="615:23">10</literal></expr>:</case>

                <case pos:start="617:17" pos:end="617:24">case <expr pos:start="617:22" pos:end="617:23"><literal type="number" pos:start="617:22" pos:end="617:23">11</literal></expr>:</case>

                    <comment type="block" pos:start="619:21" pos:end="619:43">/* Compare with zero */</comment>

                    <expr_stmt pos:start="621:21" pos:end="621:44"><expr pos:start="621:21" pos:end="621:43"><call pos:start="621:21" pos:end="621:43"><name pos:start="621:21" pos:end="621:35">gen_mov_F0_vreg</name><argument_list pos:start="621:36" pos:end="621:43">(<argument pos:start="621:37" pos:end="621:38"><expr pos:start="621:37" pos:end="621:38"><name pos:start="621:37" pos:end="621:38">dp</name></expr></argument>, <argument pos:start="621:41" pos:end="621:42"><expr pos:start="621:41" pos:end="621:42"><name pos:start="621:41" pos:end="621:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="623:21" pos:end="623:39"><expr pos:start="623:21" pos:end="623:38"><call pos:start="623:21" pos:end="623:38"><name pos:start="623:21" pos:end="623:34">gen_vfp_F1_ld0</name><argument_list pos:start="623:35" pos:end="623:38">(<argument pos:start="623:36" pos:end="623:37"><expr pos:start="623:36" pos:end="623:37"><name pos:start="623:36" pos:end="623:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="625:21" pos:end="625:26">break;</break>

                <case pos:start="627:17" pos:end="627:24">case <expr pos:start="627:22" pos:end="627:23"><literal type="number" pos:start="627:22" pos:end="627:23">20</literal></expr>:</case>

                <case pos:start="629:17" pos:end="629:24">case <expr pos:start="629:22" pos:end="629:23"><literal type="number" pos:start="629:22" pos:end="629:23">21</literal></expr>:</case>

                <case pos:start="631:17" pos:end="631:24">case <expr pos:start="631:22" pos:end="631:23"><literal type="number" pos:start="631:22" pos:end="631:23">22</literal></expr>:</case>

                <case pos:start="633:17" pos:end="633:24">case <expr pos:start="633:22" pos:end="633:23"><literal type="number" pos:start="633:22" pos:end="633:23">23</literal></expr>:</case>

                <case pos:start="635:17" pos:end="635:24">case <expr pos:start="635:22" pos:end="635:23"><literal type="number" pos:start="635:22" pos:end="635:23">28</literal></expr>:</case>

                <case pos:start="637:17" pos:end="637:24">case <expr pos:start="637:22" pos:end="637:23"><literal type="number" pos:start="637:22" pos:end="637:23">29</literal></expr>:</case>

                <case pos:start="639:17" pos:end="639:24">case <expr pos:start="639:22" pos:end="639:23"><literal type="number" pos:start="639:22" pos:end="639:23">30</literal></expr>:</case>

                <case pos:start="641:17" pos:end="641:24">case <expr pos:start="641:22" pos:end="641:23"><literal type="number" pos:start="641:22" pos:end="641:23">31</literal></expr>:</case>

                    <comment type="block" pos:start="643:21" pos:end="643:59">/* Source and destination the same.  */</comment>

                    <expr_stmt pos:start="645:21" pos:end="645:44"><expr pos:start="645:21" pos:end="645:43"><call pos:start="645:21" pos:end="645:43"><name pos:start="645:21" pos:end="645:35">gen_mov_F0_vreg</name><argument_list pos:start="645:36" pos:end="645:43">(<argument pos:start="645:37" pos:end="645:38"><expr pos:start="645:37" pos:end="645:38"><name pos:start="645:37" pos:end="645:38">dp</name></expr></argument>, <argument pos:start="645:41" pos:end="645:42"><expr pos:start="645:41" pos:end="645:42"><name pos:start="645:41" pos:end="645:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="647:21" pos:end="647:26">break;</break>

                <default pos:start="649:17" pos:end="649:24">default:</default>

                    <comment type="block" pos:start="651:21" pos:end="651:46">/* One source operand.  */</comment>

                    <expr_stmt pos:start="653:21" pos:end="653:44"><expr pos:start="653:21" pos:end="653:43"><call pos:start="653:21" pos:end="653:43"><name pos:start="653:21" pos:end="653:35">gen_mov_F0_vreg</name><argument_list pos:start="653:36" pos:end="653:43">(<argument pos:start="653:37" pos:end="653:38"><expr pos:start="653:37" pos:end="653:38"><name pos:start="653:37" pos:end="653:38">dp</name></expr></argument>, <argument pos:start="653:41" pos:end="653:42"><expr pos:start="653:41" pos:end="653:42"><name pos:start="653:41" pos:end="653:42">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="655:21" pos:end="655:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="659:15" pos:end="667:13">else <block pos:start="659:20" pos:end="667:13">{<block_content pos:start="663:17" pos:end="665:40">

                <comment type="block" pos:start="661:17" pos:end="661:43">/* Two source operands.  */</comment>

                <expr_stmt pos:start="663:17" pos:end="663:40"><expr pos:start="663:17" pos:end="663:39"><call pos:start="663:17" pos:end="663:39"><name pos:start="663:17" pos:end="663:31">gen_mov_F0_vreg</name><argument_list pos:start="663:32" pos:end="663:39">(<argument pos:start="663:33" pos:end="663:34"><expr pos:start="663:33" pos:end="663:34"><name pos:start="663:33" pos:end="663:34">dp</name></expr></argument>, <argument pos:start="663:37" pos:end="663:38"><expr pos:start="663:37" pos:end="663:38"><name pos:start="663:37" pos:end="663:38">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:40"><expr pos:start="665:17" pos:end="665:39"><call pos:start="665:17" pos:end="665:39"><name pos:start="665:17" pos:end="665:31">gen_mov_F1_vreg</name><argument_list pos:start="665:32" pos:end="665:39">(<argument pos:start="665:33" pos:end="665:34"><expr pos:start="665:33" pos:end="665:34"><name pos:start="665:33" pos:end="665:34">dp</name></expr></argument>, <argument pos:start="665:37" pos:end="665:38"><expr pos:start="665:37" pos:end="665:38"><name pos:start="665:37" pos:end="665:38">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <for pos:start="671:13" pos:end="1187:13">for <control pos:start="671:17" pos:end="671:20">(<init pos:start="671:18" pos:end="671:18">;</init><condition pos:start="671:19" pos:end="671:19">;</condition><incr/>)</control> <block pos:start="671:22" pos:end="1187:13">{<block_content pos:start="675:17" pos:end="1185:17">

                <comment type="block" pos:start="673:17" pos:end="673:47">/* Perform the calculation.  */</comment>

                <switch pos:start="675:17" pos:end="1091:17">switch <condition pos:start="675:24" pos:end="675:27">(<expr pos:start="675:25" pos:end="675:26"><name pos:start="675:25" pos:end="675:26">op</name></expr>)</condition> <block pos:start="675:29" pos:end="1091:17">{<block_content pos:start="677:17" pos:end="1089:29">

                <case pos:start="677:17" pos:end="677:23">case <expr pos:start="677:22" pos:end="677:22"><literal type="number" pos:start="677:22" pos:end="677:22">0</literal></expr>:</case> <comment type="block" pos:start="677:25" pos:end="677:50">/* VMLA: fd + (fn * fm) */</comment>

                    <comment type="block" pos:start="679:21" pos:end="679:79">/* Note that order of inputs to the add matters for NaNs */</comment>

                    <expr_stmt pos:start="681:21" pos:end="681:39"><expr pos:start="681:21" pos:end="681:38"><call pos:start="681:21" pos:end="681:38"><name pos:start="681:21" pos:end="681:34">gen_vfp_F1_mul</name><argument_list pos:start="681:35" pos:end="681:38">(<argument pos:start="681:36" pos:end="681:37"><expr pos:start="681:36" pos:end="681:37"><name pos:start="681:36" pos:end="681:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="683:21" pos:end="683:44"><expr pos:start="683:21" pos:end="683:43"><call pos:start="683:21" pos:end="683:43"><name pos:start="683:21" pos:end="683:35">gen_mov_F0_vreg</name><argument_list pos:start="683:36" pos:end="683:43">(<argument pos:start="683:37" pos:end="683:38"><expr pos:start="683:37" pos:end="683:38"><name pos:start="683:37" pos:end="683:38">dp</name></expr></argument>, <argument pos:start="683:41" pos:end="683:42"><expr pos:start="683:41" pos:end="683:42"><name pos:start="683:41" pos:end="683:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="685:21" pos:end="685:36"><expr pos:start="685:21" pos:end="685:35"><call pos:start="685:21" pos:end="685:35"><name pos:start="685:21" pos:end="685:31">gen_vfp_add</name><argument_list pos:start="685:32" pos:end="685:35">(<argument pos:start="685:33" pos:end="685:34"><expr pos:start="685:33" pos:end="685:34"><name pos:start="685:33" pos:end="685:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="687:21" pos:end="687:26">break;</break>

                <case pos:start="689:17" pos:end="689:23">case <expr pos:start="689:22" pos:end="689:22"><literal type="number" pos:start="689:22" pos:end="689:22">1</literal></expr>:</case> <comment type="block" pos:start="689:25" pos:end="689:51">/* VMLS: fd + -(fn * fm) */</comment>

                    <expr_stmt pos:start="691:21" pos:end="691:36"><expr pos:start="691:21" pos:end="691:35"><call pos:start="691:21" pos:end="691:35"><name pos:start="691:21" pos:end="691:31">gen_vfp_mul</name><argument_list pos:start="691:32" pos:end="691:35">(<argument pos:start="691:33" pos:end="691:34"><expr pos:start="691:33" pos:end="691:34"><name pos:start="691:33" pos:end="691:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="693:21" pos:end="693:39"><expr pos:start="693:21" pos:end="693:38"><call pos:start="693:21" pos:end="693:38"><name pos:start="693:21" pos:end="693:34">gen_vfp_F1_neg</name><argument_list pos:start="693:35" pos:end="693:38">(<argument pos:start="693:36" pos:end="693:37"><expr pos:start="693:36" pos:end="693:37"><name pos:start="693:36" pos:end="693:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="695:21" pos:end="695:44"><expr pos:start="695:21" pos:end="695:43"><call pos:start="695:21" pos:end="695:43"><name pos:start="695:21" pos:end="695:35">gen_mov_F0_vreg</name><argument_list pos:start="695:36" pos:end="695:43">(<argument pos:start="695:37" pos:end="695:38"><expr pos:start="695:37" pos:end="695:38"><name pos:start="695:37" pos:end="695:38">dp</name></expr></argument>, <argument pos:start="695:41" pos:end="695:42"><expr pos:start="695:41" pos:end="695:42"><name pos:start="695:41" pos:end="695:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="697:21" pos:end="697:36"><expr pos:start="697:21" pos:end="697:35"><call pos:start="697:21" pos:end="697:35"><name pos:start="697:21" pos:end="697:31">gen_vfp_add</name><argument_list pos:start="697:32" pos:end="697:35">(<argument pos:start="697:33" pos:end="697:34"><expr pos:start="697:33" pos:end="697:34"><name pos:start="697:33" pos:end="697:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="699:21" pos:end="699:26">break;</break>

                <case pos:start="701:17" pos:end="701:23">case <expr pos:start="701:22" pos:end="701:22"><literal type="number" pos:start="701:22" pos:end="701:22">2</literal></expr>:</case> <comment type="block" pos:start="701:25" pos:end="701:52">/* VNMLS: -fd + (fn * fm) */</comment>

                    <comment type="block" pos:start="703:21" pos:end="709:23">/* Note that it isn't valid to replace (-A + B) with (B - A)

                     * or similar plausible looking simplifications

                     * because this will give wrong results for NaNs.

                     */</comment>

                    <expr_stmt pos:start="711:21" pos:end="711:39"><expr pos:start="711:21" pos:end="711:38"><call pos:start="711:21" pos:end="711:38"><name pos:start="711:21" pos:end="711:34">gen_vfp_F1_mul</name><argument_list pos:start="711:35" pos:end="711:38">(<argument pos:start="711:36" pos:end="711:37"><expr pos:start="711:36" pos:end="711:37"><name pos:start="711:36" pos:end="711:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="713:21" pos:end="713:44"><expr pos:start="713:21" pos:end="713:43"><call pos:start="713:21" pos:end="713:43"><name pos:start="713:21" pos:end="713:35">gen_mov_F0_vreg</name><argument_list pos:start="713:36" pos:end="713:43">(<argument pos:start="713:37" pos:end="713:38"><expr pos:start="713:37" pos:end="713:38"><name pos:start="713:37" pos:end="713:38">dp</name></expr></argument>, <argument pos:start="713:41" pos:end="713:42"><expr pos:start="713:41" pos:end="713:42"><name pos:start="713:41" pos:end="713:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="715:21" pos:end="715:36"><expr pos:start="715:21" pos:end="715:35"><call pos:start="715:21" pos:end="715:35"><name pos:start="715:21" pos:end="715:31">gen_vfp_neg</name><argument_list pos:start="715:32" pos:end="715:35">(<argument pos:start="715:33" pos:end="715:34"><expr pos:start="715:33" pos:end="715:34"><name pos:start="715:33" pos:end="715:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="717:21" pos:end="717:36"><expr pos:start="717:21" pos:end="717:35"><call pos:start="717:21" pos:end="717:35"><name pos:start="717:21" pos:end="717:31">gen_vfp_add</name><argument_list pos:start="717:32" pos:end="717:35">(<argument pos:start="717:33" pos:end="717:34"><expr pos:start="717:33" pos:end="717:34"><name pos:start="717:33" pos:end="717:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="719:21" pos:end="719:26">break;</break>

                <case pos:start="721:17" pos:end="721:23">case <expr pos:start="721:22" pos:end="721:22"><literal type="number" pos:start="721:22" pos:end="721:22">3</literal></expr>:</case> <comment type="block" pos:start="721:25" pos:end="721:53">/* VNMLA: -fd + -(fn * fm) */</comment>

                    <expr_stmt pos:start="723:21" pos:end="723:36"><expr pos:start="723:21" pos:end="723:35"><call pos:start="723:21" pos:end="723:35"><name pos:start="723:21" pos:end="723:31">gen_vfp_mul</name><argument_list pos:start="723:32" pos:end="723:35">(<argument pos:start="723:33" pos:end="723:34"><expr pos:start="723:33" pos:end="723:34"><name pos:start="723:33" pos:end="723:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="725:21" pos:end="725:39"><expr pos:start="725:21" pos:end="725:38"><call pos:start="725:21" pos:end="725:38"><name pos:start="725:21" pos:end="725:34">gen_vfp_F1_neg</name><argument_list pos:start="725:35" pos:end="725:38">(<argument pos:start="725:36" pos:end="725:37"><expr pos:start="725:36" pos:end="725:37"><name pos:start="725:36" pos:end="725:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="727:21" pos:end="727:44"><expr pos:start="727:21" pos:end="727:43"><call pos:start="727:21" pos:end="727:43"><name pos:start="727:21" pos:end="727:35">gen_mov_F0_vreg</name><argument_list pos:start="727:36" pos:end="727:43">(<argument pos:start="727:37" pos:end="727:38"><expr pos:start="727:37" pos:end="727:38"><name pos:start="727:37" pos:end="727:38">dp</name></expr></argument>, <argument pos:start="727:41" pos:end="727:42"><expr pos:start="727:41" pos:end="727:42"><name pos:start="727:41" pos:end="727:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="729:21" pos:end="729:36"><expr pos:start="729:21" pos:end="729:35"><call pos:start="729:21" pos:end="729:35"><name pos:start="729:21" pos:end="729:31">gen_vfp_neg</name><argument_list pos:start="729:32" pos:end="729:35">(<argument pos:start="729:33" pos:end="729:34"><expr pos:start="729:33" pos:end="729:34"><name pos:start="729:33" pos:end="729:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="731:21" pos:end="731:36"><expr pos:start="731:21" pos:end="731:35"><call pos:start="731:21" pos:end="731:35"><name pos:start="731:21" pos:end="731:31">gen_vfp_add</name><argument_list pos:start="731:32" pos:end="731:35">(<argument pos:start="731:33" pos:end="731:34"><expr pos:start="731:33" pos:end="731:34"><name pos:start="731:33" pos:end="731:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="733:21" pos:end="733:26">break;</break>

                <case pos:start="735:17" pos:end="735:23">case <expr pos:start="735:22" pos:end="735:22"><literal type="number" pos:start="735:22" pos:end="735:22">4</literal></expr>:</case> <comment type="block" pos:start="735:25" pos:end="735:42">/* mul: fn * fm */</comment>

                    <expr_stmt pos:start="737:21" pos:end="737:36"><expr pos:start="737:21" pos:end="737:35"><call pos:start="737:21" pos:end="737:35"><name pos:start="737:21" pos:end="737:31">gen_vfp_mul</name><argument_list pos:start="737:32" pos:end="737:35">(<argument pos:start="737:33" pos:end="737:34"><expr pos:start="737:33" pos:end="737:34"><name pos:start="737:33" pos:end="737:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="739:21" pos:end="739:26">break;</break>

                <case pos:start="741:17" pos:end="741:23">case <expr pos:start="741:22" pos:end="741:22"><literal type="number" pos:start="741:22" pos:end="741:22">5</literal></expr>:</case> <comment type="block" pos:start="741:25" pos:end="741:46">/* nmul: -(fn * fm) */</comment>

                    <expr_stmt pos:start="743:21" pos:end="743:36"><expr pos:start="743:21" pos:end="743:35"><call pos:start="743:21" pos:end="743:35"><name pos:start="743:21" pos:end="743:31">gen_vfp_mul</name><argument_list pos:start="743:32" pos:end="743:35">(<argument pos:start="743:33" pos:end="743:34"><expr pos:start="743:33" pos:end="743:34"><name pos:start="743:33" pos:end="743:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="745:21" pos:end="745:36"><expr pos:start="745:21" pos:end="745:35"><call pos:start="745:21" pos:end="745:35"><name pos:start="745:21" pos:end="745:31">gen_vfp_neg</name><argument_list pos:start="745:32" pos:end="745:35">(<argument pos:start="745:33" pos:end="745:34"><expr pos:start="745:33" pos:end="745:34"><name pos:start="745:33" pos:end="745:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="747:21" pos:end="747:26">break;</break>

                <case pos:start="749:17" pos:end="749:23">case <expr pos:start="749:22" pos:end="749:22"><literal type="number" pos:start="749:22" pos:end="749:22">6</literal></expr>:</case> <comment type="block" pos:start="749:25" pos:end="749:42">/* add: fn + fm */</comment>

                    <expr_stmt pos:start="751:21" pos:end="751:36"><expr pos:start="751:21" pos:end="751:35"><call pos:start="751:21" pos:end="751:35"><name pos:start="751:21" pos:end="751:31">gen_vfp_add</name><argument_list pos:start="751:32" pos:end="751:35">(<argument pos:start="751:33" pos:end="751:34"><expr pos:start="751:33" pos:end="751:34"><name pos:start="751:33" pos:end="751:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="753:21" pos:end="753:26">break;</break>

                <case pos:start="755:17" pos:end="755:23">case <expr pos:start="755:22" pos:end="755:22"><literal type="number" pos:start="755:22" pos:end="755:22">7</literal></expr>:</case> <comment type="block" pos:start="755:25" pos:end="755:42">/* sub: fn - fm */</comment>

                    <expr_stmt pos:start="757:21" pos:end="757:36"><expr pos:start="757:21" pos:end="757:35"><call pos:start="757:21" pos:end="757:35"><name pos:start="757:21" pos:end="757:31">gen_vfp_sub</name><argument_list pos:start="757:32" pos:end="757:35">(<argument pos:start="757:33" pos:end="757:34"><expr pos:start="757:33" pos:end="757:34"><name pos:start="757:33" pos:end="757:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="759:21" pos:end="759:26">break;</break>

                <case pos:start="761:17" pos:end="761:23">case <expr pos:start="761:22" pos:end="761:22"><literal type="number" pos:start="761:22" pos:end="761:22">8</literal></expr>:</case> <comment type="block" pos:start="761:25" pos:end="761:42">/* div: fn / fm */</comment>

                    <expr_stmt pos:start="763:21" pos:end="763:36"><expr pos:start="763:21" pos:end="763:35"><call pos:start="763:21" pos:end="763:35"><name pos:start="763:21" pos:end="763:31">gen_vfp_div</name><argument_list pos:start="763:32" pos:end="763:35">(<argument pos:start="763:33" pos:end="763:34"><expr pos:start="763:33" pos:end="763:34"><name pos:start="763:33" pos:end="763:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="765:21" pos:end="765:26">break;</break>

                <case pos:start="767:17" pos:end="767:24">case <expr pos:start="767:22" pos:end="767:23"><literal type="number" pos:start="767:22" pos:end="767:23">14</literal></expr>:</case> <comment type="block" pos:start="767:26" pos:end="767:37">/* fconst */</comment>

                    <if_stmt pos:start="769:21" pos:end="771:31"><if pos:start="769:21" pos:end="771:31">if <condition pos:start="769:24" pos:end="769:60">(<expr pos:start="769:25" pos:end="769:59"><operator pos:start="769:25" pos:end="769:25">!</operator><call pos:start="769:26" pos:end="769:59"><name pos:start="769:26" pos:end="769:36">arm_feature</name><argument_list pos:start="769:37" pos:end="769:59">(<argument pos:start="769:38" pos:end="769:40"><expr pos:start="769:38" pos:end="769:40"><name pos:start="769:38" pos:end="769:40">env</name></expr></argument>, <argument pos:start="769:43" pos:end="769:58"><expr pos:start="769:43" pos:end="769:58"><name pos:start="769:43" pos:end="769:58">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="771:23" pos:end="771:31"><block_content pos:start="771:23" pos:end="771:31">

                      <return pos:start="771:23" pos:end="771:31">return <expr pos:start="771:30" pos:end="771:30"><literal type="number" pos:start="771:30" pos:end="771:30">1</literal></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="775:21" pos:end="775:50"><expr pos:start="775:21" pos:end="775:49"><name pos:start="775:21" pos:end="775:21">n</name> <operator pos:start="775:23" pos:end="775:23">=</operator> <operator pos:start="775:25" pos:end="775:25">(</operator><name pos:start="775:26" pos:end="775:29">insn</name> <operator pos:start="775:31" pos:end="775:32">&lt;&lt;</operator> <literal type="number" pos:start="775:34" pos:end="775:35">12</literal><operator pos:start="775:36" pos:end="775:36">)</operator> <operator pos:start="775:38" pos:end="775:38">&amp;</operator> <literal type="number" pos:start="775:40" pos:end="775:49">0x80000000</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="777:21" pos:end="777:61"><expr pos:start="777:21" pos:end="777:60"><name pos:start="777:21" pos:end="777:21">i</name> <operator pos:start="777:23" pos:end="777:23">=</operator> <operator pos:start="777:25" pos:end="777:25">(</operator><operator pos:start="777:26" pos:end="777:26">(</operator><name pos:start="777:27" pos:end="777:30">insn</name> <operator pos:start="777:32" pos:end="777:33">&gt;&gt;</operator> <literal type="number" pos:start="777:35" pos:end="777:36">12</literal><operator pos:start="777:37" pos:end="777:37">)</operator> <operator pos:start="777:39" pos:end="777:39">&amp;</operator> <literal type="number" pos:start="777:41" pos:end="777:44">0x70</literal><operator pos:start="777:45" pos:end="777:45">)</operator> <operator pos:start="777:47" pos:end="777:47">|</operator> <operator pos:start="777:49" pos:end="777:49">(</operator><name pos:start="777:50" pos:end="777:53">insn</name> <operator pos:start="777:55" pos:end="777:55">&amp;</operator> <literal type="number" pos:start="777:57" pos:end="777:59">0xf</literal><operator pos:start="777:60" pos:end="777:60">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="779:21" pos:end="807:21"><if pos:start="779:21" pos:end="793:21">if <condition pos:start="779:24" pos:end="779:27">(<expr pos:start="779:25" pos:end="779:26"><name pos:start="779:25" pos:end="779:26">dp</name></expr>)</condition> <block pos:start="779:29" pos:end="793:21">{<block_content pos:start="781:25" pos:end="791:71">

                        <if_stmt pos:start="781:25" pos:end="787:40"><if pos:start="781:25" pos:end="783:40">if <condition pos:start="781:28" pos:end="781:37">(<expr pos:start="781:29" pos:end="781:36"><name pos:start="781:29" pos:end="781:29">i</name> <operator pos:start="781:31" pos:end="781:31">&amp;</operator> <literal type="number" pos:start="781:33" pos:end="781:36">0x40</literal></expr>)</condition><block type="pseudo" pos:start="783:29" pos:end="783:40"><block_content pos:start="783:29" pos:end="783:40">

                            <expr_stmt pos:start="783:29" pos:end="783:40"><expr pos:start="783:29" pos:end="783:39"><name pos:start="783:29" pos:end="783:29">i</name> <operator pos:start="783:31" pos:end="783:32">|=</operator> <literal type="number" pos:start="783:34" pos:end="783:39">0x3f80</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="785:25" pos:end="787:40">else<block type="pseudo" pos:start="787:29" pos:end="787:40"><block_content pos:start="787:29" pos:end="787:40">

                            <expr_stmt pos:start="787:29" pos:end="787:40"><expr pos:start="787:29" pos:end="787:39"><name pos:start="787:29" pos:end="787:29">i</name> <operator pos:start="787:31" pos:end="787:32">|=</operator> <literal type="number" pos:start="787:34" pos:end="787:39">0x4000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="789:25" pos:end="789:37"><expr pos:start="789:25" pos:end="789:36"><name pos:start="789:25" pos:end="789:25">n</name> <operator pos:start="789:27" pos:end="789:28">|=</operator> <name pos:start="789:30" pos:end="789:30">i</name> <operator pos:start="789:32" pos:end="789:33">&lt;&lt;</operator> <literal type="number" pos:start="789:35" pos:end="789:36">16</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="791:25" pos:end="791:71"><expr pos:start="791:25" pos:end="791:70"><call pos:start="791:25" pos:end="791:70"><name pos:start="791:25" pos:end="791:40">tcg_gen_movi_i64</name><argument_list pos:start="791:41" pos:end="791:70">(<argument pos:start="791:42" pos:end="791:48"><expr pos:start="791:42" pos:end="791:48"><name pos:start="791:42" pos:end="791:48">cpu_F0d</name></expr></argument>, <argument pos:start="791:51" pos:end="791:69"><expr pos:start="791:51" pos:end="791:69"><operator pos:start="791:51" pos:end="791:51">(</operator><operator pos:start="791:52" pos:end="791:52">(</operator><name pos:start="791:53" pos:end="791:60">uint64_t</name><operator pos:start="791:61" pos:end="791:61">)</operator><name pos:start="791:62" pos:end="791:62">n</name><operator pos:start="791:63" pos:end="791:63">)</operator> <operator pos:start="791:65" pos:end="791:66">&lt;&lt;</operator> <literal type="number" pos:start="791:68" pos:end="791:69">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="793:23" pos:end="807:21">else <block pos:start="793:28" pos:end="807:21">{<block_content pos:start="795:25" pos:end="805:53">

                        <if_stmt pos:start="795:25" pos:end="801:39"><if pos:start="795:25" pos:end="797:39">if <condition pos:start="795:28" pos:end="795:37">(<expr pos:start="795:29" pos:end="795:36"><name pos:start="795:29" pos:end="795:29">i</name> <operator pos:start="795:31" pos:end="795:31">&amp;</operator> <literal type="number" pos:start="795:33" pos:end="795:36">0x40</literal></expr>)</condition><block type="pseudo" pos:start="797:29" pos:end="797:39"><block_content pos:start="797:29" pos:end="797:39">

                            <expr_stmt pos:start="797:29" pos:end="797:39"><expr pos:start="797:29" pos:end="797:38"><name pos:start="797:29" pos:end="797:29">i</name> <operator pos:start="797:31" pos:end="797:32">|=</operator> <literal type="number" pos:start="797:34" pos:end="797:38">0x780</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="799:25" pos:end="801:39">else<block type="pseudo" pos:start="801:29" pos:end="801:39"><block_content pos:start="801:29" pos:end="801:39">

                            <expr_stmt pos:start="801:29" pos:end="801:39"><expr pos:start="801:29" pos:end="801:38"><name pos:start="801:29" pos:end="801:29">i</name> <operator pos:start="801:31" pos:end="801:32">|=</operator> <literal type="number" pos:start="801:34" pos:end="801:38">0x800</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="803:25" pos:end="803:37"><expr pos:start="803:25" pos:end="803:36"><name pos:start="803:25" pos:end="803:25">n</name> <operator pos:start="803:27" pos:end="803:28">|=</operator> <name pos:start="803:30" pos:end="803:30">i</name> <operator pos:start="803:32" pos:end="803:33">&lt;&lt;</operator> <literal type="number" pos:start="803:35" pos:end="803:36">19</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="805:25" pos:end="805:53"><expr pos:start="805:25" pos:end="805:52"><call pos:start="805:25" pos:end="805:52"><name pos:start="805:25" pos:end="805:40">tcg_gen_movi_i32</name><argument_list pos:start="805:41" pos:end="805:52">(<argument pos:start="805:42" pos:end="805:48"><expr pos:start="805:42" pos:end="805:48"><name pos:start="805:42" pos:end="805:48">cpu_F0s</name></expr></argument>, <argument pos:start="805:51" pos:end="805:51"><expr pos:start="805:51" pos:end="805:51"><name pos:start="805:51" pos:end="805:51">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="809:21" pos:end="809:26">break;</break>

                <case pos:start="811:17" pos:end="811:24">case <expr pos:start="811:22" pos:end="811:23"><literal type="number" pos:start="811:22" pos:end="811:23">15</literal></expr>:</case> <comment type="block" pos:start="811:26" pos:end="811:46">/* extension space */</comment>

                    <switch pos:start="813:21" pos:end="1081:21">switch <condition pos:start="813:28" pos:end="813:31">(<expr pos:start="813:29" pos:end="813:30"><name pos:start="813:29" pos:end="813:30">rn</name></expr>)</condition> <block pos:start="813:33" pos:end="1081:21">{<block_content pos:start="815:21" pos:end="1079:33">

                    <case pos:start="815:21" pos:end="815:27">case <expr pos:start="815:26" pos:end="815:26"><literal type="number" pos:start="815:26" pos:end="815:26">0</literal></expr>:</case> <comment type="block" pos:start="815:29" pos:end="815:37">/* cpy */</comment>

                        <comment type="block" pos:start="817:25" pos:end="817:35">/* no-op */</comment>

                        <break pos:start="819:25" pos:end="819:30">break;</break>

                    <case pos:start="821:21" pos:end="821:27">case <expr pos:start="821:26" pos:end="821:26"><literal type="number" pos:start="821:26" pos:end="821:26">1</literal></expr>:</case> <comment type="block" pos:start="821:29" pos:end="821:37">/* abs */</comment>

                        <expr_stmt pos:start="823:25" pos:end="823:40"><expr pos:start="823:25" pos:end="823:39"><call pos:start="823:25" pos:end="823:39"><name pos:start="823:25" pos:end="823:35">gen_vfp_abs</name><argument_list pos:start="823:36" pos:end="823:39">(<argument pos:start="823:37" pos:end="823:38"><expr pos:start="823:37" pos:end="823:38"><name pos:start="823:37" pos:end="823:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="825:25" pos:end="825:30">break;</break>

                    <case pos:start="827:21" pos:end="827:27">case <expr pos:start="827:26" pos:end="827:26"><literal type="number" pos:start="827:26" pos:end="827:26">2</literal></expr>:</case> <comment type="block" pos:start="827:29" pos:end="827:37">/* neg */</comment>

                        <expr_stmt pos:start="829:25" pos:end="829:40"><expr pos:start="829:25" pos:end="829:39"><call pos:start="829:25" pos:end="829:39"><name pos:start="829:25" pos:end="829:35">gen_vfp_neg</name><argument_list pos:start="829:36" pos:end="829:39">(<argument pos:start="829:37" pos:end="829:38"><expr pos:start="829:37" pos:end="829:38"><name pos:start="829:37" pos:end="829:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="831:25" pos:end="831:30">break;</break>

                    <case pos:start="833:21" pos:end="833:27">case <expr pos:start="833:26" pos:end="833:26"><literal type="number" pos:start="833:26" pos:end="833:26">3</literal></expr>:</case> <comment type="block" pos:start="833:29" pos:end="833:38">/* sqrt */</comment>

                        <expr_stmt pos:start="835:25" pos:end="835:41"><expr pos:start="835:25" pos:end="835:40"><call pos:start="835:25" pos:end="835:40"><name pos:start="835:25" pos:end="835:36">gen_vfp_sqrt</name><argument_list pos:start="835:37" pos:end="835:40">(<argument pos:start="835:38" pos:end="835:39"><expr pos:start="835:38" pos:end="835:39"><name pos:start="835:38" pos:end="835:39">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="837:25" pos:end="837:30">break;</break>

                    <case pos:start="839:21" pos:end="839:27">case <expr pos:start="839:26" pos:end="839:26"><literal type="number" pos:start="839:26" pos:end="839:26">4</literal></expr>:</case> <comment type="block" pos:start="839:29" pos:end="839:47">/* vcvtb.f32.f16 */</comment>

                        <if_stmt pos:start="841:25" pos:end="843:35"><if pos:start="841:25" pos:end="843:35">if <condition pos:start="841:28" pos:end="841:68">(<expr pos:start="841:29" pos:end="841:67"><operator pos:start="841:29" pos:end="841:29">!</operator><call pos:start="841:30" pos:end="841:67"><name pos:start="841:30" pos:end="841:40">arm_feature</name><argument_list pos:start="841:41" pos:end="841:67">(<argument pos:start="841:42" pos:end="841:44"><expr pos:start="841:42" pos:end="841:44"><name pos:start="841:42" pos:end="841:44">env</name></expr></argument>, <argument pos:start="841:47" pos:end="841:66"><expr pos:start="841:47" pos:end="841:66"><name pos:start="841:47" pos:end="841:66">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="843:27" pos:end="843:35"><block_content pos:start="843:27" pos:end="843:35">

                          <return pos:start="843:27" pos:end="843:35">return <expr pos:start="843:34" pos:end="843:34"><literal type="number" pos:start="843:34" pos:end="843:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="845:25" pos:end="845:44"><expr pos:start="845:25" pos:end="845:43"><name pos:start="845:25" pos:end="845:27">tmp</name> <operator pos:start="845:29" pos:end="845:29">=</operator> <call pos:start="845:31" pos:end="845:43"><name pos:start="845:31" pos:end="845:41">gen_vfp_mrs</name><argument_list pos:start="845:42" pos:end="845:43">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="847:25" pos:end="847:53"><expr pos:start="847:25" pos:end="847:52"><call pos:start="847:25" pos:end="847:52"><name pos:start="847:25" pos:end="847:42">tcg_gen_ext16u_i32</name><argument_list pos:start="847:43" pos:end="847:52">(<argument pos:start="847:44" pos:end="847:46"><expr pos:start="847:44" pos:end="847:46"><name pos:start="847:44" pos:end="847:46">tmp</name></expr></argument>, <argument pos:start="847:49" pos:end="847:51"><expr pos:start="847:49" pos:end="847:51"><name pos:start="847:49" pos:end="847:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="849:25" pos:end="849:78"><expr pos:start="849:25" pos:end="849:77"><call pos:start="849:25" pos:end="849:77"><name pos:start="849:25" pos:end="849:54">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="849:55" pos:end="849:77">(<argument pos:start="849:56" pos:end="849:62"><expr pos:start="849:56" pos:end="849:62"><name pos:start="849:56" pos:end="849:62">cpu_F0s</name></expr></argument>, <argument pos:start="849:65" pos:end="849:67"><expr pos:start="849:65" pos:end="849:67"><name pos:start="849:65" pos:end="849:67">tmp</name></expr></argument>, <argument pos:start="849:70" pos:end="849:76"><expr pos:start="849:70" pos:end="849:76"><name pos:start="849:70" pos:end="849:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="851:25" pos:end="851:47"><expr pos:start="851:25" pos:end="851:46"><call pos:start="851:25" pos:end="851:46"><name pos:start="851:25" pos:end="851:41">tcg_temp_free_i32</name><argument_list pos:start="851:42" pos:end="851:46">(<argument pos:start="851:43" pos:end="851:45"><expr pos:start="851:43" pos:end="851:45"><name pos:start="851:43" pos:end="851:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="853:25" pos:end="853:30">break;</break>

                    <case pos:start="855:21" pos:end="855:27">case <expr pos:start="855:26" pos:end="855:26"><literal type="number" pos:start="855:26" pos:end="855:26">5</literal></expr>:</case> <comment type="block" pos:start="855:29" pos:end="855:47">/* vcvtt.f32.f16 */</comment>

                        <if_stmt pos:start="857:25" pos:end="859:35"><if pos:start="857:25" pos:end="859:35">if <condition pos:start="857:28" pos:end="857:68">(<expr pos:start="857:29" pos:end="857:67"><operator pos:start="857:29" pos:end="857:29">!</operator><call pos:start="857:30" pos:end="857:67"><name pos:start="857:30" pos:end="857:40">arm_feature</name><argument_list pos:start="857:41" pos:end="857:67">(<argument pos:start="857:42" pos:end="857:44"><expr pos:start="857:42" pos:end="857:44"><name pos:start="857:42" pos:end="857:44">env</name></expr></argument>, <argument pos:start="857:47" pos:end="857:66"><expr pos:start="857:47" pos:end="857:66"><name pos:start="857:47" pos:end="857:66">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="859:27" pos:end="859:35"><block_content pos:start="859:27" pos:end="859:35">

                          <return pos:start="859:27" pos:end="859:35">return <expr pos:start="859:34" pos:end="859:34"><literal type="number" pos:start="859:34" pos:end="859:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="861:25" pos:end="861:44"><expr pos:start="861:25" pos:end="861:43"><name pos:start="861:25" pos:end="861:27">tmp</name> <operator pos:start="861:29" pos:end="861:29">=</operator> <call pos:start="861:31" pos:end="861:43"><name pos:start="861:31" pos:end="861:41">gen_vfp_mrs</name><argument_list pos:start="861:42" pos:end="861:43">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="863:25" pos:end="863:55"><expr pos:start="863:25" pos:end="863:54"><call pos:start="863:25" pos:end="863:54"><name pos:start="863:25" pos:end="863:40">tcg_gen_shri_i32</name><argument_list pos:start="863:41" pos:end="863:54">(<argument pos:start="863:42" pos:end="863:44"><expr pos:start="863:42" pos:end="863:44"><name pos:start="863:42" pos:end="863:44">tmp</name></expr></argument>, <argument pos:start="863:47" pos:end="863:49"><expr pos:start="863:47" pos:end="863:49"><name pos:start="863:47" pos:end="863:49">tmp</name></expr></argument>, <argument pos:start="863:52" pos:end="863:53"><expr pos:start="863:52" pos:end="863:53"><literal type="number" pos:start="863:52" pos:end="863:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="865:25" pos:end="865:78"><expr pos:start="865:25" pos:end="865:77"><call pos:start="865:25" pos:end="865:77"><name pos:start="865:25" pos:end="865:54">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="865:55" pos:end="865:77">(<argument pos:start="865:56" pos:end="865:62"><expr pos:start="865:56" pos:end="865:62"><name pos:start="865:56" pos:end="865:62">cpu_F0s</name></expr></argument>, <argument pos:start="865:65" pos:end="865:67"><expr pos:start="865:65" pos:end="865:67"><name pos:start="865:65" pos:end="865:67">tmp</name></expr></argument>, <argument pos:start="865:70" pos:end="865:76"><expr pos:start="865:70" pos:end="865:76"><name pos:start="865:70" pos:end="865:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="867:25" pos:end="867:47"><expr pos:start="867:25" pos:end="867:46"><call pos:start="867:25" pos:end="867:46"><name pos:start="867:25" pos:end="867:41">tcg_temp_free_i32</name><argument_list pos:start="867:42" pos:end="867:46">(<argument pos:start="867:43" pos:end="867:45"><expr pos:start="867:43" pos:end="867:45"><name pos:start="867:43" pos:end="867:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="869:25" pos:end="869:30">break;</break>

                    <case pos:start="871:21" pos:end="871:27">case <expr pos:start="871:26" pos:end="871:26"><literal type="number" pos:start="871:26" pos:end="871:26">6</literal></expr>:</case> <comment type="block" pos:start="871:29" pos:end="871:47">/* vcvtb.f16.f32 */</comment>

                        <if_stmt pos:start="873:25" pos:end="875:35"><if pos:start="873:25" pos:end="875:35">if <condition pos:start="873:28" pos:end="873:68">(<expr pos:start="873:29" pos:end="873:67"><operator pos:start="873:29" pos:end="873:29">!</operator><call pos:start="873:30" pos:end="873:67"><name pos:start="873:30" pos:end="873:40">arm_feature</name><argument_list pos:start="873:41" pos:end="873:67">(<argument pos:start="873:42" pos:end="873:44"><expr pos:start="873:42" pos:end="873:44"><name pos:start="873:42" pos:end="873:44">env</name></expr></argument>, <argument pos:start="873:47" pos:end="873:66"><expr pos:start="873:47" pos:end="873:66"><name pos:start="873:47" pos:end="873:66">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="875:27" pos:end="875:35"><block_content pos:start="875:27" pos:end="875:35">

                          <return pos:start="875:27" pos:end="875:35">return <expr pos:start="875:34" pos:end="875:34"><literal type="number" pos:start="875:34" pos:end="875:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="877:25" pos:end="877:49"><expr pos:start="877:25" pos:end="877:48"><name pos:start="877:25" pos:end="877:27">tmp</name> <operator pos:start="877:29" pos:end="877:29">=</operator> <call pos:start="877:31" pos:end="877:48"><name pos:start="877:31" pos:end="877:46">tcg_temp_new_i32</name><argument_list pos:start="877:47" pos:end="877:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="879:25" pos:end="879:78"><expr pos:start="879:25" pos:end="879:77"><call pos:start="879:25" pos:end="879:77"><name pos:start="879:25" pos:end="879:54">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="879:55" pos:end="879:77">(<argument pos:start="879:56" pos:end="879:58"><expr pos:start="879:56" pos:end="879:58"><name pos:start="879:56" pos:end="879:58">tmp</name></expr></argument>, <argument pos:start="879:61" pos:end="879:67"><expr pos:start="879:61" pos:end="879:67"><name pos:start="879:61" pos:end="879:67">cpu_F0s</name></expr></argument>, <argument pos:start="879:70" pos:end="879:76"><expr pos:start="879:70" pos:end="879:76"><name pos:start="879:70" pos:end="879:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="881:25" pos:end="881:47"><expr pos:start="881:25" pos:end="881:46"><call pos:start="881:25" pos:end="881:46"><name pos:start="881:25" pos:end="881:39">gen_mov_F0_vreg</name><argument_list pos:start="881:40" pos:end="881:46">(<argument pos:start="881:41" pos:end="881:41"><expr pos:start="881:41" pos:end="881:41"><literal type="number" pos:start="881:41" pos:end="881:41">0</literal></expr></argument>, <argument pos:start="881:44" pos:end="881:45"><expr pos:start="881:44" pos:end="881:45"><name pos:start="881:44" pos:end="881:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="883:25" pos:end="883:45"><expr pos:start="883:25" pos:end="883:44"><name pos:start="883:25" pos:end="883:28">tmp2</name> <operator pos:start="883:30" pos:end="883:30">=</operator> <call pos:start="883:32" pos:end="883:44"><name pos:start="883:32" pos:end="883:42">gen_vfp_mrs</name><argument_list pos:start="883:43" pos:end="883:44">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="885:25" pos:end="885:65"><expr pos:start="885:25" pos:end="885:64"><call pos:start="885:25" pos:end="885:64"><name pos:start="885:25" pos:end="885:40">tcg_gen_andi_i32</name><argument_list pos:start="885:41" pos:end="885:64">(<argument pos:start="885:42" pos:end="885:45"><expr pos:start="885:42" pos:end="885:45"><name pos:start="885:42" pos:end="885:45">tmp2</name></expr></argument>, <argument pos:start="885:48" pos:end="885:51"><expr pos:start="885:48" pos:end="885:51"><name pos:start="885:48" pos:end="885:51">tmp2</name></expr></argument>, <argument pos:start="885:54" pos:end="885:63"><expr pos:start="885:54" pos:end="885:63"><literal type="number" pos:start="885:54" pos:end="885:63">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="887:25" pos:end="887:55"><expr pos:start="887:25" pos:end="887:54"><call pos:start="887:25" pos:end="887:54"><name pos:start="887:25" pos:end="887:38">tcg_gen_or_i32</name><argument_list pos:start="887:39" pos:end="887:54">(<argument pos:start="887:40" pos:end="887:42"><expr pos:start="887:40" pos:end="887:42"><name pos:start="887:40" pos:end="887:42">tmp</name></expr></argument>, <argument pos:start="887:45" pos:end="887:47"><expr pos:start="887:45" pos:end="887:47"><name pos:start="887:45" pos:end="887:47">tmp</name></expr></argument>, <argument pos:start="887:50" pos:end="887:53"><expr pos:start="887:50" pos:end="887:53"><name pos:start="887:50" pos:end="887:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="889:25" pos:end="889:48"><expr pos:start="889:25" pos:end="889:47"><call pos:start="889:25" pos:end="889:47"><name pos:start="889:25" pos:end="889:41">tcg_temp_free_i32</name><argument_list pos:start="889:42" pos:end="889:47">(<argument pos:start="889:43" pos:end="889:46"><expr pos:start="889:43" pos:end="889:46"><name pos:start="889:43" pos:end="889:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="891:25" pos:end="891:41"><expr pos:start="891:25" pos:end="891:40"><call pos:start="891:25" pos:end="891:40"><name pos:start="891:25" pos:end="891:35">gen_vfp_msr</name><argument_list pos:start="891:36" pos:end="891:40">(<argument pos:start="891:37" pos:end="891:39"><expr pos:start="891:37" pos:end="891:39"><name pos:start="891:37" pos:end="891:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="893:25" pos:end="893:30">break;</break>

                    <case pos:start="895:21" pos:end="895:27">case <expr pos:start="895:26" pos:end="895:26"><literal type="number" pos:start="895:26" pos:end="895:26">7</literal></expr>:</case> <comment type="block" pos:start="895:29" pos:end="895:47">/* vcvtt.f16.f32 */</comment>

                        <if_stmt pos:start="897:25" pos:end="899:35"><if pos:start="897:25" pos:end="899:35">if <condition pos:start="897:28" pos:end="897:68">(<expr pos:start="897:29" pos:end="897:67"><operator pos:start="897:29" pos:end="897:29">!</operator><call pos:start="897:30" pos:end="897:67"><name pos:start="897:30" pos:end="897:40">arm_feature</name><argument_list pos:start="897:41" pos:end="897:67">(<argument pos:start="897:42" pos:end="897:44"><expr pos:start="897:42" pos:end="897:44"><name pos:start="897:42" pos:end="897:44">env</name></expr></argument>, <argument pos:start="897:47" pos:end="897:66"><expr pos:start="897:47" pos:end="897:66"><name pos:start="897:47" pos:end="897:66">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="899:27" pos:end="899:35"><block_content pos:start="899:27" pos:end="899:35">

                          <return pos:start="899:27" pos:end="899:35">return <expr pos:start="899:34" pos:end="899:34"><literal type="number" pos:start="899:34" pos:end="899:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="901:25" pos:end="901:49"><expr pos:start="901:25" pos:end="901:48"><name pos:start="901:25" pos:end="901:27">tmp</name> <operator pos:start="901:29" pos:end="901:29">=</operator> <call pos:start="901:31" pos:end="901:48"><name pos:start="901:31" pos:end="901:46">tcg_temp_new_i32</name><argument_list pos:start="901:47" pos:end="901:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="903:25" pos:end="903:78"><expr pos:start="903:25" pos:end="903:77"><call pos:start="903:25" pos:end="903:77"><name pos:start="903:25" pos:end="903:54">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="903:55" pos:end="903:77">(<argument pos:start="903:56" pos:end="903:58"><expr pos:start="903:56" pos:end="903:58"><name pos:start="903:56" pos:end="903:58">tmp</name></expr></argument>, <argument pos:start="903:61" pos:end="903:67"><expr pos:start="903:61" pos:end="903:67"><name pos:start="903:61" pos:end="903:67">cpu_F0s</name></expr></argument>, <argument pos:start="903:70" pos:end="903:76"><expr pos:start="903:70" pos:end="903:76"><name pos:start="903:70" pos:end="903:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="905:25" pos:end="905:55"><expr pos:start="905:25" pos:end="905:54"><call pos:start="905:25" pos:end="905:54"><name pos:start="905:25" pos:end="905:40">tcg_gen_shli_i32</name><argument_list pos:start="905:41" pos:end="905:54">(<argument pos:start="905:42" pos:end="905:44"><expr pos:start="905:42" pos:end="905:44"><name pos:start="905:42" pos:end="905:44">tmp</name></expr></argument>, <argument pos:start="905:47" pos:end="905:49"><expr pos:start="905:47" pos:end="905:49"><name pos:start="905:47" pos:end="905:49">tmp</name></expr></argument>, <argument pos:start="905:52" pos:end="905:53"><expr pos:start="905:52" pos:end="905:53"><literal type="number" pos:start="905:52" pos:end="905:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="907:25" pos:end="907:47"><expr pos:start="907:25" pos:end="907:46"><call pos:start="907:25" pos:end="907:46"><name pos:start="907:25" pos:end="907:39">gen_mov_F0_vreg</name><argument_list pos:start="907:40" pos:end="907:46">(<argument pos:start="907:41" pos:end="907:41"><expr pos:start="907:41" pos:end="907:41"><literal type="number" pos:start="907:41" pos:end="907:41">0</literal></expr></argument>, <argument pos:start="907:44" pos:end="907:45"><expr pos:start="907:44" pos:end="907:45"><name pos:start="907:44" pos:end="907:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="909:25" pos:end="909:45"><expr pos:start="909:25" pos:end="909:44"><name pos:start="909:25" pos:end="909:28">tmp2</name> <operator pos:start="909:30" pos:end="909:30">=</operator> <call pos:start="909:32" pos:end="909:44"><name pos:start="909:32" pos:end="909:42">gen_vfp_mrs</name><argument_list pos:start="909:43" pos:end="909:44">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="911:25" pos:end="911:55"><expr pos:start="911:25" pos:end="911:54"><call pos:start="911:25" pos:end="911:54"><name pos:start="911:25" pos:end="911:42">tcg_gen_ext16u_i32</name><argument_list pos:start="911:43" pos:end="911:54">(<argument pos:start="911:44" pos:end="911:47"><expr pos:start="911:44" pos:end="911:47"><name pos:start="911:44" pos:end="911:47">tmp2</name></expr></argument>, <argument pos:start="911:50" pos:end="911:53"><expr pos:start="911:50" pos:end="911:53"><name pos:start="911:50" pos:end="911:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="913:25" pos:end="913:55"><expr pos:start="913:25" pos:end="913:54"><call pos:start="913:25" pos:end="913:54"><name pos:start="913:25" pos:end="913:38">tcg_gen_or_i32</name><argument_list pos:start="913:39" pos:end="913:54">(<argument pos:start="913:40" pos:end="913:42"><expr pos:start="913:40" pos:end="913:42"><name pos:start="913:40" pos:end="913:42">tmp</name></expr></argument>, <argument pos:start="913:45" pos:end="913:47"><expr pos:start="913:45" pos:end="913:47"><name pos:start="913:45" pos:end="913:47">tmp</name></expr></argument>, <argument pos:start="913:50" pos:end="913:53"><expr pos:start="913:50" pos:end="913:53"><name pos:start="913:50" pos:end="913:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="915:25" pos:end="915:48"><expr pos:start="915:25" pos:end="915:47"><call pos:start="915:25" pos:end="915:47"><name pos:start="915:25" pos:end="915:41">tcg_temp_free_i32</name><argument_list pos:start="915:42" pos:end="915:47">(<argument pos:start="915:43" pos:end="915:46"><expr pos:start="915:43" pos:end="915:46"><name pos:start="915:43" pos:end="915:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="917:25" pos:end="917:41"><expr pos:start="917:25" pos:end="917:40"><call pos:start="917:25" pos:end="917:40"><name pos:start="917:25" pos:end="917:35">gen_vfp_msr</name><argument_list pos:start="917:36" pos:end="917:40">(<argument pos:start="917:37" pos:end="917:39"><expr pos:start="917:37" pos:end="917:39"><name pos:start="917:37" pos:end="917:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="919:25" pos:end="919:30">break;</break>

                    <case pos:start="921:21" pos:end="921:27">case <expr pos:start="921:26" pos:end="921:26"><literal type="number" pos:start="921:26" pos:end="921:26">8</literal></expr>:</case> <comment type="block" pos:start="921:29" pos:end="921:37">/* cmp */</comment>

                        <expr_stmt pos:start="923:25" pos:end="923:40"><expr pos:start="923:25" pos:end="923:39"><call pos:start="923:25" pos:end="923:39"><name pos:start="923:25" pos:end="923:35">gen_vfp_cmp</name><argument_list pos:start="923:36" pos:end="923:39">(<argument pos:start="923:37" pos:end="923:38"><expr pos:start="923:37" pos:end="923:38"><name pos:start="923:37" pos:end="923:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="925:25" pos:end="925:30">break;</break>

                    <case pos:start="927:21" pos:end="927:27">case <expr pos:start="927:26" pos:end="927:26"><literal type="number" pos:start="927:26" pos:end="927:26">9</literal></expr>:</case> <comment type="block" pos:start="927:29" pos:end="927:38">/* cmpe */</comment>

                        <expr_stmt pos:start="929:25" pos:end="929:41"><expr pos:start="929:25" pos:end="929:40"><call pos:start="929:25" pos:end="929:40"><name pos:start="929:25" pos:end="929:36">gen_vfp_cmpe</name><argument_list pos:start="929:37" pos:end="929:40">(<argument pos:start="929:38" pos:end="929:39"><expr pos:start="929:38" pos:end="929:39"><name pos:start="929:38" pos:end="929:39">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="931:25" pos:end="931:30">break;</break>

                    <case pos:start="933:21" pos:end="933:28">case <expr pos:start="933:26" pos:end="933:27"><literal type="number" pos:start="933:26" pos:end="933:27">10</literal></expr>:</case> <comment type="block" pos:start="933:30" pos:end="933:39">/* cmpz */</comment>

                        <expr_stmt pos:start="935:25" pos:end="935:40"><expr pos:start="935:25" pos:end="935:39"><call pos:start="935:25" pos:end="935:39"><name pos:start="935:25" pos:end="935:35">gen_vfp_cmp</name><argument_list pos:start="935:36" pos:end="935:39">(<argument pos:start="935:37" pos:end="935:38"><expr pos:start="935:37" pos:end="935:38"><name pos:start="935:37" pos:end="935:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="937:25" pos:end="937:30">break;</break>

                    <case pos:start="939:21" pos:end="939:28">case <expr pos:start="939:26" pos:end="939:27"><literal type="number" pos:start="939:26" pos:end="939:27">11</literal></expr>:</case> <comment type="block" pos:start="939:30" pos:end="939:40">/* cmpez */</comment>

                        <expr_stmt pos:start="941:25" pos:end="941:43"><expr pos:start="941:25" pos:end="941:42"><call pos:start="941:25" pos:end="941:42"><name pos:start="941:25" pos:end="941:38">gen_vfp_F1_ld0</name><argument_list pos:start="941:39" pos:end="941:42">(<argument pos:start="941:40" pos:end="941:41"><expr pos:start="941:40" pos:end="941:41"><name pos:start="941:40" pos:end="941:41">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="943:25" pos:end="943:41"><expr pos:start="943:25" pos:end="943:40"><call pos:start="943:25" pos:end="943:40"><name pos:start="943:25" pos:end="943:36">gen_vfp_cmpe</name><argument_list pos:start="943:37" pos:end="943:40">(<argument pos:start="943:38" pos:end="943:39"><expr pos:start="943:38" pos:end="943:39"><name pos:start="943:38" pos:end="943:39">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="945:25" pos:end="945:30">break;</break>

                    <case pos:start="947:21" pos:end="947:28">case <expr pos:start="947:26" pos:end="947:27"><literal type="number" pos:start="947:26" pos:end="947:27">15</literal></expr>:</case> <comment type="block" pos:start="947:30" pos:end="947:61">/* single&lt;-&gt;double conversion */</comment>

                        <if_stmt pos:start="949:25" pos:end="955:77"><if pos:start="949:25" pos:end="951:77">if <condition pos:start="949:28" pos:end="949:31">(<expr pos:start="949:29" pos:end="949:30"><name pos:start="949:29" pos:end="949:30">dp</name></expr>)</condition><block type="pseudo" pos:start="951:29" pos:end="951:77"><block_content pos:start="951:29" pos:end="951:77">

                            <expr_stmt pos:start="951:29" pos:end="951:77"><expr pos:start="951:29" pos:end="951:76"><call pos:start="951:29" pos:end="951:76"><name pos:start="951:29" pos:end="951:49">gen_helper_vfp_fcvtsd</name><argument_list pos:start="951:50" pos:end="951:76">(<argument pos:start="951:51" pos:end="951:57"><expr pos:start="951:51" pos:end="951:57"><name pos:start="951:51" pos:end="951:57">cpu_F0s</name></expr></argument>, <argument pos:start="951:60" pos:end="951:66"><expr pos:start="951:60" pos:end="951:66"><name pos:start="951:60" pos:end="951:66">cpu_F0d</name></expr></argument>, <argument pos:start="951:69" pos:end="951:75"><expr pos:start="951:69" pos:end="951:75"><name pos:start="951:69" pos:end="951:75">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="953:25" pos:end="955:77">else<block type="pseudo" pos:start="955:29" pos:end="955:77"><block_content pos:start="955:29" pos:end="955:77">

                            <expr_stmt pos:start="955:29" pos:end="955:77"><expr pos:start="955:29" pos:end="955:76"><call pos:start="955:29" pos:end="955:76"><name pos:start="955:29" pos:end="955:49">gen_helper_vfp_fcvtds</name><argument_list pos:start="955:50" pos:end="955:76">(<argument pos:start="955:51" pos:end="955:57"><expr pos:start="955:51" pos:end="955:57"><name pos:start="955:51" pos:end="955:57">cpu_F0d</name></expr></argument>, <argument pos:start="955:60" pos:end="955:66"><expr pos:start="955:60" pos:end="955:66"><name pos:start="955:60" pos:end="955:66">cpu_F0s</name></expr></argument>, <argument pos:start="955:69" pos:end="955:75"><expr pos:start="955:69" pos:end="955:75"><name pos:start="955:69" pos:end="955:75">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <break pos:start="957:25" pos:end="957:30">break;</break>

                    <case pos:start="959:21" pos:end="959:28">case <expr pos:start="959:26" pos:end="959:27"><literal type="number" pos:start="959:26" pos:end="959:27">16</literal></expr>:</case> <comment type="block" pos:start="959:30" pos:end="959:40">/* fuito */</comment>

                        <expr_stmt pos:start="961:25" pos:end="961:44"><expr pos:start="961:25" pos:end="961:43"><call pos:start="961:25" pos:end="961:43"><name pos:start="961:25" pos:end="961:36">gen_vfp_uito</name><argument_list pos:start="961:37" pos:end="961:43">(<argument pos:start="961:38" pos:end="961:39"><expr pos:start="961:38" pos:end="961:39"><name pos:start="961:38" pos:end="961:39">dp</name></expr></argument>, <argument pos:start="961:42" pos:end="961:42"><expr pos:start="961:42" pos:end="961:42"><literal type="number" pos:start="961:42" pos:end="961:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="963:25" pos:end="963:30">break;</break>

                    <case pos:start="965:21" pos:end="965:28">case <expr pos:start="965:26" pos:end="965:27"><literal type="number" pos:start="965:26" pos:end="965:27">17</literal></expr>:</case> <comment type="block" pos:start="965:30" pos:end="965:40">/* fsito */</comment>

                        <expr_stmt pos:start="967:25" pos:end="967:44"><expr pos:start="967:25" pos:end="967:43"><call pos:start="967:25" pos:end="967:43"><name pos:start="967:25" pos:end="967:36">gen_vfp_sito</name><argument_list pos:start="967:37" pos:end="967:43">(<argument pos:start="967:38" pos:end="967:39"><expr pos:start="967:38" pos:end="967:39"><name pos:start="967:38" pos:end="967:39">dp</name></expr></argument>, <argument pos:start="967:42" pos:end="967:42"><expr pos:start="967:42" pos:end="967:42"><literal type="number" pos:start="967:42" pos:end="967:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="969:25" pos:end="969:30">break;</break>

                    <case pos:start="971:21" pos:end="971:28">case <expr pos:start="971:26" pos:end="971:27"><literal type="number" pos:start="971:26" pos:end="971:27">20</literal></expr>:</case> <comment type="block" pos:start="971:30" pos:end="971:40">/* fshto */</comment>

                        <if_stmt pos:start="973:25" pos:end="975:35"><if pos:start="973:25" pos:end="975:35">if <condition pos:start="973:28" pos:end="973:64">(<expr pos:start="973:29" pos:end="973:63"><operator pos:start="973:29" pos:end="973:29">!</operator><call pos:start="973:30" pos:end="973:63"><name pos:start="973:30" pos:end="973:40">arm_feature</name><argument_list pos:start="973:41" pos:end="973:63">(<argument pos:start="973:42" pos:end="973:44"><expr pos:start="973:42" pos:end="973:44"><name pos:start="973:42" pos:end="973:44">env</name></expr></argument>, <argument pos:start="973:47" pos:end="973:62"><expr pos:start="973:47" pos:end="973:62"><name pos:start="973:47" pos:end="973:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="975:27" pos:end="975:35"><block_content pos:start="975:27" pos:end="975:35">

                          <return pos:start="975:27" pos:end="975:35">return <expr pos:start="975:34" pos:end="975:34"><literal type="number" pos:start="975:34" pos:end="975:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="977:25" pos:end="977:53"><expr pos:start="977:25" pos:end="977:52"><call pos:start="977:25" pos:end="977:52"><name pos:start="977:25" pos:end="977:36">gen_vfp_shto</name><argument_list pos:start="977:37" pos:end="977:52">(<argument pos:start="977:38" pos:end="977:39"><expr pos:start="977:38" pos:end="977:39"><name pos:start="977:38" pos:end="977:39">dp</name></expr></argument>, <argument pos:start="977:42" pos:end="977:48"><expr pos:start="977:42" pos:end="977:48"><literal type="number" pos:start="977:42" pos:end="977:45">16</literal> <operator pos:start="977:45" pos:end="977:45">-</operator> <name pos:start="977:47" pos:end="977:48">rm</name></expr></argument>, <argument pos:start="977:51" pos:end="977:51"><expr pos:start="977:51" pos:end="977:51"><literal type="number" pos:start="977:51" pos:end="977:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="979:25" pos:end="979:30">break;</break>

                    <case pos:start="981:21" pos:end="981:28">case <expr pos:start="981:26" pos:end="981:27"><literal type="number" pos:start="981:26" pos:end="981:27">21</literal></expr>:</case> <comment type="block" pos:start="981:30" pos:end="981:40">/* fslto */</comment>

                        <if_stmt pos:start="983:25" pos:end="985:35"><if pos:start="983:25" pos:end="985:35">if <condition pos:start="983:28" pos:end="983:64">(<expr pos:start="983:29" pos:end="983:63"><operator pos:start="983:29" pos:end="983:29">!</operator><call pos:start="983:30" pos:end="983:63"><name pos:start="983:30" pos:end="983:40">arm_feature</name><argument_list pos:start="983:41" pos:end="983:63">(<argument pos:start="983:42" pos:end="983:44"><expr pos:start="983:42" pos:end="983:44"><name pos:start="983:42" pos:end="983:44">env</name></expr></argument>, <argument pos:start="983:47" pos:end="983:62"><expr pos:start="983:47" pos:end="983:62"><name pos:start="983:47" pos:end="983:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="985:27" pos:end="985:35"><block_content pos:start="985:27" pos:end="985:35">

                          <return pos:start="985:27" pos:end="985:35">return <expr pos:start="985:34" pos:end="985:34"><literal type="number" pos:start="985:34" pos:end="985:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="987:25" pos:end="987:53"><expr pos:start="987:25" pos:end="987:52"><call pos:start="987:25" pos:end="987:52"><name pos:start="987:25" pos:end="987:36">gen_vfp_slto</name><argument_list pos:start="987:37" pos:end="987:52">(<argument pos:start="987:38" pos:end="987:39"><expr pos:start="987:38" pos:end="987:39"><name pos:start="987:38" pos:end="987:39">dp</name></expr></argument>, <argument pos:start="987:42" pos:end="987:48"><expr pos:start="987:42" pos:end="987:48"><literal type="number" pos:start="987:42" pos:end="987:45">32</literal> <operator pos:start="987:45" pos:end="987:45">-</operator> <name pos:start="987:47" pos:end="987:48">rm</name></expr></argument>, <argument pos:start="987:51" pos:end="987:51"><expr pos:start="987:51" pos:end="987:51"><literal type="number" pos:start="987:51" pos:end="987:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="989:25" pos:end="989:30">break;</break>

                    <case pos:start="991:21" pos:end="991:28">case <expr pos:start="991:26" pos:end="991:27"><literal type="number" pos:start="991:26" pos:end="991:27">22</literal></expr>:</case> <comment type="block" pos:start="991:30" pos:end="991:40">/* fuhto */</comment>

                        <if_stmt pos:start="993:25" pos:end="995:35"><if pos:start="993:25" pos:end="995:35">if <condition pos:start="993:28" pos:end="993:64">(<expr pos:start="993:29" pos:end="993:63"><operator pos:start="993:29" pos:end="993:29">!</operator><call pos:start="993:30" pos:end="993:63"><name pos:start="993:30" pos:end="993:40">arm_feature</name><argument_list pos:start="993:41" pos:end="993:63">(<argument pos:start="993:42" pos:end="993:44"><expr pos:start="993:42" pos:end="993:44"><name pos:start="993:42" pos:end="993:44">env</name></expr></argument>, <argument pos:start="993:47" pos:end="993:62"><expr pos:start="993:47" pos:end="993:62"><name pos:start="993:47" pos:end="993:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="995:27" pos:end="995:35"><block_content pos:start="995:27" pos:end="995:35">

                          <return pos:start="995:27" pos:end="995:35">return <expr pos:start="995:34" pos:end="995:34"><literal type="number" pos:start="995:34" pos:end="995:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="997:25" pos:end="997:53"><expr pos:start="997:25" pos:end="997:52"><call pos:start="997:25" pos:end="997:52"><name pos:start="997:25" pos:end="997:36">gen_vfp_uhto</name><argument_list pos:start="997:37" pos:end="997:52">(<argument pos:start="997:38" pos:end="997:39"><expr pos:start="997:38" pos:end="997:39"><name pos:start="997:38" pos:end="997:39">dp</name></expr></argument>, <argument pos:start="997:42" pos:end="997:48"><expr pos:start="997:42" pos:end="997:48"><literal type="number" pos:start="997:42" pos:end="997:45">16</literal> <operator pos:start="997:45" pos:end="997:45">-</operator> <name pos:start="997:47" pos:end="997:48">rm</name></expr></argument>, <argument pos:start="997:51" pos:end="997:51"><expr pos:start="997:51" pos:end="997:51"><literal type="number" pos:start="997:51" pos:end="997:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="999:25" pos:end="999:30">break;</break>

                    <case pos:start="1001:21" pos:end="1001:28">case <expr pos:start="1001:26" pos:end="1001:27"><literal type="number" pos:start="1001:26" pos:end="1001:27">23</literal></expr>:</case> <comment type="block" pos:start="1001:30" pos:end="1001:40">/* fulto */</comment>

                        <if_stmt pos:start="1003:25" pos:end="1005:35"><if pos:start="1003:25" pos:end="1005:35">if <condition pos:start="1003:28" pos:end="1003:64">(<expr pos:start="1003:29" pos:end="1003:63"><operator pos:start="1003:29" pos:end="1003:29">!</operator><call pos:start="1003:30" pos:end="1003:63"><name pos:start="1003:30" pos:end="1003:40">arm_feature</name><argument_list pos:start="1003:41" pos:end="1003:63">(<argument pos:start="1003:42" pos:end="1003:44"><expr pos:start="1003:42" pos:end="1003:44"><name pos:start="1003:42" pos:end="1003:44">env</name></expr></argument>, <argument pos:start="1003:47" pos:end="1003:62"><expr pos:start="1003:47" pos:end="1003:62"><name pos:start="1003:47" pos:end="1003:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1005:27" pos:end="1005:35"><block_content pos:start="1005:27" pos:end="1005:35">

                          <return pos:start="1005:27" pos:end="1005:35">return <expr pos:start="1005:34" pos:end="1005:34"><literal type="number" pos:start="1005:34" pos:end="1005:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1007:25" pos:end="1007:53"><expr pos:start="1007:25" pos:end="1007:52"><call pos:start="1007:25" pos:end="1007:52"><name pos:start="1007:25" pos:end="1007:36">gen_vfp_ulto</name><argument_list pos:start="1007:37" pos:end="1007:52">(<argument pos:start="1007:38" pos:end="1007:39"><expr pos:start="1007:38" pos:end="1007:39"><name pos:start="1007:38" pos:end="1007:39">dp</name></expr></argument>, <argument pos:start="1007:42" pos:end="1007:48"><expr pos:start="1007:42" pos:end="1007:48"><literal type="number" pos:start="1007:42" pos:end="1007:45">32</literal> <operator pos:start="1007:45" pos:end="1007:45">-</operator> <name pos:start="1007:47" pos:end="1007:48">rm</name></expr></argument>, <argument pos:start="1007:51" pos:end="1007:51"><expr pos:start="1007:51" pos:end="1007:51"><literal type="number" pos:start="1007:51" pos:end="1007:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1009:25" pos:end="1009:30">break;</break>

                    <case pos:start="1011:21" pos:end="1011:28">case <expr pos:start="1011:26" pos:end="1011:27"><literal type="number" pos:start="1011:26" pos:end="1011:27">24</literal></expr>:</case> <comment type="block" pos:start="1011:30" pos:end="1011:40">/* ftoui */</comment>

                        <expr_stmt pos:start="1013:25" pos:end="1013:44"><expr pos:start="1013:25" pos:end="1013:43"><call pos:start="1013:25" pos:end="1013:43"><name pos:start="1013:25" pos:end="1013:36">gen_vfp_toui</name><argument_list pos:start="1013:37" pos:end="1013:43">(<argument pos:start="1013:38" pos:end="1013:39"><expr pos:start="1013:38" pos:end="1013:39"><name pos:start="1013:38" pos:end="1013:39">dp</name></expr></argument>, <argument pos:start="1013:42" pos:end="1013:42"><expr pos:start="1013:42" pos:end="1013:42"><literal type="number" pos:start="1013:42" pos:end="1013:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1015:25" pos:end="1015:30">break;</break>

                    <case pos:start="1017:21" pos:end="1017:28">case <expr pos:start="1017:26" pos:end="1017:27"><literal type="number" pos:start="1017:26" pos:end="1017:27">25</literal></expr>:</case> <comment type="block" pos:start="1017:30" pos:end="1017:41">/* ftouiz */</comment>

                        <expr_stmt pos:start="1019:25" pos:end="1019:45"><expr pos:start="1019:25" pos:end="1019:44"><call pos:start="1019:25" pos:end="1019:44"><name pos:start="1019:25" pos:end="1019:37">gen_vfp_touiz</name><argument_list pos:start="1019:38" pos:end="1019:44">(<argument pos:start="1019:39" pos:end="1019:40"><expr pos:start="1019:39" pos:end="1019:40"><name pos:start="1019:39" pos:end="1019:40">dp</name></expr></argument>, <argument pos:start="1019:43" pos:end="1019:43"><expr pos:start="1019:43" pos:end="1019:43"><literal type="number" pos:start="1019:43" pos:end="1019:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1021:25" pos:end="1021:30">break;</break>

                    <case pos:start="1023:21" pos:end="1023:28">case <expr pos:start="1023:26" pos:end="1023:27"><literal type="number" pos:start="1023:26" pos:end="1023:27">26</literal></expr>:</case> <comment type="block" pos:start="1023:30" pos:end="1023:40">/* ftosi */</comment>

                        <expr_stmt pos:start="1025:25" pos:end="1025:44"><expr pos:start="1025:25" pos:end="1025:43"><call pos:start="1025:25" pos:end="1025:43"><name pos:start="1025:25" pos:end="1025:36">gen_vfp_tosi</name><argument_list pos:start="1025:37" pos:end="1025:43">(<argument pos:start="1025:38" pos:end="1025:39"><expr pos:start="1025:38" pos:end="1025:39"><name pos:start="1025:38" pos:end="1025:39">dp</name></expr></argument>, <argument pos:start="1025:42" pos:end="1025:42"><expr pos:start="1025:42" pos:end="1025:42"><literal type="number" pos:start="1025:42" pos:end="1025:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1027:25" pos:end="1027:30">break;</break>

                    <case pos:start="1029:21" pos:end="1029:28">case <expr pos:start="1029:26" pos:end="1029:27"><literal type="number" pos:start="1029:26" pos:end="1029:27">27</literal></expr>:</case> <comment type="block" pos:start="1029:30" pos:end="1029:41">/* ftosiz */</comment>

                        <expr_stmt pos:start="1031:25" pos:end="1031:45"><expr pos:start="1031:25" pos:end="1031:44"><call pos:start="1031:25" pos:end="1031:44"><name pos:start="1031:25" pos:end="1031:37">gen_vfp_tosiz</name><argument_list pos:start="1031:38" pos:end="1031:44">(<argument pos:start="1031:39" pos:end="1031:40"><expr pos:start="1031:39" pos:end="1031:40"><name pos:start="1031:39" pos:end="1031:40">dp</name></expr></argument>, <argument pos:start="1031:43" pos:end="1031:43"><expr pos:start="1031:43" pos:end="1031:43"><literal type="number" pos:start="1031:43" pos:end="1031:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1033:25" pos:end="1033:30">break;</break>

                    <case pos:start="1035:21" pos:end="1035:28">case <expr pos:start="1035:26" pos:end="1035:27"><literal type="number" pos:start="1035:26" pos:end="1035:27">28</literal></expr>:</case> <comment type="block" pos:start="1035:30" pos:end="1035:40">/* ftosh */</comment>

                        <if_stmt pos:start="1037:25" pos:end="1039:35"><if pos:start="1037:25" pos:end="1039:35">if <condition pos:start="1037:28" pos:end="1037:64">(<expr pos:start="1037:29" pos:end="1037:63"><operator pos:start="1037:29" pos:end="1037:29">!</operator><call pos:start="1037:30" pos:end="1037:63"><name pos:start="1037:30" pos:end="1037:40">arm_feature</name><argument_list pos:start="1037:41" pos:end="1037:63">(<argument pos:start="1037:42" pos:end="1037:44"><expr pos:start="1037:42" pos:end="1037:44"><name pos:start="1037:42" pos:end="1037:44">env</name></expr></argument>, <argument pos:start="1037:47" pos:end="1037:62"><expr pos:start="1037:47" pos:end="1037:62"><name pos:start="1037:47" pos:end="1037:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1039:27" pos:end="1039:35"><block_content pos:start="1039:27" pos:end="1039:35">

                          <return pos:start="1039:27" pos:end="1039:35">return <expr pos:start="1039:34" pos:end="1039:34"><literal type="number" pos:start="1039:34" pos:end="1039:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1041:25" pos:end="1041:53"><expr pos:start="1041:25" pos:end="1041:52"><call pos:start="1041:25" pos:end="1041:52"><name pos:start="1041:25" pos:end="1041:36">gen_vfp_tosh</name><argument_list pos:start="1041:37" pos:end="1041:52">(<argument pos:start="1041:38" pos:end="1041:39"><expr pos:start="1041:38" pos:end="1041:39"><name pos:start="1041:38" pos:end="1041:39">dp</name></expr></argument>, <argument pos:start="1041:42" pos:end="1041:48"><expr pos:start="1041:42" pos:end="1041:48"><literal type="number" pos:start="1041:42" pos:end="1041:45">16</literal> <operator pos:start="1041:45" pos:end="1041:45">-</operator> <name pos:start="1041:47" pos:end="1041:48">rm</name></expr></argument>, <argument pos:start="1041:51" pos:end="1041:51"><expr pos:start="1041:51" pos:end="1041:51"><literal type="number" pos:start="1041:51" pos:end="1041:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1043:25" pos:end="1043:30">break;</break>

                    <case pos:start="1045:21" pos:end="1045:28">case <expr pos:start="1045:26" pos:end="1045:27"><literal type="number" pos:start="1045:26" pos:end="1045:27">29</literal></expr>:</case> <comment type="block" pos:start="1045:30" pos:end="1045:40">/* ftosl */</comment>

                        <if_stmt pos:start="1047:25" pos:end="1049:35"><if pos:start="1047:25" pos:end="1049:35">if <condition pos:start="1047:28" pos:end="1047:64">(<expr pos:start="1047:29" pos:end="1047:63"><operator pos:start="1047:29" pos:end="1047:29">!</operator><call pos:start="1047:30" pos:end="1047:63"><name pos:start="1047:30" pos:end="1047:40">arm_feature</name><argument_list pos:start="1047:41" pos:end="1047:63">(<argument pos:start="1047:42" pos:end="1047:44"><expr pos:start="1047:42" pos:end="1047:44"><name pos:start="1047:42" pos:end="1047:44">env</name></expr></argument>, <argument pos:start="1047:47" pos:end="1047:62"><expr pos:start="1047:47" pos:end="1047:62"><name pos:start="1047:47" pos:end="1047:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1049:27" pos:end="1049:35"><block_content pos:start="1049:27" pos:end="1049:35">

                          <return pos:start="1049:27" pos:end="1049:35">return <expr pos:start="1049:34" pos:end="1049:34"><literal type="number" pos:start="1049:34" pos:end="1049:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1051:25" pos:end="1051:53"><expr pos:start="1051:25" pos:end="1051:52"><call pos:start="1051:25" pos:end="1051:52"><name pos:start="1051:25" pos:end="1051:36">gen_vfp_tosl</name><argument_list pos:start="1051:37" pos:end="1051:52">(<argument pos:start="1051:38" pos:end="1051:39"><expr pos:start="1051:38" pos:end="1051:39"><name pos:start="1051:38" pos:end="1051:39">dp</name></expr></argument>, <argument pos:start="1051:42" pos:end="1051:48"><expr pos:start="1051:42" pos:end="1051:48"><literal type="number" pos:start="1051:42" pos:end="1051:45">32</literal> <operator pos:start="1051:45" pos:end="1051:45">-</operator> <name pos:start="1051:47" pos:end="1051:48">rm</name></expr></argument>, <argument pos:start="1051:51" pos:end="1051:51"><expr pos:start="1051:51" pos:end="1051:51"><literal type="number" pos:start="1051:51" pos:end="1051:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1053:25" pos:end="1053:30">break;</break>

                    <case pos:start="1055:21" pos:end="1055:28">case <expr pos:start="1055:26" pos:end="1055:27"><literal type="number" pos:start="1055:26" pos:end="1055:27">30</literal></expr>:</case> <comment type="block" pos:start="1055:30" pos:end="1055:40">/* ftouh */</comment>

                        <if_stmt pos:start="1057:25" pos:end="1059:35"><if pos:start="1057:25" pos:end="1059:35">if <condition pos:start="1057:28" pos:end="1057:64">(<expr pos:start="1057:29" pos:end="1057:63"><operator pos:start="1057:29" pos:end="1057:29">!</operator><call pos:start="1057:30" pos:end="1057:63"><name pos:start="1057:30" pos:end="1057:40">arm_feature</name><argument_list pos:start="1057:41" pos:end="1057:63">(<argument pos:start="1057:42" pos:end="1057:44"><expr pos:start="1057:42" pos:end="1057:44"><name pos:start="1057:42" pos:end="1057:44">env</name></expr></argument>, <argument pos:start="1057:47" pos:end="1057:62"><expr pos:start="1057:47" pos:end="1057:62"><name pos:start="1057:47" pos:end="1057:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1059:27" pos:end="1059:35"><block_content pos:start="1059:27" pos:end="1059:35">

                          <return pos:start="1059:27" pos:end="1059:35">return <expr pos:start="1059:34" pos:end="1059:34"><literal type="number" pos:start="1059:34" pos:end="1059:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1061:25" pos:end="1061:53"><expr pos:start="1061:25" pos:end="1061:52"><call pos:start="1061:25" pos:end="1061:52"><name pos:start="1061:25" pos:end="1061:36">gen_vfp_touh</name><argument_list pos:start="1061:37" pos:end="1061:52">(<argument pos:start="1061:38" pos:end="1061:39"><expr pos:start="1061:38" pos:end="1061:39"><name pos:start="1061:38" pos:end="1061:39">dp</name></expr></argument>, <argument pos:start="1061:42" pos:end="1061:48"><expr pos:start="1061:42" pos:end="1061:48"><literal type="number" pos:start="1061:42" pos:end="1061:45">16</literal> <operator pos:start="1061:45" pos:end="1061:45">-</operator> <name pos:start="1061:47" pos:end="1061:48">rm</name></expr></argument>, <argument pos:start="1061:51" pos:end="1061:51"><expr pos:start="1061:51" pos:end="1061:51"><literal type="number" pos:start="1061:51" pos:end="1061:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1063:25" pos:end="1063:30">break;</break>

                    <case pos:start="1065:21" pos:end="1065:28">case <expr pos:start="1065:26" pos:end="1065:27"><literal type="number" pos:start="1065:26" pos:end="1065:27">31</literal></expr>:</case> <comment type="block" pos:start="1065:30" pos:end="1065:40">/* ftoul */</comment>

                        <if_stmt pos:start="1067:25" pos:end="1069:35"><if pos:start="1067:25" pos:end="1069:35">if <condition pos:start="1067:28" pos:end="1067:64">(<expr pos:start="1067:29" pos:end="1067:63"><operator pos:start="1067:29" pos:end="1067:29">!</operator><call pos:start="1067:30" pos:end="1067:63"><name pos:start="1067:30" pos:end="1067:40">arm_feature</name><argument_list pos:start="1067:41" pos:end="1067:63">(<argument pos:start="1067:42" pos:end="1067:44"><expr pos:start="1067:42" pos:end="1067:44"><name pos:start="1067:42" pos:end="1067:44">env</name></expr></argument>, <argument pos:start="1067:47" pos:end="1067:62"><expr pos:start="1067:47" pos:end="1067:62"><name pos:start="1067:47" pos:end="1067:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1069:27" pos:end="1069:35"><block_content pos:start="1069:27" pos:end="1069:35">

                          <return pos:start="1069:27" pos:end="1069:35">return <expr pos:start="1069:34" pos:end="1069:34"><literal type="number" pos:start="1069:34" pos:end="1069:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1071:25" pos:end="1071:53"><expr pos:start="1071:25" pos:end="1071:52"><call pos:start="1071:25" pos:end="1071:52"><name pos:start="1071:25" pos:end="1071:36">gen_vfp_toul</name><argument_list pos:start="1071:37" pos:end="1071:52">(<argument pos:start="1071:38" pos:end="1071:39"><expr pos:start="1071:38" pos:end="1071:39"><name pos:start="1071:38" pos:end="1071:39">dp</name></expr></argument>, <argument pos:start="1071:42" pos:end="1071:48"><expr pos:start="1071:42" pos:end="1071:48"><literal type="number" pos:start="1071:42" pos:end="1071:45">32</literal> <operator pos:start="1071:45" pos:end="1071:45">-</operator> <name pos:start="1071:47" pos:end="1071:48">rm</name></expr></argument>, <argument pos:start="1071:51" pos:end="1071:51"><expr pos:start="1071:51" pos:end="1071:51"><literal type="number" pos:start="1071:51" pos:end="1071:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1073:25" pos:end="1073:30">break;</break>

                    <default pos:start="1075:21" pos:end="1075:28">default:</default> <comment type="block" pos:start="1075:30" pos:end="1075:44">/* undefined */</comment>

                        <expr_stmt pos:start="1077:25" pos:end="1077:47"><expr pos:start="1077:25" pos:end="1077:46"><call pos:start="1077:25" pos:end="1077:46"><name pos:start="1077:25" pos:end="1077:30">printf</name> <argument_list pos:start="1077:32" pos:end="1077:46">(<argument pos:start="1077:33" pos:end="1077:41"><expr pos:start="1077:33" pos:end="1077:41"><literal type="string" pos:start="1077:33" pos:end="1077:41">"rn:%d\n"</literal></expr></argument>, <argument pos:start="1077:44" pos:end="1077:45"><expr pos:start="1077:44" pos:end="1077:45"><name pos:start="1077:44" pos:end="1077:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="1079:25" pos:end="1079:33">return <expr pos:start="1079:32" pos:end="1079:32"><literal type="number" pos:start="1079:32" pos:end="1079:32">1</literal></expr>;</return>

                    </block_content>}</block></switch>

                    <break pos:start="1083:21" pos:end="1083:26">break;</break>

                <default pos:start="1085:17" pos:end="1085:24">default:</default> <comment type="block" pos:start="1085:26" pos:end="1085:40">/* undefined */</comment>

                    <expr_stmt pos:start="1087:21" pos:end="1087:43"><expr pos:start="1087:21" pos:end="1087:42"><call pos:start="1087:21" pos:end="1087:42"><name pos:start="1087:21" pos:end="1087:26">printf</name> <argument_list pos:start="1087:28" pos:end="1087:42">(<argument pos:start="1087:29" pos:end="1087:37"><expr pos:start="1087:29" pos:end="1087:37"><literal type="string" pos:start="1087:29" pos:end="1087:37">"op:%d\n"</literal></expr></argument>, <argument pos:start="1087:40" pos:end="1087:41"><expr pos:start="1087:40" pos:end="1087:41"><name pos:start="1087:40" pos:end="1087:41">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="1089:21" pos:end="1089:29">return <expr pos:start="1089:28" pos:end="1089:28"><literal type="number" pos:start="1089:28" pos:end="1089:28">1</literal></expr>;</return>

                </block_content>}</block></switch>



                <comment type="block" pos:start="1095:17" pos:end="1095:45">/* Write back the result.  */</comment>

                <if_stmt pos:start="1097:17" pos:end="1115:44"><if pos:start="1097:17" pos:end="1099:21">if <condition pos:start="1097:20" pos:end="1097:54">(<expr pos:start="1097:21" pos:end="1097:53"><name pos:start="1097:21" pos:end="1097:22">op</name> <operator pos:start="1097:24" pos:end="1097:25">==</operator> <literal type="number" pos:start="1097:27" pos:end="1097:28">15</literal> <operator pos:start="1097:30" pos:end="1097:31">&amp;&amp;</operator> <operator pos:start="1097:33" pos:end="1097:33">(</operator><name pos:start="1097:34" pos:end="1097:35">rn</name> <operator pos:start="1097:37" pos:end="1097:38">&gt;=</operator> <literal type="number" pos:start="1097:40" pos:end="1097:40">8</literal> <operator pos:start="1097:42" pos:end="1097:43">&amp;&amp;</operator> <name pos:start="1097:45" pos:end="1097:46">rn</name> <operator pos:start="1097:48" pos:end="1097:49">&lt;=</operator> <literal type="number" pos:start="1097:51" pos:end="1097:52">11</literal><operator pos:start="1097:53" pos:end="1097:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1099:21" pos:end="1099:21"><block_content pos:start="1099:21" pos:end="1099:21">

                    <empty_stmt pos:start="1099:21" pos:end="1099:21">;</empty_stmt></block_content></block></if> <comment type="block" pos:start="1099:23" pos:end="1099:52">/* Comparison, do nothing.  */</comment>

                <if type="elseif" pos:start="1101:17" pos:end="1105:43">else if <condition pos:start="1101:25" pos:end="1101:65">(<expr pos:start="1101:26" pos:end="1101:64"><name pos:start="1101:26" pos:end="1101:27">op</name> <operator pos:start="1101:29" pos:end="1101:30">==</operator> <literal type="number" pos:start="1101:32" pos:end="1101:33">15</literal> <operator pos:start="1101:35" pos:end="1101:36">&amp;&amp;</operator> <name pos:start="1101:38" pos:end="1101:39">dp</name> <operator pos:start="1101:41" pos:end="1101:42">&amp;&amp;</operator> <operator pos:start="1101:44" pos:end="1101:44">(</operator><operator pos:start="1101:45" pos:end="1101:45">(</operator><name pos:start="1101:46" pos:end="1101:47">rn</name> <operator pos:start="1101:49" pos:end="1101:49">&amp;</operator> <literal type="number" pos:start="1101:51" pos:end="1101:54">0x1c</literal><operator pos:start="1101:55" pos:end="1101:55">)</operator> <operator pos:start="1101:57" pos:end="1101:58">==</operator> <literal type="number" pos:start="1101:60" pos:end="1101:63">0x18</literal><operator pos:start="1101:64" pos:end="1101:64">)</operator></expr>)</condition><block type="pseudo" pos:start="1105:21" pos:end="1105:43"><block_content pos:start="1105:21" pos:end="1105:43">

                    <comment type="block" pos:start="1103:21" pos:end="1103:68">/* VCVT double to int: always integer result. */</comment>

                    <expr_stmt pos:start="1105:21" pos:end="1105:43"><expr pos:start="1105:21" pos:end="1105:42"><call pos:start="1105:21" pos:end="1105:42"><name pos:start="1105:21" pos:end="1105:35">gen_mov_vreg_F0</name><argument_list pos:start="1105:36" pos:end="1105:42">(<argument pos:start="1105:37" pos:end="1105:37"><expr pos:start="1105:37" pos:end="1105:37"><literal type="number" pos:start="1105:37" pos:end="1105:37">0</literal></expr></argument>, <argument pos:start="1105:40" pos:end="1105:41"><expr pos:start="1105:40" pos:end="1105:41"><name pos:start="1105:40" pos:end="1105:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1107:17" pos:end="1111:45">else if <condition pos:start="1107:25" pos:end="1107:46">(<expr pos:start="1107:26" pos:end="1107:45"><name pos:start="1107:26" pos:end="1107:27">op</name> <operator pos:start="1107:29" pos:end="1107:30">==</operator> <literal type="number" pos:start="1107:32" pos:end="1107:33">15</literal> <operator pos:start="1107:35" pos:end="1107:36">&amp;&amp;</operator> <name pos:start="1107:38" pos:end="1107:39">rn</name> <operator pos:start="1107:41" pos:end="1107:42">==</operator> <literal type="number" pos:start="1107:44" pos:end="1107:45">15</literal></expr>)</condition><block type="pseudo" pos:start="1111:21" pos:end="1111:45"><block_content pos:start="1111:21" pos:end="1111:45">

                    <comment type="block" pos:start="1109:21" pos:end="1109:36">/* conversion */</comment>

                    <expr_stmt pos:start="1111:21" pos:end="1111:45"><expr pos:start="1111:21" pos:end="1111:44"><call pos:start="1111:21" pos:end="1111:44"><name pos:start="1111:21" pos:end="1111:35">gen_mov_vreg_F0</name><argument_list pos:start="1111:36" pos:end="1111:44">(<argument pos:start="1111:37" pos:end="1111:39"><expr pos:start="1111:37" pos:end="1111:39"><operator pos:start="1111:37" pos:end="1111:37">!</operator><name pos:start="1111:38" pos:end="1111:39">dp</name></expr></argument>, <argument pos:start="1111:42" pos:end="1111:43"><expr pos:start="1111:42" pos:end="1111:43"><name pos:start="1111:42" pos:end="1111:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1113:17" pos:end="1115:44">else<block type="pseudo" pos:start="1115:21" pos:end="1115:44"><block_content pos:start="1115:21" pos:end="1115:44">

                    <expr_stmt pos:start="1115:21" pos:end="1115:44"><expr pos:start="1115:21" pos:end="1115:43"><call pos:start="1115:21" pos:end="1115:43"><name pos:start="1115:21" pos:end="1115:35">gen_mov_vreg_F0</name><argument_list pos:start="1115:36" pos:end="1115:43">(<argument pos:start="1115:37" pos:end="1115:38"><expr pos:start="1115:37" pos:end="1115:38"><name pos:start="1115:37" pos:end="1115:38">dp</name></expr></argument>, <argument pos:start="1115:41" pos:end="1115:42"><expr pos:start="1115:41" pos:end="1115:42"><name pos:start="1115:41" pos:end="1115:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <comment type="block" pos:start="1119:17" pos:end="1119:64">/* break out of the loop if we have finished  */</comment>

                <if_stmt pos:start="1121:17" pos:end="1123:26"><if pos:start="1121:17" pos:end="1123:26">if <condition pos:start="1121:20" pos:end="1121:32">(<expr pos:start="1121:21" pos:end="1121:31"><name pos:start="1121:21" pos:end="1121:26">veclen</name> <operator pos:start="1121:28" pos:end="1121:29">==</operator> <literal type="number" pos:start="1121:31" pos:end="1121:31">0</literal></expr>)</condition><block type="pseudo" pos:start="1123:21" pos:end="1123:26"><block_content pos:start="1123:21" pos:end="1123:26">

                    <break pos:start="1123:21" pos:end="1123:26">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="1127:17" pos:end="1143:17"><if pos:start="1127:17" pos:end="1143:17">if <condition pos:start="1127:20" pos:end="1127:45">(<expr pos:start="1127:21" pos:end="1127:44"><name pos:start="1127:21" pos:end="1127:22">op</name> <operator pos:start="1127:24" pos:end="1127:25">==</operator> <literal type="number" pos:start="1127:27" pos:end="1127:28">15</literal> <operator pos:start="1127:30" pos:end="1127:31">&amp;&amp;</operator> <name pos:start="1127:33" pos:end="1127:39">delta_m</name> <operator pos:start="1127:41" pos:end="1127:42">==</operator> <literal type="number" pos:start="1127:44" pos:end="1127:44">0</literal></expr>)</condition> <block pos:start="1127:47" pos:end="1143:17">{<block_content pos:start="1131:21" pos:end="1141:26">

                    <comment type="block" pos:start="1129:21" pos:end="1129:48">/* single source one-many */</comment>

                    <while pos:start="1131:21" pos:end="1139:21">while <condition pos:start="1131:27" pos:end="1131:36">(<expr pos:start="1131:28" pos:end="1131:35"><name pos:start="1131:28" pos:end="1131:33">veclen</name><operator pos:start="1131:34" pos:end="1131:35">--</operator></expr>)</condition> <block pos:start="1131:38" pos:end="1139:21">{<block_content pos:start="1133:25" pos:end="1137:48">

                        <expr_stmt pos:start="1133:25" pos:end="1135:48"><expr pos:start="1133:25" pos:end="1135:47"><name pos:start="1133:25" pos:end="1133:26">rd</name> <operator pos:start="1133:28" pos:end="1133:28">=</operator> <operator pos:start="1133:30" pos:end="1133:30">(</operator><operator pos:start="1133:31" pos:end="1133:31">(</operator><name pos:start="1133:32" pos:end="1133:33">rd</name> <operator pos:start="1133:35" pos:end="1133:35">+</operator> <name pos:start="1133:37" pos:end="1133:43">delta_d</name><operator pos:start="1133:44" pos:end="1133:44">)</operator> <operator pos:start="1133:46" pos:end="1133:46">&amp;</operator> <operator pos:start="1133:48" pos:end="1133:48">(</operator><name pos:start="1133:49" pos:end="1133:57">bank_mask</name> <operator pos:start="1133:59" pos:end="1133:59">-</operator> <literal type="number" pos:start="1133:61" pos:end="1133:61">1</literal><operator pos:start="1133:62" pos:end="1133:62">)</operator><operator pos:start="1133:63" pos:end="1133:63">)</operator>

                             <operator pos:start="1135:30" pos:end="1135:30">|</operator> <operator pos:start="1135:32" pos:end="1135:32">(</operator><name pos:start="1135:33" pos:end="1135:34">rd</name> <operator pos:start="1135:36" pos:end="1135:36">&amp;</operator> <name pos:start="1135:38" pos:end="1135:46">bank_mask</name><operator pos:start="1135:47" pos:end="1135:47">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="1137:25" pos:end="1137:48"><expr pos:start="1137:25" pos:end="1137:47"><call pos:start="1137:25" pos:end="1137:47"><name pos:start="1137:25" pos:end="1137:39">gen_mov_vreg_F0</name><argument_list pos:start="1137:40" pos:end="1137:47">(<argument pos:start="1137:41" pos:end="1137:42"><expr pos:start="1137:41" pos:end="1137:42"><name pos:start="1137:41" pos:end="1137:42">dp</name></expr></argument>, <argument pos:start="1137:45" pos:end="1137:46"><expr pos:start="1137:45" pos:end="1137:46"><name pos:start="1137:45" pos:end="1137:46">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <break pos:start="1141:21" pos:end="1141:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1145:17" pos:end="1145:47">/* Setup the next operands.  */</comment>

                <expr_stmt pos:start="1147:17" pos:end="1147:25"><expr pos:start="1147:17" pos:end="1147:24"><name pos:start="1147:17" pos:end="1147:22">veclen</name><operator pos:start="1147:23" pos:end="1147:24">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1149:17" pos:end="1151:40"><expr pos:start="1149:17" pos:end="1151:39"><name pos:start="1149:17" pos:end="1149:18">rd</name> <operator pos:start="1149:20" pos:end="1149:20">=</operator> <operator pos:start="1149:22" pos:end="1149:22">(</operator><operator pos:start="1149:23" pos:end="1149:23">(</operator><name pos:start="1149:24" pos:end="1149:25">rd</name> <operator pos:start="1149:27" pos:end="1149:27">+</operator> <name pos:start="1149:29" pos:end="1149:35">delta_d</name><operator pos:start="1149:36" pos:end="1149:36">)</operator> <operator pos:start="1149:38" pos:end="1149:38">&amp;</operator> <operator pos:start="1149:40" pos:end="1149:40">(</operator><name pos:start="1149:41" pos:end="1149:49">bank_mask</name> <operator pos:start="1149:51" pos:end="1149:51">-</operator> <literal type="number" pos:start="1149:53" pos:end="1149:53">1</literal><operator pos:start="1149:54" pos:end="1149:54">)</operator><operator pos:start="1149:55" pos:end="1149:55">)</operator>

                     <operator pos:start="1151:22" pos:end="1151:22">|</operator> <operator pos:start="1151:24" pos:end="1151:24">(</operator><name pos:start="1151:25" pos:end="1151:26">rd</name> <operator pos:start="1151:28" pos:end="1151:28">&amp;</operator> <name pos:start="1151:30" pos:end="1151:38">bank_mask</name><operator pos:start="1151:39" pos:end="1151:39">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="1155:17" pos:end="1185:17"><if pos:start="1155:17" pos:end="1165:17">if <condition pos:start="1155:20" pos:end="1155:29">(<expr pos:start="1155:21" pos:end="1155:28"><name pos:start="1155:21" pos:end="1155:22">op</name> <operator pos:start="1155:24" pos:end="1155:25">==</operator> <literal type="number" pos:start="1155:27" pos:end="1155:28">15</literal></expr>)</condition> <block pos:start="1155:31" pos:end="1165:17">{<block_content pos:start="1159:21" pos:end="1163:44">

                    <comment type="block" pos:start="1157:21" pos:end="1157:46">/* One source operand.  */</comment>

                    <expr_stmt pos:start="1159:21" pos:end="1161:44"><expr pos:start="1159:21" pos:end="1161:43"><name pos:start="1159:21" pos:end="1159:22">rm</name> <operator pos:start="1159:24" pos:end="1159:24">=</operator> <operator pos:start="1159:26" pos:end="1159:26">(</operator><operator pos:start="1159:27" pos:end="1159:27">(</operator><name pos:start="1159:28" pos:end="1159:29">rm</name> <operator pos:start="1159:31" pos:end="1159:31">+</operator> <name pos:start="1159:33" pos:end="1159:39">delta_m</name><operator pos:start="1159:40" pos:end="1159:40">)</operator> <operator pos:start="1159:42" pos:end="1159:42">&amp;</operator> <operator pos:start="1159:44" pos:end="1159:44">(</operator><name pos:start="1159:45" pos:end="1159:53">bank_mask</name> <operator pos:start="1159:55" pos:end="1159:55">-</operator> <literal type="number" pos:start="1159:57" pos:end="1159:57">1</literal><operator pos:start="1159:58" pos:end="1159:58">)</operator><operator pos:start="1159:59" pos:end="1159:59">)</operator>

                         <operator pos:start="1161:26" pos:end="1161:26">|</operator> <operator pos:start="1161:28" pos:end="1161:28">(</operator><name pos:start="1161:29" pos:end="1161:30">rm</name> <operator pos:start="1161:32" pos:end="1161:32">&amp;</operator> <name pos:start="1161:34" pos:end="1161:42">bank_mask</name><operator pos:start="1161:43" pos:end="1161:43">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1163:21" pos:end="1163:44"><expr pos:start="1163:21" pos:end="1163:43"><call pos:start="1163:21" pos:end="1163:43"><name pos:start="1163:21" pos:end="1163:35">gen_mov_F0_vreg</name><argument_list pos:start="1163:36" pos:end="1163:43">(<argument pos:start="1163:37" pos:end="1163:38"><expr pos:start="1163:37" pos:end="1163:38"><name pos:start="1163:37" pos:end="1163:38">dp</name></expr></argument>, <argument pos:start="1163:41" pos:end="1163:42"><expr pos:start="1163:41" pos:end="1163:42"><name pos:start="1163:41" pos:end="1163:42">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1165:19" pos:end="1185:17">else <block pos:start="1165:24" pos:end="1185:17">{<block_content pos:start="1169:21" pos:end="1183:21">

                    <comment type="block" pos:start="1167:21" pos:end="1167:47">/* Two source operands.  */</comment>

                    <expr_stmt pos:start="1169:21" pos:end="1171:44"><expr pos:start="1169:21" pos:end="1171:43"><name pos:start="1169:21" pos:end="1169:22">rn</name> <operator pos:start="1169:24" pos:end="1169:24">=</operator> <operator pos:start="1169:26" pos:end="1169:26">(</operator><operator pos:start="1169:27" pos:end="1169:27">(</operator><name pos:start="1169:28" pos:end="1169:29">rn</name> <operator pos:start="1169:31" pos:end="1169:31">+</operator> <name pos:start="1169:33" pos:end="1169:39">delta_d</name><operator pos:start="1169:40" pos:end="1169:40">)</operator> <operator pos:start="1169:42" pos:end="1169:42">&amp;</operator> <operator pos:start="1169:44" pos:end="1169:44">(</operator><name pos:start="1169:45" pos:end="1169:53">bank_mask</name> <operator pos:start="1169:55" pos:end="1169:55">-</operator> <literal type="number" pos:start="1169:57" pos:end="1169:57">1</literal><operator pos:start="1169:58" pos:end="1169:58">)</operator><operator pos:start="1169:59" pos:end="1169:59">)</operator>

                         <operator pos:start="1171:26" pos:end="1171:26">|</operator> <operator pos:start="1171:28" pos:end="1171:28">(</operator><name pos:start="1171:29" pos:end="1171:30">rn</name> <operator pos:start="1171:32" pos:end="1171:32">&amp;</operator> <name pos:start="1171:34" pos:end="1171:42">bank_mask</name><operator pos:start="1171:43" pos:end="1171:43">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1173:21" pos:end="1173:44"><expr pos:start="1173:21" pos:end="1173:43"><call pos:start="1173:21" pos:end="1173:43"><name pos:start="1173:21" pos:end="1173:35">gen_mov_F0_vreg</name><argument_list pos:start="1173:36" pos:end="1173:43">(<argument pos:start="1173:37" pos:end="1173:38"><expr pos:start="1173:37" pos:end="1173:38"><name pos:start="1173:37" pos:end="1173:38">dp</name></expr></argument>, <argument pos:start="1173:41" pos:end="1173:42"><expr pos:start="1173:41" pos:end="1173:42"><name pos:start="1173:41" pos:end="1173:42">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1175:21" pos:end="1183:21"><if pos:start="1175:21" pos:end="1183:21">if <condition pos:start="1175:24" pos:end="1175:32">(<expr pos:start="1175:25" pos:end="1175:31"><name pos:start="1175:25" pos:end="1175:31">delta_m</name></expr>)</condition> <block pos:start="1175:34" pos:end="1183:21">{<block_content pos:start="1177:25" pos:end="1181:48">

                        <expr_stmt pos:start="1177:25" pos:end="1179:48"><expr pos:start="1177:25" pos:end="1179:47"><name pos:start="1177:25" pos:end="1177:26">rm</name> <operator pos:start="1177:28" pos:end="1177:28">=</operator> <operator pos:start="1177:30" pos:end="1177:30">(</operator><operator pos:start="1177:31" pos:end="1177:31">(</operator><name pos:start="1177:32" pos:end="1177:33">rm</name> <operator pos:start="1177:35" pos:end="1177:35">+</operator> <name pos:start="1177:37" pos:end="1177:43">delta_m</name><operator pos:start="1177:44" pos:end="1177:44">)</operator> <operator pos:start="1177:46" pos:end="1177:46">&amp;</operator> <operator pos:start="1177:48" pos:end="1177:48">(</operator><name pos:start="1177:49" pos:end="1177:57">bank_mask</name> <operator pos:start="1177:59" pos:end="1177:59">-</operator> <literal type="number" pos:start="1177:61" pos:end="1177:61">1</literal><operator pos:start="1177:62" pos:end="1177:62">)</operator><operator pos:start="1177:63" pos:end="1177:63">)</operator>

                             <operator pos:start="1179:30" pos:end="1179:30">|</operator> <operator pos:start="1179:32" pos:end="1179:32">(</operator><name pos:start="1179:33" pos:end="1179:34">rm</name> <operator pos:start="1179:36" pos:end="1179:36">&amp;</operator> <name pos:start="1179:38" pos:end="1179:46">bank_mask</name><operator pos:start="1179:47" pos:end="1179:47">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="1181:25" pos:end="1181:48"><expr pos:start="1181:25" pos:end="1181:47"><call pos:start="1181:25" pos:end="1181:47"><name pos:start="1181:25" pos:end="1181:39">gen_mov_F1_vreg</name><argument_list pos:start="1181:40" pos:end="1181:47">(<argument pos:start="1181:41" pos:end="1181:42"><expr pos:start="1181:41" pos:end="1181:42"><name pos:start="1181:41" pos:end="1181:42">dp</name></expr></argument>, <argument pos:start="1181:45" pos:end="1181:46"><expr pos:start="1181:45" pos:end="1181:46"><name pos:start="1181:45" pos:end="1181:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1191:9" pos:end="1191:14">break;</break>

    <case pos:start="1193:5" pos:end="1193:13">case <expr pos:start="1193:10" pos:end="1193:12"><literal type="number" pos:start="1193:10" pos:end="1193:12">0xc</literal></expr>:</case>

    <case pos:start="1195:5" pos:end="1195:13">case <expr pos:start="1195:10" pos:end="1195:12"><literal type="number" pos:start="1195:10" pos:end="1195:12">0xd</literal></expr>:</case>

        <if_stmt pos:start="1197:9" pos:end="1473:9"><if pos:start="1197:9" pos:end="1287:9">if <condition pos:start="1197:12" pos:end="1197:46">(<expr pos:start="1197:13" pos:end="1197:45"><operator pos:start="1197:13" pos:end="1197:13">(</operator><name pos:start="1197:14" pos:end="1197:17">insn</name> <operator pos:start="1197:19" pos:end="1197:19">&amp;</operator> <literal type="number" pos:start="1197:21" pos:end="1197:30">0x03e00000</literal><operator pos:start="1197:31" pos:end="1197:31">)</operator> <operator pos:start="1197:33" pos:end="1197:34">==</operator> <literal type="number" pos:start="1197:36" pos:end="1197:45">0x00400000</literal></expr>)</condition> <block pos:start="1197:48" pos:end="1287:9">{<block_content pos:start="1201:13" pos:end="1285:13">

            <comment type="block" pos:start="1199:13" pos:end="1199:39">/* two-register transfer */</comment>

            <expr_stmt pos:start="1201:13" pos:end="1201:36"><expr pos:start="1201:13" pos:end="1201:35"><name pos:start="1201:13" pos:end="1201:14">rn</name> <operator pos:start="1201:16" pos:end="1201:16">=</operator> <operator pos:start="1201:18" pos:end="1201:18">(</operator><name pos:start="1201:19" pos:end="1201:22">insn</name> <operator pos:start="1201:24" pos:end="1201:25">&gt;&gt;</operator> <literal type="number" pos:start="1201:27" pos:end="1201:28">16</literal><operator pos:start="1201:29" pos:end="1201:29">)</operator> <operator pos:start="1201:31" pos:end="1201:31">&amp;</operator> <literal type="number" pos:start="1201:33" pos:end="1201:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1203:13" pos:end="1203:36"><expr pos:start="1203:13" pos:end="1203:35"><name pos:start="1203:13" pos:end="1203:14">rd</name> <operator pos:start="1203:16" pos:end="1203:16">=</operator> <operator pos:start="1203:18" pos:end="1203:18">(</operator><name pos:start="1203:19" pos:end="1203:22">insn</name> <operator pos:start="1203:24" pos:end="1203:25">&gt;&gt;</operator> <literal type="number" pos:start="1203:27" pos:end="1203:28">12</literal><operator pos:start="1203:29" pos:end="1203:29">)</operator> <operator pos:start="1203:31" pos:end="1203:31">&amp;</operator> <literal type="number" pos:start="1203:33" pos:end="1203:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1205:13" pos:end="1213:13"><if pos:start="1205:13" pos:end="1209:13">if <condition pos:start="1205:16" pos:end="1205:19">(<expr pos:start="1205:17" pos:end="1205:18"><name pos:start="1205:17" pos:end="1205:18">dp</name></expr>)</condition> <block pos:start="1205:21" pos:end="1209:13">{<block_content pos:start="1207:17" pos:end="1207:37">

                <expr_stmt pos:start="1207:17" pos:end="1207:37"><expr pos:start="1207:17" pos:end="1207:36"><call pos:start="1207:17" pos:end="1207:36"><name pos:start="1207:17" pos:end="1207:26">VFP_DREG_M</name><argument_list pos:start="1207:27" pos:end="1207:36">(<argument pos:start="1207:28" pos:end="1207:29"><expr pos:start="1207:28" pos:end="1207:29"><name pos:start="1207:28" pos:end="1207:29">rm</name></expr></argument>, <argument pos:start="1207:32" pos:end="1207:35"><expr pos:start="1207:32" pos:end="1207:35"><name pos:start="1207:32" pos:end="1207:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1209:15" pos:end="1213:13">else <block pos:start="1209:20" pos:end="1213:13">{<block_content pos:start="1211:17" pos:end="1211:38">

                <expr_stmt pos:start="1211:17" pos:end="1211:38"><expr pos:start="1211:17" pos:end="1211:37"><name pos:start="1211:17" pos:end="1211:18">rm</name> <operator pos:start="1211:20" pos:end="1211:20">=</operator> <call pos:start="1211:22" pos:end="1211:37"><name pos:start="1211:22" pos:end="1211:31">VFP_SREG_M</name><argument_list pos:start="1211:32" pos:end="1211:37">(<argument pos:start="1211:33" pos:end="1211:36"><expr pos:start="1211:33" pos:end="1211:36"><name pos:start="1211:33" pos:end="1211:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="1217:13" pos:end="1285:13"><if pos:start="1217:13" pos:end="1251:13">if <condition pos:start="1217:16" pos:end="1217:37">(<expr pos:start="1217:17" pos:end="1217:36"><name pos:start="1217:17" pos:end="1217:20">insn</name> <operator pos:start="1217:22" pos:end="1217:22">&amp;</operator> <name pos:start="1217:24" pos:end="1217:36">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="1217:39" pos:end="1251:13">{<block_content pos:start="1221:17" pos:end="1249:17">

                <comment type="block" pos:start="1219:17" pos:end="1219:30">/* vfp-&gt;arm */</comment>

                <if_stmt pos:start="1221:17" pos:end="1249:17"><if pos:start="1221:17" pos:end="1235:17">if <condition pos:start="1221:20" pos:end="1221:23">(<expr pos:start="1221:21" pos:end="1221:22"><name pos:start="1221:21" pos:end="1221:22">dp</name></expr>)</condition> <block pos:start="1221:25" pos:end="1235:17">{<block_content pos:start="1223:21" pos:end="1233:42">

                    <expr_stmt pos:start="1223:21" pos:end="1223:47"><expr pos:start="1223:21" pos:end="1223:46"><call pos:start="1223:21" pos:end="1223:46"><name pos:start="1223:21" pos:end="1223:35">gen_mov_F0_vreg</name><argument_list pos:start="1223:36" pos:end="1223:46">(<argument pos:start="1223:37" pos:end="1223:37"><expr pos:start="1223:37" pos:end="1223:37"><literal type="number" pos:start="1223:37" pos:end="1223:37">0</literal></expr></argument>, <argument pos:start="1223:40" pos:end="1223:45"><expr pos:start="1223:40" pos:end="1223:45"><name pos:start="1223:40" pos:end="1223:41">rm</name> <operator pos:start="1223:43" pos:end="1223:43">*</operator> <literal type="number" pos:start="1223:45" pos:end="1223:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1225:21" pos:end="1225:40"><expr pos:start="1225:21" pos:end="1225:39"><name pos:start="1225:21" pos:end="1225:23">tmp</name> <operator pos:start="1225:25" pos:end="1225:25">=</operator> <call pos:start="1225:27" pos:end="1225:39"><name pos:start="1225:27" pos:end="1225:37">gen_vfp_mrs</name><argument_list pos:start="1225:38" pos:end="1225:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1227:21" pos:end="1227:42"><expr pos:start="1227:21" pos:end="1227:41"><call pos:start="1227:21" pos:end="1227:41"><name pos:start="1227:21" pos:end="1227:29">store_reg</name><argument_list pos:start="1227:30" pos:end="1227:41">(<argument pos:start="1227:31" pos:end="1227:31"><expr pos:start="1227:31" pos:end="1227:31"><name pos:start="1227:31" pos:end="1227:31">s</name></expr></argument>, <argument pos:start="1227:34" pos:end="1227:35"><expr pos:start="1227:34" pos:end="1227:35"><name pos:start="1227:34" pos:end="1227:35">rd</name></expr></argument>, <argument pos:start="1227:38" pos:end="1227:40"><expr pos:start="1227:38" pos:end="1227:40"><name pos:start="1227:38" pos:end="1227:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1229:21" pos:end="1229:51"><expr pos:start="1229:21" pos:end="1229:50"><call pos:start="1229:21" pos:end="1229:50"><name pos:start="1229:21" pos:end="1229:35">gen_mov_F0_vreg</name><argument_list pos:start="1229:36" pos:end="1229:50">(<argument pos:start="1229:37" pos:end="1229:37"><expr pos:start="1229:37" pos:end="1229:37"><literal type="number" pos:start="1229:37" pos:end="1229:37">0</literal></expr></argument>, <argument pos:start="1229:40" pos:end="1229:49"><expr pos:start="1229:40" pos:end="1229:49"><name pos:start="1229:40" pos:end="1229:41">rm</name> <operator pos:start="1229:43" pos:end="1229:43">*</operator> <literal type="number" pos:start="1229:45" pos:end="1229:47">2</literal> <operator pos:start="1229:47" pos:end="1229:47">+</operator> <literal type="number" pos:start="1229:49" pos:end="1229:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1231:21" pos:end="1231:40"><expr pos:start="1231:21" pos:end="1231:39"><name pos:start="1231:21" pos:end="1231:23">tmp</name> <operator pos:start="1231:25" pos:end="1231:25">=</operator> <call pos:start="1231:27" pos:end="1231:39"><name pos:start="1231:27" pos:end="1231:37">gen_vfp_mrs</name><argument_list pos:start="1231:38" pos:end="1231:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1233:21" pos:end="1233:42"><expr pos:start="1233:21" pos:end="1233:41"><call pos:start="1233:21" pos:end="1233:41"><name pos:start="1233:21" pos:end="1233:29">store_reg</name><argument_list pos:start="1233:30" pos:end="1233:41">(<argument pos:start="1233:31" pos:end="1233:31"><expr pos:start="1233:31" pos:end="1233:31"><name pos:start="1233:31" pos:end="1233:31">s</name></expr></argument>, <argument pos:start="1233:34" pos:end="1233:35"><expr pos:start="1233:34" pos:end="1233:35"><name pos:start="1233:34" pos:end="1233:35">rn</name></expr></argument>, <argument pos:start="1233:38" pos:end="1233:40"><expr pos:start="1233:38" pos:end="1233:40"><name pos:start="1233:38" pos:end="1233:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1235:19" pos:end="1249:17">else <block pos:start="1235:24" pos:end="1249:17">{<block_content pos:start="1237:21" pos:end="1247:42">

                    <expr_stmt pos:start="1237:21" pos:end="1237:43"><expr pos:start="1237:21" pos:end="1237:42"><call pos:start="1237:21" pos:end="1237:42"><name pos:start="1237:21" pos:end="1237:35">gen_mov_F0_vreg</name><argument_list pos:start="1237:36" pos:end="1237:42">(<argument pos:start="1237:37" pos:end="1237:37"><expr pos:start="1237:37" pos:end="1237:37"><literal type="number" pos:start="1237:37" pos:end="1237:37">0</literal></expr></argument>, <argument pos:start="1237:40" pos:end="1237:41"><expr pos:start="1237:40" pos:end="1237:41"><name pos:start="1237:40" pos:end="1237:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1239:21" pos:end="1239:40"><expr pos:start="1239:21" pos:end="1239:39"><name pos:start="1239:21" pos:end="1239:23">tmp</name> <operator pos:start="1239:25" pos:end="1239:25">=</operator> <call pos:start="1239:27" pos:end="1239:39"><name pos:start="1239:27" pos:end="1239:37">gen_vfp_mrs</name><argument_list pos:start="1239:38" pos:end="1239:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1241:21" pos:end="1241:42"><expr pos:start="1241:21" pos:end="1241:41"><call pos:start="1241:21" pos:end="1241:41"><name pos:start="1241:21" pos:end="1241:29">store_reg</name><argument_list pos:start="1241:30" pos:end="1241:41">(<argument pos:start="1241:31" pos:end="1241:31"><expr pos:start="1241:31" pos:end="1241:31"><name pos:start="1241:31" pos:end="1241:31">s</name></expr></argument>, <argument pos:start="1241:34" pos:end="1241:35"><expr pos:start="1241:34" pos:end="1241:35"><name pos:start="1241:34" pos:end="1241:35">rd</name></expr></argument>, <argument pos:start="1241:38" pos:end="1241:40"><expr pos:start="1241:38" pos:end="1241:40"><name pos:start="1241:38" pos:end="1241:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1243:21" pos:end="1243:47"><expr pos:start="1243:21" pos:end="1243:46"><call pos:start="1243:21" pos:end="1243:46"><name pos:start="1243:21" pos:end="1243:35">gen_mov_F0_vreg</name><argument_list pos:start="1243:36" pos:end="1243:46">(<argument pos:start="1243:37" pos:end="1243:37"><expr pos:start="1243:37" pos:end="1243:37"><literal type="number" pos:start="1243:37" pos:end="1243:37">0</literal></expr></argument>, <argument pos:start="1243:40" pos:end="1243:45"><expr pos:start="1243:40" pos:end="1243:45"><name pos:start="1243:40" pos:end="1243:41">rm</name> <operator pos:start="1243:43" pos:end="1243:43">+</operator> <literal type="number" pos:start="1243:45" pos:end="1243:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1245:21" pos:end="1245:40"><expr pos:start="1245:21" pos:end="1245:39"><name pos:start="1245:21" pos:end="1245:23">tmp</name> <operator pos:start="1245:25" pos:end="1245:25">=</operator> <call pos:start="1245:27" pos:end="1245:39"><name pos:start="1245:27" pos:end="1245:37">gen_vfp_mrs</name><argument_list pos:start="1245:38" pos:end="1245:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1247:21" pos:end="1247:42"><expr pos:start="1247:21" pos:end="1247:41"><call pos:start="1247:21" pos:end="1247:41"><name pos:start="1247:21" pos:end="1247:29">store_reg</name><argument_list pos:start="1247:30" pos:end="1247:41">(<argument pos:start="1247:31" pos:end="1247:31"><expr pos:start="1247:31" pos:end="1247:31"><name pos:start="1247:31" pos:end="1247:31">s</name></expr></argument>, <argument pos:start="1247:34" pos:end="1247:35"><expr pos:start="1247:34" pos:end="1247:35"><name pos:start="1247:34" pos:end="1247:35">rn</name></expr></argument>, <argument pos:start="1247:38" pos:end="1247:40"><expr pos:start="1247:38" pos:end="1247:40"><name pos:start="1247:38" pos:end="1247:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1251:15" pos:end="1285:13">else <block pos:start="1251:20" pos:end="1285:13">{<block_content pos:start="1255:17" pos:end="1283:17">

                <comment type="block" pos:start="1253:17" pos:end="1253:30">/* arm-&gt;vfp */</comment>

                <if_stmt pos:start="1255:17" pos:end="1283:17"><if pos:start="1255:17" pos:end="1269:17">if <condition pos:start="1255:20" pos:end="1255:23">(<expr pos:start="1255:21" pos:end="1255:22"><name pos:start="1255:21" pos:end="1255:22">dp</name></expr>)</condition> <block pos:start="1255:25" pos:end="1269:17">{<block_content pos:start="1257:21" pos:end="1267:51">

                    <expr_stmt pos:start="1257:21" pos:end="1257:42"><expr pos:start="1257:21" pos:end="1257:41"><name pos:start="1257:21" pos:end="1257:23">tmp</name> <operator pos:start="1257:25" pos:end="1257:25">=</operator> <call pos:start="1257:27" pos:end="1257:41"><name pos:start="1257:27" pos:end="1257:34">load_reg</name><argument_list pos:start="1257:35" pos:end="1257:41">(<argument pos:start="1257:36" pos:end="1257:36"><expr pos:start="1257:36" pos:end="1257:36"><name pos:start="1257:36" pos:end="1257:36">s</name></expr></argument>, <argument pos:start="1257:39" pos:end="1257:40"><expr pos:start="1257:39" pos:end="1257:40"><name pos:start="1257:39" pos:end="1257:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1259:21" pos:end="1259:37"><expr pos:start="1259:21" pos:end="1259:36"><call pos:start="1259:21" pos:end="1259:36"><name pos:start="1259:21" pos:end="1259:31">gen_vfp_msr</name><argument_list pos:start="1259:32" pos:end="1259:36">(<argument pos:start="1259:33" pos:end="1259:35"><expr pos:start="1259:33" pos:end="1259:35"><name pos:start="1259:33" pos:end="1259:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1261:21" pos:end="1261:47"><expr pos:start="1261:21" pos:end="1261:46"><call pos:start="1261:21" pos:end="1261:46"><name pos:start="1261:21" pos:end="1261:35">gen_mov_vreg_F0</name><argument_list pos:start="1261:36" pos:end="1261:46">(<argument pos:start="1261:37" pos:end="1261:37"><expr pos:start="1261:37" pos:end="1261:37"><literal type="number" pos:start="1261:37" pos:end="1261:37">0</literal></expr></argument>, <argument pos:start="1261:40" pos:end="1261:45"><expr pos:start="1261:40" pos:end="1261:45"><name pos:start="1261:40" pos:end="1261:41">rm</name> <operator pos:start="1261:43" pos:end="1261:43">*</operator> <literal type="number" pos:start="1261:45" pos:end="1261:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1263:21" pos:end="1263:42"><expr pos:start="1263:21" pos:end="1263:41"><name pos:start="1263:21" pos:end="1263:23">tmp</name> <operator pos:start="1263:25" pos:end="1263:25">=</operator> <call pos:start="1263:27" pos:end="1263:41"><name pos:start="1263:27" pos:end="1263:34">load_reg</name><argument_list pos:start="1263:35" pos:end="1263:41">(<argument pos:start="1263:36" pos:end="1263:36"><expr pos:start="1263:36" pos:end="1263:36"><name pos:start="1263:36" pos:end="1263:36">s</name></expr></argument>, <argument pos:start="1263:39" pos:end="1263:40"><expr pos:start="1263:39" pos:end="1263:40"><name pos:start="1263:39" pos:end="1263:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1265:21" pos:end="1265:37"><expr pos:start="1265:21" pos:end="1265:36"><call pos:start="1265:21" pos:end="1265:36"><name pos:start="1265:21" pos:end="1265:31">gen_vfp_msr</name><argument_list pos:start="1265:32" pos:end="1265:36">(<argument pos:start="1265:33" pos:end="1265:35"><expr pos:start="1265:33" pos:end="1265:35"><name pos:start="1265:33" pos:end="1265:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1267:21" pos:end="1267:51"><expr pos:start="1267:21" pos:end="1267:50"><call pos:start="1267:21" pos:end="1267:50"><name pos:start="1267:21" pos:end="1267:35">gen_mov_vreg_F0</name><argument_list pos:start="1267:36" pos:end="1267:50">(<argument pos:start="1267:37" pos:end="1267:37"><expr pos:start="1267:37" pos:end="1267:37"><literal type="number" pos:start="1267:37" pos:end="1267:37">0</literal></expr></argument>, <argument pos:start="1267:40" pos:end="1267:49"><expr pos:start="1267:40" pos:end="1267:49"><name pos:start="1267:40" pos:end="1267:41">rm</name> <operator pos:start="1267:43" pos:end="1267:43">*</operator> <literal type="number" pos:start="1267:45" pos:end="1267:47">2</literal> <operator pos:start="1267:47" pos:end="1267:47">+</operator> <literal type="number" pos:start="1267:49" pos:end="1267:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1269:19" pos:end="1283:17">else <block pos:start="1269:24" pos:end="1283:17">{<block_content pos:start="1271:21" pos:end="1281:47">

                    <expr_stmt pos:start="1271:21" pos:end="1271:42"><expr pos:start="1271:21" pos:end="1271:41"><name pos:start="1271:21" pos:end="1271:23">tmp</name> <operator pos:start="1271:25" pos:end="1271:25">=</operator> <call pos:start="1271:27" pos:end="1271:41"><name pos:start="1271:27" pos:end="1271:34">load_reg</name><argument_list pos:start="1271:35" pos:end="1271:41">(<argument pos:start="1271:36" pos:end="1271:36"><expr pos:start="1271:36" pos:end="1271:36"><name pos:start="1271:36" pos:end="1271:36">s</name></expr></argument>, <argument pos:start="1271:39" pos:end="1271:40"><expr pos:start="1271:39" pos:end="1271:40"><name pos:start="1271:39" pos:end="1271:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1273:21" pos:end="1273:37"><expr pos:start="1273:21" pos:end="1273:36"><call pos:start="1273:21" pos:end="1273:36"><name pos:start="1273:21" pos:end="1273:31">gen_vfp_msr</name><argument_list pos:start="1273:32" pos:end="1273:36">(<argument pos:start="1273:33" pos:end="1273:35"><expr pos:start="1273:33" pos:end="1273:35"><name pos:start="1273:33" pos:end="1273:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1275:21" pos:end="1275:43"><expr pos:start="1275:21" pos:end="1275:42"><call pos:start="1275:21" pos:end="1275:42"><name pos:start="1275:21" pos:end="1275:35">gen_mov_vreg_F0</name><argument_list pos:start="1275:36" pos:end="1275:42">(<argument pos:start="1275:37" pos:end="1275:37"><expr pos:start="1275:37" pos:end="1275:37"><literal type="number" pos:start="1275:37" pos:end="1275:37">0</literal></expr></argument>, <argument pos:start="1275:40" pos:end="1275:41"><expr pos:start="1275:40" pos:end="1275:41"><name pos:start="1275:40" pos:end="1275:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1277:21" pos:end="1277:42"><expr pos:start="1277:21" pos:end="1277:41"><name pos:start="1277:21" pos:end="1277:23">tmp</name> <operator pos:start="1277:25" pos:end="1277:25">=</operator> <call pos:start="1277:27" pos:end="1277:41"><name pos:start="1277:27" pos:end="1277:34">load_reg</name><argument_list pos:start="1277:35" pos:end="1277:41">(<argument pos:start="1277:36" pos:end="1277:36"><expr pos:start="1277:36" pos:end="1277:36"><name pos:start="1277:36" pos:end="1277:36">s</name></expr></argument>, <argument pos:start="1277:39" pos:end="1277:40"><expr pos:start="1277:39" pos:end="1277:40"><name pos:start="1277:39" pos:end="1277:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1279:21" pos:end="1279:37"><expr pos:start="1279:21" pos:end="1279:36"><call pos:start="1279:21" pos:end="1279:36"><name pos:start="1279:21" pos:end="1279:31">gen_vfp_msr</name><argument_list pos:start="1279:32" pos:end="1279:36">(<argument pos:start="1279:33" pos:end="1279:35"><expr pos:start="1279:33" pos:end="1279:35"><name pos:start="1279:33" pos:end="1279:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1281:21" pos:end="1281:47"><expr pos:start="1281:21" pos:end="1281:46"><call pos:start="1281:21" pos:end="1281:46"><name pos:start="1281:21" pos:end="1281:35">gen_mov_vreg_F0</name><argument_list pos:start="1281:36" pos:end="1281:46">(<argument pos:start="1281:37" pos:end="1281:37"><expr pos:start="1281:37" pos:end="1281:37"><literal type="number" pos:start="1281:37" pos:end="1281:37">0</literal></expr></argument>, <argument pos:start="1281:40" pos:end="1281:45"><expr pos:start="1281:40" pos:end="1281:45"><name pos:start="1281:40" pos:end="1281:41">rm</name> <operator pos:start="1281:43" pos:end="1281:43">+</operator> <literal type="number" pos:start="1281:45" pos:end="1281:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1287:11" pos:end="1473:9">else <block pos:start="1287:16" pos:end="1473:9">{<block_content pos:start="1291:13" pos:end="1471:13">

            <comment type="block" pos:start="1289:13" pos:end="1289:28">/* Load/store */</comment>

            <expr_stmt pos:start="1291:13" pos:end="1291:36"><expr pos:start="1291:13" pos:end="1291:35"><name pos:start="1291:13" pos:end="1291:14">rn</name> <operator pos:start="1291:16" pos:end="1291:16">=</operator> <operator pos:start="1291:18" pos:end="1291:18">(</operator><name pos:start="1291:19" pos:end="1291:22">insn</name> <operator pos:start="1291:24" pos:end="1291:25">&gt;&gt;</operator> <literal type="number" pos:start="1291:27" pos:end="1291:28">16</literal><operator pos:start="1291:29" pos:end="1291:29">)</operator> <operator pos:start="1291:31" pos:end="1291:31">&amp;</operator> <literal type="number" pos:start="1291:33" pos:end="1291:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1293:13" pos:end="1299:38"><if pos:start="1293:13" pos:end="1295:37">if <condition pos:start="1293:16" pos:end="1293:19">(<expr pos:start="1293:17" pos:end="1293:18"><name pos:start="1293:17" pos:end="1293:18">dp</name></expr>)</condition><block type="pseudo" pos:start="1295:17" pos:end="1295:37"><block_content pos:start="1295:17" pos:end="1295:37">

                <expr_stmt pos:start="1295:17" pos:end="1295:37"><expr pos:start="1295:17" pos:end="1295:36"><call pos:start="1295:17" pos:end="1295:36"><name pos:start="1295:17" pos:end="1295:26">VFP_DREG_D</name><argument_list pos:start="1295:27" pos:end="1295:36">(<argument pos:start="1295:28" pos:end="1295:29"><expr pos:start="1295:28" pos:end="1295:29"><name pos:start="1295:28" pos:end="1295:29">rd</name></expr></argument>, <argument pos:start="1295:32" pos:end="1295:35"><expr pos:start="1295:32" pos:end="1295:35"><name pos:start="1295:32" pos:end="1295:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1297:13" pos:end="1299:38">else<block type="pseudo" pos:start="1299:17" pos:end="1299:38"><block_content pos:start="1299:17" pos:end="1299:38">

                <expr_stmt pos:start="1299:17" pos:end="1299:38"><expr pos:start="1299:17" pos:end="1299:37"><name pos:start="1299:17" pos:end="1299:18">rd</name> <operator pos:start="1299:20" pos:end="1299:20">=</operator> <call pos:start="1299:22" pos:end="1299:37"><name pos:start="1299:22" pos:end="1299:31">VFP_SREG_D</name><argument_list pos:start="1299:32" pos:end="1299:37">(<argument pos:start="1299:33" pos:end="1299:36"><expr pos:start="1299:33" pos:end="1299:36"><name pos:start="1299:33" pos:end="1299:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="1301:13" pos:end="1471:13"><if pos:start="1301:13" pos:end="1343:13">if <condition pos:start="1301:16" pos:end="1301:50">(<expr pos:start="1301:17" pos:end="1301:49"><operator pos:start="1301:17" pos:end="1301:17">(</operator><name pos:start="1301:18" pos:end="1301:21">insn</name> <operator pos:start="1301:23" pos:end="1301:23">&amp;</operator> <literal type="number" pos:start="1301:25" pos:end="1301:34">0x01200000</literal><operator pos:start="1301:35" pos:end="1301:35">)</operator> <operator pos:start="1301:37" pos:end="1301:38">==</operator> <literal type="number" pos:start="1301:40" pos:end="1301:49">0x01000000</literal></expr>)</condition> <block pos:start="1301:52" pos:end="1343:13">{<block_content pos:start="1305:17" pos:end="1341:40">

                <comment type="block" pos:start="1303:17" pos:end="1303:39">/* Single load/store */</comment>

                <expr_stmt pos:start="1305:17" pos:end="1305:44"><expr pos:start="1305:17" pos:end="1305:43"><name pos:start="1305:17" pos:end="1305:22">offset</name> <operator pos:start="1305:24" pos:end="1305:24">=</operator> <operator pos:start="1305:26" pos:end="1305:26">(</operator><name pos:start="1305:27" pos:end="1305:30">insn</name> <operator pos:start="1305:32" pos:end="1305:32">&amp;</operator> <literal type="number" pos:start="1305:34" pos:end="1305:37">0xff</literal><operator pos:start="1305:38" pos:end="1305:38">)</operator> <operator pos:start="1305:40" pos:end="1305:41">&lt;&lt;</operator> <literal type="number" pos:start="1305:43" pos:end="1305:43">2</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1307:17" pos:end="1309:37"><if pos:start="1307:17" pos:end="1309:37">if <condition pos:start="1307:20" pos:end="1307:44">(<expr pos:start="1307:21" pos:end="1307:43"><operator pos:start="1307:21" pos:end="1307:21">(</operator><name pos:start="1307:22" pos:end="1307:25">insn</name> <operator pos:start="1307:27" pos:end="1307:27">&amp;</operator> <operator pos:start="1307:29" pos:end="1307:29">(</operator><literal type="number" pos:start="1307:30" pos:end="1307:30">1</literal> <operator pos:start="1307:32" pos:end="1307:33">&lt;&lt;</operator> <literal type="number" pos:start="1307:35" pos:end="1307:36">23</literal><operator pos:start="1307:37" pos:end="1307:37">)</operator><operator pos:start="1307:38" pos:end="1307:38">)</operator> <operator pos:start="1307:40" pos:end="1307:41">==</operator> <literal type="number" pos:start="1307:43" pos:end="1307:43">0</literal></expr>)</condition><block type="pseudo" pos:start="1309:21" pos:end="1309:37"><block_content pos:start="1309:21" pos:end="1309:37">

                    <expr_stmt pos:start="1309:21" pos:end="1309:37"><expr pos:start="1309:21" pos:end="1309:36"><name pos:start="1309:21" pos:end="1309:26">offset</name> <operator pos:start="1309:28" pos:end="1309:28">=</operator> <operator pos:start="1309:30" pos:end="1309:30">-</operator><name pos:start="1309:31" pos:end="1309:36">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="1311:17" pos:end="1323:17"><if pos:start="1311:17" pos:end="1319:17">if <condition pos:start="1311:20" pos:end="1311:41">(<expr pos:start="1311:21" pos:end="1311:40"><name pos:start="1311:21" pos:end="1311:28"><name pos:start="1311:21" pos:end="1311:21">s</name><operator pos:start="1311:22" pos:end="1311:23">-&gt;</operator><name pos:start="1311:24" pos:end="1311:28">thumb</name></name> <operator pos:start="1311:30" pos:end="1311:31">&amp;&amp;</operator> <name pos:start="1311:33" pos:end="1311:34">rn</name> <operator pos:start="1311:36" pos:end="1311:37">==</operator> <literal type="number" pos:start="1311:39" pos:end="1311:40">15</literal></expr>)</condition> <block pos:start="1311:43" pos:end="1319:17">{<block_content pos:start="1315:21" pos:end="1317:55">

                    <comment type="block" pos:start="1313:21" pos:end="1313:56">/* This is actually UNPREDICTABLE */</comment>

                    <expr_stmt pos:start="1315:21" pos:end="1315:46"><expr pos:start="1315:21" pos:end="1315:45"><name pos:start="1315:21" pos:end="1315:24">addr</name> <operator pos:start="1315:26" pos:end="1315:26">=</operator> <call pos:start="1315:28" pos:end="1315:45"><name pos:start="1315:28" pos:end="1315:43">tcg_temp_new_i32</name><argument_list pos:start="1315:44" pos:end="1315:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1317:21" pos:end="1317:55"><expr pos:start="1317:21" pos:end="1317:54"><call pos:start="1317:21" pos:end="1317:54"><name pos:start="1317:21" pos:end="1317:36">tcg_gen_movi_i32</name><argument_list pos:start="1317:37" pos:end="1317:54">(<argument pos:start="1317:38" pos:end="1317:41"><expr pos:start="1317:38" pos:end="1317:41"><name pos:start="1317:38" pos:end="1317:41">addr</name></expr></argument>, <argument pos:start="1317:44" pos:end="1317:53"><expr pos:start="1317:44" pos:end="1317:53"><name pos:start="1317:44" pos:end="1317:48"><name pos:start="1317:44" pos:end="1317:44">s</name><operator pos:start="1317:45" pos:end="1317:46">-&gt;</operator><name pos:start="1317:47" pos:end="1317:48">pc</name></name> <operator pos:start="1317:50" pos:end="1317:50">&amp;</operator> <operator pos:start="1317:52" pos:end="1317:52">~</operator><literal type="number" pos:start="1317:53" pos:end="1317:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1319:19" pos:end="1323:17">else <block pos:start="1319:24" pos:end="1323:17">{<block_content pos:start="1321:21" pos:end="1321:43">

                    <expr_stmt pos:start="1321:21" pos:end="1321:43"><expr pos:start="1321:21" pos:end="1321:42"><name pos:start="1321:21" pos:end="1321:24">addr</name> <operator pos:start="1321:26" pos:end="1321:26">=</operator> <call pos:start="1321:28" pos:end="1321:42"><name pos:start="1321:28" pos:end="1321:35">load_reg</name><argument_list pos:start="1321:36" pos:end="1321:42">(<argument pos:start="1321:37" pos:end="1321:37"><expr pos:start="1321:37" pos:end="1321:37"><name pos:start="1321:37" pos:end="1321:37">s</name></expr></argument>, <argument pos:start="1321:40" pos:end="1321:41"><expr pos:start="1321:40" pos:end="1321:41"><name pos:start="1321:40" pos:end="1321:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1325:17" pos:end="1325:53"><expr pos:start="1325:17" pos:end="1325:52"><call pos:start="1325:17" pos:end="1325:52"><name pos:start="1325:17" pos:end="1325:32">tcg_gen_addi_i32</name><argument_list pos:start="1325:33" pos:end="1325:52">(<argument pos:start="1325:34" pos:end="1325:37"><expr pos:start="1325:34" pos:end="1325:37"><name pos:start="1325:34" pos:end="1325:37">addr</name></expr></argument>, <argument pos:start="1325:40" pos:end="1325:43"><expr pos:start="1325:40" pos:end="1325:43"><name pos:start="1325:40" pos:end="1325:43">addr</name></expr></argument>, <argument pos:start="1325:46" pos:end="1325:51"><expr pos:start="1325:46" pos:end="1325:51"><name pos:start="1325:46" pos:end="1325:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1327:17" pos:end="1339:17"><if pos:start="1327:17" pos:end="1333:17">if <condition pos:start="1327:20" pos:end="1327:37">(<expr pos:start="1327:21" pos:end="1327:36"><name pos:start="1327:21" pos:end="1327:24">insn</name> <operator pos:start="1327:26" pos:end="1327:26">&amp;</operator> <operator pos:start="1327:28" pos:end="1327:28">(</operator><literal type="number" pos:start="1327:29" pos:end="1327:29">1</literal> <operator pos:start="1327:31" pos:end="1327:32">&lt;&lt;</operator> <literal type="number" pos:start="1327:34" pos:end="1327:35">20</literal><operator pos:start="1327:36" pos:end="1327:36">)</operator></expr>)</condition> <block pos:start="1327:39" pos:end="1333:17">{<block_content pos:start="1329:21" pos:end="1331:44">

                    <expr_stmt pos:start="1329:21" pos:end="1329:44"><expr pos:start="1329:21" pos:end="1329:43"><call pos:start="1329:21" pos:end="1329:43"><name pos:start="1329:21" pos:end="1329:30">gen_vfp_ld</name><argument_list pos:start="1329:31" pos:end="1329:43">(<argument pos:start="1329:32" pos:end="1329:32"><expr pos:start="1329:32" pos:end="1329:32"><name pos:start="1329:32" pos:end="1329:32">s</name></expr></argument>, <argument pos:start="1329:35" pos:end="1329:36"><expr pos:start="1329:35" pos:end="1329:36"><name pos:start="1329:35" pos:end="1329:36">dp</name></expr></argument>, <argument pos:start="1329:39" pos:end="1329:42"><expr pos:start="1329:39" pos:end="1329:42"><name pos:start="1329:39" pos:end="1329:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1331:21" pos:end="1331:44"><expr pos:start="1331:21" pos:end="1331:43"><call pos:start="1331:21" pos:end="1331:43"><name pos:start="1331:21" pos:end="1331:35">gen_mov_vreg_F0</name><argument_list pos:start="1331:36" pos:end="1331:43">(<argument pos:start="1331:37" pos:end="1331:38"><expr pos:start="1331:37" pos:end="1331:38"><name pos:start="1331:37" pos:end="1331:38">dp</name></expr></argument>, <argument pos:start="1331:41" pos:end="1331:42"><expr pos:start="1331:41" pos:end="1331:42"><name pos:start="1331:41" pos:end="1331:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1333:19" pos:end="1339:17">else <block pos:start="1333:24" pos:end="1339:17">{<block_content pos:start="1335:21" pos:end="1337:44">

                    <expr_stmt pos:start="1335:21" pos:end="1335:44"><expr pos:start="1335:21" pos:end="1335:43"><call pos:start="1335:21" pos:end="1335:43"><name pos:start="1335:21" pos:end="1335:35">gen_mov_F0_vreg</name><argument_list pos:start="1335:36" pos:end="1335:43">(<argument pos:start="1335:37" pos:end="1335:38"><expr pos:start="1335:37" pos:end="1335:38"><name pos:start="1335:37" pos:end="1335:38">dp</name></expr></argument>, <argument pos:start="1335:41" pos:end="1335:42"><expr pos:start="1335:41" pos:end="1335:42"><name pos:start="1335:41" pos:end="1335:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1337:21" pos:end="1337:44"><expr pos:start="1337:21" pos:end="1337:43"><call pos:start="1337:21" pos:end="1337:43"><name pos:start="1337:21" pos:end="1337:30">gen_vfp_st</name><argument_list pos:start="1337:31" pos:end="1337:43">(<argument pos:start="1337:32" pos:end="1337:32"><expr pos:start="1337:32" pos:end="1337:32"><name pos:start="1337:32" pos:end="1337:32">s</name></expr></argument>, <argument pos:start="1337:35" pos:end="1337:36"><expr pos:start="1337:35" pos:end="1337:36"><name pos:start="1337:35" pos:end="1337:36">dp</name></expr></argument>, <argument pos:start="1337:39" pos:end="1337:42"><expr pos:start="1337:39" pos:end="1337:42"><name pos:start="1337:39" pos:end="1337:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1341:17" pos:end="1341:40"><expr pos:start="1341:17" pos:end="1341:39"><call pos:start="1341:17" pos:end="1341:39"><name pos:start="1341:17" pos:end="1341:33">tcg_temp_free_i32</name><argument_list pos:start="1341:34" pos:end="1341:39">(<argument pos:start="1341:35" pos:end="1341:38"><expr pos:start="1341:35" pos:end="1341:38"><name pos:start="1341:35" pos:end="1341:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1343:15" pos:end="1471:13">else <block pos:start="1343:20" pos:end="1471:13">{<block_content pos:start="1347:17" pos:end="1469:17">

                <comment type="block" pos:start="1345:17" pos:end="1345:41">/* load/store multiple */</comment>

                <decl_stmt pos:start="1347:17" pos:end="1347:41"><decl pos:start="1347:17" pos:end="1347:40"><type pos:start="1347:17" pos:end="1347:19"><name pos:start="1347:17" pos:end="1347:19">int</name></type> <name pos:start="1347:21" pos:end="1347:21">w</name> <init pos:start="1347:23" pos:end="1347:40">= <expr pos:start="1347:25" pos:end="1347:40"><name pos:start="1347:25" pos:end="1347:28">insn</name> <operator pos:start="1347:30" pos:end="1347:30">&amp;</operator> <operator pos:start="1347:32" pos:end="1347:32">(</operator><literal type="number" pos:start="1347:33" pos:end="1347:33">1</literal> <operator pos:start="1347:35" pos:end="1347:36">&lt;&lt;</operator> <literal type="number" pos:start="1347:38" pos:end="1347:39">21</literal><operator pos:start="1347:40" pos:end="1347:40">)</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1349:17" pos:end="1355:36"><if pos:start="1349:17" pos:end="1351:43">if <condition pos:start="1349:20" pos:end="1349:23">(<expr pos:start="1349:21" pos:end="1349:22"><name pos:start="1349:21" pos:end="1349:22">dp</name></expr>)</condition><block type="pseudo" pos:start="1351:21" pos:end="1351:43"><block_content pos:start="1351:21" pos:end="1351:43">

                    <expr_stmt pos:start="1351:21" pos:end="1351:43"><expr pos:start="1351:21" pos:end="1351:42"><name pos:start="1351:21" pos:end="1351:21">n</name> <operator pos:start="1351:23" pos:end="1351:23">=</operator> <operator pos:start="1351:25" pos:end="1351:25">(</operator><name pos:start="1351:26" pos:end="1351:29">insn</name> <operator pos:start="1351:31" pos:end="1351:32">&gt;&gt;</operator> <literal type="number" pos:start="1351:34" pos:end="1351:34">1</literal><operator pos:start="1351:35" pos:end="1351:35">)</operator> <operator pos:start="1351:37" pos:end="1351:37">&amp;</operator> <literal type="number" pos:start="1351:39" pos:end="1351:42">0x7f</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1353:17" pos:end="1355:36">else<block type="pseudo" pos:start="1355:21" pos:end="1355:36"><block_content pos:start="1355:21" pos:end="1355:36">

                    <expr_stmt pos:start="1355:21" pos:end="1355:36"><expr pos:start="1355:21" pos:end="1355:35"><name pos:start="1355:21" pos:end="1355:21">n</name> <operator pos:start="1355:23" pos:end="1355:23">=</operator> <name pos:start="1355:25" pos:end="1355:28">insn</name> <operator pos:start="1355:30" pos:end="1355:30">&amp;</operator> <literal type="number" pos:start="1355:32" pos:end="1355:35">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <if_stmt pos:start="1359:17" pos:end="1365:17"><if pos:start="1359:17" pos:end="1365:17">if <condition pos:start="1359:20" pos:end="1359:62">(<expr pos:start="1359:21" pos:end="1359:61"><name pos:start="1359:21" pos:end="1359:21">w</name> <operator pos:start="1359:23" pos:end="1359:24">&amp;&amp;</operator> <operator pos:start="1359:26" pos:end="1359:26">!</operator><operator pos:start="1359:27" pos:end="1359:27">(</operator><operator pos:start="1359:28" pos:end="1359:28">(</operator><operator pos:start="1359:29" pos:end="1359:29">(</operator><name pos:start="1359:30" pos:end="1359:33">insn</name> <operator pos:start="1359:35" pos:end="1359:36">&gt;&gt;</operator> <literal type="number" pos:start="1359:38" pos:end="1359:39">23</literal><operator pos:start="1359:40" pos:end="1359:40">)</operator> <operator pos:start="1359:42" pos:end="1359:42">^</operator> <operator pos:start="1359:44" pos:end="1359:44">(</operator><name pos:start="1359:45" pos:end="1359:48">insn</name> <operator pos:start="1359:50" pos:end="1359:51">&gt;&gt;</operator> <literal type="number" pos:start="1359:53" pos:end="1359:54">24</literal><operator pos:start="1359:55" pos:end="1359:55">)</operator><operator pos:start="1359:56" pos:end="1359:56">)</operator> <operator pos:start="1359:58" pos:end="1359:58">&amp;</operator> <literal type="number" pos:start="1359:60" pos:end="1359:60">1</literal><operator pos:start="1359:61" pos:end="1359:61">)</operator></expr>)</condition> <block pos:start="1359:64" pos:end="1365:17">{<block_content pos:start="1363:21" pos:end="1363:29">

                    <comment type="block" pos:start="1361:21" pos:end="1361:51">/* P == U , W == 1  =&gt; UNDEF */</comment>

                    <return pos:start="1363:21" pos:end="1363:29">return <expr pos:start="1363:28" pos:end="1363:28"><literal type="number" pos:start="1363:28" pos:end="1363:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1367:17" pos:end="1377:17"><if pos:start="1367:17" pos:end="1377:17">if <condition pos:start="1367:20" pos:end="1367:62">(<expr pos:start="1367:21" pos:end="1367:61"><name pos:start="1367:21" pos:end="1367:21">n</name> <operator pos:start="1367:23" pos:end="1367:24">==</operator> <literal type="number" pos:start="1367:26" pos:end="1367:26">0</literal> <operator pos:start="1367:28" pos:end="1367:29">||</operator> <operator pos:start="1367:31" pos:end="1367:31">(</operator><name pos:start="1367:32" pos:end="1367:33">rd</name> <operator pos:start="1367:35" pos:end="1367:35">+</operator> <name pos:start="1367:37" pos:end="1367:37">n</name><operator pos:start="1367:38" pos:end="1367:38">)</operator> <operator pos:start="1367:40" pos:end="1367:40">&gt;</operator> <literal type="number" pos:start="1367:42" pos:end="1367:43">32</literal> <operator pos:start="1367:45" pos:end="1367:46">||</operator> <operator pos:start="1367:48" pos:end="1367:48">(</operator><name pos:start="1367:49" pos:end="1367:50">dp</name> <operator pos:start="1367:52" pos:end="1367:53">&amp;&amp;</operator> <name pos:start="1367:55" pos:end="1367:55">n</name> <operator pos:start="1367:57" pos:end="1367:57">&gt;</operator> <literal type="number" pos:start="1367:59" pos:end="1367:60">16</literal><operator pos:start="1367:61" pos:end="1367:61">)</operator></expr>)</condition> <block pos:start="1367:64" pos:end="1377:17">{<block_content pos:start="1375:21" pos:end="1375:29">

                    <comment type="block" pos:start="1369:21" pos:end="1373:23">/* UNPREDICTABLE cases for bad immediates: we choose to

                     * UNDEF to avoid generating huge numbers of TCG ops

                     */</comment>

                    <return pos:start="1375:21" pos:end="1375:29">return <expr pos:start="1375:28" pos:end="1375:28"><literal type="number" pos:start="1375:28" pos:end="1375:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1379:17" pos:end="1385:17"><if pos:start="1379:17" pos:end="1385:17">if <condition pos:start="1379:20" pos:end="1379:34">(<expr pos:start="1379:21" pos:end="1379:33"><name pos:start="1379:21" pos:end="1379:22">rn</name> <operator pos:start="1379:24" pos:end="1379:25">==</operator> <literal type="number" pos:start="1379:27" pos:end="1379:28">15</literal> <operator pos:start="1379:30" pos:end="1379:31">&amp;&amp;</operator> <name pos:start="1379:33" pos:end="1379:33">w</name></expr>)</condition> <block pos:start="1379:36" pos:end="1385:17">{<block_content pos:start="1383:21" pos:end="1383:29">

                    <comment type="block" pos:start="1381:21" pos:end="1381:78">/* writeback to PC is UNPREDICTABLE, we choose to UNDEF */</comment>

                    <return pos:start="1383:21" pos:end="1383:29">return <expr pos:start="1383:28" pos:end="1383:28"><literal type="number" pos:start="1383:28" pos:end="1383:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="1389:17" pos:end="1401:17"><if pos:start="1389:17" pos:end="1397:17">if <condition pos:start="1389:20" pos:end="1389:41">(<expr pos:start="1389:21" pos:end="1389:40"><name pos:start="1389:21" pos:end="1389:28"><name pos:start="1389:21" pos:end="1389:21">s</name><operator pos:start="1389:22" pos:end="1389:23">-&gt;</operator><name pos:start="1389:24" pos:end="1389:28">thumb</name></name> <operator pos:start="1389:30" pos:end="1389:31">&amp;&amp;</operator> <name pos:start="1389:33" pos:end="1389:34">rn</name> <operator pos:start="1389:36" pos:end="1389:37">==</operator> <literal type="number" pos:start="1389:39" pos:end="1389:40">15</literal></expr>)</condition> <block pos:start="1389:43" pos:end="1397:17">{<block_content pos:start="1393:21" pos:end="1395:55">

                    <comment type="block" pos:start="1391:21" pos:end="1391:56">/* This is actually UNPREDICTABLE */</comment>

                    <expr_stmt pos:start="1393:21" pos:end="1393:46"><expr pos:start="1393:21" pos:end="1393:45"><name pos:start="1393:21" pos:end="1393:24">addr</name> <operator pos:start="1393:26" pos:end="1393:26">=</operator> <call pos:start="1393:28" pos:end="1393:45"><name pos:start="1393:28" pos:end="1393:43">tcg_temp_new_i32</name><argument_list pos:start="1393:44" pos:end="1393:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1395:21" pos:end="1395:55"><expr pos:start="1395:21" pos:end="1395:54"><call pos:start="1395:21" pos:end="1395:54"><name pos:start="1395:21" pos:end="1395:36">tcg_gen_movi_i32</name><argument_list pos:start="1395:37" pos:end="1395:54">(<argument pos:start="1395:38" pos:end="1395:41"><expr pos:start="1395:38" pos:end="1395:41"><name pos:start="1395:38" pos:end="1395:41">addr</name></expr></argument>, <argument pos:start="1395:44" pos:end="1395:53"><expr pos:start="1395:44" pos:end="1395:53"><name pos:start="1395:44" pos:end="1395:48"><name pos:start="1395:44" pos:end="1395:44">s</name><operator pos:start="1395:45" pos:end="1395:46">-&gt;</operator><name pos:start="1395:47" pos:end="1395:48">pc</name></name> <operator pos:start="1395:50" pos:end="1395:50">&amp;</operator> <operator pos:start="1395:52" pos:end="1395:52">~</operator><literal type="number" pos:start="1395:53" pos:end="1395:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1397:19" pos:end="1401:17">else <block pos:start="1397:24" pos:end="1401:17">{<block_content pos:start="1399:21" pos:end="1399:43">

                    <expr_stmt pos:start="1399:21" pos:end="1399:43"><expr pos:start="1399:21" pos:end="1399:42"><name pos:start="1399:21" pos:end="1399:24">addr</name> <operator pos:start="1399:26" pos:end="1399:26">=</operator> <call pos:start="1399:28" pos:end="1399:42"><name pos:start="1399:28" pos:end="1399:35">load_reg</name><argument_list pos:start="1399:36" pos:end="1399:42">(<argument pos:start="1399:37" pos:end="1399:37"><expr pos:start="1399:37" pos:end="1399:37"><name pos:start="1399:37" pos:end="1399:37">s</name></expr></argument>, <argument pos:start="1399:40" pos:end="1399:41"><expr pos:start="1399:40" pos:end="1399:41"><name pos:start="1399:40" pos:end="1399:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="1403:17" pos:end="1405:72"><if pos:start="1403:17" pos:end="1405:72">if <condition pos:start="1403:20" pos:end="1403:37">(<expr pos:start="1403:21" pos:end="1403:36"><name pos:start="1403:21" pos:end="1403:24">insn</name> <operator pos:start="1403:26" pos:end="1403:26">&amp;</operator> <operator pos:start="1403:28" pos:end="1403:28">(</operator><literal type="number" pos:start="1403:29" pos:end="1403:29">1</literal> <operator pos:start="1403:31" pos:end="1403:32">&lt;&lt;</operator> <literal type="number" pos:start="1403:34" pos:end="1403:35">24</literal><operator pos:start="1403:36" pos:end="1403:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1405:21" pos:end="1405:72"><block_content pos:start="1405:21" pos:end="1405:72"> <comment type="block" pos:start="1403:39" pos:end="1403:57">/* pre-decrement */</comment>

                    <expr_stmt pos:start="1405:21" pos:end="1405:72"><expr pos:start="1405:21" pos:end="1405:71"><call pos:start="1405:21" pos:end="1405:71"><name pos:start="1405:21" pos:end="1405:36">tcg_gen_addi_i32</name><argument_list pos:start="1405:37" pos:end="1405:71">(<argument pos:start="1405:38" pos:end="1405:41"><expr pos:start="1405:38" pos:end="1405:41"><name pos:start="1405:38" pos:end="1405:41">addr</name></expr></argument>, <argument pos:start="1405:44" pos:end="1405:47"><expr pos:start="1405:44" pos:end="1405:47"><name pos:start="1405:44" pos:end="1405:47">addr</name></expr></argument>, <argument pos:start="1405:50" pos:end="1405:70"><expr pos:start="1405:50" pos:end="1405:70"><operator pos:start="1405:50" pos:end="1405:50">-</operator><operator pos:start="1405:51" pos:end="1405:51">(</operator><operator pos:start="1405:52" pos:end="1405:52">(</operator><name pos:start="1405:53" pos:end="1405:56">insn</name> <operator pos:start="1405:58" pos:end="1405:58">&amp;</operator> <literal type="number" pos:start="1405:60" pos:end="1405:63">0xff</literal><operator pos:start="1405:64" pos:end="1405:64">)</operator> <operator pos:start="1405:66" pos:end="1405:67">&lt;&lt;</operator> <literal type="number" pos:start="1405:69" pos:end="1405:69">2</literal><operator pos:start="1405:70" pos:end="1405:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="1409:17" pos:end="1415:31"><if pos:start="1409:17" pos:end="1411:31">if <condition pos:start="1409:20" pos:end="1409:23">(<expr pos:start="1409:21" pos:end="1409:22"><name pos:start="1409:21" pos:end="1409:22">dp</name></expr>)</condition><block type="pseudo" pos:start="1411:21" pos:end="1411:31"><block_content pos:start="1411:21" pos:end="1411:31">

                    <expr_stmt pos:start="1411:21" pos:end="1411:31"><expr pos:start="1411:21" pos:end="1411:30"><name pos:start="1411:21" pos:end="1411:26">offset</name> <operator pos:start="1411:28" pos:end="1411:28">=</operator> <literal type="number" pos:start="1411:30" pos:end="1411:30">8</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1413:17" pos:end="1415:31">else<block type="pseudo" pos:start="1415:21" pos:end="1415:31"><block_content pos:start="1415:21" pos:end="1415:31">

                    <expr_stmt pos:start="1415:21" pos:end="1415:31"><expr pos:start="1415:21" pos:end="1415:30"><name pos:start="1415:21" pos:end="1415:26">offset</name> <operator pos:start="1415:28" pos:end="1415:28">=</operator> <literal type="number" pos:start="1415:30" pos:end="1415:30">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <for pos:start="1417:17" pos:end="1439:17">for <control pos:start="1417:21" pos:end="1417:39">(<init pos:start="1417:22" pos:end="1417:27"><expr pos:start="1417:22" pos:end="1417:26"><name pos:start="1417:22" pos:end="1417:22">i</name> <operator pos:start="1417:24" pos:end="1417:24">=</operator> <literal type="number" pos:start="1417:26" pos:end="1417:26">0</literal></expr>;</init> <condition pos:start="1417:29" pos:end="1417:34"><expr pos:start="1417:29" pos:end="1417:33"><name pos:start="1417:29" pos:end="1417:29">i</name> <operator pos:start="1417:31" pos:end="1417:31">&lt;</operator> <name pos:start="1417:33" pos:end="1417:33">n</name></expr>;</condition> <incr pos:start="1417:36" pos:end="1417:38"><expr pos:start="1417:36" pos:end="1417:38"><name pos:start="1417:36" pos:end="1417:36">i</name><operator pos:start="1417:37" pos:end="1417:38">++</operator></expr></incr>)</control> <block pos:start="1417:41" pos:end="1439:17">{<block_content pos:start="1419:21" pos:end="1437:57">

                    <if_stmt pos:start="1419:21" pos:end="1435:21"><if pos:start="1419:21" pos:end="1427:21">if <condition pos:start="1419:24" pos:end="1419:45">(<expr pos:start="1419:25" pos:end="1419:44"><name pos:start="1419:25" pos:end="1419:28">insn</name> <operator pos:start="1419:30" pos:end="1419:30">&amp;</operator> <name pos:start="1419:32" pos:end="1419:44">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="1419:47" pos:end="1427:21">{<block_content pos:start="1423:25" pos:end="1425:52">

                        <comment type="block" pos:start="1421:25" pos:end="1421:34">/* load */</comment>

                        <expr_stmt pos:start="1423:25" pos:end="1423:48"><expr pos:start="1423:25" pos:end="1423:47"><call pos:start="1423:25" pos:end="1423:47"><name pos:start="1423:25" pos:end="1423:34">gen_vfp_ld</name><argument_list pos:start="1423:35" pos:end="1423:47">(<argument pos:start="1423:36" pos:end="1423:36"><expr pos:start="1423:36" pos:end="1423:36"><name pos:start="1423:36" pos:end="1423:36">s</name></expr></argument>, <argument pos:start="1423:39" pos:end="1423:40"><expr pos:start="1423:39" pos:end="1423:40"><name pos:start="1423:39" pos:end="1423:40">dp</name></expr></argument>, <argument pos:start="1423:43" pos:end="1423:46"><expr pos:start="1423:43" pos:end="1423:46"><name pos:start="1423:43" pos:end="1423:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1425:25" pos:end="1425:52"><expr pos:start="1425:25" pos:end="1425:51"><call pos:start="1425:25" pos:end="1425:51"><name pos:start="1425:25" pos:end="1425:39">gen_mov_vreg_F0</name><argument_list pos:start="1425:40" pos:end="1425:51">(<argument pos:start="1425:41" pos:end="1425:42"><expr pos:start="1425:41" pos:end="1425:42"><name pos:start="1425:41" pos:end="1425:42">dp</name></expr></argument>, <argument pos:start="1425:45" pos:end="1425:50"><expr pos:start="1425:45" pos:end="1425:50"><name pos:start="1425:45" pos:end="1425:46">rd</name> <operator pos:start="1425:48" pos:end="1425:48">+</operator> <name pos:start="1425:50" pos:end="1425:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1427:23" pos:end="1435:21">else <block pos:start="1427:28" pos:end="1435:21">{<block_content pos:start="1431:25" pos:end="1433:48">

                        <comment type="block" pos:start="1429:25" pos:end="1429:35">/* store */</comment>

                        <expr_stmt pos:start="1431:25" pos:end="1431:52"><expr pos:start="1431:25" pos:end="1431:51"><call pos:start="1431:25" pos:end="1431:51"><name pos:start="1431:25" pos:end="1431:39">gen_mov_F0_vreg</name><argument_list pos:start="1431:40" pos:end="1431:51">(<argument pos:start="1431:41" pos:end="1431:42"><expr pos:start="1431:41" pos:end="1431:42"><name pos:start="1431:41" pos:end="1431:42">dp</name></expr></argument>, <argument pos:start="1431:45" pos:end="1431:50"><expr pos:start="1431:45" pos:end="1431:50"><name pos:start="1431:45" pos:end="1431:46">rd</name> <operator pos:start="1431:48" pos:end="1431:48">+</operator> <name pos:start="1431:50" pos:end="1431:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1433:25" pos:end="1433:48"><expr pos:start="1433:25" pos:end="1433:47"><call pos:start="1433:25" pos:end="1433:47"><name pos:start="1433:25" pos:end="1433:34">gen_vfp_st</name><argument_list pos:start="1433:35" pos:end="1433:47">(<argument pos:start="1433:36" pos:end="1433:36"><expr pos:start="1433:36" pos:end="1433:36"><name pos:start="1433:36" pos:end="1433:36">s</name></expr></argument>, <argument pos:start="1433:39" pos:end="1433:40"><expr pos:start="1433:39" pos:end="1433:40"><name pos:start="1433:39" pos:end="1433:40">dp</name></expr></argument>, <argument pos:start="1433:43" pos:end="1433:46"><expr pos:start="1433:43" pos:end="1433:46"><name pos:start="1433:43" pos:end="1433:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1437:21" pos:end="1437:57"><expr pos:start="1437:21" pos:end="1437:56"><call pos:start="1437:21" pos:end="1437:56"><name pos:start="1437:21" pos:end="1437:36">tcg_gen_addi_i32</name><argument_list pos:start="1437:37" pos:end="1437:56">(<argument pos:start="1437:38" pos:end="1437:41"><expr pos:start="1437:38" pos:end="1437:41"><name pos:start="1437:38" pos:end="1437:41">addr</name></expr></argument>, <argument pos:start="1437:44" pos:end="1437:47"><expr pos:start="1437:44" pos:end="1437:47"><name pos:start="1437:44" pos:end="1437:47">addr</name></expr></argument>, <argument pos:start="1437:50" pos:end="1437:55"><expr pos:start="1437:50" pos:end="1437:55"><name pos:start="1437:50" pos:end="1437:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="1441:17" pos:end="1469:17"><if pos:start="1441:17" pos:end="1465:17">if <condition pos:start="1441:20" pos:end="1441:22">(<expr pos:start="1441:21" pos:end="1441:21"><name pos:start="1441:21" pos:end="1441:21">w</name></expr>)</condition> <block pos:start="1441:24" pos:end="1465:17">{<block_content pos:start="1445:21" pos:end="1463:43">

                    <comment type="block" pos:start="1443:21" pos:end="1443:35">/* writeback */</comment>

                    <if_stmt pos:start="1445:21" pos:end="1455:35"><if pos:start="1445:21" pos:end="1447:45">if <condition pos:start="1445:24" pos:end="1445:41">(<expr pos:start="1445:25" pos:end="1445:40"><name pos:start="1445:25" pos:end="1445:28">insn</name> <operator pos:start="1445:30" pos:end="1445:30">&amp;</operator> <operator pos:start="1445:32" pos:end="1445:32">(</operator><literal type="number" pos:start="1445:33" pos:end="1445:33">1</literal> <operator pos:start="1445:35" pos:end="1445:36">&lt;&lt;</operator> <literal type="number" pos:start="1445:38" pos:end="1445:39">24</literal><operator pos:start="1445:40" pos:end="1445:40">)</operator></expr>)</condition><block type="pseudo" pos:start="1447:25" pos:end="1447:45"><block_content pos:start="1447:25" pos:end="1447:45">

                        <expr_stmt pos:start="1447:25" pos:end="1447:45"><expr pos:start="1447:25" pos:end="1447:44"><name pos:start="1447:25" pos:end="1447:30">offset</name> <operator pos:start="1447:32" pos:end="1447:32">=</operator> <operator pos:start="1447:34" pos:end="1447:34">-</operator><name pos:start="1447:35" pos:end="1447:40">offset</name> <operator pos:start="1447:42" pos:end="1447:42">*</operator> <name pos:start="1447:44" pos:end="1447:44">n</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="1449:21" pos:end="1451:35">else if <condition pos:start="1449:29" pos:end="1449:46">(<expr pos:start="1449:30" pos:end="1449:45"><name pos:start="1449:30" pos:end="1449:31">dp</name> <operator pos:start="1449:33" pos:end="1449:34">&amp;&amp;</operator> <operator pos:start="1449:36" pos:end="1449:36">(</operator><name pos:start="1449:37" pos:end="1449:40">insn</name> <operator pos:start="1449:42" pos:end="1449:42">&amp;</operator> <literal type="number" pos:start="1449:44" pos:end="1449:44">1</literal><operator pos:start="1449:45" pos:end="1449:45">)</operator></expr>)</condition><block type="pseudo" pos:start="1451:25" pos:end="1451:35"><block_content pos:start="1451:25" pos:end="1451:35">

                        <expr_stmt pos:start="1451:25" pos:end="1451:35"><expr pos:start="1451:25" pos:end="1451:34"><name pos:start="1451:25" pos:end="1451:30">offset</name> <operator pos:start="1451:32" pos:end="1451:32">=</operator> <literal type="number" pos:start="1451:34" pos:end="1451:34">4</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1453:21" pos:end="1455:35">else<block type="pseudo" pos:start="1455:25" pos:end="1455:35"><block_content pos:start="1455:25" pos:end="1455:35">

                        <expr_stmt pos:start="1455:25" pos:end="1455:35"><expr pos:start="1455:25" pos:end="1455:34"><name pos:start="1455:25" pos:end="1455:30">offset</name> <operator pos:start="1455:32" pos:end="1455:32">=</operator> <literal type="number" pos:start="1455:34" pos:end="1455:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <if_stmt pos:start="1459:21" pos:end="1461:61"><if pos:start="1459:21" pos:end="1461:61">if <condition pos:start="1459:24" pos:end="1459:36">(<expr pos:start="1459:25" pos:end="1459:35"><name pos:start="1459:25" pos:end="1459:30">offset</name> <operator pos:start="1459:32" pos:end="1459:33">!=</operator> <literal type="number" pos:start="1459:35" pos:end="1459:35">0</literal></expr>)</condition><block type="pseudo" pos:start="1461:25" pos:end="1461:61"><block_content pos:start="1461:25" pos:end="1461:61">

                        <expr_stmt pos:start="1461:25" pos:end="1461:61"><expr pos:start="1461:25" pos:end="1461:60"><call pos:start="1461:25" pos:end="1461:60"><name pos:start="1461:25" pos:end="1461:40">tcg_gen_addi_i32</name><argument_list pos:start="1461:41" pos:end="1461:60">(<argument pos:start="1461:42" pos:end="1461:45"><expr pos:start="1461:42" pos:end="1461:45"><name pos:start="1461:42" pos:end="1461:45">addr</name></expr></argument>, <argument pos:start="1461:48" pos:end="1461:51"><expr pos:start="1461:48" pos:end="1461:51"><name pos:start="1461:48" pos:end="1461:51">addr</name></expr></argument>, <argument pos:start="1461:54" pos:end="1461:59"><expr pos:start="1461:54" pos:end="1461:59"><name pos:start="1461:54" pos:end="1461:59">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="1463:21" pos:end="1463:43"><expr pos:start="1463:21" pos:end="1463:42"><call pos:start="1463:21" pos:end="1463:42"><name pos:start="1463:21" pos:end="1463:29">store_reg</name><argument_list pos:start="1463:30" pos:end="1463:42">(<argument pos:start="1463:31" pos:end="1463:31"><expr pos:start="1463:31" pos:end="1463:31"><name pos:start="1463:31" pos:end="1463:31">s</name></expr></argument>, <argument pos:start="1463:34" pos:end="1463:35"><expr pos:start="1463:34" pos:end="1463:35"><name pos:start="1463:34" pos:end="1463:35">rn</name></expr></argument>, <argument pos:start="1463:38" pos:end="1463:41"><expr pos:start="1463:38" pos:end="1463:41"><name pos:start="1463:38" pos:end="1463:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1465:19" pos:end="1469:17">else <block pos:start="1465:24" pos:end="1469:17">{<block_content pos:start="1467:21" pos:end="1467:44">

                    <expr_stmt pos:start="1467:21" pos:end="1467:44"><expr pos:start="1467:21" pos:end="1467:43"><call pos:start="1467:21" pos:end="1467:43"><name pos:start="1467:21" pos:end="1467:37">tcg_temp_free_i32</name><argument_list pos:start="1467:38" pos:end="1467:43">(<argument pos:start="1467:39" pos:end="1467:42"><expr pos:start="1467:39" pos:end="1467:42"><name pos:start="1467:39" pos:end="1467:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1475:9" pos:end="1475:14">break;</break>

    <default pos:start="1477:5" pos:end="1477:12">default:</default>

        <comment type="block" pos:start="1479:9" pos:end="1479:35">/* Should never happen.  */</comment>

        <return pos:start="1481:9" pos:end="1481:17">return <expr pos:start="1481:16" pos:end="1481:16"><literal type="number" pos:start="1481:16" pos:end="1481:16">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <return pos:start="1485:5" pos:end="1485:13">return <expr pos:start="1485:12" pos:end="1485:12"><literal type="number" pos:start="1485:12" pos:end="1485:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
