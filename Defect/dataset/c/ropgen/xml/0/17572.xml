<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17572.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:33">rcu_read_stress_test</name><parameter_list pos:start="1:34" pos:end="1:44">(<parameter pos:start="1:35" pos:end="1:43"><decl pos:start="1:35" pos:end="1:43"><type pos:start="1:35" pos:end="1:40"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">itercnt</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:21">rcu_stress</name></name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:8">long</name> <name pos:start="13:10" pos:end="13:13">long</name></type> <name pos:start="13:15" pos:end="13:27">n_reads_local</name> <init pos:start="13:29" pos:end="13:31">= <expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:12">volatile</specifier> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:24">garbage</name> <init pos:start="15:26" pos:end="15:28">= <expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:23">rcu_register_thread</name><argument_list pos:start="19:24" pos:end="19:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><operator pos:start="23:5" pos:end="23:5">*</operator><operator pos:start="23:6" pos:end="23:6">(</operator>struct <name pos:start="23:14" pos:end="23:28">rcu_reader_data</name> <operator pos:start="23:30" pos:end="23:30">*</operator><operator pos:start="23:31" pos:end="23:31">*</operator><operator pos:start="23:32" pos:end="23:32">)</operator><name pos:start="23:33" pos:end="23:35">arg</name> <operator pos:start="23:37" pos:end="23:37">=</operator> <operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:49">rcu_reader</name></expr>;</expr_stmt>

    <while pos:start="25:5" pos:end="29:5">while <condition pos:start="25:11" pos:end="25:33">(<expr pos:start="25:12" pos:end="25:32"><name pos:start="25:12" pos:end="25:17">goflag</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:32">GOFLAG_INIT</name></expr>)</condition> <block pos:start="25:35" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:23">

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><call pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:16">g_usleep</name><argument_list pos:start="27:17" pos:end="27:22">(<argument pos:start="27:18" pos:end="27:21"><expr pos:start="27:18" pos:end="27:21"><literal type="number" pos:start="27:18" pos:end="27:21">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="31:5" pos:end="73:5">while <condition pos:start="31:11" pos:end="31:32">(<expr pos:start="31:12" pos:end="31:31"><name pos:start="31:12" pos:end="31:17">goflag</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <name pos:start="31:22" pos:end="31:31">GOFLAG_RUN</name></expr>)</condition> <block pos:start="31:34" pos:end="73:5">{<block_content pos:start="33:9" pos:end="71:9">

        <expr_stmt pos:start="33:9" pos:end="33:24"><expr pos:start="33:9" pos:end="33:23"><call pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:21">rcu_read_lock</name><argument_list pos:start="33:22" pos:end="33:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:49"><expr pos:start="35:9" pos:end="35:48"><name pos:start="35:9" pos:end="35:9">p</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:48"><name pos:start="35:13" pos:end="35:27">atomic_rcu_read</name><argument_list pos:start="35:28" pos:end="35:48">(<argument pos:start="35:29" pos:end="35:47"><expr pos:start="35:29" pos:end="35:47"><operator pos:start="35:29" pos:end="35:29">&amp;</operator><name pos:start="35:30" pos:end="35:47">rcu_stress_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:13">p</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">mbtest</name></name> <operator pos:start="37:23" pos:end="37:24">==</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>)</condition> <block pos:start="37:29" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:24">

            <expr_stmt pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:21">n_mberror</name><operator pos:start="39:22" pos:end="39:23">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:24"><expr pos:start="43:9" pos:end="43:23"><call pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:21">rcu_read_lock</name><argument_list pos:start="43:22" pos:end="43:23">()</argument_list></call></expr>;</expr_stmt>

        <for pos:start="45:9" pos:end="49:9">for <control pos:start="45:13" pos:end="45:33">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:28"><expr pos:start="45:21" pos:end="45:27"><name pos:start="45:21" pos:end="45:21">i</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <literal type="number" pos:start="45:25" pos:end="45:27">100</literal></expr>;</condition> <incr pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:30">i</name><operator pos:start="45:31" pos:end="45:32">++</operator></expr></incr>)</control> <block pos:start="45:35" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:22">

            <expr_stmt pos:start="47:13" pos:end="47:22"><expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:19">garbage</name><operator pos:start="47:20" pos:end="47:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="51:9" pos:end="51:26"><expr pos:start="51:9" pos:end="51:25"><call pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:23">rcu_read_unlock</name><argument_list pos:start="51:24" pos:end="51:25">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:10">pc</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:14">p</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:26">pipe_count</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><call pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:23">rcu_read_unlock</name><argument_list pos:start="55:24" pos:end="55:25">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:51">(<expr pos:start="57:13" pos:end="57:50"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:15">pc</name> <operator pos:start="57:17" pos:end="57:17">&gt;</operator> <name pos:start="57:19" pos:end="57:37">RCU_STRESS_PIPE_LEN</name><operator pos:start="57:38" pos:end="57:38">)</operator> <operator pos:start="57:40" pos:end="57:41">||</operator> <operator pos:start="57:43" pos:end="57:43">(</operator><name pos:start="57:44" pos:end="57:45">pc</name> <operator pos:start="57:47" pos:end="57:47">&lt;</operator> <literal type="number" pos:start="57:49" pos:end="57:49">0</literal><operator pos:start="57:50" pos:end="57:50">)</operator></expr>)</condition> <block pos:start="57:53" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:37">

            <expr_stmt pos:start="59:13" pos:end="59:37"><expr pos:start="59:13" pos:end="59:36"><name pos:start="59:13" pos:end="59:14">pc</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:36">RCU_STRESS_PIPE_LEN</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><call pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:18">atomic_inc</name><argument_list pos:start="63:19" pos:end="63:41">(<argument pos:start="63:20" pos:end="63:40"><expr pos:start="63:20" pos:end="63:40"><operator pos:start="63:20" pos:end="63:20">&amp;</operator><name pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:36">rcu_stress_count</name><index pos:start="63:37" pos:end="63:40">[<expr pos:start="63:38" pos:end="63:39"><name pos:start="63:38" pos:end="63:39">pc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:21">n_reads_local</name><operator pos:start="65:22" pos:end="65:23">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:38">(<expr pos:start="67:13" pos:end="67:37"><operator pos:start="67:13" pos:end="67:13">(</operator><operator pos:start="67:14" pos:end="67:15">++</operator><name pos:start="67:16" pos:end="67:22">itercnt</name> <operator pos:start="67:24" pos:end="67:24">%</operator> <literal type="number" pos:start="67:26" pos:end="67:31">0x1000</literal><operator pos:start="67:32" pos:end="67:32">)</operator> <operator pos:start="67:34" pos:end="67:35">==</operator> <literal type="number" pos:start="67:37" pos:end="67:37">0</literal></expr>)</condition> <block pos:start="67:40" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:30">

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><call pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:27">synchronize_rcu</name><argument_list pos:start="69:28" pos:end="69:29">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="75:5" pos:end="75:40"><expr pos:start="75:5" pos:end="75:39"><call pos:start="75:5" pos:end="75:39"><name pos:start="75:5" pos:end="75:14">atomic_add</name><argument_list pos:start="75:15" pos:end="75:39">(<argument pos:start="75:16" pos:end="75:23"><expr pos:start="75:16" pos:end="75:23"><operator pos:start="75:16" pos:end="75:16">&amp;</operator><name pos:start="75:17" pos:end="75:23">n_reads</name></expr></argument>, <argument pos:start="75:26" pos:end="75:38"><expr pos:start="75:26" pos:end="75:38"><name pos:start="75:26" pos:end="75:38">n_reads_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><call pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:25">rcu_unregister_thread</name><argument_list pos:start="79:26" pos:end="79:27">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="81:5" pos:end="81:16">return <expr pos:start="81:12" pos:end="81:15"><name pos:start="81:12" pos:end="81:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
