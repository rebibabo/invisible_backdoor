<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20372.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:49">h_client_architecture_support</name><parameter_list pos:start="1:50" pos:end="7:69">(<parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:60">PowerPCCPU</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">cpu_</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:74"><decl pos:start="3:51" pos:end="3:74"><type pos:start="3:51" pos:end="3:74"><name pos:start="3:51" pos:end="3:67">sPAPRMachineState</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:74">spapr</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:69"><decl pos:start="5:51" pos:end="5:69"><type pos:start="5:51" pos:end="5:69"><name pos:start="5:51" pos:end="5:62">target_ulong</name></type> <name pos:start="5:64" pos:end="5:69">opcode</name></decl></parameter>,

                                                  <parameter pos:start="7:51" pos:end="7:68"><decl pos:start="7:51" pos:end="7:68"><type pos:start="7:51" pos:end="7:68"><name pos:start="7:51" pos:end="7:62">target_ulong</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:68">args</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="205:1">{<block_content pos:start="11:5" pos:end="203:21">

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:21">list</name> <init pos:start="11:23" pos:end="11:51">= <expr pos:start="11:25" pos:end="11:51"><call pos:start="11:25" pos:end="11:51"><name pos:start="11:25" pos:end="11:42">ppc64_phys_to_real</name><argument_list pos:start="11:43" pos:end="11:51">(<argument pos:start="11:44" pos:end="11:50"><expr pos:start="11:44" pos:end="11:50"><name pos:start="11:44" pos:end="11:50"><name pos:start="11:44" pos:end="11:47">args</name><index pos:start="11:48" pos:end="11:50">[<expr pos:start="11:49" pos:end="11:49"><literal type="number" pos:start="11:49" pos:end="11:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">ov_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:54"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">PowerPCCPUClass</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">pcc</name> <init pos:start="15:26" pos:end="15:54">= <expr pos:start="15:28" pos:end="15:54"><call pos:start="15:28" pos:end="15:54"><name pos:start="15:28" pos:end="15:48">POWERPC_CPU_GET_CLASS</name><argument_list pos:start="15:49" pos:end="15:54">(<argument pos:start="15:50" pos:end="15:53"><expr pos:start="15:50" pos:end="15:53"><name pos:start="15:50" pos:end="15:53">cpu_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:46"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:18">cpu_match</name> <init pos:start="19:20" pos:end="19:26">= <expr pos:start="19:22" pos:end="19:26"><name pos:start="19:22" pos:end="19:26">false</name></expr></init></decl>, <decl pos:start="19:29" pos:end="19:45"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:29" pos:end="19:38">cpu_update</name> <init pos:start="19:40" pos:end="19:45">= <expr pos:start="19:42" pos:end="19:45"><name pos:start="19:42" pos:end="19:45">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:49"><decl pos:start="21:5" pos:end="21:48"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:28">old_cpu_version</name> <init pos:start="21:30" pos:end="21:48">= <expr pos:start="21:32" pos:end="21:48"><name pos:start="21:32" pos:end="21:48"><name pos:start="21:32" pos:end="21:35">cpu_</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:48">cpu_version</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:45"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">unsigned</name></type> <name pos:start="23:14" pos:end="23:23">compat_lvl</name> <init pos:start="23:25" pos:end="23:27">= <expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr></init></decl>, <decl pos:start="23:30" pos:end="23:44"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:30" pos:end="23:40">cpu_version</name> <init pos:start="23:42" pos:end="23:44">= <expr pos:start="23:44" pos:end="23:44"><literal type="number" pos:start="23:44" pos:end="23:44">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:58"><decl pos:start="25:5" pos:end="25:57"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">unsigned</name></type> <name pos:start="25:14" pos:end="25:20">max_lvl</name> <init pos:start="25:22" pos:end="25:57">= <expr pos:start="25:24" pos:end="25:57"><call pos:start="25:24" pos:end="25:57"><name pos:start="25:24" pos:end="25:39">get_compat_level</name><argument_list pos:start="25:40" pos:end="25:57">(<argument pos:start="25:41" pos:end="25:56"><expr pos:start="25:41" pos:end="25:56"><name pos:start="25:41" pos:end="25:56"><name pos:start="25:41" pos:end="25:44">cpu_</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:56">max_compat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:15">counter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:61"><decl pos:start="29:5" pos:end="29:32"><type pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:21">sPAPROptionVector</name> <modifier pos:start="29:23" pos:end="29:23">*</modifier></type><name pos:start="29:24" pos:end="29:32">ov5_guest</name></decl>, <decl pos:start="29:35" pos:end="29:46"><type ref="prev" pos:start="29:5" pos:end="29:23"><modifier pos:start="29:35" pos:end="29:35">*</modifier></type><name pos:start="29:36" pos:end="29:46">ov5_cas_old</name></decl>, <decl pos:start="29:49" pos:end="29:60"><type ref="prev" pos:start="29:5" pos:end="29:23"><modifier pos:start="29:49" pos:end="29:49">*</modifier></type><name pos:start="29:50" pos:end="29:60">ov5_updates</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* Parse PVR list */</comment>

    <for pos:start="35:5" pos:end="81:5">for <control pos:start="35:9" pos:end="35:47">(<init pos:start="35:10" pos:end="35:21"><expr pos:start="35:10" pos:end="35:20"><name pos:start="35:10" pos:end="35:16">counter</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</init> <condition pos:start="35:23" pos:end="35:36"><expr pos:start="35:23" pos:end="35:35"><name pos:start="35:23" pos:end="35:29">counter</name> <operator pos:start="35:31" pos:end="35:31">&lt;</operator> <literal type="number" pos:start="35:33" pos:end="35:35">512</literal></expr>;</condition> <incr pos:start="35:38" pos:end="35:46"><expr pos:start="35:38" pos:end="35:46"><operator pos:start="35:38" pos:end="35:39">++</operator><name pos:start="35:40" pos:end="35:46">counter</name></expr></incr>)</control> <block pos:start="35:49" pos:end="81:5">{<block_content pos:start="37:9" pos:end="79:9">

        <decl_stmt pos:start="37:9" pos:end="37:31"><decl pos:start="37:9" pos:end="37:20"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">uint32_t</name></type> <name pos:start="37:18" pos:end="37:20">pvr</name></decl>, <decl pos:start="37:23" pos:end="37:30"><type ref="prev" pos:start="37:9" pos:end="37:16"/><name pos:start="37:23" pos:end="37:30">pvr_mask</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:16">pvr_mask</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:59"><name pos:start="41:20" pos:end="41:30">ldl_be_phys</name><argument_list pos:start="41:31" pos:end="41:59">(<argument pos:start="41:32" pos:end="41:52"><expr pos:start="41:32" pos:end="41:52"><operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:52">address_space_memory</name></expr></argument>, <argument pos:start="41:55" pos:end="41:58"><expr pos:start="41:55" pos:end="41:58"><name pos:start="41:55" pos:end="41:58">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:12">list</name> <operator pos:start="43:14" pos:end="43:15">+=</operator> <literal type="number" pos:start="43:17" pos:end="43:17">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:11">pvr</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:54"><name pos:start="45:15" pos:end="45:25">ldl_be_phys</name><argument_list pos:start="45:26" pos:end="45:54">(<argument pos:start="45:27" pos:end="45:47"><expr pos:start="45:27" pos:end="45:47"><operator pos:start="45:27" pos:end="45:27">&amp;</operator><name pos:start="45:28" pos:end="45:47">address_space_memory</name></expr></argument>, <argument pos:start="45:50" pos:end="45:53"><expr pos:start="45:50" pos:end="45:53"><name pos:start="45:50" pos:end="45:53">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:18"><expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:12">list</name> <operator pos:start="47:14" pos:end="47:15">+=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><call pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:31">trace_spapr_cas_pvr_try</name><argument_list pos:start="51:32" pos:end="51:36">(<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">pvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="71:9"><if pos:start="53:9" pos:end="61:9">if <condition pos:start="53:12" pos:end="55:70">(<expr pos:start="53:13" pos:end="55:69"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:20">max_lvl</name> <operator pos:start="53:22" pos:end="53:23">&amp;&amp;</operator>

            <operator pos:start="55:13" pos:end="55:13">(</operator><operator pos:start="55:14" pos:end="55:14">(</operator><name pos:start="55:15" pos:end="55:36"><name pos:start="55:15" pos:end="55:18">cpu_</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:23">env</name><operator pos:start="55:24" pos:end="55:24">.</operator><name pos:start="55:25" pos:end="55:27">spr</name><index pos:start="55:28" pos:end="55:36">[<expr pos:start="55:29" pos:end="55:35"><name pos:start="55:29" pos:end="55:35">SPR_PVR</name></expr>]</index></name> <operator pos:start="55:38" pos:end="55:38">&amp;</operator> <name pos:start="55:40" pos:end="55:47">pvr_mask</name><operator pos:start="55:48" pos:end="55:48">)</operator> <operator pos:start="55:50" pos:end="55:51">==</operator> <operator pos:start="55:53" pos:end="55:53">(</operator><name pos:start="55:54" pos:end="55:56">pvr</name> <operator pos:start="55:58" pos:end="55:58">&amp;</operator> <name pos:start="55:60" pos:end="55:67">pvr_mask</name><operator pos:start="55:68" pos:end="55:68">)</operator><operator pos:start="55:69" pos:end="55:69">)</operator></expr>)</condition> <block pos:start="55:72" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:28">

            <expr_stmt pos:start="57:13" pos:end="57:29"><expr pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:21">cpu_match</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:28">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:28"><expr pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:23">cpu_version</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="67:9">else if <condition pos:start="61:19" pos:end="61:44">(<expr pos:start="61:20" pos:end="61:43"><name pos:start="61:20" pos:end="61:22">pvr</name> <operator pos:start="61:24" pos:end="61:25">==</operator> <name pos:start="61:27" pos:end="61:43"><name pos:start="61:27" pos:end="61:30">cpu_</name><operator pos:start="61:31" pos:end="61:32">-&gt;</operator><name pos:start="61:33" pos:end="61:43">cpu_version</name></name></expr>)</condition> <block pos:start="61:46" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:44">

            <expr_stmt pos:start="63:13" pos:end="63:29"><expr pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:21">cpu_match</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:28">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:44"><expr pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:23">cpu_version</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:43"><name pos:start="65:27" pos:end="65:30">cpu_</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:43">cpu_version</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="67:11" pos:end="71:9">else if <condition pos:start="67:19" pos:end="67:30">(<expr pos:start="67:20" pos:end="67:29"><operator pos:start="67:20" pos:end="67:20">!</operator><name pos:start="67:21" pos:end="67:29">cpu_match</name></expr>)</condition> <block pos:start="67:32" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:80">

            <expr_stmt pos:start="69:13" pos:end="69:80"><expr pos:start="69:13" pos:end="69:79"><call pos:start="69:13" pos:end="69:79"><name pos:start="69:13" pos:end="69:33">cas_handle_compat_cpu</name><argument_list pos:start="69:34" pos:end="69:79">(<argument pos:start="69:35" pos:end="69:37"><expr pos:start="69:35" pos:end="69:37"><name pos:start="69:35" pos:end="69:37">pcc</name></expr></argument>, <argument pos:start="69:40" pos:end="69:42"><expr pos:start="69:40" pos:end="69:42"><name pos:start="69:40" pos:end="69:42">pvr</name></expr></argument>, <argument pos:start="69:45" pos:end="69:51"><expr pos:start="69:45" pos:end="69:51"><name pos:start="69:45" pos:end="69:51">max_lvl</name></expr></argument>, <argument pos:start="69:54" pos:end="69:64"><expr pos:start="69:54" pos:end="69:64"><operator pos:start="69:54" pos:end="69:54">&amp;</operator><name pos:start="69:55" pos:end="69:64">compat_lvl</name></expr></argument>, <argument pos:start="69:67" pos:end="69:78"><expr pos:start="69:67" pos:end="69:78"><operator pos:start="69:67" pos:end="69:67">&amp;</operator><name pos:start="69:68" pos:end="69:78">cpu_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:31">/* Terminator record */</comment>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:28">(<expr pos:start="75:13" pos:end="75:27"><operator pos:start="75:13" pos:end="75:13">~</operator><name pos:start="75:14" pos:end="75:21">pvr_mask</name> <operator pos:start="75:23" pos:end="75:23">&amp;</operator> <name pos:start="75:25" pos:end="75:27">pvr</name></expr>)</condition> <block pos:start="75:30" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:18">

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="85:5" pos:end="85:26">/* Parsing finished */</comment>

    <expr_stmt pos:start="87:5" pos:end="89:52"><expr pos:start="87:5" pos:end="89:51"><call pos:start="87:5" pos:end="89:51"><name pos:start="87:5" pos:end="87:23">trace_spapr_cas_pvr</name><argument_list pos:start="87:24" pos:end="89:51">(<argument pos:start="87:25" pos:end="87:41"><expr pos:start="87:25" pos:end="87:41"><name pos:start="87:25" pos:end="87:41"><name pos:start="87:25" pos:end="87:28">cpu_</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:41">cpu_version</name></name></expr></argument>, <argument pos:start="87:44" pos:end="87:52"><expr pos:start="87:44" pos:end="87:52"><name pos:start="87:44" pos:end="87:52">cpu_match</name></expr></argument>,

                        <argument pos:start="89:25" pos:end="89:35"><expr pos:start="89:25" pos:end="89:35"><name pos:start="89:25" pos:end="89:35">cpu_version</name></expr></argument>, <argument pos:start="89:38" pos:end="89:50"><expr pos:start="89:38" pos:end="89:50"><name pos:start="89:38" pos:end="89:50"><name pos:start="89:38" pos:end="89:40">pcc</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:50">pcr_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:21">/* Update CPUs */</comment>

    <if_stmt pos:start="95:5" pos:end="123:5"><if pos:start="95:5" pos:end="123:5">if <condition pos:start="95:8" pos:end="95:39">(<expr pos:start="95:9" pos:end="95:38"><name pos:start="95:9" pos:end="95:23">old_cpu_version</name> <operator pos:start="95:25" pos:end="95:26">!=</operator> <name pos:start="95:28" pos:end="95:38">cpu_version</name></expr>)</condition> <block pos:start="95:41" pos:end="123:5">{<block_content pos:start="97:9" pos:end="121:9">

        <macro pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:19">CPU_FOREACH</name><argument_list pos:start="97:20" pos:end="97:23">(<argument pos:start="97:21" pos:end="97:22">cs</argument>)</argument_list></macro> <block pos:start="97:25" pos:end="121:9">{<block_content pos:start="99:13" pos:end="119:13">

            <decl_stmt pos:start="99:13" pos:end="105:14"><decl pos:start="99:13" pos:end="105:13"><type pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:26">SetCompatState</name></type> <name pos:start="99:28" pos:end="99:28">s</name> <init pos:start="99:30" pos:end="105:13">= <expr pos:start="99:32" pos:end="105:13"><block pos:start="99:32" pos:end="105:13">{

                <expr pos:start="101:17" pos:end="101:42"><operator pos:start="101:17" pos:end="101:17">.</operator><name pos:start="101:18" pos:end="101:28">cpu_version</name> <operator pos:start="101:30" pos:end="101:30">=</operator> <name pos:start="101:32" pos:end="101:42">cpu_version</name></expr>,

                <expr pos:start="103:17" pos:end="103:27"><operator pos:start="103:17" pos:end="103:17">.</operator><name pos:start="103:18" pos:end="103:20">err</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <name pos:start="103:24" pos:end="103:27">NULL</name></expr>,

            }</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:67"><expr pos:start="109:13" pos:end="109:66"><call pos:start="109:13" pos:end="109:66"><name pos:start="109:13" pos:end="109:22">run_on_cpu</name><argument_list pos:start="109:23" pos:end="109:66">(<argument pos:start="109:24" pos:end="109:25"><expr pos:start="109:24" pos:end="109:25"><name pos:start="109:24" pos:end="109:25">cs</name></expr></argument>, <argument pos:start="109:28" pos:end="109:40"><expr pos:start="109:28" pos:end="109:40"><name pos:start="109:28" pos:end="109:40">do_set_compat</name></expr></argument>, <argument pos:start="109:43" pos:end="109:65"><expr pos:start="109:43" pos:end="109:65"><call pos:start="109:43" pos:end="109:65"><name pos:start="109:43" pos:end="109:61">RUN_ON_CPU_HOST_PTR</name><argument_list pos:start="109:62" pos:end="109:65">(<argument pos:start="109:63" pos:end="109:64"><expr pos:start="109:63" pos:end="109:64"><operator pos:start="109:63" pos:end="109:63">&amp;</operator><name pos:start="109:64" pos:end="109:64">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:22">(<expr pos:start="113:17" pos:end="113:21"><name pos:start="113:17" pos:end="113:21"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:18">.</operator><name pos:start="113:19" pos:end="113:21">err</name></name></expr>)</condition> <block pos:start="113:24" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:34">

                <expr_stmt pos:start="115:17" pos:end="115:40"><expr pos:start="115:17" pos:end="115:39"><call pos:start="115:17" pos:end="115:39"><name pos:start="115:17" pos:end="115:32">error_report_err</name><argument_list pos:start="115:33" pos:end="115:39">(<argument pos:start="115:34" pos:end="115:38"><expr pos:start="115:34" pos:end="115:38"><name pos:start="115:34" pos:end="115:38"><name pos:start="115:34" pos:end="115:34">s</name><operator pos:start="115:35" pos:end="115:35">.</operator><name pos:start="115:36" pos:end="115:38">err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:34">return <expr pos:start="117:24" pos:end="117:33"><name pos:start="117:24" pos:end="117:33">H_HARDWARE</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="131:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:21">(<expr pos:start="127:9" pos:end="127:20"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:20">cpu_version</name></expr>)</condition> <block pos:start="127:23" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:27">

        <expr_stmt pos:start="129:9" pos:end="129:27"><expr pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:18">cpu_update</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <name pos:start="129:22" pos:end="129:26">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:78">/* For the future use: here @ov_table points to the first option vector */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:20"><expr pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:12">ov_table</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <name pos:start="137:16" pos:end="137:19">list</name></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:53"><expr pos:start="141:5" pos:end="141:52"><name pos:start="141:5" pos:end="141:13">ov5_guest</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <call pos:start="141:17" pos:end="141:52"><name pos:start="141:17" pos:end="141:39">spapr_ovec_parse_vector</name><argument_list pos:start="141:40" pos:end="141:52">(<argument pos:start="141:41" pos:end="141:48"><expr pos:start="141:41" pos:end="141:48"><name pos:start="141:41" pos:end="141:48">ov_table</name></expr></argument>, <argument pos:start="141:51" pos:end="141:51"><expr pos:start="141:51" pos:end="141:51"><literal type="number" pos:start="141:51" pos:end="141:51">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="157:7">/* NOTE: there are actually a number of ov5 bits where input from the

     * guest is always zero, and the platform/QEMU enables them independently

     * of guest input. To model these properly we'd want some sort of mask,

     * but since they only currently apply to memory migration as defined

     * by LoPAPR 1.1, 14.5.4.8, which QEMU doesn't implement, we don't need

     * to worry about this for now.

     */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:51"><expr pos:start="159:5" pos:end="159:50"><name pos:start="159:5" pos:end="159:15">ov5_cas_old</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:50"><name pos:start="159:19" pos:end="159:34">spapr_ovec_clone</name><argument_list pos:start="159:35" pos:end="159:50">(<argument pos:start="159:36" pos:end="159:49"><expr pos:start="159:36" pos:end="159:49"><name pos:start="159:36" pos:end="159:49"><name pos:start="159:36" pos:end="159:40">spapr</name><operator pos:start="159:41" pos:end="159:42">-&gt;</operator><name pos:start="159:43" pos:end="159:49">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="161:5" pos:end="161:51">/* full range of negotiated ov5 capabilities */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:64"><expr pos:start="163:5" pos:end="163:63"><call pos:start="163:5" pos:end="163:63"><name pos:start="163:5" pos:end="163:24">spapr_ovec_intersect</name><argument_list pos:start="163:25" pos:end="163:63">(<argument pos:start="163:26" pos:end="163:39"><expr pos:start="163:26" pos:end="163:39"><name pos:start="163:26" pos:end="163:39"><name pos:start="163:26" pos:end="163:30">spapr</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:39">ov5_cas</name></name></expr></argument>, <argument pos:start="163:42" pos:end="163:51"><expr pos:start="163:42" pos:end="163:51"><name pos:start="163:42" pos:end="163:51"><name pos:start="163:42" pos:end="163:46">spapr</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:51">ov5</name></name></expr></argument>, <argument pos:start="163:54" pos:end="163:62"><expr pos:start="163:54" pos:end="163:62"><name pos:start="163:54" pos:end="163:62">ov5_guest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:34"><expr pos:start="165:5" pos:end="165:33"><call pos:start="165:5" pos:end="165:33"><name pos:start="165:5" pos:end="165:22">spapr_ovec_cleanup</name><argument_list pos:start="165:23" pos:end="165:33">(<argument pos:start="165:24" pos:end="165:32"><expr pos:start="165:24" pos:end="165:32"><name pos:start="165:24" pos:end="165:32">ov5_guest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="167:5" pos:end="171:7">/* capabilities that have been added since CAS-generated guest reset.

     * if capabilities have since been removed, generate another reset

     */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:35"><expr pos:start="173:5" pos:end="173:34"><name pos:start="173:5" pos:end="173:15">ov5_updates</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:34"><name pos:start="173:19" pos:end="173:32">spapr_ovec_new</name><argument_list pos:start="173:33" pos:end="173:34">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="177:69"><expr pos:start="175:5" pos:end="177:68"><name pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:9">spapr</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:21">cas_reboot</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <call pos:start="175:25" pos:end="177:68"><name pos:start="175:25" pos:end="175:39">spapr_ovec_diff</name><argument_list pos:start="175:40" pos:end="177:68">(<argument pos:start="175:41" pos:end="175:51"><expr pos:start="175:41" pos:end="175:51"><name pos:start="175:41" pos:end="175:51">ov5_updates</name></expr></argument>,

                                        <argument pos:start="177:41" pos:end="177:51"><expr pos:start="177:41" pos:end="177:51"><name pos:start="177:41" pos:end="177:51">ov5_cas_old</name></expr></argument>, <argument pos:start="177:54" pos:end="177:67"><expr pos:start="177:54" pos:end="177:67"><name pos:start="177:54" pos:end="177:67"><name pos:start="177:54" pos:end="177:58">spapr</name><operator pos:start="177:59" pos:end="177:60">-&gt;</operator><name pos:start="177:61" pos:end="177:67">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="181:5" pos:end="189:5"><if pos:start="181:5" pos:end="189:5">if <condition pos:start="181:8" pos:end="181:27">(<expr pos:start="181:9" pos:end="181:26"><operator pos:start="181:9" pos:end="181:9">!</operator><name pos:start="181:10" pos:end="181:26"><name pos:start="181:10" pos:end="181:14">spapr</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:26">cas_reboot</name></name></expr>)</condition> <block pos:start="181:29" pos:end="189:5">{<block_content pos:start="183:9" pos:end="187:61">

        <expr_stmt pos:start="183:9" pos:end="187:61"><expr pos:start="183:9" pos:end="187:60"><name pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:13">spapr</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:25">cas_reboot</name></name> <operator pos:start="183:27" pos:end="183:27">=</operator>

            <operator pos:start="185:13" pos:end="185:13">(</operator><call pos:start="185:14" pos:end="187:54"><name pos:start="185:14" pos:end="185:41">spapr_h_cas_compose_response</name><argument_list pos:start="185:42" pos:end="187:54">(<argument pos:start="185:43" pos:end="185:47"><expr pos:start="185:43" pos:end="185:47"><name pos:start="185:43" pos:end="185:47">spapr</name></expr></argument>, <argument pos:start="185:50" pos:end="185:56"><expr pos:start="185:50" pos:end="185:56"><name pos:start="185:50" pos:end="185:56"><name pos:start="185:50" pos:end="185:53">args</name><index pos:start="185:54" pos:end="185:56">[<expr pos:start="185:55" pos:end="185:55"><literal type="number" pos:start="185:55" pos:end="185:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:59" pos:end="185:65"><expr pos:start="185:59" pos:end="185:65"><name pos:start="185:59" pos:end="185:65"><name pos:start="185:59" pos:end="185:62">args</name><index pos:start="185:63" pos:end="185:65">[<expr pos:start="185:64" pos:end="185:64"><literal type="number" pos:start="185:64" pos:end="185:64">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:68" pos:end="185:77"><expr pos:start="185:68" pos:end="185:77"><name pos:start="185:68" pos:end="185:77">cpu_update</name></expr></argument>,

                                          <argument pos:start="187:43" pos:end="187:53"><expr pos:start="187:43" pos:end="187:53"><name pos:start="187:43" pos:end="187:53">ov5_updates</name></expr></argument>)</argument_list></call> <operator pos:start="187:56" pos:end="187:57">!=</operator> <literal type="number" pos:start="187:59" pos:end="187:59">0</literal><operator pos:start="187:60" pos:end="187:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:36"><expr pos:start="191:5" pos:end="191:35"><call pos:start="191:5" pos:end="191:35"><name pos:start="191:5" pos:end="191:22">spapr_ovec_cleanup</name><argument_list pos:start="191:23" pos:end="191:35">(<argument pos:start="191:24" pos:end="191:34"><expr pos:start="191:24" pos:end="191:34"><name pos:start="191:24" pos:end="191:34">ov5_updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:26">(<expr pos:start="195:9" pos:end="195:25"><name pos:start="195:9" pos:end="195:25"><name pos:start="195:9" pos:end="195:13">spapr</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:25">cas_reboot</name></name></expr>)</condition> <block pos:start="195:28" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:36">

        <expr_stmt pos:start="197:9" pos:end="197:36"><expr pos:start="197:9" pos:end="197:35"><call pos:start="197:9" pos:end="197:35"><name pos:start="197:9" pos:end="197:33">qemu_system_reset_request</name><argument_list pos:start="197:34" pos:end="197:35">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="203:5" pos:end="203:21">return <expr pos:start="203:12" pos:end="203:20"><name pos:start="203:12" pos:end="203:20">H_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
