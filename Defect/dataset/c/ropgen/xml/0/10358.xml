<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10358.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ne2000_receive</name><parameter_list pos:start="1:27" pos:end="1:73">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:59"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:54">uint8_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">buf</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:72"><decl pos:start="1:62" pos:end="1:72"><type pos:start="1:62" pos:end="1:72"><name pos:start="1:62" pos:end="1:67">size_t</name></type> <name pos:start="1:69" pos:end="1:72">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:25">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">NE2000State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:26">total_len</name></decl>, <decl pos:start="9:29" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:29" pos:end="9:32">next</name></decl>, <decl pos:start="9:35" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:35" pos:end="9:39">avail</name></decl>, <decl pos:start="9:42" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:42" pos:end="9:44">len</name></decl>, <decl pos:start="9:47" pos:end="9:51"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:47" pos:end="9:51">index</name></decl>, <decl pos:start="9:54" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:54" pos:end="9:62">mcast_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:20"><name pos:start="11:13" pos:end="11:16">buf1</name><index pos:start="11:17" pos:end="11:20">[<expr pos:start="11:18" pos:end="11:19"><literal type="number" pos:start="11:18" pos:end="11:19">60</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="20:0"><decl pos:start="13:5" pos:end="15:46"><type pos:start="13:5" pos:end="13:24"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <specifier pos:start="13:12" pos:end="13:16">const</specifier> <name pos:start="13:18" pos:end="13:24">uint8_t</name></type> <name pos:start="13:26" pos:end="13:45"><name pos:start="13:26" pos:end="13:42">broadcast_macaddr</name><index pos:start="13:43" pos:end="13:45">[<expr pos:start="13:44" pos:end="13:44"><literal type="number" pos:start="13:44" pos:end="13:44">6</literal></expr>]</index></name> <init pos:start="13:47" pos:end="15:46">=

        <expr pos:start="15:9" pos:end="15:46"><block pos:start="15:9" pos:end="15:46">{ <expr pos:start="15:11" pos:end="15:14"><literal type="number" pos:start="15:11" pos:end="15:14">0xff</literal></expr>, <expr pos:start="15:17" pos:end="15:20"><literal type="number" pos:start="15:17" pos:end="15:20">0xff</literal></expr>, <expr pos:start="15:23" pos:end="15:26"><literal type="number" pos:start="15:23" pos:end="15:26">0xff</literal></expr>, <expr pos:start="15:29" pos:end="15:32"><literal type="number" pos:start="15:29" pos:end="15:32">0xff</literal></expr>, <expr pos:start="15:35" pos:end="15:38"><literal type="number" pos:start="15:35" pos:end="15:38">0xff</literal></expr>, <expr pos:start="15:41" pos:end="15:44"><literal type="number" pos:start="15:41" pos:end="15:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="19:1" pos:end="19:25">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:25">(<argument pos:start="19:13" pos:end="19:24"><expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:24">DEBUG_NE2000</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:45"><call pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:45">(<argument pos:start="21:12" pos:end="21:38"><expr pos:start="21:12" pos:end="21:38"><literal type="string" pos:start="21:12" pos:end="21:38">"NE2000: received len=%d\n"</literal></expr></argument>, <argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><name pos:start="21:41" pos:end="21:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="27:5" pos:end="29:15"><if pos:start="27:5" pos:end="29:15">if <condition pos:start="27:8" pos:end="27:53">(<expr pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">cmd</name></name> <operator pos:start="27:16" pos:end="27:16">&amp;</operator> <name pos:start="27:18" pos:end="27:27">E8390_STOP</name> <operator pos:start="27:29" pos:end="27:30">||</operator> <call pos:start="27:32" pos:end="27:52"><name pos:start="27:32" pos:end="27:49">ne2000_buffer_full</name><argument_list pos:start="27:50" pos:end="27:52">(<argument pos:start="27:51" pos:end="27:51"><expr pos:start="27:51" pos:end="27:51"><name pos:start="27:51" pos:end="27:51">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:15"><block_content pos:start="29:9" pos:end="29:15">

        <return pos:start="29:9" pos:end="29:15">return;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:25">/* XXX: check this */</comment>

    <if_stmt pos:start="35:5" pos:end="83:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:15">rxcr</name></name> <operator pos:start="35:17" pos:end="35:17">&amp;</operator> <literal type="number" pos:start="35:19" pos:end="35:22">0x10</literal></expr>)</condition> <block pos:start="35:25" pos:end="39:5">{<block_content>

        <comment type="block" pos:start="37:9" pos:end="37:38">/* promiscuous: receive all */</comment>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="83:5">else <block pos:start="39:12" pos:end="83:5">{<block_content pos:start="41:9" pos:end="81:9">

        <if_stmt pos:start="41:9" pos:end="81:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:48">(<expr pos:start="41:13" pos:end="41:47"><operator pos:start="41:13" pos:end="41:13">!</operator><call pos:start="41:14" pos:end="41:47"><name pos:start="41:14" pos:end="41:19">memcmp</name><argument_list pos:start="41:20" pos:end="41:47">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">buf</name></expr></argument>,  <argument pos:start="41:27" pos:end="41:43"><expr pos:start="41:27" pos:end="41:43"><name pos:start="41:27" pos:end="41:43">broadcast_macaddr</name></expr></argument>, <argument pos:start="41:46" pos:end="41:46"><expr pos:start="41:46" pos:end="41:46"><literal type="number" pos:start="41:46" pos:end="41:46">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:50" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:23">

            <comment type="block" pos:start="43:13" pos:end="43:35">/* broadcast address */</comment>

            <if_stmt pos:start="45:13" pos:end="47:23"><if pos:start="45:13" pos:end="47:23">if <condition pos:start="45:16" pos:end="45:34">(<expr pos:start="45:17" pos:end="45:33"><operator pos:start="45:17" pos:end="45:17">!</operator><operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:25"><name pos:start="45:19" pos:end="45:19">s</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:25">rxcr</name></name> <operator pos:start="45:27" pos:end="45:27">&amp;</operator> <literal type="number" pos:start="45:29" pos:end="45:32">0x04</literal><operator pos:start="45:33" pos:end="45:33">)</operator></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:23"><block_content pos:start="47:17" pos:end="47:23">

                <return pos:start="47:17" pos:end="47:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="63:9">else if <condition pos:start="49:19" pos:end="49:33">(<expr pos:start="49:20" pos:end="49:32"><name pos:start="49:20" pos:end="49:25"><name pos:start="49:20" pos:end="49:22">buf</name><index pos:start="49:23" pos:end="49:25">[<expr pos:start="49:24" pos:end="49:24"><literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr>]</index></name> <operator pos:start="49:27" pos:end="49:27">&amp;</operator> <literal type="number" pos:start="49:29" pos:end="49:32">0x01</literal></expr>)</condition> <block pos:start="49:35" pos:end="63:9">{<block_content pos:start="53:13" pos:end="61:23">

            <comment type="block" pos:start="51:13" pos:end="51:27">/* multicast */</comment>

            <if_stmt pos:start="53:13" pos:end="55:23"><if pos:start="53:13" pos:end="55:23">if <condition pos:start="53:16" pos:end="53:34">(<expr pos:start="53:17" pos:end="53:33"><operator pos:start="53:17" pos:end="53:17">!</operator><operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:25"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:25">rxcr</name></name> <operator pos:start="53:27" pos:end="53:27">&amp;</operator> <literal type="number" pos:start="53:29" pos:end="53:32">0x08</literal><operator pos:start="53:33" pos:end="53:33">)</operator></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:23"><block_content pos:start="55:17" pos:end="55:23">

                <return pos:start="55:17" pos:end="55:23">return;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:47"><expr pos:start="57:13" pos:end="57:46"><name pos:start="57:13" pos:end="57:21">mcast_idx</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:46"><name pos:start="57:25" pos:end="57:41">compute_mcast_idx</name><argument_list pos:start="57:42" pos:end="57:46">(<argument pos:start="57:43" pos:end="57:45"><expr pos:start="57:43" pos:end="57:45"><name pos:start="57:43" pos:end="57:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="61:23"><if pos:start="59:13" pos:end="61:23">if <condition pos:start="59:16" pos:end="59:68">(<expr pos:start="59:17" pos:end="59:67"><operator pos:start="59:17" pos:end="59:17">!</operator><operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:41"><name pos:start="59:19" pos:end="59:19">s</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:25">mult</name><index pos:start="59:26" pos:end="59:41">[<expr pos:start="59:27" pos:end="59:40"><name pos:start="59:27" pos:end="59:35">mcast_idx</name> <operator pos:start="59:37" pos:end="59:38">&gt;&gt;</operator> <literal type="number" pos:start="59:40" pos:end="59:40">3</literal></expr>]</index></name> <operator pos:start="59:43" pos:end="59:43">&amp;</operator> <operator pos:start="59:45" pos:end="59:45">(</operator><literal type="number" pos:start="59:46" pos:end="59:46">1</literal> <operator pos:start="59:48" pos:end="59:49">&lt;&lt;</operator> <operator pos:start="59:51" pos:end="59:51">(</operator><name pos:start="59:52" pos:end="59:60">mcast_idx</name> <operator pos:start="59:62" pos:end="59:62">&amp;</operator> <literal type="number" pos:start="59:64" pos:end="59:64">7</literal><operator pos:start="59:65" pos:end="59:65">)</operator><operator pos:start="59:66" pos:end="59:66">)</operator><operator pos:start="59:67" pos:end="59:67">)</operator></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:23"><block_content pos:start="61:17" pos:end="61:23">

                <return pos:start="61:17" pos:end="61:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="77:9">else if <condition pos:start="63:19" pos:end="73:40">(<expr pos:start="63:20" pos:end="73:39"><name pos:start="63:20" pos:end="63:28"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:25">mem</name><index pos:start="63:26" pos:end="63:28">[<expr pos:start="63:27" pos:end="63:27"><literal type="number" pos:start="63:27" pos:end="63:27">0</literal></expr>]</index></name> <operator pos:start="63:30" pos:end="63:31">==</operator> <name pos:start="63:33" pos:end="63:38"><name pos:start="63:33" pos:end="63:35">buf</name><index pos:start="63:36" pos:end="63:38">[<expr pos:start="63:37" pos:end="63:37"><literal type="number" pos:start="63:37" pos:end="63:37">0</literal></expr>]</index></name> <operator pos:start="63:40" pos:end="63:41">&amp;&amp;</operator>

                   <name pos:start="65:20" pos:end="65:28"><name pos:start="65:20" pos:end="65:20">s</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:25">mem</name><index pos:start="65:26" pos:end="65:28">[<expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">2</literal></expr>]</index></name> <operator pos:start="65:30" pos:end="65:31">==</operator> <name pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:35">buf</name><index pos:start="65:36" pos:end="65:38">[<expr pos:start="65:37" pos:end="65:37"><literal type="number" pos:start="65:37" pos:end="65:37">1</literal></expr>]</index></name> <operator pos:start="65:40" pos:end="65:41">&amp;&amp;</operator>

                   <name pos:start="67:20" pos:end="67:28"><name pos:start="67:20" pos:end="67:20">s</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:25">mem</name><index pos:start="67:26" pos:end="67:28">[<expr pos:start="67:27" pos:end="67:27"><literal type="number" pos:start="67:27" pos:end="67:27">4</literal></expr>]</index></name> <operator pos:start="67:30" pos:end="67:31">==</operator> <name pos:start="67:33" pos:end="67:38"><name pos:start="67:33" pos:end="67:35">buf</name><index pos:start="67:36" pos:end="67:38">[<expr pos:start="67:37" pos:end="67:37"><literal type="number" pos:start="67:37" pos:end="67:37">2</literal></expr>]</index></name> <operator pos:start="67:40" pos:end="67:41">&amp;&amp;</operator>

                   <name pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:25">mem</name><index pos:start="69:26" pos:end="69:28">[<expr pos:start="69:27" pos:end="69:27"><literal type="number" pos:start="69:27" pos:end="69:27">6</literal></expr>]</index></name> <operator pos:start="69:30" pos:end="69:31">==</operator> <name pos:start="69:33" pos:end="69:38"><name pos:start="69:33" pos:end="69:35">buf</name><index pos:start="69:36" pos:end="69:38">[<expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">3</literal></expr>]</index></name> <operator pos:start="69:40" pos:end="69:41">&amp;&amp;</operator>

                   <name pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:20">s</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:25">mem</name><index pos:start="71:26" pos:end="71:28">[<expr pos:start="71:27" pos:end="71:27"><literal type="number" pos:start="71:27" pos:end="71:27">8</literal></expr>]</index></name> <operator pos:start="71:30" pos:end="71:31">==</operator> <name pos:start="71:33" pos:end="71:38"><name pos:start="71:33" pos:end="71:35">buf</name><index pos:start="71:36" pos:end="71:38">[<expr pos:start="71:37" pos:end="71:37"><literal type="number" pos:start="71:37" pos:end="71:37">4</literal></expr>]</index></name> <operator pos:start="71:40" pos:end="71:41">&amp;&amp;</operator>

                   <name pos:start="73:20" pos:end="73:29"><name pos:start="73:20" pos:end="73:20">s</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:25">mem</name><index pos:start="73:26" pos:end="73:29">[<expr pos:start="73:27" pos:end="73:28"><literal type="number" pos:start="73:27" pos:end="73:28">10</literal></expr>]</index></name> <operator pos:start="73:31" pos:end="73:32">==</operator> <name pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:36">buf</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="73:42" pos:end="77:9">{<block_content>

            <comment type="block" pos:start="75:13" pos:end="75:23">/* match */</comment>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="81:9">else <block pos:start="77:16" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:19">

            <return pos:start="79:13" pos:end="79:19">return;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>





    <comment type="block" pos:start="89:5" pos:end="89:45">/* if too small buffer, then expand it */</comment>

    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:28">(<expr pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:12">size</name> <operator pos:start="91:14" pos:end="91:14">&lt;</operator> <name pos:start="91:16" pos:end="91:27">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="91:30" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:28">

        <expr_stmt pos:start="93:9" pos:end="93:32"><expr pos:start="93:9" pos:end="93:31"><call pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:14">memcpy</name><argument_list pos:start="93:15" pos:end="93:31">(<argument pos:start="93:16" pos:end="93:19"><expr pos:start="93:16" pos:end="93:19"><name pos:start="93:16" pos:end="93:19">buf1</name></expr></argument>, <argument pos:start="93:22" pos:end="93:24"><expr pos:start="93:22" pos:end="93:24"><name pos:start="93:22" pos:end="93:24">buf</name></expr></argument>, <argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><name pos:start="93:27" pos:end="93:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:52"><expr pos:start="95:9" pos:end="95:51"><call pos:start="95:9" pos:end="95:51"><name pos:start="95:9" pos:end="95:14">memset</name><argument_list pos:start="95:15" pos:end="95:51">(<argument pos:start="95:16" pos:end="95:26"><expr pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:19">buf1</name> <operator pos:start="95:21" pos:end="95:21">+</operator> <name pos:start="95:23" pos:end="95:26">size</name></expr></argument>, <argument pos:start="95:29" pos:end="95:29"><expr pos:start="95:29" pos:end="95:29"><literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr></argument>, <argument pos:start="95:32" pos:end="95:50"><expr pos:start="95:32" pos:end="95:50"><name pos:start="95:32" pos:end="95:43">MIN_BUF_SIZE</name> <operator pos:start="95:45" pos:end="95:45">-</operator> <name pos:start="95:47" pos:end="95:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:19"><expr pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">buf</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:18">buf1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:12">size</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <name pos:start="99:16" pos:end="99:27">MIN_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:27"><expr pos:start="105:5" pos:end="105:26"><name pos:start="105:5" pos:end="105:9">index</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <name pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:21">curpag</name></name> <operator pos:start="105:23" pos:end="105:24">&lt;&lt;</operator> <literal type="number" pos:start="105:26" pos:end="105:26">8</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="107:5" pos:end="107:28">/* 4 bytes for header */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:25"><expr pos:start="109:5" pos:end="109:24"><name pos:start="109:5" pos:end="109:13">total_len</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <name pos:start="109:17" pos:end="109:20">size</name> <operator pos:start="109:22" pos:end="109:22">+</operator> <literal type="number" pos:start="109:24" pos:end="109:24">4</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="111:5" pos:end="111:51">/* address for next packet (4 bytes for CRC) */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:51"><expr pos:start="113:5" pos:end="113:50"><name pos:start="113:5" pos:end="113:8">next</name> <operator pos:start="113:10" pos:end="113:10">=</operator> <name pos:start="113:12" pos:end="113:16">index</name> <operator pos:start="113:18" pos:end="113:18">+</operator> <operator pos:start="113:20" pos:end="113:20">(</operator><operator pos:start="113:21" pos:end="113:21">(</operator><name pos:start="113:22" pos:end="113:30">total_len</name> <operator pos:start="113:32" pos:end="113:32">+</operator> <literal type="number" pos:start="113:34" pos:end="113:36">4</literal> <operator pos:start="113:36" pos:end="113:36">+</operator> <literal type="number" pos:start="113:38" pos:end="113:40">255</literal><operator pos:start="113:41" pos:end="113:41">)</operator> <operator pos:start="113:43" pos:end="113:43">&amp;</operator> <operator pos:start="113:45" pos:end="113:45">~</operator><literal type="number" pos:start="113:46" pos:end="113:49">0xff</literal><operator pos:start="113:50" pos:end="113:50">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="117:37"><if pos:start="115:5" pos:end="117:37">if <condition pos:start="115:8" pos:end="115:24">(<expr pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:12">next</name> <operator pos:start="115:14" pos:end="115:15">&gt;=</operator> <name pos:start="115:17" pos:end="115:23"><name pos:start="115:17" pos:end="115:17">s</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:23">stop</name></name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:37"><block_content pos:start="117:9" pos:end="117:37">

        <expr_stmt pos:start="117:9" pos:end="117:37"><expr pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:12">next</name> <operator pos:start="117:14" pos:end="117:15">-=</operator> <operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:24"><name pos:start="117:18" pos:end="117:18">s</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:24">stop</name></name> <operator pos:start="117:26" pos:end="117:26">-</operator> <name pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:35">start</name></name><operator pos:start="117:36" pos:end="117:36">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="119:5" pos:end="119:31">/* prepare packet header */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:23"><expr pos:start="121:5" pos:end="121:22"><name pos:start="121:5" pos:end="121:5">p</name> <operator pos:start="121:7" pos:end="121:7">=</operator> <name pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:14">mem</name></name> <operator pos:start="121:16" pos:end="121:16">+</operator> <name pos:start="121:18" pos:end="121:22">index</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:24"><expr pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:10"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:10">rsr</name></name> <operator pos:start="123:12" pos:end="123:12">=</operator> <name pos:start="123:14" pos:end="123:23">ENRSR_RXOK</name></expr>;</expr_stmt> <comment type="block" pos:start="123:26" pos:end="123:45">/* receive status */</comment>

    <comment type="block" pos:start="125:5" pos:end="125:25">/* XXX: check this */</comment>

    <if_stmt pos:start="127:5" pos:end="129:28"><if pos:start="127:5" pos:end="129:28">if <condition pos:start="127:8" pos:end="127:22">(<expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:14"><name pos:start="127:9" pos:end="127:11">buf</name><index pos:start="127:12" pos:end="127:14">[<expr pos:start="127:13" pos:end="127:13"><literal type="number" pos:start="127:13" pos:end="127:13">0</literal></expr>]</index></name> <operator pos:start="127:16" pos:end="127:16">&amp;</operator> <literal type="number" pos:start="127:18" pos:end="127:21">0x01</literal></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:28"><block_content pos:start="129:9" pos:end="129:28">

        <expr_stmt pos:start="129:9" pos:end="129:28"><expr pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:14">rsr</name></name> <operator pos:start="129:16" pos:end="129:17">|=</operator> <name pos:start="129:19" pos:end="129:27">ENRSR_PHY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:18"><expr pos:start="131:5" pos:end="131:17"><name pos:start="131:5" pos:end="131:8"><name pos:start="131:5" pos:end="131:5">p</name><index pos:start="131:6" pos:end="131:8">[<expr pos:start="131:7" pos:end="131:7"><literal type="number" pos:start="131:7" pos:end="131:7">0</literal></expr>]</index></name> <operator pos:start="131:10" pos:end="131:10">=</operator> <name pos:start="131:12" pos:end="131:17"><name pos:start="131:12" pos:end="131:12">s</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:17">rsr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:21"><expr pos:start="133:5" pos:end="133:20"><name pos:start="133:5" pos:end="133:8"><name pos:start="133:5" pos:end="133:5">p</name><index pos:start="133:6" pos:end="133:8">[<expr pos:start="133:7" pos:end="133:7"><literal type="number" pos:start="133:7" pos:end="133:7">1</literal></expr>]</index></name> <operator pos:start="133:10" pos:end="133:10">=</operator> <name pos:start="133:12" pos:end="133:15">next</name> <operator pos:start="133:17" pos:end="133:18">&gt;&gt;</operator> <literal type="number" pos:start="133:20" pos:end="133:20">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:8"><name pos:start="135:5" pos:end="135:5">p</name><index pos:start="135:6" pos:end="135:8">[<expr pos:start="135:7" pos:end="135:7"><literal type="number" pos:start="135:7" pos:end="135:7">2</literal></expr>]</index></name> <operator pos:start="135:10" pos:end="135:10">=</operator> <name pos:start="135:12" pos:end="135:20">total_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:26"><expr pos:start="137:5" pos:end="137:25"><name pos:start="137:5" pos:end="137:8"><name pos:start="137:5" pos:end="137:5">p</name><index pos:start="137:6" pos:end="137:8">[<expr pos:start="137:7" pos:end="137:7"><literal type="number" pos:start="137:7" pos:end="137:7">3</literal></expr>]</index></name> <operator pos:start="137:10" pos:end="137:10">=</operator> <name pos:start="137:12" pos:end="137:20">total_len</name> <operator pos:start="137:22" pos:end="137:23">&gt;&gt;</operator> <literal type="number" pos:start="137:25" pos:end="137:25">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:15"><expr pos:start="139:5" pos:end="139:14"><name pos:start="139:5" pos:end="139:9">index</name> <operator pos:start="139:11" pos:end="139:12">+=</operator> <literal type="number" pos:start="139:14" pos:end="139:14">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:27">/* write packet data */</comment>

    <while pos:start="145:5" pos:end="173:5">while <condition pos:start="145:11" pos:end="145:20">(<expr pos:start="145:12" pos:end="145:19"><name pos:start="145:12" pos:end="145:15">size</name> <operator pos:start="145:17" pos:end="145:17">&gt;</operator> <literal type="number" pos:start="145:19" pos:end="145:19">0</literal></expr>)</condition> <block pos:start="145:22" pos:end="173:5">{<block_content pos:start="147:9" pos:end="171:20">

        <if_stmt pos:start="147:9" pos:end="153:22"><if pos:start="147:9" pos:end="149:36">if <condition pos:start="147:12" pos:end="147:29">(<expr pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:17">index</name> <operator pos:start="147:19" pos:end="147:20">&lt;=</operator> <name pos:start="147:22" pos:end="147:28"><name pos:start="147:22" pos:end="147:22">s</name><operator pos:start="147:23" pos:end="147:24">-&gt;</operator><name pos:start="147:25" pos:end="147:28">stop</name></name></expr>)</condition><block type="pseudo" pos:start="149:13" pos:end="149:36"><block_content pos:start="149:13" pos:end="149:36">

            <expr_stmt pos:start="149:13" pos:end="149:36"><expr pos:start="149:13" pos:end="149:35"><name pos:start="149:13" pos:end="149:17">avail</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:27"><name pos:start="149:21" pos:end="149:21">s</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:27">stop</name></name> <operator pos:start="149:29" pos:end="149:29">-</operator> <name pos:start="149:31" pos:end="149:35">index</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="151:9" pos:end="153:22">else<block type="pseudo" pos:start="153:13" pos:end="153:22"><block_content pos:start="153:13" pos:end="153:22">

            <expr_stmt pos:start="153:13" pos:end="153:22"><expr pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:17">avail</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <literal type="number" pos:start="153:21" pos:end="153:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:19"><expr pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:11">len</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:18">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="159:24"><if pos:start="157:9" pos:end="159:24">if <condition pos:start="157:12" pos:end="157:24">(<expr pos:start="157:13" pos:end="157:23"><name pos:start="157:13" pos:end="157:15">len</name> <operator pos:start="157:17" pos:end="157:17">&gt;</operator> <name pos:start="157:19" pos:end="157:23">avail</name></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:24"><block_content pos:start="159:13" pos:end="159:24">

            <expr_stmt pos:start="159:13" pos:end="159:24"><expr pos:start="159:13" pos:end="159:23"><name pos:start="159:13" pos:end="159:15">len</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:23">avail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:41"><expr pos:start="161:9" pos:end="161:40"><call pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:14">memcpy</name><argument_list pos:start="161:15" pos:end="161:40">(<argument pos:start="161:16" pos:end="161:29"><expr pos:start="161:16" pos:end="161:29"><name pos:start="161:16" pos:end="161:21"><name pos:start="161:16" pos:end="161:16">s</name><operator pos:start="161:17" pos:end="161:18">-&gt;</operator><name pos:start="161:19" pos:end="161:21">mem</name></name> <operator pos:start="161:23" pos:end="161:23">+</operator> <name pos:start="161:25" pos:end="161:29">index</name></expr></argument>, <argument pos:start="161:32" pos:end="161:34"><expr pos:start="161:32" pos:end="161:34"><name pos:start="161:32" pos:end="161:34">buf</name></expr></argument>, <argument pos:start="161:37" pos:end="161:39"><expr pos:start="161:37" pos:end="161:39"><name pos:start="161:37" pos:end="161:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:19"><expr pos:start="163:9" pos:end="163:18"><name pos:start="163:9" pos:end="163:11">buf</name> <operator pos:start="163:13" pos:end="163:14">+=</operator> <name pos:start="163:16" pos:end="163:18">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:21"><expr pos:start="165:9" pos:end="165:20"><name pos:start="165:9" pos:end="165:13">index</name> <operator pos:start="165:15" pos:end="165:16">+=</operator> <name pos:start="165:18" pos:end="165:20">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="169:29"><if pos:start="167:9" pos:end="169:29">if <condition pos:start="167:12" pos:end="167:29">(<expr pos:start="167:13" pos:end="167:28"><name pos:start="167:13" pos:end="167:17">index</name> <operator pos:start="167:19" pos:end="167:20">==</operator> <name pos:start="167:22" pos:end="167:28"><name pos:start="167:22" pos:end="167:22">s</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:28">stop</name></name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:29"><block_content pos:start="169:13" pos:end="169:29">

            <expr_stmt pos:start="169:13" pos:end="169:29"><expr pos:start="169:13" pos:end="169:28"><name pos:start="169:13" pos:end="169:17">index</name> <operator pos:start="169:19" pos:end="169:19">=</operator> <name pos:start="169:21" pos:end="169:28"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:28">start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:20"><expr pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:12">size</name> <operator pos:start="171:14" pos:end="171:15">-=</operator> <name pos:start="171:17" pos:end="171:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="175:5" pos:end="175:26"><expr pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:13"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:13">curpag</name></name> <operator pos:start="175:15" pos:end="175:15">=</operator> <name pos:start="175:17" pos:end="175:20">next</name> <operator pos:start="175:22" pos:end="175:23">&gt;&gt;</operator> <literal type="number" pos:start="175:25" pos:end="175:25">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:54">/* now we can signal we have received something */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:23"><expr pos:start="181:5" pos:end="181:22"><name pos:start="181:5" pos:end="181:10"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:10">isr</name></name> <operator pos:start="181:12" pos:end="181:13">|=</operator> <name pos:start="181:15" pos:end="181:22">ENISR_RX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:25"><expr pos:start="183:5" pos:end="183:24"><call pos:start="183:5" pos:end="183:24"><name pos:start="183:5" pos:end="183:21">ne2000_update_irq</name><argument_list pos:start="183:22" pos:end="183:24">(<argument pos:start="183:23" pos:end="183:23"><expr pos:start="183:23" pos:end="183:23"><name pos:start="183:23" pos:end="183:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
