<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14332.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">sdl_audio_callback</name><parameter_list pos:start="1:31" pos:end="1:68">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:50">Uint8</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:58">stream</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:67"><decl pos:start="1:61" pos:end="1:67"><type pos:start="1:61" pos:end="1:67"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:67">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:57">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VideoState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">is</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">audio_size</name></decl>, <decl pos:start="7:21" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:24">len1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">bytes_per_sec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:103"><decl pos:start="11:5" pos:end="11:102"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">frame_size</name> <init pos:start="11:20" pos:end="11:102">= <expr pos:start="11:22" pos:end="11:102"><call pos:start="11:22" pos:end="11:102"><name pos:start="11:22" pos:end="11:47">av_samples_get_buffer_size</name><argument_list pos:start="11:48" pos:end="11:102">(<argument pos:start="11:49" pos:end="11:52"><expr pos:start="11:49" pos:end="11:52"><name pos:start="11:49" pos:end="11:52">NULL</name></expr></argument>, <argument pos:start="11:55" pos:end="11:76"><expr pos:start="11:55" pos:end="11:76"><name pos:start="11:55" pos:end="11:76"><name pos:start="11:55" pos:end="11:56">is</name><operator pos:start="11:57" pos:end="11:58">-&gt;</operator><name pos:start="11:59" pos:end="11:67">audio_tgt</name><operator pos:start="11:68" pos:end="11:68">.</operator><name pos:start="11:69" pos:end="11:76">channels</name></name></expr></argument>, <argument pos:start="11:79" pos:end="11:79"><expr pos:start="11:79" pos:end="11:79"><literal type="number" pos:start="11:79" pos:end="11:79">1</literal></expr></argument>, <argument pos:start="11:82" pos:end="11:98"><expr pos:start="11:82" pos:end="11:98"><name pos:start="11:82" pos:end="11:98"><name pos:start="11:82" pos:end="11:83">is</name><operator pos:start="11:84" pos:end="11:85">-&gt;</operator><name pos:start="11:86" pos:end="11:94">audio_tgt</name><operator pos:start="11:95" pos:end="11:95">.</operator><name pos:start="11:96" pos:end="11:98">fmt</name></name></expr></argument>, <argument pos:start="11:101" pos:end="11:101"><expr pos:start="11:101" pos:end="11:101"><literal type="number" pos:start="11:101" pos:end="11:101">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">double</name></type> <name pos:start="13:12" pos:end="13:14">pts</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:23">audio_callback_time</name> <operator pos:start="17:25" pos:end="17:25">=</operator> <call pos:start="17:27" pos:end="17:38"><name pos:start="17:27" pos:end="17:36">av_gettime</name><argument_list pos:start="17:37" pos:end="17:38">()</argument_list></call></expr>;</expr_stmt>



    <while pos:start="21:5" pos:end="63:5">while <condition pos:start="21:11" pos:end="21:19">(<expr pos:start="21:12" pos:end="21:18"><name pos:start="21:12" pos:end="21:14">len</name> <operator pos:start="21:16" pos:end="21:16">&gt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>)</condition> <block pos:start="21:21" pos:end="63:5">{<block_content pos:start="23:9" pos:end="61:36">

        <if_stmt pos:start="23:9" pos:end="47:9"><if pos:start="23:9" pos:end="47:9">if <condition pos:start="23:12" pos:end="23:54">(<expr pos:start="23:13" pos:end="23:53"><name pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:14">is</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:31">audio_buf_index</name></name> <operator pos:start="23:33" pos:end="23:34">&gt;=</operator> <name pos:start="23:36" pos:end="23:53"><name pos:start="23:36" pos:end="23:37">is</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:53">audio_buf_size</name></name></expr>)</condition> <block pos:start="23:56" pos:end="47:9">{<block_content pos:start="25:12" pos:end="45:35">

           <expr_stmt pos:start="25:12" pos:end="25:53"><expr pos:start="25:12" pos:end="25:52"><name pos:start="25:12" pos:end="25:21">audio_size</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <call pos:start="25:25" pos:end="25:52"><name pos:start="25:25" pos:end="25:42">audio_decode_frame</name><argument_list pos:start="25:43" pos:end="25:52">(<argument pos:start="25:44" pos:end="25:45"><expr pos:start="25:44" pos:end="25:45"><name pos:start="25:44" pos:end="25:45">is</name></expr></argument>, <argument pos:start="25:48" pos:end="25:51"><expr pos:start="25:48" pos:end="25:51"><operator pos:start="25:48" pos:end="25:48">&amp;</operator><name pos:start="25:49" pos:end="25:51">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <if_stmt pos:start="27:12" pos:end="43:12"><if pos:start="27:12" pos:end="35:12">if <condition pos:start="27:15" pos:end="27:30">(<expr pos:start="27:16" pos:end="27:29"><name pos:start="27:16" pos:end="27:25">audio_size</name> <operator pos:start="27:27" pos:end="27:27">&lt;</operator> <literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr>)</condition> <block pos:start="27:32" pos:end="35:12">{<block_content pos:start="31:16" pos:end="33:86">

                <comment type="block" pos:start="29:17" pos:end="29:51">/* if error, just output silence */</comment>

               <expr_stmt pos:start="31:16" pos:end="31:52"><expr pos:start="31:16" pos:end="31:51"><name pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:17">is</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:28">audio_buf</name></name>      <operator pos:start="31:35" pos:end="31:35">=</operator> <name pos:start="31:37" pos:end="31:51"><name pos:start="31:37" pos:end="31:38">is</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:51">silence_buf</name></name></expr>;</expr_stmt>

               <expr_stmt pos:start="33:16" pos:end="33:86"><expr pos:start="33:16" pos:end="33:85"><name pos:start="33:16" pos:end="33:33"><name pos:start="33:16" pos:end="33:17">is</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:33">audio_buf_size</name></name> <operator pos:start="33:35" pos:end="33:35">=</operator> <sizeof pos:start="33:37" pos:end="33:59">sizeof<argument_list pos:start="33:43" pos:end="33:59">(<argument pos:start="33:44" pos:end="33:58"><expr pos:start="33:44" pos:end="33:58"><name pos:start="33:44" pos:end="33:58"><name pos:start="33:44" pos:end="33:45">is</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:58">silence_buf</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="33:61" pos:end="33:61">/</operator> <name pos:start="33:63" pos:end="33:72">frame_size</name> <operator pos:start="33:74" pos:end="33:74">*</operator> <name pos:start="33:76" pos:end="33:85">frame_size</name></expr>;</expr_stmt>

           </block_content>}</block></if> <else pos:start="35:14" pos:end="43:12">else <block pos:start="35:19" pos:end="43:12">{<block_content pos:start="37:16" pos:end="41:47">

               <if_stmt pos:start="37:16" pos:end="39:83"><if pos:start="37:16" pos:end="39:83">if <condition pos:start="37:19" pos:end="37:52">(<expr pos:start="37:20" pos:end="37:51"><name pos:start="37:20" pos:end="37:32"><name pos:start="37:20" pos:end="37:21">is</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:32">show_mode</name></name> <operator pos:start="37:34" pos:end="37:35">!=</operator> <name pos:start="37:37" pos:end="37:51">SHOW_MODE_VIDEO</name></expr>)</condition><block type="pseudo" pos:start="39:20" pos:end="39:83"><block_content pos:start="39:20" pos:end="39:83">

                   <expr_stmt pos:start="39:20" pos:end="39:83"><expr pos:start="39:20" pos:end="39:82"><call pos:start="39:20" pos:end="39:82"><name pos:start="39:20" pos:end="39:40">update_sample_display</name><argument_list pos:start="39:41" pos:end="39:82">(<argument pos:start="39:42" pos:end="39:43"><expr pos:start="39:42" pos:end="39:43"><name pos:start="39:42" pos:end="39:43">is</name></expr></argument>, <argument pos:start="39:46" pos:end="39:69"><expr pos:start="39:46" pos:end="39:69"><operator pos:start="39:46" pos:end="39:46">(</operator><name pos:start="39:47" pos:end="39:53">int16_t</name> <operator pos:start="39:55" pos:end="39:55">*</operator><operator pos:start="39:56" pos:end="39:56">)</operator><name pos:start="39:57" pos:end="39:69"><name pos:start="39:57" pos:end="39:58">is</name><operator pos:start="39:59" pos:end="39:60">-&gt;</operator><name pos:start="39:61" pos:end="39:69">audio_buf</name></name></expr></argument>, <argument pos:start="39:72" pos:end="39:81"><expr pos:start="39:72" pos:end="39:81"><name pos:start="39:72" pos:end="39:81">audio_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

               <expr_stmt pos:start="41:16" pos:end="41:47"><expr pos:start="41:16" pos:end="41:46"><name pos:start="41:16" pos:end="41:33"><name pos:start="41:16" pos:end="41:17">is</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:33">audio_buf_size</name></name> <operator pos:start="41:35" pos:end="41:35">=</operator> <name pos:start="41:37" pos:end="41:46">audio_size</name></expr>;</expr_stmt>

           </block_content>}</block></else></if_stmt>

           <expr_stmt pos:start="45:12" pos:end="45:35"><expr pos:start="45:12" pos:end="45:34"><name pos:start="45:12" pos:end="45:30"><name pos:start="45:12" pos:end="45:13">is</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:30">audio_buf_index</name></name> <operator pos:start="45:32" pos:end="45:32">=</operator> <literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:56"><expr pos:start="49:9" pos:end="49:55"><name pos:start="49:9" pos:end="49:12">len1</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:33"><name pos:start="49:16" pos:end="49:17">is</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:33">audio_buf_size</name></name> <operator pos:start="49:35" pos:end="49:35">-</operator> <name pos:start="49:37" pos:end="49:55"><name pos:start="49:37" pos:end="49:38">is</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:55">audio_buf_index</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="53:23"><if pos:start="51:9" pos:end="53:23">if <condition pos:start="51:12" pos:end="51:23">(<expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:16">len1</name> <operator pos:start="51:18" pos:end="51:18">&gt;</operator> <name pos:start="51:20" pos:end="51:22">len</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:23"><block_content pos:start="53:13" pos:end="53:23">

            <expr_stmt pos:start="53:13" pos:end="53:23"><expr pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:16">len1</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:22">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:77"><expr pos:start="55:9" pos:end="55:76"><call pos:start="55:9" pos:end="55:76"><name pos:start="55:9" pos:end="55:14">memcpy</name><argument_list pos:start="55:15" pos:end="55:76">(<argument pos:start="55:16" pos:end="55:21"><expr pos:start="55:16" pos:end="55:21"><name pos:start="55:16" pos:end="55:21">stream</name></expr></argument>, <argument pos:start="55:24" pos:end="55:69"><expr pos:start="55:24" pos:end="55:69"><operator pos:start="55:24" pos:end="55:24">(</operator><name pos:start="55:25" pos:end="55:31">uint8_t</name> <operator pos:start="55:33" pos:end="55:33">*</operator><operator pos:start="55:34" pos:end="55:34">)</operator><name pos:start="55:35" pos:end="55:47"><name pos:start="55:35" pos:end="55:36">is</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:47">audio_buf</name></name> <operator pos:start="55:49" pos:end="55:49">+</operator> <name pos:start="55:51" pos:end="55:69"><name pos:start="55:51" pos:end="55:52">is</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:69">audio_buf_index</name></name></expr></argument>, <argument pos:start="55:72" pos:end="55:75"><expr pos:start="55:72" pos:end="55:75"><name pos:start="55:72" pos:end="55:75">len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:11">len</name> <operator pos:start="57:13" pos:end="57:14">-=</operator> <name pos:start="57:16" pos:end="57:19">len1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:14">stream</name> <operator pos:start="59:16" pos:end="59:17">+=</operator> <name pos:start="59:19" pos:end="59:22">len1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:10">is</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:27">audio_buf_index</name></name> <operator pos:start="61:29" pos:end="61:30">+=</operator> <name pos:start="61:32" pos:end="61:35">len1</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="65:5" pos:end="65:109"><expr pos:start="65:5" pos:end="65:108"><name pos:start="65:5" pos:end="65:17">bytes_per_sec</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <name pos:start="65:21" pos:end="65:38"><name pos:start="65:21" pos:end="65:22">is</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:33">audio_tgt</name><operator pos:start="65:34" pos:end="65:34">.</operator><name pos:start="65:35" pos:end="65:38">freq</name></name> <operator pos:start="65:40" pos:end="65:40">*</operator> <name pos:start="65:42" pos:end="65:63"><name pos:start="65:42" pos:end="65:43">is</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:54">audio_tgt</name><operator pos:start="65:55" pos:end="65:55">.</operator><name pos:start="65:56" pos:end="65:63">channels</name></name> <operator pos:start="65:65" pos:end="65:65">*</operator> <call pos:start="65:67" pos:end="65:108"><name pos:start="65:67" pos:end="65:89">av_get_bytes_per_sample</name><argument_list pos:start="65:90" pos:end="65:108">(<argument pos:start="65:91" pos:end="65:107"><expr pos:start="65:91" pos:end="65:107"><name pos:start="65:91" pos:end="65:107"><name pos:start="65:91" pos:end="65:92">is</name><operator pos:start="65:93" pos:end="65:94">-&gt;</operator><name pos:start="65:95" pos:end="65:103">audio_tgt</name><operator pos:start="65:104" pos:end="65:104">.</operator><name pos:start="65:105" pos:end="65:107">fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:72"><expr pos:start="67:5" pos:end="67:71"><name pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:6">is</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:28">audio_write_buf_size</name></name> <operator pos:start="67:30" pos:end="67:30">=</operator> <name pos:start="67:32" pos:end="67:49"><name pos:start="67:32" pos:end="67:33">is</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:49">audio_buf_size</name></name> <operator pos:start="67:51" pos:end="67:51">-</operator> <name pos:start="67:53" pos:end="67:71"><name pos:start="67:53" pos:end="67:54">is</name><operator pos:start="67:55" pos:end="67:56">-&gt;</operator><name pos:start="67:57" pos:end="67:71">audio_buf_index</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:76">/* Let's assume the audio driver that is used by SDL has two periods. */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:125"><expr pos:start="71:5" pos:end="71:124"><name pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:6">is</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:25">audio_current_pts</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:43"><name pos:start="71:29" pos:end="71:30">is</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:43">audio_clock</name></name> <operator pos:start="71:45" pos:end="71:45">-</operator> <operator pos:start="71:47" pos:end="71:47">(</operator><name pos:start="71:48" pos:end="71:53">double</name><operator pos:start="71:54" pos:end="71:54">)</operator><operator pos:start="71:55" pos:end="71:55">(</operator><literal type="number" pos:start="71:56" pos:end="71:56">2</literal> <operator pos:start="71:58" pos:end="71:58">*</operator> <name pos:start="71:60" pos:end="71:80"><name pos:start="71:60" pos:end="71:61">is</name><operator pos:start="71:62" pos:end="71:63">-&gt;</operator><name pos:start="71:64" pos:end="71:80">audio_hw_buf_size</name></name> <operator pos:start="71:82" pos:end="71:82">+</operator> <name pos:start="71:84" pos:end="71:107"><name pos:start="71:84" pos:end="71:85">is</name><operator pos:start="71:86" pos:end="71:87">-&gt;</operator><name pos:start="71:88" pos:end="71:107">audio_write_buf_size</name></name><operator pos:start="71:108" pos:end="71:108">)</operator> <operator pos:start="71:110" pos:end="71:110">/</operator> <name pos:start="71:112" pos:end="71:124">bytes_per_sec</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:90"><expr pos:start="73:5" pos:end="73:89"><name pos:start="73:5" pos:end="73:31"><name pos:start="73:5" pos:end="73:6">is</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:31">audio_current_pts_drift</name></name> <operator pos:start="73:33" pos:end="73:33">=</operator> <name pos:start="73:35" pos:end="73:55"><name pos:start="73:35" pos:end="73:36">is</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:55">audio_current_pts</name></name> <operator pos:start="73:57" pos:end="73:57">-</operator> <name pos:start="73:59" pos:end="73:77">audio_callback_time</name> <operator pos:start="73:79" pos:end="73:79">/</operator> <literal type="number" pos:start="73:81" pos:end="73:89">1000000.0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:57"><expr pos:start="75:5" pos:end="75:56"><call pos:start="75:5" pos:end="75:56"><name pos:start="75:5" pos:end="75:29">check_external_clock_sync</name><argument_list pos:start="75:30" pos:end="75:56">(<argument pos:start="75:31" pos:end="75:32"><expr pos:start="75:31" pos:end="75:32"><name pos:start="75:31" pos:end="75:32">is</name></expr></argument>, <argument pos:start="75:35" pos:end="75:55"><expr pos:start="75:35" pos:end="75:55"><name pos:start="75:35" pos:end="75:55"><name pos:start="75:35" pos:end="75:36">is</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:55">audio_current_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
