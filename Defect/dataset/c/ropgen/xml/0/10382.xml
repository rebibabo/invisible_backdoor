<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10382.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">rv10_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">got_frame</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="147:1">{<block_content pos:start="9:5" pos:end="145:23">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">MpegEncContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">pict</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">slice_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:19"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:17">uint8_t</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:29">slices_hdr</name> <init pos:start="21:31" pos:end="21:36">= <expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:77"><expr pos:start="25:5" pos:end="25:76"><call pos:start="25:5" pos:end="25:76"><name pos:start="25:5" pos:end="25:11">av_dlog</name><argument_list pos:start="25:12" pos:end="25:76">(<argument pos:start="25:13" pos:end="25:17"><expr pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:17">avctx</name></expr></argument>, <argument pos:start="25:20" pos:end="25:44"><expr pos:start="25:20" pos:end="25:44"><literal type="string" pos:start="25:20" pos:end="25:44">"*****frame %d size=%d\n"</literal></expr></argument>, <argument pos:start="25:47" pos:end="25:65"><expr pos:start="25:47" pos:end="25:65"><name pos:start="25:47" pos:end="25:65"><name pos:start="25:47" pos:end="25:51">avctx</name><operator pos:start="25:52" pos:end="25:53">-&gt;</operator><name pos:start="25:54" pos:end="25:65">frame_number</name></name></expr></argument>, <argument pos:start="25:68" pos:end="25:75"><expr pos:start="25:68" pos:end="25:75"><name pos:start="25:68" pos:end="25:75">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>)</condition> <block pos:start="31:24" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="57:41"><if pos:start="39:5" pos:end="55:5">if<condition pos:start="39:7" pos:end="39:27">(<expr pos:start="39:8" pos:end="39:26"><operator pos:start="39:8" pos:end="39:8">!</operator><name pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:26">slice_count</name></name></expr>)</condition><block pos:start="39:28" pos:end="55:5">{<block_content pos:start="41:9" pos:end="53:39">

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:19">slice_count</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <operator pos:start="41:23" pos:end="41:23">(</operator><operator pos:start="41:24" pos:end="41:24">*</operator><name pos:start="41:25" pos:end="41:27">buf</name><operator pos:start="41:28" pos:end="41:29">++</operator><operator pos:start="41:30" pos:end="41:30">)</operator> <operator pos:start="41:32" pos:end="41:32">+</operator> <literal type="number" pos:start="41:34" pos:end="41:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:19"><expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:16">buf_size</name><operator pos:start="43:17" pos:end="43:18">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:18">slices_hdr</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:24">buf</name> <operator pos:start="45:26" pos:end="45:26">+</operator> <literal type="number" pos:start="45:28" pos:end="45:28">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:11">buf</name> <operator pos:start="47:13" pos:end="47:14">+=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">8</literal> <operator pos:start="47:18" pos:end="47:18">*</operator> <name pos:start="47:20" pos:end="47:30">slice_count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:16">buf_size</name> <operator pos:start="49:18" pos:end="49:19">-=</operator> <literal type="number" pos:start="49:21" pos:end="49:21">8</literal> <operator pos:start="49:23" pos:end="49:23">*</operator> <name pos:start="49:25" pos:end="49:35">slice_count</name></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="53:39"><if pos:start="51:9" pos:end="53:39">if <condition pos:start="51:12" pos:end="51:26">(<expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:20">buf_size</name> <operator pos:start="51:22" pos:end="51:23">&lt;=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:39"><block_content pos:start="53:13" pos:end="53:39">

            <return pos:start="53:13" pos:end="53:39">return <expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if><else pos:start="55:6" pos:end="57:41">else<block type="pseudo" pos:start="57:9" pos:end="57:41"><block_content pos:start="57:9" pos:end="57:41">

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:19">slice_count</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:40"><name pos:start="57:23" pos:end="57:27">avctx</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:40">slice_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <for pos:start="61:5" pos:end="107:5">for<control pos:start="61:8" pos:end="61:32">(<init pos:start="61:9" pos:end="61:12"><expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:9">i</name><operator pos:start="61:10" pos:end="61:10">=</operator><literal type="number" pos:start="61:11" pos:end="61:11">0</literal></expr>;</init> <condition pos:start="61:14" pos:end="61:27"><expr pos:start="61:14" pos:end="61:26"><name pos:start="61:14" pos:end="61:14">i</name><operator pos:start="61:15" pos:end="61:15">&lt;</operator><name pos:start="61:16" pos:end="61:26">slice_count</name></expr>;</condition> <incr pos:start="61:29" pos:end="61:31"><expr pos:start="61:29" pos:end="61:31"><name pos:start="61:29" pos:end="61:29">i</name><operator pos:start="61:30" pos:end="61:31">++</operator></expr></incr>)</control><block pos:start="61:33" pos:end="107:5">{<block_content pos:start="63:9" pos:end="105:16">

        <decl_stmt pos:start="63:9" pos:end="63:65"><decl pos:start="63:9" pos:end="63:64"><type pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">unsigned</name></type> <name pos:start="63:18" pos:end="63:23">offset</name> <init pos:start="63:25" pos:end="63:64">= <expr pos:start="63:27" pos:end="63:64"><call pos:start="63:27" pos:end="63:64"><name pos:start="63:27" pos:end="63:42">get_slice_offset</name><argument_list pos:start="63:43" pos:end="63:64">(<argument pos:start="63:44" pos:end="63:48"><expr pos:start="63:44" pos:end="63:48"><name pos:start="63:44" pos:end="63:48">avctx</name></expr></argument>, <argument pos:start="63:51" pos:end="63:60"><expr pos:start="63:51" pos:end="63:60"><name pos:start="63:51" pos:end="63:60">slices_hdr</name></expr></argument>, <argument pos:start="63:63" pos:end="63:63"><expr pos:start="63:63" pos:end="63:63"><name pos:start="63:63" pos:end="63:63">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:24"><decl pos:start="65:9" pos:end="65:16"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:16">size</name></decl>, <decl pos:start="65:19" pos:end="65:23"><type ref="prev" pos:start="65:9" pos:end="65:11"/><name pos:start="65:19" pos:end="65:23">size2</name></decl>;</decl_stmt>



        <if_stmt pos:start="69:9" pos:end="71:39"><if pos:start="69:9" pos:end="71:39">if <condition pos:start="69:12" pos:end="69:31">(<expr pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:18">offset</name> <operator pos:start="69:20" pos:end="69:21">&gt;=</operator> <name pos:start="69:23" pos:end="69:30">buf_size</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:39"><block_content pos:start="71:13" pos:end="71:39">

            <return pos:start="71:13" pos:end="71:39">return <expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="75:9" pos:end="81:68"><if pos:start="75:9" pos:end="77:36">if<condition pos:start="75:11" pos:end="75:30">(<expr pos:start="75:12" pos:end="75:29"><name pos:start="75:12" pos:end="75:12">i</name><operator pos:start="75:13" pos:end="75:13">+</operator><literal type="number" pos:start="75:14" pos:end="75:14">1</literal> <operator pos:start="75:16" pos:end="75:17">==</operator> <name pos:start="75:19" pos:end="75:29">slice_count</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:36"><block_content pos:start="77:13" pos:end="77:36">

            <expr_stmt pos:start="77:13" pos:end="77:36"><expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:16">size</name><operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:26">buf_size</name> <operator pos:start="77:28" pos:end="77:28">-</operator> <name pos:start="77:30" pos:end="77:35">offset</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="79:9" pos:end="81:68">else<block type="pseudo" pos:start="81:13" pos:end="81:68"><block_content pos:start="81:13" pos:end="81:68">

            <expr_stmt pos:start="81:13" pos:end="81:68"><expr pos:start="81:13" pos:end="81:67"><name pos:start="81:13" pos:end="81:16">size</name><operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:58"><name pos:start="81:19" pos:end="81:34">get_slice_offset</name><argument_list pos:start="81:35" pos:end="81:58">(<argument pos:start="81:36" pos:end="81:40"><expr pos:start="81:36" pos:end="81:40"><name pos:start="81:36" pos:end="81:40">avctx</name></expr></argument>, <argument pos:start="81:43" pos:end="81:52"><expr pos:start="81:43" pos:end="81:52"><name pos:start="81:43" pos:end="81:52">slices_hdr</name></expr></argument>, <argument pos:start="81:55" pos:end="81:57"><expr pos:start="81:55" pos:end="81:57"><name pos:start="81:55" pos:end="81:55">i</name><operator pos:start="81:56" pos:end="81:56">+</operator><literal type="number" pos:start="81:57" pos:end="81:57">1</literal></expr></argument>)</argument_list></call> <operator pos:start="81:60" pos:end="81:60">-</operator> <name pos:start="81:62" pos:end="81:67">offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="85:9" pos:end="91:69"><if pos:start="85:9" pos:end="87:37">if<condition pos:start="85:11" pos:end="85:30">(<expr pos:start="85:12" pos:end="85:29"><name pos:start="85:12" pos:end="85:12">i</name><operator pos:start="85:13" pos:end="85:13">+</operator><literal type="number" pos:start="85:14" pos:end="85:14">2</literal> <operator pos:start="85:16" pos:end="85:17">&gt;=</operator> <name pos:start="85:19" pos:end="85:29">slice_count</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:37"><block_content pos:start="87:13" pos:end="87:37">

            <expr_stmt pos:start="87:13" pos:end="87:37"><expr pos:start="87:13" pos:end="87:36"><name pos:start="87:13" pos:end="87:17">size2</name><operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:27">buf_size</name> <operator pos:start="87:29" pos:end="87:29">-</operator> <name pos:start="87:31" pos:end="87:36">offset</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="89:9" pos:end="91:69">else<block type="pseudo" pos:start="91:13" pos:end="91:69"><block_content pos:start="91:13" pos:end="91:69">

            <expr_stmt pos:start="91:13" pos:end="91:69"><expr pos:start="91:13" pos:end="91:68"><name pos:start="91:13" pos:end="91:17">size2</name><operator pos:start="91:18" pos:end="91:18">=</operator> <call pos:start="91:20" pos:end="91:59"><name pos:start="91:20" pos:end="91:35">get_slice_offset</name><argument_list pos:start="91:36" pos:end="91:59">(<argument pos:start="91:37" pos:end="91:41"><expr pos:start="91:37" pos:end="91:41"><name pos:start="91:37" pos:end="91:41">avctx</name></expr></argument>, <argument pos:start="91:44" pos:end="91:53"><expr pos:start="91:44" pos:end="91:53"><name pos:start="91:44" pos:end="91:53">slices_hdr</name></expr></argument>, <argument pos:start="91:56" pos:end="91:58"><expr pos:start="91:56" pos:end="91:58"><name pos:start="91:56" pos:end="91:56">i</name><operator pos:start="91:57" pos:end="91:57">+</operator><literal type="number" pos:start="91:58" pos:end="91:58">2</literal></expr></argument>)</argument_list></call> <operator pos:start="91:61" pos:end="91:61">-</operator> <name pos:start="91:63" pos:end="91:68">offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="95:9" pos:end="99:39"><if pos:start="95:9" pos:end="99:39">if <condition pos:start="95:12" pos:end="97:51">(<expr pos:start="95:13" pos:end="97:50"><name pos:start="95:13" pos:end="95:16">size</name> <operator pos:start="95:18" pos:end="95:19">&lt;=</operator> <literal type="number" pos:start="95:21" pos:end="95:21">0</literal> <operator pos:start="95:23" pos:end="95:24">||</operator> <name pos:start="95:26" pos:end="95:30">size2</name> <operator pos:start="95:32" pos:end="95:33">&lt;=</operator> <literal type="number" pos:start="95:35" pos:end="95:35">0</literal> <operator pos:start="95:37" pos:end="95:38">||</operator>

            <name pos:start="97:13" pos:end="97:18">offset</name> <operator pos:start="97:20" pos:end="97:20">+</operator> <call pos:start="97:22" pos:end="97:39"><name pos:start="97:22" pos:end="97:26">FFMAX</name><argument_list pos:start="97:27" pos:end="97:39">(<argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">size</name></expr></argument>, <argument pos:start="97:34" pos:end="97:38"><expr pos:start="97:34" pos:end="97:38"><name pos:start="97:34" pos:end="97:38">size2</name></expr></argument>)</argument_list></call> <operator pos:start="97:41" pos:end="97:41">&gt;</operator> <name pos:start="97:43" pos:end="97:50">buf_size</name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:39"><block_content pos:start="99:13" pos:end="99:39">

            <return pos:start="99:13" pos:end="99:39">return <expr pos:start="99:20" pos:end="99:38"><name pos:start="99:20" pos:end="99:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="103:9" pos:end="105:16"><if pos:start="103:9" pos:end="105:16">if<condition pos:start="103:11" pos:end="103:71">(<expr pos:start="103:12" pos:end="103:70"><call pos:start="103:12" pos:end="103:61"><name pos:start="103:12" pos:end="103:29">rv10_decode_packet</name><argument_list pos:start="103:30" pos:end="103:61">(<argument pos:start="103:31" pos:end="103:35"><expr pos:start="103:31" pos:end="103:35"><name pos:start="103:31" pos:end="103:35">avctx</name></expr></argument>, <argument pos:start="103:38" pos:end="103:47"><expr pos:start="103:38" pos:end="103:47"><name pos:start="103:38" pos:end="103:40">buf</name><operator pos:start="103:41" pos:end="103:41">+</operator><name pos:start="103:42" pos:end="103:47">offset</name></expr></argument>, <argument pos:start="103:50" pos:end="103:53"><expr pos:start="103:50" pos:end="103:53"><name pos:start="103:50" pos:end="103:53">size</name></expr></argument>, <argument pos:start="103:56" pos:end="103:60"><expr pos:start="103:56" pos:end="103:60"><name pos:start="103:56" pos:end="103:60">size2</name></expr></argument>)</argument_list></call> <operator pos:start="103:63" pos:end="103:63">&gt;</operator> <literal type="number" pos:start="103:65" pos:end="103:65">8</literal><operator pos:start="103:66" pos:end="103:66">*</operator><name pos:start="103:67" pos:end="103:70">size</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:16"><block_content pos:start="105:13" pos:end="105:16">

            <expr_stmt pos:start="105:13" pos:end="105:16"><expr pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:13">i</name><operator pos:start="105:14" pos:end="105:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="111:5" pos:end="141:5"><if pos:start="111:5" pos:end="141:5">if<condition pos:start="111:7" pos:end="111:63">(<expr pos:start="111:8" pos:end="111:62"><name pos:start="111:8" pos:end="111:29"><name pos:start="111:8" pos:end="111:8">s</name><operator pos:start="111:9" pos:end="111:10">-&gt;</operator><name pos:start="111:11" pos:end="111:29">current_picture_ptr</name></name> <operator pos:start="111:31" pos:end="111:32">!=</operator> <name pos:start="111:34" pos:end="111:37">NULL</name> <operator pos:start="111:39" pos:end="111:40">&amp;&amp;</operator> <name pos:start="111:42" pos:end="111:48"><name pos:start="111:42" pos:end="111:42">s</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:48">mb_y</name></name><operator pos:start="111:49" pos:end="111:50">&gt;=</operator><name pos:start="111:51" pos:end="111:62"><name pos:start="111:51" pos:end="111:51">s</name><operator pos:start="111:52" pos:end="111:53">-&gt;</operator><name pos:start="111:54" pos:end="111:62">mb_height</name></name></expr>)</condition><block pos:start="111:64" pos:end="141:5">{<block_content pos:start="113:9" pos:end="139:37">

        <expr_stmt pos:start="113:9" pos:end="113:27"><expr pos:start="113:9" pos:end="113:26"><call pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:23">ff_er_frame_end</name><argument_list pos:start="113:24" pos:end="113:26">(<argument pos:start="113:25" pos:end="113:25"><expr pos:start="113:25" pos:end="113:25"><name pos:start="113:25" pos:end="113:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><call pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:24">ff_MPV_frame_end</name><argument_list pos:start="115:25" pos:end="115:27">(<argument pos:start="115:26" pos:end="115:26"><expr pos:start="115:26" pos:end="115:26"><name pos:start="115:26" pos:end="115:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:62">(<expr pos:start="119:13" pos:end="119:61"><name pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:24">pict_type</name></name> <operator pos:start="119:26" pos:end="119:27">==</operator> <name pos:start="119:29" pos:end="119:45">AV_PICTURE_TYPE_B</name> <operator pos:start="119:47" pos:end="119:48">||</operator> <name pos:start="119:50" pos:end="119:61"><name pos:start="119:50" pos:end="119:50">s</name><operator pos:start="119:51" pos:end="119:52">-&gt;</operator><name pos:start="119:53" pos:end="119:61">low_delay</name></name></expr>)</condition> <block pos:start="119:64" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:46">

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><operator pos:start="121:13" pos:end="121:13">*</operator><name pos:start="121:14" pos:end="121:17">pict</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:45"><name pos:start="121:21" pos:end="121:21">s</name><operator pos:start="121:22" pos:end="121:23">-&gt;</operator><name pos:start="121:24" pos:end="121:42">current_picture_ptr</name><operator pos:start="121:43" pos:end="121:44">-&gt;</operator><name pos:start="121:45" pos:end="121:45">f</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="127:9">else if <condition pos:start="123:19" pos:end="123:47">(<expr pos:start="123:20" pos:end="123:46"><name pos:start="123:20" pos:end="123:38"><name pos:start="123:20" pos:end="123:20">s</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:38">last_picture_ptr</name></name> <operator pos:start="123:40" pos:end="123:41">!=</operator> <name pos:start="123:43" pos:end="123:46">NULL</name></expr>)</condition> <block pos:start="123:49" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:43">

            <expr_stmt pos:start="125:13" pos:end="125:43"><expr pos:start="125:13" pos:end="125:42"><operator pos:start="125:13" pos:end="125:13">*</operator><name pos:start="125:14" pos:end="125:17">pict</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <name pos:start="125:21" pos:end="125:42"><name pos:start="125:21" pos:end="125:21">s</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:39">last_picture_ptr</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:42">f</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if<condition pos:start="131:11" pos:end="131:47">(<expr pos:start="131:12" pos:end="131:46"><name pos:start="131:12" pos:end="131:30"><name pos:start="131:12" pos:end="131:12">s</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:30">last_picture_ptr</name></name> <operator pos:start="131:32" pos:end="131:33">||</operator> <name pos:start="131:35" pos:end="131:46"><name pos:start="131:35" pos:end="131:35">s</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:46">low_delay</name></name></expr>)</condition><block pos:start="131:48" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:41">

            <expr_stmt pos:start="133:13" pos:end="133:27"><expr pos:start="133:13" pos:end="133:26"><operator pos:start="133:13" pos:end="133:13">*</operator><name pos:start="133:14" pos:end="133:22">got_frame</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <literal type="number" pos:start="133:26" pos:end="133:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:31">ff_print_debug_info</name><argument_list pos:start="135:32" pos:end="135:40">(<argument pos:start="135:33" pos:end="135:33"><expr pos:start="135:33" pos:end="135:33"><name pos:start="135:33" pos:end="135:33">s</name></expr></argument>, <argument pos:start="135:36" pos:end="135:39"><expr pos:start="135:36" pos:end="135:39"><name pos:start="135:36" pos:end="135:39">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:37"><expr pos:start="139:9" pos:end="139:36"><name pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:30">current_picture_ptr</name></name><operator pos:start="139:31" pos:end="139:31">=</operator> <name pos:start="139:33" pos:end="139:36">NULL</name></expr>;</expr_stmt> <comment type="line" pos:start="139:39" pos:end="139:115">// so we can detect if frame_end was not called (find some nicer solution...)</comment>

    </block_content>}</block></if></if_stmt>



    <return pos:start="145:5" pos:end="145:23">return <expr pos:start="145:12" pos:end="145:22"><name pos:start="145:12" pos:end="145:22"><name pos:start="145:12" pos:end="145:16">avpkt</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
