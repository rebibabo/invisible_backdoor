<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21608.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">thread_init</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:44">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ThreadContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">thread_count</name> <init pos:start="9:22" pos:end="9:42">= <expr pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:28">avctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:42">thread_count</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:21">thread_count</name></expr>)</condition> <block pos:start="13:24" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:61">

        <decl_stmt pos:start="15:9" pos:end="15:46"><decl pos:start="15:9" pos:end="15:45"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:19">nb_cpus</name> <init pos:start="15:21" pos:end="15:45">= <expr pos:start="15:23" pos:end="15:45"><call pos:start="15:23" pos:end="15:45"><name pos:start="15:23" pos:end="15:38">get_logical_cpus</name><argument_list pos:start="15:39" pos:end="15:45">(<argument pos:start="15:40" pos:end="15:44"><expr pos:start="15:40" pos:end="15:44"><name pos:start="15:40" pos:end="15:44">avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="17:9" pos:end="17:77">// use number of cores + 1 as thread count if there is motre than one</comment>

        <if_stmt pos:start="19:9" pos:end="21:61"><if pos:start="19:9" pos:end="21:61">if <condition pos:start="19:12" pos:end="19:24">(<expr pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:19">nb_cpus</name> <operator pos:start="19:21" pos:end="19:21">&gt;</operator> <literal type="number" pos:start="19:23" pos:end="19:23">1</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:61"><block_content pos:start="21:13" pos:end="21:61">

            <expr_stmt pos:start="21:13" pos:end="21:61"><expr pos:start="21:13" pos:end="21:60"><name pos:start="21:13" pos:end="21:24">thread_count</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:46"><name pos:start="21:28" pos:end="21:32">avctx</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:46">thread_count</name></name> <operator pos:start="21:48" pos:end="21:48">=</operator> <name pos:start="21:50" pos:end="21:56">nb_cpus</name> <operator pos:start="21:58" pos:end="21:58">+</operator> <literal type="number" pos:start="21:60" pos:end="21:60">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:26">(<expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:20">thread_count</name> <operator pos:start="27:22" pos:end="27:23">&lt;=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>)</condition> <block pos:start="27:28" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:13">avctx</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:33">active_thread_type</name></name> <operator pos:start="29:35" pos:end="29:35">=</operator> <literal type="number" pos:start="29:37" pos:end="29:37">0</literal></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:5">c</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <call pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:18">av_mallocz</name><argument_list pos:start="37:19" pos:end="37:41">(<argument pos:start="37:20" pos:end="37:40"><expr pos:start="37:20" pos:end="37:40"><sizeof pos:start="37:20" pos:end="37:40">sizeof<argument_list pos:start="37:26" pos:end="37:40">(<argument pos:start="37:27" pos:end="37:39"><expr pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:39">ThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:18"><if pos:start="39:5" pos:end="41:18">if <condition pos:start="39:8" pos:end="39:11">(<expr pos:start="39:9" pos:end="39:10"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:10">c</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:18"><block_content pos:start="41:9" pos:end="41:18">

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:60"><expr pos:start="45:5" pos:end="45:59"><name pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:5">c</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:14">workers</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:59"><name pos:start="45:18" pos:end="45:27">av_mallocz</name><argument_list pos:start="45:28" pos:end="45:59">(<argument pos:start="45:29" pos:end="45:58"><expr pos:start="45:29" pos:end="45:58"><sizeof pos:start="45:29" pos:end="45:45">sizeof<argument_list pos:start="45:35" pos:end="45:45">(<argument pos:start="45:36" pos:end="45:44"><expr pos:start="45:36" pos:end="45:44"><name pos:start="45:36" pos:end="45:44">pthread_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="45:46" pos:end="45:46">*</operator><name pos:start="45:47" pos:end="45:58">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:19"><name pos:start="47:10" pos:end="47:10">c</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:19">workers</name></name></expr>)</condition> <block pos:start="47:22" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:19"><expr pos:start="49:9" pos:end="49:18"><call pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:15">av_free</name><argument_list pos:start="49:16" pos:end="49:18">(<argument pos:start="49:17" pos:end="49:17"><expr pos:start="49:17" pos:end="49:17"><name pos:start="49:17" pos:end="49:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:9">avctx</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:24">thread_opaque</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:28">c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:5">c</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:18">current_job</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:21"><expr pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:5">c</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:16">job_count</name></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:5">c</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:15">job_size</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:16"><expr pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:5">c</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:11">done</name></name> <operator pos:start="65:13" pos:end="65:13">=</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:50"><expr pos:start="67:5" pos:end="67:49"><call pos:start="67:5" pos:end="67:49"><name pos:start="67:5" pos:end="67:21">pthread_cond_init</name><argument_list pos:start="67:22" pos:end="67:49">(<argument pos:start="67:23" pos:end="67:42"><expr pos:start="67:23" pos:end="67:42"><operator pos:start="67:23" pos:end="67:23">&amp;</operator><name pos:start="67:24" pos:end="67:42"><name pos:start="67:24" pos:end="67:24">c</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:42">current_job_cond</name></name></expr></argument>, <argument pos:start="67:45" pos:end="67:48"><expr pos:start="67:45" pos:end="67:48"><name pos:start="67:45" pos:end="67:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><call pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:21">pthread_cond_init</name><argument_list pos:start="69:22" pos:end="69:46">(<argument pos:start="69:23" pos:end="69:39"><expr pos:start="69:23" pos:end="69:39"><operator pos:start="69:23" pos:end="69:23">&amp;</operator><name pos:start="69:24" pos:end="69:39"><name pos:start="69:24" pos:end="69:24">c</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:39">last_job_cond</name></name></expr></argument>, <argument pos:start="69:42" pos:end="69:45"><expr pos:start="69:42" pos:end="69:45"><name pos:start="69:42" pos:end="69:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:51"><expr pos:start="71:5" pos:end="71:50"><call pos:start="71:5" pos:end="71:50"><name pos:start="71:5" pos:end="71:22">pthread_mutex_init</name><argument_list pos:start="71:23" pos:end="71:50">(<argument pos:start="71:24" pos:end="71:43"><expr pos:start="71:24" pos:end="71:43"><operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:43"><name pos:start="71:25" pos:end="71:25">c</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:43">current_job_lock</name></name></expr></argument>, <argument pos:start="71:46" pos:end="71:49"><expr pos:start="71:46" pos:end="71:49"><name pos:start="71:46" pos:end="71:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:45"><expr pos:start="73:5" pos:end="73:44"><call pos:start="73:5" pos:end="73:44"><name pos:start="73:5" pos:end="73:22">pthread_mutex_lock</name><argument_list pos:start="73:23" pos:end="73:44">(<argument pos:start="73:24" pos:end="73:43"><expr pos:start="73:24" pos:end="73:43"><operator pos:start="73:24" pos:end="73:24">&amp;</operator><name pos:start="73:25" pos:end="73:43"><name pos:start="73:25" pos:end="73:25">c</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:43">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="75:5" pos:end="89:5">for <control pos:start="75:9" pos:end="75:34">(<init pos:start="75:10" pos:end="75:13"><expr pos:start="75:10" pos:end="75:12"><name pos:start="75:10" pos:end="75:10">i</name><operator pos:start="75:11" pos:end="75:11">=</operator><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</init> <condition pos:start="75:15" pos:end="75:29"><expr pos:start="75:15" pos:end="75:28"><name pos:start="75:15" pos:end="75:15">i</name><operator pos:start="75:16" pos:end="75:16">&lt;</operator><name pos:start="75:17" pos:end="75:28">thread_count</name></expr>;</condition> <incr pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:31">i</name><operator pos:start="75:32" pos:end="75:33">++</operator></expr></incr>)</control> <block pos:start="75:36" pos:end="89:5">{<block_content pos:start="77:9" pos:end="87:9">

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if<condition pos:start="77:11" pos:end="77:63">(<expr pos:start="77:12" pos:end="77:62"><call pos:start="77:12" pos:end="77:62"><name pos:start="77:12" pos:end="77:25">pthread_create</name><argument_list pos:start="77:26" pos:end="77:62">(<argument pos:start="77:27" pos:end="77:40"><expr pos:start="77:27" pos:end="77:40"><operator pos:start="77:27" pos:end="77:27">&amp;</operator><name pos:start="77:28" pos:end="77:40"><name pos:start="77:28" pos:end="77:28">c</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:37">workers</name><index pos:start="77:38" pos:end="77:40">[<expr pos:start="77:39" pos:end="77:39"><name pos:start="77:39" pos:end="77:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="77:43" pos:end="77:46"><expr pos:start="77:43" pos:end="77:46"><name pos:start="77:43" pos:end="77:46">NULL</name></expr></argument>, <argument pos:start="77:49" pos:end="77:54"><expr pos:start="77:49" pos:end="77:54"><name pos:start="77:49" pos:end="77:54">worker</name></expr></argument>, <argument pos:start="77:57" pos:end="77:61"><expr pos:start="77:57" pos:end="77:61"><name pos:start="77:57" pos:end="77:61">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:65" pos:end="87:9">{<block_content pos:start="79:12" pos:end="85:21">

           <expr_stmt pos:start="79:12" pos:end="79:35"><expr pos:start="79:12" pos:end="79:34"><name pos:start="79:12" pos:end="79:30"><name pos:start="79:12" pos:end="79:16">avctx</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:30">thread_count</name></name> <operator pos:start="79:32" pos:end="79:32">=</operator> <name pos:start="79:34" pos:end="79:34">i</name></expr>;</expr_stmt>

           <expr_stmt pos:start="81:12" pos:end="81:54"><expr pos:start="81:12" pos:end="81:53"><call pos:start="81:12" pos:end="81:53"><name pos:start="81:12" pos:end="81:31">pthread_mutex_unlock</name><argument_list pos:start="81:32" pos:end="81:53">(<argument pos:start="81:33" pos:end="81:52"><expr pos:start="81:33" pos:end="81:52"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:52"><name pos:start="81:34" pos:end="81:34">c</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:52">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="83:12" pos:end="83:33"><expr pos:start="83:12" pos:end="83:32"><call pos:start="83:12" pos:end="83:32"><name pos:start="83:12" pos:end="83:25">ff_thread_free</name><argument_list pos:start="83:26" pos:end="83:32">(<argument pos:start="83:27" pos:end="83:31"><expr pos:start="83:27" pos:end="83:31"><name pos:start="83:27" pos:end="83:31">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="85:12" pos:end="85:21">return <expr pos:start="85:19" pos:end="85:20"><operator pos:start="85:19" pos:end="85:19">-</operator><literal type="number" pos:start="85:20" pos:end="85:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="93:5" pos:end="93:49"><expr pos:start="93:5" pos:end="93:48"><call pos:start="93:5" pos:end="93:48"><name pos:start="93:5" pos:end="93:31">avcodec_thread_park_workers</name><argument_list pos:start="93:32" pos:end="93:48">(<argument pos:start="93:33" pos:end="93:33"><expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">c</name></expr></argument>, <argument pos:start="93:36" pos:end="93:47"><expr pos:start="93:36" pos:end="93:47"><name pos:start="93:36" pos:end="93:47">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:44"><expr pos:start="97:5" pos:end="97:43"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:9">avctx</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:18">execute</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:43">avcodec_thread_execute</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:46"><expr pos:start="99:5" pos:end="99:45"><name pos:start="99:5" pos:end="99:19"><name pos:start="99:5" pos:end="99:9">avctx</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:19">execute2</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:45">avcodec_thread_execute2</name></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
