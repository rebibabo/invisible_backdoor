<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7219.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">qemu_ram_free</name><parameter_list pos:start="1:19" pos:end="1:35">(<parameter pos:start="1:20" pos:end="1:34"><decl pos:start="1:20" pos:end="1:34"><type pos:start="1:20" pos:end="1:29"><name pos:start="1:20" pos:end="1:29">ram_addr_t</name></type> <name pos:start="1:31" pos:end="1:34">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="67:32">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">block</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:60">/* This assumes the iothread lock is taken here too.  */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:30"><expr pos:start="11:5" pos:end="11:29"><call pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:27">qemu_mutex_lock_ramlist</name><argument_list pos:start="11:28" pos:end="11:29">()</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:18">QTAILQ_FOREACH</name><argument_list pos:start="13:19" pos:end="13:49">(<argument pos:start="13:20" pos:end="13:24">block</argument>, <argument pos:start="13:27" pos:end="13:42">&amp;ram_list.blocks</argument>, <argument pos:start="13:45" pos:end="13:48">next</argument>)</argument_list></macro> <block pos:start="13:51" pos:end="65:5">{<block_content pos:start="15:9" pos:end="63:9">

        <if_stmt pos:start="15:9" pos:end="63:9"><if pos:start="15:9" pos:end="63:9">if <condition pos:start="15:12" pos:end="15:34">(<expr pos:start="15:13" pos:end="15:33"><name pos:start="15:13" pos:end="15:16">addr</name> <operator pos:start="15:18" pos:end="15:19">==</operator> <name pos:start="15:21" pos:end="15:33"><name pos:start="15:21" pos:end="15:25">block</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:33">offset</name></name></expr>)</condition> <block pos:start="15:36" pos:end="63:9">{<block_content pos:start="17:13" pos:end="61:18">

            <expr_stmt pos:start="17:13" pos:end="17:57"><expr pos:start="17:13" pos:end="17:56"><call pos:start="17:13" pos:end="17:56"><name pos:start="17:13" pos:end="17:25">QTAILQ_REMOVE</name><argument_list pos:start="17:26" pos:end="17:56">(<argument pos:start="17:27" pos:end="17:42"><expr pos:start="17:27" pos:end="17:42"><operator pos:start="17:27" pos:end="17:27">&amp;</operator><name pos:start="17:28" pos:end="17:42"><name pos:start="17:28" pos:end="17:35">ram_list</name><operator pos:start="17:36" pos:end="17:36">.</operator><name pos:start="17:37" pos:end="17:42">blocks</name></name></expr></argument>, <argument pos:start="17:45" pos:end="17:49"><expr pos:start="17:45" pos:end="17:49"><name pos:start="17:45" pos:end="17:49">block</name></expr></argument>, <argument pos:start="17:52" pos:end="17:55"><expr pos:start="17:52" pos:end="17:55"><name pos:start="17:52" pos:end="17:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="19:13" pos:end="19:38"><expr pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:30"><name pos:start="19:13" pos:end="19:20">ram_list</name><operator pos:start="19:21" pos:end="19:21">.</operator><name pos:start="19:22" pos:end="19:30">mru_block</name></name> <operator pos:start="19:32" pos:end="19:32">=</operator> <name pos:start="19:34" pos:end="19:37">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:31"><expr pos:start="21:13" pos:end="21:30"><name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:20">ram_list</name><operator pos:start="21:21" pos:end="21:21">.</operator><name pos:start="21:22" pos:end="21:28">version</name></name><operator pos:start="21:29" pos:end="21:30">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="57:13"><if pos:start="23:13" pos:end="27:13">if <condition pos:start="23:16" pos:end="23:49">(<expr pos:start="23:17" pos:end="23:48"><name pos:start="23:17" pos:end="23:28"><name pos:start="23:17" pos:end="23:21">block</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:28">flags</name></name> <operator pos:start="23:30" pos:end="23:30">&amp;</operator> <name pos:start="23:32" pos:end="23:48">RAM_PREALLOC_MASK</name></expr>)</condition> <block pos:start="23:51" pos:end="27:13">{<block_content pos:start="25:17" pos:end="25:17">

                <empty_stmt pos:start="25:17" pos:end="25:17">;</empty_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="27:15" pos:end="31:13">else if <condition pos:start="27:23" pos:end="27:37">(<expr pos:start="27:24" pos:end="27:36"><call pos:start="27:24" pos:end="27:36"><name pos:start="27:24" pos:end="27:34">xen_enabled</name><argument_list pos:start="27:35" pos:end="27:36">()</argument_list></call></expr>)</condition> <block pos:start="27:39" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:60">

                <expr_stmt pos:start="29:17" pos:end="29:60"><expr pos:start="29:17" pos:end="29:59"><call pos:start="29:17" pos:end="29:59"><name pos:start="29:17" pos:end="29:46">xen_invalidate_map_cache_entry</name><argument_list pos:start="29:47" pos:end="29:59">(<argument pos:start="29:48" pos:end="29:58"><expr pos:start="29:48" pos:end="29:58"><name pos:start="29:48" pos:end="29:58"><name pos:start="29:48" pos:end="29:52">block</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:58">host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="31:15" pos:end="53:13">else if <condition pos:start="31:23" pos:end="31:32">(<expr pos:start="31:24" pos:end="31:31"><name pos:start="31:24" pos:end="31:31">mem_path</name></expr>)</condition> <block pos:start="31:34" pos:end="53:13">{<block_content pos:start="35:17" pos:end="52:0">

<cpp:if pos:start="33:1" pos:end="33:49">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:49"><call pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:11">defined</name> <argument_list pos:start="33:13" pos:end="33:23">(<argument pos:start="33:14" pos:end="33:22"><expr pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:22">__linux__</name></expr></argument>)</argument_list></call> <operator pos:start="33:25" pos:end="33:26">&amp;&amp;</operator> <operator pos:start="33:28" pos:end="33:28">!</operator><call pos:start="33:29" pos:end="33:49"><name pos:start="33:29" pos:end="33:35">defined</name><argument_list pos:start="33:36" pos:end="33:49">(<argument pos:start="33:37" pos:end="33:48"><expr pos:start="33:37" pos:end="33:48"><name pos:start="33:37" pos:end="33:48">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="35:17" pos:end="48:0"><if pos:start="35:17" pos:end="41:17">if <condition pos:start="35:20" pos:end="35:30">(<expr pos:start="35:21" pos:end="35:29"><name pos:start="35:21" pos:end="35:29"><name pos:start="35:21" pos:end="35:25">block</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:29">fd</name></name></expr>)</condition> <block pos:start="35:32" pos:end="41:17">{<block_content pos:start="37:21" pos:end="39:37">

                    <expr_stmt pos:start="37:21" pos:end="37:55"><expr pos:start="37:21" pos:end="37:54"><call pos:start="37:21" pos:end="37:54"><name pos:start="37:21" pos:end="37:26">munmap</name><argument_list pos:start="37:27" pos:end="37:54">(<argument pos:start="37:28" pos:end="37:38"><expr pos:start="37:28" pos:end="37:38"><name pos:start="37:28" pos:end="37:38"><name pos:start="37:28" pos:end="37:32">block</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:38">host</name></name></expr></argument>, <argument pos:start="37:41" pos:end="37:53"><expr pos:start="37:41" pos:end="37:53"><name pos:start="37:41" pos:end="37:53"><name pos:start="37:41" pos:end="37:45">block</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:53">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="39:21" pos:end="39:37"><expr pos:start="39:21" pos:end="39:36"><call pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:25">close</name><argument_list pos:start="39:26" pos:end="39:36">(<argument pos:start="39:27" pos:end="39:35"><expr pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:31">block</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:35">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="41:19" pos:end="48:0">else <block pos:start="41:24" pos:end="48:0">{<block_content pos:start="43:21" pos:end="43:67">

                    <expr_stmt pos:start="43:21" pos:end="43:67"><expr pos:start="43:21" pos:end="43:66"><call pos:start="43:21" pos:end="43:66"><name pos:start="43:21" pos:end="43:38">qemu_anon_ram_free</name><argument_list pos:start="43:39" pos:end="43:66">(<argument pos:start="43:40" pos:end="43:50"><expr pos:start="43:40" pos:end="43:50"><name pos:start="43:40" pos:end="43:50"><name pos:start="43:40" pos:end="43:44">block</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:50">host</name></name></expr></argument>, <argument pos:start="43:53" pos:end="43:65"><expr pos:start="43:53" pos:end="43:65"><name pos:start="43:53" pos:end="43:65"><name pos:start="43:53" pos:end="43:57">block</name><operator pos:start="43:58" pos:end="43:59">-&gt;</operator><name pos:start="43:60" pos:end="43:65">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="49:17" pos:end="52:0"><expr pos:start="49:17" pos:end="49:23"><call pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:21">abort</name><argument_list pos:start="49:22" pos:end="49:23">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="53:15" pos:end="57:13">else <block pos:start="53:20" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:63">

                <expr_stmt pos:start="55:17" pos:end="55:63"><expr pos:start="55:17" pos:end="55:62"><call pos:start="55:17" pos:end="55:62"><name pos:start="55:17" pos:end="55:34">qemu_anon_ram_free</name><argument_list pos:start="55:35" pos:end="55:62">(<argument pos:start="55:36" pos:end="55:46"><expr pos:start="55:36" pos:end="55:46"><name pos:start="55:36" pos:end="55:46"><name pos:start="55:36" pos:end="55:40">block</name><operator pos:start="55:41" pos:end="55:42">-&gt;</operator><name pos:start="55:43" pos:end="55:46">host</name></name></expr></argument>, <argument pos:start="55:49" pos:end="55:61"><expr pos:start="55:49" pos:end="55:61"><name pos:start="55:49" pos:end="55:61"><name pos:start="55:49" pos:end="55:53">block</name><operator pos:start="55:54" pos:end="55:55">-&gt;</operator><name pos:start="55:56" pos:end="55:61">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:26"><expr pos:start="59:13" pos:end="59:25"><call pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:18">g_free</name><argument_list pos:start="59:19" pos:end="59:25">(<argument pos:start="59:20" pos:end="59:24"><expr pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:24">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="67:5" pos:end="67:32"><expr pos:start="67:5" pos:end="67:31"><call pos:start="67:5" pos:end="67:31"><name pos:start="67:5" pos:end="67:29">qemu_mutex_unlock_ramlist</name><argument_list pos:start="67:30" pos:end="67:31">()</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>
</unit>
