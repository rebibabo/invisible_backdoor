<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1303.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">nbd_client</name><parameter_list pos:start="1:15" pos:end="1:22">(<parameter pos:start="1:16" pos:end="1:21"><decl pos:start="1:16" pos:end="1:21"><type pos:start="1:16" pos:end="1:18"><name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:21">fd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:15">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">serrno</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:28"><expr pos:start="11:5" pos:end="11:27"><call pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:9">TRACE</name><argument_list pos:start="11:10" pos:end="11:27">(<argument pos:start="11:11" pos:end="11:26"><expr pos:start="11:11" pos:end="11:26"><literal type="string" pos:start="11:11" pos:end="11:26">"Doing NBD loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:30"><name pos:start="15:11" pos:end="15:15">ioctl</name><argument_list pos:start="15:16" pos:end="15:30">(<argument pos:start="15:17" pos:end="15:18"><expr pos:start="15:17" pos:end="15:18"><name pos:start="15:17" pos:end="15:18">fd</name></expr></argument>, <argument pos:start="15:21" pos:end="15:29"><expr pos:start="15:21" pos:end="15:29"><name pos:start="15:21" pos:end="15:29">NBD_DO_IT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:36">(<expr pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:14">==</operator> <operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal> <operator pos:start="17:19" pos:end="17:20">&amp;&amp;</operator> <name pos:start="17:22" pos:end="17:26">errno</name> <operator pos:start="17:28" pos:end="17:29">==</operator> <name pos:start="17:31" pos:end="17:35">EPIPE</name></expr>)</condition> <block pos:start="17:38" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:16">

        <comment type="block" pos:start="19:9" pos:end="25:11">/* NBD_DO_IT normally returns EPIPE when someone has disconnected

         * the socket via NBD_DISCONNECT.  We do not want to return 1 in

         * that case.

         */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:10">serrno</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:18">errno</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:61"><expr pos:start="35:5" pos:end="35:60"><call pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:9">TRACE</name><argument_list pos:start="35:10" pos:end="35:60">(<argument pos:start="35:11" pos:end="35:36"><expr pos:start="35:11" pos:end="35:36"><literal type="string" pos:start="35:11" pos:end="35:36">"NBD loop returned %d: %s"</literal></expr></argument>, <argument pos:start="35:39" pos:end="35:41"><expr pos:start="35:39" pos:end="35:41"><name pos:start="35:39" pos:end="35:41">ret</name></expr></argument>, <argument pos:start="35:44" pos:end="35:59"><expr pos:start="35:44" pos:end="35:59"><call pos:start="35:44" pos:end="35:59"><name pos:start="35:44" pos:end="35:51">strerror</name><argument_list pos:start="35:52" pos:end="35:59">(<argument pos:start="35:53" pos:end="35:58"><expr pos:start="35:53" pos:end="35:58"><name pos:start="35:53" pos:end="35:58">serrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><call pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:9">TRACE</name><argument_list pos:start="39:10" pos:end="39:31">(<argument pos:start="39:11" pos:end="39:30"><expr pos:start="39:11" pos:end="39:30"><literal type="string" pos:start="39:11" pos:end="39:30">"Clearing NBD queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><call pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:9">ioctl</name><argument_list pos:start="41:10" pos:end="41:28">(<argument pos:start="41:11" pos:end="41:12"><expr pos:start="41:11" pos:end="41:12"><name pos:start="41:11" pos:end="41:12">fd</name></expr></argument>, <argument pos:start="41:15" pos:end="41:27"><expr pos:start="41:15" pos:end="41:27"><name pos:start="41:15" pos:end="41:27">NBD_CLEAR_QUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><call pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:9">TRACE</name><argument_list pos:start="45:10" pos:end="45:32">(<argument pos:start="45:11" pos:end="45:31"><expr pos:start="45:11" pos:end="45:31"><literal type="string" pos:start="45:11" pos:end="45:31">"Clearing NBD socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><call pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:9">ioctl</name><argument_list pos:start="47:10" pos:end="47:29">(<argument pos:start="47:11" pos:end="47:12"><expr pos:start="47:11" pos:end="47:12"><name pos:start="47:11" pos:end="47:12">fd</name></expr></argument>, <argument pos:start="47:15" pos:end="47:28"><expr pos:start="47:15" pos:end="47:28"><name pos:start="47:15" pos:end="47:28">NBD_CLEAR_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:9">errno</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:18">serrno</name></expr>;</expr_stmt>

    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
