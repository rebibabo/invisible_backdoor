<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26570.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">tcg_region_init</name><parameter_list pos:start="1:21" pos:end="1:26">(<parameter pos:start="1:22" pos:end="1:25"><decl pos:start="1:22" pos:end="1:25"><type pos:start="1:22" pos:end="1:25"><name pos:start="1:22" pos:end="1:25">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:5">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">buf</name> <init pos:start="5:15" pos:end="5:44">= <expr pos:start="5:17" pos:end="5:44"><name pos:start="5:17" pos:end="5:44"><name pos:start="5:17" pos:end="5:28">tcg_init_ctx</name><operator pos:start="5:29" pos:end="5:29">.</operator><name pos:start="5:30" pos:end="5:44">code_gen_buffer</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">aligned</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:15">size</name> <init pos:start="9:17" pos:end="9:51">= <expr pos:start="9:19" pos:end="9:51"><name pos:start="9:19" pos:end="9:51"><name pos:start="9:19" pos:end="9:30">tcg_init_ctx</name><operator pos:start="9:31" pos:end="9:31">.</operator><name pos:start="9:32" pos:end="9:51">code_gen_buffer_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:47"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:20">page_size</name> <init pos:start="11:22" pos:end="11:47">= <expr pos:start="11:24" pos:end="11:47"><name pos:start="11:24" pos:end="11:47">qemu_real_host_page_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:22">region_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:20">n_regions</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:12">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:80">/* We do not yet support multiple TCG contexts, so use one region for now */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:13">n_regions</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:79">/* The first region will be 'aligned - buf' bytes larger than the others */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:11">aligned</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:47"><name pos:start="29:15" pos:end="29:31">QEMU_ALIGN_PTR_UP</name><argument_list pos:start="29:32" pos:end="29:47">(<argument pos:start="29:33" pos:end="29:35"><expr pos:start="29:33" pos:end="29:35"><name pos:start="29:33" pos:end="29:35">buf</name></expr></argument>, <argument pos:start="29:38" pos:end="29:46"><expr pos:start="29:38" pos:end="29:46"><name pos:start="29:38" pos:end="29:46">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:60"><expr pos:start="31:5" pos:end="31:59"><call pos:start="31:5" pos:end="31:59"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:59">(<argument pos:start="31:14" pos:end="31:58"><expr pos:start="31:14" pos:end="31:58"><name pos:start="31:14" pos:end="31:20">aligned</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <name pos:start="31:24" pos:end="31:51"><name pos:start="31:24" pos:end="31:35">tcg_init_ctx</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:51">code_gen_buffer</name></name> <operator pos:start="31:53" pos:end="31:53">+</operator> <name pos:start="31:55" pos:end="31:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="33:5" pos:end="41:7">/*

     * Make region_size a multiple of page_size, using aligned as the start.

     * As a result of this we might end up with a few extra pages at the end of

     * the buffer; we will assign those to the last region.

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:55"><expr pos:start="43:5" pos:end="43:54"><name pos:start="43:5" pos:end="43:15">region_size</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <operator pos:start="43:19" pos:end="43:19">(</operator><name pos:start="43:20" pos:end="43:23">size</name> <operator pos:start="43:25" pos:end="43:25">-</operator> <operator pos:start="43:27" pos:end="43:27">(</operator><name pos:start="43:28" pos:end="43:34">aligned</name> <operator pos:start="43:36" pos:end="43:36">-</operator> <name pos:start="43:38" pos:end="43:40">buf</name><operator pos:start="43:41" pos:end="43:41">)</operator><operator pos:start="43:42" pos:end="43:42">)</operator> <operator pos:start="43:44" pos:end="43:44">/</operator> <name pos:start="43:46" pos:end="43:54">n_regions</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:15">region_size</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:57"><name pos:start="45:19" pos:end="45:33">QEMU_ALIGN_DOWN</name><argument_list pos:start="45:34" pos:end="45:57">(<argument pos:start="45:35" pos:end="45:45"><expr pos:start="45:35" pos:end="45:45"><name pos:start="45:35" pos:end="45:45">region_size</name></expr></argument>, <argument pos:start="45:48" pos:end="45:56"><expr pos:start="45:48" pos:end="45:56"><name pos:start="45:48" pos:end="45:56">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:66">/* A region must have at least 2 pages; one code, one guard */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><call pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:12">g_assert</name><argument_list pos:start="51:13" pos:end="51:42">(<argument pos:start="51:14" pos:end="51:41"><expr pos:start="51:14" pos:end="51:41"><name pos:start="51:14" pos:end="51:24">region_size</name> <operator pos:start="51:26" pos:end="51:27">&gt;=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">2</literal> <operator pos:start="51:31" pos:end="51:31">*</operator> <name pos:start="51:33" pos:end="51:41">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:32">/* init the region struct */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:34"><expr pos:start="57:5" pos:end="57:33"><call pos:start="57:5" pos:end="57:33"><name pos:start="57:5" pos:end="57:19">qemu_mutex_init</name><argument_list pos:start="57:20" pos:end="57:33">(<argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><operator pos:start="57:21" pos:end="57:21">&amp;</operator><name pos:start="57:22" pos:end="57:32"><name pos:start="57:22" pos:end="57:27">region</name><operator pos:start="57:28" pos:end="57:28">.</operator><name pos:start="57:29" pos:end="57:32">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:10">region</name><operator pos:start="59:11" pos:end="59:11">.</operator><name pos:start="59:12" pos:end="59:12">n</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:24">n_regions</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:42"><expr pos:start="61:5" pos:end="61:41"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:10">region</name><operator pos:start="61:11" pos:end="61:11">.</operator><name pos:start="61:12" pos:end="61:15">size</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:29">region_size</name> <operator pos:start="61:31" pos:end="61:31">-</operator> <name pos:start="61:33" pos:end="61:41">page_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:32"><expr pos:start="63:5" pos:end="63:31"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:10">region</name><operator pos:start="63:11" pos:end="63:11">.</operator><name pos:start="63:12" pos:end="63:17">stride</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:31">region_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:10">region</name><operator pos:start="65:11" pos:end="65:11">.</operator><name pos:start="65:12" pos:end="65:16">start</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:22">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:24"><name pos:start="67:5" pos:end="67:10">region</name><operator pos:start="67:11" pos:end="67:11">.</operator><name pos:start="67:12" pos:end="67:24">start_aligned</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:34">aligned</name></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:70">/* page-align the end, since its last page will be a guard page */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:60"><expr pos:start="71:5" pos:end="71:59"><name pos:start="71:5" pos:end="71:14"><name pos:start="71:5" pos:end="71:10">region</name><operator pos:start="71:11" pos:end="71:11">.</operator><name pos:start="71:12" pos:end="71:14">end</name></name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:59"><name pos:start="71:18" pos:end="71:36">QEMU_ALIGN_PTR_DOWN</name><argument_list pos:start="71:37" pos:end="71:59">(<argument pos:start="71:38" pos:end="71:47"><expr pos:start="71:38" pos:end="71:47"><name pos:start="71:38" pos:end="71:40">buf</name> <operator pos:start="71:42" pos:end="71:42">+</operator> <name pos:start="71:44" pos:end="71:47">size</name></expr></argument>, <argument pos:start="71:50" pos:end="71:58"><expr pos:start="71:50" pos:end="71:58"><name pos:start="71:50" pos:end="71:58">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:42">/* account for that last guard page */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:28"><expr pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:10">region</name><operator pos:start="75:11" pos:end="75:11">.</operator><name pos:start="75:12" pos:end="75:14">end</name></name> <operator pos:start="75:16" pos:end="75:17">-=</operator> <name pos:start="75:19" pos:end="75:27">page_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:25">/* set guard pages */</comment>

    <for pos:start="81:5" pos:end="95:5">for <control pos:start="81:9" pos:end="81:34">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:29"><expr pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:26">region</name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:28">n</name></name></expr>;</condition> <incr pos:start="81:31" pos:end="81:33"><expr pos:start="81:31" pos:end="81:33"><name pos:start="81:31" pos:end="81:31">i</name><operator pos:start="81:32" pos:end="81:33">++</operator></expr></incr>)</control> <block pos:start="81:36" pos:end="95:5">{<block_content pos:start="83:9" pos:end="93:22">

        <decl_stmt pos:start="83:9" pos:end="83:26"><decl pos:start="83:9" pos:end="83:19"><type pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:12">void</name> <modifier pos:start="83:14" pos:end="83:14">*</modifier></type><name pos:start="83:15" pos:end="83:19">start</name></decl>, <decl pos:start="83:22" pos:end="83:25"><type ref="prev" pos:start="83:9" pos:end="83:14"><modifier pos:start="83:22" pos:end="83:22">*</modifier></type><name pos:start="83:23" pos:end="83:25">end</name></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:15"><decl pos:start="85:9" pos:end="85:14"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:14">rc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:43"><expr pos:start="89:9" pos:end="89:42"><call pos:start="89:9" pos:end="89:42"><name pos:start="89:9" pos:end="89:25">tcg_region_bounds</name><argument_list pos:start="89:26" pos:end="89:42">(<argument pos:start="89:27" pos:end="89:27"><expr pos:start="89:27" pos:end="89:27"><name pos:start="89:27" pos:end="89:27">i</name></expr></argument>, <argument pos:start="89:30" pos:end="89:35"><expr pos:start="89:30" pos:end="89:35"><operator pos:start="89:30" pos:end="89:30">&amp;</operator><name pos:start="89:31" pos:end="89:35">start</name></expr></argument>, <argument pos:start="89:38" pos:end="89:41"><expr pos:start="89:38" pos:end="89:41"><operator pos:start="89:38" pos:end="89:38">&amp;</operator><name pos:start="89:39" pos:end="89:41">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:48"><expr pos:start="91:9" pos:end="91:47"><name pos:start="91:9" pos:end="91:10">rc</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <call pos:start="91:14" pos:end="91:47"><name pos:start="91:14" pos:end="91:31">qemu_mprotect_none</name><argument_list pos:start="91:32" pos:end="91:47">(<argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">end</name></expr></argument>, <argument pos:start="91:38" pos:end="91:46"><expr pos:start="91:38" pos:end="91:46"><name pos:start="91:38" pos:end="91:46">page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><call pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:16">g_assert</name><argument_list pos:start="93:17" pos:end="93:21">(<argument pos:start="93:18" pos:end="93:20"><expr pos:start="93:18" pos:end="93:20"><operator pos:start="93:18" pos:end="93:18">!</operator><name pos:start="93:19" pos:end="93:20">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="99:5" pos:end="99:80">/* We do not yet support multiple TCG contexts so allocate the region now */</comment>

    <block pos:start="101:5" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:23">

        <decl_stmt pos:start="103:9" pos:end="103:61"><decl pos:start="103:9" pos:end="103:60"><type pos:start="103:9" pos:end="103:12"><name pos:start="103:9" pos:end="103:12">bool</name></type> <name pos:start="103:14" pos:end="103:16">err</name> <init pos:start="103:18" pos:end="103:60">= <expr pos:start="103:20" pos:end="103:60"><call pos:start="103:20" pos:end="103:60"><name pos:start="103:20" pos:end="103:51">tcg_region_initial_alloc__locked</name><argument_list pos:start="103:52" pos:end="103:60">(<argument pos:start="103:53" pos:end="103:59"><expr pos:start="103:53" pos:end="103:59"><name pos:start="103:53" pos:end="103:59">tcg_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><call pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:16">g_assert</name><argument_list pos:start="107:17" pos:end="107:22">(<argument pos:start="107:18" pos:end="107:21"><expr pos:start="107:18" pos:end="107:21"><operator pos:start="107:18" pos:end="107:18">!</operator><name pos:start="107:19" pos:end="107:21">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
