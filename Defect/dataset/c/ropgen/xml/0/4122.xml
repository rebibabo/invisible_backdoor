<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4122.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:33">find_component</name><parameter_list pos:start="1:34" pos:end="3:76">(<parameter pos:start="1:35" pos:end="1:57"><decl pos:start="1:35" pos:end="1:57"><type pos:start="1:35" pos:end="1:57"><name pos:start="1:35" pos:end="1:44">OMXContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:57">omx_context</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:63">void</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:71">logctx</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:50"><decl pos:start="3:35" pos:end="3:50"><type pos:start="3:35" pos:end="3:50"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">role</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:61"><decl pos:start="3:53" pos:end="3:61"><type pos:start="3:53" pos:end="3:61"><name pos:start="3:53" pos:end="3:56">char</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:61">str</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:75"><decl pos:start="3:64" pos:end="3:75"><type pos:start="3:64" pos:end="3:75"><name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:75">str_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:15">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">OMX_U32</name></type> <name pos:start="7:13" pos:end="7:13">i</name></decl>, <decl pos:start="7:16" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:16" pos:end="7:18">num</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier><modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:21">components</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:18">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">CONFIG_OMX_RPI</name></expr></cpp:if>

    <if_stmt pos:start="17:5" pos:end="26:0"><if pos:start="17:5" pos:end="26:0">if <condition pos:start="17:8" pos:end="17:50">(<expr pos:start="17:9" pos:end="17:49"><call pos:start="17:9" pos:end="17:49"><name pos:start="17:9" pos:end="17:19">av_strstart</name><argument_list pos:start="17:20" pos:end="17:49">(<argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">role</name></expr></argument>, <argument pos:start="17:27" pos:end="17:42"><expr pos:start="17:27" pos:end="17:42"><literal type="string" pos:start="17:27" pos:end="17:42">"video_encoder."</literal></expr></argument>, <argument pos:start="17:45" pos:end="17:48"><expr pos:start="17:45" pos:end="17:48"><name pos:start="17:45" pos:end="17:48">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:52" pos:end="26:0">{<block_content pos:start="19:9" pos:end="21:17">

        <expr_stmt pos:start="19:9" pos:end="19:63"><expr pos:start="19:9" pos:end="19:62"><call pos:start="19:9" pos:end="19:62"><name pos:start="19:9" pos:end="19:18">av_strlcpy</name><argument_list pos:start="19:19" pos:end="19:62">(<argument pos:start="19:20" pos:end="19:22"><expr pos:start="19:20" pos:end="19:22"><name pos:start="19:20" pos:end="19:22">str</name></expr></argument>, <argument pos:start="19:25" pos:end="19:51"><expr pos:start="19:25" pos:end="19:51"><literal type="string" pos:start="19:25" pos:end="19:51">"OMX.broadcom.video_encode"</literal></expr></argument>, <argument pos:start="19:54" pos:end="19:61"><expr pos:start="19:54" pos:end="19:61"><name pos:start="19:54" pos:end="19:61">str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="27:5" pos:end="27:72"><expr pos:start="27:5" pos:end="27:71"><call pos:start="27:5" pos:end="27:71"><name pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:15">omx_context</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:40">ptr_GetComponentsOfRole</name></name><argument_list pos:start="27:41" pos:end="27:71">(<argument pos:start="27:42" pos:end="27:58"><expr pos:start="27:42" pos:end="27:58"><operator pos:start="27:42" pos:end="27:42">(</operator><name pos:start="27:43" pos:end="27:52">OMX_STRING</name><operator pos:start="27:53" pos:end="27:53">)</operator> <name pos:start="27:55" pos:end="27:58">role</name></expr></argument>, <argument pos:start="27:61" pos:end="27:64"><expr pos:start="27:61" pos:end="27:64"><operator pos:start="27:61" pos:end="27:61">&amp;</operator><name pos:start="27:62" pos:end="27:64">num</name></expr></argument>, <argument pos:start="27:67" pos:end="27:70"><expr pos:start="27:67" pos:end="27:70"><name pos:start="27:67" pos:end="27:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:13">(<expr pos:start="29:9" pos:end="29:12"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:12">num</name></expr>)</condition> <block pos:start="29:15" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:41">

        <expr_stmt pos:start="31:9" pos:end="31:81"><expr pos:start="31:9" pos:end="31:80"><call pos:start="31:9" pos:end="31:80"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:80">(<argument pos:start="31:16" pos:end="31:21"><expr pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:21">logctx</name></expr></argument>, <argument pos:start="31:24" pos:end="31:37"><expr pos:start="31:24" pos:end="31:37"><name pos:start="31:24" pos:end="31:37">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="31:40" pos:end="31:73"><expr pos:start="31:40" pos:end="31:73"><literal type="string" pos:start="31:40" pos:end="31:73">"No component for role %s found\n"</literal></expr></argument>, <argument pos:start="31:76" pos:end="31:79"><expr pos:start="31:76" pos:end="31:79"><name pos:start="31:76" pos:end="31:79">role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:41">return <expr pos:start="33:16" pos:end="33:40"><name pos:start="33:16" pos:end="33:40">AVERROR_ENCODER_NOT_FOUND</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:49"><expr pos:start="37:5" pos:end="37:48"><name pos:start="37:5" pos:end="37:14">components</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:48"><name pos:start="37:18" pos:end="37:27">av_mallocz</name><argument_list pos:start="37:28" pos:end="37:48">(<argument pos:start="37:29" pos:end="37:47"><expr pos:start="37:29" pos:end="37:47"><sizeof pos:start="37:29" pos:end="37:41">sizeof<argument_list pos:start="37:35" pos:end="37:41">(<argument pos:start="37:36" pos:end="37:40"><expr pos:start="37:36" pos:end="37:40"><name pos:start="37:36" pos:end="37:39">char</name><operator pos:start="37:40" pos:end="37:40">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="37:43" pos:end="37:43">*</operator> <name pos:start="37:45" pos:end="37:47">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:31"><if pos:start="39:5" pos:end="41:31">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:19">components</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:31"><block_content pos:start="41:9" pos:end="41:31">

        <return pos:start="41:9" pos:end="41:31">return <expr pos:start="41:16" pos:end="41:30"><call pos:start="41:16" pos:end="41:30"><name pos:start="41:16" pos:end="41:22">AVERROR</name><argument_list pos:start="41:23" pos:end="41:30">(<argument pos:start="41:24" pos:end="41:29"><expr pos:start="41:24" pos:end="41:29"><name pos:start="41:24" pos:end="41:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="43:5" pos:end="55:5">for <control pos:start="43:9" pos:end="43:29">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:24"><expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <name pos:start="43:21" pos:end="43:23">num</name></expr>;</condition> <incr pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:26">i</name><operator pos:start="43:27" pos:end="43:28">++</operator></expr></incr>)</control> <block pos:start="43:31" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:9">

        <expr_stmt pos:start="45:9" pos:end="45:60"><expr pos:start="45:9" pos:end="45:59"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:18">components</name><index pos:start="45:19" pos:end="45:21">[<expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">i</name></expr>]</index></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <call pos:start="45:25" pos:end="45:59"><name pos:start="45:25" pos:end="45:34">av_mallocz</name><argument_list pos:start="45:35" pos:end="45:59">(<argument pos:start="45:36" pos:end="45:58"><expr pos:start="45:36" pos:end="45:58"><name pos:start="45:36" pos:end="45:58">OMX_MAX_STRINGNAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:24">(<expr pos:start="47:13" pos:end="47:23"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:23">components</name></expr>)</condition> <block pos:start="47:26" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:21">

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:33"><name pos:start="49:19" pos:end="49:25">AVERROR</name><argument_list pos:start="49:26" pos:end="49:33">(<argument pos:start="49:27" pos:end="49:32"><expr pos:start="49:27" pos:end="49:32"><name pos:start="49:27" pos:end="49:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="51:13" pos:end="51:21">goto <name pos:start="51:18" pos:end="51:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="57:5" pos:end="57:89"><expr pos:start="57:5" pos:end="57:88"><call pos:start="57:5" pos:end="57:88"><name pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:15">omx_context</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:40">ptr_GetComponentsOfRole</name></name><argument_list pos:start="57:41" pos:end="57:88">(<argument pos:start="57:42" pos:end="57:58"><expr pos:start="57:42" pos:end="57:58"><operator pos:start="57:42" pos:end="57:42">(</operator><name pos:start="57:43" pos:end="57:52">OMX_STRING</name><operator pos:start="57:53" pos:end="57:53">)</operator> <name pos:start="57:55" pos:end="57:58">role</name></expr></argument>, <argument pos:start="57:61" pos:end="57:64"><expr pos:start="57:61" pos:end="57:64"><operator pos:start="57:61" pos:end="57:61">&amp;</operator><name pos:start="57:62" pos:end="57:64">num</name></expr></argument>, <argument pos:start="57:67" pos:end="57:87"><expr pos:start="57:67" pos:end="57:87"><operator pos:start="57:67" pos:end="57:67">(</operator><name pos:start="57:68" pos:end="57:73">OMX_U8</name><operator pos:start="57:74" pos:end="57:74">*</operator><operator pos:start="57:75" pos:end="57:75">*</operator><operator pos:start="57:76" pos:end="57:76">)</operator> <name pos:start="57:78" pos:end="57:87">components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:45"><expr pos:start="59:5" pos:end="59:44"><call pos:start="59:5" pos:end="59:44"><name pos:start="59:5" pos:end="59:14">av_strlcpy</name><argument_list pos:start="59:15" pos:end="59:44">(<argument pos:start="59:16" pos:end="59:18"><expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">str</name></expr></argument>, <argument pos:start="59:21" pos:end="59:33"><expr pos:start="59:21" pos:end="59:33"><name pos:start="59:21" pos:end="59:33"><name pos:start="59:21" pos:end="59:30">components</name><index pos:start="59:31" pos:end="59:33">[<expr pos:start="59:32" pos:end="59:32"><literal type="number" pos:start="59:32" pos:end="59:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:36" pos:end="59:43"><expr pos:start="59:36" pos:end="59:43"><name pos:start="59:36" pos:end="59:43">str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="61:1" pos:end="61:4"><name pos:start="61:1" pos:end="61:3">end</name>:</label>

    <for pos:start="63:5" pos:end="65:31">for <control pos:start="63:9" pos:end="63:29">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:24"><expr pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:23">num</name></expr>;</condition> <incr pos:start="63:26" pos:end="63:28"><expr pos:start="63:26" pos:end="63:28"><name pos:start="63:26" pos:end="63:26">i</name><operator pos:start="63:27" pos:end="63:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:9" pos:end="65:31"><block_content pos:start="65:9" pos:end="65:31">

        <expr_stmt pos:start="65:9" pos:end="65:31"><expr pos:start="65:9" pos:end="65:30"><call pos:start="65:9" pos:end="65:30"><name pos:start="65:9" pos:end="65:15">av_free</name><argument_list pos:start="65:16" pos:end="65:30">(<argument pos:start="65:17" pos:end="65:29"><expr pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:26">components</name><index pos:start="65:27" pos:end="65:29">[<expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="67:5" pos:end="67:24"><expr pos:start="67:5" pos:end="67:23"><call pos:start="67:5" pos:end="67:23"><name pos:start="67:5" pos:end="67:11">av_free</name><argument_list pos:start="67:12" pos:end="67:23">(<argument pos:start="67:13" pos:end="67:22"><expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:22">components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
