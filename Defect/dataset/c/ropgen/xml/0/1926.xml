<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1926.c" pos:tabs="8"><function pos:start="1:1" pos:end="393:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">helper_lcall_protected_T0_T1</name><parameter_list pos:start="1:34" pos:end="1:58">(<parameter pos:start="1:35" pos:end="1:43"><decl pos:start="1:35" pos:end="1:43"><type pos:start="1:35" pos:end="1:43"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:43">shift</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:57">next_eip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="393:1">{<block_content pos:start="5:5" pos:end="391:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">new_cs</name></decl>, <decl pos:start="5:17" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:23">new_eip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">e1</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">e2</name></decl>, <decl pos:start="7:22" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:24">cpl</name></decl>, <decl pos:start="7:27" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:27" pos:end="7:29">dpl</name></decl>, <decl pos:start="7:32" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:32" pos:end="7:34">rpl</name></decl>, <decl pos:start="7:37" pos:end="7:44"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:37" pos:end="7:44">selector</name></decl>, <decl pos:start="7:47" pos:end="7:52"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:47" pos:end="7:52">offset</name></decl>, <decl pos:start="7:55" pos:end="7:65"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:55" pos:end="7:65">param_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:15">ss</name></decl>, <decl pos:start="9:18" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:22">ss_e1</name></decl>, <decl pos:start="9:25" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:25" pos:end="9:29">ss_e2</name></decl>, <decl pos:start="9:32" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:32" pos:end="9:40">push_size</name></decl>, <decl pos:start="9:43" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:43" pos:end="9:44">sp</name></decl>, <decl pos:start="9:47" pos:end="9:50"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:47" pos:end="9:50">type</name></decl>, <decl pos:start="9:53" pos:end="9:58"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:53" pos:end="9:58">ss_dpl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">old_ss</name></decl>, <decl pos:start="11:22" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:22" pos:end="11:28">old_esp</name></decl>, <decl pos:start="11:31" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:31" pos:end="11:33">val</name></decl>, <decl pos:start="11:36" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:36" pos:end="11:36">i</name></decl>, <decl pos:start="11:39" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:39" pos:end="11:43">limit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ssp</name></decl>, <decl pos:start="13:19" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">old_ssp</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="17:5" pos:end="17:16"><expr pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10">new_cs</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:15">T0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:11">new_eip</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:16">T1</name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:43"><if pos:start="21:5" pos:end="23:43">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:15">new_cs</name> <operator pos:start="21:17" pos:end="21:17">&amp;</operator> <literal type="number" pos:start="21:19" pos:end="21:24">0xfffc</literal><operator pos:start="21:25" pos:end="21:25">)</operator> <operator pos:start="21:27" pos:end="21:28">==</operator> <literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:43"><block_content pos:start="23:9" pos:end="23:43">

        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><call pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:27">raise_exception_err</name><argument_list pos:start="23:28" pos:end="23:42">(<argument pos:start="23:29" pos:end="23:38"><expr pos:start="23:29" pos:end="23:38"><name pos:start="23:29" pos:end="23:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="23:41" pos:end="23:41"><expr pos:start="23:41" pos:end="23:41"><literal type="number" pos:start="23:41" pos:end="23:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="27:57"><if pos:start="25:5" pos:end="27:57">if <condition pos:start="25:8" pos:end="25:44">(<expr pos:start="25:9" pos:end="25:43"><call pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:20">load_segment</name><argument_list pos:start="25:21" pos:end="25:38">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><operator pos:start="25:22" pos:end="25:22">&amp;</operator><name pos:start="25:23" pos:end="25:24">e1</name></expr></argument>, <argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:29">e2</name></expr></argument>, <argument pos:start="25:32" pos:end="25:37"><expr pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:37">new_cs</name></expr></argument>)</argument_list></call> <operator pos:start="25:40" pos:end="25:41">!=</operator> <literal type="number" pos:start="25:43" pos:end="25:43">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:57"><block_content pos:start="27:9" pos:end="27:57">

        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><call pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:27">raise_exception_err</name><argument_list pos:start="27:28" pos:end="27:56">(<argument pos:start="27:29" pos:end="27:38"><expr pos:start="27:29" pos:end="27:38"><name pos:start="27:29" pos:end="27:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="27:41" pos:end="27:55"><expr pos:start="27:41" pos:end="27:55"><name pos:start="27:41" pos:end="27:46">new_cs</name> <operator pos:start="27:48" pos:end="27:48">&amp;</operator> <literal type="number" pos:start="27:50" pos:end="27:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:7">cpl</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:21"><name pos:start="29:11" pos:end="29:13">env</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:21">hflags</name></name> <operator pos:start="29:23" pos:end="29:23">&amp;</operator> <name pos:start="29:25" pos:end="29:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="391:5"><if pos:start="31:5" pos:end="125:5">if <condition pos:start="31:8" pos:end="31:25">(<expr pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:10">e2</name> <operator pos:start="31:12" pos:end="31:12">&amp;</operator> <name pos:start="31:14" pos:end="31:24">DESC_S_MASK</name></expr>)</condition> <block pos:start="31:27" pos:end="125:5">{<block_content pos:start="33:9" pos:end="123:22">

        <if_stmt pos:start="33:9" pos:end="35:61"><if pos:start="33:9" pos:end="35:61">if <condition pos:start="33:12" pos:end="33:33">(<expr pos:start="33:13" pos:end="33:32"><operator pos:start="33:13" pos:end="33:13">!</operator><operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:16">e2</name> <operator pos:start="33:18" pos:end="33:18">&amp;</operator> <name pos:start="33:20" pos:end="33:31">DESC_CS_MASK</name><operator pos:start="33:32" pos:end="33:32">)</operator></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:61"><block_content pos:start="35:13" pos:end="35:61">

            <expr_stmt pos:start="35:13" pos:end="35:61"><expr pos:start="35:13" pos:end="35:60"><call pos:start="35:13" pos:end="35:60"><name pos:start="35:13" pos:end="35:31">raise_exception_err</name><argument_list pos:start="35:32" pos:end="35:60">(<argument pos:start="35:33" pos:end="35:42"><expr pos:start="35:33" pos:end="35:42"><name pos:start="35:33" pos:end="35:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="35:45" pos:end="35:59"><expr pos:start="35:45" pos:end="35:59"><name pos:start="35:45" pos:end="35:50">new_cs</name> <operator pos:start="35:52" pos:end="35:52">&amp;</operator> <literal type="number" pos:start="35:54" pos:end="35:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:11">dpl</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">(</operator><name pos:start="37:16" pos:end="37:17">e2</name> <operator pos:start="37:19" pos:end="37:20">&gt;&gt;</operator> <name pos:start="37:22" pos:end="37:35">DESC_DPL_SHIFT</name><operator pos:start="37:36" pos:end="37:36">)</operator> <operator pos:start="37:38" pos:end="37:38">&amp;</operator> <literal type="number" pos:start="37:40" pos:end="37:40">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="61:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:30">(<expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:14">e2</name> <operator pos:start="39:16" pos:end="39:16">&amp;</operator> <name pos:start="39:18" pos:end="39:29">DESC_CS_MASK</name></expr>)</condition> <block pos:start="39:32" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:65">

            <comment type="block" pos:start="41:13" pos:end="41:41">/* conforming code segment */</comment>

            <if_stmt pos:start="43:13" pos:end="45:65"><if pos:start="43:13" pos:end="45:65">if <condition pos:start="43:16" pos:end="43:26">(<expr pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:19">dpl</name> <operator pos:start="43:21" pos:end="43:21">&gt;</operator> <name pos:start="43:23" pos:end="43:25">cpl</name></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:65"><block_content pos:start="45:17" pos:end="45:65">

                <expr_stmt pos:start="45:17" pos:end="45:65"><expr pos:start="45:17" pos:end="45:64"><call pos:start="45:17" pos:end="45:64"><name pos:start="45:17" pos:end="45:35">raise_exception_err</name><argument_list pos:start="45:36" pos:end="45:64">(<argument pos:start="45:37" pos:end="45:46"><expr pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="45:49" pos:end="45:63"><expr pos:start="45:49" pos:end="45:63"><name pos:start="45:49" pos:end="45:54">new_cs</name> <operator pos:start="45:56" pos:end="45:56">&amp;</operator> <literal type="number" pos:start="45:58" pos:end="45:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="61:9">else <block pos:start="47:16" pos:end="61:9">{<block_content pos:start="51:13" pos:end="59:65">

            <comment type="block" pos:start="49:13" pos:end="49:45">/* non conforming code segment */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:29"><expr pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:15">rpl</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:24">new_cs</name> <operator pos:start="51:26" pos:end="51:26">&amp;</operator> <literal type="number" pos:start="51:28" pos:end="51:28">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:65"><if pos:start="53:13" pos:end="55:65">if <condition pos:start="53:16" pos:end="53:26">(<expr pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:19">rpl</name> <operator pos:start="53:21" pos:end="53:21">&gt;</operator> <name pos:start="53:23" pos:end="53:25">cpl</name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:65"><block_content pos:start="55:17" pos:end="55:65">

                <expr_stmt pos:start="55:17" pos:end="55:65"><expr pos:start="55:17" pos:end="55:64"><call pos:start="55:17" pos:end="55:64"><name pos:start="55:17" pos:end="55:35">raise_exception_err</name><argument_list pos:start="55:36" pos:end="55:64">(<argument pos:start="55:37" pos:end="55:46"><expr pos:start="55:37" pos:end="55:46"><name pos:start="55:37" pos:end="55:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="55:49" pos:end="55:63"><expr pos:start="55:49" pos:end="55:63"><name pos:start="55:49" pos:end="55:54">new_cs</name> <operator pos:start="55:56" pos:end="55:56">&amp;</operator> <literal type="number" pos:start="55:58" pos:end="55:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="57:13" pos:end="59:65"><if pos:start="57:13" pos:end="59:65">if <condition pos:start="57:16" pos:end="57:27">(<expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:19">dpl</name> <operator pos:start="57:21" pos:end="57:22">!=</operator> <name pos:start="57:24" pos:end="57:26">cpl</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:65"><block_content pos:start="59:17" pos:end="59:65">

                <expr_stmt pos:start="59:17" pos:end="59:65"><expr pos:start="59:17" pos:end="59:64"><call pos:start="59:17" pos:end="59:64"><name pos:start="59:17" pos:end="59:35">raise_exception_err</name><argument_list pos:start="59:36" pos:end="59:64">(<argument pos:start="59:37" pos:end="59:46"><expr pos:start="59:37" pos:end="59:46"><name pos:start="59:37" pos:end="59:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="59:49" pos:end="59:63"><expr pos:start="59:49" pos:end="59:63"><name pos:start="59:49" pos:end="59:54">new_cs</name> <operator pos:start="59:56" pos:end="59:56">&amp;</operator> <literal type="number" pos:start="59:58" pos:end="59:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="63:9" pos:end="65:63"><if pos:start="63:9" pos:end="65:63">if <condition pos:start="63:12" pos:end="63:32">(<expr pos:start="63:13" pos:end="63:31"><operator pos:start="63:13" pos:end="63:13">!</operator><operator pos:start="63:14" pos:end="63:14">(</operator><name pos:start="63:15" pos:end="63:16">e2</name> <operator pos:start="63:18" pos:end="63:18">&amp;</operator> <name pos:start="63:20" pos:end="63:30">DESC_P_MASK</name><operator pos:start="63:31" pos:end="63:31">)</operator></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:63"><block_content pos:start="65:13" pos:end="65:63">

            <expr_stmt pos:start="65:13" pos:end="65:63"><expr pos:start="65:13" pos:end="65:62"><call pos:start="65:13" pos:end="65:62"><name pos:start="65:13" pos:end="65:31">raise_exception_err</name><argument_list pos:start="65:32" pos:end="65:62">(<argument pos:start="65:33" pos:end="65:44"><expr pos:start="65:33" pos:end="65:44"><name pos:start="65:33" pos:end="65:44">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="65:47" pos:end="65:61"><expr pos:start="65:47" pos:end="65:61"><name pos:start="65:47" pos:end="65:52">new_cs</name> <operator pos:start="65:54" pos:end="65:54">&amp;</operator> <literal type="number" pos:start="65:56" pos:end="65:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:17"><expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:10">sp</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:16">ESP</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:25"><if pos:start="71:9" pos:end="73:25">if <condition pos:start="71:12" pos:end="71:51">(<expr pos:start="71:13" pos:end="71:50"><operator pos:start="71:13" pos:end="71:13">!</operator><operator pos:start="71:14" pos:end="71:14">(</operator><name pos:start="71:15" pos:end="71:29"><name pos:start="71:15" pos:end="71:17">env</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:23">segs</name><index pos:start="71:24" pos:end="71:29">[<expr pos:start="71:25" pos:end="71:28"><name pos:start="71:25" pos:end="71:28">R_SS</name></expr>]</index></name><operator pos:start="71:30" pos:end="71:30">.</operator><name pos:start="71:31" pos:end="71:35">flags</name> <operator pos:start="71:37" pos:end="71:37">&amp;</operator> <name pos:start="71:39" pos:end="71:49">DESC_B_MASK</name><operator pos:start="71:50" pos:end="71:50">)</operator></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:25"><block_content pos:start="73:13" pos:end="73:25">

            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:14">sp</name> <operator pos:start="73:16" pos:end="73:17">&amp;=</operator> <literal type="number" pos:start="73:19" pos:end="73:24">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:11">ssp</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:29"><name pos:start="75:15" pos:end="75:17">env</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:23">segs</name><index pos:start="75:24" pos:end="75:29">[<expr pos:start="75:25" pos:end="75:28"><name pos:start="75:25" pos:end="75:28">R_SS</name></expr>]</index></name><operator pos:start="75:30" pos:end="75:30">.</operator><name pos:start="75:31" pos:end="75:34">base</name> <operator pos:start="75:36" pos:end="75:36">+</operator> <name pos:start="75:38" pos:end="75:39">sp</name></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="97:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:18">(<expr pos:start="77:13" pos:end="77:17"><name pos:start="77:13" pos:end="77:17">shift</name></expr>)</condition> <block pos:start="77:20" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:38">

            <expr_stmt pos:start="79:13" pos:end="79:21"><expr pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:15">ssp</name> <operator pos:start="79:17" pos:end="79:18">-=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:54"><expr pos:start="81:13" pos:end="81:53"><call pos:start="81:13" pos:end="81:53"><name pos:start="81:13" pos:end="81:22">stl_kernel</name><argument_list pos:start="81:23" pos:end="81:53">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">ssp</name></expr></argument>, <argument pos:start="81:29" pos:end="81:52"><expr pos:start="81:29" pos:end="81:52"><name pos:start="81:29" pos:end="81:43"><name pos:start="81:29" pos:end="81:31">env</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:37">segs</name><index pos:start="81:38" pos:end="81:43">[<expr pos:start="81:39" pos:end="81:42"><name pos:start="81:39" pos:end="81:42">R_CS</name></expr>]</index></name><operator pos:start="81:44" pos:end="81:44">.</operator><name pos:start="81:45" pos:end="81:52">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:21"><expr pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:15">ssp</name> <operator pos:start="83:17" pos:end="83:18">-=</operator> <literal type="number" pos:start="83:20" pos:end="83:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><call pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:22">stl_kernel</name><argument_list pos:start="85:23" pos:end="85:37">(<argument pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">ssp</name></expr></argument>, <argument pos:start="85:29" pos:end="85:36"><expr pos:start="85:29" pos:end="85:36"><name pos:start="85:29" pos:end="85:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="97:9">else <block pos:start="87:16" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:38">

            <expr_stmt pos:start="89:13" pos:end="89:21"><expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:15">ssp</name> <operator pos:start="89:17" pos:end="89:18">-=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:54"><expr pos:start="91:13" pos:end="91:53"><call pos:start="91:13" pos:end="91:53"><name pos:start="91:13" pos:end="91:22">stw_kernel</name><argument_list pos:start="91:23" pos:end="91:53">(<argument pos:start="91:24" pos:end="91:26"><expr pos:start="91:24" pos:end="91:26"><name pos:start="91:24" pos:end="91:26">ssp</name></expr></argument>, <argument pos:start="91:29" pos:end="91:52"><expr pos:start="91:29" pos:end="91:52"><name pos:start="91:29" pos:end="91:43"><name pos:start="91:29" pos:end="91:31">env</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:37">segs</name><index pos:start="91:38" pos:end="91:43">[<expr pos:start="91:39" pos:end="91:42"><name pos:start="91:39" pos:end="91:42">R_CS</name></expr>]</index></name><operator pos:start="91:44" pos:end="91:44">.</operator><name pos:start="91:45" pos:end="91:52">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:21"><expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:15">ssp</name> <operator pos:start="93:17" pos:end="93:18">-=</operator> <literal type="number" pos:start="93:20" pos:end="93:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:38"><expr pos:start="95:13" pos:end="95:37"><call pos:start="95:13" pos:end="95:37"><name pos:start="95:13" pos:end="95:22">stw_kernel</name><argument_list pos:start="95:23" pos:end="95:37">(<argument pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">ssp</name></expr></argument>, <argument pos:start="95:29" pos:end="95:36"><expr pos:start="95:29" pos:end="95:36"><name pos:start="95:29" pos:end="95:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:10">sp</name> <operator pos:start="99:12" pos:end="99:13">-=</operator> <operator pos:start="99:15" pos:end="99:15">(</operator><literal type="number" pos:start="99:16" pos:end="99:16">4</literal> <operator pos:start="99:18" pos:end="99:19">&lt;&lt;</operator> <name pos:start="99:21" pos:end="99:25">shift</name><operator pos:start="99:26" pos:end="99:26">)</operator></expr>;</expr_stmt>

        

        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:13">limit</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <call pos:start="103:17" pos:end="103:37"><name pos:start="103:17" pos:end="103:29">get_seg_limit</name><argument_list pos:start="103:30" pos:end="103:37">(<argument pos:start="103:31" pos:end="103:32"><expr pos:start="103:31" pos:end="103:32"><name pos:start="103:31" pos:end="103:32">e1</name></expr></argument>, <argument pos:start="103:35" pos:end="103:36"><expr pos:start="103:35" pos:end="103:36"><name pos:start="103:35" pos:end="103:36">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="107:61"><if pos:start="105:9" pos:end="107:61">if <condition pos:start="105:12" pos:end="105:28">(<expr pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:19">new_eip</name> <operator pos:start="105:21" pos:end="105:21">&gt;</operator> <name pos:start="105:23" pos:end="105:27">limit</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:61"><block_content pos:start="107:13" pos:end="107:61">

            <expr_stmt pos:start="107:13" pos:end="107:61"><expr pos:start="107:13" pos:end="107:60"><call pos:start="107:13" pos:end="107:60"><name pos:start="107:13" pos:end="107:31">raise_exception_err</name><argument_list pos:start="107:32" pos:end="107:60">(<argument pos:start="107:33" pos:end="107:42"><expr pos:start="107:33" pos:end="107:42"><name pos:start="107:33" pos:end="107:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="107:45" pos:end="107:59"><expr pos:start="107:45" pos:end="107:59"><name pos:start="107:45" pos:end="107:50">new_cs</name> <operator pos:start="107:52" pos:end="107:52">&amp;</operator> <literal type="number" pos:start="107:54" pos:end="107:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:46">/* from this point, not restartable */</comment>

        <if_stmt pos:start="111:9" pos:end="117:21"><if pos:start="111:9" pos:end="113:53">if <condition pos:start="111:12" pos:end="111:51">(<expr pos:start="111:13" pos:end="111:50"><operator pos:start="111:13" pos:end="111:13">!</operator><operator pos:start="111:14" pos:end="111:14">(</operator><name pos:start="111:15" pos:end="111:29"><name pos:start="111:15" pos:end="111:17">env</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:23">segs</name><index pos:start="111:24" pos:end="111:29">[<expr pos:start="111:25" pos:end="111:28"><name pos:start="111:25" pos:end="111:28">R_SS</name></expr>]</index></name><operator pos:start="111:30" pos:end="111:30">.</operator><name pos:start="111:31" pos:end="111:35">flags</name> <operator pos:start="111:37" pos:end="111:37">&amp;</operator> <name pos:start="111:39" pos:end="111:49">DESC_B_MASK</name><operator pos:start="111:50" pos:end="111:50">)</operator></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:53"><block_content pos:start="113:13" pos:end="113:53">

            <expr_stmt pos:start="113:13" pos:end="113:53"><expr pos:start="113:13" pos:end="113:52"><name pos:start="113:13" pos:end="113:15">ESP</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <operator pos:start="113:19" pos:end="113:19">(</operator><name pos:start="113:20" pos:end="113:22">ESP</name> <operator pos:start="113:24" pos:end="113:24">&amp;</operator> <literal type="number" pos:start="113:26" pos:end="113:35">0xffff0000</literal><operator pos:start="113:36" pos:end="113:36">)</operator> <operator pos:start="113:38" pos:end="113:38">|</operator> <operator pos:start="113:40" pos:end="113:40">(</operator><name pos:start="113:41" pos:end="113:42">sp</name> <operator pos:start="113:44" pos:end="113:44">&amp;</operator> <literal type="number" pos:start="113:46" pos:end="113:51">0xffff</literal><operator pos:start="113:52" pos:end="113:52">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="115:9" pos:end="117:21">else<block type="pseudo" pos:start="117:13" pos:end="117:21"><block_content pos:start="117:13" pos:end="117:21">

            <expr_stmt pos:start="117:13" pos:end="117:21"><expr pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:15">ESP</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:20">sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="121:56"><expr pos:start="119:9" pos:end="121:55"><call pos:start="119:9" pos:end="121:55"><name pos:start="119:9" pos:end="119:30">cpu_x86_load_seg_cache</name><argument_list pos:start="119:31" pos:end="121:55">(<argument pos:start="119:32" pos:end="119:34"><expr pos:start="119:32" pos:end="119:34"><name pos:start="119:32" pos:end="119:34">env</name></expr></argument>, <argument pos:start="119:37" pos:end="119:40"><expr pos:start="119:37" pos:end="119:40"><name pos:start="119:37" pos:end="119:40">R_CS</name></expr></argument>, <argument pos:start="119:43" pos:end="119:65"><expr pos:start="119:43" pos:end="119:65"><operator pos:start="119:43" pos:end="119:43">(</operator><name pos:start="119:44" pos:end="119:49">new_cs</name> <operator pos:start="119:51" pos:end="119:51">&amp;</operator> <literal type="number" pos:start="119:53" pos:end="119:58">0xfffc</literal><operator pos:start="119:59" pos:end="119:59">)</operator> <operator pos:start="119:61" pos:end="119:61">|</operator> <name pos:start="119:63" pos:end="119:65">cpl</name></expr></argument>,

                       <argument pos:start="121:24" pos:end="121:43"><expr pos:start="121:24" pos:end="121:43"><call pos:start="121:24" pos:end="121:43"><name pos:start="121:24" pos:end="121:35">get_seg_base</name><argument_list pos:start="121:36" pos:end="121:43">(<argument pos:start="121:37" pos:end="121:38"><expr pos:start="121:37" pos:end="121:38"><name pos:start="121:37" pos:end="121:38">e1</name></expr></argument>, <argument pos:start="121:41" pos:end="121:42"><expr pos:start="121:41" pos:end="121:42"><name pos:start="121:41" pos:end="121:42">e2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:46" pos:end="121:50"><expr pos:start="121:46" pos:end="121:50"><name pos:start="121:46" pos:end="121:50">limit</name></expr></argument>, <argument pos:start="121:53" pos:end="121:54"><expr pos:start="121:53" pos:end="121:54"><name pos:start="121:53" pos:end="121:54">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:22"><expr pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:11">EIP</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <name pos:start="123:15" pos:end="123:21">new_eip</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="125:7" pos:end="391:5">else <block pos:start="125:12" pos:end="391:5">{<block_content pos:start="129:9" pos:end="389:21">

        <comment type="block" pos:start="127:9" pos:end="127:29">/* check gate type */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:46"><expr pos:start="129:9" pos:end="129:45"><name pos:start="129:9" pos:end="129:12">type</name> <operator pos:start="129:14" pos:end="129:14">=</operator> <operator pos:start="129:16" pos:end="129:16">(</operator><name pos:start="129:17" pos:end="129:18">e2</name> <operator pos:start="129:20" pos:end="129:21">&gt;&gt;</operator> <name pos:start="129:23" pos:end="129:37">DESC_TYPE_SHIFT</name><operator pos:start="129:38" pos:end="129:38">)</operator> <operator pos:start="129:40" pos:end="129:40">&amp;</operator> <literal type="number" pos:start="129:42" pos:end="129:45">0x1f</literal></expr>;</expr_stmt>

        <switch pos:start="131:9" pos:end="155:9">switch<condition pos:start="131:15" pos:end="131:20">(<expr pos:start="131:16" pos:end="131:19"><name pos:start="131:16" pos:end="131:19">type</name></expr>)</condition> <block pos:start="131:22" pos:end="155:9">{<block_content pos:start="133:9" pos:end="153:18">

        <case pos:start="133:9" pos:end="133:15">case <expr pos:start="133:14" pos:end="133:14"><literal type="number" pos:start="133:14" pos:end="133:14">1</literal></expr>:</case> <comment type="block" pos:start="133:17" pos:end="133:39">/* available 286 TSS */</comment>

        <case pos:start="135:9" pos:end="135:15">case <expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">9</literal></expr>:</case> <comment type="block" pos:start="135:17" pos:end="135:39">/* available 386 TSS */</comment>

        <case pos:start="137:9" pos:end="137:15">case <expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">5</literal></expr>:</case> <comment type="block" pos:start="137:17" pos:end="137:31">/* task gate */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:54"><expr pos:start="139:13" pos:end="139:53"><call pos:start="139:13" pos:end="139:53"><name pos:start="139:13" pos:end="139:21">cpu_abort</name><argument_list pos:start="139:22" pos:end="139:53">(<argument pos:start="139:23" pos:end="139:25"><expr pos:start="139:23" pos:end="139:25"><name pos:start="139:23" pos:end="139:25">env</name></expr></argument>, <argument pos:start="139:28" pos:end="139:52"><expr pos:start="139:28" pos:end="139:52"><literal type="string" pos:start="139:28" pos:end="139:52">"task gate not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <case pos:start="143:9" pos:end="143:15">case <expr pos:start="143:14" pos:end="143:14"><literal type="number" pos:start="143:14" pos:end="143:14">4</literal></expr>:</case> <comment type="block" pos:start="143:17" pos:end="143:35">/* 286 call gate */</comment>

        <case pos:start="145:9" pos:end="145:16">case <expr pos:start="145:14" pos:end="145:15"><literal type="number" pos:start="145:14" pos:end="145:15">12</literal></expr>:</case> <comment type="block" pos:start="145:18" pos:end="145:36">/* 386 call gate */</comment>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <default pos:start="149:9" pos:end="149:16">default:</default>

            <expr_stmt pos:start="151:13" pos:end="151:61"><expr pos:start="151:13" pos:end="151:60"><call pos:start="151:13" pos:end="151:60"><name pos:start="151:13" pos:end="151:31">raise_exception_err</name><argument_list pos:start="151:32" pos:end="151:60">(<argument pos:start="151:33" pos:end="151:42"><expr pos:start="151:33" pos:end="151:42"><name pos:start="151:33" pos:end="151:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="151:45" pos:end="151:59"><expr pos:start="151:45" pos:end="151:59"><name pos:start="151:45" pos:end="151:50">new_cs</name> <operator pos:start="151:52" pos:end="151:52">&amp;</operator> <literal type="number" pos:start="151:54" pos:end="151:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="157:9" pos:end="157:26"><expr pos:start="157:9" pos:end="157:25"><name pos:start="157:9" pos:end="157:13">shift</name> <operator pos:start="157:15" pos:end="157:15">=</operator> <name pos:start="157:17" pos:end="157:20">type</name> <operator pos:start="157:22" pos:end="157:23">&gt;&gt;</operator> <literal type="number" pos:start="157:25" pos:end="157:25">3</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:41"><expr pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:11">dpl</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">(</operator><name pos:start="161:16" pos:end="161:17">e2</name> <operator pos:start="161:19" pos:end="161:20">&gt;&gt;</operator> <name pos:start="161:22" pos:end="161:35">DESC_DPL_SHIFT</name><operator pos:start="161:36" pos:end="161:36">)</operator> <operator pos:start="161:38" pos:end="161:38">&amp;</operator> <literal type="number" pos:start="161:40" pos:end="161:40">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:25"><expr pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:11">rpl</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <name pos:start="163:15" pos:end="163:20">new_cs</name> <operator pos:start="163:22" pos:end="163:22">&amp;</operator> <literal type="number" pos:start="163:24" pos:end="163:24">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="167:61"><if pos:start="165:9" pos:end="167:61">if <condition pos:start="165:12" pos:end="165:35">(<expr pos:start="165:13" pos:end="165:34"><name pos:start="165:13" pos:end="165:15">dpl</name> <operator pos:start="165:17" pos:end="165:17">&lt;</operator> <name pos:start="165:19" pos:end="165:21">cpl</name> <operator pos:start="165:23" pos:end="165:24">||</operator> <name pos:start="165:26" pos:end="165:28">dpl</name> <operator pos:start="165:30" pos:end="165:30">&lt;</operator> <name pos:start="165:32" pos:end="165:34">rpl</name></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:61"><block_content pos:start="167:13" pos:end="167:61">

            <expr_stmt pos:start="167:13" pos:end="167:61"><expr pos:start="167:13" pos:end="167:60"><call pos:start="167:13" pos:end="167:60"><name pos:start="167:13" pos:end="167:31">raise_exception_err</name><argument_list pos:start="167:32" pos:end="167:60">(<argument pos:start="167:33" pos:end="167:42"><expr pos:start="167:33" pos:end="167:42"><name pos:start="167:33" pos:end="167:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="167:45" pos:end="167:59"><expr pos:start="167:45" pos:end="167:59"><name pos:start="167:45" pos:end="167:50">new_cs</name> <operator pos:start="167:52" pos:end="167:52">&amp;</operator> <literal type="number" pos:start="167:54" pos:end="167:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="169:9" pos:end="169:29">/* check valid bit */</comment>

        <if_stmt pos:start="171:9" pos:end="173:64"><if pos:start="171:9" pos:end="173:64">if <condition pos:start="171:12" pos:end="171:32">(<expr pos:start="171:13" pos:end="171:31"><operator pos:start="171:13" pos:end="171:13">!</operator><operator pos:start="171:14" pos:end="171:14">(</operator><name pos:start="171:15" pos:end="171:16">e2</name> <operator pos:start="171:18" pos:end="171:18">&amp;</operator> <name pos:start="171:20" pos:end="171:30">DESC_P_MASK</name><operator pos:start="171:31" pos:end="171:31">)</operator></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:64"><block_content pos:start="173:13" pos:end="173:64">

            <expr_stmt pos:start="173:13" pos:end="173:64"><expr pos:start="173:13" pos:end="173:63"><call pos:start="173:13" pos:end="173:63"><name pos:start="173:13" pos:end="173:31">raise_exception_err</name><argument_list pos:start="173:32" pos:end="173:63">(<argument pos:start="173:33" pos:end="173:44"><expr pos:start="173:33" pos:end="173:44"><name pos:start="173:33" pos:end="173:44">EXCP0B_NOSEG</name></expr></argument>,  <argument pos:start="173:48" pos:end="173:62"><expr pos:start="173:48" pos:end="173:62"><name pos:start="173:48" pos:end="173:53">new_cs</name> <operator pos:start="173:55" pos:end="173:55">&amp;</operator> <literal type="number" pos:start="173:57" pos:end="173:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:28"><expr pos:start="175:9" pos:end="175:27"><name pos:start="175:9" pos:end="175:16">selector</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <name pos:start="175:20" pos:end="175:21">e1</name> <operator pos:start="175:23" pos:end="175:24">&gt;&gt;</operator> <literal type="number" pos:start="175:26" pos:end="175:27">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:55"><expr pos:start="177:9" pos:end="177:54"><name pos:start="177:9" pos:end="177:14">offset</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <operator pos:start="177:18" pos:end="177:18">(</operator><name pos:start="177:19" pos:end="177:20">e2</name> <operator pos:start="177:22" pos:end="177:22">&amp;</operator> <literal type="number" pos:start="177:24" pos:end="177:33">0xffff0000</literal><operator pos:start="177:34" pos:end="177:34">)</operator> <operator pos:start="177:36" pos:end="177:36">|</operator> <operator pos:start="177:38" pos:end="177:38">(</operator><name pos:start="177:39" pos:end="177:40">e1</name> <operator pos:start="177:42" pos:end="177:42">&amp;</operator> <literal type="number" pos:start="177:44" pos:end="177:53">0x0000ffff</literal><operator pos:start="177:54" pos:end="177:54">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="181:47"><if pos:start="179:9" pos:end="181:47">if <condition pos:start="179:12" pos:end="179:37">(<expr pos:start="179:13" pos:end="179:36"><operator pos:start="179:13" pos:end="179:13">(</operator><name pos:start="179:14" pos:end="179:21">selector</name> <operator pos:start="179:23" pos:end="179:23">&amp;</operator> <literal type="number" pos:start="179:25" pos:end="179:30">0xfffc</literal><operator pos:start="179:31" pos:end="179:31">)</operator> <operator pos:start="179:33" pos:end="179:34">==</operator> <literal type="number" pos:start="179:36" pos:end="179:36">0</literal></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:47"><block_content pos:start="181:13" pos:end="181:47">

            <expr_stmt pos:start="181:13" pos:end="181:47"><expr pos:start="181:13" pos:end="181:46"><call pos:start="181:13" pos:end="181:46"><name pos:start="181:13" pos:end="181:31">raise_exception_err</name><argument_list pos:start="181:32" pos:end="181:46">(<argument pos:start="181:33" pos:end="181:42"><expr pos:start="181:33" pos:end="181:42"><name pos:start="181:33" pos:end="181:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="181:45" pos:end="181:45"><expr pos:start="181:45" pos:end="181:45"><literal type="number" pos:start="181:45" pos:end="181:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="185:9" pos:end="187:63"><if pos:start="185:9" pos:end="187:63">if <condition pos:start="185:12" pos:end="185:50">(<expr pos:start="185:13" pos:end="185:49"><call pos:start="185:13" pos:end="185:44"><name pos:start="185:13" pos:end="185:24">load_segment</name><argument_list pos:start="185:25" pos:end="185:44">(<argument pos:start="185:26" pos:end="185:28"><expr pos:start="185:26" pos:end="185:28"><operator pos:start="185:26" pos:end="185:26">&amp;</operator><name pos:start="185:27" pos:end="185:28">e1</name></expr></argument>, <argument pos:start="185:31" pos:end="185:33"><expr pos:start="185:31" pos:end="185:33"><operator pos:start="185:31" pos:end="185:31">&amp;</operator><name pos:start="185:32" pos:end="185:33">e2</name></expr></argument>, <argument pos:start="185:36" pos:end="185:43"><expr pos:start="185:36" pos:end="185:43"><name pos:start="185:36" pos:end="185:43">selector</name></expr></argument>)</argument_list></call> <operator pos:start="185:46" pos:end="185:47">!=</operator> <literal type="number" pos:start="185:49" pos:end="185:49">0</literal></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:63"><block_content pos:start="187:13" pos:end="187:63">

            <expr_stmt pos:start="187:13" pos:end="187:63"><expr pos:start="187:13" pos:end="187:62"><call pos:start="187:13" pos:end="187:62"><name pos:start="187:13" pos:end="187:31">raise_exception_err</name><argument_list pos:start="187:32" pos:end="187:62">(<argument pos:start="187:33" pos:end="187:42"><expr pos:start="187:33" pos:end="187:42"><name pos:start="187:33" pos:end="187:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="187:45" pos:end="187:61"><expr pos:start="187:45" pos:end="187:61"><name pos:start="187:45" pos:end="187:52">selector</name> <operator pos:start="187:54" pos:end="187:54">&amp;</operator> <literal type="number" pos:start="187:56" pos:end="187:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="189:9" pos:end="191:63"><if pos:start="189:9" pos:end="191:63">if <condition pos:start="189:12" pos:end="189:58">(<expr pos:start="189:13" pos:end="189:57"><operator pos:start="189:13" pos:end="189:13">!</operator><operator pos:start="189:14" pos:end="189:14">(</operator><name pos:start="189:15" pos:end="189:16">e2</name> <operator pos:start="189:18" pos:end="189:18">&amp;</operator> <name pos:start="189:20" pos:end="189:30">DESC_S_MASK</name><operator pos:start="189:31" pos:end="189:31">)</operator> <operator pos:start="189:33" pos:end="189:34">||</operator> <operator pos:start="189:36" pos:end="189:36">!</operator><operator pos:start="189:37" pos:end="189:37">(</operator><name pos:start="189:38" pos:end="189:39">e2</name> <operator pos:start="189:41" pos:end="189:41">&amp;</operator> <operator pos:start="189:43" pos:end="189:43">(</operator><name pos:start="189:44" pos:end="189:55">DESC_CS_MASK</name><operator pos:start="189:56" pos:end="189:56">)</operator><operator pos:start="189:57" pos:end="189:57">)</operator></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:63"><block_content pos:start="191:13" pos:end="191:63">

            <expr_stmt pos:start="191:13" pos:end="191:63"><expr pos:start="191:13" pos:end="191:62"><call pos:start="191:13" pos:end="191:62"><name pos:start="191:13" pos:end="191:31">raise_exception_err</name><argument_list pos:start="191:32" pos:end="191:62">(<argument pos:start="191:33" pos:end="191:42"><expr pos:start="191:33" pos:end="191:42"><name pos:start="191:33" pos:end="191:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="191:45" pos:end="191:61"><expr pos:start="191:45" pos:end="191:61"><name pos:start="191:45" pos:end="191:52">selector</name> <operator pos:start="191:54" pos:end="191:54">&amp;</operator> <literal type="number" pos:start="191:56" pos:end="191:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:41"><expr pos:start="193:9" pos:end="193:40"><name pos:start="193:9" pos:end="193:11">dpl</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <operator pos:start="193:15" pos:end="193:15">(</operator><name pos:start="193:16" pos:end="193:17">e2</name> <operator pos:start="193:19" pos:end="193:20">&gt;&gt;</operator> <name pos:start="193:22" pos:end="193:35">DESC_DPL_SHIFT</name><operator pos:start="193:36" pos:end="193:36">)</operator> <operator pos:start="193:38" pos:end="193:38">&amp;</operator> <literal type="number" pos:start="193:40" pos:end="193:40">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="197:63"><if pos:start="195:9" pos:end="197:63">if <condition pos:start="195:12" pos:end="195:22">(<expr pos:start="195:13" pos:end="195:21"><name pos:start="195:13" pos:end="195:15">dpl</name> <operator pos:start="195:17" pos:end="195:17">&gt;</operator> <name pos:start="195:19" pos:end="195:21">cpl</name></expr>)</condition><block type="pseudo" pos:start="197:13" pos:end="197:63"><block_content pos:start="197:13" pos:end="197:63">

            <expr_stmt pos:start="197:13" pos:end="197:63"><expr pos:start="197:13" pos:end="197:62"><call pos:start="197:13" pos:end="197:62"><name pos:start="197:13" pos:end="197:31">raise_exception_err</name><argument_list pos:start="197:32" pos:end="197:62">(<argument pos:start="197:33" pos:end="197:42"><expr pos:start="197:33" pos:end="197:42"><name pos:start="197:33" pos:end="197:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="197:45" pos:end="197:61"><expr pos:start="197:45" pos:end="197:61"><name pos:start="197:45" pos:end="197:52">selector</name> <operator pos:start="197:54" pos:end="197:54">&amp;</operator> <literal type="number" pos:start="197:56" pos:end="197:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="201:65"><if pos:start="199:9" pos:end="201:65">if <condition pos:start="199:12" pos:end="199:32">(<expr pos:start="199:13" pos:end="199:31"><operator pos:start="199:13" pos:end="199:13">!</operator><operator pos:start="199:14" pos:end="199:14">(</operator><name pos:start="199:15" pos:end="199:16">e2</name> <operator pos:start="199:18" pos:end="199:18">&amp;</operator> <name pos:start="199:20" pos:end="199:30">DESC_P_MASK</name><operator pos:start="199:31" pos:end="199:31">)</operator></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="201:65"><block_content pos:start="201:13" pos:end="201:65">

            <expr_stmt pos:start="201:13" pos:end="201:65"><expr pos:start="201:13" pos:end="201:64"><call pos:start="201:13" pos:end="201:64"><name pos:start="201:13" pos:end="201:31">raise_exception_err</name><argument_list pos:start="201:32" pos:end="201:64">(<argument pos:start="201:33" pos:end="201:44"><expr pos:start="201:33" pos:end="201:44"><name pos:start="201:33" pos:end="201:44">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="201:47" pos:end="201:63"><expr pos:start="201:47" pos:end="201:63"><name pos:start="201:47" pos:end="201:54">selector</name> <operator pos:start="201:56" pos:end="201:56">&amp;</operator> <literal type="number" pos:start="201:58" pos:end="201:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="205:9" pos:end="335:9"><if pos:start="205:9" pos:end="323:9">if <condition pos:start="205:12" pos:end="205:45">(<expr pos:start="205:13" pos:end="205:44"><operator pos:start="205:13" pos:end="205:13">!</operator><operator pos:start="205:14" pos:end="205:14">(</operator><name pos:start="205:15" pos:end="205:16">e2</name> <operator pos:start="205:18" pos:end="205:18">&amp;</operator> <name pos:start="205:20" pos:end="205:30">DESC_C_MASK</name><operator pos:start="205:31" pos:end="205:31">)</operator> <operator pos:start="205:33" pos:end="205:34">&amp;&amp;</operator> <name pos:start="205:36" pos:end="205:38">dpl</name> <operator pos:start="205:40" pos:end="205:40">&lt;</operator> <name pos:start="205:42" pos:end="205:44">cpl</name></expr>)</condition> <block pos:start="205:47" pos:end="323:9">{<block_content pos:start="209:13" pos:end="321:13">

            <comment type="block" pos:start="207:13" pos:end="207:37">/* to inner priviledge */</comment>

            <expr_stmt pos:start="209:13" pos:end="209:47"><expr pos:start="209:13" pos:end="209:46"><call pos:start="209:13" pos:end="209:46"><name pos:start="209:13" pos:end="209:31">get_ss_esp_from_tss</name><argument_list pos:start="209:32" pos:end="209:46">(<argument pos:start="209:33" pos:end="209:35"><expr pos:start="209:33" pos:end="209:35"><operator pos:start="209:33" pos:end="209:33">&amp;</operator><name pos:start="209:34" pos:end="209:35">ss</name></expr></argument>, <argument pos:start="209:38" pos:end="209:40"><expr pos:start="209:38" pos:end="209:40"><operator pos:start="209:38" pos:end="209:38">&amp;</operator><name pos:start="209:39" pos:end="209:40">sp</name></expr></argument>, <argument pos:start="209:43" pos:end="209:45"><expr pos:start="209:43" pos:end="209:45"><name pos:start="209:43" pos:end="209:45">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="211:13" pos:end="213:61"><if pos:start="211:13" pos:end="213:61">if <condition pos:start="211:16" pos:end="211:35">(<expr pos:start="211:17" pos:end="211:34"><operator pos:start="211:17" pos:end="211:17">(</operator><name pos:start="211:18" pos:end="211:19">ss</name> <operator pos:start="211:21" pos:end="211:21">&amp;</operator> <literal type="number" pos:start="211:23" pos:end="211:28">0xfffc</literal><operator pos:start="211:29" pos:end="211:29">)</operator> <operator pos:start="211:31" pos:end="211:32">==</operator> <literal type="number" pos:start="211:34" pos:end="211:34">0</literal></expr>)</condition><block type="pseudo" pos:start="213:17" pos:end="213:61"><block_content pos:start="213:17" pos:end="213:61">

                <expr_stmt pos:start="213:17" pos:end="213:61"><expr pos:start="213:17" pos:end="213:60"><call pos:start="213:17" pos:end="213:60"><name pos:start="213:17" pos:end="213:35">raise_exception_err</name><argument_list pos:start="213:36" pos:end="213:60">(<argument pos:start="213:37" pos:end="213:46"><expr pos:start="213:37" pos:end="213:46"><name pos:start="213:37" pos:end="213:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="213:49" pos:end="213:59"><expr pos:start="213:49" pos:end="213:59"><name pos:start="213:49" pos:end="213:50">ss</name> <operator pos:start="213:52" pos:end="213:52">&amp;</operator> <literal type="number" pos:start="213:54" pos:end="213:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="215:13" pos:end="217:61"><if pos:start="215:13" pos:end="217:61">if <condition pos:start="215:16" pos:end="215:32">(<expr pos:start="215:17" pos:end="215:31"><operator pos:start="215:17" pos:end="215:17">(</operator><name pos:start="215:18" pos:end="215:19">ss</name> <operator pos:start="215:21" pos:end="215:21">&amp;</operator> <literal type="number" pos:start="215:23" pos:end="215:23">3</literal><operator pos:start="215:24" pos:end="215:24">)</operator> <operator pos:start="215:26" pos:end="215:27">!=</operator> <name pos:start="215:29" pos:end="215:31">dpl</name></expr>)</condition><block type="pseudo" pos:start="217:17" pos:end="217:61"><block_content pos:start="217:17" pos:end="217:61">

                <expr_stmt pos:start="217:17" pos:end="217:61"><expr pos:start="217:17" pos:end="217:60"><call pos:start="217:17" pos:end="217:60"><name pos:start="217:17" pos:end="217:35">raise_exception_err</name><argument_list pos:start="217:36" pos:end="217:60">(<argument pos:start="217:37" pos:end="217:46"><expr pos:start="217:37" pos:end="217:46"><name pos:start="217:37" pos:end="217:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="217:49" pos:end="217:59"><expr pos:start="217:49" pos:end="217:59"><name pos:start="217:49" pos:end="217:50">ss</name> <operator pos:start="217:52" pos:end="217:52">&amp;</operator> <literal type="number" pos:start="217:54" pos:end="217:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="219:13" pos:end="221:61"><if pos:start="219:13" pos:end="221:61">if <condition pos:start="219:16" pos:end="219:54">(<expr pos:start="219:17" pos:end="219:53"><call pos:start="219:17" pos:end="219:48"><name pos:start="219:17" pos:end="219:28">load_segment</name><argument_list pos:start="219:29" pos:end="219:48">(<argument pos:start="219:30" pos:end="219:35"><expr pos:start="219:30" pos:end="219:35"><operator pos:start="219:30" pos:end="219:30">&amp;</operator><name pos:start="219:31" pos:end="219:35">ss_e1</name></expr></argument>, <argument pos:start="219:38" pos:end="219:43"><expr pos:start="219:38" pos:end="219:43"><operator pos:start="219:38" pos:end="219:38">&amp;</operator><name pos:start="219:39" pos:end="219:43">ss_e2</name></expr></argument>, <argument pos:start="219:46" pos:end="219:47"><expr pos:start="219:46" pos:end="219:47"><name pos:start="219:46" pos:end="219:47">ss</name></expr></argument>)</argument_list></call> <operator pos:start="219:50" pos:end="219:51">!=</operator> <literal type="number" pos:start="219:53" pos:end="219:53">0</literal></expr>)</condition><block type="pseudo" pos:start="221:17" pos:end="221:61"><block_content pos:start="221:17" pos:end="221:61">

                <expr_stmt pos:start="221:17" pos:end="221:61"><expr pos:start="221:17" pos:end="221:60"><call pos:start="221:17" pos:end="221:60"><name pos:start="221:17" pos:end="221:35">raise_exception_err</name><argument_list pos:start="221:36" pos:end="221:60">(<argument pos:start="221:37" pos:end="221:46"><expr pos:start="221:37" pos:end="221:46"><name pos:start="221:37" pos:end="221:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="221:49" pos:end="221:59"><expr pos:start="221:49" pos:end="221:59"><name pos:start="221:49" pos:end="221:50">ss</name> <operator pos:start="221:52" pos:end="221:52">&amp;</operator> <literal type="number" pos:start="221:54" pos:end="221:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:51"><expr pos:start="223:13" pos:end="223:50"><name pos:start="223:13" pos:end="223:18">ss_dpl</name> <operator pos:start="223:20" pos:end="223:20">=</operator> <operator pos:start="223:22" pos:end="223:22">(</operator><name pos:start="223:23" pos:end="223:27">ss_e2</name> <operator pos:start="223:29" pos:end="223:30">&gt;&gt;</operator> <name pos:start="223:32" pos:end="223:45">DESC_DPL_SHIFT</name><operator pos:start="223:46" pos:end="223:46">)</operator> <operator pos:start="223:48" pos:end="223:48">&amp;</operator> <literal type="number" pos:start="223:50" pos:end="223:50">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="227:61"><if pos:start="225:13" pos:end="227:61">if <condition pos:start="225:16" pos:end="225:30">(<expr pos:start="225:17" pos:end="225:29"><name pos:start="225:17" pos:end="225:22">ss_dpl</name> <operator pos:start="225:24" pos:end="225:25">!=</operator> <name pos:start="225:27" pos:end="225:29">dpl</name></expr>)</condition><block type="pseudo" pos:start="227:17" pos:end="227:61"><block_content pos:start="227:17" pos:end="227:61">

                <expr_stmt pos:start="227:17" pos:end="227:61"><expr pos:start="227:17" pos:end="227:60"><call pos:start="227:17" pos:end="227:60"><name pos:start="227:17" pos:end="227:35">raise_exception_err</name><argument_list pos:start="227:36" pos:end="227:60">(<argument pos:start="227:37" pos:end="227:46"><expr pos:start="227:37" pos:end="227:46"><name pos:start="227:37" pos:end="227:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="227:49" pos:end="227:59"><expr pos:start="227:49" pos:end="227:59"><name pos:start="227:49" pos:end="227:50">ss</name> <operator pos:start="227:52" pos:end="227:52">&amp;</operator> <literal type="number" pos:start="227:54" pos:end="227:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="229:13" pos:end="235:61"><if pos:start="229:13" pos:end="235:61">if <condition pos:start="229:16" pos:end="233:39">(<expr pos:start="229:17" pos:end="233:38"><operator pos:start="229:17" pos:end="229:17">!</operator><operator pos:start="229:18" pos:end="229:18">(</operator><name pos:start="229:19" pos:end="229:23">ss_e2</name> <operator pos:start="229:25" pos:end="229:25">&amp;</operator> <name pos:start="229:27" pos:end="229:37">DESC_S_MASK</name><operator pos:start="229:38" pos:end="229:38">)</operator> <operator pos:start="229:40" pos:end="229:41">||</operator>

                <operator pos:start="231:17" pos:end="231:17">(</operator><name pos:start="231:18" pos:end="231:22">ss_e2</name> <operator pos:start="231:24" pos:end="231:24">&amp;</operator> <name pos:start="231:26" pos:end="231:37">DESC_CS_MASK</name><operator pos:start="231:38" pos:end="231:38">)</operator> <operator pos:start="231:40" pos:end="231:41">||</operator>

                <operator pos:start="233:17" pos:end="233:17">!</operator><operator pos:start="233:18" pos:end="233:18">(</operator><name pos:start="233:19" pos:end="233:23">ss_e2</name> <operator pos:start="233:25" pos:end="233:25">&amp;</operator> <name pos:start="233:27" pos:end="233:37">DESC_W_MASK</name><operator pos:start="233:38" pos:end="233:38">)</operator></expr>)</condition><block type="pseudo" pos:start="235:17" pos:end="235:61"><block_content pos:start="235:17" pos:end="235:61">

                <expr_stmt pos:start="235:17" pos:end="235:61"><expr pos:start="235:17" pos:end="235:60"><call pos:start="235:17" pos:end="235:60"><name pos:start="235:17" pos:end="235:35">raise_exception_err</name><argument_list pos:start="235:36" pos:end="235:60">(<argument pos:start="235:37" pos:end="235:46"><expr pos:start="235:37" pos:end="235:46"><name pos:start="235:37" pos:end="235:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="235:49" pos:end="235:59"><expr pos:start="235:49" pos:end="235:59"><name pos:start="235:49" pos:end="235:50">ss</name> <operator pos:start="235:52" pos:end="235:52">&amp;</operator> <literal type="number" pos:start="235:54" pos:end="235:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="237:13" pos:end="239:61"><if pos:start="237:13" pos:end="239:61">if <condition pos:start="237:16" pos:end="237:39">(<expr pos:start="237:17" pos:end="237:38"><operator pos:start="237:17" pos:end="237:17">!</operator><operator pos:start="237:18" pos:end="237:18">(</operator><name pos:start="237:19" pos:end="237:23">ss_e2</name> <operator pos:start="237:25" pos:end="237:25">&amp;</operator> <name pos:start="237:27" pos:end="237:37">DESC_P_MASK</name><operator pos:start="237:38" pos:end="237:38">)</operator></expr>)</condition><block type="pseudo" pos:start="239:17" pos:end="239:61"><block_content pos:start="239:17" pos:end="239:61">

                <expr_stmt pos:start="239:17" pos:end="239:61"><expr pos:start="239:17" pos:end="239:60"><call pos:start="239:17" pos:end="239:60"><name pos:start="239:17" pos:end="239:35">raise_exception_err</name><argument_list pos:start="239:36" pos:end="239:60">(<argument pos:start="239:37" pos:end="239:46"><expr pos:start="239:37" pos:end="239:46"><name pos:start="239:37" pos:end="239:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="239:49" pos:end="239:59"><expr pos:start="239:49" pos:end="239:59"><name pos:start="239:49" pos:end="239:50">ss</name> <operator pos:start="239:52" pos:end="239:52">&amp;</operator> <literal type="number" pos:start="239:54" pos:end="239:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            

            <expr_stmt pos:start="243:13" pos:end="243:36"><expr pos:start="243:13" pos:end="243:35"><name pos:start="243:13" pos:end="243:23">param_count</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <name pos:start="243:27" pos:end="243:28">e2</name> <operator pos:start="243:30" pos:end="243:30">&amp;</operator> <literal type="number" pos:start="243:32" pos:end="243:35">0x1f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:57"><expr pos:start="245:13" pos:end="245:56"><name pos:start="245:13" pos:end="245:21">push_size</name> <operator pos:start="245:23" pos:end="245:23">=</operator> <operator pos:start="245:25" pos:end="245:25">(</operator><operator pos:start="245:26" pos:end="245:26">(</operator><name pos:start="245:27" pos:end="245:37">param_count</name> <operator pos:start="245:39" pos:end="245:39">*</operator> <literal type="number" pos:start="245:41" pos:end="245:41">2</literal><operator pos:start="245:42" pos:end="245:42">)</operator> <operator pos:start="245:44" pos:end="245:44">+</operator> <literal type="number" pos:start="245:46" pos:end="245:46">8</literal><operator pos:start="245:47" pos:end="245:47">)</operator> <operator pos:start="245:49" pos:end="245:50">&lt;&lt;</operator> <name pos:start="245:52" pos:end="245:56">shift</name></expr>;</expr_stmt>



            <expr_stmt pos:start="249:13" pos:end="249:26"><expr pos:start="249:13" pos:end="249:25"><name pos:start="249:13" pos:end="249:19">old_esp</name> <operator pos:start="249:21" pos:end="249:21">=</operator> <name pos:start="249:23" pos:end="249:25">ESP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:46"><expr pos:start="251:13" pos:end="251:45"><name pos:start="251:13" pos:end="251:18">old_ss</name> <operator pos:start="251:20" pos:end="251:20">=</operator> <name pos:start="251:22" pos:end="251:36"><name pos:start="251:22" pos:end="251:24">env</name><operator pos:start="251:25" pos:end="251:26">-&gt;</operator><name pos:start="251:27" pos:end="251:30">segs</name><index pos:start="251:31" pos:end="251:36">[<expr pos:start="251:32" pos:end="251:35"><name pos:start="251:32" pos:end="251:35">R_SS</name></expr>]</index></name><operator pos:start="251:37" pos:end="251:37">.</operator><name pos:start="251:38" pos:end="251:45">selector</name></expr>;</expr_stmt>

            <if_stmt pos:start="253:13" pos:end="255:34"><if pos:start="253:13" pos:end="255:34">if <condition pos:start="253:16" pos:end="253:55">(<expr pos:start="253:17" pos:end="253:54"><operator pos:start="253:17" pos:end="253:17">!</operator><operator pos:start="253:18" pos:end="253:18">(</operator><name pos:start="253:19" pos:end="253:33"><name pos:start="253:19" pos:end="253:21">env</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:27">segs</name><index pos:start="253:28" pos:end="253:33">[<expr pos:start="253:29" pos:end="253:32"><name pos:start="253:29" pos:end="253:32">R_SS</name></expr>]</index></name><operator pos:start="253:34" pos:end="253:34">.</operator><name pos:start="253:35" pos:end="253:39">flags</name> <operator pos:start="253:41" pos:end="253:41">&amp;</operator> <name pos:start="253:43" pos:end="253:53">DESC_B_MASK</name><operator pos:start="253:54" pos:end="253:54">)</operator></expr>)</condition><block type="pseudo" pos:start="255:17" pos:end="255:34"><block_content pos:start="255:17" pos:end="255:34">

                <expr_stmt pos:start="255:17" pos:end="255:34"><expr pos:start="255:17" pos:end="255:33"><name pos:start="255:17" pos:end="255:23">old_esp</name> <operator pos:start="255:25" pos:end="255:26">&amp;=</operator> <literal type="number" pos:start="255:28" pos:end="255:33">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:53"><expr pos:start="257:13" pos:end="257:52"><name pos:start="257:13" pos:end="257:19">old_ssp</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <name pos:start="257:23" pos:end="257:37"><name pos:start="257:23" pos:end="257:25">env</name><operator pos:start="257:26" pos:end="257:27">-&gt;</operator><name pos:start="257:28" pos:end="257:31">segs</name><index pos:start="257:32" pos:end="257:37">[<expr pos:start="257:33" pos:end="257:36"><name pos:start="257:33" pos:end="257:36">R_SS</name></expr>]</index></name><operator pos:start="257:38" pos:end="257:38">.</operator><name pos:start="257:39" pos:end="257:42">base</name> <operator pos:start="257:44" pos:end="257:44">+</operator> <name pos:start="257:46" pos:end="257:52">old_esp</name></expr>;</expr_stmt>

            

            <comment type="block" pos:start="261:13" pos:end="261:54">/* XXX: from this point not restartable */</comment>

            <expr_stmt pos:start="263:13" pos:end="263:33"><expr pos:start="263:13" pos:end="263:32"><name pos:start="263:13" pos:end="263:14">ss</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <operator pos:start="263:18" pos:end="263:18">(</operator><name pos:start="263:19" pos:end="263:20">ss</name> <operator pos:start="263:22" pos:end="263:22">&amp;</operator> <operator pos:start="263:24" pos:end="263:24">~</operator><literal type="number" pos:start="263:25" pos:end="263:25">3</literal><operator pos:start="263:26" pos:end="263:26">)</operator> <operator pos:start="263:28" pos:end="263:28">|</operator> <name pos:start="263:30" pos:end="263:32">dpl</name></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="271:34"><expr pos:start="265:13" pos:end="271:33"><call pos:start="265:13" pos:end="271:33"><name pos:start="265:13" pos:end="265:34">cpu_x86_load_seg_cache</name><argument_list pos:start="265:35" pos:end="271:33">(<argument pos:start="265:36" pos:end="265:38"><expr pos:start="265:36" pos:end="265:38"><name pos:start="265:36" pos:end="265:38">env</name></expr></argument>, <argument pos:start="265:41" pos:end="265:44"><expr pos:start="265:41" pos:end="265:44"><name pos:start="265:41" pos:end="265:44">R_SS</name></expr></argument>, <argument pos:start="265:47" pos:end="265:48"><expr pos:start="265:47" pos:end="265:48"><name pos:start="265:47" pos:end="265:48">ss</name></expr></argument>, 

                           <argument pos:start="267:28" pos:end="267:53"><expr pos:start="267:28" pos:end="267:53"><call pos:start="267:28" pos:end="267:53"><name pos:start="267:28" pos:end="267:39">get_seg_base</name><argument_list pos:start="267:40" pos:end="267:53">(<argument pos:start="267:41" pos:end="267:45"><expr pos:start="267:41" pos:end="267:45"><name pos:start="267:41" pos:end="267:45">ss_e1</name></expr></argument>, <argument pos:start="267:48" pos:end="267:52"><expr pos:start="267:48" pos:end="267:52"><name pos:start="267:48" pos:end="267:52">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="269:28" pos:end="269:54"><expr pos:start="269:28" pos:end="269:54"><call pos:start="269:28" pos:end="269:54"><name pos:start="269:28" pos:end="269:40">get_seg_limit</name><argument_list pos:start="269:41" pos:end="269:54">(<argument pos:start="269:42" pos:end="269:46"><expr pos:start="269:42" pos:end="269:46"><name pos:start="269:42" pos:end="269:46">ss_e1</name></expr></argument>, <argument pos:start="269:49" pos:end="269:53"><expr pos:start="269:49" pos:end="269:53"><name pos:start="269:49" pos:end="269:53">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="271:28" pos:end="271:32"><expr pos:start="271:28" pos:end="271:32"><name pos:start="271:28" pos:end="271:32">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="275:13" pos:end="277:29"><if pos:start="275:13" pos:end="277:29">if <condition pos:start="275:16" pos:end="275:55">(<expr pos:start="275:17" pos:end="275:54"><operator pos:start="275:17" pos:end="275:17">!</operator><operator pos:start="275:18" pos:end="275:18">(</operator><name pos:start="275:19" pos:end="275:33"><name pos:start="275:19" pos:end="275:21">env</name><operator pos:start="275:22" pos:end="275:23">-&gt;</operator><name pos:start="275:24" pos:end="275:27">segs</name><index pos:start="275:28" pos:end="275:33">[<expr pos:start="275:29" pos:end="275:32"><name pos:start="275:29" pos:end="275:32">R_SS</name></expr>]</index></name><operator pos:start="275:34" pos:end="275:34">.</operator><name pos:start="275:35" pos:end="275:39">flags</name> <operator pos:start="275:41" pos:end="275:41">&amp;</operator> <name pos:start="275:43" pos:end="275:53">DESC_B_MASK</name><operator pos:start="275:54" pos:end="275:54">)</operator></expr>)</condition><block type="pseudo" pos:start="277:17" pos:end="277:29"><block_content pos:start="277:17" pos:end="277:29">

                <expr_stmt pos:start="277:17" pos:end="277:29"><expr pos:start="277:17" pos:end="277:28"><name pos:start="277:17" pos:end="277:18">sp</name> <operator pos:start="277:20" pos:end="277:21">&amp;=</operator> <literal type="number" pos:start="277:23" pos:end="277:28">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:44"><expr pos:start="279:13" pos:end="279:43"><name pos:start="279:13" pos:end="279:15">ssp</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <name pos:start="279:19" pos:end="279:33"><name pos:start="279:19" pos:end="279:21">env</name><operator pos:start="279:22" pos:end="279:23">-&gt;</operator><name pos:start="279:24" pos:end="279:27">segs</name><index pos:start="279:28" pos:end="279:33">[<expr pos:start="279:29" pos:end="279:32"><name pos:start="279:29" pos:end="279:32">R_SS</name></expr>]</index></name><operator pos:start="279:34" pos:end="279:34">.</operator><name pos:start="279:35" pos:end="279:38">base</name> <operator pos:start="279:40" pos:end="279:40">+</operator> <name pos:start="279:42" pos:end="279:43">sp</name></expr>;</expr_stmt>

            <if_stmt pos:start="281:13" pos:end="321:13"><if pos:start="281:13" pos:end="301:13">if <condition pos:start="281:16" pos:end="281:22">(<expr pos:start="281:17" pos:end="281:21"><name pos:start="281:17" pos:end="281:21">shift</name></expr>)</condition> <block pos:start="281:24" pos:end="301:13">{<block_content pos:start="283:17" pos:end="299:17">

                <expr_stmt pos:start="283:17" pos:end="283:25"><expr pos:start="283:17" pos:end="283:24"><name pos:start="283:17" pos:end="283:19">ssp</name> <operator pos:start="283:21" pos:end="283:22">-=</operator> <literal type="number" pos:start="283:24" pos:end="283:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:40"><expr pos:start="285:17" pos:end="285:39"><call pos:start="285:17" pos:end="285:39"><name pos:start="285:17" pos:end="285:26">stl_kernel</name><argument_list pos:start="285:27" pos:end="285:39">(<argument pos:start="285:28" pos:end="285:30"><expr pos:start="285:28" pos:end="285:30"><name pos:start="285:28" pos:end="285:30">ssp</name></expr></argument>, <argument pos:start="285:33" pos:end="285:38"><expr pos:start="285:33" pos:end="285:38"><name pos:start="285:33" pos:end="285:38">old_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:25"><expr pos:start="287:17" pos:end="287:24"><name pos:start="287:17" pos:end="287:19">ssp</name> <operator pos:start="287:21" pos:end="287:22">-=</operator> <literal type="number" pos:start="287:24" pos:end="287:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:41"><expr pos:start="289:17" pos:end="289:40"><call pos:start="289:17" pos:end="289:40"><name pos:start="289:17" pos:end="289:26">stl_kernel</name><argument_list pos:start="289:27" pos:end="289:40">(<argument pos:start="289:28" pos:end="289:30"><expr pos:start="289:28" pos:end="289:30"><name pos:start="289:28" pos:end="289:30">ssp</name></expr></argument>, <argument pos:start="289:33" pos:end="289:39"><expr pos:start="289:33" pos:end="289:39"><name pos:start="289:33" pos:end="289:39">old_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:39"><expr pos:start="291:17" pos:end="291:38"><name pos:start="291:17" pos:end="291:19">ssp</name> <operator pos:start="291:21" pos:end="291:22">-=</operator> <literal type="number" pos:start="291:24" pos:end="291:24">4</literal> <operator pos:start="291:26" pos:end="291:26">*</operator> <name pos:start="291:28" pos:end="291:38">param_count</name></expr>;</expr_stmt>

                <for pos:start="293:17" pos:end="299:17">for<control pos:start="293:20" pos:end="293:48">(<init pos:start="293:21" pos:end="293:26"><expr pos:start="293:21" pos:end="293:25"><name pos:start="293:21" pos:end="293:21">i</name> <operator pos:start="293:23" pos:end="293:23">=</operator> <literal type="number" pos:start="293:25" pos:end="293:25">0</literal></expr>;</init> <condition pos:start="293:28" pos:end="293:43"><expr pos:start="293:28" pos:end="293:42"><name pos:start="293:28" pos:end="293:28">i</name> <operator pos:start="293:30" pos:end="293:30">&lt;</operator> <name pos:start="293:32" pos:end="293:42">param_count</name></expr>;</condition> <incr pos:start="293:45" pos:end="293:47"><expr pos:start="293:45" pos:end="293:47"><name pos:start="293:45" pos:end="293:45">i</name><operator pos:start="293:46" pos:end="293:47">++</operator></expr></incr>)</control> <block pos:start="293:50" pos:end="299:17">{<block_content pos:start="295:21" pos:end="297:49">

                    <expr_stmt pos:start="295:21" pos:end="295:54"><expr pos:start="295:21" pos:end="295:53"><name pos:start="295:21" pos:end="295:23">val</name> <operator pos:start="295:25" pos:end="295:25">=</operator> <call pos:start="295:27" pos:end="295:53"><name pos:start="295:27" pos:end="295:36">ldl_kernel</name><argument_list pos:start="295:37" pos:end="295:53">(<argument pos:start="295:38" pos:end="295:52"><expr pos:start="295:38" pos:end="295:52"><name pos:start="295:38" pos:end="295:44">old_ssp</name> <operator pos:start="295:46" pos:end="295:46">+</operator> <name pos:start="295:48" pos:end="295:48">i</name> <operator pos:start="295:50" pos:end="295:50">*</operator> <literal type="number" pos:start="295:52" pos:end="295:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:49"><expr pos:start="297:21" pos:end="297:48"><call pos:start="297:21" pos:end="297:48"><name pos:start="297:21" pos:end="297:30">stl_kernel</name><argument_list pos:start="297:31" pos:end="297:48">(<argument pos:start="297:32" pos:end="297:42"><expr pos:start="297:32" pos:end="297:42"><name pos:start="297:32" pos:end="297:34">ssp</name> <operator pos:start="297:36" pos:end="297:36">+</operator> <name pos:start="297:38" pos:end="297:38">i</name> <operator pos:start="297:40" pos:end="297:40">*</operator> <literal type="number" pos:start="297:42" pos:end="297:42">4</literal></expr></argument>, <argument pos:start="297:45" pos:end="297:47"><expr pos:start="297:45" pos:end="297:47"><name pos:start="297:45" pos:end="297:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="301:15" pos:end="321:13">else <block pos:start="301:20" pos:end="321:13">{<block_content pos:start="303:17" pos:end="319:17">

                <expr_stmt pos:start="303:17" pos:end="303:25"><expr pos:start="303:17" pos:end="303:24"><name pos:start="303:17" pos:end="303:19">ssp</name> <operator pos:start="303:21" pos:end="303:22">-=</operator> <literal type="number" pos:start="303:24" pos:end="303:24">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:40"><expr pos:start="305:17" pos:end="305:39"><call pos:start="305:17" pos:end="305:39"><name pos:start="305:17" pos:end="305:26">stw_kernel</name><argument_list pos:start="305:27" pos:end="305:39">(<argument pos:start="305:28" pos:end="305:30"><expr pos:start="305:28" pos:end="305:30"><name pos:start="305:28" pos:end="305:30">ssp</name></expr></argument>, <argument pos:start="305:33" pos:end="305:38"><expr pos:start="305:33" pos:end="305:38"><name pos:start="305:33" pos:end="305:38">old_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:25"><expr pos:start="307:17" pos:end="307:24"><name pos:start="307:17" pos:end="307:19">ssp</name> <operator pos:start="307:21" pos:end="307:22">-=</operator> <literal type="number" pos:start="307:24" pos:end="307:24">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="309:17" pos:end="309:41"><expr pos:start="309:17" pos:end="309:40"><call pos:start="309:17" pos:end="309:40"><name pos:start="309:17" pos:end="309:26">stw_kernel</name><argument_list pos:start="309:27" pos:end="309:40">(<argument pos:start="309:28" pos:end="309:30"><expr pos:start="309:28" pos:end="309:30"><name pos:start="309:28" pos:end="309:30">ssp</name></expr></argument>, <argument pos:start="309:33" pos:end="309:39"><expr pos:start="309:33" pos:end="309:39"><name pos:start="309:33" pos:end="309:39">old_esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:39"><expr pos:start="311:17" pos:end="311:38"><name pos:start="311:17" pos:end="311:19">ssp</name> <operator pos:start="311:21" pos:end="311:22">-=</operator> <literal type="number" pos:start="311:24" pos:end="311:24">2</literal> <operator pos:start="311:26" pos:end="311:26">*</operator> <name pos:start="311:28" pos:end="311:38">param_count</name></expr>;</expr_stmt>

                <for pos:start="313:17" pos:end="319:17">for<control pos:start="313:20" pos:end="313:48">(<init pos:start="313:21" pos:end="313:26"><expr pos:start="313:21" pos:end="313:25"><name pos:start="313:21" pos:end="313:21">i</name> <operator pos:start="313:23" pos:end="313:23">=</operator> <literal type="number" pos:start="313:25" pos:end="313:25">0</literal></expr>;</init> <condition pos:start="313:28" pos:end="313:43"><expr pos:start="313:28" pos:end="313:42"><name pos:start="313:28" pos:end="313:28">i</name> <operator pos:start="313:30" pos:end="313:30">&lt;</operator> <name pos:start="313:32" pos:end="313:42">param_count</name></expr>;</condition> <incr pos:start="313:45" pos:end="313:47"><expr pos:start="313:45" pos:end="313:47"><name pos:start="313:45" pos:end="313:45">i</name><operator pos:start="313:46" pos:end="313:47">++</operator></expr></incr>)</control> <block pos:start="313:50" pos:end="319:17">{<block_content pos:start="315:21" pos:end="317:49">

                    <expr_stmt pos:start="315:21" pos:end="315:55"><expr pos:start="315:21" pos:end="315:54"><name pos:start="315:21" pos:end="315:23">val</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <call pos:start="315:27" pos:end="315:54"><name pos:start="315:27" pos:end="315:37">lduw_kernel</name><argument_list pos:start="315:38" pos:end="315:54">(<argument pos:start="315:39" pos:end="315:53"><expr pos:start="315:39" pos:end="315:53"><name pos:start="315:39" pos:end="315:45">old_ssp</name> <operator pos:start="315:47" pos:end="315:47">+</operator> <name pos:start="315:49" pos:end="315:49">i</name> <operator pos:start="315:51" pos:end="315:51">*</operator> <literal type="number" pos:start="315:53" pos:end="315:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:49"><expr pos:start="317:21" pos:end="317:48"><call pos:start="317:21" pos:end="317:48"><name pos:start="317:21" pos:end="317:30">stw_kernel</name><argument_list pos:start="317:31" pos:end="317:48">(<argument pos:start="317:32" pos:end="317:42"><expr pos:start="317:32" pos:end="317:42"><name pos:start="317:32" pos:end="317:34">ssp</name> <operator pos:start="317:36" pos:end="317:36">+</operator> <name pos:start="317:38" pos:end="317:38">i</name> <operator pos:start="317:40" pos:end="317:40">*</operator> <literal type="number" pos:start="317:42" pos:end="317:42">2</literal></expr></argument>, <argument pos:start="317:45" pos:end="317:47"><expr pos:start="317:45" pos:end="317:47"><name pos:start="317:45" pos:end="317:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="323:11" pos:end="335:9">else <block pos:start="323:16" pos:end="335:9">{<block_content pos:start="327:13" pos:end="333:37">

            <comment type="block" pos:start="325:13" pos:end="325:36">/* to same priviledge */</comment>

            <if_stmt pos:start="327:13" pos:end="329:29"><if pos:start="327:13" pos:end="329:29">if <condition pos:start="327:16" pos:end="327:55">(<expr pos:start="327:17" pos:end="327:54"><operator pos:start="327:17" pos:end="327:17">!</operator><operator pos:start="327:18" pos:end="327:18">(</operator><name pos:start="327:19" pos:end="327:33"><name pos:start="327:19" pos:end="327:21">env</name><operator pos:start="327:22" pos:end="327:23">-&gt;</operator><name pos:start="327:24" pos:end="327:27">segs</name><index pos:start="327:28" pos:end="327:33">[<expr pos:start="327:29" pos:end="327:32"><name pos:start="327:29" pos:end="327:32">R_SS</name></expr>]</index></name><operator pos:start="327:34" pos:end="327:34">.</operator><name pos:start="327:35" pos:end="327:39">flags</name> <operator pos:start="327:41" pos:end="327:41">&amp;</operator> <name pos:start="327:43" pos:end="327:53">DESC_B_MASK</name><operator pos:start="327:54" pos:end="327:54">)</operator></expr>)</condition><block type="pseudo" pos:start="329:17" pos:end="329:29"><block_content pos:start="329:17" pos:end="329:29">

                <expr_stmt pos:start="329:17" pos:end="329:29"><expr pos:start="329:17" pos:end="329:28"><name pos:start="329:17" pos:end="329:18">sp</name> <operator pos:start="329:20" pos:end="329:21">&amp;=</operator> <literal type="number" pos:start="329:23" pos:end="329:28">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:44"><expr pos:start="331:13" pos:end="331:43"><name pos:start="331:13" pos:end="331:15">ssp</name> <operator pos:start="331:17" pos:end="331:17">=</operator> <name pos:start="331:19" pos:end="331:33"><name pos:start="331:19" pos:end="331:21">env</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:27">segs</name><index pos:start="331:28" pos:end="331:33">[<expr pos:start="331:29" pos:end="331:32"><name pos:start="331:29" pos:end="331:32">R_SS</name></expr>]</index></name><operator pos:start="331:34" pos:end="331:34">.</operator><name pos:start="331:35" pos:end="331:38">base</name> <operator pos:start="331:40" pos:end="331:40">+</operator> <name pos:start="331:42" pos:end="331:43">sp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:37"><expr pos:start="333:13" pos:end="333:36"><name pos:start="333:13" pos:end="333:21">push_size</name> <operator pos:start="333:23" pos:end="333:23">=</operator> <operator pos:start="333:25" pos:end="333:25">(</operator><literal type="number" pos:start="333:26" pos:end="333:26">4</literal> <operator pos:start="333:28" pos:end="333:29">&lt;&lt;</operator> <name pos:start="333:31" pos:end="333:35">shift</name><operator pos:start="333:36" pos:end="333:36">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="339:9" pos:end="359:9"><if pos:start="339:9" pos:end="349:9">if <condition pos:start="339:12" pos:end="339:18">(<expr pos:start="339:13" pos:end="339:17"><name pos:start="339:13" pos:end="339:17">shift</name></expr>)</condition> <block pos:start="339:20" pos:end="349:9">{<block_content pos:start="341:13" pos:end="347:38">

            <expr_stmt pos:start="341:13" pos:end="341:21"><expr pos:start="341:13" pos:end="341:20"><name pos:start="341:13" pos:end="341:15">ssp</name> <operator pos:start="341:17" pos:end="341:18">-=</operator> <literal type="number" pos:start="341:20" pos:end="341:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:54"><expr pos:start="343:13" pos:end="343:53"><call pos:start="343:13" pos:end="343:53"><name pos:start="343:13" pos:end="343:22">stl_kernel</name><argument_list pos:start="343:23" pos:end="343:53">(<argument pos:start="343:24" pos:end="343:26"><expr pos:start="343:24" pos:end="343:26"><name pos:start="343:24" pos:end="343:26">ssp</name></expr></argument>, <argument pos:start="343:29" pos:end="343:52"><expr pos:start="343:29" pos:end="343:52"><name pos:start="343:29" pos:end="343:43"><name pos:start="343:29" pos:end="343:31">env</name><operator pos:start="343:32" pos:end="343:33">-&gt;</operator><name pos:start="343:34" pos:end="343:37">segs</name><index pos:start="343:38" pos:end="343:43">[<expr pos:start="343:39" pos:end="343:42"><name pos:start="343:39" pos:end="343:42">R_CS</name></expr>]</index></name><operator pos:start="343:44" pos:end="343:44">.</operator><name pos:start="343:45" pos:end="343:52">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:21"><expr pos:start="345:13" pos:end="345:20"><name pos:start="345:13" pos:end="345:15">ssp</name> <operator pos:start="345:17" pos:end="345:18">-=</operator> <literal type="number" pos:start="345:20" pos:end="345:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:38"><expr pos:start="347:13" pos:end="347:37"><call pos:start="347:13" pos:end="347:37"><name pos:start="347:13" pos:end="347:22">stl_kernel</name><argument_list pos:start="347:23" pos:end="347:37">(<argument pos:start="347:24" pos:end="347:26"><expr pos:start="347:24" pos:end="347:26"><name pos:start="347:24" pos:end="347:26">ssp</name></expr></argument>, <argument pos:start="347:29" pos:end="347:36"><expr pos:start="347:29" pos:end="347:36"><name pos:start="347:29" pos:end="347:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="349:11" pos:end="359:9">else <block pos:start="349:16" pos:end="359:9">{<block_content pos:start="351:13" pos:end="357:38">

            <expr_stmt pos:start="351:13" pos:end="351:21"><expr pos:start="351:13" pos:end="351:20"><name pos:start="351:13" pos:end="351:15">ssp</name> <operator pos:start="351:17" pos:end="351:18">-=</operator> <literal type="number" pos:start="351:20" pos:end="351:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:54"><expr pos:start="353:13" pos:end="353:53"><call pos:start="353:13" pos:end="353:53"><name pos:start="353:13" pos:end="353:22">stw_kernel</name><argument_list pos:start="353:23" pos:end="353:53">(<argument pos:start="353:24" pos:end="353:26"><expr pos:start="353:24" pos:end="353:26"><name pos:start="353:24" pos:end="353:26">ssp</name></expr></argument>, <argument pos:start="353:29" pos:end="353:52"><expr pos:start="353:29" pos:end="353:52"><name pos:start="353:29" pos:end="353:43"><name pos:start="353:29" pos:end="353:31">env</name><operator pos:start="353:32" pos:end="353:33">-&gt;</operator><name pos:start="353:34" pos:end="353:37">segs</name><index pos:start="353:38" pos:end="353:43">[<expr pos:start="353:39" pos:end="353:42"><name pos:start="353:39" pos:end="353:42">R_CS</name></expr>]</index></name><operator pos:start="353:44" pos:end="353:44">.</operator><name pos:start="353:45" pos:end="353:52">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:21"><expr pos:start="355:13" pos:end="355:20"><name pos:start="355:13" pos:end="355:15">ssp</name> <operator pos:start="355:17" pos:end="355:18">-=</operator> <literal type="number" pos:start="355:20" pos:end="355:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:38"><expr pos:start="357:13" pos:end="357:37"><call pos:start="357:13" pos:end="357:37"><name pos:start="357:13" pos:end="357:22">stw_kernel</name><argument_list pos:start="357:23" pos:end="357:37">(<argument pos:start="357:24" pos:end="357:26"><expr pos:start="357:24" pos:end="357:26"><name pos:start="357:24" pos:end="357:26">ssp</name></expr></argument>, <argument pos:start="357:29" pos:end="357:36"><expr pos:start="357:29" pos:end="357:36"><name pos:start="357:29" pos:end="357:36">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="363:9" pos:end="363:24"><expr pos:start="363:9" pos:end="363:23"><name pos:start="363:9" pos:end="363:10">sp</name> <operator pos:start="363:12" pos:end="363:13">-=</operator> <name pos:start="363:15" pos:end="363:23">push_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:41"><expr pos:start="365:9" pos:end="365:40"><name pos:start="365:9" pos:end="365:16">selector</name> <operator pos:start="365:18" pos:end="365:18">=</operator> <operator pos:start="365:20" pos:end="365:20">(</operator><name pos:start="365:21" pos:end="365:28">selector</name> <operator pos:start="365:30" pos:end="365:30">&amp;</operator> <operator pos:start="365:32" pos:end="365:32">~</operator><literal type="number" pos:start="365:33" pos:end="365:33">3</literal><operator pos:start="365:34" pos:end="365:34">)</operator> <operator pos:start="365:36" pos:end="365:36">|</operator> <name pos:start="365:38" pos:end="365:40">dpl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="373:27"><expr pos:start="367:9" pos:end="373:26"><call pos:start="367:9" pos:end="373:26"><name pos:start="367:9" pos:end="367:30">cpu_x86_load_seg_cache</name><argument_list pos:start="367:31" pos:end="373:26">(<argument pos:start="367:32" pos:end="367:34"><expr pos:start="367:32" pos:end="367:34"><name pos:start="367:32" pos:end="367:34">env</name></expr></argument>, <argument pos:start="367:37" pos:end="367:40"><expr pos:start="367:37" pos:end="367:40"><name pos:start="367:37" pos:end="367:40">R_CS</name></expr></argument>, <argument pos:start="367:43" pos:end="367:50"><expr pos:start="367:43" pos:end="367:50"><name pos:start="367:43" pos:end="367:50">selector</name></expr></argument>, 

                       <argument pos:start="369:24" pos:end="369:43"><expr pos:start="369:24" pos:end="369:43"><call pos:start="369:24" pos:end="369:43"><name pos:start="369:24" pos:end="369:35">get_seg_base</name><argument_list pos:start="369:36" pos:end="369:43">(<argument pos:start="369:37" pos:end="369:38"><expr pos:start="369:37" pos:end="369:38"><name pos:start="369:37" pos:end="369:38">e1</name></expr></argument>, <argument pos:start="369:41" pos:end="369:42"><expr pos:start="369:41" pos:end="369:42"><name pos:start="369:41" pos:end="369:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="371:24" pos:end="371:44"><expr pos:start="371:24" pos:end="371:44"><call pos:start="371:24" pos:end="371:44"><name pos:start="371:24" pos:end="371:36">get_seg_limit</name><argument_list pos:start="371:37" pos:end="371:44">(<argument pos:start="371:38" pos:end="371:39"><expr pos:start="371:38" pos:end="371:39"><name pos:start="371:38" pos:end="371:39">e1</name></expr></argument>, <argument pos:start="371:42" pos:end="371:43"><expr pos:start="371:42" pos:end="371:43"><name pos:start="371:42" pos:end="371:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="373:24" pos:end="373:25"><expr pos:start="373:24" pos:end="373:25"><name pos:start="373:24" pos:end="373:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:34"><expr pos:start="375:9" pos:end="375:33"><call pos:start="375:9" pos:end="375:33"><name pos:start="375:9" pos:end="375:23">cpu_x86_set_cpl</name><argument_list pos:start="375:24" pos:end="375:33">(<argument pos:start="375:25" pos:end="375:27"><expr pos:start="375:25" pos:end="375:27"><name pos:start="375:25" pos:end="375:27">env</name></expr></argument>, <argument pos:start="375:30" pos:end="375:32"><expr pos:start="375:30" pos:end="375:32"><name pos:start="375:30" pos:end="375:32">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <comment type="block" pos:start="379:9" pos:end="379:65">/* from this point, not restartable if same priviledge */</comment>

        <if_stmt pos:start="381:9" pos:end="387:21"><if pos:start="381:9" pos:end="383:53">if <condition pos:start="381:12" pos:end="381:51">(<expr pos:start="381:13" pos:end="381:50"><operator pos:start="381:13" pos:end="381:13">!</operator><operator pos:start="381:14" pos:end="381:14">(</operator><name pos:start="381:15" pos:end="381:29"><name pos:start="381:15" pos:end="381:17">env</name><operator pos:start="381:18" pos:end="381:19">-&gt;</operator><name pos:start="381:20" pos:end="381:23">segs</name><index pos:start="381:24" pos:end="381:29">[<expr pos:start="381:25" pos:end="381:28"><name pos:start="381:25" pos:end="381:28">R_SS</name></expr>]</index></name><operator pos:start="381:30" pos:end="381:30">.</operator><name pos:start="381:31" pos:end="381:35">flags</name> <operator pos:start="381:37" pos:end="381:37">&amp;</operator> <name pos:start="381:39" pos:end="381:49">DESC_B_MASK</name><operator pos:start="381:50" pos:end="381:50">)</operator></expr>)</condition><block type="pseudo" pos:start="383:13" pos:end="383:53"><block_content pos:start="383:13" pos:end="383:53">

            <expr_stmt pos:start="383:13" pos:end="383:53"><expr pos:start="383:13" pos:end="383:52"><name pos:start="383:13" pos:end="383:15">ESP</name> <operator pos:start="383:17" pos:end="383:17">=</operator> <operator pos:start="383:19" pos:end="383:19">(</operator><name pos:start="383:20" pos:end="383:22">ESP</name> <operator pos:start="383:24" pos:end="383:24">&amp;</operator> <literal type="number" pos:start="383:26" pos:end="383:35">0xffff0000</literal><operator pos:start="383:36" pos:end="383:36">)</operator> <operator pos:start="383:38" pos:end="383:38">|</operator> <operator pos:start="383:40" pos:end="383:40">(</operator><name pos:start="383:41" pos:end="383:42">sp</name> <operator pos:start="383:44" pos:end="383:44">&amp;</operator> <literal type="number" pos:start="383:46" pos:end="383:51">0xffff</literal><operator pos:start="383:52" pos:end="383:52">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="385:9" pos:end="387:21">else<block type="pseudo" pos:start="387:13" pos:end="387:21"><block_content pos:start="387:13" pos:end="387:21">

            <expr_stmt pos:start="387:13" pos:end="387:21"><expr pos:start="387:13" pos:end="387:20"><name pos:start="387:13" pos:end="387:15">ESP</name> <operator pos:start="387:17" pos:end="387:17">=</operator> <name pos:start="387:19" pos:end="387:20">sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:21"><expr pos:start="389:9" pos:end="389:20"><name pos:start="389:9" pos:end="389:11">EIP</name> <operator pos:start="389:13" pos:end="389:13">=</operator> <name pos:start="389:15" pos:end="389:20">offset</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
