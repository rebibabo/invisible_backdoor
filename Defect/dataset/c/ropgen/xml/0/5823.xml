<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5823.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:30">kvm_cpu_thread_fn</name><parameter_list pos:start="1:31" pos:end="1:41">(<parameter pos:start="1:32" pos:end="1:40"><decl pos:start="1:32" pos:end="1:40"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><call pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:19">qemu_mutex_lock</name><argument_list pos:start="11:20" pos:end="11:39">(<argument pos:start="11:21" pos:end="11:38"><expr pos:start="11:21" pos:end="11:38"><operator pos:start="11:21" pos:end="11:21">&amp;</operator><name pos:start="11:22" pos:end="11:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><call pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:20">qemu_thread_self</name><argument_list pos:start="13:21" pos:end="13:33">(<argument pos:start="13:22" pos:end="13:32"><expr pos:start="13:22" pos:end="13:32"><name pos:start="13:22" pos:end="13:32"><name pos:start="13:22" pos:end="13:24">env</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:32">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:27"><expr pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:5">r</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:21">kvm_init_vcpu</name><argument_list pos:start="17:22" pos:end="17:26">(<argument pos:start="17:23" pos:end="17:25"><expr pos:start="17:23" pos:end="17:25"><name pos:start="17:23" pos:end="17:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:14">(<expr pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:9">r</name> <operator pos:start="19:11" pos:end="19:11">&lt;</operator> <literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr>)</condition> <block pos:start="19:16" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:16">

        <expr_stmt pos:start="21:9" pos:end="21:68"><expr pos:start="21:9" pos:end="21:67"><call pos:start="21:9" pos:end="21:67"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="21:67">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:52"><expr pos:start="21:25" pos:end="21:52"><literal type="string" pos:start="21:25" pos:end="21:52">"kvm_init_vcpu failed: %s\n"</literal></expr></argument>, <argument pos:start="21:55" pos:end="21:66"><expr pos:start="21:55" pos:end="21:66"><call pos:start="21:55" pos:end="21:66"><name pos:start="21:55" pos:end="21:62">strerror</name><argument_list pos:start="21:63" pos:end="21:66">(<argument pos:start="21:64" pos:end="21:65"><expr pos:start="21:64" pos:end="21:65"><operator pos:start="21:64" pos:end="21:64">-</operator><name pos:start="21:65" pos:end="21:65">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">exit</name><argument_list pos:start="23:13" pos:end="23:15">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:29">qemu_kvm_init_cpu_signals</name><argument_list pos:start="29:30" pos:end="29:34">(<argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:29">/* signal CPU creation */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:7">env</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:16">created</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><call pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:20">qemu_cond_signal</name><argument_list pos:start="37:21" pos:end="37:36">(<argument pos:start="37:22" pos:end="37:35"><expr pos:start="37:22" pos:end="37:35"><operator pos:start="37:22" pos:end="37:22">&amp;</operator><name pos:start="37:23" pos:end="37:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:45">/* and wait for machine initialization */</comment>

    <while pos:start="43:5" pos:end="45:72">while <condition pos:start="43:11" pos:end="43:30">(<expr pos:start="43:12" pos:end="43:29"><operator pos:start="43:12" pos:end="43:12">!</operator><name pos:start="43:13" pos:end="43:29">qemu_system_ready</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:72"><block_content pos:start="45:9" pos:end="45:72">

        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><call pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:27">qemu_cond_timedwait</name><argument_list pos:start="45:28" pos:end="45:71">(<argument pos:start="45:29" pos:end="45:45"><expr pos:start="45:29" pos:end="45:45"><operator pos:start="45:29" pos:end="45:29">&amp;</operator><name pos:start="45:30" pos:end="45:45">qemu_system_cond</name></expr></argument>, <argument pos:start="45:48" pos:end="45:65"><expr pos:start="45:48" pos:end="45:65"><operator pos:start="45:48" pos:end="45:48">&amp;</operator><name pos:start="45:49" pos:end="45:65">qemu_global_mutex</name></expr></argument>, <argument pos:start="45:68" pos:end="45:70"><expr pos:start="45:68" pos:end="45:70"><literal type="number" pos:start="45:68" pos:end="45:70">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <while pos:start="49:5" pos:end="57:5">while <condition pos:start="49:11" pos:end="49:13">(<expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">1</literal></expr>)</condition> <block pos:start="49:15" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:36">

        <if_stmt pos:start="51:9" pos:end="53:31"><if pos:start="51:9" pos:end="53:31">if <condition pos:start="51:12" pos:end="51:29">(<expr pos:start="51:13" pos:end="51:28"><call pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:23">cpu_can_run</name><argument_list pos:start="51:24" pos:end="51:28">(<argument pos:start="51:25" pos:end="51:27"><expr pos:start="51:25" pos:end="51:27"><name pos:start="51:25" pos:end="51:27">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:31"><block_content pos:start="53:13" pos:end="53:31">

            <expr_stmt pos:start="53:13" pos:end="53:31"><expr pos:start="53:13" pos:end="53:30"><call pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:25">qemu_cpu_exec</name><argument_list pos:start="53:26" pos:end="53:30">(<argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><call pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:30">qemu_kvm_wait_io_event</name><argument_list pos:start="55:31" pos:end="55:35">(<argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><name pos:start="55:32" pos:end="55:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="61:5" pos:end="61:16">return <expr pos:start="61:12" pos:end="61:15"><name pos:start="61:12" pos:end="61:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
