<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7362.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_cabac_mb_ref</name><parameter_list pos:start="1:31" pos:end="1:65">( <parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:43">H264Context</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">h</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">list</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:63"><decl pos:start="1:59" pos:end="1:63"><type pos:start="1:59" pos:end="1:63"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:63">n</name></decl></parameter> )</parameter_list> <block pos:start="1:67" pos:end="61:1">{<block_content pos:start="3:5" pos:end="59:15">

    <decl_stmt pos:start="3:5" pos:end="3:48"><decl pos:start="3:5" pos:end="3:47"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:12">refa</name> <init pos:start="3:14" pos:end="3:47">= <expr pos:start="3:16" pos:end="3:47"><name pos:start="3:16" pos:end="3:47"><name pos:start="3:16" pos:end="3:16">h</name><operator pos:start="3:17" pos:end="3:18">-&gt;</operator><name pos:start="3:19" pos:end="3:27">ref_cache</name><index pos:start="3:28" pos:end="3:33">[<expr pos:start="3:29" pos:end="3:32"><name pos:start="3:29" pos:end="3:32">list</name></expr>]</index><index pos:start="3:34" pos:end="3:47">[<expr pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:42"><name pos:start="3:35" pos:end="3:39">scan8</name><index pos:start="3:40" pos:end="3:42">[<expr pos:start="3:41" pos:end="3:41"><name pos:start="3:41" pos:end="3:41">n</name></expr>]</index></name> <operator pos:start="3:44" pos:end="3:44">-</operator> <literal type="number" pos:start="3:46" pos:end="3:46">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">refb</name> <init pos:start="5:14" pos:end="5:47">= <expr pos:start="5:16" pos:end="5:47"><name pos:start="5:16" pos:end="5:47"><name pos:start="5:16" pos:end="5:16">h</name><operator pos:start="5:17" pos:end="5:18">-&gt;</operator><name pos:start="5:19" pos:end="5:27">ref_cache</name><index pos:start="5:28" pos:end="5:33">[<expr pos:start="5:29" pos:end="5:32"><name pos:start="5:29" pos:end="5:32">list</name></expr>]</index><index pos:start="5:34" pos:end="5:47">[<expr pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:39">scan8</name><index pos:start="5:40" pos:end="5:42">[<expr pos:start="5:41" pos:end="5:41"><name pos:start="5:41" pos:end="5:41">n</name></expr>]</index></name> <operator pos:start="5:44" pos:end="5:44">-</operator> <literal type="number" pos:start="5:46" pos:end="5:46">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ref</name>  <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ctx</name>  <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="33:5"><if pos:start="13:5" pos:end="23:5">if<condition pos:start="13:7" pos:end="13:39">( <expr pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:9">h</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:25">slice_type_nos</name></name> <operator pos:start="13:27" pos:end="13:28">==</operator> <name pos:start="13:30" pos:end="13:38">FF_B_TYPE</name></expr>)</condition> <block pos:start="13:41" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:21">

        <if_stmt pos:start="15:9" pos:end="17:18"><if pos:start="15:9" pos:end="17:18">if<condition pos:start="15:11" pos:end="15:56">( <expr pos:start="15:13" pos:end="15:54"><name pos:start="15:13" pos:end="15:16">refa</name> <operator pos:start="15:18" pos:end="15:18">&gt;</operator> <literal type="number" pos:start="15:20" pos:end="15:20">0</literal> <operator pos:start="15:22" pos:end="15:23">&amp;&amp;</operator> <operator pos:start="15:25" pos:end="15:25">!</operator><name pos:start="15:26" pos:end="15:54"><name pos:start="15:26" pos:end="15:26">h</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:40">direct_cache</name><index pos:start="15:41" pos:end="15:54">[<expr pos:start="15:42" pos:end="15:53"><name pos:start="15:42" pos:end="15:49"><name pos:start="15:42" pos:end="15:46">scan8</name><index pos:start="15:47" pos:end="15:49">[<expr pos:start="15:48" pos:end="15:48"><name pos:start="15:48" pos:end="15:48">n</name></expr>]</index></name> <operator pos:start="15:51" pos:end="15:51">-</operator> <literal type="number" pos:start="15:53" pos:end="15:53">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo" pos:start="17:13" pos:end="17:18"><block_content pos:start="17:13" pos:end="17:18">

            <expr_stmt pos:start="17:13" pos:end="17:18"><expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:15">ctx</name><operator pos:start="17:16" pos:end="17:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="19:9" pos:end="21:21"><if pos:start="19:9" pos:end="21:21">if<condition pos:start="19:11" pos:end="19:56">( <expr pos:start="19:13" pos:end="19:54"><name pos:start="19:13" pos:end="19:16">refb</name> <operator pos:start="19:18" pos:end="19:18">&gt;</operator> <literal type="number" pos:start="19:20" pos:end="19:20">0</literal> <operator pos:start="19:22" pos:end="19:23">&amp;&amp;</operator> <operator pos:start="19:25" pos:end="19:25">!</operator><name pos:start="19:26" pos:end="19:54"><name pos:start="19:26" pos:end="19:26">h</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:40">direct_cache</name><index pos:start="19:41" pos:end="19:54">[<expr pos:start="19:42" pos:end="19:53"><name pos:start="19:42" pos:end="19:49"><name pos:start="19:42" pos:end="19:46">scan8</name><index pos:start="19:47" pos:end="19:49">[<expr pos:start="19:48" pos:end="19:48"><name pos:start="19:48" pos:end="19:48">n</name></expr>]</index></name> <operator pos:start="19:51" pos:end="19:51">-</operator> <literal type="number" pos:start="19:53" pos:end="19:53">8</literal></expr>]</index></name></expr> )</condition><block type="pseudo" pos:start="21:13" pos:end="21:21"><block_content pos:start="21:13" pos:end="21:21">

            <expr_stmt pos:start="21:13" pos:end="21:21"><expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:15">ctx</name> <operator pos:start="21:17" pos:end="21:18">+=</operator> <literal type="number" pos:start="21:20" pos:end="21:20">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="33:5">else <block pos:start="23:12" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:21">

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if<condition pos:start="25:11" pos:end="25:22">( <expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:16">refa</name> <operator pos:start="25:18" pos:end="25:18">&gt;</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr> )</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <expr_stmt pos:start="27:13" pos:end="27:18"><expr pos:start="27:13" pos:end="27:17"><name pos:start="27:13" pos:end="27:15">ctx</name><operator pos:start="27:16" pos:end="27:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if<condition pos:start="29:11" pos:end="29:22">( <expr pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:16">refb</name> <operator pos:start="29:18" pos:end="29:18">&gt;</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr> )</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <expr_stmt pos:start="31:13" pos:end="31:21"><expr pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:15">ctx</name> <operator pos:start="31:17" pos:end="31:18">+=</operator> <literal type="number" pos:start="31:20" pos:end="31:20">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <while pos:start="37:5" pos:end="57:5">while<condition pos:start="37:10" pos:end="37:60">( <expr pos:start="37:12" pos:end="37:58"><call pos:start="37:12" pos:end="37:58"><name pos:start="37:12" pos:end="37:20">get_cabac</name><argument_list pos:start="37:21" pos:end="37:58">( <argument pos:start="37:23" pos:end="37:31"><expr pos:start="37:23" pos:end="37:31"><operator pos:start="37:23" pos:end="37:23">&amp;</operator><name pos:start="37:24" pos:end="37:31"><name pos:start="37:24" pos:end="37:24">h</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:31">cabac</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:56"><expr pos:start="37:34" pos:end="37:56"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:56"><name pos:start="37:35" pos:end="37:35">h</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:48">cabac_state</name><index pos:start="37:49" pos:end="37:56">[<expr pos:start="37:50" pos:end="37:55"><literal type="number" pos:start="37:50" pos:end="37:52">54</literal><operator pos:start="37:52" pos:end="37:52">+</operator><name pos:start="37:53" pos:end="37:55">ctx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="37:62" pos:end="57:5">{<block_content pos:start="39:9" pos:end="55:9">

        <expr_stmt pos:start="39:9" pos:end="39:14"><expr pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:11">ref</name><operator pos:start="39:12" pos:end="39:13">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:20"><if pos:start="41:9" pos:end="43:20">if<condition pos:start="41:11" pos:end="41:21">( <expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:15">ctx</name> <operator pos:start="41:17" pos:end="41:17">&lt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">4</literal></expr> )</condition><block type="pseudo" pos:start="43:13" pos:end="43:20"><block_content pos:start="43:13" pos:end="43:20">

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">ctx</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">4</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="45:9" pos:end="47:20">else<block type="pseudo" pos:start="47:13" pos:end="47:20"><block_content pos:start="47:13" pos:end="47:20">

            <expr_stmt pos:start="47:13" pos:end="47:20"><expr pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:15">ctx</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <literal type="number" pos:start="47:19" pos:end="47:19">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if<condition pos:start="49:11" pos:end="49:43">(<expr pos:start="49:12" pos:end="49:20"><name pos:start="49:12" pos:end="49:14">ref</name> <operator pos:start="49:16" pos:end="49:17">&gt;=</operator> <literal type="number" pos:start="49:19" pos:end="49:20">32</literal></expr> <comment type="block" pos:start="49:22" pos:end="49:42">/*h-&gt;ref_list[list]*/</comment>)</condition><block pos:start="49:44" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:21">

            <expr_stmt pos:start="51:13" pos:end="51:82"><expr pos:start="51:13" pos:end="51:81"><call pos:start="51:13" pos:end="51:81"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:81">(<argument pos:start="51:20" pos:end="51:29"><expr pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:20">h</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:23">s</name><operator pos:start="51:24" pos:end="51:24">.</operator><name pos:start="51:25" pos:end="51:29">avctx</name></name></expr></argument>, <argument pos:start="51:32" pos:end="51:43"><expr pos:start="51:32" pos:end="51:43"><name pos:start="51:32" pos:end="51:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:46" pos:end="51:80"><expr pos:start="51:46" pos:end="51:80"><literal type="string" pos:start="51:46" pos:end="51:80">"overflow in decode_cabac_mb_ref\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:21">return <expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</return> <comment type="line" pos:start="53:23" pos:end="53:81">//FIXME we should return -1 and check the return everywhere</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <return pos:start="59:5" pos:end="59:15">return <expr pos:start="59:12" pos:end="59:14"><name pos:start="59:12" pos:end="59:14">ref</name></expr>;</return>

</block_content>}</block></function>
</unit>
