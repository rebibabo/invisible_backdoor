<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15307.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name><parameter_list pos:start="1:9" pos:end="1:14">(<parameter pos:start="1:10" pos:end="1:13"><decl pos:start="1:10" pos:end="1:13"><type pos:start="1:10" pos:end="1:13"><name pos:start="1:10" pos:end="1:13">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name> <init pos:start="5:11" pos:end="5:13">= <expr pos:start="5:13" pos:end="5:13"><literal type="number" pos:start="5:13" pos:end="5:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">AVLFG</name></type> <name pos:start="9:11" pos:end="9:15">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><call pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:15">av_lfg_init</name><argument_list pos:start="13:16" pos:end="13:35">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><operator pos:start="13:17" pos:end="13:17">&amp;</operator><name pos:start="13:18" pos:end="13:22">state</name></expr></argument>, <argument pos:start="13:25" pos:end="13:34"><expr pos:start="13:25" pos:end="13:34"><literal type="number" pos:start="13:25" pos:end="13:34">0xdeadbeef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="15:5" pos:end="29:5">for <control pos:start="15:9" pos:end="15:31">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">j</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:26"><expr pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:17">j</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <literal type="number" pos:start="15:21" pos:end="15:25">10000</literal></expr>;</condition> <incr pos:start="15:28" pos:end="15:30"><expr pos:start="15:28" pos:end="15:30"><name pos:start="15:28" pos:end="15:28">j</name><operator pos:start="15:29" pos:end="15:30">++</operator></expr></incr>)</control> <block pos:start="15:33" pos:end="29:5">{<block_content pos:start="17:9" pos:end="27:46">

        <macro pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:19">START_TIMER</name></macro>

        <for pos:start="19:9" pos:end="25:9">for <control pos:start="19:13" pos:end="19:33">(<init pos:start="19:14" pos:end="19:19"><expr pos:start="19:14" pos:end="19:18"><name pos:start="19:14" pos:end="19:14">i</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</init> <condition pos:start="19:21" pos:end="19:28"><expr pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:21">i</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <literal type="number" pos:start="19:25" pos:end="19:27">624</literal></expr>;</condition> <incr pos:start="19:30" pos:end="19:32"><expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:30">i</name><operator pos:start="19:31" pos:end="19:32">++</operator></expr></incr>)</control> <block pos:start="19:35" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:36">

            <comment type="line" pos:start="21:13" pos:end="21:69">//av_log(NULL, AV_LOG_ERROR, "%X\n", av_lfg_get(&amp;state));</comment>

            <expr_stmt pos:start="23:13" pos:end="23:36"><expr pos:start="23:13" pos:end="23:35"><name pos:start="23:13" pos:end="23:13">x</name> <operator pos:start="23:15" pos:end="23:16">+=</operator> <call pos:start="23:18" pos:end="23:35"><name pos:start="23:18" pos:end="23:27">av_lfg_get</name><argument_list pos:start="23:28" pos:end="23:35">(<argument pos:start="23:29" pos:end="23:34"><expr pos:start="23:29" pos:end="23:34"><operator pos:start="23:29" pos:end="23:29">&amp;</operator><name pos:start="23:30" pos:end="23:34">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="27:9" pos:end="27:46"><expr pos:start="27:9" pos:end="27:45"><call pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:18">STOP_TIMER</name><argument_list pos:start="27:19" pos:end="27:45">(<argument pos:start="27:20" pos:end="27:44"><expr pos:start="27:20" pos:end="27:44"><literal type="string" pos:start="27:20" pos:end="27:44">"624 calls of av_lfg_get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="31:5" pos:end="31:54"><expr pos:start="31:5" pos:end="31:53"><call pos:start="31:5" pos:end="31:53"><name pos:start="31:5" pos:end="31:10">av_log</name><argument_list pos:start="31:11" pos:end="31:53">(<argument pos:start="31:12" pos:end="31:15"><expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">NULL</name></expr></argument>, <argument pos:start="31:18" pos:end="31:29"><expr pos:start="31:18" pos:end="31:29"><name pos:start="31:18" pos:end="31:29">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:32" pos:end="31:49"><expr pos:start="31:32" pos:end="31:49"><literal type="string" pos:start="31:32" pos:end="31:49">"final value:%X\n"</literal></expr></argument>, <argument pos:start="31:52" pos:end="31:52"><expr pos:start="31:52" pos:end="31:52"><name pos:start="31:52" pos:end="31:52">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:27">/* BMG usage example */</comment>

    <block pos:start="37:5" pos:end="65:5">{<block_content pos:start="39:9" pos:end="63:9">

        <decl_stmt pos:start="39:9" pos:end="39:29"><decl pos:start="39:9" pos:end="39:28"><type pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:14">double</name></type> <name pos:start="39:16" pos:end="39:19">mean</name>   <init pos:start="39:23" pos:end="39:28">= <expr pos:start="39:25" pos:end="39:28"><literal type="number" pos:start="39:25" pos:end="39:28">1000</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:27"><decl pos:start="41:9" pos:end="41:26"><type pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:14">double</name></type> <name pos:start="41:16" pos:end="41:21">stddev</name> <init pos:start="41:23" pos:end="41:26">= <expr pos:start="41:25" pos:end="41:26"><literal type="number" pos:start="41:25" pos:end="41:26">53</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><call pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:19">av_lfg_init</name><argument_list pos:start="45:20" pos:end="45:31">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><operator pos:start="45:21" pos:end="45:21">&amp;</operator><name pos:start="45:22" pos:end="45:26">state</name></expr></argument>, <argument pos:start="45:29" pos:end="45:30"><expr pos:start="45:29" pos:end="45:30"><literal type="number" pos:start="45:29" pos:end="45:30">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="49:9" pos:end="63:9">for <control pos:start="49:13" pos:end="49:37">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:29"><expr pos:start="49:21" pos:end="49:28"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <literal type="number" pos:start="49:25" pos:end="49:28">1000</literal></expr>;</condition> <incr pos:start="49:31" pos:end="49:36"><expr pos:start="49:31" pos:end="49:36"><name pos:start="49:31" pos:end="49:31">i</name> <operator pos:start="49:33" pos:end="49:34">+=</operator> <literal type="number" pos:start="49:36" pos:end="49:36">2</literal></expr></incr>)</control> <block pos:start="49:39" pos:end="63:9">{<block_content pos:start="51:13" pos:end="61:47">

            <decl_stmt pos:start="51:13" pos:end="51:30"><decl pos:start="51:13" pos:end="51:29"><type pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:18">double</name></type> <name pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:26">bmg_out</name><index pos:start="51:27" pos:end="51:29">[<expr pos:start="51:28" pos:end="51:28"><literal type="number" pos:start="51:28" pos:end="51:28">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:22">av_bmg_get</name><argument_list pos:start="53:23" pos:end="53:39">(<argument pos:start="53:24" pos:end="53:29"><expr pos:start="53:24" pos:end="53:29"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:29">state</name></expr></argument>, <argument pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:38"><name pos:start="53:32" pos:end="53:38">bmg_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="61:47"><expr pos:start="55:13" pos:end="61:46"><call pos:start="55:13" pos:end="61:46"><name pos:start="55:13" pos:end="55:18">av_log</name><argument_list pos:start="55:19" pos:end="61:46">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">NULL</name></expr></argument>, <argument pos:start="55:26" pos:end="55:36"><expr pos:start="55:26" pos:end="55:36"><name pos:start="55:26" pos:end="55:36">AV_LOG_INFO</name></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:29"><expr pos:start="57:20" pos:end="57:29"><literal type="string" pos:start="57:20" pos:end="57:29">"%f\n%f\n"</literal></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:45"><expr pos:start="59:20" pos:end="59:45"><name pos:start="59:20" pos:end="59:29"><name pos:start="59:20" pos:end="59:26">bmg_out</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>]</index></name> <operator pos:start="59:31" pos:end="59:31">*</operator> <name pos:start="59:33" pos:end="59:38">stddev</name> <operator pos:start="59:40" pos:end="59:40">+</operator> <name pos:start="59:42" pos:end="59:45">mean</name></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:45"><expr pos:start="61:20" pos:end="61:45"><name pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:26">bmg_out</name><index pos:start="61:27" pos:end="61:29">[<expr pos:start="61:28" pos:end="61:28"><literal type="number" pos:start="61:28" pos:end="61:28">1</literal></expr>]</index></name> <operator pos:start="61:31" pos:end="61:31">*</operator> <name pos:start="61:33" pos:end="61:38">stddev</name> <operator pos:start="61:40" pos:end="61:40">+</operator> <name pos:start="61:42" pos:end="61:45">mean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
