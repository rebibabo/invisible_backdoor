<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26580.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">xen_pt_config_reg_init</name><parameter_list pos:start="1:34" pos:end="3:76">(<parameter pos:start="1:35" pos:end="1:59"><decl pos:start="1:35" pos:end="1:59"><type pos:start="1:35" pos:end="1:59"><name pos:start="1:35" pos:end="1:56">XenPCIPassthroughState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:56"><decl pos:start="3:35" pos:end="3:56"><type pos:start="3:35" pos:end="3:56"><name pos:start="3:35" pos:end="3:47">XenPTRegGroup</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:56">reg_grp</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:75"><decl pos:start="3:59" pos:end="3:75"><type pos:start="3:59" pos:end="3:75"><name pos:start="3:59" pos:end="3:70">XenPTRegInfo</name> <modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:75">reg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:13">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">XenPTReg</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">reg_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">data</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name> <init pos:start="11:12" pos:end="11:14">= <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:36"><expr pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:13">reg_entry</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <call pos:start="15:17" pos:end="15:35"><name pos:start="15:17" pos:end="15:22">g_new0</name><argument_list pos:start="15:23" pos:end="15:35">(<argument pos:start="15:24" pos:end="15:31"><expr pos:start="15:24" pos:end="15:31"><name pos:start="15:24" pos:end="15:31">XenPTReg</name></expr></argument>, <argument pos:start="15:34" pos:end="15:34"><expr pos:start="15:34" pos:end="15:34"><literal type="number" pos:start="15:34" pos:end="15:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:13">reg_entry</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">reg</name></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:24">reg</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="165:5"><if pos:start="21:5" pos:end="165:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:11">reg</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">init</name></name></expr>)</condition> <block pos:start="21:20" pos:end="165:5">{<block_content pos:start="23:9" pos:end="161:30">

        <decl_stmt pos:start="23:9" pos:end="23:38"><decl pos:start="23:9" pos:end="23:26"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint32_t</name></type> <name pos:start="23:18" pos:end="23:26">host_mask</name></decl>, <decl pos:start="23:29" pos:end="23:37"><type ref="prev" pos:start="23:9" pos:end="23:16"/><name pos:start="23:29" pos:end="23:37">size_mask</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:28"><decl pos:start="25:9" pos:end="25:27"><type pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:16">unsigned</name> <name pos:start="25:18" pos:end="25:20">int</name></type> <name pos:start="25:22" pos:end="25:27">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:21"><decl pos:start="27:9" pos:end="27:20"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">uint32_t</name></type> <name pos:start="27:18" pos:end="27:20">val</name></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:41">/* initialize emulate register */</comment>

        <expr_stmt pos:start="33:9" pos:end="35:66"><expr pos:start="33:9" pos:end="35:65"><name pos:start="33:9" pos:end="33:10">rc</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="35:65"><name pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:16">reg</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:22">init</name></name><argument_list pos:start="33:23" pos:end="35:65">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">s</name></expr></argument>, <argument pos:start="33:27" pos:end="33:40"><expr pos:start="33:27" pos:end="33:40"><name pos:start="33:27" pos:end="33:40"><name pos:start="33:27" pos:end="33:35">reg_entry</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:40">reg</name></name></expr></argument>,

                       <argument pos:start="35:24" pos:end="35:57"><expr pos:start="35:24" pos:end="35:57"><name pos:start="35:24" pos:end="35:43"><name pos:start="35:24" pos:end="35:30">reg_grp</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:43">base_offset</name></name> <operator pos:start="35:45" pos:end="35:45">+</operator> <name pos:start="35:47" pos:end="35:57"><name pos:start="35:47" pos:end="35:49">reg</name><operator pos:start="35:50" pos:end="35:51">-&gt;</operator><name pos:start="35:52" pos:end="35:57">offset</name></name></expr></argument>, <argument pos:start="35:60" pos:end="35:64"><expr pos:start="35:60" pos:end="35:64"><operator pos:start="35:60" pos:end="35:60">&amp;</operator><name pos:start="35:61" pos:end="35:64">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:19">(<expr pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:14">rc</name> <operator pos:start="37:16" pos:end="37:16">&lt;</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>)</condition> <block pos:start="37:21" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:22">

            <expr_stmt pos:start="39:13" pos:end="39:30"><expr pos:start="39:13" pos:end="39:29"><call pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:18">g_free</name><argument_list pos:start="39:19" pos:end="39:29">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28">reg_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:22">return <expr pos:start="41:20" pos:end="41:21"><name pos:start="41:20" pos:end="41:21">rc</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:39">(<expr pos:start="45:13" pos:end="45:38"><name pos:start="45:13" pos:end="45:16">data</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <name pos:start="45:21" pos:end="45:38">XEN_PT_INVALID_REG</name></expr>)</condition> <block pos:start="45:41" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:21">

            <comment type="block" pos:start="47:13" pos:end="47:48">/* free unused BAR register entry */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:30"><expr pos:start="49:13" pos:end="49:29"><call pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:18">g_free</name><argument_list pos:start="49:19" pos:end="49:29">(<argument pos:start="49:20" pos:end="49:28"><expr pos:start="49:20" pos:end="49:28"><name pos:start="49:20" pos:end="49:28">reg_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:21">return <expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="55:9" pos:end="55:44">/* Sync up the data to dev.config */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:52"><expr pos:start="57:9" pos:end="57:51"><name pos:start="57:9" pos:end="57:14">offset</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:37"><name pos:start="57:18" pos:end="57:24">reg_grp</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:37">base_offset</name></name> <operator pos:start="57:39" pos:end="57:39">+</operator> <name pos:start="57:41" pos:end="57:51"><name pos:start="57:41" pos:end="57:43">reg</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:51">offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:17">size_mask</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:30">0xFFFFFFFF</literal> <operator pos:start="59:32" pos:end="59:33">&gt;&gt;</operator> <operator pos:start="59:35" pos:end="59:35">(</operator><operator pos:start="59:36" pos:end="59:36">(</operator><literal type="number" pos:start="59:37" pos:end="59:39">4</literal> <operator pos:start="59:39" pos:end="59:39">-</operator> <name pos:start="59:41" pos:end="59:49"><name pos:start="59:41" pos:end="59:43">reg</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:49">size</name></name><operator pos:start="59:50" pos:end="59:50">)</operator> <operator pos:start="59:52" pos:end="59:53">&lt;&lt;</operator> <literal type="number" pos:start="59:55" pos:end="59:55">3</literal><operator pos:start="59:56" pos:end="59:56">)</operator></expr>;</expr_stmt>



        <switch pos:start="63:9" pos:end="79:9">switch <condition pos:start="63:16" pos:end="63:26">(<expr pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:19">reg</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:25">size</name></name></expr>)</condition> <block pos:start="63:28" pos:end="79:9">{<block_content pos:start="65:9" pos:end="77:27">

        <case pos:start="65:9" pos:end="65:15">case <expr pos:start="65:14" pos:end="65:14"><literal type="number" pos:start="65:14" pos:end="65:14">1</literal></expr>:</case> <expr_stmt pos:start="65:17" pos:end="65:85"><expr pos:start="65:17" pos:end="65:84"><name pos:start="65:17" pos:end="65:18">rc</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:84"><name pos:start="65:22" pos:end="65:42">xen_host_pci_get_byte</name><argument_list pos:start="65:43" pos:end="65:84">(<argument pos:start="65:44" pos:end="65:58"><expr pos:start="65:44" pos:end="65:58"><operator pos:start="65:44" pos:end="65:44">&amp;</operator><name pos:start="65:45" pos:end="65:58"><name pos:start="65:45" pos:end="65:45">s</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:58">real_device</name></name></expr></argument>, <argument pos:start="65:61" pos:end="65:66"><expr pos:start="65:61" pos:end="65:66"><name pos:start="65:61" pos:end="65:66">offset</name></expr></argument>, <argument pos:start="65:69" pos:end="65:83"><expr pos:start="65:69" pos:end="65:83"><operator pos:start="65:69" pos:end="65:69">(</operator><name pos:start="65:70" pos:end="65:76">uint8_t</name> <operator pos:start="65:78" pos:end="65:78">*</operator><operator pos:start="65:79" pos:end="65:79">)</operator><operator pos:start="65:80" pos:end="65:80">&amp;</operator><name pos:start="65:81" pos:end="65:83">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="67:17" pos:end="67:22">break;</break>

        <case pos:start="69:9" pos:end="69:15">case <expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">2</literal></expr>:</case> <expr_stmt pos:start="69:17" pos:end="69:86"><expr pos:start="69:17" pos:end="69:85"><name pos:start="69:17" pos:end="69:18">rc</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:85"><name pos:start="69:22" pos:end="69:42">xen_host_pci_get_word</name><argument_list pos:start="69:43" pos:end="69:85">(<argument pos:start="69:44" pos:end="69:58"><expr pos:start="69:44" pos:end="69:58"><operator pos:start="69:44" pos:end="69:44">&amp;</operator><name pos:start="69:45" pos:end="69:58"><name pos:start="69:45" pos:end="69:45">s</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:58">real_device</name></name></expr></argument>, <argument pos:start="69:61" pos:end="69:66"><expr pos:start="69:61" pos:end="69:66"><name pos:start="69:61" pos:end="69:66">offset</name></expr></argument>, <argument pos:start="69:69" pos:end="69:84"><expr pos:start="69:69" pos:end="69:84"><operator pos:start="69:69" pos:end="69:69">(</operator><name pos:start="69:70" pos:end="69:77">uint16_t</name> <operator pos:start="69:79" pos:end="69:79">*</operator><operator pos:start="69:80" pos:end="69:80">)</operator><operator pos:start="69:81" pos:end="69:81">&amp;</operator><name pos:start="69:82" pos:end="69:84">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

        <case pos:start="73:9" pos:end="73:15">case <expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">4</literal></expr>:</case> <expr_stmt pos:start="73:17" pos:end="73:74"><expr pos:start="73:17" pos:end="73:73"><name pos:start="73:17" pos:end="73:18">rc</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <call pos:start="73:22" pos:end="73:73"><name pos:start="73:22" pos:end="73:42">xen_host_pci_get_long</name><argument_list pos:start="73:43" pos:end="73:73">(<argument pos:start="73:44" pos:end="73:58"><expr pos:start="73:44" pos:end="73:58"><operator pos:start="73:44" pos:end="73:44">&amp;</operator><name pos:start="73:45" pos:end="73:58"><name pos:start="73:45" pos:end="73:45">s</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:58">real_device</name></name></expr></argument>, <argument pos:start="73:61" pos:end="73:66"><expr pos:start="73:61" pos:end="73:66"><name pos:start="73:61" pos:end="73:66">offset</name></expr></argument>, <argument pos:start="73:69" pos:end="73:72"><expr pos:start="73:69" pos:end="73:72"><operator pos:start="73:69" pos:end="73:69">&amp;</operator><name pos:start="73:70" pos:end="73:72">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="75:17" pos:end="75:22">break;</break>

        <default pos:start="77:9" pos:end="77:16">default:</default> <expr_stmt pos:start="77:18" pos:end="77:27"><expr pos:start="77:18" pos:end="77:26"><call pos:start="77:18" pos:end="77:26"><name pos:start="77:18" pos:end="77:23">assert</name><argument_list pos:start="77:24" pos:end="77:26">(<argument pos:start="77:25" pos:end="77:25"><expr pos:start="77:25" pos:end="77:25"><literal type="number" pos:start="77:25" pos:end="77:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:15">(<expr pos:start="81:13" pos:end="81:14"><name pos:start="81:13" pos:end="81:14">rc</name></expr>)</condition> <block pos:start="81:17" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <comment type="block" pos:start="83:13" pos:end="83:69">/* Serious issues when we cannot read the host values! */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:29"><call pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:18">g_free</name><argument_list pos:start="85:19" pos:end="85:29">(<argument pos:start="85:20" pos:end="85:28"><expr pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:28">reg_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:22">return <expr pos:start="87:20" pos:end="87:21"><name pos:start="87:20" pos:end="87:21">rc</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="91:9" pos:end="95:76">/* Set bits in emu_mask are the ones we emulate. The dev.config shall

         * contain the emulated view of the guest - therefore we flip the mask

         * to mask out the host values (which dev.config initially has) . */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:47"><expr pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:17">host_mask</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:29">size_mask</name> <operator pos:start="97:31" pos:end="97:31">&amp;</operator> <operator pos:start="97:33" pos:end="97:33">~</operator><name pos:start="97:34" pos:end="97:46"><name pos:start="97:34" pos:end="97:36">reg</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:46">emu_mask</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="101:9" pos:end="131:23"><if pos:start="101:9" pos:end="129:9">if <condition pos:start="101:12" pos:end="101:52">(<expr pos:start="101:13" pos:end="101:51"><operator pos:start="101:13" pos:end="101:13">(</operator><name pos:start="101:14" pos:end="101:17">data</name> <operator pos:start="101:19" pos:end="101:19">&amp;</operator> <name pos:start="101:21" pos:end="101:29">host_mask</name><operator pos:start="101:30" pos:end="101:30">)</operator> <operator pos:start="101:32" pos:end="101:33">!=</operator> <operator pos:start="101:35" pos:end="101:35">(</operator><name pos:start="101:36" pos:end="101:38">val</name> <operator pos:start="101:40" pos:end="101:40">&amp;</operator> <name pos:start="101:42" pos:end="101:50">host_mask</name><operator pos:start="101:51" pos:end="101:51">)</operator></expr>)</condition> <block pos:start="101:54" pos:end="129:9">{<block_content pos:start="103:13" pos:end="127:26">

            <decl_stmt pos:start="103:13" pos:end="103:29"><decl pos:start="103:13" pos:end="103:28"><type pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:20">uint32_t</name></type> <name pos:start="103:22" pos:end="103:28">new_val</name></decl>;</decl_stmt>



            <comment type="block" pos:start="107:13" pos:end="107:54">/* Mask out host (including past size). */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:38"><expr pos:start="109:13" pos:end="109:37"><name pos:start="109:13" pos:end="109:19">new_val</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <name pos:start="109:23" pos:end="109:25">val</name> <operator pos:start="109:27" pos:end="109:27">&amp;</operator> <name pos:start="109:29" pos:end="109:37">host_mask</name></expr>;</expr_stmt>

            <comment type="block" pos:start="111:13" pos:end="111:72">/* Merge emulated ones (excluding the non-emulated ones). */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:40"><expr pos:start="113:13" pos:end="113:39"><name pos:start="113:13" pos:end="113:19">new_val</name> <operator pos:start="113:21" pos:end="113:22">|=</operator> <name pos:start="113:24" pos:end="113:27">data</name> <operator pos:start="113:29" pos:end="113:29">&amp;</operator> <name pos:start="113:31" pos:end="113:39">host_mask</name></expr>;</expr_stmt>

            <comment type="block" pos:start="115:13" pos:end="119:59">/* Leave intact host and emulated values past the size - even though

             * we do not care as we write per reg-&gt;size granularity, but for the

             * logging below lets have the proper value. */</comment>

            <expr_stmt pos:start="121:13" pos:end="121:51"><expr pos:start="121:13" pos:end="121:50"><name pos:start="121:13" pos:end="121:19">new_val</name> <operator pos:start="121:21" pos:end="121:22">|=</operator> <operator pos:start="121:24" pos:end="121:24">(</operator><operator pos:start="121:25" pos:end="121:25">(</operator><name pos:start="121:26" pos:end="121:28">val</name> <operator pos:start="121:30" pos:end="121:30">|</operator> <name pos:start="121:32" pos:end="121:35">data</name><operator pos:start="121:36" pos:end="121:36">)</operator><operator pos:start="121:37" pos:end="121:37">)</operator> <operator pos:start="121:39" pos:end="121:39">&amp;</operator> <operator pos:start="121:41" pos:end="121:41">~</operator><name pos:start="121:42" pos:end="121:50">size_mask</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="125:51"><expr pos:start="123:13" pos:end="125:50"><call pos:start="123:13" pos:end="125:50"><name pos:start="123:13" pos:end="123:22">XEN_PT_LOG</name><argument_list pos:start="123:23" pos:end="125:50">(<argument pos:start="123:24" pos:end="123:30"><expr pos:start="123:24" pos:end="123:30"><operator pos:start="123:24" pos:end="123:24">&amp;</operator><name pos:start="123:25" pos:end="123:30"><name pos:start="123:25" pos:end="123:25">s</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:30">dev</name></name></expr></argument>,<argument pos:start="123:32" pos:end="123:107"><expr pos:start="123:32" pos:end="123:107"><literal type="string" pos:start="123:32" pos:end="123:107">"Offset 0x%04x mismatch! Emulated=0x%04x, host=0x%04x, syncing to 0x%04x.\n"</literal></expr></argument>,

                       <argument pos:start="125:24" pos:end="125:29"><expr pos:start="125:24" pos:end="125:29"><name pos:start="125:24" pos:end="125:29">offset</name></expr></argument>, <argument pos:start="125:32" pos:end="125:35"><expr pos:start="125:32" pos:end="125:35"><name pos:start="125:32" pos:end="125:35">data</name></expr></argument>, <argument pos:start="125:38" pos:end="125:40"><expr pos:start="125:38" pos:end="125:40"><name pos:start="125:38" pos:end="125:40">val</name></expr></argument>, <argument pos:start="125:43" pos:end="125:49"><expr pos:start="125:43" pos:end="125:49"><name pos:start="125:43" pos:end="125:49">new_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:26"><expr pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:15">val</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <name pos:start="127:19" pos:end="127:25">new_val</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="131:23">else<block type="pseudo" pos:start="131:13" pos:end="131:23"><block_content pos:start="131:13" pos:end="131:23">

            <expr_stmt pos:start="131:13" pos:end="131:23"><expr pos:start="131:13" pos:end="131:22"><name pos:start="131:13" pos:end="131:15">val</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:22">data</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="block" pos:start="135:9" pos:end="139:59">/* This could be just pci_set_long as we don't modify the bits

         * past reg-&gt;size, but in case this routine is run in parallel

         * we do not want to over-write other registers. */</comment>

        <switch pos:start="141:9" pos:end="157:9">switch <condition pos:start="141:16" pos:end="141:26">(<expr pos:start="141:17" pos:end="141:25"><name pos:start="141:17" pos:end="141:25"><name pos:start="141:17" pos:end="141:19">reg</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:25">size</name></name></expr>)</condition> <block pos:start="141:28" pos:end="157:9">{<block_content pos:start="143:9" pos:end="155:27">

        <case pos:start="143:9" pos:end="143:15">case <expr pos:start="143:14" pos:end="143:14"><literal type="number" pos:start="143:14" pos:end="143:14">1</literal></expr>:</case> <expr_stmt pos:start="143:17" pos:end="143:67"><expr pos:start="143:17" pos:end="143:66"><call pos:start="143:17" pos:end="143:66"><name pos:start="143:17" pos:end="143:28">pci_set_byte</name><argument_list pos:start="143:29" pos:end="143:66">(<argument pos:start="143:30" pos:end="143:51"><expr pos:start="143:30" pos:end="143:51"><name pos:start="143:30" pos:end="143:42"><name pos:start="143:30" pos:end="143:30">s</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:35">dev</name><operator pos:start="143:36" pos:end="143:36">.</operator><name pos:start="143:37" pos:end="143:42">config</name></name> <operator pos:start="143:44" pos:end="143:44">+</operator> <name pos:start="143:46" pos:end="143:51">offset</name></expr></argument>, <argument pos:start="143:54" pos:end="143:65"><expr pos:start="143:54" pos:end="143:65"><operator pos:start="143:54" pos:end="143:54">(</operator><name pos:start="143:55" pos:end="143:61">uint8_t</name><operator pos:start="143:62" pos:end="143:62">)</operator><name pos:start="143:63" pos:end="143:65">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="145:17" pos:end="145:22">break;</break>

        <case pos:start="147:9" pos:end="147:15">case <expr pos:start="147:14" pos:end="147:14"><literal type="number" pos:start="147:14" pos:end="147:14">2</literal></expr>:</case> <expr_stmt pos:start="147:17" pos:end="147:68"><expr pos:start="147:17" pos:end="147:67"><call pos:start="147:17" pos:end="147:67"><name pos:start="147:17" pos:end="147:28">pci_set_word</name><argument_list pos:start="147:29" pos:end="147:67">(<argument pos:start="147:30" pos:end="147:51"><expr pos:start="147:30" pos:end="147:51"><name pos:start="147:30" pos:end="147:42"><name pos:start="147:30" pos:end="147:30">s</name><operator pos:start="147:31" pos:end="147:32">-&gt;</operator><name pos:start="147:33" pos:end="147:35">dev</name><operator pos:start="147:36" pos:end="147:36">.</operator><name pos:start="147:37" pos:end="147:42">config</name></name> <operator pos:start="147:44" pos:end="147:44">+</operator> <name pos:start="147:46" pos:end="147:51">offset</name></expr></argument>, <argument pos:start="147:54" pos:end="147:66"><expr pos:start="147:54" pos:end="147:66"><operator pos:start="147:54" pos:end="147:54">(</operator><name pos:start="147:55" pos:end="147:62">uint16_t</name><operator pos:start="147:63" pos:end="147:63">)</operator><name pos:start="147:64" pos:end="147:66">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

        <case pos:start="151:9" pos:end="151:15">case <expr pos:start="151:14" pos:end="151:14"><literal type="number" pos:start="151:14" pos:end="151:14">4</literal></expr>:</case> <expr_stmt pos:start="151:17" pos:end="151:58"><expr pos:start="151:17" pos:end="151:57"><call pos:start="151:17" pos:end="151:57"><name pos:start="151:17" pos:end="151:28">pci_set_long</name><argument_list pos:start="151:29" pos:end="151:57">(<argument pos:start="151:30" pos:end="151:51"><expr pos:start="151:30" pos:end="151:51"><name pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:30">s</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:35">dev</name><operator pos:start="151:36" pos:end="151:36">.</operator><name pos:start="151:37" pos:end="151:42">config</name></name> <operator pos:start="151:44" pos:end="151:44">+</operator> <name pos:start="151:46" pos:end="151:51">offset</name></expr></argument>, <argument pos:start="151:54" pos:end="151:56"><expr pos:start="151:54" pos:end="151:56"><name pos:start="151:54" pos:end="151:56">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="153:17" pos:end="153:22">break;</break>

        <default pos:start="155:9" pos:end="155:16">default:</default> <expr_stmt pos:start="155:18" pos:end="155:27"><expr pos:start="155:18" pos:end="155:26"><call pos:start="155:18" pos:end="155:26"><name pos:start="155:18" pos:end="155:23">assert</name><argument_list pos:start="155:24" pos:end="155:26">(<argument pos:start="155:25" pos:end="155:25"><expr pos:start="155:25" pos:end="155:25"><literal type="number" pos:start="155:25" pos:end="155:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <comment type="block" pos:start="159:9" pos:end="159:32">/* set register value */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:30"><expr pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:17">reg_entry</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:23">data</name></name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:29">val</name></expr>;</expr_stmt>



    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="167:5" pos:end="167:33">/* list add register entry */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:66"><expr pos:start="169:5" pos:end="169:65"><call pos:start="169:5" pos:end="169:65"><name pos:start="169:5" pos:end="169:21">QLIST_INSERT_HEAD</name><argument_list pos:start="169:22" pos:end="169:65">(<argument pos:start="169:23" pos:end="169:44"><expr pos:start="169:23" pos:end="169:44"><operator pos:start="169:23" pos:end="169:23">&amp;</operator><name pos:start="169:24" pos:end="169:44"><name pos:start="169:24" pos:end="169:30">reg_grp</name><operator pos:start="169:31" pos:end="169:32">-&gt;</operator><name pos:start="169:33" pos:end="169:44">reg_tbl_list</name></name></expr></argument>, <argument pos:start="169:47" pos:end="169:55"><expr pos:start="169:47" pos:end="169:55"><name pos:start="169:47" pos:end="169:55">reg_entry</name></expr></argument>, <argument pos:start="169:58" pos:end="169:64"><expr pos:start="169:58" pos:end="169:64"><name pos:start="169:58" pos:end="169:64">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
