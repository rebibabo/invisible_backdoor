<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7234.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">hmp_info_memdev</name><parameter_list pos:start="1:21" pos:end="1:54">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:28">Monitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">mon</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:46">QDict</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:38">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:14">err</name> <init pos:start="5:16" pos:end="5:21">= <expr pos:start="5:18" pos:end="5:21"><name pos:start="5:18" pos:end="5:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">MemdevList</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:27">memdev_list</name> <init pos:start="7:29" pos:end="7:52">= <expr pos:start="7:31" pos:end="7:52"><call pos:start="7:31" pos:end="7:52"><name pos:start="7:31" pos:end="7:46">qmp_query_memdev</name><argument_list pos:start="7:47" pos:end="7:52">(<argument pos:start="7:48" pos:end="7:51"><expr pos:start="7:48" pos:end="7:51"><operator pos:start="7:48" pos:end="7:48">&amp;</operator><name pos:start="7:49" pos:end="7:51">err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">MemdevList</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">m</name> <init pos:start="9:19" pos:end="9:31">= <expr pos:start="9:21" pos:end="9:31"><name pos:start="9:21" pos:end="9:31">memdev_list</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">StringOutputVisitor</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:27">ov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name> <init pos:start="15:11" pos:end="15:13">= <expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr></init></decl>;</decl_stmt>





    <while pos:start="21:5" pos:end="63:5">while <condition pos:start="21:11" pos:end="21:13">(<expr pos:start="21:12" pos:end="21:12"><name pos:start="21:12" pos:end="21:12">m</name></expr>)</condition> <block pos:start="21:15" pos:end="63:5">{<block_content pos:start="23:9" pos:end="61:12">

        <expr_stmt pos:start="23:9" pos:end="23:46"><expr pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:10">ov</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:45"><name pos:start="23:14" pos:end="23:38">string_output_visitor_new</name><argument_list pos:start="23:39" pos:end="23:45">(<argument pos:start="23:40" pos:end="23:44"><expr pos:start="23:40" pos:end="23:44"><name pos:start="23:40" pos:end="23:44">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:59"><expr pos:start="25:9" pos:end="27:58"><call pos:start="25:9" pos:end="27:58"><name pos:start="25:9" pos:end="25:29">visit_type_uint16List</name><argument_list pos:start="25:30" pos:end="27:58">(<argument pos:start="25:31" pos:end="25:59"><expr pos:start="25:31" pos:end="25:59"><call pos:start="25:31" pos:end="25:59"><name pos:start="25:31" pos:end="25:55">string_output_get_visitor</name><argument_list pos:start="25:56" pos:end="25:59">(<argument pos:start="25:57" pos:end="25:58"><expr pos:start="25:57" pos:end="25:58"><name pos:start="25:57" pos:end="25:58">ov</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:62" pos:end="25:65"><expr pos:start="25:62" pos:end="25:65"><name pos:start="25:62" pos:end="25:65">NULL</name></expr></argument>,

                              <argument pos:start="27:31" pos:end="27:51"><expr pos:start="27:31" pos:end="27:51"><operator pos:start="27:31" pos:end="27:31">&amp;</operator><name pos:start="27:32" pos:end="27:51"><name pos:start="27:32" pos:end="27:32">m</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:39">value</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:51">host_nodes</name></name></expr></argument>, <argument pos:start="27:54" pos:end="27:57"><expr pos:start="27:54" pos:end="27:57"><name pos:start="27:54" pos:end="27:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:55"><expr pos:start="29:9" pos:end="29:54"><call pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:22">monitor_printf</name><argument_list pos:start="29:23" pos:end="29:54">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">mon</name></expr></argument>, <argument pos:start="29:29" pos:end="29:50"><expr pos:start="29:29" pos:end="29:50"><literal type="string" pos:start="29:29" pos:end="29:50">"memory backend: %d\n"</literal></expr></argument>, <argument pos:start="29:53" pos:end="29:53"><expr pos:start="29:53" pos:end="29:53"><name pos:start="29:53" pos:end="29:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:22">monitor_printf</name><argument_list pos:start="31:23" pos:end="31:69">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">mon</name></expr></argument>, <argument pos:start="31:29" pos:end="31:52"><expr pos:start="31:29" pos:end="31:52"><literal type="string" pos:start="31:29" pos:end="31:40">"  size:  %"</literal> <name pos:start="31:42" pos:end="31:47">PRId64</name> <literal type="string" pos:start="31:49" pos:end="31:52">"\n"</literal></expr></argument>, <argument pos:start="31:55" pos:end="31:68"><expr pos:start="31:55" pos:end="31:68"><name pos:start="31:55" pos:end="31:68"><name pos:start="31:55" pos:end="31:55">m</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:62">value</name><operator pos:start="31:63" pos:end="31:64">-&gt;</operator><name pos:start="31:65" pos:end="31:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="35:59"><expr pos:start="33:9" pos:end="35:58"><call pos:start="33:9" pos:end="35:58"><name pos:start="33:9" pos:end="33:22">monitor_printf</name><argument_list pos:start="33:23" pos:end="35:58">(<argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">mon</name></expr></argument>, <argument pos:start="33:29" pos:end="33:43"><expr pos:start="33:29" pos:end="33:43"><literal type="string" pos:start="33:29" pos:end="33:43">"  merge: %s\n"</literal></expr></argument>,

                       <argument pos:start="35:24" pos:end="35:57"><expr pos:start="35:24" pos:end="35:57"><ternary pos:start="35:24" pos:end="35:57"><condition pos:start="35:24" pos:end="35:40"><expr pos:start="35:24" pos:end="35:38"><name pos:start="35:24" pos:end="35:38"><name pos:start="35:24" pos:end="35:24">m</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:31">value</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:38">merge</name></name></expr> ?</condition><then pos:start="35:42" pos:end="35:47"> <expr pos:start="35:42" pos:end="35:47"><literal type="string" pos:start="35:42" pos:end="35:47">"true"</literal></expr> </then><else pos:start="35:49" pos:end="35:57">: <expr pos:start="35:51" pos:end="35:57"><literal type="string" pos:start="35:51" pos:end="35:57">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:58"><expr pos:start="37:9" pos:end="39:57"><call pos:start="37:9" pos:end="39:57"><name pos:start="37:9" pos:end="37:22">monitor_printf</name><argument_list pos:start="37:23" pos:end="39:57">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">mon</name></expr></argument>, <argument pos:start="37:29" pos:end="37:42"><expr pos:start="37:29" pos:end="37:42"><literal type="string" pos:start="37:29" pos:end="37:42">"  dump: %s\n"</literal></expr></argument>,

                       <argument pos:start="39:24" pos:end="39:56"><expr pos:start="39:24" pos:end="39:56"><ternary pos:start="39:24" pos:end="39:56"><condition pos:start="39:24" pos:end="39:39"><expr pos:start="39:24" pos:end="39:37"><name pos:start="39:24" pos:end="39:37"><name pos:start="39:24" pos:end="39:24">m</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:31">value</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:37">dump</name></name></expr> ?</condition><then pos:start="39:41" pos:end="39:46"> <expr pos:start="39:41" pos:end="39:46"><literal type="string" pos:start="39:41" pos:end="39:46">"true"</literal></expr> </then><else pos:start="39:48" pos:end="39:56">: <expr pos:start="39:50" pos:end="39:56"><literal type="string" pos:start="39:50" pos:end="39:56">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="43:62"><expr pos:start="41:9" pos:end="43:61"><call pos:start="41:9" pos:end="43:61"><name pos:start="41:9" pos:end="41:22">monitor_printf</name><argument_list pos:start="41:23" pos:end="43:61">(<argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><name pos:start="41:24" pos:end="41:26">mon</name></expr></argument>, <argument pos:start="41:29" pos:end="41:46"><expr pos:start="41:29" pos:end="41:46"><literal type="string" pos:start="41:29" pos:end="41:46">"  prealloc: %s\n"</literal></expr></argument>,

                       <argument pos:start="43:24" pos:end="43:60"><expr pos:start="43:24" pos:end="43:60"><ternary pos:start="43:24" pos:end="43:60"><condition pos:start="43:24" pos:end="43:43"><expr pos:start="43:24" pos:end="43:41"><name pos:start="43:24" pos:end="43:41"><name pos:start="43:24" pos:end="43:24">m</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:31">value</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:41">prealloc</name></name></expr> ?</condition><then pos:start="43:45" pos:end="43:50"> <expr pos:start="43:45" pos:end="43:50"><literal type="string" pos:start="43:45" pos:end="43:50">"true"</literal></expr> </then><else pos:start="43:52" pos:end="43:60">: <expr pos:start="43:54" pos:end="43:60"><literal type="string" pos:start="43:54" pos:end="43:60">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:63"><expr pos:start="45:9" pos:end="47:62"><call pos:start="45:9" pos:end="47:62"><name pos:start="45:9" pos:end="45:22">monitor_printf</name><argument_list pos:start="45:23" pos:end="47:62">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">mon</name></expr></argument>, <argument pos:start="45:29" pos:end="45:44"><expr pos:start="45:29" pos:end="45:44"><literal type="string" pos:start="45:29" pos:end="45:44">"  policy: %s\n"</literal></expr></argument>,

                       <argument pos:start="47:24" pos:end="47:61"><expr pos:start="47:24" pos:end="47:61"><name pos:start="47:24" pos:end="47:61"><name pos:start="47:24" pos:end="47:43">HostMemPolicy_lookup</name><index pos:start="47:44" pos:end="47:61">[<expr pos:start="47:45" pos:end="47:60"><name pos:start="47:45" pos:end="47:60"><name pos:start="47:45" pos:end="47:45">m</name><operator pos:start="47:46" pos:end="47:47">-&gt;</operator><name pos:start="47:48" pos:end="47:52">value</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:60">policy</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:43"><expr pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:11">str</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:42"><name pos:start="49:15" pos:end="49:38">string_output_get_string</name><argument_list pos:start="49:39" pos:end="49:42">(<argument pos:start="49:40" pos:end="49:41"><expr pos:start="49:40" pos:end="49:41"><name pos:start="49:40" pos:end="49:41">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><call pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:22">monitor_printf</name><argument_list pos:start="51:23" pos:end="51:54">(<argument pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:26">mon</name></expr></argument>, <argument pos:start="51:29" pos:end="51:48"><expr pos:start="51:29" pos:end="51:48"><literal type="string" pos:start="51:29" pos:end="51:48">"  host nodes: %s\n"</literal></expr></argument>, <argument pos:start="51:51" pos:end="51:53"><expr pos:start="51:51" pos:end="51:53"><name pos:start="51:51" pos:end="51:53">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:20"><expr pos:start="55:9" pos:end="55:19"><call pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:14">g_free</name><argument_list pos:start="55:15" pos:end="55:19">(<argument pos:start="55:16" pos:end="55:18"><expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><call pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:37">string_output_visitor_cleanup</name><argument_list pos:start="57:38" pos:end="57:41">(<argument pos:start="57:39" pos:end="57:40"><expr pos:start="57:39" pos:end="57:40"><name pos:start="57:39" pos:end="57:40">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:20"><expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:9">m</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <name pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:13">m</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:19">next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:12"><expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:9">i</name><operator pos:start="61:10" pos:end="61:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><call pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:18">monitor_printf</name><argument_list pos:start="67:19" pos:end="67:29">(<argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">mon</name></expr></argument>, <argument pos:start="67:25" pos:end="67:28"><expr pos:start="67:25" pos:end="67:28"><literal type="string" pos:start="67:25" pos:end="67:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:38"><expr pos:start="71:5" pos:end="71:37"><call pos:start="71:5" pos:end="71:37"><name pos:start="71:5" pos:end="71:24">qapi_free_MemdevList</name><argument_list pos:start="71:25" pos:end="71:37">(<argument pos:start="71:26" pos:end="71:36"><expr pos:start="71:26" pos:end="71:36"><name pos:start="71:26" pos:end="71:36">memdev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
