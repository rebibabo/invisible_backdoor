<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24150.c" pos:tabs="8"><function pos:start="1:1" pos:end="363:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ref405ep_init</name> <parameter_list pos:start="1:27" pos:end="11:49">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:37">ram_addr_t</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:50"><decl pos:start="3:28" pos:end="3:50"><type pos:start="3:28" pos:end="3:50"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:37">char</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">boot_device</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:54"><decl pos:start="5:28" pos:end="5:54"><type pos:start="5:28" pos:end="5:54"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:37">char</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:54">kernel_filename</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:53"><decl pos:start="7:28" pos:end="7:53"><type pos:start="7:28" pos:end="7:53"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:37">char</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:53">kernel_cmdline</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:54"><decl pos:start="9:28" pos:end="9:54"><type pos:start="9:28" pos:end="9:54"><specifier pos:start="9:28" pos:end="9:32">const</specifier> <name pos:start="9:34" pos:end="9:37">char</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:54">initrd_filename</name></decl></parameter>,

                           <parameter pos:start="11:28" pos:end="11:48"><decl pos:start="11:28" pos:end="11:48"><type pos:start="11:28" pos:end="11:48"><specifier pos:start="11:28" pos:end="11:32">const</specifier> <name pos:start="11:34" pos:end="11:37">char</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:48">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="363:1">{<block_content pos:start="15:5" pos:end="361:51">

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20">ppc4xx_bd_info_t</name></type> <name pos:start="17:22" pos:end="17:23">bd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUPPCState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:26"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:26">sram_offset</name></decl>, <decl pos:start="23:29" pos:end="23:39"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:29" pos:end="23:39">bios_offset</name></decl>, <decl pos:start="23:42" pos:end="23:46"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:42" pos:end="23:46">bdloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:50"><decl pos:start="25:5" pos:end="25:35"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:22">target_phys_addr_t</name></type> <name pos:start="25:24" pos:end="25:35"><name pos:start="25:24" pos:end="25:32">ram_bases</name><index pos:start="25:33" pos:end="25:35">[<expr pos:start="25:34" pos:end="25:34"><literal type="number" pos:start="25:34" pos:end="25:34">2</literal></expr>]</index></name></decl>, <decl pos:start="25:38" pos:end="25:49"><type ref="prev" pos:start="25:5" pos:end="25:22"/><name pos:start="25:38" pos:end="25:49"><name pos:start="25:38" pos:end="25:46">ram_sizes</name><index pos:start="25:47" pos:end="25:49">[<expr pos:start="25:48" pos:end="25:48"><literal type="number" pos:start="25:48" pos:end="25:48">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">target_ulong</name></type> <name pos:start="27:18" pos:end="27:26">sram_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">long</name></type> <name pos:start="29:10" pos:end="29:18">bios_size</name></decl>;</decl_stmt>

    <comment type="line" pos:start="31:5" pos:end="31:23">//int phy_addr = 0;</comment>

    <comment type="line" pos:start="33:5" pos:end="33:30">//static int phy_addr = 1;</comment>

    <decl_stmt pos:start="35:5" pos:end="35:42"><decl pos:start="35:5" pos:end="35:28"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:16">target_ulong</name></type> <name pos:start="35:18" pos:end="35:28">kernel_base</name></decl>, <decl pos:start="35:31" pos:end="35:41"><type ref="prev" pos:start="35:5" pos:end="35:16"/><name pos:start="35:31" pos:end="35:41">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:34"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">long</name></type> <name pos:start="37:10" pos:end="37:20">kernel_size</name></decl>, <decl pos:start="37:23" pos:end="37:33"><type ref="prev" pos:start="37:5" pos:end="37:8"/><name pos:start="37:23" pos:end="37:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:19"><decl pos:start="39:5" pos:end="39:18"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:18">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:32"><decl pos:start="41:5" pos:end="41:14"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:14">fl_idx</name></decl>, <decl pos:start="41:17" pos:end="41:26"><type ref="prev" pos:start="41:5" pos:end="41:7"/><name pos:start="41:17" pos:end="41:26">fl_sectors</name></decl>, <decl pos:start="41:29" pos:end="41:31"><type ref="prev" pos:start="41:5" pos:end="41:7"/><name pos:start="41:29" pos:end="41:31">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:21"><decl pos:start="43:5" pos:end="43:20"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:20">dinfo</name></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:23">/* XXX: fix this */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:67"><expr pos:start="49:5" pos:end="49:66"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:13">ram_bases</name><index pos:start="49:14" pos:end="49:16">[<expr pos:start="49:15" pos:end="49:15"><literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>]</index></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:66"><name pos:start="49:20" pos:end="49:33">qemu_ram_alloc</name><argument_list pos:start="49:34" pos:end="49:66">(<argument pos:start="49:35" pos:end="49:38"><expr pos:start="49:35" pos:end="49:38"><name pos:start="49:35" pos:end="49:38">NULL</name></expr></argument>, <argument pos:start="49:41" pos:end="49:53"><expr pos:start="49:41" pos:end="49:53"><literal type="string" pos:start="49:41" pos:end="49:53">"ef405ep.ram"</literal></expr></argument>, <argument pos:start="49:56" pos:end="49:65"><expr pos:start="49:56" pos:end="49:65"><literal type="number" pos:start="49:56" pos:end="49:65">0x08000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:13">ram_sizes</name><index pos:start="51:14" pos:end="51:16">[<expr pos:start="51:15" pos:end="51:15"><literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>]</index></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <literal type="number" pos:start="51:20" pos:end="51:29">0x08000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:30"><expr pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:13">ram_bases</name><index pos:start="53:14" pos:end="53:16">[<expr pos:start="53:15" pos:end="53:15"><literal type="number" pos:start="53:15" pos:end="53:15">1</literal></expr>]</index></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <literal type="number" pos:start="53:20" pos:end="53:29">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:30"><expr pos:start="55:5" pos:end="55:29"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:13">ram_sizes</name><index pos:start="55:14" pos:end="55:16">[<expr pos:start="55:15" pos:end="55:15"><literal type="number" pos:start="55:15" pos:end="55:15">1</literal></expr>]</index></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <literal type="number" pos:start="55:20" pos:end="55:29">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:12">ram_size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:18">128</literal> <operator pos:start="57:20" pos:end="57:20">*</operator> <literal type="number" pos:start="57:22" pos:end="57:25">1024</literal> <operator pos:start="57:27" pos:end="57:27">*</operator> <literal type="number" pos:start="57:29" pos:end="57:32">1024</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="59:1" pos:end="59:23">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:42"><call pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:10">printf</name><argument_list pos:start="61:11" pos:end="61:42">(<argument pos:start="61:12" pos:end="61:31"><expr pos:start="61:12" pos:end="61:31"><literal type="string" pos:start="61:12" pos:end="61:31">"%s: register cpu\n"</literal></expr></argument>, <argument pos:start="61:34" pos:end="61:41"><expr pos:start="61:34" pos:end="61:41"><name pos:start="61:34" pos:end="61:41">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="65:5" pos:end="67:57"><expr pos:start="65:5" pos:end="67:56"><name pos:start="65:5" pos:end="65:7">env</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="67:56"><name pos:start="65:11" pos:end="65:23">ppc405ep_init</name><argument_list pos:start="65:24" pos:end="67:56">(<argument pos:start="65:25" pos:end="65:33"><expr pos:start="65:25" pos:end="65:33"><name pos:start="65:25" pos:end="65:33">ram_bases</name></expr></argument>, <argument pos:start="65:36" pos:end="65:44"><expr pos:start="65:36" pos:end="65:44"><name pos:start="65:36" pos:end="65:44">ram_sizes</name></expr></argument>, <argument pos:start="65:47" pos:end="65:54"><expr pos:start="65:47" pos:end="65:54"><literal type="number" pos:start="65:47" pos:end="65:54">33333333</literal></expr></argument>, <argument pos:start="65:57" pos:end="65:60"><expr pos:start="65:57" pos:end="65:60"><operator pos:start="65:57" pos:end="65:57">&amp;</operator><name pos:start="65:58" pos:end="65:60">pic</name></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:55"><expr pos:start="67:25" pos:end="67:55"><ternary pos:start="67:25" pos:end="67:55"><condition pos:start="67:25" pos:end="67:49"><expr pos:start="67:25" pos:end="67:47"><name pos:start="67:25" pos:end="67:39">kernel_filename</name> <operator pos:start="67:41" pos:end="67:42">==</operator> <name pos:start="67:44" pos:end="67:47">NULL</name></expr> ?</condition><then pos:start="67:51" pos:end="67:51"> <expr pos:start="67:51" pos:end="67:51"><literal type="number" pos:start="67:51" pos:end="67:51">0</literal></expr> </then><else pos:start="67:53" pos:end="67:55">: <expr pos:start="67:55" pos:end="67:55"><literal type="number" pos:start="67:55" pos:end="67:55">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:23">/* allocate SRAM */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:27"><expr pos:start="71:5" pos:end="71:26"><name pos:start="71:5" pos:end="71:13">sram_size</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <literal type="number" pos:start="71:17" pos:end="71:19">512</literal> <operator pos:start="71:21" pos:end="71:21">*</operator> <literal type="number" pos:start="71:23" pos:end="71:26">1024</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:65"><name pos:start="73:5" pos:end="73:15">sram_offset</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:65"><name pos:start="73:19" pos:end="73:32">qemu_ram_alloc</name><argument_list pos:start="73:33" pos:end="73:65">(<argument pos:start="73:34" pos:end="73:37"><expr pos:start="73:34" pos:end="73:37"><name pos:start="73:34" pos:end="73:37">NULL</name></expr></argument>, <argument pos:start="73:40" pos:end="73:53"><expr pos:start="73:40" pos:end="73:53"><literal type="string" pos:start="73:40" pos:end="73:53">"ef405ep.sram"</literal></expr></argument>, <argument pos:start="73:56" pos:end="73:64"><expr pos:start="73:56" pos:end="73:64"><name pos:start="73:56" pos:end="73:64">sram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="75:1" pos:end="75:23">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="77:72"><call pos:start="77:5" pos:end="77:72"><name pos:start="77:5" pos:end="77:10">printf</name><argument_list pos:start="77:11" pos:end="77:72">(<argument pos:start="77:12" pos:end="77:48"><expr pos:start="77:12" pos:end="77:48"><literal type="string" pos:start="77:12" pos:end="77:48">"%s: register SRAM at offset %08lx\n"</literal></expr></argument>, <argument pos:start="77:51" pos:end="77:58"><expr pos:start="77:51" pos:end="77:58"><name pos:start="77:51" pos:end="77:58">__func__</name></expr></argument>, <argument pos:start="77:61" pos:end="77:71"><expr pos:start="77:61" pos:end="77:71"><name pos:start="77:61" pos:end="77:71">sram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="81:5" pos:end="88:0"><expr pos:start="81:5" pos:end="83:58"><call pos:start="81:5" pos:end="83:58"><name pos:start="81:5" pos:end="81:32">cpu_register_physical_memory</name><argument_list pos:start="81:33" pos:end="83:58">(<argument pos:start="81:34" pos:end="81:43"><expr pos:start="81:34" pos:end="81:43"><literal type="number" pos:start="81:34" pos:end="81:43">0xFFF00000</literal></expr></argument>, <argument pos:start="81:46" pos:end="81:54"><expr pos:start="81:46" pos:end="81:54"><name pos:start="81:46" pos:end="81:54">sram_size</name></expr></argument>,

                                 <argument pos:start="83:34" pos:end="83:57"><expr pos:start="83:34" pos:end="83:57"><name pos:start="83:34" pos:end="83:44">sram_offset</name> <operator pos:start="83:46" pos:end="83:46">|</operator> <name pos:start="83:48" pos:end="83:57">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="85:32">/* allocate and load BIOS */</comment>

<cpp:ifdef pos:start="87:1" pos:end="87:23">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="89:5" pos:end="92:0"><expr pos:start="89:5" pos:end="89:43"><call pos:start="89:5" pos:end="89:43"><name pos:start="89:5" pos:end="89:10">printf</name><argument_list pos:start="89:11" pos:end="89:43">(<argument pos:start="89:12" pos:end="89:32"><expr pos:start="89:12" pos:end="89:32"><literal type="string" pos:start="89:12" pos:end="89:32">"%s: register BIOS\n"</literal></expr></argument>, <argument pos:start="89:35" pos:end="89:42"><expr pos:start="89:35" pos:end="89:42"><name pos:start="89:35" pos:end="89:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:14"><name pos:start="93:5" pos:end="93:10">fl_idx</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="95:1" pos:end="95:21">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:21">USE_FLASH_BIOS</name></cpp:ifdef>

    <expr_stmt pos:start="97:5" pos:end="97:44"><expr pos:start="97:5" pos:end="97:43"><name pos:start="97:5" pos:end="97:9">dinfo</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <call pos:start="97:13" pos:end="97:43"><name pos:start="97:13" pos:end="97:21">drive_get</name><argument_list pos:start="97:22" pos:end="97:43">(<argument pos:start="97:23" pos:end="97:31"><expr pos:start="97:23" pos:end="97:31"><name pos:start="97:23" pos:end="97:31">IF_PFLASH</name></expr></argument>, <argument pos:start="97:34" pos:end="97:34"><expr pos:start="97:34" pos:end="97:34"><literal type="number" pos:start="97:34" pos:end="97:34">0</literal></expr></argument>, <argument pos:start="97:37" pos:end="97:42"><expr pos:start="97:37" pos:end="97:42"><name pos:start="97:37" pos:end="97:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="182:0"><if pos:start="99:5" pos:end="129:5">if <condition pos:start="99:8" pos:end="99:14">(<expr pos:start="99:9" pos:end="99:13"><name pos:start="99:9" pos:end="99:13">dinfo</name></expr>)</condition> <block pos:start="99:16" pos:end="129:5">{<block_content pos:start="101:9" pos:end="127:17">

        <expr_stmt pos:start="101:9" pos:end="101:48"><expr pos:start="101:9" pos:end="101:47"><name pos:start="101:9" pos:end="101:17">bios_size</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <call pos:start="101:21" pos:end="101:47"><name pos:start="101:21" pos:end="101:34">bdrv_getlength</name><argument_list pos:start="101:35" pos:end="101:47">(<argument pos:start="101:36" pos:end="101:46"><expr pos:start="101:36" pos:end="101:46"><name pos:start="101:36" pos:end="101:46"><name pos:start="101:36" pos:end="101:40">dinfo</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:70"><expr pos:start="103:9" pos:end="103:69"><name pos:start="103:9" pos:end="103:19">bios_offset</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:69"><name pos:start="103:23" pos:end="103:36">qemu_ram_alloc</name><argument_list pos:start="103:37" pos:end="103:69">(<argument pos:start="103:38" pos:end="103:41"><expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:41">NULL</name></expr></argument>, <argument pos:start="103:44" pos:end="103:57"><expr pos:start="103:44" pos:end="103:57"><literal type="string" pos:start="103:44" pos:end="103:57">"ef405ep.bios"</literal></expr></argument>, <argument pos:start="103:60" pos:end="103:68"><expr pos:start="103:60" pos:end="103:68"><name pos:start="103:60" pos:end="103:68">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="108:0"><expr pos:start="105:9" pos:end="105:46"><name pos:start="105:9" pos:end="105:18">fl_sectors</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <operator pos:start="105:22" pos:end="105:22">(</operator><name pos:start="105:23" pos:end="105:31">bios_size</name> <operator pos:start="105:33" pos:end="105:33">+</operator> <literal type="number" pos:start="105:35" pos:end="105:39">65535</literal><operator pos:start="105:40" pos:end="105:40">)</operator> <operator pos:start="105:42" pos:end="105:43">&gt;&gt;</operator> <literal type="number" pos:start="105:45" pos:end="105:46">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="107:1" pos:end="107:23">#<cpp:directive pos:start="107:2" pos:end="107:6">ifdef</cpp:directive> <name pos:start="107:8" pos:end="107:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="109:9" pos:end="118:0"><expr pos:start="109:9" pos:end="115:61"><call pos:start="109:9" pos:end="115:61"><name pos:start="109:9" pos:end="109:14">printf</name><argument_list pos:start="109:15" pos:end="115:61">(<argument pos:start="109:16" pos:end="111:52"><expr pos:start="109:16" pos:end="111:52"><literal type="string" pos:start="109:16" pos:end="109:52">"Register parallel flash %d size %lx"</literal>

               <literal type="string" pos:start="111:16" pos:end="111:52">" at offset %08lx addr %lx '%s' %d\n"</literal></expr></argument>,

               <argument pos:start="113:16" pos:end="113:21"><expr pos:start="113:16" pos:end="113:21"><name pos:start="113:16" pos:end="113:21">fl_idx</name></expr></argument>, <argument pos:start="113:24" pos:end="113:32"><expr pos:start="113:24" pos:end="113:32"><name pos:start="113:24" pos:end="113:32">bios_size</name></expr></argument>, <argument pos:start="113:35" pos:end="113:45"><expr pos:start="113:35" pos:end="113:45"><name pos:start="113:35" pos:end="113:45">bios_offset</name></expr></argument>, <argument pos:start="113:48" pos:end="113:57"><expr pos:start="113:48" pos:end="113:57"><operator pos:start="113:48" pos:end="113:48">-</operator><name pos:start="113:49" pos:end="113:57">bios_size</name></expr></argument>,

               <argument pos:start="115:16" pos:end="115:48"><expr pos:start="115:16" pos:end="115:48"><call pos:start="115:16" pos:end="115:48"><name pos:start="115:16" pos:end="115:35">bdrv_get_device_name</name><argument_list pos:start="115:36" pos:end="115:48">(<argument pos:start="115:37" pos:end="115:47"><expr pos:start="115:37" pos:end="115:47"><name pos:start="115:37" pos:end="115:47"><name pos:start="115:37" pos:end="115:41">dinfo</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:51" pos:end="115:60"><expr pos:start="115:51" pos:end="115:60"><name pos:start="115:51" pos:end="115:60">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="119:9" pos:end="125:33"><expr pos:start="119:9" pos:end="125:32"><call pos:start="119:9" pos:end="125:32"><name pos:start="119:9" pos:end="119:29">pflash_cfi02_register</name><argument_list pos:start="119:30" pos:end="125:32">(<argument pos:start="119:31" pos:end="119:52"><expr pos:start="119:31" pos:end="119:52"><operator pos:start="119:31" pos:end="119:31">(</operator><name pos:start="119:32" pos:end="119:39">uint32_t</name><operator pos:start="119:40" pos:end="119:40">)</operator><operator pos:start="119:41" pos:end="119:41">(</operator><operator pos:start="119:42" pos:end="119:42">-</operator><name pos:start="119:43" pos:end="119:51">bios_size</name><operator pos:start="119:52" pos:end="119:52">)</operator></expr></argument>, <argument pos:start="119:55" pos:end="119:65"><expr pos:start="119:55" pos:end="119:65"><name pos:start="119:55" pos:end="119:65">bios_offset</name></expr></argument>,

                              <argument pos:start="121:31" pos:end="121:41"><expr pos:start="121:31" pos:end="121:41"><name pos:start="121:31" pos:end="121:41"><name pos:start="121:31" pos:end="121:35">dinfo</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:41">bdrv</name></name></expr></argument>, <argument pos:start="121:44" pos:end="121:48"><expr pos:start="121:44" pos:end="121:48"><literal type="number" pos:start="121:44" pos:end="121:48">65536</literal></expr></argument>, <argument pos:start="121:51" pos:end="121:60"><expr pos:start="121:51" pos:end="121:60"><name pos:start="121:51" pos:end="121:60">fl_sectors</name></expr></argument>, <argument pos:start="121:63" pos:end="121:63"><expr pos:start="121:63" pos:end="121:63"><literal type="number" pos:start="121:63" pos:end="121:63">1</literal></expr></argument>,

                              <argument pos:start="123:31" pos:end="123:31"><expr pos:start="123:31" pos:end="123:31"><literal type="number" pos:start="123:31" pos:end="123:31">2</literal></expr></argument>, <argument pos:start="123:34" pos:end="123:39"><expr pos:start="123:34" pos:end="123:39"><literal type="number" pos:start="123:34" pos:end="123:39">0x0001</literal></expr></argument>, <argument pos:start="123:42" pos:end="123:47"><expr pos:start="123:42" pos:end="123:47"><literal type="number" pos:start="123:42" pos:end="123:47">0x22DA</literal></expr></argument>, <argument pos:start="123:50" pos:end="123:55"><expr pos:start="123:50" pos:end="123:55"><literal type="number" pos:start="123:50" pos:end="123:55">0x0000</literal></expr></argument>, <argument pos:start="123:58" pos:end="123:63"><expr pos:start="123:58" pos:end="123:63"><literal type="number" pos:start="123:58" pos:end="123:63">0x0000</literal></expr></argument>, <argument pos:start="123:66" pos:end="123:70"><expr pos:start="123:66" pos:end="123:70"><literal type="number" pos:start="123:66" pos:end="123:70">0x555</literal></expr></argument>, <argument pos:start="123:73" pos:end="123:77"><expr pos:start="123:73" pos:end="123:77"><literal type="number" pos:start="123:73" pos:end="123:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="125:31" pos:end="125:31"><expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:17"><expr pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:14">fl_idx</name><operator pos:start="127:15" pos:end="127:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="182:0">else

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

    <block pos:start="133:5" pos:end="182:0">{<block_content pos:start="137:9" pos:end="175:74">

<cpp:ifdef pos:start="135:1" pos:end="135:23">#<cpp:directive pos:start="135:2" pos:end="135:6">ifdef</cpp:directive> <name pos:start="135:8" pos:end="135:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="137:9" pos:end="140:0"><expr pos:start="137:9" pos:end="137:39"><call pos:start="137:9" pos:end="137:39"><name pos:start="137:9" pos:end="137:14">printf</name><argument_list pos:start="137:15" pos:end="137:39">(<argument pos:start="137:16" pos:end="137:38"><expr pos:start="137:16" pos:end="137:38"><literal type="string" pos:start="137:16" pos:end="137:38">"Load BIOS from file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="141:9" pos:end="141:70"><expr pos:start="141:9" pos:end="141:69"><name pos:start="141:9" pos:end="141:19">bios_offset</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <call pos:start="141:23" pos:end="141:69"><name pos:start="141:23" pos:end="141:36">qemu_ram_alloc</name><argument_list pos:start="141:37" pos:end="141:69">(<argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><name pos:start="141:38" pos:end="141:41">NULL</name></expr></argument>, <argument pos:start="141:44" pos:end="141:57"><expr pos:start="141:44" pos:end="141:57"><literal type="string" pos:start="141:44" pos:end="141:57">"ef405ep.bios"</literal></expr></argument>, <argument pos:start="141:60" pos:end="141:68"><expr pos:start="141:60" pos:end="141:68"><name pos:start="141:60" pos:end="141:68">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="145:38"><if pos:start="143:9" pos:end="145:38">if <condition pos:start="143:12" pos:end="143:30">(<expr pos:start="143:13" pos:end="143:29"><name pos:start="143:13" pos:end="143:21">bios_name</name> <operator pos:start="143:23" pos:end="143:24">==</operator> <name pos:start="143:26" pos:end="143:29">NULL</name></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:38"><block_content pos:start="145:13" pos:end="145:38">

            <expr_stmt pos:start="145:13" pos:end="145:38"><expr pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:21">bios_name</name> <operator pos:start="145:23" pos:end="145:23">=</operator> <name pos:start="145:25" pos:end="145:37">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:66"><expr pos:start="147:9" pos:end="147:65"><name pos:start="147:9" pos:end="147:16">filename</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <call pos:start="147:20" pos:end="147:65"><name pos:start="147:20" pos:end="147:33">qemu_find_file</name><argument_list pos:start="147:34" pos:end="147:65">(<argument pos:start="147:35" pos:end="147:53"><expr pos:start="147:35" pos:end="147:53"><name pos:start="147:35" pos:end="147:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="147:56" pos:end="147:64"><expr pos:start="147:56" pos:end="147:64"><name pos:start="147:56" pos:end="147:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="159:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:20">filename</name></expr>)</condition> <block pos:start="149:23" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:29">

            <expr_stmt pos:start="151:13" pos:end="151:76"><expr pos:start="151:13" pos:end="151:75"><name pos:start="151:13" pos:end="151:21">bios_size</name> <operator pos:start="151:23" pos:end="151:23">=</operator> <call pos:start="151:25" pos:end="151:75"><name pos:start="151:25" pos:end="151:34">load_image</name><argument_list pos:start="151:35" pos:end="151:75">(<argument pos:start="151:36" pos:end="151:43"><expr pos:start="151:36" pos:end="151:43"><name pos:start="151:36" pos:end="151:43">filename</name></expr></argument>, <argument pos:start="151:46" pos:end="151:74"><expr pos:start="151:46" pos:end="151:74"><call pos:start="151:46" pos:end="151:74"><name pos:start="151:46" pos:end="151:61">qemu_get_ram_ptr</name><argument_list pos:start="151:62" pos:end="151:74">(<argument pos:start="151:63" pos:end="151:73"><expr pos:start="151:63" pos:end="151:73"><name pos:start="151:63" pos:end="151:73">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:29"><expr pos:start="153:13" pos:end="153:28"><call pos:start="153:13" pos:end="153:28"><name pos:start="153:13" pos:end="153:18">g_free</name><argument_list pos:start="153:19" pos:end="153:28">(<argument pos:start="153:20" pos:end="153:27"><expr pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="159:9">else <block pos:start="155:16" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:27">

            <expr_stmt pos:start="157:13" pos:end="157:27"><expr pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:21">bios_size</name> <operator pos:start="157:23" pos:end="157:23">=</operator> <operator pos:start="157:25" pos:end="157:25">-</operator><literal type="number" pos:start="157:26" pos:end="157:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="161:9" pos:end="169:9"><if pos:start="161:9" pos:end="169:9">if <condition pos:start="161:12" pos:end="161:51">(<expr pos:start="161:13" pos:end="161:50"><name pos:start="161:13" pos:end="161:40"><name pos:start="161:13" pos:end="161:21">bios_size</name> <argument_list type="generic" pos:start="161:23" pos:end="161:40">&lt; <argument pos:start="161:25" pos:end="161:38"><expr pos:start="161:25" pos:end="161:38"><literal type="number" pos:start="161:25" pos:end="161:25">0</literal> <operator pos:start="161:27" pos:end="161:28">||</operator> <name pos:start="161:30" pos:end="161:38">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="161:42" pos:end="161:50">BIOS_SIZE</name></expr>)</condition> <block pos:start="161:53" pos:end="169:9">{<block_content pos:start="163:13" pos:end="167:20">

            <expr_stmt pos:start="163:13" pos:end="165:31"><expr pos:start="163:13" pos:end="165:30"><call pos:start="163:13" pos:end="165:30"><name pos:start="163:13" pos:end="163:19">fprintf</name><argument_list pos:start="163:20" pos:end="165:30">(<argument pos:start="163:21" pos:end="163:26"><expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:26">stderr</name></expr></argument>, <argument pos:start="163:29" pos:end="163:70"><expr pos:start="163:29" pos:end="163:70"><literal type="string" pos:start="163:29" pos:end="163:70">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>,

                    <argument pos:start="165:21" pos:end="165:29"><expr pos:start="165:21" pos:end="165:29"><name pos:start="165:21" pos:end="165:29">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:20"><expr pos:start="167:13" pos:end="167:19"><call pos:start="167:13" pos:end="167:19"><name pos:start="167:13" pos:end="167:16">exit</name><argument_list pos:start="167:17" pos:end="167:19">(<argument pos:start="167:18" pos:end="167:18"><expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:17">bios_size</name> <operator pos:start="171:19" pos:end="171:19">=</operator> <operator pos:start="171:21" pos:end="171:21">(</operator><name pos:start="171:22" pos:end="171:30">bios_size</name> <operator pos:start="171:32" pos:end="171:32">+</operator> <literal type="number" pos:start="171:34" pos:end="171:38">0xfff</literal><operator pos:start="171:39" pos:end="171:39">)</operator> <operator pos:start="171:41" pos:end="171:41">&amp;</operator> <operator pos:start="171:43" pos:end="171:43">~</operator><literal type="number" pos:start="171:44" pos:end="171:48">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="175:74"><expr pos:start="173:9" pos:end="175:73"><call pos:start="173:9" pos:end="175:73"><name pos:start="173:9" pos:end="173:36">cpu_register_physical_memory</name><argument_list pos:start="173:37" pos:end="175:73">(<argument pos:start="173:38" pos:end="173:59"><expr pos:start="173:38" pos:end="173:59"><operator pos:start="173:38" pos:end="173:38">(</operator><name pos:start="173:39" pos:end="173:46">uint32_t</name><operator pos:start="173:47" pos:end="173:47">)</operator><operator pos:start="173:48" pos:end="173:48">(</operator><operator pos:start="173:49" pos:end="173:49">-</operator><name pos:start="173:50" pos:end="173:58">bios_size</name><operator pos:start="173:59" pos:end="173:59">)</operator></expr></argument>,

                                     <argument pos:start="175:38" pos:end="175:46"><expr pos:start="175:38" pos:end="175:46"><name pos:start="175:38" pos:end="175:46">bios_size</name></expr></argument>, <argument pos:start="175:49" pos:end="175:72"><expr pos:start="175:49" pos:end="175:72"><name pos:start="175:49" pos:end="175:59">bios_offset</name> <operator pos:start="175:61" pos:end="175:61">|</operator> <name pos:start="175:63" pos:end="175:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="179:5" pos:end="179:23">/* Register FPGA */</comment>

<cpp:ifdef pos:start="181:1" pos:end="181:23">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="183:5" pos:end="186:0"><expr pos:start="183:5" pos:end="183:43"><call pos:start="183:5" pos:end="183:43"><name pos:start="183:5" pos:end="183:10">printf</name><argument_list pos:start="183:11" pos:end="183:43">(<argument pos:start="183:12" pos:end="183:32"><expr pos:start="183:12" pos:end="183:32"><literal type="string" pos:start="183:12" pos:end="183:32">"%s: register FPGA\n"</literal></expr></argument>, <argument pos:start="183:35" pos:end="183:42"><expr pos:start="183:35" pos:end="183:42"><name pos:start="183:35" pos:end="183:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="187:5" pos:end="192:0"><expr pos:start="187:5" pos:end="187:34"><call pos:start="187:5" pos:end="187:34"><name pos:start="187:5" pos:end="187:22">ref405ep_fpga_init</name><argument_list pos:start="187:23" pos:end="187:34">(<argument pos:start="187:24" pos:end="187:33"><expr pos:start="187:24" pos:end="187:33"><literal type="number" pos:start="187:24" pos:end="187:33">0xF0300000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="189:5" pos:end="189:24">/* Register NVRAM */</comment>

<cpp:ifdef pos:start="191:1" pos:end="191:23">#<cpp:directive pos:start="191:2" pos:end="191:6">ifdef</cpp:directive> <name pos:start="191:8" pos:end="191:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="193:5" pos:end="196:0"><expr pos:start="193:5" pos:end="193:44"><call pos:start="193:5" pos:end="193:44"><name pos:start="193:5" pos:end="193:10">printf</name><argument_list pos:start="193:11" pos:end="193:44">(<argument pos:start="193:12" pos:end="193:33"><expr pos:start="193:12" pos:end="193:33"><literal type="string" pos:start="193:12" pos:end="193:33">"%s: register NVRAM\n"</literal></expr></argument>, <argument pos:start="193:36" pos:end="193:43"><expr pos:start="193:36" pos:end="193:43"><name pos:start="193:36" pos:end="193:43">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="197:5" pos:end="197:46"><expr pos:start="197:5" pos:end="197:45"><call pos:start="197:5" pos:end="197:45"><name pos:start="197:5" pos:end="197:15">m48t59_init</name><argument_list pos:start="197:16" pos:end="197:45">(<argument pos:start="197:17" pos:end="197:20"><expr pos:start="197:17" pos:end="197:20"><name pos:start="197:17" pos:end="197:20">NULL</name></expr></argument>, <argument pos:start="197:23" pos:end="197:32"><expr pos:start="197:23" pos:end="197:32"><literal type="number" pos:start="197:23" pos:end="197:32">0xF0000000</literal></expr></argument>, <argument pos:start="197:35" pos:end="197:35"><expr pos:start="197:35" pos:end="197:35"><literal type="number" pos:start="197:35" pos:end="197:35">0</literal></expr></argument>, <argument pos:start="197:38" pos:end="197:41"><expr pos:start="197:38" pos:end="197:41"><literal type="number" pos:start="197:38" pos:end="197:41">8192</literal></expr></argument>, <argument pos:start="197:44" pos:end="197:44"><expr pos:start="197:44" pos:end="197:44"><literal type="number" pos:start="197:44" pos:end="197:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="199:5" pos:end="199:21">/* Load kernel */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:43"><expr pos:start="201:5" pos:end="201:42"><name pos:start="201:5" pos:end="201:14">linux_boot</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <operator pos:start="201:18" pos:end="201:18">(</operator><name pos:start="201:19" pos:end="201:33">kernel_filename</name> <operator pos:start="201:35" pos:end="201:36">!=</operator> <name pos:start="201:38" pos:end="201:41">NULL</name><operator pos:start="201:42" pos:end="201:42">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="356:0"><if pos:start="203:5" pos:end="341:5">if <condition pos:start="203:8" pos:end="203:19">(<expr pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:18">linux_boot</name></expr>)</condition> <block pos:start="203:21" pos:end="341:5">{<block_content pos:start="207:9" pos:end="339:36">

<cpp:ifdef pos:start="205:1" pos:end="205:23">#<cpp:directive pos:start="205:2" pos:end="205:6">ifdef</cpp:directive> <name pos:start="205:8" pos:end="205:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="207:9" pos:end="210:0"><expr pos:start="207:9" pos:end="207:45"><call pos:start="207:9" pos:end="207:45"><name pos:start="207:9" pos:end="207:14">printf</name><argument_list pos:start="207:15" pos:end="207:45">(<argument pos:start="207:16" pos:end="207:34"><expr pos:start="207:16" pos:end="207:34"><literal type="string" pos:start="207:16" pos:end="207:34">"%s: load kernel\n"</literal></expr></argument>, <argument pos:start="207:37" pos:end="207:44"><expr pos:start="207:37" pos:end="207:44"><name pos:start="207:37" pos:end="207:44">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="211:9" pos:end="211:35"><expr pos:start="211:9" pos:end="211:34"><call pos:start="211:9" pos:end="211:34"><name pos:start="211:9" pos:end="211:14">memset</name><argument_list pos:start="211:15" pos:end="211:34">(<argument pos:start="211:16" pos:end="211:18"><expr pos:start="211:16" pos:end="211:18"><operator pos:start="211:16" pos:end="211:16">&amp;</operator><name pos:start="211:17" pos:end="211:18">bd</name></expr></argument>, <argument pos:start="211:21" pos:end="211:21"><expr pos:start="211:21" pos:end="211:21"><literal type="number" pos:start="211:21" pos:end="211:21">0</literal></expr></argument>, <argument pos:start="211:24" pos:end="211:33"><expr pos:start="211:24" pos:end="211:33"><sizeof pos:start="211:24" pos:end="211:33">sizeof<argument_list pos:start="211:30" pos:end="211:33">(<argument pos:start="211:31" pos:end="211:32"><expr pos:start="211:31" pos:end="211:32"><name pos:start="211:31" pos:end="211:32">bd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:36"><expr pos:start="213:9" pos:end="213:35"><name pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:10">bd</name><operator pos:start="213:11" pos:end="213:11">.</operator><name pos:start="213:12" pos:end="213:22">bi_memstart</name></name> <operator pos:start="213:24" pos:end="213:24">=</operator> <literal type="number" pos:start="213:26" pos:end="213:35">0x00000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:33"><expr pos:start="215:9" pos:end="215:32"><name pos:start="215:9" pos:end="215:21"><name pos:start="215:9" pos:end="215:10">bd</name><operator pos:start="215:11" pos:end="215:11">.</operator><name pos:start="215:12" pos:end="215:21">bi_memsize</name></name> <operator pos:start="215:23" pos:end="215:23">=</operator> <name pos:start="215:25" pos:end="215:32">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:38"><expr pos:start="217:9" pos:end="217:37"><name pos:start="217:9" pos:end="217:24"><name pos:start="217:9" pos:end="217:10">bd</name><operator pos:start="217:11" pos:end="217:11">.</operator><name pos:start="217:12" pos:end="217:24">bi_flashstart</name></name> <operator pos:start="217:26" pos:end="217:26">=</operator> <operator pos:start="217:28" pos:end="217:28">-</operator><name pos:start="217:29" pos:end="217:37">bios_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:37"><expr pos:start="219:9" pos:end="219:36"><name pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:10">bd</name><operator pos:start="219:11" pos:end="219:11">.</operator><name pos:start="219:12" pos:end="219:23">bi_flashsize</name></name> <operator pos:start="219:25" pos:end="219:25">=</operator> <operator pos:start="219:27" pos:end="219:27">-</operator><name pos:start="219:28" pos:end="219:36">bios_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:30"><expr pos:start="221:9" pos:end="221:29"><name pos:start="221:9" pos:end="221:25"><name pos:start="221:9" pos:end="221:10">bd</name><operator pos:start="221:11" pos:end="221:11">.</operator><name pos:start="221:12" pos:end="221:25">bi_flashoffset</name></name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:37"><expr pos:start="223:9" pos:end="223:36"><name pos:start="223:9" pos:end="223:23"><name pos:start="223:9" pos:end="223:10">bd</name><operator pos:start="223:11" pos:end="223:11">.</operator><name pos:start="223:12" pos:end="223:23">bi_sramstart</name></name> <operator pos:start="223:25" pos:end="223:25">=</operator> <literal type="number" pos:start="223:27" pos:end="223:36">0xFFF00000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:35"><expr pos:start="225:9" pos:end="225:34"><name pos:start="225:9" pos:end="225:22"><name pos:start="225:9" pos:end="225:10">bd</name><operator pos:start="225:11" pos:end="225:11">.</operator><name pos:start="225:12" pos:end="225:22">bi_sramsize</name></name> <operator pos:start="225:24" pos:end="225:24">=</operator> <name pos:start="225:26" pos:end="225:34">sram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:28"><expr pos:start="227:9" pos:end="227:27"><name pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:10">bd</name><operator pos:start="227:11" pos:end="227:11">.</operator><name pos:start="227:12" pos:end="227:23">bi_bootflags</name></name> <operator pos:start="227:25" pos:end="227:25">=</operator> <literal type="number" pos:start="227:27" pos:end="227:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:34"><expr pos:start="229:9" pos:end="229:33"><name pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:10">bd</name><operator pos:start="229:11" pos:end="229:11">.</operator><name pos:start="229:12" pos:end="229:21">bi_intfreq</name></name> <operator pos:start="229:23" pos:end="229:23">=</operator> <literal type="number" pos:start="229:25" pos:end="229:33">133333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:33"><expr pos:start="231:9" pos:end="231:32"><name pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:10">bd</name><operator pos:start="231:11" pos:end="231:11">.</operator><name pos:start="231:12" pos:end="231:21">bi_busfreq</name></name> <operator pos:start="231:23" pos:end="231:23">=</operator> <literal type="number" pos:start="231:25" pos:end="231:32">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:32"><expr pos:start="233:9" pos:end="233:31"><name pos:start="233:9" pos:end="233:22"><name pos:start="233:9" pos:end="233:10">bd</name><operator pos:start="233:11" pos:end="233:11">.</operator><name pos:start="233:12" pos:end="233:22">bi_baudrate</name></name> <operator pos:start="233:24" pos:end="233:24">=</operator> <literal type="number" pos:start="233:26" pos:end="233:31">115200</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:33"><expr pos:start="235:9" pos:end="235:32"><name pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:10">bd</name><operator pos:start="235:11" pos:end="235:11">.</operator><name pos:start="235:12" pos:end="235:23">bi_s_version</name><index pos:start="235:24" pos:end="235:26">[<expr pos:start="235:25" pos:end="235:25"><literal type="number" pos:start="235:25" pos:end="235:25">0</literal></expr>]</index></name> <operator pos:start="235:28" pos:end="235:28">=</operator> <literal type="char" pos:start="235:30" pos:end="235:32">'Q'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:33"><expr pos:start="237:9" pos:end="237:32"><name pos:start="237:9" pos:end="237:26"><name pos:start="237:9" pos:end="237:10">bd</name><operator pos:start="237:11" pos:end="237:11">.</operator><name pos:start="237:12" pos:end="237:23">bi_s_version</name><index pos:start="237:24" pos:end="237:26">[<expr pos:start="237:25" pos:end="237:25"><literal type="number" pos:start="237:25" pos:end="237:25">1</literal></expr>]</index></name> <operator pos:start="237:28" pos:end="237:28">=</operator> <literal type="char" pos:start="237:30" pos:end="237:32">'M'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:33"><expr pos:start="239:9" pos:end="239:32"><name pos:start="239:9" pos:end="239:26"><name pos:start="239:9" pos:end="239:10">bd</name><operator pos:start="239:11" pos:end="239:11">.</operator><name pos:start="239:12" pos:end="239:23">bi_s_version</name><index pos:start="239:24" pos:end="239:26">[<expr pos:start="239:25" pos:end="239:25"><literal type="number" pos:start="239:25" pos:end="239:25">2</literal></expr>]</index></name> <operator pos:start="239:28" pos:end="239:28">=</operator> <literal type="char" pos:start="239:30" pos:end="239:32">'U'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:34"><expr pos:start="241:9" pos:end="241:33"><name pos:start="241:9" pos:end="241:26"><name pos:start="241:9" pos:end="241:10">bd</name><operator pos:start="241:11" pos:end="241:11">.</operator><name pos:start="241:12" pos:end="241:23">bi_s_version</name><index pos:start="241:24" pos:end="241:26">[<expr pos:start="241:25" pos:end="241:25"><literal type="number" pos:start="241:25" pos:end="241:25">3</literal></expr>]</index></name> <operator pos:start="241:28" pos:end="241:28">=</operator> <literal type="char" pos:start="241:30" pos:end="241:33">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:33"><expr pos:start="243:9" pos:end="243:32"><name pos:start="243:9" pos:end="243:26"><name pos:start="243:9" pos:end="243:10">bd</name><operator pos:start="243:11" pos:end="243:11">.</operator><name pos:start="243:12" pos:end="243:23">bi_r_version</name><index pos:start="243:24" pos:end="243:26">[<expr pos:start="243:25" pos:end="243:25"><literal type="number" pos:start="243:25" pos:end="243:25">0</literal></expr>]</index></name> <operator pos:start="243:28" pos:end="243:28">=</operator> <literal type="char" pos:start="243:30" pos:end="243:32">'Q'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:33"><expr pos:start="245:9" pos:end="245:32"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:10">bd</name><operator pos:start="245:11" pos:end="245:11">.</operator><name pos:start="245:12" pos:end="245:23">bi_r_version</name><index pos:start="245:24" pos:end="245:26">[<expr pos:start="245:25" pos:end="245:25"><literal type="number" pos:start="245:25" pos:end="245:25">1</literal></expr>]</index></name> <operator pos:start="245:28" pos:end="245:28">=</operator> <literal type="char" pos:start="245:30" pos:end="245:32">'E'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:33"><expr pos:start="247:9" pos:end="247:32"><name pos:start="247:9" pos:end="247:26"><name pos:start="247:9" pos:end="247:10">bd</name><operator pos:start="247:11" pos:end="247:11">.</operator><name pos:start="247:12" pos:end="247:23">bi_r_version</name><index pos:start="247:24" pos:end="247:26">[<expr pos:start="247:25" pos:end="247:25"><literal type="number" pos:start="247:25" pos:end="247:25">2</literal></expr>]</index></name> <operator pos:start="247:28" pos:end="247:28">=</operator> <literal type="char" pos:start="247:30" pos:end="247:32">'M'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:33"><expr pos:start="249:9" pos:end="249:32"><name pos:start="249:9" pos:end="249:26"><name pos:start="249:9" pos:end="249:10">bd</name><operator pos:start="249:11" pos:end="249:11">.</operator><name pos:start="249:12" pos:end="249:23">bi_r_version</name><index pos:start="249:24" pos:end="249:26">[<expr pos:start="249:25" pos:end="249:25"><literal type="number" pos:start="249:25" pos:end="249:25">3</literal></expr>]</index></name> <operator pos:start="249:28" pos:end="249:28">=</operator> <literal type="char" pos:start="249:30" pos:end="249:32">'U'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:34"><expr pos:start="251:9" pos:end="251:33"><name pos:start="251:9" pos:end="251:26"><name pos:start="251:9" pos:end="251:10">bd</name><operator pos:start="251:11" pos:end="251:11">.</operator><name pos:start="251:12" pos:end="251:23">bi_r_version</name><index pos:start="251:24" pos:end="251:26">[<expr pos:start="251:25" pos:end="251:25"><literal type="number" pos:start="251:25" pos:end="251:25">4</literal></expr>]</index></name> <operator pos:start="251:28" pos:end="251:28">=</operator> <literal type="char" pos:start="251:30" pos:end="251:33">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:35"><expr pos:start="253:9" pos:end="253:34"><name pos:start="253:9" pos:end="253:22"><name pos:start="253:9" pos:end="253:10">bd</name><operator pos:start="253:11" pos:end="253:11">.</operator><name pos:start="253:12" pos:end="253:22">bi_procfreq</name></name> <operator pos:start="253:24" pos:end="253:24">=</operator> <literal type="number" pos:start="253:26" pos:end="253:34">133333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:37"><expr pos:start="255:9" pos:end="255:36"><name pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:10">bd</name><operator pos:start="255:11" pos:end="255:11">.</operator><name pos:start="255:12" pos:end="255:25">bi_plb_busfreq</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <literal type="number" pos:start="255:29" pos:end="255:36">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:37"><expr pos:start="257:9" pos:end="257:36"><name pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:10">bd</name><operator pos:start="257:11" pos:end="257:11">.</operator><name pos:start="257:12" pos:end="257:25">bi_pci_busfreq</name></name> <operator pos:start="257:27" pos:end="257:27">=</operator> <literal type="number" pos:start="257:29" pos:end="257:36">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:33"><expr pos:start="259:9" pos:end="259:32"><name pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:10">bd</name><operator pos:start="259:11" pos:end="259:11">.</operator><name pos:start="259:12" pos:end="259:21">bi_opbfreq</name></name> <operator pos:start="259:23" pos:end="259:23">=</operator> <literal type="number" pos:start="259:25" pos:end="259:32">33333333</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:58"><expr pos:start="261:9" pos:end="261:57"><name pos:start="261:9" pos:end="261:13">bdloc</name> <operator pos:start="261:15" pos:end="261:15">=</operator> <call pos:start="261:17" pos:end="261:57"><name pos:start="261:17" pos:end="261:35">ppc405_set_bootinfo</name><argument_list pos:start="261:36" pos:end="261:57">(<argument pos:start="261:37" pos:end="261:39"><expr pos:start="261:37" pos:end="261:39"><name pos:start="261:37" pos:end="261:39">env</name></expr></argument>, <argument pos:start="261:42" pos:end="261:44"><expr pos:start="261:42" pos:end="261:44"><operator pos:start="261:42" pos:end="261:42">&amp;</operator><name pos:start="261:43" pos:end="261:44">bd</name></expr></argument>, <argument pos:start="261:47" pos:end="261:56"><expr pos:start="261:47" pos:end="261:56"><literal type="number" pos:start="261:47" pos:end="261:56">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:28"><expr pos:start="263:9" pos:end="263:27"><name pos:start="263:9" pos:end="263:19"><name pos:start="263:9" pos:end="263:11">env</name><operator pos:start="263:12" pos:end="263:13">-&gt;</operator><name pos:start="263:14" pos:end="263:16">gpr</name><index pos:start="263:17" pos:end="263:19">[<expr pos:start="263:18" pos:end="263:18"><literal type="number" pos:start="263:18" pos:end="263:18">3</literal></expr>]</index></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <name pos:start="263:23" pos:end="263:27">bdloc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:39"><expr pos:start="265:9" pos:end="265:38"><name pos:start="265:9" pos:end="265:19">kernel_base</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <name pos:start="265:23" pos:end="265:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="267:9" pos:end="267:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="269:9" pos:end="271:66"><expr pos:start="269:9" pos:end="271:65"><name pos:start="269:9" pos:end="269:19">kernel_size</name> <operator pos:start="269:21" pos:end="269:21">=</operator> <call pos:start="269:23" pos:end="271:65"><name pos:start="269:23" pos:end="269:41">load_image_targphys</name><argument_list pos:start="269:42" pos:end="271:65">(<argument pos:start="269:43" pos:end="269:57"><expr pos:start="269:43" pos:end="269:57"><name pos:start="269:43" pos:end="269:57">kernel_filename</name></expr></argument>, <argument pos:start="269:60" pos:end="269:70"><expr pos:start="269:60" pos:end="269:70"><name pos:start="269:60" pos:end="269:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="271:43" pos:end="271:64"><expr pos:start="271:43" pos:end="271:64"><name pos:start="271:43" pos:end="271:50">ram_size</name> <operator pos:start="271:52" pos:end="271:52">-</operator> <name pos:start="271:54" pos:end="271:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="281:9"><if pos:start="273:9" pos:end="281:9">if <condition pos:start="273:12" pos:end="273:28">(<expr pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:23">kernel_size</name> <operator pos:start="273:25" pos:end="273:25">&lt;</operator> <literal type="number" pos:start="273:27" pos:end="273:27">0</literal></expr>)</condition> <block pos:start="273:30" pos:end="281:9">{<block_content pos:start="275:13" pos:end="279:20">

            <expr_stmt pos:start="275:13" pos:end="277:37"><expr pos:start="275:13" pos:end="277:36"><call pos:start="275:13" pos:end="277:36"><name pos:start="275:13" pos:end="275:19">fprintf</name><argument_list pos:start="275:20" pos:end="277:36">(<argument pos:start="275:21" pos:end="275:26"><expr pos:start="275:21" pos:end="275:26"><name pos:start="275:21" pos:end="275:26">stderr</name></expr></argument>, <argument pos:start="275:29" pos:end="275:64"><expr pos:start="275:29" pos:end="275:64"><literal type="string" pos:start="275:29" pos:end="275:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="277:21" pos:end="277:35"><expr pos:start="277:21" pos:end="277:35"><name pos:start="277:21" pos:end="277:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:20"><expr pos:start="279:13" pos:end="279:19"><call pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:16">exit</name><argument_list pos:start="279:17" pos:end="279:19">(<argument pos:start="279:18" pos:end="279:18"><expr pos:start="279:18" pos:end="279:18"><literal type="number" pos:start="279:18" pos:end="279:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="283:9" pos:end="285:41"><expr pos:start="283:9" pos:end="285:40"><call pos:start="283:9" pos:end="285:40"><name pos:start="283:9" pos:end="283:14">printf</name><argument_list pos:start="283:15" pos:end="285:40">(<argument pos:start="283:16" pos:end="283:55"><expr pos:start="283:16" pos:end="283:55"><literal type="string" pos:start="283:16" pos:end="283:41">"Load kernel size %ld at "</literal> <name pos:start="283:43" pos:end="283:55">TARGET_FMT_lx</name></expr></argument>,

               <argument pos:start="285:16" pos:end="285:26"><expr pos:start="285:16" pos:end="285:26"><name pos:start="285:16" pos:end="285:26">kernel_size</name></expr></argument>, <argument pos:start="285:29" pos:end="285:39"><expr pos:start="285:29" pos:end="285:39"><name pos:start="285:29" pos:end="285:39">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="287:9" pos:end="287:25">/* load initrd */</comment>

        <if_stmt pos:start="289:9" pos:end="313:9"><if pos:start="289:9" pos:end="307:9">if <condition pos:start="289:12" pos:end="289:28">(<expr pos:start="289:13" pos:end="289:27"><name pos:start="289:13" pos:end="289:27">initrd_filename</name></expr>)</condition> <block pos:start="289:30" pos:end="307:9">{<block_content pos:start="291:13" pos:end="305:13">

            <expr_stmt pos:start="291:13" pos:end="291:43"><expr pos:start="291:13" pos:end="291:42"><name pos:start="291:13" pos:end="291:23">initrd_base</name> <operator pos:start="291:25" pos:end="291:25">=</operator> <name pos:start="291:27" pos:end="291:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="295:70"><expr pos:start="293:13" pos:end="295:69"><name pos:start="293:13" pos:end="293:23">initrd_size</name> <operator pos:start="293:25" pos:end="293:25">=</operator> <call pos:start="293:27" pos:end="295:69"><name pos:start="293:27" pos:end="293:45">load_image_targphys</name><argument_list pos:start="293:46" pos:end="295:69">(<argument pos:start="293:47" pos:end="293:61"><expr pos:start="293:47" pos:end="293:61"><name pos:start="293:47" pos:end="293:61">initrd_filename</name></expr></argument>, <argument pos:start="293:64" pos:end="293:74"><expr pos:start="293:64" pos:end="293:74"><name pos:start="293:64" pos:end="293:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="295:47" pos:end="295:68"><expr pos:start="295:47" pos:end="295:68"><name pos:start="295:47" pos:end="295:54">ram_size</name> <operator pos:start="295:56" pos:end="295:56">-</operator> <name pos:start="295:58" pos:end="295:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="297:13" pos:end="305:13"><if pos:start="297:13" pos:end="305:13">if <condition pos:start="297:16" pos:end="297:32">(<expr pos:start="297:17" pos:end="297:31"><name pos:start="297:17" pos:end="297:27">initrd_size</name> <operator pos:start="297:29" pos:end="297:29">&lt;</operator> <literal type="number" pos:start="297:31" pos:end="297:31">0</literal></expr>)</condition> <block pos:start="297:34" pos:end="305:13">{<block_content pos:start="299:17" pos:end="303:24">

                <expr_stmt pos:start="299:17" pos:end="301:41"><expr pos:start="299:17" pos:end="301:40"><call pos:start="299:17" pos:end="301:40"><name pos:start="299:17" pos:end="299:23">fprintf</name><argument_list pos:start="299:24" pos:end="301:40">(<argument pos:start="299:25" pos:end="299:30"><expr pos:start="299:25" pos:end="299:30"><name pos:start="299:25" pos:end="299:30">stderr</name></expr></argument>, <argument pos:start="299:33" pos:end="299:78"><expr pos:start="299:33" pos:end="299:78"><literal type="string" pos:start="299:33" pos:end="299:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="301:25" pos:end="301:39"><expr pos:start="301:25" pos:end="301:39"><name pos:start="301:25" pos:end="301:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:24"><expr pos:start="303:17" pos:end="303:23"><call pos:start="303:17" pos:end="303:23"><name pos:start="303:17" pos:end="303:20">exit</name><argument_list pos:start="303:21" pos:end="303:23">(<argument pos:start="303:22" pos:end="303:22"><expr pos:start="303:22" pos:end="303:22"><literal type="number" pos:start="303:22" pos:end="303:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="307:11" pos:end="313:9">else <block pos:start="307:16" pos:end="313:9">{<block_content pos:start="309:13" pos:end="311:28">

            <expr_stmt pos:start="309:13" pos:end="309:28"><expr pos:start="309:13" pos:end="309:27"><name pos:start="309:13" pos:end="309:23">initrd_base</name> <operator pos:start="309:25" pos:end="309:25">=</operator> <literal type="number" pos:start="309:27" pos:end="309:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:28"><expr pos:start="311:13" pos:end="311:27"><name pos:start="311:13" pos:end="311:23">initrd_size</name> <operator pos:start="311:25" pos:end="311:25">=</operator> <literal type="number" pos:start="311:27" pos:end="311:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:34"><expr pos:start="315:9" pos:end="315:33"><name pos:start="315:9" pos:end="315:19"><name pos:start="315:9" pos:end="315:11">env</name><operator pos:start="315:12" pos:end="315:13">-&gt;</operator><name pos:start="315:14" pos:end="315:16">gpr</name><index pos:start="315:17" pos:end="315:19">[<expr pos:start="315:18" pos:end="315:18"><literal type="number" pos:start="315:18" pos:end="315:18">4</literal></expr>]</index></name> <operator pos:start="315:21" pos:end="315:21">=</operator> <name pos:start="315:23" pos:end="315:33">initrd_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:34"><expr pos:start="317:9" pos:end="317:33"><name pos:start="317:9" pos:end="317:19"><name pos:start="317:9" pos:end="317:11">env</name><operator pos:start="317:12" pos:end="317:13">-&gt;</operator><name pos:start="317:14" pos:end="317:16">gpr</name><index pos:start="317:17" pos:end="317:19">[<expr pos:start="317:18" pos:end="317:18"><literal type="number" pos:start="317:18" pos:end="317:18">5</literal></expr>]</index></name> <operator pos:start="317:21" pos:end="317:21">=</operator> <name pos:start="317:23" pos:end="317:33">initrd_size</name></expr>;</expr_stmt>

        <if_stmt pos:start="319:9" pos:end="337:9"><if pos:start="319:9" pos:end="331:9">if <condition pos:start="319:12" pos:end="319:35">(<expr pos:start="319:13" pos:end="319:34"><name pos:start="319:13" pos:end="319:26">kernel_cmdline</name> <operator pos:start="319:28" pos:end="319:29">!=</operator> <name pos:start="319:31" pos:end="319:34">NULL</name></expr>)</condition> <block pos:start="319:37" pos:end="331:9">{<block_content pos:start="321:13" pos:end="329:38">

            <expr_stmt pos:start="321:13" pos:end="321:41"><expr pos:start="321:13" pos:end="321:40"><name pos:start="321:13" pos:end="321:15">len</name> <operator pos:start="321:17" pos:end="321:17">=</operator> <call pos:start="321:19" pos:end="321:40"><name pos:start="321:19" pos:end="321:24">strlen</name><argument_list pos:start="321:25" pos:end="321:40">(<argument pos:start="321:26" pos:end="321:39"><expr pos:start="321:26" pos:end="321:39"><name pos:start="321:26" pos:end="321:39">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:42"><expr pos:start="323:13" pos:end="323:41"><name pos:start="323:13" pos:end="323:17">bdloc</name> <operator pos:start="323:19" pos:end="323:20">-=</operator> <operator pos:start="323:22" pos:end="323:22">(</operator><operator pos:start="323:23" pos:end="323:23">(</operator><name pos:start="323:24" pos:end="323:26">len</name> <operator pos:start="323:28" pos:end="323:28">+</operator> <literal type="number" pos:start="323:30" pos:end="323:32">255</literal><operator pos:start="323:33" pos:end="323:33">)</operator> <operator pos:start="323:35" pos:end="323:35">&amp;</operator> <operator pos:start="323:37" pos:end="323:37">~</operator><literal type="number" pos:start="323:38" pos:end="323:40">255</literal><operator pos:start="323:41" pos:end="323:41">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:78"><expr pos:start="325:13" pos:end="325:77"><call pos:start="325:13" pos:end="325:77"><name pos:start="325:13" pos:end="325:37">cpu_physical_memory_write</name><argument_list pos:start="325:38" pos:end="325:77">(<argument pos:start="325:39" pos:end="325:43"><expr pos:start="325:39" pos:end="325:43"><name pos:start="325:39" pos:end="325:43">bdloc</name></expr></argument>, <argument pos:start="325:46" pos:end="325:67"><expr pos:start="325:46" pos:end="325:67"><operator pos:start="325:46" pos:end="325:46">(</operator><name pos:start="325:47" pos:end="325:50">void</name> <operator pos:start="325:52" pos:end="325:52">*</operator><operator pos:start="325:53" pos:end="325:53">)</operator><name pos:start="325:54" pos:end="325:67">kernel_cmdline</name></expr></argument>, <argument pos:start="325:70" pos:end="325:76"><expr pos:start="325:70" pos:end="325:76"><name pos:start="325:70" pos:end="325:72">len</name> <operator pos:start="325:74" pos:end="325:74">+</operator> <literal type="number" pos:start="325:76" pos:end="325:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:32"><expr pos:start="327:13" pos:end="327:31"><name pos:start="327:13" pos:end="327:23"><name pos:start="327:13" pos:end="327:15">env</name><operator pos:start="327:16" pos:end="327:17">-&gt;</operator><name pos:start="327:18" pos:end="327:20">gpr</name><index pos:start="327:21" pos:end="327:23">[<expr pos:start="327:22" pos:end="327:22"><literal type="number" pos:start="327:22" pos:end="327:22">6</literal></expr>]</index></name> <operator pos:start="327:25" pos:end="327:25">=</operator> <name pos:start="327:27" pos:end="327:31">bdloc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:38"><expr pos:start="329:13" pos:end="329:37"><name pos:start="329:13" pos:end="329:23"><name pos:start="329:13" pos:end="329:15">env</name><operator pos:start="329:16" pos:end="329:17">-&gt;</operator><name pos:start="329:18" pos:end="329:20">gpr</name><index pos:start="329:21" pos:end="329:23">[<expr pos:start="329:22" pos:end="329:22"><literal type="number" pos:start="329:22" pos:end="329:22">7</literal></expr>]</index></name> <operator pos:start="329:25" pos:end="329:25">=</operator> <name pos:start="329:27" pos:end="329:31">bdloc</name> <operator pos:start="329:33" pos:end="329:33">+</operator> <name pos:start="329:35" pos:end="329:37">len</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="331:11" pos:end="337:9">else <block pos:start="331:16" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:28">

            <expr_stmt pos:start="333:13" pos:end="333:28"><expr pos:start="333:13" pos:end="333:27"><name pos:start="333:13" pos:end="333:23"><name pos:start="333:13" pos:end="333:15">env</name><operator pos:start="333:16" pos:end="333:17">-&gt;</operator><name pos:start="333:18" pos:end="333:20">gpr</name><index pos:start="333:21" pos:end="333:23">[<expr pos:start="333:22" pos:end="333:22"><literal type="number" pos:start="333:22" pos:end="333:22">6</literal></expr>]</index></name> <operator pos:start="333:25" pos:end="333:25">=</operator> <literal type="number" pos:start="333:27" pos:end="333:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:28"><expr pos:start="335:13" pos:end="335:27"><name pos:start="335:13" pos:end="335:23"><name pos:start="335:13" pos:end="335:15">env</name><operator pos:start="335:16" pos:end="335:17">-&gt;</operator><name pos:start="335:18" pos:end="335:20">gpr</name><index pos:start="335:21" pos:end="335:23">[<expr pos:start="335:22" pos:end="335:22"><literal type="number" pos:start="335:22" pos:end="335:22">7</literal></expr>]</index></name> <operator pos:start="335:25" pos:end="335:25">=</operator> <literal type="number" pos:start="335:27" pos:end="335:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:36"><expr pos:start="339:9" pos:end="339:35"><name pos:start="339:9" pos:end="339:16"><name pos:start="339:9" pos:end="339:11">env</name><operator pos:start="339:12" pos:end="339:13">-&gt;</operator><name pos:start="339:14" pos:end="339:16">nip</name></name> <operator pos:start="339:18" pos:end="339:18">=</operator> <name pos:start="339:20" pos:end="339:35">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="341:7" pos:end="356:0">else <block pos:start="341:12" pos:end="356:0">{<block_content pos:start="343:9" pos:end="351:18">

        <expr_stmt pos:start="343:9" pos:end="343:24"><expr pos:start="343:9" pos:end="343:23"><name pos:start="343:9" pos:end="343:19">kernel_base</name> <operator pos:start="343:21" pos:end="343:21">=</operator> <literal type="number" pos:start="343:23" pos:end="343:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:24"><expr pos:start="345:9" pos:end="345:23"><name pos:start="345:9" pos:end="345:19">kernel_size</name> <operator pos:start="345:21" pos:end="345:21">=</operator> <literal type="number" pos:start="345:23" pos:end="345:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:24"><expr pos:start="347:9" pos:end="347:23"><name pos:start="347:9" pos:end="347:19">initrd_base</name> <operator pos:start="347:21" pos:end="347:21">=</operator> <literal type="number" pos:start="347:23" pos:end="347:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:24"><expr pos:start="349:9" pos:end="349:23"><name pos:start="349:9" pos:end="349:19">initrd_size</name> <operator pos:start="349:21" pos:end="349:21">=</operator> <literal type="number" pos:start="349:23" pos:end="349:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:18"><expr pos:start="351:9" pos:end="351:17"><name pos:start="351:9" pos:end="351:13">bdloc</name> <operator pos:start="351:15" pos:end="351:15">=</operator> <literal type="number" pos:start="351:17" pos:end="351:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="355:1" pos:end="355:23">#<cpp:directive pos:start="355:2" pos:end="355:6">ifdef</cpp:directive> <name pos:start="355:8" pos:end="355:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="357:5" pos:end="360:0"><expr pos:start="357:5" pos:end="357:34"><call pos:start="357:5" pos:end="357:34"><name pos:start="357:5" pos:end="357:10">printf</name><argument_list pos:start="357:11" pos:end="357:34">(<argument pos:start="357:12" pos:end="357:23"><expr pos:start="357:12" pos:end="357:23"><literal type="string" pos:start="357:12" pos:end="357:23">"%s: Done\n"</literal></expr></argument>, <argument pos:start="357:26" pos:end="357:33"><expr pos:start="357:26" pos:end="357:33"><name pos:start="357:26" pos:end="357:33">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="359:1" pos:end="359:6">#<cpp:directive pos:start="359:2" pos:end="359:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="361:5" pos:end="361:51"><expr pos:start="361:5" pos:end="361:50"><call pos:start="361:5" pos:end="361:50"><name pos:start="361:5" pos:end="361:10">printf</name><argument_list pos:start="361:11" pos:end="361:50">(<argument pos:start="361:12" pos:end="361:27"><expr pos:start="361:12" pos:end="361:27"><literal type="string" pos:start="361:12" pos:end="361:27">"bdloc %016lx\n"</literal></expr></argument>, <argument pos:start="361:30" pos:end="361:49"><expr pos:start="361:30" pos:end="361:49"><operator pos:start="361:30" pos:end="361:30">(</operator><name pos:start="361:31" pos:end="361:38">unsigned</name> <name pos:start="361:40" pos:end="361:43">long</name><operator pos:start="361:44" pos:end="361:44">)</operator><name pos:start="361:45" pos:end="361:49">bdloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
