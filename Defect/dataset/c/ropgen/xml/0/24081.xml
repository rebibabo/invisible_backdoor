<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24081.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:46"><decl pos:start="1:25" pos:end="1:46"><type pos:start="1:25" pos:end="1:46"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type> <name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:78">got_frame_ptr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">AVPacket</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:39">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:20">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name>  <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>        <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:31">avpkt</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">MPADecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:35"><if pos:start="19:5" pos:end="21:35">if <condition pos:start="19:8" pos:end="19:31">(<expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:16">buf_size</name> <operator pos:start="19:18" pos:end="19:18">&lt;</operator> <name pos:start="19:20" pos:end="19:30">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:35"><block_content pos:start="21:9" pos:end="21:35">

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:10">header</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:25"><name pos:start="25:14" pos:end="25:20">AV_RB32</name><argument_list pos:start="25:21" pos:end="25:25">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><name pos:start="25:22" pos:end="25:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:40">(<expr pos:start="27:9" pos:end="27:39"><call pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:27">ff_mpa_check_header</name><argument_list pos:start="27:28" pos:end="27:35">(<argument pos:start="27:29" pos:end="27:34"><expr pos:start="27:29" pos:end="27:34"><name pos:start="27:29" pos:end="27:34">header</name></expr></argument>)</argument_list></call> <operator pos:start="27:37" pos:end="27:37">&lt;</operator> <literal type="number" pos:start="27:39" pos:end="27:39">0</literal></expr>)</condition> <block pos:start="27:42" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:35">

        <expr_stmt pos:start="29:9" pos:end="29:56"><expr pos:start="29:9" pos:end="29:55"><call pos:start="29:9" pos:end="29:55"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:55">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:54"><expr pos:start="29:37" pos:end="29:54"><literal type="string" pos:start="29:37" pos:end="29:54">"Header missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:74">(<expr pos:start="37:9" pos:end="37:73"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:38">avpriv_mpegaudio_decode_header</name><argument_list pos:start="37:39" pos:end="37:68">(<argument pos:start="37:40" pos:end="37:59"><expr pos:start="37:40" pos:end="37:59"><operator pos:start="37:40" pos:end="37:40">(</operator><name pos:start="37:41" pos:end="37:55">MPADecodeHeader</name> <operator pos:start="37:57" pos:end="37:57">*</operator><operator pos:start="37:58" pos:end="37:58">)</operator><name pos:start="37:59" pos:end="37:59">s</name></expr></argument>, <argument pos:start="37:62" pos:end="37:67"><expr pos:start="37:62" pos:end="37:67"><name pos:start="37:62" pos:end="37:67">header</name></expr></argument>)</argument_list></call> <operator pos:start="37:70" pos:end="37:71">==</operator> <literal type="number" pos:start="37:73" pos:end="37:73">1</literal></expr>)</condition> <block pos:start="37:76" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <comment type="block" pos:start="39:9" pos:end="39:56">/* free format: prepare to compute frame size */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:21">frame_size</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <operator pos:start="41:25" pos:end="41:25">-</operator><literal type="number" pos:start="41:26" pos:end="41:26">1</literal></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="47:5" pos:end="47:27">/* update codec info */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:9">avctx</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:19">channels</name></name>       <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:42">nb_channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:90"><expr pos:start="51:5" pos:end="51:89"><name pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:9">avctx</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:25">channel_layout</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <ternary pos:start="51:29" pos:end="51:89"><condition pos:start="51:29" pos:end="51:49"><expr pos:start="51:29" pos:end="51:47"><name pos:start="51:29" pos:end="51:42"><name pos:start="51:29" pos:end="51:29">s</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:42">nb_channels</name></name> <operator pos:start="51:44" pos:end="51:45">==</operator> <literal type="number" pos:start="51:47" pos:end="51:47">1</literal></expr> ?</condition><then pos:start="51:51" pos:end="51:67"> <expr pos:start="51:51" pos:end="51:67"><name pos:start="51:51" pos:end="51:67">AV_CH_LAYOUT_MONO</name></expr> </then><else pos:start="51:69" pos:end="51:89">: <expr pos:start="51:71" pos:end="51:89"><name pos:start="51:71" pos:end="51:89">AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:38"><if pos:start="53:5" pos:end="55:38">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:24"><name pos:start="53:10" pos:end="53:14">avctx</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:24">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:38"><block_content pos:start="55:9" pos:end="55:38">

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:13">avctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:23">bit_rate</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:27">s</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:37">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:12">frame</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:19">data</name></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:49"><name pos:start="63:11" pos:end="63:25">mp_decode_frame</name><argument_list pos:start="63:26" pos:end="63:49">(<argument pos:start="63:27" pos:end="63:27"><expr pos:start="63:27" pos:end="63:27"><name pos:start="63:27" pos:end="63:27">s</name></expr></argument>, <argument pos:start="63:30" pos:end="63:33"><expr pos:start="63:30" pos:end="63:33"><name pos:start="63:30" pos:end="63:33">NULL</name></expr></argument>, <argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:38">buf</name></expr></argument>, <argument pos:start="63:41" pos:end="63:48"><expr pos:start="63:41" pos:end="63:48"><name pos:start="63:41" pos:end="63:48">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="95:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:14">&gt;=</operator> <literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>)</condition> <block pos:start="65:19" pos:end="75:5">{<block_content pos:start="67:9" pos:end="71:46">

        <expr_stmt pos:start="67:9" pos:end="67:49"><expr pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:16">frame</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:28">nb_samples</name></name> <operator pos:start="67:30" pos:end="67:30">=</operator> <name pos:start="67:32" pos:end="67:48"><name pos:start="67:32" pos:end="67:36">avctx</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:48">frame_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:33"><expr pos:start="69:9" pos:end="69:32"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:22">got_frame_ptr</name>       <operator pos:start="69:30" pos:end="69:30">=</operator> <literal type="number" pos:start="69:32" pos:end="69:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:13">avctx</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:26">sample_rate</name></name>   <operator pos:start="71:30" pos:end="71:30">=</operator> <name pos:start="71:32" pos:end="71:45"><name pos:start="71:32" pos:end="71:32">s</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:45">sample_rate</name></name></expr>;</expr_stmt>

        <comment type="line" pos:start="73:9" pos:end="73:73">//FIXME maybe move the other codec info stuff from above here too</comment>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="95:5">else <block pos:start="75:12" pos:end="95:5">{<block_content pos:start="77:9" pos:end="93:23">

        <expr_stmt pos:start="77:9" pos:end="77:80"><expr pos:start="77:9" pos:end="77:79"><call pos:start="77:9" pos:end="77:79"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:79">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:78"><expr pos:start="77:37" pos:end="77:78"><literal type="string" pos:start="77:37" pos:end="77:78">"Error while decoding MPEG audio frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="79:9" pos:end="87:21">/* Only return an error if the bad frame makes up the whole packet or

         * the error is related to buffer management.

         * If there is more data in the packet, just consume the bad frame

         * instead of returning an error, which would discard the whole

         * packet. */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:27"><expr pos:start="89:9" pos:end="89:26"><operator pos:start="89:9" pos:end="89:9">*</operator><name pos:start="89:10" pos:end="89:22">got_frame_ptr</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="93:23"><if pos:start="91:9" pos:end="93:23">if <condition pos:start="91:12" pos:end="91:66">(<expr pos:start="91:13" pos:end="91:65"><name pos:start="91:13" pos:end="91:20">buf_size</name> <operator pos:start="91:22" pos:end="91:23">==</operator> <name pos:start="91:25" pos:end="91:35"><name pos:start="91:25" pos:end="91:29">avpkt</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:35">size</name></name> <operator pos:start="91:37" pos:end="91:38">||</operator> <name pos:start="91:40" pos:end="91:42">ret</name> <operator pos:start="91:44" pos:end="91:45">!=</operator> <name pos:start="91:47" pos:end="91:65">AVERROR_INVALIDDATA</name></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:23"><block_content pos:start="93:13" pos:end="93:23">

            <return pos:start="93:13" pos:end="93:23">return <expr pos:start="93:20" pos:end="93:22"><name pos:start="93:20" pos:end="93:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:22"><expr pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:17"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:17">frame_size</name></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <literal type="number" pos:start="97:21" pos:end="97:21">0</literal></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:20">return <expr pos:start="99:12" pos:end="99:19"><name pos:start="99:12" pos:end="99:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
