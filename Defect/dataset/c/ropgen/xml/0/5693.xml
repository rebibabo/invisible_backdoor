<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5693.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">vnc_client_write</name><parameter_list pos:start="1:29" pos:end="1:42">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">long</name></type> <name pos:start="5:10" pos:end="5:12">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">VncState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">vs</name> <init pos:start="7:18" pos:end="7:25">= <expr pos:start="7:20" pos:end="7:25"><name pos:start="7:20" pos:end="7:25">opaque</name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:21">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <if_stmt pos:start="13:5" pos:end="35:71"><if pos:start="13:5" pos:end="31:5">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:10">vs</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:23">tls_session</name></name></expr>)</condition> <block pos:start="13:26" pos:end="31:5">{<block_content pos:start="15:9" pos:end="29:9">

	<expr_stmt pos:start="15:9" pos:end="15:82"><expr pos:start="15:9" pos:end="15:81"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:81"><name pos:start="15:15" pos:end="15:26">gnutls_write</name><argument_list pos:start="15:27" pos:end="15:81">(<argument pos:start="15:28" pos:end="15:42"><expr pos:start="15:28" pos:end="15:42"><name pos:start="15:28" pos:end="15:42"><name pos:start="15:28" pos:end="15:29">vs</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:42">tls_session</name></name></expr></argument>, <argument pos:start="15:45" pos:end="15:61"><expr pos:start="15:45" pos:end="15:61"><name pos:start="15:45" pos:end="15:61"><name pos:start="15:45" pos:end="15:46">vs</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:54">output</name><operator pos:start="15:55" pos:end="15:55">.</operator><name pos:start="15:56" pos:end="15:61">buffer</name></name></expr></argument>, <argument pos:start="15:64" pos:end="15:80"><expr pos:start="15:64" pos:end="15:80"><name pos:start="15:64" pos:end="15:80"><name pos:start="15:64" pos:end="15:65">vs</name><operator pos:start="15:66" pos:end="15:67">-&gt;</operator><name pos:start="15:68" pos:end="15:73">output</name><operator pos:start="15:74" pos:end="15:74">.</operator><name pos:start="15:75" pos:end="15:80">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="17:9" pos:end="29:9"><if pos:start="17:9" pos:end="29:9">if <condition pos:start="17:12" pos:end="17:20">(<expr pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:15">ret</name> <operator pos:start="17:17" pos:end="17:17">&lt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>)</condition> <block pos:start="17:22" pos:end="29:9">{<block_content pos:start="19:13" pos:end="27:21">

	    <if_stmt pos:start="19:13" pos:end="25:28"><if pos:start="19:13" pos:end="21:31">if <condition pos:start="19:16" pos:end="19:38">(<expr pos:start="19:17" pos:end="19:37"><name pos:start="19:17" pos:end="19:19">ret</name> <operator pos:start="19:21" pos:end="19:22">==</operator> <name pos:start="19:24" pos:end="19:37">GNUTLS_E_AGAIN</name></expr>)</condition><block type="pseudo" pos:start="21:17" pos:end="21:31"><block_content pos:start="21:17" pos:end="21:31">

		<expr_stmt pos:start="21:17" pos:end="21:31"><expr pos:start="21:17" pos:end="21:30"><name pos:start="21:17" pos:end="21:21">errno</name> <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:30">EAGAIN</name></expr>;</expr_stmt></block_content></block></if>

	    <else pos:start="23:13" pos:end="25:28">else<block type="pseudo" pos:start="25:17" pos:end="25:28"><block_content pos:start="25:17" pos:end="25:28">

		<expr_stmt pos:start="25:17" pos:end="25:28"><expr pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:21">errno</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:27">EIO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	    <expr_stmt pos:start="27:13" pos:end="27:21"><expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <operator pos:start="27:19" pos:end="27:19">-</operator><literal type="number" pos:start="27:20" pos:end="27:20">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:71">else<block type="pseudo" pos:start="35:9" pos:end="35:71"><block_content pos:start="35:9" pos:end="35:71">

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="33:8" pos:end="33:27">/* CONFIG_VNC_TLS */</comment>

	<expr_stmt pos:start="35:9" pos:end="35:71"><expr pos:start="35:9" pos:end="35:70"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:70"><name pos:start="35:15" pos:end="35:18">send</name><argument_list pos:start="35:19" pos:end="35:70">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:21">vs</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:28">csock</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:47"><expr pos:start="35:31" pos:end="35:47"><name pos:start="35:31" pos:end="35:47"><name pos:start="35:31" pos:end="35:32">vs</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:40">output</name><operator pos:start="35:41" pos:end="35:41">.</operator><name pos:start="35:42" pos:end="35:47">buffer</name></name></expr></argument>, <argument pos:start="35:50" pos:end="35:66"><expr pos:start="35:50" pos:end="35:66"><name pos:start="35:50" pos:end="35:66"><name pos:start="35:50" pos:end="35:51">vs</name><operator pos:start="35:52" pos:end="35:53">-&gt;</operator><name pos:start="35:54" pos:end="35:59">output</name><operator pos:start="35:60" pos:end="35:60">.</operator><name pos:start="35:61" pos:end="35:66">offset</name></name></expr></argument>, <argument pos:start="35:69" pos:end="35:69"><expr pos:start="35:69" pos:end="35:69"><literal type="number" pos:start="35:69" pos:end="35:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:55"><expr pos:start="37:5" pos:end="37:54"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:54"><name pos:start="37:11" pos:end="37:29">vnc_client_io_error</name><argument_list pos:start="37:30" pos:end="37:54">(<argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><name pos:start="37:31" pos:end="37:32">vs</name></expr></argument>, <argument pos:start="37:35" pos:end="37:37"><expr pos:start="37:35" pos:end="37:37"><name pos:start="37:35" pos:end="37:37">ret</name></expr></argument>, <argument pos:start="37:40" pos:end="37:53"><expr pos:start="37:40" pos:end="37:53"><call pos:start="37:40" pos:end="37:53"><name pos:start="37:40" pos:end="37:51">socket_error</name><argument_list pos:start="37:52" pos:end="37:53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:15"><if pos:start="39:5" pos:end="41:15">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:12">ret</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:15"><block_content pos:start="41:9" pos:end="41:15">

	<return pos:start="41:9" pos:end="41:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:83"><expr pos:start="45:5" pos:end="45:82"><call pos:start="45:5" pos:end="45:82"><name pos:start="45:5" pos:end="45:11">memmove</name><argument_list pos:start="45:12" pos:end="45:82">(<argument pos:start="45:13" pos:end="45:29"><expr pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:14">vs</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:22">output</name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:29">buffer</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:54"><expr pos:start="45:32" pos:end="45:54"><name pos:start="45:32" pos:end="45:48"><name pos:start="45:32" pos:end="45:33">vs</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:41">output</name><operator pos:start="45:42" pos:end="45:42">.</operator><name pos:start="45:43" pos:end="45:48">buffer</name></name> <operator pos:start="45:50" pos:end="45:50">+</operator> <name pos:start="45:52" pos:end="45:54">ret</name></expr></argument>, <argument pos:start="45:57" pos:end="45:81"><expr pos:start="45:57" pos:end="45:81"><operator pos:start="45:57" pos:end="45:57">(</operator><name pos:start="45:58" pos:end="45:74"><name pos:start="45:58" pos:end="45:59">vs</name><operator pos:start="45:60" pos:end="45:61">-&gt;</operator><name pos:start="45:62" pos:end="45:67">output</name><operator pos:start="45:68" pos:end="45:68">.</operator><name pos:start="45:69" pos:end="45:74">offset</name></name> <operator pos:start="45:76" pos:end="45:76">-</operator> <name pos:start="45:78" pos:end="45:80">ret</name><operator pos:start="45:81" pos:end="45:81">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:6">vs</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">output</name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:21">offset</name></name> <operator pos:start="47:23" pos:end="47:24">-=</operator> <name pos:start="47:26" pos:end="47:28">ret</name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:31">(<expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:10">vs</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:18">output</name><operator pos:start="51:19" pos:end="51:19">.</operator><name pos:start="51:20" pos:end="51:25">offset</name></name> <operator pos:start="51:27" pos:end="51:28">==</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>)</condition> <block pos:start="51:33" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:73">

	<expr_stmt pos:start="53:9" pos:end="53:73"><expr pos:start="53:9" pos:end="53:72"><call pos:start="53:9" pos:end="53:72"><name pos:start="53:9" pos:end="53:28">qemu_set_fd_handler2</name><argument_list pos:start="53:29" pos:end="53:72">(<argument pos:start="53:30" pos:end="53:38"><expr pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:31">vs</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:38">csock</name></name></expr></argument>, <argument pos:start="53:41" pos:end="53:44"><expr pos:start="53:41" pos:end="53:44"><name pos:start="53:41" pos:end="53:44">NULL</name></expr></argument>, <argument pos:start="53:47" pos:end="53:61"><expr pos:start="53:47" pos:end="53:61"><name pos:start="53:47" pos:end="53:61">vnc_client_read</name></expr></argument>, <argument pos:start="53:64" pos:end="53:67"><expr pos:start="53:64" pos:end="53:67"><name pos:start="53:64" pos:end="53:67">NULL</name></expr></argument>, <argument pos:start="53:70" pos:end="53:71"><expr pos:start="53:70" pos:end="53:71"><name pos:start="53:70" pos:end="53:71">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
