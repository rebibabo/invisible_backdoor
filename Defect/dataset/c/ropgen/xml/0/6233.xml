<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6233.c" pos:tabs="8"><function pos:start="1:1" pos:end="339:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:38">libx265_encode_init</name><parameter_list pos:start="1:39" pos:end="1:61">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:53">AVCodecContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="339:1">{<block_content pos:start="5:5" pos:end="337:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">libx265Context</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">ctx</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:91"><expr pos:start="9:5" pos:end="9:90"><name pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:7">ctx</name><operator pos:start="9:8" pos:end="9:9">-&gt;</operator><name pos:start="9:10" pos:end="9:12">api</name></name> <operator pos:start="9:14" pos:end="9:14">=</operator> <call pos:start="9:16" pos:end="9:90"><name pos:start="9:16" pos:end="9:27">x265_api_get</name><argument_list pos:start="9:28" pos:end="9:90">(<argument pos:start="9:29" pos:end="9:89"><expr pos:start="9:29" pos:end="9:89"><call pos:start="9:29" pos:end="9:63"><name pos:start="9:29" pos:end="9:47">av_pix_fmt_desc_get</name><argument_list pos:start="9:48" pos:end="9:63">(<argument pos:start="9:49" pos:end="9:62"><expr pos:start="9:49" pos:end="9:62"><name pos:start="9:49" pos:end="9:62"><name pos:start="9:49" pos:end="9:53">avctx</name><operator pos:start="9:54" pos:end="9:55">-&gt;</operator><name pos:start="9:56" pos:end="9:62">pix_fmt</name></name></expr></argument>)</argument_list></call><operator pos:start="9:64" pos:end="9:65">-&gt;</operator><name pos:start="9:66" pos:end="9:72"><name pos:start="9:66" pos:end="9:69">comp</name><index pos:start="9:70" pos:end="9:72">[<expr pos:start="9:71" pos:end="9:71"><literal type="number" pos:start="9:71" pos:end="9:71">0</literal></expr>]</index></name><operator pos:start="9:73" pos:end="9:73">.</operator><name pos:start="9:74" pos:end="9:85">depth_minus1</name> <operator pos:start="9:87" pos:end="9:87">+</operator> <literal type="number" pos:start="9:89" pos:end="9:89">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="13:35"><if pos:start="11:5" pos:end="13:35">if <condition pos:start="11:8" pos:end="11:18">(<expr pos:start="11:9" pos:end="11:17"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:12">ctx</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:17">api</name></name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:35"><block_content pos:start="13:9" pos:end="13:35">

        <expr_stmt pos:start="13:9" pos:end="13:35"><expr pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">ctx</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:16">api</name></name> <operator pos:start="13:18" pos:end="13:18">=</operator> <call pos:start="13:20" pos:end="13:34"><name pos:start="13:20" pos:end="13:31">x265_api_get</name><argument_list pos:start="13:32" pos:end="13:34">(<argument pos:start="13:33" pos:end="13:33"><expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="19:60">(<expr pos:start="17:9" pos:end="19:59"><name pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:36">strict_std_compliance</name></name> <operator pos:start="17:38" pos:end="17:38">&gt;</operator> <name pos:start="17:40" pos:end="17:65">FF_COMPLIANCE_EXPERIMENTAL</name> <operator pos:start="17:67" pos:end="17:68">&amp;&amp;</operator>

        <operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:44"><name pos:start="19:10" pos:end="19:28">av_pix_fmt_desc_get</name><argument_list pos:start="19:29" pos:end="19:44">(<argument pos:start="19:30" pos:end="19:43"><expr pos:start="19:30" pos:end="19:43"><name pos:start="19:30" pos:end="19:43"><name pos:start="19:30" pos:end="19:34">avctx</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:43">pix_fmt</name></name></expr></argument>)</argument_list></call><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:59">log2_chroma_w</name></expr>)</condition> <block pos:start="19:62" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:31">

        <expr_stmt pos:start="21:9" pos:end="25:63"><expr pos:start="21:9" pos:end="25:62"><call pos:start="21:9" pos:end="25:62"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="25:62">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="23:16" pos:end="25:61"><expr pos:start="23:16" pos:end="25:61"><literal type="string" pos:start="23:16" pos:end="23:76">"4:2:2 and 4:4:4 support is not fully defined for HEVC yet. "</literal>

               <literal type="string" pos:start="25:16" pos:end="25:61">"Set -strict experimental to encode anyway.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:9">avctx</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:22">coded_frame</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <call pos:start="33:26" pos:end="33:41"><name pos:start="33:26" pos:end="33:39">av_frame_alloc</name><argument_list pos:start="33:40" pos:end="33:41">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:27"><name pos:start="35:10" pos:end="35:14">avctx</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:27">coded_frame</name></name></expr>)</condition> <block pos:start="35:30" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:31">

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><call pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:66">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:65"><expr pos:start="37:37" pos:end="37:65"><literal type="string" pos:start="37:37" pos:end="37:65">"Could not allocate frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:15">params</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:41"><name pos:start="45:19" pos:end="45:39"><name pos:start="45:19" pos:end="45:21">ctx</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:26">api</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:39">param_alloc</name></name><argument_list pos:start="45:40" pos:end="45:41">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:20"><name pos:start="47:10" pos:end="47:12">ctx</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:20">params</name></name></expr>)</condition> <block pos:start="47:23" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:31">

        <expr_stmt pos:start="49:9" pos:end="49:82"><expr pos:start="49:9" pos:end="49:81"><call pos:start="49:9" pos:end="49:81"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:81">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:80"><expr pos:start="49:37" pos:end="49:80"><literal type="string" pos:start="49:37" pos:end="49:80">"Could not allocate x265 param structure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:31">return <expr pos:start="51:16" pos:end="51:30"><call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="89:5"><if pos:start="57:5" pos:end="89:5">if <condition pos:start="57:8" pos:end="57:80">(<expr pos:start="57:9" pos:end="57:79"><call pos:start="57:9" pos:end="57:75"><name pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:11">ctx</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:16">api</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:38">param_default_preset</name></name><argument_list pos:start="57:39" pos:end="57:75">(<argument pos:start="57:40" pos:end="57:50"><expr pos:start="57:40" pos:end="57:50"><name pos:start="57:40" pos:end="57:50"><name pos:start="57:40" pos:end="57:42">ctx</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:50">params</name></name></expr></argument>, <argument pos:start="57:53" pos:end="57:63"><expr pos:start="57:53" pos:end="57:63"><name pos:start="57:53" pos:end="57:63"><name pos:start="57:53" pos:end="57:55">ctx</name><operator pos:start="57:56" pos:end="57:57">-&gt;</operator><name pos:start="57:58" pos:end="57:63">preset</name></name></expr></argument>, <argument pos:start="57:66" pos:end="57:74"><expr pos:start="57:66" pos:end="57:74"><name pos:start="57:66" pos:end="57:74"><name pos:start="57:66" pos:end="57:68">ctx</name><operator pos:start="57:69" pos:end="57:70">-&gt;</operator><name pos:start="57:71" pos:end="57:74">tune</name></name></expr></argument>)</argument_list></call> <operator pos:start="57:77" pos:end="57:77">&lt;</operator> <literal type="number" pos:start="57:79" pos:end="57:79">0</literal></expr>)</condition> <block pos:start="57:82" pos:end="89:5">{<block_content pos:start="59:9" pos:end="87:31">

        <decl_stmt pos:start="59:9" pos:end="59:14"><decl pos:start="59:9" pos:end="59:13"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:98"><expr pos:start="63:9" pos:end="63:97"><call pos:start="63:9" pos:end="63:97"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:97">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:72"><expr pos:start="63:37" pos:end="63:72"><literal type="string" pos:start="63:37" pos:end="63:72">"Error setting preset/tune %s/%s.\n"</literal></expr></argument>, <argument pos:start="63:75" pos:end="63:85"><expr pos:start="63:75" pos:end="63:85"><name pos:start="63:75" pos:end="63:85"><name pos:start="63:75" pos:end="63:77">ctx</name><operator pos:start="63:78" pos:end="63:79">-&gt;</operator><name pos:start="63:80" pos:end="63:85">preset</name></name></expr></argument>, <argument pos:start="63:88" pos:end="63:96"><expr pos:start="63:88" pos:end="63:96"><name pos:start="63:88" pos:end="63:96"><name pos:start="63:88" pos:end="63:90">ctx</name><operator pos:start="63:91" pos:end="63:92">-&gt;</operator><name pos:start="63:93" pos:end="63:96">tune</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:56"><expr pos:start="65:9" pos:end="65:55"><call pos:start="65:9" pos:end="65:55"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:55">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:33"><expr pos:start="65:23" pos:end="65:33"><name pos:start="65:23" pos:end="65:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="65:36" pos:end="65:54"><expr pos:start="65:36" pos:end="65:54"><literal type="string" pos:start="65:36" pos:end="65:54">"Possible presets:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="67:9" pos:end="69:68">for <control pos:start="67:13" pos:end="67:46">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:41"><expr pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:37">x265_preset_names</name><index pos:start="67:38" pos:end="67:40">[<expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="67:43" pos:end="67:45"><expr pos:start="67:43" pos:end="67:45"><name pos:start="67:43" pos:end="67:43">i</name><operator pos:start="67:44" pos:end="67:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:13" pos:end="69:68"><block_content pos:start="69:13" pos:end="69:68">

            <expr_stmt pos:start="69:13" pos:end="69:68"><expr pos:start="69:13" pos:end="69:67"><call pos:start="69:13" pos:end="69:67"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:67">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24">avctx</name></expr></argument>, <argument pos:start="69:27" pos:end="69:37"><expr pos:start="69:27" pos:end="69:37"><name pos:start="69:27" pos:end="69:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="69:40" pos:end="69:44"><expr pos:start="69:40" pos:end="69:44"><literal type="string" pos:start="69:40" pos:end="69:44">" %s"</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:66"><expr pos:start="69:47" pos:end="69:66"><name pos:start="69:47" pos:end="69:66"><name pos:start="69:47" pos:end="69:63">x265_preset_names</name><index pos:start="69:64" pos:end="69:66">[<expr pos:start="69:65" pos:end="69:65"><name pos:start="69:65" pos:end="69:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="73:9" pos:end="73:41"><expr pos:start="73:9" pos:end="73:40"><call pos:start="73:9" pos:end="73:40"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:40">(<argument pos:start="73:16" pos:end="73:20"><expr pos:start="73:16" pos:end="73:20"><name pos:start="73:16" pos:end="73:20">avctx</name></expr></argument>, <argument pos:start="73:23" pos:end="73:33"><expr pos:start="73:23" pos:end="73:33"><name pos:start="73:23" pos:end="73:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="73:36" pos:end="73:39"><expr pos:start="73:36" pos:end="73:39"><literal type="string" pos:start="73:36" pos:end="73:39">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><call pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:53">(<argument pos:start="75:16" pos:end="75:20"><expr pos:start="75:16" pos:end="75:20"><name pos:start="75:16" pos:end="75:20">avctx</name></expr></argument>, <argument pos:start="75:23" pos:end="75:33"><expr pos:start="75:23" pos:end="75:33"><name pos:start="75:23" pos:end="75:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="75:36" pos:end="75:52"><expr pos:start="75:36" pos:end="75:52"><literal type="string" pos:start="75:36" pos:end="75:52">"Possible tunes:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="77:9" pos:end="79:66">for <control pos:start="77:13" pos:end="77:44">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:39"><expr pos:start="77:21" pos:end="77:38"><name pos:start="77:21" pos:end="77:38"><name pos:start="77:21" pos:end="77:35">x265_tune_names</name><index pos:start="77:36" pos:end="77:38">[<expr pos:start="77:37" pos:end="77:37"><name pos:start="77:37" pos:end="77:37">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="77:41" pos:end="77:43"><expr pos:start="77:41" pos:end="77:43"><name pos:start="77:41" pos:end="77:41">i</name><operator pos:start="77:42" pos:end="77:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="79:13" pos:end="79:66"><block_content pos:start="79:13" pos:end="79:66">

            <expr_stmt pos:start="79:13" pos:end="79:66"><expr pos:start="79:13" pos:end="79:65"><call pos:start="79:13" pos:end="79:65"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="79:65">(<argument pos:start="79:20" pos:end="79:24"><expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:24">avctx</name></expr></argument>, <argument pos:start="79:27" pos:end="79:37"><expr pos:start="79:27" pos:end="79:37"><name pos:start="79:27" pos:end="79:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="79:40" pos:end="79:44"><expr pos:start="79:40" pos:end="79:44"><literal type="string" pos:start="79:40" pos:end="79:44">" %s"</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:64"><expr pos:start="79:47" pos:end="79:64"><name pos:start="79:47" pos:end="79:64"><name pos:start="79:47" pos:end="79:61">x265_tune_names</name><index pos:start="79:62" pos:end="79:64">[<expr pos:start="79:63" pos:end="79:63"><name pos:start="79:63" pos:end="79:63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="83:9" pos:end="83:41"><expr pos:start="83:9" pos:end="83:40"><call pos:start="83:9" pos:end="83:40"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:40">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:33"><expr pos:start="83:23" pos:end="83:33"><name pos:start="83:23" pos:end="83:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="83:36" pos:end="83:39"><expr pos:start="83:36" pos:end="83:39"><literal type="string" pos:start="83:36" pos:end="83:39">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="87:9" pos:end="87:31">return <expr pos:start="87:16" pos:end="87:30"><call pos:start="87:16" pos:end="87:30"><name pos:start="87:16" pos:end="87:22">AVERROR</name><argument_list pos:start="87:23" pos:end="87:30">(<argument pos:start="87:24" pos:end="87:29"><expr pos:start="87:24" pos:end="87:29"><name pos:start="87:24" pos:end="87:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:55"><expr pos:start="93:5" pos:end="93:54"><name pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:7">ctx</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:15">params</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:32">frameNumThreads</name></name> <operator pos:start="93:34" pos:end="93:34">=</operator> <name pos:start="93:36" pos:end="93:54"><name pos:start="93:36" pos:end="93:40">avctx</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:54">thread_count</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:56"><expr pos:start="95:5" pos:end="95:55"><name pos:start="95:5" pos:end="95:23"><name pos:start="95:5" pos:end="95:7">ctx</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:15">params</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:23">fpsNum</name></name>          <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:55"><name pos:start="95:36" pos:end="95:40">avctx</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:51">time_base</name><operator pos:start="95:52" pos:end="95:52">.</operator><name pos:start="95:53" pos:end="95:55">den</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:81"><expr pos:start="97:5" pos:end="97:80"><name pos:start="97:5" pos:end="97:25"><name pos:start="97:5" pos:end="97:7">ctx</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:15">params</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:25">fpsDenom</name></name>        <operator pos:start="97:34" pos:end="97:34">=</operator> <name pos:start="97:36" pos:end="97:55"><name pos:start="97:36" pos:end="97:40">avctx</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:51">time_base</name><operator pos:start="97:52" pos:end="97:52">.</operator><name pos:start="97:53" pos:end="97:55">num</name></name> <operator pos:start="97:57" pos:end="97:57">*</operator> <name pos:start="97:59" pos:end="97:80"><name pos:start="97:59" pos:end="97:63">avctx</name><operator pos:start="97:64" pos:end="97:65">-&gt;</operator><name pos:start="97:66" pos:end="97:80">ticks_per_frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:48"><expr pos:start="99:5" pos:end="99:47"><name pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:7">ctx</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:15">params</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:28">sourceWidth</name></name>     <operator pos:start="99:34" pos:end="99:34">=</operator> <name pos:start="99:36" pos:end="99:47"><name pos:start="99:36" pos:end="99:40">avctx</name><operator pos:start="99:41" pos:end="99:42">-&gt;</operator><name pos:start="99:43" pos:end="99:47">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:49"><expr pos:start="101:5" pos:end="101:48"><name pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:7">ctx</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:15">params</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:29">sourceHeight</name></name>    <operator pos:start="101:34" pos:end="101:34">=</operator> <name pos:start="101:36" pos:end="101:48"><name pos:start="101:36" pos:end="101:40">avctx</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:48">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:70"><expr pos:start="103:5" pos:end="103:69"><name pos:start="103:5" pos:end="103:28"><name pos:start="103:5" pos:end="103:7">ctx</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:15">params</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:28">bEnablePsnr</name></name>     <operator pos:start="103:34" pos:end="103:34">=</operator> <operator pos:start="103:36" pos:end="103:36">!</operator><operator pos:start="103:37" pos:end="103:37">!</operator><operator pos:start="103:38" pos:end="103:38">(</operator><name pos:start="103:39" pos:end="103:50"><name pos:start="103:39" pos:end="103:43">avctx</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:50">flags</name></name> <operator pos:start="103:52" pos:end="103:52">&amp;</operator> <name pos:start="103:54" pos:end="103:68">CODEC_FLAG_PSNR</name><operator pos:start="103:69" pos:end="103:69">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="135:5"><if pos:start="107:5" pos:end="135:5">if <condition pos:start="107:8" pos:end="117:53">(<expr pos:start="107:9" pos:end="117:52"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:31"><name pos:start="107:10" pos:end="107:14">avctx</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:31">color_primaries</name></name> <operator pos:start="107:33" pos:end="107:34">&lt;=</operator> <name pos:start="107:36" pos:end="107:51">AVCOL_PRI_BT2020</name> <operator pos:start="107:53" pos:end="107:54">&amp;&amp;</operator>

         <name pos:start="109:10" pos:end="109:31"><name pos:start="109:10" pos:end="109:14">avctx</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:31">color_primaries</name></name> <operator pos:start="109:33" pos:end="109:34">!=</operator> <name pos:start="109:36" pos:end="109:56">AVCOL_PRI_UNSPECIFIED</name><operator pos:start="109:57" pos:end="109:57">)</operator> <operator pos:start="109:59" pos:end="109:60">||</operator>

        <operator pos:start="111:9" pos:end="111:9">(</operator><name pos:start="111:10" pos:end="111:25"><name pos:start="111:10" pos:end="111:14">avctx</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:25">color_trc</name></name> <operator pos:start="111:27" pos:end="111:28">&lt;=</operator> <name pos:start="111:30" pos:end="111:48">AVCOL_TRC_BT2020_12</name> <operator pos:start="111:50" pos:end="111:51">&amp;&amp;</operator>

         <name pos:start="113:10" pos:end="113:25"><name pos:start="113:10" pos:end="113:14">avctx</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:25">color_trc</name></name> <operator pos:start="113:27" pos:end="113:28">!=</operator> <name pos:start="113:30" pos:end="113:50">AVCOL_TRC_UNSPECIFIED</name><operator pos:start="113:51" pos:end="113:51">)</operator> <operator pos:start="113:53" pos:end="113:54">||</operator>

        <operator pos:start="115:9" pos:end="115:9">(</operator><name pos:start="115:10" pos:end="115:26"><name pos:start="115:10" pos:end="115:14">avctx</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:26">colorspace</name></name> <operator pos:start="115:28" pos:end="115:29">&lt;=</operator> <name pos:start="115:31" pos:end="115:49">AVCOL_SPC_BT2020_CL</name> <operator pos:start="115:51" pos:end="115:52">&amp;&amp;</operator>

         <name pos:start="117:10" pos:end="117:26"><name pos:start="117:10" pos:end="117:14">avctx</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:26">colorspace</name></name> <operator pos:start="117:28" pos:end="117:29">!=</operator> <name pos:start="117:31" pos:end="117:51">AVCOL_SPC_UNSPECIFIED</name><operator pos:start="117:52" pos:end="117:52">)</operator></expr>)</condition> <block pos:start="117:55" pos:end="135:5">{<block_content pos:start="121:9" pos:end="133:69">



        <expr_stmt pos:start="121:9" pos:end="121:64"><expr pos:start="121:9" pos:end="121:63"><name pos:start="121:9" pos:end="121:58"><name pos:start="121:9" pos:end="121:11">ctx</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:19">params</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:24">vui</name><operator pos:start="121:25" pos:end="121:25">.</operator><name pos:start="121:26" pos:end="121:58">bEnableVideoSignalTypePresentFlag</name></name>  <operator pos:start="121:61" pos:end="121:61">=</operator> <literal type="number" pos:start="121:63" pos:end="121:63">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:64"><expr pos:start="123:9" pos:end="123:63"><name pos:start="123:9" pos:end="123:59"><name pos:start="123:9" pos:end="123:11">ctx</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:19">params</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:24">vui</name><operator pos:start="123:25" pos:end="123:25">.</operator><name pos:start="123:26" pos:end="123:59">bEnableColorDescriptionPresentFlag</name></name> <operator pos:start="123:61" pos:end="123:61">=</operator> <literal type="number" pos:start="123:63" pos:end="123:63">1</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="127:9" pos:end="127:51">// x265 validates the parameters internally</comment>

        <expr_stmt pos:start="129:9" pos:end="129:74"><expr pos:start="129:9" pos:end="129:73"><name pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:11">ctx</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:19">params</name><operator pos:start="129:20" pos:end="129:21">-&gt;</operator><name pos:start="129:22" pos:end="129:24">vui</name><operator pos:start="129:25" pos:end="129:25">.</operator><name pos:start="129:26" pos:end="129:39">colorPrimaries</name></name>          <operator pos:start="129:50" pos:end="129:50">=</operator> <name pos:start="129:52" pos:end="129:73"><name pos:start="129:52" pos:end="129:56">avctx</name><operator pos:start="129:57" pos:end="129:58">-&gt;</operator><name pos:start="129:59" pos:end="129:73">color_primaries</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:68"><expr pos:start="131:9" pos:end="131:67"><name pos:start="131:9" pos:end="131:48"><name pos:start="131:9" pos:end="131:11">ctx</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:19">params</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:24">vui</name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:48">transferCharacteristics</name></name> <operator pos:start="131:50" pos:end="131:50">=</operator> <name pos:start="131:52" pos:end="131:67"><name pos:start="131:52" pos:end="131:56">avctx</name><operator pos:start="131:57" pos:end="131:58">-&gt;</operator><name pos:start="131:59" pos:end="131:67">color_trc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:69"><expr pos:start="133:9" pos:end="133:68"><name pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:11">ctx</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:19">params</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:24">vui</name><operator pos:start="133:25" pos:end="133:25">.</operator><name pos:start="133:26" pos:end="133:37">matrixCoeffs</name></name>            <operator pos:start="133:50" pos:end="133:50">=</operator> <name pos:start="133:52" pos:end="133:68"><name pos:start="133:52" pos:end="133:56">avctx</name><operator pos:start="133:57" pos:end="133:58">-&gt;</operator><name pos:start="133:59" pos:end="133:68">colorspace</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="163:5"><if pos:start="139:5" pos:end="163:5">if <condition pos:start="139:8" pos:end="139:81">(<expr pos:start="139:9" pos:end="139:80"><name pos:start="139:9" pos:end="139:38"><name pos:start="139:9" pos:end="139:13">avctx</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:34">sample_aspect_ratio</name><operator pos:start="139:35" pos:end="139:35">.</operator><name pos:start="139:36" pos:end="139:38">num</name></name> <operator pos:start="139:40" pos:end="139:40">&gt;</operator> <literal type="number" pos:start="139:42" pos:end="139:42">0</literal> <operator pos:start="139:44" pos:end="139:45">&amp;&amp;</operator> <name pos:start="139:47" pos:end="139:76"><name pos:start="139:47" pos:end="139:51">avctx</name><operator pos:start="139:52" pos:end="139:53">-&gt;</operator><name pos:start="139:54" pos:end="139:72">sample_aspect_ratio</name><operator pos:start="139:73" pos:end="139:73">.</operator><name pos:start="139:74" pos:end="139:76">den</name></name> <operator pos:start="139:78" pos:end="139:78">&gt;</operator> <literal type="number" pos:start="139:80" pos:end="139:80">0</literal></expr>)</condition> <block pos:start="139:83" pos:end="163:5">{<block_content pos:start="141:9" pos:end="161:9">

        <decl_stmt pos:start="141:9" pos:end="141:21"><decl pos:start="141:9" pos:end="141:20"><type pos:start="141:9" pos:end="141:12"><name pos:start="141:9" pos:end="141:12">char</name></type> <name pos:start="141:14" pos:end="141:20"><name pos:start="141:14" pos:end="141:16">sar</name><index pos:start="141:17" pos:end="141:20">[<expr pos:start="141:18" pos:end="141:19"><literal type="number" pos:start="141:18" pos:end="141:19">12</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:29"><decl pos:start="143:9" pos:end="143:19"><type pos:start="143:9" pos:end="143:11"><name pos:start="143:9" pos:end="143:11">int</name></type> <name pos:start="143:13" pos:end="143:19">sar_num</name></decl>, <decl pos:start="143:22" pos:end="143:28"><type ref="prev" pos:start="143:9" pos:end="143:11"/><name pos:start="143:22" pos:end="143:28">sar_den</name></decl>;</decl_stmt>



        <expr_stmt pos:start="147:9" pos:end="151:57"><expr pos:start="147:9" pos:end="151:56"><call pos:start="147:9" pos:end="151:56"><name pos:start="147:9" pos:end="147:17">av_reduce</name><argument_list pos:start="147:18" pos:end="151:56">(<argument pos:start="147:19" pos:end="147:26"><expr pos:start="147:19" pos:end="147:26"><operator pos:start="147:19" pos:end="147:19">&amp;</operator><name pos:start="147:20" pos:end="147:26">sar_num</name></expr></argument>, <argument pos:start="147:29" pos:end="147:36"><expr pos:start="147:29" pos:end="147:36"><operator pos:start="147:29" pos:end="147:29">&amp;</operator><name pos:start="147:30" pos:end="147:36">sar_den</name></expr></argument>,

                  <argument pos:start="149:19" pos:end="149:48"><expr pos:start="149:19" pos:end="149:48"><name pos:start="149:19" pos:end="149:48"><name pos:start="149:19" pos:end="149:23">avctx</name><operator pos:start="149:24" pos:end="149:25">-&gt;</operator><name pos:start="149:26" pos:end="149:44">sample_aspect_ratio</name><operator pos:start="149:45" pos:end="149:45">.</operator><name pos:start="149:46" pos:end="149:48">num</name></name></expr></argument>,

                  <argument pos:start="151:19" pos:end="151:48"><expr pos:start="151:19" pos:end="151:48"><name pos:start="151:19" pos:end="151:48"><name pos:start="151:19" pos:end="151:23">avctx</name><operator pos:start="151:24" pos:end="151:25">-&gt;</operator><name pos:start="151:26" pos:end="151:44">sample_aspect_ratio</name><operator pos:start="151:45" pos:end="151:45">.</operator><name pos:start="151:46" pos:end="151:48">den</name></name></expr></argument>, <argument pos:start="151:51" pos:end="151:55"><expr pos:start="151:51" pos:end="151:55"><literal type="number" pos:start="151:51" pos:end="151:55">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:62"><expr pos:start="153:9" pos:end="153:61"><call pos:start="153:9" pos:end="153:61"><name pos:start="153:9" pos:end="153:16">snprintf</name><argument_list pos:start="153:17" pos:end="153:61">(<argument pos:start="153:18" pos:end="153:20"><expr pos:start="153:18" pos:end="153:20"><name pos:start="153:18" pos:end="153:20">sar</name></expr></argument>, <argument pos:start="153:23" pos:end="153:33"><expr pos:start="153:23" pos:end="153:33"><sizeof pos:start="153:23" pos:end="153:33">sizeof<argument_list pos:start="153:29" pos:end="153:33">(<argument pos:start="153:30" pos:end="153:32"><expr pos:start="153:30" pos:end="153:32"><name pos:start="153:30" pos:end="153:32">sar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="153:36" pos:end="153:42"><expr pos:start="153:36" pos:end="153:42"><literal type="string" pos:start="153:36" pos:end="153:42">"%d:%d"</literal></expr></argument>, <argument pos:start="153:45" pos:end="153:51"><expr pos:start="153:45" pos:end="153:51"><name pos:start="153:45" pos:end="153:51">sar_num</name></expr></argument>, <argument pos:start="153:54" pos:end="153:60"><expr pos:start="153:54" pos:end="153:60"><name pos:start="153:54" pos:end="153:60">sar_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:83">(<expr pos:start="155:13" pos:end="155:82"><call pos:start="155:13" pos:end="155:58"><name pos:start="155:13" pos:end="155:33"><name pos:start="155:13" pos:end="155:15">ctx</name><operator pos:start="155:16" pos:end="155:17">-&gt;</operator><name pos:start="155:18" pos:end="155:20">api</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:33">param_parse</name></name><argument_list pos:start="155:34" pos:end="155:58">(<argument pos:start="155:35" pos:end="155:45"><expr pos:start="155:35" pos:end="155:45"><name pos:start="155:35" pos:end="155:45"><name pos:start="155:35" pos:end="155:37">ctx</name><operator pos:start="155:38" pos:end="155:39">-&gt;</operator><name pos:start="155:40" pos:end="155:45">params</name></name></expr></argument>, <argument pos:start="155:48" pos:end="155:52"><expr pos:start="155:48" pos:end="155:52"><literal type="string" pos:start="155:48" pos:end="155:52">"sar"</literal></expr></argument>, <argument pos:start="155:55" pos:end="155:57"><expr pos:start="155:55" pos:end="155:57"><name pos:start="155:55" pos:end="155:57">sar</name></expr></argument>)</argument_list></call> <operator pos:start="155:60" pos:end="155:61">==</operator> <name pos:start="155:63" pos:end="155:82">X265_PARAM_BAD_VALUE</name></expr>)</condition> <block pos:start="155:85" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:39">

            <expr_stmt pos:start="157:13" pos:end="157:83"><expr pos:start="157:13" pos:end="157:82"><call pos:start="157:13" pos:end="157:82"><name pos:start="157:13" pos:end="157:18">av_log</name><argument_list pos:start="157:19" pos:end="157:82">(<argument pos:start="157:20" pos:end="157:24"><expr pos:start="157:20" pos:end="157:24"><name pos:start="157:20" pos:end="157:24">avctx</name></expr></argument>, <argument pos:start="157:27" pos:end="157:38"><expr pos:start="157:27" pos:end="157:38"><name pos:start="157:27" pos:end="157:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:41" pos:end="157:63"><expr pos:start="157:41" pos:end="157:63"><literal type="string" pos:start="157:41" pos:end="157:63">"Invalid SAR: %d:%d.\n"</literal></expr></argument>, <argument pos:start="157:66" pos:end="157:72"><expr pos:start="157:66" pos:end="157:72"><name pos:start="157:66" pos:end="157:72">sar_num</name></expr></argument>, <argument pos:start="157:75" pos:end="157:81"><expr pos:start="157:75" pos:end="157:81"><name pos:start="157:75" pos:end="157:81">sar_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:39">return <expr pos:start="159:20" pos:end="159:38"><name pos:start="159:20" pos:end="159:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="167:5" pos:end="193:5">switch <condition pos:start="167:12" pos:end="167:27">(<expr pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:17">avctx</name><operator pos:start="167:18" pos:end="167:19">-&gt;</operator><name pos:start="167:20" pos:end="167:26">pix_fmt</name></name></expr>)</condition> <block pos:start="167:29" pos:end="193:5">{<block_content pos:start="169:5" pos:end="191:14">

    <case pos:start="169:5" pos:end="169:28">case <expr pos:start="169:10" pos:end="169:27"><name pos:start="169:10" pos:end="169:27">AV_PIX_FMT_YUV420P</name></expr>:</case>

    <case pos:start="171:5" pos:end="171:30">case <expr pos:start="171:10" pos:end="171:29"><name pos:start="171:10" pos:end="171:29">AV_PIX_FMT_YUV420P10</name></expr>:</case>

        <expr_stmt pos:start="173:9" pos:end="173:49"><expr pos:start="173:9" pos:end="173:48"><name pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:11">ctx</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:19">params</name><operator pos:start="173:20" pos:end="173:21">-&gt;</operator><name pos:start="173:22" pos:end="173:32">internalCsp</name></name> <operator pos:start="173:34" pos:end="173:34">=</operator> <name pos:start="173:36" pos:end="173:48">X265_CSP_I420</name></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:28">case <expr pos:start="177:10" pos:end="177:27"><name pos:start="177:10" pos:end="177:27">AV_PIX_FMT_YUV422P</name></expr>:</case>

    <case pos:start="179:5" pos:end="179:30">case <expr pos:start="179:10" pos:end="179:29"><name pos:start="179:10" pos:end="179:29">AV_PIX_FMT_YUV422P10</name></expr>:</case>

        <expr_stmt pos:start="181:9" pos:end="181:49"><expr pos:start="181:9" pos:end="181:48"><name pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:11">ctx</name><operator pos:start="181:12" pos:end="181:13">-&gt;</operator><name pos:start="181:14" pos:end="181:19">params</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:32">internalCsp</name></name> <operator pos:start="181:34" pos:end="181:34">=</operator> <name pos:start="181:36" pos:end="181:48">X265_CSP_I422</name></expr>;</expr_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>

    <case pos:start="185:5" pos:end="185:28">case <expr pos:start="185:10" pos:end="185:27"><name pos:start="185:10" pos:end="185:27">AV_PIX_FMT_YUV444P</name></expr>:</case>

    <case pos:start="187:5" pos:end="187:30">case <expr pos:start="187:10" pos:end="187:29"><name pos:start="187:10" pos:end="187:29">AV_PIX_FMT_YUV444P10</name></expr>:</case>

        <expr_stmt pos:start="189:9" pos:end="189:49"><expr pos:start="189:9" pos:end="189:48"><name pos:start="189:9" pos:end="189:32"><name pos:start="189:9" pos:end="189:11">ctx</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:19">params</name><operator pos:start="189:20" pos:end="189:21">-&gt;</operator><name pos:start="189:22" pos:end="189:32">internalCsp</name></name> <operator pos:start="189:34" pos:end="189:34">=</operator> <name pos:start="189:36" pos:end="189:48">X265_CSP_I444</name></expr>;</expr_stmt>

        <break pos:start="191:9" pos:end="191:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="197:5" pos:end="219:5"><if pos:start="197:5" pos:end="213:5">if <condition pos:start="197:8" pos:end="197:22">(<expr pos:start="197:9" pos:end="197:21"><name pos:start="197:9" pos:end="197:16"><name pos:start="197:9" pos:end="197:11">ctx</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:16">crf</name></name> <operator pos:start="197:18" pos:end="197:19">&gt;=</operator> <literal type="number" pos:start="197:21" pos:end="197:21">0</literal></expr>)</condition> <block pos:start="197:24" pos:end="213:5">{<block_content pos:start="199:9" pos:end="211:9">

        <decl_stmt pos:start="199:9" pos:end="199:20"><decl pos:start="199:9" pos:end="199:19"><type pos:start="199:9" pos:end="199:12"><name pos:start="199:9" pos:end="199:12">char</name></type> <name pos:start="199:14" pos:end="199:19"><name pos:start="199:14" pos:end="199:16">crf</name><index pos:start="199:17" pos:end="199:19">[<expr pos:start="199:18" pos:end="199:18"><literal type="number" pos:start="199:18" pos:end="199:18">6</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:54"><expr pos:start="203:9" pos:end="203:53"><call pos:start="203:9" pos:end="203:53"><name pos:start="203:9" pos:end="203:16">snprintf</name><argument_list pos:start="203:17" pos:end="203:53">(<argument pos:start="203:18" pos:end="203:20"><expr pos:start="203:18" pos:end="203:20"><name pos:start="203:18" pos:end="203:20">crf</name></expr></argument>, <argument pos:start="203:23" pos:end="203:33"><expr pos:start="203:23" pos:end="203:33"><sizeof pos:start="203:23" pos:end="203:33">sizeof<argument_list pos:start="203:29" pos:end="203:33">(<argument pos:start="203:30" pos:end="203:32"><expr pos:start="203:30" pos:end="203:32"><name pos:start="203:30" pos:end="203:32">crf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="203:36" pos:end="203:42"><expr pos:start="203:36" pos:end="203:42"><literal type="string" pos:start="203:36" pos:end="203:42">"%2.2f"</literal></expr></argument>, <argument pos:start="203:45" pos:end="203:52"><expr pos:start="203:45" pos:end="203:52"><name pos:start="203:45" pos:end="203:52"><name pos:start="203:45" pos:end="203:47">ctx</name><operator pos:start="203:48" pos:end="203:49">-&gt;</operator><name pos:start="203:50" pos:end="203:52">crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="211:9"><if pos:start="205:9" pos:end="211:9">if <condition pos:start="205:12" pos:end="205:83">(<expr pos:start="205:13" pos:end="205:82"><call pos:start="205:13" pos:end="205:58"><name pos:start="205:13" pos:end="205:33"><name pos:start="205:13" pos:end="205:15">ctx</name><operator pos:start="205:16" pos:end="205:17">-&gt;</operator><name pos:start="205:18" pos:end="205:20">api</name><operator pos:start="205:21" pos:end="205:22">-&gt;</operator><name pos:start="205:23" pos:end="205:33">param_parse</name></name><argument_list pos:start="205:34" pos:end="205:58">(<argument pos:start="205:35" pos:end="205:45"><expr pos:start="205:35" pos:end="205:45"><name pos:start="205:35" pos:end="205:45"><name pos:start="205:35" pos:end="205:37">ctx</name><operator pos:start="205:38" pos:end="205:39">-&gt;</operator><name pos:start="205:40" pos:end="205:45">params</name></name></expr></argument>, <argument pos:start="205:48" pos:end="205:52"><expr pos:start="205:48" pos:end="205:52"><literal type="string" pos:start="205:48" pos:end="205:52">"crf"</literal></expr></argument>, <argument pos:start="205:55" pos:end="205:57"><expr pos:start="205:55" pos:end="205:57"><name pos:start="205:55" pos:end="205:57">crf</name></expr></argument>)</argument_list></call> <operator pos:start="205:60" pos:end="205:61">==</operator> <name pos:start="205:63" pos:end="205:82">X265_PARAM_BAD_VALUE</name></expr>)</condition> <block pos:start="205:85" pos:end="211:9">{<block_content pos:start="207:13" pos:end="209:35">

            <expr_stmt pos:start="207:13" pos:end="207:75"><expr pos:start="207:13" pos:end="207:74"><call pos:start="207:13" pos:end="207:74"><name pos:start="207:13" pos:end="207:18">av_log</name><argument_list pos:start="207:19" pos:end="207:74">(<argument pos:start="207:20" pos:end="207:24"><expr pos:start="207:20" pos:end="207:24"><name pos:start="207:20" pos:end="207:24">avctx</name></expr></argument>, <argument pos:start="207:27" pos:end="207:38"><expr pos:start="207:27" pos:end="207:38"><name pos:start="207:27" pos:end="207:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:41" pos:end="207:63"><expr pos:start="207:41" pos:end="207:63"><literal type="string" pos:start="207:41" pos:end="207:63">"Invalid crf: %2.2f.\n"</literal></expr></argument>, <argument pos:start="207:66" pos:end="207:73"><expr pos:start="207:66" pos:end="207:73"><name pos:start="207:66" pos:end="207:73"><name pos:start="207:66" pos:end="207:68">ctx</name><operator pos:start="207:69" pos:end="207:70">-&gt;</operator><name pos:start="207:71" pos:end="207:73">crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="209:13" pos:end="209:35">return <expr pos:start="209:20" pos:end="209:34"><call pos:start="209:20" pos:end="209:34"><name pos:start="209:20" pos:end="209:26">AVERROR</name><argument_list pos:start="209:27" pos:end="209:34">(<argument pos:start="209:28" pos:end="209:33"><expr pos:start="209:28" pos:end="209:33"><name pos:start="209:28" pos:end="209:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="213:7" pos:end="219:5">else if <condition pos:start="213:15" pos:end="213:35">(<expr pos:start="213:16" pos:end="213:34"><name pos:start="213:16" pos:end="213:30"><name pos:start="213:16" pos:end="213:20">avctx</name><operator pos:start="213:21" pos:end="213:22">-&gt;</operator><name pos:start="213:23" pos:end="213:30">bit_rate</name></name> <operator pos:start="213:32" pos:end="213:32">&gt;</operator> <literal type="number" pos:start="213:34" pos:end="213:34">0</literal></expr>)</condition> <block pos:start="213:37" pos:end="219:5">{<block_content pos:start="215:9" pos:end="217:54">

        <expr_stmt pos:start="215:9" pos:end="215:65"><expr pos:start="215:9" pos:end="215:64"><name pos:start="215:9" pos:end="215:31"><name pos:start="215:9" pos:end="215:11">ctx</name><operator pos:start="215:12" pos:end="215:13">-&gt;</operator><name pos:start="215:14" pos:end="215:19">params</name><operator pos:start="215:20" pos:end="215:21">-&gt;</operator><name pos:start="215:22" pos:end="215:23">rc</name><operator pos:start="215:24" pos:end="215:24">.</operator><name pos:start="215:25" pos:end="215:31">bitrate</name></name>         <operator pos:start="215:41" pos:end="215:41">=</operator> <name pos:start="215:43" pos:end="215:57"><name pos:start="215:43" pos:end="215:47">avctx</name><operator pos:start="215:48" pos:end="215:49">-&gt;</operator><name pos:start="215:50" pos:end="215:57">bit_rate</name></name> <operator pos:start="215:59" pos:end="215:59">/</operator> <literal type="number" pos:start="215:61" pos:end="215:64">1000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:54"><expr pos:start="217:9" pos:end="217:53"><name pos:start="217:9" pos:end="217:39"><name pos:start="217:9" pos:end="217:11">ctx</name><operator pos:start="217:12" pos:end="217:13">-&gt;</operator><name pos:start="217:14" pos:end="217:19">params</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:23">rc</name><operator pos:start="217:24" pos:end="217:24">.</operator><name pos:start="217:25" pos:end="217:39">rateControlMode</name></name> <operator pos:start="217:41" pos:end="217:41">=</operator> <name pos:start="217:43" pos:end="217:53">X265_RC_ABR</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="223:5" pos:end="225:40"><if pos:start="223:5" pos:end="225:40">if <condition pos:start="223:8" pos:end="223:51">(<expr pos:start="223:9" pos:end="223:50"><operator pos:start="223:9" pos:end="223:9">!</operator><operator pos:start="223:10" pos:end="223:10">(</operator><name pos:start="223:11" pos:end="223:22"><name pos:start="223:11" pos:end="223:15">avctx</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:22">flags</name></name> <operator pos:start="223:24" pos:end="223:24">&amp;</operator> <name pos:start="223:26" pos:end="223:49">CODEC_FLAG_GLOBAL_HEADER</name><operator pos:start="223:50" pos:end="223:50">)</operator></expr>)</condition><block type="pseudo" pos:start="225:9" pos:end="225:40"><block_content pos:start="225:9" pos:end="225:40">

        <expr_stmt pos:start="225:9" pos:end="225:40"><expr pos:start="225:9" pos:end="225:39"><name pos:start="225:9" pos:end="225:35"><name pos:start="225:9" pos:end="225:11">ctx</name><operator pos:start="225:12" pos:end="225:13">-&gt;</operator><name pos:start="225:14" pos:end="225:19">params</name><operator pos:start="225:20" pos:end="225:21">-&gt;</operator><name pos:start="225:22" pos:end="225:35">bRepeatHeaders</name></name> <operator pos:start="225:37" pos:end="225:37">=</operator> <literal type="number" pos:start="225:39" pos:end="225:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="275:5"><if pos:start="229:5" pos:end="275:5">if <condition pos:start="229:8" pos:end="229:23">(<expr pos:start="229:9" pos:end="229:22"><name pos:start="229:9" pos:end="229:22"><name pos:start="229:9" pos:end="229:11">ctx</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:22">x265_opts</name></name></expr>)</condition> <block pos:start="229:25" pos:end="275:5">{<block_content pos:start="231:9" pos:end="273:9">

        <decl_stmt pos:start="231:9" pos:end="231:37"><decl pos:start="231:9" pos:end="231:36"><type pos:start="231:9" pos:end="231:22"><name pos:start="231:9" pos:end="231:20">AVDictionary</name> <modifier pos:start="231:22" pos:end="231:22">*</modifier></type><name pos:start="231:23" pos:end="231:26">dict</name>    <init pos:start="231:31" pos:end="231:36">= <expr pos:start="231:33" pos:end="231:36"><name pos:start="231:33" pos:end="231:36">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="233:9" pos:end="233:37"><decl pos:start="233:9" pos:end="233:36"><type pos:start="233:9" pos:end="233:27"><name pos:start="233:9" pos:end="233:25">AVDictionaryEntry</name> <modifier pos:start="233:27" pos:end="233:27">*</modifier></type><name pos:start="233:28" pos:end="233:29">en</name> <init pos:start="233:31" pos:end="233:36">= <expr pos:start="233:33" pos:end="233:36"><name pos:start="233:33" pos:end="233:36">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="237:9" pos:end="273:9"><if pos:start="237:9" pos:end="273:9">if <condition pos:start="237:12" pos:end="237:70">(<expr pos:start="237:13" pos:end="237:69"><operator pos:start="237:13" pos:end="237:13">!</operator><call pos:start="237:14" pos:end="237:69"><name pos:start="237:14" pos:end="237:33">av_dict_parse_string</name><argument_list pos:start="237:34" pos:end="237:69">(<argument pos:start="237:35" pos:end="237:39"><expr pos:start="237:35" pos:end="237:39"><operator pos:start="237:35" pos:end="237:35">&amp;</operator><name pos:start="237:36" pos:end="237:39">dict</name></expr></argument>, <argument pos:start="237:42" pos:end="237:55"><expr pos:start="237:42" pos:end="237:55"><name pos:start="237:42" pos:end="237:55"><name pos:start="237:42" pos:end="237:44">ctx</name><operator pos:start="237:45" pos:end="237:46">-&gt;</operator><name pos:start="237:47" pos:end="237:55">x265_opts</name></name></expr></argument>, <argument pos:start="237:58" pos:end="237:60"><expr pos:start="237:58" pos:end="237:60"><literal type="string" pos:start="237:58" pos:end="237:60">"="</literal></expr></argument>, <argument pos:start="237:63" pos:end="237:65"><expr pos:start="237:63" pos:end="237:65"><literal type="string" pos:start="237:63" pos:end="237:65">":"</literal></expr></argument>, <argument pos:start="237:68" pos:end="237:68"><expr pos:start="237:68" pos:end="237:68"><literal type="number" pos:start="237:68" pos:end="237:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:72" pos:end="273:9">{<block_content pos:start="239:13" pos:end="271:32">

            <while pos:start="239:13" pos:end="269:13">while <condition pos:start="239:19" pos:end="239:75">(<expr pos:start="239:20" pos:end="239:74"><operator pos:start="239:20" pos:end="239:20">(</operator><name pos:start="239:21" pos:end="239:22">en</name> <operator pos:start="239:24" pos:end="239:24">=</operator> <call pos:start="239:26" pos:end="239:73"><name pos:start="239:26" pos:end="239:36">av_dict_get</name><argument_list pos:start="239:37" pos:end="239:73">(<argument pos:start="239:38" pos:end="239:41"><expr pos:start="239:38" pos:end="239:41"><name pos:start="239:38" pos:end="239:41">dict</name></expr></argument>, <argument pos:start="239:44" pos:end="239:45"><expr pos:start="239:44" pos:end="239:45"><literal type="string" pos:start="239:44" pos:end="239:45">""</literal></expr></argument>, <argument pos:start="239:48" pos:end="239:49"><expr pos:start="239:48" pos:end="239:49"><name pos:start="239:48" pos:end="239:49">en</name></expr></argument>, <argument pos:start="239:52" pos:end="239:72"><expr pos:start="239:52" pos:end="239:72"><name pos:start="239:52" pos:end="239:72">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="239:74" pos:end="239:74">)</operator></expr>)</condition> <block pos:start="239:77" pos:end="269:13">{<block_content pos:start="241:17" pos:end="267:17">

                <decl_stmt pos:start="241:17" pos:end="241:87"><decl pos:start="241:17" pos:end="241:86"><type pos:start="241:17" pos:end="241:19"><name pos:start="241:17" pos:end="241:19">int</name></type> <name pos:start="241:21" pos:end="241:29">parse_ret</name> <init pos:start="241:31" pos:end="241:86">= <expr pos:start="241:33" pos:end="241:86"><call pos:start="241:33" pos:end="241:86"><name pos:start="241:33" pos:end="241:53"><name pos:start="241:33" pos:end="241:35">ctx</name><operator pos:start="241:36" pos:end="241:37">-&gt;</operator><name pos:start="241:38" pos:end="241:40">api</name><operator pos:start="241:41" pos:end="241:42">-&gt;</operator><name pos:start="241:43" pos:end="241:53">param_parse</name></name><argument_list pos:start="241:54" pos:end="241:86">(<argument pos:start="241:55" pos:end="241:65"><expr pos:start="241:55" pos:end="241:65"><name pos:start="241:55" pos:end="241:65"><name pos:start="241:55" pos:end="241:57">ctx</name><operator pos:start="241:58" pos:end="241:59">-&gt;</operator><name pos:start="241:60" pos:end="241:65">params</name></name></expr></argument>, <argument pos:start="241:68" pos:end="241:74"><expr pos:start="241:68" pos:end="241:74"><name pos:start="241:68" pos:end="241:74"><name pos:start="241:68" pos:end="241:69">en</name><operator pos:start="241:70" pos:end="241:71">-&gt;</operator><name pos:start="241:72" pos:end="241:74">key</name></name></expr></argument>, <argument pos:start="241:77" pos:end="241:85"><expr pos:start="241:77" pos:end="241:85"><name pos:start="241:77" pos:end="241:85"><name pos:start="241:77" pos:end="241:78">en</name><operator pos:start="241:79" pos:end="241:80">-&gt;</operator><name pos:start="241:81" pos:end="241:85">value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <switch pos:start="245:17" pos:end="267:17">switch <condition pos:start="245:24" pos:end="245:34">(<expr pos:start="245:25" pos:end="245:33"><name pos:start="245:25" pos:end="245:33">parse_ret</name></expr>)</condition> <block pos:start="245:36" pos:end="267:17">{<block_content pos:start="247:17" pos:end="265:26">

                <case pos:start="247:17" pos:end="247:41">case <expr pos:start="247:22" pos:end="247:40"><name pos:start="247:22" pos:end="247:40">X265_PARAM_BAD_NAME</name></expr>:</case>

                    <expr_stmt pos:start="249:21" pos:end="251:60"><expr pos:start="249:21" pos:end="251:59"><call pos:start="249:21" pos:end="251:59"><name pos:start="249:21" pos:end="249:26">av_log</name><argument_list pos:start="249:27" pos:end="251:59">(<argument pos:start="249:28" pos:end="249:32"><expr pos:start="249:28" pos:end="249:32"><name pos:start="249:28" pos:end="249:32">avctx</name></expr></argument>, <argument pos:start="249:35" pos:end="249:48"><expr pos:start="249:35" pos:end="249:48"><name pos:start="249:35" pos:end="249:48">AV_LOG_WARNING</name></expr></argument>,

                          <argument pos:start="251:27" pos:end="251:49"><expr pos:start="251:27" pos:end="251:49"><literal type="string" pos:start="251:27" pos:end="251:49">"Unknown option: %s.\n"</literal></expr></argument>, <argument pos:start="251:52" pos:end="251:58"><expr pos:start="251:52" pos:end="251:58"><name pos:start="251:52" pos:end="251:58"><name pos:start="251:52" pos:end="251:53">en</name><operator pos:start="251:54" pos:end="251:55">-&gt;</operator><name pos:start="251:56" pos:end="251:58">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="253:21" pos:end="253:26">break;</break>

                <case pos:start="255:17" pos:end="255:42">case <expr pos:start="255:22" pos:end="255:41"><name pos:start="255:22" pos:end="255:41">X265_PARAM_BAD_VALUE</name></expr>:</case>

                    <expr_stmt pos:start="257:21" pos:end="259:77"><expr pos:start="257:21" pos:end="259:76"><call pos:start="257:21" pos:end="259:76"><name pos:start="257:21" pos:end="257:26">av_log</name><argument_list pos:start="257:27" pos:end="259:76">(<argument pos:start="257:28" pos:end="257:32"><expr pos:start="257:28" pos:end="257:32"><name pos:start="257:28" pos:end="257:32">avctx</name></expr></argument>, <argument pos:start="257:35" pos:end="257:48"><expr pos:start="257:35" pos:end="257:48"><name pos:start="257:35" pos:end="257:48">AV_LOG_WARNING</name></expr></argument>,

                          <argument pos:start="259:27" pos:end="259:55"><expr pos:start="259:27" pos:end="259:55"><literal type="string" pos:start="259:27" pos:end="259:55">"Invalid value for %s: %s.\n"</literal></expr></argument>, <argument pos:start="259:58" pos:end="259:64"><expr pos:start="259:58" pos:end="259:64"><name pos:start="259:58" pos:end="259:64"><name pos:start="259:58" pos:end="259:59">en</name><operator pos:start="259:60" pos:end="259:61">-&gt;</operator><name pos:start="259:62" pos:end="259:64">key</name></name></expr></argument>, <argument pos:start="259:67" pos:end="259:75"><expr pos:start="259:67" pos:end="259:75"><name pos:start="259:67" pos:end="259:75"><name pos:start="259:67" pos:end="259:68">en</name><operator pos:start="259:69" pos:end="259:70">-&gt;</operator><name pos:start="259:71" pos:end="259:75">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="261:21" pos:end="261:26">break;</break>

                <default pos:start="263:17" pos:end="263:24">default:</default>

                    <break pos:start="265:21" pos:end="265:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></while>

            <expr_stmt pos:start="271:13" pos:end="271:32"><expr pos:start="271:13" pos:end="271:31"><call pos:start="271:13" pos:end="271:31"><name pos:start="271:13" pos:end="271:24">av_dict_free</name><argument_list pos:start="271:25" pos:end="271:31">(<argument pos:start="271:26" pos:end="271:30"><expr pos:start="271:26" pos:end="271:30"><operator pos:start="271:26" pos:end="271:26">&amp;</operator><name pos:start="271:27" pos:end="271:30">dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:55"><expr pos:start="279:5" pos:end="279:54"><name pos:start="279:5" pos:end="279:16"><name pos:start="279:5" pos:end="279:7">ctx</name><operator pos:start="279:8" pos:end="279:9">-&gt;</operator><name pos:start="279:10" pos:end="279:16">encoder</name></name> <operator pos:start="279:18" pos:end="279:18">=</operator> <call pos:start="279:20" pos:end="279:54"><name pos:start="279:20" pos:end="279:41"><name pos:start="279:20" pos:end="279:22">ctx</name><operator pos:start="279:23" pos:end="279:24">-&gt;</operator><name pos:start="279:25" pos:end="279:27">api</name><operator pos:start="279:28" pos:end="279:29">-&gt;</operator><name pos:start="279:30" pos:end="279:41">encoder_open</name></name><argument_list pos:start="279:42" pos:end="279:54">(<argument pos:start="279:43" pos:end="279:53"><expr pos:start="279:43" pos:end="279:53"><name pos:start="279:43" pos:end="279:53"><name pos:start="279:43" pos:end="279:45">ctx</name><operator pos:start="279:46" pos:end="279:47">-&gt;</operator><name pos:start="279:48" pos:end="279:53">params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="281:5" pos:end="289:5"><if pos:start="281:5" pos:end="289:5">if <condition pos:start="281:8" pos:end="281:22">(<expr pos:start="281:9" pos:end="281:21"><operator pos:start="281:9" pos:end="281:9">!</operator><name pos:start="281:10" pos:end="281:21"><name pos:start="281:10" pos:end="281:12">ctx</name><operator pos:start="281:13" pos:end="281:14">-&gt;</operator><name pos:start="281:15" pos:end="281:21">encoder</name></name></expr>)</condition> <block pos:start="281:24" pos:end="289:5">{<block_content pos:start="283:9" pos:end="287:35">

        <expr_stmt pos:start="283:9" pos:end="283:70"><expr pos:start="283:9" pos:end="283:69"><call pos:start="283:9" pos:end="283:69"><name pos:start="283:9" pos:end="283:14">av_log</name><argument_list pos:start="283:15" pos:end="283:69">(<argument pos:start="283:16" pos:end="283:20"><expr pos:start="283:16" pos:end="283:20"><name pos:start="283:16" pos:end="283:20">avctx</name></expr></argument>, <argument pos:start="283:23" pos:end="283:34"><expr pos:start="283:23" pos:end="283:34"><name pos:start="283:23" pos:end="283:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:37" pos:end="283:68"><expr pos:start="283:37" pos:end="283:68"><literal type="string" pos:start="283:37" pos:end="283:68">"Cannot open libx265 encoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:36"><expr pos:start="285:9" pos:end="285:35"><call pos:start="285:9" pos:end="285:35"><name pos:start="285:9" pos:end="285:28">libx265_encode_close</name><argument_list pos:start="285:29" pos:end="285:35">(<argument pos:start="285:30" pos:end="285:34"><expr pos:start="285:30" pos:end="285:34"><name pos:start="285:30" pos:end="285:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="287:9" pos:end="287:35">return <expr pos:start="287:16" pos:end="287:34"><name pos:start="287:16" pos:end="287:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="293:5" pos:end="333:5"><if pos:start="293:5" pos:end="333:5">if <condition pos:start="293:8" pos:end="293:48">(<expr pos:start="293:9" pos:end="293:47"><name pos:start="293:9" pos:end="293:20"><name pos:start="293:9" pos:end="293:13">avctx</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:20">flags</name></name> <operator pos:start="293:22" pos:end="293:22">&amp;</operator> <name pos:start="293:24" pos:end="293:47">CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block pos:start="293:50" pos:end="333:5">{<block_content pos:start="295:9" pos:end="331:72">

        <decl_stmt pos:start="295:9" pos:end="295:22"><decl pos:start="295:9" pos:end="295:21"><type pos:start="295:9" pos:end="295:18"><name pos:start="295:9" pos:end="295:16">x265_nal</name> <modifier pos:start="295:18" pos:end="295:18">*</modifier></type><name pos:start="295:19" pos:end="295:21">nal</name></decl>;</decl_stmt>

        <decl_stmt pos:start="297:9" pos:end="297:17"><decl pos:start="297:9" pos:end="297:16"><type pos:start="297:9" pos:end="297:11"><name pos:start="297:9" pos:end="297:11">int</name></type> <name pos:start="297:13" pos:end="297:16">nnal</name></decl>;</decl_stmt>



        <expr_stmt pos:start="301:9" pos:end="301:85"><expr pos:start="301:9" pos:end="301:84"><name pos:start="301:9" pos:end="301:29"><name pos:start="301:9" pos:end="301:13">avctx</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:29">extradata_size</name></name> <operator pos:start="301:31" pos:end="301:31">=</operator> <call pos:start="301:33" pos:end="301:84"><name pos:start="301:33" pos:end="301:57"><name pos:start="301:33" pos:end="301:35">ctx</name><operator pos:start="301:36" pos:end="301:37">-&gt;</operator><name pos:start="301:38" pos:end="301:40">api</name><operator pos:start="301:41" pos:end="301:42">-&gt;</operator><name pos:start="301:43" pos:end="301:57">encoder_headers</name></name><argument_list pos:start="301:58" pos:end="301:84">(<argument pos:start="301:59" pos:end="301:70"><expr pos:start="301:59" pos:end="301:70"><name pos:start="301:59" pos:end="301:70"><name pos:start="301:59" pos:end="301:61">ctx</name><operator pos:start="301:62" pos:end="301:63">-&gt;</operator><name pos:start="301:64" pos:end="301:70">encoder</name></name></expr></argument>, <argument pos:start="301:73" pos:end="301:76"><expr pos:start="301:73" pos:end="301:76"><operator pos:start="301:73" pos:end="301:73">&amp;</operator><name pos:start="301:74" pos:end="301:76">nal</name></expr></argument>, <argument pos:start="301:79" pos:end="301:83"><expr pos:start="301:79" pos:end="301:83"><operator pos:start="301:79" pos:end="301:79">&amp;</operator><name pos:start="301:80" pos:end="301:83">nnal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="303:9" pos:end="311:9"><if pos:start="303:9" pos:end="311:9">if <condition pos:start="303:12" pos:end="303:39">(<expr pos:start="303:13" pos:end="303:38"><name pos:start="303:13" pos:end="303:33"><name pos:start="303:13" pos:end="303:17">avctx</name><operator pos:start="303:18" pos:end="303:19">-&gt;</operator><name pos:start="303:20" pos:end="303:33">extradata_size</name></name> <operator pos:start="303:35" pos:end="303:36">&lt;=</operator> <literal type="number" pos:start="303:38" pos:end="303:38">0</literal></expr>)</condition> <block pos:start="303:41" pos:end="311:9">{<block_content pos:start="305:13" pos:end="309:39">

            <expr_stmt pos:start="305:13" pos:end="305:68"><expr pos:start="305:13" pos:end="305:67"><call pos:start="305:13" pos:end="305:67"><name pos:start="305:13" pos:end="305:18">av_log</name><argument_list pos:start="305:19" pos:end="305:67">(<argument pos:start="305:20" pos:end="305:24"><expr pos:start="305:20" pos:end="305:24"><name pos:start="305:20" pos:end="305:24">avctx</name></expr></argument>, <argument pos:start="305:27" pos:end="305:38"><expr pos:start="305:27" pos:end="305:38"><name pos:start="305:27" pos:end="305:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="305:41" pos:end="305:66"><expr pos:start="305:41" pos:end="305:66"><literal type="string" pos:start="305:41" pos:end="305:66">"Cannot encode headers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:40"><expr pos:start="307:13" pos:end="307:39"><call pos:start="307:13" pos:end="307:39"><name pos:start="307:13" pos:end="307:32">libx265_encode_close</name><argument_list pos:start="307:33" pos:end="307:39">(<argument pos:start="307:34" pos:end="307:38"><expr pos:start="307:34" pos:end="307:38"><name pos:start="307:34" pos:end="307:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="309:13" pos:end="309:39">return <expr pos:start="309:20" pos:end="309:38"><name pos:start="309:20" pos:end="309:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:91"><expr pos:start="315:9" pos:end="315:90"><name pos:start="315:9" pos:end="315:24"><name pos:start="315:9" pos:end="315:13">avctx</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:24">extradata</name></name> <operator pos:start="315:26" pos:end="315:26">=</operator> <call pos:start="315:28" pos:end="315:90"><name pos:start="315:28" pos:end="315:36">av_malloc</name><argument_list pos:start="315:37" pos:end="315:90">(<argument pos:start="315:38" pos:end="315:89"><expr pos:start="315:38" pos:end="315:89"><name pos:start="315:38" pos:end="315:58"><name pos:start="315:38" pos:end="315:42">avctx</name><operator pos:start="315:43" pos:end="315:44">-&gt;</operator><name pos:start="315:45" pos:end="315:58">extradata_size</name></name> <operator pos:start="315:60" pos:end="315:60">+</operator> <name pos:start="315:62" pos:end="315:89">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="327:9"><if pos:start="317:9" pos:end="327:9">if <condition pos:start="317:12" pos:end="317:30">(<expr pos:start="317:13" pos:end="317:29"><operator pos:start="317:13" pos:end="317:13">!</operator><name pos:start="317:14" pos:end="317:29"><name pos:start="317:14" pos:end="317:18">avctx</name><operator pos:start="317:19" pos:end="317:20">-&gt;</operator><name pos:start="317:21" pos:end="317:29">extradata</name></name></expr>)</condition> <block pos:start="317:32" pos:end="327:9">{<block_content pos:start="319:13" pos:end="325:35">

            <expr_stmt pos:start="319:13" pos:end="321:87"><expr pos:start="319:13" pos:end="321:86"><call pos:start="319:13" pos:end="321:86"><name pos:start="319:13" pos:end="319:18">av_log</name><argument_list pos:start="319:19" pos:end="321:86">(<argument pos:start="319:20" pos:end="319:24"><expr pos:start="319:20" pos:end="319:24"><name pos:start="319:20" pos:end="319:24">avctx</name></expr></argument>, <argument pos:start="319:27" pos:end="319:38"><expr pos:start="319:27" pos:end="319:38"><name pos:start="319:27" pos:end="319:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="321:20" pos:end="321:62"><expr pos:start="321:20" pos:end="321:62"><literal type="string" pos:start="321:20" pos:end="321:62">"Cannot allocate HEVC header of size %d.\n"</literal></expr></argument>, <argument pos:start="321:65" pos:end="321:85"><expr pos:start="321:65" pos:end="321:85"><name pos:start="321:65" pos:end="321:85"><name pos:start="321:65" pos:end="321:69">avctx</name><operator pos:start="321:70" pos:end="321:71">-&gt;</operator><name pos:start="321:72" pos:end="321:85">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:40"><expr pos:start="323:13" pos:end="323:39"><call pos:start="323:13" pos:end="323:39"><name pos:start="323:13" pos:end="323:32">libx265_encode_close</name><argument_list pos:start="323:33" pos:end="323:39">(<argument pos:start="323:34" pos:end="323:38"><expr pos:start="323:34" pos:end="323:38"><name pos:start="323:34" pos:end="323:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="325:13" pos:end="325:35">return <expr pos:start="325:20" pos:end="325:34"><call pos:start="325:20" pos:end="325:34"><name pos:start="325:20" pos:end="325:26">AVERROR</name><argument_list pos:start="325:27" pos:end="325:34">(<argument pos:start="325:28" pos:end="325:33"><expr pos:start="325:28" pos:end="325:33"><name pos:start="325:28" pos:end="325:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="331:9" pos:end="331:72"><expr pos:start="331:9" pos:end="331:71"><call pos:start="331:9" pos:end="331:71"><name pos:start="331:9" pos:end="331:14">memcpy</name><argument_list pos:start="331:15" pos:end="331:71">(<argument pos:start="331:16" pos:end="331:31"><expr pos:start="331:16" pos:end="331:31"><name pos:start="331:16" pos:end="331:31"><name pos:start="331:16" pos:end="331:20">avctx</name><operator pos:start="331:21" pos:end="331:22">-&gt;</operator><name pos:start="331:23" pos:end="331:31">extradata</name></name></expr></argument>, <argument pos:start="331:34" pos:end="331:47"><expr pos:start="331:34" pos:end="331:47"><name pos:start="331:34" pos:end="331:39"><name pos:start="331:34" pos:end="331:36">nal</name><index pos:start="331:37" pos:end="331:39">[<expr pos:start="331:38" pos:end="331:38"><literal type="number" pos:start="331:38" pos:end="331:38">0</literal></expr>]</index></name><operator pos:start="331:40" pos:end="331:40">.</operator><name pos:start="331:41" pos:end="331:47">payload</name></expr></argument>, <argument pos:start="331:50" pos:end="331:70"><expr pos:start="331:50" pos:end="331:70"><name pos:start="331:50" pos:end="331:70"><name pos:start="331:50" pos:end="331:54">avctx</name><operator pos:start="331:55" pos:end="331:56">-&gt;</operator><name pos:start="331:57" pos:end="331:70">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="337:5" pos:end="337:13">return <expr pos:start="337:12" pos:end="337:12"><literal type="number" pos:start="337:12" pos:end="337:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
