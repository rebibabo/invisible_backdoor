<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2193.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">pc_dimm_check_memdev_is_busy</name><parameter_list pos:start="1:41" pos:end="3:64">(<parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:47">Object</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">obj</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">name</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:44">Object</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">val</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:63"><decl pos:start="3:52" pos:end="3:63"><type pos:start="3:52" pos:end="3:63"><name pos:start="3:52" pos:end="3:56">Error</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier><modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:63">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:37">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:73"><expr pos:start="13:5" pos:end="13:72"><name pos:start="13:5" pos:end="13:6">mr</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:72"><name pos:start="13:10" pos:end="13:39">host_memory_backend_get_memory</name><argument_list pos:start="13:40" pos:end="13:72">(<argument pos:start="13:41" pos:end="13:59"><expr pos:start="13:41" pos:end="13:59"><call pos:start="13:41" pos:end="13:59"><name pos:start="13:41" pos:end="13:54">MEMORY_BACKEND</name><argument_list pos:start="13:55" pos:end="13:59">(<argument pos:start="13:56" pos:end="13:58"><expr pos:start="13:56" pos:end="13:58"><name pos:start="13:56" pos:end="13:58">val</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="13:62" pos:end="13:71"><expr pos:start="13:62" pos:end="13:71"><operator pos:start="13:62" pos:end="13:62">&amp;</operator><name pos:start="13:63" pos:end="13:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:17">local_err</name></expr>)</condition> <block pos:start="15:20" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:17">

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:31">memory_region_is_mapped</name><argument_list pos:start="21:32" pos:end="21:35">(<argument pos:start="21:33" pos:end="21:34"><expr pos:start="21:33" pos:end="21:34"><name pos:start="21:33" pos:end="21:34">mr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:38" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:21">

        <decl_stmt pos:start="23:9" pos:end="23:62"><decl pos:start="23:9" pos:end="23:61"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">char</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:18">path</name> <init pos:start="23:20" pos:end="23:61">= <expr pos:start="23:22" pos:end="23:61"><call pos:start="23:22" pos:end="23:61"><name pos:start="23:22" pos:end="23:56">object_get_canonical_path_component</name><argument_list pos:start="23:57" pos:end="23:61">(<argument pos:start="23:58" pos:end="23:60"><expr pos:start="23:58" pos:end="23:60"><name pos:start="23:58" pos:end="23:60">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:74"><expr pos:start="25:9" pos:end="25:73"><call pos:start="25:9" pos:end="25:73"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="25:73">(<argument pos:start="25:20" pos:end="25:29"><expr pos:start="25:20" pos:end="25:29"><operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:29">local_err</name></expr></argument>, <argument pos:start="25:32" pos:end="25:66"><expr pos:start="25:32" pos:end="25:66"><literal type="string" pos:start="25:32" pos:end="25:66">"can't use already busy memdev: %s"</literal></expr></argument>, <argument pos:start="25:69" pos:end="25:72"><expr pos:start="25:69" pos:end="25:72"><name pos:start="25:69" pos:end="25:72">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><call pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:14">g_free</name><argument_list pos:start="27:15" pos:end="27:20">(<argument pos:start="27:16" pos:end="27:19"><expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:76">

        <expr_stmt pos:start="31:9" pos:end="31:76"><expr pos:start="31:9" pos:end="31:75"><call pos:start="31:9" pos:end="31:75"><name pos:start="31:9" pos:end="31:47">qdev_prop_allow_set_link_before_realize</name><argument_list pos:start="31:48" pos:end="31:75">(<argument pos:start="31:49" pos:end="31:51"><expr pos:start="31:49" pos:end="31:51"><name pos:start="31:49" pos:end="31:51">obj</name></expr></argument>, <argument pos:start="31:54" pos:end="31:57"><expr pos:start="31:54" pos:end="31:57"><name pos:start="31:54" pos:end="31:57">name</name></expr></argument>, <argument pos:start="31:60" pos:end="31:62"><expr pos:start="31:60" pos:end="31:62"><name pos:start="31:60" pos:end="31:62">val</name></expr></argument>, <argument pos:start="31:65" pos:end="31:74"><expr pos:start="31:65" pos:end="31:74"><operator pos:start="31:65" pos:end="31:65">&amp;</operator><name pos:start="31:66" pos:end="31:74">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="37:1" pos:end="37:4"><name pos:start="37:1" pos:end="37:3">out</name>:</label>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><call pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:19">error_propagate</name><argument_list pos:start="39:20" pos:end="39:36">(<argument pos:start="39:21" pos:end="39:24"><expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">errp</name></expr></argument>, <argument pos:start="39:27" pos:end="39:35"><expr pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
