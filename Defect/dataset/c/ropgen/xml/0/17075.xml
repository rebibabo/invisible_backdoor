<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17075.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">ioinst_handle_chsc</name><parameter_list pos:start="1:24" pos:end="1:51">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:50">ipb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">ChscReq</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">ChscResp</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:20">command</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">CPUS390XState</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:22">env</name> <init pos:start="17:24" pos:end="17:34">= <expr pos:start="17:26" pos:end="17:34"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:34"><name pos:start="17:27" pos:end="17:29">cpu</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:15">buf</name><index pos:start="19:16" pos:end="19:33">[<expr pos:start="19:17" pos:end="19:32"><name pos:start="19:17" pos:end="19:32">TARGET_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:16">trace_ioinst</name><argument_list pos:start="23:17" pos:end="23:24">(<argument pos:start="23:18" pos:end="23:23"><expr pos:start="23:18" pos:end="23:23"><literal type="string" pos:start="23:18" pos:end="23:23">"chsc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:7">reg</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <operator pos:start="25:11" pos:end="25:11">(</operator><name pos:start="25:12" pos:end="25:14">ipb</name> <operator pos:start="25:16" pos:end="25:17">&gt;&gt;</operator> <literal type="number" pos:start="25:19" pos:end="25:20">20</literal><operator pos:start="25:21" pos:end="25:21">)</operator> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <literal type="number" pos:start="25:25" pos:end="25:29">0x00f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:8">addr</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:25"><name pos:start="27:12" pos:end="27:14">env</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">regs</name><index pos:start="27:21" pos:end="27:25">[<expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">reg</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="29:24">/* Page boundary? */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:21">(<expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:12">addr</name> <operator pos:start="31:14" pos:end="31:14">&amp;</operator> <literal type="number" pos:start="31:16" pos:end="31:20">0xfff</literal></expr>)</condition> <block pos:start="31:23" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><call pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:25">program_interrupt</name><argument_list pos:start="33:26" pos:end="33:52">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">env</name></expr></argument>, <argument pos:start="33:32" pos:end="33:48"><expr pos:start="33:32" pos:end="33:48"><name pos:start="33:32" pos:end="33:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="33:51" pos:end="33:51"><expr pos:start="33:51" pos:end="33:51"><literal type="number" pos:start="33:51" pos:end="33:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="47:7">/*

     * Reading sizeof(ChscReq) bytes is currently enough for all of our

     * present CHSC sub-handlers ... if we ever need more, we should take

     * care of req-&gt;len here first.

     */</comment>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:69">(<expr pos:start="49:9" pos:end="49:68"><call pos:start="49:9" pos:end="49:68"><name pos:start="49:9" pos:end="49:30">s390_cpu_virt_mem_read</name><argument_list pos:start="49:31" pos:end="49:68">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">cpu</name></expr></argument>, <argument pos:start="49:37" pos:end="49:40"><expr pos:start="49:37" pos:end="49:40"><name pos:start="49:37" pos:end="49:40">addr</name></expr></argument>, <argument pos:start="49:43" pos:end="49:45"><expr pos:start="49:43" pos:end="49:45"><name pos:start="49:43" pos:end="49:45">reg</name></expr></argument>, <argument pos:start="49:48" pos:end="49:50"><expr pos:start="49:48" pos:end="49:50"><name pos:start="49:48" pos:end="49:50">buf</name></expr></argument>, <argument pos:start="49:53" pos:end="49:67"><expr pos:start="49:53" pos:end="49:67"><sizeof pos:start="49:53" pos:end="49:67">sizeof<argument_list pos:start="49:59" pos:end="49:67">(<argument pos:start="49:60" pos:end="49:66"><expr pos:start="49:60" pos:end="49:66"><name pos:start="49:60" pos:end="49:66">ChscReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:71" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:15">

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:7">req</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <operator pos:start="55:11" pos:end="55:11">(</operator><name pos:start="55:12" pos:end="55:18">ChscReq</name> <operator pos:start="55:20" pos:end="55:20">*</operator><operator pos:start="55:21" pos:end="55:21">)</operator><name pos:start="55:22" pos:end="55:24">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:7">len</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:31"><name pos:start="57:11" pos:end="57:21">be16_to_cpu</name><argument_list pos:start="57:22" pos:end="57:31">(<argument pos:start="57:23" pos:end="57:30"><expr pos:start="57:23" pos:end="57:30"><name pos:start="57:23" pos:end="57:30"><name pos:start="57:23" pos:end="57:25">req</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:30">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:29">/* Length field valid? */</comment>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:48">(<expr pos:start="61:9" pos:end="61:47"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:12">len</name> <operator pos:start="61:14" pos:end="61:14">&lt;</operator> <literal type="number" pos:start="61:16" pos:end="61:17">16</literal><operator pos:start="61:18" pos:end="61:18">)</operator> <operator pos:start="61:20" pos:end="61:21">||</operator> <operator pos:start="61:23" pos:end="61:23">(</operator><name pos:start="61:24" pos:end="61:26">len</name> <operator pos:start="61:28" pos:end="61:28">&gt;</operator> <literal type="number" pos:start="61:30" pos:end="61:33">4088</literal><operator pos:start="61:34" pos:end="61:34">)</operator> <operator pos:start="61:36" pos:end="61:37">||</operator> <operator pos:start="61:39" pos:end="61:39">(</operator><name pos:start="61:40" pos:end="61:42">len</name> <operator pos:start="61:44" pos:end="61:44">&amp;</operator> <literal type="number" pos:start="61:46" pos:end="61:46">7</literal><operator pos:start="61:47" pos:end="61:47">)</operator></expr>)</condition> <block pos:start="61:50" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:15">

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:25">program_interrupt</name><argument_list pos:start="63:26" pos:end="63:46">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">env</name></expr></argument>, <argument pos:start="63:32" pos:end="63:42"><expr pos:start="63:32" pos:end="63:42"><name pos:start="63:32" pos:end="63:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="63:45" pos:end="63:45"><expr pos:start="63:45" pos:end="63:45"><literal type="number" pos:start="63:45" pos:end="63:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:57"><expr pos:start="69:5" pos:end="69:56"><call pos:start="69:5" pos:end="69:56"><name pos:start="69:5" pos:end="69:10">memset</name><argument_list pos:start="69:11" pos:end="69:56">(<argument pos:start="69:12" pos:end="69:28"><expr pos:start="69:12" pos:end="69:28"><operator pos:start="69:12" pos:end="69:12">(</operator><name pos:start="69:13" pos:end="69:16">char</name> <operator pos:start="69:18" pos:end="69:18">*</operator><operator pos:start="69:19" pos:end="69:19">)</operator><name pos:start="69:20" pos:end="69:22">req</name> <operator pos:start="69:24" pos:end="69:24">+</operator> <name pos:start="69:26" pos:end="69:28">len</name></expr></argument>, <argument pos:start="69:31" pos:end="69:31"><expr pos:start="69:31" pos:end="69:31"><literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr></argument>, <argument pos:start="69:34" pos:end="69:55"><expr pos:start="69:34" pos:end="69:55"><name pos:start="69:34" pos:end="69:49">TARGET_PAGE_SIZE</name> <operator pos:start="69:51" pos:end="69:51">-</operator> <name pos:start="69:53" pos:end="69:55">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:38"><expr pos:start="71:5" pos:end="71:37"><name pos:start="71:5" pos:end="71:7">res</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <operator pos:start="71:11" pos:end="71:11">(</operator><name pos:start="71:12" pos:end="71:15">void</name> <operator pos:start="71:17" pos:end="71:17">*</operator><operator pos:start="71:18" pos:end="71:18">)</operator><operator pos:start="71:19" pos:end="71:19">(</operator><operator pos:start="71:20" pos:end="71:20">(</operator><name pos:start="71:21" pos:end="71:24">char</name> <operator pos:start="71:26" pos:end="71:26">*</operator><operator pos:start="71:27" pos:end="71:27">)</operator><name pos:start="71:28" pos:end="71:30">req</name> <operator pos:start="71:32" pos:end="71:32">+</operator> <name pos:start="71:34" pos:end="71:36">len</name><operator pos:start="71:37" pos:end="71:37">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:40"><expr pos:start="73:5" pos:end="73:39"><name pos:start="73:5" pos:end="73:11">command</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:39"><name pos:start="73:15" pos:end="73:25">be16_to_cpu</name><argument_list pos:start="73:26" pos:end="73:39">(<argument pos:start="73:27" pos:end="73:38"><expr pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:29">req</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:38">command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:40"><expr pos:start="75:5" pos:end="75:39"><call pos:start="75:5" pos:end="75:39"><name pos:start="75:5" pos:end="75:25">trace_ioinst_chsc_cmd</name><argument_list pos:start="75:26" pos:end="75:39">(<argument pos:start="75:27" pos:end="75:33"><expr pos:start="75:27" pos:end="75:33"><name pos:start="75:27" pos:end="75:33">command</name></expr></argument>, <argument pos:start="75:36" pos:end="75:38"><expr pos:start="75:36" pos:end="75:38"><name pos:start="75:36" pos:end="75:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="77:5" pos:end="109:5">switch <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:19">command</name></expr>)</condition> <block pos:start="77:22" pos:end="109:5">{<block_content pos:start="79:5" pos:end="107:14">

    <case pos:start="79:5" pos:end="79:19">case <expr pos:start="79:10" pos:end="79:18"><name pos:start="79:10" pos:end="79:18">CHSC_SCSC</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:42"><expr pos:start="81:9" pos:end="81:41"><call pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:31">ioinst_handle_chsc_scsc</name><argument_list pos:start="81:32" pos:end="81:41">(<argument pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:35">req</name></expr></argument>, <argument pos:start="81:38" pos:end="81:40"><expr pos:start="81:38" pos:end="81:40"><name pos:start="81:38" pos:end="81:40">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:19">case <expr pos:start="85:10" pos:end="85:18"><name pos:start="85:10" pos:end="85:18">CHSC_SCPD</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:42"><expr pos:start="87:9" pos:end="87:41"><call pos:start="87:9" pos:end="87:41"><name pos:start="87:9" pos:end="87:31">ioinst_handle_chsc_scpd</name><argument_list pos:start="87:32" pos:end="87:41">(<argument pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><name pos:start="87:33" pos:end="87:35">req</name></expr></argument>, <argument pos:start="87:38" pos:end="87:40"><expr pos:start="87:38" pos:end="87:40"><name pos:start="87:38" pos:end="87:40">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:18">case <expr pos:start="91:10" pos:end="91:17"><name pos:start="91:10" pos:end="91:17">CHSC_SDA</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:41"><expr pos:start="93:9" pos:end="93:40"><call pos:start="93:9" pos:end="93:40"><name pos:start="93:9" pos:end="93:30">ioinst_handle_chsc_sda</name><argument_list pos:start="93:31" pos:end="93:40">(<argument pos:start="93:32" pos:end="93:34"><expr pos:start="93:32" pos:end="93:34"><name pos:start="93:32" pos:end="93:34">req</name></expr></argument>, <argument pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:39">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:18">case <expr pos:start="97:10" pos:end="97:17"><name pos:start="97:10" pos:end="97:17">CHSC_SEI</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><call pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:30">ioinst_handle_chsc_sei</name><argument_list pos:start="99:31" pos:end="99:40">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:34">req</name></expr></argument>, <argument pos:start="99:37" pos:end="99:39"><expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:39">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <default pos:start="103:5" pos:end="103:12">default:</default>

        <expr_stmt pos:start="105:9" pos:end="105:46"><expr pos:start="105:9" pos:end="105:45"><call pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:40">ioinst_handle_chsc_unimplemented</name><argument_list pos:start="105:41" pos:end="105:45">(<argument pos:start="105:42" pos:end="105:44"><expr pos:start="105:42" pos:end="105:44"><name pos:start="105:42" pos:end="105:44">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="115:56">(<expr pos:start="113:9" pos:end="115:55"><operator pos:start="113:9" pos:end="113:9">!</operator><call pos:start="113:10" pos:end="115:55"><name pos:start="113:10" pos:end="113:32">s390_cpu_virt_mem_write</name><argument_list pos:start="113:33" pos:end="115:55">(<argument pos:start="113:34" pos:end="113:36"><expr pos:start="113:34" pos:end="113:36"><name pos:start="113:34" pos:end="113:36">cpu</name></expr></argument>, <argument pos:start="113:39" pos:end="113:48"><expr pos:start="113:39" pos:end="113:48"><name pos:start="113:39" pos:end="113:42">addr</name> <operator pos:start="113:44" pos:end="113:44">+</operator> <name pos:start="113:46" pos:end="113:48">len</name></expr></argument>, <argument pos:start="113:51" pos:end="113:53"><expr pos:start="113:51" pos:end="113:53"><name pos:start="113:51" pos:end="113:53">reg</name></expr></argument>, <argument pos:start="113:56" pos:end="113:58"><expr pos:start="113:56" pos:end="113:58"><name pos:start="113:56" pos:end="113:58">res</name></expr></argument>,

                                 <argument pos:start="115:34" pos:end="115:54"><expr pos:start="115:34" pos:end="115:54"><call pos:start="115:34" pos:end="115:54"><name pos:start="115:34" pos:end="115:44">be16_to_cpu</name><argument_list pos:start="115:45" pos:end="115:54">(<argument pos:start="115:46" pos:end="115:53"><expr pos:start="115:46" pos:end="115:53"><name pos:start="115:46" pos:end="115:53"><name pos:start="115:46" pos:end="115:48">res</name><operator pos:start="115:49" pos:end="115:50">-&gt;</operator><name pos:start="115:51" pos:end="115:53">len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:58" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:22">

        <expr_stmt pos:start="117:9" pos:end="117:22"><expr pos:start="117:9" pos:end="117:21"><call pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:13">setcc</name><argument_list pos:start="117:14" pos:end="117:21">(<argument pos:start="117:15" pos:end="117:17"><expr pos:start="117:15" pos:end="117:17"><name pos:start="117:15" pos:end="117:17">cpu</name></expr></argument>, <argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><literal type="number" pos:start="117:20" pos:end="117:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="117:27" pos:end="117:58">/* Command execution complete */</comment>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
