<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16394.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">dmg_read_chunk</name><parameter_list pos:start="1:33" pos:end="1:75">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:74"><decl pos:start="1:56" pos:end="1:74"><type pos:start="1:56" pos:end="1:74"><name pos:start="1:56" pos:end="1:63">uint64_t</name></type> <name pos:start="1:65" pos:end="1:74">sector_num</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVDMGState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="161:5"><if pos:start="9:5" pos:end="161:5">if <condition pos:start="9:8" pos:end="9:61">(<expr pos:start="9:9" pos:end="9:60"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:60"><name pos:start="9:10" pos:end="9:27">is_sector_in_chunk</name><argument_list pos:start="9:28" pos:end="9:60">(<argument pos:start="9:29" pos:end="9:29"><expr pos:start="9:29" pos:end="9:29"><name pos:start="9:29" pos:end="9:29">s</name></expr></argument>, <argument pos:start="9:32" pos:end="9:47"><expr pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:32">s</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:47">current_chunk</name></name></expr></argument>, <argument pos:start="9:50" pos:end="9:59"><expr pos:start="9:50" pos:end="9:59"><name pos:start="9:50" pos:end="9:59">sector_num</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:63" pos:end="161:5">{<block_content pos:start="11:9" pos:end="159:33">

        <decl_stmt pos:start="11:9" pos:end="11:16"><decl pos:start="11:9" pos:end="11:15"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="16:0"><decl pos:start="13:9" pos:end="13:52"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:22">chunk</name> <init pos:start="13:24" pos:end="13:52">= <expr pos:start="13:26" pos:end="13:52"><call pos:start="13:26" pos:end="13:52"><name pos:start="13:26" pos:end="13:37">search_chunk</name><argument_list pos:start="13:38" pos:end="13:52">(<argument pos:start="13:39" pos:end="13:39"><expr pos:start="13:39" pos:end="13:39"><name pos:start="13:39" pos:end="13:39">s</name></expr></argument>, <argument pos:start="13:42" pos:end="13:51"><expr pos:start="13:42" pos:end="13:51"><name pos:start="13:42" pos:end="13:51">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:19">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:19">CONFIG_BZIP2</name></cpp:ifdef>

        <decl_stmt pos:start="17:9" pos:end="20:0"><decl pos:start="17:9" pos:end="17:26"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint64_t</name></type> <name pos:start="17:18" pos:end="17:26">total_out</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:33">(<expr pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:17">chunk</name> <operator pos:start="23:19" pos:end="23:20">&gt;=</operator> <name pos:start="23:22" pos:end="23:32"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:32">n_chunks</name></name></expr>)</condition> <block pos:start="23:35" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:22">

            <return pos:start="25:13" pos:end="25:22">return <expr pos:start="25:20" pos:end="25:21"><operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:24">current_chunk</name></name> <operator pos:start="31:26" pos:end="31:26">=</operator> <name pos:start="31:28" pos:end="31:38"><name pos:start="31:28" pos:end="31:28">s</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:38">n_chunks</name></name></expr>;</expr_stmt>

        <switch pos:start="33:9" pos:end="157:9">switch <condition pos:start="33:16" pos:end="33:32">(<expr pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:17">s</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:24">types</name><index pos:start="33:25" pos:end="33:31">[<expr pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:30">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="33:34" pos:end="157:9">{<block_content pos:start="35:9" pos:end="155:18"> <comment type="block" pos:start="33:36" pos:end="33:57">/* block entry type */</comment>

        <case pos:start="35:9" pos:end="35:24">case <expr pos:start="35:14" pos:end="35:23"><literal type="number" pos:start="35:14" pos:end="35:23">0x80000005</literal></expr>:</case> <block pos:start="35:26" pos:end="82:0">{<block_content pos:start="41:13" pos:end="79:18"> <comment type="block" pos:start="35:28" pos:end="35:48">/* zlib compressed */</comment>

            <comment type="block" pos:start="37:13" pos:end="39:27">/* we need to buffer, because only the chunk as whole can be

             * inflated. */</comment>

            <expr_stmt pos:start="41:13" pos:end="43:69"><expr pos:start="41:13" pos:end="43:68"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="43:68"><name pos:start="41:19" pos:end="41:28">bdrv_pread</name><argument_list pos:start="41:29" pos:end="43:68">(<argument pos:start="41:30" pos:end="41:37"><expr pos:start="41:30" pos:end="41:37"><name pos:start="41:30" pos:end="41:37"><name pos:start="41:30" pos:end="41:31">bs</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:37">file</name></name></expr></argument>, <argument pos:start="41:40" pos:end="41:56"><expr pos:start="41:40" pos:end="41:56"><name pos:start="41:40" pos:end="41:56"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:49">offsets</name><index pos:start="41:50" pos:end="41:56">[<expr pos:start="41:51" pos:end="41:55"><name pos:start="41:51" pos:end="41:55">chunk</name></expr>]</index></name></expr></argument>,

                             <argument pos:start="43:30" pos:end="43:48"><expr pos:start="43:30" pos:end="43:48"><name pos:start="43:30" pos:end="43:48"><name pos:start="43:30" pos:end="43:30">s</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:48">compressed_chunk</name></name></expr></argument>, <argument pos:start="43:51" pos:end="43:67"><expr pos:start="43:51" pos:end="43:67"><name pos:start="43:51" pos:end="43:67"><name pos:start="43:51" pos:end="43:51">s</name><operator pos:start="43:52" pos:end="43:53">-&gt;</operator><name pos:start="43:54" pos:end="43:60">lengths</name><index pos:start="43:61" pos:end="43:67">[<expr pos:start="43:62" pos:end="43:66"><name pos:start="43:62" pos:end="43:66">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="49:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:41">(<expr pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:22">!=</operator> <name pos:start="45:24" pos:end="45:40"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:33">lengths</name><index pos:start="45:34" pos:end="45:40">[<expr pos:start="45:35" pos:end="45:39"><name pos:start="45:35" pos:end="45:39">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="45:43" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:26">

                <return pos:start="47:17" pos:end="47:26">return <expr pos:start="47:24" pos:end="47:25"><operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:53"><expr pos:start="53:13" pos:end="53:52"><name pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:22">zstream</name><operator pos:start="53:23" pos:end="53:23">.</operator><name pos:start="53:24" pos:end="53:30">next_in</name></name> <operator pos:start="53:32" pos:end="53:32">=</operator> <name pos:start="53:34" pos:end="53:52"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:52">compressed_chunk</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:52"><expr pos:start="55:13" pos:end="55:51"><name pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:22">zstream</name><operator pos:start="55:23" pos:end="55:23">.</operator><name pos:start="55:24" pos:end="55:31">avail_in</name></name> <operator pos:start="55:33" pos:end="55:33">=</operator> <name pos:start="55:35" pos:end="55:51"><name pos:start="55:35" pos:end="55:35">s</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:44">lengths</name><index pos:start="55:45" pos:end="55:51">[<expr pos:start="55:46" pos:end="55:50"><name pos:start="55:46" pos:end="55:50">chunk</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:56"><expr pos:start="57:13" pos:end="57:55"><name pos:start="57:13" pos:end="57:31"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:22">zstream</name><operator pos:start="57:23" pos:end="57:23">.</operator><name pos:start="57:24" pos:end="57:31">next_out</name></name> <operator pos:start="57:33" pos:end="57:33">=</operator> <name pos:start="57:35" pos:end="57:55"><name pos:start="57:35" pos:end="57:35">s</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:55">uncompressed_chunk</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:64"><expr pos:start="59:13" pos:end="59:63"><name pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">zstream</name><operator pos:start="59:23" pos:end="59:23">.</operator><name pos:start="59:24" pos:end="59:32">avail_out</name></name> <operator pos:start="59:34" pos:end="59:34">=</operator> <literal type="number" pos:start="59:36" pos:end="59:38">512</literal> <operator pos:start="59:40" pos:end="59:40">*</operator> <name pos:start="59:42" pos:end="59:63"><name pos:start="59:42" pos:end="59:42">s</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:56">sectorcounts</name><index pos:start="59:57" pos:end="59:63">[<expr pos:start="59:58" pos:end="59:62"><name pos:start="59:58" pos:end="59:62">chunk</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:43"><name pos:start="61:19" pos:end="61:30">inflateReset</name><argument_list pos:start="61:31" pos:end="61:43">(<argument pos:start="61:32" pos:end="61:42"><expr pos:start="61:32" pos:end="61:42"><operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:42"><name pos:start="61:33" pos:end="61:33">s</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:42">zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="67:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:28">(<expr pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:22">!=</operator> <name pos:start="63:24" pos:end="63:27">Z_OK</name></expr>)</condition> <block pos:start="63:30" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:26">

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:49"><expr pos:start="69:13" pos:end="69:48"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:48"><name pos:start="69:19" pos:end="69:25">inflate</name><argument_list pos:start="69:26" pos:end="69:48">(<argument pos:start="69:27" pos:end="69:37"><expr pos:start="69:27" pos:end="69:37"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:37"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:37">zstream</name></name></expr></argument>, <argument pos:start="69:40" pos:end="69:47"><expr pos:start="69:40" pos:end="69:47"><name pos:start="69:40" pos:end="69:47">Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="73:69">(<expr pos:start="71:17" pos:end="73:68"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:22">!=</operator> <name pos:start="71:24" pos:end="71:35">Z_STREAM_END</name> <operator pos:start="71:37" pos:end="71:38">||</operator>

                <name pos:start="73:17" pos:end="73:36"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:26">zstream</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:36">total_out</name></name> <operator pos:start="73:38" pos:end="73:39">!=</operator> <literal type="number" pos:start="73:41" pos:end="73:43">512</literal> <operator pos:start="73:45" pos:end="73:45">*</operator> <name pos:start="73:47" pos:end="73:68"><name pos:start="73:47" pos:end="73:47">s</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:61">sectorcounts</name><index pos:start="73:62" pos:end="73:68">[<expr pos:start="73:63" pos:end="73:67"><name pos:start="73:63" pos:end="73:67">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="73:71" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:26">

                <return pos:start="75:17" pos:end="75:26">return <expr pos:start="75:24" pos:end="75:25"><operator pos:start="75:24" pos:end="75:24">-</operator><literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break> </block_content>}</block>

<cpp:ifdef pos:start="81:1" pos:end="81:19">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:19">CONFIG_BZIP2</name></cpp:ifdef>

        <case pos:start="83:9" pos:end="83:24">case <expr pos:start="83:14" pos:end="83:23"><literal type="number" pos:start="83:14" pos:end="83:23">0x80000006</literal></expr>:</case> <comment type="block" pos:start="83:26" pos:end="83:47">/* bzip2 compressed */</comment>

            <comment type="block" pos:start="85:13" pos:end="87:27">/* we need to buffer, because only the chunk as whole can be

             * inflated. */</comment>

            <expr_stmt pos:start="89:13" pos:end="91:69"><expr pos:start="89:13" pos:end="91:68"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="91:68"><name pos:start="89:19" pos:end="89:28">bdrv_pread</name><argument_list pos:start="89:29" pos:end="91:68">(<argument pos:start="89:30" pos:end="89:37"><expr pos:start="89:30" pos:end="89:37"><name pos:start="89:30" pos:end="89:37"><name pos:start="89:30" pos:end="89:31">bs</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:37">file</name></name></expr></argument>, <argument pos:start="89:40" pos:end="89:56"><expr pos:start="89:40" pos:end="89:56"><name pos:start="89:40" pos:end="89:56"><name pos:start="89:40" pos:end="89:40">s</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:49">offsets</name><index pos:start="89:50" pos:end="89:56">[<expr pos:start="89:51" pos:end="89:55"><name pos:start="89:51" pos:end="89:55">chunk</name></expr>]</index></name></expr></argument>,

                             <argument pos:start="91:30" pos:end="91:48"><expr pos:start="91:30" pos:end="91:48"><name pos:start="91:30" pos:end="91:48"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:48">compressed_chunk</name></name></expr></argument>, <argument pos:start="91:51" pos:end="91:67"><expr pos:start="91:51" pos:end="91:67"><name pos:start="91:51" pos:end="91:67"><name pos:start="91:51" pos:end="91:51">s</name><operator pos:start="91:52" pos:end="91:53">-&gt;</operator><name pos:start="91:54" pos:end="91:60">lengths</name><index pos:start="91:61" pos:end="91:67">[<expr pos:start="91:62" pos:end="91:66"><name pos:start="91:62" pos:end="91:66">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:41">(<expr pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:22">!=</operator> <name pos:start="93:24" pos:end="93:40"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:33">lengths</name><index pos:start="93:34" pos:end="93:40">[<expr pos:start="93:35" pos:end="93:39"><name pos:start="93:35" pos:end="93:39">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="93:43" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:26">

                <return pos:start="95:17" pos:end="95:26">return <expr pos:start="95:24" pos:end="95:25"><operator pos:start="95:24" pos:end="95:24">-</operator><literal type="number" pos:start="95:25" pos:end="95:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:59"><expr pos:start="101:13" pos:end="101:58"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:58"><name pos:start="101:19" pos:end="101:38">BZ2_bzDecompressInit</name><argument_list pos:start="101:39" pos:end="101:58">(<argument pos:start="101:40" pos:end="101:51"><expr pos:start="101:40" pos:end="101:51"><operator pos:start="101:40" pos:end="101:40">&amp;</operator><name pos:start="101:41" pos:end="101:51"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:51">bzstream</name></name></expr></argument>, <argument pos:start="101:54" pos:end="101:54"><expr pos:start="101:54" pos:end="101:54"><literal type="number" pos:start="101:54" pos:end="101:54">0</literal></expr></argument>, <argument pos:start="101:57" pos:end="101:57"><expr pos:start="101:57" pos:end="101:57"><literal type="number" pos:start="101:57" pos:end="101:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:29">(<expr pos:start="103:17" pos:end="103:28"><name pos:start="103:17" pos:end="103:19">ret</name> <operator pos:start="103:21" pos:end="103:22">!=</operator> <name pos:start="103:24" pos:end="103:28">BZ_OK</name></expr>)</condition> <block pos:start="103:31" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:26">

                <return pos:start="105:17" pos:end="105:26">return <expr pos:start="105:24" pos:end="105:25"><operator pos:start="105:24" pos:end="105:24">-</operator><literal type="number" pos:start="105:25" pos:end="105:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:62"><expr pos:start="109:13" pos:end="109:61"><name pos:start="109:13" pos:end="109:31"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:23">bzstream</name><operator pos:start="109:24" pos:end="109:24">.</operator><name pos:start="109:25" pos:end="109:31">next_in</name></name> <operator pos:start="109:33" pos:end="109:33">=</operator> <operator pos:start="109:35" pos:end="109:35">(</operator><name pos:start="109:36" pos:end="109:39">char</name> <operator pos:start="109:41" pos:end="109:41">*</operator><operator pos:start="109:42" pos:end="109:42">)</operator><name pos:start="109:43" pos:end="109:61"><name pos:start="109:43" pos:end="109:43">s</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:61">compressed_chunk</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:68"><expr pos:start="111:13" pos:end="111:67"><name pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:23">bzstream</name><operator pos:start="111:24" pos:end="111:24">.</operator><name pos:start="111:25" pos:end="111:32">avail_in</name></name> <operator pos:start="111:34" pos:end="111:34">=</operator> <operator pos:start="111:36" pos:end="111:36">(</operator><name pos:start="111:37" pos:end="111:44">unsigned</name> <name pos:start="111:46" pos:end="111:48">int</name><operator pos:start="111:49" pos:end="111:49">)</operator> <name pos:start="111:51" pos:end="111:67"><name pos:start="111:51" pos:end="111:51">s</name><operator pos:start="111:52" pos:end="111:53">-&gt;</operator><name pos:start="111:54" pos:end="111:60">lengths</name><index pos:start="111:61" pos:end="111:67">[<expr pos:start="111:62" pos:end="111:66"><name pos:start="111:62" pos:end="111:66">chunk</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:65"><expr pos:start="113:13" pos:end="113:64"><name pos:start="113:13" pos:end="113:32"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:23">bzstream</name><operator pos:start="113:24" pos:end="113:24">.</operator><name pos:start="113:25" pos:end="113:32">next_out</name></name> <operator pos:start="113:34" pos:end="113:34">=</operator> <operator pos:start="113:36" pos:end="113:36">(</operator><name pos:start="113:37" pos:end="113:40">char</name> <operator pos:start="113:42" pos:end="113:42">*</operator><operator pos:start="113:43" pos:end="113:43">)</operator><name pos:start="113:44" pos:end="113:64"><name pos:start="113:44" pos:end="113:44">s</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:64">uncompressed_chunk</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:80"><expr pos:start="115:13" pos:end="115:79"><name pos:start="115:13" pos:end="115:33"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:23">bzstream</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:33">avail_out</name></name> <operator pos:start="115:35" pos:end="115:35">=</operator> <operator pos:start="115:37" pos:end="115:37">(</operator><name pos:start="115:38" pos:end="115:45">unsigned</name> <name pos:start="115:47" pos:end="115:49">int</name><operator pos:start="115:50" pos:end="115:50">)</operator> <literal type="number" pos:start="115:52" pos:end="115:54">512</literal> <operator pos:start="115:56" pos:end="115:56">*</operator> <name pos:start="115:58" pos:end="115:79"><name pos:start="115:58" pos:end="115:58">s</name><operator pos:start="115:59" pos:end="115:60">-&gt;</operator><name pos:start="115:61" pos:end="115:72">sectorcounts</name><index pos:start="115:73" pos:end="115:79">[<expr pos:start="115:74" pos:end="115:78"><name pos:start="115:74" pos:end="115:78">chunk</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:49"><expr pos:start="117:13" pos:end="117:48"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:48"><name pos:start="117:19" pos:end="117:34">BZ2_bzDecompress</name><argument_list pos:start="117:35" pos:end="117:48">(<argument pos:start="117:36" pos:end="117:47"><expr pos:start="117:36" pos:end="117:47"><operator pos:start="117:36" pos:end="117:36">&amp;</operator><name pos:start="117:37" pos:end="117:47"><name pos:start="117:37" pos:end="117:37">s</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:47">bzstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="121:51"><expr pos:start="119:13" pos:end="121:50"><name pos:start="119:13" pos:end="119:21">total_out</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <operator pos:start="119:25" pos:end="119:25">(</operator><operator pos:start="119:26" pos:end="119:26">(</operator><name pos:start="119:27" pos:end="119:34">uint64_t</name><operator pos:start="119:35" pos:end="119:35">)</operator><name pos:start="119:36" pos:end="119:61"><name pos:start="119:36" pos:end="119:36">s</name><operator pos:start="119:37" pos:end="119:38">-&gt;</operator><name pos:start="119:39" pos:end="119:46">bzstream</name><operator pos:start="119:47" pos:end="119:47">.</operator><name pos:start="119:48" pos:end="119:61">total_out_hi32</name></name> <operator pos:start="119:63" pos:end="119:64">&lt;&lt;</operator> <literal type="number" pos:start="119:66" pos:end="119:67">32</literal><operator pos:start="119:68" pos:end="119:68">)</operator> <operator pos:start="119:70" pos:end="119:70">+</operator>

                        <name pos:start="121:25" pos:end="121:50"><name pos:start="121:25" pos:end="121:25">s</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:35">bzstream</name><operator pos:start="121:36" pos:end="121:36">.</operator><name pos:start="121:37" pos:end="121:50">total_out_lo32</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:46"><expr pos:start="123:13" pos:end="123:45"><call pos:start="123:13" pos:end="123:45"><name pos:start="123:13" pos:end="123:31">BZ2_bzDecompressEnd</name><argument_list pos:start="123:32" pos:end="123:45">(<argument pos:start="123:33" pos:end="123:44"><expr pos:start="123:33" pos:end="123:44"><operator pos:start="123:33" pos:end="123:33">&amp;</operator><name pos:start="123:34" pos:end="123:44"><name pos:start="123:34" pos:end="123:34">s</name><operator pos:start="123:35" pos:end="123:36">-&gt;</operator><name pos:start="123:37" pos:end="123:44">bzstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="127:58">(<expr pos:start="125:17" pos:end="127:57"><name pos:start="125:17" pos:end="125:19">ret</name> <operator pos:start="125:21" pos:end="125:22">!=</operator> <name pos:start="125:24" pos:end="125:36">BZ_STREAM_END</name> <operator pos:start="125:38" pos:end="125:39">||</operator>

                <name pos:start="127:17" pos:end="127:25">total_out</name> <operator pos:start="127:27" pos:end="127:28">!=</operator> <literal type="number" pos:start="127:30" pos:end="127:32">512</literal> <operator pos:start="127:34" pos:end="127:34">*</operator> <name pos:start="127:36" pos:end="127:57"><name pos:start="127:36" pos:end="127:36">s</name><operator pos:start="127:37" pos:end="127:38">-&gt;</operator><name pos:start="127:39" pos:end="127:50">sectorcounts</name><index pos:start="127:51" pos:end="127:57">[<expr pos:start="127:52" pos:end="127:56"><name pos:start="127:52" pos:end="127:56">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="127:60" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:26">

                <return pos:start="129:17" pos:end="129:26">return <expr pos:start="129:24" pos:end="129:25"><operator pos:start="129:24" pos:end="129:24">-</operator><literal type="number" pos:start="129:25" pos:end="129:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="133:13" pos:end="136:0">break;</break>

<cpp:endif pos:start="135:1" pos:end="135:6">#<cpp:directive pos:start="135:2" pos:end="135:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="135:8" pos:end="135:25">/* CONFIG_BZIP2 */</comment>

        <case pos:start="137:9" pos:end="137:15">case <expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr>:</case> <comment type="block" pos:start="137:17" pos:end="137:26">/* copy */</comment>

            <expr_stmt pos:start="139:13" pos:end="141:71"><expr pos:start="139:13" pos:end="141:70"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="141:70"><name pos:start="139:19" pos:end="139:28">bdrv_pread</name><argument_list pos:start="139:29" pos:end="141:70">(<argument pos:start="139:30" pos:end="139:37"><expr pos:start="139:30" pos:end="139:37"><name pos:start="139:30" pos:end="139:37"><name pos:start="139:30" pos:end="139:31">bs</name><operator pos:start="139:32" pos:end="139:33">-&gt;</operator><name pos:start="139:34" pos:end="139:37">file</name></name></expr></argument>, <argument pos:start="139:40" pos:end="139:56"><expr pos:start="139:40" pos:end="139:56"><name pos:start="139:40" pos:end="139:56"><name pos:start="139:40" pos:end="139:40">s</name><operator pos:start="139:41" pos:end="139:42">-&gt;</operator><name pos:start="139:43" pos:end="139:49">offsets</name><index pos:start="139:50" pos:end="139:56">[<expr pos:start="139:51" pos:end="139:55"><name pos:start="139:51" pos:end="139:55">chunk</name></expr>]</index></name></expr></argument>,

                             <argument pos:start="141:30" pos:end="141:50"><expr pos:start="141:30" pos:end="141:50"><name pos:start="141:30" pos:end="141:50"><name pos:start="141:30" pos:end="141:30">s</name><operator pos:start="141:31" pos:end="141:32">-&gt;</operator><name pos:start="141:33" pos:end="141:50">uncompressed_chunk</name></name></expr></argument>, <argument pos:start="141:53" pos:end="141:69"><expr pos:start="141:53" pos:end="141:69"><name pos:start="141:53" pos:end="141:69"><name pos:start="141:53" pos:end="141:53">s</name><operator pos:start="141:54" pos:end="141:55">-&gt;</operator><name pos:start="141:56" pos:end="141:62">lengths</name><index pos:start="141:63" pos:end="141:69">[<expr pos:start="141:64" pos:end="141:68"><name pos:start="141:64" pos:end="141:68">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="147:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:41">(<expr pos:start="143:17" pos:end="143:40"><name pos:start="143:17" pos:end="143:19">ret</name> <operator pos:start="143:21" pos:end="143:22">!=</operator> <name pos:start="143:24" pos:end="143:40"><name pos:start="143:24" pos:end="143:24">s</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:33">lengths</name><index pos:start="143:34" pos:end="143:40">[<expr pos:start="143:35" pos:end="143:39"><name pos:start="143:35" pos:end="143:39">chunk</name></expr>]</index></name></expr>)</condition> <block pos:start="143:43" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:26">

                <return pos:start="145:17" pos:end="145:26">return <expr pos:start="145:24" pos:end="145:25"><operator pos:start="145:24" pos:end="145:24">-</operator><literal type="number" pos:start="145:25" pos:end="145:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:15">case <expr pos:start="151:14" pos:end="151:14"><literal type="number" pos:start="151:14" pos:end="151:14">2</literal></expr>:</case> <comment type="block" pos:start="151:17" pos:end="151:26">/* zero */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:75"><expr pos:start="153:13" pos:end="153:74"><call pos:start="153:13" pos:end="153:74"><name pos:start="153:13" pos:end="153:18">memset</name><argument_list pos:start="153:19" pos:end="153:74">(<argument pos:start="153:20" pos:end="153:40"><expr pos:start="153:20" pos:end="153:40"><name pos:start="153:20" pos:end="153:40"><name pos:start="153:20" pos:end="153:20">s</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:40">uncompressed_chunk</name></name></expr></argument>, <argument pos:start="153:43" pos:end="153:43"><expr pos:start="153:43" pos:end="153:43"><literal type="number" pos:start="153:43" pos:end="153:43">0</literal></expr></argument>, <argument pos:start="153:46" pos:end="153:73"><expr pos:start="153:46" pos:end="153:73"><literal type="number" pos:start="153:46" pos:end="153:48">512</literal> <operator pos:start="153:50" pos:end="153:50">*</operator> <name pos:start="153:52" pos:end="153:73"><name pos:start="153:52" pos:end="153:52">s</name><operator pos:start="153:53" pos:end="153:54">-&gt;</operator><name pos:start="153:55" pos:end="153:66">sectorcounts</name><index pos:start="153:67" pos:end="153:73">[<expr pos:start="153:68" pos:end="153:72"><name pos:start="153:68" pos:end="153:72">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:24"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:24">current_chunk</name></name> <operator pos:start="159:26" pos:end="159:26">=</operator> <name pos:start="159:28" pos:end="159:32">chunk</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
