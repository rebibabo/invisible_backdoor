<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13817.c" pos:tabs="8"><function pos:start="1:1" pos:end="379:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">qcow2_amend_options</name><parameter_list pos:start="1:31" pos:end="5:47">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:61">QemuOpts</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">opts</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:66"><decl pos:start="3:32" pos:end="3:66"><type pos:start="3:32" pos:end="3:66"><name pos:start="3:32" pos:end="3:55">BlockDriverAmendStatusCB</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:66">status_cb</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:46"><decl pos:start="5:32" pos:end="5:46"><type pos:start="5:32" pos:end="5:46"><name pos:start="5:32" pos:end="5:35">void</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:46">cb_opaque</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="379:1">{<block_content pos:start="9:5" pos:end="377:13">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">BDRVQcow2State</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:34">= <expr pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:26">bs</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:65"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">old_version</name> <init pos:start="11:21" pos:end="11:37">= <expr pos:start="11:23" pos:end="11:37"><name pos:start="11:23" pos:end="11:37"><name pos:start="11:23" pos:end="11:23">s</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:37">qcow_version</name></name></expr></init></decl>, <decl pos:start="11:40" pos:end="11:64"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:40" pos:end="11:50">new_version</name> <init pos:start="11:52" pos:end="11:64">= <expr pos:start="11:54" pos:end="11:64"><name pos:start="11:54" pos:end="11:64">old_version</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:21">new_size</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:60"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:28">backing_file</name> <init pos:start="15:30" pos:end="15:35">= <expr pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:35">NULL</name></expr></init></decl>, <decl pos:start="15:38" pos:end="15:59"><type ref="prev" pos:start="15:5" pos:end="15:16"><modifier pos:start="15:38" pos:end="15:38">*</modifier></type><name pos:start="15:39" pos:end="15:52">backing_format</name> <init pos:start="15:54" pos:end="15:59">= <expr pos:start="15:56" pos:end="15:59"><name pos:start="15:56" pos:end="15:59">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:48"><decl pos:start="17:5" pos:end="17:47"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:23">lazy_refcounts</name> <init pos:start="17:25" pos:end="17:47">= <expr pos:start="17:27" pos:end="17:47"><name pos:start="17:27" pos:end="17:47"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:47">use_lazy_refcounts</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:22">compat</name> <init pos:start="19:24" pos:end="19:29">= <expr pos:start="19:26" pos:end="19:29"><name pos:start="19:26" pos:end="19:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:44"><decl pos:start="21:5" pos:end="21:43"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:25">cluster_size</name> <init pos:start="21:27" pos:end="21:43">= <expr pos:start="21:29" pos:end="21:43"><name pos:start="21:29" pos:end="21:43"><name pos:start="21:29" pos:end="21:29">s</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:43">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:16">encrypt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:40"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:21">refcount_bits</name> <init pos:start="25:23" pos:end="25:40">= <expr pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:40">refcount_bits</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">Error</name> <modifier pos:start="27:11" pos:end="27:11">*</modifier></type><name pos:start="27:12" pos:end="27:20">local_err</name> <init pos:start="27:22" pos:end="27:27">= <expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:41"><decl pos:start="31:5" pos:end="31:40"><type pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:15">QemuOptDesc</name> <modifier pos:start="31:17" pos:end="31:17">*</modifier></type><name pos:start="31:18" pos:end="31:21">desc</name> <init pos:start="31:23" pos:end="31:40">= <expr pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:28">opts</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:34">list</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:40">desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:42"><decl pos:start="33:5" pos:end="33:41"><type pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:26">Qcow2AmendHelperCBInfo</name></type> <name pos:start="33:28" pos:end="33:41">helper_cb_info</name></decl>;</decl_stmt>



    <while pos:start="37:5" pos:end="165:5">while <condition pos:start="37:11" pos:end="37:30">(<expr pos:start="37:12" pos:end="37:29"><name pos:start="37:12" pos:end="37:15">desc</name> <operator pos:start="37:17" pos:end="37:18">&amp;&amp;</operator> <name pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:23">desc</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:29">name</name></name></expr>)</condition> <block pos:start="37:32" pos:end="165:5">{<block_content pos:start="39:9" pos:end="163:15">

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:45">(<expr pos:start="39:13" pos:end="39:44"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:44"><name pos:start="39:14" pos:end="39:26">qemu_opt_find</name><argument_list pos:start="39:27" pos:end="39:44">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">opts</name></expr></argument>, <argument pos:start="39:34" pos:end="39:43"><expr pos:start="39:34" pos:end="39:43"><name pos:start="39:34" pos:end="39:43"><name pos:start="39:34" pos:end="39:37">desc</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:43">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:47" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <comment type="block" pos:start="41:13" pos:end="41:56">/* only change explicitly defined options */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:19"><expr pos:start="43:13" pos:end="43:18"><name pos:start="43:13" pos:end="43:16">desc</name><operator pos:start="43:17" pos:end="43:18">++</operator></expr>;</expr_stmt>

            <continue pos:start="45:13" pos:end="45:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="159:9"><if pos:start="51:9" pos:end="75:9">if <condition pos:start="51:12" pos:end="51:56">(<expr pos:start="51:13" pos:end="51:55"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:55"><name pos:start="51:14" pos:end="51:19">strcmp</name><argument_list pos:start="51:20" pos:end="51:55">(<argument pos:start="51:21" pos:end="51:30"><expr pos:start="51:21" pos:end="51:30"><name pos:start="51:21" pos:end="51:30"><name pos:start="51:21" pos:end="51:24">desc</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:30">name</name></name></expr></argument>, <argument pos:start="51:33" pos:end="51:54"><expr pos:start="51:33" pos:end="51:54"><name pos:start="51:33" pos:end="51:54">BLOCK_OPT_COMPAT_LEVEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:58" pos:end="75:9">{<block_content pos:start="53:13" pos:end="73:13">

            <expr_stmt pos:start="53:13" pos:end="53:64"><expr pos:start="53:13" pos:end="53:63"><name pos:start="53:13" pos:end="53:18">compat</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <call pos:start="53:22" pos:end="53:63"><name pos:start="53:22" pos:end="53:33">qemu_opt_get</name><argument_list pos:start="53:34" pos:end="53:63">(<argument pos:start="53:35" pos:end="53:38"><expr pos:start="53:35" pos:end="53:38"><name pos:start="53:35" pos:end="53:38">opts</name></expr></argument>, <argument pos:start="53:41" pos:end="53:62"><expr pos:start="53:41" pos:end="53:62"><name pos:start="53:41" pos:end="53:62">BLOCK_OPT_COMPAT_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="73:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:24">(<expr pos:start="55:17" pos:end="55:23"><operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:23">compat</name></expr>)</condition> <block pos:start="55:26" pos:end="59:13">{<block_content>

                <comment type="block" pos:start="57:17" pos:end="57:38">/* preserve default */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="59:15" pos:end="63:13">else if <condition pos:start="59:23" pos:end="59:47">(<expr pos:start="59:24" pos:end="59:46"><operator pos:start="59:24" pos:end="59:24">!</operator><call pos:start="59:25" pos:end="59:46"><name pos:start="59:25" pos:end="59:30">strcmp</name><argument_list pos:start="59:31" pos:end="59:46">(<argument pos:start="59:32" pos:end="59:37"><expr pos:start="59:32" pos:end="59:37"><name pos:start="59:32" pos:end="59:37">compat</name></expr></argument>, <argument pos:start="59:40" pos:end="59:45"><expr pos:start="59:40" pos:end="59:45"><literal type="string" pos:start="59:40" pos:end="59:45">"0.10"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:49" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:32">

                <expr_stmt pos:start="61:17" pos:end="61:32"><expr pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:27">new_version</name> <operator pos:start="61:29" pos:end="61:29">=</operator> <literal type="number" pos:start="61:31" pos:end="61:31">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="63:15" pos:end="67:13">else if <condition pos:start="63:23" pos:end="63:46">(<expr pos:start="63:24" pos:end="63:45"><operator pos:start="63:24" pos:end="63:24">!</operator><call pos:start="63:25" pos:end="63:45"><name pos:start="63:25" pos:end="63:30">strcmp</name><argument_list pos:start="63:31" pos:end="63:45">(<argument pos:start="63:32" pos:end="63:37"><expr pos:start="63:32" pos:end="63:37"><name pos:start="63:32" pos:end="63:37">compat</name></expr></argument>, <argument pos:start="63:40" pos:end="63:44"><expr pos:start="63:40" pos:end="63:44"><literal type="string" pos:start="63:40" pos:end="63:44">"1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:48" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:32">

                <expr_stmt pos:start="65:17" pos:end="65:32"><expr pos:start="65:17" pos:end="65:31"><name pos:start="65:17" pos:end="65:27">new_version</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="67:15" pos:end="73:13">else <block pos:start="67:20" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:31">

                <expr_stmt pos:start="69:17" pos:end="69:71"><expr pos:start="69:17" pos:end="69:70"><call pos:start="69:17" pos:end="69:70"><name pos:start="69:17" pos:end="69:28">error_report</name><argument_list pos:start="69:29" pos:end="69:70">(<argument pos:start="69:30" pos:end="69:61"><expr pos:start="69:30" pos:end="69:61"><literal type="string" pos:start="69:30" pos:end="69:61">"Unknown compatibility level %s"</literal></expr></argument>, <argument pos:start="69:64" pos:end="69:69"><expr pos:start="69:64" pos:end="69:69"><name pos:start="69:64" pos:end="69:69">compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="71:17" pos:end="71:31">return <expr pos:start="71:24" pos:end="71:30"><operator pos:start="71:24" pos:end="71:24">-</operator><name pos:start="71:25" pos:end="71:30">EINVAL</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="75:11" pos:end="81:9">else if <condition pos:start="75:19" pos:end="75:59">(<expr pos:start="75:20" pos:end="75:58"><operator pos:start="75:20" pos:end="75:20">!</operator><call pos:start="75:21" pos:end="75:58"><name pos:start="75:21" pos:end="75:26">strcmp</name><argument_list pos:start="75:27" pos:end="75:58">(<argument pos:start="75:28" pos:end="75:37"><expr pos:start="75:28" pos:end="75:37"><name pos:start="75:28" pos:end="75:37"><name pos:start="75:28" pos:end="75:31">desc</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:37">name</name></name></expr></argument>, <argument pos:start="75:40" pos:end="75:57"><expr pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:57">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:61" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:28">

            <expr_stmt pos:start="77:13" pos:end="77:61"><expr pos:start="77:13" pos:end="77:60"><call pos:start="77:13" pos:end="77:60"><name pos:start="77:13" pos:end="77:24">error_report</name><argument_list pos:start="77:25" pos:end="77:60">(<argument pos:start="77:26" pos:end="77:59"><expr pos:start="77:26" pos:end="77:59"><literal type="string" pos:start="77:26" pos:end="77:59">"Cannot change preallocation mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:28">return <expr pos:start="79:20" pos:end="79:27"><operator pos:start="79:20" pos:end="79:20">-</operator><name pos:start="79:21" pos:end="79:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="81:11" pos:end="85:9">else if <condition pos:start="81:19" pos:end="81:55">(<expr pos:start="81:20" pos:end="81:54"><operator pos:start="81:20" pos:end="81:20">!</operator><call pos:start="81:21" pos:end="81:54"><name pos:start="81:21" pos:end="81:26">strcmp</name><argument_list pos:start="81:27" pos:end="81:54">(<argument pos:start="81:28" pos:end="81:37"><expr pos:start="81:28" pos:end="81:37"><name pos:start="81:28" pos:end="81:37"><name pos:start="81:28" pos:end="81:31">desc</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:37">name</name></name></expr></argument>, <argument pos:start="81:40" pos:end="81:53"><expr pos:start="81:40" pos:end="81:53"><name pos:start="81:40" pos:end="81:53">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:57" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:66">

            <expr_stmt pos:start="83:13" pos:end="83:66"><expr pos:start="83:13" pos:end="83:65"><name pos:start="83:13" pos:end="83:20">new_size</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:65"><name pos:start="83:24" pos:end="83:40">qemu_opt_get_size</name><argument_list pos:start="83:41" pos:end="83:65">(<argument pos:start="83:42" pos:end="83:45"><expr pos:start="83:42" pos:end="83:45"><name pos:start="83:42" pos:end="83:45">opts</name></expr></argument>, <argument pos:start="83:48" pos:end="83:61"><expr pos:start="83:48" pos:end="83:61"><name pos:start="83:48" pos:end="83:61">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="83:64" pos:end="83:64"><expr pos:start="83:64" pos:end="83:64"><literal type="number" pos:start="83:64" pos:end="83:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="89:9">else if <condition pos:start="85:19" pos:end="85:63">(<expr pos:start="85:20" pos:end="85:62"><operator pos:start="85:20" pos:end="85:20">!</operator><call pos:start="85:21" pos:end="85:62"><name pos:start="85:21" pos:end="85:26">strcmp</name><argument_list pos:start="85:27" pos:end="85:62">(<argument pos:start="85:28" pos:end="85:37"><expr pos:start="85:28" pos:end="85:37"><name pos:start="85:28" pos:end="85:37"><name pos:start="85:28" pos:end="85:31">desc</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:37">name</name></name></expr></argument>, <argument pos:start="85:40" pos:end="85:61"><expr pos:start="85:40" pos:end="85:61"><name pos:start="85:40" pos:end="85:61">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:65" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:70">

            <expr_stmt pos:start="87:13" pos:end="87:70"><expr pos:start="87:13" pos:end="87:69"><name pos:start="87:13" pos:end="87:24">backing_file</name> <operator pos:start="87:26" pos:end="87:26">=</operator> <call pos:start="87:28" pos:end="87:69"><name pos:start="87:28" pos:end="87:39">qemu_opt_get</name><argument_list pos:start="87:40" pos:end="87:69">(<argument pos:start="87:41" pos:end="87:44"><expr pos:start="87:41" pos:end="87:44"><name pos:start="87:41" pos:end="87:44">opts</name></expr></argument>, <argument pos:start="87:47" pos:end="87:68"><expr pos:start="87:47" pos:end="87:68"><name pos:start="87:47" pos:end="87:68">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="93:9">else if <condition pos:start="89:19" pos:end="89:62">(<expr pos:start="89:20" pos:end="89:61"><operator pos:start="89:20" pos:end="89:20">!</operator><call pos:start="89:21" pos:end="89:61"><name pos:start="89:21" pos:end="89:26">strcmp</name><argument_list pos:start="89:27" pos:end="89:61">(<argument pos:start="89:28" pos:end="89:37"><expr pos:start="89:28" pos:end="89:37"><name pos:start="89:28" pos:end="89:37"><name pos:start="89:28" pos:end="89:31">desc</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:37">name</name></name></expr></argument>, <argument pos:start="89:40" pos:end="89:60"><expr pos:start="89:40" pos:end="89:60"><name pos:start="89:40" pos:end="89:60">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:64" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:71">

            <expr_stmt pos:start="91:13" pos:end="91:71"><expr pos:start="91:13" pos:end="91:70"><name pos:start="91:13" pos:end="91:26">backing_format</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <call pos:start="91:30" pos:end="91:70"><name pos:start="91:30" pos:end="91:41">qemu_opt_get</name><argument_list pos:start="91:42" pos:end="91:70">(<argument pos:start="91:43" pos:end="91:46"><expr pos:start="91:43" pos:end="91:46"><name pos:start="91:43" pos:end="91:46">opts</name></expr></argument>, <argument pos:start="91:49" pos:end="91:69"><expr pos:start="91:49" pos:end="91:69"><name pos:start="91:49" pos:end="91:69">BLOCK_OPT_BACKING_FMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="109:9">else if <condition pos:start="93:19" pos:end="93:58">(<expr pos:start="93:20" pos:end="93:57"><operator pos:start="93:20" pos:end="93:20">!</operator><call pos:start="93:21" pos:end="93:57"><name pos:start="93:21" pos:end="93:26">strcmp</name><argument_list pos:start="93:27" pos:end="93:57">(<argument pos:start="93:28" pos:end="93:37"><expr pos:start="93:28" pos:end="93:37"><name pos:start="93:28" pos:end="93:37"><name pos:start="93:28" pos:end="93:31">desc</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:37">name</name></name></expr></argument>, <argument pos:start="93:40" pos:end="93:56"><expr pos:start="93:40" pos:end="93:56"><name pos:start="93:40" pos:end="93:56">BLOCK_OPT_ENCRYPT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:60" pos:end="109:9">{<block_content pos:start="95:13" pos:end="107:13">

            <expr_stmt pos:start="95:13" pos:end="97:53"><expr pos:start="95:13" pos:end="97:52"><name pos:start="95:13" pos:end="95:19">encrypt</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="97:52"><name pos:start="95:23" pos:end="95:39">qemu_opt_get_bool</name><argument_list pos:start="95:40" pos:end="97:52">(<argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">opts</name></expr></argument>, <argument pos:start="95:47" pos:end="95:63"><expr pos:start="95:47" pos:end="95:63"><name pos:start="95:47" pos:end="95:63">BLOCK_OPT_ENCRYPT</name></expr></argument>,

                                        <argument pos:start="97:41" pos:end="97:51"><expr pos:start="97:41" pos:end="97:51"><operator pos:start="97:41" pos:end="97:41">!</operator><operator pos:start="97:42" pos:end="97:42">!</operator><name pos:start="97:43" pos:end="97:51"><name pos:start="97:43" pos:end="97:43">s</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:51">cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if <condition pos:start="101:16" pos:end="101:39">(<expr pos:start="101:17" pos:end="101:38"><name pos:start="101:17" pos:end="101:23">encrypt</name> <operator pos:start="101:25" pos:end="101:26">!=</operator> <operator pos:start="101:28" pos:end="101:28">!</operator><operator pos:start="101:29" pos:end="101:29">!</operator><name pos:start="101:30" pos:end="101:38"><name pos:start="101:30" pos:end="101:30">s</name><operator pos:start="101:31" pos:end="101:32">-&gt;</operator><name pos:start="101:33" pos:end="101:38">cipher</name></name></expr>)</condition> <block pos:start="101:41" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:32">

                <expr_stmt pos:start="103:17" pos:end="103:78"><expr pos:start="103:17" pos:end="103:77"><call pos:start="103:17" pos:end="103:77"><name pos:start="103:17" pos:end="103:28">error_report</name><argument_list pos:start="103:29" pos:end="103:77">(<argument pos:start="103:30" pos:end="103:76"><expr pos:start="103:30" pos:end="103:76"><literal type="string" pos:start="103:30" pos:end="103:76">"Changing the encryption flag is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="105:17" pos:end="105:32">return <expr pos:start="105:24" pos:end="105:31"><operator pos:start="105:24" pos:end="105:24">-</operator><name pos:start="105:25" pos:end="105:31">ENOTSUP</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="109:11" pos:end="123:9">else if <condition pos:start="109:19" pos:end="109:63">(<expr pos:start="109:20" pos:end="109:62"><operator pos:start="109:20" pos:end="109:20">!</operator><call pos:start="109:21" pos:end="109:62"><name pos:start="109:21" pos:end="109:26">strcmp</name><argument_list pos:start="109:27" pos:end="109:62">(<argument pos:start="109:28" pos:end="109:37"><expr pos:start="109:28" pos:end="109:37"><name pos:start="109:28" pos:end="109:37"><name pos:start="109:28" pos:end="109:31">desc</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:37">name</name></name></expr></argument>, <argument pos:start="109:40" pos:end="109:61"><expr pos:start="109:40" pos:end="109:61"><name pos:start="109:40" pos:end="109:61">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:65" pos:end="123:9">{<block_content pos:start="111:13" pos:end="121:13">

            <expr_stmt pos:start="111:13" pos:end="113:59"><expr pos:start="111:13" pos:end="113:58"><name pos:start="111:13" pos:end="111:24">cluster_size</name> <operator pos:start="111:26" pos:end="111:26">=</operator> <call pos:start="111:28" pos:end="113:58"><name pos:start="111:28" pos:end="111:44">qemu_opt_get_size</name><argument_list pos:start="111:45" pos:end="113:58">(<argument pos:start="111:46" pos:end="111:49"><expr pos:start="111:46" pos:end="111:49"><name pos:start="111:46" pos:end="111:49">opts</name></expr></argument>, <argument pos:start="111:52" pos:end="111:73"><expr pos:start="111:52" pos:end="111:73"><name pos:start="111:52" pos:end="111:73">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>,

                                             <argument pos:start="113:46" pos:end="113:57"><expr pos:start="113:46" pos:end="113:57"><name pos:start="113:46" pos:end="113:57">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:48">(<expr pos:start="115:17" pos:end="115:47"><name pos:start="115:17" pos:end="115:28">cluster_size</name> <operator pos:start="115:30" pos:end="115:31">!=</operator> <name pos:start="115:33" pos:end="115:47"><name pos:start="115:33" pos:end="115:33">s</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:47">cluster_size</name></name></expr>)</condition> <block pos:start="115:50" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:32">

                <expr_stmt pos:start="117:17" pos:end="117:75"><expr pos:start="117:17" pos:end="117:74"><call pos:start="117:17" pos:end="117:74"><name pos:start="117:17" pos:end="117:28">error_report</name><argument_list pos:start="117:29" pos:end="117:74">(<argument pos:start="117:30" pos:end="117:73"><expr pos:start="117:30" pos:end="117:73"><literal type="string" pos:start="117:30" pos:end="117:73">"Changing the cluster size is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="119:17" pos:end="119:32">return <expr pos:start="119:24" pos:end="119:31"><operator pos:start="119:24" pos:end="119:24">-</operator><name pos:start="119:25" pos:end="119:31">ENOTSUP</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="129:9">else if <condition pos:start="123:19" pos:end="123:65">(<expr pos:start="123:20" pos:end="123:64"><operator pos:start="123:20" pos:end="123:20">!</operator><call pos:start="123:21" pos:end="123:64"><name pos:start="123:21" pos:end="123:26">strcmp</name><argument_list pos:start="123:27" pos:end="123:64">(<argument pos:start="123:28" pos:end="123:37"><expr pos:start="123:28" pos:end="123:37"><name pos:start="123:28" pos:end="123:37"><name pos:start="123:28" pos:end="123:31">desc</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:37">name</name></name></expr></argument>, <argument pos:start="123:40" pos:end="123:63"><expr pos:start="123:40" pos:end="123:63"><name pos:start="123:40" pos:end="123:63">BLOCK_OPT_LAZY_REFCOUNTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:67" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:63">

            <expr_stmt pos:start="125:13" pos:end="127:63"><expr pos:start="125:13" pos:end="127:62"><name pos:start="125:13" pos:end="125:26">lazy_refcounts</name> <operator pos:start="125:28" pos:end="125:28">=</operator> <call pos:start="125:30" pos:end="127:62"><name pos:start="125:30" pos:end="125:46">qemu_opt_get_bool</name><argument_list pos:start="125:47" pos:end="127:62">(<argument pos:start="125:48" pos:end="125:51"><expr pos:start="125:48" pos:end="125:51"><name pos:start="125:48" pos:end="125:51">opts</name></expr></argument>, <argument pos:start="125:54" pos:end="125:77"><expr pos:start="125:54" pos:end="125:77"><name pos:start="125:54" pos:end="125:77">BLOCK_OPT_LAZY_REFCOUNTS</name></expr></argument>,

                                               <argument pos:start="127:48" pos:end="127:61"><expr pos:start="127:48" pos:end="127:61"><name pos:start="127:48" pos:end="127:61">lazy_refcounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="129:11" pos:end="151:9">else if <condition pos:start="129:19" pos:end="129:64">(<expr pos:start="129:20" pos:end="129:63"><operator pos:start="129:20" pos:end="129:20">!</operator><call pos:start="129:21" pos:end="129:63"><name pos:start="129:21" pos:end="129:26">strcmp</name><argument_list pos:start="129:27" pos:end="129:63">(<argument pos:start="129:28" pos:end="129:37"><expr pos:start="129:28" pos:end="129:37"><name pos:start="129:28" pos:end="129:37"><name pos:start="129:28" pos:end="129:31">desc</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:37">name</name></name></expr></argument>, <argument pos:start="129:40" pos:end="129:62"><expr pos:start="129:40" pos:end="129:62"><name pos:start="129:40" pos:end="129:62">BLOCK_OPT_REFCOUNT_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:66" pos:end="151:9">{<block_content pos:start="131:13" pos:end="149:13">

            <expr_stmt pos:start="131:13" pos:end="133:63"><expr pos:start="131:13" pos:end="133:62"><name pos:start="131:13" pos:end="131:25">refcount_bits</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <call pos:start="131:29" pos:end="133:62"><name pos:start="131:29" pos:end="131:47">qemu_opt_get_number</name><argument_list pos:start="131:48" pos:end="133:62">(<argument pos:start="131:49" pos:end="131:52"><expr pos:start="131:49" pos:end="131:52"><name pos:start="131:49" pos:end="131:52">opts</name></expr></argument>, <argument pos:start="131:55" pos:end="131:77"><expr pos:start="131:55" pos:end="131:77"><name pos:start="131:55" pos:end="131:77">BLOCK_OPT_REFCOUNT_BITS</name></expr></argument>,

                                                <argument pos:start="133:49" pos:end="133:61"><expr pos:start="133:49" pos:end="133:61"><name pos:start="133:49" pos:end="133:61">refcount_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="137:13" pos:end="149:13"><if pos:start="137:13" pos:end="149:13">if <condition pos:start="137:16" pos:end="139:46">(<expr pos:start="137:17" pos:end="139:45"><name pos:start="137:17" pos:end="137:29">refcount_bits</name> <operator pos:start="137:31" pos:end="137:32">&lt;=</operator> <literal type="number" pos:start="137:34" pos:end="137:34">0</literal> <operator pos:start="137:36" pos:end="137:37">||</operator> <name pos:start="137:39" pos:end="137:51">refcount_bits</name> <operator pos:start="137:53" pos:end="137:53">&gt;</operator> <literal type="number" pos:start="137:55" pos:end="137:56">64</literal> <operator pos:start="137:58" pos:end="137:59">||</operator>

                <operator pos:start="139:17" pos:end="139:17">!</operator><call pos:start="139:18" pos:end="139:45"><name pos:start="139:18" pos:end="139:30">is_power_of_2</name><argument_list pos:start="139:31" pos:end="139:45">(<argument pos:start="139:32" pos:end="139:44"><expr pos:start="139:32" pos:end="139:44"><name pos:start="139:32" pos:end="139:44">refcount_bits</name></expr></argument>)</argument_list></call></expr>)</condition>

            <block pos:start="141:13" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:31">

                <expr_stmt pos:start="143:17" pos:end="145:51"><expr pos:start="143:17" pos:end="145:50"><call pos:start="143:17" pos:end="145:50"><name pos:start="143:17" pos:end="143:28">error_report</name><argument_list pos:start="143:29" pos:end="145:50">(<argument pos:start="143:30" pos:end="145:49"><expr pos:start="143:30" pos:end="145:49"><literal type="string" pos:start="143:30" pos:end="143:77">"Refcount width must be a power of two and may "</literal>

                             <literal type="string" pos:start="145:30" pos:end="145:49">"not exceed 64 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="147:17" pos:end="147:31">return <expr pos:start="147:24" pos:end="147:30"><operator pos:start="147:24" pos:end="147:24">-</operator><name pos:start="147:25" pos:end="147:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="151:11" pos:end="159:9">else <block pos:start="151:16" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:20">

            <comment type="block" pos:start="153:13" pos:end="155:54">/* if this point is reached, this probably means a new option was

             * added without having it covered here */</comment>

            <expr_stmt pos:start="157:13" pos:end="157:20"><expr pos:start="157:13" pos:end="157:19"><call pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:17">abort</name><argument_list pos:start="157:18" pos:end="157:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:15"><expr pos:start="163:9" pos:end="163:14"><name pos:start="163:9" pos:end="163:12">desc</name><operator pos:start="163:13" pos:end="163:14">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="169:5" pos:end="179:6"><expr pos:start="169:5" pos:end="179:5"><name pos:start="169:5" pos:end="169:18">helper_cb_info</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <operator pos:start="169:22" pos:end="169:22">(</operator><name pos:start="169:23" pos:end="169:44">Qcow2AmendHelperCBInfo</name><operator pos:start="169:45" pos:end="169:45">)</operator><block pos:start="169:46" pos:end="179:5">{

        <expr pos:start="171:9" pos:end="171:39"><operator pos:start="171:9" pos:end="171:9">.</operator><name pos:start="171:10" pos:end="171:27">original_status_cb</name> <operator pos:start="171:29" pos:end="171:29">=</operator> <name pos:start="171:31" pos:end="171:39">status_cb</name></expr>,

        <expr pos:start="173:9" pos:end="173:39"><operator pos:start="173:9" pos:end="173:9">.</operator><name pos:start="173:10" pos:end="173:27">original_cb_opaque</name> <operator pos:start="173:29" pos:end="173:29">=</operator> <name pos:start="173:31" pos:end="173:39">cb_opaque</name></expr>,

        <expr pos:start="175:9" pos:end="177:63"><operator pos:start="175:9" pos:end="175:9">.</operator><name pos:start="175:10" pos:end="175:25">total_operations</name> <operator pos:start="175:27" pos:end="175:27">=</operator> <operator pos:start="175:29" pos:end="175:29">(</operator><name pos:start="175:30" pos:end="175:40">new_version</name> <operator pos:start="175:42" pos:end="175:42">&lt;</operator> <name pos:start="175:44" pos:end="175:54">old_version</name><operator pos:start="175:55" pos:end="175:55">)</operator>

                          <operator pos:start="177:27" pos:end="177:27">+</operator> <operator pos:start="177:29" pos:end="177:29">(</operator><name pos:start="177:30" pos:end="177:45"><name pos:start="177:30" pos:end="177:30">s</name><operator pos:start="177:31" pos:end="177:32">-&gt;</operator><name pos:start="177:33" pos:end="177:45">refcount_bits</name></name> <operator pos:start="177:47" pos:end="177:48">!=</operator> <name pos:start="177:50" pos:end="177:62">refcount_bits</name><operator pos:start="177:63" pos:end="177:63">)</operator></expr>

    }</block></expr>;</expr_stmt>



    <comment type="block" pos:start="183:5" pos:end="183:62">/* Upgrade first (some features may require compat=1.1) */</comment>

    <if_stmt pos:start="185:5" pos:end="199:5"><if pos:start="185:5" pos:end="199:5">if <condition pos:start="185:8" pos:end="185:34">(<expr pos:start="185:9" pos:end="185:33"><name pos:start="185:9" pos:end="185:19">new_version</name> <operator pos:start="185:21" pos:end="185:21">&gt;</operator> <name pos:start="185:23" pos:end="185:33">old_version</name></expr>)</condition> <block pos:start="185:36" pos:end="199:5">{<block_content pos:start="187:9" pos:end="197:9">

        <expr_stmt pos:start="187:9" pos:end="187:38"><expr pos:start="187:9" pos:end="187:37"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:23">qcow_version</name></name> <operator pos:start="187:25" pos:end="187:25">=</operator> <name pos:start="187:27" pos:end="187:37">new_version</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:38"><expr pos:start="189:9" pos:end="189:37"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:37"><name pos:start="189:15" pos:end="189:33">qcow2_update_header</name><argument_list pos:start="189:34" pos:end="189:37">(<argument pos:start="189:35" pos:end="189:36"><expr pos:start="189:35" pos:end="189:36"><name pos:start="189:35" pos:end="189:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="197:9"><if pos:start="191:9" pos:end="197:9">if <condition pos:start="191:12" pos:end="191:20">(<expr pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">&lt;</operator> <literal type="number" pos:start="191:19" pos:end="191:19">0</literal></expr>)</condition> <block pos:start="191:22" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:23">

            <expr_stmt pos:start="193:13" pos:end="193:42"><expr pos:start="193:13" pos:end="193:41"><name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:27">qcow_version</name></name> <operator pos:start="193:29" pos:end="193:29">=</operator> <name pos:start="193:31" pos:end="193:41">old_version</name></expr>;</expr_stmt>

            <return pos:start="195:13" pos:end="195:23">return <expr pos:start="195:20" pos:end="195:22"><name pos:start="195:20" pos:end="195:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="239:5"><if pos:start="203:5" pos:end="239:5">if <condition pos:start="203:8" pos:end="203:42">(<expr pos:start="203:9" pos:end="203:41"><name pos:start="203:9" pos:end="203:24"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:24">refcount_bits</name></name> <operator pos:start="203:26" pos:end="203:27">!=</operator> <name pos:start="203:29" pos:end="203:41">refcount_bits</name></expr>)</condition> <block pos:start="203:44" pos:end="239:5">{<block_content pos:start="205:9" pos:end="237:9">

        <decl_stmt pos:start="205:9" pos:end="205:50"><decl pos:start="205:9" pos:end="205:49"><type pos:start="205:9" pos:end="205:11"><name pos:start="205:9" pos:end="205:11">int</name></type> <name pos:start="205:13" pos:end="205:26">refcount_order</name> <init pos:start="205:28" pos:end="205:49">= <expr pos:start="205:30" pos:end="205:49"><call pos:start="205:30" pos:end="205:49"><name pos:start="205:30" pos:end="205:34">ctz32</name><argument_list pos:start="205:35" pos:end="205:49">(<argument pos:start="205:36" pos:end="205:48"><expr pos:start="205:36" pos:end="205:48"><name pos:start="205:36" pos:end="205:48">refcount_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="209:9" pos:end="219:9"><if pos:start="209:9" pos:end="219:9">if <condition pos:start="209:12" pos:end="209:51">(<expr pos:start="209:13" pos:end="209:50"><name pos:start="209:13" pos:end="209:23">new_version</name> <operator pos:start="209:25" pos:end="209:25">&lt;</operator> <literal type="number" pos:start="209:27" pos:end="209:27">3</literal> <operator pos:start="209:29" pos:end="209:30">&amp;&amp;</operator> <name pos:start="209:32" pos:end="209:44">refcount_bits</name> <operator pos:start="209:46" pos:end="209:47">!=</operator> <literal type="number" pos:start="209:49" pos:end="209:50">16</literal></expr>)</condition> <block pos:start="209:53" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:27">

            <expr_stmt pos:start="211:13" pos:end="215:37"><expr pos:start="211:13" pos:end="215:36"><call pos:start="211:13" pos:end="215:36"><name pos:start="211:13" pos:end="211:24">error_report</name><argument_list pos:start="211:25" pos:end="215:36">(<argument pos:start="211:26" pos:end="215:35"><expr pos:start="211:26" pos:end="215:35"><literal type="string" pos:start="211:26" pos:end="211:74">"Different refcount widths than 16 bits require "</literal>

                         <literal type="string" pos:start="213:26" pos:end="213:79">"compatibility level 1.1 or above (use compat=1.1 or "</literal>

                         <literal type="string" pos:start="215:26" pos:end="215:35">"greater)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:27">return <expr pos:start="217:20" pos:end="217:26"><operator pos:start="217:20" pos:end="217:20">-</operator><name pos:start="217:21" pos:end="217:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:73"><expr pos:start="223:9" pos:end="223:72"><name pos:start="223:9" pos:end="223:40"><name pos:start="223:9" pos:end="223:22">helper_cb_info</name><operator pos:start="223:23" pos:end="223:23">.</operator><name pos:start="223:24" pos:end="223:40">current_operation</name></name> <operator pos:start="223:42" pos:end="223:42">=</operator> <name pos:start="223:44" pos:end="223:72">QCOW2_CHANGING_REFCOUNT_ORDER</name></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="229:71"><expr pos:start="225:9" pos:end="229:70"><name pos:start="225:9" pos:end="225:11">ret</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <call pos:start="225:15" pos:end="229:70"><name pos:start="225:15" pos:end="225:41">qcow2_change_refcount_order</name><argument_list pos:start="225:42" pos:end="229:70">(<argument pos:start="225:43" pos:end="225:44"><expr pos:start="225:43" pos:end="225:44"><name pos:start="225:43" pos:end="225:44">bs</name></expr></argument>, <argument pos:start="225:47" pos:end="225:60"><expr pos:start="225:47" pos:end="225:60"><name pos:start="225:47" pos:end="225:60">refcount_order</name></expr></argument>,

                                          <argument pos:start="227:43" pos:end="227:64"><expr pos:start="227:43" pos:end="227:64"><operator pos:start="227:43" pos:end="227:43">&amp;</operator><name pos:start="227:44" pos:end="227:64">qcow2_amend_helper_cb</name></expr></argument>,

                                          <argument pos:start="229:43" pos:end="229:57"><expr pos:start="229:43" pos:end="229:57"><operator pos:start="229:43" pos:end="229:43">&amp;</operator><name pos:start="229:44" pos:end="229:57">helper_cb_info</name></expr></argument>, <argument pos:start="229:60" pos:end="229:69"><expr pos:start="229:60" pos:end="229:69"><operator pos:start="229:60" pos:end="229:60">&amp;</operator><name pos:start="229:61" pos:end="229:69">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="237:9"><if pos:start="231:9" pos:end="237:9">if <condition pos:start="231:12" pos:end="231:20">(<expr pos:start="231:13" pos:end="231:19"><name pos:start="231:13" pos:end="231:15">ret</name> <operator pos:start="231:17" pos:end="231:17">&lt;</operator> <literal type="number" pos:start="231:19" pos:end="231:19">0</literal></expr>)</condition> <block pos:start="231:22" pos:end="237:9">{<block_content pos:start="233:13" pos:end="235:23">

            <expr_stmt pos:start="233:13" pos:end="233:40"><expr pos:start="233:13" pos:end="233:39"><call pos:start="233:13" pos:end="233:39"><name pos:start="233:13" pos:end="233:28">error_report_err</name><argument_list pos:start="233:29" pos:end="233:39">(<argument pos:start="233:30" pos:end="233:38"><expr pos:start="233:30" pos:end="233:38"><name pos:start="233:30" pos:end="233:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="235:13" pos:end="235:23">return <expr pos:start="235:20" pos:end="235:22"><name pos:start="235:20" pos:end="235:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="243:5" pos:end="257:5"><if pos:start="243:5" pos:end="257:5">if <condition pos:start="243:8" pos:end="243:39">(<expr pos:start="243:9" pos:end="243:38"><name pos:start="243:9" pos:end="243:20">backing_file</name> <operator pos:start="243:22" pos:end="243:23">||</operator> <name pos:start="243:25" pos:end="243:38">backing_format</name></expr>)</condition> <block pos:start="243:41" pos:end="257:5">{<block_content pos:start="245:9" pos:end="255:9">

        <expr_stmt pos:start="245:9" pos:end="249:63"><expr pos:start="245:9" pos:end="249:62"><name pos:start="245:9" pos:end="245:11">ret</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <call pos:start="245:15" pos:end="249:62"><name pos:start="245:15" pos:end="245:39">qcow2_change_backing_file</name><argument_list pos:start="245:40" pos:end="249:62">(<argument pos:start="245:41" pos:end="245:42"><expr pos:start="245:41" pos:end="245:42"><name pos:start="245:41" pos:end="245:42">bs</name></expr></argument>,

                    <argument pos:start="247:21" pos:end="247:57"><expr pos:start="247:21" pos:end="247:57"><ternary pos:start="247:21" pos:end="247:57"><condition pos:start="247:21" pos:end="247:34"><expr pos:start="247:21" pos:end="247:32"><name pos:start="247:21" pos:end="247:32">backing_file</name></expr> ?</condition><then/><else pos:start="247:35" pos:end="247:57">: <expr pos:start="247:37" pos:end="247:57"><name pos:start="247:37" pos:end="247:57"><name pos:start="247:37" pos:end="247:37">s</name><operator pos:start="247:38" pos:end="247:39">-&gt;</operator><name pos:start="247:40" pos:end="247:57">image_backing_file</name></name></expr></else></ternary></expr></argument>,

                    <argument pos:start="249:21" pos:end="249:61"><expr pos:start="249:21" pos:end="249:61"><ternary pos:start="249:21" pos:end="249:61"><condition pos:start="249:21" pos:end="249:36"><expr pos:start="249:21" pos:end="249:34"><name pos:start="249:21" pos:end="249:34">backing_format</name></expr> ?</condition><then/><else pos:start="249:37" pos:end="249:61">: <expr pos:start="249:39" pos:end="249:61"><name pos:start="249:39" pos:end="249:61"><name pos:start="249:39" pos:end="249:39">s</name><operator pos:start="249:40" pos:end="249:41">-&gt;</operator><name pos:start="249:42" pos:end="249:61">image_backing_format</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="255:9"><if pos:start="251:9" pos:end="255:9">if <condition pos:start="251:12" pos:end="251:20">(<expr pos:start="251:13" pos:end="251:19"><name pos:start="251:13" pos:end="251:15">ret</name> <operator pos:start="251:17" pos:end="251:17">&lt;</operator> <literal type="number" pos:start="251:19" pos:end="251:19">0</literal></expr>)</condition> <block pos:start="251:22" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:23">

            <return pos:start="253:13" pos:end="253:23">return <expr pos:start="253:20" pos:end="253:22"><name pos:start="253:20" pos:end="253:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="261:5" pos:end="319:5"><if pos:start="261:5" pos:end="319:5">if <condition pos:start="261:8" pos:end="261:48">(<expr pos:start="261:9" pos:end="261:47"><name pos:start="261:9" pos:end="261:29"><name pos:start="261:9" pos:end="261:9">s</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:29">use_lazy_refcounts</name></name> <operator pos:start="261:31" pos:end="261:32">!=</operator> <name pos:start="261:34" pos:end="261:47">lazy_refcounts</name></expr>)</condition> <block pos:start="261:50" pos:end="319:5">{<block_content pos:start="263:9" pos:end="317:9">

        <if_stmt pos:start="263:9" pos:end="317:9"><if pos:start="263:9" pos:end="289:9">if <condition pos:start="263:12" pos:end="263:27">(<expr pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:26">lazy_refcounts</name></expr>)</condition> <block pos:start="263:29" pos:end="289:9">{<block_content pos:start="265:13" pos:end="287:41">

            <if_stmt pos:start="265:13" pos:end="273:13"><if pos:start="265:13" pos:end="273:13">if <condition pos:start="265:16" pos:end="265:32">(<expr pos:start="265:17" pos:end="265:31"><name pos:start="265:17" pos:end="265:27">new_version</name> <operator pos:start="265:29" pos:end="265:29">&lt;</operator> <literal type="number" pos:start="265:31" pos:end="265:31">3</literal></expr>)</condition> <block pos:start="265:34" pos:end="273:13">{<block_content pos:start="267:17" pos:end="271:31">

                <expr_stmt pos:start="267:17" pos:end="269:80"><expr pos:start="267:17" pos:end="269:79"><call pos:start="267:17" pos:end="269:79"><name pos:start="267:17" pos:end="267:28">error_report</name><argument_list pos:start="267:29" pos:end="269:79">(<argument pos:start="267:30" pos:end="269:78"><expr pos:start="267:30" pos:end="269:78"><literal type="string" pos:start="267:30" pos:end="267:80">"Lazy refcounts only supported with compatibility "</literal>

                             <literal type="string" pos:start="269:30" pos:end="269:78">"level 1.1 and above (use compat=1.1 or greater)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="271:17" pos:end="271:31">return <expr pos:start="271:24" pos:end="271:30"><operator pos:start="271:24" pos:end="271:24">-</operator><name pos:start="271:25" pos:end="271:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:66"><expr pos:start="275:13" pos:end="275:65"><name pos:start="275:13" pos:end="275:34"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:34">compatible_features</name></name> <operator pos:start="275:36" pos:end="275:37">|=</operator> <name pos:start="275:39" pos:end="275:65">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:42"><expr pos:start="277:13" pos:end="277:41"><name pos:start="277:13" pos:end="277:15">ret</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <call pos:start="277:19" pos:end="277:41"><name pos:start="277:19" pos:end="277:37">qcow2_update_header</name><argument_list pos:start="277:38" pos:end="277:41">(<argument pos:start="277:39" pos:end="277:40"><expr pos:start="277:39" pos:end="277:40"><name pos:start="277:39" pos:end="277:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="279:13" pos:end="285:13"><if pos:start="279:13" pos:end="285:13">if <condition pos:start="279:16" pos:end="279:24">(<expr pos:start="279:17" pos:end="279:23"><name pos:start="279:17" pos:end="279:19">ret</name> <operator pos:start="279:21" pos:end="279:21">&lt;</operator> <literal type="number" pos:start="279:23" pos:end="279:23">0</literal></expr>)</condition> <block pos:start="279:26" pos:end="285:13">{<block_content pos:start="281:17" pos:end="283:27">

                <expr_stmt pos:start="281:17" pos:end="281:71"><expr pos:start="281:17" pos:end="281:70"><name pos:start="281:17" pos:end="281:38"><name pos:start="281:17" pos:end="281:17">s</name><operator pos:start="281:18" pos:end="281:19">-&gt;</operator><name pos:start="281:20" pos:end="281:38">compatible_features</name></name> <operator pos:start="281:40" pos:end="281:41">&amp;=</operator> <operator pos:start="281:43" pos:end="281:43">~</operator><name pos:start="281:44" pos:end="281:70">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

                <return pos:start="283:17" pos:end="283:27">return <expr pos:start="283:24" pos:end="283:26"><name pos:start="283:24" pos:end="283:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="287:13" pos:end="287:41"><expr pos:start="287:13" pos:end="287:40"><name pos:start="287:13" pos:end="287:33"><name pos:start="287:13" pos:end="287:13">s</name><operator pos:start="287:14" pos:end="287:15">-&gt;</operator><name pos:start="287:16" pos:end="287:33">use_lazy_refcounts</name></name> <operator pos:start="287:35" pos:end="287:35">=</operator> <name pos:start="287:37" pos:end="287:40">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="289:11" pos:end="317:9">else <block pos:start="289:16" pos:end="317:9">{<block_content pos:start="293:13" pos:end="315:42">

            <comment type="block" pos:start="291:13" pos:end="291:40">/* make image clean first */</comment>

            <expr_stmt pos:start="293:13" pos:end="293:39"><expr pos:start="293:13" pos:end="293:38"><name pos:start="293:13" pos:end="293:15">ret</name> <operator pos:start="293:17" pos:end="293:17">=</operator> <call pos:start="293:19" pos:end="293:38"><name pos:start="293:19" pos:end="293:34">qcow2_mark_clean</name><argument_list pos:start="293:35" pos:end="293:38">(<argument pos:start="293:36" pos:end="293:37"><expr pos:start="293:36" pos:end="293:37"><name pos:start="293:36" pos:end="293:37">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="295:13" pos:end="299:13"><if pos:start="295:13" pos:end="299:13">if <condition pos:start="295:16" pos:end="295:24">(<expr pos:start="295:17" pos:end="295:23"><name pos:start="295:17" pos:end="295:19">ret</name> <operator pos:start="295:21" pos:end="295:21">&lt;</operator> <literal type="number" pos:start="295:23" pos:end="295:23">0</literal></expr>)</condition> <block pos:start="295:26" pos:end="299:13">{<block_content pos:start="297:17" pos:end="297:27">

                <return pos:start="297:17" pos:end="297:27">return <expr pos:start="297:24" pos:end="297:26"><name pos:start="297:24" pos:end="297:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="301:13" pos:end="301:45">/* now disallow lazy refcounts */</comment>

            <expr_stmt pos:start="303:13" pos:end="303:67"><expr pos:start="303:13" pos:end="303:66"><name pos:start="303:13" pos:end="303:34"><name pos:start="303:13" pos:end="303:13">s</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:34">compatible_features</name></name> <operator pos:start="303:36" pos:end="303:37">&amp;=</operator> <operator pos:start="303:39" pos:end="303:39">~</operator><name pos:start="303:40" pos:end="303:66">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:42"><expr pos:start="305:13" pos:end="305:41"><name pos:start="305:13" pos:end="305:15">ret</name> <operator pos:start="305:17" pos:end="305:17">=</operator> <call pos:start="305:19" pos:end="305:41"><name pos:start="305:19" pos:end="305:37">qcow2_update_header</name><argument_list pos:start="305:38" pos:end="305:41">(<argument pos:start="305:39" pos:end="305:40"><expr pos:start="305:39" pos:end="305:40"><name pos:start="305:39" pos:end="305:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="307:13" pos:end="313:13"><if pos:start="307:13" pos:end="313:13">if <condition pos:start="307:16" pos:end="307:24">(<expr pos:start="307:17" pos:end="307:23"><name pos:start="307:17" pos:end="307:19">ret</name> <operator pos:start="307:21" pos:end="307:21">&lt;</operator> <literal type="number" pos:start="307:23" pos:end="307:23">0</literal></expr>)</condition> <block pos:start="307:26" pos:end="313:13">{<block_content pos:start="309:17" pos:end="311:27">

                <expr_stmt pos:start="309:17" pos:end="309:70"><expr pos:start="309:17" pos:end="309:69"><name pos:start="309:17" pos:end="309:38"><name pos:start="309:17" pos:end="309:17">s</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:38">compatible_features</name></name> <operator pos:start="309:40" pos:end="309:41">|=</operator> <name pos:start="309:43" pos:end="309:69">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr>;</expr_stmt>

                <return pos:start="311:17" pos:end="311:27">return <expr pos:start="311:24" pos:end="311:26"><name pos:start="311:24" pos:end="311:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:42"><expr pos:start="315:13" pos:end="315:41"><name pos:start="315:13" pos:end="315:33"><name pos:start="315:13" pos:end="315:13">s</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:33">use_lazy_refcounts</name></name> <operator pos:start="315:35" pos:end="315:35">=</operator> <name pos:start="315:37" pos:end="315:41">false</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="323:5" pos:end="353:5"><if pos:start="323:5" pos:end="353:5">if <condition pos:start="323:8" pos:end="323:17">(<expr pos:start="323:9" pos:end="323:16"><name pos:start="323:9" pos:end="323:16">new_size</name></expr>)</condition> <block pos:start="323:19" pos:end="353:5">{<block_content pos:start="325:9" pos:end="351:9">

        <decl_stmt pos:start="325:9" pos:end="325:67"><decl pos:start="325:9" pos:end="325:66"><type pos:start="325:9" pos:end="325:22"><name pos:start="325:9" pos:end="325:20">BlockBackend</name> <modifier pos:start="325:22" pos:end="325:22">*</modifier></type><name pos:start="325:23" pos:end="325:25">blk</name> <init pos:start="325:27" pos:end="325:66">= <expr pos:start="325:29" pos:end="325:66"><call pos:start="325:29" pos:end="325:66"><name pos:start="325:29" pos:end="325:35">blk_new</name><argument_list pos:start="325:36" pos:end="325:66">(<argument pos:start="325:37" pos:end="325:51"><expr pos:start="325:37" pos:end="325:51"><name pos:start="325:37" pos:end="325:51">BLK_PERM_RESIZE</name></expr></argument>, <argument pos:start="325:54" pos:end="325:65"><expr pos:start="325:54" pos:end="325:65"><name pos:start="325:54" pos:end="325:65">BLK_PERM_ALL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:49"><expr pos:start="327:9" pos:end="327:48"><name pos:start="327:9" pos:end="327:11">ret</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <call pos:start="327:15" pos:end="327:48"><name pos:start="327:15" pos:end="327:27">blk_insert_bs</name><argument_list pos:start="327:28" pos:end="327:48">(<argument pos:start="327:29" pos:end="327:31"><expr pos:start="327:29" pos:end="327:31"><name pos:start="327:29" pos:end="327:31">blk</name></expr></argument>, <argument pos:start="327:34" pos:end="327:35"><expr pos:start="327:34" pos:end="327:35"><name pos:start="327:34" pos:end="327:35">bs</name></expr></argument>, <argument pos:start="327:38" pos:end="327:47"><expr pos:start="327:38" pos:end="327:47"><operator pos:start="327:38" pos:end="327:38">&amp;</operator><name pos:start="327:39" pos:end="327:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="329:9" pos:end="337:9"><if pos:start="329:9" pos:end="337:9">if <condition pos:start="329:12" pos:end="329:20">(<expr pos:start="329:13" pos:end="329:19"><name pos:start="329:13" pos:end="329:15">ret</name> <operator pos:start="329:17" pos:end="329:17">&lt;</operator> <literal type="number" pos:start="329:19" pos:end="329:19">0</literal></expr>)</condition> <block pos:start="329:22" pos:end="337:9">{<block_content pos:start="331:13" pos:end="335:23">

            <expr_stmt pos:start="331:13" pos:end="331:40"><expr pos:start="331:13" pos:end="331:39"><call pos:start="331:13" pos:end="331:39"><name pos:start="331:13" pos:end="331:28">error_report_err</name><argument_list pos:start="331:29" pos:end="331:39">(<argument pos:start="331:30" pos:end="331:38"><expr pos:start="331:30" pos:end="331:38"><name pos:start="331:30" pos:end="331:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:27"><expr pos:start="333:13" pos:end="333:26"><call pos:start="333:13" pos:end="333:26"><name pos:start="333:13" pos:end="333:21">blk_unref</name><argument_list pos:start="333:22" pos:end="333:26">(<argument pos:start="333:23" pos:end="333:25"><expr pos:start="333:23" pos:end="333:25"><name pos:start="333:23" pos:end="333:25">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="335:13" pos:end="335:23">return <expr pos:start="335:20" pos:end="335:22"><name pos:start="335:20" pos:end="335:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="341:9" pos:end="341:54"><expr pos:start="341:9" pos:end="341:53"><name pos:start="341:9" pos:end="341:11">ret</name> <operator pos:start="341:13" pos:end="341:13">=</operator> <call pos:start="341:15" pos:end="341:53"><name pos:start="341:15" pos:end="341:26">blk_truncate</name><argument_list pos:start="341:27" pos:end="341:53">(<argument pos:start="341:28" pos:end="341:30"><expr pos:start="341:28" pos:end="341:30"><name pos:start="341:28" pos:end="341:30">blk</name></expr></argument>, <argument pos:start="341:33" pos:end="341:40"><expr pos:start="341:33" pos:end="341:40"><name pos:start="341:33" pos:end="341:40">new_size</name></expr></argument>, <argument pos:start="341:43" pos:end="341:52"><expr pos:start="341:43" pos:end="341:52"><operator pos:start="341:43" pos:end="341:43">&amp;</operator><name pos:start="341:44" pos:end="341:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:23"><expr pos:start="343:9" pos:end="343:22"><call pos:start="343:9" pos:end="343:22"><name pos:start="343:9" pos:end="343:17">blk_unref</name><argument_list pos:start="343:18" pos:end="343:22">(<argument pos:start="343:19" pos:end="343:21"><expr pos:start="343:19" pos:end="343:21"><name pos:start="343:19" pos:end="343:21">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="345:9" pos:end="351:9"><if pos:start="345:9" pos:end="351:9">if <condition pos:start="345:12" pos:end="345:20">(<expr pos:start="345:13" pos:end="345:19"><name pos:start="345:13" pos:end="345:15">ret</name> <operator pos:start="345:17" pos:end="345:17">&lt;</operator> <literal type="number" pos:start="345:19" pos:end="345:19">0</literal></expr>)</condition> <block pos:start="345:22" pos:end="351:9">{<block_content pos:start="347:13" pos:end="349:23">

            <expr_stmt pos:start="347:13" pos:end="347:40"><expr pos:start="347:13" pos:end="347:39"><call pos:start="347:13" pos:end="347:39"><name pos:start="347:13" pos:end="347:28">error_report_err</name><argument_list pos:start="347:29" pos:end="347:39">(<argument pos:start="347:30" pos:end="347:38"><expr pos:start="347:30" pos:end="347:38"><name pos:start="347:30" pos:end="347:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="349:13" pos:end="349:23">return <expr pos:start="349:20" pos:end="349:22"><name pos:start="349:20" pos:end="349:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="357:5" pos:end="357:72">/* Downgrade last (so unsupported features can be removed before) */</comment>

    <if_stmt pos:start="359:5" pos:end="373:5"><if pos:start="359:5" pos:end="373:5">if <condition pos:start="359:8" pos:end="359:34">(<expr pos:start="359:9" pos:end="359:33"><name pos:start="359:9" pos:end="359:19">new_version</name> <operator pos:start="359:21" pos:end="359:21">&lt;</operator> <name pos:start="359:23" pos:end="359:33">old_version</name></expr>)</condition> <block pos:start="359:36" pos:end="373:5">{<block_content pos:start="361:9" pos:end="371:9">

        <expr_stmt pos:start="361:9" pos:end="361:61"><expr pos:start="361:9" pos:end="361:60"><name pos:start="361:9" pos:end="361:40"><name pos:start="361:9" pos:end="361:22">helper_cb_info</name><operator pos:start="361:23" pos:end="361:23">.</operator><name pos:start="361:24" pos:end="361:40">current_operation</name></name> <operator pos:start="361:42" pos:end="361:42">=</operator> <name pos:start="361:44" pos:end="361:60">QCOW2_DOWNGRADING</name></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="365:47"><expr pos:start="363:9" pos:end="365:46"><name pos:start="363:9" pos:end="363:11">ret</name> <operator pos:start="363:13" pos:end="363:13">=</operator> <call pos:start="363:15" pos:end="365:46"><name pos:start="363:15" pos:end="363:29">qcow2_downgrade</name><argument_list pos:start="363:30" pos:end="365:46">(<argument pos:start="363:31" pos:end="363:32"><expr pos:start="363:31" pos:end="363:32"><name pos:start="363:31" pos:end="363:32">bs</name></expr></argument>, <argument pos:start="363:35" pos:end="363:45"><expr pos:start="363:35" pos:end="363:45"><name pos:start="363:35" pos:end="363:45">new_version</name></expr></argument>, <argument pos:start="363:48" pos:end="363:69"><expr pos:start="363:48" pos:end="363:69"><operator pos:start="363:48" pos:end="363:48">&amp;</operator><name pos:start="363:49" pos:end="363:69">qcow2_amend_helper_cb</name></expr></argument>,

                              <argument pos:start="365:31" pos:end="365:45"><expr pos:start="365:31" pos:end="365:45"><operator pos:start="365:31" pos:end="365:31">&amp;</operator><name pos:start="365:32" pos:end="365:45">helper_cb_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="367:9" pos:end="371:9"><if pos:start="367:9" pos:end="371:9">if <condition pos:start="367:12" pos:end="367:20">(<expr pos:start="367:13" pos:end="367:19"><name pos:start="367:13" pos:end="367:15">ret</name> <operator pos:start="367:17" pos:end="367:17">&lt;</operator> <literal type="number" pos:start="367:19" pos:end="367:19">0</literal></expr>)</condition> <block pos:start="367:22" pos:end="371:9">{<block_content pos:start="369:13" pos:end="369:23">

            <return pos:start="369:13" pos:end="369:23">return <expr pos:start="369:20" pos:end="369:22"><name pos:start="369:20" pos:end="369:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="377:5" pos:end="377:13">return <expr pos:start="377:12" pos:end="377:12"><literal type="number" pos:start="377:12" pos:end="377:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
