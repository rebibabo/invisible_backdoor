<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19407.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">av_always_inline</name> <name pos:start="1:25" pos:end="1:27">int</name></type> <name pos:start="1:29" pos:end="1:60">coeff_abs_level_remaining_decode</name><parameter_list pos:start="1:61" pos:end="1:95">(<parameter pos:start="1:62" pos:end="1:75"><decl pos:start="1:62" pos:end="1:75"><type pos:start="1:62" pos:end="1:75"><name pos:start="1:62" pos:end="1:72">HEVCContext</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:75">s</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:94"><decl pos:start="1:78" pos:end="1:94"><type pos:start="1:78" pos:end="1:94"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:94">rc_rice_param</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:42">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">prefix</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">suffix</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:38">last_coeff_abs_level_remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="17:17">while <condition pos:start="15:11" pos:end="15:70">(<expr pos:start="15:12" pos:end="15:69"><name pos:start="15:12" pos:end="15:17">prefix</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:33">CABAC_MAX_BIN</name> <operator pos:start="15:35" pos:end="15:36">&amp;&amp;</operator> <call pos:start="15:38" pos:end="15:69"><name pos:start="15:38" pos:end="15:53">get_cabac_bypass</name><argument_list pos:start="15:54" pos:end="15:69">(<argument pos:start="15:55" pos:end="15:68"><expr pos:start="15:55" pos:end="15:68"><operator pos:start="15:55" pos:end="15:55">&amp;</operator><name pos:start="15:56" pos:end="15:68"><name pos:start="15:56" pos:end="15:56">s</name><operator pos:start="15:57" pos:end="15:58">-&gt;</operator><name pos:start="15:59" pos:end="15:64">HEVClc</name><operator pos:start="15:65" pos:end="15:66">-&gt;</operator><name pos:start="15:67" pos:end="15:68">cc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <expr_stmt pos:start="17:9" pos:end="17:17"><expr pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:14">prefix</name><operator pos:start="17:15" pos:end="17:16">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:32">(<expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:14">prefix</name> <operator pos:start="19:16" pos:end="19:17">==</operator> <name pos:start="19:19" pos:end="19:31">CABAC_MAX_BIN</name></expr>)</condition> <block pos:start="19:34" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17">

        <expr_stmt pos:start="21:9" pos:end="21:71"><expr pos:start="21:9" pos:end="21:70"><call pos:start="21:9" pos:end="21:70"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:70">(<argument pos:start="21:16" pos:end="21:23"><expr pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:23">avctx</name></name></expr></argument>, <argument pos:start="21:26" pos:end="21:37"><expr pos:start="21:26" pos:end="21:37"><name pos:start="21:26" pos:end="21:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:40" pos:end="21:61"><expr pos:start="21:40" pos:end="21:61"><literal type="string" pos:start="21:40" pos:end="21:61">"CABAC_MAX_BIN : %d\n"</literal></expr></argument>, <argument pos:start="21:64" pos:end="21:69"><expr pos:start="21:64" pos:end="21:69"><name pos:start="21:64" pos:end="21:69">prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:14">prefix</name> <operator pos:start="27:16" pos:end="27:16">&lt;</operator> <literal type="number" pos:start="27:18" pos:end="27:18">3</literal></expr>)</condition> <block pos:start="27:21" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:76">

        <for pos:start="29:9" pos:end="31:70">for <control pos:start="29:13" pos:end="29:43">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:38"><expr pos:start="29:21" pos:end="29:37"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:37">rc_rice_param</name></expr>;</condition> <incr pos:start="29:40" pos:end="29:42"><expr pos:start="29:40" pos:end="29:42"><name pos:start="29:40" pos:end="29:40">i</name><operator pos:start="29:41" pos:end="29:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="31:13" pos:end="31:70"><block_content pos:start="31:13" pos:end="31:70">

            <expr_stmt pos:start="31:13" pos:end="31:70"><expr pos:start="31:13" pos:end="31:69"><name pos:start="31:13" pos:end="31:18">suffix</name> <operator pos:start="31:20" pos:end="31:20">=</operator> <operator pos:start="31:22" pos:end="31:22">(</operator><name pos:start="31:23" pos:end="31:28">suffix</name> <operator pos:start="31:30" pos:end="31:31">&lt;&lt;</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal><operator pos:start="31:34" pos:end="31:34">)</operator> <operator pos:start="31:36" pos:end="31:36">|</operator> <call pos:start="31:38" pos:end="31:69"><name pos:start="31:38" pos:end="31:53">get_cabac_bypass</name><argument_list pos:start="31:54" pos:end="31:69">(<argument pos:start="31:55" pos:end="31:68"><expr pos:start="31:55" pos:end="31:68"><operator pos:start="31:55" pos:end="31:55">&amp;</operator><name pos:start="31:56" pos:end="31:68"><name pos:start="31:56" pos:end="31:56">s</name><operator pos:start="31:57" pos:end="31:58">-&gt;</operator><name pos:start="31:59" pos:end="31:64">HEVClc</name><operator pos:start="31:65" pos:end="31:66">-&gt;</operator><name pos:start="31:67" pos:end="31:68">cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="33:9" pos:end="33:76"><expr pos:start="33:9" pos:end="33:75"><name pos:start="33:9" pos:end="33:38">last_coeff_abs_level_remaining</name> <operator pos:start="33:40" pos:end="33:40">=</operator> <operator pos:start="33:42" pos:end="33:42">(</operator><name pos:start="33:43" pos:end="33:48">prefix</name> <operator pos:start="33:50" pos:end="33:51">&lt;&lt;</operator> <name pos:start="33:53" pos:end="33:65">rc_rice_param</name><operator pos:start="33:66" pos:end="33:66">)</operator> <operator pos:start="33:68" pos:end="33:68">+</operator> <name pos:start="33:70" pos:end="33:75">suffix</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="47:5">else <block pos:start="35:12" pos:end="47:5">{<block_content pos:start="37:9" pos:end="45:73">

        <decl_stmt pos:start="37:9" pos:end="37:39"><decl pos:start="37:9" pos:end="37:38"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:25">prefix_minus3</name> <init pos:start="37:27" pos:end="37:38">= <expr pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:34">prefix</name> <operator pos:start="37:36" pos:end="37:36">-</operator> <literal type="number" pos:start="37:38" pos:end="37:38">3</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="39:9" pos:end="41:70">for <control pos:start="39:13" pos:end="39:59">(<init pos:start="39:14" pos:end="39:19"><expr pos:start="39:14" pos:end="39:18"><name pos:start="39:14" pos:end="39:14">i</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>;</init> <condition pos:start="39:21" pos:end="39:54"><expr pos:start="39:21" pos:end="39:53"><name pos:start="39:21" pos:end="39:21">i</name> <operator pos:start="39:23" pos:end="39:23">&lt;</operator> <name pos:start="39:25" pos:end="39:37">prefix_minus3</name> <operator pos:start="39:39" pos:end="39:39">+</operator> <name pos:start="39:41" pos:end="39:53">rc_rice_param</name></expr>;</condition> <incr pos:start="39:56" pos:end="39:58"><expr pos:start="39:56" pos:end="39:58"><name pos:start="39:56" pos:end="39:56">i</name><operator pos:start="39:57" pos:end="39:58">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:13" pos:end="41:70"><block_content pos:start="41:13" pos:end="41:70">

            <expr_stmt pos:start="41:13" pos:end="41:70"><expr pos:start="41:13" pos:end="41:69"><name pos:start="41:13" pos:end="41:18">suffix</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <operator pos:start="41:22" pos:end="41:22">(</operator><name pos:start="41:23" pos:end="41:28">suffix</name> <operator pos:start="41:30" pos:end="41:31">&lt;&lt;</operator> <literal type="number" pos:start="41:33" pos:end="41:33">1</literal><operator pos:start="41:34" pos:end="41:34">)</operator> <operator pos:start="41:36" pos:end="41:36">|</operator> <call pos:start="41:38" pos:end="41:69"><name pos:start="41:38" pos:end="41:53">get_cabac_bypass</name><argument_list pos:start="41:54" pos:end="41:69">(<argument pos:start="41:55" pos:end="41:68"><expr pos:start="41:55" pos:end="41:68"><operator pos:start="41:55" pos:end="41:55">&amp;</operator><name pos:start="41:56" pos:end="41:68"><name pos:start="41:56" pos:end="41:56">s</name><operator pos:start="41:57" pos:end="41:58">-&gt;</operator><name pos:start="41:59" pos:end="41:64">HEVClc</name><operator pos:start="41:65" pos:end="41:66">-&gt;</operator><name pos:start="41:67" pos:end="41:68">cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="43:9" pos:end="45:73"><expr pos:start="43:9" pos:end="45:72"><name pos:start="43:9" pos:end="43:38">last_coeff_abs_level_remaining</name> <operator pos:start="43:40" pos:end="43:40">=</operator> <operator pos:start="43:42" pos:end="43:42">(</operator><operator pos:start="43:43" pos:end="43:43">(</operator><operator pos:start="43:44" pos:end="43:44">(</operator><literal type="number" pos:start="43:45" pos:end="43:45">1</literal> <operator pos:start="43:47" pos:end="43:48">&lt;&lt;</operator> <name pos:start="43:50" pos:end="43:62">prefix_minus3</name><operator pos:start="43:63" pos:end="43:63">)</operator> <operator pos:start="43:65" pos:end="43:65">+</operator> <literal type="number" pos:start="43:67" pos:end="43:69">3</literal> <operator pos:start="43:69" pos:end="43:69">-</operator> <literal type="number" pos:start="43:71" pos:end="43:71">1</literal><operator pos:start="43:72" pos:end="43:72">)</operator>

                                              <operator pos:start="45:47" pos:end="45:48">&lt;&lt;</operator> <name pos:start="45:50" pos:end="45:62">rc_rice_param</name><operator pos:start="45:63" pos:end="45:63">)</operator> <operator pos:start="45:65" pos:end="45:65">+</operator> <name pos:start="45:67" pos:end="45:72">suffix</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="49:5" pos:end="49:42">return <expr pos:start="49:12" pos:end="49:41"><name pos:start="49:12" pos:end="49:41">last_coeff_abs_level_remaining</name></expr>;</return>

</block_content>}</block></function>
</unit>
