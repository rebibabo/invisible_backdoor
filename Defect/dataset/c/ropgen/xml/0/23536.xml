<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23536.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">add_cpreg_to_hashtable</name><parameter_list pos:start="1:35" pos:end="5:63">(<parameter pos:start="1:36" pos:end="1:46"><decl pos:start="1:36" pos:end="1:46"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:41">ARMCPU</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">cpu</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:69"><decl pos:start="1:49" pos:end="1:69"><type pos:start="1:49" pos:end="1:69"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:66">ARMCPRegInfo</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:69">r</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:47"><decl pos:start="3:36" pos:end="3:47"><type pos:start="3:36" pos:end="3:47"><name pos:start="3:36" pos:end="3:39">void</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:47">opaque</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:58"><decl pos:start="3:50" pos:end="3:58"><type pos:start="3:50" pos:end="3:58"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:58">state</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:72"><decl pos:start="3:61" pos:end="3:72"><type pos:start="3:61" pos:end="3:72"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:72">secstate</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:42"><decl pos:start="5:36" pos:end="5:42"><type pos:start="5:36" pos:end="5:42"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:42">crm</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:52"><decl pos:start="5:45" pos:end="5:52"><type pos:start="5:45" pos:end="5:52"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:52">opc1</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:62"><decl pos:start="5:55" pos:end="5:62"><type pos:start="5:55" pos:end="5:62"><name pos:start="5:55" pos:end="5:57">int</name></type> <name pos:start="5:59" pos:end="5:62">opc2</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="245:1">{<block_content pos:start="15:5" pos:end="243:47">

    <comment type="block" pos:start="9:5" pos:end="13:7">/* Private utility function for define_one_arm_cp_reg_with_opaque():

     * add a single reginfo struct to the hash table.

     */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">key</name> <init pos:start="15:19" pos:end="15:38">= <expr pos:start="15:21" pos:end="15:38"><call pos:start="15:21" pos:end="15:38"><name pos:start="15:21" pos:end="15:25">g_new</name><argument_list pos:start="15:26" pos:end="15:38">(<argument pos:start="15:27" pos:end="15:34"><expr pos:start="15:27" pos:end="15:34"><name pos:start="15:27" pos:end="15:34">uint32_t</name></expr></argument>, <argument pos:start="15:37" pos:end="15:37"><expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:57"><decl pos:start="17:5" pos:end="17:56"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">ARMCPRegInfo</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:20">r2</name> <init pos:start="17:22" pos:end="17:56">= <expr pos:start="17:24" pos:end="17:56"><call pos:start="17:24" pos:end="17:56"><name pos:start="17:24" pos:end="17:31">g_memdup</name><argument_list pos:start="17:32" pos:end="17:56">(<argument pos:start="17:33" pos:end="17:33"><expr pos:start="17:33" pos:end="17:33"><name pos:start="17:33" pos:end="17:33">r</name></expr></argument>, <argument pos:start="17:36" pos:end="17:55"><expr pos:start="17:36" pos:end="17:55"><sizeof pos:start="17:36" pos:end="17:55">sizeof<argument_list pos:start="17:42" pos:end="17:55">(<argument pos:start="17:43" pos:end="17:54"><expr pos:start="17:43" pos:end="17:54"><name pos:start="17:43" pos:end="17:54">ARMCPRegInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:47"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">is64</name> <init pos:start="19:14" pos:end="19:47">= <expr pos:start="19:16" pos:end="19:47"><ternary pos:start="19:16" pos:end="19:47"><condition pos:start="19:16" pos:end="19:41"><expr pos:start="19:16" pos:end="19:39"><operator pos:start="19:16" pos:end="19:16">(</operator><name pos:start="19:17" pos:end="19:23"><name pos:start="19:17" pos:end="19:17">r</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:23">type</name></name> <operator pos:start="19:25" pos:end="19:25">&amp;</operator> <name pos:start="19:27" pos:end="19:38">ARM_CP_64BIT</name><operator pos:start="19:39" pos:end="19:39">)</operator></expr> ?</condition><then pos:start="19:43" pos:end="19:43"> <expr pos:start="19:43" pos:end="19:43"><literal type="number" pos:start="19:43" pos:end="19:43">1</literal></expr> </then><else pos:start="19:45" pos:end="19:47">: <expr pos:start="19:47" pos:end="19:47"><literal type="number" pos:start="19:47" pos:end="19:47">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:53"><decl pos:start="21:5" pos:end="21:52"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">ns</name> <init pos:start="21:12" pos:end="21:52">= <expr pos:start="21:14" pos:end="21:52"><ternary pos:start="21:14" pos:end="21:52"><condition pos:start="21:14" pos:end="21:46"><expr pos:start="21:14" pos:end="21:44"><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:22">secstate</name> <operator pos:start="21:24" pos:end="21:24">&amp;</operator> <name pos:start="21:26" pos:end="21:43">ARM_CP_SECSTATE_NS</name><operator pos:start="21:44" pos:end="21:44">)</operator></expr> ?</condition><then pos:start="21:48" pos:end="21:48"> <expr pos:start="21:48" pos:end="21:48"><literal type="number" pos:start="21:48" pos:end="21:48">1</literal></expr> </then><else pos:start="21:50" pos:end="21:52">: <expr pos:start="21:52" pos:end="21:52"><literal type="number" pos:start="21:52" pos:end="21:52">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="29:7">/* Reset the secure state to the specific incoming state.  This is

     * necessary as the register may have been defined with both states.

     */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:6">r2</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:14">secure</name></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:25">secstate</name></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="47:5"><if pos:start="35:5" pos:end="47:5">if <condition pos:start="35:8" pos:end="35:59">(<expr pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:9">r</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:28">bank_fieldoffsets</name><index pos:start="35:29" pos:end="35:31">[<expr pos:start="35:30" pos:end="35:30"><literal type="number" pos:start="35:30" pos:end="35:30">0</literal></expr>]</index></name> <operator pos:start="35:33" pos:end="35:34">&amp;&amp;</operator> <name pos:start="35:36" pos:end="35:58"><name pos:start="35:36" pos:end="35:36">r</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:55">bank_fieldoffsets</name><index pos:start="35:56" pos:end="35:58">[<expr pos:start="35:57" pos:end="35:57"><literal type="number" pos:start="35:57" pos:end="35:57">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="35:61" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:51">

        <comment type="block" pos:start="37:9" pos:end="43:11">/* Register is banked (using both entries in array).

         * Overwriting fieldoffset as the array is only used to define

         * banked registers but later only fieldoffset is used.

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:51"><expr pos:start="45:9" pos:end="45:50"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:10">r2</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:23">fieldoffset</name></name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:50"><name pos:start="45:27" pos:end="45:27">r</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:46">bank_fieldoffsets</name><index pos:start="45:47" pos:end="45:50">[<expr pos:start="45:48" pos:end="45:49"><name pos:start="45:48" pos:end="45:49">ns</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="127:5"><if pos:start="51:5" pos:end="127:5">if <condition pos:start="51:8" pos:end="51:35">(<expr pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:13">state</name> <operator pos:start="51:15" pos:end="51:16">==</operator> <name pos:start="51:18" pos:end="51:34">ARM_CP_STATE_AA32</name></expr>)</condition> <block pos:start="51:37" pos:end="127:5">{<block_content pos:start="53:9" pos:end="125:9">

        <if_stmt pos:start="53:9" pos:end="97:9"><if pos:start="53:9" pos:end="85:9">if <condition pos:start="53:12" pos:end="53:63">(<expr pos:start="53:13" pos:end="53:62"><name pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:13">r</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:32">bank_fieldoffsets</name><index pos:start="53:33" pos:end="53:35">[<expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr>]</index></name> <operator pos:start="53:37" pos:end="53:38">&amp;&amp;</operator> <name pos:start="53:40" pos:end="53:62"><name pos:start="53:40" pos:end="53:40">r</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:59">bank_fieldoffsets</name><index pos:start="53:60" pos:end="53:62">[<expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="53:65" pos:end="85:9">{<block_content pos:start="75:13" pos:end="83:13">

            <comment type="block" pos:start="55:13" pos:end="73:15">/* If the register is banked then we don't need to migrate or

             * reset the 32-bit instance in certain cases:

             *

             * 1) If the register has both 32-bit and 64-bit instances then we

             *    can count on the 64-bit instance taking care of the

             *    non-secure bank.

             * 2) If ARMv8 is enabled then we can count on a 64-bit version

             *    taking care of the secure bank.  This requires that separate

             *    32 and 64-bit definitions are provided.

             */</comment>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="83:13">if <condition pos:start="75:16" pos:end="77:64">(<expr pos:start="75:17" pos:end="77:63"><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:25"><name pos:start="75:18" pos:end="75:18">r</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:25">state</name></name> <operator pos:start="75:27" pos:end="75:28">==</operator> <name pos:start="75:30" pos:end="75:46">ARM_CP_STATE_BOTH</name> <operator pos:start="75:48" pos:end="75:49">&amp;&amp;</operator> <name pos:start="75:51" pos:end="75:52">ns</name><operator pos:start="75:53" pos:end="75:53">)</operator> <operator pos:start="75:55" pos:end="75:56">||</operator>

                <operator pos:start="77:17" pos:end="77:17">(</operator><call pos:start="77:18" pos:end="77:55"><name pos:start="77:18" pos:end="77:28">arm_feature</name><argument_list pos:start="77:29" pos:end="77:55">(<argument pos:start="77:30" pos:end="77:38"><expr pos:start="77:30" pos:end="77:38"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:38"><name pos:start="77:31" pos:end="77:33">cpu</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:38">env</name></name></expr></argument>, <argument pos:start="77:41" pos:end="77:54"><expr pos:start="77:41" pos:end="77:54"><name pos:start="77:41" pos:end="77:54">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call> <operator pos:start="77:57" pos:end="77:58">&amp;&amp;</operator> <operator pos:start="77:60" pos:end="77:60">!</operator><name pos:start="77:61" pos:end="77:62">ns</name><operator pos:start="77:63" pos:end="77:63">)</operator></expr>)</condition> <block pos:start="77:66" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:50">

                <expr_stmt pos:start="79:17" pos:end="79:46"><expr pos:start="79:17" pos:end="79:45"><name pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:18">r2</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:24">type</name></name> <operator pos:start="79:26" pos:end="79:27">|=</operator> <name pos:start="79:29" pos:end="79:45">ARM_CP_NO_MIGRATE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:50"><expr pos:start="81:17" pos:end="81:49"><name pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:18">r2</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:27">resetfn</name></name> <operator pos:start="81:29" pos:end="81:29">=</operator> <name pos:start="81:31" pos:end="81:49">arm_cp_reset_ignore</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="97:9">else if <condition pos:start="85:19" pos:end="85:50">(<expr pos:start="85:20" pos:end="85:49"><operator pos:start="85:20" pos:end="85:20">(</operator><name pos:start="85:21" pos:end="85:28">secstate</name> <operator pos:start="85:30" pos:end="85:31">!=</operator> <name pos:start="85:33" pos:end="85:41"><name pos:start="85:33" pos:end="85:33">r</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:41">secure</name></name><operator pos:start="85:42" pos:end="85:42">)</operator> <operator pos:start="85:44" pos:end="85:45">&amp;&amp;</operator> <operator pos:start="85:47" pos:end="85:47">!</operator><name pos:start="85:48" pos:end="85:49">ns</name></expr>)</condition> <block pos:start="85:52" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:46">

            <comment type="block" pos:start="87:13" pos:end="91:15">/* The register is not banked so we only want to allow migration of

             * the non-secure instance.

             */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:42"><expr pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:14">r2</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:20">type</name></name> <operator pos:start="93:22" pos:end="93:23">|=</operator> <name pos:start="93:25" pos:end="93:41">ARM_CP_NO_MIGRATE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:46"><expr pos:start="95:13" pos:end="95:45"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:14">r2</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:23">resetfn</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:45">arm_cp_reset_ignore</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="125:9"><if pos:start="101:9" pos:end="125:9">if <condition pos:start="101:12" pos:end="101:42">(<expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:13">r</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:20">state</name></name> <operator pos:start="101:22" pos:end="101:23">==</operator> <name pos:start="101:25" pos:end="101:41">ARM_CP_STATE_BOTH</name></expr>)</condition> <block pos:start="101:44" pos:end="125:9">{<block_content pos:start="107:13" pos:end="124:0">

            <comment type="block" pos:start="103:13" pos:end="105:15">/* We assume it is a cp15 register if the .cp field is left unset.

             */</comment>

            <if_stmt pos:start="107:13" pos:end="116:0"><if pos:start="107:13" pos:end="116:0">if <condition pos:start="107:16" pos:end="107:28">(<expr pos:start="107:17" pos:end="107:27"><name pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:18">r2</name><operator pos:start="107:19" pos:end="107:20">-&gt;</operator><name pos:start="107:21" pos:end="107:22">cp</name></name> <operator pos:start="107:24" pos:end="107:25">==</operator> <literal type="number" pos:start="107:27" pos:end="107:27">0</literal></expr>)</condition> <block pos:start="107:30" pos:end="116:0">{<block_content pos:start="109:17" pos:end="109:28">

                <expr_stmt pos:start="109:17" pos:end="109:28"><expr pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:18">r2</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:22">cp</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:27">15</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="115:1" pos:end="115:27">#<cpp:directive pos:start="115:2" pos:end="115:6">ifdef</cpp:directive> <name pos:start="115:8" pos:end="115:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

            <if_stmt pos:start="117:13" pos:end="124:0"><if pos:start="117:13" pos:end="124:0">if <condition pos:start="117:16" pos:end="117:32">(<expr pos:start="117:17" pos:end="117:31"><name pos:start="117:17" pos:end="117:31"><name pos:start="117:17" pos:end="117:18">r2</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:31">fieldoffset</name></name></expr>)</condition> <block pos:start="117:34" pos:end="124:0">{<block_content pos:start="119:17" pos:end="119:52">

                <expr_stmt pos:start="119:17" pos:end="119:52"><expr pos:start="119:17" pos:end="119:51"><name pos:start="119:17" pos:end="119:31"><name pos:start="119:17" pos:end="119:18">r2</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:31">fieldoffset</name></name> <operator pos:start="119:33" pos:end="119:34">+=</operator> <sizeof pos:start="119:36" pos:end="119:51">sizeof<argument_list pos:start="119:42" pos:end="119:51">(<argument pos:start="119:43" pos:end="119:50"><expr pos:start="119:43" pos:end="119:50"><name pos:start="119:43" pos:end="119:50">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="159:5"><if pos:start="129:5" pos:end="155:5">if <condition pos:start="129:8" pos:end="129:35">(<expr pos:start="129:9" pos:end="129:34"><name pos:start="129:9" pos:end="129:13">state</name> <operator pos:start="129:15" pos:end="129:16">==</operator> <name pos:start="129:18" pos:end="129:34">ARM_CP_STATE_AA64</name></expr>)</condition> <block pos:start="129:37" pos:end="155:5">{<block_content pos:start="145:9" pos:end="153:56">

        <comment type="block" pos:start="131:9" pos:end="143:11">/* To allow abbreviation of ARMCPRegInfo

         * definitions, we treat cp == 0 as equivalent to

         * the value for "standard guest-visible sysreg".

         * STATE_BOTH definitions are also always "standard

         * sysreg" in their AArch64 view (the .cp value may

         * be non-zero for the benefit of the AArch32 view).

         */</comment>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:56">(<expr pos:start="145:13" pos:end="145:55"><name pos:start="145:13" pos:end="145:17"><name pos:start="145:13" pos:end="145:13">r</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:17">cp</name></name> <operator pos:start="145:19" pos:end="145:20">==</operator> <literal type="number" pos:start="145:22" pos:end="145:22">0</literal> <operator pos:start="145:24" pos:end="145:25">||</operator> <name pos:start="145:27" pos:end="145:34"><name pos:start="145:27" pos:end="145:27">r</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:34">state</name></name> <operator pos:start="145:36" pos:end="145:37">==</operator> <name pos:start="145:39" pos:end="145:55">ARM_CP_STATE_BOTH</name></expr>)</condition> <block pos:start="145:58" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:44">

            <expr_stmt pos:start="147:13" pos:end="147:44"><expr pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:18"><name pos:start="147:13" pos:end="147:14">r2</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:18">cp</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <name pos:start="147:22" pos:end="147:43">CP_REG_ARM64_SYSREG_CP</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="151:9" pos:end="153:56"><expr pos:start="151:9" pos:end="153:55"><operator pos:start="151:9" pos:end="151:9">*</operator><name pos:start="151:10" pos:end="151:12">key</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="153:55"><name pos:start="151:16" pos:end="151:33">ENCODE_AA64_CP_REG</name><argument_list pos:start="151:34" pos:end="153:55">(<argument pos:start="151:35" pos:end="151:40"><expr pos:start="151:35" pos:end="151:40"><name pos:start="151:35" pos:end="151:40"><name pos:start="151:35" pos:end="151:36">r2</name><operator pos:start="151:37" pos:end="151:38">-&gt;</operator><name pos:start="151:39" pos:end="151:40">cp</name></name></expr></argument>, <argument pos:start="151:43" pos:end="151:49"><expr pos:start="151:43" pos:end="151:49"><name pos:start="151:43" pos:end="151:49"><name pos:start="151:43" pos:end="151:44">r2</name><operator pos:start="151:45" pos:end="151:46">-&gt;</operator><name pos:start="151:47" pos:end="151:49">crn</name></name></expr></argument>, <argument pos:start="151:52" pos:end="151:54"><expr pos:start="151:52" pos:end="151:54"><name pos:start="151:52" pos:end="151:54">crm</name></expr></argument>,

                                  <argument pos:start="153:35" pos:end="153:42"><expr pos:start="153:35" pos:end="153:42"><name pos:start="153:35" pos:end="153:42"><name pos:start="153:35" pos:end="153:36">r2</name><operator pos:start="153:37" pos:end="153:38">-&gt;</operator><name pos:start="153:39" pos:end="153:42">opc0</name></name></expr></argument>, <argument pos:start="153:45" pos:end="153:48"><expr pos:start="153:45" pos:end="153:48"><name pos:start="153:45" pos:end="153:48">opc1</name></expr></argument>, <argument pos:start="153:51" pos:end="153:54"><expr pos:start="153:51" pos:end="153:54"><name pos:start="153:51" pos:end="153:54">opc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="155:7" pos:end="159:5">else <block pos:start="155:12" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:73">

        <expr_stmt pos:start="157:9" pos:end="157:73"><expr pos:start="157:9" pos:end="157:72"><operator pos:start="157:9" pos:end="157:9">*</operator><name pos:start="157:10" pos:end="157:12">key</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <call pos:start="157:16" pos:end="157:72"><name pos:start="157:16" pos:end="157:28">ENCODE_CP_REG</name><argument_list pos:start="157:29" pos:end="157:72">(<argument pos:start="157:30" pos:end="157:35"><expr pos:start="157:30" pos:end="157:35"><name pos:start="157:30" pos:end="157:35"><name pos:start="157:30" pos:end="157:31">r2</name><operator pos:start="157:32" pos:end="157:33">-&gt;</operator><name pos:start="157:34" pos:end="157:35">cp</name></name></expr></argument>, <argument pos:start="157:38" pos:end="157:41"><expr pos:start="157:38" pos:end="157:41"><name pos:start="157:38" pos:end="157:41">is64</name></expr></argument>, <argument pos:start="157:44" pos:end="157:45"><expr pos:start="157:44" pos:end="157:45"><name pos:start="157:44" pos:end="157:45">ns</name></expr></argument>, <argument pos:start="157:48" pos:end="157:54"><expr pos:start="157:48" pos:end="157:54"><name pos:start="157:48" pos:end="157:54"><name pos:start="157:48" pos:end="157:49">r2</name><operator pos:start="157:50" pos:end="157:51">-&gt;</operator><name pos:start="157:52" pos:end="157:54">crn</name></name></expr></argument>, <argument pos:start="157:57" pos:end="157:59"><expr pos:start="157:57" pos:end="157:59"><name pos:start="157:57" pos:end="157:59">crm</name></expr></argument>, <argument pos:start="157:62" pos:end="157:65"><expr pos:start="157:62" pos:end="157:65"><name pos:start="157:62" pos:end="157:65">opc1</name></expr></argument>, <argument pos:start="157:68" pos:end="157:71"><expr pos:start="157:68" pos:end="157:71"><name pos:start="157:68" pos:end="157:71">opc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:15">(<expr pos:start="161:9" pos:end="161:14"><name pos:start="161:9" pos:end="161:14">opaque</name></expr>)</condition> <block pos:start="161:17" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:28">

        <expr_stmt pos:start="163:9" pos:end="163:28"><expr pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:18"><name pos:start="163:9" pos:end="163:10">r2</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:18">opaque</name></name> <operator pos:start="163:20" pos:end="163:20">=</operator> <name pos:start="163:22" pos:end="163:27">opaque</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="167:5" pos:end="171:7">/* reginfo passed to helpers is correct for the actual access,

     * and is never ARM_CP_STATE_BOTH:

     */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:22"><expr pos:start="173:5" pos:end="173:21"><name pos:start="173:5" pos:end="173:13"><name pos:start="173:5" pos:end="173:6">r2</name><operator pos:start="173:7" pos:end="173:8">-&gt;</operator><name pos:start="173:9" pos:end="173:13">state</name></name> <operator pos:start="173:15" pos:end="173:15">=</operator> <name pos:start="173:17" pos:end="173:21">state</name></expr>;</expr_stmt>

    <comment type="block" pos:start="175:5" pos:end="179:7">/* Make sure reginfo passed to helpers for wildcarded regs

     * has the correct crm/opc1/opc2 for this reg, not CP_ANY:

     */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:18"><expr pos:start="181:5" pos:end="181:17"><name pos:start="181:5" pos:end="181:11"><name pos:start="181:5" pos:end="181:6">r2</name><operator pos:start="181:7" pos:end="181:8">-&gt;</operator><name pos:start="181:9" pos:end="181:11">crm</name></name> <operator pos:start="181:13" pos:end="181:13">=</operator> <name pos:start="181:15" pos:end="181:17">crm</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:20"><expr pos:start="183:5" pos:end="183:19"><name pos:start="183:5" pos:end="183:12"><name pos:start="183:5" pos:end="183:6">r2</name><operator pos:start="183:7" pos:end="183:8">-&gt;</operator><name pos:start="183:9" pos:end="183:12">opc1</name></name> <operator pos:start="183:14" pos:end="183:14">=</operator> <name pos:start="183:16" pos:end="183:19">opc1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:20"><expr pos:start="185:5" pos:end="185:19"><name pos:start="185:5" pos:end="185:12"><name pos:start="185:5" pos:end="185:6">r2</name><operator pos:start="185:7" pos:end="185:8">-&gt;</operator><name pos:start="185:9" pos:end="185:12">opc2</name></name> <operator pos:start="185:14" pos:end="185:14">=</operator> <name pos:start="185:16" pos:end="185:19">opc2</name></expr>;</expr_stmt>

    <comment type="block" pos:start="187:5" pos:end="197:7">/* By convention, for wildcarded registers only the first

     * entry is used for migration; the others are marked as

     * NO_MIGRATE so we don't try to transfer the register

     * multiple times. Special registers (ie NOP/WFI) are

     * never migratable.

     */</comment>

    <if_stmt pos:start="199:5" pos:end="209:5"><if pos:start="199:5" pos:end="209:5">if <condition pos:start="199:8" pos:end="205:43">(<expr pos:start="199:9" pos:end="205:42"><operator pos:start="199:9" pos:end="199:9">(</operator><name pos:start="199:10" pos:end="199:16"><name pos:start="199:10" pos:end="199:10">r</name><operator pos:start="199:11" pos:end="199:12">-&gt;</operator><name pos:start="199:13" pos:end="199:16">type</name></name> <operator pos:start="199:18" pos:end="199:18">&amp;</operator> <name pos:start="199:20" pos:end="199:33">ARM_CP_SPECIAL</name><operator pos:start="199:34" pos:end="199:34">)</operator> <operator pos:start="199:36" pos:end="199:37">||</operator>

        <operator pos:start="201:9" pos:end="201:9">(</operator><operator pos:start="201:10" pos:end="201:10">(</operator><name pos:start="201:11" pos:end="201:16"><name pos:start="201:11" pos:end="201:11">r</name><operator pos:start="201:12" pos:end="201:13">-&gt;</operator><name pos:start="201:14" pos:end="201:16">crm</name></name> <operator pos:start="201:18" pos:end="201:19">==</operator> <name pos:start="201:21" pos:end="201:26">CP_ANY</name><operator pos:start="201:27" pos:end="201:27">)</operator> <operator pos:start="201:29" pos:end="201:30">&amp;&amp;</operator> <name pos:start="201:32" pos:end="201:34">crm</name> <operator pos:start="201:36" pos:end="201:37">!=</operator> <literal type="number" pos:start="201:39" pos:end="201:39">0</literal><operator pos:start="201:40" pos:end="201:40">)</operator> <operator pos:start="201:42" pos:end="201:43">||</operator>

        <operator pos:start="203:9" pos:end="203:9">(</operator><operator pos:start="203:10" pos:end="203:10">(</operator><name pos:start="203:11" pos:end="203:17"><name pos:start="203:11" pos:end="203:11">r</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:17">opc1</name></name> <operator pos:start="203:19" pos:end="203:20">==</operator> <name pos:start="203:22" pos:end="203:27">CP_ANY</name><operator pos:start="203:28" pos:end="203:28">)</operator> <operator pos:start="203:30" pos:end="203:31">&amp;&amp;</operator> <name pos:start="203:33" pos:end="203:36">opc1</name> <operator pos:start="203:38" pos:end="203:39">!=</operator> <literal type="number" pos:start="203:41" pos:end="203:41">0</literal><operator pos:start="203:42" pos:end="203:42">)</operator> <operator pos:start="203:44" pos:end="203:45">||</operator>

        <operator pos:start="205:9" pos:end="205:9">(</operator><operator pos:start="205:10" pos:end="205:10">(</operator><name pos:start="205:11" pos:end="205:17"><name pos:start="205:11" pos:end="205:11">r</name><operator pos:start="205:12" pos:end="205:13">-&gt;</operator><name pos:start="205:14" pos:end="205:17">opc2</name></name> <operator pos:start="205:19" pos:end="205:20">==</operator> <name pos:start="205:22" pos:end="205:27">CP_ANY</name><operator pos:start="205:28" pos:end="205:28">)</operator> <operator pos:start="205:30" pos:end="205:31">&amp;&amp;</operator> <name pos:start="205:33" pos:end="205:36">opc2</name> <operator pos:start="205:38" pos:end="205:39">!=</operator> <literal type="number" pos:start="205:41" pos:end="205:41">0</literal><operator pos:start="205:42" pos:end="205:42">)</operator></expr>)</condition> <block pos:start="205:45" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:38">

        <expr_stmt pos:start="207:9" pos:end="207:38"><expr pos:start="207:9" pos:end="207:37"><name pos:start="207:9" pos:end="207:16"><name pos:start="207:9" pos:end="207:10">r2</name><operator pos:start="207:11" pos:end="207:12">-&gt;</operator><name pos:start="207:13" pos:end="207:16">type</name></name> <operator pos:start="207:18" pos:end="207:19">|=</operator> <name pos:start="207:21" pos:end="207:37">ARM_CP_NO_MIGRATE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="213:5" pos:end="217:7">/* Overriding of an existing definition must be explicitly

     * requested.

     */</comment>

    <if_stmt pos:start="219:5" pos:end="241:5"><if pos:start="219:5" pos:end="241:5">if <condition pos:start="219:8" pos:end="219:37">(<expr pos:start="219:9" pos:end="219:36"><operator pos:start="219:9" pos:end="219:9">!</operator><operator pos:start="219:10" pos:end="219:10">(</operator><name pos:start="219:11" pos:end="219:17"><name pos:start="219:11" pos:end="219:11">r</name><operator pos:start="219:12" pos:end="219:13">-&gt;</operator><name pos:start="219:14" pos:end="219:17">type</name></name> <operator pos:start="219:19" pos:end="219:19">&amp;</operator> <name pos:start="219:21" pos:end="219:35">ARM_CP_OVERRIDE</name><operator pos:start="219:36" pos:end="219:36">)</operator></expr>)</condition> <block pos:start="219:39" pos:end="241:5">{<block_content pos:start="221:9" pos:end="239:9">

        <decl_stmt pos:start="221:9" pos:end="221:29"><decl pos:start="221:9" pos:end="221:28"><type pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:20">ARMCPRegInfo</name> <modifier pos:start="221:22" pos:end="221:22">*</modifier></type><name pos:start="221:23" pos:end="221:28">oldreg</name></decl>;</decl_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:56"><expr pos:start="223:9" pos:end="223:55"><name pos:start="223:9" pos:end="223:14">oldreg</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <call pos:start="223:18" pos:end="223:55"><name pos:start="223:18" pos:end="223:36">g_hash_table_lookup</name><argument_list pos:start="223:37" pos:end="223:55">(<argument pos:start="223:38" pos:end="223:49"><expr pos:start="223:38" pos:end="223:49"><name pos:start="223:38" pos:end="223:49"><name pos:start="223:38" pos:end="223:40">cpu</name><operator pos:start="223:41" pos:end="223:42">-&gt;</operator><name pos:start="223:43" pos:end="223:49">cp_regs</name></name></expr></argument>, <argument pos:start="223:52" pos:end="223:54"><expr pos:start="223:52" pos:end="223:54"><name pos:start="223:52" pos:end="223:54">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="239:9"><if pos:start="225:9" pos:end="239:9">if <condition pos:start="225:12" pos:end="225:56">(<expr pos:start="225:13" pos:end="225:55"><name pos:start="225:13" pos:end="225:18">oldreg</name> <operator pos:start="225:20" pos:end="225:21">&amp;&amp;</operator> <operator pos:start="225:23" pos:end="225:23">!</operator><operator pos:start="225:24" pos:end="225:24">(</operator><name pos:start="225:25" pos:end="225:36"><name pos:start="225:25" pos:end="225:30">oldreg</name><operator pos:start="225:31" pos:end="225:32">-&gt;</operator><name pos:start="225:33" pos:end="225:36">type</name></name> <operator pos:start="225:38" pos:end="225:38">&amp;</operator> <name pos:start="225:40" pos:end="225:54">ARM_CP_OVERRIDE</name><operator pos:start="225:55" pos:end="225:55">)</operator></expr>)</condition> <block pos:start="225:58" pos:end="239:9">{<block_content pos:start="227:13" pos:end="237:35">

            <expr_stmt pos:start="227:13" pos:end="235:44"><expr pos:start="227:13" pos:end="235:43"><call pos:start="227:13" pos:end="235:43"><name pos:start="227:13" pos:end="227:19">fprintf</name><argument_list pos:start="227:20" pos:end="235:43">(<argument pos:start="227:21" pos:end="227:26"><expr pos:start="227:21" pos:end="227:26"><name pos:start="227:21" pos:end="227:26">stderr</name></expr></argument>, <argument pos:start="227:29" pos:end="231:38"><expr pos:start="227:29" pos:end="231:38"><literal type="string" pos:start="227:29" pos:end="227:63">"Register redefined: cp=%d %d bit "</literal>

                    <literal type="string" pos:start="229:21" pos:end="229:53">"crn=%d crm=%d opc1=%d opc2=%d, "</literal>

                    <literal type="string" pos:start="231:21" pos:end="231:38">"was %s, now %s\n"</literal></expr></argument>, <argument pos:start="231:41" pos:end="231:46"><expr pos:start="231:41" pos:end="231:46"><name pos:start="231:41" pos:end="231:46"><name pos:start="231:41" pos:end="231:42">r2</name><operator pos:start="231:43" pos:end="231:44">-&gt;</operator><name pos:start="231:45" pos:end="231:46">cp</name></name></expr></argument>, <argument pos:start="231:49" pos:end="231:62"><expr pos:start="231:49" pos:end="231:62"><literal type="number" pos:start="231:49" pos:end="231:52">32</literal> <operator pos:start="231:52" pos:end="231:52">+</operator> <literal type="number" pos:start="231:54" pos:end="231:55">32</literal> <operator pos:start="231:57" pos:end="231:57">*</operator> <name pos:start="231:59" pos:end="231:62">is64</name></expr></argument>,

                    <argument pos:start="233:21" pos:end="233:27"><expr pos:start="233:21" pos:end="233:27"><name pos:start="233:21" pos:end="233:27"><name pos:start="233:21" pos:end="233:22">r2</name><operator pos:start="233:23" pos:end="233:24">-&gt;</operator><name pos:start="233:25" pos:end="233:27">crn</name></name></expr></argument>, <argument pos:start="233:30" pos:end="233:36"><expr pos:start="233:30" pos:end="233:36"><name pos:start="233:30" pos:end="233:36"><name pos:start="233:30" pos:end="233:31">r2</name><operator pos:start="233:32" pos:end="233:33">-&gt;</operator><name pos:start="233:34" pos:end="233:36">crm</name></name></expr></argument>, <argument pos:start="233:39" pos:end="233:46"><expr pos:start="233:39" pos:end="233:46"><name pos:start="233:39" pos:end="233:46"><name pos:start="233:39" pos:end="233:40">r2</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:46">opc1</name></name></expr></argument>, <argument pos:start="233:49" pos:end="233:56"><expr pos:start="233:49" pos:end="233:56"><name pos:start="233:49" pos:end="233:56"><name pos:start="233:49" pos:end="233:50">r2</name><operator pos:start="233:51" pos:end="233:52">-&gt;</operator><name pos:start="233:53" pos:end="233:56">opc2</name></name></expr></argument>,

                    <argument pos:start="235:21" pos:end="235:32"><expr pos:start="235:21" pos:end="235:32"><name pos:start="235:21" pos:end="235:32"><name pos:start="235:21" pos:end="235:26">oldreg</name><operator pos:start="235:27" pos:end="235:28">-&gt;</operator><name pos:start="235:29" pos:end="235:32">name</name></name></expr></argument>, <argument pos:start="235:35" pos:end="235:42"><expr pos:start="235:35" pos:end="235:42"><name pos:start="235:35" pos:end="235:42"><name pos:start="235:35" pos:end="235:36">r2</name><operator pos:start="235:37" pos:end="235:38">-&gt;</operator><name pos:start="235:39" pos:end="235:42">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:35"><expr pos:start="237:13" pos:end="237:34"><call pos:start="237:13" pos:end="237:34"><name pos:start="237:13" pos:end="237:32">g_assert_not_reached</name><argument_list pos:start="237:33" pos:end="237:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:47"><expr pos:start="243:5" pos:end="243:46"><call pos:start="243:5" pos:end="243:46"><name pos:start="243:5" pos:end="243:23">g_hash_table_insert</name><argument_list pos:start="243:24" pos:end="243:46">(<argument pos:start="243:25" pos:end="243:36"><expr pos:start="243:25" pos:end="243:36"><name pos:start="243:25" pos:end="243:36"><name pos:start="243:25" pos:end="243:27">cpu</name><operator pos:start="243:28" pos:end="243:29">-&gt;</operator><name pos:start="243:30" pos:end="243:36">cp_regs</name></name></expr></argument>, <argument pos:start="243:39" pos:end="243:41"><expr pos:start="243:39" pos:end="243:41"><name pos:start="243:39" pos:end="243:41">key</name></expr></argument>, <argument pos:start="243:44" pos:end="243:45"><expr pos:start="243:44" pos:end="243:45"><name pos:start="243:44" pos:end="243:45">r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
