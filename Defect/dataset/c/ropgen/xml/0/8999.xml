<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8999.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">cpu_watchpoint_insert</name><parameter_list pos:start="1:26" pos:end="3:64">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">cpu</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:46">vaddr</name></type> <name pos:start="1:48" pos:end="1:51">addr</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:58">vaddr</name></type> <name pos:start="1:60" pos:end="1:62">len</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:35"><decl pos:start="3:27" pos:end="3:35"><type pos:start="3:27" pos:end="3:35"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:35">flags</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:63"><decl pos:start="3:38" pos:end="3:63"><type pos:start="3:38" pos:end="3:63"><name pos:start="3:38" pos:end="3:50">CPUWatchpoint</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier><modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:63">watchpoint</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:13">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUWatchpoint</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">wp</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:79">/* forbid ranges which are empty or run off the end of the address space */</comment>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:45">(<expr pos:start="13:9" pos:end="13:44"><name pos:start="13:9" pos:end="13:11">len</name> <operator pos:start="13:13" pos:end="13:14">==</operator> <literal type="number" pos:start="13:16" pos:end="13:16">0</literal> <operator pos:start="13:18" pos:end="13:19">||</operator> <operator pos:start="13:21" pos:end="13:21">(</operator><name pos:start="13:22" pos:end="13:25">addr</name> <operator pos:start="13:27" pos:end="13:27">+</operator> <name pos:start="13:29" pos:end="13:31">len</name> <operator pos:start="13:33" pos:end="13:33">-</operator> <literal type="number" pos:start="13:35" pos:end="13:35">1</literal><operator pos:start="13:36" pos:end="13:36">)</operator> <operator pos:start="13:38" pos:end="13:39">&lt;=</operator> <name pos:start="13:41" pos:end="13:44">addr</name></expr>)</condition> <block pos:start="13:47" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:23">

        <expr_stmt pos:start="15:9" pos:end="17:65"><expr pos:start="15:9" pos:end="17:64"><call pos:start="15:9" pos:end="17:64"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="17:64">(<argument pos:start="15:22" pos:end="17:52"><expr pos:start="15:22" pos:end="17:52"><literal type="string" pos:start="15:22" pos:end="15:59">"tried to set invalid watchpoint at %"</literal>

                     <name pos:start="17:22" pos:end="17:31">VADDR_PRIx</name> <literal type="string" pos:start="17:33" pos:end="17:41">", len=%"</literal> <name pos:start="17:43" pos:end="17:52">VADDR_PRIu</name></expr></argument>, <argument pos:start="17:55" pos:end="17:58"><expr pos:start="17:55" pos:end="17:58"><name pos:start="17:55" pos:end="17:58">addr</name></expr></argument>, <argument pos:start="17:61" pos:end="17:63"><expr pos:start="17:61" pos:end="17:63"><name pos:start="17:61" pos:end="17:63">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:23">return <expr pos:start="19:16" pos:end="19:22"><operator pos:start="19:16" pos:end="19:16">-</operator><name pos:start="19:17" pos:end="19:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:6">wp</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:17">g_malloc</name><argument_list pos:start="23:18" pos:end="23:30">(<argument pos:start="23:19" pos:end="23:29"><expr pos:start="23:19" pos:end="23:29"><sizeof pos:start="23:19" pos:end="23:29">sizeof<argument_list pos:start="23:25" pos:end="23:29">(<argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><operator pos:start="23:26" pos:end="23:26">*</operator><name pos:start="23:27" pos:end="23:28">wp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:6">wp</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:13">vaddr</name></name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:20">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:18"><expr pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:6">wp</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:11">len</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:17">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:6">wp</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:13">flags</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <name pos:start="31:17" pos:end="31:21">flags</name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:52">/* keep all GDB-injected watchpoints in front */</comment>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:23">(<expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:13">flags</name> <operator pos:start="37:15" pos:end="37:15">&amp;</operator> <name pos:start="37:17" pos:end="37:22">BP_GDB</name></expr>)</condition> <block pos:start="37:25" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:57">

        <expr_stmt pos:start="39:9" pos:end="39:57"><expr pos:start="39:9" pos:end="39:56"><call pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:26">QTAILQ_INSERT_HEAD</name><argument_list pos:start="39:27" pos:end="39:56">(<argument pos:start="39:28" pos:end="39:44"><expr pos:start="39:28" pos:end="39:44"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:44"><name pos:start="39:29" pos:end="39:31">cpu</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:44">watchpoints</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:48"><expr pos:start="39:47" pos:end="39:48"><name pos:start="39:47" pos:end="39:48">wp</name></expr></argument>, <argument pos:start="39:51" pos:end="39:55"><expr pos:start="39:51" pos:end="39:55"><name pos:start="39:51" pos:end="39:55">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:57">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="43:27" pos:end="43:56">(<argument pos:start="43:28" pos:end="43:44"><expr pos:start="43:28" pos:end="43:44"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:44"><name pos:start="43:29" pos:end="43:31">cpu</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:44">watchpoints</name></name></expr></argument>, <argument pos:start="43:47" pos:end="43:48"><expr pos:start="43:47" pos:end="43:48"><name pos:start="43:47" pos:end="43:48">wp</name></expr></argument>, <argument pos:start="43:51" pos:end="43:55"><expr pos:start="43:51" pos:end="43:55"><name pos:start="43:51" pos:end="43:55">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><call pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:18">tlb_flush_page</name><argument_list pos:start="49:19" pos:end="49:29">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">cpu</name></expr></argument>, <argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="55:25"><if pos:start="53:5" pos:end="55:25">if <condition pos:start="53:8" pos:end="53:19">(<expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:18">watchpoint</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:25"><block_content pos:start="55:9" pos:end="55:25">

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><operator pos:start="55:9" pos:end="55:9">*</operator><name pos:start="55:10" pos:end="55:19">watchpoint</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:24">wp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
