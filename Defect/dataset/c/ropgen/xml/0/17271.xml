<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17271.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">gem_transmit</name><parameter_list pos:start="1:25" pos:end="1:44">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:40">CadenceGEMState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="273:1">{<block_content pos:start="5:5" pos:end="271:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type>    <name pos:start="5:17" pos:end="5:23"><name pos:start="5:17" pos:end="5:20">desc</name><index pos:start="5:21" pos:end="5:23">[<expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:27">packet_desc_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type>     <name pos:start="9:17" pos:end="9:31"><name pos:start="9:17" pos:end="9:25">tx_packet</name><index pos:start="9:26" pos:end="9:31">[<expr pos:start="9:27" pos:end="9:30"><literal type="number" pos:start="9:27" pos:end="9:30">2048</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:11">uint8_t</name>     <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:18">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type>    <name pos:start="13:17" pos:end="13:27">total_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">q</name> <init pos:start="15:11" pos:end="15:13">= <expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:48">/* Do nothing if transmit is not enabled. */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:50">(<expr pos:start="21:9" pos:end="21:49"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:29"><name pos:start="21:11" pos:end="21:11">s</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">regs</name><index pos:start="21:18" pos:end="21:29">[<expr pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:28">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="21:31" pos:end="21:31">&amp;</operator> <name pos:start="21:33" pos:end="21:48">GEM_NWCTRL_TXENA</name><operator pos:start="21:49" pos:end="21:49">)</operator></expr>)</condition> <block pos:start="21:52" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><call pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:12">DB_PRINT</name><argument_list pos:start="29:13" pos:end="29:18">(<argument pos:start="29:14" pos:end="29:17"><expr pos:start="29:14" pos:end="29:17"><literal type="string" pos:start="29:14" pos:end="29:17">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="39:7">/* The packet we will hand off to QEMU.

     * Packets scattered across multiple descriptors are gathered to this

     * one contiguous buffer first.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:5">p</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:17">tx_packet</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:20"><expr pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:15">total_bytes</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt>



    <for pos:start="47:5" pos:end="271:5">for <control pos:start="47:9" pos:end="47:53">(<init pos:start="47:10" pos:end="47:40"><expr pos:start="47:10" pos:end="47:39"><name pos:start="47:10" pos:end="47:10">q</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:35"><name pos:start="47:14" pos:end="47:14">s</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:35">num_priority_queues</name></name> <operator pos:start="47:37" pos:end="47:37">-</operator> <literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr>;</init> <condition pos:start="47:42" pos:end="47:48"><expr pos:start="47:42" pos:end="47:47"><name pos:start="47:42" pos:end="47:42">q</name> <operator pos:start="47:44" pos:end="47:45">&gt;=</operator> <literal type="number" pos:start="47:47" pos:end="47:47">0</literal></expr>;</condition> <incr pos:start="47:50" pos:end="47:52"><expr pos:start="47:50" pos:end="47:52"><name pos:start="47:50" pos:end="47:50">q</name><operator pos:start="47:51" pos:end="47:52">--</operator></expr></incr>)</control> <block pos:start="47:55" pos:end="271:5">{<block_content pos:start="51:5" pos:end="269:5">

    <comment type="block" pos:start="49:5" pos:end="49:33">/* read current descriptor */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:20">packet_desc_addr</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:41"><name pos:start="51:24" pos:end="51:24">s</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:38">tx_desc_addr</name><index pos:start="51:39" pos:end="51:41">[<expr pos:start="51:40" pos:end="51:40"><name pos:start="51:40" pos:end="51:40">q</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:71"><expr pos:start="55:5" pos:end="55:70"><call pos:start="55:5" pos:end="55:70"><name pos:start="55:5" pos:end="55:12">DB_PRINT</name><argument_list pos:start="55:13" pos:end="55:70">(<argument pos:start="55:14" pos:end="55:51"><expr pos:start="55:14" pos:end="55:51"><literal type="string" pos:start="55:14" pos:end="55:34">"read descriptor 0x%"</literal> <name pos:start="55:36" pos:end="55:46">HWADDR_PRIx</name> <literal type="string" pos:start="55:48" pos:end="55:51">"\n"</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:69"><expr pos:start="55:54" pos:end="55:69"><name pos:start="55:54" pos:end="55:69">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:60"><expr pos:start="57:5" pos:end="59:59"><call pos:start="57:5" pos:end="59:59"><name pos:start="57:5" pos:end="57:28">cpu_physical_memory_read</name><argument_list pos:start="57:29" pos:end="59:59">(<argument pos:start="57:30" pos:end="57:45"><expr pos:start="57:30" pos:end="57:45"><name pos:start="57:30" pos:end="57:45">packet_desc_addr</name></expr></argument>,

                             <argument pos:start="59:30" pos:end="59:44"><expr pos:start="59:30" pos:end="59:44"><operator pos:start="59:30" pos:end="59:30">(</operator><name pos:start="59:31" pos:end="59:37">uint8_t</name> <operator pos:start="59:39" pos:end="59:39">*</operator><operator pos:start="59:40" pos:end="59:40">)</operator><name pos:start="59:41" pos:end="59:44">desc</name></expr></argument>, <argument pos:start="59:47" pos:end="59:58"><expr pos:start="59:47" pos:end="59:58"><sizeof pos:start="59:47" pos:end="59:58">sizeof<argument_list pos:start="59:53" pos:end="59:58">(<argument pos:start="59:54" pos:end="59:57"><expr pos:start="59:54" pos:end="59:57"><name pos:start="59:54" pos:end="59:57">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:50">/* Handle all descriptors owned by hardware */</comment>

    <while pos:start="63:5" pos:end="257:5">while <condition pos:start="63:11" pos:end="63:39">(<expr pos:start="63:12" pos:end="63:38"><call pos:start="63:12" pos:end="63:33"><name pos:start="63:12" pos:end="63:27">tx_desc_get_used</name><argument_list pos:start="63:28" pos:end="63:33">(<argument pos:start="63:29" pos:end="63:32"><expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">desc</name></expr></argument>)</argument_list></call> <operator pos:start="63:35" pos:end="63:36">==</operator> <literal type="number" pos:start="63:38" pos:end="63:38">0</literal></expr>)</condition> <block pos:start="63:41" pos:end="257:5">{<block_content pos:start="69:9" pos:end="255:64">



        <comment type="block" pos:start="67:9" pos:end="67:52">/* Do nothing if transmit is not enabled. */</comment>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:54">(<expr pos:start="69:13" pos:end="69:53"><operator pos:start="69:13" pos:end="69:13">!</operator><operator pos:start="69:14" pos:end="69:14">(</operator><name pos:start="69:15" pos:end="69:33"><name pos:start="69:15" pos:end="69:15">s</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:21">regs</name><index pos:start="69:22" pos:end="69:33">[<expr pos:start="69:23" pos:end="69:32"><name pos:start="69:23" pos:end="69:32">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="69:35" pos:end="69:35">&amp;</operator> <name pos:start="69:37" pos:end="69:52">GEM_NWCTRL_TXENA</name><operator pos:start="69:53" pos:end="69:53">)</operator></expr>)</condition> <block pos:start="69:56" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:19">

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><call pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:25">print_gem_tx_desc</name><argument_list pos:start="75:26" pos:end="75:34">(<argument pos:start="75:27" pos:end="75:30"><expr pos:start="75:27" pos:end="75:30"><name pos:start="75:27" pos:end="75:30">desc</name></expr></argument>, <argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><name pos:start="75:33" pos:end="75:33">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="79:9" pos:end="83:11">/* The real hardware would eat this (and possibly crash).

         * For QEMU let's lend a helping hand.

         */</comment>

        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="87:44">(<expr pos:start="85:13" pos:end="87:43"><operator pos:start="85:13" pos:end="85:13">(</operator><call pos:start="85:14" pos:end="85:37"><name pos:start="85:14" pos:end="85:31">tx_desc_get_buffer</name><argument_list pos:start="85:32" pos:end="85:37">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">desc</name></expr></argument>)</argument_list></call> <operator pos:start="85:39" pos:end="85:40">==</operator> <literal type="number" pos:start="85:42" pos:end="85:42">0</literal><operator pos:start="85:43" pos:end="85:43">)</operator> <operator pos:start="85:45" pos:end="85:46">||</operator>

            <operator pos:start="87:13" pos:end="87:13">(</operator><call pos:start="87:14" pos:end="87:37"><name pos:start="87:14" pos:end="87:31">tx_desc_get_length</name><argument_list pos:start="87:32" pos:end="87:37">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">desc</name></expr></argument>)</argument_list></call> <operator pos:start="87:39" pos:end="87:40">==</operator> <literal type="number" pos:start="87:42" pos:end="87:42">0</literal><operator pos:start="87:43" pos:end="87:43">)</operator></expr>)</condition> <block pos:start="87:46" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:18">

            <expr_stmt pos:start="89:13" pos:end="91:49"><expr pos:start="89:13" pos:end="91:48"><call pos:start="89:13" pos:end="91:48"><name pos:start="89:13" pos:end="89:20">DB_PRINT</name><argument_list pos:start="89:21" pos:end="91:48">(<argument pos:start="89:22" pos:end="89:53"><expr pos:start="89:22" pos:end="89:53"><literal type="string" pos:start="89:22" pos:end="89:53">"Invalid TX descriptor @ 0x%x\n"</literal></expr></argument>,

                     <argument pos:start="91:22" pos:end="91:47"><expr pos:start="91:22" pos:end="91:47"><operator pos:start="91:22" pos:end="91:22">(</operator><name pos:start="91:23" pos:end="91:30">unsigned</name><operator pos:start="91:31" pos:end="91:31">)</operator><name pos:start="91:32" pos:end="91:47">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="99:9" pos:end="111:9"><if pos:start="99:9" pos:end="111:9">if <condition pos:start="99:12" pos:end="99:75">(<expr pos:start="99:13" pos:end="99:74"><call pos:start="99:13" pos:end="99:36"><name pos:start="99:13" pos:end="99:30">tx_desc_get_length</name><argument_list pos:start="99:31" pos:end="99:36">(<argument pos:start="99:32" pos:end="99:35"><expr pos:start="99:32" pos:end="99:35"><name pos:start="99:32" pos:end="99:35">desc</name></expr></argument>)</argument_list></call> <operator pos:start="99:38" pos:end="99:38">&gt;</operator> <sizeof pos:start="99:40" pos:end="99:56">sizeof<argument_list pos:start="99:46" pos:end="99:56">(<argument pos:start="99:47" pos:end="99:55"><expr pos:start="99:47" pos:end="99:55"><name pos:start="99:47" pos:end="99:55">tx_packet</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:58" pos:end="99:58">-</operator> <operator pos:start="99:60" pos:end="99:60">(</operator><name pos:start="99:61" pos:end="99:61">p</name> <operator pos:start="99:63" pos:end="99:63">-</operator> <name pos:start="99:65" pos:end="99:73">tx_packet</name><operator pos:start="99:74" pos:end="99:74">)</operator></expr>)</condition> <block pos:start="99:77" pos:end="111:9">{<block_content pos:start="101:13" pos:end="109:18">

            <expr_stmt pos:start="101:13" pos:end="107:58"><expr pos:start="101:13" pos:end="107:57"><call pos:start="101:13" pos:end="107:57"><name pos:start="101:13" pos:end="101:20">DB_PRINT</name><argument_list pos:start="101:21" pos:end="107:57">(<argument pos:start="101:22" pos:end="101:77"><expr pos:start="101:22" pos:end="101:77"><literal type="string" pos:start="101:22" pos:end="101:77">"TX descriptor @ 0x%x too large: size 0x%x space 0x%x\n"</literal></expr></argument>,

                     <argument pos:start="103:22" pos:end="103:47"><expr pos:start="103:22" pos:end="103:47"><operator pos:start="103:22" pos:end="103:22">(</operator><name pos:start="103:23" pos:end="103:30">unsigned</name><operator pos:start="103:31" pos:end="103:31">)</operator><name pos:start="103:32" pos:end="103:47">packet_desc_addr</name></expr></argument>,

                     <argument pos:start="105:22" pos:end="105:55"><expr pos:start="105:22" pos:end="105:55"><operator pos:start="105:22" pos:end="105:22">(</operator><name pos:start="105:23" pos:end="105:30">unsigned</name><operator pos:start="105:31" pos:end="105:31">)</operator><call pos:start="105:32" pos:end="105:55"><name pos:start="105:32" pos:end="105:49">tx_desc_get_length</name><argument_list pos:start="105:50" pos:end="105:55">(<argument pos:start="105:51" pos:end="105:54"><expr pos:start="105:51" pos:end="105:54"><name pos:start="105:51" pos:end="105:54">desc</name></expr></argument>)</argument_list></call></expr></argument>,

                     <argument pos:start="107:22" pos:end="107:56"><expr pos:start="107:22" pos:end="107:56"><sizeof pos:start="107:22" pos:end="107:38">sizeof<argument_list pos:start="107:28" pos:end="107:38">(<argument pos:start="107:29" pos:end="107:37"><expr pos:start="107:29" pos:end="107:37"><name pos:start="107:29" pos:end="107:37">tx_packet</name></expr></argument>)</argument_list></sizeof> <operator pos:start="107:40" pos:end="107:40">-</operator> <operator pos:start="107:42" pos:end="107:42">(</operator><name pos:start="107:43" pos:end="107:43">p</name> <operator pos:start="107:45" pos:end="107:45">-</operator> <name pos:start="107:47" pos:end="107:55">tx_packet</name><operator pos:start="107:56" pos:end="107:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="115:9" pos:end="119:11">/* Gather this fragment of the packet from "dma memory" to our contig.

         * buffer.

         */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:59"><expr pos:start="121:9" pos:end="123:58"><call pos:start="121:9" pos:end="123:58"><name pos:start="121:9" pos:end="121:32">cpu_physical_memory_read</name><argument_list pos:start="121:33" pos:end="123:58">(<argument pos:start="121:34" pos:end="121:57"><expr pos:start="121:34" pos:end="121:57"><call pos:start="121:34" pos:end="121:57"><name pos:start="121:34" pos:end="121:51">tx_desc_get_buffer</name><argument_list pos:start="121:52" pos:end="121:57">(<argument pos:start="121:53" pos:end="121:56"><expr pos:start="121:53" pos:end="121:56"><name pos:start="121:53" pos:end="121:56">desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:60" pos:end="121:60"><expr pos:start="121:60" pos:end="121:60"><name pos:start="121:60" pos:end="121:60">p</name></expr></argument>,

                                 <argument pos:start="123:34" pos:end="123:57"><expr pos:start="123:34" pos:end="123:57"><call pos:start="123:34" pos:end="123:57"><name pos:start="123:34" pos:end="123:51">tx_desc_get_length</name><argument_list pos:start="123:52" pos:end="123:57">(<argument pos:start="123:53" pos:end="123:56"><expr pos:start="123:53" pos:end="123:56"><name pos:start="123:53" pos:end="123:56">desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:9">p</name> <operator pos:start="125:11" pos:end="125:12">+=</operator> <call pos:start="125:14" pos:end="125:37"><name pos:start="125:14" pos:end="125:31">tx_desc_get_length</name><argument_list pos:start="125:32" pos:end="125:37">(<argument pos:start="125:33" pos:end="125:36"><expr pos:start="125:33" pos:end="125:36"><name pos:start="125:33" pos:end="125:36">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:19">total_bytes</name> <operator pos:start="127:21" pos:end="127:22">+=</operator> <call pos:start="127:24" pos:end="127:47"><name pos:start="127:24" pos:end="127:41">tx_desc_get_length</name><argument_list pos:start="127:42" pos:end="127:47">(<argument pos:start="127:43" pos:end="127:46"><expr pos:start="127:43" pos:end="127:46"><name pos:start="127:43" pos:end="127:46">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:71">/* Last descriptor for this packet; hand the whole thing off */</comment>

        <if_stmt pos:start="133:9" pos:end="233:9"><if pos:start="133:9" pos:end="233:9">if <condition pos:start="133:12" pos:end="133:35">(<expr pos:start="133:13" pos:end="133:34"><call pos:start="133:13" pos:end="133:34"><name pos:start="133:13" pos:end="133:28">tx_desc_get_last</name><argument_list pos:start="133:29" pos:end="133:34">(<argument pos:start="133:30" pos:end="133:33"><expr pos:start="133:30" pos:end="133:33"><name pos:start="133:30" pos:end="133:33">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:37" pos:end="233:9">{<block_content pos:start="135:13" pos:end="231:28">

            <decl_stmt pos:start="135:13" pos:end="135:38"><decl pos:start="135:13" pos:end="135:37"><type pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:20">unsigned</name></type>    <name pos:start="135:25" pos:end="135:37"><name pos:start="135:25" pos:end="135:34">desc_first</name><index pos:start="135:35" pos:end="135:37">[<expr pos:start="135:36" pos:end="135:36"><literal type="number" pos:start="135:36" pos:end="135:36">2</literal></expr>]</index></name></decl>;</decl_stmt>



            <comment type="block" pos:start="139:13" pos:end="143:15">/* Modify the 1st descriptor of this packet to be owned by

             * the processor.

             */</comment>

            <expr_stmt pos:start="145:13" pos:end="147:57"><expr pos:start="145:13" pos:end="147:56"><call pos:start="145:13" pos:end="147:56"><name pos:start="145:13" pos:end="145:36">cpu_physical_memory_read</name><argument_list pos:start="145:37" pos:end="147:56">(<argument pos:start="145:38" pos:end="145:55"><expr pos:start="145:38" pos:end="145:55"><name pos:start="145:38" pos:end="145:55"><name pos:start="145:38" pos:end="145:38">s</name><operator pos:start="145:39" pos:end="145:40">-&gt;</operator><name pos:start="145:41" pos:end="145:52">tx_desc_addr</name><index pos:start="145:53" pos:end="145:55">[<expr pos:start="145:54" pos:end="145:54"><name pos:start="145:54" pos:end="145:54">q</name></expr>]</index></name></expr></argument>, <argument pos:start="145:58" pos:end="145:78"><expr pos:start="145:58" pos:end="145:78"><operator pos:start="145:58" pos:end="145:58">(</operator><name pos:start="145:59" pos:end="145:65">uint8_t</name> <operator pos:start="145:67" pos:end="145:67">*</operator><operator pos:start="145:68" pos:end="145:68">)</operator><name pos:start="145:69" pos:end="145:78">desc_first</name></expr></argument>,

                                     <argument pos:start="147:38" pos:end="147:55"><expr pos:start="147:38" pos:end="147:55"><sizeof pos:start="147:38" pos:end="147:55">sizeof<argument_list pos:start="147:44" pos:end="147:55">(<argument pos:start="147:45" pos:end="147:54"><expr pos:start="147:45" pos:end="147:54"><name pos:start="147:45" pos:end="147:54">desc_first</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:41"><expr pos:start="149:13" pos:end="149:40"><call pos:start="149:13" pos:end="149:40"><name pos:start="149:13" pos:end="149:28">tx_desc_set_used</name><argument_list pos:start="149:29" pos:end="149:40">(<argument pos:start="149:30" pos:end="149:39"><expr pos:start="149:30" pos:end="149:39"><name pos:start="149:30" pos:end="149:39">desc_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="153:58"><expr pos:start="151:13" pos:end="153:57"><call pos:start="151:13" pos:end="153:57"><name pos:start="151:13" pos:end="151:37">cpu_physical_memory_write</name><argument_list pos:start="151:38" pos:end="153:57">(<argument pos:start="151:39" pos:end="151:56"><expr pos:start="151:39" pos:end="151:56"><name pos:start="151:39" pos:end="151:56"><name pos:start="151:39" pos:end="151:39">s</name><operator pos:start="151:40" pos:end="151:41">-&gt;</operator><name pos:start="151:42" pos:end="151:53">tx_desc_addr</name><index pos:start="151:54" pos:end="151:56">[<expr pos:start="151:55" pos:end="151:55"><name pos:start="151:55" pos:end="151:55">q</name></expr>]</index></name></expr></argument>, <argument pos:start="151:59" pos:end="151:79"><expr pos:start="151:59" pos:end="151:79"><operator pos:start="151:59" pos:end="151:59">(</operator><name pos:start="151:60" pos:end="151:66">uint8_t</name> <operator pos:start="151:68" pos:end="151:68">*</operator><operator pos:start="151:69" pos:end="151:69">)</operator><name pos:start="151:70" pos:end="151:79">desc_first</name></expr></argument>,

                                      <argument pos:start="153:39" pos:end="153:56"><expr pos:start="153:39" pos:end="153:56"><sizeof pos:start="153:39" pos:end="153:56">sizeof<argument_list pos:start="153:45" pos:end="153:56">(<argument pos:start="153:46" pos:end="153:55"><expr pos:start="153:46" pos:end="153:55"><name pos:start="153:46" pos:end="153:55">desc_first</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="155:13" pos:end="155:74">/* Advance the hardware current descriptor past this packet */</comment>

            <if_stmt pos:start="157:13" pos:end="165:13"><if pos:start="157:13" pos:end="161:13">if <condition pos:start="157:16" pos:end="157:39">(<expr pos:start="157:17" pos:end="157:38"><call pos:start="157:17" pos:end="157:38"><name pos:start="157:17" pos:end="157:32">tx_desc_get_wrap</name><argument_list pos:start="157:33" pos:end="157:38">(<argument pos:start="157:34" pos:end="157:37"><expr pos:start="157:34" pos:end="157:37"><name pos:start="157:34" pos:end="157:37">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:41" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:58">

                <expr_stmt pos:start="159:17" pos:end="159:58"><expr pos:start="159:17" pos:end="159:57"><name pos:start="159:17" pos:end="159:34"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:31">tx_desc_addr</name><index pos:start="159:32" pos:end="159:34">[<expr pos:start="159:33" pos:end="159:33"><name pos:start="159:33" pos:end="159:33">q</name></expr>]</index></name> <operator pos:start="159:36" pos:end="159:36">=</operator> <name pos:start="159:38" pos:end="159:57"><name pos:start="159:38" pos:end="159:38">s</name><operator pos:start="159:39" pos:end="159:40">-&gt;</operator><name pos:start="159:41" pos:end="159:44">regs</name><index pos:start="159:45" pos:end="159:57">[<expr pos:start="159:46" pos:end="159:56"><name pos:start="159:46" pos:end="159:56">GEM_TXQBASE</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="161:15" pos:end="165:13">else <block pos:start="161:20" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:58">

                <expr_stmt pos:start="163:17" pos:end="163:58"><expr pos:start="163:17" pos:end="163:57"><name pos:start="163:17" pos:end="163:34"><name pos:start="163:17" pos:end="163:17">s</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:31">tx_desc_addr</name><index pos:start="163:32" pos:end="163:34">[<expr pos:start="163:33" pos:end="163:33"><name pos:start="163:33" pos:end="163:33">q</name></expr>]</index></name> <operator pos:start="163:36" pos:end="163:36">=</operator> <name pos:start="163:38" pos:end="163:53">packet_desc_addr</name> <operator pos:start="163:55" pos:end="163:55">+</operator> <literal type="number" pos:start="163:57" pos:end="163:57">8</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:73"><expr pos:start="167:13" pos:end="167:72"><call pos:start="167:13" pos:end="167:72"><name pos:start="167:13" pos:end="167:20">DB_PRINT</name><argument_list pos:start="167:21" pos:end="167:72">(<argument pos:start="167:22" pos:end="167:51"><expr pos:start="167:22" pos:end="167:51"><literal type="string" pos:start="167:22" pos:end="167:51">"TX descriptor next: 0x%08x\n"</literal></expr></argument>, <argument pos:start="167:54" pos:end="167:71"><expr pos:start="167:54" pos:end="167:71"><name pos:start="167:54" pos:end="167:71"><name pos:start="167:54" pos:end="167:54">s</name><operator pos:start="167:55" pos:end="167:56">-&gt;</operator><name pos:start="167:57" pos:end="167:68">tx_desc_addr</name><index pos:start="167:69" pos:end="167:71">[<expr pos:start="167:70" pos:end="167:70"><name pos:start="167:70" pos:end="167:70">q</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:57"><expr pos:start="171:13" pos:end="171:56"><name pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:19">regs</name><index pos:start="171:20" pos:end="171:33">[<expr pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:32">GEM_TXSTATUS</name></expr>]</index></name> <operator pos:start="171:35" pos:end="171:36">|=</operator> <name pos:start="171:38" pos:end="171:56">GEM_TXSTATUS_TXCMPL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:69"><expr pos:start="173:13" pos:end="173:68"><name pos:start="173:13" pos:end="173:28"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:19">regs</name><index pos:start="173:20" pos:end="173:28">[<expr pos:start="173:21" pos:end="173:27"><name pos:start="173:21" pos:end="173:27">GEM_ISR</name></expr>]</index></name> <operator pos:start="173:30" pos:end="173:31">|=</operator> <name pos:start="173:33" pos:end="173:46">GEM_INT_TXCMPL</name> <operator pos:start="173:48" pos:end="173:48">&amp;</operator> <operator pos:start="173:50" pos:end="173:50">~</operator><operator pos:start="173:51" pos:end="173:51">(</operator><name pos:start="173:52" pos:end="173:67"><name pos:start="173:52" pos:end="173:52">s</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:58">regs</name><index pos:start="173:59" pos:end="173:67">[<expr pos:start="173:60" pos:end="173:66"><name pos:start="173:60" pos:end="173:66">GEM_IMR</name></expr>]</index></name><operator pos:start="173:68" pos:end="173:68">)</operator></expr>;</expr_stmt>



            <comment type="block" pos:start="177:13" pos:end="177:47">/* Update queue interrupt status */</comment>

            <if_stmt pos:start="179:13" pos:end="185:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:43">(<expr pos:start="179:17" pos:end="179:42"><name pos:start="179:17" pos:end="179:38"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:38">num_priority_queues</name></name> <operator pos:start="179:40" pos:end="179:40">&gt;</operator> <literal type="number" pos:start="179:42" pos:end="179:42">1</literal></expr>)</condition> <block pos:start="179:45" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:73">

                <expr_stmt pos:start="181:17" pos:end="183:73"><expr pos:start="181:17" pos:end="183:72"><name pos:start="181:17" pos:end="181:46"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:23">regs</name><index pos:start="181:24" pos:end="181:46">[<expr pos:start="181:25" pos:end="181:45"><name pos:start="181:25" pos:end="181:41">GEM_INT_Q1_STATUS</name> <operator pos:start="181:43" pos:end="181:43">+</operator> <name pos:start="181:45" pos:end="181:45">q</name></expr>]</index></name> <operator pos:start="181:48" pos:end="181:49">|=</operator>

                        <name pos:start="183:25" pos:end="183:38">GEM_INT_TXCMPL</name> <operator pos:start="183:40" pos:end="183:40">&amp;</operator> <operator pos:start="183:42" pos:end="183:42">~</operator><operator pos:start="183:43" pos:end="183:43">(</operator><name pos:start="183:44" pos:end="183:71"><name pos:start="183:44" pos:end="183:44">s</name><operator pos:start="183:45" pos:end="183:46">-&gt;</operator><name pos:start="183:47" pos:end="183:50">regs</name><index pos:start="183:51" pos:end="183:71">[<expr pos:start="183:52" pos:end="183:70"><name pos:start="183:52" pos:end="183:66">GEM_INT_Q1_MASK</name> <operator pos:start="183:68" pos:end="183:68">+</operator> <name pos:start="183:70" pos:end="183:70">q</name></expr>]</index></name><operator pos:start="183:72" pos:end="183:72">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="189:13" pos:end="189:47">/* Handle interrupt consequences */</comment>

            <expr_stmt pos:start="191:13" pos:end="191:37"><expr pos:start="191:13" pos:end="191:36"><call pos:start="191:13" pos:end="191:36"><name pos:start="191:13" pos:end="191:33">gem_update_int_status</name><argument_list pos:start="191:34" pos:end="191:36">(<argument pos:start="191:35" pos:end="191:35"><expr pos:start="191:35" pos:end="191:35"><name pos:start="191:35" pos:end="191:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="195:13" pos:end="195:46">/* Is checksum offload enabled? */</comment>

            <if_stmt pos:start="197:13" pos:end="201:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:61">(<expr pos:start="197:17" pos:end="197:60"><name pos:start="197:17" pos:end="197:35"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:23">regs</name><index pos:start="197:24" pos:end="197:35">[<expr pos:start="197:25" pos:end="197:34"><name pos:start="197:25" pos:end="197:34">GEM_DMACFG</name></expr>]</index></name> <operator pos:start="197:37" pos:end="197:37">&amp;</operator> <name pos:start="197:39" pos:end="197:60">GEM_DMACFG_TXCSUM_OFFL</name></expr>)</condition> <block pos:start="197:63" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:63">

                <expr_stmt pos:start="199:17" pos:end="199:63"><expr pos:start="199:17" pos:end="199:62"><call pos:start="199:17" pos:end="199:62"><name pos:start="199:17" pos:end="199:38">net_checksum_calculate</name><argument_list pos:start="199:39" pos:end="199:62">(<argument pos:start="199:40" pos:end="199:48"><expr pos:start="199:40" pos:end="199:48"><name pos:start="199:40" pos:end="199:48">tx_packet</name></expr></argument>, <argument pos:start="199:51" pos:end="199:61"><expr pos:start="199:51" pos:end="199:61"><name pos:start="199:51" pos:end="199:61">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="205:13" pos:end="205:39">/* Update MAC statistics */</comment>

            <expr_stmt pos:start="207:13" pos:end="207:64"><expr pos:start="207:13" pos:end="207:63"><call pos:start="207:13" pos:end="207:63"><name pos:start="207:13" pos:end="207:36">gem_transmit_updatestats</name><argument_list pos:start="207:37" pos:end="207:63">(<argument pos:start="207:38" pos:end="207:38"><expr pos:start="207:38" pos:end="207:38"><name pos:start="207:38" pos:end="207:38">s</name></expr></argument>, <argument pos:start="207:41" pos:end="207:49"><expr pos:start="207:41" pos:end="207:49"><name pos:start="207:41" pos:end="207:49">tx_packet</name></expr></argument>, <argument pos:start="207:52" pos:end="207:62"><expr pos:start="207:52" pos:end="207:62"><name pos:start="207:52" pos:end="207:62">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="211:13" pos:end="211:43">/* Send the packet somewhere */</comment>

            <if_stmt pos:start="213:13" pos:end="223:13"><if pos:start="213:13" pos:end="217:13">if <condition pos:start="213:16" pos:end="213:76">(<expr pos:start="213:17" pos:end="213:75"><name pos:start="213:17" pos:end="213:27"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:27">phy_loop</name></name> <operator pos:start="213:29" pos:end="213:30">||</operator> <operator pos:start="213:32" pos:end="213:32">(</operator><name pos:start="213:33" pos:end="213:51"><name pos:start="213:33" pos:end="213:33">s</name><operator pos:start="213:34" pos:end="213:35">-&gt;</operator><name pos:start="213:36" pos:end="213:39">regs</name><index pos:start="213:40" pos:end="213:51">[<expr pos:start="213:41" pos:end="213:50"><name pos:start="213:41" pos:end="213:50">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="213:53" pos:end="213:53">&amp;</operator> <name pos:start="213:55" pos:end="213:74">GEM_NWCTRL_LOCALLOOP</name><operator pos:start="213:75" pos:end="213:75">)</operator></expr>)</condition> <block pos:start="213:78" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:76">

                <expr_stmt pos:start="215:17" pos:end="215:76"><expr pos:start="215:17" pos:end="215:75"><call pos:start="215:17" pos:end="215:75"><name pos:start="215:17" pos:end="215:27">gem_receive</name><argument_list pos:start="215:28" pos:end="215:75">(<argument pos:start="215:29" pos:end="215:50"><expr pos:start="215:29" pos:end="215:50"><call pos:start="215:29" pos:end="215:50"><name pos:start="215:29" pos:end="215:42">qemu_get_queue</name><argument_list pos:start="215:43" pos:end="215:50">(<argument pos:start="215:44" pos:end="215:49"><expr pos:start="215:44" pos:end="215:49"><name pos:start="215:44" pos:end="215:49"><name pos:start="215:44" pos:end="215:44">s</name><operator pos:start="215:45" pos:end="215:46">-&gt;</operator><name pos:start="215:47" pos:end="215:49">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="215:53" pos:end="215:61"><expr pos:start="215:53" pos:end="215:61"><name pos:start="215:53" pos:end="215:61">tx_packet</name></expr></argument>, <argument pos:start="215:64" pos:end="215:74"><expr pos:start="215:64" pos:end="215:74"><name pos:start="215:64" pos:end="215:74">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="217:15" pos:end="223:13">else <block pos:start="217:20" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:46">

                <expr_stmt pos:start="219:17" pos:end="221:46"><expr pos:start="219:17" pos:end="221:45"><call pos:start="219:17" pos:end="221:45"><name pos:start="219:17" pos:end="219:32">qemu_send_packet</name><argument_list pos:start="219:33" pos:end="221:45">(<argument pos:start="219:34" pos:end="219:55"><expr pos:start="219:34" pos:end="219:55"><call pos:start="219:34" pos:end="219:55"><name pos:start="219:34" pos:end="219:47">qemu_get_queue</name><argument_list pos:start="219:48" pos:end="219:55">(<argument pos:start="219:49" pos:end="219:54"><expr pos:start="219:49" pos:end="219:54"><name pos:start="219:49" pos:end="219:54"><name pos:start="219:49" pos:end="219:49">s</name><operator pos:start="219:50" pos:end="219:51">-&gt;</operator><name pos:start="219:52" pos:end="219:54">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="219:58" pos:end="219:66"><expr pos:start="219:58" pos:end="219:66"><name pos:start="219:58" pos:end="219:66">tx_packet</name></expr></argument>,

                                 <argument pos:start="221:34" pos:end="221:44"><expr pos:start="221:34" pos:end="221:44"><name pos:start="221:34" pos:end="221:44">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="227:13" pos:end="227:41">/* Prepare for next packet */</comment>

            <expr_stmt pos:start="229:13" pos:end="229:26"><expr pos:start="229:13" pos:end="229:25"><name pos:start="229:13" pos:end="229:13">p</name> <operator pos:start="229:15" pos:end="229:15">=</operator> <name pos:start="229:17" pos:end="229:25">tx_packet</name></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:28"><expr pos:start="231:13" pos:end="231:27"><name pos:start="231:13" pos:end="231:23">total_bytes</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <literal type="number" pos:start="231:27" pos:end="231:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="237:9" pos:end="237:34">/* read next descriptor */</comment>

        <if_stmt pos:start="239:9" pos:end="249:9"><if pos:start="239:9" pos:end="245:9">if <condition pos:start="239:12" pos:end="239:35">(<expr pos:start="239:13" pos:end="239:34"><call pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:28">tx_desc_get_wrap</name><argument_list pos:start="239:29" pos:end="239:34">(<argument pos:start="239:30" pos:end="239:33"><expr pos:start="239:30" pos:end="239:33"><name pos:start="239:30" pos:end="239:33">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="239:37" pos:end="245:9">{<block_content pos:start="241:13" pos:end="243:52">

            <expr_stmt pos:start="241:13" pos:end="241:35"><expr pos:start="241:13" pos:end="241:34"><call pos:start="241:13" pos:end="241:34"><name pos:start="241:13" pos:end="241:28">tx_desc_set_last</name><argument_list pos:start="241:29" pos:end="241:34">(<argument pos:start="241:30" pos:end="241:33"><expr pos:start="241:30" pos:end="241:33"><name pos:start="241:30" pos:end="241:33">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:52"><expr pos:start="243:13" pos:end="243:51"><name pos:start="243:13" pos:end="243:28">packet_desc_addr</name> <operator pos:start="243:30" pos:end="243:30">=</operator> <name pos:start="243:32" pos:end="243:51"><name pos:start="243:32" pos:end="243:32">s</name><operator pos:start="243:33" pos:end="243:34">-&gt;</operator><name pos:start="243:35" pos:end="243:38">regs</name><index pos:start="243:39" pos:end="243:51">[<expr pos:start="243:40" pos:end="243:50"><name pos:start="243:40" pos:end="243:50">GEM_TXQBASE</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="245:11" pos:end="249:9">else <block pos:start="245:16" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:34">

            <expr_stmt pos:start="247:13" pos:end="247:34"><expr pos:start="247:13" pos:end="247:33"><name pos:start="247:13" pos:end="247:28">packet_desc_addr</name> <operator pos:start="247:30" pos:end="247:31">+=</operator> <literal type="number" pos:start="247:33" pos:end="247:33">8</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:75"><expr pos:start="251:9" pos:end="251:74"><call pos:start="251:9" pos:end="251:74"><name pos:start="251:9" pos:end="251:16">DB_PRINT</name><argument_list pos:start="251:17" pos:end="251:74">(<argument pos:start="251:18" pos:end="251:55"><expr pos:start="251:18" pos:end="251:55"><literal type="string" pos:start="251:18" pos:end="251:38">"read descriptor 0x%"</literal> <name pos:start="251:40" pos:end="251:50">HWADDR_PRIx</name> <literal type="string" pos:start="251:52" pos:end="251:55">"\n"</literal></expr></argument>, <argument pos:start="251:58" pos:end="251:73"><expr pos:start="251:58" pos:end="251:73"><name pos:start="251:58" pos:end="251:73">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="255:64"><expr pos:start="253:9" pos:end="255:63"><call pos:start="253:9" pos:end="255:63"><name pos:start="253:9" pos:end="253:32">cpu_physical_memory_read</name><argument_list pos:start="253:33" pos:end="255:63">(<argument pos:start="253:34" pos:end="253:49"><expr pos:start="253:34" pos:end="253:49"><name pos:start="253:34" pos:end="253:49">packet_desc_addr</name></expr></argument>,

                                 <argument pos:start="255:34" pos:end="255:48"><expr pos:start="255:34" pos:end="255:48"><operator pos:start="255:34" pos:end="255:34">(</operator><name pos:start="255:35" pos:end="255:41">uint8_t</name> <operator pos:start="255:43" pos:end="255:43">*</operator><operator pos:start="255:44" pos:end="255:44">)</operator><name pos:start="255:45" pos:end="255:48">desc</name></expr></argument>, <argument pos:start="255:51" pos:end="255:62"><expr pos:start="255:51" pos:end="255:62"><sizeof pos:start="255:51" pos:end="255:62">sizeof<argument_list pos:start="255:57" pos:end="255:62">(<argument pos:start="255:58" pos:end="255:61"><expr pos:start="255:58" pos:end="255:61"><name pos:start="255:58" pos:end="255:61">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="261:5" pos:end="269:5"><if pos:start="261:5" pos:end="269:5">if <condition pos:start="261:8" pos:end="261:31">(<expr pos:start="261:9" pos:end="261:30"><call pos:start="261:9" pos:end="261:30"><name pos:start="261:9" pos:end="261:24">tx_desc_get_used</name><argument_list pos:start="261:25" pos:end="261:30">(<argument pos:start="261:26" pos:end="261:29"><expr pos:start="261:26" pos:end="261:29"><name pos:start="261:26" pos:end="261:29">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:33" pos:end="269:5">{<block_content pos:start="263:9" pos:end="267:33">

        <expr_stmt pos:start="263:9" pos:end="263:51"><expr pos:start="263:9" pos:end="263:50"><name pos:start="263:9" pos:end="263:29"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:15">regs</name><index pos:start="263:16" pos:end="263:29">[<expr pos:start="263:17" pos:end="263:28"><name pos:start="263:17" pos:end="263:28">GEM_TXSTATUS</name></expr>]</index></name> <operator pos:start="263:31" pos:end="263:32">|=</operator> <name pos:start="263:34" pos:end="263:50">GEM_TXSTATUS_USED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:65"><expr pos:start="265:9" pos:end="265:64"><name pos:start="265:9" pos:end="265:24"><name pos:start="265:9" pos:end="265:9">s</name><operator pos:start="265:10" pos:end="265:11">-&gt;</operator><name pos:start="265:12" pos:end="265:15">regs</name><index pos:start="265:16" pos:end="265:24">[<expr pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:23">GEM_ISR</name></expr>]</index></name> <operator pos:start="265:26" pos:end="265:27">|=</operator> <name pos:start="265:29" pos:end="265:42">GEM_INT_TXUSED</name> <operator pos:start="265:44" pos:end="265:44">&amp;</operator> <operator pos:start="265:46" pos:end="265:46">~</operator><operator pos:start="265:47" pos:end="265:47">(</operator><name pos:start="265:48" pos:end="265:63"><name pos:start="265:48" pos:end="265:48">s</name><operator pos:start="265:49" pos:end="265:50">-&gt;</operator><name pos:start="265:51" pos:end="265:54">regs</name><index pos:start="265:55" pos:end="265:63">[<expr pos:start="265:56" pos:end="265:62"><name pos:start="265:56" pos:end="265:62">GEM_IMR</name></expr>]</index></name><operator pos:start="265:64" pos:end="265:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:33"><expr pos:start="267:9" pos:end="267:32"><call pos:start="267:9" pos:end="267:32"><name pos:start="267:9" pos:end="267:29">gem_update_int_status</name><argument_list pos:start="267:30" pos:end="267:32">(<argument pos:start="267:31" pos:end="267:31"><expr pos:start="267:31" pos:end="267:31"><name pos:start="267:31" pos:end="267:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
