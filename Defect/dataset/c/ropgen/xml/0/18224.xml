<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18224.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:50">rtas_ibm_query_interrupt_source_number</name><parameter_list pos:start="1:51" pos:end="13:69">(<parameter pos:start="1:52" pos:end="1:66"><decl pos:start="1:52" pos:end="1:66"><type pos:start="1:52" pos:end="1:66"><name pos:start="1:52" pos:end="1:61">PowerPCCPU</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">cpu</name></decl></parameter>,

                                                   <parameter pos:start="3:52" pos:end="3:74"><decl pos:start="3:52" pos:end="3:74"><type pos:start="3:52" pos:end="3:74"><name pos:start="3:52" pos:end="3:67">sPAPREnvironment</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:74">spapr</name></decl></parameter>,

                                                   <parameter pos:start="5:52" pos:end="5:65"><decl pos:start="5:52" pos:end="5:65"><type pos:start="5:52" pos:end="5:65"><name pos:start="5:52" pos:end="5:59">uint32_t</name></type> <name pos:start="5:61" pos:end="5:65">token</name></decl></parameter>,

                                                   <parameter pos:start="7:52" pos:end="7:65"><decl pos:start="7:52" pos:end="7:65"><type pos:start="7:52" pos:end="7:65"><name pos:start="7:52" pos:end="7:59">uint32_t</name></type> <name pos:start="7:61" pos:end="7:65">nargs</name></decl></parameter>,

                                                   <parameter pos:start="9:52" pos:end="9:68"><decl pos:start="9:52" pos:end="9:68"><type pos:start="9:52" pos:end="9:68"><name pos:start="9:52" pos:end="9:63">target_ulong</name></type> <name pos:start="9:65" pos:end="9:68">args</name></decl></parameter>,

                                                   <parameter pos:start="11:52" pos:end="11:64"><decl pos:start="11:52" pos:end="11:64"><type pos:start="11:52" pos:end="11:64"><name pos:start="11:52" pos:end="11:59">uint32_t</name></type> <name pos:start="11:61" pos:end="11:64">nret</name></decl></parameter>,

                                                   <parameter pos:start="13:52" pos:end="13:68"><decl pos:start="13:52" pos:end="13:68"><type pos:start="13:52" pos:end="13:68"><name pos:start="13:52" pos:end="13:63">target_ulong</name></type> <name pos:start="13:65" pos:end="13:68">rets</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="79:1">{<block_content pos:start="17:5" pos:end="77:24">

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:24">config_addr</name> <init pos:start="17:26" pos:end="17:43">= <expr pos:start="17:28" pos:end="17:43"><call pos:start="17:28" pos:end="17:43"><name pos:start="17:28" pos:end="17:34">rtas_ld</name><argument_list pos:start="17:35" pos:end="17:43">(<argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">args</name></expr></argument>, <argument pos:start="17:42" pos:end="17:42"><expr pos:start="17:42" pos:end="17:42"><literal type="number" pos:start="17:42" pos:end="17:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:74"><decl pos:start="19:5" pos:end="19:73"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:17">buid</name> <init pos:start="19:19" pos:end="19:73">= <expr pos:start="19:21" pos:end="19:73"><operator pos:start="19:21" pos:end="19:21">(</operator><operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:30">uint64_t</name><operator pos:start="19:31" pos:end="19:31">)</operator><call pos:start="19:32" pos:end="19:47"><name pos:start="19:32" pos:end="19:38">rtas_ld</name><argument_list pos:start="19:39" pos:end="19:47">(<argument pos:start="19:40" pos:end="19:43"><expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">args</name></expr></argument>, <argument pos:start="19:46" pos:end="19:46"><expr pos:start="19:46" pos:end="19:46"><literal type="number" pos:start="19:46" pos:end="19:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="19:49" pos:end="19:50">&lt;&lt;</operator> <literal type="number" pos:start="19:52" pos:end="19:53">32</literal><operator pos:start="19:54" pos:end="19:54">)</operator> <operator pos:start="19:56" pos:end="19:56">|</operator> <call pos:start="19:58" pos:end="19:73"><name pos:start="19:58" pos:end="19:64">rtas_ld</name><argument_list pos:start="19:65" pos:end="19:73">(<argument pos:start="19:66" pos:end="19:69"><expr pos:start="19:66" pos:end="19:69"><name pos:start="19:66" pos:end="19:69">args</name></expr></argument>, <argument pos:start="19:72" pos:end="19:72"><expr pos:start="19:72" pos:end="19:72"><literal type="number" pos:start="19:72" pos:end="19:72">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:68"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:29">intr_src_num</name> <init pos:start="21:31" pos:end="21:34">= <expr pos:start="21:33" pos:end="21:34"><operator pos:start="21:33" pos:end="21:33">-</operator><literal type="number" pos:start="21:34" pos:end="21:34">1</literal></expr></init></decl>, <decl pos:start="21:37" pos:end="21:67"><type ref="prev" pos:start="21:5" pos:end="21:16"/><name pos:start="21:37" pos:end="21:48">ioa_intr_num</name> <init pos:start="21:50" pos:end="21:67">= <expr pos:start="21:52" pos:end="21:67"><call pos:start="21:52" pos:end="21:67"><name pos:start="21:52" pos:end="21:58">rtas_ld</name><argument_list pos:start="21:59" pos:end="21:67">(<argument pos:start="21:60" pos:end="21:63"><expr pos:start="21:60" pos:end="21:63"><name pos:start="21:60" pos:end="21:63">args</name></expr></argument>, <argument pos:start="21:66" pos:end="21:66"><expr pos:start="21:66" pos:end="21:66"><literal type="number" pos:start="21:66" pos:end="21:66">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:17">sPAPRPHBState</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:22">phb</name> <init pos:start="23:24" pos:end="23:29">= <expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">PCIDevice</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:19">pdev</name> <init pos:start="25:21" pos:end="25:26">= <expr pos:start="25:23" pos:end="25:26"><name pos:start="25:23" pos:end="25:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:17">spapr_pci_msi</name> <modifier pos:start="27:19" pos:end="27:19">*</modifier></type><name pos:start="27:20" pos:end="27:22">msi</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:28">/* Find sPAPRPHBState */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:7">phb</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:31"><name pos:start="33:11" pos:end="33:18">find_phb</name><argument_list pos:start="33:19" pos:end="33:31">(<argument pos:start="33:20" pos:end="33:24"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24">spapr</name></expr></argument>, <argument pos:start="33:27" pos:end="33:30"><expr pos:start="33:27" pos:end="33:30"><name pos:start="33:27" pos:end="33:30">buid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">phb</name></expr>)</condition> <block pos:start="35:14" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:50">

        <expr_stmt pos:start="37:9" pos:end="37:50"><expr pos:start="37:9" pos:end="37:49"><name pos:start="37:9" pos:end="37:12">pdev</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:49"><name pos:start="37:16" pos:end="37:23">find_dev</name><argument_list pos:start="37:24" pos:end="37:49">(<argument pos:start="37:25" pos:end="37:29"><expr pos:start="37:25" pos:end="37:29"><name pos:start="37:25" pos:end="37:29">spapr</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><name pos:start="37:32" pos:end="37:35">buid</name></expr></argument>, <argument pos:start="37:38" pos:end="37:48"><expr pos:start="37:38" pos:end="37:48"><name pos:start="37:38" pos:end="37:48">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:22">(<expr pos:start="41:9" pos:end="41:21"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:12">phb</name> <operator pos:start="41:14" pos:end="41:15">||</operator> <operator pos:start="41:17" pos:end="41:17">!</operator><name pos:start="41:18" pos:end="41:21">pdev</name></expr>)</condition> <block pos:start="41:24" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:15">rtas_st</name><argument_list pos:start="43:16" pos:end="43:46">(<argument pos:start="43:17" pos:end="43:20"><expr pos:start="43:17" pos:end="43:20"><name pos:start="43:17" pos:end="43:20">rets</name></expr></argument>, <argument pos:start="43:23" pos:end="43:23"><expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr></argument>, <argument pos:start="43:26" pos:end="43:45"><expr pos:start="43:26" pos:end="43:45"><name pos:start="43:26" pos:end="43:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:46">/* Find device descriptor and start IRQ */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:72"><expr pos:start="53:5" pos:end="53:71"><name pos:start="53:5" pos:end="53:7">msi</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <operator pos:start="53:11" pos:end="53:11">(</operator><name pos:start="53:12" pos:end="53:24">spapr_pci_msi</name> <operator pos:start="53:26" pos:end="53:26">*</operator><operator pos:start="53:27" pos:end="53:27">)</operator> <call pos:start="53:29" pos:end="53:71"><name pos:start="53:29" pos:end="53:47">g_hash_table_lookup</name><argument_list pos:start="53:48" pos:end="53:71">(<argument pos:start="53:49" pos:end="53:56"><expr pos:start="53:49" pos:end="53:56"><name pos:start="53:49" pos:end="53:56"><name pos:start="53:49" pos:end="53:51">phb</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:56">msi</name></name></expr></argument>, <argument pos:start="53:59" pos:end="53:70"><expr pos:start="53:59" pos:end="53:70"><operator pos:start="53:59" pos:end="53:59">&amp;</operator><name pos:start="53:60" pos:end="53:70">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:75">(<expr pos:start="55:9" pos:end="55:74"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:12">msi</name> <operator pos:start="55:14" pos:end="55:15">||</operator> <operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:31"><name pos:start="55:18" pos:end="55:20">msi</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:31">first_irq</name></name> <operator pos:start="55:33" pos:end="55:34">||</operator> <operator pos:start="55:36" pos:end="55:36">!</operator><name pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:39">msi</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:44">num</name></name> <operator pos:start="55:46" pos:end="55:47">||</operator> <operator pos:start="55:49" pos:end="55:49">(</operator><name pos:start="55:50" pos:end="55:61">ioa_intr_num</name> <operator pos:start="55:63" pos:end="55:64">&gt;=</operator> <name pos:start="55:66" pos:end="55:73"><name pos:start="55:66" pos:end="55:68">msi</name><operator pos:start="55:69" pos:end="55:70">-&gt;</operator><name pos:start="55:71" pos:end="55:73">num</name></name><operator pos:start="55:74" pos:end="55:74">)</operator></expr>)</condition> <block pos:start="55:77" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:15">

        <expr_stmt pos:start="57:9" pos:end="57:68"><expr pos:start="57:9" pos:end="57:67"><call pos:start="57:9" pos:end="57:67"><name pos:start="57:9" pos:end="57:27">trace_spapr_pci_msi</name><argument_list pos:start="57:28" pos:end="57:67">(<argument pos:start="57:29" pos:end="57:53"><expr pos:start="57:29" pos:end="57:53"><literal type="string" pos:start="57:29" pos:end="57:53">"Failed to return vector"</literal></expr></argument>, <argument pos:start="57:56" pos:end="57:66"><expr pos:start="57:56" pos:end="57:66"><name pos:start="57:56" pos:end="57:66">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:44"><expr pos:start="59:9" pos:end="59:43"><call pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:15">rtas_st</name><argument_list pos:start="59:16" pos:end="59:43">(<argument pos:start="59:17" pos:end="59:20"><expr pos:start="59:17" pos:end="59:20"><name pos:start="59:17" pos:end="59:20">rets</name></expr></argument>, <argument pos:start="59:23" pos:end="59:23"><expr pos:start="59:23" pos:end="59:23"><literal type="number" pos:start="59:23" pos:end="59:23">0</literal></expr></argument>, <argument pos:start="59:26" pos:end="59:42"><expr pos:start="59:26" pos:end="59:42"><name pos:start="59:26" pos:end="59:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:16">intr_src_num</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:33"><name pos:start="65:20" pos:end="65:22">msi</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:33">first_irq</name></name> <operator pos:start="65:35" pos:end="65:35">+</operator> <name pos:start="65:37" pos:end="65:48">ioa_intr_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="69:73"><expr pos:start="67:5" pos:end="69:72"><call pos:start="67:5" pos:end="69:72"><name pos:start="67:5" pos:end="67:58">trace_spapr_pci_rtas_ibm_query_interrupt_source_number</name><argument_list pos:start="67:59" pos:end="69:72">(<argument pos:start="67:60" pos:end="67:71"><expr pos:start="67:60" pos:end="67:71"><name pos:start="67:60" pos:end="67:71">ioa_intr_num</name></expr></argument>,

                                                           <argument pos:start="69:60" pos:end="69:71"><expr pos:start="69:60" pos:end="69:71"><name pos:start="69:60" pos:end="69:71">intr_src_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:39"><expr pos:start="73:5" pos:end="73:38"><call pos:start="73:5" pos:end="73:38"><name pos:start="73:5" pos:end="73:11">rtas_st</name><argument_list pos:start="73:12" pos:end="73:38">(<argument pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:16"><name pos:start="73:13" pos:end="73:16">rets</name></expr></argument>, <argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr></argument>, <argument pos:start="73:22" pos:end="73:37"><expr pos:start="73:22" pos:end="73:37"><name pos:start="73:22" pos:end="73:37">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:35"><expr pos:start="75:5" pos:end="75:34"><call pos:start="75:5" pos:end="75:34"><name pos:start="75:5" pos:end="75:11">rtas_st</name><argument_list pos:start="75:12" pos:end="75:34">(<argument pos:start="75:13" pos:end="75:16"><expr pos:start="75:13" pos:end="75:16"><name pos:start="75:13" pos:end="75:16">rets</name></expr></argument>, <argument pos:start="75:19" pos:end="75:19"><expr pos:start="75:19" pos:end="75:19"><literal type="number" pos:start="75:19" pos:end="75:19">1</literal></expr></argument>, <argument pos:start="75:22" pos:end="75:33"><expr pos:start="75:22" pos:end="75:33"><name pos:start="75:22" pos:end="75:33">intr_src_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><call pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:11">rtas_st</name><argument_list pos:start="77:12" pos:end="77:23">(<argument pos:start="77:13" pos:end="77:16"><expr pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:16">rets</name></expr></argument>, <argument pos:start="77:19" pos:end="77:19"><expr pos:start="77:19" pos:end="77:19"><literal type="number" pos:start="77:19" pos:end="77:19">2</literal></expr></argument>, <argument pos:start="77:22" pos:end="77:22"><expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block" pos:start="77:25" pos:end="77:51">/* 0 == level; 1 == edge */</comment>

</block_content>}</block></function>
</unit>
