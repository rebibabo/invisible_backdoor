<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19255.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">armv7m_nvic_set_pending</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:50"><decl pos:start="1:44" pos:end="1:50"><type pos:start="1:44" pos:end="1:50"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:50">irq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">NVICState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:38">= <expr pos:start="5:20" pos:end="5:38"><operator pos:start="5:20" pos:end="5:20">(</operator><name pos:start="5:21" pos:end="5:29">NVICState</name> <operator pos:start="5:31" pos:end="5:31">*</operator><operator pos:start="5:32" pos:end="5:32">)</operator><name pos:start="5:33" pos:end="5:38">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">VecInfo</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">vec</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:56"><expr pos:start="11:5" pos:end="11:55"><call pos:start="11:5" pos:end="11:55"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:55">(<argument pos:start="11:12" pos:end="11:54"><expr pos:start="11:12" pos:end="11:54"><name pos:start="11:12" pos:end="11:14">irq</name> <operator pos:start="11:16" pos:end="11:16">&gt;</operator> <name pos:start="11:18" pos:end="11:34">ARMV7M_EXCP_RESET</name> <operator pos:start="11:36" pos:end="11:37">&amp;&amp;</operator> <name pos:start="11:39" pos:end="11:41">irq</name> <operator pos:start="11:43" pos:end="11:43">&lt;</operator> <name pos:start="11:45" pos:end="11:54"><name pos:start="11:45" pos:end="11:45">s</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:54">num_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:7">vec</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <operator pos:start="15:11" pos:end="15:11">&amp;</operator><name pos:start="15:12" pos:end="15:26"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:21">vectors</name><index pos:start="15:22" pos:end="15:26">[<expr pos:start="15:23" pos:end="15:25"><name pos:start="15:23" pos:end="15:25">irq</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:57"><expr pos:start="17:5" pos:end="17:56"><call pos:start="17:5" pos:end="17:56"><name pos:start="17:5" pos:end="17:26">trace_nvic_set_pending</name><argument_list pos:start="17:27" pos:end="17:56">(<argument pos:start="17:28" pos:end="17:30"><expr pos:start="17:28" pos:end="17:30"><name pos:start="17:28" pos:end="17:30">irq</name></expr></argument>, <argument pos:start="17:33" pos:end="17:44"><expr pos:start="17:33" pos:end="17:44"><name pos:start="17:33" pos:end="17:44"><name pos:start="17:33" pos:end="17:35">vec</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:44">enabled</name></name></expr></argument>, <argument pos:start="17:47" pos:end="17:55"><expr pos:start="17:47" pos:end="17:55"><name pos:start="17:47" pos:end="17:55"><name pos:start="17:47" pos:end="17:49">vec</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:55">prio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="23:5" pos:end="121:5"><if pos:start="23:5" pos:end="121:5">if <condition pos:start="23:8" pos:end="23:60">(<expr pos:start="23:9" pos:end="23:59"><name pos:start="23:9" pos:end="23:11">irq</name> <operator pos:start="23:13" pos:end="23:14">&gt;=</operator> <name pos:start="23:16" pos:end="23:31">ARMV7M_EXCP_HARD</name> <operator pos:start="23:33" pos:end="23:34">&amp;&amp;</operator> <name pos:start="23:36" pos:end="23:38">irq</name> <operator pos:start="23:40" pos:end="23:40">&lt;</operator> <name pos:start="23:42" pos:end="23:59">ARMV7M_EXCP_PENDSV</name></expr>)</condition> <block pos:start="23:62" pos:end="121:5">{<block_content pos:start="65:9" pos:end="119:9">

        <comment type="block" pos:start="25:9" pos:end="63:11">/* If a synchronous exception is pending then it may be

         * escalated to HardFault if:

         *  * it is equal or lower priority to current execution

         *  * it is disabled

         * (ie we need to take it immediately but we can't do so).

         * Asynchronous exceptions (and interrupts) simply remain pending.

         *

         * For QEMU, we don't have any imprecise (asynchronous) faults,

         * so we can assume that PREFETCH_ABORT and DATA_ABORT are always

         * synchronous.

         * Debug exceptions are awkward because only Debug exceptions

         * resulting from the BKPT instruction should be escalated,

         * but we don't currently implement any Debug exceptions other

         * than those that result from BKPT, so we treat all debug exceptions

         * as needing escalation.

         *

         * This all means we can identify whether to escalate based only on

         * the exception number and don't (yet) need the caller to explicitly

         * tell us whether this exception is synchronous or not.

         */</comment>

        <decl_stmt pos:start="65:9" pos:end="65:40"><decl pos:start="65:9" pos:end="65:39"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:19">running</name> <init pos:start="65:21" pos:end="65:39">= <expr pos:start="65:23" pos:end="65:39"><call pos:start="65:23" pos:end="65:39"><name pos:start="65:23" pos:end="65:36">nvic_exec_prio</name><argument_list pos:start="65:37" pos:end="65:39">(<argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><name pos:start="65:38" pos:end="65:38">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:30"><decl pos:start="67:9" pos:end="67:29"><type pos:start="67:9" pos:end="67:12"><name pos:start="67:9" pos:end="67:12">bool</name></type> <name pos:start="67:14" pos:end="67:21">escalate</name> <init pos:start="67:23" pos:end="67:29">= <expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:29">false</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="71:9" pos:end="83:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:33">(<expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:15">vec</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">prio</name></name> <operator pos:start="71:23" pos:end="71:24">&gt;=</operator> <name pos:start="71:26" pos:end="71:32">running</name></expr>)</condition> <block pos:start="71:35" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:28">

            <expr_stmt pos:start="73:13" pos:end="73:62"><expr pos:start="73:13" pos:end="73:61"><call pos:start="73:13" pos:end="73:61"><name pos:start="73:13" pos:end="73:36">trace_nvic_escalate_prio</name><argument_list pos:start="73:37" pos:end="73:61">(<argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><name pos:start="73:38" pos:end="73:40">irq</name></expr></argument>, <argument pos:start="73:43" pos:end="73:51"><expr pos:start="73:43" pos:end="73:51"><name pos:start="73:43" pos:end="73:51"><name pos:start="73:43" pos:end="73:45">vec</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:51">prio</name></name></expr></argument>, <argument pos:start="73:54" pos:end="73:60"><expr pos:start="73:54" pos:end="73:60"><name pos:start="73:54" pos:end="73:60">running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:28"><expr pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:20">escalate</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:27">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="77:11" pos:end="83:9">else if <condition pos:start="77:19" pos:end="77:33">(<expr pos:start="77:20" pos:end="77:32"><operator pos:start="77:20" pos:end="77:20">!</operator><name pos:start="77:21" pos:end="77:32"><name pos:start="77:21" pos:end="77:23">vec</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:32">enabled</name></name></expr>)</condition> <block pos:start="77:35" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:28">

            <expr_stmt pos:start="79:13" pos:end="79:46"><expr pos:start="79:13" pos:end="79:45"><call pos:start="79:13" pos:end="79:45"><name pos:start="79:13" pos:end="79:40">trace_nvic_escalate_disabled</name><argument_list pos:start="79:41" pos:end="79:45">(<argument pos:start="79:42" pos:end="79:44"><expr pos:start="79:42" pos:end="79:44"><name pos:start="79:42" pos:end="79:44">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:28"><expr pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:20">escalate</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:27">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="119:9"><if pos:start="87:9" pos:end="119:9">if <condition pos:start="87:12" pos:end="87:21">(<expr pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:20">escalate</name></expr>)</condition> <block pos:start="87:23" pos:end="119:9">{<block_content pos:start="89:13" pos:end="117:59">

            <if_stmt pos:start="89:13" pos:end="107:13"><if pos:start="89:13" pos:end="107:13">if <condition pos:start="89:16" pos:end="89:28">(<expr pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:23">running</name> <operator pos:start="89:25" pos:end="89:25">&lt;</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>)</condition> <block pos:start="89:30" pos:end="107:13">{<block_content pos:start="101:17" pos:end="105:67">

                <comment type="block" pos:start="91:17" pos:end="99:19">/* We want to escalate to HardFault but we can't take a

                 * synchronous HardFault at this point either. This is a

                 * Lockup condition due to a guest bug. We don't model

                 * Lockup, so report via cpu_abort() instead.

                 */</comment>

                <expr_stmt pos:start="101:17" pos:end="105:67"><expr pos:start="101:17" pos:end="105:66"><call pos:start="101:17" pos:end="105:66"><name pos:start="101:17" pos:end="101:25">cpu_abort</name><argument_list pos:start="101:26" pos:end="105:66">(<argument pos:start="101:27" pos:end="101:45"><expr pos:start="101:27" pos:end="101:45"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:45"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:33">cpu</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:45">parent_obj</name></name></expr></argument>,

                          <argument pos:start="103:27" pos:end="105:51"><expr pos:start="103:27" pos:end="105:51"><literal type="string" pos:start="103:27" pos:end="103:67">"Lockup: can't escalate %d to HardFault "</literal>

                          <literal type="string" pos:start="105:27" pos:end="105:51">"(current priority %d)\n"</literal></expr></argument>, <argument pos:start="105:54" pos:end="105:56"><expr pos:start="105:54" pos:end="105:56"><name pos:start="105:54" pos:end="105:56">irq</name></expr></argument>, <argument pos:start="105:59" pos:end="105:65"><expr pos:start="105:59" pos:end="105:65"><name pos:start="105:59" pos:end="105:65">running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="111:13" pos:end="111:72">/* We can do the escalation, so we take HardFault instead */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:35"><expr pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:15">irq</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:34">ARMV7M_EXCP_HARD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:35"><expr pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:15">vec</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <operator pos:start="115:19" pos:end="115:19">&amp;</operator><name pos:start="115:20" pos:end="115:34"><name pos:start="115:20" pos:end="115:20">s</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:29">vectors</name><index pos:start="115:30" pos:end="115:34">[<expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:33">irq</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:59"><expr pos:start="117:13" pos:end="117:58"><name pos:start="117:13" pos:end="117:32"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:18">cpu</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:23">env</name><operator pos:start="117:24" pos:end="117:24">.</operator><name pos:start="117:25" pos:end="117:27">v7m</name><operator pos:start="117:28" pos:end="117:28">.</operator><name pos:start="117:29" pos:end="117:32">hfsr</name></name> <operator pos:start="117:34" pos:end="117:35">|=</operator> <name pos:start="117:37" pos:end="117:58">R_V7M_HFSR_FORCED_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:22">(<expr pos:start="125:9" pos:end="125:21"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:21"><name pos:start="125:10" pos:end="125:12">vec</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:21">pending</name></name></expr>)</condition> <block pos:start="125:24" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:27">

        <expr_stmt pos:start="127:9" pos:end="127:25"><expr pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:11">vec</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:20">pending</name></name> <operator pos:start="127:22" pos:end="127:22">=</operator> <literal type="number" pos:start="127:24" pos:end="127:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:27"><expr pos:start="129:9" pos:end="129:26"><call pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:23">nvic_irq_update</name><argument_list pos:start="129:24" pos:end="129:26">(<argument pos:start="129:25" pos:end="129:25"><expr pos:start="129:25" pos:end="129:25"><name pos:start="129:25" pos:end="129:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
