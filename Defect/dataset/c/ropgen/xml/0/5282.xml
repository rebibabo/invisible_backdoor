<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5282.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">PCIDevice</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:38">qemu_pci_hot_add_nic</name><parameter_list pos:start="1:39" pos:end="5:60">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:46">Monitor</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">mon</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:58"><decl pos:start="3:40" pos:end="3:58"><type pos:start="3:40" pos:end="3:58"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:58">devaddr</name></decl></parameter>,

                                       <parameter pos:start="5:40" pos:end="5:59"><decl pos:start="5:40" pos:end="5:59"><type pos:start="5:40" pos:end="5:59"><specifier pos:start="5:40" pos:end="5:44">const</specifier> <name pos:start="5:46" pos:end="5:49">char</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:59">opts_str</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="75:1">{<block_content pos:start="9:5" pos:end="73:60">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QemuOpts</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">PCIBus</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:18">devfn</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:7">bus</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:44"><name pos:start="19:11" pos:end="19:27">pci_get_bus_devfn</name><argument_list pos:start="19:28" pos:end="19:44">(<argument pos:start="19:29" pos:end="19:34"><expr pos:start="19:29" pos:end="19:34"><operator pos:start="19:29" pos:end="19:29">&amp;</operator><name pos:start="19:30" pos:end="19:34">devfn</name></expr></argument>, <argument pos:start="19:37" pos:end="19:43"><expr pos:start="19:37" pos:end="19:43"><name pos:start="19:37" pos:end="19:43">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">bus</name></expr>)</condition> <block pos:start="21:15" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:20">

        <expr_stmt pos:start="23:9" pos:end="23:72"><expr pos:start="23:9" pos:end="23:71"><call pos:start="23:9" pos:end="23:71"><name pos:start="23:9" pos:end="23:22">monitor_printf</name><argument_list pos:start="23:23" pos:end="23:71">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">mon</name></expr></argument>, <argument pos:start="23:29" pos:end="23:61"><expr pos:start="23:29" pos:end="23:61"><literal type="string" pos:start="23:29" pos:end="23:61">"Invalid PCI device address %s\n"</literal></expr></argument>, <argument pos:start="23:64" pos:end="23:70"><expr pos:start="23:64" pos:end="23:70"><name pos:start="23:64" pos:end="23:70">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:41">(<expr pos:start="29:9" pos:end="29:40"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><operator pos:start="29:11" pos:end="29:11">(</operator><name pos:start="29:12" pos:end="29:19">BusState</name><operator pos:start="29:20" pos:end="29:20">*</operator><operator pos:start="29:21" pos:end="29:21">)</operator><name pos:start="29:22" pos:end="29:24">bus</name><operator pos:start="29:25" pos:end="29:25">)</operator><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:40">allow_hotplug</name></expr>)</condition> <block pos:start="29:43" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:20">

        <expr_stmt pos:start="31:9" pos:end="31:65"><expr pos:start="31:9" pos:end="31:64"><call pos:start="31:9" pos:end="31:64"><name pos:start="31:9" pos:end="31:22">monitor_printf</name><argument_list pos:start="31:23" pos:end="31:64">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">mon</name></expr></argument>, <argument pos:start="31:29" pos:end="31:63"><expr pos:start="31:29" pos:end="31:63"><literal type="string" pos:start="31:29" pos:end="31:63">"PCI bus doesn't support hotplug\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:79"><expr pos:start="39:5" pos:end="39:78"><name pos:start="39:5" pos:end="39:8">opts</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:78"><name pos:start="39:12" pos:end="39:26">qemu_opts_parse</name><argument_list pos:start="39:27" pos:end="39:78">(<argument pos:start="39:28" pos:end="39:48"><expr pos:start="39:28" pos:end="39:48"><call pos:start="39:28" pos:end="39:48"><name pos:start="39:28" pos:end="39:41">qemu_find_opts</name><argument_list pos:start="39:42" pos:end="39:48">(<argument pos:start="39:43" pos:end="39:47"><expr pos:start="39:43" pos:end="39:47"><literal type="string" pos:start="39:43" pos:end="39:47">"net"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:51" pos:end="39:74"><expr pos:start="39:51" pos:end="39:74"><ternary pos:start="39:51" pos:end="39:74"><condition pos:start="39:51" pos:end="39:60"><expr pos:start="39:51" pos:end="39:58"><name pos:start="39:51" pos:end="39:58">opts_str</name></expr> ?</condition><then pos:start="39:62" pos:end="39:69"> <expr pos:start="39:62" pos:end="39:69"><name pos:start="39:62" pos:end="39:69">opts_str</name></expr> </then><else pos:start="39:71" pos:end="39:74">: <expr pos:start="39:73" pos:end="39:74"><literal type="string" pos:start="39:73" pos:end="39:74">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="39:77" pos:end="39:77"><expr pos:start="39:77" pos:end="39:77"><literal type="number" pos:start="39:77" pos:end="39:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:14">(<expr pos:start="41:9" pos:end="41:13"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:13">opts</name></expr>)</condition> <block pos:start="41:16" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:20">

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><name pos:start="43:16" pos:end="43:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><call pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:16">qemu_opt_set</name><argument_list pos:start="49:17" pos:end="49:37">(<argument pos:start="49:18" pos:end="49:21"><expr pos:start="49:18" pos:end="49:21"><name pos:start="49:18" pos:end="49:21">opts</name></expr></argument>, <argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><literal type="string" pos:start="49:24" pos:end="49:29">"type"</literal></expr></argument>, <argument pos:start="49:32" pos:end="49:36"><expr pos:start="49:32" pos:end="49:36"><literal type="string" pos:start="49:32" pos:end="49:36">"nic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:46"><name pos:start="53:11" pos:end="53:25">net_client_init</name><argument_list pos:start="53:26" pos:end="53:46">(<argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><name pos:start="53:27" pos:end="53:30">opts</name></expr></argument>, <argument pos:start="53:33" pos:end="53:33"><expr pos:start="53:33" pos:end="53:33"><literal type="number" pos:start="53:33" pos:end="53:33">0</literal></expr></argument>, <argument pos:start="53:36" pos:end="53:45"><expr pos:start="53:36" pos:end="53:45"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:33">(<expr pos:start="55:9" pos:end="55:32"><call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:20">error_is_set</name><argument_list pos:start="55:21" pos:end="55:32">(<argument pos:start="55:22" pos:end="55:31"><expr pos:start="55:22" pos:end="55:31"><operator pos:start="55:22" pos:end="55:22">&amp;</operator><name pos:start="55:23" pos:end="55:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:35" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:20">

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:25">qerror_report_err</name><argument_list pos:start="57:26" pos:end="57:36">(<argument pos:start="57:27" pos:end="57:35"><expr pos:start="57:27" pos:end="57:35"><name pos:start="57:27" pos:end="57:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><call pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:18">error_free</name><argument_list pos:start="59:19" pos:end="59:29">(<argument pos:start="59:20" pos:end="59:28"><expr pos:start="59:20" pos:end="59:28"><name pos:start="59:20" pos:end="59:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:20">return <expr pos:start="61:16" pos:end="61:19"><name pos:start="61:16" pos:end="61:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:30">(<expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:16">nd_table</name><index pos:start="65:17" pos:end="65:21">[<expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:20">ret</name></expr>]</index></name><operator pos:start="65:22" pos:end="65:22">.</operator><name pos:start="65:23" pos:end="65:29">devaddr</name></expr>)</condition> <block pos:start="65:32" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:20">

        <expr_stmt pos:start="67:9" pos:end="67:62"><expr pos:start="67:9" pos:end="67:61"><call pos:start="67:9" pos:end="67:61"><name pos:start="67:9" pos:end="67:22">monitor_printf</name><argument_list pos:start="67:23" pos:end="67:61">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">mon</name></expr></argument>, <argument pos:start="67:29" pos:end="67:60"><expr pos:start="67:29" pos:end="67:60"><literal type="string" pos:start="67:29" pos:end="67:60">"Parameter addr not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:20">return <expr pos:start="69:16" pos:end="69:19"><name pos:start="69:16" pos:end="69:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="73:5" pos:end="73:60">return <expr pos:start="73:12" pos:end="73:59"><call pos:start="73:12" pos:end="73:59"><name pos:start="73:12" pos:end="73:23">pci_nic_init</name><argument_list pos:start="73:24" pos:end="73:59">(<argument pos:start="73:25" pos:end="73:38"><expr pos:start="73:25" pos:end="73:38"><operator pos:start="73:25" pos:end="73:25">&amp;</operator><name pos:start="73:26" pos:end="73:38"><name pos:start="73:26" pos:end="73:33">nd_table</name><index pos:start="73:34" pos:end="73:38">[<expr pos:start="73:35" pos:end="73:37"><name pos:start="73:35" pos:end="73:37">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="73:41" pos:end="73:49"><expr pos:start="73:41" pos:end="73:49"><literal type="string" pos:start="73:41" pos:end="73:49">"rtl8139"</literal></expr></argument>, <argument pos:start="73:52" pos:end="73:58"><expr pos:start="73:52" pos:end="73:58"><name pos:start="73:52" pos:end="73:58">devaddr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
