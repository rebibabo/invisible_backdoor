<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20524.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">protocol_client_auth</name><parameter_list pos:start="1:32" pos:end="1:69">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:40">VncState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">vs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">data</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:68"><decl pos:start="1:59" pos:end="1:68"><type pos:start="1:59" pos:end="1:68"><name pos:start="1:59" pos:end="1:64">size_t</name></type> <name pos:start="1:66" pos:end="1:68">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="9:5" pos:end="87:13">

    <comment type="block" pos:start="5:5" pos:end="7:48">/* We only advertise 1 auth scheme at a time, so client

     * must pick the one we sent. Verify this */</comment>

    <if_stmt pos:start="9:5" pos:end="85:5"><if pos:start="9:5" pos:end="27:5">if <condition pos:start="9:8" pos:end="9:28">(<expr pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:12">data</name><index pos:start="9:13" pos:end="9:15">[<expr pos:start="9:14" pos:end="9:14"><literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr>]</index></name> <operator pos:start="9:17" pos:end="9:18">!=</operator> <name pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:21">vs</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:27">auth</name></name></expr>)</condition> <block pos:start="9:30" pos:end="27:5">{<block_content pos:start="11:8" pos:end="25:28"> <comment type="block" pos:start="9:32" pos:end="9:48">/* Reject auth */</comment>

       <expr_stmt pos:start="11:8" pos:end="11:51"><expr pos:start="11:8" pos:end="11:50"><call pos:start="11:8" pos:end="11:50"><name pos:start="11:8" pos:end="11:16">VNC_DEBUG</name><argument_list pos:start="11:17" pos:end="11:50">(<argument pos:start="11:18" pos:end="11:35"><expr pos:start="11:18" pos:end="11:35"><literal type="string" pos:start="11:18" pos:end="11:35">"Reject auth %d\n"</literal></expr></argument>, <argument pos:start="11:38" pos:end="11:49"><expr pos:start="11:38" pos:end="11:49"><operator pos:start="11:38" pos:end="11:38">(</operator><name pos:start="11:39" pos:end="11:41">int</name><operator pos:start="11:42" pos:end="11:42">)</operator><name pos:start="11:43" pos:end="11:49"><name pos:start="11:43" pos:end="11:46">data</name><index pos:start="11:47" pos:end="11:49">[<expr pos:start="11:48" pos:end="11:48"><literal type="number" pos:start="11:48" pos:end="11:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="13:8" pos:end="13:28"><expr pos:start="13:8" pos:end="13:27"><call pos:start="13:8" pos:end="13:27"><name pos:start="13:8" pos:end="13:20">vnc_write_u32</name><argument_list pos:start="13:21" pos:end="13:27">(<argument pos:start="13:22" pos:end="13:23"><expr pos:start="13:22" pos:end="13:23"><name pos:start="13:22" pos:end="13:23">vs</name></expr></argument>, <argument pos:start="13:26" pos:end="13:26"><expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <if_stmt pos:start="15:8" pos:end="23:8"><if pos:start="15:8" pos:end="23:8">if <condition pos:start="15:11" pos:end="15:26">(<expr pos:start="15:12" pos:end="15:25"><name pos:start="15:12" pos:end="15:20"><name pos:start="15:12" pos:end="15:13">vs</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:20">minor</name></name> <operator pos:start="15:22" pos:end="15:23">&gt;=</operator> <literal type="number" pos:start="15:25" pos:end="15:25">8</literal></expr>)</condition> <block pos:start="15:28" pos:end="23:8">{<block_content pos:start="17:12" pos:end="21:43">

           <decl_stmt pos:start="17:12" pos:end="17:61"><decl pos:start="17:12" pos:end="17:60"><type pos:start="17:12" pos:end="17:28"><specifier pos:start="17:12" pos:end="17:17">static</specifier> <specifier pos:start="17:19" pos:end="17:23">const</specifier> <name pos:start="17:25" pos:end="17:28">char</name></type> <name pos:start="17:30" pos:end="17:34"><name pos:start="17:30" pos:end="17:32">err</name><index pos:start="17:33" pos:end="17:34">[]</index></name> <init pos:start="17:36" pos:end="17:60">= <expr pos:start="17:38" pos:end="17:60"><literal type="string" pos:start="17:38" pos:end="17:60">"Authentication failed"</literal></expr></init></decl>;</decl_stmt>

           <expr_stmt pos:start="19:12" pos:end="19:42"><expr pos:start="19:12" pos:end="19:41"><call pos:start="19:12" pos:end="19:41"><name pos:start="19:12" pos:end="19:24">vnc_write_u32</name><argument_list pos:start="19:25" pos:end="19:41">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">vs</name></expr></argument>, <argument pos:start="19:30" pos:end="19:40"><expr pos:start="19:30" pos:end="19:40"><sizeof pos:start="19:30" pos:end="19:40">sizeof<argument_list pos:start="19:36" pos:end="19:40">(<argument pos:start="19:37" pos:end="19:39"><expr pos:start="19:37" pos:end="19:39"><name pos:start="19:37" pos:end="19:39">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="21:12" pos:end="21:43"><expr pos:start="21:12" pos:end="21:42"><call pos:start="21:12" pos:end="21:42"><name pos:start="21:12" pos:end="21:20">vnc_write</name><argument_list pos:start="21:21" pos:end="21:42">(<argument pos:start="21:22" pos:end="21:23"><expr pos:start="21:22" pos:end="21:23"><name pos:start="21:22" pos:end="21:23">vs</name></expr></argument>, <argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><name pos:start="21:26" pos:end="21:28">err</name></expr></argument>, <argument pos:start="21:31" pos:end="21:41"><expr pos:start="21:31" pos:end="21:41"><sizeof pos:start="21:31" pos:end="21:41">sizeof<argument_list pos:start="21:37" pos:end="21:41">(<argument pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:40">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if></if_stmt>

       <expr_stmt pos:start="25:8" pos:end="25:28"><expr pos:start="25:8" pos:end="25:27"><call pos:start="25:8" pos:end="25:27"><name pos:start="25:8" pos:end="25:23">vnc_client_error</name><argument_list pos:start="25:24" pos:end="25:27">(<argument pos:start="25:25" pos:end="25:26"><expr pos:start="25:25" pos:end="25:26"><name pos:start="25:25" pos:end="25:26">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="85:5">else <block pos:start="27:12" pos:end="85:5">{<block_content pos:start="29:8" pos:end="83:8"> <comment type="block" pos:start="27:14" pos:end="27:40">/* Accept requested auth */</comment>

       <expr_stmt pos:start="29:8" pos:end="29:61"><expr pos:start="29:8" pos:end="29:60"><call pos:start="29:8" pos:end="29:60"><name pos:start="29:8" pos:end="29:16">VNC_DEBUG</name><argument_list pos:start="29:17" pos:end="29:60">(<argument pos:start="29:18" pos:end="29:45"><expr pos:start="29:18" pos:end="29:45"><literal type="string" pos:start="29:18" pos:end="29:45">"Client requested auth %d\n"</literal></expr></argument>, <argument pos:start="29:48" pos:end="29:59"><expr pos:start="29:48" pos:end="29:59"><operator pos:start="29:48" pos:end="29:48">(</operator><name pos:start="29:49" pos:end="29:51">int</name><operator pos:start="29:52" pos:end="29:52">)</operator><name pos:start="29:53" pos:end="29:59"><name pos:start="29:53" pos:end="29:56">data</name><index pos:start="29:57" pos:end="29:59">[<expr pos:start="29:58" pos:end="29:58"><literal type="number" pos:start="29:58" pos:end="29:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <switch pos:start="31:8" pos:end="83:8">switch <condition pos:start="31:15" pos:end="31:24">(<expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:17">vs</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">auth</name></name></expr>)</condition> <block pos:start="31:26" pos:end="83:8">{<block_content pos:start="33:8" pos:end="81:32">

       <case pos:start="33:8" pos:end="33:26">case <expr pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:25">VNC_AUTH_NONE</name></expr>:</case>

           <expr_stmt pos:start="35:12" pos:end="35:43"><expr pos:start="35:12" pos:end="35:42"><call pos:start="35:12" pos:end="35:42"><name pos:start="35:12" pos:end="35:20">VNC_DEBUG</name><argument_list pos:start="35:21" pos:end="35:42">(<argument pos:start="35:22" pos:end="35:41"><expr pos:start="35:22" pos:end="35:41"><literal type="string" pos:start="35:22" pos:end="35:41">"Accept auth none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="37:12" pos:end="37:32"><expr pos:start="37:12" pos:end="37:31"><call pos:start="37:12" pos:end="37:31"><name pos:start="37:12" pos:end="37:24">vnc_write_u32</name><argument_list pos:start="37:25" pos:end="37:31">(<argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><name pos:start="37:26" pos:end="37:27">vs</name></expr></argument>, <argument pos:start="37:30" pos:end="37:30"><expr pos:start="37:30" pos:end="37:30"><literal type="number" pos:start="37:30" pos:end="37:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="37:34" pos:end="37:61">/* Accept auth completion */</comment>

           <expr_stmt pos:start="39:12" pos:end="39:54"><expr pos:start="39:12" pos:end="39:53"><call pos:start="39:12" pos:end="39:53"><name pos:start="39:12" pos:end="39:24">vnc_read_when</name><argument_list pos:start="39:25" pos:end="39:53">(<argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><name pos:start="39:26" pos:end="39:27">vs</name></expr></argument>, <argument pos:start="39:30" pos:end="39:49"><expr pos:start="39:30" pos:end="39:49"><name pos:start="39:30" pos:end="39:49">protocol_client_init</name></expr></argument>, <argument pos:start="39:52" pos:end="39:52"><expr pos:start="39:52" pos:end="39:52"><literal type="number" pos:start="39:52" pos:end="39:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <break pos:start="41:12" pos:end="41:17">break;</break>



       <case pos:start="45:8" pos:end="45:25">case <expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:24">VNC_AUTH_VNC</name></expr>:</case>

           <expr_stmt pos:start="47:12" pos:end="47:41"><expr pos:start="47:12" pos:end="47:40"><call pos:start="47:12" pos:end="47:40"><name pos:start="47:12" pos:end="47:20">VNC_DEBUG</name><argument_list pos:start="47:21" pos:end="47:40">(<argument pos:start="47:22" pos:end="47:39"><expr pos:start="47:22" pos:end="47:39"><literal type="string" pos:start="47:22" pos:end="47:39">"Start VNC auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="49:12" pos:end="54:0">return <expr pos:start="49:19" pos:end="49:36"><call pos:start="49:19" pos:end="49:36"><name pos:start="49:19" pos:end="49:32">start_auth_vnc</name><argument_list pos:start="49:33" pos:end="49:36">(<argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><name pos:start="49:34" pos:end="49:35">vs</name></expr></argument>)</argument_list></call></expr>;</return>



<cpp:if pos:start="53:1" pos:end="53:18">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:18">CONFIG_VNC_TLS</name></expr></cpp:if>

       <case pos:start="55:8" pos:end="55:30">case <expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:29">VNC_AUTH_VENCRYPT</name></expr>:</case>

           <expr_stmt pos:start="57:12" pos:end="57:47"><expr pos:start="57:12" pos:end="57:46"><call pos:start="57:12" pos:end="57:46"><name pos:start="57:12" pos:end="57:20">VNC_DEBUG</name><argument_list pos:start="57:21" pos:end="57:46">(<argument pos:start="57:22" pos:end="57:45"><expr pos:start="57:22" pos:end="57:45"><literal type="string" pos:start="57:22" pos:end="57:45">"Accept VeNCrypt auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt pos:start="57:48" pos:end="57:48">;</empty_stmt>

           <return pos:start="59:12" pos:end="62:0">return <expr pos:start="59:19" pos:end="59:41"><call pos:start="59:19" pos:end="59:41"><name pos:start="59:19" pos:end="59:37">start_auth_vencrypt</name><argument_list pos:start="59:38" pos:end="59:41">(<argument pos:start="59:39" pos:end="59:40"><expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">vs</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="61:8" pos:end="61:27">/* CONFIG_VNC_TLS */</comment>



       <default pos:start="65:8" pos:end="65:15">default:</default> <comment type="block" pos:start="65:17" pos:end="65:62">/* Should not be possible, but just in case */</comment>

           <expr_stmt pos:start="67:12" pos:end="67:51"><expr pos:start="67:12" pos:end="67:50"><call pos:start="67:12" pos:end="67:50"><name pos:start="67:12" pos:end="67:20">VNC_DEBUG</name><argument_list pos:start="67:21" pos:end="67:50">(<argument pos:start="67:22" pos:end="67:39"><expr pos:start="67:22" pos:end="67:39"><literal type="string" pos:start="67:22" pos:end="67:39">"Reject auth %d\n"</literal></expr></argument>, <argument pos:start="67:42" pos:end="67:49"><expr pos:start="67:42" pos:end="67:49"><name pos:start="67:42" pos:end="67:49"><name pos:start="67:42" pos:end="67:43">vs</name><operator pos:start="67:44" pos:end="67:45">-&gt;</operator><name pos:start="67:46" pos:end="67:49">auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="69:12" pos:end="69:31"><expr pos:start="69:12" pos:end="69:30"><call pos:start="69:12" pos:end="69:30"><name pos:start="69:12" pos:end="69:23">vnc_write_u8</name><argument_list pos:start="69:24" pos:end="69:30">(<argument pos:start="69:25" pos:end="69:26"><expr pos:start="69:25" pos:end="69:26"><name pos:start="69:25" pos:end="69:26">vs</name></expr></argument>, <argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><literal type="number" pos:start="69:29" pos:end="69:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <if_stmt pos:start="71:12" pos:end="79:12"><if pos:start="71:12" pos:end="79:12">if <condition pos:start="71:15" pos:end="71:30">(<expr pos:start="71:16" pos:end="71:29"><name pos:start="71:16" pos:end="71:24"><name pos:start="71:16" pos:end="71:17">vs</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:24">minor</name></name> <operator pos:start="71:26" pos:end="71:27">&gt;=</operator> <literal type="number" pos:start="71:29" pos:end="71:29">8</literal></expr>)</condition> <block pos:start="71:32" pos:end="79:12">{<block_content pos:start="73:16" pos:end="77:47">

               <decl_stmt pos:start="73:16" pos:end="73:65"><decl pos:start="73:16" pos:end="73:64"><type pos:start="73:16" pos:end="73:32"><specifier pos:start="73:16" pos:end="73:21">static</specifier> <specifier pos:start="73:23" pos:end="73:27">const</specifier> <name pos:start="73:29" pos:end="73:32">char</name></type> <name pos:start="73:34" pos:end="73:38"><name pos:start="73:34" pos:end="73:36">err</name><index pos:start="73:37" pos:end="73:38">[]</index></name> <init pos:start="73:40" pos:end="73:64">= <expr pos:start="73:42" pos:end="73:64"><literal type="string" pos:start="73:42" pos:end="73:64">"Authentication failed"</literal></expr></init></decl>;</decl_stmt>

               <expr_stmt pos:start="75:16" pos:end="75:46"><expr pos:start="75:16" pos:end="75:45"><call pos:start="75:16" pos:end="75:45"><name pos:start="75:16" pos:end="75:28">vnc_write_u32</name><argument_list pos:start="75:29" pos:end="75:45">(<argument pos:start="75:30" pos:end="75:31"><expr pos:start="75:30" pos:end="75:31"><name pos:start="75:30" pos:end="75:31">vs</name></expr></argument>, <argument pos:start="75:34" pos:end="75:44"><expr pos:start="75:34" pos:end="75:44"><sizeof pos:start="75:34" pos:end="75:44">sizeof<argument_list pos:start="75:40" pos:end="75:44">(<argument pos:start="75:41" pos:end="75:43"><expr pos:start="75:41" pos:end="75:43"><name pos:start="75:41" pos:end="75:43">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <expr_stmt pos:start="77:16" pos:end="77:47"><expr pos:start="77:16" pos:end="77:46"><call pos:start="77:16" pos:end="77:46"><name pos:start="77:16" pos:end="77:24">vnc_write</name><argument_list pos:start="77:25" pos:end="77:46">(<argument pos:start="77:26" pos:end="77:27"><expr pos:start="77:26" pos:end="77:27"><name pos:start="77:26" pos:end="77:27">vs</name></expr></argument>, <argument pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><name pos:start="77:30" pos:end="77:32">err</name></expr></argument>, <argument pos:start="77:35" pos:end="77:45"><expr pos:start="77:35" pos:end="77:45"><sizeof pos:start="77:35" pos:end="77:45">sizeof<argument_list pos:start="77:41" pos:end="77:45">(<argument pos:start="77:42" pos:end="77:44"><expr pos:start="77:42" pos:end="77:44"><name pos:start="77:42" pos:end="77:44">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

           <expr_stmt pos:start="81:12" pos:end="81:32"><expr pos:start="81:12" pos:end="81:31"><call pos:start="81:12" pos:end="81:31"><name pos:start="81:12" pos:end="81:27">vnc_client_error</name><argument_list pos:start="81:28" pos:end="81:31">(<argument pos:start="81:29" pos:end="81:30"><expr pos:start="81:29" pos:end="81:30"><name pos:start="81:29" pos:end="81:30">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
