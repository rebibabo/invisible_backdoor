<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15485.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">arm_cpu_write_elf32_note</name><parameter_list pos:start="1:29" pos:end="3:53">(<parameter pos:start="1:30" pos:end="1:52"><decl pos:start="1:30" pos:end="1:52"><type pos:start="1:30" pos:end="1:52"><name pos:start="1:30" pos:end="1:50">WriteCoreDumpFunction</name></type> <name pos:start="1:52" pos:end="1:52">f</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:62">CPUState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:66">cs</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:38"><decl pos:start="3:30" pos:end="3:38"><type pos:start="3:30" pos:end="3:38"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:38">cpuid</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:44">void</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:52">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:13">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">arm_note</name></name></type> <name pos:start="7:21" pos:end="7:24">note</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUARMState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:40">= <expr pos:start="9:24" pos:end="9:40"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><call pos:start="9:25" pos:end="9:35"><name pos:start="9:25" pos:end="9:31">ARM_CPU</name><argument_list pos:start="9:32" pos:end="9:35">(<argument pos:start="9:33" pos:end="9:34"><expr pos:start="9:33" pos:end="9:34"><name pos:start="9:33" pos:end="9:34">cs</name></expr></argument>)</argument_list></call><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:40">env</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">DumpState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:16">s</name> <init pos:start="11:18" pos:end="11:25">= <expr pos:start="11:20" pos:end="11:25"><name pos:start="11:20" pos:end="11:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:75"><expr pos:start="17:5" pos:end="17:74"><call pos:start="17:5" pos:end="17:74"><name pos:start="17:5" pos:end="17:17">arm_note_init</name><argument_list pos:start="17:18" pos:end="17:74">(<argument pos:start="17:19" pos:end="17:23"><expr pos:start="17:19" pos:end="17:23"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:23">note</name></expr></argument>, <argument pos:start="17:26" pos:end="17:26"><expr pos:start="17:26" pos:end="17:26"><name pos:start="17:26" pos:end="17:26">s</name></expr></argument>, <argument pos:start="17:29" pos:end="17:34"><expr pos:start="17:29" pos:end="17:34"><literal type="string" pos:start="17:29" pos:end="17:34">"CORE"</literal></expr></argument>, <argument pos:start="17:37" pos:end="17:37"><expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">5</literal></expr></argument>, <argument pos:start="17:40" pos:end="17:50"><expr pos:start="17:40" pos:end="17:50"><name pos:start="17:40" pos:end="17:50">NT_PRSTATUS</name></expr></argument>, <argument pos:start="17:53" pos:end="17:73"><expr pos:start="17:53" pos:end="17:73"><sizeof pos:start="17:53" pos:end="17:73">sizeof<argument_list pos:start="17:59" pos:end="17:73">(<argument pos:start="17:60" pos:end="17:72"><expr pos:start="17:60" pos:end="17:72"><name pos:start="17:60" pos:end="17:72"><name pos:start="17:60" pos:end="17:63">note</name><operator pos:start="17:64" pos:end="17:64">.</operator><name pos:start="17:65" pos:end="17:72">prstatus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:8">note</name><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:17">prstatus</name><operator pos:start="21:18" pos:end="21:18">.</operator><name pos:start="21:19" pos:end="21:24">pr_pid</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <call pos:start="21:28" pos:end="21:50"><name pos:start="21:28" pos:end="21:40">cpu_to_dump32</name><argument_list pos:start="21:41" pos:end="21:50">(<argument pos:start="21:42" pos:end="21:42"><expr pos:start="21:42" pos:end="21:42"><name pos:start="21:42" pos:end="21:42">s</name></expr></argument>, <argument pos:start="21:45" pos:end="21:49"><expr pos:start="21:45" pos:end="21:49"><name pos:start="21:45" pos:end="21:49">cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="25:5" pos:end="29:5">for <control pos:start="25:9" pos:end="25:28">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:23"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <literal type="number" pos:start="25:21" pos:end="25:22">16</literal></expr>;</condition> <incr pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><operator pos:start="25:25" pos:end="25:26">++</operator><name pos:start="25:27" pos:end="25:27">i</name></expr></incr>)</control> <block pos:start="25:30" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:70">

        <expr_stmt pos:start="27:9" pos:end="27:70"><expr pos:start="27:9" pos:end="27:69"><name pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:12">note</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:21">prstatus</name><operator pos:start="27:22" pos:end="27:22">.</operator><name pos:start="27:23" pos:end="27:28">pr_reg</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:33">regs</name><index pos:start="27:34" pos:end="27:36">[<expr pos:start="27:35" pos:end="27:35"><name pos:start="27:35" pos:end="27:35">i</name></expr>]</index></name> <operator pos:start="27:38" pos:end="27:38">=</operator> <call pos:start="27:40" pos:end="27:69"><name pos:start="27:40" pos:end="27:52">cpu_to_dump32</name><argument_list pos:start="27:53" pos:end="27:69">(<argument pos:start="27:54" pos:end="27:54"><expr pos:start="27:54" pos:end="27:54"><name pos:start="27:54" pos:end="27:54">s</name></expr></argument>, <argument pos:start="27:57" pos:end="27:68"><expr pos:start="27:57" pos:end="27:68"><name pos:start="27:57" pos:end="27:68"><name pos:start="27:57" pos:end="27:59">env</name><operator pos:start="27:60" pos:end="27:61">-&gt;</operator><name pos:start="27:62" pos:end="27:65">regs</name><index pos:start="27:66" pos:end="27:68">[<expr pos:start="27:67" pos:end="27:67"><name pos:start="27:67" pos:end="27:67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="31:5" pos:end="31:69"><expr pos:start="31:5" pos:end="31:68"><name pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:8">note</name><operator pos:start="31:9" pos:end="31:9">.</operator><name pos:start="31:10" pos:end="31:17">prstatus</name><operator pos:start="31:18" pos:end="31:18">.</operator><name pos:start="31:19" pos:end="31:24">pr_reg</name><operator pos:start="31:25" pos:end="31:25">.</operator><name pos:start="31:26" pos:end="31:29">regs</name><index pos:start="31:30" pos:end="31:33">[<expr pos:start="31:31" pos:end="31:32"><literal type="number" pos:start="31:31" pos:end="31:32">16</literal></expr>]</index></name> <operator pos:start="31:35" pos:end="31:35">=</operator> <call pos:start="31:37" pos:end="31:68"><name pos:start="31:37" pos:end="31:49">cpu_to_dump32</name><argument_list pos:start="31:50" pos:end="31:68">(<argument pos:start="31:51" pos:end="31:51"><expr pos:start="31:51" pos:end="31:51"><name pos:start="31:51" pos:end="31:51">s</name></expr></argument>, <argument pos:start="31:54" pos:end="31:67"><expr pos:start="31:54" pos:end="31:67"><call pos:start="31:54" pos:end="31:67"><name pos:start="31:54" pos:end="31:62">cpsr_read</name><argument_list pos:start="31:63" pos:end="31:67">(<argument pos:start="31:64" pos:end="31:66"><expr pos:start="31:64" pos:end="31:66"><name pos:start="31:64" pos:end="31:66">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:45"><name pos:start="35:11" pos:end="35:11">f</name><argument_list pos:start="35:12" pos:end="35:45">(<argument pos:start="35:13" pos:end="35:17"><expr pos:start="35:13" pos:end="35:17"><operator pos:start="35:13" pos:end="35:13">&amp;</operator><name pos:start="35:14" pos:end="35:17">note</name></expr></argument>, <argument pos:start="35:20" pos:end="35:41"><expr pos:start="35:20" pos:end="35:41"><name pos:start="35:20" pos:end="35:41">ARM_PRSTATUS_NOTE_SIZE</name></expr></argument>, <argument pos:start="35:44" pos:end="35:44"><expr pos:start="35:44" pos:end="35:44"><name pos:start="35:44" pos:end="35:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition> <block pos:start="37:18" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="45:5" pos:end="45:13">return <expr pos:start="45:12" pos:end="45:12"><literal type="number" pos:start="45:12" pos:end="45:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
