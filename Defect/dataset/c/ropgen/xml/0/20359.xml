<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20359.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">xen_hvm_init</name><parameter_list pos:start="1:17" pos:end="1:22">(<parameter pos:start="1:18" pos:end="1:21"><decl pos:start="1:18" pos:end="1:21"><type pos:start="1:18" pos:end="1:21"><name pos:start="1:18" pos:end="1:21">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:13">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name></type> <name pos:start="7:19" pos:end="7:27">ioreq_pfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">XenIOState</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:21">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:43"><expr pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:9">state</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:42"><name pos:start="13:13" pos:end="13:21">g_malloc0</name><argument_list pos:start="13:22" pos:end="13:42">(<argument pos:start="13:23" pos:end="13:41"><expr pos:start="13:23" pos:end="13:41"><sizeof pos:start="13:23" pos:end="13:41">sizeof <argument_list pos:start="13:30" pos:end="13:41">(<argument pos:start="13:31" pos:end="13:40"><expr pos:start="13:31" pos:end="13:40"><name pos:start="13:31" pos:end="13:40">XenIOState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:52"><expr pos:start="17:5" pos:end="17:51"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:9">state</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:21">xce_handle</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <call pos:start="17:25" pos:end="17:51"><name pos:start="17:25" pos:end="17:42">xen_xc_evtchn_open</name><argument_list pos:start="17:43" pos:end="17:51">(<argument pos:start="17:44" pos:end="17:47"><expr pos:start="17:44" pos:end="17:47"><name pos:start="17:44" pos:end="17:47">NULL</name></expr></argument>, <argument pos:start="17:50" pos:end="17:50"><expr pos:start="17:50" pos:end="17:50"><literal type="number" pos:start="17:50" pos:end="17:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:54">(<expr pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:13">state</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:25">xce_handle</name></name> <operator pos:start="19:27" pos:end="19:28">==</operator> <name pos:start="19:30" pos:end="19:53">XC_HANDLER_INITIAL_VALUE</name></expr>)</condition> <block pos:start="19:56" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:22">

        <expr_stmt pos:start="21:9" pos:end="21:42"><expr pos:start="21:9" pos:end="21:41"><call pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:14">perror</name><argument_list pos:start="21:15" pos:end="21:41">(<argument pos:start="21:16" pos:end="21:40"><expr pos:start="21:16" pos:end="21:40"><literal type="string" pos:start="21:16" pos:end="21:40">"xen: event channel open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:22">return <expr pos:start="23:16" pos:end="23:21"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:9">state</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:19">xenstore</name></name> <operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:38"><name pos:start="29:23" pos:end="29:36">xs_daemon_open</name><argument_list pos:start="29:37" pos:end="29:38">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:13">state</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:23">xenstore</name></name> <operator pos:start="31:25" pos:end="31:26">==</operator> <name pos:start="31:28" pos:end="31:31">NULL</name></expr>)</condition> <block pos:start="31:34" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:22">

        <expr_stmt pos:start="33:9" pos:end="33:37"><expr pos:start="33:9" pos:end="33:36"><call pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:14">perror</name><argument_list pos:start="33:15" pos:end="33:36">(<argument pos:start="33:16" pos:end="33:35"><expr pos:start="33:16" pos:end="33:35"><literal type="string" pos:start="33:16" pos:end="33:35">"xen: xenstore open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:22">return <expr pos:start="35:16" pos:end="35:21"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:43"><expr pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:9">state</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">exit</name><operator pos:start="41:16" pos:end="41:16">.</operator><name pos:start="41:17" pos:end="41:22">notify</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:42">xen_exit_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:41"><expr pos:start="43:5" pos:end="43:40"><call pos:start="43:5" pos:end="43:40"><name pos:start="43:5" pos:end="43:26">qemu_add_exit_notifier</name><argument_list pos:start="43:27" pos:end="43:40">(<argument pos:start="43:28" pos:end="43:39"><expr pos:start="43:28" pos:end="43:39"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:39"><name pos:start="43:29" pos:end="43:33">state</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:39">exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:49"><expr pos:start="47:5" pos:end="47:48"><name pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:9">state</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:18">suspend</name><operator pos:start="47:19" pos:end="47:19">.</operator><name pos:start="47:20" pos:end="47:25">notify</name></name> <operator pos:start="47:27" pos:end="47:27">=</operator> <name pos:start="47:29" pos:end="47:48">xen_suspend_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:52"><expr pos:start="49:5" pos:end="49:51"><call pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:34">qemu_register_suspend_notifier</name><argument_list pos:start="49:35" pos:end="49:51">(<argument pos:start="49:36" pos:end="49:50"><expr pos:start="49:36" pos:end="49:50"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:50"><name pos:start="49:37" pos:end="49:41">state</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:50">suspend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:73"><expr pos:start="53:5" pos:end="53:72"><call pos:start="53:5" pos:end="53:72"><name pos:start="53:5" pos:end="53:20">xc_get_hvm_param</name><argument_list pos:start="53:21" pos:end="53:72">(<argument pos:start="53:22" pos:end="53:27"><expr pos:start="53:22" pos:end="53:27"><name pos:start="53:22" pos:end="53:27">xen_xc</name></expr></argument>, <argument pos:start="53:30" pos:end="53:38"><expr pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:38">xen_domid</name></expr></argument>, <argument pos:start="53:41" pos:end="53:59"><expr pos:start="53:41" pos:end="53:59"><name pos:start="53:41" pos:end="53:59">HVM_PARAM_IOREQ_PFN</name></expr></argument>, <argument pos:start="53:62" pos:end="53:71"><expr pos:start="53:62" pos:end="53:71"><operator pos:start="53:62" pos:end="53:62">&amp;</operator><name pos:start="53:63" pos:end="53:71">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:51"><expr pos:start="55:5" pos:end="55:50"><call pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:11">DPRINTF</name><argument_list pos:start="55:12" pos:end="55:50">(<argument pos:start="55:13" pos:end="55:38"><expr pos:start="55:13" pos:end="55:38"><literal type="string" pos:start="55:13" pos:end="55:38">"shared page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="55:41" pos:end="55:49"><expr pos:start="55:41" pos:end="55:49"><name pos:start="55:41" pos:end="55:49">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:79"><expr pos:start="57:5" pos:end="59:78"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:9">state</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:22">shared_page</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <call pos:start="57:26" pos:end="59:78"><name pos:start="57:26" pos:end="57:45">xc_map_foreign_range</name><argument_list pos:start="57:46" pos:end="59:78">(<argument pos:start="57:47" pos:end="57:52"><expr pos:start="57:47" pos:end="57:52"><name pos:start="57:47" pos:end="57:52">xen_xc</name></expr></argument>, <argument pos:start="57:55" pos:end="57:63"><expr pos:start="57:55" pos:end="57:63"><name pos:start="57:55" pos:end="57:63">xen_domid</name></expr></argument>, <argument pos:start="57:66" pos:end="57:77"><expr pos:start="57:66" pos:end="57:77"><name pos:start="57:66" pos:end="57:77">XC_PAGE_SIZE</name></expr></argument>,

                                              <argument pos:start="59:47" pos:end="59:66"><expr pos:start="59:47" pos:end="59:66"><name pos:start="59:47" pos:end="59:55">PROT_READ</name><operator pos:start="59:56" pos:end="59:56">|</operator><name pos:start="59:57" pos:end="59:66">PROT_WRITE</name></expr></argument>, <argument pos:start="59:69" pos:end="59:77"><expr pos:start="59:69" pos:end="59:77"><name pos:start="59:69" pos:end="59:77">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:35">(<expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:13">state</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:26">shared_page</name></name> <operator pos:start="61:28" pos:end="61:29">==</operator> <name pos:start="61:31" pos:end="61:34">NULL</name></expr>)</condition> <block pos:start="61:37" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:32">

        <expr_stmt pos:start="63:9" pos:end="65:32"><expr pos:start="63:9" pos:end="65:31"><call pos:start="63:9" pos:end="65:31"><name pos:start="63:9" pos:end="63:16">hw_error</name><argument_list pos:start="63:17" pos:end="65:31">(<argument pos:start="63:18" pos:end="63:80"><expr pos:start="63:18" pos:end="63:80"><literal type="string" pos:start="63:18" pos:end="63:63">"map shared IO page returned error %d handle="</literal> <name pos:start="63:65" pos:end="63:80">XC_INTERFACE_FMT</name></expr></argument>,

                 <argument pos:start="65:18" pos:end="65:22"><expr pos:start="65:18" pos:end="65:22"><name pos:start="65:18" pos:end="65:22">errno</name></expr></argument>, <argument pos:start="65:25" pos:end="65:30"><expr pos:start="65:25" pos:end="65:30"><name pos:start="65:25" pos:end="65:30">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:76"><expr pos:start="71:5" pos:end="71:75"><call pos:start="71:5" pos:end="71:75"><name pos:start="71:5" pos:end="71:20">xc_get_hvm_param</name><argument_list pos:start="71:21" pos:end="71:75">(<argument pos:start="71:22" pos:end="71:27"><expr pos:start="71:22" pos:end="71:27"><name pos:start="71:22" pos:end="71:27">xen_xc</name></expr></argument>, <argument pos:start="71:30" pos:end="71:38"><expr pos:start="71:30" pos:end="71:38"><name pos:start="71:30" pos:end="71:38">xen_domid</name></expr></argument>, <argument pos:start="71:41" pos:end="71:62"><expr pos:start="71:41" pos:end="71:62"><name pos:start="71:41" pos:end="71:62">HVM_PARAM_BUFIOREQ_PFN</name></expr></argument>, <argument pos:start="71:65" pos:end="71:74"><expr pos:start="71:65" pos:end="71:74"><operator pos:start="71:65" pos:end="71:65">&amp;</operator><name pos:start="71:66" pos:end="71:74">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:56"><expr pos:start="73:5" pos:end="73:55"><call pos:start="73:5" pos:end="73:55"><name pos:start="73:5" pos:end="73:11">DPRINTF</name><argument_list pos:start="73:12" pos:end="73:55">(<argument pos:start="73:13" pos:end="73:43"><expr pos:start="73:13" pos:end="73:43"><literal type="string" pos:start="73:13" pos:end="73:43">"buffered io page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="73:46" pos:end="73:54"><expr pos:start="73:46" pos:end="73:54"><name pos:start="73:46" pos:end="73:54">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:84"><expr pos:start="75:5" pos:end="77:83"><name pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:9">state</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:27">buffered_io_page</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <call pos:start="75:31" pos:end="77:83"><name pos:start="75:31" pos:end="75:50">xc_map_foreign_range</name><argument_list pos:start="75:51" pos:end="77:83">(<argument pos:start="75:52" pos:end="75:57"><expr pos:start="75:52" pos:end="75:57"><name pos:start="75:52" pos:end="75:57">xen_xc</name></expr></argument>, <argument pos:start="75:60" pos:end="75:68"><expr pos:start="75:60" pos:end="75:68"><name pos:start="75:60" pos:end="75:68">xen_domid</name></expr></argument>, <argument pos:start="75:71" pos:end="75:82"><expr pos:start="75:71" pos:end="75:82"><name pos:start="75:71" pos:end="75:82">XC_PAGE_SIZE</name></expr></argument>,

                                                   <argument pos:start="77:52" pos:end="77:71"><expr pos:start="77:52" pos:end="77:71"><name pos:start="77:52" pos:end="77:60">PROT_READ</name><operator pos:start="77:61" pos:end="77:61">|</operator><name pos:start="77:62" pos:end="77:71">PROT_WRITE</name></expr></argument>, <argument pos:start="77:74" pos:end="77:82"><expr pos:start="77:74" pos:end="77:82"><name pos:start="77:74" pos:end="77:82">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:40">(<expr pos:start="79:9" pos:end="79:39"><name pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:13">state</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:31">buffered_io_page</name></name> <operator pos:start="79:33" pos:end="79:34">==</operator> <name pos:start="79:36" pos:end="79:39">NULL</name></expr>)</condition> <block pos:start="79:42" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:66">

        <expr_stmt pos:start="81:9" pos:end="81:66"><expr pos:start="81:9" pos:end="81:65"><call pos:start="81:9" pos:end="81:65"><name pos:start="81:9" pos:end="81:16">hw_error</name><argument_list pos:start="81:17" pos:end="81:65">(<argument pos:start="81:18" pos:end="81:57"><expr pos:start="81:18" pos:end="81:57"><literal type="string" pos:start="81:18" pos:end="81:57">"map buffered IO page returned error %d"</literal></expr></argument>, <argument pos:start="81:60" pos:end="81:64"><expr pos:start="81:60" pos:end="81:64"><name pos:start="81:60" pos:end="81:64">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:75"><expr pos:start="87:5" pos:end="87:74"><name pos:start="87:5" pos:end="87:27"><name pos:start="87:5" pos:end="87:9">state</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:27">ioreq_local_port</name></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <call pos:start="87:31" pos:end="87:74"><name pos:start="87:31" pos:end="87:39">g_malloc0</name><argument_list pos:start="87:40" pos:end="87:74">(<argument pos:start="87:41" pos:end="87:73"><expr pos:start="87:41" pos:end="87:73"><name pos:start="87:41" pos:end="87:48">smp_cpus</name> <operator pos:start="87:50" pos:end="87:50">*</operator> <sizeof pos:start="87:52" pos:end="87:73">sizeof <argument_list pos:start="87:59" pos:end="87:73">(<argument pos:start="87:60" pos:end="87:72"><expr pos:start="87:60" pos:end="87:72"><name pos:start="87:60" pos:end="87:72">evtchn_port_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:56">/* FIXME: how about if we overflow the page here? */</comment>

    <for pos:start="93:5" pos:end="109:5">for <control pos:start="93:9" pos:end="93:34">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:29"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <name pos:start="93:21" pos:end="93:28">smp_cpus</name></expr>;</condition> <incr pos:start="93:31" pos:end="93:33"><expr pos:start="93:31" pos:end="93:33"><name pos:start="93:31" pos:end="93:31">i</name><operator pos:start="93:32" pos:end="93:33">++</operator></expr></incr>)</control> <block pos:start="93:36" pos:end="109:5">{<block_content pos:start="95:9" pos:end="107:40">

        <expr_stmt pos:start="95:9" pos:end="97:79"><expr pos:start="95:9" pos:end="97:78"><name pos:start="95:9" pos:end="95:10">rc</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <call pos:start="95:14" pos:end="97:78"><name pos:start="95:14" pos:end="95:39">xc_evtchn_bind_interdomain</name><argument_list pos:start="95:40" pos:end="97:78">(<argument pos:start="95:41" pos:end="95:57"><expr pos:start="95:41" pos:end="95:57"><name pos:start="95:41" pos:end="95:57"><name pos:start="95:41" pos:end="95:45">state</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:57">xce_handle</name></name></expr></argument>, <argument pos:start="95:60" pos:end="95:68"><expr pos:start="95:60" pos:end="95:68"><name pos:start="95:60" pos:end="95:68">xen_domid</name></expr></argument>,

                                        <argument pos:start="97:41" pos:end="97:77"><expr pos:start="97:41" pos:end="97:77"><call pos:start="97:41" pos:end="97:77"><name pos:start="97:41" pos:end="97:54">xen_vcpu_eport</name><argument_list pos:start="97:55" pos:end="97:77">(<argument pos:start="97:56" pos:end="97:73"><expr pos:start="97:56" pos:end="97:73"><name pos:start="97:56" pos:end="97:73"><name pos:start="97:56" pos:end="97:60">state</name><operator pos:start="97:61" pos:end="97:62">-&gt;</operator><name pos:start="97:63" pos:end="97:73">shared_page</name></name></expr></argument>, <argument pos:start="97:76" pos:end="97:76"><expr pos:start="97:76" pos:end="97:76"><name pos:start="97:76" pos:end="97:76">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:21">(<expr pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:14">rc</name> <operator pos:start="99:16" pos:end="99:17">==</operator> <operator pos:start="99:19" pos:end="99:19">-</operator><literal type="number" pos:start="99:20" pos:end="99:20">1</literal></expr>)</condition> <block pos:start="99:23" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:22">

            <expr_stmt pos:start="101:13" pos:end="101:72"><expr pos:start="101:13" pos:end="101:71"><call pos:start="101:13" pos:end="101:71"><name pos:start="101:13" pos:end="101:19">fprintf</name><argument_list pos:start="101:20" pos:end="101:71">(<argument pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:26">stderr</name></expr></argument>, <argument pos:start="101:29" pos:end="101:63"><expr pos:start="101:29" pos:end="101:63"><literal type="string" pos:start="101:29" pos:end="101:63">"bind interdomain ioctl error %d\n"</literal></expr></argument>, <argument pos:start="101:66" pos:end="101:70"><expr pos:start="101:66" pos:end="101:70"><name pos:start="101:66" pos:end="101:70">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:40"><expr pos:start="107:9" pos:end="107:39"><name pos:start="107:9" pos:end="107:34"><name pos:start="107:9" pos:end="107:13">state</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:31">ioreq_local_port</name><index pos:start="107:32" pos:end="107:34">[<expr pos:start="107:33" pos:end="107:33"><name pos:start="107:33" pos:end="107:33">i</name></expr>]</index></name> <operator pos:start="107:36" pos:end="107:36">=</operator> <name pos:start="107:38" pos:end="107:39">rc</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="113:5" pos:end="113:29">/* Init RAM management */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:25"><expr pos:start="115:5" pos:end="115:24"><call pos:start="115:5" pos:end="115:24"><name pos:start="115:5" pos:end="115:22">xen_map_cache_init</name><argument_list pos:start="115:23" pos:end="115:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:27"><expr pos:start="117:5" pos:end="117:26"><call pos:start="117:5" pos:end="117:26"><name pos:start="117:5" pos:end="117:16">xen_ram_init</name><argument_list pos:start="117:17" pos:end="117:26">(<argument pos:start="117:18" pos:end="117:25"><expr pos:start="117:18" pos:end="117:25"><name pos:start="117:18" pos:end="117:25">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:74"><expr pos:start="121:5" pos:end="121:73"><call pos:start="121:5" pos:end="121:73"><name pos:start="121:5" pos:end="121:36">qemu_add_vm_change_state_handler</name><argument_list pos:start="121:37" pos:end="121:73">(<argument pos:start="121:38" pos:end="121:65"><expr pos:start="121:38" pos:end="121:65"><name pos:start="121:38" pos:end="121:65">xen_hvm_change_state_handler</name></expr></argument>, <argument pos:start="121:68" pos:end="121:72"><expr pos:start="121:68" pos:end="121:72"><name pos:start="121:68" pos:end="121:72">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:49"><expr pos:start="125:5" pos:end="125:48"><name pos:start="125:5" pos:end="125:26"><name pos:start="125:5" pos:end="125:9">state</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:26">memory_listener</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:48">xen_memory_listener</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:32"><expr pos:start="127:5" pos:end="127:31"><call pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:14">QLIST_INIT</name><argument_list pos:start="127:15" pos:end="127:31">(<argument pos:start="127:16" pos:end="127:30"><expr pos:start="127:16" pos:end="127:30"><operator pos:start="127:16" pos:end="127:16">&amp;</operator><name pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:21">state</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:30">physmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:54"><expr pos:start="129:5" pos:end="129:53"><call pos:start="129:5" pos:end="129:53"><name pos:start="129:5" pos:end="129:28">memory_listener_register</name><argument_list pos:start="129:29" pos:end="129:53">(<argument pos:start="129:30" pos:end="129:52"><expr pos:start="129:30" pos:end="129:52"><operator pos:start="129:30" pos:end="129:30">&amp;</operator><name pos:start="129:31" pos:end="129:52"><name pos:start="129:31" pos:end="129:35">state</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:52">memory_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:35"><expr pos:start="131:5" pos:end="131:34"><name pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:9">state</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:27">log_for_dirtybit</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <name pos:start="131:31" pos:end="131:34">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:43">/* Initialize backend core &amp; drivers */</comment>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:27">(<expr pos:start="137:9" pos:end="137:26"><call pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:19">xen_be_init</name><argument_list pos:start="137:20" pos:end="137:21">()</argument_list></call> <operator pos:start="137:23" pos:end="137:24">!=</operator> <literal type="number" pos:start="137:26" pos:end="137:26">0</literal></expr>)</condition> <block pos:start="137:29" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:16">

        <expr_stmt pos:start="139:9" pos:end="139:77"><expr pos:start="139:9" pos:end="139:76"><call pos:start="139:9" pos:end="139:76"><name pos:start="139:9" pos:end="139:15">fprintf</name><argument_list pos:start="139:16" pos:end="139:76">(<argument pos:start="139:17" pos:end="139:22"><expr pos:start="139:17" pos:end="139:22"><name pos:start="139:17" pos:end="139:22">stderr</name></expr></argument>, <argument pos:start="139:25" pos:end="139:61"><expr pos:start="139:25" pos:end="139:61"><literal type="string" pos:start="139:25" pos:end="139:61">"%s: xen backend core setup failed\n"</literal></expr></argument>, <argument pos:start="139:64" pos:end="139:75"><expr pos:start="139:64" pos:end="139:75"><name pos:start="139:64" pos:end="139:75">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:16"><expr pos:start="141:9" pos:end="141:15"><call pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:12">exit</name><argument_list pos:start="141:13" pos:end="141:15">(<argument pos:start="141:14" pos:end="141:14"><expr pos:start="141:14" pos:end="141:14"><literal type="number" pos:start="141:14" pos:end="141:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:49"><expr pos:start="145:5" pos:end="145:48"><call pos:start="145:5" pos:end="145:48"><name pos:start="145:5" pos:end="145:19">xen_be_register</name><argument_list pos:start="145:20" pos:end="145:48">(<argument pos:start="145:21" pos:end="145:29"><expr pos:start="145:21" pos:end="145:29"><literal type="string" pos:start="145:21" pos:end="145:29">"console"</literal></expr></argument>, <argument pos:start="145:32" pos:end="145:47"><expr pos:start="145:32" pos:end="145:47"><operator pos:start="145:32" pos:end="145:32">&amp;</operator><name pos:start="145:33" pos:end="145:47">xen_console_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:47"><expr pos:start="147:5" pos:end="147:46"><call pos:start="147:5" pos:end="147:46"><name pos:start="147:5" pos:end="147:19">xen_be_register</name><argument_list pos:start="147:20" pos:end="147:46">(<argument pos:start="147:21" pos:end="147:26"><expr pos:start="147:21" pos:end="147:26"><literal type="string" pos:start="147:21" pos:end="147:26">"vkbd"</literal></expr></argument>, <argument pos:start="147:29" pos:end="147:45"><expr pos:start="147:29" pos:end="147:45"><operator pos:start="147:29" pos:end="147:29">&amp;</operator><name pos:start="147:30" pos:end="147:45">xen_kbdmouse_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:46"><expr pos:start="149:5" pos:end="149:45"><call pos:start="149:5" pos:end="149:45"><name pos:start="149:5" pos:end="149:19">xen_be_register</name><argument_list pos:start="149:20" pos:end="149:45">(<argument pos:start="149:21" pos:end="149:27"><expr pos:start="149:21" pos:end="149:27"><literal type="string" pos:start="149:21" pos:end="149:27">"qdisk"</literal></expr></argument>, <argument pos:start="149:30" pos:end="149:44"><expr pos:start="149:30" pos:end="149:44"><operator pos:start="149:30" pos:end="149:30">&amp;</operator><name pos:start="149:31" pos:end="149:44">xen_blkdev_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:28"><expr pos:start="151:5" pos:end="151:27"><call pos:start="151:5" pos:end="151:27"><name pos:start="151:5" pos:end="151:20">xen_read_physmap</name><argument_list pos:start="151:21" pos:end="151:27">(<argument pos:start="151:22" pos:end="151:26"><expr pos:start="151:22" pos:end="151:26"><name pos:start="151:22" pos:end="151:26">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
