<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13686.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mjpegb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:46">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:45"><decl pos:start="5:31" pos:end="5:45"><type pos:start="5:31" pos:end="5:45"><name pos:start="5:31" pos:end="5:38">AVPacket</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:45">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="227:1">{<block_content pos:start="9:5" pos:end="225:25">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">MJpegDecodeContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:33">avctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name></decl>, <decl pos:start="15:29" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:36">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:20">picture</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">GetBitContext</name></type> <name pos:start="19:19" pos:end="19:21">hgb</name></decl>;</decl_stmt> <comment type="block" pos:start="19:24" pos:end="19:43">/* for the header */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:71"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:21">dqt_offs</name></decl>, <decl pos:start="21:24" pos:end="21:31"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:24" pos:end="21:31">dht_offs</name></decl>, <decl pos:start="21:34" pos:end="21:41"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:34" pos:end="21:41">sof_offs</name></decl>, <decl pos:start="21:44" pos:end="21:51"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:44" pos:end="21:51">sos_offs</name></decl>, <decl pos:start="21:54" pos:end="21:70"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:54" pos:end="21:70">second_field_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:23">field_size</name></decl>, <decl pos:start="23:26" pos:end="23:33"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:26" pos:end="23:33">sod_offs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:11">buf_ptr</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:11">buf_end</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:17">buf</name> <operator pos:start="29:19" pos:end="29:19">+</operator> <name pos:start="29:21" pos:end="29:28">buf_size</name></expr>;</expr_stmt>



<label pos:start="33:1" pos:end="33:12"><name pos:start="33:1" pos:end="33:11">read_header</name>:</label>

    <comment type="block" pos:start="35:5" pos:end="35:28">/* reset on every SOI */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:23">restart_interval</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:20">restart_count</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <literal type="number" pos:start="39:24" pos:end="39:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:21">mjpb_skiptosod</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="47:35"><if pos:start="45:5" pos:end="47:35">if <condition pos:start="45:8" pos:end="45:37">(<expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:15">buf_end</name> <operator pos:start="45:17" pos:end="45:17">-</operator> <name pos:start="45:19" pos:end="45:25">buf_ptr</name> <operator pos:start="45:27" pos:end="45:28">&gt;=</operator> <literal type="number" pos:start="45:30" pos:end="45:30">1</literal> <operator pos:start="45:32" pos:end="45:33">&lt;&lt;</operator> <literal type="number" pos:start="45:35" pos:end="45:36">28</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:35"><block_content pos:start="47:9" pos:end="47:35">

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:68"><expr pos:start="51:5" pos:end="51:67"><call pos:start="51:5" pos:end="51:67"><name pos:start="51:5" pos:end="51:17">init_get_bits</name><argument_list pos:start="51:18" pos:end="51:67">(<argument pos:start="51:19" pos:end="51:22"><expr pos:start="51:19" pos:end="51:22"><operator pos:start="51:19" pos:end="51:19">&amp;</operator><name pos:start="51:20" pos:end="51:22">hgb</name></expr></argument>, <argument pos:start="51:25" pos:end="51:31"><expr pos:start="51:25" pos:end="51:31"><name pos:start="51:25" pos:end="51:31">buf_ptr</name></expr></argument>, <comment type="block" pos:start="51:34" pos:end="51:45">/*buf_size*/</comment><argument pos:start="51:46" pos:end="51:66"><expr pos:start="51:46" pos:end="51:66"><operator pos:start="51:46" pos:end="51:46">(</operator><name pos:start="51:47" pos:end="51:53">buf_end</name> <operator pos:start="51:55" pos:end="51:55">-</operator> <name pos:start="51:57" pos:end="51:63">buf_ptr</name><operator pos:start="51:64" pos:end="51:64">)</operator><operator pos:start="51:65" pos:end="51:65">*</operator><literal type="number" pos:start="51:66" pos:end="51:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:24"><expr pos:start="55:5" pos:end="55:23"><call pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:13">skip_bits</name><argument_list pos:start="55:14" pos:end="55:23">(<argument pos:start="55:15" pos:end="55:18"><expr pos:start="55:15" pos:end="55:18"><operator pos:start="55:15" pos:end="55:15">&amp;</operator><name pos:start="55:16" pos:end="55:18">hgb</name></expr></argument>, <argument pos:start="55:21" pos:end="55:22"><expr pos:start="55:21" pos:end="55:22"><literal type="number" pos:start="55:21" pos:end="55:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="55:26" pos:end="55:45">/* reserved zeros */</comment>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:60">(<expr pos:start="59:9" pos:end="59:59"><call pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:21">get_bits_long</name><argument_list pos:start="59:22" pos:end="59:31">(<argument pos:start="59:23" pos:end="59:26"><expr pos:start="59:23" pos:end="59:26"><operator pos:start="59:23" pos:end="59:23">&amp;</operator><name pos:start="59:24" pos:end="59:26">hgb</name></expr></argument>, <argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><literal type="number" pos:start="59:29" pos:end="59:30">32</literal></expr></argument>)</argument_list></call> <operator pos:start="59:33" pos:end="59:34">!=</operator> <call pos:start="59:36" pos:end="59:59"><name pos:start="59:36" pos:end="59:42">MKBETAG</name><argument_list pos:start="59:43" pos:end="59:59">(<argument pos:start="59:44" pos:end="59:46"><expr pos:start="59:44" pos:end="59:46"><literal type="char" pos:start="59:44" pos:end="59:46">'m'</literal></expr></argument>,<argument pos:start="59:48" pos:end="59:50"><expr pos:start="59:48" pos:end="59:50"><literal type="char" pos:start="59:48" pos:end="59:50">'j'</literal></expr></argument>,<argument pos:start="59:52" pos:end="59:54"><expr pos:start="59:52" pos:end="59:54"><literal type="char" pos:start="59:52" pos:end="59:54">'p'</literal></expr></argument>,<argument pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><literal type="char" pos:start="59:56" pos:end="59:58">'g'</literal></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="61:5" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:17">

        <expr_stmt pos:start="63:9" pos:end="63:68"><expr pos:start="63:9" pos:end="63:67"><call pos:start="63:9" pos:end="63:67"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:67">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:36"><expr pos:start="63:23" pos:end="63:36"><name pos:start="63:23" pos:end="63:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="63:39" pos:end="63:66"><expr pos:start="63:39" pos:end="63:66"><literal type="string" pos:start="63:39" pos:end="63:66">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:41"><expr pos:start="71:5" pos:end="71:40"><name pos:start="71:5" pos:end="71:14">field_size</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:40"><name pos:start="71:18" pos:end="71:30">get_bits_long</name><argument_list pos:start="71:31" pos:end="71:40">(<argument pos:start="71:32" pos:end="71:35"><expr pos:start="71:32" pos:end="71:35"><operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:35">hgb</name></expr></argument>, <argument pos:start="71:38" pos:end="71:39"><expr pos:start="71:38" pos:end="71:39"><literal type="number" pos:start="71:38" pos:end="71:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:43" pos:end="71:58">/* field size */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:66"><expr pos:start="73:5" pos:end="73:65"><call pos:start="73:5" pos:end="73:65"><name pos:start="73:5" pos:end="73:10">av_log</name><argument_list pos:start="73:11" pos:end="73:65">(<argument pos:start="73:12" pos:end="73:16"><expr pos:start="73:12" pos:end="73:16"><name pos:start="73:12" pos:end="73:16">avctx</name></expr></argument>, <argument pos:start="73:19" pos:end="73:30"><expr pos:start="73:19" pos:end="73:30"><name pos:start="73:19" pos:end="73:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="73:33" pos:end="73:52"><expr pos:start="73:33" pos:end="73:52"><literal type="string" pos:start="73:33" pos:end="73:52">"field size: 0x%x\n"</literal></expr></argument>, <argument pos:start="73:55" pos:end="73:64"><expr pos:start="73:55" pos:end="73:64"><name pos:start="73:55" pos:end="73:64">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><call pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:13">skip_bits</name><argument_list pos:start="75:14" pos:end="75:23">(<argument pos:start="75:15" pos:end="75:18"><expr pos:start="75:15" pos:end="75:18"><operator pos:start="75:15" pos:end="75:15">&amp;</operator><name pos:start="75:16" pos:end="75:18">hgb</name></expr></argument>, <argument pos:start="75:21" pos:end="75:22"><expr pos:start="75:21" pos:end="75:22"><literal type="number" pos:start="75:21" pos:end="75:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:26" pos:end="75:48">/* padded field size */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:110"><expr pos:start="77:5" pos:end="77:109"><name pos:start="77:5" pos:end="77:21">second_field_offs</name> <operator pos:start="77:23" pos:end="77:23">=</operator> <call pos:start="77:25" pos:end="77:109"><name pos:start="77:25" pos:end="77:33">read_offs</name><argument_list pos:start="77:34" pos:end="77:109">(<argument pos:start="77:35" pos:end="77:39"><expr pos:start="77:35" pos:end="77:39"><name pos:start="77:35" pos:end="77:39">avctx</name></expr></argument>, <argument pos:start="77:42" pos:end="77:45"><expr pos:start="77:42" pos:end="77:45"><operator pos:start="77:42" pos:end="77:42">&amp;</operator><name pos:start="77:43" pos:end="77:45">hgb</name></expr></argument>, <argument pos:start="77:48" pos:end="77:64"><expr pos:start="77:48" pos:end="77:64"><name pos:start="77:48" pos:end="77:54">buf_end</name> <operator pos:start="77:56" pos:end="77:56">-</operator> <name pos:start="77:58" pos:end="77:64">buf_ptr</name></expr></argument>, <argument pos:start="77:67" pos:end="77:108"><expr pos:start="77:67" pos:end="77:108"><literal type="string" pos:start="77:67" pos:end="77:108">"second_field_offs is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:80"><expr pos:start="79:5" pos:end="79:79"><call pos:start="79:5" pos:end="79:79"><name pos:start="79:5" pos:end="79:10">av_log</name><argument_list pos:start="79:11" pos:end="79:79">(<argument pos:start="79:12" pos:end="79:16"><expr pos:start="79:12" pos:end="79:16"><name pos:start="79:12" pos:end="79:16">avctx</name></expr></argument>, <argument pos:start="79:19" pos:end="79:30"><expr pos:start="79:19" pos:end="79:30"><name pos:start="79:19" pos:end="79:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="79:33" pos:end="79:59"><expr pos:start="79:33" pos:end="79:59"><literal type="string" pos:start="79:33" pos:end="79:59">"second field offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="79:62" pos:end="79:78"><expr pos:start="79:62" pos:end="79:78"><name pos:start="79:62" pos:end="79:78">second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:87"><expr pos:start="83:5" pos:end="83:86"><name pos:start="83:5" pos:end="83:12">dqt_offs</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:86"><name pos:start="83:16" pos:end="83:24">read_offs</name><argument_list pos:start="83:25" pos:end="83:86">(<argument pos:start="83:26" pos:end="83:30"><expr pos:start="83:26" pos:end="83:30"><name pos:start="83:26" pos:end="83:30">avctx</name></expr></argument>, <argument pos:start="83:33" pos:end="83:36"><expr pos:start="83:33" pos:end="83:36"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:36">hgb</name></expr></argument>, <argument pos:start="83:39" pos:end="83:55"><expr pos:start="83:39" pos:end="83:55"><name pos:start="83:39" pos:end="83:45">buf_end</name> <operator pos:start="83:47" pos:end="83:47">-</operator> <name pos:start="83:49" pos:end="83:55">buf_ptr</name></expr></argument>, <argument pos:start="83:58" pos:end="83:85"><expr pos:start="83:58" pos:end="83:85"><literal type="string" pos:start="83:58" pos:end="83:85">"dqt is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:62"><expr pos:start="85:5" pos:end="85:61"><call pos:start="85:5" pos:end="85:61"><name pos:start="85:5" pos:end="85:10">av_log</name><argument_list pos:start="85:11" pos:end="85:61">(<argument pos:start="85:12" pos:end="85:16"><expr pos:start="85:12" pos:end="85:16"><name pos:start="85:12" pos:end="85:16">avctx</name></expr></argument>, <argument pos:start="85:19" pos:end="85:30"><expr pos:start="85:19" pos:end="85:30"><name pos:start="85:19" pos:end="85:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="85:33" pos:end="85:50"><expr pos:start="85:33" pos:end="85:50"><literal type="string" pos:start="85:33" pos:end="85:50">"dqt offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="85:53" pos:end="85:60"><expr pos:start="85:53" pos:end="85:60"><name pos:start="85:53" pos:end="85:60">dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="101:5"><if pos:start="87:5" pos:end="101:5">if <condition pos:start="87:8" pos:end="87:17">(<expr pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">dqt_offs</name></expr>)</condition>

    <block pos:start="89:5" pos:end="101:5">{<block_content pos:start="91:9" pos:end="99:37">

        <expr_stmt pos:start="91:9" pos:end="91:82"><expr pos:start="91:9" pos:end="91:81"><call pos:start="91:9" pos:end="91:81"><name pos:start="91:9" pos:end="91:21">init_get_bits</name><argument_list pos:start="91:22" pos:end="91:81">(<argument pos:start="91:23" pos:end="91:28"><expr pos:start="91:23" pos:end="91:28"><operator pos:start="91:23" pos:end="91:23">&amp;</operator><name pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:24">s</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:28">gb</name></name></expr></argument>, <argument pos:start="91:31" pos:end="91:46"><expr pos:start="91:31" pos:end="91:46"><name pos:start="91:31" pos:end="91:37">buf_ptr</name><operator pos:start="91:38" pos:end="91:38">+</operator><name pos:start="91:39" pos:end="91:46">dqt_offs</name></expr></argument>, <argument pos:start="91:49" pos:end="91:80"><expr pos:start="91:49" pos:end="91:80"><operator pos:start="91:49" pos:end="91:49">(</operator><name pos:start="91:50" pos:end="91:56">buf_end</name> <operator pos:start="91:58" pos:end="91:58">-</operator> <operator pos:start="91:60" pos:end="91:60">(</operator><name pos:start="91:61" pos:end="91:67">buf_ptr</name><operator pos:start="91:68" pos:end="91:68">+</operator><name pos:start="91:69" pos:end="91:76">dqt_offs</name><operator pos:start="91:77" pos:end="91:77">)</operator><operator pos:start="91:78" pos:end="91:78">)</operator><operator pos:start="91:79" pos:end="91:79">*</operator><literal type="number" pos:start="91:80" pos:end="91:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:21">start_code</name></name> <operator pos:start="93:23" pos:end="93:23">=</operator> <name pos:start="93:25" pos:end="93:27">DQT</name></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="99:37"><if pos:start="95:9" pos:end="99:37">if <condition pos:start="95:12" pos:end="97:53">(<expr pos:start="95:13" pos:end="97:52"><call pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:31">ff_mjpeg_decode_dqt</name><argument_list pos:start="95:32" pos:end="95:34">(<argument pos:start="95:33" pos:end="95:33"><expr pos:start="95:33" pos:end="95:33"><name pos:start="95:33" pos:end="95:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="95:36" pos:end="95:36">&lt;</operator> <literal type="number" pos:start="95:38" pos:end="95:38">0</literal> <operator pos:start="95:40" pos:end="95:41">&amp;&amp;</operator>

            <operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:35"><name pos:start="97:14" pos:end="97:18">avctx</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:35">err_recognition</name></name> <operator pos:start="97:37" pos:end="97:37">&amp;</operator> <name pos:start="97:39" pos:end="97:51">AV_EF_EXPLODE</name><operator pos:start="97:52" pos:end="97:52">)</operator></expr>)</condition><block type="pseudo" pos:start="99:11" pos:end="99:37"><block_content pos:start="99:11" pos:end="99:37">

          <return pos:start="99:11" pos:end="99:37">return <expr pos:start="99:18" pos:end="99:36"><name pos:start="99:18" pos:end="99:36">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:87"><expr pos:start="105:5" pos:end="105:86"><name pos:start="105:5" pos:end="105:12">dht_offs</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:86"><name pos:start="105:16" pos:end="105:24">read_offs</name><argument_list pos:start="105:25" pos:end="105:86">(<argument pos:start="105:26" pos:end="105:30"><expr pos:start="105:26" pos:end="105:30"><name pos:start="105:26" pos:end="105:30">avctx</name></expr></argument>, <argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><operator pos:start="105:33" pos:end="105:33">&amp;</operator><name pos:start="105:34" pos:end="105:36">hgb</name></expr></argument>, <argument pos:start="105:39" pos:end="105:55"><expr pos:start="105:39" pos:end="105:55"><name pos:start="105:39" pos:end="105:45">buf_end</name> <operator pos:start="105:47" pos:end="105:47">-</operator> <name pos:start="105:49" pos:end="105:55">buf_ptr</name></expr></argument>, <argument pos:start="105:58" pos:end="105:85"><expr pos:start="105:58" pos:end="105:85"><literal type="string" pos:start="105:58" pos:end="105:85">"dht is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:62"><expr pos:start="107:5" pos:end="107:61"><call pos:start="107:5" pos:end="107:61"><name pos:start="107:5" pos:end="107:10">av_log</name><argument_list pos:start="107:11" pos:end="107:61">(<argument pos:start="107:12" pos:end="107:16"><expr pos:start="107:12" pos:end="107:16"><name pos:start="107:12" pos:end="107:16">avctx</name></expr></argument>, <argument pos:start="107:19" pos:end="107:30"><expr pos:start="107:19" pos:end="107:30"><name pos:start="107:19" pos:end="107:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="107:33" pos:end="107:50"><expr pos:start="107:33" pos:end="107:50"><literal type="string" pos:start="107:33" pos:end="107:50">"dht offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="107:53" pos:end="107:60"><expr pos:start="107:53" pos:end="107:60"><name pos:start="107:53" pos:end="107:60">dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:17">(<expr pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">dht_offs</name></expr>)</condition>

    <block pos:start="111:5" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:31">

        <expr_stmt pos:start="113:9" pos:end="113:82"><expr pos:start="113:9" pos:end="113:81"><call pos:start="113:9" pos:end="113:81"><name pos:start="113:9" pos:end="113:21">init_get_bits</name><argument_list pos:start="113:22" pos:end="113:81">(<argument pos:start="113:23" pos:end="113:28"><expr pos:start="113:23" pos:end="113:28"><operator pos:start="113:23" pos:end="113:23">&amp;</operator><name pos:start="113:24" pos:end="113:28"><name pos:start="113:24" pos:end="113:24">s</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:28">gb</name></name></expr></argument>, <argument pos:start="113:31" pos:end="113:46"><expr pos:start="113:31" pos:end="113:46"><name pos:start="113:31" pos:end="113:37">buf_ptr</name><operator pos:start="113:38" pos:end="113:38">+</operator><name pos:start="113:39" pos:end="113:46">dht_offs</name></expr></argument>, <argument pos:start="113:49" pos:end="113:80"><expr pos:start="113:49" pos:end="113:80"><operator pos:start="113:49" pos:end="113:49">(</operator><name pos:start="113:50" pos:end="113:56">buf_end</name> <operator pos:start="113:58" pos:end="113:58">-</operator> <operator pos:start="113:60" pos:end="113:60">(</operator><name pos:start="113:61" pos:end="113:67">buf_ptr</name><operator pos:start="113:68" pos:end="113:68">+</operator><name pos:start="113:69" pos:end="113:76">dht_offs</name><operator pos:start="113:77" pos:end="113:77">)</operator><operator pos:start="113:78" pos:end="113:78">)</operator><operator pos:start="113:79" pos:end="113:79">*</operator><literal type="number" pos:start="113:80" pos:end="113:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:21">start_code</name></name> <operator pos:start="115:23" pos:end="115:23">=</operator> <name pos:start="115:25" pos:end="115:27">DHT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:31"><expr pos:start="117:9" pos:end="117:30"><call pos:start="117:9" pos:end="117:30"><name pos:start="117:9" pos:end="117:27">ff_mjpeg_decode_dht</name><argument_list pos:start="117:28" pos:end="117:30">(<argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><name pos:start="117:29" pos:end="117:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:87"><expr pos:start="123:5" pos:end="123:86"><name pos:start="123:5" pos:end="123:12">sof_offs</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <call pos:start="123:16" pos:end="123:86"><name pos:start="123:16" pos:end="123:24">read_offs</name><argument_list pos:start="123:25" pos:end="123:86">(<argument pos:start="123:26" pos:end="123:30"><expr pos:start="123:26" pos:end="123:30"><name pos:start="123:26" pos:end="123:30">avctx</name></expr></argument>, <argument pos:start="123:33" pos:end="123:36"><expr pos:start="123:33" pos:end="123:36"><operator pos:start="123:33" pos:end="123:33">&amp;</operator><name pos:start="123:34" pos:end="123:36">hgb</name></expr></argument>, <argument pos:start="123:39" pos:end="123:55"><expr pos:start="123:39" pos:end="123:55"><name pos:start="123:39" pos:end="123:45">buf_end</name> <operator pos:start="123:47" pos:end="123:47">-</operator> <name pos:start="123:49" pos:end="123:55">buf_ptr</name></expr></argument>, <argument pos:start="123:58" pos:end="123:85"><expr pos:start="123:58" pos:end="123:85"><literal type="string" pos:start="123:58" pos:end="123:85">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:62"><expr pos:start="125:5" pos:end="125:61"><call pos:start="125:5" pos:end="125:61"><name pos:start="125:5" pos:end="125:10">av_log</name><argument_list pos:start="125:11" pos:end="125:61">(<argument pos:start="125:12" pos:end="125:16"><expr pos:start="125:12" pos:end="125:16"><name pos:start="125:12" pos:end="125:16">avctx</name></expr></argument>, <argument pos:start="125:19" pos:end="125:30"><expr pos:start="125:19" pos:end="125:30"><name pos:start="125:19" pos:end="125:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="125:33" pos:end="125:50"><expr pos:start="125:33" pos:end="125:50"><literal type="string" pos:start="125:33" pos:end="125:50">"sof offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="125:53" pos:end="125:60"><expr pos:start="125:53" pos:end="125:60"><name pos:start="125:53" pos:end="125:60">sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:17">(<expr pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:16">sof_offs</name></expr>)</condition>

    <block pos:start="129:5" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:22">

        <expr_stmt pos:start="131:9" pos:end="131:82"><expr pos:start="131:9" pos:end="131:81"><call pos:start="131:9" pos:end="131:81"><name pos:start="131:9" pos:end="131:21">init_get_bits</name><argument_list pos:start="131:22" pos:end="131:81">(<argument pos:start="131:23" pos:end="131:28"><expr pos:start="131:23" pos:end="131:28"><operator pos:start="131:23" pos:end="131:23">&amp;</operator><name pos:start="131:24" pos:end="131:28"><name pos:start="131:24" pos:end="131:24">s</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:28">gb</name></name></expr></argument>, <argument pos:start="131:31" pos:end="131:46"><expr pos:start="131:31" pos:end="131:46"><name pos:start="131:31" pos:end="131:37">buf_ptr</name><operator pos:start="131:38" pos:end="131:38">+</operator><name pos:start="131:39" pos:end="131:46">sof_offs</name></expr></argument>, <argument pos:start="131:49" pos:end="131:80"><expr pos:start="131:49" pos:end="131:80"><operator pos:start="131:49" pos:end="131:49">(</operator><name pos:start="131:50" pos:end="131:56">buf_end</name> <operator pos:start="131:58" pos:end="131:58">-</operator> <operator pos:start="131:60" pos:end="131:60">(</operator><name pos:start="131:61" pos:end="131:67">buf_ptr</name><operator pos:start="131:68" pos:end="131:68">+</operator><name pos:start="131:69" pos:end="131:76">sof_offs</name><operator pos:start="131:77" pos:end="131:77">)</operator><operator pos:start="131:78" pos:end="131:78">)</operator><operator pos:start="131:79" pos:end="131:79">*</operator><literal type="number" pos:start="131:80" pos:end="131:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:29"><expr pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:21">start_code</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:28">SOF0</name></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="137:22"><if pos:start="135:9" pos:end="137:22">if <condition pos:start="135:12" pos:end="135:39">(<expr pos:start="135:13" pos:end="135:38"><call pos:start="135:13" pos:end="135:34"><name pos:start="135:13" pos:end="135:31">ff_mjpeg_decode_sof</name><argument_list pos:start="135:32" pos:end="135:34">(<argument pos:start="135:33" pos:end="135:33"><expr pos:start="135:33" pos:end="135:33"><name pos:start="135:33" pos:end="135:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="135:36" pos:end="135:36">&lt;</operator> <literal type="number" pos:start="135:38" pos:end="135:38">0</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:22"><block_content pos:start="137:13" pos:end="137:22">

            <return pos:start="137:13" pos:end="137:22">return <expr pos:start="137:20" pos:end="137:21"><operator pos:start="137:20" pos:end="137:20">-</operator><literal type="number" pos:start="137:21" pos:end="137:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:87"><expr pos:start="143:5" pos:end="143:86"><name pos:start="143:5" pos:end="143:12">sos_offs</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <call pos:start="143:16" pos:end="143:86"><name pos:start="143:16" pos:end="143:24">read_offs</name><argument_list pos:start="143:25" pos:end="143:86">(<argument pos:start="143:26" pos:end="143:30"><expr pos:start="143:26" pos:end="143:30"><name pos:start="143:26" pos:end="143:30">avctx</name></expr></argument>, <argument pos:start="143:33" pos:end="143:36"><expr pos:start="143:33" pos:end="143:36"><operator pos:start="143:33" pos:end="143:33">&amp;</operator><name pos:start="143:34" pos:end="143:36">hgb</name></expr></argument>, <argument pos:start="143:39" pos:end="143:55"><expr pos:start="143:39" pos:end="143:55"><name pos:start="143:39" pos:end="143:45">buf_end</name> <operator pos:start="143:47" pos:end="143:47">-</operator> <name pos:start="143:49" pos:end="143:55">buf_ptr</name></expr></argument>, <argument pos:start="143:58" pos:end="143:85"><expr pos:start="143:58" pos:end="143:85"><literal type="string" pos:start="143:58" pos:end="143:85">"sos is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:62"><expr pos:start="145:5" pos:end="145:61"><call pos:start="145:5" pos:end="145:61"><name pos:start="145:5" pos:end="145:10">av_log</name><argument_list pos:start="145:11" pos:end="145:61">(<argument pos:start="145:12" pos:end="145:16"><expr pos:start="145:12" pos:end="145:16"><name pos:start="145:12" pos:end="145:16">avctx</name></expr></argument>, <argument pos:start="145:19" pos:end="145:30"><expr pos:start="145:19" pos:end="145:30"><name pos:start="145:19" pos:end="145:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="145:33" pos:end="145:50"><expr pos:start="145:33" pos:end="145:50"><literal type="string" pos:start="145:33" pos:end="145:50">"sos offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="145:53" pos:end="145:60"><expr pos:start="145:53" pos:end="145:60"><name pos:start="145:53" pos:end="145:60">sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:87"><expr pos:start="147:5" pos:end="147:86"><name pos:start="147:5" pos:end="147:12">sod_offs</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:86"><name pos:start="147:16" pos:end="147:24">read_offs</name><argument_list pos:start="147:25" pos:end="147:86">(<argument pos:start="147:26" pos:end="147:30"><expr pos:start="147:26" pos:end="147:30"><name pos:start="147:26" pos:end="147:30">avctx</name></expr></argument>, <argument pos:start="147:33" pos:end="147:36"><expr pos:start="147:33" pos:end="147:36"><operator pos:start="147:33" pos:end="147:33">&amp;</operator><name pos:start="147:34" pos:end="147:36">hgb</name></expr></argument>, <argument pos:start="147:39" pos:end="147:55"><expr pos:start="147:39" pos:end="147:55"><name pos:start="147:39" pos:end="147:45">buf_end</name> <operator pos:start="147:47" pos:end="147:47">-</operator> <name pos:start="147:49" pos:end="147:55">buf_ptr</name></expr></argument>, <argument pos:start="147:58" pos:end="147:85"><expr pos:start="147:58" pos:end="147:85"><literal type="string" pos:start="147:58" pos:end="147:85">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:62"><expr pos:start="149:5" pos:end="149:61"><call pos:start="149:5" pos:end="149:61"><name pos:start="149:5" pos:end="149:10">av_log</name><argument_list pos:start="149:11" pos:end="149:61">(<argument pos:start="149:12" pos:end="149:16"><expr pos:start="149:12" pos:end="149:16"><name pos:start="149:12" pos:end="149:16">avctx</name></expr></argument>, <argument pos:start="149:19" pos:end="149:30"><expr pos:start="149:19" pos:end="149:30"><name pos:start="149:19" pos:end="149:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="149:33" pos:end="149:50"><expr pos:start="149:33" pos:end="149:50"><literal type="string" pos:start="149:33" pos:end="149:50">"sod offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="149:53" pos:end="149:60"><expr pos:start="149:53" pos:end="149:60"><name pos:start="149:53" pos:end="149:60">sod_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="169:5"><if pos:start="151:5" pos:end="169:5">if <condition pos:start="151:8" pos:end="151:17">(<expr pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:16">sos_offs</name></expr>)</condition>

    <block pos:start="153:5" pos:end="169:5">{<block_content pos:start="155:9" pos:end="167:37">

        <expr_stmt pos:start="155:9" pos:end="157:75"><expr pos:start="155:9" pos:end="157:74"><call pos:start="155:9" pos:end="157:74"><name pos:start="155:9" pos:end="155:21">init_get_bits</name><argument_list pos:start="155:22" pos:end="157:74">(<argument pos:start="155:23" pos:end="155:28"><expr pos:start="155:23" pos:end="155:28"><operator pos:start="155:23" pos:end="155:23">&amp;</operator><name pos:start="155:24" pos:end="155:28"><name pos:start="155:24" pos:end="155:24">s</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:28">gb</name></name></expr></argument>, <argument pos:start="155:31" pos:end="155:48"><expr pos:start="155:31" pos:end="155:48"><name pos:start="155:31" pos:end="155:37">buf_ptr</name> <operator pos:start="155:39" pos:end="155:39">+</operator> <name pos:start="155:41" pos:end="155:48">sos_offs</name></expr></argument>,

                      <argument pos:start="157:23" pos:end="157:73"><expr pos:start="157:23" pos:end="157:73"><literal type="number" pos:start="157:23" pos:end="157:23">8</literal> <operator pos:start="157:25" pos:end="157:25">*</operator> <call pos:start="157:27" pos:end="157:73"><name pos:start="157:27" pos:end="157:31">FFMIN</name><argument_list pos:start="157:32" pos:end="157:73">(<argument pos:start="157:33" pos:end="157:42"><expr pos:start="157:33" pos:end="157:42"><name pos:start="157:33" pos:end="157:42">field_size</name></expr></argument>, <argument pos:start="157:45" pos:end="157:72"><expr pos:start="157:45" pos:end="157:72"><name pos:start="157:45" pos:end="157:51">buf_end</name> <operator pos:start="157:53" pos:end="157:53">-</operator> <name pos:start="157:55" pos:end="157:61">buf_ptr</name> <operator pos:start="157:63" pos:end="157:63">-</operator> <name pos:start="157:65" pos:end="157:72">sos_offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:74"><expr pos:start="159:9" pos:end="159:73"><name pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:25">mjpb_skiptosod</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <operator pos:start="159:29" pos:end="159:29">(</operator><name pos:start="159:30" pos:end="159:37">sod_offs</name> <operator pos:start="159:39" pos:end="159:39">-</operator> <name pos:start="159:41" pos:end="159:48">sos_offs</name> <operator pos:start="159:50" pos:end="159:50">-</operator> <call pos:start="159:52" pos:end="159:72"><name pos:start="159:52" pos:end="159:60">show_bits</name><argument_list pos:start="159:61" pos:end="159:72">(<argument pos:start="159:62" pos:end="159:67"><expr pos:start="159:62" pos:end="159:67"><operator pos:start="159:62" pos:end="159:62">&amp;</operator><name pos:start="159:63" pos:end="159:67"><name pos:start="159:63" pos:end="159:63">s</name><operator pos:start="159:64" pos:end="159:65">-&gt;</operator><name pos:start="159:66" pos:end="159:67">gb</name></name></expr></argument>, <argument pos:start="159:70" pos:end="159:71"><expr pos:start="159:70" pos:end="159:71"><literal type="number" pos:start="159:70" pos:end="159:71">16</literal></expr></argument>)</argument_list></call><operator pos:start="159:73" pos:end="159:73">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:28"><expr pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:21">start_code</name></name> <operator pos:start="161:23" pos:end="161:23">=</operator> <name pos:start="161:25" pos:end="161:27">SOS</name></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="167:37"><if pos:start="163:9" pos:end="167:37">if <condition pos:start="163:12" pos:end="165:53">(<expr pos:start="163:13" pos:end="165:52"><call pos:start="163:13" pos:end="163:46"><name pos:start="163:13" pos:end="163:31">ff_mjpeg_decode_sos</name><argument_list pos:start="163:32" pos:end="163:46">(<argument pos:start="163:33" pos:end="163:33"><expr pos:start="163:33" pos:end="163:33"><name pos:start="163:33" pos:end="163:33">s</name></expr></argument>, <argument pos:start="163:36" pos:end="163:39"><expr pos:start="163:36" pos:end="163:39"><name pos:start="163:36" pos:end="163:39">NULL</name></expr></argument>, <argument pos:start="163:42" pos:end="163:45"><expr pos:start="163:42" pos:end="163:45"><name pos:start="163:42" pos:end="163:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="163:48" pos:end="163:48">&lt;</operator> <literal type="number" pos:start="163:50" pos:end="163:50">0</literal> <operator pos:start="163:52" pos:end="163:53">&amp;&amp;</operator>

            <operator pos:start="165:13" pos:end="165:13">(</operator><name pos:start="165:14" pos:end="165:35"><name pos:start="165:14" pos:end="165:18">avctx</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:35">err_recognition</name></name> <operator pos:start="165:37" pos:end="165:37">&amp;</operator> <name pos:start="165:39" pos:end="165:51">AV_EF_EXPLODE</name><operator pos:start="165:52" pos:end="165:52">)</operator></expr>)</condition><block type="pseudo" pos:start="167:11" pos:end="167:37"><block_content pos:start="167:11" pos:end="167:37">

          <return pos:start="167:11" pos:end="167:37">return <expr pos:start="167:18" pos:end="167:36"><name pos:start="167:18" pos:end="167:36">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="191:5"><if pos:start="173:5" pos:end="191:5">if <condition pos:start="173:8" pos:end="173:22">(<expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:21">interlaced</name></name></expr>)</condition> <block pos:start="173:24" pos:end="191:5">{<block_content pos:start="175:9" pos:end="189:13">

        <expr_stmt pos:start="175:9" pos:end="175:29"><expr pos:start="175:9" pos:end="175:28"><name pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:23">bottom_field</name></name> <operator pos:start="175:25" pos:end="175:26">^=</operator> <literal type="number" pos:start="175:28" pos:end="175:28">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="177:9" pos:end="177:58">/* if not bottom field, do not output image yet */</comment>

        <if_stmt pos:start="179:9" pos:end="189:13"><if pos:start="179:9" pos:end="189:13">if <condition pos:start="179:12" pos:end="179:74">(<expr pos:start="179:13" pos:end="179:73"><name pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:27">bottom_field</name></name> <operator pos:start="179:29" pos:end="179:30">!=</operator> <name pos:start="179:32" pos:end="179:52"><name pos:start="179:32" pos:end="179:32">s</name><operator pos:start="179:33" pos:end="179:34">-&gt;</operator><name pos:start="179:35" pos:end="179:52">interlace_polarity</name></name> <operator pos:start="179:54" pos:end="179:55">&amp;&amp;</operator> <name pos:start="179:57" pos:end="179:73">second_field_offs</name></expr>)</condition>

        <block pos:start="181:9" pos:end="189:13">{<block_content pos:start="183:13" pos:end="187:29">

            <expr_stmt pos:start="183:13" pos:end="183:46"><expr pos:start="183:13" pos:end="183:45"><name pos:start="183:13" pos:end="183:19">buf_ptr</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <name pos:start="183:23" pos:end="183:25">buf</name> <operator pos:start="183:27" pos:end="183:27">+</operator> <name pos:start="183:29" pos:end="183:45">second_field_offs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:34"><expr pos:start="185:13" pos:end="185:33"><name pos:start="185:13" pos:end="185:29">second_field_offs</name> <operator pos:start="185:31" pos:end="185:31">=</operator> <literal type="number" pos:start="185:33" pos:end="185:33">0</literal></expr>;</expr_stmt>

            <goto pos:start="187:13" pos:end="187:29">goto <name pos:start="187:18" pos:end="187:28">read_header</name>;</goto>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="195:5" pos:end="195:66">//XXX FIXME factorize, this looks very similar to the EOI code</comment>



    <expr_stmt pos:start="199:5" pos:end="199:30"><expr pos:start="199:5" pos:end="199:29"><operator pos:start="199:5" pos:end="199:5">*</operator><name pos:start="199:6" pos:end="199:12">picture</name><operator pos:start="199:13" pos:end="199:13">=</operator> <operator pos:start="199:15" pos:end="199:15">*</operator><name pos:start="199:16" pos:end="199:29"><name pos:start="199:16" pos:end="199:16">s</name><operator pos:start="199:17" pos:end="199:18">-&gt;</operator><name pos:start="199:19" pos:end="199:29">picture_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:33"><expr pos:start="201:5" pos:end="201:32"><operator pos:start="201:5" pos:end="201:5">*</operator><name pos:start="201:6" pos:end="201:14">data_size</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <sizeof pos:start="201:18" pos:end="201:32">sizeof<argument_list pos:start="201:24" pos:end="201:32">(<argument pos:start="201:25" pos:end="201:31"><expr pos:start="201:25" pos:end="201:31"><name pos:start="201:25" pos:end="201:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="221:5"><if pos:start="205:5" pos:end="221:5">if<condition pos:start="205:7" pos:end="205:20">(<expr pos:start="205:8" pos:end="205:19"><operator pos:start="205:8" pos:end="205:8">!</operator><name pos:start="205:9" pos:end="205:19"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:19">lossless</name></name></expr>)</condition><block pos:start="205:21" pos:end="221:5">{<block_content pos:start="207:9" pos:end="219:40">

        <expr_stmt pos:start="207:9" pos:end="207:75"><expr pos:start="207:9" pos:end="207:74"><name pos:start="207:9" pos:end="207:24"><name pos:start="207:9" pos:end="207:15">picture</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:24">quality</name></name><operator pos:start="207:25" pos:end="207:25">=</operator> <call pos:start="207:27" pos:end="207:74"><name pos:start="207:27" pos:end="207:32">FFMAX3</name><argument_list pos:start="207:33" pos:end="207:74">(<argument pos:start="207:34" pos:end="207:45"><expr pos:start="207:34" pos:end="207:45"><name pos:start="207:34" pos:end="207:45"><name pos:start="207:34" pos:end="207:34">s</name><operator pos:start="207:35" pos:end="207:36">-&gt;</operator><name pos:start="207:37" pos:end="207:42">qscale</name><index pos:start="207:43" pos:end="207:45">[<expr pos:start="207:44" pos:end="207:44"><literal type="number" pos:start="207:44" pos:end="207:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="207:48" pos:end="207:59"><expr pos:start="207:48" pos:end="207:59"><name pos:start="207:48" pos:end="207:59"><name pos:start="207:48" pos:end="207:48">s</name><operator pos:start="207:49" pos:end="207:50">-&gt;</operator><name pos:start="207:51" pos:end="207:56">qscale</name><index pos:start="207:57" pos:end="207:59">[<expr pos:start="207:58" pos:end="207:58"><literal type="number" pos:start="207:58" pos:end="207:58">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="207:62" pos:end="207:73"><expr pos:start="207:62" pos:end="207:73"><name pos:start="207:62" pos:end="207:73"><name pos:start="207:62" pos:end="207:62">s</name><operator pos:start="207:63" pos:end="207:64">-&gt;</operator><name pos:start="207:65" pos:end="207:70">qscale</name><index pos:start="207:71" pos:end="207:73">[<expr pos:start="207:72" pos:end="207:72"><literal type="number" pos:start="207:72" pos:end="207:72">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:28"><expr pos:start="209:9" pos:end="209:27"><name pos:start="209:9" pos:end="209:24"><name pos:start="209:9" pos:end="209:15">picture</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:24">qstride</name></name><operator pos:start="209:25" pos:end="209:25">=</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:47"><expr pos:start="211:9" pos:end="211:46"><name pos:start="211:9" pos:end="211:29"><name pos:start="211:9" pos:end="211:15">picture</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:29">qscale_table</name></name><operator pos:start="211:30" pos:end="211:30">=</operator> <name pos:start="211:32" pos:end="211:46"><name pos:start="211:32" pos:end="211:32">s</name><operator pos:start="211:33" pos:end="211:34">-&gt;</operator><name pos:start="211:35" pos:end="211:46">qscale_table</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:74"><expr pos:start="213:9" pos:end="213:73"><call pos:start="213:9" pos:end="213:73"><name pos:start="213:9" pos:end="213:14">memset</name><argument_list pos:start="213:15" pos:end="213:73">(<argument pos:start="213:16" pos:end="213:36"><expr pos:start="213:16" pos:end="213:36"><name pos:start="213:16" pos:end="213:36"><name pos:start="213:16" pos:end="213:22">picture</name><operator pos:start="213:23" pos:end="213:24">-&gt;</operator><name pos:start="213:25" pos:end="213:36">qscale_table</name></name></expr></argument>, <argument pos:start="213:39" pos:end="213:54"><expr pos:start="213:39" pos:end="213:54"><name pos:start="213:39" pos:end="213:54"><name pos:start="213:39" pos:end="213:45">picture</name><operator pos:start="213:46" pos:end="213:47">-&gt;</operator><name pos:start="213:48" pos:end="213:54">quality</name></name></expr></argument>, <argument pos:start="213:57" pos:end="213:72"><expr pos:start="213:57" pos:end="213:72"><operator pos:start="213:57" pos:end="213:57">(</operator><name pos:start="213:58" pos:end="213:65"><name pos:start="213:58" pos:end="213:58">s</name><operator pos:start="213:59" pos:end="213:60">-&gt;</operator><name pos:start="213:61" pos:end="213:65">width</name></name><operator pos:start="213:66" pos:end="213:66">+</operator><literal type="number" pos:start="213:67" pos:end="213:68">15</literal><operator pos:start="213:69" pos:end="213:69">)</operator><operator pos:start="213:70" pos:end="213:70">/</operator><literal type="number" pos:start="213:71" pos:end="213:72">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="217:70"><if pos:start="215:9" pos:end="217:70">if<condition pos:start="215:11" pos:end="215:38">(<expr pos:start="215:12" pos:end="215:37"><name pos:start="215:12" pos:end="215:23"><name pos:start="215:12" pos:end="215:16">avctx</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:23">debug</name></name> <operator pos:start="215:25" pos:end="215:25">&amp;</operator> <name pos:start="215:27" pos:end="215:37">FF_DEBUG_QP</name></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:70"><block_content pos:start="217:13" pos:end="217:70">

            <expr_stmt pos:start="217:13" pos:end="217:70"><expr pos:start="217:13" pos:end="217:69"><call pos:start="217:13" pos:end="217:69"><name pos:start="217:13" pos:end="217:18">av_log</name><argument_list pos:start="217:19" pos:end="217:69">(<argument pos:start="217:20" pos:end="217:24"><expr pos:start="217:20" pos:end="217:24"><name pos:start="217:20" pos:end="217:24">avctx</name></expr></argument>, <argument pos:start="217:27" pos:end="217:38"><expr pos:start="217:27" pos:end="217:38"><name pos:start="217:27" pos:end="217:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="217:41" pos:end="217:50"><expr pos:start="217:41" pos:end="217:50"><literal type="string" pos:start="217:41" pos:end="217:50">"QP: %d\n"</literal></expr></argument>, <argument pos:start="217:53" pos:end="217:68"><expr pos:start="217:53" pos:end="217:68"><name pos:start="217:53" pos:end="217:68"><name pos:start="217:53" pos:end="217:59">picture</name><operator pos:start="217:60" pos:end="217:61">-&gt;</operator><name pos:start="217:62" pos:end="217:68">quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:40"><expr pos:start="219:9" pos:end="219:39"><name pos:start="219:9" pos:end="219:24"><name pos:start="219:9" pos:end="219:15">picture</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:24">quality</name></name><operator pos:start="219:25" pos:end="219:26">*=</operator> <name pos:start="219:28" pos:end="219:39">FF_QP2LAMBDA</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="225:5" pos:end="225:25">return <expr pos:start="225:12" pos:end="225:24"><name pos:start="225:12" pos:end="225:18">buf_ptr</name> <operator pos:start="225:20" pos:end="225:20">-</operator> <name pos:start="225:22" pos:end="225:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
