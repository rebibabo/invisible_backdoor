<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14290.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">device_set_bootindex</name><parameter_list pos:start="1:33" pos:end="3:60">(<parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:39">Object</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">obj</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:53">Visitor</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">v</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:74"><decl pos:start="1:59" pos:end="1:74"><type pos:start="1:59" pos:end="1:74"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:68">char</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">name</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:37">void</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:45">opaque</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:59"><decl pos:start="3:48" pos:end="3:59"><type pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:52">Error</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier><modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:5">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">BootIndexProperty</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:27">prop</name> <init pos:start="7:29" pos:end="7:36">= <expr pos:start="7:31" pos:end="7:36"><name pos:start="7:31" pos:end="7:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:22">boot_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:55"><expr pos:start="15:5" pos:end="15:54"><call pos:start="15:5" pos:end="15:54"><name pos:start="15:5" pos:end="15:20">visit_type_int32</name><argument_list pos:start="15:21" pos:end="15:54">(<argument pos:start="15:22" pos:end="15:22"><expr pos:start="15:22" pos:end="15:22"><name pos:start="15:22" pos:end="15:22">v</name></expr></argument>, <argument pos:start="15:25" pos:end="15:28"><expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">name</name></expr></argument>, <argument pos:start="15:31" pos:end="15:41"><expr pos:start="15:31" pos:end="15:41"><operator pos:start="15:31" pos:end="15:31">&amp;</operator><name pos:start="15:32" pos:end="15:41">boot_index</name></expr></argument>, <argument pos:start="15:44" pos:end="15:53"><expr pos:start="15:44" pos:end="15:53"><operator pos:start="15:44" pos:end="15:44">&amp;</operator><name pos:start="15:45" pos:end="15:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:17">local_err</name></expr>)</condition> <block pos:start="17:20" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:17">

        <goto pos:start="19:9" pos:end="19:17">goto <name pos:start="19:14" pos:end="19:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:67">/* check whether bootindex is present in fw_boot_order list  */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><call pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:20">check_boot_index</name><argument_list pos:start="25:21" pos:end="25:44">(<argument pos:start="25:22" pos:end="25:31"><expr pos:start="25:22" pos:end="25:31"><name pos:start="25:22" pos:end="25:31">boot_index</name></expr></argument>, <argument pos:start="25:34" pos:end="25:43"><expr pos:start="25:34" pos:end="25:43"><operator pos:start="25:34" pos:end="25:34">&amp;</operator><name pos:start="25:35" pos:end="25:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:17">local_err</name></expr>)</condition> <block pos:start="27:20" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:17">

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:39">/* change bootindex to a new one */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><operator pos:start="35:5" pos:end="35:5">*</operator><name pos:start="35:6" pos:end="35:20"><name pos:start="35:6" pos:end="35:9">prop</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:20">bootindex</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:33">boot_index</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:68"><expr pos:start="39:5" pos:end="39:67"><call pos:start="39:5" pos:end="39:67"><name pos:start="39:5" pos:end="39:24">add_boot_device_path</name><argument_list pos:start="39:25" pos:end="39:67">(<argument pos:start="39:26" pos:end="39:41"><expr pos:start="39:26" pos:end="39:41"><operator pos:start="39:26" pos:end="39:26">*</operator><name pos:start="39:27" pos:end="39:41"><name pos:start="39:27" pos:end="39:30">prop</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:41">bootindex</name></name></expr></argument>, <argument pos:start="39:44" pos:end="39:52"><expr pos:start="39:44" pos:end="39:52"><name pos:start="39:44" pos:end="39:52"><name pos:start="39:44" pos:end="39:47">prop</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:52">dev</name></name></expr></argument>, <argument pos:start="39:55" pos:end="39:66"><expr pos:start="39:55" pos:end="39:66"><name pos:start="39:55" pos:end="39:66"><name pos:start="39:55" pos:end="39:58">prop</name><operator pos:start="39:59" pos:end="39:60">-&gt;</operator><name pos:start="39:61" pos:end="39:66">suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="43:1" pos:end="43:4"><name pos:start="43:1" pos:end="43:3">out</name>:</label>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:17">local_err</name></expr>)</condition> <block pos:start="45:20" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:41">

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:23">error_propagate</name><argument_list pos:start="47:24" pos:end="47:40">(<argument pos:start="47:25" pos:end="47:28"><expr pos:start="47:25" pos:end="47:28"><name pos:start="47:25" pos:end="47:28">errp</name></expr></argument>, <argument pos:start="47:31" pos:end="47:39"><expr pos:start="47:31" pos:end="47:39"><name pos:start="47:31" pos:end="47:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
