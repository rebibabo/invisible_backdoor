<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2172.c" pos:tabs="8"><function pos:start="1:1" pos:end="329:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">init_ppc_proc</name><parameter_list pos:start="1:26" pos:end="1:42">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:36">PowerPCCPU</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="329:1">{<block_content pos:start="5:5" pos:end="327:5">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">PowerPCCPUClass</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">pcc</name> <init pos:start="5:26" pos:end="5:53">= <expr pos:start="5:28" pos:end="5:53"><call pos:start="5:28" pos:end="5:53"><name pos:start="5:28" pos:end="5:48">POWERPC_CPU_GET_CLASS</name><argument_list pos:start="5:49" pos:end="5:53">(<argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUPPCState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:30">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:30"><operator pos:start="9:5" pos:end="9:5">!</operator><call pos:start="9:6" pos:end="9:30"><name pos:start="9:6" pos:end="9:12">defined</name><argument_list pos:start="9:13" pos:end="9:30">(<argument pos:start="9:14" pos:end="9:29"><expr pos:start="9:14" pos:end="9:29"><name pos:start="9:14" pos:end="9:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:7">env</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:19">irq_inputs</name></name> <operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:26">NULL</name></expr>;</expr_stmt>

    <comment type="block" pos:start="17:5" pos:end="17:57">/* Set all exception vectors to an invalid address */</comment>

    <for pos:start="19:5" pos:end="21:53">for <control pos:start="19:9" pos:end="19:41">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:36"><expr pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:35">POWERPC_EXCP_NB</name></expr>;</condition> <incr pos:start="19:38" pos:end="19:40"><expr pos:start="19:38" pos:end="19:40"><name pos:start="19:38" pos:end="19:38">i</name><operator pos:start="19:39" pos:end="19:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="21:9" pos:end="21:53"><block_content pos:start="21:9" pos:end="21:53">

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:11">env</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:25">excp_vectors</name><index pos:start="21:26" pos:end="21:28">[<expr pos:start="21:27" pos:end="21:27"><name pos:start="21:27" pos:end="21:27">i</name></expr>]</index></name> <operator pos:start="21:30" pos:end="21:30">=</operator> <operator pos:start="21:32" pos:end="21:32">(</operator><name pos:start="21:33" pos:end="21:44">target_ulong</name><operator pos:start="21:45" pos:end="21:45">)</operator><operator pos:start="21:46" pos:end="21:46">(</operator><operator pos:start="21:47" pos:end="21:47">-</operator><literal type="number" pos:start="21:48" pos:end="21:51">1ULL</literal><operator pos:start="21:52" pos:end="21:52">)</operator></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:7">env</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:18">ivor_mask</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <literal type="number" pos:start="23:22" pos:end="23:31">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:7">env</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:18">ivpr_mask</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:31">0x00000000</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:33">/* Default MMU definitions */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:7">env</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:16">nb_BATs</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:20"><expr pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:7">env</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:15">nb_tlb</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:7">env</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:16">nb_ways</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:7">env</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:17">tlb_type</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:28">TLB_NONE</name></expr>;</expr_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="39:5" pos:end="39:60">/* Register SPR common to all PowerPC implementations */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><call pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:19">gen_spr_generic</name><argument_list pos:start="41:20" pos:end="41:24">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="61:27"><expr pos:start="43:5" pos:end="61:26"><call pos:start="43:5" pos:end="61:26"><name pos:start="43:5" pos:end="43:16">spr_register</name><argument_list pos:start="43:17" pos:end="61:26">(<argument pos:start="43:18" pos:end="43:20"><expr pos:start="43:18" pos:end="43:20"><name pos:start="43:18" pos:end="43:20">env</name></expr></argument>, <argument pos:start="43:23" pos:end="43:29"><expr pos:start="43:23" pos:end="43:29"><name pos:start="43:23" pos:end="43:29">SPR_PVR</name></expr></argument>, <argument pos:start="43:32" pos:end="43:36"><expr pos:start="43:32" pos:end="43:36"><literal type="string" pos:start="43:32" pos:end="43:36">"PVR"</literal></expr></argument>,

                 <comment type="block" pos:start="45:18" pos:end="45:58">/* Linux permits userspace to read PVR */</comment>

<cpp:if pos:start="47:1" pos:end="47:30">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:30"><call pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:30">(<argument pos:start="47:13" pos:end="47:29"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:29">CONFIG_LINUX_USER</name></expr></argument>)</argument_list></call></expr></cpp:if>

                 <argument pos:start="49:18" pos:end="49:34"><expr pos:start="49:18" pos:end="49:34"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:34">spr_read_generic</name></expr></argument>,

<cpp:else pos:start="51:1" pos:end="51:5">#<cpp:directive pos:start="51:2" pos:end="51:5">else</cpp:directive></cpp:else>

                 <argument pos:start="53:18" pos:end="53:29"><expr pos:start="53:18" pos:end="53:29"><name pos:start="53:18" pos:end="53:29">SPR_NOACCESS</name></expr></argument>,

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

                 <argument pos:start="57:18" pos:end="57:29"><expr pos:start="57:18" pos:end="57:29"><name pos:start="57:18" pos:end="57:29">SPR_NOACCESS</name></expr></argument>,

                 <argument pos:start="59:18" pos:end="59:34"><expr pos:start="59:18" pos:end="59:34"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:34">spr_read_generic</name></expr></argument>, <argument pos:start="59:37" pos:end="59:48"><expr pos:start="59:37" pos:end="59:48"><name pos:start="59:37" pos:end="59:48">SPR_NOACCESS</name></expr></argument>,

                 <argument pos:start="61:18" pos:end="61:25"><expr pos:start="61:18" pos:end="61:25"><name pos:start="61:18" pos:end="61:25"><name pos:start="61:18" pos:end="61:20">pcc</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:25">pvr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:77">/* Register SVR if it's defined to anything else than POWERPC_SVR_NONE */</comment>

    <if_stmt pos:start="65:5" pos:end="89:5"><if pos:start="65:5" pos:end="89:5">if <condition pos:start="65:8" pos:end="65:37">(<expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">pcc</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:16">svr</name></name> <operator pos:start="65:18" pos:end="65:19">!=</operator> <name pos:start="65:21" pos:end="65:36">POWERPC_SVR_NONE</name></expr>)</condition> <block pos:start="65:39" pos:end="89:5">{<block_content pos:start="67:9" pos:end="87:9">

        <if_stmt pos:start="67:9" pos:end="87:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:40">(<expr pos:start="67:13" pos:end="67:39"><name pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:15">pcc</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:20">svr</name></name> <operator pos:start="67:22" pos:end="67:22">&amp;</operator> <name pos:start="67:24" pos:end="67:39">POWERPC_SVR_E500</name></expr>)</condition> <block pos:start="67:42" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:55">

            <expr_stmt pos:start="69:13" pos:end="75:55"><expr pos:start="69:13" pos:end="75:54"><call pos:start="69:13" pos:end="75:54"><name pos:start="69:13" pos:end="69:24">spr_register</name><argument_list pos:start="69:25" pos:end="75:54">(<argument pos:start="69:26" pos:end="69:28"><expr pos:start="69:26" pos:end="69:28"><name pos:start="69:26" pos:end="69:28">env</name></expr></argument>, <argument pos:start="69:31" pos:end="69:42"><expr pos:start="69:31" pos:end="69:42"><name pos:start="69:31" pos:end="69:42">SPR_E500_SVR</name></expr></argument>, <argument pos:start="69:45" pos:end="69:49"><expr pos:start="69:45" pos:end="69:49"><literal type="string" pos:start="69:45" pos:end="69:49">"SVR"</literal></expr></argument>,

                         <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">SPR_NOACCESS</name></expr></argument>, <argument pos:start="71:40" pos:end="71:51"><expr pos:start="71:40" pos:end="71:51"><name pos:start="71:40" pos:end="71:51">SPR_NOACCESS</name></expr></argument>,

                         <argument pos:start="73:26" pos:end="73:42"><expr pos:start="73:26" pos:end="73:42"><operator pos:start="73:26" pos:end="73:26">&amp;</operator><name pos:start="73:27" pos:end="73:42">spr_read_generic</name></expr></argument>, <argument pos:start="73:45" pos:end="73:56"><expr pos:start="73:45" pos:end="73:56"><name pos:start="73:45" pos:end="73:56">SPR_NOACCESS</name></expr></argument>,

                         <argument pos:start="75:26" pos:end="75:53"><expr pos:start="75:26" pos:end="75:53"><name pos:start="75:26" pos:end="75:33"><name pos:start="75:26" pos:end="75:28">pcc</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:33">svr</name></name> <operator pos:start="75:35" pos:end="75:35">&amp;</operator> <operator pos:start="75:37" pos:end="75:37">~</operator><name pos:start="75:38" pos:end="75:53">POWERPC_SVR_E500</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="87:9">else <block pos:start="77:16" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:35">

            <expr_stmt pos:start="79:13" pos:end="85:35"><expr pos:start="79:13" pos:end="85:34"><call pos:start="79:13" pos:end="85:34"><name pos:start="79:13" pos:end="79:24">spr_register</name><argument_list pos:start="79:25" pos:end="85:34">(<argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><name pos:start="79:26" pos:end="79:28">env</name></expr></argument>, <argument pos:start="79:31" pos:end="79:37"><expr pos:start="79:31" pos:end="79:37"><name pos:start="79:31" pos:end="79:37">SPR_SVR</name></expr></argument>, <argument pos:start="79:40" pos:end="79:44"><expr pos:start="79:40" pos:end="79:44"><literal type="string" pos:start="79:40" pos:end="79:44">"SVR"</literal></expr></argument>,

                         <argument pos:start="81:26" pos:end="81:37"><expr pos:start="81:26" pos:end="81:37"><name pos:start="81:26" pos:end="81:37">SPR_NOACCESS</name></expr></argument>, <argument pos:start="81:40" pos:end="81:51"><expr pos:start="81:40" pos:end="81:51"><name pos:start="81:40" pos:end="81:51">SPR_NOACCESS</name></expr></argument>,

                         <argument pos:start="83:26" pos:end="83:42"><expr pos:start="83:26" pos:end="83:42"><operator pos:start="83:26" pos:end="83:26">&amp;</operator><name pos:start="83:27" pos:end="83:42">spr_read_generic</name></expr></argument>, <argument pos:start="83:45" pos:end="83:56"><expr pos:start="83:45" pos:end="83:56"><name pos:start="83:45" pos:end="83:56">SPR_NOACCESS</name></expr></argument>,

                         <argument pos:start="85:26" pos:end="85:33"><expr pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:28">pcc</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:33">svr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="91:5" pos:end="91:77">/* PowerPC implementation specific initialisations (SPRs, timers, ...) */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:27"><expr pos:start="93:5" pos:end="93:26"><call pos:start="93:5" pos:end="93:26">(<modifier pos:start="93:6" pos:end="93:6">*</modifier><name pos:start="93:7" pos:end="93:20"><name pos:start="93:7" pos:end="93:9">pcc</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:20">init_proc</name></name>)<argument_list pos:start="93:22" pos:end="93:26">(<argument pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><name pos:start="93:23" pos:end="93:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:45">/* MSR bits &amp; flags consistency checks */</comment>

    <if_stmt pos:start="99:5" pos:end="127:5"><if pos:start="99:5" pos:end="119:5">if <condition pos:start="99:8" pos:end="99:34">(<expr pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:11">env</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:21">msr_mask</name></name> <operator pos:start="99:23" pos:end="99:23">&amp;</operator> <operator pos:start="99:25" pos:end="99:25">(</operator><literal type="number" pos:start="99:26" pos:end="99:26">1</literal> <operator pos:start="99:28" pos:end="99:29">&lt;&lt;</operator> <literal type="number" pos:start="99:31" pos:end="99:32">25</literal><operator pos:start="99:33" pos:end="99:33">)</operator></expr>)</condition> <block pos:start="99:36" pos:end="119:5">{<block_content pos:start="101:9" pos:end="117:9">

        <switch pos:start="101:9" pos:end="117:9">switch <condition pos:start="101:16" pos:end="101:67">(<expr pos:start="101:17" pos:end="101:66"><name pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:19">env</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:26">flags</name></name> <operator pos:start="101:28" pos:end="101:28">&amp;</operator> <operator pos:start="101:30" pos:end="101:30">(</operator><name pos:start="101:31" pos:end="101:46">POWERPC_FLAG_SPE</name> <operator pos:start="101:48" pos:end="101:48">|</operator> <name pos:start="101:50" pos:end="101:65">POWERPC_FLAG_VRE</name><operator pos:start="101:66" pos:end="101:66">)</operator></expr>)</condition> <block pos:start="101:69" pos:end="117:9">{<block_content pos:start="103:9" pos:end="115:20">

        <case pos:start="103:9" pos:end="103:30">case <expr pos:start="103:14" pos:end="103:29"><name pos:start="103:14" pos:end="103:29">POWERPC_FLAG_SPE</name></expr>:</case>

        <case pos:start="105:9" pos:end="105:30">case <expr pos:start="105:14" pos:end="105:29"><name pos:start="105:14" pos:end="105:29">POWERPC_FLAG_VRE</name></expr>:</case>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <default pos:start="109:9" pos:end="109:16">default:</default>

            <expr_stmt pos:start="111:13" pos:end="113:76"><expr pos:start="111:13" pos:end="113:75"><call pos:start="111:13" pos:end="113:75"><name pos:start="111:13" pos:end="111:19">fprintf</name><argument_list pos:start="111:20" pos:end="113:75">(<argument pos:start="111:21" pos:end="111:26"><expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:26">stderr</name></expr></argument>, <argument pos:start="111:29" pos:end="113:74"><expr pos:start="111:29" pos:end="113:74"><literal type="string" pos:start="111:29" pos:end="111:68">"PowerPC MSR definition inconsistency\n"</literal>

                    <literal type="string" pos:start="113:21" pos:end="113:74">"Should define POWERPC_FLAG_SPE or POWERPC_FLAG_VRE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:20"><expr pos:start="115:13" pos:end="115:19"><call pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:16">exit</name><argument_list pos:start="115:17" pos:end="115:19">(<argument pos:start="115:18" pos:end="115:18"><expr pos:start="115:18" pos:end="115:18"><literal type="number" pos:start="115:18" pos:end="115:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="119:7" pos:end="127:5">else if <condition pos:start="119:15" pos:end="119:66">(<expr pos:start="119:16" pos:end="119:65"><name pos:start="119:16" pos:end="119:25"><name pos:start="119:16" pos:end="119:18">env</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:25">flags</name></name> <operator pos:start="119:27" pos:end="119:27">&amp;</operator> <operator pos:start="119:29" pos:end="119:29">(</operator><name pos:start="119:30" pos:end="119:45">POWERPC_FLAG_SPE</name> <operator pos:start="119:47" pos:end="119:47">|</operator> <name pos:start="119:49" pos:end="119:64">POWERPC_FLAG_VRE</name><operator pos:start="119:65" pos:end="119:65">)</operator></expr>)</condition> <block pos:start="119:68" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:16">

        <expr_stmt pos:start="121:9" pos:end="123:77"><expr pos:start="121:9" pos:end="123:76"><call pos:start="121:9" pos:end="123:76"><name pos:start="121:9" pos:end="121:15">fprintf</name><argument_list pos:start="121:16" pos:end="123:76">(<argument pos:start="121:17" pos:end="121:22"><expr pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:22">stderr</name></expr></argument>, <argument pos:start="121:25" pos:end="123:75"><expr pos:start="121:25" pos:end="123:75"><literal type="string" pos:start="121:25" pos:end="121:64">"PowerPC MSR definition inconsistency\n"</literal>

                <literal type="string" pos:start="123:17" pos:end="123:75">"Should not define POWERPC_FLAG_SPE nor POWERPC_FLAG_VRE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><call pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:12">exit</name><argument_list pos:start="125:13" pos:end="125:15">(<argument pos:start="125:14" pos:end="125:14"><expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="157:5"><if pos:start="129:5" pos:end="149:5">if <condition pos:start="129:8" pos:end="129:34">(<expr pos:start="129:9" pos:end="129:33"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:11">env</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:21">msr_mask</name></name> <operator pos:start="129:23" pos:end="129:23">&amp;</operator> <operator pos:start="129:25" pos:end="129:25">(</operator><literal type="number" pos:start="129:26" pos:end="129:26">1</literal> <operator pos:start="129:28" pos:end="129:29">&lt;&lt;</operator> <literal type="number" pos:start="129:31" pos:end="129:32">17</literal><operator pos:start="129:33" pos:end="129:33">)</operator></expr>)</condition> <block pos:start="129:36" pos:end="149:5">{<block_content pos:start="131:9" pos:end="147:9">

        <switch pos:start="131:9" pos:end="147:9">switch <condition pos:start="131:16" pos:end="131:67">(<expr pos:start="131:17" pos:end="131:66"><name pos:start="131:17" pos:end="131:26"><name pos:start="131:17" pos:end="131:19">env</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:26">flags</name></name> <operator pos:start="131:28" pos:end="131:28">&amp;</operator> <operator pos:start="131:30" pos:end="131:30">(</operator><name pos:start="131:31" pos:end="131:47">POWERPC_FLAG_TGPR</name> <operator pos:start="131:49" pos:end="131:49">|</operator> <name pos:start="131:51" pos:end="131:65">POWERPC_FLAG_CE</name><operator pos:start="131:66" pos:end="131:66">)</operator></expr>)</condition> <block pos:start="131:69" pos:end="147:9">{<block_content pos:start="133:9" pos:end="145:20">

        <case pos:start="133:9" pos:end="133:31">case <expr pos:start="133:14" pos:end="133:30"><name pos:start="133:14" pos:end="133:30">POWERPC_FLAG_TGPR</name></expr>:</case>

        <case pos:start="135:9" pos:end="135:29">case <expr pos:start="135:14" pos:end="135:28"><name pos:start="135:14" pos:end="135:28">POWERPC_FLAG_CE</name></expr>:</case>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <default pos:start="139:9" pos:end="139:16">default:</default>

            <expr_stmt pos:start="141:13" pos:end="143:76"><expr pos:start="141:13" pos:end="143:75"><call pos:start="141:13" pos:end="143:75"><name pos:start="141:13" pos:end="141:19">fprintf</name><argument_list pos:start="141:20" pos:end="143:75">(<argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><name pos:start="141:21" pos:end="141:26">stderr</name></expr></argument>, <argument pos:start="141:29" pos:end="143:74"><expr pos:start="141:29" pos:end="143:74"><literal type="string" pos:start="141:29" pos:end="141:68">"PowerPC MSR definition inconsistency\n"</literal>

                    <literal type="string" pos:start="143:21" pos:end="143:74">"Should define POWERPC_FLAG_TGPR or POWERPC_FLAG_CE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:20"><expr pos:start="145:13" pos:end="145:19"><call pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:16">exit</name><argument_list pos:start="145:17" pos:end="145:19">(<argument pos:start="145:18" pos:end="145:18"><expr pos:start="145:18" pos:end="145:18"><literal type="number" pos:start="145:18" pos:end="145:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="149:7" pos:end="157:5">else if <condition pos:start="149:15" pos:end="149:66">(<expr pos:start="149:16" pos:end="149:65"><name pos:start="149:16" pos:end="149:25"><name pos:start="149:16" pos:end="149:18">env</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:25">flags</name></name> <operator pos:start="149:27" pos:end="149:27">&amp;</operator> <operator pos:start="149:29" pos:end="149:29">(</operator><name pos:start="149:30" pos:end="149:46">POWERPC_FLAG_TGPR</name> <operator pos:start="149:48" pos:end="149:48">|</operator> <name pos:start="149:50" pos:end="149:64">POWERPC_FLAG_CE</name><operator pos:start="149:65" pos:end="149:65">)</operator></expr>)</condition> <block pos:start="149:68" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:16">

        <expr_stmt pos:start="151:9" pos:end="153:77"><expr pos:start="151:9" pos:end="153:76"><call pos:start="151:9" pos:end="153:76"><name pos:start="151:9" pos:end="151:15">fprintf</name><argument_list pos:start="151:16" pos:end="153:76">(<argument pos:start="151:17" pos:end="151:22"><expr pos:start="151:17" pos:end="151:22"><name pos:start="151:17" pos:end="151:22">stderr</name></expr></argument>, <argument pos:start="151:25" pos:end="153:75"><expr pos:start="151:25" pos:end="153:75"><literal type="string" pos:start="151:25" pos:end="151:64">"PowerPC MSR definition inconsistency\n"</literal>

                <literal type="string" pos:start="153:17" pos:end="153:75">"Should not define POWERPC_FLAG_TGPR nor POWERPC_FLAG_CE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:16"><expr pos:start="155:9" pos:end="155:15"><call pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:12">exit</name><argument_list pos:start="155:13" pos:end="155:15">(<argument pos:start="155:14" pos:end="155:14"><expr pos:start="155:14" pos:end="155:14"><literal type="number" pos:start="155:14" pos:end="155:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="159:5" pos:end="197:5"><if pos:start="159:5" pos:end="185:5">if <condition pos:start="159:8" pos:end="159:34">(<expr pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:11">env</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:21">msr_mask</name></name> <operator pos:start="159:23" pos:end="159:23">&amp;</operator> <operator pos:start="159:25" pos:end="159:25">(</operator><literal type="number" pos:start="159:26" pos:end="159:26">1</literal> <operator pos:start="159:28" pos:end="159:29">&lt;&lt;</operator> <literal type="number" pos:start="159:31" pos:end="159:32">10</literal><operator pos:start="159:33" pos:end="159:33">)</operator></expr>)</condition> <block pos:start="159:36" pos:end="185:5">{<block_content pos:start="161:9" pos:end="183:9">

        <switch pos:start="161:9" pos:end="183:9">switch <condition pos:start="161:16" pos:end="163:49">(<expr pos:start="161:17" pos:end="163:48"><name pos:start="161:17" pos:end="161:26"><name pos:start="161:17" pos:end="161:19">env</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:26">flags</name></name> <operator pos:start="161:28" pos:end="161:28">&amp;</operator> <operator pos:start="161:30" pos:end="161:30">(</operator><name pos:start="161:31" pos:end="161:45">POWERPC_FLAG_SE</name> <operator pos:start="161:47" pos:end="161:47">|</operator> <name pos:start="161:49" pos:end="161:64">POWERPC_FLAG_DWE</name> <operator pos:start="161:66" pos:end="161:66">|</operator>

                              <name pos:start="163:31" pos:end="163:47">POWERPC_FLAG_UBLE</name><operator pos:start="163:48" pos:end="163:48">)</operator></expr>)</condition> <block pos:start="163:51" pos:end="183:9">{<block_content pos:start="165:9" pos:end="181:20">

        <case pos:start="165:9" pos:end="165:29">case <expr pos:start="165:14" pos:end="165:28"><name pos:start="165:14" pos:end="165:28">POWERPC_FLAG_SE</name></expr>:</case>

        <case pos:start="167:9" pos:end="167:30">case <expr pos:start="167:14" pos:end="167:29"><name pos:start="167:14" pos:end="167:29">POWERPC_FLAG_DWE</name></expr>:</case>

        <case pos:start="169:9" pos:end="169:31">case <expr pos:start="169:14" pos:end="169:30"><name pos:start="169:14" pos:end="169:30">POWERPC_FLAG_UBLE</name></expr>:</case>

            <break pos:start="171:13" pos:end="171:18">break;</break>

        <default pos:start="173:9" pos:end="173:16">default:</default>

            <expr_stmt pos:start="175:13" pos:end="179:43"><expr pos:start="175:13" pos:end="179:42"><call pos:start="175:13" pos:end="179:42"><name pos:start="175:13" pos:end="175:19">fprintf</name><argument_list pos:start="175:20" pos:end="179:42">(<argument pos:start="175:21" pos:end="175:26"><expr pos:start="175:21" pos:end="175:26"><name pos:start="175:21" pos:end="175:26">stderr</name></expr></argument>, <argument pos:start="175:29" pos:end="179:41"><expr pos:start="175:29" pos:end="179:41"><literal type="string" pos:start="175:29" pos:end="175:68">"PowerPC MSR definition inconsistency\n"</literal>

                    <literal type="string" pos:start="177:21" pos:end="177:75">"Should define POWERPC_FLAG_SE or POWERPC_FLAG_DWE or "</literal>

                    <literal type="string" pos:start="179:21" pos:end="179:41">"POWERPC_FLAG_UBLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:20"><expr pos:start="181:13" pos:end="181:19"><call pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:16">exit</name><argument_list pos:start="181:17" pos:end="181:19">(<argument pos:start="181:18" pos:end="181:18"><expr pos:start="181:18" pos:end="181:18"><literal type="number" pos:start="181:18" pos:end="181:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="185:7" pos:end="197:5">else if <condition pos:start="185:15" pos:end="187:48">(<expr pos:start="185:16" pos:end="187:47"><name pos:start="185:16" pos:end="185:25"><name pos:start="185:16" pos:end="185:18">env</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:25">flags</name></name> <operator pos:start="185:27" pos:end="185:27">&amp;</operator> <operator pos:start="185:29" pos:end="185:29">(</operator><name pos:start="185:30" pos:end="185:44">POWERPC_FLAG_SE</name> <operator pos:start="185:46" pos:end="185:46">|</operator> <name pos:start="185:48" pos:end="185:63">POWERPC_FLAG_DWE</name> <operator pos:start="185:65" pos:end="185:65">|</operator>

                             <name pos:start="187:30" pos:end="187:46">POWERPC_FLAG_UBLE</name><operator pos:start="187:47" pos:end="187:47">)</operator></expr>)</condition> <block pos:start="187:50" pos:end="197:5">{<block_content pos:start="189:9" pos:end="195:20">

        <expr_stmt pos:start="189:9" pos:end="193:39"><expr pos:start="189:9" pos:end="193:38"><call pos:start="189:9" pos:end="193:38"><name pos:start="189:9" pos:end="189:15">fprintf</name><argument_list pos:start="189:16" pos:end="193:38">(<argument pos:start="189:17" pos:end="189:22"><expr pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:22">stderr</name></expr></argument>, <argument pos:start="189:25" pos:end="193:37"><expr pos:start="189:25" pos:end="193:37"><literal type="string" pos:start="189:25" pos:end="189:64">"PowerPC MSR definition inconsistency\n"</literal>

                <literal type="string" pos:start="191:17" pos:end="191:77">"Should not define POWERPC_FLAG_SE nor POWERPC_FLAG_DWE nor "</literal>

                <literal type="string" pos:start="193:17" pos:end="193:37">"POWERPC_FLAG_UBLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:20"><expr pos:start="195:13" pos:end="195:19"><call pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:16">exit</name><argument_list pos:start="195:17" pos:end="195:19">(<argument pos:start="195:18" pos:end="195:18"><expr pos:start="195:18" pos:end="195:18"><literal type="number" pos:start="195:18" pos:end="195:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="199:5" pos:end="227:5"><if pos:start="199:5" pos:end="219:5">if <condition pos:start="199:8" pos:end="199:33">(<expr pos:start="199:9" pos:end="199:32"><name pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:11">env</name><operator pos:start="199:12" pos:end="199:13">-&gt;</operator><name pos:start="199:14" pos:end="199:21">msr_mask</name></name> <operator pos:start="199:23" pos:end="199:23">&amp;</operator> <operator pos:start="199:25" pos:end="199:25">(</operator><literal type="number" pos:start="199:26" pos:end="199:26">1</literal> <operator pos:start="199:28" pos:end="199:29">&lt;&lt;</operator> <literal type="number" pos:start="199:31" pos:end="199:31">9</literal><operator pos:start="199:32" pos:end="199:32">)</operator></expr>)</condition> <block pos:start="199:35" pos:end="219:5">{<block_content pos:start="201:9" pos:end="217:9">

        <switch pos:start="201:9" pos:end="217:9">switch <condition pos:start="201:16" pos:end="201:65">(<expr pos:start="201:17" pos:end="201:64"><name pos:start="201:17" pos:end="201:26"><name pos:start="201:17" pos:end="201:19">env</name><operator pos:start="201:20" pos:end="201:21">-&gt;</operator><name pos:start="201:22" pos:end="201:26">flags</name></name> <operator pos:start="201:28" pos:end="201:28">&amp;</operator> <operator pos:start="201:30" pos:end="201:30">(</operator><name pos:start="201:31" pos:end="201:45">POWERPC_FLAG_BE</name> <operator pos:start="201:47" pos:end="201:47">|</operator> <name pos:start="201:49" pos:end="201:63">POWERPC_FLAG_DE</name><operator pos:start="201:64" pos:end="201:64">)</operator></expr>)</condition> <block pos:start="201:67" pos:end="217:9">{<block_content pos:start="203:9" pos:end="215:20">

        <case pos:start="203:9" pos:end="203:29">case <expr pos:start="203:14" pos:end="203:28"><name pos:start="203:14" pos:end="203:28">POWERPC_FLAG_BE</name></expr>:</case>

        <case pos:start="205:9" pos:end="205:29">case <expr pos:start="205:14" pos:end="205:28"><name pos:start="205:14" pos:end="205:28">POWERPC_FLAG_DE</name></expr>:</case>

            <break pos:start="207:13" pos:end="207:18">break;</break>

        <default pos:start="209:9" pos:end="209:16">default:</default>

            <expr_stmt pos:start="211:13" pos:end="213:74"><expr pos:start="211:13" pos:end="213:73"><call pos:start="211:13" pos:end="213:73"><name pos:start="211:13" pos:end="211:19">fprintf</name><argument_list pos:start="211:20" pos:end="213:73">(<argument pos:start="211:21" pos:end="211:26"><expr pos:start="211:21" pos:end="211:26"><name pos:start="211:21" pos:end="211:26">stderr</name></expr></argument>, <argument pos:start="211:29" pos:end="213:72"><expr pos:start="211:29" pos:end="213:72"><literal type="string" pos:start="211:29" pos:end="211:68">"PowerPC MSR definition inconsistency\n"</literal>

                    <literal type="string" pos:start="213:21" pos:end="213:72">"Should define POWERPC_FLAG_BE or POWERPC_FLAG_DE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:16">exit</name><argument_list pos:start="215:17" pos:end="215:19">(<argument pos:start="215:18" pos:end="215:18"><expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="219:7" pos:end="227:5">else if <condition pos:start="219:15" pos:end="219:64">(<expr pos:start="219:16" pos:end="219:63"><name pos:start="219:16" pos:end="219:25"><name pos:start="219:16" pos:end="219:18">env</name><operator pos:start="219:19" pos:end="219:20">-&gt;</operator><name pos:start="219:21" pos:end="219:25">flags</name></name> <operator pos:start="219:27" pos:end="219:27">&amp;</operator> <operator pos:start="219:29" pos:end="219:29">(</operator><name pos:start="219:30" pos:end="219:44">POWERPC_FLAG_BE</name> <operator pos:start="219:46" pos:end="219:46">|</operator> <name pos:start="219:48" pos:end="219:62">POWERPC_FLAG_DE</name><operator pos:start="219:63" pos:end="219:63">)</operator></expr>)</condition> <block pos:start="219:66" pos:end="227:5">{<block_content pos:start="221:9" pos:end="225:16">

        <expr_stmt pos:start="221:9" pos:end="223:75"><expr pos:start="221:9" pos:end="223:74"><call pos:start="221:9" pos:end="223:74"><name pos:start="221:9" pos:end="221:15">fprintf</name><argument_list pos:start="221:16" pos:end="223:74">(<argument pos:start="221:17" pos:end="221:22"><expr pos:start="221:17" pos:end="221:22"><name pos:start="221:17" pos:end="221:22">stderr</name></expr></argument>, <argument pos:start="221:25" pos:end="223:73"><expr pos:start="221:25" pos:end="223:73"><literal type="string" pos:start="221:25" pos:end="221:64">"PowerPC MSR definition inconsistency\n"</literal>

                <literal type="string" pos:start="223:17" pos:end="223:73">"Should not define POWERPC_FLAG_BE nor POWERPC_FLAG_DE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:16"><expr pos:start="225:9" pos:end="225:15"><call pos:start="225:9" pos:end="225:15"><name pos:start="225:9" pos:end="225:12">exit</name><argument_list pos:start="225:13" pos:end="225:15">(<argument pos:start="225:14" pos:end="225:14"><expr pos:start="225:14" pos:end="225:14"><literal type="number" pos:start="225:14" pos:end="225:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="229:5" pos:end="257:5"><if pos:start="229:5" pos:end="249:5">if <condition pos:start="229:8" pos:end="229:33">(<expr pos:start="229:9" pos:end="229:32"><name pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:11">env</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:21">msr_mask</name></name> <operator pos:start="229:23" pos:end="229:23">&amp;</operator> <operator pos:start="229:25" pos:end="229:25">(</operator><literal type="number" pos:start="229:26" pos:end="229:26">1</literal> <operator pos:start="229:28" pos:end="229:29">&lt;&lt;</operator> <literal type="number" pos:start="229:31" pos:end="229:31">2</literal><operator pos:start="229:32" pos:end="229:32">)</operator></expr>)</condition> <block pos:start="229:35" pos:end="249:5">{<block_content pos:start="231:9" pos:end="247:9">

        <switch pos:start="231:9" pos:end="247:9">switch <condition pos:start="231:16" pos:end="231:66">(<expr pos:start="231:17" pos:end="231:65"><name pos:start="231:17" pos:end="231:26"><name pos:start="231:17" pos:end="231:19">env</name><operator pos:start="231:20" pos:end="231:21">-&gt;</operator><name pos:start="231:22" pos:end="231:26">flags</name></name> <operator pos:start="231:28" pos:end="231:28">&amp;</operator> <operator pos:start="231:30" pos:end="231:30">(</operator><name pos:start="231:31" pos:end="231:45">POWERPC_FLAG_PX</name> <operator pos:start="231:47" pos:end="231:47">|</operator> <name pos:start="231:49" pos:end="231:64">POWERPC_FLAG_PMM</name><operator pos:start="231:65" pos:end="231:65">)</operator></expr>)</condition> <block pos:start="231:68" pos:end="247:9">{<block_content pos:start="233:9" pos:end="245:20">

        <case pos:start="233:9" pos:end="233:29">case <expr pos:start="233:14" pos:end="233:28"><name pos:start="233:14" pos:end="233:28">POWERPC_FLAG_PX</name></expr>:</case>

        <case pos:start="235:9" pos:end="235:30">case <expr pos:start="235:14" pos:end="235:29"><name pos:start="235:14" pos:end="235:29">POWERPC_FLAG_PMM</name></expr>:</case>

            <break pos:start="237:13" pos:end="237:18">break;</break>

        <default pos:start="239:9" pos:end="239:16">default:</default>

            <expr_stmt pos:start="241:13" pos:end="243:75"><expr pos:start="241:13" pos:end="243:74"><call pos:start="241:13" pos:end="243:74"><name pos:start="241:13" pos:end="241:19">fprintf</name><argument_list pos:start="241:20" pos:end="243:74">(<argument pos:start="241:21" pos:end="241:26"><expr pos:start="241:21" pos:end="241:26"><name pos:start="241:21" pos:end="241:26">stderr</name></expr></argument>, <argument pos:start="241:29" pos:end="243:73"><expr pos:start="241:29" pos:end="243:73"><literal type="string" pos:start="241:29" pos:end="241:68">"PowerPC MSR definition inconsistency\n"</literal>

                    <literal type="string" pos:start="243:21" pos:end="243:73">"Should define POWERPC_FLAG_PX or POWERPC_FLAG_PMM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:20"><expr pos:start="245:13" pos:end="245:19"><call pos:start="245:13" pos:end="245:19"><name pos:start="245:13" pos:end="245:16">exit</name><argument_list pos:start="245:17" pos:end="245:19">(<argument pos:start="245:18" pos:end="245:18"><expr pos:start="245:18" pos:end="245:18"><literal type="number" pos:start="245:18" pos:end="245:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="249:7" pos:end="257:5">else if <condition pos:start="249:15" pos:end="249:65">(<expr pos:start="249:16" pos:end="249:64"><name pos:start="249:16" pos:end="249:25"><name pos:start="249:16" pos:end="249:18">env</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:25">flags</name></name> <operator pos:start="249:27" pos:end="249:27">&amp;</operator> <operator pos:start="249:29" pos:end="249:29">(</operator><name pos:start="249:30" pos:end="249:44">POWERPC_FLAG_PX</name> <operator pos:start="249:46" pos:end="249:46">|</operator> <name pos:start="249:48" pos:end="249:63">POWERPC_FLAG_PMM</name><operator pos:start="249:64" pos:end="249:64">)</operator></expr>)</condition> <block pos:start="249:67" pos:end="257:5">{<block_content pos:start="251:9" pos:end="255:16">

        <expr_stmt pos:start="251:9" pos:end="253:76"><expr pos:start="251:9" pos:end="253:75"><call pos:start="251:9" pos:end="253:75"><name pos:start="251:9" pos:end="251:15">fprintf</name><argument_list pos:start="251:16" pos:end="253:75">(<argument pos:start="251:17" pos:end="251:22"><expr pos:start="251:17" pos:end="251:22"><name pos:start="251:17" pos:end="251:22">stderr</name></expr></argument>, <argument pos:start="251:25" pos:end="253:74"><expr pos:start="251:25" pos:end="253:74"><literal type="string" pos:start="251:25" pos:end="251:64">"PowerPC MSR definition inconsistency\n"</literal>

                <literal type="string" pos:start="253:17" pos:end="253:74">"Should not define POWERPC_FLAG_PX nor POWERPC_FLAG_PMM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:16"><expr pos:start="255:9" pos:end="255:15"><call pos:start="255:9" pos:end="255:15"><name pos:start="255:9" pos:end="255:12">exit</name><argument_list pos:start="255:13" pos:end="255:15">(<argument pos:start="255:14" pos:end="255:14"><expr pos:start="255:14" pos:end="255:14"><literal type="number" pos:start="255:14" pos:end="255:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="259:5" pos:end="272:0"><if pos:start="259:5" pos:end="272:0">if <condition pos:start="259:8" pos:end="259:74">(<expr pos:start="259:9" pos:end="259:73"><operator pos:start="259:9" pos:end="259:9">(</operator><name pos:start="259:10" pos:end="259:19"><name pos:start="259:10" pos:end="259:12">env</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:19">flags</name></name> <operator pos:start="259:21" pos:end="259:21">&amp;</operator> <operator pos:start="259:23" pos:end="259:23">(</operator><name pos:start="259:24" pos:end="259:43">POWERPC_FLAG_RTC_CLK</name> <operator pos:start="259:45" pos:end="259:45">|</operator> <name pos:start="259:47" pos:end="259:66">POWERPC_FLAG_BUS_CLK</name><operator pos:start="259:67" pos:end="259:67">)</operator><operator pos:start="259:68" pos:end="259:68">)</operator> <operator pos:start="259:70" pos:end="259:71">==</operator> <literal type="number" pos:start="259:73" pos:end="259:73">0</literal></expr>)</condition> <block pos:start="259:76" pos:end="272:0">{<block_content pos:start="261:9" pos:end="265:16">

        <expr_stmt pos:start="261:9" pos:end="263:78"><expr pos:start="261:9" pos:end="263:77"><call pos:start="261:9" pos:end="263:77"><name pos:start="261:9" pos:end="261:15">fprintf</name><argument_list pos:start="261:16" pos:end="263:77">(<argument pos:start="261:17" pos:end="261:22"><expr pos:start="261:17" pos:end="261:22"><name pos:start="261:17" pos:end="261:22">stderr</name></expr></argument>, <argument pos:start="261:25" pos:end="263:76"><expr pos:start="261:25" pos:end="263:76"><literal type="string" pos:start="261:25" pos:end="261:55">"PowerPC flags inconsistency\n"</literal>

                <literal type="string" pos:start="263:17" pos:end="263:76">"Should define the time-base and decrementer clock source\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:16"><expr pos:start="265:9" pos:end="265:15"><call pos:start="265:9" pos:end="265:15"><name pos:start="265:9" pos:end="265:12">exit</name><argument_list pos:start="265:13" pos:end="265:15">(<argument pos:start="265:14" pos:end="265:14"><expr pos:start="265:14" pos:end="265:14"><literal type="number" pos:start="265:14" pos:end="265:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="269:5" pos:end="269:42">/* Allocate TLBs buffer when needed */</comment>

<cpp:if pos:start="271:1" pos:end="271:30">#<cpp:directive pos:start="271:2" pos:end="271:3">if</cpp:directive> <expr pos:start="271:5" pos:end="271:30"><operator pos:start="271:5" pos:end="271:5">!</operator><call pos:start="271:6" pos:end="271:30"><name pos:start="271:6" pos:end="271:12">defined</name><argument_list pos:start="271:13" pos:end="271:30">(<argument pos:start="271:14" pos:end="271:29"><expr pos:start="271:14" pos:end="271:29"><name pos:start="271:14" pos:end="271:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="273:5" pos:end="307:5"><if pos:start="273:5" pos:end="307:5">if <condition pos:start="273:8" pos:end="273:25">(<expr pos:start="273:9" pos:end="273:24"><name pos:start="273:9" pos:end="273:19"><name pos:start="273:9" pos:end="273:11">env</name><operator pos:start="273:12" pos:end="273:13">-&gt;</operator><name pos:start="273:14" pos:end="273:19">nb_tlb</name></name> <operator pos:start="273:21" pos:end="273:22">!=</operator> <literal type="number" pos:start="273:24" pos:end="273:24">0</literal></expr>)</condition> <block pos:start="273:27" pos:end="307:5">{<block_content pos:start="275:9" pos:end="305:54">

        <decl_stmt pos:start="275:9" pos:end="275:33"><decl pos:start="275:9" pos:end="275:32"><type pos:start="275:9" pos:end="275:11"><name pos:start="275:9" pos:end="275:11">int</name></type> <name pos:start="275:13" pos:end="275:18">nb_tlb</name> <init pos:start="275:20" pos:end="275:32">= <expr pos:start="275:22" pos:end="275:32"><name pos:start="275:22" pos:end="275:32"><name pos:start="275:22" pos:end="275:24">env</name><operator pos:start="275:25" pos:end="275:26">-&gt;</operator><name pos:start="275:27" pos:end="275:32">nb_tlb</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="277:9" pos:end="279:24"><if pos:start="277:9" pos:end="279:24">if <condition pos:start="277:12" pos:end="277:30">(<expr pos:start="277:13" pos:end="277:29"><name pos:start="277:13" pos:end="277:24"><name pos:start="277:13" pos:end="277:15">env</name><operator pos:start="277:16" pos:end="277:17">-&gt;</operator><name pos:start="277:18" pos:end="277:24">id_tlbs</name></name> <operator pos:start="277:26" pos:end="277:27">!=</operator> <literal type="number" pos:start="277:29" pos:end="277:29">0</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:24"><block_content pos:start="279:13" pos:end="279:24">

            <expr_stmt pos:start="279:13" pos:end="279:24"><expr pos:start="279:13" pos:end="279:23"><name pos:start="279:13" pos:end="279:18">nb_tlb</name> <operator pos:start="279:20" pos:end="279:21">*=</operator> <literal type="number" pos:start="279:23" pos:end="279:23">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch pos:start="281:9" pos:end="301:9">switch <condition pos:start="281:16" pos:end="281:30">(<expr pos:start="281:17" pos:end="281:29"><name pos:start="281:17" pos:end="281:29"><name pos:start="281:17" pos:end="281:19">env</name><operator pos:start="281:20" pos:end="281:21">-&gt;</operator><name pos:start="281:22" pos:end="281:29">tlb_type</name></name></expr>)</condition> <block pos:start="281:32" pos:end="301:9">{<block_content pos:start="283:9" pos:end="299:18">

        <case pos:start="283:9" pos:end="283:21">case <expr pos:start="283:14" pos:end="283:20"><name pos:start="283:14" pos:end="283:20">TLB_6XX</name></expr>:</case>

            <expr_stmt pos:start="285:13" pos:end="285:69"><expr pos:start="285:13" pos:end="285:68"><name pos:start="285:13" pos:end="285:25"><name pos:start="285:13" pos:end="285:15">env</name><operator pos:start="285:16" pos:end="285:17">-&gt;</operator><name pos:start="285:18" pos:end="285:20">tlb</name><operator pos:start="285:21" pos:end="285:21">.</operator><name pos:start="285:22" pos:end="285:25">tlb6</name></name> <operator pos:start="285:27" pos:end="285:27">=</operator> <call pos:start="285:29" pos:end="285:68"><name pos:start="285:29" pos:end="285:37">g_malloc0</name><argument_list pos:start="285:38" pos:end="285:68">(<argument pos:start="285:39" pos:end="285:67"><expr pos:start="285:39" pos:end="285:67"><name pos:start="285:39" pos:end="285:44">nb_tlb</name> <operator pos:start="285:46" pos:end="285:46">*</operator> <sizeof pos:start="285:48" pos:end="285:67">sizeof<argument_list pos:start="285:54" pos:end="285:67">(<argument pos:start="285:55" pos:end="285:66"><expr pos:start="285:55" pos:end="285:66"><name pos:start="285:55" pos:end="285:66">ppc6xx_tlb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="287:13" pos:end="287:18">break;</break>

        <case pos:start="289:9" pos:end="289:21">case <expr pos:start="289:14" pos:end="289:20"><name pos:start="289:14" pos:end="289:20">TLB_EMB</name></expr>:</case>

            <expr_stmt pos:start="291:13" pos:end="291:69"><expr pos:start="291:13" pos:end="291:68"><name pos:start="291:13" pos:end="291:25"><name pos:start="291:13" pos:end="291:15">env</name><operator pos:start="291:16" pos:end="291:17">-&gt;</operator><name pos:start="291:18" pos:end="291:20">tlb</name><operator pos:start="291:21" pos:end="291:21">.</operator><name pos:start="291:22" pos:end="291:25">tlbe</name></name> <operator pos:start="291:27" pos:end="291:27">=</operator> <call pos:start="291:29" pos:end="291:68"><name pos:start="291:29" pos:end="291:37">g_malloc0</name><argument_list pos:start="291:38" pos:end="291:68">(<argument pos:start="291:39" pos:end="291:67"><expr pos:start="291:39" pos:end="291:67"><name pos:start="291:39" pos:end="291:44">nb_tlb</name> <operator pos:start="291:46" pos:end="291:46">*</operator> <sizeof pos:start="291:48" pos:end="291:67">sizeof<argument_list pos:start="291:54" pos:end="291:67">(<argument pos:start="291:55" pos:end="291:66"><expr pos:start="291:55" pos:end="291:66"><name pos:start="291:55" pos:end="291:66">ppcemb_tlb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="293:13" pos:end="293:18">break;</break>

        <case pos:start="295:9" pos:end="295:21">case <expr pos:start="295:14" pos:end="295:20"><name pos:start="295:14" pos:end="295:20">TLB_MAS</name></expr>:</case>

            <expr_stmt pos:start="297:13" pos:end="297:69"><expr pos:start="297:13" pos:end="297:68"><name pos:start="297:13" pos:end="297:25"><name pos:start="297:13" pos:end="297:15">env</name><operator pos:start="297:16" pos:end="297:17">-&gt;</operator><name pos:start="297:18" pos:end="297:20">tlb</name><operator pos:start="297:21" pos:end="297:21">.</operator><name pos:start="297:22" pos:end="297:25">tlbm</name></name> <operator pos:start="297:27" pos:end="297:27">=</operator> <call pos:start="297:29" pos:end="297:68"><name pos:start="297:29" pos:end="297:37">g_malloc0</name><argument_list pos:start="297:38" pos:end="297:68">(<argument pos:start="297:39" pos:end="297:67"><expr pos:start="297:39" pos:end="297:67"><name pos:start="297:39" pos:end="297:44">nb_tlb</name> <operator pos:start="297:46" pos:end="297:46">*</operator> <sizeof pos:start="297:48" pos:end="297:67">sizeof<argument_list pos:start="297:54" pos:end="297:67">(<argument pos:start="297:55" pos:end="297:66"><expr pos:start="297:55" pos:end="297:66"><name pos:start="297:55" pos:end="297:66">ppcmas_tlb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="299:13" pos:end="299:18">break;</break>

        </block_content>}</block></switch>

        <comment type="block" pos:start="303:9" pos:end="303:44">/* Pre-compute some useful values */</comment>

        <expr_stmt pos:start="305:9" pos:end="305:54"><expr pos:start="305:9" pos:end="305:53"><name pos:start="305:9" pos:end="305:24"><name pos:start="305:9" pos:end="305:11">env</name><operator pos:start="305:12" pos:end="305:13">-&gt;</operator><name pos:start="305:14" pos:end="305:24">tlb_per_way</name></name> <operator pos:start="305:26" pos:end="305:26">=</operator> <name pos:start="305:28" pos:end="305:38"><name pos:start="305:28" pos:end="305:30">env</name><operator pos:start="305:31" pos:end="305:32">-&gt;</operator><name pos:start="305:33" pos:end="305:38">nb_tlb</name></name> <operator pos:start="305:40" pos:end="305:40">/</operator> <name pos:start="305:42" pos:end="305:53"><name pos:start="305:42" pos:end="305:44">env</name><operator pos:start="305:45" pos:end="305:46">-&gt;</operator><name pos:start="305:47" pos:end="305:53">nb_ways</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="309:5" pos:end="318:0"><if pos:start="309:5" pos:end="318:0">if <condition pos:start="309:8" pos:end="309:32">(<expr pos:start="309:9" pos:end="309:31"><name pos:start="309:9" pos:end="309:23"><name pos:start="309:9" pos:end="309:11">env</name><operator pos:start="309:12" pos:end="309:13">-&gt;</operator><name pos:start="309:14" pos:end="309:23">irq_inputs</name></name> <operator pos:start="309:25" pos:end="309:26">==</operator> <name pos:start="309:28" pos:end="309:31">NULL</name></expr>)</condition> <block pos:start="309:34" pos:end="318:0">{<block_content pos:start="311:9" pos:end="313:56">

        <expr_stmt pos:start="311:9" pos:end="313:56"><expr pos:start="311:9" pos:end="313:55"><call pos:start="311:9" pos:end="313:55"><name pos:start="311:9" pos:end="311:15">fprintf</name><argument_list pos:start="311:16" pos:end="313:55">(<argument pos:start="311:17" pos:end="311:22"><expr pos:start="311:17" pos:end="311:22"><name pos:start="311:17" pos:end="311:22">stderr</name></expr></argument>, <argument pos:start="311:25" pos:end="313:54"><expr pos:start="311:25" pos:end="313:54"><literal type="string" pos:start="311:25" pos:end="311:75">"WARNING: no internal IRQ controller registered.\n"</literal>

                <literal type="string" pos:start="313:17" pos:end="313:54">" Attempt QEMU to crash very soon !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="317:1" pos:end="317:6">#<cpp:directive pos:start="317:2" pos:end="317:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="319:5" pos:end="327:5"><if pos:start="319:5" pos:end="327:5">if <condition pos:start="319:8" pos:end="319:31">(<expr pos:start="319:9" pos:end="319:30"><name pos:start="319:9" pos:end="319:22"><name pos:start="319:9" pos:end="319:11">env</name><operator pos:start="319:12" pos:end="319:13">-&gt;</operator><name pos:start="319:14" pos:end="319:22">check_pow</name></name> <operator pos:start="319:24" pos:end="319:25">==</operator> <name pos:start="319:27" pos:end="319:30">NULL</name></expr>)</condition> <block pos:start="319:33" pos:end="327:5">{<block_content pos:start="321:9" pos:end="325:56">

        <expr_stmt pos:start="321:9" pos:end="325:56"><expr pos:start="321:9" pos:end="325:55"><call pos:start="321:9" pos:end="325:55"><name pos:start="321:9" pos:end="321:15">fprintf</name><argument_list pos:start="321:16" pos:end="325:55">(<argument pos:start="321:17" pos:end="321:22"><expr pos:start="321:17" pos:end="321:22"><name pos:start="321:17" pos:end="321:22">stderr</name></expr></argument>, <argument pos:start="321:25" pos:end="325:54"><expr pos:start="321:25" pos:end="325:54"><literal type="string" pos:start="321:25" pos:end="321:69">"WARNING: no power management check handler "</literal>

                <literal type="string" pos:start="323:17" pos:end="323:31">"registered.\n"</literal>

                <literal type="string" pos:start="325:17" pos:end="325:54">" Attempt QEMU to crash very soon !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
