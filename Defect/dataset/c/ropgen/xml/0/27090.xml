<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27090.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">qed_aio_next_io</name><parameter_list pos:start="1:28" pos:end="1:42">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:36">QEDAIOCB</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">acb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:25">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVQEDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:35">= <expr pos:start="5:23" pos:end="5:35"><call pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:30">acb_to_s</name><argument_list pos:start="5:31" pos:end="5:35">(<argument pos:start="5:32" pos:end="5:34"><expr pos:start="5:32" pos:end="5:34"><name pos:start="5:32" pos:end="5:34">acb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:72"><expr pos:start="15:5" pos:end="15:71"><call pos:start="15:5" pos:end="15:71"><name pos:start="15:5" pos:end="15:25">trace_qed_aio_next_io</name><argument_list pos:start="15:26" pos:end="15:71">(<argument pos:start="15:27" pos:end="15:27"><expr pos:start="15:27" pos:end="15:27"><name pos:start="15:27" pos:end="15:27">s</name></expr></argument>, <argument pos:start="15:30" pos:end="15:32"><expr pos:start="15:30" pos:end="15:32"><name pos:start="15:30" pos:end="15:32">acb</name></expr></argument>, <argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></argument>, <argument pos:start="15:38" pos:end="15:70"><expr pos:start="15:38" pos:end="15:70"><name pos:start="15:38" pos:end="15:49"><name pos:start="15:38" pos:end="15:40">acb</name><operator pos:start="15:41" pos:end="15:42">-&gt;</operator><name pos:start="15:43" pos:end="15:49">cur_pos</name></name> <operator pos:start="15:51" pos:end="15:51">+</operator> <name pos:start="15:53" pos:end="15:70"><name pos:start="15:53" pos:end="15:55">acb</name><operator pos:start="15:56" pos:end="15:57">-&gt;</operator><name pos:start="15:58" pos:end="15:65">cur_qiov</name><operator pos:start="15:66" pos:end="15:66">.</operator><name pos:start="15:67" pos:end="15:70">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:11">acb</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:25">backing_qiov</name></name></expr>)</condition> <block pos:start="19:28" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:33">

        <expr_stmt pos:start="21:9" pos:end="21:46"><expr pos:start="21:9" pos:end="21:45"><call pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:26">qemu_iovec_destroy</name><argument_list pos:start="21:27" pos:end="21:45">(<argument pos:start="21:28" pos:end="21:44"><expr pos:start="21:28" pos:end="21:44"><name pos:start="21:28" pos:end="21:44"><name pos:start="21:28" pos:end="21:30">acb</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:44">backing_qiov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:34"><expr pos:start="23:9" pos:end="23:33"><call pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:14">g_free</name><argument_list pos:start="23:15" pos:end="23:33">(<argument pos:start="23:16" pos:end="23:32"><expr pos:start="23:16" pos:end="23:32"><name pos:start="23:16" pos:end="23:32"><name pos:start="23:16" pos:end="23:18">acb</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:32">backing_qiov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:11">acb</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:25">backing_qiov</name></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <name pos:start="25:29" pos:end="25:32">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:43"><expr pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:7">acb</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:20">qiov_offset</name></name> <operator pos:start="31:22" pos:end="31:23">+=</operator> <name pos:start="31:25" pos:end="31:42"><name pos:start="31:25" pos:end="31:27">acb</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:37">cur_qiov</name><operator pos:start="31:38" pos:end="31:38">.</operator><name pos:start="31:39" pos:end="31:42">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:7">acb</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:16">cur_pos</name></name> <operator pos:start="33:18" pos:end="33:19">+=</operator> <name pos:start="33:21" pos:end="33:38"><name pos:start="33:21" pos:end="33:23">acb</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:33">cur_qiov</name><operator pos:start="33:34" pos:end="33:34">.</operator><name pos:start="33:35" pos:end="33:38">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><call pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:20">qemu_iovec_reset</name><argument_list pos:start="35:21" pos:end="35:36">(<argument pos:start="35:22" pos:end="35:35"><expr pos:start="35:22" pos:end="35:35"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:35"><name pos:start="35:23" pos:end="35:25">acb</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:35">cur_qiov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:26">/* Complete request */</comment>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:37">(<expr pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:11">acb</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:20">cur_pos</name></name> <operator pos:start="41:22" pos:end="41:23">&gt;=</operator> <name pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:27">acb</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:36">end_pos</name></name></expr>)</condition> <block pos:start="41:39" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><call pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:24">qed_aio_complete</name><argument_list pos:start="43:25" pos:end="43:32">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">acb</name></expr></argument>, <argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><literal type="number" pos:start="43:31" pos:end="43:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:41">/* Find next cluster and start I/O */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:7">len</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <name pos:start="53:11" pos:end="53:22"><name pos:start="53:11" pos:end="53:13">acb</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:22">end_pos</name></name> <operator pos:start="53:24" pos:end="53:24">-</operator> <name pos:start="53:26" pos:end="53:37"><name pos:start="53:26" pos:end="53:28">acb</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:37">cur_pos</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:74"><expr pos:start="55:5" pos:end="55:73"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:73"><name pos:start="55:11" pos:end="55:26">qed_find_cluster</name><argument_list pos:start="55:27" pos:end="55:73">(<argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">s</name></expr></argument>, <argument pos:start="55:31" pos:end="55:43"><expr pos:start="55:31" pos:end="55:43"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:34">acb</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:43">request</name></name></expr></argument>, <argument pos:start="55:46" pos:end="55:57"><expr pos:start="55:46" pos:end="55:57"><name pos:start="55:46" pos:end="55:57"><name pos:start="55:46" pos:end="55:48">acb</name><operator pos:start="55:49" pos:end="55:50">-&gt;</operator><name pos:start="55:51" pos:end="55:57">cur_pos</name></name></expr></argument>, <argument pos:start="55:60" pos:end="55:63"><expr pos:start="55:60" pos:end="55:63"><operator pos:start="55:60" pos:end="55:60">&amp;</operator><name pos:start="55:61" pos:end="55:63">len</name></expr></argument>, <argument pos:start="55:66" pos:end="55:72"><expr pos:start="55:66" pos:end="55:72"><operator pos:start="55:66" pos:end="55:66">&amp;</operator><name pos:start="55:67" pos:end="55:72">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:15">

        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:24">qed_aio_complete</name><argument_list pos:start="59:25" pos:end="59:34">(<argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:28">acb</name></expr></argument>, <argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:37">(<expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:11">acb</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:18">flags</name></name> <operator pos:start="67:20" pos:end="67:20">&amp;</operator> <name pos:start="67:22" pos:end="67:36">QED_AIOCB_WRITE</name></expr>)</condition> <block pos:start="67:39" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:56">

        <expr_stmt pos:start="69:9" pos:end="69:56"><expr pos:start="69:9" pos:end="69:55"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:55"><name pos:start="69:15" pos:end="69:32">qed_aio_write_data</name><argument_list pos:start="69:33" pos:end="69:55">(<argument pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:36">acb</name></expr></argument>, <argument pos:start="69:39" pos:end="69:41"><expr pos:start="69:39" pos:end="69:41"><name pos:start="69:39" pos:end="69:41">ret</name></expr></argument>, <argument pos:start="69:44" pos:end="69:49"><expr pos:start="69:44" pos:end="69:49"><name pos:start="69:44" pos:end="69:49">offset</name></expr></argument>, <argument pos:start="69:52" pos:end="69:54"><expr pos:start="69:52" pos:end="69:54"><name pos:start="69:52" pos:end="69:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="75:5">else <block pos:start="71:12" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:55">

        <expr_stmt pos:start="73:9" pos:end="73:55"><expr pos:start="73:9" pos:end="73:54"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:54"><name pos:start="73:15" pos:end="73:31">qed_aio_read_data</name><argument_list pos:start="73:32" pos:end="73:54">(<argument pos:start="73:33" pos:end="73:35"><expr pos:start="73:33" pos:end="73:35"><name pos:start="73:33" pos:end="73:35">acb</name></expr></argument>, <argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><name pos:start="73:38" pos:end="73:40">ret</name></expr></argument>, <argument pos:start="73:43" pos:end="73:48"><expr pos:start="73:43" pos:end="73:48"><name pos:start="73:43" pos:end="73:48">offset</name></expr></argument>, <argument pos:start="73:51" pos:end="73:53"><expr pos:start="73:51" pos:end="73:53"><name pos:start="73:51" pos:end="73:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="79:5" pos:end="89:5"><if pos:start="79:5" pos:end="89:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:15">

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:32">(<expr pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:18">!=</operator> <operator pos:start="81:20" pos:end="81:20">-</operator><name pos:start="81:21" pos:end="81:31">EINPROGRESS</name></expr>)</condition> <block pos:start="81:34" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:39">

            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><call pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:28">qed_aio_complete</name><argument_list pos:start="83:29" pos:end="83:38">(<argument pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><name pos:start="83:30" pos:end="83:32">acb</name></expr></argument>, <argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="87:9" pos:end="87:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:25"><expr pos:start="91:5" pos:end="91:24"><call pos:start="91:5" pos:end="91:24"><name pos:start="91:5" pos:end="91:19">qed_aio_next_io</name><argument_list pos:start="91:20" pos:end="91:24">(<argument pos:start="91:21" pos:end="91:23"><expr pos:start="91:21" pos:end="91:23"><name pos:start="91:21" pos:end="91:23">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
