<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13352.c" pos:tabs="8"><function pos:start="1:1" pos:end="27:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">do_store_dcr</name> <parameter_list pos:start="1:19" pos:end="1:24">(<parameter pos:start="1:20" pos:end="1:23"><decl pos:start="1:20" pos:end="1:23"><type pos:start="1:20" pos:end="1:23"><name pos:start="1:20" pos:end="1:23">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="27:1">{<block_content pos:start="5:5" pos:end="25:5">

    <if_stmt pos:start="5:5" pos:end="25:5"><if pos:start="5:5" pos:end="15:5">if <condition pos:start="5:8" pos:end="5:39">(<expr pos:start="5:9" pos:end="5:38"><call pos:start="5:9" pos:end="5:38"><name pos:start="5:9" pos:end="5:16">unlikely</name><argument_list pos:start="5:17" pos:end="5:38">(<argument pos:start="5:18" pos:end="5:37"><expr pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:20">env</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:29">dcr_env</name></name> <operator pos:start="5:31" pos:end="5:32">==</operator> <name pos:start="5:34" pos:end="5:37">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5:41" pos:end="15:5">{<block_content pos:start="7:9" pos:end="13:76">

        <if_stmt pos:start="7:9" pos:end="11:9"><if pos:start="7:9" pos:end="11:9">if <condition pos:start="7:12" pos:end="7:26">(<expr pos:start="7:13" pos:end="7:25"><name pos:start="7:13" pos:end="7:20">loglevel</name> <operator pos:start="7:22" pos:end="7:23">!=</operator> <literal type="number" pos:start="7:25" pos:end="7:25">0</literal></expr>)</condition> <block pos:start="7:28" pos:end="11:9">{<block_content pos:start="9:13" pos:end="9:53">

            <expr_stmt pos:start="9:13" pos:end="9:53"><expr pos:start="9:13" pos:end="9:52"><call pos:start="9:13" pos:end="9:52"><name pos:start="9:13" pos:end="9:19">fprintf</name><argument_list pos:start="9:20" pos:end="9:52">(<argument pos:start="9:21" pos:end="9:27"><expr pos:start="9:21" pos:end="9:27"><name pos:start="9:21" pos:end="9:27">logfile</name></expr></argument>, <argument pos:start="9:30" pos:end="9:51"><expr pos:start="9:30" pos:end="9:51"><literal type="string" pos:start="9:30" pos:end="9:51">"No DCR environment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:76"><expr pos:start="13:9" pos:end="13:75"><call pos:start="13:9" pos:end="13:75"><name pos:start="13:9" pos:end="13:30">do_raise_exception_err</name><argument_list pos:start="13:31" pos:end="13:75">(<argument pos:start="13:32" pos:end="13:43"><expr pos:start="13:32" pos:end="13:43"><name pos:start="13:32" pos:end="13:43">EXCP_PROGRAM</name></expr></argument>, <argument pos:start="13:46" pos:end="13:74"><expr pos:start="13:46" pos:end="13:74"><name pos:start="13:46" pos:end="13:55">EXCP_INVAL</name> <operator pos:start="13:57" pos:end="13:57">|</operator> <name pos:start="13:59" pos:end="13:74">EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="15:7" pos:end="25:5">else if <condition pos:start="15:15" pos:end="15:66">(<expr pos:start="15:16" pos:end="15:65"><call pos:start="15:16" pos:end="15:65"><name pos:start="15:16" pos:end="15:23">unlikely</name><argument_list pos:start="15:24" pos:end="15:65">(<argument pos:start="15:25" pos:end="15:64"><expr pos:start="15:25" pos:end="15:64"><call pos:start="15:25" pos:end="15:59"><name pos:start="15:25" pos:end="15:37">ppc_dcr_write</name><argument_list pos:start="15:38" pos:end="15:59">(<argument pos:start="15:39" pos:end="15:50"><expr pos:start="15:39" pos:end="15:50"><name pos:start="15:39" pos:end="15:50"><name pos:start="15:39" pos:end="15:41">env</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:50">dcr_env</name></name></expr></argument>, <argument pos:start="15:53" pos:end="15:54"><expr pos:start="15:53" pos:end="15:54"><name pos:start="15:53" pos:end="15:54">T0</name></expr></argument>, <argument pos:start="15:57" pos:end="15:58"><expr pos:start="15:57" pos:end="15:58"><name pos:start="15:57" pos:end="15:58">T1</name></expr></argument>)</argument_list></call> <operator pos:start="15:61" pos:end="15:62">!=</operator> <literal type="number" pos:start="15:64" pos:end="15:64">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:68" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:73">

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:26">(<expr pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:20">loglevel</name> <operator pos:start="17:22" pos:end="17:23">!=</operator> <literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>)</condition> <block pos:start="17:28" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:76">

            <expr_stmt pos:start="19:13" pos:end="19:76"><expr pos:start="19:13" pos:end="19:75"><call pos:start="19:13" pos:end="19:75"><name pos:start="19:13" pos:end="19:19">fprintf</name><argument_list pos:start="19:20" pos:end="19:75">(<argument pos:start="19:21" pos:end="19:27"><expr pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:27">logfile</name></expr></argument>, <argument pos:start="19:30" pos:end="19:56"><expr pos:start="19:30" pos:end="19:56"><literal type="string" pos:start="19:30" pos:end="19:56">"DCR write error %d %03x\n"</literal></expr></argument>, <argument pos:start="19:59" pos:end="19:65"><expr pos:start="19:59" pos:end="19:65"><operator pos:start="19:59" pos:end="19:59">(</operator><name pos:start="19:60" pos:end="19:62">int</name><operator pos:start="19:63" pos:end="19:63">)</operator><name pos:start="19:64" pos:end="19:65">T0</name></expr></argument>, <argument pos:start="19:68" pos:end="19:74"><expr pos:start="19:68" pos:end="19:74"><operator pos:start="19:68" pos:end="19:68">(</operator><name pos:start="19:69" pos:end="19:71">int</name><operator pos:start="19:72" pos:end="19:72">)</operator><name pos:start="19:73" pos:end="19:74">T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:73"><expr pos:start="23:9" pos:end="23:72"><call pos:start="23:9" pos:end="23:72"><name pos:start="23:9" pos:end="23:30">do_raise_exception_err</name><argument_list pos:start="23:31" pos:end="23:72">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">EXCP_PROGRAM</name></expr></argument>, <argument pos:start="23:46" pos:end="23:71"><expr pos:start="23:46" pos:end="23:71"><name pos:start="23:46" pos:end="23:55">EXCP_INVAL</name> <operator pos:start="23:57" pos:end="23:57">|</operator> <name pos:start="23:59" pos:end="23:71">EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
