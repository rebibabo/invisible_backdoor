<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/608.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ahci_mem_write</name><parameter_list pos:start="1:27" pos:end="3:55">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:59">target_phys_addr_t</name></type> <name pos:start="1:61" pos:end="1:64">addr</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:35">uint64_t</name></type> <name pos:start="3:37" pos:end="3:39">val</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:49">unsigned</name></type> <name pos:start="3:51" pos:end="3:54">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="93:5">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">AHCIState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:25">= <expr pos:start="7:20" pos:end="7:25"><name pos:start="7:20" pos:end="7:25">opaque</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:48">/* Only aligned reads are allowed on AHCI */</comment>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:12">addr</name> <operator pos:start="13:14" pos:end="13:14">&amp;</operator> <literal type="number" pos:start="13:16" pos:end="13:16">3</literal></expr>)</condition> <block pos:start="13:19" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:15">

        <expr_stmt pos:start="15:9" pos:end="17:43"><expr pos:start="15:9" pos:end="17:42"><call pos:start="15:9" pos:end="17:42"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="17:42">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="17:35"><expr pos:start="15:25" pos:end="17:35"><literal type="string" pos:start="15:25" pos:end="15:60">"ahci: Mis-aligned write to addr 0x"</literal>

                <name pos:start="17:17" pos:end="17:30">TARGET_FMT_plx</name> <literal type="string" pos:start="17:32" pos:end="17:35">"\n"</literal></expr></argument>, <argument pos:start="17:38" pos:end="17:41"><expr pos:start="17:38" pos:end="17:41"><name pos:start="17:38" pos:end="17:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="93:5"><if pos:start="25:5" pos:end="83:5">if <condition pos:start="25:8" pos:end="25:55">(<expr pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:12">addr</name> <operator pos:start="25:14" pos:end="25:14">&lt;</operator> <name pos:start="25:16" pos:end="25:54">AHCI_GENERIC_HOST_CONTROL_REGS_MAX_ADDR</name></expr>)</condition> <block pos:start="25:57" pos:end="83:5">{<block_content pos:start="27:9" pos:end="81:9">

        <expr_stmt pos:start="27:9" pos:end="27:80"><expr pos:start="27:9" pos:end="27:79"><call pos:start="27:9" pos:end="27:79"><name pos:start="27:9" pos:end="27:15">DPRINTF</name><argument_list pos:start="27:16" pos:end="27:79">(<argument pos:start="27:17" pos:end="27:18"><expr pos:start="27:17" pos:end="27:18"><operator pos:start="27:17" pos:end="27:17">-</operator><literal type="number" pos:start="27:18" pos:end="27:18">1</literal></expr></argument>, <argument pos:start="27:21" pos:end="27:56"><expr pos:start="27:21" pos:end="27:56"><literal type="string" pos:start="27:21" pos:end="27:46">"(addr 0x%08X), val 0x%08"</literal><name pos:start="27:47" pos:end="27:52">PRIX64</name><literal type="string" pos:start="27:53" pos:end="27:56">"\n"</literal></expr></argument>, <argument pos:start="27:59" pos:end="27:73"><expr pos:start="27:59" pos:end="27:73"><operator pos:start="27:59" pos:end="27:59">(</operator><name pos:start="27:60" pos:end="27:67">unsigned</name><operator pos:start="27:68" pos:end="27:68">)</operator> <name pos:start="27:70" pos:end="27:73">addr</name></expr></argument>, <argument pos:start="27:76" pos:end="27:78"><expr pos:start="27:76" pos:end="27:78"><name pos:start="27:76" pos:end="27:78">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="31:9" pos:end="81:9">switch <condition pos:start="31:16" pos:end="31:21">(<expr pos:start="31:17" pos:end="31:20"><name pos:start="31:17" pos:end="31:20">addr</name></expr>)</condition> <block pos:start="31:23" pos:end="81:9">{<block_content pos:start="33:13" pos:end="79:80">

            <case pos:start="33:13" pos:end="33:26">case <expr pos:start="33:18" pos:end="33:25"><name pos:start="33:18" pos:end="33:25">HOST_CAP</name></expr>:</case> <comment type="block" pos:start="33:28" pos:end="33:41">/* R/WO, RO */</comment>

                <comment type="block" pos:start="35:17" pos:end="35:39">/* FIXME handle R/WO */</comment>

                <break pos:start="37:17" pos:end="37:22">break;</break>

            <case pos:start="39:13" pos:end="39:26">case <expr pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:25">HOST_CTL</name></expr>:</case> <comment type="block" pos:start="39:28" pos:end="39:36">/* R/W */</comment>

                <if_stmt pos:start="41:17" pos:end="53:17"><if pos:start="41:17" pos:end="47:17">if <condition pos:start="41:20" pos:end="41:41">(<expr pos:start="41:21" pos:end="41:40"><name pos:start="41:21" pos:end="41:23">val</name> <operator pos:start="41:25" pos:end="41:25">&amp;</operator> <name pos:start="41:27" pos:end="41:40">HOST_CTL_RESET</name></expr>)</condition> <block pos:start="41:43" pos:end="47:17">{<block_content pos:start="43:21" pos:end="45:34">

                    <expr_stmt pos:start="43:21" pos:end="43:47"><expr pos:start="43:21" pos:end="43:46"><call pos:start="43:21" pos:end="43:46"><name pos:start="43:21" pos:end="43:27">DPRINTF</name><argument_list pos:start="43:28" pos:end="43:46">(<argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><operator pos:start="43:29" pos:end="43:29">-</operator><literal type="number" pos:start="43:30" pos:end="43:30">1</literal></expr></argument>, <argument pos:start="43:33" pos:end="43:45"><expr pos:start="43:33" pos:end="43:45"><literal type="string" pos:start="43:33" pos:end="43:45">"HBA Reset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:34"><expr pos:start="45:21" pos:end="45:33"><call pos:start="45:21" pos:end="45:33"><name pos:start="45:21" pos:end="45:30">ahci_reset</name><argument_list pos:start="45:31" pos:end="45:33">(<argument pos:start="45:32" pos:end="45:32"><expr pos:start="45:32" pos:end="45:32"><name pos:start="45:32" pos:end="45:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="47:19" pos:end="53:17">else <block pos:start="47:24" pos:end="53:17">{<block_content pos:start="49:21" pos:end="51:38">

                    <expr_stmt pos:start="49:21" pos:end="49:73"><expr pos:start="49:21" pos:end="49:72"><name pos:start="49:21" pos:end="49:39"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:35">control_regs</name><operator pos:start="49:36" pos:end="49:36">.</operator><name pos:start="49:37" pos:end="49:39">ghc</name></name> <operator pos:start="49:41" pos:end="49:41">=</operator> <operator pos:start="49:43" pos:end="49:43">(</operator><name pos:start="49:44" pos:end="49:46">val</name> <operator pos:start="49:48" pos:end="49:48">&amp;</operator> <literal type="number" pos:start="49:50" pos:end="49:52">0x3</literal><operator pos:start="49:53" pos:end="49:53">)</operator> <operator pos:start="49:55" pos:end="49:55">|</operator> <name pos:start="49:57" pos:end="49:72">HOST_CTL_AHCI_EN</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:38"><expr pos:start="51:21" pos:end="51:37"><call pos:start="51:21" pos:end="51:37"><name pos:start="51:21" pos:end="51:34">ahci_check_irq</name><argument_list pos:start="51:35" pos:end="51:37">(<argument pos:start="51:36" pos:end="51:36"><expr pos:start="51:36" pos:end="51:36"><name pos:start="51:36" pos:end="51:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="55:17" pos:end="55:22">break;</break>

            <case pos:start="57:13" pos:end="57:31">case <expr pos:start="57:18" pos:end="57:30"><name pos:start="57:18" pos:end="57:30">HOST_IRQ_STAT</name></expr>:</case> <comment type="block" pos:start="57:33" pos:end="57:46">/* R/WC, RO */</comment>

                <expr_stmt pos:start="59:17" pos:end="59:50"><expr pos:start="59:17" pos:end="59:49"><name pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:17">s</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:31">control_regs</name><operator pos:start="59:32" pos:end="59:32">.</operator><name pos:start="59:33" pos:end="59:41">irqstatus</name></name> <operator pos:start="59:43" pos:end="59:44">&amp;=</operator> <operator pos:start="59:46" pos:end="59:46">~</operator><name pos:start="59:47" pos:end="59:49">val</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:34"><expr pos:start="61:17" pos:end="61:33"><call pos:start="61:17" pos:end="61:33"><name pos:start="61:17" pos:end="61:30">ahci_check_irq</name><argument_list pos:start="61:31" pos:end="61:33">(<argument pos:start="61:32" pos:end="61:32"><expr pos:start="61:32" pos:end="61:32"><name pos:start="61:32" pos:end="61:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="63:17" pos:end="63:22">break;</break>

            <case pos:start="65:13" pos:end="65:33">case <expr pos:start="65:18" pos:end="65:32"><name pos:start="65:18" pos:end="65:32">HOST_PORTS_IMPL</name></expr>:</case> <comment type="block" pos:start="65:35" pos:end="65:48">/* R/WO, RO */</comment>

                <comment type="block" pos:start="67:17" pos:end="67:39">/* FIXME handle R/WO */</comment>

                <break pos:start="69:17" pos:end="69:22">break;</break>

            <case pos:start="71:13" pos:end="71:30">case <expr pos:start="71:18" pos:end="71:29"><name pos:start="71:18" pos:end="71:29">HOST_VERSION</name></expr>:</case> <comment type="block" pos:start="71:32" pos:end="71:39">/* RO */</comment>

                <comment type="block" pos:start="73:17" pos:end="73:41">/* FIXME report write? */</comment>

                <break pos:start="75:17" pos:end="75:22">break;</break>

            <default pos:start="77:13" pos:end="77:20">default:</default>

                <expr_stmt pos:start="79:17" pos:end="79:80"><expr pos:start="79:17" pos:end="79:79"><call pos:start="79:17" pos:end="79:79"><name pos:start="79:17" pos:end="79:23">DPRINTF</name><argument_list pos:start="79:24" pos:end="79:79">(<argument pos:start="79:25" pos:end="79:26"><expr pos:start="79:25" pos:end="79:26"><operator pos:start="79:25" pos:end="79:25">-</operator><literal type="number" pos:start="79:26" pos:end="79:26">1</literal></expr></argument>, <argument pos:start="79:29" pos:end="79:62"><expr pos:start="79:29" pos:end="79:62"><literal type="string" pos:start="79:29" pos:end="79:62">"write to unknown register 0x%x\n"</literal></expr></argument>, <argument pos:start="79:65" pos:end="79:78"><expr pos:start="79:65" pos:end="79:78"><operator pos:start="79:65" pos:end="79:65">(</operator><name pos:start="79:66" pos:end="79:73">unsigned</name><operator pos:start="79:74" pos:end="79:74">)</operator><name pos:start="79:75" pos:end="79:78">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="93:5">else if <condition pos:start="83:15" pos:end="87:57">(<expr pos:start="83:16" pos:end="87:56"><operator pos:start="83:16" pos:end="83:16">(</operator><name pos:start="83:17" pos:end="83:20">addr</name> <operator pos:start="83:22" pos:end="83:23">&gt;=</operator> <name pos:start="83:25" pos:end="83:49">AHCI_PORT_REGS_START_ADDR</name><operator pos:start="83:50" pos:end="83:50">)</operator> <operator pos:start="83:52" pos:end="83:53">&amp;&amp;</operator>

               <operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:20">addr</name> <operator pos:start="85:22" pos:end="85:22">&lt;</operator> <operator pos:start="85:24" pos:end="85:24">(</operator><name pos:start="85:25" pos:end="85:49">AHCI_PORT_REGS_START_ADDR</name> <operator pos:start="85:51" pos:end="85:51">+</operator>

                <operator pos:start="87:17" pos:end="87:17">(</operator><name pos:start="87:18" pos:end="87:25"><name pos:start="87:18" pos:end="87:18">s</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:25">ports</name></name> <operator pos:start="87:27" pos:end="87:27">*</operator> <name pos:start="87:29" pos:end="87:53">AHCI_PORT_ADDR_OFFSET_LEN</name><operator pos:start="87:54" pos:end="87:54">)</operator><operator pos:start="87:55" pos:end="87:55">)</operator><operator pos:start="87:56" pos:end="87:56">)</operator></expr>)</condition> <block pos:start="87:59" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:64">

        <expr_stmt pos:start="89:9" pos:end="91:64"><expr pos:start="89:9" pos:end="91:63"><call pos:start="89:9" pos:end="91:63"><name pos:start="89:9" pos:end="89:23">ahci_port_write</name><argument_list pos:start="89:24" pos:end="91:63">(<argument pos:start="89:25" pos:end="89:25"><expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">s</name></expr></argument>, <argument pos:start="89:28" pos:end="89:66"><expr pos:start="89:28" pos:end="89:66"><operator pos:start="89:28" pos:end="89:28">(</operator><name pos:start="89:29" pos:end="89:32">addr</name> <operator pos:start="89:34" pos:end="89:34">-</operator> <name pos:start="89:36" pos:end="89:60">AHCI_PORT_REGS_START_ADDR</name><operator pos:start="89:61" pos:end="89:61">)</operator> <operator pos:start="89:63" pos:end="89:64">&gt;&gt;</operator> <literal type="number" pos:start="89:66" pos:end="89:66">7</literal></expr></argument>,

                        <argument pos:start="91:25" pos:end="91:57"><expr pos:start="91:25" pos:end="91:57"><name pos:start="91:25" pos:end="91:28">addr</name> <operator pos:start="91:30" pos:end="91:30">&amp;</operator> <name pos:start="91:32" pos:end="91:57">AHCI_PORT_ADDR_OFFSET_MASK</name></expr></argument>, <argument pos:start="91:60" pos:end="91:62"><expr pos:start="91:60" pos:end="91:62"><name pos:start="91:60" pos:end="91:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



</block_content>}</block></function>
</unit>
