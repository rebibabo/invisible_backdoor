<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21425.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:42"><name pos:start="1:1" pos:end="1:7">udp_emu</name><argument_list pos:start="1:8" pos:end="1:42">(<argument pos:start="1:9" pos:end="1:25">struct socket *so</argument>, <argument pos:start="1:28" pos:end="1:41">struct mbuf *m</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="447:1">{<block_content pos:start="5:9" pos:end="445:9">

	<decl_stmt pos:start="5:9" pos:end="5:32"><decl pos:start="5:9" pos:end="5:31"><type pos:start="5:9" pos:end="5:26"><name pos:start="5:9" pos:end="5:26"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:26">sockaddr_in</name></name></type> <name pos:start="5:28" pos:end="5:31">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7:9" pos:end="10:0"><decl pos:start="7:9" pos:end="7:34"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:19">addrlen</name> <init pos:start="7:21" pos:end="7:34">= <expr pos:start="7:23" pos:end="7:34"><sizeof pos:start="7:23" pos:end="7:34">sizeof<argument_list pos:start="7:29" pos:end="7:34">(<argument pos:start="7:30" pos:end="7:33"><expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="9:1" pos:end="9:19">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:19">EMULATE_TALK</name></cpp:ifdef>

	<decl_stmt pos:start="11:9" pos:end="11:26"><decl pos:start="11:9" pos:end="11:25"><type pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:19">CTL_MSG_OLD</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">omsg</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:15">CTL_MSG</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:21">nmsg</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:35"><decl pos:start="15:9" pos:end="15:34"><type pos:start="15:9" pos:end="15:12"><name pos:start="15:9" pos:end="15:12">char</name></type> <name pos:start="15:14" pos:end="15:34"><name pos:start="15:14" pos:end="15:17">buff</name><index pos:start="15:18" pos:end="15:34">[<expr pos:start="15:19" pos:end="15:33"><sizeof pos:start="15:19" pos:end="15:33">sizeof<argument_list pos:start="15:25" pos:end="15:33">(<argument pos:start="15:26" pos:end="15:32"><expr pos:start="15:26" pos:end="15:32"><name pos:start="15:26" pos:end="15:32">CTL_MSG</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:20"><decl pos:start="17:9" pos:end="17:19"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:14">u_char</name></type> <name pos:start="17:16" pos:end="17:19">type</name></decl>;</decl_stmt>



<struct pos:start="21:1" pos:end="29:7">struct <name pos:start="21:8" pos:end="21:19">talk_request</name> <block pos:start="21:21" pos:end="29:1">{

	<decl_stmt pos:start="23:9" pos:end="23:34"><decl pos:start="23:9" pos:end="23:33"><type pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:14">struct</name> <name pos:start="23:16" pos:end="23:27">talk_request</name></name> <modifier pos:start="23:29" pos:end="23:29">*</modifier></type><name pos:start="23:30" pos:end="23:33">next</name></decl>;</decl_stmt>

	<decl_stmt pos:start="25:9" pos:end="25:30"><decl pos:start="25:9" pos:end="25:29"><type pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:14">struct</name> <name pos:start="25:16" pos:end="25:21">socket</name></name> <modifier pos:start="25:23" pos:end="25:23">*</modifier></type><name pos:start="25:24" pos:end="25:29">udp_so</name></decl>;</decl_stmt>

	<decl_stmt pos:start="27:9" pos:end="27:30"><decl pos:start="27:9" pos:end="27:29"><type pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:14">struct</name> <name pos:start="27:16" pos:end="27:21">socket</name></name> <modifier pos:start="27:23" pos:end="27:23">*</modifier></type><name pos:start="27:24" pos:end="27:29">tcp_so</name></decl>;</decl_stmt>

}</block> <decl pos:start="29:3" pos:end="29:6"><modifier pos:start="29:3" pos:end="29:3">*</modifier><name pos:start="29:4" pos:end="29:6">req</name></decl>;</struct>



	<decl_stmt pos:start="33:9" pos:end="38:0"><decl pos:start="33:9" pos:end="33:47"><type pos:start="33:9" pos:end="33:36"><specifier pos:start="33:9" pos:end="33:14">static</specifier> <name pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:21">struct</name> <name pos:start="33:23" pos:end="33:34">talk_request</name></name> <modifier pos:start="33:36" pos:end="33:36">*</modifier></type><name pos:start="33:37" pos:end="33:43">req_tbl</name> <init pos:start="33:45" pos:end="33:47">= <expr pos:start="33:47" pos:end="33:47"><literal type="number" pos:start="33:47" pos:end="33:47">0</literal></expr></init></decl>;</decl_stmt>



<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>



<struct pos:start="41:1" pos:end="63:11">struct <name pos:start="41:8" pos:end="41:16">cu_header</name> <block pos:start="41:18" pos:end="63:1">{

	<decl_stmt pos:start="43:9" pos:end="43:33"><decl pos:start="43:9" pos:end="43:32"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">uint16_t</name></type>	<name pos:start="43:25" pos:end="43:32">d_family</name></decl>;</decl_stmt>		<comment type="line" pos:start="43:49" pos:end="43:69">// destination family</comment>

	<decl_stmt pos:start="45:9" pos:end="45:31"><decl pos:start="45:9" pos:end="45:30"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">uint16_t</name></type>	<name pos:start="45:25" pos:end="45:30">d_port</name></decl>;</decl_stmt>			<comment type="line" pos:start="45:49" pos:end="45:67">// destination port</comment>

	<decl_stmt pos:start="47:9" pos:end="47:31"><decl pos:start="47:9" pos:end="47:30"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint32_t</name></type>	<name pos:start="47:25" pos:end="47:30">d_addr</name></decl>;</decl_stmt>			<comment type="line" pos:start="47:49" pos:end="47:70">// destination address</comment>

	<decl_stmt pos:start="49:9" pos:end="49:33"><decl pos:start="49:9" pos:end="49:32"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">uint16_t</name></type>	<name pos:start="49:25" pos:end="49:32">s_family</name></decl>;</decl_stmt>		<comment type="line" pos:start="49:49" pos:end="49:64">// source family</comment>

	<decl_stmt pos:start="51:9" pos:end="51:31"><decl pos:start="51:9" pos:end="51:30"><type pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:16">uint16_t</name></type>	<name pos:start="51:25" pos:end="51:30">s_port</name></decl>;</decl_stmt>			<comment type="line" pos:start="51:49" pos:end="51:62">// source port</comment>

	<decl_stmt pos:start="53:9" pos:end="53:32"><decl pos:start="53:9" pos:end="53:31"><type pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">uint32_t</name></type>	<name pos:start="53:25" pos:end="53:31">so_addr</name></decl>;</decl_stmt>		<comment type="line" pos:start="53:49" pos:end="53:65">// source address</comment>

	<decl_stmt pos:start="55:9" pos:end="55:29"><decl pos:start="55:9" pos:end="55:28"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint32_t</name></type>	<name pos:start="55:25" pos:end="55:28">seqn</name></decl>;</decl_stmt>			<comment type="line" pos:start="55:49" pos:end="55:66">// sequence number</comment>

	<decl_stmt pos:start="57:9" pos:end="57:32"><decl pos:start="57:9" pos:end="57:31"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">uint16_t</name></type>	<name pos:start="57:25" pos:end="57:31">message</name></decl>;</decl_stmt>		<comment type="line" pos:start="57:49" pos:end="57:58">// message</comment>

	<decl_stmt pos:start="59:9" pos:end="59:34"><decl pos:start="59:9" pos:end="59:33"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint16_t</name></type>	<name pos:start="59:25" pos:end="59:33">data_type</name></decl>;</decl_stmt>		<comment type="line" pos:start="59:49" pos:end="59:60">// data type</comment>

	<decl_stmt pos:start="61:9" pos:end="61:32"><decl pos:start="61:9" pos:end="61:31"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint16_t</name></type>	<name pos:start="61:25" pos:end="61:31">pkt_len</name></decl>;</decl_stmt>		<comment type="line" pos:start="61:49" pos:end="61:64">// packet length</comment>

}</block> <decl pos:start="63:3" pos:end="63:10"><modifier pos:start="63:3" pos:end="63:3">*</modifier><name pos:start="63:4" pos:end="63:10">cu_head</name></decl>;</struct>



	<switch pos:start="67:9" pos:end="445:9">switch<condition pos:start="67:15" pos:end="67:26">(<expr pos:start="67:16" pos:end="67:25"><name pos:start="67:16" pos:end="67:25"><name pos:start="67:16" pos:end="67:17">so</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:25">so_emu</name></name></expr>)</condition> <block pos:start="67:28" pos:end="445:9">{<block_content pos:start="73:10" pos:end="443:23">



<cpp:ifdef pos:start="71:1" pos:end="71:19">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:19">EMULATE_TALK</name></cpp:ifdef>

	 <case pos:start="73:10" pos:end="73:23">case <expr pos:start="73:15" pos:end="73:22"><name pos:start="73:15" pos:end="73:22">EMU_TALK</name></expr>:</case>

	 <case pos:start="75:10" pos:end="75:24">case <expr pos:start="75:15" pos:end="75:23"><name pos:start="75:15" pos:end="75:23">EMU_NTALK</name></expr>:</case>

		<comment type="block" pos:start="77:17" pos:end="87:19">/*

		 * Talk emulation. We always change the ctl_addr to get

		 * some answers from the daemon. When an ANNOUNCE comes,

		 * we send LEAVE_INVITE to the local daemons. Also when a

		 * DELETE comes, we send copies to the local daemons.

		 */</comment>

		<if_stmt pos:start="89:17" pos:end="118:0"><if pos:start="89:17" pos:end="118:0">if <condition pos:start="89:20" pos:end="89:79">(<expr pos:start="89:21" pos:end="89:78"><call pos:start="89:21" pos:end="89:74"><name pos:start="89:21" pos:end="89:31">getsockname</name><argument_list pos:start="89:32" pos:end="89:74">(<argument pos:start="89:33" pos:end="89:37"><expr pos:start="89:33" pos:end="89:37"><name pos:start="89:33" pos:end="89:37"><name pos:start="89:33" pos:end="89:34">so</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:37">s</name></name></expr></argument>, <argument pos:start="89:40" pos:end="89:63"><expr pos:start="89:40" pos:end="89:63"><operator pos:start="89:40" pos:end="89:40">(</operator>struct <name pos:start="89:48" pos:end="89:55">sockaddr</name> <operator pos:start="89:57" pos:end="89:57">*</operator><operator pos:start="89:58" pos:end="89:58">)</operator><operator pos:start="89:59" pos:end="89:59">&amp;</operator><name pos:start="89:60" pos:end="89:63">addr</name></expr></argument>, <argument pos:start="89:66" pos:end="89:73"><expr pos:start="89:66" pos:end="89:73"><operator pos:start="89:66" pos:end="89:66">&amp;</operator><name pos:start="89:67" pos:end="89:73">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="89:76" pos:end="89:76">&lt;</operator> <literal type="number" pos:start="89:78" pos:end="89:78">0</literal></expr>)</condition><block type="pseudo" pos:start="91:25" pos:end="118:0"><block_content pos:start="91:25" pos:end="118:0">

			<return pos:start="91:25" pos:end="118:0">return;</return></block_content></block></if></if_stmt>



<cpp:define pos:start="95:1" pos:end="95:40">#<cpp:directive pos:start="95:2" pos:end="95:7">define</cpp:directive>	<cpp:macro pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:14">IS_OLD</name></cpp:macro>	<cpp:value pos:start="95:17" pos:end="95:40">(so-&gt;so_emu == EMU_TALK)</cpp:value></cpp:define>



<cpp:define pos:start="99:1" pos:end="113:76">#<cpp:directive pos:start="99:2" pos:end="99:7">define</cpp:directive> <cpp:macro pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:16">COPY_MSG</name><parameter_list pos:start="99:17" pos:end="99:27">(<parameter pos:start="99:18" pos:end="99:21"><type pos:start="99:18" pos:end="99:21"><name pos:start="99:18" pos:end="99:21">dest</name></type></parameter>, <parameter pos:start="99:24" pos:end="99:26"><type pos:start="99:24" pos:end="99:26"><name pos:start="99:24" pos:end="99:26">src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="99:29" pos:end="113:76">{ dest-&gt;type = src-&gt;type; \

			      dest-&gt;id_num = src-&gt;id_num; \

			      dest-&gt;pid = src-&gt;pid; \

			      dest-&gt;addr = src-&gt;addr; \

			      dest-&gt;ctl_addr = src-&gt;ctl_addr; \

			      memcpy(&amp;dest-&gt;l_name, &amp;src-&gt;l_name, NAME_SIZE_OLD); \

			      memcpy(&amp;dest-&gt;r_name, &amp;src-&gt;r_name, NAME_SIZE_OLD); \

	         	      memcpy(&amp;dest-&gt;r_tty, &amp;src-&gt;r_tty, TTY_SIZE); }</cpp:value></cpp:define>



<cpp:define pos:start="117:1" pos:end="117:62">#<cpp:directive pos:start="117:2" pos:end="117:7">define</cpp:directive> <cpp:macro pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:14">OTOSIN</name><parameter_list pos:start="117:15" pos:end="117:26">(<parameter pos:start="117:16" pos:end="117:18"><type pos:start="117:16" pos:end="117:18"><name pos:start="117:16" pos:end="117:18">ptr</name></type></parameter>, <parameter pos:start="117:21" pos:end="117:25"><type pos:start="117:21" pos:end="117:25"><name pos:start="117:21" pos:end="117:25">field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="117:28" pos:end="117:62">((struct sockaddr_in *)&amp;ptr-&gt;field)</cpp:value></cpp:define>

<comment type="block" pos:start="119:1" pos:end="119:33">/* old_sockaddr to sockaddr_in */</comment>





		<if_stmt pos:start="125:17" pos:end="153:17"><if pos:start="125:17" pos:end="139:17">if <condition pos:start="125:20" pos:end="125:27">(<expr pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:26">IS_OLD</name></expr>)</condition> <block pos:start="125:29" pos:end="139:17">{<block_content pos:start="127:25" pos:end="137:73">  		<comment type="block" pos:start="125:41" pos:end="125:54">/* old talk */</comment>

			<expr_stmt pos:start="127:25" pos:end="127:53"><expr pos:start="127:25" pos:end="127:52"><name pos:start="127:25" pos:end="127:28">omsg</name> <operator pos:start="127:30" pos:end="127:30">=</operator> <call pos:start="127:32" pos:end="127:52"><name pos:start="127:32" pos:end="127:35">mtod</name><argument_list pos:start="127:36" pos:end="127:52">(<argument pos:start="127:37" pos:end="127:37"><expr pos:start="127:37" pos:end="127:37"><name pos:start="127:37" pos:end="127:37">m</name></expr></argument>, <argument pos:start="127:40" pos:end="127:51"><expr pos:start="127:40" pos:end="127:51"><name pos:start="127:40" pos:end="127:50">CTL_MSG_OLD</name><operator pos:start="127:51" pos:end="127:51">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="129:25" pos:end="129:48"><expr pos:start="129:25" pos:end="129:47"><name pos:start="129:25" pos:end="129:28">nmsg</name> <operator pos:start="129:30" pos:end="129:30">=</operator> <operator pos:start="129:32" pos:end="129:32">(</operator><name pos:start="129:33" pos:end="129:39">CTL_MSG</name> <operator pos:start="129:41" pos:end="129:41">*</operator><operator pos:start="129:42" pos:end="129:42">)</operator> <name pos:start="129:44" pos:end="129:47">buff</name></expr>;</expr_stmt>

			<expr_stmt pos:start="131:25" pos:end="131:42"><expr pos:start="131:25" pos:end="131:41"><name pos:start="131:25" pos:end="131:28">type</name> <operator pos:start="131:30" pos:end="131:30">=</operator> <name pos:start="131:32" pos:end="131:41"><name pos:start="131:32" pos:end="131:35">omsg</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:41">type</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="133:25" pos:end="133:73"><expr pos:start="133:25" pos:end="133:72"><call pos:start="133:25" pos:end="133:46"><name pos:start="133:25" pos:end="133:30">OTOSIN</name><argument_list pos:start="133:31" pos:end="133:46">(<argument pos:start="133:32" pos:end="133:35"><expr pos:start="133:32" pos:end="133:35"><name pos:start="133:32" pos:end="133:35">omsg</name></expr></argument>, <argument pos:start="133:38" pos:end="133:45"><expr pos:start="133:38" pos:end="133:45"><name pos:start="133:38" pos:end="133:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="133:47" pos:end="133:48">-&gt;</operator><name pos:start="133:49" pos:end="133:56">sin_port</name> <operator pos:start="133:58" pos:end="133:58">=</operator> <name pos:start="133:60" pos:end="133:72"><name pos:start="133:60" pos:end="133:63">addr</name><operator pos:start="133:64" pos:end="133:64">.</operator><name pos:start="133:65" pos:end="133:72">sin_port</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="135:25" pos:end="135:68"><expr pos:start="135:25" pos:end="135:67"><call pos:start="135:25" pos:end="135:46"><name pos:start="135:25" pos:end="135:30">OTOSIN</name><argument_list pos:start="135:31" pos:end="135:46">(<argument pos:start="135:32" pos:end="135:35"><expr pos:start="135:32" pos:end="135:35"><name pos:start="135:32" pos:end="135:35">omsg</name></expr></argument>, <argument pos:start="135:38" pos:end="135:45"><expr pos:start="135:38" pos:end="135:45"><name pos:start="135:38" pos:end="135:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="135:47" pos:end="135:48">-&gt;</operator><name pos:start="135:49" pos:end="135:56">sin_addr</name> <operator pos:start="135:58" pos:end="135:58">=</operator> <name pos:start="135:60" pos:end="135:67">our_addr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="137:25" pos:end="137:73"><expr pos:start="137:25" pos:end="137:72"><call pos:start="137:25" pos:end="137:72"><name pos:start="137:25" pos:end="137:31">strncpy</name><argument_list pos:start="137:32" pos:end="137:72">(<argument pos:start="137:33" pos:end="137:44"><expr pos:start="137:33" pos:end="137:44"><name pos:start="137:33" pos:end="137:44"><name pos:start="137:33" pos:end="137:36">omsg</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:44">l_name</name></name></expr></argument>, <argument pos:start="137:47" pos:end="137:56"><expr pos:start="137:47" pos:end="137:56"><call pos:start="137:47" pos:end="137:56"><name pos:start="137:47" pos:end="137:54">getlogin</name><argument_list pos:start="137:55" pos:end="137:56">()</argument_list></call></expr></argument>, <argument pos:start="137:59" pos:end="137:71"><expr pos:start="137:59" pos:end="137:71"><name pos:start="137:59" pos:end="137:71">NAME_SIZE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="139:19" pos:end="153:17">else <block pos:start="139:24" pos:end="153:17">{<block_content pos:start="141:25" pos:end="151:73">		<comment type="block" pos:start="139:41" pos:end="139:54">/* new talk */</comment>

			<expr_stmt pos:start="141:25" pos:end="141:52"><expr pos:start="141:25" pos:end="141:51"><name pos:start="141:25" pos:end="141:28">omsg</name> <operator pos:start="141:30" pos:end="141:30">=</operator> <operator pos:start="141:32" pos:end="141:32">(</operator><name pos:start="141:33" pos:end="141:43">CTL_MSG_OLD</name> <operator pos:start="141:45" pos:end="141:45">*</operator><operator pos:start="141:46" pos:end="141:46">)</operator> <name pos:start="141:48" pos:end="141:51">buff</name></expr>;</expr_stmt>

			<expr_stmt pos:start="143:25" pos:end="143:50"><expr pos:start="143:25" pos:end="143:49"><name pos:start="143:25" pos:end="143:28">nmsg</name> <operator pos:start="143:30" pos:end="143:30">=</operator> <call pos:start="143:32" pos:end="143:49"><name pos:start="143:32" pos:end="143:35">mtod</name><argument_list pos:start="143:36" pos:end="143:49">(<argument pos:start="143:37" pos:end="143:37"><expr pos:start="143:37" pos:end="143:37"><name pos:start="143:37" pos:end="143:37">m</name></expr></argument>, <argument pos:start="143:40" pos:end="143:48"><expr pos:start="143:40" pos:end="143:48"><name pos:start="143:40" pos:end="143:46">CTL_MSG</name> <operator pos:start="143:48" pos:end="143:48">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="145:25" pos:end="145:42"><expr pos:start="145:25" pos:end="145:41"><name pos:start="145:25" pos:end="145:28">type</name> <operator pos:start="145:30" pos:end="145:30">=</operator> <name pos:start="145:32" pos:end="145:41"><name pos:start="145:32" pos:end="145:35">nmsg</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:41">type</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="147:25" pos:end="147:73"><expr pos:start="147:25" pos:end="147:72"><call pos:start="147:25" pos:end="147:46"><name pos:start="147:25" pos:end="147:30">OTOSIN</name><argument_list pos:start="147:31" pos:end="147:46">(<argument pos:start="147:32" pos:end="147:35"><expr pos:start="147:32" pos:end="147:35"><name pos:start="147:32" pos:end="147:35">nmsg</name></expr></argument>, <argument pos:start="147:38" pos:end="147:45"><expr pos:start="147:38" pos:end="147:45"><name pos:start="147:38" pos:end="147:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="147:47" pos:end="147:48">-&gt;</operator><name pos:start="147:49" pos:end="147:56">sin_port</name> <operator pos:start="147:58" pos:end="147:58">=</operator> <name pos:start="147:60" pos:end="147:72"><name pos:start="147:60" pos:end="147:63">addr</name><operator pos:start="147:64" pos:end="147:64">.</operator><name pos:start="147:65" pos:end="147:72">sin_port</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="149:25" pos:end="149:68"><expr pos:start="149:25" pos:end="149:67"><call pos:start="149:25" pos:end="149:46"><name pos:start="149:25" pos:end="149:30">OTOSIN</name><argument_list pos:start="149:31" pos:end="149:46">(<argument pos:start="149:32" pos:end="149:35"><expr pos:start="149:32" pos:end="149:35"><name pos:start="149:32" pos:end="149:35">nmsg</name></expr></argument>, <argument pos:start="149:38" pos:end="149:45"><expr pos:start="149:38" pos:end="149:45"><name pos:start="149:38" pos:end="149:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="149:47" pos:end="149:48">-&gt;</operator><name pos:start="149:49" pos:end="149:56">sin_addr</name> <operator pos:start="149:58" pos:end="149:58">=</operator> <name pos:start="149:60" pos:end="149:67">our_addr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="151:25" pos:end="151:73"><expr pos:start="151:25" pos:end="151:72"><call pos:start="151:25" pos:end="151:72"><name pos:start="151:25" pos:end="151:31">strncpy</name><argument_list pos:start="151:32" pos:end="151:72">(<argument pos:start="151:33" pos:end="151:44"><expr pos:start="151:33" pos:end="151:44"><name pos:start="151:33" pos:end="151:44"><name pos:start="151:33" pos:end="151:36">nmsg</name><operator pos:start="151:37" pos:end="151:38">-&gt;</operator><name pos:start="151:39" pos:end="151:44">l_name</name></name></expr></argument>, <argument pos:start="151:47" pos:end="151:56"><expr pos:start="151:47" pos:end="151:56"><call pos:start="151:47" pos:end="151:56"><name pos:start="151:47" pos:end="151:54">getlogin</name><argument_list pos:start="151:55" pos:end="151:56">()</argument_list></call></expr></argument>, <argument pos:start="151:59" pos:end="151:71"><expr pos:start="151:59" pos:end="151:71"><name pos:start="151:59" pos:end="151:71">NAME_SIZE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>



		<if_stmt pos:start="157:17" pos:end="159:31"><if pos:start="157:17" pos:end="159:31">if <condition pos:start="157:20" pos:end="157:36">(<expr pos:start="157:21" pos:end="157:35"><name pos:start="157:21" pos:end="157:24">type</name> <operator pos:start="157:26" pos:end="157:27">==</operator> <name pos:start="157:29" pos:end="157:35">LOOK_UP</name></expr>)</condition><block type="pseudo" pos:start="159:25" pos:end="159:31"><block_content pos:start="159:25" pos:end="159:31">

			<return pos:start="159:25" pos:end="159:31">return;</return></block_content></block></if></if_stmt>		<comment type="block" pos:start="159:41" pos:end="159:72">/* for LOOK_UP this is enough */</comment>



		<if_stmt pos:start="163:17" pos:end="173:45"><if pos:start="163:17" pos:end="171:17">if <condition pos:start="163:20" pos:end="163:27">(<expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:26">IS_OLD</name></expr>)</condition> <block pos:start="163:29" pos:end="171:17">{<block_content pos:start="165:25" pos:end="169:41">		<comment type="block" pos:start="163:41" pos:end="163:72">/* make a copy of the message */</comment>

			<expr_stmt pos:start="165:25" pos:end="165:45"><expr pos:start="165:25" pos:end="165:44"><call pos:start="165:25" pos:end="165:44"><name pos:start="165:25" pos:end="165:32">COPY_MSG</name><argument_list pos:start="165:33" pos:end="165:44">(<argument pos:start="165:34" pos:end="165:37"><expr pos:start="165:34" pos:end="165:37"><name pos:start="165:34" pos:end="165:37">nmsg</name></expr></argument>, <argument pos:start="165:40" pos:end="165:43"><expr pos:start="165:40" pos:end="165:43"><name pos:start="165:40" pos:end="165:43">omsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="167:25" pos:end="167:39"><expr pos:start="167:25" pos:end="167:38"><name pos:start="167:25" pos:end="167:34"><name pos:start="167:25" pos:end="167:28">nmsg</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:34">vers</name></name> <operator pos:start="167:36" pos:end="167:36">=</operator> <literal type="number" pos:start="167:38" pos:end="167:38">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="169:25" pos:end="169:41"><expr pos:start="169:25" pos:end="169:40"><name pos:start="169:25" pos:end="169:36"><name pos:start="169:25" pos:end="169:28">nmsg</name><operator pos:start="169:29" pos:end="169:30">-&gt;</operator><name pos:start="169:31" pos:end="169:36">answer</name></name> <operator pos:start="169:38" pos:end="169:38">=</operator> <literal type="number" pos:start="169:40" pos:end="169:40">0</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="171:19" pos:end="173:45">else<block type="pseudo" pos:start="173:25" pos:end="173:45"><block_content pos:start="173:25" pos:end="173:45">

			<expr_stmt pos:start="173:25" pos:end="173:45"><expr pos:start="173:25" pos:end="173:44"><call pos:start="173:25" pos:end="173:44"><name pos:start="173:25" pos:end="173:32">COPY_MSG</name><argument_list pos:start="173:33" pos:end="173:44">(<argument pos:start="173:34" pos:end="173:37"><expr pos:start="173:34" pos:end="173:37"><name pos:start="173:34" pos:end="173:37">omsg</name></expr></argument>, <argument pos:start="173:40" pos:end="173:43"><expr pos:start="173:40" pos:end="173:43"><name pos:start="173:40" pos:end="173:43">nmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<comment type="block" pos:start="177:17" pos:end="199:19">/*

		 * If if is an ANNOUNCE message, we go through the

		 * request table to see if a tcp port has already

		 * been redirected for this socket. If not, we solisten()

		 * a new socket and add this entry to the table.

		 * The port number of the tcp socket and our IP

		 * are put to the addr field of the message structures.

		 * Then a LEAVE_INVITE is sent to both local daemon

		 * ports, 517 and 518. This is why we have two copies

		 * of the message, one in old talk and one in new talk

		 * format.

		 */</comment>



		<if_stmt pos:start="203:17" pos:end="303:17"><if pos:start="203:17" pos:end="303:17">if <condition pos:start="203:20" pos:end="203:37">(<expr pos:start="203:21" pos:end="203:36"><name pos:start="203:21" pos:end="203:24">type</name> <operator pos:start="203:26" pos:end="203:27">==</operator> <name pos:start="203:29" pos:end="203:36">ANNOUNCE</name></expr>)</condition> <block pos:start="203:39" pos:end="303:17">{<block_content pos:start="205:25" pos:end="301:69">

			<decl_stmt pos:start="205:25" pos:end="205:30"><decl pos:start="205:25" pos:end="205:29"><type pos:start="205:25" pos:end="205:27"><name pos:start="205:25" pos:end="205:27">int</name></type> <name pos:start="205:29" pos:end="205:29">s</name></decl>;</decl_stmt>

			<decl_stmt pos:start="207:25" pos:end="207:42"><decl pos:start="207:25" pos:end="207:41"><type pos:start="207:25" pos:end="207:31"><name pos:start="207:25" pos:end="207:31">u_short</name></type> <name pos:start="207:33" pos:end="207:41">temp_port</name></decl>;</decl_stmt>



			<for pos:start="211:25" pos:end="215:46">for<control pos:start="211:28" pos:end="211:64">(<init pos:start="211:29" pos:end="211:42"><expr pos:start="211:29" pos:end="211:41"><name pos:start="211:29" pos:end="211:31">req</name> <operator pos:start="211:33" pos:end="211:33">=</operator> <name pos:start="211:35" pos:end="211:41">req_tbl</name></expr>;</init> <condition pos:start="211:44" pos:end="211:47"><expr pos:start="211:44" pos:end="211:46"><name pos:start="211:44" pos:end="211:46">req</name></expr>;</condition> <incr pos:start="211:49" pos:end="211:63"><expr pos:start="211:49" pos:end="211:63"><name pos:start="211:49" pos:end="211:51">req</name> <operator pos:start="211:53" pos:end="211:53">=</operator> <name pos:start="211:55" pos:end="211:63"><name pos:start="211:55" pos:end="211:57">req</name><operator pos:start="211:58" pos:end="211:59">-&gt;</operator><name pos:start="211:60" pos:end="211:63">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="213:33" pos:end="215:46"><block_content pos:start="213:33" pos:end="215:46">

				<if_stmt pos:start="213:33" pos:end="215:46"><if pos:start="213:33" pos:end="215:46">if <condition pos:start="213:36" pos:end="213:54">(<expr pos:start="213:37" pos:end="213:53"><name pos:start="213:37" pos:end="213:38">so</name> <operator pos:start="213:40" pos:end="213:41">==</operator> <name pos:start="213:43" pos:end="213:53"><name pos:start="213:43" pos:end="213:45">req</name><operator pos:start="213:46" pos:end="213:47">-&gt;</operator><name pos:start="213:48" pos:end="213:53">udp_so</name></name></expr>)</condition><block type="pseudo" pos:start="215:41" pos:end="215:46"><block_content pos:start="215:41" pos:end="215:46">

					<break pos:start="215:41" pos:end="215:46">break;</break></block_content></block></if></if_stmt></block_content></block></for>  	<comment type="block" pos:start="215:57" pos:end="215:70">/* found it */</comment>



			<if_stmt pos:start="219:25" pos:end="239:25"><if pos:start="219:25" pos:end="239:25">if <condition pos:start="219:28" pos:end="219:33">(<expr pos:start="219:29" pos:end="219:32"><operator pos:start="219:29" pos:end="219:29">!</operator><name pos:start="219:30" pos:end="219:32">req</name></expr>)</condition> <block pos:start="219:35" pos:end="239:25">{<block_content pos:start="221:33" pos:end="237:46">	<comment type="block" pos:start="219:41" pos:end="219:73">/* no entry for so, create new */</comment>

				<expr_stmt pos:start="221:33" pos:end="223:76"><expr pos:start="221:33" pos:end="223:75"><name pos:start="221:33" pos:end="221:35">req</name> <operator pos:start="221:37" pos:end="221:37">=</operator> <operator pos:start="221:39" pos:end="221:39">(</operator>struct <name pos:start="221:47" pos:end="221:58">talk_request</name> <operator pos:start="221:60" pos:end="221:60">*</operator><operator pos:start="221:61" pos:end="221:61">)</operator>

					<call pos:start="223:41" pos:end="223:75"><name pos:start="223:41" pos:end="223:46">malloc</name><argument_list pos:start="223:47" pos:end="223:75">(<argument pos:start="223:48" pos:end="223:74"><expr pos:start="223:48" pos:end="223:74"><sizeof pos:start="223:48" pos:end="223:74">sizeof<argument_list pos:start="223:54" pos:end="223:74">(<argument pos:start="223:55" pos:end="223:73"><expr pos:start="223:55" pos:end="223:73">struct <name pos:start="223:62" pos:end="223:73">talk_request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt pos:start="225:33" pos:end="225:49"><expr pos:start="225:33" pos:end="225:48"><name pos:start="225:33" pos:end="225:43"><name pos:start="225:33" pos:end="225:35">req</name><operator pos:start="225:36" pos:end="225:37">-&gt;</operator><name pos:start="225:38" pos:end="225:43">udp_so</name></name> <operator pos:start="225:45" pos:end="225:45">=</operator> <name pos:start="225:47" pos:end="225:48">so</name></expr>;</expr_stmt>

				<expr_stmt pos:start="227:33" pos:end="233:56"><expr pos:start="227:33" pos:end="233:55"><name pos:start="227:33" pos:end="227:43"><name pos:start="227:33" pos:end="227:35">req</name><operator pos:start="227:36" pos:end="227:37">-&gt;</operator><name pos:start="227:38" pos:end="227:43">tcp_so</name></name> <operator pos:start="227:45" pos:end="227:45">=</operator> <call pos:start="227:47" pos:end="233:55"><name pos:start="227:47" pos:end="227:54">solisten</name><argument_list pos:start="227:55" pos:end="233:55">(<argument pos:start="227:56" pos:end="227:56"><expr pos:start="227:56" pos:end="227:56"><literal type="number" pos:start="227:56" pos:end="227:56">0</literal></expr></argument>,

					<argument pos:start="229:41" pos:end="229:75"><expr pos:start="229:41" pos:end="229:75"><call pos:start="229:41" pos:end="229:58"><name pos:start="229:41" pos:end="229:46">OTOSIN</name><argument_list pos:start="229:47" pos:end="229:58">(<argument pos:start="229:48" pos:end="229:51"><expr pos:start="229:48" pos:end="229:51"><name pos:start="229:48" pos:end="229:51">omsg</name></expr></argument>, <argument pos:start="229:54" pos:end="229:57"><expr pos:start="229:54" pos:end="229:57"><name pos:start="229:54" pos:end="229:57">addr</name></expr></argument>)</argument_list></call><operator pos:start="229:59" pos:end="229:60">-&gt;</operator><name pos:start="229:61" pos:end="229:75"><name pos:start="229:61" pos:end="229:68">sin_addr</name><operator pos:start="229:69" pos:end="229:69">.</operator><name pos:start="229:70" pos:end="229:75">s_addr</name></name></expr></argument>,

					<argument pos:start="231:41" pos:end="231:68"><expr pos:start="231:41" pos:end="231:68"><call pos:start="231:41" pos:end="231:58"><name pos:start="231:41" pos:end="231:46">OTOSIN</name><argument_list pos:start="231:47" pos:end="231:58">(<argument pos:start="231:48" pos:end="231:51"><expr pos:start="231:48" pos:end="231:51"><name pos:start="231:48" pos:end="231:51">omsg</name></expr></argument>, <argument pos:start="231:54" pos:end="231:57"><expr pos:start="231:54" pos:end="231:57"><name pos:start="231:54" pos:end="231:57">addr</name></expr></argument>)</argument_list></call><operator pos:start="231:59" pos:end="231:60">-&gt;</operator><name pos:start="231:61" pos:end="231:68">sin_port</name></expr></argument>,

					<argument pos:start="233:41" pos:end="233:54"><expr pos:start="233:41" pos:end="233:54"><name pos:start="233:41" pos:end="233:54">SS_FACCEPTONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt pos:start="235:33" pos:end="235:52"><expr pos:start="235:33" pos:end="235:51"><name pos:start="235:33" pos:end="235:41"><name pos:start="235:33" pos:end="235:35">req</name><operator pos:start="235:36" pos:end="235:37">-&gt;</operator><name pos:start="235:38" pos:end="235:41">next</name></name> <operator pos:start="235:43" pos:end="235:43">=</operator> <name pos:start="235:45" pos:end="235:51">req_tbl</name></expr>;</expr_stmt>

				<expr_stmt pos:start="237:33" pos:end="237:46"><expr pos:start="237:33" pos:end="237:45"><name pos:start="237:33" pos:end="237:39">req_tbl</name> <operator pos:start="237:41" pos:end="237:41">=</operator> <name pos:start="237:43" pos:end="237:45">req</name></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt>



			<comment type="block" pos:start="243:25" pos:end="243:63">/* replace port number in addr field */</comment>

			<expr_stmt pos:start="245:25" pos:end="245:47"><expr pos:start="245:25" pos:end="245:46"><name pos:start="245:25" pos:end="245:31">addrlen</name> <operator pos:start="245:33" pos:end="245:33">=</operator> <sizeof pos:start="245:35" pos:end="245:46">sizeof<argument_list pos:start="245:41" pos:end="245:46">(<argument pos:start="245:42" pos:end="245:45"><expr pos:start="245:42" pos:end="245:45"><name pos:start="245:42" pos:end="245:45">addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

			<expr_stmt pos:start="247:25" pos:end="251:50"><expr pos:start="247:25" pos:end="251:49"><call pos:start="247:25" pos:end="251:49"><name pos:start="247:25" pos:end="247:35">getsockname</name><argument_list pos:start="247:36" pos:end="251:49">(<argument pos:start="247:37" pos:end="247:50"><expr pos:start="247:37" pos:end="247:50"><name pos:start="247:37" pos:end="247:50"><name pos:start="247:37" pos:end="247:39">req</name><operator pos:start="247:40" pos:end="247:41">-&gt;</operator><name pos:start="247:42" pos:end="247:47">tcp_so</name><operator pos:start="247:48" pos:end="247:49">-&gt;</operator><name pos:start="247:50" pos:end="247:50">s</name></name></expr></argument>,

					<argument pos:start="249:41" pos:end="249:65"><expr pos:start="249:41" pos:end="249:65"><operator pos:start="249:41" pos:end="249:41">(</operator>struct <name pos:start="249:49" pos:end="249:56">sockaddr</name> <operator pos:start="249:58" pos:end="249:58">*</operator><operator pos:start="249:59" pos:end="249:59">)</operator> <operator pos:start="249:61" pos:end="249:61">&amp;</operator><name pos:start="249:62" pos:end="249:65">addr</name></expr></argument>,

					<argument pos:start="251:41" pos:end="251:48"><expr pos:start="251:41" pos:end="251:48"><operator pos:start="251:41" pos:end="251:41">&amp;</operator><name pos:start="251:42" pos:end="251:48">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="253:25" pos:end="253:69"><expr pos:start="253:25" pos:end="253:68"><call pos:start="253:25" pos:end="253:42"><name pos:start="253:25" pos:end="253:30">OTOSIN</name><argument_list pos:start="253:31" pos:end="253:42">(<argument pos:start="253:32" pos:end="253:35"><expr pos:start="253:32" pos:end="253:35"><name pos:start="253:32" pos:end="253:35">omsg</name></expr></argument>, <argument pos:start="253:38" pos:end="253:41"><expr pos:start="253:38" pos:end="253:41"><name pos:start="253:38" pos:end="253:41">addr</name></expr></argument>)</argument_list></call><operator pos:start="253:43" pos:end="253:44">-&gt;</operator><name pos:start="253:45" pos:end="253:52">sin_port</name> <operator pos:start="253:54" pos:end="253:54">=</operator> <name pos:start="253:56" pos:end="253:68"><name pos:start="253:56" pos:end="253:59">addr</name><operator pos:start="253:60" pos:end="253:60">.</operator><name pos:start="253:61" pos:end="253:68">sin_port</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="255:25" pos:end="255:64"><expr pos:start="255:25" pos:end="255:63"><call pos:start="255:25" pos:end="255:42"><name pos:start="255:25" pos:end="255:30">OTOSIN</name><argument_list pos:start="255:31" pos:end="255:42">(<argument pos:start="255:32" pos:end="255:35"><expr pos:start="255:32" pos:end="255:35"><name pos:start="255:32" pos:end="255:35">omsg</name></expr></argument>, <argument pos:start="255:38" pos:end="255:41"><expr pos:start="255:38" pos:end="255:41"><name pos:start="255:38" pos:end="255:41">addr</name></expr></argument>)</argument_list></call><operator pos:start="255:43" pos:end="255:44">-&gt;</operator><name pos:start="255:45" pos:end="255:52">sin_addr</name> <operator pos:start="255:54" pos:end="255:54">=</operator> <name pos:start="255:56" pos:end="255:63">our_addr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="257:25" pos:end="257:69"><expr pos:start="257:25" pos:end="257:68"><call pos:start="257:25" pos:end="257:42"><name pos:start="257:25" pos:end="257:30">OTOSIN</name><argument_list pos:start="257:31" pos:end="257:42">(<argument pos:start="257:32" pos:end="257:35"><expr pos:start="257:32" pos:end="257:35"><name pos:start="257:32" pos:end="257:35">nmsg</name></expr></argument>, <argument pos:start="257:38" pos:end="257:41"><expr pos:start="257:38" pos:end="257:41"><name pos:start="257:38" pos:end="257:41">addr</name></expr></argument>)</argument_list></call><operator pos:start="257:43" pos:end="257:44">-&gt;</operator><name pos:start="257:45" pos:end="257:52">sin_port</name> <operator pos:start="257:54" pos:end="257:54">=</operator> <name pos:start="257:56" pos:end="257:68"><name pos:start="257:56" pos:end="257:59">addr</name><operator pos:start="257:60" pos:end="257:60">.</operator><name pos:start="257:61" pos:end="257:68">sin_port</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="259:25" pos:end="259:64"><expr pos:start="259:25" pos:end="259:63"><call pos:start="259:25" pos:end="259:42"><name pos:start="259:25" pos:end="259:30">OTOSIN</name><argument_list pos:start="259:31" pos:end="259:42">(<argument pos:start="259:32" pos:end="259:35"><expr pos:start="259:32" pos:end="259:35"><name pos:start="259:32" pos:end="259:35">nmsg</name></expr></argument>, <argument pos:start="259:38" pos:end="259:41"><expr pos:start="259:38" pos:end="259:41"><name pos:start="259:38" pos:end="259:41">addr</name></expr></argument>)</argument_list></call><operator pos:start="259:43" pos:end="259:44">-&gt;</operator><name pos:start="259:45" pos:end="259:52">sin_addr</name> <operator pos:start="259:54" pos:end="259:54">=</operator> <name pos:start="259:56" pos:end="259:63">our_addr</name></expr>;</expr_stmt>



			<comment type="block" pos:start="263:25" pos:end="263:48">/* send LEAVE_INVITEs */</comment>

			<expr_stmt pos:start="265:25" pos:end="265:69"><expr pos:start="265:25" pos:end="265:68"><name pos:start="265:25" pos:end="265:33">temp_port</name> <operator pos:start="265:35" pos:end="265:35">=</operator> <call pos:start="265:37" pos:end="265:58"><name pos:start="265:37" pos:end="265:42">OTOSIN</name><argument_list pos:start="265:43" pos:end="265:58">(<argument pos:start="265:44" pos:end="265:47"><expr pos:start="265:44" pos:end="265:47"><name pos:start="265:44" pos:end="265:47">omsg</name></expr></argument>, <argument pos:start="265:50" pos:end="265:57"><expr pos:start="265:50" pos:end="265:57"><name pos:start="265:50" pos:end="265:57">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="265:59" pos:end="265:60">-&gt;</operator><name pos:start="265:61" pos:end="265:68">sin_port</name></expr>;</expr_stmt>

			<expr_stmt pos:start="267:25" pos:end="267:61"><expr pos:start="267:25" pos:end="267:60"><call pos:start="267:25" pos:end="267:46"><name pos:start="267:25" pos:end="267:30">OTOSIN</name><argument_list pos:start="267:31" pos:end="267:46">(<argument pos:start="267:32" pos:end="267:35"><expr pos:start="267:32" pos:end="267:35"><name pos:start="267:32" pos:end="267:35">omsg</name></expr></argument>, <argument pos:start="267:38" pos:end="267:45"><expr pos:start="267:38" pos:end="267:45"><name pos:start="267:38" pos:end="267:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="267:47" pos:end="267:48">-&gt;</operator><name pos:start="267:49" pos:end="267:56">sin_port</name> <operator pos:start="267:58" pos:end="267:58">=</operator> <literal type="number" pos:start="267:60" pos:end="267:60">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="269:25" pos:end="269:61"><expr pos:start="269:25" pos:end="269:60"><call pos:start="269:25" pos:end="269:46"><name pos:start="269:25" pos:end="269:30">OTOSIN</name><argument_list pos:start="269:31" pos:end="269:46">(<argument pos:start="269:32" pos:end="269:35"><expr pos:start="269:32" pos:end="269:35"><name pos:start="269:32" pos:end="269:35">nmsg</name></expr></argument>, <argument pos:start="269:38" pos:end="269:45"><expr pos:start="269:38" pos:end="269:45"><name pos:start="269:38" pos:end="269:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="269:47" pos:end="269:48">-&gt;</operator><name pos:start="269:49" pos:end="269:56">sin_port</name> <operator pos:start="269:58" pos:end="269:58">=</operator> <literal type="number" pos:start="269:60" pos:end="269:60">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="271:25" pos:end="271:63"><expr pos:start="271:25" pos:end="271:62"><name pos:start="271:25" pos:end="271:34"><name pos:start="271:25" pos:end="271:28">omsg</name><operator pos:start="271:29" pos:end="271:30">-&gt;</operator><name pos:start="271:31" pos:end="271:34">type</name></name> <operator pos:start="271:36" pos:end="271:36">=</operator> <name pos:start="271:38" pos:end="271:47"><name pos:start="271:38" pos:end="271:41">nmsg</name><operator pos:start="271:42" pos:end="271:43">-&gt;</operator><name pos:start="271:44" pos:end="271:47">type</name></name> <operator pos:start="271:49" pos:end="271:49">=</operator> <name pos:start="271:51" pos:end="271:62">LEAVE_INVITE</name></expr>;</expr_stmt>



			<expr_stmt pos:start="275:25" pos:end="275:68"><expr pos:start="275:25" pos:end="275:67"><name pos:start="275:25" pos:end="275:25">s</name> <operator pos:start="275:27" pos:end="275:27">=</operator> <call pos:start="275:29" pos:end="275:67"><name pos:start="275:29" pos:end="275:34">socket</name><argument_list pos:start="275:35" pos:end="275:67">(<argument pos:start="275:36" pos:end="275:42"><expr pos:start="275:36" pos:end="275:42"><name pos:start="275:36" pos:end="275:42">AF_INET</name></expr></argument>, <argument pos:start="275:45" pos:end="275:54"><expr pos:start="275:45" pos:end="275:54"><name pos:start="275:45" pos:end="275:54">SOCK_DGRAM</name></expr></argument>, <argument pos:start="275:57" pos:end="275:66"><expr pos:start="275:57" pos:end="275:66"><name pos:start="275:57" pos:end="275:66">IPPROTO_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="277:25" pos:end="277:49"><expr pos:start="277:25" pos:end="277:48"><name pos:start="277:25" pos:end="277:37"><name pos:start="277:25" pos:end="277:28">addr</name><operator pos:start="277:29" pos:end="277:29">.</operator><name pos:start="277:30" pos:end="277:37">sin_addr</name></name> <operator pos:start="277:39" pos:end="277:39">=</operator> <name pos:start="277:41" pos:end="277:48">our_addr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="279:25" pos:end="279:50"><expr pos:start="279:25" pos:end="279:49"><name pos:start="279:25" pos:end="279:39"><name pos:start="279:25" pos:end="279:28">addr</name><operator pos:start="279:29" pos:end="279:29">.</operator><name pos:start="279:30" pos:end="279:39">sin_family</name></name> <operator pos:start="279:41" pos:end="279:41">=</operator> <name pos:start="279:43" pos:end="279:49">AF_INET</name></expr>;</expr_stmt>

			<expr_stmt pos:start="281:25" pos:end="281:51"><expr pos:start="281:25" pos:end="281:50"><name pos:start="281:25" pos:end="281:37"><name pos:start="281:25" pos:end="281:28">addr</name><operator pos:start="281:29" pos:end="281:29">.</operator><name pos:start="281:30" pos:end="281:37">sin_port</name></name> <operator pos:start="281:39" pos:end="281:39">=</operator> <call pos:start="281:41" pos:end="281:50"><name pos:start="281:41" pos:end="281:45">htons</name><argument_list pos:start="281:46" pos:end="281:50">(<argument pos:start="281:47" pos:end="281:49"><expr pos:start="281:47" pos:end="281:49"><literal type="number" pos:start="281:47" pos:end="281:49">517</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="283:25" pos:end="285:72"><expr pos:start="283:25" pos:end="285:71"><call pos:start="283:25" pos:end="285:71"><name pos:start="283:25" pos:end="283:30">sendto</name><argument_list pos:start="283:31" pos:end="285:71">(<argument pos:start="283:32" pos:end="283:32"><expr pos:start="283:32" pos:end="283:32"><name pos:start="283:32" pos:end="283:32">s</name></expr></argument>, <argument pos:start="283:35" pos:end="283:46"><expr pos:start="283:35" pos:end="283:46"><operator pos:start="283:35" pos:end="283:35">(</operator><name pos:start="283:36" pos:end="283:39">char</name> <operator pos:start="283:41" pos:end="283:41">*</operator><operator pos:start="283:42" pos:end="283:42">)</operator><name pos:start="283:43" pos:end="283:46">omsg</name></expr></argument>, <argument pos:start="283:49" pos:end="283:61"><expr pos:start="283:49" pos:end="283:61"><sizeof pos:start="283:49" pos:end="283:61">sizeof<argument_list pos:start="283:55" pos:end="283:61">(<argument pos:start="283:56" pos:end="283:60"><expr pos:start="283:56" pos:end="283:60"><operator pos:start="283:56" pos:end="283:56">*</operator><name pos:start="283:57" pos:end="283:60">omsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="283:64" pos:end="283:64"><expr pos:start="283:64" pos:end="283:64"><literal type="number" pos:start="283:64" pos:end="283:64">0</literal></expr></argument>,

				<argument pos:start="285:33" pos:end="285:56"><expr pos:start="285:33" pos:end="285:56"><operator pos:start="285:33" pos:end="285:33">(</operator>struct <name pos:start="285:41" pos:end="285:48">sockaddr</name> <operator pos:start="285:50" pos:end="285:50">*</operator><operator pos:start="285:51" pos:end="285:51">)</operator><operator pos:start="285:52" pos:end="285:52">&amp;</operator><name pos:start="285:53" pos:end="285:56">addr</name></expr></argument>, <argument pos:start="285:59" pos:end="285:70"><expr pos:start="285:59" pos:end="285:70"><sizeof pos:start="285:59" pos:end="285:70">sizeof<argument_list pos:start="285:65" pos:end="285:70">(<argument pos:start="285:66" pos:end="285:69"><expr pos:start="285:66" pos:end="285:69"><name pos:start="285:66" pos:end="285:69">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="287:25" pos:end="287:51"><expr pos:start="287:25" pos:end="287:50"><name pos:start="287:25" pos:end="287:37"><name pos:start="287:25" pos:end="287:28">addr</name><operator pos:start="287:29" pos:end="287:29">.</operator><name pos:start="287:30" pos:end="287:37">sin_port</name></name> <operator pos:start="287:39" pos:end="287:39">=</operator> <call pos:start="287:41" pos:end="287:50"><name pos:start="287:41" pos:end="287:45">htons</name><argument_list pos:start="287:46" pos:end="287:50">(<argument pos:start="287:47" pos:end="287:49"><expr pos:start="287:47" pos:end="287:49"><literal type="number" pos:start="287:47" pos:end="287:49">518</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="289:25" pos:end="291:73"><expr pos:start="289:25" pos:end="291:72"><call pos:start="289:25" pos:end="291:72"><name pos:start="289:25" pos:end="289:30">sendto</name><argument_list pos:start="289:31" pos:end="291:72">(<argument pos:start="289:32" pos:end="289:32"><expr pos:start="289:32" pos:end="289:32"><name pos:start="289:32" pos:end="289:32">s</name></expr></argument>, <argument pos:start="289:35" pos:end="289:46"><expr pos:start="289:35" pos:end="289:46"><operator pos:start="289:35" pos:end="289:35">(</operator><name pos:start="289:36" pos:end="289:39">char</name> <operator pos:start="289:41" pos:end="289:41">*</operator><operator pos:start="289:42" pos:end="289:42">)</operator><name pos:start="289:43" pos:end="289:46">nmsg</name></expr></argument>, <argument pos:start="289:49" pos:end="289:61"><expr pos:start="289:49" pos:end="289:61"><sizeof pos:start="289:49" pos:end="289:61">sizeof<argument_list pos:start="289:55" pos:end="289:61">(<argument pos:start="289:56" pos:end="289:60"><expr pos:start="289:56" pos:end="289:60"><operator pos:start="289:56" pos:end="289:56">*</operator><name pos:start="289:57" pos:end="289:60">nmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="289:64" pos:end="289:64"><expr pos:start="289:64" pos:end="289:64"><literal type="number" pos:start="289:64" pos:end="289:64">0</literal></expr></argument>,

				<argument pos:start="291:33" pos:end="291:57"><expr pos:start="291:33" pos:end="291:57"><operator pos:start="291:33" pos:end="291:33">(</operator>struct <name pos:start="291:41" pos:end="291:48">sockaddr</name> <operator pos:start="291:50" pos:end="291:50">*</operator><operator pos:start="291:51" pos:end="291:51">)</operator> <operator pos:start="291:53" pos:end="291:53">&amp;</operator><name pos:start="291:54" pos:end="291:57">addr</name></expr></argument>, <argument pos:start="291:60" pos:end="291:71"><expr pos:start="291:60" pos:end="291:71"><sizeof pos:start="291:60" pos:end="291:71">sizeof<argument_list pos:start="291:66" pos:end="291:71">(<argument pos:start="291:67" pos:end="291:70"><expr pos:start="291:67" pos:end="291:70"><name pos:start="291:67" pos:end="291:70">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="293:25" pos:end="293:40"><expr pos:start="293:25" pos:end="293:38"><call pos:start="293:25" pos:end="293:38"><name pos:start="293:25" pos:end="293:35">closesocket</name><argument_list pos:start="293:36" pos:end="293:38">(<argument pos:start="293:37" pos:end="293:37"><expr pos:start="293:37" pos:end="293:37"><name pos:start="293:37" pos:end="293:37">s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>



			<expr_stmt pos:start="297:25" pos:end="297:59"><expr pos:start="297:25" pos:end="297:58"><name pos:start="297:25" pos:end="297:34"><name pos:start="297:25" pos:end="297:28">omsg</name><operator pos:start="297:29" pos:end="297:30">-&gt;</operator><name pos:start="297:31" pos:end="297:34">type</name></name> <operator pos:start="297:36" pos:end="297:36">=</operator> <name pos:start="297:38" pos:end="297:47"><name pos:start="297:38" pos:end="297:41">nmsg</name><operator pos:start="297:42" pos:end="297:43">-&gt;</operator><name pos:start="297:44" pos:end="297:47">type</name></name> <operator pos:start="297:49" pos:end="297:49">=</operator> <name pos:start="297:51" pos:end="297:58">ANNOUNCE</name></expr>;</expr_stmt>

			<expr_stmt pos:start="299:25" pos:end="299:69"><expr pos:start="299:25" pos:end="299:68"><call pos:start="299:25" pos:end="299:46"><name pos:start="299:25" pos:end="299:30">OTOSIN</name><argument_list pos:start="299:31" pos:end="299:46">(<argument pos:start="299:32" pos:end="299:35"><expr pos:start="299:32" pos:end="299:35"><name pos:start="299:32" pos:end="299:35">omsg</name></expr></argument>, <argument pos:start="299:38" pos:end="299:45"><expr pos:start="299:38" pos:end="299:45"><name pos:start="299:38" pos:end="299:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="299:47" pos:end="299:48">-&gt;</operator><name pos:start="299:49" pos:end="299:56">sin_port</name> <operator pos:start="299:58" pos:end="299:58">=</operator> <name pos:start="299:60" pos:end="299:68">temp_port</name></expr>;</expr_stmt>

			<expr_stmt pos:start="301:25" pos:end="301:69"><expr pos:start="301:25" pos:end="301:68"><call pos:start="301:25" pos:end="301:46"><name pos:start="301:25" pos:end="301:30">OTOSIN</name><argument_list pos:start="301:31" pos:end="301:46">(<argument pos:start="301:32" pos:end="301:35"><expr pos:start="301:32" pos:end="301:35"><name pos:start="301:32" pos:end="301:35">nmsg</name></expr></argument>, <argument pos:start="301:38" pos:end="301:45"><expr pos:start="301:38" pos:end="301:45"><name pos:start="301:38" pos:end="301:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="301:47" pos:end="301:48">-&gt;</operator><name pos:start="301:49" pos:end="301:56">sin_port</name> <operator pos:start="301:58" pos:end="301:58">=</operator> <name pos:start="301:60" pos:end="301:68">temp_port</name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>



		<comment type="block" pos:start="307:17" pos:end="315:19">/*

		 * If it is a DELETE message, we send a copy to the

		 * local daemons. Then we delete the entry corresponding

		 * to our socket from the request table.

		 */</comment>



		<if_stmt pos:start="319:17" pos:end="401:17"><if pos:start="319:17" pos:end="401:17">if <condition pos:start="319:20" pos:end="319:35">(<expr pos:start="319:21" pos:end="319:34"><name pos:start="319:21" pos:end="319:24">type</name> <operator pos:start="319:26" pos:end="319:27">==</operator> <name pos:start="319:29" pos:end="319:34">DELETE</name></expr>)</condition> <block pos:start="319:37" pos:end="401:17">{<block_content pos:start="321:25" pos:end="399:25">

			<decl_stmt pos:start="321:25" pos:end="321:65"><decl pos:start="321:25" pos:end="321:53"><type pos:start="321:25" pos:end="321:45"><name pos:start="321:25" pos:end="321:43"><name pos:start="321:25" pos:end="321:30">struct</name> <name pos:start="321:32" pos:end="321:43">talk_request</name></name> <modifier pos:start="321:45" pos:end="321:45">*</modifier></type><name pos:start="321:46" pos:end="321:53">temp_req</name></decl>, <decl pos:start="321:56" pos:end="321:64"><type ref="prev" pos:start="321:25" pos:end="321:45"><modifier pos:start="321:56" pos:end="321:56">*</modifier></type><name pos:start="321:57" pos:end="321:64">req_next</name></decl>;</decl_stmt>

			<decl_stmt pos:start="323:25" pos:end="323:30"><decl pos:start="323:25" pos:end="323:29"><type pos:start="323:25" pos:end="323:27"><name pos:start="323:25" pos:end="323:27">int</name></type> <name pos:start="323:29" pos:end="323:29">s</name></decl>;</decl_stmt>

			<decl_stmt pos:start="325:25" pos:end="325:42"><decl pos:start="325:25" pos:end="325:41"><type pos:start="325:25" pos:end="325:31"><name pos:start="325:25" pos:end="325:31">u_short</name></type> <name pos:start="325:33" pos:end="325:41">temp_port</name></decl>;</decl_stmt>



			<expr_stmt pos:start="329:25" pos:end="329:69"><expr pos:start="329:25" pos:end="329:68"><name pos:start="329:25" pos:end="329:33">temp_port</name> <operator pos:start="329:35" pos:end="329:35">=</operator> <call pos:start="329:37" pos:end="329:58"><name pos:start="329:37" pos:end="329:42">OTOSIN</name><argument_list pos:start="329:43" pos:end="329:58">(<argument pos:start="329:44" pos:end="329:47"><expr pos:start="329:44" pos:end="329:47"><name pos:start="329:44" pos:end="329:47">omsg</name></expr></argument>, <argument pos:start="329:50" pos:end="329:57"><expr pos:start="329:50" pos:end="329:57"><name pos:start="329:50" pos:end="329:57">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="329:59" pos:end="329:60">-&gt;</operator><name pos:start="329:61" pos:end="329:68">sin_port</name></expr>;</expr_stmt>

			<expr_stmt pos:start="331:25" pos:end="331:61"><expr pos:start="331:25" pos:end="331:60"><call pos:start="331:25" pos:end="331:46"><name pos:start="331:25" pos:end="331:30">OTOSIN</name><argument_list pos:start="331:31" pos:end="331:46">(<argument pos:start="331:32" pos:end="331:35"><expr pos:start="331:32" pos:end="331:35"><name pos:start="331:32" pos:end="331:35">omsg</name></expr></argument>, <argument pos:start="331:38" pos:end="331:45"><expr pos:start="331:38" pos:end="331:45"><name pos:start="331:38" pos:end="331:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="331:47" pos:end="331:48">-&gt;</operator><name pos:start="331:49" pos:end="331:56">sin_port</name> <operator pos:start="331:58" pos:end="331:58">=</operator> <literal type="number" pos:start="331:60" pos:end="331:60">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="333:25" pos:end="333:61"><expr pos:start="333:25" pos:end="333:60"><call pos:start="333:25" pos:end="333:46"><name pos:start="333:25" pos:end="333:30">OTOSIN</name><argument_list pos:start="333:31" pos:end="333:46">(<argument pos:start="333:32" pos:end="333:35"><expr pos:start="333:32" pos:end="333:35"><name pos:start="333:32" pos:end="333:35">nmsg</name></expr></argument>, <argument pos:start="333:38" pos:end="333:45"><expr pos:start="333:38" pos:end="333:45"><name pos:start="333:38" pos:end="333:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="333:47" pos:end="333:48">-&gt;</operator><name pos:start="333:49" pos:end="333:56">sin_port</name> <operator pos:start="333:58" pos:end="333:58">=</operator> <literal type="number" pos:start="333:60" pos:end="333:60">0</literal></expr>;</expr_stmt>



			<expr_stmt pos:start="337:25" pos:end="337:68"><expr pos:start="337:25" pos:end="337:67"><name pos:start="337:25" pos:end="337:25">s</name> <operator pos:start="337:27" pos:end="337:27">=</operator> <call pos:start="337:29" pos:end="337:67"><name pos:start="337:29" pos:end="337:34">socket</name><argument_list pos:start="337:35" pos:end="337:67">(<argument pos:start="337:36" pos:end="337:42"><expr pos:start="337:36" pos:end="337:42"><name pos:start="337:36" pos:end="337:42">AF_INET</name></expr></argument>, <argument pos:start="337:45" pos:end="337:54"><expr pos:start="337:45" pos:end="337:54"><name pos:start="337:45" pos:end="337:54">SOCK_DGRAM</name></expr></argument>, <argument pos:start="337:57" pos:end="337:66"><expr pos:start="337:57" pos:end="337:66"><name pos:start="337:57" pos:end="337:66">IPPROTO_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="339:25" pos:end="339:49"><expr pos:start="339:25" pos:end="339:48"><name pos:start="339:25" pos:end="339:37"><name pos:start="339:25" pos:end="339:28">addr</name><operator pos:start="339:29" pos:end="339:29">.</operator><name pos:start="339:30" pos:end="339:37">sin_addr</name></name> <operator pos:start="339:39" pos:end="339:39">=</operator> <name pos:start="339:41" pos:end="339:48">our_addr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="341:25" pos:end="341:50"><expr pos:start="341:25" pos:end="341:49"><name pos:start="341:25" pos:end="341:39"><name pos:start="341:25" pos:end="341:28">addr</name><operator pos:start="341:29" pos:end="341:29">.</operator><name pos:start="341:30" pos:end="341:39">sin_family</name></name> <operator pos:start="341:41" pos:end="341:41">=</operator> <name pos:start="341:43" pos:end="341:49">AF_INET</name></expr>;</expr_stmt>

			<expr_stmt pos:start="343:25" pos:end="343:51"><expr pos:start="343:25" pos:end="343:50"><name pos:start="343:25" pos:end="343:37"><name pos:start="343:25" pos:end="343:28">addr</name><operator pos:start="343:29" pos:end="343:29">.</operator><name pos:start="343:30" pos:end="343:37">sin_port</name></name> <operator pos:start="343:39" pos:end="343:39">=</operator> <call pos:start="343:41" pos:end="343:50"><name pos:start="343:41" pos:end="343:45">htons</name><argument_list pos:start="343:46" pos:end="343:50">(<argument pos:start="343:47" pos:end="343:49"><expr pos:start="343:47" pos:end="343:49"><literal type="number" pos:start="343:47" pos:end="343:49">517</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="345:25" pos:end="347:72"><expr pos:start="345:25" pos:end="347:71"><call pos:start="345:25" pos:end="347:71"><name pos:start="345:25" pos:end="345:30">sendto</name><argument_list pos:start="345:31" pos:end="347:71">(<argument pos:start="345:32" pos:end="345:32"><expr pos:start="345:32" pos:end="345:32"><name pos:start="345:32" pos:end="345:32">s</name></expr></argument>, <argument pos:start="345:35" pos:end="345:46"><expr pos:start="345:35" pos:end="345:46"><operator pos:start="345:35" pos:end="345:35">(</operator><name pos:start="345:36" pos:end="345:39">char</name> <operator pos:start="345:41" pos:end="345:41">*</operator><operator pos:start="345:42" pos:end="345:42">)</operator><name pos:start="345:43" pos:end="345:46">omsg</name></expr></argument>, <argument pos:start="345:49" pos:end="345:61"><expr pos:start="345:49" pos:end="345:61"><sizeof pos:start="345:49" pos:end="345:61">sizeof<argument_list pos:start="345:55" pos:end="345:61">(<argument pos:start="345:56" pos:end="345:60"><expr pos:start="345:56" pos:end="345:60"><operator pos:start="345:56" pos:end="345:56">*</operator><name pos:start="345:57" pos:end="345:60">omsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="345:64" pos:end="345:64"><expr pos:start="345:64" pos:end="345:64"><literal type="number" pos:start="345:64" pos:end="345:64">0</literal></expr></argument>,

				<argument pos:start="347:33" pos:end="347:56"><expr pos:start="347:33" pos:end="347:56"><operator pos:start="347:33" pos:end="347:33">(</operator>struct <name pos:start="347:41" pos:end="347:48">sockaddr</name> <operator pos:start="347:50" pos:end="347:50">*</operator><operator pos:start="347:51" pos:end="347:51">)</operator><operator pos:start="347:52" pos:end="347:52">&amp;</operator><name pos:start="347:53" pos:end="347:56">addr</name></expr></argument>, <argument pos:start="347:59" pos:end="347:70"><expr pos:start="347:59" pos:end="347:70"><sizeof pos:start="347:59" pos:end="347:70">sizeof<argument_list pos:start="347:65" pos:end="347:70">(<argument pos:start="347:66" pos:end="347:69"><expr pos:start="347:66" pos:end="347:69"><name pos:start="347:66" pos:end="347:69">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="349:25" pos:end="349:51"><expr pos:start="349:25" pos:end="349:50"><name pos:start="349:25" pos:end="349:37"><name pos:start="349:25" pos:end="349:28">addr</name><operator pos:start="349:29" pos:end="349:29">.</operator><name pos:start="349:30" pos:end="349:37">sin_port</name></name> <operator pos:start="349:39" pos:end="349:39">=</operator> <call pos:start="349:41" pos:end="349:50"><name pos:start="349:41" pos:end="349:45">htons</name><argument_list pos:start="349:46" pos:end="349:50">(<argument pos:start="349:47" pos:end="349:49"><expr pos:start="349:47" pos:end="349:49"><literal type="number" pos:start="349:47" pos:end="349:49">518</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="351:25" pos:end="353:72"><expr pos:start="351:25" pos:end="353:71"><call pos:start="351:25" pos:end="353:71"><name pos:start="351:25" pos:end="351:30">sendto</name><argument_list pos:start="351:31" pos:end="353:71">(<argument pos:start="351:32" pos:end="351:32"><expr pos:start="351:32" pos:end="351:32"><name pos:start="351:32" pos:end="351:32">s</name></expr></argument>, <argument pos:start="351:35" pos:end="351:46"><expr pos:start="351:35" pos:end="351:46"><operator pos:start="351:35" pos:end="351:35">(</operator><name pos:start="351:36" pos:end="351:39">char</name> <operator pos:start="351:41" pos:end="351:41">*</operator><operator pos:start="351:42" pos:end="351:42">)</operator><name pos:start="351:43" pos:end="351:46">nmsg</name></expr></argument>, <argument pos:start="351:49" pos:end="351:61"><expr pos:start="351:49" pos:end="351:61"><sizeof pos:start="351:49" pos:end="351:61">sizeof<argument_list pos:start="351:55" pos:end="351:61">(<argument pos:start="351:56" pos:end="351:60"><expr pos:start="351:56" pos:end="351:60"><operator pos:start="351:56" pos:end="351:56">*</operator><name pos:start="351:57" pos:end="351:60">nmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="351:64" pos:end="351:64"><expr pos:start="351:64" pos:end="351:64"><literal type="number" pos:start="351:64" pos:end="351:64">0</literal></expr></argument>,

				<argument pos:start="353:33" pos:end="353:56"><expr pos:start="353:33" pos:end="353:56"><operator pos:start="353:33" pos:end="353:33">(</operator>struct <name pos:start="353:41" pos:end="353:48">sockaddr</name> <operator pos:start="353:50" pos:end="353:50">*</operator><operator pos:start="353:51" pos:end="353:51">)</operator><operator pos:start="353:52" pos:end="353:52">&amp;</operator><name pos:start="353:53" pos:end="353:56">addr</name></expr></argument>, <argument pos:start="353:59" pos:end="353:70"><expr pos:start="353:59" pos:end="353:70"><sizeof pos:start="353:59" pos:end="353:70">sizeof<argument_list pos:start="353:65" pos:end="353:70">(<argument pos:start="353:66" pos:end="353:69"><expr pos:start="353:66" pos:end="353:69"><name pos:start="353:66" pos:end="353:69">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="355:25" pos:end="355:39"><expr pos:start="355:25" pos:end="355:38"><call pos:start="355:25" pos:end="355:38"><name pos:start="355:25" pos:end="355:35">closesocket</name><argument_list pos:start="355:36" pos:end="355:38">(<argument pos:start="355:37" pos:end="355:37"><expr pos:start="355:37" pos:end="355:37"><name pos:start="355:37" pos:end="355:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			<expr_stmt pos:start="359:25" pos:end="359:69"><expr pos:start="359:25" pos:end="359:68"><call pos:start="359:25" pos:end="359:46"><name pos:start="359:25" pos:end="359:30">OTOSIN</name><argument_list pos:start="359:31" pos:end="359:46">(<argument pos:start="359:32" pos:end="359:35"><expr pos:start="359:32" pos:end="359:35"><name pos:start="359:32" pos:end="359:35">omsg</name></expr></argument>, <argument pos:start="359:38" pos:end="359:45"><expr pos:start="359:38" pos:end="359:45"><name pos:start="359:38" pos:end="359:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="359:47" pos:end="359:48">-&gt;</operator><name pos:start="359:49" pos:end="359:56">sin_port</name> <operator pos:start="359:58" pos:end="359:58">=</operator> <name pos:start="359:60" pos:end="359:68">temp_port</name></expr>;</expr_stmt>

			<expr_stmt pos:start="361:25" pos:end="361:69"><expr pos:start="361:25" pos:end="361:68"><call pos:start="361:25" pos:end="361:46"><name pos:start="361:25" pos:end="361:30">OTOSIN</name><argument_list pos:start="361:31" pos:end="361:46">(<argument pos:start="361:32" pos:end="361:35"><expr pos:start="361:32" pos:end="361:35"><name pos:start="361:32" pos:end="361:35">nmsg</name></expr></argument>, <argument pos:start="361:38" pos:end="361:45"><expr pos:start="361:38" pos:end="361:45"><name pos:start="361:38" pos:end="361:45">ctl_addr</name></expr></argument>)</argument_list></call><operator pos:start="361:47" pos:end="361:48">-&gt;</operator><name pos:start="361:49" pos:end="361:56">sin_port</name> <operator pos:start="361:58" pos:end="361:58">=</operator> <name pos:start="361:60" pos:end="361:68">temp_port</name></expr>;</expr_stmt>



			<comment type="block" pos:start="365:25" pos:end="365:48">/* delete table entry */</comment>

			<if_stmt pos:start="367:25" pos:end="399:25"><if pos:start="367:25" pos:end="375:25">if <condition pos:start="367:28" pos:end="367:50">(<expr pos:start="367:29" pos:end="367:49"><name pos:start="367:29" pos:end="367:30">so</name> <operator pos:start="367:32" pos:end="367:33">==</operator> <name pos:start="367:35" pos:end="367:49"><name pos:start="367:35" pos:end="367:41">req_tbl</name><operator pos:start="367:42" pos:end="367:43">-&gt;</operator><name pos:start="367:44" pos:end="367:49">udp_so</name></name></expr>)</condition> <block pos:start="367:52" pos:end="375:25">{<block_content pos:start="369:33" pos:end="373:47">

				<expr_stmt pos:start="369:33" pos:end="369:51"><expr pos:start="369:33" pos:end="369:50"><name pos:start="369:33" pos:end="369:40">temp_req</name> <operator pos:start="369:42" pos:end="369:42">=</operator> <name pos:start="369:44" pos:end="369:50">req_tbl</name></expr>;</expr_stmt>

				<expr_stmt pos:start="371:33" pos:end="371:56"><expr pos:start="371:33" pos:end="371:55"><name pos:start="371:33" pos:end="371:39">req_tbl</name> <operator pos:start="371:41" pos:end="371:41">=</operator> <name pos:start="371:43" pos:end="371:55"><name pos:start="371:43" pos:end="371:49">req_tbl</name><operator pos:start="371:50" pos:end="371:51">-&gt;</operator><name pos:start="371:52" pos:end="371:55">next</name></name></expr>;</expr_stmt>

				<expr_stmt pos:start="373:33" pos:end="373:47"><expr pos:start="373:33" pos:end="373:46"><call pos:start="373:33" pos:end="373:46"><name pos:start="373:33" pos:end="373:36">free</name><argument_list pos:start="373:37" pos:end="373:46">(<argument pos:start="373:38" pos:end="373:45"><expr pos:start="373:38" pos:end="373:45"><name pos:start="373:38" pos:end="373:45">temp_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block></if> <else pos:start="375:27" pos:end="399:25">else <block pos:start="375:32" pos:end="399:25">{<block_content pos:start="377:33" pos:end="397:33">

				<expr_stmt pos:start="377:33" pos:end="377:51"><expr pos:start="377:33" pos:end="377:50"><name pos:start="377:33" pos:end="377:40">temp_req</name> <operator pos:start="377:42" pos:end="377:42">=</operator> <name pos:start="377:44" pos:end="377:50">req_tbl</name></expr>;</expr_stmt>

				<for pos:start="379:33" pos:end="397:33">for<control pos:start="379:36" pos:end="379:77">(<init pos:start="379:37" pos:end="379:56"><expr pos:start="379:37" pos:end="379:55"><name pos:start="379:37" pos:end="379:39">req</name> <operator pos:start="379:41" pos:end="379:41">=</operator> <name pos:start="379:43" pos:end="379:55"><name pos:start="379:43" pos:end="379:49">req_tbl</name><operator pos:start="379:50" pos:end="379:51">-&gt;</operator><name pos:start="379:52" pos:end="379:55">next</name></name></expr>;</init> <condition pos:start="379:58" pos:end="379:61"><expr pos:start="379:58" pos:end="379:60"><name pos:start="379:58" pos:end="379:60">req</name></expr>;</condition> <incr pos:start="379:63" pos:end="379:76"><expr pos:start="379:63" pos:end="379:76"><name pos:start="379:63" pos:end="379:65">req</name> <operator pos:start="379:67" pos:end="379:67">=</operator> <name pos:start="379:69" pos:end="379:76">req_next</name></expr></incr>)</control> <block pos:start="379:79" pos:end="397:33">{<block_content pos:start="381:41" pos:end="395:41">

					<expr_stmt pos:start="381:41" pos:end="381:61"><expr pos:start="381:41" pos:end="381:60"><name pos:start="381:41" pos:end="381:48">req_next</name> <operator pos:start="381:50" pos:end="381:50">=</operator> <name pos:start="381:52" pos:end="381:60"><name pos:start="381:52" pos:end="381:54">req</name><operator pos:start="381:55" pos:end="381:56">-&gt;</operator><name pos:start="381:57" pos:end="381:60">next</name></name></expr>;</expr_stmt>

					<if_stmt pos:start="383:41" pos:end="395:41"><if pos:start="383:41" pos:end="391:41">if <condition pos:start="383:44" pos:end="383:62">(<expr pos:start="383:45" pos:end="383:61"><name pos:start="383:45" pos:end="383:46">so</name> <operator pos:start="383:48" pos:end="383:49">==</operator> <name pos:start="383:51" pos:end="383:61"><name pos:start="383:51" pos:end="383:53">req</name><operator pos:start="383:54" pos:end="383:55">-&gt;</operator><name pos:start="383:56" pos:end="383:61">udp_so</name></name></expr>)</condition> <block pos:start="383:64" pos:end="391:41">{<block_content pos:start="385:49" pos:end="389:54">

						<expr_stmt pos:start="385:49" pos:end="385:74"><expr pos:start="385:49" pos:end="385:73"><name pos:start="385:49" pos:end="385:62"><name pos:start="385:49" pos:end="385:56">temp_req</name><operator pos:start="385:57" pos:end="385:58">-&gt;</operator><name pos:start="385:59" pos:end="385:62">next</name></name> <operator pos:start="385:64" pos:end="385:64">=</operator> <name pos:start="385:66" pos:end="385:73">req_next</name></expr>;</expr_stmt>

						<expr_stmt pos:start="387:49" pos:end="387:58"><expr pos:start="387:49" pos:end="387:57"><call pos:start="387:49" pos:end="387:57"><name pos:start="387:49" pos:end="387:52">free</name><argument_list pos:start="387:53" pos:end="387:57">(<argument pos:start="387:54" pos:end="387:56"><expr pos:start="387:54" pos:end="387:56"><name pos:start="387:54" pos:end="387:56">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<break pos:start="389:49" pos:end="389:54">break;</break>

					</block_content>}</block></if> <else pos:start="391:43" pos:end="395:41">else <block pos:start="391:48" pos:end="395:41">{<block_content pos:start="393:49" pos:end="393:63">

						<expr_stmt pos:start="393:49" pos:end="393:63"><expr pos:start="393:49" pos:end="393:62"><name pos:start="393:49" pos:end="393:56">temp_req</name> <operator pos:start="393:58" pos:end="393:58">=</operator> <name pos:start="393:60" pos:end="393:62">req</name></expr>;</expr_stmt>

					</block_content>}</block></else></if_stmt>

				</block_content>}</block></for>

			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if></if_stmt>



		<return pos:start="405:17" pos:end="408:0">return;</return>

<cpp:endif pos:start="407:1" pos:end="407:6">#<cpp:directive pos:start="407:2" pos:end="407:6">endif</cpp:directive></cpp:endif>



	<case pos:start="411:9" pos:end="411:25">case <expr pos:start="411:14" pos:end="411:24"><name pos:start="411:14" pos:end="411:24">EMU_CUSEEME</name></expr>:</case>



		<comment type="block" pos:start="415:17" pos:end="425:19">/*

		 * Cu-SeeMe emulation.

		 * Hopefully the packet is more that 16 bytes long. We don't

		 * do any other tests, just replace the address and port

		 * fields.

		 */</comment>

		<if_stmt pos:start="427:17" pos:end="439:17"><if pos:start="427:17" pos:end="439:17">if <condition pos:start="427:20" pos:end="427:50">(<expr pos:start="427:21" pos:end="427:49"><name pos:start="427:21" pos:end="427:28"><name pos:start="427:21" pos:end="427:21">m</name><operator pos:start="427:22" pos:end="427:23">-&gt;</operator><name pos:start="427:24" pos:end="427:28">m_len</name></name> <operator pos:start="427:30" pos:end="427:31">&gt;=</operator> <sizeof pos:start="427:33" pos:end="427:49">sizeof <argument_list pos:start="427:40" pos:end="427:49">(<argument pos:start="427:41" pos:end="427:48"><expr pos:start="427:41" pos:end="427:48"><operator pos:start="427:41" pos:end="427:41">*</operator><name pos:start="427:42" pos:end="427:48">cu_head</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="427:52" pos:end="439:17">{<block_content pos:start="429:25" pos:end="437:59">

			<if_stmt pos:start="429:25" pos:end="431:39"><if pos:start="429:25" pos:end="431:39">if <condition pos:start="429:28" pos:end="429:87">(<expr pos:start="429:29" pos:end="429:86"><call pos:start="429:29" pos:end="429:82"><name pos:start="429:29" pos:end="429:39">getsockname</name><argument_list pos:start="429:40" pos:end="429:82">(<argument pos:start="429:41" pos:end="429:45"><expr pos:start="429:41" pos:end="429:45"><name pos:start="429:41" pos:end="429:45"><name pos:start="429:41" pos:end="429:42">so</name><operator pos:start="429:43" pos:end="429:44">-&gt;</operator><name pos:start="429:45" pos:end="429:45">s</name></name></expr></argument>, <argument pos:start="429:48" pos:end="429:71"><expr pos:start="429:48" pos:end="429:71"><operator pos:start="429:48" pos:end="429:48">(</operator>struct <name pos:start="429:56" pos:end="429:63">sockaddr</name> <operator pos:start="429:65" pos:end="429:65">*</operator><operator pos:start="429:66" pos:end="429:66">)</operator><operator pos:start="429:67" pos:end="429:67">&amp;</operator><name pos:start="429:68" pos:end="429:71">addr</name></expr></argument>, <argument pos:start="429:74" pos:end="429:81"><expr pos:start="429:74" pos:end="429:81"><operator pos:start="429:74" pos:end="429:74">&amp;</operator><name pos:start="429:75" pos:end="429:81">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="429:84" pos:end="429:84">&lt;</operator> <literal type="number" pos:start="429:86" pos:end="429:86">0</literal></expr>)</condition><block type="pseudo" pos:start="431:33" pos:end="431:39"><block_content pos:start="431:33" pos:end="431:39">

				<return pos:start="431:33" pos:end="431:39">return;</return></block_content></block></if></if_stmt>

			<expr_stmt pos:start="433:25" pos:end="433:62"><expr pos:start="433:25" pos:end="433:61"><name pos:start="433:25" pos:end="433:31">cu_head</name> <operator pos:start="433:33" pos:end="433:33">=</operator> <call pos:start="433:35" pos:end="433:61"><name pos:start="433:35" pos:end="433:38">mtod</name><argument_list pos:start="433:39" pos:end="433:61">(<argument pos:start="433:40" pos:end="433:40"><expr pos:start="433:40" pos:end="433:40"><name pos:start="433:40" pos:end="433:40">m</name></expr></argument>, <argument pos:start="433:43" pos:end="433:60"><expr pos:start="433:43" pos:end="433:60">struct <name pos:start="433:50" pos:end="433:58">cu_header</name> <operator pos:start="433:60" pos:end="433:60">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="435:25" pos:end="435:56"><expr pos:start="435:25" pos:end="435:55"><name pos:start="435:25" pos:end="435:39"><name pos:start="435:25" pos:end="435:31">cu_head</name><operator pos:start="435:32" pos:end="435:33">-&gt;</operator><name pos:start="435:34" pos:end="435:39">s_port</name></name> <operator pos:start="435:41" pos:end="435:41">=</operator> <name pos:start="435:43" pos:end="435:55"><name pos:start="435:43" pos:end="435:46">addr</name><operator pos:start="435:47" pos:end="435:47">.</operator><name pos:start="435:48" pos:end="435:55">sin_port</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="437:25" pos:end="437:59"><expr pos:start="437:25" pos:end="437:58"><name pos:start="437:25" pos:end="437:40"><name pos:start="437:25" pos:end="437:31">cu_head</name><operator pos:start="437:32" pos:end="437:33">-&gt;</operator><name pos:start="437:34" pos:end="437:40">so_addr</name></name> <operator pos:start="437:42" pos:end="437:42">=</operator> <name pos:start="437:44" pos:end="437:58"><name pos:start="437:44" pos:end="437:51">our_addr</name><operator pos:start="437:52" pos:end="437:52">.</operator><name pos:start="437:53" pos:end="437:58">s_addr</name></name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>



		<return pos:start="443:17" pos:end="443:23">return;</return>

	</block_content>}</block></switch>

</block_content>}</block>
</unit>
