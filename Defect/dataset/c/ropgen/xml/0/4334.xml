<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4334.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">tcg_global_mem_new_internal</name><parameter_list pos:start="1:32" pos:end="3:66">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:39">TCGType</name></type> <name pos:start="1:41" pos:end="1:44">type</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">TCGv_ptr</name></type> <name pos:start="1:56" pos:end="1:59">base</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:47"><decl pos:start="3:33" pos:end="3:47"><type pos:start="3:33" pos:end="3:47"><name pos:start="3:33" pos:end="3:40">intptr_t</name></type> <name pos:start="3:42" pos:end="3:47">offset</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:65"><decl pos:start="3:50" pos:end="3:65"><type pos:start="3:50" pos:end="3:65"><specifier pos:start="3:50" pos:end="3:54">const</specifier> <name pos:start="3:56" pos:end="3:59">char</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:65">name</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:15">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">TCGContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:28">= <expr pos:start="7:21" pos:end="7:28"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:28">tcg_ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">TCGTemp</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">ts</name></decl>, <decl pos:start="9:18" pos:end="9:57"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">base_ts</name> <init pos:start="9:27" pos:end="9:57">= <expr pos:start="9:29" pos:end="9:57"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:57"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:37">temps</name><index pos:start="9:38" pos:end="9:57">[<expr pos:start="9:39" pos:end="9:56"><call pos:start="9:39" pos:end="9:56"><name pos:start="9:39" pos:end="9:50">GET_TCGV_PTR</name><argument_list pos:start="9:51" pos:end="9:56">(<argument pos:start="9:52" pos:end="9:55"><expr pos:start="9:52" pos:end="9:55"><name pos:start="9:52" pos:end="9:55">base</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">idx</name></decl>, <decl pos:start="11:14" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:16">reg</name> <init pos:start="11:18" pos:end="11:31">= <expr pos:start="11:20" pos:end="11:31"><name pos:start="11:20" pos:end="11:31"><name pos:start="11:20" pos:end="11:26">base_ts</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:31">reg</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:7">idx</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <name pos:start="15:11" pos:end="15:23"><name pos:start="15:11" pos:end="15:11">s</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:23">nb_globals</name></name></expr>;</expr_stmt>

<cpp:if pos:start="17:1" pos:end="17:29">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:23">TCG_TARGET_REG_BITS</name> <operator pos:start="17:25" pos:end="17:26">==</operator> <literal type="number" pos:start="17:28" pos:end="17:29">32</literal></expr></cpp:if>

    <if_stmt pos:start="19:5" pos:end="113:5"><if pos:start="19:5" pos:end="87:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:12">type</name> <operator pos:start="19:14" pos:end="19:15">==</operator> <name pos:start="19:17" pos:end="19:28">TCG_TYPE_I64</name></expr>)</condition> <block pos:start="19:31" pos:end="87:5">{<block_content pos:start="21:9" pos:end="85:27">

        <decl_stmt pos:start="21:9" pos:end="21:21"><decl pos:start="21:9" pos:end="21:20"><type pos:start="21:9" pos:end="21:12"><name pos:start="21:9" pos:end="21:12">char</name></type> <name pos:start="21:14" pos:end="21:20"><name pos:start="21:14" pos:end="21:16">buf</name><index pos:start="21:17" pos:end="21:20">[<expr pos:start="21:18" pos:end="21:19"><literal type="number" pos:start="21:18" pos:end="21:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:45"><expr pos:start="23:9" pos:end="23:44"><call pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:22">tcg_temp_alloc</name><argument_list pos:start="23:23" pos:end="23:44">(<argument pos:start="23:24" pos:end="23:24"><expr pos:start="23:24" pos:end="23:24"><name pos:start="23:24" pos:end="23:24">s</name></expr></argument>, <argument pos:start="23:27" pos:end="23:43"><expr pos:start="23:27" pos:end="23:43"><name pos:start="23:27" pos:end="23:39"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:39">nb_globals</name></name> <operator pos:start="23:41" pos:end="23:41">+</operator> <literal type="number" pos:start="23:43" pos:end="23:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:10">ts</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">&amp;</operator><name pos:start="25:15" pos:end="25:37"><name pos:start="25:15" pos:end="25:15">s</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:22">temps</name><index pos:start="25:23" pos:end="25:37">[<expr pos:start="25:24" pos:end="25:36"><name pos:start="25:24" pos:end="25:36"><name pos:start="25:24" pos:end="25:24">s</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:36">nb_globals</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:10">ts</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:21">base_type</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:28">type</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:10">ts</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:16">type</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <name pos:start="29:20" pos:end="29:31">TCG_TYPE_I32</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:26"><expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:10">ts</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:21">fixed_reg</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <literal type="number" pos:start="31:25" pos:end="31:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:10">ts</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:25">mem_allocated</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <literal type="number" pos:start="33:29" pos:end="33:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="38:0"><expr pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:10">ts</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:19">mem_reg</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:25">reg</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:27">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="39:9" pos:end="42:0"><expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:10">ts</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:22">mem_offset</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:31">offset</name> <operator pos:start="39:33" pos:end="39:33">+</operator> <literal type="number" pos:start="39:35" pos:end="39:35">4</literal></expr>;</expr_stmt>

<cpp:else pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:10">ts</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:22">mem_offset</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:31">offset</name></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><call pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:15">pstrcpy</name><argument_list pos:start="47:16" pos:end="47:39">(<argument pos:start="47:17" pos:end="47:19"><expr pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">buf</name></expr></argument>, <argument pos:start="47:22" pos:end="47:32"><expr pos:start="47:22" pos:end="47:32"><sizeof pos:start="47:22" pos:end="47:32">sizeof<argument_list pos:start="47:28" pos:end="47:32">(<argument pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:31">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:35" pos:end="47:38"><expr pos:start="47:35" pos:end="47:38"><name pos:start="47:35" pos:end="47:38">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:15">pstrcat</name><argument_list pos:start="49:16" pos:end="49:39">(<argument pos:start="49:17" pos:end="49:19"><expr pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">buf</name></expr></argument>, <argument pos:start="49:22" pos:end="49:32"><expr pos:start="49:22" pos:end="49:32"><sizeof pos:start="49:22" pos:end="49:32">sizeof<argument_list pos:start="49:28" pos:end="49:32">(<argument pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:31">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:35" pos:end="49:38"><expr pos:start="49:35" pos:end="49:38"><literal type="string" pos:start="49:35" pos:end="49:38">"_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:31"><expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:10">ts</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:16">name</name></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:30"><name pos:start="51:20" pos:end="51:25">strdup</name><argument_list pos:start="51:26" pos:end="51:30">(<argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:13"><expr pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:10">ts</name><operator pos:start="53:11" pos:end="53:12">++</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:10">ts</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:21">base_type</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:28">type</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:10">ts</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:16">type</name></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:31">TCG_TYPE_I32</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:26"><expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:10">ts</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:21">fixed_reg</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <literal type="number" pos:start="61:25" pos:end="61:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:30"><expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:10">ts</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:25">mem_allocated</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <literal type="number" pos:start="63:29" pos:end="63:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="68:0"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:10">ts</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:19">mem_reg</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:25">reg</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="67:1" pos:end="67:27">#<cpp:directive pos:start="67:2" pos:end="67:6">ifdef</cpp:directive> <name pos:start="67:8" pos:end="67:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:10">ts</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:22">mem_offset</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:31">offset</name></expr>;</expr_stmt>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="73:9" pos:end="76:0"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:10">ts</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:22">mem_offset</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:31">offset</name> <operator pos:start="73:33" pos:end="73:33">+</operator> <literal type="number" pos:start="73:35" pos:end="73:35">4</literal></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><call pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:15">pstrcpy</name><argument_list pos:start="77:16" pos:end="77:39">(<argument pos:start="77:17" pos:end="77:19"><expr pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">buf</name></expr></argument>, <argument pos:start="77:22" pos:end="77:32"><expr pos:start="77:22" pos:end="77:32"><sizeof pos:start="77:22" pos:end="77:32">sizeof<argument_list pos:start="77:28" pos:end="77:32">(<argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:40"><expr pos:start="79:9" pos:end="79:39"><call pos:start="79:9" pos:end="79:39"><name pos:start="79:9" pos:end="79:15">pstrcat</name><argument_list pos:start="79:16" pos:end="79:39">(<argument pos:start="79:17" pos:end="79:19"><expr pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">buf</name></expr></argument>, <argument pos:start="79:22" pos:end="79:32"><expr pos:start="79:22" pos:end="79:32"><sizeof pos:start="79:22" pos:end="79:32">sizeof<argument_list pos:start="79:28" pos:end="79:32">(<argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><literal type="string" pos:start="79:35" pos:end="79:38">"_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:10">ts</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:16">name</name></name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:30"><name pos:start="81:20" pos:end="81:25">strdup</name><argument_list pos:start="81:26" pos:end="81:30">(<argument pos:start="81:27" pos:end="81:29"><expr pos:start="81:27" pos:end="81:29"><name pos:start="81:27" pos:end="81:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:21">nb_globals</name></name> <operator pos:start="85:23" pos:end="85:24">+=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="113:5">else

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

    <block pos:start="91:5" pos:end="113:5">{<block_content pos:start="93:9" pos:end="111:24">

        <expr_stmt pos:start="93:9" pos:end="93:45"><expr pos:start="93:9" pos:end="93:44"><call pos:start="93:9" pos:end="93:44"><name pos:start="93:9" pos:end="93:22">tcg_temp_alloc</name><argument_list pos:start="93:23" pos:end="93:44">(<argument pos:start="93:24" pos:end="93:24"><expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">s</name></expr></argument>, <argument pos:start="93:27" pos:end="93:43"><expr pos:start="93:27" pos:end="93:43"><name pos:start="93:27" pos:end="93:39"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:39">nb_globals</name></name> <operator pos:start="93:41" pos:end="93:41">+</operator> <literal type="number" pos:start="93:43" pos:end="93:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:38"><expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:10">ts</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <operator pos:start="95:14" pos:end="95:14">&amp;</operator><name pos:start="95:15" pos:end="95:37"><name pos:start="95:15" pos:end="95:15">s</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:22">temps</name><index pos:start="95:23" pos:end="95:37">[<expr pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:24">s</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:36">nb_globals</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:10">ts</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:21">base_type</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:28">type</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:10">ts</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:16">type</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:23">type</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:26"><expr pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:10">ts</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:21">fixed_reg</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <literal type="number" pos:start="101:25" pos:end="101:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:10">ts</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:25">mem_allocated</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <literal type="number" pos:start="103:29" pos:end="103:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:26"><expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:10">ts</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:19">mem_reg</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:25">reg</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:10">ts</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:22">mem_offset</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:31">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:24"><expr pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:10">ts</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:16">name</name></name> <operator pos:start="109:18" pos:end="109:18">=</operator> <name pos:start="109:20" pos:end="109:23">name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:24"><expr pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:21">nb_globals</name></name><operator pos:start="111:22" pos:end="111:23">++</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="115:5" pos:end="115:15">return <expr pos:start="115:12" pos:end="115:14"><name pos:start="115:12" pos:end="115:14">idx</name></expr>;</return>

</block_content>}</block></function>
</unit>
