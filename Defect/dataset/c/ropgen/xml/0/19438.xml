<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19438.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:12"><specifier pos:start="1:1" pos:end="1:5">const</specifier> <name pos:start="1:7" pos:end="1:10">char</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:25">av_get_string</name><parameter_list pos:start="1:26" pos:end="1:102">(<parameter pos:start="1:27" pos:end="1:35"><decl pos:start="1:27" pos:end="1:35"><type pos:start="1:27" pos:end="1:35"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">obj</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:53"><decl pos:start="1:38" pos:end="1:53"><type pos:start="1:38" pos:end="1:53"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:47">char</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">name</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:77"><decl pos:start="1:56" pos:end="1:77"><type pos:start="1:56" pos:end="1:77"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:69">AVOption</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier><modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:77">o_out</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:88"><decl pos:start="1:80" pos:end="1:88"><type pos:start="1:80" pos:end="1:88"><name pos:start="1:80" pos:end="1:83">char</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier></type><name pos:start="1:86" pos:end="1:88">buf</name></decl></parameter>, <parameter pos:start="1:91" pos:end="1:101"><decl pos:start="1:91" pos:end="1:101"><type pos:start="1:91" pos:end="1:101"><name pos:start="1:91" pos:end="1:93">int</name></type> <name pos:start="1:95" pos:end="1:101">buf_len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:15">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">AVOption</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">o</name> <init pos:start="5:23" pos:end="5:58">= <expr pos:start="5:25" pos:end="5:58"><call pos:start="5:25" pos:end="5:58"><name pos:start="5:25" pos:end="5:35">av_opt_find</name><argument_list pos:start="5:36" pos:end="5:58">(<argument pos:start="5:37" pos:end="5:39"><expr pos:start="5:37" pos:end="5:39"><name pos:start="5:37" pos:end="5:39">obj</name></expr></argument>, <argument pos:start="5:42" pos:end="5:45"><expr pos:start="5:42" pos:end="5:45"><name pos:start="5:42" pos:end="5:45">name</name></expr></argument>, <argument pos:start="5:48" pos:end="5:51"><expr pos:start="5:48" pos:end="5:51"><name pos:start="5:48" pos:end="5:51">NULL</name></expr></argument>, <argument pos:start="5:54" pos:end="5:54"><expr pos:start="5:54" pos:end="5:54"><literal type="number" pos:start="5:54" pos:end="5:54">0</literal></expr></argument>, <argument pos:start="5:57" pos:end="5:57"><expr pos:start="5:57" pos:end="5:57"><literal type="number" pos:start="5:57" pos:end="5:57">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">bin</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name></decl>, <decl pos:start="11:14" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>

    <if_stmt pos:start="13:5" pos:end="15:20"><if pos:start="13:5" pos:end="15:20">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:10">o</name> <operator pos:start="13:12" pos:end="13:13">||</operator> <name pos:start="13:15" pos:end="13:23"><name pos:start="13:15" pos:end="13:15">o</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:23">offset</name></name><operator pos:start="13:24" pos:end="13:25">&lt;=</operator><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:20"><block_content pos:start="15:9" pos:end="15:20">

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="19:20"><if pos:start="17:5" pos:end="19:20">if <condition pos:start="17:8" pos:end="17:60">(<expr pos:start="17:9" pos:end="17:59"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:9">o</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:15">type</name></name> <operator pos:start="17:17" pos:end="17:18">!=</operator> <name pos:start="17:20" pos:end="17:37">FF_OPT_TYPE_STRING</name> <operator pos:start="17:39" pos:end="17:40">&amp;&amp;</operator> <operator pos:start="17:42" pos:end="17:42">(</operator><operator pos:start="17:43" pos:end="17:43">!</operator><name pos:start="17:44" pos:end="17:46">buf</name> <operator pos:start="17:48" pos:end="17:49">||</operator> <operator pos:start="17:51" pos:end="17:51">!</operator><name pos:start="17:52" pos:end="17:58">buf_len</name><operator pos:start="17:59" pos:end="17:59">)</operator></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:20"><block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:37"><expr pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:7">dst</name><operator pos:start="23:8" pos:end="23:8">=</operator> <operator pos:start="23:10" pos:end="23:10">(</operator><operator pos:start="23:11" pos:end="23:11">(</operator><name pos:start="23:12" pos:end="23:18">uint8_t</name><operator pos:start="23:19" pos:end="23:19">*</operator><operator pos:start="23:20" pos:end="23:20">)</operator><name pos:start="23:21" pos:end="23:23">obj</name><operator pos:start="23:24" pos:end="23:24">)</operator> <operator pos:start="23:26" pos:end="23:26">+</operator> <name pos:start="23:28" pos:end="23:36"><name pos:start="23:28" pos:end="23:28">o</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:36">offset</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="25:25"><if pos:start="25:5" pos:end="25:25">if <condition pos:start="25:8" pos:end="25:14">(<expr pos:start="25:9" pos:end="25:13"><name pos:start="25:9" pos:end="25:13">o_out</name></expr>)</condition><block type="pseudo" pos:start="25:16" pos:end="25:25"><block_content pos:start="25:16" pos:end="25:25"> <expr_stmt pos:start="25:16" pos:end="25:25"><expr pos:start="25:16" pos:end="25:24"><operator pos:start="25:16" pos:end="25:16">*</operator><name pos:start="25:17" pos:end="25:21">o_out</name><operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:24">o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <switch pos:start="29:5" pos:end="59:5">switch <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:13">o</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:19">type</name></name></expr>)</condition> <block pos:start="29:22" pos:end="59:5">{<block_content pos:start="31:5" pos:end="57:25">

    <case pos:start="31:5" pos:end="31:27">case <expr pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:26">FF_OPT_TYPE_FLAGS</name></expr>:</case>     <expr_stmt pos:start="31:33" pos:end="31:80"><expr pos:start="31:33" pos:end="31:79"><call pos:start="31:33" pos:end="31:79"><name pos:start="31:33" pos:end="31:40">snprintf</name><argument_list pos:start="31:41" pos:end="31:79">(<argument pos:start="31:42" pos:end="31:44"><expr pos:start="31:42" pos:end="31:44"><name pos:start="31:42" pos:end="31:44">buf</name></expr></argument>, <argument pos:start="31:47" pos:end="31:53"><expr pos:start="31:47" pos:end="31:53"><name pos:start="31:47" pos:end="31:53">buf_len</name></expr></argument>, <argument pos:start="31:56" pos:end="31:63"><expr pos:start="31:56" pos:end="31:63"><literal type="string" pos:start="31:56" pos:end="31:63">"0x%08X"</literal></expr></argument>,<argument pos:start="31:65" pos:end="31:78"><expr pos:start="31:65" pos:end="31:78"><operator pos:start="31:65" pos:end="31:65">*</operator><operator pos:start="31:66" pos:end="31:66">(</operator><name pos:start="31:67" pos:end="31:69">int</name>    <operator pos:start="31:74" pos:end="31:74">*</operator><operator pos:start="31:75" pos:end="31:75">)</operator><name pos:start="31:76" pos:end="31:78">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="31:81" pos:end="31:86">break;</break>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">FF_OPT_TYPE_INT</name></expr>:</case>       <expr_stmt pos:start="33:33" pos:end="33:78"><expr pos:start="33:33" pos:end="33:77"><call pos:start="33:33" pos:end="33:77"><name pos:start="33:33" pos:end="33:40">snprintf</name><argument_list pos:start="33:41" pos:end="33:77">(<argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><name pos:start="33:42" pos:end="33:44">buf</name></expr></argument>, <argument pos:start="33:47" pos:end="33:53"><expr pos:start="33:47" pos:end="33:53"><name pos:start="33:47" pos:end="33:53">buf_len</name></expr></argument>, <argument pos:start="33:56" pos:end="33:59"><expr pos:start="33:56" pos:end="33:59"><literal type="string" pos:start="33:56" pos:end="33:59">"%d"</literal></expr></argument> , <argument pos:start="33:63" pos:end="33:76"><expr pos:start="33:63" pos:end="33:76"><operator pos:start="33:63" pos:end="33:63">*</operator><operator pos:start="33:64" pos:end="33:64">(</operator><name pos:start="33:65" pos:end="33:67">int</name>    <operator pos:start="33:72" pos:end="33:72">*</operator><operator pos:start="33:73" pos:end="33:73">)</operator><name pos:start="33:74" pos:end="33:76">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="33:79" pos:end="33:84">break;</break>

    <case pos:start="35:5" pos:end="35:27">case <expr pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:26">FF_OPT_TYPE_INT64</name></expr>:</case>     <expr_stmt pos:start="35:33" pos:end="35:82"><expr pos:start="35:33" pos:end="35:81"><call pos:start="35:33" pos:end="35:81"><name pos:start="35:33" pos:end="35:40">snprintf</name><argument_list pos:start="35:41" pos:end="35:81">(<argument pos:start="35:42" pos:end="35:44"><expr pos:start="35:42" pos:end="35:44"><name pos:start="35:42" pos:end="35:44">buf</name></expr></argument>, <argument pos:start="35:47" pos:end="35:53"><expr pos:start="35:47" pos:end="35:53"><name pos:start="35:47" pos:end="35:53">buf_len</name></expr></argument>, <argument pos:start="35:56" pos:end="35:64"><expr pos:start="35:56" pos:end="35:64"><literal type="string" pos:start="35:56" pos:end="35:58">"%"</literal><name pos:start="35:59" pos:end="35:64">PRId64</name></expr></argument>, <argument pos:start="35:67" pos:end="35:80"><expr pos:start="35:67" pos:end="35:80"><operator pos:start="35:67" pos:end="35:67">*</operator><operator pos:start="35:68" pos:end="35:68">(</operator><name pos:start="35:69" pos:end="35:75">int64_t</name><operator pos:start="35:76" pos:end="35:76">*</operator><operator pos:start="35:77" pos:end="35:77">)</operator><name pos:start="35:78" pos:end="35:80">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="35:83" pos:end="35:88">break;</break>

    <case pos:start="37:5" pos:end="37:27">case <expr pos:start="37:10" pos:end="37:26"><name pos:start="37:10" pos:end="37:26">FF_OPT_TYPE_FLOAT</name></expr>:</case>     <expr_stmt pos:start="37:33" pos:end="37:78"><expr pos:start="37:33" pos:end="37:77"><call pos:start="37:33" pos:end="37:77"><name pos:start="37:33" pos:end="37:40">snprintf</name><argument_list pos:start="37:41" pos:end="37:77">(<argument pos:start="37:42" pos:end="37:44"><expr pos:start="37:42" pos:end="37:44"><name pos:start="37:42" pos:end="37:44">buf</name></expr></argument>, <argument pos:start="37:47" pos:end="37:53"><expr pos:start="37:47" pos:end="37:53"><name pos:start="37:47" pos:end="37:53">buf_len</name></expr></argument>, <argument pos:start="37:56" pos:end="37:59"><expr pos:start="37:56" pos:end="37:59"><literal type="string" pos:start="37:56" pos:end="37:59">"%f"</literal></expr></argument> , <argument pos:start="37:63" pos:end="37:76"><expr pos:start="37:63" pos:end="37:76"><operator pos:start="37:63" pos:end="37:63">*</operator><operator pos:start="37:64" pos:end="37:64">(</operator><name pos:start="37:65" pos:end="37:69">float</name>  <operator pos:start="37:72" pos:end="37:72">*</operator><operator pos:start="37:73" pos:end="37:73">)</operator><name pos:start="37:74" pos:end="37:76">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="37:79" pos:end="37:84">break;</break>

    <case pos:start="39:5" pos:end="39:28">case <expr pos:start="39:10" pos:end="39:27"><name pos:start="39:10" pos:end="39:27">FF_OPT_TYPE_DOUBLE</name></expr>:</case>    <expr_stmt pos:start="39:33" pos:end="39:78"><expr pos:start="39:33" pos:end="39:77"><call pos:start="39:33" pos:end="39:77"><name pos:start="39:33" pos:end="39:40">snprintf</name><argument_list pos:start="39:41" pos:end="39:77">(<argument pos:start="39:42" pos:end="39:44"><expr pos:start="39:42" pos:end="39:44"><name pos:start="39:42" pos:end="39:44">buf</name></expr></argument>, <argument pos:start="39:47" pos:end="39:53"><expr pos:start="39:47" pos:end="39:53"><name pos:start="39:47" pos:end="39:53">buf_len</name></expr></argument>, <argument pos:start="39:56" pos:end="39:59"><expr pos:start="39:56" pos:end="39:59"><literal type="string" pos:start="39:56" pos:end="39:59">"%f"</literal></expr></argument> , <argument pos:start="39:63" pos:end="39:76"><expr pos:start="39:63" pos:end="39:76"><operator pos:start="39:63" pos:end="39:63">*</operator><operator pos:start="39:64" pos:end="39:64">(</operator><name pos:start="39:65" pos:end="39:70">double</name> <operator pos:start="39:72" pos:end="39:72">*</operator><operator pos:start="39:73" pos:end="39:73">)</operator><name pos:start="39:74" pos:end="39:76">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="39:79" pos:end="39:84">break;</break>

    <case pos:start="41:5" pos:end="41:30">case <expr pos:start="41:10" pos:end="41:29"><name pos:start="41:10" pos:end="41:29">FF_OPT_TYPE_RATIONAL</name></expr>:</case>  <expr_stmt pos:start="41:33" pos:end="41:114"><expr pos:start="41:33" pos:end="41:113"><call pos:start="41:33" pos:end="41:113"><name pos:start="41:33" pos:end="41:40">snprintf</name><argument_list pos:start="41:41" pos:end="41:113">(<argument pos:start="41:42" pos:end="41:44"><expr pos:start="41:42" pos:end="41:44"><name pos:start="41:42" pos:end="41:44">buf</name></expr></argument>, <argument pos:start="41:47" pos:end="41:53"><expr pos:start="41:47" pos:end="41:53"><name pos:start="41:47" pos:end="41:53">buf_len</name></expr></argument>, <argument pos:start="41:56" pos:end="41:62"><expr pos:start="41:56" pos:end="41:62"><literal type="string" pos:start="41:56" pos:end="41:62">"%d/%d"</literal></expr></argument>, <argument pos:start="41:65" pos:end="41:87"><expr pos:start="41:65" pos:end="41:87"><operator pos:start="41:65" pos:end="41:65">(</operator><operator pos:start="41:66" pos:end="41:66">(</operator><name pos:start="41:67" pos:end="41:76">AVRational</name><operator pos:start="41:77" pos:end="41:77">*</operator><operator pos:start="41:78" pos:end="41:78">)</operator><name pos:start="41:79" pos:end="41:81">dst</name><operator pos:start="41:82" pos:end="41:82">)</operator><operator pos:start="41:83" pos:end="41:84">-&gt;</operator><name pos:start="41:85" pos:end="41:87">num</name></expr></argument>, <argument pos:start="41:90" pos:end="41:112"><expr pos:start="41:90" pos:end="41:112"><operator pos:start="41:90" pos:end="41:90">(</operator><operator pos:start="41:91" pos:end="41:91">(</operator><name pos:start="41:92" pos:end="41:101">AVRational</name><operator pos:start="41:102" pos:end="41:102">*</operator><operator pos:start="41:103" pos:end="41:103">)</operator><name pos:start="41:104" pos:end="41:106">dst</name><operator pos:start="41:107" pos:end="41:107">)</operator><operator pos:start="41:108" pos:end="41:109">-&gt;</operator><name pos:start="41:110" pos:end="41:112">den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break pos:start="41:115" pos:end="41:120">break;</break>

    <case pos:start="43:5" pos:end="43:28">case <expr pos:start="43:10" pos:end="43:27"><name pos:start="43:10" pos:end="43:27">FF_OPT_TYPE_STRING</name></expr>:</case>    <return pos:start="43:33" pos:end="43:52">return <expr pos:start="43:40" pos:end="43:51"><operator pos:start="43:40" pos:end="43:40">*</operator><operator pos:start="43:41" pos:end="43:41">(</operator><name pos:start="43:42" pos:end="43:45">void</name><operator pos:start="43:46" pos:end="43:46">*</operator><operator pos:start="43:47" pos:end="43:47">*</operator><operator pos:start="43:48" pos:end="43:48">)</operator><name pos:start="43:49" pos:end="43:51">dst</name></expr>;</return>

    <case pos:start="45:5" pos:end="45:28">case <expr pos:start="45:10" pos:end="45:27"><name pos:start="45:10" pos:end="45:27">FF_OPT_TYPE_BINARY</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:60"><expr pos:start="47:9" pos:end="47:59"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <operator pos:start="47:15" pos:end="47:15">*</operator><operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:19">int</name><operator pos:start="47:20" pos:end="47:20">*</operator><operator pos:start="47:21" pos:end="47:21">)</operator><operator pos:start="47:22" pos:end="47:22">(</operator><operator pos:start="47:23" pos:end="47:23">(</operator><operator pos:start="47:24" pos:end="47:24">(</operator><name pos:start="47:25" pos:end="47:31">uint8_t</name> <operator pos:start="47:33" pos:end="47:33">*</operator><operator pos:start="47:34" pos:end="47:34">)</operator><name pos:start="47:35" pos:end="47:37">dst</name><operator pos:start="47:38" pos:end="47:38">)</operator> <operator pos:start="47:40" pos:end="47:40">+</operator> <sizeof pos:start="47:42" pos:end="47:58">sizeof<argument_list pos:start="47:48" pos:end="47:58">(<argument pos:start="47:49" pos:end="47:57"><expr pos:start="47:49" pos:end="47:57"><name pos:start="47:49" pos:end="47:55">uint8_t</name> <operator pos:start="47:57" pos:end="47:57">*</operator></expr></argument>)</argument_list></sizeof><operator pos:start="47:59" pos:end="47:59">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="49:48"><if pos:start="49:9" pos:end="49:48">if <condition pos:start="49:12" pos:end="49:35">(<expr pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:15">len</name> <operator pos:start="49:17" pos:end="49:18">&gt;=</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><name pos:start="49:21" pos:end="49:27">buf_len</name> <operator pos:start="49:29" pos:end="49:29">+</operator> <literal type="number" pos:start="49:31" pos:end="49:31">1</literal><operator pos:start="49:32" pos:end="49:32">)</operator><operator pos:start="49:33" pos:end="49:33">/</operator><literal type="number" pos:start="49:34" pos:end="49:34">2</literal></expr>)</condition><block type="pseudo" pos:start="49:37" pos:end="49:48"><block_content pos:start="49:37" pos:end="49:48"> <return pos:start="49:37" pos:end="49:48">return <expr pos:start="49:44" pos:end="49:47"><name pos:start="49:44" pos:end="49:47">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:11">bin</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <operator pos:start="51:15" pos:end="51:15">*</operator><operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:23">uint8_t</name><operator pos:start="51:24" pos:end="51:24">*</operator><operator pos:start="51:25" pos:end="51:25">*</operator><operator pos:start="51:26" pos:end="51:26">)</operator><name pos:start="51:27" pos:end="51:29">dst</name></expr>;</expr_stmt>

        <for pos:start="53:9" pos:end="53:73">for <control pos:start="53:13" pos:end="53:33">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:28"><expr pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:27">len</name></expr>;</condition> <incr pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:30">i</name><operator pos:start="53:31" pos:end="53:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="53:35" pos:end="53:73"><block_content pos:start="53:35" pos:end="53:73"> <expr_stmt pos:start="53:35" pos:end="53:73"><expr pos:start="53:35" pos:end="53:72"><call pos:start="53:35" pos:end="53:72"><name pos:start="53:35" pos:end="53:42">snprintf</name><argument_list pos:start="53:43" pos:end="53:72">(<argument pos:start="53:44" pos:end="53:52"><expr pos:start="53:44" pos:end="53:52"><name pos:start="53:44" pos:end="53:46">buf</name> <operator pos:start="53:48" pos:end="53:48">+</operator> <name pos:start="53:50" pos:end="53:50">i</name><operator pos:start="53:51" pos:end="53:51">*</operator><literal type="number" pos:start="53:52" pos:end="53:52">2</literal></expr></argument>, <argument pos:start="53:55" pos:end="53:55"><expr pos:start="53:55" pos:end="53:55"><literal type="number" pos:start="53:55" pos:end="53:55">3</literal></expr></argument>, <argument pos:start="53:58" pos:end="53:63"><expr pos:start="53:58" pos:end="53:63"><literal type="string" pos:start="53:58" pos:end="53:63">"%02X"</literal></expr></argument>, <argument pos:start="53:66" pos:end="53:71"><expr pos:start="53:66" pos:end="53:71"><name pos:start="53:66" pos:end="53:71"><name pos:start="53:66" pos:end="53:68">bin</name><index pos:start="53:69" pos:end="53:71">[<expr pos:start="53:70" pos:end="53:70"><name pos:start="53:70" pos:end="53:70">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default> <return pos:start="57:14" pos:end="57:25">return <expr pos:start="57:21" pos:end="57:24"><name pos:start="57:21" pos:end="57:24">NULL</name></expr>;</return>

    </block_content>}</block></switch>

    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
