<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16260.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:10">build_srat</name><argument_list pos:start="1:11" pos:end="1:73">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:49">BIOSLinker *linker</argument>, <argument pos:start="1:52" pos:end="1:72">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="217:1">{<block_content pos:start="5:5" pos:end="215:62">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:37"><name pos:start="5:5" pos:end="5:35">AcpiSystemResourceAffinityTable</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:41">srat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">AcpiSratMemoryAffinity</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:35">numamem</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">srat_start</name></decl>, <decl pos:start="13:21" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:30">numa_start</name></decl>, <decl pos:start="13:33" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:33" pos:end="13:37">slots</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:20">mem_len</name></decl>, <decl pos:start="15:23" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:30">mem_base</name></decl>, <decl pos:start="15:33" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:33" pos:end="15:41">next_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:50"><decl pos:start="17:5" pos:end="17:49"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MachineClass</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:20">mc</name> <init pos:start="17:22" pos:end="17:49">= <expr pos:start="17:24" pos:end="17:49"><call pos:start="17:24" pos:end="17:49"><name pos:start="17:24" pos:end="17:40">MACHINE_GET_CLASS</name><argument_list pos:start="17:41" pos:end="17:49">(<argument pos:start="17:42" pos:end="17:48"><expr pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:71"><decl pos:start="19:5" pos:end="19:70"><type pos:start="19:5" pos:end="19:25"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:23">CPUArchIdList</name> <modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:33">apic_ids</name> <init pos:start="19:35" pos:end="19:70">= <expr pos:start="19:37" pos:end="19:70"><call pos:start="19:37" pos:end="19:70"><name pos:start="19:37" pos:end="19:61"><name pos:start="19:37" pos:end="19:38">mc</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:61">possible_cpu_arch_ids</name></name><argument_list pos:start="19:62" pos:end="19:70">(<argument pos:start="19:63" pos:end="19:69"><expr pos:start="19:63" pos:end="19:69"><name pos:start="19:63" pos:end="19:69">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">PCMachineState</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:24">pcms</name> <init pos:start="21:26" pos:end="21:46">= <expr pos:start="21:28" pos:end="21:46"><call pos:start="21:28" pos:end="21:46"><name pos:start="21:28" pos:end="21:37">PC_MACHINE</name><argument_list pos:start="21:38" pos:end="21:46">(<argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="27:38"><decl pos:start="23:5" pos:end="27:37"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:46">hotplugabble_address_space_size</name> <init pos:start="23:48" pos:end="27:37">=

        <expr pos:start="25:9" pos:end="27:37"><call pos:start="25:9" pos:end="27:37"><name pos:start="25:9" pos:end="25:31">object_property_get_int</name><argument_list pos:start="25:32" pos:end="27:37">(<argument pos:start="25:33" pos:end="25:44"><expr pos:start="25:33" pos:end="25:44"><call pos:start="25:33" pos:end="25:44"><name pos:start="25:33" pos:end="25:38">OBJECT</name><argument_list pos:start="25:39" pos:end="25:44">(<argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><name pos:start="25:40" pos:end="25:43">pcms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:47" pos:end="25:74"><expr pos:start="25:47" pos:end="25:74"><name pos:start="25:47" pos:end="25:74">PC_MACHINE_MEMHP_REGION_SIZE</name></expr></argument>,

                                <argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:14">srat_start</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:32"><name pos:start="31:18" pos:end="31:27">table_data</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:32">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:52"><expr pos:start="35:5" pos:end="35:51"><name pos:start="35:5" pos:end="35:8">srat</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:51"><name pos:start="35:12" pos:end="35:25">acpi_data_push</name><argument_list pos:start="35:26" pos:end="35:51">(<argument pos:start="35:27" pos:end="35:36"><expr pos:start="35:27" pos:end="35:36"><name pos:start="35:27" pos:end="35:36">table_data</name></expr></argument>, <argument pos:start="35:39" pos:end="35:50"><expr pos:start="35:39" pos:end="35:50"><sizeof pos:start="35:39" pos:end="35:44">sizeof <name/></sizeof>*<name pos:start="35:47" pos:end="35:50">srat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:8">srat</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:19">reserved1</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:36"><name pos:start="37:23" pos:end="37:33">cpu_to_le32</name><argument_list pos:start="37:34" pos:end="37:36">(<argument pos:start="37:35" pos:end="37:35"><expr pos:start="37:35" pos:end="37:35"><literal type="number" pos:start="37:35" pos:end="37:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="41:5" pos:end="93:5">for <control pos:start="41:9" pos:end="41:39">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:34"><expr pos:start="41:17" pos:end="41:33"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:33"><name pos:start="41:21" pos:end="41:28">apic_ids</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:33">len</name></name></expr>;</condition> <incr pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><name pos:start="41:36" pos:end="41:36">i</name><operator pos:start="41:37" pos:end="41:38">++</operator></expr></incr>)</control> <block pos:start="41:41" pos:end="93:5">{<block_content pos:start="43:9" pos:end="91:9">

        <decl_stmt pos:start="43:9" pos:end="45:48"><decl pos:start="43:9" pos:end="45:47"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:19">node_id</name> <init pos:start="43:21" pos:end="45:47">= <expr pos:start="43:23" pos:end="45:47"><ternary pos:start="43:23" pos:end="45:47"><condition pos:start="43:23" pos:end="43:59"><expr pos:start="43:23" pos:end="43:57"><name pos:start="43:23" pos:end="43:39"><name pos:start="43:23" pos:end="43:30">apic_ids</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:36">cpus</name><index pos:start="43:37" pos:end="43:39">[<expr pos:start="43:38" pos:end="43:38"><name pos:start="43:38" pos:end="43:38">i</name></expr>]</index></name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:57"><name pos:start="43:41" pos:end="43:45">props</name><operator pos:start="43:46" pos:end="43:46">.</operator><name pos:start="43:47" pos:end="43:57">has_node_id</name></name></expr> ?</condition><then pos:start="45:13" pos:end="45:43">

            <expr pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:20">apic_ids</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:26">cpus</name><index pos:start="45:27" pos:end="45:29">[<expr pos:start="45:28" pos:end="45:28"><name pos:start="45:28" pos:end="45:28">i</name></expr>]</index></name><operator pos:start="45:30" pos:end="45:30">.</operator><name pos:start="45:31" pos:end="45:43"><name pos:start="45:31" pos:end="45:35">props</name><operator pos:start="45:36" pos:end="45:36">.</operator><name pos:start="45:37" pos:end="45:43">node_id</name></name></expr> </then><else pos:start="45:45" pos:end="45:47">: <expr pos:start="45:47" pos:end="45:47"><literal type="number" pos:start="45:47" pos:end="45:47">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:53"><decl pos:start="47:9" pos:end="47:52"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint32_t</name></type> <name pos:start="47:18" pos:end="47:24">apic_id</name> <init pos:start="47:26" pos:end="47:52">= <expr pos:start="47:28" pos:end="47:52"><name pos:start="47:28" pos:end="47:44"><name pos:start="47:28" pos:end="47:35">apic_ids</name><operator pos:start="47:36" pos:end="47:37">-&gt;</operator><name pos:start="47:38" pos:end="47:41">cpus</name><index pos:start="47:42" pos:end="47:44">[<expr pos:start="47:43" pos:end="47:43"><name pos:start="47:43" pos:end="47:43">i</name></expr>]</index></name><operator pos:start="47:45" pos:end="47:45">.</operator><name pos:start="47:46" pos:end="47:52">arch_id</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="51:9" pos:end="91:9"><if pos:start="51:9" pos:end="73:9">if <condition pos:start="51:12" pos:end="51:26">(<expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:19">apic_id</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <literal type="number" pos:start="51:23" pos:end="51:25">255</literal></expr>)</condition> <block pos:start="51:28" pos:end="73:9">{<block_content pos:start="53:13" pos:end="71:41">

            <decl_stmt pos:start="53:13" pos:end="53:44"><decl pos:start="53:13" pos:end="53:43"><type pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:37">AcpiSratProcessorAffinity</name> <modifier pos:start="53:39" pos:end="53:39">*</modifier></type><name pos:start="53:40" pos:end="53:43">core</name></decl>;</decl_stmt>



            <expr_stmt pos:start="57:13" pos:end="57:60"><expr pos:start="57:13" pos:end="57:59"><name pos:start="57:13" pos:end="57:16">core</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:59"><name pos:start="57:20" pos:end="57:33">acpi_data_push</name><argument_list pos:start="57:34" pos:end="57:59">(<argument pos:start="57:35" pos:end="57:44"><expr pos:start="57:35" pos:end="57:44"><name pos:start="57:35" pos:end="57:44">table_data</name></expr></argument>, <argument pos:start="57:47" pos:end="57:58"><expr pos:start="57:47" pos:end="57:58"><sizeof pos:start="57:47" pos:end="57:52">sizeof <name/></sizeof>*<name pos:start="57:55" pos:end="57:58">core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:50"><expr pos:start="59:13" pos:end="59:49"><name pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:16">core</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:22">type</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:49">ACPI_SRAT_PROCESSOR_APIC</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:41"><expr pos:start="61:13" pos:end="61:40"><name pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:16">core</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:24">length</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <sizeof pos:start="61:28" pos:end="61:40">sizeof<argument_list pos:start="61:34" pos:end="61:40">(<argument pos:start="61:35" pos:end="61:39"><expr pos:start="61:35" pos:end="61:39"><operator pos:start="61:35" pos:end="61:35">*</operator><name pos:start="61:36" pos:end="61:39">core</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:42"><expr pos:start="63:13" pos:end="63:41"><name pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:16">core</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:31">local_apic_id</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <name pos:start="63:35" pos:end="63:41">apic_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:16">core</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:30">proximity_lo</name></name> <operator pos:start="65:32" pos:end="65:32">=</operator> <name pos:start="65:34" pos:end="65:40">node_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><call pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:18">memset</name><argument_list pos:start="67:19" pos:end="67:44">(<argument pos:start="67:20" pos:end="67:37"><expr pos:start="67:20" pos:end="67:37"><name pos:start="67:20" pos:end="67:37"><name pos:start="67:20" pos:end="67:23">core</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:37">proximity_hi</name></name></expr></argument>, <argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><literal type="number" pos:start="67:43" pos:end="67:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:16">core</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:33">local_sapic_eid</name></name> <operator pos:start="69:35" pos:end="69:35">=</operator> <literal type="number" pos:start="69:37" pos:end="69:37">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:41"><expr pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:16">core</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:23">flags</name></name> <operator pos:start="71:25" pos:end="71:25">=</operator> <call pos:start="71:27" pos:end="71:40"><name pos:start="71:27" pos:end="71:37">cpu_to_le32</name><argument_list pos:start="71:38" pos:end="71:40">(<argument pos:start="71:39" pos:end="71:39"><expr pos:start="71:39" pos:end="71:39"><literal type="number" pos:start="71:39" pos:end="71:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="91:9">else <block pos:start="73:16" pos:end="91:9">{<block_content pos:start="75:13" pos:end="89:41">

            <decl_stmt pos:start="75:13" pos:end="75:50"><decl pos:start="75:13" pos:end="75:49"><type pos:start="75:13" pos:end="75:45"><name pos:start="75:13" pos:end="75:43">AcpiSratProcessorX2ApicAffinity</name> <modifier pos:start="75:45" pos:end="75:45">*</modifier></type><name pos:start="75:46" pos:end="75:49">core</name></decl>;</decl_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:16">core</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:59"><name pos:start="79:20" pos:end="79:33">acpi_data_push</name><argument_list pos:start="79:34" pos:end="79:59">(<argument pos:start="79:35" pos:end="79:44"><expr pos:start="79:35" pos:end="79:44"><name pos:start="79:35" pos:end="79:44">table_data</name></expr></argument>, <argument pos:start="79:47" pos:end="79:58"><expr pos:start="79:47" pos:end="79:58"><sizeof pos:start="79:47" pos:end="79:52">sizeof <name/></sizeof>*<name pos:start="79:55" pos:end="79:58">core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:52"><expr pos:start="81:13" pos:end="81:51"><name pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:16">core</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:22">type</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:51">ACPI_SRAT_PROCESSOR_x2APIC</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:41"><expr pos:start="83:13" pos:end="83:40"><name pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:16">core</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:24">length</name></name> <operator pos:start="83:26" pos:end="83:26">=</operator> <sizeof pos:start="83:28" pos:end="83:40">sizeof<argument_list pos:start="83:34" pos:end="83:40">(<argument pos:start="83:35" pos:end="83:39"><expr pos:start="83:35" pos:end="83:39"><operator pos:start="83:35" pos:end="83:35">*</operator><name pos:start="83:36" pos:end="83:39">core</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:51"><expr pos:start="85:13" pos:end="85:50"><name pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:16">core</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:27">x2apic_id</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <call pos:start="85:31" pos:end="85:50"><name pos:start="85:31" pos:end="85:41">cpu_to_le32</name><argument_list pos:start="85:42" pos:end="85:50">(<argument pos:start="85:43" pos:end="85:49"><expr pos:start="85:43" pos:end="85:49"><name pos:start="85:43" pos:end="85:49">apic_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:58"><expr pos:start="87:13" pos:end="87:57"><name pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:16">core</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:34">proximity_domain</name></name> <operator pos:start="87:36" pos:end="87:36">=</operator> <call pos:start="87:38" pos:end="87:57"><name pos:start="87:38" pos:end="87:48">cpu_to_le32</name><argument_list pos:start="87:49" pos:end="87:57">(<argument pos:start="87:50" pos:end="87:56"><expr pos:start="87:50" pos:end="87:56"><name pos:start="87:50" pos:end="87:56">node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:41"><expr pos:start="89:13" pos:end="89:40"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:16">core</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:23">flags</name></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <call pos:start="89:27" pos:end="89:40"><name pos:start="89:27" pos:end="89:37">cpu_to_le32</name><argument_list pos:start="89:38" pos:end="89:40">(<argument pos:start="89:39" pos:end="89:39"><expr pos:start="89:39" pos:end="89:39"><literal type="number" pos:start="89:39" pos:end="89:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>





    <comment type="block" pos:start="99:5" pos:end="103:7">/* the memory map is a bit tricky, it contains at least one hole

     * from 640k-1M and possibly another one from 3.5G-4G.

     */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:18"><expr pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:13">next_base</name> <operator pos:start="105:15" pos:end="105:15">=</operator> <literal type="number" pos:start="105:17" pos:end="105:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:33"><expr pos:start="107:5" pos:end="107:32"><name pos:start="107:5" pos:end="107:14">numa_start</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <name pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:27">table_data</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:32">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:58"><expr pos:start="111:5" pos:end="111:57"><name pos:start="111:5" pos:end="111:11">numamem</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:57"><name pos:start="111:15" pos:end="111:28">acpi_data_push</name><argument_list pos:start="111:29" pos:end="111:57">(<argument pos:start="111:30" pos:end="111:39"><expr pos:start="111:30" pos:end="111:39"><name pos:start="111:30" pos:end="111:39">table_data</name></expr></argument>, <argument pos:start="111:42" pos:end="111:56"><expr pos:start="111:42" pos:end="111:56"><sizeof pos:start="111:42" pos:end="111:47">sizeof <name/></sizeof>*<name pos:start="111:50" pos:end="111:56">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:71"><expr pos:start="113:5" pos:end="113:70"><call pos:start="113:5" pos:end="113:70"><name pos:start="113:5" pos:end="113:21">build_srat_memory</name><argument_list pos:start="113:22" pos:end="113:70">(<argument pos:start="113:23" pos:end="113:29"><expr pos:start="113:23" pos:end="113:29"><name pos:start="113:23" pos:end="113:29">numamem</name></expr></argument>, <argument pos:start="113:32" pos:end="113:32"><expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">0</literal></expr></argument>, <argument pos:start="113:35" pos:end="113:44"><expr pos:start="113:35" pos:end="113:44"><literal type="number" pos:start="113:35" pos:end="113:37">640</literal> <operator pos:start="113:39" pos:end="113:39">*</operator> <literal type="number" pos:start="113:41" pos:end="113:44">1024</literal></expr></argument>, <argument pos:start="113:47" pos:end="113:47"><expr pos:start="113:47" pos:end="113:47"><literal type="number" pos:start="113:47" pos:end="113:47">0</literal></expr></argument>, <argument pos:start="113:50" pos:end="113:69"><expr pos:start="113:50" pos:end="113:69"><name pos:start="113:50" pos:end="113:69">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:28"><expr pos:start="115:5" pos:end="115:27"><name pos:start="115:5" pos:end="115:13">next_base</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <literal type="number" pos:start="115:17" pos:end="115:20">1024</literal> <operator pos:start="115:22" pos:end="115:22">*</operator> <literal type="number" pos:start="115:24" pos:end="115:27">1024</literal></expr>;</expr_stmt>

    <for pos:start="117:5" pos:end="165:5">for <control pos:start="117:9" pos:end="117:46">(<init pos:start="117:10" pos:end="117:15"><expr pos:start="117:10" pos:end="117:14"><name pos:start="117:10" pos:end="117:10">i</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <literal type="number" pos:start="117:14" pos:end="117:14">1</literal></expr>;</init> <condition pos:start="117:17" pos:end="117:41"><expr pos:start="117:17" pos:end="117:40"><name pos:start="117:17" pos:end="117:17">i</name> <operator pos:start="117:19" pos:end="117:19">&lt;</operator> <name pos:start="117:21" pos:end="117:36"><name pos:start="117:21" pos:end="117:24">pcms</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:36">numa_nodes</name></name> <operator pos:start="117:38" pos:end="117:38">+</operator> <literal type="number" pos:start="117:40" pos:end="117:40">1</literal></expr>;</condition> <incr pos:start="117:43" pos:end="117:45"><expr pos:start="117:43" pos:end="117:45"><operator pos:start="117:43" pos:end="117:44">++</operator><name pos:start="117:45" pos:end="117:45">i</name></expr></incr>)</control> <block pos:start="117:48" pos:end="165:5">{<block_content pos:start="119:9" pos:end="163:48">

        <expr_stmt pos:start="119:9" pos:end="119:29"><expr pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:16">mem_base</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:28">next_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:40"><expr pos:start="121:9" pos:end="121:39"><name pos:start="121:9" pos:end="121:15">mem_len</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:39"><name pos:start="121:19" pos:end="121:22">pcms</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:32">node_mem</name><index pos:start="121:33" pos:end="121:39">[<expr pos:start="121:34" pos:end="121:38"><name pos:start="121:34" pos:end="121:34">i</name> <operator pos:start="121:36" pos:end="121:36">-</operator> <literal type="number" pos:start="121:38" pos:end="121:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:19">(<expr pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:13">i</name> <operator pos:start="123:15" pos:end="123:16">==</operator> <literal type="number" pos:start="123:18" pos:end="123:18">1</literal></expr>)</condition> <block pos:start="123:21" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:35">

            <expr_stmt pos:start="125:13" pos:end="125:35"><expr pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:19">mem_len</name> <operator pos:start="125:21" pos:end="125:22">-=</operator> <literal type="number" pos:start="125:24" pos:end="125:27">1024</literal> <operator pos:start="125:29" pos:end="125:29">*</operator> <literal type="number" pos:start="125:31" pos:end="125:34">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:39"><expr pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:17">next_base</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <name pos:start="129:21" pos:end="129:28">mem_base</name> <operator pos:start="129:30" pos:end="129:30">+</operator> <name pos:start="129:32" pos:end="129:38">mem_len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="133:9" pos:end="133:39">/* Cut out the ACPI_PCI hole */</comment>

        <if_stmt pos:start="135:9" pos:end="157:9"><if pos:start="135:9" pos:end="157:9">if <condition pos:start="135:12" pos:end="137:48">(<expr pos:start="135:13" pos:end="137:47"><name pos:start="135:13" pos:end="135:20">mem_base</name> <operator pos:start="135:22" pos:end="135:23">&lt;=</operator> <name pos:start="135:25" pos:end="135:47"><name pos:start="135:25" pos:end="135:28">pcms</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:47">below_4g_mem_size</name></name> <operator pos:start="135:49" pos:end="135:50">&amp;&amp;</operator>

            <name pos:start="137:13" pos:end="137:21">next_base</name> <operator pos:start="137:23" pos:end="137:23">&gt;</operator> <name pos:start="137:25" pos:end="137:47"><name pos:start="137:25" pos:end="137:28">pcms</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:47">below_4g_mem_size</name></name></expr>)</condition> <block pos:start="137:50" pos:end="157:9">{<block_content pos:start="139:13" pos:end="155:64">

            <expr_stmt pos:start="139:13" pos:end="139:59"><expr pos:start="139:13" pos:end="139:58"><name pos:start="139:13" pos:end="139:19">mem_len</name> <operator pos:start="139:21" pos:end="139:22">-=</operator> <name pos:start="139:24" pos:end="139:32">next_base</name> <operator pos:start="139:34" pos:end="139:34">-</operator> <name pos:start="139:36" pos:end="139:58"><name pos:start="139:36" pos:end="139:39">pcms</name><operator pos:start="139:40" pos:end="139:41">-&gt;</operator><name pos:start="139:42" pos:end="139:58">below_4g_mem_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="149:13"><if pos:start="141:13" pos:end="149:13">if <condition pos:start="141:16" pos:end="141:28">(<expr pos:start="141:17" pos:end="141:27"><name pos:start="141:17" pos:end="141:23">mem_len</name> <operator pos:start="141:25" pos:end="141:25">&gt;</operator> <literal type="number" pos:start="141:27" pos:end="141:27">0</literal></expr>)</condition> <block pos:start="141:30" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:56">

                <expr_stmt pos:start="143:17" pos:end="143:70"><expr pos:start="143:17" pos:end="143:69"><name pos:start="143:17" pos:end="143:23">numamem</name> <operator pos:start="143:25" pos:end="143:25">=</operator> <call pos:start="143:27" pos:end="143:69"><name pos:start="143:27" pos:end="143:40">acpi_data_push</name><argument_list pos:start="143:41" pos:end="143:69">(<argument pos:start="143:42" pos:end="143:51"><expr pos:start="143:42" pos:end="143:51"><name pos:start="143:42" pos:end="143:51">table_data</name></expr></argument>, <argument pos:start="143:54" pos:end="143:68"><expr pos:start="143:54" pos:end="143:68"><sizeof pos:start="143:54" pos:end="143:59">sizeof <name/></sizeof>*<name pos:start="143:62" pos:end="143:68">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="147:56"><expr pos:start="145:17" pos:end="147:55"><call pos:start="145:17" pos:end="147:55"><name pos:start="145:17" pos:end="145:33">build_srat_memory</name><argument_list pos:start="145:34" pos:end="147:55">(<argument pos:start="145:35" pos:end="145:41"><expr pos:start="145:35" pos:end="145:41"><name pos:start="145:35" pos:end="145:41">numamem</name></expr></argument>, <argument pos:start="145:44" pos:end="145:51"><expr pos:start="145:44" pos:end="145:51"><name pos:start="145:44" pos:end="145:51">mem_base</name></expr></argument>, <argument pos:start="145:54" pos:end="145:60"><expr pos:start="145:54" pos:end="145:60"><name pos:start="145:54" pos:end="145:60">mem_len</name></expr></argument>, <argument pos:start="145:63" pos:end="145:67"><expr pos:start="145:63" pos:end="145:67"><name pos:start="145:63" pos:end="145:63">i</name> <operator pos:start="145:65" pos:end="145:65">-</operator> <literal type="number" pos:start="145:67" pos:end="145:67">1</literal></expr></argument>,

                                  <argument pos:start="147:35" pos:end="147:54"><expr pos:start="147:35" pos:end="147:54"><name pos:start="147:35" pos:end="147:54">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:34"><expr pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:20">mem_base</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <literal type="number" pos:start="151:24" pos:end="151:27">1ULL</literal> <operator pos:start="151:29" pos:end="151:30">&lt;&lt;</operator> <literal type="number" pos:start="151:32" pos:end="151:33">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:58"><expr pos:start="153:13" pos:end="153:57"><name pos:start="153:13" pos:end="153:19">mem_len</name> <operator pos:start="153:21" pos:end="153:21">=</operator> <name pos:start="153:23" pos:end="153:31">next_base</name> <operator pos:start="153:33" pos:end="153:33">-</operator> <name pos:start="153:35" pos:end="153:57"><name pos:start="153:35" pos:end="153:38">pcms</name><operator pos:start="153:39" pos:end="153:40">-&gt;</operator><name pos:start="153:41" pos:end="153:57">below_4g_mem_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:64"><expr pos:start="155:13" pos:end="155:63"><name pos:start="155:13" pos:end="155:21">next_base</name> <operator pos:start="155:23" pos:end="155:24">+=</operator> <operator pos:start="155:26" pos:end="155:26">(</operator><literal type="number" pos:start="155:27" pos:end="155:30">1ULL</literal> <operator pos:start="155:32" pos:end="155:33">&lt;&lt;</operator> <literal type="number" pos:start="155:35" pos:end="155:36">32</literal><operator pos:start="155:37" pos:end="155:37">)</operator> <operator pos:start="155:39" pos:end="155:39">-</operator> <name pos:start="155:41" pos:end="155:63"><name pos:start="155:41" pos:end="155:44">pcms</name><operator pos:start="155:45" pos:end="155:46">-&gt;</operator><name pos:start="155:47" pos:end="155:63">below_4g_mem_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:62"><expr pos:start="159:9" pos:end="159:61"><name pos:start="159:9" pos:end="159:15">numamem</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:61"><name pos:start="159:19" pos:end="159:32">acpi_data_push</name><argument_list pos:start="159:33" pos:end="159:61">(<argument pos:start="159:34" pos:end="159:43"><expr pos:start="159:34" pos:end="159:43"><name pos:start="159:34" pos:end="159:43">table_data</name></expr></argument>, <argument pos:start="159:46" pos:end="159:60"><expr pos:start="159:46" pos:end="159:60"><sizeof pos:start="159:46" pos:end="159:51">sizeof <name/></sizeof>*<name pos:start="159:54" pos:end="159:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="163:48"><expr pos:start="161:9" pos:end="163:47"><call pos:start="161:9" pos:end="163:47"><name pos:start="161:9" pos:end="161:25">build_srat_memory</name><argument_list pos:start="161:26" pos:end="163:47">(<argument pos:start="161:27" pos:end="161:33"><expr pos:start="161:27" pos:end="161:33"><name pos:start="161:27" pos:end="161:33">numamem</name></expr></argument>, <argument pos:start="161:36" pos:end="161:43"><expr pos:start="161:36" pos:end="161:43"><name pos:start="161:36" pos:end="161:43">mem_base</name></expr></argument>, <argument pos:start="161:46" pos:end="161:52"><expr pos:start="161:46" pos:end="161:52"><name pos:start="161:46" pos:end="161:52">mem_len</name></expr></argument>, <argument pos:start="161:55" pos:end="161:59"><expr pos:start="161:55" pos:end="161:59"><name pos:start="161:55" pos:end="161:55">i</name> <operator pos:start="161:57" pos:end="161:57">-</operator> <literal type="number" pos:start="161:59" pos:end="161:59">1</literal></expr></argument>,

                          <argument pos:start="163:27" pos:end="163:46"><expr pos:start="163:27" pos:end="163:46"><name pos:start="163:27" pos:end="163:46">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="167:5" pos:end="167:61"><expr pos:start="167:5" pos:end="167:60"><name pos:start="167:5" pos:end="167:9">slots</name> <operator pos:start="167:11" pos:end="167:11">=</operator> <operator pos:start="167:13" pos:end="167:13">(</operator><name pos:start="167:14" pos:end="167:28"><name pos:start="167:14" pos:end="167:23">table_data</name><operator pos:start="167:24" pos:end="167:25">-&gt;</operator><name pos:start="167:26" pos:end="167:28">len</name></name> <operator pos:start="167:30" pos:end="167:30">-</operator> <name pos:start="167:32" pos:end="167:41">numa_start</name><operator pos:start="167:42" pos:end="167:42">)</operator> <operator pos:start="167:44" pos:end="167:44">/</operator> <sizeof pos:start="167:46" pos:end="167:51">sizeof <name/></sizeof>*<name pos:start="167:54" pos:end="167:60">numamem</name></expr>;</expr_stmt>

    <for pos:start="169:5" pos:end="175:5">for <control pos:start="169:9" pos:end="169:49">(<init pos:start="169:10" pos:end="169:10">;</init> <condition pos:start="169:12" pos:end="169:40"><expr pos:start="169:12" pos:end="169:39"><name pos:start="169:12" pos:end="169:16">slots</name> <operator pos:start="169:18" pos:end="169:18">&lt;</operator> <name pos:start="169:20" pos:end="169:35"><name pos:start="169:20" pos:end="169:23">pcms</name><operator pos:start="169:24" pos:end="169:25">-&gt;</operator><name pos:start="169:26" pos:end="169:35">numa_nodes</name></name> <operator pos:start="169:37" pos:end="169:37">+</operator> <literal type="number" pos:start="169:39" pos:end="169:39">2</literal></expr>;</condition> <incr pos:start="169:42" pos:end="169:48"><expr pos:start="169:42" pos:end="169:48"><name pos:start="169:42" pos:end="169:46">slots</name><operator pos:start="169:47" pos:end="169:48">++</operator></expr></incr>)</control> <block pos:start="169:51" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:66">

        <expr_stmt pos:start="171:9" pos:end="171:62"><expr pos:start="171:9" pos:end="171:61"><name pos:start="171:9" pos:end="171:15">numamem</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="171:61"><name pos:start="171:19" pos:end="171:32">acpi_data_push</name><argument_list pos:start="171:33" pos:end="171:61">(<argument pos:start="171:34" pos:end="171:43"><expr pos:start="171:34" pos:end="171:43"><name pos:start="171:34" pos:end="171:43">table_data</name></expr></argument>, <argument pos:start="171:46" pos:end="171:60"><expr pos:start="171:46" pos:end="171:60"><sizeof pos:start="171:46" pos:end="171:51">sizeof <name/></sizeof>*<name pos:start="171:54" pos:end="171:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:66"><expr pos:start="173:9" pos:end="173:65"><call pos:start="173:9" pos:end="173:65"><name pos:start="173:9" pos:end="173:25">build_srat_memory</name><argument_list pos:start="173:26" pos:end="173:65">(<argument pos:start="173:27" pos:end="173:33"><expr pos:start="173:27" pos:end="173:33"><name pos:start="173:27" pos:end="173:33">numamem</name></expr></argument>, <argument pos:start="173:36" pos:end="173:36"><expr pos:start="173:36" pos:end="173:36"><literal type="number" pos:start="173:36" pos:end="173:36">0</literal></expr></argument>, <argument pos:start="173:39" pos:end="173:39"><expr pos:start="173:39" pos:end="173:39"><literal type="number" pos:start="173:39" pos:end="173:39">0</literal></expr></argument>, <argument pos:start="173:42" pos:end="173:42"><expr pos:start="173:42" pos:end="173:42"><literal type="number" pos:start="173:42" pos:end="173:42">0</literal></expr></argument>, <argument pos:start="173:45" pos:end="173:64"><expr pos:start="173:45" pos:end="173:64"><name pos:start="173:45" pos:end="173:64">MEM_AFFINITY_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="179:5" pos:end="193:7">/*

     * Entry is required for Windows to enable memory hotplug in OS

     * and for Linux to enable SWIOTLB when booted with less than

     * 4G of RAM. Windows works better if the entry sets proximity

     * to the highest NUMA node in the machine.

     * Memory devices may override proximity set by this entry,

     * providing _PXM method if necessary.

     */</comment>

    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:40">(<expr pos:start="195:9" pos:end="195:39"><name pos:start="195:9" pos:end="195:39">hotplugabble_address_space_size</name></expr>)</condition> <block pos:start="195:42" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:76">

        <expr_stmt pos:start="197:9" pos:end="197:62"><expr pos:start="197:9" pos:end="197:61"><name pos:start="197:9" pos:end="197:15">numamem</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <call pos:start="197:19" pos:end="197:61"><name pos:start="197:19" pos:end="197:32">acpi_data_push</name><argument_list pos:start="197:33" pos:end="197:61">(<argument pos:start="197:34" pos:end="197:43"><expr pos:start="197:34" pos:end="197:43"><name pos:start="197:34" pos:end="197:43">table_data</name></expr></argument>, <argument pos:start="197:46" pos:end="197:60"><expr pos:start="197:46" pos:end="197:60"><sizeof pos:start="197:46" pos:end="197:51">sizeof <name/></sizeof>*<name pos:start="197:54" pos:end="197:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="203:76"><expr pos:start="199:9" pos:end="203:75"><call pos:start="199:9" pos:end="203:75"><name pos:start="199:9" pos:end="199:25">build_srat_memory</name><argument_list pos:start="199:26" pos:end="203:75">(<argument pos:start="199:27" pos:end="199:33"><expr pos:start="199:27" pos:end="199:33"><name pos:start="199:27" pos:end="199:33">numamem</name></expr></argument>, <argument pos:start="199:36" pos:end="199:60"><expr pos:start="199:36" pos:end="199:60"><name pos:start="199:36" pos:end="199:60"><name pos:start="199:36" pos:end="199:39">pcms</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:55">hotplug_memory</name><operator pos:start="199:56" pos:end="199:56">.</operator><name pos:start="199:57" pos:end="199:60">base</name></name></expr></argument>,

                          <argument pos:start="201:27" pos:end="201:57"><expr pos:start="201:27" pos:end="201:57"><name pos:start="201:27" pos:end="201:57">hotplugabble_address_space_size</name></expr></argument>, <argument pos:start="201:60" pos:end="201:79"><expr pos:start="201:60" pos:end="201:79"><name pos:start="201:60" pos:end="201:75"><name pos:start="201:60" pos:end="201:63">pcms</name><operator pos:start="201:64" pos:end="201:65">-&gt;</operator><name pos:start="201:66" pos:end="201:75">numa_nodes</name></name> <operator pos:start="201:77" pos:end="201:77">-</operator> <literal type="number" pos:start="201:79" pos:end="201:79">1</literal></expr></argument>,

                          <argument pos:start="203:27" pos:end="203:74"><expr pos:start="203:27" pos:end="203:74"><name pos:start="203:27" pos:end="203:51">MEM_AFFINITY_HOTPLUGGABLE</name> <operator pos:start="203:53" pos:end="203:53">|</operator> <name pos:start="203:55" pos:end="203:74">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="215:62"><expr pos:start="209:5" pos:end="215:61"><call pos:start="209:5" pos:end="215:61"><name pos:start="209:5" pos:end="209:16">build_header</name><argument_list pos:start="209:17" pos:end="215:61">(<argument pos:start="209:18" pos:end="209:23"><expr pos:start="209:18" pos:end="209:23"><name pos:start="209:18" pos:end="209:23">linker</name></expr></argument>, <argument pos:start="209:26" pos:end="209:35"><expr pos:start="209:26" pos:end="209:35"><name pos:start="209:26" pos:end="209:35">table_data</name></expr></argument>,

                 <argument pos:start="211:18" pos:end="211:56"><expr pos:start="211:18" pos:end="211:56"><operator pos:start="211:18" pos:end="211:18">(</operator><name pos:start="211:19" pos:end="211:22">void</name> <operator pos:start="211:24" pos:end="211:24">*</operator><operator pos:start="211:25" pos:end="211:25">)</operator><operator pos:start="211:26" pos:end="211:26">(</operator><name pos:start="211:27" pos:end="211:42"><name pos:start="211:27" pos:end="211:36">table_data</name><operator pos:start="211:37" pos:end="211:38">-&gt;</operator><name pos:start="211:39" pos:end="211:42">data</name></name> <operator pos:start="211:44" pos:end="211:44">+</operator> <name pos:start="211:46" pos:end="211:55">srat_start</name><operator pos:start="211:56" pos:end="211:56">)</operator></expr></argument>,

                 <argument pos:start="213:18" pos:end="213:23"><expr pos:start="213:18" pos:end="213:23"><literal type="string" pos:start="213:18" pos:end="213:23">"SRAT"</literal></expr></argument>,

                 <argument pos:start="215:18" pos:end="215:45"><expr pos:start="215:18" pos:end="215:45"><name pos:start="215:18" pos:end="215:32"><name pos:start="215:18" pos:end="215:27">table_data</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:32">len</name></name> <operator pos:start="215:34" pos:end="215:34">-</operator> <name pos:start="215:36" pos:end="215:45">srat_start</name></expr></argument>, <argument pos:start="215:48" pos:end="215:48"><expr pos:start="215:48" pos:end="215:48"><literal type="number" pos:start="215:48" pos:end="215:48">1</literal></expr></argument>, <argument pos:start="215:51" pos:end="215:54"><expr pos:start="215:51" pos:end="215:54"><name pos:start="215:51" pos:end="215:54">NULL</name></expr></argument>, <argument pos:start="215:57" pos:end="215:60"><expr pos:start="215:57" pos:end="215:60"><name pos:start="215:57" pos:end="215:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
