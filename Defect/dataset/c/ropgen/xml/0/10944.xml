<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10944.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:16">coroutine_fn</name></type> <name pos:start="1:18" pos:end="1:32">bdrv_co_pwritev</name><parameter_list pos:start="1:33" pos:end="5:27">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:42">BdrvChild</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">child</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:38"><decl pos:start="3:21" pos:end="3:38"><type pos:start="3:21" pos:end="3:38"><name pos:start="3:21" pos:end="3:28">unsigned</name> <name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:38">bytes</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:52">QEMUIOVector</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">qiov</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:20">BdrvRequestFlags</name></type> <name pos:start="5:22" pos:end="5:26">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="261:1">{<block_content pos:start="9:5" pos:end="259:15">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:36">= <expr pos:start="9:28" pos:end="9:36"><name pos:start="9:28" pos:end="9:36"><name pos:start="9:28" pos:end="9:32">child</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:36">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">BdrvTrackedRequest</name></type> <name pos:start="11:24" pos:end="11:26">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">align</name> <init pos:start="13:20" pos:end="13:45">= <expr pos:start="13:22" pos:end="13:45"><name pos:start="13:22" pos:end="13:45"><name pos:start="13:22" pos:end="13:23">bs</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:27">bl</name><operator pos:start="13:28" pos:end="13:28">.</operator><name pos:start="13:29" pos:end="13:45">request_alignment</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:21">head_buf</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:21">tail_buf</name> <init pos:start="17:23" pos:end="17:28">= <expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">QEMUIOVector</name></type> <name pos:start="19:18" pos:end="19:27">local_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:23">use_local_qiov</name> <init pos:start="21:25" pos:end="21:31">= <expr pos:start="21:27" pos:end="21:31"><name pos:start="21:27" pos:end="21:31">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:16"><name pos:start="27:10" pos:end="27:11">bs</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:16">drv</name></name></expr>)</condition> <block pos:start="27:19" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:26">

        <return pos:start="29:9" pos:end="29:26">return <expr pos:start="29:16" pos:end="29:25"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:25">ENOMEDIUM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:22">(<expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:10">bs</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:21">read_only</name></name></expr>)</condition> <block pos:start="33:24" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:22">

        <return pos:start="35:9" pos:end="35:22">return <expr pos:start="35:16" pos:end="35:21"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:21">EPERM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><call pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:47">(<argument pos:start="39:12" pos:end="39:46"><expr pos:start="39:12" pos:end="39:46"><operator pos:start="39:12" pos:end="39:12">!</operator><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:27"><name pos:start="39:14" pos:end="39:15">bs</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:27">open_flags</name></name> <operator pos:start="39:29" pos:end="39:29">&amp;</operator> <name pos:start="39:31" pos:end="39:45">BDRV_O_INACTIVE</name><operator pos:start="39:46" pos:end="39:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:53"><expr pos:start="43:5" pos:end="43:52"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:52"><name pos:start="43:11" pos:end="43:33">bdrv_check_byte_request</name><argument_list pos:start="43:34" pos:end="43:52">(<argument pos:start="43:35" pos:end="43:36"><expr pos:start="43:35" pos:end="43:36"><name pos:start="43:35" pos:end="43:36">bs</name></expr></argument>, <argument pos:start="43:39" pos:end="43:44"><expr pos:start="43:39" pos:end="43:44"><name pos:start="43:39" pos:end="43:44">offset</name></expr></argument>, <argument pos:start="43:47" pos:end="43:51"><expr pos:start="43:47" pos:end="43:51"><name pos:start="43:47" pos:end="43:51">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:16">(<expr pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">&lt;</operator> <literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>)</condition> <block pos:start="45:18" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:19">

        <return pos:start="47:9" pos:end="47:19">return <expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><call pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:22">bdrv_inc_in_flight</name><argument_list pos:start="53:23" pos:end="53:26">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="63:7">/*

     * Align write if necessary by performing a read-modify-write cycle.

     * Pad qiov with the read parts and be sure to have a tracked request not

     * only for bdrv_aligned_pwritev, but also for the reads of the RMW cycle.

     */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:71"><expr pos:start="65:5" pos:end="65:70"><call pos:start="65:5" pos:end="65:70"><name pos:start="65:5" pos:end="65:25">tracked_request_begin</name><argument_list pos:start="65:26" pos:end="65:70">(<argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:30">req</name></expr></argument>, <argument pos:start="65:33" pos:end="65:34"><expr pos:start="65:33" pos:end="65:34"><name pos:start="65:33" pos:end="65:34">bs</name></expr></argument>, <argument pos:start="65:37" pos:end="65:42"><expr pos:start="65:37" pos:end="65:42"><name pos:start="65:37" pos:end="65:42">offset</name></expr></argument>, <argument pos:start="65:45" pos:end="65:49"><expr pos:start="65:45" pos:end="65:49"><name pos:start="65:45" pos:end="65:49">bytes</name></expr></argument>, <argument pos:start="65:52" pos:end="65:69"><expr pos:start="65:52" pos:end="65:69"><name pos:start="65:52" pos:end="65:69">BDRV_TRACKED_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:14">(<expr pos:start="69:9" pos:end="69:13"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:13">qiov</name></expr>)</condition> <block pos:start="69:16" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:17">

        <expr_stmt pos:start="71:9" pos:end="71:70"><expr pos:start="71:9" pos:end="71:69"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:69"><name pos:start="71:15" pos:end="71:37">bdrv_co_do_zero_pwritev</name><argument_list pos:start="71:38" pos:end="71:69">(<argument pos:start="71:39" pos:end="71:40"><expr pos:start="71:39" pos:end="71:40"><name pos:start="71:39" pos:end="71:40">bs</name></expr></argument>, <argument pos:start="71:43" pos:end="71:48"><expr pos:start="71:43" pos:end="71:48"><name pos:start="71:43" pos:end="71:48">offset</name></expr></argument>, <argument pos:start="71:51" pos:end="71:55"><expr pos:start="71:51" pos:end="71:55"><name pos:start="71:51" pos:end="71:55">bytes</name></expr></argument>, <argument pos:start="71:58" pos:end="71:62"><expr pos:start="71:58" pos:end="71:62"><name pos:start="71:58" pos:end="71:62">flags</name></expr></argument>, <argument pos:start="71:65" pos:end="71:68"><expr pos:start="71:65" pos:end="71:68"><operator pos:start="71:65" pos:end="71:65">&amp;</operator><name pos:start="71:66" pos:end="71:68">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="153:5"><if pos:start="79:5" pos:end="153:5">if <condition pos:start="79:8" pos:end="79:29">(<expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:14">offset</name> <operator pos:start="79:16" pos:end="79:16">&amp;</operator> <operator pos:start="79:18" pos:end="79:18">(</operator><name pos:start="79:19" pos:end="79:23">align</name> <operator pos:start="79:25" pos:end="79:25">-</operator> <literal type="number" pos:start="79:27" pos:end="79:27">1</literal><operator pos:start="79:28" pos:end="79:28">)</operator></expr>)</condition> <block pos:start="79:31" pos:end="153:5">{<block_content pos:start="81:9" pos:end="151:9">

        <decl_stmt pos:start="81:9" pos:end="81:31"><decl pos:start="81:9" pos:end="81:30"><type pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:20">QEMUIOVector</name></type> <name pos:start="81:22" pos:end="81:30">head_qiov</name></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:30"><decl pos:start="83:9" pos:end="83:29"><type pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:14">struct</name> <name pos:start="83:16" pos:end="83:20">iovec</name></name></type> <name pos:start="83:22" pos:end="83:29">head_iov</name></decl>;</decl_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:46"><expr pos:start="87:9" pos:end="87:45"><call pos:start="87:9" pos:end="87:45"><name pos:start="87:9" pos:end="87:32">mark_request_serialising</name><argument_list pos:start="87:33" pos:end="87:45">(<argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><operator pos:start="87:34" pos:end="87:34">&amp;</operator><name pos:start="87:35" pos:end="87:37">req</name></expr></argument>, <argument pos:start="87:40" pos:end="87:44"><expr pos:start="87:40" pos:end="87:44"><name pos:start="87:40" pos:end="87:44">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><call pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:33">wait_serialising_requests</name><argument_list pos:start="89:34" pos:end="89:39">(<argument pos:start="89:35" pos:end="89:38"><expr pos:start="89:35" pos:end="89:38"><operator pos:start="89:35" pos:end="89:35">&amp;</operator><name pos:start="89:36" pos:end="89:38">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:16">head_buf</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:45"><name pos:start="93:20" pos:end="93:34">qemu_blockalign</name><argument_list pos:start="93:35" pos:end="93:45">(<argument pos:start="93:36" pos:end="93:37"><expr pos:start="93:36" pos:end="93:37"><name pos:start="93:36" pos:end="93:37">bs</name></expr></argument>, <argument pos:start="93:40" pos:end="93:44"><expr pos:start="93:40" pos:end="93:44"><name pos:start="93:40" pos:end="93:44">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="101:10"><expr pos:start="95:9" pos:end="101:9"><name pos:start="95:9" pos:end="95:16">head_iov</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <operator pos:start="95:20" pos:end="95:20">(</operator>struct <name pos:start="95:28" pos:end="95:32">iovec</name><operator pos:start="95:33" pos:end="95:33">)</operator> <block pos:start="95:35" pos:end="101:9">{

            <expr pos:start="97:13" pos:end="97:34"><operator pos:start="97:13" pos:end="97:13">.</operator><name pos:start="97:14" pos:end="97:21">iov_base</name>   <operator pos:start="97:25" pos:end="97:25">=</operator> <name pos:start="97:27" pos:end="97:34">head_buf</name></expr>,

            <expr pos:start="99:13" pos:end="99:31"><operator pos:start="99:13" pos:end="99:13">.</operator><name pos:start="99:14" pos:end="99:20">iov_len</name>    <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:31">align</name></expr>,

        }</block></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:59"><expr pos:start="103:9" pos:end="103:58"><call pos:start="103:9" pos:end="103:58"><name pos:start="103:9" pos:end="103:32">qemu_iovec_init_external</name><argument_list pos:start="103:33" pos:end="103:58">(<argument pos:start="103:34" pos:end="103:43"><expr pos:start="103:34" pos:end="103:43"><operator pos:start="103:34" pos:end="103:34">&amp;</operator><name pos:start="103:35" pos:end="103:43">head_qiov</name></expr></argument>, <argument pos:start="103:46" pos:end="103:54"><expr pos:start="103:46" pos:end="103:54"><operator pos:start="103:46" pos:end="103:46">&amp;</operator><name pos:start="103:47" pos:end="103:54">head_iov</name></expr></argument>, <argument pos:start="103:57" pos:end="103:57"><expr pos:start="103:57" pos:end="103:57"><literal type="number" pos:start="103:57" pos:end="103:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:54"><expr pos:start="107:9" pos:end="107:53"><call pos:start="107:9" pos:end="107:53"><name pos:start="107:9" pos:end="107:24">bdrv_debug_event</name><argument_list pos:start="107:25" pos:end="107:53">(<argument pos:start="107:26" pos:end="107:27"><expr pos:start="107:26" pos:end="107:27"><name pos:start="107:26" pos:end="107:27">bs</name></expr></argument>, <argument pos:start="107:30" pos:end="107:52"><expr pos:start="107:30" pos:end="107:52"><name pos:start="107:30" pos:end="107:52">BLKDBG_PWRITEV_RMW_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="111:56"><expr pos:start="109:9" pos:end="111:55"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="111:55"><name pos:start="109:15" pos:end="109:33">bdrv_aligned_preadv</name><argument_list pos:start="109:34" pos:end="111:55">(<argument pos:start="109:35" pos:end="109:36"><expr pos:start="109:35" pos:end="109:36"><name pos:start="109:35" pos:end="109:36">bs</name></expr></argument>, <argument pos:start="109:39" pos:end="109:42"><expr pos:start="109:39" pos:end="109:42"><operator pos:start="109:39" pos:end="109:39">&amp;</operator><name pos:start="109:40" pos:end="109:42">req</name></expr></argument>, <argument pos:start="109:45" pos:end="109:65"><expr pos:start="109:45" pos:end="109:65"><name pos:start="109:45" pos:end="109:50">offset</name> <operator pos:start="109:52" pos:end="109:52">&amp;</operator> <operator pos:start="109:54" pos:end="109:54">~</operator><operator pos:start="109:55" pos:end="109:55">(</operator><name pos:start="109:56" pos:end="109:60">align</name> <operator pos:start="109:62" pos:end="109:62">-</operator> <literal type="number" pos:start="109:64" pos:end="109:64">1</literal><operator pos:start="109:65" pos:end="109:65">)</operator></expr></argument>, <argument pos:start="109:68" pos:end="109:72"><expr pos:start="109:68" pos:end="109:72"><name pos:start="109:68" pos:end="109:72">align</name></expr></argument>,

                                  <argument pos:start="111:35" pos:end="111:39"><expr pos:start="111:35" pos:end="111:39"><name pos:start="111:35" pos:end="111:39">align</name></expr></argument>, <argument pos:start="111:42" pos:end="111:51"><expr pos:start="111:42" pos:end="111:51"><operator pos:start="111:42" pos:end="111:42">&amp;</operator><name pos:start="111:43" pos:end="111:51">head_qiov</name></expr></argument>, <argument pos:start="111:54" pos:end="111:54"><expr pos:start="111:54" pos:end="111:54"><literal type="number" pos:start="111:54" pos:end="111:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:20">(<expr pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:17">&lt;</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>)</condition> <block pos:start="113:22" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:22">

            <goto pos:start="115:13" pos:end="115:22">goto <name pos:start="115:18" pos:end="115:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:60"><expr pos:start="119:9" pos:end="119:59"><call pos:start="119:9" pos:end="119:59"><name pos:start="119:9" pos:end="119:24">bdrv_debug_event</name><argument_list pos:start="119:25" pos:end="119:59">(<argument pos:start="119:26" pos:end="119:27"><expr pos:start="119:26" pos:end="119:27"><name pos:start="119:26" pos:end="119:27">bs</name></expr></argument>, <argument pos:start="119:30" pos:end="119:58"><expr pos:start="119:30" pos:end="119:58"><name pos:start="119:30" pos:end="119:58">BLKDBG_PWRITEV_RMW_AFTER_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:53"><expr pos:start="123:9" pos:end="123:52"><call pos:start="123:9" pos:end="123:52"><name pos:start="123:9" pos:end="123:23">qemu_iovec_init</name><argument_list pos:start="123:24" pos:end="123:52">(<argument pos:start="123:25" pos:end="123:35"><expr pos:start="123:25" pos:end="123:35"><operator pos:start="123:25" pos:end="123:25">&amp;</operator><name pos:start="123:26" pos:end="123:35">local_qiov</name></expr></argument>, <argument pos:start="123:38" pos:end="123:51"><expr pos:start="123:38" pos:end="123:51"><name pos:start="123:38" pos:end="123:47"><name pos:start="123:38" pos:end="123:41">qiov</name><operator pos:start="123:42" pos:end="123:43">-&gt;</operator><name pos:start="123:44" pos:end="123:47">niov</name></name> <operator pos:start="123:49" pos:end="123:49">+</operator> <literal type="number" pos:start="123:51" pos:end="123:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:68"><expr pos:start="125:9" pos:end="125:67"><call pos:start="125:9" pos:end="125:67"><name pos:start="125:9" pos:end="125:22">qemu_iovec_add</name><argument_list pos:start="125:23" pos:end="125:67">(<argument pos:start="125:24" pos:end="125:34"><expr pos:start="125:24" pos:end="125:34"><operator pos:start="125:24" pos:end="125:24">&amp;</operator><name pos:start="125:25" pos:end="125:34">local_qiov</name></expr></argument>, <argument pos:start="125:37" pos:end="125:44"><expr pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:44">head_buf</name></expr></argument>, <argument pos:start="125:47" pos:end="125:66"><expr pos:start="125:47" pos:end="125:66"><name pos:start="125:47" pos:end="125:52">offset</name> <operator pos:start="125:54" pos:end="125:54">&amp;</operator> <operator pos:start="125:56" pos:end="125:56">(</operator><name pos:start="125:57" pos:end="125:61">align</name> <operator pos:start="125:63" pos:end="125:63">-</operator> <literal type="number" pos:start="125:65" pos:end="125:65">1</literal><operator pos:start="125:66" pos:end="125:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:60"><expr pos:start="127:9" pos:end="127:59"><call pos:start="127:9" pos:end="127:59"><name pos:start="127:9" pos:end="127:25">qemu_iovec_concat</name><argument_list pos:start="127:26" pos:end="127:59">(<argument pos:start="127:27" pos:end="127:37"><expr pos:start="127:27" pos:end="127:37"><operator pos:start="127:27" pos:end="127:27">&amp;</operator><name pos:start="127:28" pos:end="127:37">local_qiov</name></expr></argument>, <argument pos:start="127:40" pos:end="127:43"><expr pos:start="127:40" pos:end="127:43"><name pos:start="127:40" pos:end="127:43">qiov</name></expr></argument>, <argument pos:start="127:46" pos:end="127:46"><expr pos:start="127:46" pos:end="127:46"><literal type="number" pos:start="127:46" pos:end="127:46">0</literal></expr></argument>, <argument pos:start="127:49" pos:end="127:58"><expr pos:start="127:49" pos:end="127:58"><name pos:start="127:49" pos:end="127:58"><name pos:start="127:49" pos:end="127:52">qiov</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:58">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:22">use_local_qiov</name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:29">true</name></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:38"><expr pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:13">bytes</name> <operator pos:start="133:15" pos:end="133:16">+=</operator> <name pos:start="133:18" pos:end="133:23">offset</name> <operator pos:start="133:25" pos:end="133:25">&amp;</operator> <operator pos:start="133:27" pos:end="133:27">(</operator><name pos:start="133:28" pos:end="133:32">align</name> <operator pos:start="133:34" pos:end="133:34">-</operator> <literal type="number" pos:start="133:36" pos:end="133:36">1</literal><operator pos:start="133:37" pos:end="133:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:39"><expr pos:start="135:9" pos:end="135:38"><name pos:start="135:9" pos:end="135:14">offset</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <name pos:start="135:18" pos:end="135:23">offset</name> <operator pos:start="135:25" pos:end="135:25">&amp;</operator> <operator pos:start="135:27" pos:end="135:27">~</operator><operator pos:start="135:28" pos:end="135:28">(</operator><name pos:start="135:29" pos:end="135:33">align</name> <operator pos:start="135:35" pos:end="135:35">-</operator> <literal type="number" pos:start="135:37" pos:end="135:37">1</literal><operator pos:start="135:38" pos:end="135:38">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="139:9" pos:end="143:11">/* We have read the tail already if the request is smaller

         * than one aligned block.

         */</comment>

        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:26">(<expr pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:17">bytes</name> <operator pos:start="145:19" pos:end="145:19">&lt;</operator> <name pos:start="145:21" pos:end="145:25">align</name></expr>)</condition> <block pos:start="145:28" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:26">

            <expr_stmt pos:start="147:13" pos:end="147:73"><expr pos:start="147:13" pos:end="147:72"><call pos:start="147:13" pos:end="147:72"><name pos:start="147:13" pos:end="147:26">qemu_iovec_add</name><argument_list pos:start="147:27" pos:end="147:72">(<argument pos:start="147:28" pos:end="147:38"><expr pos:start="147:28" pos:end="147:38"><operator pos:start="147:28" pos:end="147:28">&amp;</operator><name pos:start="147:29" pos:end="147:38">local_qiov</name></expr></argument>, <argument pos:start="147:41" pos:end="147:56"><expr pos:start="147:41" pos:end="147:56"><name pos:start="147:41" pos:end="147:48">head_buf</name> <operator pos:start="147:50" pos:end="147:50">+</operator> <name pos:start="147:52" pos:end="147:56">bytes</name></expr></argument>, <argument pos:start="147:59" pos:end="147:71"><expr pos:start="147:59" pos:end="147:71"><name pos:start="147:59" pos:end="147:63">align</name> <operator pos:start="147:65" pos:end="147:65">-</operator> <name pos:start="147:67" pos:end="147:71">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:26"><expr pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:17">bytes</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:25">align</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="227:5"><if pos:start="157:5" pos:end="227:5">if <condition pos:start="157:8" pos:end="157:39">(<expr pos:start="157:9" pos:end="157:38"><operator pos:start="157:9" pos:end="157:9">(</operator><name pos:start="157:10" pos:end="157:15">offset</name> <operator pos:start="157:17" pos:end="157:17">+</operator> <name pos:start="157:19" pos:end="157:23">bytes</name><operator pos:start="157:24" pos:end="157:24">)</operator> <operator pos:start="157:26" pos:end="157:26">&amp;</operator> <operator pos:start="157:28" pos:end="157:28">(</operator><name pos:start="157:29" pos:end="157:33">align</name> <operator pos:start="157:35" pos:end="157:35">-</operator> <literal type="number" pos:start="157:37" pos:end="157:37">1</literal><operator pos:start="157:38" pos:end="157:38">)</operator></expr>)</condition> <block pos:start="157:41" pos:end="227:5">{<block_content pos:start="159:9" pos:end="225:39">

        <decl_stmt pos:start="159:9" pos:end="159:31"><decl pos:start="159:9" pos:end="159:30"><type pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:20">QEMUIOVector</name></type> <name pos:start="159:22" pos:end="159:30">tail_qiov</name></decl>;</decl_stmt>

        <decl_stmt pos:start="161:9" pos:end="161:30"><decl pos:start="161:9" pos:end="161:29"><type pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:14">struct</name> <name pos:start="161:16" pos:end="161:20">iovec</name></name></type> <name pos:start="161:22" pos:end="161:29">tail_iov</name></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:26"><decl pos:start="163:9" pos:end="163:25"><type pos:start="163:9" pos:end="163:14"><name pos:start="163:9" pos:end="163:14">size_t</name></type> <name pos:start="163:16" pos:end="163:25">tail_bytes</name></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:20"><decl pos:start="165:9" pos:end="165:19"><type pos:start="165:9" pos:end="165:12"><name pos:start="165:9" pos:end="165:12">bool</name></type> <name pos:start="165:14" pos:end="165:19">waited</name></decl>;</decl_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:46"><expr pos:start="169:9" pos:end="169:45"><call pos:start="169:9" pos:end="169:45"><name pos:start="169:9" pos:end="169:32">mark_request_serialising</name><argument_list pos:start="169:33" pos:end="169:45">(<argument pos:start="169:34" pos:end="169:37"><expr pos:start="169:34" pos:end="169:37"><operator pos:start="169:34" pos:end="169:34">&amp;</operator><name pos:start="169:35" pos:end="169:37">req</name></expr></argument>, <argument pos:start="169:40" pos:end="169:44"><expr pos:start="169:40" pos:end="169:44"><name pos:start="169:40" pos:end="169:44">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:14">waited</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:48"><name pos:start="171:18" pos:end="171:42">wait_serialising_requests</name><argument_list pos:start="171:43" pos:end="171:48">(<argument pos:start="171:44" pos:end="171:47"><expr pos:start="171:44" pos:end="171:47"><operator pos:start="171:44" pos:end="171:44">&amp;</operator><name pos:start="171:45" pos:end="171:47">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:43"><expr pos:start="173:9" pos:end="173:42"><call pos:start="173:9" pos:end="173:42"><name pos:start="173:9" pos:end="173:14">assert</name><argument_list pos:start="173:15" pos:end="173:42">(<argument pos:start="173:16" pos:end="173:41"><expr pos:start="173:16" pos:end="173:41"><operator pos:start="173:16" pos:end="173:16">!</operator><name pos:start="173:17" pos:end="173:22">waited</name> <operator pos:start="173:24" pos:end="173:25">||</operator> <operator pos:start="173:27" pos:end="173:27">!</operator><name pos:start="173:28" pos:end="173:41">use_local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:46"><expr pos:start="177:9" pos:end="177:45"><name pos:start="177:9" pos:end="177:16">tail_buf</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <call pos:start="177:20" pos:end="177:45"><name pos:start="177:20" pos:end="177:34">qemu_blockalign</name><argument_list pos:start="177:35" pos:end="177:45">(<argument pos:start="177:36" pos:end="177:37"><expr pos:start="177:36" pos:end="177:37"><name pos:start="177:36" pos:end="177:37">bs</name></expr></argument>, <argument pos:start="177:40" pos:end="177:44"><expr pos:start="177:40" pos:end="177:44"><name pos:start="177:40" pos:end="177:44">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="185:10"><expr pos:start="179:9" pos:end="185:9"><name pos:start="179:9" pos:end="179:16">tail_iov</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <operator pos:start="179:20" pos:end="179:20">(</operator>struct <name pos:start="179:28" pos:end="179:32">iovec</name><operator pos:start="179:33" pos:end="179:33">)</operator> <block pos:start="179:35" pos:end="185:9">{

            <expr pos:start="181:13" pos:end="181:34"><operator pos:start="181:13" pos:end="181:13">.</operator><name pos:start="181:14" pos:end="181:21">iov_base</name>   <operator pos:start="181:25" pos:end="181:25">=</operator> <name pos:start="181:27" pos:end="181:34">tail_buf</name></expr>,

            <expr pos:start="183:13" pos:end="183:31"><operator pos:start="183:13" pos:end="183:13">.</operator><name pos:start="183:14" pos:end="183:20">iov_len</name>    <operator pos:start="183:25" pos:end="183:25">=</operator> <name pos:start="183:27" pos:end="183:31">align</name></expr>,

        }</block></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:59"><expr pos:start="187:9" pos:end="187:58"><call pos:start="187:9" pos:end="187:58"><name pos:start="187:9" pos:end="187:32">qemu_iovec_init_external</name><argument_list pos:start="187:33" pos:end="187:58">(<argument pos:start="187:34" pos:end="187:43"><expr pos:start="187:34" pos:end="187:43"><operator pos:start="187:34" pos:end="187:34">&amp;</operator><name pos:start="187:35" pos:end="187:43">tail_qiov</name></expr></argument>, <argument pos:start="187:46" pos:end="187:54"><expr pos:start="187:46" pos:end="187:54"><operator pos:start="187:46" pos:end="187:46">&amp;</operator><name pos:start="187:47" pos:end="187:54">tail_iov</name></expr></argument>, <argument pos:start="187:57" pos:end="187:57"><expr pos:start="187:57" pos:end="187:57"><literal type="number" pos:start="187:57" pos:end="187:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="191:9" pos:end="191:54"><expr pos:start="191:9" pos:end="191:53"><call pos:start="191:9" pos:end="191:53"><name pos:start="191:9" pos:end="191:24">bdrv_debug_event</name><argument_list pos:start="191:25" pos:end="191:53">(<argument pos:start="191:26" pos:end="191:27"><expr pos:start="191:26" pos:end="191:27"><name pos:start="191:26" pos:end="191:27">bs</name></expr></argument>, <argument pos:start="191:30" pos:end="191:52"><expr pos:start="191:30" pos:end="191:52"><name pos:start="191:30" pos:end="191:52">BLKDBG_PWRITEV_RMW_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="195:56"><expr pos:start="193:9" pos:end="195:55"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="195:55"><name pos:start="193:15" pos:end="193:33">bdrv_aligned_preadv</name><argument_list pos:start="193:34" pos:end="195:55">(<argument pos:start="193:35" pos:end="193:36"><expr pos:start="193:35" pos:end="193:36"><name pos:start="193:35" pos:end="193:36">bs</name></expr></argument>, <argument pos:start="193:39" pos:end="193:42"><expr pos:start="193:39" pos:end="193:42"><operator pos:start="193:39" pos:end="193:39">&amp;</operator><name pos:start="193:40" pos:end="193:42">req</name></expr></argument>, <argument pos:start="193:45" pos:end="193:75"><expr pos:start="193:45" pos:end="193:75"><operator pos:start="193:45" pos:end="193:45">(</operator><name pos:start="193:46" pos:end="193:51">offset</name> <operator pos:start="193:53" pos:end="193:53">+</operator> <name pos:start="193:55" pos:end="193:59">bytes</name><operator pos:start="193:60" pos:end="193:60">)</operator> <operator pos:start="193:62" pos:end="193:62">&amp;</operator> <operator pos:start="193:64" pos:end="193:64">~</operator><operator pos:start="193:65" pos:end="193:65">(</operator><name pos:start="193:66" pos:end="193:70">align</name> <operator pos:start="193:72" pos:end="193:72">-</operator> <literal type="number" pos:start="193:74" pos:end="193:74">1</literal><operator pos:start="193:75" pos:end="193:75">)</operator></expr></argument>, <argument pos:start="193:78" pos:end="193:82"><expr pos:start="193:78" pos:end="193:82"><name pos:start="193:78" pos:end="193:82">align</name></expr></argument>,

                                  <argument pos:start="195:35" pos:end="195:39"><expr pos:start="195:35" pos:end="195:39"><name pos:start="195:35" pos:end="195:39">align</name></expr></argument>, <argument pos:start="195:42" pos:end="195:51"><expr pos:start="195:42" pos:end="195:51"><operator pos:start="195:42" pos:end="195:42">&amp;</operator><name pos:start="195:43" pos:end="195:51">tail_qiov</name></expr></argument>, <argument pos:start="195:54" pos:end="195:54"><expr pos:start="195:54" pos:end="195:54"><literal type="number" pos:start="195:54" pos:end="195:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="201:9"><if pos:start="197:9" pos:end="201:9">if <condition pos:start="197:12" pos:end="197:20">(<expr pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:15">ret</name> <operator pos:start="197:17" pos:end="197:17">&lt;</operator> <literal type="number" pos:start="197:19" pos:end="197:19">0</literal></expr>)</condition> <block pos:start="197:22" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:22">

            <goto pos:start="199:13" pos:end="199:22">goto <name pos:start="199:18" pos:end="199:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:60"><expr pos:start="203:9" pos:end="203:59"><call pos:start="203:9" pos:end="203:59"><name pos:start="203:9" pos:end="203:24">bdrv_debug_event</name><argument_list pos:start="203:25" pos:end="203:59">(<argument pos:start="203:26" pos:end="203:27"><expr pos:start="203:26" pos:end="203:27"><name pos:start="203:26" pos:end="203:27">bs</name></expr></argument>, <argument pos:start="203:30" pos:end="203:58"><expr pos:start="203:30" pos:end="203:58"><name pos:start="203:30" pos:end="203:58">BLKDBG_PWRITEV_RMW_AFTER_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:28">(<expr pos:start="207:13" pos:end="207:27"><operator pos:start="207:13" pos:end="207:13">!</operator><name pos:start="207:14" pos:end="207:27">use_local_qiov</name></expr>)</condition> <block pos:start="207:30" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:34">

            <expr_stmt pos:start="209:13" pos:end="209:57"><expr pos:start="209:13" pos:end="209:56"><call pos:start="209:13" pos:end="209:56"><name pos:start="209:13" pos:end="209:27">qemu_iovec_init</name><argument_list pos:start="209:28" pos:end="209:56">(<argument pos:start="209:29" pos:end="209:39"><expr pos:start="209:29" pos:end="209:39"><operator pos:start="209:29" pos:end="209:29">&amp;</operator><name pos:start="209:30" pos:end="209:39">local_qiov</name></expr></argument>, <argument pos:start="209:42" pos:end="209:55"><expr pos:start="209:42" pos:end="209:55"><name pos:start="209:42" pos:end="209:51"><name pos:start="209:42" pos:end="209:45">qiov</name><operator pos:start="209:46" pos:end="209:47">-&gt;</operator><name pos:start="209:48" pos:end="209:51">niov</name></name> <operator pos:start="209:53" pos:end="209:53">+</operator> <literal type="number" pos:start="209:55" pos:end="209:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:64"><expr pos:start="211:13" pos:end="211:63"><call pos:start="211:13" pos:end="211:63"><name pos:start="211:13" pos:end="211:29">qemu_iovec_concat</name><argument_list pos:start="211:30" pos:end="211:63">(<argument pos:start="211:31" pos:end="211:41"><expr pos:start="211:31" pos:end="211:41"><operator pos:start="211:31" pos:end="211:31">&amp;</operator><name pos:start="211:32" pos:end="211:41">local_qiov</name></expr></argument>, <argument pos:start="211:44" pos:end="211:47"><expr pos:start="211:44" pos:end="211:47"><name pos:start="211:44" pos:end="211:47">qiov</name></expr></argument>, <argument pos:start="211:50" pos:end="211:50"><expr pos:start="211:50" pos:end="211:50"><literal type="number" pos:start="211:50" pos:end="211:50">0</literal></expr></argument>, <argument pos:start="211:53" pos:end="211:62"><expr pos:start="211:53" pos:end="211:62"><name pos:start="211:53" pos:end="211:62"><name pos:start="211:53" pos:end="211:56">qiov</name><operator pos:start="211:57" pos:end="211:58">-&gt;</operator><name pos:start="211:59" pos:end="211:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:34"><expr pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:26">use_local_qiov</name> <operator pos:start="213:28" pos:end="213:28">=</operator> <name pos:start="213:30" pos:end="213:33">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="219:9" pos:end="219:52"><expr pos:start="219:9" pos:end="219:51"><name pos:start="219:9" pos:end="219:18">tail_bytes</name> <operator pos:start="219:20" pos:end="219:20">=</operator> <operator pos:start="219:22" pos:end="219:22">(</operator><name pos:start="219:23" pos:end="219:28">offset</name> <operator pos:start="219:30" pos:end="219:30">+</operator> <name pos:start="219:32" pos:end="219:36">bytes</name><operator pos:start="219:37" pos:end="219:37">)</operator> <operator pos:start="219:39" pos:end="219:39">&amp;</operator> <operator pos:start="219:41" pos:end="219:41">(</operator><name pos:start="219:42" pos:end="219:46">align</name> <operator pos:start="219:48" pos:end="219:48">-</operator> <literal type="number" pos:start="219:50" pos:end="219:50">1</literal><operator pos:start="219:51" pos:end="219:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:79"><expr pos:start="221:9" pos:end="221:78"><call pos:start="221:9" pos:end="221:78"><name pos:start="221:9" pos:end="221:22">qemu_iovec_add</name><argument_list pos:start="221:23" pos:end="221:78">(<argument pos:start="221:24" pos:end="221:34"><expr pos:start="221:24" pos:end="221:34"><operator pos:start="221:24" pos:end="221:24">&amp;</operator><name pos:start="221:25" pos:end="221:34">local_qiov</name></expr></argument>, <argument pos:start="221:37" pos:end="221:57"><expr pos:start="221:37" pos:end="221:57"><name pos:start="221:37" pos:end="221:44">tail_buf</name> <operator pos:start="221:46" pos:end="221:46">+</operator> <name pos:start="221:48" pos:end="221:57">tail_bytes</name></expr></argument>, <argument pos:start="221:60" pos:end="221:77"><expr pos:start="221:60" pos:end="221:77"><name pos:start="221:60" pos:end="221:64">align</name> <operator pos:start="221:66" pos:end="221:66">-</operator> <name pos:start="221:68" pos:end="221:77">tail_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="225:9" pos:end="225:39"><expr pos:start="225:9" pos:end="225:38"><name pos:start="225:9" pos:end="225:13">bytes</name> <operator pos:start="225:15" pos:end="225:15">=</operator> <call pos:start="225:17" pos:end="225:38"><name pos:start="225:17" pos:end="225:24">ROUND_UP</name><argument_list pos:start="225:25" pos:end="225:38">(<argument pos:start="225:26" pos:end="225:30"><expr pos:start="225:26" pos:end="225:30"><name pos:start="225:26" pos:end="225:30">bytes</name></expr></argument>, <argument pos:start="225:33" pos:end="225:37"><expr pos:start="225:33" pos:end="225:37"><name pos:start="225:33" pos:end="225:37">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="231:5" pos:end="235:38"><expr pos:start="231:5" pos:end="235:37"><name pos:start="231:5" pos:end="231:7">ret</name> <operator pos:start="231:9" pos:end="231:9">=</operator> <call pos:start="231:11" pos:end="235:37"><name pos:start="231:11" pos:end="231:30">bdrv_aligned_pwritev</name><argument_list pos:start="231:31" pos:end="235:37">(<argument pos:start="231:32" pos:end="231:33"><expr pos:start="231:32" pos:end="231:33"><name pos:start="231:32" pos:end="231:33">bs</name></expr></argument>, <argument pos:start="231:36" pos:end="231:39"><expr pos:start="231:36" pos:end="231:39"><operator pos:start="231:36" pos:end="231:36">&amp;</operator><name pos:start="231:37" pos:end="231:39">req</name></expr></argument>, <argument pos:start="231:42" pos:end="231:47"><expr pos:start="231:42" pos:end="231:47"><name pos:start="231:42" pos:end="231:47">offset</name></expr></argument>, <argument pos:start="231:50" pos:end="231:54"><expr pos:start="231:50" pos:end="231:54"><name pos:start="231:50" pos:end="231:54">bytes</name></expr></argument>, <argument pos:start="231:57" pos:end="231:61"><expr pos:start="231:57" pos:end="231:61"><name pos:start="231:57" pos:end="231:61">align</name></expr></argument>,

                               <argument pos:start="233:32" pos:end="233:66"><expr pos:start="233:32" pos:end="233:66"><ternary pos:start="233:32" pos:end="233:66"><condition pos:start="233:32" pos:end="233:47"><expr pos:start="233:32" pos:end="233:45"><name pos:start="233:32" pos:end="233:45">use_local_qiov</name></expr> ?</condition><then pos:start="233:49" pos:end="233:59"> <expr pos:start="233:49" pos:end="233:59"><operator pos:start="233:49" pos:end="233:49">&amp;</operator><name pos:start="233:50" pos:end="233:59">local_qiov</name></expr> </then><else pos:start="233:61" pos:end="233:66">: <expr pos:start="233:63" pos:end="233:66"><name pos:start="233:63" pos:end="233:66">qiov</name></expr></else></ternary></expr></argument>,

                               <argument pos:start="235:32" pos:end="235:36"><expr pos:start="235:32" pos:end="235:36"><name pos:start="235:32" pos:end="235:36">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="239:1" pos:end="239:5"><name pos:start="239:1" pos:end="239:4">fail</name>:</label>



    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:23">(<expr pos:start="243:9" pos:end="243:22"><name pos:start="243:9" pos:end="243:22">use_local_qiov</name></expr>)</condition> <block pos:start="243:25" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:40">

        <expr_stmt pos:start="245:9" pos:end="245:40"><expr pos:start="245:9" pos:end="245:39"><call pos:start="245:9" pos:end="245:39"><name pos:start="245:9" pos:end="245:26">qemu_iovec_destroy</name><argument_list pos:start="245:27" pos:end="245:39">(<argument pos:start="245:28" pos:end="245:38"><expr pos:start="245:28" pos:end="245:38"><operator pos:start="245:28" pos:end="245:28">&amp;</operator><name pos:start="245:29" pos:end="245:38">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:25"><expr pos:start="249:5" pos:end="249:24"><call pos:start="249:5" pos:end="249:24"><name pos:start="249:5" pos:end="249:14">qemu_vfree</name><argument_list pos:start="249:15" pos:end="249:24">(<argument pos:start="249:16" pos:end="249:23"><expr pos:start="249:16" pos:end="249:23"><name pos:start="249:16" pos:end="249:23">head_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:25"><expr pos:start="251:5" pos:end="251:24"><call pos:start="251:5" pos:end="251:24"><name pos:start="251:5" pos:end="251:14">qemu_vfree</name><argument_list pos:start="251:15" pos:end="251:24">(<argument pos:start="251:16" pos:end="251:23"><expr pos:start="251:16" pos:end="251:23"><name pos:start="251:16" pos:end="251:23">tail_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="253:1" pos:end="253:4"><name pos:start="253:1" pos:end="253:3">out</name>:</label>

    <expr_stmt pos:start="255:5" pos:end="255:30"><expr pos:start="255:5" pos:end="255:29"><call pos:start="255:5" pos:end="255:29"><name pos:start="255:5" pos:end="255:23">tracked_request_end</name><argument_list pos:start="255:24" pos:end="255:29">(<argument pos:start="255:25" pos:end="255:28"><expr pos:start="255:25" pos:end="255:28"><operator pos:start="255:25" pos:end="255:25">&amp;</operator><name pos:start="255:26" pos:end="255:28">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:27"><expr pos:start="257:5" pos:end="257:26"><call pos:start="257:5" pos:end="257:26"><name pos:start="257:5" pos:end="257:22">bdrv_dec_in_flight</name><argument_list pos:start="257:23" pos:end="257:26">(<argument pos:start="257:24" pos:end="257:25"><expr pos:start="257:24" pos:end="257:25"><name pos:start="257:24" pos:end="257:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="259:5" pos:end="259:15">return <expr pos:start="259:12" pos:end="259:14"><name pos:start="259:12" pos:end="259:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
