<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4459.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">usb_msd_handle_data</name><parameter_list pos:start="1:31" pos:end="1:60">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:40">USBDevice</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:56">USBPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="303:1">{<block_content pos:start="5:5" pos:end="301:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MSDState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:33">= <expr pos:start="5:19" pos:end="5:33"><operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:27">MSDState</name> <operator pos:start="5:29" pos:end="5:29">*</operator><operator pos:start="5:30" pos:end="5:30">)</operator><name pos:start="5:31" pos:end="5:33">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">usb_msd_cbw</name></name></type> <name pos:start="9:24" pos:end="9:26">cbw</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:17">devep</name> <init pos:start="11:19" pos:end="11:28">= <expr pos:start="11:21" pos:end="11:28"><name pos:start="11:21" pos:end="11:28"><name pos:start="11:21" pos:end="11:21">p</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:28">devep</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="297:5">switch <condition pos:start="15:12" pos:end="15:19">(<expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:13">p</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">pid</name></name></expr>)</condition> <block pos:start="15:21" pos:end="297:5">{<block_content pos:start="17:5" pos:end="295:14">

    <case pos:start="17:5" pos:end="17:23">case <expr pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:22">USB_TOKEN_OUT</name></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="21:22"><if pos:start="19:9" pos:end="21:22">if <condition pos:start="19:12" pos:end="19:23">(<expr pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:17">devep</name> <operator pos:start="19:19" pos:end="19:20">!=</operator> <literal type="number" pos:start="19:22" pos:end="19:22">2</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:22"><block_content pos:start="21:13" pos:end="21:22">

            <goto pos:start="21:13" pos:end="21:22">goto <name pos:start="21:18" pos:end="21:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <switch pos:start="25:9" pos:end="167:9">switch <condition pos:start="25:16" pos:end="25:24">(<expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:23">mode</name></name></expr>)</condition> <block pos:start="25:26" pos:end="167:9">{<block_content pos:start="27:9" pos:end="165:22">

        <case pos:start="27:9" pos:end="27:26">case <expr pos:start="27:14" pos:end="27:25"><name pos:start="27:14" pos:end="27:25">USB_MSDM_CBW</name></expr>:</case>

            <if_stmt pos:start="29:13" pos:end="35:13"><if pos:start="29:13" pos:end="35:13">if <condition pos:start="29:16" pos:end="29:34">(<expr pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:17">p</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:22">iov</name><operator pos:start="29:23" pos:end="29:23">.</operator><name pos:start="29:24" pos:end="29:27">size</name></name> <operator pos:start="29:29" pos:end="29:30">!=</operator> <literal type="number" pos:start="29:32" pos:end="29:33">31</literal></expr>)</condition> <block pos:start="29:36" pos:end="35:13">{<block_content pos:start="31:17" pos:end="33:26">

                <expr_stmt pos:start="31:17" pos:end="31:57"><expr pos:start="31:17" pos:end="31:56"><call pos:start="31:17" pos:end="31:56"><name pos:start="31:17" pos:end="31:23">fprintf</name><argument_list pos:start="31:24" pos:end="31:56">(<argument pos:start="31:25" pos:end="31:30"><expr pos:start="31:25" pos:end="31:30"><name pos:start="31:25" pos:end="31:30">stderr</name></expr></argument>, <argument pos:start="31:33" pos:end="31:55"><expr pos:start="31:33" pos:end="31:55"><literal type="string" pos:start="31:33" pos:end="31:55">"usb-msd: Bad CBW size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="33:17" pos:end="33:26">goto <name pos:start="33:22" pos:end="33:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:41"><expr pos:start="37:13" pos:end="37:40"><call pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:27">usb_packet_copy</name><argument_list pos:start="37:28" pos:end="37:40">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">p</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:35">cbw</name></expr></argument>, <argument pos:start="37:38" pos:end="37:39"><expr pos:start="37:38" pos:end="37:39"><literal type="number" pos:start="37:38" pos:end="37:39">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="47:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="39:51">(<expr pos:start="39:17" pos:end="39:50"><call pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:27">le32_to_cpu</name><argument_list pos:start="39:28" pos:end="39:36">(<argument pos:start="39:29" pos:end="39:35"><expr pos:start="39:29" pos:end="39:35"><name pos:start="39:29" pos:end="39:35"><name pos:start="39:29" pos:end="39:31">cbw</name><operator pos:start="39:32" pos:end="39:32">.</operator><name pos:start="39:33" pos:end="39:35">sig</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:38" pos:end="39:39">!=</operator> <literal type="number" pos:start="39:41" pos:end="39:50">0x43425355</literal></expr>)</condition> <block pos:start="39:53" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:26">

                <expr_stmt pos:start="41:17" pos:end="43:46"><expr pos:start="41:17" pos:end="43:45"><call pos:start="41:17" pos:end="43:45"><name pos:start="41:17" pos:end="41:23">fprintf</name><argument_list pos:start="41:24" pos:end="43:45">(<argument pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:30">stderr</name></expr></argument>, <argument pos:start="41:33" pos:end="41:63"><expr pos:start="41:33" pos:end="41:63"><literal type="string" pos:start="41:33" pos:end="41:63">"usb-msd: Bad signature %08x\n"</literal></expr></argument>,

                        <argument pos:start="43:25" pos:end="43:44"><expr pos:start="43:25" pos:end="43:44"><call pos:start="43:25" pos:end="43:44"><name pos:start="43:25" pos:end="43:35">le32_to_cpu</name><argument_list pos:start="43:36" pos:end="43:44">(<argument pos:start="43:37" pos:end="43:43"><expr pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:39">cbw</name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:43">sig</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="45:17" pos:end="45:26">goto <name pos:start="45:22" pos:end="45:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:52"><expr pos:start="49:13" pos:end="49:51"><call pos:start="49:13" pos:end="49:51"><name pos:start="49:13" pos:end="49:19">DPRINTF</name><argument_list pos:start="49:20" pos:end="49:51">(<argument pos:start="49:21" pos:end="49:41"><expr pos:start="49:21" pos:end="49:41"><literal type="string" pos:start="49:21" pos:end="49:41">"Command on LUN %d\n"</literal></expr></argument>, <argument pos:start="49:44" pos:end="49:50"><expr pos:start="49:44" pos:end="49:50"><name pos:start="49:44" pos:end="49:50"><name pos:start="49:44" pos:end="49:46">cbw</name><operator pos:start="49:47" pos:end="49:47">.</operator><name pos:start="49:48" pos:end="49:50">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:29">(<expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:19">cbw</name><operator pos:start="51:20" pos:end="51:20">.</operator><name pos:start="51:21" pos:end="51:23">lun</name></name> <operator pos:start="51:25" pos:end="51:26">!=</operator> <literal type="number" pos:start="51:28" pos:end="51:28">0</literal></expr>)</condition> <block pos:start="51:31" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:26">

                <expr_stmt pos:start="53:17" pos:end="53:66"><expr pos:start="53:17" pos:end="53:65"><call pos:start="53:17" pos:end="53:65"><name pos:start="53:17" pos:end="53:23">fprintf</name><argument_list pos:start="53:24" pos:end="53:65">(<argument pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:30">stderr</name></expr></argument>, <argument pos:start="53:33" pos:end="53:55"><expr pos:start="53:33" pos:end="53:55"><literal type="string" pos:start="53:33" pos:end="53:55">"usb-msd: Bad LUN %d\n"</literal></expr></argument>, <argument pos:start="53:58" pos:end="53:64"><expr pos:start="53:58" pos:end="53:64"><name pos:start="53:58" pos:end="53:64"><name pos:start="53:58" pos:end="53:60">cbw</name><operator pos:start="53:61" pos:end="53:61">.</operator><name pos:start="53:62" pos:end="53:64">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="55:17" pos:end="55:26">goto <name pos:start="55:22" pos:end="55:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:42"><expr pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:18">tag</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <call pos:start="59:22" pos:end="59:41"><name pos:start="59:22" pos:end="59:32">le32_to_cpu</name><argument_list pos:start="59:33" pos:end="59:41">(<argument pos:start="59:34" pos:end="59:40"><expr pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:36">cbw</name><operator pos:start="59:37" pos:end="59:37">.</operator><name pos:start="59:38" pos:end="59:40">tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:52"><expr pos:start="61:13" pos:end="61:51"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">data_len</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:51"><name pos:start="61:27" pos:end="61:37">le32_to_cpu</name><argument_list pos:start="61:38" pos:end="61:51">(<argument pos:start="61:39" pos:end="61:50"><expr pos:start="61:39" pos:end="61:50"><name pos:start="61:39" pos:end="61:50"><name pos:start="61:39" pos:end="61:41">cbw</name><operator pos:start="61:42" pos:end="61:42">.</operator><name pos:start="61:43" pos:end="61:50">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="75:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:33">(<expr pos:start="63:17" pos:end="63:32"><name pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:27">data_len</name></name> <operator pos:start="63:29" pos:end="63:30">==</operator> <literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>)</condition> <block pos:start="63:35" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:39">

                <expr_stmt pos:start="65:17" pos:end="65:39"><expr pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:23">mode</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:38">USB_MSDM_CSW</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="67:15" pos:end="71:13">else if <condition pos:start="67:23" pos:end="67:40">(<expr pos:start="67:24" pos:end="67:39"><name pos:start="67:24" pos:end="67:32"><name pos:start="67:24" pos:end="67:26">cbw</name><operator pos:start="67:27" pos:end="67:27">.</operator><name pos:start="67:28" pos:end="67:32">flags</name></name> <operator pos:start="67:34" pos:end="67:34">&amp;</operator> <literal type="number" pos:start="67:36" pos:end="67:39">0x80</literal></expr>)</condition> <block pos:start="67:42" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:42">

                <expr_stmt pos:start="69:17" pos:end="69:42"><expr pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:23">mode</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:41">USB_MSDM_DATAIN</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="75:13">else <block pos:start="71:20" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:43">

                <expr_stmt pos:start="73:17" pos:end="73:43"><expr pos:start="73:17" pos:end="73:42"><name pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:23">mode</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:42">USB_MSDM_DATAOUT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="79:65"><expr pos:start="77:13" pos:end="79:64"><call pos:start="77:13" pos:end="79:64"><name pos:start="77:13" pos:end="77:19">DPRINTF</name><argument_list pos:start="77:20" pos:end="79:64">(<argument pos:start="77:21" pos:end="77:66"><expr pos:start="77:21" pos:end="77:66"><literal type="string" pos:start="77:21" pos:end="77:66">"Command tag 0x%x flags %08x len %d data %d\n"</literal></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:26">tag</name></name></expr></argument>, <argument pos:start="79:29" pos:end="79:37"><expr pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:31">cbw</name><operator pos:start="79:32" pos:end="79:32">.</operator><name pos:start="79:33" pos:end="79:37">flags</name></name></expr></argument>, <argument pos:start="79:40" pos:end="79:50"><expr pos:start="79:40" pos:end="79:50"><name pos:start="79:40" pos:end="79:50"><name pos:start="79:40" pos:end="79:42">cbw</name><operator pos:start="79:43" pos:end="79:43">.</operator><name pos:start="79:44" pos:end="79:50">cmd_len</name></name></expr></argument>, <argument pos:start="79:53" pos:end="79:63"><expr pos:start="79:53" pos:end="79:63"><name pos:start="79:53" pos:end="79:63"><name pos:start="79:53" pos:end="79:53">s</name><operator pos:start="79:54" pos:end="79:55">-&gt;</operator><name pos:start="79:56" pos:end="79:63">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:27"><expr pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:22">residue</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:28"><expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">scsi_len</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:64"><expr pos:start="85:13" pos:end="85:63"><name pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:18">req</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:63"><name pos:start="85:22" pos:end="85:33">scsi_req_new</name><argument_list pos:start="85:34" pos:end="85:63">(<argument pos:start="85:35" pos:end="85:45"><expr pos:start="85:35" pos:end="85:45"><name pos:start="85:35" pos:end="85:45"><name pos:start="85:35" pos:end="85:35">s</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:45">scsi_dev</name></name></expr></argument>, <argument pos:start="85:48" pos:end="85:53"><expr pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:48">s</name><operator pos:start="85:49" pos:end="85:50">-&gt;</operator><name pos:start="85:51" pos:end="85:53">tag</name></name></expr></argument>, <argument pos:start="85:56" pos:end="85:56"><expr pos:start="85:56" pos:end="85:56"><literal type="number" pos:start="85:56" pos:end="85:56">0</literal></expr></argument>, <argument pos:start="85:59" pos:end="85:62"><expr pos:start="85:59" pos:end="85:62"><name pos:start="85:59" pos:end="85:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:46"><expr pos:start="87:13" pos:end="87:45"><call pos:start="87:13" pos:end="87:45"><name pos:start="87:13" pos:end="87:28">scsi_req_enqueue</name><argument_list pos:start="87:29" pos:end="87:45">(<argument pos:start="87:30" pos:end="87:35"><expr pos:start="87:30" pos:end="87:35"><name pos:start="87:30" pos:end="87:35"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:35">req</name></name></expr></argument>, <argument pos:start="87:38" pos:end="87:44"><expr pos:start="87:38" pos:end="87:44"><name pos:start="87:38" pos:end="87:44"><name pos:start="87:38" pos:end="87:40">cbw</name><operator pos:start="87:41" pos:end="87:41">.</operator><name pos:start="87:42" pos:end="87:44">cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="89:13" pos:end="91:36">/* ??? Should check that USB and SCSI data transfer

               directions match.  */</comment>

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:59">(<expr pos:start="93:17" pos:end="93:58"><name pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:23">mode</name></name> <operator pos:start="93:25" pos:end="93:26">!=</operator> <name pos:start="93:28" pos:end="93:39">USB_MSDM_CSW</name> <operator pos:start="93:41" pos:end="93:42">&amp;&amp;</operator> <name pos:start="93:44" pos:end="93:53"><name pos:start="93:44" pos:end="93:44">s</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:53">residue</name></name> <operator pos:start="93:55" pos:end="93:56">==</operator> <literal type="number" pos:start="93:58" pos:end="93:58">0</literal></expr>)</condition> <block pos:start="93:61" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:42">

                <expr_stmt pos:start="95:17" pos:end="95:42"><expr pos:start="95:17" pos:end="95:41"><call pos:start="95:17" pos:end="95:41"><name pos:start="95:17" pos:end="95:33">scsi_req_continue</name><argument_list pos:start="95:34" pos:end="95:41">(<argument pos:start="95:35" pos:end="95:40"><expr pos:start="95:35" pos:end="95:40"><name pos:start="95:35" pos:end="95:40"><name pos:start="95:35" pos:end="95:35">s</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:40">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:28"><expr pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <name pos:start="99:19" pos:end="99:27"><name pos:start="99:19" pos:end="99:19">p</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:27">result</name></name></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>



        <case pos:start="105:9" pos:end="105:30">case <expr pos:start="105:14" pos:end="105:29"><name pos:start="105:14" pos:end="105:29">USB_MSDM_DATAOUT</name></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:67"><expr pos:start="107:13" pos:end="107:66"><call pos:start="107:13" pos:end="107:66"><name pos:start="107:13" pos:end="107:19">DPRINTF</name><argument_list pos:start="107:20" pos:end="107:66">(<argument pos:start="107:21" pos:end="107:39"><expr pos:start="107:21" pos:end="107:39"><literal type="string" pos:start="107:21" pos:end="107:39">"Data out %zd/%d\n"</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:52"><expr pos:start="107:42" pos:end="107:52"><name pos:start="107:42" pos:end="107:52"><name pos:start="107:42" pos:end="107:42">p</name><operator pos:start="107:43" pos:end="107:44">-&gt;</operator><name pos:start="107:45" pos:end="107:47">iov</name><operator pos:start="107:48" pos:end="107:48">.</operator><name pos:start="107:49" pos:end="107:52">size</name></name></expr></argument>, <argument pos:start="107:55" pos:end="107:65"><expr pos:start="107:55" pos:end="107:65"><name pos:start="107:55" pos:end="107:65"><name pos:start="107:55" pos:end="107:55">s</name><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:65">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="113:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:42">(<expr pos:start="109:17" pos:end="109:41"><name pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:17">p</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:22">iov</name><operator pos:start="109:23" pos:end="109:23">.</operator><name pos:start="109:24" pos:end="109:27">size</name></name> <operator pos:start="109:29" pos:end="109:29">&gt;</operator> <name pos:start="109:31" pos:end="109:41"><name pos:start="109:31" pos:end="109:31">s</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:41">data_len</name></name></expr>)</condition> <block pos:start="109:44" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:26">

                <goto pos:start="111:17" pos:end="111:26">goto <name pos:start="111:22" pos:end="111:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:28">(<expr pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:27">scsi_len</name></name></expr>)</condition> <block pos:start="117:30" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:40">

                <expr_stmt pos:start="119:17" pos:end="119:40"><expr pos:start="119:17" pos:end="119:39"><call pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:33">usb_msd_copy_data</name><argument_list pos:start="119:34" pos:end="119:39">(<argument pos:start="119:35" pos:end="119:35"><expr pos:start="119:35" pos:end="119:35"><name pos:start="119:35" pos:end="119:35">s</name></expr></argument>, <argument pos:start="119:38" pos:end="119:38"><expr pos:start="119:38" pos:end="119:38"><name pos:start="119:38" pos:end="119:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="123:13" pos:end="141:13"><if pos:start="123:13" pos:end="141:13">if <condition pos:start="123:16" pos:end="123:27">(<expr pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:26">residue</name></name></expr>)</condition> <block pos:start="123:29" pos:end="141:13">{<block_content pos:start="125:17" pos:end="139:17">

                <decl_stmt pos:start="125:17" pos:end="125:50"><decl pos:start="125:17" pos:end="125:49"><type pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">int</name></type> <name pos:start="125:21" pos:end="125:23">len</name> <init pos:start="125:25" pos:end="125:49">= <expr pos:start="125:27" pos:end="125:49"><name pos:start="125:27" pos:end="125:37"><name pos:start="125:27" pos:end="125:27">p</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:32">iov</name><operator pos:start="125:33" pos:end="125:33">.</operator><name pos:start="125:34" pos:end="125:37">size</name></name> <operator pos:start="125:39" pos:end="125:39">-</operator> <name pos:start="125:41" pos:end="125:49"><name pos:start="125:41" pos:end="125:41">p</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:49">result</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="127:17" pos:end="139:17"><if pos:start="127:17" pos:end="139:17">if <condition pos:start="127:20" pos:end="127:24">(<expr pos:start="127:21" pos:end="127:23"><name pos:start="127:21" pos:end="127:23">len</name></expr>)</condition> <block pos:start="127:26" pos:end="139:17">{<block_content pos:start="129:21" pos:end="137:21">

                    <expr_stmt pos:start="129:21" pos:end="129:44"><expr pos:start="129:21" pos:end="129:43"><call pos:start="129:21" pos:end="129:43"><name pos:start="129:21" pos:end="129:35">usb_packet_skip</name><argument_list pos:start="129:36" pos:end="129:43">(<argument pos:start="129:37" pos:end="129:37"><expr pos:start="129:37" pos:end="129:37"><name pos:start="129:37" pos:end="129:37">p</name></expr></argument>, <argument pos:start="129:40" pos:end="129:42"><expr pos:start="129:40" pos:end="129:42"><name pos:start="129:40" pos:end="129:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="131:21" pos:end="131:39"><expr pos:start="131:21" pos:end="131:38"><name pos:start="131:21" pos:end="131:31"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:31">data_len</name></name> <operator pos:start="131:33" pos:end="131:34">-=</operator> <name pos:start="131:36" pos:end="131:38">len</name></expr>;</expr_stmt>

                    <if_stmt pos:start="133:21" pos:end="137:21"><if pos:start="133:21" pos:end="137:21">if <condition pos:start="133:24" pos:end="133:41">(<expr pos:start="133:25" pos:end="133:40"><name pos:start="133:25" pos:end="133:35"><name pos:start="133:25" pos:end="133:25">s</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:35">data_len</name></name> <operator pos:start="133:37" pos:end="133:38">==</operator> <literal type="number" pos:start="133:40" pos:end="133:40">0</literal></expr>)</condition> <block pos:start="133:43" pos:end="137:21">{<block_content pos:start="135:25" pos:end="135:47">

                        <expr_stmt pos:start="135:25" pos:end="135:47"><expr pos:start="135:25" pos:end="135:46"><name pos:start="135:25" pos:end="135:31"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:31">mode</name></name> <operator pos:start="135:33" pos:end="135:33">=</operator> <name pos:start="135:35" pos:end="135:46">USB_MSDM_CSW</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="143:13" pos:end="155:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:40">(<expr pos:start="143:17" pos:end="143:39"><name pos:start="143:17" pos:end="143:25"><name pos:start="143:17" pos:end="143:17">p</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:25">result</name></name> <operator pos:start="143:27" pos:end="143:27">&lt;</operator> <name pos:start="143:29" pos:end="143:39"><name pos:start="143:29" pos:end="143:29">p</name><operator pos:start="143:30" pos:end="143:31">-&gt;</operator><name pos:start="143:32" pos:end="143:34">iov</name><operator pos:start="143:35" pos:end="143:35">.</operator><name pos:start="143:36" pos:end="143:39">size</name></name></expr>)</condition> <block pos:start="143:42" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:36">

                <expr_stmt pos:start="145:17" pos:end="145:52"><expr pos:start="145:17" pos:end="145:51"><call pos:start="145:17" pos:end="145:51"><name pos:start="145:17" pos:end="145:23">DPRINTF</name><argument_list pos:start="145:24" pos:end="145:51">(<argument pos:start="145:25" pos:end="145:47"><expr pos:start="145:25" pos:end="145:47"><literal type="string" pos:start="145:25" pos:end="145:47">"Deferring packet %p\n"</literal></expr></argument>, <argument pos:start="145:50" pos:end="145:50"><expr pos:start="145:50" pos:end="145:50"><name pos:start="145:50" pos:end="145:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:30"><expr pos:start="147:17" pos:end="147:29"><name pos:start="147:17" pos:end="147:25"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:25">packet</name></name> <operator pos:start="147:27" pos:end="147:27">=</operator> <name pos:start="147:29" pos:end="147:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:36"><expr pos:start="149:17" pos:end="149:35"><name pos:start="149:17" pos:end="149:19">ret</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <name pos:start="149:23" pos:end="149:35">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="155:13">else <block pos:start="151:20" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:32">

                <expr_stmt pos:start="153:17" pos:end="153:32"><expr pos:start="153:17" pos:end="153:31"><name pos:start="153:17" pos:end="153:19">ret</name> <operator pos:start="153:21" pos:end="153:21">=</operator> <name pos:start="153:23" pos:end="153:31"><name pos:start="153:23" pos:end="153:23">p</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:31">result</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>



        <default pos:start="161:9" pos:end="161:16">default:</default>

            <expr_stmt pos:start="163:13" pos:end="163:65"><expr pos:start="163:13" pos:end="163:64"><call pos:start="163:13" pos:end="163:64"><name pos:start="163:13" pos:end="163:19">DPRINTF</name><argument_list pos:start="163:20" pos:end="163:64">(<argument pos:start="163:21" pos:end="163:50"><expr pos:start="163:21" pos:end="163:50"><literal type="string" pos:start="163:21" pos:end="163:50">"Unexpected write (len %zd)\n"</literal></expr></argument>, <argument pos:start="163:53" pos:end="163:63"><expr pos:start="163:53" pos:end="163:63"><name pos:start="163:53" pos:end="163:63"><name pos:start="163:53" pos:end="163:53">p</name><operator pos:start="163:54" pos:end="163:55">-&gt;</operator><name pos:start="163:56" pos:end="163:58">iov</name><operator pos:start="163:59" pos:end="163:59">.</operator><name pos:start="163:60" pos:end="163:63">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="165:13" pos:end="165:22">goto <name pos:start="165:18" pos:end="165:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="169:9" pos:end="169:14">break;</break>



    <case pos:start="173:5" pos:end="173:22">case <expr pos:start="173:10" pos:end="173:21"><name pos:start="173:10" pos:end="173:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="175:9" pos:end="177:22"><if pos:start="175:9" pos:end="177:22">if <condition pos:start="175:12" pos:end="175:23">(<expr pos:start="175:13" pos:end="175:22"><name pos:start="175:13" pos:end="175:17">devep</name> <operator pos:start="175:19" pos:end="175:20">!=</operator> <literal type="number" pos:start="175:22" pos:end="175:22">1</literal></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:22"><block_content pos:start="177:13" pos:end="177:22">

            <goto pos:start="177:13" pos:end="177:22">goto <name pos:start="177:18" pos:end="177:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <switch pos:start="181:9" pos:end="281:9">switch <condition pos:start="181:16" pos:end="181:24">(<expr pos:start="181:17" pos:end="181:23"><name pos:start="181:17" pos:end="181:23"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:23">mode</name></name></expr>)</condition> <block pos:start="181:26" pos:end="281:9">{<block_content pos:start="183:9" pos:end="279:22">

        <case pos:start="183:9" pos:end="183:30">case <expr pos:start="183:14" pos:end="183:29"><name pos:start="183:14" pos:end="183:29">USB_MSDM_DATAOUT</name></expr>:</case>

            <if_stmt pos:start="185:13" pos:end="189:13"><if pos:start="185:13" pos:end="189:13">if <condition pos:start="185:16" pos:end="185:53">(<expr pos:start="185:17" pos:end="185:52"><name pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:17">s</name><operator pos:start="185:18" pos:end="185:19">-&gt;</operator><name pos:start="185:20" pos:end="185:27">data_len</name></name> <operator pos:start="185:29" pos:end="185:30">!=</operator> <literal type="number" pos:start="185:32" pos:end="185:32">0</literal> <operator pos:start="185:34" pos:end="185:35">||</operator> <name pos:start="185:37" pos:end="185:47"><name pos:start="185:37" pos:end="185:37">p</name><operator pos:start="185:38" pos:end="185:39">-&gt;</operator><name pos:start="185:40" pos:end="185:42">iov</name><operator pos:start="185:43" pos:end="185:43">.</operator><name pos:start="185:44" pos:end="185:47">size</name></name> <operator pos:start="185:49" pos:end="185:49">&lt;</operator> <literal type="number" pos:start="185:51" pos:end="185:52">13</literal></expr>)</condition> <block pos:start="185:55" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:26">

                <goto pos:start="187:17" pos:end="187:26">goto <name pos:start="187:22" pos:end="187:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="191:13" pos:end="191:54">/* Waiting for SCSI write to complete.  */</comment>

            <expr_stmt pos:start="193:13" pos:end="193:26"><expr pos:start="193:13" pos:end="193:25"><name pos:start="193:13" pos:end="193:21"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:21">packet</name></name> <operator pos:start="193:23" pos:end="193:23">=</operator> <name pos:start="193:25" pos:end="193:25">p</name></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:32"><expr pos:start="195:13" pos:end="195:31"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <name pos:start="195:19" pos:end="195:31">USB_RET_ASYNC</name></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>



        <case pos:start="201:9" pos:end="201:26">case <expr pos:start="201:14" pos:end="201:25"><name pos:start="201:14" pos:end="201:25">USB_MSDM_CSW</name></expr>:</case>

            <expr_stmt pos:start="203:13" pos:end="205:52"><expr pos:start="203:13" pos:end="205:51"><call pos:start="203:13" pos:end="205:51"><name pos:start="203:13" pos:end="203:19">DPRINTF</name><argument_list pos:start="203:20" pos:end="205:51">(<argument pos:start="203:21" pos:end="203:59"><expr pos:start="203:21" pos:end="203:59"><literal type="string" pos:start="203:21" pos:end="203:59">"Command status %d tag 0x%x, len %zd\n"</literal></expr></argument>,

                    <argument pos:start="205:21" pos:end="205:29"><expr pos:start="205:21" pos:end="205:29"><name pos:start="205:21" pos:end="205:29"><name pos:start="205:21" pos:end="205:21">s</name><operator pos:start="205:22" pos:end="205:23">-&gt;</operator><name pos:start="205:24" pos:end="205:29">result</name></name></expr></argument>, <argument pos:start="205:32" pos:end="205:37"><expr pos:start="205:32" pos:end="205:37"><name pos:start="205:32" pos:end="205:37"><name pos:start="205:32" pos:end="205:32">s</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:37">tag</name></name></expr></argument>, <argument pos:start="205:40" pos:end="205:50"><expr pos:start="205:40" pos:end="205:50"><name pos:start="205:40" pos:end="205:50"><name pos:start="205:40" pos:end="205:40">p</name><operator pos:start="205:41" pos:end="205:42">-&gt;</operator><name pos:start="205:43" pos:end="205:45">iov</name><operator pos:start="205:46" pos:end="205:46">.</operator><name pos:start="205:47" pos:end="205:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="211:13"><if pos:start="207:13" pos:end="211:13">if <condition pos:start="207:16" pos:end="207:33">(<expr pos:start="207:17" pos:end="207:32"><name pos:start="207:17" pos:end="207:27"><name pos:start="207:17" pos:end="207:17">p</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:22">iov</name><operator pos:start="207:23" pos:end="207:23">.</operator><name pos:start="207:24" pos:end="207:27">size</name></name> <operator pos:start="207:29" pos:end="207:29">&lt;</operator> <literal type="number" pos:start="207:31" pos:end="207:32">13</literal></expr>)</condition> <block pos:start="207:35" pos:end="211:13">{<block_content pos:start="209:17" pos:end="209:26">

                <goto pos:start="209:17" pos:end="209:26">goto <name pos:start="209:22" pos:end="209:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="215:13" pos:end="215:38"><expr pos:start="215:13" pos:end="215:37"><call pos:start="215:13" pos:end="215:37"><name pos:start="215:13" pos:end="215:31">usb_msd_send_status</name><argument_list pos:start="215:32" pos:end="215:37">(<argument pos:start="215:33" pos:end="215:33"><expr pos:start="215:33" pos:end="215:33"><name pos:start="215:33" pos:end="215:33">s</name></expr></argument>, <argument pos:start="215:36" pos:end="215:36"><expr pos:start="215:36" pos:end="215:36"><name pos:start="215:36" pos:end="215:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:35"><expr pos:start="217:13" pos:end="217:34"><name pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:13">s</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:19">mode</name></name> <operator pos:start="217:21" pos:end="217:21">=</operator> <name pos:start="217:23" pos:end="217:34">USB_MSDM_CBW</name></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:21"><expr pos:start="219:13" pos:end="219:20"><name pos:start="219:13" pos:end="219:15">ret</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <literal type="number" pos:start="219:19" pos:end="219:20">13</literal></expr>;</expr_stmt>

            <break pos:start="221:13" pos:end="221:18">break;</break>



        <case pos:start="225:9" pos:end="225:29">case <expr pos:start="225:14" pos:end="225:28"><name pos:start="225:14" pos:end="225:28">USB_MSDM_DATAIN</name></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="229:59"><expr pos:start="227:13" pos:end="229:58"><call pos:start="227:13" pos:end="229:58"><name pos:start="227:13" pos:end="227:19">DPRINTF</name><argument_list pos:start="227:20" pos:end="229:58">(<argument pos:start="227:21" pos:end="227:51"><expr pos:start="227:21" pos:end="227:51"><literal type="string" pos:start="227:21" pos:end="227:51">"Data in %zd/%d, scsi_len %d\n"</literal></expr></argument>,

                    <argument pos:start="229:21" pos:end="229:31"><expr pos:start="229:21" pos:end="229:31"><name pos:start="229:21" pos:end="229:31"><name pos:start="229:21" pos:end="229:21">p</name><operator pos:start="229:22" pos:end="229:23">-&gt;</operator><name pos:start="229:24" pos:end="229:26">iov</name><operator pos:start="229:27" pos:end="229:27">.</operator><name pos:start="229:28" pos:end="229:31">size</name></name></expr></argument>, <argument pos:start="229:34" pos:end="229:44"><expr pos:start="229:34" pos:end="229:44"><name pos:start="229:34" pos:end="229:44"><name pos:start="229:34" pos:end="229:34">s</name><operator pos:start="229:35" pos:end="229:36">-&gt;</operator><name pos:start="229:37" pos:end="229:44">data_len</name></name></expr></argument>, <argument pos:start="229:47" pos:end="229:57"><expr pos:start="229:47" pos:end="229:57"><name pos:start="229:47" pos:end="229:57"><name pos:start="229:47" pos:end="229:47">s</name><operator pos:start="229:48" pos:end="229:49">-&gt;</operator><name pos:start="229:50" pos:end="229:57">scsi_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="235:13"><if pos:start="231:13" pos:end="235:13">if <condition pos:start="231:16" pos:end="231:28">(<expr pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:17">s</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:27">scsi_len</name></name></expr>)</condition> <block pos:start="231:30" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:40">

                <expr_stmt pos:start="233:17" pos:end="233:40"><expr pos:start="233:17" pos:end="233:39"><call pos:start="233:17" pos:end="233:39"><name pos:start="233:17" pos:end="233:33">usb_msd_copy_data</name><argument_list pos:start="233:34" pos:end="233:39">(<argument pos:start="233:35" pos:end="233:35"><expr pos:start="233:35" pos:end="233:35"><name pos:start="233:35" pos:end="233:35">s</name></expr></argument>, <argument pos:start="233:38" pos:end="233:38"><expr pos:start="233:38" pos:end="233:38"><name pos:start="233:38" pos:end="233:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="237:13" pos:end="255:13"><if pos:start="237:13" pos:end="255:13">if <condition pos:start="237:16" pos:end="237:27">(<expr pos:start="237:17" pos:end="237:26"><name pos:start="237:17" pos:end="237:26"><name pos:start="237:17" pos:end="237:17">s</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:26">residue</name></name></expr>)</condition> <block pos:start="237:29" pos:end="255:13">{<block_content pos:start="239:17" pos:end="253:17">

                <decl_stmt pos:start="239:17" pos:end="239:50"><decl pos:start="239:17" pos:end="239:49"><type pos:start="239:17" pos:end="239:19"><name pos:start="239:17" pos:end="239:19">int</name></type> <name pos:start="239:21" pos:end="239:23">len</name> <init pos:start="239:25" pos:end="239:49">= <expr pos:start="239:27" pos:end="239:49"><name pos:start="239:27" pos:end="239:37"><name pos:start="239:27" pos:end="239:27">p</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:32">iov</name><operator pos:start="239:33" pos:end="239:33">.</operator><name pos:start="239:34" pos:end="239:37">size</name></name> <operator pos:start="239:39" pos:end="239:39">-</operator> <name pos:start="239:41" pos:end="239:49"><name pos:start="239:41" pos:end="239:41">p</name><operator pos:start="239:42" pos:end="239:43">-&gt;</operator><name pos:start="239:44" pos:end="239:49">result</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="241:17" pos:end="253:17"><if pos:start="241:17" pos:end="253:17">if <condition pos:start="241:20" pos:end="241:24">(<expr pos:start="241:21" pos:end="241:23"><name pos:start="241:21" pos:end="241:23">len</name></expr>)</condition> <block pos:start="241:26" pos:end="253:17">{<block_content pos:start="243:21" pos:end="251:21">

                    <expr_stmt pos:start="243:21" pos:end="243:44"><expr pos:start="243:21" pos:end="243:43"><call pos:start="243:21" pos:end="243:43"><name pos:start="243:21" pos:end="243:35">usb_packet_skip</name><argument_list pos:start="243:36" pos:end="243:43">(<argument pos:start="243:37" pos:end="243:37"><expr pos:start="243:37" pos:end="243:37"><name pos:start="243:37" pos:end="243:37">p</name></expr></argument>, <argument pos:start="243:40" pos:end="243:42"><expr pos:start="243:40" pos:end="243:42"><name pos:start="243:40" pos:end="243:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="245:21" pos:end="245:39"><expr pos:start="245:21" pos:end="245:38"><name pos:start="245:21" pos:end="245:31"><name pos:start="245:21" pos:end="245:21">s</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:31">data_len</name></name> <operator pos:start="245:33" pos:end="245:34">-=</operator> <name pos:start="245:36" pos:end="245:38">len</name></expr>;</expr_stmt>

                    <if_stmt pos:start="247:21" pos:end="251:21"><if pos:start="247:21" pos:end="251:21">if <condition pos:start="247:24" pos:end="247:41">(<expr pos:start="247:25" pos:end="247:40"><name pos:start="247:25" pos:end="247:35"><name pos:start="247:25" pos:end="247:25">s</name><operator pos:start="247:26" pos:end="247:27">-&gt;</operator><name pos:start="247:28" pos:end="247:35">data_len</name></name> <operator pos:start="247:37" pos:end="247:38">==</operator> <literal type="number" pos:start="247:40" pos:end="247:40">0</literal></expr>)</condition> <block pos:start="247:43" pos:end="251:21">{<block_content pos:start="249:25" pos:end="249:47">

                        <expr_stmt pos:start="249:25" pos:end="249:47"><expr pos:start="249:25" pos:end="249:46"><name pos:start="249:25" pos:end="249:31"><name pos:start="249:25" pos:end="249:25">s</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:31">mode</name></name> <operator pos:start="249:33" pos:end="249:33">=</operator> <name pos:start="249:35" pos:end="249:46">USB_MSDM_CSW</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="257:13" pos:end="269:13"><if pos:start="257:13" pos:end="265:13">if <condition pos:start="257:16" pos:end="257:40">(<expr pos:start="257:17" pos:end="257:39"><name pos:start="257:17" pos:end="257:25"><name pos:start="257:17" pos:end="257:17">p</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:25">result</name></name> <operator pos:start="257:27" pos:end="257:27">&lt;</operator> <name pos:start="257:29" pos:end="257:39"><name pos:start="257:29" pos:end="257:29">p</name><operator pos:start="257:30" pos:end="257:31">-&gt;</operator><name pos:start="257:32" pos:end="257:34">iov</name><operator pos:start="257:35" pos:end="257:35">.</operator><name pos:start="257:36" pos:end="257:39">size</name></name></expr>)</condition> <block pos:start="257:42" pos:end="265:13">{<block_content pos:start="259:17" pos:end="263:36">

                <expr_stmt pos:start="259:17" pos:end="259:52"><expr pos:start="259:17" pos:end="259:51"><call pos:start="259:17" pos:end="259:51"><name pos:start="259:17" pos:end="259:23">DPRINTF</name><argument_list pos:start="259:24" pos:end="259:51">(<argument pos:start="259:25" pos:end="259:47"><expr pos:start="259:25" pos:end="259:47"><literal type="string" pos:start="259:25" pos:end="259:47">"Deferring packet %p\n"</literal></expr></argument>, <argument pos:start="259:50" pos:end="259:50"><expr pos:start="259:50" pos:end="259:50"><name pos:start="259:50" pos:end="259:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:30"><expr pos:start="261:17" pos:end="261:29"><name pos:start="261:17" pos:end="261:25"><name pos:start="261:17" pos:end="261:17">s</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:25">packet</name></name> <operator pos:start="261:27" pos:end="261:27">=</operator> <name pos:start="261:29" pos:end="261:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:36"><expr pos:start="263:17" pos:end="263:35"><name pos:start="263:17" pos:end="263:19">ret</name> <operator pos:start="263:21" pos:end="263:21">=</operator> <name pos:start="263:23" pos:end="263:35">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="265:15" pos:end="269:13">else <block pos:start="265:20" pos:end="269:13">{<block_content pos:start="267:17" pos:end="267:32">

                <expr_stmt pos:start="267:17" pos:end="267:32"><expr pos:start="267:17" pos:end="267:31"><name pos:start="267:17" pos:end="267:19">ret</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <name pos:start="267:23" pos:end="267:31"><name pos:start="267:23" pos:end="267:23">p</name><operator pos:start="267:24" pos:end="267:25">-&gt;</operator><name pos:start="267:26" pos:end="267:31">result</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>



        <default pos:start="275:9" pos:end="275:16">default:</default>

            <expr_stmt pos:start="277:13" pos:end="277:64"><expr pos:start="277:13" pos:end="277:63"><call pos:start="277:13" pos:end="277:63"><name pos:start="277:13" pos:end="277:19">DPRINTF</name><argument_list pos:start="277:20" pos:end="277:63">(<argument pos:start="277:21" pos:end="277:49"><expr pos:start="277:21" pos:end="277:49"><literal type="string" pos:start="277:21" pos:end="277:49">"Unexpected read (len %zd)\n"</literal></expr></argument>, <argument pos:start="277:52" pos:end="277:62"><expr pos:start="277:52" pos:end="277:62"><name pos:start="277:52" pos:end="277:62"><name pos:start="277:52" pos:end="277:52">p</name><operator pos:start="277:53" pos:end="277:54">-&gt;</operator><name pos:start="277:55" pos:end="277:57">iov</name><operator pos:start="277:58" pos:end="277:58">.</operator><name pos:start="277:59" pos:end="277:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="279:13" pos:end="279:22">goto <name pos:start="279:18" pos:end="279:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="283:9" pos:end="283:14">break;</break>



    <default pos:start="287:5" pos:end="287:12">default:</default>

        <expr_stmt pos:start="289:9" pos:end="289:31"><expr pos:start="289:9" pos:end="289:30"><call pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:15">DPRINTF</name><argument_list pos:start="289:16" pos:end="289:30">(<argument pos:start="289:17" pos:end="289:29"><expr pos:start="289:17" pos:end="289:29"><literal type="string" pos:start="289:17" pos:end="289:29">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="291:5" pos:end="291:9"><name pos:start="291:5" pos:end="291:8">fail</name>:</label>

        <expr_stmt pos:start="293:9" pos:end="293:28"><expr pos:start="293:9" pos:end="293:27"><name pos:start="293:9" pos:end="293:11">ret</name> <operator pos:start="293:13" pos:end="293:13">=</operator> <name pos:start="293:15" pos:end="293:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="301:5" pos:end="301:15">return <expr pos:start="301:12" pos:end="301:14"><name pos:start="301:12" pos:end="301:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
