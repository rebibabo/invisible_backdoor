<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25205.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:10">build_srat</name><argument_list pos:start="1:11" pos:end="1:73">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:49">BIOSLinker *linker</argument>, <argument pos:start="1:52" pos:end="1:72">VirtMachineState *vms</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:62">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:37"><name pos:start="5:5" pos:end="5:35">AcpiSystemResourceAffinityTable</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:41">srat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:33">AcpiSratProcessorGiccAffinity</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:39">core</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">AcpiSratMemoryAffinity</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:35">numamem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:21">srat_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:21">mem_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MachineClass</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:20">mc</name> <init pos:start="15:22" pos:end="15:45">= <expr pos:start="15:24" pos:end="15:45"><call pos:start="15:24" pos:end="15:45"><name pos:start="15:24" pos:end="15:40">MACHINE_GET_CLASS</name><argument_list pos:start="15:41" pos:end="15:45">(<argument pos:start="15:42" pos:end="15:44"><expr pos:start="15:42" pos:end="15:44"><name pos:start="15:42" pos:end="15:44">vms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:76"><decl pos:start="17:5" pos:end="17:75"><type pos:start="17:5" pos:end="17:25"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:23">CPUArchIdList</name> <modifier pos:start="17:25" pos:end="17:25">*</modifier></type><name pos:start="17:26" pos:end="17:33">cpu_list</name> <init pos:start="17:35" pos:end="17:75">= <expr pos:start="17:37" pos:end="17:75"><call pos:start="17:37" pos:end="17:75"><name pos:start="17:37" pos:end="17:61"><name pos:start="17:37" pos:end="17:38">mc</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:61">possible_cpu_arch_ids</name></name><argument_list pos:start="17:62" pos:end="17:75">(<argument pos:start="17:63" pos:end="17:74"><expr pos:start="17:63" pos:end="17:74"><call pos:start="17:63" pos:end="17:74"><name pos:start="17:63" pos:end="17:69">MACHINE</name><argument_list pos:start="17:70" pos:end="17:74">(<argument pos:start="17:71" pos:end="17:73"><expr pos:start="17:71" pos:end="17:73"><name pos:start="17:71" pos:end="17:73">vms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:14">srat_start</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:32"><name pos:start="21:18" pos:end="21:27">table_data</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:32">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:53"><expr pos:start="23:5" pos:end="23:52"><name pos:start="23:5" pos:end="23:8">srat</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:52"><name pos:start="23:12" pos:end="23:25">acpi_data_push</name><argument_list pos:start="23:26" pos:end="23:52">(<argument pos:start="23:27" pos:end="23:36"><expr pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:36">table_data</name></expr></argument>, <argument pos:start="23:39" pos:end="23:51"><expr pos:start="23:39" pos:end="23:51"><sizeof pos:start="23:39" pos:end="23:51">sizeof<argument_list pos:start="23:45" pos:end="23:51">(<argument pos:start="23:46" pos:end="23:50"><expr pos:start="23:46" pos:end="23:50"><operator pos:start="23:46" pos:end="23:46">*</operator><name pos:start="23:47" pos:end="23:50">srat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:8">srat</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:19">reserved1</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:36"><name pos:start="25:23" pos:end="25:33">cpu_to_le32</name><argument_list pos:start="25:34" pos:end="25:36">(<argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="47:5">for <control pos:start="29:9" pos:end="29:39">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:34"><expr pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:33"><name pos:start="29:21" pos:end="29:28">cpu_list</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:33">len</name></name></expr>;</condition> <incr pos:start="29:36" pos:end="29:38"><expr pos:start="29:36" pos:end="29:38"><operator pos:start="29:36" pos:end="29:37">++</operator><name pos:start="29:38" pos:end="29:38">i</name></expr></incr>)</control> <block pos:start="29:41" pos:end="47:5">{<block_content pos:start="31:9" pos:end="45:37">

        <decl_stmt pos:start="31:9" pos:end="33:48"><decl pos:start="31:9" pos:end="33:47"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:19">node_id</name> <init pos:start="31:21" pos:end="33:47">= <expr pos:start="31:23" pos:end="33:47"><ternary pos:start="31:23" pos:end="33:47"><condition pos:start="31:23" pos:end="31:59"><expr pos:start="31:23" pos:end="31:57"><name pos:start="31:23" pos:end="31:39"><name pos:start="31:23" pos:end="31:30">cpu_list</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:36">cpus</name><index pos:start="31:37" pos:end="31:39">[<expr pos:start="31:38" pos:end="31:38"><name pos:start="31:38" pos:end="31:38">i</name></expr>]</index></name><operator pos:start="31:40" pos:end="31:40">.</operator><name pos:start="31:41" pos:end="31:57"><name pos:start="31:41" pos:end="31:45">props</name><operator pos:start="31:46" pos:end="31:46">.</operator><name pos:start="31:47" pos:end="31:57">has_node_id</name></name></expr> ?</condition><then pos:start="33:13" pos:end="33:43">

            <expr pos:start="33:13" pos:end="33:43"><name pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:20">cpu_list</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:26">cpus</name><index pos:start="33:27" pos:end="33:29">[<expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">i</name></expr>]</index></name><operator pos:start="33:30" pos:end="33:30">.</operator><name pos:start="33:31" pos:end="33:43"><name pos:start="33:31" pos:end="33:35">props</name><operator pos:start="33:36" pos:end="33:36">.</operator><name pos:start="33:37" pos:end="33:43">node_id</name></name></expr> </then><else pos:start="33:45" pos:end="33:47">: <expr pos:start="33:47" pos:end="33:47"><literal type="number" pos:start="33:47" pos:end="33:47">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:12">core</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:56"><name pos:start="35:16" pos:end="35:29">acpi_data_push</name><argument_list pos:start="35:30" pos:end="35:56">(<argument pos:start="35:31" pos:end="35:40"><expr pos:start="35:31" pos:end="35:40"><name pos:start="35:31" pos:end="35:40">table_data</name></expr></argument>, <argument pos:start="35:43" pos:end="35:55"><expr pos:start="35:43" pos:end="35:55"><sizeof pos:start="35:43" pos:end="35:55">sizeof<argument_list pos:start="35:49" pos:end="35:55">(<argument pos:start="35:50" pos:end="35:54"><expr pos:start="35:50" pos:end="35:54"><operator pos:start="35:50" pos:end="35:50">*</operator><name pos:start="35:51" pos:end="35:54">core</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:46"><expr pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:12">core</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:18">type</name></name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:45">ACPI_SRAT_PROCESSOR_GICC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:37"><expr pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:12">core</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:20">length</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <sizeof pos:start="39:24" pos:end="39:36">sizeof<argument_list pos:start="39:30" pos:end="39:36">(<argument pos:start="39:31" pos:end="39:35"><expr pos:start="39:31" pos:end="39:35"><operator pos:start="39:31" pos:end="39:31">*</operator><name pos:start="39:32" pos:end="39:35">core</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:47"><expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:12">core</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:23">proximity</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <call pos:start="41:27" pos:end="41:46"><name pos:start="41:27" pos:end="41:37">cpu_to_le32</name><argument_list pos:start="41:38" pos:end="41:46">(<argument pos:start="41:39" pos:end="41:45"><expr pos:start="41:39" pos:end="41:45"><name pos:start="41:39" pos:end="41:45">node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:50"><expr pos:start="43:9" pos:end="43:49"><name pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:12">core</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:32">acpi_processor_uid</name></name> <operator pos:start="43:34" pos:end="43:34">=</operator> <call pos:start="43:36" pos:end="43:49"><name pos:start="43:36" pos:end="43:46">cpu_to_le32</name><argument_list pos:start="43:47" pos:end="43:49">(<argument pos:start="43:48" pos:end="43:48"><expr pos:start="43:48" pos:end="43:48"><name pos:start="43:48" pos:end="43:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:12">core</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:19">flags</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:36"><name pos:start="45:23" pos:end="45:33">cpu_to_le32</name><argument_list pos:start="45:34" pos:end="45:36">(<argument pos:start="45:35" pos:end="45:35"><expr pos:start="45:35" pos:end="45:35"><literal type="number" pos:start="45:35" pos:end="45:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:12">mem_base</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:36"><name pos:start="51:16" pos:end="51:18">vms</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:26">memmap</name><index pos:start="51:27" pos:end="51:36">[<expr pos:start="51:28" pos:end="51:35"><name pos:start="51:28" pos:end="51:35">VIRT_MEM</name></expr>]</index></name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:41">base</name></expr>;</expr_stmt>

    <for pos:start="53:5" pos:end="63:5">for <control pos:start="53:9" pos:end="53:39">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:34"><expr pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><operator pos:start="53:36" pos:end="53:37">++</operator><name pos:start="53:38" pos:end="53:38">i</name></expr></incr>)</control> <block pos:start="53:41" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:42">

        <expr_stmt pos:start="55:9" pos:end="55:63"><expr pos:start="55:9" pos:end="55:62"><name pos:start="55:9" pos:end="55:15">numamem</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:62"><name pos:start="55:19" pos:end="55:32">acpi_data_push</name><argument_list pos:start="55:33" pos:end="55:62">(<argument pos:start="55:34" pos:end="55:43"><expr pos:start="55:34" pos:end="55:43"><name pos:start="55:34" pos:end="55:43">table_data</name></expr></argument>, <argument pos:start="55:46" pos:end="55:61"><expr pos:start="55:46" pos:end="55:61"><sizeof pos:start="55:46" pos:end="55:61">sizeof<argument_list pos:start="55:52" pos:end="55:61">(<argument pos:start="55:53" pos:end="55:60"><expr pos:start="55:53" pos:end="55:60"><operator pos:start="55:53" pos:end="55:53">*</operator><name pos:start="55:54" pos:end="55:60">numamem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="59:48"><expr pos:start="57:9" pos:end="59:47"><call pos:start="57:9" pos:end="59:47"><name pos:start="57:9" pos:end="57:25">build_srat_memory</name><argument_list pos:start="57:26" pos:end="59:47">(<argument pos:start="57:27" pos:end="57:33"><expr pos:start="57:27" pos:end="57:33"><name pos:start="57:27" pos:end="57:33">numamem</name></expr></argument>, <argument pos:start="57:36" pos:end="57:43"><expr pos:start="57:36" pos:end="57:43"><name pos:start="57:36" pos:end="57:43">mem_base</name></expr></argument>, <argument pos:start="57:46" pos:end="57:66"><expr pos:start="57:46" pos:end="57:66"><name pos:start="57:46" pos:end="57:57"><name pos:start="57:46" pos:end="57:54">numa_info</name><index pos:start="57:55" pos:end="57:57">[<expr pos:start="57:56" pos:end="57:56"><name pos:start="57:56" pos:end="57:56">i</name></expr>]</index></name><operator pos:start="57:58" pos:end="57:58">.</operator><name pos:start="57:59" pos:end="57:66">node_mem</name></expr></argument>, <argument pos:start="57:69" pos:end="57:69"><expr pos:start="57:69" pos:end="57:69"><name pos:start="57:69" pos:end="57:69">i</name></expr></argument>,

                          <argument pos:start="59:27" pos:end="59:46"><expr pos:start="59:27" pos:end="59:46"><name pos:start="59:27" pos:end="59:46">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:16">mem_base</name> <operator pos:start="61:18" pos:end="61:19">+=</operator> <name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:29">numa_info</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">i</name></expr>]</index></name><operator pos:start="61:33" pos:end="61:33">.</operator><name pos:start="61:34" pos:end="61:41">node_mem</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="67:5" pos:end="69:62"><expr pos:start="67:5" pos:end="69:61"><call pos:start="67:5" pos:end="69:61"><name pos:start="67:5" pos:end="67:16">build_header</name><argument_list pos:start="67:17" pos:end="69:61">(<argument pos:start="67:18" pos:end="67:23"><expr pos:start="67:18" pos:end="67:23"><name pos:start="67:18" pos:end="67:23">linker</name></expr></argument>, <argument pos:start="67:26" pos:end="67:35"><expr pos:start="67:26" pos:end="67:35"><name pos:start="67:26" pos:end="67:35">table_data</name></expr></argument>, <argument pos:start="67:38" pos:end="67:49"><expr pos:start="67:38" pos:end="67:49"><operator pos:start="67:38" pos:end="67:38">(</operator><name pos:start="67:39" pos:end="67:42">void</name> <operator pos:start="67:44" pos:end="67:44">*</operator><operator pos:start="67:45" pos:end="67:45">)</operator><name pos:start="67:46" pos:end="67:49">srat</name></expr></argument>, <argument pos:start="67:52" pos:end="67:57"><expr pos:start="67:52" pos:end="67:57"><literal type="string" pos:start="67:52" pos:end="67:57">"SRAT"</literal></expr></argument>,

                 <argument pos:start="69:18" pos:end="69:45"><expr pos:start="69:18" pos:end="69:45"><name pos:start="69:18" pos:end="69:32"><name pos:start="69:18" pos:end="69:27">table_data</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:32">len</name></name> <operator pos:start="69:34" pos:end="69:34">-</operator> <name pos:start="69:36" pos:end="69:45">srat_start</name></expr></argument>, <argument pos:start="69:48" pos:end="69:48"><expr pos:start="69:48" pos:end="69:48"><literal type="number" pos:start="69:48" pos:end="69:48">3</literal></expr></argument>, <argument pos:start="69:51" pos:end="69:54"><expr pos:start="69:51" pos:end="69:54"><name pos:start="69:51" pos:end="69:54">NULL</name></expr></argument>, <argument pos:start="69:57" pos:end="69:60"><expr pos:start="69:57" pos:end="69:60"><name pos:start="69:57" pos:end="69:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
