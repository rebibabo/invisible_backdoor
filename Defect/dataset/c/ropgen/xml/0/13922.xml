<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13922.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">ff_alloc_packet2</name><parameter_list pos:start="1:21" pos:end="1:70">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:35">AVCodecContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:42">avctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:52">AVPacket</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avpkt</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:69"><decl pos:start="1:62" pos:end="1:69"><type pos:start="1:62" pos:end="1:69"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:69">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:5">

    <if_stmt pos:start="5:5" pos:end="11:5"><if pos:start="5:5" pos:end="11:5">if <condition pos:start="5:8" pos:end="5:85">(<expr pos:start="5:9" pos:end="5:84"><name pos:start="5:9" pos:end="5:45"><name pos:start="5:9" pos:end="5:12">size</name> <argument_list type="generic" pos:start="5:14" pos:end="5:45">&lt; <argument pos:start="5:16" pos:end="5:43"><expr pos:start="5:16" pos:end="5:43"><literal type="number" pos:start="5:16" pos:end="5:16">0</literal> <operator pos:start="5:18" pos:end="5:19">||</operator> <name pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:25">avpkt</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:31">size</name></name> <operator pos:start="5:33" pos:end="5:33">&lt;</operator> <literal type="number" pos:start="5:35" pos:end="5:35">0</literal> <operator pos:start="5:37" pos:end="5:38">||</operator> <name pos:start="5:40" pos:end="5:43">size</name></expr></argument> &gt;</argument_list></name> <name pos:start="5:47" pos:end="5:53">INT_MAX</name> <operator pos:start="5:55" pos:end="5:55">-</operator> <name pos:start="5:57" pos:end="5:84">FF_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition> <block pos:start="5:87" pos:end="11:5">{<block_content pos:start="7:9" pos:end="9:31">

        <expr_stmt pos:start="7:9" pos:end="7:63"><expr pos:start="7:9" pos:end="7:62"><call pos:start="7:9" pos:end="7:62"><name pos:start="7:9" pos:end="7:14">av_log</name><argument_list pos:start="7:15" pos:end="7:62">(<argument pos:start="7:16" pos:end="7:20"><expr pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:20">avctx</name></expr></argument>, <argument pos:start="7:23" pos:end="7:34"><expr pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="7:37" pos:end="7:55"><expr pos:start="7:37" pos:end="7:55"><literal type="string" pos:start="7:37" pos:end="7:55">"Size %d invalid\n"</literal></expr></argument>, <argument pos:start="7:58" pos:end="7:61"><expr pos:start="7:58" pos:end="7:61"><name pos:start="7:58" pos:end="7:61">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="9:9" pos:end="9:31">return <expr pos:start="9:16" pos:end="9:30"><call pos:start="9:16" pos:end="9:30"><name pos:start="9:16" pos:end="9:22">AVERROR</name><argument_list pos:start="9:23" pos:end="9:30">(<argument pos:start="9:24" pos:end="9:29"><expr pos:start="9:24" pos:end="9:29"><name pos:start="9:24" pos:end="9:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="31:5"><if pos:start="15:5" pos:end="31:5">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:13">avctx</name></expr>)</condition> <block pos:start="15:16" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:9">

        <expr_stmt pos:start="17:9" pos:end="17:80"><expr pos:start="17:9" pos:end="17:79"><call pos:start="17:9" pos:end="17:79"><name pos:start="17:9" pos:end="17:18">av_assert0</name><argument_list pos:start="17:19" pos:end="17:79">(<argument pos:start="17:20" pos:end="17:78"><expr pos:start="17:20" pos:end="17:78"><operator pos:start="17:20" pos:end="17:20">!</operator><name pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:25">avpkt</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:31">data</name></name> <operator pos:start="17:33" pos:end="17:34">||</operator> <name pos:start="17:36" pos:end="17:46"><name pos:start="17:36" pos:end="17:40">avpkt</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:46">data</name></name> <operator pos:start="17:48" pos:end="17:49">!=</operator> <name pos:start="17:51" pos:end="17:78"><name pos:start="17:51" pos:end="17:55">avctx</name><operator pos:start="17:56" pos:end="17:57">-&gt;</operator><name pos:start="17:58" pos:end="17:65">internal</name><operator pos:start="17:66" pos:end="17:67">-&gt;</operator><name pos:start="17:68" pos:end="17:78">byte_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="29:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="19:47">(<expr pos:start="19:13" pos:end="19:46"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:24"><name pos:start="19:14" pos:end="19:18">avpkt</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:24">data</name></name> <operator pos:start="19:26" pos:end="19:27">||</operator> <name pos:start="19:29" pos:end="19:39"><name pos:start="19:29" pos:end="19:33">avpkt</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:39">size</name></name> <operator pos:start="19:41" pos:end="19:41">&lt;</operator> <name pos:start="19:43" pos:end="19:46">size</name></expr>)</condition> <block pos:start="19:49" pos:end="29:9">{<block_content pos:start="21:13" pos:end="27:35">

            <expr_stmt pos:start="21:13" pos:end="21:107"><expr pos:start="21:13" pos:end="21:106"><call pos:start="21:13" pos:end="21:106"><name pos:start="21:13" pos:end="21:33">av_fast_padded_malloc</name><argument_list pos:start="21:34" pos:end="21:106">(<argument pos:start="21:35" pos:end="21:63"><expr pos:start="21:35" pos:end="21:63"><operator pos:start="21:35" pos:end="21:35">&amp;</operator><name pos:start="21:36" pos:end="21:63"><name pos:start="21:36" pos:end="21:40">avctx</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:50">internal</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:63">byte_buffer</name></name></expr></argument>, <argument pos:start="21:66" pos:end="21:99"><expr pos:start="21:66" pos:end="21:99"><operator pos:start="21:66" pos:end="21:66">&amp;</operator><name pos:start="21:67" pos:end="21:99"><name pos:start="21:67" pos:end="21:71">avctx</name><operator pos:start="21:72" pos:end="21:73">-&gt;</operator><name pos:start="21:74" pos:end="21:81">internal</name><operator pos:start="21:82" pos:end="21:83">-&gt;</operator><name pos:start="21:84" pos:end="21:99">byte_buffer_size</name></name></expr></argument>, <argument pos:start="21:102" pos:end="21:105"><expr pos:start="21:102" pos:end="21:105"><name pos:start="21:102" pos:end="21:105">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:55"><expr pos:start="23:13" pos:end="23:54"><name pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:17">avpkt</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:23">data</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:54"><name pos:start="23:27" pos:end="23:31">avctx</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:41">internal</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:54">byte_buffer</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:60"><expr pos:start="25:13" pos:end="25:59"><name pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:17">avpkt</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:23">size</name></name> <operator pos:start="25:25" pos:end="25:25">=</operator> <name pos:start="25:27" pos:end="25:59"><name pos:start="25:27" pos:end="25:31">avctx</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:41">internal</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:59">byte_buffer_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:35"><expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:17">avpkt</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:27">destruct</name></name> <operator pos:start="27:29" pos:end="27:29">=</operator> <name pos:start="27:31" pos:end="27:34">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="81:5"><if pos:start="35:5" pos:end="71:5">if <condition pos:start="35:8" pos:end="35:20">(<expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:13">avpkt</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">data</name></name></expr>)</condition> <block pos:start="35:22" pos:end="71:5">{<block_content pos:start="37:9" pos:end="69:17">

        <decl_stmt pos:start="37:9" pos:end="40:0"><decl pos:start="37:9" pos:end="37:37"><type pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:19">AVBufferRef</name> <modifier pos:start="37:21" pos:end="37:21">*</modifier></type><name pos:start="37:22" pos:end="37:24">buf</name> <init pos:start="37:26" pos:end="37:37">= <expr pos:start="37:28" pos:end="37:37"><name pos:start="37:28" pos:end="37:37"><name pos:start="37:28" pos:end="37:32">avpkt</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:37">buf</name></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="39:1" pos:end="39:26">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:26">FF_API_DESTRUCT_PACKET</name></expr></cpp:if>

        <decl_stmt pos:start="41:9" pos:end="44:0"><decl pos:start="41:9" pos:end="41:40"><type pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:12">void</name> <modifier pos:start="41:14" pos:end="41:14">*</modifier></type><name pos:start="41:15" pos:end="41:22">destruct</name> <init pos:start="41:24" pos:end="41:40">= <expr pos:start="41:26" pos:end="41:40"><name pos:start="41:26" pos:end="41:40"><name pos:start="41:26" pos:end="41:30">avpkt</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:40">destruct</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:31">(<expr pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:17">avpkt</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:23">size</name></name> <operator pos:start="47:25" pos:end="47:25">&lt;</operator> <name pos:start="47:27" pos:end="47:30">size</name></expr>)</condition> <block pos:start="47:33" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:35">

            <expr_stmt pos:start="49:13" pos:end="49:99"><expr pos:start="49:13" pos:end="49:98"><call pos:start="49:13" pos:end="49:98"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="49:98">(<argument pos:start="49:20" pos:end="49:24"><expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:24">avctx</name></expr></argument>, <argument pos:start="49:27" pos:end="49:38"><expr pos:start="49:27" pos:end="49:38"><name pos:start="49:27" pos:end="49:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:41" pos:end="49:78"><expr pos:start="49:41" pos:end="49:78"><literal type="string" pos:start="49:41" pos:end="49:78">"User packet is too small (%d &lt; %d)\n"</literal></expr></argument>, <argument pos:start="49:81" pos:end="49:91"><expr pos:start="49:81" pos:end="49:91"><name pos:start="49:81" pos:end="49:91"><name pos:start="49:81" pos:end="49:85">avpkt</name><operator pos:start="49:86" pos:end="49:87">-&gt;</operator><name pos:start="49:88" pos:end="49:91">size</name></name></expr></argument>, <argument pos:start="49:94" pos:end="49:97"><expr pos:start="49:94" pos:end="49:97"><name pos:start="49:94" pos:end="49:97">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:35">return <expr pos:start="51:20" pos:end="51:34"><call pos:start="51:20" pos:end="51:34"><name pos:start="51:20" pos:end="51:26">AVERROR</name><argument_list pos:start="51:27" pos:end="51:34">(<argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="60:0"><expr pos:start="57:9" pos:end="57:29"><call pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:22">av_init_packet</name><argument_list pos:start="57:23" pos:end="57:29">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:26">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:26">FF_API_DESTRUCT_PACKET</name></expr></cpp:if>

        <expr_stmt pos:start="61:9" pos:end="64:0"><expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:13">avpkt</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">destruct</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <name pos:start="61:27" pos:end="61:34">destruct</name></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:13">avpkt</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:18">buf</name></name>      <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:29">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:13">avpkt</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:19">size</name></name>     <operator pos:start="67:25" pos:end="67:25">=</operator> <name pos:start="67:27" pos:end="67:30">size</name></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="81:5">else <block pos:start="71:12" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:19">

        <decl_stmt pos:start="73:9" pos:end="73:45"><decl pos:start="73:9" pos:end="73:44"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:15">ret</name> <init pos:start="73:17" pos:end="73:44">= <expr pos:start="73:19" pos:end="73:44"><call pos:start="73:19" pos:end="73:44"><name pos:start="73:19" pos:end="73:31">av_new_packet</name><argument_list pos:start="73:32" pos:end="73:44">(<argument pos:start="73:33" pos:end="73:37"><expr pos:start="73:33" pos:end="73:37"><name pos:start="73:33" pos:end="73:37">avpkt</name></expr></argument>, <argument pos:start="73:40" pos:end="73:43"><expr pos:start="73:40" pos:end="73:43"><name pos:start="73:40" pos:end="73:43">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="75:9" pos:end="77:88"><if pos:start="75:9" pos:end="77:88">if <condition pos:start="75:12" pos:end="75:20">(<expr pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">&lt;</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:88"><block_content pos:start="77:13" pos:end="77:88">

            <expr_stmt pos:start="77:13" pos:end="77:88"><expr pos:start="77:13" pos:end="77:87"><call pos:start="77:13" pos:end="77:87"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:87">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">avctx</name></expr></argument>, <argument pos:start="77:27" pos:end="77:38"><expr pos:start="77:27" pos:end="77:38"><name pos:start="77:27" pos:end="77:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:41" pos:end="77:80"><expr pos:start="77:41" pos:end="77:80"><literal type="string" pos:start="77:41" pos:end="77:80">"Failed to allocate packet of size %d\n"</literal></expr></argument>, <argument pos:start="77:83" pos:end="77:86"><expr pos:start="77:83" pos:end="77:86"><name pos:start="77:83" pos:end="77:86">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
