<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11707.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stsz</name><parameter_list pos:start="1:25" pos:end="1:72">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">MOVAtom</name></type> <name pos:start="1:68" pos:end="1:71">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name> <init pos:start="7:26" pos:end="7:40">= <expr pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:29">st</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>, <decl pos:start="9:21" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:21" pos:end="9:27">entries</name></decl>, <decl pos:start="9:30" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:40">sample_size</name></decl>, <decl pos:start="9:43" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:43" pos:end="9:52">field_size</name></decl>, <decl pos:start="9:55" pos:end="9:63"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:55" pos:end="9:63">num_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name><modifier pos:start="13:18" pos:end="13:18">*</modifier></type> <name pos:start="13:20" pos:end="13:22">buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><call pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">get_byte</name><argument_list pos:start="17:13" pos:end="17:16">(<argument pos:start="17:14" pos:end="17:15"><expr pos:start="17:14" pos:end="17:15"><name pos:start="17:14" pos:end="17:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:19" pos:end="17:31">/* version */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><call pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">get_be24</name><argument_list pos:start="19:13" pos:end="19:16">(<argument pos:start="19:14" pos:end="19:15"><expr pos:start="19:14" pos:end="19:15"><name pos:start="19:14" pos:end="19:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="19:19" pos:end="19:29">/* flags */</comment>



    <if_stmt pos:start="23:5" pos:end="41:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:44">(<expr pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:12">atom</name><operator pos:start="23:13" pos:end="23:13">.</operator><name pos:start="23:14" pos:end="23:17">type</name></name> <operator pos:start="23:19" pos:end="23:20">==</operator> <call pos:start="23:22" pos:end="23:43"><name pos:start="23:22" pos:end="23:26">MKTAG</name><argument_list pos:start="23:27" pos:end="23:43">(<argument pos:start="23:28" pos:end="23:30"><expr pos:start="23:28" pos:end="23:30"><literal type="char" pos:start="23:28" pos:end="23:30">'s'</literal></expr></argument>,<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><literal type="char" pos:start="23:32" pos:end="23:34">'t'</literal></expr></argument>,<argument pos:start="23:36" pos:end="23:38"><expr pos:start="23:36" pos:end="23:38"><literal type="char" pos:start="23:36" pos:end="23:38">'s'</literal></expr></argument>,<argument pos:start="23:40" pos:end="23:42"><expr pos:start="23:40" pos:end="23:42"><literal type="char" pos:start="23:40" pos:end="23:42">'z'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:46" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:24">

        <expr_stmt pos:start="25:9" pos:end="25:35"><expr pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:19">sample_size</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:30">get_be32</name><argument_list pos:start="25:31" pos:end="25:34">(<argument pos:start="25:32" pos:end="25:33"><expr pos:start="25:32" pos:end="25:33"><name pos:start="25:32" pos:end="25:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="29:42"><if pos:start="27:9" pos:end="29:42">if <condition pos:start="27:12" pos:end="27:29">(<expr pos:start="27:13" pos:end="27:28"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:28"><name pos:start="27:14" pos:end="27:15">sc</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:28">sample_size</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:42"><block_content pos:start="29:13" pos:end="29:42"> <comment type="block" pos:start="27:31" pos:end="27:75">/* do not overwrite value computed in stsd */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:42"><expr pos:start="29:13" pos:end="29:41"><name pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:14">sc</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:27">sample_size</name></name> <operator pos:start="29:29" pos:end="29:29">=</operator> <name pos:start="29:31" pos:end="29:41">sample_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:18">field_size</name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:23">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="41:5">else <block pos:start="33:12" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:34">

        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:19">sample_size</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><call pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:16">get_be24</name><argument_list pos:start="37:17" pos:end="37:20">(<argument pos:start="37:18" pos:end="37:19"><expr pos:start="37:18" pos:end="37:19"><name pos:start="37:18" pos:end="37:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="37:23" pos:end="37:36">/* reserved */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:18">field_size</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <call pos:start="39:22" pos:end="39:33"><name pos:start="39:22" pos:end="39:29">get_byte</name><argument_list pos:start="39:30" pos:end="39:33">(<argument pos:start="39:31" pos:end="39:32"><expr pos:start="39:31" pos:end="39:32"><name pos:start="39:31" pos:end="39:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:11">entries</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:26"><name pos:start="43:15" pos:end="43:22">get_be32</name><argument_list pos:start="43:23" pos:end="43:26">(<argument pos:start="43:24" pos:end="43:25"><expr pos:start="43:24" pos:end="43:25"><name pos:start="43:24" pos:end="43:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:85"><expr pos:start="47:5" pos:end="47:84"><call pos:start="47:5" pos:end="47:84"><name pos:start="47:5" pos:end="47:11">dprintf</name><argument_list pos:start="47:12" pos:end="47:84">(<argument pos:start="47:13" pos:end="47:17"><expr pos:start="47:13" pos:end="47:17"><name pos:start="47:13" pos:end="47:17"><name pos:start="47:13" pos:end="47:13">c</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:17">fc</name></name></expr></argument>, <argument pos:start="47:20" pos:end="47:57"><expr pos:start="47:20" pos:end="47:57"><literal type="string" pos:start="47:20" pos:end="47:57">"sample_size = %d sample_count = %d\n"</literal></expr></argument>, <argument pos:start="47:60" pos:end="47:74"><expr pos:start="47:60" pos:end="47:74"><name pos:start="47:60" pos:end="47:74"><name pos:start="47:60" pos:end="47:61">sc</name><operator pos:start="47:62" pos:end="47:63">-&gt;</operator><name pos:start="47:64" pos:end="47:74">sample_size</name></name></expr></argument>, <argument pos:start="47:77" pos:end="47:83"><expr pos:start="47:77" pos:end="47:83"><name pos:start="47:77" pos:end="47:83">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:6">sc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:20">sample_count</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:30">entries</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:17"><if pos:start="53:5" pos:end="55:17">if <condition pos:start="53:8" pos:end="53:20">(<expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:19">sample_size</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:17"><block_content pos:start="55:9" pos:end="55:17">

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:83">(<expr pos:start="59:9" pos:end="59:82"><name pos:start="59:9" pos:end="59:18">field_size</name> <operator pos:start="59:20" pos:end="59:21">!=</operator> <literal type="number" pos:start="59:23" pos:end="59:23">4</literal> <operator pos:start="59:25" pos:end="59:26">&amp;&amp;</operator> <name pos:start="59:28" pos:end="59:37">field_size</name> <operator pos:start="59:39" pos:end="59:40">!=</operator> <literal type="number" pos:start="59:42" pos:end="59:42">8</literal> <operator pos:start="59:44" pos:end="59:45">&amp;&amp;</operator> <name pos:start="59:47" pos:end="59:56">field_size</name> <operator pos:start="59:58" pos:end="59:59">!=</operator> <literal type="number" pos:start="59:61" pos:end="59:62">16</literal> <operator pos:start="59:64" pos:end="59:65">&amp;&amp;</operator> <name pos:start="59:67" pos:end="59:76">field_size</name> <operator pos:start="59:78" pos:end="59:79">!=</operator> <literal type="number" pos:start="59:81" pos:end="59:82">32</literal></expr>)</condition> <block pos:start="59:85" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:82"><expr pos:start="61:9" pos:end="61:81"><call pos:start="61:9" pos:end="61:81"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:81">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:16">c</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:20">fc</name></name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:68"><expr pos:start="61:37" pos:end="61:68"><literal type="string" pos:start="61:37" pos:end="61:68">"Invalid sample field size %d\n"</literal></expr></argument>, <argument pos:start="61:71" pos:end="61:80"><expr pos:start="61:71" pos:end="61:80"><name pos:start="61:71" pos:end="61:80">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="71:18"><if pos:start="69:5" pos:end="71:18">if<condition pos:start="69:7" pos:end="69:41">(<expr pos:start="69:8" pos:end="69:40"><name pos:start="69:8" pos:end="69:14">entries</name> <operator pos:start="69:16" pos:end="69:17">&gt;=</operator> <name pos:start="69:19" pos:end="69:26">UINT_MAX</name> <operator pos:start="69:28" pos:end="69:28">/</operator> <sizeof pos:start="69:30" pos:end="69:40">sizeof<argument_list pos:start="69:36" pos:end="69:40">(<argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:18"><block_content pos:start="71:9" pos:end="71:18">

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:56"><expr pos:start="73:5" pos:end="73:55"><name pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:6">sc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:20">sample_sizes</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:55"><name pos:start="73:24" pos:end="73:32">av_malloc</name><argument_list pos:start="73:33" pos:end="73:55">(<argument pos:start="73:34" pos:end="73:54"><expr pos:start="73:34" pos:end="73:54"><name pos:start="73:34" pos:end="73:40">entries</name> <operator pos:start="73:42" pos:end="73:42">*</operator> <sizeof pos:start="73:44" pos:end="73:54">sizeof<argument_list pos:start="73:50" pos:end="73:54">(<argument pos:start="73:51" pos:end="73:53"><expr pos:start="73:51" pos:end="73:53"><name pos:start="73:51" pos:end="73:53">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="77:31"><if pos:start="75:5" pos:end="77:31">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:25"><name pos:start="75:10" pos:end="75:11">sc</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:25">sample_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:31"><block_content pos:start="77:9" pos:end="77:31">

        <return pos:start="77:9" pos:end="77:31">return <expr pos:start="77:16" pos:end="77:30"><call pos:start="77:16" pos:end="77:30"><name pos:start="77:16" pos:end="77:22">AVERROR</name><argument_list pos:start="77:23" pos:end="77:30">(<argument pos:start="77:24" pos:end="77:29"><expr pos:start="77:24" pos:end="77:29"><name pos:start="77:24" pos:end="77:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:13">num_bytes</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <operator pos:start="81:17" pos:end="81:17">(</operator><name pos:start="81:18" pos:end="81:24">entries</name><operator pos:start="81:25" pos:end="81:25">*</operator><name pos:start="81:26" pos:end="81:35">field_size</name><operator pos:start="81:36" pos:end="81:36">+</operator><literal type="number" pos:start="81:37" pos:end="81:37">4</literal><operator pos:start="81:38" pos:end="81:38">)</operator><operator pos:start="81:39" pos:end="81:40">&gt;&gt;</operator><literal type="number" pos:start="81:41" pos:end="81:41">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:60"><expr pos:start="85:5" pos:end="85:59"><name pos:start="85:5" pos:end="85:7">buf</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:59"><name pos:start="85:11" pos:end="85:19">av_malloc</name><argument_list pos:start="85:20" pos:end="85:59">(<argument pos:start="85:21" pos:end="85:58"><expr pos:start="85:21" pos:end="85:58"><name pos:start="85:21" pos:end="85:29">num_bytes</name><operator pos:start="85:30" pos:end="85:30">+</operator><name pos:start="85:31" pos:end="85:58">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:13">(<expr pos:start="87:9" pos:end="87:12"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:12">buf</name></expr>)</condition> <block pos:start="87:15" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:31">

        <expr_stmt pos:start="89:9" pos:end="89:36"><expr pos:start="89:9" pos:end="89:35"><call pos:start="89:9" pos:end="89:35"><name pos:start="89:9" pos:end="89:16">av_freep</name><argument_list pos:start="89:17" pos:end="89:35">(<argument pos:start="89:18" pos:end="89:34"><expr pos:start="89:18" pos:end="89:34"><operator pos:start="89:18" pos:end="89:18">&amp;</operator><name pos:start="89:19" pos:end="89:34"><name pos:start="89:19" pos:end="89:20">sc</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:34">sample_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:31">return <expr pos:start="91:16" pos:end="91:30"><call pos:start="91:16" pos:end="91:30"><name pos:start="91:16" pos:end="91:22">AVERROR</name><argument_list pos:start="91:23" pos:end="91:30">(<argument pos:start="91:24" pos:end="91:29"><expr pos:start="91:24" pos:end="91:29"><name pos:start="91:24" pos:end="91:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:51">(<expr pos:start="97:9" pos:end="97:50"><call pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:18">get_buffer</name><argument_list pos:start="97:19" pos:end="97:38">(<argument pos:start="97:20" pos:end="97:21"><expr pos:start="97:20" pos:end="97:21"><name pos:start="97:20" pos:end="97:21">pb</name></expr></argument>, <argument pos:start="97:24" pos:end="97:26"><expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">buf</name></expr></argument>, <argument pos:start="97:29" pos:end="97:37"><expr pos:start="97:29" pos:end="97:37"><name pos:start="97:29" pos:end="97:37">num_bytes</name></expr></argument>)</argument_list></call> <operator pos:start="97:40" pos:end="97:40">&lt;</operator> <name pos:start="97:42" pos:end="97:50">num_bytes</name></expr>)</condition> <block pos:start="97:53" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:18">

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><call pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:16">av_freep</name><argument_list pos:start="99:17" pos:end="99:35">(<argument pos:start="99:18" pos:end="99:34"><expr pos:start="99:18" pos:end="99:34"><operator pos:start="99:18" pos:end="99:18">&amp;</operator><name pos:start="99:19" pos:end="99:34"><name pos:start="99:19" pos:end="99:20">sc</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:34">sample_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:21"><expr pos:start="101:9" pos:end="101:20"><call pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:15">av_free</name><argument_list pos:start="101:16" pos:end="101:20">(<argument pos:start="101:17" pos:end="101:19"><expr pos:start="101:17" pos:end="101:19"><name pos:start="101:17" pos:end="101:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:18">return <expr pos:start="103:16" pos:end="103:17"><operator pos:start="103:16" pos:end="103:16">-</operator><literal type="number" pos:start="103:17" pos:end="103:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><call pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:17">init_get_bits</name><argument_list pos:start="109:18" pos:end="109:40">(<argument pos:start="109:19" pos:end="109:21"><expr pos:start="109:19" pos:end="109:21"><operator pos:start="109:19" pos:end="109:19">&amp;</operator><name pos:start="109:20" pos:end="109:21">gb</name></expr></argument>, <argument pos:start="109:24" pos:end="109:26"><expr pos:start="109:24" pos:end="109:26"><name pos:start="109:24" pos:end="109:26">buf</name></expr></argument>, <argument pos:start="109:29" pos:end="109:39"><expr pos:start="109:29" pos:end="109:39"><literal type="number" pos:start="109:29" pos:end="109:29">8</literal><operator pos:start="109:30" pos:end="109:30">*</operator><name pos:start="109:31" pos:end="109:39">num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="113:5" pos:end="115:61">for<control pos:start="113:8" pos:end="113:28">(<init pos:start="113:9" pos:end="113:12"><expr pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:9">i</name><operator pos:start="113:10" pos:end="113:10">=</operator><literal type="number" pos:start="113:11" pos:end="113:11">0</literal></expr>;</init> <condition pos:start="113:14" pos:end="113:23"><expr pos:start="113:14" pos:end="113:22"><name pos:start="113:14" pos:end="113:14">i</name><operator pos:start="113:15" pos:end="113:15">&lt;</operator><name pos:start="113:16" pos:end="113:22">entries</name></expr>;</condition> <incr pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:25">i</name><operator pos:start="113:26" pos:end="113:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="115:9" pos:end="115:61"><block_content pos:start="115:9" pos:end="115:61">

        <expr_stmt pos:start="115:9" pos:end="115:61"><expr pos:start="115:9" pos:end="115:60"><name pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:10">sc</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:24">sample_sizes</name><index pos:start="115:25" pos:end="115:27">[<expr pos:start="115:26" pos:end="115:26"><name pos:start="115:26" pos:end="115:26">i</name></expr>]</index></name> <operator pos:start="115:29" pos:end="115:29">=</operator> <call pos:start="115:31" pos:end="115:60"><name pos:start="115:31" pos:end="115:43">get_bits_long</name><argument_list pos:start="115:44" pos:end="115:60">(<argument pos:start="115:45" pos:end="115:47"><expr pos:start="115:45" pos:end="115:47"><operator pos:start="115:45" pos:end="115:45">&amp;</operator><name pos:start="115:46" pos:end="115:47">gb</name></expr></argument>, <argument pos:start="115:50" pos:end="115:59"><expr pos:start="115:50" pos:end="115:59"><name pos:start="115:50" pos:end="115:59">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="119:5" pos:end="119:17"><expr pos:start="119:5" pos:end="119:16"><call pos:start="119:5" pos:end="119:16"><name pos:start="119:5" pos:end="119:11">av_free</name><argument_list pos:start="119:12" pos:end="119:16">(<argument pos:start="119:13" pos:end="119:15"><expr pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
