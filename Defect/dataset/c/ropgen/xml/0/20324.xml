<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20324.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">pcm_decode_init</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCMDecode</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:35">= <expr pos:start="5:20" pos:end="5:35"><name pos:start="5:20" pos:end="5:35"><name pos:start="5:20" pos:end="5:24">avctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:35">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:29">(<expr pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:23">channels</name></name> <operator pos:start="11:25" pos:end="11:26">&lt;=</operator> <literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr>)</condition> <block pos:start="11:31" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:31">

        <expr_stmt pos:start="13:9" pos:end="13:68"><expr pos:start="13:9" pos:end="13:67"><call pos:start="13:9" pos:end="13:67"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:67">(<argument pos:start="13:16" pos:end="13:20"><expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">avctx</name></expr></argument>, <argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:37" pos:end="13:66"><expr pos:start="13:37" pos:end="13:66"><literal type="string" pos:start="13:37" pos:end="13:66">"PCM channels out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="21:5" pos:end="43:5">switch <condition pos:start="21:12" pos:end="21:29">(<expr pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:17">avctx</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:24">codec</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:28">id</name></name></expr>)</condition> <block pos:start="21:31" pos:end="43:5">{<block_content pos:start="23:5" pos:end="41:14">

    <case pos:start="23:5" pos:end="23:30">case <expr pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:29">AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

        <for pos:start="25:9" pos:end="27:41">for <control pos:start="25:13" pos:end="25:33">(<init pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:18"><name pos:start="25:14" pos:end="25:14">i</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</init> <condition pos:start="25:21" pos:end="25:28"><expr pos:start="25:21" pos:end="25:27"><name pos:start="25:21" pos:end="25:21">i</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <literal type="number" pos:start="25:25" pos:end="25:27">256</literal></expr>;</condition> <incr pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><name pos:start="25:30" pos:end="25:30">i</name><operator pos:start="25:31" pos:end="25:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:13" pos:end="27:41"><block_content pos:start="27:13" pos:end="27:41">

            <expr_stmt pos:start="27:13" pos:end="27:41"><expr pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:20">table</name><index pos:start="27:21" pos:end="27:23">[<expr pos:start="27:22" pos:end="27:22"><name pos:start="27:22" pos:end="27:22">i</name></expr>]</index></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:40"><name pos:start="27:27" pos:end="27:37">alaw2linear</name><argument_list pos:start="27:38" pos:end="27:40">(<argument pos:start="27:39" pos:end="27:39"><expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:31">case <expr pos:start="31:10" pos:end="31:30"><name pos:start="31:10" pos:end="31:30">AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

        <for pos:start="33:9" pos:end="35:41">for <control pos:start="33:13" pos:end="33:33">(<init pos:start="33:14" pos:end="33:19"><expr pos:start="33:14" pos:end="33:18"><name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</init> <condition pos:start="33:21" pos:end="33:28"><expr pos:start="33:21" pos:end="33:27"><name pos:start="33:21" pos:end="33:21">i</name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <literal type="number" pos:start="33:25" pos:end="33:27">256</literal></expr>;</condition> <incr pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><name pos:start="33:30" pos:end="33:30">i</name><operator pos:start="33:31" pos:end="33:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="35:13" pos:end="35:41"><block_content pos:start="35:13" pos:end="35:41">

            <expr_stmt pos:start="35:13" pos:end="35:41"><expr pos:start="35:13" pos:end="35:40"><name pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">table</name><index pos:start="35:21" pos:end="35:23">[<expr pos:start="35:22" pos:end="35:22"><name pos:start="35:22" pos:end="35:22">i</name></expr>]</index></name> <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="35:40"><name pos:start="35:27" pos:end="35:37">ulaw2linear</name><argument_list pos:start="35:38" pos:end="35:40">(<argument pos:start="35:39" pos:end="35:39"><expr pos:start="35:39" pos:end="35:39"><name pos:start="35:39" pos:end="35:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <default pos:start="39:5" pos:end="39:12">default:</default>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="47:5" pos:end="47:53"><expr pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:9">avctx</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:21">sample_fmt</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:52"><name pos:start="47:25" pos:end="47:29">avctx</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:36">codec</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:49">sample_fmts</name><index pos:start="47:50" pos:end="47:52">[<expr pos:start="47:51" pos:end="47:51"><literal type="number" pos:start="47:51" pos:end="47:51">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:78"><if pos:start="51:5" pos:end="53:78">if <condition pos:start="51:8" pos:end="51:47">(<expr pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:13">avctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:25">sample_fmt</name></name> <operator pos:start="51:27" pos:end="51:28">==</operator> <name pos:start="51:30" pos:end="51:46">AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:78"><block_content pos:start="53:9" pos:end="53:78">

        <expr_stmt pos:start="53:9" pos:end="53:78"><expr pos:start="53:9" pos:end="53:77"><name pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:34">bits_per_raw_sample</name></name> <operator pos:start="53:36" pos:end="53:36">=</operator> <call pos:start="53:38" pos:end="53:77"><name pos:start="53:38" pos:end="53:59">av_get_bits_per_sample</name><argument_list pos:start="53:60" pos:end="53:77">(<argument pos:start="53:61" pos:end="53:76"><expr pos:start="53:61" pos:end="53:76"><name pos:start="53:61" pos:end="53:76"><name pos:start="53:61" pos:end="53:65">avctx</name><operator pos:start="53:66" pos:end="53:67">-&gt;</operator><name pos:start="53:68" pos:end="53:72">codec</name><operator pos:start="53:73" pos:end="53:74">-&gt;</operator><name pos:start="53:75" pos:end="53:76">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><call pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:30">avcodec_get_frame_defaults</name><argument_list pos:start="57:31" pos:end="57:41">(<argument pos:start="57:32" pos:end="57:40"><expr pos:start="57:32" pos:end="57:40"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:40"><name pos:start="57:33" pos:end="57:33">s</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:40">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:35"><expr pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:9">avctx</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:22">coded_frame</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <operator pos:start="59:26" pos:end="59:26">&amp;</operator><name pos:start="59:27" pos:end="59:34"><name pos:start="59:27" pos:end="59:27">s</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:34">frame</name></name></expr>;</expr_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
