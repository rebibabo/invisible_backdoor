<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21545.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:18">MemTxResult</name></type> <name pos:start="1:20" pos:end="1:32">gic_cpu_write</name><parameter_list pos:start="1:33" pos:end="3:66">(<parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:41">GICState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">cpu</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:65">offset</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:47"><decl pos:start="3:34" pos:end="3:47"><type pos:start="3:34" pos:end="3:47"><name pos:start="3:34" pos:end="3:41">uint32_t</name></type> <name pos:start="3:43" pos:end="3:47">value</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:65"><decl pos:start="3:50" pos:end="3:65"><type pos:start="3:50" pos:end="3:65"><name pos:start="3:50" pos:end="3:59">MemTxAttrs</name></type> <name pos:start="3:61" pos:end="3:65">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:20">

    <switch pos:start="7:5" pos:end="71:5">switch <condition pos:start="7:12" pos:end="7:19">(<expr pos:start="7:13" pos:end="7:18"><name pos:start="7:13" pos:end="7:18">offset</name></expr>)</condition> <block pos:start="7:21" pos:end="71:5">{<block_content pos:start="9:5" pos:end="69:27">

    <case pos:start="9:5" pos:end="9:14">case <expr pos:start="9:10" pos:end="9:13"><literal type="number" pos:start="9:10" pos:end="9:13">0x00</literal></expr>:</case> <comment type="block" pos:start="9:16" pos:end="9:28">/* Control */</comment>

        <expr_stmt pos:start="11:9" pos:end="11:50"><expr pos:start="11:9" pos:end="11:49"><call pos:start="11:9" pos:end="11:49"><name pos:start="11:9" pos:end="11:27">gic_set_cpu_control</name><argument_list pos:start="11:28" pos:end="11:49">(<argument pos:start="11:29" pos:end="11:29"><expr pos:start="11:29" pos:end="11:29"><name pos:start="11:29" pos:end="11:29">s</name></expr></argument>, <argument pos:start="11:32" pos:end="11:34"><expr pos:start="11:32" pos:end="11:34"><name pos:start="11:32" pos:end="11:34">cpu</name></expr></argument>, <argument pos:start="11:37" pos:end="11:41"><expr pos:start="11:37" pos:end="11:41"><name pos:start="11:37" pos:end="11:41">value</name></expr></argument>, <argument pos:start="11:44" pos:end="11:48"><expr pos:start="11:44" pos:end="11:48"><name pos:start="11:44" pos:end="11:48">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="13:9" pos:end="13:14">break;</break>

    <case pos:start="15:5" pos:end="15:14">case <expr pos:start="15:10" pos:end="15:13"><literal type="number" pos:start="15:10" pos:end="15:13">0x04</literal></expr>:</case> <comment type="block" pos:start="15:16" pos:end="15:34">/* Priority mask */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:47"><expr pos:start="17:9" pos:end="17:46"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:24">priority_mask</name><index pos:start="17:25" pos:end="17:29">[<expr pos:start="17:26" pos:end="17:28"><name pos:start="17:26" pos:end="17:28">cpu</name></expr>]</index></name> <operator pos:start="17:31" pos:end="17:31">=</operator> <operator pos:start="17:33" pos:end="17:33">(</operator><name pos:start="17:34" pos:end="17:38">value</name> <operator pos:start="17:40" pos:end="17:40">&amp;</operator> <literal type="number" pos:start="17:42" pos:end="17:45">0xff</literal><operator pos:start="17:46" pos:end="17:46">)</operator></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x08</literal></expr>:</case> <comment type="block" pos:start="21:16" pos:end="21:33">/* Binary Point */</comment>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:46">(<expr pos:start="23:13" pos:end="23:45"><name pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:28">security_extn</name></name> <operator pos:start="23:30" pos:end="23:31">&amp;&amp;</operator> <operator pos:start="23:33" pos:end="23:33">!</operator><name pos:start="23:34" pos:end="23:45"><name pos:start="23:34" pos:end="23:38">attrs</name><operator pos:start="23:39" pos:end="23:39">.</operator><name pos:start="23:40" pos:end="23:45">secure</name></name></expr>)</condition> <block pos:start="23:48" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:58">

            <expr_stmt pos:start="25:13" pos:end="25:58"><expr pos:start="25:13" pos:end="25:57"><name pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:19">abpr</name><index pos:start="25:20" pos:end="25:24">[<expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">cpu</name></expr>]</index></name> <operator pos:start="25:26" pos:end="25:26">=</operator> <call pos:start="25:28" pos:end="25:57"><name pos:start="25:28" pos:end="25:30">MAX</name><argument_list pos:start="25:31" pos:end="25:57">(<argument pos:start="25:32" pos:end="25:42"><expr pos:start="25:32" pos:end="25:42"><name pos:start="25:32" pos:end="25:36">value</name> <operator pos:start="25:38" pos:end="25:38">&amp;</operator> <literal type="number" pos:start="25:40" pos:end="25:42">0x7</literal></expr></argument>, <argument pos:start="25:45" pos:end="25:56"><expr pos:start="25:45" pos:end="25:56"><name pos:start="25:45" pos:end="25:56">GIC_MIN_ABPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="31:9">else <block pos:start="27:16" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:56">

            <expr_stmt pos:start="29:13" pos:end="29:56"><expr pos:start="29:13" pos:end="29:55"><name pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">bpr</name><index pos:start="29:19" pos:end="29:23">[<expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">cpu</name></expr>]</index></name> <operator pos:start="29:25" pos:end="29:25">=</operator> <call pos:start="29:27" pos:end="29:55"><name pos:start="29:27" pos:end="29:29">MAX</name><argument_list pos:start="29:30" pos:end="29:55">(<argument pos:start="29:31" pos:end="29:41"><expr pos:start="29:31" pos:end="29:41"><name pos:start="29:31" pos:end="29:35">value</name> <operator pos:start="29:37" pos:end="29:37">&amp;</operator> <literal type="number" pos:start="29:39" pos:end="29:41">0x7</literal></expr></argument>, <argument pos:start="29:44" pos:end="29:54"><expr pos:start="29:44" pos:end="29:54"><name pos:start="29:44" pos:end="29:54">GIC_MIN_BPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x10</literal></expr>:</case> <comment type="block" pos:start="35:16" pos:end="35:37">/* End Of Interrupt */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:48"><expr pos:start="37:9" pos:end="37:47"><call pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:24">gic_complete_irq</name><argument_list pos:start="37:25" pos:end="37:47">(<argument pos:start="37:26" pos:end="37:26"><expr pos:start="37:26" pos:end="37:26"><name pos:start="37:26" pos:end="37:26">s</name></expr></argument>, <argument pos:start="37:29" pos:end="37:31"><expr pos:start="37:29" pos:end="37:31"><name pos:start="37:29" pos:end="37:31">cpu</name></expr></argument>, <argument pos:start="37:34" pos:end="37:46"><expr pos:start="37:34" pos:end="37:46"><name pos:start="37:34" pos:end="37:38">value</name> <operator pos:start="37:40" pos:end="37:40">&amp;</operator> <literal type="number" pos:start="37:42" pos:end="37:46">0x3ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:24">return <expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23">MEMTX_OK</name></expr>;</return>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x1c</literal></expr>:</case> <comment type="block" pos:start="41:16" pos:end="41:41">/* Aliased Binary Point */</comment>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:70">(<expr pos:start="43:13" pos:end="43:69"><operator pos:start="43:13" pos:end="43:13">!</operator><call pos:start="43:14" pos:end="43:30"><name pos:start="43:14" pos:end="43:27">gic_has_groups</name><argument_list pos:start="43:28" pos:end="43:30">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><name pos:start="43:29" pos:end="43:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="43:32" pos:end="43:33">||</operator> <operator pos:start="43:35" pos:end="43:35">(</operator><name pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:36">s</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:51">security_extn</name></name> <operator pos:start="43:53" pos:end="43:54">&amp;&amp;</operator> <operator pos:start="43:56" pos:end="43:56">!</operator><name pos:start="43:57" pos:end="43:68"><name pos:start="43:57" pos:end="43:61">attrs</name><operator pos:start="43:62" pos:end="43:62">.</operator><name pos:start="43:63" pos:end="43:68">secure</name></name><operator pos:start="43:69" pos:end="43:69">)</operator></expr>)</condition> <block pos:start="43:72" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:28">

            <comment type="block" pos:start="45:13" pos:end="45:53">/* unimplemented, or NS access: RAZ/WI */</comment>

            <return pos:start="47:13" pos:end="47:28">return <expr pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:27">MEMTX_OK</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:58">

            <expr_stmt pos:start="51:13" pos:end="51:58"><expr pos:start="51:13" pos:end="51:57"><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:19">abpr</name><index pos:start="51:20" pos:end="51:24">[<expr pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:23">cpu</name></expr>]</index></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <call pos:start="51:28" pos:end="51:57"><name pos:start="51:28" pos:end="51:30">MAX</name><argument_list pos:start="51:31" pos:end="51:57">(<argument pos:start="51:32" pos:end="51:42"><expr pos:start="51:32" pos:end="51:42"><name pos:start="51:32" pos:end="51:36">value</name> <operator pos:start="51:38" pos:end="51:38">&amp;</operator> <literal type="number" pos:start="51:40" pos:end="51:42">0x7</literal></expr></argument>, <argument pos:start="51:45" pos:end="51:56"><expr pos:start="51:45" pos:end="51:56"><name pos:start="51:45" pos:end="51:56">GIC_MIN_ABPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:14">case <expr pos:start="57:10" pos:end="57:13"><literal type="number" pos:start="57:10" pos:end="57:13">0xd0</literal></expr>:</case> <case pos:start="57:16" pos:end="57:25">case <expr pos:start="57:21" pos:end="57:24"><literal type="number" pos:start="57:21" pos:end="57:24">0xd4</literal></expr>:</case> <case pos:start="57:27" pos:end="57:36">case <expr pos:start="57:32" pos:end="57:35"><literal type="number" pos:start="57:32" pos:end="57:35">0xd8</literal></expr>:</case> <case pos:start="57:38" pos:end="57:47">case <expr pos:start="57:43" pos:end="57:46"><literal type="number" pos:start="57:43" pos:end="57:46">0xdc</literal></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:66"><expr pos:start="59:9" pos:end="59:65"><call pos:start="59:9" pos:end="59:65"><name pos:start="59:9" pos:end="59:21">qemu_log_mask</name><argument_list pos:start="59:22" pos:end="59:65">(<argument pos:start="59:23" pos:end="59:31"><expr pos:start="59:23" pos:end="59:31"><name pos:start="59:23" pos:end="59:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="59:34" pos:end="59:64"><expr pos:start="59:34" pos:end="59:64"><literal type="string" pos:start="59:34" pos:end="59:64">"Writing APR not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <default pos:start="63:5" pos:end="63:12">default:</default>

        <expr_stmt pos:start="65:9" pos:end="67:69"><expr pos:start="65:9" pos:end="67:68"><call pos:start="65:9" pos:end="67:68"><name pos:start="65:9" pos:end="65:21">qemu_log_mask</name><argument_list pos:start="65:22" pos:end="67:68">(<argument pos:start="65:23" pos:end="65:37"><expr pos:start="65:23" pos:end="65:37"><name pos:start="65:23" pos:end="65:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="67:23" pos:end="67:54"><expr pos:start="67:23" pos:end="67:54"><literal type="string" pos:start="67:23" pos:end="67:54">"gic_cpu_write: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="67:57" pos:end="67:67"><expr pos:start="67:57" pos:end="67:67"><operator pos:start="67:57" pos:end="67:57">(</operator><name pos:start="67:58" pos:end="67:60">int</name><operator pos:start="67:61" pos:end="67:61">)</operator><name pos:start="67:62" pos:end="67:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:27">return <expr pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:26">MEMTX_ERROR</name></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="73:5" pos:end="73:18"><expr pos:start="73:5" pos:end="73:17"><call pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:14">gic_update</name><argument_list pos:start="73:15" pos:end="73:17">(<argument pos:start="73:16" pos:end="73:16"><expr pos:start="73:16" pos:end="73:16"><name pos:start="73:16" pos:end="73:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:20">return <expr pos:start="75:12" pos:end="75:19"><name pos:start="75:12" pos:end="75:19">MEMTX_OK</name></expr>;</return>

</block_content>}</block></function>
</unit>
