<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3817.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">spapr_vlan_receive</name><parameter_list pos:start="1:34" pos:end="3:46">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:48">NetClientState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">nc</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:72"><decl pos:start="1:55" pos:end="1:72"><type pos:start="1:55" pos:end="1:72"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:67">uint8_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">buf</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:45"><decl pos:start="3:35" pos:end="3:45"><type pos:start="3:35" pos:end="3:45"><name pos:start="3:35" pos:end="3:40">size_t</name></type> <name pos:start="3:42" pos:end="3:45">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="167:1">{<block_content pos:start="7:5" pos:end="165:16">

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">VIOsPAPRDevice</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">sdev</name> <init pos:start="7:26" pos:end="7:62">= <expr pos:start="7:28" pos:end="7:62"><call pos:start="7:28" pos:end="7:54"><name pos:start="7:28" pos:end="7:36">DO_UPCAST</name><argument_list pos:start="7:37" pos:end="7:54">(<argument pos:start="7:38" pos:end="7:45"><expr pos:start="7:38" pos:end="7:45"><name pos:start="7:38" pos:end="7:45">NICState</name></expr></argument>, <argument pos:start="7:48" pos:end="7:49"><expr pos:start="7:48" pos:end="7:49"><name pos:start="7:48" pos:end="7:49">nc</name></expr></argument>, <argument pos:start="7:52" pos:end="7:53"><expr pos:start="7:52" pos:end="7:53"><name pos:start="7:52" pos:end="7:53">nc</name></expr></argument>)</argument_list></call><operator pos:start="7:55" pos:end="7:56">-&gt;</operator><name pos:start="7:57" pos:end="7:62">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">VIOsPAPRVLANDevice</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:27">dev</name> <init pos:start="9:29" pos:end="9:56">= <expr pos:start="9:31" pos:end="9:56"><operator pos:start="9:31" pos:end="9:31">(</operator><name pos:start="9:32" pos:end="9:49">VIOsPAPRVLANDevice</name> <operator pos:start="9:51" pos:end="9:51">*</operator><operator pos:start="9:52" pos:end="9:52">)</operator><name pos:start="9:53" pos:end="9:56">sdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:70"><decl pos:start="11:5" pos:end="11:69"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">vlan_bd_t</name></type> <name pos:start="11:15" pos:end="11:20">rxq_bd</name> <init pos:start="11:22" pos:end="11:69">= <expr pos:start="11:24" pos:end="11:69"><call pos:start="11:24" pos:end="11:69"><name pos:start="11:24" pos:end="11:30">vio_ldq</name><argument_list pos:start="11:31" pos:end="11:69">(<argument pos:start="11:32" pos:end="11:35"><expr pos:start="11:32" pos:end="11:35"><name pos:start="11:32" pos:end="11:35">sdev</name></expr></argument>, <argument pos:start="11:38" pos:end="11:68"><expr pos:start="11:38" pos:end="11:68"><name pos:start="11:38" pos:end="11:50"><name pos:start="11:38" pos:end="11:40">dev</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:50">buf_list</name></name> <operator pos:start="11:52" pos:end="11:52">+</operator> <name pos:start="11:54" pos:end="11:68">VLAN_RXQ_BD_OFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">vlan_bd_t</name></type> <name pos:start="13:15" pos:end="13:16">bd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">buf_ptr</name> <init pos:start="15:17" pos:end="15:34">= <expr pos:start="15:19" pos:end="15:34"><name pos:start="15:19" pos:end="15:34"><name pos:start="15:19" pos:end="15:21">dev</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:34">use_buf_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:19">handle</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:19">control</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="25:26"><expr pos:start="23:5" pos:end="25:25"><call pos:start="23:5" pos:end="25:25"><name pos:start="23:5" pos:end="23:11">dprintf</name><argument_list pos:start="23:12" pos:end="25:25">(<argument pos:start="23:13" pos:end="23:52"><expr pos:start="23:13" pos:end="23:52"><literal type="string" pos:start="23:13" pos:end="23:52">"spapr_vlan_receive() [%s] rx_bufs=%d\n"</literal></expr></argument>, <argument pos:start="23:55" pos:end="23:67"><expr pos:start="23:55" pos:end="23:67"><name pos:start="23:55" pos:end="23:67"><name pos:start="23:55" pos:end="23:58">sdev</name><operator pos:start="23:59" pos:end="23:60">-&gt;</operator><name pos:start="23:61" pos:end="23:64">qdev</name><operator pos:start="23:65" pos:end="23:65">.</operator><name pos:start="23:66" pos:end="23:67">id</name></name></expr></argument>,

            <argument pos:start="25:13" pos:end="25:24"><expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:15">dev</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:24">rx_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:20"><name pos:start="29:10" pos:end="29:12">dev</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:20">isopen</name></name></expr>)</condition> <block pos:start="29:23" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:22">(<expr pos:start="37:9" pos:end="37:21"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:21"><name pos:start="37:10" pos:end="37:12">dev</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:21">rx_bufs</name></name></expr>)</condition> <block pos:start="37:24" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="45:5" pos:end="65:47">do <block pos:start="45:8" pos:end="63:5">{<block_content pos:start="47:9" pos:end="61:49">

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:15">buf_ptr</name> <operator pos:start="47:17" pos:end="47:18">+=</operator> <literal type="number" pos:start="47:20" pos:end="47:20">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:43">(<expr pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:19">buf_ptr</name> <operator pos:start="49:21" pos:end="49:22">&gt;=</operator> <name pos:start="49:24" pos:end="49:42">SPAPR_TCE_PAGE_SIZE</name></expr>)</condition> <block pos:start="49:45" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:38">

            <expr_stmt pos:start="51:13" pos:end="51:38"><expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:19">buf_ptr</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:37">VLAN_RX_BDS_OFF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:52"><expr pos:start="57:9" pos:end="57:51"><name pos:start="57:9" pos:end="57:10">bd</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:51"><name pos:start="57:14" pos:end="57:20">vio_ldq</name><argument_list pos:start="57:21" pos:end="57:51">(<argument pos:start="57:22" pos:end="57:25"><expr pos:start="57:22" pos:end="57:25"><name pos:start="57:22" pos:end="57:25">sdev</name></expr></argument>, <argument pos:start="57:28" pos:end="57:50"><expr pos:start="57:28" pos:end="57:50"><name pos:start="57:28" pos:end="57:40"><name pos:start="57:28" pos:end="57:30">dev</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:40">buf_list</name></name> <operator pos:start="57:42" pos:end="57:42">+</operator> <name pos:start="57:44" pos:end="57:50">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="61:49"><expr pos:start="59:9" pos:end="61:48"><call pos:start="59:9" pos:end="61:48"><name pos:start="59:9" pos:end="59:15">dprintf</name><argument_list pos:start="59:16" pos:end="61:48">(<argument pos:start="59:17" pos:end="59:47"><expr pos:start="59:17" pos:end="59:47"><literal type="string" pos:start="59:17" pos:end="59:47">"use_buf_ptr=%d bd=0x%016llx\n"</literal></expr></argument>,

                <argument pos:start="61:17" pos:end="61:23"><expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:23">buf_ptr</name></expr></argument>, <argument pos:start="61:26" pos:end="61:47"><expr pos:start="61:26" pos:end="61:47"><operator pos:start="61:26" pos:end="61:26">(</operator><name pos:start="61:27" pos:end="61:34">unsigned</name> <name pos:start="61:36" pos:end="61:39">long</name> <name pos:start="61:41" pos:end="61:44">long</name><operator pos:start="61:45" pos:end="61:45">)</operator><name pos:start="61:46" pos:end="61:47">bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="63:13" pos:end="65:46">(<expr pos:start="63:14" pos:end="65:45"><operator pos:start="63:14" pos:end="63:14">(</operator><operator pos:start="63:15" pos:end="63:15">!</operator><operator pos:start="63:16" pos:end="63:16">(</operator><name pos:start="63:17" pos:end="63:18">bd</name> <operator pos:start="63:20" pos:end="63:20">&amp;</operator> <name pos:start="63:22" pos:end="63:34">VLAN_BD_VALID</name><operator pos:start="63:35" pos:end="63:35">)</operator> <operator pos:start="63:37" pos:end="63:38">||</operator> <operator pos:start="63:40" pos:end="63:40">(</operator><call pos:start="63:41" pos:end="63:55"><name pos:start="63:41" pos:end="63:51">VLAN_BD_LEN</name><argument_list pos:start="63:52" pos:end="63:55">(<argument pos:start="63:53" pos:end="63:54"><expr pos:start="63:53" pos:end="63:54"><name pos:start="63:53" pos:end="63:54">bd</name></expr></argument>)</argument_list></call> <operator pos:start="63:57" pos:end="63:57">&lt;</operator> <operator pos:start="63:59" pos:end="63:59">(</operator><name pos:start="63:60" pos:end="63:63">size</name> <operator pos:start="63:65" pos:end="63:65">+</operator> <literal type="number" pos:start="63:67" pos:end="63:67">8</literal><operator pos:start="63:68" pos:end="63:68">)</operator><operator pos:start="63:69" pos:end="63:69">)</operator><operator pos:start="63:70" pos:end="63:70">)</operator>

             <operator pos:start="65:14" pos:end="65:15">&amp;&amp;</operator> <operator pos:start="65:17" pos:end="65:17">(</operator><name pos:start="65:18" pos:end="65:24">buf_ptr</name> <operator pos:start="65:26" pos:end="65:27">!=</operator> <name pos:start="65:29" pos:end="65:44"><name pos:start="65:29" pos:end="65:31">dev</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:44">use_buf_ptr</name></name><operator pos:start="65:45" pos:end="65:45">)</operator></expr>)</condition>;</do>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:64">(<expr pos:start="69:9" pos:end="69:63"><operator pos:start="69:9" pos:end="69:9">!</operator><operator pos:start="69:10" pos:end="69:10">(</operator><name pos:start="69:11" pos:end="69:12">bd</name> <operator pos:start="69:14" pos:end="69:14">&amp;</operator> <name pos:start="69:16" pos:end="69:28">VLAN_BD_VALID</name><operator pos:start="69:29" pos:end="69:29">)</operator> <operator pos:start="69:31" pos:end="69:32">||</operator> <operator pos:start="69:34" pos:end="69:34">(</operator><call pos:start="69:35" pos:end="69:49"><name pos:start="69:35" pos:end="69:45">VLAN_BD_LEN</name><argument_list pos:start="69:46" pos:end="69:49">(<argument pos:start="69:47" pos:end="69:48"><expr pos:start="69:47" pos:end="69:48"><name pos:start="69:47" pos:end="69:48">bd</name></expr></argument>)</argument_list></call> <operator pos:start="69:51" pos:end="69:51">&lt;</operator> <operator pos:start="69:53" pos:end="69:53">(</operator><name pos:start="69:54" pos:end="69:57">size</name> <operator pos:start="69:59" pos:end="69:59">+</operator> <literal type="number" pos:start="69:61" pos:end="69:61">8</literal><operator pos:start="69:62" pos:end="69:62">)</operator><operator pos:start="69:63" pos:end="69:63">)</operator></expr>)</condition> <block pos:start="69:66" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:18">

        <comment type="block" pos:start="71:9" pos:end="71:46">/* Failed to find a suitable buffer */</comment>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:41">/* Remove the buffer from the pool */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:19"><expr pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:16"><name pos:start="81:5" pos:end="81:7">dev</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:16">rx_bufs</name></name><operator pos:start="81:17" pos:end="81:18">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:31"><expr pos:start="83:5" pos:end="83:30"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:7">dev</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:20">use_buf_ptr</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:30">buf_ptr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:55"><expr pos:start="85:5" pos:end="85:54"><call pos:start="85:5" pos:end="85:54"><name pos:start="85:5" pos:end="85:11">vio_stq</name><argument_list pos:start="85:12" pos:end="85:54">(<argument pos:start="85:13" pos:end="85:16"><expr pos:start="85:13" pos:end="85:16"><name pos:start="85:13" pos:end="85:16">sdev</name></expr></argument>, <argument pos:start="85:19" pos:end="85:50"><expr pos:start="85:19" pos:end="85:50"><name pos:start="85:19" pos:end="85:31"><name pos:start="85:19" pos:end="85:21">dev</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:31">buf_list</name></name> <operator pos:start="85:33" pos:end="85:33">+</operator> <name pos:start="85:35" pos:end="85:50"><name pos:start="85:35" pos:end="85:37">dev</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:50">use_buf_ptr</name></name></expr></argument>, <argument pos:start="85:53" pos:end="85:53"><expr pos:start="85:53" pos:end="85:53"><literal type="number" pos:start="85:53" pos:end="85:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:77"><expr pos:start="89:5" pos:end="89:76"><call pos:start="89:5" pos:end="89:76"><name pos:start="89:5" pos:end="89:11">dprintf</name><argument_list pos:start="89:12" pos:end="89:76">(<argument pos:start="89:13" pos:end="89:43"><expr pos:start="89:13" pos:end="89:43"><literal type="string" pos:start="89:13" pos:end="89:43">"Found buffer: ptr=%d num=%d\n"</literal></expr></argument>, <argument pos:start="89:46" pos:end="89:61"><expr pos:start="89:46" pos:end="89:61"><name pos:start="89:46" pos:end="89:61"><name pos:start="89:46" pos:end="89:48">dev</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:61">use_buf_ptr</name></name></expr></argument>, <argument pos:start="89:64" pos:end="89:75"><expr pos:start="89:64" pos:end="89:75"><name pos:start="89:64" pos:end="89:75"><name pos:start="89:64" pos:end="89:66">dev</name><operator pos:start="89:67" pos:end="89:68">-&gt;</operator><name pos:start="89:69" pos:end="89:75">rx_bufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:34">/* Transfer the packet data */</comment>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:71">(<expr pos:start="95:9" pos:end="95:70"><call pos:start="95:9" pos:end="95:66"><name pos:start="95:9" pos:end="95:27">spapr_vio_dma_write</name><argument_list pos:start="95:28" pos:end="95:66">(<argument pos:start="95:29" pos:end="95:32"><expr pos:start="95:29" pos:end="95:32"><name pos:start="95:29" pos:end="95:32">sdev</name></expr></argument>, <argument pos:start="95:35" pos:end="95:54"><expr pos:start="95:35" pos:end="95:54"><call pos:start="95:35" pos:end="95:50"><name pos:start="95:35" pos:end="95:46">VLAN_BD_ADDR</name><argument_list pos:start="95:47" pos:end="95:50">(<argument pos:start="95:48" pos:end="95:49"><expr pos:start="95:48" pos:end="95:49"><name pos:start="95:48" pos:end="95:49">bd</name></expr></argument>)</argument_list></call> <operator pos:start="95:52" pos:end="95:52">+</operator> <literal type="number" pos:start="95:54" pos:end="95:54">8</literal></expr></argument>, <argument pos:start="95:57" pos:end="95:59"><expr pos:start="95:57" pos:end="95:59"><name pos:start="95:57" pos:end="95:59">buf</name></expr></argument>, <argument pos:start="95:62" pos:end="95:65"><expr pos:start="95:62" pos:end="95:65"><name pos:start="95:62" pos:end="95:65">size</name></expr></argument>)</argument_list></call> <operator pos:start="95:68" pos:end="95:68">&lt;</operator> <literal type="number" pos:start="95:70" pos:end="95:70">0</literal></expr>)</condition> <block pos:start="95:73" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:18">

        <return pos:start="97:9" pos:end="97:18">return <expr pos:start="97:16" pos:end="97:17"><operator pos:start="97:16" pos:end="97:16">-</operator><literal type="number" pos:start="97:17" pos:end="97:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:57"><expr pos:start="103:5" pos:end="103:56"><call pos:start="103:5" pos:end="103:56"><name pos:start="103:5" pos:end="103:11">dprintf</name><argument_list pos:start="103:12" pos:end="103:56">(<argument pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:55"><literal type="string" pos:start="103:13" pos:end="103:55">"spapr_vlan_receive: DMA write completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:34">/* Update the receive queue */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:49"><expr pos:start="109:5" pos:end="109:48"><name pos:start="109:5" pos:end="109:11">control</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <name pos:start="109:15" pos:end="109:30">VLAN_RXQC_TOGGLE</name> <operator pos:start="109:32" pos:end="109:32">|</operator> <name pos:start="109:34" pos:end="109:48">VLAN_RXQC_VALID</name></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:32">(<expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:14">rxq_bd</name> <operator pos:start="111:16" pos:end="111:16">&amp;</operator> <name pos:start="111:18" pos:end="111:31">VLAN_BD_TOGGLE</name></expr>)</condition> <block pos:start="111:34" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:36">

        <expr_stmt pos:start="113:9" pos:end="113:36"><expr pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:15">control</name> <operator pos:start="113:17" pos:end="113:18">^=</operator> <name pos:start="113:20" pos:end="113:35">VLAN_RXQC_TOGGLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:45"><expr pos:start="119:5" pos:end="119:44"><name pos:start="119:5" pos:end="119:10">handle</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:44"><name pos:start="119:14" pos:end="119:20">vio_ldq</name><argument_list pos:start="119:21" pos:end="119:44">(<argument pos:start="119:22" pos:end="119:25"><expr pos:start="119:22" pos:end="119:25"><name pos:start="119:22" pos:end="119:25">sdev</name></expr></argument>, <argument pos:start="119:28" pos:end="119:43"><expr pos:start="119:28" pos:end="119:43"><call pos:start="119:28" pos:end="119:43"><name pos:start="119:28" pos:end="119:39">VLAN_BD_ADDR</name><argument_list pos:start="119:40" pos:end="119:43">(<argument pos:start="119:41" pos:end="119:42"><expr pos:start="119:41" pos:end="119:42"><name pos:start="119:41" pos:end="119:42">bd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:67"><expr pos:start="121:5" pos:end="121:66"><call pos:start="121:5" pos:end="121:66"><name pos:start="121:5" pos:end="121:11">vio_stq</name><argument_list pos:start="121:12" pos:end="121:66">(<argument pos:start="121:13" pos:end="121:16"><expr pos:start="121:13" pos:end="121:16"><name pos:start="121:13" pos:end="121:16">sdev</name></expr></argument>, <argument pos:start="121:19" pos:end="121:57"><expr pos:start="121:19" pos:end="121:57"><call pos:start="121:19" pos:end="121:38"><name pos:start="121:19" pos:end="121:30">VLAN_BD_ADDR</name><argument_list pos:start="121:31" pos:end="121:38">(<argument pos:start="121:32" pos:end="121:37"><expr pos:start="121:32" pos:end="121:37"><name pos:start="121:32" pos:end="121:37">rxq_bd</name></expr></argument>)</argument_list></call> <operator pos:start="121:40" pos:end="121:40">+</operator> <name pos:start="121:42" pos:end="121:53"><name pos:start="121:42" pos:end="121:44">dev</name><operator pos:start="121:45" pos:end="121:46">-&gt;</operator><name pos:start="121:47" pos:end="121:53">rxq_ptr</name></name> <operator pos:start="121:55" pos:end="121:55">+</operator> <literal type="number" pos:start="121:57" pos:end="121:57">8</literal></expr></argument>, <argument pos:start="121:60" pos:end="121:65"><expr pos:start="121:60" pos:end="121:65"><name pos:start="121:60" pos:end="121:65">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:65"><expr pos:start="123:5" pos:end="123:64"><call pos:start="123:5" pos:end="123:64"><name pos:start="123:5" pos:end="123:11">vio_stl</name><argument_list pos:start="123:12" pos:end="123:64">(<argument pos:start="123:13" pos:end="123:16"><expr pos:start="123:13" pos:end="123:16"><name pos:start="123:13" pos:end="123:16">sdev</name></expr></argument>, <argument pos:start="123:19" pos:end="123:57"><expr pos:start="123:19" pos:end="123:57"><call pos:start="123:19" pos:end="123:38"><name pos:start="123:19" pos:end="123:30">VLAN_BD_ADDR</name><argument_list pos:start="123:31" pos:end="123:38">(<argument pos:start="123:32" pos:end="123:37"><expr pos:start="123:32" pos:end="123:37"><name pos:start="123:32" pos:end="123:37">rxq_bd</name></expr></argument>)</argument_list></call> <operator pos:start="123:40" pos:end="123:40">+</operator> <name pos:start="123:42" pos:end="123:53"><name pos:start="123:42" pos:end="123:44">dev</name><operator pos:start="123:45" pos:end="123:46">-&gt;</operator><name pos:start="123:47" pos:end="123:53">rxq_ptr</name></name> <operator pos:start="123:55" pos:end="123:55">+</operator> <literal type="number" pos:start="123:57" pos:end="123:57">4</literal></expr></argument>, <argument pos:start="123:60" pos:end="123:63"><expr pos:start="123:60" pos:end="123:63"><name pos:start="123:60" pos:end="123:63">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:62"><expr pos:start="125:5" pos:end="125:61"><call pos:start="125:5" pos:end="125:61"><name pos:start="125:5" pos:end="125:11">vio_sth</name><argument_list pos:start="125:12" pos:end="125:61">(<argument pos:start="125:13" pos:end="125:16"><expr pos:start="125:13" pos:end="125:16"><name pos:start="125:13" pos:end="125:16">sdev</name></expr></argument>, <argument pos:start="125:19" pos:end="125:57"><expr pos:start="125:19" pos:end="125:57"><call pos:start="125:19" pos:end="125:38"><name pos:start="125:19" pos:end="125:30">VLAN_BD_ADDR</name><argument_list pos:start="125:31" pos:end="125:38">(<argument pos:start="125:32" pos:end="125:37"><expr pos:start="125:32" pos:end="125:37"><name pos:start="125:32" pos:end="125:37">rxq_bd</name></expr></argument>)</argument_list></call> <operator pos:start="125:40" pos:end="125:40">+</operator> <name pos:start="125:42" pos:end="125:53"><name pos:start="125:42" pos:end="125:44">dev</name><operator pos:start="125:45" pos:end="125:46">-&gt;</operator><name pos:start="125:47" pos:end="125:53">rxq_ptr</name></name> <operator pos:start="125:55" pos:end="125:55">+</operator> <literal type="number" pos:start="125:57" pos:end="125:57">2</literal></expr></argument>, <argument pos:start="125:60" pos:end="125:60"><expr pos:start="125:60" pos:end="125:60"><literal type="number" pos:start="125:60" pos:end="125:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:64"><expr pos:start="127:5" pos:end="127:63"><call pos:start="127:5" pos:end="127:63"><name pos:start="127:5" pos:end="127:11">vio_stb</name><argument_list pos:start="127:12" pos:end="127:63">(<argument pos:start="127:13" pos:end="127:16"><expr pos:start="127:13" pos:end="127:16"><name pos:start="127:13" pos:end="127:16">sdev</name></expr></argument>, <argument pos:start="127:19" pos:end="127:53"><expr pos:start="127:19" pos:end="127:53"><call pos:start="127:19" pos:end="127:38"><name pos:start="127:19" pos:end="127:30">VLAN_BD_ADDR</name><argument_list pos:start="127:31" pos:end="127:38">(<argument pos:start="127:32" pos:end="127:37"><expr pos:start="127:32" pos:end="127:37"><name pos:start="127:32" pos:end="127:37">rxq_bd</name></expr></argument>)</argument_list></call> <operator pos:start="127:40" pos:end="127:40">+</operator> <name pos:start="127:42" pos:end="127:53"><name pos:start="127:42" pos:end="127:44">dev</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:53">rxq_ptr</name></name></expr></argument>, <argument pos:start="127:56" pos:end="127:62"><expr pos:start="127:56" pos:end="127:62"><name pos:start="127:56" pos:end="127:62">control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="141:59"><expr pos:start="131:5" pos:end="141:58"><call pos:start="131:5" pos:end="141:58"><name pos:start="131:5" pos:end="131:11">dprintf</name><argument_list pos:start="131:12" pos:end="141:58">(<argument pos:start="131:13" pos:end="131:65"><expr pos:start="131:13" pos:end="131:65"><literal type="string" pos:start="131:13" pos:end="131:65">"wrote rxq entry (ptr=0x%llx): 0x%016llx 0x%016llx\n"</literal></expr></argument>,

            <argument pos:start="133:13" pos:end="133:44"><expr pos:start="133:13" pos:end="133:44"><operator pos:start="133:13" pos:end="133:13">(</operator><name pos:start="133:14" pos:end="133:21">unsigned</name> <name pos:start="133:23" pos:end="133:26">long</name> <name pos:start="133:28" pos:end="133:31">long</name><operator pos:start="133:32" pos:end="133:32">)</operator><name pos:start="133:33" pos:end="133:44"><name pos:start="133:33" pos:end="133:35">dev</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:44">rxq_ptr</name></name></expr></argument>,

            <argument pos:start="135:13" pos:end="137:53"><expr pos:start="135:13" pos:end="137:53"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:21">unsigned</name> <name pos:start="135:23" pos:end="135:26">long</name> <name pos:start="135:28" pos:end="135:31">long</name><operator pos:start="135:32" pos:end="135:32">)</operator><call pos:start="135:33" pos:end="137:53"><name pos:start="135:33" pos:end="135:39">vio_ldq</name><argument_list pos:start="135:40" pos:end="137:53">(<argument pos:start="135:41" pos:end="135:44"><expr pos:start="135:41" pos:end="135:44"><name pos:start="135:41" pos:end="135:44">sdev</name></expr></argument>, <argument pos:start="135:47" pos:end="137:52"><expr pos:start="135:47" pos:end="137:52"><call pos:start="135:47" pos:end="135:66"><name pos:start="135:47" pos:end="135:58">VLAN_BD_ADDR</name><argument_list pos:start="135:59" pos:end="135:66">(<argument pos:start="135:60" pos:end="135:65"><expr pos:start="135:60" pos:end="135:65"><name pos:start="135:60" pos:end="135:65">rxq_bd</name></expr></argument>)</argument_list></call> <operator pos:start="135:68" pos:end="135:68">+</operator>

                                        <name pos:start="137:41" pos:end="137:52"><name pos:start="137:41" pos:end="137:43">dev</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:52">rxq_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="139:13" pos:end="141:57"><expr pos:start="139:13" pos:end="141:57"><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:21">unsigned</name> <name pos:start="139:23" pos:end="139:26">long</name> <name pos:start="139:28" pos:end="139:31">long</name><operator pos:start="139:32" pos:end="139:32">)</operator><call pos:start="139:33" pos:end="141:57"><name pos:start="139:33" pos:end="139:39">vio_ldq</name><argument_list pos:start="139:40" pos:end="141:57">(<argument pos:start="139:41" pos:end="139:44"><expr pos:start="139:41" pos:end="139:44"><name pos:start="139:41" pos:end="139:44">sdev</name></expr></argument>, <argument pos:start="139:47" pos:end="141:56"><expr pos:start="139:47" pos:end="141:56"><call pos:start="139:47" pos:end="139:66"><name pos:start="139:47" pos:end="139:58">VLAN_BD_ADDR</name><argument_list pos:start="139:59" pos:end="139:66">(<argument pos:start="139:60" pos:end="139:65"><expr pos:start="139:60" pos:end="139:65"><name pos:start="139:60" pos:end="139:65">rxq_bd</name></expr></argument>)</argument_list></call> <operator pos:start="139:68" pos:end="139:68">+</operator>

                                        <name pos:start="141:41" pos:end="141:52"><name pos:start="141:41" pos:end="141:43">dev</name><operator pos:start="141:44" pos:end="141:45">-&gt;</operator><name pos:start="141:46" pos:end="141:52">rxq_ptr</name></name> <operator pos:start="141:54" pos:end="141:54">+</operator> <literal type="number" pos:start="141:56" pos:end="141:56">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:23"><expr pos:start="145:5" pos:end="145:22"><name pos:start="145:5" pos:end="145:16"><name pos:start="145:5" pos:end="145:7">dev</name><operator pos:start="145:8" pos:end="145:9">-&gt;</operator><name pos:start="145:10" pos:end="145:16">rxq_ptr</name></name> <operator pos:start="145:18" pos:end="145:19">+=</operator> <literal type="number" pos:start="145:21" pos:end="145:22">16</literal></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:44">(<expr pos:start="147:9" pos:end="147:43"><name pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:11">dev</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:20">rxq_ptr</name></name> <operator pos:start="147:22" pos:end="147:23">&gt;=</operator> <call pos:start="147:25" pos:end="147:43"><name pos:start="147:25" pos:end="147:35">VLAN_BD_LEN</name><argument_list pos:start="147:36" pos:end="147:43">(<argument pos:start="147:37" pos:end="147:42"><expr pos:start="147:37" pos:end="147:42"><name pos:start="147:37" pos:end="147:42">rxq_bd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:46" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:80">

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:11">dev</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:20">rxq_ptr</name></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:80"><expr pos:start="151:9" pos:end="151:79"><call pos:start="151:9" pos:end="151:79"><name pos:start="151:9" pos:end="151:15">vio_stq</name><argument_list pos:start="151:16" pos:end="151:79">(<argument pos:start="151:17" pos:end="151:20"><expr pos:start="151:17" pos:end="151:20"><name pos:start="151:17" pos:end="151:20">sdev</name></expr></argument>, <argument pos:start="151:23" pos:end="151:53"><expr pos:start="151:23" pos:end="151:53"><name pos:start="151:23" pos:end="151:35"><name pos:start="151:23" pos:end="151:25">dev</name><operator pos:start="151:26" pos:end="151:27">-&gt;</operator><name pos:start="151:28" pos:end="151:35">buf_list</name></name> <operator pos:start="151:37" pos:end="151:37">+</operator> <name pos:start="151:39" pos:end="151:53">VLAN_RXQ_BD_OFF</name></expr></argument>, <argument pos:start="151:56" pos:end="151:78"><expr pos:start="151:56" pos:end="151:78"><name pos:start="151:56" pos:end="151:61">rxq_bd</name> <operator pos:start="151:63" pos:end="151:63">^</operator> <name pos:start="151:65" pos:end="151:78">VLAN_BD_TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="161:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:31">(<expr pos:start="157:9" pos:end="157:30"><name pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:12">sdev</name><operator pos:start="157:13" pos:end="157:14">-&gt;</operator><name pos:start="157:15" pos:end="157:26">signal_state</name></name> <operator pos:start="157:28" pos:end="157:28">&amp;</operator> <literal type="number" pos:start="157:30" pos:end="157:30">1</literal></expr>)</condition> <block pos:start="157:33" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:35">

        <expr_stmt pos:start="159:9" pos:end="159:35"><expr pos:start="159:9" pos:end="159:34"><call pos:start="159:9" pos:end="159:34"><name pos:start="159:9" pos:end="159:22">qemu_irq_pulse</name><argument_list pos:start="159:23" pos:end="159:34">(<argument pos:start="159:24" pos:end="159:33"><expr pos:start="159:24" pos:end="159:33"><name pos:start="159:24" pos:end="159:33"><name pos:start="159:24" pos:end="159:27">sdev</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:33">qirq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="165:5" pos:end="165:16">return <expr pos:start="165:12" pos:end="165:15"><name pos:start="165:12" pos:end="165:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
