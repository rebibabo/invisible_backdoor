<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8397.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:40">qio_channel_websock_readv</name><parameter_list pos:start="1:41" pos:end="11:54">(<parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><name pos:start="1:42" pos:end="1:51">QIOChannel</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ioc</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:64"><decl pos:start="3:42" pos:end="3:64"><type pos:start="3:42" pos:end="3:64"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:53">struct</name> <name pos:start="3:55" pos:end="3:59">iovec</name></name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:64">iov</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:52"><decl pos:start="5:42" pos:end="5:52"><type pos:start="5:42" pos:end="5:52"><name pos:start="5:42" pos:end="5:47">size_t</name></type> <name pos:start="5:49" pos:end="5:52">niov</name></decl></parameter>,

                                         <parameter pos:start="7:42" pos:end="7:50"><decl pos:start="7:42" pos:end="7:50"><type pos:start="7:42" pos:end="7:50"><name pos:start="7:42" pos:end="7:44">int</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier><modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:50">fds</name></decl></parameter>,

                                         <parameter pos:start="9:42" pos:end="9:53"><decl pos:start="9:42" pos:end="9:53"><type pos:start="9:42" pos:end="9:53"><name pos:start="9:42" pos:end="9:47">size_t</name> <modifier pos:start="9:49" pos:end="9:49">*</modifier></type><name pos:start="9:50" pos:end="9:53">nfds</name></decl></parameter>,

                                         <parameter pos:start="11:42" pos:end="11:53"><decl pos:start="11:42" pos:end="11:53"><type pos:start="11:42" pos:end="11:53"><name pos:start="11:42" pos:end="11:46">Error</name> <modifier pos:start="11:48" pos:end="11:48">*</modifier><modifier pos:start="11:49" pos:end="11:49">*</modifier></type><name pos:start="11:50" pos:end="11:53">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="87:1">{<block_content pos:start="15:5" pos:end="85:15">

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:54"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:21">QIOChannelWebsock</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:27">wioc</name> <init pos:start="15:29" pos:end="15:54">= <expr pos:start="15:31" pos:end="15:54"><call pos:start="15:31" pos:end="15:54"><name pos:start="15:31" pos:end="15:49">QIO_CHANNEL_WEBSOCK</name><argument_list pos:start="15:50" pos:end="15:54">(<argument pos:start="15:51" pos:end="15:53"><expr pos:start="15:51" pos:end="15:53"><name pos:start="15:51" pos:end="15:53">ioc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">ssize_t</name></type> <name pos:start="19:13" pos:end="19:15">got</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">ssize_t</name></type> <name pos:start="21:13" pos:end="21:15">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:21">(<expr pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:12">wioc</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:20">io_err</name></name></expr>)</condition> <block pos:start="25:23" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><operator pos:start="27:9" pos:end="27:9">*</operator><name pos:start="27:10" pos:end="27:13">errp</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:40"><name pos:start="27:17" pos:end="27:26">error_copy</name><argument_list pos:start="27:27" pos:end="27:40">(<argument pos:start="27:28" pos:end="27:39"><expr pos:start="27:28" pos:end="27:39"><name pos:start="27:28" pos:end="27:39"><name pos:start="27:28" pos:end="27:31">wioc</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:39">io_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:31">(<expr pos:start="35:9" pos:end="35:30"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:30"><name pos:start="35:10" pos:end="35:13">wioc</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:23">rawinput</name><operator pos:start="35:24" pos:end="35:24">.</operator><name pos:start="35:25" pos:end="35:30">offset</name></name></expr>)</condition> <block pos:start="35:33" pos:end="45:5">{<block_content pos:start="37:9" pos:end="43:9">

        <expr_stmt pos:start="37:9" pos:end="37:76"><expr pos:start="37:9" pos:end="37:75"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:75"><name pos:start="37:15" pos:end="37:43">qio_channel_websock_read_wire</name><argument_list pos:start="37:44" pos:end="37:75">(<argument pos:start="37:45" pos:end="37:68"><expr pos:start="37:45" pos:end="37:68"><call pos:start="37:45" pos:end="37:68"><name pos:start="37:45" pos:end="37:63">QIO_CHANNEL_WEBSOCK</name><argument_list pos:start="37:64" pos:end="37:68">(<argument pos:start="37:65" pos:end="37:67"><expr pos:start="37:65" pos:end="37:67"><name pos:start="37:65" pos:end="37:67">ioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:71" pos:end="37:74"><expr pos:start="37:71" pos:end="37:74"><name pos:start="37:71" pos:end="37:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:20">(<expr pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>)</condition> <block pos:start="39:22" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:23">

            <return pos:start="41:13" pos:end="41:23">return <expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="49:5" pos:end="77:5">for <control pos:start="49:9" pos:end="49:32">(<init pos:start="49:10" pos:end="49:16"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr> ;</init> <condition pos:start="49:18" pos:end="49:27"><expr pos:start="49:18" pos:end="49:25"><name pos:start="49:18" pos:end="49:18">i</name> <operator pos:start="49:20" pos:end="49:20">&lt;</operator> <name pos:start="49:22" pos:end="49:25">niov</name></expr> ;</condition> <incr pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:29">i</name><operator pos:start="49:30" pos:end="49:31">++</operator></expr></incr>)</control> <block pos:start="49:34" pos:end="77:5">{<block_content pos:start="51:9" pos:end="75:9">

        <decl_stmt pos:start="51:9" pos:end="51:37"><decl pos:start="51:9" pos:end="51:36"><type pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:14">size_t</name></type> <name pos:start="51:16" pos:end="51:19">want</name> <init pos:start="51:21" pos:end="51:36">= <expr pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:28"><name pos:start="51:23" pos:end="51:25">iov</name><index pos:start="51:26" pos:end="51:28">[<expr pos:start="51:27" pos:end="51:27"><name pos:start="51:27" pos:end="51:27">i</name></expr>]</index></name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:36">iov_len</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:49">(<expr pos:start="53:13" pos:end="53:48"><name pos:start="53:13" pos:end="53:16">want</name> <operator pos:start="53:18" pos:end="53:18">&gt;</operator> <operator pos:start="53:20" pos:end="53:20">(</operator><name pos:start="53:21" pos:end="53:41"><name pos:start="53:21" pos:end="53:24">wioc</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:34">rawinput</name><operator pos:start="53:35" pos:end="53:35">.</operator><name pos:start="53:36" pos:end="53:41">offset</name></name> <operator pos:start="53:43" pos:end="53:43">-</operator> <name pos:start="53:45" pos:end="53:47">got</name><operator pos:start="53:48" pos:end="53:48">)</operator></expr>)</condition> <block pos:start="53:51" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:49">

            <expr_stmt pos:start="55:13" pos:end="55:49"><expr pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:16">want</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:41"><name pos:start="55:21" pos:end="55:24">wioc</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:34">rawinput</name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:41">offset</name></name> <operator pos:start="55:43" pos:end="55:43">-</operator> <name pos:start="55:45" pos:end="55:47">got</name><operator pos:start="55:48" pos:end="55:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="65:21"><expr pos:start="61:9" pos:end="65:20"><call pos:start="61:9" pos:end="65:20"><name pos:start="61:9" pos:end="61:14">memcpy</name><argument_list pos:start="61:15" pos:end="65:20">(<argument pos:start="61:16" pos:end="61:30"><expr pos:start="61:16" pos:end="61:30"><name pos:start="61:16" pos:end="61:21"><name pos:start="61:16" pos:end="61:18">iov</name><index pos:start="61:19" pos:end="61:21">[<expr pos:start="61:20" pos:end="61:20"><name pos:start="61:20" pos:end="61:20">i</name></expr>]</index></name><operator pos:start="61:22" pos:end="61:22">.</operator><name pos:start="61:23" pos:end="61:30">iov_base</name></expr></argument>,

               <argument pos:start="63:16" pos:end="63:42"><expr pos:start="63:16" pos:end="63:42"><name pos:start="63:16" pos:end="63:36"><name pos:start="63:16" pos:end="63:19">wioc</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:29">rawinput</name><operator pos:start="63:30" pos:end="63:30">.</operator><name pos:start="63:31" pos:end="63:36">buffer</name></name> <operator pos:start="63:38" pos:end="63:38">+</operator> <name pos:start="63:40" pos:end="63:42">got</name></expr></argument>,

               <argument pos:start="65:16" pos:end="65:19"><expr pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:19">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:20"><expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:11">got</name> <operator pos:start="67:13" pos:end="67:14">+=</operator> <name pos:start="67:16" pos:end="67:19">want</name></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:34">(<expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:16">want</name> <operator pos:start="71:18" pos:end="71:18">&lt;</operator> <name pos:start="71:20" pos:end="71:25"><name pos:start="71:20" pos:end="71:22">iov</name><index pos:start="71:23" pos:end="71:25">[<expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">i</name></expr>]</index></name><operator pos:start="71:26" pos:end="71:26">.</operator><name pos:start="71:27" pos:end="71:33">iov_len</name></expr>)</condition> <block pos:start="71:36" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><call pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:18">buffer_advance</name><argument_list pos:start="81:19" pos:end="81:40">(<argument pos:start="81:20" pos:end="81:34"><expr pos:start="81:20" pos:end="81:34"><operator pos:start="81:20" pos:end="81:20">&amp;</operator><name pos:start="81:21" pos:end="81:34"><name pos:start="81:21" pos:end="81:24">wioc</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:34">rawinput</name></name></expr></argument>, <argument pos:start="81:37" pos:end="81:39"><expr pos:start="81:37" pos:end="81:39"><name pos:start="81:37" pos:end="81:39">got</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:40"><expr pos:start="83:5" pos:end="83:39"><call pos:start="83:5" pos:end="83:39"><name pos:start="83:5" pos:end="83:33">qio_channel_websock_set_watch</name><argument_list pos:start="83:34" pos:end="83:39">(<argument pos:start="83:35" pos:end="83:38"><expr pos:start="83:35" pos:end="83:38"><name pos:start="83:35" pos:end="83:38">wioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:15">return <expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">got</name></expr>;</return>

</block_content>}</block></function>
</unit>
