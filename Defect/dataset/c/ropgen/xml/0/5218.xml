<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5218.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">spapr_pci_unplug_request</name><parameter_list pos:start="1:37" pos:end="3:76">(<parameter pos:start="1:38" pos:end="1:65"><decl pos:start="1:38" pos:end="1:65"><type pos:start="1:38" pos:end="1:65"><name pos:start="1:38" pos:end="1:51">HotplugHandler</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:65">plug_handler</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:61"><decl pos:start="3:38" pos:end="3:61"><type pos:start="3:38" pos:end="3:61"><name pos:start="3:38" pos:end="3:48">DeviceState</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:61">plugged_dev</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:75"><decl pos:start="3:64" pos:end="3:75"><type pos:start="3:64" pos:end="3:75"><name pos:start="3:64" pos:end="3:68">Error</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier><modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:75">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:5">

    <decl_stmt pos:start="7:5" pos:end="7:69"><decl pos:start="7:5" pos:end="7:68"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">sPAPRPHBState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">phb</name> <init pos:start="7:24" pos:end="7:68">= <expr pos:start="7:26" pos:end="7:68"><call pos:start="7:26" pos:end="7:68"><name pos:start="7:26" pos:end="7:46">SPAPR_PCI_HOST_BRIDGE</name><argument_list pos:start="7:47" pos:end="7:68">(<argument pos:start="7:48" pos:end="7:67"><expr pos:start="7:48" pos:end="7:67"><call pos:start="7:48" pos:end="7:67"><name pos:start="7:48" pos:end="7:53">DEVICE</name><argument_list pos:start="7:54" pos:end="7:67">(<argument pos:start="7:55" pos:end="7:66"><expr pos:start="7:55" pos:end="7:66"><name pos:start="7:55" pos:end="7:66">plug_handler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">pdev</name> <init pos:start="9:21" pos:end="9:45">= <expr pos:start="9:23" pos:end="9:45"><call pos:start="9:23" pos:end="9:45"><name pos:start="9:23" pos:end="9:32">PCI_DEVICE</name><argument_list pos:start="9:33" pos:end="9:45">(<argument pos:start="9:34" pos:end="9:44"><expr pos:start="9:34" pos:end="9:44"><name pos:start="9:34" pos:end="9:44">plugged_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25">sPAPRDRConnectorClass</name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">drck</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:61"><decl pos:start="13:5" pos:end="13:60"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">sPAPRDRConnector</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:25">drc</name> <init pos:start="13:27" pos:end="13:60">= <expr pos:start="13:29" pos:end="13:60"><call pos:start="13:29" pos:end="13:60"><name pos:start="13:29" pos:end="13:49">spapr_phb_get_pci_drc</name><argument_list pos:start="13:50" pos:end="13:60">(<argument pos:start="13:51" pos:end="13:53"><expr pos:start="13:51" pos:end="13:53"><name pos:start="13:51" pos:end="13:53">phb</name></expr></argument>, <argument pos:start="13:56" pos:end="13:59"><expr pos:start="13:56" pos:end="13:59"><name pos:start="13:56" pos:end="13:59">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:25">(<expr pos:start="17:9" pos:end="17:24"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:24"><name pos:start="17:10" pos:end="17:12">phb</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:24">dr_enabled</name></name></expr>)</condition> <block pos:start="17:27" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:15">

        <expr_stmt pos:start="19:9" pos:end="21:53"><expr pos:start="19:9" pos:end="21:52"><call pos:start="19:9" pos:end="21:52"><name pos:start="19:9" pos:end="19:18">error_setg</name><argument_list pos:start="19:19" pos:end="21:52">(<argument pos:start="19:20" pos:end="19:23"><expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">errp</name></expr></argument>, <argument pos:start="19:26" pos:end="19:44"><expr pos:start="19:26" pos:end="19:44"><name pos:start="19:26" pos:end="19:44">QERR_BUS_NO_HOTPLUG</name></expr></argument>,

                   <argument pos:start="21:20" pos:end="21:51"><expr pos:start="21:20" pos:end="21:51"><call pos:start="21:20" pos:end="21:51"><name pos:start="21:20" pos:end="21:38">object_get_typename</name><argument_list pos:start="21:39" pos:end="21:51">(<argument pos:start="21:40" pos:end="21:50"><expr pos:start="21:40" pos:end="21:50"><call pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:45">OBJECT</name><argument_list pos:start="21:46" pos:end="21:50">(<argument pos:start="21:47" pos:end="21:49"><expr pos:start="21:47" pos:end="21:49"><name pos:start="21:47" pos:end="21:49">phb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:18"><expr pos:start="29:5" pos:end="29:17"><call pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:17">(<argument pos:start="29:14" pos:end="29:16"><expr pos:start="29:14" pos:end="29:16"><name pos:start="29:14" pos:end="29:16">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><call pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:37">(<argument pos:start="31:14" pos:end="31:36"><expr pos:start="31:14" pos:end="31:36"><name pos:start="31:14" pos:end="31:21"><name pos:start="31:14" pos:end="31:16">drc</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:21">dev</name></name> <operator pos:start="31:23" pos:end="31:24">==</operator> <name pos:start="31:26" pos:end="31:36">plugged_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:8">drck</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:44"><name pos:start="35:12" pos:end="35:39">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="35:40" pos:end="35:44">(<argument pos:start="35:41" pos:end="35:43"><expr pos:start="35:41" pos:end="35:43"><name pos:start="35:41" pos:end="35:43">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="121:5"><if pos:start="37:5" pos:end="121:5">if <condition pos:start="37:8" pos:end="37:36">(<expr pos:start="37:9" pos:end="37:35"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:35"><name pos:start="37:10" pos:end="37:30"><name pos:start="37:10" pos:end="37:13">drck</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:30">release_pending</name></name><argument_list pos:start="37:31" pos:end="37:35">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><name pos:start="37:32" pos:end="37:34">drc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:38" pos:end="121:5">{<block_content pos:start="39:9" pos:end="119:9">

        <decl_stmt pos:start="39:9" pos:end="39:65"><decl pos:start="39:9" pos:end="39:64"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:14">PCIBus</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:19">bus</name> <init pos:start="39:21" pos:end="39:64">= <expr pos:start="39:23" pos:end="39:64"><call pos:start="39:23" pos:end="39:64"><name pos:start="39:23" pos:end="39:29">PCI_BUS</name><argument_list pos:start="39:30" pos:end="39:64">(<argument pos:start="39:31" pos:end="39:63"><expr pos:start="39:31" pos:end="39:63"><call pos:start="39:31" pos:end="39:63"><name pos:start="39:31" pos:end="39:49">qdev_get_parent_bus</name><argument_list pos:start="39:50" pos:end="39:63">(<argument pos:start="39:51" pos:end="39:62"><expr pos:start="39:51" pos:end="39:62"><call pos:start="39:51" pos:end="39:62"><name pos:start="39:51" pos:end="39:56">DEVICE</name><argument_list pos:start="39:57" pos:end="39:62">(<argument pos:start="39:58" pos:end="39:61"><expr pos:start="39:58" pos:end="39:61"><name pos:start="39:58" pos:end="39:61">pdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:48"><decl pos:start="41:9" pos:end="41:47"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">uint32_t</name></type> <name pos:start="41:18" pos:end="41:23">slotnr</name> <init pos:start="41:25" pos:end="41:47">= <expr pos:start="41:27" pos:end="41:47"><call pos:start="41:27" pos:end="41:47"><name pos:start="41:27" pos:end="41:34">PCI_SLOT</name><argument_list pos:start="41:35" pos:end="41:47">(<argument pos:start="41:36" pos:end="41:46"><expr pos:start="41:36" pos:end="41:46"><name pos:start="41:36" pos:end="41:46"><name pos:start="41:36" pos:end="41:39">pdev</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:46">devfn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:35"><decl pos:start="43:9" pos:end="43:34"><type pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:24">sPAPRDRConnector</name> <modifier pos:start="43:26" pos:end="43:26">*</modifier></type><name pos:start="43:27" pos:end="43:34">func_drc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:41"><decl pos:start="45:9" pos:end="45:40"><type pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:29">sPAPRDRConnectorClass</name> <modifier pos:start="45:31" pos:end="45:31">*</modifier></type><name pos:start="45:32" pos:end="45:40">func_drck</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:33"><decl pos:start="47:9" pos:end="47:32"><type pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:26">sPAPRDREntitySense</name></type> <name pos:start="47:28" pos:end="47:32">state</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:14"><decl pos:start="49:9" pos:end="49:13"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:13">i</name></decl>;</decl_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:67">/* ensure any other present functions are pending unplug */</comment>

        <if_stmt pos:start="55:9" pos:end="85:9"><if pos:start="55:9" pos:end="85:9">if <condition pos:start="55:12" pos:end="55:39">(<expr pos:start="55:13" pos:end="55:38"><call pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:20">PCI_FUNC</name><argument_list pos:start="55:21" pos:end="55:33">(<argument pos:start="55:22" pos:end="55:32"><expr pos:start="55:22" pos:end="55:32"><name pos:start="55:22" pos:end="55:32"><name pos:start="55:22" pos:end="55:25">pdev</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:32">devfn</name></name></expr></argument>)</argument_list></call> <operator pos:start="55:35" pos:end="55:36">==</operator> <literal type="number" pos:start="55:38" pos:end="55:38">0</literal></expr>)</condition> <block pos:start="55:41" pos:end="85:9">{<block_content pos:start="57:13" pos:end="83:13">

            <for pos:start="57:13" pos:end="83:13">for <control pos:start="57:17" pos:end="57:35">(<init pos:start="57:18" pos:end="57:23"><expr pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:18">i</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">1</literal></expr>;</init> <condition pos:start="57:25" pos:end="57:30"><expr pos:start="57:25" pos:end="57:29"><name pos:start="57:25" pos:end="57:25">i</name> <operator pos:start="57:27" pos:end="57:27">&lt;</operator> <literal type="number" pos:start="57:29" pos:end="57:29">8</literal></expr>;</condition> <incr pos:start="57:32" pos:end="57:34"><expr pos:start="57:32" pos:end="57:34"><name pos:start="57:32" pos:end="57:32">i</name><operator pos:start="57:33" pos:end="57:34">++</operator></expr></incr>)</control> <block pos:start="57:37" pos:end="83:13">{<block_content pos:start="59:17" pos:end="81:17">

                <expr_stmt pos:start="59:17" pos:end="61:76"><expr pos:start="59:17" pos:end="61:75"><name pos:start="59:17" pos:end="59:24">func_drc</name> <operator pos:start="59:26" pos:end="59:26">=</operator> <call pos:start="59:28" pos:end="61:75"><name pos:start="59:28" pos:end="59:53">spapr_phb_get_pci_func_drc</name><argument_list pos:start="59:54" pos:end="61:75">(<argument pos:start="59:55" pos:end="59:57"><expr pos:start="59:55" pos:end="59:57"><name pos:start="59:55" pos:end="59:57">phb</name></expr></argument>, <argument pos:start="59:60" pos:end="59:75"><expr pos:start="59:60" pos:end="59:75"><call pos:start="59:60" pos:end="59:75"><name pos:start="59:60" pos:end="59:70">pci_bus_num</name><argument_list pos:start="59:71" pos:end="59:75">(<argument pos:start="59:72" pos:end="59:74"><expr pos:start="59:72" pos:end="59:74"><name pos:start="59:72" pos:end="59:74">bus</name></expr></argument>)</argument_list></call></expr></argument>,

                                                      <argument pos:start="61:55" pos:end="61:74"><expr pos:start="61:55" pos:end="61:74"><call pos:start="61:55" pos:end="61:74"><name pos:start="61:55" pos:end="61:63">PCI_DEVFN</name><argument_list pos:start="61:64" pos:end="61:74">(<argument pos:start="61:65" pos:end="61:70"><expr pos:start="61:65" pos:end="61:70"><name pos:start="61:65" pos:end="61:70">slotnr</name></expr></argument>, <argument pos:start="61:73" pos:end="61:73"><expr pos:start="61:73" pos:end="61:73"><name pos:start="61:73" pos:end="61:73">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:67"><expr pos:start="63:17" pos:end="63:66"><name pos:start="63:17" pos:end="63:25">func_drck</name> <operator pos:start="63:27" pos:end="63:27">=</operator> <call pos:start="63:29" pos:end="63:66"><name pos:start="63:29" pos:end="63:56">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="63:57" pos:end="63:66">(<argument pos:start="63:58" pos:end="63:65"><expr pos:start="63:58" pos:end="63:65"><name pos:start="63:58" pos:end="63:65">func_drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:61"><expr pos:start="65:17" pos:end="65:60"><name pos:start="65:17" pos:end="65:21">state</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:60"><name pos:start="65:25" pos:end="65:50"><name pos:start="65:25" pos:end="65:33">func_drck</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:50">dr_entity_sense</name></name><argument_list pos:start="65:51" pos:end="65:60">(<argument pos:start="65:52" pos:end="65:59"><expr pos:start="65:52" pos:end="65:59"><name pos:start="65:52" pos:end="65:59">func_drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="67:17" pos:end="81:17"><if pos:start="67:17" pos:end="81:17">if <condition pos:start="67:20" pos:end="69:61">(<expr pos:start="67:21" pos:end="69:60"><name pos:start="67:21" pos:end="67:25">state</name> <operator pos:start="67:27" pos:end="67:28">==</operator> <name pos:start="67:30" pos:end="67:58">SPAPR_DR_ENTITY_SENSE_PRESENT</name>

                    <operator pos:start="69:21" pos:end="69:22">&amp;&amp;</operator> <operator pos:start="69:24" pos:end="69:24">!</operator><call pos:start="69:25" pos:end="69:60"><name pos:start="69:25" pos:end="69:50"><name pos:start="69:25" pos:end="69:33">func_drck</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:50">release_pending</name></name><argument_list pos:start="69:51" pos:end="69:60">(<argument pos:start="69:52" pos:end="69:59"><expr pos:start="69:52" pos:end="69:59"><name pos:start="69:52" pos:end="69:59">func_drc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:63" pos:end="81:17">{<block_content pos:start="71:21" pos:end="79:27">

                    <expr_stmt pos:start="71:21" pos:end="77:42"><expr pos:start="71:21" pos:end="77:41"><call pos:start="71:21" pos:end="77:41"><name pos:start="71:21" pos:end="71:30">error_setg</name><argument_list pos:start="71:31" pos:end="77:41">(<argument pos:start="71:32" pos:end="71:35"><expr pos:start="71:32" pos:end="71:35"><name pos:start="71:32" pos:end="71:35">errp</name></expr></argument>,

                               <argument pos:start="73:32" pos:end="75:71"><expr pos:start="73:32" pos:end="75:71"><literal type="string" pos:start="73:32" pos:end="73:74">"PCI: slot %d, function %d still present. "</literal>

                               <literal type="string" pos:start="75:32" pos:end="75:71">"Must unplug all non-0 functions first."</literal></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:37"><expr pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:37">slotnr</name></expr></argument>, <argument pos:start="77:40" pos:end="77:40"><expr pos:start="77:40" pos:end="77:40"><name pos:start="77:40" pos:end="77:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="79:21" pos:end="79:27">return;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><call pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:24">spapr_drc_detach</name><argument_list pos:start="89:25" pos:end="89:29">(<argument pos:start="89:26" pos:end="89:28"><expr pos:start="89:26" pos:end="89:28"><name pos:start="89:26" pos:end="89:28">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="93:9" pos:end="97:11">/* if this isn't func 0, defer unplug event. otherwise signal removal

         * for all present functions

         */</comment>

        <if_stmt pos:start="99:9" pos:end="119:9"><if pos:start="99:9" pos:end="119:9">if <condition pos:start="99:12" pos:end="99:39">(<expr pos:start="99:13" pos:end="99:38"><call pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:20">PCI_FUNC</name><argument_list pos:start="99:21" pos:end="99:33">(<argument pos:start="99:22" pos:end="99:32"><expr pos:start="99:22" pos:end="99:32"><name pos:start="99:22" pos:end="99:32"><name pos:start="99:22" pos:end="99:25">pdev</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:32">devfn</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:35" pos:end="99:36">==</operator> <literal type="number" pos:start="99:38" pos:end="99:38">0</literal></expr>)</condition> <block pos:start="99:41" pos:end="119:9">{<block_content pos:start="101:13" pos:end="117:13">

            <for pos:start="101:13" pos:end="117:13">for <control pos:start="101:17" pos:end="101:36">(<init pos:start="101:18" pos:end="101:23"><expr pos:start="101:18" pos:end="101:22"><name pos:start="101:18" pos:end="101:18">i</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">7</literal></expr>;</init> <condition pos:start="101:25" pos:end="101:31"><expr pos:start="101:25" pos:end="101:30"><name pos:start="101:25" pos:end="101:25">i</name> <operator pos:start="101:27" pos:end="101:28">&gt;=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">0</literal></expr>;</condition> <incr pos:start="101:33" pos:end="101:35"><expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:33">i</name><operator pos:start="101:34" pos:end="101:35">--</operator></expr></incr>)</control> <block pos:start="101:38" pos:end="117:13">{<block_content pos:start="103:17" pos:end="115:17">

                <expr_stmt pos:start="103:17" pos:end="105:76"><expr pos:start="103:17" pos:end="105:75"><name pos:start="103:17" pos:end="103:24">func_drc</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <call pos:start="103:28" pos:end="105:75"><name pos:start="103:28" pos:end="103:53">spapr_phb_get_pci_func_drc</name><argument_list pos:start="103:54" pos:end="105:75">(<argument pos:start="103:55" pos:end="103:57"><expr pos:start="103:55" pos:end="103:57"><name pos:start="103:55" pos:end="103:57">phb</name></expr></argument>, <argument pos:start="103:60" pos:end="103:75"><expr pos:start="103:60" pos:end="103:75"><call pos:start="103:60" pos:end="103:75"><name pos:start="103:60" pos:end="103:70">pci_bus_num</name><argument_list pos:start="103:71" pos:end="103:75">(<argument pos:start="103:72" pos:end="103:74"><expr pos:start="103:72" pos:end="103:74"><name pos:start="103:72" pos:end="103:74">bus</name></expr></argument>)</argument_list></call></expr></argument>,

                                                      <argument pos:start="105:55" pos:end="105:74"><expr pos:start="105:55" pos:end="105:74"><call pos:start="105:55" pos:end="105:74"><name pos:start="105:55" pos:end="105:63">PCI_DEVFN</name><argument_list pos:start="105:64" pos:end="105:74">(<argument pos:start="105:65" pos:end="105:70"><expr pos:start="105:65" pos:end="105:70"><name pos:start="105:65" pos:end="105:70">slotnr</name></expr></argument>, <argument pos:start="105:73" pos:end="105:73"><expr pos:start="105:73" pos:end="105:73"><name pos:start="105:73" pos:end="105:73">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:67"><expr pos:start="107:17" pos:end="107:66"><name pos:start="107:17" pos:end="107:25">func_drck</name> <operator pos:start="107:27" pos:end="107:27">=</operator> <call pos:start="107:29" pos:end="107:66"><name pos:start="107:29" pos:end="107:56">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="107:57" pos:end="107:66">(<argument pos:start="107:58" pos:end="107:65"><expr pos:start="107:58" pos:end="107:65"><name pos:start="107:58" pos:end="107:65">func_drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:61"><expr pos:start="109:17" pos:end="109:60"><name pos:start="109:17" pos:end="109:21">state</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <call pos:start="109:25" pos:end="109:60"><name pos:start="109:25" pos:end="109:50"><name pos:start="109:25" pos:end="109:33">func_drck</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:50">dr_entity_sense</name></name><argument_list pos:start="109:51" pos:end="109:60">(<argument pos:start="109:52" pos:end="109:59"><expr pos:start="109:52" pos:end="109:59"><name pos:start="109:52" pos:end="109:59">func_drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="111:17" pos:end="115:17"><if pos:start="111:17" pos:end="115:17">if <condition pos:start="111:20" pos:end="111:59">(<expr pos:start="111:21" pos:end="111:58"><name pos:start="111:21" pos:end="111:25">state</name> <operator pos:start="111:27" pos:end="111:28">==</operator> <name pos:start="111:30" pos:end="111:58">SPAPR_DR_ENTITY_SENSE_PRESENT</name></expr>)</condition> <block pos:start="111:61" pos:end="115:17">{<block_content pos:start="113:21" pos:end="113:64">

                    <expr_stmt pos:start="113:21" pos:end="113:64"><expr pos:start="113:21" pos:end="113:63"><call pos:start="113:21" pos:end="113:63"><name pos:start="113:21" pos:end="113:53">spapr_hotplug_req_remove_by_index</name><argument_list pos:start="113:54" pos:end="113:63">(<argument pos:start="113:55" pos:end="113:62"><expr pos:start="113:55" pos:end="113:62"><name pos:start="113:55" pos:end="113:62">func_drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
