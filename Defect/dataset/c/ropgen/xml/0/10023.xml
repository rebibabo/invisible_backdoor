<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10023.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">mcf5208evb_init</name><parameter_list pos:start="1:28" pos:end="7:72">(<parameter pos:start="1:29" pos:end="1:47"><decl pos:start="1:29" pos:end="1:47"><type pos:start="1:29" pos:end="1:47"><name pos:start="1:29" pos:end="1:38">ram_addr_t</name></type> <name pos:start="1:40" pos:end="1:47">ram_size</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:65"><decl pos:start="1:50" pos:end="1:65"><type pos:start="1:50" pos:end="1:65"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:65">vga_ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:62"><decl pos:start="3:47" pos:end="3:62"><type pos:start="3:47" pos:end="3:62"><name pos:start="3:47" pos:end="3:58">DisplayState</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">ds</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="201:1">{<block_content pos:start="11:5" pos:end="199:20">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:22">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pic</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:28"><if pos:start="23:5" pos:end="25:28">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:28"><block_content pos:start="25:9" pos:end="25:28">

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="string" pos:start="25:21" pos:end="25:27">"m5208"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:7">env</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:29"><name pos:start="27:11" pos:end="27:18">cpu_init</name><argument_list pos:start="27:19" pos:end="27:29">(<argument pos:start="27:20" pos:end="27:28"><expr pos:start="27:20" pos:end="27:28"><name pos:start="27:20" pos:end="27:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:13">(<expr pos:start="29:9" pos:end="29:12"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:12">env</name></expr>)</condition> <block pos:start="29:15" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:16">

        <expr_stmt pos:start="31:9" pos:end="31:64"><expr pos:start="31:9" pos:end="31:63"><call pos:start="31:9" pos:end="31:63"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:63">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:62"><expr pos:start="31:25" pos:end="31:62"><literal type="string" pos:start="31:25" pos:end="31:62">"Unable to find m68k CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:36">/* Initialize CPU registers.  */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:7">env</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:12">vbr</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:32">/* TODO: Configure BARs.  */</comment>



    <comment type="block" pos:start="47:5" pos:end="47:28">/* DRAM at 0x20000000 */</comment>

    <expr_stmt pos:start="49:5" pos:end="51:47"><expr pos:start="49:5" pos:end="51:46"><call pos:start="49:5" pos:end="51:46"><name pos:start="49:5" pos:end="49:32">cpu_register_physical_memory</name><argument_list pos:start="49:33" pos:end="51:46">(<argument pos:start="49:34" pos:end="49:43"><expr pos:start="49:34" pos:end="49:43"><literal type="number" pos:start="49:34" pos:end="49:43">0x40000000</literal></expr></argument>, <argument pos:start="49:46" pos:end="49:53"><expr pos:start="49:46" pos:end="49:53"><name pos:start="49:46" pos:end="49:53">ram_size</name></expr></argument>,

        <argument pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:45"><call pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:22">qemu_ram_alloc</name><argument_list pos:start="51:23" pos:end="51:32">(<argument pos:start="51:24" pos:end="51:31"><expr pos:start="51:24" pos:end="51:31"><name pos:start="51:24" pos:end="51:31">ram_size</name></expr></argument>)</argument_list></call> <operator pos:start="51:34" pos:end="51:34">|</operator> <name pos:start="51:36" pos:end="51:45">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:25">/* Internal SRAM.  */</comment>

    <expr_stmt pos:start="57:5" pos:end="59:44"><expr pos:start="57:5" pos:end="59:43"><call pos:start="57:5" pos:end="59:43"><name pos:start="57:5" pos:end="57:32">cpu_register_physical_memory</name><argument_list pos:start="57:33" pos:end="59:43">(<argument pos:start="57:34" pos:end="57:43"><expr pos:start="57:34" pos:end="57:43"><literal type="number" pos:start="57:34" pos:end="57:43">0x80000000</literal></expr></argument>, <argument pos:start="57:46" pos:end="57:50"><expr pos:start="57:46" pos:end="57:50"><literal type="number" pos:start="57:46" pos:end="57:50">16384</literal></expr></argument>,

        <argument pos:start="59:9" pos:end="59:42"><expr pos:start="59:9" pos:end="59:42"><call pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:22">qemu_ram_alloc</name><argument_list pos:start="59:23" pos:end="59:29">(<argument pos:start="59:24" pos:end="59:28"><expr pos:start="59:24" pos:end="59:28"><literal type="number" pos:start="59:24" pos:end="59:28">16384</literal></expr></argument>)</argument_list></call> <operator pos:start="59:31" pos:end="59:31">|</operator> <name pos:start="59:33" pos:end="59:42">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:32">/* Internal peripherals.  */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:7">pic</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:40"><name pos:start="65:11" pos:end="65:23">mcf_intc_init</name><argument_list pos:start="65:24" pos:end="65:40">(<argument pos:start="65:25" pos:end="65:34"><expr pos:start="65:25" pos:end="65:34"><literal type="number" pos:start="65:25" pos:end="65:34">0xfc048000</literal></expr></argument>, <argument pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:39">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:57"><expr pos:start="69:5" pos:end="69:56"><call pos:start="69:5" pos:end="69:56"><name pos:start="69:5" pos:end="69:20">mcf_uart_mm_init</name><argument_list pos:start="69:21" pos:end="69:56">(<argument pos:start="69:22" pos:end="69:31"><expr pos:start="69:22" pos:end="69:31"><literal type="number" pos:start="69:22" pos:end="69:31">0xfc060000</literal></expr></argument>, <argument pos:start="69:34" pos:end="69:40"><expr pos:start="69:34" pos:end="69:40"><name pos:start="69:34" pos:end="69:40"><name pos:start="69:34" pos:end="69:36">pic</name><index pos:start="69:37" pos:end="69:40">[<expr pos:start="69:38" pos:end="69:39"><literal type="number" pos:start="69:38" pos:end="69:39">26</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:43" pos:end="69:55"><expr pos:start="69:43" pos:end="69:55"><name pos:start="69:43" pos:end="69:55"><name pos:start="69:43" pos:end="69:52">serial_hds</name><index pos:start="69:53" pos:end="69:55">[<expr pos:start="69:54" pos:end="69:54"><literal type="number" pos:start="69:54" pos:end="69:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:57"><expr pos:start="71:5" pos:end="71:56"><call pos:start="71:5" pos:end="71:56"><name pos:start="71:5" pos:end="71:20">mcf_uart_mm_init</name><argument_list pos:start="71:21" pos:end="71:56">(<argument pos:start="71:22" pos:end="71:31"><expr pos:start="71:22" pos:end="71:31"><literal type="number" pos:start="71:22" pos:end="71:31">0xfc064000</literal></expr></argument>, <argument pos:start="71:34" pos:end="71:40"><expr pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:36">pic</name><index pos:start="71:37" pos:end="71:40">[<expr pos:start="71:38" pos:end="71:39"><literal type="number" pos:start="71:38" pos:end="71:39">27</literal></expr>]</index></name></expr></argument>, <argument pos:start="71:43" pos:end="71:55"><expr pos:start="71:43" pos:end="71:55"><name pos:start="71:43" pos:end="71:55"><name pos:start="71:43" pos:end="71:52">serial_hds</name><index pos:start="71:53" pos:end="71:55">[<expr pos:start="71:54" pos:end="71:54"><literal type="number" pos:start="71:54" pos:end="71:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:57"><expr pos:start="73:5" pos:end="73:56"><call pos:start="73:5" pos:end="73:56"><name pos:start="73:5" pos:end="73:20">mcf_uart_mm_init</name><argument_list pos:start="73:21" pos:end="73:56">(<argument pos:start="73:22" pos:end="73:31"><expr pos:start="73:22" pos:end="73:31"><literal type="number" pos:start="73:22" pos:end="73:31">0xfc068000</literal></expr></argument>, <argument pos:start="73:34" pos:end="73:40"><expr pos:start="73:34" pos:end="73:40"><name pos:start="73:34" pos:end="73:40"><name pos:start="73:34" pos:end="73:36">pic</name><index pos:start="73:37" pos:end="73:40">[<expr pos:start="73:38" pos:end="73:39"><literal type="number" pos:start="73:38" pos:end="73:39">28</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:43" pos:end="73:55"><expr pos:start="73:43" pos:end="73:55"><name pos:start="73:43" pos:end="73:55"><name pos:start="73:43" pos:end="73:52">serial_hds</name><index pos:start="73:53" pos:end="73:55">[<expr pos:start="73:54" pos:end="73:54"><literal type="number" pos:start="73:54" pos:end="73:54">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><call pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:20">mcf5208_sys_init</name><argument_list pos:start="77:21" pos:end="77:25">(<argument pos:start="77:22" pos:end="77:24"><expr pos:start="77:22" pos:end="77:24"><name pos:start="77:22" pos:end="77:24">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:20">(<expr pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:15">nb_nics</name> <operator pos:start="81:17" pos:end="81:17">&gt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">1</literal></expr>)</condition> <block pos:start="81:22" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:16">

        <expr_stmt pos:start="83:9" pos:end="83:43"><expr pos:start="83:9" pos:end="83:42"><call pos:start="83:9" pos:end="83:42"><name pos:start="83:9" pos:end="83:15">fprintf</name><argument_list pos:start="83:16" pos:end="83:42">(<argument pos:start="83:17" pos:end="83:22"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">stderr</name></expr></argument>, <argument pos:start="83:25" pos:end="83:41"><expr pos:start="83:25" pos:end="83:41"><literal type="string" pos:start="83:25" pos:end="83:41">"Too many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:16"><expr pos:start="85:9" pos:end="85:15"><call pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:12">exit</name><argument_list pos:start="85:13" pos:end="85:15">(<argument pos:start="85:14" pos:end="85:14"><expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="111:5"><if pos:start="89:5" pos:end="111:5">if <condition pos:start="89:8" pos:end="89:25">(<expr pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:16">nd_table</name><index pos:start="89:17" pos:end="89:19">[<expr pos:start="89:18" pos:end="89:18"><literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>]</index></name><operator pos:start="89:20" pos:end="89:20">.</operator><name pos:start="89:21" pos:end="89:24">vlan</name></expr>)</condition> <block pos:start="89:27" pos:end="111:5">{<block_content pos:start="91:9" pos:end="109:9">

        <if_stmt pos:start="91:9" pos:end="109:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="93:57">(<expr pos:start="91:13" pos:end="93:56"><name pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:20">nd_table</name><index pos:start="91:21" pos:end="91:23">[<expr pos:start="91:22" pos:end="91:22"><literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>]</index></name><operator pos:start="91:24" pos:end="91:24">.</operator><name pos:start="91:25" pos:end="91:29">model</name> <operator pos:start="91:31" pos:end="91:32">==</operator> <name pos:start="91:34" pos:end="91:37">NULL</name>

            <operator pos:start="93:13" pos:end="93:14">||</operator> <call pos:start="93:16" pos:end="93:51"><name pos:start="93:16" pos:end="93:21">strcmp</name><argument_list pos:start="93:22" pos:end="93:51">(<argument pos:start="93:23" pos:end="93:39"><expr pos:start="93:23" pos:end="93:39"><name pos:start="93:23" pos:end="93:33"><name pos:start="93:23" pos:end="93:30">nd_table</name><index pos:start="93:31" pos:end="93:33">[<expr pos:start="93:32" pos:end="93:32"><literal type="number" pos:start="93:32" pos:end="93:32">0</literal></expr>]</index></name><operator pos:start="93:34" pos:end="93:34">.</operator><name pos:start="93:35" pos:end="93:39">model</name></expr></argument>, <argument pos:start="93:42" pos:end="93:50"><expr pos:start="93:42" pos:end="93:50"><literal type="string" pos:start="93:42" pos:end="93:50">"mcf_fec"</literal></expr></argument>)</argument_list></call> <operator pos:start="93:53" pos:end="93:54">==</operator> <literal type="number" pos:start="93:56" pos:end="93:56">0</literal></expr>)</condition> <block pos:start="93:59" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:61">

            <expr_stmt pos:start="95:13" pos:end="95:61"><expr pos:start="95:13" pos:end="95:60"><call pos:start="95:13" pos:end="95:60"><name pos:start="95:13" pos:end="95:24">mcf_fec_init</name><argument_list pos:start="95:25" pos:end="95:60">(<argument pos:start="95:26" pos:end="95:37"><expr pos:start="95:26" pos:end="95:37"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:37"><name pos:start="95:27" pos:end="95:34">nd_table</name><index pos:start="95:35" pos:end="95:37">[<expr pos:start="95:36" pos:end="95:36"><literal type="number" pos:start="95:36" pos:end="95:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="95:40" pos:end="95:49"><expr pos:start="95:40" pos:end="95:49"><literal type="number" pos:start="95:40" pos:end="95:49">0xfc030000</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:59"><expr pos:start="95:52" pos:end="95:59"><name pos:start="95:52" pos:end="95:54">pic</name> <operator pos:start="95:56" pos:end="95:56">+</operator> <literal type="number" pos:start="95:58" pos:end="95:59">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="97:11" pos:end="103:9">else if <condition pos:start="97:19" pos:end="97:55">(<expr pos:start="97:20" pos:end="97:54"><call pos:start="97:20" pos:end="97:49"><name pos:start="97:20" pos:end="97:25">strcmp</name><argument_list pos:start="97:26" pos:end="97:49">(<argument pos:start="97:27" pos:end="97:43"><expr pos:start="97:27" pos:end="97:43"><name pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:34">nd_table</name><index pos:start="97:35" pos:end="97:37">[<expr pos:start="97:36" pos:end="97:36"><literal type="number" pos:start="97:36" pos:end="97:36">0</literal></expr>]</index></name><operator pos:start="97:38" pos:end="97:38">.</operator><name pos:start="97:39" pos:end="97:43">model</name></expr></argument>, <argument pos:start="97:46" pos:end="97:48"><expr pos:start="97:46" pos:end="97:48"><literal type="string" pos:start="97:46" pos:end="97:48">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="97:51" pos:end="97:52">==</operator> <literal type="number" pos:start="97:54" pos:end="97:54">0</literal></expr>)</condition> <block pos:start="97:57" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:21">

            <expr_stmt pos:start="99:13" pos:end="99:63"><expr pos:start="99:13" pos:end="99:62"><call pos:start="99:13" pos:end="99:62"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:62">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:61"><expr pos:start="99:29" pos:end="99:61"><literal type="string" pos:start="99:29" pos:end="99:61">"qemu: Supported NICs: mcf_fec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:21"><expr pos:start="101:13" pos:end="101:20"><call pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:16">exit</name> <argument_list pos:start="101:18" pos:end="101:20">(<argument pos:start="101:19" pos:end="101:19"><expr pos:start="101:19" pos:end="101:19"><literal type="number" pos:start="101:19" pos:end="101:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="109:9">else <block pos:start="103:16" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:21">

            <expr_stmt pos:start="105:13" pos:end="105:78"><expr pos:start="105:13" pos:end="105:77"><call pos:start="105:13" pos:end="105:77"><name pos:start="105:13" pos:end="105:19">fprintf</name><argument_list pos:start="105:20" pos:end="105:77">(<argument pos:start="105:21" pos:end="105:26"><expr pos:start="105:21" pos:end="105:26"><name pos:start="105:21" pos:end="105:26">stderr</name></expr></argument>, <argument pos:start="105:29" pos:end="105:57"><expr pos:start="105:29" pos:end="105:57"><literal type="string" pos:start="105:29" pos:end="105:57">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="105:60" pos:end="105:76"><expr pos:start="105:60" pos:end="105:76"><name pos:start="105:60" pos:end="105:70"><name pos:start="105:60" pos:end="105:67">nd_table</name><index pos:start="105:68" pos:end="105:70">[<expr pos:start="105:69" pos:end="105:69"><literal type="number" pos:start="105:69" pos:end="105:69">0</literal></expr>]</index></name><operator pos:start="105:71" pos:end="105:71">.</operator><name pos:start="105:72" pos:end="105:76">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:21"><expr pos:start="107:13" pos:end="107:20"><call pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:16">exit</name> <argument_list pos:start="107:18" pos:end="107:20">(<argument pos:start="107:19" pos:end="107:19"><expr pos:start="107:19" pos:end="107:19"><literal type="number" pos:start="107:19" pos:end="107:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:27">/*  0xfc000000 SCM.  */</comment>

    <comment type="block" pos:start="117:5" pos:end="117:27">/*  0xfc004000 XBS.  */</comment>

    <comment type="block" pos:start="119:5" pos:end="119:34">/*  0xfc008000 FlexBus CS.  */</comment>

    <comment type="block" pos:start="121:5" pos:end="121:26">/* 0xfc030000 FEC.  */</comment>

    <comment type="block" pos:start="123:5" pos:end="123:46">/*  0xfc040000 SCM + Power management.  */</comment>

    <comment type="block" pos:start="125:5" pos:end="125:28">/*  0xfc044000 eDMA.  */</comment>

    <comment type="block" pos:start="127:5" pos:end="127:27">/* 0xfc048000 INTC.  */</comment>

    <comment type="block" pos:start="129:5" pos:end="129:27">/*  0xfc058000 I2C.  */</comment>

    <comment type="block" pos:start="131:5" pos:end="131:28">/*  0xfc05c000 QSPI.  */</comment>

    <comment type="block" pos:start="133:5" pos:end="133:28">/* 0xfc060000 UART0.  */</comment>

    <comment type="block" pos:start="135:5" pos:end="135:28">/* 0xfc064000 UART0.  */</comment>

    <comment type="block" pos:start="137:5" pos:end="137:28">/* 0xfc068000 UART0.  */</comment>

    <comment type="block" pos:start="139:5" pos:end="139:34">/*  0xfc070000 DMA timers.  */</comment>

    <comment type="block" pos:start="141:5" pos:end="141:27">/* 0xfc080000 PIT0.  */</comment>

    <comment type="block" pos:start="143:5" pos:end="143:27">/* 0xfc084000 PIT1.  */</comment>

    <comment type="block" pos:start="145:5" pos:end="145:29">/*  0xfc088000 EPORT.  */</comment>

    <comment type="block" pos:start="147:5" pos:end="147:32">/*  0xfc08c000 Watchdog.  */</comment>

    <comment type="block" pos:start="149:5" pos:end="149:36">/*  0xfc090000 clock module.  */</comment>

    <comment type="block" pos:start="151:5" pos:end="151:35">/*  0xfc0a0000 CCM + reset.  */</comment>

    <comment type="block" pos:start="153:5" pos:end="153:28">/*  0xfc0a4000 GPIO.  */</comment>

    <comment type="block" pos:start="155:5" pos:end="155:39">/* 0xfc0a8000 SDRAM controller.  */</comment>



    <comment type="block" pos:start="159:5" pos:end="159:23">/* Load kernel.  */</comment>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:25">(<expr pos:start="161:9" pos:end="161:24"><operator pos:start="161:9" pos:end="161:9">!</operator><name pos:start="161:10" pos:end="161:24">kernel_filename</name></expr>)</condition> <block pos:start="161:27" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:16">

        <expr_stmt pos:start="163:9" pos:end="163:60"><expr pos:start="163:9" pos:end="163:59"><call pos:start="163:9" pos:end="163:59"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:59">(<argument pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">stderr</name></expr></argument>, <argument pos:start="163:25" pos:end="163:58"><expr pos:start="163:25" pos:end="163:58"><literal type="string" pos:start="163:25" pos:end="163:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:16"><expr pos:start="165:9" pos:end="165:15"><call pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:12">exit</name><argument_list pos:start="165:13" pos:end="165:15">(<argument pos:start="165:14" pos:end="165:14"><expr pos:start="165:14" pos:end="165:14"><literal type="number" pos:start="165:14" pos:end="165:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:71"><expr pos:start="171:5" pos:end="171:70"><name pos:start="171:5" pos:end="171:15">kernel_size</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="171:70"><name pos:start="171:19" pos:end="171:26">load_elf</name><argument_list pos:start="171:27" pos:end="171:70">(<argument pos:start="171:28" pos:end="171:42"><expr pos:start="171:28" pos:end="171:42"><name pos:start="171:28" pos:end="171:42">kernel_filename</name></expr></argument>, <argument pos:start="171:45" pos:end="171:45"><expr pos:start="171:45" pos:end="171:45"><literal type="number" pos:start="171:45" pos:end="171:45">0</literal></expr></argument>, <argument pos:start="171:48" pos:end="171:57"><expr pos:start="171:48" pos:end="171:57"><operator pos:start="171:48" pos:end="171:48">&amp;</operator><name pos:start="171:49" pos:end="171:57">elf_entry</name></expr></argument>, <argument pos:start="171:60" pos:end="171:63"><expr pos:start="171:60" pos:end="171:63"><name pos:start="171:60" pos:end="171:63">NULL</name></expr></argument>, <argument pos:start="171:66" pos:end="171:69"><expr pos:start="171:66" pos:end="171:69"><name pos:start="171:66" pos:end="171:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:22"><expr pos:start="173:5" pos:end="173:21"><name pos:start="173:5" pos:end="173:9">entry</name> <operator pos:start="173:11" pos:end="173:11">=</operator> <name pos:start="173:13" pos:end="173:21">elf_entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="179:5"><if pos:start="175:5" pos:end="179:5">if <condition pos:start="175:8" pos:end="175:24">(<expr pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:19">kernel_size</name> <operator pos:start="175:21" pos:end="175:21">&lt;</operator> <literal type="number" pos:start="175:23" pos:end="175:23">0</literal></expr>)</condition> <block pos:start="175:26" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:71">

        <expr_stmt pos:start="177:9" pos:end="177:71"><expr pos:start="177:9" pos:end="177:70"><name pos:start="177:9" pos:end="177:19">kernel_size</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <call pos:start="177:23" pos:end="177:70"><name pos:start="177:23" pos:end="177:33">load_uimage</name><argument_list pos:start="177:34" pos:end="177:70">(<argument pos:start="177:35" pos:end="177:49"><expr pos:start="177:35" pos:end="177:49"><name pos:start="177:35" pos:end="177:49">kernel_filename</name></expr></argument>, <argument pos:start="177:52" pos:end="177:57"><expr pos:start="177:52" pos:end="177:57"><operator pos:start="177:52" pos:end="177:52">&amp;</operator><name pos:start="177:53" pos:end="177:57">entry</name></expr></argument>, <argument pos:start="177:60" pos:end="177:63"><expr pos:start="177:60" pos:end="177:63"><name pos:start="177:60" pos:end="177:63">NULL</name></expr></argument>, <argument pos:start="177:66" pos:end="177:69"><expr pos:start="177:66" pos:end="177:69"><name pos:start="177:66" pos:end="177:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:24">(<expr pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:19">kernel_size</name> <operator pos:start="181:21" pos:end="181:21">&lt;</operator> <literal type="number" pos:start="181:23" pos:end="181:23">0</literal></expr>)</condition> <block pos:start="181:26" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:27">

        <expr_stmt pos:start="183:9" pos:end="183:65"><expr pos:start="183:9" pos:end="183:64"><name pos:start="183:9" pos:end="183:19">kernel_size</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <call pos:start="183:23" pos:end="183:64"><name pos:start="183:23" pos:end="183:32">load_image</name><argument_list pos:start="183:33" pos:end="183:64">(<argument pos:start="183:34" pos:end="183:48"><expr pos:start="183:34" pos:end="183:48"><name pos:start="183:34" pos:end="183:48">kernel_filename</name></expr></argument>, <argument pos:start="183:51" pos:end="183:63"><expr pos:start="183:51" pos:end="183:63"><name pos:start="183:51" pos:end="183:63">phys_ram_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:27"><expr pos:start="185:9" pos:end="185:26"><name pos:start="185:9" pos:end="185:13">entry</name> <operator pos:start="185:15" pos:end="185:15">=</operator> <literal type="number" pos:start="185:17" pos:end="185:26">0x20000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:24">(<expr pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:19">kernel_size</name> <operator pos:start="189:21" pos:end="189:21">&lt;</operator> <literal type="number" pos:start="189:23" pos:end="189:23">0</literal></expr>)</condition> <block pos:start="189:26" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:16">

        <expr_stmt pos:start="191:9" pos:end="191:79"><expr pos:start="191:9" pos:end="191:78"><call pos:start="191:9" pos:end="191:78"><name pos:start="191:9" pos:end="191:15">fprintf</name><argument_list pos:start="191:16" pos:end="191:78">(<argument pos:start="191:17" pos:end="191:22"><expr pos:start="191:17" pos:end="191:22"><name pos:start="191:17" pos:end="191:22">stderr</name></expr></argument>, <argument pos:start="191:25" pos:end="191:60"><expr pos:start="191:25" pos:end="191:60"><literal type="string" pos:start="191:25" pos:end="191:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="191:63" pos:end="191:77"><expr pos:start="191:63" pos:end="191:77"><name pos:start="191:63" pos:end="191:77">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:16"><expr pos:start="193:9" pos:end="193:15"><call pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:12">exit</name><argument_list pos:start="193:13" pos:end="193:15">(<argument pos:start="193:14" pos:end="193:14"><expr pos:start="193:14" pos:end="193:14"><literal type="number" pos:start="193:14" pos:end="193:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:20"><expr pos:start="199:5" pos:end="199:19"><name pos:start="199:5" pos:end="199:11"><name pos:start="199:5" pos:end="199:7">env</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:11">pc</name></name> <operator pos:start="199:13" pos:end="199:13">=</operator> <name pos:start="199:15" pos:end="199:19">entry</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
