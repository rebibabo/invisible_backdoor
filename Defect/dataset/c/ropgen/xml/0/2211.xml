<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2211.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">rtp_parse_packet_internal</name><parameter_list pos:start="1:37" pos:end="3:65">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:52">RTPDemuxContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:65">AVPacket</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">pkt</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:55"><decl pos:start="3:38" pos:end="3:55"><type pos:start="3:38" pos:end="3:55"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:50">uint8_t</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:55">buf</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:64"><decl pos:start="3:58" pos:end="3:64"><type pos:start="3:58" pos:end="3:64"><name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:64">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="243:1">{<block_content pos:start="7:5" pos:end="241:14">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:21">ssrc</name></decl>, <decl pos:start="7:24" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:24" pos:end="7:24">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">payload_type</name></decl>, <decl pos:start="9:23" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:25">seq</name></decl>, <decl pos:start="9:28" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:30">ret</name></decl>, <decl pos:start="9:33" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:33" pos:end="9:37">flags</name> <init pos:start="9:39" pos:end="9:41">= <expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ext</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">AVStream</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">timestamp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">rv</name><init pos:start="17:11" pos:end="17:13">= <expr pos:start="17:13" pos:end="17:13"><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:7">ext</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <name pos:start="21:11" pos:end="21:16"><name pos:start="21:11" pos:end="21:13">buf</name><index pos:start="21:14" pos:end="21:16">[<expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>]</index></name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <literal type="number" pos:start="21:20" pos:end="21:23">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:16">payload_type</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:22">buf</name><index pos:start="23:23" pos:end="23:25">[<expr pos:start="23:24" pos:end="23:24"><literal type="number" pos:start="23:24" pos:end="23:24">1</literal></expr>]</index></name> <operator pos:start="23:27" pos:end="23:27">&amp;</operator> <literal type="number" pos:start="23:29" pos:end="23:32">0x7f</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:33"><if pos:start="25:5" pos:end="27:33">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:11">buf</name><index pos:start="25:12" pos:end="25:14">[<expr pos:start="25:13" pos:end="25:13"><literal type="number" pos:start="25:13" pos:end="25:13">1</literal></expr>]</index></name> <operator pos:start="25:16" pos:end="25:16">&amp;</operator> <literal type="number" pos:start="25:18" pos:end="25:21">0x80</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:33"><block_content pos:start="27:9" pos:end="27:33">

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:13">flags</name> <operator pos:start="27:15" pos:end="27:16">|=</operator> <name pos:start="27:18" pos:end="27:32">RTP_FLAG_MARKER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:7">seq</name>  <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:27"><name pos:start="29:12" pos:end="29:18">AV_RB16</name><argument_list pos:start="29:19" pos:end="29:27">(<argument pos:start="29:20" pos:end="29:26"><expr pos:start="29:20" pos:end="29:26"><name pos:start="29:20" pos:end="29:22">buf</name> <operator pos:start="29:24" pos:end="29:24">+</operator> <literal type="number" pos:start="29:26" pos:end="29:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:13">timestamp</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:32"><name pos:start="31:17" pos:end="31:23">AV_RB32</name><argument_list pos:start="31:24" pos:end="31:32">(<argument pos:start="31:25" pos:end="31:31"><expr pos:start="31:25" pos:end="31:31"><name pos:start="31:25" pos:end="31:27">buf</name> <operator pos:start="31:29" pos:end="31:29">+</operator> <literal type="number" pos:start="31:31" pos:end="31:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:8">ssrc</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:27"><name pos:start="33:12" pos:end="33:18">AV_RB32</name><argument_list pos:start="33:19" pos:end="33:27">(<argument pos:start="33:20" pos:end="33:26"><expr pos:start="33:20" pos:end="33:26"><name pos:start="33:20" pos:end="33:22">buf</name> <operator pos:start="33:24" pos:end="33:24">+</operator> <literal type="number" pos:start="33:26" pos:end="33:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:47">/* store the ssrc in the RTPDemuxContext */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:19"><expr pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:11">ssrc</name></name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:18">ssrc</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:51">/* NOTE: we can handle only one payload type */</comment>

    <if_stmt pos:start="43:5" pos:end="45:18"><if pos:start="43:5" pos:end="45:18">if <condition pos:start="43:8" pos:end="43:40">(<expr pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:23">payload_type</name></name> <operator pos:start="43:25" pos:end="43:26">!=</operator> <name pos:start="43:28" pos:end="43:39">payload_type</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:18"><block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:15"><expr pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:6">st</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <name pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">s</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:14">st</name></name></expr>;</expr_stmt>

    <comment type="line" pos:start="51:5" pos:end="51:64">// only do something with this if all the rtp checks pass...</comment>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if<condition pos:start="53:7" pos:end="53:58">(<expr pos:start="53:8" pos:end="53:57"><operator pos:start="53:8" pos:end="53:8">!</operator><call pos:start="53:9" pos:end="53:57"><name pos:start="53:9" pos:end="53:36">rtp_valid_packet_in_sequence</name><argument_list pos:start="53:37" pos:end="53:57">(<argument pos:start="53:38" pos:end="53:51"><expr pos:start="53:38" pos:end="53:51"><operator pos:start="53:38" pos:end="53:38">&amp;</operator><name pos:start="53:39" pos:end="53:51"><name pos:start="53:39" pos:end="53:39">s</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:51">statistics</name></name></expr></argument>, <argument pos:start="53:54" pos:end="53:56"><expr pos:start="53:54" pos:end="53:56"><name pos:start="53:54" pos:end="53:56">seq</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="55:5" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:18">

        <expr_stmt pos:start="57:9" pos:end="59:59"><expr pos:start="57:9" pos:end="59:58"><call pos:start="57:9" pos:end="59:58"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="59:58">(<argument pos:start="57:16" pos:end="57:32"><expr pos:start="57:16" pos:end="57:32"><ternary pos:start="57:16" pos:end="57:32"><condition pos:start="57:16" pos:end="57:18"><expr pos:start="57:16" pos:end="57:17"><name pos:start="57:16" pos:end="57:17">st</name></expr>?</condition><then pos:start="57:19" pos:end="57:27"><expr pos:start="57:19" pos:end="57:27"><name pos:start="57:19" pos:end="57:27"><name pos:start="57:19" pos:end="57:20">st</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:27">codec</name></name></expr></then><else pos:start="57:28" pos:end="57:32">:<expr pos:start="57:29" pos:end="57:32"><name pos:start="57:29" pos:end="57:32">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="57:35" pos:end="57:46"><expr pos:start="57:35" pos:end="57:46"><name pos:start="57:35" pos:end="57:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:49" pos:end="57:93"><expr pos:start="57:49" pos:end="57:93"><literal type="string" pos:start="57:49" pos:end="57:93">"RTP: PT=%02x: bad cseq %04x expected=%04x\n"</literal></expr></argument>,

               <argument pos:start="59:16" pos:end="59:27"><expr pos:start="59:16" pos:end="59:27"><name pos:start="59:16" pos:end="59:27">payload_type</name></expr></argument>, <argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><name pos:start="59:30" pos:end="59:32">seq</name></expr></argument>, <argument pos:start="59:35" pos:end="59:57"><expr pos:start="59:35" pos:end="59:57"><operator pos:start="59:35" pos:end="59:35">(</operator><operator pos:start="59:36" pos:end="59:36">(</operator><name pos:start="59:37" pos:end="59:42"><name pos:start="59:37" pos:end="59:37">s</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:42">seq</name></name> <operator pos:start="59:44" pos:end="59:44">+</operator> <literal type="number" pos:start="59:46" pos:end="59:46">1</literal><operator pos:start="59:47" pos:end="59:47">)</operator> <operator pos:start="59:49" pos:end="59:49">&amp;</operator> <literal type="number" pos:start="59:51" pos:end="59:56">0xffff</literal><operator pos:start="59:57" pos:end="59:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:11">buf</name><index pos:start="67:12" pos:end="67:14">[<expr pos:start="67:13" pos:end="67:13"><literal type="number" pos:start="67:13" pos:end="67:13">0</literal></expr>]</index></name> <operator pos:start="67:16" pos:end="67:16">&amp;</operator> <literal type="number" pos:start="67:18" pos:end="67:21">0x20</literal></expr>)</condition> <block pos:start="67:24" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:27">

        <decl_stmt pos:start="69:9" pos:end="69:35"><decl pos:start="69:9" pos:end="69:34"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:19">padding</name> <init pos:start="69:21" pos:end="69:34">= <expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:25">buf</name><index pos:start="69:26" pos:end="69:34">[<expr pos:start="69:27" pos:end="69:33"><name pos:start="69:27" pos:end="69:29">len</name> <operator pos:start="69:31" pos:end="69:31">-</operator> <literal type="number" pos:start="69:33" pos:end="69:33">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="71:9" pos:end="73:27"><if pos:start="71:9" pos:end="73:27">if <condition pos:start="71:12" pos:end="71:32">(<expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:15">len</name> <operator pos:start="71:17" pos:end="71:18">&gt;=</operator> <literal type="number" pos:start="71:20" pos:end="71:23">12</literal> <operator pos:start="71:23" pos:end="71:23">+</operator> <name pos:start="71:25" pos:end="71:31">padding</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:27"><block_content pos:start="73:13" pos:end="73:27">

            <expr_stmt pos:start="73:13" pos:end="73:27"><expr pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:15">len</name> <operator pos:start="73:17" pos:end="73:18">-=</operator> <name pos:start="73:20" pos:end="73:26">padding</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:17"><expr pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:10"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:10">seq</name></name> <operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:16">seq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:14"><expr pos:start="81:5" pos:end="81:13"><name pos:start="81:5" pos:end="81:7">len</name> <operator pos:start="81:9" pos:end="81:10">-=</operator> <literal type="number" pos:start="81:12" pos:end="81:13">12</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:14"><expr pos:start="83:5" pos:end="83:13"><name pos:start="83:5" pos:end="83:7">buf</name> <operator pos:start="83:9" pos:end="83:10">+=</operator> <literal type="number" pos:start="83:12" pos:end="83:13">12</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:62">/* RFC 3550 Section 5.3.1 RTP Header Extension handling */</comment>

    <if_stmt pos:start="89:5" pos:end="113:5"><if pos:start="89:5" pos:end="113:5">if <condition pos:start="89:8" pos:end="89:12">(<expr pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">ext</name></expr>)</condition> <block pos:start="89:14" pos:end="113:5">{<block_content pos:start="91:9" pos:end="111:19">

        <if_stmt pos:start="91:9" pos:end="93:22"><if pos:start="91:9" pos:end="93:22">if <condition pos:start="91:12" pos:end="91:20">(<expr pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:15">len</name> <operator pos:start="91:17" pos:end="91:17">&lt;</operator> <literal type="number" pos:start="91:19" pos:end="91:19">4</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:22"><block_content pos:start="93:13" pos:end="93:22">

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="95:9" pos:end="97:30">/* calculate the header extension length (stored as number

         * of 32-bit words) */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:42"><expr pos:start="99:9" pos:end="99:41"><name pos:start="99:9" pos:end="99:11">ext</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <operator pos:start="99:15" pos:end="99:15">(</operator><call pos:start="99:16" pos:end="99:31"><name pos:start="99:16" pos:end="99:22">AV_RB16</name><argument_list pos:start="99:23" pos:end="99:31">(<argument pos:start="99:24" pos:end="99:30"><expr pos:start="99:24" pos:end="99:30"><name pos:start="99:24" pos:end="99:26">buf</name> <operator pos:start="99:28" pos:end="99:28">+</operator> <literal type="number" pos:start="99:30" pos:end="99:30">2</literal></expr></argument>)</argument_list></call> <operator pos:start="99:33" pos:end="99:33">+</operator> <literal type="number" pos:start="99:35" pos:end="99:35">1</literal><operator pos:start="99:36" pos:end="99:36">)</operator> <operator pos:start="99:38" pos:end="99:39">&lt;&lt;</operator> <literal type="number" pos:start="99:41" pos:end="99:41">2</literal></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="105:22"><if pos:start="103:9" pos:end="105:22">if <condition pos:start="103:12" pos:end="103:22">(<expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:15">len</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <name pos:start="103:19" pos:end="103:21">ext</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:22"><block_content pos:start="105:13" pos:end="105:22">

            <return pos:start="105:13" pos:end="105:22">return <expr pos:start="105:20" pos:end="105:21"><operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line" pos:start="107:9" pos:end="107:41">// skip past RTP header extension</comment>

        <expr_stmt pos:start="109:9" pos:end="109:19"><expr pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:11">len</name> <operator pos:start="109:13" pos:end="109:14">-=</operator> <name pos:start="109:16" pos:end="109:18">ext</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:19"><expr pos:start="111:9" pos:end="111:18"><name pos:start="111:9" pos:end="111:11">buf</name> <operator pos:start="111:13" pos:end="111:14">+=</operator> <name pos:start="111:16" pos:end="111:18">ext</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="231:5"><if pos:start="117:5" pos:end="147:5">if <condition pos:start="117:8" pos:end="117:12">(<expr pos:start="117:9" pos:end="117:11"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:11">st</name></expr>)</condition> <block pos:start="117:14" pos:end="147:5">{<block_content pos:start="121:9" pos:end="145:17">

        <comment type="block" pos:start="119:9" pos:end="119:44">/* specific MPEG2TS demux support */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:59"><expr pos:start="121:9" pos:end="121:58"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="121:58"><name pos:start="121:15" pos:end="121:36">ff_mpegts_parse_packet</name><argument_list pos:start="121:37" pos:end="121:58">(<argument pos:start="121:38" pos:end="121:42"><expr pos:start="121:38" pos:end="121:42"><name pos:start="121:38" pos:end="121:42"><name pos:start="121:38" pos:end="121:38">s</name><operator pos:start="121:39" pos:end="121:40">-&gt;</operator><name pos:start="121:41" pos:end="121:42">ts</name></name></expr></argument>, <argument pos:start="121:45" pos:end="121:47"><expr pos:start="121:45" pos:end="121:47"><name pos:start="121:45" pos:end="121:47">pkt</name></expr></argument>, <argument pos:start="121:50" pos:end="121:52"><expr pos:start="121:50" pos:end="121:52"><name pos:start="121:50" pos:end="121:52">buf</name></expr></argument>, <argument pos:start="121:55" pos:end="121:57"><expr pos:start="121:55" pos:end="121:57"><name pos:start="121:55" pos:end="121:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="123:9" pos:end="127:44">/* The only error that can be returned from ff_mpegts_parse_packet

         * is "no more data to return from the provided buffer", so return

         * AVERROR(EAGAIN) for all errors */</comment>

        <if_stmt pos:start="129:9" pos:end="131:35"><if pos:start="129:9" pos:end="131:35">if <condition pos:start="129:12" pos:end="129:20">(<expr pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">&lt;</operator> <literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:35"><block_content pos:start="131:13" pos:end="131:35">

            <return pos:start="131:13" pos:end="131:35">return <expr pos:start="131:20" pos:end="131:34"><call pos:start="131:20" pos:end="131:34"><name pos:start="131:20" pos:end="131:26">AVERROR</name><argument_list pos:start="131:27" pos:end="131:34">(<argument pos:start="131:28" pos:end="131:33"><expr pos:start="131:28" pos:end="131:33"><name pos:start="131:28" pos:end="131:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="133:9" pos:end="143:9"><if pos:start="133:9" pos:end="143:9">if <condition pos:start="133:12" pos:end="133:22">(<expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">&lt;</operator> <name pos:start="133:19" pos:end="133:21">len</name></expr>)</condition> <block pos:start="133:24" pos:end="143:9">{<block_content pos:start="135:13" pos:end="141:21">

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:28"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:28">read_buf_size</name></name> <operator pos:start="135:30" pos:end="135:30">=</operator> <name pos:start="135:32" pos:end="135:34">len</name> <operator pos:start="135:36" pos:end="135:36">-</operator> <name pos:start="135:38" pos:end="135:40">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:56"><expr pos:start="137:13" pos:end="137:55"><call pos:start="137:13" pos:end="137:55"><name pos:start="137:13" pos:end="137:18">memcpy</name><argument_list pos:start="137:19" pos:end="137:55">(<argument pos:start="137:20" pos:end="137:25"><expr pos:start="137:20" pos:end="137:25"><name pos:start="137:20" pos:end="137:25"><name pos:start="137:20" pos:end="137:20">s</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:25">buf</name></name></expr></argument>, <argument pos:start="137:28" pos:end="137:36"><expr pos:start="137:28" pos:end="137:36"><name pos:start="137:28" pos:end="137:30">buf</name> <operator pos:start="137:32" pos:end="137:32">+</operator> <name pos:start="137:34" pos:end="137:36">ret</name></expr></argument>, <argument pos:start="137:39" pos:end="137:54"><expr pos:start="137:39" pos:end="137:54"><name pos:start="137:39" pos:end="137:54"><name pos:start="137:39" pos:end="137:39">s</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:54">read_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:34"><expr pos:start="139:13" pos:end="139:33"><name pos:start="139:13" pos:end="139:29"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:29">read_buf_index</name></name> <operator pos:start="139:31" pos:end="139:31">=</operator> <literal type="number" pos:start="139:33" pos:end="139:33">0</literal></expr>;</expr_stmt>

            <return pos:start="141:13" pos:end="141:21">return <expr pos:start="141:20" pos:end="141:20"><literal type="number" pos:start="141:20" pos:end="141:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="145:9" pos:end="145:17">return <expr pos:start="145:16" pos:end="145:16"><literal type="number" pos:start="145:16" pos:end="145:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="147:7" pos:end="153:5">else if <condition pos:start="147:15" pos:end="147:31">(<expr pos:start="147:16" pos:end="147:30"><name pos:start="147:16" pos:end="147:30"><name pos:start="147:16" pos:end="147:16">s</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:30">parse_packet</name></name></expr>)</condition> <block pos:start="147:33" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:70">

        <expr_stmt pos:start="149:9" pos:end="151:70"><expr pos:start="149:9" pos:end="151:69"><name pos:start="149:9" pos:end="149:10">rv</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <call pos:start="149:14" pos:end="151:69"><name pos:start="149:14" pos:end="149:28"><name pos:start="149:14" pos:end="149:14">s</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:28">parse_packet</name></name><argument_list pos:start="149:29" pos:end="151:69">(<argument pos:start="149:30" pos:end="149:34"><expr pos:start="149:30" pos:end="149:34"><name pos:start="149:30" pos:end="149:34"><name pos:start="149:30" pos:end="149:30">s</name><operator pos:start="149:31" pos:end="149:32">-&gt;</operator><name pos:start="149:33" pos:end="149:34">ic</name></name></expr></argument>, <argument pos:start="149:37" pos:end="149:63"><expr pos:start="149:37" pos:end="149:63"><name pos:start="149:37" pos:end="149:63"><name pos:start="149:37" pos:end="149:37">s</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:63">dynamic_protocol_context</name></name></expr></argument>,

                             <argument pos:start="151:30" pos:end="151:34"><expr pos:start="151:30" pos:end="151:34"><name pos:start="151:30" pos:end="151:34"><name pos:start="151:30" pos:end="151:30">s</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:34">st</name></name></expr></argument>, <argument pos:start="151:37" pos:end="151:39"><expr pos:start="151:37" pos:end="151:39"><name pos:start="151:37" pos:end="151:39">pkt</name></expr></argument>, <argument pos:start="151:42" pos:end="151:51"><expr pos:start="151:42" pos:end="151:51"><operator pos:start="151:42" pos:end="151:42">&amp;</operator><name pos:start="151:43" pos:end="151:51">timestamp</name></expr></argument>, <argument pos:start="151:54" pos:end="151:56"><expr pos:start="151:54" pos:end="151:56"><name pos:start="151:54" pos:end="151:56">buf</name></expr></argument>, <argument pos:start="151:59" pos:end="151:61"><expr pos:start="151:59" pos:end="151:61"><name pos:start="151:59" pos:end="151:61">len</name></expr></argument>, <argument pos:start="151:64" pos:end="151:68"><expr pos:start="151:64" pos:end="151:68"><name pos:start="151:64" pos:end="151:68">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="231:5">else <block pos:start="153:12" pos:end="231:5">{<block_content pos:start="157:9" pos:end="229:38">

        <comment type="line" pos:start="155:9" pos:end="155:121">// at this point, the RTP header has been stripped;  This is ASSUMING that there is only 1 CSRC, which in't wise.</comment>

        <switch pos:start="157:9" pos:end="225:9">switch<condition pos:start="157:15" pos:end="157:35">(<expr pos:start="157:16" pos:end="157:34"><name pos:start="157:16" pos:end="157:34"><name pos:start="157:16" pos:end="157:17">st</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:24">codec</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:34">codec_id</name></name></expr>)</condition> <block pos:start="157:37" pos:end="225:9">{<block_content pos:start="159:9" pos:end="223:18">

        <case pos:start="159:9" pos:end="159:29">case <expr pos:start="159:14" pos:end="159:28"><name pos:start="159:14" pos:end="159:28">AV_CODEC_ID_MP2</name></expr>:</case>

        <case pos:start="161:9" pos:end="161:29">case <expr pos:start="161:14" pos:end="161:28"><name pos:start="161:14" pos:end="161:28">AV_CODEC_ID_MP3</name></expr>:</case>

            <comment type="block" pos:start="163:13" pos:end="163:65">/* better than nothing: skip mpeg audio RTP header */</comment>

            <if_stmt pos:start="165:13" pos:end="167:26"><if pos:start="165:13" pos:end="167:26">if <condition pos:start="165:16" pos:end="165:25">(<expr pos:start="165:17" pos:end="165:24"><name pos:start="165:17" pos:end="165:19">len</name> <operator pos:start="165:21" pos:end="165:22">&lt;=</operator> <literal type="number" pos:start="165:24" pos:end="165:24">4</literal></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:26"><block_content pos:start="167:17" pos:end="167:26">

                <return pos:start="167:17" pos:end="167:26">return <expr pos:start="167:24" pos:end="167:25"><operator pos:start="167:24" pos:end="167:24">-</operator><literal type="number" pos:start="167:25" pos:end="167:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:29"><expr pos:start="169:13" pos:end="169:28"><name pos:start="169:13" pos:end="169:13">h</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <call pos:start="169:17" pos:end="169:28"><name pos:start="169:17" pos:end="169:23">AV_RB32</name><argument_list pos:start="169:24" pos:end="169:28">(<argument pos:start="169:25" pos:end="169:27"><expr pos:start="169:25" pos:end="169:27"><name pos:start="169:25" pos:end="169:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:21"><expr pos:start="171:13" pos:end="171:20"><name pos:start="171:13" pos:end="171:15">len</name> <operator pos:start="171:17" pos:end="171:18">-=</operator> <literal type="number" pos:start="171:20" pos:end="171:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:21"><expr pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:15">buf</name> <operator pos:start="173:17" pos:end="173:18">+=</operator> <literal type="number" pos:start="173:20" pos:end="173:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:36"><expr pos:start="175:13" pos:end="175:35"><call pos:start="175:13" pos:end="175:35"><name pos:start="175:13" pos:end="175:25">av_new_packet</name><argument_list pos:start="175:26" pos:end="175:35">(<argument pos:start="175:27" pos:end="175:29"><expr pos:start="175:27" pos:end="175:29"><name pos:start="175:27" pos:end="175:29">pkt</name></expr></argument>, <argument pos:start="175:32" pos:end="175:34"><expr pos:start="175:32" pos:end="175:34"><name pos:start="175:32" pos:end="175:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:40"><expr pos:start="177:13" pos:end="177:39"><call pos:start="177:13" pos:end="177:39"><name pos:start="177:13" pos:end="177:18">memcpy</name><argument_list pos:start="177:19" pos:end="177:39">(<argument pos:start="177:20" pos:end="177:28"><expr pos:start="177:20" pos:end="177:28"><name pos:start="177:20" pos:end="177:28"><name pos:start="177:20" pos:end="177:22">pkt</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:28">data</name></name></expr></argument>, <argument pos:start="177:31" pos:end="177:33"><expr pos:start="177:31" pos:end="177:33"><name pos:start="177:31" pos:end="177:33">buf</name></expr></argument>, <argument pos:start="177:36" pos:end="177:38"><expr pos:start="177:36" pos:end="177:38"><name pos:start="177:36" pos:end="177:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <case pos:start="181:9" pos:end="181:36">case <expr pos:start="181:14" pos:end="181:35"><name pos:start="181:14" pos:end="181:35">AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

        <case pos:start="183:9" pos:end="183:36">case <expr pos:start="183:14" pos:end="183:35"><name pos:start="183:14" pos:end="183:35">AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

            <comment type="block" pos:start="185:13" pos:end="185:65">/* better than nothing: skip mpeg video RTP header */</comment>

            <if_stmt pos:start="187:13" pos:end="189:26"><if pos:start="187:13" pos:end="189:26">if <condition pos:start="187:16" pos:end="187:25">(<expr pos:start="187:17" pos:end="187:24"><name pos:start="187:17" pos:end="187:19">len</name> <operator pos:start="187:21" pos:end="187:22">&lt;=</operator> <literal type="number" pos:start="187:24" pos:end="187:24">4</literal></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:26"><block_content pos:start="189:17" pos:end="189:26">

                <return pos:start="189:17" pos:end="189:26">return <expr pos:start="189:24" pos:end="189:25"><operator pos:start="189:24" pos:end="189:24">-</operator><literal type="number" pos:start="189:25" pos:end="189:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:29"><expr pos:start="191:13" pos:end="191:28"><name pos:start="191:13" pos:end="191:13">h</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <call pos:start="191:17" pos:end="191:28"><name pos:start="191:17" pos:end="191:23">AV_RB32</name><argument_list pos:start="191:24" pos:end="191:28">(<argument pos:start="191:25" pos:end="191:27"><expr pos:start="191:25" pos:end="191:27"><name pos:start="191:25" pos:end="191:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:21"><expr pos:start="193:13" pos:end="193:20"><name pos:start="193:13" pos:end="193:15">buf</name> <operator pos:start="193:17" pos:end="193:18">+=</operator> <literal type="number" pos:start="193:20" pos:end="193:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:21"><expr pos:start="195:13" pos:end="195:20"><name pos:start="195:13" pos:end="195:15">len</name> <operator pos:start="195:17" pos:end="195:18">-=</operator> <literal type="number" pos:start="195:20" pos:end="195:20">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="209:13"><if pos:start="197:13" pos:end="209:13">if <condition pos:start="197:16" pos:end="197:30">(<expr pos:start="197:17" pos:end="197:29"><name pos:start="197:17" pos:end="197:17">h</name> <operator pos:start="197:19" pos:end="197:19">&amp;</operator> <operator pos:start="197:21" pos:end="197:21">(</operator><literal type="number" pos:start="197:22" pos:end="197:22">1</literal> <operator pos:start="197:24" pos:end="197:25">&lt;&lt;</operator> <literal type="number" pos:start="197:27" pos:end="197:28">26</literal><operator pos:start="197:29" pos:end="197:29">)</operator></expr>)</condition> <block pos:start="197:32" pos:end="209:13">{<block_content pos:start="201:17" pos:end="207:25">

                <comment type="block" pos:start="199:17" pos:end="199:27">/* mpeg2 */</comment>

                <if_stmt pos:start="201:17" pos:end="203:30"><if pos:start="201:17" pos:end="203:30">if <condition pos:start="201:20" pos:end="201:29">(<expr pos:start="201:21" pos:end="201:28"><name pos:start="201:21" pos:end="201:23">len</name> <operator pos:start="201:25" pos:end="201:26">&lt;=</operator> <literal type="number" pos:start="201:28" pos:end="201:28">4</literal></expr>)</condition><block type="pseudo" pos:start="203:21" pos:end="203:30"><block_content pos:start="203:21" pos:end="203:30">

                    <return pos:start="203:21" pos:end="203:30">return <expr pos:start="203:28" pos:end="203:29"><operator pos:start="203:28" pos:end="203:28">-</operator><literal type="number" pos:start="203:29" pos:end="203:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:25"><expr pos:start="205:17" pos:end="205:24"><name pos:start="205:17" pos:end="205:19">buf</name> <operator pos:start="205:21" pos:end="205:22">+=</operator> <literal type="number" pos:start="205:24" pos:end="205:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:25"><expr pos:start="207:17" pos:end="207:24"><name pos:start="207:17" pos:end="207:19">len</name> <operator pos:start="207:21" pos:end="207:22">-=</operator> <literal type="number" pos:start="207:24" pos:end="207:24">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:36"><expr pos:start="211:13" pos:end="211:35"><call pos:start="211:13" pos:end="211:35"><name pos:start="211:13" pos:end="211:25">av_new_packet</name><argument_list pos:start="211:26" pos:end="211:35">(<argument pos:start="211:27" pos:end="211:29"><expr pos:start="211:27" pos:end="211:29"><name pos:start="211:27" pos:end="211:29">pkt</name></expr></argument>, <argument pos:start="211:32" pos:end="211:34"><expr pos:start="211:32" pos:end="211:34"><name pos:start="211:32" pos:end="211:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:40"><expr pos:start="213:13" pos:end="213:39"><call pos:start="213:13" pos:end="213:39"><name pos:start="213:13" pos:end="213:18">memcpy</name><argument_list pos:start="213:19" pos:end="213:39">(<argument pos:start="213:20" pos:end="213:28"><expr pos:start="213:20" pos:end="213:28"><name pos:start="213:20" pos:end="213:28"><name pos:start="213:20" pos:end="213:22">pkt</name><operator pos:start="213:23" pos:end="213:24">-&gt;</operator><name pos:start="213:25" pos:end="213:28">data</name></name></expr></argument>, <argument pos:start="213:31" pos:end="213:33"><expr pos:start="213:31" pos:end="213:33"><name pos:start="213:31" pos:end="213:33">buf</name></expr></argument>, <argument pos:start="213:36" pos:end="213:38"><expr pos:start="213:36" pos:end="213:38"><name pos:start="213:36" pos:end="213:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <default pos:start="217:9" pos:end="217:16">default:</default>

            <expr_stmt pos:start="219:13" pos:end="219:36"><expr pos:start="219:13" pos:end="219:35"><call pos:start="219:13" pos:end="219:35"><name pos:start="219:13" pos:end="219:25">av_new_packet</name><argument_list pos:start="219:26" pos:end="219:35">(<argument pos:start="219:27" pos:end="219:29"><expr pos:start="219:27" pos:end="219:29"><name pos:start="219:27" pos:end="219:29">pkt</name></expr></argument>, <argument pos:start="219:32" pos:end="219:34"><expr pos:start="219:32" pos:end="219:34"><name pos:start="219:32" pos:end="219:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:40"><expr pos:start="221:13" pos:end="221:39"><call pos:start="221:13" pos:end="221:39"><name pos:start="221:13" pos:end="221:18">memcpy</name><argument_list pos:start="221:19" pos:end="221:39">(<argument pos:start="221:20" pos:end="221:28"><expr pos:start="221:20" pos:end="221:28"><name pos:start="221:20" pos:end="221:28"><name pos:start="221:20" pos:end="221:22">pkt</name><operator pos:start="221:23" pos:end="221:24">-&gt;</operator><name pos:start="221:25" pos:end="221:28">data</name></name></expr></argument>, <argument pos:start="221:31" pos:end="221:33"><expr pos:start="221:31" pos:end="221:33"><name pos:start="221:31" pos:end="221:33">buf</name></expr></argument>, <argument pos:start="221:36" pos:end="221:38"><expr pos:start="221:36" pos:end="221:38"><name pos:start="221:36" pos:end="221:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="229:9" pos:end="229:38"><expr pos:start="229:9" pos:end="229:37"><name pos:start="229:9" pos:end="229:25"><name pos:start="229:9" pos:end="229:11">pkt</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:25">stream_index</name></name> <operator pos:start="229:27" pos:end="229:27">=</operator> <name pos:start="229:29" pos:end="229:37"><name pos:start="229:29" pos:end="229:30">st</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:37">index</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="line" pos:start="235:5" pos:end="235:39">// now perform timestamp things....</comment>

    <expr_stmt pos:start="237:5" pos:end="237:39"><expr pos:start="237:5" pos:end="237:38"><call pos:start="237:5" pos:end="237:38"><name pos:start="237:5" pos:end="237:19">finalize_packet</name><argument_list pos:start="237:20" pos:end="237:38">(<argument pos:start="237:21" pos:end="237:21"><expr pos:start="237:21" pos:end="237:21"><name pos:start="237:21" pos:end="237:21">s</name></expr></argument>, <argument pos:start="237:24" pos:end="237:26"><expr pos:start="237:24" pos:end="237:26"><name pos:start="237:24" pos:end="237:26">pkt</name></expr></argument>, <argument pos:start="237:29" pos:end="237:37"><expr pos:start="237:29" pos:end="237:37"><name pos:start="237:29" pos:end="237:37">timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="241:5" pos:end="241:14">return <expr pos:start="241:12" pos:end="241:13"><name pos:start="241:12" pos:end="241:13">rv</name></expr>;</return>

</block_content>}</block></function>
</unit>
