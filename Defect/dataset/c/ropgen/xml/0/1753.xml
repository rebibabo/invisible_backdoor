<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1753.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">vtd_realize</name><parameter_list pos:start="1:24" pos:end="1:55">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:35">DeviceState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">dev</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:47">Error</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier><modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:74">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MachineState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">ms</name> <init pos:start="5:22" pos:end="5:50">= <expr pos:start="5:24" pos:end="5:50"><call pos:start="5:24" pos:end="5:50"><name pos:start="5:24" pos:end="5:30">MACHINE</name><argument_list pos:start="5:31" pos:end="5:50">(<argument pos:start="5:32" pos:end="5:49"><expr pos:start="5:32" pos:end="5:49"><call pos:start="5:32" pos:end="5:49"><name pos:start="5:32" pos:end="5:47">qdev_get_machine</name><argument_list pos:start="5:48" pos:end="5:49">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MachineClass</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">mc</name> <init pos:start="7:22" pos:end="7:44">= <expr pos:start="7:24" pos:end="7:44"><call pos:start="7:24" pos:end="7:44"><name pos:start="7:24" pos:end="7:40">MACHINE_GET_CLASS</name><argument_list pos:start="7:41" pos:end="7:44">(<argument pos:start="7:42" pos:end="7:43"><expr pos:start="7:42" pos:end="7:43"><name pos:start="7:42" pos:end="7:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:69"><decl pos:start="9:5" pos:end="11:68"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:24">pcms</name> <init pos:start="9:26" pos:end="11:68">=

        <expr pos:start="11:9" pos:end="11:68"><call pos:start="11:9" pos:end="11:68"><name pos:start="11:9" pos:end="11:18">PC_MACHINE</name><argument_list pos:start="11:19" pos:end="11:68">(<argument pos:start="11:20" pos:end="11:67"><expr pos:start="11:20" pos:end="11:67"><call pos:start="11:20" pos:end="11:67"><name pos:start="11:20" pos:end="11:38">object_dynamic_cast</name><argument_list pos:start="11:39" pos:end="11:67">(<argument pos:start="11:40" pos:end="11:49"><expr pos:start="11:40" pos:end="11:49"><call pos:start="11:40" pos:end="11:49"><name pos:start="11:40" pos:end="11:45">OBJECT</name><argument_list pos:start="11:46" pos:end="11:49">(<argument pos:start="11:47" pos:end="11:48"><expr pos:start="11:47" pos:end="11:48"><name pos:start="11:47" pos:end="11:48">ms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="11:52" pos:end="11:66"><expr pos:start="11:52" pos:end="11:66"><name pos:start="11:52" pos:end="11:66">TYPE_PC_MACHINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">PCIBus</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:48"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">IntelIOMMUState</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:22">s</name> <init pos:start="15:24" pos:end="15:48">= <expr pos:start="15:26" pos:end="15:48"><call pos:start="15:26" pos:end="15:48"><name pos:start="15:26" pos:end="15:43">INTEL_IOMMU_DEVICE</name><argument_list pos:start="15:44" pos:end="15:48">(<argument pos:start="15:45" pos:end="15:47"><expr pos:start="15:45" pos:end="15:47"><name pos:start="15:45" pos:end="15:47">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">X86IOMMUState</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:28">x86_iommu</name> <init pos:start="17:30" pos:end="17:52">= <expr pos:start="17:32" pos:end="17:52"><call pos:start="17:32" pos:end="17:52"><name pos:start="17:32" pos:end="17:47">X86_IOMMU_DEVICE</name><argument_list pos:start="17:48" pos:end="17:52">(<argument pos:start="17:49" pos:end="17:51"><expr pos:start="17:49" pos:end="17:51"><name pos:start="17:49" pos:end="17:51">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">pcms</name></expr>)</condition> <block pos:start="21:16" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="25:29"><expr pos:start="23:9" pos:end="25:28"><call pos:start="23:9" pos:end="25:28"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="25:28">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:73"><expr pos:start="23:26" pos:end="23:73"><literal type="string" pos:start="23:26" pos:end="23:73">"Machine-type '%s' not supported by intel-iommu"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:21">mc</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:20"><expr pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:7">bus</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:19"><name pos:start="33:11" pos:end="33:14">pcms</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:19">bus</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:13">x86_iommu</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">type</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:32">TYPE_INTEL</name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:36">(<expr pos:start="39:9" pos:end="39:35"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:35"><name pos:start="39:10" pos:end="39:26">vtd_decide_config</name><argument_list pos:start="39:27" pos:end="39:35">(<argument pos:start="39:28" pos:end="39:28"><expr pos:start="39:28" pos:end="39:28"><name pos:start="39:28" pos:end="39:28">s</name></expr></argument>, <argument pos:start="39:31" pos:end="39:34"><expr pos:start="39:31" pos:end="39:34"><name pos:start="39:31" pos:end="39:34">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:38" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><call pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:14">QLIST_INIT</name><argument_list pos:start="47:15" pos:end="47:34">(<argument pos:start="47:16" pos:end="47:33"><expr pos:start="47:16" pos:end="47:33"><operator pos:start="47:16" pos:end="47:16">&amp;</operator><name pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:17">s</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:33">notifiers_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:66"><expr pos:start="49:5" pos:end="49:65"><call pos:start="49:5" pos:end="49:65"><name pos:start="49:5" pos:end="49:10">memset</name><argument_list pos:start="49:11" pos:end="49:65">(<argument pos:start="49:12" pos:end="49:31"><expr pos:start="49:12" pos:end="49:31"><name pos:start="49:12" pos:end="49:31"><name pos:start="49:12" pos:end="49:12">s</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:31">vtd_as_by_bus_num</name></name></expr></argument>, <argument pos:start="49:34" pos:end="49:34"><expr pos:start="49:34" pos:end="49:34"><literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr></argument>, <argument pos:start="49:37" pos:end="49:64"><expr pos:start="49:37" pos:end="49:64"><sizeof pos:start="49:37" pos:end="49:64">sizeof<argument_list pos:start="49:43" pos:end="49:64">(<argument pos:start="49:44" pos:end="49:63"><expr pos:start="49:44" pos:end="49:63"><name pos:start="49:44" pos:end="49:63"><name pos:start="49:44" pos:end="49:44">s</name><operator pos:start="49:45" pos:end="49:46">-&gt;</operator><name pos:start="49:47" pos:end="49:63">vtd_as_by_bus_num</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:56"><expr pos:start="51:5" pos:end="53:55"><call pos:start="51:5" pos:end="53:55"><name pos:start="51:5" pos:end="51:25">memory_region_init_io</name><argument_list pos:start="51:26" pos:end="53:55">(<argument pos:start="51:27" pos:end="51:36"><expr pos:start="51:27" pos:end="51:36"><operator pos:start="51:27" pos:end="51:27">&amp;</operator><name pos:start="51:28" pos:end="51:36"><name pos:start="51:28" pos:end="51:28">s</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:36">csrmem</name></name></expr></argument>, <argument pos:start="51:39" pos:end="51:47"><expr pos:start="51:39" pos:end="51:47"><call pos:start="51:39" pos:end="51:47"><name pos:start="51:39" pos:end="51:44">OBJECT</name><argument_list pos:start="51:45" pos:end="51:47">(<argument pos:start="51:46" pos:end="51:46"><expr pos:start="51:46" pos:end="51:46"><name pos:start="51:46" pos:end="51:46">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:50" pos:end="51:61"><expr pos:start="51:50" pos:end="51:61"><operator pos:start="51:50" pos:end="51:50">&amp;</operator><name pos:start="51:51" pos:end="51:61">vtd_mem_ops</name></expr></argument>, <argument pos:start="51:64" pos:end="51:64"><expr pos:start="51:64" pos:end="51:64"><name pos:start="51:64" pos:end="51:64">s</name></expr></argument>,

                          <argument pos:start="53:27" pos:end="53:39"><expr pos:start="53:27" pos:end="53:39"><literal type="string" pos:start="53:27" pos:end="53:39">"intel_iommu"</literal></expr></argument>, <argument pos:start="53:42" pos:end="53:54"><expr pos:start="53:42" pos:end="53:54"><name pos:start="53:42" pos:end="53:54">DMAR_REG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:20">sysbus_init_mmio</name><argument_list pos:start="55:21" pos:end="55:51">(<argument pos:start="55:22" pos:end="55:38"><expr pos:start="55:22" pos:end="55:38"><call pos:start="55:22" pos:end="55:38"><name pos:start="55:22" pos:end="55:35">SYS_BUS_DEVICE</name><argument_list pos:start="55:36" pos:end="55:38">(<argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><name pos:start="55:37" pos:end="55:37">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:41" pos:end="55:50"><expr pos:start="55:41" pos:end="55:50"><operator pos:start="55:41" pos:end="55:41">&amp;</operator><name pos:start="55:42" pos:end="55:50"><name pos:start="55:42" pos:end="55:42">s</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:50">csrmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:34">/* No corresponding destroy */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:53"><expr pos:start="59:5" pos:end="61:52"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:12">iotlb</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="61:52"><name pos:start="59:16" pos:end="59:36">g_hash_table_new_full</name><argument_list pos:start="59:37" pos:end="61:52">(<argument pos:start="59:38" pos:end="59:52"><expr pos:start="59:38" pos:end="59:52"><name pos:start="59:38" pos:end="59:52">vtd_uint64_hash</name></expr></argument>, <argument pos:start="59:55" pos:end="59:70"><expr pos:start="59:55" pos:end="59:70"><name pos:start="59:55" pos:end="59:70">vtd_uint64_equal</name></expr></argument>,

                                     <argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">g_free</name></expr></argument>, <argument pos:start="61:46" pos:end="61:51"><expr pos:start="61:46" pos:end="61:51"><name pos:start="61:46" pos:end="61:51">g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:62"><expr pos:start="63:5" pos:end="65:61"><name pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:23">vtd_as_by_busptr</name></name> <operator pos:start="63:25" pos:end="63:25">=</operator> <call pos:start="63:27" pos:end="65:61"><name pos:start="63:27" pos:end="63:47">g_hash_table_new_full</name><argument_list pos:start="63:48" pos:end="65:61">(<argument pos:start="63:49" pos:end="63:63"><expr pos:start="63:49" pos:end="63:63"><name pos:start="63:49" pos:end="63:63">vtd_uint64_hash</name></expr></argument>, <argument pos:start="63:66" pos:end="63:81"><expr pos:start="63:66" pos:end="63:81"><name pos:start="63:66" pos:end="63:81">vtd_uint64_equal</name></expr></argument>,

                                              <argument pos:start="65:47" pos:end="65:52"><expr pos:start="65:47" pos:end="65:52"><name pos:start="65:47" pos:end="65:52">g_free</name></expr></argument>, <argument pos:start="65:55" pos:end="65:60"><expr pos:start="65:55" pos:end="65:60"><name pos:start="65:55" pos:end="65:60">g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:16"><expr pos:start="67:5" pos:end="67:15"><call pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:12">vtd_init</name><argument_list pos:start="67:13" pos:end="67:15">(<argument pos:start="67:14" pos:end="67:14"><expr pos:start="67:14" pos:end="67:14"><name pos:start="67:14" pos:end="67:14">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:70"><expr pos:start="69:5" pos:end="69:69"><call pos:start="69:5" pos:end="69:69"><name pos:start="69:5" pos:end="69:19">sysbus_mmio_map</name><argument_list pos:start="69:20" pos:end="69:69">(<argument pos:start="69:21" pos:end="69:37"><expr pos:start="69:21" pos:end="69:37"><call pos:start="69:21" pos:end="69:37"><name pos:start="69:21" pos:end="69:34">SYS_BUS_DEVICE</name><argument_list pos:start="69:35" pos:end="69:37">(<argument pos:start="69:36" pos:end="69:36"><expr pos:start="69:36" pos:end="69:36"><name pos:start="69:36" pos:end="69:36">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:40" pos:end="69:40"><expr pos:start="69:40" pos:end="69:40"><literal type="number" pos:start="69:40" pos:end="69:40">0</literal></expr></argument>, <argument pos:start="69:43" pos:end="69:68"><expr pos:start="69:43" pos:end="69:68"><name pos:start="69:43" pos:end="69:68">Q35_HOST_BRIDGE_IOMMU_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><call pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:19">pci_setup_iommu</name><argument_list pos:start="71:20" pos:end="71:49">(<argument pos:start="71:21" pos:end="71:23"><expr pos:start="71:21" pos:end="71:23"><name pos:start="71:21" pos:end="71:23">bus</name></expr></argument>, <argument pos:start="71:26" pos:end="71:43"><expr pos:start="71:26" pos:end="71:43"><name pos:start="71:26" pos:end="71:43">vtd_host_dma_iommu</name></expr></argument>, <argument pos:start="71:46" pos:end="71:48"><expr pos:start="71:46" pos:end="71:48"><name pos:start="71:46" pos:end="71:48">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:50">/* Pseudo address space under root PCI bus. */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:74"><expr pos:start="75:5" pos:end="75:73"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:8">pcms</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:19">ioapic_as</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:73"><name pos:start="75:23" pos:end="75:40">vtd_host_dma_iommu</name><argument_list pos:start="75:41" pos:end="75:73">(<argument pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:44">bus</name></expr></argument>, <argument pos:start="75:47" pos:end="75:47"><expr pos:start="75:47" pos:end="75:47"><name pos:start="75:47" pos:end="75:47">s</name></expr></argument>, <argument pos:start="75:50" pos:end="75:72"><expr pos:start="75:50" pos:end="75:72"><name pos:start="75:50" pos:end="75:72">Q35_PSEUDO_DEVFN_IOAPIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
