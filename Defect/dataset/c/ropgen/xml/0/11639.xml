<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11639.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">slirp_select_poll</name><parameter_list pos:start="1:23" pos:end="1:71">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:29">fd_set</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:38">readfds</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:46">fd_set</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:56">writefds</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:64">fd_set</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">xfds</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="349:1">{<block_content pos:start="5:5" pos:end="347:28">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:17">socket</name></name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">so</name></decl>, <decl pos:start="5:24" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:31">so_next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:29"><expr pos:start="11:5" pos:end="11:28"><name pos:start="11:5" pos:end="11:18">global_readfds</name> <operator pos:start="11:20" pos:end="11:20">=</operator> <name pos:start="11:22" pos:end="11:28">readfds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:19">global_writefds</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <name pos:start="13:23" pos:end="13:30">writefds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:23"><expr pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:15">global_xfds</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:22">xfds</name></expr>;</expr_stmt>



	<comment type="block" pos:start="19:9" pos:end="19:25">/* Update time */</comment>

	<expr_stmt pos:start="21:9" pos:end="21:18"><expr pos:start="21:9" pos:end="21:17"><call pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:15">updtime</name><argument_list pos:start="21:16" pos:end="21:17">()</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="25:9" pos:end="29:11">/*

	 * See if anything has timed out

	 */</comment>

	<if_stmt pos:start="31:9" pos:end="51:9"><if pos:start="31:9" pos:end="51:9">if <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:19">link_up</name></expr>)</condition> <block pos:start="31:22" pos:end="51:9">{<block_content pos:start="33:17" pos:end="49:17">

		<if_stmt pos:start="33:17" pos:end="39:17"><if pos:start="33:17" pos:end="39:17">if <condition pos:start="33:20" pos:end="33:70">(<expr pos:start="33:21" pos:end="33:69"><name pos:start="33:21" pos:end="33:33">time_fasttimo</name> <operator pos:start="33:35" pos:end="33:36">&amp;&amp;</operator> <operator pos:start="33:38" pos:end="33:38">(</operator><operator pos:start="33:39" pos:end="33:39">(</operator><name pos:start="33:40" pos:end="33:46">curtime</name> <operator pos:start="33:48" pos:end="33:48">-</operator> <name pos:start="33:50" pos:end="33:62">time_fasttimo</name><operator pos:start="33:63" pos:end="33:63">)</operator> <operator pos:start="33:65" pos:end="33:66">&gt;=</operator> <literal type="number" pos:start="33:68" pos:end="33:68">2</literal><operator pos:start="33:69" pos:end="33:69">)</operator></expr>)</condition> <block pos:start="33:72" pos:end="39:17">{<block_content pos:start="35:25" pos:end="37:42">

			<expr_stmt pos:start="35:25" pos:end="35:39"><expr pos:start="35:25" pos:end="35:38"><call pos:start="35:25" pos:end="35:38"><name pos:start="35:25" pos:end="35:36">tcp_fasttimo</name><argument_list pos:start="35:37" pos:end="35:38">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="37:25" pos:end="37:42"><expr pos:start="37:25" pos:end="37:41"><name pos:start="37:25" pos:end="37:37">time_fasttimo</name> <operator pos:start="37:39" pos:end="37:39">=</operator> <literal type="number" pos:start="37:41" pos:end="37:41">0</literal></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<if_stmt pos:start="41:17" pos:end="49:17"><if pos:start="41:17" pos:end="49:17">if <condition pos:start="41:20" pos:end="41:70">(<expr pos:start="41:21" pos:end="41:69"><name pos:start="41:21" pos:end="41:31">do_slowtimo</name> <operator pos:start="41:33" pos:end="41:34">&amp;&amp;</operator> <operator pos:start="41:36" pos:end="41:36">(</operator><operator pos:start="41:37" pos:end="41:37">(</operator><name pos:start="41:38" pos:end="41:44">curtime</name> <operator pos:start="41:46" pos:end="41:46">-</operator> <name pos:start="41:48" pos:end="41:60">last_slowtimo</name><operator pos:start="41:61" pos:end="41:61">)</operator> <operator pos:start="41:63" pos:end="41:64">&gt;=</operator> <literal type="number" pos:start="41:66" pos:end="41:68">499</literal><operator pos:start="41:69" pos:end="41:69">)</operator></expr>)</condition> <block pos:start="41:72" pos:end="49:17">{<block_content pos:start="43:25" pos:end="47:48">

			<expr_stmt pos:start="43:25" pos:end="43:38"><expr pos:start="43:25" pos:end="43:37"><call pos:start="43:25" pos:end="43:37"><name pos:start="43:25" pos:end="43:35">ip_slowtimo</name><argument_list pos:start="43:36" pos:end="43:37">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="45:25" pos:end="45:39"><expr pos:start="45:25" pos:end="45:38"><call pos:start="45:25" pos:end="45:38"><name pos:start="45:25" pos:end="45:36">tcp_slowtimo</name><argument_list pos:start="45:37" pos:end="45:38">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="47:25" pos:end="47:48"><expr pos:start="47:25" pos:end="47:47"><name pos:start="47:25" pos:end="47:37">last_slowtimo</name> <operator pos:start="47:39" pos:end="47:39">=</operator> <name pos:start="47:41" pos:end="47:47">curtime</name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="55:9" pos:end="59:11">/*

	 * Check sockets

	 */</comment>

	<if_stmt pos:start="61:9" pos:end="317:9"><if pos:start="61:9" pos:end="317:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">link_up</name></expr>)</condition> <block pos:start="61:22" pos:end="317:9">{<block_content pos:start="69:17" pos:end="315:17">

		<comment type="block" pos:start="63:17" pos:end="67:19">/*

		 * Check TCP sockets

		 */</comment>

		<for pos:start="69:17" pos:end="289:17">for <control pos:start="69:21" pos:end="69:64">(<init pos:start="69:22" pos:end="69:38"><expr pos:start="69:22" pos:end="69:37"><name pos:start="69:22" pos:end="69:23">so</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:37"><name pos:start="69:27" pos:end="69:29">tcb</name><operator pos:start="69:30" pos:end="69:30">.</operator><name pos:start="69:31" pos:end="69:37">so_next</name></name></expr>;</init> <condition pos:start="69:40" pos:end="69:50"><expr pos:start="69:40" pos:end="69:49"><name pos:start="69:40" pos:end="69:41">so</name> <operator pos:start="69:43" pos:end="69:44">!=</operator> <operator pos:start="69:46" pos:end="69:46">&amp;</operator><name pos:start="69:47" pos:end="69:49">tcb</name></expr>;</condition> <incr pos:start="69:52" pos:end="69:63"><expr pos:start="69:52" pos:end="69:63"><name pos:start="69:52" pos:end="69:53">so</name> <operator pos:start="69:55" pos:end="69:55">=</operator> <name pos:start="69:57" pos:end="69:63">so_next</name></expr></incr>)</control> <block pos:start="69:66" pos:end="289:17">{<block_content pos:start="71:25" pos:end="288:0">

			<expr_stmt pos:start="71:25" pos:end="71:46"><expr pos:start="71:25" pos:end="71:45"><name pos:start="71:25" pos:end="71:31">so_next</name> <operator pos:start="71:33" pos:end="71:33">=</operator> <name pos:start="71:35" pos:end="71:45"><name pos:start="71:35" pos:end="71:36">so</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:45">so_next</name></name></expr>;</expr_stmt>



			<comment type="block" pos:start="75:25" pos:end="81:27">/*

			 * FD_ISSET is meaningless on these sockets

			 * (and they can crash the program)

			 */</comment>

			<if_stmt pos:start="83:25" pos:end="85:36"><if pos:start="83:25" pos:end="85:36">if <condition pos:start="83:28" pos:end="83:69">(<expr pos:start="83:29" pos:end="83:68"><name pos:start="83:29" pos:end="83:40"><name pos:start="83:29" pos:end="83:30">so</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:40">so_state</name></name> <operator pos:start="83:42" pos:end="83:42">&amp;</operator> <name pos:start="83:44" pos:end="83:53">SS_NOFDREF</name> <operator pos:start="83:55" pos:end="83:56">||</operator> <name pos:start="83:58" pos:end="83:62"><name pos:start="83:58" pos:end="83:59">so</name><operator pos:start="83:60" pos:end="83:61">-&gt;</operator><name pos:start="83:62" pos:end="83:62">s</name></name> <operator pos:start="83:64" pos:end="83:65">==</operator> <operator pos:start="83:67" pos:end="83:67">-</operator><literal type="number" pos:start="83:68" pos:end="83:68">1</literal></expr>)</condition><block type="pseudo" pos:start="85:28" pos:end="85:36"><block_content pos:start="85:28" pos:end="85:36">

			   <continue pos:start="85:28" pos:end="85:36">continue;</continue></block_content></block></if></if_stmt>



			<comment type="block" pos:start="89:25" pos:end="97:27">/*

			 * Check for URG data

			 * This will soread as well, so no need to

			 * test for readfds below if this succeeds

			 */</comment>

			<if_stmt pos:start="99:25" pos:end="135:25"><if pos:start="99:25" pos:end="101:41">if <condition pos:start="99:28" pos:end="99:50">(<expr pos:start="99:29" pos:end="99:49"><call pos:start="99:29" pos:end="99:49"><name pos:start="99:29" pos:end="99:36">FD_ISSET</name><argument_list pos:start="99:37" pos:end="99:49">(<argument pos:start="99:38" pos:end="99:42"><expr pos:start="99:38" pos:end="99:42"><name pos:start="99:38" pos:end="99:42"><name pos:start="99:38" pos:end="99:39">so</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:42">s</name></name></expr></argument>, <argument pos:start="99:45" pos:end="99:48"><expr pos:start="99:45" pos:end="99:48"><name pos:start="99:45" pos:end="99:48">xfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="101:28" pos:end="101:41"><block_content pos:start="101:28" pos:end="101:41">

			   <expr_stmt pos:start="101:28" pos:end="101:41"><expr pos:start="101:28" pos:end="101:40"><call pos:start="101:28" pos:end="101:40"><name pos:start="101:28" pos:end="101:36">sorecvoob</name><argument_list pos:start="101:37" pos:end="101:40">(<argument pos:start="101:38" pos:end="101:39"><expr pos:start="101:38" pos:end="101:39"><name pos:start="101:38" pos:end="101:39">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<comment type="block" pos:start="103:25" pos:end="107:27">/*

			 * Check sockets for reading

			 */</comment>

			<if type="elseif" pos:start="109:25" pos:end="135:25">else if <condition pos:start="109:33" pos:end="109:58">(<expr pos:start="109:34" pos:end="109:57"><call pos:start="109:34" pos:end="109:57"><name pos:start="109:34" pos:end="109:41">FD_ISSET</name><argument_list pos:start="109:42" pos:end="109:57">(<argument pos:start="109:43" pos:end="109:47"><expr pos:start="109:43" pos:end="109:47"><name pos:start="109:43" pos:end="109:47"><name pos:start="109:43" pos:end="109:44">so</name><operator pos:start="109:45" pos:end="109:46">-&gt;</operator><name pos:start="109:47" pos:end="109:47">s</name></name></expr></argument>, <argument pos:start="109:50" pos:end="109:56"><expr pos:start="109:50" pos:end="109:56"><name pos:start="109:50" pos:end="109:56">readfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:60" pos:end="135:25">{<block_content pos:start="117:33" pos:end="133:61">

				<comment type="block" pos:start="111:33" pos:end="115:35">/*

				 * Check for incoming connections

				 */</comment>

				<if_stmt pos:start="117:33" pos:end="123:33"><if pos:start="117:33" pos:end="123:33">if <condition pos:start="117:36" pos:end="117:66">(<expr pos:start="117:37" pos:end="117:65"><name pos:start="117:37" pos:end="117:48"><name pos:start="117:37" pos:end="117:38">so</name><operator pos:start="117:39" pos:end="117:40">-&gt;</operator><name pos:start="117:41" pos:end="117:48">so_state</name></name> <operator pos:start="117:50" pos:end="117:50">&amp;</operator> <name pos:start="117:52" pos:end="117:65">SS_FACCEPTCONN</name></expr>)</condition> <block pos:start="117:68" pos:end="123:33">{<block_content pos:start="119:41" pos:end="121:49">

					<expr_stmt pos:start="119:41" pos:end="119:56"><expr pos:start="119:41" pos:end="119:55"><call pos:start="119:41" pos:end="119:55"><name pos:start="119:41" pos:end="119:51">tcp_connect</name><argument_list pos:start="119:52" pos:end="119:55">(<argument pos:start="119:53" pos:end="119:54"><expr pos:start="119:53" pos:end="119:54"><name pos:start="119:53" pos:end="119:54">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<continue pos:start="121:41" pos:end="121:49">continue;</continue>

				</block_content>}</block></if></if_stmt> <comment type="block" pos:start="123:35" pos:end="123:44">/* else */</comment>

				<expr_stmt pos:start="125:33" pos:end="125:49"><expr pos:start="125:33" pos:end="125:48"><name pos:start="125:33" pos:end="125:35">ret</name> <operator pos:start="125:37" pos:end="125:37">=</operator> <call pos:start="125:39" pos:end="125:48"><name pos:start="125:39" pos:end="125:44">soread</name><argument_list pos:start="125:45" pos:end="125:48">(<argument pos:start="125:46" pos:end="125:47"><expr pos:start="125:46" pos:end="125:47"><name pos:start="125:46" pos:end="125:47">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



				<comment type="block" pos:start="129:33" pos:end="129:68">/* Output it if we read something */</comment>

				<if_stmt pos:start="131:33" pos:end="133:61"><if pos:start="131:33" pos:end="133:61">if <condition pos:start="131:36" pos:end="131:44">(<expr pos:start="131:37" pos:end="131:43"><name pos:start="131:37" pos:end="131:39">ret</name> <operator pos:start="131:41" pos:end="131:41">&gt;</operator> <literal type="number" pos:start="131:43" pos:end="131:43">0</literal></expr>)</condition><block type="pseudo" pos:start="133:36" pos:end="133:61"><block_content pos:start="133:36" pos:end="133:61">

				   <expr_stmt pos:start="133:36" pos:end="133:61"><expr pos:start="133:36" pos:end="133:60"><call pos:start="133:36" pos:end="133:60"><name pos:start="133:36" pos:end="133:45">tcp_output</name><argument_list pos:start="133:46" pos:end="133:60">(<argument pos:start="133:47" pos:end="133:59"><expr pos:start="133:47" pos:end="133:59"><call pos:start="133:47" pos:end="133:59"><name pos:start="133:47" pos:end="133:55">sototcpcb</name><argument_list pos:start="133:56" pos:end="133:59">(<argument pos:start="133:57" pos:end="133:58"><expr pos:start="133:57" pos:end="133:58"><name pos:start="133:57" pos:end="133:58">so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			</block_content>}</block></if></if_stmt>



			<comment type="block" pos:start="139:25" pos:end="143:27">/*

			 * Check sockets for writing

			 */</comment>

			<if_stmt pos:start="145:25" pos:end="226:0"><if pos:start="145:25" pos:end="226:0">if <condition pos:start="145:28" pos:end="145:54">(<expr pos:start="145:29" pos:end="145:53"><call pos:start="145:29" pos:end="145:53"><name pos:start="145:29" pos:end="145:36">FD_ISSET</name><argument_list pos:start="145:37" pos:end="145:53">(<argument pos:start="145:38" pos:end="145:42"><expr pos:start="145:38" pos:end="145:42"><name pos:start="145:38" pos:end="145:42"><name pos:start="145:38" pos:end="145:39">so</name><operator pos:start="145:40" pos:end="145:41">-&gt;</operator><name pos:start="145:42" pos:end="145:42">s</name></name></expr></argument>, <argument pos:start="145:45" pos:end="145:52"><expr pos:start="145:45" pos:end="145:52"><name pos:start="145:45" pos:end="145:52">writefds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:56" pos:end="226:0">{<block_content pos:start="153:27" pos:end="199:46">

			  <comment type="block" pos:start="147:27" pos:end="151:29">/*

			   * Check for non-blocking, still-connecting sockets

			   */</comment>

			  <if_stmt pos:start="153:27" pos:end="199:46"><if pos:start="153:27" pos:end="197:27">if <condition pos:start="153:30" pos:end="153:62">(<expr pos:start="153:31" pos:end="153:61"><name pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:32">so</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:42">so_state</name></name> <operator pos:start="153:44" pos:end="153:44">&amp;</operator> <name pos:start="153:46" pos:end="153:61">SS_ISFCONNECTING</name></expr>)</condition> <block pos:start="153:64" pos:end="197:27">{<block_content pos:start="157:29" pos:end="193:82">

			    <comment type="block" pos:start="155:29" pos:end="155:43">/* Connected */</comment>

			    <expr_stmt pos:start="157:29" pos:end="157:62"><expr pos:start="157:29" pos:end="157:61"><name pos:start="157:29" pos:end="157:40"><name pos:start="157:29" pos:end="157:30">so</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:40">so_state</name></name> <operator pos:start="157:42" pos:end="157:43">&amp;=</operator> <operator pos:start="157:45" pos:end="157:45">~</operator><name pos:start="157:46" pos:end="157:61">SS_ISFCONNECTING</name></expr>;</expr_stmt>



			    <expr_stmt pos:start="161:29" pos:end="161:73"><expr pos:start="161:29" pos:end="161:72"><name pos:start="161:29" pos:end="161:31">ret</name> <operator pos:start="161:33" pos:end="161:33">=</operator> <call pos:start="161:35" pos:end="161:72"><name pos:start="161:35" pos:end="161:38">send</name><argument_list pos:start="161:39" pos:end="161:72">(<argument pos:start="161:40" pos:end="161:44"><expr pos:start="161:40" pos:end="161:44"><name pos:start="161:40" pos:end="161:44"><name pos:start="161:40" pos:end="161:41">so</name><operator pos:start="161:42" pos:end="161:43">-&gt;</operator><name pos:start="161:44" pos:end="161:44">s</name></name></expr></argument>, <argument pos:start="161:47" pos:end="161:65"><expr pos:start="161:47" pos:end="161:65"><operator pos:start="161:47" pos:end="161:47">(</operator><specifier pos:start="161:48" pos:end="161:52">const</specifier> <name pos:start="161:54" pos:end="161:57">void</name> <operator pos:start="161:59" pos:end="161:59">*</operator><operator pos:start="161:60" pos:end="161:60">)</operator> <operator pos:start="161:62" pos:end="161:62">&amp;</operator><name pos:start="161:63" pos:end="161:65">ret</name></expr></argument>, <argument pos:start="161:68" pos:end="161:68"><expr pos:start="161:68" pos:end="161:68"><literal type="number" pos:start="161:68" pos:end="161:68">0</literal></expr></argument>, <argument pos:start="161:71" pos:end="161:71"><expr pos:start="161:71" pos:end="161:71"><literal type="number" pos:start="161:71" pos:end="161:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <if_stmt pos:start="163:29" pos:end="181:29"><if pos:start="163:29" pos:end="181:29">if <condition pos:start="163:32" pos:end="163:40">(<expr pos:start="163:33" pos:end="163:39"><name pos:start="163:33" pos:end="163:35">ret</name> <operator pos:start="163:37" pos:end="163:37">&lt;</operator> <literal type="number" pos:start="163:39" pos:end="163:39">0</literal></expr>)</condition> <block pos:start="163:42" pos:end="181:29">{<block_content pos:start="167:31" pos:end="179:57">

			      <comment type="block" pos:start="165:31" pos:end="165:71">/* XXXXX Must fix, zero bytes is a NOP */</comment>

			      <if_stmt pos:start="167:31" pos:end="171:41"><if pos:start="167:31" pos:end="171:41">if <condition pos:start="167:34" pos:end="169:76">(<expr pos:start="167:35" pos:end="169:75"><name pos:start="167:35" pos:end="167:39">errno</name> <operator pos:start="167:41" pos:end="167:42">==</operator> <name pos:start="167:44" pos:end="167:49">EAGAIN</name> <operator pos:start="167:51" pos:end="167:52">||</operator> <name pos:start="167:54" pos:end="167:58">errno</name> <operator pos:start="167:60" pos:end="167:61">==</operator> <name pos:start="167:63" pos:end="167:73">EWOULDBLOCK</name> <operator pos:start="167:75" pos:end="167:76">||</operator>

				  <name pos:start="169:35" pos:end="169:39">errno</name> <operator pos:start="169:41" pos:end="169:42">==</operator> <name pos:start="169:44" pos:end="169:54">EINPROGRESS</name> <operator pos:start="169:56" pos:end="169:57">||</operator> <name pos:start="169:59" pos:end="169:63">errno</name> <operator pos:start="169:65" pos:end="169:66">==</operator> <name pos:start="169:68" pos:end="169:75">ENOTCONN</name></expr>)</condition><block type="pseudo" pos:start="171:33" pos:end="171:41"><block_content pos:start="171:33" pos:end="171:41">

				<continue pos:start="171:33" pos:end="171:41">continue;</continue></block_content></block></if></if_stmt>



			      <comment type="block" pos:start="175:31" pos:end="175:47">/* else failed */</comment>

			      <expr_stmt pos:start="177:31" pos:end="177:65"><expr pos:start="177:31" pos:end="177:64"><name pos:start="177:31" pos:end="177:42"><name pos:start="177:31" pos:end="177:32">so</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:42">so_state</name></name> <operator pos:start="177:44" pos:end="177:45">&amp;=</operator> <name pos:start="177:47" pos:end="177:64">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

			      <expr_stmt pos:start="179:31" pos:end="179:57"><expr pos:start="179:31" pos:end="179:56"><name pos:start="179:31" pos:end="179:42"><name pos:start="179:31" pos:end="179:32">so</name><operator pos:start="179:33" pos:end="179:34">-&gt;</operator><name pos:start="179:35" pos:end="179:42">so_state</name></name> <operator pos:start="179:44" pos:end="179:45">|=</operator> <name pos:start="179:47" pos:end="179:56">SS_NOFDREF</name></expr>;</expr_stmt>

			    </block_content>}</block></if></if_stmt>

			    <comment type="block" pos:start="183:29" pos:end="183:73">/* else so-&gt;so_state &amp;= ~SS_ISFCONNECTING; */</comment>



			    <comment type="block" pos:start="187:29" pos:end="191:31">/*

			     * Continue tcp_input

			     */</comment>

			    <expr_stmt pos:start="193:29" pos:end="193:82"><expr pos:start="193:29" pos:end="193:81"><call pos:start="193:29" pos:end="193:81"><name pos:start="193:29" pos:end="193:37">tcp_input</name><argument_list pos:start="193:38" pos:end="193:81">(<argument pos:start="193:39" pos:end="193:57"><expr pos:start="193:39" pos:end="193:57"><operator pos:start="193:39" pos:end="193:39">(</operator>struct <name pos:start="193:47" pos:end="193:50">mbuf</name> <operator pos:start="193:52" pos:end="193:52">*</operator><operator pos:start="193:53" pos:end="193:53">)</operator><name pos:start="193:54" pos:end="193:57">NULL</name></expr></argument>, <argument pos:start="193:60" pos:end="193:76"><expr pos:start="193:60" pos:end="193:76"><sizeof pos:start="193:60" pos:end="193:76">sizeof<argument_list pos:start="193:66" pos:end="193:76">(<argument pos:start="193:67" pos:end="193:75"><expr pos:start="193:67" pos:end="193:75">struct <name pos:start="193:74" pos:end="193:75">ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="193:79" pos:end="193:80"><expr pos:start="193:79" pos:end="193:80"><name pos:start="193:79" pos:end="193:80">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <comment type="block" pos:start="195:29" pos:end="195:43">/* continue; */</comment>

			  </block_content>}</block></if> <else pos:start="197:29" pos:end="199:46">else<block type="pseudo" pos:start="199:29" pos:end="199:46"><block_content pos:start="199:29" pos:end="199:46">

			    <expr_stmt pos:start="199:29" pos:end="199:46"><expr pos:start="199:29" pos:end="199:45"><name pos:start="199:29" pos:end="199:31">ret</name> <operator pos:start="199:33" pos:end="199:33">=</operator> <call pos:start="199:35" pos:end="199:45"><name pos:start="199:35" pos:end="199:41">sowrite</name><argument_list pos:start="199:42" pos:end="199:45">(<argument pos:start="199:43" pos:end="199:44"><expr pos:start="199:43" pos:end="199:44"><name pos:start="199:43" pos:end="199:44">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			  <comment type="block" pos:start="201:27" pos:end="211:29">/*

			   * XXXXX If we wrote something (a lot), there

			   * could be a need for a window update.

			   * In the worst case, the remote will send

			   * a window probe to get things going again

			   */</comment>

			</block_content>}</block></if></if_stmt>



			<comment type="block" pos:start="217:25" pos:end="223:27">/*

			 * Probe a still-connecting, non-blocking socket

			 * to check if it's still alive

	 	 	 */</comment>

<cpp:ifdef pos:start="225:1" pos:end="225:17">#<cpp:directive pos:start="225:2" pos:end="225:6">ifdef</cpp:directive> <name pos:start="225:8" pos:end="225:17">PROBE_CONN</name></cpp:ifdef>

			<if_stmt pos:start="227:25" pos:end="288:0"><if pos:start="227:25" pos:end="288:0">if <condition pos:start="227:28" pos:end="227:60">(<expr pos:start="227:29" pos:end="227:59"><name pos:start="227:29" pos:end="227:40"><name pos:start="227:29" pos:end="227:30">so</name><operator pos:start="227:31" pos:end="227:32">-&gt;</operator><name pos:start="227:33" pos:end="227:40">so_state</name></name> <operator pos:start="227:42" pos:end="227:42">&amp;</operator> <name pos:start="227:44" pos:end="227:59">SS_ISFCONNECTING</name></expr>)</condition> <block pos:start="227:62" pos:end="288:0">{<block_content pos:start="229:27" pos:end="283:79">

			  <expr_stmt pos:start="229:27" pos:end="229:63"><expr pos:start="229:27" pos:end="229:62"><name pos:start="229:27" pos:end="229:29">ret</name> <operator pos:start="229:31" pos:end="229:31">=</operator> <call pos:start="229:33" pos:end="229:62"><name pos:start="229:33" pos:end="229:36">recv</name><argument_list pos:start="229:37" pos:end="229:62">(<argument pos:start="229:38" pos:end="229:42"><expr pos:start="229:38" pos:end="229:42"><name pos:start="229:38" pos:end="229:42"><name pos:start="229:38" pos:end="229:39">so</name><operator pos:start="229:40" pos:end="229:41">-&gt;</operator><name pos:start="229:42" pos:end="229:42">s</name></name></expr></argument>, <argument pos:start="229:45" pos:end="229:56"><expr pos:start="229:45" pos:end="229:56"><operator pos:start="229:45" pos:end="229:45">(</operator><name pos:start="229:46" pos:end="229:49">char</name> <operator pos:start="229:51" pos:end="229:51">*</operator><operator pos:start="229:52" pos:end="229:52">)</operator><operator pos:start="229:53" pos:end="229:53">&amp;</operator><name pos:start="229:54" pos:end="229:56">ret</name></expr></argument>, <argument pos:start="229:59" pos:end="229:59"><expr pos:start="229:59" pos:end="229:59"><literal type="number" pos:start="229:59" pos:end="229:59">0</literal></expr></argument>,<argument pos:start="229:61" pos:end="229:61"><expr pos:start="229:61" pos:end="229:61"><literal type="number" pos:start="229:61" pos:end="229:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			  <if_stmt pos:start="233:27" pos:end="281:27"><if pos:start="233:27" pos:end="255:27">if <condition pos:start="233:30" pos:end="233:38">(<expr pos:start="233:31" pos:end="233:37"><name pos:start="233:31" pos:end="233:33">ret</name> <operator pos:start="233:35" pos:end="233:35">&lt;</operator> <literal type="number" pos:start="233:37" pos:end="233:37">0</literal></expr>)</condition> <block pos:start="233:40" pos:end="255:27">{<block_content pos:start="237:29" pos:end="249:55">

			    <comment type="block" pos:start="235:29" pos:end="235:37">/* XXX */</comment>

			    <if_stmt pos:start="237:29" pos:end="241:39"><if pos:start="237:29" pos:end="241:39">if <condition pos:start="237:32" pos:end="239:74">(<expr pos:start="237:33" pos:end="239:73"><name pos:start="237:33" pos:end="237:37">errno</name> <operator pos:start="237:39" pos:end="237:40">==</operator> <name pos:start="237:42" pos:end="237:47">EAGAIN</name> <operator pos:start="237:49" pos:end="237:50">||</operator> <name pos:start="237:52" pos:end="237:56">errno</name> <operator pos:start="237:58" pos:end="237:59">==</operator> <name pos:start="237:61" pos:end="237:71">EWOULDBLOCK</name> <operator pos:start="237:73" pos:end="237:74">||</operator>

				<name pos:start="239:33" pos:end="239:37">errno</name> <operator pos:start="239:39" pos:end="239:40">==</operator> <name pos:start="239:42" pos:end="239:52">EINPROGRESS</name> <operator pos:start="239:54" pos:end="239:55">||</operator> <name pos:start="239:57" pos:end="239:61">errno</name> <operator pos:start="239:63" pos:end="239:64">==</operator> <name pos:start="239:66" pos:end="239:73">ENOTCONN</name></expr>)</condition><block type="pseudo" pos:start="241:31" pos:end="241:39"><block_content pos:start="241:31" pos:end="241:39">

			      <continue pos:start="241:31" pos:end="241:39">continue;</continue></block_content></block></if></if_stmt> <comment type="block" pos:start="241:41" pos:end="241:72">/* Still connecting, continue */</comment>



			    <comment type="block" pos:start="245:29" pos:end="245:45">/* else failed */</comment>

			    <expr_stmt pos:start="247:29" pos:end="247:63"><expr pos:start="247:29" pos:end="247:62"><name pos:start="247:29" pos:end="247:40"><name pos:start="247:29" pos:end="247:30">so</name><operator pos:start="247:31" pos:end="247:32">-&gt;</operator><name pos:start="247:33" pos:end="247:40">so_state</name></name> <operator pos:start="247:42" pos:end="247:43">&amp;=</operator> <name pos:start="247:45" pos:end="247:62">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

			    <expr_stmt pos:start="249:29" pos:end="249:55"><expr pos:start="249:29" pos:end="249:54"><name pos:start="249:29" pos:end="249:40"><name pos:start="249:29" pos:end="249:30">so</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:40">so_state</name></name> <operator pos:start="249:42" pos:end="249:43">|=</operator> <name pos:start="249:45" pos:end="249:54">SS_NOFDREF</name></expr>;</expr_stmt>



			    <comment type="block" pos:start="253:29" pos:end="253:64">/* tcp_input will take care of it */</comment>

			  </block_content>}</block></if> <else pos:start="255:29" pos:end="281:27">else <block pos:start="255:34" pos:end="281:27">{<block_content pos:start="257:29" pos:end="277:64">

			    <expr_stmt pos:start="257:29" pos:end="257:57"><expr pos:start="257:29" pos:end="257:56"><name pos:start="257:29" pos:end="257:31">ret</name> <operator pos:start="257:33" pos:end="257:33">=</operator> <call pos:start="257:35" pos:end="257:56"><name pos:start="257:35" pos:end="257:38">send</name><argument_list pos:start="257:39" pos:end="257:56">(<argument pos:start="257:40" pos:end="257:44"><expr pos:start="257:40" pos:end="257:44"><name pos:start="257:40" pos:end="257:44"><name pos:start="257:40" pos:end="257:41">so</name><operator pos:start="257:42" pos:end="257:43">-&gt;</operator><name pos:start="257:44" pos:end="257:44">s</name></name></expr></argument>, <argument pos:start="257:47" pos:end="257:50"><expr pos:start="257:47" pos:end="257:50"><operator pos:start="257:47" pos:end="257:47">&amp;</operator><name pos:start="257:48" pos:end="257:50">ret</name></expr></argument>, <argument pos:start="257:53" pos:end="257:53"><expr pos:start="257:53" pos:end="257:53"><literal type="number" pos:start="257:53" pos:end="257:53">0</literal></expr></argument>,<argument pos:start="257:55" pos:end="257:55"><expr pos:start="257:55" pos:end="257:55"><literal type="number" pos:start="257:55" pos:end="257:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <if_stmt pos:start="259:29" pos:end="277:64"><if pos:start="259:29" pos:end="275:29">if <condition pos:start="259:32" pos:end="259:40">(<expr pos:start="259:33" pos:end="259:39"><name pos:start="259:33" pos:end="259:35">ret</name> <operator pos:start="259:37" pos:end="259:37">&lt;</operator> <literal type="number" pos:start="259:39" pos:end="259:39">0</literal></expr>)</condition> <block pos:start="259:42" pos:end="275:29">{<block_content pos:start="263:31" pos:end="273:57">

			      <comment type="block" pos:start="261:31" pos:end="261:39">/* XXX */</comment>

			      <if_stmt pos:start="263:31" pos:end="267:41"><if pos:start="263:31" pos:end="267:41">if <condition pos:start="263:34" pos:end="265:76">(<expr pos:start="263:35" pos:end="265:75"><name pos:start="263:35" pos:end="263:39">errno</name> <operator pos:start="263:41" pos:end="263:42">==</operator> <name pos:start="263:44" pos:end="263:49">EAGAIN</name> <operator pos:start="263:51" pos:end="263:52">||</operator> <name pos:start="263:54" pos:end="263:58">errno</name> <operator pos:start="263:60" pos:end="263:61">==</operator> <name pos:start="263:63" pos:end="263:73">EWOULDBLOCK</name> <operator pos:start="263:75" pos:end="263:76">||</operator>

				  <name pos:start="265:35" pos:end="265:39">errno</name> <operator pos:start="265:41" pos:end="265:42">==</operator> <name pos:start="265:44" pos:end="265:54">EINPROGRESS</name> <operator pos:start="265:56" pos:end="265:57">||</operator> <name pos:start="265:59" pos:end="265:63">errno</name> <operator pos:start="265:65" pos:end="265:66">==</operator> <name pos:start="265:68" pos:end="265:75">ENOTCONN</name></expr>)</condition><block type="pseudo" pos:start="267:33" pos:end="267:41"><block_content pos:start="267:33" pos:end="267:41">

				<continue pos:start="267:33" pos:end="267:41">continue;</continue></block_content></block></if></if_stmt>

			      <comment type="block" pos:start="269:31" pos:end="269:47">/* else failed */</comment>

			      <expr_stmt pos:start="271:31" pos:end="271:65"><expr pos:start="271:31" pos:end="271:64"><name pos:start="271:31" pos:end="271:42"><name pos:start="271:31" pos:end="271:32">so</name><operator pos:start="271:33" pos:end="271:34">-&gt;</operator><name pos:start="271:35" pos:end="271:42">so_state</name></name> <operator pos:start="271:44" pos:end="271:45">&amp;=</operator> <name pos:start="271:47" pos:end="271:64">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

			      <expr_stmt pos:start="273:31" pos:end="273:57"><expr pos:start="273:31" pos:end="273:56"><name pos:start="273:31" pos:end="273:42"><name pos:start="273:31" pos:end="273:32">so</name><operator pos:start="273:33" pos:end="273:34">-&gt;</operator><name pos:start="273:35" pos:end="273:42">so_state</name></name> <operator pos:start="273:44" pos:end="273:45">|=</operator> <name pos:start="273:47" pos:end="273:56">SS_NOFDREF</name></expr>;</expr_stmt>

			    </block_content>}</block></if> <else pos:start="275:31" pos:end="277:64">else<block type="pseudo" pos:start="277:31" pos:end="277:64"><block_content pos:start="277:31" pos:end="277:64">

			      <expr_stmt pos:start="277:31" pos:end="277:64"><expr pos:start="277:31" pos:end="277:63"><name pos:start="277:31" pos:end="277:42"><name pos:start="277:31" pos:end="277:32">so</name><operator pos:start="277:33" pos:end="277:34">-&gt;</operator><name pos:start="277:35" pos:end="277:42">so_state</name></name> <operator pos:start="277:44" pos:end="277:45">&amp;=</operator> <operator pos:start="277:47" pos:end="277:47">~</operator><name pos:start="277:48" pos:end="277:63">SS_ISFCONNECTING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



			  </block_content>}</block></else></if_stmt>

			  <expr_stmt pos:start="283:27" pos:end="283:79"><expr pos:start="283:27" pos:end="283:78"><call pos:start="283:27" pos:end="283:78"><name pos:start="283:27" pos:end="283:35">tcp_input</name><argument_list pos:start="283:36" pos:end="283:78">(<argument pos:start="283:37" pos:end="283:55"><expr pos:start="283:37" pos:end="283:55"><operator pos:start="283:37" pos:end="283:37">(</operator>struct <name pos:start="283:45" pos:end="283:48">mbuf</name> <operator pos:start="283:50" pos:end="283:50">*</operator><operator pos:start="283:51" pos:end="283:51">)</operator><name pos:start="283:52" pos:end="283:55">NULL</name></expr></argument>, <argument pos:start="283:58" pos:end="283:74"><expr pos:start="283:58" pos:end="283:74"><sizeof pos:start="283:58" pos:end="283:74">sizeof<argument_list pos:start="283:64" pos:end="283:74">(<argument pos:start="283:65" pos:end="283:73"><expr pos:start="283:65" pos:end="283:73">struct <name pos:start="283:72" pos:end="283:73">ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument pos:start="283:76" pos:end="283:77"><expr pos:start="283:76" pos:end="283:77"><name pos:start="283:76" pos:end="283:77">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt> <comment type="block" pos:start="285:27" pos:end="285:48">/* SS_ISFCONNECTING */</comment>

<cpp:endif pos:start="287:1" pos:end="287:6">#<cpp:directive pos:start="287:2" pos:end="287:6">endif</cpp:directive></cpp:endif>

		</block_content>}</block></for>



		<comment type="block" pos:start="293:17" pos:end="301:19">/*

		 * Now UDP sockets.

		 * Incoming packets are sent straight away, they're not buffered.

		 * Incoming UDP data isn't buffered either.

		 */</comment>

		<for pos:start="303:17" pos:end="315:17">for <control pos:start="303:21" pos:end="303:64">(<init pos:start="303:22" pos:end="303:38"><expr pos:start="303:22" pos:end="303:37"><name pos:start="303:22" pos:end="303:23">so</name> <operator pos:start="303:25" pos:end="303:25">=</operator> <name pos:start="303:27" pos:end="303:37"><name pos:start="303:27" pos:end="303:29">udb</name><operator pos:start="303:30" pos:end="303:30">.</operator><name pos:start="303:31" pos:end="303:37">so_next</name></name></expr>;</init> <condition pos:start="303:40" pos:end="303:50"><expr pos:start="303:40" pos:end="303:49"><name pos:start="303:40" pos:end="303:41">so</name> <operator pos:start="303:43" pos:end="303:44">!=</operator> <operator pos:start="303:46" pos:end="303:46">&amp;</operator><name pos:start="303:47" pos:end="303:49">udb</name></expr>;</condition> <incr pos:start="303:52" pos:end="303:63"><expr pos:start="303:52" pos:end="303:63"><name pos:start="303:52" pos:end="303:53">so</name> <operator pos:start="303:55" pos:end="303:55">=</operator> <name pos:start="303:57" pos:end="303:63">so_next</name></expr></incr>)</control> <block pos:start="303:66" pos:end="315:17">{<block_content pos:start="305:25" pos:end="313:25">

			<expr_stmt pos:start="305:25" pos:end="305:46"><expr pos:start="305:25" pos:end="305:45"><name pos:start="305:25" pos:end="305:31">so_next</name> <operator pos:start="305:33" pos:end="305:33">=</operator> <name pos:start="305:35" pos:end="305:45"><name pos:start="305:35" pos:end="305:36">so</name><operator pos:start="305:37" pos:end="305:38">-&gt;</operator><name pos:start="305:39" pos:end="305:45">so_next</name></name></expr>;</expr_stmt>



			<if_stmt pos:start="309:25" pos:end="313:25"><if pos:start="309:25" pos:end="313:25">if <condition pos:start="309:28" pos:end="309:68">(<expr pos:start="309:29" pos:end="309:67"><name pos:start="309:29" pos:end="309:33"><name pos:start="309:29" pos:end="309:30">so</name><operator pos:start="309:31" pos:end="309:32">-&gt;</operator><name pos:start="309:33" pos:end="309:33">s</name></name> <operator pos:start="309:35" pos:end="309:36">!=</operator> <operator pos:start="309:38" pos:end="309:38">-</operator><literal type="number" pos:start="309:39" pos:end="309:39">1</literal> <operator pos:start="309:41" pos:end="309:42">&amp;&amp;</operator> <call pos:start="309:44" pos:end="309:67"><name pos:start="309:44" pos:end="309:51">FD_ISSET</name><argument_list pos:start="309:52" pos:end="309:67">(<argument pos:start="309:53" pos:end="309:57"><expr pos:start="309:53" pos:end="309:57"><name pos:start="309:53" pos:end="309:57"><name pos:start="309:53" pos:end="309:54">so</name><operator pos:start="309:55" pos:end="309:56">-&gt;</operator><name pos:start="309:57" pos:end="309:57">s</name></name></expr></argument>, <argument pos:start="309:60" pos:end="309:66"><expr pos:start="309:60" pos:end="309:66"><name pos:start="309:60" pos:end="309:66">readfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="309:70" pos:end="313:25">{<block_content pos:start="311:29" pos:end="311:43">

                            <expr_stmt pos:start="311:29" pos:end="311:43"><expr pos:start="311:29" pos:end="311:42"><call pos:start="311:29" pos:end="311:42"><name pos:start="311:29" pos:end="311:38">sorecvfrom</name><argument_list pos:start="311:39" pos:end="311:42">(<argument pos:start="311:40" pos:end="311:41"><expr pos:start="311:40" pos:end="311:41"><name pos:start="311:40" pos:end="311:41">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

		</block_content>}</block></for>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="321:9" pos:end="325:11">/*

	 * See if we can start outputting

	 */</comment>

	<if_stmt pos:start="327:9" pos:end="329:22"><if pos:start="327:9" pos:end="329:22">if <condition pos:start="327:12" pos:end="327:33">(<expr pos:start="327:13" pos:end="327:32"><name pos:start="327:13" pos:end="327:21">if_queued</name> <operator pos:start="327:23" pos:end="327:24">&amp;&amp;</operator> <name pos:start="327:26" pos:end="327:32">link_up</name></expr>)</condition><block type="pseudo" pos:start="329:12" pos:end="329:22"><block_content pos:start="329:12" pos:end="329:22">

	   <expr_stmt pos:start="329:12" pos:end="329:22"><expr pos:start="329:12" pos:end="329:21"><call pos:start="329:12" pos:end="329:21"><name pos:start="329:12" pos:end="329:19">if_start</name><argument_list pos:start="329:20" pos:end="329:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="333:9" pos:end="341:11">/* clear global file descriptor sets.

	 * these reside on the stack in vl.c

	 * so they're unusable if we're not in

	 * slirp_select_fill or slirp_select_poll.

	 */</comment>

	 <expr_stmt pos:start="343:10" pos:end="343:31"><expr pos:start="343:10" pos:end="343:30"><name pos:start="343:10" pos:end="343:23">global_readfds</name> <operator pos:start="343:25" pos:end="343:25">=</operator> <name pos:start="343:27" pos:end="343:30">NULL</name></expr>;</expr_stmt>

	 <expr_stmt pos:start="345:10" pos:end="345:32"><expr pos:start="345:10" pos:end="345:31"><name pos:start="345:10" pos:end="345:24">global_writefds</name> <operator pos:start="345:26" pos:end="345:26">=</operator> <name pos:start="345:28" pos:end="345:31">NULL</name></expr>;</expr_stmt>

	 <expr_stmt pos:start="347:10" pos:end="347:28"><expr pos:start="347:10" pos:end="347:27"><name pos:start="347:10" pos:end="347:20">global_xfds</name> <operator pos:start="347:22" pos:end="347:22">=</operator> <name pos:start="347:24" pos:end="347:27">NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
