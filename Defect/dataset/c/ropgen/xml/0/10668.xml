<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10668.c" pos:tabs="8"><function pos:start="1:1" pos:end="323:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_svq1_block</name> <parameter_list pos:start="1:30" pos:end="1:90">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:42">bit_buffer_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">bitbuf</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:67"><decl pos:start="1:53" pos:end="1:67"><type pos:start="1:53" pos:end="1:67"><name pos:start="1:53" pos:end="1:59">uint8_t</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:67">pixels</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:78"><decl pos:start="1:70" pos:end="1:78"><type pos:start="1:70" pos:end="1:78"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:78">pitch</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:89"><decl pos:start="1:81" pos:end="1:89"><type pos:start="1:81" pos:end="1:89"><name pos:start="1:81" pos:end="1:83">int</name></type> <name pos:start="1:85" pos:end="1:89">intra</name></decl></parameter>)</parameter_list> <block pos:start="1:92" pos:end="323:1">{<block_content pos:start="3:3" pos:end="321:11">

  <decl_stmt pos:start="3:3" pos:end="3:24"><decl pos:start="3:3" pos:end="3:23"><type pos:start="3:3" pos:end="3:10"><name pos:start="3:3" pos:end="3:10">uint32_t</name></type>    <name pos:start="3:15" pos:end="3:23">bit_cache</name></decl>;</decl_stmt>

  <decl_stmt pos:start="5:3" pos:end="5:18"><decl pos:start="5:3" pos:end="5:17"><type pos:start="5:3" pos:end="5:14"><name pos:start="5:3" pos:end="5:12">vlc_code_t</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">vlc</name></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:23"><decl pos:start="7:3" pos:end="7:22"><type pos:start="7:3" pos:end="7:14"><name pos:start="7:3" pos:end="7:9">uint8_t</name>    <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22"><name pos:start="7:15" pos:end="7:18">list</name><index pos:start="7:19" pos:end="7:22">[<expr pos:start="7:20" pos:end="7:21"><literal type="number" pos:start="7:20" pos:end="7:21">63</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:18"><decl pos:start="9:3" pos:end="9:17"><type pos:start="9:3" pos:end="9:14"><name pos:start="9:3" pos:end="9:10">uint32_t</name>   <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">dst</name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:23"><decl pos:start="11:3" pos:end="11:22"><type pos:start="11:3" pos:end="11:14"><name pos:start="11:3" pos:end="11:10">uint32_t</name>   <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">codebook</name></decl>;</decl_stmt>

  <decl_stmt pos:start="13:3" pos:end="13:25"><decl pos:start="13:3" pos:end="13:24"><type pos:start="13:3" pos:end="13:5"><name pos:start="13:3" pos:end="13:5">int</name></type>	      <name pos:start="13:15" pos:end="13:24"><name pos:start="13:15" pos:end="13:21">entries</name><index pos:start="13:22" pos:end="13:24">[<expr pos:start="13:23" pos:end="13:23"><literal type="number" pos:start="13:23" pos:end="13:23">6</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="15:3" pos:end="15:25"><decl pos:start="15:3" pos:end="15:15"><type pos:start="15:3" pos:end="15:5"><name pos:start="15:3" pos:end="15:5">int</name></type>	      <name pos:start="15:15" pos:end="15:15">i</name></decl>, <decl pos:start="15:18" pos:end="15:18"><type ref="prev" pos:start="15:3" pos:end="15:5"/><name pos:start="15:18" pos:end="15:18">j</name></decl>, <decl pos:start="15:21" pos:end="15:21"><type ref="prev" pos:start="15:3" pos:end="15:5"/><name pos:start="15:21" pos:end="15:21">m</name></decl>, <decl pos:start="15:24" pos:end="15:24"><type ref="prev" pos:start="15:3" pos:end="15:5"/><name pos:start="15:24" pos:end="15:24">n</name></decl>;</decl_stmt>

  <decl_stmt pos:start="17:3" pos:end="17:27"><decl pos:start="17:3" pos:end="17:18"><type pos:start="17:3" pos:end="17:5"><name pos:start="17:3" pos:end="17:5">int</name></type>	      <name pos:start="17:15" pos:end="17:18">mean</name></decl>, <decl pos:start="17:21" pos:end="17:26"><type ref="prev" pos:start="17:3" pos:end="17:5"/><name pos:start="17:21" pos:end="17:26">stages</name></decl>;</decl_stmt>

  <decl_stmt pos:start="19:3" pos:end="19:41"><decl pos:start="19:3" pos:end="19:15"><type pos:start="19:3" pos:end="19:5"><name pos:start="19:3" pos:end="19:5">int</name></type>	      <name pos:start="19:15" pos:end="19:15">x</name></decl>, <decl pos:start="19:18" pos:end="19:18"><type ref="prev" pos:start="19:3" pos:end="19:5"/><name pos:start="19:18" pos:end="19:18">y</name></decl>, <decl pos:start="19:21" pos:end="19:25"><type ref="prev" pos:start="19:3" pos:end="19:5"/><name pos:start="19:21" pos:end="19:25">width</name></decl>, <decl pos:start="19:28" pos:end="19:33"><type ref="prev" pos:start="19:3" pos:end="19:5"/><name pos:start="19:28" pos:end="19:33">height</name></decl>, <decl pos:start="19:36" pos:end="19:40"><type ref="prev" pos:start="19:3" pos:end="19:5"/><name pos:start="19:36" pos:end="19:40">level</name></decl>;</decl_stmt>

  <decl_stmt pos:start="21:3" pos:end="21:29"><decl pos:start="21:3" pos:end="21:16"><type pos:start="21:3" pos:end="21:10"><name pos:start="21:3" pos:end="21:10">uint32_t</name></type>    <name pos:start="21:15" pos:end="21:16">n1</name></decl>, <decl pos:start="21:19" pos:end="21:20"><type ref="prev" pos:start="21:3" pos:end="21:10"/><name pos:start="21:19" pos:end="21:20">n2</name></decl>, <decl pos:start="21:23" pos:end="21:24"><type ref="prev" pos:start="21:3" pos:end="21:10"/><name pos:start="21:23" pos:end="21:24">n3</name></decl>, <decl pos:start="21:27" pos:end="21:28"><type ref="prev" pos:start="21:3" pos:end="21:10"/><name pos:start="21:27" pos:end="21:28">n4</name></decl>;</decl_stmt>



  <comment type="block" pos:start="25:3" pos:end="25:63">/* initialize list for breadth first processing of vectors */</comment>

  <expr_stmt pos:start="27:3" pos:end="27:19"><expr pos:start="27:3" pos:end="27:18"><name pos:start="27:3" pos:end="27:9"><name pos:start="27:3" pos:end="27:6">list</name><index pos:start="27:7" pos:end="27:9">[<expr pos:start="27:8" pos:end="27:8"><literal type="number" pos:start="27:8" pos:end="27:8">0</literal></expr>]</index></name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:18">pixels</name></expr>;</expr_stmt>



  <comment type="block" pos:start="31:3" pos:end="31:34">/* recursively process vector */</comment>

  <for pos:start="33:3" pos:end="317:3">for <control pos:start="33:7" pos:end="33:42">(<init pos:start="33:8" pos:end="33:30"><expr pos:start="33:8" pos:end="33:10"><name pos:start="33:8" pos:end="33:8">i</name><operator pos:start="33:9" pos:end="33:9">=</operator><literal type="number" pos:start="33:10" pos:end="33:10">0</literal></expr><operator pos:start="33:11" pos:end="33:11">,</operator> <expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:13">m</name><operator pos:start="33:14" pos:end="33:14">=</operator><literal type="number" pos:start="33:15" pos:end="33:15">1</literal></expr><operator pos:start="33:16" pos:end="33:16">,</operator> <expr pos:start="33:18" pos:end="33:20"><name pos:start="33:18" pos:end="33:18">n</name><operator pos:start="33:19" pos:end="33:19">=</operator><literal type="number" pos:start="33:20" pos:end="33:20">1</literal></expr><operator pos:start="33:21" pos:end="33:21">,</operator> <expr pos:start="33:23" pos:end="33:29"><name pos:start="33:23" pos:end="33:27">level</name><operator pos:start="33:28" pos:end="33:28">=</operator><literal type="number" pos:start="33:29" pos:end="33:29">5</literal></expr>;</init> <condition pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:36"><name pos:start="33:32" pos:end="33:32">i</name> <operator pos:start="33:34" pos:end="33:34">&lt;</operator> <name pos:start="33:36" pos:end="33:36">n</name></expr>;</condition> <incr pos:start="33:39" pos:end="33:41"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:39">i</name><operator pos:start="33:40" pos:end="33:41">++</operator></expr></incr>)</control> <block pos:start="33:44" pos:end="317:3">{<block_content pos:start="35:5" pos:end="315:5">

    <for pos:start="35:5" pos:end="69:5">for <control pos:start="35:9" pos:end="35:26">(<init pos:start="35:10" pos:end="35:10">;</init> <condition pos:start="35:12" pos:end="35:21"><expr pos:start="35:12" pos:end="35:20"><name pos:start="35:12" pos:end="35:16">level</name> <operator pos:start="35:18" pos:end="35:18">&gt;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</condition> <incr pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:23">i</name><operator pos:start="35:24" pos:end="35:25">++</operator></expr></incr>)</control> <block pos:start="35:28" pos:end="69:5">{<block_content pos:start="41:7" pos:end="67:77">



      <comment type="block" pos:start="39:7" pos:end="39:30">/* process next depth */</comment>

      <if_stmt pos:start="41:7" pos:end="51:7"><if pos:start="41:7" pos:end="51:7">if <condition pos:start="41:10" pos:end="41:17">(<expr pos:start="41:11" pos:end="41:16"><name pos:start="41:11" pos:end="41:11">i</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <name pos:start="41:16" pos:end="41:16">m</name></expr>)</condition> <block pos:start="41:19" pos:end="51:7">{<block_content pos:start="43:9" pos:end="49:16">

	<expr_stmt pos:start="43:9" pos:end="43:14"><expr pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">m</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <name pos:start="43:13" pos:end="43:13">n</name></expr>;</expr_stmt>



	<if_stmt pos:start="47:9" pos:end="49:16"><if pos:start="47:9" pos:end="49:16">if <condition pos:start="47:12" pos:end="47:25">(<expr pos:start="47:13" pos:end="47:24"><operator pos:start="47:13" pos:end="47:14">--</operator><name pos:start="47:15" pos:end="47:19">level</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>)</condition><block type="pseudo" pos:start="49:11" pos:end="49:16"><block_content pos:start="49:11" pos:end="49:16">

	  <break pos:start="49:11" pos:end="49:16">break;</break></block_content></block></if></if_stmt>

      </block_content>}</block></if></if_stmt>



      <comment type="block" pos:start="55:7" pos:end="55:40">/* divide block if next bit set */</comment>

      <if_stmt pos:start="57:7" pos:end="59:14"><if pos:start="57:7" pos:end="59:14">if <condition pos:start="57:10" pos:end="57:36">(<expr pos:start="57:11" pos:end="57:35"><call pos:start="57:11" pos:end="57:30"><name pos:start="57:11" pos:end="57:18">get_bits</name> <argument_list pos:start="57:20" pos:end="57:30">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">bitbuf</name></expr></argument>, <argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><literal type="number" pos:start="57:29" pos:end="57:29">1</literal></expr></argument>)</argument_list></call> <operator pos:start="57:32" pos:end="57:33">==</operator> <literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:14"><block_content pos:start="59:9" pos:end="59:14">

	<break pos:start="59:9" pos:end="59:14">break;</break></block_content></block></if></if_stmt>



      <comment type="block" pos:start="63:7" pos:end="63:27">/* add child nodes */</comment>

      <expr_stmt pos:start="65:7" pos:end="65:26"><expr pos:start="65:7" pos:end="65:25"><name pos:start="65:7" pos:end="65:15"><name pos:start="65:7" pos:end="65:10">list</name><index pos:start="65:11" pos:end="65:15">[<expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:12">n</name><operator pos:start="65:13" pos:end="65:14">++</operator></expr>]</index></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:25"><name pos:start="65:19" pos:end="65:22">list</name><index pos:start="65:23" pos:end="65:25">[<expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">i</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="67:7" pos:end="67:77"><expr pos:start="67:7" pos:end="67:76"><name pos:start="67:7" pos:end="67:15"><name pos:start="67:7" pos:end="67:10">list</name><index pos:start="67:11" pos:end="67:15">[<expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:12">n</name><operator pos:start="67:13" pos:end="67:14">++</operator></expr>]</index></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:25"><name pos:start="67:19" pos:end="67:22">list</name><index pos:start="67:23" pos:end="67:25">[<expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">i</name></expr>]</index></name> <operator pos:start="67:27" pos:end="67:27">+</operator> <operator pos:start="67:29" pos:end="67:29">(</operator><operator pos:start="67:30" pos:end="67:30">(</operator><ternary pos:start="67:31" pos:end="67:53"><condition pos:start="67:31" pos:end="67:43"><expr pos:start="67:31" pos:end="67:41"><operator pos:start="67:31" pos:end="67:31">(</operator><name pos:start="67:32" pos:end="67:36">level</name> <operator pos:start="67:38" pos:end="67:38">&amp;</operator> <literal type="number" pos:start="67:40" pos:end="67:40">1</literal><operator pos:start="67:41" pos:end="67:41">)</operator></expr> ?</condition><then pos:start="67:45" pos:end="67:49"> <expr pos:start="67:45" pos:end="67:49"><name pos:start="67:45" pos:end="67:49">pitch</name></expr> </then><else pos:start="67:51" pos:end="67:53">: <expr pos:start="67:53" pos:end="67:53"><literal type="number" pos:start="67:53" pos:end="67:53">1</literal></expr></else></ternary><operator pos:start="67:54" pos:end="67:54">)</operator> <operator pos:start="67:56" pos:end="67:57">&lt;&lt;</operator> <operator pos:start="67:59" pos:end="67:59">(</operator><operator pos:start="67:60" pos:end="67:60">(</operator><name pos:start="67:61" pos:end="67:65">level</name> <operator pos:start="67:67" pos:end="67:67">/</operator> <literal type="number" pos:start="67:69" pos:end="67:69">2</literal><operator pos:start="67:70" pos:end="67:70">)</operator> <operator pos:start="67:72" pos:end="67:72">+</operator> <literal type="number" pos:start="67:74" pos:end="67:74">1</literal><operator pos:start="67:75" pos:end="67:75">)</operator><operator pos:start="67:76" pos:end="67:76">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="73:5" pos:end="73:45">/* destination address and vector size */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:7">dst</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <operator pos:start="75:11" pos:end="75:11">(</operator><name pos:start="75:12" pos:end="75:19">uint32_t</name> <operator pos:start="75:21" pos:end="75:21">*</operator><operator pos:start="75:22" pos:end="75:22">)</operator> <name pos:start="75:24" pos:end="75:30"><name pos:start="75:24" pos:end="75:27">list</name><index pos:start="75:28" pos:end="75:30">[<expr pos:start="75:29" pos:end="75:29"><name pos:start="75:29" pos:end="75:29">i</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:9">width</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <literal type="number" pos:start="77:13" pos:end="77:13">1</literal> <operator pos:start="77:15" pos:end="77:16">&lt;&lt;</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><operator pos:start="77:19" pos:end="77:19">(</operator><literal type="number" pos:start="77:20" pos:end="77:22">4</literal> <operator pos:start="77:22" pos:end="77:22">+</operator> <name pos:start="77:24" pos:end="77:28">level</name><operator pos:start="77:29" pos:end="77:29">)</operator> <operator pos:start="77:31" pos:end="77:31">/</operator><literal type="number" pos:start="77:32" pos:end="77:32">2</literal><operator pos:start="77:33" pos:end="77:33">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:35"><expr pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:10">height</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">1</literal> <operator pos:start="79:16" pos:end="79:17">&lt;&lt;</operator> <operator pos:start="79:19" pos:end="79:19">(</operator><operator pos:start="79:20" pos:end="79:20">(</operator><literal type="number" pos:start="79:21" pos:end="79:23">3</literal> <operator pos:start="79:23" pos:end="79:23">+</operator> <name pos:start="79:25" pos:end="79:29">level</name><operator pos:start="79:30" pos:end="79:30">)</operator> <operator pos:start="79:32" pos:end="79:32">/</operator><literal type="number" pos:start="79:33" pos:end="79:33">2</literal><operator pos:start="79:34" pos:end="79:34">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:65">/* get number of stages (-1 skips vector, 0 for mean only) */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:39"><expr pos:start="85:5" pos:end="85:38"><name pos:start="85:5" pos:end="85:13">bit_cache</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:38"><name pos:start="85:17" pos:end="85:29">get_bit_cache</name> <argument_list pos:start="85:31" pos:end="85:38">(<argument pos:start="85:32" pos:end="85:37"><expr pos:start="85:32" pos:end="85:37"><name pos:start="85:32" pos:end="85:37">bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="95:63"><if pos:start="89:5" pos:end="91:63">if <condition pos:start="89:8" pos:end="89:14">(<expr pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:13">intra</name></expr>)</condition><block type="pseudo" pos:start="91:7" pos:end="91:63"><block_content pos:start="91:7" pos:end="91:63">

      <expr_stmt pos:start="91:7" pos:end="91:63"><expr pos:start="91:7" pos:end="91:62"><name pos:start="91:7" pos:end="91:9">vlc</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <operator pos:start="91:13" pos:end="91:13">&amp;</operator><name pos:start="91:14" pos:end="91:62"><name pos:start="91:14" pos:end="91:32">intra_vector_tables</name><index pos:start="91:33" pos:end="91:39">[<expr pos:start="91:34" pos:end="91:38"><name pos:start="91:34" pos:end="91:38">level</name></expr>]</index><index pos:start="91:40" pos:end="91:62">[<expr pos:start="91:41" pos:end="91:61"><name pos:start="91:41" pos:end="91:49">bit_cache</name> <operator pos:start="91:51" pos:end="91:52">&gt;&gt;</operator> <operator pos:start="91:54" pos:end="91:54">(</operator><literal type="number" pos:start="91:55" pos:end="91:58">32</literal> <operator pos:start="91:58" pos:end="91:58">-</operator> <literal type="number" pos:start="91:60" pos:end="91:60">7</literal><operator pos:start="91:61" pos:end="91:61">)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="93:5" pos:end="95:63">else<block type="pseudo" pos:start="95:7" pos:end="95:63"><block_content pos:start="95:7" pos:end="95:63">

      <expr_stmt pos:start="95:7" pos:end="95:63"><expr pos:start="95:7" pos:end="95:62"><name pos:start="95:7" pos:end="95:9">vlc</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <operator pos:start="95:13" pos:end="95:13">&amp;</operator><name pos:start="95:14" pos:end="95:62"><name pos:start="95:14" pos:end="95:32">inter_vector_tables</name><index pos:start="95:33" pos:end="95:39">[<expr pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:38">level</name></expr>]</index><index pos:start="95:40" pos:end="95:62">[<expr pos:start="95:41" pos:end="95:61"><name pos:start="95:41" pos:end="95:49">bit_cache</name> <operator pos:start="95:51" pos:end="95:52">&gt;&gt;</operator> <operator pos:start="95:54" pos:end="95:54">(</operator><literal type="number" pos:start="95:55" pos:end="95:58">32</literal> <operator pos:start="95:58" pos:end="95:58">-</operator> <literal type="number" pos:start="95:60" pos:end="95:60">6</literal><operator pos:start="95:61" pos:end="95:61">)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:20">/* flush bits */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:33"><expr pos:start="101:5" pos:end="101:32"><name pos:start="101:5" pos:end="101:10">stages</name>	    <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:32"><name pos:start="101:23" pos:end="101:25">vlc</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:32">value</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:34"><expr pos:start="103:5" pos:end="103:33"><call pos:start="103:5" pos:end="103:33"><name pos:start="103:5" pos:end="103:13">skip_bits</name><argument_list pos:start="103:14" pos:end="103:33">(<argument pos:start="103:15" pos:end="103:20"><expr pos:start="103:15" pos:end="103:20"><name pos:start="103:15" pos:end="103:20">bitbuf</name></expr></argument>,<argument pos:start="103:22" pos:end="103:32"><expr pos:start="103:22" pos:end="103:32"><name pos:start="103:22" pos:end="103:32"><name pos:start="103:22" pos:end="103:24">vlc</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:32">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="121:5"><if pos:start="107:5" pos:end="121:5">if <condition pos:start="107:8" pos:end="107:21">(<expr pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:14">stages</name> <operator pos:start="107:16" pos:end="107:17">==</operator> <operator pos:start="107:19" pos:end="107:19">-</operator><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>)</condition> <block pos:start="107:23" pos:end="121:5">{<block_content pos:start="109:7" pos:end="119:15">

      <if_stmt pos:start="109:7" pos:end="117:7"><if pos:start="109:7" pos:end="117:7">if <condition pos:start="109:10" pos:end="109:16">(<expr pos:start="109:11" pos:end="109:15"><name pos:start="109:11" pos:end="109:15">intra</name></expr>)</condition> <block pos:start="109:18" pos:end="117:7">{<block_content pos:start="111:9" pos:end="115:9">

	<for pos:start="111:9" pos:end="115:9">for <control pos:start="111:13" pos:end="111:34">(<init pos:start="111:14" pos:end="111:17"><expr pos:start="111:14" pos:end="111:16"><name pos:start="111:14" pos:end="111:14">y</name><operator pos:start="111:15" pos:end="111:15">=</operator><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr>;</init> <condition pos:start="111:19" pos:end="111:29"><expr pos:start="111:19" pos:end="111:28"><name pos:start="111:19" pos:end="111:19">y</name> <operator pos:start="111:21" pos:end="111:21">&lt;</operator> <name pos:start="111:23" pos:end="111:28">height</name></expr>;</condition> <incr pos:start="111:31" pos:end="111:33"><expr pos:start="111:31" pos:end="111:33"><name pos:start="111:31" pos:end="111:31">y</name><operator pos:start="111:32" pos:end="111:33">++</operator></expr></incr>)</control> <block pos:start="111:36" pos:end="115:9">{<block_content pos:start="113:11" pos:end="113:49">

	  <expr_stmt pos:start="113:11" pos:end="113:49"><expr pos:start="113:11" pos:end="113:48"><call pos:start="113:11" pos:end="113:48"><name pos:start="113:11" pos:end="113:16">memset</name> <argument_list pos:start="113:18" pos:end="113:48">(<argument pos:start="113:19" pos:end="113:37"><expr pos:start="113:19" pos:end="113:37"><operator pos:start="113:19" pos:end="113:19">&amp;</operator><name pos:start="113:20" pos:end="113:37"><name pos:start="113:20" pos:end="113:22">dst</name><index pos:start="113:23" pos:end="113:37">[<expr pos:start="113:24" pos:end="113:36"><name pos:start="113:24" pos:end="113:24">y</name><operator pos:start="113:25" pos:end="113:25">*</operator><operator pos:start="113:26" pos:end="113:26">(</operator><name pos:start="113:27" pos:end="113:31">pitch</name> <operator pos:start="113:33" pos:end="113:33">/</operator> <literal type="number" pos:start="113:35" pos:end="113:35">4</literal><operator pos:start="113:36" pos:end="113:36">)</operator></expr>]</index></name></expr></argument>, <argument pos:start="113:40" pos:end="113:40"><expr pos:start="113:40" pos:end="113:40"><literal type="number" pos:start="113:40" pos:end="113:40">0</literal></expr></argument>, <argument pos:start="113:43" pos:end="113:47"><expr pos:start="113:43" pos:end="113:47"><name pos:start="113:43" pos:end="113:47">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></for>

      </block_content>}</block></if></if_stmt>

      <continue pos:start="119:7" pos:end="119:15">continue;</continue>		<comment type="block" pos:start="119:25" pos:end="119:41">/* skip vector */</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="135:5"><if pos:start="125:5" pos:end="135:5">if <condition pos:start="125:8" pos:end="125:37">(<expr pos:start="125:9" pos:end="125:36"><operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:15">stages</name> <operator pos:start="125:17" pos:end="125:17">&gt;</operator> <literal type="number" pos:start="125:19" pos:end="125:19">0</literal><operator pos:start="125:20" pos:end="125:20">)</operator> <operator pos:start="125:22" pos:end="125:23">&amp;&amp;</operator> <operator pos:start="125:25" pos:end="125:25">(</operator><name pos:start="125:26" pos:end="125:30">level</name> <operator pos:start="125:32" pos:end="125:33">&gt;=</operator> <literal type="number" pos:start="125:35" pos:end="125:35">4</literal><operator pos:start="125:36" pos:end="125:36">)</operator></expr>)</condition> <block pos:start="125:39" pos:end="135:5">{<block_content pos:start="129:5" pos:end="133:16">

<cpp:ifdef pos:start="127:1" pos:end="127:17">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:17">DEBUG_SVQ1</name></cpp:ifdef>

    <expr_stmt pos:start="129:5" pos:end="132:0"><expr pos:start="129:5" pos:end="129:90"><call pos:start="129:5" pos:end="129:90"><name pos:start="129:5" pos:end="129:10">printf</name><argument_list pos:start="129:11" pos:end="129:90">(<argument pos:start="129:12" pos:end="129:76"><expr pos:start="129:12" pos:end="129:76"><literal type="string" pos:start="129:12" pos:end="129:76">"Error (decode_svq1_block): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,<argument pos:start="129:78" pos:end="129:83"><expr pos:start="129:78" pos:end="129:83"><name pos:start="129:78" pos:end="129:83">stages</name></expr></argument>,<argument pos:start="129:85" pos:end="129:89"><expr pos:start="129:85" pos:end="129:89"><name pos:start="129:85" pos:end="129:89">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

      <return pos:start="133:7" pos:end="133:16">return <expr pos:start="133:14" pos:end="133:15"><operator pos:start="133:14" pos:end="133:14">-</operator><literal type="number" pos:start="133:15" pos:end="133:15">1</literal></expr>;</return>	<comment type="block" pos:start="133:25" pos:end="133:44">/* invalid vector */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:35">/* get mean value for vector */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:39"><expr pos:start="141:5" pos:end="141:38"><name pos:start="141:5" pos:end="141:13">bit_cache</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <call pos:start="141:17" pos:end="141:38"><name pos:start="141:17" pos:end="141:29">get_bit_cache</name> <argument_list pos:start="141:31" pos:end="141:38">(<argument pos:start="141:32" pos:end="141:37"><expr pos:start="141:32" pos:end="141:37"><name pos:start="141:32" pos:end="141:37">bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="189:5"><if pos:start="145:5" pos:end="163:5">if <condition pos:start="145:8" pos:end="145:14">(<expr pos:start="145:9" pos:end="145:13"><name pos:start="145:9" pos:end="145:13">intra</name></expr>)</condition> <block pos:start="145:16" pos:end="163:5">{<block_content pos:start="147:7" pos:end="161:58">

      <if_stmt pos:start="147:7" pos:end="161:58"><if pos:start="147:7" pos:end="149:64">if <condition pos:start="147:10" pos:end="147:34">(<expr pos:start="147:11" pos:end="147:33"><name pos:start="147:11" pos:end="147:19">bit_cache</name> <operator pos:start="147:21" pos:end="147:22">&gt;=</operator> <literal type="number" pos:start="147:24" pos:end="147:33">0x25000000</literal></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:64"><block_content pos:start="149:9" pos:end="149:64">

	<expr_stmt pos:start="149:9" pos:end="149:64"><expr pos:start="149:9" pos:end="149:63"><name pos:start="149:9" pos:end="149:11">vlc</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <operator pos:start="149:15" pos:end="149:15">&amp;</operator><name pos:start="149:16" pos:end="149:63"><name pos:start="149:16" pos:end="149:33">intra_mean_table_0</name><index pos:start="149:34" pos:end="149:63">[<expr pos:start="149:35" pos:end="149:62"><operator pos:start="149:35" pos:end="149:35">(</operator><name pos:start="149:36" pos:end="149:44">bit_cache</name> <operator pos:start="149:46" pos:end="149:47">&gt;&gt;</operator> <operator pos:start="149:49" pos:end="149:49">(</operator><literal type="number" pos:start="149:50" pos:end="149:53">32</literal> <operator pos:start="149:53" pos:end="149:53">-</operator> <literal type="number" pos:start="149:55" pos:end="149:55">8</literal><operator pos:start="149:56" pos:end="149:56">)</operator><operator pos:start="149:57" pos:end="149:57">)</operator> <operator pos:start="149:59" pos:end="149:59">-</operator> <literal type="number" pos:start="149:61" pos:end="149:62">37</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="151:7" pos:end="153:65">else if <condition pos:start="151:15" pos:end="151:39">(<expr pos:start="151:16" pos:end="151:38"><name pos:start="151:16" pos:end="151:24">bit_cache</name> <operator pos:start="151:26" pos:end="151:27">&gt;=</operator> <literal type="number" pos:start="151:29" pos:end="151:38">0x03400000</literal></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:65"><block_content pos:start="153:9" pos:end="153:65">

	<expr_stmt pos:start="153:9" pos:end="153:65"><expr pos:start="153:9" pos:end="153:64"><name pos:start="153:9" pos:end="153:11">vlc</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <operator pos:start="153:15" pos:end="153:15">&amp;</operator><name pos:start="153:16" pos:end="153:64"><name pos:start="153:16" pos:end="153:33">intra_mean_table_1</name><index pos:start="153:34" pos:end="153:64">[<expr pos:start="153:35" pos:end="153:63"><operator pos:start="153:35" pos:end="153:35">(</operator><name pos:start="153:36" pos:end="153:44">bit_cache</name> <operator pos:start="153:46" pos:end="153:47">&gt;&gt;</operator> <operator pos:start="153:49" pos:end="153:49">(</operator><literal type="number" pos:start="153:50" pos:end="153:53">32</literal> <operator pos:start="153:53" pos:end="153:53">-</operator> <literal type="number" pos:start="153:55" pos:end="153:56">10</literal><operator pos:start="153:57" pos:end="153:57">)</operator><operator pos:start="153:58" pos:end="153:58">)</operator> <operator pos:start="153:60" pos:end="153:60">-</operator> <literal type="number" pos:start="153:62" pos:end="153:63">13</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="155:7" pos:end="157:64">else if <condition pos:start="155:15" pos:end="155:39">(<expr pos:start="155:16" pos:end="155:38"><name pos:start="155:16" pos:end="155:24">bit_cache</name> <operator pos:start="155:26" pos:end="155:27">&gt;=</operator> <literal type="number" pos:start="155:29" pos:end="155:38">0x00040000</literal></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:64"><block_content pos:start="157:9" pos:end="157:64"> 

	<expr_stmt pos:start="157:9" pos:end="157:64"><expr pos:start="157:9" pos:end="157:63"><name pos:start="157:9" pos:end="157:11">vlc</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <operator pos:start="157:15" pos:end="157:15">&amp;</operator><name pos:start="157:16" pos:end="157:63"><name pos:start="157:16" pos:end="157:33">intra_mean_table_2</name><index pos:start="157:34" pos:end="157:63">[<expr pos:start="157:35" pos:end="157:62"><operator pos:start="157:35" pos:end="157:35">(</operator><name pos:start="157:36" pos:end="157:44">bit_cache</name> <operator pos:start="157:46" pos:end="157:47">&gt;&gt;</operator> <operator pos:start="157:49" pos:end="157:49">(</operator><literal type="number" pos:start="157:50" pos:end="157:53">32</literal> <operator pos:start="157:53" pos:end="157:53">-</operator> <literal type="number" pos:start="157:55" pos:end="157:56">14</literal><operator pos:start="157:57" pos:end="157:57">)</operator><operator pos:start="157:58" pos:end="157:58">)</operator> <operator pos:start="157:60" pos:end="157:60">-</operator> <literal type="number" pos:start="157:62" pos:end="157:62">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="159:7" pos:end="161:58">else<block type="pseudo" pos:start="161:9" pos:end="161:58"><block_content pos:start="161:9" pos:end="161:58">

	<expr_stmt pos:start="161:9" pos:end="161:58"><expr pos:start="161:9" pos:end="161:57"><name pos:start="161:9" pos:end="161:11">vlc</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">&amp;</operator><name pos:start="161:16" pos:end="161:57"><name pos:start="161:16" pos:end="161:33">intra_mean_table_3</name><index pos:start="161:34" pos:end="161:57">[<expr pos:start="161:35" pos:end="161:56"><name pos:start="161:35" pos:end="161:43">bit_cache</name> <operator pos:start="161:45" pos:end="161:46">&gt;&gt;</operator> <operator pos:start="161:48" pos:end="161:48">(</operator><literal type="number" pos:start="161:49" pos:end="161:52">32</literal> <operator pos:start="161:52" pos:end="161:52">-</operator> <literal type="number" pos:start="161:54" pos:end="161:55">20</literal><operator pos:start="161:56" pos:end="161:56">)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="189:5">else <block pos:start="163:12" pos:end="189:5">{<block_content pos:start="165:7" pos:end="187:58">

      <if_stmt pos:start="165:7" pos:end="187:58"><if pos:start="165:7" pos:end="167:64">if <condition pos:start="165:10" pos:end="165:34">(<expr pos:start="165:11" pos:end="165:33"><name pos:start="165:11" pos:end="165:19">bit_cache</name> <operator pos:start="165:21" pos:end="165:22">&gt;=</operator> <literal type="number" pos:start="165:24" pos:end="165:33">0x0B000000</literal></expr>)</condition><block type="pseudo" pos:start="167:9" pos:end="167:64"><block_content pos:start="167:9" pos:end="167:64">

	<expr_stmt pos:start="167:9" pos:end="167:64"><expr pos:start="167:9" pos:end="167:63"><name pos:start="167:9" pos:end="167:11">vlc</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <operator pos:start="167:15" pos:end="167:15">&amp;</operator><name pos:start="167:16" pos:end="167:63"><name pos:start="167:16" pos:end="167:33">inter_mean_table_0</name><index pos:start="167:34" pos:end="167:63">[<expr pos:start="167:35" pos:end="167:62"><operator pos:start="167:35" pos:end="167:35">(</operator><name pos:start="167:36" pos:end="167:44">bit_cache</name> <operator pos:start="167:46" pos:end="167:47">&gt;&gt;</operator> <operator pos:start="167:49" pos:end="167:49">(</operator><literal type="number" pos:start="167:50" pos:end="167:53">32</literal> <operator pos:start="167:53" pos:end="167:53">-</operator> <literal type="number" pos:start="167:55" pos:end="167:55">8</literal><operator pos:start="167:56" pos:end="167:56">)</operator><operator pos:start="167:57" pos:end="167:57">)</operator> <operator pos:start="167:59" pos:end="167:59">-</operator> <literal type="number" pos:start="167:61" pos:end="167:62">11</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="169:7" pos:end="171:65">else if <condition pos:start="169:15" pos:end="169:39">(<expr pos:start="169:16" pos:end="169:38"><name pos:start="169:16" pos:end="169:24">bit_cache</name> <operator pos:start="169:26" pos:end="169:27">&gt;=</operator> <literal type="number" pos:start="169:29" pos:end="169:38">0x01200000</literal></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:65"><block_content pos:start="171:9" pos:end="171:65">

	<expr_stmt pos:start="171:9" pos:end="171:65"><expr pos:start="171:9" pos:end="171:64"><name pos:start="171:9" pos:end="171:11">vlc</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <operator pos:start="171:15" pos:end="171:15">&amp;</operator><name pos:start="171:16" pos:end="171:64"><name pos:start="171:16" pos:end="171:33">inter_mean_table_1</name><index pos:start="171:34" pos:end="171:64">[<expr pos:start="171:35" pos:end="171:63"><operator pos:start="171:35" pos:end="171:35">(</operator><name pos:start="171:36" pos:end="171:44">bit_cache</name> <operator pos:start="171:46" pos:end="171:47">&gt;&gt;</operator> <operator pos:start="171:49" pos:end="171:49">(</operator><literal type="number" pos:start="171:50" pos:end="171:53">32</literal> <operator pos:start="171:53" pos:end="171:53">-</operator> <literal type="number" pos:start="171:55" pos:end="171:56">12</literal><operator pos:start="171:57" pos:end="171:57">)</operator><operator pos:start="171:58" pos:end="171:58">)</operator> <operator pos:start="171:60" pos:end="171:60">-</operator> <literal type="number" pos:start="171:62" pos:end="171:63">18</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="173:7" pos:end="175:65">else if <condition pos:start="173:15" pos:end="173:39">(<expr pos:start="173:16" pos:end="173:38"><name pos:start="173:16" pos:end="173:24">bit_cache</name> <operator pos:start="173:26" pos:end="173:27">&gt;=</operator> <literal type="number" pos:start="173:29" pos:end="173:38">0x002E0000</literal></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:65"><block_content pos:start="175:9" pos:end="175:65"> 

	<expr_stmt pos:start="175:9" pos:end="175:65"><expr pos:start="175:9" pos:end="175:64"><name pos:start="175:9" pos:end="175:11">vlc</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <operator pos:start="175:15" pos:end="175:15">&amp;</operator><name pos:start="175:16" pos:end="175:64"><name pos:start="175:16" pos:end="175:33">inter_mean_table_2</name><index pos:start="175:34" pos:end="175:64">[<expr pos:start="175:35" pos:end="175:63"><operator pos:start="175:35" pos:end="175:35">(</operator><name pos:start="175:36" pos:end="175:44">bit_cache</name> <operator pos:start="175:46" pos:end="175:47">&gt;&gt;</operator> <operator pos:start="175:49" pos:end="175:49">(</operator><literal type="number" pos:start="175:50" pos:end="175:53">32</literal> <operator pos:start="175:53" pos:end="175:53">-</operator> <literal type="number" pos:start="175:55" pos:end="175:56">15</literal><operator pos:start="175:57" pos:end="175:57">)</operator><operator pos:start="175:58" pos:end="175:58">)</operator> <operator pos:start="175:60" pos:end="175:60">-</operator> <literal type="number" pos:start="175:62" pos:end="175:63">23</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="177:7" pos:end="179:65">else if <condition pos:start="177:15" pos:end="177:39">(<expr pos:start="177:16" pos:end="177:38"><name pos:start="177:16" pos:end="177:24">bit_cache</name> <operator pos:start="177:26" pos:end="177:27">&gt;=</operator> <literal type="number" pos:start="177:29" pos:end="177:38">0x00094000</literal></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="179:65"><block_content pos:start="179:9" pos:end="179:65">

	<expr_stmt pos:start="179:9" pos:end="179:65"><expr pos:start="179:9" pos:end="179:64"><name pos:start="179:9" pos:end="179:11">vlc</name> <operator pos:start="179:13" pos:end="179:13">=</operator> <operator pos:start="179:15" pos:end="179:15">&amp;</operator><name pos:start="179:16" pos:end="179:64"><name pos:start="179:16" pos:end="179:33">inter_mean_table_3</name><index pos:start="179:34" pos:end="179:64">[<expr pos:start="179:35" pos:end="179:63"><operator pos:start="179:35" pos:end="179:35">(</operator><name pos:start="179:36" pos:end="179:44">bit_cache</name> <operator pos:start="179:46" pos:end="179:47">&gt;&gt;</operator> <operator pos:start="179:49" pos:end="179:49">(</operator><literal type="number" pos:start="179:50" pos:end="179:53">32</literal> <operator pos:start="179:53" pos:end="179:53">-</operator> <literal type="number" pos:start="179:55" pos:end="179:56">18</literal><operator pos:start="179:57" pos:end="179:57">)</operator><operator pos:start="179:58" pos:end="179:58">)</operator> <operator pos:start="179:60" pos:end="179:60">-</operator> <literal type="number" pos:start="179:62" pos:end="179:63">37</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="181:7" pos:end="183:65">else if <condition pos:start="181:15" pos:end="181:39">(<expr pos:start="181:16" pos:end="181:38"><name pos:start="181:16" pos:end="181:24">bit_cache</name> <operator pos:start="181:26" pos:end="181:27">&gt;=</operator> <literal type="number" pos:start="181:29" pos:end="181:38">0x00049000</literal></expr>)</condition><block type="pseudo" pos:start="183:9" pos:end="183:65"><block_content pos:start="183:9" pos:end="183:65">

	<expr_stmt pos:start="183:9" pos:end="183:65"><expr pos:start="183:9" pos:end="183:64"><name pos:start="183:9" pos:end="183:11">vlc</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <operator pos:start="183:15" pos:end="183:15">&amp;</operator><name pos:start="183:16" pos:end="183:64"><name pos:start="183:16" pos:end="183:33">inter_mean_table_4</name><index pos:start="183:34" pos:end="183:64">[<expr pos:start="183:35" pos:end="183:63"><operator pos:start="183:35" pos:end="183:35">(</operator><name pos:start="183:36" pos:end="183:44">bit_cache</name> <operator pos:start="183:46" pos:end="183:47">&gt;&gt;</operator> <operator pos:start="183:49" pos:end="183:49">(</operator><literal type="number" pos:start="183:50" pos:end="183:53">32</literal> <operator pos:start="183:53" pos:end="183:53">-</operator> <literal type="number" pos:start="183:55" pos:end="183:56">20</literal><operator pos:start="183:57" pos:end="183:57">)</operator><operator pos:start="183:58" pos:end="183:58">)</operator> <operator pos:start="183:60" pos:end="183:60">-</operator> <literal type="number" pos:start="183:62" pos:end="183:63">73</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="185:7" pos:end="187:58">else<block type="pseudo" pos:start="187:9" pos:end="187:58"><block_content pos:start="187:9" pos:end="187:58">

	<expr_stmt pos:start="187:9" pos:end="187:58"><expr pos:start="187:9" pos:end="187:57"><name pos:start="187:9" pos:end="187:11">vlc</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <operator pos:start="187:15" pos:end="187:15">&amp;</operator><name pos:start="187:16" pos:end="187:57"><name pos:start="187:16" pos:end="187:33">inter_mean_table_5</name><index pos:start="187:34" pos:end="187:57">[<expr pos:start="187:35" pos:end="187:56"><name pos:start="187:35" pos:end="187:43">bit_cache</name> <operator pos:start="187:45" pos:end="187:46">&gt;&gt;</operator> <operator pos:start="187:48" pos:end="187:48">(</operator><literal type="number" pos:start="187:49" pos:end="187:52">32</literal> <operator pos:start="187:52" pos:end="187:52">-</operator> <literal type="number" pos:start="187:54" pos:end="187:55">22</literal><operator pos:start="187:56" pos:end="187:56">)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="193:5" pos:end="193:20">/* flush bits */</comment>

    <expr_stmt pos:start="195:5" pos:end="195:33"><expr pos:start="195:5" pos:end="195:32"><name pos:start="195:5" pos:end="195:8">mean</name>	    <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:32"><name pos:start="195:23" pos:end="195:25">vlc</name><operator pos:start="195:26" pos:end="195:27">-&gt;</operator><name pos:start="195:28" pos:end="195:32">value</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:34"><expr pos:start="197:5" pos:end="197:33"><call pos:start="197:5" pos:end="197:33"><name pos:start="197:5" pos:end="197:13">skip_bits</name><argument_list pos:start="197:14" pos:end="197:33">(<argument pos:start="197:15" pos:end="197:20"><expr pos:start="197:15" pos:end="197:20"><name pos:start="197:15" pos:end="197:20">bitbuf</name></expr></argument>,<argument pos:start="197:22" pos:end="197:32"><expr pos:start="197:22" pos:end="197:32"><name pos:start="197:22" pos:end="197:32"><name pos:start="197:22" pos:end="197:24">vlc</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:32">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="315:5"><if pos:start="201:5" pos:end="209:5">if <condition pos:start="201:8" pos:end="201:29">(<expr pos:start="201:9" pos:end="201:28"><name pos:start="201:9" pos:end="201:13">intra</name> <operator pos:start="201:15" pos:end="201:16">&amp;&amp;</operator> <name pos:start="201:18" pos:end="201:23">stages</name> <operator pos:start="201:25" pos:end="201:26">==</operator> <literal type="number" pos:start="201:28" pos:end="201:28">0</literal></expr>)</condition> <block pos:start="201:31" pos:end="209:5">{<block_content pos:start="203:7" pos:end="207:7">

      <for pos:start="203:7" pos:end="207:7">for <control pos:start="203:11" pos:end="203:32">(<init pos:start="203:12" pos:end="203:15"><expr pos:start="203:12" pos:end="203:14"><name pos:start="203:12" pos:end="203:12">y</name><operator pos:start="203:13" pos:end="203:13">=</operator><literal type="number" pos:start="203:14" pos:end="203:14">0</literal></expr>;</init> <condition pos:start="203:17" pos:end="203:27"><expr pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:17">y</name> <operator pos:start="203:19" pos:end="203:19">&lt;</operator> <name pos:start="203:21" pos:end="203:26">height</name></expr>;</condition> <incr pos:start="203:29" pos:end="203:31"><expr pos:start="203:29" pos:end="203:31"><name pos:start="203:29" pos:end="203:29">y</name><operator pos:start="203:30" pos:end="203:31">++</operator></expr></incr>)</control> <block pos:start="203:34" pos:end="207:7">{<block_content pos:start="205:9" pos:end="205:50">

	<expr_stmt pos:start="205:9" pos:end="205:50"><expr pos:start="205:9" pos:end="205:49"><call pos:start="205:9" pos:end="205:49"><name pos:start="205:9" pos:end="205:14">memset</name> <argument_list pos:start="205:16" pos:end="205:49">(<argument pos:start="205:17" pos:end="205:35"><expr pos:start="205:17" pos:end="205:35"><operator pos:start="205:17" pos:end="205:17">&amp;</operator><name pos:start="205:18" pos:end="205:35"><name pos:start="205:18" pos:end="205:20">dst</name><index pos:start="205:21" pos:end="205:35">[<expr pos:start="205:22" pos:end="205:34"><name pos:start="205:22" pos:end="205:22">y</name><operator pos:start="205:23" pos:end="205:23">*</operator><operator pos:start="205:24" pos:end="205:24">(</operator><name pos:start="205:25" pos:end="205:29">pitch</name> <operator pos:start="205:31" pos:end="205:31">/</operator> <literal type="number" pos:start="205:33" pos:end="205:33">4</literal><operator pos:start="205:34" pos:end="205:34">)</operator></expr>]</index></name></expr></argument>, <argument pos:start="205:38" pos:end="205:41"><expr pos:start="205:38" pos:end="205:41"><name pos:start="205:38" pos:end="205:41">mean</name></expr></argument>, <argument pos:start="205:44" pos:end="205:48"><expr pos:start="205:44" pos:end="205:48"><name pos:start="205:44" pos:end="205:48">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="209:7" pos:end="315:5">else <block pos:start="209:12" pos:end="315:5">{<block_content pos:start="211:7" pos:end="313:7">

      <expr_stmt pos:start="211:7" pos:end="211:88"><expr pos:start="211:7" pos:end="211:87"><name pos:start="211:7" pos:end="211:14">codebook</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <operator pos:start="211:18" pos:end="211:18">(</operator><name pos:start="211:19" pos:end="211:26">uint32_t</name> <operator pos:start="211:28" pos:end="211:28">*</operator><operator pos:start="211:29" pos:end="211:29">)</operator> <operator pos:start="211:31" pos:end="211:31">(</operator><ternary pos:start="211:32" pos:end="211:86"><condition pos:start="211:32" pos:end="211:38"><expr pos:start="211:32" pos:end="211:36"><name pos:start="211:32" pos:end="211:36">intra</name></expr> ?</condition><then pos:start="211:40" pos:end="211:61"> <expr pos:start="211:40" pos:end="211:61"><name pos:start="211:40" pos:end="211:61"><name pos:start="211:40" pos:end="211:54">intra_codebooks</name><index pos:start="211:55" pos:end="211:61">[<expr pos:start="211:56" pos:end="211:60"><name pos:start="211:56" pos:end="211:60">level</name></expr>]</index></name></expr> </then><else pos:start="211:63" pos:end="211:86">: <expr pos:start="211:65" pos:end="211:86"><name pos:start="211:65" pos:end="211:86"><name pos:start="211:65" pos:end="211:79">inter_codebooks</name><index pos:start="211:80" pos:end="211:86">[<expr pos:start="211:81" pos:end="211:85"><name pos:start="211:81" pos:end="211:85">level</name></expr>]</index></name></expr></else></ternary><operator pos:start="211:87" pos:end="211:87">)</operator></expr>;</expr_stmt>

      <expr_stmt pos:start="213:7" pos:end="213:46"><expr pos:start="213:7" pos:end="213:45"><name pos:start="213:7" pos:end="213:15">bit_cache</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <call pos:start="213:19" pos:end="213:45"><name pos:start="213:19" pos:end="213:26">get_bits</name> <argument_list pos:start="213:28" pos:end="213:45">(<argument pos:start="213:29" pos:end="213:34"><expr pos:start="213:29" pos:end="213:34"><name pos:start="213:29" pos:end="213:34">bitbuf</name></expr></argument>, <argument pos:start="213:37" pos:end="213:44"><expr pos:start="213:37" pos:end="213:44"><literal type="number" pos:start="213:37" pos:end="213:37">4</literal><operator pos:start="213:38" pos:end="213:38">*</operator><name pos:start="213:39" pos:end="213:44">stages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <comment type="block" pos:start="217:7" pos:end="217:54">/* calculate codebook entries for this vector */</comment>

      <for pos:start="219:7" pos:end="223:7">for <control pos:start="219:11" pos:end="219:32">(<init pos:start="219:12" pos:end="219:15"><expr pos:start="219:12" pos:end="219:14"><name pos:start="219:12" pos:end="219:12">j</name><operator pos:start="219:13" pos:end="219:13">=</operator><literal type="number" pos:start="219:14" pos:end="219:14">0</literal></expr>;</init> <condition pos:start="219:17" pos:end="219:27"><expr pos:start="219:17" pos:end="219:26"><name pos:start="219:17" pos:end="219:17">j</name> <operator pos:start="219:19" pos:end="219:19">&lt;</operator> <name pos:start="219:21" pos:end="219:26">stages</name></expr>;</condition> <incr pos:start="219:29" pos:end="219:31"><expr pos:start="219:29" pos:end="219:31"><name pos:start="219:29" pos:end="219:29">j</name><operator pos:start="219:30" pos:end="219:31">++</operator></expr></incr>)</control> <block pos:start="219:34" pos:end="223:7">{<block_content pos:start="221:9" pos:end="221:89">

	<expr_stmt pos:start="221:9" pos:end="221:89"><expr pos:start="221:9" pos:end="221:88"><name pos:start="221:9" pos:end="221:18"><name pos:start="221:9" pos:end="221:15">entries</name><index pos:start="221:16" pos:end="221:18">[<expr pos:start="221:17" pos:end="221:17"><name pos:start="221:17" pos:end="221:17">j</name></expr>]</index></name> <operator pos:start="221:20" pos:end="221:20">=</operator> <operator pos:start="221:22" pos:end="221:22">(</operator><operator pos:start="221:23" pos:end="221:23">(</operator><operator pos:start="221:24" pos:end="221:24">(</operator><name pos:start="221:25" pos:end="221:33">bit_cache</name> <operator pos:start="221:35" pos:end="221:36">&gt;&gt;</operator> <operator pos:start="221:38" pos:end="221:38">(</operator><literal type="number" pos:start="221:39" pos:end="221:39">4</literal><operator pos:start="221:40" pos:end="221:40">*</operator><operator pos:start="221:41" pos:end="221:41">(</operator><name pos:start="221:42" pos:end="221:47">stages</name> <operator pos:start="221:49" pos:end="221:49">-</operator> <name pos:start="221:51" pos:end="221:51">j</name> <operator pos:start="221:53" pos:end="221:53">-</operator> <literal type="number" pos:start="221:55" pos:end="221:55">1</literal><operator pos:start="221:56" pos:end="221:56">)</operator><operator pos:start="221:57" pos:end="221:57">)</operator><operator pos:start="221:58" pos:end="221:58">)</operator> <operator pos:start="221:60" pos:end="221:60">&amp;</operator> <literal type="number" pos:start="221:62" pos:end="221:64">0xF</literal><operator pos:start="221:65" pos:end="221:65">)</operator> <operator pos:start="221:67" pos:end="221:67">+</operator> <literal type="number" pos:start="221:69" pos:end="221:70">16</literal><operator pos:start="221:71" pos:end="221:71">*</operator><name pos:start="221:72" pos:end="221:72">j</name><operator pos:start="221:73" pos:end="221:73">)</operator> <operator pos:start="221:75" pos:end="221:76">&lt;&lt;</operator> <operator pos:start="221:78" pos:end="221:78">(</operator><name pos:start="221:79" pos:end="221:83">level</name> <operator pos:start="221:85" pos:end="221:85">+</operator> <literal type="number" pos:start="221:87" pos:end="221:87">1</literal><operator pos:start="221:88" pos:end="221:88">)</operator></expr>;</expr_stmt>

      </block_content>}</block></for>



      <expr_stmt pos:start="227:7" pos:end="227:29"><expr pos:start="227:7" pos:end="227:28"><name pos:start="227:7" pos:end="227:10">mean</name> <operator pos:start="227:12" pos:end="227:13">-=</operator> <operator pos:start="227:15" pos:end="227:15">(</operator><name pos:start="227:16" pos:end="227:21">stages</name> <operator pos:start="227:23" pos:end="227:23">*</operator> <literal type="number" pos:start="227:25" pos:end="227:27">128</literal><operator pos:start="227:28" pos:end="227:28">)</operator></expr>;</expr_stmt>

      <expr_stmt pos:start="229:7" pos:end="229:62"><expr pos:start="229:7" pos:end="229:61"><name pos:start="229:7" pos:end="229:8">n4</name>    <operator pos:start="229:13" pos:end="229:13">=</operator> <operator pos:start="229:15" pos:end="229:15">(</operator><operator pos:start="229:16" pos:end="229:16">(</operator><name pos:start="229:17" pos:end="229:20">mean</name> <operator pos:start="229:22" pos:end="229:22">+</operator> <operator pos:start="229:24" pos:end="229:24">(</operator><name pos:start="229:25" pos:end="229:28">mean</name> <operator pos:start="229:30" pos:end="229:31">&gt;&gt;</operator> <literal type="number" pos:start="229:33" pos:end="229:34">31</literal><operator pos:start="229:35" pos:end="229:35">)</operator><operator pos:start="229:36" pos:end="229:36">)</operator> <operator pos:start="229:38" pos:end="229:39">&lt;&lt;</operator> <literal type="number" pos:start="229:41" pos:end="229:42">16</literal><operator pos:start="229:43" pos:end="229:43">)</operator> <operator pos:start="229:45" pos:end="229:45">|</operator> <operator pos:start="229:47" pos:end="229:47">(</operator><name pos:start="229:48" pos:end="229:51">mean</name> <operator pos:start="229:53" pos:end="229:53">&amp;</operator> <literal type="number" pos:start="229:55" pos:end="229:60">0xFFFF</literal><operator pos:start="229:61" pos:end="229:61">)</operator></expr>;</expr_stmt>



      <for pos:start="233:7" pos:end="313:7">for <control pos:start="233:11" pos:end="233:32">(<init pos:start="233:12" pos:end="233:15"><expr pos:start="233:12" pos:end="233:14"><name pos:start="233:12" pos:end="233:12">y</name><operator pos:start="233:13" pos:end="233:13">=</operator><literal type="number" pos:start="233:14" pos:end="233:14">0</literal></expr>;</init> <condition pos:start="233:17" pos:end="233:27"><expr pos:start="233:17" pos:end="233:26"><name pos:start="233:17" pos:end="233:17">y</name> <operator pos:start="233:19" pos:end="233:19">&lt;</operator> <name pos:start="233:21" pos:end="233:26">height</name></expr>;</condition> <incr pos:start="233:29" pos:end="233:31"><expr pos:start="233:29" pos:end="233:31"><name pos:start="233:29" pos:end="233:29">y</name><operator pos:start="233:30" pos:end="233:31">++</operator></expr></incr>)</control> <block pos:start="233:34" pos:end="313:7">{<block_content pos:start="235:9" pos:end="311:27">

	<for pos:start="235:9" pos:end="307:9">for <control pos:start="235:13" pos:end="235:51">(<init pos:start="235:14" pos:end="235:17"><expr pos:start="235:14" pos:end="235:16"><name pos:start="235:14" pos:end="235:14">x</name><operator pos:start="235:15" pos:end="235:15">=</operator><literal type="number" pos:start="235:16" pos:end="235:16">0</literal></expr>;</init> <condition pos:start="235:19" pos:end="235:34"><expr pos:start="235:19" pos:end="235:33"><name pos:start="235:19" pos:end="235:19">x</name> <operator pos:start="235:21" pos:end="235:21">&lt;</operator> <operator pos:start="235:23" pos:end="235:23">(</operator><name pos:start="235:24" pos:end="235:28">width</name> <operator pos:start="235:30" pos:end="235:30">/</operator> <literal type="number" pos:start="235:32" pos:end="235:32">4</literal><operator pos:start="235:33" pos:end="235:33">)</operator></expr>;</condition> <incr pos:start="235:36" pos:end="235:50"><expr pos:start="235:36" pos:end="235:38"><name pos:start="235:36" pos:end="235:36">x</name><operator pos:start="235:37" pos:end="235:38">++</operator></expr><operator pos:start="235:39" pos:end="235:39">,</operator> <expr pos:start="235:41" pos:end="235:50"><name pos:start="235:41" pos:end="235:48">codebook</name><operator pos:start="235:49" pos:end="235:50">++</operator></expr></incr>)</control> <block pos:start="235:53" pos:end="307:9">{<block_content pos:start="237:11" pos:end="305:34">

	  <if_stmt pos:start="237:11" pos:end="255:11"><if pos:start="237:11" pos:end="243:11">if <condition pos:start="237:14" pos:end="237:20">(<expr pos:start="237:15" pos:end="237:19"><name pos:start="237:15" pos:end="237:19">intra</name></expr>)</condition> <block pos:start="237:22" pos:end="243:11">{<block_content pos:start="239:13" pos:end="241:20">

	    <expr_stmt pos:start="239:13" pos:end="239:20"><expr pos:start="239:13" pos:end="239:19"><name pos:start="239:13" pos:end="239:14">n1</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <name pos:start="239:18" pos:end="239:19">n4</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="241:13" pos:end="241:20"><expr pos:start="241:13" pos:end="241:19"><name pos:start="241:13" pos:end="241:14">n2</name> <operator pos:start="241:16" pos:end="241:16">=</operator> <name pos:start="241:18" pos:end="241:19">n4</name></expr>;</expr_stmt>

	  </block_content>}</block></if> <else pos:start="243:13" pos:end="255:11">else <block pos:start="243:18" pos:end="255:11">{<block_content pos:start="245:13" pos:end="253:47">

	    <expr_stmt pos:start="245:13" pos:end="245:24"><expr pos:start="245:13" pos:end="245:23"><name pos:start="245:13" pos:end="245:14">n3</name> <operator pos:start="245:16" pos:end="245:16">=</operator> <name pos:start="245:18" pos:end="245:23"><name pos:start="245:18" pos:end="245:20">dst</name><index pos:start="245:21" pos:end="245:23">[<expr pos:start="245:22" pos:end="245:22"><name pos:start="245:22" pos:end="245:22">x</name></expr>]</index></name></expr>;</expr_stmt>



	    <comment type="block" pos:start="249:13" pos:end="249:42">/* add mean value to vector */</comment>

	    <expr_stmt pos:start="251:13" pos:end="251:47"><expr pos:start="251:13" pos:end="251:46"><name pos:start="251:13" pos:end="251:14">n1</name> <operator pos:start="251:16" pos:end="251:16">=</operator> <operator pos:start="251:18" pos:end="251:18">(</operator><operator pos:start="251:19" pos:end="251:19">(</operator><name pos:start="251:20" pos:end="251:21">n3</name> <operator pos:start="251:23" pos:end="251:23">&amp;</operator> <literal type="number" pos:start="251:25" pos:end="251:34">0xFF00FF00</literal><operator pos:start="251:35" pos:end="251:35">)</operator> <operator pos:start="251:37" pos:end="251:38">&gt;&gt;</operator> <literal type="number" pos:start="251:40" pos:end="251:40">8</literal><operator pos:start="251:41" pos:end="251:41">)</operator> <operator pos:start="251:43" pos:end="251:43">+</operator> <name pos:start="251:45" pos:end="251:46">n4</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="253:13" pos:end="253:47"><expr pos:start="253:13" pos:end="253:46"><name pos:start="253:13" pos:end="253:14">n2</name> <operator pos:start="253:16" pos:end="253:16">=</operator>  <operator pos:start="253:19" pos:end="253:19">(</operator><name pos:start="253:20" pos:end="253:21">n3</name> <operator pos:start="253:23" pos:end="253:23">&amp;</operator> <literal type="number" pos:start="253:25" pos:end="253:34">0x00FF00FF</literal><operator pos:start="253:35" pos:end="253:35">)</operator>	  <operator pos:start="253:43" pos:end="253:43">+</operator> <name pos:start="253:45" pos:end="253:46">n4</name></expr>;</expr_stmt>

	  </block_content>}</block></else></if_stmt>



	  <comment type="block" pos:start="259:11" pos:end="259:46">/* add codebook entries to vector */</comment>

	  <for pos:start="261:11" pos:end="269:11">for <control pos:start="261:15" pos:end="261:36">(<init pos:start="261:16" pos:end="261:19"><expr pos:start="261:16" pos:end="261:18"><name pos:start="261:16" pos:end="261:16">j</name><operator pos:start="261:17" pos:end="261:17">=</operator><literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:31"><expr pos:start="261:21" pos:end="261:30"><name pos:start="261:21" pos:end="261:21">j</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <name pos:start="261:25" pos:end="261:30">stages</name></expr>;</condition> <incr pos:start="261:33" pos:end="261:35"><expr pos:start="261:33" pos:end="261:35"><name pos:start="261:33" pos:end="261:33">j</name><operator pos:start="261:34" pos:end="261:35">++</operator></expr></incr>)</control> <block pos:start="261:38" pos:end="269:11">{<block_content pos:start="263:13" pos:end="267:37">

	    <expr_stmt pos:start="263:13" pos:end="263:52"><expr pos:start="263:13" pos:end="263:51"><name pos:start="263:13" pos:end="263:14">n3</name>  <operator pos:start="263:17" pos:end="263:17">=</operator> <name pos:start="263:19" pos:end="263:38"><name pos:start="263:19" pos:end="263:26">codebook</name><index pos:start="263:27" pos:end="263:38">[<expr pos:start="263:28" pos:end="263:37"><name pos:start="263:28" pos:end="263:37"><name pos:start="263:28" pos:end="263:34">entries</name><index pos:start="263:35" pos:end="263:37">[<expr pos:start="263:36" pos:end="263:36"><name pos:start="263:36" pos:end="263:36">j</name></expr>]</index></name></expr>]</index></name> <operator pos:start="263:40" pos:end="263:40">^</operator> <literal type="number" pos:start="263:42" pos:end="263:51">0x80808080</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="265:13" pos:end="265:43"><expr pos:start="265:13" pos:end="265:42"><name pos:start="265:13" pos:end="265:14">n1</name> <operator pos:start="265:16" pos:end="265:17">+=</operator> <operator pos:start="265:19" pos:end="265:19">(</operator><operator pos:start="265:20" pos:end="265:20">(</operator><name pos:start="265:21" pos:end="265:22">n3</name> <operator pos:start="265:24" pos:end="265:24">&amp;</operator> <literal type="number" pos:start="265:26" pos:end="265:35">0xFF00FF00</literal><operator pos:start="265:36" pos:end="265:36">)</operator> <operator pos:start="265:38" pos:end="265:39">&gt;&gt;</operator> <literal type="number" pos:start="265:41" pos:end="265:41">8</literal><operator pos:start="265:42" pos:end="265:42">)</operator></expr>;</expr_stmt>

	    <expr_stmt pos:start="267:13" pos:end="267:37"><expr pos:start="267:13" pos:end="267:36"><name pos:start="267:13" pos:end="267:14">n2</name> <operator pos:start="267:16" pos:end="267:17">+=</operator>  <operator pos:start="267:20" pos:end="267:20">(</operator><name pos:start="267:21" pos:end="267:22">n3</name> <operator pos:start="267:24" pos:end="267:24">&amp;</operator> <literal type="number" pos:start="267:26" pos:end="267:35">0x00FF00FF</literal><operator pos:start="267:36" pos:end="267:36">)</operator></expr>;</expr_stmt>

	  </block_content>}</block></for>



	  <comment type="block" pos:start="273:11" pos:end="273:32">/* clip to [0..255] */</comment>

	  <if_stmt pos:start="275:11" pos:end="285:11"><if pos:start="275:11" pos:end="285:11">if <condition pos:start="275:14" pos:end="275:30">(<expr pos:start="275:15" pos:end="275:29"><name pos:start="275:15" pos:end="275:16">n1</name> <operator pos:start="275:18" pos:end="275:18">&amp;</operator> <literal type="number" pos:start="275:20" pos:end="275:29">0xFF00FF00</literal></expr>)</condition> <block pos:start="275:32" pos:end="285:11">{<block_content pos:start="277:13" pos:end="283:36">

	    <expr_stmt pos:start="277:13" pos:end="277:73"><expr pos:start="277:13" pos:end="277:72"><name pos:start="277:13" pos:end="277:14">n3</name>  <operator pos:start="277:17" pos:end="277:17">=</operator> <operator pos:start="277:19" pos:end="277:19">(</operator><operator pos:start="277:20" pos:end="277:20">(</operator><operator pos:start="277:21" pos:end="277:21">(</operator> <name pos:start="277:23" pos:end="277:24">n1</name> <operator pos:start="277:26" pos:end="277:27">&gt;&gt;</operator> <literal type="number" pos:start="277:29" pos:end="277:30">15</literal><operator pos:start="277:31" pos:end="277:31">)</operator> <operator pos:start="277:33" pos:end="277:33">&amp;</operator> <literal type="number" pos:start="277:35" pos:end="277:44">0x00010001</literal><operator pos:start="277:45" pos:end="277:45">)</operator> <operator pos:start="277:47" pos:end="277:47">|</operator> <literal type="number" pos:start="277:49" pos:end="277:58">0x01000100</literal><operator pos:start="277:59" pos:end="277:59">)</operator> <operator pos:start="277:61" pos:end="277:61">-</operator> <literal type="number" pos:start="277:63" pos:end="277:72">0x00010001</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="279:13" pos:end="279:29"><expr pos:start="279:13" pos:end="279:28"><name pos:start="279:13" pos:end="279:14">n1</name> <operator pos:start="279:16" pos:end="279:17">+=</operator> <literal type="number" pos:start="279:19" pos:end="279:28">0x7F007F00</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="281:13" pos:end="281:73"><expr pos:start="281:13" pos:end="281:72"><name pos:start="281:13" pos:end="281:14">n1</name> <operator pos:start="281:16" pos:end="281:17">|=</operator> <operator pos:start="281:19" pos:end="281:19">(</operator><operator pos:start="281:20" pos:end="281:20">(</operator><operator pos:start="281:21" pos:end="281:21">(</operator><operator pos:start="281:22" pos:end="281:22">~</operator><name pos:start="281:23" pos:end="281:24">n1</name> <operator pos:start="281:26" pos:end="281:27">&gt;&gt;</operator> <literal type="number" pos:start="281:29" pos:end="281:30">15</literal><operator pos:start="281:31" pos:end="281:31">)</operator> <operator pos:start="281:33" pos:end="281:33">&amp;</operator> <literal type="number" pos:start="281:35" pos:end="281:44">0x00010001</literal><operator pos:start="281:45" pos:end="281:45">)</operator> <operator pos:start="281:47" pos:end="281:47">|</operator> <literal type="number" pos:start="281:49" pos:end="281:58">0x01000100</literal><operator pos:start="281:59" pos:end="281:59">)</operator> <operator pos:start="281:61" pos:end="281:61">-</operator> <literal type="number" pos:start="281:63" pos:end="281:72">0x00010001</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="283:13" pos:end="283:36"><expr pos:start="283:13" pos:end="283:35"><name pos:start="283:13" pos:end="283:14">n1</name> <operator pos:start="283:16" pos:end="283:17">&amp;=</operator> <operator pos:start="283:19" pos:end="283:19">(</operator><name pos:start="283:20" pos:end="283:21">n3</name> <operator pos:start="283:23" pos:end="283:23">&amp;</operator> <literal type="number" pos:start="283:25" pos:end="283:34">0x00FF00FF</literal><operator pos:start="283:35" pos:end="283:35">)</operator></expr>;</expr_stmt>

	  </block_content>}</block></if></if_stmt>



	  <if_stmt pos:start="289:11" pos:end="299:11"><if pos:start="289:11" pos:end="299:11">if <condition pos:start="289:14" pos:end="289:30">(<expr pos:start="289:15" pos:end="289:29"><name pos:start="289:15" pos:end="289:16">n2</name> <operator pos:start="289:18" pos:end="289:18">&amp;</operator> <literal type="number" pos:start="289:20" pos:end="289:29">0xFF00FF00</literal></expr>)</condition> <block pos:start="289:32" pos:end="299:11">{<block_content pos:start="291:13" pos:end="297:36">

	    <expr_stmt pos:start="291:13" pos:end="291:73"><expr pos:start="291:13" pos:end="291:72"><name pos:start="291:13" pos:end="291:14">n3</name>  <operator pos:start="291:17" pos:end="291:17">=</operator> <operator pos:start="291:19" pos:end="291:19">(</operator><operator pos:start="291:20" pos:end="291:20">(</operator><operator pos:start="291:21" pos:end="291:21">(</operator> <name pos:start="291:23" pos:end="291:24">n2</name> <operator pos:start="291:26" pos:end="291:27">&gt;&gt;</operator> <literal type="number" pos:start="291:29" pos:end="291:30">15</literal><operator pos:start="291:31" pos:end="291:31">)</operator> <operator pos:start="291:33" pos:end="291:33">&amp;</operator> <literal type="number" pos:start="291:35" pos:end="291:44">0x00010001</literal><operator pos:start="291:45" pos:end="291:45">)</operator> <operator pos:start="291:47" pos:end="291:47">|</operator> <literal type="number" pos:start="291:49" pos:end="291:58">0x01000100</literal><operator pos:start="291:59" pos:end="291:59">)</operator> <operator pos:start="291:61" pos:end="291:61">-</operator> <literal type="number" pos:start="291:63" pos:end="291:72">0x00010001</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="293:13" pos:end="293:29"><expr pos:start="293:13" pos:end="293:28"><name pos:start="293:13" pos:end="293:14">n2</name> <operator pos:start="293:16" pos:end="293:17">+=</operator> <literal type="number" pos:start="293:19" pos:end="293:28">0x7F007F00</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="295:13" pos:end="295:73"><expr pos:start="295:13" pos:end="295:72"><name pos:start="295:13" pos:end="295:14">n2</name> <operator pos:start="295:16" pos:end="295:17">|=</operator> <operator pos:start="295:19" pos:end="295:19">(</operator><operator pos:start="295:20" pos:end="295:20">(</operator><operator pos:start="295:21" pos:end="295:21">(</operator><operator pos:start="295:22" pos:end="295:22">~</operator><name pos:start="295:23" pos:end="295:24">n2</name> <operator pos:start="295:26" pos:end="295:27">&gt;&gt;</operator> <literal type="number" pos:start="295:29" pos:end="295:30">15</literal><operator pos:start="295:31" pos:end="295:31">)</operator> <operator pos:start="295:33" pos:end="295:33">&amp;</operator> <literal type="number" pos:start="295:35" pos:end="295:44">0x00010001</literal><operator pos:start="295:45" pos:end="295:45">)</operator> <operator pos:start="295:47" pos:end="295:47">|</operator> <literal type="number" pos:start="295:49" pos:end="295:58">0x01000100</literal><operator pos:start="295:59" pos:end="295:59">)</operator> <operator pos:start="295:61" pos:end="295:61">-</operator> <literal type="number" pos:start="295:63" pos:end="295:72">0x00010001</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="297:13" pos:end="297:36"><expr pos:start="297:13" pos:end="297:35"><name pos:start="297:13" pos:end="297:14">n2</name> <operator pos:start="297:16" pos:end="297:17">&amp;=</operator> <operator pos:start="297:19" pos:end="297:19">(</operator><name pos:start="297:20" pos:end="297:21">n3</name> <operator pos:start="297:23" pos:end="297:23">&amp;</operator> <literal type="number" pos:start="297:25" pos:end="297:34">0x00FF00FF</literal><operator pos:start="297:35" pos:end="297:35">)</operator></expr>;</expr_stmt>

	  </block_content>}</block></if></if_stmt>



	  <comment type="block" pos:start="303:11" pos:end="303:28">/* store result */</comment>

	  <expr_stmt pos:start="305:11" pos:end="305:34"><expr pos:start="305:11" pos:end="305:33"><name pos:start="305:11" pos:end="305:16"><name pos:start="305:11" pos:end="305:13">dst</name><index pos:start="305:14" pos:end="305:16">[<expr pos:start="305:15" pos:end="305:15"><name pos:start="305:15" pos:end="305:15">x</name></expr>]</index></name> <operator pos:start="305:18" pos:end="305:18">=</operator> <operator pos:start="305:20" pos:end="305:20">(</operator><name pos:start="305:21" pos:end="305:22">n1</name> <operator pos:start="305:24" pos:end="305:25">&lt;&lt;</operator> <literal type="number" pos:start="305:27" pos:end="305:27">8</literal><operator pos:start="305:28" pos:end="305:28">)</operator> <operator pos:start="305:30" pos:end="305:30">|</operator> <name pos:start="305:32" pos:end="305:33">n2</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="311:9" pos:end="311:27"><expr pos:start="311:9" pos:end="311:26"><name pos:start="311:9" pos:end="311:11">dst</name> <operator pos:start="311:13" pos:end="311:14">+=</operator> <operator pos:start="311:16" pos:end="311:16">(</operator><name pos:start="311:17" pos:end="311:21">pitch</name> <operator pos:start="311:23" pos:end="311:23">/</operator> <literal type="number" pos:start="311:25" pos:end="311:25">4</literal><operator pos:start="311:26" pos:end="311:26">)</operator></expr>;</expr_stmt>

      </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

  </block_content>}</block></for>



  <return pos:start="321:3" pos:end="321:11">return <expr pos:start="321:10" pos:end="321:10"><literal type="number" pos:start="321:10" pos:end="321:10">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
