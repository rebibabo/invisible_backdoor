<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13962.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">usbredir_control_packet</name><parameter_list pos:start="1:36" pos:end="5:32">(<parameter pos:start="1:37" pos:end="1:46"><decl pos:start="1:37" pos:end="1:46"><type pos:start="1:37" pos:end="1:46"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">priv</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:59">id</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:58"><decl pos:start="3:5" pos:end="3:58"><type pos:start="3:5" pos:end="3:58"><name pos:start="3:5" pos:end="3:42"><name pos:start="3:5" pos:end="3:10">struct</name> <name pos:start="3:12" pos:end="3:42">usb_redir_control_packet_header</name></name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:58">control_packet</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:17">data</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:31"><decl pos:start="5:20" pos:end="5:31"><type pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:22">int</name></type> <name pos:start="5:24" pos:end="5:31">data_len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">USBRedirDevice</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">dev</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">priv</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name> <init pos:start="11:13" pos:end="11:36">= <expr pos:start="11:15" pos:end="11:36"><name pos:start="11:15" pos:end="11:36"><name pos:start="11:15" pos:end="11:28">control_packet</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:36">length</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">AsyncURB</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">aurb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:21"><expr pos:start="17:5" pos:end="19:20"><call pos:start="17:5" pos:end="19:20"><name pos:start="17:5" pos:end="17:11">DPRINTF</name><argument_list pos:start="17:12" pos:end="19:20">(<argument pos:start="17:13" pos:end="17:46"><expr pos:start="17:13" pos:end="17:46"><literal type="string" pos:start="17:13" pos:end="17:46">"ctrl-in status %d len %d id %u\n"</literal></expr></argument>, <argument pos:start="17:49" pos:end="17:70"><expr pos:start="17:49" pos:end="17:70"><name pos:start="17:49" pos:end="17:70"><name pos:start="17:49" pos:end="17:62">control_packet</name><operator pos:start="17:63" pos:end="17:64">-&gt;</operator><name pos:start="17:65" pos:end="17:70">status</name></name></expr></argument>,

            <argument pos:start="19:13" pos:end="19:15"><expr pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">len</name></expr></argument>, <argument pos:start="19:18" pos:end="19:19"><expr pos:start="19:18" pos:end="19:19"><name pos:start="19:18" pos:end="19:19">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:8">aurb</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:30"><name pos:start="23:12" pos:end="23:21">async_find</name><argument_list pos:start="23:22" pos:end="23:30">(<argument pos:start="23:23" pos:end="23:25"><expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">dev</name></expr></argument>, <argument pos:start="23:28" pos:end="23:29"><expr pos:start="23:28" pos:end="23:29"><name pos:start="23:28" pos:end="23:29">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:14">(<expr pos:start="25:9" pos:end="25:13"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:13">aurb</name></expr>)</condition> <block pos:start="25:16" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:19"><expr pos:start="27:9" pos:end="27:18"><call pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:12">free</name><argument_list pos:start="27:13" pos:end="27:18">(<argument pos:start="27:14" pos:end="27:17"><expr pos:start="27:14" pos:end="27:17"><name pos:start="27:14" pos:end="27:17">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:57"><expr pos:start="35:5" pos:end="35:56"><name pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:8">aurb</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:24">control_packet</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:31">status</name></name> <operator pos:start="35:33" pos:end="35:33">=</operator> <name pos:start="35:35" pos:end="35:56"><name pos:start="35:35" pos:end="35:48">control_packet</name><operator pos:start="35:49" pos:end="35:50">-&gt;</operator><name pos:start="35:51" pos:end="35:56">status</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:57"><expr pos:start="37:5" pos:end="37:56"><name pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:8">aurb</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:24">control_packet</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:31">length</name></name> <operator pos:start="37:33" pos:end="37:33">=</operator> <name pos:start="37:35" pos:end="37:56"><name pos:start="37:35" pos:end="37:48">control_packet</name><operator pos:start="37:49" pos:end="37:50">-&gt;</operator><name pos:start="37:51" pos:end="37:56">length</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="41:40">(<expr pos:start="39:9" pos:end="41:39"><call pos:start="39:9" pos:end="41:39"><name pos:start="39:9" pos:end="39:14">memcmp</name><argument_list pos:start="39:15" pos:end="41:39">(<argument pos:start="39:16" pos:end="39:36"><expr pos:start="39:16" pos:end="39:36"><operator pos:start="39:16" pos:end="39:16">&amp;</operator><name pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:20">aurb</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:36">control_packet</name></name></expr></argument>, <argument pos:start="39:39" pos:end="39:52"><expr pos:start="39:39" pos:end="39:52"><name pos:start="39:39" pos:end="39:52">control_packet</name></expr></argument>,

               <argument pos:start="41:16" pos:end="41:38"><expr pos:start="41:16" pos:end="41:38"><sizeof pos:start="41:16" pos:end="41:38">sizeof<argument_list pos:start="41:22" pos:end="41:38">(<argument pos:start="41:23" pos:end="41:37"><expr pos:start="41:23" pos:end="41:37"><operator pos:start="41:23" pos:end="41:23">*</operator><name pos:start="41:24" pos:end="41:37">control_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:42" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:26">

        <expr_stmt pos:start="43:9" pos:end="43:71"><expr pos:start="43:9" pos:end="43:70"><call pos:start="43:9" pos:end="43:70"><name pos:start="43:9" pos:end="43:13">ERROR</name><argument_list pos:start="43:14" pos:end="43:70">(<argument pos:start="43:15" pos:end="43:69"><expr pos:start="43:15" pos:end="43:69"><literal type="string" pos:start="43:15" pos:end="43:69">"return control packet mismatch, please report this!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:11">len</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:25">USB_RET_NAK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="79:5"><if pos:start="51:5" pos:end="79:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:12">aurb</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:20">packet</name></name></expr>)</condition> <block pos:start="51:23" pos:end="79:5">{<block_content pos:start="53:9" pos:end="77:65">

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:11">len</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:70"><name pos:start="53:15" pos:end="53:36">usbredir_handle_status</name><argument_list pos:start="53:37" pos:end="53:70">(<argument pos:start="53:38" pos:end="53:40"><expr pos:start="53:38" pos:end="53:40"><name pos:start="53:38" pos:end="53:40">dev</name></expr></argument>, <argument pos:start="53:43" pos:end="53:64"><expr pos:start="53:43" pos:end="53:64"><name pos:start="53:43" pos:end="53:64"><name pos:start="53:43" pos:end="53:56">control_packet</name><operator pos:start="53:57" pos:end="53:58">-&gt;</operator><name pos:start="53:59" pos:end="53:64">status</name></name></expr></argument>, <argument pos:start="53:67" pos:end="53:69"><expr pos:start="53:67" pos:end="53:69"><name pos:start="53:67" pos:end="53:69">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="73:9"><if pos:start="55:9" pos:end="73:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">len</name> <operator pos:start="55:17" pos:end="55:17">&gt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="73:9">{<block_content pos:start="57:13" pos:end="71:13">

            <expr_stmt pos:start="57:13" pos:end="57:68"><expr pos:start="57:13" pos:end="57:67"><call pos:start="57:13" pos:end="57:67"><name pos:start="57:13" pos:end="57:29">usbredir_log_data</name><argument_list pos:start="57:30" pos:end="57:67">(<argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">dev</name></expr></argument>, <argument pos:start="57:36" pos:end="57:50"><expr pos:start="57:36" pos:end="57:50"><literal type="string" pos:start="57:36" pos:end="57:50">"ctrl data in:"</literal></expr></argument>, <argument pos:start="57:53" pos:end="57:56"><expr pos:start="57:53" pos:end="57:56"><name pos:start="57:53" pos:end="57:56">data</name></expr></argument>, <argument pos:start="57:59" pos:end="57:66"><expr pos:start="57:59" pos:end="57:66"><name pos:start="57:59" pos:end="57:66">data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="71:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:54">(<expr pos:start="59:17" pos:end="59:53"><name pos:start="59:17" pos:end="59:24">data_len</name> <operator pos:start="59:26" pos:end="59:27">&lt;=</operator> <sizeof pos:start="59:29" pos:end="59:53">sizeof<argument_list pos:start="59:35" pos:end="59:53">(<argument pos:start="59:36" pos:end="59:52"><expr pos:start="59:36" pos:end="59:52"><name pos:start="59:36" pos:end="59:52"><name pos:start="59:36" pos:end="59:38">dev</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:43">dev</name><operator pos:start="59:44" pos:end="59:44">.</operator><name pos:start="59:45" pos:end="59:52">data_buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="59:56" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:58">

                <expr_stmt pos:start="61:17" pos:end="61:58"><expr pos:start="61:17" pos:end="61:57"><call pos:start="61:17" pos:end="61:57"><name pos:start="61:17" pos:end="61:22">memcpy</name><argument_list pos:start="61:23" pos:end="61:57">(<argument pos:start="61:24" pos:end="61:40"><expr pos:start="61:24" pos:end="61:40"><name pos:start="61:24" pos:end="61:40"><name pos:start="61:24" pos:end="61:26">dev</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:31">dev</name><operator pos:start="61:32" pos:end="61:32">.</operator><name pos:start="61:33" pos:end="61:40">data_buf</name></name></expr></argument>, <argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">data</name></expr></argument>, <argument pos:start="61:49" pos:end="61:56"><expr pos:start="61:49" pos:end="61:56"><name pos:start="61:49" pos:end="61:56">data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="63:15" pos:end="71:13">else <block pos:start="63:20" pos:end="71:13">{<block_content pos:start="65:17" pos:end="69:36">

                <expr_stmt pos:start="65:17" pos:end="67:59"><expr pos:start="65:17" pos:end="67:58"><call pos:start="65:17" pos:end="67:58"><name pos:start="65:17" pos:end="65:21">ERROR</name><argument_list pos:start="65:22" pos:end="67:58">(<argument pos:start="65:23" pos:end="65:58"><expr pos:start="65:23" pos:end="65:58"><literal type="string" pos:start="65:23" pos:end="65:58">"ctrl buffer too small (%d &gt; %zu)\n"</literal></expr></argument>,

                      <argument pos:start="67:23" pos:end="67:30"><expr pos:start="67:23" pos:end="67:30"><name pos:start="67:23" pos:end="67:30">data_len</name></expr></argument>, <argument pos:start="67:33" pos:end="67:57"><expr pos:start="67:33" pos:end="67:57"><sizeof pos:start="67:33" pos:end="67:57">sizeof<argument_list pos:start="67:39" pos:end="67:57">(<argument pos:start="67:40" pos:end="67:56"><expr pos:start="67:40" pos:end="67:56"><name pos:start="67:40" pos:end="67:56"><name pos:start="67:40" pos:end="67:42">dev</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:47">dev</name><operator pos:start="67:48" pos:end="67:48">.</operator><name pos:start="67:49" pos:end="67:56">data_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:36"><expr pos:start="69:17" pos:end="69:35"><name pos:start="69:17" pos:end="69:19">len</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:35">USB_RET_STALL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:12">aurb</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:20">packet</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:28">result</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:34">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:65"><expr pos:start="77:9" pos:end="77:64"><call pos:start="77:9" pos:end="77:64"><name pos:start="77:9" pos:end="77:39">usb_generic_async_ctrl_complete</name><argument_list pos:start="77:40" pos:end="77:64">(<argument pos:start="77:41" pos:end="77:49"><expr pos:start="77:41" pos:end="77:49"><operator pos:start="77:41" pos:end="77:41">&amp;</operator><name pos:start="77:42" pos:end="77:49"><name pos:start="77:42" pos:end="77:44">dev</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:49">dev</name></name></expr></argument>, <argument pos:start="77:52" pos:end="77:63"><expr pos:start="77:52" pos:end="77:63"><name pos:start="77:52" pos:end="77:63"><name pos:start="77:52" pos:end="77:55">aurb</name><operator pos:start="77:56" pos:end="77:57">-&gt;</operator><name pos:start="77:58" pos:end="77:63">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><call pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:14">async_free</name><argument_list pos:start="81:15" pos:end="81:25">(<argument pos:start="81:16" pos:end="81:18"><expr pos:start="81:16" pos:end="81:18"><name pos:start="81:16" pos:end="81:18">dev</name></expr></argument>, <argument pos:start="81:21" pos:end="81:24"><expr pos:start="81:21" pos:end="81:24"><name pos:start="81:21" pos:end="81:24">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:15"><expr pos:start="83:5" pos:end="83:14"><call pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:8">free</name><argument_list pos:start="83:9" pos:end="83:14">(<argument pos:start="83:10" pos:end="83:13"><expr pos:start="83:10" pos:end="83:13"><name pos:start="83:10" pos:end="83:13">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
