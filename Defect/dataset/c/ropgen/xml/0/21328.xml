<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21328.c" pos:tabs="8"><function pos:start="1:1" pos:end="363:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vp3_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:61">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">buf</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="363:1">{<block_content pos:start="9:5" pos:end="361:20">

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">Vp3DecodeContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:14"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:14">int</name></type> <name pos:start="13:16" pos:end="13:22">counter</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:17">init_get_bits</name><argument_list pos:start="19:18" pos:end="19:41">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:21">gb</name></expr></argument>, <argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">buf</name></expr></argument>, <argument pos:start="19:29" pos:end="19:40"><expr pos:start="19:29" pos:end="19:40"><name pos:start="19:29" pos:end="19:36">buf_size</name> <operator pos:start="19:38" pos:end="19:38">*</operator> <literal type="number" pos:start="19:40" pos:end="19:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:36">(<expr pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">theora</name></name> <operator pos:start="23:19" pos:end="23:20">&amp;&amp;</operator> <call pos:start="23:22" pos:end="23:35"><name pos:start="23:22" pos:end="23:30">get_bits1</name><argument_list pos:start="23:31" pos:end="23:35">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><operator pos:start="23:32" pos:end="23:32">&amp;</operator><name pos:start="23:33" pos:end="23:34">gb</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="25:5" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:89"><expr pos:start="27:9" pos:end="27:88"><call pos:start="27:9" pos:end="27:88"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:88">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:87"><expr pos:start="27:37" pos:end="27:87"><literal type="string" pos:start="27:37" pos:end="27:87">"Header packet passed to frame decoder, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:15">keyframe</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">!</operator><call pos:start="35:20" pos:end="35:33"><name pos:start="35:20" pos:end="35:28">get_bits1</name><argument_list pos:start="35:29" pos:end="35:33">(<argument pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:26"><if pos:start="37:5" pos:end="39:26">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18"><name pos:start="37:10" pos:end="37:10">s</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:18">theora</name></name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:26"><block_content pos:start="39:9" pos:end="39:26">

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><call pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:17">skip_bits</name><argument_list pos:start="39:18" pos:end="39:25">(<argument pos:start="39:19" pos:end="39:21"><expr pos:start="39:19" pos:end="39:21"><operator pos:start="39:19" pos:end="39:19">&amp;</operator><name pos:start="39:20" pos:end="39:21">gb</name></expr></argument>, <argument pos:start="39:24" pos:end="39:24"><expr pos:start="39:24" pos:end="39:24"><literal type="number" pos:start="39:24" pos:end="39:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:25">last_quality_index</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:44"><name pos:start="41:29" pos:end="41:29">s</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:44">quality_index</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:14"><expr pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:11">nqis</name></name><operator pos:start="45:12" pos:end="45:12">=</operator><literal type="number" pos:start="45:13" pos:end="45:13">0</literal></expr>;</expr_stmt>

    <do pos:start="47:5" pos:end="51:66">do<block pos:start="47:7" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:44">

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:14">qis</name><index pos:start="49:15" pos:end="49:25">[<expr pos:start="49:16" pos:end="49:24"><name pos:start="49:16" pos:end="49:22"><name pos:start="49:16" pos:end="49:16">s</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:22">nqis</name></name><operator pos:start="49:23" pos:end="49:24">++</operator></expr>]</index></name><operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:43"><name pos:start="49:28" pos:end="49:35">get_bits</name><argument_list pos:start="49:36" pos:end="49:43">(<argument pos:start="49:37" pos:end="49:39"><expr pos:start="49:37" pos:end="49:39"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:39">gb</name></expr></argument>, <argument pos:start="49:42" pos:end="49:42"><expr pos:start="49:42" pos:end="49:42"><literal type="number" pos:start="49:42" pos:end="49:42">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="51:12" pos:end="51:65">(<expr pos:start="51:13" pos:end="51:64"><name pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">theora</name></name> <operator pos:start="51:23" pos:end="51:24">&gt;=</operator> <literal type="number" pos:start="51:26" pos:end="51:33">0x030200</literal> <operator pos:start="51:35" pos:end="51:36">&amp;&amp;</operator> <name pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:38">s</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:44">nqis</name></name><operator pos:start="51:45" pos:end="51:45">&lt;</operator><literal type="number" pos:start="51:46" pos:end="51:46">3</literal> <operator pos:start="51:48" pos:end="51:49">&amp;&amp;</operator> <call pos:start="51:51" pos:end="51:64"><name pos:start="51:51" pos:end="51:59">get_bits1</name><argument_list pos:start="51:60" pos:end="51:64">(<argument pos:start="51:61" pos:end="51:63"><expr pos:start="51:61" pos:end="51:63"><operator pos:start="51:61" pos:end="51:61">&amp;</operator><name pos:start="51:62" pos:end="51:63">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



    <expr_stmt pos:start="55:5" pos:end="55:32"><expr pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:20">quality_index</name></name><operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:31"><name pos:start="55:23" pos:end="55:23">s</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:28">qis</name><index pos:start="55:29" pos:end="55:31">[<expr pos:start="55:30" pos:end="55:30"><literal type="number" pos:start="55:30" pos:end="55:30">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="63:61"><if pos:start="59:5" pos:end="63:61">if <condition pos:start="59:8" pos:end="59:45">(<expr pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:16">avctx</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:23">debug</name></name> <operator pos:start="59:25" pos:end="59:25">&amp;</operator> <name pos:start="59:27" pos:end="59:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="63:61"><block_content pos:start="61:9" pos:end="63:61">

        <expr_stmt pos:start="61:9" pos:end="63:61"><expr pos:start="61:9" pos:end="63:60"><call pos:start="61:9" pos:end="63:60"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:60">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">avctx</name></name></expr></argument>, <argument pos:start="61:26" pos:end="61:36"><expr pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="61:39" pos:end="61:72"><expr pos:start="61:39" pos:end="61:72"><literal type="string" pos:start="61:39" pos:end="61:72">" VP3 %sframe #%d: Q index = %d\n"</literal></expr></argument>,

            <argument pos:start="63:13" pos:end="63:32"><expr pos:start="63:13" pos:end="63:32"><ternary pos:start="63:13" pos:end="63:32"><condition pos:start="63:13" pos:end="63:24"><expr pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:23">keyframe</name></name></expr>?</condition><then pos:start="63:25" pos:end="63:29"><expr pos:start="63:25" pos:end="63:29"><literal type="string" pos:start="63:25" pos:end="63:29">"key"</literal></expr></then><else pos:start="63:30" pos:end="63:32">:<expr pos:start="63:31" pos:end="63:32"><literal type="string" pos:start="63:31" pos:end="63:32">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="63:35" pos:end="63:41"><expr pos:start="63:35" pos:end="63:41"><name pos:start="63:35" pos:end="63:41">counter</name></expr></argument>, <argument pos:start="63:44" pos:end="63:59"><expr pos:start="63:44" pos:end="63:59"><name pos:start="63:44" pos:end="63:59"><name pos:start="63:44" pos:end="63:44">s</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:59">quality_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:14"><expr pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:11">counter</name><operator pos:start="65:12" pos:end="65:13">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:50">(<expr pos:start="69:9" pos:end="69:49"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:24">quality_index</name></name> <operator pos:start="69:26" pos:end="69:27">!=</operator> <name pos:start="69:29" pos:end="69:49"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:49">last_quality_index</name></name></expr>)</condition> <block pos:start="69:52" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:28">

        <expr_stmt pos:start="71:9" pos:end="71:28"><expr pos:start="71:9" pos:end="71:27"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:24">init_dequantizer</name><argument_list pos:start="71:25" pos:end="71:27">(<argument pos:start="71:26" pos:end="71:26"><expr pos:start="71:26" pos:end="71:26"><name pos:start="71:26" pos:end="71:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:28"><expr pos:start="73:9" pos:end="73:27"><call pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:24">init_loop_filter</name><argument_list pos:start="73:25" pos:end="73:27">(<argument pos:start="73:26" pos:end="73:26"><expr pos:start="73:26" pos:end="73:26"><name pos:start="73:26" pos:end="73:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="197:5"><if pos:start="79:5" pos:end="175:5">if <condition pos:start="79:8" pos:end="79:20">(<expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:19">keyframe</name></name></expr>)</condition> <block pos:start="79:22" pos:end="175:5">{<block_content pos:start="81:9" pos:end="173:9">

        <if_stmt pos:start="81:9" pos:end="101:9"><if pos:start="81:9" pos:end="101:9">if <condition pos:start="81:12" pos:end="81:23">(<expr pos:start="81:13" pos:end="81:22"><operator pos:start="81:13" pos:end="81:13">!</operator><name pos:start="81:14" pos:end="81:22"><name pos:start="81:14" pos:end="81:14">s</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:22">theora</name></name></expr>)</condition>

        <block pos:start="83:9" pos:end="101:9">{<block_content pos:start="85:13" pos:end="99:13">

            <expr_stmt pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:29"><call pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:21">skip_bits</name><argument_list pos:start="85:22" pos:end="85:29">(<argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><operator pos:start="85:23" pos:end="85:23">&amp;</operator><name pos:start="85:24" pos:end="85:25">gb</name></expr></argument>, <argument pos:start="85:28" pos:end="85:28"><expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="85:32" pos:end="85:47">/* width code */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:30"><expr pos:start="87:13" pos:end="87:29"><call pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:21">skip_bits</name><argument_list pos:start="87:22" pos:end="87:29">(<argument pos:start="87:23" pos:end="87:25"><expr pos:start="87:23" pos:end="87:25"><operator pos:start="87:23" pos:end="87:23">&amp;</operator><name pos:start="87:24" pos:end="87:25">gb</name></expr></argument>, <argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><literal type="number" pos:start="87:28" pos:end="87:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:32" pos:end="87:48">/* height code */</comment>

            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="89:27">(<expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:26">version</name></name></expr>)</condition>

            <block pos:start="91:13" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:83">

                <expr_stmt pos:start="93:17" pos:end="93:46"><expr pos:start="93:17" pos:end="93:45"><name pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:26">version</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <call pos:start="93:30" pos:end="93:45"><name pos:start="93:30" pos:end="93:37">get_bits</name><argument_list pos:start="93:38" pos:end="93:45">(<argument pos:start="93:39" pos:end="93:41"><expr pos:start="93:39" pos:end="93:41"><operator pos:start="93:39" pos:end="93:39">&amp;</operator><name pos:start="93:40" pos:end="93:41">gb</name></expr></argument>, <argument pos:start="93:44" pos:end="93:44"><expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="97:83"><if pos:start="95:17" pos:end="97:83">if <condition pos:start="95:20" pos:end="95:33">(<expr pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:27">counter</name> <operator pos:start="95:29" pos:end="95:30">==</operator> <literal type="number" pos:start="95:32" pos:end="95:32">1</literal></expr>)</condition><block type="pseudo" pos:start="97:21" pos:end="97:83"><block_content pos:start="97:21" pos:end="97:83">

                    <expr_stmt pos:start="97:21" pos:end="97:83"><expr pos:start="97:21" pos:end="97:82"><call pos:start="97:21" pos:end="97:82"><name pos:start="97:21" pos:end="97:26">av_log</name><argument_list pos:start="97:27" pos:end="97:82">(<argument pos:start="97:28" pos:end="97:35"><expr pos:start="97:28" pos:end="97:35"><name pos:start="97:28" pos:end="97:35"><name pos:start="97:28" pos:end="97:28">s</name><operator pos:start="97:29" pos:end="97:30">-&gt;</operator><name pos:start="97:31" pos:end="97:35">avctx</name></name></expr></argument>, <argument pos:start="97:38" pos:end="97:49"><expr pos:start="97:38" pos:end="97:49"><name pos:start="97:38" pos:end="97:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="97:52" pos:end="97:69"><expr pos:start="97:52" pos:end="97:69"><literal type="string" pos:start="97:52" pos:end="97:69">"VP version: %d\n"</literal></expr></argument>, <argument pos:start="97:72" pos:end="97:81"><expr pos:start="97:72" pos:end="97:81"><name pos:start="97:72" pos:end="97:81"><name pos:start="97:72" pos:end="97:72">s</name><operator pos:start="97:73" pos:end="97:74">-&gt;</operator><name pos:start="97:75" pos:end="97:81">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="113:9"><if pos:start="103:9" pos:end="113:9">if <condition pos:start="103:12" pos:end="103:36">(<expr pos:start="103:13" pos:end="103:35"><name pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:22">version</name></name> <operator pos:start="103:24" pos:end="103:25">||</operator> <name pos:start="103:27" pos:end="103:35"><name pos:start="103:27" pos:end="103:27">s</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:35">theora</name></name></expr>)</condition>

        <block pos:start="105:9" pos:end="113:9">{<block_content pos:start="107:17" pos:end="111:30">

                <if_stmt pos:start="107:17" pos:end="109:100"><if pos:start="107:17" pos:end="109:100">if <condition pos:start="107:20" pos:end="107:35">(<expr pos:start="107:21" pos:end="107:34"><call pos:start="107:21" pos:end="107:34"><name pos:start="107:21" pos:end="107:29">get_bits1</name><argument_list pos:start="107:30" pos:end="107:34">(<argument pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><operator pos:start="107:31" pos:end="107:31">&amp;</operator><name pos:start="107:32" pos:end="107:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="109:21" pos:end="109:100"><block_content pos:start="109:21" pos:end="109:100">

                    <expr_stmt pos:start="109:21" pos:end="109:100"><expr pos:start="109:21" pos:end="109:99"><call pos:start="109:21" pos:end="109:99"><name pos:start="109:21" pos:end="109:26">av_log</name><argument_list pos:start="109:27" pos:end="109:99">(<argument pos:start="109:28" pos:end="109:35"><expr pos:start="109:28" pos:end="109:35"><name pos:start="109:28" pos:end="109:35"><name pos:start="109:28" pos:end="109:28">s</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:35">avctx</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:49"><expr pos:start="109:38" pos:end="109:49"><name pos:start="109:38" pos:end="109:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:52" pos:end="109:98"><expr pos:start="109:52" pos:end="109:98"><literal type="string" pos:start="109:52" pos:end="109:98">"Warning, unsupported keyframe coding type?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:30"><expr pos:start="111:13" pos:end="111:29"><call pos:start="111:13" pos:end="111:29"><name pos:start="111:13" pos:end="111:21">skip_bits</name><argument_list pos:start="111:22" pos:end="111:29">(<argument pos:start="111:23" pos:end="111:25"><expr pos:start="111:23" pos:end="111:25"><operator pos:start="111:23" pos:end="111:23">&amp;</operator><name pos:start="111:24" pos:end="111:25">gb</name></expr></argument>, <argument pos:start="111:28" pos:end="111:28"><expr pos:start="111:28" pos:end="111:28"><literal type="number" pos:start="111:28" pos:end="111:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="111:32" pos:end="111:46">/* reserved? */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="117:9" pos:end="135:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:61">(<expr pos:start="117:13" pos:end="117:60"><name pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:25">last_frame</name><operator pos:start="117:26" pos:end="117:26">.</operator><name pos:start="117:27" pos:end="117:30">data</name><index pos:start="117:31" pos:end="117:33">[<expr pos:start="117:32" pos:end="117:32"><literal type="number" pos:start="117:32" pos:end="117:32">0</literal></expr>]</index></name> <operator pos:start="117:35" pos:end="117:36">==</operator> <name pos:start="117:38" pos:end="117:60"><name pos:start="117:38" pos:end="117:38">s</name><operator pos:start="117:39" pos:end="117:40">-&gt;</operator><name pos:start="117:41" pos:end="117:52">golden_frame</name><operator pos:start="117:53" pos:end="117:53">.</operator><name pos:start="117:54" pos:end="117:57">data</name><index pos:start="117:58" pos:end="117:60">[<expr pos:start="117:59" pos:end="117:59"><literal type="number" pos:start="117:59" pos:end="117:59">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="117:63" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:43">

            <if_stmt pos:start="119:13" pos:end="121:63"><if pos:start="119:13" pos:end="121:63">if <condition pos:start="119:16" pos:end="119:40">(<expr pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:17">s</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:31">golden_frame</name><operator pos:start="119:32" pos:end="119:32">.</operator><name pos:start="119:33" pos:end="119:36">data</name><index pos:start="119:37" pos:end="119:39">[<expr pos:start="119:38" pos:end="119:38"><literal type="number" pos:start="119:38" pos:end="119:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:63"><block_content pos:start="121:17" pos:end="121:63">

                <expr_stmt pos:start="121:17" pos:end="121:63"><expr pos:start="121:17" pos:end="121:62"><call pos:start="121:17" pos:end="121:62"><name pos:start="121:17" pos:end="121:37"><name pos:start="121:17" pos:end="121:21">avctx</name><operator pos:start="121:22" pos:end="121:23">-&gt;</operator><name pos:start="121:24" pos:end="121:37">release_buffer</name></name><argument_list pos:start="121:38" pos:end="121:62">(<argument pos:start="121:39" pos:end="121:43"><expr pos:start="121:39" pos:end="121:43"><name pos:start="121:39" pos:end="121:43">avctx</name></expr></argument>, <argument pos:start="121:46" pos:end="121:61"><expr pos:start="121:46" pos:end="121:61"><operator pos:start="121:46" pos:end="121:46">&amp;</operator><name pos:start="121:47" pos:end="121:61"><name pos:start="121:47" pos:end="121:47">s</name><operator pos:start="121:48" pos:end="121:49">-&gt;</operator><name pos:start="121:50" pos:end="121:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:25">last_frame</name></name><operator pos:start="123:26" pos:end="123:26">=</operator> <name pos:start="123:28" pos:end="123:42"><name pos:start="123:28" pos:end="123:28">s</name><operator pos:start="123:29" pos:end="123:30">-&gt;</operator><name pos:start="123:31" pos:end="123:42">golden_frame</name></name></expr>;</expr_stmt> <comment type="block" pos:start="123:45" pos:end="123:104">/* ensure that we catch any access to this released frame */</comment>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="135:9">else <block pos:start="125:16" pos:end="135:9">{<block_content pos:start="127:13" pos:end="133:61">

            <if_stmt pos:start="127:13" pos:end="129:63"><if pos:start="127:13" pos:end="129:63">if <condition pos:start="127:16" pos:end="127:40">(<expr pos:start="127:17" pos:end="127:39"><name pos:start="127:17" pos:end="127:39"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:31">golden_frame</name><operator pos:start="127:32" pos:end="127:32">.</operator><name pos:start="127:33" pos:end="127:36">data</name><index pos:start="127:37" pos:end="127:39">[<expr pos:start="127:38" pos:end="127:38"><literal type="number" pos:start="127:38" pos:end="127:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:63"><block_content pos:start="129:17" pos:end="129:63">

                <expr_stmt pos:start="129:17" pos:end="129:63"><expr pos:start="129:17" pos:end="129:62"><call pos:start="129:17" pos:end="129:62"><name pos:start="129:17" pos:end="129:37"><name pos:start="129:17" pos:end="129:21">avctx</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:37">release_buffer</name></name><argument_list pos:start="129:38" pos:end="129:62">(<argument pos:start="129:39" pos:end="129:43"><expr pos:start="129:39" pos:end="129:43"><name pos:start="129:39" pos:end="129:43">avctx</name></expr></argument>, <argument pos:start="129:46" pos:end="129:61"><expr pos:start="129:46" pos:end="129:61"><operator pos:start="129:46" pos:end="129:46">&amp;</operator><name pos:start="129:47" pos:end="129:61"><name pos:start="129:47" pos:end="129:47">s</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="131:13" pos:end="133:61"><if pos:start="131:13" pos:end="133:61">if <condition pos:start="131:16" pos:end="131:38">(<expr pos:start="131:17" pos:end="131:37"><name pos:start="131:17" pos:end="131:37"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:29">last_frame</name><operator pos:start="131:30" pos:end="131:30">.</operator><name pos:start="131:31" pos:end="131:34">data</name><index pos:start="131:35" pos:end="131:37">[<expr pos:start="131:36" pos:end="131:36"><literal type="number" pos:start="131:36" pos:end="131:36">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="133:61"><block_content pos:start="133:17" pos:end="133:61">

                <expr_stmt pos:start="133:17" pos:end="133:61"><expr pos:start="133:17" pos:end="133:60"><call pos:start="133:17" pos:end="133:60"><name pos:start="133:17" pos:end="133:37"><name pos:start="133:17" pos:end="133:21">avctx</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:37">release_buffer</name></name><argument_list pos:start="133:38" pos:end="133:60">(<argument pos:start="133:39" pos:end="133:43"><expr pos:start="133:39" pos:end="133:43"><name pos:start="133:39" pos:end="133:43">avctx</name></expr></argument>, <argument pos:start="133:46" pos:end="133:59"><expr pos:start="133:46" pos:end="133:59"><operator pos:start="133:46" pos:end="133:46">&amp;</operator><name pos:start="133:47" pos:end="133:59"><name pos:start="133:47" pos:end="133:47">s</name><operator pos:start="133:48" pos:end="133:49">-&gt;</operator><name pos:start="133:50" pos:end="133:59">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:38"><expr pos:start="139:9" pos:end="139:37"><name pos:start="139:9" pos:end="139:33"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:23">golden_frame</name><operator pos:start="139:24" pos:end="139:24">.</operator><name pos:start="139:25" pos:end="139:33">reference</name></name> <operator pos:start="139:35" pos:end="139:35">=</operator> <literal type="number" pos:start="139:37" pos:end="139:37">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if<condition pos:start="141:11" pos:end="141:58">(<expr pos:start="141:12" pos:end="141:57"><call pos:start="141:12" pos:end="141:53"><name pos:start="141:12" pos:end="141:28"><name pos:start="141:12" pos:end="141:16">avctx</name><operator pos:start="141:17" pos:end="141:18">-&gt;</operator><name pos:start="141:19" pos:end="141:28">get_buffer</name></name><argument_list pos:start="141:29" pos:end="141:53">(<argument pos:start="141:30" pos:end="141:34"><expr pos:start="141:30" pos:end="141:34"><name pos:start="141:30" pos:end="141:34">avctx</name></expr></argument>, <argument pos:start="141:37" pos:end="141:52"><expr pos:start="141:37" pos:end="141:52"><operator pos:start="141:37" pos:end="141:37">&amp;</operator><name pos:start="141:38" pos:end="141:52"><name pos:start="141:38" pos:end="141:38">s</name><operator pos:start="141:39" pos:end="141:40">-&gt;</operator><name pos:start="141:41" pos:end="141:52">golden_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="141:55" pos:end="141:55">&lt;</operator> <literal type="number" pos:start="141:57" pos:end="141:57">0</literal></expr>)</condition> <block pos:start="141:60" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:22">

            <expr_stmt pos:start="143:13" pos:end="143:73"><expr pos:start="143:13" pos:end="143:72"><call pos:start="143:13" pos:end="143:72"><name pos:start="143:13" pos:end="143:18">av_log</name><argument_list pos:start="143:19" pos:end="143:72">(<argument pos:start="143:20" pos:end="143:27"><expr pos:start="143:20" pos:end="143:27"><name pos:start="143:20" pos:end="143:27"><name pos:start="143:20" pos:end="143:20">s</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:27">avctx</name></name></expr></argument>, <argument pos:start="143:30" pos:end="143:41"><expr pos:start="143:30" pos:end="143:41"><name pos:start="143:30" pos:end="143:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:44" pos:end="143:71"><expr pos:start="143:44" pos:end="143:71"><literal type="string" pos:start="143:44" pos:end="143:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:22">return <expr pos:start="145:20" pos:end="145:21"><operator pos:start="145:20" pos:end="145:20">-</operator><literal type="number" pos:start="145:21" pos:end="145:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:52">/* golden frame is also the current frame */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:42"><expr pos:start="153:9" pos:end="153:41"><name pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:24">current_frame</name></name><operator pos:start="153:25" pos:end="153:25">=</operator> <name pos:start="153:27" pos:end="153:41"><name pos:start="153:27" pos:end="153:27">s</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:41">golden_frame</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:49">/* time to figure out pixel addresses? */</comment>

        <if_stmt pos:start="159:9" pos:end="173:9"><if pos:start="159:9" pos:end="173:9">if <condition pos:start="159:12" pos:end="159:39">(<expr pos:start="159:13" pos:end="159:38"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:38"><name pos:start="159:14" pos:end="159:14">s</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:38">pixel_addresses_inited</name></name></expr>)</condition>

        <block pos:start="161:9" pos:end="173:9">{<block_content pos:start="163:13" pos:end="171:42">

            <if_stmt pos:start="163:13" pos:end="169:52"><if pos:start="163:13" pos:end="165:49">if <condition pos:start="163:16" pos:end="163:34">(<expr pos:start="163:17" pos:end="163:33"><operator pos:start="163:17" pos:end="163:17">!</operator><name pos:start="163:18" pos:end="163:33"><name pos:start="163:18" pos:end="163:18">s</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:33">flipped_image</name></name></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="165:49"><block_content pos:start="165:17" pos:end="165:49">

                <expr_stmt pos:start="165:17" pos:end="165:49"><expr pos:start="165:17" pos:end="165:48"><call pos:start="165:17" pos:end="165:48"><name pos:start="165:17" pos:end="165:45">vp3_calculate_pixel_addresses</name><argument_list pos:start="165:46" pos:end="165:48">(<argument pos:start="165:47" pos:end="165:47"><expr pos:start="165:47" pos:end="165:47"><name pos:start="165:47" pos:end="165:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="167:13" pos:end="169:52">else<block type="pseudo" pos:start="169:17" pos:end="169:52"><block_content pos:start="169:17" pos:end="169:52">

                <expr_stmt pos:start="169:17" pos:end="169:52"><expr pos:start="169:17" pos:end="169:51"><call pos:start="169:17" pos:end="169:51"><name pos:start="169:17" pos:end="169:48">theora_calculate_pixel_addresses</name><argument_list pos:start="169:49" pos:end="169:51">(<argument pos:start="169:50" pos:end="169:50"><expr pos:start="169:50" pos:end="169:50"><name pos:start="169:50" pos:end="169:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:42"><expr pos:start="171:13" pos:end="171:41"><name pos:start="171:13" pos:end="171:37"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:37">pixel_addresses_inited</name></name> <operator pos:start="171:39" pos:end="171:39">=</operator> <literal type="number" pos:start="171:41" pos:end="171:41">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="197:5">else <block pos:start="175:12" pos:end="197:5">{<block_content pos:start="179:9" pos:end="195:9">

        <comment type="block" pos:start="177:9" pos:end="177:42">/* allocate a new current frame */</comment>

        <expr_stmt pos:start="179:9" pos:end="179:39"><expr pos:start="179:9" pos:end="179:38"><name pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:24">current_frame</name><operator pos:start="179:25" pos:end="179:25">.</operator><name pos:start="179:26" pos:end="179:34">reference</name></name> <operator pos:start="179:36" pos:end="179:36">=</operator> <literal type="number" pos:start="179:38" pos:end="179:38">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="187:9"><if pos:start="181:9" pos:end="187:9">if <condition pos:start="181:12" pos:end="181:39">(<expr pos:start="181:13" pos:end="181:38"><operator pos:start="181:13" pos:end="181:13">!</operator><name pos:start="181:14" pos:end="181:38"><name pos:start="181:14" pos:end="181:14">s</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:38">pixel_addresses_inited</name></name></expr>)</condition> <block pos:start="181:41" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:22">

            <expr_stmt pos:start="183:13" pos:end="183:80"><expr pos:start="183:13" pos:end="183:79"><call pos:start="183:13" pos:end="183:79"><name pos:start="183:13" pos:end="183:18">av_log</name><argument_list pos:start="183:19" pos:end="183:79">(<argument pos:start="183:20" pos:end="183:27"><expr pos:start="183:20" pos:end="183:27"><name pos:start="183:20" pos:end="183:27"><name pos:start="183:20" pos:end="183:20">s</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:27">avctx</name></name></expr></argument>, <argument pos:start="183:30" pos:end="183:41"><expr pos:start="183:30" pos:end="183:41"><name pos:start="183:30" pos:end="183:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="183:44" pos:end="183:78"><expr pos:start="183:44" pos:end="183:78"><literal type="string" pos:start="183:44" pos:end="183:78">"vp3: first frame not a keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="185:13" pos:end="185:22">return <expr pos:start="185:20" pos:end="185:21"><operator pos:start="185:20" pos:end="185:20">-</operator><literal type="number" pos:start="185:21" pos:end="185:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if<condition pos:start="189:11" pos:end="189:59">(<expr pos:start="189:12" pos:end="189:58"><call pos:start="189:12" pos:end="189:54"><name pos:start="189:12" pos:end="189:28"><name pos:start="189:12" pos:end="189:16">avctx</name><operator pos:start="189:17" pos:end="189:18">-&gt;</operator><name pos:start="189:19" pos:end="189:28">get_buffer</name></name><argument_list pos:start="189:29" pos:end="189:54">(<argument pos:start="189:30" pos:end="189:34"><expr pos:start="189:30" pos:end="189:34"><name pos:start="189:30" pos:end="189:34">avctx</name></expr></argument>, <argument pos:start="189:37" pos:end="189:53"><expr pos:start="189:37" pos:end="189:53"><operator pos:start="189:37" pos:end="189:37">&amp;</operator><name pos:start="189:38" pos:end="189:53"><name pos:start="189:38" pos:end="189:38">s</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:53">current_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="189:56" pos:end="189:56">&lt;</operator> <literal type="number" pos:start="189:58" pos:end="189:58">0</literal></expr>)</condition> <block pos:start="189:61" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:22">

            <expr_stmt pos:start="191:13" pos:end="191:73"><expr pos:start="191:13" pos:end="191:72"><call pos:start="191:13" pos:end="191:72"><name pos:start="191:13" pos:end="191:18">av_log</name><argument_list pos:start="191:19" pos:end="191:72">(<argument pos:start="191:20" pos:end="191:27"><expr pos:start="191:20" pos:end="191:27"><name pos:start="191:20" pos:end="191:27"><name pos:start="191:20" pos:end="191:20">s</name><operator pos:start="191:21" pos:end="191:22">-&gt;</operator><name pos:start="191:23" pos:end="191:27">avctx</name></name></expr></argument>, <argument pos:start="191:30" pos:end="191:41"><expr pos:start="191:30" pos:end="191:41"><name pos:start="191:30" pos:end="191:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:44" pos:end="191:71"><expr pos:start="191:44" pos:end="191:71"><literal type="string" pos:start="191:44" pos:end="191:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:22">return <expr pos:start="193:20" pos:end="193:21"><operator pos:start="193:20" pos:end="193:20">-</operator><literal type="number" pos:start="193:21" pos:end="193:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:51"><expr pos:start="201:5" pos:end="201:50"><name pos:start="201:5" pos:end="201:33"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:20">current_frame</name><operator pos:start="201:21" pos:end="201:21">.</operator><name pos:start="201:22" pos:end="201:33">qscale_table</name></name><operator pos:start="201:34" pos:end="201:34">=</operator> <name pos:start="201:36" pos:end="201:50"><name pos:start="201:36" pos:end="201:36">s</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:50">qscale_table</name></name></expr>;</expr_stmt> <comment type="line" pos:start="201:53" pos:end="201:98">//FIXME allocate individual tables per AVFrame</comment>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:28"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:20">current_frame</name><operator pos:start="203:21" pos:end="203:21">.</operator><name pos:start="203:22" pos:end="203:28">qstride</name></name><operator pos:start="203:29" pos:end="203:29">=</operator> <literal type="number" pos:start="203:31" pos:end="203:31">0</literal></expr>;</expr_stmt>



    <block pos:start="207:5" pos:end="216:0">{<block_content pos:start="207:6" pos:end="211:28"><decl_stmt pos:start="207:6" pos:end="209:23"><decl pos:start="207:6" pos:end="209:22"><type pos:start="207:6" pos:end="207:16"><name pos:start="207:6" pos:end="207:16">START_TIMER</name></type>

    <name pos:start="209:5" pos:end="209:14">init_frame</name><argument_list pos:start="209:15" pos:end="209:22">(<argument pos:start="209:16" pos:end="209:16"><expr pos:start="209:16" pos:end="209:16"><name pos:start="209:16" pos:end="209:16">s</name></expr></argument>, <argument pos:start="209:19" pos:end="209:21"><expr pos:start="209:19" pos:end="209:21"><operator pos:start="209:19" pos:end="209:19">&amp;</operator><name pos:start="209:20" pos:end="209:21">gb</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro pos:start="211:5" pos:end="211:28"><name pos:start="211:5" pos:end="211:14">STOP_TIMER</name><argument_list pos:start="211:15" pos:end="211:28">(<argument pos:start="211:16" pos:end="211:27"><literal type="string" pos:start="211:16" pos:end="211:27">"init_frame"</literal></argument>)</argument_list></macro></block_content>}</block>



<cpp:if pos:start="215:1" pos:end="215:18">#<cpp:directive pos:start="215:2" pos:end="215:3">if</cpp:directive> <expr pos:start="215:5" pos:end="215:18"><name pos:start="215:5" pos:end="215:18">KEYFRAMES_ONLY</name></expr></cpp:if>

<if_stmt pos:start="217:1" pos:end="332:0"><if pos:start="217:1" pos:end="235:1">if <condition pos:start="217:4" pos:end="217:17">(<expr pos:start="217:5" pos:end="217:16"><operator pos:start="217:5" pos:end="217:5">!</operator><name pos:start="217:6" pos:end="217:16"><name pos:start="217:6" pos:end="217:6">s</name><operator pos:start="217:7" pos:end="217:8">-&gt;</operator><name pos:start="217:9" pos:end="217:16">keyframe</name></name></expr>)</condition> <block pos:start="217:19" pos:end="235:1">{<block_content pos:start="221:5" pos:end="231:54">



    <expr_stmt pos:start="221:5" pos:end="223:50"><expr pos:start="221:5" pos:end="223:49"><call pos:start="221:5" pos:end="223:49"><name pos:start="221:5" pos:end="221:10">memcpy</name><argument_list pos:start="221:11" pos:end="223:49">(<argument pos:start="221:12" pos:end="221:35"><expr pos:start="221:12" pos:end="221:35"><name pos:start="221:12" pos:end="221:35"><name pos:start="221:12" pos:end="221:12">s</name><operator pos:start="221:13" pos:end="221:14">-&gt;</operator><name pos:start="221:15" pos:end="221:27">current_frame</name><operator pos:start="221:28" pos:end="221:28">.</operator><name pos:start="221:29" pos:end="221:32">data</name><index pos:start="221:33" pos:end="221:35">[<expr pos:start="221:34" pos:end="221:34"><literal type="number" pos:start="221:34" pos:end="221:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="221:38" pos:end="221:60"><expr pos:start="221:38" pos:end="221:60"><name pos:start="221:38" pos:end="221:60"><name pos:start="221:38" pos:end="221:38">s</name><operator pos:start="221:39" pos:end="221:40">-&gt;</operator><name pos:start="221:41" pos:end="221:52">golden_frame</name><operator pos:start="221:53" pos:end="221:53">.</operator><name pos:start="221:54" pos:end="221:57">data</name><index pos:start="221:58" pos:end="221:60">[<expr pos:start="221:59" pos:end="221:59"><literal type="number" pos:start="221:59" pos:end="221:59">0</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="223:9" pos:end="223:48"><expr pos:start="223:9" pos:end="223:48"><name pos:start="223:9" pos:end="223:36"><name pos:start="223:9" pos:end="223:9">s</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:24">current_frame</name><operator pos:start="223:25" pos:end="223:25">.</operator><name pos:start="223:26" pos:end="223:33">linesize</name><index pos:start="223:34" pos:end="223:36">[<expr pos:start="223:35" pos:end="223:35"><literal type="number" pos:start="223:35" pos:end="223:35">0</literal></expr>]</index></name> <operator pos:start="223:38" pos:end="223:38">*</operator> <name pos:start="223:40" pos:end="223:48"><name pos:start="223:40" pos:end="223:40">s</name><operator pos:start="223:41" pos:end="223:42">-&gt;</operator><name pos:start="223:43" pos:end="223:48">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:54"><expr pos:start="225:5" pos:end="227:53"><call pos:start="225:5" pos:end="227:53"><name pos:start="225:5" pos:end="225:10">memcpy</name><argument_list pos:start="225:11" pos:end="227:53">(<argument pos:start="225:12" pos:end="225:35"><expr pos:start="225:12" pos:end="225:35"><name pos:start="225:12" pos:end="225:35"><name pos:start="225:12" pos:end="225:12">s</name><operator pos:start="225:13" pos:end="225:14">-&gt;</operator><name pos:start="225:15" pos:end="225:27">current_frame</name><operator pos:start="225:28" pos:end="225:28">.</operator><name pos:start="225:29" pos:end="225:32">data</name><index pos:start="225:33" pos:end="225:35">[<expr pos:start="225:34" pos:end="225:34"><literal type="number" pos:start="225:34" pos:end="225:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="225:38" pos:end="225:60"><expr pos:start="225:38" pos:end="225:60"><name pos:start="225:38" pos:end="225:60"><name pos:start="225:38" pos:end="225:38">s</name><operator pos:start="225:39" pos:end="225:40">-&gt;</operator><name pos:start="225:41" pos:end="225:52">golden_frame</name><operator pos:start="225:53" pos:end="225:53">.</operator><name pos:start="225:54" pos:end="225:57">data</name><index pos:start="225:58" pos:end="225:60">[<expr pos:start="225:59" pos:end="225:59"><literal type="number" pos:start="225:59" pos:end="225:59">1</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="227:9" pos:end="227:52"><expr pos:start="227:9" pos:end="227:52"><name pos:start="227:9" pos:end="227:36"><name pos:start="227:9" pos:end="227:9">s</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:24">current_frame</name><operator pos:start="227:25" pos:end="227:25">.</operator><name pos:start="227:26" pos:end="227:33">linesize</name><index pos:start="227:34" pos:end="227:36">[<expr pos:start="227:35" pos:end="227:35"><literal type="number" pos:start="227:35" pos:end="227:35">1</literal></expr>]</index></name> <operator pos:start="227:38" pos:end="227:38">*</operator> <name pos:start="227:40" pos:end="227:48"><name pos:start="227:40" pos:end="227:40">s</name><operator pos:start="227:41" pos:end="227:42">-&gt;</operator><name pos:start="227:43" pos:end="227:48">height</name></name> <operator pos:start="227:50" pos:end="227:50">/</operator> <literal type="number" pos:start="227:52" pos:end="227:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="231:54"><expr pos:start="229:5" pos:end="231:53"><call pos:start="229:5" pos:end="231:53"><name pos:start="229:5" pos:end="229:10">memcpy</name><argument_list pos:start="229:11" pos:end="231:53">(<argument pos:start="229:12" pos:end="229:35"><expr pos:start="229:12" pos:end="229:35"><name pos:start="229:12" pos:end="229:35"><name pos:start="229:12" pos:end="229:12">s</name><operator pos:start="229:13" pos:end="229:14">-&gt;</operator><name pos:start="229:15" pos:end="229:27">current_frame</name><operator pos:start="229:28" pos:end="229:28">.</operator><name pos:start="229:29" pos:end="229:32">data</name><index pos:start="229:33" pos:end="229:35">[<expr pos:start="229:34" pos:end="229:34"><literal type="number" pos:start="229:34" pos:end="229:34">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="229:38" pos:end="229:60"><expr pos:start="229:38" pos:end="229:60"><name pos:start="229:38" pos:end="229:60"><name pos:start="229:38" pos:end="229:38">s</name><operator pos:start="229:39" pos:end="229:40">-&gt;</operator><name pos:start="229:41" pos:end="229:52">golden_frame</name><operator pos:start="229:53" pos:end="229:53">.</operator><name pos:start="229:54" pos:end="229:57">data</name><index pos:start="229:58" pos:end="229:60">[<expr pos:start="229:59" pos:end="229:59"><literal type="number" pos:start="229:59" pos:end="229:59">2</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="231:9" pos:end="231:52"><expr pos:start="231:9" pos:end="231:52"><name pos:start="231:9" pos:end="231:36"><name pos:start="231:9" pos:end="231:9">s</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:24">current_frame</name><operator pos:start="231:25" pos:end="231:25">.</operator><name pos:start="231:26" pos:end="231:33">linesize</name><index pos:start="231:34" pos:end="231:36">[<expr pos:start="231:35" pos:end="231:35"><literal type="number" pos:start="231:35" pos:end="231:35">2</literal></expr>]</index></name> <operator pos:start="231:38" pos:end="231:38">*</operator> <name pos:start="231:40" pos:end="231:48"><name pos:start="231:40" pos:end="231:40">s</name><operator pos:start="231:41" pos:end="231:42">-&gt;</operator><name pos:start="231:43" pos:end="231:48">height</name></name> <operator pos:start="231:50" pos:end="231:50">/</operator> <literal type="number" pos:start="231:52" pos:end="231:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <else pos:start="235:3" pos:end="332:0">else <block pos:start="235:8" pos:end="332:0">{<block_content pos:start="241:5" pos:end="328:0">

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>



    <block pos:start="241:5" pos:end="251:37">{<block_content pos:start="241:6" pos:end="251:36"><macro pos:start="241:6" pos:end="241:16"><name pos:start="241:6" pos:end="241:16">START_TIMER</name></macro>

    <if_stmt pos:start="243:5" pos:end="249:5"><if pos:start="243:5" pos:end="249:5">if <condition pos:start="243:8" pos:end="243:35">(<expr pos:start="243:9" pos:end="243:34"><call pos:start="243:9" pos:end="243:34"><name pos:start="243:9" pos:end="243:26">unpack_superblocks</name><argument_list pos:start="243:27" pos:end="243:34">(<argument pos:start="243:28" pos:end="243:28"><expr pos:start="243:28" pos:end="243:28"><name pos:start="243:28" pos:end="243:28">s</name></expr></argument>, <argument pos:start="243:31" pos:end="243:33"><expr pos:start="243:31" pos:end="243:33"><operator pos:start="243:31" pos:end="243:31">&amp;</operator><name pos:start="243:32" pos:end="243:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="243:36" pos:end="249:5">{<block_content pos:start="245:9" pos:end="247:18">

        <expr_stmt pos:start="245:9" pos:end="245:72"><expr pos:start="245:9" pos:end="245:71"><call pos:start="245:9" pos:end="245:71"><name pos:start="245:9" pos:end="245:14">av_log</name><argument_list pos:start="245:15" pos:end="245:71">(<argument pos:start="245:16" pos:end="245:23"><expr pos:start="245:16" pos:end="245:23"><name pos:start="245:16" pos:end="245:23"><name pos:start="245:16" pos:end="245:16">s</name><operator pos:start="245:17" pos:end="245:18">-&gt;</operator><name pos:start="245:19" pos:end="245:23">avctx</name></name></expr></argument>, <argument pos:start="245:26" pos:end="245:37"><expr pos:start="245:26" pos:end="245:37"><name pos:start="245:26" pos:end="245:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="245:40" pos:end="245:70"><expr pos:start="245:40" pos:end="245:70"><literal type="string" pos:start="245:40" pos:end="245:70">"error in unpack_superblocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="247:9" pos:end="247:18">return <expr pos:start="247:16" pos:end="247:17"><operator pos:start="247:16" pos:end="247:16">-</operator><literal type="number" pos:start="247:17" pos:end="247:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="251:5" pos:end="251:36"><name pos:start="251:5" pos:end="251:14">STOP_TIMER</name><argument_list pos:start="251:15" pos:end="251:36">(<argument pos:start="251:16" pos:end="251:35"><literal type="string" pos:start="251:16" pos:end="251:35">"unpack_superblocks"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="253:5" pos:end="263:31">{<block_content pos:start="253:6" pos:end="263:30"><macro pos:start="253:6" pos:end="253:16"><name pos:start="253:6" pos:end="253:16">START_TIMER</name></macro>

    <if_stmt pos:start="255:5" pos:end="261:5"><if pos:start="255:5" pos:end="261:5">if <condition pos:start="255:8" pos:end="255:29">(<expr pos:start="255:9" pos:end="255:28"><call pos:start="255:9" pos:end="255:28"><name pos:start="255:9" pos:end="255:20">unpack_modes</name><argument_list pos:start="255:21" pos:end="255:28">(<argument pos:start="255:22" pos:end="255:22"><expr pos:start="255:22" pos:end="255:22"><name pos:start="255:22" pos:end="255:22">s</name></expr></argument>, <argument pos:start="255:25" pos:end="255:27"><expr pos:start="255:25" pos:end="255:27"><operator pos:start="255:25" pos:end="255:25">&amp;</operator><name pos:start="255:26" pos:end="255:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="255:30" pos:end="261:5">{<block_content pos:start="257:9" pos:end="259:18">

        <expr_stmt pos:start="257:9" pos:end="257:66"><expr pos:start="257:9" pos:end="257:65"><call pos:start="257:9" pos:end="257:65"><name pos:start="257:9" pos:end="257:14">av_log</name><argument_list pos:start="257:15" pos:end="257:65">(<argument pos:start="257:16" pos:end="257:23"><expr pos:start="257:16" pos:end="257:23"><name pos:start="257:16" pos:end="257:23"><name pos:start="257:16" pos:end="257:16">s</name><operator pos:start="257:17" pos:end="257:18">-&gt;</operator><name pos:start="257:19" pos:end="257:23">avctx</name></name></expr></argument>, <argument pos:start="257:26" pos:end="257:37"><expr pos:start="257:26" pos:end="257:37"><name pos:start="257:26" pos:end="257:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="257:40" pos:end="257:64"><expr pos:start="257:40" pos:end="257:64"><literal type="string" pos:start="257:40" pos:end="257:64">"error in unpack_modes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="259:9" pos:end="259:18">return <expr pos:start="259:16" pos:end="259:17"><operator pos:start="259:16" pos:end="259:16">-</operator><literal type="number" pos:start="259:17" pos:end="259:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="263:5" pos:end="263:30"><name pos:start="263:5" pos:end="263:14">STOP_TIMER</name><argument_list pos:start="263:15" pos:end="263:30">(<argument pos:start="263:16" pos:end="263:29"><literal type="string" pos:start="263:16" pos:end="263:29">"unpack_modes"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="265:5" pos:end="275:33">{<block_content pos:start="265:6" pos:end="275:32"><macro pos:start="265:6" pos:end="265:16"><name pos:start="265:6" pos:end="265:16">START_TIMER</name></macro>

    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if <condition pos:start="267:8" pos:end="267:31">(<expr pos:start="267:9" pos:end="267:30"><call pos:start="267:9" pos:end="267:30"><name pos:start="267:9" pos:end="267:22">unpack_vectors</name><argument_list pos:start="267:23" pos:end="267:30">(<argument pos:start="267:24" pos:end="267:24"><expr pos:start="267:24" pos:end="267:24"><name pos:start="267:24" pos:end="267:24">s</name></expr></argument>, <argument pos:start="267:27" pos:end="267:29"><expr pos:start="267:27" pos:end="267:29"><operator pos:start="267:27" pos:end="267:27">&amp;</operator><name pos:start="267:28" pos:end="267:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="267:32" pos:end="273:5">{<block_content pos:start="269:9" pos:end="271:18">

        <expr_stmt pos:start="269:9" pos:end="269:68"><expr pos:start="269:9" pos:end="269:67"><call pos:start="269:9" pos:end="269:67"><name pos:start="269:9" pos:end="269:14">av_log</name><argument_list pos:start="269:15" pos:end="269:67">(<argument pos:start="269:16" pos:end="269:23"><expr pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:16">s</name><operator pos:start="269:17" pos:end="269:18">-&gt;</operator><name pos:start="269:19" pos:end="269:23">avctx</name></name></expr></argument>, <argument pos:start="269:26" pos:end="269:37"><expr pos:start="269:26" pos:end="269:37"><name pos:start="269:26" pos:end="269:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="269:40" pos:end="269:66"><expr pos:start="269:40" pos:end="269:66"><literal type="string" pos:start="269:40" pos:end="269:66">"error in unpack_vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="271:9" pos:end="271:18">return <expr pos:start="271:16" pos:end="271:17"><operator pos:start="271:16" pos:end="271:16">-</operator><literal type="number" pos:start="271:17" pos:end="271:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="275:5" pos:end="275:32"><name pos:start="275:5" pos:end="275:14">STOP_TIMER</name><argument_list pos:start="275:15" pos:end="275:32">(<argument pos:start="275:16" pos:end="275:31"><literal type="string" pos:start="275:16" pos:end="275:31">"unpack_vectors"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="277:5" pos:end="287:36">{<block_content pos:start="277:6" pos:end="287:35"><macro pos:start="277:6" pos:end="277:16"><name pos:start="277:6" pos:end="277:16">START_TIMER</name></macro>

    <if_stmt pos:start="279:5" pos:end="285:5"><if pos:start="279:5" pos:end="285:5">if <condition pos:start="279:8" pos:end="279:34">(<expr pos:start="279:9" pos:end="279:33"><call pos:start="279:9" pos:end="279:33"><name pos:start="279:9" pos:end="279:25">unpack_dct_coeffs</name><argument_list pos:start="279:26" pos:end="279:33">(<argument pos:start="279:27" pos:end="279:27"><expr pos:start="279:27" pos:end="279:27"><name pos:start="279:27" pos:end="279:27">s</name></expr></argument>, <argument pos:start="279:30" pos:end="279:32"><expr pos:start="279:30" pos:end="279:32"><operator pos:start="279:30" pos:end="279:30">&amp;</operator><name pos:start="279:31" pos:end="279:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="279:35" pos:end="285:5">{<block_content pos:start="281:9" pos:end="283:18">

        <expr_stmt pos:start="281:9" pos:end="281:71"><expr pos:start="281:9" pos:end="281:70"><call pos:start="281:9" pos:end="281:70"><name pos:start="281:9" pos:end="281:14">av_log</name><argument_list pos:start="281:15" pos:end="281:70">(<argument pos:start="281:16" pos:end="281:23"><expr pos:start="281:16" pos:end="281:23"><name pos:start="281:16" pos:end="281:23"><name pos:start="281:16" pos:end="281:16">s</name><operator pos:start="281:17" pos:end="281:18">-&gt;</operator><name pos:start="281:19" pos:end="281:23">avctx</name></name></expr></argument>, <argument pos:start="281:26" pos:end="281:37"><expr pos:start="281:26" pos:end="281:37"><name pos:start="281:26" pos:end="281:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:40" pos:end="281:69"><expr pos:start="281:40" pos:end="281:69"><literal type="string" pos:start="281:40" pos:end="281:69">"error in unpack_dct_coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="283:9" pos:end="283:18">return <expr pos:start="283:16" pos:end="283:17"><operator pos:start="283:16" pos:end="283:16">-</operator><literal type="number" pos:start="283:17" pos:end="283:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="287:5" pos:end="287:35"><name pos:start="287:5" pos:end="287:14">STOP_TIMER</name><argument_list pos:start="287:15" pos:end="287:35">(<argument pos:start="287:16" pos:end="287:34"><literal type="string" pos:start="287:16" pos:end="287:34">"unpack_dct_coeffs"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="289:5" pos:end="307:40">{<block_content pos:start="289:6" pos:end="307:39"><decl_stmt pos:start="289:6" pos:end="293:71"><decl pos:start="289:6" pos:end="293:70"><type pos:start="289:6" pos:end="289:16"><name pos:start="289:6" pos:end="289:16">START_TIMER</name></type>



    <name pos:start="293:5" pos:end="293:25">reverse_dc_prediction</name><argument_list pos:start="293:26" pos:end="293:70">(<argument pos:start="293:27" pos:end="293:27"><expr pos:start="293:27" pos:end="293:27"><name pos:start="293:27" pos:end="293:27">s</name></expr></argument>, <argument pos:start="293:30" pos:end="293:30"><expr pos:start="293:30" pos:end="293:30"><literal type="number" pos:start="293:30" pos:end="293:30">0</literal></expr></argument>, <argument pos:start="293:33" pos:end="293:49"><expr pos:start="293:33" pos:end="293:49"><name pos:start="293:33" pos:end="293:49"><name pos:start="293:33" pos:end="293:33">s</name><operator pos:start="293:34" pos:end="293:35">-&gt;</operator><name pos:start="293:36" pos:end="293:49">fragment_width</name></name></expr></argument>, <argument pos:start="293:52" pos:end="293:69"><expr pos:start="293:52" pos:end="293:69"><name pos:start="293:52" pos:end="293:69"><name pos:start="293:52" pos:end="293:52">s</name><operator pos:start="293:53" pos:end="293:54">-&gt;</operator><name pos:start="293:55" pos:end="293:69">fragment_height</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt pos:start="295:5" pos:end="305:5"><if pos:start="295:5" pos:end="305:5">if <condition pos:start="295:8" pos:end="295:46">(<expr pos:start="295:9" pos:end="295:45"><operator pos:start="295:9" pos:end="295:9">(</operator><name pos:start="295:10" pos:end="295:21"><name pos:start="295:10" pos:end="295:14">avctx</name><operator pos:start="295:15" pos:end="295:16">-&gt;</operator><name pos:start="295:17" pos:end="295:21">flags</name></name> <operator pos:start="295:23" pos:end="295:23">&amp;</operator> <name pos:start="295:25" pos:end="295:39">CODEC_FLAG_GRAY</name><operator pos:start="295:40" pos:end="295:40">)</operator> <operator pos:start="295:42" pos:end="295:43">==</operator> <literal type="number" pos:start="295:45" pos:end="295:45">0</literal></expr>)</condition> <block pos:start="295:48" pos:end="305:5">{<block_content pos:start="297:9" pos:end="303:59">

        <expr_stmt pos:start="297:9" pos:end="299:59"><expr pos:start="297:9" pos:end="299:58"><call pos:start="297:9" pos:end="299:58"><name pos:start="297:9" pos:end="297:29">reverse_dc_prediction</name><argument_list pos:start="297:30" pos:end="299:58">(<argument pos:start="297:31" pos:end="297:31"><expr pos:start="297:31" pos:end="297:31"><name pos:start="297:31" pos:end="297:31">s</name></expr></argument>, <argument pos:start="297:34" pos:end="297:53"><expr pos:start="297:34" pos:end="297:53"><name pos:start="297:34" pos:end="297:53"><name pos:start="297:34" pos:end="297:34">s</name><operator pos:start="297:35" pos:end="297:36">-&gt;</operator><name pos:start="297:37" pos:end="297:50">fragment_start</name><index pos:start="297:51" pos:end="297:53">[<expr pos:start="297:52" pos:end="297:52"><literal type="number" pos:start="297:52" pos:end="297:52">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="299:13" pos:end="299:33"><expr pos:start="299:13" pos:end="299:33"><name pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:13">s</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:29">fragment_width</name></name> <operator pos:start="299:31" pos:end="299:31">/</operator> <literal type="number" pos:start="299:33" pos:end="299:33">2</literal></expr></argument>, <argument pos:start="299:36" pos:end="299:57"><expr pos:start="299:36" pos:end="299:57"><name pos:start="299:36" pos:end="299:53"><name pos:start="299:36" pos:end="299:36">s</name><operator pos:start="299:37" pos:end="299:38">-&gt;</operator><name pos:start="299:39" pos:end="299:53">fragment_height</name></name> <operator pos:start="299:55" pos:end="299:55">/</operator> <literal type="number" pos:start="299:57" pos:end="299:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="303:59"><expr pos:start="301:9" pos:end="303:58"><call pos:start="301:9" pos:end="303:58"><name pos:start="301:9" pos:end="301:29">reverse_dc_prediction</name><argument_list pos:start="301:30" pos:end="303:58">(<argument pos:start="301:31" pos:end="301:31"><expr pos:start="301:31" pos:end="301:31"><name pos:start="301:31" pos:end="301:31">s</name></expr></argument>, <argument pos:start="301:34" pos:end="301:53"><expr pos:start="301:34" pos:end="301:53"><name pos:start="301:34" pos:end="301:53"><name pos:start="301:34" pos:end="301:34">s</name><operator pos:start="301:35" pos:end="301:36">-&gt;</operator><name pos:start="301:37" pos:end="301:50">fragment_start</name><index pos:start="301:51" pos:end="301:53">[<expr pos:start="301:52" pos:end="301:52"><literal type="number" pos:start="301:52" pos:end="301:52">2</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="303:13" pos:end="303:33"><expr pos:start="303:13" pos:end="303:33"><name pos:start="303:13" pos:end="303:29"><name pos:start="303:13" pos:end="303:13">s</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:29">fragment_width</name></name> <operator pos:start="303:31" pos:end="303:31">/</operator> <literal type="number" pos:start="303:33" pos:end="303:33">2</literal></expr></argument>, <argument pos:start="303:36" pos:end="303:57"><expr pos:start="303:36" pos:end="303:57"><name pos:start="303:36" pos:end="303:53"><name pos:start="303:36" pos:end="303:36">s</name><operator pos:start="303:37" pos:end="303:38">-&gt;</operator><name pos:start="303:39" pos:end="303:53">fragment_height</name></name> <operator pos:start="303:55" pos:end="303:55">/</operator> <literal type="number" pos:start="303:57" pos:end="303:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="307:5" pos:end="307:39"><name pos:start="307:5" pos:end="307:14">STOP_TIMER</name><argument_list pos:start="307:15" pos:end="307:39">(<argument pos:start="307:16" pos:end="307:38"><literal type="string" pos:start="307:16" pos:end="307:38">"reverse_dc_prediction"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="309:5" pos:end="317:35">{<block_content pos:start="309:6" pos:end="317:34"><macro pos:start="309:6" pos:end="309:16"><name pos:start="309:6" pos:end="309:16">START_TIMER</name></macro>



    <for pos:start="313:5" pos:end="315:27">for <control pos:start="313:9" pos:end="313:46">(<init pos:start="313:10" pos:end="313:15"><expr pos:start="313:10" pos:end="313:14"><name pos:start="313:10" pos:end="313:10">i</name> <operator pos:start="313:12" pos:end="313:12">=</operator> <literal type="number" pos:start="313:14" pos:end="313:14">0</literal></expr>;</init> <condition pos:start="313:17" pos:end="313:41"><expr pos:start="313:17" pos:end="313:40"><name pos:start="313:17" pos:end="313:17">i</name> <operator pos:start="313:19" pos:end="313:19">&lt;</operator> <name pos:start="313:21" pos:end="313:40"><name pos:start="313:21" pos:end="313:21">s</name><operator pos:start="313:22" pos:end="313:23">-&gt;</operator><name pos:start="313:24" pos:end="313:40">macroblock_height</name></name></expr>;</condition> <incr pos:start="313:43" pos:end="313:45"><expr pos:start="313:43" pos:end="313:45"><name pos:start="313:43" pos:end="313:43">i</name><operator pos:start="313:44" pos:end="313:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="315:9" pos:end="315:27"><block_content pos:start="315:9" pos:end="315:27">

        <expr_stmt pos:start="315:9" pos:end="315:27"><expr pos:start="315:9" pos:end="315:26"><call pos:start="315:9" pos:end="315:26"><name pos:start="315:9" pos:end="315:20">render_slice</name><argument_list pos:start="315:21" pos:end="315:26">(<argument pos:start="315:22" pos:end="315:22"><expr pos:start="315:22" pos:end="315:22"><name pos:start="315:22" pos:end="315:22">s</name></expr></argument>, <argument pos:start="315:25" pos:end="315:25"><expr pos:start="315:25" pos:end="315:25"><name pos:start="315:25" pos:end="315:25">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <macro pos:start="317:5" pos:end="317:34"><name pos:start="317:5" pos:end="317:14">STOP_TIMER</name><argument_list pos:start="317:15" pos:end="317:34">(<argument pos:start="317:16" pos:end="317:33"><literal type="string" pos:start="317:16" pos:end="317:33">"render_fragments"</literal></argument>)</argument_list></macro></block_content>}</block>



    <block pos:start="321:5" pos:end="328:0">{<block_content pos:start="321:6" pos:end="325:35"><decl_stmt pos:start="321:6" pos:end="323:25"><decl pos:start="321:6" pos:end="323:24"><type pos:start="321:6" pos:end="321:16"><name pos:start="321:6" pos:end="321:16">START_TIMER</name></type>

    <name pos:start="323:5" pos:end="323:21">apply_loop_filter</name><argument_list pos:start="323:22" pos:end="323:24">(<argument pos:start="323:23" pos:end="323:23"><expr pos:start="323:23" pos:end="323:23"><name pos:start="323:23" pos:end="323:23">s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro pos:start="325:5" pos:end="325:35"><name pos:start="325:5" pos:end="325:14">STOP_TIMER</name><argument_list pos:start="325:15" pos:end="325:35">(<argument pos:start="325:16" pos:end="325:34"><literal type="string" pos:start="325:16" pos:end="325:34">"apply_loop_filter"</literal></argument>)</argument_list></macro></block_content>}</block>

<cpp:if pos:start="327:1" pos:end="327:18">#<cpp:directive pos:start="327:2" pos:end="327:3">if</cpp:directive> <expr pos:start="327:5" pos:end="327:18"><name pos:start="327:5" pos:end="327:18">KEYFRAMES_ONLY</name></expr></cpp:if>

</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="331:1" pos:end="331:6">#<cpp:directive pos:start="331:2" pos:end="331:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="335:5" pos:end="335:31"><expr pos:start="335:5" pos:end="335:30"><operator pos:start="335:5" pos:end="335:5">*</operator><name pos:start="335:6" pos:end="335:14">data_size</name><operator pos:start="335:15" pos:end="335:15">=</operator><sizeof pos:start="335:16" pos:end="335:30">sizeof<argument_list pos:start="335:22" pos:end="335:30">(<argument pos:start="335:23" pos:end="335:29"><expr pos:start="335:23" pos:end="335:29"><name pos:start="335:23" pos:end="335:29">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:38"><expr pos:start="337:5" pos:end="337:37"><operator pos:start="337:5" pos:end="337:5">*</operator><operator pos:start="337:6" pos:end="337:6">(</operator><name pos:start="337:7" pos:end="337:13">AVFrame</name><operator pos:start="337:14" pos:end="337:14">*</operator><operator pos:start="337:15" pos:end="337:15">)</operator><name pos:start="337:16" pos:end="337:19">data</name><operator pos:start="337:20" pos:end="337:20">=</operator> <name pos:start="337:22" pos:end="337:37"><name pos:start="337:22" pos:end="337:22">s</name><operator pos:start="337:23" pos:end="337:24">-&gt;</operator><name pos:start="337:25" pos:end="337:37">current_frame</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="341:5" pos:end="343:22">/* release the last frame, if it is allocated and if it is not the

     * golden frame */</comment>

    <if_stmt pos:start="345:5" pos:end="349:53"><if pos:start="345:5" pos:end="349:53">if <condition pos:start="345:8" pos:end="347:59">(<expr pos:start="345:9" pos:end="347:58"><operator pos:start="345:9" pos:end="345:9">(</operator><name pos:start="345:10" pos:end="345:30"><name pos:start="345:10" pos:end="345:10">s</name><operator pos:start="345:11" pos:end="345:12">-&gt;</operator><name pos:start="345:13" pos:end="345:22">last_frame</name><operator pos:start="345:23" pos:end="345:23">.</operator><name pos:start="345:24" pos:end="345:27">data</name><index pos:start="345:28" pos:end="345:30">[<expr pos:start="345:29" pos:end="345:29"><literal type="number" pos:start="345:29" pos:end="345:29">0</literal></expr>]</index></name><operator pos:start="345:31" pos:end="345:31">)</operator> <operator pos:start="345:33" pos:end="345:34">&amp;&amp;</operator>

        <operator pos:start="347:9" pos:end="347:9">(</operator><name pos:start="347:10" pos:end="347:30"><name pos:start="347:10" pos:end="347:10">s</name><operator pos:start="347:11" pos:end="347:12">-&gt;</operator><name pos:start="347:13" pos:end="347:22">last_frame</name><operator pos:start="347:23" pos:end="347:23">.</operator><name pos:start="347:24" pos:end="347:27">data</name><index pos:start="347:28" pos:end="347:30">[<expr pos:start="347:29" pos:end="347:29"><literal type="number" pos:start="347:29" pos:end="347:29">0</literal></expr>]</index></name> <operator pos:start="347:32" pos:end="347:33">!=</operator> <name pos:start="347:35" pos:end="347:57"><name pos:start="347:35" pos:end="347:35">s</name><operator pos:start="347:36" pos:end="347:37">-&gt;</operator><name pos:start="347:38" pos:end="347:49">golden_frame</name><operator pos:start="347:50" pos:end="347:50">.</operator><name pos:start="347:51" pos:end="347:54">data</name><index pos:start="347:55" pos:end="347:57">[<expr pos:start="347:56" pos:end="347:56"><literal type="number" pos:start="347:56" pos:end="347:56">0</literal></expr>]</index></name><operator pos:start="347:58" pos:end="347:58">)</operator></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:53"><block_content pos:start="349:9" pos:end="349:53">

        <expr_stmt pos:start="349:9" pos:end="349:53"><expr pos:start="349:9" pos:end="349:52"><call pos:start="349:9" pos:end="349:52"><name pos:start="349:9" pos:end="349:29"><name pos:start="349:9" pos:end="349:13">avctx</name><operator pos:start="349:14" pos:end="349:15">-&gt;</operator><name pos:start="349:16" pos:end="349:29">release_buffer</name></name><argument_list pos:start="349:30" pos:end="349:52">(<argument pos:start="349:31" pos:end="349:35"><expr pos:start="349:31" pos:end="349:35"><name pos:start="349:31" pos:end="349:35">avctx</name></expr></argument>, <argument pos:start="349:38" pos:end="349:51"><expr pos:start="349:38" pos:end="349:51"><operator pos:start="349:38" pos:end="349:38">&amp;</operator><name pos:start="349:39" pos:end="349:51"><name pos:start="349:39" pos:end="349:39">s</name><operator pos:start="349:40" pos:end="349:41">-&gt;</operator><name pos:start="349:42" pos:end="349:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="353:5" pos:end="353:41">/* shuffle frames (last = current) */</comment>

    <expr_stmt pos:start="355:5" pos:end="355:36"><expr pos:start="355:5" pos:end="355:35"><name pos:start="355:5" pos:end="355:17"><name pos:start="355:5" pos:end="355:5">s</name><operator pos:start="355:6" pos:end="355:7">-&gt;</operator><name pos:start="355:8" pos:end="355:17">last_frame</name></name><operator pos:start="355:18" pos:end="355:18">=</operator> <name pos:start="355:20" pos:end="355:35"><name pos:start="355:20" pos:end="355:20">s</name><operator pos:start="355:21" pos:end="355:22">-&gt;</operator><name pos:start="355:23" pos:end="355:35">current_frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:35"><expr pos:start="357:5" pos:end="357:34"><name pos:start="357:5" pos:end="357:28"><name pos:start="357:5" pos:end="357:5">s</name><operator pos:start="357:6" pos:end="357:7">-&gt;</operator><name pos:start="357:8" pos:end="357:20">current_frame</name><operator pos:start="357:21" pos:end="357:21">.</operator><name pos:start="357:22" pos:end="357:25">data</name><index pos:start="357:26" pos:end="357:28">[<expr pos:start="357:27" pos:end="357:27"><literal type="number" pos:start="357:27" pos:end="357:27">0</literal></expr>]</index></name><operator pos:start="357:29" pos:end="357:29">=</operator> <name pos:start="357:31" pos:end="357:34">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="357:37" pos:end="357:96">/* ensure that we catch any access to this released frame */</comment>



    <return pos:start="361:5" pos:end="361:20">return <expr pos:start="361:12" pos:end="361:19"><name pos:start="361:12" pos:end="361:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
