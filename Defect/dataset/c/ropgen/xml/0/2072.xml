<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2072.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:6">X86CPU</name> <modifier pos:start="1:8" pos:end="1:8">*</modifier></type><name pos:start="1:9" pos:end="1:22">cpu_x86_create</name><parameter_list pos:start="1:23" pos:end="1:59">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:44"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:44">cpu_model</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:51">Error</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier><modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:15">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">X86CPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:22">= <expr pos:start="5:19" pos:end="5:22"><name pos:start="5:19" pos:end="5:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">ObjectClass</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUClass</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:9">gchar</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier><modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:24">model_pieces</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:14">name</name></decl>, <decl pos:start="13:17" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:25">features</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:16">error</name> <init pos:start="15:18" pos:end="15:23">= <expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:24">typename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:16">model_pieces</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:48"><name pos:start="21:20" pos:end="21:29">g_strsplit</name><argument_list pos:start="21:30" pos:end="21:48">(<argument pos:start="21:31" pos:end="21:39"><expr pos:start="21:31" pos:end="21:39"><name pos:start="21:31" pos:end="21:39">cpu_model</name></expr></argument>, <argument pos:start="21:42" pos:end="21:44"><expr pos:start="21:42" pos:end="21:44"><literal type="string" pos:start="21:42" pos:end="21:44">","</literal></expr></argument>, <argument pos:start="21:47" pos:end="21:47"><expr pos:start="21:47" pos:end="21:47"><literal type="number" pos:start="21:47" pos:end="21:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:25">(<expr pos:start="23:9" pos:end="23:24"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:24"><name pos:start="23:10" pos:end="23:21">model_pieces</name><index pos:start="23:22" pos:end="23:24">[<expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="23:27" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:59"><expr pos:start="25:9" pos:end="25:58"><call pos:start="25:9" pos:end="25:58"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="25:58">(<argument pos:start="25:20" pos:end="25:25"><expr pos:start="25:20" pos:end="25:25"><operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:25">error</name></expr></argument>, <argument pos:start="25:28" pos:end="25:57"><expr pos:start="25:28" pos:end="25:57"><literal type="string" pos:start="25:28" pos:end="25:57">"Invalid/empty CPU model name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:8">name</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <name pos:start="31:12" pos:end="31:26"><name pos:start="31:12" pos:end="31:23">model_pieces</name><index pos:start="31:24" pos:end="31:26">[<expr pos:start="31:25" pos:end="31:25"><literal type="number" pos:start="31:25" pos:end="31:25">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:12">features</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:27">model_pieces</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:6">oc</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:36"><name pos:start="37:10" pos:end="37:30">x86_cpu_class_by_name</name><argument_list pos:start="37:31" pos:end="37:36">(<argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><name pos:start="37:32" pos:end="37:35">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:10">oc</name> <operator pos:start="39:12" pos:end="39:13">==</operator> <name pos:start="39:15" pos:end="39:18">NULL</name></expr>)</condition> <block pos:start="39:21" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:17">

        <expr_stmt pos:start="41:9" pos:end="41:70"><expr pos:start="41:9" pos:end="41:69"><call pos:start="41:9" pos:end="41:69"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="41:69">(<argument pos:start="41:20" pos:end="41:25"><expr pos:start="41:20" pos:end="41:25"><operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:25">error</name></expr></argument>, <argument pos:start="41:28" pos:end="41:62"><expr pos:start="41:28" pos:end="41:62"><literal type="string" pos:start="41:28" pos:end="41:62">"Unable to find CPU definition: %s"</literal></expr></argument>, <argument pos:start="41:65" pos:end="41:68"><expr pos:start="41:65" pos:end="41:68"><name pos:start="41:65" pos:end="41:68">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:23"><expr pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:6">cc</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <call pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:18">CPU_CLASS</name><argument_list pos:start="47:19" pos:end="47:22">(<argument pos:start="47:20" pos:end="47:21"><expr pos:start="47:20" pos:end="47:21"><name pos:start="47:20" pos:end="47:21">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:41"><expr pos:start="49:5" pos:end="49:40"><name pos:start="49:5" pos:end="49:12">typename</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:40"><name pos:start="49:16" pos:end="49:36">object_class_get_name</name><argument_list pos:start="49:37" pos:end="49:40">(<argument pos:start="49:38" pos:end="49:39"><expr pos:start="49:38" pos:end="49:39"><name pos:start="49:38" pos:end="49:39">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:51"><expr pos:start="53:5" pos:end="53:50"><call pos:start="53:5" pos:end="53:50"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:6">cc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:22">parse_features</name></name><argument_list pos:start="53:23" pos:end="53:50">(<argument pos:start="53:24" pos:end="53:31"><expr pos:start="53:24" pos:end="53:31"><name pos:start="53:24" pos:end="53:31">typename</name></expr></argument>, <argument pos:start="53:34" pos:end="53:41"><expr pos:start="53:34" pos:end="53:41"><name pos:start="53:34" pos:end="53:41">features</name></expr></argument>, <argument pos:start="53:44" pos:end="53:49"><expr pos:start="53:44" pos:end="53:49"><operator pos:start="53:44" pos:end="53:44">&amp;</operator><name pos:start="53:45" pos:end="53:49">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:7">cpu</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:39"><name pos:start="55:11" pos:end="55:17">X86_CPU</name><argument_list pos:start="55:18" pos:end="55:39">(<argument pos:start="55:19" pos:end="55:38"><expr pos:start="55:19" pos:end="55:38"><call pos:start="55:19" pos:end="55:38"><name pos:start="55:19" pos:end="55:28">object_new</name><argument_list pos:start="55:29" pos:end="55:38">(<argument pos:start="55:30" pos:end="55:37"><expr pos:start="55:30" pos:end="55:37"><name pos:start="55:30" pos:end="55:37">typename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:14">(<expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:13">error</name></expr>)</condition> <block pos:start="57:16" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:17">

        <goto pos:start="59:9" pos:end="59:17">goto <name pos:start="59:14" pos:end="59:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="65:1" pos:end="65:4"><name pos:start="65:1" pos:end="65:3">out</name>:</label>

    <if_stmt pos:start="67:5" pos:end="79:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:13">error</name> <operator pos:start="67:15" pos:end="67:16">!=</operator> <name pos:start="67:18" pos:end="67:21">NULL</name></expr>)</condition> <block pos:start="67:24" pos:end="79:5">{<block_content pos:start="69:9" pos:end="77:9">

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><call pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:23">error_propagate</name><argument_list pos:start="69:24" pos:end="69:36">(<argument pos:start="69:25" pos:end="69:28"><expr pos:start="69:25" pos:end="69:28"><name pos:start="69:25" pos:end="69:28">errp</name></expr></argument>, <argument pos:start="69:31" pos:end="69:35"><expr pos:start="69:31" pos:end="69:35"><name pos:start="69:31" pos:end="69:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:16">(<expr pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">cpu</name></expr>)</condition> <block pos:start="71:18" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:23">

            <expr_stmt pos:start="73:13" pos:end="73:38"><expr pos:start="73:13" pos:end="73:37"><call pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:24">object_unref</name><argument_list pos:start="73:25" pos:end="73:37">(<argument pos:start="73:26" pos:end="73:36"><expr pos:start="73:26" pos:end="73:36"><call pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:31">OBJECT</name><argument_list pos:start="73:32" pos:end="73:36">(<argument pos:start="73:33" pos:end="73:35"><expr pos:start="73:33" pos:end="73:35"><name pos:start="73:33" pos:end="73:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:23"><expr pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:15">cpu</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:22">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><call pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:14">g_strfreev</name><argument_list pos:start="81:15" pos:end="81:28">(<argument pos:start="81:16" pos:end="81:27"><expr pos:start="81:16" pos:end="81:27"><name pos:start="81:16" pos:end="81:27">model_pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="83:5" pos:end="83:15">return <expr pos:start="83:12" pos:end="83:14"><name pos:start="83:12" pos:end="83:14">cpu</name></expr>;</return>

</block_content>}</block></function>
</unit>
