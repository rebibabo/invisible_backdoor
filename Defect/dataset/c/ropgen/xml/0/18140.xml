<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18140.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">vpc_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="295:1">{<block_content pos:start="7:5" pos:end="293:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVVPCState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">VHDFooter</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:21">footer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">VHDDynDiskHeader</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:36">dyndisk_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:15">buf</name><index pos:start="15:16" pos:end="15:28">[<expr pos:start="15:17" pos:end="15:27"><name pos:start="15:17" pos:end="15:27">HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:21">checksum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">disk_type</name> <init pos:start="19:19" pos:end="19:31">= <expr pos:start="19:21" pos:end="19:31"><name pos:start="19:21" pos:end="19:31">VHD_DYNAMIC</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:62"><expr pos:start="25:5" pos:end="25:61"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:61"><name pos:start="25:11" pos:end="25:20">bdrv_pread</name><argument_list pos:start="25:21" pos:end="25:61">(<argument pos:start="25:22" pos:end="25:29"><expr pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:23">bs</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:29">file</name></name></expr></argument>, <argument pos:start="25:32" pos:end="25:32"><expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr></argument>, <argument pos:start="25:35" pos:end="25:47"><expr pos:start="25:35" pos:end="25:47"><name pos:start="25:35" pos:end="25:47"><name pos:start="25:35" pos:end="25:35">s</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:47">footer_buf</name></name></expr></argument>, <argument pos:start="25:50" pos:end="25:60"><expr pos:start="25:50" pos:end="25:60"><name pos:start="25:50" pos:end="25:60">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:10">footer</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:23">VHDFooter</name> <operator pos:start="35:25" pos:end="35:25">*</operator><operator pos:start="35:26" pos:end="35:26">)</operator> <name pos:start="35:28" pos:end="35:40"><name pos:start="35:28" pos:end="35:28">s</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:40">footer_buf</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="79:5"><if pos:start="37:5" pos:end="79:5">if <condition pos:start="37:8" pos:end="37:48">(<expr pos:start="37:9" pos:end="37:47"><call pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:15">strncmp</name><argument_list pos:start="37:16" pos:end="37:47">(<argument pos:start="37:17" pos:end="37:31"><expr pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:22">footer</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">creator</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:43"><expr pos:start="37:34" pos:end="37:43"><literal type="string" pos:start="37:34" pos:end="37:43">"conectix"</literal></expr></argument>, <argument pos:start="37:46" pos:end="37:46"><expr pos:start="37:46" pos:end="37:46"><literal type="number" pos:start="37:46" pos:end="37:46">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:50" pos:end="79:5">{<block_content pos:start="39:9" pos:end="77:30">

        <decl_stmt pos:start="39:9" pos:end="39:50"><decl pos:start="39:9" pos:end="39:49"><type pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:15">int64_t</name></type> <name pos:start="39:17" pos:end="39:22">offset</name> <init pos:start="39:24" pos:end="39:49">= <expr pos:start="39:26" pos:end="39:49"><call pos:start="39:26" pos:end="39:49"><name pos:start="39:26" pos:end="39:39">bdrv_getlength</name><argument_list pos:start="39:40" pos:end="39:49">(<argument pos:start="39:41" pos:end="39:48"><expr pos:start="39:41" pos:end="39:48"><name pos:start="39:41" pos:end="39:48"><name pos:start="39:41" pos:end="39:42">bs</name><operator pos:start="39:43" pos:end="39:44">-&gt;</operator><name pos:start="39:45" pos:end="39:48">file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:18">offset</name> <operator pos:start="41:20" pos:end="41:20">&lt;</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>)</condition> <block pos:start="41:25" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:22">

            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:24">offset</name></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:22">goto <name pos:start="45:18" pos:end="45:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="53:9">else if <condition pos:start="47:19" pos:end="47:40">(<expr pos:start="47:20" pos:end="47:39"><name pos:start="47:20" pos:end="47:25">offset</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:39">HEADER_SIZE</name></expr>)</condition> <block pos:start="47:42" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:22">

            <expr_stmt pos:start="49:13" pos:end="49:26"><expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <operator pos:start="49:19" pos:end="49:19">-</operator><name pos:start="49:20" pos:end="49:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="51:13" pos:end="51:22">goto <name pos:start="51:18" pos:end="51:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="57:78">/* If a fixed disk, the footer is found only at the end of the file */</comment>

        <expr_stmt pos:start="59:9" pos:end="61:38"><expr pos:start="59:9" pos:end="61:37"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="61:37"><name pos:start="59:15" pos:end="59:24">bdrv_pread</name><argument_list pos:start="59:25" pos:end="61:37">(<argument pos:start="59:26" pos:end="59:33"><expr pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:27">bs</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">file</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:53"><expr pos:start="59:36" pos:end="59:53"><name pos:start="59:36" pos:end="59:41">offset</name><operator pos:start="59:42" pos:end="59:42">-</operator><name pos:start="59:43" pos:end="59:53">HEADER_SIZE</name></expr></argument>, <argument pos:start="59:56" pos:end="59:68"><expr pos:start="59:56" pos:end="59:68"><name pos:start="59:56" pos:end="59:68"><name pos:start="59:56" pos:end="59:56">s</name><operator pos:start="59:57" pos:end="59:58">-&gt;</operator><name pos:start="59:59" pos:end="59:68">footer_buf</name></name></expr></argument>,

                         <argument pos:start="61:26" pos:end="61:36"><expr pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:36">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:52">(<expr pos:start="69:13" pos:end="69:51"><call pos:start="69:13" pos:end="69:51"><name pos:start="69:13" pos:end="69:19">strncmp</name><argument_list pos:start="69:20" pos:end="69:51">(<argument pos:start="69:21" pos:end="69:35"><expr pos:start="69:21" pos:end="69:35"><name pos:start="69:21" pos:end="69:35"><name pos:start="69:21" pos:end="69:26">footer</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:35">creator</name></name></expr></argument>, <argument pos:start="69:38" pos:end="69:47"><expr pos:start="69:38" pos:end="69:47"><literal type="string" pos:start="69:38" pos:end="69:47">"conectix"</literal></expr></argument>, <argument pos:start="69:50" pos:end="69:50"><expr pos:start="69:50" pos:end="69:50"><literal type="number" pos:start="69:50" pos:end="69:50">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:54" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:22">

            <expr_stmt pos:start="71:13" pos:end="71:31"><expr pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <operator pos:start="71:19" pos:end="71:19">-</operator><name pos:start="71:20" pos:end="71:30">EMEDIUMTYPE</name></expr>;</expr_stmt>

            <goto pos:start="73:13" pos:end="73:22">goto <name pos:start="73:18" pos:end="73:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:17">disk_type</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:29">VHD_FIXED</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:45"><expr pos:start="83:5" pos:end="83:44"><name pos:start="83:5" pos:end="83:12">checksum</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:44"><name pos:start="83:16" pos:end="83:26">be32_to_cpu</name><argument_list pos:start="83:27" pos:end="83:44">(<argument pos:start="83:28" pos:end="83:43"><expr pos:start="83:28" pos:end="83:43"><name pos:start="83:28" pos:end="83:43"><name pos:start="83:28" pos:end="83:33">footer</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:43">checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:25"><expr pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:20"><name pos:start="85:5" pos:end="85:10">footer</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:20">checksum</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <literal type="number" pos:start="85:24" pos:end="85:24">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="91:42"><if pos:start="87:5" pos:end="91:42">if <condition pos:start="87:8" pos:end="87:61">(<expr pos:start="87:9" pos:end="87:60"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:20">vpc_checksum</name><argument_list pos:start="87:21" pos:end="87:48">(<argument pos:start="87:22" pos:end="87:34"><expr pos:start="87:22" pos:end="87:34"><name pos:start="87:22" pos:end="87:34"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:34">footer_buf</name></name></expr></argument>, <argument pos:start="87:37" pos:end="87:47"><expr pos:start="87:37" pos:end="87:47"><name pos:start="87:37" pos:end="87:47">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="87:50" pos:end="87:51">!=</operator> <name pos:start="87:53" pos:end="87:60">checksum</name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="91:42"><block_content pos:start="89:9" pos:end="91:42">

        <expr_stmt pos:start="89:9" pos:end="91:42"><expr pos:start="89:9" pos:end="91:41"><call pos:start="89:9" pos:end="91:41"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="91:41">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="91:26"><expr pos:start="89:25" pos:end="91:26"><literal type="string" pos:start="89:25" pos:end="89:68">"block-vpc: The header checksum of '%s' is "</literal>

            <literal type="string" pos:start="91:13" pos:end="91:26">"incorrect.\n"</literal></expr></argument>, <argument pos:start="91:29" pos:end="91:40"><expr pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:30">bs</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:40">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:75">/* Write 'checksum' back to footer, or else will leave it with zero. */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:45"><expr pos:start="97:5" pos:end="97:44"><name pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:10">footer</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:20">checksum</name></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <call pos:start="97:24" pos:end="97:44"><name pos:start="97:24" pos:end="97:34">be32_to_cpu</name><argument_list pos:start="97:35" pos:end="97:44">(<argument pos:start="97:36" pos:end="97:43"><expr pos:start="97:36" pos:end="97:43"><name pos:start="97:36" pos:end="97:43">checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="101:5" pos:end="101:72">// The visible size of a image in Virtual PC depends on the geometry</comment>

    <comment type="line" pos:start="103:5" pos:end="103:75">// rather than on the size stored in the footer (the size in the footer</comment>

    <comment type="line" pos:start="105:5" pos:end="105:28">// is too large usually)</comment>

    <expr_stmt pos:start="107:5" pos:end="109:73"><expr pos:start="107:5" pos:end="109:72"><name pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:6">bs</name><operator pos:start="107:7" pos:end="107:8">-&gt;</operator><name pos:start="107:9" pos:end="107:21">total_sectors</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <operator pos:start="107:25" pos:end="107:25">(</operator><name pos:start="107:26" pos:end="107:32">int64_t</name><operator pos:start="107:33" pos:end="107:33">)</operator>

        <call pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:19">be16_to_cpu</name><argument_list pos:start="109:20" pos:end="109:33">(<argument pos:start="109:21" pos:end="109:32"><expr pos:start="109:21" pos:end="109:32"><name pos:start="109:21" pos:end="109:32"><name pos:start="109:21" pos:end="109:26">footer</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:32">cyls</name></name></expr></argument>)</argument_list></call> <operator pos:start="109:35" pos:end="109:35">*</operator> <name pos:start="109:37" pos:end="109:49"><name pos:start="109:37" pos:end="109:42">footer</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:49">heads</name></name> <operator pos:start="109:51" pos:end="109:51">*</operator> <name pos:start="109:53" pos:end="109:72"><name pos:start="109:53" pos:end="109:58">footer</name><operator pos:start="109:59" pos:end="109:60">-&gt;</operator><name pos:start="109:61" pos:end="109:72">secs_per_cyl</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="121:7">/* images created with disk2vhd report a far higher virtual size

     * than expected with the cyls * heads * sectors_per_cyl formula.

     * use the footer-&gt;size instead if the image was created with

     * disk2vhd.

     */</comment>

    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:48">(<expr pos:start="123:9" pos:end="123:47"><operator pos:start="123:9" pos:end="123:9">!</operator><call pos:start="123:10" pos:end="123:47"><name pos:start="123:10" pos:end="123:16">strncmp</name><argument_list pos:start="123:17" pos:end="123:47">(<argument pos:start="123:18" pos:end="123:36"><expr pos:start="123:18" pos:end="123:36"><name pos:start="123:18" pos:end="123:36"><name pos:start="123:18" pos:end="123:23">footer</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:36">creator_app</name></name></expr></argument>, <argument pos:start="123:39" pos:end="123:43"><expr pos:start="123:39" pos:end="123:43"><literal type="string" pos:start="123:39" pos:end="123:43">"d2v"</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:46"><expr pos:start="123:46" pos:end="123:46"><literal type="number" pos:start="123:46" pos:end="123:46">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:50" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:73">

        <expr_stmt pos:start="125:9" pos:end="125:73"><expr pos:start="125:9" pos:end="125:72"><name pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:10">bs</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:25">total_sectors</name></name> <operator pos:start="125:27" pos:end="125:27">=</operator> <call pos:start="125:29" pos:end="125:53"><name pos:start="125:29" pos:end="125:39">be64_to_cpu</name><argument_list pos:start="125:40" pos:end="125:53">(<argument pos:start="125:41" pos:end="125:52"><expr pos:start="125:41" pos:end="125:52"><name pos:start="125:41" pos:end="125:52"><name pos:start="125:41" pos:end="125:46">footer</name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:52">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:55" pos:end="125:55">/</operator> <name pos:start="125:57" pos:end="125:72">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:57">/* Allow a maximum disk size of approximately 2 TB */</comment>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:49">(<expr pos:start="133:9" pos:end="133:48"><name pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:10">bs</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:25">total_sectors</name></name> <operator pos:start="133:27" pos:end="133:28">&gt;=</operator> <literal type="number" pos:start="133:30" pos:end="133:36">65535LL</literal> <operator pos:start="133:38" pos:end="133:38">*</operator> <literal type="number" pos:start="133:40" pos:end="133:42">255</literal> <operator pos:start="133:44" pos:end="133:44">*</operator> <literal type="number" pos:start="133:46" pos:end="133:48">255</literal></expr>)</condition> <block pos:start="133:51" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:18">

        <expr_stmt pos:start="135:9" pos:end="135:21"><expr pos:start="135:9" pos:end="135:20"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <operator pos:start="135:15" pos:end="135:15">-</operator><name pos:start="135:16" pos:end="135:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:18">goto <name pos:start="137:14" pos:end="137:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="259:5"><if pos:start="143:5" pos:end="259:5">if <condition pos:start="143:8" pos:end="143:33">(<expr pos:start="143:9" pos:end="143:32"><name pos:start="143:9" pos:end="143:17">disk_type</name> <operator pos:start="143:19" pos:end="143:20">==</operator> <name pos:start="143:22" pos:end="143:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="143:35" pos:end="259:5">{<block_content pos:start="145:9" pos:end="258:0">

        <expr_stmt pos:start="145:9" pos:end="147:38"><expr pos:start="145:9" pos:end="147:37"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="147:37"><name pos:start="145:15" pos:end="145:24">bdrv_pread</name><argument_list pos:start="145:25" pos:end="147:37">(<argument pos:start="145:26" pos:end="145:33"><expr pos:start="145:26" pos:end="145:33"><name pos:start="145:26" pos:end="145:33"><name pos:start="145:26" pos:end="145:27">bs</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:33">file</name></name></expr></argument>, <argument pos:start="145:36" pos:end="145:67"><expr pos:start="145:36" pos:end="145:67"><call pos:start="145:36" pos:end="145:67"><name pos:start="145:36" pos:end="145:46">be64_to_cpu</name><argument_list pos:start="145:47" pos:end="145:67">(<argument pos:start="145:48" pos:end="145:66"><expr pos:start="145:48" pos:end="145:66"><name pos:start="145:48" pos:end="145:66"><name pos:start="145:48" pos:end="145:53">footer</name><operator pos:start="145:54" pos:end="145:55">-&gt;</operator><name pos:start="145:56" pos:end="145:66">data_offset</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:70" pos:end="145:72"><expr pos:start="145:70" pos:end="145:72"><name pos:start="145:70" pos:end="145:72">buf</name></expr></argument>,

                         <argument pos:start="147:26" pos:end="147:36"><expr pos:start="147:26" pos:end="147:36"><name pos:start="147:26" pos:end="147:36">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:20">(<expr pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:15">ret</name> <operator pos:start="149:17" pos:end="149:17">&lt;</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition> <block pos:start="149:22" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:22">

            <goto pos:start="151:13" pos:end="151:22">goto <name pos:start="151:18" pos:end="151:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:50"><expr pos:start="157:9" pos:end="157:49"><name pos:start="157:9" pos:end="157:22">dyndisk_header</name> <operator pos:start="157:24" pos:end="157:24">=</operator> <operator pos:start="157:26" pos:end="157:26">(</operator><name pos:start="157:27" pos:end="157:42">VHDDynDiskHeader</name> <operator pos:start="157:44" pos:end="157:44">*</operator><operator pos:start="157:45" pos:end="157:45">)</operator> <name pos:start="157:47" pos:end="157:49">buf</name></expr>;</expr_stmt>



        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:58">(<expr pos:start="161:13" pos:end="161:57"><call pos:start="161:13" pos:end="161:57"><name pos:start="161:13" pos:end="161:19">strncmp</name><argument_list pos:start="161:20" pos:end="161:57">(<argument pos:start="161:21" pos:end="161:41"><expr pos:start="161:21" pos:end="161:41"><name pos:start="161:21" pos:end="161:41"><name pos:start="161:21" pos:end="161:34">dyndisk_header</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:41">magic</name></name></expr></argument>, <argument pos:start="161:44" pos:end="161:53"><expr pos:start="161:44" pos:end="161:53"><literal type="string" pos:start="161:44" pos:end="161:53">"cxsparse"</literal></expr></argument>, <argument pos:start="161:56" pos:end="161:56"><expr pos:start="161:56" pos:end="161:56"><literal type="number" pos:start="161:56" pos:end="161:56">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:60" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:22">

            <expr_stmt pos:start="163:13" pos:end="163:26"><expr pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <operator pos:start="163:19" pos:end="163:19">-</operator><name pos:start="163:20" pos:end="163:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="165:13" pos:end="165:22">goto <name pos:start="165:18" pos:end="165:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:64"><expr pos:start="171:9" pos:end="171:63"><name pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:21">block_size</name></name> <operator pos:start="171:23" pos:end="171:23">=</operator> <call pos:start="171:25" pos:end="171:63"><name pos:start="171:25" pos:end="171:35">be32_to_cpu</name><argument_list pos:start="171:36" pos:end="171:63">(<argument pos:start="171:37" pos:end="171:62"><expr pos:start="171:37" pos:end="171:62"><name pos:start="171:37" pos:end="171:62"><name pos:start="171:37" pos:end="171:50">dyndisk_header</name><operator pos:start="171:51" pos:end="171:52">-&gt;</operator><name pos:start="171:53" pos:end="171:62">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:68"><expr pos:start="173:9" pos:end="173:67"><name pos:start="173:9" pos:end="173:22"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:22">bitmap_size</name></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <operator pos:start="173:26" pos:end="173:26">(</operator><operator pos:start="173:27" pos:end="173:27">(</operator><name pos:start="173:28" pos:end="173:40"><name pos:start="173:28" pos:end="173:28">s</name><operator pos:start="173:29" pos:end="173:30">-&gt;</operator><name pos:start="173:31" pos:end="173:40">block_size</name></name> <operator pos:start="173:42" pos:end="173:42">/</operator> <operator pos:start="173:44" pos:end="173:44">(</operator><literal type="number" pos:start="173:45" pos:end="173:45">8</literal> <operator pos:start="173:47" pos:end="173:47">*</operator> <literal type="number" pos:start="173:49" pos:end="173:51">512</literal><operator pos:start="173:52" pos:end="173:52">)</operator><operator pos:start="173:53" pos:end="173:53">)</operator> <operator pos:start="173:55" pos:end="173:55">+</operator> <literal type="number" pos:start="173:57" pos:end="173:59">511</literal><operator pos:start="173:60" pos:end="173:60">)</operator> <operator pos:start="173:62" pos:end="173:62">&amp;</operator> <operator pos:start="173:64" pos:end="173:64">~</operator><literal type="number" pos:start="173:65" pos:end="173:67">511</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:78"><expr pos:start="177:9" pos:end="177:77"><name pos:start="177:9" pos:end="177:28"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:28">max_table_entries</name></name> <operator pos:start="177:30" pos:end="177:30">=</operator> <call pos:start="177:32" pos:end="177:77"><name pos:start="177:32" pos:end="177:42">be32_to_cpu</name><argument_list pos:start="177:43" pos:end="177:77">(<argument pos:start="177:44" pos:end="177:76"><expr pos:start="177:44" pos:end="177:76"><name pos:start="177:44" pos:end="177:76"><name pos:start="177:44" pos:end="177:57">dyndisk_header</name><operator pos:start="177:58" pos:end="177:59">-&gt;</operator><name pos:start="177:60" pos:end="177:76">max_table_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:58"><expr pos:start="179:9" pos:end="179:57"><name pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:20">pagetable</name></name> <operator pos:start="179:22" pos:end="179:22">=</operator> <call pos:start="179:24" pos:end="179:57"><name pos:start="179:24" pos:end="179:31">g_malloc</name><argument_list pos:start="179:32" pos:end="179:57">(<argument pos:start="179:33" pos:end="179:56"><expr pos:start="179:33" pos:end="179:56"><name pos:start="179:33" pos:end="179:52"><name pos:start="179:33" pos:end="179:33">s</name><operator pos:start="179:34" pos:end="179:35">-&gt;</operator><name pos:start="179:36" pos:end="179:52">max_table_entries</name></name> <operator pos:start="179:54" pos:end="179:54">*</operator> <literal type="number" pos:start="179:56" pos:end="179:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:66"><expr pos:start="183:9" pos:end="183:65"><name pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:9">s</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:21">bat_offset</name></name> <operator pos:start="183:23" pos:end="183:23">=</operator> <call pos:start="183:25" pos:end="183:65"><name pos:start="183:25" pos:end="183:35">be64_to_cpu</name><argument_list pos:start="183:36" pos:end="183:65">(<argument pos:start="183:37" pos:end="183:64"><expr pos:start="183:37" pos:end="183:64"><name pos:start="183:37" pos:end="183:64"><name pos:start="183:37" pos:end="183:50">dyndisk_header</name><operator pos:start="183:51" pos:end="183:52">-&gt;</operator><name pos:start="183:53" pos:end="183:64">table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="189:51"><expr pos:start="187:9" pos:end="189:50"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="189:50"><name pos:start="187:15" pos:end="187:24">bdrv_pread</name><argument_list pos:start="187:25" pos:end="189:50">(<argument pos:start="187:26" pos:end="187:33"><expr pos:start="187:26" pos:end="187:33"><name pos:start="187:26" pos:end="187:33"><name pos:start="187:26" pos:end="187:27">bs</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:33">file</name></name></expr></argument>, <argument pos:start="187:36" pos:end="187:48"><expr pos:start="187:36" pos:end="187:48"><name pos:start="187:36" pos:end="187:48"><name pos:start="187:36" pos:end="187:36">s</name><operator pos:start="187:37" pos:end="187:38">-&gt;</operator><name pos:start="187:39" pos:end="187:48">bat_offset</name></name></expr></argument>, <argument pos:start="187:51" pos:end="187:62"><expr pos:start="187:51" pos:end="187:62"><name pos:start="187:51" pos:end="187:62"><name pos:start="187:51" pos:end="187:51">s</name><operator pos:start="187:52" pos:end="187:53">-&gt;</operator><name pos:start="187:54" pos:end="187:62">pagetable</name></name></expr></argument>,

                         <argument pos:start="189:26" pos:end="189:49"><expr pos:start="189:26" pos:end="189:49"><name pos:start="189:26" pos:end="189:45"><name pos:start="189:26" pos:end="189:26">s</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:45">max_table_entries</name></name> <operator pos:start="189:47" pos:end="189:47">*</operator> <literal type="number" pos:start="189:49" pos:end="189:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="195:9"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:20">(<expr pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">&lt;</operator> <literal type="number" pos:start="191:19" pos:end="191:19">0</literal></expr>)</condition> <block pos:start="191:22" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:22">

            <goto pos:start="193:13" pos:end="193:22">goto <name pos:start="193:18" pos:end="193:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="199:9" pos:end="201:70"><expr pos:start="199:9" pos:end="201:69"><name pos:start="199:9" pos:end="199:33"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:33">free_data_block_offset</name></name> <operator pos:start="199:35" pos:end="199:35">=</operator>

            <operator pos:start="201:13" pos:end="201:13">(</operator><name pos:start="201:14" pos:end="201:26"><name pos:start="201:14" pos:end="201:14">s</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:26">bat_offset</name></name> <operator pos:start="201:28" pos:end="201:28">+</operator> <operator pos:start="201:30" pos:end="201:30">(</operator><name pos:start="201:31" pos:end="201:50"><name pos:start="201:31" pos:end="201:31">s</name><operator pos:start="201:32" pos:end="201:33">-&gt;</operator><name pos:start="201:34" pos:end="201:50">max_table_entries</name></name> <operator pos:start="201:52" pos:end="201:52">*</operator> <literal type="number" pos:start="201:54" pos:end="201:54">4</literal><operator pos:start="201:55" pos:end="201:55">)</operator> <operator pos:start="201:57" pos:end="201:57">+</operator> <literal type="number" pos:start="201:59" pos:end="201:61">511</literal><operator pos:start="201:62" pos:end="201:62">)</operator> <operator pos:start="201:64" pos:end="201:64">&amp;</operator> <operator pos:start="201:66" pos:end="201:66">~</operator><literal type="number" pos:start="201:67" pos:end="201:69">511</literal></expr>;</expr_stmt>



        <for pos:start="205:9" pos:end="225:9">for <control pos:start="205:13" pos:end="205:50">(<init pos:start="205:14" pos:end="205:19"><expr pos:start="205:14" pos:end="205:18"><name pos:start="205:14" pos:end="205:14">i</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>;</init> <condition pos:start="205:21" pos:end="205:45"><expr pos:start="205:21" pos:end="205:44"><name pos:start="205:21" pos:end="205:21">i</name> <operator pos:start="205:23" pos:end="205:23">&lt;</operator> <name pos:start="205:25" pos:end="205:44"><name pos:start="205:25" pos:end="205:25">s</name><operator pos:start="205:26" pos:end="205:27">-&gt;</operator><name pos:start="205:28" pos:end="205:44">max_table_entries</name></name></expr>;</condition> <incr pos:start="205:47" pos:end="205:49"><expr pos:start="205:47" pos:end="205:49"><name pos:start="205:47" pos:end="205:47">i</name><operator pos:start="205:48" pos:end="205:49">++</operator></expr></incr>)</control> <block pos:start="205:52" pos:end="225:9">{<block_content pos:start="207:13" pos:end="223:13">

            <expr_stmt pos:start="207:13" pos:end="207:43"><expr pos:start="207:13" pos:end="207:42"><call pos:start="207:13" pos:end="207:42"><name pos:start="207:13" pos:end="207:24">be32_to_cpus</name><argument_list pos:start="207:25" pos:end="207:42">(<argument pos:start="207:26" pos:end="207:41"><expr pos:start="207:26" pos:end="207:41"><operator pos:start="207:26" pos:end="207:26">&amp;</operator><name pos:start="207:27" pos:end="207:41"><name pos:start="207:27" pos:end="207:27">s</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:38">pagetable</name><index pos:start="207:39" pos:end="207:41">[<expr pos:start="207:40" pos:end="207:40"><name pos:start="207:40" pos:end="207:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="223:13"><if pos:start="209:13" pos:end="223:13">if <condition pos:start="209:16" pos:end="209:46">(<expr pos:start="209:17" pos:end="209:45"><name pos:start="209:17" pos:end="209:31"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:28">pagetable</name><index pos:start="209:29" pos:end="209:31">[<expr pos:start="209:30" pos:end="209:30"><name pos:start="209:30" pos:end="209:30">i</name></expr>]</index></name> <operator pos:start="209:33" pos:end="209:34">!=</operator> <literal type="number" pos:start="209:36" pos:end="209:45">0xFFFFFFFF</literal></expr>)</condition> <block pos:start="209:48" pos:end="223:13">{<block_content pos:start="211:17" pos:end="221:17">

                <decl_stmt pos:start="211:17" pos:end="213:51"><decl pos:start="211:17" pos:end="213:50"><type pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:23">int64_t</name></type> <name pos:start="211:25" pos:end="211:28">next</name> <init pos:start="211:30" pos:end="213:50">= <expr pos:start="211:32" pos:end="213:50"><operator pos:start="211:32" pos:end="211:32">(</operator><literal type="number" pos:start="211:33" pos:end="211:35">512</literal> <operator pos:start="211:37" pos:end="211:37">*</operator> <operator pos:start="211:39" pos:end="211:39">(</operator><name pos:start="211:40" pos:end="211:46">int64_t</name><operator pos:start="211:47" pos:end="211:47">)</operator> <name pos:start="211:49" pos:end="211:63"><name pos:start="211:49" pos:end="211:49">s</name><operator pos:start="211:50" pos:end="211:51">-&gt;</operator><name pos:start="211:52" pos:end="211:60">pagetable</name><index pos:start="211:61" pos:end="211:63">[<expr pos:start="211:62" pos:end="211:62"><name pos:start="211:62" pos:end="211:62">i</name></expr>]</index></name><operator pos:start="211:64" pos:end="211:64">)</operator> <operator pos:start="211:66" pos:end="211:66">+</operator>

                    <name pos:start="213:21" pos:end="213:34"><name pos:start="213:21" pos:end="213:21">s</name><operator pos:start="213:22" pos:end="213:23">-&gt;</operator><name pos:start="213:24" pos:end="213:34">bitmap_size</name></name> <operator pos:start="213:36" pos:end="213:36">+</operator> <name pos:start="213:38" pos:end="213:50"><name pos:start="213:38" pos:end="213:38">s</name><operator pos:start="213:39" pos:end="213:40">-&gt;</operator><name pos:start="213:41" pos:end="213:50">block_size</name></name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="217:17" pos:end="221:17"><if pos:start="217:17" pos:end="221:17">if <condition pos:start="217:20" pos:end="217:53">(<expr pos:start="217:21" pos:end="217:52"><name pos:start="217:21" pos:end="217:24">next</name> <operator pos:start="217:26" pos:end="217:26">&gt;</operator> <name pos:start="217:28" pos:end="217:52"><name pos:start="217:28" pos:end="217:28">s</name><operator pos:start="217:29" pos:end="217:30">-&gt;</operator><name pos:start="217:31" pos:end="217:52">free_data_block_offset</name></name></expr>)</condition> <block pos:start="217:55" pos:end="221:17">{<block_content pos:start="219:21" pos:end="219:53">

                    <expr_stmt pos:start="219:21" pos:end="219:53"><expr pos:start="219:21" pos:end="219:52"><name pos:start="219:21" pos:end="219:45"><name pos:start="219:21" pos:end="219:21">s</name><operator pos:start="219:22" pos:end="219:23">-&gt;</operator><name pos:start="219:24" pos:end="219:45">free_data_block_offset</name></name> <operator pos:start="219:47" pos:end="219:47">=</operator> <name pos:start="219:49" pos:end="219:52">next</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="229:9" pos:end="239:9"><if pos:start="229:9" pos:end="239:9">if <condition pos:start="229:12" pos:end="229:65">(<expr pos:start="229:13" pos:end="229:64"><name pos:start="229:13" pos:end="229:37"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:37">free_data_block_offset</name></name> <operator pos:start="229:39" pos:end="229:39">&gt;</operator> <call pos:start="229:41" pos:end="229:64"><name pos:start="229:41" pos:end="229:54">bdrv_getlength</name><argument_list pos:start="229:55" pos:end="229:64">(<argument pos:start="229:56" pos:end="229:63"><expr pos:start="229:56" pos:end="229:63"><name pos:start="229:56" pos:end="229:63"><name pos:start="229:56" pos:end="229:57">bs</name><operator pos:start="229:58" pos:end="229:59">-&gt;</operator><name pos:start="229:60" pos:end="229:63">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:67" pos:end="239:9">{<block_content pos:start="231:13" pos:end="237:22">

            <expr_stmt pos:start="231:13" pos:end="233:79"><expr pos:start="231:13" pos:end="233:78"><call pos:start="231:13" pos:end="233:78"><name pos:start="231:13" pos:end="231:22">error_setg</name><argument_list pos:start="231:23" pos:end="233:78">(<argument pos:start="231:24" pos:end="231:27"><expr pos:start="231:24" pos:end="231:27"><name pos:start="231:24" pos:end="231:27">errp</name></expr></argument>, <argument pos:start="231:30" pos:end="233:77"><expr pos:start="231:30" pos:end="233:77"><literal type="string" pos:start="231:30" pos:end="231:78">"block-vpc: free_data_block_offset points after "</literal>

                             <literal type="string" pos:start="233:30" pos:end="233:77">"the end of file. The image has been truncated."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:26"><expr pos:start="235:13" pos:end="235:25"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <operator pos:start="235:19" pos:end="235:19">-</operator><name pos:start="235:20" pos:end="235:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="237:13" pos:end="237:22">goto <name pos:start="237:18" pos:end="237:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="243:9" pos:end="248:0"><expr pos:start="243:9" pos:end="243:44"><name pos:start="243:9" pos:end="243:29"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:29">last_bitmap_offset</name></name> <operator pos:start="243:31" pos:end="243:31">=</operator> <operator pos:start="243:33" pos:end="243:33">(</operator><name pos:start="243:34" pos:end="243:40">int64_t</name><operator pos:start="243:41" pos:end="243:41">)</operator> <operator pos:start="243:43" pos:end="243:43">-</operator><literal type="number" pos:start="243:44" pos:end="243:44">1</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="247:1" pos:end="247:12">#<cpp:directive pos:start="247:2" pos:end="247:6">ifdef</cpp:directive> <name pos:start="247:8" pos:end="247:12">CACHE</name></cpp:ifdef>

        <expr_stmt pos:start="249:9" pos:end="249:40"><expr pos:start="249:9" pos:end="249:39"><name pos:start="249:9" pos:end="249:23"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:23">pageentry_u8</name></name> <operator pos:start="249:25" pos:end="249:25">=</operator> <call pos:start="249:27" pos:end="249:39"><name pos:start="249:27" pos:end="249:34">g_malloc</name><argument_list pos:start="249:35" pos:end="249:39">(<argument pos:start="249:36" pos:end="249:38"><expr pos:start="249:36" pos:end="249:38"><literal type="number" pos:start="249:36" pos:end="249:38">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:43"><expr pos:start="251:9" pos:end="251:42"><name pos:start="251:9" pos:end="251:24"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:24">pageentry_u32</name></name> <operator pos:start="251:26" pos:end="251:26">=</operator> <name pos:start="251:28" pos:end="251:42"><name pos:start="251:28" pos:end="251:28">s</name><operator pos:start="251:29" pos:end="251:30">-&gt;</operator><name pos:start="251:31" pos:end="251:42">pageentry_u8</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:43"><expr pos:start="253:9" pos:end="253:42"><name pos:start="253:9" pos:end="253:24"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:24">pageentry_u16</name></name> <operator pos:start="253:26" pos:end="253:26">=</operator> <name pos:start="253:28" pos:end="253:42"><name pos:start="253:28" pos:end="253:28">s</name><operator pos:start="253:29" pos:end="253:30">-&gt;</operator><name pos:start="253:31" pos:end="253:42">pageentry_u8</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="258:0"><expr pos:start="255:9" pos:end="255:30"><name pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:9">s</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:25">last_pagetable</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <operator pos:start="255:29" pos:end="255:29">-</operator><literal type="number" pos:start="255:30" pos:end="255:30">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="257:1" pos:end="257:6">#<cpp:directive pos:start="257:2" pos:end="257:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="263:5" pos:end="263:33"><expr pos:start="263:5" pos:end="263:32"><call pos:start="263:5" pos:end="263:32"><name pos:start="263:5" pos:end="263:22">qemu_co_mutex_init</name><argument_list pos:start="263:23" pos:end="263:32">(<argument pos:start="263:24" pos:end="263:31"><expr pos:start="263:24" pos:end="263:31"><operator pos:start="263:24" pos:end="263:24">&amp;</operator><name pos:start="263:25" pos:end="263:31"><name pos:start="263:25" pos:end="263:25">s</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:52">/* Disable migration when VHD images are used */</comment>

    <expr_stmt pos:start="269:5" pos:end="273:56"><expr pos:start="269:5" pos:end="273:55"><call pos:start="269:5" pos:end="273:55"><name pos:start="269:5" pos:end="269:13">error_set</name><argument_list pos:start="269:14" pos:end="273:55">(<argument pos:start="269:15" pos:end="269:35"><expr pos:start="269:15" pos:end="269:35"><operator pos:start="269:15" pos:end="269:15">&amp;</operator><name pos:start="269:16" pos:end="269:35"><name pos:start="269:16" pos:end="269:16">s</name><operator pos:start="269:17" pos:end="269:18">-&gt;</operator><name pos:start="269:19" pos:end="269:35">migration_blocker</name></name></expr></argument>,

              <argument pos:start="271:15" pos:end="271:53"><expr pos:start="271:15" pos:end="271:53"><name pos:start="271:15" pos:end="271:53">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

              <argument pos:start="273:15" pos:end="273:19"><expr pos:start="273:15" pos:end="273:19"><literal type="string" pos:start="273:15" pos:end="273:19">"vpc"</literal></expr></argument>, <argument pos:start="273:22" pos:end="273:36"><expr pos:start="273:22" pos:end="273:36"><name pos:start="273:22" pos:end="273:36"><name pos:start="273:22" pos:end="273:23">bs</name><operator pos:start="273:24" pos:end="273:25">-&gt;</operator><name pos:start="273:26" pos:end="273:36">device_name</name></name></expr></argument>, <argument pos:start="273:39" pos:end="273:54"><expr pos:start="273:39" pos:end="273:54"><literal type="string" pos:start="273:39" pos:end="273:54">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:46"><expr pos:start="275:5" pos:end="275:45"><call pos:start="275:5" pos:end="275:45"><name pos:start="275:5" pos:end="275:23">migrate_add_blocker</name><argument_list pos:start="275:24" pos:end="275:45">(<argument pos:start="275:25" pos:end="275:44"><expr pos:start="275:25" pos:end="275:44"><name pos:start="275:25" pos:end="275:44"><name pos:start="275:25" pos:end="275:25">s</name><operator pos:start="275:26" pos:end="275:27">-&gt;</operator><name pos:start="275:28" pos:end="275:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="279:5" pos:end="279:13">return <expr pos:start="279:12" pos:end="279:12"><literal type="number" pos:start="279:12" pos:end="279:12">0</literal></expr>;</return>



<label pos:start="283:1" pos:end="283:5"><name pos:start="283:1" pos:end="283:4">fail</name>:</label>

    <expr_stmt pos:start="285:5" pos:end="288:0"><expr pos:start="285:5" pos:end="285:24"><call pos:start="285:5" pos:end="285:24"><name pos:start="285:5" pos:end="285:10">g_free</name><argument_list pos:start="285:11" pos:end="285:24">(<argument pos:start="285:12" pos:end="285:23"><expr pos:start="285:12" pos:end="285:23"><name pos:start="285:12" pos:end="285:23"><name pos:start="285:12" pos:end="285:12">s</name><operator pos:start="285:13" pos:end="285:14">-&gt;</operator><name pos:start="285:15" pos:end="285:23">pagetable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="287:1" pos:end="287:12">#<cpp:directive pos:start="287:2" pos:end="287:6">ifdef</cpp:directive> <name pos:start="287:8" pos:end="287:12">CACHE</name></cpp:ifdef>

    <expr_stmt pos:start="289:5" pos:end="292:0"><expr pos:start="289:5" pos:end="289:27"><call pos:start="289:5" pos:end="289:27"><name pos:start="289:5" pos:end="289:10">g_free</name><argument_list pos:start="289:11" pos:end="289:27">(<argument pos:start="289:12" pos:end="289:26"><expr pos:start="289:12" pos:end="289:26"><name pos:start="289:12" pos:end="289:26"><name pos:start="289:12" pos:end="289:12">s</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:26">pageentry_u8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>

    <return pos:start="293:5" pos:end="293:15">return <expr pos:start="293:12" pos:end="293:14"><name pos:start="293:12" pos:end="293:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
