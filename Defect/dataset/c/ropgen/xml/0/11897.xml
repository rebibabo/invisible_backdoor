<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11897.c" pos:tabs="8"><function pos:start="1:1" pos:end="341:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">got_frame</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="341:1">{<block_content pos:start="7:5" pos:end="339:15">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:14">PCXContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier> <specifier pos:start="7:18" pos:end="7:22">const</specifier></type> <name pos:start="7:24" pos:end="7:24">s</name> <init pos:start="7:26" pos:end="7:43">= <expr pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:32">avctx</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:20">picture</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier> <specifier pos:start="11:15" pos:end="11:19">const</specifier></type> <name pos:start="11:21" pos:end="11:21">p</name> <init pos:start="11:23" pos:end="11:35">= <expr pos:start="11:25" pos:end="11:35"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:26">s</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:35">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">compressed</name></decl>, <decl pos:start="15:21" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:24">xmin</name></decl>, <decl pos:start="15:27" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:27" pos:end="15:30">ymin</name></decl>, <decl pos:start="15:33" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:33" pos:end="15:36">xmax</name></decl>, <decl pos:start="15:39" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:39" pos:end="15:42">ymax</name></decl>, <decl pos:start="15:45" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:45" pos:end="15:47">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:36"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:18">w</name></decl>, <decl pos:start="17:21" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:21" pos:end="17:21">h</name></decl>, <decl pos:start="17:24" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:24" pos:end="17:37">bits_per_pixel</name></decl>, <decl pos:start="17:40" pos:end="17:53"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:40" pos:end="17:53">bytes_per_line</name></decl>, <decl pos:start="17:56" pos:end="17:62"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:56" pos:end="17:62">nplanes</name></decl>, <decl pos:start="17:65" pos:end="17:70"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:65" pos:end="17:70">stride</name></decl>, <decl pos:start="17:73" pos:end="17:73"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:73" pos:end="17:73">y</name></decl>, <decl pos:start="17:76" pos:end="17:76"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:76" pos:end="17:76">x</name></decl>,

                 <decl pos:start="19:18" pos:end="19:35"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="19:18" pos:end="19:35">bytes_per_scanline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">ptr</name></decl>, <decl pos:start="21:19" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:13"><modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:27">scanline</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:35"><if pos:start="25:5" pos:end="27:35">if <condition pos:start="25:8" pos:end="25:26">(<expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:13">avpkt</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:19">size</name></name> <operator pos:start="25:21" pos:end="25:21">&lt;</operator> <literal type="number" pos:start="25:23" pos:end="25:25">128</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:35"><block_content pos:start="27:9" pos:end="27:35">

        <return pos:start="27:9" pos:end="27:35">return <expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><call pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:20">bytestream2_init</name><argument_list pos:start="31:21" pos:end="31:51">(<argument pos:start="31:22" pos:end="31:24"><expr pos:start="31:22" pos:end="31:24"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:24">gb</name></expr></argument>, <argument pos:start="31:27" pos:end="31:37"><expr pos:start="31:27" pos:end="31:37"><name pos:start="31:27" pos:end="31:37"><name pos:start="31:27" pos:end="31:31">avpkt</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:37">data</name></name></expr></argument>, <argument pos:start="31:40" pos:end="31:50"><expr pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:44">avpkt</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:77">(<expr pos:start="35:9" pos:end="35:76"><call pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:29">bytestream2_get_byteu</name><argument_list pos:start="35:30" pos:end="35:34">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><operator pos:start="35:31" pos:end="35:31">&amp;</operator><name pos:start="35:32" pos:end="35:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="35:36" pos:end="35:37">!=</operator> <literal type="number" pos:start="35:39" pos:end="35:42">0x0a</literal> <operator pos:start="35:44" pos:end="35:45">||</operator> <call pos:start="35:47" pos:end="35:72"><name pos:start="35:47" pos:end="35:67">bytestream2_get_byteu</name><argument_list pos:start="35:68" pos:end="35:72">(<argument pos:start="35:69" pos:end="35:71"><expr pos:start="35:69" pos:end="35:71"><operator pos:start="35:69" pos:end="35:69">&amp;</operator><name pos:start="35:70" pos:end="35:71">gb</name></expr></argument>)</argument_list></call> <operator pos:start="35:74" pos:end="35:74">&gt;</operator> <literal type="number" pos:start="35:76" pos:end="35:76">5</literal></expr>)</condition> <block pos:start="35:79" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:35">

        <expr_stmt pos:start="37:9" pos:end="37:70"><expr pos:start="37:9" pos:end="37:69"><call pos:start="37:9" pos:end="37:69"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:69">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:68"><expr pos:start="37:37" pos:end="37:68"><literal type="string" pos:start="37:37" pos:end="37:68">"this is not PCX encoded data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:14">compressed</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:43"><name pos:start="45:18" pos:end="45:38">bytestream2_get_byteu</name><argument_list pos:start="45:39" pos:end="45:43">(<argument pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><operator pos:start="45:40" pos:end="45:40">&amp;</operator><name pos:start="45:41" pos:end="45:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:48"><expr pos:start="47:5" pos:end="47:47"><name pos:start="47:5" pos:end="47:18">bits_per_pixel</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:47"><name pos:start="47:22" pos:end="47:42">bytestream2_get_byteu</name><argument_list pos:start="47:43" pos:end="47:47">(<argument pos:start="47:44" pos:end="47:46"><expr pos:start="47:44" pos:end="47:46"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:8">xmin</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:37"><name pos:start="49:12" pos:end="49:32">bytestream2_get_le16u</name><argument_list pos:start="49:33" pos:end="49:37">(<argument pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:38"><expr pos:start="51:5" pos:end="51:37"><name pos:start="51:5" pos:end="51:8">ymin</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:37"><name pos:start="51:12" pos:end="51:32">bytestream2_get_le16u</name><argument_list pos:start="51:33" pos:end="51:37">(<argument pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><operator pos:start="51:34" pos:end="51:34">&amp;</operator><name pos:start="51:35" pos:end="51:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:8">xmax</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:37"><name pos:start="53:12" pos:end="53:32">bytestream2_get_le16u</name><argument_list pos:start="53:33" pos:end="53:37">(<argument pos:start="53:34" pos:end="53:36"><expr pos:start="53:34" pos:end="53:36"><operator pos:start="53:34" pos:end="53:34">&amp;</operator><name pos:start="53:35" pos:end="53:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:38"><expr pos:start="55:5" pos:end="55:37"><name pos:start="55:5" pos:end="55:8">ymax</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:37"><name pos:start="55:12" pos:end="55:32">bytestream2_get_le16u</name><argument_list pos:start="55:33" pos:end="55:37">(<argument pos:start="55:34" pos:end="55:36"><expr pos:start="55:34" pos:end="55:36"><operator pos:start="55:34" pos:end="55:34">&amp;</operator><name pos:start="55:35" pos:end="55:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:64"><expr pos:start="57:5" pos:end="57:63"><name pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:9">avctx</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:30">sample_aspect_ratio</name><operator pos:start="57:31" pos:end="57:31">.</operator><name pos:start="57:32" pos:end="57:34">num</name></name> <operator pos:start="57:36" pos:end="57:36">=</operator> <call pos:start="57:38" pos:end="57:63"><name pos:start="57:38" pos:end="57:58">bytestream2_get_le16u</name><argument_list pos:start="57:59" pos:end="57:63">(<argument pos:start="57:60" pos:end="57:62"><expr pos:start="57:60" pos:end="57:62"><operator pos:start="57:60" pos:end="57:60">&amp;</operator><name pos:start="57:61" pos:end="57:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:64"><expr pos:start="59:5" pos:end="59:63"><name pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:9">avctx</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:30">sample_aspect_ratio</name><operator pos:start="59:31" pos:end="59:31">.</operator><name pos:start="59:32" pos:end="59:34">den</name></name> <operator pos:start="59:36" pos:end="59:36">=</operator> <call pos:start="59:38" pos:end="59:63"><name pos:start="59:38" pos:end="59:58">bytestream2_get_le16u</name><argument_list pos:start="59:59" pos:end="59:63">(<argument pos:start="59:60" pos:end="59:62"><expr pos:start="59:60" pos:end="59:62"><operator pos:start="59:60" pos:end="59:60">&amp;</operator><name pos:start="59:61" pos:end="59:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:35">(<expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:12">xmax</name> <operator pos:start="63:14" pos:end="63:14">&lt;</operator> <name pos:start="63:16" pos:end="63:19">xmin</name> <operator pos:start="63:21" pos:end="63:22">||</operator> <name pos:start="63:24" pos:end="63:27">ymax</name> <operator pos:start="63:29" pos:end="63:29">&lt;</operator> <name pos:start="63:31" pos:end="63:34">ymin</name></expr>)</condition> <block pos:start="63:37" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:66"><expr pos:start="65:9" pos:end="65:65"><call pos:start="65:9" pos:end="65:65"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:65">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:64"><expr pos:start="65:37" pos:end="65:64"><literal type="string" pos:start="65:37" pos:end="65:64">"invalid image dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:24"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:5">w</name> <operator pos:start="73:7" pos:end="73:7">=</operator> <name pos:start="73:9" pos:end="73:12">xmax</name> <operator pos:start="73:14" pos:end="73:14">-</operator> <name pos:start="73:16" pos:end="73:19">xmin</name> <operator pos:start="73:21" pos:end="73:21">+</operator> <literal type="number" pos:start="73:23" pos:end="73:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:5">h</name> <operator pos:start="75:7" pos:end="75:7">=</operator> <name pos:start="75:9" pos:end="75:12">ymax</name> <operator pos:start="75:14" pos:end="75:14">-</operator> <name pos:start="75:16" pos:end="75:19">ymin</name> <operator pos:start="75:21" pos:end="75:21">+</operator> <literal type="number" pos:start="75:23" pos:end="75:23">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:31"><expr pos:start="79:5" pos:end="79:30"><call pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:21">bytestream2_skipu</name><argument_list pos:start="79:22" pos:end="79:30">(<argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><operator pos:start="79:23" pos:end="79:23">&amp;</operator><name pos:start="79:24" pos:end="79:25">gb</name></expr></argument>, <argument pos:start="79:28" pos:end="79:29"><expr pos:start="79:28" pos:end="79:29"><literal type="number" pos:start="79:28" pos:end="79:29">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:52"><expr pos:start="81:5" pos:end="81:51"><name pos:start="81:5" pos:end="81:11">nplanes</name>            <operator pos:start="81:24" pos:end="81:24">=</operator> <call pos:start="81:26" pos:end="81:51"><name pos:start="81:26" pos:end="81:46">bytestream2_get_byteu</name><argument_list pos:start="81:47" pos:end="81:51">(<argument pos:start="81:48" pos:end="81:50"><expr pos:start="81:48" pos:end="81:50"><operator pos:start="81:48" pos:end="81:48">&amp;</operator><name pos:start="81:49" pos:end="81:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:52"><expr pos:start="83:5" pos:end="83:51"><name pos:start="83:5" pos:end="83:18">bytes_per_line</name>     <operator pos:start="83:24" pos:end="83:24">=</operator> <call pos:start="83:26" pos:end="83:51"><name pos:start="83:26" pos:end="83:46">bytestream2_get_le16u</name><argument_list pos:start="83:47" pos:end="83:51">(<argument pos:start="83:48" pos:end="83:50"><expr pos:start="83:48" pos:end="83:50"><operator pos:start="83:48" pos:end="83:48">&amp;</operator><name pos:start="83:49" pos:end="83:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:50"><expr pos:start="85:5" pos:end="85:49"><name pos:start="85:5" pos:end="85:22">bytes_per_scanline</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:32">nplanes</name> <operator pos:start="85:34" pos:end="85:34">*</operator> <name pos:start="85:36" pos:end="85:49">bytes_per_line</name></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:68">(<expr pos:start="89:9" pos:end="89:67"><name pos:start="89:9" pos:end="89:26">bytes_per_scanline</name> <operator pos:start="89:28" pos:end="89:28">&lt;</operator> <operator pos:start="89:30" pos:end="89:30">(</operator><name pos:start="89:31" pos:end="89:31">w</name> <operator pos:start="89:33" pos:end="89:33">*</operator> <name pos:start="89:35" pos:end="89:48">bits_per_pixel</name> <operator pos:start="89:50" pos:end="89:50">*</operator> <name pos:start="89:52" pos:end="89:58">nplanes</name> <operator pos:start="89:60" pos:end="89:60">+</operator> <literal type="number" pos:start="89:62" pos:end="89:62">7</literal><operator pos:start="89:63" pos:end="89:63">)</operator> <operator pos:start="89:65" pos:end="89:65">/</operator> <literal type="number" pos:start="89:67" pos:end="89:67">8</literal></expr>)</condition> <block pos:start="89:70" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:35">

        <expr_stmt pos:start="91:9" pos:end="91:63"><expr pos:start="91:9" pos:end="91:62"><call pos:start="91:9" pos:end="91:62"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:62">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:61"><expr pos:start="91:37" pos:end="91:61"><literal type="string" pos:start="91:37" pos:end="91:61">"PCX data is corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:35">return <expr pos:start="93:16" pos:end="93:34"><name pos:start="93:16" pos:end="93:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="99:5" pos:end="131:5">switch <condition pos:start="99:12" pos:end="99:42">(<expr pos:start="99:13" pos:end="99:41"><operator pos:start="99:13" pos:end="99:13">(</operator><name pos:start="99:14" pos:end="99:20">nplanes</name><operator pos:start="99:21" pos:end="99:22">&lt;&lt;</operator><literal type="number" pos:start="99:23" pos:end="99:23">8</literal><operator pos:start="99:24" pos:end="99:24">)</operator> <operator pos:start="99:26" pos:end="99:26">+</operator> <name pos:start="99:28" pos:end="99:41">bits_per_pixel</name></expr>)</condition> <block pos:start="99:44" pos:end="131:5">{<block_content pos:start="101:9" pos:end="129:39">

        <case pos:start="101:9" pos:end="101:20">case <expr pos:start="101:14" pos:end="101:19"><literal type="number" pos:start="101:14" pos:end="101:19">0x0308</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:46"><expr pos:start="103:13" pos:end="103:45"><name pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:17">avctx</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:26">pix_fmt</name></name> <operator pos:start="103:28" pos:end="103:28">=</operator> <name pos:start="103:30" pos:end="103:45">AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:20">case <expr pos:start="107:14" pos:end="107:19"><literal type="number" pos:start="107:14" pos:end="107:19">0x0108</literal></expr>:</case>

        <case pos:start="109:9" pos:end="109:20">case <expr pos:start="109:14" pos:end="109:19"><literal type="number" pos:start="109:14" pos:end="109:19">0x0104</literal></expr>:</case>

        <case pos:start="111:9" pos:end="111:20">case <expr pos:start="111:14" pos:end="111:19"><literal type="number" pos:start="111:14" pos:end="111:19">0x0102</literal></expr>:</case>

        <case pos:start="113:9" pos:end="113:20">case <expr pos:start="113:14" pos:end="113:19"><literal type="number" pos:start="113:14" pos:end="113:19">0x0101</literal></expr>:</case>

        <case pos:start="115:9" pos:end="115:20">case <expr pos:start="115:14" pos:end="115:19"><literal type="number" pos:start="115:14" pos:end="115:19">0x0401</literal></expr>:</case>

        <case pos:start="117:9" pos:end="117:20">case <expr pos:start="117:14" pos:end="117:19"><literal type="number" pos:start="117:14" pos:end="117:19">0x0301</literal></expr>:</case>

        <case pos:start="119:9" pos:end="119:20">case <expr pos:start="119:14" pos:end="119:19"><literal type="number" pos:start="119:14" pos:end="119:19">0x0201</literal></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:45"><expr pos:start="121:13" pos:end="121:44"><name pos:start="121:13" pos:end="121:26"><name pos:start="121:13" pos:end="121:17">avctx</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:26">pix_fmt</name></name> <operator pos:start="121:28" pos:end="121:28">=</operator> <name pos:start="121:30" pos:end="121:44">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <default pos:start="125:9" pos:end="125:16">default:</default>

            <expr_stmt pos:start="127:13" pos:end="127:62"><expr pos:start="127:13" pos:end="127:61"><call pos:start="127:13" pos:end="127:61"><name pos:start="127:13" pos:end="127:18">av_log</name><argument_list pos:start="127:19" pos:end="127:61">(<argument pos:start="127:20" pos:end="127:24"><expr pos:start="127:20" pos:end="127:24"><name pos:start="127:20" pos:end="127:24">avctx</name></expr></argument>, <argument pos:start="127:27" pos:end="127:38"><expr pos:start="127:27" pos:end="127:38"><name pos:start="127:27" pos:end="127:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:41" pos:end="127:60"><expr pos:start="127:41" pos:end="127:60"><literal type="string" pos:start="127:41" pos:end="127:60">"invalid PCX file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="129:13" pos:end="129:39">return <expr pos:start="129:20" pos:end="129:38"><name pos:start="129:20" pos:end="129:38">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="135:5" pos:end="135:31"><expr pos:start="135:5" pos:end="135:30"><call pos:start="135:5" pos:end="135:30"><name pos:start="135:5" pos:end="135:21">bytestream2_skipu</name><argument_list pos:start="135:22" pos:end="135:30">(<argument pos:start="135:23" pos:end="135:25"><expr pos:start="135:23" pos:end="135:25"><operator pos:start="135:23" pos:end="135:23">&amp;</operator><name pos:start="135:24" pos:end="135:25">gb</name></expr></argument>, <argument pos:start="135:28" pos:end="135:29"><expr pos:start="135:28" pos:end="135:29"><literal type="number" pos:start="135:28" pos:end="135:29">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="141:40"><if pos:start="139:5" pos:end="141:40">if <condition pos:start="139:8" pos:end="139:19">(<expr pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:9">p</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:15">data</name><index pos:start="139:16" pos:end="139:18">[<expr pos:start="139:17" pos:end="139:17"><literal type="number" pos:start="139:17" pos:end="139:17">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:40"><block_content pos:start="141:9" pos:end="141:40">

        <expr_stmt pos:start="141:9" pos:end="141:40"><expr pos:start="141:9" pos:end="141:39"><call pos:start="141:9" pos:end="141:39"><name pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:13">avctx</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:29">release_buffer</name></name><argument_list pos:start="141:30" pos:end="141:39">(<argument pos:start="141:31" pos:end="141:35"><expr pos:start="141:31" pos:end="141:35"><name pos:start="141:31" pos:end="141:35">avctx</name></expr></argument>, <argument pos:start="141:38" pos:end="141:38"><expr pos:start="141:38" pos:end="141:38"><name pos:start="141:38" pos:end="141:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="147:19"><if pos:start="145:5" pos:end="147:19">if <condition pos:start="145:8" pos:end="145:56">(<expr pos:start="145:9" pos:end="145:55"><operator pos:start="145:9" pos:end="145:9">(</operator><name pos:start="145:10" pos:end="145:12">ret</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:50"><name pos:start="145:16" pos:end="145:34">av_image_check_size</name><argument_list pos:start="145:35" pos:end="145:50">(<argument pos:start="145:36" pos:end="145:36"><expr pos:start="145:36" pos:end="145:36"><name pos:start="145:36" pos:end="145:36">w</name></expr></argument>, <argument pos:start="145:39" pos:end="145:39"><expr pos:start="145:39" pos:end="145:39"><name pos:start="145:39" pos:end="145:39">h</name></expr></argument>, <argument pos:start="145:42" pos:end="145:42"><expr pos:start="145:42" pos:end="145:42"><literal type="number" pos:start="145:42" pos:end="145:42">0</literal></expr></argument>, <argument pos:start="145:45" pos:end="145:49"><expr pos:start="145:45" pos:end="145:49"><name pos:start="145:45" pos:end="145:49">avctx</name></expr></argument>)</argument_list></call><operator pos:start="145:51" pos:end="145:51">)</operator> <operator pos:start="145:53" pos:end="145:53">&lt;</operator> <literal type="number" pos:start="145:55" pos:end="145:55">0</literal></expr>)</condition><block type="pseudo" pos:start="147:9" pos:end="147:19"><block_content pos:start="147:9" pos:end="147:19">

        <return pos:start="147:9" pos:end="147:19">return <expr pos:start="147:16" pos:end="147:18"><name pos:start="147:16" pos:end="147:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="149:5" pos:end="151:44"><if pos:start="149:5" pos:end="151:44">if <condition pos:start="149:8" pos:end="149:48">(<expr pos:start="149:9" pos:end="149:47"><name pos:start="149:9" pos:end="149:9">w</name> <operator pos:start="149:11" pos:end="149:12">!=</operator> <name pos:start="149:14" pos:end="149:25"><name pos:start="149:14" pos:end="149:18">avctx</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:25">width</name></name> <operator pos:start="149:27" pos:end="149:28">||</operator> <name pos:start="149:30" pos:end="149:30">h</name> <operator pos:start="149:32" pos:end="149:33">!=</operator> <name pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:39">avctx</name><operator pos:start="149:40" pos:end="149:41">-&gt;</operator><name pos:start="149:42" pos:end="149:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:44"><block_content pos:start="151:9" pos:end="151:44">

        <expr_stmt pos:start="151:9" pos:end="151:44"><expr pos:start="151:9" pos:end="151:43"><call pos:start="151:9" pos:end="151:43"><name pos:start="151:9" pos:end="151:30">avcodec_set_dimensions</name><argument_list pos:start="151:31" pos:end="151:43">(<argument pos:start="151:32" pos:end="151:36"><expr pos:start="151:32" pos:end="151:36"><name pos:start="151:32" pos:end="151:36">avctx</name></expr></argument>, <argument pos:start="151:39" pos:end="151:39"><expr pos:start="151:39" pos:end="151:39"><name pos:start="151:39" pos:end="151:39">w</name></expr></argument>, <argument pos:start="151:42" pos:end="151:42"><expr pos:start="151:42" pos:end="151:42"><name pos:start="151:42" pos:end="151:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="159:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:44">(<expr pos:start="153:9" pos:end="153:43"><operator pos:start="153:9" pos:end="153:9">(</operator><name pos:start="153:10" pos:end="153:12">ret</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:38"><name pos:start="153:16" pos:end="153:28">ff_get_buffer</name><argument_list pos:start="153:29" pos:end="153:38">(<argument pos:start="153:30" pos:end="153:34"><expr pos:start="153:30" pos:end="153:34"><name pos:start="153:30" pos:end="153:34">avctx</name></expr></argument>, <argument pos:start="153:37" pos:end="153:37"><expr pos:start="153:37" pos:end="153:37"><name pos:start="153:37" pos:end="153:37">p</name></expr></argument>)</argument_list></call><operator pos:start="153:39" pos:end="153:39">)</operator> <operator pos:start="153:41" pos:end="153:41">&lt;</operator> <literal type="number" pos:start="153:43" pos:end="153:43">0</literal></expr>)</condition> <block pos:start="153:46" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:19">

        <expr_stmt pos:start="155:9" pos:end="155:61"><expr pos:start="155:9" pos:end="155:60"><call pos:start="155:9" pos:end="155:60"><name pos:start="155:9" pos:end="155:14">av_log</name><argument_list pos:start="155:15" pos:end="155:60">(<argument pos:start="155:16" pos:end="155:20"><expr pos:start="155:16" pos:end="155:20"><name pos:start="155:16" pos:end="155:20">avctx</name></expr></argument>, <argument pos:start="155:23" pos:end="155:34"><expr pos:start="155:23" pos:end="155:34"><name pos:start="155:23" pos:end="155:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:37" pos:end="155:59"><expr pos:start="155:37" pos:end="155:59"><literal type="string" pos:start="155:37" pos:end="155:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:19">return <expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:37"><expr pos:start="163:5" pos:end="163:36"><name pos:start="163:5" pos:end="163:16"><name pos:start="163:5" pos:end="163:5">p</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:16">pict_type</name></name> <operator pos:start="163:18" pos:end="163:18">=</operator> <name pos:start="163:20" pos:end="163:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:24"><expr pos:start="167:5" pos:end="167:23"><name pos:start="167:5" pos:end="167:7">ptr</name>    <operator pos:start="167:12" pos:end="167:12">=</operator> <name pos:start="167:14" pos:end="167:23"><name pos:start="167:14" pos:end="167:14">p</name><operator pos:start="167:15" pos:end="167:16">-&gt;</operator><name pos:start="167:17" pos:end="167:20">data</name><index pos:start="167:21" pos:end="167:23">[<expr pos:start="167:22" pos:end="167:22"><literal type="number" pos:start="167:22" pos:end="167:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:28"><expr pos:start="169:5" pos:end="169:27"><name pos:start="169:5" pos:end="169:10">stride</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <name pos:start="169:14" pos:end="169:27"><name pos:start="169:14" pos:end="169:14">p</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:24">linesize</name><index pos:start="169:25" pos:end="169:27">[<expr pos:start="169:26" pos:end="169:26"><literal type="number" pos:start="169:26" pos:end="169:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:45"><expr pos:start="173:5" pos:end="173:44"><name pos:start="173:5" pos:end="173:12">scanline</name> <operator pos:start="173:14" pos:end="173:14">=</operator> <call pos:start="173:16" pos:end="173:44"><name pos:start="173:16" pos:end="173:24">av_malloc</name><argument_list pos:start="173:25" pos:end="173:44">(<argument pos:start="173:26" pos:end="173:43"><expr pos:start="173:26" pos:end="173:43"><name pos:start="173:26" pos:end="173:43">bytes_per_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="177:31"><if pos:start="175:5" pos:end="177:31">if <condition pos:start="175:8" pos:end="175:18">(<expr pos:start="175:9" pos:end="175:17"><operator pos:start="175:9" pos:end="175:9">!</operator><name pos:start="175:10" pos:end="175:17">scanline</name></expr>)</condition><block type="pseudo" pos:start="177:9" pos:end="177:31"><block_content pos:start="177:9" pos:end="177:31">

        <return pos:start="177:9" pos:end="177:31">return <expr pos:start="177:16" pos:end="177:30"><call pos:start="177:16" pos:end="177:30"><name pos:start="177:16" pos:end="177:22">AVERROR</name><argument_list pos:start="177:23" pos:end="177:30">(<argument pos:start="177:24" pos:end="177:29"><expr pos:start="177:24" pos:end="177:29"><name pos:start="177:24" pos:end="177:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="301:5"><if pos:start="181:5" pos:end="207:5">if <condition pos:start="181:8" pos:end="181:44">(<expr pos:start="181:9" pos:end="181:43"><name pos:start="181:9" pos:end="181:15">nplanes</name> <operator pos:start="181:17" pos:end="181:18">==</operator> <literal type="number" pos:start="181:20" pos:end="181:20">3</literal> <operator pos:start="181:22" pos:end="181:23">&amp;&amp;</operator> <name pos:start="181:25" pos:end="181:38">bits_per_pixel</name> <operator pos:start="181:40" pos:end="181:41">==</operator> <literal type="number" pos:start="181:43" pos:end="181:43">8</literal></expr>)</condition> <block pos:start="181:46" pos:end="207:5">{<block_content pos:start="183:9" pos:end="203:9">

        <for pos:start="183:9" pos:end="203:9">for <control pos:start="183:13" pos:end="183:27">(<init pos:start="183:14" pos:end="183:17"><expr pos:start="183:14" pos:end="183:16"><name pos:start="183:14" pos:end="183:14">y</name><operator pos:start="183:15" pos:end="183:15">=</operator><literal type="number" pos:start="183:16" pos:end="183:16">0</literal></expr>;</init> <condition pos:start="183:19" pos:end="183:22"><expr pos:start="183:19" pos:end="183:21"><name pos:start="183:19" pos:end="183:19">y</name><operator pos:start="183:20" pos:end="183:20">&lt;</operator><name pos:start="183:21" pos:end="183:21">h</name></expr>;</condition> <incr pos:start="183:24" pos:end="183:26"><expr pos:start="183:24" pos:end="183:26"><name pos:start="183:24" pos:end="183:24">y</name><operator pos:start="183:25" pos:end="183:26">++</operator></expr></incr>)</control> <block pos:start="183:29" pos:end="203:9">{<block_content pos:start="185:13" pos:end="201:26">

            <expr_stmt pos:start="185:13" pos:end="185:74"><expr pos:start="185:13" pos:end="185:73"><call pos:start="185:13" pos:end="185:73"><name pos:start="185:13" pos:end="185:26">pcx_rle_decode</name><argument_list pos:start="185:27" pos:end="185:73">(<argument pos:start="185:28" pos:end="185:30"><expr pos:start="185:28" pos:end="185:30"><operator pos:start="185:28" pos:end="185:28">&amp;</operator><name pos:start="185:29" pos:end="185:30">gb</name></expr></argument>, <argument pos:start="185:33" pos:end="185:40"><expr pos:start="185:33" pos:end="185:40"><name pos:start="185:33" pos:end="185:40">scanline</name></expr></argument>, <argument pos:start="185:43" pos:end="185:60"><expr pos:start="185:43" pos:end="185:60"><name pos:start="185:43" pos:end="185:60">bytes_per_scanline</name></expr></argument>, <argument pos:start="185:63" pos:end="185:72"><expr pos:start="185:63" pos:end="185:72"><name pos:start="185:63" pos:end="185:72">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="189:13" pos:end="197:13">for <control pos:start="189:17" pos:end="189:31">(<init pos:start="189:18" pos:end="189:21"><expr pos:start="189:18" pos:end="189:20"><name pos:start="189:18" pos:end="189:18">x</name><operator pos:start="189:19" pos:end="189:19">=</operator><literal type="number" pos:start="189:20" pos:end="189:20">0</literal></expr>;</init> <condition pos:start="189:23" pos:end="189:26"><expr pos:start="189:23" pos:end="189:25"><name pos:start="189:23" pos:end="189:23">x</name><operator pos:start="189:24" pos:end="189:24">&lt;</operator><name pos:start="189:25" pos:end="189:25">w</name></expr>;</condition> <incr pos:start="189:28" pos:end="189:30"><expr pos:start="189:28" pos:end="189:30"><name pos:start="189:28" pos:end="189:28">x</name><operator pos:start="189:29" pos:end="189:30">++</operator></expr></incr>)</control> <block pos:start="189:33" pos:end="197:13">{<block_content pos:start="191:17" pos:end="195:61">

                <expr_stmt pos:start="191:17" pos:end="191:61"><expr pos:start="191:17" pos:end="191:60"><name pos:start="191:17" pos:end="191:26"><name pos:start="191:17" pos:end="191:19">ptr</name><index pos:start="191:20" pos:end="191:26">[<expr pos:start="191:21" pos:end="191:23"><literal type="number" pos:start="191:21" pos:end="191:21">3</literal><operator pos:start="191:22" pos:end="191:22">*</operator><name pos:start="191:23" pos:end="191:23">x</name></expr>  ]</index></name> <operator pos:start="191:28" pos:end="191:28">=</operator> <name pos:start="191:30" pos:end="191:60"><name pos:start="191:30" pos:end="191:37">scanline</name><index pos:start="191:38" pos:end="191:60">[<expr pos:start="191:39" pos:end="191:39"><name pos:start="191:39" pos:end="191:39">x</name></expr>                    ]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:61"><expr pos:start="193:17" pos:end="193:60"><name pos:start="193:17" pos:end="193:26"><name pos:start="193:17" pos:end="193:19">ptr</name><index pos:start="193:20" pos:end="193:26">[<expr pos:start="193:21" pos:end="193:25"><literal type="number" pos:start="193:21" pos:end="193:21">3</literal><operator pos:start="193:22" pos:end="193:22">*</operator><name pos:start="193:23" pos:end="193:23">x</name><operator pos:start="193:24" pos:end="193:24">+</operator><literal type="number" pos:start="193:25" pos:end="193:25">1</literal></expr>]</index></name> <operator pos:start="193:28" pos:end="193:28">=</operator> <name pos:start="193:30" pos:end="193:60"><name pos:start="193:30" pos:end="193:37">scanline</name><index pos:start="193:38" pos:end="193:60">[<expr pos:start="193:39" pos:end="193:55"><name pos:start="193:39" pos:end="193:39">x</name><operator pos:start="193:40" pos:end="193:40">+</operator> <name pos:start="193:42" pos:end="193:55">bytes_per_line</name></expr>    ]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:61"><expr pos:start="195:17" pos:end="195:60"><name pos:start="195:17" pos:end="195:26"><name pos:start="195:17" pos:end="195:19">ptr</name><index pos:start="195:20" pos:end="195:26">[<expr pos:start="195:21" pos:end="195:25"><literal type="number" pos:start="195:21" pos:end="195:21">3</literal><operator pos:start="195:22" pos:end="195:22">*</operator><name pos:start="195:23" pos:end="195:23">x</name><operator pos:start="195:24" pos:end="195:24">+</operator><literal type="number" pos:start="195:25" pos:end="195:25">2</literal></expr>]</index></name> <operator pos:start="195:28" pos:end="195:28">=</operator> <name pos:start="195:30" pos:end="195:60"><name pos:start="195:30" pos:end="195:37">scanline</name><index pos:start="195:38" pos:end="195:60">[<expr pos:start="195:39" pos:end="195:59"><name pos:start="195:39" pos:end="195:39">x</name><operator pos:start="195:40" pos:end="195:40">+</operator><operator pos:start="195:41" pos:end="195:41">(</operator><name pos:start="195:42" pos:end="195:55">bytes_per_line</name><operator pos:start="195:56" pos:end="195:57">&lt;&lt;</operator><literal type="number" pos:start="195:58" pos:end="195:58">1</literal><operator pos:start="195:59" pos:end="195:59">)</operator></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="201:13" pos:end="201:26"><expr pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:15">ptr</name> <operator pos:start="201:17" pos:end="201:18">+=</operator> <name pos:start="201:20" pos:end="201:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>



    </block_content>}</block></if> <if type="elseif" pos:start="207:7" pos:end="243:5">else if <condition pos:start="207:15" pos:end="207:51">(<expr pos:start="207:16" pos:end="207:50"><name pos:start="207:16" pos:end="207:22">nplanes</name> <operator pos:start="207:24" pos:end="207:25">==</operator> <literal type="number" pos:start="207:27" pos:end="207:27">1</literal> <operator pos:start="207:29" pos:end="207:30">&amp;&amp;</operator> <name pos:start="207:32" pos:end="207:45">bits_per_pixel</name> <operator pos:start="207:47" pos:end="207:48">==</operator> <literal type="number" pos:start="207:50" pos:end="207:50">8</literal></expr>)</condition> <block pos:start="207:53" pos:end="243:5">{<block_content pos:start="209:9" pos:end="239:9">

        <decl_stmt pos:start="209:9" pos:end="209:41"><decl pos:start="209:9" pos:end="209:40"><type pos:start="209:9" pos:end="209:11"><name pos:start="209:9" pos:end="209:11">int</name></type> <name pos:start="209:13" pos:end="209:20">palstart</name> <init pos:start="209:22" pos:end="209:40">= <expr pos:start="209:24" pos:end="209:40"><name pos:start="209:24" pos:end="209:34"><name pos:start="209:24" pos:end="209:28">avpkt</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:34">size</name></name> <operator pos:start="209:36" pos:end="209:36">-</operator> <literal type="number" pos:start="209:38" pos:end="209:40">769</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="213:9" pos:end="219:9">for <control pos:start="213:13" pos:end="213:40">(<init pos:start="213:14" pos:end="213:17"><expr pos:start="213:14" pos:end="213:16"><name pos:start="213:14" pos:end="213:14">y</name><operator pos:start="213:15" pos:end="213:15">=</operator><literal type="number" pos:start="213:16" pos:end="213:16">0</literal></expr>;</init> <condition pos:start="213:19" pos:end="213:22"><expr pos:start="213:19" pos:end="213:21"><name pos:start="213:19" pos:end="213:19">y</name><operator pos:start="213:20" pos:end="213:20">&lt;</operator><name pos:start="213:21" pos:end="213:21">h</name></expr>;</condition> <incr pos:start="213:24" pos:end="213:39"><expr pos:start="213:24" pos:end="213:26"><name pos:start="213:24" pos:end="213:24">y</name><operator pos:start="213:25" pos:end="213:26">++</operator></expr><operator pos:start="213:27" pos:end="213:27">,</operator> <expr pos:start="213:29" pos:end="213:39"><name pos:start="213:29" pos:end="213:31">ptr</name><operator pos:start="213:32" pos:end="213:33">+=</operator><name pos:start="213:34" pos:end="213:39">stride</name></expr></incr>)</control> <block pos:start="213:42" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:37">

            <expr_stmt pos:start="215:13" pos:end="215:74"><expr pos:start="215:13" pos:end="215:73"><call pos:start="215:13" pos:end="215:73"><name pos:start="215:13" pos:end="215:26">pcx_rle_decode</name><argument_list pos:start="215:27" pos:end="215:73">(<argument pos:start="215:28" pos:end="215:30"><expr pos:start="215:28" pos:end="215:30"><operator pos:start="215:28" pos:end="215:28">&amp;</operator><name pos:start="215:29" pos:end="215:30">gb</name></expr></argument>, <argument pos:start="215:33" pos:end="215:40"><expr pos:start="215:33" pos:end="215:40"><name pos:start="215:33" pos:end="215:40">scanline</name></expr></argument>, <argument pos:start="215:43" pos:end="215:60"><expr pos:start="215:43" pos:end="215:60"><name pos:start="215:43" pos:end="215:60">bytes_per_scanline</name></expr></argument>, <argument pos:start="215:63" pos:end="215:72"><expr pos:start="215:63" pos:end="215:72"><name pos:start="215:63" pos:end="215:72">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:37"><expr pos:start="217:13" pos:end="217:36"><call pos:start="217:13" pos:end="217:36"><name pos:start="217:13" pos:end="217:18">memcpy</name><argument_list pos:start="217:19" pos:end="217:36">(<argument pos:start="217:20" pos:end="217:22"><expr pos:start="217:20" pos:end="217:22"><name pos:start="217:20" pos:end="217:22">ptr</name></expr></argument>, <argument pos:start="217:25" pos:end="217:32"><expr pos:start="217:25" pos:end="217:32"><name pos:start="217:25" pos:end="217:32">scanline</name></expr></argument>, <argument pos:start="217:35" pos:end="217:35"><expr pos:start="217:35" pos:end="217:35"><name pos:start="217:35" pos:end="217:35">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="223:9" pos:end="229:9"><if pos:start="223:9" pos:end="229:9">if <condition pos:start="223:12" pos:end="223:46">(<expr pos:start="223:13" pos:end="223:45"><call pos:start="223:13" pos:end="223:33"><name pos:start="223:13" pos:end="223:28">bytestream2_tell</name><argument_list pos:start="223:29" pos:end="223:33">(<argument pos:start="223:30" pos:end="223:32"><expr pos:start="223:30" pos:end="223:32"><operator pos:start="223:30" pos:end="223:30">&amp;</operator><name pos:start="223:31" pos:end="223:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="223:35" pos:end="223:36">!=</operator> <name pos:start="223:38" pos:end="223:45">palstart</name></expr>)</condition> <block pos:start="223:48" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:54">

            <expr_stmt pos:start="225:13" pos:end="225:77"><expr pos:start="225:13" pos:end="225:76"><call pos:start="225:13" pos:end="225:76"><name pos:start="225:13" pos:end="225:18">av_log</name><argument_list pos:start="225:19" pos:end="225:76">(<argument pos:start="225:20" pos:end="225:24"><expr pos:start="225:20" pos:end="225:24"><name pos:start="225:20" pos:end="225:24">avctx</name></expr></argument>, <argument pos:start="225:27" pos:end="225:40"><expr pos:start="225:27" pos:end="225:40"><name pos:start="225:27" pos:end="225:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="225:43" pos:end="225:75"><expr pos:start="225:43" pos:end="225:75"><literal type="string" pos:start="225:43" pos:end="225:75">"image data possibly corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:54"><expr pos:start="227:13" pos:end="227:53"><call pos:start="227:13" pos:end="227:53"><name pos:start="227:13" pos:end="227:28">bytestream2_seek</name><argument_list pos:start="227:29" pos:end="227:53">(<argument pos:start="227:30" pos:end="227:32"><expr pos:start="227:30" pos:end="227:32"><operator pos:start="227:30" pos:end="227:30">&amp;</operator><name pos:start="227:31" pos:end="227:32">gb</name></expr></argument>, <argument pos:start="227:35" pos:end="227:42"><expr pos:start="227:35" pos:end="227:42"><name pos:start="227:35" pos:end="227:42">palstart</name></expr></argument>, <argument pos:start="227:45" pos:end="227:52"><expr pos:start="227:45" pos:end="227:52"><name pos:start="227:45" pos:end="227:52">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="231:9" pos:end="239:9"><if pos:start="231:9" pos:end="239:9">if <condition pos:start="231:12" pos:end="231:44">(<expr pos:start="231:13" pos:end="231:43"><call pos:start="231:13" pos:end="231:37"><name pos:start="231:13" pos:end="231:32">bytestream2_get_byte</name><argument_list pos:start="231:33" pos:end="231:37">(<argument pos:start="231:34" pos:end="231:36"><expr pos:start="231:34" pos:end="231:36"><operator pos:start="231:34" pos:end="231:34">&amp;</operator><name pos:start="231:35" pos:end="231:36">gb</name></expr></argument>)</argument_list></call> <operator pos:start="231:39" pos:end="231:40">!=</operator> <literal type="number" pos:start="231:42" pos:end="231:43">12</literal></expr>)</condition> <block pos:start="231:46" pos:end="239:9">{<block_content pos:start="233:13" pos:end="237:21">

            <expr_stmt pos:start="233:13" pos:end="233:79"><expr pos:start="233:13" pos:end="233:78"><call pos:start="233:13" pos:end="233:78"><name pos:start="233:13" pos:end="233:18">av_log</name><argument_list pos:start="233:19" pos:end="233:78">(<argument pos:start="233:20" pos:end="233:24"><expr pos:start="233:20" pos:end="233:24"><name pos:start="233:20" pos:end="233:24">avctx</name></expr></argument>, <argument pos:start="233:27" pos:end="233:38"><expr pos:start="233:27" pos:end="233:38"><name pos:start="233:27" pos:end="233:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:41" pos:end="233:77"><expr pos:start="233:41" pos:end="233:77"><literal type="string" pos:start="233:41" pos:end="233:77">"expected palette after image data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:38"><expr pos:start="235:13" pos:end="235:37"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <name pos:start="235:19" pos:end="235:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="237:13" pos:end="237:21">goto <name pos:start="237:18" pos:end="237:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="243:7" pos:end="269:5">else if <condition pos:start="243:15" pos:end="243:28">(<expr pos:start="243:16" pos:end="243:27"><name pos:start="243:16" pos:end="243:22">nplanes</name> <operator pos:start="243:24" pos:end="243:25">==</operator> <literal type="number" pos:start="243:27" pos:end="243:27">1</literal></expr>)</condition> <block pos:start="243:30" pos:end="269:5">{<block_content pos:start="245:9" pos:end="265:9">   <comment type="block" pos:start="243:34" pos:end="243:73">/* all packed formats, max. 16 colors */</comment>

        <decl_stmt pos:start="245:9" pos:end="245:24"><decl pos:start="245:9" pos:end="245:23"><type pos:start="245:9" pos:end="245:21"><name pos:start="245:9" pos:end="245:21">GetBitContext</name></type> <name pos:start="245:23" pos:end="245:23">s</name></decl>;</decl_stmt>



        <for pos:start="249:9" pos:end="265:9">for <control pos:start="249:13" pos:end="249:27">(<init pos:start="249:14" pos:end="249:17"><expr pos:start="249:14" pos:end="249:16"><name pos:start="249:14" pos:end="249:14">y</name><operator pos:start="249:15" pos:end="249:15">=</operator><literal type="number" pos:start="249:16" pos:end="249:16">0</literal></expr>;</init> <condition pos:start="249:19" pos:end="249:22"><expr pos:start="249:19" pos:end="249:21"><name pos:start="249:19" pos:end="249:19">y</name><operator pos:start="249:20" pos:end="249:20">&lt;</operator><name pos:start="249:21" pos:end="249:21">h</name></expr>;</condition> <incr pos:start="249:24" pos:end="249:26"><expr pos:start="249:24" pos:end="249:26"><name pos:start="249:24" pos:end="249:24">y</name><operator pos:start="249:25" pos:end="249:26">++</operator></expr></incr>)</control> <block pos:start="249:29" pos:end="265:9">{<block_content pos:start="251:13" pos:end="263:26">

            <expr_stmt pos:start="251:13" pos:end="251:61"><expr pos:start="251:13" pos:end="251:60"><call pos:start="251:13" pos:end="251:60"><name pos:start="251:13" pos:end="251:26">init_get_bits8</name><argument_list pos:start="251:27" pos:end="251:60">(<argument pos:start="251:28" pos:end="251:29"><expr pos:start="251:28" pos:end="251:29"><operator pos:start="251:28" pos:end="251:28">&amp;</operator><name pos:start="251:29" pos:end="251:29">s</name></expr></argument>, <argument pos:start="251:32" pos:end="251:39"><expr pos:start="251:32" pos:end="251:39"><name pos:start="251:32" pos:end="251:39">scanline</name></expr></argument>, <argument pos:start="251:42" pos:end="251:59"><expr pos:start="251:42" pos:end="251:59"><name pos:start="251:42" pos:end="251:59">bytes_per_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="255:13" pos:end="255:74"><expr pos:start="255:13" pos:end="255:73"><call pos:start="255:13" pos:end="255:73"><name pos:start="255:13" pos:end="255:26">pcx_rle_decode</name><argument_list pos:start="255:27" pos:end="255:73">(<argument pos:start="255:28" pos:end="255:30"><expr pos:start="255:28" pos:end="255:30"><operator pos:start="255:28" pos:end="255:28">&amp;</operator><name pos:start="255:29" pos:end="255:30">gb</name></expr></argument>, <argument pos:start="255:33" pos:end="255:40"><expr pos:start="255:33" pos:end="255:40"><name pos:start="255:33" pos:end="255:40">scanline</name></expr></argument>, <argument pos:start="255:43" pos:end="255:60"><expr pos:start="255:43" pos:end="255:60"><name pos:start="255:43" pos:end="255:60">bytes_per_scanline</name></expr></argument>, <argument pos:start="255:63" pos:end="255:72"><expr pos:start="255:63" pos:end="255:72"><name pos:start="255:63" pos:end="255:72">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="259:13" pos:end="261:54">for <control pos:start="259:17" pos:end="259:31">(<init pos:start="259:18" pos:end="259:21"><expr pos:start="259:18" pos:end="259:20"><name pos:start="259:18" pos:end="259:18">x</name><operator pos:start="259:19" pos:end="259:19">=</operator><literal type="number" pos:start="259:20" pos:end="259:20">0</literal></expr>;</init> <condition pos:start="259:23" pos:end="259:26"><expr pos:start="259:23" pos:end="259:25"><name pos:start="259:23" pos:end="259:23">x</name><operator pos:start="259:24" pos:end="259:24">&lt;</operator><name pos:start="259:25" pos:end="259:25">w</name></expr>;</condition> <incr pos:start="259:28" pos:end="259:30"><expr pos:start="259:28" pos:end="259:30"><name pos:start="259:28" pos:end="259:28">x</name><operator pos:start="259:29" pos:end="259:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="261:17" pos:end="261:54"><block_content pos:start="261:17" pos:end="261:54">

                <expr_stmt pos:start="261:17" pos:end="261:54"><expr pos:start="261:17" pos:end="261:53"><name pos:start="261:17" pos:end="261:22"><name pos:start="261:17" pos:end="261:19">ptr</name><index pos:start="261:20" pos:end="261:22">[<expr pos:start="261:21" pos:end="261:21"><name pos:start="261:21" pos:end="261:21">x</name></expr>]</index></name> <operator pos:start="261:24" pos:end="261:24">=</operator> <call pos:start="261:26" pos:end="261:53"><name pos:start="261:26" pos:end="261:33">get_bits</name><argument_list pos:start="261:34" pos:end="261:53">(<argument pos:start="261:35" pos:end="261:36"><expr pos:start="261:35" pos:end="261:36"><operator pos:start="261:35" pos:end="261:35">&amp;</operator><name pos:start="261:36" pos:end="261:36">s</name></expr></argument>, <argument pos:start="261:39" pos:end="261:52"><expr pos:start="261:39" pos:end="261:52"><name pos:start="261:39" pos:end="261:52">bits_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="263:13" pos:end="263:26"><expr pos:start="263:13" pos:end="263:25"><name pos:start="263:13" pos:end="263:15">ptr</name> <operator pos:start="263:17" pos:end="263:18">+=</operator> <name pos:start="263:20" pos:end="263:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>



    </block_content>}</block></if> <else pos:start="269:7" pos:end="301:5">else <block pos:start="269:12" pos:end="301:5">{<block_content pos:start="271:9" pos:end="299:9">    <comment type="block" pos:start="269:17" pos:end="269:47">/* planar, 4, 8 or 16 colors */</comment>

        <decl_stmt pos:start="271:9" pos:end="271:14"><decl pos:start="271:9" pos:end="271:13"><type pos:start="271:9" pos:end="271:11"><name pos:start="271:9" pos:end="271:11">int</name></type> <name pos:start="271:13" pos:end="271:13">i</name></decl>;</decl_stmt>



        <for pos:start="275:9" pos:end="299:9">for <control pos:start="275:13" pos:end="275:27">(<init pos:start="275:14" pos:end="275:17"><expr pos:start="275:14" pos:end="275:16"><name pos:start="275:14" pos:end="275:14">y</name><operator pos:start="275:15" pos:end="275:15">=</operator><literal type="number" pos:start="275:16" pos:end="275:16">0</literal></expr>;</init> <condition pos:start="275:19" pos:end="275:22"><expr pos:start="275:19" pos:end="275:21"><name pos:start="275:19" pos:end="275:19">y</name><operator pos:start="275:20" pos:end="275:20">&lt;</operator><name pos:start="275:21" pos:end="275:21">h</name></expr>;</condition> <incr pos:start="275:24" pos:end="275:26"><expr pos:start="275:24" pos:end="275:26"><name pos:start="275:24" pos:end="275:24">y</name><operator pos:start="275:25" pos:end="275:26">++</operator></expr></incr>)</control> <block pos:start="275:29" pos:end="299:9">{<block_content pos:start="277:13" pos:end="297:26">

            <expr_stmt pos:start="277:13" pos:end="277:74"><expr pos:start="277:13" pos:end="277:73"><call pos:start="277:13" pos:end="277:73"><name pos:start="277:13" pos:end="277:26">pcx_rle_decode</name><argument_list pos:start="277:27" pos:end="277:73">(<argument pos:start="277:28" pos:end="277:30"><expr pos:start="277:28" pos:end="277:30"><operator pos:start="277:28" pos:end="277:28">&amp;</operator><name pos:start="277:29" pos:end="277:30">gb</name></expr></argument>, <argument pos:start="277:33" pos:end="277:40"><expr pos:start="277:33" pos:end="277:40"><name pos:start="277:33" pos:end="277:40">scanline</name></expr></argument>, <argument pos:start="277:43" pos:end="277:60"><expr pos:start="277:43" pos:end="277:60"><name pos:start="277:43" pos:end="277:60">bytes_per_scanline</name></expr></argument>, <argument pos:start="277:63" pos:end="277:72"><expr pos:start="277:63" pos:end="277:72"><name pos:start="277:63" pos:end="277:72">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="281:13" pos:end="295:13">for <control pos:start="281:17" pos:end="281:31">(<init pos:start="281:18" pos:end="281:21"><expr pos:start="281:18" pos:end="281:20"><name pos:start="281:18" pos:end="281:18">x</name><operator pos:start="281:19" pos:end="281:19">=</operator><literal type="number" pos:start="281:20" pos:end="281:20">0</literal></expr>;</init> <condition pos:start="281:23" pos:end="281:26"><expr pos:start="281:23" pos:end="281:25"><name pos:start="281:23" pos:end="281:23">x</name><operator pos:start="281:24" pos:end="281:24">&lt;</operator><name pos:start="281:25" pos:end="281:25">w</name></expr>;</condition> <incr pos:start="281:28" pos:end="281:30"><expr pos:start="281:28" pos:end="281:30"><name pos:start="281:28" pos:end="281:28">x</name><operator pos:start="281:29" pos:end="281:30">++</operator></expr></incr>)</control> <block pos:start="281:33" pos:end="295:13">{<block_content pos:start="283:17" pos:end="293:27">

                <decl_stmt pos:start="283:17" pos:end="283:45"><decl pos:start="283:17" pos:end="283:37"><type pos:start="283:17" pos:end="283:19"><name pos:start="283:17" pos:end="283:19">int</name></type> <name pos:start="283:21" pos:end="283:21">m</name> <init pos:start="283:23" pos:end="283:37">= <expr pos:start="283:25" pos:end="283:37"><literal type="number" pos:start="283:25" pos:end="283:28">0x80</literal> <operator pos:start="283:30" pos:end="283:31">&gt;&gt;</operator> <operator pos:start="283:33" pos:end="283:33">(</operator><name pos:start="283:34" pos:end="283:34">x</name><operator pos:start="283:35" pos:end="283:35">&amp;</operator><literal type="number" pos:start="283:36" pos:end="283:36">7</literal><operator pos:start="283:37" pos:end="283:37">)</operator></expr></init></decl>, <decl pos:start="283:40" pos:end="283:44"><type ref="prev" pos:start="283:17" pos:end="283:19"/><name pos:start="283:40" pos:end="283:40">v</name> <init pos:start="283:42" pos:end="283:44">= <expr pos:start="283:44" pos:end="283:44"><literal type="number" pos:start="283:44" pos:end="283:44">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="285:17" pos:end="291:17">for <control pos:start="285:21" pos:end="285:46">(<init pos:start="285:22" pos:end="285:35"><expr pos:start="285:22" pos:end="285:34"><name pos:start="285:22" pos:end="285:22">i</name><operator pos:start="285:23" pos:end="285:23">=</operator><name pos:start="285:24" pos:end="285:30">nplanes</name> <operator pos:start="285:32" pos:end="285:32">-</operator> <literal type="number" pos:start="285:34" pos:end="285:34">1</literal></expr>;</init> <condition pos:start="285:37" pos:end="285:41"><expr pos:start="285:37" pos:end="285:40"><name pos:start="285:37" pos:end="285:37">i</name><operator pos:start="285:38" pos:end="285:39">&gt;=</operator><literal type="number" pos:start="285:40" pos:end="285:40">0</literal></expr>;</condition> <incr pos:start="285:43" pos:end="285:45"><expr pos:start="285:43" pos:end="285:45"><name pos:start="285:43" pos:end="285:43">i</name><operator pos:start="285:44" pos:end="285:45">--</operator></expr></incr>)</control> <block pos:start="285:48" pos:end="291:17">{<block_content pos:start="287:21" pos:end="289:70">

                    <expr_stmt pos:start="287:21" pos:end="287:28"><expr pos:start="287:21" pos:end="287:27"><name pos:start="287:21" pos:end="287:21">v</name> <operator pos:start="287:23" pos:end="287:25">&lt;&lt;=</operator> <literal type="number" pos:start="287:27" pos:end="287:27">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:70"><expr pos:start="289:21" pos:end="289:69"><name pos:start="289:21" pos:end="289:21">v</name>  <operator pos:start="289:24" pos:end="289:25">+=</operator> <operator pos:start="289:27" pos:end="289:27">!</operator><operator pos:start="289:28" pos:end="289:28">!</operator><operator pos:start="289:29" pos:end="289:29">(</operator><name pos:start="289:30" pos:end="289:64"><name pos:start="289:30" pos:end="289:37">scanline</name><index pos:start="289:38" pos:end="289:64">[<expr pos:start="289:39" pos:end="289:63"><name pos:start="289:39" pos:end="289:39">i</name><operator pos:start="289:40" pos:end="289:40">*</operator><name pos:start="289:41" pos:end="289:54">bytes_per_line</name> <operator pos:start="289:56" pos:end="289:56">+</operator> <operator pos:start="289:58" pos:end="289:58">(</operator><name pos:start="289:59" pos:end="289:59">x</name><operator pos:start="289:60" pos:end="289:61">&gt;&gt;</operator><literal type="number" pos:start="289:62" pos:end="289:62">3</literal><operator pos:start="289:63" pos:end="289:63">)</operator></expr>]</index></name> <operator pos:start="289:66" pos:end="289:66">&amp;</operator> <name pos:start="289:68" pos:end="289:68">m</name><operator pos:start="289:69" pos:end="289:69">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="293:17" pos:end="293:27"><expr pos:start="293:17" pos:end="293:26"><name pos:start="293:17" pos:end="293:22"><name pos:start="293:17" pos:end="293:19">ptr</name><index pos:start="293:20" pos:end="293:22">[<expr pos:start="293:21" pos:end="293:21"><name pos:start="293:21" pos:end="293:21">x</name></expr>]</index></name> <operator pos:start="293:24" pos:end="293:24">=</operator> <name pos:start="293:26" pos:end="293:26">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="297:13" pos:end="297:26"><expr pos:start="297:13" pos:end="297:25"><name pos:start="297:13" pos:end="297:15">ptr</name> <operator pos:start="297:17" pos:end="297:18">+=</operator> <name pos:start="297:20" pos:end="297:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="305:5" pos:end="305:32"><expr pos:start="305:5" pos:end="305:31"><name pos:start="305:5" pos:end="305:7">ret</name> <operator pos:start="305:9" pos:end="305:9">=</operator> <call pos:start="305:11" pos:end="305:31"><name pos:start="305:11" pos:end="305:26">bytestream2_tell</name><argument_list pos:start="305:27" pos:end="305:31">(<argument pos:start="305:28" pos:end="305:30"><expr pos:start="305:28" pos:end="305:30"><operator pos:start="305:28" pos:end="305:28">&amp;</operator><name pos:start="305:29" pos:end="305:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="307:5" pos:end="325:5"><if pos:start="307:5" pos:end="313:5">if <condition pos:start="307:8" pos:end="307:44">(<expr pos:start="307:9" pos:end="307:43"><name pos:start="307:9" pos:end="307:15">nplanes</name> <operator pos:start="307:17" pos:end="307:18">==</operator> <literal type="number" pos:start="307:20" pos:end="307:20">1</literal> <operator pos:start="307:22" pos:end="307:23">&amp;&amp;</operator> <name pos:start="307:25" pos:end="307:38">bits_per_pixel</name> <operator pos:start="307:40" pos:end="307:41">==</operator> <literal type="number" pos:start="307:43" pos:end="307:43">8</literal></expr>)</condition> <block pos:start="307:46" pos:end="313:5">{<block_content pos:start="309:9" pos:end="311:23">

        <expr_stmt pos:start="309:9" pos:end="309:55"><expr pos:start="309:9" pos:end="309:54"><call pos:start="309:9" pos:end="309:54"><name pos:start="309:9" pos:end="309:19">pcx_palette</name><argument_list pos:start="309:20" pos:end="309:54">(<argument pos:start="309:21" pos:end="309:23"><expr pos:start="309:21" pos:end="309:23"><operator pos:start="309:21" pos:end="309:21">&amp;</operator><name pos:start="309:22" pos:end="309:23">gb</name></expr></argument>, <argument pos:start="309:26" pos:end="309:48"><expr pos:start="309:26" pos:end="309:48"><operator pos:start="309:26" pos:end="309:26">(</operator><name pos:start="309:27" pos:end="309:34">uint32_t</name> <operator pos:start="309:36" pos:end="309:36">*</operator><operator pos:start="309:37" pos:end="309:37">)</operator> <name pos:start="309:39" pos:end="309:48"><name pos:start="309:39" pos:end="309:39">p</name><operator pos:start="309:40" pos:end="309:41">-&gt;</operator><name pos:start="309:42" pos:end="309:45">data</name><index pos:start="309:46" pos:end="309:48">[<expr pos:start="309:47" pos:end="309:47"><literal type="number" pos:start="309:47" pos:end="309:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="309:51" pos:end="309:53"><expr pos:start="309:51" pos:end="309:53"><literal type="number" pos:start="309:51" pos:end="309:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:23"><expr pos:start="311:9" pos:end="311:22"><name pos:start="311:9" pos:end="311:11">ret</name> <operator pos:start="311:13" pos:end="311:14">+=</operator> <literal type="number" pos:start="311:16" pos:end="311:18">256</literal> <operator pos:start="311:20" pos:end="311:20">*</operator> <literal type="number" pos:start="311:22" pos:end="311:22">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="313:7" pos:end="319:5">else if <condition pos:start="313:15" pos:end="313:45">(<expr pos:start="313:16" pos:end="313:44"><name pos:start="313:16" pos:end="313:29">bits_per_pixel</name> <operator pos:start="313:31" pos:end="313:31">*</operator> <name pos:start="313:33" pos:end="313:39">nplanes</name> <operator pos:start="313:41" pos:end="313:42">==</operator> <literal type="number" pos:start="313:44" pos:end="313:44">1</literal></expr>)</condition> <block pos:start="313:47" pos:end="319:5">{<block_content pos:start="315:9" pos:end="317:43">

        <expr_stmt pos:start="315:9" pos:end="315:43"><expr pos:start="315:9" pos:end="315:42"><call pos:start="315:9" pos:end="315:42"><name pos:start="315:9" pos:end="315:16">AV_WN32A</name><argument_list pos:start="315:17" pos:end="315:42">(<argument pos:start="315:18" pos:end="315:27"><expr pos:start="315:18" pos:end="315:27"><name pos:start="315:18" pos:end="315:27"><name pos:start="315:18" pos:end="315:18">p</name><operator pos:start="315:19" pos:end="315:20">-&gt;</operator><name pos:start="315:21" pos:end="315:24">data</name><index pos:start="315:25" pos:end="315:27">[<expr pos:start="315:26" pos:end="315:26"><literal type="number" pos:start="315:26" pos:end="315:26">1</literal></expr>]</index></name></expr></argument>  , <argument pos:start="315:32" pos:end="315:41"><expr pos:start="315:32" pos:end="315:41"><literal type="number" pos:start="315:32" pos:end="315:41">0xFF000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:43"><expr pos:start="317:9" pos:end="317:42"><call pos:start="317:9" pos:end="317:42"><name pos:start="317:9" pos:end="317:16">AV_WN32A</name><argument_list pos:start="317:17" pos:end="317:42">(<argument pos:start="317:18" pos:end="317:29"><expr pos:start="317:18" pos:end="317:29"><name pos:start="317:18" pos:end="317:27"><name pos:start="317:18" pos:end="317:18">p</name><operator pos:start="317:19" pos:end="317:20">-&gt;</operator><name pos:start="317:21" pos:end="317:24">data</name><index pos:start="317:25" pos:end="317:27">[<expr pos:start="317:26" pos:end="317:26"><literal type="number" pos:start="317:26" pos:end="317:26">1</literal></expr>]</index></name><operator pos:start="317:28" pos:end="317:28">+</operator><literal type="number" pos:start="317:29" pos:end="317:29">4</literal></expr></argument>, <argument pos:start="317:32" pos:end="317:41"><expr pos:start="317:32" pos:end="317:41"><literal type="number" pos:start="317:32" pos:end="317:41">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="319:7" pos:end="325:5">else if <condition pos:start="319:15" pos:end="319:34">(<expr pos:start="319:16" pos:end="319:33"><name pos:start="319:16" pos:end="319:29">bits_per_pixel</name> <operator pos:start="319:31" pos:end="319:31">&lt;</operator> <literal type="number" pos:start="319:33" pos:end="319:33">8</literal></expr>)</condition> <block pos:start="319:36" pos:end="325:5">{<block_content pos:start="321:9" pos:end="323:54">

        <expr_stmt pos:start="321:9" pos:end="321:44"><expr pos:start="321:9" pos:end="321:43"><call pos:start="321:9" pos:end="321:43"><name pos:start="321:9" pos:end="321:24">bytestream2_seek</name><argument_list pos:start="321:25" pos:end="321:43">(<argument pos:start="321:26" pos:end="321:28"><expr pos:start="321:26" pos:end="321:28"><operator pos:start="321:26" pos:end="321:26">&amp;</operator><name pos:start="321:27" pos:end="321:28">gb</name></expr></argument>, <argument pos:start="321:31" pos:end="321:32"><expr pos:start="321:31" pos:end="321:32"><literal type="number" pos:start="321:31" pos:end="321:32">16</literal></expr></argument>, <argument pos:start="321:35" pos:end="321:42"><expr pos:start="321:35" pos:end="321:42"><name pos:start="321:35" pos:end="321:42">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:54"><expr pos:start="323:9" pos:end="323:53"><call pos:start="323:9" pos:end="323:53"><name pos:start="323:9" pos:end="323:19">pcx_palette</name><argument_list pos:start="323:20" pos:end="323:53">(<argument pos:start="323:21" pos:end="323:23"><expr pos:start="323:21" pos:end="323:23"><operator pos:start="323:21" pos:end="323:21">&amp;</operator><name pos:start="323:22" pos:end="323:23">gb</name></expr></argument>, <argument pos:start="323:26" pos:end="323:48"><expr pos:start="323:26" pos:end="323:48"><operator pos:start="323:26" pos:end="323:26">(</operator><name pos:start="323:27" pos:end="323:34">uint32_t</name> <operator pos:start="323:36" pos:end="323:36">*</operator><operator pos:start="323:37" pos:end="323:37">)</operator> <name pos:start="323:39" pos:end="323:48"><name pos:start="323:39" pos:end="323:39">p</name><operator pos:start="323:40" pos:end="323:41">-&gt;</operator><name pos:start="323:42" pos:end="323:45">data</name><index pos:start="323:46" pos:end="323:48">[<expr pos:start="323:47" pos:end="323:47"><literal type="number" pos:start="323:47" pos:end="323:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="323:51" pos:end="323:52"><expr pos:start="323:51" pos:end="323:52"><literal type="number" pos:start="323:51" pos:end="323:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:26"><expr pos:start="329:5" pos:end="329:25"><operator pos:start="329:5" pos:end="329:5">*</operator><name pos:start="329:6" pos:end="329:12">picture</name> <operator pos:start="329:14" pos:end="329:14">=</operator> <name pos:start="329:16" pos:end="329:25"><name pos:start="329:16" pos:end="329:16">s</name><operator pos:start="329:17" pos:end="329:18">-&gt;</operator><name pos:start="329:19" pos:end="329:25">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:19"><expr pos:start="331:5" pos:end="331:18"><operator pos:start="331:5" pos:end="331:5">*</operator><name pos:start="331:6" pos:end="331:14">got_frame</name> <operator pos:start="331:16" pos:end="331:16">=</operator> <literal type="number" pos:start="331:18" pos:end="331:18">1</literal></expr>;</expr_stmt>



<label pos:start="335:1" pos:end="335:4"><name pos:start="335:1" pos:end="335:3">end</name>:</label>

    <expr_stmt pos:start="337:5" pos:end="337:22"><expr pos:start="337:5" pos:end="337:21"><call pos:start="337:5" pos:end="337:21"><name pos:start="337:5" pos:end="337:11">av_free</name><argument_list pos:start="337:12" pos:end="337:21">(<argument pos:start="337:13" pos:end="337:20"><expr pos:start="337:13" pos:end="337:20"><name pos:start="337:13" pos:end="337:20">scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="339:5" pos:end="339:15">return <expr pos:start="339:12" pos:end="339:14"><name pos:start="339:12" pos:end="339:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
