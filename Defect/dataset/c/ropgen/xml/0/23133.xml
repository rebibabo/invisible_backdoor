<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23133.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_lea_v_seg</name><parameter_list pos:start="1:26" pos:end="3:51">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">DisasContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:51">TCGMemOp</name></type> <name pos:start="1:53" pos:end="1:57">aflag</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:66"><decl pos:start="1:60" pos:end="1:66"><type pos:start="1:60" pos:end="1:66"><name pos:start="1:60" pos:end="1:63">TCGv</name></type> <name pos:start="1:65" pos:end="1:66">a0</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:37"><decl pos:start="3:27" pos:end="3:37"><type pos:start="3:27" pos:end="3:37"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:37">def_seg</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:50"><decl pos:start="3:40" pos:end="3:50"><type pos:start="3:40" pos:end="3:50"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:50">ovr_seg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:1">{<block_content pos:start="7:5" pos:end="111:5">

    <switch pos:start="7:5" pos:end="75:5">switch <condition pos:start="7:12" pos:end="7:18">(<expr pos:start="7:13" pos:end="7:17"><name pos:start="7:13" pos:end="7:17">aflag</name></expr>)</condition> <block pos:start="7:20" pos:end="75:5">{<block_content pos:start="11:5" pos:end="73:20">

<cpp:ifdef pos:start="9:1" pos:end="9:20">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:20">TARGET_X86_64</name></cpp:ifdef>

    <case pos:start="11:5" pos:end="11:15">case <expr pos:start="11:10" pos:end="11:14"><name pos:start="11:10" pos:end="11:14">MO_64</name></expr>:</case>

        <if_stmt pos:start="13:9" pos:end="19:9"><if pos:start="13:9" pos:end="19:9">if <condition pos:start="13:12" pos:end="13:24">(<expr pos:start="13:13" pos:end="13:23"><name pos:start="13:13" pos:end="13:19">ovr_seg</name> <operator pos:start="13:21" pos:end="13:21">&lt;</operator> <literal type="number" pos:start="13:23" pos:end="13:23">0</literal></expr>)</condition> <block pos:start="13:26" pos:end="19:9">{<block_content pos:start="15:13" pos:end="17:19">

            <expr_stmt pos:start="15:13" pos:end="15:39"><expr pos:start="15:13" pos:end="15:38"><call pos:start="15:13" pos:end="15:38"><name pos:start="15:13" pos:end="15:26">tcg_gen_mov_tl</name><argument_list pos:start="15:27" pos:end="15:38">(<argument pos:start="15:28" pos:end="15:33"><expr pos:start="15:28" pos:end="15:33"><name pos:start="15:28" pos:end="15:33">cpu_A0</name></expr></argument>, <argument pos:start="15:36" pos:end="15:37"><expr pos:start="15:36" pos:end="15:37"><name pos:start="15:36" pos:end="15:37">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="17:13" pos:end="17:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="21:9" pos:end="24:0">break;</break>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    <case pos:start="25:5" pos:end="25:15">case <expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:14">MO_32</name></expr>:</case>

        <comment type="block" pos:start="27:9" pos:end="27:28">/* 32 bit address */</comment>

        <if_stmt pos:start="29:9" pos:end="43:9"><if pos:start="29:9" pos:end="43:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:19">ovr_seg</name> <operator pos:start="29:21" pos:end="29:21">&lt;</operator> <literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr>)</condition> <block pos:start="29:26" pos:end="43:9">{<block_content pos:start="31:13" pos:end="41:13">

            <if_stmt pos:start="31:13" pos:end="41:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:26">(<expr pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:25">addseg</name></name></expr>)</condition> <block pos:start="31:28" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:34">

                <expr_stmt pos:start="33:17" pos:end="33:34"><expr pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:23">ovr_seg</name> <operator pos:start="33:25" pos:end="33:25">=</operator> <name pos:start="33:27" pos:end="33:33">def_seg</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="41:13">else <block pos:start="35:20" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:23">

                <expr_stmt pos:start="37:17" pos:end="37:46"><expr pos:start="37:17" pos:end="37:45"><call pos:start="37:17" pos:end="37:45"><name pos:start="37:17" pos:end="37:33">tcg_gen_ext32u_tl</name><argument_list pos:start="37:34" pos:end="37:45">(<argument pos:start="37:35" pos:end="37:40"><expr pos:start="37:35" pos:end="37:40"><name pos:start="37:35" pos:end="37:40">cpu_A0</name></expr></argument>, <argument pos:start="37:43" pos:end="37:44"><expr pos:start="37:43" pos:end="37:44"><name pos:start="37:43" pos:end="37:44">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="39:17" pos:end="39:23">return;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:14">MO_16</name></expr>:</case>

        <comment type="block" pos:start="49:9" pos:end="49:28">/* 16 bit address */</comment>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:24">(<expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:19">ovr_seg</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>)</condition> <block pos:start="51:26" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:30">

            <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:19">ovr_seg</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:29">def_seg</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><call pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:25">tcg_gen_ext16u_tl</name><argument_list pos:start="57:26" pos:end="57:37">(<argument pos:start="57:27" pos:end="57:32"><expr pos:start="57:27" pos:end="57:32"><name pos:start="57:27" pos:end="57:32">cpu_A0</name></expr></argument>, <argument pos:start="57:35" pos:end="57:36"><expr pos:start="57:35" pos:end="57:36"><name pos:start="57:35" pos:end="57:36">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:64">/* ADDSEG will only be false in 16-bit mode for LEA.  */</comment>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:23">(<expr pos:start="61:13" pos:end="61:22"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:22"><name pos:start="61:14" pos:end="61:14">s</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:22">addseg</name></name></expr>)</condition> <block pos:start="61:25" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:19">

            <return pos:start="63:13" pos:end="63:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:20"><expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:10">a0</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:19">cpu_A0</name></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <default pos:start="71:5" pos:end="71:12">default:</default>

        <expr_stmt pos:start="73:9" pos:end="73:20"><expr pos:start="73:9" pos:end="73:19"><call pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:17">tcg_abort</name><argument_list pos:start="73:18" pos:end="73:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="79:5" pos:end="111:5"><if pos:start="79:5" pos:end="111:5">if <condition pos:start="79:8" pos:end="79:21">(<expr pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:15">ovr_seg</name> <operator pos:start="79:17" pos:end="79:18">&gt;=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr>)</condition> <block pos:start="79:23" pos:end="111:5">{<block_content pos:start="81:9" pos:end="109:27">

        <decl_stmt pos:start="81:9" pos:end="81:34"><decl pos:start="81:9" pos:end="81:33"><type pos:start="81:9" pos:end="81:12"><name pos:start="81:9" pos:end="81:12">TCGv</name></type> <name pos:start="81:14" pos:end="81:16">seg</name> <init pos:start="81:18" pos:end="81:33">= <expr pos:start="81:20" pos:end="81:33"><call pos:start="81:20" pos:end="81:33"><name pos:start="81:20" pos:end="81:31">tcg_temp_new</name><argument_list pos:start="81:32" pos:end="81:33">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:79"><expr pos:start="85:9" pos:end="85:78"><call pos:start="85:9" pos:end="85:78"><name pos:start="85:9" pos:end="85:21">tcg_gen_ld_tl</name><argument_list pos:start="85:22" pos:end="85:78">(<argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><name pos:start="85:23" pos:end="85:25">seg</name></expr></argument>, <argument pos:start="85:28" pos:end="85:34"><expr pos:start="85:28" pos:end="85:34"><name pos:start="85:28" pos:end="85:34">cpu_env</name></expr></argument>, <argument pos:start="85:37" pos:end="85:77"><expr pos:start="85:37" pos:end="85:77"><call pos:start="85:37" pos:end="85:77"><name pos:start="85:37" pos:end="85:44">offsetof</name><argument_list pos:start="85:45" pos:end="85:77">(<argument pos:start="85:46" pos:end="85:56"><expr pos:start="85:46" pos:end="85:56"><name pos:start="85:46" pos:end="85:56">CPUX86State</name></expr></argument>, <argument pos:start="85:59" pos:end="85:76"><expr pos:start="85:59" pos:end="85:76"><name pos:start="85:59" pos:end="85:71"><name pos:start="85:59" pos:end="85:62">segs</name><index pos:start="85:63" pos:end="85:71">[<expr pos:start="85:64" pos:end="85:70"><name pos:start="85:64" pos:end="85:70">ovr_seg</name></expr>]</index></name><operator pos:start="85:72" pos:end="85:72">.</operator><name pos:start="85:73" pos:end="85:76">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="105:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:27">(<expr pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:17">aflag</name> <operator pos:start="89:19" pos:end="89:20">==</operator> <name pos:start="89:22" pos:end="89:26">MO_64</name></expr>)</condition> <block pos:start="89:29" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:44">

            <expr_stmt pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:43"><call pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:26">tcg_gen_add_tl</name><argument_list pos:start="91:27" pos:end="91:43">(<argument pos:start="91:28" pos:end="91:33"><expr pos:start="91:28" pos:end="91:33"><name pos:start="91:28" pos:end="91:33">cpu_A0</name></expr></argument>, <argument pos:start="91:36" pos:end="91:37"><expr pos:start="91:36" pos:end="91:37"><name pos:start="91:36" pos:end="91:37">a0</name></expr></argument>, <argument pos:start="91:40" pos:end="91:42"><expr pos:start="91:40" pos:end="91:42"><name pos:start="91:40" pos:end="91:42">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="99:9">else if <condition pos:start="93:19" pos:end="93:29">(<expr pos:start="93:20" pos:end="93:28"><call pos:start="93:20" pos:end="93:28"><name pos:start="93:20" pos:end="93:25">CODE64</name><argument_list pos:start="93:26" pos:end="93:28">(<argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><name pos:start="93:27" pos:end="93:27">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:31" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:48">

            <expr_stmt pos:start="95:13" pos:end="95:42"><expr pos:start="95:13" pos:end="95:41"><call pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:29">tcg_gen_ext32u_tl</name><argument_list pos:start="95:30" pos:end="95:41">(<argument pos:start="95:31" pos:end="95:36"><expr pos:start="95:31" pos:end="95:36"><name pos:start="95:31" pos:end="95:36">cpu_A0</name></expr></argument>, <argument pos:start="95:39" pos:end="95:40"><expr pos:start="95:39" pos:end="95:40"><name pos:start="95:39" pos:end="95:40">a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><call pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:26">tcg_gen_add_tl</name><argument_list pos:start="97:27" pos:end="97:47">(<argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><name pos:start="97:28" pos:end="97:33">cpu_A0</name></expr></argument>, <argument pos:start="97:36" pos:end="97:41"><expr pos:start="97:36" pos:end="97:41"><name pos:start="97:36" pos:end="97:41">cpu_A0</name></expr></argument>, <argument pos:start="97:44" pos:end="97:46"><expr pos:start="97:44" pos:end="97:46"><name pos:start="97:44" pos:end="97:46">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="105:9">else <block pos:start="99:16" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:46">

            <expr_stmt pos:start="101:13" pos:end="101:44"><expr pos:start="101:13" pos:end="101:43"><call pos:start="101:13" pos:end="101:43"><name pos:start="101:13" pos:end="101:26">tcg_gen_add_tl</name><argument_list pos:start="101:27" pos:end="101:43">(<argument pos:start="101:28" pos:end="101:33"><expr pos:start="101:28" pos:end="101:33"><name pos:start="101:28" pos:end="101:33">cpu_A0</name></expr></argument>, <argument pos:start="101:36" pos:end="101:37"><expr pos:start="101:36" pos:end="101:37"><name pos:start="101:36" pos:end="101:37">a0</name></expr></argument>, <argument pos:start="101:40" pos:end="101:42"><expr pos:start="101:40" pos:end="101:42"><name pos:start="101:40" pos:end="101:42">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:46"><expr pos:start="103:13" pos:end="103:45"><call pos:start="103:13" pos:end="103:45"><name pos:start="103:13" pos:end="103:29">tcg_gen_ext32u_tl</name><argument_list pos:start="103:30" pos:end="103:45">(<argument pos:start="103:31" pos:end="103:36"><expr pos:start="103:31" pos:end="103:36"><name pos:start="103:31" pos:end="103:36">cpu_A0</name></expr></argument>, <argument pos:start="103:39" pos:end="103:44"><expr pos:start="103:39" pos:end="103:44"><name pos:start="103:39" pos:end="103:44">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:27"><expr pos:start="109:9" pos:end="109:26"><call pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:21">tcg_temp_free</name><argument_list pos:start="109:22" pos:end="109:26">(<argument pos:start="109:23" pos:end="109:25"><expr pos:start="109:23" pos:end="109:25"><name pos:start="109:23" pos:end="109:25">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
