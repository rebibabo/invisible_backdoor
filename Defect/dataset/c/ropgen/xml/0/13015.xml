<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13015.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">pc_cmos_init</name><parameter_list pos:start="1:18" pos:end="7:31">(<parameter pos:start="1:19" pos:end="1:37"><decl pos:start="1:19" pos:end="1:37"><type pos:start="1:19" pos:end="1:37"><name pos:start="1:19" pos:end="1:28">ram_addr_t</name></type> <name pos:start="1:30" pos:end="1:37">ram_size</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:67"><decl pos:start="1:40" pos:end="1:67"><type pos:start="1:40" pos:end="1:67"><name pos:start="1:40" pos:end="1:49">ram_addr_t</name></type> <name pos:start="1:51" pos:end="1:67">above_4g_mem_size</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:41"><decl pos:start="3:19" pos:end="3:41"><type pos:start="3:19" pos:end="3:41"><specifier pos:start="3:19" pos:end="3:23">const</specifier> <name pos:start="3:25" pos:end="3:28">char</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:41">boot_device</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:35"><decl pos:start="5:19" pos:end="5:35"><type pos:start="5:19" pos:end="5:35"><name pos:start="5:19" pos:end="5:26">BusState</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:35">idebus0</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:54"><decl pos:start="5:38" pos:end="5:54"><type pos:start="5:38" pos:end="5:54"><name pos:start="5:38" pos:end="5:45">BusState</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:54">idebus1</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:30"><decl pos:start="7:19" pos:end="7:30"><type pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:27">ISADevice</name> <modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:30">s</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="181:1">{<block_content pos:start="11:5" pos:end="179:49">

    <decl_stmt pos:start="11:5" pos:end="11:51"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">val</name></decl>, <decl pos:start="11:14" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:15">nb</name></decl>, <decl pos:start="11:18" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:25">nb_heads</name></decl>, <decl pos:start="11:28" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:28" pos:end="11:36">max_track</name></decl>, <decl pos:start="11:39" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:39" pos:end="11:47">last_sect</name></decl>, <decl pos:start="11:50" pos:end="11:50"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:50" pos:end="11:50">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">FDriveType</name></type> <name pos:start="13:16" pos:end="13:25"><name pos:start="13:16" pos:end="13:22">fd_type</name><index pos:start="13:23" pos:end="13:25">[<expr pos:start="13:24" pos:end="13:24"><literal type="number" pos:start="13:24" pos:end="13:24">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">DriveInfo</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:17">fd</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:32"><specifier pos:start="17:5" pos:end="17:10">static</specifier> <name pos:start="17:12" pos:end="17:32">pc_cmos_init_late_arg</name></type> <name pos:start="17:34" pos:end="17:36">arg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:66">/* various important CMOS locations needed by PC/Bochs bios */</comment>



    <comment type="block" pos:start="25:5" pos:end="25:21">/* memory size */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:14"><expr pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:7">val</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <literal type="number" pos:start="27:11" pos:end="27:13">640</literal></expr>;</expr_stmt> <comment type="block" pos:start="27:16" pos:end="27:37">/* base memory in K */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><call pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:18">rtc_set_memory</name><argument_list pos:start="29:19" pos:end="29:32">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><name pos:start="29:20" pos:end="29:20">s</name></expr></argument>, <argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><literal type="number" pos:start="29:23" pos:end="29:26">0x15</literal></expr></argument>, <argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><call pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:18">rtc_set_memory</name><argument_list pos:start="31:19" pos:end="31:37">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><name pos:start="31:20" pos:end="31:20">s</name></expr></argument>, <argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><literal type="number" pos:start="31:23" pos:end="31:26">0x16</literal></expr></argument>, <argument pos:start="31:29" pos:end="31:36"><expr pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:31">val</name> <operator pos:start="31:33" pos:end="31:34">&gt;&gt;</operator> <literal type="number" pos:start="31:36" pos:end="31:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:7">val</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <operator pos:start="35:11" pos:end="35:11">(</operator><name pos:start="35:12" pos:end="35:19">ram_size</name> <operator pos:start="35:21" pos:end="35:21">/</operator> <literal type="number" pos:start="35:23" pos:end="35:26">1024</literal><operator pos:start="35:27" pos:end="35:27">)</operator> <operator pos:start="35:29" pos:end="35:29">-</operator> <literal type="number" pos:start="35:31" pos:end="35:34">1024</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:20"><if pos:start="37:5" pos:end="39:20">if <condition pos:start="37:8" pos:end="37:20">(<expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">val</name> <operator pos:start="37:13" pos:end="37:13">&gt;</operator> <literal type="number" pos:start="37:15" pos:end="37:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:20"><block_content pos:start="39:9" pos:end="39:20">

        <expr_stmt pos:start="39:9" pos:end="39:20"><expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:11">val</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:33"><expr pos:start="41:5" pos:end="41:32"><call pos:start="41:5" pos:end="41:32"><name pos:start="41:5" pos:end="41:18">rtc_set_memory</name><argument_list pos:start="41:19" pos:end="41:32">(<argument pos:start="41:20" pos:end="41:20"><expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">s</name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><literal type="number" pos:start="41:23" pos:end="41:26">0x17</literal></expr></argument>, <argument pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><call pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:18">rtc_set_memory</name><argument_list pos:start="43:19" pos:end="43:37">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">s</name></expr></argument>, <argument pos:start="43:23" pos:end="43:26"><expr pos:start="43:23" pos:end="43:26"><literal type="number" pos:start="43:23" pos:end="43:26">0x18</literal></expr></argument>, <argument pos:start="43:29" pos:end="43:36"><expr pos:start="43:29" pos:end="43:36"><name pos:start="43:29" pos:end="43:31">val</name> <operator pos:start="43:33" pos:end="43:34">&gt;&gt;</operator> <literal type="number" pos:start="43:36" pos:end="43:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><call pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:18">rtc_set_memory</name><argument_list pos:start="45:19" pos:end="45:32">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:26"><expr pos:start="45:23" pos:end="45:26"><literal type="number" pos:start="45:23" pos:end="45:26">0x30</literal></expr></argument>, <argument pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><name pos:start="45:29" pos:end="45:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><call pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:18">rtc_set_memory</name><argument_list pos:start="47:19" pos:end="47:37">(<argument pos:start="47:20" pos:end="47:20"><expr pos:start="47:20" pos:end="47:20"><name pos:start="47:20" pos:end="47:20">s</name></expr></argument>, <argument pos:start="47:23" pos:end="47:26"><expr pos:start="47:23" pos:end="47:26"><literal type="number" pos:start="47:23" pos:end="47:26">0x31</literal></expr></argument>, <argument pos:start="47:29" pos:end="47:36"><expr pos:start="47:29" pos:end="47:36"><name pos:start="47:29" pos:end="47:31">val</name> <operator pos:start="47:33" pos:end="47:34">&gt;&gt;</operator> <literal type="number" pos:start="47:36" pos:end="47:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:26">(<expr pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:25">above_4g_mem_size</name></expr>)</condition> <block pos:start="51:28" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:67">

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:22">rtc_set_memory</name><argument_list pos:start="53:23" pos:end="53:70">(<argument pos:start="53:24" pos:end="53:24"><expr pos:start="53:24" pos:end="53:24"><name pos:start="53:24" pos:end="53:24">s</name></expr></argument>, <argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><literal type="number" pos:start="53:27" pos:end="53:30">0x5b</literal></expr></argument>, <argument pos:start="53:33" pos:end="53:69"><expr pos:start="53:33" pos:end="53:69"><operator pos:start="53:33" pos:end="53:33">(</operator><name pos:start="53:34" pos:end="53:41">unsigned</name> <name pos:start="53:43" pos:end="53:45">int</name><operator pos:start="53:46" pos:end="53:46">)</operator><name pos:start="53:47" pos:end="53:63">above_4g_mem_size</name> <operator pos:start="53:65" pos:end="53:66">&gt;&gt;</operator> <literal type="number" pos:start="53:68" pos:end="53:69">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:71"><expr pos:start="55:9" pos:end="55:70"><call pos:start="55:9" pos:end="55:70"><name pos:start="55:9" pos:end="55:22">rtc_set_memory</name><argument_list pos:start="55:23" pos:end="55:70">(<argument pos:start="55:24" pos:end="55:24"><expr pos:start="55:24" pos:end="55:24"><name pos:start="55:24" pos:end="55:24">s</name></expr></argument>, <argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><literal type="number" pos:start="55:27" pos:end="55:30">0x5c</literal></expr></argument>, <argument pos:start="55:33" pos:end="55:69"><expr pos:start="55:33" pos:end="55:69"><operator pos:start="55:33" pos:end="55:33">(</operator><name pos:start="55:34" pos:end="55:41">unsigned</name> <name pos:start="55:43" pos:end="55:45">int</name><operator pos:start="55:46" pos:end="55:46">)</operator><name pos:start="55:47" pos:end="55:63">above_4g_mem_size</name> <operator pos:start="55:65" pos:end="55:66">&gt;&gt;</operator> <literal type="number" pos:start="55:68" pos:end="55:69">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:67"><expr pos:start="57:9" pos:end="57:66"><call pos:start="57:9" pos:end="57:66"><name pos:start="57:9" pos:end="57:22">rtc_set_memory</name><argument_list pos:start="57:23" pos:end="57:66">(<argument pos:start="57:24" pos:end="57:24"><expr pos:start="57:24" pos:end="57:24"><name pos:start="57:24" pos:end="57:24">s</name></expr></argument>, <argument pos:start="57:27" pos:end="57:30"><expr pos:start="57:27" pos:end="57:30"><literal type="number" pos:start="57:27" pos:end="57:30">0x5d</literal></expr></argument>, <argument pos:start="57:33" pos:end="57:65"><expr pos:start="57:33" pos:end="57:65"><operator pos:start="57:33" pos:end="57:33">(</operator><name pos:start="57:34" pos:end="57:41">uint64_t</name><operator pos:start="57:42" pos:end="57:42">)</operator><name pos:start="57:43" pos:end="57:59">above_4g_mem_size</name> <operator pos:start="57:61" pos:end="57:62">&gt;&gt;</operator> <literal type="number" pos:start="57:64" pos:end="57:65">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="69:16"><if pos:start="63:5" pos:end="65:64">if <condition pos:start="63:8" pos:end="63:38">(<expr pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:16">ram_size</name> <operator pos:start="63:18" pos:end="63:18">&gt;</operator> <operator pos:start="63:20" pos:end="63:20">(</operator><literal type="number" pos:start="63:21" pos:end="63:22">16</literal> <operator pos:start="63:24" pos:end="63:24">*</operator> <literal type="number" pos:start="63:26" pos:end="63:29">1024</literal> <operator pos:start="63:31" pos:end="63:31">*</operator> <literal type="number" pos:start="63:33" pos:end="63:36">1024</literal><operator pos:start="63:37" pos:end="63:37">)</operator></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:64"><block_content pos:start="65:9" pos:end="65:64">

        <expr_stmt pos:start="65:9" pos:end="65:64"><expr pos:start="65:9" pos:end="65:63"><name pos:start="65:9" pos:end="65:11">val</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">(</operator><name pos:start="65:16" pos:end="65:23">ram_size</name> <operator pos:start="65:25" pos:end="65:25">/</operator> <literal type="number" pos:start="65:27" pos:end="65:31">65536</literal><operator pos:start="65:32" pos:end="65:32">)</operator> <operator pos:start="65:34" pos:end="65:34">-</operator> <operator pos:start="65:36" pos:end="65:36">(</operator><operator pos:start="65:37" pos:end="65:37">(</operator><literal type="number" pos:start="65:38" pos:end="65:39">16</literal> <operator pos:start="65:41" pos:end="65:41">*</operator> <literal type="number" pos:start="65:43" pos:end="65:46">1024</literal> <operator pos:start="65:48" pos:end="65:48">*</operator> <literal type="number" pos:start="65:50" pos:end="65:53">1024</literal><operator pos:start="65:54" pos:end="65:54">)</operator> <operator pos:start="65:56" pos:end="65:56">/</operator> <literal type="number" pos:start="65:58" pos:end="65:62">65536</literal><operator pos:start="65:63" pos:end="65:63">)</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="67:5" pos:end="69:16">else<block type="pseudo" pos:start="69:9" pos:end="69:16"><block_content pos:start="69:9" pos:end="69:16">

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">val</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="71:5" pos:end="73:20"><if pos:start="71:5" pos:end="73:20">if <condition pos:start="71:8" pos:end="71:20">(<expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:11">val</name> <operator pos:start="71:13" pos:end="71:13">&gt;</operator> <literal type="number" pos:start="71:15" pos:end="71:19">65535</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:20"><block_content pos:start="73:9" pos:end="73:20">

        <expr_stmt pos:start="73:9" pos:end="73:20"><expr pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:11">val</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <literal type="number" pos:start="73:15" pos:end="73:19">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><call pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:18">rtc_set_memory</name><argument_list pos:start="75:19" pos:end="75:32">(<argument pos:start="75:20" pos:end="75:20"><expr pos:start="75:20" pos:end="75:20"><name pos:start="75:20" pos:end="75:20">s</name></expr></argument>, <argument pos:start="75:23" pos:end="75:26"><expr pos:start="75:23" pos:end="75:26"><literal type="number" pos:start="75:23" pos:end="75:26">0x34</literal></expr></argument>, <argument pos:start="75:29" pos:end="75:31"><expr pos:start="75:29" pos:end="75:31"><name pos:start="75:29" pos:end="75:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:38"><expr pos:start="77:5" pos:end="77:37"><call pos:start="77:5" pos:end="77:37"><name pos:start="77:5" pos:end="77:18">rtc_set_memory</name><argument_list pos:start="77:19" pos:end="77:37">(<argument pos:start="77:20" pos:end="77:20"><expr pos:start="77:20" pos:end="77:20"><name pos:start="77:20" pos:end="77:20">s</name></expr></argument>, <argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><literal type="number" pos:start="77:23" pos:end="77:26">0x35</literal></expr></argument>, <argument pos:start="77:29" pos:end="77:36"><expr pos:start="77:29" pos:end="77:36"><name pos:start="77:29" pos:end="77:31">val</name> <operator pos:start="77:33" pos:end="77:34">&gt;&gt;</operator> <literal type="number" pos:start="77:36" pos:end="77:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:31">/* set the number of CPU */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:42"><expr pos:start="83:5" pos:end="83:41"><call pos:start="83:5" pos:end="83:41"><name pos:start="83:5" pos:end="83:18">rtc_set_memory</name><argument_list pos:start="83:19" pos:end="83:41">(<argument pos:start="83:20" pos:end="83:20"><expr pos:start="83:20" pos:end="83:20"><name pos:start="83:20" pos:end="83:20">s</name></expr></argument>, <argument pos:start="83:23" pos:end="83:26"><expr pos:start="83:23" pos:end="83:26"><literal type="number" pos:start="83:23" pos:end="83:26">0x5f</literal></expr></argument>, <argument pos:start="83:29" pos:end="83:40"><expr pos:start="83:29" pos:end="83:40"><name pos:start="83:29" pos:end="83:36">smp_cpus</name> <operator pos:start="83:38" pos:end="83:38">-</operator> <literal type="number" pos:start="83:40" pos:end="83:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:75">/* set boot devices, and disable floppy signature check if requested */</comment>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:49">(<expr pos:start="89:9" pos:end="89:48"><call pos:start="89:9" pos:end="89:48"><name pos:start="89:9" pos:end="89:20">set_boot_dev</name><argument_list pos:start="89:21" pos:end="89:48">(<argument pos:start="89:22" pos:end="89:22"><expr pos:start="89:22" pos:end="89:22"><name pos:start="89:22" pos:end="89:22">s</name></expr></argument>, <argument pos:start="89:25" pos:end="89:35"><expr pos:start="89:25" pos:end="89:35"><name pos:start="89:25" pos:end="89:35">boot_device</name></expr></argument>, <argument pos:start="89:38" pos:end="89:47"><expr pos:start="89:38" pos:end="89:47"><name pos:start="89:38" pos:end="89:47">fd_bootchk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:51" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:16">

        <expr_stmt pos:start="91:9" pos:end="91:16"><expr pos:start="91:9" pos:end="91:15"><call pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">exit</name><argument_list pos:start="91:13" pos:end="91:15">(<argument pos:start="91:14" pos:end="91:14"><expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:21">/* floppy type */</comment>

    <for pos:start="99:5" pos:end="117:5">for <control pos:start="99:9" pos:end="99:27">(<init pos:start="99:10" pos:end="99:15"><expr pos:start="99:10" pos:end="99:14"><name pos:start="99:10" pos:end="99:10">i</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</init> <condition pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:21"><name pos:start="99:17" pos:end="99:17">i</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <literal type="number" pos:start="99:21" pos:end="99:21">2</literal></expr>;</condition> <incr pos:start="99:24" pos:end="99:26"><expr pos:start="99:24" pos:end="99:26"><name pos:start="99:24" pos:end="99:24">i</name><operator pos:start="99:25" pos:end="99:26">++</operator></expr></incr>)</control> <block pos:start="99:29" pos:end="117:5">{<block_content pos:start="101:9" pos:end="115:9">

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:13"><name pos:start="101:9" pos:end="101:10">fd</name><index pos:start="101:11" pos:end="101:13">[<expr pos:start="101:12" pos:end="101:12"><name pos:start="101:12" pos:end="101:12">i</name></expr>]</index></name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="101:42"><name pos:start="101:17" pos:end="101:25">drive_get</name><argument_list pos:start="101:26" pos:end="101:42">(<argument pos:start="101:27" pos:end="101:35"><expr pos:start="101:27" pos:end="101:35"><name pos:start="101:27" pos:end="101:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="101:38" pos:end="101:38"><expr pos:start="101:38" pos:end="101:38"><literal type="number" pos:start="101:38" pos:end="101:38">0</literal></expr></argument>, <argument pos:start="101:41" pos:end="101:41"><expr pos:start="101:41" pos:end="101:41"><name pos:start="101:41" pos:end="101:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="115:9"><if pos:start="103:9" pos:end="111:9">if <condition pos:start="103:12" pos:end="103:18">(<expr pos:start="103:13" pos:end="103:17"><name pos:start="103:13" pos:end="103:17"><name pos:start="103:13" pos:end="103:14">fd</name><index pos:start="103:15" pos:end="103:17">[<expr pos:start="103:16" pos:end="103:16"><name pos:start="103:16" pos:end="103:16">i</name></expr>]</index></name></expr>)</condition> <block pos:start="103:20" pos:end="111:9">{<block_content pos:start="105:13" pos:end="109:55">

            <expr_stmt pos:start="105:13" pos:end="109:55"><expr pos:start="105:13" pos:end="109:54"><call pos:start="105:13" pos:end="109:54"><name pos:start="105:13" pos:end="105:41">bdrv_get_floppy_geometry_hint</name><argument_list pos:start="105:42" pos:end="109:54">(<argument pos:start="105:43" pos:end="105:53"><expr pos:start="105:43" pos:end="105:53"><name pos:start="105:43" pos:end="105:47"><name pos:start="105:43" pos:end="105:44">fd</name><index pos:start="105:45" pos:end="105:47">[<expr pos:start="105:46" pos:end="105:46"><name pos:start="105:46" pos:end="105:46">i</name></expr>]</index></name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:53">bdrv</name></expr></argument>, <argument pos:start="105:56" pos:end="105:64"><expr pos:start="105:56" pos:end="105:64"><operator pos:start="105:56" pos:end="105:56">&amp;</operator><name pos:start="105:57" pos:end="105:64">nb_heads</name></expr></argument>, <argument pos:start="105:67" pos:end="105:76"><expr pos:start="105:67" pos:end="105:76"><operator pos:start="105:67" pos:end="105:67">&amp;</operator><name pos:start="105:68" pos:end="105:76">max_track</name></expr></argument>,

                                          <argument pos:start="107:43" pos:end="107:52"><expr pos:start="107:43" pos:end="107:52"><operator pos:start="107:43" pos:end="107:43">&amp;</operator><name pos:start="107:44" pos:end="107:52">last_sect</name></expr></argument>, <argument pos:start="107:55" pos:end="107:69"><expr pos:start="107:55" pos:end="107:69"><name pos:start="107:55" pos:end="107:69">FDRIVE_DRV_NONE</name></expr></argument>,

                                          <argument pos:start="109:43" pos:end="109:53"><expr pos:start="109:43" pos:end="109:53"><operator pos:start="109:43" pos:end="109:43">&amp;</operator><name pos:start="109:44" pos:end="109:53"><name pos:start="109:44" pos:end="109:50">fd_type</name><index pos:start="109:51" pos:end="109:53">[<expr pos:start="109:52" pos:end="109:52"><name pos:start="109:52" pos:end="109:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="115:9">else <block pos:start="111:16" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:41">

            <expr_stmt pos:start="113:13" pos:end="113:41"><expr pos:start="113:13" pos:end="113:40"><name pos:start="113:13" pos:end="113:22"><name pos:start="113:13" pos:end="113:19">fd_type</name><index pos:start="113:20" pos:end="113:22">[<expr pos:start="113:21" pos:end="113:21"><name pos:start="113:21" pos:end="113:21">i</name></expr>]</index></name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:40">FDRIVE_DRV_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="119:5" pos:end="121:43"><expr pos:start="119:5" pos:end="121:42"><name pos:start="119:5" pos:end="119:7">val</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <operator pos:start="119:11" pos:end="119:11">(</operator><call pos:start="119:12" pos:end="119:45"><name pos:start="119:12" pos:end="119:33">cmos_get_fd_drive_type</name><argument_list pos:start="119:34" pos:end="119:45">(<argument pos:start="119:35" pos:end="119:44"><expr pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:44"><name pos:start="119:35" pos:end="119:41">fd_type</name><index pos:start="119:42" pos:end="119:44">[<expr pos:start="119:43" pos:end="119:43"><literal type="number" pos:start="119:43" pos:end="119:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="119:47" pos:end="119:48">&lt;&lt;</operator> <literal type="number" pos:start="119:50" pos:end="119:50">4</literal><operator pos:start="119:51" pos:end="119:51">)</operator> <operator pos:start="119:53" pos:end="119:53">|</operator>

        <call pos:start="121:9" pos:end="121:42"><name pos:start="121:9" pos:end="121:30">cmos_get_fd_drive_type</name><argument_list pos:start="121:31" pos:end="121:42">(<argument pos:start="121:32" pos:end="121:41"><expr pos:start="121:32" pos:end="121:41"><name pos:start="121:32" pos:end="121:41"><name pos:start="121:32" pos:end="121:38">fd_type</name><index pos:start="121:39" pos:end="121:41">[<expr pos:start="121:40" pos:end="121:40"><literal type="number" pos:start="121:40" pos:end="121:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:33"><expr pos:start="123:5" pos:end="123:32"><call pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:18">rtc_set_memory</name><argument_list pos:start="123:19" pos:end="123:32">(<argument pos:start="123:20" pos:end="123:20"><expr pos:start="123:20" pos:end="123:20"><name pos:start="123:20" pos:end="123:20">s</name></expr></argument>, <argument pos:start="123:23" pos:end="123:26"><expr pos:start="123:23" pos:end="123:26"><literal type="number" pos:start="123:23" pos:end="123:26">0x10</literal></expr></argument>, <argument pos:start="123:29" pos:end="123:31"><expr pos:start="123:29" pos:end="123:31"><name pos:start="123:29" pos:end="123:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:12"><expr pos:start="127:5" pos:end="127:11"><name pos:start="127:5" pos:end="127:7">val</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <literal type="number" pos:start="127:11" pos:end="127:11">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:11"><expr pos:start="129:5" pos:end="129:10"><name pos:start="129:5" pos:end="129:6">nb</name> <operator pos:start="129:8" pos:end="129:8">=</operator> <literal type="number" pos:start="129:10" pos:end="129:10">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="135:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:37">(<expr pos:start="131:9" pos:end="131:36"><name pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:15">fd_type</name><index pos:start="131:16" pos:end="131:18">[<expr pos:start="131:17" pos:end="131:17"><literal type="number" pos:start="131:17" pos:end="131:17">0</literal></expr>]</index></name> <operator pos:start="131:20" pos:end="131:20">&lt;</operator> <name pos:start="131:22" pos:end="131:36">FDRIVE_DRV_NONE</name></expr>)</condition> <block pos:start="131:39" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:13">

        <expr_stmt pos:start="133:9" pos:end="133:13"><expr pos:start="133:9" pos:end="133:12"><name pos:start="133:9" pos:end="133:10">nb</name><operator pos:start="133:11" pos:end="133:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:37">(<expr pos:start="137:9" pos:end="137:36"><name pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:15">fd_type</name><index pos:start="137:16" pos:end="137:18">[<expr pos:start="137:17" pos:end="137:17"><literal type="number" pos:start="137:17" pos:end="137:17">1</literal></expr>]</index></name> <operator pos:start="137:20" pos:end="137:20">&lt;</operator> <name pos:start="137:22" pos:end="137:36">FDRIVE_DRV_NONE</name></expr>)</condition> <block pos:start="137:39" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:13">

        <expr_stmt pos:start="139:9" pos:end="139:13"><expr pos:start="139:9" pos:end="139:12"><name pos:start="139:9" pos:end="139:10">nb</name><operator pos:start="139:11" pos:end="139:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="143:5" pos:end="161:5">switch <condition pos:start="143:12" pos:end="143:15">(<expr pos:start="143:13" pos:end="143:14"><name pos:start="143:13" pos:end="143:14">nb</name></expr>)</condition> <block pos:start="143:17" pos:end="161:5">{<block_content pos:start="145:5" pos:end="159:14">

    <case pos:start="145:5" pos:end="145:11">case <expr pos:start="145:10" pos:end="145:10"><literal type="number" pos:start="145:10" pos:end="145:10">0</literal></expr>:</case>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:11">case <expr pos:start="149:10" pos:end="149:10"><literal type="number" pos:start="149:10" pos:end="149:10">1</literal></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:20"><expr pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:11">val</name> <operator pos:start="151:13" pos:end="151:14">|=</operator> <literal type="number" pos:start="151:16" pos:end="151:19">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="151:22" pos:end="151:50">/* 1 drive, ready for boot */</comment>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:11">case <expr pos:start="155:10" pos:end="155:10"><literal type="number" pos:start="155:10" pos:end="155:10">2</literal></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:20"><expr pos:start="157:9" pos:end="157:19"><name pos:start="157:9" pos:end="157:11">val</name> <operator pos:start="157:13" pos:end="157:14">|=</operator> <literal type="number" pos:start="157:16" pos:end="157:19">0x41</literal></expr>;</expr_stmt> <comment type="block" pos:start="157:22" pos:end="157:51">/* 2 drives, ready for boot */</comment>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="163:5" pos:end="163:16"><expr pos:start="163:5" pos:end="163:15"><name pos:start="163:5" pos:end="163:7">val</name> <operator pos:start="163:9" pos:end="163:10">|=</operator> <literal type="number" pos:start="163:12" pos:end="163:15">0x02</literal></expr>;</expr_stmt> <comment type="block" pos:start="163:18" pos:end="163:35">/* FPU is there */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:16"><expr pos:start="165:5" pos:end="165:15"><name pos:start="165:5" pos:end="165:7">val</name> <operator pos:start="165:9" pos:end="165:10">|=</operator> <literal type="number" pos:start="165:12" pos:end="165:15">0x04</literal></expr>;</expr_stmt> <comment type="block" pos:start="165:18" pos:end="165:43">/* PS/2 mouse installed */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:47"><expr pos:start="167:5" pos:end="167:46"><call pos:start="167:5" pos:end="167:46"><name pos:start="167:5" pos:end="167:18">rtc_set_memory</name><argument_list pos:start="167:19" pos:end="167:46">(<argument pos:start="167:20" pos:end="167:20"><expr pos:start="167:20" pos:end="167:20"><name pos:start="167:20" pos:end="167:20">s</name></expr></argument>, <argument pos:start="167:23" pos:end="167:40"><expr pos:start="167:23" pos:end="167:40"><name pos:start="167:23" pos:end="167:40">REG_EQUIPMENT_BYTE</name></expr></argument>, <argument pos:start="167:43" pos:end="167:45"><expr pos:start="167:43" pos:end="167:45"><name pos:start="167:43" pos:end="167:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:21">/* hard drives */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:22"><expr pos:start="173:5" pos:end="173:21"><name pos:start="173:5" pos:end="173:17"><name pos:start="173:5" pos:end="173:7">arg</name><operator pos:start="173:8" pos:end="173:8">.</operator><name pos:start="173:9" pos:end="173:17">rtc_state</name></name> <operator pos:start="173:19" pos:end="173:19">=</operator> <name pos:start="173:21" pos:end="173:21">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:26"><expr pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:15"><name pos:start="175:5" pos:end="175:7">arg</name><operator pos:start="175:8" pos:end="175:8">.</operator><name pos:start="175:9" pos:end="175:15">idebus0</name></name> <operator pos:start="175:17" pos:end="175:17">=</operator> <name pos:start="175:19" pos:end="175:25">idebus0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:26"><expr pos:start="177:5" pos:end="177:25"><name pos:start="177:5" pos:end="177:15"><name pos:start="177:5" pos:end="177:7">arg</name><operator pos:start="177:8" pos:end="177:8">.</operator><name pos:start="177:9" pos:end="177:15">idebus1</name></name> <operator pos:start="177:17" pos:end="177:17">=</operator> <name pos:start="177:19" pos:end="177:25">idebus1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:49"><expr pos:start="179:5" pos:end="179:48"><call pos:start="179:5" pos:end="179:48"><name pos:start="179:5" pos:end="179:23">qemu_register_reset</name><argument_list pos:start="179:24" pos:end="179:48">(<argument pos:start="179:25" pos:end="179:41"><expr pos:start="179:25" pos:end="179:41"><name pos:start="179:25" pos:end="179:41">pc_cmos_init_late</name></expr></argument>, <argument pos:start="179:44" pos:end="179:47"><expr pos:start="179:44" pos:end="179:47"><operator pos:start="179:44" pos:end="179:44">&amp;</operator><name pos:start="179:45" pos:end="179:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
