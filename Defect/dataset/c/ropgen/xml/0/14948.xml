<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14948.c" pos:tabs="8"><function pos:start="1:1" pos:end="683:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:37">avcodec_open2</name><parameter_list pos:start="1:38" pos:end="1:106">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:81"><decl pos:start="1:62" pos:end="1:81"><type pos:start="1:62" pos:end="1:81"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:74">AVCodec</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:81">codec</name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:105"><decl pos:start="1:84" pos:end="1:105"><type pos:start="1:84" pos:end="1:105"><name pos:start="1:84" pos:end="1:95">AVDictionary</name> <modifier pos:start="1:97" pos:end="1:97">*</modifier><modifier pos:start="1:98" pos:end="1:98">*</modifier></type><name pos:start="1:99" pos:end="1:105">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="683:1">{<block_content pos:start="5:5" pos:end="681:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVDictionary</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">tmp</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><call pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:23">avcodec_is_open</name><argument_list pos:start="11:24" pos:end="11:30">(<argument pos:start="11:25" pos:end="11:29"><expr pos:start="11:25" pos:end="11:29"><name pos:start="11:25" pos:end="11:29">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:34">(<expr pos:start="17:9" pos:end="17:33"><operator pos:start="17:9" pos:end="17:9">(</operator><operator pos:start="17:10" pos:end="17:10">!</operator><name pos:start="17:11" pos:end="17:15">codec</name> <operator pos:start="17:17" pos:end="17:18">&amp;&amp;</operator> <operator pos:start="17:20" pos:end="17:20">!</operator><name pos:start="17:21" pos:end="17:32"><name pos:start="17:21" pos:end="17:25">avctx</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:32">codec</name></name><operator pos:start="17:33" pos:end="17:33">)</operator></expr>)</condition> <block pos:start="17:36" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:31">

        <expr_stmt pos:start="19:9" pos:end="19:78"><expr pos:start="19:9" pos:end="19:77"><call pos:start="19:9" pos:end="19:77"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:77">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:76"><expr pos:start="19:37" pos:end="19:76"><literal type="string" pos:start="19:37" pos:end="19:76">"No codec provided to avcodec_open2()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:57">(<expr pos:start="25:9" pos:end="25:56"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:14">codec</name> <operator pos:start="25:16" pos:end="25:17">&amp;&amp;</operator> <name pos:start="25:19" pos:end="25:30"><name pos:start="25:19" pos:end="25:23">avctx</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:30">codec</name></name> <operator pos:start="25:32" pos:end="25:33">&amp;&amp;</operator> <name pos:start="25:35" pos:end="25:39">codec</name> <operator pos:start="25:41" pos:end="25:42">!=</operator> <name pos:start="25:44" pos:end="25:55"><name pos:start="25:44" pos:end="25:48">avctx</name><operator pos:start="25:49" pos:end="25:50">-&gt;</operator><name pos:start="25:51" pos:end="25:55">codec</name></name><operator pos:start="25:56" pos:end="25:56">)</operator></expr>)</condition> <block pos:start="25:59" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:31">

        <expr_stmt pos:start="27:9" pos:end="29:107"><expr pos:start="27:9" pos:end="29:106"><call pos:start="27:9" pos:end="29:106"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:106">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="29:72"><expr pos:start="27:37" pos:end="29:72"><literal type="string" pos:start="27:37" pos:end="27:80">"This AVCodecContext was allocated for %s, "</literal>

                                    <literal type="string" pos:start="29:37" pos:end="29:72">"but %s passed to avcodec_open2()\n"</literal></expr></argument>, <argument pos:start="29:75" pos:end="29:92"><expr pos:start="29:75" pos:end="29:92"><name pos:start="29:75" pos:end="29:92"><name pos:start="29:75" pos:end="29:79">avctx</name><operator pos:start="29:80" pos:end="29:81">-&gt;</operator><name pos:start="29:82" pos:end="29:86">codec</name><operator pos:start="29:87" pos:end="29:88">-&gt;</operator><name pos:start="29:89" pos:end="29:92">name</name></name></expr></argument>, <argument pos:start="29:95" pos:end="29:105"><expr pos:start="29:95" pos:end="29:105"><name pos:start="29:95" pos:end="29:105"><name pos:start="29:95" pos:end="29:99">codec</name><operator pos:start="29:100" pos:end="29:101">-&gt;</operator><name pos:start="29:102" pos:end="29:105">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="37:29"><if pos:start="35:5" pos:end="37:29">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:14">codec</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:29"><block_content pos:start="37:9" pos:end="37:29">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:13">codec</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:21">avctx</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:28">codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="43:31"><if pos:start="41:5" pos:end="43:31">if <condition pos:start="41:8" pos:end="41:84">(<expr pos:start="41:9" pos:end="41:83"><name pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:29">extradata_size</name></name> <operator pos:start="41:31" pos:end="41:31">&lt;</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal> <operator pos:start="41:35" pos:end="41:36">||</operator> <name pos:start="41:38" pos:end="41:58"><name pos:start="41:38" pos:end="41:42">avctx</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:58">extradata_size</name></name> <operator pos:start="41:60" pos:end="41:61">&gt;=</operator> <name pos:start="41:63" pos:end="41:83">FF_MAX_EXTRADATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:31"><block_content pos:start="43:9" pos:end="43:31">

        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="49:40"><if pos:start="47:5" pos:end="49:40">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:15">options</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:40"><block_content pos:start="49:9" pos:end="49:40">

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:20">av_dict_copy</name><argument_list pos:start="49:21" pos:end="49:39">(<argument pos:start="49:22" pos:end="49:25"><expr pos:start="49:22" pos:end="49:25"><operator pos:start="49:22" pos:end="49:22">&amp;</operator><name pos:start="49:23" pos:end="49:25">tmp</name></expr></argument>, <argument pos:start="49:28" pos:end="49:35"><expr pos:start="49:28" pos:end="49:35"><operator pos:start="49:28" pos:end="49:28">*</operator><name pos:start="49:29" pos:end="49:35">options</name></expr></argument>, <argument pos:start="49:38" pos:end="49:38"><expr pos:start="49:38" pos:end="49:38"><literal type="number" pos:start="49:38" pos:end="49:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:32"><name pos:start="53:11" pos:end="53:25">ff_lock_avcodec</name><argument_list pos:start="53:26" pos:end="53:32">(<argument pos:start="53:27" pos:end="53:31"><expr pos:start="53:27" pos:end="53:31"><name pos:start="53:27" pos:end="53:31">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:19"><if pos:start="55:5" pos:end="57:19">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:19"><block_content pos:start="57:9" pos:end="57:19">

        <return pos:start="57:9" pos:end="57:19">return <expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:58"><expr pos:start="61:5" pos:end="61:57"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:9">avctx</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">internal</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:57"><name pos:start="61:23" pos:end="61:32">av_mallocz</name><argument_list pos:start="61:33" pos:end="61:57">(<argument pos:start="61:34" pos:end="61:56"><expr pos:start="61:34" pos:end="61:56"><sizeof pos:start="61:34" pos:end="61:56">sizeof<argument_list pos:start="61:40" pos:end="61:56">(<argument pos:start="61:41" pos:end="61:55"><expr pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:55">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:25">(<expr pos:start="63:9" pos:end="63:24"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:24"><name pos:start="63:10" pos:end="63:14">avctx</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:24">internal</name></name></expr>)</condition> <block pos:start="63:27" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:17">

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:29"><name pos:start="65:15" pos:end="65:21">AVERROR</name><argument_list pos:start="65:22" pos:end="65:29">(<argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:71"><expr pos:start="73:5" pos:end="73:70"><name pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:9">avctx</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:19">internal</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:25">pool</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <call pos:start="73:29" pos:end="73:70"><name pos:start="73:29" pos:end="73:38">av_mallocz</name><argument_list pos:start="73:39" pos:end="73:70">(<argument pos:start="73:40" pos:end="73:69"><expr pos:start="73:40" pos:end="73:69"><sizeof pos:start="73:40" pos:end="73:69">sizeof<argument_list pos:start="73:46" pos:end="73:69">(<argument pos:start="73:47" pos:end="73:68"><expr pos:start="73:47" pos:end="73:68"><operator pos:start="73:47" pos:end="73:47">*</operator><name pos:start="73:48" pos:end="73:68"><name pos:start="73:48" pos:end="73:52">avctx</name><operator pos:start="73:53" pos:end="73:54">-&gt;</operator><name pos:start="73:55" pos:end="73:62">internal</name><operator pos:start="73:63" pos:end="73:64">-&gt;</operator><name pos:start="73:65" pos:end="73:68">pool</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:31">(<expr pos:start="75:9" pos:end="75:30"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:30"><name pos:start="75:10" pos:end="75:14">avctx</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:24">internal</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:30">pool</name></name></expr>)</condition> <block pos:start="75:33" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:26">

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:29"><name pos:start="77:15" pos:end="77:21">AVERROR</name><argument_list pos:start="77:22" pos:end="77:29">(<argument pos:start="77:23" pos:end="77:28"><expr pos:start="77:23" pos:end="77:28"><name pos:start="77:23" pos:end="77:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:26">goto <name pos:start="79:14" pos:end="79:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="117:5"><if pos:start="85:5" pos:end="113:5">if <condition pos:start="85:8" pos:end="85:34">(<expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:13">codec</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:29">priv_data_size</name></name> <operator pos:start="85:31" pos:end="85:31">&gt;</operator> <literal type="number" pos:start="85:33" pos:end="85:33">0</literal></expr>)</condition> <block pos:start="85:36" pos:end="113:5">{<block_content pos:start="87:9" pos:end="111:30">

        <if_stmt pos:start="87:9" pos:end="107:9"><if pos:start="87:9" pos:end="107:9">if <condition pos:start="87:12" pos:end="87:30">(<expr pos:start="87:13" pos:end="87:29"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:29"><name pos:start="87:14" pos:end="87:18">avctx</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:29">priv_data</name></name></expr>)</condition> <block pos:start="87:32" pos:end="107:9">{<block_content pos:start="89:13" pos:end="105:13">

            <expr_stmt pos:start="89:13" pos:end="89:65"><expr pos:start="89:13" pos:end="89:64"><name pos:start="89:13" pos:end="89:28"><name pos:start="89:13" pos:end="89:17">avctx</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:28">priv_data</name></name> <operator pos:start="89:30" pos:end="89:30">=</operator> <call pos:start="89:32" pos:end="89:64"><name pos:start="89:32" pos:end="89:41">av_mallocz</name><argument_list pos:start="89:42" pos:end="89:64">(<argument pos:start="89:43" pos:end="89:63"><expr pos:start="89:43" pos:end="89:63"><name pos:start="89:43" pos:end="89:63"><name pos:start="89:43" pos:end="89:47">codec</name><operator pos:start="89:48" pos:end="89:49">-&gt;</operator><name pos:start="89:50" pos:end="89:63">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:34">(<expr pos:start="91:17" pos:end="91:33"><operator pos:start="91:17" pos:end="91:17">!</operator><name pos:start="91:18" pos:end="91:33"><name pos:start="91:18" pos:end="91:22">avctx</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:33">priv_data</name></name></expr>)</condition> <block pos:start="91:36" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:25">

                <expr_stmt pos:start="93:17" pos:end="93:38"><expr pos:start="93:17" pos:end="93:37"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:37"><name pos:start="93:23" pos:end="93:29">AVERROR</name><argument_list pos:start="93:30" pos:end="93:37">(<argument pos:start="93:31" pos:end="93:36"><expr pos:start="93:31" pos:end="93:36"><name pos:start="93:31" pos:end="93:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="95:17" pos:end="95:25">goto <name pos:start="95:22" pos:end="95:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="105:13"><if pos:start="99:13" pos:end="105:13">if <condition pos:start="99:16" pos:end="99:34">(<expr pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:21">codec</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:33">priv_class</name></name></expr>)</condition> <block pos:start="99:36" pos:end="105:13">{<block_content pos:start="101:17" pos:end="103:54">

                <expr_stmt pos:start="101:17" pos:end="101:72"><expr pos:start="101:17" pos:end="101:71"><operator pos:start="101:17" pos:end="101:17">*</operator><operator pos:start="101:18" pos:end="101:18">(</operator><specifier pos:start="101:19" pos:end="101:23">const</specifier> <name pos:start="101:25" pos:end="101:31">AVClass</name> <operator pos:start="101:33" pos:end="101:33">*</operator><operator pos:start="101:34" pos:end="101:34">*</operator><operator pos:start="101:35" pos:end="101:35">)</operator><name pos:start="101:36" pos:end="101:51"><name pos:start="101:36" pos:end="101:40">avctx</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:51">priv_data</name></name> <operator pos:start="101:53" pos:end="101:53">=</operator> <name pos:start="101:55" pos:end="101:71"><name pos:start="101:55" pos:end="101:59">codec</name><operator pos:start="101:60" pos:end="101:61">-&gt;</operator><name pos:start="101:62" pos:end="101:71">priv_class</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:54"><expr pos:start="103:17" pos:end="103:53"><call pos:start="103:17" pos:end="103:53"><name pos:start="103:17" pos:end="103:35">av_opt_set_defaults</name><argument_list pos:start="103:36" pos:end="103:53">(<argument pos:start="103:37" pos:end="103:52"><expr pos:start="103:37" pos:end="103:52"><name pos:start="103:37" pos:end="103:52"><name pos:start="103:37" pos:end="103:41">avctx</name><operator pos:start="103:42" pos:end="103:43">-&gt;</operator><name pos:start="103:44" pos:end="103:52">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="111:30"><if pos:start="109:9" pos:end="111:30">if <condition pos:start="109:12" pos:end="109:85">(<expr pos:start="109:13" pos:end="109:84"><name pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:17">codec</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:29">priv_class</name></name> <operator pos:start="109:31" pos:end="109:32">&amp;&amp;</operator> <operator pos:start="109:34" pos:end="109:34">(</operator><name pos:start="109:35" pos:end="109:37">ret</name> <operator pos:start="109:39" pos:end="109:39">=</operator> <call pos:start="109:41" pos:end="109:79"><name pos:start="109:41" pos:end="109:55">av_opt_set_dict</name><argument_list pos:start="109:56" pos:end="109:79">(<argument pos:start="109:57" pos:end="109:72"><expr pos:start="109:57" pos:end="109:72"><name pos:start="109:57" pos:end="109:72"><name pos:start="109:57" pos:end="109:61">avctx</name><operator pos:start="109:62" pos:end="109:63">-&gt;</operator><name pos:start="109:64" pos:end="109:72">priv_data</name></name></expr></argument>, <argument pos:start="109:75" pos:end="109:78"><expr pos:start="109:75" pos:end="109:78"><operator pos:start="109:75" pos:end="109:75">&amp;</operator><name pos:start="109:76" pos:end="109:78">tmp</name></expr></argument>)</argument_list></call><operator pos:start="109:80" pos:end="109:80">)</operator> <operator pos:start="109:82" pos:end="109:82">&lt;</operator> <literal type="number" pos:start="109:84" pos:end="109:84">0</literal></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:30"><block_content pos:start="111:13" pos:end="111:30">

            <goto pos:start="111:13" pos:end="111:30">goto <name pos:start="111:18" pos:end="111:29">free_and_end</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:32">

        <expr_stmt pos:start="115:9" pos:end="115:32"><expr pos:start="115:9" pos:end="115:31"><name pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:13">avctx</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:24">priv_data</name></name> <operator pos:start="115:26" pos:end="115:26">=</operator> <name pos:start="115:28" pos:end="115:31">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="119:5" pos:end="121:26"><if pos:start="119:5" pos:end="121:26">if <condition pos:start="119:8" pos:end="119:49">(<expr pos:start="119:9" pos:end="119:48"><operator pos:start="119:9" pos:end="119:9">(</operator><name pos:start="119:10" pos:end="119:12">ret</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:43"><name pos:start="119:16" pos:end="119:30">av_opt_set_dict</name><argument_list pos:start="119:31" pos:end="119:43">(<argument pos:start="119:32" pos:end="119:36"><expr pos:start="119:32" pos:end="119:36"><name pos:start="119:32" pos:end="119:36">avctx</name></expr></argument>, <argument pos:start="119:39" pos:end="119:42"><expr pos:start="119:39" pos:end="119:42"><operator pos:start="119:39" pos:end="119:39">&amp;</operator><name pos:start="119:40" pos:end="119:42">tmp</name></expr></argument>)</argument_list></call><operator pos:start="119:44" pos:end="119:44">)</operator> <operator pos:start="119:46" pos:end="119:46">&lt;</operator> <literal type="number" pos:start="119:48" pos:end="119:48">0</literal></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:26"><block_content pos:start="121:9" pos:end="121:26">

        <goto pos:start="121:9" pos:end="121:26">goto <name pos:start="121:14" pos:end="121:25">free_and_end</name>;</goto></block_content></block></if></if_stmt>



    <comment type="line" pos:start="125:5" pos:end="125:114">//We only call avcodec_set_dimensions() for non h264 codecs so as not to overwrite previously setup dimensions</comment>

    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:126">(<expr pos:start="127:9" pos:end="127:125"><operator pos:start="127:9" pos:end="127:9">!</operator><operator pos:start="127:10" pos:end="127:10">(</operator> <name pos:start="127:12" pos:end="127:29"><name pos:start="127:12" pos:end="127:16">avctx</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:29">coded_width</name></name> <operator pos:start="127:31" pos:end="127:32">&amp;&amp;</operator> <name pos:start="127:34" pos:end="127:52"><name pos:start="127:34" pos:end="127:38">avctx</name><operator pos:start="127:39" pos:end="127:40">-&gt;</operator><name pos:start="127:41" pos:end="127:52">coded_height</name></name> <operator pos:start="127:54" pos:end="127:55">&amp;&amp;</operator> <name pos:start="127:57" pos:end="127:68"><name pos:start="127:57" pos:end="127:61">avctx</name><operator pos:start="127:62" pos:end="127:63">-&gt;</operator><name pos:start="127:64" pos:end="127:68">width</name></name> <operator pos:start="127:70" pos:end="127:71">&amp;&amp;</operator> <name pos:start="127:73" pos:end="127:85"><name pos:start="127:73" pos:end="127:77">avctx</name><operator pos:start="127:78" pos:end="127:79">-&gt;</operator><name pos:start="127:80" pos:end="127:85">height</name></name> <operator pos:start="127:87" pos:end="127:88">&amp;&amp;</operator> <name pos:start="127:90" pos:end="127:104"><name pos:start="127:90" pos:end="127:94">avctx</name><operator pos:start="127:95" pos:end="127:96">-&gt;</operator><name pos:start="127:97" pos:end="127:104">codec_id</name></name> <operator pos:start="127:106" pos:end="127:107">==</operator> <name pos:start="127:109" pos:end="127:124">AV_CODEC_ID_H264</name><operator pos:start="127:125" pos:end="127:125">)</operator></expr>)</condition><block pos:start="127:127" pos:end="139:5">{<block_content pos:start="131:5" pos:end="137:67">



    <if_stmt pos:start="131:5" pos:end="137:67"><if pos:start="131:5" pos:end="133:79">if <condition pos:start="131:8" pos:end="131:50">(<expr pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:13">avctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:26">coded_width</name></name> <operator pos:start="131:28" pos:end="131:29">&amp;&amp;</operator> <name pos:start="131:31" pos:end="131:49"><name pos:start="131:31" pos:end="131:35">avctx</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:49">coded_height</name></name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:79"><block_content pos:start="133:9" pos:end="133:79">

        <expr_stmt pos:start="133:9" pos:end="133:79"><expr pos:start="133:9" pos:end="133:78"><call pos:start="133:9" pos:end="133:78"><name pos:start="133:9" pos:end="133:30">avcodec_set_dimensions</name><argument_list pos:start="133:31" pos:end="133:78">(<argument pos:start="133:32" pos:end="133:36"><expr pos:start="133:32" pos:end="133:36"><name pos:start="133:32" pos:end="133:36">avctx</name></expr></argument>, <argument pos:start="133:39" pos:end="133:56"><expr pos:start="133:39" pos:end="133:56"><name pos:start="133:39" pos:end="133:56"><name pos:start="133:39" pos:end="133:43">avctx</name><operator pos:start="133:44" pos:end="133:45">-&gt;</operator><name pos:start="133:46" pos:end="133:56">coded_width</name></name></expr></argument>, <argument pos:start="133:59" pos:end="133:77"><expr pos:start="133:59" pos:end="133:77"><name pos:start="133:59" pos:end="133:77"><name pos:start="133:59" pos:end="133:63">avctx</name><operator pos:start="133:64" pos:end="133:65">-&gt;</operator><name pos:start="133:66" pos:end="133:77">coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="135:5" pos:end="137:67">else if <condition pos:start="135:13" pos:end="135:43">(<expr pos:start="135:14" pos:end="135:42"><name pos:start="135:14" pos:end="135:25"><name pos:start="135:14" pos:end="135:18">avctx</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:25">width</name></name> <operator pos:start="135:27" pos:end="135:28">&amp;&amp;</operator> <name pos:start="135:30" pos:end="135:42"><name pos:start="135:30" pos:end="135:34">avctx</name><operator pos:start="135:35" pos:end="135:36">-&gt;</operator><name pos:start="135:37" pos:end="135:42">height</name></name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:67"><block_content pos:start="137:9" pos:end="137:67">

        <expr_stmt pos:start="137:9" pos:end="137:67"><expr pos:start="137:9" pos:end="137:66"><call pos:start="137:9" pos:end="137:66"><name pos:start="137:9" pos:end="137:30">avcodec_set_dimensions</name><argument_list pos:start="137:31" pos:end="137:66">(<argument pos:start="137:32" pos:end="137:36"><expr pos:start="137:32" pos:end="137:36"><name pos:start="137:32" pos:end="137:36">avctx</name></expr></argument>, <argument pos:start="137:39" pos:end="137:50"><expr pos:start="137:39" pos:end="137:50"><name pos:start="137:39" pos:end="137:50"><name pos:start="137:39" pos:end="137:43">avctx</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:50">width</name></name></expr></argument>, <argument pos:start="137:53" pos:end="137:65"><expr pos:start="137:53" pos:end="137:65"><name pos:start="137:53" pos:end="137:65"><name pos:start="137:53" pos:end="137:57">avctx</name><operator pos:start="137:58" pos:end="137:59">-&gt;</operator><name pos:start="137:60" pos:end="137:65">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="153:5"><if pos:start="143:5" pos:end="153:5">if <condition pos:start="143:8" pos:end="147:90">(<expr pos:start="143:9" pos:end="147:89"><operator pos:start="143:9" pos:end="143:9">(</operator><name pos:start="143:10" pos:end="143:27"><name pos:start="143:10" pos:end="143:14">avctx</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:27">coded_width</name></name> <operator pos:start="143:29" pos:end="143:30">||</operator> <name pos:start="143:32" pos:end="143:50"><name pos:start="143:32" pos:end="143:36">avctx</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:50">coded_height</name></name> <operator pos:start="143:52" pos:end="143:53">||</operator> <name pos:start="143:55" pos:end="143:66"><name pos:start="143:55" pos:end="143:59">avctx</name><operator pos:start="143:60" pos:end="143:61">-&gt;</operator><name pos:start="143:62" pos:end="143:66">width</name></name> <operator pos:start="143:68" pos:end="143:69">||</operator> <name pos:start="143:71" pos:end="143:83"><name pos:start="143:71" pos:end="143:75">avctx</name><operator pos:start="143:76" pos:end="143:77">-&gt;</operator><name pos:start="143:78" pos:end="143:83">height</name></name><operator pos:start="143:84" pos:end="143:84">)</operator>

        <operator pos:start="145:9" pos:end="145:10">&amp;&amp;</operator> <operator pos:start="145:12" pos:end="145:12">(</operator>  <call pos:start="145:15" pos:end="145:84"><name pos:start="145:15" pos:end="145:33">av_image_check_size</name><argument_list pos:start="145:34" pos:end="145:84">(<argument pos:start="145:35" pos:end="145:52"><expr pos:start="145:35" pos:end="145:52"><name pos:start="145:35" pos:end="145:52"><name pos:start="145:35" pos:end="145:39">avctx</name><operator pos:start="145:40" pos:end="145:41">-&gt;</operator><name pos:start="145:42" pos:end="145:52">coded_width</name></name></expr></argument>, <argument pos:start="145:55" pos:end="145:73"><expr pos:start="145:55" pos:end="145:73"><name pos:start="145:55" pos:end="145:73"><name pos:start="145:55" pos:end="145:59">avctx</name><operator pos:start="145:60" pos:end="145:61">-&gt;</operator><name pos:start="145:62" pos:end="145:73">coded_height</name></name></expr></argument>, <argument pos:start="145:76" pos:end="145:76"><expr pos:start="145:76" pos:end="145:76"><literal type="number" pos:start="145:76" pos:end="145:76">0</literal></expr></argument>, <argument pos:start="145:79" pos:end="145:83"><expr pos:start="145:79" pos:end="145:83"><name pos:start="145:79" pos:end="145:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="145:86" pos:end="145:86">&lt;</operator> <literal type="number" pos:start="145:88" pos:end="145:88">0</literal>

           <operator pos:start="147:12" pos:end="147:13">||</operator> <call pos:start="147:15" pos:end="147:84"><name pos:start="147:15" pos:end="147:33">av_image_check_size</name><argument_list pos:start="147:34" pos:end="147:84">(<argument pos:start="147:35" pos:end="147:46"><expr pos:start="147:35" pos:end="147:46"><name pos:start="147:35" pos:end="147:46"><name pos:start="147:35" pos:end="147:39">avctx</name><operator pos:start="147:40" pos:end="147:41">-&gt;</operator><name pos:start="147:42" pos:end="147:46">width</name></name></expr></argument>,       <argument pos:start="147:55" pos:end="147:67"><expr pos:start="147:55" pos:end="147:67"><name pos:start="147:55" pos:end="147:67"><name pos:start="147:55" pos:end="147:59">avctx</name><operator pos:start="147:60" pos:end="147:61">-&gt;</operator><name pos:start="147:62" pos:end="147:67">height</name></name></expr></argument>,       <argument pos:start="147:76" pos:end="147:76"><expr pos:start="147:76" pos:end="147:76"><literal type="number" pos:start="147:76" pos:end="147:76">0</literal></expr></argument>, <argument pos:start="147:79" pos:end="147:83"><expr pos:start="147:79" pos:end="147:83"><name pos:start="147:79" pos:end="147:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="147:86" pos:end="147:86">&lt;</operator> <literal type="number" pos:start="147:88" pos:end="147:88">0</literal><operator pos:start="147:89" pos:end="147:89">)</operator></expr>)</condition> <block pos:start="147:92" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:44">

        <expr_stmt pos:start="149:9" pos:end="149:80"><expr pos:start="149:9" pos:end="149:79"><call pos:start="149:9" pos:end="149:79"><name pos:start="149:9" pos:end="149:14">av_log</name><argument_list pos:start="149:15" pos:end="149:79">(<argument pos:start="149:16" pos:end="149:20"><expr pos:start="149:16" pos:end="149:20"><name pos:start="149:16" pos:end="149:20">avctx</name></expr></argument>, <argument pos:start="149:23" pos:end="149:36"><expr pos:start="149:23" pos:end="149:36"><name pos:start="149:23" pos:end="149:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="149:39" pos:end="149:78"><expr pos:start="149:39" pos:end="149:78"><literal type="string" pos:start="149:39" pos:end="149:78">"Ignoring invalid width/height values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:44"><expr pos:start="151:9" pos:end="151:43"><call pos:start="151:9" pos:end="151:43"><name pos:start="151:9" pos:end="151:30">avcodec_set_dimensions</name><argument_list pos:start="151:31" pos:end="151:43">(<argument pos:start="151:32" pos:end="151:36"><expr pos:start="151:32" pos:end="151:36"><name pos:start="151:32" pos:end="151:36">avctx</name></expr></argument>, <argument pos:start="151:39" pos:end="151:39"><expr pos:start="151:39" pos:end="151:39"><literal type="number" pos:start="151:39" pos:end="151:39">0</literal></expr></argument>, <argument pos:start="151:42" pos:end="151:42"><expr pos:start="151:42" pos:end="151:42"><literal type="number" pos:start="151:42" pos:end="151:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="159:74">/* if the decoder init function was already called previously,

     * free the already allocated subtitle_header before overwriting it */</comment>

    <if_stmt pos:start="161:5" pos:end="163:42"><if pos:start="161:5" pos:end="163:42">if <condition pos:start="161:8" pos:end="161:35">(<expr pos:start="161:9" pos:end="161:34"><call pos:start="161:9" pos:end="161:34"><name pos:start="161:9" pos:end="161:27">av_codec_is_decoder</name><argument_list pos:start="161:28" pos:end="161:34">(<argument pos:start="161:29" pos:end="161:33"><expr pos:start="161:29" pos:end="161:33"><name pos:start="161:29" pos:end="161:33">codec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:42"><block_content pos:start="163:9" pos:end="163:42">

        <expr_stmt pos:start="163:9" pos:end="163:42"><expr pos:start="163:9" pos:end="163:41"><call pos:start="163:9" pos:end="163:41"><name pos:start="163:9" pos:end="163:16">av_freep</name><argument_list pos:start="163:17" pos:end="163:41">(<argument pos:start="163:18" pos:end="163:40"><expr pos:start="163:18" pos:end="163:40"><operator pos:start="163:18" pos:end="163:18">&amp;</operator><name pos:start="163:19" pos:end="163:40"><name pos:start="163:19" pos:end="163:23">avctx</name><operator pos:start="163:24" pos:end="163:25">-&gt;</operator><name pos:start="163:26" pos:end="163:40">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:46">(<expr pos:start="167:9" pos:end="167:45"><name pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:13">avctx</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:23">channels</name></name> <operator pos:start="167:25" pos:end="167:25">&gt;</operator> <name pos:start="167:27" pos:end="167:45">FF_SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="167:48" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:26">

        <expr_stmt pos:start="169:9" pos:end="169:30"><expr pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:29"><name pos:start="169:15" pos:end="169:21">AVERROR</name><argument_list pos:start="169:22" pos:end="169:29">(<argument pos:start="169:23" pos:end="169:28"><expr pos:start="169:23" pos:end="169:28"><name pos:start="169:23" pos:end="169:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="171:9" pos:end="171:26">goto <name pos:start="171:14" pos:end="171:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:25"><expr pos:start="177:5" pos:end="177:24"><name pos:start="177:5" pos:end="177:16"><name pos:start="177:5" pos:end="177:9">avctx</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:16">codec</name></name> <operator pos:start="177:18" pos:end="177:18">=</operator> <name pos:start="177:20" pos:end="177:24">codec</name></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="187:5"><if pos:start="179:5" pos:end="187:5">if <condition pos:start="179:8" pos:end="181:44">(<expr pos:start="179:9" pos:end="181:43"><operator pos:start="179:9" pos:end="179:9">(</operator><name pos:start="179:10" pos:end="179:26"><name pos:start="179:10" pos:end="179:14">avctx</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:26">codec_type</name></name> <operator pos:start="179:28" pos:end="179:29">==</operator> <name pos:start="179:31" pos:end="179:50">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="179:52" pos:end="179:53">||</operator> <name pos:start="179:55" pos:end="179:71"><name pos:start="179:55" pos:end="179:59">avctx</name><operator pos:start="179:60" pos:end="179:61">-&gt;</operator><name pos:start="179:62" pos:end="179:71">codec_type</name></name> <operator pos:start="179:73" pos:end="179:74">==</operator> <name pos:start="179:76" pos:end="179:86"><name pos:start="179:76" pos:end="179:80">codec</name><operator pos:start="179:81" pos:end="179:82">-&gt;</operator><name pos:start="179:83" pos:end="179:86">type</name></name><operator pos:start="179:87" pos:end="179:87">)</operator> <operator pos:start="179:89" pos:end="179:90">&amp;&amp;</operator>

        <name pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:13">avctx</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:23">codec_id</name></name> <operator pos:start="181:25" pos:end="181:26">==</operator> <name pos:start="181:28" pos:end="181:43">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="181:46" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:38">

        <expr_stmt pos:start="183:9" pos:end="183:40"><expr pos:start="183:9" pos:end="183:39"><name pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:13">avctx</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:25">codec_type</name></name> <operator pos:start="183:27" pos:end="183:27">=</operator> <name pos:start="183:29" pos:end="183:39"><name pos:start="183:29" pos:end="183:33">codec</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:39">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:38"><expr pos:start="185:9" pos:end="185:37"><name pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:13">avctx</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:23">codec_id</name></name>   <operator pos:start="185:27" pos:end="185:27">=</operator> <name pos:start="185:29" pos:end="185:37"><name pos:start="185:29" pos:end="185:33">codec</name><operator pos:start="185:34" pos:end="185:35">-&gt;</operator><name pos:start="185:36" pos:end="185:37">id</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="189:5" pos:end="199:5"><if pos:start="189:5" pos:end="199:5">if <condition pos:start="189:8" pos:end="191:90">(<expr pos:start="189:9" pos:end="191:89"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:13">avctx</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:23">codec_id</name></name> <operator pos:start="189:25" pos:end="189:26">!=</operator> <name pos:start="189:28" pos:end="189:36"><name pos:start="189:28" pos:end="189:32">codec</name><operator pos:start="189:33" pos:end="189:34">-&gt;</operator><name pos:start="189:35" pos:end="189:36">id</name></name> <operator pos:start="189:38" pos:end="189:39">||</operator> <operator pos:start="189:41" pos:end="189:41">(</operator><name pos:start="189:42" pos:end="189:58"><name pos:start="189:42" pos:end="189:46">avctx</name><operator pos:start="189:47" pos:end="189:48">-&gt;</operator><name pos:start="189:49" pos:end="189:58">codec_type</name></name> <operator pos:start="189:60" pos:end="189:61">!=</operator> <name pos:start="189:63" pos:end="189:73"><name pos:start="189:63" pos:end="189:67">codec</name><operator pos:start="189:68" pos:end="189:69">-&gt;</operator><name pos:start="189:70" pos:end="189:73">type</name></name>

                                         <operator pos:start="191:42" pos:end="191:43">&amp;&amp;</operator> <name pos:start="191:45" pos:end="191:61"><name pos:start="191:45" pos:end="191:49">avctx</name><operator pos:start="191:50" pos:end="191:51">-&gt;</operator><name pos:start="191:52" pos:end="191:61">codec_type</name></name> <operator pos:start="191:63" pos:end="191:64">!=</operator> <name pos:start="191:66" pos:end="191:88">AVMEDIA_TYPE_ATTACHMENT</name><operator pos:start="191:89" pos:end="191:89">)</operator></expr>)</condition> <block pos:start="191:92" pos:end="199:5">{<block_content pos:start="193:9" pos:end="197:26">

        <expr_stmt pos:start="193:9" pos:end="193:69"><expr pos:start="193:9" pos:end="193:68"><call pos:start="193:9" pos:end="193:68"><name pos:start="193:9" pos:end="193:14">av_log</name><argument_list pos:start="193:15" pos:end="193:68">(<argument pos:start="193:16" pos:end="193:20"><expr pos:start="193:16" pos:end="193:20"><name pos:start="193:16" pos:end="193:20">avctx</name></expr></argument>, <argument pos:start="193:23" pos:end="193:34"><expr pos:start="193:23" pos:end="193:34"><name pos:start="193:23" pos:end="193:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:37" pos:end="193:67"><expr pos:start="193:37" pos:end="193:67"><literal type="string" pos:start="193:37" pos:end="193:67">"Codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:30"><expr pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:29"><name pos:start="195:15" pos:end="195:21">AVERROR</name><argument_list pos:start="195:22" pos:end="195:29">(<argument pos:start="195:23" pos:end="195:28"><expr pos:start="195:23" pos:end="195:28"><name pos:start="195:23" pos:end="195:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:26">goto <name pos:start="197:14" pos:end="197:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:28"><expr pos:start="201:5" pos:end="201:27"><name pos:start="201:5" pos:end="201:23"><name pos:start="201:5" pos:end="201:9">avctx</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:23">frame_number</name></name> <operator pos:start="201:25" pos:end="201:25">=</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:70"><expr pos:start="203:5" pos:end="203:69"><name pos:start="203:5" pos:end="203:27"><name pos:start="203:5" pos:end="203:9">avctx</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:27">codec_descriptor</name></name> <operator pos:start="203:29" pos:end="203:29">=</operator> <call pos:start="203:31" pos:end="203:69"><name pos:start="203:31" pos:end="203:52">avcodec_descriptor_get</name><argument_list pos:start="203:53" pos:end="203:69">(<argument pos:start="203:54" pos:end="203:68"><expr pos:start="203:54" pos:end="203:68"><name pos:start="203:54" pos:end="203:68"><name pos:start="203:54" pos:end="203:58">avctx</name><operator pos:start="203:59" pos:end="203:60">-&gt;</operator><name pos:start="203:61" pos:end="203:68">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="207:5" pos:end="235:5"><if pos:start="207:5" pos:end="235:5">if <condition pos:start="207:8" pos:end="209:66">(<expr pos:start="207:9" pos:end="209:65"><name pos:start="207:9" pos:end="207:34"><name pos:start="207:9" pos:end="207:13">avctx</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:20">codec</name><operator pos:start="207:21" pos:end="207:22">-&gt;</operator><name pos:start="207:23" pos:end="207:34">capabilities</name></name> <operator pos:start="207:36" pos:end="207:36">&amp;</operator> <name pos:start="207:38" pos:end="207:59">CODEC_CAP_EXPERIMENTAL</name> <operator pos:start="207:61" pos:end="207:62">&amp;&amp;</operator>

        <name pos:start="209:9" pos:end="209:36"><name pos:start="209:9" pos:end="209:13">avctx</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:36">strict_std_compliance</name></name> <operator pos:start="209:38" pos:end="209:38">&gt;</operator> <name pos:start="209:40" pos:end="209:65">FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block pos:start="209:68" pos:end="235:5">{<block_content pos:start="211:9" pos:end="233:26">

        <decl_stmt pos:start="211:9" pos:end="211:86"><decl pos:start="211:9" pos:end="211:85"><type pos:start="211:9" pos:end="211:20"><specifier pos:start="211:9" pos:end="211:13">const</specifier> <name pos:start="211:15" pos:end="211:18">char</name> <modifier pos:start="211:20" pos:end="211:20">*</modifier></type><name pos:start="211:21" pos:end="211:32">codec_string</name> <init pos:start="211:34" pos:end="211:85">= <expr pos:start="211:36" pos:end="211:85"><ternary pos:start="211:36" pos:end="211:85"><condition pos:start="211:36" pos:end="211:63"><expr pos:start="211:36" pos:end="211:61"><call pos:start="211:36" pos:end="211:61"><name pos:start="211:36" pos:end="211:54">av_codec_is_encoder</name><argument_list pos:start="211:55" pos:end="211:61">(<argument pos:start="211:56" pos:end="211:60"><expr pos:start="211:56" pos:end="211:60"><name pos:start="211:56" pos:end="211:60">codec</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="211:65" pos:end="211:73"> <expr pos:start="211:65" pos:end="211:73"><literal type="string" pos:start="211:65" pos:end="211:73">"encoder"</literal></expr> </then><else pos:start="211:75" pos:end="211:85">: <expr pos:start="211:77" pos:end="211:85"><literal type="string" pos:start="211:77" pos:end="211:85">"decoder"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:24"><decl pos:start="213:9" pos:end="213:23"><type pos:start="213:9" pos:end="213:17"><name pos:start="213:9" pos:end="213:15">AVCodec</name> <modifier pos:start="213:17" pos:end="213:17">*</modifier></type><name pos:start="213:18" pos:end="213:23">codec2</name></decl>;</decl_stmt>

        <expr_stmt pos:start="215:9" pos:end="221:70"><expr pos:start="215:9" pos:end="221:69"><call pos:start="215:9" pos:end="221:69"><name pos:start="215:9" pos:end="215:14">av_log</name><argument_list pos:start="215:15" pos:end="221:69">(<argument pos:start="215:16" pos:end="215:19"><expr pos:start="215:16" pos:end="215:19"><name pos:start="215:16" pos:end="215:19">NULL</name></expr></argument>, <argument pos:start="215:22" pos:end="215:33"><expr pos:start="215:22" pos:end="215:33"><name pos:start="215:22" pos:end="215:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="217:16" pos:end="219:58"><expr pos:start="217:16" pos:end="219:58"><literal type="string" pos:start="217:16" pos:end="217:86">"The %s '%s' is experimental but experimental codecs are not enabled, "</literal>

               <literal type="string" pos:start="219:16" pos:end="219:58">"add '-strict %d' if you want to use it.\n"</literal></expr></argument>,

               <argument pos:start="221:16" pos:end="221:27"><expr pos:start="221:16" pos:end="221:27"><name pos:start="221:16" pos:end="221:27">codec_string</name></expr></argument>, <argument pos:start="221:30" pos:end="221:40"><expr pos:start="221:30" pos:end="221:40"><name pos:start="221:30" pos:end="221:40"><name pos:start="221:30" pos:end="221:34">codec</name><operator pos:start="221:35" pos:end="221:36">-&gt;</operator><name pos:start="221:37" pos:end="221:40">name</name></name></expr></argument>, <argument pos:start="221:43" pos:end="221:68"><expr pos:start="221:43" pos:end="221:68"><name pos:start="221:43" pos:end="221:68">FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:112"><expr pos:start="223:9" pos:end="223:111"><name pos:start="223:9" pos:end="223:14">codec2</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <ternary pos:start="223:18" pos:end="223:111"><condition pos:start="223:18" pos:end="223:45"><expr pos:start="223:18" pos:end="223:43"><call pos:start="223:18" pos:end="223:43"><name pos:start="223:18" pos:end="223:36">av_codec_is_encoder</name><argument_list pos:start="223:37" pos:end="223:43">(<argument pos:start="223:38" pos:end="223:42"><expr pos:start="223:38" pos:end="223:42"><name pos:start="223:38" pos:end="223:42">codec</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="223:47" pos:end="223:77"> <expr pos:start="223:47" pos:end="223:77"><call pos:start="223:47" pos:end="223:77"><name pos:start="223:47" pos:end="223:66">avcodec_find_encoder</name><argument_list pos:start="223:67" pos:end="223:77">(<argument pos:start="223:68" pos:end="223:76"><expr pos:start="223:68" pos:end="223:76"><name pos:start="223:68" pos:end="223:76"><name pos:start="223:68" pos:end="223:72">codec</name><operator pos:start="223:73" pos:end="223:74">-&gt;</operator><name pos:start="223:75" pos:end="223:76">id</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="223:79" pos:end="223:111">: <expr pos:start="223:81" pos:end="223:111"><call pos:start="223:81" pos:end="223:111"><name pos:start="223:81" pos:end="223:100">avcodec_find_decoder</name><argument_list pos:start="223:101" pos:end="223:111">(<argument pos:start="223:102" pos:end="223:110"><expr pos:start="223:102" pos:end="223:110"><name pos:start="223:102" pos:end="223:110"><name pos:start="223:102" pos:end="223:106">codec</name><operator pos:start="223:107" pos:end="223:108">-&gt;</operator><name pos:start="223:109" pos:end="223:110">id</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="229:44"><if pos:start="225:9" pos:end="229:44">if <condition pos:start="225:12" pos:end="225:61">(<expr pos:start="225:13" pos:end="225:60"><operator pos:start="225:13" pos:end="225:13">!</operator><operator pos:start="225:14" pos:end="225:14">(</operator><name pos:start="225:15" pos:end="225:34"><name pos:start="225:15" pos:end="225:20">codec2</name><operator pos:start="225:21" pos:end="225:22">-&gt;</operator><name pos:start="225:23" pos:end="225:34">capabilities</name></name> <operator pos:start="225:36" pos:end="225:36">&amp;</operator> <name pos:start="225:38" pos:end="225:59">CODEC_CAP_EXPERIMENTAL</name><operator pos:start="225:60" pos:end="225:60">)</operator></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="229:44"><block_content pos:start="227:13" pos:end="229:44">

            <expr_stmt pos:start="227:13" pos:end="229:44"><expr pos:start="227:13" pos:end="229:43"><call pos:start="227:13" pos:end="229:43"><name pos:start="227:13" pos:end="227:18">av_log</name><argument_list pos:start="227:19" pos:end="229:43">(<argument pos:start="227:20" pos:end="227:23"><expr pos:start="227:20" pos:end="227:23"><name pos:start="227:20" pos:end="227:23">NULL</name></expr></argument>, <argument pos:start="227:26" pos:end="227:37"><expr pos:start="227:26" pos:end="227:37"><name pos:start="227:26" pos:end="227:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:40" pos:end="227:90"><expr pos:start="227:40" pos:end="227:90"><literal type="string" pos:start="227:40" pos:end="227:90">"Alternatively use the non experimental %s '%s'.\n"</literal></expr></argument>,

                <argument pos:start="229:17" pos:end="229:28"><expr pos:start="229:17" pos:end="229:28"><name pos:start="229:17" pos:end="229:28">codec_string</name></expr></argument>, <argument pos:start="229:31" pos:end="229:42"><expr pos:start="229:31" pos:end="229:42"><name pos:start="229:31" pos:end="229:42"><name pos:start="229:31" pos:end="229:36">codec2</name><operator pos:start="229:37" pos:end="229:38">-&gt;</operator><name pos:start="229:39" pos:end="229:42">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:35"><expr pos:start="231:9" pos:end="231:34"><name pos:start="231:9" pos:end="231:11">ret</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <name pos:start="231:15" pos:end="231:34">AVERROR_EXPERIMENTAL</name></expr>;</expr_stmt>

        <goto pos:start="233:9" pos:end="233:26">goto <name pos:start="233:14" pos:end="233:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="247:5"><if pos:start="239:5" pos:end="247:5">if <condition pos:start="239:8" pos:end="241:57">(<expr pos:start="239:9" pos:end="241:56"><name pos:start="239:9" pos:end="239:25"><name pos:start="239:9" pos:end="239:13">avctx</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:25">codec_type</name></name> <operator pos:start="239:27" pos:end="239:28">==</operator> <name pos:start="239:30" pos:end="239:47">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="239:49" pos:end="239:50">&amp;&amp;</operator>

        <operator pos:start="241:9" pos:end="241:9">(</operator><operator pos:start="241:10" pos:end="241:10">!</operator><name pos:start="241:11" pos:end="241:30"><name pos:start="241:11" pos:end="241:15">avctx</name><operator pos:start="241:16" pos:end="241:17">-&gt;</operator><name pos:start="241:18" pos:end="241:26">time_base</name><operator pos:start="241:27" pos:end="241:27">.</operator><name pos:start="241:28" pos:end="241:30">num</name></name> <operator pos:start="241:32" pos:end="241:33">||</operator> <operator pos:start="241:35" pos:end="241:35">!</operator><name pos:start="241:36" pos:end="241:55"><name pos:start="241:36" pos:end="241:40">avctx</name><operator pos:start="241:41" pos:end="241:42">-&gt;</operator><name pos:start="241:43" pos:end="241:51">time_base</name><operator pos:start="241:52" pos:end="241:52">.</operator><name pos:start="241:53" pos:end="241:55">den</name></name><operator pos:start="241:56" pos:end="241:56">)</operator></expr>)</condition> <block pos:start="241:59" pos:end="247:5">{<block_content pos:start="243:9" pos:end="245:50">

        <expr_stmt pos:start="243:9" pos:end="243:33"><expr pos:start="243:9" pos:end="243:32"><name pos:start="243:9" pos:end="243:28"><name pos:start="243:9" pos:end="243:13">avctx</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:24">time_base</name><operator pos:start="243:25" pos:end="243:25">.</operator><name pos:start="243:26" pos:end="243:28">num</name></name> <operator pos:start="243:30" pos:end="243:30">=</operator> <literal type="number" pos:start="243:32" pos:end="243:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:50"><expr pos:start="245:9" pos:end="245:49"><name pos:start="245:9" pos:end="245:28"><name pos:start="245:9" pos:end="245:13">avctx</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:24">time_base</name><operator pos:start="245:25" pos:end="245:25">.</operator><name pos:start="245:26" pos:end="245:28">den</name></name> <operator pos:start="245:30" pos:end="245:30">=</operator> <name pos:start="245:32" pos:end="245:49"><name pos:start="245:32" pos:end="245:36">avctx</name><operator pos:start="245:37" pos:end="245:38">-&gt;</operator><name pos:start="245:39" pos:end="245:49">sample_rate</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="251:5" pos:end="253:109"><if pos:start="251:5" pos:end="253:109">if <condition pos:start="251:8" pos:end="251:22">(<expr pos:start="251:9" pos:end="251:21"><operator pos:start="251:9" pos:end="251:9">!</operator><name pos:start="251:10" pos:end="251:21">HAVE_THREADS</name></expr>)</condition><block type="pseudo" pos:start="253:9" pos:end="253:109"><block_content pos:start="253:9" pos:end="253:109">

        <expr_stmt pos:start="253:9" pos:end="253:109"><expr pos:start="253:9" pos:end="253:108"><call pos:start="253:9" pos:end="253:108"><name pos:start="253:9" pos:end="253:14">av_log</name><argument_list pos:start="253:15" pos:end="253:108">(<argument pos:start="253:16" pos:end="253:20"><expr pos:start="253:16" pos:end="253:20"><name pos:start="253:16" pos:end="253:20">avctx</name></expr></argument>, <argument pos:start="253:23" pos:end="253:36"><expr pos:start="253:23" pos:end="253:36"><name pos:start="253:23" pos:end="253:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="253:39" pos:end="253:107"><expr pos:start="253:39" pos:end="253:107"><literal type="string" pos:start="253:39" pos:end="253:107">"Warning: not compiled with thread support, using thread emulation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="257:5" pos:end="269:5"><if pos:start="257:5" pos:end="269:5">if <condition pos:start="257:8" pos:end="257:21">(<expr pos:start="257:9" pos:end="257:20"><name pos:start="257:9" pos:end="257:20">HAVE_THREADS</name></expr>)</condition> <block pos:start="257:23" pos:end="269:5">{<block_content pos:start="259:9" pos:end="267:30">

        <expr_stmt pos:start="259:9" pos:end="259:28"><expr pos:start="259:9" pos:end="259:27"><call pos:start="259:9" pos:end="259:27"><name pos:start="259:9" pos:end="259:25">ff_unlock_avcodec</name><argument_list pos:start="259:26" pos:end="259:27">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="259:30" pos:end="259:127">//we will instanciate a few encoders thus kick the counter to prevent false detection of a problem</comment>

        <expr_stmt pos:start="261:9" pos:end="261:77"><expr pos:start="261:9" pos:end="261:76"><name pos:start="261:9" pos:end="261:11">ret</name> <operator pos:start="261:13" pos:end="261:13">=</operator> <call pos:start="261:15" pos:end="261:76"><name pos:start="261:15" pos:end="261:42">ff_frame_thread_encoder_init</name><argument_list pos:start="261:43" pos:end="261:76">(<argument pos:start="261:44" pos:end="261:48"><expr pos:start="261:44" pos:end="261:48"><name pos:start="261:44" pos:end="261:48">avctx</name></expr></argument>, <argument pos:start="261:51" pos:end="261:75"><expr pos:start="261:51" pos:end="261:75"><ternary pos:start="261:51" pos:end="261:75"><condition pos:start="261:51" pos:end="261:59"><expr pos:start="261:51" pos:end="261:57"><name pos:start="261:51" pos:end="261:57">options</name></expr> ?</condition><then pos:start="261:61" pos:end="261:68"> <expr pos:start="261:61" pos:end="261:68"><operator pos:start="261:61" pos:end="261:61">*</operator><name pos:start="261:62" pos:end="261:68">options</name></expr> </then><else pos:start="261:70" pos:end="261:75">: <expr pos:start="261:72" pos:end="261:75"><name pos:start="261:72" pos:end="261:75">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:31"><expr pos:start="263:9" pos:end="263:30"><call pos:start="263:9" pos:end="263:30"><name pos:start="263:9" pos:end="263:23">ff_lock_avcodec</name><argument_list pos:start="263:24" pos:end="263:30">(<argument pos:start="263:25" pos:end="263:29"><expr pos:start="263:25" pos:end="263:29"><name pos:start="263:25" pos:end="263:29">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="267:30"><if pos:start="265:9" pos:end="267:30">if <condition pos:start="265:12" pos:end="265:20">(<expr pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:15">ret</name> <operator pos:start="265:17" pos:end="265:17">&lt;</operator> <literal type="number" pos:start="265:19" pos:end="265:19">0</literal></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:30"><block_content pos:start="267:13" pos:end="267:30">

            <goto pos:start="267:13" pos:end="267:30">goto <name pos:start="267:18" pos:end="267:29">free_and_end</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="273:5" pos:end="285:5"><if pos:start="273:5" pos:end="285:5">if <condition pos:start="273:8" pos:end="275:99">(<expr pos:start="273:9" pos:end="275:98"><name pos:start="273:9" pos:end="273:20">HAVE_THREADS</name> <operator pos:start="273:22" pos:end="273:23">&amp;&amp;</operator> <operator pos:start="273:25" pos:end="273:25">!</operator><name pos:start="273:26" pos:end="273:45"><name pos:start="273:26" pos:end="273:30">avctx</name><operator pos:start="273:31" pos:end="273:32">-&gt;</operator><name pos:start="273:33" pos:end="273:45">thread_opaque</name></name>

        <operator pos:start="275:9" pos:end="275:10">&amp;&amp;</operator> <operator pos:start="275:12" pos:end="275:12">!</operator><operator pos:start="275:13" pos:end="275:13">(</operator><name pos:start="275:14" pos:end="275:50"><name pos:start="275:14" pos:end="275:18">avctx</name><operator pos:start="275:19" pos:end="275:20">-&gt;</operator><name pos:start="275:21" pos:end="275:28">internal</name><operator pos:start="275:29" pos:end="275:30">-&gt;</operator><name pos:start="275:31" pos:end="275:50">frame_thread_encoder</name></name> <operator pos:start="275:52" pos:end="275:53">&amp;&amp;</operator> <operator pos:start="275:55" pos:end="275:55">(</operator><name pos:start="275:56" pos:end="275:80"><name pos:start="275:56" pos:end="275:60">avctx</name><operator pos:start="275:61" pos:end="275:62">-&gt;</operator><name pos:start="275:63" pos:end="275:80">active_thread_type</name></name><operator pos:start="275:81" pos:end="275:81">&amp;</operator><name pos:start="275:82" pos:end="275:96">FF_THREAD_FRAME</name><operator pos:start="275:97" pos:end="275:97">)</operator><operator pos:start="275:98" pos:end="275:98">)</operator></expr>)</condition> <block pos:start="275:101" pos:end="285:5">{<block_content pos:start="277:9" pos:end="283:9">

        <expr_stmt pos:start="277:9" pos:end="277:36"><expr pos:start="277:9" pos:end="277:35"><name pos:start="277:9" pos:end="277:11">ret</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <call pos:start="277:15" pos:end="277:35"><name pos:start="277:15" pos:end="277:28">ff_thread_init</name><argument_list pos:start="277:29" pos:end="277:35">(<argument pos:start="277:30" pos:end="277:34"><expr pos:start="277:30" pos:end="277:34"><name pos:start="277:30" pos:end="277:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="279:9" pos:end="283:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:20">(<expr pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:15">ret</name> <operator pos:start="279:17" pos:end="279:17">&lt;</operator> <literal type="number" pos:start="279:19" pos:end="279:19">0</literal></expr>)</condition> <block pos:start="279:22" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:30">

            <goto pos:start="281:13" pos:end="281:30">goto <name pos:start="281:18" pos:end="281:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="287:5" pos:end="289:32"><if pos:start="287:5" pos:end="289:32">if <condition pos:start="287:8" pos:end="287:73">(<expr pos:start="287:9" pos:end="287:72"><operator pos:start="287:9" pos:end="287:9">!</operator><name pos:start="287:10" pos:end="287:21">HAVE_THREADS</name> <operator pos:start="287:23" pos:end="287:24">&amp;&amp;</operator> <operator pos:start="287:26" pos:end="287:26">!</operator><operator pos:start="287:27" pos:end="287:27">(</operator><name pos:start="287:28" pos:end="287:46"><name pos:start="287:28" pos:end="287:32">codec</name><operator pos:start="287:33" pos:end="287:34">-&gt;</operator><name pos:start="287:35" pos:end="287:46">capabilities</name></name> <operator pos:start="287:48" pos:end="287:48">&amp;</operator> <name pos:start="287:50" pos:end="287:71">CODEC_CAP_AUTO_THREADS</name><operator pos:start="287:72" pos:end="287:72">)</operator></expr>)</condition><block type="pseudo" pos:start="289:9" pos:end="289:32"><block_content pos:start="289:9" pos:end="289:32">

        <expr_stmt pos:start="289:9" pos:end="289:32"><expr pos:start="289:9" pos:end="289:31"><name pos:start="289:9" pos:end="289:27"><name pos:start="289:9" pos:end="289:13">avctx</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:27">thread_count</name></name> <operator pos:start="289:29" pos:end="289:29">=</operator> <literal type="number" pos:start="289:31" pos:end="289:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="293:5" pos:end="303:5"><if pos:start="293:5" pos:end="303:5">if <condition pos:start="293:8" pos:end="293:70">(<expr pos:start="293:9" pos:end="293:69"><name pos:start="293:9" pos:end="293:32"><name pos:start="293:9" pos:end="293:13">avctx</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:20">codec</name><operator pos:start="293:21" pos:end="293:22">-&gt;</operator><name pos:start="293:23" pos:end="293:32">max_lowres</name></name> <operator pos:start="293:34" pos:end="293:34">&lt;</operator> <name pos:start="293:36" pos:end="293:48"><name pos:start="293:36" pos:end="293:40">avctx</name><operator pos:start="293:41" pos:end="293:42">-&gt;</operator><name pos:start="293:43" pos:end="293:48">lowres</name></name> <operator pos:start="293:50" pos:end="293:51">||</operator> <name pos:start="293:53" pos:end="293:65"><name pos:start="293:53" pos:end="293:57">avctx</name><operator pos:start="293:58" pos:end="293:59">-&gt;</operator><name pos:start="293:60" pos:end="293:65">lowres</name></name> <operator pos:start="293:67" pos:end="293:67">&lt;</operator> <literal type="number" pos:start="293:69" pos:end="293:69">0</literal></expr>)</condition> <block pos:start="293:72" pos:end="303:5">{<block_content pos:start="295:9" pos:end="301:26">

        <expr_stmt pos:start="295:9" pos:end="297:41"><expr pos:start="295:9" pos:end="297:40"><call pos:start="295:9" pos:end="297:40"><name pos:start="295:9" pos:end="295:14">av_log</name><argument_list pos:start="295:15" pos:end="297:40">(<argument pos:start="295:16" pos:end="295:20"><expr pos:start="295:16" pos:end="295:20"><name pos:start="295:16" pos:end="295:20">avctx</name></expr></argument>, <argument pos:start="295:23" pos:end="295:34"><expr pos:start="295:23" pos:end="295:34"><name pos:start="295:23" pos:end="295:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="295:37" pos:end="295:99"><expr pos:start="295:37" pos:end="295:99"><literal type="string" pos:start="295:37" pos:end="295:99">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,

               <argument pos:start="297:16" pos:end="297:39"><expr pos:start="297:16" pos:end="297:39"><name pos:start="297:16" pos:end="297:39"><name pos:start="297:16" pos:end="297:20">avctx</name><operator pos:start="297:21" pos:end="297:22">-&gt;</operator><name pos:start="297:23" pos:end="297:27">codec</name><operator pos:start="297:28" pos:end="297:29">-&gt;</operator><name pos:start="297:30" pos:end="297:39">max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:30"><expr pos:start="299:9" pos:end="299:29"><name pos:start="299:9" pos:end="299:11">ret</name> <operator pos:start="299:13" pos:end="299:13">=</operator> <call pos:start="299:15" pos:end="299:29"><name pos:start="299:15" pos:end="299:21">AVERROR</name><argument_list pos:start="299:22" pos:end="299:29">(<argument pos:start="299:23" pos:end="299:28"><expr pos:start="299:23" pos:end="299:28"><name pos:start="299:23" pos:end="299:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="301:9" pos:end="301:26">goto <name pos:start="301:14" pos:end="301:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="307:5" pos:end="495:5"><if pos:start="307:5" pos:end="495:5">if <condition pos:start="307:8" pos:end="307:42">(<expr pos:start="307:9" pos:end="307:41"><call pos:start="307:9" pos:end="307:41"><name pos:start="307:9" pos:end="307:27">av_codec_is_encoder</name><argument_list pos:start="307:28" pos:end="307:41">(<argument pos:start="307:29" pos:end="307:40"><expr pos:start="307:29" pos:end="307:40"><name pos:start="307:29" pos:end="307:40"><name pos:start="307:29" pos:end="307:33">avctx</name><operator pos:start="307:34" pos:end="307:35">-&gt;</operator><name pos:start="307:36" pos:end="307:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:44" pos:end="495:5">{<block_content pos:start="309:9" pos:end="493:79">

        <decl_stmt pos:start="309:9" pos:end="309:14"><decl pos:start="309:9" pos:end="309:13"><type pos:start="309:9" pos:end="309:11"><name pos:start="309:9" pos:end="309:11">int</name></type> <name pos:start="309:13" pos:end="309:13">i</name></decl>;</decl_stmt>

        <if_stmt pos:start="311:9" pos:end="349:9"><if pos:start="311:9" pos:end="349:9">if <condition pos:start="311:12" pos:end="311:38">(<expr pos:start="311:13" pos:end="311:37"><name pos:start="311:13" pos:end="311:37"><name pos:start="311:13" pos:end="311:17">avctx</name><operator pos:start="311:18" pos:end="311:19">-&gt;</operator><name pos:start="311:20" pos:end="311:24">codec</name><operator pos:start="311:25" pos:end="311:26">-&gt;</operator><name pos:start="311:27" pos:end="311:37">sample_fmts</name></name></expr>)</condition> <block pos:start="311:40" pos:end="349:9">{<block_content pos:start="313:13" pos:end="347:13">

            <for pos:start="313:13" pos:end="331:13">for <control pos:start="313:17" pos:end="313:80">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:75"><expr pos:start="313:25" pos:end="313:74"><name pos:start="313:25" pos:end="313:52"><name pos:start="313:25" pos:end="313:29">avctx</name><operator pos:start="313:30" pos:end="313:31">-&gt;</operator><name pos:start="313:32" pos:end="313:36">codec</name><operator pos:start="313:37" pos:end="313:38">-&gt;</operator><name pos:start="313:39" pos:end="313:49">sample_fmts</name><index pos:start="313:50" pos:end="313:52">[<expr pos:start="313:51" pos:end="313:51"><name pos:start="313:51" pos:end="313:51">i</name></expr>]</index></name> <operator pos:start="313:54" pos:end="313:55">!=</operator> <name pos:start="313:57" pos:end="313:74">AV_SAMPLE_FMT_NONE</name></expr>;</condition> <incr pos:start="313:77" pos:end="313:79"><expr pos:start="313:77" pos:end="313:79"><name pos:start="313:77" pos:end="313:77">i</name><operator pos:start="313:78" pos:end="313:79">++</operator></expr></incr>)</control> <block pos:start="313:82" pos:end="331:13">{<block_content pos:start="315:17" pos:end="329:17">

                <if_stmt pos:start="315:17" pos:end="317:26"><if pos:start="315:17" pos:end="317:26">if <condition pos:start="315:20" pos:end="315:70">(<expr pos:start="315:21" pos:end="315:69"><name pos:start="315:21" pos:end="315:37"><name pos:start="315:21" pos:end="315:25">avctx</name><operator pos:start="315:26" pos:end="315:27">-&gt;</operator><name pos:start="315:28" pos:end="315:37">sample_fmt</name></name> <operator pos:start="315:39" pos:end="315:40">==</operator> <name pos:start="315:42" pos:end="315:69"><name pos:start="315:42" pos:end="315:46">avctx</name><operator pos:start="315:47" pos:end="315:48">-&gt;</operator><name pos:start="315:49" pos:end="315:53">codec</name><operator pos:start="315:54" pos:end="315:55">-&gt;</operator><name pos:start="315:56" pos:end="315:66">sample_fmts</name><index pos:start="315:67" pos:end="315:69">[<expr pos:start="315:68" pos:end="315:68"><name pos:start="315:68" pos:end="315:68">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="317:21" pos:end="317:26"><block_content pos:start="317:21" pos:end="317:26">

                    <break pos:start="317:21" pos:end="317:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="319:17" pos:end="329:17"><if pos:start="319:17" pos:end="329:17">if <condition pos:start="319:20" pos:end="323:75">(<expr pos:start="319:21" pos:end="323:74"><name pos:start="319:21" pos:end="319:35"><name pos:start="319:21" pos:end="319:25">avctx</name><operator pos:start="319:26" pos:end="319:27">-&gt;</operator><name pos:start="319:28" pos:end="319:35">channels</name></name> <operator pos:start="319:37" pos:end="319:38">==</operator> <literal type="number" pos:start="319:40" pos:end="319:40">1</literal> <operator pos:start="319:42" pos:end="319:43">&amp;&amp;</operator>

                    <call pos:start="321:21" pos:end="321:63"><name pos:start="321:21" pos:end="321:44">av_get_planar_sample_fmt</name><argument_list pos:start="321:45" pos:end="321:63">(<argument pos:start="321:46" pos:end="321:62"><expr pos:start="321:46" pos:end="321:62"><name pos:start="321:46" pos:end="321:62"><name pos:start="321:46" pos:end="321:50">avctx</name><operator pos:start="321:51" pos:end="321:52">-&gt;</operator><name pos:start="321:53" pos:end="321:62">sample_fmt</name></name></expr></argument>)</argument_list></call> <operator pos:start="321:65" pos:end="321:66">==</operator>

                    <call pos:start="323:21" pos:end="323:74"><name pos:start="323:21" pos:end="323:44">av_get_planar_sample_fmt</name><argument_list pos:start="323:45" pos:end="323:74">(<argument pos:start="323:46" pos:end="323:73"><expr pos:start="323:46" pos:end="323:73"><name pos:start="323:46" pos:end="323:73"><name pos:start="323:46" pos:end="323:50">avctx</name><operator pos:start="323:51" pos:end="323:52">-&gt;</operator><name pos:start="323:53" pos:end="323:57">codec</name><operator pos:start="323:58" pos:end="323:59">-&gt;</operator><name pos:start="323:60" pos:end="323:70">sample_fmts</name><index pos:start="323:71" pos:end="323:73">[<expr pos:start="323:72" pos:end="323:72"><name pos:start="323:72" pos:end="323:72">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="323:77" pos:end="329:17">{<block_content pos:start="325:21" pos:end="327:26">

                    <expr_stmt pos:start="325:21" pos:end="325:69"><expr pos:start="325:21" pos:end="325:68"><name pos:start="325:21" pos:end="325:37"><name pos:start="325:21" pos:end="325:25">avctx</name><operator pos:start="325:26" pos:end="325:27">-&gt;</operator><name pos:start="325:28" pos:end="325:37">sample_fmt</name></name> <operator pos:start="325:39" pos:end="325:39">=</operator> <name pos:start="325:41" pos:end="325:68"><name pos:start="325:41" pos:end="325:45">avctx</name><operator pos:start="325:46" pos:end="325:47">-&gt;</operator><name pos:start="325:48" pos:end="325:52">codec</name><operator pos:start="325:53" pos:end="325:54">-&gt;</operator><name pos:start="325:55" pos:end="325:65">sample_fmts</name><index pos:start="325:66" pos:end="325:68">[<expr pos:start="325:67" pos:end="325:67"><name pos:start="325:67" pos:end="325:67">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <break pos:start="327:21" pos:end="327:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="333:13" pos:end="347:13"><if pos:start="333:13" pos:end="347:13">if <condition pos:start="333:16" pos:end="333:67">(<expr pos:start="333:17" pos:end="333:66"><name pos:start="333:17" pos:end="333:44"><name pos:start="333:17" pos:end="333:21">avctx</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:28">codec</name><operator pos:start="333:29" pos:end="333:30">-&gt;</operator><name pos:start="333:31" pos:end="333:41">sample_fmts</name><index pos:start="333:42" pos:end="333:44">[<expr pos:start="333:43" pos:end="333:43"><name pos:start="333:43" pos:end="333:43">i</name></expr>]</index></name> <operator pos:start="333:46" pos:end="333:47">==</operator> <name pos:start="333:49" pos:end="333:66">AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block pos:start="333:69" pos:end="347:13">{<block_content pos:start="335:17" pos:end="345:34">

                <decl_stmt pos:start="335:17" pos:end="335:30"><decl pos:start="335:17" pos:end="335:29"><type pos:start="335:17" pos:end="335:20"><name pos:start="335:17" pos:end="335:20">char</name></type> <name pos:start="335:22" pos:end="335:29"><name pos:start="335:22" pos:end="335:24">buf</name><index pos:start="335:25" pos:end="335:29">[<expr pos:start="335:26" pos:end="335:28"><literal type="number" pos:start="335:26" pos:end="335:28">128</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:68"><expr pos:start="337:17" pos:end="337:67"><call pos:start="337:17" pos:end="337:67"><name pos:start="337:17" pos:end="337:24">snprintf</name><argument_list pos:start="337:25" pos:end="337:67">(<argument pos:start="337:26" pos:end="337:28"><expr pos:start="337:26" pos:end="337:28"><name pos:start="337:26" pos:end="337:28">buf</name></expr></argument>, <argument pos:start="337:31" pos:end="337:41"><expr pos:start="337:31" pos:end="337:41"><sizeof pos:start="337:31" pos:end="337:41">sizeof<argument_list pos:start="337:37" pos:end="337:41">(<argument pos:start="337:38" pos:end="337:40"><expr pos:start="337:38" pos:end="337:40"><name pos:start="337:38" pos:end="337:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="337:44" pos:end="337:47"><expr pos:start="337:44" pos:end="337:47"><literal type="string" pos:start="337:44" pos:end="337:47">"%d"</literal></expr></argument>, <argument pos:start="337:50" pos:end="337:66"><expr pos:start="337:50" pos:end="337:66"><name pos:start="337:50" pos:end="337:66"><name pos:start="337:50" pos:end="337:54">avctx</name><operator pos:start="337:55" pos:end="337:56">-&gt;</operator><name pos:start="337:57" pos:end="337:66">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="341:93"><expr pos:start="339:17" pos:end="341:92"><call pos:start="339:17" pos:end="341:92"><name pos:start="339:17" pos:end="339:22">av_log</name><argument_list pos:start="339:23" pos:end="341:92">(<argument pos:start="339:24" pos:end="339:28"><expr pos:start="339:24" pos:end="339:28"><name pos:start="339:24" pos:end="339:28">avctx</name></expr></argument>, <argument pos:start="339:31" pos:end="339:42"><expr pos:start="339:31" pos:end="339:42"><name pos:start="339:31" pos:end="339:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="339:45" pos:end="339:102"><expr pos:start="339:45" pos:end="339:102"><literal type="string" pos:start="339:45" pos:end="339:102">"Specified sample format %s is invalid or not supported\n"</literal></expr></argument>,

                       <argument pos:start="341:24" pos:end="341:91"><expr pos:start="341:24" pos:end="341:91"><operator pos:start="341:24" pos:end="341:24">(</operator><name pos:start="341:25" pos:end="341:28">char</name> <operator pos:start="341:30" pos:end="341:30">*</operator><operator pos:start="341:31" pos:end="341:31">)</operator><call pos:start="341:32" pos:end="341:91"><name pos:start="341:32" pos:end="341:43">av_x_if_null</name><argument_list pos:start="341:44" pos:end="341:91">(<argument pos:start="341:45" pos:end="341:85"><expr pos:start="341:45" pos:end="341:85"><call pos:start="341:45" pos:end="341:85"><name pos:start="341:45" pos:end="341:66">av_get_sample_fmt_name</name><argument_list pos:start="341:67" pos:end="341:85">(<argument pos:start="341:68" pos:end="341:84"><expr pos:start="341:68" pos:end="341:84"><name pos:start="341:68" pos:end="341:84"><name pos:start="341:68" pos:end="341:72">avctx</name><operator pos:start="341:73" pos:end="341:74">-&gt;</operator><name pos:start="341:75" pos:end="341:84">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="341:88" pos:end="341:90"><expr pos:start="341:88" pos:end="341:90"><name pos:start="341:88" pos:end="341:90">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:38"><expr pos:start="343:17" pos:end="343:37"><name pos:start="343:17" pos:end="343:19">ret</name> <operator pos:start="343:21" pos:end="343:21">=</operator> <call pos:start="343:23" pos:end="343:37"><name pos:start="343:23" pos:end="343:29">AVERROR</name><argument_list pos:start="343:30" pos:end="343:37">(<argument pos:start="343:31" pos:end="343:36"><expr pos:start="343:31" pos:end="343:36"><name pos:start="343:31" pos:end="343:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="345:17" pos:end="345:34">goto <name pos:start="345:22" pos:end="345:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="351:9" pos:end="379:9"><if pos:start="351:9" pos:end="379:9">if <condition pos:start="351:12" pos:end="351:35">(<expr pos:start="351:13" pos:end="351:34"><name pos:start="351:13" pos:end="351:34"><name pos:start="351:13" pos:end="351:17">avctx</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:24">codec</name><operator pos:start="351:25" pos:end="351:26">-&gt;</operator><name pos:start="351:27" pos:end="351:34">pix_fmts</name></name></expr>)</condition> <block pos:start="351:37" pos:end="379:9">{<block_content pos:start="353:13" pos:end="377:13">

            <for pos:start="353:13" pos:end="357:26">for <control pos:start="353:17" pos:end="353:74">(<init pos:start="353:18" pos:end="353:23"><expr pos:start="353:18" pos:end="353:22"><name pos:start="353:18" pos:end="353:18">i</name> <operator pos:start="353:20" pos:end="353:20">=</operator> <literal type="number" pos:start="353:22" pos:end="353:22">0</literal></expr>;</init> <condition pos:start="353:25" pos:end="353:69"><expr pos:start="353:25" pos:end="353:68"><name pos:start="353:25" pos:end="353:49"><name pos:start="353:25" pos:end="353:29">avctx</name><operator pos:start="353:30" pos:end="353:31">-&gt;</operator><name pos:start="353:32" pos:end="353:36">codec</name><operator pos:start="353:37" pos:end="353:38">-&gt;</operator><name pos:start="353:39" pos:end="353:46">pix_fmts</name><index pos:start="353:47" pos:end="353:49">[<expr pos:start="353:48" pos:end="353:48"><name pos:start="353:48" pos:end="353:48">i</name></expr>]</index></name> <operator pos:start="353:51" pos:end="353:52">!=</operator> <name pos:start="353:54" pos:end="353:68">AV_PIX_FMT_NONE</name></expr>;</condition> <incr pos:start="353:71" pos:end="353:73"><expr pos:start="353:71" pos:end="353:73"><name pos:start="353:71" pos:end="353:71">i</name><operator pos:start="353:72" pos:end="353:73">++</operator></expr></incr>)</control><block type="pseudo" pos:start="355:17" pos:end="357:26"><block_content pos:start="355:17" pos:end="357:26">

                <if_stmt pos:start="355:17" pos:end="357:26"><if pos:start="355:17" pos:end="357:26">if <condition pos:start="355:20" pos:end="355:64">(<expr pos:start="355:21" pos:end="355:63"><name pos:start="355:21" pos:end="355:34"><name pos:start="355:21" pos:end="355:25">avctx</name><operator pos:start="355:26" pos:end="355:27">-&gt;</operator><name pos:start="355:28" pos:end="355:34">pix_fmt</name></name> <operator pos:start="355:36" pos:end="355:37">==</operator> <name pos:start="355:39" pos:end="355:63"><name pos:start="355:39" pos:end="355:43">avctx</name><operator pos:start="355:44" pos:end="355:45">-&gt;</operator><name pos:start="355:46" pos:end="355:50">codec</name><operator pos:start="355:51" pos:end="355:52">-&gt;</operator><name pos:start="355:53" pos:end="355:60">pix_fmts</name><index pos:start="355:61" pos:end="355:63">[<expr pos:start="355:62" pos:end="355:62"><name pos:start="355:62" pos:end="355:62">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="357:21" pos:end="357:26"><block_content pos:start="357:21" pos:end="357:26">

                    <break pos:start="357:21" pos:end="357:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="359:13" pos:end="377:13"><if pos:start="359:13" pos:end="377:13">if <condition pos:start="359:16" pos:end="363:82">(<expr pos:start="359:17" pos:end="363:81"><name pos:start="359:17" pos:end="359:41"><name pos:start="359:17" pos:end="359:21">avctx</name><operator pos:start="359:22" pos:end="359:23">-&gt;</operator><name pos:start="359:24" pos:end="359:28">codec</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:38">pix_fmts</name><index pos:start="359:39" pos:end="359:41">[<expr pos:start="359:40" pos:end="359:40"><name pos:start="359:40" pos:end="359:40">i</name></expr>]</index></name> <operator pos:start="359:43" pos:end="359:44">==</operator> <name pos:start="359:46" pos:end="359:60">AV_PIX_FMT_NONE</name>

                <operator pos:start="361:17" pos:end="361:18">&amp;&amp;</operator> <operator pos:start="361:20" pos:end="361:20">!</operator><operator pos:start="361:21" pos:end="361:21">(</operator><operator pos:start="361:22" pos:end="361:22">(</operator><name pos:start="361:23" pos:end="361:37"><name pos:start="361:23" pos:end="361:27">avctx</name><operator pos:start="361:28" pos:end="361:29">-&gt;</operator><name pos:start="361:30" pos:end="361:37">codec_id</name></name> <operator pos:start="361:39" pos:end="361:40">==</operator> <name pos:start="361:42" pos:end="361:58">AV_CODEC_ID_MJPEG</name> <operator pos:start="361:60" pos:end="361:61">||</operator> <name pos:start="361:63" pos:end="361:77"><name pos:start="361:63" pos:end="361:67">avctx</name><operator pos:start="361:68" pos:end="361:69">-&gt;</operator><name pos:start="361:70" pos:end="361:77">codec_id</name></name> <operator pos:start="361:79" pos:end="361:80">==</operator> <name pos:start="361:82" pos:end="361:98">AV_CODEC_ID_LJPEG</name><operator pos:start="361:99" pos:end="361:99">)</operator>

                     <operator pos:start="363:22" pos:end="363:23">&amp;&amp;</operator> <name pos:start="363:25" pos:end="363:52"><name pos:start="363:25" pos:end="363:29">avctx</name><operator pos:start="363:30" pos:end="363:31">-&gt;</operator><name pos:start="363:32" pos:end="363:52">strict_std_compliance</name></name> <operator pos:start="363:54" pos:end="363:55">&lt;=</operator> <name pos:start="363:57" pos:end="363:80">FF_COMPLIANCE_UNOFFICIAL</name><operator pos:start="363:81" pos:end="363:81">)</operator></expr>)</condition> <block pos:start="363:84" pos:end="377:13">{<block_content pos:start="365:17" pos:end="375:34">

                <decl_stmt pos:start="365:17" pos:end="365:30"><decl pos:start="365:17" pos:end="365:29"><type pos:start="365:17" pos:end="365:20"><name pos:start="365:17" pos:end="365:20">char</name></type> <name pos:start="365:22" pos:end="365:29"><name pos:start="365:22" pos:end="365:24">buf</name><index pos:start="365:25" pos:end="365:29">[<expr pos:start="365:26" pos:end="365:28"><literal type="number" pos:start="365:26" pos:end="365:28">128</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:65"><expr pos:start="367:17" pos:end="367:64"><call pos:start="367:17" pos:end="367:64"><name pos:start="367:17" pos:end="367:24">snprintf</name><argument_list pos:start="367:25" pos:end="367:64">(<argument pos:start="367:26" pos:end="367:28"><expr pos:start="367:26" pos:end="367:28"><name pos:start="367:26" pos:end="367:28">buf</name></expr></argument>, <argument pos:start="367:31" pos:end="367:41"><expr pos:start="367:31" pos:end="367:41"><sizeof pos:start="367:31" pos:end="367:41">sizeof<argument_list pos:start="367:37" pos:end="367:41">(<argument pos:start="367:38" pos:end="367:40"><expr pos:start="367:38" pos:end="367:40"><name pos:start="367:38" pos:end="367:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="367:44" pos:end="367:47"><expr pos:start="367:44" pos:end="367:47"><literal type="string" pos:start="367:44" pos:end="367:47">"%d"</literal></expr></argument>, <argument pos:start="367:50" pos:end="367:63"><expr pos:start="367:50" pos:end="367:63"><name pos:start="367:50" pos:end="367:63"><name pos:start="367:50" pos:end="367:54">avctx</name><operator pos:start="367:55" pos:end="367:56">-&gt;</operator><name pos:start="367:57" pos:end="367:63">pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="371:87"><expr pos:start="369:17" pos:end="371:86"><call pos:start="369:17" pos:end="371:86"><name pos:start="369:17" pos:end="369:22">av_log</name><argument_list pos:start="369:23" pos:end="371:86">(<argument pos:start="369:24" pos:end="369:28"><expr pos:start="369:24" pos:end="369:28"><name pos:start="369:24" pos:end="369:28">avctx</name></expr></argument>, <argument pos:start="369:31" pos:end="369:42"><expr pos:start="369:31" pos:end="369:42"><name pos:start="369:31" pos:end="369:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="369:45" pos:end="369:101"><expr pos:start="369:45" pos:end="369:101"><literal type="string" pos:start="369:45" pos:end="369:101">"Specified pixel format %s is invalid or not supported\n"</literal></expr></argument>,

                       <argument pos:start="371:24" pos:end="371:85"><expr pos:start="371:24" pos:end="371:85"><operator pos:start="371:24" pos:end="371:24">(</operator><name pos:start="371:25" pos:end="371:28">char</name> <operator pos:start="371:30" pos:end="371:30">*</operator><operator pos:start="371:31" pos:end="371:31">)</operator><call pos:start="371:32" pos:end="371:85"><name pos:start="371:32" pos:end="371:43">av_x_if_null</name><argument_list pos:start="371:44" pos:end="371:85">(<argument pos:start="371:45" pos:end="371:79"><expr pos:start="371:45" pos:end="371:79"><call pos:start="371:45" pos:end="371:79"><name pos:start="371:45" pos:end="371:63">av_get_pix_fmt_name</name><argument_list pos:start="371:64" pos:end="371:79">(<argument pos:start="371:65" pos:end="371:78"><expr pos:start="371:65" pos:end="371:78"><name pos:start="371:65" pos:end="371:78"><name pos:start="371:65" pos:end="371:69">avctx</name><operator pos:start="371:70" pos:end="371:71">-&gt;</operator><name pos:start="371:72" pos:end="371:78">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="371:82" pos:end="371:84"><expr pos:start="371:82" pos:end="371:84"><name pos:start="371:82" pos:end="371:84">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:38"><expr pos:start="373:17" pos:end="373:37"><name pos:start="373:17" pos:end="373:19">ret</name> <operator pos:start="373:21" pos:end="373:21">=</operator> <call pos:start="373:23" pos:end="373:37"><name pos:start="373:23" pos:end="373:29">AVERROR</name><argument_list pos:start="373:30" pos:end="373:37">(<argument pos:start="373:31" pos:end="373:36"><expr pos:start="373:31" pos:end="373:36"><name pos:start="373:31" pos:end="373:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="375:17" pos:end="375:34">goto <name pos:start="375:22" pos:end="375:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="381:9" pos:end="401:9"><if pos:start="381:9" pos:end="401:9">if <condition pos:start="381:12" pos:end="381:48">(<expr pos:start="381:13" pos:end="381:47"><name pos:start="381:13" pos:end="381:47"><name pos:start="381:13" pos:end="381:17">avctx</name><operator pos:start="381:18" pos:end="381:19">-&gt;</operator><name pos:start="381:20" pos:end="381:24">codec</name><operator pos:start="381:25" pos:end="381:26">-&gt;</operator><name pos:start="381:27" pos:end="381:47">supported_samplerates</name></name></expr>)</condition> <block pos:start="381:50" pos:end="401:9">{<block_content pos:start="383:13" pos:end="399:13">

            <for pos:start="383:13" pos:end="387:26">for <control pos:start="383:17" pos:end="383:73">(<init pos:start="383:18" pos:end="383:23"><expr pos:start="383:18" pos:end="383:22"><name pos:start="383:18" pos:end="383:18">i</name> <operator pos:start="383:20" pos:end="383:20">=</operator> <literal type="number" pos:start="383:22" pos:end="383:22">0</literal></expr>;</init> <condition pos:start="383:25" pos:end="383:68"><expr pos:start="383:25" pos:end="383:67"><name pos:start="383:25" pos:end="383:62"><name pos:start="383:25" pos:end="383:29">avctx</name><operator pos:start="383:30" pos:end="383:31">-&gt;</operator><name pos:start="383:32" pos:end="383:36">codec</name><operator pos:start="383:37" pos:end="383:38">-&gt;</operator><name pos:start="383:39" pos:end="383:59">supported_samplerates</name><index pos:start="383:60" pos:end="383:62">[<expr pos:start="383:61" pos:end="383:61"><name pos:start="383:61" pos:end="383:61">i</name></expr>]</index></name> <operator pos:start="383:64" pos:end="383:65">!=</operator> <literal type="number" pos:start="383:67" pos:end="383:67">0</literal></expr>;</condition> <incr pos:start="383:70" pos:end="383:72"><expr pos:start="383:70" pos:end="383:72"><name pos:start="383:70" pos:end="383:70">i</name><operator pos:start="383:71" pos:end="383:72">++</operator></expr></incr>)</control><block type="pseudo" pos:start="385:17" pos:end="387:26"><block_content pos:start="385:17" pos:end="387:26">

                <if_stmt pos:start="385:17" pos:end="387:26"><if pos:start="385:17" pos:end="387:26">if <condition pos:start="385:20" pos:end="385:81">(<expr pos:start="385:21" pos:end="385:80"><name pos:start="385:21" pos:end="385:38"><name pos:start="385:21" pos:end="385:25">avctx</name><operator pos:start="385:26" pos:end="385:27">-&gt;</operator><name pos:start="385:28" pos:end="385:38">sample_rate</name></name> <operator pos:start="385:40" pos:end="385:41">==</operator> <name pos:start="385:43" pos:end="385:80"><name pos:start="385:43" pos:end="385:47">avctx</name><operator pos:start="385:48" pos:end="385:49">-&gt;</operator><name pos:start="385:50" pos:end="385:54">codec</name><operator pos:start="385:55" pos:end="385:56">-&gt;</operator><name pos:start="385:57" pos:end="385:77">supported_samplerates</name><index pos:start="385:78" pos:end="385:80">[<expr pos:start="385:79" pos:end="385:79"><name pos:start="385:79" pos:end="385:79">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="387:21" pos:end="387:26"><block_content pos:start="387:21" pos:end="387:26">

                    <break pos:start="387:21" pos:end="387:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="389:13" pos:end="399:13"><if pos:start="389:13" pos:end="399:13">if <condition pos:start="389:16" pos:end="389:60">(<expr pos:start="389:17" pos:end="389:59"><name pos:start="389:17" pos:end="389:54"><name pos:start="389:17" pos:end="389:21">avctx</name><operator pos:start="389:22" pos:end="389:23">-&gt;</operator><name pos:start="389:24" pos:end="389:28">codec</name><operator pos:start="389:29" pos:end="389:30">-&gt;</operator><name pos:start="389:31" pos:end="389:51">supported_samplerates</name><index pos:start="389:52" pos:end="389:54">[<expr pos:start="389:53" pos:end="389:53"><name pos:start="389:53" pos:end="389:53">i</name></expr>]</index></name> <operator pos:start="389:56" pos:end="389:57">==</operator> <literal type="number" pos:start="389:59" pos:end="389:59">0</literal></expr>)</condition> <block pos:start="389:62" pos:end="399:13">{<block_content pos:start="391:17" pos:end="397:34">

                <expr_stmt pos:start="391:17" pos:end="393:43"><expr pos:start="391:17" pos:end="393:42"><call pos:start="391:17" pos:end="393:42"><name pos:start="391:17" pos:end="391:22">av_log</name><argument_list pos:start="391:23" pos:end="393:42">(<argument pos:start="391:24" pos:end="391:28"><expr pos:start="391:24" pos:end="391:28"><name pos:start="391:24" pos:end="391:28">avctx</name></expr></argument>, <argument pos:start="391:31" pos:end="391:42"><expr pos:start="391:31" pos:end="391:42"><name pos:start="391:31" pos:end="391:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="391:45" pos:end="391:89"><expr pos:start="391:45" pos:end="391:89"><literal type="string" pos:start="391:45" pos:end="391:89">"Specified sample rate %d is not supported\n"</literal></expr></argument>,

                       <argument pos:start="393:24" pos:end="393:41"><expr pos:start="393:24" pos:end="393:41"><name pos:start="393:24" pos:end="393:41"><name pos:start="393:24" pos:end="393:28">avctx</name><operator pos:start="393:29" pos:end="393:30">-&gt;</operator><name pos:start="393:31" pos:end="393:41">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="395:17" pos:end="395:38"><expr pos:start="395:17" pos:end="395:37"><name pos:start="395:17" pos:end="395:19">ret</name> <operator pos:start="395:21" pos:end="395:21">=</operator> <call pos:start="395:23" pos:end="395:37"><name pos:start="395:23" pos:end="395:29">AVERROR</name><argument_list pos:start="395:30" pos:end="395:37">(<argument pos:start="395:31" pos:end="395:36"><expr pos:start="395:31" pos:end="395:36"><name pos:start="395:31" pos:end="395:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="397:17" pos:end="397:34">goto <name pos:start="397:22" pos:end="397:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="403:9" pos:end="433:9"><if pos:start="403:9" pos:end="433:9">if <condition pos:start="403:12" pos:end="403:42">(<expr pos:start="403:13" pos:end="403:41"><name pos:start="403:13" pos:end="403:41"><name pos:start="403:13" pos:end="403:17">avctx</name><operator pos:start="403:18" pos:end="403:19">-&gt;</operator><name pos:start="403:20" pos:end="403:24">codec</name><operator pos:start="403:25" pos:end="403:26">-&gt;</operator><name pos:start="403:27" pos:end="403:41">channel_layouts</name></name></expr>)</condition> <block pos:start="403:44" pos:end="433:9">{<block_content pos:start="405:13" pos:end="431:13">

            <if_stmt pos:start="405:13" pos:end="431:13"><if pos:start="405:13" pos:end="409:13">if <condition pos:start="405:16" pos:end="405:39">(<expr pos:start="405:17" pos:end="405:38"><operator pos:start="405:17" pos:end="405:17">!</operator><name pos:start="405:18" pos:end="405:38"><name pos:start="405:18" pos:end="405:22">avctx</name><operator pos:start="405:23" pos:end="405:24">-&gt;</operator><name pos:start="405:25" pos:end="405:38">channel_layout</name></name></expr>)</condition> <block pos:start="405:41" pos:end="409:13">{<block_content pos:start="407:17" pos:end="407:80">

                <expr_stmt pos:start="407:17" pos:end="407:80"><expr pos:start="407:17" pos:end="407:79"><call pos:start="407:17" pos:end="407:79"><name pos:start="407:17" pos:end="407:22">av_log</name><argument_list pos:start="407:23" pos:end="407:79">(<argument pos:start="407:24" pos:end="407:28"><expr pos:start="407:24" pos:end="407:28"><name pos:start="407:24" pos:end="407:28">avctx</name></expr></argument>, <argument pos:start="407:31" pos:end="407:44"><expr pos:start="407:31" pos:end="407:44"><name pos:start="407:31" pos:end="407:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="407:47" pos:end="407:78"><expr pos:start="407:47" pos:end="407:78"><literal type="string" pos:start="407:47" pos:end="407:78">"Channel layout not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="409:15" pos:end="431:13">else <block pos:start="409:20" pos:end="431:13">{<block_content pos:start="411:17" pos:end="429:17">

                <for pos:start="411:17" pos:end="415:30">for <control pos:start="411:21" pos:end="411:71">(<init pos:start="411:22" pos:end="411:27"><expr pos:start="411:22" pos:end="411:26"><name pos:start="411:22" pos:end="411:22">i</name> <operator pos:start="411:24" pos:end="411:24">=</operator> <literal type="number" pos:start="411:26" pos:end="411:26">0</literal></expr>;</init> <condition pos:start="411:29" pos:end="411:66"><expr pos:start="411:29" pos:end="411:65"><name pos:start="411:29" pos:end="411:60"><name pos:start="411:29" pos:end="411:33">avctx</name><operator pos:start="411:34" pos:end="411:35">-&gt;</operator><name pos:start="411:36" pos:end="411:40">codec</name><operator pos:start="411:41" pos:end="411:42">-&gt;</operator><name pos:start="411:43" pos:end="411:57">channel_layouts</name><index pos:start="411:58" pos:end="411:60">[<expr pos:start="411:59" pos:end="411:59"><name pos:start="411:59" pos:end="411:59">i</name></expr>]</index></name> <operator pos:start="411:62" pos:end="411:63">!=</operator> <literal type="number" pos:start="411:65" pos:end="411:65">0</literal></expr>;</condition> <incr pos:start="411:68" pos:end="411:70"><expr pos:start="411:68" pos:end="411:70"><name pos:start="411:68" pos:end="411:68">i</name><operator pos:start="411:69" pos:end="411:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="413:21" pos:end="415:30"><block_content pos:start="413:21" pos:end="415:30">

                    <if_stmt pos:start="413:21" pos:end="415:30"><if pos:start="413:21" pos:end="415:30">if <condition pos:start="413:24" pos:end="413:82">(<expr pos:start="413:25" pos:end="413:81"><name pos:start="413:25" pos:end="413:45"><name pos:start="413:25" pos:end="413:29">avctx</name><operator pos:start="413:30" pos:end="413:31">-&gt;</operator><name pos:start="413:32" pos:end="413:45">channel_layout</name></name> <operator pos:start="413:47" pos:end="413:48">==</operator> <name pos:start="413:50" pos:end="413:81"><name pos:start="413:50" pos:end="413:54">avctx</name><operator pos:start="413:55" pos:end="413:56">-&gt;</operator><name pos:start="413:57" pos:end="413:61">codec</name><operator pos:start="413:62" pos:end="413:63">-&gt;</operator><name pos:start="413:64" pos:end="413:78">channel_layouts</name><index pos:start="413:79" pos:end="413:81">[<expr pos:start="413:80" pos:end="413:80"><name pos:start="413:80" pos:end="413:80">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="415:25" pos:end="415:30"><block_content pos:start="415:25" pos:end="415:30">

                        <break pos:start="415:25" pos:end="415:30">break;</break></block_content></block></if></if_stmt></block_content></block></for>

                <if_stmt pos:start="417:17" pos:end="429:17"><if pos:start="417:17" pos:end="429:17">if <condition pos:start="417:20" pos:end="417:58">(<expr pos:start="417:21" pos:end="417:57"><name pos:start="417:21" pos:end="417:52"><name pos:start="417:21" pos:end="417:25">avctx</name><operator pos:start="417:26" pos:end="417:27">-&gt;</operator><name pos:start="417:28" pos:end="417:32">codec</name><operator pos:start="417:33" pos:end="417:34">-&gt;</operator><name pos:start="417:35" pos:end="417:49">channel_layouts</name><index pos:start="417:50" pos:end="417:52">[<expr pos:start="417:51" pos:end="417:51"><name pos:start="417:51" pos:end="417:51">i</name></expr>]</index></name> <operator pos:start="417:54" pos:end="417:55">==</operator> <literal type="number" pos:start="417:57" pos:end="417:57">0</literal></expr>)</condition> <block pos:start="417:60" pos:end="429:17">{<block_content pos:start="419:21" pos:end="427:38">

                    <decl_stmt pos:start="419:21" pos:end="419:34"><decl pos:start="419:21" pos:end="419:33"><type pos:start="419:21" pos:end="419:24"><name pos:start="419:21" pos:end="419:24">char</name></type> <name pos:start="419:26" pos:end="419:33"><name pos:start="419:26" pos:end="419:28">buf</name><index pos:start="419:29" pos:end="419:33">[<expr pos:start="419:30" pos:end="419:32"><literal type="number" pos:start="419:30" pos:end="419:32">512</literal></expr>]</index></name></decl>;</decl_stmt>

                    <expr_stmt pos:start="421:21" pos:end="421:94"><expr pos:start="421:21" pos:end="421:93"><call pos:start="421:21" pos:end="421:93"><name pos:start="421:21" pos:end="421:48">av_get_channel_layout_string</name><argument_list pos:start="421:49" pos:end="421:93">(<argument pos:start="421:50" pos:end="421:52"><expr pos:start="421:50" pos:end="421:52"><name pos:start="421:50" pos:end="421:52">buf</name></expr></argument>, <argument pos:start="421:55" pos:end="421:65"><expr pos:start="421:55" pos:end="421:65"><sizeof pos:start="421:55" pos:end="421:65">sizeof<argument_list pos:start="421:61" pos:end="421:65">(<argument pos:start="421:62" pos:end="421:64"><expr pos:start="421:62" pos:end="421:64"><name pos:start="421:62" pos:end="421:64">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="421:68" pos:end="421:69"><expr pos:start="421:68" pos:end="421:69"><operator pos:start="421:68" pos:end="421:68">-</operator><literal type="number" pos:start="421:69" pos:end="421:69">1</literal></expr></argument>, <argument pos:start="421:72" pos:end="421:92"><expr pos:start="421:72" pos:end="421:92"><name pos:start="421:72" pos:end="421:92"><name pos:start="421:72" pos:end="421:76">avctx</name><operator pos:start="421:77" pos:end="421:78">-&gt;</operator><name pos:start="421:79" pos:end="421:92">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="423:21" pos:end="423:105"><expr pos:start="423:21" pos:end="423:104"><call pos:start="423:21" pos:end="423:104"><name pos:start="423:21" pos:end="423:26">av_log</name><argument_list pos:start="423:27" pos:end="423:104">(<argument pos:start="423:28" pos:end="423:32"><expr pos:start="423:28" pos:end="423:32"><name pos:start="423:28" pos:end="423:32">avctx</name></expr></argument>, <argument pos:start="423:35" pos:end="423:46"><expr pos:start="423:35" pos:end="423:46"><name pos:start="423:35" pos:end="423:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="423:49" pos:end="423:98"><expr pos:start="423:49" pos:end="423:98"><literal type="string" pos:start="423:49" pos:end="423:98">"Specified channel layout '%s' is not supported\n"</literal></expr></argument>, <argument pos:start="423:101" pos:end="423:103"><expr pos:start="423:101" pos:end="423:103"><name pos:start="423:101" pos:end="423:103">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="425:21" pos:end="425:42"><expr pos:start="425:21" pos:end="425:41"><name pos:start="425:21" pos:end="425:23">ret</name> <operator pos:start="425:25" pos:end="425:25">=</operator> <call pos:start="425:27" pos:end="425:41"><name pos:start="425:27" pos:end="425:33">AVERROR</name><argument_list pos:start="425:34" pos:end="425:41">(<argument pos:start="425:35" pos:end="425:40"><expr pos:start="425:35" pos:end="425:40"><name pos:start="425:35" pos:end="425:40">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="427:21" pos:end="427:38">goto <name pos:start="427:26" pos:end="427:37">free_and_end</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="435:9" pos:end="461:9"><if pos:start="435:9" pos:end="457:9">if <condition pos:start="435:12" pos:end="435:53">(<expr pos:start="435:13" pos:end="435:52"><name pos:start="435:13" pos:end="435:33"><name pos:start="435:13" pos:end="435:17">avctx</name><operator pos:start="435:18" pos:end="435:19">-&gt;</operator><name pos:start="435:20" pos:end="435:33">channel_layout</name></name> <operator pos:start="435:35" pos:end="435:36">&amp;&amp;</operator> <name pos:start="435:38" pos:end="435:52"><name pos:start="435:38" pos:end="435:42">avctx</name><operator pos:start="435:43" pos:end="435:44">-&gt;</operator><name pos:start="435:45" pos:end="435:52">channels</name></name></expr>)</condition> <block pos:start="435:55" pos:end="457:9">{<block_content pos:start="437:13" pos:end="455:13">

            <decl_stmt pos:start="437:13" pos:end="437:84"><decl pos:start="437:13" pos:end="437:83"><type pos:start="437:13" pos:end="437:15"><name pos:start="437:13" pos:end="437:15">int</name></type> <name pos:start="437:17" pos:end="437:24">channels</name> <init pos:start="437:26" pos:end="437:83">= <expr pos:start="437:28" pos:end="437:83"><call pos:start="437:28" pos:end="437:83"><name pos:start="437:28" pos:end="437:60">av_get_channel_layout_nb_channels</name><argument_list pos:start="437:61" pos:end="437:83">(<argument pos:start="437:62" pos:end="437:82"><expr pos:start="437:62" pos:end="437:82"><name pos:start="437:62" pos:end="437:82"><name pos:start="437:62" pos:end="437:66">avctx</name><operator pos:start="437:67" pos:end="437:68">-&gt;</operator><name pos:start="437:69" pos:end="437:82">channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="439:13" pos:end="455:13"><if pos:start="439:13" pos:end="455:13">if <condition pos:start="439:16" pos:end="439:44">(<expr pos:start="439:17" pos:end="439:43"><name pos:start="439:17" pos:end="439:24">channels</name> <operator pos:start="439:26" pos:end="439:27">!=</operator> <name pos:start="439:29" pos:end="439:43"><name pos:start="439:29" pos:end="439:33">avctx</name><operator pos:start="439:34" pos:end="439:35">-&gt;</operator><name pos:start="439:36" pos:end="439:43">channels</name></name></expr>)</condition> <block pos:start="439:46" pos:end="455:13">{<block_content pos:start="441:17" pos:end="453:34">

                <decl_stmt pos:start="441:17" pos:end="441:30"><decl pos:start="441:17" pos:end="441:29"><type pos:start="441:17" pos:end="441:20"><name pos:start="441:17" pos:end="441:20">char</name></type> <name pos:start="441:22" pos:end="441:29"><name pos:start="441:22" pos:end="441:24">buf</name><index pos:start="441:25" pos:end="441:29">[<expr pos:start="441:26" pos:end="441:28"><literal type="number" pos:start="441:26" pos:end="441:28">512</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:90"><expr pos:start="443:17" pos:end="443:89"><call pos:start="443:17" pos:end="443:89"><name pos:start="443:17" pos:end="443:44">av_get_channel_layout_string</name><argument_list pos:start="443:45" pos:end="443:89">(<argument pos:start="443:46" pos:end="443:48"><expr pos:start="443:46" pos:end="443:48"><name pos:start="443:46" pos:end="443:48">buf</name></expr></argument>, <argument pos:start="443:51" pos:end="443:61"><expr pos:start="443:51" pos:end="443:61"><sizeof pos:start="443:51" pos:end="443:61">sizeof<argument_list pos:start="443:57" pos:end="443:61">(<argument pos:start="443:58" pos:end="443:60"><expr pos:start="443:58" pos:end="443:60"><name pos:start="443:58" pos:end="443:60">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="443:64" pos:end="443:65"><expr pos:start="443:64" pos:end="443:65"><operator pos:start="443:64" pos:end="443:64">-</operator><literal type="number" pos:start="443:65" pos:end="443:65">1</literal></expr></argument>, <argument pos:start="443:68" pos:end="443:88"><expr pos:start="443:68" pos:end="443:88"><name pos:start="443:68" pos:end="443:88"><name pos:start="443:68" pos:end="443:72">avctx</name><operator pos:start="443:73" pos:end="443:74">-&gt;</operator><name pos:start="443:75" pos:end="443:88">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="445:17" pos:end="449:55"><expr pos:start="445:17" pos:end="449:54"><call pos:start="445:17" pos:end="449:54"><name pos:start="445:17" pos:end="445:22">av_log</name><argument_list pos:start="445:23" pos:end="449:54">(<argument pos:start="445:24" pos:end="445:28"><expr pos:start="445:24" pos:end="445:28"><name pos:start="445:24" pos:end="445:28">avctx</name></expr></argument>, <argument pos:start="445:31" pos:end="445:42"><expr pos:start="445:31" pos:end="445:42"><name pos:start="445:31" pos:end="445:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="447:24" pos:end="447:110"><expr pos:start="447:24" pos:end="447:110"><literal type="string" pos:start="447:24" pos:end="447:110">"Channel layout '%s' with %d channels does not match number of specified channels %d\n"</literal></expr></argument>,

                       <argument pos:start="449:24" pos:end="449:26"><expr pos:start="449:24" pos:end="449:26"><name pos:start="449:24" pos:end="449:26">buf</name></expr></argument>, <argument pos:start="449:29" pos:end="449:36"><expr pos:start="449:29" pos:end="449:36"><name pos:start="449:29" pos:end="449:36">channels</name></expr></argument>, <argument pos:start="449:39" pos:end="449:53"><expr pos:start="449:39" pos:end="449:53"><name pos:start="449:39" pos:end="449:53"><name pos:start="449:39" pos:end="449:43">avctx</name><operator pos:start="449:44" pos:end="449:45">-&gt;</operator><name pos:start="449:46" pos:end="449:53">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="451:17" pos:end="451:38"><expr pos:start="451:17" pos:end="451:37"><name pos:start="451:17" pos:end="451:19">ret</name> <operator pos:start="451:21" pos:end="451:21">=</operator> <call pos:start="451:23" pos:end="451:37"><name pos:start="451:23" pos:end="451:29">AVERROR</name><argument_list pos:start="451:30" pos:end="451:37">(<argument pos:start="451:31" pos:end="451:36"><expr pos:start="451:31" pos:end="451:36"><name pos:start="451:31" pos:end="451:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="453:17" pos:end="453:34">goto <name pos:start="453:22" pos:end="453:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="457:11" pos:end="461:9">else if <condition pos:start="457:19" pos:end="457:41">(<expr pos:start="457:20" pos:end="457:40"><name pos:start="457:20" pos:end="457:40"><name pos:start="457:20" pos:end="457:24">avctx</name><operator pos:start="457:25" pos:end="457:26">-&gt;</operator><name pos:start="457:27" pos:end="457:40">channel_layout</name></name></expr>)</condition> <block pos:start="457:43" pos:end="461:9">{<block_content pos:start="459:13" pos:end="459:87">

            <expr_stmt pos:start="459:13" pos:end="459:87"><expr pos:start="459:13" pos:end="459:86"><name pos:start="459:13" pos:end="459:27"><name pos:start="459:13" pos:end="459:17">avctx</name><operator pos:start="459:18" pos:end="459:19">-&gt;</operator><name pos:start="459:20" pos:end="459:27">channels</name></name> <operator pos:start="459:29" pos:end="459:29">=</operator> <call pos:start="459:31" pos:end="459:86"><name pos:start="459:31" pos:end="459:63">av_get_channel_layout_nb_channels</name><argument_list pos:start="459:64" pos:end="459:86">(<argument pos:start="459:65" pos:end="459:85"><expr pos:start="459:65" pos:end="459:85"><name pos:start="459:65" pos:end="459:85"><name pos:start="459:65" pos:end="459:69">avctx</name><operator pos:start="459:70" pos:end="459:71">-&gt;</operator><name pos:start="459:72" pos:end="459:85">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="463:9" pos:end="479:9"><if pos:start="463:9" pos:end="479:9">if<condition pos:start="463:11" pos:end="467:9">(<expr pos:start="463:12" pos:end="465:45"><name pos:start="463:12" pos:end="463:28"><name pos:start="463:12" pos:end="463:16">avctx</name><operator pos:start="463:17" pos:end="463:18">-&gt;</operator><name pos:start="463:19" pos:end="463:28">codec_type</name></name> <operator pos:start="463:30" pos:end="463:31">==</operator> <name pos:start="463:33" pos:end="463:50">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="463:52" pos:end="463:53">&amp;&amp;</operator>

           <name pos:start="465:12" pos:end="465:26"><name pos:start="465:12" pos:end="465:16">avctx</name><operator pos:start="465:17" pos:end="465:18">-&gt;</operator><name pos:start="465:19" pos:end="465:26">codec_id</name></name> <operator pos:start="465:28" pos:end="465:29">!=</operator> <name pos:start="465:31" pos:end="465:45">AV_CODEC_ID_PNG</name></expr> <comment type="line" pos:start="465:47" pos:end="465:60">// For mplayer</comment>

        )</condition> <block pos:start="467:11" pos:end="479:9">{<block_content pos:start="469:13" pos:end="477:13">

            <if_stmt pos:start="469:13" pos:end="477:13"><if pos:start="469:13" pos:end="477:13">if <condition pos:start="469:16" pos:end="469:56">(<expr pos:start="469:17" pos:end="469:55"><name pos:start="469:17" pos:end="469:28"><name pos:start="469:17" pos:end="469:21">avctx</name><operator pos:start="469:22" pos:end="469:23">-&gt;</operator><name pos:start="469:24" pos:end="469:28">width</name></name> <operator pos:start="469:30" pos:end="469:31">&lt;=</operator> <literal type="number" pos:start="469:33" pos:end="469:33">0</literal> <operator pos:start="469:35" pos:end="469:36">||</operator> <name pos:start="469:38" pos:end="469:50"><name pos:start="469:38" pos:end="469:42">avctx</name><operator pos:start="469:43" pos:end="469:44">-&gt;</operator><name pos:start="469:45" pos:end="469:50">height</name></name> <operator pos:start="469:52" pos:end="469:53">&lt;=</operator> <literal type="number" pos:start="469:55" pos:end="469:55">0</literal></expr>)</condition> <block pos:start="469:58" pos:end="477:13">{<block_content pos:start="471:17" pos:end="475:34">

                <expr_stmt pos:start="471:17" pos:end="471:68"><expr pos:start="471:17" pos:end="471:67"><call pos:start="471:17" pos:end="471:67"><name pos:start="471:17" pos:end="471:22">av_log</name><argument_list pos:start="471:23" pos:end="471:67">(<argument pos:start="471:24" pos:end="471:28"><expr pos:start="471:24" pos:end="471:28"><name pos:start="471:24" pos:end="471:28">avctx</name></expr></argument>, <argument pos:start="471:31" pos:end="471:42"><expr pos:start="471:31" pos:end="471:42"><name pos:start="471:31" pos:end="471:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="471:45" pos:end="471:66"><expr pos:start="471:45" pos:end="471:66"><literal type="string" pos:start="471:45" pos:end="471:66">"dimensions not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="473:17" pos:end="473:38"><expr pos:start="473:17" pos:end="473:37"><name pos:start="473:17" pos:end="473:19">ret</name> <operator pos:start="473:21" pos:end="473:21">=</operator> <call pos:start="473:23" pos:end="473:37"><name pos:start="473:23" pos:end="473:29">AVERROR</name><argument_list pos:start="473:30" pos:end="473:37">(<argument pos:start="473:31" pos:end="473:36"><expr pos:start="473:31" pos:end="473:36"><name pos:start="473:31" pos:end="473:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="475:17" pos:end="475:34">goto <name pos:start="475:22" pos:end="475:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="481:9" pos:end="487:9"><if pos:start="481:9" pos:end="487:9">if <condition pos:start="481:12" pos:end="483:57">(   <expr pos:start="481:16" pos:end="483:56"><operator pos:start="481:16" pos:end="481:16">(</operator><name pos:start="481:17" pos:end="481:33"><name pos:start="481:17" pos:end="481:21">avctx</name><operator pos:start="481:22" pos:end="481:23">-&gt;</operator><name pos:start="481:24" pos:end="481:33">codec_type</name></name> <operator pos:start="481:35" pos:end="481:36">==</operator> <name pos:start="481:38" pos:end="481:55">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="481:57" pos:end="481:58">||</operator> <name pos:start="481:60" pos:end="481:76"><name pos:start="481:60" pos:end="481:64">avctx</name><operator pos:start="481:65" pos:end="481:66">-&gt;</operator><name pos:start="481:67" pos:end="481:76">codec_type</name></name> <operator pos:start="481:78" pos:end="481:79">==</operator> <name pos:start="481:81" pos:end="481:98">AVMEDIA_TYPE_AUDIO</name><operator pos:start="481:99" pos:end="481:99">)</operator>

            <operator pos:start="483:13" pos:end="483:14">&amp;&amp;</operator> <name pos:start="483:16" pos:end="483:30"><name pos:start="483:16" pos:end="483:20">avctx</name><operator pos:start="483:21" pos:end="483:22">-&gt;</operator><name pos:start="483:23" pos:end="483:30">bit_rate</name></name><operator pos:start="483:31" pos:end="483:31">&gt;</operator><literal type="number" pos:start="483:32" pos:end="483:32">0</literal> <operator pos:start="483:34" pos:end="483:35">&amp;&amp;</operator> <name pos:start="483:37" pos:end="483:51"><name pos:start="483:37" pos:end="483:41">avctx</name><operator pos:start="483:42" pos:end="483:43">-&gt;</operator><name pos:start="483:44" pos:end="483:51">bit_rate</name></name><operator pos:start="483:52" pos:end="483:52">&lt;</operator><literal type="number" pos:start="483:53" pos:end="483:56">1000</literal></expr>)</condition> <block pos:start="483:59" pos:end="487:9">{<block_content pos:start="485:13" pos:end="485:129">

            <expr_stmt pos:start="485:13" pos:end="485:129"><expr pos:start="485:13" pos:end="485:128"><call pos:start="485:13" pos:end="485:128"><name pos:start="485:13" pos:end="485:18">av_log</name><argument_list pos:start="485:19" pos:end="485:128">(<argument pos:start="485:20" pos:end="485:24"><expr pos:start="485:20" pos:end="485:24"><name pos:start="485:20" pos:end="485:24">avctx</name></expr></argument>, <argument pos:start="485:27" pos:end="485:40"><expr pos:start="485:27" pos:end="485:40"><name pos:start="485:27" pos:end="485:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="485:43" pos:end="485:93"><expr pos:start="485:43" pos:end="485:93"><literal type="string" pos:start="485:43" pos:end="485:93">"Bitrate %d is extremely low, maybe you mean %dk\n"</literal></expr></argument>, <argument pos:start="485:96" pos:end="485:110"><expr pos:start="485:96" pos:end="485:110"><name pos:start="485:96" pos:end="485:110"><name pos:start="485:96" pos:end="485:100">avctx</name><operator pos:start="485:101" pos:end="485:102">-&gt;</operator><name pos:start="485:103" pos:end="485:110">bit_rate</name></name></expr></argument>, <argument pos:start="485:113" pos:end="485:127"><expr pos:start="485:113" pos:end="485:127"><name pos:start="485:113" pos:end="485:127"><name pos:start="485:113" pos:end="485:117">avctx</name><operator pos:start="485:118" pos:end="485:119">-&gt;</operator><name pos:start="485:120" pos:end="485:127">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="491:9" pos:end="493:79"><if pos:start="491:9" pos:end="493:79">if <condition pos:start="491:12" pos:end="491:48">(<expr pos:start="491:13" pos:end="491:47"><operator pos:start="491:13" pos:end="491:13">!</operator><name pos:start="491:14" pos:end="491:47"><name pos:start="491:14" pos:end="491:18">avctx</name><operator pos:start="491:19" pos:end="491:20">-&gt;</operator><name pos:start="491:21" pos:end="491:47">rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo" pos:start="493:13" pos:end="493:79"><block_content pos:start="493:13" pos:end="493:79">

            <expr_stmt pos:start="493:13" pos:end="493:79"><expr pos:start="493:13" pos:end="493:78"><name pos:start="493:13" pos:end="493:46"><name pos:start="493:13" pos:end="493:17">avctx</name><operator pos:start="493:18" pos:end="493:19">-&gt;</operator><name pos:start="493:20" pos:end="493:46">rc_initial_buffer_occupancy</name></name> <operator pos:start="493:48" pos:end="493:48">=</operator> <name pos:start="493:50" pos:end="493:70"><name pos:start="493:50" pos:end="493:54">avctx</name><operator pos:start="493:55" pos:end="493:56">-&gt;</operator><name pos:start="493:57" pos:end="493:70">rc_buffer_size</name></name> <operator pos:start="493:72" pos:end="493:72">*</operator> <literal type="number" pos:start="493:74" pos:end="493:74">3</literal> <operator pos:start="493:76" pos:end="493:76">/</operator> <literal type="number" pos:start="493:78" pos:end="493:78">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="499:5" pos:end="501:45"><expr pos:start="499:5" pos:end="501:44"><name pos:start="499:5" pos:end="499:40"><name pos:start="499:5" pos:end="499:9">avctx</name><operator pos:start="499:10" pos:end="499:11">-&gt;</operator><name pos:start="499:12" pos:end="499:40">pts_correction_num_faulty_pts</name></name> <operator pos:start="499:42" pos:end="499:42">=</operator>

    <name pos:start="501:5" pos:end="501:40"><name pos:start="501:5" pos:end="501:9">avctx</name><operator pos:start="501:10" pos:end="501:11">-&gt;</operator><name pos:start="501:12" pos:end="501:40">pts_correction_num_faulty_dts</name></name> <operator pos:start="501:42" pos:end="501:42">=</operator> <literal type="number" pos:start="501:44" pos:end="501:44">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="505:47"><expr pos:start="503:5" pos:end="505:46"><name pos:start="503:5" pos:end="503:34"><name pos:start="503:5" pos:end="503:9">avctx</name><operator pos:start="503:10" pos:end="503:11">-&gt;</operator><name pos:start="503:12" pos:end="503:34">pts_correction_last_pts</name></name> <operator pos:start="503:36" pos:end="503:36">=</operator>

    <name pos:start="505:5" pos:end="505:34"><name pos:start="505:5" pos:end="505:9">avctx</name><operator pos:start="505:10" pos:end="505:11">-&gt;</operator><name pos:start="505:12" pos:end="505:34">pts_correction_last_dts</name></name> <operator pos:start="505:36" pos:end="505:36">=</operator> <name pos:start="505:38" pos:end="505:46">INT64_MIN</name></expr>;</expr_stmt>



    <if_stmt pos:start="509:5" pos:end="521:5"><if pos:start="509:5" pos:end="521:5">if <condition pos:start="509:8" pos:end="511:50">(   <expr pos:start="509:12" pos:end="511:49"><name pos:start="509:12" pos:end="509:29"><name pos:start="509:12" pos:end="509:16">avctx</name><operator pos:start="509:17" pos:end="509:18">-&gt;</operator><name pos:start="509:19" pos:end="509:23">codec</name><operator pos:start="509:24" pos:end="509:25">-&gt;</operator><name pos:start="509:26" pos:end="509:29">init</name></name> <operator pos:start="509:31" pos:end="509:32">&amp;&amp;</operator> <operator pos:start="509:34" pos:end="509:34">(</operator><operator pos:start="509:35" pos:end="509:35">!</operator><operator pos:start="509:36" pos:end="509:36">(</operator><name pos:start="509:37" pos:end="509:61"><name pos:start="509:37" pos:end="509:41">avctx</name><operator pos:start="509:42" pos:end="509:43">-&gt;</operator><name pos:start="509:44" pos:end="509:61">active_thread_type</name></name><operator pos:start="509:62" pos:end="509:62">&amp;</operator><name pos:start="509:63" pos:end="509:77">FF_THREAD_FRAME</name><operator pos:start="509:78" pos:end="509:78">)</operator>

        <operator pos:start="511:9" pos:end="511:10">||</operator> <name pos:start="511:12" pos:end="511:48"><name pos:start="511:12" pos:end="511:16">avctx</name><operator pos:start="511:17" pos:end="511:18">-&gt;</operator><name pos:start="511:19" pos:end="511:26">internal</name><operator pos:start="511:27" pos:end="511:28">-&gt;</operator><name pos:start="511:29" pos:end="511:48">frame_thread_encoder</name></name><operator pos:start="511:49" pos:end="511:49">)</operator></expr>)</condition> <block pos:start="511:52" pos:end="521:5">{<block_content pos:start="513:9" pos:end="519:9">

        <expr_stmt pos:start="513:9" pos:end="513:40"><expr pos:start="513:9" pos:end="513:39"><name pos:start="513:9" pos:end="513:11">ret</name> <operator pos:start="513:13" pos:end="513:13">=</operator> <call pos:start="513:15" pos:end="513:39"><name pos:start="513:15" pos:end="513:32"><name pos:start="513:15" pos:end="513:19">avctx</name><operator pos:start="513:20" pos:end="513:21">-&gt;</operator><name pos:start="513:22" pos:end="513:26">codec</name><operator pos:start="513:27" pos:end="513:28">-&gt;</operator><name pos:start="513:29" pos:end="513:32">init</name></name><argument_list pos:start="513:33" pos:end="513:39">(<argument pos:start="513:34" pos:end="513:38"><expr pos:start="513:34" pos:end="513:38"><name pos:start="513:34" pos:end="513:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="515:9" pos:end="519:9"><if pos:start="515:9" pos:end="519:9">if <condition pos:start="515:12" pos:end="515:20">(<expr pos:start="515:13" pos:end="515:19"><name pos:start="515:13" pos:end="515:15">ret</name> <operator pos:start="515:17" pos:end="515:17">&lt;</operator> <literal type="number" pos:start="515:19" pos:end="515:19">0</literal></expr>)</condition> <block pos:start="515:22" pos:end="519:9">{<block_content pos:start="517:13" pos:end="517:30">

            <goto pos:start="517:13" pos:end="517:30">goto <name pos:start="517:18" pos:end="517:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="525:5" pos:end="525:10"><expr pos:start="525:5" pos:end="525:9"><name pos:start="525:5" pos:end="525:7">ret</name><operator pos:start="525:8" pos:end="525:8">=</operator><literal type="number" pos:start="525:9" pos:end="525:9">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="529:5" pos:end="649:5"><if pos:start="529:5" pos:end="649:5">if <condition pos:start="529:8" pos:end="529:42">(<expr pos:start="529:9" pos:end="529:41"><call pos:start="529:9" pos:end="529:41"><name pos:start="529:9" pos:end="529:27">av_codec_is_decoder</name><argument_list pos:start="529:28" pos:end="529:41">(<argument pos:start="529:29" pos:end="529:40"><expr pos:start="529:29" pos:end="529:40"><name pos:start="529:29" pos:end="529:40"><name pos:start="529:29" pos:end="529:33">avctx</name><operator pos:start="529:34" pos:end="529:35">-&gt;</operator><name pos:start="529:36" pos:end="529:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="529:44" pos:end="649:5">{<block_content pos:start="531:9" pos:end="647:9">

        <if_stmt pos:start="531:9" pos:end="533:50"><if pos:start="531:9" pos:end="533:50">if <condition pos:start="531:12" pos:end="531:29">(<expr pos:start="531:13" pos:end="531:28"><operator pos:start="531:13" pos:end="531:13">!</operator><name pos:start="531:14" pos:end="531:28"><name pos:start="531:14" pos:end="531:18">avctx</name><operator pos:start="531:19" pos:end="531:20">-&gt;</operator><name pos:start="531:21" pos:end="531:28">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="533:13" pos:end="533:50"><block_content pos:start="533:13" pos:end="533:50">

            <expr_stmt pos:start="533:13" pos:end="533:50"><expr pos:start="533:13" pos:end="533:49"><name pos:start="533:13" pos:end="533:27"><name pos:start="533:13" pos:end="533:17">avctx</name><operator pos:start="533:18" pos:end="533:19">-&gt;</operator><name pos:start="533:20" pos:end="533:27">bit_rate</name></name> <operator pos:start="533:29" pos:end="533:29">=</operator> <call pos:start="533:31" pos:end="533:49"><name pos:start="533:31" pos:end="533:42">get_bit_rate</name><argument_list pos:start="533:43" pos:end="533:49">(<argument pos:start="533:44" pos:end="533:48"><expr pos:start="533:44" pos:end="533:48"><name pos:start="533:44" pos:end="533:48">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="535:9" pos:end="535:54">/* validate channel layout from the decoder */</comment>

        <if_stmt pos:start="537:9" pos:end="563:9"><if pos:start="537:9" pos:end="563:9">if <condition pos:start="537:12" pos:end="537:34">(<expr pos:start="537:13" pos:end="537:33"><name pos:start="537:13" pos:end="537:33"><name pos:start="537:13" pos:end="537:17">avctx</name><operator pos:start="537:18" pos:end="537:19">-&gt;</operator><name pos:start="537:20" pos:end="537:33">channel_layout</name></name></expr>)</condition> <block pos:start="537:36" pos:end="563:9">{<block_content pos:start="539:13" pos:end="561:13">

            <decl_stmt pos:start="539:13" pos:end="539:84"><decl pos:start="539:13" pos:end="539:83"><type pos:start="539:13" pos:end="539:15"><name pos:start="539:13" pos:end="539:15">int</name></type> <name pos:start="539:17" pos:end="539:24">channels</name> <init pos:start="539:26" pos:end="539:83">= <expr pos:start="539:28" pos:end="539:83"><call pos:start="539:28" pos:end="539:83"><name pos:start="539:28" pos:end="539:60">av_get_channel_layout_nb_channels</name><argument_list pos:start="539:61" pos:end="539:83">(<argument pos:start="539:62" pos:end="539:82"><expr pos:start="539:62" pos:end="539:82"><name pos:start="539:62" pos:end="539:82"><name pos:start="539:62" pos:end="539:66">avctx</name><operator pos:start="539:67" pos:end="539:68">-&gt;</operator><name pos:start="539:69" pos:end="539:82">channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="541:13" pos:end="561:13"><if pos:start="541:13" pos:end="543:43">if <condition pos:start="541:16" pos:end="541:33">(<expr pos:start="541:17" pos:end="541:32"><operator pos:start="541:17" pos:end="541:17">!</operator><name pos:start="541:18" pos:end="541:32"><name pos:start="541:18" pos:end="541:22">avctx</name><operator pos:start="541:23" pos:end="541:24">-&gt;</operator><name pos:start="541:25" pos:end="541:32">channels</name></name></expr>)</condition><block type="pseudo" pos:start="543:17" pos:end="543:43"><block_content pos:start="543:17" pos:end="543:43">

                <expr_stmt pos:start="543:17" pos:end="543:43"><expr pos:start="543:17" pos:end="543:42"><name pos:start="543:17" pos:end="543:31"><name pos:start="543:17" pos:end="543:21">avctx</name><operator pos:start="543:22" pos:end="543:23">-&gt;</operator><name pos:start="543:24" pos:end="543:31">channels</name></name> <operator pos:start="543:33" pos:end="543:33">=</operator> <name pos:start="543:35" pos:end="543:42">channels</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="545:13" pos:end="561:13">else if <condition pos:start="545:21" pos:end="545:49">(<expr pos:start="545:22" pos:end="545:48"><name pos:start="545:22" pos:end="545:29">channels</name> <operator pos:start="545:31" pos:end="545:32">!=</operator> <name pos:start="545:34" pos:end="545:48"><name pos:start="545:34" pos:end="545:38">avctx</name><operator pos:start="545:39" pos:end="545:40">-&gt;</operator><name pos:start="545:41" pos:end="545:48">channels</name></name></expr>)</condition> <block pos:start="545:51" pos:end="561:13">{<block_content pos:start="547:17" pos:end="559:42">

                <decl_stmt pos:start="547:17" pos:end="547:30"><decl pos:start="547:17" pos:end="547:29"><type pos:start="547:17" pos:end="547:20"><name pos:start="547:17" pos:end="547:20">char</name></type> <name pos:start="547:22" pos:end="547:29"><name pos:start="547:22" pos:end="547:24">buf</name><index pos:start="547:25" pos:end="547:29">[<expr pos:start="547:26" pos:end="547:28"><literal type="number" pos:start="547:26" pos:end="547:28">512</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="549:17" pos:end="549:90"><expr pos:start="549:17" pos:end="549:89"><call pos:start="549:17" pos:end="549:89"><name pos:start="549:17" pos:end="549:44">av_get_channel_layout_string</name><argument_list pos:start="549:45" pos:end="549:89">(<argument pos:start="549:46" pos:end="549:48"><expr pos:start="549:46" pos:end="549:48"><name pos:start="549:46" pos:end="549:48">buf</name></expr></argument>, <argument pos:start="549:51" pos:end="549:61"><expr pos:start="549:51" pos:end="549:61"><sizeof pos:start="549:51" pos:end="549:61">sizeof<argument_list pos:start="549:57" pos:end="549:61">(<argument pos:start="549:58" pos:end="549:60"><expr pos:start="549:58" pos:end="549:60"><name pos:start="549:58" pos:end="549:60">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="549:64" pos:end="549:65"><expr pos:start="549:64" pos:end="549:65"><operator pos:start="549:64" pos:end="549:64">-</operator><literal type="number" pos:start="549:65" pos:end="549:65">1</literal></expr></argument>, <argument pos:start="549:68" pos:end="549:88"><expr pos:start="549:68" pos:end="549:88"><name pos:start="549:68" pos:end="549:88"><name pos:start="549:68" pos:end="549:72">avctx</name><operator pos:start="549:73" pos:end="549:74">-&gt;</operator><name pos:start="549:75" pos:end="549:88">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="551:17" pos:end="557:55"><expr pos:start="551:17" pos:end="557:54"><call pos:start="551:17" pos:end="557:54"><name pos:start="551:17" pos:end="551:22">av_log</name><argument_list pos:start="551:23" pos:end="557:54">(<argument pos:start="551:24" pos:end="551:28"><expr pos:start="551:24" pos:end="551:28"><name pos:start="551:24" pos:end="551:28">avctx</name></expr></argument>, <argument pos:start="551:31" pos:end="551:44"><expr pos:start="551:31" pos:end="551:44"><name pos:start="551:31" pos:end="551:44">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="553:24" pos:end="555:60"><expr pos:start="553:24" pos:end="555:60"><literal type="string" pos:start="553:24" pos:end="553:110">"Channel layout '%s' with %d channels does not match specified number of channels %d: "</literal>

                       <literal type="string" pos:start="555:24" pos:end="555:60">"ignoring specified channel layout\n"</literal></expr></argument>,

                       <argument pos:start="557:24" pos:end="557:26"><expr pos:start="557:24" pos:end="557:26"><name pos:start="557:24" pos:end="557:26">buf</name></expr></argument>, <argument pos:start="557:29" pos:end="557:36"><expr pos:start="557:29" pos:end="557:36"><name pos:start="557:29" pos:end="557:36">channels</name></expr></argument>, <argument pos:start="557:39" pos:end="557:53"><expr pos:start="557:39" pos:end="557:53"><name pos:start="557:39" pos:end="557:53"><name pos:start="557:39" pos:end="557:43">avctx</name><operator pos:start="557:44" pos:end="557:45">-&gt;</operator><name pos:start="557:46" pos:end="557:53">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="559:17" pos:end="559:42"><expr pos:start="559:17" pos:end="559:41"><name pos:start="559:17" pos:end="559:37"><name pos:start="559:17" pos:end="559:21">avctx</name><operator pos:start="559:22" pos:end="559:23">-&gt;</operator><name pos:start="559:24" pos:end="559:37">channel_layout</name></name> <operator pos:start="559:39" pos:end="559:39">=</operator> <literal type="number" pos:start="559:41" pos:end="559:41">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="565:9" pos:end="573:9"><if pos:start="565:9" pos:end="573:9">if <condition pos:start="565:12" pos:end="567:50">(<expr pos:start="565:13" pos:end="567:49"><name pos:start="565:13" pos:end="565:27"><name pos:start="565:13" pos:end="565:17">avctx</name><operator pos:start="565:18" pos:end="565:19">-&gt;</operator><name pos:start="565:20" pos:end="565:27">channels</name></name> <operator pos:start="565:29" pos:end="565:30">&amp;&amp;</operator> <name pos:start="565:32" pos:end="565:46"><name pos:start="565:32" pos:end="565:36">avctx</name><operator pos:start="565:37" pos:end="565:38">-&gt;</operator><name pos:start="565:39" pos:end="565:46">channels</name></name> <operator pos:start="565:48" pos:end="565:48">&lt;</operator> <literal type="number" pos:start="565:50" pos:end="565:50">0</literal> <operator pos:start="565:52" pos:end="565:53">||</operator>

            <name pos:start="567:13" pos:end="567:27"><name pos:start="567:13" pos:end="567:17">avctx</name><operator pos:start="567:18" pos:end="567:19">-&gt;</operator><name pos:start="567:20" pos:end="567:27">channels</name></name> <operator pos:start="567:29" pos:end="567:29">&gt;</operator> <name pos:start="567:31" pos:end="567:49">FF_SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="567:52" pos:end="573:9">{<block_content pos:start="569:13" pos:end="571:30">

            <expr_stmt pos:start="569:13" pos:end="569:34"><expr pos:start="569:13" pos:end="569:33"><name pos:start="569:13" pos:end="569:15">ret</name> <operator pos:start="569:17" pos:end="569:17">=</operator> <call pos:start="569:19" pos:end="569:33"><name pos:start="569:19" pos:end="569:25">AVERROR</name><argument_list pos:start="569:26" pos:end="569:33">(<argument pos:start="569:27" pos:end="569:32"><expr pos:start="569:27" pos:end="569:32"><name pos:start="569:27" pos:end="569:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="571:13" pos:end="571:30">goto <name pos:start="571:18" pos:end="571:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="575:9" pos:end="647:9"><if pos:start="575:9" pos:end="647:9">if <condition pos:start="575:12" pos:end="575:31">(<expr pos:start="575:13" pos:end="575:30"><name pos:start="575:13" pos:end="575:30"><name pos:start="575:13" pos:end="575:17">avctx</name><operator pos:start="575:18" pos:end="575:19">-&gt;</operator><name pos:start="575:20" pos:end="575:30">sub_charenc</name></name></expr>)</condition> <block pos:start="575:33" pos:end="647:9">{<block_content pos:start="577:13" pos:end="645:13">

            <if_stmt pos:start="577:13" pos:end="645:13"><if pos:start="577:13" pos:end="587:13">if <condition pos:start="577:16" pos:end="577:59">(<expr pos:start="577:17" pos:end="577:58"><name pos:start="577:17" pos:end="577:33"><name pos:start="577:17" pos:end="577:21">avctx</name><operator pos:start="577:22" pos:end="577:23">-&gt;</operator><name pos:start="577:24" pos:end="577:33">codec_type</name></name> <operator pos:start="577:35" pos:end="577:36">!=</operator> <name pos:start="577:38" pos:end="577:58">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block pos:start="577:61" pos:end="587:13">{<block_content pos:start="579:17" pos:end="585:34">

                <expr_stmt pos:start="579:17" pos:end="581:60"><expr pos:start="579:17" pos:end="581:59"><call pos:start="579:17" pos:end="581:59"><name pos:start="579:17" pos:end="579:22">av_log</name><argument_list pos:start="579:23" pos:end="581:59">(<argument pos:start="579:24" pos:end="579:28"><expr pos:start="579:24" pos:end="579:28"><name pos:start="579:24" pos:end="579:28">avctx</name></expr></argument>, <argument pos:start="579:31" pos:end="579:42"><expr pos:start="579:31" pos:end="579:42"><name pos:start="579:31" pos:end="579:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="579:45" pos:end="581:58"><expr pos:start="579:45" pos:end="581:58"><literal type="string" pos:start="579:45" pos:end="579:73">"Character encoding is only "</literal>

                       <literal type="string" pos:start="581:24" pos:end="581:58">"supported with subtitles codecs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="583:17" pos:end="583:38"><expr pos:start="583:17" pos:end="583:37"><name pos:start="583:17" pos:end="583:19">ret</name> <operator pos:start="583:21" pos:end="583:21">=</operator> <call pos:start="583:23" pos:end="583:37"><name pos:start="583:23" pos:end="583:29">AVERROR</name><argument_list pos:start="583:30" pos:end="583:37">(<argument pos:start="583:31" pos:end="583:36"><expr pos:start="583:31" pos:end="583:36"><name pos:start="583:31" pos:end="583:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="585:17" pos:end="585:34">goto <name pos:start="585:22" pos:end="585:33">free_and_end</name>;</goto>

            </block_content>}</block></if> <if type="elseif" pos:start="587:15" pos:end="597:13">else if <condition pos:start="587:23" pos:end="587:81">(<expr pos:start="587:24" pos:end="587:80"><name pos:start="587:24" pos:end="587:53"><name pos:start="587:24" pos:end="587:28">avctx</name><operator pos:start="587:29" pos:end="587:30">-&gt;</operator><name pos:start="587:31" pos:end="587:46">codec_descriptor</name><operator pos:start="587:47" pos:end="587:48">-&gt;</operator><name pos:start="587:49" pos:end="587:53">props</name></name> <operator pos:start="587:55" pos:end="587:55">&amp;</operator> <name pos:start="587:57" pos:end="587:80">AV_CODEC_PROP_BITMAP_SUB</name></expr>)</condition> <block pos:start="587:83" pos:end="597:13">{<block_content pos:start="589:17" pos:end="595:73">

                <expr_stmt pos:start="589:17" pos:end="593:54"><expr pos:start="589:17" pos:end="593:53"><call pos:start="589:17" pos:end="593:53"><name pos:start="589:17" pos:end="589:22">av_log</name><argument_list pos:start="589:23" pos:end="593:53">(<argument pos:start="589:24" pos:end="589:28"><expr pos:start="589:24" pos:end="589:28"><name pos:start="589:24" pos:end="589:28">avctx</name></expr></argument>, <argument pos:start="589:31" pos:end="589:44"><expr pos:start="589:31" pos:end="589:44"><name pos:start="589:31" pos:end="589:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="589:47" pos:end="591:71"><expr pos:start="589:47" pos:end="591:71"><literal type="string" pos:start="589:47" pos:end="589:76">"Codec '%s' is bitmap-based, "</literal>

                       <literal type="string" pos:start="591:24" pos:end="591:71">"subtitles character encoding will be ignored\n"</literal></expr></argument>,

                       <argument pos:start="593:24" pos:end="593:52"><expr pos:start="593:24" pos:end="593:52"><name pos:start="593:24" pos:end="593:52"><name pos:start="593:24" pos:end="593:28">avctx</name><operator pos:start="593:29" pos:end="593:30">-&gt;</operator><name pos:start="593:31" pos:end="593:46">codec_descriptor</name><operator pos:start="593:47" pos:end="593:48">-&gt;</operator><name pos:start="593:49" pos:end="593:52">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="595:17" pos:end="595:73"><expr pos:start="595:17" pos:end="595:72"><name pos:start="595:17" pos:end="595:39"><name pos:start="595:17" pos:end="595:21">avctx</name><operator pos:start="595:22" pos:end="595:23">-&gt;</operator><name pos:start="595:24" pos:end="595:39">sub_charenc_mode</name></name> <operator pos:start="595:41" pos:end="595:41">=</operator> <name pos:start="595:43" pos:end="595:72">FF_SUB_CHARENC_MODE_DO_NOTHING</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="597:15" pos:end="645:13">else <block pos:start="597:20" pos:end="645:13">{<block_content pos:start="603:17" pos:end="643:17">

                <comment type="block" pos:start="599:17" pos:end="601:41">/* input character encoding is set for a text based subtitle

                 * codec at this point */</comment>

                <if_stmt pos:start="603:17" pos:end="605:78"><if pos:start="603:17" pos:end="605:78">if <condition pos:start="603:20" pos:end="603:77">(<expr pos:start="603:21" pos:end="603:76"><name pos:start="603:21" pos:end="603:43"><name pos:start="603:21" pos:end="603:25">avctx</name><operator pos:start="603:26" pos:end="603:27">-&gt;</operator><name pos:start="603:28" pos:end="603:43">sub_charenc_mode</name></name> <operator pos:start="603:45" pos:end="603:46">==</operator> <name pos:start="603:48" pos:end="603:76">FF_SUB_CHARENC_MODE_AUTOMATIC</name></expr>)</condition><block type="pseudo" pos:start="605:21" pos:end="605:78"><block_content pos:start="605:21" pos:end="605:78">

                    <expr_stmt pos:start="605:21" pos:end="605:78"><expr pos:start="605:21" pos:end="605:77"><name pos:start="605:21" pos:end="605:43"><name pos:start="605:21" pos:end="605:25">avctx</name><operator pos:start="605:26" pos:end="605:27">-&gt;</operator><name pos:start="605:28" pos:end="605:43">sub_charenc_mode</name></name> <operator pos:start="605:45" pos:end="605:45">=</operator> <name pos:start="605:47" pos:end="605:77">FF_SUB_CHARENC_MODE_PRE_DECODER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="609:17" pos:end="643:17"><if pos:start="609:17" pos:end="643:17">if <condition pos:start="609:20" pos:end="609:79">(<expr pos:start="609:21" pos:end="609:78"><name pos:start="609:21" pos:end="609:43"><name pos:start="609:21" pos:end="609:25">avctx</name><operator pos:start="609:26" pos:end="609:27">-&gt;</operator><name pos:start="609:28" pos:end="609:43">sub_charenc_mode</name></name> <operator pos:start="609:45" pos:end="609:46">==</operator> <name pos:start="609:48" pos:end="609:78">FF_SUB_CHARENC_MODE_PRE_DECODER</name></expr>)</condition> <block pos:start="609:81" pos:end="643:17">{<block_content pos:start="613:21" pos:end="642:0">

<cpp:if pos:start="611:1" pos:end="611:16">#<cpp:directive pos:start="611:2" pos:end="611:3">if</cpp:directive> <expr pos:start="611:5" pos:end="611:16"><name pos:start="611:5" pos:end="611:16">CONFIG_ICONV</name></expr></cpp:if>

                    <decl_stmt pos:start="613:21" pos:end="613:73"><decl pos:start="613:21" pos:end="613:72"><type pos:start="613:21" pos:end="613:27"><name pos:start="613:21" pos:end="613:27">iconv_t</name></type> <name pos:start="613:29" pos:end="613:30">cd</name> <init pos:start="613:32" pos:end="613:72">= <expr pos:start="613:34" pos:end="613:72"><call pos:start="613:34" pos:end="613:72"><name pos:start="613:34" pos:end="613:43">iconv_open</name><argument_list pos:start="613:44" pos:end="613:72">(<argument pos:start="613:45" pos:end="613:51"><expr pos:start="613:45" pos:end="613:51"><literal type="string" pos:start="613:45" pos:end="613:51">"UTF-8"</literal></expr></argument>, <argument pos:start="613:54" pos:end="613:71"><expr pos:start="613:54" pos:end="613:71"><name pos:start="613:54" pos:end="613:71"><name pos:start="613:54" pos:end="613:58">avctx</name><operator pos:start="613:59" pos:end="613:60">-&gt;</operator><name pos:start="613:61" pos:end="613:71">sub_charenc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="615:21" pos:end="625:21"><if pos:start="615:21" pos:end="625:21">if <condition pos:start="615:24" pos:end="615:42">(<expr pos:start="615:25" pos:end="615:41"><name pos:start="615:25" pos:end="615:26">cd</name> <operator pos:start="615:28" pos:end="615:29">==</operator> <operator pos:start="615:31" pos:end="615:31">(</operator><name pos:start="615:32" pos:end="615:38">iconv_t</name><operator pos:start="615:39" pos:end="615:39">)</operator><operator pos:start="615:40" pos:end="615:40">-</operator><literal type="number" pos:start="615:41" pos:end="615:41">1</literal></expr>)</condition> <block pos:start="615:44" pos:end="625:21">{<block_content pos:start="617:25" pos:end="623:42">

                        <expr_stmt pos:start="617:25" pos:end="619:93"><expr pos:start="617:25" pos:end="619:92"><call pos:start="617:25" pos:end="619:92"><name pos:start="617:25" pos:end="617:30">av_log</name><argument_list pos:start="617:31" pos:end="619:92">(<argument pos:start="617:32" pos:end="617:36"><expr pos:start="617:32" pos:end="617:36"><name pos:start="617:32" pos:end="617:36">avctx</name></expr></argument>, <argument pos:start="617:39" pos:end="617:50"><expr pos:start="617:39" pos:end="617:50"><name pos:start="617:39" pos:end="617:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="617:53" pos:end="619:71"><expr pos:start="617:53" pos:end="619:71"><literal type="string" pos:start="617:53" pos:end="617:83">"Unable to open iconv context "</literal>

                               <literal type="string" pos:start="619:32" pos:end="619:71">"with input character encoding \"%s\"\n"</literal></expr></argument>, <argument pos:start="619:74" pos:end="619:91"><expr pos:start="619:74" pos:end="619:91"><name pos:start="619:74" pos:end="619:91"><name pos:start="619:74" pos:end="619:78">avctx</name><operator pos:start="619:79" pos:end="619:80">-&gt;</operator><name pos:start="619:81" pos:end="619:91">sub_charenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="621:25" pos:end="621:45"><expr pos:start="621:25" pos:end="621:44"><name pos:start="621:25" pos:end="621:27">ret</name> <operator pos:start="621:29" pos:end="621:29">=</operator> <call pos:start="621:31" pos:end="621:44"><name pos:start="621:31" pos:end="621:37">AVERROR</name><argument_list pos:start="621:38" pos:end="621:44">(<argument pos:start="621:39" pos:end="621:43"><expr pos:start="621:39" pos:end="621:43"><name pos:start="621:39" pos:end="621:43">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="623:25" pos:end="623:42">goto <name pos:start="623:30" pos:end="623:41">free_and_end</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="627:21" pos:end="630:0"><expr pos:start="627:21" pos:end="627:35"><call pos:start="627:21" pos:end="627:35"><name pos:start="627:21" pos:end="627:31">iconv_close</name><argument_list pos:start="627:32" pos:end="627:35">(<argument pos:start="627:33" pos:end="627:34"><expr pos:start="627:33" pos:end="627:34"><name pos:start="627:33" pos:end="627:34">cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="629:1" pos:end="629:5">#<cpp:directive pos:start="629:2" pos:end="629:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="631:21" pos:end="635:47"><expr pos:start="631:21" pos:end="635:46"><call pos:start="631:21" pos:end="635:46"><name pos:start="631:21" pos:end="631:26">av_log</name><argument_list pos:start="631:27" pos:end="635:46">(<argument pos:start="631:28" pos:end="631:32"><expr pos:start="631:28" pos:end="631:32"><name pos:start="631:28" pos:end="631:32">avctx</name></expr></argument>, <argument pos:start="631:35" pos:end="631:46"><expr pos:start="631:35" pos:end="631:46"><name pos:start="631:35" pos:end="631:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="631:49" pos:end="635:45"><expr pos:start="631:49" pos:end="635:45"><literal type="string" pos:start="631:49" pos:end="631:79">"Character encoding subtitles "</literal>

                           <literal type="string" pos:start="633:28" pos:end="633:84">"conversion needs a libavcodec built with iconv support "</literal>

                           <literal type="string" pos:start="635:28" pos:end="635:45">"for this codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="637:21" pos:end="637:42"><expr pos:start="637:21" pos:end="637:41"><name pos:start="637:21" pos:end="637:23">ret</name> <operator pos:start="637:25" pos:end="637:25">=</operator> <call pos:start="637:27" pos:end="637:41"><name pos:start="637:27" pos:end="637:33">AVERROR</name><argument_list pos:start="637:34" pos:end="637:41">(<argument pos:start="637:35" pos:end="637:40"><expr pos:start="637:35" pos:end="637:40"><name pos:start="637:35" pos:end="637:40">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="639:21" pos:end="642:0">goto <name pos:start="639:26" pos:end="639:37">free_and_end</name>;</goto>

<cpp:endif pos:start="641:1" pos:end="641:6">#<cpp:directive pos:start="641:2" pos:end="641:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="651:1" pos:end="651:4"><name pos:start="651:1" pos:end="651:3">end</name>:</label>

    <expr_stmt pos:start="653:5" pos:end="653:24"><expr pos:start="653:5" pos:end="653:23"><call pos:start="653:5" pos:end="653:23"><name pos:start="653:5" pos:end="653:21">ff_unlock_avcodec</name><argument_list pos:start="653:22" pos:end="653:23">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="655:5" pos:end="661:5"><if pos:start="655:5" pos:end="661:5">if <condition pos:start="655:8" pos:end="655:16">(<expr pos:start="655:9" pos:end="655:15"><name pos:start="655:9" pos:end="655:15">options</name></expr>)</condition> <block pos:start="655:18" pos:end="661:5">{<block_content pos:start="657:9" pos:end="659:23">

        <expr_stmt pos:start="657:9" pos:end="657:30"><expr pos:start="657:9" pos:end="657:29"><call pos:start="657:9" pos:end="657:29"><name pos:start="657:9" pos:end="657:20">av_dict_free</name><argument_list pos:start="657:21" pos:end="657:29">(<argument pos:start="657:22" pos:end="657:28"><expr pos:start="657:22" pos:end="657:28"><name pos:start="657:22" pos:end="657:28">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="659:9" pos:end="659:23"><expr pos:start="659:9" pos:end="659:22"><operator pos:start="659:9" pos:end="659:9">*</operator><name pos:start="659:10" pos:end="659:16">options</name> <operator pos:start="659:18" pos:end="659:18">=</operator> <name pos:start="659:20" pos:end="659:22">tmp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="665:5" pos:end="665:15">return <expr pos:start="665:12" pos:end="665:14"><name pos:start="665:12" pos:end="665:14">ret</name></expr>;</return>

<label pos:start="667:1" pos:end="667:13"><name pos:start="667:1" pos:end="667:12">free_and_end</name>:</label>

    <expr_stmt pos:start="669:5" pos:end="669:23"><expr pos:start="669:5" pos:end="669:22"><call pos:start="669:5" pos:end="669:22"><name pos:start="669:5" pos:end="669:16">av_dict_free</name><argument_list pos:start="669:17" pos:end="669:22">(<argument pos:start="669:18" pos:end="669:21"><expr pos:start="669:18" pos:end="669:21"><operator pos:start="669:18" pos:end="669:18">&amp;</operator><name pos:start="669:19" pos:end="669:21">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="671:5" pos:end="671:32"><expr pos:start="671:5" pos:end="671:31"><call pos:start="671:5" pos:end="671:31"><name pos:start="671:5" pos:end="671:12">av_freep</name><argument_list pos:start="671:13" pos:end="671:31">(<argument pos:start="671:14" pos:end="671:30"><expr pos:start="671:14" pos:end="671:30"><operator pos:start="671:14" pos:end="671:14">&amp;</operator><name pos:start="671:15" pos:end="671:30"><name pos:start="671:15" pos:end="671:19">avctx</name><operator pos:start="671:20" pos:end="671:21">-&gt;</operator><name pos:start="671:22" pos:end="671:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="673:5" pos:end="675:41"><if pos:start="673:5" pos:end="675:41">if <condition pos:start="673:8" pos:end="673:24">(<expr pos:start="673:9" pos:end="673:23"><name pos:start="673:9" pos:end="673:23"><name pos:start="673:9" pos:end="673:13">avctx</name><operator pos:start="673:14" pos:end="673:15">-&gt;</operator><name pos:start="673:16" pos:end="673:23">internal</name></name></expr>)</condition><block type="pseudo" pos:start="675:9" pos:end="675:41"><block_content pos:start="675:9" pos:end="675:41">

        <expr_stmt pos:start="675:9" pos:end="675:41"><expr pos:start="675:9" pos:end="675:40"><call pos:start="675:9" pos:end="675:40"><name pos:start="675:9" pos:end="675:16">av_freep</name><argument_list pos:start="675:17" pos:end="675:40">(<argument pos:start="675:18" pos:end="675:39"><expr pos:start="675:18" pos:end="675:39"><operator pos:start="675:18" pos:end="675:18">&amp;</operator><name pos:start="675:19" pos:end="675:39"><name pos:start="675:19" pos:end="675:23">avctx</name><operator pos:start="675:24" pos:end="675:25">-&gt;</operator><name pos:start="675:26" pos:end="675:33">internal</name><operator pos:start="675:34" pos:end="675:35">-&gt;</operator><name pos:start="675:36" pos:end="675:39">pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="677:5" pos:end="677:31"><expr pos:start="677:5" pos:end="677:30"><call pos:start="677:5" pos:end="677:30"><name pos:start="677:5" pos:end="677:12">av_freep</name><argument_list pos:start="677:13" pos:end="677:30">(<argument pos:start="677:14" pos:end="677:29"><expr pos:start="677:14" pos:end="677:29"><operator pos:start="677:14" pos:end="677:14">&amp;</operator><name pos:start="677:15" pos:end="677:29"><name pos:start="677:15" pos:end="677:19">avctx</name><operator pos:start="677:20" pos:end="677:21">-&gt;</operator><name pos:start="677:22" pos:end="677:29">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="679:5" pos:end="679:24"><expr pos:start="679:5" pos:end="679:23"><name pos:start="679:5" pos:end="679:16"><name pos:start="679:5" pos:end="679:9">avctx</name><operator pos:start="679:10" pos:end="679:11">-&gt;</operator><name pos:start="679:12" pos:end="679:16">codec</name></name> <operator pos:start="679:18" pos:end="679:18">=</operator> <name pos:start="679:20" pos:end="679:23">NULL</name></expr>;</expr_stmt>

    <goto pos:start="681:5" pos:end="681:13">goto <name pos:start="681:10" pos:end="681:12">end</name>;</goto>

</block_content>}</block></function>
</unit>
