<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17205.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">svq1_decode_block_intra</name><parameter_list pos:start="1:35" pos:end="3:45">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:48">GetBitContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">bitbuf</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:73"><decl pos:start="1:59" pos:end="1:73"><type pos:start="1:59" pos:end="1:73"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:73">pixels</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">pitch</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:13">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:22">bit_cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21"><name pos:start="9:14" pos:end="9:17">list</name><index pos:start="9:18" pos:end="9:21">[<expr pos:start="9:19" pos:end="9:20"><literal type="number" pos:start="9:19" pos:end="9:20">63</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint32_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:28">codebook</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:15">entries</name><index pos:start="15:16" pos:end="15:18">[<expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">m</name></decl>, <decl pos:start="17:18" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:18">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">mean</name></decl>, <decl pos:start="19:15" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:15" pos:end="19:20">stages</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:14">x</name></decl>, <decl pos:start="21:17" pos:end="21:17"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:17" pos:end="21:17">y</name></decl>, <decl pos:start="21:20" pos:end="21:24"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:20" pos:end="21:24">width</name></decl>, <decl pos:start="21:27" pos:end="21:32"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:27" pos:end="21:32">height</name></decl>, <decl pos:start="21:35" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:35" pos:end="21:39">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:15">n1</name></decl>, <decl pos:start="23:18" pos:end="23:19"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:18" pos:end="23:19">n2</name></decl>, <decl pos:start="23:22" pos:end="23:23"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:22" pos:end="23:23">n3</name></decl>, <decl pos:start="23:26" pos:end="23:27"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:26" pos:end="23:27">n4</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:65">/* initialize list for breadth first processing of vectors */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:8">list</name><index pos:start="29:9" pos:end="29:11">[<expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">0</literal></expr>]</index></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:20">pixels</name></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:36">/* recursively process vector */</comment>

    <for pos:start="35:5" pos:end="121:5">for <control pos:start="35:9" pos:end="35:52">(<init pos:start="35:10" pos:end="35:40"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr><operator pos:start="35:15" pos:end="35:15">,</operator> <expr pos:start="35:17" pos:end="35:21"><name pos:start="35:17" pos:end="35:17">m</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr><operator pos:start="35:22" pos:end="35:22">,</operator> <expr pos:start="35:24" pos:end="35:28"><name pos:start="35:24" pos:end="35:24">n</name> <operator pos:start="35:26" pos:end="35:26">=</operator> <literal type="number" pos:start="35:28" pos:end="35:28">1</literal></expr><operator pos:start="35:29" pos:end="35:29">,</operator> <expr pos:start="35:31" pos:end="35:39"><name pos:start="35:31" pos:end="35:35">level</name> <operator pos:start="35:37" pos:end="35:37">=</operator> <literal type="number" pos:start="35:39" pos:end="35:39">5</literal></expr>;</init> <condition pos:start="35:42" pos:end="35:47"><expr pos:start="35:42" pos:end="35:46"><name pos:start="35:42" pos:end="35:42">i</name> <operator pos:start="35:44" pos:end="35:44">&lt;</operator> <name pos:start="35:46" pos:end="35:46">n</name></expr>;</condition> <incr pos:start="35:49" pos:end="35:51"><expr pos:start="35:49" pos:end="35:51"><name pos:start="35:49" pos:end="35:49">i</name><operator pos:start="35:50" pos:end="35:51">++</operator></expr></incr>)</control> <block pos:start="35:54" pos:end="121:5">{<block_content pos:start="37:9" pos:end="119:9">

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><call pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:27">SVQ1_PROCESS_VECTOR</name><argument_list pos:start="37:28" pos:end="37:29">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:49">/* destination address and vector size */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:11">dst</name>    <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">(</operator><name pos:start="43:19" pos:end="43:26">uint32_t</name> <operator pos:start="43:28" pos:end="43:28">*</operator><operator pos:start="43:29" pos:end="43:29">)</operator><name pos:start="43:30" pos:end="43:36"><name pos:start="43:30" pos:end="43:33">list</name><index pos:start="43:34" pos:end="43:36">[<expr pos:start="43:35" pos:end="43:35"><name pos:start="43:35" pos:end="43:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:13">width</name>  <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">1</literal> <operator pos:start="45:20" pos:end="45:21">&lt;&lt;</operator> <operator pos:start="45:23" pos:end="45:23">(</operator><operator pos:start="45:24" pos:end="45:24">(</operator><literal type="number" pos:start="45:25" pos:end="45:27">4</literal> <operator pos:start="45:27" pos:end="45:27">+</operator> <name pos:start="45:29" pos:end="45:33">level</name><operator pos:start="45:34" pos:end="45:34">)</operator> <operator pos:start="45:36" pos:end="45:36">/</operator> <literal type="number" pos:start="45:38" pos:end="45:38">2</literal><operator pos:start="45:39" pos:end="45:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:14">height</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">1</literal> <operator pos:start="47:20" pos:end="47:21">&lt;&lt;</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><operator pos:start="47:24" pos:end="47:24">(</operator><literal type="number" pos:start="47:25" pos:end="47:27">3</literal> <operator pos:start="47:27" pos:end="47:27">+</operator> <name pos:start="47:29" pos:end="47:33">level</name><operator pos:start="47:34" pos:end="47:34">)</operator> <operator pos:start="47:36" pos:end="47:36">/</operator> <literal type="number" pos:start="47:38" pos:end="47:38">2</literal><operator pos:start="47:39" pos:end="47:39">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:69">/* get number of stages (-1 skips vector, 0 for mean only) */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:80"><expr pos:start="53:9" pos:end="53:79"><name pos:start="53:9" pos:end="53:14">stages</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:75"><name pos:start="53:18" pos:end="53:25">get_vlc2</name><argument_list pos:start="53:26" pos:end="53:75">(<argument pos:start="53:27" pos:end="53:32"><expr pos:start="53:27" pos:end="53:32"><name pos:start="53:27" pos:end="53:32">bitbuf</name></expr></argument>, <argument pos:start="53:35" pos:end="53:68"><expr pos:start="53:35" pos:end="53:68"><name pos:start="53:35" pos:end="53:62"><name pos:start="53:35" pos:end="53:55">svq1_intra_multistage</name><index pos:start="53:56" pos:end="53:62">[<expr pos:start="53:57" pos:end="53:61"><name pos:start="53:57" pos:end="53:61">level</name></expr>]</index></name><operator pos:start="53:63" pos:end="53:63">.</operator><name pos:start="53:64" pos:end="53:68">table</name></expr></argument>, <argument pos:start="53:71" pos:end="53:71"><expr pos:start="53:71" pos:end="53:71"><literal type="number" pos:start="53:71" pos:end="53:71">3</literal></expr></argument>, <argument pos:start="53:74" pos:end="53:74"><expr pos:start="53:74" pos:end="53:74"><literal type="number" pos:start="53:74" pos:end="53:74">3</literal></expr></argument>)</argument_list></call> <operator pos:start="53:77" pos:end="53:77">-</operator> <literal type="number" pos:start="53:79" pos:end="53:79">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:25">(<expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:18">stages</name> <operator pos:start="57:20" pos:end="57:21">==</operator> <operator pos:start="57:23" pos:end="57:23">-</operator><literal type="number" pos:start="57:24" pos:end="57:24">1</literal></expr>)</condition> <block pos:start="57:27" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:21">

            <for pos:start="59:13" pos:end="61:56">for <control pos:start="59:17" pos:end="59:40">(<init pos:start="59:18" pos:end="59:23"><expr pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:18">y</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</init> <condition pos:start="59:25" pos:end="59:35"><expr pos:start="59:25" pos:end="59:34"><name pos:start="59:25" pos:end="59:25">y</name> <operator pos:start="59:27" pos:end="59:27">&lt;</operator> <name pos:start="59:29" pos:end="59:34">height</name></expr>;</condition> <incr pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:37">y</name><operator pos:start="59:38" pos:end="59:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:17" pos:end="61:56"><block_content pos:start="61:17" pos:end="61:56">

                <expr_stmt pos:start="61:17" pos:end="61:56"><expr pos:start="61:17" pos:end="61:55"><call pos:start="61:17" pos:end="61:55"><name pos:start="61:17" pos:end="61:22">memset</name><argument_list pos:start="61:23" pos:end="61:55">(<argument pos:start="61:24" pos:end="61:44"><expr pos:start="61:24" pos:end="61:44"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:44"><name pos:start="61:25" pos:end="61:27">dst</name><index pos:start="61:28" pos:end="61:44">[<expr pos:start="61:29" pos:end="61:43"><name pos:start="61:29" pos:end="61:29">y</name> <operator pos:start="61:31" pos:end="61:31">*</operator> <operator pos:start="61:33" pos:end="61:33">(</operator><name pos:start="61:34" pos:end="61:38">pitch</name> <operator pos:start="61:40" pos:end="61:40">/</operator> <literal type="number" pos:start="61:42" pos:end="61:42">4</literal><operator pos:start="61:43" pos:end="61:43">)</operator></expr>]</index></name></expr></argument>, <argument pos:start="61:47" pos:end="61:47"><expr pos:start="61:47" pos:end="61:47"><literal type="number" pos:start="61:47" pos:end="61:47">0</literal></expr></argument>, <argument pos:start="61:50" pos:end="61:54"><expr pos:start="61:50" pos:end="61:54"><name pos:start="61:50" pos:end="61:54">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <continue pos:start="63:13" pos:end="63:21">continue;</continue>   <comment type="block" pos:start="63:25" pos:end="63:41">/* skip vector */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:37">(<expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:18">stages</name> <operator pos:start="69:20" pos:end="69:20">&gt;</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal> <operator pos:start="69:24" pos:end="69:25">&amp;&amp;</operator> <name pos:start="69:27" pos:end="69:31">level</name> <operator pos:start="69:33" pos:end="69:34">&gt;=</operator> <literal type="number" pos:start="69:36" pos:end="69:36">4</literal></expr>)</condition> <block pos:start="69:39" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:39">

            <expr_stmt pos:start="71:13" pos:end="75:35"><expr pos:start="71:13" pos:end="75:34"><call pos:start="71:13" pos:end="75:34"><name pos:start="71:13" pos:end="71:19">av_dlog</name><argument_list pos:start="71:20" pos:end="75:34">(<argument pos:start="71:21" pos:end="71:24"><expr pos:start="71:21" pos:end="71:24"><name pos:start="71:21" pos:end="71:24">NULL</name></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:91"><expr pos:start="73:21" pos:end="73:91"><literal type="string" pos:start="73:21" pos:end="73:91">"Error (svq1_decode_block_intra): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:26">stages</name></expr></argument>, <argument pos:start="75:29" pos:end="75:33"><expr pos:start="75:29" pos:end="75:33"><name pos:start="75:29" pos:end="75:33">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:39">return <expr pos:start="77:20" pos:end="77:38"><name pos:start="77:20" pos:end="77:38">AVERROR_INVALIDDATA</name></expr>;</return>  <comment type="block" pos:start="77:42" pos:end="77:61">/* invalid vector */</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:61"><expr pos:start="83:9" pos:end="83:60"><name pos:start="83:9" pos:end="83:12">mean</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:60"><name pos:start="83:16" pos:end="83:23">get_vlc2</name><argument_list pos:start="83:24" pos:end="83:60">(<argument pos:start="83:25" pos:end="83:30"><expr pos:start="83:25" pos:end="83:30"><name pos:start="83:25" pos:end="83:30">bitbuf</name></expr></argument>, <argument pos:start="83:33" pos:end="83:53"><expr pos:start="83:33" pos:end="83:53"><name pos:start="83:33" pos:end="83:53"><name pos:start="83:33" pos:end="83:47">svq1_intra_mean</name><operator pos:start="83:48" pos:end="83:48">.</operator><name pos:start="83:49" pos:end="83:53">table</name></name></expr></argument>, <argument pos:start="83:56" pos:end="83:56"><expr pos:start="83:56" pos:end="83:56"><literal type="number" pos:start="83:56" pos:end="83:56">8</literal></expr></argument>, <argument pos:start="83:59" pos:end="83:59"><expr pos:start="83:59" pos:end="83:59"><literal type="number" pos:start="83:59" pos:end="83:59">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="119:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:24">(<expr pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:18">stages</name> <operator pos:start="87:20" pos:end="87:21">==</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>)</condition> <block pos:start="87:26" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:59">

            <for pos:start="89:13" pos:end="91:59">for <control pos:start="89:17" pos:end="89:40">(<init pos:start="89:18" pos:end="89:23"><expr pos:start="89:18" pos:end="89:22"><name pos:start="89:18" pos:end="89:18">y</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>;</init> <condition pos:start="89:25" pos:end="89:35"><expr pos:start="89:25" pos:end="89:34"><name pos:start="89:25" pos:end="89:25">y</name> <operator pos:start="89:27" pos:end="89:27">&lt;</operator> <name pos:start="89:29" pos:end="89:34">height</name></expr>;</condition> <incr pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:37">y</name><operator pos:start="89:38" pos:end="89:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="91:17" pos:end="91:59"><block_content pos:start="91:17" pos:end="91:59">

                <expr_stmt pos:start="91:17" pos:end="91:59"><expr pos:start="91:17" pos:end="91:58"><call pos:start="91:17" pos:end="91:58"><name pos:start="91:17" pos:end="91:22">memset</name><argument_list pos:start="91:23" pos:end="91:58">(<argument pos:start="91:24" pos:end="91:44"><expr pos:start="91:24" pos:end="91:44"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:44"><name pos:start="91:25" pos:end="91:27">dst</name><index pos:start="91:28" pos:end="91:44">[<expr pos:start="91:29" pos:end="91:43"><name pos:start="91:29" pos:end="91:29">y</name> <operator pos:start="91:31" pos:end="91:31">*</operator> <operator pos:start="91:33" pos:end="91:33">(</operator><name pos:start="91:34" pos:end="91:38">pitch</name> <operator pos:start="91:40" pos:end="91:40">/</operator> <literal type="number" pos:start="91:42" pos:end="91:42">4</literal><operator pos:start="91:43" pos:end="91:43">)</operator></expr>]</index></name></expr></argument>, <argument pos:start="91:47" pos:end="91:50"><expr pos:start="91:47" pos:end="91:50"><name pos:start="91:47" pos:end="91:50">mean</name></expr></argument>, <argument pos:start="91:53" pos:end="91:57"><expr pos:start="91:53" pos:end="91:57"><name pos:start="91:53" pos:end="91:57">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="119:9">else <block pos:start="93:16" pos:end="119:9">{<block_content pos:start="95:13" pos:end="117:13">

            <expr_stmt pos:start="95:13" pos:end="95:64"><expr pos:start="95:13" pos:end="95:63"><call pos:start="95:13" pos:end="95:63"><name pos:start="95:13" pos:end="95:38">SVQ1_CALC_CODEBOOK_ENTRIES</name><argument_list pos:start="95:39" pos:end="95:63">(<argument pos:start="95:40" pos:end="95:62"><expr pos:start="95:40" pos:end="95:62"><name pos:start="95:40" pos:end="95:62">ff_svq1_intra_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="99:13" pos:end="117:13">for <control pos:start="99:17" pos:end="99:40">(<init pos:start="99:18" pos:end="99:23"><expr pos:start="99:18" pos:end="99:22"><name pos:start="99:18" pos:end="99:18">y</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>;</init> <condition pos:start="99:25" pos:end="99:35"><expr pos:start="99:25" pos:end="99:34"><name pos:start="99:25" pos:end="99:25">y</name> <operator pos:start="99:27" pos:end="99:27">&lt;</operator> <name pos:start="99:29" pos:end="99:34">height</name></expr>;</condition> <incr pos:start="99:37" pos:end="99:39"><expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:37">y</name><operator pos:start="99:38" pos:end="99:39">++</operator></expr></incr>)</control> <block pos:start="99:42" pos:end="117:13">{<block_content pos:start="101:17" pos:end="115:33">

                <for pos:start="101:17" pos:end="113:17">for <control pos:start="101:21" pos:end="101:59">(<init pos:start="101:22" pos:end="101:27"><expr pos:start="101:22" pos:end="101:26"><name pos:start="101:22" pos:end="101:22">x</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>;</init> <condition pos:start="101:29" pos:end="101:42"><expr pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:29">x</name> <operator pos:start="101:31" pos:end="101:31">&lt;</operator> <name pos:start="101:33" pos:end="101:37">width</name> <operator pos:start="101:39" pos:end="101:39">/</operator> <literal type="number" pos:start="101:41" pos:end="101:41">4</literal></expr>;</condition> <incr pos:start="101:44" pos:end="101:58"><expr pos:start="101:44" pos:end="101:46"><name pos:start="101:44" pos:end="101:44">x</name><operator pos:start="101:45" pos:end="101:46">++</operator></expr><operator pos:start="101:47" pos:end="101:47">,</operator> <expr pos:start="101:49" pos:end="101:58"><name pos:start="101:49" pos:end="101:56">codebook</name><operator pos:start="101:57" pos:end="101:58">++</operator></expr></incr>)</control> <block pos:start="101:61" pos:end="113:17">{<block_content pos:start="103:21" pos:end="111:42">

                    <expr_stmt pos:start="103:21" pos:end="103:28"><expr pos:start="103:21" pos:end="103:27"><name pos:start="103:21" pos:end="103:22">n1</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:27">n4</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:28"><expr pos:start="105:21" pos:end="105:27"><name pos:start="105:21" pos:end="105:22">n2</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:27">n4</name></expr>;</expr_stmt>

                    <macro pos:start="107:21" pos:end="107:39"><name pos:start="107:21" pos:end="107:37">SVQ1_ADD_CODEBOOK</name><argument_list pos:start="107:38" pos:end="107:39">()</argument_list></macro>

                    <comment type="block" pos:start="109:21" pos:end="109:38">/* store result */</comment>

                    <expr_stmt pos:start="111:21" pos:end="111:42"><expr pos:start="111:21" pos:end="111:41"><name pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:23">dst</name><index pos:start="111:24" pos:end="111:26">[<expr pos:start="111:25" pos:end="111:25"><name pos:start="111:25" pos:end="111:25">x</name></expr>]</index></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:31">n1</name> <operator pos:start="111:33" pos:end="111:34">&lt;&lt;</operator> <literal type="number" pos:start="111:36" pos:end="111:36">8</literal> <operator pos:start="111:38" pos:end="111:38">|</operator> <name pos:start="111:40" pos:end="111:41">n2</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="115:17" pos:end="115:33"><expr pos:start="115:17" pos:end="115:32"><name pos:start="115:17" pos:end="115:19">dst</name> <operator pos:start="115:21" pos:end="115:22">+=</operator> <name pos:start="115:24" pos:end="115:28">pitch</name> <operator pos:start="115:30" pos:end="115:30">/</operator> <literal type="number" pos:start="115:32" pos:end="115:32">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
