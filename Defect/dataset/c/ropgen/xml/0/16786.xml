<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16786.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">scsi_disk_emulate_mode_select</name><parameter_list pos:start="1:42" pos:end="1:73">(<parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:53">SCSIDiskReq</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">r</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">inbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:55">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:65">= <expr pos:start="5:24" pos:end="5:65"><call pos:start="5:24" pos:end="5:65"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:65">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSIDiskState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>, <argument pos:start="5:55" pos:end="5:64"><expr pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:55">r</name><operator pos:start="5:56" pos:end="5:57">-&gt;</operator><name pos:start="5:58" pos:end="5:60">req</name><operator pos:start="5:61" pos:end="5:61">.</operator><name pos:start="5:62" pos:end="5:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><name pos:start="7:18" pos:end="7:22">inbuf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">cmd</name> <init pos:start="9:13" pos:end="9:31">= <expr pos:start="9:15" pos:end="9:31"><name pos:start="9:15" pos:end="9:31"><name pos:start="9:15" pos:end="9:15">r</name><operator pos:start="9:16" pos:end="9:17">-&gt;</operator><name pos:start="9:18" pos:end="9:20">req</name><operator pos:start="9:21" pos:end="9:21">.</operator><name pos:start="9:22" pos:end="9:24">cmd</name><operator pos:start="9:25" pos:end="9:25">.</operator><name pos:start="9:26" pos:end="9:28">buf</name><index pos:start="9:29" pos:end="9:31">[<expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name> <init pos:start="11:13" pos:end="11:29">= <expr pos:start="11:15" pos:end="11:29"><name pos:start="11:15" pos:end="11:29"><name pos:start="11:15" pos:end="11:15">r</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:20">req</name><operator pos:start="11:21" pos:end="11:21">.</operator><name pos:start="11:22" pos:end="11:24">cmd</name><operator pos:start="11:25" pos:end="11:25">.</operator><name pos:start="11:26" pos:end="11:29">xfer</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">hdr_len</name> <init pos:start="13:17" pos:end="13:46">= <expr pos:start="13:19" pos:end="13:46"><operator pos:start="13:19" pos:end="13:19">(</operator><ternary pos:start="13:20" pos:end="13:45"><condition pos:start="13:20" pos:end="13:39"><expr pos:start="13:20" pos:end="13:37"><name pos:start="13:20" pos:end="13:22">cmd</name> <operator pos:start="13:24" pos:end="13:25">==</operator> <name pos:start="13:27" pos:end="13:37">MODE_SELECT</name></expr> ?</condition><then pos:start="13:41" pos:end="13:41"> <expr pos:start="13:41" pos:end="13:41"><literal type="number" pos:start="13:41" pos:end="13:41">4</literal></expr> </then><else pos:start="13:43" pos:end="13:45">: <expr pos:start="13:45" pos:end="13:45"><literal type="number" pos:start="13:45" pos:end="13:45">8</literal></expr></else></ternary><operator pos:start="13:46" pos:end="13:46">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">bd_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">pass</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:38">/* We only support PF=1, SP=0.  */</comment>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:43">(<expr pos:start="23:9" pos:end="23:42"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:26"><name pos:start="23:10" pos:end="23:10">r</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:15">req</name><operator pos:start="23:16" pos:end="23:16">.</operator><name pos:start="23:17" pos:end="23:19">cmd</name><operator pos:start="23:20" pos:end="23:20">.</operator><name pos:start="23:21" pos:end="23:23">buf</name><index pos:start="23:24" pos:end="23:26">[<expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">1</literal></expr>]</index></name> <operator pos:start="23:28" pos:end="23:28">&amp;</operator> <literal type="number" pos:start="23:30" pos:end="23:33">0x11</literal><operator pos:start="23:34" pos:end="23:34">)</operator> <operator pos:start="23:36" pos:end="23:37">!=</operator> <literal type="number" pos:start="23:39" pos:end="23:42">0x10</literal></expr>)</condition> <block pos:start="23:45" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:27">

        <goto pos:start="25:9" pos:end="25:27">goto <name pos:start="25:14" pos:end="25:26">invalid_field</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <name pos:start="31:15" pos:end="31:21">hdr_len</name></expr>)</condition> <block pos:start="31:24" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:31">

        <goto pos:start="33:9" pos:end="33:31">goto <name pos:start="33:14" pos:end="33:30">invalid_param_len</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:10">bd_len</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <operator pos:start="39:14" pos:end="39:14">(</operator><ternary pos:start="39:15" pos:end="39:58"><condition pos:start="39:15" pos:end="39:34"><expr pos:start="39:15" pos:end="39:32"><name pos:start="39:15" pos:end="39:17">cmd</name> <operator pos:start="39:19" pos:end="39:20">==</operator> <name pos:start="39:22" pos:end="39:32">MODE_SELECT</name></expr> ?</condition><then pos:start="39:36" pos:end="39:39"> <expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:36">p</name><index pos:start="39:37" pos:end="39:39">[<expr pos:start="39:38" pos:end="39:38"><literal type="number" pos:start="39:38" pos:end="39:38">3</literal></expr>]</index></name></expr> </then><else pos:start="39:41" pos:end="39:58">: <expr pos:start="39:43" pos:end="39:58"><call pos:start="39:43" pos:end="39:58"><name pos:start="39:43" pos:end="39:51">lduw_be_p</name><argument_list pos:start="39:52" pos:end="39:58">(<argument pos:start="39:53" pos:end="39:57"><expr pos:start="39:53" pos:end="39:57"><operator pos:start="39:53" pos:end="39:53">&amp;</operator><name pos:start="39:54" pos:end="39:57"><name pos:start="39:54" pos:end="39:54">p</name><index pos:start="39:55" pos:end="39:57">[<expr pos:start="39:56" pos:end="39:56"><literal type="number" pos:start="39:56" pos:end="39:56">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="39:59" pos:end="39:59">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:19"><expr pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:7">len</name> <operator pos:start="41:9" pos:end="41:10">-=</operator> <name pos:start="41:12" pos:end="41:18">hdr_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:5">p</name> <operator pos:start="43:7" pos:end="43:8">+=</operator> <name pos:start="43:10" pos:end="43:16">hdr_len</name></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:11">len</name> <operator pos:start="45:13" pos:end="45:13">&lt;</operator> <name pos:start="45:15" pos:end="45:20">bd_len</name></expr>)</condition> <block pos:start="45:23" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:31">

        <goto pos:start="47:9" pos:end="47:31">goto <name pos:start="47:14" pos:end="47:30">invalid_param_len</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:35">(<expr pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:14">bd_len</name> <operator pos:start="51:16" pos:end="51:17">!=</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal> <operator pos:start="51:21" pos:end="51:22">&amp;&amp;</operator> <name pos:start="51:24" pos:end="51:29">bd_len</name> <operator pos:start="51:31" pos:end="51:32">!=</operator> <literal type="number" pos:start="51:34" pos:end="51:34">8</literal></expr>)</condition> <block pos:start="51:37" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:27">

        <goto pos:start="53:9" pos:end="53:27">goto <name pos:start="53:14" pos:end="53:26">invalid_param</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:18"><expr pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:7">len</name> <operator pos:start="59:9" pos:end="59:10">-=</operator> <name pos:start="59:12" pos:end="59:17">bd_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:16"><expr pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:5">p</name> <operator pos:start="61:7" pos:end="61:8">+=</operator> <name pos:start="61:10" pos:end="61:15">bd_len</name></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:57">/* Ensure no change is made if there is an error!  */</comment>

    <for pos:start="67:5" pos:end="77:5">for <control pos:start="67:9" pos:end="67:36">(<init pos:start="67:10" pos:end="67:18"><expr pos:start="67:10" pos:end="67:17"><name pos:start="67:10" pos:end="67:13">pass</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <literal type="number" pos:start="67:17" pos:end="67:17">0</literal></expr>;</init> <condition pos:start="67:20" pos:end="67:28"><expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:23">pass</name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">2</literal></expr>;</condition> <incr pos:start="67:30" pos:end="67:35"><expr pos:start="67:30" pos:end="67:35"><name pos:start="67:30" pos:end="67:33">pass</name><operator pos:start="67:34" pos:end="67:35">++</operator></expr></incr>)</control> <block pos:start="67:38" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:9">

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:56">(<expr pos:start="69:13" pos:end="69:55"><call pos:start="69:13" pos:end="69:51"><name pos:start="69:13" pos:end="69:29">mode_select_pages</name><argument_list pos:start="69:30" pos:end="69:51">(<argument pos:start="69:31" pos:end="69:31"><expr pos:start="69:31" pos:end="69:31"><name pos:start="69:31" pos:end="69:31">r</name></expr></argument>, <argument pos:start="69:34" pos:end="69:34"><expr pos:start="69:34" pos:end="69:34"><name pos:start="69:34" pos:end="69:34">p</name></expr></argument>, <argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">len</name></expr></argument>, <argument pos:start="69:42" pos:end="69:50"><expr pos:start="69:42" pos:end="69:50"><name pos:start="69:42" pos:end="69:45">pass</name> <operator pos:start="69:47" pos:end="69:48">==</operator> <literal type="number" pos:start="69:50" pos:end="69:50">1</literal></expr></argument>)</argument_list></call> <operator pos:start="69:53" pos:end="69:53">&lt;</operator> <literal type="number" pos:start="69:55" pos:end="69:55">0</literal></expr>)</condition> <block pos:start="69:58" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:19">

            <expr_stmt pos:start="71:13" pos:end="71:30"><expr pos:start="71:13" pos:end="71:29"><call pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:18">assert</name><argument_list pos:start="71:19" pos:end="71:29">(<argument pos:start="71:20" pos:end="71:28"><expr pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:23">pass</name> <operator pos:start="71:25" pos:end="71:26">==</operator> <literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="79:5" pos:end="93:5"><if pos:start="79:5" pos:end="93:5">if <condition pos:start="79:8" pos:end="79:50">(<expr pos:start="79:9" pos:end="79:49"><operator pos:start="79:9" pos:end="79:9">!</operator><call pos:start="79:10" pos:end="79:49"><name pos:start="79:10" pos:end="79:32">bdrv_enable_write_cache</name><argument_list pos:start="79:33" pos:end="79:49">(<argument pos:start="79:34" pos:end="79:48"><expr pos:start="79:34" pos:end="79:48"><name pos:start="79:34" pos:end="79:48"><name pos:start="79:34" pos:end="79:34">s</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:40">qdev</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:45">conf</name><operator pos:start="79:46" pos:end="79:46">.</operator><name pos:start="79:47" pos:end="79:48">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:52" pos:end="93:5">{<block_content pos:start="83:9" pos:end="91:15">

        <comment type="block" pos:start="81:9" pos:end="81:73">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><call pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:20">scsi_req_ref</name><argument_list pos:start="83:21" pos:end="83:29">(<argument pos:start="83:22" pos:end="83:28"><expr pos:start="83:22" pos:end="83:28"><operator pos:start="83:22" pos:end="83:22">&amp;</operator><name pos:start="83:23" pos:end="83:28"><name pos:start="83:23" pos:end="83:23">r</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:28">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="87:43"><expr pos:start="85:9" pos:end="87:42"><call pos:start="85:9" pos:end="87:42"><name pos:start="85:9" pos:end="85:24">block_acct_start</name><argument_list pos:start="85:25" pos:end="87:42">(<argument pos:start="85:26" pos:end="85:56"><expr pos:start="85:26" pos:end="85:56"><call pos:start="85:26" pos:end="85:56"><name pos:start="85:26" pos:end="85:39">bdrv_get_stats</name><argument_list pos:start="85:40" pos:end="85:56">(<argument pos:start="85:41" pos:end="85:55"><expr pos:start="85:41" pos:end="85:55"><name pos:start="85:41" pos:end="85:55"><name pos:start="85:41" pos:end="85:41">s</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:47">qdev</name><operator pos:start="85:48" pos:end="85:48">.</operator><name pos:start="85:49" pos:end="85:52">conf</name><operator pos:start="85:53" pos:end="85:53">.</operator><name pos:start="85:54" pos:end="85:55">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:59" pos:end="85:66"><expr pos:start="85:59" pos:end="85:66"><operator pos:start="85:59" pos:end="85:59">&amp;</operator><name pos:start="85:60" pos:end="85:66"><name pos:start="85:60" pos:end="85:60">r</name><operator pos:start="85:61" pos:end="85:62">-&gt;</operator><name pos:start="85:63" pos:end="85:66">acct</name></name></expr></argument>, <argument pos:start="85:69" pos:end="85:69"><expr pos:start="85:69" pos:end="85:69"><literal type="number" pos:start="85:69" pos:end="85:69">0</literal></expr></argument>,

                         <argument pos:start="87:26" pos:end="87:41"><expr pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:41">BLOCK_ACCT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:77"><expr pos:start="89:9" pos:end="89:76"><name pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:9">r</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:14">req</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:20">aiocb</name></name> <operator pos:start="89:22" pos:end="89:22">=</operator> <call pos:start="89:24" pos:end="89:76"><name pos:start="89:24" pos:end="89:37">bdrv_aio_flush</name><argument_list pos:start="89:38" pos:end="89:76">(<argument pos:start="89:39" pos:end="89:53"><expr pos:start="89:39" pos:end="89:53"><name pos:start="89:39" pos:end="89:53"><name pos:start="89:39" pos:end="89:39">s</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:45">qdev</name><operator pos:start="89:46" pos:end="89:46">.</operator><name pos:start="89:47" pos:end="89:50">conf</name><operator pos:start="89:51" pos:end="89:51">.</operator><name pos:start="89:52" pos:end="89:53">bs</name></name></expr></argument>, <argument pos:start="89:56" pos:end="89:72"><expr pos:start="89:56" pos:end="89:72"><name pos:start="89:56" pos:end="89:72">scsi_aio_complete</name></expr></argument>, <argument pos:start="89:75" pos:end="89:75"><expr pos:start="89:75" pos:end="89:75"><name pos:start="89:75" pos:end="89:75">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:37"><expr pos:start="97:5" pos:end="97:36"><call pos:start="97:5" pos:end="97:36"><name pos:start="97:5" pos:end="97:21">scsi_req_complete</name><argument_list pos:start="97:22" pos:end="97:36">(<argument pos:start="97:23" pos:end="97:29"><expr pos:start="97:23" pos:end="97:29"><operator pos:start="97:23" pos:end="97:23">&amp;</operator><name pos:start="97:24" pos:end="97:29"><name pos:start="97:24" pos:end="97:24">r</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:29">req</name></name></expr></argument>, <argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:11">return;</return>



<label pos:start="103:1" pos:end="103:14"><name pos:start="103:1" pos:end="103:13">invalid_param</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><call pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:24">scsi_check_condition</name><argument_list pos:start="105:25" pos:end="105:54">(<argument pos:start="105:26" pos:end="105:26"><expr pos:start="105:26" pos:end="105:26"><name pos:start="105:26" pos:end="105:26">r</name></expr></argument>, <argument pos:start="105:29" pos:end="105:53"><expr pos:start="105:29" pos:end="105:53"><call pos:start="105:29" pos:end="105:53"><name pos:start="105:29" pos:end="105:38">SENSE_CODE</name><argument_list pos:start="105:39" pos:end="105:53">(<argument pos:start="105:40" pos:end="105:52"><expr pos:start="105:40" pos:end="105:52"><name pos:start="105:40" pos:end="105:52">INVALID_PARAM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:11">return;</return>



<label pos:start="111:1" pos:end="111:18"><name pos:start="111:1" pos:end="111:17">invalid_param_len</name>:</label>

    <expr_stmt pos:start="113:5" pos:end="113:59"><expr pos:start="113:5" pos:end="113:58"><call pos:start="113:5" pos:end="113:58"><name pos:start="113:5" pos:end="113:24">scsi_check_condition</name><argument_list pos:start="113:25" pos:end="113:58">(<argument pos:start="113:26" pos:end="113:26"><expr pos:start="113:26" pos:end="113:26"><name pos:start="113:26" pos:end="113:26">r</name></expr></argument>, <argument pos:start="113:29" pos:end="113:57"><expr pos:start="113:29" pos:end="113:57"><call pos:start="113:29" pos:end="113:57"><name pos:start="113:29" pos:end="113:38">SENSE_CODE</name><argument_list pos:start="113:39" pos:end="113:57">(<argument pos:start="113:40" pos:end="113:56"><expr pos:start="113:40" pos:end="113:56"><name pos:start="113:40" pos:end="113:56">INVALID_PARAM_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:11">return;</return>



<label pos:start="119:1" pos:end="119:14"><name pos:start="119:1" pos:end="119:13">invalid_field</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:55"><expr pos:start="121:5" pos:end="121:54"><call pos:start="121:5" pos:end="121:54"><name pos:start="121:5" pos:end="121:24">scsi_check_condition</name><argument_list pos:start="121:25" pos:end="121:54">(<argument pos:start="121:26" pos:end="121:26"><expr pos:start="121:26" pos:end="121:26"><name pos:start="121:26" pos:end="121:26">r</name></expr></argument>, <argument pos:start="121:29" pos:end="121:53"><expr pos:start="121:29" pos:end="121:53"><call pos:start="121:29" pos:end="121:53"><name pos:start="121:29" pos:end="121:38">SENSE_CODE</name><argument_list pos:start="121:39" pos:end="121:53">(<argument pos:start="121:40" pos:end="121:52"><expr pos:start="121:40" pos:end="121:52"><name pos:start="121:40" pos:end="121:52">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
