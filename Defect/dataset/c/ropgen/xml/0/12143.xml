<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12143.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">decode_block</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:44"><name pos:start="1:26" pos:end="1:41">BinkAudioContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:51">short</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">out</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:69">use_dct</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:17">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">ch</name></decl>, <decl pos:start="5:13" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:13">i</name></decl>, <decl pos:start="5:16" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:16">j</name></decl>, <decl pos:start="5:19" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:19">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">float</name></type> <name pos:start="7:11" pos:end="7:11">q</name></decl>, <decl pos:start="7:14" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:9"/><name pos:start="7:14" pos:end="7:22"><name pos:start="7:14" pos:end="7:18">quant</name><index pos:start="7:19" pos:end="7:22">[<expr pos:start="7:20" pos:end="7:21"><literal type="number" pos:start="7:20" pos:end="7:21">25</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">width</name></decl>, <decl pos:start="9:16" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:20">coeff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">GetBitContext</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:21">gb</name> <init pos:start="11:23" pos:end="11:30">= <expr pos:start="11:25" pos:end="11:30"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:30"><name pos:start="11:26" pos:end="11:26">s</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:30">gb</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:25"><if pos:start="15:5" pos:end="17:25">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:15">use_dct</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:25"><block_content pos:start="17:9" pos:end="17:25">

        <expr_stmt pos:start="17:9" pos:end="17:25"><expr pos:start="17:9" pos:end="17:24"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:17">skip_bits</name><argument_list pos:start="17:18" pos:end="17:24">(<argument pos:start="17:19" pos:end="17:20"><expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">gb</name></expr></argument>, <argument pos:start="17:23" pos:end="17:23"><expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="21:5" pos:end="139:5">for <control pos:start="21:9" pos:end="21:40">(<init pos:start="21:10" pos:end="21:16"><expr pos:start="21:10" pos:end="21:15"><name pos:start="21:10" pos:end="21:11">ch</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</init> <condition pos:start="21:18" pos:end="21:34"><expr pos:start="21:18" pos:end="21:33"><name pos:start="21:18" pos:end="21:19">ch</name> <operator pos:start="21:21" pos:end="21:21">&lt;</operator> <name pos:start="21:23" pos:end="21:33"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:33">channels</name></name></expr>;</condition> <incr pos:start="21:36" pos:end="21:39"><expr pos:start="21:36" pos:end="21:39"><name pos:start="21:36" pos:end="21:37">ch</name><operator pos:start="21:38" pos:end="21:39">++</operator></expr></incr>)</control> <block pos:start="21:42" pos:end="139:5">{<block_content pos:start="23:9" pos:end="137:49">

        <decl_stmt pos:start="23:9" pos:end="23:46"><decl pos:start="23:9" pos:end="23:45"><type pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:17">FFTSample</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:25">coeffs</name> <init pos:start="23:27" pos:end="23:45">= <expr pos:start="23:29" pos:end="23:45"><name pos:start="23:29" pos:end="23:45"><name pos:start="23:29" pos:end="23:29">s</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:41">coeffs_ptr</name><index pos:start="23:42" pos:end="23:45">[<expr pos:start="23:43" pos:end="23:44"><name pos:start="23:43" pos:end="23:44">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:17"><expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:9">q</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <literal type="number" pos:start="25:13" pos:end="25:16">0.0f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:14">coeffs</name><index pos:start="27:15" pos:end="27:17">[<expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>]</index></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:33"><name pos:start="27:21" pos:end="27:29">get_float</name><argument_list pos:start="27:30" pos:end="27:33">(<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="27:35" pos:end="27:35">*</operator> <name pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:37">s</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:43">root</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:14">coeffs</name><index pos:start="29:15" pos:end="29:17">[<expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">1</literal></expr>]</index></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <call pos:start="29:21" pos:end="29:33"><name pos:start="29:21" pos:end="29:29">get_float</name><argument_list pos:start="29:30" pos:end="29:33">(<argument pos:start="29:31" pos:end="29:32"><expr pos:start="29:31" pos:end="29:32"><name pos:start="29:31" pos:end="29:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="29:35" pos:end="29:35">*</operator> <name pos:start="29:37" pos:end="29:43"><name pos:start="29:37" pos:end="29:37">s</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:43">root</name></name></expr>;</expr_stmt>



        <for pos:start="33:9" pos:end="41:9">for <control pos:start="33:13" pos:end="33:42">(<init pos:start="33:14" pos:end="33:19"><expr pos:start="33:14" pos:end="33:18"><name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</init> <condition pos:start="33:21" pos:end="33:37"><expr pos:start="33:21" pos:end="33:36"><name pos:start="33:21" pos:end="33:21">i</name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <name pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:25">s</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:36">num_bands</name></name></expr>;</condition> <incr pos:start="33:39" pos:end="33:41"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:39">i</name><operator pos:start="33:40" pos:end="33:41">++</operator></expr></incr>)</control> <block pos:start="33:44" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:82">

            <comment type="block" pos:start="35:13" pos:end="35:62">/* constant is result of 0.066399999/log10(M_E) */</comment>

            <decl_stmt pos:start="37:13" pos:end="37:40"><decl pos:start="37:13" pos:end="37:39"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:21">value</name> <init pos:start="37:23" pos:end="37:39">= <expr pos:start="37:25" pos:end="37:39"><call pos:start="37:25" pos:end="37:39"><name pos:start="37:25" pos:end="37:32">get_bits</name><argument_list pos:start="37:33" pos:end="37:39">(<argument pos:start="37:34" pos:end="37:35"><expr pos:start="37:34" pos:end="37:35"><name pos:start="37:34" pos:end="37:35">gb</name></expr></argument>, <argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><literal type="number" pos:start="37:38" pos:end="37:38">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:82"><expr pos:start="39:13" pos:end="39:81"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:17">quant</name><index pos:start="39:18" pos:end="39:20">[<expr pos:start="39:19" pos:end="39:19"><name pos:start="39:19" pos:end="39:19">i</name></expr>]</index></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:71"><name pos:start="39:24" pos:end="39:27">expf</name><argument_list pos:start="39:28" pos:end="39:71">(<argument pos:start="39:29" pos:end="39:70"><expr pos:start="39:29" pos:end="39:70"><call pos:start="39:29" pos:end="39:44"><name pos:start="39:29" pos:end="39:33">FFMIN</name><argument_list pos:start="39:34" pos:end="39:44">(<argument pos:start="39:35" pos:end="39:39"><expr pos:start="39:35" pos:end="39:39"><name pos:start="39:35" pos:end="39:39">value</name></expr></argument>, <argument pos:start="39:42" pos:end="39:43"><expr pos:start="39:42" pos:end="39:43"><literal type="number" pos:start="39:42" pos:end="39:43">95</literal></expr></argument>)</argument_list></call> <operator pos:start="39:46" pos:end="39:46">*</operator> <literal type="number" pos:start="39:48" pos:end="39:70">0.15289164787221953823f</literal></expr></argument>)</argument_list></call> <operator pos:start="39:73" pos:end="39:73">*</operator> <name pos:start="39:75" pos:end="39:81"><name pos:start="39:75" pos:end="39:75">s</name><operator pos:start="39:76" pos:end="39:77">-&gt;</operator><name pos:start="39:78" pos:end="39:81">root</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="line" pos:start="45:9" pos:end="45:24">// find band (k)</comment>

        <for pos:start="47:9" pos:end="51:9">for <control pos:start="47:13" pos:end="47:41">(<init pos:start="47:14" pos:end="47:19"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">k</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>;</init> <condition pos:start="47:21" pos:end="47:36"><expr pos:start="47:21" pos:end="47:35"><name pos:start="47:21" pos:end="47:31"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:28">bands</name><index pos:start="47:29" pos:end="47:31">[<expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">k</name></expr>]</index></name> <operator pos:start="47:33" pos:end="47:33">&lt;</operator> <literal type="number" pos:start="47:35" pos:end="47:35">1</literal></expr>;</condition> <incr pos:start="47:38" pos:end="47:40"><expr pos:start="47:38" pos:end="47:40"><name pos:start="47:38" pos:end="47:38">k</name><operator pos:start="47:39" pos:end="47:40">++</operator></expr></incr>)</control> <block pos:start="47:43" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:25">

            <expr_stmt pos:start="49:13" pos:end="49:25"><expr pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:13">q</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:21">quant</name><index pos:start="49:22" pos:end="49:24">[<expr pos:start="49:23" pos:end="49:23"><name pos:start="49:23" pos:end="49:23">k</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="line" pos:start="55:9" pos:end="55:29">// parse coefficients</comment>

        <expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">i</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <literal type="number" pos:start="57:13" pos:end="57:13">2</literal></expr>;</expr_stmt>

        <while pos:start="59:9" pos:end="121:9">while <condition pos:start="59:15" pos:end="59:32">(<expr pos:start="59:16" pos:end="59:31"><name pos:start="59:16" pos:end="59:16">i</name> <operator pos:start="59:18" pos:end="59:18">&lt;</operator> <name pos:start="59:20" pos:end="59:31"><name pos:start="59:20" pos:end="59:20">s</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:31">frame_len</name></name></expr>)</condition> <block pos:start="59:34" pos:end="121:9">{<block_content pos:start="61:13" pos:end="119:13">

            <if_stmt pos:start="61:13" pos:end="69:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:30">(<expr pos:start="61:17" pos:end="61:29"><call pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:25">get_bits1</name><argument_list pos:start="61:26" pos:end="61:29">(<argument pos:start="61:27" pos:end="61:28"><expr pos:start="61:27" pos:end="61:28"><name pos:start="61:27" pos:end="61:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:32" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:60">

                <expr_stmt pos:start="63:17" pos:end="63:60"><expr pos:start="63:17" pos:end="63:59"><name pos:start="63:17" pos:end="63:17">j</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:21">i</name> <operator pos:start="63:23" pos:end="63:23">+</operator> <name pos:start="63:25" pos:end="63:55"><name pos:start="63:25" pos:end="63:38">rle_length_tab</name><index pos:start="63:39" pos:end="63:55">[<expr pos:start="63:40" pos:end="63:54"><call pos:start="63:40" pos:end="63:54"><name pos:start="63:40" pos:end="63:47">get_bits</name><argument_list pos:start="63:48" pos:end="63:54">(<argument pos:start="63:49" pos:end="63:50"><expr pos:start="63:49" pos:end="63:50"><name pos:start="63:49" pos:end="63:50">gb</name></expr></argument>, <argument pos:start="63:53" pos:end="63:53"><expr pos:start="63:53" pos:end="63:53"><literal type="number" pos:start="63:53" pos:end="63:53">4</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="63:57" pos:end="63:57">*</operator> <literal type="number" pos:start="63:59" pos:end="63:59">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="69:13">else <block pos:start="65:20" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:26">

                <expr_stmt pos:start="67:17" pos:end="67:26"><expr pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:17">j</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">+</operator> <literal type="number" pos:start="67:25" pos:end="67:25">8</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:39"><expr pos:start="73:13" pos:end="73:38"><name pos:start="73:13" pos:end="73:13">j</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:38"><name pos:start="73:17" pos:end="73:21">FFMIN</name><argument_list pos:start="73:22" pos:end="73:38">(<argument pos:start="73:23" pos:end="73:23"><expr pos:start="73:23" pos:end="73:23"><name pos:start="73:23" pos:end="73:23">j</name></expr></argument>, <argument pos:start="73:26" pos:end="73:37"><expr pos:start="73:26" pos:end="73:37"><name pos:start="73:26" pos:end="73:37"><name pos:start="73:26" pos:end="73:26">s</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:37">frame_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:36"><expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:17">width</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <call pos:start="77:21" pos:end="77:35"><name pos:start="77:21" pos:end="77:28">get_bits</name><argument_list pos:start="77:29" pos:end="77:35">(<argument pos:start="77:30" pos:end="77:31"><expr pos:start="77:30" pos:end="77:31"><name pos:start="77:30" pos:end="77:31">gb</name></expr></argument>, <argument pos:start="77:34" pos:end="77:34"><expr pos:start="77:34" pos:end="77:34"><literal type="number" pos:start="77:34" pos:end="77:34">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="119:13"><if pos:start="79:13" pos:end="89:13">if <condition pos:start="79:16" pos:end="79:27">(<expr pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:21">width</name> <operator pos:start="79:23" pos:end="79:24">==</operator> <literal type="number" pos:start="79:26" pos:end="79:26">0</literal></expr>)</condition> <block pos:start="79:29" pos:end="89:13">{<block_content pos:start="81:17" pos:end="87:35">

                <expr_stmt pos:start="81:17" pos:end="81:65"><expr pos:start="81:17" pos:end="81:64"><call pos:start="81:17" pos:end="81:64"><name pos:start="81:17" pos:end="81:22">memset</name><argument_list pos:start="81:23" pos:end="81:64">(<argument pos:start="81:24" pos:end="81:33"><expr pos:start="81:24" pos:end="81:33"><name pos:start="81:24" pos:end="81:29">coeffs</name> <operator pos:start="81:31" pos:end="81:31">+</operator> <name pos:start="81:33" pos:end="81:33">i</name></expr></argument>, <argument pos:start="81:36" pos:end="81:36"><expr pos:start="81:36" pos:end="81:36"><literal type="number" pos:start="81:36" pos:end="81:36">0</literal></expr></argument>, <argument pos:start="81:39" pos:end="81:63"><expr pos:start="81:39" pos:end="81:63"><operator pos:start="81:39" pos:end="81:39">(</operator><name pos:start="81:40" pos:end="81:40">j</name> <operator pos:start="81:42" pos:end="81:42">-</operator> <name pos:start="81:44" pos:end="81:44">i</name><operator pos:start="81:45" pos:end="81:45">)</operator> <operator pos:start="81:47" pos:end="81:47">*</operator> <sizeof pos:start="81:49" pos:end="81:63">sizeof<argument_list pos:start="81:55" pos:end="81:63">(<argument pos:start="81:56" pos:end="81:62"><expr pos:start="81:56" pos:end="81:62"><operator pos:start="81:56" pos:end="81:56">*</operator><name pos:start="81:57" pos:end="81:62">coeffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:22"><expr pos:start="83:17" pos:end="83:21"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:21">j</name></expr>;</expr_stmt>

                <while pos:start="85:17" pos:end="87:35">while <condition pos:start="85:23" pos:end="85:39">(<expr pos:start="85:24" pos:end="85:38"><name pos:start="85:24" pos:end="85:34"><name pos:start="85:24" pos:end="85:24">s</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:31">bands</name><index pos:start="85:32" pos:end="85:34">[<expr pos:start="85:33" pos:end="85:33"><name pos:start="85:33" pos:end="85:33">k</name></expr>]</index></name> <operator pos:start="85:36" pos:end="85:36">&lt;</operator> <name pos:start="85:38" pos:end="85:38">i</name></expr>)</condition><block type="pseudo" pos:start="87:21" pos:end="87:35"><block_content pos:start="87:21" pos:end="87:35">

                    <expr_stmt pos:start="87:21" pos:end="87:35"><expr pos:start="87:21" pos:end="87:34"><name pos:start="87:21" pos:end="87:21">q</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:34"><name pos:start="87:25" pos:end="87:29">quant</name><index pos:start="87:30" pos:end="87:34">[<expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:31">k</name><operator pos:start="87:32" pos:end="87:33">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="119:13">else <block pos:start="89:20" pos:end="119:13">{<block_content pos:start="91:17" pos:end="117:17">

                <while pos:start="91:17" pos:end="117:17">while <condition pos:start="91:23" pos:end="91:29">(<expr pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:24">i</name> <operator pos:start="91:26" pos:end="91:26">&lt;</operator> <name pos:start="91:28" pos:end="91:28">j</name></expr>)</condition> <block pos:start="91:31" pos:end="117:17">{<block_content pos:start="93:21" pos:end="115:24">

                    <if_stmt pos:start="93:21" pos:end="95:39"><if pos:start="93:21" pos:end="95:39">if <condition pos:start="93:24" pos:end="93:41">(<expr pos:start="93:25" pos:end="93:40"><name pos:start="93:25" pos:end="93:35"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:32">bands</name><index pos:start="93:33" pos:end="93:35">[<expr pos:start="93:34" pos:end="93:34"><name pos:start="93:34" pos:end="93:34">k</name></expr>]</index></name> <operator pos:start="93:37" pos:end="93:38">==</operator> <name pos:start="93:40" pos:end="93:40">i</name></expr>)</condition><block type="pseudo" pos:start="95:25" pos:end="95:39"><block_content pos:start="95:25" pos:end="95:39">

                        <expr_stmt pos:start="95:25" pos:end="95:39"><expr pos:start="95:25" pos:end="95:38"><name pos:start="95:25" pos:end="95:25">q</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <name pos:start="95:29" pos:end="95:38"><name pos:start="95:29" pos:end="95:33">quant</name><index pos:start="95:34" pos:end="95:38">[<expr pos:start="95:35" pos:end="95:37"><name pos:start="95:35" pos:end="95:35">k</name><operator pos:start="95:36" pos:end="95:37">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:48"><expr pos:start="97:21" pos:end="97:47"><name pos:start="97:21" pos:end="97:25">coeff</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <call pos:start="97:29" pos:end="97:47"><name pos:start="97:29" pos:end="97:36">get_bits</name><argument_list pos:start="97:37" pos:end="97:47">(<argument pos:start="97:38" pos:end="97:39"><expr pos:start="97:38" pos:end="97:39"><name pos:start="97:38" pos:end="97:39">gb</name></expr></argument>, <argument pos:start="97:42" pos:end="97:46"><expr pos:start="97:42" pos:end="97:46"><name pos:start="97:42" pos:end="97:46">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="99:21" pos:end="113:21"><if pos:start="99:21" pos:end="109:21">if <condition pos:start="99:24" pos:end="99:30">(<expr pos:start="99:25" pos:end="99:29"><name pos:start="99:25" pos:end="99:29">coeff</name></expr>)</condition> <block pos:start="99:32" pos:end="109:21">{<block_content pos:start="101:25" pos:end="107:51">

                        <if_stmt pos:start="101:25" pos:end="107:51"><if pos:start="101:25" pos:end="103:51">if <condition pos:start="101:28" pos:end="101:42">(<expr pos:start="101:29" pos:end="101:41"><call pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:37">get_bits1</name><argument_list pos:start="101:38" pos:end="101:41">(<argument pos:start="101:39" pos:end="101:40"><expr pos:start="101:39" pos:end="101:40"><name pos:start="101:39" pos:end="101:40">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:29" pos:end="103:51"><block_content pos:start="103:29" pos:end="103:51">

                            <expr_stmt pos:start="103:29" pos:end="103:51"><expr pos:start="103:29" pos:end="103:50"><name pos:start="103:29" pos:end="103:37"><name pos:start="103:29" pos:end="103:34">coeffs</name><index pos:start="103:35" pos:end="103:37">[<expr pos:start="103:36" pos:end="103:36"><name pos:start="103:36" pos:end="103:36">i</name></expr>]</index></name> <operator pos:start="103:39" pos:end="103:39">=</operator> <operator pos:start="103:41" pos:end="103:41">-</operator><name pos:start="103:42" pos:end="103:42">q</name> <operator pos:start="103:44" pos:end="103:44">*</operator> <name pos:start="103:46" pos:end="103:50">coeff</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="105:25" pos:end="107:51">else<block type="pseudo" pos:start="107:29" pos:end="107:51"><block_content pos:start="107:29" pos:end="107:51">

                            <expr_stmt pos:start="107:29" pos:end="107:51"><expr pos:start="107:29" pos:end="107:50"><name pos:start="107:29" pos:end="107:37"><name pos:start="107:29" pos:end="107:34">coeffs</name><index pos:start="107:35" pos:end="107:37">[<expr pos:start="107:36" pos:end="107:36"><name pos:start="107:36" pos:end="107:36">i</name></expr>]</index></name> <operator pos:start="107:39" pos:end="107:39">=</operator>  <name pos:start="107:42" pos:end="107:42">q</name> <operator pos:start="107:44" pos:end="107:44">*</operator> <name pos:start="107:46" pos:end="107:50">coeff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="109:23" pos:end="113:21">else <block pos:start="109:28" pos:end="113:21">{<block_content pos:start="111:25" pos:end="111:41">

                        <expr_stmt pos:start="111:25" pos:end="111:41"><expr pos:start="111:25" pos:end="111:40"><name pos:start="111:25" pos:end="111:33"><name pos:start="111:25" pos:end="111:30">coeffs</name><index pos:start="111:31" pos:end="111:33">[<expr pos:start="111:32" pos:end="111:32"><name pos:start="111:32" pos:end="111:32">i</name></expr>]</index></name> <operator pos:start="111:35" pos:end="111:35">=</operator> <literal type="number" pos:start="111:37" pos:end="111:40">0.0f</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:24"><expr pos:start="115:21" pos:end="115:23"><name pos:start="115:21" pos:end="115:21">i</name><operator pos:start="115:22" pos:end="115:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="125:9" pos:end="137:49"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:52">(<expr pos:start="125:13" pos:end="125:51"><name pos:start="125:13" pos:end="125:40">CONFIG_BINKAUDIO_DCT_DECODER</name> <operator pos:start="125:42" pos:end="125:43">&amp;&amp;</operator> <name pos:start="125:45" pos:end="125:51">use_dct</name></expr>)</condition> <block pos:start="125:54" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:86">

            <expr_stmt pos:start="127:13" pos:end="127:29"><expr pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:21"><name pos:start="127:13" pos:end="127:18">coeffs</name><index pos:start="127:19" pos:end="127:21">[<expr pos:start="127:20" pos:end="127:20"><literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>]</index></name> <operator pos:start="127:23" pos:end="127:24">/=</operator> <literal type="number" pos:start="127:26" pos:end="127:28">0.5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:49"><expr pos:start="129:13" pos:end="129:48"><call pos:start="129:13" pos:end="129:48"><name pos:start="129:13" pos:end="129:23">ff_dct_calc</name> <argument_list pos:start="129:25" pos:end="129:48">(<argument pos:start="129:26" pos:end="129:38"><expr pos:start="129:26" pos:end="129:38"><operator pos:start="129:26" pos:end="129:26">&amp;</operator><name pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:27">s</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:34">trans</name><operator pos:start="129:35" pos:end="129:35">.</operator><name pos:start="129:36" pos:end="129:38">dct</name></name></expr></argument>,  <argument pos:start="129:42" pos:end="129:47"><expr pos:start="129:42" pos:end="129:47"><name pos:start="129:42" pos:end="129:47">coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:86"><expr pos:start="131:13" pos:end="131:85"><call pos:start="131:13" pos:end="131:85"><name pos:start="131:13" pos:end="131:37"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:18">dsp</name><operator pos:start="131:19" pos:end="131:19">.</operator><name pos:start="131:20" pos:end="131:37">vector_fmul_scalar</name></name><argument_list pos:start="131:38" pos:end="131:85">(<argument pos:start="131:39" pos:end="131:44"><expr pos:start="131:39" pos:end="131:44"><name pos:start="131:39" pos:end="131:44">coeffs</name></expr></argument>, <argument pos:start="131:47" pos:end="131:52"><expr pos:start="131:47" pos:end="131:52"><name pos:start="131:47" pos:end="131:52">coeffs</name></expr></argument>, <argument pos:start="131:55" pos:end="131:70"><expr pos:start="131:55" pos:end="131:70"><name pos:start="131:55" pos:end="131:66"><name pos:start="131:55" pos:end="131:55">s</name><operator pos:start="131:56" pos:end="131:57">-&gt;</operator><name pos:start="131:58" pos:end="131:66">frame_len</name></name> <operator pos:start="131:68" pos:end="131:68">/</operator> <literal type="number" pos:start="131:70" pos:end="131:70">2</literal></expr></argument>, <argument pos:start="131:73" pos:end="131:84"><expr pos:start="131:73" pos:end="131:84"><name pos:start="131:73" pos:end="131:84"><name pos:start="131:73" pos:end="131:73">s</name><operator pos:start="131:74" pos:end="131:75">-&gt;</operator><name pos:start="131:76" pos:end="131:84">frame_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <if type="elseif" pos:start="135:9" pos:end="137:49">else if <condition pos:start="135:17" pos:end="135:47">(<expr pos:start="135:18" pos:end="135:46"><name pos:start="135:18" pos:end="135:46">CONFIG_BINKAUDIO_RDFT_DECODER</name></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:49"><block_content pos:start="137:13" pos:end="137:49">

            <expr_stmt pos:start="137:13" pos:end="137:49"><expr pos:start="137:13" pos:end="137:48"><call pos:start="137:13" pos:end="137:48"><name pos:start="137:13" pos:end="137:24">ff_rdft_calc</name><argument_list pos:start="137:25" pos:end="137:48">(<argument pos:start="137:26" pos:end="137:39"><expr pos:start="137:26" pos:end="137:39"><operator pos:start="137:26" pos:end="137:26">&amp;</operator><name pos:start="137:27" pos:end="137:39"><name pos:start="137:27" pos:end="137:27">s</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:34">trans</name><operator pos:start="137:35" pos:end="137:35">.</operator><name pos:start="137:36" pos:end="137:39">rdft</name></name></expr></argument>, <argument pos:start="137:42" pos:end="137:47"><expr pos:start="137:42" pos:end="137:47"><name pos:start="137:42" pos:end="137:47">coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="143:5" pos:end="145:69"><expr pos:start="143:5" pos:end="145:68"><call pos:start="143:5" pos:end="145:68"><name pos:start="143:5" pos:end="143:41"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:15">fmt_conv</name><operator pos:start="143:16" pos:end="143:16">.</operator><name pos:start="143:17" pos:end="143:41">float_to_int16_interleave</name></name><argument_list pos:start="143:42" pos:end="145:68">(<argument pos:start="143:43" pos:end="143:45"><expr pos:start="143:43" pos:end="143:45"><name pos:start="143:43" pos:end="143:45">out</name></expr></argument>, <argument pos:start="143:48" pos:end="143:76"><expr pos:start="143:48" pos:end="143:76"><operator pos:start="143:48" pos:end="143:48">(</operator><specifier pos:start="143:49" pos:end="143:53">const</specifier> <name pos:start="143:55" pos:end="143:59">float</name> <operator pos:start="143:61" pos:end="143:61">*</operator><operator pos:start="143:62" pos:end="143:62">*</operator><operator pos:start="143:63" pos:end="143:63">)</operator><name pos:start="143:64" pos:end="143:76"><name pos:start="143:64" pos:end="143:64">s</name><operator pos:start="143:65" pos:end="143:66">-&gt;</operator><name pos:start="143:67" pos:end="143:76">coeffs_ptr</name></name></expr></argument>,

                                          <argument pos:start="145:43" pos:end="145:54"><expr pos:start="145:43" pos:end="145:54"><name pos:start="145:43" pos:end="145:54"><name pos:start="145:43" pos:end="145:43">s</name><operator pos:start="145:44" pos:end="145:45">-&gt;</operator><name pos:start="145:46" pos:end="145:54">frame_len</name></name></expr></argument>, <argument pos:start="145:57" pos:end="145:67"><expr pos:start="145:57" pos:end="145:67"><name pos:start="145:57" pos:end="145:67"><name pos:start="145:57" pos:end="145:57">s</name><operator pos:start="145:58" pos:end="145:59">-&gt;</operator><name pos:start="145:60" pos:end="145:67">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="161:5"><if pos:start="149:5" pos:end="161:5">if <condition pos:start="149:8" pos:end="149:18">(<expr pos:start="149:9" pos:end="149:17"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:17"><name pos:start="149:10" pos:end="149:10">s</name><operator pos:start="149:11" pos:end="149:12">-&gt;</operator><name pos:start="149:13" pos:end="149:17">first</name></name></expr>)</condition> <block pos:start="149:20" pos:end="161:5">{<block_content pos:start="151:9" pos:end="159:9">

        <decl_stmt pos:start="151:9" pos:end="151:49"><decl pos:start="151:9" pos:end="151:48"><type pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">int</name></type> <name pos:start="151:13" pos:end="151:17">count</name> <init pos:start="151:19" pos:end="151:48">= <expr pos:start="151:21" pos:end="151:48"><name pos:start="151:21" pos:end="151:34"><name pos:start="151:21" pos:end="151:21">s</name><operator pos:start="151:22" pos:end="151:23">-&gt;</operator><name pos:start="151:24" pos:end="151:34">overlap_len</name></name> <operator pos:start="151:36" pos:end="151:36">*</operator> <name pos:start="151:38" pos:end="151:48"><name pos:start="151:38" pos:end="151:38">s</name><operator pos:start="151:39" pos:end="151:40">-&gt;</operator><name pos:start="151:41" pos:end="151:48">channels</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="153:9" pos:end="153:35"><decl pos:start="153:9" pos:end="153:34"><type pos:start="153:9" pos:end="153:11"><name pos:start="153:9" pos:end="153:11">int</name></type> <name pos:start="153:13" pos:end="153:17">shift</name> <init pos:start="153:19" pos:end="153:34">= <expr pos:start="153:21" pos:end="153:34"><call pos:start="153:21" pos:end="153:34"><name pos:start="153:21" pos:end="153:27">av_log2</name><argument_list pos:start="153:28" pos:end="153:34">(<argument pos:start="153:29" pos:end="153:33"><expr pos:start="153:29" pos:end="153:33"><name pos:start="153:29" pos:end="153:33">count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:start="155:9" pos:end="159:9">for <control pos:start="155:13" pos:end="155:35">(<init pos:start="155:14" pos:end="155:19"><expr pos:start="155:14" pos:end="155:18"><name pos:start="155:14" pos:end="155:14">i</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>;</init> <condition pos:start="155:21" pos:end="155:30"><expr pos:start="155:21" pos:end="155:29"><name pos:start="155:21" pos:end="155:21">i</name> <operator pos:start="155:23" pos:end="155:23">&lt;</operator> <name pos:start="155:25" pos:end="155:29">count</name></expr>;</condition> <incr pos:start="155:32" pos:end="155:34"><expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:32">i</name><operator pos:start="155:33" pos:end="155:34">++</operator></expr></incr>)</control> <block pos:start="155:37" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:74">

            <expr_stmt pos:start="157:13" pos:end="157:74"><expr pos:start="157:13" pos:end="157:73"><name pos:start="157:13" pos:end="157:18"><name pos:start="157:13" pos:end="157:15">out</name><index pos:start="157:16" pos:end="157:18">[<expr pos:start="157:17" pos:end="157:17"><name pos:start="157:17" pos:end="157:17">i</name></expr>]</index></name> <operator pos:start="157:20" pos:end="157:20">=</operator> <operator pos:start="157:22" pos:end="157:22">(</operator><name pos:start="157:23" pos:end="157:36"><name pos:start="157:23" pos:end="157:23">s</name><operator pos:start="157:24" pos:end="157:25">-&gt;</operator><name pos:start="157:26" pos:end="157:33">previous</name><index pos:start="157:34" pos:end="157:36">[<expr pos:start="157:35" pos:end="157:35"><name pos:start="157:35" pos:end="157:35">i</name></expr>]</index></name> <operator pos:start="157:38" pos:end="157:38">*</operator> <operator pos:start="157:40" pos:end="157:40">(</operator><name pos:start="157:41" pos:end="157:45">count</name> <operator pos:start="157:47" pos:end="157:47">-</operator> <name pos:start="157:49" pos:end="157:49">i</name><operator pos:start="157:50" pos:end="157:50">)</operator> <operator pos:start="157:52" pos:end="157:52">+</operator> <name pos:start="157:54" pos:end="157:59"><name pos:start="157:54" pos:end="157:56">out</name><index pos:start="157:57" pos:end="157:59">[<expr pos:start="157:58" pos:end="157:58"><name pos:start="157:58" pos:end="157:58">i</name></expr>]</index></name> <operator pos:start="157:61" pos:end="157:61">*</operator> <name pos:start="157:63" pos:end="157:63">i</name><operator pos:start="157:64" pos:end="157:64">)</operator> <operator pos:start="157:66" pos:end="157:67">&gt;&gt;</operator> <name pos:start="157:69" pos:end="157:73">shift</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="167:56"><expr pos:start="165:5" pos:end="167:55"><call pos:start="165:5" pos:end="167:55"><name pos:start="165:5" pos:end="165:10">memcpy</name><argument_list pos:start="165:11" pos:end="167:55">(<argument pos:start="165:12" pos:end="165:22"><expr pos:start="165:12" pos:end="165:22"><name pos:start="165:12" pos:end="165:22"><name pos:start="165:12" pos:end="165:12">s</name><operator pos:start="165:13" pos:end="165:14">-&gt;</operator><name pos:start="165:15" pos:end="165:22">previous</name></name></expr></argument>, <argument pos:start="165:25" pos:end="165:43"><expr pos:start="165:25" pos:end="165:43"><name pos:start="165:25" pos:end="165:27">out</name> <operator pos:start="165:29" pos:end="165:29">+</operator> <name pos:start="165:31" pos:end="165:43"><name pos:start="165:31" pos:end="165:31">s</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:43">block_size</name></name></expr></argument>,

           <argument pos:start="167:12" pos:end="167:54"><expr pos:start="167:12" pos:end="167:54"><name pos:start="167:12" pos:end="167:25"><name pos:start="167:12" pos:end="167:12">s</name><operator pos:start="167:13" pos:end="167:14">-&gt;</operator><name pos:start="167:15" pos:end="167:25">overlap_len</name></name> <operator pos:start="167:27" pos:end="167:27">*</operator> <name pos:start="167:29" pos:end="167:39"><name pos:start="167:29" pos:end="167:29">s</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:39">channels</name></name> <operator pos:start="167:41" pos:end="167:41">*</operator> <sizeof pos:start="167:43" pos:end="167:54">sizeof<argument_list pos:start="167:49" pos:end="167:54">(<argument pos:start="167:50" pos:end="167:53"><expr pos:start="167:50" pos:end="167:53"><operator pos:start="167:50" pos:end="167:50">*</operator><name pos:start="167:51" pos:end="167:53">out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:17"><expr pos:start="171:5" pos:end="171:16"><name pos:start="171:5" pos:end="171:12"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:12">first</name></name> <operator pos:start="171:14" pos:end="171:14">=</operator> <literal type="number" pos:start="171:16" pos:end="171:16">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
