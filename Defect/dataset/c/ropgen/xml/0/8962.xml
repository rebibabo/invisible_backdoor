<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8962.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">bool</name></type> <name pos:start="1:20" pos:end="1:39">cpu_handle_interrupt</name><parameter_list pos:start="1:40" pos:end="3:67">(<parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">CPUState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">cpu</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:66"><decl pos:start="3:41" pos:end="3:66"><type pos:start="3:41" pos:end="3:66"><name pos:start="3:41" pos:end="3:56">TranslationBlock</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier><modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:66">last_tb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:17">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:25">interrupt_request</name> <init pos:start="9:27" pos:end="9:50">= <expr pos:start="9:29" pos:end="9:50"><name pos:start="9:29" pos:end="9:50"><name pos:start="9:29" pos:end="9:31">cpu</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:50">interrupt_request</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="123:5"><if pos:start="13:5" pos:end="123:5">if <condition pos:start="13:8" pos:end="13:36">(<expr pos:start="13:9" pos:end="13:35"><call pos:start="13:9" pos:end="13:35"><name pos:start="13:9" pos:end="13:16">unlikely</name><argument_list pos:start="13:17" pos:end="13:35">(<argument pos:start="13:18" pos:end="13:34"><expr pos:start="13:18" pos:end="13:34"><name pos:start="13:18" pos:end="13:34">interrupt_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:38" pos:end="123:5">{<block_content pos:start="15:9" pos:end="121:9">

        <if_stmt pos:start="15:9" pos:end="21:9"><if pos:start="15:9" pos:end="21:9">if <condition pos:start="15:12" pos:end="15:60">(<expr pos:start="15:13" pos:end="15:59"><call pos:start="15:13" pos:end="15:59"><name pos:start="15:13" pos:end="15:20">unlikely</name><argument_list pos:start="15:21" pos:end="15:59">(<argument pos:start="15:22" pos:end="15:58"><expr pos:start="15:22" pos:end="15:58"><name pos:start="15:22" pos:end="15:44"><name pos:start="15:22" pos:end="15:24">cpu</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:44">singlestep_enabled</name></name> <operator pos:start="15:46" pos:end="15:46">&amp;</operator> <name pos:start="15:48" pos:end="15:58">SSTEP_NOIRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:62" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:59">

            <comment type="block" pos:start="17:13" pos:end="17:61">/* Mask out external interrupts for this step. */</comment>

            <expr_stmt pos:start="19:13" pos:end="19:59"><expr pos:start="19:13" pos:end="19:58"><name pos:start="19:13" pos:end="19:29">interrupt_request</name> <operator pos:start="19:31" pos:end="19:32">&amp;=</operator> <operator pos:start="19:34" pos:end="19:34">~</operator><name pos:start="19:35" pos:end="19:58">CPU_INTERRUPT_SSTEP_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:52">(<expr pos:start="23:13" pos:end="23:51"><name pos:start="23:13" pos:end="23:29">interrupt_request</name> <operator pos:start="23:31" pos:end="23:31">&amp;</operator> <name pos:start="23:33" pos:end="23:51">CPU_INTERRUPT_DEBUG</name></expr>)</condition> <block pos:start="23:54" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:24">

            <expr_stmt pos:start="25:13" pos:end="25:59"><expr pos:start="25:13" pos:end="25:58"><name pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:15">cpu</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:34">interrupt_request</name></name> <operator pos:start="25:36" pos:end="25:37">&amp;=</operator> <operator pos:start="25:39" pos:end="25:39">~</operator><name pos:start="25:40" pos:end="25:58">CPU_INTERRUPT_DEBUG</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:46"><expr pos:start="27:13" pos:end="27:45"><name pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:15">cpu</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:32">exception_index</name></name> <operator pos:start="27:34" pos:end="27:34">=</operator> <name pos:start="27:36" pos:end="27:45">EXCP_DEBUG</name></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:24">return <expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">true</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="109:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:71">(<expr pos:start="33:13" pos:end="33:70"><name pos:start="33:13" pos:end="33:23">replay_mode</name> <operator pos:start="33:25" pos:end="33:26">==</operator> <name pos:start="33:28" pos:end="33:43">REPLAY_MODE_PLAY</name> <operator pos:start="33:45" pos:end="33:46">&amp;&amp;</operator> <operator pos:start="33:48" pos:end="33:48">!</operator><call pos:start="33:49" pos:end="33:70"><name pos:start="33:49" pos:end="33:68">replay_has_interrupt</name><argument_list pos:start="33:69" pos:end="33:70">()</argument_list></call></expr>)</condition> <block pos:start="33:73" pos:end="37:9">{<block_content>

            <comment type="block" pos:start="35:13" pos:end="35:28">/* Do nothing */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="37:11" pos:end="52:0">else if <condition pos:start="37:19" pos:end="37:58">(<expr pos:start="37:20" pos:end="37:57"><name pos:start="37:20" pos:end="37:36">interrupt_request</name> <operator pos:start="37:38" pos:end="37:38">&amp;</operator> <name pos:start="37:40" pos:end="37:57">CPU_INTERRUPT_HALT</name></expr>)</condition> <block pos:start="37:60" pos:end="52:0">{<block_content pos:start="39:13" pos:end="47:24">

            <expr_stmt pos:start="39:13" pos:end="39:31"><expr pos:start="39:13" pos:end="39:30"><call pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:28">replay_interrupt</name><argument_list pos:start="39:29" pos:end="39:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:58"><expr pos:start="41:13" pos:end="41:57"><name pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:15">cpu</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:34">interrupt_request</name></name> <operator pos:start="41:36" pos:end="41:37">&amp;=</operator> <operator pos:start="41:39" pos:end="41:39">~</operator><name pos:start="41:40" pos:end="41:57">CPU_INTERRUPT_HALT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:28"><expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:15">cpu</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:23">halted</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <literal type="number" pos:start="43:27" pos:end="43:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:44"><expr pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:15">cpu</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:32">exception_index</name></name> <operator pos:start="45:34" pos:end="45:34">=</operator> <name pos:start="45:36" pos:end="45:43">EXCP_HLT</name></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:24">return <expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">true</name></expr>;</return>

        </block_content>}</block></if>

<cpp:if pos:start="51:1" pos:end="51:24">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:24"><call pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:11">defined</name><argument_list pos:start="51:12" pos:end="51:24">(<argument pos:start="51:13" pos:end="51:23"><expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if type="elseif" pos:start="53:9" pos:end="72:0">else if <condition pos:start="53:17" pos:end="53:56">(<expr pos:start="53:18" pos:end="53:55"><name pos:start="53:18" pos:end="53:34">interrupt_request</name> <operator pos:start="53:36" pos:end="53:36">&amp;</operator> <name pos:start="53:38" pos:end="53:55">CPU_INTERRUPT_INIT</name></expr>)</condition> <block pos:start="53:58" pos:end="72:0">{<block_content pos:start="55:13" pos:end="67:24">

            <decl_stmt pos:start="55:13" pos:end="55:43"><decl pos:start="55:13" pos:end="55:42"><type pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:18">X86CPU</name> <modifier pos:start="55:20" pos:end="55:20">*</modifier></type><name pos:start="55:21" pos:end="55:27">x86_cpu</name> <init pos:start="55:29" pos:end="55:42">= <expr pos:start="55:31" pos:end="55:42"><call pos:start="55:31" pos:end="55:42"><name pos:start="55:31" pos:end="55:37">X86_CPU</name><argument_list pos:start="55:38" pos:end="55:42">(<argument pos:start="55:39" pos:end="55:41"><expr pos:start="55:39" pos:end="55:41"><name pos:start="55:39" pos:end="55:41">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="57:13" pos:end="57:46"><decl pos:start="57:13" pos:end="57:45"><type pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:24">CPUArchState</name> <modifier pos:start="57:26" pos:end="57:26">*</modifier></type><name pos:start="57:27" pos:end="57:29">env</name> <init pos:start="57:31" pos:end="57:45">= <expr pos:start="57:33" pos:end="57:45"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:45"><name pos:start="57:34" pos:end="57:40">x86_cpu</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:45">env</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:31"><expr pos:start="59:13" pos:end="59:30"><call pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:28">replay_interrupt</name><argument_list pos:start="59:29" pos:end="59:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:68"><expr pos:start="61:13" pos:end="61:67"><call pos:start="61:13" pos:end="61:67"><name pos:start="61:13" pos:end="61:41">cpu_svm_check_intercept_param</name><argument_list pos:start="61:42" pos:end="61:67">(<argument pos:start="61:43" pos:end="61:45"><expr pos:start="61:43" pos:end="61:45"><name pos:start="61:43" pos:end="61:45">env</name></expr></argument>, <argument pos:start="61:48" pos:end="61:60"><expr pos:start="61:48" pos:end="61:60"><name pos:start="61:48" pos:end="61:60">SVM_EXIT_INIT</name></expr></argument>, <argument pos:start="61:63" pos:end="61:63"><expr pos:start="61:63" pos:end="61:63"><literal type="number" pos:start="61:63" pos:end="61:63">0</literal></expr></argument>, <argument pos:start="61:66" pos:end="61:66"><expr pos:start="61:66" pos:end="61:66"><literal type="number" pos:start="61:66" pos:end="61:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><call pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:23">do_cpu_init</name><argument_list pos:start="63:24" pos:end="63:32">(<argument pos:start="63:25" pos:end="63:31"><expr pos:start="63:25" pos:end="63:31"><name pos:start="63:25" pos:end="63:31">x86_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:47"><expr pos:start="65:13" pos:end="65:46"><name pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:15">cpu</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:32">exception_index</name></name> <operator pos:start="65:34" pos:end="65:34">=</operator> <name pos:start="65:36" pos:end="65:46">EXCP_HALTED</name></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:24">return <expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">true</name></expr>;</return>

        </block_content>}</block></if>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

        <if type="elseif" pos:start="73:9" pos:end="84:0">else if <condition pos:start="73:17" pos:end="73:57">(<expr pos:start="73:18" pos:end="73:56"><name pos:start="73:18" pos:end="73:34">interrupt_request</name> <operator pos:start="73:36" pos:end="73:36">&amp;</operator> <name pos:start="73:38" pos:end="73:56">CPU_INTERRUPT_RESET</name></expr>)</condition> <block pos:start="73:59" pos:end="84:0">{<block_content pos:start="75:13" pos:end="79:24">

            <expr_stmt pos:start="75:13" pos:end="75:31"><expr pos:start="75:13" pos:end="75:30"><call pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:28">replay_interrupt</name><argument_list pos:start="75:29" pos:end="75:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:27"><expr pos:start="77:13" pos:end="77:26"><call pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:21">cpu_reset</name><argument_list pos:start="77:22" pos:end="77:26">(<argument pos:start="77:23" pos:end="77:25"><expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:24">return <expr pos:start="79:20" pos:end="79:23"><name pos:start="79:20" pos:end="79:23">true</name></expr>;</return>

        </block_content>}</block></if>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="85:9" pos:end="91:49">/* The target hook has 3 exit conditions:

           False when the interrupt isn't processed,

           True when it is, and we should restart on a new TB,

           and via longjmp via cpu_loop_exit.  */</comment>

        <else pos:start="93:9" pos:end="109:9">else <block pos:start="93:14" pos:end="109:9">{<block_content pos:start="95:13" pos:end="107:55">

            <if_stmt pos:start="95:13" pos:end="101:13"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="95:63">(<expr pos:start="95:17" pos:end="95:62"><call pos:start="95:17" pos:end="95:62"><name pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:18">cc</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:38">cpu_exec_interrupt</name></name><argument_list pos:start="95:39" pos:end="95:62">(<argument pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:42">cpu</name></expr></argument>, <argument pos:start="95:45" pos:end="95:61"><expr pos:start="95:45" pos:end="95:61"><name pos:start="95:45" pos:end="95:61">interrupt_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:65" pos:end="101:13">{<block_content pos:start="97:17" pos:end="99:32">

                <expr_stmt pos:start="97:17" pos:end="97:35"><expr pos:start="97:17" pos:end="97:34"><call pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:32">replay_interrupt</name><argument_list pos:start="97:33" pos:end="97:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:32"><expr pos:start="99:17" pos:end="99:31"><operator pos:start="99:17" pos:end="99:17">*</operator><name pos:start="99:18" pos:end="99:24">last_tb</name> <operator pos:start="99:26" pos:end="99:26">=</operator> <name pos:start="99:28" pos:end="99:31">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="103:13" pos:end="105:54">/* The target hook may have updated the 'cpu-&gt;interrupt_request';

             * reload the 'interrupt_request' value */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:55"><expr pos:start="107:13" pos:end="107:54"><name pos:start="107:13" pos:end="107:29">interrupt_request</name> <operator pos:start="107:31" pos:end="107:31">=</operator> <name pos:start="107:33" pos:end="107:54"><name pos:start="107:33" pos:end="107:35">cpu</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:54">interrupt_request</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="121:9">if <condition pos:start="111:12" pos:end="111:53">(<expr pos:start="111:13" pos:end="111:52"><name pos:start="111:13" pos:end="111:29">interrupt_request</name> <operator pos:start="111:31" pos:end="111:31">&amp;</operator> <name pos:start="111:33" pos:end="111:52">CPU_INTERRUPT_EXITTB</name></expr>)</condition> <block pos:start="111:55" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:28">

            <expr_stmt pos:start="113:13" pos:end="113:60"><expr pos:start="113:13" pos:end="113:59"><name pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:15">cpu</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:34">interrupt_request</name></name> <operator pos:start="113:36" pos:end="113:37">&amp;=</operator> <operator pos:start="113:39" pos:end="113:39">~</operator><name pos:start="113:40" pos:end="113:59">CPU_INTERRUPT_EXITTB</name></expr>;</expr_stmt>

            <comment type="block" pos:start="115:13" pos:end="117:46">/* ensure that no TB jump will be modified as

               the program flow was changed */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:28"><expr pos:start="119:13" pos:end="119:27"><operator pos:start="119:13" pos:end="119:13">*</operator><name pos:start="119:14" pos:end="119:20">last_tb</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:27">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="125:76">(<expr pos:start="125:9" pos:end="125:75"><call pos:start="125:9" pos:end="125:75"><name pos:start="125:9" pos:end="125:16">unlikely</name><argument_list pos:start="125:17" pos:end="125:75">(<argument pos:start="125:18" pos:end="125:74"><expr pos:start="125:18" pos:end="125:74"><call pos:start="125:18" pos:end="125:48"><name pos:start="125:18" pos:end="125:28">atomic_read</name><argument_list pos:start="125:29" pos:end="125:48">(<argument pos:start="125:30" pos:end="125:47"><expr pos:start="125:30" pos:end="125:47"><operator pos:start="125:30" pos:end="125:30">&amp;</operator><name pos:start="125:31" pos:end="125:47"><name pos:start="125:31" pos:end="125:33">cpu</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:47">exit_request</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:50" pos:end="125:51">||</operator> <call pos:start="125:53" pos:end="125:74"><name pos:start="125:53" pos:end="125:72">replay_has_interrupt</name><argument_list pos:start="125:73" pos:end="125:74">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:78" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:20">

        <expr_stmt pos:start="127:9" pos:end="127:42"><expr pos:start="127:9" pos:end="127:41"><call pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:18">atomic_set</name><argument_list pos:start="127:19" pos:end="127:41">(<argument pos:start="127:20" pos:end="127:37"><expr pos:start="127:20" pos:end="127:37"><operator pos:start="127:20" pos:end="127:20">&amp;</operator><name pos:start="127:21" pos:end="127:37"><name pos:start="127:21" pos:end="127:23">cpu</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:37">exit_request</name></name></expr></argument>, <argument pos:start="127:40" pos:end="127:40"><expr pos:start="127:40" pos:end="127:40"><literal type="number" pos:start="127:40" pos:end="127:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:46"><expr pos:start="129:9" pos:end="129:45"><name pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:11">cpu</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:28">exception_index</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <name pos:start="129:32" pos:end="129:45">EXCP_INTERRUPT</name></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:20">return <expr pos:start="131:16" pos:end="131:19"><name pos:start="131:16" pos:end="131:19">true</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="137:5" pos:end="137:17">return <expr pos:start="137:12" pos:end="137:16"><name pos:start="137:12" pos:end="137:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
