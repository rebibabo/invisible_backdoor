<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15072.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:16">map_f</name><parameter_list pos:start="1:17" pos:end="1:58">(<parameter pos:start="1:18" pos:end="1:34"><decl pos:start="1:18" pos:end="1:34"><type pos:start="1:18" pos:end="1:34"><name pos:start="1:18" pos:end="1:29">BlockBackend</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">blk</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:44"><decl pos:start="1:37" pos:end="1:44"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:44">argc</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:22">nb_sectors</name></decl>, <decl pos:start="7:25" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:25" pos:end="7:37">total_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:15"><name pos:start="9:10" pos:end="9:11">s1</name><index pos:start="9:12" pos:end="9:15">[<expr pos:start="9:13" pos:end="9:14"><literal type="number" pos:start="9:13" pos:end="9:14">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:15">num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">retstr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:10">offset</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:17">total_sectors</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:39"><name pos:start="21:21" pos:end="21:34">blk_nb_sectors</name><argument_list pos:start="21:35" pos:end="21:39">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:21">total_sectors</name> <operator pos:start="23:23" pos:end="23:23">&lt;</operator> <literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr>)</condition> <block pos:start="23:28" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:17">

        <expr_stmt pos:start="25:9" pos:end="27:47"><expr pos:start="25:9" pos:end="27:46"><call pos:start="25:9" pos:end="27:46"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="27:46">(<argument pos:start="25:22" pos:end="25:55"><expr pos:start="25:22" pos:end="25:55"><literal type="string" pos:start="25:22" pos:end="25:55">"Failed to query image length: %s"</literal></expr></argument>,

                     <argument pos:start="27:22" pos:end="27:45"><expr pos:start="27:22" pos:end="27:45"><call pos:start="27:22" pos:end="27:45"><name pos:start="27:22" pos:end="27:29">strerror</name><argument_list pos:start="27:30" pos:end="27:45">(<argument pos:start="27:31" pos:end="27:44"><expr pos:start="27:31" pos:end="27:44"><operator pos:start="27:31" pos:end="27:31">-</operator><name pos:start="27:32" pos:end="27:44">total_sectors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:14">nb_sectors</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:30">total_sectors</name></expr>;</expr_stmt>



    <do pos:start="39:5" pos:end="75:37">do <block pos:start="39:8" pos:end="75:5">{<block_content pos:start="41:9" pos:end="73:26">

        <expr_stmt pos:start="41:9" pos:end="41:70"><expr pos:start="41:9" pos:end="41:69"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:69"><name pos:start="41:15" pos:end="41:30">map_is_allocated</name><argument_list pos:start="41:31" pos:end="41:69">(<argument pos:start="41:32" pos:end="41:42"><expr pos:start="41:32" pos:end="41:42"><call pos:start="41:32" pos:end="41:42"><name pos:start="41:32" pos:end="41:37">blk_bs</name><argument_list pos:start="41:38" pos:end="41:42">(<argument pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:41">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:45" pos:end="41:50"><expr pos:start="41:45" pos:end="41:50"><name pos:start="41:45" pos:end="41:50">offset</name></expr></argument>, <argument pos:start="41:53" pos:end="41:62"><expr pos:start="41:53" pos:end="41:62"><name pos:start="41:53" pos:end="41:62">nb_sectors</name></expr></argument>, <argument pos:start="41:65" pos:end="41:68"><expr pos:start="41:65" pos:end="41:68"><operator pos:start="41:65" pos:end="41:65">&amp;</operator><name pos:start="41:66" pos:end="41:68">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="55:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:21">

            <expr_stmt pos:start="45:13" pos:end="45:80"><expr pos:start="45:13" pos:end="45:79"><call pos:start="45:13" pos:end="45:79"><name pos:start="45:13" pos:end="45:24">error_report</name><argument_list pos:start="45:25" pos:end="45:79">(<argument pos:start="45:26" pos:end="45:62"><expr pos:start="45:26" pos:end="45:62"><literal type="string" pos:start="45:26" pos:end="45:62">"Failed to get allocation status: %s"</literal></expr></argument>, <argument pos:start="45:65" pos:end="45:78"><expr pos:start="45:65" pos:end="45:78"><call pos:start="45:65" pos:end="45:78"><name pos:start="45:65" pos:end="45:72">strerror</name><argument_list pos:start="45:73" pos:end="45:78">(<argument pos:start="45:74" pos:end="45:77"><expr pos:start="45:74" pos:end="45:77"><operator pos:start="45:74" pos:end="45:74">-</operator><name pos:start="45:75" pos:end="45:77">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:21">return <expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="55:9">else if <condition pos:start="49:19" pos:end="49:24">(<expr pos:start="49:20" pos:end="49:23"><operator pos:start="49:20" pos:end="49:20">!</operator><name pos:start="49:21" pos:end="49:23">num</name></expr>)</condition> <block pos:start="49:26" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:21">

            <expr_stmt pos:start="51:13" pos:end="51:52"><expr pos:start="51:13" pos:end="51:51"><call pos:start="51:13" pos:end="51:51"><name pos:start="51:13" pos:end="51:24">error_report</name><argument_list pos:start="51:25" pos:end="51:51">(<argument pos:start="51:26" pos:end="51:50"><expr pos:start="51:26" pos:end="51:50"><literal type="string" pos:start="51:26" pos:end="51:50">"Unexpected end of image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:21">return <expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:14">retstr</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <ternary pos:start="59:18" pos:end="59:56"><condition pos:start="59:18" pos:end="59:22"><expr pos:start="59:18" pos:end="59:20"><name pos:start="59:18" pos:end="59:20">ret</name></expr> ?</condition><then pos:start="59:24" pos:end="59:38"> <expr pos:start="59:24" pos:end="59:38"><literal type="string" pos:start="59:24" pos:end="59:38">"    allocated"</literal></expr> </then><else pos:start="59:40" pos:end="59:56">: <expr pos:start="59:42" pos:end="59:56"><literal type="string" pos:start="59:42" pos:end="59:56">"not allocated"</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:47"><expr pos:start="61:9" pos:end="61:46"><call pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:14">cvtstr</name><argument_list pos:start="61:15" pos:end="61:46">(<argument pos:start="61:16" pos:end="61:29"><expr pos:start="61:16" pos:end="61:29"><name pos:start="61:16" pos:end="61:21">offset</name> <operator pos:start="61:23" pos:end="61:24">&lt;&lt;</operator> <literal type="number" pos:start="61:26" pos:end="61:29">9ULL</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><name pos:start="61:32" pos:end="61:33">s1</name></expr></argument>, <argument pos:start="61:36" pos:end="61:45"><expr pos:start="61:36" pos:end="61:45"><sizeof pos:start="61:36" pos:end="61:45">sizeof<argument_list pos:start="61:42" pos:end="61:45">(<argument pos:start="61:43" pos:end="61:44"><expr pos:start="61:43" pos:end="61:44"><name pos:start="61:43" pos:end="61:44">s1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="67:65"><expr pos:start="63:9" pos:end="67:64"><call pos:start="63:9" pos:end="67:64"><name pos:start="63:9" pos:end="63:14">printf</name><argument_list pos:start="63:15" pos:end="67:64">(<argument pos:start="63:16" pos:end="65:36"><expr pos:start="63:16" pos:end="65:36"><literal type="string" pos:start="63:16" pos:end="63:22">"[% 24"</literal> <name pos:start="63:24" pos:end="63:29">PRId64</name> <literal type="string" pos:start="63:31" pos:end="63:37">"] % 8"</literal> <name pos:start="63:39" pos:end="63:44">PRId64</name> <literal type="string" pos:start="63:46" pos:end="63:51">"/% 8"</literal> <name pos:start="63:53" pos:end="63:58">PRId64</name> <literal type="string" pos:start="63:60" pos:end="63:73">" sectors %s "</literal>

               <literal type="string" pos:start="65:16" pos:end="65:36">"at offset %s (%d)\n"</literal></expr></argument>,

               <argument pos:start="67:16" pos:end="67:29"><expr pos:start="67:16" pos:end="67:29"><name pos:start="67:16" pos:end="67:21">offset</name> <operator pos:start="67:23" pos:end="67:24">&lt;&lt;</operator> <literal type="number" pos:start="67:26" pos:end="67:29">9ULL</literal></expr></argument>, <argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">num</name></expr></argument>, <argument pos:start="67:37" pos:end="67:46"><expr pos:start="67:37" pos:end="67:46"><name pos:start="67:37" pos:end="67:46">nb_sectors</name></expr></argument>, <argument pos:start="67:49" pos:end="67:54"><expr pos:start="67:49" pos:end="67:54"><name pos:start="67:49" pos:end="67:54">retstr</name></expr></argument>, <argument pos:start="67:57" pos:end="67:58"><expr pos:start="67:57" pos:end="67:58"><name pos:start="67:57" pos:end="67:58">s1</name></expr></argument>, <argument pos:start="67:61" pos:end="67:63"><expr pos:start="67:61" pos:end="67:63"><name pos:start="67:61" pos:end="67:63">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:14">offset</name> <operator pos:start="71:16" pos:end="71:17">+=</operator> <name pos:start="71:19" pos:end="71:21">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:18">nb_sectors</name> <operator pos:start="73:20" pos:end="73:21">-=</operator> <name pos:start="73:23" pos:end="73:25">num</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="75:13" pos:end="75:36">(<expr pos:start="75:14" pos:end="75:35"><name pos:start="75:14" pos:end="75:19">offset</name> <operator pos:start="75:21" pos:end="75:21">&lt;</operator> <name pos:start="75:23" pos:end="75:35">total_sectors</name></expr>)</condition>;</do>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
