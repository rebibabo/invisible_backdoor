<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5183.c" pos:tabs="8"><function pos:start="1:1" pos:end="679:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">wavpack_encode_block</name><parameter_list pos:start="1:32" pos:end="5:59">(<parameter pos:start="1:33" pos:end="1:55"><decl pos:start="1:33" pos:end="1:55"><type pos:start="1:33" pos:end="1:55"><name pos:start="1:33" pos:end="1:52">WavPackEncodeContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><name pos:start="3:33" pos:end="3:39">int32_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:50">samples_l</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:70"><decl pos:start="3:53" pos:end="3:70"><type pos:start="3:53" pos:end="3:70"><name pos:start="3:53" pos:end="3:59">int32_t</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:70">samples_r</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:44"><decl pos:start="5:33" pos:end="5:44"><type pos:start="5:33" pos:end="5:44"><name pos:start="5:33" pos:end="5:39">uint8_t</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:44">out</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:58"><decl pos:start="5:47" pos:end="5:58"><type pos:start="5:47" pos:end="5:58"><name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:58">out_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="679:1">{<block_content pos:start="9:5" pos:end="677:22">

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">block_size</name></decl>, <decl pos:start="9:21" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:25">start</name></decl>, <decl pos:start="9:28" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:30">end</name></decl>, <decl pos:start="9:33" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:33" pos:end="9:41">data_size</name></decl>, <decl pos:start="9:44" pos:end="9:49"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:44" pos:end="9:49">tcount</name></decl>, <decl pos:start="9:52" pos:end="9:55"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:52" pos:end="9:55">temp</name></decl>, <decl pos:start="9:58" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:58" pos:end="9:58">m</name> <init pos:start="9:60" pos:end="9:62">= <expr pos:start="9:62" pos:end="9:62"><literal type="number" pos:start="9:62" pos:end="9:62">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">ret</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>, <decl pos:start="11:24" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:32">got_extra</name> <init pos:start="11:34" pos:end="11:36">= <expr pos:start="11:36" pos:end="11:36"><literal type="number" pos:start="11:36" pos:end="11:36">0</literal></expr></init></decl>, <decl pos:start="11:39" pos:end="11:67"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:39" pos:end="11:48">nb_samples</name> <init pos:start="11:50" pos:end="11:67">= <expr pos:start="11:52" pos:end="11:67"><name pos:start="11:52" pos:end="11:67"><name pos:start="11:52" pos:end="11:52">s</name><operator pos:start="11:53" pos:end="11:54">-&gt;</operator><name pos:start="11:55" pos:end="11:67">block_samples</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">crc</name> <init pos:start="13:18" pos:end="13:30">= <expr pos:start="13:20" pos:end="13:30"><literal type="number" pos:start="13:20" pos:end="13:30">0xffffffffu</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:17">Decorr</name></name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">dpp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">PutByteContext</name></type> <name pos:start="17:20" pos:end="17:21">pb</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="71:5"><if pos:start="21:5" pos:end="71:5">if <condition pos:start="21:8" pos:end="21:50">(<expr pos:start="21:9" pos:end="21:49"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:18"><name pos:start="21:11" pos:end="21:11">s</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:18">flags</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:28">WV_MONO</name><operator pos:start="21:29" pos:end="21:29">)</operator> <operator pos:start="21:31" pos:end="21:32">&amp;&amp;</operator> <name pos:start="21:34" pos:end="21:49"><name pos:start="21:34" pos:end="21:34">s</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:49">optimize_mono</name></name></expr>)</condition> <block pos:start="21:52" pos:end="71:5">{<block_content pos:start="23:9" pos:end="69:9">

        <decl_stmt pos:start="23:9" pos:end="23:34"><decl pos:start="23:9" pos:end="23:23"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">int32_t</name></type> <name pos:start="23:17" pos:end="23:19">lor</name> <init pos:start="23:21" pos:end="23:23">= <expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></init></decl>, <decl pos:start="23:26" pos:end="23:33"><type ref="prev" pos:start="23:9" pos:end="23:15"/><name pos:start="23:26" pos:end="23:29">diff</name> <init pos:start="23:31" pos:end="23:33">= <expr pos:start="23:33" pos:end="23:33"><literal type="number" pos:start="23:33" pos:end="23:33">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="27:9" pos:end="39:9">for <control pos:start="27:13" pos:end="27:40">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:35"><expr pos:start="27:21" pos:end="27:34"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:34">nb_samples</name></expr>;</condition> <incr pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:37">i</name><operator pos:start="27:38" pos:end="27:39">++</operator></expr></incr>)</control> <block pos:start="27:42" pos:end="39:9">{<block_content pos:start="29:13" pos:end="37:22">

            <expr_stmt pos:start="29:13" pos:end="29:48"><expr pos:start="29:13" pos:end="29:47"><name pos:start="29:13" pos:end="29:15">lor</name>  <operator pos:start="29:18" pos:end="29:19">|=</operator> <name pos:start="29:21" pos:end="29:32"><name pos:start="29:21" pos:end="29:29">samples_l</name><index pos:start="29:30" pos:end="29:32">[<expr pos:start="29:31" pos:end="29:31"><name pos:start="29:31" pos:end="29:31">i</name></expr>]</index></name> <operator pos:start="29:34" pos:end="29:34">|</operator> <name pos:start="29:36" pos:end="29:47"><name pos:start="29:36" pos:end="29:44">samples_r</name><index pos:start="29:45" pos:end="29:47">[<expr pos:start="29:46" pos:end="29:46"><name pos:start="29:46" pos:end="29:46">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:48"><expr pos:start="31:13" pos:end="31:47"><name pos:start="31:13" pos:end="31:16">diff</name> <operator pos:start="31:18" pos:end="31:19">|=</operator> <name pos:start="31:21" pos:end="31:32"><name pos:start="31:21" pos:end="31:29">samples_l</name><index pos:start="31:30" pos:end="31:32">[<expr pos:start="31:31" pos:end="31:31"><name pos:start="31:31" pos:end="31:31">i</name></expr>]</index></name> <operator pos:start="31:34" pos:end="31:34">-</operator> <name pos:start="31:36" pos:end="31:47"><name pos:start="31:36" pos:end="31:44">samples_r</name><index pos:start="31:45" pos:end="31:47">[<expr pos:start="31:46" pos:end="31:46"><name pos:start="31:46" pos:end="31:46">i</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="35:13" pos:end="37:22"><if pos:start="35:13" pos:end="37:22">if <condition pos:start="35:16" pos:end="35:28">(<expr pos:start="35:17" pos:end="35:27"><name pos:start="35:17" pos:end="35:19">lor</name> <operator pos:start="35:21" pos:end="35:22">&amp;&amp;</operator> <name pos:start="35:24" pos:end="35:27">diff</name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:22"><block_content pos:start="37:17" pos:end="37:22">

                <break pos:start="37:17" pos:end="37:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="43:9" pos:end="69:9"><if pos:start="43:9" pos:end="61:9">if <condition pos:start="43:12" pos:end="43:44">(<expr pos:start="43:13" pos:end="43:43"><name pos:start="43:13" pos:end="43:13">i</name> <operator pos:start="43:15" pos:end="43:16">==</operator> <name pos:start="43:18" pos:end="43:27">nb_samples</name> <operator pos:start="43:29" pos:end="43:30">&amp;&amp;</operator> <name pos:start="43:32" pos:end="43:34">lor</name> <operator pos:start="43:36" pos:end="43:37">&amp;&amp;</operator> <operator pos:start="43:39" pos:end="43:39">!</operator><name pos:start="43:40" pos:end="43:43">diff</name></expr>)</condition> <block pos:start="43:46" pos:end="61:9">{<block_content pos:start="45:13" pos:end="59:13">

            <expr_stmt pos:start="45:13" pos:end="45:61"><expr pos:start="45:13" pos:end="45:60"><name pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:20">flags</name></name> <operator pos:start="45:22" pos:end="45:23">&amp;=</operator> <operator pos:start="45:25" pos:end="45:25">~</operator><operator pos:start="45:26" pos:end="45:26">(</operator><name pos:start="45:27" pos:end="45:41">WV_JOINT_STEREO</name> <operator pos:start="45:43" pos:end="45:43">|</operator> <name pos:start="45:45" pos:end="45:59">WV_CROSS_DECORR</name><operator pos:start="45:60" pos:end="45:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:40"><expr pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:20">flags</name></name> <operator pos:start="47:22" pos:end="47:23">|=</operator> <name pos:start="47:25" pos:end="47:39">WV_FALSE_STEREO</name></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="59:13"><if pos:start="51:13" pos:end="59:13">if <condition pos:start="51:16" pos:end="51:33">(<expr pos:start="51:17" pos:end="51:32"><operator pos:start="51:17" pos:end="51:17">!</operator><name pos:start="51:18" pos:end="51:32"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:32">false_stereo</name></name></expr>)</condition> <block pos:start="51:35" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:28">

                <expr_stmt pos:start="53:17" pos:end="53:36"><expr pos:start="53:17" pos:end="53:35"><name pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:31">false_stereo</name></name> <operator pos:start="53:33" pos:end="53:33">=</operator> <literal type="number" pos:start="53:35" pos:end="53:35">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:33"><expr pos:start="55:17" pos:end="55:32"><name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:28">num_terms</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <literal type="number" pos:start="55:32" pos:end="55:32">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:28"><expr pos:start="57:17" pos:end="57:27"><call pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:21">CLEAR</name><argument_list pos:start="57:22" pos:end="57:27">(<argument pos:start="57:23" pos:end="57:26"><expr pos:start="57:23" pos:end="57:26"><name pos:start="57:23" pos:end="57:26"><name pos:start="57:23" pos:end="57:23">s</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:26">w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="69:9">else if <condition pos:start="61:19" pos:end="61:35">(<expr pos:start="61:20" pos:end="61:34"><name pos:start="61:20" pos:end="61:34"><name pos:start="61:20" pos:end="61:20">s</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:34">false_stereo</name></name></expr>)</condition> <block pos:start="61:37" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:24">

            <expr_stmt pos:start="63:13" pos:end="63:32"><expr pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:27">false_stereo</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:29"><expr pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:24">num_terms</name></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <literal type="number" pos:start="65:28" pos:end="65:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:23"><call pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:17">CLEAR</name><argument_list pos:start="67:18" pos:end="67:23">(<argument pos:start="67:19" pos:end="67:22"><expr pos:start="67:19" pos:end="67:22"><name pos:start="67:19" pos:end="67:22"><name pos:start="67:19" pos:end="67:19">s</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:22">w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="101:5"><if pos:start="75:5" pos:end="101:5">if <condition pos:start="75:8" pos:end="75:30">(<expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:16">flags</name></name> <operator pos:start="75:18" pos:end="75:18">&amp;</operator> <name pos:start="75:20" pos:end="75:29">SHIFT_MASK</name></expr>)</condition> <block pos:start="75:32" pos:end="101:5">{<block_content pos:start="77:9" pos:end="99:47">

        <decl_stmt pos:start="77:9" pos:end="77:57"><decl pos:start="77:9" pos:end="77:56"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:17">shift</name> <init pos:start="77:19" pos:end="77:56">= <expr pos:start="77:21" pos:end="77:56"><operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:29"><name pos:start="77:22" pos:end="77:22">s</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:29">flags</name></name> <operator pos:start="77:31" pos:end="77:31">&amp;</operator> <name pos:start="77:33" pos:end="77:42">SHIFT_MASK</name><operator pos:start="77:43" pos:end="77:43">)</operator> <operator pos:start="77:45" pos:end="77:46">&gt;&gt;</operator> <name pos:start="77:48" pos:end="77:56">SHIFT_LSB</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:51"><decl pos:start="79:9" pos:end="79:50"><type pos:start="79:9" pos:end="79:11"><name pos:start="79:9" pos:end="79:11">int</name></type> <name pos:start="79:13" pos:end="79:15">mag</name> <init pos:start="79:17" pos:end="79:50">= <expr pos:start="79:19" pos:end="79:50"><operator pos:start="79:19" pos:end="79:19">(</operator><name pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:27">flags</name></name> <operator pos:start="79:29" pos:end="79:29">&amp;</operator> <name pos:start="79:31" pos:end="79:38">MAG_MASK</name><operator pos:start="79:39" pos:end="79:39">)</operator> <operator pos:start="79:41" pos:end="79:42">&gt;&gt;</operator> <name pos:start="79:44" pos:end="79:50">MAG_LSB</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="83:9" pos:end="89:66"><if pos:start="83:9" pos:end="85:53">if <condition pos:start="83:12" pos:end="83:36">(<expr pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:20">flags</name></name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:35">WV_MONO_DATA</name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:53"><block_content pos:start="85:13" pos:end="85:53">

            <expr_stmt pos:start="85:13" pos:end="85:53"><expr pos:start="85:13" pos:end="85:52"><call pos:start="85:13" pos:end="85:52"><name pos:start="85:13" pos:end="85:22">shift_mono</name><argument_list pos:start="85:23" pos:end="85:52">(<argument pos:start="85:24" pos:end="85:32"><expr pos:start="85:24" pos:end="85:32"><name pos:start="85:24" pos:end="85:32">samples_l</name></expr></argument>, <argument pos:start="85:35" pos:end="85:44"><expr pos:start="85:35" pos:end="85:44"><name pos:start="85:35" pos:end="85:44">nb_samples</name></expr></argument>, <argument pos:start="85:47" pos:end="85:51"><expr pos:start="85:47" pos:end="85:51"><name pos:start="85:47" pos:end="85:51">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="87:9" pos:end="89:66">else<block type="pseudo" pos:start="89:13" pos:end="89:66"><block_content pos:start="89:13" pos:end="89:66">

            <expr_stmt pos:start="89:13" pos:end="89:66"><expr pos:start="89:13" pos:end="89:65"><call pos:start="89:13" pos:end="89:65"><name pos:start="89:13" pos:end="89:24">shift_stereo</name><argument_list pos:start="89:25" pos:end="89:65">(<argument pos:start="89:26" pos:end="89:34"><expr pos:start="89:26" pos:end="89:34"><name pos:start="89:26" pos:end="89:34">samples_l</name></expr></argument>, <argument pos:start="89:37" pos:end="89:45"><expr pos:start="89:37" pos:end="89:45"><name pos:start="89:37" pos:end="89:45">samples_r</name></expr></argument>, <argument pos:start="89:48" pos:end="89:57"><expr pos:start="89:48" pos:end="89:57"><name pos:start="89:48" pos:end="89:57">nb_samples</name></expr></argument>, <argument pos:start="89:60" pos:end="89:64"><expr pos:start="89:60" pos:end="89:64"><name pos:start="89:60" pos:end="89:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="93:9" pos:end="99:47"><if pos:start="93:9" pos:end="95:34">if <condition pos:start="93:12" pos:end="93:31">(<expr pos:start="93:13" pos:end="93:30"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:16">mag</name> <operator pos:start="93:18" pos:end="93:19">-=</operator> <name pos:start="93:21" pos:end="93:25">shift</name><operator pos:start="93:26" pos:end="93:26">)</operator> <operator pos:start="93:28" pos:end="93:28">&lt;</operator> <literal type="number" pos:start="93:30" pos:end="93:30">0</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:34"><block_content pos:start="95:13" pos:end="95:34">

            <expr_stmt pos:start="95:13" pos:end="95:34"><expr pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:20">flags</name></name> <operator pos:start="95:22" pos:end="95:23">&amp;=</operator> <operator pos:start="95:25" pos:end="95:25">~</operator><name pos:start="95:26" pos:end="95:33">MAG_MASK</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="97:9" pos:end="99:47">else<block type="pseudo" pos:start="99:13" pos:end="99:47"><block_content pos:start="99:13" pos:end="99:47">

            <expr_stmt pos:start="99:13" pos:end="99:47"><expr pos:start="99:13" pos:end="99:46"><name pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:20">flags</name></name> <operator pos:start="99:22" pos:end="99:23">-=</operator> <operator pos:start="99:25" pos:end="99:25">(</operator><literal type="number" pos:start="99:26" pos:end="99:26">1</literal> <operator pos:start="99:28" pos:end="99:29">&lt;&lt;</operator> <name pos:start="99:31" pos:end="99:37">MAG_LSB</name><operator pos:start="99:38" pos:end="99:38">)</operator> <operator pos:start="99:40" pos:end="99:40">*</operator> <name pos:start="99:42" pos:end="99:46">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="143:5"><if pos:start="105:5" pos:end="131:5">if <condition pos:start="105:8" pos:end="105:77">(<expr pos:start="105:9" pos:end="105:76"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:17"><name pos:start="105:10" pos:end="105:10">s</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:17">flags</name></name> <operator pos:start="105:19" pos:end="105:19">&amp;</operator> <name pos:start="105:21" pos:end="105:33">WV_FLOAT_DATA</name><operator pos:start="105:34" pos:end="105:34">)</operator> <operator pos:start="105:36" pos:end="105:37">||</operator> <operator pos:start="105:39" pos:end="105:39">(</operator><name pos:start="105:40" pos:end="105:47"><name pos:start="105:40" pos:end="105:40">s</name><operator pos:start="105:41" pos:end="105:42">-&gt;</operator><name pos:start="105:43" pos:end="105:47">flags</name></name> <operator pos:start="105:49" pos:end="105:49">&amp;</operator> <name pos:start="105:51" pos:end="105:58">MAG_MASK</name><operator pos:start="105:59" pos:end="105:59">)</operator> <operator pos:start="105:61" pos:end="105:62">&gt;&gt;</operator> <name pos:start="105:64" pos:end="105:70">MAG_LSB</name> <operator pos:start="105:72" pos:end="105:73">&gt;=</operator> <literal type="number" pos:start="105:75" pos:end="105:76">24</literal></expr>)</condition> <block pos:start="105:79" pos:end="131:5">{<block_content pos:start="107:9" pos:end="129:25">

        <expr_stmt pos:start="107:9" pos:end="107:89"><expr pos:start="107:9" pos:end="107:88"><call pos:start="107:9" pos:end="107:88"><name pos:start="107:9" pos:end="107:29">av_fast_padded_malloc</name><argument_list pos:start="107:30" pos:end="107:88">(<argument pos:start="107:31" pos:end="107:40"><expr pos:start="107:31" pos:end="107:40"><operator pos:start="107:31" pos:end="107:31">&amp;</operator><name pos:start="107:32" pos:end="107:40"><name pos:start="107:32" pos:end="107:32">s</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:40">orig_l</name></name></expr></argument>, <argument pos:start="107:43" pos:end="107:57"><expr pos:start="107:43" pos:end="107:57"><operator pos:start="107:43" pos:end="107:43">&amp;</operator><name pos:start="107:44" pos:end="107:57"><name pos:start="107:44" pos:end="107:44">s</name><operator pos:start="107:45" pos:end="107:46">-&gt;</operator><name pos:start="107:47" pos:end="107:57">orig_l_size</name></name></expr></argument>, <argument pos:start="107:60" pos:end="107:87"><expr pos:start="107:60" pos:end="107:87"><sizeof pos:start="107:60" pos:end="107:74">sizeof<argument_list pos:start="107:66" pos:end="107:74">(<argument pos:start="107:67" pos:end="107:73"><expr pos:start="107:67" pos:end="107:73"><name pos:start="107:67" pos:end="107:73">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="107:76" pos:end="107:76">*</operator> <name pos:start="107:78" pos:end="107:87">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:67"><expr pos:start="109:9" pos:end="109:66"><call pos:start="109:9" pos:end="109:66"><name pos:start="109:9" pos:end="109:14">memcpy</name><argument_list pos:start="109:15" pos:end="109:66">(<argument pos:start="109:16" pos:end="109:24"><expr pos:start="109:16" pos:end="109:24"><name pos:start="109:16" pos:end="109:24"><name pos:start="109:16" pos:end="109:16">s</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:24">orig_l</name></name></expr></argument>, <argument pos:start="109:27" pos:end="109:35"><expr pos:start="109:27" pos:end="109:35"><name pos:start="109:27" pos:end="109:35">samples_l</name></expr></argument>, <argument pos:start="109:38" pos:end="109:65"><expr pos:start="109:38" pos:end="109:65"><sizeof pos:start="109:38" pos:end="109:52">sizeof<argument_list pos:start="109:44" pos:end="109:52">(<argument pos:start="109:45" pos:end="109:51"><expr pos:start="109:45" pos:end="109:51"><name pos:start="109:45" pos:end="109:51">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="109:54" pos:end="109:54">*</operator> <name pos:start="109:56" pos:end="109:65">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:39">(<expr pos:start="111:13" pos:end="111:38"><operator pos:start="111:13" pos:end="111:13">!</operator><operator pos:start="111:14" pos:end="111:14">(</operator><name pos:start="111:15" pos:end="111:22"><name pos:start="111:15" pos:end="111:15">s</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:22">flags</name></name> <operator pos:start="111:24" pos:end="111:24">&amp;</operator> <name pos:start="111:26" pos:end="111:37">WV_MONO_DATA</name><operator pos:start="111:38" pos:end="111:38">)</operator></expr>)</condition> <block pos:start="111:41" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:71">

            <expr_stmt pos:start="113:13" pos:end="113:93"><expr pos:start="113:13" pos:end="113:92"><call pos:start="113:13" pos:end="113:92"><name pos:start="113:13" pos:end="113:33">av_fast_padded_malloc</name><argument_list pos:start="113:34" pos:end="113:92">(<argument pos:start="113:35" pos:end="113:44"><expr pos:start="113:35" pos:end="113:44"><operator pos:start="113:35" pos:end="113:35">&amp;</operator><name pos:start="113:36" pos:end="113:44"><name pos:start="113:36" pos:end="113:36">s</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:44">orig_r</name></name></expr></argument>, <argument pos:start="113:47" pos:end="113:61"><expr pos:start="113:47" pos:end="113:61"><operator pos:start="113:47" pos:end="113:47">&amp;</operator><name pos:start="113:48" pos:end="113:61"><name pos:start="113:48" pos:end="113:48">s</name><operator pos:start="113:49" pos:end="113:50">-&gt;</operator><name pos:start="113:51" pos:end="113:61">orig_r_size</name></name></expr></argument>, <argument pos:start="113:64" pos:end="113:91"><expr pos:start="113:64" pos:end="113:91"><sizeof pos:start="113:64" pos:end="113:78">sizeof<argument_list pos:start="113:70" pos:end="113:78">(<argument pos:start="113:71" pos:end="113:77"><expr pos:start="113:71" pos:end="113:77"><name pos:start="113:71" pos:end="113:77">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="113:80" pos:end="113:80">*</operator> <name pos:start="113:82" pos:end="113:91">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:71"><expr pos:start="115:13" pos:end="115:70"><call pos:start="115:13" pos:end="115:70"><name pos:start="115:13" pos:end="115:18">memcpy</name><argument_list pos:start="115:19" pos:end="115:70">(<argument pos:start="115:20" pos:end="115:28"><expr pos:start="115:20" pos:end="115:28"><name pos:start="115:20" pos:end="115:28"><name pos:start="115:20" pos:end="115:20">s</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:28">orig_r</name></name></expr></argument>, <argument pos:start="115:31" pos:end="115:39"><expr pos:start="115:31" pos:end="115:39"><name pos:start="115:31" pos:end="115:39">samples_r</name></expr></argument>, <argument pos:start="115:42" pos:end="115:69"><expr pos:start="115:42" pos:end="115:69"><sizeof pos:start="115:42" pos:end="115:56">sizeof<argument_list pos:start="115:48" pos:end="115:56">(<argument pos:start="115:49" pos:end="115:55"><expr pos:start="115:49" pos:end="115:55"><name pos:start="115:49" pos:end="115:55">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="115:58" pos:end="115:58">*</operator> <name pos:start="115:60" pos:end="115:69">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="121:9" pos:end="127:72"><if pos:start="121:9" pos:end="123:72">if <condition pos:start="121:12" pos:end="121:37">(<expr pos:start="121:13" pos:end="121:36"><name pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:20">flags</name></name> <operator pos:start="121:22" pos:end="121:22">&amp;</operator> <name pos:start="121:24" pos:end="121:36">WV_FLOAT_DATA</name></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:72"><block_content pos:start="123:13" pos:end="123:72">

            <expr_stmt pos:start="123:13" pos:end="123:72"><expr pos:start="123:13" pos:end="123:71"><name pos:start="123:13" pos:end="123:21">got_extra</name> <operator pos:start="123:23" pos:end="123:23">=</operator> <call pos:start="123:25" pos:end="123:71"><name pos:start="123:25" pos:end="123:34">scan_float</name><argument_list pos:start="123:35" pos:end="123:71">(<argument pos:start="123:36" pos:end="123:36"><expr pos:start="123:36" pos:end="123:36"><name pos:start="123:36" pos:end="123:36">s</name></expr></argument>, <argument pos:start="123:39" pos:end="123:47"><expr pos:start="123:39" pos:end="123:47"><name pos:start="123:39" pos:end="123:47">samples_l</name></expr></argument>, <argument pos:start="123:50" pos:end="123:58"><expr pos:start="123:50" pos:end="123:58"><name pos:start="123:50" pos:end="123:58">samples_r</name></expr></argument>, <argument pos:start="123:61" pos:end="123:70"><expr pos:start="123:61" pos:end="123:70"><name pos:start="123:61" pos:end="123:70">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="125:9" pos:end="127:72">else<block type="pseudo" pos:start="127:13" pos:end="127:72"><block_content pos:start="127:13" pos:end="127:72">

            <expr_stmt pos:start="127:13" pos:end="127:72"><expr pos:start="127:13" pos:end="127:71"><name pos:start="127:13" pos:end="127:21">got_extra</name> <operator pos:start="127:23" pos:end="127:23">=</operator> <call pos:start="127:25" pos:end="127:71"><name pos:start="127:25" pos:end="127:34">scan_int32</name><argument_list pos:start="127:35" pos:end="127:71">(<argument pos:start="127:36" pos:end="127:36"><expr pos:start="127:36" pos:end="127:36"><name pos:start="127:36" pos:end="127:36">s</name></expr></argument>, <argument pos:start="127:39" pos:end="127:47"><expr pos:start="127:39" pos:end="127:47"><name pos:start="127:39" pos:end="127:47">samples_l</name></expr></argument>, <argument pos:start="127:50" pos:end="127:58"><expr pos:start="127:50" pos:end="127:58"><name pos:start="127:50" pos:end="127:58">samples_r</name></expr></argument>, <argument pos:start="127:61" pos:end="127:70"><expr pos:start="127:61" pos:end="127:70"><name pos:start="127:61" pos:end="127:70">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:25"><expr pos:start="129:9" pos:end="129:24"><name pos:start="129:9" pos:end="129:20"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:20">num_terms</name></name> <operator pos:start="129:22" pos:end="129:22">=</operator> <literal type="number" pos:start="129:24" pos:end="129:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="143:5">else <block pos:start="131:12" pos:end="143:5">{<block_content pos:start="133:9" pos:end="141:9">

        <expr_stmt pos:start="133:9" pos:end="133:56"><expr pos:start="133:9" pos:end="133:55"><call pos:start="133:9" pos:end="133:55"><name pos:start="133:9" pos:end="133:18">scan_int23</name><argument_list pos:start="133:19" pos:end="133:55">(<argument pos:start="133:20" pos:end="133:20"><expr pos:start="133:20" pos:end="133:20"><name pos:start="133:20" pos:end="133:20">s</name></expr></argument>, <argument pos:start="133:23" pos:end="133:31"><expr pos:start="133:23" pos:end="133:31"><name pos:start="133:23" pos:end="133:31">samples_l</name></expr></argument>, <argument pos:start="133:34" pos:end="133:42"><expr pos:start="133:34" pos:end="133:42"><name pos:start="133:34" pos:end="133:42">samples_r</name></expr></argument>, <argument pos:start="133:45" pos:end="133:54"><expr pos:start="133:45" pos:end="133:54"><name pos:start="133:45" pos:end="133:54">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:71">(<expr pos:start="135:13" pos:end="135:70"><name pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:20">shift</name></name> <operator pos:start="135:22" pos:end="135:23">!=</operator> <name pos:start="135:25" pos:end="135:38"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:38">int32_zeros</name></name> <operator pos:start="135:40" pos:end="135:40">+</operator> <name pos:start="135:42" pos:end="135:54"><name pos:start="135:42" pos:end="135:42">s</name><operator pos:start="135:43" pos:end="135:44">-&gt;</operator><name pos:start="135:45" pos:end="135:54">int32_ones</name></name> <operator pos:start="135:56" pos:end="135:56">+</operator> <name pos:start="135:58" pos:end="135:70"><name pos:start="135:58" pos:end="135:58">s</name><operator pos:start="135:59" pos:end="135:60">-&gt;</operator><name pos:start="135:61" pos:end="135:70">int32_dups</name></name></expr>)</condition> <block pos:start="135:73" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:29">

            <expr_stmt pos:start="137:13" pos:end="137:70"><expr pos:start="137:13" pos:end="137:69"><name pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:20">shift</name></name> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:37"><name pos:start="137:24" pos:end="137:24">s</name><operator pos:start="137:25" pos:end="137:26">-&gt;</operator><name pos:start="137:27" pos:end="137:37">int32_zeros</name></name> <operator pos:start="137:39" pos:end="137:39">+</operator> <name pos:start="137:41" pos:end="137:53"><name pos:start="137:41" pos:end="137:41">s</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:53">int32_ones</name></name> <operator pos:start="137:55" pos:end="137:55">+</operator> <name pos:start="137:57" pos:end="137:69"><name pos:start="137:57" pos:end="137:57">s</name><operator pos:start="137:58" pos:end="137:59">-&gt;</operator><name pos:start="137:60" pos:end="137:69">int32_dups</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:29"><expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:24">num_terms</name></name> <operator pos:start="139:26" pos:end="139:26">=</operator> <literal type="number" pos:start="139:28" pos:end="139:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="147:5" pos:end="165:5"><if pos:start="147:5" pos:end="165:5">if <condition pos:start="147:8" pos:end="147:40">(<expr pos:start="147:9" pos:end="147:39"><operator pos:start="147:9" pos:end="147:9">!</operator><name pos:start="147:10" pos:end="147:22"><name pos:start="147:10" pos:end="147:10">s</name><operator pos:start="147:11" pos:end="147:12">-&gt;</operator><name pos:start="147:13" pos:end="147:22">num_passes</name></name> <operator pos:start="147:24" pos:end="147:25">&amp;&amp;</operator> <operator pos:start="147:27" pos:end="147:27">!</operator><name pos:start="147:28" pos:end="147:39"><name pos:start="147:28" pos:end="147:28">s</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:39">num_terms</name></name></expr>)</condition> <block pos:start="147:42" pos:end="165:5">{<block_content pos:start="149:9" pos:end="163:26">

        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:21">num_passes</name></name> <operator pos:start="149:23" pos:end="149:23">=</operator> <literal type="number" pos:start="149:25" pos:end="149:25">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="153:9" pos:end="159:59"><if pos:start="153:9" pos:end="155:46">if <condition pos:start="153:12" pos:end="153:36">(<expr pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:20"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:20">flags</name></name> <operator pos:start="153:22" pos:end="153:22">&amp;</operator> <name pos:start="153:24" pos:end="153:35">WV_MONO_DATA</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:46"><block_content pos:start="155:13" pos:end="155:46">

            <expr_stmt pos:start="155:13" pos:end="155:46"><expr pos:start="155:13" pos:end="155:45"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:45"><name pos:start="155:19" pos:end="155:25">wv_mono</name><argument_list pos:start="155:26" pos:end="155:45">(<argument pos:start="155:27" pos:end="155:27"><expr pos:start="155:27" pos:end="155:27"><name pos:start="155:27" pos:end="155:27">s</name></expr></argument>, <argument pos:start="155:30" pos:end="155:38"><expr pos:start="155:30" pos:end="155:38"><name pos:start="155:30" pos:end="155:38">samples_l</name></expr></argument>, <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">1</literal></expr></argument>, <argument pos:start="155:44" pos:end="155:44"><expr pos:start="155:44" pos:end="155:44"><literal type="number" pos:start="155:44" pos:end="155:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="157:9" pos:end="159:59">else<block type="pseudo" pos:start="159:13" pos:end="159:59"><block_content pos:start="159:13" pos:end="159:59">

            <expr_stmt pos:start="159:13" pos:end="159:59"><expr pos:start="159:13" pos:end="159:58"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:58"><name pos:start="159:19" pos:end="159:27">wv_stereo</name><argument_list pos:start="159:28" pos:end="159:58">(<argument pos:start="159:29" pos:end="159:29"><expr pos:start="159:29" pos:end="159:29"><name pos:start="159:29" pos:end="159:29">s</name></expr></argument>, <argument pos:start="159:32" pos:end="159:40"><expr pos:start="159:32" pos:end="159:40"><name pos:start="159:32" pos:end="159:40">samples_l</name></expr></argument>, <argument pos:start="159:43" pos:end="159:51"><expr pos:start="159:43" pos:end="159:51"><name pos:start="159:43" pos:end="159:51">samples_r</name></expr></argument>, <argument pos:start="159:54" pos:end="159:54"><expr pos:start="159:54" pos:end="159:54"><literal type="number" pos:start="159:54" pos:end="159:54">1</literal></expr></argument>, <argument pos:start="159:57" pos:end="159:57"><expr pos:start="159:57" pos:end="159:57"><literal type="number" pos:start="159:57" pos:end="159:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:26"><expr pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:21">num_passes</name></name> <operator pos:start="163:23" pos:end="163:23">=</operator> <literal type="number" pos:start="163:25" pos:end="163:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="167:5" pos:end="191:5"><if pos:start="167:5" pos:end="179:5">if <condition pos:start="167:8" pos:end="167:32">(<expr pos:start="167:9" pos:end="167:31"><name pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:16">flags</name></name> <operator pos:start="167:18" pos:end="167:18">&amp;</operator> <name pos:start="167:20" pos:end="167:31">WV_MONO_DATA</name></expr>)</condition> <block pos:start="167:34" pos:end="179:5">{<block_content pos:start="169:9" pos:end="177:58">

        <for pos:start="169:9" pos:end="171:45">for <control pos:start="169:13" pos:end="169:40">(<init pos:start="169:14" pos:end="169:19"><expr pos:start="169:14" pos:end="169:18"><name pos:start="169:14" pos:end="169:14">i</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <literal type="number" pos:start="169:18" pos:end="169:18">0</literal></expr>;</init> <condition pos:start="169:21" pos:end="169:35"><expr pos:start="169:21" pos:end="169:34"><name pos:start="169:21" pos:end="169:21">i</name> <operator pos:start="169:23" pos:end="169:23">&lt;</operator> <name pos:start="169:25" pos:end="169:34">nb_samples</name></expr>;</condition> <incr pos:start="169:37" pos:end="169:39"><expr pos:start="169:37" pos:end="169:39"><name pos:start="169:37" pos:end="169:37">i</name><operator pos:start="169:38" pos:end="169:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="171:13" pos:end="171:45"><block_content pos:start="171:13" pos:end="171:45">

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:15">crc</name> <operator pos:start="171:17" pos:end="171:18">+=</operator> <operator pos:start="171:20" pos:end="171:20">(</operator><name pos:start="171:21" pos:end="171:23">crc</name> <operator pos:start="171:25" pos:end="171:26">&lt;&lt;</operator> <literal type="number" pos:start="171:28" pos:end="171:28">1</literal><operator pos:start="171:29" pos:end="171:29">)</operator> <operator pos:start="171:31" pos:end="171:31">+</operator> <name pos:start="171:33" pos:end="171:44"><name pos:start="171:33" pos:end="171:41">samples_l</name><index pos:start="171:42" pos:end="171:44">[<expr pos:start="171:43" pos:end="171:43"><name pos:start="171:43" pos:end="171:43">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="175:9" pos:end="177:58"><if pos:start="175:9" pos:end="177:58">if <condition pos:start="175:12" pos:end="175:26">(<expr pos:start="175:13" pos:end="175:25"><name pos:start="175:13" pos:end="175:25"><name pos:start="175:13" pos:end="175:13">s</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:25">num_passes</name></name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:58"><block_content pos:start="177:13" pos:end="177:58">

            <expr_stmt pos:start="177:13" pos:end="177:58"><expr pos:start="177:13" pos:end="177:57"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:57"><name pos:start="177:19" pos:end="177:25">wv_mono</name><argument_list pos:start="177:26" pos:end="177:57">(<argument pos:start="177:27" pos:end="177:27"><expr pos:start="177:27" pos:end="177:27"><name pos:start="177:27" pos:end="177:27">s</name></expr></argument>, <argument pos:start="177:30" pos:end="177:38"><expr pos:start="177:30" pos:end="177:38"><name pos:start="177:30" pos:end="177:38">samples_l</name></expr></argument>, <argument pos:start="177:41" pos:end="177:53"><expr pos:start="177:41" pos:end="177:53"><operator pos:start="177:41" pos:end="177:41">!</operator><name pos:start="177:42" pos:end="177:53"><name pos:start="177:42" pos:end="177:42">s</name><operator pos:start="177:43" pos:end="177:44">-&gt;</operator><name pos:start="177:45" pos:end="177:53">num_terms</name></name></expr></argument>, <argument pos:start="177:56" pos:end="177:56"><expr pos:start="177:56" pos:end="177:56"><literal type="number" pos:start="177:56" pos:end="177:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="191:5">else <block pos:start="179:12" pos:end="191:5">{<block_content pos:start="181:9" pos:end="189:71">

        <for pos:start="181:9" pos:end="183:82">for <control pos:start="181:13" pos:end="181:40">(<init pos:start="181:14" pos:end="181:19"><expr pos:start="181:14" pos:end="181:18"><name pos:start="181:14" pos:end="181:14">i</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <literal type="number" pos:start="181:18" pos:end="181:18">0</literal></expr>;</init> <condition pos:start="181:21" pos:end="181:35"><expr pos:start="181:21" pos:end="181:34"><name pos:start="181:21" pos:end="181:21">i</name> <operator pos:start="181:23" pos:end="181:23">&lt;</operator> <name pos:start="181:25" pos:end="181:34">nb_samples</name></expr>;</condition> <incr pos:start="181:37" pos:end="181:39"><expr pos:start="181:37" pos:end="181:39"><name pos:start="181:37" pos:end="181:37">i</name><operator pos:start="181:38" pos:end="181:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="183:13" pos:end="183:82"><block_content pos:start="183:13" pos:end="183:82">

            <expr_stmt pos:start="183:13" pos:end="183:82"><expr pos:start="183:13" pos:end="183:81"><name pos:start="183:13" pos:end="183:15">crc</name> <operator pos:start="183:17" pos:end="183:18">+=</operator> <operator pos:start="183:20" pos:end="183:20">(</operator><name pos:start="183:21" pos:end="183:23">crc</name> <operator pos:start="183:25" pos:end="183:26">&lt;&lt;</operator> <literal type="number" pos:start="183:28" pos:end="183:28">3</literal><operator pos:start="183:29" pos:end="183:29">)</operator> <operator pos:start="183:31" pos:end="183:31">+</operator> <operator pos:start="183:33" pos:end="183:33">(</operator><name pos:start="183:34" pos:end="183:45"><name pos:start="183:34" pos:end="183:42">samples_l</name><index pos:start="183:43" pos:end="183:45">[<expr pos:start="183:44" pos:end="183:44"><name pos:start="183:44" pos:end="183:44">i</name></expr>]</index></name> <operator pos:start="183:47" pos:end="183:48">&lt;&lt;</operator> <literal type="number" pos:start="183:50" pos:end="183:50">1</literal><operator pos:start="183:51" pos:end="183:51">)</operator> <operator pos:start="183:53" pos:end="183:53">+</operator> <name pos:start="183:55" pos:end="183:66"><name pos:start="183:55" pos:end="183:63">samples_l</name><index pos:start="183:64" pos:end="183:66">[<expr pos:start="183:65" pos:end="183:65"><name pos:start="183:65" pos:end="183:65">i</name></expr>]</index></name> <operator pos:start="183:68" pos:end="183:68">+</operator> <name pos:start="183:70" pos:end="183:81"><name pos:start="183:70" pos:end="183:78">samples_r</name><index pos:start="183:79" pos:end="183:81">[<expr pos:start="183:80" pos:end="183:80"><name pos:start="183:80" pos:end="183:80">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="187:9" pos:end="189:71"><if pos:start="187:9" pos:end="189:71">if <condition pos:start="187:12" pos:end="187:26">(<expr pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:13">s</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:25">num_passes</name></name></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:71"><block_content pos:start="189:13" pos:end="189:71">

            <expr_stmt pos:start="189:13" pos:end="189:71"><expr pos:start="189:13" pos:end="189:70"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:70"><name pos:start="189:19" pos:end="189:27">wv_stereo</name><argument_list pos:start="189:28" pos:end="189:70">(<argument pos:start="189:29" pos:end="189:29"><expr pos:start="189:29" pos:end="189:29"><name pos:start="189:29" pos:end="189:29">s</name></expr></argument>, <argument pos:start="189:32" pos:end="189:40"><expr pos:start="189:32" pos:end="189:40"><name pos:start="189:32" pos:end="189:40">samples_l</name></expr></argument>, <argument pos:start="189:43" pos:end="189:51"><expr pos:start="189:43" pos:end="189:51"><name pos:start="189:43" pos:end="189:51">samples_r</name></expr></argument>, <argument pos:start="189:54" pos:end="189:66"><expr pos:start="189:54" pos:end="189:66"><operator pos:start="189:54" pos:end="189:54">!</operator><name pos:start="189:55" pos:end="189:66"><name pos:start="189:55" pos:end="189:55">s</name><operator pos:start="189:56" pos:end="189:57">-&gt;</operator><name pos:start="189:58" pos:end="189:66">num_terms</name></name></expr></argument>, <argument pos:start="189:69" pos:end="189:69"><expr pos:start="189:69" pos:end="189:69"><literal type="number" pos:start="189:69" pos:end="189:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="193:5" pos:end="195:19"><if pos:start="193:5" pos:end="195:19">if <condition pos:start="193:8" pos:end="193:16">(<expr pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">&lt;</operator> <literal type="number" pos:start="193:15" pos:end="193:15">0</literal></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:19"><block_content pos:start="195:9" pos:end="195:19">

        <return pos:start="195:9" pos:end="195:19">return <expr pos:start="195:16" pos:end="195:18"><name pos:start="195:16" pos:end="195:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="199:5" pos:end="201:37"><if pos:start="199:5" pos:end="201:37">if <condition pos:start="199:8" pos:end="199:22">(<expr pos:start="199:9" pos:end="199:21"><operator pos:start="199:9" pos:end="199:9">!</operator><name pos:start="199:10" pos:end="199:21"><name pos:start="199:10" pos:end="199:10">s</name><operator pos:start="199:11" pos:end="199:12">-&gt;</operator><name pos:start="199:13" pos:end="199:21">ch_offset</name></name></expr>)</condition><block type="pseudo" pos:start="201:9" pos:end="201:37"><block_content pos:start="201:9" pos:end="201:37">

        <expr_stmt pos:start="201:9" pos:end="201:37"><expr pos:start="201:9" pos:end="201:36"><name pos:start="201:9" pos:end="201:16"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:16">flags</name></name> <operator pos:start="201:18" pos:end="201:19">|=</operator> <name pos:start="201:21" pos:end="201:36">WV_INITIAL_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:46"><expr pos:start="205:5" pos:end="205:45"><name pos:start="205:5" pos:end="205:16"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:16">ch_offset</name></name> <operator pos:start="205:18" pos:end="205:19">+=</operator> <literal type="number" pos:start="205:21" pos:end="205:23">1</literal> <operator pos:start="205:23" pos:end="205:23">+</operator> <operator pos:start="205:25" pos:end="205:25">!</operator><operator pos:start="205:26" pos:end="205:26">(</operator><name pos:start="205:27" pos:end="205:34"><name pos:start="205:27" pos:end="205:27">s</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:34">flags</name></name> <operator pos:start="205:36" pos:end="205:36">&amp;</operator> <name pos:start="205:38" pos:end="205:44">WV_MONO</name><operator pos:start="205:45" pos:end="205:45">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="209:5" pos:end="211:35"><if pos:start="209:5" pos:end="211:35">if <condition pos:start="209:8" pos:end="209:43">(<expr pos:start="209:9" pos:end="209:42"><name pos:start="209:9" pos:end="209:20"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:20">ch_offset</name></name> <operator pos:start="209:22" pos:end="209:23">==</operator> <name pos:start="209:25" pos:end="209:42"><name pos:start="209:25" pos:end="209:25">s</name><operator pos:start="209:26" pos:end="209:27">-&gt;</operator><name pos:start="209:28" pos:end="209:32">avctx</name><operator pos:start="209:33" pos:end="209:34">-&gt;</operator><name pos:start="209:35" pos:end="209:42">channels</name></name></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:35"><block_content pos:start="211:9" pos:end="211:35">

        <expr_stmt pos:start="211:9" pos:end="211:35"><expr pos:start="211:9" pos:end="211:34"><name pos:start="211:9" pos:end="211:16"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:16">flags</name></name> <operator pos:start="211:18" pos:end="211:19">|=</operator> <name pos:start="211:21" pos:end="211:34">WV_FINAL_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:48"><expr pos:start="215:5" pos:end="215:47"><call pos:start="215:5" pos:end="215:47"><name pos:start="215:5" pos:end="215:27">bytestream2_init_writer</name><argument_list pos:start="215:28" pos:end="215:47">(<argument pos:start="215:29" pos:end="215:31"><expr pos:start="215:29" pos:end="215:31"><operator pos:start="215:29" pos:end="215:29">&amp;</operator><name pos:start="215:30" pos:end="215:31">pb</name></expr></argument>, <argument pos:start="215:34" pos:end="215:36"><expr pos:start="215:34" pos:end="215:36"><name pos:start="215:34" pos:end="215:36">out</name></expr></argument>, <argument pos:start="215:39" pos:end="215:46"><expr pos:start="215:39" pos:end="215:46"><name pos:start="215:39" pos:end="215:46">out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:57"><expr pos:start="217:5" pos:end="217:56"><call pos:start="217:5" pos:end="217:56"><name pos:start="217:5" pos:end="217:24">bytestream2_put_le32</name><argument_list pos:start="217:25" pos:end="217:56">(<argument pos:start="217:26" pos:end="217:28"><expr pos:start="217:26" pos:end="217:28"><operator pos:start="217:26" pos:end="217:26">&amp;</operator><name pos:start="217:27" pos:end="217:28">pb</name></expr></argument>, <argument pos:start="217:31" pos:end="217:55"><expr pos:start="217:31" pos:end="217:55"><call pos:start="217:31" pos:end="217:55"><name pos:start="217:31" pos:end="217:35">MKTAG</name><argument_list pos:start="217:36" pos:end="217:55">(<argument pos:start="217:37" pos:end="217:39"><expr pos:start="217:37" pos:end="217:39"><literal type="char" pos:start="217:37" pos:end="217:39">'w'</literal></expr></argument>, <argument pos:start="217:42" pos:end="217:44"><expr pos:start="217:42" pos:end="217:44"><literal type="char" pos:start="217:42" pos:end="217:44">'v'</literal></expr></argument>, <argument pos:start="217:47" pos:end="217:49"><expr pos:start="217:47" pos:end="217:49"><literal type="char" pos:start="217:47" pos:end="217:49">'p'</literal></expr></argument>, <argument pos:start="217:52" pos:end="217:54"><expr pos:start="217:52" pos:end="217:54"><literal type="char" pos:start="217:52" pos:end="217:54">'k'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:33"><expr pos:start="219:5" pos:end="219:32"><call pos:start="219:5" pos:end="219:32"><name pos:start="219:5" pos:end="219:24">bytestream2_put_le32</name><argument_list pos:start="219:25" pos:end="219:32">(<argument pos:start="219:26" pos:end="219:28"><expr pos:start="219:26" pos:end="219:28"><operator pos:start="219:26" pos:end="219:26">&amp;</operator><name pos:start="219:27" pos:end="219:28">pb</name></expr></argument>, <argument pos:start="219:31" pos:end="219:31"><expr pos:start="219:31" pos:end="219:31"><literal type="number" pos:start="219:31" pos:end="219:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:37"><expr pos:start="221:5" pos:end="221:36"><call pos:start="221:5" pos:end="221:36"><name pos:start="221:5" pos:end="221:24">bytestream2_put_le16</name><argument_list pos:start="221:25" pos:end="221:36">(<argument pos:start="221:26" pos:end="221:28"><expr pos:start="221:26" pos:end="221:28"><operator pos:start="221:26" pos:end="221:26">&amp;</operator><name pos:start="221:27" pos:end="221:28">pb</name></expr></argument>, <argument pos:start="221:31" pos:end="221:35"><expr pos:start="221:31" pos:end="221:35"><literal type="number" pos:start="221:31" pos:end="221:35">0x410</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:33"><expr pos:start="223:5" pos:end="223:32"><call pos:start="223:5" pos:end="223:32"><name pos:start="223:5" pos:end="223:24">bytestream2_put_le16</name><argument_list pos:start="223:25" pos:end="223:32">(<argument pos:start="223:26" pos:end="223:28"><expr pos:start="223:26" pos:end="223:28"><operator pos:start="223:26" pos:end="223:26">&amp;</operator><name pos:start="223:27" pos:end="223:28">pb</name></expr></argument>, <argument pos:start="223:31" pos:end="223:31"><expr pos:start="223:31" pos:end="223:31"><literal type="number" pos:start="223:31" pos:end="223:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:33"><expr pos:start="225:5" pos:end="225:32"><call pos:start="225:5" pos:end="225:32"><name pos:start="225:5" pos:end="225:24">bytestream2_put_le32</name><argument_list pos:start="225:25" pos:end="225:32">(<argument pos:start="225:26" pos:end="225:28"><expr pos:start="225:26" pos:end="225:28"><operator pos:start="225:26" pos:end="225:26">&amp;</operator><name pos:start="225:27" pos:end="225:28">pb</name></expr></argument>, <argument pos:start="225:31" pos:end="225:31"><expr pos:start="225:31" pos:end="225:31"><literal type="number" pos:start="225:31" pos:end="225:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:47"><expr pos:start="227:5" pos:end="227:46"><call pos:start="227:5" pos:end="227:46"><name pos:start="227:5" pos:end="227:24">bytestream2_put_le32</name><argument_list pos:start="227:25" pos:end="227:46">(<argument pos:start="227:26" pos:end="227:28"><expr pos:start="227:26" pos:end="227:28"><operator pos:start="227:26" pos:end="227:26">&amp;</operator><name pos:start="227:27" pos:end="227:28">pb</name></expr></argument>, <argument pos:start="227:31" pos:end="227:45"><expr pos:start="227:31" pos:end="227:45"><name pos:start="227:31" pos:end="227:45"><name pos:start="227:31" pos:end="227:31">s</name><operator pos:start="227:32" pos:end="227:33">-&gt;</operator><name pos:start="227:34" pos:end="227:45">sample_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:42"><expr pos:start="229:5" pos:end="229:41"><call pos:start="229:5" pos:end="229:41"><name pos:start="229:5" pos:end="229:24">bytestream2_put_le32</name><argument_list pos:start="229:25" pos:end="229:41">(<argument pos:start="229:26" pos:end="229:28"><expr pos:start="229:26" pos:end="229:28"><operator pos:start="229:26" pos:end="229:26">&amp;</operator><name pos:start="229:27" pos:end="229:28">pb</name></expr></argument>, <argument pos:start="229:31" pos:end="229:40"><expr pos:start="229:31" pos:end="229:40"><name pos:start="229:31" pos:end="229:40">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:40"><expr pos:start="231:5" pos:end="231:39"><call pos:start="231:5" pos:end="231:39"><name pos:start="231:5" pos:end="231:24">bytestream2_put_le32</name><argument_list pos:start="231:25" pos:end="231:39">(<argument pos:start="231:26" pos:end="231:28"><expr pos:start="231:26" pos:end="231:28"><operator pos:start="231:26" pos:end="231:26">&amp;</operator><name pos:start="231:27" pos:end="231:28">pb</name></expr></argument>, <argument pos:start="231:31" pos:end="231:38"><expr pos:start="231:31" pos:end="231:38"><name pos:start="231:31" pos:end="231:38"><name pos:start="231:31" pos:end="231:31">s</name><operator pos:start="231:32" pos:end="231:33">-&gt;</operator><name pos:start="231:34" pos:end="231:38">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:35"><expr pos:start="233:5" pos:end="233:34"><call pos:start="233:5" pos:end="233:34"><name pos:start="233:5" pos:end="233:24">bytestream2_put_le32</name><argument_list pos:start="233:25" pos:end="233:34">(<argument pos:start="233:26" pos:end="233:28"><expr pos:start="233:26" pos:end="233:28"><operator pos:start="233:26" pos:end="233:26">&amp;</operator><name pos:start="233:27" pos:end="233:28">pb</name></expr></argument>, <argument pos:start="233:31" pos:end="233:33"><expr pos:start="233:31" pos:end="233:33"><name pos:start="233:31" pos:end="233:33">crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="237:5" pos:end="251:5"><if pos:start="237:5" pos:end="251:5">if <condition pos:start="237:8" pos:end="241:56">(<expr pos:start="237:9" pos:end="241:55"><name pos:start="237:9" pos:end="237:16"><name pos:start="237:9" pos:end="237:9">s</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:16">flags</name></name> <operator pos:start="237:18" pos:end="237:18">&amp;</operator> <name pos:start="237:20" pos:end="237:35">WV_INITIAL_BLOCK</name> <operator pos:start="237:37" pos:end="237:38">&amp;&amp;</operator>

        <name pos:start="239:9" pos:end="239:32"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:16">avctx</name><operator pos:start="239:17" pos:end="239:18">-&gt;</operator><name pos:start="239:19" pos:end="239:32">channel_layout</name></name> <operator pos:start="239:34" pos:end="239:35">!=</operator> <name pos:start="239:37" pos:end="239:53">AV_CH_LAYOUT_MONO</name> <operator pos:start="239:55" pos:end="239:56">&amp;&amp;</operator>

        <name pos:start="241:9" pos:end="241:32"><name pos:start="241:9" pos:end="241:9">s</name><operator pos:start="241:10" pos:end="241:11">-&gt;</operator><name pos:start="241:12" pos:end="241:16">avctx</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:32">channel_layout</name></name> <operator pos:start="241:34" pos:end="241:35">!=</operator> <name pos:start="241:37" pos:end="241:55">AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block pos:start="241:58" pos:end="251:5">{<block_content pos:start="243:9" pos:end="249:37">

        <expr_stmt pos:start="243:9" pos:end="243:51"><expr pos:start="243:9" pos:end="243:50"><call pos:start="243:9" pos:end="243:50"><name pos:start="243:9" pos:end="243:26">put_metadata_block</name><argument_list pos:start="243:27" pos:end="243:50">(<argument pos:start="243:28" pos:end="243:30"><expr pos:start="243:28" pos:end="243:30"><operator pos:start="243:28" pos:end="243:28">&amp;</operator><name pos:start="243:29" pos:end="243:30">pb</name></expr></argument>, <argument pos:start="243:33" pos:end="243:46"><expr pos:start="243:33" pos:end="243:46"><name pos:start="243:33" pos:end="243:46">WP_ID_CHANINFO</name></expr></argument>, <argument pos:start="243:49" pos:end="243:49"><expr pos:start="243:49" pos:end="243:49"><literal type="number" pos:start="243:49" pos:end="243:49">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:54"><expr pos:start="245:9" pos:end="245:53"><call pos:start="245:9" pos:end="245:53"><name pos:start="245:9" pos:end="245:28">bytestream2_put_byte</name><argument_list pos:start="245:29" pos:end="245:53">(<argument pos:start="245:30" pos:end="245:32"><expr pos:start="245:30" pos:end="245:32"><operator pos:start="245:30" pos:end="245:30">&amp;</operator><name pos:start="245:31" pos:end="245:32">pb</name></expr></argument>, <argument pos:start="245:35" pos:end="245:52"><expr pos:start="245:35" pos:end="245:52"><name pos:start="245:35" pos:end="245:52"><name pos:start="245:35" pos:end="245:35">s</name><operator pos:start="245:36" pos:end="245:37">-&gt;</operator><name pos:start="245:38" pos:end="245:42">avctx</name><operator pos:start="245:43" pos:end="245:44">-&gt;</operator><name pos:start="245:45" pos:end="245:52">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:60"><expr pos:start="247:9" pos:end="247:59"><call pos:start="247:9" pos:end="247:59"><name pos:start="247:9" pos:end="247:28">bytestream2_put_le32</name><argument_list pos:start="247:29" pos:end="247:59">(<argument pos:start="247:30" pos:end="247:32"><expr pos:start="247:30" pos:end="247:32"><operator pos:start="247:30" pos:end="247:30">&amp;</operator><name pos:start="247:31" pos:end="247:32">pb</name></expr></argument>, <argument pos:start="247:35" pos:end="247:58"><expr pos:start="247:35" pos:end="247:58"><name pos:start="247:35" pos:end="247:58"><name pos:start="247:35" pos:end="247:35">s</name><operator pos:start="247:36" pos:end="247:37">-&gt;</operator><name pos:start="247:38" pos:end="247:42">avctx</name><operator pos:start="247:43" pos:end="247:44">-&gt;</operator><name pos:start="247:45" pos:end="247:58">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:37"><expr pos:start="249:9" pos:end="249:36"><call pos:start="249:9" pos:end="249:36"><name pos:start="249:9" pos:end="249:28">bytestream2_put_byte</name><argument_list pos:start="249:29" pos:end="249:36">(<argument pos:start="249:30" pos:end="249:32"><expr pos:start="249:30" pos:end="249:32"><operator pos:start="249:30" pos:end="249:30">&amp;</operator><name pos:start="249:31" pos:end="249:32">pb</name></expr></argument>, <argument pos:start="249:35" pos:end="249:35"><expr pos:start="249:35" pos:end="249:35"><literal type="number" pos:start="249:35" pos:end="249:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="255:5" pos:end="263:5"><if pos:start="255:5" pos:end="263:5">if <condition pos:start="255:8" pos:end="255:46">(<expr pos:start="255:9" pos:end="255:45"><operator pos:start="255:9" pos:end="255:9">(</operator><name pos:start="255:10" pos:end="255:17"><name pos:start="255:10" pos:end="255:10">s</name><operator pos:start="255:11" pos:end="255:12">-&gt;</operator><name pos:start="255:13" pos:end="255:17">flags</name></name> <operator pos:start="255:19" pos:end="255:19">&amp;</operator> <name pos:start="255:21" pos:end="255:30">SRATE_MASK</name><operator pos:start="255:31" pos:end="255:31">)</operator> <operator pos:start="255:33" pos:end="255:34">==</operator> <name pos:start="255:36" pos:end="255:45">SRATE_MASK</name></expr>)</condition> <block pos:start="255:48" pos:end="263:5">{<block_content pos:start="257:9" pos:end="261:37">

        <expr_stmt pos:start="257:9" pos:end="257:54"><expr pos:start="257:9" pos:end="257:53"><call pos:start="257:9" pos:end="257:53"><name pos:start="257:9" pos:end="257:26">put_metadata_block</name><argument_list pos:start="257:27" pos:end="257:53">(<argument pos:start="257:28" pos:end="257:30"><expr pos:start="257:28" pos:end="257:30"><operator pos:start="257:28" pos:end="257:28">&amp;</operator><name pos:start="257:29" pos:end="257:30">pb</name></expr></argument>, <argument pos:start="257:33" pos:end="257:49"><expr pos:start="257:33" pos:end="257:49"><name pos:start="257:33" pos:end="257:49">WP_ID_SAMPLE_RATE</name></expr></argument>, <argument pos:start="257:52" pos:end="257:52"><expr pos:start="257:52" pos:end="257:52"><literal type="number" pos:start="257:52" pos:end="257:52">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:57"><expr pos:start="259:9" pos:end="259:56"><call pos:start="259:9" pos:end="259:56"><name pos:start="259:9" pos:end="259:28">bytestream2_put_le24</name><argument_list pos:start="259:29" pos:end="259:56">(<argument pos:start="259:30" pos:end="259:32"><expr pos:start="259:30" pos:end="259:32"><operator pos:start="259:30" pos:end="259:30">&amp;</operator><name pos:start="259:31" pos:end="259:32">pb</name></expr></argument>, <argument pos:start="259:35" pos:end="259:55"><expr pos:start="259:35" pos:end="259:55"><name pos:start="259:35" pos:end="259:55"><name pos:start="259:35" pos:end="259:35">s</name><operator pos:start="259:36" pos:end="259:37">-&gt;</operator><name pos:start="259:38" pos:end="259:42">avctx</name><operator pos:start="259:43" pos:end="259:44">-&gt;</operator><name pos:start="259:45" pos:end="259:55">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:37"><expr pos:start="261:9" pos:end="261:36"><call pos:start="261:9" pos:end="261:36"><name pos:start="261:9" pos:end="261:28">bytestream2_put_byte</name><argument_list pos:start="261:29" pos:end="261:36">(<argument pos:start="261:30" pos:end="261:32"><expr pos:start="261:30" pos:end="261:32"><operator pos:start="261:30" pos:end="261:30">&amp;</operator><name pos:start="261:31" pos:end="261:32">pb</name></expr></argument>, <argument pos:start="261:35" pos:end="261:35"><expr pos:start="261:35" pos:end="261:35"><literal type="number" pos:start="261:35" pos:end="261:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:58"><expr pos:start="267:5" pos:end="267:57"><call pos:start="267:5" pos:end="267:57"><name pos:start="267:5" pos:end="267:22">put_metadata_block</name><argument_list pos:start="267:23" pos:end="267:57">(<argument pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><operator pos:start="267:24" pos:end="267:24">&amp;</operator><name pos:start="267:25" pos:end="267:26">pb</name></expr></argument>, <argument pos:start="267:29" pos:end="267:42"><expr pos:start="267:29" pos:end="267:42"><name pos:start="267:29" pos:end="267:42">WP_ID_DECTERMS</name></expr></argument>, <argument pos:start="267:45" pos:end="267:56"><expr pos:start="267:45" pos:end="267:56"><name pos:start="267:45" pos:end="267:56"><name pos:start="267:45" pos:end="267:45">s</name><operator pos:start="267:46" pos:end="267:47">-&gt;</operator><name pos:start="267:48" pos:end="267:56">num_terms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="269:5" pos:end="275:5">for <control pos:start="269:9" pos:end="269:38">(<init pos:start="269:10" pos:end="269:15"><expr pos:start="269:10" pos:end="269:14"><name pos:start="269:10" pos:end="269:10">i</name> <operator pos:start="269:12" pos:end="269:12">=</operator> <literal type="number" pos:start="269:14" pos:end="269:14">0</literal></expr>;</init> <condition pos:start="269:17" pos:end="269:33"><expr pos:start="269:17" pos:end="269:32"><name pos:start="269:17" pos:end="269:17">i</name> <operator pos:start="269:19" pos:end="269:19">&lt;</operator> <name pos:start="269:21" pos:end="269:32"><name pos:start="269:21" pos:end="269:21">s</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:32">num_terms</name></name></expr>;</condition> <incr pos:start="269:35" pos:end="269:37"><expr pos:start="269:35" pos:end="269:37"><name pos:start="269:35" pos:end="269:35">i</name><operator pos:start="269:36" pos:end="269:37">++</operator></expr></incr>)</control> <block pos:start="269:40" pos:end="275:5">{<block_content pos:start="271:9" pos:end="273:90">

        <decl_stmt pos:start="271:9" pos:end="271:50"><decl pos:start="271:9" pos:end="271:49"><type pos:start="271:9" pos:end="271:23"><name pos:start="271:9" pos:end="271:21"><name pos:start="271:9" pos:end="271:14">struct</name> <name pos:start="271:16" pos:end="271:21">Decorr</name></name> <modifier pos:start="271:23" pos:end="271:23">*</modifier></type><name pos:start="271:24" pos:end="271:26">dpp</name> <init pos:start="271:28" pos:end="271:49">= <expr pos:start="271:30" pos:end="271:49"><operator pos:start="271:30" pos:end="271:30">&amp;</operator><name pos:start="271:31" pos:end="271:49"><name pos:start="271:31" pos:end="271:31">s</name><operator pos:start="271:32" pos:end="271:33">-&gt;</operator><name pos:start="271:34" pos:end="271:46">decorr_passes</name><index pos:start="271:47" pos:end="271:49">[<expr pos:start="271:48" pos:end="271:48"><name pos:start="271:48" pos:end="271:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:90"><expr pos:start="273:9" pos:end="273:89"><call pos:start="273:9" pos:end="273:89"><name pos:start="273:9" pos:end="273:28">bytestream2_put_byte</name><argument_list pos:start="273:29" pos:end="273:89">(<argument pos:start="273:30" pos:end="273:32"><expr pos:start="273:30" pos:end="273:32"><operator pos:start="273:30" pos:end="273:30">&amp;</operator><name pos:start="273:31" pos:end="273:32">pb</name></expr></argument>, <argument pos:start="273:35" pos:end="273:88"><expr pos:start="273:35" pos:end="273:88"><operator pos:start="273:35" pos:end="273:35">(</operator><operator pos:start="273:36" pos:end="273:36">(</operator><name pos:start="273:37" pos:end="273:46"><name pos:start="273:37" pos:end="273:39">dpp</name><operator pos:start="273:40" pos:end="273:41">-&gt;</operator><name pos:start="273:42" pos:end="273:46">value</name></name> <operator pos:start="273:48" pos:end="273:48">+</operator> <literal type="number" pos:start="273:50" pos:end="273:50">5</literal><operator pos:start="273:51" pos:end="273:51">)</operator> <operator pos:start="273:53" pos:end="273:53">&amp;</operator> <literal type="number" pos:start="273:55" pos:end="273:58">0x1f</literal><operator pos:start="273:59" pos:end="273:59">)</operator> <operator pos:start="273:61" pos:end="273:61">|</operator> <operator pos:start="273:63" pos:end="273:63">(</operator><operator pos:start="273:64" pos:end="273:64">(</operator><name pos:start="273:65" pos:end="273:74"><name pos:start="273:65" pos:end="273:67">dpp</name><operator pos:start="273:68" pos:end="273:69">-&gt;</operator><name pos:start="273:70" pos:end="273:74">delta</name></name> <operator pos:start="273:76" pos:end="273:77">&lt;&lt;</operator> <literal type="number" pos:start="273:79" pos:end="273:79">5</literal><operator pos:start="273:80" pos:end="273:80">)</operator> <operator pos:start="273:82" pos:end="273:82">&amp;</operator> <literal type="number" pos:start="273:84" pos:end="273:87">0xe0</literal><operator pos:start="273:88" pos:end="273:88">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="277:5" pos:end="292:0"><if pos:start="277:5" pos:end="292:0">if <condition pos:start="277:8" pos:end="277:25">(<expr pos:start="277:9" pos:end="277:24"><name pos:start="277:9" pos:end="277:20"><name pos:start="277:9" pos:end="277:9">s</name><operator pos:start="277:10" pos:end="277:11">-&gt;</operator><name pos:start="277:12" pos:end="277:20">num_terms</name></name> <operator pos:start="277:22" pos:end="277:22">&amp;</operator> <literal type="number" pos:start="277:24" pos:end="277:24">1</literal></expr>)</condition><block type="pseudo" pos:start="279:9" pos:end="292:0"><block_content pos:start="279:9" pos:end="292:0">

        <expr_stmt pos:start="279:9" pos:end="292:0"><expr pos:start="279:9" pos:end="279:36"><call pos:start="279:9" pos:end="279:36"><name pos:start="279:9" pos:end="279:28">bytestream2_put_byte</name><argument_list pos:start="279:29" pos:end="279:36">(<argument pos:start="279:30" pos:end="279:32"><expr pos:start="279:30" pos:end="279:32"><operator pos:start="279:30" pos:end="279:30">&amp;</operator><name pos:start="279:31" pos:end="279:32">pb</name></expr></argument>, <argument pos:start="279:35" pos:end="279:35"><expr pos:start="279:35" pos:end="279:35"><literal type="number" pos:start="279:35" pos:end="279:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="283:1" pos:end="291:15">#<cpp:directive pos:start="283:2" pos:end="283:7">define</cpp:directive> <cpp:macro pos:start="283:9" pos:end="283:29"><name pos:start="283:9" pos:end="283:23">WRITE_DECWEIGHT</name><parameter_list pos:start="283:24" pos:end="283:29">(<parameter pos:start="283:25" pos:end="283:28"><type pos:start="283:25" pos:end="283:28"><name pos:start="283:25" pos:end="283:28">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="283:31" pos:end="291:15">do {            \

        temp = store_weight(type);    \

        bytestream2_put_byte(&amp;pb, temp);      \

        type = restore_weight(temp);  \

    } while (0)</cpp:value></cpp:define>



    <expr_stmt pos:start="295:5" pos:end="295:48"><expr pos:start="295:5" pos:end="295:47"><call pos:start="295:5" pos:end="295:47"><name pos:start="295:5" pos:end="295:24">bytestream2_put_byte</name><argument_list pos:start="295:25" pos:end="295:47">(<argument pos:start="295:26" pos:end="295:28"><expr pos:start="295:26" pos:end="295:28"><operator pos:start="295:26" pos:end="295:26">&amp;</operator><name pos:start="295:27" pos:end="295:28">pb</name></expr></argument>, <argument pos:start="295:31" pos:end="295:46"><expr pos:start="295:31" pos:end="295:46"><name pos:start="295:31" pos:end="295:46">WP_ID_DECWEIGHTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:33"><expr pos:start="297:5" pos:end="297:32"><call pos:start="297:5" pos:end="297:32"><name pos:start="297:5" pos:end="297:24">bytestream2_put_byte</name><argument_list pos:start="297:25" pos:end="297:32">(<argument pos:start="297:26" pos:end="297:28"><expr pos:start="297:26" pos:end="297:28"><operator pos:start="297:26" pos:end="297:26">&amp;</operator><name pos:start="297:27" pos:end="297:28">pb</name></expr></argument>, <argument pos:start="297:31" pos:end="297:31"><expr pos:start="297:31" pos:end="297:31"><literal type="number" pos:start="297:31" pos:end="297:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:36"><expr pos:start="299:5" pos:end="299:35"><name pos:start="299:5" pos:end="299:9">start</name> <operator pos:start="299:11" pos:end="299:11">=</operator> <call pos:start="299:13" pos:end="299:35"><name pos:start="299:13" pos:end="299:30">bytestream2_tell_p</name><argument_list pos:start="299:31" pos:end="299:35">(<argument pos:start="299:32" pos:end="299:34"><expr pos:start="299:32" pos:end="299:34"><operator pos:start="299:32" pos:end="299:32">&amp;</operator><name pos:start="299:33" pos:end="299:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="301:5" pos:end="313:5">for <control pos:start="301:9" pos:end="301:43">(<init pos:start="301:10" pos:end="301:30"><expr pos:start="301:10" pos:end="301:29"><name pos:start="301:10" pos:end="301:10">i</name> <operator pos:start="301:12" pos:end="301:12">=</operator> <name pos:start="301:14" pos:end="301:25"><name pos:start="301:14" pos:end="301:14">s</name><operator pos:start="301:15" pos:end="301:16">-&gt;</operator><name pos:start="301:17" pos:end="301:25">num_terms</name></name> <operator pos:start="301:27" pos:end="301:27">-</operator> <literal type="number" pos:start="301:29" pos:end="301:29">1</literal></expr>;</init> <condition pos:start="301:32" pos:end="301:38"><expr pos:start="301:32" pos:end="301:37"><name pos:start="301:32" pos:end="301:32">i</name> <operator pos:start="301:34" pos:end="301:35">&gt;=</operator> <literal type="number" pos:start="301:37" pos:end="301:37">0</literal></expr>;</condition> <incr pos:start="301:40" pos:end="301:42"><expr pos:start="301:40" pos:end="301:42"><operator pos:start="301:40" pos:end="301:41">--</operator><name pos:start="301:42" pos:end="301:42">i</name></expr></incr>)</control> <block pos:start="301:45" pos:end="313:5">{<block_content pos:start="303:9" pos:end="311:22">

        <decl_stmt pos:start="303:9" pos:end="303:50"><decl pos:start="303:9" pos:end="303:49"><type pos:start="303:9" pos:end="303:23"><name pos:start="303:9" pos:end="303:21"><name pos:start="303:9" pos:end="303:14">struct</name> <name pos:start="303:16" pos:end="303:21">Decorr</name></name> <modifier pos:start="303:23" pos:end="303:23">*</modifier></type><name pos:start="303:24" pos:end="303:26">dpp</name> <init pos:start="303:28" pos:end="303:49">= <expr pos:start="303:30" pos:end="303:49"><operator pos:start="303:30" pos:end="303:30">&amp;</operator><name pos:start="303:31" pos:end="303:49"><name pos:start="303:31" pos:end="303:31">s</name><operator pos:start="303:32" pos:end="303:33">-&gt;</operator><name pos:start="303:34" pos:end="303:46">decorr_passes</name><index pos:start="303:47" pos:end="303:49">[<expr pos:start="303:48" pos:end="303:48"><name pos:start="303:48" pos:end="303:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="307:9" pos:end="311:22"><if pos:start="307:9" pos:end="311:22">if <condition pos:start="307:12" pos:end="309:71">(<expr pos:start="307:13" pos:end="309:70"><call pos:start="307:13" pos:end="307:38"><name pos:start="307:13" pos:end="307:24">store_weight</name><argument_list pos:start="307:25" pos:end="307:38">(<argument pos:start="307:26" pos:end="307:37"><expr pos:start="307:26" pos:end="307:37"><name pos:start="307:26" pos:end="307:37"><name pos:start="307:26" pos:end="307:28">dpp</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:37">weightA</name></name></expr></argument>)</argument_list></call> <operator pos:start="307:40" pos:end="307:41">||</operator>

            <operator pos:start="309:13" pos:end="309:13">(</operator><operator pos:start="309:14" pos:end="309:14">!</operator><operator pos:start="309:15" pos:end="309:15">(</operator><name pos:start="309:16" pos:end="309:23"><name pos:start="309:16" pos:end="309:16">s</name><operator pos:start="309:17" pos:end="309:18">-&gt;</operator><name pos:start="309:19" pos:end="309:23">flags</name></name> <operator pos:start="309:25" pos:end="309:25">&amp;</operator> <name pos:start="309:27" pos:end="309:38">WV_MONO_DATA</name><operator pos:start="309:39" pos:end="309:39">)</operator> <operator pos:start="309:41" pos:end="309:42">&amp;&amp;</operator> <call pos:start="309:44" pos:end="309:69"><name pos:start="309:44" pos:end="309:55">store_weight</name><argument_list pos:start="309:56" pos:end="309:69">(<argument pos:start="309:57" pos:end="309:68"><expr pos:start="309:57" pos:end="309:68"><name pos:start="309:57" pos:end="309:68"><name pos:start="309:57" pos:end="309:59">dpp</name><operator pos:start="309:60" pos:end="309:61">-&gt;</operator><name pos:start="309:62" pos:end="309:68">weightB</name></name></expr></argument>)</argument_list></call><operator pos:start="309:70" pos:end="309:70">)</operator></expr>)</condition><block type="pseudo" pos:start="311:17" pos:end="311:22"><block_content pos:start="311:17" pos:end="311:22">

                <break pos:start="311:17" pos:end="311:22">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="315:5" pos:end="315:19"><expr pos:start="315:5" pos:end="315:18"><name pos:start="315:5" pos:end="315:10">tcount</name> <operator pos:start="315:12" pos:end="315:12">=</operator> <name pos:start="315:14" pos:end="315:14">i</name> <operator pos:start="315:16" pos:end="315:16">+</operator> <literal type="number" pos:start="315:18" pos:end="315:18">1</literal></expr>;</expr_stmt>

    <for pos:start="317:5" pos:end="335:5">for <control pos:start="317:9" pos:end="317:38">(<init pos:start="317:10" pos:end="317:15"><expr pos:start="317:10" pos:end="317:14"><name pos:start="317:10" pos:end="317:10">i</name> <operator pos:start="317:12" pos:end="317:12">=</operator> <literal type="number" pos:start="317:14" pos:end="317:14">0</literal></expr>;</init> <condition pos:start="317:17" pos:end="317:33"><expr pos:start="317:17" pos:end="317:32"><name pos:start="317:17" pos:end="317:17">i</name> <operator pos:start="317:19" pos:end="317:19">&lt;</operator> <name pos:start="317:21" pos:end="317:32"><name pos:start="317:21" pos:end="317:21">s</name><operator pos:start="317:22" pos:end="317:23">-&gt;</operator><name pos:start="317:24" pos:end="317:32">num_terms</name></name></expr>;</condition> <incr pos:start="317:35" pos:end="317:37"><expr pos:start="317:35" pos:end="317:37"><name pos:start="317:35" pos:end="317:35">i</name><operator pos:start="317:36" pos:end="317:37">++</operator></expr></incr>)</control> <block pos:start="317:40" pos:end="335:5">{<block_content pos:start="319:9" pos:end="333:9">

        <decl_stmt pos:start="319:9" pos:end="319:50"><decl pos:start="319:9" pos:end="319:49"><type pos:start="319:9" pos:end="319:23"><name pos:start="319:9" pos:end="319:21"><name pos:start="319:9" pos:end="319:14">struct</name> <name pos:start="319:16" pos:end="319:21">Decorr</name></name> <modifier pos:start="319:23" pos:end="319:23">*</modifier></type><name pos:start="319:24" pos:end="319:26">dpp</name> <init pos:start="319:28" pos:end="319:49">= <expr pos:start="319:30" pos:end="319:49"><operator pos:start="319:30" pos:end="319:30">&amp;</operator><name pos:start="319:31" pos:end="319:49"><name pos:start="319:31" pos:end="319:31">s</name><operator pos:start="319:32" pos:end="319:33">-&gt;</operator><name pos:start="319:34" pos:end="319:46">decorr_passes</name><index pos:start="319:47" pos:end="319:49">[<expr pos:start="319:48" pos:end="319:48"><name pos:start="319:48" pos:end="319:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="321:9" pos:end="333:9"><if pos:start="321:9" pos:end="329:9">if <condition pos:start="321:12" pos:end="321:23">(<expr pos:start="321:13" pos:end="321:22"><name pos:start="321:13" pos:end="321:13">i</name> <operator pos:start="321:15" pos:end="321:15">&lt;</operator> <name pos:start="321:17" pos:end="321:22">tcount</name></expr>)</condition> <block pos:start="321:25" pos:end="329:9">{<block_content pos:start="323:13" pos:end="327:46">

            <expr_stmt pos:start="323:13" pos:end="323:42"><expr pos:start="323:13" pos:end="323:41"><call pos:start="323:13" pos:end="323:41"><name pos:start="323:13" pos:end="323:27">WRITE_DECWEIGHT</name><argument_list pos:start="323:28" pos:end="323:41">(<argument pos:start="323:29" pos:end="323:40"><expr pos:start="323:29" pos:end="323:40"><name pos:start="323:29" pos:end="323:40"><name pos:start="323:29" pos:end="323:31">dpp</name><operator pos:start="323:32" pos:end="323:33">-&gt;</operator><name pos:start="323:34" pos:end="323:40">weightA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="327:46"><if pos:start="325:13" pos:end="327:46">if <condition pos:start="325:16" pos:end="325:43">(<expr pos:start="325:17" pos:end="325:42"><operator pos:start="325:17" pos:end="325:17">!</operator><operator pos:start="325:18" pos:end="325:18">(</operator><name pos:start="325:19" pos:end="325:26"><name pos:start="325:19" pos:end="325:19">s</name><operator pos:start="325:20" pos:end="325:21">-&gt;</operator><name pos:start="325:22" pos:end="325:26">flags</name></name> <operator pos:start="325:28" pos:end="325:28">&amp;</operator> <name pos:start="325:30" pos:end="325:41">WV_MONO_DATA</name><operator pos:start="325:42" pos:end="325:42">)</operator></expr>)</condition><block type="pseudo" pos:start="327:17" pos:end="327:46"><block_content pos:start="327:17" pos:end="327:46">

                <expr_stmt pos:start="327:17" pos:end="327:46"><expr pos:start="327:17" pos:end="327:45"><call pos:start="327:17" pos:end="327:45"><name pos:start="327:17" pos:end="327:31">WRITE_DECWEIGHT</name><argument_list pos:start="327:32" pos:end="327:45">(<argument pos:start="327:33" pos:end="327:44"><expr pos:start="327:33" pos:end="327:44"><name pos:start="327:33" pos:end="327:44"><name pos:start="327:33" pos:end="327:35">dpp</name><operator pos:start="327:36" pos:end="327:37">-&gt;</operator><name pos:start="327:38" pos:end="327:44">weightB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="333:9">else <block pos:start="329:16" pos:end="333:9">{<block_content pos:start="331:13" pos:end="331:44">

            <expr_stmt pos:start="331:13" pos:end="331:44"><expr pos:start="331:13" pos:end="331:43"><name pos:start="331:13" pos:end="331:24"><name pos:start="331:13" pos:end="331:15">dpp</name><operator pos:start="331:16" pos:end="331:17">-&gt;</operator><name pos:start="331:18" pos:end="331:24">weightA</name></name> <operator pos:start="331:26" pos:end="331:26">=</operator> <name pos:start="331:28" pos:end="331:39"><name pos:start="331:28" pos:end="331:30">dpp</name><operator pos:start="331:31" pos:end="331:32">-&gt;</operator><name pos:start="331:33" pos:end="331:39">weightB</name></name> <operator pos:start="331:41" pos:end="331:41">=</operator> <literal type="number" pos:start="331:43" pos:end="331:43">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="337:5" pos:end="337:34"><expr pos:start="337:5" pos:end="337:33"><name pos:start="337:5" pos:end="337:7">end</name> <operator pos:start="337:9" pos:end="337:9">=</operator> <call pos:start="337:11" pos:end="337:33"><name pos:start="337:11" pos:end="337:28">bytestream2_tell_p</name><argument_list pos:start="337:29" pos:end="337:33">(<argument pos:start="337:30" pos:end="337:32"><expr pos:start="337:30" pos:end="337:32"><operator pos:start="337:30" pos:end="337:30">&amp;</operator><name pos:start="337:31" pos:end="337:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:78"><expr pos:start="339:5" pos:end="339:77"><name pos:start="339:5" pos:end="339:18"><name pos:start="339:5" pos:end="339:7">out</name><index pos:start="339:8" pos:end="339:18">[<expr pos:start="339:9" pos:end="339:17"><name pos:start="339:9" pos:end="339:13">start</name> <operator pos:start="339:15" pos:end="339:15">-</operator> <literal type="number" pos:start="339:17" pos:end="339:17">2</literal></expr>]</index></name> <operator pos:start="339:20" pos:end="339:20">=</operator> <name pos:start="339:22" pos:end="339:37">WP_ID_DECWEIGHTS</name> <operator pos:start="339:39" pos:end="339:39">|</operator> <operator pos:start="339:41" pos:end="339:41">(</operator><ternary pos:start="339:42" pos:end="339:76"><condition pos:start="339:42" pos:end="339:62"><expr pos:start="339:42" pos:end="339:60"><operator pos:start="339:42" pos:end="339:42">(</operator><operator pos:start="339:43" pos:end="339:43">(</operator><name pos:start="339:44" pos:end="339:46">end</name> <operator pos:start="339:48" pos:end="339:48">-</operator> <name pos:start="339:50" pos:end="339:54">start</name><operator pos:start="339:55" pos:end="339:55">)</operator> <operator pos:start="339:57" pos:end="339:57">&amp;</operator> <literal type="number" pos:start="339:59" pos:end="339:59">1</literal><operator pos:start="339:60" pos:end="339:60">)</operator></expr> ?</condition><then pos:start="339:64" pos:end="339:73"> <expr pos:start="339:64" pos:end="339:73"><name pos:start="339:64" pos:end="339:73">WP_IDF_ODD</name></expr></then><else pos:start="339:74" pos:end="339:76">: <expr pos:start="339:76" pos:end="339:76"><literal type="number" pos:start="339:76" pos:end="339:76">0</literal></expr></else></ternary><operator pos:start="339:77" pos:end="339:77">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:44"><expr pos:start="341:5" pos:end="341:43"><name pos:start="341:5" pos:end="341:18"><name pos:start="341:5" pos:end="341:7">out</name><index pos:start="341:8" pos:end="341:18">[<expr pos:start="341:9" pos:end="341:17"><name pos:start="341:9" pos:end="341:13">start</name> <operator pos:start="341:15" pos:end="341:15">-</operator> <literal type="number" pos:start="341:17" pos:end="341:17">1</literal></expr>]</index></name> <operator pos:start="341:20" pos:end="341:20">=</operator> <operator pos:start="341:22" pos:end="341:22">(</operator><name pos:start="341:23" pos:end="341:25">end</name> <operator pos:start="341:27" pos:end="341:27">-</operator> <name pos:start="341:29" pos:end="341:33">start</name> <operator pos:start="341:35" pos:end="341:35">+</operator> <literal type="number" pos:start="341:37" pos:end="341:37">1</literal><operator pos:start="341:38" pos:end="341:38">)</operator> <operator pos:start="341:40" pos:end="341:41">&gt;&gt;</operator> <literal type="number" pos:start="341:43" pos:end="341:43">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="343:5" pos:end="358:0"><if pos:start="343:5" pos:end="358:0">if <condition pos:start="343:8" pos:end="343:26">(<expr pos:start="343:9" pos:end="343:25"><operator pos:start="343:9" pos:end="343:9">(</operator><name pos:start="343:10" pos:end="343:12">end</name> <operator pos:start="343:14" pos:end="343:14">-</operator> <name pos:start="343:16" pos:end="343:20">start</name><operator pos:start="343:21" pos:end="343:21">)</operator> <operator pos:start="343:23" pos:end="343:23">&amp;</operator> <literal type="number" pos:start="343:25" pos:end="343:25">1</literal></expr>)</condition><block type="pseudo" pos:start="345:9" pos:end="358:0"><block_content pos:start="345:9" pos:end="358:0">

        <expr_stmt pos:start="345:9" pos:end="358:0"><expr pos:start="345:9" pos:end="345:36"><call pos:start="345:9" pos:end="345:36"><name pos:start="345:9" pos:end="345:28">bytestream2_put_byte</name><argument_list pos:start="345:29" pos:end="345:36">(<argument pos:start="345:30" pos:end="345:32"><expr pos:start="345:30" pos:end="345:32"><operator pos:start="345:30" pos:end="345:30">&amp;</operator><name pos:start="345:31" pos:end="345:32">pb</name></expr></argument>, <argument pos:start="345:35" pos:end="345:35"><expr pos:start="345:35" pos:end="345:35"><literal type="number" pos:start="345:35" pos:end="345:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="349:1" pos:end="357:15">#<cpp:directive pos:start="349:2" pos:end="349:7">define</cpp:directive> <cpp:macro pos:start="349:9" pos:end="349:29"><name pos:start="349:9" pos:end="349:23">WRITE_DECSAMPLE</name><parameter_list pos:start="349:24" pos:end="349:29">(<parameter pos:start="349:25" pos:end="349:28"><type pos:start="349:25" pos:end="349:28"><name pos:start="349:25" pos:end="349:28">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="349:31" pos:end="357:15">do {        \

        temp = log2s(type);               \

        type = wp_exp2(temp);             \

        bytestream2_put_le16(&amp;pb, temp);  \

    } while (0)</cpp:value></cpp:define>



    <expr_stmt pos:start="361:5" pos:end="361:48"><expr pos:start="361:5" pos:end="361:47"><call pos:start="361:5" pos:end="361:47"><name pos:start="361:5" pos:end="361:24">bytestream2_put_byte</name><argument_list pos:start="361:25" pos:end="361:47">(<argument pos:start="361:26" pos:end="361:28"><expr pos:start="361:26" pos:end="361:28"><operator pos:start="361:26" pos:end="361:26">&amp;</operator><name pos:start="361:27" pos:end="361:28">pb</name></expr></argument>, <argument pos:start="361:31" pos:end="361:46"><expr pos:start="361:31" pos:end="361:46"><name pos:start="361:31" pos:end="361:46">WP_ID_DECSAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:33"><expr pos:start="363:5" pos:end="363:32"><call pos:start="363:5" pos:end="363:32"><name pos:start="363:5" pos:end="363:24">bytestream2_put_byte</name><argument_list pos:start="363:25" pos:end="363:32">(<argument pos:start="363:26" pos:end="363:28"><expr pos:start="363:26" pos:end="363:28"><operator pos:start="363:26" pos:end="363:26">&amp;</operator><name pos:start="363:27" pos:end="363:28">pb</name></expr></argument>, <argument pos:start="363:31" pos:end="363:31"><expr pos:start="363:31" pos:end="363:31"><literal type="number" pos:start="363:31" pos:end="363:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:36"><expr pos:start="365:5" pos:end="365:35"><name pos:start="365:5" pos:end="365:9">start</name> <operator pos:start="365:11" pos:end="365:11">=</operator> <call pos:start="365:13" pos:end="365:35"><name pos:start="365:13" pos:end="365:30">bytestream2_tell_p</name><argument_list pos:start="365:31" pos:end="365:35">(<argument pos:start="365:32" pos:end="365:34"><expr pos:start="365:32" pos:end="365:34"><operator pos:start="365:32" pos:end="365:32">&amp;</operator><name pos:start="365:33" pos:end="365:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="367:5" pos:end="415:5">for <control pos:start="367:9" pos:end="367:38">(<init pos:start="367:10" pos:end="367:15"><expr pos:start="367:10" pos:end="367:14"><name pos:start="367:10" pos:end="367:10">i</name> <operator pos:start="367:12" pos:end="367:12">=</operator> <literal type="number" pos:start="367:14" pos:end="367:14">0</literal></expr>;</init> <condition pos:start="367:17" pos:end="367:33"><expr pos:start="367:17" pos:end="367:32"><name pos:start="367:17" pos:end="367:17">i</name> <operator pos:start="367:19" pos:end="367:19">&lt;</operator> <name pos:start="367:21" pos:end="367:32"><name pos:start="367:21" pos:end="367:21">s</name><operator pos:start="367:22" pos:end="367:23">-&gt;</operator><name pos:start="367:24" pos:end="367:32">num_terms</name></name></expr>;</condition> <incr pos:start="367:35" pos:end="367:37"><expr pos:start="367:35" pos:end="367:37"><name pos:start="367:35" pos:end="367:35">i</name><operator pos:start="367:36" pos:end="367:37">++</operator></expr></incr>)</control> <block pos:start="367:40" pos:end="415:5">{<block_content pos:start="369:9" pos:end="413:9">

        <decl_stmt pos:start="369:9" pos:end="369:50"><decl pos:start="369:9" pos:end="369:49"><type pos:start="369:9" pos:end="369:23"><name pos:start="369:9" pos:end="369:21"><name pos:start="369:9" pos:end="369:14">struct</name> <name pos:start="369:16" pos:end="369:21">Decorr</name></name> <modifier pos:start="369:23" pos:end="369:23">*</modifier></type><name pos:start="369:24" pos:end="369:26">dpp</name> <init pos:start="369:28" pos:end="369:49">= <expr pos:start="369:30" pos:end="369:49"><operator pos:start="369:30" pos:end="369:30">&amp;</operator><name pos:start="369:31" pos:end="369:49"><name pos:start="369:31" pos:end="369:31">s</name><operator pos:start="369:32" pos:end="369:33">-&gt;</operator><name pos:start="369:34" pos:end="369:46">decorr_passes</name><index pos:start="369:47" pos:end="369:49">[<expr pos:start="369:48" pos:end="369:48"><name pos:start="369:48" pos:end="369:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="371:9" pos:end="413:9"><if pos:start="371:9" pos:end="407:9">if <condition pos:start="371:12" pos:end="371:19">(<expr pos:start="371:13" pos:end="371:18"><name pos:start="371:13" pos:end="371:13">i</name> <operator pos:start="371:15" pos:end="371:16">==</operator> <literal type="number" pos:start="371:18" pos:end="371:18">0</literal></expr>)</condition> <block pos:start="371:21" pos:end="407:9">{<block_content pos:start="373:13" pos:end="405:13">

            <if_stmt pos:start="373:13" pos:end="405:13"><if pos:start="373:13" pos:end="387:13">if <condition pos:start="373:16" pos:end="373:38">(<expr pos:start="373:17" pos:end="373:37"><name pos:start="373:17" pos:end="373:26"><name pos:start="373:17" pos:end="373:19">dpp</name><operator pos:start="373:20" pos:end="373:21">-&gt;</operator><name pos:start="373:22" pos:end="373:26">value</name></name> <operator pos:start="373:28" pos:end="373:28">&gt;</operator> <name pos:start="373:30" pos:end="373:37">MAX_TERM</name></expr>)</condition> <block pos:start="373:40" pos:end="387:13">{<block_content pos:start="375:17" pos:end="385:17">

                <expr_stmt pos:start="375:17" pos:end="375:50"><expr pos:start="375:17" pos:end="375:49"><call pos:start="375:17" pos:end="375:49"><name pos:start="375:17" pos:end="375:31">WRITE_DECSAMPLE</name><argument_list pos:start="375:32" pos:end="375:49">(<argument pos:start="375:33" pos:end="375:48"><expr pos:start="375:33" pos:end="375:48"><name pos:start="375:33" pos:end="375:48"><name pos:start="375:33" pos:end="375:35">dpp</name><operator pos:start="375:36" pos:end="375:37">-&gt;</operator><name pos:start="375:38" pos:end="375:45">samplesA</name><index pos:start="375:46" pos:end="375:48">[<expr pos:start="375:47" pos:end="375:47"><literal type="number" pos:start="375:47" pos:end="375:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:50"><expr pos:start="377:17" pos:end="377:49"><call pos:start="377:17" pos:end="377:49"><name pos:start="377:17" pos:end="377:31">WRITE_DECSAMPLE</name><argument_list pos:start="377:32" pos:end="377:49">(<argument pos:start="377:33" pos:end="377:48"><expr pos:start="377:33" pos:end="377:48"><name pos:start="377:33" pos:end="377:48"><name pos:start="377:33" pos:end="377:35">dpp</name><operator pos:start="377:36" pos:end="377:37">-&gt;</operator><name pos:start="377:38" pos:end="377:45">samplesA</name><index pos:start="377:46" pos:end="377:48">[<expr pos:start="377:47" pos:end="377:47"><literal type="number" pos:start="377:47" pos:end="377:47">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="379:17" pos:end="385:17"><if pos:start="379:17" pos:end="385:17">if <condition pos:start="379:20" pos:end="379:47">(<expr pos:start="379:21" pos:end="379:46"><operator pos:start="379:21" pos:end="379:21">!</operator><operator pos:start="379:22" pos:end="379:22">(</operator><name pos:start="379:23" pos:end="379:30"><name pos:start="379:23" pos:end="379:23">s</name><operator pos:start="379:24" pos:end="379:25">-&gt;</operator><name pos:start="379:26" pos:end="379:30">flags</name></name> <operator pos:start="379:32" pos:end="379:32">&amp;</operator> <name pos:start="379:34" pos:end="379:45">WV_MONO_DATA</name><operator pos:start="379:46" pos:end="379:46">)</operator></expr>)</condition> <block pos:start="379:49" pos:end="385:17">{<block_content pos:start="381:21" pos:end="383:54">

                    <expr_stmt pos:start="381:21" pos:end="381:54"><expr pos:start="381:21" pos:end="381:53"><call pos:start="381:21" pos:end="381:53"><name pos:start="381:21" pos:end="381:35">WRITE_DECSAMPLE</name><argument_list pos:start="381:36" pos:end="381:53">(<argument pos:start="381:37" pos:end="381:52"><expr pos:start="381:37" pos:end="381:52"><name pos:start="381:37" pos:end="381:52"><name pos:start="381:37" pos:end="381:39">dpp</name><operator pos:start="381:40" pos:end="381:41">-&gt;</operator><name pos:start="381:42" pos:end="381:49">samplesB</name><index pos:start="381:50" pos:end="381:52">[<expr pos:start="381:51" pos:end="381:51"><literal type="number" pos:start="381:51" pos:end="381:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="383:21" pos:end="383:54"><expr pos:start="383:21" pos:end="383:53"><call pos:start="383:21" pos:end="383:53"><name pos:start="383:21" pos:end="383:35">WRITE_DECSAMPLE</name><argument_list pos:start="383:36" pos:end="383:53">(<argument pos:start="383:37" pos:end="383:52"><expr pos:start="383:37" pos:end="383:52"><name pos:start="383:37" pos:end="383:52"><name pos:start="383:37" pos:end="383:39">dpp</name><operator pos:start="383:40" pos:end="383:41">-&gt;</operator><name pos:start="383:42" pos:end="383:49">samplesB</name><index pos:start="383:50" pos:end="383:52">[<expr pos:start="383:51" pos:end="383:51"><literal type="number" pos:start="383:51" pos:end="383:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="387:15" pos:end="393:13">else if <condition pos:start="387:23" pos:end="387:38">(<expr pos:start="387:24" pos:end="387:37"><name pos:start="387:24" pos:end="387:33"><name pos:start="387:24" pos:end="387:26">dpp</name><operator pos:start="387:27" pos:end="387:28">-&gt;</operator><name pos:start="387:29" pos:end="387:33">value</name></name> <operator pos:start="387:35" pos:end="387:35">&lt;</operator> <literal type="number" pos:start="387:37" pos:end="387:37">0</literal></expr>)</condition> <block pos:start="387:40" pos:end="393:13">{<block_content pos:start="389:17" pos:end="391:50">

                <expr_stmt pos:start="389:17" pos:end="389:50"><expr pos:start="389:17" pos:end="389:49"><call pos:start="389:17" pos:end="389:49"><name pos:start="389:17" pos:end="389:31">WRITE_DECSAMPLE</name><argument_list pos:start="389:32" pos:end="389:49">(<argument pos:start="389:33" pos:end="389:48"><expr pos:start="389:33" pos:end="389:48"><name pos:start="389:33" pos:end="389:48"><name pos:start="389:33" pos:end="389:35">dpp</name><operator pos:start="389:36" pos:end="389:37">-&gt;</operator><name pos:start="389:38" pos:end="389:45">samplesA</name><index pos:start="389:46" pos:end="389:48">[<expr pos:start="389:47" pos:end="389:47"><literal type="number" pos:start="389:47" pos:end="389:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:50"><expr pos:start="391:17" pos:end="391:49"><call pos:start="391:17" pos:end="391:49"><name pos:start="391:17" pos:end="391:31">WRITE_DECSAMPLE</name><argument_list pos:start="391:32" pos:end="391:49">(<argument pos:start="391:33" pos:end="391:48"><expr pos:start="391:33" pos:end="391:48"><name pos:start="391:33" pos:end="391:48"><name pos:start="391:33" pos:end="391:35">dpp</name><operator pos:start="391:36" pos:end="391:37">-&gt;</operator><name pos:start="391:38" pos:end="391:45">samplesB</name><index pos:start="391:46" pos:end="391:48">[<expr pos:start="391:47" pos:end="391:47"><literal type="number" pos:start="391:47" pos:end="391:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="393:15" pos:end="405:13">else <block pos:start="393:20" pos:end="405:13">{<block_content pos:start="395:17" pos:end="403:17">

                <for pos:start="395:17" pos:end="403:17">for <control pos:start="395:21" pos:end="395:48">(<init pos:start="395:22" pos:end="395:27"><expr pos:start="395:22" pos:end="395:26"><name pos:start="395:22" pos:end="395:22">j</name> <operator pos:start="395:24" pos:end="395:24">=</operator> <literal type="number" pos:start="395:26" pos:end="395:26">0</literal></expr>;</init> <condition pos:start="395:29" pos:end="395:43"><expr pos:start="395:29" pos:end="395:42"><name pos:start="395:29" pos:end="395:29">j</name> <operator pos:start="395:31" pos:end="395:31">&lt;</operator> <name pos:start="395:33" pos:end="395:42"><name pos:start="395:33" pos:end="395:35">dpp</name><operator pos:start="395:36" pos:end="395:37">-&gt;</operator><name pos:start="395:38" pos:end="395:42">value</name></name></expr>;</condition> <incr pos:start="395:45" pos:end="395:47"><expr pos:start="395:45" pos:end="395:47"><name pos:start="395:45" pos:end="395:45">j</name><operator pos:start="395:46" pos:end="395:47">++</operator></expr></incr>)</control> <block pos:start="395:50" pos:end="403:17">{<block_content pos:start="397:21" pos:end="401:58">

                    <expr_stmt pos:start="397:21" pos:end="397:54"><expr pos:start="397:21" pos:end="397:53"><call pos:start="397:21" pos:end="397:53"><name pos:start="397:21" pos:end="397:35">WRITE_DECSAMPLE</name><argument_list pos:start="397:36" pos:end="397:53">(<argument pos:start="397:37" pos:end="397:52"><expr pos:start="397:37" pos:end="397:52"><name pos:start="397:37" pos:end="397:52"><name pos:start="397:37" pos:end="397:39">dpp</name><operator pos:start="397:40" pos:end="397:41">-&gt;</operator><name pos:start="397:42" pos:end="397:49">samplesA</name><index pos:start="397:50" pos:end="397:52">[<expr pos:start="397:51" pos:end="397:51"><name pos:start="397:51" pos:end="397:51">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="399:21" pos:end="401:58"><if pos:start="399:21" pos:end="401:58">if <condition pos:start="399:24" pos:end="399:51">(<expr pos:start="399:25" pos:end="399:50"><operator pos:start="399:25" pos:end="399:25">!</operator><operator pos:start="399:26" pos:end="399:26">(</operator><name pos:start="399:27" pos:end="399:34"><name pos:start="399:27" pos:end="399:27">s</name><operator pos:start="399:28" pos:end="399:29">-&gt;</operator><name pos:start="399:30" pos:end="399:34">flags</name></name> <operator pos:start="399:36" pos:end="399:36">&amp;</operator> <name pos:start="399:38" pos:end="399:49">WV_MONO_DATA</name><operator pos:start="399:50" pos:end="399:50">)</operator></expr>)</condition><block type="pseudo" pos:start="401:25" pos:end="401:58"><block_content pos:start="401:25" pos:end="401:58">

                        <expr_stmt pos:start="401:25" pos:end="401:58"><expr pos:start="401:25" pos:end="401:57"><call pos:start="401:25" pos:end="401:57"><name pos:start="401:25" pos:end="401:39">WRITE_DECSAMPLE</name><argument_list pos:start="401:40" pos:end="401:57">(<argument pos:start="401:41" pos:end="401:56"><expr pos:start="401:41" pos:end="401:56"><name pos:start="401:41" pos:end="401:56"><name pos:start="401:41" pos:end="401:43">dpp</name><operator pos:start="401:44" pos:end="401:45">-&gt;</operator><name pos:start="401:46" pos:end="401:53">samplesB</name><index pos:start="401:54" pos:end="401:56">[<expr pos:start="401:55" pos:end="401:55"><name pos:start="401:55" pos:end="401:55">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="407:11" pos:end="413:9">else <block pos:start="407:16" pos:end="413:9">{<block_content pos:start="409:13" pos:end="411:33">

            <expr_stmt pos:start="409:13" pos:end="409:33"><expr pos:start="409:13" pos:end="409:32"><call pos:start="409:13" pos:end="409:32"><name pos:start="409:13" pos:end="409:17">CLEAR</name><argument_list pos:start="409:18" pos:end="409:32">(<argument pos:start="409:19" pos:end="409:31"><expr pos:start="409:19" pos:end="409:31"><name pos:start="409:19" pos:end="409:31"><name pos:start="409:19" pos:end="409:21">dpp</name><operator pos:start="409:22" pos:end="409:23">-&gt;</operator><name pos:start="409:24" pos:end="409:31">samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:33"><expr pos:start="411:13" pos:end="411:32"><call pos:start="411:13" pos:end="411:32"><name pos:start="411:13" pos:end="411:17">CLEAR</name><argument_list pos:start="411:18" pos:end="411:32">(<argument pos:start="411:19" pos:end="411:31"><expr pos:start="411:19" pos:end="411:31"><name pos:start="411:19" pos:end="411:31"><name pos:start="411:19" pos:end="411:21">dpp</name><operator pos:start="411:22" pos:end="411:23">-&gt;</operator><name pos:start="411:24" pos:end="411:31">samplesB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="417:5" pos:end="417:34"><expr pos:start="417:5" pos:end="417:33"><name pos:start="417:5" pos:end="417:7">end</name> <operator pos:start="417:9" pos:end="417:9">=</operator> <call pos:start="417:11" pos:end="417:33"><name pos:start="417:11" pos:end="417:28">bytestream2_tell_p</name><argument_list pos:start="417:29" pos:end="417:33">(<argument pos:start="417:30" pos:end="417:32"><expr pos:start="417:30" pos:end="417:32"><operator pos:start="417:30" pos:end="417:30">&amp;</operator><name pos:start="417:31" pos:end="417:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="419:5" pos:end="436:0"><expr pos:start="419:5" pos:end="419:39"><name pos:start="419:5" pos:end="419:18"><name pos:start="419:5" pos:end="419:7">out</name><index pos:start="419:8" pos:end="419:18">[<expr pos:start="419:9" pos:end="419:17"><name pos:start="419:9" pos:end="419:13">start</name> <operator pos:start="419:15" pos:end="419:15">-</operator> <literal type="number" pos:start="419:17" pos:end="419:17">1</literal></expr>]</index></name> <operator pos:start="419:20" pos:end="419:20">=</operator> <operator pos:start="419:22" pos:end="419:22">(</operator><name pos:start="419:23" pos:end="419:25">end</name> <operator pos:start="419:27" pos:end="419:27">-</operator> <name pos:start="419:29" pos:end="419:33">start</name><operator pos:start="419:34" pos:end="419:34">)</operator> <operator pos:start="419:36" pos:end="419:37">&gt;&gt;</operator> <literal type="number" pos:start="419:39" pos:end="419:39">1</literal></expr>;</expr_stmt>



<cpp:define pos:start="423:1" pos:end="435:15">#<cpp:directive pos:start="423:2" pos:end="423:7">define</cpp:directive> <cpp:macro pos:start="423:9" pos:end="423:32"><name pos:start="423:9" pos:end="423:26">WRITE_CHAN_ENTROPY</name><parameter_list pos:start="423:27" pos:end="423:32">(<parameter pos:start="423:28" pos:end="423:31"><type pos:start="423:28" pos:end="423:31"><name pos:start="423:28" pos:end="423:31">chan</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="423:34" pos:end="435:15">do {               \

        for (i = 0; i &lt; 3; i++) {                   \

            temp = wp_log2(s-&gt;w.c[chan].median[i]); \

            bytestream2_put_le16(&amp;pb, temp);        \

            s-&gt;w.c[chan].median[i] = wp_exp2(temp); \

        }                                           \

    } while (0)</cpp:value></cpp:define>



    <expr_stmt pos:start="439:5" pos:end="439:83"><expr pos:start="439:5" pos:end="439:82"><call pos:start="439:5" pos:end="439:82"><name pos:start="439:5" pos:end="439:22">put_metadata_block</name><argument_list pos:start="439:23" pos:end="439:82">(<argument pos:start="439:24" pos:end="439:26"><expr pos:start="439:24" pos:end="439:26"><operator pos:start="439:24" pos:end="439:24">&amp;</operator><name pos:start="439:25" pos:end="439:26">pb</name></expr></argument>, <argument pos:start="439:29" pos:end="439:41"><expr pos:start="439:29" pos:end="439:41"><name pos:start="439:29" pos:end="439:41">WP_ID_ENTROPY</name></expr></argument>, <argument pos:start="439:44" pos:end="439:81"><expr pos:start="439:44" pos:end="439:81"><literal type="number" pos:start="439:44" pos:end="439:44">6</literal> <operator pos:start="439:46" pos:end="439:46">*</operator> <operator pos:start="439:48" pos:end="439:48">(</operator><literal type="number" pos:start="439:49" pos:end="439:51">1</literal> <operator pos:start="439:51" pos:end="439:51">+</operator> <operator pos:start="439:53" pos:end="439:53">(</operator><operator pos:start="439:54" pos:end="439:54">!</operator><operator pos:start="439:55" pos:end="439:55">(</operator><name pos:start="439:56" pos:end="439:63"><name pos:start="439:56" pos:end="439:56">s</name><operator pos:start="439:57" pos:end="439:58">-&gt;</operator><name pos:start="439:59" pos:end="439:63">flags</name></name> <operator pos:start="439:65" pos:end="439:65">&amp;</operator> <name pos:start="439:67" pos:end="439:78">WV_MONO_DATA</name><operator pos:start="439:79" pos:end="439:79">)</operator><operator pos:start="439:80" pos:end="439:80">)</operator><operator pos:start="439:81" pos:end="439:81">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:26"><expr pos:start="441:5" pos:end="441:25"><call pos:start="441:5" pos:end="441:25"><name pos:start="441:5" pos:end="441:22">WRITE_CHAN_ENTROPY</name><argument_list pos:start="441:23" pos:end="441:25">(<argument pos:start="441:24" pos:end="441:24"><expr pos:start="441:24" pos:end="441:24"><literal type="number" pos:start="441:24" pos:end="441:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="443:5" pos:end="445:30"><if pos:start="443:5" pos:end="445:30">if <condition pos:start="443:8" pos:end="443:35">(<expr pos:start="443:9" pos:end="443:34"><operator pos:start="443:9" pos:end="443:9">!</operator><operator pos:start="443:10" pos:end="443:10">(</operator><name pos:start="443:11" pos:end="443:18"><name pos:start="443:11" pos:end="443:11">s</name><operator pos:start="443:12" pos:end="443:13">-&gt;</operator><name pos:start="443:14" pos:end="443:18">flags</name></name> <operator pos:start="443:20" pos:end="443:20">&amp;</operator> <name pos:start="443:22" pos:end="443:33">WV_MONO_DATA</name><operator pos:start="443:34" pos:end="443:34">)</operator></expr>)</condition><block type="pseudo" pos:start="445:9" pos:end="445:30"><block_content pos:start="445:9" pos:end="445:30">

        <expr_stmt pos:start="445:9" pos:end="445:30"><expr pos:start="445:9" pos:end="445:29"><call pos:start="445:9" pos:end="445:29"><name pos:start="445:9" pos:end="445:26">WRITE_CHAN_ENTROPY</name><argument_list pos:start="445:27" pos:end="445:29">(<argument pos:start="445:28" pos:end="445:28"><expr pos:start="445:28" pos:end="445:28"><literal type="number" pos:start="445:28" pos:end="445:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="449:5" pos:end="461:5"><if pos:start="449:5" pos:end="461:5">if <condition pos:start="449:8" pos:end="449:33">(<expr pos:start="449:9" pos:end="449:32"><name pos:start="449:9" pos:end="449:16"><name pos:start="449:9" pos:end="449:9">s</name><operator pos:start="449:10" pos:end="449:11">-&gt;</operator><name pos:start="449:12" pos:end="449:16">flags</name></name> <operator pos:start="449:18" pos:end="449:18">&amp;</operator> <name pos:start="449:20" pos:end="449:32">WV_FLOAT_DATA</name></expr>)</condition> <block pos:start="449:35" pos:end="461:5">{<block_content pos:start="451:9" pos:end="459:39">

        <expr_stmt pos:start="451:9" pos:end="451:52"><expr pos:start="451:9" pos:end="451:51"><call pos:start="451:9" pos:end="451:51"><name pos:start="451:9" pos:end="451:26">put_metadata_block</name><argument_list pos:start="451:27" pos:end="451:51">(<argument pos:start="451:28" pos:end="451:30"><expr pos:start="451:28" pos:end="451:30"><operator pos:start="451:28" pos:end="451:28">&amp;</operator><name pos:start="451:29" pos:end="451:30">pb</name></expr></argument>, <argument pos:start="451:33" pos:end="451:47"><expr pos:start="451:33" pos:end="451:47"><name pos:start="451:33" pos:end="451:47">WP_ID_FLOATINFO</name></expr></argument>, <argument pos:start="451:50" pos:end="451:50"><expr pos:start="451:50" pos:end="451:50"><literal type="number" pos:start="451:50" pos:end="451:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:50"><expr pos:start="453:9" pos:end="453:49"><call pos:start="453:9" pos:end="453:49"><name pos:start="453:9" pos:end="453:28">bytestream2_put_byte</name><argument_list pos:start="453:29" pos:end="453:49">(<argument pos:start="453:30" pos:end="453:32"><expr pos:start="453:30" pos:end="453:32"><operator pos:start="453:30" pos:end="453:30">&amp;</operator><name pos:start="453:31" pos:end="453:32">pb</name></expr></argument>, <argument pos:start="453:35" pos:end="453:48"><expr pos:start="453:35" pos:end="453:48"><name pos:start="453:35" pos:end="453:48"><name pos:start="453:35" pos:end="453:35">s</name><operator pos:start="453:36" pos:end="453:37">-&gt;</operator><name pos:start="453:38" pos:end="453:48">float_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:50"><expr pos:start="455:9" pos:end="455:49"><call pos:start="455:9" pos:end="455:49"><name pos:start="455:9" pos:end="455:28">bytestream2_put_byte</name><argument_list pos:start="455:29" pos:end="455:49">(<argument pos:start="455:30" pos:end="455:32"><expr pos:start="455:30" pos:end="455:32"><operator pos:start="455:30" pos:end="455:30">&amp;</operator><name pos:start="455:31" pos:end="455:32">pb</name></expr></argument>, <argument pos:start="455:35" pos:end="455:48"><expr pos:start="455:35" pos:end="455:48"><name pos:start="455:35" pos:end="455:48"><name pos:start="455:35" pos:end="455:35">s</name><operator pos:start="455:36" pos:end="455:37">-&gt;</operator><name pos:start="455:38" pos:end="455:48">float_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:52"><expr pos:start="457:9" pos:end="457:51"><call pos:start="457:9" pos:end="457:51"><name pos:start="457:9" pos:end="457:28">bytestream2_put_byte</name><argument_list pos:start="457:29" pos:end="457:51">(<argument pos:start="457:30" pos:end="457:32"><expr pos:start="457:30" pos:end="457:32"><operator pos:start="457:30" pos:end="457:30">&amp;</operator><name pos:start="457:31" pos:end="457:32">pb</name></expr></argument>, <argument pos:start="457:35" pos:end="457:50"><expr pos:start="457:35" pos:end="457:50"><name pos:start="457:35" pos:end="457:50"><name pos:start="457:35" pos:end="457:35">s</name><operator pos:start="457:36" pos:end="457:37">-&gt;</operator><name pos:start="457:38" pos:end="457:50">float_max_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:39"><expr pos:start="459:9" pos:end="459:38"><call pos:start="459:9" pos:end="459:38"><name pos:start="459:9" pos:end="459:28">bytestream2_put_byte</name><argument_list pos:start="459:29" pos:end="459:38">(<argument pos:start="459:30" pos:end="459:32"><expr pos:start="459:30" pos:end="459:32"><operator pos:start="459:30" pos:end="459:30">&amp;</operator><name pos:start="459:31" pos:end="459:32">pb</name></expr></argument>, <argument pos:start="459:35" pos:end="459:37"><expr pos:start="459:35" pos:end="459:37"><literal type="number" pos:start="459:35" pos:end="459:37">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="465:5" pos:end="477:5"><if pos:start="465:5" pos:end="477:5">if <condition pos:start="465:8" pos:end="465:33">(<expr pos:start="465:9" pos:end="465:32"><name pos:start="465:9" pos:end="465:16"><name pos:start="465:9" pos:end="465:9">s</name><operator pos:start="465:10" pos:end="465:11">-&gt;</operator><name pos:start="465:12" pos:end="465:16">flags</name></name> <operator pos:start="465:18" pos:end="465:18">&amp;</operator> <name pos:start="465:20" pos:end="465:32">WV_INT32_DATA</name></expr>)</condition> <block pos:start="465:35" pos:end="477:5">{<block_content pos:start="467:9" pos:end="475:49">

        <expr_stmt pos:start="467:9" pos:end="467:52"><expr pos:start="467:9" pos:end="467:51"><call pos:start="467:9" pos:end="467:51"><name pos:start="467:9" pos:end="467:26">put_metadata_block</name><argument_list pos:start="467:27" pos:end="467:51">(<argument pos:start="467:28" pos:end="467:30"><expr pos:start="467:28" pos:end="467:30"><operator pos:start="467:28" pos:end="467:28">&amp;</operator><name pos:start="467:29" pos:end="467:30">pb</name></expr></argument>, <argument pos:start="467:33" pos:end="467:47"><expr pos:start="467:33" pos:end="467:47"><name pos:start="467:33" pos:end="467:47">WP_ID_INT32INFO</name></expr></argument>, <argument pos:start="467:50" pos:end="467:50"><expr pos:start="467:50" pos:end="467:50"><literal type="number" pos:start="467:50" pos:end="467:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:54"><expr pos:start="469:9" pos:end="469:53"><call pos:start="469:9" pos:end="469:53"><name pos:start="469:9" pos:end="469:28">bytestream2_put_byte</name><argument_list pos:start="469:29" pos:end="469:53">(<argument pos:start="469:30" pos:end="469:32"><expr pos:start="469:30" pos:end="469:32"><operator pos:start="469:30" pos:end="469:30">&amp;</operator><name pos:start="469:31" pos:end="469:32">pb</name></expr></argument>, <argument pos:start="469:35" pos:end="469:52"><expr pos:start="469:35" pos:end="469:52"><name pos:start="469:35" pos:end="469:52"><name pos:start="469:35" pos:end="469:35">s</name><operator pos:start="469:36" pos:end="469:37">-&gt;</operator><name pos:start="469:38" pos:end="469:52">int32_sent_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="471:9" pos:end="471:50"><expr pos:start="471:9" pos:end="471:49"><call pos:start="471:9" pos:end="471:49"><name pos:start="471:9" pos:end="471:28">bytestream2_put_byte</name><argument_list pos:start="471:29" pos:end="471:49">(<argument pos:start="471:30" pos:end="471:32"><expr pos:start="471:30" pos:end="471:32"><operator pos:start="471:30" pos:end="471:30">&amp;</operator><name pos:start="471:31" pos:end="471:32">pb</name></expr></argument>, <argument pos:start="471:35" pos:end="471:48"><expr pos:start="471:35" pos:end="471:48"><name pos:start="471:35" pos:end="471:48"><name pos:start="471:35" pos:end="471:35">s</name><operator pos:start="471:36" pos:end="471:37">-&gt;</operator><name pos:start="471:38" pos:end="471:48">int32_zeros</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="473:9" pos:end="473:49"><expr pos:start="473:9" pos:end="473:48"><call pos:start="473:9" pos:end="473:48"><name pos:start="473:9" pos:end="473:28">bytestream2_put_byte</name><argument_list pos:start="473:29" pos:end="473:48">(<argument pos:start="473:30" pos:end="473:32"><expr pos:start="473:30" pos:end="473:32"><operator pos:start="473:30" pos:end="473:30">&amp;</operator><name pos:start="473:31" pos:end="473:32">pb</name></expr></argument>, <argument pos:start="473:35" pos:end="473:47"><expr pos:start="473:35" pos:end="473:47"><name pos:start="473:35" pos:end="473:47"><name pos:start="473:35" pos:end="473:35">s</name><operator pos:start="473:36" pos:end="473:37">-&gt;</operator><name pos:start="473:38" pos:end="473:47">int32_ones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="475:9" pos:end="475:49"><expr pos:start="475:9" pos:end="475:48"><call pos:start="475:9" pos:end="475:48"><name pos:start="475:9" pos:end="475:28">bytestream2_put_byte</name><argument_list pos:start="475:29" pos:end="475:48">(<argument pos:start="475:30" pos:end="475:32"><expr pos:start="475:30" pos:end="475:32"><operator pos:start="475:30" pos:end="475:30">&amp;</operator><name pos:start="475:31" pos:end="475:32">pb</name></expr></argument>, <argument pos:start="475:35" pos:end="475:47"><expr pos:start="475:35" pos:end="475:47"><name pos:start="475:35" pos:end="475:47"><name pos:start="475:35" pos:end="475:35">s</name><operator pos:start="475:36" pos:end="475:37">-&gt;</operator><name pos:start="475:38" pos:end="475:47">int32_dups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="481:5" pos:end="593:5"><if pos:start="481:5" pos:end="567:5">if <condition pos:start="481:8" pos:end="481:50">(<expr pos:start="481:9" pos:end="481:49"><name pos:start="481:9" pos:end="481:16"><name pos:start="481:9" pos:end="481:9">s</name><operator pos:start="481:10" pos:end="481:11">-&gt;</operator><name pos:start="481:12" pos:end="481:16">flags</name></name> <operator pos:start="481:18" pos:end="481:18">&amp;</operator> <name pos:start="481:20" pos:end="481:31">WV_MONO_DATA</name> <operator pos:start="481:33" pos:end="481:34">&amp;&amp;</operator> <operator pos:start="481:36" pos:end="481:36">!</operator><name pos:start="481:37" pos:end="481:49"><name pos:start="481:37" pos:end="481:37">s</name><operator pos:start="481:38" pos:end="481:39">-&gt;</operator><name pos:start="481:40" pos:end="481:49">num_passes</name></name></expr>)</condition> <block pos:start="481:52" pos:end="567:5">{<block_content pos:start="483:9" pos:end="565:9">

        <for pos:start="483:9" pos:end="533:9">for <control pos:start="483:13" pos:end="483:40">(<init pos:start="483:14" pos:end="483:19"><expr pos:start="483:14" pos:end="483:18"><name pos:start="483:14" pos:end="483:14">i</name> <operator pos:start="483:16" pos:end="483:16">=</operator> <literal type="number" pos:start="483:18" pos:end="483:18">0</literal></expr>;</init> <condition pos:start="483:21" pos:end="483:35"><expr pos:start="483:21" pos:end="483:34"><name pos:start="483:21" pos:end="483:21">i</name> <operator pos:start="483:23" pos:end="483:23">&lt;</operator> <name pos:start="483:25" pos:end="483:34">nb_samples</name></expr>;</condition> <incr pos:start="483:37" pos:end="483:39"><expr pos:start="483:37" pos:end="483:39"><name pos:start="483:37" pos:end="483:37">i</name><operator pos:start="483:38" pos:end="483:39">++</operator></expr></incr>)</control> <block pos:start="483:42" pos:end="533:9">{<block_content pos:start="485:13" pos:end="531:32">

            <decl_stmt pos:start="485:13" pos:end="485:40"><decl pos:start="485:13" pos:end="485:39"><type pos:start="485:13" pos:end="485:19"><name pos:start="485:13" pos:end="485:19">int32_t</name></type> <name pos:start="485:21" pos:end="485:24">code</name> <init pos:start="485:26" pos:end="485:39">= <expr pos:start="485:28" pos:end="485:39"><name pos:start="485:28" pos:end="485:39"><name pos:start="485:28" pos:end="485:36">samples_l</name><index pos:start="485:37" pos:end="485:39">[<expr pos:start="485:38" pos:end="485:38"><name pos:start="485:38" pos:end="485:38">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <for pos:start="489:13" pos:end="525:13">for <control pos:start="489:17" pos:end="489:80">(<init pos:start="489:18" pos:end="489:63"><expr pos:start="489:18" pos:end="489:38"><name pos:start="489:18" pos:end="489:23">tcount</name> <operator pos:start="489:25" pos:end="489:25">=</operator> <name pos:start="489:27" pos:end="489:38"><name pos:start="489:27" pos:end="489:27">s</name><operator pos:start="489:28" pos:end="489:29">-&gt;</operator><name pos:start="489:30" pos:end="489:38">num_terms</name></name></expr><operator pos:start="489:39" pos:end="489:39">,</operator> <expr pos:start="489:41" pos:end="489:62"><name pos:start="489:41" pos:end="489:43">dpp</name> <operator pos:start="489:45" pos:end="489:45">=</operator> <name pos:start="489:47" pos:end="489:62"><name pos:start="489:47" pos:end="489:47">s</name><operator pos:start="489:48" pos:end="489:49">-&gt;</operator><name pos:start="489:50" pos:end="489:62">decorr_passes</name></name></expr>;</init> <condition pos:start="489:65" pos:end="489:73"><expr pos:start="489:65" pos:end="489:72"><name pos:start="489:65" pos:end="489:70">tcount</name><operator pos:start="489:71" pos:end="489:72">--</operator></expr>;</condition> <incr pos:start="489:75" pos:end="489:79"><expr pos:start="489:75" pos:end="489:79"><name pos:start="489:75" pos:end="489:77">dpp</name><operator pos:start="489:78" pos:end="489:79">++</operator></expr></incr>)</control> <block pos:start="489:82" pos:end="525:13">{<block_content pos:start="491:17" pos:end="523:67">

                <decl_stmt pos:start="491:17" pos:end="491:28"><decl pos:start="491:17" pos:end="491:27"><type pos:start="491:17" pos:end="491:23"><name pos:start="491:17" pos:end="491:23">int32_t</name></type> <name pos:start="491:25" pos:end="491:27">sam</name></decl>;</decl_stmt>



                <if_stmt pos:start="495:17" pos:end="517:17"><if pos:start="495:17" pos:end="511:17">if <condition pos:start="495:20" pos:end="495:42">(<expr pos:start="495:21" pos:end="495:41"><name pos:start="495:21" pos:end="495:30"><name pos:start="495:21" pos:end="495:23">dpp</name><operator pos:start="495:24" pos:end="495:25">-&gt;</operator><name pos:start="495:26" pos:end="495:30">value</name></name> <operator pos:start="495:32" pos:end="495:32">&gt;</operator> <name pos:start="495:34" pos:end="495:41">MAX_TERM</name></expr>)</condition> <block pos:start="495:44" pos:end="511:17">{<block_content pos:start="497:21" pos:end="509:44">

                    <if_stmt pos:start="497:21" pos:end="503:77"><if pos:start="497:21" pos:end="499:70">if <condition pos:start="497:24" pos:end="497:39">(<expr pos:start="497:25" pos:end="497:38"><name pos:start="497:25" pos:end="497:34"><name pos:start="497:25" pos:end="497:27">dpp</name><operator pos:start="497:28" pos:end="497:29">-&gt;</operator><name pos:start="497:30" pos:end="497:34">value</name></name> <operator pos:start="497:36" pos:end="497:36">&amp;</operator> <literal type="number" pos:start="497:38" pos:end="497:38">1</literal></expr>)</condition><block type="pseudo" pos:start="499:25" pos:end="499:70"><block_content pos:start="499:25" pos:end="499:70">

                        <expr_stmt pos:start="499:25" pos:end="499:70"><expr pos:start="499:25" pos:end="499:69"><name pos:start="499:25" pos:end="499:27">sam</name> <operator pos:start="499:29" pos:end="499:29">=</operator> <literal type="number" pos:start="499:31" pos:end="499:31">2</literal> <operator pos:start="499:33" pos:end="499:33">*</operator> <name pos:start="499:35" pos:end="499:50"><name pos:start="499:35" pos:end="499:37">dpp</name><operator pos:start="499:38" pos:end="499:39">-&gt;</operator><name pos:start="499:40" pos:end="499:47">samplesA</name><index pos:start="499:48" pos:end="499:50">[<expr pos:start="499:49" pos:end="499:49"><literal type="number" pos:start="499:49" pos:end="499:49">0</literal></expr>]</index></name> <operator pos:start="499:52" pos:end="499:52">-</operator> <name pos:start="499:54" pos:end="499:69"><name pos:start="499:54" pos:end="499:56">dpp</name><operator pos:start="499:57" pos:end="499:58">-&gt;</operator><name pos:start="499:59" pos:end="499:66">samplesA</name><index pos:start="499:67" pos:end="499:69">[<expr pos:start="499:68" pos:end="499:68"><literal type="number" pos:start="499:68" pos:end="499:68">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="501:21" pos:end="503:77">else<block type="pseudo" pos:start="503:25" pos:end="503:77"><block_content pos:start="503:25" pos:end="503:77">

                        <expr_stmt pos:start="503:25" pos:end="503:77"><expr pos:start="503:25" pos:end="503:76"><name pos:start="503:25" pos:end="503:27">sam</name> <operator pos:start="503:29" pos:end="503:29">=</operator> <operator pos:start="503:31" pos:end="503:31">(</operator><literal type="number" pos:start="503:32" pos:end="503:32">3</literal> <operator pos:start="503:34" pos:end="503:34">*</operator> <name pos:start="503:36" pos:end="503:51"><name pos:start="503:36" pos:end="503:38">dpp</name><operator pos:start="503:39" pos:end="503:40">-&gt;</operator><name pos:start="503:41" pos:end="503:48">samplesA</name><index pos:start="503:49" pos:end="503:51">[<expr pos:start="503:50" pos:end="503:50"><literal type="number" pos:start="503:50" pos:end="503:50">0</literal></expr>]</index></name> <operator pos:start="503:53" pos:end="503:53">-</operator> <name pos:start="503:55" pos:end="503:70"><name pos:start="503:55" pos:end="503:57">dpp</name><operator pos:start="503:58" pos:end="503:59">-&gt;</operator><name pos:start="503:60" pos:end="503:67">samplesA</name><index pos:start="503:68" pos:end="503:70">[<expr pos:start="503:69" pos:end="503:69"><literal type="number" pos:start="503:69" pos:end="503:69">1</literal></expr>]</index></name><operator pos:start="503:71" pos:end="503:71">)</operator> <operator pos:start="503:73" pos:end="503:74">&gt;&gt;</operator> <literal type="number" pos:start="503:76" pos:end="503:76">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="507:21" pos:end="507:56"><expr pos:start="507:21" pos:end="507:55"><name pos:start="507:21" pos:end="507:36"><name pos:start="507:21" pos:end="507:23">dpp</name><operator pos:start="507:24" pos:end="507:25">-&gt;</operator><name pos:start="507:26" pos:end="507:33">samplesA</name><index pos:start="507:34" pos:end="507:36">[<expr pos:start="507:35" pos:end="507:35"><literal type="number" pos:start="507:35" pos:end="507:35">1</literal></expr>]</index></name> <operator pos:start="507:38" pos:end="507:38">=</operator> <name pos:start="507:40" pos:end="507:55"><name pos:start="507:40" pos:end="507:42">dpp</name><operator pos:start="507:43" pos:end="507:44">-&gt;</operator><name pos:start="507:45" pos:end="507:52">samplesA</name><index pos:start="507:53" pos:end="507:55">[<expr pos:start="507:54" pos:end="507:54"><literal type="number" pos:start="507:54" pos:end="507:54">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="509:21" pos:end="509:44"><expr pos:start="509:21" pos:end="509:43"><name pos:start="509:21" pos:end="509:36"><name pos:start="509:21" pos:end="509:23">dpp</name><operator pos:start="509:24" pos:end="509:25">-&gt;</operator><name pos:start="509:26" pos:end="509:33">samplesA</name><index pos:start="509:34" pos:end="509:36">[<expr pos:start="509:35" pos:end="509:35"><literal type="number" pos:start="509:35" pos:end="509:35">0</literal></expr>]</index></name> <operator pos:start="509:38" pos:end="509:38">=</operator> <name pos:start="509:40" pos:end="509:43">code</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="511:19" pos:end="517:17">else <block pos:start="511:24" pos:end="517:17">{<block_content pos:start="513:21" pos:end="515:76">

                    <expr_stmt pos:start="513:21" pos:end="513:43"><expr pos:start="513:21" pos:end="513:42"><name pos:start="513:21" pos:end="513:23">sam</name> <operator pos:start="513:25" pos:end="513:25">=</operator> <name pos:start="513:27" pos:end="513:42"><name pos:start="513:27" pos:end="513:29">dpp</name><operator pos:start="513:30" pos:end="513:31">-&gt;</operator><name pos:start="513:32" pos:end="513:39">samplesA</name><index pos:start="513:40" pos:end="513:42">[<expr pos:start="513:41" pos:end="513:41"><name pos:start="513:41" pos:end="513:41">m</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="515:21" pos:end="515:76"><expr pos:start="515:21" pos:end="515:75"><name pos:start="515:21" pos:end="515:68"><name pos:start="515:21" pos:end="515:23">dpp</name><operator pos:start="515:24" pos:end="515:25">-&gt;</operator><name pos:start="515:26" pos:end="515:33">samplesA</name><index pos:start="515:34" pos:end="515:68">[<expr pos:start="515:35" pos:end="515:67"><operator pos:start="515:35" pos:end="515:35">(</operator><name pos:start="515:36" pos:end="515:36">m</name> <operator pos:start="515:38" pos:end="515:38">+</operator> <name pos:start="515:40" pos:end="515:49"><name pos:start="515:40" pos:end="515:42">dpp</name><operator pos:start="515:43" pos:end="515:44">-&gt;</operator><name pos:start="515:45" pos:end="515:49">value</name></name><operator pos:start="515:50" pos:end="515:50">)</operator> <operator pos:start="515:52" pos:end="515:52">&amp;</operator> <operator pos:start="515:54" pos:end="515:54">(</operator><name pos:start="515:55" pos:end="515:62">MAX_TERM</name> <operator pos:start="515:64" pos:end="515:64">-</operator> <literal type="number" pos:start="515:66" pos:end="515:66">1</literal><operator pos:start="515:67" pos:end="515:67">)</operator></expr>]</index></name> <operator pos:start="515:70" pos:end="515:70">=</operator> <name pos:start="515:72" pos:end="515:75">code</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="521:17" pos:end="521:56"><expr pos:start="521:17" pos:end="521:55"><name pos:start="521:17" pos:end="521:20">code</name> <operator pos:start="521:22" pos:end="521:23">-=</operator> <call pos:start="521:25" pos:end="521:55"><name pos:start="521:25" pos:end="521:36">APPLY_WEIGHT</name><argument_list pos:start="521:37" pos:end="521:55">(<argument pos:start="521:38" pos:end="521:49"><expr pos:start="521:38" pos:end="521:49"><name pos:start="521:38" pos:end="521:49"><name pos:start="521:38" pos:end="521:40">dpp</name><operator pos:start="521:41" pos:end="521:42">-&gt;</operator><name pos:start="521:43" pos:end="521:49">weightA</name></name></expr></argument>, <argument pos:start="521:52" pos:end="521:54"><expr pos:start="521:52" pos:end="521:54"><name pos:start="521:52" pos:end="521:54">sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:67"><expr pos:start="523:17" pos:end="523:66"><call pos:start="523:17" pos:end="523:66"><name pos:start="523:17" pos:end="523:29">UPDATE_WEIGHT</name><argument_list pos:start="523:30" pos:end="523:66">(<argument pos:start="523:31" pos:end="523:42"><expr pos:start="523:31" pos:end="523:42"><name pos:start="523:31" pos:end="523:42"><name pos:start="523:31" pos:end="523:33">dpp</name><operator pos:start="523:34" pos:end="523:35">-&gt;</operator><name pos:start="523:36" pos:end="523:42">weightA</name></name></expr></argument>, <argument pos:start="523:45" pos:end="523:54"><expr pos:start="523:45" pos:end="523:54"><name pos:start="523:45" pos:end="523:54"><name pos:start="523:45" pos:end="523:47">dpp</name><operator pos:start="523:48" pos:end="523:49">-&gt;</operator><name pos:start="523:50" pos:end="523:54">delta</name></name></expr></argument>, <argument pos:start="523:57" pos:end="523:59"><expr pos:start="523:57" pos:end="523:59"><name pos:start="523:57" pos:end="523:59">sam</name></expr></argument>, <argument pos:start="523:62" pos:end="523:65"><expr pos:start="523:62" pos:end="523:65"><name pos:start="523:62" pos:end="523:65">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="529:13" pos:end="529:41"><expr pos:start="529:13" pos:end="529:40"><name pos:start="529:13" pos:end="529:13">m</name> <operator pos:start="529:15" pos:end="529:15">=</operator> <operator pos:start="529:17" pos:end="529:17">(</operator><name pos:start="529:18" pos:end="529:18">m</name> <operator pos:start="529:20" pos:end="529:20">+</operator> <literal type="number" pos:start="529:22" pos:end="529:22">1</literal><operator pos:start="529:23" pos:end="529:23">)</operator> <operator pos:start="529:25" pos:end="529:25">&amp;</operator> <operator pos:start="529:27" pos:end="529:27">(</operator><name pos:start="529:28" pos:end="529:35">MAX_TERM</name> <operator pos:start="529:37" pos:end="529:37">-</operator> <literal type="number" pos:start="529:39" pos:end="529:39">1</literal><operator pos:start="529:40" pos:end="529:40">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:32"><expr pos:start="531:13" pos:end="531:31"><name pos:start="531:13" pos:end="531:24"><name pos:start="531:13" pos:end="531:21">samples_l</name><index pos:start="531:22" pos:end="531:24">[<expr pos:start="531:23" pos:end="531:23"><name pos:start="531:23" pos:end="531:23">i</name></expr>]</index></name> <operator pos:start="531:26" pos:end="531:26">=</operator> <name pos:start="531:28" pos:end="531:31">code</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="535:9" pos:end="565:9"><if pos:start="535:9" pos:end="565:9">if <condition pos:start="535:12" pos:end="535:14">(<expr pos:start="535:13" pos:end="535:13"><name pos:start="535:13" pos:end="535:13">m</name></expr>)</condition> <block pos:start="535:16" pos:end="565:9">{<block_content pos:start="537:13" pos:end="563:13">

            <for pos:start="537:13" pos:end="563:13">for <control pos:start="537:17" pos:end="537:80">(<init pos:start="537:18" pos:end="537:63"><expr pos:start="537:18" pos:end="537:38"><name pos:start="537:18" pos:end="537:23">tcount</name> <operator pos:start="537:25" pos:end="537:25">=</operator> <name pos:start="537:27" pos:end="537:38"><name pos:start="537:27" pos:end="537:27">s</name><operator pos:start="537:28" pos:end="537:29">-&gt;</operator><name pos:start="537:30" pos:end="537:38">num_terms</name></name></expr><operator pos:start="537:39" pos:end="537:39">,</operator> <expr pos:start="537:41" pos:end="537:62"><name pos:start="537:41" pos:end="537:43">dpp</name> <operator pos:start="537:45" pos:end="537:45">=</operator> <name pos:start="537:47" pos:end="537:62"><name pos:start="537:47" pos:end="537:47">s</name><operator pos:start="537:48" pos:end="537:49">-&gt;</operator><name pos:start="537:50" pos:end="537:62">decorr_passes</name></name></expr>;</init> <condition pos:start="537:65" pos:end="537:73"><expr pos:start="537:65" pos:end="537:72"><name pos:start="537:65" pos:end="537:70">tcount</name><operator pos:start="537:71" pos:end="537:72">--</operator></expr>;</condition> <incr pos:start="537:75" pos:end="537:79"><expr pos:start="537:75" pos:end="537:79"><name pos:start="537:75" pos:end="537:77">dpp</name><operator pos:start="537:78" pos:end="537:79">++</operator></expr></incr>)</control><block type="pseudo" pos:start="539:17" pos:end="563:13"><block_content pos:start="539:17" pos:end="563:13">

                <if_stmt pos:start="539:17" pos:end="563:13"><if pos:start="539:17" pos:end="563:13">if <condition pos:start="539:20" pos:end="539:61">(<expr pos:start="539:21" pos:end="539:60"><name pos:start="539:21" pos:end="539:30"><name pos:start="539:21" pos:end="539:23">dpp</name><operator pos:start="539:24" pos:end="539:25">-&gt;</operator><name pos:start="539:26" pos:end="539:30">value</name></name> <operator pos:start="539:32" pos:end="539:32">&gt;</operator> <literal type="number" pos:start="539:34" pos:end="539:34">0</literal> <operator pos:start="539:36" pos:end="539:37">&amp;&amp;</operator> <name pos:start="539:39" pos:end="539:48"><name pos:start="539:39" pos:end="539:41">dpp</name><operator pos:start="539:42" pos:end="539:43">-&gt;</operator><name pos:start="539:44" pos:end="539:48">value</name></name> <operator pos:start="539:50" pos:end="539:51">&lt;=</operator> <name pos:start="539:53" pos:end="539:60">MAX_TERM</name></expr>)</condition> <block pos:start="539:63" pos:end="563:13">{<block_content pos:start="541:17" pos:end="561:17">

                <decl_stmt pos:start="541:17" pos:end="541:59"><decl pos:start="541:17" pos:end="541:40"><type pos:start="541:17" pos:end="541:23"><name pos:start="541:17" pos:end="541:23">int32_t</name></type> <name pos:start="541:25" pos:end="541:40"><name pos:start="541:25" pos:end="541:30">temp_A</name><index pos:start="541:31" pos:end="541:40">[<expr pos:start="541:32" pos:end="541:39"><name pos:start="541:32" pos:end="541:39">MAX_TERM</name></expr>]</index></name></decl>, <decl pos:start="541:43" pos:end="541:58"><type ref="prev" pos:start="541:17" pos:end="541:23"/><name pos:start="541:43" pos:end="541:58"><name pos:start="541:43" pos:end="541:48">temp_B</name><index pos:start="541:49" pos:end="541:58">[<expr pos:start="541:50" pos:end="541:57"><name pos:start="541:50" pos:end="541:57">MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="543:17" pos:end="543:22"><decl pos:start="543:17" pos:end="543:21"><type pos:start="543:17" pos:end="543:19"><name pos:start="543:17" pos:end="543:19">int</name></type> <name pos:start="543:21" pos:end="543:21">k</name></decl>;</decl_stmt>



                <expr_stmt pos:start="547:17" pos:end="547:69"><expr pos:start="547:17" pos:end="547:68"><call pos:start="547:17" pos:end="547:68"><name pos:start="547:17" pos:end="547:22">memcpy</name><argument_list pos:start="547:23" pos:end="547:68">(<argument pos:start="547:24" pos:end="547:29"><expr pos:start="547:24" pos:end="547:29"><name pos:start="547:24" pos:end="547:29">temp_A</name></expr></argument>, <argument pos:start="547:32" pos:end="547:44"><expr pos:start="547:32" pos:end="547:44"><name pos:start="547:32" pos:end="547:44"><name pos:start="547:32" pos:end="547:34">dpp</name><operator pos:start="547:35" pos:end="547:36">-&gt;</operator><name pos:start="547:37" pos:end="547:44">samplesA</name></name></expr></argument>, <argument pos:start="547:47" pos:end="547:67"><expr pos:start="547:47" pos:end="547:67"><sizeof pos:start="547:47" pos:end="547:67">sizeof<argument_list pos:start="547:53" pos:end="547:67">(<argument pos:start="547:54" pos:end="547:66"><expr pos:start="547:54" pos:end="547:66"><name pos:start="547:54" pos:end="547:66"><name pos:start="547:54" pos:end="547:56">dpp</name><operator pos:start="547:57" pos:end="547:58">-&gt;</operator><name pos:start="547:59" pos:end="547:66">samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="549:17" pos:end="549:69"><expr pos:start="549:17" pos:end="549:68"><call pos:start="549:17" pos:end="549:68"><name pos:start="549:17" pos:end="549:22">memcpy</name><argument_list pos:start="549:23" pos:end="549:68">(<argument pos:start="549:24" pos:end="549:29"><expr pos:start="549:24" pos:end="549:29"><name pos:start="549:24" pos:end="549:29">temp_B</name></expr></argument>, <argument pos:start="549:32" pos:end="549:44"><expr pos:start="549:32" pos:end="549:44"><name pos:start="549:32" pos:end="549:44"><name pos:start="549:32" pos:end="549:34">dpp</name><operator pos:start="549:35" pos:end="549:36">-&gt;</operator><name pos:start="549:37" pos:end="549:44">samplesB</name></name></expr></argument>, <argument pos:start="549:47" pos:end="549:67"><expr pos:start="549:47" pos:end="549:67"><sizeof pos:start="549:47" pos:end="549:67">sizeof<argument_list pos:start="549:53" pos:end="549:67">(<argument pos:start="549:54" pos:end="549:66"><expr pos:start="549:54" pos:end="549:66"><name pos:start="549:54" pos:end="549:66"><name pos:start="549:54" pos:end="549:56">dpp</name><operator pos:start="549:57" pos:end="549:58">-&gt;</operator><name pos:start="549:59" pos:end="549:66">samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="553:17" pos:end="561:17">for <control pos:start="553:21" pos:end="553:46">(<init pos:start="553:22" pos:end="553:27"><expr pos:start="553:22" pos:end="553:26"><name pos:start="553:22" pos:end="553:22">k</name> <operator pos:start="553:24" pos:end="553:24">=</operator> <literal type="number" pos:start="553:26" pos:end="553:26">0</literal></expr>;</init> <condition pos:start="553:29" pos:end="553:41"><expr pos:start="553:29" pos:end="553:40"><name pos:start="553:29" pos:end="553:29">k</name> <operator pos:start="553:31" pos:end="553:31">&lt;</operator> <name pos:start="553:33" pos:end="553:40">MAX_TERM</name></expr>;</condition> <incr pos:start="553:43" pos:end="553:45"><expr pos:start="553:43" pos:end="553:45"><name pos:start="553:43" pos:end="553:43">k</name><operator pos:start="553:44" pos:end="553:45">++</operator></expr></incr>)</control> <block pos:start="553:48" pos:end="561:17">{<block_content pos:start="555:21" pos:end="559:49">

                    <expr_stmt pos:start="555:21" pos:end="555:49"><expr pos:start="555:21" pos:end="555:48"><name pos:start="555:21" pos:end="555:36"><name pos:start="555:21" pos:end="555:23">dpp</name><operator pos:start="555:24" pos:end="555:25">-&gt;</operator><name pos:start="555:26" pos:end="555:33">samplesA</name><index pos:start="555:34" pos:end="555:36">[<expr pos:start="555:35" pos:end="555:35"><name pos:start="555:35" pos:end="555:35">k</name></expr>]</index></name> <operator pos:start="555:38" pos:end="555:38">=</operator> <name pos:start="555:40" pos:end="555:48"><name pos:start="555:40" pos:end="555:45">temp_A</name><index pos:start="555:46" pos:end="555:48">[<expr pos:start="555:47" pos:end="555:47"><name pos:start="555:47" pos:end="555:47">m</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="557:21" pos:end="557:49"><expr pos:start="557:21" pos:end="557:48"><name pos:start="557:21" pos:end="557:36"><name pos:start="557:21" pos:end="557:23">dpp</name><operator pos:start="557:24" pos:end="557:25">-&gt;</operator><name pos:start="557:26" pos:end="557:33">samplesB</name><index pos:start="557:34" pos:end="557:36">[<expr pos:start="557:35" pos:end="557:35"><name pos:start="557:35" pos:end="557:35">k</name></expr>]</index></name> <operator pos:start="557:38" pos:end="557:38">=</operator> <name pos:start="557:40" pos:end="557:48"><name pos:start="557:40" pos:end="557:45">temp_B</name><index pos:start="557:46" pos:end="557:48">[<expr pos:start="557:47" pos:end="557:47"><name pos:start="557:47" pos:end="557:47">m</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="559:21" pos:end="559:49"><expr pos:start="559:21" pos:end="559:48"><name pos:start="559:21" pos:end="559:21">m</name> <operator pos:start="559:23" pos:end="559:23">=</operator> <operator pos:start="559:25" pos:end="559:25">(</operator><name pos:start="559:26" pos:end="559:26">m</name> <operator pos:start="559:28" pos:end="559:28">+</operator> <literal type="number" pos:start="559:30" pos:end="559:30">1</literal><operator pos:start="559:31" pos:end="559:31">)</operator> <operator pos:start="559:33" pos:end="559:33">&amp;</operator> <operator pos:start="559:35" pos:end="559:35">(</operator><name pos:start="559:36" pos:end="559:43">MAX_TERM</name> <operator pos:start="559:45" pos:end="559:45">-</operator> <literal type="number" pos:start="559:47" pos:end="559:47">1</literal><operator pos:start="559:48" pos:end="559:48">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="567:7" pos:end="593:5">else if <condition pos:start="567:15" pos:end="567:30">(<expr pos:start="567:16" pos:end="567:29"><operator pos:start="567:16" pos:end="567:16">!</operator><name pos:start="567:17" pos:end="567:29"><name pos:start="567:17" pos:end="567:17">s</name><operator pos:start="567:18" pos:end="567:19">-&gt;</operator><name pos:start="567:20" pos:end="567:29">num_passes</name></name></expr>)</condition> <block pos:start="567:32" pos:end="593:5">{<block_content pos:start="569:9" pos:end="591:9">

        <if_stmt pos:start="569:9" pos:end="575:9"><if pos:start="569:9" pos:end="575:9">if <condition pos:start="569:12" pos:end="569:39">(<expr pos:start="569:13" pos:end="569:38"><name pos:start="569:13" pos:end="569:20"><name pos:start="569:13" pos:end="569:13">s</name><operator pos:start="569:14" pos:end="569:15">-&gt;</operator><name pos:start="569:16" pos:end="569:20">flags</name></name> <operator pos:start="569:22" pos:end="569:22">&amp;</operator> <name pos:start="569:24" pos:end="569:38">WV_JOINT_STEREO</name></expr>)</condition> <block pos:start="569:41" pos:end="575:9">{<block_content pos:start="571:13" pos:end="573:70">

            <for pos:start="571:13" pos:end="573:70">for <control pos:start="571:17" pos:end="571:44">(<init pos:start="571:18" pos:end="571:23"><expr pos:start="571:18" pos:end="571:22"><name pos:start="571:18" pos:end="571:18">i</name> <operator pos:start="571:20" pos:end="571:20">=</operator> <literal type="number" pos:start="571:22" pos:end="571:22">0</literal></expr>;</init> <condition pos:start="571:25" pos:end="571:39"><expr pos:start="571:25" pos:end="571:38"><name pos:start="571:25" pos:end="571:25">i</name> <operator pos:start="571:27" pos:end="571:27">&lt;</operator> <name pos:start="571:29" pos:end="571:38">nb_samples</name></expr>;</condition> <incr pos:start="571:41" pos:end="571:43"><expr pos:start="571:41" pos:end="571:43"><name pos:start="571:41" pos:end="571:41">i</name><operator pos:start="571:42" pos:end="571:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="573:17" pos:end="573:70"><block_content pos:start="573:17" pos:end="573:70">

                <expr_stmt pos:start="573:17" pos:end="573:70"><expr pos:start="573:17" pos:end="573:69"><name pos:start="573:17" pos:end="573:28"><name pos:start="573:17" pos:end="573:25">samples_r</name><index pos:start="573:26" pos:end="573:28">[<expr pos:start="573:27" pos:end="573:27"><name pos:start="573:27" pos:end="573:27">i</name></expr>]</index></name> <operator pos:start="573:30" pos:end="573:31">+=</operator> <operator pos:start="573:33" pos:end="573:33">(</operator><operator pos:start="573:34" pos:end="573:34">(</operator><name pos:start="573:35" pos:end="573:46"><name pos:start="573:35" pos:end="573:43">samples_l</name><index pos:start="573:44" pos:end="573:46">[<expr pos:start="573:45" pos:end="573:45"><name pos:start="573:45" pos:end="573:45">i</name></expr>]</index></name> <operator pos:start="573:48" pos:end="573:49">-=</operator> <name pos:start="573:51" pos:end="573:62"><name pos:start="573:51" pos:end="573:59">samples_r</name><index pos:start="573:60" pos:end="573:62">[<expr pos:start="573:61" pos:end="573:61"><name pos:start="573:61" pos:end="573:61">i</name></expr>]</index></name><operator pos:start="573:63" pos:end="573:63">)</operator> <operator pos:start="573:65" pos:end="573:66">&gt;&gt;</operator> <literal type="number" pos:start="573:68" pos:end="573:68">1</literal><operator pos:start="573:69" pos:end="573:69">)</operator></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <for pos:start="579:9" pos:end="591:9">for <control pos:start="579:13" pos:end="579:42">(<init pos:start="579:14" pos:end="579:19"><expr pos:start="579:14" pos:end="579:18"><name pos:start="579:14" pos:end="579:14">i</name> <operator pos:start="579:16" pos:end="579:16">=</operator> <literal type="number" pos:start="579:18" pos:end="579:18">0</literal></expr>;</init> <condition pos:start="579:21" pos:end="579:37"><expr pos:start="579:21" pos:end="579:36"><name pos:start="579:21" pos:end="579:21">i</name> <operator pos:start="579:23" pos:end="579:23">&lt;</operator> <name pos:start="579:25" pos:end="579:36"><name pos:start="579:25" pos:end="579:25">s</name><operator pos:start="579:26" pos:end="579:27">-&gt;</operator><name pos:start="579:28" pos:end="579:36">num_terms</name></name></expr>;</condition> <incr pos:start="579:39" pos:end="579:41"><expr pos:start="579:39" pos:end="579:41"><name pos:start="579:39" pos:end="579:39">i</name><operator pos:start="579:40" pos:end="579:41">++</operator></expr></incr>)</control> <block pos:start="579:44" pos:end="591:9">{<block_content pos:start="581:13" pos:end="589:78">

            <decl_stmt pos:start="581:13" pos:end="581:54"><decl pos:start="581:13" pos:end="581:53"><type pos:start="581:13" pos:end="581:27"><name pos:start="581:13" pos:end="581:25"><name pos:start="581:13" pos:end="581:18">struct</name> <name pos:start="581:20" pos:end="581:25">Decorr</name></name> <modifier pos:start="581:27" pos:end="581:27">*</modifier></type><name pos:start="581:28" pos:end="581:30">dpp</name> <init pos:start="581:32" pos:end="581:53">= <expr pos:start="581:34" pos:end="581:53"><operator pos:start="581:34" pos:end="581:34">&amp;</operator><name pos:start="581:35" pos:end="581:53"><name pos:start="581:35" pos:end="581:35">s</name><operator pos:start="581:36" pos:end="581:37">-&gt;</operator><name pos:start="581:38" pos:end="581:50">decorr_passes</name><index pos:start="581:51" pos:end="581:53">[<expr pos:start="581:52" pos:end="581:52"><name pos:start="581:52" pos:end="581:52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="583:13" pos:end="589:78"><if pos:start="583:13" pos:end="585:75">if <condition pos:start="583:16" pos:end="583:76">(<expr pos:start="583:17" pos:end="583:75"><operator pos:start="583:17" pos:end="583:17">(</operator><operator pos:start="583:18" pos:end="583:18">(</operator><name pos:start="583:19" pos:end="583:26"><name pos:start="583:19" pos:end="583:19">s</name><operator pos:start="583:20" pos:end="583:21">-&gt;</operator><name pos:start="583:22" pos:end="583:26">flags</name></name> <operator pos:start="583:28" pos:end="583:28">&amp;</operator> <name pos:start="583:30" pos:end="583:37">MAG_MASK</name><operator pos:start="583:38" pos:end="583:38">)</operator> <operator pos:start="583:40" pos:end="583:41">&gt;&gt;</operator> <name pos:start="583:43" pos:end="583:49">MAG_LSB</name><operator pos:start="583:50" pos:end="583:50">)</operator> <operator pos:start="583:52" pos:end="583:53">&gt;=</operator> <literal type="number" pos:start="583:55" pos:end="583:56">16</literal> <operator pos:start="583:58" pos:end="583:59">||</operator> <name pos:start="583:61" pos:end="583:70"><name pos:start="583:61" pos:end="583:63">dpp</name><operator pos:start="583:64" pos:end="583:65">-&gt;</operator><name pos:start="583:66" pos:end="583:70">delta</name></name> <operator pos:start="583:72" pos:end="583:73">!=</operator> <literal type="number" pos:start="583:75" pos:end="583:75">2</literal></expr>)</condition><block type="pseudo" pos:start="585:17" pos:end="585:75"><block_content pos:start="585:17" pos:end="585:75">

                <expr_stmt pos:start="585:17" pos:end="585:75"><expr pos:start="585:17" pos:end="585:74"><call pos:start="585:17" pos:end="585:74"><name pos:start="585:17" pos:end="585:35">decorr_stereo_pass2</name><argument_list pos:start="585:36" pos:end="585:74">(<argument pos:start="585:37" pos:end="585:39"><expr pos:start="585:37" pos:end="585:39"><name pos:start="585:37" pos:end="585:39">dpp</name></expr></argument>, <argument pos:start="585:42" pos:end="585:50"><expr pos:start="585:42" pos:end="585:50"><name pos:start="585:42" pos:end="585:50">samples_l</name></expr></argument>, <argument pos:start="585:53" pos:end="585:61"><expr pos:start="585:53" pos:end="585:61"><name pos:start="585:53" pos:end="585:61">samples_r</name></expr></argument>, <argument pos:start="585:64" pos:end="585:73"><expr pos:start="585:64" pos:end="585:73"><name pos:start="585:64" pos:end="585:73">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="587:13" pos:end="589:78">else<block type="pseudo" pos:start="589:17" pos:end="589:78"><block_content pos:start="589:17" pos:end="589:78">

                <expr_stmt pos:start="589:17" pos:end="589:78"><expr pos:start="589:17" pos:end="589:77"><call pos:start="589:17" pos:end="589:77"><name pos:start="589:17" pos:end="589:38">decorr_stereo_pass_id2</name><argument_list pos:start="589:39" pos:end="589:77">(<argument pos:start="589:40" pos:end="589:42"><expr pos:start="589:40" pos:end="589:42"><name pos:start="589:40" pos:end="589:42">dpp</name></expr></argument>, <argument pos:start="589:45" pos:end="589:53"><expr pos:start="589:45" pos:end="589:53"><name pos:start="589:45" pos:end="589:53">samples_l</name></expr></argument>, <argument pos:start="589:56" pos:end="589:64"><expr pos:start="589:56" pos:end="589:64"><name pos:start="589:56" pos:end="589:64">samples_r</name></expr></argument>, <argument pos:start="589:67" pos:end="589:76"><expr pos:start="589:67" pos:end="589:76"><name pos:start="589:67" pos:end="589:76">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="597:5" pos:end="597:56"><expr pos:start="597:5" pos:end="597:55"><call pos:start="597:5" pos:end="597:55"><name pos:start="597:5" pos:end="597:24">bytestream2_put_byte</name><argument_list pos:start="597:25" pos:end="597:55">(<argument pos:start="597:26" pos:end="597:28"><expr pos:start="597:26" pos:end="597:28"><operator pos:start="597:26" pos:end="597:26">&amp;</operator><name pos:start="597:27" pos:end="597:28">pb</name></expr></argument>, <argument pos:start="597:31" pos:end="597:54"><expr pos:start="597:31" pos:end="597:54"><name pos:start="597:31" pos:end="597:40">WP_ID_DATA</name> <operator pos:start="597:42" pos:end="597:42">|</operator> <name pos:start="597:44" pos:end="597:54">WP_IDF_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="599:5" pos:end="599:76"><expr pos:start="599:5" pos:end="599:75"><call pos:start="599:5" pos:end="599:75"><name pos:start="599:5" pos:end="599:17">init_put_bits</name><argument_list pos:start="599:18" pos:end="599:75">(<argument pos:start="599:19" pos:end="599:24"><expr pos:start="599:19" pos:end="599:24"><operator pos:start="599:19" pos:end="599:19">&amp;</operator><name pos:start="599:20" pos:end="599:24"><name pos:start="599:20" pos:end="599:20">s</name><operator pos:start="599:21" pos:end="599:22">-&gt;</operator><name pos:start="599:23" pos:end="599:24">pb</name></name></expr></argument>, <argument pos:start="599:27" pos:end="599:39"><expr pos:start="599:27" pos:end="599:39"><name pos:start="599:27" pos:end="599:35"><name pos:start="599:27" pos:end="599:28">pb</name><operator pos:start="599:29" pos:end="599:29">.</operator><name pos:start="599:30" pos:end="599:35">buffer</name></name> <operator pos:start="599:37" pos:end="599:37">+</operator> <literal type="number" pos:start="599:39" pos:end="599:39">3</literal></expr></argument>, <argument pos:start="599:42" pos:end="599:74"><expr pos:start="599:42" pos:end="599:74"><call pos:start="599:42" pos:end="599:74"><name pos:start="599:42" pos:end="599:69">bytestream2_get_bytes_left_p</name><argument_list pos:start="599:70" pos:end="599:74">(<argument pos:start="599:71" pos:end="599:73"><expr pos:start="599:71" pos:end="599:73"><operator pos:start="599:71" pos:end="599:71">&amp;</operator><name pos:start="599:72" pos:end="599:73">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="601:5" pos:end="617:5"><if pos:start="601:5" pos:end="607:5">if <condition pos:start="601:8" pos:end="601:32">(<expr pos:start="601:9" pos:end="601:31"><name pos:start="601:9" pos:end="601:16"><name pos:start="601:9" pos:end="601:9">s</name><operator pos:start="601:10" pos:end="601:11">-&gt;</operator><name pos:start="601:12" pos:end="601:16">flags</name></name> <operator pos:start="601:18" pos:end="601:18">&amp;</operator> <name pos:start="601:20" pos:end="601:31">WV_MONO_DATA</name></expr>)</condition> <block pos:start="601:34" pos:end="607:5">{<block_content pos:start="603:9" pos:end="605:67">

        <for pos:start="603:9" pos:end="605:67">for <control pos:start="603:13" pos:end="603:40">(<init pos:start="603:14" pos:end="603:19"><expr pos:start="603:14" pos:end="603:18"><name pos:start="603:14" pos:end="603:14">i</name> <operator pos:start="603:16" pos:end="603:16">=</operator> <literal type="number" pos:start="603:18" pos:end="603:18">0</literal></expr>;</init> <condition pos:start="603:21" pos:end="603:35"><expr pos:start="603:21" pos:end="603:34"><name pos:start="603:21" pos:end="603:21">i</name> <operator pos:start="603:23" pos:end="603:23">&lt;</operator> <name pos:start="603:25" pos:end="603:34">nb_samples</name></expr>;</condition> <incr pos:start="603:37" pos:end="603:39"><expr pos:start="603:37" pos:end="603:39"><name pos:start="603:37" pos:end="603:37">i</name><operator pos:start="603:38" pos:end="603:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="605:13" pos:end="605:67"><block_content pos:start="605:13" pos:end="605:67">

            <expr_stmt pos:start="605:13" pos:end="605:67"><expr pos:start="605:13" pos:end="605:66"><call pos:start="605:13" pos:end="605:66"><name pos:start="605:13" pos:end="605:33">wavpack_encode_sample</name><argument_list pos:start="605:34" pos:end="605:66">(<argument pos:start="605:35" pos:end="605:35"><expr pos:start="605:35" pos:end="605:35"><name pos:start="605:35" pos:end="605:35">s</name></expr></argument>, <argument pos:start="605:38" pos:end="605:47"><expr pos:start="605:38" pos:end="605:47"><operator pos:start="605:38" pos:end="605:38">&amp;</operator><name pos:start="605:39" pos:end="605:47"><name pos:start="605:39" pos:end="605:39">s</name><operator pos:start="605:40" pos:end="605:41">-&gt;</operator><name pos:start="605:42" pos:end="605:42">w</name><operator pos:start="605:43" pos:end="605:43">.</operator><name pos:start="605:44" pos:end="605:44">c</name><index pos:start="605:45" pos:end="605:47">[<expr pos:start="605:46" pos:end="605:46"><literal type="number" pos:start="605:46" pos:end="605:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="605:50" pos:end="605:65"><expr pos:start="605:50" pos:end="605:65"><name pos:start="605:50" pos:end="605:65"><name pos:start="605:50" pos:end="605:50">s</name><operator pos:start="605:51" pos:end="605:52">-&gt;</operator><name pos:start="605:53" pos:end="605:59">samples</name><index pos:start="605:60" pos:end="605:62">[<expr pos:start="605:61" pos:end="605:61"><literal type="number" pos:start="605:61" pos:end="605:61">0</literal></expr>]</index><index pos:start="605:63" pos:end="605:65">[<expr pos:start="605:64" pos:end="605:64"><name pos:start="605:64" pos:end="605:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="607:7" pos:end="617:5">else <block pos:start="607:12" pos:end="617:5">{<block_content pos:start="609:9" pos:end="615:9">

        <for pos:start="609:9" pos:end="615:9">for <control pos:start="609:13" pos:end="609:40">(<init pos:start="609:14" pos:end="609:19"><expr pos:start="609:14" pos:end="609:18"><name pos:start="609:14" pos:end="609:14">i</name> <operator pos:start="609:16" pos:end="609:16">=</operator> <literal type="number" pos:start="609:18" pos:end="609:18">0</literal></expr>;</init> <condition pos:start="609:21" pos:end="609:35"><expr pos:start="609:21" pos:end="609:34"><name pos:start="609:21" pos:end="609:21">i</name> <operator pos:start="609:23" pos:end="609:23">&lt;</operator> <name pos:start="609:25" pos:end="609:34">nb_samples</name></expr>;</condition> <incr pos:start="609:37" pos:end="609:39"><expr pos:start="609:37" pos:end="609:39"><name pos:start="609:37" pos:end="609:37">i</name><operator pos:start="609:38" pos:end="609:39">++</operator></expr></incr>)</control> <block pos:start="609:42" pos:end="615:9">{<block_content pos:start="611:13" pos:end="613:67">

            <expr_stmt pos:start="611:13" pos:end="611:67"><expr pos:start="611:13" pos:end="611:66"><call pos:start="611:13" pos:end="611:66"><name pos:start="611:13" pos:end="611:33">wavpack_encode_sample</name><argument_list pos:start="611:34" pos:end="611:66">(<argument pos:start="611:35" pos:end="611:35"><expr pos:start="611:35" pos:end="611:35"><name pos:start="611:35" pos:end="611:35">s</name></expr></argument>, <argument pos:start="611:38" pos:end="611:47"><expr pos:start="611:38" pos:end="611:47"><operator pos:start="611:38" pos:end="611:38">&amp;</operator><name pos:start="611:39" pos:end="611:47"><name pos:start="611:39" pos:end="611:39">s</name><operator pos:start="611:40" pos:end="611:41">-&gt;</operator><name pos:start="611:42" pos:end="611:42">w</name><operator pos:start="611:43" pos:end="611:43">.</operator><name pos:start="611:44" pos:end="611:44">c</name><index pos:start="611:45" pos:end="611:47">[<expr pos:start="611:46" pos:end="611:46"><literal type="number" pos:start="611:46" pos:end="611:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="611:50" pos:end="611:65"><expr pos:start="611:50" pos:end="611:65"><name pos:start="611:50" pos:end="611:65"><name pos:start="611:50" pos:end="611:50">s</name><operator pos:start="611:51" pos:end="611:52">-&gt;</operator><name pos:start="611:53" pos:end="611:59">samples</name><index pos:start="611:60" pos:end="611:62">[<expr pos:start="611:61" pos:end="611:61"><literal type="number" pos:start="611:61" pos:end="611:61">0</literal></expr>]</index><index pos:start="611:63" pos:end="611:65">[<expr pos:start="611:64" pos:end="611:64"><name pos:start="611:64" pos:end="611:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="613:13" pos:end="613:67"><expr pos:start="613:13" pos:end="613:66"><call pos:start="613:13" pos:end="613:66"><name pos:start="613:13" pos:end="613:33">wavpack_encode_sample</name><argument_list pos:start="613:34" pos:end="613:66">(<argument pos:start="613:35" pos:end="613:35"><expr pos:start="613:35" pos:end="613:35"><name pos:start="613:35" pos:end="613:35">s</name></expr></argument>, <argument pos:start="613:38" pos:end="613:47"><expr pos:start="613:38" pos:end="613:47"><operator pos:start="613:38" pos:end="613:38">&amp;</operator><name pos:start="613:39" pos:end="613:47"><name pos:start="613:39" pos:end="613:39">s</name><operator pos:start="613:40" pos:end="613:41">-&gt;</operator><name pos:start="613:42" pos:end="613:42">w</name><operator pos:start="613:43" pos:end="613:43">.</operator><name pos:start="613:44" pos:end="613:44">c</name><index pos:start="613:45" pos:end="613:47">[<expr pos:start="613:46" pos:end="613:46"><literal type="number" pos:start="613:46" pos:end="613:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="613:50" pos:end="613:65"><expr pos:start="613:50" pos:end="613:65"><name pos:start="613:50" pos:end="613:65"><name pos:start="613:50" pos:end="613:50">s</name><operator pos:start="613:51" pos:end="613:52">-&gt;</operator><name pos:start="613:53" pos:end="613:59">samples</name><index pos:start="613:60" pos:end="613:62">[<expr pos:start="613:61" pos:end="613:61"><literal type="number" pos:start="613:61" pos:end="613:61">1</literal></expr>]</index><index pos:start="613:63" pos:end="613:65">[<expr pos:start="613:64" pos:end="613:64"><name pos:start="613:64" pos:end="613:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="619:5" pos:end="619:20"><expr pos:start="619:5" pos:end="619:19"><call pos:start="619:5" pos:end="619:19"><name pos:start="619:5" pos:end="619:16">encode_flush</name><argument_list pos:start="619:17" pos:end="619:19">(<argument pos:start="619:18" pos:end="619:18"><expr pos:start="619:18" pos:end="619:18"><name pos:start="619:18" pos:end="619:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="621:5" pos:end="621:27"><expr pos:start="621:5" pos:end="621:26"><call pos:start="621:5" pos:end="621:26"><name pos:start="621:5" pos:end="621:18">flush_put_bits</name><argument_list pos:start="621:19" pos:end="621:26">(<argument pos:start="621:20" pos:end="621:25"><expr pos:start="621:20" pos:end="621:25"><operator pos:start="621:20" pos:end="621:20">&amp;</operator><name pos:start="621:21" pos:end="621:25"><name pos:start="621:21" pos:end="621:21">s</name><operator pos:start="621:22" pos:end="621:23">-&gt;</operator><name pos:start="621:24" pos:end="621:25">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="623:5" pos:end="623:44"><expr pos:start="623:5" pos:end="623:43"><name pos:start="623:5" pos:end="623:13">data_size</name> <operator pos:start="623:15" pos:end="623:15">=</operator> <call pos:start="623:17" pos:end="623:38"><name pos:start="623:17" pos:end="623:30">put_bits_count</name><argument_list pos:start="623:31" pos:end="623:38">(<argument pos:start="623:32" pos:end="623:37"><expr pos:start="623:32" pos:end="623:37"><operator pos:start="623:32" pos:end="623:32">&amp;</operator><name pos:start="623:33" pos:end="623:37"><name pos:start="623:33" pos:end="623:33">s</name><operator pos:start="623:34" pos:end="623:35">-&gt;</operator><name pos:start="623:36" pos:end="623:37">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="623:40" pos:end="623:41">&gt;&gt;</operator> <literal type="number" pos:start="623:43" pos:end="623:43">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="625:5" pos:end="625:52"><expr pos:start="625:5" pos:end="625:51"><call pos:start="625:5" pos:end="625:51"><name pos:start="625:5" pos:end="625:24">bytestream2_put_le24</name><argument_list pos:start="625:25" pos:end="625:51">(<argument pos:start="625:26" pos:end="625:28"><expr pos:start="625:26" pos:end="625:28"><operator pos:start="625:26" pos:end="625:26">&amp;</operator><name pos:start="625:27" pos:end="625:28">pb</name></expr></argument>, <argument pos:start="625:31" pos:end="625:50"><expr pos:start="625:31" pos:end="625:50"><operator pos:start="625:31" pos:end="625:31">(</operator><name pos:start="625:32" pos:end="625:40">data_size</name> <operator pos:start="625:42" pos:end="625:42">+</operator> <literal type="number" pos:start="625:44" pos:end="625:44">1</literal><operator pos:start="625:45" pos:end="625:45">)</operator> <operator pos:start="625:47" pos:end="625:48">&gt;&gt;</operator> <literal type="number" pos:start="625:50" pos:end="625:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="627:5" pos:end="627:39"><expr pos:start="627:5" pos:end="627:38"><call pos:start="627:5" pos:end="627:38"><name pos:start="627:5" pos:end="627:22">bytestream2_skip_p</name><argument_list pos:start="627:23" pos:end="627:38">(<argument pos:start="627:24" pos:end="627:26"><expr pos:start="627:24" pos:end="627:26"><operator pos:start="627:24" pos:end="627:24">&amp;</operator><name pos:start="627:25" pos:end="627:26">pb</name></expr></argument>, <argument pos:start="627:29" pos:end="627:37"><expr pos:start="627:29" pos:end="627:37"><name pos:start="627:29" pos:end="627:37">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="629:5" pos:end="631:37"><if pos:start="629:5" pos:end="631:37">if <condition pos:start="629:8" pos:end="629:22">(<expr pos:start="629:9" pos:end="629:21"><name pos:start="629:9" pos:end="629:17">data_size</name> <operator pos:start="629:19" pos:end="629:19">&amp;</operator> <literal type="number" pos:start="629:21" pos:end="629:21">1</literal></expr>)</condition><block type="pseudo" pos:start="631:9" pos:end="631:37"><block_content pos:start="631:9" pos:end="631:37">

        <expr_stmt pos:start="631:9" pos:end="631:37"><expr pos:start="631:9" pos:end="631:36"><call pos:start="631:9" pos:end="631:36"><name pos:start="631:9" pos:end="631:28">bytestream2_put_byte</name><argument_list pos:start="631:29" pos:end="631:36">(<argument pos:start="631:30" pos:end="631:32"><expr pos:start="631:30" pos:end="631:32"><operator pos:start="631:30" pos:end="631:30">&amp;</operator><name pos:start="631:31" pos:end="631:32">pb</name></expr></argument>, <argument pos:start="631:35" pos:end="631:35"><expr pos:start="631:35" pos:end="631:35"><literal type="number" pos:start="631:35" pos:end="631:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="635:5" pos:end="663:5"><if pos:start="635:5" pos:end="663:5">if <condition pos:start="635:8" pos:end="635:18">(<expr pos:start="635:9" pos:end="635:17"><name pos:start="635:9" pos:end="635:17">got_extra</name></expr>)</condition> <block pos:start="635:20" pos:end="663:5">{<block_content pos:start="637:9" pos:end="661:41">

        <expr_stmt pos:start="637:9" pos:end="637:65"><expr pos:start="637:9" pos:end="637:64"><call pos:start="637:9" pos:end="637:64"><name pos:start="637:9" pos:end="637:28">bytestream2_put_byte</name><argument_list pos:start="637:29" pos:end="637:64">(<argument pos:start="637:30" pos:end="637:32"><expr pos:start="637:30" pos:end="637:32"><operator pos:start="637:30" pos:end="637:30">&amp;</operator><name pos:start="637:31" pos:end="637:32">pb</name></expr></argument>, <argument pos:start="637:35" pos:end="637:63"><expr pos:start="637:35" pos:end="637:63"><name pos:start="637:35" pos:end="637:49">WP_ID_EXTRABITS</name> <operator pos:start="637:51" pos:end="637:51">|</operator> <name pos:start="637:53" pos:end="637:63">WP_IDF_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="639:9" pos:end="639:80"><expr pos:start="639:9" pos:end="639:79"><call pos:start="639:9" pos:end="639:79"><name pos:start="639:9" pos:end="639:21">init_put_bits</name><argument_list pos:start="639:22" pos:end="639:79">(<argument pos:start="639:23" pos:end="639:28"><expr pos:start="639:23" pos:end="639:28"><operator pos:start="639:23" pos:end="639:23">&amp;</operator><name pos:start="639:24" pos:end="639:28"><name pos:start="639:24" pos:end="639:24">s</name><operator pos:start="639:25" pos:end="639:26">-&gt;</operator><name pos:start="639:27" pos:end="639:28">pb</name></name></expr></argument>, <argument pos:start="639:31" pos:end="639:43"><expr pos:start="639:31" pos:end="639:43"><name pos:start="639:31" pos:end="639:39"><name pos:start="639:31" pos:end="639:32">pb</name><operator pos:start="639:33" pos:end="639:33">.</operator><name pos:start="639:34" pos:end="639:39">buffer</name></name> <operator pos:start="639:41" pos:end="639:41">+</operator> <literal type="number" pos:start="639:43" pos:end="639:43">7</literal></expr></argument>, <argument pos:start="639:46" pos:end="639:78"><expr pos:start="639:46" pos:end="639:78"><call pos:start="639:46" pos:end="639:78"><name pos:start="639:46" pos:end="639:73">bytestream2_get_bytes_left_p</name><argument_list pos:start="639:74" pos:end="639:78">(<argument pos:start="639:75" pos:end="639:77"><expr pos:start="639:75" pos:end="639:77"><operator pos:start="639:75" pos:end="639:75">&amp;</operator><name pos:start="639:76" pos:end="639:77">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="641:9" pos:end="647:60"><if pos:start="641:9" pos:end="643:60">if <condition pos:start="641:12" pos:end="641:37">(<expr pos:start="641:13" pos:end="641:36"><name pos:start="641:13" pos:end="641:20"><name pos:start="641:13" pos:end="641:13">s</name><operator pos:start="641:14" pos:end="641:15">-&gt;</operator><name pos:start="641:16" pos:end="641:20">flags</name></name> <operator pos:start="641:22" pos:end="641:22">&amp;</operator> <name pos:start="641:24" pos:end="641:36">WV_FLOAT_DATA</name></expr>)</condition><block type="pseudo" pos:start="643:13" pos:end="643:60"><block_content pos:start="643:13" pos:end="643:60">

            <expr_stmt pos:start="643:13" pos:end="643:60"><expr pos:start="643:13" pos:end="643:59"><call pos:start="643:13" pos:end="643:59"><name pos:start="643:13" pos:end="643:22">pack_float</name><argument_list pos:start="643:23" pos:end="643:59">(<argument pos:start="643:24" pos:end="643:24"><expr pos:start="643:24" pos:end="643:24"><name pos:start="643:24" pos:end="643:24">s</name></expr></argument>, <argument pos:start="643:27" pos:end="643:35"><expr pos:start="643:27" pos:end="643:35"><name pos:start="643:27" pos:end="643:35"><name pos:start="643:27" pos:end="643:27">s</name><operator pos:start="643:28" pos:end="643:29">-&gt;</operator><name pos:start="643:30" pos:end="643:35">orig_l</name></name></expr></argument>, <argument pos:start="643:38" pos:end="643:46"><expr pos:start="643:38" pos:end="643:46"><name pos:start="643:38" pos:end="643:46"><name pos:start="643:38" pos:end="643:38">s</name><operator pos:start="643:39" pos:end="643:40">-&gt;</operator><name pos:start="643:41" pos:end="643:46">orig_r</name></name></expr></argument>, <argument pos:start="643:49" pos:end="643:58"><expr pos:start="643:49" pos:end="643:58"><name pos:start="643:49" pos:end="643:58">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="645:9" pos:end="647:60">else<block type="pseudo" pos:start="647:13" pos:end="647:60"><block_content pos:start="647:13" pos:end="647:60">

            <expr_stmt pos:start="647:13" pos:end="647:60"><expr pos:start="647:13" pos:end="647:59"><call pos:start="647:13" pos:end="647:59"><name pos:start="647:13" pos:end="647:22">pack_int32</name><argument_list pos:start="647:23" pos:end="647:59">(<argument pos:start="647:24" pos:end="647:24"><expr pos:start="647:24" pos:end="647:24"><name pos:start="647:24" pos:end="647:24">s</name></expr></argument>, <argument pos:start="647:27" pos:end="647:35"><expr pos:start="647:27" pos:end="647:35"><name pos:start="647:27" pos:end="647:35"><name pos:start="647:27" pos:end="647:27">s</name><operator pos:start="647:28" pos:end="647:29">-&gt;</operator><name pos:start="647:30" pos:end="647:35">orig_l</name></name></expr></argument>, <argument pos:start="647:38" pos:end="647:46"><expr pos:start="647:38" pos:end="647:46"><name pos:start="647:38" pos:end="647:46"><name pos:start="647:38" pos:end="647:38">s</name><operator pos:start="647:39" pos:end="647:40">-&gt;</operator><name pos:start="647:41" pos:end="647:46">orig_r</name></name></expr></argument>, <argument pos:start="647:49" pos:end="647:58"><expr pos:start="647:49" pos:end="647:58"><name pos:start="647:49" pos:end="647:58">nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="649:9" pos:end="649:31"><expr pos:start="649:9" pos:end="649:30"><call pos:start="649:9" pos:end="649:30"><name pos:start="649:9" pos:end="649:22">flush_put_bits</name><argument_list pos:start="649:23" pos:end="649:30">(<argument pos:start="649:24" pos:end="649:29"><expr pos:start="649:24" pos:end="649:29"><operator pos:start="649:24" pos:end="649:24">&amp;</operator><name pos:start="649:25" pos:end="649:29"><name pos:start="649:25" pos:end="649:25">s</name><operator pos:start="649:26" pos:end="649:27">-&gt;</operator><name pos:start="649:28" pos:end="649:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="651:9" pos:end="651:48"><expr pos:start="651:9" pos:end="651:47"><name pos:start="651:9" pos:end="651:17">data_size</name> <operator pos:start="651:19" pos:end="651:19">=</operator> <call pos:start="651:21" pos:end="651:42"><name pos:start="651:21" pos:end="651:34">put_bits_count</name><argument_list pos:start="651:35" pos:end="651:42">(<argument pos:start="651:36" pos:end="651:41"><expr pos:start="651:36" pos:end="651:41"><operator pos:start="651:36" pos:end="651:36">&amp;</operator><name pos:start="651:37" pos:end="651:41"><name pos:start="651:37" pos:end="651:37">s</name><operator pos:start="651:38" pos:end="651:39">-&gt;</operator><name pos:start="651:40" pos:end="651:41">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="651:44" pos:end="651:45">&gt;&gt;</operator> <literal type="number" pos:start="651:47" pos:end="651:47">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="653:9" pos:end="653:56"><expr pos:start="653:9" pos:end="653:55"><call pos:start="653:9" pos:end="653:55"><name pos:start="653:9" pos:end="653:28">bytestream2_put_le24</name><argument_list pos:start="653:29" pos:end="653:55">(<argument pos:start="653:30" pos:end="653:32"><expr pos:start="653:30" pos:end="653:32"><operator pos:start="653:30" pos:end="653:30">&amp;</operator><name pos:start="653:31" pos:end="653:32">pb</name></expr></argument>, <argument pos:start="653:35" pos:end="653:54"><expr pos:start="653:35" pos:end="653:54"><operator pos:start="653:35" pos:end="653:35">(</operator><name pos:start="653:36" pos:end="653:44">data_size</name> <operator pos:start="653:46" pos:end="653:46">+</operator> <literal type="number" pos:start="653:48" pos:end="653:48">5</literal><operator pos:start="653:49" pos:end="653:49">)</operator> <operator pos:start="653:51" pos:end="653:52">&gt;&gt;</operator> <literal type="number" pos:start="653:54" pos:end="653:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="655:9" pos:end="655:44"><expr pos:start="655:9" pos:end="655:43"><call pos:start="655:9" pos:end="655:43"><name pos:start="655:9" pos:end="655:28">bytestream2_put_le32</name><argument_list pos:start="655:29" pos:end="655:43">(<argument pos:start="655:30" pos:end="655:32"><expr pos:start="655:30" pos:end="655:32"><operator pos:start="655:30" pos:end="655:30">&amp;</operator><name pos:start="655:31" pos:end="655:32">pb</name></expr></argument>, <argument pos:start="655:35" pos:end="655:42"><expr pos:start="655:35" pos:end="655:42"><name pos:start="655:35" pos:end="655:42"><name pos:start="655:35" pos:end="655:35">s</name><operator pos:start="655:36" pos:end="655:37">-&gt;</operator><name pos:start="655:38" pos:end="655:42">crc_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="657:9" pos:end="657:43"><expr pos:start="657:9" pos:end="657:42"><call pos:start="657:9" pos:end="657:42"><name pos:start="657:9" pos:end="657:26">bytestream2_skip_p</name><argument_list pos:start="657:27" pos:end="657:42">(<argument pos:start="657:28" pos:end="657:30"><expr pos:start="657:28" pos:end="657:30"><operator pos:start="657:28" pos:end="657:28">&amp;</operator><name pos:start="657:29" pos:end="657:30">pb</name></expr></argument>, <argument pos:start="657:33" pos:end="657:41"><expr pos:start="657:33" pos:end="657:41"><name pos:start="657:33" pos:end="657:41">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="659:9" pos:end="661:41"><if pos:start="659:9" pos:end="661:41">if <condition pos:start="659:12" pos:end="659:26">(<expr pos:start="659:13" pos:end="659:25"><name pos:start="659:13" pos:end="659:21">data_size</name> <operator pos:start="659:23" pos:end="659:23">&amp;</operator> <literal type="number" pos:start="659:25" pos:end="659:25">1</literal></expr>)</condition><block type="pseudo" pos:start="661:13" pos:end="661:41"><block_content pos:start="661:13" pos:end="661:41">

            <expr_stmt pos:start="661:13" pos:end="661:41"><expr pos:start="661:13" pos:end="661:40"><call pos:start="661:13" pos:end="661:40"><name pos:start="661:13" pos:end="661:32">bytestream2_put_byte</name><argument_list pos:start="661:33" pos:end="661:40">(<argument pos:start="661:34" pos:end="661:36"><expr pos:start="661:34" pos:end="661:36"><operator pos:start="661:34" pos:end="661:34">&amp;</operator><name pos:start="661:35" pos:end="661:36">pb</name></expr></argument>, <argument pos:start="661:39" pos:end="661:39"><expr pos:start="661:39" pos:end="661:39"><literal type="number" pos:start="661:39" pos:end="661:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="667:5" pos:end="667:41"><expr pos:start="667:5" pos:end="667:40"><name pos:start="667:5" pos:end="667:14">block_size</name> <operator pos:start="667:16" pos:end="667:16">=</operator> <call pos:start="667:18" pos:end="667:40"><name pos:start="667:18" pos:end="667:35">bytestream2_tell_p</name><argument_list pos:start="667:36" pos:end="667:40">(<argument pos:start="667:37" pos:end="667:39"><expr pos:start="667:37" pos:end="667:39"><operator pos:start="667:37" pos:end="667:37">&amp;</operator><name pos:start="667:38" pos:end="667:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="669:5" pos:end="669:37"><expr pos:start="669:5" pos:end="669:36"><call pos:start="669:5" pos:end="669:36"><name pos:start="669:5" pos:end="669:11">AV_WL32</name><argument_list pos:start="669:12" pos:end="669:36">(<argument pos:start="669:13" pos:end="669:19"><expr pos:start="669:13" pos:end="669:19"><name pos:start="669:13" pos:end="669:15">out</name> <operator pos:start="669:17" pos:end="669:17">+</operator> <literal type="number" pos:start="669:19" pos:end="669:19">4</literal></expr></argument>, <argument pos:start="669:22" pos:end="669:35"><expr pos:start="669:22" pos:end="669:35"><name pos:start="669:22" pos:end="669:31">block_size</name> <operator pos:start="669:33" pos:end="669:33">-</operator> <literal type="number" pos:start="669:35" pos:end="669:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="673:5" pos:end="673:42"><expr pos:start="673:5" pos:end="673:41"><call pos:start="673:5" pos:end="673:41"><name pos:start="673:5" pos:end="673:14">av_assert0</name><argument_list pos:start="673:15" pos:end="673:41">(<argument pos:start="673:16" pos:end="673:40"><expr pos:start="673:16" pos:end="673:40"><call pos:start="673:16" pos:end="673:36"><name pos:start="673:16" pos:end="673:28">put_bits_left</name><argument_list pos:start="673:29" pos:end="673:36">(<argument pos:start="673:30" pos:end="673:35"><expr pos:start="673:30" pos:end="673:35"><operator pos:start="673:30" pos:end="673:30">&amp;</operator><name pos:start="673:31" pos:end="673:35"><name pos:start="673:31" pos:end="673:31">s</name><operator pos:start="673:32" pos:end="673:33">-&gt;</operator><name pos:start="673:34" pos:end="673:35">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="673:38" pos:end="673:38">&gt;</operator> <literal type="number" pos:start="673:40" pos:end="673:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="677:5" pos:end="677:22">return <expr pos:start="677:12" pos:end="677:21"><name pos:start="677:12" pos:end="677:21">block_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
