<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20986.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">xen_pt_bar_reg_read</name><parameter_list pos:start="1:31" pos:end="3:68">(<parameter pos:start="1:32" pos:end="1:56"><decl pos:start="1:32" pos:end="1:56"><type pos:start="1:32" pos:end="1:56"><name pos:start="1:32" pos:end="1:53">XenPCIPassthroughState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:77"><decl pos:start="1:59" pos:end="1:77"><type pos:start="1:59" pos:end="1:77"><name pos:start="1:59" pos:end="1:66">XenPTReg</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">cfg_entry</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:46"><decl pos:start="3:32" pos:end="3:46"><type pos:start="3:32" pos:end="3:46"><name pos:start="3:32" pos:end="3:39">uint32_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:46">value</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:67"><decl pos:start="3:49" pos:end="3:67"><type pos:start="3:49" pos:end="3:67"><name pos:start="3:49" pos:end="3:56">uint32_t</name></type> <name pos:start="3:58" pos:end="3:67">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">XenPTRegInfo</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">reg</name> <init pos:start="7:23" pos:end="7:38">= <expr pos:start="7:25" pos:end="7:38"><name pos:start="7:25" pos:end="7:38"><name pos:start="7:25" pos:end="7:33">cfg_entry</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:27">valid_emu_mask</name> <init pos:start="9:29" pos:end="9:31">= <expr pos:start="9:31" pos:end="9:31"><literal type="number" pos:start="9:31" pos:end="9:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:25">bar_emu_mask</name> <init pos:start="11:27" pos:end="11:29">= <expr pos:start="11:29" pos:end="11:29"><literal type="number" pos:start="11:29" pos:end="11:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">index</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:23">/* get BAR index */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:52"><expr pos:start="19:5" pos:end="19:51"><name pos:start="19:5" pos:end="19:9">index</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:51"><name pos:start="19:13" pos:end="19:38">xen_pt_bar_offset_to_index</name><argument_list pos:start="19:39" pos:end="19:51">(<argument pos:start="19:40" pos:end="19:50"><expr pos:start="19:40" pos:end="19:50"><name pos:start="19:40" pos:end="19:50"><name pos:start="19:40" pos:end="19:42">reg</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:50">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:50">(<expr pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:13">index</name> <operator pos:start="21:15" pos:end="21:15">&lt;</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal> <operator pos:start="21:19" pos:end="21:20">||</operator> <name pos:start="21:22" pos:end="21:26">index</name> <operator pos:start="21:28" pos:end="21:29">&gt;=</operator> <name pos:start="21:31" pos:end="21:45">PCI_NUM_REGIONS</name> <operator pos:start="21:47" pos:end="21:47">-</operator> <literal type="number" pos:start="21:49" pos:end="21:49">1</literal></expr>)</condition> <block pos:start="21:52" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:80"><expr pos:start="23:9" pos:end="23:79"><call pos:start="23:9" pos:end="23:79"><name pos:start="23:9" pos:end="23:18">XEN_PT_ERR</name><argument_list pos:start="23:19" pos:end="23:79">(<argument pos:start="23:20" pos:end="23:26"><expr pos:start="23:20" pos:end="23:26"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:26">dev</name></name></expr></argument>, <argument pos:start="23:29" pos:end="23:71"><expr pos:start="23:29" pos:end="23:71"><literal type="string" pos:start="23:29" pos:end="23:71">"Internal error: Invalid BAR index [%d].\n"</literal></expr></argument>, <argument pos:start="23:74" pos:end="23:78"><expr pos:start="23:74" pos:end="23:78"><name pos:start="23:74" pos:end="23:78">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:46">/* use fixed-up value from kernel sysfs */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:72"><expr pos:start="33:5" pos:end="33:71"><operator pos:start="33:5" pos:end="33:5">*</operator><name pos:start="33:6" pos:end="33:10">value</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:71"><name pos:start="33:14" pos:end="33:36">base_address_with_flags</name><argument_list pos:start="33:37" pos:end="33:71">(<argument pos:start="33:38" pos:end="33:70"><expr pos:start="33:38" pos:end="33:70"><operator pos:start="33:38" pos:end="33:38">&amp;</operator><name pos:start="33:39" pos:end="33:70"><name pos:start="33:39" pos:end="33:39">s</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:52">real_device</name><operator pos:start="33:53" pos:end="33:53">.</operator><name pos:start="33:54" pos:end="33:63">io_regions</name><index pos:start="33:64" pos:end="33:70">[<expr pos:start="33:65" pos:end="33:69"><name pos:start="33:65" pos:end="33:69">index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:45">/* set emulate mask depend on BAR flag */</comment>

    <switch pos:start="39:5" pos:end="63:5">switch <condition pos:start="39:12" pos:end="39:37">(<expr pos:start="39:13" pos:end="39:36"><name pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:20">bases</name><index pos:start="39:21" pos:end="39:27">[<expr pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:26">index</name></expr>]</index></name><operator pos:start="39:28" pos:end="39:28">.</operator><name pos:start="39:29" pos:end="39:36">bar_flag</name></expr>)</condition> <block pos:start="39:39" pos:end="63:5">{<block_content pos:start="41:5" pos:end="61:14">

    <case pos:start="41:5" pos:end="41:29">case <expr pos:start="41:10" pos:end="41:28"><name pos:start="41:10" pos:end="41:28">XEN_PT_BAR_FLAG_MEM</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:20">bar_emu_mask</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <name pos:start="43:24" pos:end="43:46">XEN_PT_BAR_MEM_EMU_MASK</name></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:28">case <expr pos:start="47:10" pos:end="47:27"><name pos:start="47:10" pos:end="47:27">XEN_PT_BAR_FLAG_IO</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:20">bar_emu_mask</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:45">XEN_PT_BAR_IO_EMU_MASK</name></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:31">case <expr pos:start="53:10" pos:end="53:30"><name pos:start="53:10" pos:end="53:30">XEN_PT_BAR_FLAG_UPPER</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:20">bar_emu_mask</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:38">XEN_PT_BAR_ALLF</name></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <default pos:start="59:5" pos:end="59:12">default:</default>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="67:5" pos:end="67:21">/* emulate BAR */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:18">valid_emu_mask</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:33">bar_emu_mask</name> <operator pos:start="69:35" pos:end="69:35">&amp;</operator> <name pos:start="69:37" pos:end="69:46">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:74"><expr pos:start="71:5" pos:end="71:73"><operator pos:start="71:5" pos:end="71:5">*</operator><name pos:start="71:6" pos:end="71:10">value</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="71:73"><name pos:start="71:14" pos:end="71:31">XEN_PT_MERGE_VALUE</name><argument_list pos:start="71:32" pos:end="71:73">(<argument pos:start="71:33" pos:end="71:38"><expr pos:start="71:33" pos:end="71:38"><operator pos:start="71:33" pos:end="71:33">*</operator><name pos:start="71:34" pos:end="71:38">value</name></expr></argument>, <argument pos:start="71:41" pos:end="71:55"><expr pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:55"><name pos:start="71:41" pos:end="71:49">cfg_entry</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:55">data</name></name></expr></argument>, <argument pos:start="71:58" pos:end="71:72"><expr pos:start="71:58" pos:end="71:72"><operator pos:start="71:58" pos:end="71:58">~</operator><name pos:start="71:59" pos:end="71:72">valid_emu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
