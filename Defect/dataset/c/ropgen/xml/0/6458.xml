<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6458.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:44">vaapi_encode_check_config</name><parameter_list pos:start="1:45" pos:end="1:67">(<parameter pos:start="1:46" pos:end="1:66"><decl pos:start="1:46" pos:end="1:66"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:59">AVCodecContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="229:1">{<block_content pos:start="5:5" pos:end="227:15">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">VAAPIEncodeContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">ctx</name> <init pos:start="5:29" pos:end="5:46">= <expr pos:start="5:31" pos:end="5:46"><name pos:start="5:31" pos:end="5:46"><name pos:start="5:31" pos:end="5:35">avctx</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">VAStatus</name></type> <name pos:start="7:14" pos:end="7:16">vas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">n</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:13">VAProfile</name>    <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:26">profiles</name>    <init pos:start="11:31" pos:end="11:36">= <expr pos:start="11:33" pos:end="11:36"><name pos:start="11:33" pos:end="11:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">VAEntrypoint</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:29">entrypoints</name> <init pos:start="13:31" pos:end="13:36">= <expr pos:start="13:33" pos:end="13:36"><name pos:start="13:33" pos:end="13:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="21:6"><decl pos:start="15:5" pos:end="21:5"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">VAConfigAttrib</name></type> <name pos:start="15:20" pos:end="15:25"><name pos:start="15:20" pos:end="15:23">attr</name><index pos:start="15:24" pos:end="15:25">[]</index></name> <init pos:start="15:27" pos:end="21:5">= <expr pos:start="15:29" pos:end="21:5"><block pos:start="15:29" pos:end="21:5">{

        <expr pos:start="17:9" pos:end="17:41"><block pos:start="17:9" pos:end="17:41">{ <expr pos:start="17:11" pos:end="17:35"><name pos:start="17:11" pos:end="17:35">VAConfigAttribRateControl</name></expr>     }</block></expr>,

        <expr pos:start="19:9" pos:end="19:41"><block pos:start="19:9" pos:end="19:41">{ <expr pos:start="19:11" pos:end="19:39"><name pos:start="19:11" pos:end="19:39">VAConfigAttribEncMaxRefFrames</name></expr> }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:5">n</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:45"><name pos:start="25:9" pos:end="25:24">vaMaxNumProfiles</name><argument_list pos:start="25:25" pos:end="25:45">(<argument pos:start="25:26" pos:end="25:44"><expr pos:start="25:26" pos:end="25:44"><name pos:start="25:26" pos:end="25:44"><name pos:start="25:26" pos:end="25:28">ctx</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:35">hwctx</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:44">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:53"><expr pos:start="27:5" pos:end="27:52"><name pos:start="27:5" pos:end="27:12">profiles</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:52"><name pos:start="27:16" pos:end="27:30">av_malloc_array</name><argument_list pos:start="27:31" pos:end="27:52">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">n</name></expr></argument>, <argument pos:start="27:35" pos:end="27:51"><expr pos:start="27:35" pos:end="27:51"><sizeof pos:start="27:35" pos:end="27:51">sizeof<argument_list pos:start="27:41" pos:end="27:51">(<argument pos:start="27:42" pos:end="27:50"><expr pos:start="27:42" pos:end="27:50"><name pos:start="27:42" pos:end="27:50">VAProfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:17">profiles</name></expr>)</condition> <block pos:start="29:20" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:11">err</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:29"><name pos:start="31:15" pos:end="31:21">AVERROR</name><argument_list pos:start="31:22" pos:end="31:29">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><name pos:start="31:23" pos:end="31:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:67"><expr pos:start="37:5" pos:end="37:66"><name pos:start="37:5" pos:end="37:7">vas</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:66"><name pos:start="37:11" pos:end="37:31">vaQueryConfigProfiles</name><argument_list pos:start="37:32" pos:end="37:66">(<argument pos:start="37:33" pos:end="37:51"><expr pos:start="37:33" pos:end="37:51"><name pos:start="37:33" pos:end="37:51"><name pos:start="37:33" pos:end="37:35">ctx</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:42">hwctx</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:51">display</name></name></expr></argument>, <argument pos:start="37:54" pos:end="37:61"><expr pos:start="37:54" pos:end="37:61"><name pos:start="37:54" pos:end="37:61">profiles</name></expr></argument>, <argument pos:start="37:64" pos:end="37:65"><expr pos:start="37:64" pos:end="37:65"><operator pos:start="37:64" pos:end="37:64">&amp;</operator><name pos:start="37:65" pos:end="37:65">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:33">(<expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:11">vas</name> <operator pos:start="39:13" pos:end="39:14">!=</operator> <name pos:start="39:16" pos:end="39:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="39:35" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:18">

        <expr_stmt pos:start="41:9" pos:end="43:37"><expr pos:start="41:9" pos:end="43:36"><call pos:start="41:9" pos:end="43:36"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="43:36">(<argument pos:start="41:16" pos:end="41:18"><expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ctx</name></expr></argument>, <argument pos:start="41:21" pos:end="41:32"><expr pos:start="41:21" pos:end="41:32"><name pos:start="41:21" pos:end="41:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:35" pos:end="41:72"><expr pos:start="41:35" pos:end="41:72"><literal type="string" pos:start="41:35" pos:end="41:72">"Failed to query profiles: %d (%s).\n"</literal></expr></argument>,

               <argument pos:start="43:16" pos:end="43:18"><expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">vas</name></expr></argument>, <argument pos:start="43:21" pos:end="43:35"><expr pos:start="43:21" pos:end="43:35"><call pos:start="43:21" pos:end="43:35"><name pos:start="43:21" pos:end="43:30">vaErrorStr</name><argument_list pos:start="43:31" pos:end="43:35">(<argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:11">err</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:29"><name pos:start="45:15" pos:end="45:21">AVERROR</name><argument_list pos:start="45:22" pos:end="45:29">(<argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <for pos:start="51:5" pos:end="57:5">for <control pos:start="51:9" pos:end="51:27">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:21"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:21">n</name></expr>;</condition> <incr pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:24">i</name><operator pos:start="51:25" pos:end="51:26">++</operator></expr></incr>)</control> <block pos:start="51:29" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <if_stmt pos:start="53:9" pos:end="55:18"><if pos:start="53:9" pos:end="55:18">if <condition pos:start="53:12" pos:end="53:43">(<expr pos:start="53:13" pos:end="53:42"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:20">profiles</name><index pos:start="53:21" pos:end="53:23">[<expr pos:start="53:22" pos:end="53:22"><name pos:start="53:22" pos:end="53:22">i</name></expr>]</index></name> <operator pos:start="53:25" pos:end="53:26">==</operator> <name pos:start="53:28" pos:end="53:42"><name pos:start="53:28" pos:end="53:30">ctx</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:42">va_profile</name></name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:18"><block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:15">(<expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:9">i</name> <operator pos:start="59:11" pos:end="59:12">&gt;=</operator> <name pos:start="59:14" pos:end="59:14">n</name></expr>)</condition> <block pos:start="59:17" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:18">

        <expr_stmt pos:start="61:9" pos:end="63:32"><expr pos:start="61:9" pos:end="63:31"><call pos:start="61:9" pos:end="63:31"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:31">(<argument pos:start="61:16" pos:end="61:18"><expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">ctx</name></expr></argument>, <argument pos:start="61:21" pos:end="61:32"><expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:35" pos:end="61:70"><expr pos:start="61:35" pos:end="61:70"><literal type="string" pos:start="61:35" pos:end="61:70">"Encoding profile not found (%d).\n"</literal></expr></argument>,

               <argument pos:start="63:16" pos:end="63:30"><expr pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:18">ctx</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:30">va_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:11">err</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:29"><name pos:start="65:15" pos:end="65:21">AVERROR</name><argument_list pos:start="65:22" pos:end="65:29">(<argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:49"><expr pos:start="73:5" pos:end="73:48"><name pos:start="73:5" pos:end="73:5">n</name> <operator pos:start="73:7" pos:end="73:7">=</operator> <call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:27">vaMaxNumEntrypoints</name><argument_list pos:start="73:28" pos:end="73:48">(<argument pos:start="73:29" pos:end="73:47"><expr pos:start="73:29" pos:end="73:47"><name pos:start="73:29" pos:end="73:47"><name pos:start="73:29" pos:end="73:31">ctx</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:38">hwctx</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:47">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:59"><expr pos:start="75:5" pos:end="75:58"><name pos:start="75:5" pos:end="75:15">entrypoints</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:58"><name pos:start="75:19" pos:end="75:33">av_malloc_array</name><argument_list pos:start="75:34" pos:end="75:58">(<argument pos:start="75:35" pos:end="75:35"><expr pos:start="75:35" pos:end="75:35"><name pos:start="75:35" pos:end="75:35">n</name></expr></argument>, <argument pos:start="75:38" pos:end="75:57"><expr pos:start="75:38" pos:end="75:57"><sizeof pos:start="75:38" pos:end="75:57">sizeof<argument_list pos:start="75:44" pos:end="75:57">(<argument pos:start="75:45" pos:end="75:56"><expr pos:start="75:45" pos:end="75:56"><name pos:start="75:45" pos:end="75:56">VAEntrypoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:21">(<expr pos:start="77:9" pos:end="77:20"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:20">entrypoints</name></expr>)</condition> <block pos:start="77:23" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:11">err</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:29"><name pos:start="79:15" pos:end="79:21">AVERROR</name><argument_list pos:start="79:22" pos:end="79:29">(<argument pos:start="79:23" pos:end="79:28"><expr pos:start="79:23" pos:end="79:28"><name pos:start="79:23" pos:end="79:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="87:52"><expr pos:start="85:5" pos:end="87:51"><name pos:start="85:5" pos:end="85:7">vas</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="87:51"><name pos:start="85:11" pos:end="85:34">vaQueryConfigEntrypoints</name><argument_list pos:start="85:35" pos:end="87:51">(<argument pos:start="85:36" pos:end="85:54"><expr pos:start="85:36" pos:end="85:54"><name pos:start="85:36" pos:end="85:54"><name pos:start="85:36" pos:end="85:38">ctx</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:45">hwctx</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:54">display</name></name></expr></argument>, <argument pos:start="85:57" pos:end="85:71"><expr pos:start="85:57" pos:end="85:71"><name pos:start="85:57" pos:end="85:71"><name pos:start="85:57" pos:end="85:59">ctx</name><operator pos:start="85:60" pos:end="85:61">-&gt;</operator><name pos:start="85:62" pos:end="85:71">va_profile</name></name></expr></argument>,

                                   <argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:46">entrypoints</name></expr></argument>, <argument pos:start="87:49" pos:end="87:50"><expr pos:start="87:49" pos:end="87:50"><operator pos:start="87:49" pos:end="87:49">&amp;</operator><name pos:start="87:50" pos:end="87:50">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="101:5"><if pos:start="89:5" pos:end="101:5">if <condition pos:start="89:8" pos:end="89:33">(<expr pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:11">vas</name> <operator pos:start="89:13" pos:end="89:14">!=</operator> <name pos:start="89:16" pos:end="89:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="89:35" pos:end="101:5">{<block_content pos:start="91:9" pos:end="99:18">

        <expr_stmt pos:start="91:9" pos:end="95:37"><expr pos:start="91:9" pos:end="95:36"><call pos:start="91:9" pos:end="95:36"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="95:36">(<argument pos:start="91:16" pos:end="91:18"><expr pos:start="91:16" pos:end="91:18"><name pos:start="91:16" pos:end="91:18">ctx</name></expr></argument>, <argument pos:start="91:21" pos:end="91:32"><expr pos:start="91:21" pos:end="91:32"><name pos:start="91:21" pos:end="91:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:35" pos:end="93:39"><expr pos:start="91:35" pos:end="93:39"><literal type="string" pos:start="91:35" pos:end="91:68">"Failed to query entrypoints for "</literal>

               <literal type="string" pos:start="93:16" pos:end="93:39">"profile %u: %d (%s).\n"</literal></expr></argument>, <argument pos:start="93:42" pos:end="93:56"><expr pos:start="93:42" pos:end="93:56"><name pos:start="93:42" pos:end="93:56"><name pos:start="93:42" pos:end="93:44">ctx</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:56">va_profile</name></name></expr></argument>,

               <argument pos:start="95:16" pos:end="95:18"><expr pos:start="95:16" pos:end="95:18"><name pos:start="95:16" pos:end="95:18">vas</name></expr></argument>, <argument pos:start="95:21" pos:end="95:35"><expr pos:start="95:21" pos:end="95:35"><call pos:start="95:21" pos:end="95:35"><name pos:start="95:21" pos:end="95:30">vaErrorStr</name><argument_list pos:start="95:31" pos:end="95:35">(<argument pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:34">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:11">err</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:29"><name pos:start="97:15" pos:end="97:21">AVERROR</name><argument_list pos:start="97:22" pos:end="97:29">(<argument pos:start="97:23" pos:end="97:28"><expr pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <for pos:start="103:5" pos:end="109:5">for <control pos:start="103:9" pos:end="103:27">(<init pos:start="103:10" pos:end="103:15"><expr pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">i</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:21"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <name pos:start="103:21" pos:end="103:21">n</name></expr>;</condition> <incr pos:start="103:24" pos:end="103:26"><expr pos:start="103:24" pos:end="103:26"><name pos:start="103:24" pos:end="103:24">i</name><operator pos:start="103:25" pos:end="103:26">++</operator></expr></incr>)</control> <block pos:start="103:29" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:18">

        <if_stmt pos:start="105:9" pos:end="107:18"><if pos:start="105:9" pos:end="107:18">if <condition pos:start="105:12" pos:end="105:49">(<expr pos:start="105:13" pos:end="105:48"><name pos:start="105:13" pos:end="105:26"><name pos:start="105:13" pos:end="105:23">entrypoints</name><index pos:start="105:24" pos:end="105:26">[<expr pos:start="105:25" pos:end="105:25"><name pos:start="105:25" pos:end="105:25">i</name></expr>]</index></name> <operator pos:start="105:28" pos:end="105:29">==</operator> <name pos:start="105:31" pos:end="105:48"><name pos:start="105:31" pos:end="105:33">ctx</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:48">va_entrypoint</name></name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:18"><block_content pos:start="107:13" pos:end="107:18">

            <break pos:start="107:13" pos:end="107:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="111:5" pos:end="121:5"><if pos:start="111:5" pos:end="121:5">if <condition pos:start="111:8" pos:end="111:15">(<expr pos:start="111:9" pos:end="111:14"><name pos:start="111:9" pos:end="111:9">i</name> <operator pos:start="111:11" pos:end="111:12">&gt;=</operator> <name pos:start="111:14" pos:end="111:14">n</name></expr>)</condition> <block pos:start="111:17" pos:end="121:5">{<block_content pos:start="113:9" pos:end="119:18">

        <expr_stmt pos:start="113:9" pos:end="115:68"><expr pos:start="113:9" pos:end="115:67"><call pos:start="113:9" pos:end="115:67"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="115:67">(<argument pos:start="113:16" pos:end="113:18"><expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">ctx</name></expr></argument>, <argument pos:start="113:21" pos:end="113:32"><expr pos:start="113:21" pos:end="113:32"><name pos:start="113:21" pos:end="113:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:35" pos:end="115:29"><expr pos:start="113:35" pos:end="115:29"><literal type="string" pos:start="113:35" pos:end="113:66">"Encoding entrypoint not found "</literal>

               <literal type="string" pos:start="115:16" pos:end="115:29">"(%d / %d).\n"</literal></expr></argument>, <argument pos:start="115:32" pos:end="115:46"><expr pos:start="115:32" pos:end="115:46"><name pos:start="115:32" pos:end="115:46"><name pos:start="115:32" pos:end="115:34">ctx</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:46">va_profile</name></name></expr></argument>, <argument pos:start="115:49" pos:end="115:66"><expr pos:start="115:49" pos:end="115:66"><name pos:start="115:49" pos:end="115:66"><name pos:start="115:49" pos:end="115:51">ctx</name><operator pos:start="115:52" pos:end="115:53">-&gt;</operator><name pos:start="115:54" pos:end="115:66">va_entrypoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:11">err</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:29"><name pos:start="117:15" pos:end="117:21">AVERROR</name><argument_list pos:start="117:22" pos:end="117:29">(<argument pos:start="117:23" pos:end="117:28"><expr pos:start="117:23" pos:end="117:28"><name pos:start="117:23" pos:end="117:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="129:60"><expr pos:start="125:5" pos:end="129:59"><name pos:start="125:5" pos:end="125:7">vas</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="129:59"><name pos:start="125:11" pos:end="125:31">vaGetConfigAttributes</name><argument_list pos:start="125:32" pos:end="129:59">(<argument pos:start="125:33" pos:end="125:51"><expr pos:start="125:33" pos:end="125:51"><name pos:start="125:33" pos:end="125:51"><name pos:start="125:33" pos:end="125:35">ctx</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:42">hwctx</name><operator pos:start="125:43" pos:end="125:44">-&gt;</operator><name pos:start="125:45" pos:end="125:51">display</name></name></expr></argument>,

                                <argument pos:start="127:33" pos:end="127:47"><expr pos:start="127:33" pos:end="127:47"><name pos:start="127:33" pos:end="127:47"><name pos:start="127:33" pos:end="127:35">ctx</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:47">va_profile</name></name></expr></argument>, <argument pos:start="127:50" pos:end="127:67"><expr pos:start="127:50" pos:end="127:67"><name pos:start="127:50" pos:end="127:67"><name pos:start="127:50" pos:end="127:52">ctx</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:67">va_entrypoint</name></name></expr></argument>,

                                <argument pos:start="129:33" pos:end="129:36"><expr pos:start="129:33" pos:end="129:36"><name pos:start="129:33" pos:end="129:36">attr</name></expr></argument>, <argument pos:start="129:39" pos:end="129:58"><expr pos:start="129:39" pos:end="129:58"><call pos:start="129:39" pos:end="129:58"><name pos:start="129:39" pos:end="129:52">FF_ARRAY_ELEMS</name><argument_list pos:start="129:53" pos:end="129:58">(<argument pos:start="129:54" pos:end="129:57"><expr pos:start="129:54" pos:end="129:57"><name pos:start="129:54" pos:end="129:57">attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:33">(<expr pos:start="131:9" pos:end="131:32"><name pos:start="131:9" pos:end="131:11">vas</name> <operator pos:start="131:13" pos:end="131:14">!=</operator> <name pos:start="131:16" pos:end="131:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="131:35" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:31">

        <expr_stmt pos:start="133:9" pos:end="135:63"><expr pos:start="133:9" pos:end="135:62"><call pos:start="133:9" pos:end="135:62"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="135:62">(<argument pos:start="133:16" pos:end="133:20"><expr pos:start="133:16" pos:end="133:20"><name pos:start="133:16" pos:end="133:20">avctx</name></expr></argument>, <argument pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:34"><name pos:start="133:23" pos:end="133:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:37" pos:end="135:39"><expr pos:start="133:37" pos:end="135:39"><literal type="string" pos:start="133:37" pos:end="133:61">"Failed to fetch config "</literal>

               <literal type="string" pos:start="135:16" pos:end="135:39">"attributes: %d (%s).\n"</literal></expr></argument>, <argument pos:start="135:42" pos:end="135:44"><expr pos:start="135:42" pos:end="135:44"><name pos:start="135:42" pos:end="135:44">vas</name></expr></argument>, <argument pos:start="135:47" pos:end="135:61"><expr pos:start="135:47" pos:end="135:61"><call pos:start="135:47" pos:end="135:61"><name pos:start="135:47" pos:end="135:56">vaErrorStr</name><argument_list pos:start="135:57" pos:end="135:61">(<argument pos:start="135:58" pos:end="135:60"><expr pos:start="135:58" pos:end="135:60"><name pos:start="135:58" pos:end="135:60">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:31">return <expr pos:start="137:16" pos:end="137:30"><call pos:start="137:16" pos:end="137:30"><name pos:start="137:16" pos:end="137:22">AVERROR</name><argument_list pos:start="137:23" pos:end="137:30">(<argument pos:start="137:24" pos:end="137:29"><expr pos:start="137:24" pos:end="137:29"><name pos:start="137:24" pos:end="137:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="143:5" pos:end="215:5">for <control pos:start="143:9" pos:end="143:46">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:41"><expr pos:start="143:17" pos:end="143:40"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <call pos:start="143:21" pos:end="143:40"><name pos:start="143:21" pos:end="143:34">FF_ARRAY_ELEMS</name><argument_list pos:start="143:35" pos:end="143:40">(<argument pos:start="143:36" pos:end="143:39"><expr pos:start="143:36" pos:end="143:39"><name pos:start="143:36" pos:end="143:39">attr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="143:43" pos:end="143:45"><expr pos:start="143:43" pos:end="143:45"><name pos:start="143:43" pos:end="143:43">i</name><operator pos:start="143:44" pos:end="143:45">++</operator></expr></incr>)</control> <block pos:start="143:48" pos:end="215:5">{<block_content pos:start="145:9" pos:end="213:9">

        <if_stmt pos:start="145:9" pos:end="155:9"><if pos:start="145:9" pos:end="155:9">if <condition pos:start="145:12" pos:end="145:53">(<expr pos:start="145:13" pos:end="145:52"><name pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:16">attr</name><index pos:start="145:17" pos:end="145:19">[<expr pos:start="145:18" pos:end="145:18"><name pos:start="145:18" pos:end="145:18">i</name></expr>]</index></name><operator pos:start="145:20" pos:end="145:20">.</operator><name pos:start="145:21" pos:end="145:25">value</name> <operator pos:start="145:27" pos:end="145:28">==</operator> <name pos:start="145:30" pos:end="145:52">VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block pos:start="145:55" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:21">

            <comment type="line" pos:start="147:13" pos:end="147:75">// Unfortunately we have to treat this as "don't know" and hope</comment>

            <comment type="line" pos:start="149:13" pos:end="149:73">// for the best, because the Intel MJPEG encoder returns this</comment>

            <comment type="line" pos:start="151:13" pos:end="151:50">// for all the interesting attributes.</comment>

            <continue pos:start="153:13" pos:end="153:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="157:9" pos:end="213:9">switch <condition pos:start="157:16" pos:end="157:29">(<expr pos:start="157:17" pos:end="157:28"><name pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:20">attr</name><index pos:start="157:21" pos:end="157:23">[<expr pos:start="157:22" pos:end="157:22"><name pos:start="157:22" pos:end="157:22">i</name></expr>]</index></name><operator pos:start="157:24" pos:end="157:24">.</operator><name pos:start="157:25" pos:end="157:28">type</name></expr>)</condition> <block pos:start="157:31" pos:end="213:9">{<block_content pos:start="159:9" pos:end="211:14">

        <case pos:start="159:9" pos:end="159:39">case <expr pos:start="159:14" pos:end="159:38"><name pos:start="159:14" pos:end="159:38">VAConfigAttribRateControl</name></expr>:</case>

            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="171:13">if <condition pos:start="161:16" pos:end="161:51">(<expr pos:start="161:17" pos:end="161:50"><operator pos:start="161:17" pos:end="161:17">!</operator><operator pos:start="161:18" pos:end="161:18">(</operator><name pos:start="161:19" pos:end="161:33"><name pos:start="161:19" pos:end="161:21">ctx</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:33">va_rc_mode</name></name> <operator pos:start="161:35" pos:end="161:35">&amp;</operator> <name pos:start="161:37" pos:end="161:43"><name pos:start="161:37" pos:end="161:40">attr</name><index pos:start="161:41" pos:end="161:43">[<expr pos:start="161:42" pos:end="161:42"><name pos:start="161:42" pos:end="161:42">i</name></expr>]</index></name><operator pos:start="161:44" pos:end="161:44">.</operator><name pos:start="161:45" pos:end="161:49">value</name><operator pos:start="161:50" pos:end="161:50">)</operator></expr>)</condition> <block pos:start="161:53" pos:end="171:13">{<block_content pos:start="163:17" pos:end="169:26">

                <expr_stmt pos:start="163:17" pos:end="165:57"><expr pos:start="163:17" pos:end="165:56"><call pos:start="163:17" pos:end="165:56"><name pos:start="163:17" pos:end="163:22">av_log</name><argument_list pos:start="163:23" pos:end="165:56">(<argument pos:start="163:24" pos:end="163:28"><expr pos:start="163:24" pos:end="163:28"><name pos:start="163:24" pos:end="163:28">avctx</name></expr></argument>, <argument pos:start="163:31" pos:end="163:42"><expr pos:start="163:31" pos:end="163:42"><name pos:start="163:31" pos:end="163:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:45" pos:end="165:40"><expr pos:start="163:45" pos:end="165:40"><literal type="string" pos:start="163:45" pos:end="163:71">"Rate control mode is not "</literal>

                       <literal type="string" pos:start="165:24" pos:end="165:40">"supported: %x\n"</literal></expr></argument>, <argument pos:start="165:43" pos:end="165:55"><expr pos:start="165:43" pos:end="165:55"><name pos:start="165:43" pos:end="165:49"><name pos:start="165:43" pos:end="165:46">attr</name><index pos:start="165:47" pos:end="165:49">[<expr pos:start="165:48" pos:end="165:48"><name pos:start="165:48" pos:end="165:48">i</name></expr>]</index></name><operator pos:start="165:50" pos:end="165:50">.</operator><name pos:start="165:51" pos:end="165:55">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:38"><expr pos:start="167:17" pos:end="167:37"><name pos:start="167:17" pos:end="167:19">err</name> <operator pos:start="167:21" pos:end="167:21">=</operator> <call pos:start="167:23" pos:end="167:37"><name pos:start="167:23" pos:end="167:29">AVERROR</name><argument_list pos:start="167:30" pos:end="167:37">(<argument pos:start="167:31" pos:end="167:36"><expr pos:start="167:31" pos:end="167:36"><name pos:start="167:31" pos:end="167:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="169:17" pos:end="169:26">goto <name pos:start="169:22" pos:end="169:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:43">case <expr pos:start="175:14" pos:end="175:42"><name pos:start="175:14" pos:end="175:42">VAConfigAttribEncMaxRefFrames</name></expr>:</case>

        <block pos:start="177:9" pos:end="209:9">{<block_content pos:start="179:13" pos:end="207:13">

            <decl_stmt pos:start="179:13" pos:end="179:57"><decl pos:start="179:13" pos:end="179:56"><type pos:start="179:13" pos:end="179:24"><name pos:start="179:13" pos:end="179:20">unsigned</name> <name pos:start="179:22" pos:end="179:24">int</name></type> <name pos:start="179:26" pos:end="179:31">ref_l0</name> <init pos:start="179:33" pos:end="179:56">= <expr pos:start="179:35" pos:end="179:56"><name pos:start="179:35" pos:end="179:41"><name pos:start="179:35" pos:end="179:38">attr</name><index pos:start="179:39" pos:end="179:41">[<expr pos:start="179:40" pos:end="179:40"><name pos:start="179:40" pos:end="179:40">i</name></expr>]</index></name><operator pos:start="179:42" pos:end="179:42">.</operator><name pos:start="179:43" pos:end="179:47">value</name> <operator pos:start="179:49" pos:end="179:49">&amp;</operator> <literal type="number" pos:start="179:51" pos:end="179:56">0xffff</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="181:13" pos:end="181:65"><decl pos:start="181:13" pos:end="181:64"><type pos:start="181:13" pos:end="181:24"><name pos:start="181:13" pos:end="181:20">unsigned</name> <name pos:start="181:22" pos:end="181:24">int</name></type> <name pos:start="181:26" pos:end="181:31">ref_l1</name> <init pos:start="181:33" pos:end="181:64">= <expr pos:start="181:35" pos:end="181:64"><operator pos:start="181:35" pos:end="181:35">(</operator><name pos:start="181:36" pos:end="181:42"><name pos:start="181:36" pos:end="181:39">attr</name><index pos:start="181:40" pos:end="181:42">[<expr pos:start="181:41" pos:end="181:41"><name pos:start="181:41" pos:end="181:41">i</name></expr>]</index></name><operator pos:start="181:43" pos:end="181:43">.</operator><name pos:start="181:44" pos:end="181:48">value</name> <operator pos:start="181:50" pos:end="181:51">&gt;&gt;</operator> <literal type="number" pos:start="181:53" pos:end="181:54">16</literal><operator pos:start="181:55" pos:end="181:55">)</operator> <operator pos:start="181:57" pos:end="181:57">&amp;</operator> <literal type="number" pos:start="181:59" pos:end="181:64">0xffff</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="185:13" pos:end="195:13"><if pos:start="185:13" pos:end="195:13">if <condition pos:start="185:16" pos:end="185:50">(<expr pos:start="185:17" pos:end="185:49"><name pos:start="185:17" pos:end="185:31"><name pos:start="185:17" pos:end="185:21">avctx</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:31">gop_size</name></name> <operator pos:start="185:33" pos:end="185:33">&gt;</operator> <literal type="number" pos:start="185:35" pos:end="185:35">1</literal> <operator pos:start="185:37" pos:end="185:38">&amp;&amp;</operator> <name pos:start="185:40" pos:end="185:45">ref_l0</name> <operator pos:start="185:47" pos:end="185:47">&lt;</operator> <literal type="number" pos:start="185:49" pos:end="185:49">1</literal></expr>)</condition> <block pos:start="185:52" pos:end="195:13">{<block_content pos:start="187:17" pos:end="193:26">

                <expr_stmt pos:start="187:17" pos:end="189:59"><expr pos:start="187:17" pos:end="189:58"><call pos:start="187:17" pos:end="189:58"><name pos:start="187:17" pos:end="187:22">av_log</name><argument_list pos:start="187:23" pos:end="189:58">(<argument pos:start="187:24" pos:end="187:28"><expr pos:start="187:24" pos:end="187:28"><name pos:start="187:24" pos:end="187:28">avctx</name></expr></argument>, <argument pos:start="187:31" pos:end="187:42"><expr pos:start="187:31" pos:end="187:42"><name pos:start="187:31" pos:end="187:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="187:45" pos:end="189:42"><expr pos:start="187:45" pos:end="189:42"><literal type="string" pos:start="187:45" pos:end="187:63">"P frames are not "</literal>

                       <literal type="string" pos:start="189:24" pos:end="189:42">"supported (%x).\n"</literal></expr></argument>, <argument pos:start="189:45" pos:end="189:57"><expr pos:start="189:45" pos:end="189:57"><name pos:start="189:45" pos:end="189:51"><name pos:start="189:45" pos:end="189:48">attr</name><index pos:start="189:49" pos:end="189:51">[<expr pos:start="189:50" pos:end="189:50"><name pos:start="189:50" pos:end="189:50">i</name></expr>]</index></name><operator pos:start="189:52" pos:end="189:52">.</operator><name pos:start="189:53" pos:end="189:57">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:38"><expr pos:start="191:17" pos:end="191:37"><name pos:start="191:17" pos:end="191:19">err</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="191:37"><name pos:start="191:23" pos:end="191:29">AVERROR</name><argument_list pos:start="191:30" pos:end="191:37">(<argument pos:start="191:31" pos:end="191:36"><expr pos:start="191:31" pos:end="191:36"><name pos:start="191:31" pos:end="191:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="193:17" pos:end="193:26">goto <name pos:start="193:22" pos:end="193:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="197:13" pos:end="207:13"><if pos:start="197:13" pos:end="207:13">if <condition pos:start="197:16" pos:end="197:54">(<expr pos:start="197:17" pos:end="197:53"><name pos:start="197:17" pos:end="197:35"><name pos:start="197:17" pos:end="197:21">avctx</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:35">max_b_frames</name></name> <operator pos:start="197:37" pos:end="197:37">&gt;</operator> <literal type="number" pos:start="197:39" pos:end="197:39">0</literal> <operator pos:start="197:41" pos:end="197:42">&amp;&amp;</operator> <name pos:start="197:44" pos:end="197:49">ref_l1</name> <operator pos:start="197:51" pos:end="197:51">&lt;</operator> <literal type="number" pos:start="197:53" pos:end="197:53">1</literal></expr>)</condition> <block pos:start="197:56" pos:end="207:13">{<block_content pos:start="199:17" pos:end="205:26">

                <expr_stmt pos:start="199:17" pos:end="201:59"><expr pos:start="199:17" pos:end="201:58"><call pos:start="199:17" pos:end="201:58"><name pos:start="199:17" pos:end="199:22">av_log</name><argument_list pos:start="199:23" pos:end="201:58">(<argument pos:start="199:24" pos:end="199:28"><expr pos:start="199:24" pos:end="199:28"><name pos:start="199:24" pos:end="199:28">avctx</name></expr></argument>, <argument pos:start="199:31" pos:end="199:42"><expr pos:start="199:31" pos:end="199:42"><name pos:start="199:31" pos:end="199:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:45" pos:end="201:42"><expr pos:start="199:45" pos:end="201:42"><literal type="string" pos:start="199:45" pos:end="199:63">"B frames are not "</literal>

                       <literal type="string" pos:start="201:24" pos:end="201:42">"supported (%x).\n"</literal></expr></argument>, <argument pos:start="201:45" pos:end="201:57"><expr pos:start="201:45" pos:end="201:57"><name pos:start="201:45" pos:end="201:51"><name pos:start="201:45" pos:end="201:48">attr</name><index pos:start="201:49" pos:end="201:51">[<expr pos:start="201:50" pos:end="201:50"><name pos:start="201:50" pos:end="201:50">i</name></expr>]</index></name><operator pos:start="201:52" pos:end="201:52">.</operator><name pos:start="201:53" pos:end="201:57">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:38"><expr pos:start="203:17" pos:end="203:37"><name pos:start="203:17" pos:end="203:19">err</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <call pos:start="203:23" pos:end="203:37"><name pos:start="203:23" pos:end="203:29">AVERROR</name><argument_list pos:start="203:30" pos:end="203:37">(<argument pos:start="203:31" pos:end="203:36"><expr pos:start="203:31" pos:end="203:36"><name pos:start="203:31" pos:end="203:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="205:17" pos:end="205:26">goto <name pos:start="205:22" pos:end="205:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="211:9" pos:end="211:14">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="219:5" pos:end="219:12"><expr pos:start="219:5" pos:end="219:11"><name pos:start="219:5" pos:end="219:7">err</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <literal type="number" pos:start="219:11" pos:end="219:11">0</literal></expr>;</expr_stmt>

<label pos:start="221:1" pos:end="221:5"><name pos:start="221:1" pos:end="221:4">fail</name>:</label>

    <expr_stmt pos:start="223:5" pos:end="223:24"><expr pos:start="223:5" pos:end="223:23"><call pos:start="223:5" pos:end="223:23"><name pos:start="223:5" pos:end="223:12">av_freep</name><argument_list pos:start="223:13" pos:end="223:23">(<argument pos:start="223:14" pos:end="223:22"><expr pos:start="223:14" pos:end="223:22"><operator pos:start="223:14" pos:end="223:14">&amp;</operator><name pos:start="223:15" pos:end="223:22">profiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:27"><expr pos:start="225:5" pos:end="225:26"><call pos:start="225:5" pos:end="225:26"><name pos:start="225:5" pos:end="225:12">av_freep</name><argument_list pos:start="225:13" pos:end="225:26">(<argument pos:start="225:14" pos:end="225:25"><expr pos:start="225:14" pos:end="225:25"><operator pos:start="225:14" pos:end="225:14">&amp;</operator><name pos:start="225:15" pos:end="225:25">entrypoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="227:5" pos:end="227:15">return <expr pos:start="227:12" pos:end="227:14"><name pos:start="227:12" pos:end="227:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
