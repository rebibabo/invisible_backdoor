<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23707.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:31">gen_op_mfspr</name> <parameter_list pos:start="1:33" pos:end="1:51">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:45">DisasContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <function_decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">void</name></type> (<modifier pos:start="5:11" pos:end="5:11">*</modifier><name pos:start="5:12" pos:end="5:18">read_cb</name>)<parameter_list pos:start="5:20" pos:end="5:43">(<parameter pos:start="5:21" pos:end="5:32"><decl pos:start="5:21" pos:end="5:32"><type pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:24">void</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:32">opaque</name></decl></parameter>, <parameter pos:start="5:35" pos:end="5:42"><decl pos:start="5:35" pos:end="5:42"><type pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:42">sprn</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">sprn</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><call pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:23">SPR</name><argument_list pos:start="7:24" pos:end="7:36">(<argument pos:start="7:25" pos:end="7:35"><expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:30">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:30"><operator pos:start="11:5" pos:end="11:5">!</operator><call pos:start="11:6" pos:end="11:30"><name pos:start="11:6" pos:end="11:12">defined</name><argument_list pos:start="11:13" pos:end="11:30">(<argument pos:start="11:14" pos:end="11:29"><expr pos:start="11:14" pos:end="11:29"><name pos:start="11:14" pos:end="11:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="13:5" pos:end="21:45"><if pos:start="13:5" pos:end="15:45">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:11">ctx</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:23">supervisor</name></name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:45"><block_content pos:start="15:9" pos:end="15:45">

        <expr_stmt pos:start="15:9" pos:end="15:45"><expr pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:15">read_cb</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:35"><name pos:start="15:19" pos:end="15:21">ctx</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:29">spr_cb</name><index pos:start="15:30" pos:end="15:35">[<expr pos:start="15:31" pos:end="15:34"><name pos:start="15:31" pos:end="15:34">sprn</name></expr>]</index></name><operator pos:start="15:36" pos:end="15:36">.</operator><name pos:start="15:37" pos:end="15:44">oea_read</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="17:5" pos:end="21:45">else<block type="pseudo" pos:start="21:9" pos:end="21:45"><block_content pos:start="21:9" pos:end="21:45">

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="21:9" pos:end="21:45"><expr pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:15">read_cb</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:35"><name pos:start="21:19" pos:end="21:21">ctx</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:29">spr_cb</name><index pos:start="21:30" pos:end="21:35">[<expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">sprn</name></expr>]</index></name><operator pos:start="21:36" pos:end="21:36">.</operator><name pos:start="21:37" pos:end="21:44">uea_read</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="23:5" pos:end="65:5"><if pos:start="23:5" pos:end="49:5">if <condition pos:start="23:8" pos:end="23:32">(<expr pos:start="23:9" pos:end="23:31"><call pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:14">likely</name><argument_list pos:start="23:15" pos:end="23:31">(<argument pos:start="23:16" pos:end="23:30"><expr pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">read_cb</name> <operator pos:start="23:24" pos:end="23:25">!=</operator> <name pos:start="23:27" pos:end="23:30">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:34" pos:end="49:5">{<block_content pos:start="25:9" pos:end="47:9">

        <if_stmt pos:start="25:9" pos:end="47:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:44">(<expr pos:start="25:13" pos:end="25:43"><call pos:start="25:13" pos:end="25:43"><name pos:start="25:13" pos:end="25:18">likely</name><argument_list pos:start="25:19" pos:end="25:43">(<argument pos:start="25:20" pos:end="25:42"><expr pos:start="25:20" pos:end="25:42"><name pos:start="25:20" pos:end="25:26">read_cb</name> <operator pos:start="25:28" pos:end="25:29">!=</operator> <name pos:start="25:31" pos:end="25:42">SPR_NOACCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:46" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:49">

            <expr_stmt pos:start="27:13" pos:end="27:34"><expr pos:start="27:13" pos:end="27:33"><call pos:start="27:13" pos:end="27:33">(<modifier pos:start="27:14" pos:end="27:14">*</modifier><name pos:start="27:15" pos:end="27:21">read_cb</name>)<argument_list pos:start="27:23" pos:end="27:33">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">ctx</name></expr></argument>, <argument pos:start="27:29" pos:end="27:32"><expr pos:start="27:29" pos:end="27:32"><name pos:start="27:29" pos:end="27:32">sprn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:49"><expr pos:start="29:13" pos:end="29:48"><call pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:31">gen_op_store_T0_gpr</name><argument_list pos:start="29:32" pos:end="29:48">(<argument pos:start="29:33" pos:end="29:47"><expr pos:start="29:33" pos:end="29:47"><call pos:start="29:33" pos:end="29:47"><name pos:start="29:33" pos:end="29:34">rD</name><argument_list pos:start="29:35" pos:end="29:47">(<argument pos:start="29:36" pos:end="29:46"><expr pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:38">ctx</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:46">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="47:9">else <block pos:start="31:16" pos:end="47:9">{<block_content pos:start="35:13" pos:end="45:29">

            <comment type="block" pos:start="33:13" pos:end="33:37">/* Privilege exception */</comment>

            <if_stmt pos:start="35:13" pos:end="41:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:30">(<expr pos:start="35:17" pos:end="35:29"><name pos:start="35:17" pos:end="35:24">loglevel</name> <operator pos:start="35:26" pos:end="35:27">!=</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>)</condition> <block pos:start="35:32" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:36">

                <expr_stmt pos:start="37:17" pos:end="39:36"><expr pos:start="37:17" pos:end="39:35"><call pos:start="37:17" pos:end="39:35"><name pos:start="37:17" pos:end="37:23">fprintf</name><argument_list pos:start="37:24" pos:end="39:35">(<argument pos:start="37:25" pos:end="37:31"><expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:31">logfile</name></expr></argument>, <argument pos:start="37:34" pos:end="37:74"><expr pos:start="37:34" pos:end="37:74"><literal type="string" pos:start="37:34" pos:end="37:74">"Trying to read privileged spr %d %03x\n"</literal></expr></argument>,

                        <argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><name pos:start="39:25" pos:end="39:28">sprn</name></expr></argument>, <argument pos:start="39:31" pos:end="39:34"><expr pos:start="39:31" pos:end="39:34"><name pos:start="39:31" pos:end="39:34">sprn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:74"><expr pos:start="43:13" pos:end="43:73"><call pos:start="43:13" pos:end="43:73"><name pos:start="43:13" pos:end="43:18">printf</name><argument_list pos:start="43:19" pos:end="43:73">(<argument pos:start="43:20" pos:end="43:60"><expr pos:start="43:20" pos:end="43:60"><literal type="string" pos:start="43:20" pos:end="43:60">"Trying to read privileged spr %d %03x\n"</literal></expr></argument>, <argument pos:start="43:63" pos:end="43:66"><expr pos:start="43:63" pos:end="43:66"><name pos:start="43:63" pos:end="43:66">sprn</name></expr></argument>, <argument pos:start="43:69" pos:end="43:72"><expr pos:start="43:69" pos:end="43:72"><name pos:start="43:69" pos:end="43:72">sprn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:29"><expr pos:start="45:13" pos:end="45:28"><call pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:23">RET_PRIVREG</name><argument_list pos:start="45:24" pos:end="45:28">(<argument pos:start="45:25" pos:end="45:27"><expr pos:start="45:25" pos:end="45:27"><name pos:start="45:25" pos:end="45:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="65:5">else <block pos:start="49:12" pos:end="65:5">{<block_content pos:start="53:9" pos:end="63:65">

        <comment type="block" pos:start="51:9" pos:end="51:25">/* Not defined */</comment>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:26">(<expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:20">loglevel</name> <operator pos:start="53:22" pos:end="53:23">!=</operator> <literal type="number" pos:start="53:25" pos:end="53:25">0</literal></expr>)</condition> <block pos:start="53:28" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:32">

            <expr_stmt pos:start="55:13" pos:end="57:32"><expr pos:start="55:13" pos:end="57:31"><call pos:start="55:13" pos:end="57:31"><name pos:start="55:13" pos:end="55:19">fprintf</name><argument_list pos:start="55:20" pos:end="57:31">(<argument pos:start="55:21" pos:end="55:27"><expr pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:27">logfile</name></expr></argument>, <argument pos:start="55:30" pos:end="55:67"><expr pos:start="55:30" pos:end="55:67"><literal type="string" pos:start="55:30" pos:end="55:67">"Trying to read invalid spr %d %03x\n"</literal></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:24"><expr pos:start="57:21" pos:end="57:24"><name pos:start="57:21" pos:end="57:24">sprn</name></expr></argument>, <argument pos:start="57:27" pos:end="57:30"><expr pos:start="57:27" pos:end="57:30"><name pos:start="57:27" pos:end="57:30">sprn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:67"><expr pos:start="61:9" pos:end="61:66"><call pos:start="61:9" pos:end="61:66"><name pos:start="61:9" pos:end="61:14">printf</name><argument_list pos:start="61:15" pos:end="61:66">(<argument pos:start="61:16" pos:end="61:53"><expr pos:start="61:16" pos:end="61:53"><literal type="string" pos:start="61:16" pos:end="61:53">"Trying to read invalid spr %d %03x\n"</literal></expr></argument>, <argument pos:start="61:56" pos:end="61:59"><expr pos:start="61:56" pos:end="61:59"><name pos:start="61:56" pos:end="61:59">sprn</name></expr></argument>, <argument pos:start="61:62" pos:end="61:65"><expr pos:start="61:62" pos:end="61:65"><name pos:start="61:62" pos:end="61:65">sprn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><call pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:16">RET_EXCP</name><argument_list pos:start="63:17" pos:end="63:64">(<argument pos:start="63:18" pos:end="63:20"><expr pos:start="63:18" pos:end="63:20"><name pos:start="63:18" pos:end="63:20">ctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">EXCP_PROGRAM</name></expr></argument>, <argument pos:start="63:37" pos:end="63:63"><expr pos:start="63:37" pos:end="63:63"><name pos:start="63:37" pos:end="63:46">EXCP_INVAL</name> <operator pos:start="63:48" pos:end="63:48">|</operator> <name pos:start="63:50" pos:end="63:63">EXCP_INVAL_SPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
