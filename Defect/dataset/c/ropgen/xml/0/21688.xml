<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21688.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">clear_blocks_dcbz128_ppc</name><parameter_list pos:start="1:30" pos:end="1:46">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:37">DCTELEM</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">blocks</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:1" pos:end="41:56">

<expr_stmt pos:start="5:1" pos:end="5:53"><expr pos:start="5:1" pos:end="5:52"><call pos:start="5:1" pos:end="5:52"><name pos:start="5:1" pos:end="5:19">POWERPC_TBL_DECLARE</name><argument_list pos:start="5:20" pos:end="5:52">(<argument pos:start="5:21" pos:end="5:48"><expr pos:start="5:21" pos:end="5:48"><name pos:start="5:21" pos:end="5:48">powerpc_clear_blocks_dcbz128</name></expr></argument>, <argument pos:start="5:51" pos:end="5:51"><expr pos:start="5:51" pos:end="5:51"><literal type="number" pos:start="5:51" pos:end="5:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:12">register</specifier> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:22">misal</name> <init pos:start="7:24" pos:end="7:61">= <expr pos:start="7:26" pos:end="7:61"><operator pos:start="7:26" pos:end="7:26">(</operator><operator pos:start="7:27" pos:end="7:27">(</operator><name pos:start="7:28" pos:end="7:35">unsigned</name> <name pos:start="7:37" pos:end="7:40">long</name><operator pos:start="7:41" pos:end="7:41">)</operator><name pos:start="7:42" pos:end="7:47">blocks</name> <operator pos:start="7:49" pos:end="7:49">&amp;</operator> <literal type="number" pos:start="7:51" pos:end="7:60">0x0000007f</literal><operator pos:start="7:61" pos:end="7:61">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:12">register</specifier> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt pos:start="11:1" pos:end="14:0"><expr pos:start="11:1" pos:end="11:56"><call pos:start="11:1" pos:end="11:56"><name pos:start="11:1" pos:end="11:23">POWERPC_TBL_START_COUNT</name><argument_list pos:start="11:24" pos:end="11:56">(<argument pos:start="11:25" pos:end="11:52"><expr pos:start="11:25" pos:end="11:52"><name pos:start="11:25" pos:end="11:52">powerpc_clear_blocks_dcbz128</name></expr></argument>, <argument pos:start="11:55" pos:end="11:55"><expr pos:start="11:55" pos:end="11:55"><literal type="number" pos:start="11:55" pos:end="11:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:5"><literal type="number" pos:start="13:5" pos:end="13:5">1</literal></expr></cpp:if>

 <if_stmt pos:start="15:2" pos:end="36:0"><if pos:start="15:2" pos:end="25:5">if <condition pos:start="15:5" pos:end="15:11">(<expr pos:start="15:6" pos:end="15:10"><name pos:start="15:6" pos:end="15:10">misal</name></expr>)</condition> <block pos:start="15:13" pos:end="25:5">{<block_content pos:start="23:7" pos:end="23:46">

   <comment type="line" pos:start="17:4" pos:end="17:48">// we could probably also optimize this case,</comment>

   <comment type="line" pos:start="19:4" pos:end="19:48">// but there's not much point as the machines</comment>

   <comment type="line" pos:start="21:4" pos:end="21:39">// aren't available yet (2003-06-26)</comment>

      <expr_stmt pos:start="23:7" pos:end="23:46"><expr pos:start="23:7" pos:end="23:45"><call pos:start="23:7" pos:end="23:45"><name pos:start="23:7" pos:end="23:12">memset</name><argument_list pos:start="23:13" pos:end="23:45">(<argument pos:start="23:14" pos:end="23:19"><expr pos:start="23:14" pos:end="23:19"><name pos:start="23:14" pos:end="23:19">blocks</name></expr></argument>, <argument pos:start="23:22" pos:end="23:22"><expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr></argument>, <argument pos:start="23:25" pos:end="23:44"><expr pos:start="23:25" pos:end="23:44"><sizeof pos:start="23:25" pos:end="23:39">sizeof<argument_list pos:start="23:31" pos:end="23:39">(<argument pos:start="23:32" pos:end="23:38"><expr pos:start="23:32" pos:end="23:38"><name pos:start="23:32" pos:end="23:38">DCTELEM</name></expr></argument>)</argument_list></sizeof><operator pos:start="23:40" pos:end="23:40">*</operator><literal type="number" pos:start="23:41" pos:end="23:41">6</literal><operator pos:start="23:42" pos:end="23:42">*</operator><literal type="number" pos:start="23:43" pos:end="23:44">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="27:5" pos:end="36:0">else<block type="pseudo" pos:start="29:7" pos:end="36:0"><block_content pos:start="29:7" pos:end="36:0">

      <for pos:start="29:7" pos:end="36:0">for <control pos:start="29:11" pos:end="29:50">( <init pos:start="29:13" pos:end="29:13">;</init> <condition pos:start="29:15" pos:end="29:40"><expr pos:start="29:15" pos:end="29:38"><name pos:start="29:15" pos:end="29:15">i</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <sizeof pos:start="29:19" pos:end="29:33">sizeof<argument_list pos:start="29:25" pos:end="29:33">(<argument pos:start="29:26" pos:end="29:32"><expr pos:start="29:26" pos:end="29:32"><name pos:start="29:26" pos:end="29:32">DCTELEM</name></expr></argument>)</argument_list></sizeof><operator pos:start="29:34" pos:end="29:34">*</operator><literal type="number" pos:start="29:35" pos:end="29:35">6</literal><operator pos:start="29:36" pos:end="29:36">*</operator><literal type="number" pos:start="29:37" pos:end="29:38">64</literal></expr> ;</condition> <incr pos:start="29:42" pos:end="29:49"><expr pos:start="29:42" pos:end="29:49"><name pos:start="29:42" pos:end="29:42">i</name> <operator pos:start="29:44" pos:end="29:45">+=</operator> <literal type="number" pos:start="29:47" pos:end="29:49">128</literal></expr></incr>)</control> <block pos:start="29:52" pos:end="36:0">{<block_content pos:start="31:9" pos:end="31:73">

	<asm pos:start="31:9" pos:end="31:73">asm <specifier pos:start="31:13" pos:end="31:20">volatile</specifier>("dcbzl %0,%1" : : "b" (blocks), "r" (i) : "memory");</asm>

      </block_content>}</block></for></block_content></block></else></if_stmt>

<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:43"><call pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:43">(<argument pos:start="37:12" pos:end="37:17"><expr pos:start="37:12" pos:end="37:17"><name pos:start="37:12" pos:end="37:17">blocks</name></expr></argument>, <argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr></argument>, <argument pos:start="37:23" pos:end="37:42"><expr pos:start="37:23" pos:end="37:42"><sizeof pos:start="37:23" pos:end="37:37">sizeof<argument_list pos:start="37:29" pos:end="37:37">(<argument pos:start="37:30" pos:end="37:36"><expr pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:36">DCTELEM</name></expr></argument>)</argument_list></sizeof><operator pos:start="37:38" pos:end="37:38">*</operator><literal type="number" pos:start="37:39" pos:end="37:39">6</literal><operator pos:start="37:40" pos:end="37:40">*</operator><literal type="number" pos:start="37:41" pos:end="37:42">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

<expr_stmt pos:start="41:1" pos:end="41:56"><expr pos:start="41:1" pos:end="41:55"><call pos:start="41:1" pos:end="41:55"><name pos:start="41:1" pos:end="41:22">POWERPC_TBL_STOP_COUNT</name><argument_list pos:start="41:23" pos:end="41:55">(<argument pos:start="41:24" pos:end="41:51"><expr pos:start="41:24" pos:end="41:51"><name pos:start="41:24" pos:end="41:51">powerpc_clear_blocks_dcbz128</name></expr></argument>, <argument pos:start="41:54" pos:end="41:54"><expr pos:start="41:54" pos:end="41:54"><literal type="number" pos:start="41:54" pos:end="41:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
