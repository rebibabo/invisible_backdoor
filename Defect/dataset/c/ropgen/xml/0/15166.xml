<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15166.c" pos:tabs="8"><function pos:start="1:1" pos:end="479:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ppc_prep_init</name><parameter_list pos:start="1:26" pos:end="1:52">(<parameter pos:start="1:27" pos:end="1:51"><decl pos:start="1:27" pos:end="1:51"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:45">QEMUMachineInitArgs</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="479:1">{<block_content pos:start="5:5" pos:end="477:71">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:47">= <expr pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:34">args</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:47">boot_device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">PowerPCCPU</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">cpu</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUPPCState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">nvram_t</name></type> <name pos:start="25:13" pos:end="25:17">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">M48t59State</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:23">m48t59</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:57"><decl pos:start="29:5" pos:end="29:56"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:31">PPC_io_memory</name> <init pos:start="29:33" pos:end="29:56">= <expr pos:start="29:35" pos:end="29:56"><call pos:start="29:35" pos:end="29:56"><name pos:start="29:35" pos:end="29:39">g_new</name><argument_list pos:start="29:40" pos:end="29:56">(<argument pos:start="29:41" pos:end="29:52"><expr pos:start="29:41" pos:end="29:52"><name pos:start="29:41" pos:end="29:52">MemoryRegion</name></expr></argument>, <argument pos:start="29:55" pos:end="29:55"><expr pos:start="29:55" pos:end="29:55"><literal type="number" pos:start="29:55" pos:end="29:55">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="38:0"><decl pos:start="31:5" pos:end="31:48"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:14">PortioList</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:25">port_list</name> <init pos:start="31:27" pos:end="31:48">= <expr pos:start="31:29" pos:end="31:48"><call pos:start="31:29" pos:end="31:48"><name pos:start="31:29" pos:end="31:33">g_new</name><argument_list pos:start="31:34" pos:end="31:48">(<argument pos:start="31:35" pos:end="31:44"><expr pos:start="31:35" pos:end="31:44"><name pos:start="31:35" pos:end="31:44">PortioList</name></expr></argument>, <argument pos:start="31:47" pos:end="31:47"><expr pos:start="31:47" pos:end="31:47"><literal type="number" pos:start="31:47" pos:end="31:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="33:1" pos:end="33:5">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:5"><literal type="number" pos:start="33:5" pos:end="33:5">0</literal></expr></cpp:if>

    MemoryRegion *xcsr = g_new(MemoryRegion, 1);

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="39:5" pos:end="39:43"><decl pos:start="39:5" pos:end="39:18"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:18">linux_boot</name></decl>, <decl pos:start="39:21" pos:end="39:21"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:21" pos:end="39:21">i</name></decl>, <decl pos:start="39:24" pos:end="39:31"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:24" pos:end="39:31">nb_nics1</name></decl>, <decl pos:start="39:34" pos:end="39:42"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:34" pos:end="39:42">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:47"><decl pos:start="41:5" pos:end="41:46"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:21">ram</name> <init pos:start="41:23" pos:end="41:46">= <expr pos:start="41:25" pos:end="41:46"><call pos:start="41:25" pos:end="41:46"><name pos:start="41:25" pos:end="41:29">g_new</name><argument_list pos:start="41:30" pos:end="41:46">(<argument pos:start="41:31" pos:end="41:42"><expr pos:start="41:31" pos:end="41:42"><name pos:start="41:31" pos:end="41:42">MemoryRegion</name></expr></argument>, <argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><literal type="number" pos:start="41:45" pos:end="41:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:48"><decl pos:start="43:5" pos:end="43:47"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">MemoryRegion</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:22">bios</name> <init pos:start="43:24" pos:end="43:47">= <expr pos:start="43:26" pos:end="43:47"><call pos:start="43:26" pos:end="43:47"><name pos:start="43:26" pos:end="43:30">g_new</name><argument_list pos:start="43:31" pos:end="43:47">(<argument pos:start="43:32" pos:end="43:43"><expr pos:start="43:32" pos:end="43:43"><name pos:start="43:32" pos:end="43:43">MemoryRegion</name></expr></argument>, <argument pos:start="43:46" pos:end="43:46"><expr pos:start="43:46" pos:end="43:46"><literal type="number" pos:start="43:46" pos:end="43:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:38"><decl pos:start="45:5" pos:end="45:24"><type pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:12">uint32_t</name></type> <name pos:start="45:14" pos:end="45:24">kernel_base</name></decl>, <decl pos:start="45:27" pos:end="45:37"><type ref="prev" pos:start="45:5" pos:end="45:12"/><name pos:start="45:27" pos:end="45:37">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:34"><decl pos:start="47:5" pos:end="47:20"><type pos:start="47:5" pos:end="47:8"><name pos:start="47:5" pos:end="47:8">long</name></type> <name pos:start="47:10" pos:end="47:20">kernel_size</name></decl>, <decl pos:start="47:23" pos:end="47:33"><type ref="prev" pos:start="47:5" pos:end="47:8"/><name pos:start="47:23" pos:end="47:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:21"><decl pos:start="49:5" pos:end="49:20"><type pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:15">DeviceState</name> <modifier pos:start="49:17" pos:end="49:17">*</modifier></type><name pos:start="49:18" pos:end="49:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:26"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">PCIHostState</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:25">pcihost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:20"><decl pos:start="53:5" pos:end="53:19"><type pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:10">PCIBus</name> <modifier pos:start="53:12" pos:end="53:12">*</modifier></type><name pos:start="53:13" pos:end="53:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:19"><decl pos:start="55:5" pos:end="55:18"><type pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:13">PCIDevice</name> <modifier pos:start="55:15" pos:end="55:15">*</modifier></type><name pos:start="55:16" pos:end="55:18">pci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:20"><decl pos:start="57:5" pos:end="57:19"><type pos:start="57:5" pos:end="57:12"><name pos:start="57:5" pos:end="57:10">ISABus</name> <modifier pos:start="57:12" pos:end="57:12">*</modifier></type><name pos:start="57:13" pos:end="57:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:19"><decl pos:start="59:5" pos:end="59:18"><type pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:13">ISADevice</name> <modifier pos:start="59:15" pos:end="59:15">*</modifier></type><name pos:start="59:16" pos:end="59:18">isa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:27"><decl pos:start="61:5" pos:end="61:26"><type pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:12">qemu_irq</name> <modifier pos:start="61:14" pos:end="61:14">*</modifier></type><name pos:start="61:15" pos:end="61:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:24"><decl pos:start="63:5" pos:end="63:23"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:46"><decl pos:start="65:5" pos:end="65:45"><type pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:13">DriveInfo</name> <modifier pos:start="65:15" pos:end="65:15">*</modifier></type><name pos:start="65:16" pos:end="65:45"><name pos:start="65:16" pos:end="65:17">hd</name><index pos:start="65:18" pos:end="65:45">[<expr pos:start="65:19" pos:end="65:44"><name pos:start="65:19" pos:end="65:29">MAX_IDE_BUS</name> <operator pos:start="65:31" pos:end="65:31">*</operator> <name pos:start="65:33" pos:end="65:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:11">sysctrl</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:42"><name pos:start="69:15" pos:end="69:23">g_malloc0</name><argument_list pos:start="69:24" pos:end="69:42">(<argument pos:start="69:25" pos:end="69:41"><expr pos:start="69:25" pos:end="69:41"><sizeof pos:start="69:25" pos:end="69:41">sizeof<argument_list pos:start="69:31" pos:end="69:41">(<argument pos:start="69:32" pos:end="69:40"><expr pos:start="69:32" pos:end="69:40"><name pos:start="69:32" pos:end="69:40">sysctrl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:14">linux_boot</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:33">kernel_filename</name> <operator pos:start="73:35" pos:end="73:36">!=</operator> <name pos:start="73:38" pos:end="73:41">NULL</name><operator pos:start="73:42" pos:end="73:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:19">/* init CPUs */</comment>

    <if_stmt pos:start="79:5" pos:end="81:26"><if pos:start="79:5" pos:end="81:26">if <condition pos:start="79:8" pos:end="79:26">(<expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:17">cpu_model</name> <operator pos:start="79:19" pos:end="79:20">==</operator> <name pos:start="79:22" pos:end="79:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:26"><block_content pos:start="81:9" pos:end="81:26">

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:17">cpu_model</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="string" pos:start="81:21" pos:end="81:25">"602"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="83:5" pos:end="115:5">for <control pos:start="83:9" pos:end="83:34">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:29"><expr pos:start="83:17" pos:end="83:28"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:28">smp_cpus</name></expr>;</condition> <incr pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:31">i</name><operator pos:start="83:32" pos:end="83:33">++</operator></expr></incr>)</control> <block pos:start="83:36" pos:end="115:5">{<block_content pos:start="85:9" pos:end="113:49">

        <expr_stmt pos:start="85:9" pos:end="85:38"><expr pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:11">cpu</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:37"><name pos:start="85:15" pos:end="85:26">cpu_ppc_init</name><argument_list pos:start="85:27" pos:end="85:37">(<argument pos:start="85:28" pos:end="85:36"><expr pos:start="85:28" pos:end="85:36"><name pos:start="85:28" pos:end="85:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:24">(<expr pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:15">cpu</name> <operator pos:start="87:17" pos:end="87:18">==</operator> <name pos:start="87:20" pos:end="87:23">NULL</name></expr>)</condition> <block pos:start="87:26" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:20">

            <expr_stmt pos:start="89:13" pos:end="89:71"><expr pos:start="89:13" pos:end="89:70"><call pos:start="89:13" pos:end="89:70"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="89:70">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:69"><expr pos:start="89:29" pos:end="89:69"><literal type="string" pos:start="89:29" pos:end="89:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><call pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:16">exit</name><argument_list pos:start="91:17" pos:end="91:19">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><literal type="number" pos:start="91:18" pos:end="91:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:24"><expr pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:11">env</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">&amp;</operator><name pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:18">cpu</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:23">env</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="99:9" pos:end="111:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:46">(<expr pos:start="99:13" pos:end="99:45"><name pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:15">env</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:22">flags</name></name> <operator pos:start="99:24" pos:end="99:24">&amp;</operator> <name pos:start="99:26" pos:end="99:45">POWERPC_FLAG_RTC_CLK</name></expr>)</condition> <block pos:start="99:48" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:44">

            <comment type="block" pos:start="101:13" pos:end="101:71">/* POWER / PowerPC 601 RTC clock frequency is 7.8125 MHz */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:44"><expr pos:start="103:13" pos:end="103:43"><call pos:start="103:13" pos:end="103:43"><name pos:start="103:13" pos:end="103:27">cpu_ppc_tb_init</name><argument_list pos:start="103:28" pos:end="103:43">(<argument pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:31">env</name></expr></argument>, <argument pos:start="103:34" pos:end="103:42"><expr pos:start="103:34" pos:end="103:42"><literal type="number" pos:start="103:34" pos:end="103:42">7812500UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="111:9">else <block pos:start="105:16" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:58">

            <comment type="block" pos:start="107:13" pos:end="107:52">/* Set time-base frequency to 100 Mhz */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:58"><expr pos:start="109:13" pos:end="109:57"><call pos:start="109:13" pos:end="109:57"><name pos:start="109:13" pos:end="109:27">cpu_ppc_tb_init</name><argument_list pos:start="109:28" pos:end="109:57">(<argument pos:start="109:29" pos:end="109:31"><expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:31">env</name></expr></argument>, <argument pos:start="109:34" pos:end="109:56"><expr pos:start="109:34" pos:end="109:56"><literal type="number" pos:start="109:34" pos:end="109:38">100UL</literal> <operator pos:start="109:40" pos:end="109:40">*</operator> <literal type="number" pos:start="109:42" pos:end="109:47">1000UL</literal> <operator pos:start="109:49" pos:end="109:49">*</operator> <literal type="number" pos:start="109:51" pos:end="109:56">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:49"><expr pos:start="113:9" pos:end="113:48"><call pos:start="113:9" pos:end="113:48"><name pos:start="113:9" pos:end="113:27">qemu_register_reset</name><argument_list pos:start="113:28" pos:end="113:48">(<argument pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:42"><name pos:start="113:29" pos:end="113:42">ppc_prep_reset</name></expr></argument>, <argument pos:start="113:45" pos:end="113:47"><expr pos:start="113:45" pos:end="113:47"><name pos:start="113:45" pos:end="113:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="119:5" pos:end="119:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:64"><expr pos:start="121:5" pos:end="121:63"><call pos:start="121:5" pos:end="121:63"><name pos:start="121:5" pos:end="121:26">memory_region_init_ram</name><argument_list pos:start="121:27" pos:end="121:63">(<argument pos:start="121:28" pos:end="121:30"><expr pos:start="121:28" pos:end="121:30"><name pos:start="121:28" pos:end="121:30">ram</name></expr></argument>, <argument pos:start="121:33" pos:end="121:36"><expr pos:start="121:33" pos:end="121:36"><name pos:start="121:33" pos:end="121:36">NULL</name></expr></argument>, <argument pos:start="121:39" pos:end="121:52"><expr pos:start="121:39" pos:end="121:52"><literal type="string" pos:start="121:39" pos:end="121:52">"ppc_prep.ram"</literal></expr></argument>, <argument pos:start="121:55" pos:end="121:62"><expr pos:start="121:55" pos:end="121:62"><name pos:start="121:55" pos:end="121:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:37"><expr pos:start="123:5" pos:end="123:36"><call pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:31">vmstate_register_ram_global</name><argument_list pos:start="123:32" pos:end="123:36">(<argument pos:start="123:33" pos:end="123:35"><expr pos:start="123:33" pos:end="123:35"><name pos:start="123:33" pos:end="123:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:48"><expr pos:start="125:5" pos:end="125:47"><call pos:start="125:5" pos:end="125:47"><name pos:start="125:5" pos:end="125:31">memory_region_add_subregion</name><argument_list pos:start="125:32" pos:end="125:47">(<argument pos:start="125:33" pos:end="125:38"><expr pos:start="125:33" pos:end="125:38"><name pos:start="125:33" pos:end="125:38">sysmem</name></expr></argument>, <argument pos:start="125:41" pos:end="125:41"><expr pos:start="125:41" pos:end="125:41"><literal type="number" pos:start="125:41" pos:end="125:41">0</literal></expr></argument>, <argument pos:start="125:44" pos:end="125:46"><expr pos:start="125:44" pos:end="125:46"><name pos:start="125:44" pos:end="125:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:67"><expr pos:start="131:5" pos:end="131:66"><call pos:start="131:5" pos:end="131:66"><name pos:start="131:5" pos:end="131:26">memory_region_init_ram</name><argument_list pos:start="131:27" pos:end="131:66">(<argument pos:start="131:28" pos:end="131:31"><expr pos:start="131:28" pos:end="131:31"><name pos:start="131:28" pos:end="131:31">bios</name></expr></argument>, <argument pos:start="131:34" pos:end="131:37"><expr pos:start="131:34" pos:end="131:37"><name pos:start="131:34" pos:end="131:37">NULL</name></expr></argument>, <argument pos:start="131:40" pos:end="131:54"><expr pos:start="131:40" pos:end="131:54"><literal type="string" pos:start="131:40" pos:end="131:54">"ppc_prep.bios"</literal></expr></argument>, <argument pos:start="131:57" pos:end="131:65"><expr pos:start="131:57" pos:end="131:65"><name pos:start="131:57" pos:end="131:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:43"><expr pos:start="133:5" pos:end="133:42"><call pos:start="133:5" pos:end="133:42"><name pos:start="133:5" pos:end="133:30">memory_region_set_readonly</name><argument_list pos:start="133:31" pos:end="133:42">(<argument pos:start="133:32" pos:end="133:35"><expr pos:start="133:32" pos:end="133:35"><name pos:start="133:32" pos:end="133:35">bios</name></expr></argument>, <argument pos:start="133:38" pos:end="133:41"><expr pos:start="133:38" pos:end="133:41"><name pos:start="133:38" pos:end="133:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:70"><expr pos:start="135:5" pos:end="135:69"><call pos:start="135:5" pos:end="135:69"><name pos:start="135:5" pos:end="135:31">memory_region_add_subregion</name><argument_list pos:start="135:32" pos:end="135:69">(<argument pos:start="135:33" pos:end="135:38"><expr pos:start="135:33" pos:end="135:38"><name pos:start="135:33" pos:end="135:38">sysmem</name></expr></argument>, <argument pos:start="135:41" pos:end="135:62"><expr pos:start="135:41" pos:end="135:62"><operator pos:start="135:41" pos:end="135:41">(</operator><name pos:start="135:42" pos:end="135:49">uint32_t</name><operator pos:start="135:50" pos:end="135:50">)</operator><operator pos:start="135:51" pos:end="135:51">(</operator><operator pos:start="135:52" pos:end="135:52">-</operator><name pos:start="135:53" pos:end="135:61">BIOS_SIZE</name><operator pos:start="135:62" pos:end="135:62">)</operator></expr></argument>, <argument pos:start="135:65" pos:end="135:68"><expr pos:start="135:65" pos:end="135:68"><name pos:start="135:65" pos:end="135:68">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:38"><expr pos:start="137:5" pos:end="137:37"><call pos:start="137:5" pos:end="137:37"><name pos:start="137:5" pos:end="137:31">vmstate_register_ram_global</name><argument_list pos:start="137:32" pos:end="137:37">(<argument pos:start="137:33" pos:end="137:36"><expr pos:start="137:33" pos:end="137:36"><name pos:start="137:33" pos:end="137:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="141:34"><if pos:start="139:5" pos:end="141:34">if <condition pos:start="139:8" pos:end="139:26">(<expr pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:17">bios_name</name> <operator pos:start="139:19" pos:end="139:20">==</operator> <name pos:start="139:22" pos:end="139:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:34"><block_content pos:start="141:9" pos:end="141:34">

        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:17">bios_name</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <name pos:start="141:21" pos:end="141:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:62"><expr pos:start="143:5" pos:end="143:61"><name pos:start="143:5" pos:end="143:12">filename</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <call pos:start="143:16" pos:end="143:61"><name pos:start="143:16" pos:end="143:29">qemu_find_file</name><argument_list pos:start="143:30" pos:end="143:61">(<argument pos:start="143:31" pos:end="143:49"><expr pos:start="143:31" pos:end="143:49"><name pos:start="143:31" pos:end="143:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="143:52" pos:end="143:60"><expr pos:start="143:52" pos:end="143:60"><name pos:start="143:52" pos:end="143:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="183:5"><if pos:start="145:5" pos:end="179:5">if <condition pos:start="145:8" pos:end="145:17">(<expr pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">filename</name></expr>)</condition> <block pos:start="145:19" pos:end="179:5">{<block_content pos:start="147:9" pos:end="177:9">

        <expr_stmt pos:start="147:9" pos:end="149:60"><expr pos:start="147:9" pos:end="149:59"><name pos:start="147:9" pos:end="147:17">bios_size</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="149:59"><name pos:start="147:21" pos:end="147:28">load_elf</name><argument_list pos:start="147:29" pos:end="149:59">(<argument pos:start="147:30" pos:end="147:37"><expr pos:start="147:30" pos:end="147:37"><name pos:start="147:30" pos:end="147:37">filename</name></expr></argument>, <argument pos:start="147:40" pos:end="147:43"><expr pos:start="147:40" pos:end="147:43"><name pos:start="147:40" pos:end="147:43">NULL</name></expr></argument>, <argument pos:start="147:46" pos:end="147:49"><expr pos:start="147:46" pos:end="147:49"><name pos:start="147:46" pos:end="147:49">NULL</name></expr></argument>, <argument pos:start="147:52" pos:end="147:55"><expr pos:start="147:52" pos:end="147:55"><name pos:start="147:52" pos:end="147:55">NULL</name></expr></argument>,

                             <argument pos:start="149:30" pos:end="149:33"><expr pos:start="149:30" pos:end="149:33"><name pos:start="149:30" pos:end="149:33">NULL</name></expr></argument>, <argument pos:start="149:36" pos:end="149:39"><expr pos:start="149:36" pos:end="149:39"><name pos:start="149:36" pos:end="149:39">NULL</name></expr></argument>, <argument pos:start="149:42" pos:end="149:42"><expr pos:start="149:42" pos:end="149:42"><literal type="number" pos:start="149:42" pos:end="149:42">1</literal></expr></argument>, <argument pos:start="149:45" pos:end="149:55"><expr pos:start="149:45" pos:end="149:55"><name pos:start="149:45" pos:end="149:55">ELF_MACHINE</name></expr></argument>, <argument pos:start="149:58" pos:end="149:58"><expr pos:start="149:58" pos:end="149:58"><literal type="number" pos:start="149:58" pos:end="149:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="177:9"><if pos:start="151:9" pos:end="177:9">if <condition pos:start="151:12" pos:end="151:26">(<expr pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:21">bios_size</name> <operator pos:start="151:23" pos:end="151:23">&lt;</operator> <literal type="number" pos:start="151:25" pos:end="151:25">0</literal></expr>)</condition> <block pos:start="151:28" pos:end="177:9">{<block_content pos:start="153:13" pos:end="175:13">

            <expr_stmt pos:start="153:13" pos:end="153:49"><expr pos:start="153:13" pos:end="153:48"><name pos:start="153:13" pos:end="153:21">bios_size</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:48"><name pos:start="153:25" pos:end="153:38">get_image_size</name><argument_list pos:start="153:39" pos:end="153:48">(<argument pos:start="153:40" pos:end="153:47"><expr pos:start="153:40" pos:end="153:47"><name pos:start="153:40" pos:end="153:47">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="165:13"><if pos:start="155:13" pos:end="165:13">if <condition pos:start="155:16" pos:end="155:56">(<expr pos:start="155:17" pos:end="155:55"><name pos:start="155:17" pos:end="155:25">bios_size</name> <operator pos:start="155:27" pos:end="155:27">&gt;</operator> <literal type="number" pos:start="155:29" pos:end="155:29">0</literal> <operator pos:start="155:31" pos:end="155:32">&amp;&amp;</operator> <name pos:start="155:34" pos:end="155:42">bios_size</name> <operator pos:start="155:44" pos:end="155:45">&lt;=</operator> <name pos:start="155:47" pos:end="155:55">BIOS_SIZE</name></expr>)</condition> <block pos:start="155:58" pos:end="165:13">{<block_content pos:start="157:17" pos:end="163:80">

                <decl_stmt pos:start="157:17" pos:end="157:33"><decl pos:start="157:17" pos:end="157:32"><type pos:start="157:17" pos:end="157:22"><name pos:start="157:17" pos:end="157:22">hwaddr</name></type> <name pos:start="157:24" pos:end="157:32">bios_addr</name></decl>;</decl_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:57"><expr pos:start="159:17" pos:end="159:56"><name pos:start="159:17" pos:end="159:25">bios_size</name> <operator pos:start="159:27" pos:end="159:27">=</operator> <operator pos:start="159:29" pos:end="159:29">(</operator><name pos:start="159:30" pos:end="159:38">bios_size</name> <operator pos:start="159:40" pos:end="159:40">+</operator> <literal type="number" pos:start="159:42" pos:end="159:46">0xfff</literal><operator pos:start="159:47" pos:end="159:47">)</operator> <operator pos:start="159:49" pos:end="159:49">&amp;</operator> <operator pos:start="159:51" pos:end="159:51">~</operator><literal type="number" pos:start="159:52" pos:end="159:56">0xfff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:51"><expr pos:start="161:17" pos:end="161:50"><name pos:start="161:17" pos:end="161:25">bios_addr</name> <operator pos:start="161:27" pos:end="161:27">=</operator> <operator pos:start="161:29" pos:end="161:29">(</operator><name pos:start="161:30" pos:end="161:37">uint32_t</name><operator pos:start="161:38" pos:end="161:38">)</operator><operator pos:start="161:39" pos:end="161:39">(</operator><operator pos:start="161:40" pos:end="161:40">-</operator><name pos:start="161:41" pos:end="161:49">bios_size</name><operator pos:start="161:50" pos:end="161:50">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:80"><expr pos:start="163:17" pos:end="163:79"><name pos:start="163:17" pos:end="163:25">bios_size</name> <operator pos:start="163:27" pos:end="163:27">=</operator> <call pos:start="163:29" pos:end="163:79"><name pos:start="163:29" pos:end="163:47">load_image_targphys</name><argument_list pos:start="163:48" pos:end="163:79">(<argument pos:start="163:49" pos:end="163:56"><expr pos:start="163:49" pos:end="163:56"><name pos:start="163:49" pos:end="163:56">filename</name></expr></argument>, <argument pos:start="163:59" pos:end="163:67"><expr pos:start="163:59" pos:end="163:67"><name pos:start="163:59" pos:end="163:67">bios_addr</name></expr></argument>, <argument pos:start="163:70" pos:end="163:78"><expr pos:start="163:70" pos:end="163:78"><name pos:start="163:70" pos:end="163:78">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="167:13" pos:end="175:13"><if pos:start="167:13" pos:end="175:13">if <condition pos:start="167:16" pos:end="167:38">(<expr pos:start="167:17" pos:end="167:37"><name pos:start="167:17" pos:end="167:25">bios_size</name> <operator pos:start="167:27" pos:end="167:27">&gt;</operator> <name pos:start="167:29" pos:end="167:37">BIOS_SIZE</name></expr>)</condition> <block pos:start="167:40" pos:end="175:13">{<block_content pos:start="169:17" pos:end="173:24">

                <expr_stmt pos:start="169:17" pos:end="171:46"><expr pos:start="169:17" pos:end="171:45"><call pos:start="169:17" pos:end="171:45"><name pos:start="169:17" pos:end="169:23">fprintf</name><argument_list pos:start="169:24" pos:end="171:45">(<argument pos:start="169:25" pos:end="169:30"><expr pos:start="169:25" pos:end="169:30"><name pos:start="169:25" pos:end="169:30">stderr</name></expr></argument>, <argument pos:start="169:33" pos:end="169:76"><expr pos:start="169:33" pos:end="169:76"><literal type="string" pos:start="169:33" pos:end="169:76">"qemu: PReP bios '%s' is too large (0x%x)\n"</literal></expr></argument>,

                        <argument pos:start="171:25" pos:end="171:33"><expr pos:start="171:25" pos:end="171:33"><name pos:start="171:25" pos:end="171:33">bios_name</name></expr></argument>, <argument pos:start="171:36" pos:end="171:44"><expr pos:start="171:36" pos:end="171:44"><name pos:start="171:36" pos:end="171:44">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:24"><expr pos:start="173:17" pos:end="173:23"><call pos:start="173:17" pos:end="173:23"><name pos:start="173:17" pos:end="173:20">exit</name><argument_list pos:start="173:21" pos:end="173:23">(<argument pos:start="173:22" pos:end="173:22"><expr pos:start="173:22" pos:end="173:22"><literal type="number" pos:start="173:22" pos:end="173:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="183:5">else <block pos:start="179:12" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:23">

        <expr_stmt pos:start="181:9" pos:end="181:23"><expr pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:17">bios_size</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <operator pos:start="181:21" pos:end="181:21">-</operator><literal type="number" pos:start="181:22" pos:end="181:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="185:5" pos:end="193:5"><if pos:start="185:5" pos:end="193:5">if <condition pos:start="185:8" pos:end="185:42">(<expr pos:start="185:9" pos:end="185:41"><name pos:start="185:9" pos:end="185:17">bios_size</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <literal type="number" pos:start="185:21" pos:end="185:21">0</literal> <operator pos:start="185:23" pos:end="185:24">&amp;&amp;</operator> <operator pos:start="185:26" pos:end="185:26">!</operator><call pos:start="185:27" pos:end="185:41"><name pos:start="185:27" pos:end="185:39">qtest_enabled</name><argument_list pos:start="185:40" pos:end="185:41">()</argument_list></call></expr>)</condition> <block pos:start="185:44" pos:end="193:5">{<block_content pos:start="187:9" pos:end="191:16">

        <expr_stmt pos:start="187:9" pos:end="189:27"><expr pos:start="187:9" pos:end="189:26"><call pos:start="187:9" pos:end="189:26"><name pos:start="187:9" pos:end="187:15">fprintf</name><argument_list pos:start="187:16" pos:end="189:26">(<argument pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">stderr</name></expr></argument>, <argument pos:start="187:25" pos:end="187:67"><expr pos:start="187:25" pos:end="187:67"><literal type="string" pos:start="187:25" pos:end="187:67">"qemu: could not load PPC PReP bios '%s'\n"</literal></expr></argument>,

                <argument pos:start="189:17" pos:end="189:25"><expr pos:start="189:17" pos:end="189:25"><name pos:start="189:17" pos:end="189:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:16"><expr pos:start="191:9" pos:end="191:15"><call pos:start="191:9" pos:end="191:15"><name pos:start="191:9" pos:end="191:12">exit</name><argument_list pos:start="191:13" pos:end="191:15">(<argument pos:start="191:14" pos:end="191:14"><expr pos:start="191:14" pos:end="191:14"><literal type="number" pos:start="191:14" pos:end="191:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:17">(<expr pos:start="195:9" pos:end="195:16"><name pos:start="195:9" pos:end="195:16">filename</name></expr>)</condition> <block pos:start="195:19" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:25">

        <expr_stmt pos:start="197:9" pos:end="197:25"><expr pos:start="197:9" pos:end="197:24"><call pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:14">g_free</name><argument_list pos:start="197:15" pos:end="197:24">(<argument pos:start="197:16" pos:end="197:23"><expr pos:start="197:16" pos:end="197:23"><name pos:start="197:16" pos:end="197:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="283:5"><if pos:start="203:5" pos:end="249:5">if <condition pos:start="203:8" pos:end="203:19">(<expr pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:18">linux_boot</name></expr>)</condition> <block pos:start="203:21" pos:end="249:5">{<block_content pos:start="205:9" pos:end="247:30">

        <expr_stmt pos:start="205:9" pos:end="205:39"><expr pos:start="205:9" pos:end="205:38"><name pos:start="205:9" pos:end="205:19">kernel_base</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <name pos:start="205:23" pos:end="205:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="207:9" pos:end="207:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="209:9" pos:end="211:66"><expr pos:start="209:9" pos:end="211:65"><name pos:start="209:9" pos:end="209:19">kernel_size</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <call pos:start="209:23" pos:end="211:65"><name pos:start="209:23" pos:end="209:41">load_image_targphys</name><argument_list pos:start="209:42" pos:end="211:65">(<argument pos:start="209:43" pos:end="209:57"><expr pos:start="209:43" pos:end="209:57"><name pos:start="209:43" pos:end="209:57">kernel_filename</name></expr></argument>, <argument pos:start="209:60" pos:end="209:70"><expr pos:start="209:60" pos:end="209:70"><name pos:start="209:60" pos:end="209:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="211:43" pos:end="211:64"><expr pos:start="211:43" pos:end="211:64"><name pos:start="211:43" pos:end="211:50">ram_size</name> <operator pos:start="211:52" pos:end="211:52">-</operator> <name pos:start="211:54" pos:end="211:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:28">(<expr pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:23">kernel_size</name> <operator pos:start="213:25" pos:end="213:25">&lt;</operator> <literal type="number" pos:start="213:27" pos:end="213:27">0</literal></expr>)</condition> <block pos:start="213:30" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:20">

            <expr_stmt pos:start="215:13" pos:end="215:76"><expr pos:start="215:13" pos:end="215:75"><call pos:start="215:13" pos:end="215:75"><name pos:start="215:13" pos:end="215:20">hw_error</name><argument_list pos:start="215:21" pos:end="215:75">(<argument pos:start="215:22" pos:end="215:57"><expr pos:start="215:22" pos:end="215:57"><literal type="string" pos:start="215:22" pos:end="215:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="215:60" pos:end="215:74"><expr pos:start="215:60" pos:end="215:74"><name pos:start="215:60" pos:end="215:74">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:20"><expr pos:start="217:13" pos:end="217:19"><call pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:16">exit</name><argument_list pos:start="217:17" pos:end="217:19">(<argument pos:start="217:18" pos:end="217:18"><expr pos:start="217:18" pos:end="217:18"><literal type="number" pos:start="217:18" pos:end="217:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="221:9" pos:end="221:25">/* load initrd */</comment>

        <if_stmt pos:start="223:9" pos:end="245:9"><if pos:start="223:9" pos:end="239:9">if <condition pos:start="223:12" pos:end="223:28">(<expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:27">initrd_filename</name></expr>)</condition> <block pos:start="223:30" pos:end="239:9">{<block_content pos:start="225:13" pos:end="237:13">

            <expr_stmt pos:start="225:13" pos:end="225:43"><expr pos:start="225:13" pos:end="225:42"><name pos:start="225:13" pos:end="225:23">initrd_base</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <name pos:start="225:27" pos:end="225:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="229:70"><expr pos:start="227:13" pos:end="229:69"><name pos:start="227:13" pos:end="227:23">initrd_size</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <call pos:start="227:27" pos:end="229:69"><name pos:start="227:27" pos:end="227:45">load_image_targphys</name><argument_list pos:start="227:46" pos:end="229:69">(<argument pos:start="227:47" pos:end="227:61"><expr pos:start="227:47" pos:end="227:61"><name pos:start="227:47" pos:end="227:61">initrd_filename</name></expr></argument>, <argument pos:start="227:64" pos:end="227:74"><expr pos:start="227:64" pos:end="227:74"><name pos:start="227:64" pos:end="227:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="229:47" pos:end="229:68"><expr pos:start="229:47" pos:end="229:68"><name pos:start="229:47" pos:end="229:54">ram_size</name> <operator pos:start="229:56" pos:end="229:56">-</operator> <name pos:start="229:58" pos:end="229:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="237:13"><if pos:start="231:13" pos:end="237:13">if <condition pos:start="231:16" pos:end="231:32">(<expr pos:start="231:17" pos:end="231:31"><name pos:start="231:17" pos:end="231:27">initrd_size</name> <operator pos:start="231:29" pos:end="231:29">&lt;</operator> <literal type="number" pos:start="231:31" pos:end="231:31">0</literal></expr>)</condition> <block pos:start="231:34" pos:end="237:13">{<block_content pos:start="233:17" pos:end="235:43">

                <expr_stmt pos:start="233:17" pos:end="235:43"><expr pos:start="233:17" pos:end="235:42"><call pos:start="233:17" pos:end="235:42"><name pos:start="233:17" pos:end="233:24">hw_error</name><argument_list pos:start="233:25" pos:end="235:42">(<argument pos:start="233:26" pos:end="233:71"><expr pos:start="233:26" pos:end="233:71"><literal type="string" pos:start="233:26" pos:end="233:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                          <argument pos:start="235:27" pos:end="235:41"><expr pos:start="235:27" pos:end="235:41"><name pos:start="235:27" pos:end="235:41">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="239:11" pos:end="245:9">else <block pos:start="239:16" pos:end="245:9">{<block_content pos:start="241:13" pos:end="243:28">

            <expr_stmt pos:start="241:13" pos:end="241:28"><expr pos:start="241:13" pos:end="241:27"><name pos:start="241:13" pos:end="241:23">initrd_base</name> <operator pos:start="241:25" pos:end="241:25">=</operator> <literal type="number" pos:start="241:27" pos:end="241:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:28"><expr pos:start="243:13" pos:end="243:27"><name pos:start="243:13" pos:end="243:23">initrd_size</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <literal type="number" pos:start="243:27" pos:end="243:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:30"><expr pos:start="247:9" pos:end="247:29"><name pos:start="247:9" pos:end="247:23">ppc_boot_device</name> <operator pos:start="247:25" pos:end="247:25">=</operator> <literal type="char" pos:start="247:27" pos:end="247:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="249:7" pos:end="283:5">else <block pos:start="249:12" pos:end="283:5">{<block_content pos:start="251:9" pos:end="281:9">

        <expr_stmt pos:start="251:9" pos:end="251:24"><expr pos:start="251:9" pos:end="251:23"><name pos:start="251:9" pos:end="251:19">kernel_base</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <literal type="number" pos:start="251:23" pos:end="251:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:24"><expr pos:start="253:9" pos:end="253:23"><name pos:start="253:9" pos:end="253:19">kernel_size</name> <operator pos:start="253:21" pos:end="253:21">=</operator> <literal type="number" pos:start="253:23" pos:end="253:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:24"><expr pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:19">initrd_base</name> <operator pos:start="255:21" pos:end="255:21">=</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:24"><expr pos:start="257:9" pos:end="257:23"><name pos:start="257:9" pos:end="257:19">initrd_size</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:31"><expr pos:start="259:9" pos:end="259:30"><name pos:start="259:9" pos:end="259:23">ppc_boot_device</name> <operator pos:start="259:25" pos:end="259:25">=</operator> <literal type="char" pos:start="259:27" pos:end="259:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="261:9" pos:end="261:56">/* For now, OHW cannot boot from the network. */</comment>

        <for pos:start="263:9" pos:end="273:9">for <control pos:start="263:13" pos:end="263:48">(<init pos:start="263:14" pos:end="263:19"><expr pos:start="263:14" pos:end="263:18"><name pos:start="263:14" pos:end="263:14">i</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <literal type="number" pos:start="263:18" pos:end="263:18">0</literal></expr>;</init> <condition pos:start="263:21" pos:end="263:43"><expr pos:start="263:21" pos:end="263:42"><name pos:start="263:21" pos:end="263:34"><name pos:start="263:21" pos:end="263:31">boot_device</name><index pos:start="263:32" pos:end="263:34">[<expr pos:start="263:33" pos:end="263:33"><name pos:start="263:33" pos:end="263:33">i</name></expr>]</index></name> <operator pos:start="263:36" pos:end="263:37">!=</operator> <literal type="char" pos:start="263:39" pos:end="263:42">'\0'</literal></expr>;</condition> <incr pos:start="263:45" pos:end="263:47"><expr pos:start="263:45" pos:end="263:47"><name pos:start="263:45" pos:end="263:45">i</name><operator pos:start="263:46" pos:end="263:47">++</operator></expr></incr>)</control> <block pos:start="263:50" pos:end="273:9">{<block_content pos:start="265:13" pos:end="271:13">

            <if_stmt pos:start="265:13" pos:end="271:13"><if pos:start="265:13" pos:end="271:13">if <condition pos:start="265:16" pos:end="265:63">(<expr pos:start="265:17" pos:end="265:62"><name pos:start="265:17" pos:end="265:30"><name pos:start="265:17" pos:end="265:27">boot_device</name><index pos:start="265:28" pos:end="265:30">[<expr pos:start="265:29" pos:end="265:29"><name pos:start="265:29" pos:end="265:29">i</name></expr>]</index></name> <operator pos:start="265:32" pos:end="265:33">&gt;=</operator> <literal type="char" pos:start="265:35" pos:end="265:37">'a'</literal> <operator pos:start="265:39" pos:end="265:40">&amp;&amp;</operator> <name pos:start="265:42" pos:end="265:55"><name pos:start="265:42" pos:end="265:52">boot_device</name><index pos:start="265:53" pos:end="265:55">[<expr pos:start="265:54" pos:end="265:54"><name pos:start="265:54" pos:end="265:54">i</name></expr>]</index></name> <operator pos:start="265:57" pos:end="265:58">&lt;=</operator> <literal type="char" pos:start="265:60" pos:end="265:62">'f'</literal></expr>)</condition> <block pos:start="265:65" pos:end="271:13">{<block_content pos:start="267:17" pos:end="269:22">

                <expr_stmt pos:start="267:17" pos:end="267:49"><expr pos:start="267:17" pos:end="267:48"><name pos:start="267:17" pos:end="267:31">ppc_boot_device</name> <operator pos:start="267:33" pos:end="267:33">=</operator> <name pos:start="267:35" pos:end="267:48"><name pos:start="267:35" pos:end="267:45">boot_device</name><index pos:start="267:46" pos:end="267:48">[<expr pos:start="267:47" pos:end="267:47"><name pos:start="267:47" pos:end="267:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="269:17" pos:end="269:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="275:9" pos:end="281:9"><if pos:start="275:9" pos:end="281:9">if <condition pos:start="275:12" pos:end="275:36">(<expr pos:start="275:13" pos:end="275:35"><name pos:start="275:13" pos:end="275:27">ppc_boot_device</name> <operator pos:start="275:29" pos:end="275:30">==</operator> <literal type="char" pos:start="275:32" pos:end="275:35">'\0'</literal></expr>)</condition> <block pos:start="275:38" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:20">

            <expr_stmt pos:start="277:13" pos:end="277:72"><expr pos:start="277:13" pos:end="277:71"><call pos:start="277:13" pos:end="277:71"><name pos:start="277:13" pos:end="277:19">fprintf</name><argument_list pos:start="277:20" pos:end="277:71">(<argument pos:start="277:21" pos:end="277:26"><expr pos:start="277:21" pos:end="277:26"><name pos:start="277:21" pos:end="277:26">stderr</name></expr></argument>, <argument pos:start="277:29" pos:end="277:70"><expr pos:start="277:29" pos:end="277:70"><literal type="string" pos:start="277:29" pos:end="277:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:20"><expr pos:start="279:13" pos:end="279:19"><call pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:16">exit</name><argument_list pos:start="279:17" pos:end="279:19">(<argument pos:start="279:18" pos:end="279:18"><expr pos:start="279:18" pos:end="279:18"><literal type="number" pos:start="279:18" pos:end="279:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="287:5" pos:end="291:5"><if pos:start="287:5" pos:end="291:5">if <condition pos:start="287:8" pos:end="287:46">(<expr pos:start="287:9" pos:end="287:45"><call pos:start="287:9" pos:end="287:22"><name pos:start="287:9" pos:end="287:17">PPC_INPUT</name><argument_list pos:start="287:18" pos:end="287:22">(<argument pos:start="287:19" pos:end="287:21"><expr pos:start="287:19" pos:end="287:21"><name pos:start="287:19" pos:end="287:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="287:24" pos:end="287:25">!=</operator> <name pos:start="287:27" pos:end="287:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="287:48" pos:end="291:5">{<block_content pos:start="289:9" pos:end="289:64">

        <expr_stmt pos:start="289:9" pos:end="289:64"><expr pos:start="289:9" pos:end="289:63"><call pos:start="289:9" pos:end="289:63"><name pos:start="289:9" pos:end="289:16">hw_error</name><argument_list pos:start="289:17" pos:end="289:63">(<argument pos:start="289:18" pos:end="289:62"><expr pos:start="289:18" pos:end="289:62"><literal type="string" pos:start="289:18" pos:end="289:62">"Only 6xx bus is supported on PREP machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:45"><expr pos:start="295:5" pos:end="295:44"><name pos:start="295:5" pos:end="295:7">dev</name> <operator pos:start="295:9" pos:end="295:9">=</operator> <call pos:start="295:11" pos:end="295:44"><name pos:start="295:11" pos:end="295:21">qdev_create</name><argument_list pos:start="295:22" pos:end="295:44">(<argument pos:start="295:23" pos:end="295:26"><expr pos:start="295:23" pos:end="295:26"><name pos:start="295:23" pos:end="295:26">NULL</name></expr></argument>, <argument pos:start="295:29" pos:end="295:43"><expr pos:start="295:29" pos:end="295:43"><literal type="string" pos:start="295:29" pos:end="295:43">"raven-pcihost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:35"><expr pos:start="297:5" pos:end="297:34"><name pos:start="297:5" pos:end="297:11">pcihost</name> <operator pos:start="297:13" pos:end="297:13">=</operator> <call pos:start="297:15" pos:end="297:34"><name pos:start="297:15" pos:end="297:29">PCI_HOST_BRIDGE</name><argument_list pos:start="297:30" pos:end="297:34">(<argument pos:start="297:31" pos:end="297:33"><expr pos:start="297:31" pos:end="297:33"><name pos:start="297:31" pos:end="297:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:78"><expr pos:start="299:5" pos:end="299:77"><call pos:start="299:5" pos:end="299:77"><name pos:start="299:5" pos:end="299:29">object_property_add_child</name><argument_list pos:start="299:30" pos:end="299:77">(<argument pos:start="299:31" pos:end="299:48"><expr pos:start="299:31" pos:end="299:48"><call pos:start="299:31" pos:end="299:48"><name pos:start="299:31" pos:end="299:46">qdev_get_machine</name><argument_list pos:start="299:47" pos:end="299:48">()</argument_list></call></expr></argument>, <argument pos:start="299:51" pos:end="299:57"><expr pos:start="299:51" pos:end="299:57"><literal type="string" pos:start="299:51" pos:end="299:57">"raven"</literal></expr></argument>, <argument pos:start="299:60" pos:end="299:70"><expr pos:start="299:60" pos:end="299:70"><call pos:start="299:60" pos:end="299:70"><name pos:start="299:60" pos:end="299:65">OBJECT</name><argument_list pos:start="299:66" pos:end="299:70">(<argument pos:start="299:67" pos:end="299:69"><expr pos:start="299:67" pos:end="299:69"><name pos:start="299:67" pos:end="299:69">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:73" pos:end="299:76"><expr pos:start="299:73" pos:end="299:76"><name pos:start="299:73" pos:end="299:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:26"><expr pos:start="301:5" pos:end="301:25"><call pos:start="301:5" pos:end="301:25"><name pos:start="301:5" pos:end="301:20">qdev_init_nofail</name><argument_list pos:start="301:21" pos:end="301:25">(<argument pos:start="301:22" pos:end="301:24"><expr pos:start="301:22" pos:end="301:24"><name pos:start="301:22" pos:end="301:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:57"><expr pos:start="303:5" pos:end="303:56"><name pos:start="303:5" pos:end="303:11">pci_bus</name> <operator pos:start="303:13" pos:end="303:13">=</operator> <operator pos:start="303:15" pos:end="303:15">(</operator><name pos:start="303:16" pos:end="303:21">PCIBus</name> <operator pos:start="303:23" pos:end="303:23">*</operator><operator pos:start="303:24" pos:end="303:24">)</operator><call pos:start="303:25" pos:end="303:56"><name pos:start="303:25" pos:end="303:42">qdev_get_child_bus</name><argument_list pos:start="303:43" pos:end="303:56">(<argument pos:start="303:44" pos:end="303:46"><expr pos:start="303:44" pos:end="303:46"><name pos:start="303:44" pos:end="303:46">dev</name></expr></argument>, <argument pos:start="303:49" pos:end="303:55"><expr pos:start="303:49" pos:end="303:55"><literal type="string" pos:start="303:49" pos:end="303:55">"pci.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="305:5" pos:end="311:5"><if pos:start="305:5" pos:end="311:5">if <condition pos:start="305:8" pos:end="305:24">(<expr pos:start="305:9" pos:end="305:23"><name pos:start="305:9" pos:end="305:15">pci_bus</name> <operator pos:start="305:17" pos:end="305:18">==</operator> <name pos:start="305:20" pos:end="305:23">NULL</name></expr>)</condition> <block pos:start="305:26" pos:end="311:5">{<block_content pos:start="307:9" pos:end="309:16">

        <expr_stmt pos:start="307:9" pos:end="307:66"><expr pos:start="307:9" pos:end="307:65"><call pos:start="307:9" pos:end="307:65"><name pos:start="307:9" pos:end="307:15">fprintf</name><argument_list pos:start="307:16" pos:end="307:65">(<argument pos:start="307:17" pos:end="307:22"><expr pos:start="307:17" pos:end="307:22"><name pos:start="307:17" pos:end="307:22">stderr</name></expr></argument>, <argument pos:start="307:25" pos:end="307:64"><expr pos:start="307:25" pos:end="307:64"><literal type="string" pos:start="307:25" pos:end="307:64">"Couldn't create PCI host controller.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:16"><expr pos:start="309:9" pos:end="309:15"><call pos:start="309:9" pos:end="309:15"><name pos:start="309:9" pos:end="309:12">exit</name><argument_list pos:start="309:13" pos:end="309:15">(<argument pos:start="309:14" pos:end="309:14"><expr pos:start="309:14" pos:end="309:14"><literal type="number" pos:start="309:14" pos:end="309:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="315:5" pos:end="315:27">/* PCI -&gt; ISA bridge */</comment>

    <expr_stmt pos:start="317:5" pos:end="317:64"><expr pos:start="317:5" pos:end="317:63"><name pos:start="317:5" pos:end="317:7">pci</name> <operator pos:start="317:9" pos:end="317:9">=</operator> <call pos:start="317:11" pos:end="317:63"><name pos:start="317:11" pos:end="317:27">pci_create_simple</name><argument_list pos:start="317:28" pos:end="317:63">(<argument pos:start="317:29" pos:end="317:35"><expr pos:start="317:29" pos:end="317:35"><name pos:start="317:29" pos:end="317:35">pci_bus</name></expr></argument>, <argument pos:start="317:38" pos:end="317:52"><expr pos:start="317:38" pos:end="317:52"><call pos:start="317:38" pos:end="317:52"><name pos:start="317:38" pos:end="317:46">PCI_DEVFN</name><argument_list pos:start="317:47" pos:end="317:52">(<argument pos:start="317:48" pos:end="317:48"><expr pos:start="317:48" pos:end="317:48"><literal type="number" pos:start="317:48" pos:end="317:48">1</literal></expr></argument>, <argument pos:start="317:51" pos:end="317:51"><expr pos:start="317:51" pos:end="317:51"><literal type="number" pos:start="317:51" pos:end="317:51">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="317:55" pos:end="317:62"><expr pos:start="317:55" pos:end="317:62"><literal type="string" pos:start="317:55" pos:end="317:62">"i82378"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:65"><expr pos:start="319:5" pos:end="319:64"><name pos:start="319:5" pos:end="319:16">cpu_exit_irq</name> <operator pos:start="319:18" pos:end="319:18">=</operator> <call pos:start="319:20" pos:end="319:64"><name pos:start="319:20" pos:end="319:37">qemu_allocate_irqs</name><argument_list pos:start="319:38" pos:end="319:64">(<argument pos:start="319:39" pos:end="319:54"><expr pos:start="319:39" pos:end="319:54"><name pos:start="319:39" pos:end="319:54">cpu_request_exit</name></expr></argument>, <argument pos:start="319:57" pos:end="319:60"><expr pos:start="319:57" pos:end="319:60"><name pos:start="319:57" pos:end="319:60">NULL</name></expr></argument>, <argument pos:start="319:63" pos:end="319:63"><expr pos:start="319:63" pos:end="319:63"><literal type="number" pos:start="319:63" pos:end="319:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:33"><expr pos:start="321:5" pos:end="321:32"><name pos:start="321:5" pos:end="321:7">cpu</name> <operator pos:start="321:9" pos:end="321:9">=</operator> <call pos:start="321:11" pos:end="321:32"><name pos:start="321:11" pos:end="321:21">POWERPC_CPU</name><argument_list pos:start="321:22" pos:end="321:32">(<argument pos:start="321:23" pos:end="321:31"><expr pos:start="321:23" pos:end="321:31"><name pos:start="321:23" pos:end="321:31">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="325:65"><expr pos:start="323:5" pos:end="325:64"><call pos:start="323:5" pos:end="325:64"><name pos:start="323:5" pos:end="323:25">qdev_connect_gpio_out</name><argument_list pos:start="323:26" pos:end="325:64">(<argument pos:start="323:27" pos:end="323:36"><expr pos:start="323:27" pos:end="323:36"><operator pos:start="323:27" pos:end="323:27">&amp;</operator><name pos:start="323:28" pos:end="323:36"><name pos:start="323:28" pos:end="323:30">pci</name><operator pos:start="323:31" pos:end="323:32">-&gt;</operator><name pos:start="323:33" pos:end="323:36">qdev</name></name></expr></argument>, <argument pos:start="323:39" pos:end="323:39"><expr pos:start="323:39" pos:end="323:39"><literal type="number" pos:start="323:39" pos:end="323:39">0</literal></expr></argument>,

                          <argument pos:start="325:27" pos:end="325:63"><expr pos:start="325:27" pos:end="325:63"><name pos:start="325:27" pos:end="325:63"><name pos:start="325:27" pos:end="325:29">cpu</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:34">env</name><operator pos:start="325:35" pos:end="325:35">.</operator><name pos:start="325:36" pos:end="325:45">irq_inputs</name><index pos:start="325:46" pos:end="325:63">[<expr pos:start="325:47" pos:end="325:62"><name pos:start="325:47" pos:end="325:62">PPC6xx_INPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:56"><expr pos:start="327:5" pos:end="327:55"><call pos:start="327:5" pos:end="327:55"><name pos:start="327:5" pos:end="327:25">qdev_connect_gpio_out</name><argument_list pos:start="327:26" pos:end="327:55">(<argument pos:start="327:27" pos:end="327:36"><expr pos:start="327:27" pos:end="327:36"><operator pos:start="327:27" pos:end="327:27">&amp;</operator><name pos:start="327:28" pos:end="327:36"><name pos:start="327:28" pos:end="327:30">pci</name><operator pos:start="327:31" pos:end="327:32">-&gt;</operator><name pos:start="327:33" pos:end="327:36">qdev</name></name></expr></argument>, <argument pos:start="327:39" pos:end="327:39"><expr pos:start="327:39" pos:end="327:39"><literal type="number" pos:start="327:39" pos:end="327:39">1</literal></expr></argument>, <argument pos:start="327:42" pos:end="327:54"><expr pos:start="327:42" pos:end="327:54"><operator pos:start="327:42" pos:end="327:42">*</operator><name pos:start="327:43" pos:end="327:54">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:77"><expr pos:start="329:5" pos:end="329:76"><call pos:start="329:5" pos:end="329:76"><name pos:start="329:5" pos:end="329:22">sysbus_connect_irq</name><argument_list pos:start="329:23" pos:end="329:76">(<argument pos:start="329:24" pos:end="329:39"><expr pos:start="329:24" pos:end="329:39"><operator pos:start="329:24" pos:end="329:24">&amp;</operator><name pos:start="329:25" pos:end="329:39"><name pos:start="329:25" pos:end="329:31">pcihost</name><operator pos:start="329:32" pos:end="329:33">-&gt;</operator><name pos:start="329:34" pos:end="329:39">busdev</name></name></expr></argument>, <argument pos:start="329:42" pos:end="329:42"><expr pos:start="329:42" pos:end="329:42"><literal type="number" pos:start="329:42" pos:end="329:42">0</literal></expr></argument>, <argument pos:start="329:45" pos:end="329:75"><expr pos:start="329:45" pos:end="329:75"><call pos:start="329:45" pos:end="329:75"><name pos:start="329:45" pos:end="329:60">qdev_get_gpio_in</name><argument_list pos:start="329:61" pos:end="329:75">(<argument pos:start="329:62" pos:end="329:71"><expr pos:start="329:62" pos:end="329:71"><operator pos:start="329:62" pos:end="329:62">&amp;</operator><name pos:start="329:63" pos:end="329:71"><name pos:start="329:63" pos:end="329:65">pci</name><operator pos:start="329:66" pos:end="329:67">-&gt;</operator><name pos:start="329:68" pos:end="329:71">qdev</name></name></expr></argument>, <argument pos:start="329:74" pos:end="329:74"><expr pos:start="329:74" pos:end="329:74"><literal type="number" pos:start="329:74" pos:end="329:74">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:78"><expr pos:start="331:5" pos:end="331:77"><call pos:start="331:5" pos:end="331:77"><name pos:start="331:5" pos:end="331:22">sysbus_connect_irq</name><argument_list pos:start="331:23" pos:end="331:77">(<argument pos:start="331:24" pos:end="331:39"><expr pos:start="331:24" pos:end="331:39"><operator pos:start="331:24" pos:end="331:24">&amp;</operator><name pos:start="331:25" pos:end="331:39"><name pos:start="331:25" pos:end="331:31">pcihost</name><operator pos:start="331:32" pos:end="331:33">-&gt;</operator><name pos:start="331:34" pos:end="331:39">busdev</name></name></expr></argument>, <argument pos:start="331:42" pos:end="331:42"><expr pos:start="331:42" pos:end="331:42"><literal type="number" pos:start="331:42" pos:end="331:42">1</literal></expr></argument>, <argument pos:start="331:45" pos:end="331:76"><expr pos:start="331:45" pos:end="331:76"><call pos:start="331:45" pos:end="331:76"><name pos:start="331:45" pos:end="331:60">qdev_get_gpio_in</name><argument_list pos:start="331:61" pos:end="331:76">(<argument pos:start="331:62" pos:end="331:71"><expr pos:start="331:62" pos:end="331:71"><operator pos:start="331:62" pos:end="331:62">&amp;</operator><name pos:start="331:63" pos:end="331:71"><name pos:start="331:63" pos:end="331:65">pci</name><operator pos:start="331:66" pos:end="331:67">-&gt;</operator><name pos:start="331:68" pos:end="331:71">qdev</name></name></expr></argument>, <argument pos:start="331:74" pos:end="331:75"><expr pos:start="331:74" pos:end="331:75"><literal type="number" pos:start="331:74" pos:end="331:75">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:77"><expr pos:start="333:5" pos:end="333:76"><call pos:start="333:5" pos:end="333:76"><name pos:start="333:5" pos:end="333:22">sysbus_connect_irq</name><argument_list pos:start="333:23" pos:end="333:76">(<argument pos:start="333:24" pos:end="333:39"><expr pos:start="333:24" pos:end="333:39"><operator pos:start="333:24" pos:end="333:24">&amp;</operator><name pos:start="333:25" pos:end="333:39"><name pos:start="333:25" pos:end="333:31">pcihost</name><operator pos:start="333:32" pos:end="333:33">-&gt;</operator><name pos:start="333:34" pos:end="333:39">busdev</name></name></expr></argument>, <argument pos:start="333:42" pos:end="333:42"><expr pos:start="333:42" pos:end="333:42"><literal type="number" pos:start="333:42" pos:end="333:42">2</literal></expr></argument>, <argument pos:start="333:45" pos:end="333:75"><expr pos:start="333:45" pos:end="333:75"><call pos:start="333:45" pos:end="333:75"><name pos:start="333:45" pos:end="333:60">qdev_get_gpio_in</name><argument_list pos:start="333:61" pos:end="333:75">(<argument pos:start="333:62" pos:end="333:71"><expr pos:start="333:62" pos:end="333:71"><operator pos:start="333:62" pos:end="333:62">&amp;</operator><name pos:start="333:63" pos:end="333:71"><name pos:start="333:63" pos:end="333:65">pci</name><operator pos:start="333:66" pos:end="333:67">-&gt;</operator><name pos:start="333:68" pos:end="333:71">qdev</name></name></expr></argument>, <argument pos:start="333:74" pos:end="333:74"><expr pos:start="333:74" pos:end="333:74"><literal type="number" pos:start="333:74" pos:end="333:74">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:78"><expr pos:start="335:5" pos:end="335:77"><call pos:start="335:5" pos:end="335:77"><name pos:start="335:5" pos:end="335:22">sysbus_connect_irq</name><argument_list pos:start="335:23" pos:end="335:77">(<argument pos:start="335:24" pos:end="335:39"><expr pos:start="335:24" pos:end="335:39"><operator pos:start="335:24" pos:end="335:24">&amp;</operator><name pos:start="335:25" pos:end="335:39"><name pos:start="335:25" pos:end="335:31">pcihost</name><operator pos:start="335:32" pos:end="335:33">-&gt;</operator><name pos:start="335:34" pos:end="335:39">busdev</name></name></expr></argument>, <argument pos:start="335:42" pos:end="335:42"><expr pos:start="335:42" pos:end="335:42"><literal type="number" pos:start="335:42" pos:end="335:42">3</literal></expr></argument>, <argument pos:start="335:45" pos:end="335:76"><expr pos:start="335:45" pos:end="335:76"><call pos:start="335:45" pos:end="335:76"><name pos:start="335:45" pos:end="335:60">qdev_get_gpio_in</name><argument_list pos:start="335:61" pos:end="335:76">(<argument pos:start="335:62" pos:end="335:71"><expr pos:start="335:62" pos:end="335:71"><operator pos:start="335:62" pos:end="335:62">&amp;</operator><name pos:start="335:63" pos:end="335:71"><name pos:start="335:63" pos:end="335:65">pci</name><operator pos:start="335:66" pos:end="335:67">-&gt;</operator><name pos:start="335:68" pos:end="335:71">qdev</name></name></expr></argument>, <argument pos:start="335:74" pos:end="335:75"><expr pos:start="335:74" pos:end="335:75"><literal type="number" pos:start="335:74" pos:end="335:75">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:64"><expr pos:start="337:5" pos:end="337:63"><name pos:start="337:5" pos:end="337:11">isa_bus</name> <operator pos:start="337:13" pos:end="337:13">=</operator> <call pos:start="337:15" pos:end="337:63"><name pos:start="337:15" pos:end="337:21">ISA_BUS</name><argument_list pos:start="337:22" pos:end="337:63">(<argument pos:start="337:23" pos:end="337:62"><expr pos:start="337:23" pos:end="337:62"><call pos:start="337:23" pos:end="337:62"><name pos:start="337:23" pos:end="337:40">qdev_get_child_bus</name><argument_list pos:start="337:41" pos:end="337:62">(<argument pos:start="337:42" pos:end="337:52"><expr pos:start="337:42" pos:end="337:52"><call pos:start="337:42" pos:end="337:52"><name pos:start="337:42" pos:end="337:47">DEVICE</name><argument_list pos:start="337:48" pos:end="337:52">(<argument pos:start="337:49" pos:end="337:51"><expr pos:start="337:49" pos:end="337:51"><name pos:start="337:49" pos:end="337:51">pci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:55" pos:end="337:61"><expr pos:start="337:55" pos:end="337:61"><literal type="string" pos:start="337:55" pos:end="337:61">"isa.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="341:5" pos:end="341:45">/* Super I/O (parallel + serial ports) */</comment>

    <expr_stmt pos:start="343:5" pos:end="343:44"><expr pos:start="343:5" pos:end="343:43"><name pos:start="343:5" pos:end="343:7">isa</name> <operator pos:start="343:9" pos:end="343:9">=</operator> <call pos:start="343:11" pos:end="343:43"><name pos:start="343:11" pos:end="343:20">isa_create</name><argument_list pos:start="343:21" pos:end="343:43">(<argument pos:start="343:22" pos:end="343:28"><expr pos:start="343:22" pos:end="343:28"><name pos:start="343:22" pos:end="343:28">isa_bus</name></expr></argument>, <argument pos:start="343:31" pos:end="343:42"><expr pos:start="343:31" pos:end="343:42"><name pos:start="343:31" pos:end="343:42">TYPE_PC87312</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:22"><expr pos:start="345:5" pos:end="345:21"><name pos:start="345:5" pos:end="345:7">dev</name> <operator pos:start="345:9" pos:end="345:9">=</operator> <call pos:start="345:11" pos:end="345:21"><name pos:start="345:11" pos:end="345:16">DEVICE</name><argument_list pos:start="345:17" pos:end="345:21">(<argument pos:start="345:18" pos:end="345:20"><expr pos:start="345:18" pos:end="345:20"><name pos:start="345:18" pos:end="345:20">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:43"><expr pos:start="347:5" pos:end="347:42"><call pos:start="347:5" pos:end="347:42"><name pos:start="347:5" pos:end="347:23">qdev_prop_set_uint8</name><argument_list pos:start="347:24" pos:end="347:42">(<argument pos:start="347:25" pos:end="347:27"><expr pos:start="347:25" pos:end="347:27"><name pos:start="347:25" pos:end="347:27">dev</name></expr></argument>, <argument pos:start="347:30" pos:end="347:37"><expr pos:start="347:30" pos:end="347:37"><literal type="string" pos:start="347:30" pos:end="347:37">"config"</literal></expr></argument>, <argument pos:start="347:40" pos:end="347:41"><expr pos:start="347:40" pos:end="347:41"><literal type="number" pos:start="347:40" pos:end="347:41">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="347:45" pos:end="347:71">/* fdc, ser0, ser1, par0 */</comment>

    <expr_stmt pos:start="349:5" pos:end="349:26"><expr pos:start="349:5" pos:end="349:25"><call pos:start="349:5" pos:end="349:25"><name pos:start="349:5" pos:end="349:20">qdev_init_nofail</name><argument_list pos:start="349:21" pos:end="349:25">(<argument pos:start="349:22" pos:end="349:24"><expr pos:start="349:22" pos:end="349:24"><name pos:start="349:22" pos:end="349:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="353:5" pos:end="353:71">/* Register 8 MB of ISA IO space (needed for non-contiguous map) */</comment>

    <expr_stmt pos:start="355:5" pos:end="357:48"><expr pos:start="355:5" pos:end="357:47"><call pos:start="355:5" pos:end="357:47"><name pos:start="355:5" pos:end="355:25">memory_region_init_io</name><argument_list pos:start="355:26" pos:end="357:47">(<argument pos:start="355:27" pos:end="355:39"><expr pos:start="355:27" pos:end="355:39"><name pos:start="355:27" pos:end="355:39">PPC_io_memory</name></expr></argument>, <argument pos:start="355:42" pos:end="355:45"><expr pos:start="355:42" pos:end="355:45"><name pos:start="355:42" pos:end="355:45">NULL</name></expr></argument>, <argument pos:start="355:48" pos:end="355:63"><expr pos:start="355:48" pos:end="355:63"><operator pos:start="355:48" pos:end="355:48">&amp;</operator><name pos:start="355:49" pos:end="355:63">PPC_prep_io_ops</name></expr></argument>, <argument pos:start="355:66" pos:end="355:72"><expr pos:start="355:66" pos:end="355:72"><name pos:start="355:66" pos:end="355:72">sysctrl</name></expr></argument>,

                          <argument pos:start="357:27" pos:end="357:34"><expr pos:start="357:27" pos:end="357:34"><literal type="string" pos:start="357:27" pos:end="357:34">"ppc-io"</literal></expr></argument>, <argument pos:start="357:37" pos:end="357:46"><expr pos:start="357:37" pos:end="357:46"><literal type="number" pos:start="357:37" pos:end="357:46">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:67"><expr pos:start="359:5" pos:end="359:66"><call pos:start="359:5" pos:end="359:66"><name pos:start="359:5" pos:end="359:31">memory_region_add_subregion</name><argument_list pos:start="359:32" pos:end="359:66">(<argument pos:start="359:33" pos:end="359:38"><expr pos:start="359:33" pos:end="359:38"><name pos:start="359:33" pos:end="359:38">sysmem</name></expr></argument>, <argument pos:start="359:41" pos:end="359:50"><expr pos:start="359:41" pos:end="359:50"><literal type="number" pos:start="359:41" pos:end="359:50">0x80000000</literal></expr></argument>, <argument pos:start="359:53" pos:end="359:65"><expr pos:start="359:53" pos:end="359:65"><name pos:start="359:53" pos:end="359:65">PPC_io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="363:5" pos:end="363:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="365:5" pos:end="365:26"><expr pos:start="365:5" pos:end="365:25"><call pos:start="365:5" pos:end="365:25"><name pos:start="365:5" pos:end="365:16">pci_vga_init</name><argument_list pos:start="365:17" pos:end="365:25">(<argument pos:start="365:18" pos:end="365:24"><expr pos:start="365:18" pos:end="365:24"><name pos:start="365:18" pos:end="365:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:23"><expr pos:start="369:5" pos:end="369:22"><name pos:start="369:5" pos:end="369:12">nb_nics1</name> <operator pos:start="369:14" pos:end="369:14">=</operator> <name pos:start="369:16" pos:end="369:22">nb_nics</name></expr>;</expr_stmt>

    <if_stmt pos:start="371:5" pos:end="373:33"><if pos:start="371:5" pos:end="373:33">if <condition pos:start="371:8" pos:end="371:33">(<expr pos:start="371:9" pos:end="371:32"><name pos:start="371:9" pos:end="371:16">nb_nics1</name> <operator pos:start="371:18" pos:end="371:18">&gt;</operator> <name pos:start="371:20" pos:end="371:32">NE2000_NB_MAX</name></expr>)</condition><block type="pseudo" pos:start="373:9" pos:end="373:33"><block_content pos:start="373:9" pos:end="373:33">

        <expr_stmt pos:start="373:9" pos:end="373:33"><expr pos:start="373:9" pos:end="373:32"><name pos:start="373:9" pos:end="373:16">nb_nics1</name> <operator pos:start="373:18" pos:end="373:18">=</operator> <name pos:start="373:20" pos:end="373:32">NE2000_NB_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="375:5" pos:end="395:5">for<control pos:start="375:8" pos:end="375:33">(<init pos:start="375:9" pos:end="375:14"><expr pos:start="375:9" pos:end="375:13"><name pos:start="375:9" pos:end="375:9">i</name> <operator pos:start="375:11" pos:end="375:11">=</operator> <literal type="number" pos:start="375:13" pos:end="375:13">0</literal></expr>;</init> <condition pos:start="375:16" pos:end="375:28"><expr pos:start="375:16" pos:end="375:27"><name pos:start="375:16" pos:end="375:16">i</name> <operator pos:start="375:18" pos:end="375:18">&lt;</operator> <name pos:start="375:20" pos:end="375:27">nb_nics1</name></expr>;</condition> <incr pos:start="375:30" pos:end="375:32"><expr pos:start="375:30" pos:end="375:32"><name pos:start="375:30" pos:end="375:30">i</name><operator pos:start="375:31" pos:end="375:32">++</operator></expr></incr>)</control> <block pos:start="375:35" pos:end="395:5">{<block_content pos:start="377:9" pos:end="393:9">

        <if_stmt pos:start="377:9" pos:end="381:9"><if pos:start="377:9" pos:end="381:9">if <condition pos:start="377:12" pos:end="377:38">(<expr pos:start="377:13" pos:end="377:37"><name pos:start="377:13" pos:end="377:23"><name pos:start="377:13" pos:end="377:20">nd_table</name><index pos:start="377:21" pos:end="377:23">[<expr pos:start="377:22" pos:end="377:22"><name pos:start="377:22" pos:end="377:22">i</name></expr>]</index></name><operator pos:start="377:24" pos:end="377:24">.</operator><name pos:start="377:25" pos:end="377:29">model</name> <operator pos:start="377:31" pos:end="377:32">==</operator> <name pos:start="377:34" pos:end="377:37">NULL</name></expr>)</condition> <block pos:start="377:40" pos:end="381:9">{<block_content pos:start="379:13" pos:end="379:53">

	    <expr_stmt pos:start="379:13" pos:end="379:53"><expr pos:start="379:13" pos:end="379:52"><name pos:start="379:13" pos:end="379:23"><name pos:start="379:13" pos:end="379:20">nd_table</name><index pos:start="379:21" pos:end="379:23">[<expr pos:start="379:22" pos:end="379:22"><name pos:start="379:22" pos:end="379:22">i</name></expr>]</index></name><operator pos:start="379:24" pos:end="379:24">.</operator><name pos:start="379:25" pos:end="379:29">model</name> <operator pos:start="379:31" pos:end="379:31">=</operator> <call pos:start="379:33" pos:end="379:52"><name pos:start="379:33" pos:end="379:40">g_strdup</name><argument_list pos:start="379:41" pos:end="379:52">(<argument pos:start="379:42" pos:end="379:51"><expr pos:start="379:42" pos:end="379:51"><literal type="string" pos:start="379:42" pos:end="379:51">"ne2k_isa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="383:9" pos:end="393:9"><if pos:start="383:9" pos:end="389:9">if <condition pos:start="383:12" pos:end="383:55">(<expr pos:start="383:13" pos:end="383:54"><call pos:start="383:13" pos:end="383:49"><name pos:start="383:13" pos:end="383:18">strcmp</name><argument_list pos:start="383:19" pos:end="383:49">(<argument pos:start="383:20" pos:end="383:36"><expr pos:start="383:20" pos:end="383:36"><name pos:start="383:20" pos:end="383:30"><name pos:start="383:20" pos:end="383:27">nd_table</name><index pos:start="383:28" pos:end="383:30">[<expr pos:start="383:29" pos:end="383:29"><name pos:start="383:29" pos:end="383:29">i</name></expr>]</index></name><operator pos:start="383:31" pos:end="383:31">.</operator><name pos:start="383:32" pos:end="383:36">model</name></expr></argument>, <argument pos:start="383:39" pos:end="383:48"><expr pos:start="383:39" pos:end="383:48"><literal type="string" pos:start="383:39" pos:end="383:48">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="383:51" pos:end="383:52">==</operator> <literal type="number" pos:start="383:54" pos:end="383:54">0</literal></expr>)</condition> <block pos:start="383:57" pos:end="389:9">{<block_content pos:start="385:13" pos:end="387:42">

            <expr_stmt pos:start="385:13" pos:end="387:42"><expr pos:start="385:13" pos:end="387:41"><call pos:start="385:13" pos:end="387:41"><name pos:start="385:13" pos:end="385:27">isa_ne2000_init</name><argument_list pos:start="385:28" pos:end="387:41">(<argument pos:start="385:29" pos:end="385:35"><expr pos:start="385:29" pos:end="385:35"><name pos:start="385:29" pos:end="385:35">isa_bus</name></expr></argument>, <argument pos:start="385:38" pos:end="385:49"><expr pos:start="385:38" pos:end="385:49"><name pos:start="385:38" pos:end="385:49"><name pos:start="385:38" pos:end="385:46">ne2000_io</name><index pos:start="385:47" pos:end="385:49">[<expr pos:start="385:48" pos:end="385:48"><name pos:start="385:48" pos:end="385:48">i</name></expr>]</index></name></expr></argument>, <argument pos:start="385:52" pos:end="385:64"><expr pos:start="385:52" pos:end="385:64"><name pos:start="385:52" pos:end="385:64"><name pos:start="385:52" pos:end="385:61">ne2000_irq</name><index pos:start="385:62" pos:end="385:64">[<expr pos:start="385:63" pos:end="385:63"><name pos:start="385:63" pos:end="385:63">i</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="387:29" pos:end="387:40"><expr pos:start="387:29" pos:end="387:40"><operator pos:start="387:29" pos:end="387:29">&amp;</operator><name pos:start="387:30" pos:end="387:40"><name pos:start="387:30" pos:end="387:37">nd_table</name><index pos:start="387:38" pos:end="387:40">[<expr pos:start="387:39" pos:end="387:39"><name pos:start="387:39" pos:end="387:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="389:11" pos:end="393:9">else <block pos:start="389:16" pos:end="393:9">{<block_content pos:start="391:13" pos:end="391:73">

            <expr_stmt pos:start="391:13" pos:end="391:73"><expr pos:start="391:13" pos:end="391:72"><call pos:start="391:13" pos:end="391:72"><name pos:start="391:13" pos:end="391:31">pci_nic_init_nofail</name><argument_list pos:start="391:32" pos:end="391:72">(<argument pos:start="391:33" pos:end="391:44"><expr pos:start="391:33" pos:end="391:44"><operator pos:start="391:33" pos:end="391:33">&amp;</operator><name pos:start="391:34" pos:end="391:44"><name pos:start="391:34" pos:end="391:41">nd_table</name><index pos:start="391:42" pos:end="391:44">[<expr pos:start="391:43" pos:end="391:43"><name pos:start="391:43" pos:end="391:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="391:47" pos:end="391:53"><expr pos:start="391:47" pos:end="391:53"><name pos:start="391:47" pos:end="391:53">pci_bus</name></expr></argument>, <argument pos:start="391:56" pos:end="391:65"><expr pos:start="391:56" pos:end="391:65"><literal type="string" pos:start="391:56" pos:end="391:65">"ne2k_pci"</literal></expr></argument>, <argument pos:start="391:68" pos:end="391:71"><expr pos:start="391:68" pos:end="391:71"><name pos:start="391:68" pos:end="391:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="399:5" pos:end="399:35"><expr pos:start="399:5" pos:end="399:34"><call pos:start="399:5" pos:end="399:34"><name pos:start="399:5" pos:end="399:17">ide_drive_get</name><argument_list pos:start="399:18" pos:end="399:34">(<argument pos:start="399:19" pos:end="399:20"><expr pos:start="399:19" pos:end="399:20"><name pos:start="399:19" pos:end="399:20">hd</name></expr></argument>, <argument pos:start="399:23" pos:end="399:33"><expr pos:start="399:23" pos:end="399:33"><name pos:start="399:23" pos:end="399:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="401:5" pos:end="409:5">for<control pos:start="401:8" pos:end="401:36">(<init pos:start="401:9" pos:end="401:14"><expr pos:start="401:9" pos:end="401:13"><name pos:start="401:9" pos:end="401:9">i</name> <operator pos:start="401:11" pos:end="401:11">=</operator> <literal type="number" pos:start="401:13" pos:end="401:13">0</literal></expr>;</init> <condition pos:start="401:16" pos:end="401:31"><expr pos:start="401:16" pos:end="401:30"><name pos:start="401:16" pos:end="401:16">i</name> <operator pos:start="401:18" pos:end="401:18">&lt;</operator> <name pos:start="401:20" pos:end="401:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="401:33" pos:end="401:35"><expr pos:start="401:33" pos:end="401:35"><name pos:start="401:33" pos:end="401:33">i</name><operator pos:start="401:34" pos:end="401:35">++</operator></expr></incr>)</control> <block pos:start="401:38" pos:end="409:5">{<block_content pos:start="403:9" pos:end="407:36">

        <expr_stmt pos:start="403:9" pos:end="407:36"><expr pos:start="403:9" pos:end="407:35"><call pos:start="403:9" pos:end="407:35"><name pos:start="403:9" pos:end="403:20">isa_ide_init</name><argument_list pos:start="403:21" pos:end="407:35">(<argument pos:start="403:22" pos:end="403:28"><expr pos:start="403:22" pos:end="403:28"><name pos:start="403:22" pos:end="403:28">isa_bus</name></expr></argument>, <argument pos:start="403:31" pos:end="403:43"><expr pos:start="403:31" pos:end="403:43"><name pos:start="403:31" pos:end="403:43"><name pos:start="403:31" pos:end="403:40">ide_iobase</name><index pos:start="403:41" pos:end="403:43">[<expr pos:start="403:42" pos:end="403:42"><name pos:start="403:42" pos:end="403:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="403:46" pos:end="403:59"><expr pos:start="403:46" pos:end="403:59"><name pos:start="403:46" pos:end="403:59"><name pos:start="403:46" pos:end="403:56">ide_iobase2</name><index pos:start="403:57" pos:end="403:59">[<expr pos:start="403:58" pos:end="403:58"><name pos:start="403:58" pos:end="403:58">i</name></expr>]</index></name></expr></argument>, <argument pos:start="403:62" pos:end="403:71"><expr pos:start="403:62" pos:end="403:71"><name pos:start="403:62" pos:end="403:71"><name pos:start="403:62" pos:end="403:68">ide_irq</name><index pos:start="403:69" pos:end="403:71">[<expr pos:start="403:70" pos:end="403:70"><name pos:start="403:70" pos:end="403:70">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="405:22" pos:end="405:30"><expr pos:start="405:22" pos:end="405:30"><name pos:start="405:22" pos:end="405:30"><name pos:start="405:22" pos:end="405:23">hd</name><index pos:start="405:24" pos:end="405:30">[<expr pos:start="405:25" pos:end="405:29"><literal type="number" pos:start="405:25" pos:end="405:25">2</literal> <operator pos:start="405:27" pos:end="405:27">*</operator> <name pos:start="405:29" pos:end="405:29">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="407:22" pos:end="407:34"><expr pos:start="407:22" pos:end="407:34"><name pos:start="407:22" pos:end="407:34"><name pos:start="407:22" pos:end="407:23">hd</name><index pos:start="407:24" pos:end="407:34">[<expr pos:start="407:25" pos:end="407:33"><literal type="number" pos:start="407:25" pos:end="407:25">2</literal> <operator pos:start="407:27" pos:end="407:27">*</operator> <name pos:start="407:29" pos:end="407:29">i</name> <operator pos:start="407:31" pos:end="407:31">+</operator> <literal type="number" pos:start="407:33" pos:end="407:33">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="411:5" pos:end="411:40"><expr pos:start="411:5" pos:end="411:39"><call pos:start="411:5" pos:end="411:39"><name pos:start="411:5" pos:end="411:21">isa_create_simple</name><argument_list pos:start="411:22" pos:end="411:39">(<argument pos:start="411:23" pos:end="411:29"><expr pos:start="411:23" pos:end="411:29"><name pos:start="411:23" pos:end="411:29">isa_bus</name></expr></argument>, <argument pos:start="411:32" pos:end="411:38"><expr pos:start="411:32" pos:end="411:38"><literal type="string" pos:start="411:32" pos:end="411:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="415:5" pos:end="415:33"><expr pos:start="415:5" pos:end="415:32"><name pos:start="415:5" pos:end="415:7">cpu</name> <operator pos:start="415:9" pos:end="415:9">=</operator> <call pos:start="415:11" pos:end="415:32"><name pos:start="415:11" pos:end="415:21">POWERPC_CPU</name><argument_list pos:start="415:22" pos:end="415:32">(<argument pos:start="415:23" pos:end="415:31"><expr pos:start="415:23" pos:end="415:31"><name pos:start="415:23" pos:end="415:31">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:66"><expr pos:start="417:5" pos:end="417:65"><name pos:start="417:5" pos:end="417:22"><name pos:start="417:5" pos:end="417:11">sysctrl</name><operator pos:start="417:12" pos:end="417:13">-&gt;</operator><name pos:start="417:14" pos:end="417:22">reset_irq</name></name> <operator pos:start="417:24" pos:end="417:24">=</operator> <name pos:start="417:26" pos:end="417:65"><name pos:start="417:26" pos:end="417:28">cpu</name><operator pos:start="417:29" pos:end="417:30">-&gt;</operator><name pos:start="417:31" pos:end="417:33">env</name><operator pos:start="417:34" pos:end="417:34">.</operator><name pos:start="417:35" pos:end="417:44">irq_inputs</name><index pos:start="417:45" pos:end="417:65">[<expr pos:start="417:46" pos:end="417:64"><name pos:start="417:46" pos:end="417:64">PPC6xx_INPUT_HRESET</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="421:5" pos:end="421:73"><expr pos:start="421:5" pos:end="421:72"><call pos:start="421:5" pos:end="421:72"><name pos:start="421:5" pos:end="421:20">portio_list_init</name><argument_list pos:start="421:21" pos:end="421:72">(<argument pos:start="421:22" pos:end="421:30"><expr pos:start="421:22" pos:end="421:30"><name pos:start="421:22" pos:end="421:30">port_list</name></expr></argument>, <argument pos:start="421:33" pos:end="421:36"><expr pos:start="421:33" pos:end="421:36"><name pos:start="421:33" pos:end="421:36">NULL</name></expr></argument>, <argument pos:start="421:39" pos:end="421:54"><expr pos:start="421:39" pos:end="421:54"><name pos:start="421:39" pos:end="421:54">prep_portio_list</name></expr></argument>, <argument pos:start="421:57" pos:end="421:63"><expr pos:start="421:57" pos:end="421:63"><name pos:start="421:57" pos:end="421:63">sysctrl</name></expr></argument>, <argument pos:start="421:66" pos:end="421:71"><expr pos:start="421:66" pos:end="421:71"><literal type="string" pos:start="421:66" pos:end="421:71">"prep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="436:0"><expr pos:start="423:5" pos:end="423:52"><call pos:start="423:5" pos:end="423:52"><name pos:start="423:5" pos:end="423:19">portio_list_add</name><argument_list pos:start="423:20" pos:end="423:52">(<argument pos:start="423:21" pos:end="423:29"><expr pos:start="423:21" pos:end="423:29"><name pos:start="423:21" pos:end="423:29">port_list</name></expr></argument>, <argument pos:start="423:32" pos:end="423:46"><expr pos:start="423:32" pos:end="423:46"><call pos:start="423:32" pos:end="423:46"><name pos:start="423:32" pos:end="423:44">get_system_io</name><argument_list pos:start="423:45" pos:end="423:46">()</argument_list></call></expr></argument>, <argument pos:start="423:49" pos:end="423:51"><expr pos:start="423:49" pos:end="423:51"><literal type="number" pos:start="423:49" pos:end="423:51">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="427:5" pos:end="427:51">/* PowerPC control and status register group */</comment>

<cpp:if pos:start="429:1" pos:end="429:5">#<cpp:directive pos:start="429:2" pos:end="429:3">if</cpp:directive> <expr pos:start="429:5" pos:end="429:5"><literal type="number" pos:start="429:5" pos:end="429:5">0</literal></expr></cpp:if>

    memory_region_init_io(xcsr, NULL, &amp;PPC_XCSR_ops, NULL, "ppc-xcsr", 0x1000);

    memory_region_add_subregion(sysmem, 0xFEFF0000, xcsr);

<cpp:endif pos:start="435:1" pos:end="435:6">#<cpp:directive pos:start="435:2" pos:end="435:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="439:5" pos:end="443:5"><if pos:start="439:5" pos:end="443:5">if <condition pos:start="439:8" pos:end="439:27">(<expr pos:start="439:9" pos:end="439:26"><call pos:start="439:9" pos:end="439:26"><name pos:start="439:9" pos:end="439:19">usb_enabled</name><argument_list pos:start="439:20" pos:end="439:26">(<argument pos:start="439:21" pos:end="439:25"><expr pos:start="439:21" pos:end="439:25"><name pos:start="439:21" pos:end="439:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="439:29" pos:end="443:5">{<block_content pos:start="441:9" pos:end="441:51">

        <expr_stmt pos:start="441:9" pos:end="441:51"><expr pos:start="441:9" pos:end="441:50"><call pos:start="441:9" pos:end="441:50"><name pos:start="441:9" pos:end="441:25">pci_create_simple</name><argument_list pos:start="441:26" pos:end="441:50">(<argument pos:start="441:27" pos:end="441:33"><expr pos:start="441:27" pos:end="441:33"><name pos:start="441:27" pos:end="441:33">pci_bus</name></expr></argument>, <argument pos:start="441:36" pos:end="441:37"><expr pos:start="441:36" pos:end="441:37"><operator pos:start="441:36" pos:end="441:36">-</operator><literal type="number" pos:start="441:37" pos:end="441:37">1</literal></expr></argument>, <argument pos:start="441:40" pos:end="441:49"><expr pos:start="441:40" pos:end="441:49"><literal type="string" pos:start="441:40" pos:end="441:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="447:5" pos:end="447:62"><expr pos:start="447:5" pos:end="447:61"><name pos:start="447:5" pos:end="447:10">m48t59</name> <operator pos:start="447:12" pos:end="447:12">=</operator> <call pos:start="447:14" pos:end="447:61"><name pos:start="447:14" pos:end="447:28">m48t59_init_isa</name><argument_list pos:start="447:29" pos:end="447:61">(<argument pos:start="447:30" pos:end="447:36"><expr pos:start="447:30" pos:end="447:36"><name pos:start="447:30" pos:end="447:36">isa_bus</name></expr></argument>, <argument pos:start="447:39" pos:end="447:44"><expr pos:start="447:39" pos:end="447:44"><literal type="number" pos:start="447:39" pos:end="447:44">0x0074</literal></expr></argument>, <argument pos:start="447:47" pos:end="447:56"><expr pos:start="447:47" pos:end="447:56"><name pos:start="447:47" pos:end="447:56">NVRAM_SIZE</name></expr></argument>, <argument pos:start="447:59" pos:end="447:60"><expr pos:start="447:59" pos:end="447:60"><literal type="number" pos:start="447:59" pos:end="447:60">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="449:5" pos:end="451:15"><if pos:start="449:5" pos:end="451:15">if <condition pos:start="449:8" pos:end="449:23">(<expr pos:start="449:9" pos:end="449:22"><name pos:start="449:9" pos:end="449:14">m48t59</name> <operator pos:start="449:16" pos:end="449:17">==</operator> <name pos:start="449:19" pos:end="449:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="451:9" pos:end="451:15"><block_content pos:start="451:9" pos:end="451:15">

        <return pos:start="451:9" pos:end="451:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="453:5" pos:end="453:28"><expr pos:start="453:5" pos:end="453:27"><name pos:start="453:5" pos:end="453:18"><name pos:start="453:5" pos:end="453:11">sysctrl</name><operator pos:start="453:12" pos:end="453:13">-&gt;</operator><name pos:start="453:14" pos:end="453:18">nvram</name></name> <operator pos:start="453:20" pos:end="453:20">=</operator> <name pos:start="453:22" pos:end="453:27">m48t59</name></expr>;</expr_stmt>



    <comment type="block" pos:start="457:5" pos:end="457:26">/* Initialise NVRAM */</comment>

    <expr_stmt pos:start="459:5" pos:end="459:26"><expr pos:start="459:5" pos:end="459:25"><name pos:start="459:5" pos:end="459:16"><name pos:start="459:5" pos:end="459:9">nvram</name><operator pos:start="459:10" pos:end="459:10">.</operator><name pos:start="459:11" pos:end="459:16">opaque</name></name> <operator pos:start="459:18" pos:end="459:18">=</operator> <name pos:start="459:20" pos:end="459:25">m48t59</name></expr>;</expr_stmt>

    <expr_stmt pos:start="461:5" pos:end="461:33"><expr pos:start="461:5" pos:end="461:32"><name pos:start="461:5" pos:end="461:17"><name pos:start="461:5" pos:end="461:9">nvram</name><operator pos:start="461:10" pos:end="461:10">.</operator><name pos:start="461:11" pos:end="461:17">read_fn</name></name> <operator pos:start="461:19" pos:end="461:19">=</operator> <operator pos:start="461:21" pos:end="461:21">&amp;</operator><name pos:start="461:22" pos:end="461:32">m48t59_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:35"><expr pos:start="463:5" pos:end="463:34"><name pos:start="463:5" pos:end="463:18"><name pos:start="463:5" pos:end="463:9">nvram</name><operator pos:start="463:10" pos:end="463:10">.</operator><name pos:start="463:11" pos:end="463:18">write_fn</name></name> <operator pos:start="463:20" pos:end="463:20">=</operator> <operator pos:start="463:22" pos:end="463:22">&amp;</operator><name pos:start="463:23" pos:end="463:34">m48t59_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="477:71"><expr pos:start="465:5" pos:end="477:70"><call pos:start="465:5" pos:end="477:70"><name pos:start="465:5" pos:end="465:24">PPC_NVRAM_set_params</name><argument_list pos:start="465:25" pos:end="477:70">(<argument pos:start="465:26" pos:end="465:31"><expr pos:start="465:26" pos:end="465:31"><operator pos:start="465:26" pos:end="465:26">&amp;</operator><name pos:start="465:27" pos:end="465:31">nvram</name></expr></argument>, <argument pos:start="465:34" pos:end="465:43"><expr pos:start="465:34" pos:end="465:43"><name pos:start="465:34" pos:end="465:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="465:46" pos:end="465:51"><expr pos:start="465:46" pos:end="465:51"><literal type="string" pos:start="465:46" pos:end="465:51">"PREP"</literal></expr></argument>, <argument pos:start="465:54" pos:end="465:61"><expr pos:start="465:54" pos:end="465:61"><name pos:start="465:54" pos:end="465:61">ram_size</name></expr></argument>, <argument pos:start="465:64" pos:end="465:78"><expr pos:start="465:64" pos:end="465:78"><name pos:start="465:64" pos:end="465:78">ppc_boot_device</name></expr></argument>,

                         <argument pos:start="467:26" pos:end="467:36"><expr pos:start="467:26" pos:end="467:36"><name pos:start="467:26" pos:end="467:36">kernel_base</name></expr></argument>, <argument pos:start="467:39" pos:end="467:49"><expr pos:start="467:39" pos:end="467:49"><name pos:start="467:39" pos:end="467:49">kernel_size</name></expr></argument>,

                         <argument pos:start="469:26" pos:end="469:39"><expr pos:start="469:26" pos:end="469:39"><name pos:start="469:26" pos:end="469:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="471:26" pos:end="471:36"><expr pos:start="471:26" pos:end="471:36"><name pos:start="471:26" pos:end="471:36">initrd_base</name></expr></argument>, <argument pos:start="471:39" pos:end="471:49"><expr pos:start="471:39" pos:end="471:49"><name pos:start="471:39" pos:end="471:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="473:26" pos:end="473:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="475:26" pos:end="475:26"><expr pos:start="475:26" pos:end="475:26"><literal type="number" pos:start="475:26" pos:end="475:26">0</literal></expr></argument>,

                         <argument pos:start="477:26" pos:end="477:38"><expr pos:start="477:26" pos:end="477:38"><name pos:start="477:26" pos:end="477:38">graphic_width</name></expr></argument>, <argument pos:start="477:41" pos:end="477:54"><expr pos:start="477:41" pos:end="477:54"><name pos:start="477:41" pos:end="477:54">graphic_height</name></expr></argument>, <argument pos:start="477:57" pos:end="477:69"><expr pos:start="477:57" pos:end="477:69"><name pos:start="477:57" pos:end="477:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
