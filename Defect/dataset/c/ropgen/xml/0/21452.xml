<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21452.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:22">qemu_thread_join</name><parameter_list pos:start="1:23" pos:end="1:42">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:33">QemuThread</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">thread</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:15">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">QemuThreadData</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:24">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">HANDLE</name></type> <name pos:start="9:12" pos:end="9:17">handle</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:8">data</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <name pos:start="13:12" pos:end="13:23"><name pos:start="13:12" pos:end="13:17">thread</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:23">data</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">data</name></expr>)</condition> <block pos:start="15:16" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="21:5" pos:end="33:7">/*

     * Because multiple copies of the QemuThread can exist via

     * qemu_thread_get_self, we need to store a value that cannot

     * leak there.  The simplest, non racy way is to store the TID,

     * discard the handle that _beginthreadex gives back, and

     * get another copy of the handle here.

     */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><call pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:24">EnterCriticalSection</name><argument_list pos:start="35:25" pos:end="35:35">(<argument pos:start="35:26" pos:end="35:34"><expr pos:start="35:26" pos:end="35:34"><operator pos:start="35:26" pos:end="35:26">&amp;</operator><name pos:start="35:27" pos:end="35:34"><name pos:start="35:27" pos:end="35:30">data</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:34">cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:22">(<expr pos:start="37:9" pos:end="37:21"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:21"><name pos:start="37:10" pos:end="37:13">data</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">exited</name></name></expr>)</condition> <block pos:start="37:24" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:28">

        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:14">handle</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:60"><name pos:start="39:18" pos:end="39:27">OpenThread</name><argument_list pos:start="39:28" pos:end="39:60">(<argument pos:start="39:29" pos:end="39:39"><expr pos:start="39:29" pos:end="39:39"><name pos:start="39:29" pos:end="39:39">SYNCHRONIZE</name></expr></argument>, <argument pos:start="39:42" pos:end="39:46"><expr pos:start="39:42" pos:end="39:46"><name pos:start="39:42" pos:end="39:46">FALSE</name></expr></argument>, <argument pos:start="39:49" pos:end="39:59"><expr pos:start="39:49" pos:end="39:59"><name pos:start="39:49" pos:end="39:59"><name pos:start="39:49" pos:end="39:54">thread</name><operator pos:start="39:55" pos:end="39:56">-&gt;</operator><name pos:start="39:57" pos:end="39:59">tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><call pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:28">LeaveCriticalSection</name><argument_list pos:start="41:29" pos:end="41:39">(<argument pos:start="41:30" pos:end="41:38"><expr pos:start="41:30" pos:end="41:38"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:38"><name pos:start="41:31" pos:end="41:34">data</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:38">cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><call pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:27">WaitForSingleObject</name><argument_list pos:start="43:28" pos:end="43:45">(<argument pos:start="43:29" pos:end="43:34"><expr pos:start="43:29" pos:end="43:34"><name pos:start="43:29" pos:end="43:34">handle</name></expr></argument>, <argument pos:start="43:37" pos:end="43:44"><expr pos:start="43:37" pos:end="43:44"><name pos:start="43:37" pos:end="43:44">INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><call pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:19">CloseHandle</name><argument_list pos:start="45:20" pos:end="45:27">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:40">

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:28">LeaveCriticalSection</name><argument_list pos:start="49:29" pos:end="49:39">(<argument pos:start="49:30" pos:end="49:38"><expr pos:start="49:30" pos:end="49:38"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:38"><name pos:start="49:31" pos:end="49:34">data</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:38">cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <name pos:start="53:11" pos:end="53:19"><name pos:start="53:11" pos:end="53:14">data</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:19">ret</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:37"><expr pos:start="55:5" pos:end="55:36"><call pos:start="55:5" pos:end="55:36"><name pos:start="55:5" pos:end="55:25">DeleteCriticalSection</name><argument_list pos:start="55:26" pos:end="55:36">(<argument pos:start="55:27" pos:end="55:35"><expr pos:start="55:27" pos:end="55:35"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:31">data</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:35">cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><call pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:16">(<argument pos:start="57:12" pos:end="57:15"><expr pos:start="57:12" pos:end="57:15"><name pos:start="57:12" pos:end="57:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="59:15">return <expr pos:start="59:12" pos:end="59:14"><name pos:start="59:12" pos:end="59:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
