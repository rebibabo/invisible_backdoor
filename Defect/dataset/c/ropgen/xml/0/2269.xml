<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2269.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:38">source_return_path_thread</name><parameter_list pos:start="1:39" pos:end="1:52">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:45"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="219:1">{<block_content pos:start="5:5" pos:end="217:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MigrationState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:22">ms</name> <init pos:start="5:24" pos:end="5:31">= <expr pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:31">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QEMUFile</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">rp</name> <init pos:start="7:18" pos:end="7:45">= <expr pos:start="7:20" pos:end="7:45"><name pos:start="7:20" pos:end="7:45"><name pos:start="7:20" pos:end="7:21">ms</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:31">rp_state</name><operator pos:start="7:32" pos:end="7:32">.</operator><name pos:start="7:33" pos:end="7:45">from_dst_file</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:23">header_len</name></decl>, <decl pos:start="9:26" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:26" pos:end="9:36">header_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:21">max_len</name> <init pos:start="11:23" pos:end="11:27">= <expr pos:start="11:25" pos:end="11:27"><literal type="number" pos:start="11:25" pos:end="11:27">512</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:24"><name pos:start="13:13" pos:end="13:15">buf</name><index pos:start="13:16" pos:end="13:24">[<expr pos:start="13:17" pos:end="13:23"><name pos:start="13:17" pos:end="13:23">max_len</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:18">tmp32</name></decl>, <decl pos:start="15:21" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:21" pos:end="15:33">sibling_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:20">start</name> <init pos:start="17:22" pos:end="17:24">= <expr pos:start="17:24" pos:end="17:24"><literal type="number" pos:start="17:24" pos:end="17:24">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:27" pos:end="17:53">/* =0 to silence warning */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type>  <name pos:start="19:13" pos:end="19:15">len</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr></init></decl>, <decl pos:start="19:22" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:10"/><name pos:start="19:22" pos:end="19:33">expected_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><call pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:41">trace_source_return_path_thread_entry</name><argument_list pos:start="25:42" pos:end="25:43">()</argument_list></call></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="197:5">while <condition pos:start="27:11" pos:end="29:51">(<expr pos:start="27:12" pos:end="29:50"><operator pos:start="27:12" pos:end="27:12">!</operator><name pos:start="27:13" pos:end="27:30"><name pos:start="27:13" pos:end="27:14">ms</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:24">rp_state</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:30">error</name></name> <operator pos:start="27:32" pos:end="27:33">&amp;&amp;</operator> <operator pos:start="27:35" pos:end="27:35">!</operator><call pos:start="27:36" pos:end="27:58"><name pos:start="27:36" pos:end="27:54">qemu_file_get_error</name><argument_list pos:start="27:55" pos:end="27:58">(<argument pos:start="27:56" pos:end="27:57"><expr pos:start="27:56" pos:end="27:57"><name pos:start="27:56" pos:end="27:57">rp</name></expr></argument>)</argument_list></call> <operator pos:start="27:60" pos:end="27:61">&amp;&amp;</operator>

           <call pos:start="29:12" pos:end="29:50"><name pos:start="29:12" pos:end="29:39">migration_is_setup_or_active</name><argument_list pos:start="29:40" pos:end="29:50">(<argument pos:start="29:41" pos:end="29:49"><expr pos:start="29:41" pos:end="29:49"><name pos:start="29:41" pos:end="29:49"><name pos:start="29:41" pos:end="29:42">ms</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:49">state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:53" pos:end="197:5">{<block_content pos:start="31:9" pos:end="195:9">

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><call pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:48">trace_source_return_path_thread_loop_top</name><argument_list pos:start="31:49" pos:end="31:50">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:19">header_type</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:39"><name pos:start="33:23" pos:end="33:35">qemu_get_be16</name><argument_list pos:start="33:36" pos:end="33:39">(<argument pos:start="33:37" pos:end="33:38"><expr pos:start="33:37" pos:end="33:38"><name pos:start="33:37" pos:end="33:38">rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:18">header_len</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:38"><name pos:start="35:22" pos:end="35:34">qemu_get_be16</name><argument_list pos:start="35:35" pos:end="35:38">(<argument pos:start="35:36" pos:end="35:37"><expr pos:start="35:36" pos:end="35:37"><name pos:start="35:36" pos:end="35:37">rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="39:9" pos:end="51:9"><if pos:start="39:9" pos:end="51:9">if <condition pos:start="39:12" pos:end="41:46">(<expr pos:start="39:13" pos:end="41:45"><name pos:start="39:13" pos:end="39:23">header_type</name> <operator pos:start="39:25" pos:end="39:26">&gt;=</operator> <name pos:start="39:28" pos:end="39:41">MIG_RP_MSG_MAX</name> <operator pos:start="39:43" pos:end="39:44">||</operator>

            <name pos:start="41:13" pos:end="41:23">header_type</name> <operator pos:start="41:25" pos:end="41:26">==</operator> <name pos:start="41:28" pos:end="41:45">MIG_RP_MSG_INVALID</name></expr>)</condition> <block pos:start="41:48" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:21">

            <expr_stmt pos:start="43:13" pos:end="45:45"><expr pos:start="43:13" pos:end="45:44"><call pos:start="43:13" pos:end="45:44"><name pos:start="43:13" pos:end="43:24">error_report</name><argument_list pos:start="43:25" pos:end="45:44">(<argument pos:start="43:26" pos:end="43:76"><expr pos:start="43:26" pos:end="43:76"><literal type="string" pos:start="43:26" pos:end="43:76">"RP: Received invalid message 0x%04x length 0x%04x"</literal></expr></argument>,

                    <argument pos:start="45:21" pos:end="45:31"><expr pos:start="45:21" pos:end="45:31"><name pos:start="45:21" pos:end="45:31">header_type</name></expr></argument>, <argument pos:start="45:34" pos:end="45:43"><expr pos:start="45:34" pos:end="45:43"><name pos:start="45:34" pos:end="45:43">header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><call pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:30">mark_source_rp_bad</name><argument_list pos:start="47:31" pos:end="47:34">(<argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><name pos:start="47:32" pos:end="47:33">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="55:9" pos:end="73:9"><if pos:start="55:9" pos:end="73:9">if <condition pos:start="55:12" pos:end="59:33">(<expr pos:start="55:13" pos:end="59:32"><operator pos:start="55:13" pos:end="55:13">(</operator><name pos:start="55:14" pos:end="55:37"><name pos:start="55:14" pos:end="55:24">rp_cmd_args</name><index pos:start="55:25" pos:end="55:37">[<expr pos:start="55:26" pos:end="55:36"><name pos:start="55:26" pos:end="55:36">header_type</name></expr>]</index></name><operator pos:start="55:38" pos:end="55:38">.</operator><name pos:start="55:39" pos:end="55:41">len</name> <operator pos:start="55:43" pos:end="55:44">!=</operator> <operator pos:start="55:46" pos:end="55:46">-</operator><literal type="number" pos:start="55:47" pos:end="55:47">1</literal> <operator pos:start="55:49" pos:end="55:50">&amp;&amp;</operator>

            <name pos:start="57:13" pos:end="57:22">header_len</name> <operator pos:start="57:24" pos:end="57:25">!=</operator> <name pos:start="57:27" pos:end="57:50"><name pos:start="57:27" pos:end="57:37">rp_cmd_args</name><index pos:start="57:38" pos:end="57:50">[<expr pos:start="57:39" pos:end="57:49"><name pos:start="57:39" pos:end="57:49">header_type</name></expr>]</index></name><operator pos:start="57:51" pos:end="57:51">.</operator><name pos:start="57:52" pos:end="57:54">len</name><operator pos:start="57:55" pos:end="57:55">)</operator> <operator pos:start="57:57" pos:end="57:58">||</operator>

            <name pos:start="59:13" pos:end="59:22">header_len</name> <operator pos:start="59:24" pos:end="59:24">&gt;</operator> <name pos:start="59:26" pos:end="59:32">max_len</name></expr>)</condition> <block pos:start="59:35" pos:end="73:9">{<block_content pos:start="61:13" pos:end="71:21">

            <expr_stmt pos:start="61:13" pos:end="67:58"><expr pos:start="61:13" pos:end="67:57"><call pos:start="61:13" pos:end="67:57"><name pos:start="61:13" pos:end="61:24">error_report</name><argument_list pos:start="61:25" pos:end="67:57">(<argument pos:start="61:26" pos:end="63:55"><expr pos:start="61:26" pos:end="63:55"><literal type="string" pos:start="61:26" pos:end="61:66">"RP: Received '%s' message (0x%04x) with"</literal>

                    <literal type="string" pos:start="63:21" pos:end="63:55">"incorrect length %d expecting %zu"</literal></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:49"><expr pos:start="65:21" pos:end="65:49"><name pos:start="65:21" pos:end="65:44"><name pos:start="65:21" pos:end="65:31">rp_cmd_args</name><index pos:start="65:32" pos:end="65:44">[<expr pos:start="65:33" pos:end="65:43"><name pos:start="65:33" pos:end="65:43">header_type</name></expr>]</index></name><operator pos:start="65:45" pos:end="65:45">.</operator><name pos:start="65:46" pos:end="65:49">name</name></expr></argument>, <argument pos:start="65:52" pos:end="65:62"><expr pos:start="65:52" pos:end="65:62"><name pos:start="65:52" pos:end="65:62">header_type</name></expr></argument>, <argument pos:start="65:65" pos:end="65:74"><expr pos:start="65:65" pos:end="65:74"><name pos:start="65:65" pos:end="65:74">header_len</name></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:56"><expr pos:start="67:21" pos:end="67:56"><operator pos:start="67:21" pos:end="67:21">(</operator><name pos:start="67:22" pos:end="67:27">size_t</name><operator pos:start="67:28" pos:end="67:28">)</operator><name pos:start="67:29" pos:end="67:52"><name pos:start="67:29" pos:end="67:39">rp_cmd_args</name><index pos:start="67:40" pos:end="67:52">[<expr pos:start="67:41" pos:end="67:51"><name pos:start="67:41" pos:end="67:51">header_type</name></expr>]</index></name><operator pos:start="67:53" pos:end="67:53">.</operator><name pos:start="67:54" pos:end="67:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><call pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:30">mark_source_rp_bad</name><argument_list pos:start="69:31" pos:end="69:34">(<argument pos:start="69:32" pos:end="69:33"><expr pos:start="69:32" pos:end="69:33"><name pos:start="69:32" pos:end="69:33">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:21">goto <name pos:start="71:18" pos:end="71:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:60">/* We know we've got a valid header by this point */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:51"><expr pos:start="79:9" pos:end="79:50"><name pos:start="79:9" pos:end="79:11">res</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:50"><name pos:start="79:15" pos:end="79:29">qemu_get_buffer</name><argument_list pos:start="79:30" pos:end="79:50">(<argument pos:start="79:31" pos:end="79:32"><expr pos:start="79:31" pos:end="79:32"><name pos:start="79:31" pos:end="79:32">rp</name></expr></argument>, <argument pos:start="79:35" pos:end="79:37"><expr pos:start="79:35" pos:end="79:37"><name pos:start="79:35" pos:end="79:37">buf</name></expr></argument>, <argument pos:start="79:40" pos:end="79:49"><expr pos:start="79:40" pos:end="79:49"><name pos:start="79:40" pos:end="79:49">header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="93:9"><if pos:start="81:9" pos:end="93:9">if <condition pos:start="81:12" pos:end="81:30">(<expr pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:15">res</name> <operator pos:start="81:17" pos:end="81:18">!=</operator> <name pos:start="81:20" pos:end="81:29">header_len</name></expr>)</condition> <block pos:start="81:32" pos:end="93:9">{<block_content pos:start="83:13" pos:end="91:21">

            <expr_stmt pos:start="83:13" pos:end="87:55"><expr pos:start="83:13" pos:end="87:54"><call pos:start="83:13" pos:end="87:54"><name pos:start="83:13" pos:end="83:24">error_report</name><argument_list pos:start="83:25" pos:end="87:54">(<argument pos:start="83:26" pos:end="85:47"><expr pos:start="83:26" pos:end="85:47"><literal type="string" pos:start="83:26" pos:end="83:69">"RP: Failed reading data for message 0x%04x"</literal>

                         <literal type="string" pos:start="85:26" pos:end="85:47">" read %d expected %d"</literal></expr></argument>,

                         <argument pos:start="87:26" pos:end="87:36"><expr pos:start="87:26" pos:end="87:36"><name pos:start="87:26" pos:end="87:36">header_type</name></expr></argument>, <argument pos:start="87:39" pos:end="87:41"><expr pos:start="87:39" pos:end="87:41"><name pos:start="87:39" pos:end="87:41">res</name></expr></argument>, <argument pos:start="87:44" pos:end="87:53"><expr pos:start="87:44" pos:end="87:53"><name pos:start="87:44" pos:end="87:53">header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><call pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:30">mark_source_rp_bad</name><argument_list pos:start="89:31" pos:end="89:34">(<argument pos:start="89:32" pos:end="89:33"><expr pos:start="89:32" pos:end="89:33"><name pos:start="89:32" pos:end="89:33">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:21">goto <name pos:start="91:18" pos:end="91:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="97:9" pos:end="97:50">/* OK, we have the message and the data */</comment>

        <switch pos:start="99:9" pos:end="195:9">switch <condition pos:start="99:16" pos:end="99:28">(<expr pos:start="99:17" pos:end="99:27"><name pos:start="99:17" pos:end="99:27">header_type</name></expr>)</condition> <block pos:start="99:30" pos:end="195:9">{<block_content pos:start="101:9" pos:end="193:18">

        <case pos:start="101:9" pos:end="101:29">case <expr pos:start="101:14" pos:end="101:28"><name pos:start="101:14" pos:end="101:28">MIG_RP_MSG_SHUT</name></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:58"><expr pos:start="103:13" pos:end="103:57"><name pos:start="103:13" pos:end="103:25">sibling_error</name> <operator pos:start="103:27" pos:end="103:27">=</operator> <call pos:start="103:29" pos:end="103:57"><name pos:start="103:29" pos:end="103:40">be32_to_cpup</name><argument_list pos:start="103:41" pos:end="103:57">(<argument pos:start="103:42" pos:end="103:56"><expr pos:start="103:42" pos:end="103:56"><operator pos:start="103:42" pos:end="103:42">(</operator><name pos:start="103:43" pos:end="103:50">uint32_t</name> <operator pos:start="103:52" pos:end="103:52">*</operator><operator pos:start="103:53" pos:end="103:53">)</operator><name pos:start="103:54" pos:end="103:56">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:64"><expr pos:start="105:13" pos:end="105:63"><call pos:start="105:13" pos:end="105:63"><name pos:start="105:13" pos:end="105:48">trace_source_return_path_thread_shut</name><argument_list pos:start="105:49" pos:end="105:63">(<argument pos:start="105:50" pos:end="105:62"><expr pos:start="105:50" pos:end="105:62"><name pos:start="105:50" pos:end="105:62">sibling_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="113:13"><if pos:start="107:13" pos:end="113:13">if <condition pos:start="107:16" pos:end="107:30">(<expr pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:29">sibling_error</name></expr>)</condition> <block pos:start="107:32" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:39">

                <expr_stmt pos:start="109:17" pos:end="109:78"><expr pos:start="109:17" pos:end="109:77"><call pos:start="109:17" pos:end="109:77"><name pos:start="109:17" pos:end="109:28">error_report</name><argument_list pos:start="109:29" pos:end="109:77">(<argument pos:start="109:30" pos:end="109:61"><expr pos:start="109:30" pos:end="109:61"><literal type="string" pos:start="109:30" pos:end="109:61">"RP: Sibling indicated error %d"</literal></expr></argument>, <argument pos:start="109:64" pos:end="109:76"><expr pos:start="109:64" pos:end="109:76"><name pos:start="109:64" pos:end="109:76">sibling_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:39"><expr pos:start="111:17" pos:end="111:38"><call pos:start="111:17" pos:end="111:38"><name pos:start="111:17" pos:end="111:34">mark_source_rp_bad</name><argument_list pos:start="111:35" pos:end="111:38">(<argument pos:start="111:36" pos:end="111:37"><expr pos:start="111:36" pos:end="111:37"><name pos:start="111:36" pos:end="111:37">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="115:13" pos:end="123:15">/*

             * We'll let the main thread deal with closing the RP

             * we could do a shutdown(2) on it, but we're the only user

             * anyway, so there's nothing gained.

             */</comment>

            <goto pos:start="125:13" pos:end="125:21">goto <name pos:start="125:18" pos:end="125:20">out</name>;</goto>



        <case pos:start="129:9" pos:end="129:29">case <expr pos:start="129:14" pos:end="129:28"><name pos:start="129:14" pos:end="129:28">MIG_RP_MSG_PONG</name></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:50"><expr pos:start="131:13" pos:end="131:49"><name pos:start="131:13" pos:end="131:17">tmp32</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:49"><name pos:start="131:21" pos:end="131:32">be32_to_cpup</name><argument_list pos:start="131:33" pos:end="131:49">(<argument pos:start="131:34" pos:end="131:48"><expr pos:start="131:34" pos:end="131:48"><operator pos:start="131:34" pos:end="131:34">(</operator><name pos:start="131:35" pos:end="131:42">uint32_t</name> <operator pos:start="131:44" pos:end="131:44">*</operator><operator pos:start="131:45" pos:end="131:45">)</operator><name pos:start="131:46" pos:end="131:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:56"><expr pos:start="133:13" pos:end="133:55"><call pos:start="133:13" pos:end="133:55"><name pos:start="133:13" pos:end="133:48">trace_source_return_path_thread_pong</name><argument_list pos:start="133:49" pos:end="133:55">(<argument pos:start="133:50" pos:end="133:54"><expr pos:start="133:50" pos:end="133:54"><name pos:start="133:50" pos:end="133:54">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>



        <case pos:start="139:9" pos:end="139:34">case <expr pos:start="139:14" pos:end="139:33"><name pos:start="139:14" pos:end="139:33">MIG_RP_MSG_REQ_PAGES</name></expr>:</case>

            <expr_stmt pos:start="141:13" pos:end="141:50"><expr pos:start="141:13" pos:end="141:49"><name pos:start="141:13" pos:end="141:17">start</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <call pos:start="141:21" pos:end="141:49"><name pos:start="141:21" pos:end="141:32">be64_to_cpup</name><argument_list pos:start="141:33" pos:end="141:49">(<argument pos:start="141:34" pos:end="141:48"><expr pos:start="141:34" pos:end="141:48"><operator pos:start="141:34" pos:end="141:34">(</operator><name pos:start="141:35" pos:end="141:42">uint64_t</name> <operator pos:start="141:44" pos:end="141:44">*</operator><operator pos:start="141:45" pos:end="141:45">)</operator><name pos:start="141:46" pos:end="141:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:54"><expr pos:start="143:13" pos:end="143:53"><name pos:start="143:13" pos:end="143:15">len</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:53"><name pos:start="143:19" pos:end="143:30">be32_to_cpup</name><argument_list pos:start="143:31" pos:end="143:53">(<argument pos:start="143:32" pos:end="143:52"><expr pos:start="143:32" pos:end="143:52"><operator pos:start="143:32" pos:end="143:32">(</operator><name pos:start="143:33" pos:end="143:40">uint32_t</name> <operator pos:start="143:42" pos:end="143:42">*</operator><operator pos:start="143:43" pos:end="143:43">)</operator><operator pos:start="143:44" pos:end="143:44">(</operator><name pos:start="143:45" pos:end="143:47">buf</name> <operator pos:start="143:49" pos:end="143:49">+</operator> <literal type="number" pos:start="143:51" pos:end="143:51">8</literal><operator pos:start="143:52" pos:end="143:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:62"><expr pos:start="145:13" pos:end="145:61"><call pos:start="145:13" pos:end="145:61"><name pos:start="145:13" pos:end="145:39">migrate_handle_rp_req_pages</name><argument_list pos:start="145:40" pos:end="145:61">(<argument pos:start="145:41" pos:end="145:42"><expr pos:start="145:41" pos:end="145:42"><name pos:start="145:41" pos:end="145:42">ms</name></expr></argument>, <argument pos:start="145:45" pos:end="145:48"><expr pos:start="145:45" pos:end="145:48"><name pos:start="145:45" pos:end="145:48">NULL</name></expr></argument>, <argument pos:start="145:51" pos:end="145:55"><expr pos:start="145:51" pos:end="145:55"><name pos:start="145:51" pos:end="145:55">start</name></expr></argument>, <argument pos:start="145:58" pos:end="145:60"><expr pos:start="145:58" pos:end="145:60"><name pos:start="145:58" pos:end="145:60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>



        <case pos:start="151:9" pos:end="151:37">case <expr pos:start="151:14" pos:end="151:36"><name pos:start="151:14" pos:end="151:36">MIG_RP_MSG_REQ_PAGES_ID</name></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:34"><expr pos:start="153:13" pos:end="153:33"><name pos:start="153:13" pos:end="153:24">expected_len</name> <operator pos:start="153:26" pos:end="153:26">=</operator> <literal type="number" pos:start="153:28" pos:end="153:31">12</literal> <operator pos:start="153:31" pos:end="153:31">+</operator> <literal type="number" pos:start="153:33" pos:end="153:33">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="153:36" pos:end="153:61">/* header + termination */</comment>



            <if_stmt pos:start="157:13" pos:end="171:13"><if pos:start="157:13" pos:end="171:13">if <condition pos:start="157:16" pos:end="157:43">(<expr pos:start="157:17" pos:end="157:42"><name pos:start="157:17" pos:end="157:26">header_len</name> <operator pos:start="157:28" pos:end="157:29">&gt;=</operator> <name pos:start="157:31" pos:end="157:42">expected_len</name></expr>)</condition> <block pos:start="157:45" pos:end="171:13">{<block_content pos:start="159:17" pos:end="169:38">

                <expr_stmt pos:start="159:17" pos:end="159:54"><expr pos:start="159:17" pos:end="159:53"><name pos:start="159:17" pos:end="159:21">start</name> <operator pos:start="159:23" pos:end="159:23">=</operator> <call pos:start="159:25" pos:end="159:53"><name pos:start="159:25" pos:end="159:36">be64_to_cpup</name><argument_list pos:start="159:37" pos:end="159:53">(<argument pos:start="159:38" pos:end="159:52"><expr pos:start="159:38" pos:end="159:52"><operator pos:start="159:38" pos:end="159:38">(</operator><name pos:start="159:39" pos:end="159:46">uint64_t</name> <operator pos:start="159:48" pos:end="159:48">*</operator><operator pos:start="159:49" pos:end="159:49">)</operator><name pos:start="159:50" pos:end="159:52">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:58"><expr pos:start="161:17" pos:end="161:57"><name pos:start="161:17" pos:end="161:19">len</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <call pos:start="161:23" pos:end="161:57"><name pos:start="161:23" pos:end="161:34">be32_to_cpup</name><argument_list pos:start="161:35" pos:end="161:57">(<argument pos:start="161:36" pos:end="161:56"><expr pos:start="161:36" pos:end="161:56"><operator pos:start="161:36" pos:end="161:36">(</operator><name pos:start="161:37" pos:end="161:44">uint32_t</name> <operator pos:start="161:46" pos:end="161:46">*</operator><operator pos:start="161:47" pos:end="161:47">)</operator><operator pos:start="161:48" pos:end="161:48">(</operator><name pos:start="161:49" pos:end="161:51">buf</name> <operator pos:start="161:53" pos:end="161:53">+</operator> <literal type="number" pos:start="161:55" pos:end="161:55">8</literal><operator pos:start="161:56" pos:end="161:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="163:17" pos:end="163:44">/* Now we expect an idstr */</comment>

                <expr_stmt pos:start="165:17" pos:end="165:32"><expr pos:start="165:17" pos:end="165:31"><name pos:start="165:17" pos:end="165:21">tmp32</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <name pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:27">buf</name><index pos:start="165:28" pos:end="165:31">[<expr pos:start="165:29" pos:end="165:30"><literal type="number" pos:start="165:29" pos:end="165:30">12</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block" pos:start="165:34" pos:end="165:68">/* Length of the following idstr */</comment>

                <expr_stmt pos:start="167:17" pos:end="167:39"><expr pos:start="167:17" pos:end="167:38"><name pos:start="167:17" pos:end="167:31"><name pos:start="167:17" pos:end="167:19">buf</name><index pos:start="167:20" pos:end="167:31">[<expr pos:start="167:21" pos:end="167:30"><literal type="number" pos:start="167:21" pos:end="167:22">13</literal> <operator pos:start="167:24" pos:end="167:24">+</operator> <name pos:start="167:26" pos:end="167:30">tmp32</name></expr>]</index></name> <operator pos:start="167:33" pos:end="167:33">=</operator> <literal type="char" pos:start="167:35" pos:end="167:38">'\0'</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:38"><expr pos:start="169:17" pos:end="169:37"><name pos:start="169:17" pos:end="169:28">expected_len</name> <operator pos:start="169:30" pos:end="169:31">+=</operator> <name pos:start="169:33" pos:end="169:37">tmp32</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="173:13" pos:end="183:13"><if pos:start="173:13" pos:end="183:13">if <condition pos:start="173:16" pos:end="173:43">(<expr pos:start="173:17" pos:end="173:42"><name pos:start="173:17" pos:end="173:26">header_len</name> <operator pos:start="173:28" pos:end="173:29">!=</operator> <name pos:start="173:31" pos:end="173:42">expected_len</name></expr>)</condition> <block pos:start="173:45" pos:end="183:13">{<block_content pos:start="175:17" pos:end="181:25">

                <expr_stmt pos:start="175:17" pos:end="177:50"><expr pos:start="175:17" pos:end="177:49"><call pos:start="175:17" pos:end="177:49"><name pos:start="175:17" pos:end="175:28">error_report</name><argument_list pos:start="175:29" pos:end="177:49">(<argument pos:start="175:30" pos:end="175:75"><expr pos:start="175:30" pos:end="175:75"><literal type="string" pos:start="175:30" pos:end="175:75">"RP: Req_Page_id with length %d expecting %zd"</literal></expr></argument>,

                        <argument pos:start="177:25" pos:end="177:34"><expr pos:start="177:25" pos:end="177:34"><name pos:start="177:25" pos:end="177:34">header_len</name></expr></argument>, <argument pos:start="177:37" pos:end="177:48"><expr pos:start="177:37" pos:end="177:48"><name pos:start="177:37" pos:end="177:48">expected_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:39"><expr pos:start="179:17" pos:end="179:38"><call pos:start="179:17" pos:end="179:38"><name pos:start="179:17" pos:end="179:34">mark_source_rp_bad</name><argument_list pos:start="179:35" pos:end="179:38">(<argument pos:start="179:36" pos:end="179:37"><expr pos:start="179:36" pos:end="179:37"><name pos:start="179:36" pos:end="179:37">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="181:17" pos:end="181:25">goto <name pos:start="181:22" pos:end="181:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:74"><expr pos:start="185:13" pos:end="185:73"><call pos:start="185:13" pos:end="185:73"><name pos:start="185:13" pos:end="185:39">migrate_handle_rp_req_pages</name><argument_list pos:start="185:40" pos:end="185:73">(<argument pos:start="185:41" pos:end="185:42"><expr pos:start="185:41" pos:end="185:42"><name pos:start="185:41" pos:end="185:42">ms</name></expr></argument>, <argument pos:start="185:45" pos:end="185:60"><expr pos:start="185:45" pos:end="185:60"><operator pos:start="185:45" pos:end="185:45">(</operator><name pos:start="185:46" pos:end="185:49">char</name> <operator pos:start="185:51" pos:end="185:51">*</operator><operator pos:start="185:52" pos:end="185:52">)</operator><operator pos:start="185:53" pos:end="185:53">&amp;</operator><name pos:start="185:54" pos:end="185:60"><name pos:start="185:54" pos:end="185:56">buf</name><index pos:start="185:57" pos:end="185:60">[<expr pos:start="185:58" pos:end="185:59"><literal type="number" pos:start="185:58" pos:end="185:59">13</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:63" pos:end="185:67"><expr pos:start="185:63" pos:end="185:67"><name pos:start="185:63" pos:end="185:67">start</name></expr></argument>, <argument pos:start="185:70" pos:end="185:72"><expr pos:start="185:70" pos:end="185:72"><name pos:start="185:70" pos:end="185:72">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>



        <default pos:start="191:9" pos:end="191:16">default:</default>

            <break pos:start="193:13" pos:end="193:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>

    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:38">(<expr pos:start="199:9" pos:end="199:37"><name pos:start="199:9" pos:end="199:10">rp</name> <operator pos:start="199:12" pos:end="199:13">&amp;&amp;</operator> <call pos:start="199:15" pos:end="199:37"><name pos:start="199:15" pos:end="199:33">qemu_file_get_error</name><argument_list pos:start="199:34" pos:end="199:37">(<argument pos:start="199:35" pos:end="199:36"><expr pos:start="199:35" pos:end="199:36"><name pos:start="199:35" pos:end="199:36">rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:40" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:31">

        <expr_stmt pos:start="201:9" pos:end="201:50"><expr pos:start="201:9" pos:end="201:49"><call pos:start="201:9" pos:end="201:49"><name pos:start="201:9" pos:end="201:47">trace_source_return_path_thread_bad_end</name><argument_list pos:start="201:48" pos:end="201:49">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:31"><expr pos:start="203:9" pos:end="203:30"><call pos:start="203:9" pos:end="203:30"><name pos:start="203:9" pos:end="203:26">mark_source_rp_bad</name><argument_list pos:start="203:27" pos:end="203:30">(<argument pos:start="203:28" pos:end="203:29"><expr pos:start="203:28" pos:end="203:29"><name pos:start="203:28" pos:end="203:29">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:42"><expr pos:start="209:5" pos:end="209:41"><call pos:start="209:5" pos:end="209:41"><name pos:start="209:5" pos:end="209:39">trace_source_return_path_thread_end</name><argument_list pos:start="209:40" pos:end="209:41">()</argument_list></call></expr>;</expr_stmt>

<label pos:start="211:1" pos:end="211:4"><name pos:start="211:1" pos:end="211:3">out</name>:</label>

    <expr_stmt pos:start="213:5" pos:end="213:38"><expr pos:start="213:5" pos:end="213:37"><name pos:start="213:5" pos:end="213:30"><name pos:start="213:5" pos:end="213:6">ms</name><operator pos:start="213:7" pos:end="213:8">-&gt;</operator><name pos:start="213:9" pos:end="213:16">rp_state</name><operator pos:start="213:17" pos:end="213:17">.</operator><name pos:start="213:18" pos:end="213:30">from_dst_file</name></name> <operator pos:start="213:32" pos:end="213:32">=</operator> <name pos:start="213:34" pos:end="213:37">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:20"><expr pos:start="215:5" pos:end="215:19"><call pos:start="215:5" pos:end="215:19"><name pos:start="215:5" pos:end="215:15">qemu_fclose</name><argument_list pos:start="215:16" pos:end="215:19">(<argument pos:start="215:17" pos:end="215:18"><expr pos:start="215:17" pos:end="215:18"><name pos:start="215:17" pos:end="215:18">rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="217:5" pos:end="217:16">return <expr pos:start="217:12" pos:end="217:15"><name pos:start="217:12" pos:end="217:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
