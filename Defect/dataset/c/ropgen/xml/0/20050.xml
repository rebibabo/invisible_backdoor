<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20050.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">ff_h264dsp_init</name><parameter_list pos:start="1:21" pos:end="1:89">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:38"><name pos:start="1:22" pos:end="1:35">H264DSPContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:59"><decl pos:start="1:41" pos:end="1:59"><type pos:start="1:41" pos:end="1:59"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:59">bit_depth</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:88"><decl pos:start="1:62" pos:end="1:88"><type pos:start="1:62" pos:end="1:88"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:88">chroma_format_idc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="19:5" pos:end="179:71">

<cpp:undef pos:start="5:1" pos:end="5:11">#<cpp:directive pos:start="5:2" pos:end="5:6">undef</cpp:directive> <name pos:start="5:8" pos:end="5:11">FUNC</name></cpp:undef>

<cpp:define pos:start="7:1" pos:end="7:44">#<cpp:directive pos:start="7:2" pos:end="7:7">define</cpp:directive> <cpp:macro pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:12">FUNC</name><parameter_list pos:start="7:13" pos:end="7:22">(<parameter pos:start="7:14" pos:end="7:14"><type pos:start="7:14" pos:end="7:14"><name pos:start="7:14" pos:end="7:14">a</name></type></parameter>, <parameter pos:start="7:17" pos:end="7:21"><type pos:start="7:17" pos:end="7:21"><name pos:start="7:17" pos:end="7:21">depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="7:24" pos:end="7:44">a ## _ ## depth ## _c</cpp:value></cpp:define>



<cpp:define pos:start="11:1" pos:end="15:58">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:17">ADDPX_DSP</name><parameter_list pos:start="11:18" pos:end="11:24">(<parameter pos:start="11:19" pos:end="11:23"><type pos:start="11:19" pos:end="11:23"><name pos:start="11:19" pos:end="11:23">depth</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="13:5" pos:end="15:58">c-&gt;h264_add_pixels4 = FUNC(ff_h264_add_pixels4, depth);\

    c-&gt;h264_add_pixels8 = FUNC(ff_h264_add_pixels8, depth)</cpp:value></cpp:define>



    <if_stmt pos:start="19:5" pos:end="134:0"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:41">(<expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:17">bit_depth</name> <operator pos:start="19:19" pos:end="19:19">&gt;</operator> <literal type="number" pos:start="19:21" pos:end="19:21">8</literal> <operator pos:start="19:23" pos:end="19:24">&amp;&amp;</operator> <name pos:start="19:26" pos:end="19:34">bit_depth</name> <operator pos:start="19:36" pos:end="19:37">&lt;=</operator> <literal type="number" pos:start="19:39" pos:end="19:40">16</literal></expr>)</condition> <block pos:start="19:43" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:22">

        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><call pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:17">ADDPX_DSP</name><argument_list pos:start="21:18" pos:end="21:21">(<argument pos:start="21:19" pos:end="21:20"><expr pos:start="21:19" pos:end="21:20"><literal type="number" pos:start="21:19" pos:end="21:20">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="134:0">else <block pos:start="23:12" pos:end="134:0">{<block_content pos:start="25:9" pos:end="25:21">

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><call pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:17">ADDPX_DSP</name><argument_list pos:start="25:18" pos:end="25:20">(<argument pos:start="25:19" pos:end="25:19"><expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:define pos:start="31:1" pos:end="133:39">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:16">H264_DSP</name><parameter_list pos:start="31:17" pos:end="31:23">(<parameter pos:start="31:18" pos:end="31:22"><type pos:start="31:18" pos:end="31:22"><name pos:start="31:18" pos:end="31:22">depth</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="33:5" pos:end="133:39">c-&gt;h264_idct_add= FUNC(ff_h264_idct_add, depth);\

    c-&gt;h264_idct8_add= FUNC(ff_h264_idct8_add, depth);\

    c-&gt;h264_idct_dc_add= FUNC(ff_h264_idct_dc_add, depth);\

    c-&gt;h264_idct8_dc_add= FUNC(ff_h264_idct8_dc_add, depth);\

    c-&gt;h264_idct_add16     = FUNC(ff_h264_idct_add16, depth);\

    c-&gt;h264_idct8_add4     = FUNC(ff_h264_idct8_add4, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_idct_add8  = FUNC(ff_h264_idct_add8, depth);\

    else\

        c-&gt;h264_idct_add8  = FUNC(ff_h264_idct_add8_422, depth);\

    c-&gt;h264_idct_add16intra= FUNC(ff_h264_idct_add16intra, depth);\

    c-&gt;h264_luma_dc_dequant_idct= FUNC(ff_h264_luma_dc_dequant_idct, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_chroma_dc_dequant_idct= FUNC(ff_h264_chroma_dc_dequant_idct, depth);\

    else\

        c-&gt;h264_chroma_dc_dequant_idct= FUNC(ff_h264_chroma422_dc_dequant_idct, depth);\

\

    c-&gt;weight_h264_pixels_tab[0]= FUNC(weight_h264_pixels16, depth);\

    c-&gt;weight_h264_pixels_tab[1]= FUNC(weight_h264_pixels8, depth);\

    c-&gt;weight_h264_pixels_tab[2]= FUNC(weight_h264_pixels4, depth);\

    c-&gt;weight_h264_pixels_tab[3]= FUNC(weight_h264_pixels2, depth);\

    c-&gt;biweight_h264_pixels_tab[0]= FUNC(biweight_h264_pixels16, depth);\

    c-&gt;biweight_h264_pixels_tab[1]= FUNC(biweight_h264_pixels8, depth);\

    c-&gt;biweight_h264_pixels_tab[2]= FUNC(biweight_h264_pixels4, depth);\

    c-&gt;biweight_h264_pixels_tab[3]= FUNC(biweight_h264_pixels2, depth);\

\

    c-&gt;h264_v_loop_filter_luma= FUNC(h264_v_loop_filter_luma, depth);\

    c-&gt;h264_h_loop_filter_luma= FUNC(h264_h_loop_filter_luma, depth);\

    c-&gt;h264_h_loop_filter_luma_mbaff= FUNC(h264_h_loop_filter_luma_mbaff, depth);\

    c-&gt;h264_v_loop_filter_luma_intra= FUNC(h264_v_loop_filter_luma_intra, depth);\

    c-&gt;h264_h_loop_filter_luma_intra= FUNC(h264_h_loop_filter_luma_intra, depth);\

    c-&gt;h264_h_loop_filter_luma_mbaff_intra= FUNC(h264_h_loop_filter_luma_mbaff_intra, depth);\

    c-&gt;h264_v_loop_filter_chroma= FUNC(h264_v_loop_filter_chroma, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma= FUNC(h264_h_loop_filter_chroma, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma= FUNC(h264_h_loop_filter_chroma422, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma_mbaff= FUNC(h264_h_loop_filter_chroma_mbaff, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma_mbaff= FUNC(h264_h_loop_filter_chroma422_mbaff, depth);\

    c-&gt;h264_v_loop_filter_chroma_intra= FUNC(h264_v_loop_filter_chroma_intra, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma_intra= FUNC(h264_h_loop_filter_chroma_intra, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma_intra= FUNC(h264_h_loop_filter_chroma422_intra, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma_mbaff_intra= FUNC(h264_h_loop_filter_chroma_mbaff_intra, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma_mbaff_intra= FUNC(h264_h_loop_filter_chroma422_mbaff_intra, depth);\

    c-&gt;h264_loop_filter_strength= NULL;</cpp:value></cpp:define>



    <switch pos:start="137:5" pos:end="171:5">switch <condition pos:start="137:12" pos:end="137:22">(<expr pos:start="137:13" pos:end="137:21"><name pos:start="137:13" pos:end="137:21">bit_depth</name></expr>)</condition> <block pos:start="137:24" pos:end="171:5">{<block_content pos:start="139:5" pos:end="169:14">

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">9</literal></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:20"><expr pos:start="141:9" pos:end="141:19"><call pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:16">H264_DSP</name><argument_list pos:start="141:17" pos:end="141:19">(<argument pos:start="141:18" pos:end="141:18"><expr pos:start="141:18" pos:end="141:18"><literal type="number" pos:start="141:18" pos:end="141:18">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:12">case <expr pos:start="145:10" pos:end="145:11"><literal type="number" pos:start="145:10" pos:end="145:11">10</literal></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:21"><expr pos:start="147:9" pos:end="147:20"><call pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:16">H264_DSP</name><argument_list pos:start="147:17" pos:end="147:20">(<argument pos:start="147:18" pos:end="147:19"><expr pos:start="147:18" pos:end="147:19"><literal type="number" pos:start="147:18" pos:end="147:19">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:12">case <expr pos:start="151:10" pos:end="151:11"><literal type="number" pos:start="151:10" pos:end="151:11">12</literal></expr>:</case>

        <expr_stmt pos:start="153:9" pos:end="153:21"><expr pos:start="153:9" pos:end="153:20"><call pos:start="153:9" pos:end="153:20"><name pos:start="153:9" pos:end="153:16">H264_DSP</name><argument_list pos:start="153:17" pos:end="153:20">(<argument pos:start="153:18" pos:end="153:19"><expr pos:start="153:18" pos:end="153:19"><literal type="number" pos:start="153:18" pos:end="153:19">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:12">case <expr pos:start="157:10" pos:end="157:11"><literal type="number" pos:start="157:10" pos:end="157:11">14</literal></expr>:</case>

        <expr_stmt pos:start="159:9" pos:end="159:21"><expr pos:start="159:9" pos:end="159:20"><call pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:16">H264_DSP</name><argument_list pos:start="159:17" pos:end="159:20">(<argument pos:start="159:18" pos:end="159:19"><expr pos:start="159:18" pos:end="159:19"><literal type="number" pos:start="159:18" pos:end="159:19">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <default pos:start="163:5" pos:end="163:12">default:</default>

        <expr_stmt pos:start="165:9" pos:end="165:33"><expr pos:start="165:9" pos:end="165:32"><call pos:start="165:9" pos:end="165:32"><name pos:start="165:9" pos:end="165:18">av_assert0</name><argument_list pos:start="165:19" pos:end="165:32">(<argument pos:start="165:20" pos:end="165:31"><expr pos:start="165:20" pos:end="165:31"><name pos:start="165:20" pos:end="165:28">bit_depth</name><operator pos:start="165:29" pos:end="165:30">&lt;=</operator><literal type="number" pos:start="165:31" pos:end="165:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:20"><expr pos:start="167:9" pos:end="167:19"><call pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:16">H264_DSP</name><argument_list pos:start="167:17" pos:end="167:19">(<argument pos:start="167:18" pos:end="167:18"><expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="175:5" pos:end="175:71"><if pos:start="175:5" pos:end="175:71">if <condition pos:start="175:8" pos:end="175:17">(<expr pos:start="175:9" pos:end="175:16"><name pos:start="175:9" pos:end="175:16">ARCH_ARM</name></expr>)</condition><block type="pseudo" pos:start="175:19" pos:end="175:71"><block_content pos:start="175:19" pos:end="175:71"> <expr_stmt pos:start="175:19" pos:end="175:71"><expr pos:start="175:19" pos:end="175:70"><call pos:start="175:19" pos:end="175:70"><name pos:start="175:19" pos:end="175:37">ff_h264dsp_init_arm</name><argument_list pos:start="175:38" pos:end="175:70">(<argument pos:start="175:39" pos:end="175:39"><expr pos:start="175:39" pos:end="175:39"><name pos:start="175:39" pos:end="175:39">c</name></expr></argument>, <argument pos:start="175:42" pos:end="175:50"><expr pos:start="175:42" pos:end="175:50"><name pos:start="175:42" pos:end="175:50">bit_depth</name></expr></argument>, <argument pos:start="175:53" pos:end="175:69"><expr pos:start="175:53" pos:end="175:69"><name pos:start="175:53" pos:end="175:69">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="177:5" pos:end="177:75"><if pos:start="177:5" pos:end="177:75">if <condition pos:start="177:8" pos:end="177:21">(<expr pos:start="177:9" pos:end="177:20"><name pos:start="177:9" pos:end="177:20">HAVE_ALTIVEC</name></expr>)</condition><block type="pseudo" pos:start="177:23" pos:end="177:75"><block_content pos:start="177:23" pos:end="177:75"> <expr_stmt pos:start="177:23" pos:end="177:75"><expr pos:start="177:23" pos:end="177:74"><call pos:start="177:23" pos:end="177:74"><name pos:start="177:23" pos:end="177:41">ff_h264dsp_init_ppc</name><argument_list pos:start="177:42" pos:end="177:74">(<argument pos:start="177:43" pos:end="177:43"><expr pos:start="177:43" pos:end="177:43"><name pos:start="177:43" pos:end="177:43">c</name></expr></argument>, <argument pos:start="177:46" pos:end="177:54"><expr pos:start="177:46" pos:end="177:54"><name pos:start="177:46" pos:end="177:54">bit_depth</name></expr></argument>, <argument pos:start="177:57" pos:end="177:73"><expr pos:start="177:57" pos:end="177:73"><name pos:start="177:57" pos:end="177:73">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="179:5" pos:end="179:71"><if pos:start="179:5" pos:end="179:71">if <condition pos:start="179:8" pos:end="179:17">(<expr pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:16">ARCH_X86</name></expr>)</condition><block type="pseudo" pos:start="179:19" pos:end="179:71"><block_content pos:start="179:19" pos:end="179:71"> <expr_stmt pos:start="179:19" pos:end="179:71"><expr pos:start="179:19" pos:end="179:70"><call pos:start="179:19" pos:end="179:70"><name pos:start="179:19" pos:end="179:37">ff_h264dsp_init_x86</name><argument_list pos:start="179:38" pos:end="179:70">(<argument pos:start="179:39" pos:end="179:39"><expr pos:start="179:39" pos:end="179:39"><name pos:start="179:39" pos:end="179:39">c</name></expr></argument>, <argument pos:start="179:42" pos:end="179:50"><expr pos:start="179:42" pos:end="179:50"><name pos:start="179:42" pos:end="179:50">bit_depth</name></expr></argument>, <argument pos:start="179:53" pos:end="179:69"><expr pos:start="179:53" pos:end="179:69"><name pos:start="179:53" pos:end="179:69">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
