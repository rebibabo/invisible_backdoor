<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1767.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">vfio_pci_write_config</name><parameter_list pos:start="1:27" pos:end="3:64">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:36">PCIDevice</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">pdev</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">uint32_t</name></type> <name pos:start="3:37" pos:end="3:40">addr</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:54"><decl pos:start="3:43" pos:end="3:54"><type pos:start="3:43" pos:end="3:54"><name pos:start="3:43" pos:end="3:50">uint32_t</name></type> <name pos:start="3:52" pos:end="3:54">val</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:63"><decl pos:start="3:57" pos:end="3:63"><type pos:start="3:57" pos:end="3:63"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:63">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:5">

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOPCIDevice</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">vdev</name> <init pos:start="7:25" pos:end="7:62">= <expr pos:start="7:27" pos:end="7:62"><call pos:start="7:27" pos:end="7:62"><name pos:start="7:27" pos:end="7:35">DO_UPCAST</name><argument_list pos:start="7:36" pos:end="7:62">(<argument pos:start="7:37" pos:end="7:49"><expr pos:start="7:37" pos:end="7:49"><name pos:start="7:37" pos:end="7:49">VFIOPCIDevice</name></expr></argument>, <argument pos:start="7:52" pos:end="7:55"><expr pos:start="7:52" pos:end="7:55"><name pos:start="7:52" pos:end="7:55">pdev</name></expr></argument>, <argument pos:start="7:58" pos:end="7:61"><expr pos:start="7:58" pos:end="7:61"><name pos:start="7:58" pos:end="7:61">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">val_le</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><call pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:33">cpu_to_le32</name><argument_list pos:start="9:34" pos:end="9:38">(<argument pos:start="9:35" pos:end="9:37"><expr pos:start="9:35" pos:end="9:37"><name pos:start="9:35" pos:end="9:37">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:69"><expr pos:start="13:5" pos:end="13:68"><call pos:start="13:5" pos:end="13:68"><name pos:start="13:5" pos:end="13:31">trace_vfio_pci_write_config</name><argument_list pos:start="13:32" pos:end="13:68">(<argument pos:start="13:33" pos:end="13:51"><expr pos:start="13:33" pos:end="13:51"><name pos:start="13:33" pos:end="13:51"><name pos:start="13:33" pos:end="13:36">vdev</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:46">vbasedev</name><operator pos:start="13:47" pos:end="13:47">.</operator><name pos:start="13:48" pos:end="13:51">name</name></name></expr></argument>, <argument pos:start="13:54" pos:end="13:57"><expr pos:start="13:54" pos:end="13:57"><name pos:start="13:54" pos:end="13:57">addr</name></expr></argument>, <argument pos:start="13:60" pos:end="13:62"><expr pos:start="13:60" pos:end="13:62"><name pos:start="13:60" pos:end="13:62">val</name></expr></argument>, <argument pos:start="13:65" pos:end="13:67"><expr pos:start="13:65" pos:end="13:67"><name pos:start="13:65" pos:end="13:67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:73">/* Write everything to VFIO, let it filter out what we can't write */</comment>

    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="21:23">(<expr pos:start="19:9" pos:end="21:22"><call pos:start="19:9" pos:end="19:75"><name pos:start="19:9" pos:end="19:14">pwrite</name><argument_list pos:start="19:15" pos:end="19:75">(<argument pos:start="19:16" pos:end="19:32"><expr pos:start="19:16" pos:end="19:32"><name pos:start="19:16" pos:end="19:32"><name pos:start="19:16" pos:end="19:19">vdev</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:29">vbasedev</name><operator pos:start="19:30" pos:end="19:30">.</operator><name pos:start="19:31" pos:end="19:32">fd</name></name></expr></argument>, <argument pos:start="19:35" pos:end="19:41"><expr pos:start="19:35" pos:end="19:41"><operator pos:start="19:35" pos:end="19:35">&amp;</operator><name pos:start="19:36" pos:end="19:41">val_le</name></expr></argument>, <argument pos:start="19:44" pos:end="19:46"><expr pos:start="19:44" pos:end="19:46"><name pos:start="19:44" pos:end="19:46">len</name></expr></argument>, <argument pos:start="19:49" pos:end="19:74"><expr pos:start="19:49" pos:end="19:74"><name pos:start="19:49" pos:end="19:67"><name pos:start="19:49" pos:end="19:52">vdev</name><operator pos:start="19:53" pos:end="19:54">-&gt;</operator><name pos:start="19:55" pos:end="19:67">config_offset</name></name> <operator pos:start="19:69" pos:end="19:69">+</operator> <name pos:start="19:71" pos:end="19:74">addr</name></expr></argument>)</argument_list></call>

                <operator pos:start="21:17" pos:end="21:18">!=</operator> <name pos:start="21:20" pos:end="21:22">len</name></expr>)</condition> <block pos:start="21:25" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:75">

        <expr_stmt pos:start="23:9" pos:end="27:75"><expr pos:start="23:9" pos:end="27:74"><call pos:start="23:9" pos:end="27:74"><name pos:start="23:9" pos:end="23:20">error_report</name><argument_list pos:start="23:21" pos:end="27:74">(<argument pos:start="23:22" pos:end="23:73"><expr pos:start="23:22" pos:end="23:73"><literal type="string" pos:start="23:22" pos:end="23:73">"%s(%04x:%02x:%02x.%x, 0x%x, 0x%x, 0x%x) failed: %m"</literal></expr></argument>,

                     <argument pos:start="25:22" pos:end="25:29"><expr pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:29">__func__</name></expr></argument>, <argument pos:start="25:32" pos:end="25:48"><expr pos:start="25:32" pos:end="25:48"><name pos:start="25:32" pos:end="25:48"><name pos:start="25:32" pos:end="25:35">vdev</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:41">host</name><operator pos:start="25:42" pos:end="25:42">.</operator><name pos:start="25:43" pos:end="25:48">domain</name></name></expr></argument>, <argument pos:start="25:51" pos:end="25:64"><expr pos:start="25:51" pos:end="25:64"><name pos:start="25:51" pos:end="25:64"><name pos:start="25:51" pos:end="25:54">vdev</name><operator pos:start="25:55" pos:end="25:56">-&gt;</operator><name pos:start="25:57" pos:end="25:60">host</name><operator pos:start="25:61" pos:end="25:61">.</operator><name pos:start="25:62" pos:end="25:64">bus</name></name></expr></argument>,

                     <argument pos:start="27:22" pos:end="27:36"><expr pos:start="27:22" pos:end="27:36"><name pos:start="27:22" pos:end="27:36"><name pos:start="27:22" pos:end="27:25">vdev</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:31">host</name><operator pos:start="27:32" pos:end="27:32">.</operator><name pos:start="27:33" pos:end="27:36">slot</name></name></expr></argument>, <argument pos:start="27:39" pos:end="27:57"><expr pos:start="27:39" pos:end="27:57"><name pos:start="27:39" pos:end="27:57"><name pos:start="27:39" pos:end="27:42">vdev</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:48">host</name><operator pos:start="27:49" pos:end="27:49">.</operator><name pos:start="27:50" pos:end="27:57">function</name></name></expr></argument>, <argument pos:start="27:60" pos:end="27:63"><expr pos:start="27:60" pos:end="27:63"><name pos:start="27:60" pos:end="27:63">addr</name></expr></argument>, <argument pos:start="27:66" pos:end="27:68"><expr pos:start="27:66" pos:end="27:68"><name pos:start="27:66" pos:end="27:68">val</name></expr></argument>, <argument pos:start="27:71" pos:end="27:73"><expr pos:start="27:71" pos:end="27:73"><name pos:start="27:71" pos:end="27:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:38">/* MSI/MSI-X Enabling/Disabling */</comment>

    <if_stmt pos:start="35:5" pos:end="105:5"><if pos:start="35:5" pos:end="73:5">if <condition pos:start="35:8" pos:end="37:69">(<expr pos:start="35:9" pos:end="37:68"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:12">pdev</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:25">cap_present</name></name> <operator pos:start="35:27" pos:end="35:27">&amp;</operator> <name pos:start="35:29" pos:end="35:44">QEMU_PCI_CAP_MSI</name> <operator pos:start="35:46" pos:end="35:47">&amp;&amp;</operator>

        <call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:22">ranges_overlap</name><argument_list pos:start="37:23" pos:end="37:68">(<argument pos:start="37:24" pos:end="37:27"><expr pos:start="37:24" pos:end="37:27"><name pos:start="37:24" pos:end="37:27">addr</name></expr></argument>, <argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">len</name></expr></argument>, <argument pos:start="37:35" pos:end="37:47"><expr pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:38">pdev</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:47">msi_cap</name></name></expr></argument>, <argument pos:start="37:50" pos:end="37:67"><expr pos:start="37:50" pos:end="37:67"><name pos:start="37:50" pos:end="37:67"><name pos:start="37:50" pos:end="37:53">vdev</name><operator pos:start="37:54" pos:end="37:55">-&gt;</operator><name pos:start="37:56" pos:end="37:67">msi_cap_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:71" pos:end="73:5">{<block_content pos:start="39:9" pos:end="71:9">

        <decl_stmt pos:start="39:9" pos:end="39:56"><decl pos:start="39:9" pos:end="39:22"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:22">is_enabled</name></decl>, <decl pos:start="39:25" pos:end="39:55"><type ref="prev" pos:start="39:9" pos:end="39:11"/><name pos:start="39:25" pos:end="39:35">was_enabled</name> <init pos:start="39:37" pos:end="39:55">= <expr pos:start="39:39" pos:end="39:55"><call pos:start="39:39" pos:end="39:55"><name pos:start="39:39" pos:end="39:49">msi_enabled</name><argument_list pos:start="39:50" pos:end="39:55">(<argument pos:start="39:51" pos:end="39:54"><expr pos:start="39:51" pos:end="39:54"><name pos:start="39:51" pos:end="39:54">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><call pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:32">pci_default_write_config</name><argument_list pos:start="43:33" pos:end="43:54">(<argument pos:start="43:34" pos:end="43:37"><expr pos:start="43:34" pos:end="43:37"><name pos:start="43:34" pos:end="43:37">pdev</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">addr</name></expr></argument>, <argument pos:start="43:46" pos:end="43:48"><expr pos:start="43:46" pos:end="43:48"><name pos:start="43:46" pos:end="43:48">val</name></expr></argument>, <argument pos:start="43:51" pos:end="43:53"><expr pos:start="43:51" pos:end="43:53"><name pos:start="43:51" pos:end="43:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:18">is_enabled</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:38"><name pos:start="47:22" pos:end="47:32">msi_enabled</name><argument_list pos:start="47:33" pos:end="47:38">(<argument pos:start="47:34" pos:end="47:37"><expr pos:start="47:34" pos:end="47:37"><name pos:start="47:34" pos:end="47:37">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="71:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:25">(<expr pos:start="51:13" pos:end="51:24"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:24">was_enabled</name></expr>)</condition> <block pos:start="51:27" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:13">

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:27">(<expr pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:26">is_enabled</name></expr>)</condition> <block pos:start="53:29" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:38">

                <expr_stmt pos:start="55:17" pos:end="55:38"><expr pos:start="55:17" pos:end="55:37"><call pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:31">vfio_msi_enable</name><argument_list pos:start="55:32" pos:end="55:37">(<argument pos:start="55:33" pos:end="55:36"><expr pos:start="55:33" pos:end="55:36"><name pos:start="55:33" pos:end="55:36">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="71:9">else <block pos:start="59:16" pos:end="71:9">{<block_content pos:start="61:13" pos:end="69:13">

            <if_stmt pos:start="61:13" pos:end="69:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:28">(<expr pos:start="61:17" pos:end="61:27"><operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:27">is_enabled</name></expr>)</condition> <block pos:start="61:30" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:39">

                <expr_stmt pos:start="63:17" pos:end="63:39"><expr pos:start="63:17" pos:end="63:38"><call pos:start="63:17" pos:end="63:38"><name pos:start="63:17" pos:end="63:32">vfio_msi_disable</name><argument_list pos:start="63:33" pos:end="63:38">(<argument pos:start="63:34" pos:end="63:37"><expr pos:start="63:34" pos:end="63:37"><name pos:start="63:34" pos:end="63:37">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="69:13">else <block pos:start="65:20" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:38">

                <expr_stmt pos:start="67:17" pos:end="67:38"><expr pos:start="67:17" pos:end="67:37"><call pos:start="67:17" pos:end="67:37"><name pos:start="67:17" pos:end="67:31">vfio_update_msi</name><argument_list pos:start="67:32" pos:end="67:37">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="99:5">else if <condition pos:start="73:15" pos:end="75:67">(<expr pos:start="73:16" pos:end="75:66"><name pos:start="73:16" pos:end="73:32"><name pos:start="73:16" pos:end="73:19">pdev</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:32">cap_present</name></name> <operator pos:start="73:34" pos:end="73:34">&amp;</operator> <name pos:start="73:36" pos:end="73:52">QEMU_PCI_CAP_MSIX</name> <operator pos:start="73:54" pos:end="73:55">&amp;&amp;</operator>

        <call pos:start="75:9" pos:end="75:66"><name pos:start="75:9" pos:end="75:22">ranges_overlap</name><argument_list pos:start="75:23" pos:end="75:66">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">addr</name></expr></argument>, <argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">len</name></expr></argument>, <argument pos:start="75:35" pos:end="75:48"><expr pos:start="75:35" pos:end="75:48"><name pos:start="75:35" pos:end="75:48"><name pos:start="75:35" pos:end="75:38">pdev</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:48">msix_cap</name></name></expr></argument>, <argument pos:start="75:51" pos:end="75:65"><expr pos:start="75:51" pos:end="75:65"><name pos:start="75:51" pos:end="75:65">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:69" pos:end="99:5">{<block_content pos:start="77:9" pos:end="97:9">

        <decl_stmt pos:start="77:9" pos:end="77:57"><decl pos:start="77:9" pos:end="77:22"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:22">is_enabled</name></decl>, <decl pos:start="77:25" pos:end="77:56"><type ref="prev" pos:start="77:9" pos:end="77:11"/><name pos:start="77:25" pos:end="77:35">was_enabled</name> <init pos:start="77:37" pos:end="77:56">= <expr pos:start="77:39" pos:end="77:56"><call pos:start="77:39" pos:end="77:56"><name pos:start="77:39" pos:end="77:50">msix_enabled</name><argument_list pos:start="77:51" pos:end="77:56">(<argument pos:start="77:52" pos:end="77:55"><expr pos:start="77:52" pos:end="77:55"><name pos:start="77:52" pos:end="77:55">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:55"><expr pos:start="81:9" pos:end="81:54"><call pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:32">pci_default_write_config</name><argument_list pos:start="81:33" pos:end="81:54">(<argument pos:start="81:34" pos:end="81:37"><expr pos:start="81:34" pos:end="81:37"><name pos:start="81:34" pos:end="81:37">pdev</name></expr></argument>, <argument pos:start="81:40" pos:end="81:43"><expr pos:start="81:40" pos:end="81:43"><name pos:start="81:40" pos:end="81:43">addr</name></expr></argument>, <argument pos:start="81:46" pos:end="81:48"><expr pos:start="81:46" pos:end="81:48"><name pos:start="81:46" pos:end="81:48">val</name></expr></argument>, <argument pos:start="81:51" pos:end="81:53"><expr pos:start="81:51" pos:end="81:53"><name pos:start="81:51" pos:end="81:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:40"><expr pos:start="85:9" pos:end="85:39"><name pos:start="85:9" pos:end="85:18">is_enabled</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:39"><name pos:start="85:22" pos:end="85:33">msix_enabled</name><argument_list pos:start="85:34" pos:end="85:39">(<argument pos:start="85:35" pos:end="85:38"><expr pos:start="85:35" pos:end="85:38"><name pos:start="85:35" pos:end="85:38">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:39">(<expr pos:start="89:13" pos:end="89:38"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:24">was_enabled</name> <operator pos:start="89:26" pos:end="89:27">&amp;&amp;</operator> <name pos:start="89:29" pos:end="89:38">is_enabled</name></expr>)</condition> <block pos:start="89:41" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:35">

            <expr_stmt pos:start="91:13" pos:end="91:35"><expr pos:start="91:13" pos:end="91:34"><call pos:start="91:13" pos:end="91:34"><name pos:start="91:13" pos:end="91:28">vfio_msix_enable</name><argument_list pos:start="91:29" pos:end="91:34">(<argument pos:start="91:30" pos:end="91:33"><expr pos:start="91:30" pos:end="91:33"><name pos:start="91:30" pos:end="91:33">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="97:9">else if <condition pos:start="93:19" pos:end="93:46">(<expr pos:start="93:20" pos:end="93:45"><name pos:start="93:20" pos:end="93:30">was_enabled</name> <operator pos:start="93:32" pos:end="93:33">&amp;&amp;</operator> <operator pos:start="93:35" pos:end="93:35">!</operator><name pos:start="93:36" pos:end="93:45">is_enabled</name></expr>)</condition> <block pos:start="93:48" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:36">

            <expr_stmt pos:start="95:13" pos:end="95:36"><expr pos:start="95:13" pos:end="95:35"><call pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:29">vfio_msix_disable</name><argument_list pos:start="95:30" pos:end="95:35">(<argument pos:start="95:31" pos:end="95:34"><expr pos:start="95:31" pos:end="95:34"><name pos:start="95:31" pos:end="95:34">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="105:5">else <block pos:start="99:12" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:55">

        <comment type="block" pos:start="101:9" pos:end="101:68">/* Write everything to QEMU to keep emulated bits correct */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:55"><expr pos:start="103:9" pos:end="103:54"><call pos:start="103:9" pos:end="103:54"><name pos:start="103:9" pos:end="103:32">pci_default_write_config</name><argument_list pos:start="103:33" pos:end="103:54">(<argument pos:start="103:34" pos:end="103:37"><expr pos:start="103:34" pos:end="103:37"><name pos:start="103:34" pos:end="103:37">pdev</name></expr></argument>, <argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">addr</name></expr></argument>, <argument pos:start="103:46" pos:end="103:48"><expr pos:start="103:46" pos:end="103:48"><name pos:start="103:46" pos:end="103:48">val</name></expr></argument>, <argument pos:start="103:51" pos:end="103:53"><expr pos:start="103:51" pos:end="103:53"><name pos:start="103:51" pos:end="103:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
